<div class="post-text" itemprop="text">
<p>I tried to implement this tip <a href="https://docs.python.org/3/faq/programming.html#id55" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html#id55</a> in order to write some non-pythonic code, where I'd use a class with delegation (<code>DelegatedLoanContract</code>) instead of a subclass (<code>LoanContract(ContractsWriter)</code>). But I'm getting: <code>TypeError: unsupported operand type(s) for +=: 'DelegatedLoanContract' and 'str'</code>. Any idea how to solve it?</p>
<p>Here's the code: <a href="https://github.com/Laurentiu-Andronache/fun-with-delegation" rel="nofollow noreferrer">https://github.com/Laurentiu-Andronache/fun-with-delegation</a></p>
<p>Here's also a minimal version of the code:</p>
<pre><code>class ContractsWriter:
    def __init__(self, signee_1, signee_2):
        self.signee_1 = signee_1
        self.signee_2 = signee_2
        self.contract_rules = []

    def __add__(self, other):
        if isinstance(other, str):
            self.contract_rules.append(other)
            return self
        elif isinstance(other, list):
            self.contract_rules.extend(other)
            return self
        else:
            raise NotImplemented('Invalid rule.')

class DelegatedLoanContract:
    def __init__(self, *args, **kwargs):
        self.__dict__['_contract'] = ContractsWriter(*args, **kwargs)
        self._contract.header = 'loan'

    def __getattr__(self, item):
        return getattr(self._contract, item)

    def __setattr__(self, key, value):
        setattr(self._contract, key, value)

if __name__ == '__main__':
    loan_contract = DelegatedLoanContract('Alan', 'John')
    loan_contract += 'Signee_1 will load 2,000 EUR to Signee_2.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are talking about delegation, you have to write <code>__iadd__</code> method of <code>DelegatedLoanContract</code> that will delegate to <code>__add__</code> method of <code>ContractsWriter</code>:</p>
<pre><code>class DelegatedLoanContract:
    ... # your code here

    def __iadd__(self, other):
        self._contract += other
        return self

if __name__ == '__main__':
    loan_contract = DelegatedLoanContract('Alan', 'John')
    loan_contract += 'Signee_1 will load 2,000 EUR to Signee_2.'
    print(loan_contract._contract.contract_rules)
    # prints ['Signee_1 will load 2,000 EUR to Signee_2.']
</code></pre>
</div>
<span class="comment-copy">Include a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in your question. A link to your code is not sufficient.</span>
<span class="comment-copy">You need to post code in the question itself, not just as an external link. (Also, asking people not to downvote isn't a great idea.)</span>
<span class="comment-copy">Also, don't tag <code>python-2.7</code> if you're using Python 3.</span>
<span class="comment-copy">I fixed all now! :)</span>
<span class="comment-copy">But why don't <code>__getattr__</code> and <code>__setattr__</code> work for all of the undefined methods at once, including dunder methods? I thought that not finding <code>__add__</code> as a method of DelegatedLoanContract would invoke <code>__setattr__('__add__', 'Signee_1 will load 2,000 EUR to Signee_2.')</code>...</span>
<span class="comment-copy">They ignore magic methods like <code>__add__</code></span>
<span class="comment-copy">You are welcome.</span>
<span class="comment-copy">No, this statement is about variables defined like <code>__variable</code>, without double underscores at the end. These variables can be accesses via <code>_classname__variable</code>. Magic methods don't follow this rule.</span>
<span class="comment-copy">I found a doc that can explain something about it, see it <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">here</a>. Also read the <i>Note</i> under <code>__getattribute__</code></span>
