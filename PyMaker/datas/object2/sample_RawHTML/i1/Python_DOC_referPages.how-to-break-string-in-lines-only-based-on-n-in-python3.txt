<div class="post-text" itemprop="text">
<p>I'm trying to read a text file that contains a lot of non-traditional line breaks.</p>
<p>There are two files, both with 18846 lines. But when I read one of these files in python3 and break into lines, it results in 19010 lines.</p>
<p>This is not repeated either with python2 nor with unix commands like <code>awk 'END {print NR}' file</code> and <code>wc -l</code>. I know that python3 does split the rows based on 12 criteria (named in [1]).</p>
<p>I've tried strategies like using replace:</p>
<pre><code>content = content.replace (u"\v", "")
content = content.replace (u"\x0b", "")
content = content.replace (u"\f", "")
content = content.replace (u"\x0c", "")
content = content.replace (u"\x1c", "")
content = content.replace (u"\x1d", "")
content = content.replace (u"\x1e", "")
content = content.replace (u"\x85", "")
content = content.replace (u"\u2029", "")
content = content.replace (u"\u2028", "")
content = content.replace (u"\u001D", "")
</code></pre>
<p>opening files with "rt" and even using ftfy, but no alternative was successful.</p>
<p>Does anyone have any idea how to read the files breaking on lines using the same strategies employed by wc and awk?
It may even be altering such a file.</p>
<p>[1] <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#str.splitlines</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>io.open</code>  and set the <code>newline</code> argument to the line ending of your choice (like <code>\n</code> as in Unix tools):</p>
<pre><code>with io.open(file_path, 'r', encoding='utf8', newline='\n') as sr:
    for line in sr:
        # do stuff
</code></pre>
<p>Note you may as well want to remove all other line breaks or replace them with spaces. It is possible to do with a regex like</p>
<pre><code>import re
line = re.sub('[\u000B\u000C\u000D\u0085\u2028\u2029]+', ' ', line)
</code></pre>
<p>where the pattern matches one or more chars like</p>
<ul>
<li><code>\u000B</code> - VT, vertical tab</li>
<li><code>\u000C</code> - FF, form feed</li>
<li><code>\u000D</code> - CR, carriage return</li>
<li><code>\u0085</code> - NEL, next line (a very frequent one)</li>
<li><code>\u2028</code> - LSEP, line separator</li>
<li><code>\u2029</code> - PSEP, paragraph separator</li>
</ul>
</div>
<span class="comment-copy">Can you not figure out what type of line break your editor is using to break the lines into the 18846 lines? Then split() using that character. Example      <code>fd = open('text')</code> <code>data = fd.read()</code> <code>lines = data.split('\n') # or \r or whatever is being used with your editor</code></span>
