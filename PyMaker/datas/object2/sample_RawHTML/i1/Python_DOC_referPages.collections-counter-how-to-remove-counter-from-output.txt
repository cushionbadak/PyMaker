<div class="post-text" itemprop="text">
<p>The output is:
<code>Counter({'l': 2, 'h': 1, 'e': 1, 'o': 1})</code>
Can I remove the "Counter" word?</p>
<pre><code>from collections import Counter

word = "hello"

print(Counter(word))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert a <code>Counter</code> back into a normal dictionary, just do this:</p>
<pre><code>d = dict(Counter(word))
</code></pre>
<p>Now it'll look as usual when you print it:</p>
<pre><code>print(d)
</code></pre>
<p>It really doesn't make any difference, though. <code>Counter</code> <em>is</em> a dictionary after all. I guess it's ok if you want it to look pretty when printing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course, you can pass the object to <code>json.dumps</code>. <code>json</code> only sees the dictionary, not the subclass</p>
<pre><code>from collections import Counter
import json

word = "hello"
c = Counter(word)

print(json.dumps(c))
</code></pre>
<p>result:</p>
<pre><code>{"l": 2, "o": 1, "h": 1, "e": 1}
</code></pre>
<p>that avoids to create a copy as a basic dictionary just to display it properly. 
More ways to print the contents using just loops on key/values and prints: <a href="https://stackoverflow.com/questions/20316299/formatting-output-of-counter">Formatting output of Counter</a></p>
<p>Another way is to force basic <code>dict</code> representation method:</p>
<pre><code>print(dict.__repr__(Counter(word)))
</code></pre>
<p>result:</p>
<pre><code>{'h': 1, 'o': 1, 'e': 1, 'l': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can remove the string <code>'Counter()'</code> with the function <code>strip()</code>:</p>
<pre><code>c = Counter('AA')

print(repr(c).strip('Counter()'))
# {'A': 2}
</code></pre>
<p>or</p>
<pre><code>print(c.__repr__().strip('Counter()')) 
# {'A': 2}
</code></pre>
<p>Alternatively you can use string slicing. It should be more efficient (according to @jonrsharpe):</p>
<pre><code>print(c.__repr__()[8:-1])) 
# {'A': 2}
</code></pre>
</div>
<span class="comment-copy">You can convert a <code>Counter</code> back to a normal dictionary, if that's what you mean? It's covered <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">in the docs</a>.</span>
<span class="comment-copy">@jonrsharpe I'm pretty sure the order will be lost in Python &lt; 3.7, though</span>
<span class="comment-copy">@DeepSpace <i>what</i> order? <code>Counter</code> isn't ordered either.</span>
<span class="comment-copy">@jonrsharpe it is (at least its <code>str</code> representation): <code>print(Counter('aaabbc')) # Counter({'a': 3, 'b': 2, 'c': 1})</code></span>
<span class="comment-copy">@DeepSpace that's an implementation detail that's not even mentioned in the docs, it's because they call <code>most_common</code> instead of just <code>items</code> <a href="https://github.com/python/cpython/blob/3.7/Lib/collections/__init__.py#L707" rel="nofollow noreferrer">in the <code>__repr__</code></a>.</span>
<span class="comment-copy">But the order will be lost (at least in Python &lt; 3.7): <code>print(dict(Counter('aaabbc'))) # {'c': 1, 'a': 3, 'b': 2}</code></span>
<span class="comment-copy">@DeepSpace that's ok, you must not count on the order of a dictionary, it's not guaranteed for all Python versions. Besides, that's not a requirement in the question, and anyway <code>Counter</code> didn't preserve the order, either.</span>
<span class="comment-copy">Dictionaries are not meant for ordered set of values.</span>
<span class="comment-copy">@IrfanuddinShafi No, they aren't (usually). <b>But</b> when printing <code>Counter</code> you <b>do</b> get an ordered output (follow the rest of the comments, <code>Counter.__repr__</code> is implemented using <code>.most_common</code> in most if not all Python implementations). It is at least worth mentioning that when converting to a "normal" <code>dict</code> this ordered output will be lost</span>
<span class="comment-copy">@DeepSpace you've been in SO long enough to know it: if it's not explicitly stated in the question, it's not a requirement, otherwise OP wouldn't have accepted this answer. It's incorrect to assume a non-written requirement, unless explicitly stated. And <code>Counter</code> doesn't preserve the input order, so there was no order to preserve in the first place. You're depending on an implementation detail.</span>
<span class="comment-copy">If you're mangling strings, at that point you might as well do <code>[8:-1]</code>; it'd be more efficient.</span>
