<div class="post-text" itemprop="text">
<p>In the type hint system, <code>Optional[T]</code> is said to be equivalent to <code>Union[T, None]</code></p>
<p>Does this work for multiple type arguments? ie, </p>
<p>does <code>Optional[T,U]</code> break out to <code>Union[T,U,None]</code>, or do I need to write it as <code>Optional[Union[T,U]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You may think of the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typing</code></a> library as a specification on how to declare certain types. If something is not defined in that specification then it's always better assume it to be an undefined behavior.</p>
<p>However in the particular case of python and typing we have a kind-of-reference static type checker which is <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a>. So in order to get an answer for your question, or just programmatically check types, we may use it and see if it shows any warnings.</p>
<p>Here's an example:</p>
<pre><code>$ cat check_optional.py 
import typing
def fn(x: typing.Optional[int, str]):
    pass
$ mypy check_optional.py 
check_optional.py:3: error: Optional[...] must have exactly one type argument
</code></pre>
<p>So no, <code>Optional[T, U]</code> is not possible in terms of mypy even if there's no trouble declaring it within the <code>typing</code> library.</p>
<p>Besides from "functional programming" perspective both <code>Optional</code> and <code>Union</code> are two distinct but well-known and well defined <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)" rel="nofollow noreferrer">monads</a>. A combination of two monads (<code>Optional[T, U, None]</code>) is another monad, which however behaves differently than <code>Optional</code> and thus should not be named so.</p>
</div>
<span class="comment-copy">Looks like <code>Optional[int, str]</code> gives a TypeError. Then again, <code>Union[None, int, str]</code> takes less space than what would be more readable, namely <code>Optional[Union[int, str]]</code>.</span>
<span class="comment-copy">The biggest point here is that if you have a function whose argument can be one of a number of types OR nothing, you should probably be more explicit about what that type means. <code>Username = typing.TypeVar('Username', str); UserId = typing.TypeVar('UserId', int); UserIdentifier = typing.Union[Username, UserId]; Optional[UserIdentifier]</code> now that <i>means</i> something</span>
<span class="comment-copy">@AdamSmith I have an experimental use-case for doing mutations on a database entry. I wanted to denote three possible states for any field in a dataclass where the dataclass represents a mutation on the database entry. Say a field <code>t</code> is of type <code>T</code>. Either <code>t</code> is of <code>T</code>, therefore present and needs to be updated, <code>t</code> is <code>None</code> and should be ignored, or <code>t</code> is some marker class <code>type(Removal)</code> and needs to deleted. My fields then looked like <code>foo: Optional[Union[str, Removal]]</code>. Is there a cleaner way to reuse this typing format? Somehow get to say <code>foo: Modifiable[str]</code></span>
<span class="comment-copy">@flakes sure! Types are just objects like any others. <code>Modifiable = Optional[Union[str, Removal]]</code> is valid.</span>
<span class="comment-copy">If you specifically want to be able to specify your modifiable type (e.g. <code>Modifiable[str]</code> or <code>Modifiable[int]</code>) then you can define it the same way Python internally defines <code>Union</code> or <code>Optional</code>. See <a href="https://gitlab.com/snippets/1836727" rel="nofollow noreferrer">gitlab.com/snippets/1836727</a></span>
<span class="comment-copy">Thanks for the mypy tutorial, I will use it in the future! In that last comment, did you mean to write that <code>Union[T, U, None]</code> is different to the optional?</span>
<span class="comment-copy">Glad to hear! On the last paragraph I meant that <code>Union[T, U, None]</code> is isomorphic (=same) to <code>Optional[Union[T, U]]</code>, but not to a general <code>Optional[X]</code>.</span>
