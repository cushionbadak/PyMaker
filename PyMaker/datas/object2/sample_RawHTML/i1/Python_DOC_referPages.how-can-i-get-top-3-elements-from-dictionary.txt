<div class="post-text" itemprop="text">
<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>
<p>I can sort on the keys, but how can I sort based on the values?</p>
<p>Note: I have read Stack Overflow question here <em><a href="https://stackoverflow.com/questions/72899">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listâ€”probably a list of tuples.</p>
<p>For instance,</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
</code></pre>
<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>
<p>And for those wishing to sort on keys instead of values:</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))
</code></pre>
<p>In Python3 since unpacking is not allowed <a href="https://stackoverflow.com/a/15712231/4293057">[1]</a> we can use </p>
<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])
</code></pre>
<p>If you want the output as a dict, you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>import collections

sorted_dict = OrderedDict(sorted_x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>As simple as: <code>sorted(dict1, key=dict1.get)</code></h2>
<p>Well, it is actually possible to do a "sort by dictionary values". Recently I had to do that in a Code Golf (Stack Overflow question <em><a href="https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549">Code golf: Word frequency chart</a></em>). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. </p>
<p>If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:</p>
<pre><code>from collections import defaultdict
d = defaultdict(int)
for w in text.split():
  d[w] += 1
</code></pre>
<p>then you can get a list of the words, ordered by frequency of use with <code>sorted(d, key=d.get)</code> - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . </p>
<pre><code>for w in sorted(d, key=d.get, reverse=True):
  print w, d[w]
</code></pre>
<p>I am writing this detailed explanation to illustrate what people often mean by "I can easily sort a dictionary by key, but how do I sort by value" - and I think the OP was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use:</p>
<p><code>sorted(d.items(), key=lambda x: x[1])</code></p>
<p>This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dicts can't be sorted, but you can build a sorted list from them.</p>
<p>A sorted list of dict values:</p>
<pre><code>sorted(d.values())
</code></pre>
<p>A list of (key, value) pairs, sorted by value:</p>
<pre><code>from operator import itemgetter
sorted(d.items(), key=itemgetter(1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In recent Python 2.7, we have the new <a href="http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections" rel="noreferrer">OrderedDict</a> type, which remembers the order in which the items were added.</p>
<pre><code>&gt;&gt;&gt; d = {"third": 3, "first": 1, "fourth": 4, "second": 2}

&gt;&gt;&gt; for k, v in d.items():
...     print "%s: %s" % (k, v)
...
second: 2
fourth: 4
third: 3
first: 1

&gt;&gt;&gt; d
{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}
</code></pre>
<p>To make a new ordered dictionary from the original, sorting by the values:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))
</code></pre>
<p>The OrderedDict behaves like a normal dict:</p>
<pre><code>&gt;&gt;&gt; for k, v in d_sorted_by_value.items():
...     print "%s: %s" % (k, v)
...
first: 1
second: 2
third: 3
fourth: 4

&gt;&gt;&gt; d_sorted_by_value
OrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>UPDATE: 5 DECEMBER 2015 using Python 3.5</strong></p>
<p>Whilst I found the accepted answer useful, I was also surprised that it hasn't been updated to reference <strong><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer">OrderedDict</a></strong> from the standard library <strong>collections</strong> module as a viable, modern alternative - designed to solve exactly this type of problem.</p>
<pre><code>from operator import itemgetter
from collections import OrderedDict

x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = OrderedDict(sorted(x.items(), key=itemgetter(1)))
# OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])
</code></pre>
<p>The official <strong><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer">OrderedDict</a></strong> documentation offers a very similar example too, but using a lambda for the sort function:</p>
<pre><code># regular unsorted dictionary
d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

# dictionary sorted by value
OrderedDict(sorted(d.items(), key=lambda t: t[1]))
# OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can often be very handy to use <b><a href="http://docs.python.org/library/collections.html#collections.namedtuple" rel="noreferrer">namedtuple</a></b>. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score':</p>
<pre><code>import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
</code></pre>
<p>sorting with lowest score first:</p>
<pre><code>worst = sorted(Player(v,k) for (k,v) in d.items())
</code></pre>
<p>sorting with highest score first:</p>
<pre><code>best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
</code></pre>
<p>Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this:</p>
<pre><code>player = best[1]
player.name
    'Richard'
player.score
    7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pretty much the same as <a href="https://stackoverflow.com/a/613207/11044033">Hank Gay's answer</a>:</p>
<pre><code>sorted([(value,key) for (key,value) in mydict.items()])
</code></pre>
<p>Or optimized slightly as suggested by John Fouhy:</p>
<pre><code>sorted((value,key) for (key,value) in mydict.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>As of <a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="noreferrer">Python 3.6</a> the built-in dict will be ordered</h1>
<p>Good news, so the OP's original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order.</p>
<p>If say the resulting two column table expressions from a database query like:</p>
<pre><code>SELECT a_key, a_value FROM a_table ORDER BY a_value;
</code></pre>
<p>would be stored in two Python tuples, k_seq and v_seq (aligned by numerical index and with the same length of course), then:</p>
<pre><code>k_seq = ('foo', 'bar', 'baz')
v_seq = (0, 1, 42)
ordered_map = dict(zip(k_seq, v_seq))
</code></pre>
<p>Allow to output later as:</p>
<pre><code>for k, v in ordered_map.items():
    print(k, v)
</code></pre>
<p>yielding in this case (for the new Python 3.6+ built-in dict!):</p>
<pre><code>foo 0
bar 1
baz 42
</code></pre>
<p>in the same ordering per value of v.</p>
<p>Where in the Python 3.5 install on my machine it currently yields:</p>
<pre><code>bar 1
foo 0
baz 42
</code></pre>
<h2>Details:</h2>
<p>As proposed in 2012 by Raymond Hettinger (cf. mail on python-dev with subject <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">"More compact dictionaries with faster iteration"</a>) and now (in 2016) announced in a mail by Victor Stinner to python-dev with subject <a href="https://mail.python.org/pipermail/python-dev/2016-September/146327.html" rel="noreferrer">"Python 3.6 dict becomes compact and gets a private version; and keywords become ordered"</a> due to the fix/implementation of issue 27350 <a href="http://bugs.python.org/issue27350" rel="noreferrer">"Compact and ordered dict"</a> in Python 3.6 we will now be able, to use a built-in dict to maintain insert order!!</p>
<p>Hopefully this will lead to a thin layer OrderedDict implementation as a first step. As @JimFasarakis-Hilliard indicated, some see use cases for the OrderedDict type also in the future. I think the Python community at large will carefully inspect, if this will stand the test of time, and what the next steps will be.</p>
<p>Time to rethink our coding habits to not miss the possibilities opened by stable ordering of:</p>
<ul>
<li>Keyword arguments and</li>
<li>(intermediate) dict storage</li>
</ul>
<p>The first because it eases dispatch in the implementation of functions and methods in some cases.</p>
<p>The second as it encourages to more easily use <code>dict</code>s as intermediate storage in processing pipelines.</p>
<p>Raymond Hettinger kindly provided documentation explaining "<a href="https://dl.dropboxusercontent.com/u/3967849/sfmu2/_build/html/goal.html" rel="noreferrer" title="The Tech Behind Python 3.6 Dictionaries">The Tech Behind Python 3.6 Dictionaries</a>" - from his San Francisco Python Meetup Group presentation 2016-DEC-08.</p>
<p>And maybe quite some Stack Overflow high decorated question and answer pages will receive variants of this information and many high quality answers will require a per version update too.</p>
<h3>Caveat Emptor (but also see below update 2017-12-15):</h3>
<p>As @ajcr rightfully notes: "The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon." (from the <a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="noreferrer">whatsnew36</a>) not nit picking, <strong>but</strong> the citation was cut a bit pessimistic ;-). It continues as " (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5)."</p>
<p>So as in some human languages (e.g. German), usage shapes the language, and the will now has been declared ... in <a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="noreferrer">whatsnew36</a>.</p>
<h3>Update 2017-12-15:</h3>
<p>In a <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">mail to the python-dev list</a>, Guido van Rossum declared:</p>
<blockquote>
<p>Make it so. "Dict keeps insertion order" is the ruling. Thanks! </p>
</blockquote>
<p>So, the version 3.6 CPython side-effect of dict insertion ordering is now becoming part of the language spec (and not anymore only an implementation detail). That mail thread also surfaced some distinguishing design goals for <code>collections.OrderedDict</code> as reminded by Raymond Hettinger during discussion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given dictionary</p>
<pre><code>e = {1:39, 4:34, 7:110, 2:87}
</code></pre>
<p>Sorting</p>
<pre><code>sred = sorted(e.items(), key=lambda value: value[1])
</code></pre>
<p>Result </p>
<pre><code>[(4, 34), (1, 39), (2, 87), (7, 110)]
</code></pre>
<p>You can use a lambda function to sort things up by value and store them processed inside a variable, in this case <strong>sred</strong> with <strong>e</strong> the original dictionary.</p>
<p>Hope that helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem, and I solved it like this:</p>
<pre><code>WantedOutput = sorted(MyDict, key=lambda x : MyDict[x]) 
</code></pre>
<p>(People who answer "It is not possible to sort a dict" did not read the question! In fact, "I can sort on the keys, but how can I sort based on the values?" clearly means that he wants a list of the keys sorted according to the value of their values.)</p>
<p>Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list).</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.7, simply do:</p>
<pre class="lang-py prettyprint-override"><code>from collections import OrderedDict
# regular unsorted dictionary
d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

# dictionary sorted by key
OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

# dictionary sorted by value
OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])
</code></pre>
<p>copy-paste from : <a href="http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes">http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes</a></p>
<p>Enjoy ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Technically, dictionaries aren't sequences, and therefore can't be sorted. You can do something like</p>
<pre><code>sorted(a_dictionary.values())
</code></pre>
<p>assuming performance isn't a huge deal.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the code:</p>
<pre><code>import operator
origin_list = [
    {"name": "foo", "rank": 0, "rofl": 20000},
    {"name": "Silly", "rank": 15, "rofl": 1000},
    {"name": "Baa", "rank": 300, "rofl": 20},
    {"name": "Zoo", "rank": 10, "rofl": 200},
    {"name": "Penguin", "rank": -1, "rofl": 10000}
]
print "&gt;&gt; Original &gt;&gt;"
for foo in origin_list:
    print foo

print "\n&gt;&gt; Rofl sort &gt;&gt;"
for foo in sorted(origin_list, key=operator.itemgetter("rofl")):
    print foo

print "\n&gt;&gt; Rank sort &gt;&gt;"
for foo in sorted(origin_list, key=operator.itemgetter("rank")):
    print foo
</code></pre>
<p>Here are the results:</p>
<p><strong>Original</strong></p>
<pre><code>{'name': 'foo', 'rank': 0, 'rofl': 20000}
{'name': 'Silly', 'rank': 15, 'rofl': 1000}
{'name': 'Baa', 'rank': 300, 'rofl': 20}
{'name': 'Zoo', 'rank': 10, 'rofl': 200}
{'name': 'Penguin', 'rank': -1, 'rofl': 10000}
</code></pre>
<p><strong>Rofl</strong></p>
<pre><code>{'name': 'Baa', 'rank': 300, 'rofl': 20}
{'name': 'Zoo', 'rank': 10, 'rofl': 200}
{'name': 'Silly', 'rank': 15, 'rofl': 1000}
{'name': 'Penguin', 'rank': -1, 'rofl': 10000}
{'name': 'foo', 'rank': 0, 'rofl': 20000}
</code></pre>
<p><strong>Rank</strong> </p>
<pre><code>{'name': 'Penguin', 'rank': -1, 'rofl': 10000}
{'name': 'foo', 'rank': 0, 'rofl': 20000}
{'name': 'Zoo', 'rank': 10, 'rofl': 200}
{'name': 'Silly', 'rank': 15, 'rofl': 1000}
{'name': 'Baa', 'rank': 300, 'rofl': 20}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If values are numeric you may also use Counter from collections</p>
<pre><code>from collections import Counter

x={'hello':1,'python':5, 'world':3}
c=Counter(x)
print c.most_common()


&gt;&gt; [('python', 5), ('world', 3), ('hello', 1)]    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following approach. Let us define a dictionary called mydict with the following data:</p>
<pre><code>mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}
</code></pre>
<p>If one wanted to sort the dictionary by keys, one could do something like:</p>
<pre><code>for key in sorted(mydict.iterkeys()):
    print "%s: %s" % (key, mydict[key])
</code></pre>
<p>This should return the following output:</p>
<pre><code>alan: 2
bob: 1
carl: 40
danny: 3
</code></pre>
<p>On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:</p>
<pre><code>for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):
    print "%s: %s" % (key, value)
</code></pre>
<p>The result of this command (sorting the dictionary by value) should return the following:</p>
<pre><code>bob: 1
alan: 2
danny: 3
carl: 40
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create an "inverted index", also</p>
<pre><code>from collections import defaultdict
inverse= defaultdict( list )
for k, v in originalDict.items():
    inverse[v].append( k )
</code></pre>
<p>Now your inverse has the values; each value has a list of applicable keys.</p>
<pre><code>for k in sorted(inverse):
    print k, inverse[k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/2/library/collections.html#collections.Counter">collections.Counter</a>. Note, this will work for both numeric and non-numeric values.</p>
<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; #To sort in reverse order
&gt;&gt;&gt; Counter(x).most_common()
[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]
&gt;&gt;&gt; #To sort in ascending order
&gt;&gt;&gt; Counter(x).most_common()[::-1]
[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]
&gt;&gt;&gt; #To get a dictionary sorted by values
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict(Counter(x).most_common()[::-1])
OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This returns the list of key-value pairs in the dictionary, sorted by value from highest to lowest:</p>
<pre><code>sorted(d.items(), key=lambda x: x[1], reverse=True)
</code></pre>
<p>For the dictionary sorted by key, use the following:</p>
<pre><code>sorted(d.items(), reverse=True)
</code></pre>
<p>The return is a list of tuples because dictionaries themselves can't be sorted.</p>
<p>This can be both printed or sent into further computation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://pypi.python.org/pypi/skipdict/1.0">skip dict</a> which is a dictionary that's permanently sorted by value.</p>
<pre><code>&gt;&gt;&gt; data = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
&gt;&gt;&gt; SkipDict(data)
{0: 0.0, 2: 1.0, 1: 2.0, 4: 3.0, 3: 4.0}
</code></pre>
<p>If you use <code>keys()</code>, <code>values()</code> or <code>items()</code> then you'll iterate in sorted order by value.</p>
<p>It's implemented using the <a href="http://en.wikipedia.org/wiki/Skip_list">skip list</a> datastructure.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from django.utils.datastructures import SortedDict

def sortedDictByKey(self,data):
    """Sorted dictionary order by key"""
    sortedDict = SortedDict()
    if data:
        if isinstance(data, dict):
            sortedKey = sorted(data.keys())
            for k in sortedKey:
                sortedDict[k] = data[k]
    return sortedDict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting from Python 3.6, <code>dict</code> objects are now ordered by insertion order. It's officially in the specs of Python 3.7.</p>
<pre><code>&gt;&gt;&gt; words = {"python": 2, "blah": 4, "alice": 3}
&gt;&gt;&gt; dict(sorted(words.items(), key=lambda x: x[1]))
{'python': 2, 'alice': 3, 'blah': 4}
</code></pre>
<p>Before that, you had to use <code>OrderedDict</code>.</p>
<p><a href="https://docs.python.org/3.7/library/stdtypes.html#typesmapping" rel="noreferrer">Python 3.7 documentation</a> says:</p>
<blockquote>
<p>Changed in version 3.7: Dictionary order is guaranteed to be insertion
  order. This behavior was implementation detail of CPython from 3.6. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can also use custom function that can be passed to key.</p>
<pre><code>def dict_val(x):
    return x[1]
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=dict_val)
</code></pre>
<p>One more way to do is to use labmda function</p>
<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda t: t[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/39424969/1150683">As pointed out by Dilettant</a>, Python 3.6 will now <em>keep the order</em>! I thought I'd share a function I wrote that eases the sorting of an iterable (tuple, list, dict). In the latter case, you can sort either on keys or values, and it can take numeric comparison into account. <strong>Only for &gt;= 3.6!</strong></p>
<p>When you try using sorted on an iterable that holds e.g. strings as well as ints, sorted() will fail. Of course you can force string comparison with str(). However, in some cases you want to do <em>actual</em> numeric comparison where <code>12</code> is smaller than <code>20</code> (which is not the case in string comparison). So I came up with the following. When you want explicit numeric comparison you can use the flag <code>num_as_num</code> which will try to do explicit numeric sorting by trying to convert all values to floats. If that succeeds, it will do numeric sorting, otherwise it'll resort to string comparison.</p>
<p>Comments for improvement or <a href="https://github.com/BramVanroy/PyLT3/blob/master/pylt3/type_helpers.py#L68-L100" rel="nofollow noreferrer">push requests</a> welcome.</p>
<pre><code>def sort_iterable(iterable, sort_on=None, reverse=False, num_as_num=False):
    def _sort(i):
      # sort by 0 = keys, 1 values, None for lists and tuples
      try:
        if num_as_num:
          if i is None:
            _sorted = sorted(iterable, key=lambda v: float(v), reverse=reverse)
          else:
            _sorted = dict(sorted(iterable.items(), key=lambda v: float(v[i]), reverse=reverse))
        else:
          raise TypeError
      except (TypeError, ValueError):
        if i is None:
          _sorted = sorted(iterable, key=lambda v: str(v), reverse=reverse)
        else:
          _sorted = dict(sorted(iterable.items(), key=lambda v: str(v[i]), reverse=reverse))

      return _sorted

    if isinstance(iterable, list):
      sorted_list = _sort(None)
      return sorted_list
    elif isinstance(iterable, tuple):
      sorted_list = tuple(_sort(None))
      return sorted_list
    elif isinstance(iterable, dict):
      if sort_on == 'keys':
        sorted_dict = _sort(0)
        return sorted_dict
      elif sort_on == 'values':
        sorted_dict = _sort(1)
        return sorted_dict
      elif sort_on is not None:
        raise ValueError(f"Unexpected value {sort_on} for sort_on. When sorting a dict, use key or values")
    else:
      raise TypeError(f"Unexpected type {type(iterable)} for iterable. Expected a list, tuple, or dict")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution using zip on <a href="https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects" rel="noreferrer"><code>d.values()</code> and <code>d.keys()</code></a>.  A few lines down this link (on Dictionary view objects) is:</p>
<blockquote>
<p>This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).</p>
</blockquote>
<p>So we can do the following:</p>
<pre><code>d = {'key1': 874.7, 'key2': 5, 'key3': 8.1}

d_sorted = sorted(zip(d.values(), d.keys()))

print d_sorted 
# prints: [(5, 'key2'), (8.1, 'key3'), (874.7, 'key1')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <strong>ValueSortedDict</strong> from <a href="http://pypi.python.org/pypi/dicts" rel="noreferrer">dicts</a>:</p>
<pre><code>from dicts.sorteddict import ValueSortedDict
d = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_dict = ValueSortedDict(d)
print sorted_dict.items() 

[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterate through a dict and sort it by its values in descending order:</p>
<pre><code>$ python --version
Python 3.2.2

$ cat sort_dict_by_val_desc.py 
dictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)
for word in sorted(dictionary, key=dictionary.get, reverse=True):
  print(word, dictionary[word])

$ python sort_dict_by_val_desc.py 
aina 5
tuli 4
joka 3
sana 2
siis 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your values are integers, and you use Python 2.7 or newer, you can use <a href="http://docs.python.org/py3k/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> instead of <code>dict</code>. The <code>most_common</code> method will give you all items, sorted by the value.</p>
</div>
<div class="post-text" itemprop="text">
<p>I came up with this one, </p>
<pre><code>import operator    
x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}
</code></pre>
<p>For Python 3.x: <code>x.items()</code> replacing <code>iteritems()</code>.</p>
<pre><code>&gt;&gt;&gt; sorted_x
{0: 0, 1: 2, 2: 1, 3: 4, 4: 3}
</code></pre>
<p>Or try with <code>collections.OrderedDict</code>!</p>
<pre><code>x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
from collections import OrderedDict

od1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the sorted function of Python</p>
<p><code>sorted(iterable[, cmp[, key[, reverse]]])</code></p>
<p>Thus you can use:</p>
<p><code>sorted(dictionary.items(),key = lambda x :x[1])</code></p>
<p>Visit this link for more information on sorted function: <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow">https://docs.python.org/2/library/functions.html#sorted</a></p>
</div>
<span class="comment-copy">The dictionary data structure does not have inherent order. You can iterate through it but there's nothing to guarantee that the iteration will follow any particular order. This is by design, so your best bet is probaly using anohter data structure for representation.</span>
<span class="comment-copy">"sorted()" can operate on dictionaries (and returns a list of sorted keys), so I think he's aware of this. Without knowing his program, it's absurd to tell someone they're using the wrong data structure. If fast lookups are what you need 90% of the time, then a dict is probably what you want.</span>
<span class="comment-copy">For those suggesting that this is a duplicate of <a href="http://stackoverflow.com/questions/72899/in-python-how-do-i-sort-a-list-of-dictionaries-by-values-of-the-dictionary" title="in python how do i sort a list of dictionaries by values of the dictionary">stackoverflow.com/questions/72899/â€¦</a> , that question is marked as a duplicate of this question.</span>
<span class="comment-copy">If possible, instantiate a NumPy <code>Series</code> from the dictionary and sort it using <code>pandas.Series.order</code></span>
<span class="comment-copy">@Daishiman The base class might not be ordered but <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> is of course.</span>
<span class="comment-copy">for timings on various dictionary sorting by value schemes:  <a href="http://writeonly.wordpress.com/2008/08/30/sorting-dictionaries-by-value-in-python-improved/" rel="nofollow noreferrer">writeonly.wordpress.com/2008/08/30/â€¦</a></span>
<span class="comment-copy"><code>sorted_x.reverse()</code> will give you a descending ordering (by the second tuple element)</span>
<span class="comment-copy">saidimu: Since we're already using <code>sorted()</code>, it's much more efficient to pass in the <code>reverse=True</code> argument.</span>
<span class="comment-copy">In python3 I used a lambda: <code>sorted(d.items(), key=lambda x: x[1])</code>. Will this work in python 2.x?</span>
<span class="comment-copy">OrderedDict added to collections in 2.7. Sorting example shown at: <a href="http://docs.python.org/library/collections.html?highlight=ordereddict#ordereddict-examples-and-recipes" rel="nofollow noreferrer">docs.python.org/library/â€¦</a></span>
<span class="comment-copy">This is also good but <i><code>key=operator.itemgetter(1)</code></i> should be more scalable for efficiency than <i><code>key=d.get</code></i></span>
<span class="comment-copy">You will first need to: import collections # to use defaultdict</span>
<span class="comment-copy">@raylu  I do observe a "does not work" behaviour using itemgetter:  -----  <code>from operator import itemgetter  d = {"a":7, "b":1, "c":5, "d":3}  sorted_keys = sorted(d, key=itemgetter, reverse=True)  for key in sorted_keys:      print "%s: %d" % (key, d[key])</code>  -----  -&gt;  b: 1  c: 5  a: 7  d: 3  The results change each time I run the code: weird.  (sorry, can't get the code to display properly)</span>
<span class="comment-copy">@bli <code>sorted_keys = sorted(d.items(), key=itemgetter(1), reverse=True)</code> and <code>for key, val in sorted_keys: print "%s: %d" % (key, val)</code> - itemgetter creates a function when it's called, you don't use it directly like in your example.  And a plain iteration on a dict uses the keys without the values</span>
<span class="comment-copy">i have come from the future to tell you of <code>collections.Counter</code>, which has a <code>most_common</code> method that might interest you  :)</span>
<span class="comment-copy">+1 For being the cleanest solution. However it doesn't sort the dictionary (hash table, not possible), rather it returns an ordered list of <code>(key, value)</code> tuples.</span>
<span class="comment-copy">@Keyo I'm new to python and came across the need to sort a dictionary. And I want to make sure I understood you well: there is no way to use lambda to sort a dictionary, right?</span>
<span class="comment-copy">I'd prefer <code>key=lambda (k, v): v</code> personally</span>
<span class="comment-copy">@Claudiu I like that <code>(k, v)</code> syntax too, but it's not available in Python 3 where <a href="https://www.python.org/dev/peps/pep-3113/" rel="nofollow noreferrer">tuple parameter unpacking</a> was removed.</span>
<span class="comment-copy">@Nyxynyx Just add <code>reverse=True</code> inside the sorted bit (ie <code>sorted(a.items(), key=lambda x: x[1], reverse=True)</code>)</span>
<span class="comment-copy">+1: sorted(d.values()) is easier to read/understand than Nas's sorted(dict1, key=dict1.get), and therefore more Pythonic. About readability, please also consider my <a href="http://stackoverflow.com/questions/613183/python-sort-a-dictionary-by-value/7237524#7237524">namedtuple</a> suggestion.</span>
<span class="comment-copy">What order are keys with the same value placed in? I sorted the list by keys first, then by values, but the order of the keys with the same value does not remain.</span>
<span class="comment-copy">@Remi, those are two different things! <code>sorted(d.values())</code> returns sorted list of the <i>values</i> from the dictionary, where <code>sorted(d, key=d.get)</code> returns list of the <i>keys</i>, sorted in order of the values!  Way different. If you don't see the need for the latter, read my post above for "real life" example</span>
<span class="comment-copy">This is not what the question is about - it is not about maintaining order of keys but about "sorting by value"</span>
<span class="comment-copy">@Nas Banov: it is NOT sorting by the key. it is sorting in the order, we create the items. in our case, we sort by the value. unfortunately, the 3-item dict was unfortunately chosen so the order was the same, when sorted voth by value and key, so i expanded the sample dict.</span>
<span class="comment-copy"><code>sorted(d.items(), key=lambda x: x[1])</code> Can you explain what the <code>x</code> means, why it can take <code>x[1]</code> to lambda? Why does it can't be <code>x[0]</code>? Thank you very much!</span>
<span class="comment-copy">@jie <code>d.items()</code> returns a list of key/value pairs from the dictionary and <code>x</code> is an element of this tuple. <code>x[0]</code> will be key and <code>x[1]</code> will be the value. As we intend to sort on the value, we pass <code>x[1]</code> to the lambda.</span>
<span class="comment-copy">@Boern <code>d.items()</code> returns a list-like container of <code>(key, value)</code> tuples. <code>[0]</code> accesses the first element of the tuple -- the key -- and <code>[1]</code> accesses the second element -- the value.</span>
<span class="comment-copy">How could I convert it back to a dictionary?</span>
<span class="comment-copy">as_list=[Player(v,k) for (k,v) in d.items()]       as_dict=dict((p.name,p.score) for p in as_list)</span>
<span class="comment-copy">..and as with Hank Gay's answer, you don't need the square brackets.  sorted() will happily take any iterable, such as a generator expression.</span>
<span class="comment-copy">You may still need to swap the (value,key) tuple elements to end up with the (key, value). Another list comprehension is then needed.  <code>[(key, value) for (value, key) in sorted_list_of_tuples]</code></span>
<span class="comment-copy">no, it's better to leave square brackets, because <code>sorted</code> will have to rebuild the list anyway, and rebuilding from gencomp will be faster. Good for codegolfing, bad for speed. Keep the ugly <code>([])</code> version.</span>
<span class="comment-copy">The warning on the 'whatsnew' page you've linked to should be emphasised: <b>the order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon</b>. Nobody should be assuming that the <code>dict</code> type will respect insertion order in their code. This is not part of the language's definition and the implementation could change in any future release. Continue using <code>OrderedDict</code> to guarantee order.</span>
<span class="comment-copy">@ajcr thanks for the caveat, very appreciated -  as smileys and maybe's were weaved into my response,these should indicated, the change is massive but of course, only available for CPython (reference implementation) and PyPy. For something completely different ... I rarely talk to non-implementation details when coding man-machine instructions. If it would only have been Jython ;-) ... I might not have had the courage to write it.</span>
<span class="comment-copy"><code>OrderedDict</code> definitely won't be dropped; instead, it will become a thin wrapper around the current dict implementation (so you might add that it will become more compact, too). Adding that snippet with the <code>ImportError</code> isn't quite the best idea due to it misleading readers that <code>OrderedDict</code> has no use.</span>
<span class="comment-copy">@JimFasarakis-Hilliard thank you for the feedback. "Quite best ideas" made me smile - future is often hard to predict. But I like your suggestion will check the sources, try it and then update the answer accordingly. Thanks again.</span>
<span class="comment-copy">@AlexRiley This caveat is no longer accurate.  Python3.7 guarantees ordered dictionaries.</span>
<span class="comment-copy">You are missing the value from the result</span>
<span class="comment-copy">Note that you're both iterating the dictionary and fetching values by their key, so performance wise this is not an optimal solution.</span>
<span class="comment-copy">@Dejell: as the contributor says, he interprets the question as "can I get the list of keys sorted according to the values". We don't need the values in the result, we have them in the dictionary.</span>
<span class="comment-copy">The list comprehension is no longer needed. You can simply pass in sorted(a_dictionary.values()). Even faster, if we want more would be to do foo = a_dictionary.values(); foo.sort() . I don't think speed is that much of an issue, though. Getting rid of the listcomp would simply eliminate redundancy.</span>
<span class="comment-copy">what about if you dictionary is &gt;&gt;&gt; x={'hello':1,'python':5, 'world':300}</span>
<span class="comment-copy">@yopy <code>Counter({'hello':1, 'python':5, 'world':300}).most_common()</code> gives <code>[('world', 300), ('python', 5), ('hello', 1)]</code>. This actually works for any sortable value type (although many <i>other</i> Counter operations do require values to be comparable to ints).</span>
<span class="comment-copy">Awesome! <code>for key, value in sorted(mydict.iteritems(), key=lambda (k,v): v["score"]):</code> allows you to sort by a subkey</span>
<span class="comment-copy">How is this different from <a href="http://stackoverflow.com/questions/613183/python-sort-a-dictionary-by-value/11230132#11230132">Ivan Sas's answer</a>?</span>
<span class="comment-copy">There is shorter and faster way to do what you are trying: <code>sorted(d.items(), reverse=True)</code></span>
<span class="comment-copy">question was: sort by value, not by keys... I like seeing a function. You can import collections and of course use sorted(data.values())</span>
<span class="comment-copy">Downvoter, please explain...</span>
<span class="comment-copy">Not the downvoter but a link to the documentation to would be nice, as this sounds like quite a change to how dictionaries have been seen so far...</span>
<span class="comment-copy">Thanks @fuyas I've added a link to the documentation with a quote saying that the order is now guaranteed.</span>
<span class="comment-copy">works great! <code>dict(sorted(words.items(), key=lambda x: x[1], reverse=True))</code> for DESC</span>
<span class="comment-copy">if you're going to do it this way, at leat take advantage of tuple unpacking in the dictionary comprehension: <code>{key: value for key, value in ...}</code></span>
