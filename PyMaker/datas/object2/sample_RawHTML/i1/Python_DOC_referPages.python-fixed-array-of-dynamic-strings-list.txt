<div class="post-text" itemprop="text">
<p>I would like to fill iteratively an array of fixed size where each item is a list of strings. For example, let's consider the following strings list: </p>
<pre><code>arr = ['A1', 'C3', 'B2', 'A2', 'C1', 'A3', 'B1', 'C2', 'A4']
</code></pre>
<p>I want to obtain the following array of 3 items (no ordering is required):</p>
<pre><code>res = [['A1', 'A2', 'A3', 'A4'],
       ['B2', 'B1'],
       ['C3', 'C1', 'C2']]
</code></pre>
<p>I have the following piece of code:</p>
<pre><code>arr = ['A1', 'C3', 'B2', 'A2', 'C1', 'A3', 'B1', 'C2', 'A4']
res = [[]] * 3
for i in range(len(arr)):
    # Calculate index corresponding to A, B or C
    j = ord(arr[i][0])-65
    # Extend corresponding string list
    res[j].extend([arr[i]])

for i in range(len(res)):
    print(res[i])
</code></pre>
<p>But I get this result:</p>
<pre><code>['A1', 'C3', 'B2', 'A2', 'C1', 'A3', 'B1', 'C2', 'A4']
['A1', 'C3', 'B2', 'A2', 'C1', 'A3', 'B1', 'C2', 'A4']
['A1', 'C3', 'B2', 'A2', 'C1', 'A3', 'B1', 'C2', 'A4']
</code></pre>
<p>Where am I wrong please?
Thank you for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is due to the following: 
<code>res = [[]] * 3</code> will create three lists, but all three are the <em>same</em> object. So whenever you append or extend one of them it will be added to "all" (they are all the same object after all). </p>
<p>You can easily check this by replacing it with:
<code>res = [[],[],[]]</code> 
which will then give you the expected answer. </p>
<p>Consider these snippets:</p>
<pre><code>res = [[]]*2
res[0].append(1)
print(res)

Out:
[[1], [1]]
</code></pre>
<p>While</p>
<pre><code>res = [[],[]]
res[0].append(1)
print(res)

Out:
[[1], []]
</code></pre>
<p>Alternatively you can create the nested list like this: <code>res = [[] for i in range(3)]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> and group the elements in the list (having been sorted) according to the first element. You can use <a href="https://docs.python.org/2/library/operator.html" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> to efficiently fetch the first substring in each string:</p>
<pre><code>from itertools import groupby
from operator import itemgetter

[list(v) for k,v in groupby(sorted(arr), key=itemgetter(0))]
# [['A1', 'A2', 'A3', 'A4'], ['B1', 'B2'], ['C1', 'C2', 'C3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension :</p>
<pre><code>[[k for k in arr if k[0]==m] for m in sorted(set([i[0] for i in arr]))]
</code></pre>
<p><strong>OUTPUT</strong> :</p>
<pre><code>[['A1', 'A2', 'A3', 'A4'], ['B2', 'B1'], ['C3', 'C1', 'C2']]
</code></pre>
</div>
<span class="comment-copy">Do you want to group elements based on their first character?</span>
<span class="comment-copy">No. The criteria is different. In my real program, A1, B1 etc.. are file names. The trick must work whatever the strings. The answer is given by John Sloper in the comments ;-)  [Edit: I have modified my initial code by adding brackets around arr[i] in extend function]</span>
<span class="comment-copy">Thank you very much for your answer. This does the trick !!!</span>
