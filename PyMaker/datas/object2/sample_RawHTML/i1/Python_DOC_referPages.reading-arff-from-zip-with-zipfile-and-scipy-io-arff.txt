<div class="post-text" itemprop="text">
<p>I want to process quite big ARFF files in scikit-learn. The files are in a zip archive and I do not want to unpack the archive to a folder before processing. Hence, I use the zipfile module of Python 3.6:</p>
<pre><code>from zipfile import ZipFile
from scipy.io.arff import loadarff

archive = ZipFile( 'archive.zip', 'r' )
datafile = archive.open( 'datafile.arff' )
data = loadarff( datafile )
# â€¦
datafile.close()
archive.close()
</code></pre>
<p>However, this yields the following error:</p>
<pre><code>Traceback (most recent call last):
  File "./m.py", line 6, in &lt;module&gt;
    data = loadarff( datafile )
  File "/usr/lib64/python3.6/site-packages/scipy/io/arff/arffread.py", line 541, in loadarff
    return _loadarff(ofile)
  File "/usr/lib64/python3.6/site-packages/scipy/io/arff/arffread.py", line 550, in _loadarff
    rel, attr = read_header(ofile)
  File "/usr/lib64/python3.6/site-packages/scipy/io/arff/arffread.py", line 323, in read_header
    while r_comment.match(i):
TypeError: cannot use a string pattern on a bytes-like object
</code></pre>
<p>According to <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.arff.loadarff.html" rel="nofollow noreferrer">loadarff documentation</a>, <code>loadarff</code> requires a file-like object.
According to <a href="https://docs.python.org/3/library/zipfile.html" rel="nofollow noreferrer">zipfile documentation</a>, <code>open</code> returns a file-like <code>ZipExtFile</code>.</p>
<p>Hence, my question is how to use what <code>ZipFile.open</code> returns as the ARFF input to <code>loadarff</code>.</p>
<p>Note: If I unzip manually and load the ARFF directly with <code>data = loadarff( 'datafile.arff' )</code>, all is fine.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from io import BytesIO, TextIOWrapper
from zipfile import ZipFile
from scipy.io.arff import loadarff

zfile = ZipFile('archive.zip', 'r')
in_mem_fo = TextIOWrapper(BytesIO(zfile.read('datafile.arff')), encoding='utf-8')
data = loadarff(in_mem_fo)
</code></pre>
<p>Read <code>zfile</code> into a in-memory <code>BytesIO</code> object. Use <code>TextIOWrapper</code> with <code>encoding='utf-8'</code>. Use this in-memory buffered text object in <code>loadarff</code>.</p>
<p>Edit: Turnsout <code>zfile.open()</code> returns a file-like object so the above can be accomplished by :</p>
<pre><code>zfile = ZipFile('archive.zip', 'r')
in_mem_fo = TextIOWrapper(zfile.open('datafile.arff'), encoding='ascii')
data = loadarff(in_mem_fo)
</code></pre>
<p>Thanks @Bernhard</p>
</div>
<span class="comment-copy">loadarff requires a file-like object. So you should read into a in-memory file like object. Can you try this ? <code>in_mem_fo  = StringIO(archive.read('datafile.arff'))</code></span>
<span class="comment-copy">This yields the Error: File "m.py", line 7, in &lt;module&gt;     in_mem_fo = StringIO(archive.read('datafile.arff')) TypeError: initial_value must be str or None, not bytes</span>
<span class="comment-copy">But your idea let me find a solution: <code>in_mem_fo = StringIO(archive.read('datafile.arff').decode("utf-8"))</code> or <code>in_mem_fo = StringIO(archive.read('datafile.arff').decode("ascii"))</code></span>
<span class="comment-copy">Great. I have added an answer which might be a better solution.</span>
<span class="comment-copy">Thanks, once again, your answer has inspired me to another solution which I find even more elegant, because it avoids putting all in memory first: <code>textfile = TextIOWrapper(datafile, encoding='ascii')</code> and then <code>data = loadarff( textfile )</code>. I suggest you put something like this into your solution as an edit and I accept so others can use it.</span>
