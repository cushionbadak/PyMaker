<div class="post-text" itemprop="text">
<p>I have a Python service which imports a library that talks to the PayPal API. There is a config file that is passed into the library <code>__init__()</code> which contains the PayPal API username and password. </p>
<p>Calling the PayPal API token endpoint with the username and password will return a token used to authenticate during the pay call. However, this token lasts for 90 minutes and should be reused. </p>
<p>There are multiple instances of this service running on different servers and they need to all share this one secret token. </p>
<p>What would the best way of storing this 9 minute token be?</p>
</div>
<div class="post-text" itemprop="text">
<p>While you could persist this in a database, since it's only valid for 90 minutes, you might consider using an in-memory data store like <a href="https://redis.io/" rel="noreferrer">Redis</a>. It's very simple to set up and there are various <a href="https://redis.io/clients#python" rel="noreferrer">Python clients available</a>.</p>
<p>Redis in particular supports expiration time when <a href="https://redis.io/commands/set" rel="noreferrer">setting a value</a>, so you can make sure it'll only be kept for a set amount of time. Of course, you should still have exception handling in place in case for some reason the key is invalidated early.</p>
<p>While this may introduce a software dependency if you're not already using a key-value store, it's not clear from your question how this library is intended to be used and thus whether this is an issue.</p>
<p>If installing other software is not an option, you could use a temporary file. However, because Python's <a href="https://docs.python.org/3/library/tempfile.html" rel="noreferrer">tempfile</a> doesn't seem to support directly setting a temporary file's name, you might have to handle file management manually. For example:</p>
<pre><code>import os
import time
import tempfile


# 90 minutes in seconds. Setting this a little lower would 
# probably be better to account for network latency.
MAX_AGE = 90 * 60
# /tmp/libname/ needs to exist for this to work; creating it
# if necessary shouldn't give you much trouble.
TOKEN_PATH = os.path.join(
    tempfile.gettempdir(), 
    'libname', 
    'paypal.token',
)


def get_paypal_token():
    token = None

    if os.path.isfile(TOKEN_PATH):
        token_age = time.time() - os.path.getmtime(TOKEN_PATH)

        if token_age &lt; MAX_AGE:
            with open(TOKEN_PATH, 'r') as infile:
                # You might consider a test API call to establish token validity here.
                token = infile.read()

    if not token:
        # Get a token from the PayPal API and write it to TOKEN_PATH.
        token = 'dummy'

        with open(TOKEN_PATH, 'w') as outfile:
            outfile.write(token)

    return token
</code></pre>
<p>Depending on the environment, you would probably want to look into restricting permissions on this temp file. Regardless of how you persist the token, though, this code should be a useful example. I wouldn't be thrilled about sticking something like this on the file system, but if you already have the PayPal credentials used to request a token on disk, writing the token to temporary storage probably won't be a big deal.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could store the token as a <a href="https://stackoverflow.com/questions/5971312/how-to-set-environment-variables-in-python">system variable</a>.</p>
<pre><code>import os

# Store token
os.environ['PAYPAL_API_TOKEN'] = &lt;...&gt;

# Retrieve token
token = os.environ['PAYPAL_API_TOKEN']
</code></pre>
<p>Be aware of the security implications though: Other processes could read the token.</p>
</div>
<span class="comment-copy"><i>Since the library is instantiated every time a Payment is to be made</i>: no Python modules are not instantiated each time. They persist in memory in the <code>sys.modules</code> structure. The library object doesn't need recreating either, you can simply store it as a global. You haven't shared what library you are using here, is the official <a href="https://github.com/paypal/PayPal-Python-SDK" rel="nofollow noreferrer">Python PayPal SDK</a>? Or are you saying your <i>service</i> is run as a new Python process each time?</span>
<span class="comment-copy">Please add that to your question, that's a hugely important detail.</span>
<span class="comment-copy">Not a general answer, but if your servers are running on AWS, you could use the <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html" rel="nofollow noreferrer">Systems Manager Parameter Store</a>.</span>
<span class="comment-copy">Where are you hosting the service? Most cloud providers provide some sort of object store (S3), in-memory database (Elasticache) or a parameter store that are all common options for storing configuration that needs to be shared by multiple instances.</span>
<span class="comment-copy">What would you suggest @MartijnPieters ?</span>
<span class="comment-copy">As it turns out, it's not just a single long-running service, but a cluster of web servers, so using Redis to share the token between them is indeed correct.</span>
<span class="comment-copy">That's definitely important info. I'm going to leave the temp file part of my answer there just because the question is vague enough that it could be useful to people who find it.</span>
<span class="comment-copy">The provided example does not work across processes. It may be possible to access another process' env, but it's not something I've seen done, and you'd then need some other way to track the PID of the reference process... also, OP is apparently deploying this on multiple servers for a single application, so a machine-independent method would be better.</span>
<span class="comment-copy">This sounds like a large security risk ... I'm not sure any outcome could justify storing this information unencrypted like that ... especially with what must be very secure official PayPal implementations...</span>
