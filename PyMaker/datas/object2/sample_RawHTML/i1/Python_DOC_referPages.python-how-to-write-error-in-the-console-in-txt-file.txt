<div class="post-text" itemprop="text">
<p>I have a python script which every 10 minutes sends me an email with everything written in the console. I am running this with the crontab in my ubuntu 18.04 vps.
Sometimes it doesn't send the mail so I assume that when an error happens execution stops but how can I get the errors to be written in a txt file so I can analyze the error ?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Logging Module</h2>
<p>To demonstrate the approach with the <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer"><code>logging</code></a> module, this would be the general approach</p>
<pre class="lang-py prettyprint-override"><code>import logging

# Create a logging instance
logger = logging.getLogger('my_application')
logger.setLevel(logging.INFO) # you can set this to be DEBUG, INFO, ERROR

# Assign a file-handler to that instance
fh = logging.FileHandler("file_dir.txt")
fh.setLevel(logging.INFO) # again, you can set this differently

# Format your logs (optional)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter) # This will set the format to the file handler

# Add the handler to your logging instance
logger.addHandler(fh)

try:
    raise ValueError("Some error occurred")
except ValueError as e:
    logger.exception(e) # Will send the errors to the file
</code></pre>
<p>And if I <code>cat file_dir.txt</code></p>
<pre><code>2019-03-14 14:52:50,676 - my_application - ERROR - Some error occurred
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
ValueError: Some error occurred
</code></pre>
<h2>Print to File</h2>
<p>As I pointed out in the comments, you <em>could</em> accomplish this with <code>print</code> as well (I'm not sure you will be applauded for it)</p>
<pre class="lang-py prettyprint-override"><code># Set your stdout pointer to a file handler
with open('my_errors.txt', 'a') as fh:
    try:
        raise ValueError("Some error occurred")
    except ValueError as e:
        print(e, file=fh)
</code></pre>
<p><code>cat my_errors.txt</code></p>
<pre><code>Some error occurred
</code></pre>
<p>Note that <code>logging.exception</code> <em>includes</em> the traceback in this case, which is one of the many huge benefits of that module</p>
<h2>Edit</h2>
<p>In the interest of completeness, the <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer"><code>traceback</code></a> module leverages a similar approach as <code>print</code>, where you can supply a file handle:</p>
<pre class="lang-py prettyprint-override"><code>import traceback
import sys

with open('error.txt', 'a') as fh:
    try:
        raise ValueError("Some error occurred")
    except ValueError as e:
        e_type, e_val, e_tb = sys.exc_info()
        traceback.print_exception(e_type, e_val, e_tb, file=fh)
</code></pre>
<p>This will include all of the information you want from <code>logging</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>logging</code> module as suggested in the comments (possibly superior but outside the scope of my knowledge), or catch the errors with <code>try</code> and <code>except</code> like:</p>
<pre><code>try:
    pass
    #run the code you currently have
except Exception as e: # catch ALLLLLL errors!!!
    print(e) # or more likely you'd want something like "email_to_me(e)"
</code></pre>
<p>Although this is generally frowned upon to catch <strong>all</strong> exceptions, because then should your program fail for <em>whatever</em> reason it will get gobbled up in the <code>except</code> clause so a better approach is to figure out what specific error you are encountering like <code>IndexError</code> and then just catch this specific error like:</p>
<pre><code>try:
    pass
    #run the code you currently have
except IndexError as e: # catch only indexing errors!!!
    print(e) # or more likely you'd want something like "email_to_me(e)"
</code></pre>
</div>
<span class="comment-copy">Write to a log file by using the logging package.</span>
<span class="comment-copy">What code are you using? Can't you just wrap it in a <code>try</code> and save the exception in the <code>catch</code>?</span>
<span class="comment-copy"><code>logging</code> is the preferred way to do this. If you are feeling sufficiently diabolical, you can pass a file handle object to <code>print</code> with the <code>file</code> kwarg</span>
<span class="comment-copy">Thank you very much! Logging is hard for me at the moment, I will look into it in the near future</span>
<span class="comment-copy">@strangethingspy No problem! If this solved your problem it's common practice to click the check mark by my post to accept it as the answer you were looking for! When you get 15 rep you can upvote helpful answers (and questions) as well :)</span>
