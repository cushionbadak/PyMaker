<div class="post-text" itemprop="text">
<p>im working on a project where i have to use speech to text as an input to determine who to call, however using the speech to text can give some unexpected results so i wanted to have a little dynamic matching of the strings, i'm starting small and try to match 1 single name, my name is Nick Vaes, and i try to match my name to the spoken text, but i also want it to match when for example some text would be Nik or something, idealy i would like to have something that would match everything if only 1 letter is wrong so </p>
<p>Nick
ick
nik
nic
nck</p>
<p>would all match my name, the current simple code i have is:</p>
<pre><code>  def user_to_call(s):
  if "NICK" or "NIK" in s.upper(): redirect = "Nick"
  if redirect: return redirect
</code></pre>
<p>for a 4 letter name its possible to put all possibilities in the filter, but for names with 12 letters it is a little bit of overkill since i'm pretty sure it can be done way more efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you basically need is fuzzy string matching, see:</p>
<p><a href="https://en.wikipedia.org/wiki/Approximate_string_matching" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Approximate_string_matching</a></p>
<p><a href="https://www.datacamp.com/community/tutorials/fuzzy-string-python" rel="nofollow noreferrer">https://www.datacamp.com/community/tutorials/fuzzy-string-python</a></p>
<p>Based on that you can check how similar is the input compared your dictionary:</p>
<pre><code> from fuzzywuzzy import fuzz

 name = "nick"
 tomatch = ["Nick", "ick", "nik", "nic", "nck", "nickey", "njick", "nickk", "nickn"]
 for str in tomatch:
    ratio = fuzz.ratio(str.lower(), name.lower())
    print(ratio)
</code></pre>
<p>This code will produce the following output:</p>
<pre><code>100
86
86
86
86
80
89
89
89
</code></pre>
<p>You have to experiment with different ratios and check which will suit your requirements to miss only one letter</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow noreferrer">Levenshtein_distance</a> </p>
<p>A python implementation is nltk</p>
<pre><code>import nltk
nltk.edit_distance("humpty", "dumpty")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From what I understand, you are not looking at any fuzzy matching. (Because you did not upvote other responses).
If you are just trying to evaluate what you specified in your request, here is the code. I have put some additional conditions where I printed the appropriate message. Feel free to remove them. </p>
<pre><code>def wordmatch(baseword, wordtoMatch, lengthOfMatch):
    lis_of_baseword = list(baseword.lower())
    lis_of_wordtoMatch = list(wordtoMatch.lower()) 
    sum = 0
    for index_i, i in enumerate(lis_of_wordtoMatch):
        for index_j, j in enumerate(lis_of_baseword):
            if i in lis_of_baseword:
                if i == j and index_i &lt;= index_j:
                    sum = sum + 1
                    break
                else:
                    pass
            else:
                print("word to match has characters which are not in baseword")
                return 0
    if sum &gt;= lengthOfMatch and len(wordtoMatch) &lt;= len(baseword):
        return 1
    elif sum &gt;= lengthOfMatch and len(wordtoMatch) &gt; len(baseword):
        print("word to match has no of characters more than that of baseword")
        return 0
    else:
        return 0

base = "Nick"
tomatch = ["Nick", "ick", "nik", "nic", "nck", "nickey","njick","nickk","nickn"]
wordlength_match = 3 # this says how many words to match in the base word. In your case, its 3

for t_word in tomatch:
    print(wordmatch(base,t_word,wordlength_match))
</code></pre>
<p>the output looks like this</p>
<pre><code>1
1
1
1
1
word to match has characters which are not in baseword
0
word to match has characters which are not in baseword
0
word to match has no of characters more than that of baseword
0
word to match has no of characters more than that of baseword
0
</code></pre>
<p>Let me know if this served your purpose.</p>
</div>
<span class="comment-copy">Let me show you the evolution steps of your expression: <code>"NICK" or "NIK" in s.upper()</code> → <code>("NICK") or ("NIK" in s.upper())</code> → <code>True or &lt;I don't care since it is going to be True anyway&gt;</code> → <code>True</code></span>
<span class="comment-copy">Maybe try something with <a href="https://docs.python.org/3/library/difflib.html#module-difflib" rel="nofollow noreferrer"><code>difflib</code></a> and ask a separate question if you run into problems.</span>
<span class="comment-copy">this fuzzy string is indeed what i'm looking for however how can i use this in my case? i understand how this would work on a string 1 on 1 but i try to match part of the string. i want to match my name, however when someone says " i would like to contact Nick" it should still match.</span>
<span class="comment-copy">split the sentence into words: ['i','would','like',...]</span>
<span class="comment-copy">I learned something new, +1: I didn't know about Levenshtein distance.</span>
<span class="comment-copy">thanx for the answer! however currently i'm using the fuzzy matching since i think its more scaleable for the rest of my project.</span>
