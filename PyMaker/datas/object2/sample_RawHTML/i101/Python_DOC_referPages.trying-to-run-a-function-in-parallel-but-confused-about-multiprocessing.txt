<div class="post-text" itemprop="text">
<p>I am trying to parallelize my function , but i am not able to get it to work,</p>
<p>This is what it looks like-</p>
<pre><code>import face_recognition
import cv2 
import os

def get_image_from_video():
    video_path = 
'/media/ryan/shakira/video/video_data/'
    output_path = 
'/media/ryan/shakira/video/results_from_fr/'
    for video in os.listdir(video_path):
        print('This video is being processed -------&gt;', video)
        input_movie = cv2.VideoCapture(os.path.join(video_path, video))
        length = int(input_movie.get(cv2.CAP_PROP_FRAME_COUNT))

        face_locations = []
        face_encodings = []
        face_names = []
        frame_number = 0
        break_value = False
        while True:
            # Grab a single frame of video
            ret, frame = input_movie.read()
            frame_number += 1

            # Quit when the input video file ends
            if not ret:
                break

            # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
            rgb_frame = frame[:, :, ::-1]

            # Find all the faces and face encodings in the current frame of video
            face_locations = face_recognition.face_locations(rgb_frame)
            print(face_locations)

            if not face_locations:
                continue
            for top, right, bottom, left in face_locations:

                cv2.imwrite(os.path.join(output_path, video.split('.')[0]+'.jpg'), frame) #--- Here is where the increment variable is placed. It will be incremented for every face and thus saving every face that gets detected.
                break_value = True
                break
            if break_value:
                break

        input_movie.release()


from multiprocessing import Process
import multiprocessing as mp
from threading import Thread

if __name__ == '__main__':
  p1 = Process(target=get_image_from_video)
  p1.start()
  p2 = Process(target=get_image_from_video)
  p2.start()
  p3 = Process(target=get_image_from_video)
  p3.start()
  p4 = Process(target=get_image_from_video)
  p4.start()
  p5 = Process(target=get_image_from_video)
  p5.start()
  p6 = Process(target=get_image_from_video)
  p6.start()
  p7 = Process(target=get_image_from_video)
  p7.start()
  p8 = Process(target=get_image_from_video)
  p8.start()
  p1.join()
  p2.join()
  p3.join()
  p4.join()
  p5.join()
  p6.join()
  p7.join()
  p8.join() 
</code></pre>
<p>Now this does not work , it does not parallelize properly ,and when it does,it runs the same file on every process.</p>
<p>Any suggestions on how i can parallelize this would be really helpful.Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The idea is to have many 'workers' where each one of them gets a video to work on.</p>
<p>Something like this</p>
<pre><code>from multiprocessing import Process

def get_image_from_video(video_file):
    # handle a single video file
    pass

if __name__ == '__main__':
    # prepare list of video files under folder ''/media/ryan/shakira/video/video_data/''
    video_files = ['video1','video2'] 
    pool = Pool(5) # 5 as an example
    pool.map(get_image_from_video, video_files ))
</code></pre>
</div>
<span class="comment-copy">Read <a href="https://docs.python.org/3/library/multiprocessing.html#examples" rel="nofollow noreferrer">multiprocessing.html#examples</a>. Your main mistake are, a <code>Process target=</code> have to do <b>one</b> task, here <b>one</b> file.</span>
<span class="comment-copy">@stovfl okay ,thanks , will look into this</span>
<span class="comment-copy">Thanks for your time.</span>
