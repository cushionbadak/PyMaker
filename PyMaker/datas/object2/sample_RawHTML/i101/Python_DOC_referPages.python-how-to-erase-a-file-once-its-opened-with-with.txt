<div class="post-text" itemprop="text">
<p>I'm saving the loop iteration number of my script to a checkpoint file:</p>
<pre><code>with open('checkpoint.txt', 'w') as checkpoint_file:
    for i range(1000):
        //do stuff
        checkpoint_file.write(str(i) + '\n')
</code></pre>
<p>This will write a new line in my file for each iteration.</p>
<p>What I would like is to have only one line with the last iteration number when I interrupt the script, so I would like to erase the content of "checkpoint.txt" file, and then write my iteration number on the first line (or directly replace the first line if this is possible). </p>
<p>I know that if I close the file and then open it again with <code>with open('checkpoint.txt', 'w')</code> its content will be erased, but I'd like to keep the file opened if possible for efficiency.</p>
<p>What's the best way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow noreferrer"><code>seek</code>ing</a> before each <code>write</code> (and switch to line buffering to avoid the need to <code>flush</code> separately) will do this:</p>
<pre><code># buffering=1 means you automatically flush after writing a line
with open('checkpoint.txt', 'w', buffering=1) as checkpoint_file:
    for i in range(1000):
        //do stuff
        checkpoint_file.seek(0)  # Seek back to beginning of file so next write replaces contents
        checkpoint_file.write(str(i) + '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Seek to the start of the file before each write. 
See <a href="https://docs.python.org/2/library/stdtypes.html?highlight=seek#file.seek" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html?highlight=seek#file.seek</a></p>
</div>
<div class="post-text" itemprop="text">
<p>How are you interrupting the script?</p>
<p>If it's something like the <code>KeyboardInterrupt</code>, then you can try the following:</p>
<pre><code>with open('checkpoint.txt', 'w') as checkpoint_file:
    for i range(1000):
        # do stuff
        try:
            checkpoint_file.write(str(i) + '\n')
        except KeyboardInterrupt:
            checkpoint_file.seek(0)
            checkpoint_file.truncate()
            checkpoint_file.write(str(i))
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/17126037/how-to-delete-only-the-content-of-file-in-python">How to delete only the content of file in python</a></span>
<span class="comment-copy">I would add a <code>truncate</code> to handle the case where next line is shorter than previous one...</span>
<span class="comment-copy">@SergeBallesta: In the general case, yes, that would be correct. In this particular case, the checkpoint is a monotonically increasing number, so each newly written string will always be as long as, or longer than, the previous output, making it unnecessary to explicitly <code>truncate</code> (barring the off chance that you're using a text encoding so weird that the different numeric digits produced by stringifying an <code>int</code> encode to a variable number of bytes; if you know of such an encoding, let me know, and it'll be yet one more computer-related factoid to torture people with :-) ).</span>
<span class="comment-copy">This will allow the file to grow unchecked, and only truncates it if it's interrupted immediately before/after the <code>write</code>...</span>
