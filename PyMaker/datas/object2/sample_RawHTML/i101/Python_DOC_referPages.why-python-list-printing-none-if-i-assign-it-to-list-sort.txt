<div class="post-text" itemprop="text">
<p>I've been able to verify that the <code>findUniqueWords</code> does result in a sorted <code>list</code>. However, it does not <code>return</code> the <code>list</code>, why?</p>
<pre><code>def findUniqueWords(theList):
    newList = []
    words = []
    # Read a line at a time
    for item in theList:
        # Remove any punctuation from the line
        cleaned = cleanUp(item)
        # Split the line into separate words
        words = cleaned.split()
        # Evaluate each word
        for word in words:
            # Count each unique word
            if word not in newList:
                newList.append(word)    
    answer = newList.sort()
    return answer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>list.sort</code> sorts the list in place, i.e. it doesn't return a new list. Just write</p>
<pre><code>newList.sort()
return newList
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is here:</p>
<pre><code>answer = newList.sort()
</code></pre>
<p><code>sort</code> does not return the sorted list; rather, it sorts the list in place.</p>
<p>Use:</p>
<pre><code>answer = sorted(newList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://mail.python.org/pipermail/python-dev/2003-October/038855.html" rel="noreferrer">Here</a> is an email from Guido van Rossum in python's dev list explainig why he choose not to return <code>self</code> on operations that affects the object and don't return a new one.</p>
<blockquote>
<p>This comes from a coding style (popular in various other languages, I
    believe especially Lisp revels in it) where a series of side effects
    on a single object can be chained like this:</p>
<pre><code> x.compress().chop(y).sort(z)
</code></pre>
<p>which would be the same as</p>
<pre><code>  x.compress()
  x.chop(y)
  x.sort(z)
</code></pre>
<p>I find the chaining form a threat to readability; it requires that the
      reader must be intimately familiar with each of the methods.  The
      second form makes it clear that each of these calls acts on the same
      object, and so even if you don't know the class and its methods very
      well, you can understand that the second and third call are applied to
      x (and that all calls are made for their side-effects), and not to
      something else.</p>
<p>I'd like to reserve chaining for operations that return new values,
      like string processing operations:</p>
<pre><code> y = x.rstrip("\n").split(":").lower()
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python habitually returns <code>None</code> from functions and methods that mutate the data, such as <code>list.sort</code>, <code>list.append</code>, and <code>random.shuffle</code>, with the idea being that it hints to the fact that it was mutating.</p>
<p>If you want to take an iterable and return a new, sorted list of its items, use the <code>sorted</code> builtin function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has two kinds of sorts: a sort <em>method</em> (or "member function") and a sort <em>function</em>. The sort method operates on the contents of the object named -- think of it as <em>an action that the object is taking to re-order itself</em>. The sort function is an <em>operation over the data represented by an object</em> and returns a new object with the same contents in a sorted order.</p>
<p>Given a list of integers named <code>l</code> the list itself will be reordered if we call <code>l.sort()</code>:</p>
<pre><code>&gt;&gt;&gt; l = [1, 5, 2341, 467, 213, 123]
&gt;&gt;&gt; l.sort()
&gt;&gt;&gt; l
[1, 5, 123, 213, 467, 2341]
</code></pre>
<p>This method has no return value. But what if we try to assign the result of <code>l.sort()</code>?</p>
<pre><code>&gt;&gt;&gt; l = [1, 5, 2341, 467, 213, 123]
&gt;&gt;&gt; r = l.sort()
&gt;&gt;&gt; print(r)
None
</code></pre>
<p><code>r</code> now equals actually nothing. This is one of those weird, somewhat annoying details that a programmer is likely to forget about after a period of absence from Python (which is why I am writing this, so <em>I</em> don't forget again).</p>
<p>The function <code>sorted()</code>, on the other hand, will not do anything to the contents of <code>l</code>, but will return a new, sorted list with the same contents as <code>l</code>:</p>
<pre><code>&gt;&gt;&gt; l = [1, 5, 2341, 467, 213, 123]
&gt;&gt;&gt; r = sorted(l)
&gt;&gt;&gt; l
[1, 5, 2341, 467, 213, 123]
&gt;&gt;&gt; r
[1, 5, 123, 213, 467, 2341]
</code></pre>
<p>Be aware that the returned value is <em>not</em> a <a href="http://www.python-course.eu/deep_copy.php" rel="noreferrer">deep copy</a>, so be cautious about side-effecty operations over elements contained within the list as usual:</p>
<pre><code>&gt;&gt;&gt; spam = [8, 2, 4, 7]
&gt;&gt;&gt; eggs = [3, 1, 4, 5]
&gt;&gt;&gt; l = [spam, eggs]
&gt;&gt;&gt; r = sorted(l)
&gt;&gt;&gt; l
[[8, 2, 4, 7], [3, 1, 4, 5]]
&gt;&gt;&gt; r
[[3, 1, 4, 5], [8, 2, 4, 7]]
&gt;&gt;&gt; spam.sort()
&gt;&gt;&gt; eggs.sort()
&gt;&gt;&gt; l
[[2, 4, 7, 8], [1, 3, 4, 5]]
&gt;&gt;&gt; r
[[1, 3, 4, 5], [2, 4, 7, 8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To understand why it does not return the list:</p>
<p>sort() doesn't return any value while.</p>
<p>The sort() method  just sorts the elements of a given list in a specific order - Ascending or Descending without returning any value.</p>
<p>So problem is with <code>answer = newList.sort()</code> where answer is none.</p>
<p>instead you can just do <code>return  newList.sort()</code></p>
<p>The syntax of sort() method is:</p>
<pre><code>list.sort(key=..., reverse=...)
</code></pre>
<p>Alternatively, you can also use Python's in-built function sorted() for the same purpose.</p>
<pre><code>sorted(list, key=..., reverse=...)
</code></pre>
<p>Note: Simplest difference between sort() and sorted() is: sort() doesn't return any value while, sorted() returns an iterable list.</p>
<p>So in your case <code>answer = sorted(newList)</code></p>
</div>
<span class="comment-copy">I don't think you need to turn item into a string so many times. Once is normally enough and it's cleaner to do it on the input to cleanUp as well.</span>
<span class="comment-copy">Just a silly thought, but if you want a list of unique items, why don't you just convert into a set? You can then convert them back to a list if you need.  <code>theSet= set(theList)</code>  And you are done, you only need to cast it back to  list:   <code>theList = list(theSet)</code>  Done. Easy.</span>
<span class="comment-copy">Adding to what @runlevel0 said (which is a good idea): You can convert a <code>theSet' into a sorted list with </code>sorted(theSet)`.</span>
<span class="comment-copy"><code>return sorted(newList)</code> is shorter. Doesn't matter here since the variable is local, but in-place sort could change a shared variable in some cases.</span>
<span class="comment-copy">It's interesting that if an entry is added to a list, either <code>a.append('x')</code>, or <code>a.extend('x)</code> you can't chain <code>sort()</code> on the end either.  It has to be split into 2 lines. It would have been nicer had the methods returned the list!  <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a>  This same message bit me by doing just that. Consequently you have to break the thing into two lines, You have to use <code>.sort()</code> <b>NOT</b> <code>sorted()</code> on the list afterwards, since this generates the same error  <code>l = ['1']; l = sorted(l.append('2'))</code> (I just added semi-colon so you could cut/paste and run)</span>
<span class="comment-copy">I'd also add it may be worth look at this: <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow noreferrer">grantjenks.com/docs/sortedcontainers</a> , <a href="https://github.com/grantjenks/python-sortedcontainers" rel="nofollow noreferrer">github.com/grantjenks/python-sortedcontainers</a> In my, was already thinking of refactoring from a list to a set, since I didn't want duplicates, and was then looking for a SortedSet implementation, and didn't find one in collections module... Source: <a href="https://stackoverflow.com/questions/5953205/why-are-there-no-sorted-containers-in-pythons-standard-libraries" title="why are there no sorted containers in pythons standard libraries">stackoverflow.com/questions/5953205/â€¦</a></span>
<span class="comment-copy"><b>Why</b> was <code>sort</code> function designed this way? is there any performance overhead or other drawbacks if return the sorted list instead of None?</span>
<span class="comment-copy">I also faced the folowing problem : <code>print(newList.sort())</code> gave <code>None</code>. However when i did, <code>newList.sort()</code> and then <code>print(newList)</code> it worked.</span>
<span class="comment-copy">Amusingly, <code>split(":").lower()</code> is a bad chain because <code>split</code> returns a list that doesn't have a <code>lower</code> method.</span>
