<div class="post-text" itemprop="text">
<p>I have a virtualenv that is being used on multiple machines, through dropbox. Our dropboxes are all syncing to the same spot, (or at least symlinking so it appears thus) so, the relocation issues should be moot.</p>
<p>On my machine, everything works fine. I can create a virtualenv and it works fine. However, when someone else uses it, python gives <code>No module named contextlib</code></p>
<p>When I create the virtualenv on the other person's computer, it appears to work on mine (I haven't tested exhaustively) </p>
<p>All computers are macs. Mine is running High Sierra, everyone else's is running Mojave, in case that matters.</p>
<p>How do I solve this problem? or at least, what is causing it?</p>
<p>I've seen <a href="https://stackoverflow.com/questions/5520515/python-no-module-named-contextlib">Python: No module named contextlib?</a>, but that seems to be an unrelated issue on embedded hardware.</p>
<p>NOTE: I understand that python thinks I shouldn't be doing this. However, I have a user base who are NOT programmers. They cannot manage their own venvs. They cannot handle complicated docker stuff. They want to type <code>python foo.py</code> and just have it work. In the past, I've gotten this to work with venvs. </p>
<p>If python can't handle this simple situation easily, then that's a problem, in my opinion.</p>
<p>OH, and I know that libraries are different for different OSes, I'm dealing with that more simply, by having a different set of venvs for the windows users. THAT works well, with no problems.</p>
</div>
<div class="post-text" itemprop="text">
<p>In general terms sharing the dependencies folder across computers and across different OS will give problems. This is something that now might work for your setup (all same OS same version), but as soon as you are going to be working with people that have <code>windows</code> or <code>linux</code> or even other versions of the same OS provider you will have problems.</p>
<p>Instead of looking for a workaround on how to fix the missing dependency for the <code>contextlib</code>, go to the root of the problem and fix the issue that you are generating by sharing the dependency folder. If people have issues with their environments, probably create a script to run the project, use a docker machine for provisioning or a virtual machine that will enforce always the same version as a base to run everything inside.</p>
<p>Here is a very good read about how to <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">organise dependencies in a project</a> (from the python docs)</p>
<p>Also, additionally I would suggest you to move the project to a docker container or similar, so that you can all be working under the same environment, and this on the long run will make easier to develop and deploy the code to the production server.</p>
<p>To <a href="https://towardsdatascience.com/docker-for-python-development-83ae714468ac" rel="nofollow noreferrer">run python on docker you can read this article</a>, but there are many more, that could ease your work on the long run</p>
<p>If your users can't run <code>pip install -r requirements.txt</code> I assume they can't run either <code>virtualenv --relocatable ENV</code> right?</p>
<p>I have to say, you have to search new tools for your users. Maybe a script or some kind of <code>docker image</code> of your app with a simple <code>run</code> command might be easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>From virtualenv <a href="https://virtualenv.pypa.io/en/stable/userguide/#making-environments-relocatable" rel="nofollow noreferrer">documentation</a> :</p>
<blockquote>
<p>Normally environments are tied to a specific path. <strong>That means that you cannot move an environment around or copy it to another computer.</strong> You can fix up an environment to make it relocatable with the command:</p>
<pre><code>$ virtualenv --relocatable ENV
</code></pre>
</blockquote>
<p>There are important notes on the same page :</p>
<blockquote>
<p>Note: you must run this after youâ€™ve installed any packages into the environment. If you make an environment relocatable, then install a new package, you must run the command again.</p>
<p>Also, this does not make your packages cross-platform. You can move the directory around, but it can only be used on other similar computers.</p>
</blockquote>
<p>It remains an experimental feature. Needless to say it's not a recommended production setup.</p>
</div>
<span class="comment-copy">I would like to say that the setup you described is really weird, i wouldn't recommend sharing libraries across multiple projects, even less across multiple computers, it's like asking for problems for free. Probably the os is the problem and I would recommend using a requirements file and getting used to <code>pip install</code> here you have also an addition on what could go wrong <a href="https://stackoverflow.com/a/35672533/4229159">stackoverflow.com/a/35672533/4229159</a></span>
<span class="comment-copy">I'm not using this on multiple projects. One project is being used by multiple people. I don't want them to maintain their own venvs, because then I'll have to be constantly fixing 12 different venvs. Much better for me to just have one that I maintain and everyone uses.</span>
<span class="comment-copy">It appears that this is primarily an OS version problem. When I create the venv on the Mojave computer, I can run python successfully on other machines.  Further issues will be in a new question.</span>
<span class="comment-copy">The 1st one is about pip, which I think I understand. Is there a particular part that you I'm misunderstanding?   The second... Docker is WAY more power than I need, and way more than my users can handle.</span>
<span class="comment-copy">Fundamentally this doesn't answer my question. I understand that people think that tihs is a bad idea, but I've looked at options, and this is the only way for me to do this.</span>
<span class="comment-copy">I don't need it to be multi platform. And it isn't being copied or moved. All instances  are in the same logical location so it should look identical to all users. I don't see why this is a problem.</span>
<span class="comment-copy">This doesn't makes it cross-plateform, it makes it relocatable and usable on different computers... Check the link I gave you.</span>
<span class="comment-copy">That's fine. I don't care about multi platform.</span>
<span class="comment-copy">Virtualenvs use absolute paths, which may not be the same on every computer. The command above changes the paths to relative ones, allowing the packages to be found on every machine.</span>
<span class="comment-copy">I understand all that. The paths are identical.</span>
