<div class="post-text" itemprop="text">
<p>How can I create or use a global variable in a function?</p>
<p>If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable in a local variable of the function which needs its access?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>
<pre><code>globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print(globvar)     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
</code></pre>
<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>
<p>See other answers if you want to share a global variable across modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces.</p>
<p>Say you've got a module like this:</p>
<pre><code># sample.py
myGlobal = 5

def func1():
    myGlobal = 42

def func2():
    print myGlobal

func1()
func2()
</code></pre>
<p>You might expecting this to print 42, but instead it prints 5.  As has already been mentioned, if you add a '<code>global</code>' declaration to <code>func1()</code>, then <code>func2()</code> will print 42.</p>
<pre><code>def func1():
    global myGlobal
    myGlobal = 42
</code></pre>
<p>What's going on here is that Python assumes that any name that is <em>assigned to</em>, anywhere within a function, is local to that function unless explicitly told otherwise.  If it is only <em>reading</em> from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes (e.g. the module's global scope).</p>
<p>When you assign 42 to the name <code>myGlobal</code>, therefore, Python creates a local variable that shadows the global variable of the same name.  That local goes out of scope and is <a href="http://www.digi.com/wiki/developer/index.php/Python_Garbage_Collection" rel="noreferrer">garbage-collected</a> when <code>func1()</code> returns; meanwhile, <code>func2()</code> can never see anything other than the (unmodified) global name.  Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of <code>myGlobal</code> inside <code>func1()</code> before you assign to it, you'd get an <code>UnboundLocalError</code>, because Python has already decided that it must be a local variable but it has not had any value associated with it yet.  But by using the '<code>global</code>' statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally.</p>
<p>(I believe that this behavior originated largely through an optimization of local namespaces -- without this behavior,  Python's VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn't already exist at module/builtin level), which would significantly slow down a very common operation.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to explore the notion of <a href="http://docs.python.org/reference/datamodel.html" rel="noreferrer">namespaces</a>. In Python, the <a href="http://docs.python.org/tutorial/modules.html" rel="noreferrer">module</a> is the natural place for <em>global</em> data:</p>
<blockquote>
<p>Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, <code>modname.itemname</code>.</p>
</blockquote>
<p>A specific use of global-in-a-module is described here - <a href="http://effbot.org/pyfaq/how-do-i-share-global-variables-across-modules.htm" rel="noreferrer">how-do-i-share-global-variables-across-modules</a>, and for completeness the contents are shared here:</p>
<blockquote>
<p>The canonical way to share information across modules within a single program is to create a special configuration module (often called config or cfg). Just import the configuration module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example:</p>
<p>File: config.py</p>
</blockquote>
<pre><code>x = 0   # Default value of the 'x' configuration setting
</code></pre>
<blockquote>
<p>File: mod.py</p>
</blockquote>
<pre><code>import config
config.x = 1
</code></pre>
<blockquote>
<p>File: main.py</p>
</blockquote>
<pre><code>import config
import mod
print config.x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.  </p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     global bar
...     baz = 5
...     print bar
...     print baz
...     print quux
... 
&gt;&gt;&gt; dis.disassemble(foo.func_code)
  3           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (baz)

  4           6 LOAD_GLOBAL              0 (bar)
              9 PRINT_ITEM          
             10 PRINT_NEWLINE       

  5          11 LOAD_FAST                0 (baz)
             14 PRINT_ITEM          
             15 PRINT_NEWLINE       

  6          16 LOAD_GLOBAL              1 (quux)
             19 PRINT_ITEM          
             20 PRINT_NEWLINE       
             21 LOAD_CONST               0 (None)
             24 RETURN_VALUE        
&gt;&gt;&gt; 
</code></pre>
<p>See how baz, which appears on the left side of an assignment in <code>foo()</code>, is the only <code>LOAD_FAST</code> variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to refer to a global variable in a function, you can use the <strong>global</strong> keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables.</p>
<p>However, if you assign to a new variable not declared as global in the function, it is implicitly declared as local, and it can overshadow any existing global variable with the same name.</p>
<p>Also, global variables are useful, contrary to some OOP zealots who claim otherwise - especially for smaller scripts, where OOP is overkill.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to already existing answers and to make this more confusing:</p>
<blockquote>
<p>In Python, variables that are only referenced inside a function are
  <strong>implicitly global</strong>. If a variable is assigned a new value anywhere
  within the function’s body, it’s assumed to be a <strong>local</strong>. If a variable
  is ever assigned a new value inside the function, the variable is
  implicitly local, and you need to explicitly declare it as ‘global’.</p>
<p>Though a bit surprising at first, a moment’s consideration explains
  this. On one hand, requiring global for assigned variables provides a
  bar against unintended side-effects. On the other hand, if global was
  required for all global references, you’d be using global all the
  time. You’d have to declare as global every reference to a built-in
  function or to a component of an imported module. This clutter would
  defeat the usefulness of the global declaration for identifying
  side-effects.</p>
</blockquote>
<p>Source: <em><a href="https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python">What are the rules for local and global variables in Python?</a></em>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>If I create a global variable in one function, how can I use that variable in another function?</h1>
</blockquote>
<p>We can create a global with the following function:</p>
<pre><code>def create_global_variable():
    global global_variable # must declare it to be a global first
    # modifications are thus reflected on the module's global scope
    global_variable = 'Foo' 
</code></pre>
<p>Writing a function does not actually run its code. So we call the <code>create_global_variable</code> function:</p>
<pre><code>&gt;&gt;&gt; create_global_variable()
</code></pre>
<h2>Using globals without modification</h2>
<p>You can just use it, so long as you don't expect to change which object it points to: </p>
<p>For example, </p>
<pre><code>def use_global_variable():
    return global_variable + '!!!'
</code></pre>
<p>and now we can use the global variable:</p>
<pre><code>&gt;&gt;&gt; use_global_variable()
'Foo!!!'
</code></pre>
<h2>Modification of the global variable from inside a function</h2>
<p>To point the global variable at a different object, you are required to use the global keyword again:</p>
<pre><code>def change_global_variable():
    global global_variable
    global_variable = 'Bar'
</code></pre>
<p>Note that after writing this function, the code actually changing it has still not run:</p>
<pre><code>&gt;&gt;&gt; use_global_variable()
'Foo!!!'
</code></pre>
<p>So after calling the function:</p>
<pre><code>&gt;&gt;&gt; change_global_variable()
</code></pre>
<p>we can see that the global variable has been changed. The <code>global_variable</code> name now points to <code>'Bar'</code>:</p>
<pre><code>&gt;&gt;&gt; use_global_variable()
'Bar!!!'
</code></pre>
<p>Note that "global" in Python is not truly global - it's only global to the module level. So it is only available to functions written in the modules in which it is global. Functions remember the module in which they are written, so when they are exported into other modules, they still look in the module in which they were created to find global variables.</p>
<h1>Local variables with the same name</h1>
<p>If you create a local variable with the same name, it will overshadow a global variable:</p>
<pre><code>def use_local_with_same_name_as_global():
    # bad name for a local variable, though.
    global_variable = 'Baz' 
    return global_variable + '!!!'

&gt;&gt;&gt; use_local_with_same_name_as_global()
'Baz!!!'
</code></pre>
<p>But using that misnamed local variable does not change the global variable:</p>
<pre><code>&gt;&gt;&gt; use_global_variable()
'Bar!!!'
</code></pre>
<p>Note that you should avoid using the local variables with the same names as globals unless you know precisely what you are doing and have a very good reason to do so. I have not yet encountered such a reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>With parallel execution, global variables can cause unexpected results if you don't understand what is happening. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable:</p>
<pre><code>import multiprocessing
import os
import random
import sys
import time

def worker(new_value):
    old_value = get_value()
    set_value(random.randint(1, 99))
    print('pid=[{pid}] '
          'old_value=[{old_value:2}] '
          'new_value=[{new_value:2}] '
          'get_value=[{get_value:2}]'.format(
          pid=str(os.getpid()),
          old_value=old_value,
          new_value=new_value,
          get_value=get_value()))

def get_value():
    global global_variable
    return global_variable

def set_value(new_value):
    global global_variable
    global_variable = new_value

global_variable = -1

print('before set_value(), get_value() = [%s]' % get_value())
set_value(new_value=-2)
print('after  set_value(), get_value() = [%s]' % get_value())

processPool = multiprocessing.Pool(processes=5)
processPool.map(func=worker, iterable=range(15))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>before set_value(), get_value() = [-1]
after  set_value(), get_value() = [-2]
pid=[53970] old_value=[-2] new_value=[ 0] get_value=[23]
pid=[53971] old_value=[-2] new_value=[ 1] get_value=[42]
pid=[53970] old_value=[23] new_value=[ 4] get_value=[50]
pid=[53970] old_value=[50] new_value=[ 6] get_value=[14]
pid=[53971] old_value=[42] new_value=[ 5] get_value=[31]
pid=[53972] old_value=[-2] new_value=[ 2] get_value=[44]
pid=[53973] old_value=[-2] new_value=[ 3] get_value=[94]
pid=[53970] old_value=[14] new_value=[ 7] get_value=[21]
pid=[53971] old_value=[31] new_value=[ 8] get_value=[34]
pid=[53972] old_value=[44] new_value=[ 9] get_value=[59]
pid=[53973] old_value=[94] new_value=[10] get_value=[87]
pid=[53970] old_value=[21] new_value=[11] get_value=[21]
pid=[53971] old_value=[34] new_value=[12] get_value=[82]
pid=[53972] old_value=[59] new_value=[13] get_value=[ 4]
pid=[53973] old_value=[87] new_value=[14] get_value=[70]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you are saying is to use the method like this:</p>
<pre><code>globvar = 5

def f():
    var = globvar
    print(var)

f()  # Prints 5
</code></pre>
<p>But the better way is to use the global variable like this:</p>
<pre><code>globavar = 5
def f():
    global globvar
    print(globvar)
f()   #prints 5
</code></pre>
<p>Both give the same output.</p>
</div>
<div class="post-text" itemprop="text">
<p>As it turns out the answer is always simple.</p>
<p>Here is a small sample module with a simple way to show it in a <code>main</code> definition:</p>
<pre><code>def five(enterAnumber,sumation):
    global helper
    helper  = enterAnumber + sumation

def isTheNumber():
    return helper
</code></pre>
<p>Here is how to show it in a <code>main</code> definition:</p>
<pre><code>import TestPy

def main():
    atest  = TestPy
    atest.five(5,8)
    print(atest.isTheNumber())

if __name__ == '__main__':
    main()
</code></pre>
<p>This simple code works just like that, and it will execute. I hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to reference the global variable in every function you want to use.</p>
<p>As follows:</p>
<pre><code>var = "test"

def printGlobalText():
    global var #wWe are telling to explicitly use the global version
    var = "global from printGlobalText fun."
    print "var from printGlobalText: " + var

def printLocalText():
    #We are NOT telling to explicitly use the global version, so we are creating a local variable
    var = "local version from printLocalText fun"
    print "var from printLocalText: " + var

printGlobalText()
printLocalText()
"""
Output Result:
var from printGlobalText: global from printGlobalText fun.
var from printLocalText: local version from printLocalText
[Finished in 0.1s]
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation.</p>
<p>If you didn't have to explicitly specify when an identifier was to refer to a predefined global, then you'd presumably have to explicitly specify when an identifier is a new local variable instead (for example, with something like the 'var' command seen in JavaScript). Since local variables are more common than global variables in any serious and non-trivial system, Python's system makes more sense in most cases.</p>
<p>You <em>could</em> have a language which attempted to guess, using a global variable if it existed or creating a local variable if it didn't. However, that would be very error-prone. For example, importing another module could inadvertently introduce a global variable by that name, changing the behaviour of your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def x1():
    global x
    x = 6

def x2():
    global x
    x = x+1
    print x

x = 5
x1()
x2()  # output --&gt; 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following on and as an add on, use a file to contain all global variables all declared locally and then 'import as':</p>
<h3>File initval.py</h3>
<pre><code>Stocksin = 300
Prices = []
</code></pre>
<h3>File getstocks.py</h3>
<pre><code>import  initval as  iv

Def   getmystocks (): 
     iv.Stocksin  = getstockcount ()


Def getmycharts ():
    For ic in range (0,iv.Stocksin):
</code></pre>
<p>.....</p>
</div>
<div class="post-text" itemprop="text">
<p>Writing to explicit elements of a global array does not apparently need the global declaration, though writing to it "wholesale" does have that requirement:</p>
<pre><code>import numpy as np

hostValue = 3.14159
hostArray = np.array([2., 3.])
hostMatrix = np.array([[1.0, 0.0],[ 0.0, 1.0]])

def func1():
    global hostValue    # mandatory, else local.
    hostValue = 2.0

def func2():
    global hostValue    # mandatory, else UnboundLocalError.
    hostValue += 1.0

def func3():
    global hostArray    # mandatory, else local.
    hostArray = np.array([14., 15.])

def func4():            # no need for globals
    hostArray[0] = 123.4

def func5():            # no need for globals
    hostArray[1] += 1.0

def func6():            # no need for globals
    hostMatrix[1][1] = 12.

def func7():            # no need for globals
    hostMatrix[0][0] += 0.33

func1()
print "After func1(), hostValue = ", hostValue
func2()
print "After func2(), hostValue = ", hostValue
func3()
print "After func3(), hostArray = ", hostArray
func4()
print "After func4(), hostArray = ", hostArray
func5()
print "After func5(), hostArray = ", hostArray
func6()
print "After func6(), hostMatrix = \n", hostMatrix
func7()
print "After func7(), hostMatrix = \n", hostMatrix
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you have a local variable with the same name, you might want to use the <a href="https://docs.python.org/3/library/functions.html#globals" rel="noreferrer"><code>globals()</code> function</a>.</p>
<pre><code>globals()['your_global_var'] = 42
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Reference the class namespace where you want the change to show up.  </p>
<p>In this example, runner is using <strong>max</strong> from the file config. I want my test to change the value of <strong>max</strong> when runner is using it.</p>
<p><strong>main/config.py</strong></p>
<pre><code>max = 15000
</code></pre>
<p><strong>main/runner.py</strong></p>
<pre><code>from main import config
def check_threads():
    return max &lt; thread_count 
</code></pre>
<p><strong>tests/runner_test.py</strong></p>
<pre><code>from main import runner                # &lt;----- 1. add file
from main.runner import check_threads
class RunnerTest(unittest):
   def test_threads(self):
       runner.max = 0                  # &lt;----- 2. set global 
       check_threads()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm adding this as I haven't seen it in any of the other answers and it might be useful for someone struggling with something similar. The globals() function returns a mutable global symbol dictionary where you can "magically" make data available for the rest of your code. 
For example:</p>
<pre><code>from pickle import load
def loaditem(name):
    with open(r"C:\pickle\file\location"+"\{}.dat".format(name), "rb") as openfile:
        globals()[name] = load(openfile)
    return True
</code></pre>
<p>and </p>
<pre><code>from pickle import dump
def dumpfile(name):
    with open(name+".dat", "wb") as outfile:
        dump(globals()[name], outfile)
    return True
</code></pre>
<p>Will just let you dump/load variables out of and into the global namespace. Super convenient, no muss, no fuss. Pretty sure it's python 3 only.</p>
</div>
<span class="comment-copy">It's extreme exaggeration to refer to globals as "so dangerous." Globals are perfectly fine in every language that has ever existed and ever will exist. They have their place. What you should have said is they can cause issues if you have no clue how to program.</span>
<span class="comment-copy">I think they are fairly dangerous. However in python "global" variables are actually module-level, which solves a lot of issues.</span>
<span class="comment-copy">I disagree that the reason Python requires the <code>global</code> keyword is because globals are dangerous. Rather, it's because the language doesn't require you to explicitly declare variables and automatically assumes that a variable that you assign has function scope unless you tell it otherwise. The <code>global</code> keyword is the means that is provided to tell it otherwise.</span>
<span class="comment-copy">@avgvstvs: And if you're implementing the same program without globals, you still have the same number of code paths. The argument you have made is not one against globals.</span>
<span class="comment-copy">@LightnessRacesinOrbit I'm not getting your point.  If you remove a global variable, you remove the complicating factor in that now, <b>arbitrary functions can no longer alter program state</b>, at various points in execution--thus altering execution in a way that is otherwise imperceptible to other functions relying on that variable.  You no longer have to keep track of, "Did <code>f2()</code> change state so now <code>f3()</code> might do something unexpected?  The functions can now operate agnostic to external program state.</span>
<span class="comment-copy">You mentioned that the namespace decision happens at <b>compile time</b>, I don't think it is true. from what I learn python's compilation <a href="http://stackoverflow.com/questions/33026506/how-does-python-implement-mutual-recursion">only checks for syntax error, not name error</a> try this example <b>def A(): x+=1</b>, if you don't run it, it will <b>not give UnboundLocalError</b>, please verify thank you</span>
<span class="comment-copy">It is common to use a capital letter for global variables like <code>MyGlobal = 5</code></span>
<span class="comment-copy">@watashiSHUN: The namespace decision <i>does</i> happen at compile time. Deciding that <code>x</code> is local is different from checking at runtime if the local name was bound to a value before it is used the first time.</span>
<span class="comment-copy">@Vassilis: It is common to upper case <i>all</i> letters: <code>MY_GLOBAL = 5</code>. See the <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a>.</span>
<span class="comment-copy">for a reason I don't like the <code>config.x</code>  can I get rid of it?  I came with <code>x = lambda: config.x</code> and then I have the <i>new</i> value in <code>x()</code>.   for some reason, having <code>a = config.x</code> does not do the trick for me.</span>
<span class="comment-copy">@vladosaurus does  <code>from config import x</code> solve that?</span>
<span class="comment-copy">The heuristic looks for <i>binding operations</i>. Assignment is one such operation, importing another. But the target of a <code>for</code> loop and the name after <code>as</code> in <code>with</code> and <code>except</code> statements also are bound to.</span>
<span class="comment-copy">thanks, i'm new to python, but know a bit of java.  what you said worked for me. and writing global a&lt;ENTER&gt; within the class.. seems to make more sense to me than within a function writing 'global a'..  I notice you can't say  global a=4</span>
<span class="comment-copy">This is probably the simplest yet very useful python trick for me. I name this module <code>global_vars</code>, and initialize the data in <code>init_global_vars</code>, that being called in the startup script. Then, I simply create accessor method for each defined global var. I hope I can upvote this multiple times! Thanks Peter!</span>
<span class="comment-copy">What if there are many many global variables and I don't want to have to list them one-by-one after a global statement?</span>
<span class="comment-copy">'in every function you want to use' is subtly incorrect, should be closer to: 'in every function where you want to <i>update</i>'</span>
<span class="comment-copy">What is the advantage to move the global variables to another file? Is it just to group together the global variables in a tiny file? And why using the statement <code>import ... as ...</code>? Why not just <code>import ...</code>?</span>
<span class="comment-copy">Ah... I have finally understood the advantage: No need to use the keyword <code>global</code> :-) =&gt; +1  :-) Please edit your answer to clarify these interrogations that other people may also have. Cheers</span>
