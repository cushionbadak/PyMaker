<div class="post-text" itemprop="text">
<p>For a web application I want to have a raise-able <code>dict</code>.</p>
<pre><code>from json import dumps

class RaiseableDict(dict, Exception): pass  # This won't work.

# I want this to work without change:

try:
    raise RaiseableDict(message='Some message text.')
except RaiseableDict as rd:
    rd['key'] = 'value'
    rd.update({'error_code': 42})
    dumps(rd)
</code></pre>
<p>How can I avoid</p>
<pre><code>TypeError: multiple bases have instance lay-out conflict
</code></pre>
<p>and have some raise-able <code>dict</code>-like exception that can directly be JSON-dumped without having to access a special attribute of the exception subclass or having to use <code>json.dumps</code>'s <code>default=</code> argument?</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you simply define the methods that you need for the exception to work as a dictionary and also define a dumps method of your exception?</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; class RaiseableDict(Exception):
    def __init__(self, message):
        self.message = message
        self._dict = {}
    def __setitem__(self, key, value):
        self._dict[key] = value
    def __getitem__(self, key):
        return self._dict[key]
    def update(self, other_dict):
        self._dict.update(other_dict)
    def dumps(self):
        return json.dumps(self._dict)


&gt;&gt;&gt; try:
    raise RaiseableDict(message='Some message text.')
except RaiseableDict as rd:
    rd['key'] = 'value'
    rd.update({'error_code': 42})
    rd.dumps()


'{"key": "value", "error_code": 42}'
</code></pre>
</div>
<span class="comment-copy">Have you considered implementing the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping" rel="nofollow noreferrer"><code>MutableMapping</code></a> abstract base class?</span>
<span class="comment-copy">@jonrsharpe Yes. The resulting instances won't be JSON-serializable.</span>
<span class="comment-copy">Oh interesting, I see from e.g. <a href="https://stackoverflow.com/q/14631898/3001761">stackoverflow.com/q/14631898/3001761</a> that only actual <code>dict</code> subclasses get serialised, not any <code>Mapping</code>. You might be SOL, then; those types don't cooperate at the C level :/</span>
<span class="comment-copy">Yep, <a href="https://github.com/python/cpython/blob/3.7/Lib/json/encoder.py#L430" rel="nofollow noreferrer">the <code>json</code> module requires <code>dict</code></a>, and <code>raise</code> requires <code>BaseException</code>, and these just cannot mix.</span>
<span class="comment-copy">What's wrong with using <code>json.dumps</code>'s <code>default</code> parameter though?</span>
