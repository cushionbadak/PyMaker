<div class="post-text" itemprop="text">
<p>I used Fermat's Little Theorem and found that 40^65 % 7 = 3. But when I use the following code in Python the answer it prints is 2.0:</p>
<pre><code>print((math.pow(40,65) % 7))
</code></pre>
<p>Why does Python give the result incorrectly as 2.0? </p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p><code>math.pow(40,65)</code> returns a float, which is an approximation. </p>
<p>Try <code>(40**65) % 7</code> instead.</p>
<p>Once you're happy that the maths works, you can use the built-in function <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow noreferrer"><code>pow</code></a> to calculate powers and mods in combination:</p>
<pre><code>pow(40, 65, 7)
</code></pre>
</div>
<span class="comment-copy"><code>math.pow(40,65)</code> returns a float, which is an approximation. Try <code>(40**65)%7</code> instead.</span>
<span class="comment-copy">Thanks khelwood! I didn't know that it was simply an approximation. (40**65)%7 really helped me too. How can i give you "points" and close this question?</span>
<span class="comment-copy">I'll post it as an answer.</span>
<span class="comment-copy">Except that you really should be doing <code>pow(40, 65, 7)</code>, which does modular exponentiation, and scales a lot better than computing the whole exponential and then taking the modulus at the end. (That <code>pow</code> is the builtin <code>pow</code>, not <code>math.pow</code>.)</span>
<span class="comment-copy">@user2357112 I'm not sure that would serve the OP's purpose in this question, but it is definitely helpful to know about.</span>
