<div class="post-text" itemprop="text">
<p>I'm using Scrapy to crawl a set of similar pages (webcomics). Because these pages are <em>very</em> similar, I wrote a class called <code>ComicCrawler</code> which contains all the spider logic and some class variables (<code>start_url</code>, <code>next_selector</code>, etc.). I then override these class variables in concrete classes for each spider. </p>
<p>Manually creating classes for each comic is cumbersome. I now want to specify the attributes in a JSON file and create the classes during runtime (ie. <em>apply the factory pattern (?)</em>) How do I best go about that? </p>
<p>Alternatively: Is there a way to run a spider without creating a class for it? <em>Edit:</em> The core problem seems to be that Scrapy uses classes, not instances for its spiders. Otherwise I'd just make the class variables instance variables and be done with it.</p>
<hr/>
<p>Example:</p>
<pre><code>class ComicSpider(Spider):
  name = None
  start_url = None
  next_selector = None
  # ...

  # this class contains much more logic than shown here

  def start_requests(self):
    # something including / along the lines of...
    yield Request (self.start_url, self.parse)

  def parse(self, response):
    # something including / along the lines of...
    yield Request(response.css(self.next_selector).get(), self.parse)
</code></pre>
<p>in another file:</p>
<pre><code>class SupernormalStep(ComicSpider):
  name = "SupernormalStep"
  start_url = "https://supernormalstep.com/archives/8"
  next_selector = "a.cc-next"
</code></pre>
<p>what I want:</p>
<pre><code>myComics = {
  "SupernormalStep": {
    "start_url": "https://supernormalstep.com/archives/8",
    "next_selector": "a.cc-next"
  }, # ...
}

process = CrawlerProcess(get_project_settings())
for name, attributes in myComics:
  process.crawl(build_process(name, attributes))
</code></pre>
<p>PS: I crawl responsibly.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>class</code> statement is a declarative wrapper around using <code>type</code> directly. Assuming <code>process.crawl</code> takes a class as an argument,</p>
<pre><code>process = CrawlerProcess(get_project_settings())
for name, attributes in myComics.items():
    process.crawl(type(name, (ComicSpider,), attributes))
</code></pre>
<p><code>type(name, (ComicSpider,), attributes)</code> will create a class with name <code>name</code>, that will inherit from <code>ComicSpider</code> and will have attributes as defined in the <code>attributes</code> dictionary. <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">An example on Python docs.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Look up metaclasses. This is the way in Python to dynamically create new classes. <a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">What are metaclasses in Python?</a></p>
<p>For this simpler case there is a simpler method which is described in <a href="https://stackoverflow.com/a/55130640/10687003">chepner's answer</a>.</p>
</div>
<span class="comment-copy">Is the attributes in your class are dynamic?</span>
<span class="comment-copy">No, they are defined statically, probably in a JSON file.</span>
<span class="comment-copy">You are right, this is much simpler than creating a metaclass.</span>
<span class="comment-copy">I added <code>.items()</code> to <code>myComics</code> but other than that it does exactly what I want.</span>
<span class="comment-copy">Thanks! This seems to be what I need. I'll type up my implementation as a separate answer once I figure it out.</span>
<span class="comment-copy">Metaclasses would seem to be overkill for this task.</span>
