<div class="post-text" itemprop="text">
<p>In Node.js, we use "cross-env" to set env variables. It can run on Windows, Linux and Mac OS.</p>
<pre><code>"scripts": {
  "dev": "cross-env NODE_ENV=development nodemon --watch src --experimental-modules ./src/app.mjs",
},
</code></pre>
<p>Is there a counterpart in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>In python ecosystem it's more common to rely on a custom config.py file which handles to get things from system variables or set reasonable defaults. <a href="https://hackernoon.com/4-ways-to-manage-the-configuration-in-python-4623049e841b" rel="nofollow noreferrer">This article</a> can detail more on this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried <code>os.environ</code>? Read and write value works the same way as with dictionary type. Since it is an environment variable, value can only be string type though.</p>
<p>Update:
If you only want to set environment variable when running <code>dev</code> mode, you can use the python <code>sys</code> library to check if the run command has <code>dev</code> argument. If so then you can set the environment variable <code>NODE_ENV</code> to <code>devlopment</code> by using the assignment expression <code>os.environ['NODE_ENV'] = 'development'</code>. <code>os.environ</code> should work on all operating systems you memntioned. After that you can run the command <code>nodemon --watch src --experimental-modules ./src/app.mjs</code> on Python using <code>check_call</code> function from Python's<code>subprocess</code> module. Remember to set <code>check_call</code> <code>env</code> argument to <code>os.environ</code> in order to load the environment variables you set into <code>env</code>.</p>
<p>Here is an example file<code>script.py</code>:</p>
<pre><code>import os
import sys
import subprocess

if len(sys.argv) &gt; 1 and ('dev' in sys.argv):
    os.environ['NODE_ENV'] = 'development'
    subprocess.check_call('nodemon --watch src --experimental-modules ./src/app.mjs', shell=True, env=os.environ)
</code></pre>
<p>So when you want to run <code>dev</code> mode, you can enter the command:</p>
<pre><code>python script.py dev
</code></pre>
</div>
<span class="comment-copy">Sir, I'm asking how to solve it in python.</span>
<span class="comment-copy">It is a built-in feature of <code>os</code> library. You can check out the documentation here <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow noreferrer">docs.python.org/3/library/os.html#os.environ</a></span>
<span class="comment-copy">My purpose is not to read the env variable. What I ask is how to set the env variables into script on multiple OS platforms. For the code I pasted in the question, we can run "npm run dev" to set "NODE_ENV" to "development" before starting "./src/app.mjs" on Windows, Linux and Mac OS. If there were a counterpart for python, it would be wonderful.</span>
<span class="comment-copy"><code>os.environ</code> can set environment variable into script on multiple OS platforms using the assignment expression. For example, in your case it will be <code>os.environ['NODE_ENV']='development'</code>. I thought your environment variable is <code>dev</code> and its value is <code>cross-env NODE_ENV ... ./src/app.mjs</code> since you didn't specify the variable name and value. You can check if the program is running in <code>dev</code> mode by using <code>sys</code> module in Python. You can use <code>check_call</code> function from <code>subprocess</code> module to run <code>nodemon</code>. I've updated my answer so you can try it out. Let me know if you encounter any issues.</span>
<span class="comment-copy">I'm using pipenv(similar to NPM for node) to control the project of python. And the custom script is my favorite part, see <a href="https://pipenv.readthedocs.io/en/latest/advanced/#custom-script-shortcuts" rel="nofollow noreferrer">pipenv.readthedocs.io/en/latest/advanced/â€¦</a>. So, can I write a command like this: 'test = "cross-env HOST=localhost pytest"'?</span>
