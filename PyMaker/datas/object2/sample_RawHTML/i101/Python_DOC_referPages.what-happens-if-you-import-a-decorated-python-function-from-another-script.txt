<div class="post-text" itemprop="text">
<p>I am looking at a function in a flask backend with a decorator on it and thinking of importing it into another script and decorating it in a different way. Does anyone know what happens when you import it, whether the decorator goes with it or not?</p>
<p>I had a look at <a href="https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python">this</a> but it's discussing more what happens in the same script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Decorating a function</p>
<pre><code>@some_decorator
def some_func(...):
    ...
</code></pre>
<p>is equivalent to applying a function to another object:</p>
<pre><code>def some_func(...):
    ...

some_func = some_decorator(some_func)
</code></pre>
<p>When you import the module, all you have access to is the object currently bound to <code>some_func</code>, which is the return value of <code>some_decorator</code> applied to the original function. Unless the thing returned <code>some_decorator</code> includes a reference to the original, undecorated function, you have no access to it from the imported module.</p>
<p>An example of exposing the original:</p>
<pre><code>def some_decorator(f):
    def _(*args, *kwargs):
        # Do some extra stuff, then call the original function
        # ...
        return f(*args, **kwargs)
    _.original = f
    return _

@some_decorator
def some_func(...):
    ...
</code></pre>
<p>When you import the module, <code>some_module.some_func</code> refers to the decorated function, but the original undecorated function is available via <code>some_module.some_func.original</code>, but <em>only</em> because the decorator was written to make it available. (As Martijn Peters points out, the <code>wraps</code> decorator does this--and some other nice things--for you, but the decorator still needs to <em>use</em> <code>wraps</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>No, importing a decorated function will not remove the decorator.</p>
<p>Importing retrieves the <em>current object</em> from the global namespace of the source module, and decorating a function causes the decorator return value to be stored in the global namespace.</p>
<p>Importing a module is <em>mostly</em> syntactic sugar for <code>modulename = sys.modules['modulename']</code> (for <code>import modulename</code>) and <code>objectname = sys.modules['modulename'].objectname</code> assignments (for <code>from modulename import objectname</code>, in either case after first ensuring that <code>sys.modules</code> has the desired module loaded), and globals in a module are the same thing as attributes on a module object. Decorating is just syntactic sugar for <code>functionname = decorator(functionobject)</code>.</p>
<p>If you need to add a new decorator to the imported function, just call the decorator:</p>
<pre><code>from somemodule import somedecoratedfunction

newname_or_originalname = decorator(somedecoratedfunction)
</code></pre>
<p>If the imported decorated function doesn't lend itself to being decorated again in a new layer, or you want access to the original undecorated function, see if the object has a <code>__wrapped__</code> attribute:</p>
<pre><code>from somemodule import somedecoratedfunction

unwrapped_function = somedecoratedfunction.__wrapped__
</code></pre>
<p>A well-written decorators uses the <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>@functools.wraps()</code> decorator</a>, which sets that attribute to point to the original:</p>
<pre><code>&gt;&gt;&gt; from functools import wraps
&gt;&gt;&gt; def demodecorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwargs):
...         print("Decorated!")
...         return f(*args, **kwargs)
...     return wrapper
...
&gt;&gt;&gt; @demodecorator
... def foo(name):
...     print(f"Hello, {name or 'World'}!")
...
&gt;&gt;&gt; foo('cardamom')
Decorated!
Hello, cardamom!
&gt;&gt;&gt; foo.__wrapped__('cardamom')
Hello, cardamom!
</code></pre>
</div>
<span class="comment-copy">The decorator does not, but the <i>result</i> of the decorator does. Decoration is just a syntactic shortcut for <code>def funcname(...): ...; funcname = decorator(funcname)</code>. You don't have access to the original, undecorated function, unless the decorator explicitly exposes it via the new function.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/25829364/applying-a-decorator-to-an-imported-function" title="applying a decorator to an imported function">stackoverflow.com/questions/25829364/â€¦</a></span>
<span class="comment-copy">@chepner what do you mean by <i>unless the decorator explicitly exposes it via the new function</i> ?</span>
<span class="comment-copy">@cardamom: functions can have attributes, the decorator can return a new function object with additional attributes, one of which could be a reference to the original.</span>
<span class="comment-copy">@cardamom: the <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>@functools.wraps</code> decorator utility</a> does exactly that, it sets <code>wrapper.__wrapped__</code> to the original function.</span>
<span class="comment-copy">Thanks both good answers, marking this one as it is simpler, does not involve an extra import and then, would not know what order to put them in if @wraps had to go above or below another decorator. There is also the point that <code>.__wrapped__</code> is counterintuitive when what it actually does is UNwrap.</span>
<span class="comment-copy">It doesn't unwrap anything; it refers to the thing that <i>gets</i> wrapped before it was, in fact, wrapped.</span>
<span class="comment-copy">ok, but 'original' is a better word for it..</span>
<span class="comment-copy">@cardamom just know that the <a href="https://docs.python.org/3/library/inspect.html#inspect.unwrap" rel="nofollow noreferrer">standard library provides additional functionality</a> when you use that attribute name, making your decorator much more useful in other contexts such as an IDE providing autocompletion. Plus, <code>@functools.wraps()</code> takes care of a lot more for you.</span>
