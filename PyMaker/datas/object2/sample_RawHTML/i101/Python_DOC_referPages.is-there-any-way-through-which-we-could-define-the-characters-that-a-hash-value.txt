<div class="post-text" itemprop="text">
<p>For example, I want the hash value that I get by using python function blake2b to have only (acdefghjklmnpqrstuvwxyz2345679)</p>
</div>
<div class="post-text" itemprop="text">
<p>A hash is a bit string. You can <em>encode</em> this bit string using a specific set of printable characters if you want. Hexadecimal (using <code>0123456789abcdef</code>) is the most common way, but if you want a different set of characters, you can choose those instead.</p>
<p>To encode the hash value in hexadecimal, assuming that you have it as a raw string like the value returned by the <code>digest</code> method in the standard <code>hashlib</code> module, use <code>hash.hex()</code> in Python 3 and <code>hash.encode('hex')</code> in Python 2. The <code>hashlib</code> module has a method <code>hexdigest</code> which returns this encoding directly.</p>
<p>If you want to encode the value using single-case letters and digits without a risk of confusion on <code>0/O</code> and <code>1/I</code>, there's a standard for that called <a href="https://tools.ietf.org/html/rfc3548.html#section-5" rel="nofollow noreferrer">Base32</a>. Base32 is available in Python in the <a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer"><code>base64</code></a> module. The standard encoding uses only uppercase, but you can translate to lowercase if you want. Base32 pads with <code>=</code>, but you can remove them for storage.</p>
<pre><code>import base64, hashlib
hash = hashlib.new('SHA256', b'input').digest()
b32_hash = base64.b32encode(hash).lower().rstrip(b'=')
</code></pre>
<p>If you really want that specific 30-character set, you can convert the hexadecimal representation to an integer using <code>int(â€¦.hexdigest(), 16)</code> then <a href="https://stackoverflow.com/questions/2063425/python-elegant-inverse-function-of-intstring-base">convert that integer to a string using the digits of your choice</a>.</p>
</div>
