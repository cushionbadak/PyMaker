<div class="post-text" itemprop="text">
<p>So basically I have an app I'm making that has user data which I want to backup and load in the database. I'm storing the data in yml files. Now, a user has posts. Each post has a timestamp, text and tags. I want to use an ordereddictionary in order to retain order when I write the data in the YAML files. Currently, I'm doing something like this:</p>
<pre><code>def get_posts(user):
    posts_arr = []

    for post in user.posts.all():
        temparr = OrderedDict()

        temparr['timestamp'] = post.created_at.strftime("%Y-%m-%d %H:%M %p")
        temparr['text'] = post.text
        temparr['tags'] = (',').join(list(post.tags.all().values_list('field',flat=True)))

        posts_arr.append(temparr)

    return posts_arr
</code></pre>
<p>As you can see, I'm using an array of orderectionaries and that I think is the reason my posts for each user are not ordered. How can I resolve this issue.</p>
<p>I am returning this posts_arr object to be stored within another ordereddictionary.</p>
<p>Also, I since the posts text is kind of nested and is a large block of text, I want to make sure that text is also stored in string literal block styles.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically, your issue is a misunderstanding on how ordered dictionaries work in python. The python documentation states that an OrderedDict is a:</p>
<blockquote>
<p>dict subclass that remembers the order entries were added</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/collections.html#module-collections" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html#module-collections</a></p>
<p>Personally, I'd recommend a list of dictionaries created from a pre-sorted list of posts. In this case, it would look something like this if we were to keep the majority of your code as-is:</p>
<pre><code>def get_posts(user):
    posts_arr = []
    sorted_posts = sorted(user.posts.all(), key=(lambda post: post.created_at))  # Sorts the posts based on their created_at date
    for post in sorted_posts:
        temparr = dict()

        temparr['timestamp'] = post.created_at.strftime("%Y-%m-%d %H:%M %p")
        temparr['text'] = post.text
        temparr['tags'] = (',').join(list(post.tags.all().values_list('field',flat=True)))

        posts_arr.append(temparr)

    return posts_arr
</code></pre>
<p>You could use list comprehensions to build this list from the sorted one like chepner suggested, but I don't want to change too much.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use an ordinary <code>dict</code> (or <code>OrderedDict</code> if you really need to) for each post, and use a list for the collection of all posts. Once you do that, it's a short jump to using a list comprehension to define the return value directly.</p>
<pre><code>def get_posts(user):
    return [{
                'timestamp': post.created_at.strftime("%Y-%m-%d %H:%M %p"),
                'text': post.text,
                'tags': ','.join(list(post.tags.all().values_list('field', flat=True)))
            } for post in user.posts.all()]
</code></pre>
</div>
<span class="comment-copy">You don't need an <code>OrderedDict</code> for either of these. <code>temparr</code> can be an ordinary <code>dict</code>, because you don't (or shouldn't) care about the relative order of the <code>timestamp</code>, <code>text</code>, and <code>tags</code> fields, and <code>posts_arr</code> should just be a <i>list</i>.</span>
<span class="comment-copy">Unfortunately I do need to maintain the order as well in order to ensure readability for ease. If I don't do that and then all my posts will have irregular order of timestamp, text and tags</span>
<span class="comment-copy">If you are using Python 3.7, the insertion order will be preserved in a regular <code>dict</code> as well.</span>
<span class="comment-copy">hmm I'm using python 3.5 currently</span>
<span class="comment-copy">What exactly is not ordered? Can you provide a piece of your YAML file as it comes out, as well as it should come out. Does <code>user.posts.all()</code> iterate in the order you want?</span>
