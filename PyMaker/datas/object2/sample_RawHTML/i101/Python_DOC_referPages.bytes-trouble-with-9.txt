<div class="post-text" itemprop="text">
<p>I have data stored in a byte array. How can I convert this data into a hex string?</p>
<p>Example of my byte array:</p>
<pre><code>array_alpha = [ 133, 53, 234, 241 ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/2/library/stdtypes#str.format" rel="noreferrer"><code>str.format</code></a>:</p>
<pre><code>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]
&gt;&gt;&gt; print ''.join('{:02x}'.format(x) for x in array_alpha)
8535eaf1
</code></pre>
<p>or using <a href="http://docs.python.org/2/library/functions.html#format" rel="noreferrer"><code>format</code></a></p>
<pre><code>&gt;&gt;&gt; print ''.join(format(x, '02x') for x in array_alpha)
8535eaf1
</code></pre>
<blockquote>
<p><em>Note:</em> In the format statements, the <code>02</code> means it will pad with up to 2 leading <code>0</code>s if necessary. This is important since <code>[0x1, 0x1, 0x1] i.e. (0x010101)</code> would be formatted to <code>"111"</code> instead of <code>"010101"</code> </p>
</blockquote>
<p>or using <a href="http://docs.python.org/2/library/functions.html#bytearray" rel="noreferrer"><code>bytearray</code></a> with <a href="http://docs.python.org/2/library/binascii.html#binascii.hexlify" rel="noreferrer"><code>binascii.hexlify</code></a>:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(bytearray(array_alpha))
'8535eaf1'
</code></pre>
<hr/>
<p>Here is a benchmark of above methods in Python 3.6.1:</p>
<pre class="lang-python prettyprint-override"><code>from timeit import timeit
import binascii

number = 10000

def using_str_format() -&gt; str:
    return "".join("{:02x}".format(x) for x in test_obj)

def using_format() -&gt; str:
    return "".join(format(x, "02x") for x in test_obj)

def using_hexlify() -&gt; str:
    return binascii.hexlify(bytearray(test_obj)).decode('ascii')

def do_test():
    print("Testing with {}-byte {}:".format(len(test_obj), test_obj.__class__.__name__))
    if using_str_format() != using_format() != using_hexlify():
        raise RuntimeError("Results are not the same")

    print("Using str.format       -&gt; " + str(timeit(using_str_format, number=number)))
    print("Using format           -&gt; " + str(timeit(using_format, number=number)))
    print("Using binascii.hexlify -&gt; " + str(timeit(using_hexlify, number=number)))

test_obj = bytes([i for i in range(255)])
do_test()

test_obj = bytearray([i for i in range(255)])
do_test()
</code></pre>
<p>Result:</p>
<pre class="lang-none prettyprint-override"><code>Testing with 255-byte bytes:
Using str.format       -&gt; 1.459474583090427
Using format           -&gt; 1.5809937679100738
Using binascii.hexlify -&gt; 0.014521426401399307
Testing with 255-byte bytearray:
Using str.format       -&gt; 1.443447684109402
Using format           -&gt; 1.5608712609513171
Using binascii.hexlify -&gt; 0.014114164661833684
</code></pre>
<p>Methods using <code>format</code> do provide additional formatting options, as example separating numbers with spaces <code>" ".join</code>, commas <code>", ".join</code>, upper-case printing <code>"{:02X}".format(x)</code>/<code>format(x, "02X")</code>, etc., but at a cost of great performance impact.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.hex" rel="noreferrer">hex() method</a> of the <code>bytes</code> type on Python 3.5 and up:</p>
<pre><code>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]
&gt;&gt;&gt; print(bytes(array_alpha).hex())
8535eaf1
</code></pre>
<p>EDIT: it's also much faster than <code>hexlify</code> (modified @falsetru's benchmarks above)</p>
<pre><code>from timeit import timeit
N = 10000
print("bytearray + hexlify -&gt;", timeit(
    'binascii.hexlify(data).decode("ascii")',
    setup='import binascii; data = bytearray(range(255))',
    number=N,
))
print("byte + hex          -&gt;", timeit(
    'data.hex()',
    setup='data = bytes(range(255))',
    number=N,
))
</code></pre>
<p>Result:</p>
<pre><code>bytearray + hexlify -&gt; 0.011218150997592602
byte + hex          -&gt; 0.005952142993919551
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>hex_string = "".join("%02x" % b for b in array_alpha)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have a numpy array, you can do the following:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([133, 53, 234, 241])
&gt;&gt;&gt; a.astype(np.uint8).data.hex()
'8535eaf1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or, if you are a fan of functional programming:</p>
<pre><code>&gt;&gt;&gt; a = [133, 53, 234, 241]
&gt;&gt;&gt; "".join(map(lambda b: format(b, "02x"), a))
8535eaf1
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/6624453/4279">What's the correct way to convert bytes to a hex string in Python 3?</a></span>
<span class="comment-copy">Yours last trick give me <code>b'8535eaf1'</code>  on my system, what is <code>b</code> ?</span>
<span class="comment-copy">@GrijeshChauhan, Are you using Python 3.x? In Python 3.x binascii.hexlify return <code>bytes</code> objects.</span>
<span class="comment-copy">Yes, my Python is 3.3.2. -- <code>return bytes objects</code> - byte object means? something like <code>int</code> object?</span>
<span class="comment-copy">@GrijeshChauhan, See <a href="http://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer"><code>Built-in Types - Bytes</code></a>.</span>
<span class="comment-copy">@mkingston, You can omit the encoding: <code>b'8535eaf1'.decode()</code></span>
<span class="comment-copy">thanks for providing an answer that also works with older versions of python (forced to use 2.5.1 here)</span>
<span class="comment-copy">This requires the import of an external library and does not address the fact that OP is working with bytes. This is not the most robust solution.</span>
<span class="comment-copy">I still think that it is a good idea to answer OP's question instead of making a general post that may be useful to someone. It is very unlikely that someone searching Google for how to process numpy arrays is going to come to the question titled "Byte Array to Hex String".</span>
<span class="comment-copy">That's how I got here...</span>
<span class="comment-copy">This just a worse way of spelling <code>bytearray([133, 53, 234, 241]).hex()</code></span>
<span class="comment-copy">I think I misintepreted your answer. You mean "you can do this <i>if you have</i> a numpy array", not "you can do this with numpy <i>as a tool</i>"</span>
