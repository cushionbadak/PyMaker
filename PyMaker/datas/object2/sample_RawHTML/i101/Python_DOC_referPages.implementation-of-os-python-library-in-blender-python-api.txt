<div class="post-text" itemprop="text">
<p>I had to create and write to a text file from Blender python script. the documentation <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer">here</a> says that with the <code>fdopen()</code> function one can open the txt file as a stream in your code. </p>
<p>However, <code>fdopen()</code> does not seem to be implemented in python api in blender. Instead, it is commented as #supply <code>fdopen()</code>. you can actually do what <code>fdopen()</code> must do with another function <code>open()</code> which is a built-in function of the python api (seemingly does not belong to os). </p>
<p>Also, if I use <code>os.open()</code> in blender, it returns an integer instead of a file. Does this all mean that the Blender os module implementation is different from the 'native' python os? </p>
<p>I mean, this library is 're-written' in C by blender devs? I have no computer science background, so I cannot really understand, why that is happening, if I am right in my assumption. My understanding is that BDFL has written os module in C and it should now perfectly work for everyone, everywhere. why not simply take it and embed in python api in blender? can someone explain this to me in some detail?</p>
</div>
<div class="post-text" itemprop="text">
<p>Blender uses default python os module. <a href="https://docs.python.org/3/library/os.html#os.open" rel="nofollow noreferrer">os.open</a> returns a file descriptor (<code>int</code>); builtin global function <a href="https://docs.python.org/3.5/library/functions.html#open" rel="nofollow noreferrer">open</a> returns file object - that's what you should use for your regular file access.</p>
</div>
<span class="comment-copy">For Blender questions you can also use: <a href="https://blender.stackexchange.com/">blender.stackexchange.com</a></span>
<span class="comment-copy">@Bruno hey, thanks. from my experience, programming questions are answered better and with higher quality here because at blen.stack people are usually anticipating questions about blender itself</span>
<span class="comment-copy">okay but then I am confused. function signatures ARE different in the both. fdopen() returns a file in default python os, and is not impelemented in blender python api. or am I wrong?</span>
<span class="comment-copy">It's just the default python <code>os</code> module, why do you think it is different in any way? <code>os</code> module is, by its nature, very operating system specific, most of its functions are 1:1 match for C runtime functions OS provide. E.g. C <code>fdopen</code> on linux is <a href="https://linux.die.net/man/3/fdopen" rel="nofollow noreferrer">linux.die.net/man/3/fdopen</a> function to use <code>int</code> file descriptor as <code>FILE*</code>. What it returns is still isn't python file object but libc <code>FILE*</code>; unless you need to pass it to C code that expects a <code>FILE*</code> it is useless to you. Use python's <code>open</code> (better in <code>with open("filename", "w") as f:</code> block for automatic <code>close</code> handling).</span>
<span class="comment-copy">Perhaps you're comparing it with python2 while blender uses python3?</span>
<span class="comment-copy">I think you were right in your second comment. So, fdopen() returns a C-relevant output, that's why it is returning the useless integer if you're in python. thanks!</span>
