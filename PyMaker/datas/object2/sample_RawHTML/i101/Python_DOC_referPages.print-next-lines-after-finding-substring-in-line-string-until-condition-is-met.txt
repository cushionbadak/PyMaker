<div class="post-text" itemprop="text">
<p>I would like to:</p>
<ol>
<li>read lines from the file</li>
<li>find line with specified text (<code>## Required reading</code>)</li>
<li>print next lines after the line with specific text IF they contain star (<code>*</code>) at the beginning of the line</li>
<li>if there are no more lines with star (<code>*</code>) (or different line) in the next line, it must stop</li>
</ol>
<p>So what I did so far is reading the file, getting lines and finding specific text, in this case it is <code>## Required reading</code></p>
<pre><code>with open(file, "r") as input:
  for line in input:
    if '## Required reading' in line:
      print(next(input)) 
</code></pre>
<p>This will print out the next line but thats all. What I need is to print out all the next lines if they contain star(*) at at the beginning of the line. If not, it should stop printing lines.</p>
<p>I was thinking about some <code>while</code> condition but I couldn't figure out how</p>
<p>This is how it looks in original file:</p>
<pre><code>## Required reading
* [5.5. Dictionaries](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)
* [5.6. Looping Techniques](https://docs.python.org/3/tutorial/datastructures.html#looping-techniques)
* [5.7. More on Conditions](https://docs.python.org/3/tutorial/datastructures.html#more-on-conditions)
* [5.8. Comparing Sequences and Other Types](https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types)
* [5.4. Sets](https://docs.python.org/3/tutorial/datastructures.html#sets)
* [Set Types â€” set, frozenset](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset)
* [7.2. Reading and Writing Files](https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files)
* [7.2.1. Methods of File Objects](https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects)
* [8.4. The try statement](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement)
* [8.5. The with statement](https://docs.python.org/3/reference/compound_stmts.html#the-with-statement)
* [Open](https://docs.python.org/3/library/functions.html#open)
* [file object](https://docs.python.org/3/glossary.html#term-file-object)
</code></pre>
<p>but the file also contain other sections, not only <code>## Required reading</code> section, and I would like to get only the links with star (<code>*</code>) from this section and print them out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>with open(file, "r") as input:
  is_required = False
  for line in input:
    if is_required and line.startswith("*"):
      print(line)
    else:
      is_required = '## Required reading' in line
</code></pre>
<p>The last line will set the <code>is_required</code> flag to either <code>True</code> or <code>False</code> depending on the line having the specified text or not.</p>
</div>
<span class="comment-copy">What is the file size? Because the best way is to load the file into a variable. You can then use a regex (module <code>re</code>) or at least a simpler loop + work with the string.</span>
<span class="comment-copy">@s3n0 I disagree as that would require two passes (one pass for reading the file and second pass to extract information) while you can accomplish the task in one pass.</span>
<span class="comment-copy">So, in your opinion, are RAM operations faster than HDD operations? :) Yes, of course, almost every OS and language interpreter now uses a buffer when reading from disk. Yes, of course physical HDDs are no longer used and there are only SSDs. But I have to count on everything at work :). I grew up with Assembler :). For me, it will still be true that RAM = access time in nanoseconds and HDD = access time in milliseconds. A similar problem arises with the <code>re</code> module - depending on where and how you use it. So I asked about the volume of data. If it is 100MB filesize, it can be a big problem.</span>
<span class="comment-copy">@s3n0 I hope you are already aware that you have to read everything from the disk first in order to store it in RAM. You are simply adding more "nanoseconds" to "milliseconds" where you can do in in "milliseconds".</span>
<span class="comment-copy">that is clever, got it. Thank you for your help and time.</span>
