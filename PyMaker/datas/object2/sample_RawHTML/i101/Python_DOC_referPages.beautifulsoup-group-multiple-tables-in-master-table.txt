<div class="post-text" itemprop="text">
<p>I'm using BeautifulSoup to parse an HTML document with the following structure:</p>
<pre><code>&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Thread&lt;/th&gt;
      &lt;td&gt; (555EEE555)&lt;br/&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;th&gt;Participants&lt;/th&gt;
              &lt;td&gt;John Doe&lt;br/&gt;Jane Doe&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;&lt;br/&gt;&lt;br/&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Author&lt;/th&gt;
              &lt;td&gt;John Doe&lt;br/&gt;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Sent&lt;/th&gt;
              &lt;td&gt;2017-10-16 19:03:23 UTC&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Body&lt;/th&gt;
              &lt;td&gt;Test message with some body text&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;&lt;br/&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Author&lt;/th&gt;
              &lt;td&gt;Jane Doe&lt;br/&gt;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Sent&lt;/th&gt;
              &lt;td&gt;2017-10-17 08:03:23 UTC&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Body&lt;/th&gt;
              &lt;td&gt;Second test message with some body text&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;&lt;br/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<p>This message structure repeats throughout the document. I need to parse out individual messages by grouping the <code>Author</code>, <code>Sent</code> and <code>Body</code> tables. Here's the code I have so far:</p>
<pre><code>with open(path) as g:
    soup = BeautifulSoup(g, 'html.parser')

table_parent = soup.find('td')

for idx, i in enumerate(table_parent.find_all('table', recursive=False)):
    for x in i.find_all('table'):
        print 'key: %s | data: %s' % (x.th.get_text(), x.td.get_text())
</code></pre>
<p>which prints the following:</p>
<pre><code>key: Current Participants | data: John DoeJane Doe
key: Author | data: John Doe
key: Sent | data: 2017-10-16 19:03:23 UTC
key: Body | data: Test message with some body text
</code></pre>
<p>How can I write code that will loop through the entire document and group each <code>Author</code>, <code>Sent</code> and <code>Body</code> appropriately to parse out each individual message?</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume you always have a main table as parent</p>
<p>You should be able to do this:</p>
<pre><code>from bs4 import BeautifulSoup as soup
import requests

html = """&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Thread&lt;/th&gt;
      &lt;td&gt; (555EEE555)&lt;br/&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;th&gt;Participants&lt;/th&gt;
              &lt;td&gt;John Doe&lt;br/&gt;Jane Doe&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;&lt;br/&gt;&lt;br/&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Author&lt;/th&gt;
              &lt;td&gt;John Doe&lt;br/&gt;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Sent&lt;/th&gt;
              &lt;td&gt;2017-10-16 19:03:23 UTC&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Body&lt;/th&gt;
              &lt;td&gt;Test message with some body text&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;&lt;br/&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Author&lt;/th&gt;
              &lt;td&gt;Jane Doe&lt;br/&gt;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Sent&lt;/th&gt;
              &lt;td&gt;2017-10-17 08:03:23 UTC&lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Body&lt;/th&gt;
              &lt;td&gt;Second test message with some body text&lt;br/&gt;
&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;&lt;br/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;"""

def _get_obj():
    r = {
        'Author': '',
        'Sent': '',
        'Body': ''
    }
    return r

page = soup(html, 'html.parser')

main_table = page.find('table')
result = []
r = _get_obj()

for t in main_table.find_all('table'):
    if t.find('th', text='Author'):
        r['Author'] = t.find('td').get_text()
    if t.find('th', text='Sent'):
        r['Sent'] = t.find('td').get_text()
    if t.find('th', text='Body'):
        r['Body'] = t.find('td').get_text()
        result.append(r)
        r = _get_obj()

print(result)
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>[
{'Author': 'John Doe', 'Sent': '2017-10-16 19:03:23 UTC\n', 'Body': 'Test message with some body text\n'},
{'Author': 'Jane Doe', 'Sent': '2017-10-17 08:03:23 UTC\n', 'Body': 'Second test message with some body text\n'}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my solution, I continue with your code:</p>
<pre><code>table_parent = soup.find('td')
tables = table_parent.find_all('table', recursive=False)
tables_str = " ".join([str(t) for t in tables[1:]])
soup_tables = BeautifulSoup(tables_str)
trs = soup_tables.find_all("tr")

for i in xrange(0, len(trs), 3):
    print(trs[i].contents[1].text, trs[i].contents[3].text)
    print(trs[i+1].contents[1].text, trs[i+1].contents[3].text)
    print(trs[i+2].contents[1].text, trs[i+2].contents[3].text)
    print("-"*8)
</code></pre>
<p>This will print:</p>
<pre><code>(u'Author', u'John Doe')
(u'Sent', u'2017-10-16 19:03:23 UTC\n')
(u'Body', u'Test message with some body text\n')
--------
(u'Author', u'Jane Doe')
(u'Sent', u'2017-10-17 08:03:23 UTC\n')
(u'Body', u'Second test message with some body text\n')
--------
</code></pre>
<p>If you need some explain, ask me</p>
</div>
<div class="post-text" itemprop="text">
<p>I would rather avoid getting the table and focus on <code>&lt;th&gt;</code> tag with <code>Author</code>, <code>Sent</code> and <code>Body</code> text. You could then use <em><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all-next-and-find-next" rel="nofollow noreferrer">find_next()</a></em>  to get the next <code>td</code> and get the text within it. You could then use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> function to aggregate the data. If the markup is in a variable <code>html_doc</code>, then the following code should work.</p>
<pre><code>from bs4 import BeautifulSoup
soup=BeautifulSoup(html_doc,'html.parser')
authors=[x.find_next('td').text for x in soup.find_all('th',text='Author')]
sent=[x.find_next('td').text.strip() for x in soup.find_all('th',text='Sent')]
body=[x.find_next('td').text.strip() for x in soup.find_all('th',text='Body')]
for item in zip(authors,sent,body):
    print(item)
</code></pre>
<p><em>Outputs:</em></p>
<pre><code>('John Doe', '2017-10-16 19:03:23 UTC', 'Test message with some body text')
('Jane Doe', '2017-10-17 08:03:23 UTC', 'Second test message with some body text')
</code></pre>
</div>
<span class="comment-copy">Pls post complete HTML or url</span>
<span class="comment-copy">@Wonka I updated the HTML section of the question. I can't post the whole document, however the structure in my example should be sufficient. The inner structure just repeats throughout.</span>
<span class="comment-copy">Ok, so you know that each <i>message</i> starts with a <code>Author</code> key. You could feed a list with a dict per message, adding a new dict on each <code>Author</code> key and storing the relevant data into that dict. I cannot post a true answer with code, because the code you show does not work with the html example you give...</span>
<span class="comment-copy">Sorry for the late reply, but this seemed to work. I don't really fully understand what it's doing though. I get that it looks through the table headers of all the inner tables and pulls the text of the specified headers, I'm just confused on the structure of using the function at the end of the for loop.</span>
