<div class="post-text" itemprop="text">
<p>I am trying to write a for loop that creates new columns with boolean values indicating whether both of the columns being referenced contain True values. I'd like this loop to run through existing columns and compare, but I'm not sure how to get the loop to do so. Thus far, I have been trying to use lists that refer to the different columns. Code follows:</p>
<pre><code>import pandas as pd
import numpy as np

elig = pd.read_excel('spreadsheet.xlsx')

elig['ELA'] = elig['SELECTED_EXAMS'].str.match('.*English Language Arts.*')
elig['LivEnv'] = elig['SELECTED_EXAMS'].str.match('.*Living Environment.*')
elig['USHist'] = elig['SELECTED_EXAMS'].str.match('.*US History.*')
elig['Geometry'] = elig['SELECTED_EXAMS'].str.match('.*Geometry.*')
elig['AlgebraI'] = elig['SELECTED_EXAMS'].str.match('.*Algebra I.*')
elig['GlobalHistory'] = elig['SELECTED_EXAMS'].str.match('.*Global History.*')
elig['Physics'] = elig['SELECTED_EXAMS'].str.match('.*Physics.*')
elig['AlgebraII'] = elig['SELECTED_EXAMS'].str.match('.*Algebra II.*')
elig['EarthScience'] = elig['SELECTED_EXAMS'].str.match('.*Earth Science.*')
elig['Chemistry'] = elig['SELECTED_EXAMS'].str.match('.*Chemistry.*')
elig['LOTE Spanish'] = elig['SELECTED_EXAMS'].str.match('.*LOTE â€“ Spanish.*')

# CHANGE TO LOOP--enter columns for instances in which scorers overlap competencies (e.g. can score two different exams). This is helpful in the event that two exams are scored on the same day, and we need to resolve numbers of scorers.

exam_list = ['ELA','LiveEnv','USHist','Geometry','AlgebraI','GlobalHistory','Physics','AlgebraII','EarthScience','Chemistry','LOTE Spanish']
nestedExam_list = ['ELA','LiveEnv','USHist','Geometry','AlgebraI','GlobalHistory','Physics','AlgebraII','EarthScience','Chemistry','LOTE Spanish']

for exam in exam_list:
    for nestedExam in nestedExam_list:
        elig[exam+nestedExam+' Overlap'] = np.where((elig[exam]==True)&amp;(elig[nestedExam]==True,),True,False)
</code></pre>
<p>I think the issue is with the np.where(), where what I want is for exam and nestedExam to call the columns in question, but instead they're just calling the list items. Error message follows:</p>
<hr/>
<pre class="lang-none prettyprint-override"><code>ValueError                                Traceback (most recent call last)
&lt;ipython-input-33-9347975b8865&gt; in &lt;module&gt;
      3 for exam in exam_list:
      4     for nestedExam in nestedExam_list:
----&gt; 5         elig[exam+nestedExam+' Overlap'] = np.where((elig[exam]==True)&amp;(elig[nestedExam]==True,),True,False)
      6 
      7 """

C:\ProgramData\Anaconda3\lib\site-packages\pandas\core\ops.py in wrapper(self, other)
   1359 
   1360             res_values = na_op(self.values, other)
-&gt; 1361             unfilled = self._constructor(res_values, index=self.index)
   1362             return filler(unfilled).__finalize__(self)
   1363 

C:\ProgramData\Anaconda3\lib\site-packages\pandas\core\series.py in __init__(self, data, index, dtype, name, copy, fastpath)
    260                             'Length of passed values is {val}, '
    261                             'index implies {ind}'
--&gt; 262                             .format(val=len(data), ind=len(index)))
    263                 except TypeError:
    264                     pass

ValueError: Length of passed values is 1, index implies 26834
</code></pre>
<p>Can someone help me out with this?</p>
</div>
<div class="post-text" itemprop="text">
<p>First to go through your combinations more effectively, and without double-counting, I might recommend you use the built-in library <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>.</p>
<pre class="lang-py prettyprint-override"><code>`import itertools

exam_list = ['A', 'B', 'C', 'D']
for exam1, exam2 in itertools.combinations(exam_list, 2):
    print(exam1 + '_' + exam2)
</code></pre>
<pre><code>A_B
A_C
A_D
B_C
B_D
C_D
</code></pre>
<p>If you actually need all possible orders/combinations, you can substitute <code>permutations</code> for <code>combinations</code></p>
<p>To deal with the actual issue, you actually need a whole lot less code to do what you want. If you have two columns <code>elig[exam1]</code> and <code>elig[exam2]</code> that are both boolean arrays, then the array where <em>both</em> are true is <code>(elig[exam1] &amp; elig[exam2])</code>. This is called a "bit-wise" or "logical and" operation.</p>
<p>For example:</p>
<pre class="lang-py prettyprint-override"><code>df = pd.DataFrame({'A': ['car', 'cat', 'hat']})
df['start=c'] = df['A'].str.startswith('c')
df['end=t'] = df['A'].str.endswith('t')
df['both'] = df['start=c'] &amp; df['end=t']
</code></pre>
<pre><code>     A  start=c  end=t   both
0  car     True  False  False
1  cat     True   True   True
2  hat    False   True  False
</code></pre>
</div>
<span class="comment-copy">Can you change <code>elig[exam+nestedExam+' Overlap'] = np.where((elig[exam]==True)&amp;(elig[nestedExam]==True,),True,False)</code> to  <code>elig[exam+nestedExam+' Overlap'] = (elig[exam]==True)&amp;(elig[nestedExam]==True)</code></span>
