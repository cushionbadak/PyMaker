<div class="post-text" itemprop="text">
<p>I have been learning about @property decorators that replace getters and setters. A lot of people seems to prefer using @property over getters and setters.</p>
<p>Regardless of which is desirable, are they even needed most of the times? I feel that it is unnecessary or overkill to have @property for all internal variables especially when the variables are as simple as below. Shouldn't simple things be left simple if they work?</p>
<pre><code>class Ex():
    def __init__(self, value):
        self.__x = value

    @property
    def x(self):
        return self.__x
    @x.setter
    def x(self, value):
        self.__x = value
</code></pre>
<p>I also don't think @property provides extra security (if at all needed) as people with intention can still access the variable. (._Ex__x)</p>
<p>Why should I use @property (when validation and future changes are not expected) and when should I not use them?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>, <em>Style Guide for Python Code</em> says:</p>
<blockquote>
<p>For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods. </p>
</blockquote>
<p>A property with no additional logic, as you've shown, provides no advantages over using a simple attribute.</p>
</div>
<span class="comment-copy">Yes, definitely don't use a property here. It's pointless. Properties give you encapsulation without boilerplate.</span>
<span class="comment-copy">If you don't need validation or mutability, use a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><b><code>namedtuple</code></b></a>.</span>
<span class="comment-copy">@ThierryLathuille Thank you. I have read it before posting the question, but my question is probably summarised well with "Regardless of which is desirable, are they even needed most of the times?".</span>
<span class="comment-copy">The linked duplicate is not asking the same question; it asks whether to use properties or getters/setters. This question asks when to use properties vs simple variables.</span>
<span class="comment-copy">Note, you probably shouldn't be using double-underscore name-mangling. That's for preventing collisions in subclasses, not for making some "private". Python doesn't have private variables. Double-underscore name mangling really has nothing to do with properties</span>
