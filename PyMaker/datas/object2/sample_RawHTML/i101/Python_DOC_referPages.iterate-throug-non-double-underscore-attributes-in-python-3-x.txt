<div class="post-text" itemprop="text">
<p>I have a python object with several attributes and methods.  I want to iterate over object attributes.  </p>
<pre><code>class my_python_obj(object):
    attr1='a'
    attr2='b'
    attr3='c'

    def method1(self, etc, etc):
        #Statements
</code></pre>
<p>I want to generate a dictionary containing all of the objects attributes and their current values, but I want to do it in a dynamic way (so if later I add another attribute I don't have to remember to update my function as well).</p>
<p>In php variables can be used as keys, but objects in python are unsuscriptable and if I use the dot notation for this it creates a new attribute with the name of my var, which is not my intent.</p>
<p>Just to make things clearer:</p>
<pre><code>def to_dict(self):
    '''this is what I already have'''
    d={}
    d["attr1"]= self.attr1
    d["attr2"]= self.attr2
    d["attr3"]= self.attr3
    return d
</code></pre>
<p>·</p>
<pre><code>def to_dict(self):
    '''this is what I want to do'''
    d={}
    for v in my_python_obj.attributes:
        d[v] = self.v
    return d
</code></pre>
<p>Update:
With attributes I mean only the variables of this object, not the methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have a class such as</p>
<pre><code>&gt;&gt;&gt; class Cls(object):
...     foo = 1
...     bar = 'hello'
...     def func(self):
...         return 'call me'
...
&gt;&gt;&gt; obj = Cls()
</code></pre>
<p>calling <code>dir</code> on the object gives you back all the attributes of that object, including python special attributes. Although some object attributes are callable, such as methods.</p>
<pre><code>&gt;&gt;&gt; dir(obj)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'bar', 'foo', 'func']
</code></pre>
<p>You can always filter out the special methods by using a list comprehension.</p>
<pre><code>&gt;&gt;&gt; [a for a in dir(obj) if not a.startswith('__')]
['bar', 'foo', 'func']
</code></pre>
<p>or if you prefer map/filters.</p>
<pre><code>&gt;&gt;&gt; filter(lambda a: not a.startswith('__'), dir(obj))
['bar', 'foo', 'func']
</code></pre>
<p>If you want to filter out the methods, you can use the builtin <code>callable</code> as a check.</p>
<pre><code>&gt;&gt;&gt; [a for a in dir(obj) if not a.startswith('__') and not callable(getattr(obj,a))]
['bar', 'foo']
</code></pre>
<p>You could also inspect the difference between your class and its parent using.</p>
<pre><code>&gt;&gt;&gt; set(dir(Cls)) - set(dir(object))
set(['__module__', 'bar', 'func', '__dict__', 'foo', '__weakref__'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in general put a <code>__iter__</code> method in your <em>class</em> and iterate through the object attributes or put this mixin class in your class.</p>
<pre><code>class IterMixin(object):
    def __iter__(self):
        for attr, value in self.__dict__.iteritems():
            yield attr, value
</code></pre>
<p>Your class:</p>
<pre><code>&gt;&gt;&gt; class YourClass(IterMixin): pass
...
&gt;&gt;&gt; yc = YourClass()
&gt;&gt;&gt; yc.one = range(15)
&gt;&gt;&gt; yc.two = 'test'
&gt;&gt;&gt; dict(yc)
{'one': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'two': 'test'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Objects in python store their atributes (including functions) in a dict called <code>__dict__</code>. You can (but generally shouldn't) use this to access the attributes directly. If you just want a list, you can also call <code>dir(obj)</code>, which returns an iterable with all the attribute names, which you could then pass to <code>getattr</code>.</p>
<p>However, needing to do anything with the names of the variables is usually bad design. Why not keep them in a collection?</p>
<pre><code>class Foo(object):
    def __init__(self, **values):
        self.special_values = values
</code></pre>
<p>You can then iterate over the keys with <code>for key in obj.special_values:</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The correct answer to this is that you shouldn't. If you want this type of thing either just use a dict, or you'll need to explicitly add attributes to some container. You can automate that by learning about decorators.</p>
<p>In particular, by the way, method1 in your example is just as good of an attribute.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class someclass:
        x=1
        y=2
        z=3
        def __init__(self):
           self.current_idx = 0
           self.items = ["x","y","z"]
        def next(self):
            if self.current_idx &lt; len(self.items):
                self.current_idx += 1
                k = self.items[self.current_idx-1]
                return (k,getattr(self,k))
            else:
                raise StopIteration
        def __iter__(self):
           return self
</code></pre>
<p>then just call it as an iterable</p>
<pre><code>s=someclass()
for k,v in s:
    print k,"=",v
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For python 3.6</p>
<pre><code>class SomeClass:

    def attr_list(self, should_print=False):

        items = self.__dict__.items()
        if should_print:
            [print(f"attribute: {k}    value: {v}") for k, v in items]

        return items
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in some of the answers/comments already, Python objects already store a dictionary of their attributes (methods aren't included). This can be accessed as <code>__dict__</code>, but the better way is to use <code>vars</code> (the output is the same, though). Note that modifying this dictionary will modify the attributes on the instance! This can be useful, but also means you should be careful with how you use this dictionary. Here's a quick example:</p>
<pre class="lang-py prettyprint-override"><code>class A():
    def __init__(self, x=3, y=2, z=5):
        self.x = x
        self._y = y
        self.__z__ = z

    def f(self):
        pass

a = A()
print(vars(a))
# {'x': 3, '_y': 2, '__z__': 5}
# all of the attributes of `a` but no methods!

# note how the dictionary is always up-to-date
a.x = 10
print(vars(a))
# {'x': 10, '_y': 2, '__z__': 5}

# modifying the dictionary modifies the instance attribute
vars(a)["_y"] = 20
print(vars(a))
# {'x': 10, '_y': 20, '__z__': 5}
</code></pre>
<p>Using <code>dir(a)</code> is an odd, if not outright bad, approach to this problem. It's good if you really needed to iterate over all attributes <em>and methods</em> of the class (including the special methods like <code>__init__</code>). However, this doesn't seem to be what you want, and even the <a href="https://stackoverflow.com/a/11637457/4880003">accepted answer</a> goes about this poorly by applying some brittle filtering to try to remove methods and leave just the attributes; you can see how this would fail for the class <code>A</code> defined above.</p>
<p>(using <code>__dict__</code> has been done in a couple of answers, but they all define unnecessary methods instead of using it directly. Only <a href="https://stackoverflow.com/questions/11637293/iterate-over-object-attributes-in-python#comment93597568_11637457)">a comment</a> suggests to use <code>vars</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>For python 3.6</p>
<pre><code>class SomeClass:

    def attr_list1(self, should_print=False):

        for k in self.__dict__.keys():
            v = self.__dict__.__getitem__(k)
            if should_print:
                print(f"attr: {k}    value: {v}")

    def attr_list(self, should_print=False):

        b = [(k, v) for k, v in self.__dict__.items()]
        if should_print:
            [print(f"attr: {a[0]}    value: {a[1]}") for a in b]
        return b
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/1251692/how-to-enumerate-an-objects-properties-in-python" title="how to enumerate an objects properties in python">stackoverflow.com/questions/1251692/…</a> Might be of some help.</span>
<span class="comment-copy">@sean In particular, <a href="http://stackoverflow.com/a/1251789/4203">stackoverflow.com/a/1251789/4203</a> is the way to go; you'd use the optional <code>predicate</code> argument to pass a callable that would filter out (bound?) functions (that gets rid of the methods).</span>
<span class="comment-copy">This is a bad idea, I wouldn't even suggest it, but if you're going to, at least provide the caveat.</span>
<span class="comment-copy">@Meitham @Pablo What's wrong is mainly that you shouldn't need to do this. Which attributes you're interested in should be <i>inclusive</i> not <i>exclusive</i>. As you've already seen, you're including methods, and any attempt to exclude them will be flawed, because they're going to involve nasty things like <code>callable</code> or <code>types.MethodType</code>. What happens if I add an attribute called "_foo" that stores some intermediate result, or internal data structure? What happens if I just harmlessly add an attribute to the class, a <code>name</code>, say, and now all of a sudden it gets included.</span>
<span class="comment-copy">@Julian the code above will pick both <code>_foo</code> and <code>name</code> because they are now attributes of the object. If you don't want to include them you can exclude them in the list comprehension condition. The code above is a common python idiom and popular way of introspecting python objects.</span>
<span class="comment-copy">Actually obj.__dict__ is (probably) better for this purpose.</span>
<span class="comment-copy">@Julian <code>dir()</code> only "lies" when passed metaclasses (an extreme edge case) <i>or</i> classes with attributes decorated by <a href="https://docs.python.org/3/library/types.html#types.DynamicClassAttribute" rel="nofollow noreferrer"><code>@DynamicClassAttribute</code></a> (another extreme edge case). In both cases, calling the <code>dirs()</code> wrapper <code>inspect.getmembers()</code> solves this. For standard objects, however, this solution's list comprehension approach filtering out non-callables <i>absolutely</i> suffices. That some Pythonistas would label it a "bad idea" baffles me, but... to each their own, I suppose?</span>
<span class="comment-copy">this only works when <code>one</code> and <code>two</code> is defined after <code>yc = YourClass()</code>. The question asks about looping through the existing attris in <code>YourClass()</code>. Also, inheriting the <code>IterMixin</code> class may not always available as a solution.</span>
<span class="comment-copy"><code>vars(yc)</code> gives the same result without having to inherit from another class.</span>
<span class="comment-copy">Can you explain a little more how would I use the collection to achieve what I want?</span>
<span class="comment-copy">I'm not adding attributes to the object dynamically. The variables I have will stay the same for a long time, however I think it would be nice to be able to do something like what I intend to.</span>
<span class="comment-copy">Yeah, I know I shouldn't.. but it helps me understand how things work. I come from a php background and used to do this kind of things daily</span>
<span class="comment-copy">Sounds like a good time to break old habits :)!</span>
<span class="comment-copy">You've convinced me. Keeping the to_dict() method updated is far more straightforward than any answer so far.</span>
<span class="comment-copy">This seems too complicated. If I have no choice, I would rather stick with what i'm doing right now.</span>
<span class="comment-copy">Can you add some explanation to your posts, so that also non-professional pythonists can benefit from your answers?</span>
<span class="comment-copy">Is there a reason you have two answers on this question?</span>
<span class="comment-copy">@Nathan there is because one is more verbose and the other more pythonian. I also didn't know which runs faster so I decided to let the reader choose.</span>
<span class="comment-copy">@nathan are you python or stack overflow police? There are different coding styles. I prefer a non pythonic one because I work in many languages and technologies and I think it tends to be idiosyncratic. Nevertheless Iist comprehension is cool and concise. So why not afford the enlightened reader both?</span>
