<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2031163/when-to-use-the-different-log-levels">When to use the different log levels</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I am using the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging module</a> in python project.  and I am trying to understand when I should use each of the level?
As I understand <code>logging.info(&lt;msg&gt;)</code> is used when the right path of the program is happens.</p>
<p>But when should I use the <code>logging.debug(&lt;msg&gt;)</code> and when I should use the <code>logging.error(&lt;msg&gt;)</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>Log levels are mostly convention. A higher log level means the message is more urgent.</p>
<p>Generally, these are the considerations for the standard levels</p>
<p><strong>DEBUG</strong>: This log level usually isn't recorded, but it's useful when a developer is trying to reproduce an issue. Feel free to use it liberally, but not so much that you clutter your code with it.</p>
<p><strong>INFO</strong>: "This thing happened". This is good for normal operations. Good for answering questions like: "Hey, did the cron job run today?"</p>
<p><strong>WARNING</strong>: Something went wrong, but it's not critical. Some metadata was malformed and couldn't be saved for example, but you're still able to do the thing that makes you money.</p>
<p><strong>ERROR</strong>: Something went wrong, it's probably bad, but not bad enough to kill the process. You want lots of detail in these logs because you'll use them to diagnose issues when you start, before turning to debug.</p>
<p><strong>CRITICAL</strong>: Something is very wrong. Sound the alarm.</p>
</div>
<div class="post-text" itemprop="text">
<p>Very casually defined: 'Info' is for logging details which are interesting to note, but not especially important for fixing some issue. 'Error' indicates some problem occurred in the code, and while program may have continued, information about the error will been logged.  'Debug' indicates an excessive, verbose output of information is written to the log, which is done mostly to pinpoint an otherwise hard to find issue. In other words, a developer uses debug logging to painfully identify each step the code takes in an effort to find and correct some hard to understand error/issue. More formally, each log level is related to a numeric level (e.g. critical 50, error 40, info 30, debug 10, etc.) with lower level categories representing a "finer-grain" of logging detail.</p>
<p>A <strong>clarifying metaphor</strong> of these log categories is "<strong>altitude levels</strong>:" the higher up the less detail is/should be visible, whereas "closer to the ground" (or code) more details should be in relief. In "logging space", critical problems and errors are/should be visible from high up, and non-problems (info) only visible when "flying" close to the ground.       </p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels">This other question will help you to understand when to use each log level</a></span>
<span class="comment-copy">Yes it is helpful. Thank you @0xAA55</span>
