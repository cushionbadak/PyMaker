<div class="post-text" itemprop="text">
<p>My CPU count is 8. That means I can theoretically have 16 threads to run my multi-threaded program. I have few questions.</p>
<ol>
<li>What happens if I create 20 threads and start them at the same time? Since I cannot have that much of threads due to hardware limitations, does OS handle it or do I have to handle it from my side?</li>
<li>Even though there are 16 theoretical threads, some threads may be already utilized by other programs. Is there a way to get the "available to utilize thread count" in Python and dynamically utilize the maximum possible thread count?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My CPU count is 8.</p>
</blockquote>
<p>You may want to check whether those are <a href="https://superuser.com/q/133082/387775">logical CPUs or physical CPUs</a>.</p>
<blockquote>
<p>That means I can theoretically have 16 threads to run my multi-threaded program. </p>
</blockquote>
<p>No, you can have as many threads as you please (within reason; if you create thousands of threads, things may not go very well). The operating system will schedule them onto physical (or logical) CPUs as required.</p>
<blockquote>
<p>What happens if I create 20 threads and start them at the same time? Since I cannot have that much of threads due to hardware limitations, does OS handle it or do I have to handle it from my side?</p>
</blockquote>
<p>The operating system handles it. However, the operating system has to decide which threads will run and in which order, and you may not agree with the choices the operating system makes, so creating too many threads may be counterproductive. Also, switching between threads carries an inherent overhead, so you usually do not want to create more threads than there are logical CPUs, if your work is CPU-bound.</p>
<blockquote>
<p>Even though there are 16 theoretical threads, some threads may be already utilized by other programs. Is there a way to get the "available to utilize thread count" in Python and dynamically utilize the maximum possible thread count?</p>
</blockquote>
<p>Here we run into the problem: Python has a <a href="https://stackoverflow.com/q/1294382/1340389">global interpreter lock</a>, so the only correct answer for "how many threads can I <em>usefully</em> create?" (as opposed to "how many threads will Python and the operating system allow me to create?") is <strong>one.</strong> If you create multiple threads, only one thread can execute Python bytecode at a time. The others will have to wait for the lock, and won't be able to do anything useful.</p>
<p>The purpose of Python's threads is not to do work on multiple CPUs. Instead, they are intended for multiplexing I/O. That is, you can start I/O operations (such as reading or writing to a file, network socket, pipe, or other IPC mechanism) on as many threads as you like, and all of these I/O operations will run in parallel. Python releases the GIL when you perform an I/O operation, so it will not prevent this sort of parallelism. This is useful if you are trying to write some sort of server. In this use-case, you either create one thread per I/O operation (if you don't need too many) or you create a thread pool which dynamically allocates work items to worker threads, for example with <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer"><code>concurrent.futures.ThreadPoolExecutor</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are mixing hardware-side hyper-threading and software-side threading. The first basically emulates more CPU cores than you have. But it has nothing to do with what we call threads in software programming.</p>
<p>Threads (the software ones) are not like a resource that a computer has and that can be assigned to a process. Threads are like processes, but they share the address space of their parent process. So they can access the same variables - different processes usually can't do that.</p>
<p>So as you can open a text editor 20 times, you can also open a new thread 20 times. Nevertheless, because you can does not mean that you should: <a href="https://stackoverflow.com/a/481979/8575607">https://stackoverflow.com/a/481979/8575607</a></p>
<p>Further reading: <a href="https://stackoverflow.com/questions/344203/maximum-number-of-threads-per-process-in-linux">Maximum number of threads per process in Linux?</a></p>
<hr/>
<p>Edit: Adding to <a href="https://stackoverflow.com/users/1340389/kevin">kevin</a>s answer: There are still reasons to use multiple threads (e.g. if you access software and draw a UI at the same time), the GIL is not taking usefulness from that. Or for e.g. rendering non-blocking UI overlays. The threads are still executed in a parallel way, although no two atomar commands in one cpython process are executed at the same time.
<em>(This is btw. not a comment, because I do not yet have enough reputation to comment under other people's posts)</em></p>
</div>
<span class="comment-copy">Hi @Kevin, I used 'os.cpu_count()'. Does it provide the number of logical CPUs or physical CPUs?</span>
<span class="comment-copy">@PradeepSanjeewa: Based on <a href="https://stackoverflow.com/q/38194951/1340389">stackoverflow.com/q/38194951/1340389</a> I believe the "correct" answer is logical CPUs, but apparently on Windows it <a href="https://bugs.python.org/issue33166" rel="nofollow noreferrer">may just return a completely incorrect number</a>.</span>
