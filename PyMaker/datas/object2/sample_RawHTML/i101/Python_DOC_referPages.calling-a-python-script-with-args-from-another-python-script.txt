<div class="post-text" itemprop="text">
<p>I am still a newbie to python, so apologies in advance. I have related topics on this but didn't find the best solution. (<a href="https://stackoverflow.com/questions/3781851/run-a-python-script-from-another-python-script-passing-in-args">Run a python script from another python script, passing in args</a>)
Basically, I have a python script (scriptB.py) that takes in a config file as argument and does some stuff. I need to call this script from another python script (scriptA.py).</p>
<p>If I had no arguments to pass, I could have just done</p>
<pre><code>import scriptB.py
</code></pre>
<p>However, things got little complicated because we need to pass the config file (mycnofig.yml) as argument.</p>
<p>One of the suggestions was to use;</p>
<pre><code>os.system(python scriptB.py myconfig.yml)
</code></pre>
<p>But, it is often reported as not a recommended approach and that it often does not work.</p>
<p>Another suggestion was to use:</p>
<pre><code>import subprocess
subprocess.Popen("scriptB.py myconfig.yaml", shell=True)
</code></pre>
<p>I am not very sure if this is a common practice.</p>
<p>Just want to point out that both scripts don't have any <em>main</em> inside the script.</p>
<p>Please advise on the best way to handle this. </p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>this should work just fine </p>
<p><code>subprocess.Popen(['python', '/full_path/scriptB.py', 'myconfig.yaml'], stdout=PIPE, stderr=PIPE)</code></p>
<p>See <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you really need to run a separate process, using the multiprocessing library is probably best. I would make an actual function inside scriptB.py that does the work. In the below example I consider config_handler to be a function inside scriptB.py that actually takes the config file path argument.</p>
<p>1.) create a function that will handle the calling of your external python script, also, import your script and the method inside it that takes arguments</p>
<h3>scriptA.py: importing config_handler from scriptB</h3>
<pre><code>import multiprocessing
from scriptB import config_handler

def other_process(*args):
    p = multiprocessing.Process(*args)
    p.start()
</code></pre>
<p>2.) Then just call the process and feed your arguments to it:</p>
<h3>scriptA.py: calling scriptB.py function, config_handler</h3>
<pre><code>other_process(name="config_process_name", target=config_handler, args=("myconfig.yml",))
</code></pre>
<h3>Opinion:</h3>
<p>From the information you have provided, i imagine you could manage to do this without separate processes. Just do things all in sequence and make scriptB.py a library with a function you use in scriptA.py.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you got all your answers in the old thread, but if you really want to run it through os, not through python, this is what I do:</p>
<pre><code>from subprocess import run, PIPE, DEVNULL

your_command = './scriptB.py myconfig.yaml'
run(your_command.split(), stdout=PIPE, stderr=DEVNULL)
</code></pre>
<p>In case you need the output:</p>
<pre><code>output = run(your_command.split(), stdout=PIPE, stderr=DEVNULL).stdout.decode('utf-8')
</code></pre>
<p>If the scriptB has the shebang header telling the bash its a python script, it should run it correctly.</p>
<p>Path can be both relative and absolute.</p>
<p>It is for Python 3.x</p>
</div>
<span class="comment-copy">can you explain why it works/it's better?</span>
