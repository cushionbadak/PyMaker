<div class="post-text" itemprop="text">
<p>My source code directory (named <code>my_dir</code>) is organized as follow:</p>
<pre><code>my_dir
|
|-- pkg_1
|    |
|    |-- module_1.py
|    |-- module_2.py
|
|-- src.py
</code></pre>
<p>In <code>module_1.py</code>, I import <code>module_2.py</code> by </p>
<pre><code>import module_2
</code></pre>
<p>But when I import <code>module_1</code> in <code>src.py</code> by</p>
<pre><code>import module_1
</code></pre>
<p>An error is raised as the statement <code>import module_2</code> in <code>module_1.py</code> acts as if my working directory is <code>pkg_1</code> instead of <code>my_dir</code>.</p>
<p>How can it fix this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>in <code>module_1.py</code> import it as <code>from . import module_2</code> and in <code>src.py</code> import module_1 as <code>from pkg_1 import module_1</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is the cause of the misunderstanding:</p>
<blockquote>
<p>An error is raised as the statement <code>import module_2</code> in <code>module_1.py</code> acts as if my working directory is <code>pkg_1</code> instead of <code>my_dir</code>.</p>
</blockquote>
<p>First of all, when you import a package, the code in that package does not execute in a different working directory.</p>
<p>The second mistake is that the working directory is not relevant at all, even if it did change.</p>
<p>Python code is organised into packages and modules. The interpreter searches for packages and modules within the python path.</p>
<p>In the structure shown, <code>my_dir</code> will be in python path if you run <code>python src.py</code>. Then <code>pkg_1</code> is a package whereas <code>module_1</code> and <code>module_2</code> are modules. The easiest way to import <code>module_2</code> is to use an absolute import:</p>
<pre><code>import pkg_1.module_2
</code></pre>
<p>Alternatively, from within another module in <code>pkg_1</code> you can use a <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">relative import</a>:</p>
<pre><code>from . import module_2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys;

# get path to this file.
path_this_file = os.path.dirname(os.path.abspath(__file__));
# add path to import files.
sys.path.insert(0, path_this_file + "/pkg_1");

import module_1, module_2;
</code></pre>
</div>
<span class="comment-copy">Your todays read: <a href="https://realpython.com/absolute-vs-relative-python-imports/" rel="nofollow noreferrer">realpython.com/absolute-vs-relative-python-imports</a></span>
<span class="comment-copy">According to this approach, I need to change all import statements in <code>pkg_1</code> and maybe it's infeasible. My situation is that I've downloaded a repo from git and I want to use it as a module of my whole project. Do you have any other idea ?</span>
<span class="comment-copy">then in pkg_1 write <b>init</b>.py file and in this file wite <code>from . import module_1</code>  and <code>from . import module_2</code> then from <code>src.py</code> you can import it as <code>from pkg_1 import module_1</code></span>
<span class="comment-copy">@HOANGGIANG It is correct to change all the code if you want all the code to behave differently. You are taking a shortcut through the woods and complaining that there is no road on it.</span>
<span class="comment-copy">This is the thing which you definitely should not do! This is just <i>"I don't understand how Python imports are used correctly, so I'll invent my own overcomplicated way to use them"</i></span>
