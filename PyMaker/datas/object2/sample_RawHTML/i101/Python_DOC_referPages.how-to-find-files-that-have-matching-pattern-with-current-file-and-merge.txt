<div class="post-text" itemprop="text">
<p>I have a file directory that contains multiple files recorded in one day. But I need to combine the files that ends with the same ids so the logic that I am trying to use is to go over each file in the directory and then look for the file that has the matching id. For example I have files that are stored as below:</p>
<pre><code>a_1234_d.csv
b_1234_d.csv
c_1234_d.csv
a_1256_d.csv
b_1256_d.csv
c_1256_d.csv
</code></pre>
<p>These files are not necessarily stored in the sequence like above so I need to file the files that matches the id in between and combine them. So far, I have tried the code below but I need help to correct the pattern matching part as this is not practical to use for hundreds of files to keep changing for every id. </p>
<pre><code>f = os.listdir(dat_folder)

for file in f:
    if fnmatch.fnmatch(file, '*1234.csv'):
        print(file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Correct Me if I'm wrong, but I understand you have a lot of different ids. If they are always seperated by '_' you can get the id with help of the split()-Funktion of the string Type. Then you just have to go through all files, check the number and check if you already processed that number.
Maybe something like this:</p>
<pre><code>f = ["a_1234_d.csv","b_1234_d.csv","a_1235_d.csv"]

processedFiles = []

for file in f:
    number = file.split("_")[1]
    if number not in processedFiles:

        #do your code. now you know the number

        processedFiles = processedFiles + [number]
        print(processedFiles)
</code></pre>
<p>For your code it's probably helpfull to take a look at Nullman's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>I slightly modify LordDot's code:</p>
<pre><code>import re                                                                                                                                                     

f = ["a_1234_d.csv", "b_1234_d.csv", "c_1234_d.csv", "a_1256_d.csv", "b_1256_d.csv", "c_1256_d.csv"]

file_to_compose = {}
for file in f:
    lead, id_of_file, tail = re.split(r'[_]', file)
    if id_of_file in file_to_compose:
        file_to_compose[id_of_file].append(file)
    else:
        file_to_compose[id_of_file] = [file]

for (k, v) in file_to_compose.items():
    print (f'id {k} contains files: {", ".join(v)}')
</code></pre>
<p>Output:</p>
<pre><code>id 1234 contains files: a_1234_d.csv, b_1234_d.csv, c_1234_d.csv 
id 1256 contains files: a_1256_d.csv, b_1256_d.csv, c_1256_d.csv
</code></pre>
<p>You can easily combine all files belongs to the same id.</p>
</div>
<div class="post-text" itemprop="text">
<p>the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a> module is useful here</p>
<pre><code>from glob import glob

print(glob(dat_folder + '*1234.csv'))
</code></pre>
<p>glob returns a list of matches<br/>
consider using <code>iglob</code> if you want an iterator instead of a list (great when you have a lot of files)</p>
</div>
<span class="comment-copy">short answer is look at <code>glob</code></span>
<span class="comment-copy">yes I have many ids so it will not be practical for me to keep changing the ID to look for as I have hundreds of these files. I am trying to find a way for the code to automatically find the files that match each other based on the id.</span>
<span class="comment-copy">maybe a combination of my answer and nullman's? go through every file like i proposed to make sure you get every id and then find all files matching using nullmans answer? If you dont hava full list of all ids i dont think there is another option.</span>
<span class="comment-copy">thanks I will try it out.</span>
<span class="comment-copy">thanks, i will try this out.</span>
