<div class="post-text" itemprop="text">
<p>I have a data structure </p>
<p><code>Age, Height</code></p>
<p>They are number and they will be inserted in a loop. For example,</p>
<pre><code>dict={}
for i in range (100):
    age= np.random.randint(1,100)
    height= np.random.randint(1,100)
    dict['Age']=age
    dict['Height']=height
</code></pre>
<p>After 100 iters, I expect the output likes</p>
<pre><code>Age, Height
10, 20
2, 10
23, 14
....
</code></pre>
<p>After that, I want to sort the result by decreasing age and the dictionary will be likes</p>
<pre><code>Age, Height
23,14
10,20
2,10
</code></pre>
<p>Should I use a dictionary in this case in python? I also want to get 2 positions that have the biggest age likes 23,14 and 10,20. How to do it? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of a dict, it looks like you want a <em>list of dicts</em>. Example:</p>
<pre><code>my_list = []
for in in range(100):
    age= np.random.randint(1,100)
    height= np.random.randint(1,100)
    my_list.append({'Age': age, 'Height': height})
</code></pre>
<p>Then, you can output them:</p>
<pre><code>print('Age, Height')
for elem in my_list:
    print('{}, {}'.format(elem['Age'], elem['Height']))
</code></pre>
<p>and sort them (in reverse):</p>
<pre><code>my_list.sort(key=lambda x: -1 * x['Age'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should add the result to a list, instead of dic</p>
<pre><code>import random

<b>my_list=[]</b>
for i in range(100):
    age = random.randint(1, 100)
    height = random.randint(1, 100)
    <b>my_list.append({"Age": age, "Height": height})</b></code></pre>
<p>Then the sorting can be done using Python's <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><strong><code>sorted()</code></strong></a> function, with <strong><code>reverse=True</code></strong> argument</p>
<pre><code>sorted_list = sorted(my_list,key=lambda x:x['Age'],reverse=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With your implementation of dictionary, it will end up with only adding last <code>age</code> and <code>height</code>, all others get overridden. Maybe a list as values for the keys would save you.</p>
<p>This uses <code>collections.defauldict</code> to create dictionary with list of values and sorting them with <code>zip</code>:</p>
<pre><code>import numpy as np
from collections import defaultdict

d = defaultdict(list)

for _ in range (100):
    age = np.random.randint(1,100)
    height = np.random.randint(1,100)
    d['Age'].append(age)
    d['Height'].append(height)

print(d)

vals = list(d.values())
sorted_values = sorted(zip(vals[0], vals[1]), key=lambda x: x[0], reverse=True)
</code></pre>
<p>Now that you have the sorted result, iterate over them:</p>
<pre><code>for x, y in sorted_values:
    print(x, y)
</code></pre>
</div>
<span class="comment-copy">With your implementation of dictionary, it will end up with only adding last <code>age</code> and <code>height</code>, all others get overridden Maybe a list as values for the keys would save you.</span>
<span class="comment-copy">Unfortunately, after the iteration your <b><code>dict</code></b> will be as, <code>{'Age': 96, 'Height': 83}</code></span>
<span class="comment-copy">You can use <code>pandas.DataFrame</code> for it.</span>
<span class="comment-copy">The basic here is, dictionary does not allow duplicate keys. Hence, even if you try to insert age key for 100 iterations, it gets shown only once with the last insert.</span>
