<div class="post-text" itemprop="text">
<p>I'm writting an python program and now I'm working at exceptions.</p>
<pre><code>while True:
    try:
        os.makedirs("{}\\test".format(dest))
    except PermissionError:
        print("Upewnij sie ze masz dostep do podanego katalogu")
        print("Sprobuj ponownie podac miejsce docelowe: ", end='')
        dest = input()
        continue
    break
</code></pre>
<p>I have this but later I will need to delete this folder that I creates.
Can someone tell me how to do it easier, please...</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't.</p>
<p>It is almost never worth verifying that you have permissions to perform an operation that your program requires. For one thing, permissions are not the only possible reason for failure. A delete may also fail because of a file lock by another program, for instance. Unless you have a <em>very</em> good reason to do otherwise, it is both more efficient and more reliable to just write your code to <em>try</em> the operation and then abort on failure:</p>
<pre><code>import shutil

try:
    shutil.rmtree(path_to_remove) # Recursively deletes directory and files inside it
except Exception as ex:
    print('Failed to delete directory, manual clean up may be required: {}'.format(path_to_remove))
    sys.exit(1)

</code></pre>
<hr/>
<h1>Other concerns about your code</h1>
<ul>
<li>Use <code>os.path.join</code> to concatenate file paths: <code>os.makedirs(os.path.join(dest, test))</code>. This will use the appropriate directory separator for the operating system.</li>
<li>Why are you looping on failure? In real world programs, simply aborting the entire operation is simpler and usually makes for a better user experience.</li>
<li><p>Are you sure you aren't looking for the <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer"><code>tempfile</code></a> library? It allows you to spit out a unique directory to the operating system's standard temporary location:</p>
<pre><code>import tempfile

with tempfile.TemporaryDirectory() as tmpdir:
    some_function_that_creates_several_files(tmpdir)
    for f in os.walk(tmpdir):
         # do something with each file
# tmpdir automatically deleted when context manager exits

# Or if you really only need the file
with tempfile.TemporaryFile() as tmpfile:
    tmpfile.write('my data')
    some_function_that_needs_a_file(tmpfile)
# tmpfile automatically deleted when context manager exits
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I think what you want is <code>os.access</code>.</p>
<blockquote>
<p>os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)</p>
<p>Use the real uid/gid to test for access to path. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path. mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions. Return True if access is allowed, False if not. </p>
</blockquote>
<p>For example:</p>
<pre class="lang-py prettyprint-override"><code>os.access("/path", os.R_OK)
</code></pre>
<p>And the mode contains:</p>
<pre class="lang-py prettyprint-override"><code>os.F_OK   # existence
os.R_OK   # readability
os.W_OK   # writability
os.X_OK   # executability
</code></pre>
<p>Refer: <a href="https://docs.python.org/3.7/library/os.html#os.access" rel="nofollow noreferrer">https://docs.python.org/3.7/library/os.html#os.access</a></p>
</div>
<span class="comment-copy">did you try <code>os.rmdir(path)</code> ?</span>
<span class="comment-copy">But I dont want to change anything in this directory, only check if I have permissions</span>
<span class="comment-copy">100% agree. In Python speak, it's Easier to Ask Forgiveness than Permission (EAFP), instead of Looking Before You Leap (LBYL). As a practical matter, things very often change between when you check for permission and when you actually try to use it. On a busy system, there are too many potential race conditions for LBYL to be a safe pattern.</span>
<span class="comment-copy">I loop it because I dont want anyone to start program again if someone made mistake again</span>
<span class="comment-copy">@KirkStrauser And on a system that isn't busy, you're unlikely to have the problem anyway, since the script creates the directory to be deleted.</span>
<span class="comment-copy">@maxmarsz Users <i>expect</i> to need to run the program again if something goes wrong. Looping infinitely has the major downside that it is no longer safe to call your script from another one when trying to automate something.</span>
<span class="comment-copy">@jpmc26 So you think that's better to give one chance to repair problem and then show error?</span>
<span class="comment-copy">Look at the doc, it says that you shouldn't do your example for security purpose. But another (which is following right after in the doc).*</span>
<span class="comment-copy">But how can I use it when making exceptions</span>
<span class="comment-copy">@IMCoins Thanks for pointing out my mistake, and I have modified the example.</span>
<span class="comment-copy">@maxmarsz Sorry that I couldn't fully understand what you want.</span>
<span class="comment-copy">When I use W_OK it dont see it like exception but when it comes to do in the destination an folder then shows  PermissionError</span>
