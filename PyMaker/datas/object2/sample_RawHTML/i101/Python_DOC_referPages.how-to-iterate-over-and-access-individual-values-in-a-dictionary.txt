<div class="post-text" itemprop="text">
<p>I'm working on some python homework and I am asked to define a function that takes in a dictionary that maps bus routes to bus stops and returns a dictionary mapping bus stops to list of bus routes which stop at that stop. The input would be something like this:</p>
<pre><code>{"Lentil": ["Chinook", "Orchard", "Valley", "Emerald","Providence",
"Stadium", "Main", "Arbor", "Sunnyside", "Fountain", "Crestview",
"Wheatland", "Walmart", "Bishop", "Derby", "Dilke"],
"Wheat": ["Chinook", "Orchard", "Valley", "Maple","Aspen", "TerreView",
"Clay", "Dismores", "Martin", "Bishop", "Walmart", "PorchLight",
"Campus"]}
</code></pre>
<p>I need to somehow make the values into keys and at the same time check if those values are values in any other key as well. Basically, I'm having a hard time trying to figure out how I can access the values and make them the new keys (no duplicates) without actually hard coding them.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is actually very easy if you use <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Dictionary</a> and <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehension</a>. You can get the required output in one line.</p>
<pre><code>d1={"Lentil": ["Chinook", "Orchard", "Valley", "Emerald","Providence",
"Stadium", "Main", "Arbor", "Sunnyside", "Fountain", "Crestview",
"Wheatland", "Walmart", "Bishop", "Derby", "Dilke"],
"Wheat": ["Chinook", "Orchard", "Valley", "Maple","Aspen", "TerreView",
"Clay", "Dismores", "Martin", "Bishop", "Walmart", "PorchLight",
"Campus"]}
d2={x:[y for y in d1.keys() if x in d1[y]] for l in d1.values() for x in l}
print(d2)
</code></pre>
<p>A more readable but longer comprehension</p>
<pre><code>d2={stop:[route for route in d1.keys() if stop in d1[route]] for stop_list in d1.values() for stop in stop_list}
</code></pre>
<p>Output:</p>
<pre><code>{'Chinook': ['Lentil', 'Wheat'], 'Orchard': ['Lentil', 'Wheat'], 'Valley': ['Lentil', 'Wheat'], 'Emerald': ['Lentil'], 'Providence': ['Lentil'], 'Stadium': ['Lentil'], 'Main': ['Lentil'], 'Arbor': ['Lentil'], 'Sunnyside': ['Lentil'], 'Fountain': ['Lentil'], 'Crestview': ['Lentil'], 'Wheatland': ['Lentil'], 'Walmart': ['Lentil', 'Wheat'], 'Bishop': ['Lentil', 'Wheat'], 'Derby': ['Lentil'], 'Dilke': ['Lentil'], 'Maple': ['Wheat'], 'Aspen': ['Wheat'], 'TerreView': ['Wheat'], 'Clay': ['Wheat'], 'Dismores': ['Wheat'], 'Martin': ['Wheat'], 'PorchLight': ['Wheat'], 'Campus': ['Wheat']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So if I've understood the question correctly, you want to find stops along the routes, where there are stops visited by the same bus, essentially finding bus route duplication.</p>
<p>Please see the below code.</p>
<pre><code>bus_routes = {"Lentil": ["Chinook", "Orchard", "Valley", "Emerald","Providence", "Stadium", "Main", "Arbor", "Sunnyside", "Fountain", "Crestview", "Wheatland", "Walmart", "Bishop", "Derby", "Dilke"], "Wheat": ["Chinook", "Orchard", "Valley", "Maple","Aspen", "TerreView", "Clay", "Dismores", "Martin", "Bishop", "Walmart", "PorchLight", "Campus"]}
route_dup = {}
for x,y in bus_routes.items():
    for z in y:
        try:
            if route_dup[z]:
                route_dup[z].append(x)
        except KeyError:
            route_dup[z] = [x]

print(route_dup)
</code></pre>
<p>We get a variable (<code>y</code>) from iterating with <code>bus_routes.items()</code> where <code>x</code> is the route name and <code>y</code> is the stop name list. We then create another iteration with <code>y</code> and try to see if a key with that stop name already exists in <code>route_dup</code> and if it doesn't exist, it catches the <code>KeyError</code> and creates it with the value of the name of the route in  list, however, if the key does exist, we can safely say it will the list we created already, and therefore <code>append()</code> to it, with the next route name.</p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">What do you mean "make the values into keys"? An example might be helpful.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/3294889/iterating-over-dictionaries-using-for-loops" title="iterating over dictionaries using for loops">stackoverflow.com/questions/3294889/…</a> <a href="https://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary" title="check if a given key already exists in a dictionary">stackoverflow.com/questions/1602934/…</a> and append to the new lists</span>
<span class="comment-copy">I mean I need to make the values of the dictionary into the new keys so for this it would be something like: {"Chinook": ["Lentil", "Wheat"], "Orchard":["lentil", "wheat"]...}</span>
<span class="comment-copy">looks like a dupe of, related to, or refer to <a href="https://stackoverflow.com/questions/31674403/swap-dictionary-keys-and-values-when-values-are-lists">Swap dictionary keys and values when values are lists</a></span>
<span class="comment-copy">I would have been better off not using items and go9ng with keys and values functions. I was going to Dict comprehension it but struggled to get into work with .items() v. Nice answer</span>
<span class="comment-copy">Do you also sort your dictionary somehow? Mine is the same output, but the duplicated stops are mixed among the non-duplicated stops</span>
