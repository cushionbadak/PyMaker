<div class="post-text" itemprop="text">
<p>I'm a newbie in Flask and I am trying to display the <a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">Built-In Exceptions</a> in python but I can't seem to have them display on my end.</p>
<p>NOTE:</p>
<pre><code>set FLASK_DEBUG = 0
</code></pre>
<p>CODE:</p>
<pre><code>def do_something:
    try:
        doing_something()
    except Exception as err:
        return f"{err}"
</code></pre>
<p>Expectation:</p>
<ul>
<li>It will display one of the built-in exceptions:

<ul>
<li>KeyError</li>
<li>IndexError</li>
<li>NameError</li>
<li>Etc.</li>
</ul></li>
</ul>
<p>Reality:</p>
<ul>
<li>It will return the line of code that didn't worked which is more ambiguous to the end user.</li>
</ul>
<p>Also:</p>
<ul>
<li>I have no problem seeing the errors when the debug mode is ON but that's not something that I want to do if I open them in public</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>Flask</code> supplies you with a function that enables you to register an error handler throughout your entire <code>app</code>; you can do something as shown below:</p>
<pre><code>def handle_exceptions(e):
    # Log exception in your logs
    # get traceback and sys exception info and log as required   
    # app.logger.error(getattr(e, 'description', str(e)))

    # Print traceback

    # return your response using getattr(e, 'code', 500) etc. 

# Exception is used to catch all exceptions
app.register_error_handler(Exception, handle_exceptions)
</code></pre>
<p>In my honest opinion, this is the way to go. - Following the structure found in <code>werkzeug.exceptions.HTTPException</code> as an example is a solid foundation. </p>
<p>Having a unified exception handler that will standardise your <code>Exception</code> handling, visualisation and logging will make your life a tad better. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with this:</p>
<pre><code>def do_something:
    try:
        doing_something()
    except Exception as err:
        return f"{err.__class__.__name__}: {err}"
</code></pre>
</div>
<span class="comment-copy">Thanks! I'll try to read about app.logger.error as I usually import logger instead of this way of coding :)</span>
<span class="comment-copy">I personally, store the <code>handle_exceptions</code> out of the <code>app.py</code> initialisation file. - Cleaner. - If you're using a custom log handler (which I hope you are, if not; <a href="http://flask.pocoo.org/docs/1.0/logging/#email-errors-to-admins" rel="nofollow noreferrer">flask.pocoo.org/docs/1.0/logging/#email-errors-to-admins</a> can act as example of how to create your own log handler - for rotation, formatting, alerts et cetera.), then you'd need to either use <code>current_app</code> to do something like <code>current_app.logger.error()</code> or <code>app.logger.error()</code> - the log handler will be registered using the <code>addHandler</code> function and therefore you'd need to use the <code>app</code>.</span>
<span class="comment-copy">Thanks! this is actually what I'm looking for :)</span>
