<div class="post-text" itemprop="text">
<p>I want to scatterplot two categorical variables as follows</p>
<pre><code>from matplotlib import pyplot as plt    
a=[1,1,1,1,2,2]
b=[2,2,2,2,1,1]
plt.scatter(a,b)
</code></pre>
<p>If I plot this I will see only two points (4 overlapping in (1,2), and 2 overlapping in (2,1)) without being able to appreciate the different occurrence of the two overlapping points.</p>
<p><a href="https://i.stack.imgur.com/5q2cP.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/5q2cP.png"/></a></p>
<p>I would like to see a scatter plot where the marker of the point of the left (1,2) is twice bigger than the marker on the point on the right (2,1), in order to show the different occurrence of the point. What is the correct way to do this? (beside the trival solution where I count occurrences by hand and I put them inside the <code>size</code> argument of <code>plt.scatter</code>)</p>
<p>I already searched other SOF questions, but they all propose to use an alpha <a href="https://stackoverflow.com/questions/21081453/drawing-scatter-graph-using-matlibplot-pyplot-when-points-are-duplicate">like here</a>, but I would like to see a marker size to appreciate better the different proportionalities between occurrences.</p>
<p>A pointer might be to use some Kernel Density Estimate as suggested in <a href="https://stackoverflow.com/questions/19064772/visualization-of-scatter-plots-with-overlapping-points-in-matplotlib">this answer</a></p>
<p>To give a bit more context to my question, the two output are the predictions of two classifiers, and I want to explore the differences between the predictions to evaluate whether to ensemble them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make use of the occurrence frequency of the x-points (or even y-points for this particular data set) which can be obtained using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> module. The frequencies can then be used as a rescaling factor for defining the size of the markers. Here <code>200</code> is just a big number to emphasize the size of the markers.</p>
<pre><code>from matplotlib import pyplot as plt    
from collections import Counter

a=[1,1,1,1,2,2]
b=[2,2,2,2,1,1]

weights = [200*i for i in Counter(a).values() for j in range(i)]
plt.scatter(a, b, s = weights)
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/lgQHx.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/lgQHx.png"/></a></p>
<p>Another option to visualise the distribution is a bar chart</p>
<pre><code>freqs = Counter(a)

plt.bar(freqs.keys(), freqs.values(), width=0.5)
plt.xticks(list(freqs.keys()))
</code></pre>
<p><a href="https://i.stack.imgur.com/tQw0X.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/tQw0X.png"/></a></p>
</div>
<span class="comment-copy">yes, Counter is a good option: do you think scatter is the best plot? or there might be some better plot to highlight the different distributions of the classifiers' predictions?</span>
<span class="comment-copy">@AlessandroSolbiati: Bar chart is another good option which will directly show the frequency of occurence</span>
