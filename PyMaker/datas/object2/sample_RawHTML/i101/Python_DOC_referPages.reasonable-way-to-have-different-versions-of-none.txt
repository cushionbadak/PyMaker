<div class="post-text" itemprop="text">
<p>Working in Python3. </p>
<p>Say you have a million beetles, and your task is to catalogue the size of their spots. So you will make a table, where each row is a beetle and the number in the row represent the size of spots;</p>
<pre><code> [[.3, 1.2, 0.5],
  [.6, .7],
  [1.4, .9, .5, .7],
  [.2, .3, .1, .7, .1]]
</code></pre>
<p>Also, you decide to store this in a numpy array, for which you pad the lists with None (numpy will convert this to np.nan).</p>
<pre><code> [[.3, 1.2, 0.5, None, None],
  [.6, .7, None, None, None],
  [1.4, .9, .5, .7, None],
  [.2, .3, .1, .7, .1]]
</code></pre>
<p>But there is a problem, values represented as None can be None for one of 3 reasons;</p>
<ol>
<li><p>The beetle dosn't have many spots; that quantity does not exist.</p></li>
<li><p>The beetle won't stay still and you can't measure the spot.</p></li>
<li><p>You haven't got round to measuring that beetle yet, so the value is unassigned.</p></li>
</ol>
<p>My problem doesn't actually involve beetles, but the principles are the same.
I want 3 different None values so I can keep these missing value causes distinct. My current solution is to use a value so large that it is physically improbable, but this is not a very safe solution.</p>
<p><strong>Assume you cannot use negative numbers - in reality the quantity I am measuring could be negative.</strong></p>
<p>The data is big and read speed is important.</p>
<p>Edit; comments rightly point out that saying speed is important without saying what operations is a bit meaningless. Principle component analysis is probably going to be used for variable decorrilation, Euclidean distance squared calculations for a clustering algorithm (but the data is sparse in that variable) possibly some interpolation. Eventually a recursive neural network, but that will come from a library so I will just have to but the data into an input form. So maybe nothing worse than linear algebra, it should all fit in the RAM if I am careful I think.</p>
<p>What is a good strategy?</p>
</div>
<div class="post-text" itemprop="text">
<p>It was suggested to create three different <code>object</code> instances for each of your case.</p>
<p>Since your want those objects to have the properties of <code>NaN</code>, you may try creating three different <code>NaN</code> instances.</p>
<pre><code>NOT_APPLICABLE = float("nan")
NOT_MEASURED = float("nan")
UNKNOWN = float("nan")
</code></pre>
<p>This is at the limit of being a hack, so use at your own risk, but I don't believe any Python implementation optimizes <code>NaN</code> to always reuse the same object. You can nonetheless add a sentinel condition to check that before running.</p>
<pre><code>if NOT_APPLICABLE is NOT_MEASURED or NOT_MEASURED is UNKNOWN or UNKNOWN is NOT_APPLICABLE :
    raise ValueError # or try something else
</code></pre>
<p>If this works this has the advantage of allowing you to compare the <code>NaN</code> id to check its meaning.</p>
<pre><code>row = [1.0, 2.4, UNKNOWN]

...

if value is UNKNOWN:
    ...
</code></pre>
<p>Meanwhile, it preserves any optimization <code>numpy</code> may do with its array.</p>
<p><em>Disclosure: this is a hacky suggestion, I am eager to hear from others about this.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to go would be with strings: 'not counted', 'unknown' and 'N/A'. However if you want to process quickly in numpy, arrays with mixed numbers/objects are not your friend. </p>
<p>My suggestion would be to add several arrays of the same shape as your data, consisting of 0 and 1. So the array <code>missing</code> = 1 where spot is missing else 0, and so on, same with array <code>not_measured</code>, etc..</p>
<p>Then you can use NaNs everywhere, and later mask your data with, say, <code>np.where(missing == 1)</code> to easily find the specific NaNs you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want an object that is not any known value, and is also not <code>None</code>, just make a new object:</p>
<pre><code>NOT_APPLICABLE = object()
NOT_MEASURED = object()
UNKNOWN = object()
</code></pre>
<p>Now you can just use those values exactly like you would use <code>None</code>:</p>
<pre><code>[1.4, .9, .5, .7, UNKNOWN]

...

if value is UNKNOWN:
    # do something
</code></pre>
<p>etc.</p>
<p>If you need a value that can be represented as a <code>float</code> (e.g. in a <code>numpy</code> array), you can create a NaN value with "extra" data encoded in the mantissa. It may not be <em>safe</em> to do so, however, because there is no guarantee that those bits are preserved through various operations on the values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution (disclaimer: HACK!) that avoids speed bumps such as object dtype or separate masks: </p>
<p>There appears to be quite a bit of "dead space" around the fp representation of <code>nan</code>:</p>
<pre><code>&gt;&gt;&gt; nan_as_int = np.array(np.nan).view(int)[()]
&gt;&gt;&gt; nan_as_int
9221120237041090560

&gt;&gt;&gt; custom_nan = np.arange(nan_as_int, nan_as_int+10).view(float)
&gt;&gt;&gt; custom_nan
array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])
</code></pre>
<p>We have created ten distinct <code>nan</code>s. Please note that this is different from creating multiple instances using <code>float("nan")</code>. Such instances will all map to the same value in numpy and hence be indiscriminable once put in a non object array.</p>
<p>Even though our ten <code>nan</code>s have distinct representations, at the float level they are difficult to tell apart (because per definition <code>nan != nan</code> even for unique <code>nan</code>). So we need a little helper:</p>
<pre><code>&gt;&gt;&gt; def which_nan(a):
...     some_nan = np.isnan(a)
...     return np.where(some_nan, np.subtract(a.view(int), nan_as_int, where=some_nan), -1)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; exmpl = np.array([0.1, 1.2, custom_nan[3], custom_nan[0]])
&gt;&gt;&gt; exmpl
array([0.1, 1.2, nan, nan])
&gt;&gt;&gt; which_nan(exmpl)
array([-1, -1,  3,  0], dtype=int64)
</code></pre>
<p>Perhaps surprisingly, this appears to survive at least some basic numpy operations:</p>
<pre><code>&gt;&gt;&gt; which_nan(np.sin(exmpl))
array([-1, -1,  3,  0], dtype=int64)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the comment below question I ask why not use <code>np.inf</code>, <code>-np.inf</code> and <code>np.nan</code> and author response that this is what he need. </p>
<p>So I add post, because people more often look on responses, not comments.   </p>
</div>
<span class="comment-copy">If you want different values, don't use <code>None</code>. Use some other type. This is not what <code>None</code> is for.</span>
<span class="comment-copy">If you use numpy array why using <code>np.nan</code>, <code>np.inf</code> and <code>-np.inf</code> is not  a solution?</span>
<span class="comment-copy">Maybe add a column with number of spots? That shows how many of the other columns have a valid value, and there can be special values like -1 and -2 for the other cases.</span>
<span class="comment-copy">Would <a href="https://docs.scipy.org/doc/numpy/reference/maskedarray.generic.html#what-is-a-masked-array" rel="nofollow noreferrer">Masked Arrays</a> make sense for your problem?  They're one way of representing invalid/missing data.  I don't know how much of a performance impact there would be though.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="nofollow noreferrer">Create an <code>Enum</code></a> whose values are the different flavors of <code>None</code>.</span>
<span class="comment-copy">Accepting this one because the sentinel improves it so much.</span>
<span class="comment-copy">But that's going to confuse Numpy, I think. It can translate None to NaN and keep it an array of floats, but if there are random Python objects there that won't work.</span>
<span class="comment-copy">I honestly don't know what <code>numpy</code> does in that case. I believe it can store arbitrary objects in an array, it just switches to a different kind of array. But I don't know how else you would do this sort of thing.</span>
<span class="comment-copy">OP did say it was a numpy array (should probably have tagged it though). I think also performance is a significant issue here, which is why s/he doesn't simply use strings (which are the same as objects in terms of numpy speed)</span>
<span class="comment-copy">@DanielPryden yeah, sorry I buried it a bit. The reason for padding with None is to convert to a numpy array. This is done to improve the speed of various subsequent operations. This seems like a good solution though, I might have to figure out how to do it in a way compatible with numpy.</span>
<span class="comment-copy">This will require a dtype=object array, which will remove the speed advantages of numpy.</span>
<span class="comment-copy">While I think mine is a better answer in the general case, this is probably better for this specific case, +1</span>
<span class="comment-copy">I'm not sure. The author write "The data is big and read speed is important." So adding svereal 0,1 arrays is not a good idea.   I thin add one array with different marks (1,2,3,...) is better than several arrays.</span>
<span class="comment-copy">Yes, as I said yours is better for this specific case, but there could be a case where <code>np.inf</code> could also be an actual value, then you'd need another solution</span>
<span class="comment-copy">This provides enough flexibility for my needs, and it probably won't break with future implementations. For someone who needed more versions @PaulPanzer solution would probably be the solution, but in my ignorance I would probably say it is not as safe.</span>
