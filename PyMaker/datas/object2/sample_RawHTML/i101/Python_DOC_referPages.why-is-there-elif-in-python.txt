<div class="post-text" itemprop="text">
<p>So I am slightly confused as to the purpose of having <code>elif</code> in Python. Is <code>elif</code> a way to shorten <code>else if</code>? Which is more Pythonic <code>elif</code> or another <code>if</code> statement? Why is there elif in Python but not in something like Java?</p>
<p>Thanks for helping me to understand the gem of a language that is Python better.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has <code>elif</code> to make parsing easier. One of the design goals of the syntax was to keep the parser simpler than other languages which require context free grammars. Faster parsing means a faster interpreter.</p>
<p>If I have <code>else if</code>, I don't know what the else means until I reach the if. To write this in python, I actually need to say</p>
<pre><code>if cond1:
    ...
else:
    if cond2:
        ...
</code></pre>
<p>With <code>elif</code>, I have a single symbol which is unambiguous.</p>
<p>Functionally, these two statements are the same:</p>
<pre><code>&gt;&gt;&gt; def foo(x):
...     if x == 1:
...         return 1
...     else:
...         if x == 2:
...             return 2
... 

&gt;&gt;&gt; def bar(x):
...     if x == 1:
...         return 1
...     elif x == 2:
...         return 2
...

&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (1)
              6 COMPARE_OP               2 (==)
              9 POP_JUMP_IF_FALSE       16

  3          12 LOAD_CONST               1 (1)
             15 RETURN_VALUE        

  5     &gt;&gt;   16 LOAD_FAST                0 (x)
             19 LOAD_CONST               2 (2)
             22 COMPARE_OP               2 (==)
             25 POP_JUMP_IF_FALSE       32

  6          28 LOAD_CONST               2 (2)
             31 RETURN_VALUE        
        &gt;&gt;   32 LOAD_CONST               0 (None)
             35 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(bar)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (1)
              6 COMPARE_OP               2 (==)
              9 POP_JUMP_IF_FALSE       16

  3          12 LOAD_CONST               1 (1)
             15 RETURN_VALUE        

  4     &gt;&gt;   16 LOAD_FAST                0 (x)
             19 LOAD_CONST               2 (2)
             22 COMPARE_OP               2 (==)
             25 POP_JUMP_IF_FALSE       32

  5          28 LOAD_CONST               2 (2)
             31 RETURN_VALUE        
        &gt;&gt;   32 LOAD_CONST               0 (None)
             35 RETURN_VALUE 
</code></pre>
</div>
<span class="comment-copy">There is no <code>else if</code> in <code>python</code>. It is <code>elif</code>. Please see <a href="https://docs.python.org/3/reference/compound_stmts.html#elif" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#elif</a></span>
<span class="comment-copy">try compiling else if, see what happens :)</span>
<span class="comment-copy">But there is no <code>else if</code> in Python...</span>
<span class="comment-copy">There's <code>else: if</code>, but that's just putting a new <code>if</code> statement in an <code>else</code> block, which is a natural consequence of allowing arbitrary statements as the body of an <code>if/elif/else</code> statement.</span>
<span class="comment-copy">from the docs: <i>Similar to the else, the elif statement is optional. However, unlike else, for which there can be at most one statement, there can be an arbitrary number of elif statements following an if</i>.</span>
