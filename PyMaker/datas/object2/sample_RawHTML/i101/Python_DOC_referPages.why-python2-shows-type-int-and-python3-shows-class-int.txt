<div class="post-text" itemprop="text">
<p>I am new to python. I'm confused by the <code>&lt;class 'str'&gt;</code>.
I got a str by using:</p>
<pre><code>response = urllib.request.urlopen(req).read().decode()
</code></pre>
<p>The type of 'response' is <code>&lt;class 'str'&gt;</code>, not <code>&lt;type 'str'&gt;</code>.
When I try to manipulate this str in 'for loop':</p>
<pre><code>for ID in response: 
</code></pre>
<p>The 'response' is read NOT by line, BUT by character.
I intend to put every line of 'response' into individual element of a list. Now I have to write the response in a file and use 'open' to get a string of <code>&lt;type 'str'&gt;</code> that I can use in 'for loop'.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned by the commenters.  In python3:</p>
<pre><code>&gt;&gt;&gt;st = 'Hello Stack!'
&gt;&gt;&gt;type(st)
&lt;class 'str'&gt;
</code></pre>
<p>But in python2:</p>
<pre><code>&gt;&gt;&gt;st = 'Hello Stack!'
&gt;&gt;&gt;type(st)
&lt;type 'str'&gt;
</code></pre>
<p>So the behavior that you are seeing is entirely expected.  As to looping over a string, a for loop over a string will iterate over the string character by character.  If you want to iterate over each line in the string, you usually do something like split on <code>\n</code> or some regex designed to split on the line separators in the URL response.  Below is a simple for loop over the list resulting from <code>split</code></p>
<pre><code>response = urllib.request.urlopen(req).read().decode()
lines = response.split('\n')
for x in lines:
    st = x.strip()
    # do some processing on st
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no difference. Python changed the text representation of <code>type</code> objects between python 2 (<a href="https://docs.python.org/2/library/stdtypes.html#type-objects" rel="noreferrer">Types are written like this: <code>&lt;type 'int'&gt;</code>.</a>) and python 3 (<a href="https://docs.python.org/3/library/stdtypes.html#type-objects" rel="noreferrer">Types are written like this: <code>&lt;class 'int'&gt;</code>.</a>). In both python 2 and 3, the type of the type object is, um, type: </p>
<p>python 2</p>
<pre><code>&gt;&gt;&gt; type(type('a'))
&lt;type 'type'&gt;
</code></pre>
<p>python 3</p>
<pre><code>&gt;&gt;&gt; type(type('a'))
&lt;class 'type'&gt;
</code></pre>
<p>And that's the reason for the change... the string representation makes it clear that the type is a class.</p>
<p>As for the rest of your problem,</p>
<pre><code>for ID in response:
</code></pre>
<p><code>response</code> is a string and enumerating it gives the characters in the string. Depending on the type of response you may want to use and HTML, JSON or other parser to turn it into python objects.</p>
</div>
<span class="comment-copy">Are you using Python 2 or Python 3?</span>
<span class="comment-copy"><code>response = urllib.request.urlopen(req)</code>?</span>
<span class="comment-copy">Python 3. It is OK with the lib.</span>
<span class="comment-copy">Thanks, you perfectly solved my problem.</span>
<span class="comment-copy">Your are right. That is the difference between Python2 and 3. Thanks for your answer.</span>
