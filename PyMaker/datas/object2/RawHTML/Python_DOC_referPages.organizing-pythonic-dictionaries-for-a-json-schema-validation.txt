<div class="post-text" itemprop="text">
<p><strong>Scenario:</strong> I am trying to create a JSON schema validator in python. In this case, I am building a dictionary which contain the information that will be used for the validation.</p>
<p><strong>Code:</strong></p>
<pre><code>import json
import os
from pprint import pprint
from jsonschema import validate
from jsonschema import Draft4Validator

config_dir = r"D:\PROJECTS\etc"
config_file = r"schema.json"

schema = dict()

schema["$schema"] = "https://json-schema.org/schema#"
schema["title"] = "Index Schema"
schema["description"] = "Schema to describe calendar"
schema["type"] = "object"

# core
core = dict()
core["type"] = "object"
core["description"] = "Core settings for calendar"

core["frequency"] = {"type": "string",
                     "description": "Base frequency ",
                     "enum": ["monthly", "daily", "weekly"]}  #problem1

core["mark"] = {
                "type": "string",
                "description": "Mask defining the months",
                "if": {"core": {"frequency": {"enum": "monthly"}}}, #problem2
                "then": {
                         "pattern": "[01]{12}",
                         "minLength": 12,
                         "maxLength": 12
                         }

                }

core["ref_day"] = {"type": "string",
                   "description": "First day"
                   }

core["objective1"] = {"type": "object",
                     "description": "Information Calendar",
                     "properties": {"day": "string",
                                    "holiday": "string",
                                    "relative": {"unit": ["D", "M", ""],
                                                        "offset": "number"
                                                        }
                                    }
                    }

core["objective2"] = {"type": "object",
                       "description": "Information Calendar 2",
                       "properties":{
                               "day": {
                                       "type": "string",
                                       "value": "string"
                                       },
                               "holiday": "string",
                               "relative": {
                                       "unit": ["D", "M", ""],
                                       "offset": "number"
                                       }
                               }
                       }

core["required"] = ["mark", "ref_day", "frequency", "objective1", "objective2"]

schema["core"] = core

# required
schema["required"] = ["core"]

config_file_path = os.path.join(config_dir, config_file)

with open(config_file_path, 'w') as f:
    json.dump(schema, f, indent=4)

validation_result = Draft4Validator.check_schema(schema)
print(validation_result)
</code></pre>
<p><strong>Issue:</strong> Here I run into 3 problems: 
<strong>Problem1:</strong> Is it possible to create a list where the value in the JSON to be validated has to be in this list, otherwise it fails?</p>
<p><strong>Problem2:</strong> Is it possible to use an if function like I wrote in this snippet?</p>
<p><strong>Problem3:</strong> In an effort to decrease the possibility of mistakes, is it possible to create a dictionary in the following manner(?):</p>
<pre><code>core["holidays"]["properties"]["default"] = {
                                "type": "object",
                                "description": "",
                                "properties":{
                                        "ref",
                                        "type",
                                        "value"
                                        }
                                    }

core["holidays"]["properties"]["interim"] = {"interim": ""}
core["holidays"]["properties"]["selected"] = {"selection": {"ref": "default"}}
core["holidays"]["properties"]["exante"] = {"exante": {"ref": "default"}}
core["holidays"]["properties"]["expost"] = {"expost": {"ref": "default"}}


core["holidays"] = {"type": "object",
                    "description": "Holiday schedule",
                    "properties": {"default", "interim", "selected", "exante", "expost"}
                    }
</code></pre>
<p><strong>Main Question:</strong> When I run the first piece of code, I create the dictionary and the whole thing runs without trowing errors, but when I print the result, I get a <code>none</code>, which, as far as I understand, indicates there is something wrong. What am I doing wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Draft4Validator.check_schema</code> is not meant to return anything. (In other words it returns <code>None</code>.)</p>
<p><code>check_schema</code> raises an exception if there is a problem; if not, it runs to completion.</p>
<p>You can see this in the code for <code>check_schema</code>:</p>
<pre><code>    @classmethod
    def check_schema(cls, schema):
        for error in cls(cls.META_SCHEMA).iter_errors(schema):
            raise exceptions.SchemaError.create_from(error)
</code></pre>
<p>So, this behavior is correct.</p>
</div>
<span class="comment-copy"><a href="https://jsonschema2.readthedocs.io/en/latest/validate.html#jsonschema.IValidator.check_schema" rel="nofollow noreferrer"><code>check_schema</code></a> does not return anything; it just raises <code>SchemaError</code> if the schema is invalid â€“ i.e. your schema is valid.</span>
<span class="comment-copy">@meowgoesthedog for me it is returning <code>None</code></span>
<span class="comment-copy">Python functions return <code>None</code> by <b>default</b>.</span>
