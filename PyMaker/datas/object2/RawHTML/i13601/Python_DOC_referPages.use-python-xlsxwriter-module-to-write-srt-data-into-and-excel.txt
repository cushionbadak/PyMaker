<div class="post-text" itemprop="text">
<p>this time I tried to use Python's xlsxwriter module to write data from a .srt into an excel. <br/><br/>
The subtitle file looks like this in sublime text:<br/>
<img height="200" src="https://i.stack.imgur.com/jFbmt.png" width="200"/><br/></p>
<p>but I want to write the data into an excel, so it looks like this:<br/>
<img height="180" src="https://i.stack.imgur.com/sCNFK.png" width="350"/><br/></p>
<p>It's my first time to code python for this, so I'm still in the stage of trial and error...I tried to write some code like below<br/>
<img height="300" src="https://i.stack.imgur.com/rmwLj.png" width="350"/><br/>
but I don't think it makes sense...<br/></p>
<p>I'll continue trying out, but if you know how to do it, please let me know. I'll read your code and try to understand them! Thank you! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>The following breaks the problem into a few pieces:</p>
<ul>
<li>Parsing the input file. <code>parse_subtitles</code> is a <a href="https://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/" rel="nofollow">generator</a> that takes a source of lines and yields up a sequence of records in the form <code>{'index':'N', 'timestamp':'NN:NN:NN,NNN -&gt; NN:NN:NN,NNN', 'subtitle':'TEXT'}'</code>. The approach I took was to track which of three distinct states we're in:

<ol>
<li><code>seeking to next entry</code> for when we're looking for the next index number, which should match the regular expression <code>^\d*$</code> (nothing but a bunch of numbers)</li>
<li><code>looking for timestamp</code> when an index is found and we expect a timestamp to come in the next line, which should match the regular expression <code>^\d{2}:\d{2}:\d{2},\d{3} --&gt; \d{2}:\d{2}:\d{2},\d{3}$</code> (HH:MM:SS,mmm -&gt; HH:MM:SS,mmm) and </li>
<li><code>reading subtitles</code> while consuming actual subtitle text, with blank lines and EOF interpreted as subtitle termination points.</li>
</ol></li>
<li>Writing the above records to a row in a worksheet. <code>write_dict_to_worksheet</code> accepts a row and worksheet, plus a record and a dictionary defining the Excel 0-indexed column numbers for each of the record's keys, and then it writes the data appropriately.</li>
<li>Organizaing the overall conversion <code>convert</code> accepts an input filename (e.g. <code>'Wildlife.srt'</code> that'll be opened and passed to the <code>parse_subtitles</code> function, and an output filename (e.g. <code>'Subtitle.xlsx'</code> that will be created using <code>xlsxwriter</code>. It then writes a header and, for each record parsed from the input file, <a href="https://xlsxwriter.readthedocs.org/tutorial01.html" rel="nofollow">writes that record to the XLSX file</a>.</li>
</ul>
<p><a href="https://docs.python.org/3/howto/logging.html" rel="nofollow">Logging statements</a> left in for self-commenting purposes, and because when reproducing your input file I fat-fingered a <code>:</code> to a <code>;</code> in a timestamp, making it unrecognized, and having the error pop up was handy for debugging!</p>
<p>I've put a text version of your source file, along with the below code, in <a href="https://gist.github.com/b-adams/ee9fd90f3d85bb2a2da1" rel="nofollow">this Gist</a></p>
<pre><code>import xlsxwriter
import re
import logging

def parse_subtitles(lines):
    line_index = re.compile('^\d*$')
    line_timestamp = re.compile('^\d{2}:\d{2}:\d{2},\d{3} --&gt; \d{2}:\d{2}:\d{2},\d{3}$')
    line_seperator = re.compile('^\s*$')

    current_record = {'index':None, 'timestamp':None, 'subtitles':[]}
    state = 'seeking to next entry'

    for line in lines:
        line = line.strip('\n')
        if state == 'seeking to next entry':
            if line_index.match(line):
                logging.debug('Found index: {i}'.format(i=line))
                current_record['index'] = line
                state = 'looking for timestamp'
            else:
                logging.error('HUH: Expected to find an index, but instead found: [{d}]'.format(d=line))

        elif state == 'looking for timestamp':
            if line_timestamp.match(line):
                logging.debug('Found timestamp: {t}'.format(t=line))
                current_record['timestamp'] = line
                state = 'reading subtitles'
            else:
                logging.error('HUH: Expected to find a timestamp, but instead found: [{d}]'.format(d=line))

        elif state == 'reading subtitles':
            if line_seperator.match(line):
                logging.info('Blank line reached, yielding record: {r}'.format(r=current_record))
                yield current_record
                state = 'seeking to next entry'
                current_record = {'index':None, 'timestamp':None, 'subtitles':[]}
            else:
                logging.debug('Appending to subtitle: {s}'.format(s=line))
                current_record['subtitles'].append(line)

        else:
            logging.error('HUH: Fell into an unknown state: `{s}`'.format(s=state))
    if state == 'reading subtitles':
        # We must have finished the file without encountering a blank line. Dump the last record
        yield current_record

def write_dict_to_worksheet(columns_for_keys, keyed_data, worksheet, row):
    """
    Write a subtitle-record to a worksheet. 
    Return the row number after those that were written (since this may write multiple rows)
    """
    current_row = row
    #First, horizontally write the entry and timecode
    for (colname, colindex) in columns_for_keys.items():
        if colname != 'subtitles': 
            worksheet.write(current_row, colindex, keyed_data[colname])

    #Next, vertically write the subtitle data
    subtitle_column = columns_for_keys['subtitles']
    for morelines in keyed_data['subtitles']:
        worksheet.write(current_row, subtitle_column, morelines)
        current_row+=1

    return current_row

def convert(input_filename, output_filename):
    workbook = xlsxwriter.Workbook(output_filename)
    worksheet = workbook.add_worksheet('subtitles')
    columns = {'index':0, 'timestamp':1, 'subtitles':2}

    next_available_row = 0
    records_processed = 0
    headings = {'index':"Entries", 'timestamp':"Timecodes", 'subtitles':["Subtitles"]}
    next_available_row=write_dict_to_worksheet(columns, headings, worksheet, next_available_row)

    with open(input_filename) as textfile:
        for record in parse_subtitles(textfile):
            next_available_row = write_dict_to_worksheet(columns, record, worksheet, next_available_row)
            records_processed += 1

    print('Done converting {inp} to {outp}. {n} subtitle entries found. {m} rows written'.format(inp=input_filename, outp=output_filename, n=records_processed, m=next_available_row))
    workbook.close()

convert(input_filename='Wildlife.srt', output_filename='Subtitle.xlsx')
</code></pre>
<p><strong>Edit</strong>: Updated to split multiline subtitles across multiple rows in output</p>
</div>
<span class="comment-copy">Is the intention really for multiline subtitle text to end up in different rows in excel? What should happen if the subtitle text occupies more than 3 lines?</span>
<span class="comment-copy">Also, it would be awesome if you could update your question with the pasted in text itself as code blocks from sublime (highlight and Ctrl+K to format text as code block).  Would be helpful for reproducing / cutting and pasting what you have</span>
<span class="comment-copy">Hi Bryant, thank you very much for writing the code! I tried it and it seems like they all generate errors. So only the headers are there in the Subtitle.xlsx. Also, your guess is right, I have to separate the multiline subtitles in stead of merging them into one column. can I also ask what is the "line" and "lines" refer to in your code "for line in lines"? Thank you! :)</span>
<span class="comment-copy">@Penny re:"for line in lines": The <code>parse_subtitles</code> function expects its parameter <code>lines</code> to be provided with an iterable (a list, dictionary, generator, etc) that supplies lines of text.  The <code>convert</code> function supplies an opened file as the argument to the <code>parse_subtitles</code> function, and <a href="http://stackoverflow.com/a/10255293/5265467">Python lets files be used as an iterable source of lines-in-the-file</a>. // The <code>line</code> variable holds the current element of <code>lines</code> that the <a href="https://docs.python.org/3.4/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">for loop is processing</a>.</span>
<span class="comment-copy">@Penny re: multiline separation: Is the output goal to have each timestamp appear only once (e.g. one spreadsheet row with index/timestamp/text_line_1, and then the next spreadsheet row with blank/blank/test_line_2) or to have each line of text bear complete index/timestamp information, possibly with an extra bit of order-of-lines-in-this-block information? (e.g. one row with index/timestamp/text_line_1/1, the next row with index/timestamp/text_line_2/2)</span>
<span class="comment-copy">@Penny re:errors: I've successfully run the code on Python 3.4.1 (Anaconda 2.1.0 64 bit distribution) on Windows 7. Without knowing what errors you're running into and what's different about your setup than mine, I can't provide any specific recommendations.</span>
