<div class="post-text" itemprop="text">
<p>I want to define a function, <code>sumAll(n)</code> that <code>sums all numbers from 1 to n</code>.</p>
<p>For example, when I call <code>sumAll(10)</code> should return the <code>answer 55</code>...</p>
<p>Because:</p>
<pre><code>1+2+3+4+5+6+7+8+9+10 = 55
</code></pre>
<p>The function <code>sumAll</code> needs to use a for loop to carry out this summation, and it will have to use a sum variable that increases in value over each iteration of the for loop.</p>
<p>I have a working function that does not use a for loop, but I need to know how to use a for loop to accomplish this as well.</p>
<p>Here is the working program:</p>
<pre><code>def sumAll(n):
    if n == 0:
        return 0

    return n + sumAll(n - 1)

number = int(raw_input("Please enter a number: \n"))

print ("The answer is: ") + str(sumAll(number))
</code></pre>
<p>How do I use a "for" loop to accomplish this?
Am I right in assuming the <code>"for loop"</code> should be nested in the <code>"sumAll"</code> function?</p>
<p>I have tried many times to do this using a for loop and I keep getting a <code>infinite result and errors</code>...</p>
<p>Here is my code:</p>
<pre><code>def sumAll(n):
    y = n + sumAll(n -1)
    return y

num = int(raw_input("Please enter a number")
for n in range(num):
    num = sumAll(num)
    print num
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By <code>for loop</code></p>
<pre><code>def sumAll(n):
    sum_all = 0
    for i in range(1, n+1):
        sum_all = sum_all + i
    return sum_all

number = int(raw_input("Please enter a number: \n"))

print ("The answer is: ") + str(sumAll(number))
</code></pre>
<p>Output:</p>
<pre><code>Please enter a number: 
10
The answer is: 55
</code></pre>
<p>You can also use <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow">list Comprehension</a>:</p>
<pre><code>print sum([i for i in range(number+1)])
</code></pre>
<p>Output:</p>
<pre><code>55
</code></pre>
<p>You can also use a mathematical series formula: </p>
<pre><code>def sumAll(n):
    return n * (n + 1) / 2   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can even do it without a loop:</p>
<pre><code>def sumAll(n):
    return  sum(range(1,n+1))

print(sumAll(10)) # -&gt; 55
</code></pre>
<p>if you insist on using a loop:</p>
<pre><code>def sumAll(n):
    s = 0
    for i in range(1,n+1):
        s += i
    return s
</code></pre>
<p>but the mathematical solution is simply:</p>
<pre><code>def sumAll(n):
    return n * (n + 1) / 2  
    # in python 3:
    # return n * (n + 1) // 2
</code></pre>
<p>(there are <code>n</code> elements with an average value of <code>(n+1)/2</code>; this will always be an integer since either <code>n</code> or <code>n+1</code> is even; the proof by induction is often the first example when math students learn about induction...).</p>
</div>
<div class="post-text" itemprop="text">
<p>You will get an error with sum(1, 2, 3, 4)<br/>
TypeError: sum expected at most 2 arguments, got 4</p>
<pre><code>sum((1, 2, 3, 4)) # works cuz tuple inside
sum([1, 2, 3, 4]) # works cuz list inside
</code></pre>
<p>so the func will need to gather elements into a tuple, e.g.</p>
<pre><code>numbers = 1, 2, 3, 4
print(sum(numbers)) # already a tuple so works
</code></pre>
<p>use * with your parameter to gather the caller's args into a tuple. 
* enabbles any-number of args to be supplied by caller and they are converted into a tuple parameter.</p>
<pre><code>def sumall(*args):
    return sum(args)
print(sumall(1))
print(sumall(1, 2))
print(sumall(1, 2, 3))
print(sumall(1, 2, 3, 4))
</code></pre>
<p>produces the expected answers. Credit: author Downey asks for this exercises solution in chapter 12 of Think Python (2016) </p>
</div>
<span class="comment-copy">Have you tried using <code>sum()</code>? Or anything involving a <code>for</code> loop?</span>
<span class="comment-copy">Please see <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">The Tutorial</a> for examples of <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer"><code>for</code></a> statement usage.</span>
<span class="comment-copy">You seriously came up with a working recursion solution for this, complete with a base case, but you don't know how to add the numbers 1-10 in a for loop??</span>
<span class="comment-copy">When you tried "many times", did you save ANY of those tries? Could you include one of these tries?</span>
<span class="comment-copy"><code>return n * (n + 1) / 2</code></span>
<span class="comment-copy">This doesn't answer OP's question. They want to do this in a function.</span>
<span class="comment-copy">No, this still isn't what OP was asking for.</span>
<span class="comment-copy">@MorganThrapp  It's okk ??</span>
<span class="comment-copy">Thank you for the answer S_A,  it was exactly what I needed. I apologise for the down vote, I don't understand it either because it was really helpful, thanks.</span>
<span class="comment-copy">I have, but unfortunately because of all the down votes on my question, I cannot uproot anymore, only mark that the answer was wat I needed.</span>
<span class="comment-copy">thanks for the answer, I appreciate it!</span>
