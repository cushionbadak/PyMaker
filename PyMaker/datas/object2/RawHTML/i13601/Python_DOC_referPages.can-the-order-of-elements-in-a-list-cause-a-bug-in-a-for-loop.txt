<div class="post-text" itemprop="text">
<p>I'm playing with a simple script to escape certain HTML characters, and am encountering a bug which seems to be caused by the order of elements in my list <code>escape_pairs</code>. I'm not <a href="https://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python">modifying the lists</a> during a loop, so I can't think of any Python/programming principles I'm overlooking here.</p>
<pre><code>escape_pairs = [("&gt;", "&amp;gt;"),("&lt;","&amp;lt;"),('"',"&amp;quot;"),("&amp;","&amp;amp;")]

def escape_html(s):
    for (i,o) in escape_pairs:
        s = s.replace(i,o)
    return s

print escape_html("&gt;")
print escape_html("&lt;")
print escape_html('"')
print escape_html("&amp;")
</code></pre>
<p>returns</p>
<pre><code>&amp;amp;gt;
&amp;amp;lt;
&amp;amp;quot;
&amp;amp;
</code></pre>
<p>However when I switch the order of the elements in my <code>escape_pairs</code> list to the bug disappears</p>
<pre><code>&gt;&gt;&gt; escape_pairsMod = [("&amp;","&amp;amp;"),("&lt;","&amp;lt;"),('"',"&amp;quot;"),("&gt;", "&amp;gt;")]

&amp;gt;
&amp;lt;
&amp;quot;
&amp;amp;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, in your first implementation, it can.</p>
<p>Lets take the case of <code>&gt;</code> and the list -</p>
<pre><code>escape_pairs = [("&gt;", "&amp;gt;"),("&lt;","&amp;lt;"),('"',"&amp;quot;"),("&amp;","&amp;amp;")]
</code></pre>
<p>When iterating through <code>escape_pairs</code> , you first get <code>&gt;</code> and replace it with <code>&amp;gt;</code> . This causes the string to become <code>'&amp;gt;</code> . Then you keep on iterating, and at the end you find <code>("&amp;","&amp;amp;")</code> , and you replace the <code>&amp;</code> in the string with <code>&amp;amp;</code> , making the result the one you get right now.</p>
<p>When you change the order of the lists, you get the correct result. But still this is just because you first took into consideration <code>&amp;</code> and only after that you took other in consideration.</p>
<p>You can use <code>str.translate</code> instead to translate the string coorectly , according to a dictionary. Example -</p>
<pre><code>&gt;&gt;&gt; escape_pairs = [("&gt;", "&amp;gt;"),("&lt;","&amp;lt;"),('"',"&amp;quot;"),("&amp;","&amp;amp;")]
&gt;&gt;&gt; escape_dict = dict(escape_pairs)
&gt;&gt;&gt; t = str.maketrans(escape_dict)
&gt;&gt;&gt; "&gt;".translate(t)
'&amp;gt;'
&gt;&gt;&gt; "&gt; &amp; &lt;".translate(t)
'&amp;gt; &amp;amp; &amp;lt;'
</code></pre>
<hr/>
<p>But if what you want to do is HTML escape the string, then you should use the standard library - <a href="https://docs.python.org/2/library/cgi.html" rel="nofollow"><code>cgi</code></a> -</p>
<pre><code>&gt;&gt;&gt; import cgi
&gt;&gt;&gt; cgi.escape("&lt; &gt; &amp;")
'&amp;lt; &amp;gt; &amp;amp;'
</code></pre>
<p>Also, if you are using <strong>Python 3.2 +</strong> , you can use <a href="https://docs.python.org/3/library/html.html#html.escape" rel="nofollow"><code>html.escape</code></a> instead, Example -</p>
<pre><code>&gt;&gt;&gt; import html
&gt;&gt;&gt; html.escape("&lt; &gt; &amp;")
'&amp;lt; &amp;gt; &amp;amp;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I will use the first time you call your escape_html function as an example: <br/><code>print escape_html("&gt;")</code> <br/><br/><strong>Problem:</strong> <br/>When you s.replace(i,o) the first time: </p>
<pre><code>s = "&gt;"

s = s.replace(i,o)

"&gt;".replace("&gt;", "&amp;gt;")

s = "&amp;gt;"
</code></pre>
<p>But now when you get to the the last replace(), the value of <code>s</code> was saved from before so:</p>
<pre><code>s = "&amp;gt;"

s = s.replace(i,o)

"&amp;gt;".replace("&amp;","&amp;amp;") #replaces the "&amp;" in `"&amp;gt;"` with `"&amp;amp;"` 

s = "&amp;amp;gt;"
</code></pre>
<p><br/><strong>Why Does Order Matter?</strong><br/>The reason this depends on order is because when the <code>.replace("&amp;","&amp;amp;")</code> comes first it'll be:</p>
<pre><code>s = "&gt;"

s = s.replace(i,o)

"&gt;".replace("&amp;","&amp;amp;") #No "&amp;"'s to replace so:

s = "&gt;" 
</code></pre>
<p>Then your program goes on to work as expected.<br/><br/><strong>Solution:</strong><br/>Because there will always be just one instance of the change you are trying to make in the list, just return once you have made that change.</p>
<pre><code>def escape_html(s):
    for (i,o) in escape_pairs:
        s = s.replace(i,o)
        return s
</code></pre>
</div>
<span class="comment-copy">Yes. If you write out the value of <code>s</code> on a piece of paper and follow the steps your program is taking, you will see it happen.</span>
<span class="comment-copy">In your first "buggy" case, how is <code>replace</code> supposed to know that you only want to replace <i>some</i> of the <code>&amp;</code> characters and not all of them?</span>
<span class="comment-copy">According to the docs, html.escape should be used instead of cgi. Otherwise a great answer</span>
<span class="comment-copy">I had first recommended that, but since <code>html</code> module is only Python 3.2 + , I changed to <code>cgi</code> , added it back with note that its only  Python 3.2 + .</span>
<span class="comment-copy">I'd heard of the <code>.translate()</code> function but never understood what the use case would be. Guess I have one now :)</span>
<span class="comment-copy">Good , I am guessing your issue is solved now? If so , I would like to request you to accept an answer (by clicking on the tick mark on the left side of that answer) , it would be helpful for the community .</span>
<span class="comment-copy">It is worth noting though that the use of <code>str.translate</code> in your answer only works in Python 3.</span>
<span class="comment-copy">I appreciate the focus on the simplest fix, even if it's not the most comprehensive.</span>
<span class="comment-copy">@insighter Thanks for the appreciation! I wanted to provide a solution that fell comfortably into what you were already doing so you could quickly understand it and move forward. If this helped you, a vote up would be nice so others know it worked!</span>
