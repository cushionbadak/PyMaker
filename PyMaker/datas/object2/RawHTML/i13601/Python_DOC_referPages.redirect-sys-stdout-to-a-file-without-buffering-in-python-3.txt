<div class="post-text" itemprop="text">
<p>I have a script that writes to a log file. In Python 2, my quick solution to allow tailing/viewing of the log as it progressed was by assigning <code>sys.stdout</code> to a file object with buffering set to 0:</p>
<pre><code>original_stdout = sys.stdout
sys.stdout = open(log_file, 'w', 0)
</code></pre>
<p>Once set, any print statements in the script's functions redirect to the log file very nicely.</p>
<p>Running the 2to3-converted version under Python 3 gives the following error: <code>ValueError: can't have unbuffered text I/O</code>. Changing the <code>'w'</code> above to <code>'wb'</code> solves that, so the structure of the block is</p>
<pre><code>original_stdout = sys.stdout
sys.stdout = open(log_file, 'wb', 0)
print("{}".format(first_message))
</code></pre>
<p>but now the first print statement errors with <code>TypeError: 'str' does not support the buffer interface</code>. I tried explicitly casting the string to bytes</p>
<pre><code>print(bytes("{}".format(first_message), "UTF-8"))
</code></pre>
<p>but that produces the same <code>TypeError</code> as before.</p>
<p>What is the easiest way to write unbuffered text to a file in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to Python 3.4.3 documentation at <a href="https://docs.python.org/3/library/io.html#raw-i-o" rel="nofollow">https://docs.python.org/3/library/io.html#raw-i-o</a> and 3.5 documenmtation at <a href="https://docs.python.org/3.5/library/io.html#raw-i-o" rel="nofollow">https://docs.python.org/3.5/library/io.html#raw-i-o</a> the way to get unbuffered IO is with Raw IO which can be enabled as in:</p>
<pre><code>f = open("myfile.jpg", "rb", buffering=0)
</code></pre>
<p>That means "wb" should work for writing.</p>
<p>Details on Raw IO are at <a href="https://docs.python.org/3/library/io.html#io.RawIOBase" rel="nofollow">https://docs.python.org/3/library/io.html#io.RawIOBase</a> and <a href="https://docs.python.org/3.5/library/io.html#io.RawIOBase" rel="nofollow">https://docs.python.org/3.5/library/io.html#io.RawIOBase</a> which appear to be the same.</p>
<p>I did some testing and found buffering of Text IO to be severe and can amount to hundreds of lines and this happens even when writing to sys.stderr and redirecting the error output to a file, on Windows 7 at least. The I tried Raw IO and it worked great! - each line printed came through immediately and in plain text in tail -f output. This is what worked for me on Windows 7 with Python 3.4.3 and using tail bundled with GitHub tools:</p>
<pre><code>import time
import sys
f = open("myfile.txt", "ab", buffering=0)
c = 0
while True:
    f.write(bytes("count is " + str(c) + '\n','utf-8'))
    c += 1
    time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If by unbuffered you mean having the outputs immediately flushed to disk, you can simply do this:</p>
<pre><code>original_stdout = sys.stdout
sys.stdout = open(log_file, 'w')
print(log_message, flush=True)
</code></pre>
<p>As <code>print</code> is now a first-class function you can also specify which <code>file</code> to print to, such as:</p>
<pre><code>fd = open(log_file, 'w')
print(log_message, file=fd, flush=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue seems to be in the way you open the file -</p>
<pre><code>open(log_file, 'w', 0)
</code></pre>
<p>From <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">Python 3.x documentation</a> -</p>
<blockquote>
<p>open(file, mode='r', <strong>buffering=-1</strong>, encoding=None, errors=None, newline=None, closefd=True, opener=None)</p>
</blockquote>
<p>The third argument for <code>open()</code> determines the buffering mode for the file, <code>0</code> means no buffering. I do not think you can make it work by just using <code>'wb'</code> instead of <code>'w'</code> .</p>
<p>You should remove that <code>0</code> third argument, and let <code>open()</code> use default line buffering for text files. Example -</p>
<pre><code>open(log_file, 'w')
</code></pre>
</div>
<span class="comment-copy">I ran across this issue with the tweepy API recently trying to use it with Python3 and found that with Python3 IO buffers hold bytes while in Python 2 they hold strings.  That's why the TypeError.  Try running python -u or set env var  PYTHONUNBUFFERED=1, see <a href="http://stackoverflow.com/questions/107705/disable-output-buffering" title="disable output buffering">stackoverflow.com/questions/107705/disable-output-buffering</a></span>
<span class="comment-copy">The whole point, though, is to write to the file without buffering...</span>
<span class="comment-copy">I do not think you can have that along with redirecting to a log file together, in python 3. For running complete python in unbuffered mode you can checkout - <a href="http://stackoverflow.com/questions/107705/disable-output-buffering" title="disable output buffering">stackoverflow.com/questions/107705/disable-output-buffering</a> .  Or the best would be to use <code>logging</code> module, which would give you far better control than redirection of stdout.</span>
<span class="comment-copy">It looks like logging is definitely the way to go in Python 3. I had avoided rewriting the whole script to use that module until moving from 2 to 3, but it is definitely the most straightforward solution.</span>
<span class="comment-copy">yea, I believe using the <code>logging</code> module would really be better in the long run.</span>
