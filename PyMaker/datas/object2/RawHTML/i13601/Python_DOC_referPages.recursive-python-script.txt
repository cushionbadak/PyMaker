<div class="post-text" itemprop="text">
<pre><code>found = 0
def new(string):
    global found

    if found &gt; len(string):
        return 0 

    fish = string.find('x',found,len(string))
    found = fish + 1

    return new(string) + 1


text = 'onxonxoinxoinoxn'
final_text = text + 'x'
print new(final_text)
</code></pre>
<p>So I'm new to recursion and i know there is a much easier way to do this but can someone explain how to fix this.this is basically a recursive function to find the total number of times a letter 'x' can be found in the variable 'text'.</p>
<pre><code>This is my error:
4
7
11
16
18
0
4
7
Traceback (most recent call last):
11
16
  File "/Users/Charana/Documents/Projects/untitled/Main.py", line 18,      
</code></pre>
<p>in 
        new(final_text)
    RuntimeError: maximum recursion depth exceeded</p>
<p>so it works but it continues to loop.how do i make it stop 
thankyou in advance </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>found &gt; len(string)
</code></pre>
<p>This condition will never be true, because <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow"><code>str.find</code></a> will always return a result <code>&lt; len(s)</code>.</p>
<p>The correct return value to check for when there was no result is <code>-1</code>. But you need to be careful with the increment, since that will change the invalid result <code>-1</code> to <code>0</code> continuing the loop. So you should reorder your logic a bit:</p>
<pre><code>def new(string):
    global found

    fish = string.find('x',found,len(string))
    if fish &lt; 0:
        return 0 

    found = fish + 1
    return new(string) + 1
</code></pre>
<p>Note that using global variables for such a function, especially for recursive functions, is a bad idea. You don’t have full control over it, and instead, you also need to make sure that you reset its value when you call the function. Instead, you should keep all the information inside, and pass it around to the recursive calls if necessary. You could change your function like this:</p>
<pre><code>def new (string, found = 0):
    fish = string.find('x', found)
    if fish &lt; 0:
        return 0
    return new(string, fish + 1) + 1
</code></pre>
<p>This uses default parameter values to make sure that <code>found</code> starts with 0. And for the recursive call, it just passes the new <code>found</code> value, so the next function can start there.</p>
<p>Finally note, that you should try to use descriptive names for your functions and variables. The function is supposed to count the number of occurrences of <code>'x'</code>, so maybe <code>count_x</code> would be better. Also, the variable <code>found</code> in that context conveys a meaning that it contains the number of occurrences of <code>x</code> that you have already found; but instead, it’s the start offset from which to continue the search; and <code>fish</code> is just bad, as it’s just the index of the next <code>'x'</code>:</p>
<pre><code>def count_x (string, offset = 0):
    index = string.find('x', offset)
    if index &lt; 0:
        return 0
    return count_x(string, index + 1) + 1
</code></pre>
<p>Finally, just in case you don’t know, there is also a built-in function <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow"><code>str.count</code></a> which does the same thing :)</p>
</div>
<span class="comment-copy">You should test that <code>fish</code> is not <code>-1</code> as that means that there is no <code>x</code> any more (and exit). In your case, <code>found</code> gets <code>fish + 1</code> which is <code>0</code>, hence the restart.</span>
<span class="comment-copy">Thanks a lot. but this might sound dumb but why is the <code>if</code> statement <code>fish &lt; 0</code>  satisfied when it is at the end of the string.doesn't <code>fish &lt; 0</code> apply to every letter in the string.why when it gets to the last 'x'</span>
<span class="comment-copy">The last character of a string has the index <code>len(string) - 1</code> (because the very first character is at index 0); and <code>string.find()</code> returns the index of the character, or <code>-1</code> when it doesn’t find the character in the string. So we check for <code>-1</code> (or <code>&lt; 0</code>) to find out if there was no match within the string.</span>
