<div class="post-text" itemprop="text">
<p>I have a python project that is using GitPython to perform clone and pull functions against a remote Git repository.</p>
<p>As a simple example:</p>
<pre><code>import git
from git import Git
from git import Repo


def clone_and_checkout(full_dir, git_url, repo_ver):

    repo = Repo.clone_from(
        url=git_url,
        to_path=full_dir
    )

    # Trigger re-create if repository is bare
    if repo.bare:
        raise git.exc.InvalidGitRepositoryError

    # Set origin and pull
    origin = repo.remotes.origin
    origin.pull()

    # Check out desired version of repository
    g = Git(full_dir)
    g.checkout(repo_ver)
</code></pre>
<p>I want to be able to write a unit test for this function, but obviously this needs to reach out to an external system as it stands currently.</p>
<p>I am curious if anyone has experience mocking up this external interaction, in a manner similar to using Mock to mock up HTTP calls. I'd like to be able to perform these tasks in a way that can be mocked at test time without needing to call an actual Git remote.</p>
<p>How should I go about writing tests for this?</p>
<p><strong>EDIT</strong>: To be clearer about what I'm asking, I should mention I'm new to Mock and was struggling to understand how to Mock instances of these classes rather than the classes themselves. My question should have been phrased better - something along the lines of "how do I use Mock to set instance-specific properties like bare?"</p>
<p>I have since learned much about Mock and have figured out how to do this, so I will provide an answer to my own question.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems to be a common result of an incomplete understanding of Mock, or the use of the Patch method.</p>
<p>The first thing to do is read the "<a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">where to patch</a>" section located on the Mock documentation. Armed with that information, you should be able to use the patch function to mock the GitPython objects used in the function above. These decorators would appear above your unit test function.</p>
<pre><code>@mock.patch('gitter.Repo')
@mock.patch('gitter.Git')
</code></pre>
<p>In order to provide a return value for an instance of one of these mocked objects, you can use <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.PropertyMock" rel="nofollow">PropertyMock</a>. Here's a full example of a unit test which leverages this:</p>
<pre><code>import gitter  # file containing our clone function
import mock
import unittest


class test_gitter(unittest.TestCase):

    @mock.patch('gitter.Repo')
    @mock.patch('gitter.Git')
    def runTest(self, mock_git, mock_repo):

        # Set the "bare" attribute of the Repo instance to be False
        p = mock.PropertyMock(return_value=False)
        type(mock_repo.clone_from.return_value).bare = p

        gitter.clone_and_checkout(
            '/tmp/docker',
            'git@github.com:docker/docker.git',
            'master'
        )
        mock_git.checkout.called_once_with('master')
</code></pre>
</div>
<span class="comment-copy">You refer to mocking and <code>Mock</code> - have you tried that?</span>
<span class="comment-copy">That's actually what I'm using for mocking the GitPython methods, but I think what I'm struggling with most is mocking up the Repo and Git objects.</span>
<span class="comment-copy">You'll need to be more specific than <i>"struggling"</i> - provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> of your attempt and a precise description of the issue with it.</span>
<span class="comment-copy">@jonrsharpe - thanks for the tip. Admittedly I wrote this in a bit of a rush. I will improve the question with more detail.</span>
