<div class="post-text" itemprop="text">
<p>I want to convert a list of string representations of tuples, such as:</p>
<pre><code>["(279, 256000, '.m4a')", "(217, 256000, '.m4a')", "(174, 128000, '.mp3')"]
</code></pre>
<p>into a list of tuples, such as:</p>
<pre><code>[(279, 256000, '.m4a'), (217, 256000, '.m4a'), (174, 128000, '.mp3')]
</code></pre>
<p>This seems to be the most concise (and clear) way to do it</p>
<pre><code>recs = ... # loaded from text file
data  = map(eval, recs)  
</code></pre>
<p>However, Ive seen a posting <a href="http://www.python-course.eu/python3_lambda.php" rel="nofollow noreferrer">Python course - lambda</a>
that seems to imply <em>map()</em> may not be good python or may become deprecated.</p>
<p>The alternative would seem to be something like the more verbose (and hence slightly less clear):</p>
<pre><code>data = []
for r in recs:
    data += [eval(r)]
</code></pre>
<p>Which is more pythonic?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> is fine when used with a named function; it’s when you use it with an inline lambda that a list comprehension or generator expression becomes cleaner. <code>eval</code>, on the other hand, is not really fine. Consider <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval"><code>ast.literal_eval</code></a> instead.</p>
<pre><code>import ast

data = map(ast.literal_eval, recs)
</code></pre>
<p>Also, <code>map</code> returns an iterable (in Python 3); if you want a list, you’ll have to call <code>list</code> on the result.</p>
<pre><code>data = list(map(ast.literal_eval, recs))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion using <code>map</code> is a nice functional solution, but can be seen as a redundant language feature since generators were added. On the other hand your example that iterates over the array and concatenates to a list is <em>not</em> Pythonic.</p>
<p>Some Pythonic alternatives to <code>map</code>:</p>
<pre><code># a list comprehesion
[ast.literal_eval(r) for r in recs]
</code></pre>
<p>or</p>
<pre><code># a generator expression
(ast.literal_eval(r) for r in recs)
</code></pre>
<p>or</p>
<pre><code># a generator function
def mapYourData(recs):
  for r in recs:
    yield ast.literal_eval(r)
</code></pre>
<p>Don't forget to <code>import ast</code></p>
<p>EDIT: as @minitech pointed out you shold use <code>ast.literal_eval</code> instead of <code>eval</code>.</p>
</div>
<span class="comment-copy">Pardon my ignorance (fairly new to Python) , but why is eval 'not really fine'?    As proof of my newness, I havent yet come across ast - will check that out, thanks for the tip. ... I suspected the loop was not 'pythonic', thanks for the alternative.</span>
<span class="comment-copy">@RFlack: <code>eval</code> can execute arbitrary code, so it’s not safe to use on user input. Even if you think that doesn’t apply to your case, related security vulnerabilities have a habit of sneaking in, so it’s best to use a more restrictive equivalent if possible.</span>
<span class="comment-copy">ah that makes sense.  in this case the data are 'safe' being written by (my) program, not user input.  But I take your point.  Thanks.</span>
