<div class="post-text" itemprop="text">
<p>I have a list of sets :</p>
<pre><code>L = [set([1, 4]), set([1, 4]), set([1, 2]), set([1, 2]), set([2, 4]), set([2, 4]), set([5, 6]), set([5, 6]), set([3, 6]), set([3, 6]), set([3, 5]), set([3, 5])]
</code></pre>
<p>(actually in my case a conversion of a list of reciprocal tuples)</p>
<p>and I want to remove duplicates to get :</p>
<pre><code>L = [set([1, 4]), set([1, 2]), set([2, 4]), set([5, 6]), set([3, 6]), set([3, 5])]
</code></pre>
<p>But if I try :</p>
<pre><code>&gt;&gt;&gt; list(set(L))
TypeError: unhashable type: 'set'
</code></pre>
<p>Or</p>
<pre><code>&gt;&gt;&gt; list(np.unique(L))
TypeError: cannot compare sets using cmp()
</code></pre>
<p>How do I get a list of sets with distinct sets?</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way is to convert your sets to <code>frozenset</code>s (which are hashable) and then use <code>set</code> to get only the unique sets, like this</p>
<pre><code>&gt;&gt;&gt; list(set(frozenset(item) for item in L))
[frozenset({2, 4}),
 frozenset({3, 6}),
 frozenset({1, 2}),
 frozenset({5, 6}),
 frozenset({1, 4}),
 frozenset({3, 5})]
</code></pre>
<p>If you want them as sets, then you can convert them back to <code>set</code>s like this</p>
<pre><code>&gt;&gt;&gt; [set(item) for item in set(frozenset(item) for item in L)]
[{2, 4}, {3, 6}, {1, 2}, {5, 6}, {1, 4}, {3, 5}]
</code></pre>
<hr/>
<p>If you want the order also to be maintained, while removing the duplicates, then you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict"><code>collections.OrderedDict</code></a>, like this</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; [set(i) for i in OrderedDict.fromkeys(frozenset(item) for item in L)]
[{1, 4}, {1, 2}, {2, 4}, {5, 6}, {3, 6}, {3, 5}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative using a loop:</p>
<pre><code>result = list()
for item in L:
    if item not in result:
        result.append(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another alternative</p>
<pre><code>yourNewSet = map(set,list(set(map(tuple,yourSet))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is another alternative.</p>
<pre><code>import itertools
list_sets = [set(['a', 'e', 'f']), set(['c', 'b', 'f']), set(['a', 'e', 'f']), set(['a', 'd']), set(['a', 'e', 'f'])]

lists = [list(s) for s in list_sets] # convert a list of sets to a list of lists
lists.sort()
lists_remove_duplicates = [lists for lists,_ in itertools.groupby(lists)]
print(lists_remove_duplicates)

# output
[['a', 'd'], ['a', 'e', 'f'], ['c', 'b', 'f']]
</code></pre>
</div>
<span class="comment-copy">One way could be to convert the list of <code>set</code> to <code>list</code> of <code>list</code> and then remove the duplicates and then converting the <code>list</code> elements back to <code>set</code>.</span>
<span class="comment-copy">@ZdaR I'm going to say this in bold: <b>Your hint is wrong.</b> Following the part of your instructions which say "<i>convert the list of <code>set</code> to <code>list</code> of <code>list</code> and then remove the dupicates</i>", we get that <code>list(map(list, [{3, 11}, {11, 3}]))</code> outputs <code>[[3, 11], [11, 3]]</code>.</span>
<span class="comment-copy">@PM2Ring It exists in 2.7 so that statement is not strictly true.</span>
<span class="comment-copy">@DanD: Oops! I originally just looked at the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">Python 3 docs</a>, where it says "New in version 3.1". But I just now checked in the Python 2 docs &amp; it says "New in version 2.7."; I should've checked there to see if it had been back-ported. Sorry about that. I'll remove my comment(s).</span>
<span class="comment-copy">It is better to use <code>[]</code> than <code>list()</code> to create a list</span>
<span class="comment-copy">@ReblochonMasque: it's because <code>[]</code> is literal syntax (allowing the empty list to be instantiated at compile time) whereas <code>list()</code> is a function call (the function name must be looked up at run time and then called to return the empty list). The latter is slightly more expensive.</span>
<span class="comment-copy">My preference for <code>list()</code> is merely aesthetic. Up until today I didn't even know it was slightly more expensive. If that's the only issue, I don't think it's that big of a deal.</span>
<span class="comment-copy">@ReblochonMasque I investigated a little and <a href="http://stackoverflow.com/questions/2736693/creating-a-list-in-python-something-sneaky-going-on">they behave differently</a>, but it's an insignificant difference, as you say.</span>
<span class="comment-copy">@thefourtheye I think that's a bit of a stretch, unless I'm missing something. You'd have to make the mistake of assigning to <code>list</code> instead of assigning <code>list()</code> to something.</span>
<span class="comment-copy"><b>This answer is wrong</b>. Two equal sets can be mapped to two different tuples. I have seen this happen. For example: <code>ss = [{3, 11}, {11, 3}]; list(map(tuple, ss))</code> outputs <code>[(3, 11), (11, 3)]</code></span>
