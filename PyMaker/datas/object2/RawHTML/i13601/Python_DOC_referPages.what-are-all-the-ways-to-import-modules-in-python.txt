<div class="post-text" itemprop="text">
<p>I've done some research, and I came across the following article: <a href="http://effbot.org/zone/import-confusion.htm" rel="nofollow">http://effbot.org/zone/import-confusion.htm</a>. While this seems to be a great guide, it was written in 1999, a while back. I'm am using Python 3.4.3, so I am thinking that some things have changed, which worries me, because I don't want to learn what is not applicable. Therefore, in Python 3, what are all of the ways to import packages and modules, in detail? Which ways are the most common and should be used above others?</p>
</div>
<div class="post-text" itemprop="text">
<p>The only ways that matter for ordinary usage are the first three ways listed on that page:</p>
<ul>
<li><code>import module</code></li>
<li><code>from module import this, that, tother</code></li>
<li><code>from module import *</code></li>
</ul>
<p>These haven't changed in Python 3.  (Some of the details about where Python looks for the <code>module.py</code> file to load <code>module</code> have been tweaked, but the behavior of the import itself still works as described on the page you linked.)</p>
<p>One thing has been added, before Python 3 but since that article.  That is explicit relative imports.  These let you do things like <code>from ..module import blah</code>.  This kind of import can only be used from inside a package; it lets modules in a package refer to other modules in the same package in a way that is relative to the package (i.e., without having to specify how to import the top-level package).  You can read the details in <a href="https://www.python.org/dev/peps/pep-0328/" rel="nofollow">PEP 328</a>.  Even this, though, is basically just a new variation on the <code>from module import blah</code> style syntax mentioned on the page you linked to.</p>
<p><code>__import__</code> also still works in Python 3.  This is an internal function that you only would need to use if doing something rather unusual.  The same applies to various functions in the <code>importlib</code> module (and the deprecated <code>imp</code> module).  The exact level of wizardliness of these importing functions varies from one to another, but for ordinary usage of "I just want to import this module and use it", you essentially never need to use them.  They're only needed if you want to do something like dynamically import a module whose name isn't known until runtime.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Zen of Python gives you some hints:</p>
<pre><code>&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre>
<p>So given the simple, obvious method is: <code>import</code> <em>module_name</em> <strong>and</strong> it preserves namespaces I would suggest that while there are several import methods as you can see from the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow">python3 manual entry</a> and you can extend them by overriding the <code>__import__()</code> method or by rolling your own I would say stick with it <em>until you have a <strong>good</strong> reason not to</em>.</p>
<p>The fact that<code>__import__()</code> is surrounded by double underscores is also a hint to leave it alone.</p>
<p>If you are looking to understand the design decisions behind the import mechanisms then start with the manual then follow up into the PEPs <a href="http://www.python.org/dev/peps/pep-0302" rel="nofollow">302</a> &amp; <a href="http://www.python.org/dev/peps/pep-0420" rel="nofollow">420</a> are good starting points.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can import modules in Python using the following ways</p>
<ul>
<li><code>import module</code></li>
<li><code>from module import function</code></li>
<li><code>from module import *</code></li>
</ul>
<blockquote>
<p>Although using <code>from module import *</code> 
  is not a good practice, because of <strong>readability:</strong> Other programmer cannot understand what all are actually used in the current module. <strong>Memory overload:</strong> All are loaded in to memory. <a href="https://docs.python.org/3.4/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module" rel="nofollow" title="Best practices for using import in a module">Best practices for using import in a module.</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I think import as tuple would be much better for <strong>readability</strong> and <strong><a href="https://www.python.org/dev/peps/pep-0008/#id19" rel="nofollow noreferrer">Maximum Line Length(pep8)</a></strong></p>
<p><strong>The import statement has two problems</strong>:</p>
<ul>
<li>Long import statements can be difficult to write, requiring various
contortions to fit Pythonic style guidelines.</li>
<li>Imports can be ambiguous in the face of packages; within a package,
it's not clear whether <code>import foo</code> refers to a module within the package or some module outside the package.</li>
<li><code>golang</code> language have the same thing for that</li>
</ul>
<p>so would more prefer import kinda this</p>
<pre><code>from package import (x, y)
</code></pre>
<p><strong>instead of this</strong></p>
<pre><code>from authentication.views import SignupView, LoginView, VerificationView, SignupDetailView
</code></pre>
<p><a href="https://legacy.python.org/dev/peps/pep-0328/" rel="nofollow noreferrer">https://legacy.python.org/dev/peps/pep-0328/</a></p>
</div>
<span class="comment-copy">@Miles - More info regarding relative imports can be found below : <a href="http://stackoverflow.com/questions/72852/how-to-do-relative-imports-in-python" title="how to do relative imports in python">stackoverflow.com/questions/72852/â€¦</a></span>
<span class="comment-copy">@BrenBarn Okay, this makes sense. However, I am having one particular problem. I have a package with two modules in it. I have another module outside of the package, and am trying to access the functions inside of both of the modules within the package. At the top of my current module, I type <code>import package_name</code>, yet I still don't have access to the functions in the sub-modules. What am I doing wrong?</span>
<span class="comment-copy">@MilesDavis: You should search for similar question on this site.  If you don't find the answer, you should ask a separate question explaining the details of your problem.  You asked a very general question here; if you have a specific problem with a specific setup, that warrants a separate question.</span>
