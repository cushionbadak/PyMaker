<div class="post-text" itemprop="text">
<p>I am just curious if </p>
<pre><code>p = 'padding' in ui and ui['padding'] or 0
</code></pre>
<p>is the shortest way (or if there is an even shorter way) of writing</p>
<pre><code>if 'padding' in ui:
   p = ui['padding']
else:
   p = 0
</code></pre>
<p>in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>ui</code> is a dictionary, you can even simplify that with the <a href="https://docs.python.org/3/library/stdtypes.html#dict.get"><code>dict.get</code></a> method, like this</p>
<pre><code>p = ui.get('padding', 0)
</code></pre>
<p>Here, if the key <code>padding</code> exists in the dictionary, then the value corresponding to that will be returned. Otherwise, the default value passed as the second parameter will be returned.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe it's not shorter because of the <code>import</code> line but you can also change <code>ui</code> to be a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a>.</p>
<pre><code>from collections import defaultdict

ui = defaultdict(lambda: 0)
</code></pre>
<p>Then the way you'd write what you originally had would simply be:</p>
<pre><code>ui['padding']
</code></pre>
<p>Not the shortest overall due to the setup, but once it's set up it's the shortest access to write out.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you're trying to do:</p>
<pre><code>p = ui['padding'] if 'padding' in ui else 0
</code></pre>
<p>This is called a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">ternary expression.</a></p>
</div>
<span class="comment-copy"><code>p = ui['padding'] if 'padding' in ui else 0</code></span>
<span class="comment-copy">It's not even a good way. If <code>ui['padding']</code> does exist but equals something like <code>""</code> or <code>[]</code>, <code>p</code> will be set to 0, not the value.</span>
<span class="comment-copy">This has one side-effect. This will create the key <code>padding</code>, if it doesn't exist.</span>
<span class="comment-copy">FYI the OP seems to be using the <a href="http://www.diveintopython.net/power_of_introspection/and_or.html" rel="nofollow noreferrer">"and-or trick"</a> unleashed upon us by Dive Into Python. It's long been one of the most controversial parts of that tutorial since it encourages the use of such an implicit and unreadable piece of Python.</span>
<span class="comment-copy">Why is it that we get so many questions about Dive Into Python The Hard Way Academy, but none about the <a href="https://docs.python.org/3.4/tutorial" rel="nofollow noreferrer">official Python tutorial</a>? Mysteries...</span>
<span class="comment-copy">@Two-BitAlchemist, it's in the language, it survived to 3x, sometimes it is a concise And readable way to express an idea.</span>
<span class="comment-copy">@wwii I've used it before, but more as <code>if function_call() and another_function()</code> where <code>function_call()</code> returns a boolean indicating success and <code>another_function()</code> depends on <code>function_call()</code></span>
<span class="comment-copy">@wwii I don't have any problem with the way any of the involved language constructs behave, but I do not concede that stringing them together in this way is readable or explicit.</span>
