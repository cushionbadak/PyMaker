<div class="post-text" itemprop="text">
<p>Code:</p>
<pre><code>d = {'a': 0, 'b': 1, 'c': 2}
l = d.keys()

print l
</code></pre>
<p>This prints ['a', 'c', 'b']. I'm unsure of how the method <strong>keys</strong> determines the order of the keywords within <strong>l</strong>. However, I'd like to be able to retrive the keywords in the "proper" order. The proper order of course would create the list ['a', 'b', 'c'].</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://docs.python.org/library/collections.html#collections.OrderedDict">OrderedDict</a> (requires Python 2.7) or higher.</p>
<p>Also, note that <code>OrderedDict({'a': 1, 'b':2, 'c':3})</code> won't work since the <code>dict</code> you create with <code>{...}</code> has already forgotten the order of the elements. Instead, you want to use <code>OrderedDict([('a', 1), ('b', 2), ('c', 3)])</code>.</p>
<p>As mentioned in the documentation, for versions lower than Python 2.7, you can use <a href="http://code.activestate.com/recipes/576693/">this</a> recipe.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Python 3.7+</h2>
<p>In Python <a href="https://docs.python.org/3.7/whatsnew/3.7.html" rel="noreferrer">3.7.0</a> the insertion-order preservation nature of <a href="https://docs.python.org/3.7/library/stdtypes.html#typesmapping" rel="noreferrer"><code>dict</code></a> objects <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">has been declared</a> to be an official part of the Python language spec. Therefore, you can depend on it.</p>
<h2>Python 3.6 (CPython)</h2>
<p>As of Python 3.6, for the CPython implementation of Python, dictionaries <a href="https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation" rel="noreferrer">maintain insertion order</a> by default. This is considered an implementation detail though; you should still use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a> if you want insertion ordering that's guaranteed across other implementations of Python.</p>
<h2>Python &gt;=2.7 and &lt;3.6</h2>
<p>Use the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a> class when you need a <code>dict</code> that 
remembers the order of items inserted.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; print sorted(d.keys())
['a', 'b', 'c']
</code></pre>
<p>Use the <a href="http://docs.python.org/library/functions.html#sorted" rel="noreferrer">sorted function</a>, which sorts the iterable passed in.</p>
<p>The <code>.keys()</code> method returns the keys in an arbitrary order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just sort the list when you want to use it.</p>
<pre><code>l = sorted(d.keys())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/tutorial/datastructures.html" rel="noreferrer">http://docs.python.org/tutorial/datastructures.html</a>:</p>
<p>"The keys() method of a dictionary object returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just apply the sorted() function to it)."</p>
</div>
<div class="post-text" itemprop="text">
<p>Although the order does not matter as the dictionary is hashmap. It depends on the order how it is pushed in:</p>
<pre class="lang-py prettyprint-override"><code>s = 'abbc'
a = 'cbab'

def load_dict(s):
    dict_tmp = {}
    for ch in s:
        if ch in dict_tmp.keys():
            dict_tmp[ch]+=1
        else:
            dict_tmp[ch] = 1
    return dict_tmp

dict_a = load_dict(a)
dict_s = load_dict(s)
print('for string %s, the keys are %s'%(s, dict_s.keys()))
print('for string %s, the keys are %s'%(a, dict_a.keys()))
</code></pre>
<p>output:<br/>
    for string abbc, the keys are dict_keys(['a', 'b', 'c'])<br/>
    for string cbab, the keys are dict_keys(['c', 'b', 'a'])</p>
</div>
<span class="comment-copy">If Python dictionaries are like most, they're actually hash tables.  Among other things, that means the order of the keys isn't guaranteed or even specified.  In particular, it wouldn't remember the order in which keys are added.</span>
<span class="comment-copy">@cHao: This essentually means that your program will be indeterministic if you loop over the elements in a dictionary?</span>
<span class="comment-copy">@HelloGoodbye: I wouldn't go that far; there's still very predictable behavior there.  Each full iteration sees exactly one of each key/value pair.  And in <i>most</i> languages, you'll even see them in the same order each time.  Unless the docs guarantee a particular order, though, you shouldn't count on it being the order you want.  (Some languages (like Perl) will actually randomize the order a bit -- allegedly for security reasons, but i think it's really just to shake you loose from the habit of relying on unspecified behavior.  :)  I don't <i>think</i> Python is quite that evil, but eh...)</span>
<span class="comment-copy">The order will be the same providing the dict has not been modified. From the manual: "If items(), keys(), values(), iteritems(), iterkeys(), and itervalues() are called with no intervening modifications to the dictionary, the lists will directly correspond. This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys())."</span>
<span class="comment-copy">@sfranky I think what steveayre meant is that the order is the same between what you obtain using the different methods mentioned, not the same as the ordrer in which the elements were written.</span>
<span class="comment-copy">Keep in mind, the order of an OrderedDict is the <i>insertion</i> order; the keys will only come out in alphabetical order if you inserted them that way.</span>
<span class="comment-copy">it's what he <i>showed</i> as a simplified example; it may or may not have any relation to how he actually plans to use it. I have previously encountered people who expected OrderedDict to return arbitrary insertions in sorted order, and so I felt I should point this out.</span>
<span class="comment-copy">This doesn't work if you want the original order and it wasn't sorted.</span>
<span class="comment-copy">Dictionary in python are insertion ordered only from version 3.6+ <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">check this</a></span>
