<div class="post-text" itemprop="text">
<p>I have made a website using the python web framework django.  In my code, I have created a django form and displayed it on home.html.  The django form gets a string value from the user, and that string value is used as a parameter in 6 functions.  After the 6 functions have finished calculating there results, the results are displayed on home.html.  </p>
<p>Everything works just as intended, but it is very slow.  The slow code looks something like this.</p>
<pre><code>def home(request):
    form = WebForm(request.POST or None)
    context = {
        "form" : form,
    }

    if form.is_valid():
        instance = form.save(commit=False)
        string_value = form.cleaned_data.get("string_value")
        if not string_value:
            string_value = "no string value was entered"
        instance.string_value = string_value
        instance.save()

        # This is where I use the string value as a parameter in my functions

        my_func1(search)
        my_func2(search)
        my_func3(search)
        my_func4(search)
        my_func5(search)
        my_func6(search)

        # Each function in the previous 6 functions corresponds to a website.  Each function finds the first 14 images on its particular website
        # that correlate to the string value that the user submitted, and appends it to a list (my lists are img1, img2, ..., img6).
        # The below code is just setting the first 14 elements of each list in a dictionary to be used on home.html
        conf = {"form" : form}
        con1 = dict(zip_longest(('img1','img2','img3','img4','img5','img6','img7','img8','img9','img10','img11','img12','img13','img14'), img1[:14]))
        con21 = dict(zip_longest(('img21','img22','img23','img24','img25','img26','img27','img28','img29','img210','img211','img212','img213','img214'), img2[:14]))
        con31 = dict(zip_longest(('img31','img32','img33','img34','img35','img36','img37','img38','img39','img310','img311','img312','img313','img314'), img3[:14]))
        con41 = dict(zip_longest(('img41','img42','img43','img44','img45','img46','img47','img48','img49','img410','img411','img412','img413','img414'), img4[:14]))
        con51 = dict(zip_longest(('img51','img52','img53','img54','img55','img56','img57','img58','img59','img510','img511','img512','img513','img514'), img5[:14]))
        con61 = dict(zip_longest(('img61','img62','img63','img64','img65','img66','img67','img68','img69','img610','img611','img612','img613','img614'), img6[:14]))

        # Now I am combining all of the above dictionaries in to one dictionary
        context = dict(list(conf.items()) + list(con1.items()) + list(con21.items()) + list(con31.items()) + list(con41.items()) + list(con51.items()) + list(con61.items()))

    return render(request, "home.html", context)  
</code></pre>
<p>To speed the process, I used multiprocessing.  This actually did speed up the process by a lot, and I know this because I am printing the data on the terminal as it is being calculated (the data prints much quicker).  For multiprocessing, I essentially removed the </p>
<pre><code>    my_func1(search)
    my_func2(search)
    my_func3(search)
    my_func4(search)
    my_func5(search)
    my_func6(search)
</code></pre>
<p>and replaced it with </p>
<pre><code>p = Process(target=my_func1, args=(search))
p.start()
p2 = Process(target=my_func2, args=(search))
p2.start()
p3 = Process(target=my_func3, args=(search))
p3.start()
p4 = Process(target=my_func4, args=(search))
p4.start()
p5 = Process(target=my_func5, args=(search))
p5.start()
p6 = Process(target=my_func6, args=(search))
p6.start()

p.join()
p2.join()
p3.join()
p4.join()
p5.join()
p6.join()
</code></pre>
<p>However, this method does not display any data on home.html.  To elaborate, when the user submits their string value, the result that is displayed is the word None.  This suggests to me that the lists <code>img1, img2, ..., img6</code> are empty, but I know that the multiprocessing code to call the 6 functions did work, so I am confused. </p>
<p>Additionally, the code on my home.html page looks something like this</p>
<pre><code># In home.html (I am going to add pseudo code to save me some time)

Code to display the form is here

 all of my image elements are displayed like this
 &lt;h1&gt;{{ img1 }}&lt;/h1&gt;
</code></pre>
<p>Can someone please help me with this, I would immensely appreciate it.  Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you seem to not be getting data back is that you're spawning the child processes to perform the tasks, but the children do not inform the parent what results they've produced.</p>
<p>You should consider <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow">this documentation sample</a> about sharing state between processes and adapt it to share the results produced in the children instead.</p>
<p>Quoting the code snippet from the documentation link above:</p>
<pre><code>from multiprocessing import Process, Value, Array

def f(n, a):
    n.value = 3.1415927
    for i in range(len(a)):
        a[i] = -a[i]

if __name__ == '__main__':
    num = Value('d', 0.0)
    arr = Array('i', range(10))

    p = Process(target=f, args=(num, arr))
    p.start()
    p.join()

    print(num.value)
    print(arr[:])
</code></pre>
<p>Note that this is not really a django-specific detail. This is simply about inter-process communication and should be useful in general.</p>
<p><strong>UPDATE</strong></p>
<p>This update is to account for some of your questions in the comments section below.</p>
<blockquote>
<p>I don't understand what the phrase that starts with if name == 'main'
  is doing.</p>
</blockquote>
<p>The <code>if __name__ == '__main__'</code> is not an assignment, it's a comparison (notice the double == instead of a single =) used to protect against unintended code execution. Whenever a Python module is launched directly by you, its name will be <code>'__main__'</code> and will run as intended, but when it's imported from a different module (e.g. using <code>pydoc3</code>), then the <code>__name__</code> will be different and the check will fail, preventing the program from actually running, which is what you'd want.</p>
<blockquote>
<p>It is assigning <code>num</code> as a double with an initial value of 0.0, and <code>arr</code> as an array with integer elements that are <code>range(10)</code>.</p>
</blockquote>
<p>The documentation is your friend:</p>
<ul>
<li><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Array" rel="nofollow">multiprocessing.Array</a></li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value" rel="nofollow">multiprocessing.Value</a></li>
</ul>
<p>It's there to answer these kinds of questions :)</p>
<blockquote>
<p>Also, how would I initiate an array with string 14 string elements?
  Would this work <code>arr = Array('string', len(14))</code>?</p>
</blockquote>
<p>This won't work because the<code>len</code> function expects a sequence or collection, whereas you're sending a scalar value (i.e. 14).</p>
<p>I'd recommend you write a short test programs to see how they work. I think learning is more effective that way. For example:</p>
<pre><code>&gt;&gt;&gt; from multiprocessing import Array
&gt;&gt;&gt; a = Array('i', 3)    # Array of integers with 3 elements
&gt;&gt;&gt; for i in a: print(i)
...
0
0
0
&gt;&gt;&gt;
</code></pre>
<p><strong>PS:</strong> I've removed my previous comments, which were the basis for this update.</p>
</div>
<span class="comment-copy">I read the documentation, but I am confused.  I don't understand what the phrase that starts with if <b>name</b> == '<b>main</b>' is doing.  Is it assigning num as a double value with one decimal place, and arr as an array with 10 integer elements?</span>
<span class="comment-copy">Actually, I think I know what it is doing, but tell me if I am wrong.  It is assigning num as a double with an initial value of 0.0, and arr as an array with integer elements that are range(10).</span>
<span class="comment-copy">Also, how would I initiate an array with string 14 string elements?  Would this work arr = Array('string', len(14))?</span>
<span class="comment-copy">@SagwaTheCat: I've updated the answer to your questions. Please don't forget to select it as the solution if it has been helpful. It's helpful to everyone else when questions have accepted answers.</span>
