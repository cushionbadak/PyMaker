<div class="post-text" itemprop="text">
<p>Would it be possible to create a python module that lazily downloads and installs submodules as needed? I've worked with <a href="https://stackoverflow.com/questions/1462986/lazy-module-variables-can-it-be-done">"subclassed" modules that mimic real modules</a>, but I've never tried to do so with downloads involved. Is there a guaranteed directory that I can download source code and data to, that the module would then be able to use on subsequent runs?</p>
<p>To make this more concrete, here is the ideal behavior:</p>
<ul>
<li>User runs <code>pip install magic_module</code> and the lightweight <code>magic_module</code> is installed to their system.</li>
<li>User runs the code <code>import magic_module.alpha</code></li>
<li>The code goes to a predetermine URL, is told that there is an "<code>alpha</code>" subpackage, and is then given the URLs of <code>alpha.py</code> and <code>alpha.csv</code> files.</li>
<li>The system downloads these files to <em>somewhere</em> that it knows about, and then loads the <code>alpha</code> module.</li>
<li>On subsequent runs, the user is able to take advantage of the downloaded files to skip the server trip.</li>
<li>At some point down the road, the user could run a <code>import magic_module.alpha ; alpha._upgrade()</code> function from the command line to clear the cache and get the latest version.</li>
</ul>
<p>Is this possible? Is this reasonable? What kinds of problems will I run into with permissions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Doable, certainly. The core feature will probably be <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow">import hooks</a>. The relevant module would be <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow">importlib</a> in python 3.</p>
<blockquote>
<p>Extending the import mechanism is needed when you want to load modules that are stored in a non-standard way. Examples include [...] modules that are loaded from a database over a network.</p>
</blockquote>
<p>Convenient, probably not. The import machinery is one of the parts of python that has seen several changes over releases. It's undergoing a full refactoring right now, with most of the existing things being deprecated.</p>
<p>Reasonable, well it's up to you. Here are some caveats I can think of:</p>
<ul>
<li>Tricky to get right, especially if you have to support several python versions.</li>
<li>What about error handling? Should application be prepared for <code>import</code> to fail in normal circumstances? Should they degrade gracefully? Or just crash and spew a traceback?</li>
<li>Security? Basically you're downloading code from someplace, how do you ensure the connection is not being hijacked?</li>
<li>How about versionning? If you update some of the remote modules, how can make the application download the correct version?</li>
<li>Dependencies? Pushing of security updates? Permissions management?</li>
</ul>
<p>Summing it up, you'll have to solve most of the issues of a package manager, along with securing downloads and permissions issues of course. All those issues are tricky to begin with, easy to get wrong with dire consequences.</p>
<p>So with all that in mind, it really comes down to how much resources you deem worth investing into that, and what value that adds over a regular use of readily available tools such as <code>pip</code>.</p>
<p>(the permission question cannot really be answered until you come up with a design for your package manager)</p>
</div>
