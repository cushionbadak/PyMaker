<div class="post-text" itemprop="text">
<p>Server-side code. Opens a file, reads a bit of the file, sends that bit, till it is finished</p>
<pre><code>f = open("{}".format(filename), "rb")
l = f.read(1024)
while (l):
    print("Sending...")
    client.send(l)
    l = f.read(1024)
print("Finished sending")   
f.close()
client.shutdown(socket.SHUT_WR)
client.close()
</code></pre>
<p>Client-side code, creates the file receives a bit of it, writes it to the file until it is finished.</p>
<pre><code>f = open("{}".format(filename), "ab+")
l = client.recv(1024)
while (l):
    print("Receiving...")
    f.write(l)
    l = client.recv(1024)
f.close()
print("Transmission completed")
</code></pre>
<ol>
<li>I know that I have to use <code>socket.shutdown(socket.SHUT_WR)</code> to notify the reciever that the file has finished, but further sends are disallowed. Is there a way to bypass that? Maybe use another command like <code>.shutdown()</code>? I need to keep the connection for further sends/receives.</li>
<li>When dealing with complex files, somehow I receive more than I should. I am sure than the client writes irrelevant previous data to the file, received with <code>client.recv(1024)</code>. Is there any way to "throw away", or empty the data safely  before the file's data arrive?  </li>
</ol>
<p>.jpg file: <a href="http://i.stack.imgur.com/kjXBZ.png" rel="nofollow">http://i.stack.imgur.com/kjXBZ.png</a></p>
<p>.txt file: <a href="http://i.imgur.com/fVNfx2R.png" rel="nofollow">http://i.imgur.com/fVNfx2R.png</a></p>
<p>(I don't have enough reputation to post images directly, sorry for that.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I can see two intentions behind the question. First, learning the things; second, implementing something that is cool and that works (usefull). Part of the learning process is getting the passive knowledge via reading the documentation -- this is for <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">opening the file</a>, and using the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow"><code>with</code></a> construct.</p>
<p>However, part of the learning is also learning <em>a bigger picture</em>, and learning how others (more capable) solve the things. This can be done via reading source codes of the existing solution, and trying to understand the code.</p>
<p>I suggest to get the <code>paramiko</code> module (<a href="https://github.com/paramiko/paramiko.git" rel="nofollow">https://github.com/paramiko/paramiko.git</a>), and to study <code>sftp_client.py</code>, <code>sftp_server.py</code>, and the <code>demos/</code>.</p>
<p>True, it is much more complex than the few lines that you tried, but you may learn a lot, and the knowledge of how to use paramiko may be valuable for you in future. Also, you will find more questions to focus learning to. ;)</p>
</div>
<span class="comment-copy">maybe it's because of option "ab+". "Ð°" is for appending, not for creating new clear file and write to it as "w"</span>
<span class="comment-copy">Speaking Code is right. You should use <code>'wb'</code> (w for write, b for binary mode).</span>
