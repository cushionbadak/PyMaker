<div class="post-text" itemprop="text">
<p>Is there a good way to do the following?</p>
<p>I wrote a simple console app to upload and download files from an FTP server using the ftplib.</p>
<p>Each time some data chunks are downloaded, I want to update a text progress bar, even if it's just a number.</p>
<p>But I don't want to erase all the text that's been printed to the console. (Doing a "clear" and then printing the updated percentage.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an aggregate of many of the answers below that I use regularly. </p>
<pre><code># Print iterations progress
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '█'):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')
    # Print New Line on Complete
    if iteration == total: 
        print()
</code></pre>
<p>Sample Usage:</p>
<pre><code>from time import sleep

# A List of Items
items = list(range(0, 57))
l = len(items)

# Initial call to print 0% progress
printProgressBar(0, l, prefix = 'Progress:', suffix = 'Complete', length = 50)
for i, item in enumerate(items):
    # Do stuff...
    sleep(0.1)
    # Update Progress Bar
    printProgressBar(i + 1, l, prefix = 'Progress:', suffix = 'Complete', length = 50)
</code></pre>
<p>Sample Output:</p>
<pre class="lang-none prettyprint-override"><code>Progress: |█████████████████████████████████████████████-----| 90.0% Complete
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Writing '\r' will move the cursor back to the beginning of the line.</p>
<p>This displays a percentage counter:</p>
<pre><code>import time
import sys

for i in range(100):
    time.sleep(1)
    sys.stdout.write("\r%d%%" % i)
    sys.stdout.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/tqdm/tqdm" rel="noreferrer">tqdm: add a progress meter to your loops in a second</a>:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; from tqdm import tqdm
&gt;&gt;&gt; for i in tqdm(range(100)):
...     time.sleep(1)
... 
|###-------| 35/100  35% [elapsed: 00:35 left: 01:05,  1.00 iters/sec]
</code></pre>
<p><a href="https://i.stack.imgur.com/SQB5z.gif" rel="noreferrer"><img alt="tqdm repl session" src="https://i.stack.imgur.com/SQB5z.gif"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Write a <code>\r</code> to the console. That is a <a href="http://en.wikipedia.org/wiki/Carriage_return" rel="noreferrer">"carriage return"</a> which causes all text after it to be echoed at the beginning of the line. Something like:</p>
<pre><code>def update_progress(progress):
    print '\r[{0}] {1}%'.format('#'*(progress/10), progress)
</code></pre>
<p>which will give you something like: <code>[ ########## ] 100%</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It is less than 10 lines of code. </p>
<p>The gist here: <a href="https://gist.github.com/vladignatyev/06860ec2040cb497f0f3" rel="noreferrer">https://gist.github.com/vladignatyev/06860ec2040cb497f0f3</a></p>
<pre><code>import sys


def progress(count, total, suffix=''):
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))

    percents = round(100.0 * count / float(total), 1)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)

    sys.stdout.write('[%s] %s%s ...%s\r' % (bar, percents, '%', suffix))
    sys.stdout.flush()  # As suggested by Rom Ruben
</code></pre>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/jkv6h.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Try the <a href="http://click.pocoo.org/4/" rel="noreferrer">click</a> library written by the Mozart of Python, Armin Ronacher.</p>
<pre><code>$ pip install click # both 2 and 3 compatible
</code></pre>
<p>To create a simple progress bar:</p>
<pre><code>import click

with click.progressbar(range(1000000)) as bar:
    for i in bar:
        pass 
</code></pre>
<p>This is what it looks like:</p>
<pre><code># [###-------------------------------]    9%  00:01:14
</code></pre>
<p>Customize to your hearts content:</p>
<pre><code>import click, sys

with click.progressbar(range(100000), file=sys.stderr, show_pos=True, width=70, bar_template='(_(_)=%(bar)sD(_(_| %(info)s', fill_char='=', empty_char=' ') as bar:
    for i in bar:
        pass
</code></pre>
<p>Custom look:</p>
<pre><code>(_(_)===================================D(_(_| 100000/100000 00:00:02
</code></pre>
<p>There are even more options, see the <a href="http://click.pocoo.org/4/api/" rel="noreferrer">API docs</a>:</p>
<pre><code> click.progressbar(iterable=None, length=None, label=None, show_eta=True, show_percent=None, show_pos=False, item_show_func=None, fill_char='#', empty_char='-', bar_template='%(label)s [%(bar)s] %(info)s', info_sep=' ', width=36, file=None, color=None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I realize I'm late to the game, but here's a slightly Yum-style (Red Hat) one I wrote (not going for 100% accuracy here, but if you're using a progress bar for that level of accuracy, then you're WRONG anyway):</p>
<pre><code>import sys

def cli_progress_test(end_val, bar_length=20):
    for i in xrange(0, end_val):
        percent = float(i) / end_val
        hashes = '#' * int(round(percent * bar_length))
        spaces = ' ' * (bar_length - len(hashes))
        sys.stdout.write("\rPercent: [{0}] {1}%".format(hashes + spaces, int(round(percent * 100))))
        sys.stdout.flush()
</code></pre>
<p>Should produce something looking like this:</p>
<pre><code>Percent: [##############      ] 69%
</code></pre>
<p>... where the brackets stay stationary and only the hashes increase.</p>
<p>This might work better as a decorator. For another day...</p>
</div>
<div class="post-text" itemprop="text">
<p>Check this library: <a href="https://github.com/kennethreitz/clint" rel="noreferrer">clint</a></p>
<p>it has a lot of features including a progress bar:  </p>
<pre><code>from time import sleep  
from random import random  
from clint.textui import progress  
if __name__ == '__main__':
    for i in progress.bar(range(100)):
        sleep(random() * 0.2)

    for i in progress.dots(range(100)):
        sleep(random() * 0.2)
</code></pre>
<p>this <a href="http://www.nicosphere.net/clint-command-line-library-for-python/" rel="noreferrer">link</a> provides a quick overview of its features</p>
</div>
<div class="post-text" itemprop="text">
<p><s>Here's a nice example of a progressbar written in Python: <a href="http://nadiana.com/animated-terminal-progress-bar-in-python" rel="nofollow noreferrer">http://nadiana.com/animated-terminal-progress-bar-in-python</a></s></p>
<p>But if you want to write it yourself. You could use the <code>curses</code> module to make things easier :)</p>
<p>[edit]
Perhaps easier is not the word for curses. But if you want to create a full-blown cui than curses takes care of a lot of stuff for you.</p>
<p>[edit]
Since the old link is dead I have put up my own version of a Python Progressbar, get it here: <a href="https://github.com/WoLpH/python-progressbar" rel="nofollow noreferrer">https://github.com/WoLpH/python-progressbar</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time,sys

for i in range(100+1):
    time.sleep(0.1)
    sys.stdout.write(('='*i)+(''*(100-i))+("\r [ %d"%i+"% ] "))
    sys.stdout.flush()
</code></pre>
<p>output</p>
<p>[ 29% ] ===================</p>
</div>
<div class="post-text" itemprop="text">
<p>and, just to add to the pile, here's an object you can use</p>
<pre><code>import sys

class ProgressBar(object):
    DEFAULT_BAR_LENGTH = 65
    DEFAULT_CHAR_ON  = '='
    DEFAULT_CHAR_OFF = ' '

    def __init__(self, end, start=0):
        self.end    = end
        self.start  = start
        self._barLength = self.__class__.DEFAULT_BAR_LENGTH

        self.setLevel(self.start)
        self._plotted = False

    def setLevel(self, level):
        self._level = level
        if level &lt; self.start:  self._level = self.start
        if level &gt; self.end:    self._level = self.end

        self._ratio = float(self._level - self.start) / float(self.end - self.start)
        self._levelChars = int(self._ratio * self._barLength)

    def plotProgress(self):
        sys.stdout.write("\r  %3i%% [%s%s]" %(
            int(self._ratio * 100.0),
            self.__class__.DEFAULT_CHAR_ON  * int(self._levelChars),
            self.__class__.DEFAULT_CHAR_OFF * int(self._barLength - self._levelChars),
        ))
        sys.stdout.flush()
        self._plotted = True

    def setAndPlot(self, level):
        oldChars = self._levelChars
        self.setLevel(level)
        if (not self._plotted) or (oldChars != self._levelChars):
            self.plotProgress()

    def __add__(self, other):
        assert type(other) in [float, int], "can only add a number"
        self.setAndPlot(self._level + other)
        return self
    def __sub__(self, other):
        return self.__add__(-other)
    def __iadd__(self, other):
        return self.__add__(other)
    def __isub__(self, other):
        return self.__add__(-other)

    def __del__(self):
        sys.stdout.write("\n")

if __name__ == "__main__":
    import time
    count = 150
    print "starting things:"

    pb = ProgressBar(count)

    #pb.plotProgress()
    for i in range(0, count):
        pb += 1
        #pb.setAndPlot(i + 1)
        time.sleep(0.01)
    del pb

    print "done"
</code></pre>
<p>results in:</p>
<pre><code>starting things:
  100% [=================================================================]
done
</code></pre>
<p>This would most commonly be considered to be "over the top", but it's handy when you're using it a lot</p>
</div>
<div class="post-text" itemprop="text">
<p>Run this <em>at the Python command line</em> (<strong>not</strong> in any IDE or development environment):</p>
<pre><code>&gt;&gt;&gt; import threading
&gt;&gt;&gt; for i in range(50+1):
...   threading._sleep(0.5)
...   print "\r%3d" % i, ('='*i)+('-'*(50-i)),
</code></pre>
<p>Works fine on my Windows system.</p>
</div>
<div class="post-text" itemprop="text">
<p>Install <code>tqdm</code>.(<code>pip install tqdm</code>)
and use it as follows:
</p>
<pre class="lang-py prettyprint-override"><code>import time
from tqdm import tqdm
for i in tqdm(range(1000)):
    time.sleep(0.01)
</code></pre>
<p>That's a 10 seconds progress bar that'll output something like this:</p>
<pre class="lang-py prettyprint-override"><code>47%|██████████████████▊                     | 470/1000 [00:04&lt;00:05, 98.61it/s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><a href="http://code.activestate.com/recipes/168639-progress-bar-class/" rel="nofollow noreferrer">http://code.activestate.com/recipes/168639-progress-bar-class/</a> (2002)</li>
<li><a href="http://code.activestate.com/recipes/299207-console-text-progress-indicator-class/" rel="nofollow noreferrer">http://code.activestate.com/recipes/299207-console-text-progress-indicator-class/</a> (2004)</li>
<li><a href="http://pypi.python.org/pypi/progressbar" rel="nofollow noreferrer">http://pypi.python.org/pypi/progressbar</a> (2006)</li>
</ul>
<p>And a lot of tutorials waiting to be googled.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am using <a href="https://github.com/reddit/reddit/blob/master/r2/r2/lib/utils/utils.py#L1380" rel="nofollow">progress from reddit</a>. I like it because it can print progress for every item in one line, and it shouldn't erase printouts from the program.</p>
<p>Edit: fixed link</p>
</div>
<div class="post-text" itemprop="text">
<p>based on the above answers and other similar questions about CLI progress bar, I think I got a general common answer to all of them. Check it at <a href="https://stackoverflow.com/a/15860757/2254146">https://stackoverflow.com/a/15860757/2254146</a></p>
<p>In summary, the code is this:</p>
<pre><code>import time, sys

# update_progress() : Displays or updates a console progress bar
## Accepts a float between 0 and 1. Any int will be converted to a float.
## A value under 0 represents a 'halt'.
## A value at 1 or bigger represents 100%
def update_progress(progress):
    barLength = 10 # Modify this to change the length of the progress bar
    status = ""
    if isinstance(progress, int):
        progress = float(progress)
    if not isinstance(progress, float):
        progress = 0
        status = "error: progress var must be float\r\n"
    if progress &lt; 0:
        progress = 0
        status = "Halt...\r\n"
    if progress &gt;= 1:
        progress = 1
        status = "Done...\r\n"
    block = int(round(barLength*progress))
    text = "\rPercent: [{0}] {1}% {2}".format( "#"*block + "-"*(barLength-block), progress*100, status)
    sys.stdout.write(text)
    sys.stdout.flush()
</code></pre>
<p>Looks like</p>
<p>Percent: [##########] 99.0%</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend using tqdm - <a href="https://pypi.python.org/pypi/tqdm" rel="nofollow">https://pypi.python.org/pypi/tqdm</a> - which makes it simple to turn any iterable or process into a progress bar, and handles all messing about with terminals needed.</p>
<p>From the documentation: "tqdm can easily support callbacks/hooks and manual updates. Here’s an example with urllib"</p>
<pre><code>import urllib
from tqdm import tqdm

def my_hook(t):
  """
  Wraps tqdm instance. Don't forget to close() or __exit__()
  the tqdm instance once you're done with it (easiest using `with` syntax).

  Example
  -------

  &gt;&gt;&gt; with tqdm(...) as t:
  ...     reporthook = my_hook(t)
  ...     urllib.urlretrieve(..., reporthook=reporthook)

  """
  last_b = [0]

  def inner(b=1, bsize=1, tsize=None):
    """
    b  : int, optional
        Number of blocks just transferred [default: 1].
    bsize  : int, optional
        Size of each block (in tqdm units) [default: 1].
    tsize  : int, optional
        Total size (in tqdm units). If [default: None] remains unchanged.
    """
    if tsize is not None:
        t.total = tsize
    t.update((b - last_b[0]) * bsize)
    last_b[0] = b
  return inner

eg_link = 'http://www.doc.ic.ac.uk/~cod11/matryoshka.zip'
with tqdm(unit='B', unit_scale=True, miniters=1,
          desc=eg_link.split('/')[-1]) as t:  # all optional kwargs
    urllib.urlretrieve(eg_link, filename='/dev/null',
                       reporthook=my_hook(t), data=None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to install this package:  <code>pip install progressbar2</code> :</p>
<pre><code>import time
import progressbar

for i in progressbar.progressbar(range(100)):
    time.sleep(0.02)
</code></pre>
<p>progresssbar github: <a href="https://github.com/WoLpH/python-progressbar" rel="nofollow noreferrer">https://github.com/WoLpH/python-progressbar</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
def progresssbar():
         for i in range(100):
            time.sleep(1)
            sys.stdout.write("%i\r" % i)

progressbar()
</code></pre>
<p>NOTE: if you run this in interactive interepter you get extra numbers printed out</p>
</div>
<div class="post-text" itemprop="text">
<p>lol i just wrote a whole thingy for this
heres the code keep in mind you cant use unicode when doing block ascii i use cp437</p>
<pre><code>import os
import time
def load(left_side, right_side, length, time):
    x = 0
    y = ""
    print "\r"
    while x &lt; length:
        space = length - len(y)
        space = " " * space
        z = left + y + space + right
        print "\r", z,
        y += "█"
        time.sleep(time)
        x += 1
    cls()
</code></pre>
<p>and you call it like so</p>
<pre><code>print "loading something awesome"
load("|", "|", 10, .01)
</code></pre>
<p>so it looks like this</p>
<pre><code>loading something awesome
|█████     |
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With the great advices above I work out the progress bar. </p>
<p>However I would like to point out some shortcomings </p>
<ol>
<li><p>Every time the progress bar is flushed, it will start on a new line  </p>
<pre><code>print('\r[{0}]{1}%'.format('#' * progress* 10, progress))  
</code></pre>
<p>like this:<br/>
[] 0%<br/>
[#]10%<br/>
[##]20%<br/>
[###]30%  </p></li>
</ol>
<p>2.The square bracket ']' and the percent number on the right side shift right as the '###' get longer.<br/>
3. An error will occur if the expression 'progress / 10' can not return an integer.  </p>
<p>And the following code will fix the problem above.  </p>
<pre><code>def update_progress(progress, total):  
    print('\r[{0:10}]{1:&gt;2}%'.format('#' * int(progress * 10 /total), progress), end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very simple solution is to put this code into your loop:</p>
<p>Put this in the body (i.e. top) of your file:</p>
<pre><code>import sys
</code></pre>
<p>Put this in the body of your loop:</p>
<pre><code>sys.stdout.write("-") # prints a dash for each iteration of loop
sys.stdout.flush() # ensures bar is displayed incrementally
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Code for python terminal progress bar</p>
<pre><code>import sys
import time

max_length = 5
at_length = max_length
empty = "-"
used = "%"

bar = empty * max_length

for i in range(0, max_length):
    at_length -= 1

    #setting empty and full spots
    bar = used * i
    bar = bar+empty * at_length

    #\r is carriage return(sets cursor position in terminal to start of line)
    #\0 character escape

    sys.stdout.write("[{}]\0\r".format(bar))
    sys.stdout.flush()

    #do your stuff here instead of time.sleep
    time.sleep(1)

sys.stdout.write("\n")
sys.stdout.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Putting together some of the ideas I found here, and adding estimated time left:</p>
<pre><code>import datetime, sys

start = datetime.datetime.now()

def print_progress_bar (iteration, total):

    process_duration_samples = []
    average_samples = 5

    end = datetime.datetime.now()

    process_duration = end - start

    if len(process_duration_samples) == 0:
        process_duration_samples = [process_duration] * average_samples

    process_duration_samples = process_duration_samples[1:average_samples-1] + [process_duration]
    average_process_duration = sum(process_duration_samples, datetime.timedelta()) / len(process_duration_samples)
    remaining_steps = total - iteration
    remaining_time_estimation = remaining_steps * average_process_duration

    bars_string = int(float(iteration) / float(total) * 20.)
    sys.stdout.write(
        "\r[%-20s] %d%% (%s/%s) Estimated time left: %s" % (
            '='*bars_string, float(iteration) / float(total) * 100,
            iteration,
            total,
            remaining_time_estimation
        ) 
    )
    sys.stdout.flush()
    if iteration + 1 == total:
        print 


# Sample usage

for i in range(0,300):
    print_progress_bar(i, 300)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well here is code that works and I tested it before posting:</p>
<pre><code>import sys
def prg(prog, fillchar, emptchar):
    fillt = 0
    emptt = 20
    if prog &lt; 100 and prog &gt; 0:
        prog2 = prog/5
        fillt = fillt + prog2
        emptt = emptt - prog2
        sys.stdout.write("\r[" + str(fillchar)*fillt + str(emptchar)*emptt + "]" + str(prog) + "%")
        sys.stdout.flush()
    elif prog &gt;= 100:
        prog = 100
        prog2 = prog/5
        fillt = fillt + prog2
        emptt = emptt - prog2
        sys.stdout.write("\r[" + str(fillchar)*fillt + str(emptchar)*emptt + "]" + str(prog) + "%" + "\nDone!")
        sys.stdout.flush()
    elif prog &lt; 0:
        prog = 0
        prog2 = prog/5
        fillt = fillt + prog2
        emptt = emptt - prog2
        sys.stdout.write("\r[" + str(fillchar)*fillt + str(emptchar)*emptt + "]" + str(prog) + "%" + "\nHalted!")
        sys.stdout.flush()
</code></pre>
<p>Pros:</p>
<ul>
<li>20 character bar (1 character for every 5 (number wise))</li>
<li>Custom fill characters</li>
<li>Custom empty characters</li>
<li>Halt (any number below 0)</li>
<li>Done (100 and any number above 100)</li>
<li>Progress count (0-100 (below and above used for special functions))</li>
<li>Percentage number next to bar, and it's a single line</li>
</ul>
<p>Cons:</p>
<ul>
<li>Supports integers only (It can be modified to support them though, by making the division an integer division, so just change <code>prog2 = prog/5</code> to <code>prog2 = int(prog/5)</code>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here's my Python 3 solution:</p>
<pre><code>import time
for i in range(100):
    time.sleep(1)
    s = "{}% Complete".format(i)
    print(s,end=len(s) * '\b')
</code></pre>
<p>'\b' is a backslash, for each character in your string.
This does not work within the Windows cmd window.</p>
</div>
<div class="post-text" itemprop="text">
<p>function from Greenstick for 2.7:</p>
<pre><code>def printProgressBar (iteration, total, prefix = '', suffix = '',decimals = 1, length = 100, fill = '#'):

percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
filledLength = int(length * iteration // total)
bar = fill * filledLength + '-' * (length - filledLength)
print'\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix),
sys.stdout.flush()
# Print New Line on Complete                                                                                                                                                                                                              
if iteration == total:
    print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The python module <strong>progressbar</strong> is a nice choice.
Here is my typical code:  </p>
<pre><code>import time
import progressbar

widgets = [
    ' ', progressbar.Percentage(),
    ' ', progressbar.SimpleProgress(format='(%(value_s)s of %(max_value_s)s)'),
    ' ', progressbar.Bar('&gt;', fill='.'),
    ' ', progressbar.ETA(format_finished='- %(seconds)s  -', format='ETA: %(seconds)s', ),
    ' - ', progressbar.DynamicMessage('loss'),
    ' - ', progressbar.DynamicMessage('error'),
    '                          '
]

bar = progressbar.ProgressBar(redirect_stdout=True, widgets=widgets)
bar.start(100)
for i in range(100):
    time.sleep(0.1)
    bar.update(i + 1, loss=i / 100., error=i)
bar.finish()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pypi.python.org/pypi/progressbar2/3.30.2" rel="nofollow noreferrer">https://pypi.python.org/pypi/progressbar2/3.30.2</a></p>
<p><strong>Progressbar2</strong> is a good library for ascii base progressbar for the command line
    import time
    import progressbar</p>
<pre><code>bar = progressbar.ProgressBar()
for i in bar(range(100)):
    time.sleep(0.02)
bar.finish()
</code></pre>
<p><a href="https://pypi.python.org/pypi/tqdm" rel="nofollow noreferrer">https://pypi.python.org/pypi/tqdm</a></p>
<p><strong>tqdm</strong> is a alternative of progressbar2 and i think it use in pip3 but i am not sure of that</p>
<pre><code>from tqdm import tqdm
for i in tqdm(range(10000)):
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i wrote a simple progressbar:</p>
<pre><code>def bar(total, current, length=10, prefix="", filler="#", space=" ", oncomp="", border="[]", suffix=""):
    if len(border) != 2:
        print("parameter 'border' must include exactly 2 symbols!")
        return None

    print(prefix + border[0] + (filler * int(current / total * length) +
                                      (space * (length - int(current / total * length)))) + border[1], suffix, "\r", end="")
    if total == current:
        if oncomp:
            print(prefix + border[0] + space * int(((length - len(oncomp)) / 2)) +
                  oncomp + space * int(((length - len(oncomp)) / 2)) + border[1], suffix)
        if not oncomp:
            print(prefix + border[0] + (filler * int(current / total * length) +
                                        (space * (length - int(current / total * length)))) + border[1], suffix)
</code></pre>
<p>as you can see, it have: length of bar, prefix and suffix, filler, space, text in bar on 100%(oncomp) and borders</p>
<p>here an example:</p>
<pre><code>from time import sleep, time
start_time = time()
for i in range(10):
    pref = str((i+1) * 10) + "% "
    complete_text = "done in %s sec" % str(round(time() - start_time))
    sleep(1)
    bar(10, i + 1, length=20, prefix=pref, oncomp=complete_text)
</code></pre>
<p>out in progress:</p>
<pre><code>30% [######              ]
</code></pre>
<p>out on complete:</p>
<pre><code>100% [   done in 9 sec   ] 
</code></pre>
</div>
<span class="comment-copy">you could also just use a GUI (which will save you more trouble in the end if you start doing anything advance in the app) it isn't 1960 anymore ;)</span>
<span class="comment-copy">Hmm, look like a duplicate of this question asked yesterday: <a href="http://stackoverflow.com/questions/3160699/python-progress-bar/3162864" title="python progress bar">stackoverflow.com/questions/3160699/python-progress-bar/3162864</a> So, you should use fish <a href="http://pypi.python.org/pypi/fish/" rel="nofollow noreferrer">pypi.python.org/pypi/fish</a></span>
<span class="comment-copy">"just use a GUI" misunderstands that GUIs are great in some situations (quick learning curve, ad-hoc exploratory or interactive or one-off activities) while command-line tools are great for others (expert users, composing ad-hoc applications on the fly to perform a carefully defined operation many times.)</span>
<span class="comment-copy">I voted to reopen. The question doesn't strike me as too broad.</span>
<span class="comment-copy">This snippet works great! I did encounter a couple minor issues so I made some  minor edits (PEP-8, default encoding for non-ascii character) and threw them in a gist here:  <a href="https://gist.github.com/aubricus/f91fb55dc6ba5557fbab06119420dd6a" rel="nofollow noreferrer">gist.github.com/aubricus/f91fb55dc6ba5557fbab06119420dd6a</a></span>
<span class="comment-copy">Worth noting that the UTF-8 declaration is not necessary unless your using Python 2 @Aubricus</span>
<span class="comment-copy">Yes. Good point! I updated the gist with a note.</span>
<span class="comment-copy">SyntaxError: Non-ASCII character '\xe2' on line 5, but no encoding declared</span>
<span class="comment-copy">@MattClimbs This is written for Python 3 which uses UTF-8 encoding by default. You can either change the default fill parameter of the function, which is a UTF-8 character, or use the UTF-8 declaration. See the gist in the comment above for an example of what a UTF-8 declaration should look like.</span>
<span class="comment-copy">Pasted that and ran. It prints to a new line each time. I want the number to be updated on the same line. :)</span>
<span class="comment-copy">@bobber205 : Edited, try <code>sys.stdout.write</code></span>
<span class="comment-copy">This example also produces an OBOB it ends loading at <code>99%</code></span>
<span class="comment-copy">@moose It stands for "Off by one bug"</span>
<span class="comment-copy">To add to what @IoannisFilippidis said, <code>print</code> also has a <code>flush</code> argument: <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#print</a></span>
<span class="comment-copy">Technically totally OK, visually the most intrusive answer I've ever seen on SO.</span>
<span class="comment-copy">What the python shell do you use?</span>
<span class="comment-copy">@xotonic the link says it is <a href="https://github.com/jonathanslenders/ptpython" rel="nofollow noreferrer">ptpython</a></span>
<span class="comment-copy">Do <code>\r</code> and then write the whole line out again.  Basically: <code>print("\rProgress: [{0:50s}] {1:.1f}%".format('#' * int(amtDone * 50), amtDone * 100))</code>, where <code>amtDone</code> is a float between 0 and 1.</span>
<span class="comment-copy">Better to use <code>sys.stdout.write</code> than <code>print</code>. With <code>print</code> I got newlines.</span>
<span class="comment-copy">append a comma <code>,</code> at the end of the <code>print</code> works for me.</span>
<span class="comment-copy">in python3 use print(...., end='') and you won't have any newlines</span>
<span class="comment-copy">Summarizing for Python3 former contribs: <code>print("\rProgress: [{0:50s}] {1:.1f}%".format('#' * int(workdone * 50), workdone*100), end="", flush=True)</code>, where <code>workdone</code> is a float between 0 and 1, e.g., <code>workdone = parsed_dirs/total_dirs</code></span>
<span class="comment-copy">adds "sys.stdout.flush()" to the end of function.</span>
<span class="comment-copy">for me it goes in a new line</span>
<span class="comment-copy">@GM what OS/platform do you use?</span>
<span class="comment-copy">I don't know why if I run it from spyder ide it doesn't work but if I run it from ipython console it works!</span>
<span class="comment-copy">Interesting choice of theme for the "custom look"</span>
<span class="comment-copy">Are those butts? ಠ_ಠ</span>
<span class="comment-copy">I did not intend it to represent anything. Seems like it represents a Rorshcach test though :/</span>
<span class="comment-copy">You got me at the Custom look... +1</span>
<span class="comment-copy">This answer cracks me up as much now as the first time I found it. And super helpful too :)</span>
<span class="comment-copy"><code>curses</code>? Easier? Hmmm....</span>
<span class="comment-copy">An excellent article, I was going to give a link to it but couldn't find in my bookmarks :)</span>
<span class="comment-copy">@Aviral Dasgupta: fair enough, easier might not be the right word here. It can save you a lot of work though, but it really depends on what you're looking for.</span>
<span class="comment-copy">Not looking for anything near this involved, but thanks anyway. :)</span>
<span class="comment-copy">Dead link, that's the price of not posting the link'ed content in your answer -__-</span>
<span class="comment-copy">Thanks for this. Small fix, the plotProgress method should use the line sys.stdout.flush() else the progress bar might not be drawn until the task has been completed (as occurs in the mac terminal).</span>
<span class="comment-copy">I love this!!! Fairly easy to use!!! Thankyou</span>
<span class="comment-copy">Your link is broken — the actual line in source code is 1274th, not the 1124th! So, the right link is this one: <a href="https://github.com/reddit/reddit/blob/master/r2/r2/lib/utils/utils.py#L1274" rel="nofollow noreferrer">github.com/reddit/reddit/blob/master/r2/r2/lib/utils/…</a></span>
<span class="comment-copy">This variant has the best design on my taste: it uses iterators and works possibly with any kind of measurable work, it shows elapsed time.</span>
