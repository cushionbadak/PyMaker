<div class="post-text" itemprop="text">
<p>I want to write a function to combine the numbers in the brackets adjacently.
For example, this string as the input </p>
<pre><code>(4)2(2)(2)(2)2(2)
</code></pre>
<p>I want the output is</p>
<pre><code>(4)2(6)2(2)
</code></pre>
<p>And for example, this string as the input </p>
<pre><code>(2)(2)2(2)(2)(2)24
</code></pre>
<p>I want the output is</p>
<pre><code>(4)2(6)24
</code></pre>
<p>Currently I wrote a function as follows:</p>
<pre><code>def Combine(i,accumulate,s):
    if s[i] == '(':
        accumulate += int(s[i+1])
        for i in range(i+3,len(s),3):
            if s[i] == '(':
                accumulate += int(s[i+1])
            else:
                print s[i-3] + s[i-2] + s[i-1]
                i += 3
                break
    else:
        print s[i]
        i += 1


Combine(0,0,'(4)2(2)(2)(2)2(2)')
</code></pre>
<p>And the output is only:</p>
<pre><code>(4)
</code></pre>
<p>I know maybe I need recursive method, but I don't know how to use it correctly.
Can anyone help me?</p>
<p>And I treat it as one-digit problem, and after the sum, I need to convert the number which is more than nine to a corresponding alphabet.</p>
<p>Following is the function:</p>
<pre><code>def toStr(n,base):
convertString = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
if n &lt; base:
  return convertString[n]
else:
  return toStr(n//base,base) + convertString[n%base]
</code></pre>
<p>So for example, the input(the base is 17):</p>
<blockquote>
<p>(16)</p>
</blockquote>
<p>The output needs to be:</p>
<blockquote>
<p>(G)</p>
</blockquote>
<p>Because I don't know how to modify the function</p>
<pre><code>re.sub(r'((\(\d\))+)', f, '(2)(2)(2)(2)(2)(2)(2)(2)')
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use regex for that:</p>
<pre><code>import re

def f(m):
    return '({0})'.format(sum(int(x) for x in m.group(1)[1::3]))

re.sub(r'((\(\d\))+)', f, '(4)2(2)(2)(2)2(2)') # (4)2(6)2(2)
</code></pre>
<p>The second argument of <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> can be a function, which you can use to compute the sum:</p>
<blockquote>
<p>If <em>repl</em> is a function, it is called for every non-overlapping occurrence
  of pattern. The function takes a single match object argument, and
  returns the replacement string.</p>
</blockquote>
<p><code>m.group(1)</code> is the matched string, <code>m.group(1)[1::3]</code> is the matched string without parentheses. </p>
<p><code>sum(int(x) for x in m.group(1)[1::3])</code> gets us the sum of all digits in the string.</p>
<p><code>'({0})'.format(sum(int(x) for x in m.group(1)[1::3]))</code> wraps the sum with parentheses (this is the replacement string).</p>
<hr/>
<p>Please note that the code above only works for one-digit numbers. If this is a problem, you'd use</p>
<pre><code>import re

def f(m):
    matched = m.group(1).strip('()').split(')(')
    return '({0})'.format(sum(int(x) for x in matched))

re.sub(r'((\(\d+\))+)', f, '(42)(2)2') # (44)2
</code></pre>
</div>
