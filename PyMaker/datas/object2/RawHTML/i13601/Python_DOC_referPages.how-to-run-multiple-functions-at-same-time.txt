<div class="post-text" itemprop="text">
<p>I have the following code</p>
<pre><code>my_func1()
my_func2()
my_func3()
my_func4()
my_func5()
</code></pre>
<p>Is it possible to calculate the data for the functions at the same time, instead of one after another?</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use multiprocessing or threading
threading in python doesnt actually run in parallel but allow you to run the functions at the same time (and python will iterate them, doing a few lines from each at a time)</p>
<p>with multiprocessing they WILL run in parallel (assuming you have multiple cpu cores) but they wont share memory.
here is a sample with multiprocessing</p>
<pre><code>from multiprocessing import Process
p = Process(target=myfunc1)
p.start()
p2 = Process(target=myfunc2)
p2.start()
# and so on
p.join()
p2.join()
# the join means wait untill it finished
</code></pre>
<p>you can read more about it here:</p>
<p><a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow">https://docs.python.org/2/library/multiprocessing.html</a></p>
<p><a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow">https://wiki.python.org/moin/GlobalInterpreterLock</a></p>
</div>
<div class="post-text" itemprop="text">
<p>My favorite way is using <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a> which is a standard Python library (version 3.2 and above or available as a separate package for Python 2.7):</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor

executors_list = []

with ThreadPoolExecutor(max_workers=5) as executor:
    executors_list.append(executor.submit(my_func1, arg1, arg2))
    executors_list.append(executor.submit(my_func2, arg1, arg2))
    executors_list.append(executor.submit(my_func3, arg1, arg2))

for x in executors_list:
    print(x.result())
</code></pre>
<p>This will run concurrently <code>my_func1</code>, <code>my_func2</code> and <code>my_func3</code>, passing <code>arg1</code> and <code>arg2</code> to each one. It will then print sequentially all the results as soon as they're available.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import thread


thread.start_new_thread(my_func1, ())
thread.start_new_thread(my_func2, ())
thread.start_new_thread(my_func3, ())
thread.start_new_thread(my_func4, ())
thread.start_new_thread(my_func5, ())
</code></pre>
<p>You can thread functions like that</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from multiprocessing import Process
from time import sleep

def f(name):
    print 'hello', name
    sleep(1)
</code></pre>
<p>Consider above:</p>
<p>if you were to do this:</p>
<pre><code>f('bob')  #start
f('alice') #wait until bob's done
f('jack') #wait until alice is done
f('cake') #wait until jack is done
f('paul') #wait until cake is done
print 'done'
</code></pre>
<p>you will end up waiting for 5 seconds, before you see <code>done</code></p>
<p>however, if you utilize multiprocessing, you can spawn multiple processes to run the function at the same time.</p>
<pre><code>Process(target=f, args=('bob',)).start() #start now
Process(target=f, args=('alice',)).start() #start now
Process(target=f, args=('jack',)).start() #start now
Process(target=f, args=('cake',)).start() #start now
Process(target=f, args=('paul',)).start() #start now
print 'done' #start now
</code></pre>
</div>
<span class="comment-copy">Are you <i>absolutely sure</i> that you <i>need</i> to do that?</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html</a></span>
<span class="comment-copy">at the same time? probably not, but you can multiprocess it, so one doesn't have to wait for another to finish</span>
<span class="comment-copy">What do the functions even do?</span>
<span class="comment-copy">they scrape things from the web</span>
<span class="comment-copy">This definitely calculates my data a lot faster, but for some reason I am not able to display my data when it is calculated, if you know what I mean.</span>
<span class="comment-copy">I think my displaying function is calling itself before the multiprocess is finished.  Is there a way to call my display function after the multiprocess functions are finished?</span>
<span class="comment-copy">yes, if you call it after you called p.join() on all your processes. join means it will wait untill it is finished, so you can wait untill they are all finish and only than call your display function</span>
<span class="comment-copy">does this work on python 3?</span>
<span class="comment-copy">Check out this answer for an indepth answer to that: <a href="http://stackoverflow.com/questions/6319268/what-happened-to-thread-start-new-thread-in-python-3" title="what happened to thread start new thread in python 3">stackoverflow.com/questions/6319268/â€¦</a></span>
