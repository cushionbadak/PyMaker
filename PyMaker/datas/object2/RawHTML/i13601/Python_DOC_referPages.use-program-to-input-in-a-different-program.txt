<div class="post-text" itemprop="text">
<p>I am kind of new in programming (I only know python). Yesterday I finished making a 2048 game (running in the command line). Now I decided to make an AI that would auto-play, but I don't want this AI to run each time I run the game.</p>
<p>So to my question, is there a way to make a program/script to actually input (in the command line) and read data from another program?</p>
<p>My "move" code from my 2048 game:</p>
<pre><code>def move():
    global board
    direction = "x"
    while direction != "a" and direction != "w" and direction != "s" and direction != "d":
          direction = raw_input("Where do you want to move?(WASD)")
          direction = direction.lower()
          if direction == "a":
             left()
          elif direction == "w":
             up()
          elif direction == "s":
             down()
          elif direction == "d":
             right()
</code></pre>
<p>So what I want is a second program that is actually inputting in the( direction = raw_input("Where do you want to move?(WASD)")) instead of the player.</p>
<p>Is there a way to do this?
Edit:
    I am running windows 10 </p>
</div>
<div class="post-text" itemprop="text">
<p>You have to replace the call for <code>raw_input</code> to call you custom function that handles the input.</p>
<p>Something like:</p>
<pre><code>from my_other_script import get_input

def move():
    global board
    direction = "x"
    while direction != "a" and direction != "w" and direction != "s" and direction != "d":
          direction = get_input(board)
          if direction == "a":
             left()
          elif direction == "w":
             up()
          elif direction == "s":
             down()
          elif direction == "d":
             right()
</code></pre>
<p>And in <em>my_other_script.py</em> have a function named <code>get_input</code> that does whatever you want to generate the input</p>
<pre><code>def get_input(board):
    # my conditions go here
    return direction
</code></pre>
<p>Note that I'm passing the <code>board</code> so you can know what is current board state and use it to choose the best move.</p>
<p>If you CAN'T replace the <code>raw_input</code> call, you can <a href="https://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow">monkey patch it</a> using the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">mock</a> module. </p>
</div>
<div class="post-text" itemprop="text">
<p>No this would be very tough and compilicated.</p>
<p>I would recommend incorporating the AI into you're script, and then giving the user the option of playing as either him/herself or allowing the AI to play:</p>
<pre><code>print "Would you like to play, or watch the AI play?"
print " 1) User"
print " 2) AI "
userOrAI = raw_input("")
if (userOrAI == "1"):
    move()
if (userOrAI == "2"):
    AImove() #you would need to create a function to play as AI here
else:
   print "Invalid entry"
</code></pre>
</div>
<span class="comment-copy">Which operating system are you running?</span>
<span class="comment-copy">You could pipe the output from the other program into it.</span>
<span class="comment-copy">@kylek I am actually a newbie(programming for about a month and a half) so if you could be a bit more specific</span>
<span class="comment-copy">You could also just have the AI write the move to a text file and then read that file from your 2048 code to retrieve it.</span>
<span class="comment-copy">@Feconiz if you are using a unix system then you can redirect the output from one program to another using the pipe character like this <code>./script1.py | ./script2.py</code> that will feed each line of the output from script 1 into script 2, so each call of raw_input will read a line from the output of the other script.</span>
<span class="comment-copy">Thank you :) I hadn't thought of that</span>
<span class="comment-copy">hmmm that doesn't seem to work...have i done something wrong ? (both files are in the same folder)    from 2048_Ai.py import get_input (it throws invalid syntax)</span>
<span class="comment-copy">drop the <code>.py</code>, just use <code>from 2048_Ai import get_input</code></span>
<span class="comment-copy">actually the 2048 messed it up even after removing the .py.....so now its just named Ai :) thanks</span>
<span class="comment-copy">Oh yeah, python doesn't allow variables to start with numbers (and import is the same as setting them with a variable name), check this answer on how to do that. <a href="http://stackoverflow.com/questions/9090079/in-python-how-to-import-filename-starts-with-a-number" title="in python how to import filename starts with a number">stackoverflow.com/questions/9090079/â€¦</a></span>
<span class="comment-copy">yes i could do that also ,now that you mentioned it i can see how silly is my question.....thanks</span>
