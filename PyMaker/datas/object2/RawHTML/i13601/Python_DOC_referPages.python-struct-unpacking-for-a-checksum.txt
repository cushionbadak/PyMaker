<div class="post-text" itemprop="text">
<p>I packed a struct using this line</p>
<pre><code># type(8) code(8) checksum(16) process id(16) sequence(16)
packet = struct.pack("bbHHh", ICMP_ECHO_REQUEST, 0, packet_checksum, pid, sequence)
</code></pre>
<p>And now im using a checksum calculation function which unpacks the packet in a way that the 16 bits of where the checksum should be (packet_checksum) is removed. But i don't know how it does that, and what does the sum function actually do? add up the different elements?:</p>
<pre><code>n = len(pkt)
two_bytes = struct.unpack("%sH" % (n/2), pkt)
chksum = sum(two_bytes)
</code></pre>
<p>the code works well i'm just wondering how it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be trying to create an ICMP packet and to then calculate the checksum for it. For this you should carry out your initial <code>pack</code> with <code>0</code> for the checksum rather than trying to remove it. You could then extract each WORD as follows:</p>
<pre><code>for x in xrange(0, len(packet), 2):
    print struct.unpack("H", packet[x:x+2])[0]
</code></pre>
<p>This assumes your packet is an even number of bytes, so if the length is odd, you could possibly temporarily append an extra 0 for the calculation.</p>
<p>Note, the ICMP checksum is not a simple case of adding these together, it requires a one-compliment sum. See the following <a href="https://stackoverflow.com/questions/1767910/checksum-udp-calculation-python">answer</a> for further information.</p>
</div>
<span class="comment-copy">Have you read the <a href="https://docs.python.org/3/library/struct.html?module-struct#struct.unpack" rel="nofollow noreferrer">relevant</a> <a href="https://docs.python.org/3/library/functions.html?sum#sum" rel="nofollow noreferrer">documentation</a> ?</span>
<span class="comment-copy">I'm puzzled at the use of <code>n = len(pkt); ..."%sH" % (n/2)</code> because, well, H is 2 bytes, so the length in bytes is taken, then divided by 2, then multiplied by the length of H, which is 2 again... <code>n = (n/2) * 2</code> So this part seems pointless.</span>
