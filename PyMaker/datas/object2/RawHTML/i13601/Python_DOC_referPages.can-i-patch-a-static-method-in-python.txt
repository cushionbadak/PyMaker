<div class="post-text" itemprop="text">
<p>I've a class in python that contains a static method. I want to <code>mock.patch</code> it in order to see if it was called. When trying to do it I get an error:
<code>AttributeError: path.to.A does not have the attribute 'foo'</code></p>
<p>My setup can be simplified to:</p>
<pre><code>class A:
    @staticMethod
    def foo():
        bla bla
</code></pre>
<p>Now the test code that fails with error:</p>
<pre><code>def test():
    with mock.patch.object("A", "foo") as mock_helper:
        mock_helper.return_value = ""
        A.some_other_static_function_that_could_call_foo()
        assert mock_helper.call_count == 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always use <code>patch</code> as a decorator, my preferred way of patching things:</p>
<pre><code>from mock import patch

@patch('absolute.path.to.class.A.foo')
def test(mock_foo):
    mock_foo.return_value = ''
    # ... continue with test here
</code></pre>
<p>EDIT: Your error seems to hint that you have a problem elsewhere in your code. Possibly some signal or trigger that requires this method that is failing?</p>
</div>
<div class="post-text" itemprop="text">
<p>I was getting that same error message when trying to patch a method using the <code>@patch</code> decorator. </p>
<p>Here is the full error I got.</p>
<pre><code>Traceback (most recent call last):
File "/usr/local/lib/python3.6/site-packages/tornado/testing.py", line 136, in __call__ 
    result = self.orig_method(*args, **kwargs)
File "/usr/local/lib/python3.6/unittest/mock.py", line 1171, in patched     
    arg = patching.__enter__()
File "/usr/local/lib/python3.6/unittest/mock.py", line 1243, in __enter__
    original, local = self.get_original()
File "/usr/local/lib/python3.6/unittest/mock.py", line 1217, in get_original
    "%s does not have the attribute %r" % (target, name)
AttributeError: &lt;module 'py-repo.models.Device' from
        '/usr/share/projects/py-repo/models/Device.py'&gt; does not have the attribute 'get_device_from_db'
</code></pre>
<p>What I ended up doing to fix this was changing the patch decorator I used </p>
<p>from
<code>@patch('py-repo.models.Device.get_device_from_db')</code> </p>
<p>to <code>@patch.object(DeviceModel, 'get_device_from_db')</code></p>
<p>I really wish I could explain further why that was the issue but I'm still pretty new to Python myself. The <a href="https://docs.python.org/3/library/unittest.mock-examples.html#patch-decorators" rel="nofollow noreferrer">patch documentation</a> was especially helpful in figuring out what was available to work with. I should not that <code>get_device_from_db</code> uses the <code>@staticmethod</code> decorator which may be changing things. Hope it helps though.</p>
</div>
<span class="comment-copy">Thanks for the response. I've tried your syntax and got the same error. Maybe I need to mock both parent class and the static function separately. I'll continue to investigate..</span>
<span class="comment-copy">I also have the same problem. If you found a solution, please post it! ^_^</span>
<span class="comment-copy">After trying lots of different approaches, I can confirm that this solution is not only the simplest one, but also that it works for static functions too.</span>
<span class="comment-copy">It seams to be <code>from unittest.mock import patch</code> in Python 3</span>
