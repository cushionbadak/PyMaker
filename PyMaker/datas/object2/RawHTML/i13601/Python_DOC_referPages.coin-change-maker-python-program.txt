<div class="post-text" itemprop="text">
<p>I am in a beginner programming course. We must do an exercise where we make a change maker program. The input has to be between 0-99 and must be represented in quarters, dimes, nickles, and pennies when the input is divided down between the four. I wrote a code that involved loops and whiles, but he wants something more easy and a smaller code. He gave me this as a way of helping me along:</p>
<pre><code>c=int(input('Please enter an amount between 0-99:'))
print(c//25)
print(c%25)
</code></pre>
<p>He told us that this was basically all we needed and just needed to add in the dimes, nickles, and pennies. I try it multiple ways with the dimes, nickles, and pennies, but I cannot get the output right. Whenever I enter '99', I get 3 for quarters, 2 for dimes, 1 for nickles, and 0 for pennies. If anyone would be able to help me, that would be wonderful! </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm now sure about what you want to achieve. Using the modulo operator you could easily find out how many quarters, dimes, nickles and pennies.</p>
<p>Let's just say you input 99.</p>
<pre><code>c=int(input('Please enter an amount between 0-99:'))
print(c//25, "quarters")
c = c%25
print(c//10, "dimes")
c = c%10
print(c//5, "nickles")
c = c%5
print(c//1, "pennies")
</code></pre>
<p>this would print out:</p>
<pre><code>3 quarters
2 dimes
0 nickles
4 pennies
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The actual trick is knowing that because each coin is worth at least twice of the next smaller denomination, <a href="https://en.wikipedia.org/wiki/Change-making_problem#Greedy_method" rel="nofollow">you can use a greedy algorithm</a>. The rest is just implementation detail.</p>
<p>Here's a slightly DRY'er (but possibly, uh, more confusing) implementation. All I'm really doing differently is using a list to store my results, and taking advantage of <a href="https://docs.python.org/release/1.5.1p1/tut/tuples.html" rel="nofollow">tuple unpacking</a> and <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow">divmod</a>. Also, this is a little easier to extend in the future: All I need to do to support $1 bills is to change <code>coins</code> to <code>[100, 25, 10, 5, 1]</code>. And so on.</p>
<pre><code>coins = [25,10,5,1] #values of possible coins, in descending order
results = [0]*len(coins) #doing this and not appends to make tuple unpacking work
initial_change = int(input('Change to make: ')) #use raw_input for python2
remaining_change = initial_change
for index, coin in enumerate(coins):
    results[index], remaining_change = divmod(remaining_change, coin)
print("In order to make change for %d cents:" % initial_change)
for amount, coin in zip(results, coins):
    print("    %d %d cent piece(s)" % (amount, coin))
</code></pre>
<p>Gives you: </p>
<pre><code>Change to make: 99
In order to make change for 99 cents:
    3 25 cent piece(s)
    2 10 cent piece(s)
    0 5 cent piece(s)
    4 1 cent piece(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>n = int(input("Enter a number between 0-99"))
q = n // 25
n %= 25
d = n // 10
n %= 10
ni =  n // 5
n %= 5
c = n % 5
print(str(q) +" " + str(d) +" " + str(ni) + " " + str(c))
</code></pre>
<p>I hope this helps? Something like this but don't just copy it. Everytime you divide by 25 10 5 you must lose that part because it's already counted.At the end print what ever you want :).</p>
</div>
<span class="comment-copy">There's an interesting wikipedia page on this algorithm: <a href="https://en.wikipedia.org/wiki/Change-making_problem" rel="nofollow noreferrer">en.wikipedia.org/wiki/Change-making_problem</a>.</span>
<span class="comment-copy">The tricky part is to know that you by taking as many quarters as possible without exceeding the sum, then as many dimes and then nickels and last pennies will actually result in the minimal amount of coins. And of course you should present the minimal amount or you could just anser to use <code>c</code> pennies.</span>
<span class="comment-copy">Thank you so much for your response! I appreciate the help! I can see where I am going wrong and I now know how to fix it!</span>
<span class="comment-copy">no problem, just make sur you understand the % and // operators. that's the whole point of this exercice.</span>
<span class="comment-copy">There's also <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod</code></a>, which does both of those operations at the same time.</span>
<span class="comment-copy">Thank you for your help! I am definitely trying to make things harder than they really are! I appreciate the help!</span>
<span class="comment-copy">No it's ok. If you just started I understand :) .you are welcome ;)</span>
