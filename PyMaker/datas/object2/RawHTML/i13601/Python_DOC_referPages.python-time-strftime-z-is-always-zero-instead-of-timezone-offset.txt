<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; t=1440935442
&gt;&gt;&gt; time.strftime("%Y/%m/%d-%H:%M:%S %z",time.gmtime(t))
'2015/08/30-11:50:42 +0000'
&gt;&gt;&gt; time.strftime("%Y/%m/%d-%H:%M:%S %z",time.localtime(t))
'2015/08/30-13:50:42 +0000'
</code></pre>
<p>The offset stays the same +0000, but I expect '2015/08/30-13:50:42 +0200'</p>
<p>The timezone is correct, as the command is interpreting capital %Z as it should</p>
<pre><code>&gt;&gt;&gt; time.strftime("%Y/%m/%d-%H:%M:%S %Z",time.localtime(t))
'2015/08/30-13:50:42 CEST'
</code></pre>
<p>Unix date works like I want</p>
<pre><code>$ date -u --date @1440935442 +"%Y/%m/%d-%H:%M:%S %z"
2015/08/30-11:50:42 +0000
$ date --date @1440935442 +"%Y/%m/%d-%H:%M:%S %z"
2015/08/30-13:50:42 +0200
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/time.html" rel="nofollow">As documented</a>:</p>
<blockquote>
<p>Most of the functions defined in this module call platform C library
  functions with the same name. It may sometimes be helpful to consult
  the platform documentation, because the semantics of these functions
  varies among platforms.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow">and</a>:</p>
<blockquote>
<p>Additional directives may be supported on certain platforms, but only
  the ones listed here have a meaning standardized by ANSI C. To see the
  full set of format codes supported on your platform, consult the
  strftime(3) documentation.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>The use of %Z is now deprecated, but the %z escape that expands to the
  preferred hour/minute offset is not supported by all ANSI C libraries.</p>
</blockquote>
<p><code>time.strftime()</code> uses C <code>strftime()</code> and therefore the behavior is platform-dependent. <code>%z</code> should work on POSIX but <a href="http://bugs.python.org/issue20281" rel="nofollow"><code>%z</code> may return the same result as <code>%Z</code> on Windows</a>. <code>%z</code> is not documented on Python 2 and therefore <code>time</code> module should return whatever C <code>strftime()</code> returns on the given platform without any changes.</p>
<p>The same code works in Python 3 on my machine:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; t = 1440935442
&gt;&gt;&gt; time.strftime("%Z%z", time.gmtime(t))
'GMT+0000'
&gt;&gt;&gt; time.strftime("%Z%z", time.localtime(t)) 
'CEST+0200'
</code></pre>
<p>Your issue seems to be Python 2 specific:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; t = 1440935442
&gt;&gt;&gt; time.strftime("%Z%z", time.gmtime(t))
'CET+0000'
&gt;&gt;&gt; time.strftime("%Z%z", time.localtime(t))
'CEST+0000'
</code></pre>
<p>Note: <code>time.strftime('%Z%z')</code> returns <code>'CEST+0200'</code> on both Python 2 and 3. The difference might be explained by the absence of <code>tm_zone</code>, <code>tm_gmtoff</code> attributes in Python &lt;3.3. Neither <code>time.gmtime()</code> nor <code>time.localtime()</code> provide timezone info on Python 2 (apart from <code>tm_isdst</code> that is why <code>time.gmtime()</code> leads to <code>CET</code>). <code>time.strftime('%Z%z')</code> uses C <code>localtime()</code> and therefore it may provide <code>tm_zone</code>, <code>tm_gmtoff</code> even on Python 2.</p>
<p>If you need portable behavior and to support timezones that might have different tzname, utc offset in the past; you could use <code>pytz</code> tzinfo objects (e.g., via <code>tzlocal</code> module) that provide access to the historical timezone database:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import tzlocal # $ pip install tzlocal
&gt;&gt;&gt; datetime.fromtimestamp(1440935442, tzlocal.get_localzone()).strftime('%Z%z')
'CEST+0200'
</code></pre>
</div>
<span class="comment-copy">I see the same result, but note in the documentation: "The use of %Z is now deprecated, but the %z escape that expands to the preferred hour/minute offset is not supported by all ANSI C libraries."</span>
<span class="comment-copy">(I can't see anything else that should do the same thing with strftime though. Perhaps you should look at the datetime module?)</span>
<span class="comment-copy">as I'm on a standard linux system, I expect %z to be in the ansi lib. But it's not working as expected. This is a bit sad. I will look into datetime, but this means probably all my code needs changing.</span>
<span class="comment-copy">@JonSkeet: the issue is that <code>time.localtime(t)</code> result has no timezone info attached on Python &lt;3.3 (apart from <code>tm_isdst</code>). OPs code works fine in Python 3.3+ on Linux where the returned <code>struct_time</code> has <code>tm_zone</code>, <code>tm_gmtoff</code> attributes.</span>
