<div class="post-text" itemprop="text">
<p>I have some problem with 80 bits manipulation, which can be easily figured out.
But I am missing basic stuff. These my code snippet</p>
<pre><code>def get32bitNumber():

temp1 = 0b10101010101010101010101010101010101010101010101010101010101010101010101010101010   # 80 bits inputs
        ''' Split `value` into a list of `3`-bit integers '''
        mask, temp2= (1 &lt;&lt; 32) - 1, []
        temp2= []
        while temp1:
            temp2.append(temp1&amp; mask)
            temp1&gt;&gt;= 32
        return temp

if __name__ == "__main__":   

      aList = []
      aList =get32bitNumber()             
</code></pre>
<p>expected output:</p>
<pre><code>aList = [0x0000AAAA,0xAAAAAAAA,0xAAAAAAAA] # i want convert aList into expected_output 
expected_output = 0xAAAAAAAAAAAAAAAAAAAA # output would be in binary only 0b10101010101010101010101010101010101010101010101010101010101010101010101010101010
</code></pre>
<p>Problem here is list contains 3 - 32 bit number which leads to 96 bits         e.g.[32bitNumber1, 32bitNumber2, 32bitNumber3]. I want only 80 bits as a bin of long value. I researched, I got bit array, but I don't to do it using in bit array, I want to do in pythonic way  How could I achieve this. Please help me in sorting out issue. Thanks in advance for assistance.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Kevin said, what you are trying to do is impossible for any 3 32 bit ints. If the leftmost 16 binary digits will always be 0 as your example has, then the expected_output will be number1*2^64+number2*2^32+number3. To make it cut off the first 16 bits of number 1, so the output is guaranteed to fit in 80 bits, you would want to mod the above answer by 2^80.</p>
<p><code>for i, value in enumerate(list_of_inputs[::-1]):
     output+=value*(2**(32*i))
output=output%(2**80)</code>
The first line iterates through both the elements of the array backward, as well as their index (where they are in the array). The reason to go through backward is so the 3rd element is the smallest as you seem to want. It then sets the output to the values bit shifted into place. The last line gets rid of the leading 16 bits, so that 80 remain.</p>
</div>
<div class="post-text" itemprop="text">
<p>With some modifications to make it <em>actually run at all</em>, your code works fine for me:</p>
<pre><code>def asUInt32Array(value):
    ''' Split `value` into a list of 32-bit integers '''
    mask, arr = (1 &lt;&lt; 32) - 1, []
    while value:
        arr.append(value &amp; mask)
        value &gt;&gt;= 32
    return arr

test = 0b10101010101010101010101010101010101010101010101010101010101010101010101010101010
result = asUInt32Array(test)
assert result == [0xAAAAAAAA, 0xAAAAAAAA, 0xAAAA]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python &gt;= 3.2, you can make use of <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow"><code>int.from_bytes</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow"><code>int.to_bytes</code></a>:</p>
<pre><code>format = struct.Struct('&lt;IIH')

a_32 = 0xAAAAAAAA
b_32 = 0xAAAAAAAA
c_16 = 0xAAAA

# pack the values into a `bytes` object
packed_bytes = format.pack(a_32, b_32, c_16)

if "we need to actually convert to an integer":
    # convert the bytes into a single integer
    packed_int = int.from_bytes(packet_bytes, byteorder='little')

    # now convert back to bytes
    res_packed_bytes = packed_int.to_bytes(byteorder='little')
else:
    res_packed_bytes = packed_bytes

# and unpack those bytes back to the values
a, b, c = format.unpack(res_packed_bytes)
</code></pre>
<p>However, I'd query why you need to put this into an 80-bit integer in the first place - why not just a sequence of bytes:</p>
</div>
<span class="comment-copy">It's impossible to losslessly compress 96 bits of information into 80 bits of space.</span>
<span class="comment-copy">@ Kevin, sorry i think my question is not clear, I want to extract only 80 bits from 96 bits, Is it not possible?</span>
<span class="comment-copy">Ok. What does "extract" mean?</span>
<span class="comment-copy">It seems you have one 16-bit number and two 32-bit numbers instead of three 32-bit numbers, and you want to concatenate these three numbers to an 80-bit number.  Is this correct?</span>
<span class="comment-copy">aList contains [0x0000AAAA,0xAAAAAAAA,0xAAAAAAAA] i want to only 80 bits i.e 0xAAAAAAAAAAAAAAAAAAAA in binary form.</span>
<span class="comment-copy">@ Oscar Smith Thanks could you please tell , by iterating over the list, i am finding difficulty in iterating over a list and constucting a long value.</span>
<span class="comment-copy">I'm not sure I understand you, but if you're looking for a way to do this with an arbitrary number of ints in a list, you could do final=0 for i, value in enumerate(list_of_numbers):       final+=value*(2**(32*i))</span>
<span class="comment-copy">aList will contain 3 32 bit numbers, and i want to itearate over a list, i want to construct 96 bit as for value in aList:value |= value&lt;&lt;64+ value&lt;&lt;32 +value, after getting a value, i want split into 80 bits. using indexing. but m not succesible to do this. I am new to python , need help on this.</span>
<span class="comment-copy">not sure how to markup with code in comments, if someone could tell me, it would be much appreciated.</span>
<span class="comment-copy">then the method in the comment will work, although if you are dealing with a fixed number of ints, it would be more efficient to do it in one step.</span>
<span class="comment-copy">@ Eric, Thanks !! but i want exactly reverse of that  result = [0xAAAAAAAA, 0xAAAAAAAA, 0xAAAA] now i want to revert back as  expected_output = 0b101010101010101010101010101010101010101010101010101010 10101010101010101010101010. could you pls tell me how could i achieve this?</span>
<span class="comment-copy">@Sana: Edit your question to make this clear then</span>
<span class="comment-copy">@ Eric, just edited this question, could you please help on this?</span>
<span class="comment-copy">@ Eric, could you please let me know how to achieve this?</span>
<span class="comment-copy">forgot mention, i can use only python 2.7.</span>
<span class="comment-copy">Why do you want the integer <code>0xAAAAAAAAAAAAAAAAAAAA</code> and not the bytestring <code>"\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA"</code>?</span>
<span class="comment-copy">@ Eric, I want integer 0xAAAAAAAAAAAAAAAAAAAA only, is there any possible to achieve this?</span>
<span class="comment-copy">@Sana: Please explain why it is that you want that?</span>
<span class="comment-copy">@ Eric, I want to do some bit wise operation in the 80 bits input. i cant use byte string for that .Could you pls help on this?</span>
