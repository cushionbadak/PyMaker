<div class="post-text" itemprop="text">
<p>As I transition from JavaScript to Python, I noticed I haven't figured out a way to add properties to the data type classes. 
For example, in JavaScript, if I wanted to be able to type <code>arr.last</code> and have it return the last element in the array <code>arr</code>, or type <code>arr.last = 'foo'</code> and to set the last element to <code>'foo'</code>, I would use:</p>
<pre><code>Object.defineProperty(Array.prototype,'last',{
    get:function(){
        return this[this.length-1];
    },
    set:function(val){
        this[this.length-1] = val;
    }
});

var list = ['a','b','c'];
console.log(list.last); // "c"
list.last = 'd';
console.log(list); // ["a","b","d"]
</code></pre>
<p>However, in Python, I'm not sure how to do the equivalent of <code>Object.defineProperty(X.prototype,'propname',{get:function(){},set:function(){}});</code></p>
<p><strong>Note: I am <em>not</em> asking for how to do the specific example function, I am trying to be able to define a property with a <code>get</code> and <code>set</code> onto the primitive data types (str, int, float, list, dict, set, etc.)</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2<sup>1</sup>, adding new attributes (aka member objects, including methods) to a new-style class (one that derives from <code>object</code>) is as easy as simply defining them:</p>
<pre class="lang-py prettyprint-override"><code>class Foo(object):
    def __init__(self):
        self._value = "Bar"

def get_value(self):
    return self._value

def set_value(self, val):
    self._value = val

def del_value(self):
    del self._value

Foo.value = property(get_value, set_value, del_value)
f = Foo()

print f.value
f.value = "Foo"
print f.value
</code></pre>
<p>I use the <a href="https://docs.python.org/2/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> builtin that Dan D. mentioned in <a href="https://stackoverflow.com/a/32387596/2508324">his answer</a>, but this actually assigns the attribute <em>after</em> the class is created, like the question asks.</p>
<p><a href="http://ideone.com/GNnxxZ" rel="nofollow noreferrer">Online demo</a></p>
<p><sup>1: in Python 3, it's even simpler, since all classes are new-style classes</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>See the documentation of the <a href="https://docs.python.org/2/library/functions.html#property" rel="nofollow"><code>property</code></a> function. It has examples. The following is the result of <code>print property.__doc__</code> under Python 2.7.3:</p>
<pre><code>property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute

fget is a function to be used for getting an attribute value, and likewise
fset is a function for setting, and fdel a function for del'ing, an
attribute.  Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")

Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self): return self._x
    @x.setter
    def x(self, value): self._x = value
    @x.deleter
    def x(self): del self._x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understood you correctly, you want to edit existing classes (add method) Check out this thread <a href="https://stackoverflow.com/questions/962962/python-changing-methods-and-attributes-at-runtime">Python: changing methods and attributes at runtime</a></p>
</div>
<span class="comment-copy">Perhaps you want to read about the <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">standard types</a>? You can do this stuff directly in Python, with no messy bits getting in the way. In other words, in trying to define properties and getters/setters, you probably have an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>.</span>
<span class="comment-copy">This does not add existing functionality at runtime, like OP asked.</span>
<span class="comment-copy">I'm not sure if I understand that post correctly, but it appears that that is making a new class that can have its attributes modified, as opposed to what I want (being able to modify the attributes of a class that was defined with Python (e.g. int)</span>
<span class="comment-copy">@Cyoce Not all classes are equal in Python, largely due to performance/implementation considerations.</span>
