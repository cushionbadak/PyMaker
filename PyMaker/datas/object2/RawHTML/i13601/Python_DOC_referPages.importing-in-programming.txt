<div class="post-text" itemprop="text">
<p>I've noticed in a lot of examples there are "import ..." as such in Haskell;</p>
<pre class="lang-hs prettyprint-override"><code>-- file: ch05/PrettyJSON.hs
module PrettyJSON
    (
      renderJValue
    ) where

import Numeric (showHex)
import Data.Char (ord)
import Data.Bits (shiftR, (.&amp;.))

import SimpleJSON (JValue(..))
import Prettify (Doc, (&lt;&gt;), char, double, fsep, hcat, punctuate, text,
                 compact, pretty
</code></pre>
<p>Do you have to create those import packages or are they already included in the programming language (or computer).</p>
<p>If you don't need to create an import, then where do you get it and can you view the coding?</p>
</div>
<div class="post-text" itemprop="text">
<p>A Haskell-centric answer:</p>
<pre class="lang-hs prettyprint-override"><code>import Numeric (showHex)
</code></pre>
<p>This line imports the <code>showHex</code> function within the <code>Numeric</code> <em>module</em>. Modules are groups of functions, data types and other such things, arranged in a way to allow easy reuse. Some modules come with the basic installation of the compiler, others you can install later on (in Haskell, they are distributed as <em>packages</em>, which you can install with tools such as cabal-install), and finally there are those you define for use in your programs. In fact, the snippet you included in your question is the beginning of a module, called <code>PrettyJSON</code>, which makes the <code>renderJValue</code> function available when you import it elsewhere.</p>
<blockquote>
<p>and can you view the coding?</p>
</blockquote>
<p>Most Haskell packages written by other people that you can install are distributed through <a href="https://hackage.haskell.org/" rel="nofollow noreferrer">Hackage</a>. By browsing Hackage, you can find documentation for the packages and their modules, as well as read their source code. For instance, <a href="https://hackage.haskell.org/package/base-4.8.1.0/docs/src/Numeric.html#showHex" rel="nofollow noreferrer">here is the definition of <code>showHex</code></a> in the <code>Numeric</code> module. (By the way, <code>Numeric</code> is part of the <code>base</code> package. <code>base</code> comes with the compiler, and so you don't need to install anything else to use it.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are talking about Python, all the packages are already pre-included.
For example:</p>
<pre><code>import statistics 
</code></pre>
<p>or:</p>
<pre><code>from statistics import variance
</code></pre>
<p>and then you can use the function within that package, do check out the <a href="https://docs.python.org/3/" rel="nofollow">Python Docs</a> for more information on the various packages. This is just a short example:</p>
<pre><code>statistics.variance(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Importing packages allows you to leverage the power of these languages in a convenient way. Some packages are modules that come built-in with the language of your choice and some are built by programmers to create added functionality. From the Python <a href="https://docs.python.org/2/library/index.html" rel="nofollow">docs</a>: </p>
<blockquote>
<p>Python provides standardized solutions for many problems that occur in everyday programming.</p>
</blockquote>
<p>Check out <a href="https://docs.python.org/2/tutorial/modules.html#modules" rel="nofollow">this</a> simple example in Python in which you create a `fibo.py file and then import it in your terminal like so:</p>
<pre><code>import fibo
print fibo.fib(1000)
</code></pre>
<p>And perform Fibbonacci evaluations on a range of numbers. I suggest you read over the docs regarding <a href="https://docs.python.org/2/tutorial/modules.html#more-on-modules" rel="nofollow">Modules</a> and more examples on how to use them, that might help clarify some of your questions.</p>
</div>
<span class="comment-copy">some packages are already included with a typical installation, some you can download and install (e.g., with "pip" or other utilities), some you can create yourself. Often these packages are installed into a "site-packages" directory, you can go there and view the python code making up the packages. The specifics depend on your specific system.</span>
<span class="comment-copy">Does this mean I can make my own imports based on mathematical expressions and functions? Thank you for your comment, I'll look into the site-packages directory. Does this also mean I may need to modify some packages based on a different types of projects?</span>
<span class="comment-copy">Yes. Here's is more information: <a href="https://docs.python.org/2/tutorial/" rel="nofollow noreferrer">docs.python.org/2/tutorial</a></span>
<span class="comment-copy">I disagree with the close votes arguing that this question is "too broad". The core elements of the answer can be expressed in a few lines of language-agnostic explanation.</span>
<span class="comment-copy">Of course you can use third-party packages or write your own packages and modules.</span>
<span class="comment-copy">Yes, and they simply consist of .py files with definitions and placed in C:\Python34\Lib\site-packages</span>
