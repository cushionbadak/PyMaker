<div class="post-text" itemprop="text">
<p>I have a text file list with both letters and integers. Eg,</p>
<pre><code>Aaa = 10
Bbb = 5
Ccc = 9
Ddd = 1
</code></pre>
<p>I want to display the list sorted highest to lowest in terms of the integers, so I used:</p>
<pre><code> with open('score.txt') as infile:
     myDict=list(infile)
     infile = sorted(myDict, key=myDict.get, reverse=True)
     print(infile)
</code></pre>
<p>But I keep receiving this error: <code>AttributeError: 'list' object has no attribute 'get'</code></p>
<p>I know it's because of the list function I used, however without it, I get this: </p>
<pre><code>AttributeError: '_io.TextIOWrapper' object has no attribute 'get'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>list()</code> on an <code>str</code> will return each character separately. </p>
<p>See:</p>
<pre><code>&gt;&gt;&gt; f = """ Aaa = 10
... Bbb = 5
... Ccc = 9
... Ddd = 1"""
&gt;&gt;&gt; list(f)
[' ', 'A', 'a', 'a', ' ', '=', ' ', '1', '0', '\n', 'B', 'b', 'b', ' ', '=', ' '
, '5', '\n', 'C', 'c', 'c', ' ', '=', ' ', '9', '\n', 'D', 'd', 'd', ' ', '=', '
 ', '1']
</code></pre>
<p>For what you're trying to do, I would recommend splitting the string up using some other method. </p>
<p>In this example I use <code>str.splitlines()</code> followed by <code>str.split(sep='=')</code> </p>
<pre><code>&gt;&gt;&gt; f = """Aaa = 10
Bbb = 5
Ccc = 9
Ddd = 1"""
&gt;&gt;&gt; for entry in f.splitlines():
    print(entry.split('='))


['Aaa ', ' 10']
['Bbb ', ' 5']
['Ccc ', ' 9']
['Ddd ', ' 1']
&gt;&gt;&gt; 
</code></pre>
<p>See here for more details: <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#str.split</a></p>
<p>Alternatively you could build a dictionary yourself by looping over the characters, but that seems like a bit too much work for me anyway.</p>
<p><strong>Edit:</strong> </p>
<p>I should mention that once you have a way of looking at the data properly, sorting isn't too hard. Lets say, using my example up there, you manage to loop over the data and store it as list of lists, ie:</p>
<pre><code>f = """ aaa = 100
nnn = 222
qfj = 203 """

scores = []
for line in f.splitlines():
    scores.append(line.split(sep='='))

def get_score(l):
    return int(l[1])

print(sorted(scores, key=get_score, reverse=True))
</code></pre>
<p>You could alternatively use a lambda function but this is easier to understand. </p>
<p>The key argument is essential here, because it allows the sorted function to see what it's trying to sort. It'll iterate over scores and call the key as a function every iteration.</p>
<p>Perhaps consider implementing your own sort algorithm, you'll probably learn a lot.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>tups = [(l.split('=')[0],int(l.split('=')[1])) for l in open('score.txt').read().strip().split('\n')]
tups = sorted(dd,key=lambda x: x[1],reverse=True)
for t in tups:
    print '{} : {}'.format(*t)
</code></pre>
</div>
<span class="comment-copy">Why are you using <code>key=myDict.get</code> here? You have a list, not a dictionary. The sorting code you are using is used to sort the keys of a dictionary by their corresponding values. You don't need a key function <b>at all</b>.</span>
<span class="comment-copy">Where you defined f, is where I would usually open the score.txt file to retrieve the text from. This is because it is an appending list and if more data is added to it, it would not show here because it doesn't retrieve it from the text file. However the problem is caused by using the <code>open('score.txt'</code>, therefore i'm a bit stuck with what to do.</span>
<span class="comment-copy">A little explanation would improve this answer.</span>
