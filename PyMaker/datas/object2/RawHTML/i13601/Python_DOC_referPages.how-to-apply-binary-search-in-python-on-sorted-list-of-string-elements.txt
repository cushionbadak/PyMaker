<div class="post-text" itemprop="text">
<p>I have a sorted list of string elements(names of cities) and I would like to implement binary search on this and filter out cities by giving initial letters?</p>
<p>for example input by user: <a href="http://127.0.0.1:8000/api/?city=New" rel="nofollow">http://127.0.0.1:8000/api/?city=New</a></p>
<p>So here in this case I need to find out cities starting from New</p>
<p>Sample Output:</p>
<pre><code>[
"New Abbey|Ceredigion|United Kingdom",
"New Albany|Indiana|United States",
"New Albany|Kansas|United States",
"New Albany|Mississippi|United States",
"New Albany|Ohio|United States"
]
</code></pre>
<p>Please advise.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following approach should work. It uses Python's own binary search library called <code>bisect</code> to find the initial index into you list. For the search term <code>New</code> it returns 2 for my example list. <code>itertools.takewhile</code> can then be used to return entries until your search term fails:</p>
<pre><code>import bisect, itertools

locations = [
    "Aaaa|aaaa|Test",
    "Bbbb|bbbb|Test",
    "New Abbey|Ceredigion|United Kingdom",
    "New Albany|Indiana|United States",
    "New Albany|Kansas|United States",
    "New Albany|Mississippi|United States",
    "New Albany|Ohio|United States",
    "Zzzz|zzzz|Test"
    ]

search = "New"
start_index = bisect.bisect_left(locations, search)
print list(itertools.takewhile(lambda x: x.startswith(search), itertools.islice(locations, start_index, None)))
</code></pre>
<p>Giving the following output:</p>
<pre><code>['New Abbey|Ceredigion|United Kingdom', 'New Albany|Indiana|United States', 'New Albany|Kansas|United States', 'New Albany|Mississippi|United States', 'New Albany|Ohio|United States']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> to filter the items you want:</p>
<pre><code>[x for x in cities if x.startswith('New')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want an implementation of binary search in python, then this might help you.</p>
<pre><code>def binarySearch(alist, item):
    first = 0
    last = len(alist)-1
    found = False

    while first&lt;=last and not found:
         midpoint = (first + last)//2
         if alist[midpoint] == item:
             found = True
         else:
             if item &lt; alist[midpoint]:
                 last = midpoint-1
             else:
                 first = midpoint+1

    return found

testlist = [0, 1, 2, 8, 13, 17, 19, 32, 42,]
print(binarySearch(testlist, 3))    
print(binarySearch(testlist, 13))
</code></pre>
<p>source: <a href="http://interactivepython.org/runestone/static/pythonds/SortSearch/TheBinarySearch.html" rel="nofollow">http://interactivepython.org/runestone/static/pythonds/SortSearch/TheBinarySearch.html</a></p>
</div>
<span class="comment-copy">I think the link is supposed to be an example of input - looks like the OP's code extracts "New" from the url</span>
<span class="comment-copy">import bisect --&gt; look here: <a href="https://docs.python.org/3/library/bisect.html#module-bisect" rel="nofollow noreferrer">docs.python.org/3/library/bisect.html#module-bisect</a> :)</span>
<span class="comment-copy">Thanks a lot Martin :)</span>
<span class="comment-copy">That I've already done but my boss wants me to implement binary search.</span>
<span class="comment-copy">that's incomprehensible. please don't dump code in comments.</span>
<span class="comment-copy">you asked how to find cities starting with new - the answer does that. now you are asking about <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" rel="nofollow noreferrer">binary search</a> - which is a very different thing - I think your boss may be confused</span>
<span class="comment-copy">I already gave him two solutions, one using list comprehensions and one with the help of regular expression, but he says implement binary search on this which will decrease the search time. Currently it is an iterative search, if we implement binary search then time of searching cities shall reduce.</span>
<span class="comment-copy">well... maybe. you'd want to have a really really bit list of cities for this to be a good use of your time.</span>
