<div class="post-text" itemprop="text">
<pre><code>def pyg(n):
    n=int(n)
    for i in range(1,n):
        a=(2*i)+1
        b=(2*i)*(i+1)
        c=(2*i)*(i+1)+1
        return(a,b,c)
</code></pre>
<p>When i try to run this on Shell using <code>pyg(100)</code> I only get output (3, 4, 5).
What might be the problem all the triplets are not generating.</p>
</div>
<div class="post-text" itemprop="text">
<p>As many others pointed out, when the return statement executes, your function will finish, and will not continue looping. However, you have options for returning multiple values from a single function. For example aggregating your values in a list and return that, or to use the <code>yield</code> keyword instead of <code>return</code>. The <code>yield</code> keyword will make your function a <em>generator function</em>, which returns an <em>iterable generator object</em> with all your expected elements.</p>
<p>I advise you to split your code into separate functions, so you have the original formula as a <em>function of i</em>, and a generator function which will return the elements for <code>1 &lt;= i &lt; n</code>. Note that you can collect the elements of a generator to a list by supplying it to the <code>list</code> constructor.</p>
<pre><code>def pyg(i):
  a = (2*i) + 1
  b = (2*i) * (i+1)
  c = (2*i) * (i+1) + 1
  return (a,b,c)

def pygs(n):
  for i in range(1, n):
    yield pyg(i)

print(list(pygs(10))) # prints the first 9 Pythagorean triplet as a list of tuples
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>return</code> sentence. Change it for a <code>yield</code>. If you want to test it, you could:</p>
<pre><code>&gt;&gt;&gt; pygs = pyg(100)
&gt;&gt;&gt; next(pygs)
(3, 4, 5)
&gt;&gt;&gt; next(pygs)
.
.
.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your function produces only one pair, because <code>return</code> interrupts function execution. You could use <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python"><code>yield</code></a> keyword, as suggested by <a href="https://stackoverflow.com/questions/32315366/generating-unique-pythagorean-triplets-using-this-algorithm/32315590#32315590">@jgomo3</a>, or <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> function:</p>
<pre><code>def generate_triplet(n):
    a=(2*n)+1
    b=(2*n)*(n+1)
    c=(2*n)*(n+1)+1
    return(a,b,c)

def pyg(n):
    return map(generate_triplet, range(1, int(n))
</code></pre>
</div>
<span class="comment-copy">Please elaborate your answer and add some useful explanation to it. Thanks.</span>
<span class="comment-copy">Thank you very much for the solution and the explanation.</span>
