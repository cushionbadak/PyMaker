<div class="post-text" itemprop="text">
<p>I have a list populated with ~100 names. The names in this list either occur once or twice and I would like to go through the list to find names that occur <em>twice</em> and names that only occur <em>once</em>. I will also need the position of the reoccurring names in the list and the positions of the names that only appear once.</p>
<p>I'm not sure how I would go about doing this because all the methods I can think of are inefficient as they would go through the whole list even if they have already found a match. Other methods that I can think of would return two duplicate positions. The names that occur twice will not necessarily be adjacent to each other.</p>
<p>For example, if this was the list:</p>
<pre><code>mylist = [ 1, 2, 3, 1, 4, 4, 5, 6]
</code></pre>
<p>I would need something that outputs (something like):</p>
<pre><code>[[0,3],[1],[2],[4,5],[6],[7]]
</code></pre>
<p>With those numbers being the positions of the duplicate names and the position of the names that occur once.</p>
<p>I am by no means an expert so any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a dictionary:</p>
<pre><code>mylist = [1,2,3,1,4,4,5,6]
dic = {}

for i in range(0,len(mylist)):
    if mylist[i] in dic:
        dic[mylist[i]].append(i)
    else:
        dic[mylist[i]] = [i]
print dic.values()
# prints [[0, 3], [1], [2], [4, 5], [6], [7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>enumerate</code> to get the pairs contain index of each element and the element itself then loop over it and store the items as key and indices as values using a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> (to preserve the order) and <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>dict.setdefault</code></a> method:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d=OrderedDict()
&gt;&gt;&gt; for i,j in enumerate(mylist):
...     d.setdefault(j,[]).append(i)
... 

&gt;&gt;&gt; d.values()
[[0, 3], [1], [2], [4, 5], [6], [7]]
</code></pre>
</div>
<span class="comment-copy"><code>from collections import defaultdict; new = defaultdict()</code> then <code>for i, j in enumerate(myList): q[j].append(i)</code></span>
