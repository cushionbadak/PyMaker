<div class="post-text" itemprop="text">
<p>I'm creating a python program and one of the methods must allow two different turtles to approach or 'try'  to converge at a single location </p>
<p>The dependency of whether the turtles converge or not depends on the random speeds of the turtles. </p>
<p>But my immediate concern is trying to make two different turtles move at different speeds towards the same location. </p>
<p>Or an alternate idea I've had it to try and run two lines of code simultaneously ( the movement for both turtles )  but I'm an intermediate programmer and I'm not too sure if that's even possible.</p>
<p>Thank you for thanking the time to reply to my question </p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot move two objects simultaneously, you can only simulate it.
This is what I gave my grade 10's as a hint on this same question.
Not perfect, but it shows the concept.</p>
<pre><code>##turtleChase.py
##Randomly place the turtles on the screen
##one turtle will then chase the other as it moves across the screen
##
##input: mouseclick events
##output: graphics on screen, text in Shell

##pseudocode:
##setup your screen
##setup the turtles
##randomly place both turtles
##randomly find a location to move the first turtle to
##turn the first turtle towards the desired location
##in a loop:
##move the first turtle a small distance
##determine the heading to move the second turtle to the first turtle
##move the second turtle a small distance
##is the second turtle at the same position of the first turtle?
##if it is
##quit the loop
##if not
##continue the loop


import turtle, random
random.seed()

# setup the output window
picSize = (400,600)
playGround = turtle.Screen()
playGround.screensize(picSize[0], picSize[1])

#setup the turtles
bob = turtle.Turtle()
bob.ht()
bob.color('red')
jeff = turtle.Turtle()
jeff.ht()
jeff.color('blue')

# find random positions for the turtles
# use the picSize variable so that we can change the screensize easily
# without having to change a lot of code.
# if the screen is 600 pixels tall, then the y-coordinates go from
# -300 to +300, just like in math.
jeffx = random.randint(-picSize[0]/2,picSize[0]/2)
jeffy = random.randint(-picSize[1]/2,picSize[1]/2)
bobx = random.randint(-picSize[0]/2,picSize[0]/2)
boby = random.randint(-picSize[1]/2,picSize[1]/2)

# find a point to move bob to
bobNewx = random.randint(-picSize[0]/2,picSize[0]/2)
bobNewy = random.randint(-picSize[1]/2,picSize[1]/2)
newBobPos = (bobNewx,bobNewy)

print(jeffx,jeffy)
print(bobx,boby)

# place the turtles and show them
bob.setpos(bobx,boby)
jeff.setpos(jeffx,jeffy)
jeff.st()
bob.st()

#rotate bob towards its target location
bobTurn = bob.towards(newBobPos)
bob.setheading(bobTurn)

while bob.position() != jeff.position():
   bob.fd(1)
   jeffTurn = jeff.towards(bob)
   jeff.setheading(jeffTurn)
   jeff.fd(1.5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So if the location is predetermined, and the speed of the turtles is something calculated ahead of time, you can have one loop that simply moves both turtles (at the same time, in the same frame) towards that point, where how far they move would be dependent upon their speed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to make turtles move simultaneously at different speeds is to use timer events.  Here I revise @dougc905's fun example to use timers instead:</p>
<pre><code>from turtle import Turtle, Screen
from random import seed, randint

seed()

DELAY = 100  # milliseconds

# setup the output window
picSize = (400, 600)
playGround = Screen()
playGround.screensize(*picSize)

# setup the turtles
bob = Turtle(shape='turtle', visible=False)
bob.penup()
bob.color('red')
bob.speed('slow')

jeff = Turtle(shape='turtle', visible=False)
jeff.penup()
jeff.color('blue')
jeff.speed('normal')

x_quadrant = -picSize[0] // 2, picSize[0] // 2
y_quadrant = -picSize[1] // 2, picSize[1] // 2

# find random positions for the turtles
jeff_xy = randint(*x_quadrant), randint(*y_quadrant)
bob_xy = randint(*x_quadrant), randint(*y_quadrant)

# find a point to move bob to and rotate towards its target location
bobNew_xy = randint(*x_quadrant), randint(*y_quadrant)
bob.setheading(bob.towards(bobNew_xy))

# place the turtles and show them
jeff.setpos(jeff_xy)
jeff.showturtle()
jeff.pendown()

bob.setpos(bob_xy)
bob.showturtle()
bob.pendown()

# bob's motion is in a straight line
def moveStraight():
    bob.fd(bob.speed())
    playGround.ontimer(moveStraight, DELAY)

# jeff's motion is towards bob
def moveToward():
    if bob.position() != jeff.position():
        jeff.setheading(jeff.towards(bob))
        jeff.fd(jeff.speed())
    playGround.ontimer(moveToward, DELAY)

moveStraight()
moveToward()

playGround.exitonclick()
</code></pre>
<p><a href="https://i.stack.imgur.com/448xc.png" rel="nofollow"><img alt="enter image description here" src="https://i.stack.imgur.com/448xc.png"/></a></p>
</div>
<span class="comment-copy">Anything you tried already? As it stands, the question is a little ambiguous and broad, are you looking for threads, or rather some algorithms?</span>
<span class="comment-copy">Yes. I currently have one turtle which moves to the location first,  then he second turtle moves to the location afterwards and I have a method which takes the speed of the turtles and the distance of each turtle from their initial location to the final location and uses this information to determine which turtle would have gotten to that location first. But I'd like to have a graphical representation of both turtles moving</span>
<span class="comment-copy">Are you using the standard Python <a href="https://docs.python.org/3/library/turtle.html" rel="nofollow noreferrer">turtle</a> module?</span>
<span class="comment-copy">I typically use generators to implement this same approach (each turtle moves a small bit and yields).  However, I've added an alternative answer showing your fun (+1) example redone using timer events.</span>
