<div class="post-text" itemprop="text">
<p>How can I get <code>0x1b87</code> to print like <code>\x1b\x87</code> in Python?</p>
<pre><code>$ python
Python 2.7.9 (default, Apr  2 2015, 15:33:21) 
[GCC 4.9.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; hex(0x0d90 ^ 0x1617)
'0x1b87'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to use <code>format(..., 'x')</code> for hexadecimal representation, avoiding the unnecessary slicing (<code>hex(...)[2:]</code>).</p>
<h2>Python 2</h2>
<p>Just decode the string (using the <a href="https://docs.python.org/2/library/codecs.html#python-specific-encodings" rel="nofollow"><code>hex</code></a> codec):</p>
<pre><code>&gt;&gt;&gt; format(0x0d90 ^ 0x1617, 'x').decode('hex')
'\x1b\x87'
</code></pre>
<p>or pack the integer with <a href="https://docs.python.org/2/library/struct.html#struct.pack" rel="nofollow"><code>struct.pack</code></a> (<code>&gt;</code> for big-endian order, <code>H</code> for <code>unsigned short</code> - change <a href="https://docs.python.org/2/library/struct.html#format-characters" rel="nofollow">format character</a> to meet your requirements)</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&gt;H', 0x0d90 ^ 0x1617)
'\x1b\x87'
</code></pre>
<h2>Python 3</h2>
<p><a href="https://docs.python.org/3/library/stdtypes.html#bytes.fromhex" rel="nofollow"><code>bytes.fromhex</code></a> does that:</p>
<pre><code>In [1]: bytes.fromhex(format(0x0d90 ^ 0x1617, 'x'))
Out[1]: b'\x1b\x87'
</code></pre>
<p><a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow"><code>struct.pack</code></a> is still an option, <a href="https://docs.python.org/3/library/struct.html#format-strings" rel="nofollow">format strings</a> are as for Python 2 (see the previous section):</p>
<pre><code>In [2]: import struct

In [3]: struct.pack('&gt;H', 0x0d90 ^ 0x1617)
Out[3]: b'\x1b\x87'
</code></pre>
<p>The <code>hex</code> codec is now one of the <a href="https://docs.python.org/3/library/codecs.html#binary-transforms" rel="nofollow">binary transforms</a>, use <a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="nofollow"><code>codecs.decode</code></a>:</p>
<pre><code>In [4]: import codecs

In [5]: codecs.decode(format(0x0d90 ^ 0x1617, 'x'), 'hex')
Out[5]: b'\x1b\x87'
</code></pre>
<h2>Python 3.2 and newer</h2>
<p>Python 3.2 introduced the cool <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow"><code>int.to_bytes</code></a> method:</p>
<pre><code>In [4]: (0x0d90 ^ 0x1617).to_bytes(4, 'big')
Out[4]: b'\x00\x00\x1b\x87'
</code></pre>
<p>It will produce a fixed number of bytes (<em>4</em> in this example) or the <code>OverflowError</code> "if the integer is not representable with the given number of bytes".</p>
<p>There's a way to calculate the minimum number of bytes necessary to represent the integer:</p>
<pre><code>In [22]: i = 0x0d90 ^ 0x1617

In [23]: i.to_bytes((i.bit_length() // 8) + 1, 'big')
Out[23]: b'\x1b\x87'
</code></pre>
<p>Also, consider specifying the <code>signed</code> argument that</p>
<blockquote>
<p>determines whether two's complement
  is used to represent the integer.  If <em>signed</em> is <em>False</em> and a negative
  integer is given, an <em>OverflowError</em> is raised.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>import struct
struct.pack("&gt;H" ,int('0x1b87',16))

'\x1b\x87'
&gt;&gt;&gt;
</code></pre>
</div>
