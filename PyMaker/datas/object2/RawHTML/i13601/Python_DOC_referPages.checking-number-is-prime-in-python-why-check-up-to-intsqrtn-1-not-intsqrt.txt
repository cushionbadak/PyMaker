<div class="post-text" itemprop="text">
<p>new to Python here. I am trying to understand how this function works to check prime numbers:</p>
<pre><code>from itertools import count, islice
from math import sqrt
def is_prime(n):
    if n &lt; 2: return False
    return all(n%i for i in islice(count(2), int(sqrt(n)-1)))
</code></pre>
<p>From what I understand you can check factors up to and <strong>including</strong> the square root of n, so why is this only testing up to sqrt(n)-1? I'm also not clear on the <code>return all</code> part for the function. n%i returns an int, the remainder. So why does this expression evaluate as a bool? Any pointers on this would be great. thanks!</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>The function is infact checking for sqrt(n). Because islice(count(2), sqrt(n)-1) means count sqrt(n)-1 numbers starting from 2. While checking for prime numbers, it is enough to check from 2 to it's square root because even if there is a factor greater than square root, it will have a corresponding factor less than the square root. Using int(sqrt(n)) here, would mean we are checking an additional number - no harm but unnecessary. Using int(sqrt(n) - 1) means we do only the comparisons that are necessary.</p></li>
<li><p>all() will return true, if all elements of the iteration evaluates to true. In python 0 evaluates to false. Which means, if for any number between 2 and sqrt(n), remainder of integer division is 0, the all() will return false. This is correct because if there is a factor, the number is not prime. If for 2 to sqrt(n), the remainder of integer division is never 0, then the number is prime - all() will return true as there are no zeroes in the iterations.</p></li>
</ol>
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow">https://docs.python.org/2/library/itertools.html#itertools.islice</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Because the second argument to <code>islice</code> is a count, not the value to stop on.</p>
<p>This would be far better written with <code>xrange(2, int(sqrt(n))+1)</code></p>
<p>The plus one here is to make the range inclusive at both ends, which xrange normally is not.</p>
</div>
<span class="comment-copy">Take a look at the docs for <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all()</a>.</span>
<span class="comment-copy">@PM2Ring Return True if all elements of the iterable are true. But the elements of the iterable are ints not bools.</span>
<span class="comment-copy">0 is cast to False, and any other number is cast to True in python by default.</span>
<span class="comment-copy">@Igor thanks, got it</span>
<span class="comment-copy">The neat thing about using a generator expression like this in the call to <code>all()</code> is that <code>all()</code> short-circuits, so <code>all()</code> will stop calling the generator as soon as it detects that a False-ish value has been generated. In other words, the loop stops as soon as a factor is found. Similar remarks apply to <code>any()</code> - a generator expression  inside <code>any()</code> will stop as soon as a True-ish value is produced.</span>
<span class="comment-copy">Excellent, thanks for the detailed answer. Understand it clearly now.</span>
<span class="comment-copy">This is wrong - the code is not checking every number between 2 and n-1</span>
<span class="comment-copy">@Eric yes. It's actually because the sequence starts at 2 not 1 and so have to subtract 1. e.g. checking 16 [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]. sqrt is 4. First 4 terms are 2,3,4,5 we are including 5 in which we don't need hence sqrt(n)-1.</span>
<span class="comment-copy">@Eric you're right. I have corrected my answer. Thanks for noticing.</span>
<span class="comment-copy">Or in Python 3, <code>range(2, int(sqrt(n))+1)</code>, although I prefer to save a <code>math</code> module call and do <code>n**0.5</code> rather than <code>sqrt(n)</code>.</span>
