<div class="post-text" itemprop="text">
<p>I was expecting 2 decimal precission, but:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal, getcontext
&gt;&gt;&gt; getcontext().prec = 2
&gt;&gt;&gt; Decimal(98791.4913)
Decimal('98791.491299999994225800037384033203125')
&gt;&gt;&gt; getcontext()
Context(prec=2, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999, capitals=1, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])
</code></pre>
<p>Why is <code>Decimal</code> not honoring the <code>Context</code> precission?</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting from <a href="https://docs.python.org/2/library/decimal.html#decimal-objects" rel="nofollow">documentation</a> (Emphasis mine) - </p>
<blockquote>
<p>If value is a float, the binary floating point value is losslessly converted to its exact decimal equivalent. This conversion can often require 53 or more digits of precision. For example, Decimal(float('1.1')) converts to Decimal('1.100000000000000088817841970012523233890533447265625').</p>
<p><strong>The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, Decimal('3.00000') records all five zeros even if the context precision is only three.</strong></p>
<p>The purpose of the context argument is determining what to do if value is a malformed string. If the context traps InvalidOperation, an exception is raised; otherwise, the constructor returns a new Decimal with the value of NaN.</p>
</blockquote>
<p>And <a href="https://docs.python.org/2/library/decimal.html#quick-start-tutorial" rel="nofollow">from same documentation</a> -</p>
<blockquote>
<p>The significance of a new Decimal is determined solely by the number of digits input. Context precision and rounding only come into play during arithmetic operations.</p>
</blockquote>
<p>Great examples given in the documentation -</p>
<pre><code>&gt;&gt;&gt; getcontext().prec = 6
&gt;&gt;&gt; Decimal('3.0')
Decimal('3.0')
&gt;&gt;&gt; Decimal('3.1415926535')
Decimal('3.1415926535')
&gt;&gt;&gt; Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85987')
&gt;&gt;&gt; getcontext().rounding = ROUND_UP
&gt;&gt;&gt; Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85988')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>If <em>value</em> is a float, the binary floating point value is losslessly
  converted to its exact decimal equivalent. <strong>This conversion can often
  require 53 or more digits of precision.</strong> For example,
  <code>Decimal(float('1.1'))</code> converts to
  <code>Decimal('1.100000000000000088817841970012523233890533447265625')</code>.</p>
<p><strong>The context precision does not affect how many digits are stored. That
  is determined exclusively by the number of digits in value.</strong></p>
<p>...</p>
<p><strong>Context precision and rounding only come into play during arithmetic operations.</strong></p>
</blockquote>
<p>Emphasis mine.</p>
<p>You can truncate the value by using the <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal.quantize" rel="nofollow"><code>Decimal.quantize</code></a> method:</p>
<pre><code>places = 2
Decimal(98791.4913).quantize(Decimal(10) ** -places) # 98791.49
</code></pre>
<p>or the <a href="https://docs.python.org/3/library/decimal.html#decimal.Context.quantize" rel="nofollow"><code>Context.quantize</code></a>:</p>
<pre><code>places = 2
getcontext().quantize(Decimal(98791.4913), Decimal(10) ** -places) # 98791.49
</code></pre>
</div>
<span class="comment-copy">From looking at <a href="https://docs.python.org/2/library/decimal.html" rel="nofollow noreferrer">docs.python.org/2/library/decimal.html</a>, precision only affects the result of arithmetic operations. For example, with getcontext().prec = 2, the  result of Decimal(98791.4913)/1 is  Decimal('9.9E+4').</span>
<span class="comment-copy">The <a href="https://docs.python.org/2/library/decimal.html#quick-start-tutorial" rel="nofollow noreferrer">quick-start tutorial</a> on the same page says this more succinctly:  "The significance of a new Decimal is determined solely by the number of digits input. Context precision and rounding only come into play during arithmetic operations."  It also gives an example.</span>
<span class="comment-copy">Thanks will add those to the answer.</span>
<span class="comment-copy">That is a very weird method to get 2 decimals. I prefer <code>Decimal('%.2f' % 98791.4913)</code>, which is still not very pretty.</span>
<span class="comment-copy">@jeckyll2hide: 2 decimals is not the same as a precision of 2.  <code>98791.49</code> has a precision of 7.</span>
