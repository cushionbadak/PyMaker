<div class="post-text" itemprop="text">
<p>When trying a selfwritten module, it is likely to end with errors at the first few times.</p>
<p>But when fixing these errors, ipython does not seem to notice that.</p>
<p>Is there an ipython command to reload the new module? 'clear' does not do the trick. So far, the only thing that works is to 'exit' and start a new session. But this also means redoing everything I have done so far.</p>
<p>Or do I need to add something to the module that it kills all its internal variables after it has been run? </p>
<p><strong>Example:</strong></p>
<pre><code>from mymodule import readCSVts
import pandas as pd
data = readCSVts('file.csv')

TypeError                                 Traceback (most recent call last)
&lt;ipython-input-158-8f82f1a78260&gt; in &lt;module&gt;()
----&gt; 1 data = readCSVts('file.csv')

/home/me/path/to/mymodule.py in readCSVts(filename)
    194                 Cons_NaNs=hydroTS[(hydroTS.level.isnull())&amp;(hydroTS.level.shift().isnull())&amp;(hydroTS.level.shift(periods=2).isnull())]
    195                 #This is a pandas dataframe containing all rows with NaN
    196                 Cons_NaNs_count = len(Cons_NaNs)
    197                 Cons_NaNs_str = str(Cons_NaNs_count)
    198                 Cons_NaN_Name_joiner = [current_csv,';',Cons_NaNs]
--&gt; 199                 Cons_NaN_Name_str = ''.join(Cons_NaN_Name_joiner)

TypeError: sequence item 2: expected string, DataFrame found
</code></pre>
<p>OK, that's easy. I made a typo in line 198, and wrote <code>Cons_NaNs</code> instead of <code>Cons_NaNs_str</code>, and thus I get the obvious error of trying to join a dataframe with a string.</p>
<p>But after fixing it in the <code>mymodule.py</code> file, I get the following (shortened) error:</p>
<pre><code>    197                 Cons_NaNs_str = str(Cons_NaNs_count)
    198                 Cons_NaN_Name_joiner = [current_csv,';',Cons_NaNs_str]
--&gt; 199                 Cons_NaN_Name_str = ''.join(Cons_NaN_Name_joiner)

TypeError: sequence item 2: expected string, DataFrame found
</code></pre>
<p>Looking at the traceback, ipython is well aware of the changes is made in the source file, it shows that I fixed the typo with the missing <code>_str</code>, but it still gives an error, that at the first look seems to be impossible. After running <code>clear</code> and reimporting everything, it shows the same behaviour.</p>
<p>So just to make sure that I did not make a stupid mistake somewhere along the way, I went trough my whole module step by step in ipython. And every variable that leads me to that point behaves as expected.</p>
<p><code>Cons_NaNs</code> is a dataframe, <code>Cons_NaNs_count</code> is an integer and <code>Cons_NaNs_str</code> is a string.</p>
<p>So I exited ipython, restarted it and reimported everything and now it works.</p>
<p>But having to exit ipython sucks. Most of the times this means having to reimport dozens of things and doing a few dozen commands, to get to the point where I can actually test what I am currently working on.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not just for <code>ipython</code> , but <code>Python</code> in general caches a module when it is first imported into <code>sys.modules</code> . So after the first import, whenever you try to import it, you would get the cached module object from <code>sys.modules</code> .</p>
<p>To make Python reload the module object without having to restart Python, so that changes done to the module are reflected, you should use <a href="https://docs.python.org/2/library/functions.html#reload" rel="nofollow"><code>reload()</code> built-in function (Python 2.x)</a> or <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow"><code>importlib.reload()</code> (Python 3.x)</a>.</p>
<p>Python 2.x -</p>
<pre><code>&lt;module&gt; = reload(&lt;module&gt;)
</code></pre>
<p>Example -</p>
<pre><code>import module
module = reload(module) #This requires the module as it is, not a string.
</code></pre>
<p>Python 3.x -</p>
<pre><code>import importlib
&lt;module&gt; = importlib.reload(&lt;module&gt;)
</code></pre>
<p>Similar to <code>Python 2.x</code> example above, just use <code>importlib.reload()</code> instead of <code>reload()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There is an Ipython specific way, you can use set up <a href="https://ipython.org/ipython-doc/dev/config/extensions/autoreload.html" rel="nofollow">autoreload</a>:</p>
<pre><code>In [1]: %load_ext autoreload

In [2]: %autoreload 2

In [3]: from foo import some_function

In [4]: some_function()
Out[4]: 42

In [5]: # open foo.py in an editor and change some_function to return 43

In [6]: some_function()
Out[6]: 43
</code></pre>
<p><em>The module was reloaded without reloading it explicitly, and the object imported with from foo import ... was also updated.</em></p>
<p><strong>Usage</strong>
The following magic commands are provided:</p>
<p><code>%autoreload</code></p>
<blockquote>
<p>Reload all modules (except those excluded by <code>%aimport</code>) automatically now.</p>
</blockquote>
<p><code>%autoreload 0</code></p>
<blockquote>
<p>Disable automatic reloading.</p>
<p><code>%autoreload 1</code></p>
<p>Reload all modules imported with %aimport every time before executing the &gt;Python code typed.</p>
</blockquote>
<p><code>%autoreload 2</code></p>
<blockquote>
<p>Reload all modules (except those excluded by <code>%aimport</code>) every time before executing the Python code typed.</p>
</blockquote>
<p><code>%aimport</code></p>
<blockquote>
<p>List modules which are to be automatically imported or not to be imported.</p>
</blockquote>
<p><code>%aimport foo</code></p>
<blockquote>
<p>Import module ‘foo’ and mark it to be autoreloaded for <code>%autoreload 1</code></p>
</blockquote>
<p><code>%aimport -foo</code></p>
<blockquote>
<p>Mark module ‘foo’ to not be autoreloaded.</p>
</blockquote>
<p>There is also <a href="https://ipython.org/ipython-doc/dev/interactive/reference.html#recursive-reload" rel="nofollow">dreload</a> which will work for python2 and 3.</p>
<pre><code> dreload(module)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you kill the IPython notebook server and restart it, you will have a new kernel instance which does not persist with your notebook itself.
You should start your workflow right after opening your notebook by running all cells. In the top menu, select "Cell-&gt;Run all"</p>
</div>
<span class="comment-copy">Have you tried <a href="https://docs.python.org/2/library/functions.html#reload" rel="nofollow noreferrer"><code>reload</code></a>?</span>
<span class="comment-copy">How do I use <code>reload</code> in 2.x with a selfmade module? <code>reload(mymodule)</code>, <code>reload('mymodule.py')</code> and <code>reload(readCSVts)</code> all fail with <code>NameError: name 'mymodule' is not defined</code> or <code>TypeError: reload() argument must be module</code></span>
<span class="comment-copy">do <code>import mymodule ; reload(mymodule)</code> .</span>
<span class="comment-copy">Also, <code>reload()</code> needs the module object as it is, not a string..</span>
<span class="comment-copy">Is there also a way to use it when I import like this: <code>from mymodule import readCSVts</code>? I like it better to just import a single thing (<code>readCSVts</code> in this case), so that I can spare me something like <code>import mymodule as foo</code> and then having to write <code>data = foo.readCSVts('file.csv')</code></span>
<span class="comment-copy">you would have to somehow get the <code>module</code> object to reload it, so you can do <code>import mymodule</code> just for reloading it. you can have both <code>from mymodule import &lt;something&gt;</code> as well as <code>import mymodule</code> . Like I said the module would always only be imported once , so it should not cause any other performance issue other than having an extra variable in your namespace.</span>
<span class="comment-copy">Thanks, that's very helpful! But for now I prefer to reload by hand, if needed.</span>
<span class="comment-copy">@JC_CL, <code>dreload</code> will do that, <code>dreload(module)</code> without needing any imports for python2 or 3</span>
<span class="comment-copy">I am just working with "normal" ipython. No notebooks here.</span>
