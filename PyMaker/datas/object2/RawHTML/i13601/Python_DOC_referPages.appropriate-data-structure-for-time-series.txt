<div class="post-text" itemprop="text">
<p>I'm working on an application where I will need to maintain an object's trajectory. Basically, I'd like to have something like a sorted dictionary where the keys are times, and the values are positions. In addition, I'll be doing linear interpolation between existing entries. I've played a little bit with SortedDictionary in Grant Jenks's SortedContainers library, and it does a lot of what I want, but I'm wondering if there are solutions out there that are an even better fit? Thanks in advance for any suggestions.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using <a href="http://pandas.pydata.org" rel="nofollow">pandas</a>, there is <a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html" rel="nofollow">time series support available</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>If your time interval is reliably constant, a list or of course a numpy array can be used.</p>
<p>Otherwise, you could look into ordered dictionaries in the collections module (std lib)</p>
<ul>
<li><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.OrderedDict</a></li>
<li><p><a href="https://docs.python.org/2/library/collections.html" rel="nofollow">https://docs.python.org/2/library/collections.html</a> (Python 2)</p>
<p><strong>class collections.OrderedDict([items])</strong></p></li>
</ul>
<blockquote>
<pre><code>    Return an instance of a dict subclass, supporting the usual dict 
</code></pre>
<p>methods. An OrderedDict is a dict that remembers the order that
  keys were first inserted. If a new entry overwrites an existing entry,
  the original insertion position is left unchanged. Deleting an entry
  and reinserting it will move it to the end.</p>
</blockquote>
</div>
<span class="comment-copy">Thank you, that does look interesting. The times I'll be using will be very basic - essentially simple floating point values starting at 0.0. Will pandas be overkill for that?</span>
<span class="comment-copy">Using numpy itself may be overkill for that, if you're using numpy though, adding pandas is not too much overhead.</span>
<span class="comment-copy">Well, there are other aspects of the application that are going to be more mathematically taxing (e.g. coordinate transforms), so I think I will be wanting numpy. I'll look more deeply at pandas, while giving other people a chance to answer...</span>
<span class="comment-copy">Thanks for the suggestions. So, the time interval is not going to be constant, and there's no guarantee that I'm going to be entering positions in the order that I want them to be maintained (I might want to interpolate a position between two existing ones).</span>
