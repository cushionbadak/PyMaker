<div class="post-text" itemprop="text">
<p><strong>tl;dr</strong> What's a Pythonic (Py 3) way of specifying a large number of defined bit masks and constants? Use an Enum(s) or just have a load of consts as class variables? And the advantages/disadvantages?</p>
<p><strong>Background</strong> </p>
<p>I'm porting C code to Python 3. In the C code there's a large number of defines which are used as bit masks:</p>
<pre><code>#define ERR_1 = 0x8
#define ERR_2 = 0x2
#define ERR_4 = 0x100
...
</code></pre>
<p>I thought in Python a Pythonic way of having these would be by using an <code>Enum</code>, I came across <code>IntEnum</code> which means I don't have to use <code>.value</code> everywhere like I would with a normal <code>Enum</code>:</p>
<pre><code>from enum import IntEnum

class Errors(IntEnum):
    BROKEN = 0x8
    FUBARED = 0x4
    GIVEUP = 0x7

print(0xFF &amp; Errors.BROKEN)
</code></pre>
<p>but it's still more verbose than just having <code>print(0xFF &amp; ERR_1)</code> which I could get if I had them all as consts.</p>
</div>
<div class="post-text" itemprop="text">
<p>It all depends.</p>
<p>If the constants are logically <em>integers</em> (you do arithmetic, bitwise logic, etc. with them), they should be regular global variables.  Flag values fall here, as with the various flags for <a href="https://docs.python.org/3/library/os.html#os.open" rel="nofollow"><code>os.open()</code></a>, but if you're just specifying a constant to indicate which operation to perform, an enum is more appropriate (or better yet, multiple driver functions).</p>
<p>Enumerated types are normally used when you have a (relatively) small set of values, and those values are mostly only compared to one another (e.g. with <code>if x is MyEnum.FIRST... elif x is MyEnum.SECOND</code> etc.).  In this case, you usually do not need <code>IntEnum</code> because you shouldn't be using <code>.value</code> very often to begin with.  Indeed, <code>IntEnum</code> is mostly a backwards-compatibility hack.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think using <code>enum</code> is more pythonic - there was a whole lot of effort put into creating that module, and not without a reason.</p>
<p>"Standard" way of things was using constants (like <code>ERR_1</code>) but this is ugly, buggy and really hard to mantain. This is why that module was developed.</p>
<p>Now that I've stated plain answer, I can also propose that you use both at the same time:</p>
<pre><code>ERR_1 = 0x8
ERR_2 = 0x4
ERR_3 = 0x7

class Errors(IntEnum):
    BROKEN = ERR_1
    FUBARED = ERR_2
    GIVEUP = ERR_3

print(0xFF &amp; Errors.BROKEN)
print(0xFF &amp; ERR_1)
</code></pre>
<p>I think it's ugly, but you were torn between two options, so I wanted to show you how to make them one.</p>
<p>Also worth reading:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/4709175/what-are-enums-and-why-are-they-useful">why use enum at all?</a> - it says "Java", but this is programming in general, not language-depentent issue</li>
<li><a href="https://www.python.org/dev/peps/pep-0435/" rel="nofollow noreferrer">PEP about that module</a> - you can see how many people thought that through and how thorough they were</li>
<li><a href="https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">not "which is more pythonic" but more "how to do it"</a> - with some arguments for using <code>enum</code> module</li>
<li><a href="http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html" rel="nofollow noreferrer">how were they thinking?</a> - "they" meaning "developers of that module"</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Using an <code>Enum</code> is definitely the way to go, and you can even have the enum members at the module scope quite easily:</p>
<pre><code>class Errors(IntEnum):
    BROKEN = 0x8
    FUBARED = 0x4
    GIVEUP = 0x7
globals().update(Errors.__members__)
</code></pre>
<p>so your comparison becomes:</p>
<pre><code>print(0xFF &amp; BROKEN)
</code></pre>
<p>About the only time it makes sense to not use <code>Enum</code> is when you have several names that aren't really duplicates but map to the same value, as the duplicate values will all map to the same name:</p>
<pre><code>class Bad(Enum):
    BROKEN = 0x01
    MISSING = 0x01
    BLUE = 0x01
</code></pre>
<p>But if you have distinct names for unique values <code>Enum</code> is the way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think there is any reason to have them as part of a class.</p>
<p><code>errors</code> module</p>
<pre><code># errors.py
BROKEN = 0x8
FUBARED = 0x4
GIVEUP = 0x7
</code></pre>
<p><code>main</code> module</p>
<pre><code>import errors

print(0xFF &amp; errors.BROKEN)
</code></pre>
</div>
<span class="comment-copy">If you want them less verbose you could name them <code>e1</code>, <code>e2</code> and <code>e4</code> (with the C codes) and use them as <code>Errors.e2</code>. Anyway, I think the enum is the way to go, and vervose is always good (specially if you plan to grow/mantain the software).</span>
