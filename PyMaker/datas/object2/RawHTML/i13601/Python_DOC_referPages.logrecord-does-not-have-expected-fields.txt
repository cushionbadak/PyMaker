<div class="post-text" itemprop="text">
<p>In Python using the "logging" module, the documentation promises that LogRecord instances will have a number of attributes, which are explicitly listed in the documentation.</p>
<p>However, it appears that this is not always true. When I do not use the logging module's 'basicConfig()' method, the program below shows that the attributes 'asctime' and 'message' are not present in the LogRecords that are passed to the LogHandler's 'emit' method.</p>
<pre><code>import logging

class LoggingHandler(logging.Handler):
    def __init__(self):
        logging.Handler.__init__(self)
    def emit(self, record):
        assert isinstance(record, logging.LogRecord)
        print("LoggingHandler received LogRecord: {}".format(record))

        # List of LogRecord attributes expected when reading the
        # documentation of the logging module:

        expected_attributes = \
            "args,asctime,created,exc_info,filename,funcName,levelname," \
            "levelno,lineno,module,msecs,message,msg,name,pathname," \
            "process,processName,relativeCreated,stack_info,thread,threadName"

        for ea in expected_attributes.split(","):
            if not hasattr(record, ea):
                print("UNEXPECTED: LogRecord does not have the '{}' field!".format(ea))


loggingHandler = LoggingHandler()
rootLogger = logging.getLogger()
rootLogger.addHandler(loggingHandler)

# emit an WARNING message
logging.warning("WARNING MESSAGE")
</code></pre>
<p>Running this on Python 3 gives:</p>
<pre><code>$python3 test_logging.py
LoggingHandler received LogRecord: &lt;LogRecord: root, 30, test_logging.py, 28, "WARNING MESSAGE"&gt;
UNEXPECTED: LogRecord does not have the 'asctime' field!
UNEXPECTED: LogRecord does not have the 'message' field!
</code></pre>
<p>What is going on here? Did I misunderstand the documentation? What needs to be done to make sure that the LogRecord instances have the 'asctime' and 'message' attributes as promised?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is responsibility of the <a href="https://docs.python.org/3/library/logging.html#logging.Formatter" rel="nofollow"><code>Formatter</code></a> to set <code>asctime</code> and <code>message</code> so prior to calling <code>self.format(record)</code>, those attributes are undefined. From the doc of the <a href="https://docs.python.org/3/library/logging.html#logging.Formatter.format" rel="nofollow"><code>format</code></a> method:</p>
<blockquote>
<p>The recordâ€™s attribute dictionary is used as the operand to a string
  formatting operation. Returns the resulting string. Before formatting
  the dictionary, a couple of preparatory steps are carried out. The
  message attribute of the record is computed using msg % args. If the
  formatting string contains '(asctime)', formatTime() is called to
  format the event time.</p>
</blockquote>
<p><strike>Since your example code does not call <code>self.format(record)</code> it is therefore expected behaviour that those attributes are undefined.</strike></p>
<p>To have <code>message</code> and <code>asctime</code> set, you must first call <code>self.format(record)</code> inside the <code>emit</code> method. Please try </p>
<pre><code>import logging

class LoggingHandler(logging.Handler):
    def emit(self, record):
        assert isinstance(record, logging.LogRecord)
        print("LoggingHandler received LogRecord: {}".format(record))

        self.format(record)

        # List of LogRecord attributes expected when reading the
        # documentation of the logging module:

        expected_attributes = \
            "args,asctime,created,exc_info,filename,funcName,levelname," \
            "levelno,lineno,module,msecs,message,msg,name,pathname," \
            "process,processName,relativeCreated,stack_info,thread,threadName"

        for ea in expected_attributes.split(","):
            if not hasattr(record, ea):
                print("UNEXPECTED: LogRecord does not have the '{}' field!".format(ea))


formatter = logging.Formatter("%(asctime)s")
loggingHandler = LoggingHandler()
loggingHandler.setFormatter(formatter)
rootLogger = logging.getLogger()
rootLogger.addHandler(loggingHandler)

# emit an WARNING message
logging.warning("WARNING MESSAGE")
</code></pre>
</div>
<span class="comment-copy">Thanks for your answer, it explains what is happening.  I must disagree however that the behavior observed is the expected behavior; the attribute list does not mention this prerequisite at all.  Also, the documentation fragment as quoted does not mention the 'asctime' attribute.</span>
<span class="comment-copy">@reddish I agree that the documentation is not very clear about this aspect, if not wrong, but inspecting the <code>logging</code> source code you clearly see that this is intended behaviour. In such cases I consider the source code as "normative"and not the docs. BTW I'm not the <code>logging</code> module author, so this is just my opinion. Maybe I should edit the answer?</span>
<span class="comment-copy">the answer is fine and helpful, thank you. I think we agree that the docs could be more explicit about this. Perhaps I will file a report in the appropriate place if I have time.</span>
