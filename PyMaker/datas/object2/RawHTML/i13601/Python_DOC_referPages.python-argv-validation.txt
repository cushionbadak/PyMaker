<div class="post-text" itemprop="text">
<p>I need to check if the user is giving the input file and the name of the output, and I'm doing the following:</p>
<pre><code>def main():
    if len(argv) &gt; 2:
        script, file_in, file_out = argv
        execute_code(file_in, file_out)
    else:
        print "Wrong number of arguments!"
        print "Usage: python script.py filename_input filename_output"


if __name__ == '__main__':
    main()
</code></pre>
<p>Is there other way to check if the <code>argv</code> arguments are correct?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a>:</p>
<blockquote>
<p>The <em>argparse</em> module makes it easy to write user-friendly command-line
  interfaces. The program defines what arguments it requires, and
  <em>argparse</em> will figure out how to parse those out of <em>sys.argv</em>.</p>
</blockquote>
<p>For example your <code>main</code> function could be rewritten as</p>
<pre><code>import argparse

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('file_in', help='input file')
    parser.add_argument('file_out', help='output file')
    args = parser.parse_args()
    execute_code(args.file_in, args.file_out)

if __name__ == '__main__':
    main()
</code></pre>
<p><code>argparse</code> will perform validation for you and display fairly helpful error messages if some of the required arguments are missing:</p>
<pre class="lang-none prettyprint-override"><code>vaultah@base:~$ python3 /home/vaultah/untitled.py
usage: untitled.py [-h] file_in file_out
untitled.py: error: the following arguments are required: file_in, file_out
vaultah@base:~$ python3 /home/vaultah/untitled.py in
usage: untitled.py [-h] file_in file_out
untitled.py: error: the following arguments are required: file_out
</code></pre>
<p>Additionally, it will generate a help message</p>
<pre><code>vaultah@base:~$ python3 /home/vaultah/untitled.py -h
usage: untitled.py [-h] file_in file_out

positional arguments:
  file_in     input file
  file_out    output file

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While it's a little more work, you might want to consider using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a>.</p>
<p>You code would become:</p>
<pre><code>import argparse

def execute_code(file_in, file_out):
    pass

def main():
    parser = argparse.ArgumentParser(description='Process some files.')
    parser.add_argument('file_in',  help='input file')
    parser.add_argument('file_out',  help='output file')
    args = parser.parse_args()
    execute_code(args.file_in, args.file_out)

if __name__ == '__main__':
    main()
</code></pre>
<p>Running the program with no arguments:
<code>python demo.py</code></p>
<p>Yields:</p>
<pre><code>usage: demo.py [-h] file_in file_out
demo.py: error: the following arguments are required: file_in, file_out
</code></pre>
<p>Running the program with the <code>-h</code> flag:</p>
<p><code>python demo.py -h</code></p>
<p>Yields:</p>
<pre><code>usage: demo.py [-h] file_in file_out

Process some files.

positional arguments:
  file_in     input file
  file_out    output file

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use argparse; ideally, use <a href="https://docs.python.org/2/library/argparse.html#filetype-objects" rel="nofollow">argparse.FileType</a> to open files automatically from command-line arguments. </p>
<p>If the arguments don't make sense as open files, you can catch the exception thrown.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also specify the option required=True to make the arguments mandatory. This will throw an error if the required arguments are not specified. Here is an example:</p>
<pre><code>parser.add_argument("--required_arg",
                    required=True,
                    help="The argument which is mandatory")
</code></pre>
<p>For checking the path of the input and output files, you can use the following code:</p>
<pre><code> if not os.path.exists(file_name):
    error_message =  file_name + " does not exist \n";
</code></pre>
<p>You can also look at <a href="https://bhavaniabtechie.wordpress.com/2013/08/26/python-parsing-arguments-through-argparse/" rel="nofollow">my blog Techable</a> for more information on argument parser in python. </p>
</div>
<span class="comment-copy">Of course there is. You could try to use them and catch and report any exceptions. You could explicitly check types or duck-type them. What are you really asking?</span>
<span class="comment-copy">I want to know if exists more elegants or correct ways to achieve it.</span>
<span class="comment-copy">My point is "to achieve what?" To validate that the <i>number of arguments passed</i> is correct? Not really. To validate that the arguments are the types of things you expect? Maybe/probably, but it's impossible to tell from your example because no one knows what <code>execute_code</code> expects.</span>
