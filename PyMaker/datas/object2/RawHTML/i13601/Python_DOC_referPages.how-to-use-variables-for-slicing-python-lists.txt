<div class="post-text" itemprop="text">
<p>I have got a harmless list "mylist" of six items. Never empty, never any beastly items.</p>
<pre><code>mylist = ['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff']
</code></pre>
<p>I found that there are two ways to index a list for slicing purposes. For this question I shall call them <strong>upper index (from 0 to 5)</strong> and <strong>lower index (from -1 to -6)</strong>. Here is a quick diagram (I had posted a photo with colors, which was replaced by another user):</p>
<pre><code> &lt;&lt;&lt;&lt;|_________mylist[5:?:-1]_____________|

     |___mylist[0:3:1]______|&gt;&gt;&gt;&gt;&gt;&gt;
 ?
(x)   0      1      2      3      4      5     (6)

     aaa    bbb    ccc    ddd    eee    fff

(-7) -6     -5     -4     -3     -2     -1     (y)
                                                ?
             &lt;&lt;&lt;&lt;&lt;&lt;|___mylist[-1:-5:-1]___|

     |______mylist[-6:?:1]________________|&gt;&gt;&gt;&gt;&gt;
</code></pre>
<p>For easily slicing at the start of my list, I can use the upper index like this:</p>
<pre><code>&gt;&gt;&gt; mylist[0:3:1]
['aaa', 'bbb', 'ccc']
</code></pre>
<p>For easily slicing near the end, I find the lower index helpful, like:</p>
<pre><code>&gt;&gt;&gt; mylist[-1:-5:-1]
['fff', 'eee', 'ddd', 'ccc']
</code></pre>
<p>By "easily" I mean for example the aspect of not concerning my code with the length of the list.</p>
<p>I learnt that Python slicing is "always holding back" (also known as "up to but not including"). I am showing this in my diagram as the "arrow-heads" pointing from the end of a slice to the "next item" ahead ("ahead" in the sense/direction of the slicing).</p>
<p>For my users I need to show the first so many items from my list. (Those are the results from a recursive search and evaluate and sort run.) Because normally this list is rather long, I do print it <strong>backwards</strong> (in the console), so that when the script ends, the best <code>n</code> results will still be visible on the screen. So my step is <code>-1</code> in this context.</p>
<p>I would like to use variables, to allow for different needs for different users (and different screen sizes). <strong>For debugging and for certain users I want to be able to print all results, i.e. the entire list backwards.</strong> I would like something in this syntax:</p>
<pre><code>start = 5     # I only need to know "5" for debugging, normally I can use
              # any small number to show a few selected items of mylist

end = x       # this is my main question, see photo

mylist[start:end:-1]
</code></pre>
<p><strong>My question is please, how do I write the first(topmost) slice in the diagram, <em>by using variables</em> and <em>by using the upper list</em> of indices?</strong> Or in other words, <strong>what is the numerical value of <code>x</code> (and <code>y</code>)</strong> in the diagram?</p>
<p>Semi-solutions that I do not want to use:</p>
<pre><code>mylist[5::-1]       # no variable at all

mylist[5:None:-1]   # does not fit in my normal function for printing
</code></pre>
<p>I have not managed to use <code>None</code> in any simple operations with my variables, it gives me errors like:</p>
<pre><code>    end = None - 20 
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
</code></pre>
<p>And I have not managed to convert <code>None</code> to any integer or other number. Is there a way? Would probably be a sacrilege in Pythonland...</p>
<p><strong>If I cannot find the secret number of <code>x</code>, then I might need to work with this:</strong></p>
<pre><code>mylist[-1:-7:-1]  # I want to use the upper index rather
</code></pre>
<p>But this approach involves checking the length of <code>mystring</code>.</p>
<pre><code>end = -1 * (len(mystring)+1)  # extra-explicit as an example
returns  -7

mystring[-1:end:-1]

returns  ['fff', 'eee', 'ddd', 'ccc', 'bbb', 'aaa']  # this is the output I want, just not the method
</code></pre>
<p><strong>What I have done before asking you:</strong><br/>
I have written a testing-script and have tried guessing <code>x</code>. I have searched and read up plenty on slicing and variables here on Stack Overflow (like  <a href="https://stackoverflow.com/q/31740252/5227835">when use negative number to slice a string in Python, 0 is disabled?</a>) and online (like <a href="https://docs.python.org/3/library/functions.html?highlight=slice#slice" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html?highlight=slice#slice</a>) and I searched through ebooks like Introducing Python and Learning Python.</p>
<p><strong>A plea:</strong><br/>
Please do not tell me that what I want is wrong. I can slice <code>mylist[0:6:1]</code> although there is no item indexed <code>6</code> in my example list, same for <code>-7</code>. This is why I have this hunch that there might be numbers for <code>x</code> and for <code>y</code> too, which I could use in my variables.  </p>
<p>You are welcome to tell me that it does not exist or cannot be done the way I would prefer. In the latter case, I am also asking you for alternatives, as close to my request as possible.</p>
<p><strong>Background for those who want more:</strong><br/>
This question is more about "figuring out slicing" than about making the printout possible. I do have workarounds, but would love to find out more.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understood your question correctly, you want <em>y</em> such that</p>
<pre><code>mylist[2:y:-1] == ['ccc', 'bbb', 'aaa']
</code></pre>
<p>where <em>y</em> must be an integer.</p>
<p>The <em>y</em> you are looking for is <code>-len(mylist)-1</code> or a lower integer. If you need a constant, you could use <code>-sys.maxsize</code> (as it is impossible to have lists larger than <code>maxsize</code>).</p>
<hr/>
<p>If we look at CPython's source code, we can see that <a href="https://hg.python.org/cpython/file/3.4/Objects/listobject.c#l2421" rel="nofollow"><code>list</code> objects internally use the function <code>PySlice_GetIndicesEx</code></a>. In order to do what you want, <a href="https://hg.python.org/cpython/file/3.4/Objects/sliceobject.c#l193" rel="nofollow"><code>PySlice_GetIndicesEx</code></a> must set <em>step = -1</em>, <em>start = 2</em> and <em>slicelength = 3</em>.</p>
<p><em>start = 2</em> and <em>step = -1</em> are already set by your code. Are there values for <em>y</em> that can lead to <em>slicelength = 3</em>? Let's see...</p>
<p>When <em>step</em> is negative, the line that calculates <em>slicelength</em> is <a href="https://hg.python.org/cpython/file/3.4/Objects/sliceobject.c#l250" rel="nofollow">this one</a>:</p>
<pre><code>*slicelength = (*stop-*start+1)/(*step)+1;
</code></pre>
<p>From here, we can see that in order to have <em>slicelength = (stop - start + 1) / step + 1 = 3</em>, we must have <em>stop = -1</em>. However, <a href="https://hg.python.org/cpython/file/3.4/Objects/sliceobject.c#l240" rel="nofollow">the case <em>stop &lt; 0</em> is treated specially</a>:</p>
<pre><code>if (*stop &lt; 0) *stop += length;
if (*stop &lt; 0) *stop = (*step &lt; 0) ? -1 : 0;
</code></pre>
<p>So, if we provide a negative <em>stop</em>, it gets increased by <code>len(mylist)</code>. If <em>stop</em> is still negative it is set to <em>-1</em>, which is the value we need.</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is: <strong>No</strong>.</p>
<hr/>
<p>You have to use <code>None</code> if you don't want to calculate the length of the list (although that's an <code>O(1)</code> operation in Python):</p>
<pre><code>&gt;&gt;&gt; mylist = ['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff']
&gt;&gt;&gt; mylist[2:None:-1]  # first 3 items backwards (note off-by-one indexing)
['ccc', 'bbb', 'aaa']
&gt;&gt;&gt; mylist[None:None:-1]  # all items backwards
['fff', 'eee', 'ddd', 'ccc', 'bbb', 'aaa']
</code></pre>
<hr/>
<p>You <em>could</em> use a placeholder for <em>"the whole thing"</em>, e.g. <code>0</code>:</p>
<pre><code>&gt;&gt;&gt; end = 3
&gt;&gt;&gt; mylist[end - 1 if end else None::-1]
['ccc', 'bbb', 'aaa']
&gt;&gt;&gt; end = 0
&gt;&gt;&gt; mylist[end - 1 if end else None::-1]
['fff', 'eee', 'ddd', 'ccc', 'bbb', 'aaa']
</code></pre>
<hr/>
<p>You could also consider two steps, i.e. take the slice you want <em>then</em> reverse it:</p>
<pre><code>&gt;&gt;&gt; mylist[:3][::-1]
['ccc', 'bbb', 'aaa']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just make a default value and if the user changes the default (max) then change your variable.</p>
<pre><code>&gt;&gt;&gt; mylist = ['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff']
&gt;&gt;&gt; display_num = len(mylist)
&gt;&gt;&gt; mylist[display_num-1::-1]
['fff', 'eee', 'ddd', 'ccc', 'bbb', 'aaa']
</code></pre>
<p>Change the display_num variable to the number of results you want to show.</p>
<pre><code>&gt;&gt;&gt; display_num = 4
&gt;&gt;&gt; mylist[display_num-1::-1]
['ddd', 'ccc', 'bbb', 'aaa']
</code></pre>
<p>I think your options are None or the length of the list.</p>
<p>... or just use a try catch</p>
<pre><code>&gt;&gt;&gt; display_num = None
&gt;&gt;&gt; try:
&gt;&gt;&gt;     mylist[display_num-1::-1]
&gt;&gt;&gt; except TypeError:
&gt;&gt;&gt;     mylist[::-1]
</code></pre>
</div>
<span class="comment-copy">...what?! Are you saying that you want the first <code>n</code> items of your sequence, in reverse order? Why not <code>seq[:n][::-1]</code> (i.e. get the first <code>n</code> items, <i>then</i> reverse them - note that you can leave out some of the numbers, see e.g. <a href="http://stackoverflow.com/q/509211/3001761">stackoverflow.com/q/509211/3001761</a>)? And could you transfer the content from the photo to actual text, please; the former is profoundly unhelpful for users with e.g. screenreaders.</span>
<span class="comment-copy">@jonrsharpe: thanks, yes the first n items normally, and sometimes all items, and always in reverse. I do not understand how "leaving out some of the numbers" will help me for using variables - my question is not about typing less code; please explain.</span>
<span class="comment-copy">@jonrsharpe: Do you have a link to some syntax help for making my graph into text, keeping the alignements and the colours and arrow-heads, etc.? How would it be read out by a screenreader then? Do you have any examples which you consider good or helpful? I am willing to learn, even though I spent a lot of time on my question to make clear what I have and what I search for.  Is there a rule here that questions must be accessible to a maximum number of users (or all users?), including those with special setups?</span>
<span class="comment-copy">If you want to have inclusive slice you need to use <code>None</code>. If by using <code>None</code> you're getting errors, I think you should be looking at that part of the problem and not trying to replace <code>None</code>. So it's the way that you're generating those indices that needs to change to support <code>None</code>.</span>
<span class="comment-copy">You wrote quite a lot so I don't quite understand what you're asking, but if you always need the items in reverse why don't you just access them as normal and use <code>reversed</code> such as <code>reversed(mylist[:x])</code>?</span>
<span class="comment-copy">awesome. It is risky to declare that no solution exists to a given question with its specific context (and you are taking my curiosity about slicing-syntax seriously). So your approach to look at the source and the way you clearly show it to not-developers is most helpful. I was afraid that there is no answer, and I am glad that I did not just overlook something. I was hoping for some inbuilt hidden "alias" or whatever, as those exist in languages and normally one needs to be told; hard to guess those.</span>
<span class="comment-copy">@MartinZaske: I updated the answer. Probably it contains the solution you need, though I'm not sure.</span>
<span class="comment-copy">I was not criticising your initial opening statement, but rather complementing you. A doctor can never say "You got no sickness." or "There is no cure for this." but a mathematician can say "There is no solution." when he can prove it. Thank you again for giving the evidence.</span>
<span class="comment-copy">@MartinZaske: I appreciated your comment. I was just pointing out that I didn't carefully read all the source before answering.</span>
<span class="comment-copy">Yes, None is the closest I have come myself, as I have written in my question. I just cannot do anything mathematical with it, like I can with integers in variables. That is why I have asked whether there is a "number" or numerical equivalent (or alternative expression) for None. At least I can assign None to my end-variable, so that is one step towards a nice solution.</span>
<span class="comment-copy">@MartinZaske then the answer is <i>"no"</i>. Frankly, I think you may have overcomplicated what is in essence a simple question, making it much more difficult than it needs to be to answer.</span>
<span class="comment-copy">@MartinZaske I suppose could use a dummy value (say, use <code>0</code> for <i>"all items"</i>), then have e.g. <code>mylist[end - 1 if end else 0::-1]</code>. It's also not clear what the problem with leaving out values is.</span>
<span class="comment-copy">@MartinZaske although frankly, the <i>slice then reverse</i>, either with a second slice or <code>reversed</code>, is <b>so much easier</b>.</span>
<span class="comment-copy">sorry, if you perceive it as too complicated. I see so many questions where a lot of information is missing ("what does your data look like?" "how do you want your output?") and then any later reader needs to puzzle it together from the initial question and from the exchange in the comments. I was afraid that the answer is "no" but if that is the case, at least I was not too stupid to find it.    I wanted to avoid that users would give me tangent answers like "use the backwards index", or "use None" by assuming that I had not done my homework.</span>
<span class="comment-copy">I like your help with the actual examples how to handle it. And I observe that you always leave the "critical place" (end of slice) empty as in :: Which is maybe your indirect way of saying "There is no numerical alias for None in the context of Python list-slicing"?</span>
