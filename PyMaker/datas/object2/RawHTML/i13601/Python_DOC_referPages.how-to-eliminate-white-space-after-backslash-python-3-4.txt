<div class="post-text" itemprop="text">
<p>Looking for some advice for text formatting. I am trying to print the results of a simple unit conversion (imperial to metric) but keep getting all these spaces when trying to print the double apostrophe symbol.</p>
<p>Code:</p>
<pre><code>print("You entered ", imp_height_flt, "\" which converts into " \
    "%.2f" % imp_height_converted, "m.")
</code></pre>
<p>When I run the program I get:</p>
<pre><code>You entered  5.9 " which converts into 1.80 m.
</code></pre>
<p>I'm trying to eliminate that space between the 9 and the double apostrophe.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use formatting for the whole string:</p>
<pre><code>print("You entered %.1f\" which converts into "
      "%.2fm." % (imp_height_flt, imp_height_converted))
</code></pre>
<p>or you could tell the <code>print()</code> function to not use spaces as separator:</p>
<pre><code>print("You entered ", imp_height_flt, "\" which converts into "
      "%.2f" % imp_height_converted, "m.",
      sep='')
</code></pre>
<p>The default for the <code>sep</code> argument is <code>' '</code>, a space, but you can set it to an empty string.</p>
<p>Note that the backslash at the end of the first line is not needed at all since the <code>(..)</code> parentheses form a logical line already.</p>
<p>Personally, I'd use the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a> for the string template here; it is a more flexible and powerful method for interpolating values into a string:</p>
<pre><code>print('You entered {:.1f}" which converts into '
      '{:.2f}m.'.format(imp_height_flt, imp_height_converted))
</code></pre>
<p>I also used <em>single</em> quotes to form the string literal, so that the embedded <code>"</code> doesn't have to use a backslash either.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; imp_height_flt, imp_height_converted = 5.9, 1.8
&gt;&gt;&gt; print("You entered %.1f\" which converts into "
...       "%.2fm." % (imp_height_flt, imp_height_converted))
You entered 5.9" which converts into 1.80m.
&gt;&gt;&gt; print("You entered ", imp_height_flt, "\" which converts into "
...       "%.2f" % imp_height_converted, "m.",
...       sep='')
You entered 5.9" which converts into 1.80m.
&gt;&gt;&gt; print('You entered {:.1f}" which converts into '
...       '{:.2f}m.'.format(imp_height_flt, imp_height_converted))
You entered 5.9" which converts into 1.80m.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; imp_height_flt = 5.9
&gt;&gt;&gt; imp_height_converted = 1.80134334
&gt;&gt;&gt; print('You entered {}" which converts into {:.2f} m.'.format(imp_height_flt, imp_height_converted))
You entered 5.9" which converts into 1.80 m.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the '+' operator:</p>
<pre><code>print("You entered " + str(imp_height_flt) + "\" which converts into " \
    "%.2f" % imp_height_converted, "m.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to fix that is just do two string formats.</p>
<pre><code>print ("You entered %.2f\" which converts into %.2fm." % (imp_height_flt, imp_height_converted))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers work (and the real issue is the comma-separated args to <code>print</code>), but I'd also recommend formatting with <code>format</code> since the <code>%</code> string formatting can sometimes cause problems (and eventually is going away?):
<a href="https://docs.python.org/3.4/library/stdtypes.html#old-string-formatting" rel="nofollow">https://docs.python.org/3.4/library/stdtypes.html#old-string-formatting</a></p>
<p>Another note, you can use single quotes <code>'</code> for your format string and then you don't have to escape the double quote <code>"</code>.</p>
<p>For example:</p>
<pre><code>height_fmt = 'You entered {}" which converts into {:.2f}m.'
print(height_fmt.format(imp_height_flt, imp_height_converted))
</code></pre>
<p>Output is:</p>
<pre><code>You entered 5.9" which converts into 1.80m.
</code></pre>
<p>For all your fun options with <code>format</code> see:
<a href="https://docs.python.org/3.4/library/string.html#format-specification-mini-language" rel="nofollow">https://docs.python.org/3.4/library/string.html#format-specification-mini-language</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is not an escaping problem. This happens because you devided print's arguments with comma, which does writing to stdout in blocks and appending space instead of new line.
Like this:</p>
<pre><code>import sys
args = ("Hello", "world", 123)
for x in args: sys.stdout.write(str(x)+" ")
</code></pre>
<p>To avoid this you have to use one string instead of all you used.
Add them together using "+" operator. Convert ints and floats to str() before and all will be fine:</p>
<pre><code>print("You entered "+str(imp_height_flt)+("\" which converts into %.2f" % imp_height_converted)+" m.")
</code></pre>
<p>But much better solution would be to use formating as this:</p>
<pre><code>print("You entered %.2f\" which converts into %.2f m." % (imp_height_flt, imp_height_converted))
</code></pre>
<p>You can avoid even escaping by using single quotes:</p>
<pre><code>print('You entered %.2f" which converts into %.2f m.' % (imp_height_flt, imp_height_converted))
</code></pre>
</div>
<span class="comment-copy">This has nothing to do with the backslash.</span>
<span class="comment-copy">You should check out the <a href="https://docs.python.org/3.4/tutorial/inputoutput.html" rel="nofollow noreferrer">Doc</a>. See this also: <a href="http://learnpythonthehardway.org/book/ex6.html" rel="nofollow noreferrer">learnpythonthehardway.org/book/ex6.html</a></span>
