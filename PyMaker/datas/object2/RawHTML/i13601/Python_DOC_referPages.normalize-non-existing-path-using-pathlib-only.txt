<div class="post-text" itemprop="text">
<p>python has recently added the <a href="https://docs.python.org/3.4/library/pathlib.html#module-pathlib">pathlib</a> module (which i like a lot!).</p>
<p>there is just one thing i'm struggling with: is it possible to normalize a path to a file or directory that does not exist? i can do that perfectly well with <code>os.path.normpath</code>. but wouldn't it be absurd to have to use something other than the library that should take care of path related stuff?</p>
<p>the functionality i would like to have is this:</p>
<pre><code>from os.path import normpath
from pathlib import Path
pth = Path('/tmp/some_directory/../i_do_not_exist.txt')
pth = Path(normpath(str(pth)))
# -&gt; /tmp/i_do_not_exist.txt
</code></pre>
<p>but without having to resort to <code>os.path</code> and without having to type-cast to <code>str</code> and back to <code>Path</code>. also <code>pth.resolve()</code> does not work for non-existing files.</p>
<p>is there a simple way to do that with just <code>pathlib</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is it possible to normalize a path to a file or directory that does not exist?</p>
</blockquote>
<p>Starting from 3.6, it's the default behavior. See <a href="https://docs.python.org/3.6/library/pathlib.html#pathlib.Path.resolve" rel="noreferrer">https://docs.python.org/3.6/library/pathlib.html#pathlib.Path.resolve</a></p>
<blockquote>
<p>Path.<strong>resolve</strong><em>(strict=False)</em><br/>
  ...<br/>
  If <code>strict</code> is <code>False</code>, the path is resolved as far as possible and any remainder is appended without checking whether it exists</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.5: No, there's not. </p>
<p><a href="https://www.python.org/dev/peps/pep-0428/" rel="nofollow noreferrer">PEP 0428</a> states:</p>
<blockquote>
<h1>Path resolution</h1>
<p>The resolve() method makes a path absolute, resolving
  any symlink on the way (like the POSIX realpath() call). <strong>It is the
  only operation which will remove " .. " path components</strong>. On Windows,
  this method will also take care to return the canonical path (with the
  right casing).</p>
</blockquote>
<p>Since <code>resolve()</code> is the only operation to remove the ".." components, and it fails when the file doesn't exist, there won't be a simple means using just <code>pathlib</code>.</p>
<p>Also, the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib documentation</a> gives a hint as to why:</p>
<blockquote>
<p>Spurious slashes and single dots are collapsed, but double dots ('..')
  are not, since this would change the meaning of a path in the face of
  symbolic links:</p>
<p><code>PurePath('foo//bar')</code> produces <code>PurePosixPath('foo/bar')</code></p>
<p><code>PurePath('foo/./bar')</code> produces <code>PurePosixPath('foo/bar')</code></p>
<p><code>PurePath('foo/../bar')</code> produces <code>PurePosixPath('foo/../bar')</code> </p>
<p>(<strong>a na√Øve approach would make PurePosixPath('foo/../bar') equivalent to PurePosixPath('bar'), which is wrong if foo is a symbolic link to another directory</strong>)</p>
</blockquote>
<p>All that said, you could create a 0 byte file at the location of your path, and then it'd be possible to resolve the path (thus eliminating the ..). I'm not sure that's any simpler than your normpath approach, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>If this fits you usecase(e.g. ifle's directory already exists) you might try to <code>resolve</code> path's parent and then re-append file name, e.g.:</p>
<pre><code>from pathlib import Path

p = Path()/'hello.there'
print(p.parent.resolve()/p.name)
</code></pre>
</div>
<span class="comment-copy"><code>pathlib</code> itself calls <code>normpath()</code> internally in the <code>.resolve()</code> method i.e., you probably can't normalize non-existing paths using pathlib only.</span>
<span class="comment-copy">cool! thanks! can't test it right now - not yet on python 3.6.</span>
<span class="comment-copy">You can use <code>pathlib2</code>, which is simply a backport of the latest <code>pathlib</code> to pythons 2.6+.  However, you should also know that this isn't the same as <code>normpath</code>.  Since it resolves the link as far as it can, and the current dir is always resolvable, relative paths will always end up as absolute, whether that truly matches anything or not.  This is a case of taking the worst of both worlds, so I'd avoid using the <code>resolve()</code> method of <code>pathlib</code> except when <code>strict=True</code>, until this API is stabilized.</span>
<span class="comment-copy">In fact this is not exactly the same as os.path.normpath()! First of all it is converting the path to an absolute path (if possible). Second it resolves symbolic links (if possible)!</span>
