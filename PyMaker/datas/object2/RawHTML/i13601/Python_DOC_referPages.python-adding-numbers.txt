<div class="post-text" itemprop="text">
<p>Why does</p>
<pre><code>import sys

class k:
    x = int(sys.argv[1])
    y = int(sys.argv[2])
    z = 0

def add():
        k.z = k.x + k.y

def main():   
    add()
    print  (k.z)

if __name__ == "__main__" : main()
</code></pre>
<p>Give me 10 when I use the number 5 and 5 at command, and </p>
<pre><code>class k:
x = 0
y = 0
z = 0
def add():
    k.z  = k.x + k.y

def main():   
    k.x = input("Enter a number")
    k.y = input("Enter another number")    
    add()
    print  (k.z)

if __name__ == "__main__" : main()
</code></pre>
<p>Gives me 55 when I enter 5 and 5 on the prompts.</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because on your second example, both <code>x</code> and <code>y</code> are  strings (so <code>'5'+'5' = '55'</code>)</p>
<h3>To fix this:</h3>
<pre><code>def main():   
    value = input("Enter a number")
    k.x = int(value)

    value = input("Enter another number")
    k.y = int(value) 

    add()
    print  (k.z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the second example, you forgot yo typecast the input to <code>int</code>, since the <code>input()</code> returns a <code>str</code> object and the <code>+</code> operator concatenates the strings.</p>
<pre><code>def main():   
    k.x = int(input("Enter a number"))
    k.y = int(input("Enter another number"))    
    add()
</code></pre>
</div>
<span class="comment-copy">FWIW, in Python, it's usual practice to create an instance of a class &amp; work with that, rather than working directly with the class and manipulating class attributes like your code does. Of course, one wouldn't normally even bother using a class for something simple like this, except as a learning exercise. For further info please see <a href="https://docs.python.org/3/tutorial/classes.html#class-objects" rel="nofollow noreferrer">Class Objects</a> in the official Python tutorial.</span>
<span class="comment-copy">Thanks for your reply.</span>
<span class="comment-copy">Thank your very much! So even if I declare that the values are 'int' originally I have to declare again that the value coming in is an 'int' when I go to the input step?</span>
<span class="comment-copy">You don't declare variables in Python. In your code you set them to integers, but they are just names which point to values and the name can be pointed to other values regardless of their type at any time in your code without any warning.</span>
