<div class="post-text" itemprop="text">
<p>I apologise for the complexity of this question, but it is a massive challenge for me being very new to Python:</p>
<p>I have an external file that stores lines of text: <code>input.txt</code></p>
<pre><code>min: 1,2,3,5,6
max: 1,2,3,5,6
avg: 1,2,3,5,6
</code></pre>
<p>I read the content of the file into various lists in a new variable called <code>input_data</code> like this:</p>
<pre><code>input_data = []
with open('input.txt') as inputfile:
    for line in inputfile:
        input_data.append(line.strip().split(','))
</code></pre>
<p>The result for <code>input_data</code> is as follows:</p>
<pre><code>[['min: 1', '2', '3', '5', '6'], ['max: 1', '2', '3', '5', '6'], ['avg: 1', '2', '3', '5', '6']]
</code></pre>
<p>So I have one variable with 3 lists stored in it. </p>
<p>How do I remove the ":" after 'min', 'max' and 'avg'?</p>
<p>I have tried: </p>
<pre><code>input_data = input_data.replace(":",",")
</code></pre>
<p>Also, how do I keep <code>min</code>, <code>max</code> and <code>avg</code> as strings, but change the numbers in the lists to integers? eg.</p>
<pre><code>['min', 1, 2, 3, 5, 6]  
</code></pre>
<p>'min' string and all numbers integers</p>
</div>
<div class="post-text" itemprop="text">
<p>Just split on the colon then map the rest to int after splitting on a comma:</p>
<pre><code>with open("in.txt") as f:
    for line in f:
        a, rest = line.split(":",1)
        print([a] + map(int,rest.split(",")))
</code></pre>
<p>Output:</p>
<pre><code>['min', 1, 2, 3, 5, 6]
['max', 1, 2, 3, 5, 6]
['avg', 1, 2, 3, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To start with, I'd suggest split it differently. To keep the word and first value separated, convert the space to a comma so it'll split correctly. In this case, you could probably convert ": " to a comma so it'll automatically remove the colon.</p>
<pre><code>input_data = line.strip().replace(': ', ',').split(',')
</code></pre>
<p>Then to convert all necessary values to integers, you could do it in loads of ways, but here's two examples:</p>
<pre><code>input_data = [input_data[0]] + [int(i) for i in input_data[1:]]
input_data = [int(i) for i if i.isdigit() else i for i in input_data]
</code></pre>
<p>Alternatively if you didn't do the bit at the start and still have a colon, this is how you could get rid of it with a tweak to one of the above methods:</p>
<pre><code>input_data = [int(i) for i if i.isdigit() else i.replace(':', '') for i in input_data]
</code></pre>
<p>And finally, this should hopefully work with your code:</p>
<pre><code>input_data = []
with open('input.txt') as inputfile:
    for line in inputfile:
        input_data.append([int(i) for i if i.isdigit() else i for i in line.strip().split(',')])
</code></pre>
<p>Or if needed, a slightly shorter version:</p>
<pre><code>with open('input.txt') as inputfile:
    input_data = [[int(i) for i if i.isdigit() else i for i in line.strip().split(',')] for line in inputfile]
</code></pre>
<p>Symmitchry's answer is probably a bit better though, splitting it into the two seconds didn't cross my mind.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>input_data = []
with open('input.txt') as inputfile:
    for line in inputfile:
        row = []
        sections = line.strip().split(':')  # First split out the title
        kind = sections[0]
        row.append(kind)
        data = sections[1].split(',')
        for entry in data:
            row.append(int(entry))  # Use int to convert to integer
        input_data.append(row)
</code></pre>
<p>Try that. First I just split the line using the colon <code>:</code>. The first part is the headers ('min', 'max' and 'avg'), which I add to my new 'row' of output data.</p>
<p>Then I split the second part (the numbers) the exact same way that you did. I then used the <a href="https://docs.python.org/3/library/functions.html" rel="nofollow">built in function</a> <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow">int</a> to convert string numbers into actual integer values.</p>
<p>I made the code very explicit so you should be able to understand every line!</p>
<p>If you actually wanted to make a list comprehension, the (very ugly) direct translation of my code above looks like this:</p>
<pre><code>with open('input.txt') as f:
    result = [[line.split(':')[0]] + [int(x) for x in line.split(':')[1].split(',')] for line in f]
</code></pre>
</div>
<span class="comment-copy">This looks as if a dictionary might be the better datastructure.</span>
<span class="comment-copy">This really helps, I thank you Padraic!</span>
<span class="comment-copy">@Lee, no worries, glad it helped.</span>
<span class="comment-copy">Thank you Peter, I appreciate your time and answer, I can make use of it for sure.</span>
<span class="comment-copy">I'll have a look at this, thank you Symmitchry!</span>
