<div class="post-text" itemprop="text">
<p>I am using iPython in command prompt, Windows 7.</p>
<p>I thought this would be easy to find, I searched and found directions on how to use the inspect package but it seems like the inspect package is meant to be used for functions that are created by the programmer rather than functions that are part of a package.</p>
<p>My main goal to to be able to use the help files from within command prompt of iPython, to be able to look up a function such as csv.reader() and figure out all the possible arguments for it AND all possible values for these arguements.</p>
<p>In R programming this would simply be args(csv.reader())</p>
<p>I have tried googling this but they all point me to the inspect package, perhaps I'm misunderstanding it's use?</p>
<p>For example,</p>
<p>If I wanted to see a list of all possible arguments and the corresponding possible values for these arguments for the csv.reader() function (from the import csv package), how would I go about doing that?</p>
<p>I've tried doing help(csv.reader) but this doesn't provide me a list of all possible arguments and their potential values. 'Dialect' shows up but it doesn't tell me the possible values of the dialect argument of the csv.reader function. </p>
<p>I can easily go to the site: <a href="https://docs.python.org/3/library/csv.html#csv-fmt-params" rel="nofollow">https://docs.python.org/3/library/csv.html#csv-fmt-params</a> and see that the dialect options are: delimiter, doublequote, escapechar, etc.. etc..but is there a way to see this in Python console?</p>
<p>I've also tried dir(csv.reader) but this isn't what I was looking for either.</p>
<p>Going bald trying to figure this out....</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to do this generically, <code>help(&lt;function&gt;)</code> will at a minimum return you the function signature (including the argument names), Python is dynamically typed so you don't get any types and arguments by themselves don't tell you what the valid values are. This is where a good docstring comes in.</p>
<p>However, the <code>csv</code> module does have a specific function for listing the dialects:</p>
<pre><code>&gt;&gt;&gt; csv.list_dialects()
['excel', 'excel-tab', 'unix']
&gt;&gt;&gt; help(csv.excel)
Help on class excel in module csv:

class excel(Dialect)
 |  Describe the usual properties of Excel-generated CSV files.
 ... 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The inspect module is extremely powerful.  To get a list of classes, for example in the csv module, you could go:</p>
<pre><code>import inspect, csv
from pprint import pprint

module = csv
mod_string = 'csv'
module_classes = inspect.getmembers(module, inspect.isclass)
for i in range(len(module_classes)):
  myclass = module_classes[i][0]
  myclass = mod_string+'.'+myclass
  myclass = eval(myclass)
  # could construct whatever query you want about this class here...
  # you'll need to play with this line to get what you want; it will failasis
  #line = inspect.formatargspect(*inspect.getfullargspec(myclass))
  pprint(myclass)
</code></pre>
<p>Hope this helps get you started!</p>
</div>
<span class="comment-copy">I don't think this is a programming problem so much as a general frustration with documentation. <code>help</code> prints and formats the <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> which are only as helpful as they've been written to be. There is no general solution to show "all possible arguments" and "all possible values for said arguments" in Python because that's not even enumerable in many cases (e.g., <a href="https://en.wikipedia.org/wiki/Variadic_function" rel="nofollow noreferrer">variadic functions</a>).</span>
<span class="comment-copy">Nearly all the documentation in library comes directly from the DocStrings: <code>help(csv.Dialect)</code> would give you the details you are looking for, unfortunately as pointed out the help is only as good as the docstrings and the docstring for <code>csv.reader</code> doesn't clearly point you to <code>csv.Dialect</code>. You can then look at the specific dialects, e.g. <code>help(csv.excel)</code>. Introspection on the arguments doesn't inform you of what the valid values would be so I can't see how this would help.</span>
<span class="comment-copy">Can't you do most of this without the inspect module: <code>[x for x in csv.__dict__ if isinstance(csv.__dict__[x], csv.Dialect.__class__)]</code> returns you a list of classes that have inherited from <code>csv.Dialect</code>.</span>
<span class="comment-copy">For module_functions I could go <code>module_functions = inspect.getmembers(module, inspect.isfunction)' and </code>line = "def " + func + inspect.formatargspec(*inspect.getfullargspect(myfunc))'  Try it with something like the SMTP module or Thread from threading</span>
<span class="comment-copy">Depends on what he actually wants.  But it was clear he was unfamiliar with inspect I think.  With inspect, you could actually generate a list of constructors for each of the classes.  If your solution gives him what he needs, great.  If he needs more, then maybe he can take a deeper look at inspect.</span>
