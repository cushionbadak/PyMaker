<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/48772631/how-why-does-set-in-frozenset-work">How/why does set() in {frozenset()} work?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I would like to understand which items can be tested for <code>set</code> membership in Python. In general, set membership testing works like <code>list</code> membership testing in Python.</p>
<pre><code>&gt;&gt;&gt; 1 in {1,2,3}
True
&gt;&gt;&gt; 0 in {1,2,3}
False
&gt;&gt;&gt; 
</code></pre>
<p>However, sets are different from lists in that they cannot contain unhashable objects, for example nested sets.</p>
<p><strong>List, okay:</strong></p>
<pre><code>&gt;&gt;&gt; [1,2,{1,2}]
[1, 2, {1, 2}]
&gt;&gt;&gt; 
</code></pre>
<p><strong>Set, does not work because unhashable:</strong></p>
<pre><code>&gt;&gt;&gt; {1,2,{1,2}}
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
&gt;&gt;&gt; 
</code></pre>
<p>Now, even if sets cannot be members of other sets, we can use them in membership tests. Such a check does not result in an error.</p>
<pre><code>&gt;&gt;&gt; {1} in {1,2,3}
False
&gt;&gt;&gt; {1,2} in {1,2,3}
False
&gt;&gt;&gt; set() in {1,2,3}
False
&gt;&gt;&gt; 
</code></pre>
<p>However, if I try to do the same test where the element being tested is a <code>dict</code>, I get an error which suggests that the element being tested cannot be unhashable.</p>
<pre><code>&gt;&gt;&gt; {'a':1} in {1,2}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
&gt;&gt;&gt; {} in {1,2}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
&gt;&gt;&gt; 
</code></pre>
<p>That cannot be the whole story, because a <code>set</code> <strong>can</strong> be tested for membership in another set even if it is itself unhashable, giving a result rather than an error.</p>
<p>So the question is: <strong>What makes an element eligible for a set membership test in Python?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot test membership of non-hashable elements in a <code>set</code> . Example -</p>
<pre><code>&gt;&gt;&gt; [1,2] in {1,2}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
&gt;&gt;&gt; {1:2} in {1,2}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
</code></pre>
<p>The only non-hashable object that can be used for containment checking is set. As given in the <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="noreferrer">documentation -</a></p>
<blockquote>
<p>Note, the elem argument to the <strong>__contains__(), remove(), and discard() methods may be a set</strong>. To support searching for an equivalent frozenset, the elem set is temporarily mutated during the search and then restored. During the search, the elem set should not be read or mutated since it does not have a meaningful value.</p>
</blockquote>
<p>To support searching for frozensets with same elements as a set, a set is temporarily mutated to <code>frozenset()</code> and compared. Example -</p>
<pre><code>&gt;&gt;&gt; set([1,2]) in {1,2,frozenset([1,2])}
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The confusion comes because when you say 'if set in set', I think python is casting the left hand set to a frozenset and then testing that. E.g.</p>
<pre><code>&gt;&gt;&gt; f = frozenset({1})
&gt;&gt;&gt; f
frozenset([1])
&gt;&gt;&gt; x = {f, 2, 3}
&gt;&gt;&gt; {1} in x
True
</code></pre>
<p>However, there is no equivalent to frozenset for a dict, so it cannot convert the dict to an immutable object for the membership test, and thus it fails.</p>
<p>I don't know the 'rule' that's followed here - whether there's some general <strong>method</strong> that can be overrideen to provide the immutable-conversion or if this behaviour is hardcoded to the specific case of set in set.</p>
</div>
<span class="comment-copy">Erm, frozensets <i>also</i> can't hold unhashable items - the difference is that they are themselves hashable</span>
<span class="comment-copy">Thanks for pointing this out. It was supposed to refer to frozenset being a possible member of a set but my text did not reflect this. Edited the relevant comment out.</span>
<span class="comment-copy">Does anyone know how to get that info from a python function? I have the following: &gt;&gt;&gt; def f(): return set([1,2]) in {3,4} and when I do f.func_code.co_consts I get (None, 1, 2, 5, 6) but no frozenset only consts. I remember seeing a video with python optimisations but I dont remember how the person managed to get the frozenset out of the method.</span>
<span class="comment-copy">Are you using <code>Python 2.x</code> ? In Python 3.4 , it returns - <code>&gt;&gt;&gt; f.__code__.co_consts (None, 1, 2, 3, 4, frozenset({3, 4}))</code></span>
<span class="comment-copy">yes I am using 2.7.10, seems like its not converting the {3, 4} into a frozen set... or maybe its just not showing it since it might be a runtime thing</span>
<span class="comment-copy">@Har It is a peephole optimization that was adden back in Python 3.2: <a href="https://docs.python.org/3/whatsnew/3.2.html#optimizations" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.2.html#optimizations</a></span>
<span class="comment-copy">And correct you are: <a href="https://hg.python.org/cpython/file/tip/Objects/setobject.c#l1892" rel="nofollow noreferrer">hg.python.org/cpython/file/tip/Objects/setobject.c#l1892</a></span>
<span class="comment-copy">Outstanding, thanks!</span>
