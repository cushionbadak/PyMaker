<div class="post-text" itemprop="text">
<p>I a learning python mock, and having problem to check if a method on a mocked object has been called.</p>
<p>The code I want to test is this:</p>
<pre><code>def main(flags, directory_service):
  if flags.has_schema:
    directory_service.HasSchema(SCHEMA_NAME)
    sys.exit(1)
</code></pre>
<p>My test code is:</p>
<pre><code>def testHaltsAfterCheckingSchema(self):
  mock_flags = self._CreateDefaultFlags()
  mock_flags.has_schema = True
  mock_directory_service = MagicMock()

  with self.assertRaises(SystemExit) as cm:
    key_distributor.main(mock_flags, mock_directory_service)
  self.assertTrue(mock_directory_service.HasSchema.assert_called_with(key_distributor.SCHEMA_NAME))
  self.assertEqual(cm.exception.code, 1)
</code></pre>
<p>And when I run it, I get this exception:</p>
<pre><code>FAIL: testHaltsAfterCheckingSchema (test123.Test123)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test123.py", line 34, in testHaltsAfterCheckingSchema
    self.assertTrue(mock_directory_service.HasSchema.assert_called_with(key_distributor.SCHEMA_NAME))
AssertionError: None is not true
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>assert_called_with</code> does the assertion directly, and returns <code>None</code>. You do not need to use <code>TestCase.assertTrue()</code> here at all.</p>
<p>In other words, the following is enough:</p>
<pre><code>mock_directory_service.HasSchema.assert_called_with(key_distributor.SCHEMA_NAME)
</code></pre>
<p>If this assertion fails (i.e. <code>directory_service.HasSchema()</code> was not called or called with different arguments) then that <code>assert_called_with</code> raises an <a href="https://docs.python.org/3/library/exceptions.html#AssertionError" rel="noreferrer"><code>AssertError</code> exception</a>, which <code>TestCase</code> catches for you and records as a test failure:</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import MagicMock
&gt;&gt;&gt; mock_directory_service = MagicMock()
&gt;&gt;&gt; mock_directory_service.HasSchema('SCHEMA_NAME')
&lt;MagicMock name='mock.HasSchema()' id='4562465232'&gt;
&gt;&gt;&gt; mock_directory_service.HasSchema.assert_called_with('SCHEMA_NAME')
&gt;&gt;&gt; mock_directory_service.HasSchema.assert_called_with('foobar')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python3.4/unittest/mock.py", line 771, in assert_called_with
    raise AssertionError(_error_message()) from cause
AssertionError: Expected call: HasSchema('foobar')
Actual call: HasSchema('SCHEMA_NAME')
</code></pre>
</div>
