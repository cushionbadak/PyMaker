<div class="post-text" itemprop="text">
<p>I'm new to Python so I hope this sounds right.
How could I use Python to write to an Excel file from user input?
I want my script to ask users "Name:" "Job Title:" "Building Number:" "Date:" etc. and from that raw input, fill in the corresponding columns one after the other in an Excel spreadsheet. I don't want future use of the script to overwrite previous data in the sheet either. I'd like each time to create a new line in the spreadsheet and then fill in the correct entries in each row. I hope that makes sense. Thank you so much in advance for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://openpyxl.readthedocs.org/en/latest/" rel="nofollow">openpyxl</a> to write to the workbook. Here's some basic usage, and should help avoid overwriting:</p>
<pre><code>import openpyxl
wb = openpyxl.load_workbook('C:/test.xlsx')
ws = wb.active
i = 0
cell_val = ''
# Finds which row is blank first
while cell_val != '':
    cell_val = ws['A' + i].value
    i += 1
# Modify Sheet, Starting With Row i
wb.save('C:/test.xlsx')
</code></pre>
<p>Hope This Helps.</p>
<p>Edited, getting input and time:</p>
<p>For getting information from the user, use</p>
<pre><code>x = input('Prompt: ')
</code></pre>
<p>However, if you want the actual current, I suggest using the <a href="https://docs.python.org/3/library/time.html" rel="nofollow">time</a> module:</p>
<pre><code>&gt;&gt;&gt; from time import strftime
&gt;&gt;&gt; date = strftime('%m-%d-%y')
&gt;&gt;&gt; time = strftime('%I:%M%p')
&gt;&gt;&gt; print(date)
08-28-15
&gt;&gt;&gt; print(time)
01:57AM
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I will also add that XlsxWriter is also an excellent library for writing to Excel, however, unlike OpenPyXl, it is only a writer and does not read Excel files.</p>
<p>An example found from their <a href="https://xlsxwriter.readthedocs.org/en/latest/tutorial01.html" rel="nofollow">documentation</a> is as follows:</p>
<pre><code>import xlsxwriter

# Create a workbook and add a worksheet.
workbook = xlsxwriter.Workbook('Expenses01.xlsx')
worksheet = workbook.add_worksheet()

# Some data we want to write to the worksheet.
expenses = (
    ['Rent', 1000],
    ['Gas',   100],
    ['Food',  300],
    ['Gym',    50],
)

# Start from the first cell. Rows and columns are zero indexed.
row = 0
col = 0

# Iterate over the data and write it out row by row.
for item, cost in (expenses):
    worksheet.write(row, col,     item)
    worksheet.write(row, col + 1, cost)
    row += 1

# Write a total using a formula.
worksheet.write(row, 0, 'Total')
worksheet.write(row, 1, '=SUM(B1:B4)')

workbook.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use the pandas module. It makes reading, writing, and manipulating Excel files very easy:</p>
<p><a href="http://pandas.pydata.org/" rel="nofollow">http://pandas.pydata.org/</a></p>
<blockquote>
<p>Pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>
</blockquote>
</div>
<span class="comment-copy"><a href="https://xlsxwriter.readthedocs.org/" rel="nofollow noreferrer">xlsxwriter.readthedocs.org</a> You can create spreadsheed files using this module. Basicly you can use raw_input to collect data from user.</span>
<span class="comment-copy">Another route is to write to a csv file which Excel can read.  That way you can use the csv library shipped with Python - note however that this is purely a data format, you won't be able to do pretty colours/borders/ etc. with csv</span>
<span class="comment-copy">@Tim Wakeham love your idea about the csv file. Any more details on how to do this? It doesn't have to be pretty just legible with the required fields and able to append future inputs.</span>
<span class="comment-copy">@pbnjenni it's very easy.  The docs are <a href="https://docs.python.org/2/library/csv.html?highlight=csv#module-csv" rel="nofollow noreferrer">docs.python.org/2/library/csv.html?highlight=csv#module-csv</a> the examples are illustrative.</span>
<span class="comment-copy">@Tim Wakeham going to try and figure out how to get it to do specifically what I'd like</span>
<span class="comment-copy">How do I ask for user input for specific fields with this? i.e. date, time</span>
<span class="comment-copy">@pbnjenni I updated my answer, hope this works for you.</span>
<span class="comment-copy">I wouldn't recommend using Pandas due to the limitations of their own Excel writer. Although the Excel writer is quite handy, unless the user is explicitly working with data already using Pandas, there will be significant overhead to load all the data into Pandas, then to export the data to XlsxWriter or OpenPyXl, and suffer from very limited possibilities with none of the extensibility of both modules.  For example, OpenPyXl and XlsxWriter enable conditional formating, custom column formats, etc., which could potentially be of interest to the OP.</span>
