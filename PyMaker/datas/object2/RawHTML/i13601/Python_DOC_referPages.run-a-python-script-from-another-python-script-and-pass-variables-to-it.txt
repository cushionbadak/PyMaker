<div class="post-text" itemprop="text">
<p>There are some similar questions that are asked; but, either the answers didn't cover a specific part that is a key point for me or I just couldn't understand. So, let me explain my question:</p>
<p>I want to create 3 python scripts. Let's call them p1.py, p2.py and p3.py . When I run p1, it will gather the time information with</p>
<pre><code>import datetime    
captureTime = datetime.datetime.now()
</code></pre>
<p>then it will change the format of the date and store it with a variable as shown below</p>
<pre><code>folderName = captureTime.strftime('%Y-%m-%d-%H-%M-%S')
</code></pre>
<p>Then, it will create a folder named by the value of the string 'folderName'.</p>
<p>After this part, I don't know what to do.</p>
<p>p1 should run p2 and p3, and pass the value of 'folderName' to them, then stop; and, p2 and p3 should create files under the folder named by the value of 'folderName'.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make use of the <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow">subprocess</a> module do perform external commands. It is best to start with much simpler commands first to get the gist of it all. Below is a dummy example:</p>
<pre><code>import subprocess
from subprocess import PIPE

def main():
    process = subprocess.Popen('echo %USERNAME%', stdout=PIPE, shell=True)
    username = process.communicate()[0]
    print username #prints the username of the account you're logged in as

    process = subprocess.call('python py1.py --help', shell=True)
    process = subprocess.call('python py2.py --help', shell=True)
    process = subprocess.call('python py3.py --help', shell=True)

if __name__ == '__main__':
    main()
</code></pre>
<p>This will grab the output from <code>echo %USERNAME%</code> and store it. It will also run your three scripts but do nothing fancy with them. You can <code>PIPE</code> the output of the scripts as shown in the first example and feed them back in to your next script.</p>
<p>This is <em>NOT</em> the only way to do this (you can import your other scripts). This is nice if you would like to have an external master script to control and manipulate all your child scripts.</p>
<p>If you haven't checked our <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a> yet, you should.</p>
</div>
<div class="post-text" itemprop="text">
<p>In p1:</p>
<pre><code>import p2
args = ['foo', bar]
p2.main(args)
</code></pre>
<p>In p2:</p>
<pre><code>def main(args): 
    do_whatever()

if __name__ == '__main__':
  main()
</code></pre>
<p>p3 will be of a similar structure to p2</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.argv</a></span>
<span class="comment-copy">What similar questions did you read, what key points did they not cover, and what parts did you not understand?</span>
<span class="comment-copy">Run programs using the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module; parse the arguments using the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> module.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/16048237/pass-variable-between-python-scripts" title="pass variable between python scripts">stackoverflow.com/questions/16048237/â€¦</a>  In this one for example, Abhranil Das's answer explains how to do it in a single script. You call another script inside a script and use the variables of it or vice versa. However, I want to send the variables to another script that works independently.</span>
<span class="comment-copy">Have the currently provided answers helped answer your question?</span>
<span class="comment-copy">Thanks a lot Juxhin.</span>
<span class="comment-copy">You are welcome. If you would like me to elaborate more on the answer (possibly show how you can chain on script to another) let me know.</span>
<span class="comment-copy">I will try to implement this to my problem. If I need further information, I'm definitely going to consult to you. Thanks again.</span>
<span class="comment-copy">@dnzzcn - please mark any of the answers as correct if they have been able to answer your question so that we may close this post off. If not explain what you are still having issues with so that we may help.</span>
<span class="comment-copy">I will try this for my system. Thank you hd1.</span>
<span class="comment-copy">This way everything is going to run on the same process space and not parallel unless he uses threads. If the first process is to be a supervisor, it's best to fork using subprocess.Popen like suggested by @Juxhin</span>
<span class="comment-copy">Of course, but fork(2) is an expensive call that I avoid making.</span>
