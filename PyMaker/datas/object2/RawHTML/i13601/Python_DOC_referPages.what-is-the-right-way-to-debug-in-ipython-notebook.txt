<div class="post-text" itemprop="text">
<p>As I know, <code>%debug magic</code> can do debug within one cell.</p>
<p>However, I have function calls across multiple cells.</p>
<p>For example,</p>
<pre><code>In[1]: def fun1(a)
           def fun2(b)
               # I want to set a breakpoint for the following line #
               return do_some_thing_about(b)

       return fun2(a)

In[2]: import multiprocessing as mp
       pool=mp.Pool(processes=2)
       results=pool.map(fun1, 1.0)
       pool.close()
       pool.join
</code></pre>
<p>What I tried:     </p>
<ol>
<li><p>I tried to set <code>%debug</code> in the first line of cell-1. But it enter into debug mode immediately, even before executing cell-2.  </p></li>
<li><p>I tried to add <code>%debug</code> in the line right before the code <code>return do_some_thing_about(b)</code>. But then the code runs forever, never stops.</p></li>
</ol>
<p>What is the right way to set a break point within the ipython notebook?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <strong>ipdb</strong> </p>
<p>Install it via </p>
<pre><code>pip install ipdb
</code></pre>
<p>Usage: </p>
<pre><code>In[1]: def fun1(a):
   def fun2(a):
       import ipdb; ipdb.set_trace() # debugging starts here
       return do_some_thing_about(b)
   return fun2(a)
In[2]: fun1(1)
</code></pre>
<p>For executing line by line use <kbd>n</kbd> and for step into a function use <kbd>s</kbd> and to exit from debugging prompt use <kbd>c</kbd>.</p>
<p>For complete list of available commands: <a href="https://appletree.or.kr/quick_reference_cards/Python/Python%20Debugger%20Cheatsheet.pdf" rel="noreferrer">https://appletree.or.kr/quick_reference_cards/Python/Python%20Debugger%20Cheatsheet.pdf</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ipdb</code> inside jupyter with:</p>
<p><code>from IPython.core.debugger import Tracer; Tracer()()
</code></p>
<hr/>
<p><strong>Edit</strong>: the functions above are deprecated since IPython 5.1. This is the new approach:</p>
<p><code>from IPython.core.debugger import set_trace
</code></p>
<p>Add <code>set_trace()</code> where you need a breakpoint. Type <code>help</code> for <code>ipdb</code> commands when the input field appears.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your return function is in line of def function(main function), you must give one tab to it.
And Use </p>
<pre><code>%%debug 
</code></pre>
<p>instead of</p>
<pre><code>%debug 
</code></pre>
<p>to debug the whole cell not only line. Hope, maybe this will help you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always add this in any cell:</p>
<pre><code>import pdb; pdb.set_trace()
</code></pre>
<p>and the debugger will stop on that line.  For example:</p>
<pre><code>In[1]: def fun1(a):
           def fun2(a):
               import pdb; pdb.set_trace() # debugging starts here
           return fun2(a)

In[2]: fun1(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just type <code>import pdb</code> in jupyter notebook, and then use this <a href="http://frid.github.io/blog/2014/06/05/python-ipdb-cheatsheet/" rel="noreferrer">cheatsheet</a> to debug. It's very convenient.</p>
<p><code>c</code> --&gt; continue, <code>s</code> --&gt; step, <code>b 12</code> --&gt; set break point at line 12 and so on.</p>
<blockquote>
<p>Some useful links:
  <a href="https://docs.python.org/3/library/pdb.html" rel="noreferrer">Python Official Document on pdb</a>, <a href="https://pymotw.com/2/pdb/" rel="noreferrer">Python pdb debugger examples for better understanding how to use the debugger commands</a>.</p>
<p>Some useful screenshots:
  <a href="https://i.stack.imgur.com/e7C7E.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/e7C7E.png"/></a><a href="https://i.stack.imgur.com/9GyPp.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/9GyPp.png"/></a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://ipython.org/ipython-doc/3/interactive/magics.html#magic-pdb" rel="nofollow noreferrer"><code>%pdb</code> magic command</a> is good to use as well. Just say <code>%pdb on</code> and subsequently the <code>pdb</code> debugger will run on all exceptions, no matter how deep in the call stack. Very handy.</p>
<p>If you have a particular line that you want to debug, just raise an exception there (often you already are!) or use the <code>%debug</code> magic command that other folks have been suggesting.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.7 you can use <a href="https://docs.python.org/dev/whatsnew/3.7.html#pep-553-built-in-breakpoint" rel="nofollow noreferrer">breakpoint()</a> function. Just enter </p>
<pre><code>breakpoint()
</code></pre>
<p>wherever you would like runtime to stop and from there you can use the same pdb commands (r, c, n, ...) or evaluate your variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>After you get an error, in the next cell just run <code>%debug</code> and that's it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just discovered <a href="https://www.analyticsvidhya.com/blog/2018/07/pixie-debugger-python-debugging-tool-jupyter-notebooks-data-scientist-must-use/" rel="nofollow noreferrer">PixieDebugger</a>. Even thought I have not yet had the time to test it, it really seems the most similar way to debug the way we're used in ipython with ipdb</p>
<p><a href="https://i.stack.imgur.com/uIFmn.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/uIFmn.png"/></a></p>
<p>It also has an "evaluate"  tab</p>
</div>
<span class="comment-copy">ipdb does't give me the debug prompt in the other cell with the sample code mentioned in the question. Now the code keeps running forever.</span>
<span class="comment-copy">@Rex For me it works. Where did you put ipdb? Put import ipdb; ipdb.set_trace(); before the line return do_some_thing_about(b). Then, call fun1(a) from second cell, it should work. For exiting the debugging promt use 'c'</span>
<span class="comment-copy">@Rex Updated the answer for more clarity.</span>
<span class="comment-copy">This works in iPython console but not in iPython notebook (which is what the question asked).  When I type <code>import ipdb; ipdb.set_trace()</code> within a notebook cell it says <code>MultipleInstanceError: Multiple incompatible subclass instances of TerminalIPythonApp are being created.</code></span>
<span class="comment-copy">new to jupyter...it seems that it is more suitable for presentation and sharing code snippets...can we have functionality that IDEs (like eclipse, rstudio) provide like actual debugging, step through, breakpoints, adding watch to the expression and variables etc. At first, it seems that it is not the case, just want to be sure.....</span>
<span class="comment-copy"><code>Tracer</code> was depreciated. Now it works this way: <code>from IPython.core.debugger import set_trace</code> and <code>set_trace()</code> evokes a breakpoint. Source: <a href="https://davidhamann.de/2017/04/22/debugging-jupyter-notebooks/" rel="nofollow noreferrer">davidhamann.de/2017/04/22/debugging-jupyter-notebooks</a></span>
<span class="comment-copy">nope. %%debug doesn't work in this case</span>
<span class="comment-copy">Should that be ipdb?</span>
<span class="comment-copy">@Rex Not necessarily. <a href="https://pypi.python.org/pypi/ipdb" rel="nofollow noreferrer"><code>ipdb</code></a> is a refactor of the Python Debugger that is more closely integrated with IPython. <a href="https://docs.python.org/2/library/pdb.html" rel="nofollow noreferrer"><code>pdb</code></a> is built in.</span>
<span class="comment-copy"><code>ipdb</code> can also be used outside the ipython shell and comes with some conveniences like tab completion.</span>
<span class="comment-copy">Worked thanks! ipdb didnt help</span>
<span class="comment-copy">Good answer. However, I think (I am new to Jupyter notebook) one should add %debug to set a breakpoint.</span>
<span class="comment-copy">What I do is copy and paste <code>pdb.set_trace()</code> to where I want to set a breakpoint, since the <code>b line_no</code> is not working in Jupyter Notebook and works well on python IDLE.</span>
<span class="comment-copy">Thanks! I also uploaded some screenshots that I tested today. If I could switch over to Python IDLE I would love to do so..</span>
<span class="comment-copy">Also, I find a way to show line number on jupyter notebook, click new line, and then press l.Of course you can also program your own shortcut, links are available on the jupyter notebook website.</span>
<span class="comment-copy">I use always "p" to show the list of commands in the Jupyter notebook. When I write "show line numbers", the command appears there witt the shortcut next to it. You can also learn the shortcut of the command, which you want to use.</span>
<span class="comment-copy">To add to this, when you call breakpoint(), you can type 'help' in the text box that appears to get a list of commands.</span>
<span class="comment-copy">that is awesome!</span>
