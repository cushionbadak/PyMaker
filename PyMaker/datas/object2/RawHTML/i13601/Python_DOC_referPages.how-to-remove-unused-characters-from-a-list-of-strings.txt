<div class="post-text" itemprop="text">
<p>For example, my list is:</p>
<pre><code>list_1 =  [ '[1234,', '4567,', '19234,', '786222]' ]
</code></pre>
<p>and the expected output is:</p>
<pre><code>list_1 = [1234, 4567, 19234, 786222]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Frankly, the easiest way to get a list of integers back out of that is to put it back together as a string representing a list:</p>
<pre><code>&gt;&gt;&gt; list_1 = ['[1234,', '4567,', '19234,', '786222]']

&gt;&gt;&gt; list_repr = ' '.join(list_1)
&gt;&gt;&gt; list_repr
'[1234, 4567, 19234, 786222]'
</code></pre>
<p>And then feed it through <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval"><code>ast.literal_eval</code></a>: </p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(list_repr)
[1234, 4567, 19234, 786222]
</code></pre>
<p>In the likely event that you got <code>list_1</code> by using the <code>split</code> method on a string that <em>already</em> represented a list in the first place, I'm sure you can figure out how to shorten this process...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/stdtypes.html#str.strip"><code>strip</code></a> the bad characters and convert to <code>int</code>.</p>
<pre><code>&gt;&gt;&gt; [int(s.strip("[],")) for s in list_1]
[1234, 4567, 19234, 786222]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Python 2:</p>
<pre><code>&gt;&gt;&gt; map(int, ''.join(list_1).strip('[]').split(','))
[1234, 4567, 19234, 786222]
</code></pre>
<p>In Python 3 <code>map</code> returns a map object which only lazily evaluates. To create the list we need to be explicit. This is a good thing, more efficient and general:</p>
<pre><code>&gt;&gt;&gt; list(map(int, ''.join(list_1).strip('[]').split(',')))
[1234, 4567, 19234, 786222]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/library/stdtypes.html?highlight=translate#str.translate" rel="nofollow">translate</a> to remove your unwanted characters.</p>
<pre><code>&gt;&gt;&gt; [int(s.translate(None,"[],")) for s in list_1]
[1234, 4567, 19234, 786222]
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't know the set of "bad" characters up front, you can also filter all digits from each string and then convert the result to an integer:</p>
<pre><code>&gt;&gt;&gt; list_1 =  [ '[1234,', '4567,', '19234,', '786222]' ]
&gt;&gt;&gt; [int(filter(lambda x: x.isdigit(), s)) for s in list_1]
[1234, 4567, 19234, 786222]
</code></pre>
</div>
<span class="comment-copy">How did you end up with that list to start with? It looks like you've taken a list representation and split it on spaces; why?!</span>
<span class="comment-copy">Are you sure that's your list? Who gave it to you? It's horrible.</span>
<span class="comment-copy">You always surprise me. I like the use of <code>literal_eval</code>.</span>
<span class="comment-copy">@PeterWood I'm not sure surprise is something to aim for, but thanks! Given the format of the OP's input, I strongly suspect they got it via <code>split</code> anyway.</span>
<span class="comment-copy">By surprising, I mean you often approach problems in unorthodox ways with orthodox python, if that makes sense. So, you think outside the box and then do it properly, the 'one way'.</span>
<span class="comment-copy">@PeterWood that I will definitely take as a compliment, thank you!</span>
<span class="comment-copy">This is the best answer. <code>ast.literal_eval</code> feels to "hacky" to me.</span>
<span class="comment-copy">This is a really good answer. But can you add a line stating that it is valid only for python2 as it in python3 <code>map</code> returns a map object. I know that the question is tagged with python2, but the note will serve as a deterrent to future visitors of your answer.</span>
<span class="comment-copy">@BhargavRao Thank you, and done.</span>
<span class="comment-copy">Now the answer looks complete. Thank you</span>
