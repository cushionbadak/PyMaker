<div class="post-text" itemprop="text">
<p>Is it possible to use variables in the format specifier in the format()-function in Python? I have the following code, and I need VAR to equal field_size:</p>
<pre><code>def pretty_printer(*numbers):
  str_list = [str(num).lstrip('0') for num in numbers]

  field_size = max([len(string) for string in str_list])

  i = 1
  for num in numbers:
    print("Number", i, ":", format(num, 'VAR.2f')) # VAR needs to equal field_size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code> method</a>, which lets you interpolate other variables for things like the width:</p>
<pre><code>'Number {i}: {num:{field_size}.2f}'.format(i=i, num=num, field_size=field_size)
</code></pre>
<p>Each <code>{}</code> is a placeholder, filling in named values from the keyword arguments (you can use numbered positional arguments too). The part after the optional <code>:</code> gives the format (the second argument to the <code>format()</code> function, basically), and you can use more <code>{}</code> placeholders there to fill in parameters.</p>
<p>Using numbered positions would look like this:</p>
<pre><code>'Number {0}: {1:{2}.2f}'.format(i, num, field_size)
</code></pre>
<p>but you could also mix the two or pick different names:</p>
<pre><code>'Number {0}: {1:{width}.2f}'.format(i, num, width=field_size)
</code></pre>
<p>If you omit the numbers and names, the fields are automatically numbered, so the following is equivalent to the preceding format:</p>
<pre><code>'Number {}: {:{width}.2f}'.format(i, num, width=field_size)
</code></pre>
<p>Note that the whole string is a template, so things like the <code>Number</code> string and the colon are part of the template here.</p>
<p>You need to take into account that the field size <em>includes</em> the decimal point, however; you may need to adjust your size to add those 3 extra characters.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; i = 3
&gt;&gt;&gt; num = 25
&gt;&gt;&gt; field_size = 7
&gt;&gt;&gt; 'Number {i}: {num:{field_size}.2f}'.format(i=i, num=num, field_size=field_size)
'Number 3:   25.00'
</code></pre>
</div>
<span class="comment-copy">Thank you for a clear answer! Could you please also show a simple example with numbered positional arguments?</span>
<span class="comment-copy">@AliMustafa: added some more examples.</span>
