<div class="post-text" itemprop="text">
<p>Am I right in my understanding that the <code>if</code> statement will only 'execute' if it evaluates <code>True</code>?</p>
<p>If so, what is the purpose of <em>types</em> returning <code>True</code>?</p>
<p>What is the logic behind this rule? </p>
<p>Can someone give me an example of where it would be useful?</p>
<p>example:</p>
<pre><code>""" Example """

def test(x):
    if float:
        print("success")

test(9)
test('\ntesting')
</code></pre>
<p>Returns:</p>
<p><a href="https://i.stack.imgur.com/1n1Fo.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/1n1Fo.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>From docs :</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while
  condition or as operand of the Boolean operations below. The following
  values are considered false:</p>
<p>None</p>
<p>False</p>
<p>zero of any numeric type, for example, 0, 0L, 0.0, 0j.</p>
<p>any empty sequence, for example, '', (), [].</p>
<p>any empty mapping, for example, {}.</p>
<p>instances of user-defined classes, if the class defines a
  __nonzero__() or __len__() method, when that method returns the integer zero or bool value False. [1]</p>
<p><strong>&gt; All other values are considered true — so objects of many types are
  always true.</strong></p>
<p>Operations and built-in functions that have a Boolean result always
  return 0 or False for false and 1 or True for true, unless otherwise
  stated. (Important exception: the Boolean operations or and and always
  return one of their operands.)</p>
</blockquote>
<p>Since all types are derived from object, <code>__nonzero__</code> doesn't return False or integer zero and they don't have <code>__len__</code> method, it is considered as True.</p>
<p>There is another interesting thing:
<code>__nonzero__</code> of float is <code>&lt;slot wrapper '__nonzero__' of 'float' objects&gt;</code></p>
<p>Here is some info about that: 
<a href="https://stackoverflow.com/questions/15512183/what-is-a-wrapper-descriptor-and-why-is-foo-init-one-in-this-case">What is a wrapper_descriptor, and why is Foo.__init__() one in this case?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>All objects (including types, which are instances of <code>type</code>) are inherently true because they represent the presence of a value of the underlying type, as opposed to <code>None</code> which represents the absence of a value of any type. (It's not useful for <code>None</code> to evaluate to true just because it is an instance of <code>NoneType</code>.)</p>
<p>Some instances of certain types (empty strings and the empty instances of container types, to name a few) evaluate to <code>False</code> instead because it is convenient to consider them so.</p>
<p>In your own classes, you can override the truth value of a particular instance by overriding either <a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow"><code>__nonzero__</code></a> or <code>__len__</code> to return 0 or <code>False</code> for a particular instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The  basic question is:</p>
<blockquote>
<p>What is the logic behind this rule?</p>
</blockquote>
<p>This rule is there to <strong>define</strong> how Python (should) operate: whenever there is an if-statement with an value other as <code>True</code> or <code>False</code> the results should be clear. And the same for all implementations!</p>
<p>It does <em>not</em> imply it's a good style. Nor that one should use it</p>
<pre><code>if float(3.14):
    print("is not a proper way to program")
 else:
    print("even it is clearly defined what will happen")
</code></pre>
<p>Personal, I have no clue what will be printed. And I will not look it up, as it is bad anyhow. I always tell my class: "<em>Even when the compiler understand it, your college will not"</em></p>
</div>
<span class="comment-copy">here is the doc... <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#truth-value-testing</a></span>
<span class="comment-copy">Yes and that's my question: Why do types return true?   My question was not: Why does returning True to an If statement execute the body of the if statement.</span>
<span class="comment-copy"><code>Why do types return true?</code> read the doc, it says <code>All other values are considered true</code>. Basically some specific values are False, all the others are True by default.</span>
<span class="comment-copy">For future reference: you would have gotten less confusion if you only included the code that releated to your specific question, i.e. <code>if float: print('float is true?')</code>.  The fact that you have a function that you pass a parameter and call it with different parameters in your example is very confusing and led to at least one answer that had nothing to do with the question.</span>
<span class="comment-copy">@RubenBaden Don't worry about it.  Extracting the root of the problem from a larger example is a skill that needs to be developed; I was just trying to help develop that skill.</span>
<span class="comment-copy"><a href="http://programmers.stackexchange.com/questions/295354/what-is-the-reasoning-for-presence-of-value-evaluating-as-truthy-in-python-e" title="what is the reasoning for presence of value evaluating as truthy in python e">programmers.stackexchange.com/questions/295354/…</a></span>
<span class="comment-copy">I replaced Float with None and it failed to print!  Thank you so much for this answer. Makes sense to me now!</span>
<span class="comment-copy">Are you saying that leveraging truthy and falsey values like <code>if my_list:</code> or <code>if result:</code> is poor style that should not be used?</span>
<span class="comment-copy">It depends. Surely True and False are clear for everyone. If your audience are no expert stick to them.  But library code, by example,  is read only by experts, so there are more types are allowed. Personally</span>
<span class="comment-copy">If your audience is not expert, you should be telling them about truthy and falsey values instead of showing them fake, bad code.</span>
<span class="comment-copy">What do you mean, "trust an empty one is false"? Of course an empty <code>list</code> evaluates to a falsey value. It's totally intentional, and it's meant to let you write neater, clearer code. Writing code that avoids this fact (plus whatever other language features you've arbitrarily deemed unusable) will simply result in worse code, and using it as any kind of teaching aid in any context will do nothing but give readers a worse understanding of Python. This answer is very misleading.</span>
<span class="comment-copy">No. It's never bad style, and your answer basically says it's always bad style. Personally, if I posted a misleading, harmful answer like this and then was informed of how bad it was, I would delete it.</span>
