<div class="post-text" itemprop="text">
<p>Why does <strong><em>print(squared)</em></strong> return <strong>0</strong> instead of <strong>100</strong>?</p>
<p>I thought that after being returned from the function - the value of the variable <strong><em>squared</em></strong> would be assigned to the the global variable with the same name?</p>
<pre><code>squared = 0
def square(n):
    """Returns the square of a number."""
    squared = n**2
    print "%d squared is %d." % (n, squared)
    return squared


square(10)
print(squared)
</code></pre>
<p>returns:</p>
<p><a href="https://i.stack.imgur.com/303Kt.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/303Kt.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Assign the result of the function to the variable:</p>
<pre><code>squared = square(10)
</code></pre>
<p>This is the whole point of using <code>return squared</code> in the function, isn't it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The function <code>square</code> never changes the variable <code>squared</code> that is found in the global scope. Inside the function you declare a local variable with the same name as the global variable, this however will change the local variable and not the global variable. Then when you <code>print(squared)</code> you are printing that unchanged global variable which is still 0 as you initially set it. As a matter of code cleanliness you really should try to avoid having local variables and global variables sharing the same name as it causes confusion (as we have seen in this question) and makes the code much harder to read.</p>
<p>To change the global variable from within a function you must tell Python to do so by using the <a href="https://docs.python.org/3/reference/simple_stmts.html#global" rel="nofollow noreferrer"><code>global</code> keyword</a> to make the name refer to the global variable. You might want to look at this question: <a href="https://stackoverflow.com/questions/4693120/use-of-global-keyword-in-python">Use of "global" keyword in Python</a></p>
<p>The easier and better option of course is just to use the return value of the function. Minimizing the use of global mutable state is a good goal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Essentially what is happening here is you are creating a local variable in the square function.  To change squared, simply type:</p>
<pre><code>squared =square(10)
print squared
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort of. Your very close. You need to change the following:</p>
<pre><code>def square(n):
    """Returns the square of a number."""
    squared = n**2
</code></pre>
<p>To:</p>
<pre><code>def square(n):
    """Returns the square of a number."""
    global squared

    squared = n**2
</code></pre>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">You need to declare it global, otherwise you're creating a new name <code>squared</code> in the scope of the <code>square</code> function.</span>
<span class="comment-copy">Why would you expect it to be 100? What's the point of a function then, functions provide <b>local scope</b>.</span>
<span class="comment-copy">@Ashwini well it would be 100 until the function is called again with another n.</span>
<span class="comment-copy">@RubenBaden Stop! You have learned the wrong thing here! <b>Do not abuse global scope because you do not understand scope.</b> Read an introductory material that explains scope. It is there for a reason.</span>
<span class="comment-copy">That's not how <code>return</code> works-- the name of the variable you return is irrelevant. You must assign the returned value. (Your question mixed scope and return, hence you're getting two sets of answers...)</span>
<span class="comment-copy">Yes absolutely, thank you!  Just a disclaimer for newcomers: If you're somewhat of a beginner, and you're using IDE - something like...  <code>def simple()     print 5     return 10</code>  ... will 'print' both 5 and 10 - this can be intuitive misleading.  Here is a good video that gave me a better intuition behind print and return:  <a href="https://www.youtube.com/watch?v=2CythYpk7c0" rel="nofollow noreferrer">youtube.com/watch?v=2CythYpk7c0</a></span>
<span class="comment-copy">@Ruben, You'll only see the 10 (the returned value) if you execute this function from the interpreter prompt. In a regular script, returned values that are not assigned to a variable simply disappear. Focus your thoughts on that, and not on accidents of the interpreter.</span>
<span class="comment-copy">The only answer that actually explains what's going on.</span>
<span class="comment-copy">No, you do not need to change it to that! <b>There is absolutely no reason for this variable to be global.</b> The OP <i>expects</i> it to be global, but the OP has already demonstrated a lack of understanding of normal scoping rules, and possibly the concept of scoping. Teaching them to abuse global scope instead of understanding the real problem is just really bad advice.</span>
<span class="comment-copy">"the value of the variable squared would be assigned to the the global variable with the same name?"... The variable needs to be globally declared before that will be true.</span>
<span class="comment-copy">I understand that this is not the right way of programming in Python - but this answered explained the question I had about how Python handles scope and how variables are returned.  I'm going to accept this answer with a disclaimer.  *** THIS IS NOT GOOD PRACTICE ***   But it answers me original question - and might server to give someone with the same question that I had a better intuition.</span>
<span class="comment-copy">@RubenBaden Might be a good question on Programmers.SE, as I'm not an expert on a huge number of languages. As far as I know, most imperative languages in the extended C family, if you will, behave just as Python does here: a local scope is introduced in the function and global things are not modified unless explicitly requested (e.g., <code>global squared</code> in your example). To me, function scope is almost the most basic type, and I suspect languages that don't have it are languages where the concept of scope is very weak or not present at all.</span>
<span class="comment-copy">@Two-BitAlchemist That wouldn't be a good Programmers question since it's essentially asking for a list of languages. But I agree that the vast majority of popular, mainstream languages follow the rule that variables "re-declared" in a narrower scope will "hide" the preexisting ones rather than reference them.</span>
