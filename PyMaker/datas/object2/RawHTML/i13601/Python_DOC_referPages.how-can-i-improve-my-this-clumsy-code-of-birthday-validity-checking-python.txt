<div class="post-text" itemprop="text">
<p>I have written a code to check any birthday input's validity. As I am new in programming, after several debugging steps, the code became very ugly. Here is the code:</p>
<pre><code>month_dict = {'jan':'January',
          'feb':'February',
          'mar':'March',
          'may':'May',
          'jul':'July',
          'sep':'September',
          'oct':'October',
          'dec':'December',
          'apr':'April',
          'jun':'June',
          'aug':'August',
          'nov':'November'}

day = int(raw_input ('Enter your birth day: '))
month = raw_input ("Enter your birth month: ")
year_input = int (raw_input ('Enter your birth year: '))

days_31 = ['jan', 'mar', 'may', 'jul', 'aug', 'oct', 'dec']
days_30 = ['apr', 'jun', 'sep', 'nov']
days_28 = ['feb']

def valid_day_finding ():
    global valid_day
    if month_name in days_31:
        if day &gt; 0 and day &lt; 32:
            valid_day = day
        else:
            valid_day = 'invalid'
    elif month_name in days_30:
        if day &gt;= 1 and day &lt;= 30:
            valid_day = day
        else:
            valid_day = 'invalid'
    elif month_name in days_28:
        if year != 'invalid':
            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
                if day &gt;= 1 and day &lt;= 29:
                    valid_day = day
                else:
                    valid_day = 'invalid'
            else:
                if day &gt;= 1 and day &lt;= 28:
                    valid_day = day
                else:
                    valid_day = 'invalid'
        else:
            valid_day = 'invalid'
    else:
        valid_day = 'invalid'             
def valid_month_finding():   
    global month_name
    if month in month_dict.keys():
        month_name = month
    else:
        month_name = 'invalid'
def valid_year_finding():
    global year
    if year_input &gt; 1900 and year_input &lt;2020:
        year = year_input
    else:
        year = 'invalid'
def birthday_checking():
    if valid_day != 'invalid' and month_name != 'invalid' and year != 'invalid':
        print 'your birthdate is %d - %s - %d' % (valid_day, month_dict[month_name], year)
    else:
        print 'Your Birthday is invalid'
valid_year_finding()    
valid_month_finding()
valid_day_finding()
birthday_checking()
</code></pre>
<p>This code is very much inefficient. What can be your kind suggestion to improve the code? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <em>use the same conventions everywhere</em>! Don't use single quotations, then double quotations for no reason. The same applies for tabs vs spaces, although it's preferable to use tabs for indentation and spaces for alignment. And what's on with <code>day</code>, <code>month</code>, and then <code>year_input</code>; is that <code>_input</code> needed? No, and it only provides naming inconsistencies.</p>
<p>Secondly, in <code>valid_day_finding()</code> there's a lot of unneeded code (ahem... <code>if year != 'invalid'</code> even if <code>year</code> <em>is</em> an integer?).</p>
<p>Thirdly, you're being <em>too</em> monolithic! Get a little more <em>modular</em> and don't let <code>validate_birthday()</code> use globals for everything. Use arguments/parameters instead. And <strong>never</strong> return values by global scope, and, if they're boolean, don't use strings/integers to hold them! This can introduce <em>very</em> subtle bugs.</p>
<p>Fourtly, <code>days_xxx</code> are useless outside of <code>validate_birthday</code>, so they shall go there, and should be named <code>months_xxx</code> after all... And, of topping, <code>month_dict</code> is badly designed. It should map month names to integers, not to shorter month names! And, of course, <code>month_dict</code> is in complete disorder.</p>
<p>Fifthly, to avoid too much indentation, use operators such as <code>and</code> and <code>or</code> in <code>if</code> statements, instead of comparing a single expression as per indentation level.</p>
<p>Sixtly, <em>don't repeat yourself all the time</em>!</p>
<p>So, given this and a lot of other subtle stuff, the code may look like this:</p>
<pre><code>def validate_birthday(day, month, year):
    month_limits = {
        1:  31,
        2:  28,
        3:  31,
        4:  30,
        5:  31,
        6:  30,
        7:  31,
        8:  31,
        9:  30,
        10: 31,
        11: 30,
        12: 31
        }

    # This won't *ever* be valid! (Negative years mean b.C.)
    if month &lt;= 0 or month &gt; 12 or day &lt;= 0:
            return False

    # The year is leap, so let February 29 be valid
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
            month_limits[2] += 1

    return day &lt;= month_limits[month]

months = {
    'jan': 1,
    'feb': 2,
    'mar': 3,
    'apr': 4,
    'may': 5,
    'jun': 6,
    'jul': 7,
    'aug': 8,
    'sep': 9,
    'oct': 10,
    'nov': 11,
    'dec': 12       
    }

day = int(raw_input('Enter your birth day: '))
month = months[raw_input('Enter your birth month: ')]
year = int(raw_input('Enter your birth year: '))

print 'Your input birthday is{} valid!'.format("n't" if not validate_birthday(day, month, year) else '')
</code></pre>
</div>
<span class="comment-copy">This should be on Code Review SE.</span>
<span class="comment-copy">Don't you want to use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.strptime</code></a>?</span>
<span class="comment-copy">@soon: But if the OP wants to it by himself, just for learning purposes?</span>
<span class="comment-copy">@KemyLand, that is why I post this as comment, not as answer. But if the OP is looking for the <i>pythonic</i> way - <code>strptime</code> should be used.</span>
<span class="comment-copy">@soon: I am just trying to learn coding. That is all. There are built-in functions, I know.</span>
<span class="comment-copy">Thanks a lot. I will try to follow your advises.</span>
