<div class="post-text" itemprop="text">
<p>I have following situation:</p>
<ul>
<li>Some internal class (which I have no control of) is executing my <code>callback</code> function using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.call_soon">call_soon</a>.</li>
<li>Within my <code>callback</code> I would like to call another courotune, but end up with "frozen" callback.</li>
</ul>
<p>I will use modified <a href="https://docs.python.org/3/library/asyncio-eventloop.html#hello-world-with-call-soon">Hello World with call_soon()</a> to demonstrate this:</p>
<pre class="lang-py prettyprint-override"><code>import asyncio

def hello_world(loop):
    print('Hello')
    # Call some coroutine.
    yield from asyncio.sleep(5, loop=loop)
    print('World')
    loop.stop()

loop = asyncio.get_event_loop()

# Schedule a call to hello_world()
loop.call_soon(hello_world, loop)

# Blocking call interrupted by loop.stop()
loop.run_forever()
loop.close()
</code></pre>
<p>When I run this, nothing is being printed and the program never ends.</p>
<p>Ctrl+C</p>
<pre class="lang-py prettyprint-override"><code>Traceback (most recent call last):
  File "../soon.py", line 15, in &lt;module&gt;
    loop.run_forever()
  File "/usr/lib/python3.4/asyncio/base_events.py", line 276, in run_forever
    self._run_once()
  File "/usr/lib/python3.4/asyncio/base_events.py", line 1136, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/lib/python3.4/selectors.py", line 432, in select
    fd_event_list = self._epoll.poll(timeout, max_ev)
KeyboardInterrupt
</code></pre>
<p>What is actually going on and why?</p>
<p>Any correct way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The example you mentioned demonstrate how to schedule a callback. </p>
<p>If you use the <code>yield from</code> syntax, the function is actually a <a href="https://docs.python.org/3/library/asyncio-task.html" rel="noreferrer">coroutine</a> and it has to be decorated accordingly:</p>
<pre><code>@asyncio.coroutine
def hello_world(loop):
    print('Hello')
    yield from asyncio.sleep(5, loop=loop)
    print('World')
    loop.stop()
</code></pre>
<p>Then you can schedule the coroutine as a task using <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="noreferrer">ensure_future</a>:</p>
<pre><code>loop = asyncio.get_event_loop()
coro = hello_world(loop)
asyncio.ensure_future(coro)
loop.run_forever()
loop.close()
</code></pre>
<p>Or equivalently, using <a href="https://docs.python.org/3/library/asyncio-eventloop.html?highlight=until_complete#asyncio.BaseEventLoop.run_until_complete" rel="noreferrer">run_until_complete</a>:</p>
<pre><code>loop = asyncio.get_event_loop()
coro = hello_world(loop)
loop.run_until_complete(coro)
</code></pre>
<hr/>
<p>In two weeks, <a href="https://www.python.org/dev/peps/pep-0478/" rel="noreferrer">python 3.5</a> will officially be released and you'll be able to use the new <a href="https://www.python.org/dev/peps/pep-0492/" rel="noreferrer"><code>async</code>/<code>await</code></a> syntax:</p>
<pre><code>async def hello_world(loop):
    print('Hello')
    await asyncio.sleep(5, loop=loop)
    print('World')
</code></pre>
<hr/>
<p><strong>EDIT</strong>: It is a bit ugly, but nothing prevents you from creating a callback that schedules your coroutine:</p>
<pre><code>loop = asyncio.get_event_loop()
coro = hello_world(loop)
callback = lambda: asyncio.ensure_future(coro)
loop.call_soon(callback)
loop.run_forever()
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>call_soon</code> to call a coroutine using the following syntax:</p>
<pre><code>loop.call_soon(asyncio.async, hello_world(loop))
</code></pre>
</div>
<span class="comment-copy">Yes, that I well understand. The problem is that I cannot change the way how <code>hello_world</code> is being called (using <code>call_soon</code>). I think that the only way to fix all this is to dig into <i>internal class</i> and so it puts to <code>asyncio.Queue</code> then have consumer to be a coroutine that reads from it.  <b>EDIT</b>  Oh yes I'm so tired with decorating every second method to make it a coroutine.</span>
<span class="comment-copy">@MichaelG Edited.</span>
<span class="comment-copy">Indeed I can. Although perhaps ugly, still this is a working solution. Thank you!</span>
<span class="comment-copy">I don't understand what's wrong with scheduling a callback in this case. It seems the callback isn't getting called, why? I understand all the points about <i>how</i> to switch to a coroutine, but I don't understand what's wrong with scheduling a callback.</span>
<span class="comment-copy">@BrianBulkowski There's nothing wrong with scheduling a callback. But you can't use the <code>yield from</code> or <code>await</code> syntax within the callback, cause this would make it a coroutine, and coroutines should be scheduled as tasks using <code>asyncio.ensure_future</code> or <code>loop.create_task</code>.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.async" rel="nofollow noreferrer"><code>asyncio.async</code></a> is deprecated since 3.4.4. Use <code>ensure_future</code> now. And that's exactly what <a href="http://stackoverflow.com/a/32310323/923794">Vincent's answer</a> already covered.</span>
