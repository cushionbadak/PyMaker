<div class="post-text" itemprop="text">
<p><strong>Input file:</strong></p>
<pre><code>    rep_origin      607..1720
                    /label=Rep
    Region          2643..5020
                    /label="region"
                    extra_info and stuff
</code></pre>
<p>I'm trying to split by the first column-esque entry.  For example, I want to get a list that looks like this...</p>
<p><strong>Desired Output:</strong> </p>
<pre><code>['rep_origin      607..1720      /label=Rep', 'Region          2643..5020                       /label="region"                         extra_info and stuff']
</code></pre>
<p>I tried splitting by '  ' but that gave me some crazy stuff.  If I could add a "fuzzy" search term at the end that includes all alphabet characters but NOT a whitespace.  That would solve the problem.  I suppose you can do it with regex with something like '  [A-Z]' findall but I wasn't sure if there was a less complicated way. </p>
<p><strong>Is there a way to add a "fuzzy" search term at the very end of string.split identifier?</strong> (i.e. <code>original_string.'    [alphabet_character]'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure exactly what you're looking for but the <code>parse</code> function below takes the text from your question and returns a list of sections and a section is a list of the lines from each section (with leading and trailing whitespace removed).</p>
<pre><code>#!/usr/bin/env python

import re


# This is the input from your question
INPUT_TEXT = '''\
    rep_origin      607..1720
                    /label=Rep
    Region          2643..5020
                    /label="region"
                    extra_info and stuff'''


# A regular expression that matches the start of a section. A section
# start is a line that has 4 spaces before the first non-space
# character.
match_section_start = re.compile(r'^    [^ ]').match


def parse(text):
    sections = []
    section_lines = None

    def append_section_if_lines():
        if section_lines:
            sections.append(section_lines)

    for line in text.split('\n'):
        if match_section_start(line):
            # We've found the start of a new section. Unless this is
            # the first section, save the previous section.
            append_section_if_lines()
            section_lines = []
        section_lines.append(line.strip())

    # Save the last section.
    append_section_if_lines()

    return sections


sections = parse(INPUT_TEXT)
print(sections)
</code></pre>
</div>
<span class="comment-copy"><code>string.split()</code> splits on an exact string.  However you maybe able to use <a href="https://docs.python.org/3/library/re.html?highlight=re.split#re.split" rel="nofollow noreferrer">regular expressions</a> to define what pattern on which to split.</span>
<span class="comment-copy">couldn't you just s.split(), then connect 3 consecutive el?</span>
