<div class="post-text" itemprop="text">
<p>I've written a small python code that parses data from a file and then uses Selenium to input the data into a website, and I am trying to bundle it with a script.</p>
<p>I was already able to bundle it into a pip package and upload it, but when trying to run it I get <code>ImportError: No module named '&lt;name&gt;'</code> for modules on the same directory.</p>
<p>My structure is pretty simply</p>
<pre><code>chessil_tourney_inserter/
    setup.py
    chessil_tourney_inserter/
        __init__.py (empty)
        chessil_tourney_inserter.py
        swiss98_text_parser.py
        command_line.py
</code></pre>
<p>And the setup.py is also pretty basic:</p>
<pre><code>from setuptools import setup

setup(name='chessil_tourney_inserter',
    .
    .
    .
    packages=['chessil_tourney_inserter'],
    zip_safe=False,

    install_requires = [
       'selenium'
    ],

    entry_points={
        'console_scripts': [
        'insertchessiltourney = chessil_tourney_inserter.command_line:main']
    })
</code></pre>
<p>As of right now <code>command_line.main</code> simply calls <code>chessil_tourney_inserter</code>:</p>
<pre><code>import chessil_tourney_inserter.chessil_tourney_inserter as cti
import sys

def main():
    if len(sys.argv) == 1:
        print("Usage: chessil_tourney_inserter.py *tournament name*")
        exit()
    cti.main();

if __name__ == "__main__":
    main()
</code></pre>
<p>and chessil_tourney_inserter gives me an import error on:</p>
<pre><code>import swiss98_text_parser
</code></pre>
<p>but if I try to run <code>chessil_tourney_inserter.py</code> directly it works, and if I add the package name to the import it would break <code>chessil_tourney_inserter.py</code></p>
<p>So how am I supposed to set up the files so that imports will work correctly both when I run the file directly myself, and when I try to import it as a package or run it as a script?</p>
</div>
<div class="post-text" itemprop="text">
<p>Add <code>__init__.py</code> at the top folder too.</p>
<pre><code>chessil_tourney_inserter/
setup.py
__init__.py
chessil_tourney_inserter/
    __init__.py (empty)
    chessil_tourney_inserter.py
    swiss98_text_parser.py
    command_line.py
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/448271/what-is-init-py-for">What is __init__.py for?</a> for more information.</p>
</div>
<span class="comment-copy">So simple and works perfectly. Thank you! I read on the <b>init</b>.py, but didn't realize it should be outside the directory... On my searches I found somewhere that starting from python 3 if the package name matches a directory it would search inside it even without the <b>init</b>.py file, is that the reason the code worked with the package name even without it?</span>
<span class="comment-copy">Yes, I think so. <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="nofollow noreferrer">Pep 420</a> introduced this change. Which version of Python are you using?</span>
<span class="comment-copy">I'm using version 3.4.2 currently</span>
<span class="comment-copy"><code>__init__.py </code> is not need for namespace packages. <code>Namespace</code> packages are those which only contain other packages. Basically, they contain folders, but not files. You have two packages with the same name. You wanted the top level folder <code>chessil_tourney_inserter</code> to also be a package. Since it has a file <code>setup.py</code>, it is a <code>regular</code> package and hence needs an <code>__init__.py</code> Also see <a href="http://stackoverflow.com/a/30324656/817277">stackoverflow.com/a/30324656/817277</a> TL;DR <code>__init__.py</code> not required for <code>namespace</code> packages, but required for <code>regular</code> packages</span>
