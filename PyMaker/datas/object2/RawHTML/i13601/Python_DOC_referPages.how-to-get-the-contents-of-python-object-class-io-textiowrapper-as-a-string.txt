<div class="post-text" itemprop="text">
<p>I have a problem. My subprocess module is spitting out something that I do not know how to deal with. </p>
<p>Using Python 3 on Arch Linux.</p>
<p>Command includes:</p>
<ul>
<li><code>svn info</code></li>
<li><code>grep -IEi</code></li>
<li><code>sed -e</code></li>
</ul>
<p>Despite my terminal ouput of <code>3</code> for the revision number, I cannot seem to get this value stored into a Python variable. It has something to do with my getting an object instead of the contents of that object I suspect. Any help would be appreciated.</p>
<p>For completeness, I demonstrate how the parameter <code>universal_lines</code> can influence the output. </p>
<p>Given that the svn revision on my system is <code>3</code>:</p>
<h2>With <code>shell=True, cwd=branch, universal_lines=False</code></h2>
<pre><code>#!/usr/bin/env python
import os
import subprocess

branch = '/home/username/svncheckoutfolder'
command = 'svn info "%s" | grep -IEi "Revision:" | sed -e "s/^Revision: \\([0-9]*\\)/\\1/g"' % (branch) # filters out revision number from svn info command
process = subprocess.Popen(command,stdout=subprocess.PIPE,shell=True,cwd=branch) # cwd=branch is only necessary when command contains LaTeX interpreter. In this case, I included the absolute path within the command.
process_stdout = process.communicate()[0]
current_revision = process.stdout # This should be a revision number.
print (type(current_revision)) # &lt;class '_io.BufferedReader'&gt;
print (current_revision) # &lt;_io.BufferedReader name=3&gt;
</code></pre>
<h3>Result:</h3>
<pre><code>&lt;class '_io.BufferedReader'&gt;
&lt;_io.BufferedReader name=3&gt;
</code></pre>
<h2>With <code>shell=True, cwd=branch, universal_lines=True</code></h2>
<pre><code>#!/usr/bin/env python
import os
import subprocess

branch = '/home/username/svncheckoutfolder'
command = 'svn info "%s" | grep -IEi "Revision:" | sed -e "s/^Revision: \\([0-9]*\\)/\\1/g"' % (branch) # filters out revision number from svn info command
process = subprocess.Popen(command,stdout=subprocess.PIPE,shell=True,cwd=branch) # cwd=branch is only necessary when command contains LaTeX interpreter. In this case, I included the absolute path within the command.
process_stdout = process.communicate()[0]
current_revision = process.stdout # This should be a revision number.
print (type(current_revision)) # &lt;class '_io.TextIOWrapper'&gt;
print (current_revision) # &lt;_io.TextIOWrapper name=3 encoding='UTF-8'&gt;
</code></pre>
<h3>Result:</h3>
<pre><code>&lt;class '_io.TextIOWrapper'&gt;
&lt;_io.TextIOWrapper name=3 encoding='UTF-8'&gt;
</code></pre>
<p>I tried reading the object, but that does not work either:</p>
<pre><code>print(current_revision.read())
</code></pre>
<h3>Result:</h3>
<pre><code>ValueError: read of closed file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not using the return value of <code>Popen.communicate()</code> here:</p>
<pre><code>current_revision = process.stdout
</code></pre>
<p>You are referencing the (now closed) file object the <code>subprocess</code> module used to communicate with the shell. You are ignoring the value returned on the previous line altogether.</p>
<p>Just use:</p>
<pre><code>process_stdout = process.communicate()[0]
current_revision = process_stdout.decode('utf8').strip()
</code></pre>
<p>when not using <code>universal_newlines=True</code>, or</p>
<pre><code>process_stdout = process.communicate()[0]
current_revision = process_stdout.strip()
</code></pre>
<p>when you do. The data includes a newline, hence the <code>str.strip()</code> call.</p>
<p>You could just use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output()</code> function</a>, if all you need is the stdout output of the command:</p>
<pre><code>output = subprocess.check_output(
    command, shell=True, cwd=branch, universal_newlines=True)
</code></pre>
<p>Last but not least, it may be simpler to have <em>Python</em> do the parsing of the response:</p>
<pre><code>command = ('svn', 'info', branch)
output = subprocess.check_output(command, universal_newlines=True)
revision = None
for line in output.splitlines():
    if line.startswith('Revision:'):
        revision = line.partition(':')[1].strip()
        break
</code></pre>
</div>
