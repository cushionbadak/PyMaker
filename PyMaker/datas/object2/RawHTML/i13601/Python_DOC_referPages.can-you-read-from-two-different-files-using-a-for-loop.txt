<div class="post-text" itemprop="text">
<p>I'm trying to create a little piece of code for some Toontown source so that people can create SOS cards much easier. I have pretty much gotten everything together, but then this snippet of code jumps out at me:</p>
<pre><code>for npcId, npcName in TTLocalizer.NPCToonNames.items():
</code></pre>
<p>Would it be possible to add the <code>or</code> statement so it can read from another file? This is what I had in mind:</p>
<pre><code>for npcId, npcName in TTLocalizer.NPCToonNames.items() or CustomNPCsList.CustomNPCToonNames.items():
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you are trying to read from both files, one after the other. If not, could you please give us a little more context and/or clarify your question and expected result?</p>
<p>The best way to do this depends on the return type of the <code>items()</code> method. If it returns lists you could just use</p>
<pre><code>for npcId, npcName in TTLocalizer.NPCToonNames.items() + CustomNPCsList.CustomNPCToonNames.items():
</code></pre>
<p>to generate a list containing items from both files. If <code>items()</code> is a generator or any other iterable type you could the <code>chain</code> function from the itertools package, which basically concatenates two iterables:</p>
<pre><code>import itertools
for npcId, npcName in itertools.chain(TTLocalizer.NPCToonNames.items(), CustomNPCsList.CustomNPCToonNames.items()):
</code></pre>
<p>A small example:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for number in itertools.chain([1,2,3], [4,5,6]):
&gt;&gt;&gt;     print(number)
1
2
3
4
5
6
</code></pre>
</div>
<span class="comment-copy">What behavior would you expect? Read all the items from one, then all the items from the other?</span>
<span class="comment-copy">Well, did it work when you tried it?</span>
<span class="comment-copy">I think you may want zip</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> zips together two (or more) lists (actually iterables) into one list of tuples, so <code>[a, b, c, d, e]</code> and <code>[1, 2, 3, 4, 5]</code> would come to you as <code>[(a,1), (b,2), (c,3), (d,4), (e,5)]</code>.  Does that help you?</span>
