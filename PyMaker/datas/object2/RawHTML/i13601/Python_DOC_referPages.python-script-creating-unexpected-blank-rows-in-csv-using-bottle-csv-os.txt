<div class="post-text" itemprop="text">
<p>Initial users.csv file- columns are respectively username,real name,password.</p>
<pre><code>  fraud,mike ross,iloveharveynew
  abc,ab isss c,coolgal
  xyz,name last,rockpassnew
</code></pre>
<p>Algorithm- <br/>
 1. Input username (from a cookie) &amp; new-password from a html form.<br/>
 2. Iterate over the csv file to print all the rows that do not contain 'username' to a new file final.csv <br/>
 3. Remove users.csv file. <br/>
 4. Append username,real name,new password to final.csv file. <br/>
 5. Rename final.csv to users.csv</p>
<p>For instance, let's say user xyz was logged in and username=xyz was retrieved from cookie. The user changed the password to rockpassnewnew.</p>
<p>Output users.csv file-</p>
<pre><code>  fraud,mike ross,iloveharveynew

  abc,ab isss c,coolgal



  xyz,name last,rockpassnewnew
</code></pre>
<p>Here is the functioned defined that does this which is called from a controller-</p>
<pre><code>def change(self, new_password):
        errors = []

        if len(new_password) &lt; 3: errors.append('new password too short')

        if errors:
            return errors

        else:
            with open('users.csv','r') as u:

                users = csv.reader(u)
                with open('final.csv', 'a') as f:
                    final=csv.writer(f)
                    for line in users:
                        variableforchecking1 = bottle.request.get_cookie('username')
                        if variableforchecking1 not in line:
                            final.writerow(line)
            os.remove('users.csv')
            variableforchecking1 = bottle.request.get_cookie('username')
            variableforchecking2 = bottle.request.get_cookie('real_name')

            with open('final.csv', 'a') as f:
                final=csv.writer(f)
                final.writerow([variableforchecking1, variableforchecking2, new_password])
            os.rename ('final.csv','users.csv')
            return []
</code></pre>
<p>The controller code which calls this function is-</p>
<pre><code>@bottle.get('/change')
def change():

    return bottle.template('change')


@bottle.post('/change')
def changePost():
    new_password = bottle.request.forms.get('new-password')
    username = me.username()

    errors = me.change(new_password)
    if errors:
        return bottle.template('change', errors=errors)

    me.login(username, new_password)
    return bottle.redirect('/home')
</code></pre>
<p><strong>How to prevent these blank rows from being created because every time a password is changed, the number of blank rows increase considerably?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>When opening a CSV file to be written to using a <code>csv.writer</code>, take care how you open the file.</p>
<p>The problem is that <code>csv.writer</code> does its own handling of line-endings.  If a file opened with <code>open</code> is not opened carefully, the file object will also replace LF line-endings with CR+LF when writing data.  So when both are making these changes, the line endings in the output file can become CR+CR+LF.  Text editors will often interpret this as two line endings.</p>
<p>The fix is to open the file in binary mode in Python 2, or with <code>newline=''</code> in Python 3 <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow">as recommended by the documentation for the <code>csv</code> module</a>.  To do this, replace both occurrences of</p>
<pre><code>            with open('final.csv', 'a') as f:
</code></pre>
<p>with</p>
<pre><code>            with open('final.csv', 'ab') as f:
</code></pre>
<p>if you are using Python 2, or</p>
<pre><code>            with open('final.csv', 'a', newline='') as f:
</code></pre>
<p>if you are using Python 3.</p>
</div>
<span class="comment-copy">One thing: have you checked the value of your cookies for newlines?</span>
<span class="comment-copy">Also, your algo as is will inadvertently delete users whose password or real name happen to equal the username of the user changing their password.  I'd suggest <code>if variableforchecking1 == line[0]</code> instead of <code>if variableforchecking1 not in line</code></span>
<span class="comment-copy">How do I do that (check value of cookie for newlines) and as for the algo deleting other users, nice observation, thanks. Will correct that.</span>
<span class="comment-copy">typo before: <code>if variableforchecking1 != line[0]</code></span>
<span class="comment-copy">well, for instance just print out the value after using <code>get_cookie()</code> and see if there is an extra newline.  Also, same for <code>new_password</code></span>
<span class="comment-copy">When I do that, I get the following error:     File "C:\Users\Utkarsh\Documents\mvc-for-begginers-changepass - experiment\user.py", line 81, in change     final.writerow(line) TypeError: 'str' does not support the buffer interface</span>
<span class="comment-copy">@UtkarshMittal: sorry, I wasn't aware you were using Python 3.  I've modified my answer to cater for Python 3.</span>
<span class="comment-copy">I don't know what hapenned, but this further messed up the output csv, now iit not only has empty rows but repeated rows too.</span>
