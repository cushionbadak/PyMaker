<div class="post-text" itemprop="text">
<p>I have a range from 1 to 5.
Each number in that range gets squared.</p>
<pre><code>for x in range(1, 5 + 1):
  x = x ** 2
  print(x)
</code></pre>
<p>Doing this, gives me:
1, 4, 9, 16, 25.</p>
<p>That is perfect, but how do I then request the sum of the new numbers in the range so that they equal 55?</p>
</div>
<div class="post-text" itemprop="text">
<p>Accumulate the sum:</p>
<pre><code>&gt;&gt;&gt; total = 0
&gt;&gt;&gt; for x in range(1, 5+1):
...     total += x ** 2
...
&gt;&gt;&gt; total
55
</code></pre>
<p>More preferably, using <a href="http://docs.python.org/3/library/functions.html#sum"><code>sum</code></a> and <a href="http://docs.python.org/3/tutorial/classes.html#generator-expressions">generator expression</a>:</p>
<pre><code>&gt;&gt;&gt; sum(x**2 for x in range(1, 5+1))
55
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>alternative <a href="http://en.wikipedia.org/wiki/Square_pyramidal_number" rel="nofollow">square pyramidal number solution</a> (as suggested by M4rtini):</p>
<pre><code>(2*(5**3) + 3*(5**2) + 5)/6
</code></pre>
<p>or for general n:</p>
<pre><code>def square_pyramid(x):
    return (2*(x**3) + 3*(x**2) + x)/6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>total = 0
for x in range(1, 5 + 1):
    x = x ** 2
    total = total + x
    print(x)
print total
</code></pre>
<p>The above should help you out. You want to be storing the sum as you calculate X into another variable. You can then use the sum further along in your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>One line:</p>
<pre><code>sum(x**2 for x in xrange(1,6))
</code></pre>
</div>
<span class="comment-copy">math to the rescue! <a href="http://en.wikipedia.org/wiki/Square_pyramidal_number" rel="nofollow noreferrer">en.wikipedia.org/wiki/Square_pyramidal_number</a></span>
<span class="comment-copy">Thanks! I had it, I made 2 mistakes, I was using sum as a variable and I had a typo.</span>
<span class="comment-copy">@Sinfamy You don't even have to iterate. There is a formula to find the answer. Please check my answer.</span>
<span class="comment-copy">You don't need the parentheses around the exponentiation.</span>
<span class="comment-copy">@Tim - of course that's true, I just find it to be more readable, plus I find that a liberal use of parentheses rather than depending on operator precedence can prevent some  tricky bugs.</span>
<span class="comment-copy">Ah, good point. Sorry, I have not used python in a very long time. (response to comment about not using sum as a variable name because it hides built in function called sum)</span>
<span class="comment-copy">The <code>[ ]</code> isn't necessary, without them it's a generator expression that works equally well.</span>
