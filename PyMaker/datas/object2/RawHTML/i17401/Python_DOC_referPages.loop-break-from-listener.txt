<div class="post-text" itemprop="text">
<p>I am looking for a simple python process that starts to run in the background that with a loop counts up the minutes. I want to send a signal (from outside the script) to the process to break the loop. There may be a number of these scripts opening and running simultaneously.</p>
<pre><code>while True:
    timer=timer+1
    time.sleep(60)
    # listener that receives a signal from outside the program
    # to stop the loop return timer and then end the program
    if (timeup==True):
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="http://docs.python.org/3/library/signal.html#module-signal" rel="nofollow"><code>signal</code></a></p>
<pre><code>import signal, time, os

abort = False
def stop(sig, stack):
        global abort
        print('Got signal!')
        abort = True

signal.signal(signal.SIGUSR1, stop)

print('My pid: %s' % os.getpid())

while True:
        time.sleep(1)
        print('Hello')

        if (abort):
                break
</code></pre>
<p>Which will output something like:</p>
<pre><code>[~]% python test.py
My pid: 24341
Hello
Hello
Hello
</code></pre>
<p>You can then use <code>kill(1)</code> to send the signal:</p>
<pre><code>[~]% kill -USR1 24341
</code></pre>
<p>As far as I can find, there's no obvious way to send the signal from Python, but you could use just start <code>kill</code> with the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module (bit ugly, but works).</p>
<p>You can use the same technique in PHP by the way. See <a href="http://nl1.php.net/manual/en/function.pcntl-signal.php" rel="nofollow"><code>pcntl_signal()</code></a> (You will need the <code>pcntl</code> module installed).</p>
<p>Also see:</p>
<ul>
<li><a href="http://ph7spot.com/musings/introduction-to-unix-signals-and-system-calls" rel="nofollow">Introduction to UNIX Signals and System Calls</a></li>
<li><a href="http://www.linuxprogrammingblog.com/all-about-linux-signals" rel="nofollow">All about Linux signals</a></li>
</ul>
<p>Other methods of Inter process communication (IPC) you could use might be:</p>
<ul>
<li>File with status</li>
<li>Shared memory</li>
<li>FIFO</li>
<li>Sending data over network (also works well when two programs are on the same machine)</li>
</ul>
<p>I'm not going to provide examples for all of these, IMHO using a signal is the most obvious choice here.</p>
</div>
<span class="comment-copy">You want Python, you say, but your title and tags both refer to PHP. What exactly are you asking?</span>
<span class="comment-copy">I would prefer php but after doing some basic research, it would seem that it would be easier done in python or c</span>
