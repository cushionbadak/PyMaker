<div class="post-text" itemprop="text">
<p>Suppose <code>o</code> is a Python object, and I want all of the fields of <code>o</code>, without any methods or <code>__stuff__</code>. How can this be done?</p>
<p>I've tried things like:</p>
<pre><code>[f for f in dir(o) if not callable(f)]

[f for f in dir(o) if not inspect.ismethod(f)]
</code></pre>
<p>but these return the same as <code>dir(o)</code>, presumably because <code>dir</code> gives a list of strings. Also, things like <code>__class__</code> would be returned here, even if I get this to work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get it via the <code>__dict__</code> attribute, or the <a href="http://docs.python.org/3/library/functions.html#vars">built-in <code>vars</code></a> function, which is just a shortcut:</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     foobar = 42
...     def __init__(self):
...         self.foo = 'baz'
...         self.bar = 3
...     def method(self, arg):
...         return True
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__dict__
{'foo': 'baz', 'bar': 3}
&gt;&gt;&gt; vars(a)
{'foo': 'baz', 'bar': 3}
</code></pre>
<p>There's only attributes of the object. Methods and class attributes aren't present. </p>
</div>
<div class="post-text" itemprop="text">
<p>The basic answer is "you can't do so reliably".  See <a href="https://stackoverflow.com/questions/191010/how-to-get-a-complete-list-of-objects-methods-and-attributes">this question</a>.</p>
<p>You can get an approximation with <code>[attr for attr in dir(obj) if attr[:2] + attr[-2:] != '____' and not callable(getattr(obj,attr))]</code>.</p>
<p>However, you shouldn't rely on this, <a href="http://docs.python.org/2/library/functions.html#dir" rel="nofollow noreferrer">because</a>:</p>
<blockquote>
<p>Because <code>dir()</code> is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases.</p>
</blockquote>
<p>In other words, there is no canonical way to get a list of "all of an object's attributes" (or "all of an object's methods").</p>
<p>If you're doing some kind of dynamic programming that requires you to iterate over unknwon fields of an object, the only reliable way to do it is to implement your own way of keeping track of those fields.  For instance, you could use an attribute naming convention, or a special "fields" object, or, most simply, a dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate through an instance's<code>__dict__</code>attribute and look for non-method things.<br/>
For example:</p>
<pre><code>CALLABLES = (types.FunctionType, types.MethodType)
for key, value in A().__dict__.items():
    if not isinstance(value, CALLABLES):
        print key
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>foo
bar
</code></pre>
<p>You can do it in a single statement with a list comprehension:</p>
<pre><code>print [key for key, value in A.__dict__.items()
            if not isinstance(value, CALLABLES)]
</code></pre>
<p>Which would print <code>['foo', 'bar']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work for callables:</p>
<pre><code>[f for f in dir(o) if not callable(getattr(o,f))]
</code></pre>
<p>You could get rid of the rest with:</p>
<pre><code>[f for f in dir(o) if not callable(getattr(o,f)) and not f.startswith('__')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the built-in method <code>vars()</code></p>
</div>
<span class="comment-copy">I've been noodling with <a href="http://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> but can't get it 100% right, but that module might help?</span>
<span class="comment-copy">I've looked at inspect also ...</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/61517/python-dictionary-from-an-objects-fields">Python dictionary from an object's fields</a></span>
<span class="comment-copy">This is per-instance.</span>
<span class="comment-copy">This is probably the best approximation you're going to get, but it should be noted that this considers callable instance attributes (which are sometimes used and are effectively like methods) as non-methods and considers class attributes with no corresponding instance attribute not a field (even though it acts like one for most purposes). It also ignores properties and fails on classes with <code>__slots__</code>, which may or may not matter.</span>
<span class="comment-copy">I'm not sure, but if you can create your own members surrounded by double underscores, this'll break.</span>
<span class="comment-copy">@2rs2ts: Yes, that is true.  There is no way around that.  There's no way to programatically tell if a double-underscore name is "magic" or not; you have to read the documentation.</span>
<span class="comment-copy">These are naming conventions, you shouldn't create your own members by surrounding them with double underscores.</span>
<span class="comment-copy">@Benjamin: Indeed. At the end of the <a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="nofollow noreferrer"><b>Descriptive: Naming Styles</b></a> section of <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 - Style Guide for Python Code</a>, regarding names with both double-underscore-prefix &amp; suffixes, it says "Never invent such names; only use them as documented."</span>
<span class="comment-copy">There's no need to filter out methods, since they're in the class <code>__dict__</code>, not the instance <code>__dict__</code>s.</span>
<span class="comment-copy">@Blckknght: I put the test in because a class is an object, too. However, I realized after your comment the need to check for than one type of callable, and have modified my answer. Thanks. If one can assume that the object is a new-style class instance, then what you said is true and the <code>for</code> loops could be simplified.</span>
<span class="comment-copy">Almost. I got <code>['__dict__', '__doc__', '__module__', '__weakref__', 'a', 'b']</code> with a dummy class with <code>a</code> and <code>b</code> as class members.</span>
<span class="comment-copy">Close, but still includes <code>__dict__</code>, <code>__doc__</code>, etc.</span>
