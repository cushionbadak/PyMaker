<div class="post-text" itemprop="text">
<p>Given a dictionary of <code>int</code>s, I'm trying to format a string with each number, and a pluralization of the item.</p>
<p>Sample input <code>dict</code>:</p>
<pre><code>data = {'tree': 1, 'bush': 2, 'flower': 3, 'cactus': 0}
</code></pre>
<p>Sample output <code>str</code>:</p>
<pre><code>'My garden has 1 tree, 2 bushes, 3 flowers, and 0 cacti'
</code></pre>
<p>It needs to work with an arbitrary format string.</p>
<p>The best solution I've come up with is a <code>PluralItem</code> class to store two attributes, <code>n</code> (the original value), and <code>s</code> (the string <code>'s'</code> if plural, empty string <code>''</code> if not). Subclassed for different pluralization methods</p>
<pre><code>class PluralItem(object):
    def __init__(self, num):
        self.n = num
        self._get_s()
    def _get_s(self):
        self.s = '' if self.n == 1 else 's'

class PluralES(PluralItem):
    def _get_s(self):
        self.s = 's' if self.n == 1 else 'es'

class PluralI(PluralItem):
    def _get_s(self):
        self.s = 'us' if self.n == 1 else 'i'
</code></pre>
<p>Then make a new <code>dict</code> through comprehension and a <code>classes</code> mapping:</p>
<pre><code>classes = {'bush': PluralES, 'cactus': PluralI, None: PluralItem}
plural_data = {key: classes.get(key, classes[None])(value) for key, value in data.items()}
</code></pre>
<p>Lastly, the format string, and implementation:</p>
<pre><code>formatter = 'My garden has {tree.n} tree{tree.s}, {bush.n} bush{bush.s}, {flower.n} flower{flower.s}, and {cactus.n} cact{cactus.s}'
print(formatter.format(**plural_data))
</code></pre>
<p>Outputs the following:</p>
<pre><code>My garden has 1 tree, 2 bushes, 3 flowers, and 0 cacti
</code></pre>
<hr/>
<p>For such an undoubtedly common need, I'm hesitant to throw in the towel with such a convoluted solution.</p>
<p>Is there a way to format a string like this using the built-in <code>format</code> method, and minimal additional code? Pseudocode might be something like:</p>
<pre><code>"{tree} tree{tree(s)}, {bush} bush{bush(es)}, {flower} flower{flower(s)}, {cactus} cact{cactus(i,us)}".format(data)
</code></pre>
<p>where parentheses return the contents if value is plural, or if contents has comma, means plural/singular</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/string.html#string-formatting" rel="nofollow noreferrer">custom formatter</a>:</p>
<pre><code>import string

class PluralFormatter(string.Formatter):
    def get_value(self, key, args, kwargs):
        if isinstance(key, int):
            return args[key]
        if key in kwargs:
            return kwargs[key]
        if '(' in key and key.endswith(')'):
            key, rest = key.split('(', 1)
            value = kwargs[key]
            suffix = rest.rstrip(')').split(',')
            if len(suffix) == 1:
                suffix.insert(0, '')
            return suffix[0] if value &lt;= 1 else suffix[1]
        else:
            raise KeyError(key)

data = {'tree': 1, 'bush': 2, 'flower': 3, 'cactus': 0}
formatter = PluralFormatter()
fmt = "{tree} tree{tree(s)}, {bush} bush{bush(es)}, {flower} flower{flower(s)}, {cactus} cact{cactus(i,us)}"
print(formatter.format(fmt, **data))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>1 tree, 2 bushes, 3 flowers, 0 cacti
</code></pre>
<p><strong>UPDATE</strong></p>
<p>If you're using Python 3.2+ (<a href="http://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow noreferrer"><code>str.format_map</code></a> was added), you can use the idea of OP (see comment) that use customized dict.</p>
<pre><code>class PluralDict(dict):
    def __missing__(self, key):
        if '(' in key and key.endswith(')'):
            key, rest = key.split('(', 1)
            value = super().__getitem__(key)
            suffix = rest.rstrip(')').split(',')
            if len(suffix) == 1:
                suffix.insert(0, '')
            return suffix[0] if value &lt;= 1 else suffix[1]
        raise KeyError(key)

data = PluralDict({'tree': 1, 'bush': 2, 'flower': 3, 'cactus': 0})
fmt = "{tree} tree{tree(s)}, {bush} bush{bush(es)}, {flower} flower{flower(s)}, {cactus} cact{cactus(i,us)}"
print(fmt.format_map(data))
</code></pre>
<p>Output: same as above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out the <a href="https://pypi.python.org/pypi/inflect" rel="noreferrer">inflect package</a>.  It will pluralize things, as well as do a whole host of other linguistic trickery.  There are too many situations to special-case these yourself!</p>
<p>From the docs at the link above:</p>
<pre><code>import inflect
p = inflect.engine()

# UNCONDITIONALLY FORM THE PLURAL
print("The plural of ", word, " is ", p.plural(word))

# CONDITIONALLY FORM THE PLURAL
print("I saw", cat_count, p.plural("cat",cat_count))
</code></pre>
<p>For your specific example:</p>
<pre><code>{print(str(count) + " " + p.pluralize(string, count)) for string, count in data.items() }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you happen to use Django already, it is easy: <code>pluralize</code> is a function that. </p>
<p>It is often used in templates: </p>
<pre><code>You have {{ num_messages }} message{{ num_messages|pluralize }}.
</code></pre>
<p>However, you can also use it in your python code:</p>
<pre><code>f'You have {num_messages} message{pluralize(num_messages)}.'
</code></pre>
<p>In Python2 this would read:</p>
<pre><code>'You have {} message{}.'.format(num_messages, pluralize(num_messages))
</code></pre>
<p>or: </p>
<pre><code>'You have %d message%s' % (num_messages, pluralize(num_messages))
</code></pre>
<p>Django pluralize docs:
<a href="https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#pluralize" rel="nofollow noreferrer">https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#pluralize</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I would go with something like</p>
<pre><code>class Pluralizer:
    def __init__(self, value):
        self.value = value

    def __format__(self, formatter):
        formatter = formatter.replace("N", str(self.value))
        start, _, suffixes = formatter.partition("/")
        singular, _, plural = suffixes.rpartition("/")

        return "{}{}".format(start, singular if self.value == 1 else plural)

"There are {:N thing/s} which are made of {:/a cactus/N cacti}".format(Pluralizer(10), Pluralizer(1))
#&gt;&gt;&gt; 'There are 10 things which are made of a cactus'
</code></pre>
<p>The format is <code>always/singular/plural</code>, which <code>singular</code> (then <code>plural</code>) optional.</p>
<p>So</p>
<pre><code>"xyz/foo/bar".format(Pluralizer(1)) == "xyzfoo"
"xyz/foo/bar".format(Pluralizer(2)) == "xyzbar"

"xyz/bar".format(Pluralizer(1)) == "xyz"
"xyz/bar".format(Pluralizer(2)) == "xyzbar"

"xyz".format(Pluralizer(1)) == "xyz"
"xyz".format(Pluralizer(2)) == "xyz"
</code></pre>
<p>Then for your example one just does:</p>
<pre><code>data = {'tree': 1, 'bush': 2, 'flower': 3, 'cactus': 0}
string = 'My garden has {tree:N tree/s}, {bush:N bush/es}, {flower:N flower/s}, and {cactus:N cact/us/i}'

string.format_map({k: Pluralizer(v) for k, v in data.items()})
#&gt;&gt;&gt; 'My garden has 1 tree, 2 bushes, 3 flowers, and 0 cacti'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was inspired by the answers above, particularly @Veedrac's, to create a Plurality utility:</p>
<p><a href="https://gist.github.com/elidchan/40baea13bb91193a326e3a8c4cbcaeb9" rel="nofollow noreferrer">https://gist.github.com/elidchan/40baea13bb91193a326e3a8c4cbcaeb9</a></p>
<p>Features:</p>
<ul>
<li>Customizable number-indexed templates (e.g. see 'vague' below)</li>
<li>Numbers and support for $n template tokens</li>
<li>Singular/plural forms (e.g. 'cact/us/i') and support for $thing/$things template tokens</li>
<li>Indefinite article capability (inspired by <a href="https://stackoverflow.com/a/20337527/4182210">https://stackoverflow.com/a/20337527/4182210</a>) and support for $a template token</li>
<li>Left/right string concatenation</li>
<li>Partials with any subset of number, forms, and templates</li>
<li>Partial completion via call() or format string</li>
</ul>
<p>From the docstring:</p>
<pre><code>"""
Usage:

&gt;&gt;&gt; from utils.verbiage import Plurality

&gt;&gt;&gt; f"We have {Plurality(0, 'g/oose/eese')}."
'We have 0 geese.'
&gt;&gt;&gt; f"We have {Plurality(1, 'g/oose/eese')}."
'We have 1 goose.'
&gt;&gt;&gt; f"We have {Plurality(2, 'g/oose/eese')}."
'We have 2 geese.'

&gt;&gt;&gt; oxen = Plurality('ox/en')
&gt;&gt;&gt; oxen.template_formatter
'1=$n $thing;n=$n $things'
&gt;&gt;&gt; f"We have {oxen(0)}."
'We have 0 oxen.'
&gt;&gt;&gt; f"We have {oxen(1)}."
'We have 1 ox.'
&gt;&gt;&gt; f"We have {oxen(2)}."
'We have 2 oxen.'

&gt;&gt;&gt; cows = Plurality('/cow/kine', '0=no $things', '1=$a $thing')
&gt;&gt;&gt; cows.template_formatter
'0=no $things;1=a $thing;n=$n $things'
&gt;&gt;&gt; f"We have {cows(0)}."
'We have no kine.'
&gt;&gt;&gt; f"We have {cows(1)}."
'We have a cow.'
&gt;&gt;&gt; f"We have {cows(2)}."
'We have 2 kine.'

&gt;&gt;&gt; 'We have {:0=no $things;0.5=half $a $thing}.'.format(Plurality(0, 'octop/us/odes'))
'We have no octopodes.'
&gt;&gt;&gt; 'We have {:octop/us/odes;0=no $things;0.5=half $a $thing}.'.format(Plurality(0.5))
'We have half an octopus.'
&gt;&gt;&gt; 'We have {:4;octop/us/odes;0=no $things;0.5=half $a $thing}.'.format(Plurality())
'We have 4 octopodes.'

&gt;&gt;&gt; data = {'herb': 1, 'bush': 2, 'flower': 3, 'cactus': 0}
&gt;&gt;&gt; s = "We have {herb:herb/s}, {bush:bush/es}, {flower:flower/s}, and {cactus:cact/us/i}."
&gt;&gt;&gt; s.format_map({k: Plurality(v) for k, v in data.items()})
'We have 1 herb, 2 bushes, 3 flowers, and 0 cacti.'
&gt;&gt;&gt; vague = Plurality('0=no $things;1=$a $thing;2=a couple $things;n=some $things')
&gt;&gt;&gt; s.format_map({k: vague(v) for k, v in data.items()})
'We have an herb, a couple bushes, some flowers, and no cacti.'
"""
</code></pre>
</div>
<span class="comment-copy">What do you say to this? <a href="http://stackoverflow.com/questions/9244909/python-conditional-string-formatting" title="python conditional string formatting">stackoverflow.com/questions/9244909/…</a></span>
<span class="comment-copy">That's essentially what my class is doing, but I can't figure out how to put something like that in the string formatting. Especially with <i>multiple</i> keys.</span>
<span class="comment-copy">How does the above fare with {goose:5}?</span>
<span class="comment-copy">yeah, for my code you'd have to make <i>yet another subclass</i> to replace the whole word. hence the search for a better way</span>
<span class="comment-copy">For serious, I would wager there is something like 100 special cases you have to handle.  See the answer below.</span>
<span class="comment-copy">@mhlester, Actually, I read not only the documentation, but also read <a href="http://hg.python.org/cpython/file/2e8a142dbccc/Lib/string.py#l162" rel="nofollow noreferrer">the source code <code>string.py</code></a>.</span>
<span class="comment-copy">@mhlester, BTW, this does not handle numeric field with plural suffix: e.g. <code>0(i,ie)</code></span>
<span class="comment-copy">without reading the source code or documentation, i'd wager that's a simple enough matter of extending the <code>args[key]</code> line with similar code. don't bother diluting this</span>
<span class="comment-copy">@mhlester, Your idea is possible. But only in Python 3.2+. Chec out the update.</span>
<span class="comment-copy">oh, that is clever. i'm in 2.7, but that's sure a nice feature</span>
<span class="comment-copy">this is a really interesting approach. it's tough to coerce into a <i>general purpose</i> format string though</span>
<span class="comment-copy">i've downloaded <code>inflect</code>. it does a pretty good job (got caught up on <code>cacti</code>), and might be able to be combined with @falsetru's <code>string.Formatter</code> approach to provide the perfect combination. thanks so much</span>
<span class="comment-copy">Issue opened, pull-request underway.  There will be cacti before long.</span>
<span class="comment-copy">Hah, turns out cactuses adn cacti is valid:plural:<a href="http://en.wikipedia.org/wiki/Cactus" rel="nofollow noreferrer">en.wikipedia.org/wiki/Cactus</a>,  <a href="http://grammarist.com/usage/cacti-cactuses/" rel="nofollow noreferrer">grammarist.com/usage/cacti-cactuses</a></span>
<span class="comment-copy">@meawoppl: Just don't do what Ruby on Rails did: some smart aleck thought it would be cool to inflect the plural of "cow" as "kine" (which is correct but pedantic), but created the side effect that "scow" pluralized as "skine" (clearly wrong).</span>
