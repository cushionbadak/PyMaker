<div class="post-text" itemprop="text">
<p>I've got a list like so:</p>
<pre><code>counters = [["0"],["0"],["0"],["0"]]
</code></pre>
<p>I'd like to perform an operation to each of the inner values - say concatenation, converting to an <code>int</code> and incrementing, etc.</p>
<p>How can I do this for <em>all</em> of the list items; given that this is a multi-dimensional list?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> (<a href="http://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow">nested list comprehension</a>):</p>
<pre><code>&gt;&gt;&gt; counters = [["0"],["0"],["0"],["0"]]
&gt;&gt;&gt; [[str(int(c)+1) for c in cs] for cs in counters]
[['1'], ['1'], ['1'], ['1']]
</code></pre>
<p>BTW, why do you use lists of strings?</p>
<p>I'd rather use a list of numbers (No need to convert to <code>int</code>, back to <code>str</code>).</p>
<pre><code>&gt;&gt;&gt; counters = [0, 0, 0, 0]
&gt;&gt;&gt; [c+1 for c in counters]
[1, 1, 1, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>  &gt;&gt;&gt; counter=['0']*10
  &gt;&gt;&gt; counter
   ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
  &gt;&gt;&gt; counter=['1']*10
  &gt;&gt;&gt; counter
  ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1']
  overwrite a counter with 1,s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; counters = [["0"],["0"],["0"],["0"]]
&gt;&gt;&gt; counters = [ [str(eval(i[0])+1)] for element in counters ]
&gt;&gt;&gt; counters
[['1'], ['1'], ['1'], ['1']]
</code></pre>
<p>We can use eval function here. About eval()  <a href="https://stackoverflow.com/questions/9383740/what-does-pythons-eval-do">What does Python's eval() do? </a></p>
</div>
<div class="post-text" itemprop="text">
<p>If list comprehension scares you, you can use sub-indexing. For example,</p>
<pre><code>for i in range(len(counters)):
    counters[i][0] = str(eval(counters[i][0]) + 1)
</code></pre>
<p><code>counters</code> is a list of lists, therefore you need to access the subindex of 0 (the first item) before you add to it. <code>counters[0][0]</code>, for example, is the first item in the first sublist. </p>
<p>Moreover, each of your subitems is a string, not an integer or float. The <code>eval</code> function makes the proper conversion so that we can add 1, and the outer <code>str</code> function converts the final answer back to a string.   </p>
</div>
<span class="comment-copy">The brackets are part of the representation of the list, they are not part of the list itself.</span>
<span class="comment-copy">Thanks so much, using it as a list of numbers worked :) I'm new to Python, so I didn't know you could do it like that</span>
