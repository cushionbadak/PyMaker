<div class="post-text" itemprop="text">
<p>I read the other threads that had to do with this error and it seems that my problem has an interesting distinct difference than all the posts I read so far, namely, all the other posts so far have the error in regards to either a user created class or a builtin system resource. I am experiencing this problem when calling a function, I can't figure out what it could be for. Any ideas?</p>
<pre><code>BOX_LENGTH = 100
turtle.speed(0)
fill = 0
for i in range(8):
    fill += 1
    if fill % 2 == 0:
        Horizontol_drawbox(BOX_LENGTH, fillBox = False)
    else:
        Horizontol_drawbox(BOX_LENGTH, fillBox = True)

    for i in range(8):
        fill += 1
        if fill % 2 == 0:
            Vertical_drawbox(BOX_LENGTH,fillBox = False)
        else:
            Vertical_drawbox(BOX_LENGTH,fillBox = True)
</code></pre>
<p>Error message:</p>
<pre><code>    Horizontol_drawbox(BOX_LENGTH, fillBox = True)
TypeError: Horizontol_drawbox() got multiple values for argument 'fillBox'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This happens when a keyword argument is specified that overwrites a positional argument. For example, let's imagine a function that draws a colored box. The function selects the color to be used and delegates the drawing of the box to another function, relaying all extra arguments.</p>
<pre><code>def color_box(color, *args, **kwargs):
    painter.select_color(color)
    painter.draw_box(*args, **kwargs)
</code></pre>
<p>Then the call</p>
<pre><code>color_box("blellow", color="green", height=20, width=30)
</code></pre>
<p>will fail because two values are assigned to <code>color</code>: <code>"blellow"</code> as positional and <code>"green"</code> as keyword. (<code>painter.draw_box</code> is supposed to accept the <code>height</code> and <code>width</code> arguments).</p>
<p>This is easy to see in the example, but of course if one mixes up the arguments at call, it may not be easy to debug:</p>
<pre><code># misplaced height and width
color_box(20, 30, color="green")
</code></pre>
<p>Here, <code>color</code> is assigned <code>20</code>, then <code>args=[30]</code> and <code>color</code> is again assigned <code>"green"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem that is really easy to make, but took me a while to see through.</p>
<p>I had copied the declaration to where I was using it and had left the 'self' argument there, but it took me ages to realise that.</p>
<p>I had</p>
<pre><code>self.myFunction(self, a, b, c='123')
</code></pre>
<p>but it should have been </p>
<pre><code>self.myFunction(a, b, c='123')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This also happens if you forget <code>self</code>declaration inside class methods.</p>
<p>Example:</p>
<pre><code>class Example():
    def is_overlapping(x1, x2, y1, y2):
        # Thanks to https://stackoverflow.com/a/12888920/940592
        return max(x1, y1) &lt;= min(x2, y2)
</code></pre>
<p><strong>Fails</strong> calling it like <code>self.is_overlapping(x1=2, x2=4, y1=3, y2=5)</code> 
with:</p>
<blockquote>
<p>{TypeError} is_overlapping() got multiple values for argument 'x1'</p>
</blockquote>
<p><strong>WORKS</strong>:</p>
<pre><code>class Example():
    def is_overlapping(self, x1, x2, y1, y2):
        # Thanks to https://stackoverflow.com/a/12888920/940592
        return max(x1, y1) &lt;= min(x2, y2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My issue was similar to Q---ten's, but in my case it was that I had forgotten to provide the self argument to a class function:</p>
<pre><code>class A:
    def fn(a, b, c=True):
        pass
</code></pre>
<p>Should become</p>
<pre><code>class A:
    def fn(self, a, b, c=True):
        pass
</code></pre>
<p>This faulty implementation is hard to see when calling the class method as:</p>
<pre><code>a_obj = A()
a.fn(a_val, b_val, c=False)
</code></pre>
<p>Which will yield a <code>TypeError: got multiple values for argument</code>. Hopefully, the rest of the answers here are clear enough for anyone to be able to quickly understand and fix the error. If not, hope this answer helps you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply put you can't do the following:</p>
<pre><code>class C(object):
    def x(self, y, **kwargs):
        # Which y to use, kwargs or declaration? 
        pass

c = C()
y = "Arbitrary value"
kwargs["y"] = "Arbitrary value"
c.x(y, **kwargs) # FAILS
</code></pre>
<p>Because you pass the variable 'y' into the function twice: once as kwargs and once as function declaration.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was brought here for a reason not explicitly mentioned in the answers so far, so to save others the trouble:</p>
<p>The error also occurs if the function arguments have changed order - for the same reason as in the accepted answer: the positional arguments clash with the keyword arguments.</p>
<p>In my case it was because the argument order of the Pandas <code>set_axis</code> function changed between 0.20 and 0.22:</p>
<pre><code>0.20: DataFrame.set_axis(axis, labels)
0.22: DataFrame.set_axis(labels, axis=0, inplace=None)
</code></pre>
<p>Using the commonly found examples for set_axis results in this confusing error, since when you call:</p>
<pre><code>df.set_axis(['a', 'b', 'c'], axis=1)
</code></pre>
<p>prior to 0.22, <code>['a', 'b', 'c']</code> is assigned to axis because it's the first argument, and then the positional argument provides "multiple values".</p>
</div>
<span class="comment-copy">What is the declaration of the <code>Horizontol_drawbox</code> function? If it starts with <code>fillBox</code>, then that's the fault (assigned one time with positional argument, and a second time with keyword argument).</span>
<span class="comment-copy">Interesting - when I hit this error, it was also about a <code>color</code> argument. The issue was a bit different - my <code>model_matrix</code> argument became keyword-only, and some legacy code had it passed as a positional argument. The new API was expecting <code>color</code>, and got a 4x4 matrix instead.</span>
<span class="comment-copy">Hi, I don't get it for the second example. It also satisfies the condition: <code>When a keyword argument is specified that overwrites a positional argument</code>. But why the latter one can work? What's the rule when python assign the arguments. Thank you.</span>
<span class="comment-copy">@Stallman: the second example I gave is also a non-working one. color=20 conflicts with color="green". The rule for assignment is given right after. More info: <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#keyword-arguments</a> Particularly the 3rd of the 4 "invalid calls" examples.</span>
<span class="comment-copy">Or replace first <code>self</code> with the class name. ;)</span>
<span class="comment-copy">Did the other way around xD</span>
<span class="comment-copy">This comment helps me spot my problem: I forget to add a <code>self</code> argument inside the function declaration. i.e. what should be <code>def myFunction(self, a, b, c='123')</code> was written as <code>def myFunction(a, b, c='123')</code>. And because <code>b</code> takes a list and <code>c</code> takes a scalar, when missing self the arguments messed up and eventually the input of <code>b</code> goes to <code>c</code>, causing the "multiple arguments" error. I make this mistake because I tested this internal method outside the class and forget to add the <code>self</code> back in. Hope helpful for someone else!</span>
<span class="comment-copy">@yuqli This is exactly how I get into this problem as well. ;) Nice to hear that this post helped you.</span>
<span class="comment-copy">I did the same. I wrote a class method that I did not pass self in.</span>
