<div class="post-text" itemprop="text">
<p>I'm trying to divide a very big text file into two parts and dump the two parts into two different mysql table. I do this in python, inspect the text line by line and categorize each line by a category code.</p>
<p>Now after I divide the text, how do I pipe them into two separate fifo files so I can pipe these fifo to mysql client tools? </p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're looking to create pipes for two separate, and apparently simultaneous, MySQL imports, from the same Python script?</p>
<p>While it's not <em>impossible</em> to do this via shell redirection, it's going to be painful. Your Python script has to somehow pass the file descriptors of its pipes to the shell, so your shell script can redirect those file descriptors to the MySQL commands.</p>
<p>A much easier solution is to do it in Python, with the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module.</p>
<p>I don't know the tool and syntax you hope to use for doing the bulk load; all you've told us is that you want to give it a "pipe". So, I'll just assume that it's the <code>mysqlimport</code> command mentioned in hbristow's answer, and that it handles stdin via the usual Unix convention of giving it <code>-</code> as a filename; since this is just for demonstrating the actual interesting part, it doesn't matter very much anyway.</p>
<p>So:</p>
<pre><code>from subprocess import Popen, stdin

args = ['mysqlimport', my_db_name, '-']
with Popen(args, stdin=PIPE) as import1, Popen(args, stdin=PIPE) as import2:
    with open('giantfile.txt') as f:
        for line in f:
            data = parse(line)
            if belongs_in_import2(data):
                import2.stdin.write(make_sql(data))
            else:
                import1.stdin.write(make_sql(data))
</code></pre>
<p>We've created two separate child processes, each with its own separate <code>stdin</code> pipe, and we can write to them the same way we can to any other files.</p>
<p>You may need to <code>import1.stdin.close()</code> and <code>import2.stdin.close()</code> if the <code>mysqlimport</code> tool expects you to close/EOF the input file before actually waiting on it to exit.</p>
<p>If you're using Python 2.4-2.7, you should install and use the <a href="https://pypi.python.org/pypi/subprocess32" rel="nofollow"><code>subprocess32</code></a> backport. If you can't do that for some reason (or if you're using Python 3.0-3.1 and can't upgrade for some reason), you can't use a <code>with</code> statement here; instead, you need to explicitly <code>close</code> the pipes and <code>wait</code> the processes.</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume what you're wanting to do is call the MYSQL command</p>
<pre><code>LOAD DATA INFILE
</code></pre>
<p>without actually creating the INFILE. You could try using the <code>mysqlimport</code> command-line client, and providing that it is happy to accept a pipe, do something like:</p>
<pre><code>python categorize.py --code x big_text_file.txt | mysqlimport db_name /dev/stdin
</code></pre>
<p>where your Python script splits the text file by the code input on the command-line and outputs the result as a string, which is piped to mysqlimport.</p>
</div>
<span class="comment-copy">what is a pipe file? Why not just access the mysql via python?</span>
<span class="comment-copy">that will be too slow to insert every line, via pipeline I can use mysql 'load data' which is super fast than 'insert'</span>
<span class="comment-copy">Can you explain again what do you mean when you say "pipe file"?</span>
<span class="comment-copy">sorry I mean use a fifo. I'm using a percona tool called pt-fifo-split, it can read from fifo file.</span>
<span class="comment-copy">this is great, at least it shows me the separated process, so what does make_sql function do? what does this function return?</span>
<span class="comment-copy">@Suanmeiguo: It does whatever you want it to do. Presumably you're trying, for each line of input data, to generate either a line of data or a statement as output to pass to the MySQL bulk loader. That function is where you put the code that generates that output and returns it as a string (including the trailing newline).</span>
<span class="comment-copy">But he apparently wants to create two separate pipes, not just one, so this won't work.</span>
<span class="comment-copy">Abarnert got my point. I want to create two seperate pipes.</span>
