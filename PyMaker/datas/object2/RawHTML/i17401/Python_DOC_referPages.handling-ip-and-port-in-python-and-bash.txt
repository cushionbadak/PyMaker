<div class="post-text" itemprop="text">
<p>Using python and bash, I'd like to accomplish two things:</p>
<ol>
<li><p>Need to split an ipv6 address and port combination in the format [fec2::10]:80 to fec2::10 and 80.</p></li>
<li><p>Given an IP address and port combination, I need to determine if the IP is a v4 or v6 address. Eg: 1.2.3.4:80 and [fec2::10]:80</p></li>
</ol>
<p>Please suggest a way to do it.</p>
<p>Thanks!</p>
<p>Sample code:</p>
<pre><code>#!/usr/bin/env python

import optparse

def main():
    server = "[fec1::1]:80"
    if server.find("[", 0, 2) == -1:
       print "IPv4"
       ip, port = server.split(':')
    else:
       print "IPv6"
       new_ip, port = server.rsplit(':', 1)
       print new_ip
       ip = new_ip.strip('[]')

    print ip
    print port

if __name__ == '__main__':
    main()
</code></pre>
<p>This works for all cases except when the input is specified without a port. Eg: 10.78.49.50 and [fec2::10]</p>
<p>Any suggestions to address this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>your_input</code> is like <code>"[fec2::10]:80"</code> or <code>"1.2.3.4:80"</code>, it is easy to split the port and find out the ip address:</p>
<pre><code>#!/usr/bin/env python3
from ipaddress import ip_address

ip, separator, port = your_input.rpartition(':')
assert separator # separator (`:`) must be present
port = int(port) # convert to integer
ip = ip_address(ip.strip("[]")) # convert to `IPv4Address` or `IPv6Address` 
print(ip.version) # print ip version: `4` or `6`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/urlparse.html" rel="nofollow"><code>urlparse</code></a> (called <code>urllib.parse</code> in 3.x) to separate the URL into each of its components:</p>
<pre><code>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; ipv4address = urlparse("http://1.2.3.4:80")
&gt;&gt;&gt; ipv4address
ParseResult(scheme='http', netloc='1.2.3.4:80', path='', params='', query='', fragment='')
&gt;&gt;&gt; ipv6address = urlparse("http://[fec2::10]:80")
&gt;&gt;&gt; ipv6address
ParseResult(scheme='http', netloc='[fec2::10]:80', path='', params='', query='', fragment='')
</code></pre>
<p>Then you can split the port off by finding the index of the last colon using <a href="http://docs.python.org/2/library/stdtypes.html#str.rfind" rel="nofollow"><code>rfind</code></a>:</p>
<pre><code>&gt;&gt;&gt; ipv4address.netloc.rfind(':')
7
&gt;&gt;&gt; ipv4address.netloc[:7], ipv4address.netloc[8:]
('1.2.3.4', '80')
&gt;&gt;&gt; ipv6address.netloc.rfind(':')
10
&gt;&gt;&gt; ipv6address.netloc[:10], ipv6address.netloc[11:]
('[fec2::10]', '80')
</code></pre>
<p>Identifying which type it is should then be as simple as <code>if ':' in that_split_tuple[0]</code>, right? (Not 100% sure because it's been a while since I learned about how to write IPv6 addresses in URLs.)</p>
<p>Finally, removing the brackets from your IPv6 address is simple, there are many ways to do it:</p>
<pre><code>&gt;&gt;&gt; ipv6address.netloc[:10].replace('[', '').replace(']', '')
'fec2::10'
&gt;&gt;&gt; ipv6address.netloc[:10].strip('[]')
'fec2::10'
</code></pre>
<p><strong>Edit</strong>: since you expressed concern about not always having port numbers, you could simplify significantly by using a <a href="http://docs.python.org/2/library/re.html" rel="nofollow">regular expression</a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; f = lambda(n): re.split(r"(?&lt;=\]):" if n.startswith('[') else r"(?&lt;=\d):", n)
&gt;&gt;&gt; f(ipv4address.netloc)
['1.2.3.4', '80']
&gt;&gt;&gt; f(ipv6address.netloc)
['[fec2::10]', '80']
&gt;&gt;&gt; f("1.2.3.4")
['1.2.3.4']
&gt;&gt;&gt; f("[fec2::10]")
['[fec2::10]']
</code></pre>
<p>(I'm having trouble being more clever with my regular expression, hence the inline ternary.)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the code I came up with. It looks lengthy and laborious, but it addresses all possible input scenarios. Any suggestion to condense/better it is most welcome :)</p>
<pre><code>#!/usr/bin/env python

import optparse

def main():
    server = "[fec1::1]:80"

    if server.find("[", 0, 2) == -1:
       print "IPv4"
       if server.find(":", 0, len(server)) == -1:
          ip = server
          port = ""
       else:
          ip, port = server.split(':')
    else:
       print "IPv6"
       index = server.find("]", 0, len(server))
       if index == -1:
          print "Something wrong"
          new_ip = ""
          port = ""
       else:
          if server.find(":", index, len(server)) == -1:
             new_ip = server
             port = ""
          else:
             new_ip, port = server.rsplit(':', 1)
       print new_ip
       ip = new_ip.strip('[]')

    print ip
    print port

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">So what is the problem?</span>
<span class="comment-copy">My bash and python scripts would receive the IP:port combination as input and the scripts need to determine the address family of the IP, followed by splitting the IP and port.</span>
<span class="comment-copy">The <a href="http://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code></a> module is only new as of 3.3, what if someone is running an earlier version of python? I do think that finding the version is simpler this way, though, don't get me wrong. :)</span>
<span class="comment-copy">@2rs2ts: you could use <a href="https://code.google.com/p/ipaddr-py/" rel="nofollow noreferrer"><code>ipaddr-py</code></a> on earlier versions.</span>
<span class="comment-copy">Ah, nice to know. It's still not part of the standard modules, though.</span>
<span class="comment-copy">@J.F.Sebastian: I'm unable to use both ipaddress and ipaddr-py modules in my script. For ipaddress, it says:                       Traceback (most recent call last):   File "./ip_parse.py", line 4, in &lt;module&gt;     from ipaddress import ip_address ImportError: No module named ipaddress      from ipaddress import ip_address</span>
<span class="comment-copy">...and for ipaddr-py, it says:    File "./ip_parse.py", line 5     from ipaddr-py import ip_address                ^ SyntaxError: invalid syntax</span>
<span class="comment-copy">I've added a module-independent code that I wrote, to my question. It is incomplete. Any suggestions for it?</span>
<span class="comment-copy">@Maddy Well, at this point I'll write a regular expression for you, but you need to tell me if you're always going to get brackets around your IPv6 addresses, and whether you're going to use hybrid addresses e.g. <code>::ffff:1.2.3.4</code>.</span>
