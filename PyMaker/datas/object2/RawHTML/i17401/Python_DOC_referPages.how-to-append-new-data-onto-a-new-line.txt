<div class="post-text" itemprop="text">
<p>My code looks like this:</p>
<pre><code>def storescores():

   hs = open("hst.txt","a")
   hs.write(name)
   hs.close() 
</code></pre>
<p>so if I run it and enter "Ryan"
then run it again and enter "Bob"
the file hst.txt looks like </p>
<pre><code>RyanBob 
</code></pre>
<p>instead of</p>
<pre><code>Ryan
Bob
</code></pre>
<p>How do I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a newline, you have to write one explicitly. The usual way is like this:</p>
<pre><code>hs.write(name + "\n")
</code></pre>
<p>This uses a backslash escape, <code>\n</code>, which Python converts to a newline character in string literals. It just concatenates your string, <code>name</code>, and that newline character into a bigger string, which gets written to the file.</p>
<p>It's also possible to use a multi-line string literal instead, which looks like this:</p>
<pre><code>"""
"""
</code></pre>
<p>Or, you may want to use string formatting instead of concatenation:</p>
<pre><code>hs.write("{}\n".format(name))
</code></pre>
<p>All of this is explained in the <a href="http://docs.python.org/3/tutorial/inputoutput.html" rel="noreferrer">Input and Output</a> chapter in the tutorial.</p>
</div>
<div class="post-text" itemprop="text">
<p>All answers seem to work fine. If you need to do this <em>many times</em>, be aware that writing</p>
<pre><code>hs.write(name + "\n")
</code></pre>
<p>constructs a new string in memory and appends that to the file.</p>
<p>More efficient would be</p>
<pre><code>hs.write(name)
hs.write("\n")
</code></pre>
<p>which does not create a new string, just appends to the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same issue. And I was able to solve it by using a formatter. </p>
<pre><code>file_name = "abc.txt"
new_string = "I am a new string."
opened_file = open(file_name, 'a')
opened_file.write("%r\n" %new_string)
opened_file.close()
</code></pre>
<p>I hope this helps. </p>
</div>
<div class="post-text" itemprop="text">
<p>There is also one fact that you have to consider.
You should first check if your file is empty before adding anything to it. Because if your file is empty then I don't think you would like to add a blank new line in the beginning of the file. This code </p>
<ol>
<li>first checks if the file is empty</li>
<li>If the file is empty then it will  simply add your input text to the file else it will add a new line and then it will add your text to the file. <em>You should use a try catch for <code>os.path.getsize()</code> to catch any exceptions.</em></li>
</ol>
<p><strong>Code</strong>: </p>
<pre><code>import os

def storescores():
hs = open("hst.txt","a")
if(os.path.getsize("hst.txt") &gt; 0):
   hs.write("\n"+name)
else:
   hs.write(name)

hs.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python &gt;= 3.6 you can use new <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">string literal</a> feature:</p>
<pre><code>with open('hst.txt', 'a') as fd:
    fd.write(f'\n{name}')
</code></pre>
<p>Please notice using '<a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">with statment</a>' will automatically close file when it fd runs out of scope</p>
</div>
<div class="post-text" itemprop="text">
<p>I presume that all you are wanting is simple string concatenation:</p>
<pre><code>def storescores():

   hs = open("hst.txt","a")
   hs.write(name + " ")
   hs.close() 
</code></pre>
<p>Alternatively, change the " " to "\n" for a newline. </p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is not to add a newline after writing your string. That may solve a different problem. What you are asking is how to add a newline <strong><em>before</em></strong> you start appending your string. If you want to add a newline, but only if one does not already exist, you need to find out first, by reading the file. </p>
<p>For example, </p>
<pre><code>with open('hst.txt') as fobj:
    text = fobj.read()

name = 'Bob'

with open('hst.txt', 'a') as fobj:
    if not text.endswith('\n'):
        fobj.write('\n')
    fobj.write(name)
</code></pre>
<p>You might want to add the newline after name, or you may not, but in any case, it isn't the answer to your question.</p>
</div>
<span class="comment-copy">This is a tradeoff between constructing a new string in memory with <code>BINARY_ADD</code> vs doing a <code>LOAD_FAST</code> to get hs(can be optimized away outsize the loop), <code>LOAD_ATTR</code> to get <code>write</code>, and a <code>CALL_FUNCTION</code>(relatively high overhead) twice, so it may depend on the size of the <code>name</code> string. In the end, benchmarking is the best way to see(and only if you need this speed-up).</span>
<span class="comment-copy">He wants a newline between them, not a space. (It's hard to tell from the question because his formatting is broken, but if you look at the question source, he typed a newline.)</span>
<span class="comment-copy">Thanks - I did address that just in case but I hadn't checked the formatting.</span>
<span class="comment-copy">Yeah, I'm sorry, I'm new to this website and couldn't quite get my head around the formatting of questions but I've got it now, thanks</span>
<span class="comment-copy">@user3320839: Usually when I edit a question I add a comment explaining what I did, but in this case I was pretty sure you would probably figure it out on your own. And no harm done; nobody writes perfect questions their first try.</span>
