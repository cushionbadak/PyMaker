<div class="post-text" itemprop="text">
<p>A question of semantics, really.</p>
<p>Up until recently, if I had to do any typechecking on a structure, I would use <code>type(obj) is list</code> et. al. However since joining SO I've noticed everyone (and I mean <em>EVERYONE</em>) uses <code>isinstance(obj,list)</code> instead. It seems they are synonymous, and <code>timeit</code> reveals almost IDENTICAL speed between them.</p>
<pre><code>def a(): return type(list()) is list
def b(): return isinstance(list(),list)

from timeit import timeit
timeit(a)
# 0.5239454597495582
timeit(b)
# 0.5021292075273176
</code></pre>
<p>Indeed even <code>dis</code> agrees they're synonymous, with the exception of <code>type is</code>'s <code>COMPARE_OP</code></p>
<pre><code>from dis import dis

dis(a)
# 2           0 LOAD_GLOBAL              0 (type) 
#             3 LOAD_GLOBAL              1 (list) 
#             6 CALL_FUNCTION            0 (0 positional, 0 keyword pair) 
#             9 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
#            12 LOAD_GLOBAL              1 (list) 
#            15 COMPARE_OP               8 (is) 
#            18 RETURN_VALUE

dis(b)
# 2           0 LOAD_GLOBAL              0 (isinstance)
#             3 LOAD_GLOBAL              1 (list) 
#             6 CALL_FUNCTION            0 (0 positional, 0 keyword pair) 
#             9 LOAD_GLOBAL              1 (list) 
#            12 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
#            15 RETURN_VALUE 
</code></pre>
<p>I frankly find it more readable to say <code>if type(foo) is list:</code> than <code>if isinstance(foo,list):</code>, the first is basically just pseudo-code and the second calls some function (which I have to look up every time to be <code>isinstance</code> or <code>instanceof</code>) with some arguments. It doesn't look like a type cast, and there's no explicit way of knowing whether <code>isinstance(a,b)</code> is checking if <code>b</code> is an instance of <code>a</code> or vice-versa.</p>
<p>I understand from <a href="https://stackoverflow.com/questions/1549801/differences-between-isinstance-and-type-in-python">this question</a> that we use <code>isinstance</code> because it's nicer about inheritance. <code>type(ClassDerivedFromList) is list</code> will fail while <code>isinstance(ClassDerivedFromList,list)</code> will succeed. But if I'm checking what should ALWAYS BE A BASE OBJECT, what do I really lose from doing <code>type is</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>if I'm checking what should ALWAYS BE A BASE OBJECT, what do I really lose from doing type is?</p>
</blockquote>
<p>well, it's nice you give the full documented answer in your question, so your answer is you lose <em>nothing</em>! The only times where <code>isinstance()</code> is necessary is when checking inheritance of a given class compared to another, as you well said and referenced. <code>type()</code> shall be only used to check whether an instance is <em>exactly</em> of a given base type. </p>
</div>
<div class="post-text" itemprop="text">
<p>Other than the inheritance issue, you also lose the ability to test multiple types when using <code>isinstance</code>. For example:</p>
<pre><code>def chk(typ):
    if not isinstance(typ, (str, int)):
        raise ValueError('typ must be string or int')
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">Python Docs for the built-in type function</a> provide clear guidance on the difference between type (with one arg) and isinstance.</p>
<p><em>With one argument, return the type of an object. The return value is a type object and generally the same object as returned by object.<strong>class</strong>.
The isinstance() built-in function is recommended for testing the type of an object, because it takes subclasses into account.</em></p>
<p>To illustrate, take a look at the inheritance hierarchy below in module diamond:</p>
<p><a href="https://i.stack.imgur.com/zXyhw.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/zXyhw.png"/></a></p>
<p>Then take a look at the python console output below based on module diamond:</p>
<p><a href="https://i.stack.imgur.com/2nKzd.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2nKzd.png"/></a></p>
<p>As per the documentation, it is more versatile and can cover a wider range of scenarios. With respect to the OP's original question - the performance characteristics were not stated as a valid reason to favour one over the other. Neither was readability.</p>
<p>For a more in-depth discussion, which includes an explanation on (in the words of the answerer) <em>"why checking type equality is an even worse practice in recent Python versions than it already used to be"</em>, please see this highly voted <a href="https://stackoverflow.com/a/1549854/1882064">answer</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to your question is:<br/>
No, given that you're checking for a definite base class, as you loose the ability to test for inherited classes.</p>
<p>And IMO <code>isinstance</code> is nicer to read and in Python: Readability counts.</p>
<p>PS: I'm getting a significant difference in timings (on Python 3.3)</p>
<pre><code>      type: 0.5241982917936874  
isinstance: 0.46066255811928847
</code></pre>
</div>
<span class="comment-copy">I'm specifically thinking about refactoring a function I wrote about 6 months ago that accepts either a string or a list of strings. The only input to that function will EVER be a <code>str</code> or a <code>list</code>, so is doing <code>if type(foo) is str: _handle_str(foo) else: _handle_list(foo)</code> really bad practice?</span>
<span class="comment-copy">@adsmith: do you use Python 3?  If not, your code just broke if you wind up with a unicode string.</span>
<span class="comment-copy">A pitfall that <code>isinstance(foo, basestring)</code> avoids..</span>
<span class="comment-copy">or you could simply do <code>if type(foo) is list: _handle_list(foo) else: _handle_str(foo)</code>. @DSM is totally right, to handle strings correctly, you need to check <code>isinstance(foo, basestring)</code>. And if I were you I'd actually check <code>if type(foo) is list: _handle_list(foo) elif isinstance(foo, basestring): _handle_str(foo) else raise Exception("Type Not Handled")</code>.</span>
<span class="comment-copy">Your lib will be more easily adopted by others, or migrated to new features, if you are more tolerant of other sequence types than just list, most notably tuple and set. Accepting generator expressions in place of your list is also forward-thinking.</span>
<span class="comment-copy">You can always do  <code>type(x) in (str, int)</code>.</span>
<span class="comment-copy">I appreciate the answer, but the only part of the question you talk about here is one that I answer in my question. "I understand...that we use <code>isinstance</code> because it's nicer about inheritance. <code>type(ClassDerivedFromList) is list</code> will fail while <code>isinstance(ClassDerivedFromList, list)</code> will succeed"</span>
<span class="comment-copy">@AdamSmith - as pointed out in my answer, the docs clearly explain the difference. " The isinstance() built-in function is recommended for testing the type of an object, because it takes subclasses into account."  I am clarifying your uncertainty - and why you had noticed it was overwhelmingly the popular choice. It is more versatile and can cover a wider range of scenarios - type() would suffice where you know the exact type. Also wished to illustrate this answer with some code examples to clarify for others.</span>
<span class="comment-copy">If you down-vote, I would be grateful if you could offer an explanation so I can amend / improve the answer if deemed necessary. Thanks!</span>
<span class="comment-copy">I didn't downvote, but this answer is specifically about the part the question explicitly did not ask about. Seems pretty weird to me. The question asks specifically about the situation when one wants to test an exact type, and the answer talks about how <code>isinstance</code> is better when one doesn't want to test an exact type.</span>
<span class="comment-copy">My point exactly, thanks for the helpful comment - isInstance is more versatile hence the popularity. performance characteristics were not stated as a reason to favour one over the other. Hence most people opt for the more versatile option unless they "need" to do otherwise.</span>
<span class="comment-copy">You find <code>isinstance(foo,list)</code> to be easier to read than <code>type(foo) is list</code> ??</span>
<span class="comment-copy">@adsmith Yes...</span>
