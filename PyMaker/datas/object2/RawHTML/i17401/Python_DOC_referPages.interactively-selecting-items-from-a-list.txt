<div class="post-text" itemprop="text">
<p>I have a need to print the contents of a folder to a user, who then picks one of the files. The program then takes that choice and uses it elsewhere.</p>
<p>My code to achieve this:</p>
<pre><code>keylist = os.listdir('./SomeFolder/')
keycount = len(keylist)
for key in keylist:
    keynum = (keylist.index(key) + 1)
    print(str(keynum) + ' : ' + str(key))
while True:
    try:
        keychoice = int(input('Please Choose a Key : '))
        print()
        if 1 &lt;= keychoice &lt;= keycount:
            break
        else:
            raise MenuError()
    except ValueError:
        print('Please enter a valid option')
        continue
    except MenuError:
        print('Please enter a valid option, ' + str(keychoice) + " isn't an option.")
        continue

chosenkey = keylist[(keychoice - 1)]
print(chosenkey + ' has been chosen')
</code></pre>
<p>Overall, this works ok. But, is there a better way to do it?</p>
<p>I'm new to python, so any pointers are greatly received.
The program in which i use this is <a href="https://github.com/andyharney/pySignare" rel="nofollow" title="pySignare">pySignare</a>
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only improvement I can offer is to use the <a href="http://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code> function</a>:</p>
<pre><code>keylist = os.listdir('./SomeFolder/')
keycount = len(keylist)

for keynum, key in enumerate(keylist, 1):
    print('{} : {}'.format(keynum, key))
</code></pre>
<p>I started the count for you at <code>1</code> to match your output; users find counting from 1 more natural anyway. </p>
<p>This also makes use of <a href="http://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">string formatting</a>, a much more readable and concise method of building strings. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'll take a closer look at this shortly, but the thing that jumped out at me was this:</p>
<pre><code>for key in keylist:
    keynum = (keylist.index(key) + 1)
    print(str(keynum) + ' : ' + str(key))
</code></pre>
<p>You're using <code>list.index</code> to get do a lookup of a key while you're iterating through it. Don't do that.</p>
<p>The old better way of doing that was this:</p>
<pre><code>for i in range(len(keylist)):
    key = keylist[i]
    keynum = i
    print("{} : {}".format(keynum,key))
</code></pre>
<p>The REAL way you should do this is:</p>
<pre><code>for keynum, key in enumerate(keylist):
    print("{} : {}".format(keynum + 1,key))
</code></pre>
<p><a href="http://docs.python.org/3.3/library/functions.html#enumerate" rel="nofollow"><code>enumerate(iterable)</code></a> runs through <code>iterable</code> and returns a tuple for each item, representing <code>(index, value)</code>. You're unpacking those with <code>keynum, key</code>. In order to fit what you did originally, you add one to <code>keynum</code> before displaying it, then you'll subtract one again from the user input.</p>
<p>I would also make a function that defines integer input. Something like:</p>
<pre><code>def int_input(prompt,range_=None):
    while True:
        in_ = input(prompt)
        try: in_ = int(in_)
        except ValueError: pass
        else:
            if not range or if in_ in list(range_): return in_
        print("Invalid value, please try again.")
</code></pre>
<p>This will let you do something like:</p>
<pre><code>keylist = os.listdir("path/to/dir")
for i,key in enumerate(keylist):
    print("{} : {}".format(keynum+1, key))
chosen_key = int_input("Which dir? ",range(1,len(keylist)+1)) - 1
print ("{} has been chosen!".format(keylist[chosen_key]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The two main things you do here that are worth avoiding are the while True loop and the lack of functions. In general as well, I think you can accomplish what you are looking for much easier:</p>
<pre><code>def getChoice(path):
    file_list = os.listdir(path)
    for i,j in enumerate(file_list):
        print "{choice}: {f}".format(choice=i+1, f=j) #Index from one.
    user_choice = int(input("What file do you wish to use?"))

    if user_choice in range(len(file_list)):
        print "You chose {f}".format(f=file_list[user_choice - 1])
        return file_list[user_choice-1]
    else:
        print "That is not a valid selection."
        return False
</code></pre>
<p>Then I'd wrap the function call so I had something like:</p>
<pre><code>choice = False
while not choice:
    choice = getChoice(path)
</code></pre>
<p>This way you avoid a while true loop, and your getChoice function is independently testable of anything else. </p>
<p>Note: I didn't test this code, but it looks good.</p>
</div>
<span class="comment-copy">Are you sure <code>os.listdir(./SomeFolder/)</code> works? Did you copy/paste this from code you know runs?</span>
<span class="comment-copy">Yeah it works fine. Should it not?</span>
<span class="comment-copy">It shouldn't even compile. I'm quite confident there are some quotation marks missing.</span>
<span class="comment-copy">@AndyHarney he's questioning the fact that you didn't include <code>"</code>'s around it, and <code>os.listdir(./SomeFolder/)</code> definitely DOESN'T work :)</span>
<span class="comment-copy">@user2357112 I'm fairly confident that there is a path to a real folder missing too! :)</span>
<span class="comment-copy">Thank you for the pointers. Its a shame I cannot upvote all of these.</span>
<span class="comment-copy">Thanks for the tips. I have made the changes and it. Out of interest why should I not do a lookup of a key while iterating through it? I fear I maybe missing something obvious.</span>
<span class="comment-copy">@AndyHarney Because you're already iterating through it -- you can be pulling the index and binding it with the key instead of making an expensive O(n) lookup each time :(</span>
<span class="comment-copy">Ah, I can see others had similar recommendations.</span>
<span class="comment-copy">Overall, its wrapped in a function. I thought for clarity to strip it out. Thanks for the advice</span>
