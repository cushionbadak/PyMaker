<div class="post-text" itemprop="text">
<p>I have a piece of code that appends a users name and score to a file but I was wondering how I could make it so that only 10 names and scores can be on the file at any time. My code is as follows:</p>
<pre><code>def storescores():
    hs = open("hst.txt", "a")
    hs.write(name + " ")
    hs.write(str(score) + "\n")
    hs.close()
</code></pre>
<p>Is there any way to make it so that if 10 names are already on the list then no more can be added? If this requires some form of sorting method (selection, bubble, etc) then could you please put that in as well?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, whatever you do is going to require reading up to 10 lines from the file.</p>
<p>If you just want to keep the first 10 scores, then stop recording new ones, that's easy. I'll use the <a href="http://docs.python.org/3/library/linecache.html" rel="nofollow"><code>linecache</code></a> module for efficiency (so if you call <code>storescores</code> 1000 times in a row, it'll remember that it already looking for and failed to find a 10th line). This will return an empty string if there are fewer than 10 lines, or the 10th line if there are 10 or more. So:</p>
<pre><code>def storescores():
    if linecache.getline("hst.txt", 10):
        print("Already stored 10 scores, sorry")
        return
    hs.close()
    hs = open("hst.txt", "a")
    hs.write(name + " ")
    hs.write(str(score) + "\n")
    hs.close()
</code></pre>
<p>If you want the most recent 10 scores, you will have to read in the lines, then write out a new file. Like this:</p>
<pre><code>def storescores():
    with open("hst.txt") as hs:
        lines = list(hs)
    lines.append(name + " " + score + "\n")
    lines = lines[-10:]
    with open("hst.txt", "w") as hs:
        for line in lines:
            hs.write(line)
</code></pre>
<p>If you want the <em>top</em> 10 scores, you can do the same thing, but add a sort step in the middle. There's no reason to write an explicit selection sort or bubble sort—and, in fact, you don't want to, because those are not good sort algorithms in the first place. Just call the <code>sort</code> method on lists.</p>
<p>The tricky bit is that you want to sort on the <em>score</em>, not the whole line (otherwise "Bob 100" is a higher score than "Andrew 200"), and on the score <em>as a number</em> rather than as a string (otherwise, "2" is a higher score than "10"). So, you need a <a href="http://docs.python.org/3/howto/sorting.html" rel="nofollow">key function</a> that splits the string, takes the last bit, and turns it into a number. So:</p>
<pre><code>def storescores():
    with open("hst.txt") as hs:
        lines = list(hs)
    lines.append(name + " " + score + "\n")
    lines.sort(key=lambda line: int(line.split()[-1]))
    lines = lines[-10:]
    with open("hst.txt", "w") as hs:
        for line in lines:
            hs.write(line)
</code></pre>
<p>There are ways to improve this further. For example, instead of rewriting the file in-place, you might want to write to a new temporary file, then copy it over the file when you're done (so if someone pulls the plug in the middle of your program running, you end up with either the old scores, or the new ones, rather than a truncated partial file). Or you might want to use the <a href="http://docs.python.org/3/library/heapq.html" rel="nofollow"><code>heapq</code></a> or <a href="http://docs.python.org/3/library/bisect.html" rel="nofollow"><code>bisect</code></a> modules in cleverest ways to get the new score into its appropriate sorted position instead of re-sorting the entire already-sorted list (not that it matters much when there are only 10 entries). And so on. But this should be enough to get you started.</p>
</div>
<div class="post-text" itemprop="text">
<p>There’s no built-in way to do something like this. What you’ll need to do is something like</p>
<ol>
<li>Read in the file</li>
<li>Add the newest score</li>
<li>Examine the list to see if there are too many scores, and if there are, remove one</li>
<li>Write the file</li>
</ol>
</div>
<span class="comment-copy">Do you want only the <i>top</i> 10 scores? Or only the <i>most recent</i> 10 stores? Or only the <i>first</i> 10 scores?</span>
<span class="comment-copy">If "only the top 10 scores" means that if I beat a score then the lowest is deleted and the new score is added, then yes, if it isn't too much trouble</span>
<span class="comment-copy">Thanks, the third one is what I was looking for, but it sorts them by putting the smallest score first, is there any way to put the highest score first? (e.g. list is in order [2, 11, 18] when I would prefer [18, 11, 2])</span>
<span class="comment-copy">@user3320839: Sure. The short version is, use the <code>reverse</code> argument to <code>sort</code>. But you really should read the Sorting HOWTO that I linked to and understand all the things you can do. (Note that you'll also want to keep the first 10: <code>lines[:10]</code>, rather than the last 10, <code>lines[-10:]</code>, if you reverse the order.)</span>
<span class="comment-copy">Thanks, I'll bookmark that page. Do you know where I could find a page that actually has the code for the individual sorting methods if I ever wanted to write them out in a program?</span>
<span class="comment-copy">@user3320839: You mean the source code to <code>list.sort</code>? In CPython, that's written in C; you'll probably want to read <a href="http://hg.python.org/cpython/file/default/Objects/listsort.txt" rel="nofollow noreferrer">listsort.txt</a> first, then tackle <a href="http://hg.python.org/cpython/file/default/Objects/listobject.c#l1903" rel="nofollow noreferrer">the C code</a>. Things are similar for the <code>sorted</code> function and most of the other built-in sort-related things (even only peripherally-related things like <code>itertools.groupby</code>). However, you may want to look at <a href="https://bitbucket.org/pypy/pypy/src" rel="nofollow noreferrer">PyPy</a>, which has pure-Python implementations of most things.</span>
<span class="comment-copy">@user3320839: PyPy can be a bit complicated to search through; <a href="https://bitbucket.org/pypy/pypy/src/default/pypy/objspace/std/listobject.py?at=default#cl-350" rel="nofollow noreferrer"><code>list.sort</code></a> is not that useful until you trace it down through 5 steps to <a href="https://bitbucket.org/pypy/pypy/src/default/rpython/rlib/listsort.py?at=default" rel="nofollow noreferrer"><code>TimSort</code></a>…</span>
