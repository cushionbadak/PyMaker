<div class="post-text" itemprop="text">
<p>If I have a list</p>
<pre><code>L = range(10)
</code></pre>
<p>I can match it as a list using</p>
<pre><code>isinstance(L, list)
</code></pre>
<p>However, if I want to enumerate it</p>
<pre><code>M = enumerate(L)
</code></pre>
<p>It now becomes an enumerate object, which doesn't match as a list, and enumerate isn't a standard python object which I can match using isinstance.</p>
<p>What's the most elegant way to match an enumerate object?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why it's not a standard python object? you can use <code>isinstance(M, enumerate)</code> to check:</p>
<pre><code>In [128]: e
Out[128]: &lt;enumerate at 0x6933b70&gt;

In [129]: type(e)
Out[129]: enumerate

In [130]: isinstance(e, enumerate)
Out[130]: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Supplying <code>enumerate</code> as the second argument to <code>isinstance</code> should work fine:</p>
<pre><code>isinstance(M, enumerate)
</code></pre>
<p>See a demonstration below:</p>
<pre><code>&gt;&gt;&gt; M = enumerate(range(10))
&gt;&gt;&gt; M
&lt;enumerate object at 0x020B7EB8&gt;
&gt;&gt;&gt; isinstance(M, enumerate)
True
&gt;&gt;&gt;
</code></pre>
<p>And here is what the <a href="http://docs.python.org/3/library/functions.html#isinstance" rel="nofollow">docs</a> say*:</p>
<blockquote>
<p>isinstance(object, classinfo)</p>
<p><strong>Return true if the object argument is an instance of the classinfo argument, or of a &gt; (direct, indirect or virtual) subclass thereof.</strong> If
  object is not an object of the given type, the function always returns
  false. If classinfo is not a class (type object), it may be a tuple of
  type objects, or may recursively contain other such tuples (other
  sequence types are not accepted). If classinfo is not a type or tuple
  of types and such tuples, a TypeError exception is raised.</p>
</blockquote>
<hr/>
<p>*I added the bold.</p>
</div>
<div class="post-text" itemprop="text">
<p>While I can't see <em>why</em> you would want to do this, you can simply match the type:</p>
<pre><code>&gt;&gt;&gt; enumerate
&lt;type 'enumerate'&gt;
&gt;&gt;&gt; isinstance(enumerate(range(10)),enumerate)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds as though what you really want to do is test to see if you can iterate over your type with a <code>for</code> loop. The way to do this is to test for a method called <code>__iter__</code>:</p>
<pre><code>if hasattr(l, '__iter__'):
    # do something with the iterable
</code></pre>
<p>Or, you could use the standard library:</p>
<pre><code>from collections.abc import Iterable
if isinstance(l, Iterable):
    # do something with the iterable
</code></pre>
<p>This approach will work perfectly for lists, <code>enumerate</code>, tuples, and any custom object which is iterable</p>
</div>
<span class="comment-copy">More importantly, why are you trying to do that?</span>
<span class="comment-copy">You guys are right, I don't know how I overlooked that. I was making a progress bar to wrap around processing a list, and I had an assert statement in there to check if it was a list - when the list was an enumerate object, it was breaking my assert.</span>
