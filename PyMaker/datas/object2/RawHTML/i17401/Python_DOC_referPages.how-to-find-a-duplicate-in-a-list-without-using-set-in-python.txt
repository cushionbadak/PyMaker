<div class="post-text" itemprop="text">
<p>I know that we can use the set in python to find if there is any duplicate in a list. I was just wondering, if we can find a duplicate in a list without using set.</p>
<p>Say, my list is </p>
<pre><code>a=['1545','1254','1545']
</code></pre>
<p>then how to find a duplicate?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; lis = []
&gt;&gt;&gt; a=['1545','1254','1545']
&gt;&gt;&gt; for i in a:
...     if i not in lis:
...         lis.append(i)
... 
&gt;&gt;&gt; lis
['1545', '1254']
&gt;&gt;&gt; set(a)
set(['1254', '1545'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=['1545','1254','1545']
from collections import Counter
print [item for item, count in Counter(a).items() if count != 1]
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['1545']
</code></pre>
<p>This solution runs in O(N). This will be a huge advantage if the list used has a lot of elements.</p>
<p>If you just want to find if the list has duplicates, you can simply do</p>
<pre><code>a=['1545','1254','1545']
from collections import Counter
print any(count != 1 for count in Counter(a).values())
</code></pre>
<p>As <a href="https://stackoverflow.com/questions/21925497/how-to-find-a-duplicate-in-a-list-without-using-set-in-python/21925540?noredirect=1#comment33210647_21925540">@gnibbler suggested</a>, this would be the practically fastest solution</p>
<pre><code>from collections import defaultdict
def has_dup(a):
    result = defaultdict(int)
    for item in a:
        result[item] += 1
        if result[item] &gt; 1:
            return True
    else:
        return False

a=['1545','1254','1545']
print has_dup(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>list.count</code>:</p>
<pre><code>In [309]: a=['1545','1254','1545']
     ...: a.count('1545')&gt;1
Out[309]: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/stdtypes#common-sequence-operations" rel="nofollow"><code>list.count</code></a>:</p>
<pre><code>&gt;&gt;&gt; a = ['1545','1254','1545']
&gt;&gt;&gt; any(a.count(x) &gt; 1 for x in a) # To check whether there's any duplicate
True

&gt;&gt;&gt; # To retrieve any single element that is duplicated
&gt;&gt;&gt; next((x for x in a if a.count(x) &gt; 1), None)
'1545'

# To get duplicate elements (used set literal!)
&gt;&gt;&gt; {x for x in a if a.count(x) &gt; 1}
set(['1545'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>sort the list and check that the next value is not equal to the last one..</p>
<pre><code>a.sort()
last_x = None
for x in a:
    if x == last_x:
       print "duplicate: %s" % x
       break # existence of duplicates is enough

    last_x = x
</code></pre>
<p>This should be O(n log n) which is slower for big n than the Counter solution (but counter uses a dict under the hood.. which is not too dissimilar from a set really).</p>
<p>An alternative is to insert the elements and keep the list sorted.. see the bisect module.  It makes your inserts slower but your check for duplicates fast.</p>
</div>
<div class="post-text" itemprop="text">
<p>If this is homework, your teacher is probably asking for the hideously inefficient <code>.count()</code> style answer.</p>
<p>In practice using a <code>dict</code> is your next best bet if <code>set</code> is disallowed.</p>
<pre><code>&gt;&gt;&gt; a = ['1545','1254','1545']
&gt;&gt;&gt; D = {}
&gt;&gt;&gt; for i in a:
...     if i in D:
...         print "duplicate", i
...         break
...     D[i] = i
... else:
...     print "no duplicate"
... 
duplicate 1545
</code></pre>
<p>Here is a version using groupby which is still much better that the <code>.count()</code> method</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; a = ['1545','1254','1545']
&gt;&gt;&gt; next(k for k, g in groupby(sorted(a)) if sum(1 for i in g) &gt; 1)
'1545'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>thanks all for working on this problem. I also got to learn a lot from different answers. This is how I have answered:</p>
<pre><code>a=['1545','1254','1545']
d=[]
duplicates=False
for i in a:
    if i not in d:
        d.append(i)
        if len(d)&lt;len(a):
            duplicates=True
        else:
            duplicates=False
print(duplicates)
</code></pre>
</div>
<span class="comment-copy">Do you want to find if there any duplicates exist or get a list of duplicates or the first duplicate we can find?</span>
<span class="comment-copy">existence of duplicates is enough.</span>
<span class="comment-copy">Any reason you can't use a set?</span>
<span class="comment-copy">I wanted to explore the problem from an iteration point of view.</span>
<span class="comment-copy">He doesn't want to use <code>set</code> :)</span>
<span class="comment-copy">i get that i just showed that my answer gives the same output as set does.</span>
<span class="comment-copy">Thanks for the idea. It was neat.</span>
<span class="comment-copy">You're most welcome.</span>
<span class="comment-copy"><a href="http://docs.python.org/2/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>Counter(a).most_common()</code></a> gives you more common elements first. The method also accept optional <code>n</code> (number). <code>any(count != 1 for count in Counter(a).values())</code> can be replace with <code>any(count != 1 for count in Counter(a).most_common(1))</code>, or even shorter: <code>Counter(a).most_common(1)[0][1] &gt; 1</code> (assuming <code>a</code> is not empty)</span>
<span class="comment-copy">Problem with the Counter is that it can't shortcircuit. Since just existance is enough, you should stop when the first count hits 2. bring on defaultdict answer.</span>
<span class="comment-copy">@falsetru But to get <code>most_common</code>, it should be sorting internally, right? That makes it O(NlogN) :(</span>
<span class="comment-copy">Ah, you're right. I thought <code>Counter</code> use heap queue interanlly, but it does not.</span>
<span class="comment-copy">@gnibbler Included the <code>defaultdict</code> version :)</span>
<span class="comment-copy">This pattern can be simplified by <code>itertools.groupby</code>.</span>
<span class="comment-copy">The only reason this is probably the best answer is that the only reason not to use set is because of memory usage. This gets around that.</span>
<span class="comment-copy">@DavidEhrmann, no itertools.groupby only groups consecutive items. It's nothing like a set. SQL and Ruby's groupbys are another thing altogether.</span>
