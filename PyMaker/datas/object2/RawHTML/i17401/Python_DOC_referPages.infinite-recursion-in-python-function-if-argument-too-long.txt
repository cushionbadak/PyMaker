<div class="post-text" itemprop="text">
<p>I wrote this recursive function that returns the largest value in a list of integers:</p>
<pre><code>def max_r(l: [int]) -&gt; int:
    if len(l) == 1:
        return l[0]
    else:
        return l[0] if max_r(l[1:]) &lt; l[0] else max_r(l[1:])
</code></pre>
<p>The call <code>max_r([1,4,3,2,3,4,89,2,30,1]</code> returns <code>89</code>, but calling the function on a longer list:</p>
<p><code>max_r([96, 84, 87, 81, 94, 74, 65, 42, 45, 76, 5, 37, 86, 8, 46, 54, 62, 63, 35, 85, 16, 23, 18, 57, 51, 90, 58, 33, 47, 10, 64, 49, 67, 29, 71, 30, 9, 99, 75, 3, 97, 32, 59, 25, 27, 72, 61])</code></p>
<p>results in infinite recursion.  Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>It isn't infinitely recursive, but you are doing the same recursive call twice when you don't need to.  Seems to complete quickly enough with the following change:</p>
<pre><code>def max_r(l: [int]) -&gt; int:
    if len(l) == 1:
        return l[0]
    else:
        result = max_r(l[1:])
        return l[0] if result &lt; l[0] else result
</code></pre>
<p>This isn't just a matter of calling the function recursively twice as many times, I'm not sure on the exact growth rate but it seems be exponential since each extra recursive call will be making more extra recursive calls.</p>
</div>
<span class="comment-copy">why do you think that there is an infinite recursion happening?</span>
<span class="comment-copy">Someone else will answer this sort of question conclusively quicker than I can, but I have to ask: have you put print statements in it to see what it's doing?   Surely that would tell you the answer?</span>
<span class="comment-copy">+1 TIL function annotations in python3 ;)</span>
<span class="comment-copy">I'm a newbie and never encountered something like <code>def max_r(l: [int]) -&gt; int:</code> in Python. Where can I find more about it?</span>
<span class="comment-copy">@Roberto I'm actually not sure, but it is likely some modified interpreter or an editor that allows you to give type hints for better static analysis and/or code completion.</span>
<span class="comment-copy">It's perfectly valid Python 3 syntax. These are called annotations, and you can read about them in the docs: <a href="http://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">To clarify: the function was calling itself twice at each step, for a total of <code>2 ** len(lst) - 1</code> calls. F.J's modification only calls once at each step, for a total of <code>len(lst) - 1</code> calls. On the sample data, that is 46 function calls instead of <b>140.7 trillion</b> calls.</span>
<span class="comment-copy">... which would have immediately been apparent with some basic instrumentation aka print statements ;)</span>
