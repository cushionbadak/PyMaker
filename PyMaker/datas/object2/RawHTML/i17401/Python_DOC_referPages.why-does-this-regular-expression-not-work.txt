<div class="post-text" itemprop="text">
<p>I have a function that parses HTML code so it is easy to read and write with. In order to do this I must split the string with multiple delimiters and as you can see I have used <code>re.split()</code> and I cannot find a better solution. However, when I submit some HTML such as <a href="http://pastebin.com/cUgcfZeE" rel="nofollow">this</a>, it has absolutely no effect. This has lead me to believe that my regular expression is incorrectly written. What should be there instead?</p>
<pre><code>def parsed(data):
    """Removes junk from the data so it can be easily processed."""
    data = str(data)
    # This checks for a cruft and removes it if it exists.
    if re.search("b'", data):
        data = data[2:-1]
    lines = re.split(r'\r|\n', data)  # This clarifies the lines for writing.
    return lines
</code></pre>
<p>This isn't a duplicate if you find a similar question, I've been crawling around for ages and it still doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are converting a <code>bytes</code> value to string:</p>
<pre><code>data = str(data)
# This checks for a cruft and removes it if it exists.
if re.search("b'", data):
    data = data[2:-1]
</code></pre>
<p>which means that all line delimiters have been converted to their Python escape codes:</p>
<pre><code>&gt;&gt;&gt; str(b'\n')
"b'\n'"
</code></pre>
<p>That is a literal <code>b</code>, literal quote, literal <code>\</code> backslash, literal <code>n</code>, literal quote. You would have to split on <code>r'(\\n|\\r)'</code> instead, but most of all, you shouldn't turn bytes values to string representations here. Python produced the <em>representation</em> of the bytes value as a literal string you can paste back into your Python interpreter, which is not the same thing as the <em>value</em> contained in the object.</p>
<p>You want to <em>decode</em> to string instead:</p>
<pre><code>if isinstance(data, bytes):
    data = data.decode('utf8')
</code></pre>
<p>where I am assuming that the data is encoded with UTF8. If this is data from a web request, the response headers quite often include the character set used to encode the data in the <code>Content-Type</code> header, look for the <code>charset=</code> parameter.</p>
<p>A response produced by the <code>urllib.request</code> module has an <code>.info()</code> method, and the character set can be extracted (if provided) with:</p>
<pre><code>charset = response.info().get_param('charset')
</code></pre>
<p>where the return value is <code>None</code> if no character set was provided.</p>
<p>You don't need to use a regular expression to split lines, the <code>str</code> type has a dedicated method, <a href="http://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow"><code>str.splitlines()</code></a>:</p>
<blockquote>
<p>Return a list of the lines in the string, breaking at line boundaries. This method uses the <em>universal newlines</em> approach to splitting lines. Line breaks are not included in the resulting list unless keepends is given and true.</p>
<p>For example, <code>'ab c\n\nde fg\rkl\r\n'.splitlines()</code> returns <code>['ab c', '', 'de fg', 'kl']</code>, while the same call with <code>splitlines(True)</code> returns <code>['ab c\n', '\n', 'de fg\r', 'kl\r\n']</code>.</p>
</blockquote>
</div>
<span class="comment-copy"><i>I have a function that parses HTML code so it is easy to read and write with.</i> Ouch. Why not use a HTML parser instead? BeautifulSoup does this in one.</span>
<span class="comment-copy"><code>from bs4 import BeautifulSoup</code>, <code>print(BeautifulSoup(data).prettify())</code>.</span>
<span class="comment-copy">Obligatory link: <a href="http://stackoverflow.com/a/1732454/10077">stackoverflow.com/a/1732454/10077</a></span>
<span class="comment-copy">Last but not least, if your <code>data</code> value contains <code>b''</code>, then you called <code>str()</code> on a <code>bytes</code> value, instead of decoding it to a string. Don't do that either. And <code>str.splitlines()</code> does what your regular expression does with a built-in method.</span>
<span class="comment-copy">@FredLarson: the OP is trying to split on line delimiters, hardly call for summoning Zalgo here. :-)</span>
