<div class="post-text" itemprop="text">
<p>The purpose of this program is to read in an array of tokens, remove the punctuation, turn all the letters lower case, and then print the resulting array. the readTokens and depunctuateTokens functions both work correctly. My problem is with the decapitalizeTokens function. When I run the program I receive this error:</p>
<pre><code>the name of the program is words.py
['hello', 'hello1', 'hello2']
Traceback (most recent call last):
  File "words.py", line 41, in &lt;module&gt;
    main()    
  File "words.py", line 10, in main
    words = decapitalizeTokens(cleanTokens)
  File "words.py", line 35, in decapitalizeTokens
    if (ord(ch) &lt;= ord('Z')):
TypeError: ord() expected string of length 1, but list found
</code></pre>
<p>My question is what formal parameters I should put into the decapitalizeTokens function in order to return the array resulting from the depunctuateTokens function, but with all the letters lowercase. </p>
<p>This is my program:</p>
<pre><code>import sys
from scanner import *
arr=[]
def main():
    print("the name of the program is",sys.argv[0])
    for i in range(1,len(sys.argv),1):
        print("   argument",i,"is", sys.argv[i])
    tokens = readTokens("text.txt")
    cleanTokens = depunctuateTokens(arr)
    words = decapitalizeTokens(cleanTokens)

def readTokens(s):
    s=Scanner("text.txt")
    token=s.readtoken()
    while (token != ""):
        arr.append(token)
        token=s.readtoken()
    s.close()
    return arr

def depunctuateTokens(arr):
    result=[]
    for i in range(0,len(arr),1):
        string=arr[i]
        cleaned=""
        punctuation="""!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~"""
        for i in range(0,len(string),1):
            if string[i] not in punctuation:
                cleaned += string[i]
        result.append(cleaned)
    print(result)
    return result

def decapitalizeTokens(result):
    if (ord(result) &lt;= ord('Z')):
        return chr(ord(result) + ord('a') - (ord('A')))
    else:
        print(result)
        return result


main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>decapitalizeTokens</code> function works on a single character. You're passing it a list of strings. If you want to call it on every character of every string in that list, you need to loop over the list, and then loop over each string, somewhere.</p>
<p>You can do this with explicit loop statements, like this:</p>
<pre><code>words = []
for token in tokens:
    word = ''
    for char in token:
        word += decaptializeTokens(char)
    words += word
</code></pre>
<p>… or by using comprehensions:</p>
<pre><code>words = [''.join(decapitalizeTokens(char) for char in token) 
         for token in cleanTokens]
</code></pre>
<hr/>
<p>However, I think it would make far more sense to move the loops into the <code>decapitalizeTokens</code> function—both based on its plural name, and on the fact that you have exactly the same loops in the similarly-named <code>depunctuateTokens</code> function. If you build <code>decapitalizeTokens</code> the same way you built <code>depunctuateTokens</code>, then your existing call works fine:</p>
<pre><code>words = decapitalizeTokens(cleanTokens)
</code></pre>
<hr/>
<p>As a side note, the built-in <a href="http://docs.python.org/3/library/stdtypes.html#str.lower" rel="nofollow"><code>lower</code></a> method on strings already does what you want, so you could replace this whole mess with:</p>
<pre><code>words = [token.lower() for token in cleanTokens]
</code></pre>
<p>… which would also fix a nasty bug in your attempt. Consider what, say, <code>decapitalizeTokens</code> would do with a digit or a space.</p>
<p>And, likewise, <code>depunctuateTokens</code> can be similarly replaced by a call to the <a href="http://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>translate</code></a> method. For example (slightly different for Python 2.x, but you can read the docs and figure it out):</p>
<pre><code>punctuation="""!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~"""
punctmap = {ord(char): None for char in punctuation}
cleanTokens = [token.translate(punctmap) for token in cleanTokens]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>cleanTokens = depunctuateTokens(...) #returns an array into cleantokens.<br/>
words = decapitalizeTokens(cleanTokens) #takes an array and returns... whatever.</p>
<p>the fact is that in</p>
<pre><code>def decapitalizeTokens(result):
    if (ord(result) &lt;= ord('Z')):
        return chr(ord(result) + ord('a') - (ord('A')))
    else:
        print(result)
        return result
</code></pre>
<p>result is an array (cleanTokens), and ord(result) fails since it expects a string, and not an array.</p>
<p>perhaps doing words = map(decapitalizeTokens, cleanTokens) can help you</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import scanner
import string
import sys

def read_tokens(fname):
    res = []
    with scanner.Scanner(fname) as sc:
        tok = sc.readtoken()
        while tok:
            res.append(tok)
            tok = sc.readtoken()
    return res

def depunctuate(s):
    return s.translate(None, string.punctuation)

def decapitalize(s):
    return s.lower()

def main():
    print("The name of the program is {}.".format(sys.argv[0]))
    for arg in enumerate(sys.argv[1:], 1):
        print("  Argument {} is {}".format(i, arg))

    tokens = read_tokens("text.txt")
    clean_tokens = [depunctuate(decapitalize(tok)) for tok in tokens]

if __name__=="__main__":
    main()
</code></pre>
</div>
<span class="comment-copy">As a side note, using a global variable <code>arr</code>, and then also returning it from <code>readTokens</code> but storing that copy in <code>tokens</code>, is doubly confusing. Get rid of the global; move the <code>arr = []</code> into the first line of <code>readTokens</code>, and just use <code>tokens</code> instead of <code>arr</code> inside <code>main</code>, and it will be a lot clearer.</span>
<span class="comment-copy">Are <code>lower()</code> and <code>sub()</code>  so mean, they do not deserve your friendship?</span>
<span class="comment-copy">Also, you almost never want to write a loop over <code>range(len(s))</code> and then use <code>s[i]</code> within the loop. Just do <code>for char in s:</code>, and use <code>char</code>.</span>
<span class="comment-copy">Also, you don't need to write <code>range(0, foo, 1)</code>; <code>range(foo)</code> does the same thing.</span>
<span class="comment-copy">Yeah this is my first month so I'm still learning. Also, the teacher said we shouldn't use the lower or sub methods for this project</span>
<span class="comment-copy">Thanks for all the help! My teacher also said not to use the lower method which is why I didn't use it.</span>
<span class="comment-copy">@user3321218: That's a good reason. But as a general hint, whenever a teacher says "don't use the <code>lower</code> method", the first thing you should do is look at the <code>lower</code> method and figure out how to write a function with the exact same interface. First, the builtin methods are generally designed to be easy to use, so if you build a function with the same interface, it'll also be easy to use. Second, it's a lot easier to test your function when there's an already-working function that does the exact same thing.</span>
<span class="comment-copy">That won't solve the problem, because <code>decapitalizeTokens</code> only works on a single character. To use it as written, you have to loop twice—over each token in <code>cleanTokens</code>, and also over each character in each token.</span>
<span class="comment-copy"><code>translate</code> doesn't work like that; you'll just get a <code>TypeError</code>.</span>
<span class="comment-copy">More importantly, you've told him how to fix the function that already works as written, not how to fix the one that's broken.</span>
<span class="comment-copy">@abarnert: yes, I was looking at the wrong function, and yes, <code>str.translate</code> chokes if you pass a set instead of a string. I have repaired both problems and made his code considerably more Pythonic; please take another look.</span>
<span class="comment-copy">OK, that version works in Python 2.6-2.7, but does not work in 3.x (which the OP is most likely using—note the <code>print</code> as function), or in 2.5 and earlier either. In 3.x, there is no <code>deletechars</code> argument; you handle it by mapping to <code>None</code>. In 2.5, the <code>table</code> argument cannot be <code>None</code>; you handle it by mapping every ord to itself.</span>
<span class="comment-copy">More importantly, instead of fixing the OP's code, you've now written completely different code, with no explanation. There's no way he's going to figure out how all of these pieces correspond to what he'd written (especially since most of them don't directly correspond to anything), so he's likely not going to learn anything at all from this, and he's definitely not going to figure out which part of this fixes the problem he was asking about, or how it does so.</span>
