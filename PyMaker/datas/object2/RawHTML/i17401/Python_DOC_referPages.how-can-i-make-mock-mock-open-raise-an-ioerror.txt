<div class="post-text" itemprop="text">
<p>I need to test a instance method that calls <code>open</code>.  In the first test case, I set <code>mock.mock_open</code> to return a string, as expected.  This works wonderfully.</p>
<p>However, I also need to test the case in which an <code>IOError</code> is thrown from this function.  How can I make <code>mock.mock_open</code> raise an arbitrary exception?</p>
<p>This is my approach so far:</p>
<pre><code>@mock.patch.object(somemodule, 'generateDefaultKey')
def test_load_privatekey(self, genkey)
    mo = mock.mock_open(read_data=self.key)
    mo.side_effect = IOError
    with mock.patch('__main__.open', mo, create=True):
        self.controller.loadPrivkey()

    self.assertTrue(genkey.called, 'Key failed to regenerate')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assign the exception to <code>mock.mock_open.side_effect</code>:</p>
<pre><code>mock.mock_open.side_effect = IOError
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>mock.Mock.side_effect</code> documentation</a>:</p>
<blockquote>
<p>This can either be a function to be called when the mock is called, or an exception (class or instance) to be raised.</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; mock = MagicMock()
&gt;&gt;&gt; mock.mock_open.side_effect = IOError()
&gt;&gt;&gt; mock.mock_open()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/venvs/stackoverflow-2.7/lib/python2.7/site-packages/mock.py", line 955, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/Users/mj/Development/venvs/stackoverflow-2.7/lib/python2.7/site-packages/mock.py", line 1010, in _mock_call
    raise effect
IOError
</code></pre>
<p>When using <code>patch()</code> as a context manager, a new mock object is produced; assign to <em>that</em> mock object:</p>
<pre><code>with mock.patch('__main__.open', mo, create=True) as mocked_open:
    mocked_open.side_effect = IOError()
    self.controller.loadPrivkey()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found Martijn's answer a little hard to generalize, so here is what I hope is a simpler answer less tied to the OPs initial code:</p>
<pre><code>from unittest.mock import patch, mock_open


def func_to_test():
    try:
        with open('path/to/open', 'r') as file:
            return 1

    except IOError:
        return 2


def test_open_error():
    with patch("builtins.open", mock_open()) as mock_file:
        mock_file.side_effect = IOError()

        assert func_to_test() == 2

        mock_file.assert_called_with('path/to/open', 'r')
</code></pre>
</div>
<span class="comment-copy">How is this supposed to be used from within a <code>TestCase</code> function?  I've edited my answer to show my latest attempt -- perhaps you can spot my mistake!</span>
<span class="comment-copy">@blz: the <code>patch()</code> context manager returns a mock. I'll update.</span>
<span class="comment-copy">many thanks!  I'm new to mock, but it's actually quite simple once someone shows you how it's done =)</span>
<span class="comment-copy">Do you have a SO virtualenv for each Python version?</span>
<span class="comment-copy">@Simeon: just for 2.7 and 3.3.</span>
<span class="comment-copy">It is worth noting that if all you want is throwing an exception there is no need for <code>mock_open()</code> as a normal mock will do just fine.</span>
<span class="comment-copy">do you mind providing an example?</span>
<span class="comment-copy">In this case you could change the <code>with patch</code> line for this <code>with patch("builtins.open") as mock_file:</code></span>
