<div class="post-text" itemprop="text">
<p>I am using <code>ctypes</code> to interface with a library. There is a method that needs a passed <code>char</code> buffer to be padded on both sides to write network header/footer in, <strong>but</strong> the pointer has to point <em>past</em> the pre-padding.</p>
<p>So far I've accomplished that by doing the following:</p>
<pre><code>send_buffer = b'\0' * 18 + payload + b'\0' * 4
ptr = ctypes.cast (send_buffer, ctypes.c_void_p)
ptr.value += 18
lws.libwebsocket_write (wsi, ptr, len (payload), 0)
</code></pre>
<p>But this feels like a really evil way to do things.</p>
<p>Is this a <em>correct</em> way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>cast</code> is returning the internal pointer of the Python string. Don't pass an immutable Python string to a function that expects a mutable buffer. Use <code>create_string_buffer</code> to create a mutable <code>char</code> array (read section <a href="http://docs.python.org/3/library/ctypes#fundamental-data-types" rel="nofollow">16.17.1.4. Fundamental data types</a>). For the offset, use <code>byref</code> with the optional <code>offset</code> argument:</p>
<pre><code>send_buf = ctypes.create_string_buffer(b'\0' * 18 + payload + b'\0' * 4)
lws.libwebsocket_write(wsi, ctypes.byref(send_buf, 18), len(payload), 0)

send_buf.value # null terminated
send_buf.raw   # complete array
</code></pre>
</div>
