<div class="post-text" itemprop="text">
<p>I used to add shebang line at top of Python script as,</p>
<pre><code>#!/usr/bin/python
...
</code></pre>
<p>And I can execute the my.py file by,</p>
<pre><code>chmod a+r my.py
./my.py
</code></pre>
<p>But after compiled to bytecode, the script can only be executed by python and the shebang does not work anymore.</p>
<pre><code>python my.pyc
</code></pre>
<p>Is there anyway to make shebang workable to compiled python script?</p>
<pre><code>./my.pyc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shebang works only for text scripts, not binary files. Nevertheless, you can use <code>binfmt_misc</code> to execute <code>*.pyc</code> files directly, as reported in <a href="https://mail.python.org/pipermail/python-list/2010-January/564393.html">this Python ML thread</a>:</p>
<blockquote>
<p>Linux, you can use binfmt_misc to make executables out of pyc code. Run:</p>
<pre><code>import imp,sys,string
magic = string.join(["\\x%.2x" % ord(c) for c in imp.get_magic()],"") 
reg = ':pyc:M::%s::%s:' % (magic, sys.executable) 
open("/proc/sys/fs/binfmt_misc/register","wb").write(reg)
</code></pre>
<p>once on your Linux system (or, rather, at boot time), and all pyc
  files become executable (if the x bit is set).</p>
<p><strong>In Debian, installing the binfmt-support package will do that for you.</strong></p>
</blockquote>
<p>(emphasis is mine, note that this will apply to all Debian derivatives, including Ubuntu. The same solution works in Fedora too).</p>
</div>
<div class="post-text" itemprop="text">
<p>No. But you can use other OS-specific mechanisms for invoking arbitrary executable files, e.g. <a href="http://en.wikipedia.org/wiki/Binfmt_misc" rel="nofollow">binfmt_misc</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an updated python 3 version of <a href="https://stackoverflow.com/a/21826136">Stefano Sanfilippo's</a> answer:</p>
<pre><code>import imp,sys,string
magic = "".join(["\\x%.2x" % c for c in imp.get_magic()])
reg = ':pyc:M::%s::%s:' % (magic, sys.executable) 
open("/proc/sys/fs/binfmt_misc/register","w").write(reg)
</code></pre>
</div>
<span class="comment-copy">You're not supposed to execute <code>.pyc</code> files, why are you trying to do this?</span>
<span class="comment-copy">We have to deliver the compiled pyc but not source code for our product.</span>
<span class="comment-copy">Please bear in mind that full source code (including docstrings) can be recovered easily from Python bytecode with FOSS tools. There are some DIY techniques to make decompilation a bit more difficult, but there is no real obfuscator for Python. This is not to say that you should distribute full source code, of course, but remember that reversing pyc is almost trivial.</span>
<span class="comment-copy">Hi Stefano, Thanks for your reminding. With delivering .pyc it usually means "ok I know you can decompile it but be aware that I do not like you do so."</span>
<span class="comment-copy"><code>importlib.util.MAGIC_NUMBER</code> is the new replacement for <code>imp</code>  according to <a href="https://docs.python.org/3/library/imp.html#imp.get_magic" rel="nofollow noreferrer">docs.python.org/3/library/imp.html#imp.get_magic</a></span>
