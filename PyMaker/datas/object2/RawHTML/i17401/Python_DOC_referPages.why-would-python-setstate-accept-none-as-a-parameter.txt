<div class="post-text" itemprop="text">
<p>I was browsing some of the code from the <a href="http://perpetualpyramid.com/drupal/serge" rel="nofollow">serge pygame engine</a> and I cam across something in <code>serge.serialize</code> that I couldn't wrap my head around:</p>
<pre><code>def __setstate__(self, state=None):
        """Initialize the object to the given state for unpickling"""
        self.initial_properties = Bag()
        #
        # Initialize first from the defaults and then from the live state
        for this_state in (self.__class__._getProperties(), state):
            if this_state:
                for name, value in this_state:
                    setattr(self, name, value)
                    setattr(self.initial_properties, name, value)
</code></pre>
<p>This method was retrieved from the <code>Serializable</code> object. What I'm confused about is why the <code>state</code> parameter in <code>__setstate__</code> has a default value of <code>None</code>. Why wouldn't a state be sent to <code>__setstate__</code> upon unpickling an object, and in what situation would this be useful?</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't useful if your class relies entirely on <code>__getstate__</code>/<code>__setstate__</code> for pickling.</p>
<p>As the docs on <a href="http://docs.python.org/3/library/pickle.html#object.__setstate__" rel="nofollow"><code>__setstate__</code></a> explain:</p>
<blockquote>
<p>Upon unpickling, if the class defines <code>__setstate__()</code>, it is called with the unpicked state… If <code>__getstate__()</code> returns a false value, the <code>__setstate__()</code> method will not be called upon unpicking.</p>
</blockquote>
<p>So, if your <code>__getstate__</code> returns <code>None</code>, it will not be passed back to you at <code>__setstate__</code> time; you just won't get called.</p>
<p>However, note that in the <a href="http://docs.python.org/2/library/pickle.html#object.__setstate__" rel="nofollow">2.x version</a>, this is not true for classic classes. With a classic class, "If a class defines both <code>__getstate__()</code> and <code>__setstate__()</code>, the state object needn’t be a dictionary and these methods can do what they want." (In fact, I believe there are cases where any falsey value turns into <code>{}</code>, which isn't very well documented, but the same <code>if</code> statement handles that…)</p>
<p>Still, that doesn't explain why you'd need a default value… If you can get <code>None</code>, sure, you need to write code that deals with <code>None</code>… but you don't need to write code that doesn't get a parameter at all, right?</p>
<p>But, there are reasons you might do this.</p>
<p>First, note that this particular class's <code>__setstate__</code> does more than the usual: it initializes "first from the defaults and then from the live state". So, it could very easily be useful to unit test that initializing from the defaults is working.</p>
<p>On top of that, if you define a custom <a href="http://docs.python.org/3/library/pickle.html#object.__reduce__" rel="nofollow"><code>__reduce__</code></a> method and unreducer, there's no reason that it has to follow exactly the same rules as the default unreducer. Or course there's no reason it has to call <code>__setstate__</code> <em>at all</em>—but if you're, say, building a base class that you expect your users to subclass, making your unreducer work as much like the default as possible, so your users can just override <code>__setstate__</code> instead of adding their own whole <code>__reduce__</code> implementation.</p>
<p>Similarly, if you're building your own serializer on top of <code>pickle</code>/<code>copyreg</code>, rather than just using it as-is, your code doesn't have to use the exact same rules as <code>pickle</code>. Again, there's no reason it has to use even <em>similar</em> rules, but doing so might make it much easier for your users to extend your classes.</p>
<p>Whether any of these applies to <code>serge</code>, I have no idea, but they're both things that could easily apply to a wide range of types you might want to build.</p>
</div>
<span class="comment-copy">Fantastic answer, just what I was looking for. Thanks so much!</span>
<span class="comment-copy">@user3002473: Make sure to read the edited version for the bit on classic classes, which I'd forgotten about at first…</span>
<span class="comment-copy">Ahhhh that explains a lot, since if I'm not mistaken the version of serge I was reading off of was built for python 2.x (serge version 0.4.2)</span>
