<div class="post-text" itemprop="text">
<p>Like I said in the title, my script only seems to work on the first line.<br/>
Here is my script:  </p>
<pre><code>#!/usr/bin/python

import sys



def main():
  a = sys.argv[1]
  f = open(a,'r')
  lines = f.readlines()
  w = 0
  for line in lines:
    spot = 0
    cp = line
    for char in reversed(cp):
      x = -1
      if char == ' ':
        del line[x]
        w += 0
      if char != '\n' or char != ' ':
        lines[spot] = line
        spot += 1
        break
      x += 1
  f.close()
  f = open(a,'w')
  f.writelines(lines)
  print("White Space deleted: "+str(w))


if __name__ == "__main__":
  main()
</code></pre>
<p>I'm not too experienced when it comes to loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following script do the same thing as your program, more compactly:</p>
<pre><code>import fileinput

deleted = 0
for line in fileinput.input(inplace=True):
    stripped = line.rstrip()
    deleted += len(line) - len(stripped) + 1  # don't count the newline
    print(stripped)

print("Whitespace deleted: {}".format(deleted))
</code></pre>
<p>Here <a href="http://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow"><code>str.rstrip()</code></a> removes <em>all</em> whitespace from the end of a line (newlines, spaces and tabs).</p>
<p>The <a href="http://docs.python.org/3/library/fileinput.html" rel="nofollow"><code>fileinput</code> module</a> takes care of handling <code>sys.argv</code> for you, opening files one by one if you name more than one file.</p>
<p>Using <code>print()</code> will add the newline back on to the end of the stripped lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>rstrip</code>:</p>
<pre><code>f = open(a,'r')
lines = f.readlines()
f.close()
f = open(a,'w')
for line in lines:
    f.write(line.rstrip()+'\n')
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>rstrip()</code> is probably what you want to use to achieve this.</p>
<pre><code>&gt;&gt;&gt; 'Here is my string       '.rstrip()
'Here is my string'
</code></pre>
<p>A more compact way to iterate backwards over stings is</p>
<pre><code>&gt;&gt;&gt; for c in 'Thing'[::-1]:
        print(c)


g
n
i
h
T
</code></pre>
<p><code>[::-1]</code> is slice notation. SLice notaion can be represented as  <code>[start:stop:step]</code>. In my example a <code>-1</code> for the step means it will step form the back by one index. <code>[x:y:z]</code> will start at index <code>x</code> stop at <code>y-1</code> and go forward by <code>z</code> places each step.</p>
</div>
<span class="comment-copy"><code>string.rstrip()</code> will trim white space off the end of a string.</span>
<span class="comment-copy">You do know Python has a <code>str.rstrip()</code> method, right? It removes whitespace from the end of lines..</span>
<span class="comment-copy"><code>w += 0</code> is probably not what you wanted..</span>
<span class="comment-copy">Oh yeah, but that just counts how many spaces have been deleted @MartijnPieters</span>
<span class="comment-copy">@Awalrod: So you count to 0 every time.</span>
<span class="comment-copy">Thank you, I was wondering if <code>rstrip()</code> removed newlines</span>
<span class="comment-copy">If somebody else is wondering: "Optional in-place filtering: if the keyword argument inplace=1 is passed to fileinput.input() or to the FileInput constructor, the file is moved to a backup file and standard output is directed to the input file (if a file of the same name as the backup file already exists, it will be replaced silently). This makes it possible to write a filter that rewrites its input file in place."</span>
<span class="comment-copy">This works, but why doesn't <code>print(line.rstrip())</code> output to the terminal? Also, what does the <code>inplace=True</code> mean.</span>
<span class="comment-copy">@Awalrod: the <code>fileinput.input(inplace=True)</code> call redirects <code>sys.stdout</code> to the output file. Printing then writes to the replacement file instead. This is a feature of that module. <code>inplace=True</code> enables that feature.</span>
