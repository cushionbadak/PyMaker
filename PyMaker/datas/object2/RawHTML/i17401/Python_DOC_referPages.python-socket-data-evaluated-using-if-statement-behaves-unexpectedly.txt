<div class="post-text" itemprop="text">
<p>I am learning about sockets in Python and I wrote a short server socket program on one machine which can be polled using <code>telnet xxx.xxx.xxx.xxx 8888</code>. The communication works fine but for some reason when I am evaluating the <code>data</code> which is sent from the client, it does not seem to evaluate as it should.</p>
<p>The offending code is below:</p>
<pre><code>    data = conn.recv(1024)    # receive data
    conn.sendall(data)        # reply to confirm what data was received
    if data == "green":
            reply = 'GREEN ON'
    elif data == "red":
            reply = 'RED ON'
    else:
            reply = 'Command not recognized'
    conn.sendall(reply)
</code></pre>
<p>From the client I do the following:</p>
<pre><code>telnet 192.168.0.8 8888
Trying 192.168.0.8...
Connected to 192.168.0.8.
Escape character is '^]'.
Welcome to the server. Type something and hit enter       # server responds with connection confirmation
green           #typed from client
green           #server responds with the data it received
Command not recognized        #&lt;-- data is not evaluated correctly in if statement
</code></pre>
<p>So what is happening is I poll the server using <code>telnet</code>, which responds with <code>Welcome to the server...</code> indicating a successful connection. Then I type in <code>green</code>, the server responds with the data it received (i.e. <code>green</code> hence the same line twice) but then tells me the command is not recognized, implying the <code>if</code> statements on the server program did not evaluate <code>data</code> correctly.</p>
<p>Am I missing something, like the data is actually null-terminated like <code>green\0</code> leading to incorrect evaluation in the <code>if</code> block?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're presumably typing something and hitting Enter, just as the instructions say.</p>
<p>So, you're sending <code>'green\n'</code>. Or maybe <code>'green\r\n'</code>.</p>
<p>And either way, <code>'green\n' != 'green'</code> and <code>'green\r\n' != 'green'</code>.</p>
<p>A good way to test for this is to print out what you get. Printing the <a href="http://docs.python.org/3/library/functions.html#repr" rel="nofollow"><code>repr</code></a> of a string will quote it and escape all control characters, so you'll see exactly <code>'green\r\n'</code> instead of just <code>green</code> followed by a blank line, which is a lot easier to interpret. (This would also let you rule out spurious <code>\0</code> terminators, etc.)</p>
<p>You could fix this by checking, e.g., <code>data.rstrip()</code> instead of <code>data</code>.</p>
<p>However, once you do that, your program will not actually <em>work</em>, it'll just work <em>most of the time</em>, or <em>in certain situations</em> (like testing on localhost). This is a recipe for hard-to-catch bugs that will require you to rewrite your whole app when you finally find them.</p>
<p>A <code>recv</code> might get the data from a single <code>send</code>, or half the data from that <code>send</code>, or the data from three separate <code>send</code>s. And if you receive <code>'gre'</code> or <code>'green\r\nbl'</code>, no amount of manipulation is going to make that match <code>'green'</code>.</p>
<p>To deal with this, you need to design a protocol that delimits messages in some way, and loop over <code>recv</code>, adding to a buffer, and splitting off messages. Or, if your protocol is just "terminate every command with a newline" (and there are no embedded newlines within commands), you can just use <a href="http://docs.python.org/3/library/socket.html#socket.socket.makefile" rel="nofollow"><code>socket.makefile</code></a>, which gives you a file-like object that automatically does that for youâ€”so you can just iterate over it line by line (or call <code>readline</code> on it, etc.), just like you can with a regular file. You can even open it with universal newline support, so you don't have to worry about pesky inconsistent <code>\r\n</code> vs. <code>\n</code>.</p>
<p>See <a href="http://stupidpythonideas.blogspot.com/2013/05/sockets-are-byte-streams-not-message.html" rel="nofollow">Sockets are byte streams, not message streams</a> for more detail.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is likely that a newline is being sent from telnet. Try stripping trailing whitespace before the <code>if</code> block:</p>
<pre><code>data = data.rstrip()
</code></pre>
</div>
<span class="comment-copy">Thanks for your reply. I changed that line of code to read <code>if data == "green\n"</code> but still the same.</span>
<span class="comment-copy">@exantas: Put in a <code>print(repr(data))</code> statement to see what you're actually receiving. I'll be it's a <code>\r\n</code> vs. <code>\n</code> problem, but really, there's no reason to keep guessing.</span>
<span class="comment-copy">You were right, it is indeed receiving <code>green\r\n</code>. That's a good tip though, thanks!</span>
