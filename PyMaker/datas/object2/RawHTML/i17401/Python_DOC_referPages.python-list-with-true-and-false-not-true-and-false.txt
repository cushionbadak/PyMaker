<div class="post-text" itemprop="text">
<p>-----------------------  UPDATED  ---------------------- </p>
<p>Since there was so much confusion, I decided to give a more detailed explanation. Take a look at the code below, and focus on </p>
<pre><code>day = {"days": buildString2(day_array[i])}
</code></pre>
<p>Here is the code:</p>
<pre><code>import csv, sys, requests, json, os, itertools, ast

def buildString(item):
    item_array = item.split(",")
    mod = []
    for i in range(len(item_array)):
        mod.append("%s" % item_array[i].strip())
    return mod

def buildString2(item):
    item_array = item.split(",")
    mod = "["
    for i in range(len(item_array)):
        if i == len(item_array) - 1:
            mod = mod + '%s' % item_array[i].strip()
        else:
            mod = mod + '%s, ' % item_array[i].strip()
    mod = mod + "]"
    return mod

if __name__ == '__main__':
    def main():
        filename = 'file.csv'
        dict = {"id":'c8d5185667f'}

        with open(filename, 'r', encoding='utf8') as f:
            reader = csv.reader(f)
            try:
                count = 0
                for row in reader:
                    count = count + 1
                    if count != 1:

                        dict["name"] = row[10]

                        dict["space_usages"] = buildString(row[19])

                        availablle_array = []
                        available_booking_hours = row[15]
                        days = row[18]
                        availability_array = available_booking_hours.split("*")
                        day_array = days.split("*")
                        for i in range(len(day_array)):
                            startEndTime = availability_array[i].split("-")
                            day = {"days": buildString2(day_array[i])}
                            times = {"start_time":startEndTime[0], "end_time":startEndTime[1]}
                            day["times"] = times
                            availablle_array.append(day)

                        dict["available_days"] = availablle_array

                        print(dict)
                        url = 'http://50.97.247.68:9000/api/v1/spaces'
                        response = requests.post(url, data=json.dumps(dict))
</code></pre>
<p>When I print dict, I get the following </p>
<pre><code>{'id': 'c8d5185667f', 'available_days': [{'days': '[true, true, true, true, true, true, true]', 'times': {'start_time': '12:00', 'end_time': '10:00'}}], 'space_usages': ['Fitness', 'Events', 'Classes', 'Performance']}
</code></pre>
<p>but my boss wants this </p>
<pre><code>{'id': 'c8d5185667f', 'available_days': [{'days': [true, true, true, true, true, true, true], 'times': {'start_time': '12:00', 'end_time': '10:00'}}], 'space_usages': ['Fitness', 'Events', 'Classes', 'Performance']}
</code></pre>
<p>this doesn't work either</p>
<pre><code>{'id': 'c8d5185667f', 'available_days': [{'days': ['true', 'true', 'true', 'true', 'true', 'true', 'true'], 'times': {'start_time': '12:00', 'end_time': '10:00'}}], 'space_usages': ['Fitness', 'Events', 'Classes', 'Performance']}
</code></pre>
<p>Does this make more sense? Is it possible to get </p>
<pre><code>[true, true, true, true, true, true, true]
</code></pre>
<p>as a value? I tried doing this</p>
<pre><code>day = {"days": ast.literal_eval(buildString2(day_array[i]))}
</code></pre>
<p>but it crashes. I'm out of ideas. I've tried googling a variety of things, and I can't seem to find anything. Your help is greatly appreciated. I honestly don't believe this is possible, but that's what I've been told to do.</p>
<p>NOTE: They have to be lowercase. This doesn't work</p>
<pre><code>[True, True, True, True, True, True, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's <em>possible</em> to get what your boss wants, just not using the built-in True and False:</p>
<pre><code>class MyBool(object):
    def __init__(self, value):
        self.value = bool(value)
    def __repr__(self):
        return repr(self.value).lower()
    def __bool__(self):
        return self.value

print({'a' : [MyBool(True), MyBool(True), MyBool(False)]})
</code></pre>
<p>Result:</p>
<pre><code>{'a': [true, true, false]}
</code></pre>
<p>You don't actually need <code>__bool__</code>, but (in Python 3) it allows the objects to be used in logical conditions.</p>
<p>So as requested, it's not a valid Python literal since it uses <code>true</code> instead of <code>True</code>,  and it's not valid JSON since it uses single-quoted key strings instead of double-quoted. Presumably it's parsed by something that doesn't accept <code>True</code> and also doesn't accept double-quoted strings? I don't suppose there's any chance of just fixing the original API to accept JSON?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is JSON, so you should just convert your week into JSON format</p>
<pre><code>In [1]: import simplejson as json
In [2]: week = [True, False, True, True]
In [3]: json.dumps(week)
Out[3]: '[true, false, true, true]'
</code></pre>
<p>To convert back, just load and parse it:</p>
<pre><code>In [8]: print json.loads('[true, false, false, true]')
[True, False, False, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code> module</a> to convert your boolean list to a string and reciprocally:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps([True, False, True, True, False])
'[true, false, true, true, false]'
&gt;&gt;&gt; json.loads('[true, false, true, true, false]')
[True, False, True, True, False]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your value is </p>
<pre><code>week = '[true, false, true, false, true, false, true]'
</code></pre>
<p>Which is JSON representation. Second value is </p>
<pre><code>week = ['true', 'false', 'true', 'false', 'true', 'false', 'true']
</code></pre>
<p>Which is List with "true" and "false" strings.</p>
<pre><code>week = [True, False, True, False, True, False, True]
</code></pre>
<p>Which is pure python code.</p>
<p>You have to decide which value you have and which way you have to select to convert it in which form. </p>
<p>For first value you can use <code>json.loads</code>.</p>
<p>For second value you have to check manually string for "true" and "false"</p>
<p>Third is python only so no need to change it in python again :).</p>
</div>
<span class="comment-copy">Your question is not clear. What is the input format and what is the expected output?</span>
<span class="comment-copy">Seems that you want some JSON.</span>
<span class="comment-copy">If the REST API takes JSON posts, just use actual boolean values in Python and use <code>json.dumps()</code> to encode that to JSON.</span>
<span class="comment-copy">How does the REST API work, i.e. is it built using HTTP? If so, how does your API expect to receive the parameter which is a list of booleans?</span>
<span class="comment-copy">Haha, this produces what my boss wanted, but like you mentioned true is not valid JSON. So it crashes when I try json.dumps(dict) with "TypeError: true is not JSON serializable". Thanks for the help. I had a feeling this wasn't possible.</span>
<span class="comment-copy"><code>simplejson</code> of <code>json</code>?</span>
<span class="comment-copy">It's not clear from the question whether the REST API uses JSON, but it seems that the OP is already aware of the possibility to encode a list of booleans as a string like <code>[true, false, true, false]</code>. I think his confusion stems from elsewhere.</span>
<span class="comment-copy">import simplejson as json</span>
<span class="comment-copy">Why <code>simplejson</code> instead of the built-in module <code>json</code>?</span>
<span class="comment-copy">@MaximeLorant: <a href="https://stackoverflow.com/questions/712791/what-are-the-differences-between-json-and-simplejson-python-modules" title="what are the differences between json and simplejson python modules">stackoverflow.com/questions/712791/â€¦</a> aims to settle the issue. And read past the first answer, since the "right" answer changes some time between 2009 and 2013 ;-)</span>
<span class="comment-copy">I updated my question. Instead of '[true, false, true, true, false]' can the output be [true, false, true, true, false]?</span>
