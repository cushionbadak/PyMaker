<div class="post-text" itemprop="text">
<p>Reading Python Standard Library.  Trying to understanding classmethod.</p>
<pre><code>class C:
    @classmethod
    def f(x,y):
        print('words')
</code></pre>
<p>When I type: </p>
<pre><code>print(classmethod(C))
</code></pre>
<p>It returns:</p>
<pre><code>&lt;classmethod object at 0x00FAD930&gt;
</code></pre>
<p>How would see what the classmethod returns instead of a generator of the classmethod?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are producing a <code>classmethod</code> descriptor object:</p>
<pre><code>print(classmethod(C))
</code></pre>
<p>returns the class <code>C</code> wrapped in a new <code>classmethod</code> object. This is not a generator, this is what Python actually stores in your class when you decorate a method with it.</p>
<p>Remember that a <code>@decorator_expression</code> line above a function or class is just syntactic sugar for an extra function call replacing that object; <code>@classmethod</code> above <code>def f(...)</code> just means that Python will replace <code>f</code> with <code>f = classmethod(f)</code>.</p>
<p>You can see the same type of object when looking at the <code>C.__dict__['f']</code> value; that's same type of object:</p>
<pre><code>&gt;&gt;&gt; class C:
...     @classmethod
...     def f(x,y):
...         print('words')
... 
&gt;&gt;&gt; C.__dict__['f']
&lt;classmethod object at 0x107d00810&gt;
&gt;&gt;&gt; C.__dict__['f'].__get__(None, C)
&lt;bound method type.f of &lt;class '__main__.C'&gt;&gt;
&gt;&gt;&gt; C.f
&lt;bound method type.f of &lt;class '__main__.C'&gt;&gt;
</code></pre>
<p>It is the <code>__get__</code> method on the descriptor object that is invoked when you try and access the <code>C.f</code> attribute.</p>
<p>Functions themselves are descriptors too; a <code>classmethod</code> bypasses the function's <code>.__get__</code> method to provide a binding to the class instead of the normal binding to an instance.</p>
<p>See the <a href="http://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptor HOWTO</a> to understand what a descriptor is, and how a <code>classmethod</code> object works.</p>
<p>To see what an the method itself returns, just call it on the class or on an instance:</p>
<pre><code>&gt;&gt;&gt; class C:
...     @classmethod
...     def f(*args, **kw):
...         return args, kw
...     def regular(*args, **kw):
...         return args, kw
... 
&gt;&gt;&gt; C.f()
((&lt;class '__main__.C'&gt;,), {})
&gt;&gt;&gt; C().f()
((&lt;class '__main__.C'&gt;,), {})
&gt;&gt;&gt; C.regular()
((), {})
&gt;&gt;&gt; C().regular()
((&lt;__main__.C object at 0x1085b0790&gt;,), {})
</code></pre>
<p>Instead of the usual <code>self</code> instance object, the method is instead passed a reference to the class. For both the <code>C.f()</code> call (directly on the class) and the <code>C().f()</code> (on an instance of <code>C</code>), the first argument to <code>f()</code> is <code>C</code> itself.</p>
<p>Compare this to the <code>C.regular()</code> method; this is a normal method and when called directly on the class with <code>C.regular()</code> no arguments were passed in, when called on an instance with <code>C().regular()</code> a first argument, the instance, was passed in. This is what you normally would  use <code>self</code> for in the method signature.</p>
<p>For class methods, then the first argument is usually named <code>cls</code> when declaring your method.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to call the <code>classmethod</code> <code>f</code> you have created on <code>C</code>, you should do:</p>
<pre><code>C.f(...)
</code></pre>
<p><a href="http://docs.python.org/2/library/functions.html#classmethod" rel="nofollow"><code>classmethod</code></a> is the decorator function, it will wrap whatever you pass to it and return a <code>classmethod object</code>:</p>
<pre><code>&gt;&gt;&gt; classmethod(1)
&lt;classmethod object at 0x02FA6370&gt;
</code></pre>
<p>Note that the first to a <code>classmethod</code> is the class itself, called <code>cls</code> by convention:</p>
<pre><code>class C:
    @classmethod
    def f(cls, x, y):
        print("words")
</code></pre>
<p>This gives:</p>
<pre><code>&gt;&gt;&gt; C.f(1, 2)
words
</code></pre>
<p>Alternatively <code>return</code> the value and <code>print</code> it outside the function:</p>
<pre><code>class C:
    @classmethod
    def f(cls, x, y):
        return "words"

&gt;&gt;&gt; print(C.f(1, 2))
words
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change to:</p>
<pre><code>class C:
    @classmethod
    def f(cls, x, y):
        return 'words'
</code></pre>
<p>Unlike traditional class methods where the first argument is a <code>self</code> reference, a class method receives the <code>class</code> as implicit first argument, just like an instance method receives the instance. </p>
<p>Also, you need to return a value to print it.</p>
</div>
<div class="post-text" itemprop="text">
<p>classmethod is useful when sharing the value across all different objects being created.</p>
<pre><code>class Classtest:
    a =10
    @classmethod
    def hi(cls, x):
        cls.a= cls.a+x
        print cls.a

h = Classtest()
h.hi(10)

b = Classtest()
b.hi(30)

c = Classtest()
c.hi(40)

&gt;&gt;&gt; ================================ RESTART     ================================
&gt;&gt;&gt;  
20
50
90
</code></pre>
<p>Here the value of variable a is shared across all different objects that are being created and not just limited to one instance</p>
</div>
<span class="comment-copy">You don't have a generator of the classmethod. You have the classmethod descriptor object.</span>
<span class="comment-copy">Did you try : <code>C.f(1,2)</code>?</span>
<span class="comment-copy">This is Python 3.</span>
