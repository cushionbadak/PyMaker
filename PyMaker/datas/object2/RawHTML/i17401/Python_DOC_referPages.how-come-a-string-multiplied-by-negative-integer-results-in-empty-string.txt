<div class="post-text" itemprop="text">
<pre><code>'0424242' * -5
</code></pre>
<p>I understand how multiplying by strings work fundamentally, but I just stumbled on this strange fact that multiplying by negative numbers yields an empty string and thought it was interesting. I wanted to know the deeper why beneath the surface. </p>
<p>Anyone have a good explanation for this? </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/stdtypes.html#typesseq" rel="nofollow">The docs on <code>s * n</code></a> say:</p>
<blockquote>
<p>Values of <em>n</em> less than <code>0</code> are treated as <code>0</code> (which yields an empty
  sequence of the same type as <em>s</em>).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>What would you expect multiplying a string by a negative integer?</p>
<p>On the other hand</p>
<pre><code># Display results in nice table
print(keyword1, " "*(60-len(keyword1)), value1)
print(keyword2, " "*(60-len(keyword2)), value2)
</code></pre>
<p>without being worried than <code>keyword?</code> be longer than 60 is very handy.</p>
</div>
<div class="post-text" itemprop="text">
<p>This behavior is probably defined to be consistent with <code>range(-5)</code> being <code>[]</code>. In fact, the latter may be exactly what underlies the behavior you observe.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's literally part of the <a href="http://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow">definition</a> of the operation:</p>
<blockquote>
<p>The * (multiplication) operator yields the product of its arguments. The arguments must either both be numbers, or one argument must be an integer and the other must be a sequence. In the former case, the numbers are converted to a common type and then multiplied together. In the latter case, sequence repetition is performed; <strong>a negative repetition factor yields an empty sequence</strong>.</p>
</blockquote>
</div>
<span class="comment-copy">How would you define a string multiplication by a negative number?</span>
<span class="comment-copy">You can't have -5 of something. The empty string or None sound like a valid result.</span>
<span class="comment-copy">I'd imagine there's a loop going on internally to build the resulting string when you do a <code>string * int</code>, which won't have its initial condition satisfied. something like <code>string operator* (string lhs, int rhs){retStr="";for(int i = 0; i &lt; rhs; i++){retStr += lhs;} return retStr;}</code></span>
<span class="comment-copy">@HunterMcMillen There are plenty of things which can meaningfully be modeled by negative integers. Maybe strings aren't among them, but your blanket statement betrays an approach to math that's pre-BC.</span>
<span class="comment-copy">@delnan Regardless of my use of the extremely vague word <i>something</i>, that statement was targeted specifically at the problem stated above.</span>
<span class="comment-copy">Right, there's probably a <code>for i in range(num_copies)</code> (or C equivalent) loop there in the implementation, which doesn't execute at all if passed a negative number.</span>
<span class="comment-copy">@dan04 That reasoning is putting the cart before the horse. The code probably actually does look like that, but only because it was decided that (for whatever reasons) negative numbers should result in an empty string. If no one ever thought about the issue, made a decision, implemented it and documented it, we'd be worse off, and the code might be buggy in other ways.</span>
