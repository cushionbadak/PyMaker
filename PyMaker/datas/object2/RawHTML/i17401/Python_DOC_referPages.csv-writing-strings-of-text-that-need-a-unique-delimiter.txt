<div class="post-text" itemprop="text">
<p>I wrote an HTML parser in python used to extract data to look like this in a csv file:</p>
<pre><code>    itemA, itemB, itemC, Sentence that might contain commas, or colons: like this,\n
</code></pre>
<p>so I used a delmiter ":::::" thinking that it wouldn't be mined in the data</p>
<pre><code>    itemA, itemB, itemC, ::::: Sentence that might contain commas, or colons: like this,::::\n
</code></pre>
<p>This works for most of the thousands of lines, however, apparently a colon : offset this when I imported the csv in Calc.</p>
<p>My question is, what is the best or a unique delimiter to use when creating a csv with many variations of sentences that need to be separated with some delimiter?  Am I understanding delimiters correctly in that they separate the values within a CSV?</p>
</div>
<div class="post-text" itemprop="text">
<p>As I suggested informally in a comment, unique just means you need to use some character that won't be in the data â€”<code>chr(255)</code>might be a good choice. For example:</p>
<pre><code>import csv

DELIMITER = chr(255)
data = ["itemA", "itemB", "itemC",
        "Sentence that might contain commas, colons: or even \"quotes\"."]

with open('data.csv', 'wb') as outfile:
    writer = csv.writer(outfile, delimiter=DELIMITER)
    writer.writerow(data)

with open('data.csv', 'rb') as infile:
    reader = csv.reader(infile, delimiter=DELIMITER)
    for row in reader:
        print row
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code> ['itemA', 'itemB', 'itemC', 'Sentence that might contain commas, colons: or even "quotes".']
</code></pre>
<p>If you're not using the<code>csv</code>module and instead are writing and/or reading the data manually, then it would go something like this:</p>
<pre><code>with open('data.csv', 'wb') as outfile:
    outfile.write(DELIMITER.join(data) + '\n')

with open('data.csv', 'rb') as infile:
    row = infile.readline().rstrip().split(DELIMITER)
    print row
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, delimiters separate values within each line of a CSV file. There are two strategies to delimiting text that has a lot of punctuation marks. First, you can quote the values, e.g.:</p>
<pre><code>Value 1, Value 2, "This value has a comma, &lt;- right there", Value 4
</code></pre>
<p>The second strategy is to use tabs (i.e., <code>'\t'</code>).</p>
<p>Python's built-in CSV module can both read and write CSV files that use quotes. Check out the example code under <a href="http://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow">the <code>csv.reader</code> function</a>. The built-in csv module will handle quotes correctly, e.g. it will escape quotes that are in the value itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>CSV files usually use double quotes <code>"</code> to wrap long fields that might contain a field separator like a comma. If the field contains a double quote it's escaped with a backslash: <code>\"</code>.</p>
</div>
<span class="comment-copy">Use a separator character outside the set used in the data, like <code>chr(255)</code>.</span>
<span class="comment-copy">@martineau I used an uncommon sequence as a delimiter (~~~) but in the future I believe this is the best answer!  How would you write chr(255) to a file?  output.write(chr(255))?</span>
<span class="comment-copy">Yes, you could write it via <code>chr(255)</code> or specify to use it when using the <a href="http://docs.python.org/2/library/csv.html#module-csv" rel="nofollow noreferrer"><code>csv</code> module</a> via the keyword argument <code>delimiter=chr(255)</code>. Would you like me to add this as an answer?</span>
<span class="comment-copy">@martineau I would pick it as the answer :)</span>
<span class="comment-copy">I'll try it now, but I'm concerned that the text I extract will have double quotes within it and misalign everything</span>
