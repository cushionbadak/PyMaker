<div class="post-text" itemprop="text">
<p>I'm using similar approach to call python function from my shell script:</p>
<pre><code>python -c 'import foo; print foo.hello()'
</code></pre>
<p>But I don't know how in this case I can pass arguments to python script and also is it possible to call function with parameters from command line? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>python -c 'import foo, sys; print foo.hello(); print(sys.argv[1])' "This is a test"
</code></pre>
<p>or</p>
<pre><code>echo "Wham" | python -c 'print(raw_input(""));'
</code></pre>
<p>There's also <a href="http://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a> (py3 link) that could be used to capture arguments, such as the <code>-c</code> which also can be found at <code>sys.argv[0]</code>.</p>
<p>A second library do exist but is discuraged, called <code>getopt.getopt</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't want to do that in shell script.</p>
<p>Try this. Create a file named "hello.py" and put the following code in the file (assuming you are on unix system):</p>
<pre><code>#!/usr/bin/env python

print "Hello World"
</code></pre>
<p>and in your shell script, write something lke this</p>
<pre><code>#!/bin/sh
python hello.py
</code></pre>
<p>and you should see <code>Hello World</code> in the terminal.</p>
<p>That's how you should invoke a script in shell/bash.</p>
<p>To the main question: how do you pass arguments?</p>
<p>Take this simple example:</p>
<pre><code>#!/usr/bin/env python
import sys

def hello(name):
    print "Hello, " + name

if __name__ == "__main__":
    if len(sys.argv) &gt; 1:
        hello(sys.argv[1])
    else:
        raise SystemExit("usage:  python hello.py &lt;name&gt;")
</code></pre>
<p>We expect the len of the argument to be at least two. Like shell programming, the first one (index 0) is always the file name.</p>
<p>Now modify the shell script to include the second argument (name) and see what happen.</p>
<p><em>haven't tested my code yet but conceptually that's how you should go about</em></p>
<p>edit: </p>
<p>If you just have a line or two simple python code, sure, <code>-c</code> works fine and is neat. But if you need more complex logic, please put the code into a module (.py file).</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to create one .py file.
And after you call it this way : </p>
<p><code>python file.py argv1 argv2</code></p>
<p>And after in your file, you have sys.argv list, who give you list of argvs.</p>
</div>
<span class="comment-copy">You shouldn't suggest <code>getopt</code>. That module is mainly for C programmers that are too lazy to learn anything new. In fact its documentation starts with: "Users who are unfamiliar with the C getopt() function or who would like to write less code and get better help and error messages should consider using the <a href="http://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> module instead."</span>
<span class="comment-copy">@Bakuriu You got a point. Switched the reccomendation but kept the reference towards getopt just to not overlook any options. But did discurage the user from using it.</span>
<span class="comment-copy">Instead of raising <code>SystemExit</code> it's probably more readable to just call <code>sys.exit('the message')</code>.</span>
<span class="comment-copy">I don't see why this should be downvoted. It's much better than doing <code>-c</code>.</span>
<span class="comment-copy">I don't know. I say the same thing as you ... But your answer is more detailed ...</span>
<span class="comment-copy">Yeah took me a while to finish writing lol. Hence I upvoted you because I think the main issue is readability and usability :)</span>
<span class="comment-copy">maybe just because it's not <i>exactly</i> what the OP wants</span>
