<div class="post-text" itemprop="text">
<p>I have a dictionary like this:  </p>
<pre><code>myDict = {  
    'BigMeadow2_U4': (1609.32, 22076.38, 3.98),  
    'MooseRun': (57813.48, 750187.72, 231.25),  
    'Hwy14_2': (991.31, 21536.80, 6.47)  
}
</code></pre>
<p>How can I get the first value of each item in my dicitionary?</p>
<p>I want in the end a list:</p>
<pre><code>myList = [1609.32,57813.48,991.31]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this way:</p>
<pre><code>my_list = [elem[0] for elem in your_dict.values()]
</code></pre>
<p>Offtop:
I think you shouldn't use camelcase, it isn't python way</p>
<p>UPD:
inspectorG4dget notes, that result won't be same. It's right.  You should use collections.OrderedDict to implement this correctly.</p>
<pre><code>from collections import OrderedDict
my_dict = OrderedDict({'BigMeadow2_U4': (1609.32, 22076.38, 3.98), 'MooseRun': (57813.48, 750187.72, 231.25), 'Hwy14_2': (991.31, 21536.80, 6.47) })
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>one lines...</p>
<pre><code>myList = [myDict [i][0] for i in sorted(myDict.keys()) ]
</code></pre>
<p>the result:</p>
<pre><code>&gt;&gt;&gt; print myList 
[1609.32, 991.31, 57813.48]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>myList = []  
for k,v in myDict.items()  
    myList.append(v[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want ordered dictionary, use:</p>
<pre><code>from collections import OrderedDict
ordered = OrderedDict(
    ('BigMeadow2_U4', (1609.32, 22076.38, 3.98)),  
    ('MooseRun', (57813.48, 750187.72, 231.25)),  
    ('Hwy14_2', (991.31, 21536.80, 6.47)) 
)
first_values = [v[0] for v in ordered.values()]
</code></pre>
<p>The output order will be exactly as your input order.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Try this.Type the dictionary and the position you want to print in the function</h2>
<pre><code>d = {'Apple': 1, 'Banana': 9, 'Carrot': 6, 'Baboon': 3, 'Duck': 8, 'Baby': 2}
print(d)
def getDictKeyandValue(dict,n): 
    c=0
    mylist=[]
    for i,j in d.items():
        c+=1
        if c==n:

            mylist=[i,j]
            break
    return mylist   

print(getDictKeyandValue(d,2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>for getting first value</h3>
<p>print(getDictKeyandValue(d,1))</p>
</div>
<span class="comment-copy">A <code>dict</code> is unordered. This means that there is no ordering of the elements in the dictionary - you need to access the values by the keys that they are associated with. So please explain why the elements in <code>myList</code> are ordered the way they are (first element of the values associated with keys in sorted order, perhaps?)</span>
<span class="comment-copy">Result won't be the same, always, given that a dictionary is an unordered data structure. Needs a stronger justification for the ordering of the elements of <code>my_list</code></span>
<span class="comment-copy">I can't find a linking saying that <i>CamcelCase</i> is not python way. <a href="http://legacy.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="nofollow noreferrer">legacy.python.org/dev/peps/pep-0008/#descriptive-naming-styles</a></span>
<span class="comment-copy">they are just different naming styles, and many people just like the CamcelCase more ;P</span>
<span class="comment-copy">Ok, as I now CamelCase isn't good for function names and variables. I googled a little and find this: <a href="http://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variable-and-function-names" title="what is the naming convention in python for variable and function names">stackoverflow.com/questions/159720/â€¦</a>  Anyway, it isn't strict rule and I think you shouldn't be worried about that. It was just my notice</span>
<span class="comment-copy">Isn't this one-liner going to iterate the whole dictionary when you only want to peek at one item?</span>
<span class="comment-copy">Careful with that: since the <a href="https://docs.python.org/3/library/collections.html#ordereddict-objects" rel="nofollow noreferrer">input dictionary is unordered</a>, they is no way of knowing how the items will be ordered when the <code>OrderedDict</code> is created from a regular <code>dict</code>. (see penultimate line in the class's doc)</span>
<span class="comment-copy">@Silmathoron , you are wrong. Read in the docs: <a href="https://docs.python.org/3/library/collections.html#ordereddict-objects" rel="nofollow noreferrer">Ordered dictionaries are just like regular dictionaries but they remember the <b>order that items were inserted</b></a></span>
<span class="comment-copy">Read my comment again ;) I'm saying you cannot tell if <code>'BigMeadow2_U4'</code> will be the first value if you create the <code>OrderedDict</code> from a plain <code>dict</code> instead of adding them in the right order.</span>
<span class="comment-copy">oh, yes, in this case you're right, changed it to tuples</span>
