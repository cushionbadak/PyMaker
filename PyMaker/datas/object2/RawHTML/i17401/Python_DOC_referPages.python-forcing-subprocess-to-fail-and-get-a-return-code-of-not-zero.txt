<div class="post-text" itemprop="text">
<p>I am having some trouble with using Popen in my Python project. Basically I have a GUI where a user can type into a Text widget. Upon a button press the text is saved into a new file and then ran as a python file in a subprocess using popen. So basically my GUI acts as sort of a IDE for the user to type in their code, press a "run"-like button and then the script that they typed runs as a subprocess.</p>
<p>Everything works fine, however I am struggling to figure out how to detect syntax errors in the user's code. I have tried to do something like this:</p>
<pre><code>p = subprocess.Popen(cmd)
p.wait()

if p.returncode != 0:
print("Fail")
</code></pre>
<p>Without this code my program does as expected and runs the subprocess as long as there are not any syntax errors, however with this, the expected behaviour of the script that the user typed is not done, and the return value is also always 0, regardless of syntax error. I assume this is probably because the thread has executed correctly regardless of what was in it.</p>
<p>I have also tried adding things like:</p>
<pre><code>sys.exit(1)
</code></pre>
<p>into the subprocess code to force the script to exit with a specific return code however it still seems to return 0. Again I think this is because sys.exit() only works in the main thread of a program, but I am not sure.</p>
<p>So basically I am trying to figure out a way to make a subprocess' return code a value of not 0 based on it not running properly because of syntax error from the user.</p>
<p>An alternative I guess would be to open a pipe for stderr when I do popen however I do not really need to read what the error message is. My plan was to just bring up some sort of generic error message if somethign was typed incorrectly.</p>
<p>Thank you very much for reading this, sorry if it is confusing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Even if you could get this to work, your users are going to hate you for telling them there are syntax errors in their script, but not what or where they are.</p>
<p>So forget about subprocess and use the built-in <a href="http://docs.python.org/3/library/functions.html#compile" rel="nofollow">compile</a> function instead:</p>
<pre><code>    script = 'print(0'
    try:
        compile(script, '&lt;string&gt;', 'exec')
    except SyntaxError as exception:
        # do something user-friendly with exception...
    else:
        # syntax seems okay! run script...
</code></pre>
<p>Don't be fooled by the <code>'exec'</code> argument: this only specifies the <em>kind</em> of code the script contains. If there are no syntax errors, <code>compile</code> returns a <a href="http://docs.python.org/3/reference/datamodel.html#index-53" rel="nofollow">code object</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation of <a href="http://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit()</code></a></p>
<blockquote>
<p>Exit from Python. This is implemented by raising the <code>SystemExit</code>
  exception, so cleanup actions specified by finally clauses of try
  statements are honored, and it is possible to intercept the exit
  attempt at an outer level.</p>
<p>[omissis]</p>
<p>Since <code>exit()</code> ultimately “only” raises an exception, it will only
  exit the process when called from the main thread, and the exception
  is not intercepted.</p>
</blockquote>
<p>So, you are right that calling <code>sys.exit()</code> will <em>not</em> terminate the process when not in the main thread. Instead of calling <code>sys.exit()</code> you should terminate the thread and signal in some way to the main thread that it has to exit with an error.</p>
<p>However it's not clear from your answer how the threads are organized. In particular the fact that you are using <code>subprocess</code> doesn't have <em>anything</em> to do with the behaviour, as far as I understand at least. If the main thread is running the GUI you should produce a GUI event in order to signal that you want to shut down.</p>
<p>Besides, I really don't get why you have to launch a full-blown process with GUI just to check the syntax. You should have a parser to check that. GUI libraries like <code>Qt</code> provide built-in widgets to handle code highlighting etc.</p>
</div>
<span class="comment-copy">I can't reproduce it. <code>subprocess.call(["python", "-c", "import sys; sys.exit(1)"])</code> returns <code>1</code> as exitcode as it should. Could you provide a complete minimal example that demonstrates the problem?</span>
<span class="comment-copy">This honestly seems too good to be true. I have just started Python programming and there seems to be so much amazing stuff like this which I would not even imagine to exist. This looks like it would solve the next problem I was going to have of telling them where the error was after it actually got back too. Thank you very much for showing me this. I will try it tomorrow, hopefully to some success.</span>
<span class="comment-copy">Thanks for your reply. I had a feeling that my question may be a bit unclear. Basically what my program is going to do is record a python script written in the Text widget on my GUI, write it to a file on the press of a button, and then run that file as a script on a subprocess. There is only going to be one subprocess open at a time.  The subprocess is not just to check syntax, but to run the user's script in a subprocess, to interact with a piece of hardware. Using poll, wait or communicate stop the script from doing anything, so I was hoping using a return code would help me get around it.</span>
<span class="comment-copy">@Dellgloom I don't understand where threads come into play in your description. If the user is using them in its script <i>he</i> should handle them so that the subprocess returns the correct return code. You can't do much about it.</span>
<span class="comment-copy">My apologies again for the confusion. I assumed that when a subprocess was created that it was run on a thread. (I'm pretty new to all of this). The user will not be using threads in their script.</span>
