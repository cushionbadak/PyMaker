<div class="post-text" itemprop="text">
<p>I'm a novice at both python and networking. What address and port should I enter into <code>s.connect</code>? Also, am I using variables correctly in <code>s.connect</code>?</p>
<pre><code>import socket
recAddress = input("What is the address of the receiver of your messages?")
recPort = input("What port is the receiver using?")
def mysend(sock, msg):
    totalsent = 0
    while totalsent &lt; MSGLEN:
        sent = sock.send(msg[totalsent:])
        if sent == 0:
            raise RuntimeError("socket connection broken")
        totalsent = totalsent + sent

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect((recAddress, recPort))

i = 2
mysend(s, str(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I won't answer the vague question about "how do I know what IP and port to pass to this program", for the reasons explained in the comments.</p>
<p>But for the specific question about your code:</p>
<blockquote>
<p>Also, am I using variables correctly in s.connect?</p>
</blockquote>
<p>Almost, but not quite.</p>
<p>You get the values like this:</p>
<pre><code>recAddress = input("What is the address of the receiver of your messages?")
recPort = input("What port is the receiver using?")
</code></pre>
<p>Assuming this is Python 3.x, <a href="http://docs.python.org/3/library/functions.html#input" rel="nofollow"><code>input</code></a> returns a string. But <a href="http://docs.python.org/3/library/socket.html#socket.socket.connect" rel="nofollow"><code>connect</code></a> (for an IPv4 connection) requires a <em>number</em> for a port, not a string. So, you have to convert it somewhere.</p>
<p>You could do that immediately on input:</p>
<pre><code>recPort = int(input("What port is the receiver using?"))
</code></pre>
<p>… or you could do it in the <code>connect</code> call:</p>
<pre><code>s.connect((recAddress, int(recPort)))
</code></pre>
<hr/>
<p>If that assumption is wrong and you're using Python 2.x, then <a href="http://docs.python.org/2/library/functions.html#input" rel="nofollow"><code>input</code></a> will try to evaluate the input string, which means you'll get a number for the <code>recPort</code>… but then you're not reading <code>recAddress</code> right, unless you want to force the user to put quotes around the IP address. </p>
<p>In general, you almost never want to use <code>input</code>; call <a href="http://docs.python.org/2/library/functions.html#raw_input" rel="nofollow"><code>raw_input</code></a> instead—and if you do that, you get a string, and everything is exactly the same as I described for Python 3.x above.</p>
<hr/>
<p>Finally, a few side notes:</p>
<p>Instead of explicitly creating an IPv4 socket and calling <code>connect</code> on it, it's usually better to call <a href="http://docs.python.org/3/library/socket.html#socket.create_connection" rel="nofollow"><code>create_connection</code></a>. That way, if you later switch to an IPv6-compatible network, your program will still work fine (as long as users give you an IPv6 address, or a DNS address that resolves to one).</p>
<p>The <a href="http://docs.python.org/3/library/socket.html#socket.socket.sendall" rel="nofollow"><code>sendall</code></a> method on sockets already does what you appear to be trying to do manually with your <code>mysend</code> function. While it can sometimes be useful to loop around <code>send</code> like that explicitly (for example, if you're trying to debug an error, it means you can tell exactly where things went wrong), in general it's simpler to just use <code>send all</code>.</p>
<p>Also, within that loop, you're using a constant <code>MSGLEN</code>, which you haven't defined anywhere, which obviously isn't going to work. And, even if you <em>did</em> define it somewhere, what would you want to happen if <code>len(msg)</code> weren't the same as <code>MSGLEN</code>? For example, if <code>MSGLEN</code> is <code>4</code>, and <code>msg</code> is <code>'2'</code> (as in your example), it will send 2 bytes and then keep trying to send 0 bytes over and over again. Or, if <code>MSGLEN</code> is <code>1</code> but <code>msg</code> is <code>'42'</code>, it'll misleadingly send 2 bytes instead of 1. Most likely, you wanted to use <code>len(msg)</code> there, not <code>MSGLEN</code>.</p>
</div>
<span class="comment-copy">Any address you want to <code>connect</code> to?</span>
<span class="comment-copy">I'm using this to send messages over LAN. I have one windows machine and I'm wondering how I can connect to the other machine. Where can I find the other machines port number and address?</span>
<span class="comment-copy">You might want to read about TCP/IP networking and the specifics of the network settings of a Windows machine before trying to send messages. Currently, this does not seem like a programming question to me.</span>
<span class="comment-copy">I don't even know if I'm using LAN correctly. I'm trying to say that I want to send these messages over my local network.</span>
<span class="comment-copy">What do you want to connect to? You can't just connect "to the other machine", you have to connect to <i>some service on</i> the other machine, like a web server or an SMB file-sharing service or a custom program you've written. The port number will then be the port that service is listening to.</span>
<span class="comment-copy">I'm entering an IP address into recAddress. Changing it to an integer won't work because of the periods in the address. What data type would work for it?</span>
<span class="comment-copy">@user3314828: The <i>IP address</i> should be a string, but the <i>port</i> should be an integer. (Well, you <i>can</i> use an integer for the IP address as well, by converting each component into a byte and turning them all into a 4-byte integer, but you don't have to do that, and shouldn't…) That's why <code>s.connect((recAddress, int(recPort)))</code> works—it leaves <code>recAddress</code> as-is, but converts <code>recPort</code> to an integer.</span>
