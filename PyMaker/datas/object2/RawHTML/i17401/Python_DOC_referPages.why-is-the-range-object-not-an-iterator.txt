<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13092267/if-range-is-a-generator-in-python-3-3-why-can-i-not-call-next-on-a-range">If range() is a generator in Python 3.3, why can I not call next() on a range?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I wrote this and expected <code>0</code>:</p>
<pre><code>&gt;&gt;&gt; x = range(20)
&gt;&gt;&gt; next(x)
</code></pre>
<p>Instead I got:</p>
<blockquote>
<p>TypeError: 'range' object is not an iterator</p>
</blockquote>
<p>But I thought it was a generator?</p>
<p>The initial answer yielded the same thing I initially said to myself: it's an iterable, not an interator. But then, that wouldn't explain why this works, if both are simply generators:</p>
<pre><code>&gt;&gt;&gt; x = (i for i in range(30))
&gt;&gt;&gt; next(x)
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>range</code> returns an iterable, not an iterator. It can make iterators when iteration is necessary. <strong>It is not a generator.</strong></p>
<p>A generator expression evaluates to an iterator (and hence an iterable as well).</p>
</div>
<div class="post-text" itemprop="text">
<p>The range object is <em>iterable</em>. However, it's not an <em>iterator</em>.</p>
<p>To get an iterator, you need to call <a href="http://docs.python.org/2/library/functions.html#iter" rel="noreferrer"><code>iter()</code></a> first:</p>
<pre><code>&gt;&gt;&gt; r=range(5,15)
&gt;&gt;&gt; next(iter(r))
5
&gt;&gt;&gt; next(iter(r))
5
&gt;&gt;&gt; next(iter(r))
5
&gt;&gt;&gt; next(iter(r))
5
&gt;&gt;&gt; i=iter(r)
&gt;&gt;&gt; next(i)
5
&gt;&gt;&gt; next(i)
6
&gt;&gt;&gt; next(i)
7
&gt;&gt;&gt; next(i)
8
&gt;&gt;&gt; iter(r)
&lt;range_iterator object at 0x10b0f0630&gt;
&gt;&gt;&gt; iter(r)
&lt;range_iterator object at 0x10b0f0750&gt;
&gt;&gt;&gt; iter(r)
&lt;range_iterator object at 0x10b0f0c30&gt;
</code></pre>
<p>Edit: But be careful not to call <code>iter()</code> with every call to <code>next()</code>. It creates a new iterator at index 0.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>next</code> builtin calls the <code>__next__</code> hook method.  So, <code>range</code> objects have a well defined <code>__iter__</code>, but not a well-defined <code>__next__</code>.</p>
<p><em>iterable</em> objects have <code>__iter__</code> defined, <em>iterator</em> objects have well defined <code>__next__</code> (typically with an <code>__iter__</code> method which simply returns <code>self</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because the <code>next</code> function calls the <code>next</code> method of the object that passed in. </p>
<pre><code>next(...)
    x.next() -&gt; the next value, or raise StopIteration
</code></pre>
<p><code>listiterator</code>s and <code>generator</code>s both have the <code>next</code> method.</p>
<pre><code>&gt;&gt;&gt; iter(range(1)).__class__.next
&lt;slot wrapper 'next' of 'listiterator' objects&gt;
&gt;&gt;&gt; iter(x for x in range(1)).__class__.next
&lt;slot wrapper 'next' of 'generator' objects&gt;
</code></pre>
<p>But a <code>list</code> doesn't have it. And that is the reason why it raises that exception.</p>
<pre><code>&gt;&gt;&gt; list.next
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'list' has no attribute 'next'
</code></pre>
<p><code>next</code> doesn't care much about whether the object it's passed is an iterator or not.</p>
<pre><code>&gt;&gt;&gt; class Foo():
...     def next(self):
...             return "foo"
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; next(foo)
'foo'
&gt;&gt;&gt; next(foo)
'foo'
</code></pre>
<p>But adding the <code>next</code> method doesn't necessarily make it a collection/sequence/iterable.</p>
<pre><code>&gt;&gt;&gt; class Foo():
...     def next(self):
...             return "Foo"
&gt;&gt;&gt; [x for x in Foo()]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: iteration over non-sequence
&gt;&gt;&gt; iter(Foo())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: iteration over non-sequence
</code></pre>
<p>But adding the <code>__iter__</code> method to it makes it one.</p>
<pre><code>&gt;&gt;&gt; class Foo():
...     def next(self):
...             return "Foo"
...     def __iter__(self): return self
... 
&gt;&gt;&gt; [x for x in Foo()]
^CTraceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyboardInterrupt
&gt;&gt;&gt; iter(Foo())
&lt;__main__.Foo instance at 0x7fd77307c488&gt;
</code></pre>
<p>The <code>next</code> seems to have some builtin intelligence when it comes to <code>list</code>. </p>
<pre><code>&gt;&gt;&gt; class Foo():
...     pass
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; next(foo)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: instance has no next() method
&gt;&gt;&gt; next(range(20))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list object is not an iterator
</code></pre>
</div>
<span class="comment-copy"><code>iterable != iterator</code></span>
<span class="comment-copy">Also relevant: <a href="http://docs.python.org/3/library/stdtypes.html#ranges" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#ranges</a></span>
<span class="comment-copy">Note that you get an iterator out of this iterable by calling iter() on it.  You can then call the next() builtin on the result from iter(range(...)).  It's confusing but just one of those things you learn when you dive deeply enough into the language.  Note that for loops implicitly call iter(expression) once and then next(results_from_iter) for every pass through the loop.</span>
<span class="comment-copy">That's the same thing I told myself initially. But then, why does this work: <code>next( (i for i in range(30) )</code>, since that's a generator expression? Actually, let me add this to the question.</span>
<span class="comment-copy">"It is indeed a generator" - no, it isn't.</span>
<span class="comment-copy">@Aerovista: Because a generator expression evaluates to an iterator?</span>
<span class="comment-copy">@NPE tldr; generators can be treated as iterators, as I thought. So that information is unrelated-- the correct answer is that range() objects are immutable and special and are not in fact simple generators.</span>
<span class="comment-copy">@user2357112: Oh, I wasn't calling it. This explains it. Long day, I'm off to bed.</span>
