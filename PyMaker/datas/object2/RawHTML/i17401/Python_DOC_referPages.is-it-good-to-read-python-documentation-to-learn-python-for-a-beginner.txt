<div class="post-text" itemprop="text">
<p>I've started learning Python recently and started reading Head First Python and Learn Python The Hard Way. Both books doesn't seem to explain everything in detail. I wanna know if it's a good idea to read Python Documentation instead of these books. Any help would be appreciated. Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation has two parts; one is a <a href="http://docs.python.org/3/tutorial/index.html" rel="noreferrer">basic tutorial</a> which won't cover much beyond what you can find in the books, and the majority of it is a <em>reference</em> to the language itself. It is not a good learning resource, but it is (as good documentation is), an excellent reference for when you want to find out what a particular module does.</p>
<p>The documentation won't answer questions like <em>"How do I download a file from the Internet?"</em> <em>(actually, it <a href="http://docs.python.org/2/howto/urllib2.html" rel="noreferrer">answers this specific question</a> but the idea is that its not a teaching resource)</em> but it will tell you what are all the methods of the <code>urllib</code> module, however you would already need to know that you need <code>urllib</code> to get the job done; this is the main problem when you are starting out.</p>
<p>I would say from the documentation you should probably skip the tutorial (especially if you are already reading a book), and then have a look at the <a href="http://docs.python.org/3/library/index.html" rel="noreferrer">standard library index</a> which will give you an overview of what modules are available, broken down by function.</p>
<p>I would recommend the <a href="http://shop.oreilly.com/product/9780596158118.do" rel="noreferrer"><em>Programming Python</em></a> book by Mark Lutz as a great starting point. It is quite a tome (at 1632 pages) but covers everything you need to know to be proficient in Python.</p>
<p>Once you have gone through that, the next book I would recommend is <a href="https://rads.stackoverflow.com/amzn/click/com/0321767349" rel="nofollow noreferrer"><em>The Python Standard Library by Example</em></a> by Doug Hellman. It is an excellent resource on how to use the comprehensive <a href="http://docs.python.org/3/library/index.html" rel="noreferrer">standard library</a>.</p>
<p>Finally, after the two books you are now ready to solve real world problems and nothing helps more than having a cookbook/reference of sorts, for this I can recommend the following:</p>
<ul>
<li><a href="https://rads.stackoverflow.com/amzn/click/com/0321905636" rel="nofollow noreferrer"><em>Python in Practice</em></a></li>
<li><a href="http://shop.oreilly.com/product/0636920027072.do" rel="noreferrer"><em>Python Cookbook</em></a></li>
<li><a href="https://www.jeffknupp.com/writing-idiomatic-python-ebook/" rel="noreferrer"><em>Writing Idiomatic Python</em></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The books are good to introduce you the language, with examples. You should definitely read them if you have time.</p>
<p>The documentation is useful to get technical details on some method, for a specific version of the language (eg Python <a href="http://docs.python.org/2.7/" rel="nofollow">2.7.6 reference</a>)</p>
<p>Finally, when you're developing an application, you can also learn by reading the source code, exploring where the code is going and what is happening. An excellent debugging tool is <a href="https://pypi.python.org/pypi/ipdb" rel="nofollow">iPdb</a>, which allows you to put breakpoints in your code and examine the current state at that position.</p>
<p>If the documentation is too crude, and the book too long, you can also try some online tutorial. Google is full of resources, like <a href="http://www.learnpython.org/" rel="nofollow">LearnPython</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is, definitely :-).</p>
<p>I'd also read <a href="http://www.diveintopython3.net" rel="nofollow">http://www.diveintopython3.net</a> (or <a href="http://www.diveintopython.net" rel="nofollow">http://www.diveintopython.net</a> for 2.x).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a comprehensive review of the language, the docs are your best resource.</p>
<p><a href="http://docs.python.org/index.html" rel="nofollow">http://docs.python.org/index.html</a></p>
<p>Nevertheless, you may prefer to start out with the tutorial (<a href="http://docs.python.org/tutorial/" rel="nofollow">http://docs.python.org/tutorial/</a>) and some introductory material such as the ones you've referenced, so that you can have some experience putting together the basics so that you have experiences to draw from when reviewing the docs, since the library reference (<a href="http://docs.python.org/library/index.html" rel="nofollow">http://docs.python.org/library/index.html</a>) and the language reference (<a href="http://docs.python.org/reference/index.html" rel="nofollow">http://docs.python.org/reference/index.html</a>) don't necessarily have a lot of good examples, and frequently presume at least elementary knowledge of the language in its expositions.  </p>
<p>The How-To's are a good in-depth review, with examples: <a href="http://docs.python.org/howto/index.html" rel="nofollow">http://docs.python.org/howto/index.html</a></p>
</div>
<span class="comment-copy">Define what you are looking for when you say "in detail." "In detail" can range from "What arguments can I pass to this function?" to "How is this implemented in the interpreter's source code, and how is that then stored in memory?" Personally, I would say make sure you finish those books first so that you understand the basic details of the language. Once you understand the basic details, it's good to reference the documentation as you construct any application so you are aware of the intended use and caveats of the language constructs.</span>
<span class="comment-copy">@David I would prefer "What arguments can I pass to the function?"</span>
<span class="comment-copy">indeed, I too started from Docs  however I went over many other video tutorials and a reference book later, practiced a lot, However my computer background helped me to pickup easily.</span>
<span class="comment-copy">Will do, Thanks</span>
<span class="comment-copy">I've read first 200 pages of the Mark Lutz book, it took a lot of time to get into real programming :3 ?</span>
<span class="comment-copy">It assumes you are new to the language itself. If you just want to know how to do X, then pick up the Python in Practice book. However this is not the ideal way to <i>learn</i> a language.</span>
<span class="comment-copy">I see. Thanks for the advice :)</span>
<span class="comment-copy">don't rely on the number of pages you will read, just practice more. It would take plenty of time to become a better programmer.</span>
<span class="comment-copy">Thank you very much for the quick response</span>
