<div class="post-text" itemprop="text">
<p>I would like to understand if there is a difference between assigning an empty value and an empty output, as follows:</p>
<p>1&gt; Assigning a value like this</p>
<pre><code>string = ""
</code></pre>
<p>2&gt; An empty value returned as output</p>
<pre><code>string = "abcd:"
str1, str2 = split(':')
</code></pre>
<p>In other words, is there a difference in values of 'string' in 1&gt; and 'str2' in 2&gt;? And how would a method see the value of 'str2' if it is passed as an argument?</p>
</div>
<div class="post-text" itemprop="text">
<p>Checking equality with <code>==</code></p>
<pre><code>&gt;&gt;&gt; string = ""
&gt;&gt;&gt; s = "abcd:"
&gt;&gt;&gt; str1, str2 = s.split(':')
&gt;&gt;&gt; str1
'abcd'
&gt;&gt;&gt; str2
''
&gt;&gt;&gt; str2 == string
True
</code></pre>
<p>Maybe you were trying to compare with <code>is</code>. This is for testing identity: <code>a is b</code> is equivalent to <code>id(a) == id(b)</code>.</p>
<p>Or check both strings for emptiness:</p>
<pre><code>&gt;&gt;&gt; not str2
True
&gt;&gt;&gt; not string
True
&gt;&gt;&gt; 
</code></pre>
<p>So that both are empty ... </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>In other words, is there a difference in values of 'string' in 1&gt; and 'str2' in 2&gt;?</em></p>
</blockquote>
<p>No, there is no difference, both are empty strings <code>""</code>.</p>
<blockquote>
<p><em>And how would a method see the value of 'str2' if it is passed as an argument?</em></p>
</blockquote>
<p>The method would see it as a string of length 0, in other words, an empty string.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you will check <code>id(string)</code> in case-1 and <code>id(str2)</code> in case2, it will give u the same value, both the string objects are same.</p>
<pre><code>def mine(str1, str2):
    print str1, str2
</code></pre>
<p>see the above method you can call <code>mine(* string.split(':'))</code> it will pass the <code>'abcd:'</code> as str1 = 'abcd' and  str2 = ''.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; string1 = ""
&gt;&gt;&gt; string2 = "abcd:"
&gt;&gt;&gt; str1, str2 = string.split(':')
&gt;&gt;&gt; str1
'abcd'
&gt;&gt;&gt; str2
''
&gt;&gt;&gt; string1 == str2
True
</code></pre>
<p>No. There is no difference between the two empty strings. They would behave the same in all cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can see for yourself.</p>
<pre><code>&gt;&gt;&gt; s1 = ''
&gt;&gt;&gt; s2 = 'abcd:'
&gt;&gt;&gt; s3, s4 = s2.split(':')
&gt;&gt;&gt; s1 == s4
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; string = ""
&gt;&gt;&gt; id(string)
2458400
&gt;&gt;&gt; print string

&gt;&gt;&gt; string = "abcd:"
&gt;&gt;&gt; str1, str2 = string.split(':')
&gt;&gt;&gt; print str1
abcd
&gt;&gt;&gt; print str2

&gt;&gt;&gt; id(str2)
2458400
&gt;&gt;&gt; type(string)
&lt;type 'str'&gt;
&gt;&gt;&gt; type(str2)
&lt;type 'str'&gt;
</code></pre>
<p>No there is no difference </p>
</div>
<div class="post-text" itemprop="text">
<p>Empty string is a literal, in Python literals are immutable objects and there value never changes. However, in some cases two literal objects having same value can have different identities (Identity of an object is an address of the memory location in CPython and you can get it by using id(<em>obj</em>)) so to answer your question</p>
<pre><code>print id(string) == id(str2)  # Can output either True or False
print string == str2  # Will always output True
</code></pre>
<p><em>Note that most of the time id(string) should be equal to id(str2) :).</em></p>
<p>You can read about the Data Model in the <a href="http://docs.python.org/3/reference/datamodel.html" rel="nofollow">Python Language Reference</a> for further details. I am quoting the text which is pertinent to the question:</p>
<blockquote>
<p>Types affect almost all aspects of object behavior. Even the
  importance of object identity is affected in some sense: for immutable
  types, operations that compute new values may actually return a
  reference to any existing object with the same type and value, while
  for mutable objects this is not allowed. E.g., after a = 1; b = 1, a
  and b may or may not refer to the same object with the value one,
  depending on the implementation, but after c = []; d = [], c and d are
  guaranteed to refer to two different, unique, newly created empty
  lists. (Note that c = d = [] assigns the same object to both c and d.)</p>
</blockquote>
</div>
<span class="comment-copy">Why would there be a difference? Anyway, if you wanted to test this, you could just use <code>==</code> to find out.</span>
<span class="comment-copy">empty string is an empty string.  Though, don't go comparing them with <code>is</code> :-)</span>
<span class="comment-copy">@roippi: <code>is</code> actually returns True in this case</span>
<span class="comment-copy">@DavidRobinson I know, I should say don't go comparing strings-in-general with <code>is</code>.  We don't want more dupes of <i>those</i> questions :-)</span>
