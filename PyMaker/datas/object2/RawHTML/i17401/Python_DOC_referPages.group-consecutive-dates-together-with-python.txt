<div class="post-text" itemprop="text">
<p><strong>Given:</strong></p>
<pre><code>dates = [
  datetime(2014, 10, 11), 

  datetime(2014, 10, 1), 
  datetime(2014, 10, 2),
  datetime(2014, 10, 3),

  datetime(2014, 10, 5), 
  datetime(2014, 10, 5), 
  datetime(2014, 10, 6), 

  datetime(2014, 10, 22), 
  datetime(2014, 10, 20),
  datetime(2014, 10, 21),

  datetime(2014, 10, 9), 

  datetime(2014, 10, 7),
  datetime(2014, 10, 6)
]
</code></pre>
<p><strong>Expected output:</strong></p>
<pre><code>expect = [
  [datetime(2014, 10, 1), datetime(2014, 10, 3)],
  [datetime(2014, 10, 5), datetime(2014, 10, 7)],
   datetime(2014, 10, 9),
   datetime(2014, 10, 11),
  [datetime(2014, 10, 20), datetime(2014, 10, 22)]
]
</code></pre>
<p><strong>Implementation in Python:</strong></p>
<pre><code>from datetime import datetime, timedelta

def parse_date_ranges(dates):
    if(not dates or not len(dates) &gt; 0):
        return False

    # make sure to order dates
    dates.sort()

    # init values
    result  = []
    tupl    = [dates[0], dates[0]]
    it      = iter(dates)
    date    = True

    def add_tuple_to_result(tuple):
        # if first part of tuple differs from last part -&gt; add full tuple
        # else -&gt; add first part of tuple only
        result.append(tupl if tupl[0] != tupl[1] else tupl[0])

    while date:
        # get next date or False if no next date
        date = next(it, False)

        # filter double dates
        if(date in tupl):
            continue

        elif(date):
            if(date - timedelta(days=1) == tupl[1]):
                # consecutive date, so add date to end of current tuple
                tupl[1] = date
            else:
                # gap larger than 1 day: add current tuple to result
                # and create new tuple
                add_tuple_to_result(tupl)
                tupl = [date, date]

        else:
            # date == false, so this is the last step.
            # add the current tuple to result
            add_tuple_to_result(tupl)

    return result
</code></pre>
<p>See <a href="https://gist.github.com/mattes/8987332" rel="nofollow">https://gist.github.com/mattes/8987332</a> for some more tests, too.</p>
<p><strong>Question</strong></p>
<p>The implementation works, but I am new to Python. So I was wondering if there are better ways to solve this issue? Or is it just fine?</p>
</div>
<div class="post-text" itemprop="text">
<p>I like <a href="http://docs.python.org/3/library/itertools.html" rel="noreferrer">itertools</a>:</p>
<pre><code>from itertools import tee, zip_longest
from datetime import datetime, timedelta

one_day = timedelta(days=1)

def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return zip_longest(a, b, fillvalue=None)

def collapse_ranges(sorted_iterable, inc):
    pairs = pairwise(sorted_iterable)
    for start, tmp in pairs:
        if inc(start) == tmp:
            for end, tmp in pairs:
                if inc(end) != tmp:
                    break
            yield start, end
        else:
            yield start

# dates = [...]

numbers = [11, 1, 2, 3, 5, 5, 6, 22, 20, 21, 9, 7, 6]

if __name__ == '__main__':
    import pprint
    for each in collapse_ranges(sorted(set(dates)), lambda d: d + one_day):
        pprint.pprint(each)
    for each in collapse_ranges(sorted(set(numbers)), (1).__add__):
        pprint.pprint(each)
</code></pre>
<p>Result:</p>
<pre><code>(datetime.datetime(2014, 10, 1, 0, 0), datetime.datetime(2014, 10, 3, 0, 0))
(datetime.datetime(2014, 10, 5, 0, 0), datetime.datetime(2014, 10, 7, 0, 0))
datetime.datetime(2014, 10, 9, 0, 0)
datetime.datetime(2014, 10, 11, 0, 0)
(datetime.datetime(2014, 10, 20, 0, 0), datetime.datetime(2014, 10, 22, 0, 0))
(1, 3)
(5, 7)
9
11
(20, 22)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can avoid reinventing the wheel by adapting this <a href="https://stackoverflow.com/a/9981888/355230">answer</a> to the similarly titled<br/>
<a href="https://stackoverflow.com/questions/9981719/grouping-consecutive-dates-together"><em>Grouping consecutive dates together</em></a> question to work with<code>datetime</code>objects:</p>
<pre><code>def parse_date_ranges(dates):

    def group_consecutive(dates):
        dates_iter = iter(sorted(set(dates)))  # de-dup and sort

        run = [next(dates_iter)]
        for d in dates_iter:
            if (d.toordinal() - run[-1].toordinal()) == 1:  # consecutive?
                run.append(d)
            else:  # [start, end] of range else singleton
                yield [run[0], run[-1]] if len(run) &gt; 1 else run[0]
                run = [d]

        yield [run[0], run[-1]] if len(run) &gt; 1 else run[0]

    return list(group_consecutive(dates)) if dates else False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wrote another solution for you, and wrote a couple of comments to try to explain the code.</p>
<pre><code>from datetime import datetime, timedelta

dates = [
    datetime(2014, 10, 11),
    datetime(2014, 10, 1),
    datetime(2014, 10, 2),
    datetime(2014, 10, 3),
    datetime(2014, 10, 5),
    datetime(2014, 10, 5),
    datetime(2014, 10, 6),
    datetime(2014, 10, 22),
    datetime(2014, 10, 20),
    datetime(2014, 10, 21),
    datetime(2014, 10, 9),
    datetime(2014, 10, 7),
    datetime(2014, 10, 6)
]
# Remove duplicates, and sort the dates ascending
sorted_dates = sorted(set(dates))
# Set initial first and last element as the current element
first, last = sorted_dates[0], sorted_dates[0]
date_ranges = []

# Loop over the sorted list from the second value
for d in sorted_dates[1:]:
    # Check if the current date is exactly one day later then the current
    # "last" date
    if d - last != timedelta(days=1):
        date_ranges.append(tuple(sorted({first, last})))
        first, last = d, d
    else:
        last = d

# Handle last element
if first == last:
    date_ranges.append((first,))
else:
    date_ranges.append((first, last))

for dt_pair in date_ranges:
    print dt_pair
</code></pre>
<p>Output:</p>
<pre><code>(datetime.datetime(2014, 10, 1, 0, 0), datetime.datetime(2014, 10, 3, 0, 0))
(datetime.datetime(2014, 10, 5, 0, 0), datetime.datetime(2014, 10, 7, 0, 0))
(datetime.datetime(2014, 10, 9, 0, 0),)
(datetime.datetime(2014, 10, 11, 0, 0),)
(datetime.datetime(2014, 10, 20, 0, 0), datetime.datetime(2014, 10, 22, 0, 0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adapting <a href="https://stackoverflow.com/a/43091576/1201614">this answer</a> to use datetime objects. This covers non-unique and non-sorted input and is python3 compatible too:</p>
<pre><code>import itertools
from datetime import datetime, timedelta

def datetimes_to_ranges(iterable):
    iterable = sorted(set(iterable))
    keyfunc = lambda t: t[1] - timedelta(days=t[0])
    for key, group in itertools.groupby(enumerate(iterable), keyfunc):
        group = list(group)
        if len(group) == 1:
            yield group[0][1]
        else:
            yield group[0][1], group[-1][1]
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; for i in datetimes_to_ranges(dates): i
... 
(datetime.datetime(2014, 10, 1, 0, 0), datetime.datetime(2014, 10, 3, 0, 0))
(datetime.datetime(2014, 10, 5, 0, 0), datetime.datetime(2014, 10, 7, 0, 0))
datetime.datetime(2014, 10, 9, 0, 0)
datetime.datetime(2014, 10, 11, 0, 0)
(datetime.datetime(2014, 10, 20, 0, 0), datetime.datetime(2014, 10, 22, 0, 0))
</code></pre>
</div>
<span class="comment-copy">Why 9 and 11 are not together?</span>
<span class="comment-copy">This really isn't a good question for SO. We can help you fix code that doesn't work, but asking people to write better code than your working code or promise that no such thing exists doesn't really fit here. <a href="http://codereview.stackexchange.com">Code Review</a> might be better, but I don't know whether it's appropriate there either.</span>
<span class="comment-copy">However, you might want to look at <a href="http://stupidpythonideas.blogspot.com/2014/01/grouping-into-runs-of-adjacent-values.html" rel="nofollow noreferrer">Grouping into runs of adjacent values</a>, which I wrote after helping someone with a similar problem. (He was trying to use <code>itertools</code> and got stuck, so I showed the various ways to get unstuck. Whether that's actually the best solution in the first place or not is a more subjective and tougher questionâ€¦)</span>
<span class="comment-copy">9 .. (10) .. 11, so they don't follow each other.</span>
<span class="comment-copy">didn't know about code review. thanks for the hint.</span>
