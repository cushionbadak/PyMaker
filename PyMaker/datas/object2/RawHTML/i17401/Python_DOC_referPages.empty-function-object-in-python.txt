<div class="post-text" itemprop="text">
<p>I've heard that python functions are objects, similar to lists or dictionaries, etc.  However, what would be a similar way of performing this type of action with a function?</p>
<pre><code># Assigning empty list to 'a'
a = list()

# Assigning empty function to 'a'
a = lambda: pass
# ???
</code></pre>
<p>How would you do this? Further, is it necessary or proper?
Here is the sense in which I would like to use it for better context:</p>
<p>I have a <code>QListWidget</code> for selecting items which are associated with keys in a dictionary. The values in this dictionary are also dictionaries, which hold certain properties of the items, which I can add. These certain properties are stored as keys, and the values in them are initialized or updated by calling different functions.  So, I'm storing a variable in the window which gets updated when a button is pressed to tell this script which property to update.  </p>
<p>As you can see, I would like to store the function to map to the data using the correct function based on the situation.</p>
<pre><code># Get selection from the list
name = selected_item
# Initialize an empty function
f = lambda: pass
# Use property that is being added now, which was updated by the specific button that was pushed
property_list = items[name][self.property_currently_being_added]
if self.property_currently_being_added == "prop1":
    f = make_property1()
elif self.property_currently_being_added == "prop2":
    f = make_property2()
elif self.property_currently_being_added == "prop3":
    f = make_property3()
elif self.property_currently_being_added == "prop4":
    f = make_property4()

# map the certain function to the data which was retrieved earlier
added_property = map(f, data)
property_list.append(added_property)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, the reason this doesn't work:</p>
<pre><code>a = lamdba: pass
</code></pre>
<p>… is that <a href="http://docs.python.org/3/reference/expressions.html#lambda"><code>lambda</code></a> only allows an expression, and defines a function that returns the value of the expression. Since <a href="http://docs.python.org/3/reference/simple_stmts.html#the-pass-statement"><code>pass</code></a> is a statement, not an expression, this is illegal.</p>
<p>However, this works just fine:</p>
<pre><code>a = lambda: None
</code></pre>
<p>In Python, a function that falls off the end without a <code>return</code> statement always returns <code>None</code>. So, these are equivalent:</p>
<pre><code>def a(): return None
def a(): pass
</code></pre>
<p>However, I don't see why you want to write this as a lambda and an assignment anyway; the <code>def</code> is shorter, and more readable, and gives you an introspectable function object with a nice name (<code>a</code> instead of <code>&lt;lambda&gt;</code>), and so on. The only reasons to ever use <code>lambda</code> are when you don't want to give the function a name, or when you need to define the function inside an expression. Obviously neither of those are true, because you use the <code>lambda</code> directly inside an assignment statement. So, just use <code>def</code>.</p>
<hr/>
<p>Meanwhile, this is in a sense an "empty function", or at least as empty as possible (as you can see by, e.g., calling <code>dis.dis(a)</code>, it still takes two bytecodes to do nothing but fall off the end and return <code>None</code>), but it's not useful for your case. You don't want an "empty function". If you try passing your <code>a</code> to <code>map</code>, you're just going to get a <code>TypeError</code>, because you're trying to call a function of no arguments with one argument. (Because that's what <code>map</code> does.)</p>
<p>What you might want is an <em>identity</em> function, which just returns its argument as-is. Like this:</p>
<pre><code>def a(x): return x
</code></pre>
<p>But I'm not sure that's what you want. Did you want to append <code>data</code> as-is in that case? Or did you want to do something different, like return early, or raise an exception, or not append anything, or …?</p>
<hr/>
<p>Finally, I don't see why you want a function at all. Why not just not call <code>map</code> if you have nothing to map? You have a perfectly good <code>else</code> clause that already catches that case (especially handy if what you want to do is return early or raise…). Or, if you prefer, you can start with <code>f = None</code>, and then use an <code>if f:</code> do decide whether to map or not. Or, if you really want:</p>
<pre><code>added_property = [f(element) if f else element for element in data]
</code></pre>
<p>… or …</p>
<pre><code>added_property = map(f, data) if f else data
</code></pre>
<hr/>
<p>As one last note, instead of a long <code>if</code>/<code>elif</code> chain that repeats the same thing over and over again, you might want a <code>dict</code>:</p>
<pre><code>propfuncs = {'prop1': make_property1(),
             'prop2': make_property2(),
             'prop3': make_property3(),
             'prop4': make_property4()}
</code></pre>
<p>Then, all that cruft turns into these two lines:</p>
<pre><code>f = propfuncs.get(self.property_currently_being_added)
added_property = map(f, data) if f else data
</code></pre>
<p>Or course an even better design might be to replace all those <code>make_propertyN</code> functions with a single function that you call as <code>make_property(1)</code> or <code>make_property('prop1')</code>… but without seeing what they actually do, I can't be sure of that.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am surprised to learn that you can even do...</p>
<pre><code>def a(): "This is a test"

a()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this feels so much like you're looking for a <code>Nothing</code> functor, I am guessing that if you had knowledge of Monads you wouldn't even need an empty function , as inspiration <a href="https://bitbucket.org/jason_delaat/pymonad/src/cbecd6796cd1488237d2a0f057cefd2a50df753a/pymonad/Maybe.py?at=master&amp;fileviewer=file-view-default" rel="nofollow noreferrer">PyMonad</a> has a nice <code>Nothing</code> implementation, I usually like to create my own, but it's a good starting point. </p>
</div>
<div class="post-text" itemprop="text">
<p>For completeness and since the title is "empty function object in python", more general case is an <em>empty function object that takes any number of parameters</em>, so you can use it in <em>any</em> callback. It's this one:</p>
<pre><code>callback = lambda *_, **__: None
</code></pre>
<p>Explanation is here: <a href="http://echochamber.me/viewtopic.php?t=64825" rel="nofollow noreferrer">http://echochamber.me/viewtopic.php?t=64825</a></p>
</div>
<span class="comment-copy">Why do you think you need an "empty" function? You certainly <i>can</i> do this, exactly as you have written, but why do you need to? Is your function liable to be called when it is not yet properly defined?</span>
<span class="comment-copy">I agree with Henry, there doesn't seem to be a big reason to do this. In your example, you could simply do <code>else: raise ValueError</code> or etc. It doesn't seem like you'd want this function to continue if <code>self.property_currently_being_added == None</code> or what-have-you.</span>
<span class="comment-copy">Also, there's no reason this has to be a lambda. You can just as easily write <code>def f(): pass</code>, with the same effect. The only reasons to ever use <code>lambda</code> are (a) you don't want to give the function a name (doesn't apply here; you immediately assign it to <code>f</code>); (b) you need to define it in an expression, not a statement (doesn't apply here; you use it directly in an assignment statement); or (c) you're taking a class with a professor who hates Python and would rather be teaching Scheme (presumably doesn't apply here).</span>
<span class="comment-copy">You can make an identity function.  But you are really barking up the wrong tree with lambda.</span>
<span class="comment-copy">Just for fun, if you really want a <i>truly</i> empty function object, try this: <code>c = types.CodeType(0, 0, 0, 0, 0, b'', (), (), (), '&lt;main&gt;', 'f', 0, b'')</code>, then <code>f = types.FunctionType(c, {})</code>. Of course all this function does is raise a <code>SystemError</code> when called… but how useful do you expect an empty function to be? :)</span>
<span class="comment-copy">Thanks @abarnert This is an excellent answer.  Good call on the <code>propfuncs</code> idea, I think that may help. The functions <code>make_propertyN()</code> are actually functions which just initialize other nested dictionaries, but I think this is a good approach for my specific case and hopefully it will help others along this route as well.</span>
