<div class="post-text" itemprop="text">
<p>I've created two geodataframes and I'm trying to find the shortest distance between every point in one geodataframe to any point in the other geodataframe based on the answer <a href="https://gis.stackexchange.com/questions/222315/geopandas-find-nearest-point-in-other-dataframe">here</a>. </p>
<p>However, even though I think I've created a geometry column I can't access the rows. I get this error:</p>
<pre><code>AttributeError: ("'Series' object has no attribute 'geometry'", u'occurred at index 0')
</code></pre>
<p>nameofgeodataframe.head() returns: </p>
<pre><code>   node  x_coord  y_coord   Coordinates1
0     0        0      258  POINT (0 258)
1     1        0      259  POINT (0 259)
2     2        0      260  POINT (0 260)
3     3        0      261  POINT (0 261)
4     4        0      262  POINT (0 262)
</code></pre>
<p>This is my very inelegant script.</p>
<pre><code>f = h5py.File("temp_bin2x_outer_tagged.hdf", "r")
data = f["MDF/images/0/image"]
my_test = data[171, :, :]
val = filter.threshold_otsu(my_test)
binary = np.where(my_test &gt; val, 1, 0)
outskel = skeletonize(binary)
x, y = np.where(outskel&gt;0)
y_coord = y.tolist()
x_coord = x.tolist()
index = list(range(0,(len(x_coord))))
df = pd.DataFrame({"y_coord": y_coord, "x_coord": x_coord, "node": index})
df['Coordinates1'] = list(zip(df.x_coord, df.y_coord))
df['Coordinates1'] = df['Coordinates1'].apply(Point)
outer = geopandas.GeoDataFrame(df, geometry='Coordinates1')

f2 = h5py.File("temp_bin2x_inner_tagged.hdf", "r")
data2 = f2["MDF/images/0/image"]
my_test2 = data2[211, :, :]
val2 = filter.threshold_otsu(my_test2)
binary2 = np.where(my_test2 &gt; val2, 1, 0)
binary2 = np.where(my_test2 &gt; val2, 1, 0)
inskel = skeletonize(binary2)
x2, y2 = np.where(inskel&gt;0)
y_coord2 = y2.tolist()
x_coord2 = x2.tolist()
index2 = list(range(0,(len(x_coord2))))
df2 = pd.DataFrame({"y_coord2": y_coord2, "x_coord2": x_coord2, "node": index2})
df2['Coordinates'] = list(zip(df2.x_coord2, df2.y_coord2))
df2['Coordinates'] = df2['Coordinates'].apply(Point)
inner = geopandas.GeoDataFrame(df2, geometry='Coordinates')

from shapely.ops import nearest_points
pts3 = inner.geometry.unary_union
def near(point, pts=pts3):
     nearest = inner.geometry == nearest_points(point, pts)[1]
     return inner[nearest].node.get_values()[0]
outer['Nearest'] = outer.apply(lambda row: near(row.geometry), axis=1)
</code></pre>
<p>Am I misunderstanding how a geodataframe is constructed?</p>
<p>Thank you so much, any help would be great!</p>
</div>
<div class="post-text" itemprop="text">
<p>you do a mixture between the new name of column and the name geometry, its the reason of the error:(the name translation is not always done)</p>
<pre><code> data1 = """
 node  x_coord  y_coord 
0        0      258  
1        0      259  
2        0      260  
3        0      261  
4        0      230  
 """
data2 = """
  node  x_coord  y_coord 
0        0      288  
1        0      249  
2        0      210  
3        0      259  
4        0      232  
"""
df1 = pd.read_csv(pd.compat.StringIO(data1), sep='\s+')
df2 = pd.read_csv(pd.compat.StringIO(data2), sep='\s+')
df1['Coordinates1'] = list(zip(df1.x_coord, df1.y_coord))
df1['Coordinates1'] = df1['Coordinates1'].apply(Point)
df2['Coordinates2'] = list(zip(df2.x_coord, df2.y_coord))
df2['Coordinates2'] = df2['Coordinates2'].apply(Point)

outer = gpd.GeoDataFrame(df1, geometry='Coordinates1')
inner = gpd.GeoDataFrame(df2, geometry='Coordinates2')

from shapely.ops import nearest_points
pts3 = inner.geometry.unary_union #you could use inner.Coordinates2.unary_union

def near(point, pts=pts3):
    #you could use inner.Coordinates2
    nearest = inner.geometry == nearest_points(point, pts)[1]
    return inner[nearest].node.get_values()[0]

# apply or lambda doesnt translate geometry to Coordinates1
outer['Nearest'] = outer.apply(lambda row: near(row.Coordinates1), axis=1)
print(outer)
</code></pre>
<p>output:</p>
<pre><code>node  x_coord  y_coord   Coordinates1  Nearest
0     0        0      258  POINT (0 258)        3
1     1        0      259  POINT (0 259)        3
2     2        0      260  POINT (0 260)        3
3     3        0      261  POINT (0 261)        3
4     4        0      230  POINT (0 230)        4
</code></pre>
<p>after, if you have a big number of points i suggest you to use <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.html" rel="nofollow noreferrer">cKDTree</a>:</p>
<pre><code>from scipy.spatial import cKDTree
def ckdnearest(gdA, gdB, bcol):
    nA = np.array(list(zip(gdA.geometry.x, gdA.geometry.y)))
    nB = np.array(list(zip(gdB.geometry.x, gdB.geometry.y)))
    btree = cKDTree(nB)
    dist, idx = btree.query(nA, k=1)
    df = pd.DataFrame.from_dict({'distance': dist.astype(int),
                                 'bcol': gdB.loc[idx, bcol].values})
    return df


df = ckdnearest(outer, inner, 'node')
print(df)
</code></pre>
<p>output:</p>
<pre><code>    distance  bcol            (bcol equal node of inner
0         1     3
1         0     3
2         1     3
3         2     3
4         2     4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case anyone else is struggling with an old geopandas version. This is the solution: </p>
<pre><code>from scipy.spatial import cKDTree
def ckdnearest(gdA, gdB, bcol):
    nA = np.array(list(zip(gdA.geometry.map(lambda val: val.x), 
    gdA.geometry.map(lambda val: val.y))))
    nB = np.array(list(zip(gdB.geometry.map(lambda val: val.x), 
    gdB.geometry.map(lambda val: val.y))))
    btree = cKDTree(nB)
    dist, idx = btree.query(nA, k=1)
    df = pd.DataFrame.from_dict({'distance': dist.astype(int),
                                 'bcol': gdB.loc[idx, bcol].values})
    return df


df = ckdnearest(outer, inner, 'node')
print(df)
</code></pre>
</div>
<span class="comment-copy">Thank you so much @Frenchy! That works perfectly! I'm really grateful! I'm having trouble with the ckdnearest function, with both your example dataset and my dataset it returns:  <code>AttributeError: 'GeoSeries' object has no attribute 'x'</code> I've tried switching geometry to Coordinates again,<code>nA = np.array(list(zip(gdA.Coordinates1.x, gdA.Coordinates1.y))) ...     nB = np.array(list(zip(gdB.Coordinates.x, gdB.Coordinates.y)))</code>. Would it have anything to do with using Python 2 rather than 3?</span>
<span class="comment-copy">i am using python 3.6 and no problem of translation i keep geometry with your sample</span>
<span class="comment-copy">anyways if you dont want any errors you could rename with name geometry both columns instead coordinates1 and coordinates2</span>
<span class="comment-copy">Thank you. It was a problem with geopandas version.</span>
