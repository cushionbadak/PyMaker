<div class="post-text" itemprop="text">
<p>I'm trying to extract string pattern from multiple columns into a single result column using Pandas and str.extract.</p>
<p>My sample dataframe is as follows.</p>
<pre><code>field1   field2
ab1234   ab1234
ac1234   
qw45     rt23
c1234b   cb1234
cv       1234dd
...
</code></pre>
<p>I want to extract the '1234' (EDIT: any 4 digits integer not just '1234') from either column (field1 and field2 in this case) into a new result column to have the desired result below</p>
<pre><code>field1   field2   result
ab1234   ab1234   1234
ac1234            1234
qw45     rt23     
c1234b   cb1234   1234
cv       1234dd   1234
...
</code></pre>
<p>I'm attempting to use pandas str.extract to obtain my desired result, however, I have been unsuccessful as follows.</p>
<pre><code>import pandas as pd
import numpy as np
import re


df = pd.DataFrame({'field1':['ab1234','ac1234','qw45', 'c1234b', 'cv'], 
'field2':['ab1234','','rt23','cb1234', '1234dd']})

df['result'] = df[['field1', 'field2']].apply(lambda x: 
x.str.extract(r'(\d{4})', flags = re.IGNORECASE, expand = 
False)).any(axis=1)

print(df)
</code></pre>
<p>The above only returns Boolean results. I'm wondering if the above can be converted to return actual pattern or are there other ways of tackling this problem?</p>
<p>Thank you very much in advance.</p>
<p>EDIT: Sorry I should mention the pattern could be any 4 digits integer not just '1234'. Thus, I want the result column to return these 4 digits.</p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC</p>
<pre><code>df['New']=df.apply(','.join,axis=1).str.extract(r'(\d{4})', expand = 
False).fillna('')
df
   field1  field2   New
0  ab1234  ab1234  1234
1  ac1234          1234
2    qw45    rt23      
3  c1234b  cb1234  1234
4      cv  1234dd  1234
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there, you can do the following.
We can use a <code>for loop</code> to apply <code>str.extract</code> twice to create two temporary columns.</p>
<p>After that create the final column <code>result</code> with <code>fillna</code>.</p>
<pre><code>cols = ['field1', 'field2']
n=1
for col in cols:
    df['result'+str(n)] = df[col].str.extract('([0-9]{4})')
    n += 1

df['result'] = df.result1.fillna(df.result2).fillna('')
df.drop(['result1', 'result2'], inplace=True, axis=1)

print(df)
   field1  field2 result
0  ab1234  ab1234   1234
1  ac1234           1234
2    qw45    rt23       
3  c1234b  cb1234   1234
4      cv  1234dd   1234  
</code></pre>
</div>
<span class="comment-copy">Thanks Wen-Ben, this works!. Just wondering if you could explain how this is working? is it applying str.extract to the whole dataframe? Could I specify particular columns I want to extract from (such as from Field1, Field2 and Field3 only)? Thanks again.</span>
<span class="comment-copy">@nqcthanh yes you can , do with <code>df[['col1','col2'...]].apply(','.join,axis=1).str.extract(r'(\d{4})', expand =  False).fillna('')</code>, also if my answer help , would you like accept ? check mark at the left</span>
<span class="comment-copy">Thanks Wen-Ben it's working great!</span>
<span class="comment-copy">Thanks very much Erfan, this works fine, never thought of using .fillna. Just wondering, if you would still recommend utilising .fillna for more complex conditions such as more than 2 fields to extract or applying multiple patterns? Thanks again Erfan.</span>
<span class="comment-copy">@nqcthanh with regex you can extract multiple patterns, but that would require a more complex regex code. I would suggest to post another question for that.</span>
