<div class="post-text" itemprop="text">
<p>In Python, I can see that the keyword <code>in</code> can be effectively used to check for sub-string like: <code>str1 in str2</code></p>
<p>Is there anyway to do the reversed version of <code>in</code>, like having a (assuming) keyword <code>contain</code> to indicate <code>str2 contain str1</code>? This is for the flow of writing code like:</p>
<pre><code>if str contain "foo":
    return 1
elif str contain "bar":
    return 2
elif str contain "boo":
    return 3
elif str contain "far":
    return 4
else
    return 5
</code></pre>
<p>Personally, the (assuming) above code is more readable than using <code>in</code>:</p>
<pre><code>if "foo" in str:
    return 1
elif "bar" in str:
    return 2
elif "boo" in str:
    return 3
elif "far" in str:
    return 4
else
    return 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In fact, there is a <code>__contains__</code> method that works much like you described:</p>
<pre><code>&gt;&gt;&gt; 'the quick brown fox'.__contains__('quick')
True
</code></pre>
<p>There is also a <a href="https://docs.python.org/3/library/operator.html#operator.contains" rel="nofollow noreferrer"><em>contains</em></a> function without the underscores:</p>
<pre><code>&gt;&gt;&gt; from operator import contains
&gt;&gt;&gt; contains('the quick brown fox', 'quick')
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>str.find</code> method which <em>Return -1 on failure</em>:</p>
<pre><code>if str.find('foo') != -1:
    # do something
</code></pre>
<p><em>Example</em>:</p>
<pre><code>"asdfoo".find('foo')
# 3

"asdfo".find('foo')
# -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The proposed <strong>contain</strong> keyword doesn't add any capability to the language.  Perhaps you find it more readable, but the <strong>in</strong> operator exists in other languages.  Also, note that "contain" is a verb that does not read so well when it's not properly conjugated.</p>
<p>Consider applying your reversal principle to other contexts, such as assignment: to be more readable, we should compute the value on the left, and then give the destination on the right.</p>
</div>
<span class="comment-copy"><code>contains=lambda string,substr:string.find(substr)!=-1</code></span>
<span class="comment-copy">Incidentally, it is called to evaluate <code>in</code>.</span>
<span class="comment-copy">Thank you! Now I can guess that the <code>contain</code> without underscore does not exist. :-D</span>
<span class="comment-copy">@TrungTa Actually there is a <i>contains()</i> function that does not have underscores.  I've amended the answer to show that variant as well.</span>
<span class="comment-copy">Thanks! This is so neat!</span>
<span class="comment-copy">Thank you! Currently, I am writing the code like that, but it is not so intuitive for reading.</span>
<span class="comment-copy">I agree with your first idea, but don't think the second idea is comparable. The first one is about condition checking, then it depends on the way we write condition. The second one is about assignment, then target variable should be written first, for readability.</span>
