<div class="post-text" itemprop="text">
<p>I'm trying to make a little blackjack game, and in a separate file I have called playing_cards.py, it contains "deck" which has the below in it. My question is, how can I do all this without having to have a bunch of if statements (which is still causing problems) and still produce the correct numbers. I'm still a beginner, so any help would be wonderful</p>
<pre><code>deck = ['AH','2H','3H','4H','5H','6H','7H','8H','9H','TH','JH','QH','KH',
    'AD','2D','3D','4D','5D','6D','7D','8D','9D','TD','JD','QD','KD',
    'AS','2S','3S','4S','5S','6S','7S','8S','9S','TS','JS','QS','KS',
    'AC','2C','3C','4C','5C','6C','7C','8C','9C','TC','JC','QC','KC']



import playing_cards


player_hand = []
card = playing_cards.deal_one_card()
player_hand.append(card)
card = playing_cards.deal_one_card()
player_hand.append(card)

dealer_hand = []
card = playing_cards.deal_one_card()
dealer_hand.append(card)
card = playing_cards.deal_one_card()
dealer_hand.append(card)
print(dealer_hand)

if player_hand[0][0] == "A":
    player_hand[0] = 11
    print(player_hand)
elif player_hand[1][0] == "A":
    player_hand[1] = 11
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "2":
    player_hand[0] = 2
    print(player_hand)
elif player_hand[1][0] == "2":
    player_hand[1] = 2
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "3":
    player_hand[0] = 3
    print(player_hand)
elif player_hand[1][0] == "3":
    player_hand[1] = 3
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "4":
    player_hand[0] = 4
    print(player_hand)
elif player_hand[1][0] == "4":
    player_hand[1] = 4
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "5":
    player_hand[0] = 5
    print(player_hand)
elif player_hand[1][0] == "5":
    player_hand[1] = 5
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "6":
    player_hand[0] = 6
    print(player_hand)
elif player_hand[1][0] == "6":
    player_hand[1] = 6
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "7":
    player_hand[0] = 7
    print(player_hand)
elif player_hand[1][0] == "7":
    player_hand[1] = 7
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "8":
    player_hand[0] = 8
    print(player_hand)
elif player_hand[1][0] == "8":
    player_hand[1] = 8
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "9":
    player_hand[0] = 9
    print(player_hand)
elif player_hand[1][0] == "9":
    player_hand[1] = 9
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "T":
    player_hand[0] = 10
    print(player_hand)
elif player_hand[1][0] == "T":
    player_hand[1] = 10
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "J":
    player_hand[0] = 10
    print(player_hand)
elif player_hand[1][0] == "J":
    player_hand[1] = 10
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "Q":
    player_hand[0] = 10
    print(player_hand)
elif player_hand[1][0] == "Q":
    player_hand[1] = 10
    print(player_hand)
else:
    print(player_hand)


if player_hand[0][0] == "K":
    player_hand[0] = 10
    print(player_hand)
elif player_hand[1][0] == "K":
    player_hand[1] = 10
    print(player_hand)
else:
    print(player_hand)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of teaching you about dictionaries (which probably comes in a different lesson), I'll teach you about <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.index#str.index" rel="nofollow noreferrer"><code>str.index()</code></a> (&lt;-- link).</p>
<p>You can use <code>str.index</code>, or <code>str.find</code>, to return an integer value that is the <em>index</em> of the beginning of a substring within a larger string.</p>
<p>One use of that would be to replace all your various <code>if</code> statements, by arranging the card ranks in a single string:</p>
<pre><code>ranks = "..23456789TAJQK"
</code></pre>
<p>Notice that I have carefully built this string, <em>on purpose,</em> with letters where I want them. The first character of the string has index 0: I put a dot there, because I don't ever want a zero. Likewise, the second character of the string has index 1: not something I want. So I put the '2' at index 2, the 3 at index 3, etc. I put the 'T' at index 10, and the 'A' at index 11. After that, I put all the other stuff in no particular order.</p>
<p>Now, let's print out some test data:</p>
<pre><code>print('2', ranks.index('2'))
print('T', ranks.index('T'))
print('A', ranks.index('A'))
print('Q', ranks.index('Q'))
</code></pre>
<p>From that, I get this:</p>
<pre><code>$ python test.py
2 2
T 10
A 11
Q 13
</code></pre>
<p>Which means we're on track, except for the JQK part. I think that's close enough:</p>
<pre><code>rank = ranks.index(player_hand[0][0])

if rank &gt; 11:    # J,Q,K
    rank = 10

player_hand[0] = rank

rank = ranks.index(player_hand[1][0])

if rank &gt; 11:    # J,Q,K
    rank = 10

player_hand[1] = rank
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, I would change your definition of the deck to something like the following, not much more compact, but a lot easier to check that no cards or suits have been missed (and perhaps easier to modify):</p>
<pre><code>suits = ['H', 'D', 'S', 'C']
cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K']
deck = [card + suit for suit in suits for card in cards]
</code></pre>
<p>I'm not totally clear what you are trying to do next, but it seems you deal a card using a <code>deal_one_card()</code> method which you haven't included, and then trying to get the value of the card (10 for '10' or a picture-card, the number for a number-card, and 11 for an ace). I think the easiest way might be to define a dictionary of points:</p>
<pre><code>points_dictionary = {'A': 11, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}
</code></pre>
<p>Then you can look up the points of a particular card, for example:</p>
<pre><code>import random
a_card = random.choice(deck)
print(a_card)
print(points_dictionary[a_card[0]])
</code></pre>
<p>Although obviously your own <code>deal_one_card()</code> method will need to track that a card has been dealt so is no longer in the pack.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a dictioanry, where you have the mapping of values of A, K, Q, J, T and digits. Something like this:</p>
<pre><code>CARD_VALUES = {
    "A" : 11,
    "K" : 10,
    "Q" : 10,
    "J" : 10,
    "T" : 10
}
</code></pre>
<p>You can get the mapping like this,</p>
<pre><code>card = int(CARD_VALUES.get(player_hand[0][0], player_hand[0][0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use something like this:</p>
<pre><code>suits = [ 'C', 'D', 'H', 'S' ]
cards = [ 'A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K' ]
rank_values = { "A": ( 1, 11 ), "2": ( 2, ), "3": ( 3, ), "4": ( 4, ), "5": ( 5, ), "6": ( 6, ), "7": ( 7, ), "8": ( 8, ), "9": ( 9, ), "J": ( 10, ), "Q": 10, "K": 10 }

class Card( object ):
   def __init__( self, card_value ):
      self._card_value = card_value.upper()

   @property
   def suit( self ):
      return self._card_value[ 0 ]

   @property
   def rank( self ):
      return self._card_value[ 1 ]

   @property
   def values( self ):
      return sorted( rank_values[ self.rank ], reverse = True )

def get_deck():
   deck_values = [ card + suit for suit in suits for card in cards ]
   deck = [ Card( value ) for value in deck_values ]
   return deck
</code></pre>
<p>This lets you call <code>get_deck()</code> to retrieve the deck of cards and each card has a <code>values</code> property (accessed as <code>c.values</code> assuming a card <code>c</code>) which returns all of the values the card can hold. This allows you to also handle the case where an Ace is 1-point, not 11 because it would a bust.</p>
</div>
<span class="comment-copy">You can define a dictionary, in which you define the <code>card to result mapping relation</code>, then you can call <code>compare/assign/print function</code> once.</span>
