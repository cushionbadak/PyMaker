<div class="post-text" itemprop="text">
<p>How do you load a compressed grammar file into NLTK? I can load an uncompressed grammar file just fine, with:</p>
<pre><code>import nltk
parser = nltk.load_parser('grammar.fcfg')
</code></pre>
<p>but since my grammar file is nearly 100MB, I want to load the much smaller compressed version, which is only 1MB, but this fails with:</p>
<pre><code>import nltk
parser = nltk.load_parser('grammar.tar.gz')

ValueError: Could not determine format for file:///grammar.tar.gz based on its file extension; use the "format" argument to specify the format explicitly.
</code></pre>
<p>Unfortunately, looking at <code>nltk.data.FORMATS</code> doesn't list any compressed formats.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you can see by examining <a href="https://github.com/nltk/nltk/blob/develop/nltk/parse/util.py#L22" rel="nofollow noreferrer">the source of <code>load_parser</code></a>, it <a href="https://github.com/nltk/nltk/blob/develop/nltk/data.py#L926" rel="nofollow noreferrer">relies</a> on <a href="https://github.com/nltk/nltk/blob/develop/nltk/data.py#L550" rel="nofollow noreferrer"><code>ntlk.data.find</code></a> to open <code>file:///</code> URLs.</p>
<p>That function autodetects GZipped data <a href="https://github.com/nltk/nltk/blob/develop/nltk/data.py#L613" rel="nofollow noreferrer">by checking if the path ends with <code>.gz</code></a> and <a href="https://github.com/nltk/nltk/blob/develop/nltk/data.py#L406" rel="nofollow noreferrer">reads it</a> with <a href="https://docs.python.org/2/library/gzip.html?highlight=gzip#gzip.GzipFile" rel="nofollow noreferrer"><code>gzip.GZipFile</code></a>.</p>
<p><strong>But, for this to work, the data should be packed with <code>gzip</code> directly, not through <code>tar</code> or anything.</strong></p>
</div>
<span class="comment-copy">RTFM the <a href="https://docs.python.org/2/library/zlib.html" rel="nofollow noreferrer"><code>zlib</code> module</a>.</span>
<span class="comment-copy">Or the <a href="https://docs.python.org/3/library/tarfile.html" rel="nofollow noreferrer"><code>tarfile</code> module</a>, which supports unpacking gzipped archives directly.</span>
<span class="comment-copy">If this is UNIX, FIFOs can be used to pipe output from the unpacker without using disk space. Or a file at <code>tmpfs</code> if you have enough memory.</span>
