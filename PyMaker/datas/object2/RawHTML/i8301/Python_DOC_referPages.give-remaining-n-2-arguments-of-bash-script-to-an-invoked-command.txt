<div class="post-text" itemprop="text">
<blockquote>
<p>Give remaining <code>n-2</code> arguments of Bash script to an invoked command</p>
</blockquote>
<p>I have a Bash script that takes arguments <code>&lt;program&gt; &lt;key&gt; &lt;number&gt;...</code>, where the user can supply an arbitrary amount of numbers.</p>
<p>Now, how do I invoke a python script supplying the numbers, e.g, <code>python3 myscript &lt;program&gt; &lt;number&gt;...</code>?</p>
<p>I know of the variable <code>"$@"</code>, which represents all arguments, but in this case I don't want to supply <code>&lt;key&gt;</code>.</p>
<p>Is there some Python-like syntax that lets me do something like this: <code>python3 myscript "$1" "$@[2:]"</code>, or how would I approach this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You were close...</p>
<pre><code>python3 myscript "$1" "${@:3}"
</code></pre>
<p>This would supply the first argument, then arguments 3 and following.</p>
<p>While <code>@</code> is not an array name and rather denotes the list of positional parameters in the current context, array syntax often works.  Element extraction is one example of that.  Of course, one big difference is that expanding the list of all positional parameters is done with <code>"$@"</code>, not with <code>"${@[@]}"</code> as would be the case with an array.</p>
<p>The number of arguments is available as <code>$#</code>.  If you want to know how many arguments there are beyond the second, you could use <code>$(( $# - 2))</code>.  If there are less than 3 arguments, this number will be zero or negative, so make sure to test for this if it can impact your script.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need to make sure that your Python script is ready to handle an arbitrary number of arguments to your script. The very simple way to do this is to make use of <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer">sys.argv</a>. Observe the following example. </p>
<h2>test.py</h2>
<pre><code>import sys


def foo(*args):
    print(*args)


if __name__ == '__main__':
    foo(sys.argv[1:])
</code></pre>
<h2>from your shell</h2>
<pre><code>▶ python test.py 1 2 3 4 5
['1', '2', '3', '4', '5']

▶ python test.py 1 2 3
['1', '2', '3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From a bash script one could use the shift command twice, at that point $@ would contain the values you seek.</p>
<pre><code>#!/bin/bash

shift
shift
echo $@
</code></pre>
</div>
<span class="comment-copy">No, I want to run <code>python3</code> from my Bash script and supply some of the arguments of my Bash script to the Python program, OK?</span>
<span class="comment-copy">Please take a look at: <a href="http://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">How could I count the elements in <code>"${@:3}"</code>? Thanks btw.!</span>
<span class="comment-copy">@Shuzheng  Please se the last paragraph in my updated answer.</span>
<span class="comment-copy">Quick fix: <code>$1</code> is the unwanted key. <code>$0</code> is the script name.</span>
