<div class="post-text" itemprop="text">
<p>I'm going to work with Python 3, mainly interested in Windows.</p>
<p>Example of what I want to happen:</p>
<p>A)</p>
<ul>
<li>User starts my script.</li>
<li>User decides to blacklist the game Dota 2.</li>
<li>User tries to open Dota 2.</li>
<li>Because Dota 2 is on the blacklist, my script runs instead of Dota 2.</li>
<li>After my script is done, Dota 2 either runs or doesn't run, depending on what my script chooses. This will ultimately be controlled by User.</li>
<li>User closes my script.</li>
<li>User tries to open Dota 2.</li>
<li>Dota 2 opens right away without interruptions.</li>
</ul>
<p>B)</p>
<p>Same as above, but for web sites.</p>
<hr/>
<p>The last three lines is to signify that there needs to be a way of turning it on and off. My base assumption is that once I know how to do the first part, the second part will be easy. I still put it in there for clarification.</p>
<p>I haven't really found anything online on where to even start with this. My guess for A) is that it will have to do something with going into the folders where the run file is an overriding it somehow.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're talking about overriding OS behavior, so you'll need to hook into OS features (which Python can, and may already, have bindings for). For Windows specifically, you can use some features like WMI to hook process launches, but the easiest approach is probably to use <a href="https://blog.malwarebytes.com/101/2015/12/an-introduction-to-image-file-execution-options/" rel="nofollow noreferrer">Image File Execution Options</a> (IFEO) to hijack the relevant processes at launch. This is a registry key, so you'd want the <a href="https://docs.python.org/3/library/winreg.html" rel="nofollow noreferrer">winreg</a> module for Python 3.</p>
<p>I've never tried setting a Python script as the target of an IFEO <code>Debugger</code> value, but it can probably be made to work. See <a href="https://stackoverflow.com/questions/2984846/set-image-file-execution-options-will-always-open-the-named-exe-file-as-default">this StackOverflow question</a> for the basics of how IFEO works and what "debuggers" using it are expected to do. In your case, you'd probably have the script check the name of the process that the user tried to run, see if it's currently on the blocklist, and just exit if so; otherwise it would launch the process. If you want it to follow opening and closing a long-running script, you could have that script create a temporary lock file (which will vanish when the last handle to it closes) and have your launched-when-user-invokes-<code>dota2.exe</code> script check for that file.</p>
<p>I'd I recommend asking a separate question (here or on Superuser, depending on whether it's a coding or OS-admin question) if you have problems getting IFEO to do what you want. Do note that it's in HKEY_LOCAL_MACHINE; you'll need to be running as Administrator to make changes there, though only the "control" script would require that (the "debugger" scripts could just run with normal permissions).</p>
</div>
<span class="comment-copy">You'll need to get some deep understand of the operating system in order to be able to do this, as you'll be essentially intercepting the system's own calls. This is most definitely not trivial, and you probably won't be able to do it with just Python, as this program could not run in user mode.</span>
<span class="comment-copy">I guess you will get better answers in Windows OS forums. Ask there how to intercept execution like antivirus software do in order to scan binaries before running them.</span>
<span class="comment-copy">Your idea is neat, but it's going to be extremely difficult to implement. The features you're describing are so similar to a computer virus, so the OS and any AV software will be fighting your script. Anyway, you might have your script checking the list of all running processes. If you see something from the blacklist, zap the process. Still quite sketchy!</span>
<span class="comment-copy">You're getting a lot of comments from people who aren't very familiar with Windows admin, which is actually what you're trying to do (hijacking process launches isn't something a running program can just decide to do, unless that program is the shell being used to launch he processes in the first place; it requires using OS features to override default behavior). Might have been better asked on Superuser, but what you're looking for <i>is</i> possible.</span>
<span class="comment-copy">Thank you for your answers. I will look deeper into this from what I got from them. Why is Superuser preferable?  About the downvotes: Why? Is there something about this site that I'm missing?  Also, should I find forums specifically geared towards development for the individual web browsers for question B)?</span>
<span class="comment-copy">Wow, it looks like I've gotten myself into a bigger project than I originally thought. :)  I will make a question in Superuser then, since that seems to be the popular opinion. I'll keep your answer in mind too, gave me something to think about. From this answer, I can see that there is hope of a solution!  About what kind of question it is: I'm hoping to make this into a software project, so I assume it's coding?</span>
<span class="comment-copy">It's definitely a software project, but the coding isn't the hard part (unless you're new to coding, of course); the hard part is figuring out how to make the OS do what you want. Stuff like "write to the registry", "create a temporary file", "check if a file exists", and "start a process" are all quite simple in a language like Python; it's how you put it all together that gets tricky. If you're new to coding, this is a bit of a dive into the deep end and you'll probably learn as much about Windows and command lines and such as you do about Python and coding, but that's not a bad thing...</span>
<span class="comment-copy">Ok, thank you. So I'll go ask the same question there.</span>
