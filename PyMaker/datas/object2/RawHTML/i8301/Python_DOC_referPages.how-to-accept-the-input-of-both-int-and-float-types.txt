<div class="post-text" itemprop="text">
<p>I am making a currency converter. How do I get python to accept both integer and float?</p>
<p>This is how I did it:</p>
<pre><code>def aud_brl(amount,From,to):
    ER = 0.42108
    if amount == int:
        if From.strip() == 'aud' and to.strip() == 'brl':
            ab = int(amount)/ER
         print(ab)
        elif From.strip() == 'brl' and to.strip() == 'aud':
            ba = int(amount)*ER
         print(ba)
    if amount == float:
        if From.strip() == 'aud' and to.strip() == 'brl':
            ab = float(amount)/ER
         print(ab)
        elif From.strip() == 'brl' and to.strip() == 'aud':
            ba = float(amount)*ER
         print(ba)

def question():
    amount = input("Amount: ")
    From = input("From: ")
    to = input("To: ")

    if From == 'aud' or 'brl' and to == 'aud' or 'brl':
        aud_brl(amount,From,to)

question()
</code></pre>
<p>Simple example of how I did it:</p>
<pre><code>number = input("Enter a number: ")

if number == int:
    print("integer")
if number == float:
    print("float")
</code></pre>
<p>These two don't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm really hoping I'm not completely misunderstanding the question but here I go.</p>
<p>It looks like you just want to make sure the value passed in can be operated upon like a float, regardless of whether the input is <code>3</code> or <code>4.79</code> for example, correct? If that's the case, then just cast the input as a float before operating on it. Here's your modified code:</p>
<pre><code>def aud_brl(amount, From, to):
    ER = 0.42108 
    if From.strip() == 'aud' and to.strip() == 'brl': 
        result = amount/ER 
    elif From.strip() == 'brl' and to.strip() == 'aud': 
        result = amount*ER 

    print(result)

def question(): 
    amount = float(input("Amount: "))
    From = input("From: ") 
    to = input("To: ")

    if (From == 'aud' or From == 'brl') and (to == 'aud' or to == 'brl'): 
        aud_brl(amount, From, to)

question()
</code></pre>
<p>(I made a few changes as well for the sake of neatness, I hope you don't mind &lt;3)</p>
</div>
<div class="post-text" itemprop="text">
<p>this is how you could check the given string and accept <code>int</code> or <code>float</code> (and also cast to it; <code>nb</code> will be an <code>int</code> or a <code>float</code>):</p>
<pre><code>number = input("Enter a number: ")

nb = None
for cast in (int, float):
    try:
        nb = cast(number)
        print(cast)
        break
    except ValueError:
        pass
</code></pre>
<p>but in your case just using float might do the trick (as also string representations of integers can be converted to floats: <code>float('3') -&gt; 3.0</code>):</p>
<pre><code>number = input("Enter a number: ")

nb = None
try:
    nb = float(number)
except ValueError:
    pass
</code></pre>
<p>if <code>nb</code> is <code>None</code> you got something that could not be converted to a <code>float</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the isinstance function, which is built in</p>
<pre><code>if isinstance(num, (int, float)):
    #do stuff
</code></pre>
<p>Also, you should refrain from using reserved keywords for variable names. The keyword <code>from</code> is a reserved keyword in Python</p>
<p>Finally, there is one other error I noticed:</p>
<pre><code>if From == 'aud' or 'brl'
</code></pre>
<p>Should be</p>
<pre><code>if From == 'aud' or From == 'brl'
</code></pre>
<p>Lastly, to clean up the if statements you could theoretically use the list (if you have more currencies in the future, this might be better.</p>
<pre><code>currencies = ['aud', 'brl']     #other currencies possible
if From in currencies and to in currencies:
    #do conversion
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>amount==int</code> doesn't make sense.  <code>input</code> gives us a string.  <code>int</code> (and <code>float</code>) is a function.  A string never equals a function.</p>
<pre><code>In [42]: x=input('test')
test12.23
In [43]: x
Out[43]: '12.23'
In [44]: int(x)
....
ValueError: invalid literal for int() with base 10: '12.23'
In [45]: float(x)
Out[45]: 12.23
</code></pre>
<p><code>float('12.23')</code> returns a <code>float</code> object.  <code>int('12.23')</code> produces an error, because it isn't a valid integer string format.</p>
<p>If the user might give either '12' or '12.23', it is safer to use <code>float(x)</code> to convert it to a number.  The result will be a float.  For many calculations you don't need to worry whether it is a float or integer.  The math is the same.</p>
<p>You can convert between int and floats if needed:</p>
<pre><code>In [45]: float(x)
Out[45]: 12.23
In [46]: float(12)
Out[46]: 12.0
In [47]: int(12.23)
Out[47]: 12
In [48]: round(12.23)
Out[48]: 12
</code></pre>
<p>You can also do <code>instance</code> tests</p>
<pre><code>In [51]: isinstance(12,float)
Out[51]: False
In [52]: isinstance(12.23,float)
Out[52]: True
In [53]: isinstance(12.23,int)
Out[53]: False
In [54]: isinstance(12,int)
Out[54]: True
</code></pre>
<p>But you probably don't need to do any those.</p>
</div>
<span class="comment-copy">I changed your title and headings to lowercase. Please refrain from shouting at us :)</span>
<span class="comment-copy"><code>if type(number) is int</code> But that will always be false, since <code>number</code> will always be a string.</span>
<span class="comment-copy">@juanpa.arrivillaga no it is not. He's using <code>input</code> to read from user, <code>type(numer)</code> is <code>str</code>.</span>
<span class="comment-copy">Just so you know, the line <code>if From == 'aud' or 'brl' and to == 'aud' or 'brl'</code> will always evaluate to <code>True</code>, since <code>'brl'</code> is truthy in both conditions. If you're looking to see whether <code>From</code> is <code>'aud'</code> or <code>'brl'</code>, you need something like this: <code>if From == 'aud' or From == 'brl' ...</code></span>
<span class="comment-copy">Why did the other guy said, "The true Pythonic solution here, of course, would be duck typing and catching an error if a non int/float is passed!"? Can you please explain? I'm new in programming.</span>
<span class="comment-copy">this has nothing to do with duck-typing. i just try to convert a string to a float in a manner that will never crash. one of the python philosophies is <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> as opposed to <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a>. so python coders wil often  <code>try</code> something instead of checking things first. (e.g. if you wanted to convert a <code>str</code> to an <code>int</code> you could check first if the string consists of digits only; that is not a pythonic thing to do).</span>
<span class="comment-copy"><code>isinstance(num, (int, float))</code> can be done directly... and it looks as if OPs input starts with strings.</span>
<span class="comment-copy">@hiroprotagonist The true Pythonic solution here, of course, would be duck typing and catching an error if a non int/float is passed!</span>
<span class="comment-copy">i agree and tried to come up with an answer along these lines...</span>
<span class="comment-copy">How would I be able to convert it, if the currencies are not specified in the if statement?</span>
<span class="comment-copy">@KGarcia you would have to restructure your code significantly for that, which is beyond the scope of this comment, but if you are planning on having multiple currencies being converted, the way you have laid out your function is quite inefficient</span>
