<div class="post-text" itemprop="text">
<p>In Python, there are a number of <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">built-in exceptions</a> that can be thrown by various standard library functions (and of course by other code). A certain exception can potentially be thrown for many reasons, and you may want to find out whether it was thrown for a specific reason.</p>
<p>For example, in Windows, if you try to move a file when it is locked by another process, you are likely to get a <code>PermissionError</code>:</p>
<pre class="lang-none prettyprint-override"><code>PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Path\\to\\the\\file'
</code></pre>
<p>In my case, I want to determine whether the the reason a <code>PermissionError</code> exception is thrown is because a file I try to move is locked, and I currently do that by looking at the error message in the exception that I catch:</p>
<pre><code>try:
    # Move file
    os.rename(source_path, dest_path)

except PermissionError as e:
    if str(e).find('The process cannot access the file because it is being used by another process') != -1:
        # File not unlocked yet; do something, e.g. wait a moment and try again
    else:
        # Exception thrown for some other reason; do something else
</code></pre>
<p>However, to check whether <code>str(e)</code> contains a specific error message as a substring doesn't feel completely safe, as I haven't seen any <a href="https://docs.python.org/3/library/os.html#os.rename" rel="nofollow noreferrer">specification</a> of what message will be assigned to the exception thrown by <code>os.rename</code> when the source file is locked, or what type of exception should be thrown or even if an exception should be thrown at all. So this behavior could change in a future version of Python, or vary between different Python implementations.</p>
<p>So, how can I safely determine whether a <code>PermissionError</code> exception was thrown because of the fact that I tried to access a locked file, if we may assume that a <code>PermissionError</code> exception will be thrown? Or if we may not assume that, how can I safely achieve the same thing that my application currently achieves?</p>
</div>
<div class="post-text" itemprop="text">
<p>Standard python exception uses the C <code>errno</code> code, you can access with <code>e.errno</code>.</p>
<p>On mac/linux, you can see the list of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html" rel="noreferrer">posix errno values</a>.</p>
<p>On windows, you can access an additional error code, provided by the window OS, using <code>e.winerror</code>.  You can then look for the correct code to check with the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms681381(v=vs.85).aspx" rel="noreferrer">documentation from microsoft</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows it will be safe to use the exception string
It will always be 'The process cannot access the file because it is being used by another process'</p>
<p>You can always do</p>
<pre><code>if "The process cannot access the file because it is being used by another process" in str(e):
    #file is locked
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>LÃ¦rne is correct, all you need to do to correctly determine the cause of an error is check against it's <code>errno</code> attribute. </p>
<p>The list of available error symbols is located in the <a href="https://docs.python.org/3.6/library/errno.html#module-errno" rel="nofollow noreferrer"><code>errno</code></a> module which you can import and use by check against the symbols defined in it. A trivial example:</p>
<pre><code>import os, errno

try:
    os.remove(filename)
except OSError as e:
    if e.errno != errno.ENOENT:
        raise
</code></pre>
<p>which re-raises the exception <a href="https://docs.python.org/3.6/library/errno.html#errno.ENOENT" rel="nofollow noreferrer">if no such file/directory exists</a>.</p>
</div>
<span class="comment-copy">What do you mean by "safely"?</span>
<span class="comment-copy">@martineau By "safely" in this case I mean in a way that will not break if I change to another version of Python or to another Python interpreter. I'm not saying the way I'm currently doing it will break, I'm just not sure it won't.</span>
<span class="comment-copy">In that case, the "safest" thing to do would be to catch <code>Exception as e:</code> and print an error message saying on the that the file can't be accessed, along with the <code>str(e)</code>. The future is not guaranteed. The next safest (and most practical) thing to do would be to make it fairly specific and assume the future will be compatible, at least for the foreseeable future. The latter is often the case because language creators/maintainers don't like breaking a lot of existing code.</span>
<span class="comment-copy">besides <code>str(e)</code>, you could look at the actual guts of e.  <code>vars(e)</code>, for example, might show other things than just the human-readable message.  might be something of use in it.  for example, an sqlalchemy exception i was getting had an embedded original exception that I could test for more easily than by parsing the str(e)</span>
<span class="comment-copy">@JLPeyret <code>vars(e)</code> returns an empty dictionary for me (<code>e.__dict__</code> is also an empty dictionary, <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer">obviously</a>). Interesting; I thought the <code>__dict__</code> attribute in an object listed all other attributes in the object, but apparently attributes can be non-writable and <a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="nofollow noreferrer">those are not listed</a>. Furthermore, the attributes in <code>e</code> seem to be implemented as <a href="https://www.programiz.com/python-programming/property" rel="nofollow noreferrer">properties</a>, which I hadn't heard of before. This could be useful.</span>
<span class="comment-copy">Thanks, I used the <code>winerror</code> attribute. Do you know if there is some module that lists the <code>winerror</code> values (that exists not only for 32-bit Python), i.e. in which I can find for example <code>ERROR_SHARING_VIOLATION</code> instead of having to hardcode the corresponding value into my code (i.e. 32 for <code>ERROR_SHARING_VIOLATION</code>)?</span>
<span class="comment-copy">I don't know any official module.  However there are many files on the web listing them, like <a href="https://github.com/SublimeText/Pywin32/blob/master/lib/x32/win32/lib/winerror.py" rel="nofollow noreferrer">this one</a>, you could cut and paste the relevant part in a custom module.</span>
<span class="comment-copy">so much hate (downvoters)</span>
<span class="comment-copy">Thanks. The <code>a in b</code> construct is definitely more convenient than the construct I used.</span>
<span class="comment-copy">Thanks. So the posix <code>errno</code> values are listed in the <a href="https://docs.python.org/3.6/library/errno.html#module-errno" rel="nofollow noreferrer"><code>errno</code></a> module. Is there some module that lists the <code>winerror</code> values too? For pywin32, there <a href="http://bugs.python.org/msg67803" rel="nofollow noreferrer">seems to be a <code>winerror</code> module</a>, but I don't have that, probably because I'm running 64-bit Python.</span>
