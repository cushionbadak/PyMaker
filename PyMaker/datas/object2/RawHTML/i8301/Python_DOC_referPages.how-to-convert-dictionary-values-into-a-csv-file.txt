<div class="post-text" itemprop="text">
<p>I am an absolute beginner in Python. I am doing a textual analysis of greek plays and counting the word frequencies of each word. Because the plays are very long, I am unable to see my full set of data, it only shows the words with the lowest frequencies because there is not enough space in the Python window. I am thinking of converting it to a .csv file. My full code is below: </p>
<pre><code>#read the file as one string and spit the string into a list of separate words
input = open('Aeschylus.txt', 'r')
text = input.read()
wordlist = text.split()

#read file containing stopwords and split the string into a list of separate words
stopwords = open("stopwords .txt", 'r').read().split()

#remove stopwords
wordsFiltered = []

for w in wordlist:
    if w not in stopwords:
        wordsFiltered.append(w)

#create dictionary by counting no of occurences of each word in list
wordfreq = [wordsFiltered.count(x) for x in wordsFiltered]

#create word-frequency pairs and create a dictionary 
dictionary = dict(zip(wordsFiltered,wordfreq))

#sort by decreasing frequency and print
aux = [(dictionary[word], word) for word in dictionary]
aux.sort()
aux.reverse()
for y in aux: print y

import csv


with open('Aeschylus.csv', 'w') as csvfile:
    fieldnames = ['dictionary[word]', 'word']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)


    writer.writeheader()
    writer.writerow({'dictionary[word]': '1', 'word': 'inherited'})
    writer.writerow({'dictionary[word]': '1', 'word': 'inheritance'})
    writer.writerow({'dictionary[word]': '1', 'word': 'inherit'})
</code></pre>
<p>I found the code for the csv on the internet. What I'm hoping to get is the full list of data from the highest to lowest frequency. Using this code I have right now, python seems to be totally ignoring the csv part and just printing the data as if I didn't code for the csv.</p>
<p>Any idea on what I should code to see my intended result? </p>
<p>Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you have a dictionary where the words are keys and their frequencies the values, a <code>DictWriter</code> is ill suited. It is good for sequences of mappings that share some common set of keys, used as the columns of the csv. For example if you had had a list of dicts such as you manually create:</p>
<pre><code>a_list = [{'dictionary[word]': '1', 'word': 'inherited'},
          {'dictionary[word]': '1', 'word': 'inheritance'},
          {'dictionary[word]': '1', 'word': 'inherit'}]
</code></pre>
<p>then a <code>DictWriter</code> would be the tool for the job. But instead you have a single <code>dictionary</code> like:</p>
<pre><code>dictionary = {'inherited': 1,
              'inheritance': 1,
              'inherit': 1,
              ...: ...}
</code></pre>
<p>But, you've already built a sorted list of <code>(freq, word)</code> pairs as <code>aux</code>, which is perfect for writing to csv:</p>
<pre><code>with open('Aeschylus.csv', 'wb') as csvfile:
    header = ['frequency', 'word']
    writer = csv.writer(csvfile)
    writer.writerow(header)
    # Note the plural method name
    writer.writerows(aux)
</code></pre>
<blockquote>
<p>python seems to be totally ignoring the csv part and just printing the data as if I didn't code for the csv.</p>
</blockquote>
<p>sounds rather odd. At least you should've gotten a file <em>Aeschylus.csv</em> containing:</p>
<pre><code>dictionary[word],word
1,inherited
1,inheritance
1,inherit
</code></pre>
<hr/>
<p>Your frequency counting method could also be improved. At the moment</p>
<pre><code>#create dictionary by counting no of occurences of each word in list
wordfreq = [wordsFiltered.count(x) for x in wordsFiltered]
</code></pre>
<p>has to loop through the list <code>wordsFiltered</code> for each word in <code>wordsFiltered</code>, so <em>O(nÂ²)</em>. You could instead iterate through the words in the file, filter, and count as you go. Python has a specialized dictionary for counting hashable objects called <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>:</p>
<pre><code>from __future__ import print_function
from collections import Counter
import csv

# Many ways to go about this, could for example yield from (&lt;gen expr&gt;)
def words(filelike):
    for line in filelike:
        for word in line.split():
            yield word

def remove(iterable, stopwords):
    stopwords = set(stopwords)  # O(1) lookups instead of O(n)
    for word in iterable:
        if word not in stopwords:
            yield word

if __name__ == '__main__':
    with open("stopwords.txt") as f:
        stopwords = f.read().split()

    with open('Aeschylus.txt') as wordfile:
        wordfreq = Counter(remove(words(wordfile), stopwords))
</code></pre>
<p>Then, as before, print the words and their frequencies, beginning from most common:</p>
<pre><code>    for word, freq in wordfreq.most_common():
        print(word, freq)
</code></pre>
<p>And/or write as csv:</p>
<pre><code>    # Since you're using python 2, 'wb' and no newline=''
    with open('Aeschylus.csv', 'wb') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['word', 'freq'])
        # If you want to keep most common order in CSV as well. Otherwise
        # wordfreq.items() would do as well.
        writer.writerows(wordfreq.most_common())
</code></pre>
</div>
<span class="comment-copy">You need to close the file</span>
<span class="comment-copy">What if I wanted to keep to my old code though? I'm really new to this so I am unable to understand you wrote for me - it works perfectly though. I would like understand how, just using the old code I had, I can write the data to csv?</span>
<span class="comment-copy">I apologize for getting carried away. But it still stands that a <code>DictWriter</code> is not a good match for your data. Though you have a dictionary, you're better off writing <code>sorted(dictionary.items(), key=itemgetter(1), reverse=True)</code> with a basic <code>csv.writer</code>. I'll update the answer later.</span>
<span class="comment-copy">Hi, I've tried the edited code with 'writer.writerows(aux)' but Python still doesn't seem to be putting the data into the .csv file. I only get two headers which are 'dictionary[word]' and 'word'. Could it be possibly linked to closing the file as mentioned by the other commentor?</span>
<span class="comment-copy">The with-statement closes the file automatically when the block ends, even in case of an exception being raised. It is odd that you'd only get the header, unless <code>aux</code> is actually empty, but since your for-loop with print works (?) that should not be the case.</span>
<span class="comment-copy">Come to think of it, indentation matters in python. Are you sure you've written <code>writer.writerows(aux)</code> as a part of the with-statement's block? If not, then it is trying to write to the closed file, which on the other hand should throw an exception.</span>
