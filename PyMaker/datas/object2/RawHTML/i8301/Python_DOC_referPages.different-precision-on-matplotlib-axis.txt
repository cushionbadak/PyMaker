<div class="post-text" itemprop="text">
<p>My teacher said that in a graph I must label the axis like <code>0, 0.25, 0.5</code> not <code>0.00,0.25,0.50,...</code>.
I know how to label it like <code>0.00,0.25,0.50</code>  (<code>plt.yticks(np.arange(-1.5,1.5,.25))</code>), however, I don't know how to plot the ticklabels with different precision.</p>
<p>I've tried to do it like </p>
<pre><code>plt.yticks(np.arange(-2,2,1))
plt.yticks(np.arange(-2.25,2.25,1))
plt.yticks(np.arange(-1.5,2.5,1))
</code></pre>
<p>without avail.</p>
</div>
<div class="post-text" itemprop="text">
<p>This was already answered, for example here <a href="https://stackoverflow.com/questions/29188757/matplotlib-specify-format-of-floats-for-tick-lables">Matplotlib: Specify format of floats for tick lables</a>. But you actually want to have another format than used in the referenced question.</p>
<p>So this code gives you your wished precision on the y axis</p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import FormatStrFormatter

fig, ax = plt.subplots()

ax.yaxis.set_major_formatter(FormatStrFormatter('%g'))
ax.yaxis.set_ticks(np.arange(-2, 2, 0.25))

x = np.arange(-1, 1, 0.1)
plt.plot(x, x**2)
plt.show()
</code></pre>
<p>You can define your wished precision in the String that you pass to FormatStrFormatter. In the above case it is "%g" which stands for the general format. This format removes insignificant trailing zeros. You could also pass other formats, like "%.1f" which would be a precision of one decimal place, whereas "%.3f" would be a precision of three decimal places. Those formats are explained in detail <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to set the ticks' positions at multiples of 0.25 you can use a <code>matplotlib.ticker.MultipleLocator(0.25)</code>. You can then format the ticklabels using a <code>FuncFormatter</code> with a function that strips the zeros from the right of the numbers. </p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.ticker

plt.plot([-1.5,0,1.5],[1,3,2])
ax=plt.gca()

f = lambda x,pos: str(x).rstrip('0').rstrip('.')
ax.xaxis.set_major_locator(matplotlib.ticker.MultipleLocator(0.25))
ax.xaxis.set_major_formatter(matplotlib.ticker.FuncFormatter(f))
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/UDRKZ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/UDRKZ.png"/></a></p>
</div>
<span class="comment-copy">Yes, I know he is wrong, but he is the one who corrects, so I must fitt to his rules, even they're not correct</span>
<span class="comment-copy">there's nothing incorrect about what your teacher requested.</span>
<span class="comment-copy">Did something change in the design of matplotlib? The <code>ax</code> in your code is a numpy array, so does not have a <code>yaxis</code>.</span>
