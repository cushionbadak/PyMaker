<div class="post-text" itemprop="text">
<p>I have a CSV file separated by commas. I need to read the file, determine a string that have a certain value(say Blue) in a field (colour) and calculate the percentage of string that fit the criteria.</p>
<p>My code so far is as follows:</p>
<pre><code>myfile = open('3517315a.csv','r')

myfilecount = 0

linecount = 0

firstline = True

for line in myfile:

       if firstline:
        firstline = False
        continue
fields = line.split(',')

    linecount += 1
    count = int(fields[0])
    colour = str(fields[1])
    channels = int(fields[2])
    code = str(fields[3])
    correct = str(fields[4])
    reading = float(fields[5])
</code></pre>
<p>I don't know how I can set the condition and calculate the percentage. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this :) It is more easily configurable than the other answer, and will work on all types of CSV files thanks to the <code>csv</code> module. Tested with Python 3.6.1.</p>
<pre><code>import csv
import io # needed because our file is not really a file

CSVFILE = """name,occupation,birthyear
John,Salesman,1992
James,Intern,1997
Abe,Salesman,1983
Michael,Salesman,1994"""

f = io.StringIO(CSVFILE) # needed because our file is not really a file

# This is the name of the row we want to know about
our_row = 'occupation'
# If we want to limit the output to one value, put it here.
our_value = None # For example, try 'Intern'
# This will hold the total number of rows
row_total = 0

totals = dict()

for row in csv.DictReader(f):
    v = row[our_row]
    # If we've already come across a row with this value before, add 1 to it
    if v in totals:
        totals[v] += 1
    else: # Set this row's total value to 1
        totals[v] = 1

    row_total += 1

for k, v in totals.items():
    if our_value:
        if k != our_value: continue

    print("{}: {:.2f}%".format(k, v/row_total*100))
</code></pre>
<p>Output:</p>
<pre><code>Salesman: 75.00%
Intern: 25.00%
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, there basically are three steps to this:</p>
<ol>
<li>get number of lines in file. You already do this with <code>linecount</code></li>
<li>get number of occurences of your condition. Let's take colour: you already extracted the colour, now you only have to compare it to the value you are looking for, e.g. if colour == "Blue"</li>
<li>Calculate the percentage, which is the <code>occurences / linecount</code></li>
</ol>
<p>It could look like this:</p>
<pre><code>myfile = open('3517315a.csv','r')

myfilecount = 0

linecount = 0
occurences = 0

firstline = True

for line in myfile:

    if firstline:
        firstline = False
        continue

    fields = line.split(',')

    linecount += 1

    count = int(fields[0])
    colour = str(fields[1])
    channels = int(fields[2])
    code = str(fields[3])
    correct = str(fields[4])
    reading = float(fields[5])

    if colour == 'Blue':
        occurences_blue += 1

percentage_blue = occurences_blue / linecount
</code></pre>
<p>This is a very basic example, though. In any case, you probably should use the Python csv library to read the fields from the csv, as suggested in a comment to your post (<a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/2/library/csv.html</a>). I would also expect that there are libraries out there, which could solve your problem more efficiently.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are willing to use third party modules, then I highly suggest that you use Pandas. The code would roughly be:</p>
<pre><code>import pandas as pd

df = pd.read_csv("my_data.csv")
blues = len(df[df.colour == "blue"])
percentage = blues / len(df)
print(f"{percentage}% of the colours are blue")
</code></pre>
</div>
<span class="comment-copy">Perhaps you should use the <code>csv</code> module instead.</span>
<span class="comment-copy">Assuming the CSV has a consistent format throughout, this is a job best handled by pandas. Can you provide a snippet of your data?</span>
<span class="comment-copy">It would be cleaner to use a <code>defaultdict</code> for <code>totals</code></span>
<span class="comment-copy">@silel If you don't mind, why? Would <code>totals = {}</code> have the same disadvantage?</span>
<span class="comment-copy">With a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> you would not need to check whether you already came across a certain value before or not, you would always add 1.</span>
<span class="comment-copy">There is also a special <a href="https://docs.python.org/3.6/library/string.html#format-specification-mini-language" rel="nofollow noreferrer"><code>%</code></a> format specifier (but I'm just quibbling).</span>
