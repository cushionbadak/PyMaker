<div class="post-text" itemprop="text">
<pre><code>$ echo "Your code is bad and you should feel bad" &gt; "&lt;stdin&gt;"
$ python
Python 3.6.0 (default, Dec 28 2016, 19:53:26) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 2 + '2'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    Your code is bad and you should feel bad
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>Why does Python confuse the string <code>"&lt;stdin&gt;"</code> with a file matching that filename?  I didn't want Python trying to just read whatever files from my disk if it encountered an unhandled exception.  </p>
<p>You can also get it with the <code>"&lt;string&gt;"</code> filename:</p>
<pre><code>$ echo "pining for the fjords" &gt; "&lt;string&gt;"
$ python -c 'wat'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
    pining for the fjords
NameError: name 'wat' is not defined
</code></pre>
<p>Is there any way to prevent that behaviour, or is it hardcoded into the REPL? </p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't keep track of what source code corresponds to any compiled bytecode. It might not even read that source code until it needs to print a traceback, for example if a module is loaded from a <code>.pyc</code> file.</p>
<p>When Python needs to print a traceback, that's when it tries to find source code corresponding to all the stack frames involved. The file name and line number you see in the stack trace are all Python has to go on. If it were using the <code>traceback</code> module, the code path would go through a section in <code>linecache</code> that <a href="https://github.com/python/cpython/blob/3.6/Lib/linecache.py#L90" rel="nofollow noreferrer">excludes filenames starting and ending with <code>&lt;</code> and <code>&gt;</code></a>, but the default <code>sys.excepthook</code> doesn't go through that path.</p>
<p>The <a href="https://github.com/python/cpython/blob/3.6/Python/sysmodule.c#L224" rel="nofollow noreferrer">default <code>sys.excepthook</code></a> goes through the native call <code>PyErr_Display</code>, which eventually winds up using <a href="https://github.com/python/cpython/blob/aefa7ebf0ff0f73feee7ab24f4cdcb2014d83ee5/Python/traceback.c#L262" rel="nofollow noreferrer"><code>_Py_DisplaySourceLine</code></a> to display individual source lines. <code>_Py_DisplaySourceLine</code> unconditionally tries to find the file in the current working directory (for some reason - misguided optimization?), then calls <code>_Py_FindSourceFile</code> to search <code>sys.path</code> for a file matching that name if the working directory didn't have it. Usually, it won't find a <code>&lt;stdin&gt;</code> or <code>&lt;string&gt;</code> file, and it'll just skip printing source code when it can't find a file, but if it finds one, it prints from that file.</p>
<p>I initially thought you could prevent this by running Python with the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-I" rel="nofollow noreferrer"><code>-I</code> flag</a>, putting it in isolated mode. One of the effects of isolated mode is to remove the script's directory from <code>sys.path</code>. Experiment proved that this didn't change things, which is when I realized <code>_Py_DisplaySourceLine</code> tries the working directory no matter what.</p>
<p>It would be fairly straightforward to fix this by excluding <code>&lt;&gt;</code> filenames in the native code path, like <code>linecache</code> does. The code that unconditionally searches the current directory for the file should also be changed.</p>
</div>
<span class="comment-copy">Oh, that's a cute bug. You should report it.</span>
<span class="comment-copy">It already special cases <code>filename.startswith("&lt;") and filename.endswith("&gt;")</code> when looking to update the linecache (<code>linecache.updatecache()</code>), so it's not out of the question to add similar to checkcache().</span>
<span class="comment-copy">@pbuck: Huh, so it does. I think this code path doesn't actually go through <code>linecache</code> (any more?), though. <code>'linecache' in sys.modules</code> reports <code>False</code> before and after an uncaught exception when I try it on Python 3.</span>
<span class="comment-copy">Running with <code>-I</code> flag does prevent empty string in <code>sys.path[0]</code>, but that does not change the behavior of traceback reading from disk</span>
<span class="comment-copy">@wim: You seem to be correct. I was expecting that to work, but it looks like I misread a line in <a href="https://github.com/python/cpython/blob/aefa7ebf0ff0f73feee7ab24f4cdcb2014d83ee5/Python/traceback.c#L262" rel="nofollow noreferrer"><code>_Py_DisplaySourceLine</code></a> that tries to find the file in the current working directory without regard to whether the current directory is on the path.</span>
