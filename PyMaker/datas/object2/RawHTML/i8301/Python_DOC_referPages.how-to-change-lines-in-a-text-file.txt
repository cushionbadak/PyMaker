<div class="post-text" itemprop="text">
<p>I am trying to format text in a .txt file. The content is also in an xml, but I copied to a text file and I am trying to for it. It is currently set up like:</p>
<pre class="lang-none prettyprint-override"><code>Pufferfish  Ocean
Anchovy Ocean
Tuna    Ocean
Sardine Ocean
Bream   River
Largemouth_Bass Mountain_Lake
Smallmouth_Bass River
Rainbow_Trout   River
</code></pre>
<p>I am trying to figure out how to open the file and for each line convert it to:</p>
<pre><code>('Pufferfish', 'Ocean')
</code></pre>
<p>Is there a way to do this?</p>
<p>This is what I am trying so far, which I know is wrong, and I am trying to look up the correct syntax and way change 'str':</p>
<pre><code>f1 = open('fish.txt', 'r')
f2 = open('fish.txt.tmp', 'w')

for line in f1:
    f2.write(line.replace(' ', ','))
    for word in line:
        f2.write(word.append('(', [0]))
        f2.write(word.append(')', (len(word))))
f1.close()
f2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A variation to Pedro Lobito's answer using <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> for more precise control of the output string format: </p>
<pre><code>with open('old.txt') as f_in, open("new.txt", "a") as f_out:
    for line in f_in:
        a, b = line.split()
        f_out.write("('{}', '{}')\n".format(a, b))
</code></pre>
<hr/>
<p>Version with comma at the end of each line except the last line:</p>
<pre><code>with open('old.txt') as f_in, open("new.txt", "a") as f_out:
    for n, line in enumerate(f_in):
        a, b = line.split()
        if n &gt; 0:
            f_out.write(",\n")
        f_out.write("('{}', '{}')".format(a, b))
    # do not leave the last line without newline ("\n"):
    f_out.write("\n")
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> does this: <code>list(enumerate(["a", "b", "c"]))</code> returns <code>[(0, "a"), (1, "b"), (2, "c")]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>you may need something like:</p>
<pre><code>with open('input.txt') as input, open("output.txt", "a") as output:
    for line in input:
        output.write(str(tuple(line.split()))+"\n")
</code></pre>
<p>Output:</p>
<pre><code>('Pufferfish', 'Ocean')
('Anchovy', 'Ocean')
('Tuna', 'Ocean')
('Sardine', 'Ocean')
('Bream', 'River')
('Largemouth_Bass', 'Mountain_Lake')
('Smallmouth_Bass', 'River')
('Rainbow_Trout', 'River')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are shorter ways of writing it, but here is one way to solve your problem of taking a simple text file and writing as you asked. Save your text file as something like <strong>ocean.txt</strong></p>
<pre><code>output = ""
with open("ocean.txt" ) as f:
    for line in f:
        line.strip()
        line_fmt = ",".join( '"' + item + '"' for item in line.split())
        output +=  ( "({})".format( line_fmt ) ) + "\n"

print(output)
# To save as a file:
with open('formatted.txt', 'w') as outfile:
    outfile.write( output)
</code></pre>
<p>This opens a text file, and reads in each line. Then it strips off the newline characters. 
Then it splits the line apart, and adds " + item + ". Then it take this word in quotes, and joines all of them together with a comma </p>
<p><strong>",".join(</strong></p>
<p>Last, it adds this string to the overall output, and prints it out at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the most important tidbit you should learn from this exercise is: an <code>str</code> object does not have any method like <code>append()</code> or <code>insert()</code> or the like. This is because <strong><code>str</code> objects- strings- are immutable objects</strong> in Python. You <strong><em>cannot CHANGE</em></strong> a string. You can only use it to make another <em>new</em> string (and throw away the old one). </p>
<p>Since your file format looks like the first space only appears at the locations where you want your comma inserted, you could use the <code>replace()</code> method like you are trying to do, like so: </p>
<pre><code>line = line.replace(' ', ', ', 1)
</code></pre>
<p>Note that the <code>replace()</code> method on a string <strong>does not</strong> modify the original string; instead, it returns a <em>new</em> string. That is why you have to use the <code>line =</code> part at the beginning of the line, thereby replacing the old string. </p>
<p>The third argument- the number 1- at the end makes sure that only the first space in the line is affected. If there are multiple spaces or any hanging spaces at the end, they will not be replaced. </p>
</div>
<span class="comment-copy">What did you try and what doesn't work?</span>
<span class="comment-copy">Are all of the words in a single line or different lines?</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/3277503/how-do-i-read-a-file-line-by-line-into-a-list">this</a>, while it may or may not give you a ready made solution to your issue, it will certainly teach how to (and how not to) read a file and put the contents into a container. If all your elements are on the same line, you'd just need to add a call to <code>split</code> and convert the lists to tuples, if you so wish.</span>
<span class="comment-copy">There are two words per line, such as "Pufferfish	Ocean". I am trying to write something, and I will upload it. But it has been unsuccessful so far.</span>
<span class="comment-copy">Is there a way to add a comma to the end of each line except the last? Could you do: <code>new_file.write("('{}', '{}', ',')\n".format(a, b, c))</code>?</span>
<span class="comment-copy">Add comma to the end of each line except last? Sometimes it is better to add comma <i>before</i> the line :) <code>",\n('{}', '{}')".format(a, b)</code></span>
<span class="comment-copy">Of course there would be a line only with a comma at the beginning... Can be fixed with some <code>if</code>.</span>
<span class="comment-copy">That's clever, worked better than what I was trying to do with it just now. That first one can always be deleted manually in no time. I'll see what I can do with an 'if' statement about that though. Thanks, Messa!</span>
<span class="comment-copy">@Babeeshka I've updated the answer with code example</span>
<span class="comment-copy">your forgot to change <code>new_file</code> to <code>output</code></span>
<span class="comment-copy">corrected, tks!</span>
<span class="comment-copy">Worked like a charm, thanks Pedro!</span>
<span class="comment-copy">You're very welcome @Babeeshka</span>
