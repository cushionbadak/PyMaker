<div class="post-text" itemprop="text">
<p>I have a code where I extract bigrams from a large corpus, and concatenate/merge them to get unigrams. 'may', 'be' --&gt; maybe. The corpus contains, of course, a lot of punctuations, but I also discovered that it contains other characters such as emojis... My plan was to put punctuations in a list, and if those characters are not in a line, print the line. Maybe I should change my approach and only print the lines ONLY containing letters and no other characters, since I don't know what kinds of characters are in the corpus. How can this be done? I do need to keep these other characters for the first part of the code, so that bigrams that don't actually exist are printed. The last lines of my code are at the moment:</p>
<pre><code>    counted = collections.Counter(grams)
    for gram, count in sorted(counted.items()):
        s = ''
        print (s.join(gram))
</code></pre>
<p>And the output I get is:</p>
<pre><code>   !aku
   !bet
   !brå
   !båda
</code></pre>
<p>These lines won't be of any use for me... Would really appreciate some help! :) </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to check that each string contains only letters you can probably use the <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow noreferrer"><code>isalpha()</code> method</a>.</p>
<pre><code>&gt;&gt;&gt; '!båda'.isalpha()
False
&gt;&gt;&gt; 'båda'.isalpha()
True
</code></pre>
<p>As you can see from the example, this method should recognize any unicode letter, not just ascii.</p>
</div>
<div class="post-text" itemprop="text">
<p>To filter out strings that contain a non-letter character, the code can check for the existence of non-letter character in each string:</p>
<pre><code># coding=utf-8

import string
import unicodedata

source_strings = [u'aku', u'bet', u'brå', u'båda', u'!båda']

valid_chars = (set(string.ascii_letters))

valid_strings = [s for s in source_strings if 
                 set(unicodedata.normalize('NFKD', s).encode('ascii', 'ignore')) &lt;= valid_chars]
# valid_strings == [u'aku', u'bet', u'brå', u'båda']
# "båda" was not included.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3.5/library/unicodedata.html" rel="nofollow noreferrer">unicodedata module</a> to classify the characters:</p>
<pre><code>import unicodedata

unigram= ''.join(gram)
if all(unicodedata.category(char)=='Ll' for char in unigram):
    print(unigram)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to remove from your lines only some characters, then you can filter with an easy replace your line before edit it:</p>
<pre><code>sourceList = ['!aku', '!bet', '!brå', '!båda']
newList = []
for word in sourceList:
    for special in ['!','&amp;','å']:
        word = word.replace(special,'') 
    newList.append(word)
</code></pre>
<p>Then you can do what is needed for your bigram exercise. Hope this help.</p>
<p>Second query: in case you have lots of characters then on your string you can use always the isalpha():</p>
<pre><code>sourceList = ['!aku', '!bet', 'nor mal alpha', '!brå', '!båda']
newList = [word for word in sourceList if word.isalpha()]
</code></pre>
<p>In this case you will only check for characters. Hope this clarify second query.</p>
</div>
<span class="comment-copy">Thank you! I used this with if True: print.</span>
<span class="comment-copy">Thanks! The thing is it's a Swedish text so I need to keep å, ä, ö. Makes it a bit more complicated, or can I write the whole alphabet as valid_chars?</span>
<span class="comment-copy">What about <code>if set(s) &lt;= valid_chars</code>?</span>
<span class="comment-copy">@PeterWood, yap, that's the way it should be written :) Thanks, edited.</span>
<span class="comment-copy">@S.H, it can be done by adding all the alphabet into <code>valid_chars</code>, or by removing the accents and evaluating the same condition on <code>ascii_letters</code>. I've edited the solution to reflect the second approach. It assumes python 2.7.</span>
<span class="comment-copy"><code>newList = [word for word in sourceList if word.isalpha()]</code></span>
<span class="comment-copy">Or <code>newList = filter(str.isalpha, sourceList)</code></span>
<span class="comment-copy">I haven't used list comprehension, but it is very a good example for this query :-) Have a nice day!</span>
