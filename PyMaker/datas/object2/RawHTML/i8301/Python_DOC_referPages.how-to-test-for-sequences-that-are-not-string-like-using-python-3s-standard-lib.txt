<div class="post-text" itemprop="text">
<p>For some time, Python has had <a href="https://docs.python.org/3/library/abc.html" rel="noreferrer">Abstract Base Classes</a> (proposed orignally in <a href="https://www.python.org/dev/peps/pep-3119/" rel="noreferrer">PEP 3119</a>) that, especially for container types, make it easier to write code that generalizes across custom types. For example,</p>
<pre><code>from collections.abc import Sequence, Set

if isinstance(x, Sequence):
    # Handle lists, tuples, or custom objects that behave like lists
elif isinstance(x, Set):
    # Handle anything that behaves like a set
</code></pre>
<p>One of the ‘gotchas’ that’s tripped me up a few times is that <code>str</code>, <code>bytes</code>, and <code>bytearray</code> are all considered <code>Sequence</code>s, in addition to more obviously list-like objects:</p>
<pre><code>from collections.abc import ByteString, Sequence

s = 'hello'
b = b'hello'
ba = bytearray(b'hello')
lst = [0, 1, 2]
t = (0, 1, 2)

islistlike = lambda x: isinstance(x, Sequence)

list(map(islistlike, [s, b, ba, lst, t])) # -&gt; [True, True, True, True, True]
</code></pre>
<p>This certainly makes sense: usually these three types behave just like lists or tuples of characters (or bytes). However, it seems like a pretty common use case to ask, is this object <code>x</code> both list-like and not string-like? The fix is straightforward:</p>
<pre><code>islistlike = lambda x: isinstance(x, Sequence) and not isinstance(x, (str, ByteString))

list(map(islistlike, [s, b, ba, lst, t])) # -&gt; [False, False, False, True, True]
</code></pre>
<p>But this seems like it would be a common enough pattern that I wonder if I'm missing something in the standard library.</p>
<ul>
<li>Is there any <code>abc</code> in Python's standard library such that <code>islistlike = lambda x: isinstance(x, abc)</code> will behave like the last example above?</li>
<li>Is there any design discussion around <code>Sequence</code> vs string-like containers somewhere? (I haven't found anything related to this in the standard library documentation or PEP 3119.)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>No, there is nothing in the standard library to easily distinguish between <code>str</code> and <code>bytes</code>-like sequences vs other sequence types.  If this is common in your code-base then you may want to roll your own.</p>
</div>
<span class="comment-copy">1. Not as far as I'm aware. 2. As you note, the <i>"string-like containers"</i> <i>are</i> sequences, of single-character strings/bytes (<code>ByteString</code> inherits <code>Sequence</code>, even), so <i>"vs"</i> doesn't really make sense. In many cases a string would be considered a perfectly valid argument to a function or method that takes a sequence, so you'll have to be explicit when that is not the case.</span>
<span class="comment-copy">@jonrsharpe thanks for the comments! I'd argue that "<i>vs</i>" could be appropriate, depending on the situation. Often, I'm thinking of strings (bytes, etc) as single atomic data points, and I want to know, am I dealing with a list-like container of string-like items, or am I dealing with a single string-like item. One place this comes up is using a recursive function to flatten a nested dictionary, for example — inside the recursive function you'd like to dispatch on the type of the item.</span>
