<div class="post-text" itemprop="text">
<p>I want to insert sum of first 7 elements after 7th element, sum of next 7 elements after another 7 elements and like wise.</p>
<pre><code>a1_tr = [21.1, 10.5, 6.31, 21.1, 6.31, 6.3, 10.4, 17.1, 7.61, 17.2, 7.6, 15.4, 8.54, 8.53, 21.1, 9.47, 7.01, 9.47, 7.01, 6.98, 21.1, 8.34, 16.7, 16.7, 8.34, 15.3, 8.28, 8.39, 9.83, 20.4, 6.77, 6.78, 21.8, 9.69, 6.78, 7.73, 16.7, 8.33, 8.34, 7.74, 16.7, 16.7, 8.2, 16.5, 8.23, 16.4, 8.18, 8.2, 16.5, 21.1, 21.1, 21.1, 21.1, 21.1, 21.1, 21.1]
len(a1_tr) = 56
</code></pre>
<p>I want to add 8 elements in this list such that the length is 64.</p>
<p>This is the list of elements which has sum of 7 elements from above list:</p>
<pre><code>trsumlist = [82.02000000000001, 81.97999999999999, 82.13999999999999, 82.05, 82.05, 82.24, 82.21, 147.7]
</code></pre>
<p>Here is what I tried:</p>
<pre><code>i = 1
x = 0
&gt;&gt;&gt; while i &lt;= len(a1_tr):
     a1_tr.insert(i, trsumlist[x])
     x = x+1
     i += 8

&gt;&gt;&gt; a1_tr
[21.1, 10.5, 6.31, 21.1, 6.31, 6.3, 10.4, 17.1, 7.61, 17.2, 7.6, 15.4, 8.54, 8.53, 21.1, 9.47, 7.01, 9.47, 7.01, 6.98, 21.1, 8.34, 16.7, 16.7, 8.34, 15.3, 8.28, 8.39, 9.83, 20.4, 6.77, 6.78, 21.8, 9.69, 6.78, 7.73, 16.7, 8.33, 8.34, 7.74, 16.7, 16.7, 8.2, 16.5, 8.23, 16.4, 8.18, 8.2, 16.5, 21.1, 21.1, 21.1, 21.1, 21.1, 21.1, 21.1]

&gt;&gt;&gt; len(a1_tr)
56
</code></pre>
<p>This is not inserting any element after 7th element, can someone suggest me some other way to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The most obvious way is to just iterate over the list, and keep a running total. Then, after every seventh element, add the total.</p>
<pre><code>a1_tr = [21.1, 10.5, 6.31, 21.1, 6.31, 6.3, 10.4, 17.1, 7.61, 17.2, 7.6, 15.4, 8.54, 8.53, 21.1, 9.47, 7.01, 9.47,
         7.01, 6.98, 21.1, 8.34, 16.7, 16.7, 8.34, 15.3, 8.28, 8.39, 9.83, 20.4, 6.77, 6.78, 21.8, 9.69, 6.78, 7.73,
         16.7, 8.33, 8.34, 7.74, 16.7, 16.7, 8.2, 16.5, 8.23, 16.4, 8.18, 8.2, 16.5, 21.1, 21.1, 21.1, 21.1, 21.1,
         21.1, 21.1]

idx = 0
sum_ = 0
new = list()
for element in a1_tr:
    idx += 1
    sum_ += element
    new.append(element)
    if idx == 7:
        new.append(sum_)
        sum_ = 0
        idx = 0

print(new)
</code></pre>
<p>More succinctly:</p>
<pre><code>a1_tr = [21.1, 10.5, 6.31, 21.1, 6.31, 6.3, 10.4, 17.1, 7.61, 17.2, 7.6, 15.4, 8.54, 8.53, 21.1, 9.47, 7.01, 9.47,
         7.01, 6.98, 21.1, 8.34, 16.7, 16.7, 8.34, 15.3, 8.28, 8.39, 9.83, 20.4, 6.77, 6.78, 21.8, 9.69, 6.78, 7.73,
         16.7, 8.33, 8.34, 7.74, 16.7, 16.7, 8.2, 16.5, 8.23, 16.4, 8.18, 8.2, 16.5, 21.1, 21.1, 21.1, 21.1, 21.1,
         21.1, 21.1]

n = 7
chunks = [a1_tr[idx:idx+n] + [sum(a1_tr[idx:idx+n])] for idx in range(0, len(a1_tr), n)]
new = [x for y in chunks for x in y]
print(new)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can group the items into sevens and then append the <code>sum</code> in a <code>lambda</code> using <code>map</code>:</p>
<pre><code>it = iter(a1_tr)
r = [i for x in map(lambda *x: x+(sum(x),), *[it]*7) for i in x] 
print(r)
</code></pre>
<p>Or use the more verbose <code>itertools.groupby</code> for grouping and then take the sum of each group:</p>
<pre><code>from itertools import groupby, count

c = count()
r = []
for _, g in groupby(a1_tr, lambda _: next(c)//7):
    g = list(g)
    g.append(sum(g))
    r.extend(g)
print(r)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using just one list comprehension?</p>
<pre><code>In [38]: res = []

In [39]: temp = [res.append(el) if (idx+1)%7 != 0 else res.extend([el, sum(a1_tr[idx-6:idx+1])]) for idx, el in enumerate(a1_tr)]

In [40]: res
Out[40]: 
[21.1,
 10.5,
 6.31,
 21.1,
 6.31,
 6.3,
 10.4,
 82.02000000000001,
 17.1,
 7.61,
 17.2,
 7.6,
 15.4,
 8.54,
 8.53,
 81.97999999999999,
 21.1,
 9.47,
 7.01,
 9.47,
 7.01,
 6.98,
 21.1,
 82.13999999999999,
 8.34,
 16.7,
 16.7,
 8.34,
 15.3,
 8.28,
 8.39,
 82.05,
 9.83,
 20.4,
 6.77,
 6.78,
 21.8,
 9.69,
 6.78,
 82.05,
 7.73,
 16.7,
 8.33,
 8.34,
 7.74,
 16.7,
 16.7,
 82.24,
 8.2,
 16.5,
 8.23,
 16.4,
 8.18,
 8.2,
 16.5,
 82.21,
 21.1,
 21.1,
 21.1,
 21.1,
 21.1,
 21.1,
 21.1,
 147.7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is another way of doing it, using a combination of <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">islice</a> and <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">iter</a></p>
<pre><code>new = []
it = iter(a1_tr)
take = list(islice(it,7)) # take the first 7 elements
while take: #while there is something do
    new += take
    new.append( sum(take) )
    take = list(islice(it,7)) # take the next 7 elements
print(new)
</code></pre>
</div>
<span class="comment-copy">Break it into lists of 7 numbers, append the sums, then rejoin the lists.</span>
<span class="comment-copy">Thanks for the suggestions!</span>
<span class="comment-copy">It worked for me.</span>
<span class="comment-copy">What is np here?</span>
<span class="comment-copy"><code>import numpy as np</code></span>
<span class="comment-copy">(y) for noticing the problem you had with the previous code. I have to admit I didn't found (yet?) a solution for passing TWO elements to the list in a list comprehension and you don't too and therefore must go for <code>.append()</code> <code>.extend()</code>. Is there really no chance to <code>yield</code> two elements in a list comprehension in one loop cycle? Maybe it is possible to create an additional 'loop' cycle from within the list comprehension?</span>
