<div class="post-text" itemprop="text">
<p>I have been meeting a problem when I inherit classes in Python.</p>
<p>I have 3 classes that contains test cases and a global variable is called <code>my_condition</code>.</p>
<pre><code>global my_condition = 1

class mdl_test_case:
    def test_mdl_1():
        print "Testing MDL"

class feac_test_case:
    def test_feac_1():
        print "Testing FEAC"

class all_test_case():
    def test_common_1():
        print "Testing Common"
</code></pre>
<p>Now in the class <code>all_test_case</code>, I want to inherit class <code>mdl_test_case</code> or <code>feac_test_case</code> depending on the value of the variable <code>my_condition</code>. </p>
<p>Detail are below</p>
<ul>
<li>If I set <code>my_condition = 1</code> and call the class <code>all_test_case</code>. I expect to inherit the class <code>mdl_test_case</code></li>
<li>And vice versa, if I set <code>my_condition = 2</code> and call the class <code>all_test_case</code>. I expect to inherit the class <code>feac_test_case</code></li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li>The varaible <code>my_condition</code> can change after each time calling the class <code>all_test_case</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can add updateClass function as follows:</p>
<pre><code>class mdl_test_case:
    def test_mdl_1(self):
        print "Testing MDL"

class feac_test_case:
    def test_feac_1(self):
        print "Testing FEAC"

def updateClass(my_condition):
    global all_test_case
    if my_condition == 1:
        class all_test_case(mdl_test_case):
            def test_common_1(self):
                print "Testing Common"
    elif my_condition == 2:
        class all_test_case(feac_test_case):
            def test_common_1(self):
                print "Testing Common"
</code></pre>
<p>Now <code>all_test_case</code> will inherit from the class based on <code>my_condition</code></p>
<pre><code>updateClass(1)
ss = all_test_case()
ss.test_mdl_1()

updateClass(2)
ss = all_test_case()
ss.test_feac_1()  

# prints 
# Testing MDL
# Testing FEAC
</code></pre>
</div>
<span class="comment-copy">Why not use the <code>unittest</code> framework and the <a href="https://docs.python.org/3/library/unittest.html#unittest.skip" rel="nofollow noreferrer">skipping decorators</a>? That way you don't have to dynamically alter the inheritance tree (which is really not needed).</span>
<span class="comment-copy">If i do like that it will be slow in running time due to filter and skipping. I have about 300 classes and 20000 test cases, so filtering and skipping is not a good solution for me.</span>
<span class="comment-copy">Thanks for your suggestions but i have many variables like "my_condition" and many classes. So do as you suggested will make our code is very complicated and out of control. Maybe i need a better solution to resolve this case.</span>
