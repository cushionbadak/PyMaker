<div class="post-text" itemprop="text">
<p>In Python, how do you find what UTC time offset the computer is set to? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>gmtime()</code> will return the UTC time and <code>localtime()</code> will return the local time so subtracting the two should give you the utc offset.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/time.html#time.timezone" rel="noreferrer">time.timezone</a>:</p>
<pre><code>import time

print -time.timezone
</code></pre>
<p>It prints UTC offset in seconds (to take into account Daylight Saving Time (DST) see <a href="http://docs.python.org/library/time.html#time.altzone" rel="noreferrer">time.altzone</a>:</p>
<pre><code>is_dst = time.daylight and time.localtime().tm_isdst &gt; 0
utc_offset = - (time.altzone if is_dst else time.timezone)
</code></pre>
<p>where utc offset is defined via: "To get local time, add utc offset to utc time."</p>
<p>In Python 3.3+ there is <a href="http://docs.python.org/3/library/time.html#time.struct_time" rel="noreferrer"><code>tm_gmtoff</code> attribute</a> if underlying C library supports it:</p>
<pre><code>utc_offset = time.localtime().tm_gmtoff
</code></pre>
<p>Note: <code>time.daylight</code> may give a wrong result in <a href="http://bugs.python.org/issue1647654" rel="noreferrer">some edge cases</a>.</p>
<p><code>tm_gmtoff</code> is used automatically by datetime if it is available on Python 3.3+:</p>
<pre><code>from datetime import datetime, timedelta, timezone

d = datetime.now(timezone.utc).astimezone()
utc_offset = d.utcoffset() // timedelta(seconds=1)
</code></pre>
<p>To get the current UTC offset in a way that workarounds the <code>time.daylight</code> issue and that works even if <code>tm_gmtoff</code> is not available, <a href="https://stackoverflow.com/a/3168139/4279">@jts's suggestion</a> to substruct the local and UTC time can be used:</p>
<pre><code>import time
from datetime import datetime

ts = time.time()
utc_offset = (datetime.fromtimestamp(ts) -
              datetime.utcfromtimestamp(ts)).total_seconds()
</code></pre>
<p>To get UTC offset for past/future dates, <code>pytz</code> timezones could be used:</p>
<pre><code>from datetime import datetime
from tzlocal import get_localzone # $ pip install tzlocal

tz = get_localzone() # local timezone 
d = datetime.now(tz) # or some other local date 
utc_offset = d.utcoffset().total_seconds()
</code></pre>
<p>It works during DST transitions, it works for past/future dates even if the local timezone had different UTC offset at the time e.g., Europe/Moscow timezone in 2010-2015 period.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like:</p>
<pre><code>&gt;&gt;&gt; strftime('%z')
'-0700'
</code></pre>
<p>I tried JTS' answer first, but it gave me the wrong result.  I'm in -0700 now, but it was saying I was in -0800.  But I had to do some conversion before I could get something I could subtract, so maybe the answer was more incomplete than incorrect.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>hours_delta = (time.mktime(time.localtime()) - time.mktime(time.gmtime())) / 60 / 60
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Create a Unix Timestamp with UTC Corrected Timezone</h1>
<p>This simple function will make it easy for you to get the current time from a MySQL/PostgreSQL database <code>date</code> object.</p>
<pre><code>def timestamp(date='2018-05-01'):
    return int(time.mktime(
        datetime.datetime.strptime( date, "%Y-%m-%d" ).timetuple()
    )) + int(time.strftime('%z')) * 6 * 6
</code></pre>
<h3>Example Output</h3>
<pre><code>&gt;&gt;&gt; timestamp('2018-05-01')
1525132800
&gt;&gt;&gt; timestamp('2018-06-01')
1527811200
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is some python3 code with just datetime and time as imports.  HTH</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; def date2iso(thedate):
...     strdate = thedate.strftime("%Y-%m-%dT%H:%M:%S")
...     minute = (time.localtime().tm_gmtoff / 60) % 60
...     hour = ((time.localtime().tm_gmtoff / 60) - minute) / 60
...     utcoffset = "%.2d%.2d" %(hour, minute)
...     if utcoffset[0] != '-':
...         utcoffset = '+' + utcoffset
...     return strdate + utcoffset
... 
&gt;&gt;&gt; date2iso(datetime.fromtimestamp(time.time()))
'2015-04-06T23:56:30-0400'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works for me:</p>
<pre><code>if time.daylight &gt; 0:
        return time.altzone
    else:
        return time.timezone
</code></pre>
</div>
<span class="comment-copy">Brilliant! I need to learn to think simple :)</span>
<span class="comment-copy">This is some elegant simplicity right here.</span>
<span class="comment-copy">Subtracting them gives <code>TypeError: unsupported operand type(s) for -: 'time.struct_time' and 'time.struct_time'</code>. What did you really mean?</span>
<span class="comment-copy">rakslice, try      calendar.timegm(time.gmtime()) - calendar.timegm(time.localtime()))</span>
<span class="comment-copy">@JasonTyler: to avoid races: <a href="https://mail.python.org/pipermail/datetime-sig/2015-September/000955.html" rel="nofollow noreferrer"><code>t = localtime(); timegm(t) - timegm(gmtime(mktime(t)))</code></a></span>
<span class="comment-copy">This is nice and clean.</span>
<span class="comment-copy">Super helpful. Thanks, J.F.</span>
<span class="comment-copy">Note that <code>total_seconds()</code> is available only in Python 3.2+.</span>
<span class="comment-copy">@mattst <code>total_seconds()</code> is available in Python 2.7 and <a href="http://stackoverflow.com/a/8778548">it is easy to emulate it on earlier Python versions</a></span>
<span class="comment-copy">@RayLuo it depends on what you mean exactly. Here's an <a href="https://stackoverflow.com/q/4563272/4279">implementation for utc2local</a></span>
<span class="comment-copy"><code>'%z'</code>  is not supported by Python (it may work on some systems where you likely could use <code>time.localtime().tm_gmtoff</code> instead, to get the utc offset as a number, not string). The result (of <code>'%z'</code>) should be identical with @jts' answer. Include your code if you think otherwise.</span>
<span class="comment-copy">import time  time0 = time.time() utc_time = time.mktime(time.gmtime(time0)) local_time = time.mktime(time.localtime(time0)) offset = local_time - utc_time print(offset / (60 * 60)) Gives -8.</span>
<span class="comment-copy">1. don't put the code in the comments, update your answer instead 2. it is incorrect to use mktime() here, use <code>calendar.timegm()</code> or <code>datetime()</code> to find the difference</span>
<span class="comment-copy">it is incorrect. Notice: <a href="http://stackoverflow.com/a/3168394/4279"><code>time.localtime().tm_isdst &gt; 0</code> in a similar code in my answer</a></span>
<span class="comment-copy">Sorry, your post is so long and complete that I do not have understood that is the same answer. My post is surely a shorter version of the same solution.</span>
<span class="comment-copy">no, the code is wrong. <code>time.daylight</code> does not say whether the summer time is right now. It says that the local time may have DST. That is why you have to call <code>time.localtime().tm_isdst</code></span>
