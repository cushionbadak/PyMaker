<div class="post-text" itemprop="text">
<p>I have a few python scripts, and each one of them consist of multiple functions. I was wondering if it is better (meaning faster, and cleaner) to run the function right after the function is created, or to create all of the functions, and then run them in order at the end of the script. when I say "run them" I mean calling myfunction() after the function is over, or waiting for the end of the script and calling something like:</p>
<pre><code>myFunction()
myFunction2()
myFunction3()
</code></pre>
<p>I'll add a little more detail. I have 4 scripts, each of them consist of functions that must be used from other scripts. for example I have one script that, grabs a users login information and logs them into a website, cancels their account, and then returns their data from said site. then I have a scrip that will resume their account, but in order to do so I need to use the login function from the previous script. So I was wondering if, since I am using each function in multiple scripts if it was more efficient to call them all at the end using a "<strong>name</strong>==<strong>main</strong>" or to just call them as I create them. </p>
</div>
<div class="post-text" itemprop="text">
<p>It actually depends on your need and programming practices, so none of them is better over other
If you want to keep your code clean, I would suggest that keep all the similar functions in a class then import that class in another class where you can call the function on the object/ class</p>
<p>Example </p>
<blockquote>
<p>File : user.py</p>
</blockquote>
<pre><code>class Essential(object):
    def init(self, name):
        self.name = name
    def getName(self):
        return self.name
</code></pre>
<blockquote>
<p>File : main.py (here we will actually run the app/ entry-point for the app)</p>
</blockquote>
<pre><code>from user import Essential
if __name__=='__main__':
    obj = Essential('John')
    name = obj.getName()
    print(name)
</code></pre>
<p>This will keep everything bit modular and easy to manage both physically and logically</p>
</div>
<span class="comment-copy">There's no real "better". You call functions in in a specific order and at a specific place to accomplish your task. This is not a design issue.</span>
<span class="comment-copy">If you run a function right away, why is it function then?</span>
<span class="comment-copy">@Klaus D. because I have multiple scripts that work to accomplish one thing, and I need them to be accessible from other scripts. and to me, it seems like it is faster to run the function right after I make it instead of at the end.</span>
<span class="comment-copy">To each his own, but I think Its better to call them all together at the end where people expect the calls should be. In fact, they should be called within an <code>if __name__=="__main__:</code> condition  - see <a href="https://docs.python.org/3/library/__main__.html#module-__main__" rel="nofollow noreferrer">Top-level script environment</a></span>
<span class="comment-copy">If your script is something you call from the command line, you'll have one entry point function and that will be under the <code>__name__</code> import guard. If your script is a library which other scripts will call, there won't be any top level invocations in any functions. Just a bunch of definitions. In your specific case, I think it's a script so putting all the invocations in a single function and then calling that under the import guard sounds like the right thing to do.</span>
<span class="comment-copy">I guess this is why we should be careful about opinions - flame wars ensue - but, ..., yuck. A <code>getter</code> like <code>getName</code> for no reason? Putting things into classes just to hide them one more namespace deep? This would not pass my code review!</span>
<span class="comment-copy">@tdelaney I just presented a simple example and not submitting a pull request to you for review</span>
