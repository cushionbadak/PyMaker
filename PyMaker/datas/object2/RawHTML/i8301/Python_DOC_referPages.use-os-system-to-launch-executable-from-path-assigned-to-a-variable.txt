<div class="post-text" itemprop="text">
<p>first time asking a question here. What I am trying to do is launch an executable with os.system after the exe path has been assigned to a variable, and having os.system open the path assigned to the variable. It works fine if I have just the path pasted in the parenthesis (with the quotes ofc) but when I only have the variable there, it does not launch anything. I have tried the print function on the same variable and it prints the path out correctly. Here is what I have that creates the variable and then the call.</p>
<pre><code>config = open("config.txt")
lines=config.readlines()
appone = lines[0]

def launchappone():
os.system(appone)
</code></pre>
<p>I have even put the quotes on the text in the config file I have, but still no dice. Any help? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nowadays, you should use the standard libraries <code>subprocess</code> module to do such tasks.</p>
<p>Also, you should always use context managers with files. These handle automical closing and exception handling.</p>
<p>What might also be a problem, is that <code>readlines()</code> will return all lines in the file as a list but <em>with endline character</em>.
Use <code>f.read().splitlines()</code> to remove the endline or call <code>.strip()</code> on the individual lines.</p>
<p>putting it together:</p>
<pre><code>import subprocess as sp

with open('config.txt') as config:
    lines = config.read().splitlines()

appone = lines[0]

def launch_appone():
    sp.run([appone])
</code></pre>
<p>Edit: also the python docs mention that os.system should not be used anymore</p>
<blockquote>
<p>The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">https://docs.python.org/3/library/os.html#os.system</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you just need it to execute you could try using call from the subprocess module</p>
<pre><code>from subprocess import call
call([appone])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your problem could be with the variable scope also you should use context managers like @MaxNoe said.</p>
<p>but for now try putting argument to the function.</p>
<pre><code>config = open("config.txt")
lines=config.readlines()
appone = lines[0]

def launchappone(appone):
    os.system(appone)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your code worked if launchappone() method called</p>
<pre><code>    import os

    config = open("config.txt")
    lines=config.readlines()
    appone = lines[0]

    def launchappone():
        os.system(appone)

    launchappone() # calling method
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've been having some trouble with os.system and found something very odd that might be the issue here.  It seems like os.system removes the first and last quote in the command string.</p>
<p>To test I make a batch file named test.bat with the single command:</p>
<p>echo %*</p>
<p>I put it into c:\Test Folder</p>
<p>and I am obviously on Windows, I don't know if this issue would carry to other OS's.  Also to note I have been working in Python 2.7.x, so this might be different in Python 3 or even newer patches of 2.7 (I think the newest I've tried is 2.7.6).</p>
<p>I run python and then try some basic commands.</p>
<p>import os</p>
<p>os.system('c:\Test Folder\test.bat')
'test.bat" "Hello"' is not recognized as an internal or external command,
operable program or batch file.</p>
<p>Fails as expected, the path has a space in it and there are no quotes.  Also, the backslashes should be escaped (or replaced with forward slashes).</p>
<p>os.system('"c:\Test Folder\test.bat"')
ECHO is on.</p>
<p>This works.  I can add a parameter and get the echo back:</p>
<p>os.system('"c:\Test Folder\test.bat" Hello')
Hello</p>
<p>But if I quote the parameter it breaks:</p>
<p>os.system('"c:\Test Folder\test.bat" "Hello"')
'test.bat" "Hello"' is not recognized as an internal or external command,
operable program or batch file.</p>
<p>I tried all sorts of stuff and then noticed that the double quote at the start is missing.  So I put an extra one in and I get:</p>
<p>os.system('""c:\Test Folder\test.bat" "Hello"')
"Hello</p>
<p>So that worked, but the output is also missing the closing quote.  So I put an extra closing quote:</p>
<p>os.system('""c:\Test Folder\test.bat" "Hello""')
"Hello"</p>
<p>(Please note none of the above changes if you escape the double quotes or not.)</p>
<p>So...I don't know why this is happening, but hey, there you are.</p>
</div>
<span class="comment-copy">Remove the quotes from your text file and then try with <code>os.system(appone.strip())</code> to remove the trailing newline character.</span>
<span class="comment-copy">Try <code>print(repr(appone))</code> to see what that variable really is - and post it here. Also, get the return code from <code>os.system</code> so we know what error really happened. Also "does not launch anything" is more vague than showing exactly the text printed for the fail.</span>
<span class="comment-copy"><code>os.system</code> is <b>really</b> the wrong tool for the job. Most particularly, it runs a shell (<code>/bin/sh</code>) -- meaning you need to worry about strings in your command or its parameters that try to run arbitrary code.</span>
<span class="comment-copy">(and beyond that, this question needs a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> to ensure that folks are addressing the exact problem you're hitting in practice and can test their answers).</span>
<span class="comment-copy">Suggesting an alternative approach might be very handy, but doesn't actually answer the original question.</span>
<span class="comment-copy">If old stuff does not work and the nowadays recommended way does, why try to fix the old way?</span>
<span class="comment-copy">No, using a global variable inside a function is perfectly fine. If you look at your function, you will see, that you just renamed <code>os.system</code> ;)</span>
