<div class="post-text" itemprop="text">
<p>I need a <strong>tearDownClass(cls)</strong> method for the instance.
I mean one where I can refer to <strong>self</strong> (the <em>instance</em>), not to <strong>cls</strong> (the <em>class</em>).<br/>
A sort of tearDownTestCase(self).</p>
<p>My intention is to cleanup the database after ALL the test cases have been run.<br/>
<em>tearDown(self)</em> is executed at the end of every test and I don't want use it.<br/>
<em>tearDownClass(cls)</em> is executed once when ALL the tests finished but it does not contain a reference to self, and I need to access to a property of <strong>self</strong> (more precisely to a function).</p>
<p>There is a way to achieve this?</p>
<p>Python 3.6</p>
<p>Example of real scenario:</p>
<pre><code>import unittest

'''
The real records saved in the database came from an external source (an API) so the ID is preassigned.
For the test I use everywhere a predefined fixed id, so the code result more clean.
'''

record_id = "TEST"

class RepositoryTest(unittest.TestCase):


    def setUp(self):
        # real initialization, reading connection string from config, database name, collection...
        self.repository = None
        # self._cleanup_record() # maybe here is executed too many unnecessary times

    def tearDown(self):
        # here is executed unnecessarily, because (where needed) the cleanup is eventually executed BEFORE the test (or in its beginning)
        self._cleanup_record()

    ### pseudo (desired) method ###
    def tearDownTestCase(self):
        self._cleanup_record()  

    def tearDownClass(cls):
        # self._cleanup_record()  # self is not available
        # rewrite the same code of initialization and _cleanup_record()
        # I want to a void (or simplify this)
        pass

    # this is 1 of N tests
    def test_save_record(self):

        # cleanup (because I don't know in which state the database is)
        self._cleanup_record()  # almost every test require this, so it can be done in setUp()

        # arrange
        record = self._create_record()

        # act
        self.repository.save_record(record)

        # assert
        saved_record = self._get_record()
        self.assertEquals(saved_record["my field"], record["my field"])



    # utility methods

    def _get_record(self):
        # use self.repository and return the record with id = record_id
        pass # return the record

    def _create_record(self):
        # use self.repository and create (and save) a record with id = record_id
        return None # return the saved record

    def _cleanup_record(self):
        # use self.repository and delete the record with id = record_id (if exists)
        pass
</code></pre>
<hr/>
<p>Doing the cleanup in the tearDown() method it results in:</p>
<p>setUp  </p>
<p>.test 1<br/>
cleanup<br/>
test<br/>
cleanup (= redundant)<br/>
. . .<br/>
.test N<br/>
cleanup<br/>
test<br/>
cleanup  </p>
<p>Instead I want this:<br/>
(and it is possible if a tearDownX() method is executed after ALL the tests are finished)</p>
<p>setUp  </p>
<p>(test 1)<br/>
cleaup<br/>
test<br/>
. . .<br/>
(test N)<br/>
cleaup<br/>
test  </p>
<p>tearDownX (self)<br/>
cleanup (final)  </p>
<p>This is more or less how I ended in the design of the tests in the last years.
It try to be bullet proof against interrupted debug sessions (no cleanup) and dirty initial database state.</p>
<hr/>
<p>As a temporary solution I have replicated the cleanup method in the tearDownClass(cls) method, but I'm not happy. Ideally I could simply call the self._cleanup_record but this is not possible because tearDownClass is a class method.  </p>
<p>I hope all that makes sense.</p>
<p>Thank you,</p>
<p>Alessandro</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there is a pair of instance methods <code>setUp</code> and <code>tearDown</code> under the <code>unittest.TestCase</code>, executed before and after each test respectively.</p>
<p>From the <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><code>setUp()</code> 
  Method called to prepare the test fixture. This is called
  immediately before calling the test method; other than <code>AssertionError</code>
  or <code>SkipTest</code>, any exception raised by this method will be considered an
  error rather than a test failure. The default implementation does
  nothing.</p>
<p><code>tearDown()</code> 
  Method called immediately after the test method has been
  called and the result recorded. This is called even if the test method
  raised an exception, so the implementation in subclasses may need to
  be particularly careful about checking internal state. Any exception,
  other than <code>AssertionError</code> or <code>SkipTest</code>, raised by this method will be
  considered an additional error rather than a test failure (thus
  increasing the total number of reported errors). This method will only
  be called if the <code>setUp()</code> succeeds, regardless of the outcome of the
  test method. The default implementation does nothing.</p>
</blockquote>
<h2>UPDATE (after comments)</h2>
<p>Well, you probably have no choice but to re-design your code. You can make the <em>db cleanup method</em> a class method instead of instance method. </p>
<p>Anyways, since you shouldl't count on the test execution order, nor have your tests dependent on each other, it would be still smart to create the db fixture for each test with the <code>setUp</code> method and clean it with <code>tearDown</code> method after each test.</p>
<p>Another option would be using a <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock</a> for the db in your tests, so you won't need to worry about cleaning it up.</p>
</div>
<span class="comment-copy">This use case isn't going to be supported well as it is seen as an anti-pattern. You could write you're own test runner to do this but IMO you're asking for trouble. Is there any reason that you can't setup and teardown for every test?</span>
<span class="comment-copy">I don't wan't to call the cleanup at the end of every test because from my Real World experience I have to cleanup the database (also) BEFORE every test. So, doing the cleanup (also) AFTER every test result in double call to "cleanup" between test X and test Y (if I have 10 tests it is called 9 times "100% unnecessarily"). Explained that I call the clenup on every test (before the execution) still make this an anti-pattern? If yes, can you please explain or link somethig, I like to know better this point? Thanks</span>
<span class="comment-copy">I've never had an issue with cleanup using SQLAlchemy fixtures. <a href="http://sqlalchemy-fixtures.readthedocs.io/en/latest/" rel="nofollow noreferrer">sqlalchemy-fixtures.readthedocs.io/en/latest</a></span>
<span class="comment-copy">I need a tearDown class after ALL the tests finished, not EVERY. As I said in the OP <b>tearDown()</b> is executed at the end of <b>every</b> test and I don't want use it.</span>
<span class="comment-copy">ops, sorry, I misread your question. Looks like you will need to design your code differently. How come you cant instatiate the <i>database cleaning object</i> in the <code>tearDownClass</code> method?</span>
<span class="comment-copy">I can "think" something. I can duplicate all the code in the function I want to use also in the tearDownClass(), but... why I have to pollute my code for a so (in my opinion) common task? Why (where/how) this functionality is hidden? In any case, if I have to access to something created in the instance (a unique ID) how can I access to this information in the class method (tearDownClass) in a simple and clean way?</span>
<span class="comment-copy">make it a class method</span>
<span class="comment-copy">I have a self._cleanup_record() at the start of almost every record. Because in the Real World you cannot rely on the fact the database is clean when you execute the test (I prefer not to explain this more but in case I can). This function use the self.repository that is initializated on every setUp() call. Obviously if I create (also) a new self._cleanup_record_class(cls) I cannot use self.repository attribute. In any case it results on having 2 methods that do the same job. It is not the right solution (not for my case).</span>
