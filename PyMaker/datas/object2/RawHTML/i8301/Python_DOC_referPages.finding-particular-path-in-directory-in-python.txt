<div class="post-text" itemprop="text">
<p>How could I find the path of the directory which contains a date like 20170423 ? meaning, it could be any date, but i want to have that specific path until i get a folder that contains a date.. There may be several sub-directories along the way that contain that pattern, but that's a special case, where i would need to give more precision, like the content of the folder to select the proper one. give it a shot if you d like for the special case, but for the case where i know that only one folder along the way contains that pattern, the way i start is :</p>
<pre><code> directPaths_list  =  [f.path for f in os.scandir( start ) if f.is_dir()   ] 
</code></pre>
<p>This gives me all the paths from the start folder, to the end. Now, i would like to return the paths that have the date pattern in them, and in particular one, that has let's say whose int(folder_name) is &lt; datetime.datetime.today() </p>
<p>I could come up with a rough solution, but SO has people with very good skills at coming up with succint elegant solutions, so there it is.. any idea? thanks!</p>
<p>for example, for the path start= C:/ this would return C:\Users\abc\def\ghi\20170412</p>
<p>I was thinking something like this could work:</p>
<pre><code>[f.path for f in os.scandir('C:\\Users\\abc\\def\\ghi\\') if f.is_dir() and str(f.path).endswith(str(2),-2,-1) ] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the date <code>20170423</code> is a file named accordingly.
Then you could use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk()</code></a>:</p>
<pre><code>start = "C:\\Users\\abc\\"

for dirpath, dirnames, filenames in os.walk(start):
    for filename in filenames:
        if filename == "20170412":
            filename = os.path.join(dirpath, filename)
            print(filename)
            print(dirpath)
</code></pre>
<p>If only a single file exists <code>C:\Users\abc\def\ghi\20170412</code> then the above would output:</p>
<pre><code>C:\Users\abc\def\ghi\20170412
C:\Users\abc\def\ghi\
</code></pre>
<p>You can of course change the if statement to fit whether you want to check <code>filename.startswith("2017")</code> or anything else.</p>
<p><strong>Warning:</strong> If you do <code>start = "C:\\"</code> then this is most likely gonna take a <strong>looong time to finish.</strong> Because it is going to run through every single directory on the C drive.</p>
<p>You can equally change <code>for filename in filenames</code></p>
<pre><code>for dirname in dirnames:
    if dirname == "20170412":
        dirname = os.path.join(dirpath, dirname )
        print(dirname)
        print(dirpath)
</code></pre>
<p>Thus if <code>C:\Users\abc\def\ghi\20170412</code> is actually a directory, then the above would output the same as before:</p>
<pre><code>C:\Users\abc\def\ghi\20170412
C:\Users\abc\def\ghi\
</code></pre>
<blockquote>
<p>I was hoping for something more succinct</p>
</blockquote>
<p>You could still pack it into a list comprehension if that's what you call more brief.</p>
<pre><code>files = [os.path.join(dir, f) for dir, dirs, files in os.walk(start) for f in files if f == "20170412"]
</code></pre>
</div>
<span class="comment-copy">thanks! but i want a directory, should i just use your solution with  <code>for dirname in dirnames</code>    and also <code>dirname&lt;datetime.datetime.today()</code> ?</span>
<span class="comment-copy">Yes you can equally do <code>for dirname in dirnames</code>. When you've found the file or directory, then the parent directory will be <code>dirpath</code>.</span>
<span class="comment-copy">nice!, to your comment about if i start at C:\\ i could actually do bottom up search with  <code>os.walk("C:\\Users\...", topdown=False)</code></span>
<span class="comment-copy">Yes you indeed can. It will however still take a long time if you start at C:\.</span>
<span class="comment-copy">I would already call it quite succinct. However you can still make a list comprehension if that's what you want (add it to the answer). I don't really know what you mean by "less error prone". You could always make a function <code>find_files_by_name(start, name)</code> if that's what you wanted.</span>
