<div class="post-text" itemprop="text">
<p>I've got not words to thank you all of you for such great advice. Now everything started to make sense. I apologize for for my bad variable naming. It was just because I wanted to quickly learn  and  I wont carry out such practices when I write the final script with my own enhancements which will be posted here. </p>
<p>I want to go an another step further by passing the values we've isolated (ip,port,and name) to a template. I tried but couldn't get it right even though I feel close. The text I want to construct looks like this. (</p>
<pre><code>          Host Address:&lt;IP&gt;:PORT:&lt;1&gt;
          mode tcp
          bind &lt;IP&gt;:&lt;PORT&gt; name &lt;NAME&gt;
</code></pre>
<p>I have tried this within the working script provided by rahul.(I've edited my original code abiding stackexchange's regulations. Please help out just this once as well. Many thanks in advance. </p>
<pre><code>#!/usr/bin/python
import argparse
import re
import string

p = argparse.ArgumentParser()
p.add_argument("input", help="input the data in format ip:port:name", nargs='*')  
args = p.parse_args()
kkk_list = args.input 

def func_three(help):
    for i in help:
        print(i)

for kkk in kkk_list:
    bb = re.split(":|,", kkk) 
    XXX=func_three(bb)
for n in XXX:
    ip, port, name = n
    template ="""HOST Address:{0}:PORT:{1}
              mode tcp
              bind {0}:{1} name {2}"""
       sh = template.format(ip,port,name)
       print sh
</code></pre>

orignial post:--

<p>Beginner here. I wrote the below code and it doesn't get me anywhere. </p>
<pre><code>#!/usr/bin/python
import argparse
import re
import string

p = argparse.ArgumentParser()
p.add_argument("INPUT")  
args = p.parse_args()
KKK= args.INPUT
bb=re.split(":|,", KKK)

def func_three(help):
    for i in help:
        #print help
        return help

#func_three(bb[0:3])
YY = var1, var2, var3 = func_three(bb[0:3])
print YY
</code></pre>
<p>The way to run this script should be "script.py :". i.e: script.py 192.168.1.10:80:string 172.25.16.2:100:string </p>
<p>As you can see if one argument is passed I have no problems. But when there are more arguments I cant determine how to workout the regexes and get this done via a loop. </p>
<p>So to recap, this is how i want the output to look like to proceed further.</p>
<pre><code>192.168.1.10
80
name1

172.25.16.2
100
name2
</code></pre>
<p>If there are better other ways to achieve this please feel free to suggest. </p>
</div>
<div class="post-text" itemprop="text">
<p>Please name your variable with respect to context. You will need to use <code>nargs=*</code> for accepting multiple arguments. I have added the updated code below which prints as you wanted.</p>
<pre><code>#!/usr/bin/python
import argparse
import re
import string

p = argparse.ArgumentParser()
p.add_argument("input", help="input the data in format ip:port:name", nargs='*')  
args = p.parse_args()
kkk_list = args.input # ['192.168.1.10:80:name1', '172.25.16.2:100:name3']

def func_three(help):
    for i in help:
        print(i)

for kkk in kkk_list:
    bb = re.split(":|,", kkk) 
    func_three(bb)
    print('\n')

# This prints
# 192.168.1.10
# 80
# name1


# 172.25.16.2
# 100
# name3
</code></pre>
<p><strong>Updated Code</strong> for new requirement</p>
<pre><code>#!/usr/bin/python
import argparse
import re
import string

p = argparse.ArgumentParser()
p.add_argument("input", help="input the data in format ip:port:name", nargs='*')  
args = p.parse_args()
kkk_list = args.input # ['192.168.1.10:80:name1', '172.25.16.2:100:name3']


def printInFormat(ip, port, name):
    formattedText = '''HOST Address:{ip}:PORT:{port} 
                        mode tcp 
                        bind {ip}:{port} name {name}'''.format(ip=ip, 
                                                                port=port, 
                                                                name=name)
    textWithoutExtraWhitespaces =  '\n'.join([line.strip() for line in formattedText.splitlines()])
    # you can break above thing
    # text = ""
    # for line in formattedText.splitlines():
    #       text += line.strip()
    #       text += "\n" 

    print(formattedText)


for kkk in kkk_list:
    ip, port, name = re.split(":|,", kkk)

    printInFormat(ip, port, name)


# HOST Address:192.168.1.10:PORT:80
# mode tcp
# bind 192.168.1.10:80 name name1
# HOST Address:172.25.16.2:PORT:100
# mode tcp
# bind 172.25.16.2:100 name name3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would say what you are doing could be done more simply. If you want to split the input whenever a colon appears you could use:</p>
<pre><code>#!/usr/bin/python
import sys

# sys.argv is the list of arguments you pass when you run the program
# but sys.argv[0] is the actual program name
# so you want to start at sys.argv[1]
for arg in sys.argv[1:]:
    listVar = arg.split(':')
    for i in listVar:
        print i
    # Optionally print a new line
    print
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Bad variable names aside, if you want to use argparse (which I think is a good habit, even if it is somewhat more complex initially) you should use the <code>nargs='+'</code> option:</p>
<pre><code>#!/usr/bin/env python

import argparse
import re
import string

p = argparse.ArgumentParser()
p.add_argument("INPUT", nargs='+')  
args = p.parse_args()
KKK= args.INPUT

def func_three(help):
    for i in help:
        #print help
        return help

for kkk in KKK:
    bb=re.split(":|,", kkk)
    #func_three(bb[0:3])
    YY = var1, var2, var3 = func_three(bb[0:3])
    print YY
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you look at <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer">the documentation for argparse</a>, you'll notice that there's an <code>nargs</code> argument you can pass to <code>add_argument</code>, which allows you to group more than one input.</p>
<p>For example:</p>
<pre><code>p.add_argument('INPUT', nargs='+')
</code></pre>
<p>Would make it so that there is a minimum of one argument, but all arguments will be gathered into a list.</p>
<p>Then you can go through each of your inputs like this:</p>
<pre><code>args = p.parse_args()
for address in args.INPUT:
    ip, port = address.split(':')
</code></pre>
</div>
<span class="comment-copy">why do you want to input this list as arguments to the script, and not, say, read from stdin or from a file?</span>
<span class="comment-copy">You should consider giving your variables more expressive names.</span>
<span class="comment-copy">Thanks a bunch. Your code worked like a charm. Please I want to make another small addition to the script. I've edited my original post and appreciate if you can take a look and comment.</span>
<span class="comment-copy">@bindo I have updated the code. BTW it is not good practice to ask a completely new question on top of the older question. Also, if you found my answer correct, please mark it correct.</span>
<span class="comment-copy">thanks so much mate. This is what exactly I was looking for n works great. You do not have to do this but it would be awsome  if you could  explain textWithoutExtrawhitespaces . I know it is for getting rid of whitespaces but when I ran the code without that part it still gives me the same expected output. Thanks once again for spending time to get me up to speed sir.</span>
<span class="comment-copy">@bindo I was getting extra spaces between line break. If it work fine then it great. You can remove it.</span>
<span class="comment-copy">Thanks so much Rahul. Everything is clear. I've posted another question related to this and appreciate if you can take a look. many thanks in advance. <a href="https://stackoverflow.com/questions/43613658/python-deleting-a-block-of-lines-from-a-file">link</a></span>
<span class="comment-copy">thanks so much for helping me understand.</span>
<span class="comment-copy">Unfortunately, the argparse documentation is fairly difficult to trudge through (especially for a beginner).  I wish they'd reorganize it and make it more user friendly!</span>
<span class="comment-copy">Thanks so much @Darthfett. I admit that I didnt spend too much time to read through the documentation just because I simply wanted to learn  things by trying to solve my own problem. In my humble opinion that the fastest way to learn. :)</span>
