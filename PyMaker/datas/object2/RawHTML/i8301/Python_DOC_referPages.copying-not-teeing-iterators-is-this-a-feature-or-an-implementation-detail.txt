<div class="post-text" itemprop="text">
<p>I just discovered more or less by accident (answering <a href="https://stackoverflow.com/q/43462293/7207392">this</a> question) that one can copy at least some iterators using <code>copy.copy()</code></p>
<p><strong>Q:</strong> Since this is not mentioned at all in the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">module documentation</a> I was wondering whether this is an official feature or something that may be removed from the language without notice.</p>
<p><strong>Supplementary Q:</strong> Do the same caveats that exist for <code>itertools.tee</code> apply here? Viz. may consume a lot of memory, might be more efficient to create a list.</p>
<p>Here is an example of why this seems a useful feature to me (try doing the same with <code>tee</code>):</p>
<pre><code>def triu_indices(n):
    """indices into the upper triangle of a square matrix"""
    yi = iter(range(n))
    for y in yi:
        for x in copy.copy(yi):
            yield y, x

for y, x in triu_indices(4):
    print(y, x)

# 0 1
# 0 2
# 0 3
# 1 2
# 1 3
# 2 3
</code></pre>
<p><em>Update:</em> My bad, I should have made clear that this also works for "proper" iterators (I tested <code>itertools.product</code> and <code>itertools.combinations</code>) not only for the "not-really-an-iterator" <code>range</code>. It also works with <code>list</code> iterators. It does <em>not</em> work with file (<code>_io.TextIOWrapper</code>) objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's not documented, it's probably true that you can't rely on it.  That said, this type of functionality seems more likely to later be documented than later removed.  However, your example is just copying one particular type of iterator, namely a range iterator, and you shouldn't in general expect to be able to copy arbitrary iterators.</p>
<p>With the range iterator you used, there is not the kind of overhead as there is in <code>tee</code>, at least with the current implementation.  It appears <code>copy</code> is using the pickle <code>__reduce_ex__</code> mechanism, which means that copying the range iterator essentially creates a new range iterator object, which should be just as iteration-efficient as the original one.  It's not storing the individual values.  (I can do <code>copy.copy(iter(range(10**1000)))</code> instantaneously and without any significant memory usage.)</p>
<p>Each iterator type is different, and may or may not define a way to copy itself.  It appears that you're able to copy range iterators, but that doesn't mean you can assume you'll be able to copy any iterator you come across.  Indeed, in general it would be safer to assume you can't, because the iterator protocol is quite general and many iterators won't expose the internal state that would be needed to copy them.</p>
</div>
<span class="comment-copy">@mgilson, BrenBarn, thanks for your answers. They seem compatible which is always reassuring. Just for me to get this straight; are you both saying that it essentially comes down to picklability? And that iterators which would require buffering are generally not supported? If you didn't notice I have updated the question with iterators (and iterables for that matter) which I have checked.</span>
<span class="comment-copy">@PaulPanzer: I added some notes to my answer.  Basically, being able to copy an iterator is no different than being able to copy anything else: you can copy it if it defines a way to copy itself, otherwise you can't.  It seems you found some iterators that can be copied, but that doesn't really say anything about whether iterators in general can be copied.  Also, iterators in general often rely on "private" internal state, so a random iterator you come across is probably even less likely to be copyable than some other random object you come across.</span>
