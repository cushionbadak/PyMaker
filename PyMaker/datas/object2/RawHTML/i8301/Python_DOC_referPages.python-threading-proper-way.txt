<div class="post-text" itemprop="text">
<p>I am new to Python Threading, Threading as well, and I have never used it. That's how I am using it.</p>
<p>I have a class <code>Source</code> and I want that its method <code>evaluate</code> is executed in a thread. The <code>evaluate</code> method call a Utility function <code>increment</code> defined outside the class which increments a global variable. Incrementing the global variable should be performed in a critical section. Also, after some processing, I need to pause the thread for some seconds. That's how I implement it:</p>
<pre><code>import threading
caseGT = threading.Lock()
GT = 0
def increment():
    with caseGT:
        GT = GT + 1

class Source:
    def evaluate(self):
        for (someCondition):
            ...
            ...
            increment()
            ...
            ...
            time.sleep(2)
</code></pre>
<p>That's how I am calling the method evaluate:</p>
<pre><code>s = Source(....)
Thread(s.evaluate()).start()
</code></pre>
<p>I am getting valid result with testdata. But my questions are:</p>
<ol>
<li><p>I am wondering whether it is going to work properly when many threads are doing to work at the same time ? </p></li>
<li><p>Also, is there a better way to write use threading in this situation ?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The way I like to use threading is to use an iterable to launch threads.</p>
<pre><code>workers = []
for item in some_list:
    worker = Thread(target=some_func, args=(item,))
    workers.append(worker)
    worker.start()
for worker in workers:
    worker.join()
</code></pre>
<p>So I imagine that in your context you would want to define a method within <code>Source</code> that lets you pass an iterable and then start threads using items from that iterable as arguments. In your context with just one argument going to the <code>evaluate</code> method your implementation is fine. But I think scaling to multiple threads for the same method could be a problem with that usage.</p>
</div>
<span class="comment-copy">Have you ever heard about python GIL?</span>
<span class="comment-copy">nopes, never heard of</span>
<span class="comment-copy">What is your use case for using threading? performance or parallel execution effect ?</span>
<span class="comment-copy">the thing is that i have thousands of URLs for RDF documents and I have to download these RDF documents. Some may take time while others may be quick. The sleep time is so that for a particular Pay Level Domain, it waits say 1 minute before performing a call on the same PLD. So the use of threading is to enable download of several files at the same time and to prevent a blocking downloading from affecting others</span>
<span class="comment-copy">plz, investigate concurrent module  <code>from concurrent.futures import ThreadPoolExecutor</code>  or you can use <code>Pool</code> class from <code>multiprocessing.dummy</code> <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow noreferrer">this module</a></span>
<span class="comment-copy">why do you keep a records of the Threads, in my case, I just need the threads to start do their work, increment the global variable and die</span>
<span class="comment-copy">I do it mainly so that I can use the <code>join</code> method so that they properly block and are terminated upon completion.</span>
