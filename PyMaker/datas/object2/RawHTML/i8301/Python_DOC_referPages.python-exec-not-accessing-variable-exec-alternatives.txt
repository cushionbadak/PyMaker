<div class="post-text" itemprop="text">
<p>I am writing a command line calculator. I have all the math down but I want to add my own functions, like solve("x^3 = 8", x). My math works fine but the way I'm using exec() is preventing it from writing the result to the local variable finalAnswer.</p>
<p>I included foo() to show what I want</p>
<pre><code>def foo():
    return 5
exec("a = foo()")
print(a)

result = "addAB(15,8)"

def addAB(A, B):
    print(A+B)
    return A+B

def __runFunc(fn, param):
    exec("finalAnswer = fn(" + param + ")")

__approvedFunctions = set(["addAB", "subtractAB"])

funcName = result[:result.index('(')]
if(funcName in __approvedFunctions):
    param = result[result.index('(')+1 : result.index(')')]
    if callable(globals()[funcName]):
        __runFunc(globals()[funcName], param)
print(finalAnswer)
</code></pre>
<p>On execution my output is:</p>
<pre><code>addAB(15,8)
5
23
Traceback (most recent call last):
  File "C:/Users/mikeo/OneDrive/Documents/function filter.py", line 45, in 
&lt;module&gt;
    print(finalAnswer)
NameError: name 'finalAnswer' is not defined
</code></pre>
<p>The first three lines of the output tell me that every part of the script executes, but finalAnswer isn't getting initialized. Have I missed some nuance of using exec().</p>
<p>Also, bonus points if you help me remove exec without changing the format of the string input calling a parameterized function and storing the returned value locally.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may not need <code>exec</code> or <code>eval</code> here. If your expressions are all simple, like in your example code, then we can get away with using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> which (as the name suggests) can evaluate strings that contain valid Python literals. This makes it far safer than plain <code>eval</code> or <code>exec</code>. Of course, your code only attempts to execute approved functions, so it <em>should</em> be safe, but still...</p>
<p>Anyway, here's a solution. We store the approved functions in a dict, keyed by the function name. And we pretend that the string containing the function argument list is a tuple, and get <code>literal_eval</code> to build that tuple for us, so we can pass the args to the function using <code>*</code> sequence unpacking.</p>
<pre><code>from ast import literal_eval

def addAB(A, B):
    print(A+B)
    return A+B

def subAB(A, B):
    print(A-B)
    return A-B

funcs = (addAB, subAB)
approved_functions = {func.__name__: func for func in funcs}

result = "addAB(15,8)"
i = result.index('(')
func_name, func_args = result[:i], literal_eval(result[i:])
print(func_name, func_args)

if func_name in approved_functions:
    func = approved_functions[func_name]
    final_answer = func(*func_args)
    print(final_answer)
</code></pre>
<p><strong>output</strong></p>
<pre><code>addAB (15, 8)
23
23
</code></pre>
<hr/>
<p>This is safe because <code>ast.literal_eval</code> is <em>very</em> strict about what it'll accept in a string. From the docs:</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python
  literal or container display. The string or node provided may only
  consist of the following Python literal structures: strings, bytes,
  numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>.</p>
</blockquote>
<p>A container display is a list, tuple, set, or dict literal, eg <code>(2,3,4)</code> or <code>{'one':1, 'two': 2}</code>. If you try to pass <code>ast.literal_eval</code> something containing a function call or even an arithmetic expression, eg</p>
<pre><code>"(15, f(8))"
</code></pre>
<p>or</p>
<pre><code>"(15, 2 * 4)"
</code></pre>
<p>it will raise <code>ValueError: malformed node or string</code></p>
<p>There's a minor exception to this. <code>ast.literal_eval</code> <em>will</em> accept arithmetic expressions that only use <code>+</code> or <code>-</code>. That's because it needs to be able to evaluate complex number literals, and those literals contain <code>+</code> or <code>-</code>. The implementers decided that the easy way to handle that is to simply allow <code>.literal_eval</code> to evaluate arithmetic expressions containing <code>+</code> or <code>-</code>; doing so doesn't create a security risk. That only applies to arithmetic expressions though, you cannot do string concatenation with <code>+</code>, so</p>
<pre><code>a = ast.literal_eval("'ab' + 'cd'")
</code></pre>
<p>will raise <code>ValueError</code>; OTOH, it <em>does</em> accept the usual automatic concatenation of adjacent string literals, so this is ok:</p>
<pre><code>a = ast.literal_eval("'ab' 'cd'")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def foo():
    return 5
exec("a = foo()")
print(a)

result = "addAB(15,8)"

def addAB(A, B):
    print(A+B)
    return A+B

def __runFunc(fn, param):

    exec("globals()['finalAnswer']= fn(" + param + ")")

__approvedFunctions = set(["addAB", "subtractAB"])

funcName = result[:result.index('(')]
if(funcName in __approvedFunctions):
    param = result[result.index('(')+1 : result.index(')')]
    if callable(globals()[funcName]):
        __runFunc(globals()[funcName], param)
print(finalAnswer)
</code></pre>
</div>
<span class="comment-copy">Seems like what you actually want is to evaluate your expressions with <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> and assign the result to a variable, but it's not generally considered a good idea to write code like this.</span>
<span class="comment-copy">Oh goodie. I like bonus points. ;)</span>
<span class="comment-copy">@khelwood It appears that Mikeologist understands that <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a>, which is why he only attempts to execute approved functions. OTOH, a sufficiently determined attacker could still execute malicious code unless the <code>param</code> string is also analyzed for nasties.</span>
<span class="comment-copy">I understand that I should not use exec() but I need to be able to define an extensible function interface. Unless I am misunderstand it eval() wouldn't work with an algorithm like the one in a function such as solve("x^3 + 4 = 12", x). But I'm here asking and removing exec() is a bonus stipulation of my question, so if there's a better way I'd encourage you to post it as an answer, please.</span>
<span class="comment-copy">That is a much cleaner and safer method of achieving the same goal. Does the prevent malicious use of func_args? I ask because you pointed to this as the potential security flaw in my original code.</span>
<span class="comment-copy">Yes, it's safe because <code>ast.literal_eval</code> is very strict about what it'll accept. I'll add that info to my answer...</span>
<span class="comment-copy">Excellent. In my research before asking this question I was unable to find an alternative to eval() for executing functions with parameters. This should help a lot.</span>
<span class="comment-copy">I see, so it was working and I was pointing to finalAnswer but because my second exec() call is nested that reference dropped away with that reference frame?</span>
