<div class="post-text" itemprop="text">
<p>I am trying to regex match phone numbers and I have come up with the following code:  </p>
<pre><code>pattern = re.compile("^(1?[2-9]\d{2}([.\-\s])?\d{3}\2\d{4}){1}$")
if pattern.match(phoneNumber):
    return True
</code></pre>
<p>This should match numbers such as:<br/>
12142142141<br/>
1214-444-4444<br/>
214.333.3333  </p>
<p>However, this will not match to ANY of the above examples. I have tested this on a few different regex validators and they are all successful on their. I'm assuming the python regex engine is different, but after searching around I cannot find the difference. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Follow your code, made couple of small changes:</p>
<pre><code>import re as re
def test(s):
    pattern = re.compile("^1?[2-9]\d{2}([.\-\s])?\d{3}\\1?\d{4}$")
    return pattern.match(s) is not None

print(test("12142142141")) #True
print(test("1214-444-4444")) #True    
print(test("214.333.3333")) #True
print(test("214-333-3333")) #True
print(test("214.333-3333")) #False
</code></pre>
<p>All three test cases passed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this regex:</p>
<pre><code>^1?(?:(?:\d{10})|(?:\d{3}-\d{3}-\d{4})|(?:\d{3}\.\d{3}\.\d{4}))$
</code></pre>
<p>Most likely you do not want to allow mixed separator types, e.g. if a number uses no separator then it must use no separator everywhere (and the same for dot and hyphen).  In this case, we can use an alternation to cover the three types of patterns.</p>
<p><strong>Demo here:</strong></p>
<p><a href="https://regex101.com/r/OGegOp/1" rel="nofollow noreferrer"><h1>Regex101</h1></a></p>
</div>
<span class="comment-copy"><a href="https://regex101.com/r/QVqpFn/1" rel="nofollow noreferrer">regex101.com/r/QVqpFn/1</a> Doesn't work on regex101</span>
<span class="comment-copy"><b>Always</b> use <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">raw strings</a> for Python regexes. In this case, <code>\2</code> inserts the code point <code>\x02</code>, not a backslash and a 2 (and it must be a backslash and a 2 for <code>re</code> to see the regex escape you're trying to use). Python is being "helpful" by not requiring the backslash to be escaped when the next character isn't a string escape, but it bites you for <code>\2</code> (and <code>\b</code>, <code>\a</code>, <code>\f</code>, etc.). Put a <code>r</code> before the literal to make it raw: <code>r'^(...'</code></span>
<span class="comment-copy">Strange, it works on <a href="http://www.regexpal.com/" rel="nofollow noreferrer">regexpal.com</a></span>
<span class="comment-copy">Because that tool supports backreferences apparently, but you don't need a backreference here.</span>
<span class="comment-copy">I think the logic of the pattern is wrong, e.g. Westchester, New York, has an area code of <code>914</code> with a <code>1</code> for the second digit.</span>
<span class="comment-copy">This does work, however, I would like to use the same delimiter throughout the phone number. So if the user uses a - as the first delimiter I would like only dashes to be accepted which is why I use the \2 to indicate group 2: 214-214-2141 works but 214.214-2141 does not</span>
<span class="comment-copy">@CuriousGeorge, changed a bit, see above.</span>
<span class="comment-copy">@PeterPeiGuo It works! Although it doesn't pass on pythex.org, it works in code just fine. Seemed the problem was with escaping the '\' when trying to use the \2 from the original. Appreciate it. I like this answer a bit more than the other since it still allows me to use the backreference from my original code.</span>
<span class="comment-copy">@CuriousGeorge, Enjoy!</span>
<span class="comment-copy">This worked! Works on Pythex.org as well as within my code. Appreciate it</span>
<span class="comment-copy">Requiring the same kind of separator is the point of the OP's (incorrectly coded) use of a backreference.</span>
<span class="comment-copy">@TimPeters I know this, I just probably wouldn't use a backreference for that.</span>
