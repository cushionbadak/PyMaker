<div class="post-text" itemprop="text">
<p>I have read few tutorial on python embedded c++. I had refer back to python object.
<a href="https://docs.python.org/3/c-api/function.html" rel="nofollow noreferrer">https://docs.python.org/3/c-api/function.html</a></p>
<p>Python script:</p>
<pre><code>import picamera 
from pylibdmtx.pylibdmtx import decode 
from time import sleep

import cv2
def test():
    camera = picamera.PiCamera()
    camera.start_preview()
    sleep(10)
    camera.stop_preview()

    camera.capture('image3.png')
    camera.close()

    data = decode(cv2.imread('/home/pi/image3.png'))
    return(data)
</code></pre>
<p>C++ Script</p>
<pre><code>#include&lt;Python.h&gt;
#include&lt;string&gt;

int main(){
String data2;

Py_Initialize();

***Doing Some Stuff TO GET data from test() function in python script and store in variable data2

Py_Finalize();
}
</code></pre>
<p>I had use PyRun_SimpleString() to do before, it can work. But, it cannot pass the variable to C++. The result I want is it can store the string to the variable at C++. Example after C++ execute the python script, python function return "1234". And "1234" is store at C++ variable (data2)</p>
<p>Please, help me solve this problem. This is my first time python embedding c++, and have some guide please. </p>
<p>Again, if can please provide me solution on </p>
<p>***Doing Some Stuff TO GET data from test() function in python script and store in variable data2</p>
<p>Thanks very much.... Appreciate </p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you want your C++ code to call your Python test() function and get the string result of that function back so the C++ code can do something with it.  If so, I think something like this would do the trick for you:</p>
<pre><code> std::string data;
 char fileName[] = "my_test_python_script.py";
 PyObject * moduleObj = PyImport_ImportModule(filename);
 if (moduleObj)
 {
    char functionName[] = "test";
    PyObject * functionObj = PyObject_GetAttrString(moduleObj, functionName);
    if (functionObj)
    {
       if (PyCallable_Check(functionObj))
       {
          PyObject * argsObject = PyTuple_New(0);
          if (argsObject)
          {
             PyObject * resultObject = PyEval_CallObject(functionObj, argsObject);
             if (resultObject)
             {
                if ((resultObject != Py_None)&amp;&amp;(PyString_Check(resultObject))) 
                {
                    data = PyString_AsString(resultObject);
                }
                Py_DECREF(resultObject);
             }
             else if (PyErr_Occurred()) PyErr_Print();

             Py_DECREF(argsObject);
          }
       }
       Py_DECREF(functionObj);
    }
    else PyErr_Clear();

    Py_DECREF(moduleObj);
 }

 std::cout &lt;&lt; "The Python test function returned: " &lt;&lt; data &lt;&lt; std::endl;
</code></pre>
</div>
<span class="comment-copy">Yes, your understanding is correct. Is it functionObject need chg to functionObj at line 15:PyObject * resultObject = PyEval_CallObject(functionObject, argsObject);</span>
<span class="comment-copy">I had tested the code, it wont execute this line if(moduleObj). It just skip it only ...</span>
<span class="comment-copy">Sounds like Python_ImportModule() is returning NULL, then.  Make sure you give it the correct argument.</span>
