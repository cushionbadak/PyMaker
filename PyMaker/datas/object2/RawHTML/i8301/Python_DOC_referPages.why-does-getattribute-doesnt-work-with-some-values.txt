<div class="post-text" itemprop="text">
<p>my question is about <strong>getattribute</strong>. Please consider the following piece of code:</p>
<pre><code>class Product():

  def __init__(self, name, quantity = 1, price =  0.0):
    self.name = name
    self.quantity = quantity
          self.price = price

  def __getattribute__(self, attr):
    if (attr == 'price'):
        return 30 * object.__getattribute__(self, attr)
       #change object.blala-la to the self.name or self.quantity 
    else:
        return object.__getattribute__(self, attr)

tmp = Product("Watermelon", 2, 50.0);
print(tmp.price)`
</code></pre>
<p>I have found a bit misleading that if i change the <code>object.__getattribute__(self, attr)</code> to the <code>self.name</code> or <code>self.quantity</code> i will get 30 times string "Watermelon" or 60.0 (in case self.quantity), but if i put there <code>self.price</code> i will get <code>RuntimeError</code>, something about max recursion depth.</p>
<p>So, question: Why i cannot do that with <code>self.price</code> and just write instead <code>object.__getattribute__(self, attr)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">documentaion says</a>:</p>
<blockquote>
<p><code>object.__getattribute__(self, name)</code></p>
<p>Called unconditionally to implement attribute accesses for instances of the class. If the class also defines <code>__getattr__()</code>, the latter will not be called unless <code>__getattribute__()</code> either calls it explicitly or raises an AttributeError. This method should return the (computed) attribute value or raise an AttributeError exception. <strong>In order to avoid infinite recursion in this method, its implementation should always call the base class method with the same name to access any attributes it needs</strong>, for example, <strong>object.<code>__getattribute__(self, name)</code></strong>.</p>
</blockquote>
</div>
<span class="comment-copy">What do you think <code>self.price</code> <b>does</b> when used in <code>__getattribute__</code>? <code>__getattribute__</code> is called for <b>all</b> attribute access, even for attribute access executed inside the same method. So <code>self.price</code> would call <code>__getattribute__</code> which accesses <code>self.price</code>, which calls <code>__getattribute__</code>, ad infinitum. Or until the runtime error.</span>
<span class="comment-copy">Ok, i think i got it. <code>object.__getattribute__(self, attr(*price*))</code> works like a break statement for the endless accessing self.price. Is it correct?</span>
<span class="comment-copy">No, you delegated to the original <code>object.__getattribute__</code> implementation. That implementation doesn't call <code>self.__getattribute__</code> so there is no recursion issue.</span>
<span class="comment-copy">So, instead of typing <code>self.attr</code> we write <code>object.__getattribute__(self, attr)</code> in order to avoid infinite recursion, as it knocks to the <b>getattribute</b> method definition in <code>object Class</code>, which interupts recursion? But if we will type something like, <code>return Product.__getattribute(self, attr)</code> or <code>return self.attr</code> in <code>if-else</code> then we will invoke next  recursion iterations?</span>
<span class="comment-copy">Yes, because both would call <code>Product.__getattribute__</code> again. <code>self.attr</code> is the same thing as <code>type(self).__getattribute__(self, attr)</code>, and <code>type(self)</code> here is <code>Product</code>.</span>
