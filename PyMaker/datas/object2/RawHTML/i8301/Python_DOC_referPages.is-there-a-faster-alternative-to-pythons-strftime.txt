<div class="post-text" itemprop="text">
<p>I'm processing hundreds of thousands of dates in Python and noticing that the <code>strftime</code> function is pretty slow.</p>
<p>I used timeit to check and it tells me that it takes roughly 0.004 which is fine for a small number but becomes problematic for processing a couple thousand for example.</p>
<pre><code>print(min(timeit.Timer("now.strftime('%m/%d/%Y')", setup=setup).repeat(7,1000))
</code></pre>
<p>Is there any faster alternative?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you have a rigid format you can just access directly the fields of the <code>datetime</code> object and use Python string formatting to construct the required string:</p>
<pre><code>'{:02d}/{:02d}/{}'.format(now.month, now.day, now.year)
</code></pre>
<p>In Python 3 this is about 4 times faster than <code>strftime()</code>. It's also faster in Python 2, about 2-3 times as fast.</p>
<p>Faster again in Python 3 is the "old" style string interpolation:</p>
<pre><code>'%02d/%02d/%d' % (now.month, now.day, now.year)
</code></pre>
<p>about 5 times faster, but I've found this one to be slower for Python 2.</p>
<p>Another option, but only 1.5 times faster, is to use <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer"><code>time.strftime()</code></a> instead of <code>datetime.strftime()</code>:</p>
<pre><code>time.strftime('%m/%d/%Y', now.timetuple())
</code></pre>
<hr/>
<p>Finally, how are you constructing the <code>datetime</code> object to begin with? If you are converting strings to <code>datetime</code> (with <code>strptime()</code> for example), it might be faster to convert the incoming string version to the outgoing one using string slicing.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is marginally faster on my box (python 2.7.x)</p>
<pre><code>def fmt(date):
    return "%02d/%02d/%d" % (date.month, date.day, date.year)
</code></pre>
</div>
<span class="comment-copy">I don't think so. You could go for caching if the entries repeat themselves, or splittingg it into threads (which is very error-prone however).</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/13468126/a-faster-strptime">stackoverflow.com/questions/13468126/a-faster-strptime</a> this may help.</span>
<span class="comment-copy">@AjaySingh: That question is about <code>strptime</code>, the string-to-timestamp function.  This question is about <code>strftime</code>, the timestamp-to-string function.</span>
<span class="comment-copy">@gonczor Splitting into threads will not help CPU-bound tasks in most implementations of Python since there is typically a global lock that prevents threads from running concurrently.</span>
<span class="comment-copy">Thanks a lot, trying these out now. Essentially I have a datetime object and would like to output something like 'Thursday 10th Dec at 10:44AM'. The datetime comes directly from the db.</span>
<span class="comment-copy">Mapping the day of week to the day name is more difficult and will slow down these alternative methods. Ditto for month name. Assuming that you do not actually need a <code>datetime</code> object, perhaps you can select the date from the database as a string in the required format? (or you could do both: get a <code>datetime</code> <i>and</i> a string representation of it)</span>
<span class="comment-copy">That's a good idea, let me give that a try.</span>
<span class="comment-copy">Right so I realised I couldn't do that as there's some additional timezone conversion that happens after the db call. Instead of meddling with that I opted with your suggestion of using the <code>time.strftime</code> instead which is pretty impressive and is a sufficient performance improvement and frankly works well :). Appreciate your help!</span>
<span class="comment-copy">Don't suppose you know any other techniques? Just curious if there's anything else that could result in some quick wins.</span>
