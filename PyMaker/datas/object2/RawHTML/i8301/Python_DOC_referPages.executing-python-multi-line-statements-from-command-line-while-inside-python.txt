<div class="post-text" itemprop="text">
<p>I've got thousands of small multi-line python3 programs to run, which are generated as strings. They all have a similar structure, and end with a <code>print</code> command. Here's some simple examples </p>
<pre><code>prog_1 = 'h=9\nh=h+6\nprint(h)'
prog_2 = 'h=8\nh-=2\nprint(h)'
prog_3 = 'c=7\nc=c+4\nprint(c)'
</code></pre>
<p>They should all be executable if you were to run them from the interpreter. What I mean is, they look like small normal programs when you print them, </p>
<pre><code>&gt;&gt;&gt; print(prog_1)
h=9
h=h+6
print(h)


&gt;&gt;&gt; print(prog_2)
h=8
h-=2
print(h)


&gt;&gt;&gt; print(prog_3)
c=7
c=c+4
print(c)
</code></pre>
<p>I want to execute them from inside my program, (which generates them), and capture the output, (i.e. the output of the <code>print</code>) as a variable, but I'm stuck how to do it? </p>
<p>Something like</p>
<pre><code>import os
output = os.popen("python -c " +  prog_1).read()
</code></pre>
<p>would be great but I get this error?</p>
<pre><code>/bin/sh: 3: Syntax error: word unexpected (expecting ")")
</code></pre>
<p>I think the problem is I don't know how to execute the small programs from the command line? This line executes, but does not print out??</p>
<pre><code>python -c "'h=9\nh=h+6\nprint(h)'"
</code></pre>
<p>Thanks a lot for your help :)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you wish to execute them in a <strong>separate process</strong> then you can use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess.run</code></a>:</p>
<pre><code>&gt;&gt;&gt; prog_1 = 'h=9\nh=h+6\nprint(h)'
&gt;&gt;&gt; result = subprocess.run(["python"], input=prog_1, encoding="utf-8", stdout=subprocess.PIPE).stdout
&gt;&gt;&gt; print(result)
15
</code></pre>
<p>Note that Python 3.6 is required for <code>encoding</code> support, and Python 3.5 is required for <code>subprocess.run</code>.</p>
<p>In Python 3.5, you need to pass the input as <code>bytes</code>, and the returned output will also be bytes.</p>
<pre><code>&gt;&gt;&gt; result = subprocess.run(["python"], input=bytes(prog_1, "utf-8"), stdout=subprocess.PIPE).stdout
&gt;&gt;&gt; print(str(result, "utf-8"))
15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are not bound to command line you can use:</p>
<pre><code>exec(prog_1)
</code></pre>
<p><strong>Warning</strong>: <code>exec()</code> can be very dangerous - <a href="https://stackoverflow.com/questions/1933451/why-should-exec-and-eval-be-avoided">Why should exec() and eval() be avoided?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>exec</code>:</p>
<pre><code>&gt;&gt;&gt; prog_1 = 'h=9\nh=h+6\nprint(h)'
&gt;&gt;&gt; exec(prog_1)
15
</code></pre>
</div>
<span class="comment-copy">Awesome, thanks a lot :))) That's nearly it, I just need to convert to integer, <code>output=int(result)</code>. Do I have to somehow shut down/kill the <code>subprocess</code>? I've got to run about <code>100k</code>, of these little things, on multiple cores?</span>
<span class="comment-copy">Cool, thanks a lot, I never new that. I need to somehow capture the output though, so for example, <code>output = exec(prog_1)</code>, doesn't seem to work ??? It's empty, not <code>15</code>?</span>
<span class="comment-copy">I look forward to evaluating a program involving <code>shutil.rmtree("/")</code>.</span>
<span class="comment-copy">Also be aware that <code>exec</code> will pollute the namespace of your program meaning your little mini programs could easily clobber and kill your main one.</span>
