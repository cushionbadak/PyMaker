<div class="post-text" itemprop="text">
<p>In the For loop below</p>
<pre><code>def __str__(self):
    output = " "
    for i in range(len(self)):
        output += (self.str_data[i] +" ")
    return  output
</code></pre>
<p>How may I rewrite this <strong>without</strong> using range &amp; len or any other <strong>inbuilt</strong> <strong>function</strong>? </p>
<p>PS: str_data was used as instance variable of type list in <em>init</em> earlier.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're <em>allowed</em> to use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join()</a> then you could do:</p>
<pre><code>def __str__(self):
    return " ".join(self.str_data)
</code></pre>
<p><em>This is of course assuming <code>len(self)</code> would result in the same as <code>len(self.str_data)</code>.</em></p>
<p>To result in exactly the same as your loop it would actually have to be:</p>
<pre><code>def __str__(self):
    if self.str_data:
        return " " + " ".join(self.str_data) + " "
    else:
        return " "
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>New Answer:</strong> (no builtin functions)</p>
<pre><code>def __str__(self):
    output=""
    for i in self.str_data:
         output+=i+" "
    return output
</code></pre>
<p><strong>Old Answer :</strong></p>
<p>asterisk and double asterisk can be used within list, tuple, set and dictionary, * will unpack list/tuple and ** will unpack dictionary.</p>
<pre><code>my_array = [0,1,2,3,4,5]
print(*my_array) # unpacking list
</code></pre>
<p>Another method using join:</p>
<pre><code>print(' '.join(map(str,my_array)))
</code></pre>
<p>Output</p>
<pre><code>0 1 2 3 4 5
</code></pre>
<p>For the given question:</p>
<p>Since return keyword returns only one argument we can't unpack the list and we have to use function</p>
<pre><code>def __str__(self):  
    return ' '.join(self.str_data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You mean like this ?</p>
<pre><code>class A(object):

    def __init__(self, str_data):
        self.str_data = str_data

    def __str__(self):
        return " ".join(str(s) for s in self)

    def __iter__(self):
        return iter(self.str_data)

if __name__ == '__main__':
    print(A(["1", "2", "3", "4", "5"]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import json

def __str__(self):
    output = json.dumps(self.str_data)
    output = output[1:-1].replace(',', ' ')
    return  output
</code></pre>
<p>For your consideration.</p>
</div>
<div class="post-text" itemprop="text">
<p>The previous answer is perfectly fine (if you omit builtins), but here's a closer version to what you did:</p>
<pre><code>output = ""
array = [0,1,2,3,4,5]
for i in array:
   output += "%s " % (i)
output = output[:-1]
return output
</code></pre>
<p>Please note that I change the way you set your output, as I think in order to get the result you want. Like you asked it does not use any builtin and it works just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use highlevel functions like</p>
<pre><code>" ".join(map(lambda x:x+" ",self.str_data))
</code></pre>
<p>map applies the function to add a space to each string in <code>self.str_data</code> and <code>" ".join</code> adds each of those to the starting string.</p>
<p>But of course these are built-in functions, it's just a really clean solution. </p>
</div>
<span class="comment-copy">do u not want to use any builtin function or only range and len</span>
<span class="comment-copy">no built in functions to be used including range() and len(). I need a substitute for them here in <i>str</i></span>
<span class="comment-copy">@ Vallentin : I am not allowed to use join or any other inbuilt function as such.</span>
<span class="comment-copy">@phoenix_9 what are you allowed to use then?</span>
<span class="comment-copy">Anything sans inbuilt functions. If you are able to tweak and twist the above code a bit , works fine for me. But just avoid the inbuilt function(s)</span>
<span class="comment-copy">You know, you shouldn't just copy every answer into your own.</span>
<span class="comment-copy">@Vallentin Sorry, I assumed that the list consist of string literals since the OP didn't use str().And also forget that i can edit someone answers</span>
<span class="comment-copy">I Cant import any module for my case.</span>
<span class="comment-copy">OP isn't allowed to use <code>join()</code>, so I'm assuming OP is neither allowed to use <code>format()</code>. I would however assume that changing it to <code>i + " "</code> would be enough (in relation to OP not being <i>allowed</i> to use built-in functions).</span>
<span class="comment-copy">Good catch, let me change that! Do you want to directly suggest an edit that I'll then accept?</span>
<span class="comment-copy">Thanks @JoeBeCool, but unfortunately format is an inbuilt function. <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">docs.python.org/3/library/functions.html</a></span>
<span class="comment-copy">Ok, how about now? No builtins</span>
<span class="comment-copy">thanks , I'll check it out !</span>
