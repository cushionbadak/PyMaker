<div class="post-text" itemprop="text">
<p>I want to use different API keys for data scraping each time my program is run. </p>
<p>For instance, I have the following 2 keys:</p>
<pre><code>apiKey1 = "123abc"
apiKey2 = "345def"
</code></pre>
<p>and the following URL:</p>
<pre><code>myUrl = http://myurl.com/key=...
</code></pre>
<p>When the program is run, I would like <code>myUrl</code> to be using <code>apiKey1</code>. Once it is run again, I would then like it to use <code>apiKey2</code> and so forth... i.e:</p>
<p>First Run:</p>
<pre><code>url = "http://myurl.com/key=" + apiKey1
</code></pre>
<p>Second Run:</p>
<pre><code>url = "http://myurl.com/key=" + apiKey2
</code></pre>
<p>Sorry if this doesn't make sense, but does anyone know a way to do this? I have no idea.</p>
<hr/>
<p><em>EDIT:</em></p>
<p>To avoid confusion, I've had a look at <em><a href="https://stackoverflow.com/questions/10986970/python-how-to-toggle-between-two-values">this</a></em> answer. But this doesn't answer my query. My target is to cycle between the variables between executions of my script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example of how you can do it with automatic file creation if no such file exists:</p>
<pre><code>import os
if not os.path.exists('Checker.txt'):
    '''here you check whether the file exists
    if not this bit creates it
    if file exists nothing happens'''
    with open('Checker.txt', 'w') as f:
        #so if the file doesn't exist this will create it
        f.write('0')

myUrl = 'http://myurl.com/key='
apiKeys = ["123abc", "345def"]

with open('Checker.txt', 'r') as f:
    data = int(f.read()) #read the contents of data and turn it into int
    myUrl = myUrl + apiKeys[data] #call the apiKey via index

with open('Checker.txt', 'w') as f:
    #rewriting the file and swapping values
    if data == 1:
        f.write('0')
    else:
        f.write('1')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use a persistent dictionary (it's like a database but more lightweight). That way you can easily store the options and the one to visit next.</p>
<p>There's already a library in the standard library that provides such a persistent dictionary: <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow noreferrer"><code>shelve</code></a>:</p>
<pre><code>import shelve

filename = 'target.shelve'

def get_next_target():
    with shelve.open(filename) as db:
        if not db:
            # Not created yet, initialize it:
            db['current'] = 0
            db['options'] = ["123abc", "345def"]

        # Get the current option
        nxt = db['options'][db['current']]
        db['current'] = (db['current'] + 1) % len(db['options'])  # increment with wraparound

    return nxt
</code></pre>
<p>And each call to <code>get_next_target()</code> will return the next option - no matter if you call it several times in the same execution or once per execution.</p>
<p>The logic could be simplified if you <strong>never</strong> have more than 2 options:</p>
<pre><code>db['current'] = 0 if db['current'] == 1 else 1
</code></pre>
<p>But I thought it might be worthwhile to have a way that can easily handle multiple options.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would rely on an external process to hold which key was used last time, 
or even simpler I would count executions of the script and use a key if execution count is an odd number, or the other key for an even number.</p>
<p>So I would introduce something like <a href="http://redis.io" rel="nofollow noreferrer">redis</a>, which will also help a lot for other (future ?) features you may want to add in your project. redis is one of those tools that always give benefits at almost no cost, it's very practical to be able to rely on an external permanent storage - it can serve many purposes.</p>
<p>So here is how I would do it:</p>
<ol>
<li>first make sure redis-server is running (can be started automatically as a daemon, depends on your system)</li>
<li>install Python redis module</li>
<li>then, here is some Python code for inspiration:</li>
</ol>
<pre><code>
    import redis

    db = redis.Redis()

    if db.hincrby('execution', 'count', 1) % 2:
      key = apiKey1
    else:
      key = apiKey2 

    
</code></pre>
<p>That's it !</p>
</div>
<span class="comment-copy"><code>for key in itertools.cycle((apiKey1, apiKey2)):</code>? When should it <i>stop</i> switching between them?</span>
<span class="comment-copy">Your program needs to keep <i>state</i>. Usually this is done by writing the information to a file.  Also, you're almost certainly violating the terms of service of the API you're (ab)using.</span>
<span class="comment-copy">@jonrsharpe i was thinking of <code>cycle</code> as well, but I have a hunch that OP wants to cycle between the variables between executions of his script.</span>
<span class="comment-copy">@JonathonReinhart Don't worry, I'm not ;-)</span>
<span class="comment-copy">@timgeb You are right =)</span>
<span class="comment-copy">This is great! Thanks very much, if you could just quickly explain the code that would be great</span>
<span class="comment-copy">You are welcome! I added comments to help you understand the process. Do ask if you need anything further clarified :)</span>
<span class="comment-copy">Thanks! That's great ;-)</span>
<span class="comment-copy">Oh, I do have 1 question, does <code>os.path.exists</code> refer to the folder the script is in?</span>
<span class="comment-copy">? ^ /TooShort..</span>
