<div class="post-text" itemprop="text">
<p>I wanted to print the source code for <code>my_func</code>, that is wrapped by <code>my_decorator</code>:</p>
<pre><code>import inspect
from functools import wraps

def my_decorator(some_function):
    @wraps(some_function)
    def wrapper():
        some_function()

    return wrapper

@my_decorator
def my_func():
    print "supposed to return this instead!"
    return

print inspect.getsource(my_func)
</code></pre>
<p>However, it returns source for wrapper instead:</p>
<pre><code>@wraps(some_function)
def wrapper():
    some_function()
</code></pre>
<p>Is there a way for it to print the following instead?</p>
<pre><code>def my_func():
    print "supposed to return this instead!"
    return
</code></pre>
<p>Note that the above is abstracted from a larger program. Of course we can just get rid of the decorator in this example, but that's not what I am looking for. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, the <code>@functools.wraps()</code> decorator does not set the convenience <code>__wrapped__</code> attribute that the <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="noreferrer">Python 3 version</a> adds (new in Python 3.2).</p>
<p>This means you'll have to resort to extracting the original function <em>from the closure</em>. Exactly at what location will depend on the exact decorator implementation, but picking the first function object should be a good generalisation:</p>
<pre><code>from types import FunctionType

def extract_wrapped(decorated):
    closure = (c.cell_contents for c in decorated.__closure__)
    return next((c for c in closure if isinstance(c, FunctionType)), None)
</code></pre>
<p>Usage:</p>
<pre><code>print inspect.getsource(extract_wrapped(my_func))
</code></pre>
<p>Demo using your sample:</p>
<pre><code>&gt;&gt;&gt; print inspect.getsource(extract_wrapped(my_func))
@my_decorator
def my_func():
    print "supposed to return this instead!"
    return
</code></pre>
<p>Another option is to update the <code>functools</code> library to add a <code>__wrapped__</code> attribute for you, the same way Python 3 does:</p>
<pre><code>import functools

def add_wrapped(uw):
    @functools.wraps(uw)
    def update_wrapper(wrapper, wrapped, **kwargs):
        wrapper = uw(wrapper, wrapped, **kwargs)
        wrapper.__wrapped__ = wrapped
        return wrapper

functools.update_wrapper = add_wrapped(functools.update_wrapper)
</code></pre>
<p>Run that code <strong>before</strong> importing the decorator you want to see affected (so they end up using the new version of <code>functools.update_wrapper()</code>). 
You'll have to manually unwrap still (the Python 2 <code>inspect</code> module doesn't go looking for the attribute); here's a simple helper function do that:</p>
<pre><code>def unwrap(func):
    while hasattr(func, '__wrapped__'):
        func = func.__wrapped__
    return func
</code></pre>
<p>This will unwrap any level of decorator wrapping. Or use a copy of the <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/inspect.py#L458-L488" rel="noreferrer"><code>inspect.unwrap()</code> implementation from Python 3</a>, which includes checking for accidental circular references.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Martijn Pieters points out in his answer, the Python 2 <code>@functool.wraps()</code> decorator doesn't define a <code>__wrapped__</code> attribute, which would make doing what you want to do very easy. According to the <a href="https://docs.python.org/3/library/functools.html?highlight=__wrapped__#functools.update_wrapper" rel="nofollow noreferrer">documentation</a> I read, even though it was added in Python 3.2, there was a <a href="https://bugs.python.org/issue17482" rel="nofollow noreferrer">bug</a> in the ways it was sometimes handled until version 3.4 was releasedâ€”so the code below uses v3.4 as the cut-off for defining a custom <code>wraps()</code> decorator.</p>
<p>Since from its name it sounds like you have control over <code>my_decorator()</code>, you can workaround the issue by defining you're own <code>wraps</code>-like function, rather than extracting the original function from the closure, as shown in his answer. Here's how to do it (which works in Python 2 and 3):</p>
<p><sup>(As Martijn also points out, you could monkey-patch the change in by overwriting the <code>functools.wraps</code> module attribute, which would make the change also affect other modules that use <code>functools</code> instead of only the one where it's defined.)</sup></p>
<pre><code>import functools
import inspect
import sys

if sys.version_info[0:2] &gt;= (3, 4):  # Python v3.4+?
    wraps = functools.wraps  # built-in has __wrapped__ attribute
else:
    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,
              updated=functools.WRAPPER_UPDATES):
        def wrapper(f):
            f = functools.wraps(wrapped, assigned, updated)(f)
            f.__wrapped__ = wrapped  # set attribute missing in earlier versions
            return f
        return wrapper

def my_decorator(some_function):
    @wraps(some_function)
    def wrapper():
        some_function()

    return wrapper

@my_decorator
def my_func():
    print("supposed to return this instead!")
    return

print(inspect.getsource(my_func.__wrapped__))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>@my_decorator
def my_func():
    print("supposed to return this instead!")
    return
</code></pre>
</div>
<span class="comment-copy">For Python 2, would it not also be relatively easy to write your own <code>wraps()</code> decorator that defined said "convenience" attribute? Seem like that code might work in Python 3 even though not necessary (i.e. it would be portable)?</span>
<span class="comment-copy">@martineau: provided you control the source code of the decorator you can easily swap out the <code>wraps()</code> implementation, sure. You probably can monkey-patch <code>functools.update_wrapper</code> too.</span>
