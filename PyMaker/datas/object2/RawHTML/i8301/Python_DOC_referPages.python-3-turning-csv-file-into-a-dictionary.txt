<div class="post-text" itemprop="text">
<p>File is something like:</p>
<pre><code>6, 'bird', 'flies', False
</code></pre>
<p>and it needs to be ordered like:</p>
<pre><code>{'bird': (6,'flies', False)}
</code></pre>
<p>This is what I have so far but not formatting right.</p>
<pre><code>{"'bird'": '1'}
</code></pre>
<p>My current code:</p>
<pre><code>def read_info_file(filename):

    d = {}
    count = 0

    file = open(filename, "r")
    lines = file.readlines()

    for line in lines:
        split = tuple(line.split(","))

        if count &gt; 0:
            d[split[1]] = split[0]
        count += 1

    return d
</code></pre>
<p>I can also not import any modules in this question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hand parsing <code>csv</code> files with Python is often more work than it is worth.  Here is one simple way to parse individual lines, use a generator, while still using the <code>csv</code> module:</p>
<p><strong>Code:</strong></p>
<pre><code>import csv

def parse_my_csv(csv_file):
    for line in csv_file.readlines():
        # replacing comma/space with comma
        yield line.replace(", ", ",")

with open('myfile.csv', 'rU') as csvfile:
    csv_read = csv.reader(parse_my_csv(csvfile), quotechar="'")
    for row in csv_read:
        d = {row[1]: (int(row[0]), row[2], bool(row[3]))}
        print(d)
</code></pre>
<p><strong>Results:</strong></p>
<pre><code>{'bird': (6, 'flies', True)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The below does format the csv according to your format requirement.</strong></p>
<p><strong>Code:</strong> </p>
<p>import csv</p>
<p>from pprint import pprint</p>
<p>def filter(str):</p>
<pre><code>str = str.strip().strip("'")
return str
</code></pre>
<p>def read_info_file(filepath):</p>
<pre><code>try:

    res = {}

    csvfile = open(filepath,'r')
    csv_reader = csv.reader(csvfile)

    for row in csv_reader:
        res[filter(row[1])] = (int(row[0]),filter(row[2]),bool(row[3]))

except Exception as e:
    print("Exception occurred: " + str(e))
finally:
    csvfile.close()
return res
</code></pre>
<p>res = read_info_file('file.csv')
pprint(res)</p>
<p><strong>Output:</strong></p>
<p>{'animal': (7, 'flies', True),
 'bird': (6, 'flies', True),
 'insect': (8, 'flies', True)}</p>
</div>
<div class="post-text" itemprop="text">
<p>To do this without any imported modules, you can use comprehensions like:</p>
<p><strong>Code:</strong></p>
<pre><code>def read_info_file(filename):
    with open(filename, 'rU') as f:
        return {row[1]: (int(row[0]), row[2], bool(row[3]))
                for row in [
                    [c.strip().strip("'") for c in line.split(',')]
                    for line in f.readlines()
                ]}
</code></pre>
<p><strong>Test:</strong></p>
<pre><code>print(read_info_file('myfile.csv'))
</code></pre>
<p><strong>Result:</strong></p>
<pre><code>{'bird': (6, 'flies', True)}
</code></pre>
</div>
<span class="comment-copy">Also, <b>show</b> us what you mean by "not formatting right".</span>
<span class="comment-copy">Also, you would probably find it easier to use the built-in <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module</a></span>
<span class="comment-copy">You undid my editing and broke the format of your answer.</span>
<span class="comment-copy">I sadly can't import anything for this question</span>
