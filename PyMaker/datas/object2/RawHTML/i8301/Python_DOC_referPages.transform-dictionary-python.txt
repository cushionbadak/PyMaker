<div class="post-text" itemprop="text">
<p>I have a list of dictionaries in this form:</p>
<pre><code>d_old=[{"color":"red","store":"1","s_d":{"M":"1","L":"2"}},       
       {"color":"blue","store":"2","s_d":{"S":"3","XL":"4"}}]
</code></pre>
<p>My goal is to transform this into:</p>
<pre><code>d_new=[{"color":"red","store":"1","Size":"M", "Stock":"1"},
       {"color":"red","store":"1","Size":"L", "Stock":"2"},
       {"color":"blue","store":"2","Size":"S", "Stock":"3"},
       {"color":"blue","store":"2","Size":"XL", "Stock":"4"}]
</code></pre>
<p>I wrote this, it works but I like to know if there is a better way:
The keys are always defined in a list, and here for simplification, only 2 keys are shown, there is more.</p>
<pre><code>def transform_data(d_old):
    d_new_list =[]
    headers=["color","store"]
    for d in d_old:
        for key,value in d["s_d"].items():
            temp_dict = {header:d[header] for header in headers}
            temp_dict["Size"] = key
            temp_dict["Stock"] = value
            d_new_list.append(temp_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want hardcode the keys, you can try this Pythonic way </p>
<pre><code>&gt;&gt;&gt; [dict({"Size":k,"Stock":v},**i) for i in d_old for k,v in i.pop("s_d").items()]

[{'color': 'red', 'Size': 'M', 'store': '1', 'Stock': '1'}, 
 {'color': 'red', 'Size': 'L', 'store': '1', 'Stock': '2'}, 
 {'color': 'blue', 'Size': 'S', 'store': '2', 'Stock': '3'}, 
 {'color': 'blue', 'Size': 'XL', 'store': '2', 'Stock': '4'}]
</code></pre>
<p><code>dict({"Size":k,"Stock":v},**i)</code> can merge the new dict with the old dict, after you removed the <code>s_d</code> by <code>dict.pop()</code> method.</p>
<p>By the way, if you want keep the <code>d_old</code>: </p>
<p>Try this way:</p>
<pre><code>&gt;&gt;&gt; [dict({"Size":k,"Stock":v},**{m:i[m] for m in i if m!='s_d'}) for i in d_old for k,v in i["s_d"].items()]
[{'color': 'red', 'Size': 'M', 'store': '1', 'Stock': '1'}, {'color': 'red', 'Size': 'L', 'store': '1', 'Stock': '2'}, {'color': 'blue', 'Size': 'S', 'store': '2', 'Stock': '3'}, {'color': 'blue', 'Size': 'XL', 'store': '2', 'Stock': '4'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use a nested <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>d_old = [{'color': 'red', 'store': '1', 's_d': {'M': '1', 'L': '2'}},
         {'color': 'blue', 'store': '2', 's_d': {'S': '3', 'XL': '4'}}]

d_new = [{'color': item['color'], 'store': item['store'],
          'size': size, 'stock': stock}
         for item in d_old for size, stock in item['s_d'].items()]
</code></pre>
<p>if you do not want to hardcode the keys:</p>
<pre><code>d_new = [dict({key: values for key, values in item.items() if key != 's_d'},
              size=size, stock=stock)
         for item in d_old for size, stock in item['s_d'].items()]
</code></pre>
</div>
<span class="comment-copy">If you don't want hardcode the keys, try my solution.</span>
<span class="comment-copy">Great solution! Thank you :)</span>
<span class="comment-copy">would you mind giving my question an upvote?</span>
<span class="comment-copy">this solution changes the original <code>dict</code> by popping off the <code>'s_d'</code> key. not sure if that side-effect is wanted.</span>
<span class="comment-copy">This will hardocde the keys for the dictionary, is there a way to avoid that? Since the keys can change.</span>
