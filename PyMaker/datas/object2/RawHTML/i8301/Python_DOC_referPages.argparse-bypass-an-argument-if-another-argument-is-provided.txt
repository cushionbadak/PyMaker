<div class="post-text" itemprop="text">
<p>Following <a href="https://warrenguy.me/blog/regenerating-rsa-private-key-python" rel="nofollow noreferrer">this post</a> I'm creating a small Python script that can input a public RSA key and output a private RSA key. </p>
<p>It now works by passing the argument this way:</p>
<pre><code>./Converter.py -input publikey.pem
</code></pre>
<p>And this is the code:</p>
<pre><code>&lt;!-- language: lang-py --&gt;

parser = argparse.ArgumentParser()
parser.add_argument('-i', dest='infile', help="input a .pem file which contains pubilc key")
args = parser.parse_args()
# --- Here we search for n and e ---
PublicKey = args.infile
OpenPublicKey = open(PublicKey, 'r')
ReadPublicKey = OpenPublicKey.read()
TheKey = RSA.importKey(ReadPublicKey)
n = long(TheKey.n)
e = long(TheKey.e)
print 'This is modulus n: ', n, '\n'
print 'This is public exponent e: ', e, '\n'
</code></pre>
<p>I also want the script to work when there is no public key <code>.pem</code> file and in that case the user need to input <code>n</code> and <code>e</code> this way:</p>
<pre><code>./Converter.py -n 7919 -e 65537
</code></pre>
<p>I'm using <code>argparse</code> and basically now Python is extracting <code>n</code> and <code>e</code> from the <code>.pem</code> file.</p>
<p>But I want <code>argparse</code> to bypass this extraction when <code>n</code> and <code>e</code> are provided by the user </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!python2
import argparse
from Crypto.PublicKey import RSA
parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required=True)

group.add_argument('-f','--infile', help="input a .pem file which contains pubilc key")
group.add_argument('-ne',nargs=2, help="value of n and e")

args = parser.parse_args()
# --- Here we search for n and e ---
if args.infile:
    PublicKey = args.infile
    OpenPublicKey = open(PublicKey, 'r')
    ReadPublicKey = OpenPublicKey.read()
    TheKey = RSA.importKey(ReadPublicKey)
    n = long(TheKey.n)
    e = long(TheKey.e)

else:
    n,e=map(long,args.ne)
print 'This is modulus n: ', n
print 'This is public exponent e: ', e
</code></pre>
<p>For file input:</p>
<pre><code>./Converter.py -f publickey.pem
</code></pre>
<p>For variable input:</p>
<pre><code>./Converter.py -ne 4 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just add optional keyword arguments for <code>-n</code> and <code>-e</code></p>
<pre><code>parser.add_argument('-n', type=int)
parser.add_argument('-e', type=int)
</code></pre>
<p>and if <code>args.n and args.e</code> evaluates to <code>True</code> then ignore the input argument and skip the code that handles it.</p>
</div>
<span class="comment-copy">In order to find the private key for a given public key, you will have to factor the modulus <code>n</code>. Keep in mind that the modulus <code>n</code> should be larger than <code>e</code> (actually <code>Î»(n) &gt; e</code>)</span>
<span class="comment-copy">it works @SmartManoj but how argparse knows INFILE as it os not declared in ('-i','--infile', help="input a .pem file which contains pubilc key")? Is it taken from --infile? But that should't be a second option for the command line?</span>
<span class="comment-copy">it takes from the long option '--infile' .<a href="https://docs.python.org/3/library/argparse.html#dest" rel="nofollow noreferrer">Source</a></span>
