<div class="post-text" itemprop="text">
<p>Python Collection <code>Counter.most_common(n)</code> method returns the top n elements with their counts. However, if the counts for two elements is the same, how can I return the result sorted by alphabetical order?</p>
<p>For example: for a string like: <code>BBBAAACCD</code>, for the "2-most common" elements, I want the result to be for specified <code>n = 2</code>:</p>
<pre><code>[('A', 3), ('B', 3), ('C', 2)]
</code></pre>
<p>and NOT:</p>
<pre><code>[('B', 3), ('A', 3), ('C', 2)]
</code></pre>
<p>Notice that although <code>A</code> and <code>B</code> have the same frequency, <code>A</code> comes before <code>B</code> in the resultant list since it comes before <code>B</code> in alphabetical order.</p>
<pre><code>[('A', 3), ('B', 3), ('C', 2)]
</code></pre>
<p>How can I achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are <strong>two</strong> issues here:</p>
<ol>
<li>Include duplicates when considering top <em>n</em> most common values <strong>excluding duplicates</strong>.</li>
<li>For any duplicates, order alphabetically.</li>
</ol>
<p>None of the solutions thus far address the first issue. You can use a heap queue with the <code>itertools</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>unique_everseen</code> recipe</a> (also available in 3rd party libraries such as <a href="https://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.unique" rel="nofollow noreferrer"><code>toolz.unique</code></a>) to calculate the <em>n</em>th largest count.</p>
<p>Then use <code>sorted</code> with a custom key.</p>
<pre><code>from collections import Counter
from heapq import nlargest
from toolz import unique

x = 'BBBAAACCD'

c = Counter(x)
n = 2
nth_largest = nlargest(n, unique(c.values()))[-1]

def sort_key(x):
    return -x[1], x[0]

gen = ((k, v) for k, v in c.items() if v &gt;= nth_largest)
res = sorted(gen, key=sort_key)

[('A', 3), ('B', 3), ('C', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would first sort your output array in alphabetical order and than sort again by most occurrences which will keep the alphabetical order:</p>
<pre><code>from collections import Counter
alphabetic_sorted = sorted(Counter('BBBAAACCD').most_common(3), key=lambda tup: tup[0])
final_sorted = sorted(alphabetic_sorted, key=lambda tup: tup[1], reverse=True)
print(final_sorted)
</code></pre>
<p>Output:</p>
<pre><code>[('A', 3), ('B', 3), ('C', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would go for:</p>
<pre><code>sorted(Counter('AAABBBCCD').most_common(), key=lambda t: (-t[1], t[0]))
</code></pre>
<p>This sorts count descending (as they are already, which should be more performant) and then sorts by name ascending in each equal count group</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one of the problems I got in the interview exam and failed to do it. Came home slept for a while and solution came in my mind.  </p>
<pre><code>from collections import Counter


def bags(list):
    cnt = Counter(list)
    print(cnt)
    order = sorted(cnt.most_common(2), key=lambda i:( i[1],i[0]), reverse=True)
    print(order)
    return order[0][0]


print(bags(['a','b','c','a','b']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter


s = 'qqweertyuiopasdfghjklzxcvbnm'

s_list = list(s)

elements = Counter(s_list).most_common()

print(elements)
alphabet_sort = sorted(elements, key=lambda x: x[0])
print(alphabet_sort)
num_sort = sorted(num_sort, key=lambda x: x[1], reverse=True)
print(num_sort)
</code></pre>
<p>if you need to get slice:  </p>
<pre><code>print(num_sort[:3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter
print(sorted(Counter('AAABBBCCD').most_common(3)))
</code></pre>
<p>This question seems to be a duplicate
<a href="https://stackoverflow.com/questions/20950650/how-to-sort-counter-by-value-python">How to sort Counter by value? - python</a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/20950650/how-to-sort-counter-by-value-python">How to sort Counter by value? - python</a></span>
<span class="comment-copy">@HarshaW no, it's not a duplicate. I just updated my question to clarify what I am trying to achieve. Please review and let me know if you have some thoughts.</span>
<span class="comment-copy">it's don't work with <code>'qqweertyuiopasdfghjklzxcvbnm'</code> string</span>
<span class="comment-copy">But this doesn't include duplicates when user wants "top 2 values", e.g. see <a href="https://stackoverflow.com/a/53156058/9209546">my answer</a>.</span>
<span class="comment-copy">Oh that wasn't explicitly stated in the question</span>
<span class="comment-copy">Possibly, but it's implicit in the output. I agree that the question could be more clearly written (I'll try to do that).</span>
<span class="comment-copy">but if you will use more elements in list the result don't sorted by alphabetical order, for example try use, <code>print(bags(['a','b','c','a','b', 'c', 'c', 'd', 'd']))</code> and <code>most_common(3)</code> sometimes it returns <code>[('c', 3), ('b', 2), ('a', 2)]</code> but i always wait <code>[('c', 3), ('a', 2), ('b', 2)]</code></span>
<span class="comment-copy">this doesn't work. If you make 'A' not the most common, it undoes the most_common and returns it in alphabetical order.</span>
