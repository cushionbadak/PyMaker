<div class="post-text" itemprop="text">
<p>apologies if this isn't the right place to ask, but I did some searching and couldn't find much to point me in the right direction. I wasn't quite sure what to search for. I am a novice with python and programming in general, but usually can do enough googling and stealing other code snippets to get my projects running. However I'm at a bit of a roadblock here.</p>
<p>I need to control an Adafruit DotStar lightstrip with a flask web browser app. I've been able to get the flask app working, I've done a simple proof of concept with turning an LED on and off etc., and I can start my lightstrip script but the code I'm trying to run for the lightstrip needs to loop continuously and still be able to change "modes". I have several different images that display on the light strip and I would like to be able to select which one(s) is/are playing, but for now mainly I would just like to be able to start and stop a "shuffle all" mode. If I run the module in a while loop it just loops forever and I can't change the argument to a different "mode". I built a simple script based on Adafruit's DotStar library (specifically the image persistence of vision script, I'm just using PNG images as the map for the different lightstrip "shows").</p>
<p>It all currently works except it only runs each mode once obviously. I had it all in a while loop and it just looped the first selected mode forever and I was unable to turn it off or switch modes. I also thought maybe I should use multiprocessing, and I looked into getting that working, but I couldn't figure out how to stop a process once it started.</p>
<p>Here is the light strip script:</p>
<p>(the 'off' mode is just a black image. I'm sure theres a cleaner way to do this but I'm not sure on how to do that either)</p>
<pre><code>import Image
from dotstar import Adafruit_DotStar
import random

def lightstrip(mode):
    loopLength = 120        #loop length in pixels

    fade  = "/home/pi/lightshow/images/fade.png"
    sparkle = "/home/pi/lightshow/images/sparkle.png"
    steeplechase = "/home/pi/lightshow/images/steeplechase.png"
    bump = "/home/pi/lightshow/images/bump.png"
    spaz = "/home/pi/lightshow/images/spaz.png"
    sine = "/home/pi/lightshow/images/sine.png"
    bounce = "/home/pi/lightshow/images/bounce.png"
    off = "/home/pi/lightshow/images/null.png"

    numpixels = 30
    datapin   = 23
    clockpin  = 24
    strip     = Adafruit_DotStar(numpixels, 100000)

    rOffset = 3
    gOffset = 2
    bOffset = 1

    strip.begin()

    if mode == 1:
        options = [fade, sparkle, steeplechase, bump, spaz, sine, bounce]
        print "Shuffling All..."
    if mode == 2:
        options = [bump, spaz, sine, bounce]
        print "Shuffling Dance..."
    if mode == 3:
        options = [fade, sparkle, steeplechase]
        print "Shuffling Chill..."
    if mode == 0:
        choice = off
        print "Lightstrip off..."

    if mode != 0:
        choice = random.choice(options)
    print "Loading..."
    img       = Image.open(choice).convert("RGB")
    pixels    = img.load()
    width     = img.size[0]
    height    = img.size[1]
    print "%dx%d pixels" % img.size

    # Calculate gamma correction table, makes mid-range colors look 'right':
    gamma = bytearray(256)
    for i in range(256):
        gamma[i] = int(pow(float(i) / 255.0, 2.7) * 255.0 + 0.5)

    # Allocate list of bytearrays, one for each column of image.
    # Each pixel REQUIRES 4 bytes (0xFF, B, G, R).
    print "Allocating..."
    column = [0 for x in range(width)]
    for x in range(width):
        column[x] = bytearray(height * 4)

    # Convert entire RGB image into column-wise BGR bytearray list.
    # The image-paint.py example proceeds in R/G/B order because it's counting
    # on the library to do any necessary conversion.  Because we're preparing
    # data directly for the strip, it's necessary to work in its native order.
    print "Converting..."
    for x in range(width):          # For each column of image...
        for y in range(height): # For each pixel in column...
            value             = pixels[x, y]    # Read pixel in image
            y4                = y * 4           # Position in raw buffer
            column[x][y4]     = 0xFF            # Pixel start marker
            column[x][y4 + rOffset] = gamma[value[0]] # Gamma-corrected R
            column[x][y4 + gOffset] = gamma[value[1]] # Gamma-corrected G
            column[x][y4 + bOffset] = gamma[value[2]] # Gamma-corrected B

    print "Displaying..."
    count = loopLength
    while (count &gt; 0):

        for x in range(width):         # For each column of image...
            strip.show(column[x])  # Write raw data to strip
            count = count - 1
</code></pre>
<p>And the main.py script for running the web app:</p>
<pre><code>from flask import *
from lightshow import *
from multiprocessing import Process
import RPi.GPIO as GPIO
import Image
from dotstar import Adafruit_DotStar
import random
import time

app = Flask(__name__)


@app.route("/")
def hello():
    return render_template('index.html')

@app.route("/lightstrip/1", methods=['POST'])
def shuffleall():
    lightstrip(1)
    return ('', 204)

@app.route("/lightstrip/2", methods=['POST'])   
def shuffledance():
    lightstrip(2)
    return ('', 204)

@app.route("/lightstrip/3", methods=['POST'])
def shufflechill():
    lightstrip(3)
    return ('', 204)

@app.route("/lightstrip/0", methods=['POST'])
def off():
    lightstrip(0)   
    return ('', 204)



if __name__ == "__main__":
    app.run(host='0.0.0.0', debug=True)
</code></pre>
<p>Again I'm at a bit of a loss here, this may be simple fix or I may be approaching it totally wrong but any and all help would be appreciated. I am a complete beginner to approaching a problem like this. Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example showing how to start and stop processes using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> and <a href="https://pythonhosted.org/psutil" rel="nofollow noreferrer">psutil</a>. In this example the <code>task_runner</code> kills any running processes before starting a new one. </p>
<pre><code>from flask import Flask
import multiprocessing
import psutil

app = Flask(__name__)

def blink(var):
    while True:
        # do stuff
        print(var)

def task_runner(var):
    processes = psutil.Process().children()
    for p in processes:
        p.kill()
    process = multiprocessing.Process(target=blink, args=(var,))
    process.start()

@app.route("/red")
def red():
    task_runner('red')
    return 'red started'

@app.route("/blue")
def blue():
    task_runner('blue')
    return 'blue started'

if __name__ == "__main__":
    app.run()
</code></pre>
<p>For your question, the <code>task_runner</code> would look something like:</p>
<pre><code>def task_runner(mode):
    processes = psutil.Process().children()
    for p in processes:
        p.kill()
    process = multiprocessing.Process(target=lightstrip, args=(mode,))
    process.start()
</code></pre>
</div>
