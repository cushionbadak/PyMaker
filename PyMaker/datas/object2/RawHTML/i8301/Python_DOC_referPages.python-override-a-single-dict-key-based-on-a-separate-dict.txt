<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary">Check if a given key already exists in a dictionary</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>I'm sure a question like this exists somewhere on here but I can't seem to find it. I have the following dictionary called <code>query</code>:</p>
<pre><code>query = {'day': 0, 'item': 'Chipotle'}
</code></pre>
<p>And a mapping dictionary:</p>
<pre><code>day_mapping = {0:2, 1:3, 2:4, 3:5, 4:6, 5:7, 6:1}
</code></pre>
<p>I need to override <code>query</code> to produce the following dictionary based on the mapping:</p>
<pre><code>query = {'day': 2, 'item': 'Chipotle'}
</code></pre>
<p>Note <code>query</code> may or may not contain the key <code>day</code> so the following should return no error:</p>
<pre><code>query = {'item': 'Chipotle'}
</code></pre>
<p>This is what I've come up with so far but there's gotta be a better way using list comprehension or something:</p>
<pre><code>for k, v in query.items():
    if k == 'day':
        query[k] = day_mapping[v]
</code></pre>
<p>The reason for this is the numeric representation for days is different for python's <code>calendar</code> library and MongoDB's <code>aggregation</code> framework. Kinda annoying but I'm sure this happens all over the place.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just <code>try</code> to replace it. This avoids one unnecessary hashing (compared to using <code>if 'day' in query:</code>) or looping over the dictionary and follows Pythons <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP principle</a>:</p>
<pre><code>try:
    query['day'] = day_mapping[query['day']]
except KeyError:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <code>dict.get(..)</code> to check for the presence of <code>'day'</code> key in your <code>dict</code> as:</p>
<pre><code>query = {'day': 0, 'item': 'Chipotle'}
day_mapping = {0:2, 1:3, 2:4, 3:5, 4:6, 5:7, 6:1}

day = query.get('day')  # returns `None` if 'day' key not found in `dict`
if day is not None:
    query['day'] = day_mapping[day]
</code></pre>
<p>Updated value of <code>query</code> dict in above example will be:</p>
<pre><code>{'day': 2, 'item': 'Chipotle'}
</code></pre>
</div>
<span class="comment-copy">why are you looping over query.items at all? You can just do a simple <code>if 'day' in query</code></span>
<span class="comment-copy"><code>if 'day' in query: query['day'] = day_mapping[query['day']]</code></span>
<span class="comment-copy">You can either use some of the approaches in the dupe, or go with the EAFP approach. It depends how exceptional you expect such a case to be. If it is truly exceptional, exceptions are the way to go.</span>
