<div class="post-text" itemprop="text">
<p>I am trying to perform conversion from a lowercase to uppercase on a string without using any inbuilt functions (other than ord() and char()). Following the logic presented on a different thread here , I came up with this.</p>
<pre><code>def uppercase(str_data):
   ord('str_data')
   str_data = str_data -32
   chr('str_data')
   return str_data
print(uppercase('abcd'))
</code></pre>
<p>However I am getting an error output: TypeError: ord() expected a character, but string of length 8 found.What am I missing here? </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to execute ord() for each character of your input string. instead of the input string:</p>
<pre><code>def uppercase(str_data):
    return ''.join([chr(ord(char) - 32) for char in str_data if ord(char) &gt;= 65])

print(uppercase('abcdé--#'))
&gt;&gt;&gt; ABCDÉ
</code></pre>
<p>Without join:</p>
<pre><code>def uppercase(str_data):
    result = ''
    for char in str_data:
        if ord(char) &gt;= 65:
            result += chr(ord(char) - 32)
    return result
print(uppercase('abcdé--#λ'))
&gt;&gt;&gt; ABCDÉΛ
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way, in my opinion is using a helper string, representing the alphabet, if you do not want to use <code>chr()</code> and <code>ord()</code>:</p>
<pre><code>def toUppercase(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    result = ''
    for x in s:
        if x not in alphabet or alphabet.index(x)&gt;=26:
            result += x
        else:
            result += alphabet[alphabet.index(x)+26]
    return result
</code></pre>
<p>This also handles punctuation such as <code>;</code> or <code>.</code>.</p>
<hr/>
<h2>Update:</h2>
<p>As per the OP's request, this is a version without <code>index()</code>:</p>
<pre><code>def toUppercase(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    result = ''
    for x in s:
        for pos in range(52):
            if alphabet[pos] == x:
                i = pos
        if x not in alphabet or i&gt;=26:
            result += x
        else:
            result += alphabet[i+26]
    return result

print(toUppercase('abcdj;shjgh'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Program to <code>convert</code> the string to uppercase without using <code>inbuilt</code> <code>function</code></h1>
<pre><code>Str1=input("Enter the string to be converted uppercase: ")

for i in range (0,len(Str1)):

   x=ord(Str1[i])
   if x&gt;=97 and x&lt;=122:
       x=x-32
   y=chr(x)
   print(y,end="")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>ord()- Return the Unicode code point for a one-character string.</p>
<p>You have to send a one character string as an argument. Here, you are sending the string 'abcd' which has 4 characters which is causing the issue. Send each character separately to the function and thus do 4 calls to the function to get the result.</p>
</div>
<span class="comment-copy">We need to know more about the constraints. Can the input string only contain lower case alphabetic characters?</span>
<span class="comment-copy">Also, "I am not getting any output" seems unlikely. The output should be <code>TypeError: ord() expected a character, but string of length 4 found</code>.</span>
<span class="comment-copy">Also how are <code>ord</code> and <code>chr</code> (which you misspelled) not inbuilt functions?</span>
<span class="comment-copy">My apologies, I have rectified the misspelled chr. I am allowed to use chr() and ord() functions.</span>
<span class="comment-copy">On the one hand, I understand the rationale of teachers restricting the use of various built-in functions and methods when they are trying to teach particular programming concepts. OTOH, the resulting code is often rather un-Pythonic: Python is famous for coming with "batteries included", and a Python course should teach you how to use those batteries, not forbid you from using them.</span>
<span class="comment-copy">Does not work for special characters like <code>;</code> or <code>/</code></span>
<span class="comment-copy">Thanks for your response. Can you suggest without the join function? I am not allowed to use it. Also, @Mr -Xcoder, I can pass of special characters such as ; or / as exceptions. Using only alphabets for my case. Simple words</span>
<span class="comment-copy">edited - without use of join()</span>
<span class="comment-copy">Now it is better, it does not use <code>index()</code> as well and now that it meets the requirements it's a really good answer.</span>
<span class="comment-copy">Many thanks Maurice ! Works perfectly fine.</span>
<span class="comment-copy">Kind Sir, Thanks for your response. However I am not allowed to use the join function. I am beginner in python still and dunno if the index is an inbuilt function or not. If yes, then again I cannot use it.</span>
<span class="comment-copy">@phoenix_9 I will provide a version with no <code>join()</code> in a sec.</span>
<span class="comment-copy">@phoenix_9 Done, check the updated code... There was actually no need for <code>join()</code>, silly me. My mistake.</span>
<span class="comment-copy">I looked over <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions in Python</a>, and there is no <code>index()</code> in that list.</span>
<span class="comment-copy">The OP is probably not allowed to use <code>str</code> methods like <code>.index</code> if they aren't allowed to use other <code>str</code> methods like  <code>.upper</code> or <code>.join</code>.</span>
<span class="comment-copy">Terribly inefficient. You cannot do 100 calls if you have a 100-characters string.</span>
<span class="comment-copy">Agreed. I was just giving the solution for this case.</span>
