<div class="post-text" itemprop="text">
<p>When comparing strings in python e.g. </p>
<p>if "Hello" == "Hello":
    #execute certain code</p>
<p>I am curious about what the code is that compares the strings. So if i were to compare these in c i would just compare each character and break when one character doesn't match. i'm wondering exactly what the process is of comparing two strings like this, i.e. when it will break and if there is any difference between this comparison and the method said above other than redundancy in lines of code</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to assume you are using CPython here, the standard Python.org implementation. Under the hood, the Python string type is implemented in C, so yes, testing if two strings are equal is done exactly like you'd do it in C.</p>
<p>What it does is use the <a href="https://linux.die.net/man/3/memcmp" rel="noreferrer"><code>memcmp()</code> function</a> to test if the two <code>str</code> objects contain the same data, see the <a href="https://github.com/python/cpython/blob/v3.6.1/Objects/unicodeobject.c#L10967-L10986" rel="noreferrer"><code>unicode_compare_eq</code> function defined in <code>unicodeobject.c</code></a>:</p>
<pre class="lang-c prettyprint-override"><code>static int
unicode_compare_eq(PyObject *str1, PyObject *str2)
{
    int kind;
    void *data1, *data2;
    Py_ssize_t len;
    int cmp;

    len = PyUnicode_GET_LENGTH(str1);
    if (PyUnicode_GET_LENGTH(str2) != len)
        return 0;
    kind = PyUnicode_KIND(str1);
    if (PyUnicode_KIND(str2) != kind)
        return 0;
    data1 = PyUnicode_DATA(str1);
    data2 = PyUnicode_DATA(str2);

    cmp = memcmp(data1, data2, len * kind);
    return (cmp == 0);
}
</code></pre>
<p>This function is only called if <code>str1</code> and <code>str2</code> are not the same object (that's an easy and cheap thing to test). It first checks if the two objects are the same length and store the same kind of data (string objects use a <a href="https://www.python.org/dev/peps/pep-0393/" rel="noreferrer">flexible storage implementation</a> to save memory; different storage means the strings can't be equal).</p>
<p>There are other Python implementations, like Jython or IronPython, which may use different techniques, but it basically will come down to much the same thing.</p>
</div>
<span class="comment-copy">ah i got it now. nice explanation!</span>
<span class="comment-copy">just a quick question do you remeber these things or refer somewhere for this sort of information?</span>
<span class="comment-copy">@anekix: I've been around the CPython implementation often enough to remember where to look. To understand how Python internals work, you can read up on the <a href="https://docs.python.org/3/c-api/" rel="nofollow noreferrer">C-API</a> (including the <a href="https://docs.python.org/3/extending/index.html" rel="nofollow noreferrer">accompanying tutorial</a>) or just browse through the <a href="https://github.com/python/cpython" rel="nofollow noreferrer">source code</a>.</span>
<span class="comment-copy">Thanks it helps a lot :)</span>
