<div class="post-text" itemprop="text">
<p><code>main0</code> doesn't hang but <code>main1</code> hangs. Why??? I thought wrapping the thing into a class should be harmless ...</p>
<p>The child process should simply send the msg it receives back to the main process.</p>
<p>Python3 code:</p>
<pre><code>from multiprocessing import Process, Pipe
def child(conn):
    print("child started")
    while True:
        msg = conn.recv()
        if msg == "quit":
            break
        print("child recv:"+msg)
        print("child sending:" + msg)
        conn.send(msg)
    conn.close()
    print("child ended")


def main0():
    parent_conn, child_conn = Pipe()
    p = Process(target=child, args=(child_conn,))
    p.start()
    parent_conn.send("ping")
    print(parent_conn.recv())
    parent_conn.send("quit")
    print("#parent ended#")
    p.join()


class Parent(object):
    def __init__(self):
        self.parent_conn = None
        self.child_conn = None
        self.p = None

    def start(self):
        self.parent_conn, self.child_conn = Pipe()
        self.p = Process(target=child, args=(self.child_conn,))
        self.p.start() # &lt;--- i initially missed this line
        print("started")

    def send(self, msg):
        print("try to send: " + msg)
        self.parent_conn.send(msg)
        return self.parent_conn.recv()

    def close(self):
        self.parent_conn.send("quit")
        self.p.join()


def main1():
    a = Parent()
    a.start()
    print(a.send("ping"))
    print(a.send("quit"))
    a.close()


if __name__ == '__main__':
    main0()  # doesn't hang
    main1()  # hangs.
</code></pre>
<p>output:</p>
<pre><code>~~~ main 0 ~~~
child started
child recv:ping
child sending:ping
ping
#parent ended#
child ended

~~~ main 1 ~~~
started &lt;Process(Process-1, started)&gt;
try to send: ping
waiting to recv
child started
child recv:ping
child sending:ping
ping
try to send: quit
waiting to recv
child ended
*still hangs ... after adding self.p.start()*
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I missed <code>self.p.start()</code> line at start method. </p>
<p>Also sending <code>quit</code> message to child would not return any message.
The correct <code>main1()</code> should be:</p>
<pre><code>def main1():
    a = Parent()
    a.start()
    print(a.send("ping"))
    a.close()
</code></pre>
<p>Then this is fixed.</p>
</div>
<span class="comment-copy"><code>parent_conn, child_conn = Pipe()</code> Do you mean to assign pipe to both? If so, you should use another <code>=</code> instead of a <code>,</code></span>
<span class="comment-copy">@synchronizer, I modifed the python 3 doc's example at Pipe section of <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/3/library/multiprocessing.html</a></span>
