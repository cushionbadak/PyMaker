<div class="post-text" itemprop="text">
<p>The previous dev has left a really strange <code>not x is None</code> yoda condition in the code:</p>
<pre><code>&gt;&gt;&gt; x = None
&gt;&gt;&gt; not x is None
False
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; not x is None
True
</code></pre>
<p>After some testing, I seem the same output as <code>x is not None</code>.</p>
<pre><code>&gt;&gt;&gt; x = None
&gt;&gt;&gt; not x is None
False
&gt;&gt;&gt; x is not None
False
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; not x is None
True
&gt;&gt;&gt; x is not None
True
</code></pre>
<p><strong>Is <code>not x is None</code> always equivalent to <code>x is not None</code>?</strong> </p>
<p>To break down the condition, <strong>is it <code>not (x is None)</code> or <code>(not x) is None</code></strong>? Or will the former always be equivalent to the latter?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>is</code> has higher precendence than <code>not</code>, then the expressions are equivalent:</p>
<p>In case <code>x = None</code>:
<code>x is None</code> evaluates to <code>True</code>, and <code>not x is None</code> evaluates to <code>False</code>
In case <code>x = 1</code>:
<code>x is None</code> evaluates to <code>False</code>, and <code>not x is None</code> evaluates to <code>True</code></p>
<p>In case <code>x = None</code>:
<code>x is not None</code> evaluates to <code>False</code>
In case <code>x = 1</code>:
<code>x is not None</code> evaluates to <code>True</code>.</p>
<p>Therefore, even though the actions are not syntactically equivalent, the results are equivalent.</p>
<p>This is the AST of <code>not x is None</code>:</p>
<p><a href="https://i.stack.imgur.com/FTWt3.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/FTWt3.png"/></a></p>
<p>This is the AST of <code>x is not None</code>:</p>
<p><a href="https://i.stack.imgur.com/RWSAv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/RWSAv.png"/></a></p>
<p>As can be seen in the second diagram, the inner node is the compare node, and therefore <code>x is None</code> is evaluated before the <code>not</code>.</p>
<p>Regarding actual evaluation of the expression, it seems that python creates the same bytecode for both. It can be seen in this example:</p>
<pre><code>def foo(x):
    x is not None


def bar(x):
    not x is None

import dis
dis.dis(foo)
dis.dis(bar)
</code></pre>
<p>As both generate:</p>
<pre><code>      0 LOAD_FAST                0 (x)
      3 LOAD_CONST               0 (None)
      6 COMPARE_OP               9 (is not)
      9 POP_TOP             
     10 LOAD_CONST               0 (None)
     13 RETURN_VALUE 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>is not</code> is (I believe, the only) two-keyword operator in Python, and <code>x is not y</code> is entirely equivalent to <code>not x is y</code>. The same result will also be returned by <code>id(x) != id(y)</code>. The canonical spelling for best reader comprehension would be <code>x is not y</code>.</p>
</div>
<span class="comment-copy">It's all about the operator precedence. Read this answer <a href="http://stackoverflow.com/questions/31421379/why-does-nottrue-in-false-true-return-false/31458009#31458009" title="why does nottrue in false true return false">stackoverflow.com/questions/31421379/…</a></span>
<span class="comment-copy">Yup according to the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">document</a>, <b>not</b> has lower precedence than comparison <b>is</b>. So your former assumption should be correct.</span>
<span class="comment-copy">A “Yoda condition” would be <code>None is x</code>.</span>
<span class="comment-copy"><code>not in</code> is another.</span>
<span class="comment-copy">This is why I try to avoid being too bombastic about my beliefs - there's usually someone better-informed or smarter to correct me. Thanks!</span>
