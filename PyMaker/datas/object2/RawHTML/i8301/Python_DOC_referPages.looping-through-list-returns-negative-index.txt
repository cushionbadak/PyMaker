<div class="post-text" itemprop="text">
<p>I'm solving a puzzle that takes in a list, loops through each index and sums the values to the left and to the right of the current index. If it finds an index at which the sum of the values to its left are equal to the sum of the values to its right, then return that index.</p>
<p>For example:
[1,2,3,4,3,2,1]
If I am at index 3 (value 4), we see that the sum of values of elements to its left and right are equal.
(1 + 2 + 3) = (3 + 2 + 1).</p>
<p>However, when the input is a list of negative values, it returns a negative index. This is my code:</p>
<pre><code>def get_equal_sum(list):
    for i in list:
        if sum(list[:i]) == sum(list[i+1:]):
            print i

list = [1,2,3,4,3,2,1]
get_equal_sum(list)
&gt;&gt;&gt; 3

list = [-1,-2,-3,-4,-3,-2,-1]
get_equal_sum(list)
&gt;&gt;&gt; -4
</code></pre>
<p>Why is it returning -4 and not 3?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do</p>
<pre><code>for i in list:
    if sum(list[:i]) == sum(list[i+1:]):
</code></pre>
<p><code>i</code> is <em>not</em> the index of the list but the <em>value</em>. The fact that it doesn't crash with <code>IndexError</code> when you feed the slices with negative values is because negative indexing is supported in python (indexes from the end of the list) as long as absolute value is in range (which is the case here). That's probably why you missed that.</p>
<p>If you want indexes you have to use <code>enumerate</code> for instance:</p>
<pre><code>for i,_ in enumerate(l):
    if sum(l[:i]) == sum(l[i+1:]):
</code></pre>
<p>(and change <code>list</code> to <code>l</code> because <code>list</code> is the list type)</p>
<p>Note the <code>i,_</code> notation to unpack index/value and discard the value which isn't needed here. You could also go with the classical:</p>
<pre><code>for i in range(len(l)):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in list:
    ...
</code></pre>
<p>This goes through the values of list, not the index (hence you why you get -4), to go through index you must use <a href="https://docs.python.org/2/library/functions.html#xrange" rel="nofollow noreferrer"><code>xrange</code></a> (or <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> for python 3) over the len(list) </p>
<pre><code>for i in xrange(len(list)):
    ...
</code></pre>
<p>or use <code>enumerate(list)</code>.  <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> returns a tuple of the index value pair on any iteratable object, so you would index over a list like this:</p>
<pre><code>for index, value in enumerate(list):
    ...
</code></pre>
<p>In this situation index is likely your i. Additionally, <a href="https://stackoverflow.com/questions/20125172/how-bad-is-shadowing-names-defined-in-outer-scopes">you do not want to shadow names</a> already used by python itself (ie list or max, or min abs etc...) this will overwrite those variables to be what you assign them to in your program.  For example, list is no longer a function that can create a list from <a href="https://docs.python.org/2/library/functions.html#list" rel="nofollow noreferrer"><code>list(iterable)</code></a>, but is now what ever you assign it to, you can no longer use it the default python way.  <a href="https://docs.python.org/2/library/functions.html" rel="nofollow noreferrer">Here is a list of python 2.7 built function in names</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Because -4 is at index -4. You can have negative indices in Python with index -1 being the last element in a list.</p>
</div>
<span class="comment-copy">Theses no <code>3</code> in the second list, so how can it print <code>3</code>? You're printing the elements, not the indices.</span>
<span class="comment-copy">You probably shouldn't shadow built-in types/functions (<code>list</code>) with your variables.</span>
<span class="comment-copy">you're not returning the indexes but the values themselves. Use <code>enumerate</code> to get the indexes.</span>
<span class="comment-copy">then print <code>_</code> for when the <code>if</code> statement is <code>True</code>.</span>
<span class="comment-copy">@GiantsLoveDeathMetal I see your point, but I think OP wants to print index as well (hence the <code>i</code> name). The values are only used when testing sublists for equality. I wouldn't have used <code>_</code> if I wanted to use the variable.</span>
<span class="comment-copy">yeah OP wants to <code>return i</code>, I got that wrong in my comment</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre got it working! I see now why I was returning value instead of index. Thank you!</span>
<span class="comment-copy">using <code>i</code> gave a good clue :) my pleasure.</span>
<span class="comment-copy">well documented and linked. Nice answer.</span>
