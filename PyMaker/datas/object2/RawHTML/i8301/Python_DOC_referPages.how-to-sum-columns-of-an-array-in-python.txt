<div class="post-text" itemprop="text">
<p>How do I add up all of the values of a column in a python array? Ideally I want to do this without importing any additional libraries.</p>
<pre><code>input_val = [[1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5]]

output_val = [3, 6, 9, 12, 15]
</code></pre>
<p>I know I this can be done in a nested for loop, wondering if there was a better way (like a list comprehension)?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip</code> and <code>sum</code> can get that done:</p>
<p><strong>Code:</strong></p>
<pre><code>[sum(x) for x in zip(*input_val)]
</code></pre>
<p><code>zip</code> takes the contents of the input list and transposes them so that each element of the contained lists is produced at the same time.  This allows the <code>sum</code> to see the first elements of each contained list, then next iteration will get the second element of each list, etc...</p>
<p><strong>Test Code:</strong></p>
<pre><code>input_val = [[1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5]]

print([sum(x) for x in zip(*input_val)])
</code></pre>
<p><strong>Results:</strong></p>
<pre><code>[3, 6, 9, 12, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you decide to use any library, numpy easily does this:</p>
<blockquote>
<p>np.sum(input_val,axis=0)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You may also use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> within the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> function:</p>
<pre><code># In Python 3.x 
&gt;&gt;&gt; list(map(sum, zip(*input_val)))
[3, 6, 9, 12, 15]
# explicitly type-cast it to list as map returns generator expression

# In Python 2.x, explicit type-casting to list is not needed as `map` returns list
&gt;&gt;&gt; map(sum, zip(*input_val))
[3, 6, 9, 12, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>[sum(i) for i in zip(*input_val)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>input_val = [[1, 2, 3, 4, 5],
         [1, 2, 3, 4, 5],
         [1, 2, 3, 4, 5]]

output_val = [sum([i[b] for i in input_val]) for b in range(len(input_val[0]))]

print output_val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is the most pythonic way of doing this</p>
<pre><code>map(sum, [x for x in zip(*input_val)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One-liner using list comprehensions: for each column (length of one row), make a list of all the entries in that column, and sum that list.</p>
<pre><code>output_val = [sum([input_val[i][j] for i in range(len(input_val))]) \
                 for j in range(len(input_val[0]))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you can use:</p>
<pre><code>import numpy as np
new_list = sum(map(np.array, input_val))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this code. This will make <code>output_val</code> end up as <code>[3, 6, 9, 12, 15]</code> given your <code>input_val</code>:</p>
<pre><code>input_val = [[1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5]]

vals_length = len(input_val[0])
output_val = [0] * vals_length # init empty output array with 0's
for i in range(vals_length): # iterate for each index in the inputs
    for vals in input_val:
        output_val[i] += vals[i] # add to the same index

print(output_val) # [3, 6, 9, 12, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>output_val=input_val.sum(axis=0)
</code></pre>
<p>this would make the code even simpler I guess</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Numpy you can easily solve this issue in one line:</p>
<p><strong>1: Input</strong></p>
<pre><code>input_val = [[1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5],
             [1, 2, 3, 4, 5]]
</code></pre>
<p><strong>2: Numpy does the math for you</strong></p>
<pre><code>np.sum(input_val,axis=0)
</code></pre>
<p><strong>3: Then finally the results</strong></p>
<pre><code>array([ 3,  6,  9, 12, 15])
</code></pre>
</div>
<span class="comment-copy">This method is the fastest one for an array of size 15561x22417. Thanks!</span>
<span class="comment-copy">You're welcome. Numpy is generally much faster than list comprehensions.</span>
<span class="comment-copy">Running this with the above inputs throws <code>AttributeError: 'list' object has no attribute 'sum'</code></span>
