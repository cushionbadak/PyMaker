<div class="post-text" itemprop="text">
<p>How can I convert tuple of dictionaries like example present below:</p>
<pre><code>({(1, 2): 3},
 {(1, 3): 5},
 {(1, 4): 5},
 {(2, 4): 5},
 {(1, 5): 10},
 {(2, 6): 9},
 {(1, 6): 9},
 {(2, 1): 2},
 {(2, 2): 3},
 {(2, 3): 5},
 {(2, 5): 10},
 {(1, 1): 2})
</code></pre>
<p>to a rather simpler form like dictionary:</p>
<pre><code>{(1, 1): 2,
 (1, 2): 3,
 (1, 3): 5,
 (1, 4): 5,
 (1, 5): 10,
 (1, 6): 9,
 (2, 1): 12,
 (2, 2): 7,
 (2, 3): 7,
 (2, 4): 3,
 (2, 5): 4,
 (2, 6): 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just iterate on the tuples and rebuild the dictionary "flat" using a dictionary comprehension:</p>
<pre><code>a = ({(1, 2): 3},
 {(1, 3): 5},
 {(1, 4): 5},
 {(2, 4): 5},
 {(1, 5): 10},
 {(2, 6): 9},
 {(1, 6): 9},
 {(2, 1): 2},
 {(2, 2): 3},
 {(2, 3): 5},
 {(2, 5): 10},
 {(1, 1): 2})

b = {k:v for t in a for k,v in t.items()}

print(b)
</code></pre>
<p>result:</p>
<pre><code>{(1, 2): 3, (2, 6): 9, (2, 1): 2, (1, 1): 2, (1, 5): 10, (1, 3): 5, (1, 6): 9, (1, 4): 5, (2, 2): 3, (2, 3): 5, (2, 5): 10, (2, 4): 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't use a dict merge comprehension (yet), but you can go via a <a href="https://docs.python.org/3/library/collections.html#chainmap-objects" rel="nofollow noreferrer">chain map</a>:</p>
<pre><code>&gt;&gt;&gt; from collections import ChainMap
&gt;&gt;&gt; dict(ChainMap(*dicts))
{(1, 1): 2,
 (1, 2): 3,
 (1, 3): 5,
 (1, 4): 5,
 (1, 5): 10,
 (1, 6): 9,
 (2, 1): 2,
 (2, 2): 3,
 (2, 3): 5,
 (2, 4): 5,
 (2, 5): 10,
 (2, 6): 9}
</code></pre>
<p><em>Note:</em> <code>collections.ChainMap</code> is new in Python 3.3.  </p>
<p>It's actually a subclass of <code>collections.Mapping</code>, so depending on the use-case you might not even need to convert back to a plain dict.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If <strong>order of the elements in the desired <code>dict</code> matters</strong> and is needed to be sorted as mentioned in the question, use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> as:</p>
<pre><code># `original_list` is the variable holding the
# `list` of `dict` as mentioned in the question

required_dict = OrderedDict(
    sorted((k, v) for sub_list in original_list for k, v in sub_list.items()))

# `OrderedDict` is represented as:
#    OrderedDict([((1, 1), 2), ((1, 2), 3), ((1, 3), 5), ((1, 4), 5), ((1, 5), 10), ((1, 6), 9), ((2, 1), 2), ((2, 2), 3), ((2, 3), 5), ((2, 4), 5), ((2, 5), 10), ((2, 6), 9)])
</code></pre>
<p>but returns sorted <code>dict</code> maintaining the order equivalent to the one desired in the question as:</p>
<pre><code>{(1, 1): 2,
 (1, 2): 3,
 (1, 3): 5,
 (1, 4): 5,
 (1, 5): 10,
 (1, 6): 9,
 (2, 1): 12,
 (2, 2): 7,
 (2, 3): 7,
 (2, 4): 3,
 (2, 5): 4,
 (2, 6): 2}
</code></pre>
<p>But <strong>if order of elements in the desired <code>dict</code> doesn't matter</strong>, you may use simple <em>dict comprehension</em> to achieve it as:</p>
<pre><code>required_dict = {k: v for sub_list in original_list for k, v in sub_list.items()}
</code></pre>
<p>where the value of <code>required_dict</code> will be:</p>
<pre><code>{
    (1, 2): 3, 
    (2, 6): 9, 
    (1, 4): 5, 
    (1, 1): 2, 
    (1, 5): 10, 
    (1, 3): 5, 
    (1, 6): 9, 
    (2, 1): 2, 
    (2, 2): 3, 
    (2, 3): 5, 
    (2, 5): 10, 
    (2, 4): 5
}
</code></pre>
<p><strong>Note:</strong> Order of items in the desired dict are different because dictionaries in Python are unordered by nature.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a=({(1, 2): 3},
 {(1, 3): 5},
 {(1, 4): 5},
 {(2, 4): 5},
 {(1, 5): 10},
 {(2, 6): 9},
 {(1, 6): 9},
 {(2, 1): 2},
 {(2, 2): 3},
 {(2, 3): 5},
 {(2, 5): 10},
 {(1, 1): 2})
&gt;&gt;&gt; {key: x[key] for x in a for key in x}
{(1, 2): 3, (2, 6): 9, (1, 4): 5, (1, 1): 2, (1, 5): 10, (1, 3): 5, (1, 6): 9, (2, 1): 2, (2, 2): 3, (2, 3): 5, (2, 5): 10, (2, 4): 5}
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can update an initial dict with all the dicts form the tuple:</p>
<pre><code>values = ({(1, 2): 3},
 {(1, 3): 5},
 {(1, 4): 5},
 {(2, 4): 5},
 {(1, 5): 10},
 {(2, 6): 9},
 {(1, 6): 9},
 {(2, 1): 2},
 {(2, 2): 3},
 {(2, 3): 5},
 {(2, 5): 10},
 {(1, 1): 2})

d = dict()
reduce(lambda _, v: d.update(v), values)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another one, exclusive to Python 3.5 and newer:</p>
<pre><code>&gt;&gt;&gt; functools.reduce(lambda d1, d2: {**d1, **d2}, values)
{(1, 2): 3, (2, 6): 9, (2, 1): 2, (1, 1): 2, (1, 5): 10, (1, 3): 5, (1, 6): 9, (1, 4): 5, (2, 2): 3, (2, 3): 5, (2, 5): 10, (2, 4): 5}
</code></pre>
</div>
<span class="comment-copy">What did you try and what doesn't work?</span>
<span class="comment-copy">It seems like you should be able to <code>update</code> a dictionary with each element of the tuple.</span>
<span class="comment-copy">it's interesting that variable name is the same :)</span>
<span class="comment-copy">telepathy or "type as fast as you can and choose short variable names"? I'll let you decide :)</span>
