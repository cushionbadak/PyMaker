<div class="post-text" itemprop="text">
<p>With <a href="http://pydoit.org/index.html" rel="nofollow noreferrer">Python doit</a> I want to generate sub-tasks by reading a list of files from a file (that was generated in an earlier task), then <code>yield</code>ing actions for each of those files:</p>
<pre><code>def task_generates_list_of_files():

    def generate_file():

        with open('list_of_files.txt', 'w') as fo:

            for x in range(20):
                fo.write(f'thing_{x}.txt\n')

    return {
        'actions': [generate_file],
        'targets': ['list_of_files.txt']
    }

def task_generate_subtasks_using_file():

    with open('list_of_files.txt', 'r') as fo:

        for filename in fo:

            filename = filename.strip()

            yield {
                'name': filename,
                'actions': [f'program_to_run {filename}'],
                'file_dep': ['list_of_files.txt']
            }
</code></pre>
<p>However, because <code>list_of_files.txt</code> doesn't exist when the tasks are being set up by doit, it raises a <code>FileNotFoundError</code> exception.</p>
<p>I have seen <a href="https://stackoverflow.com/questions/34957460/python-doit-use-arguments-in-dependent-tasks">this answer</a> but am not clear that <code>getargs</code> can work when generating subtasks, because I wouldn't be able to loop through the list of files until they were injected into a Python action, at which point I can't yield any sub-tasks. Doing that results in:</p>
<pre><code>Python Task error:...
It must return:
False for failed task.
True, None, string or dict for successful task
returned &lt;generator object...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the end, I'd missed something I hadn't seen before in the doit documentation: <a href="http://pydoit.org/task_creation.html#delayed-task-creation" rel="nofollow noreferrer">delayed tasks</a>. You can use <code>create_after</code> to defer creation of a task until after a given task is executed.</p>
<p>In my case this allows <code>list_of_files.txt</code> to be generated by <code>task_generates_list_of_files</code> before <code>list_of_files.txt</code> is read within the task definition of <code>task_generate_subtasks_using_file</code>:</p>
<pre><code>from doit import create_after

# Show output
DOIT_CONFIG = {
    'verbosity': 2
}

def task_generates_list_of_files():

    def generate_file():

        with open('list_of_files.txt', 'w') as fo:

            for x in range(20):
                fo.write(f'thing_{x}.txt\n')

    return {
        'actions': [generate_file],
        'targets': ['list_of_files.txt']
    }

@create_after('generates_list_of_files')
def task_generate_subtasks_using_file():

    with open('list_of_files.txt', 'r') as fo:

        for filename in fo:

            filename = filename.strip()

            yield {
                'name': filename,
                'actions': [f'echo {filename}'],
                'file_dep': ['list_of_files.txt']
            }
</code></pre>
</div>
<span class="comment-copy">The <code>returned &lt;generator object...</code> is a major clue. <code>task_generate_subtasks_using_file()</code> is what is called a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator function</a> since it contains a <code>yield</code> statement. The first time it is called it returns an iterable generator object and <b>its</b> methods, like <code>next()</code> must be used to retrieve generated values. More details can be found in the documentation section titled <a href="https://docs.python.org/3/reference/expressions.html#yieldexpr" rel="nofollow noreferrer"><b>Yield expressions</b></a>.</span>
<span class="comment-copy">I understand that, but the problem is specific to Python <code>doit</code> (<a href="http://pydoit.org/index.html" rel="nofollow noreferrer">pydoit.org/index.html</a>) where you can make task functions returning a dictionary with tasks for doit to run, or use <code>yield</code> to make "sub-tasks". However I can't open my <code>list_of_files.txt</code> in the task definitions that are run when <code>doit</code> runs the script, because it doesn't exist until the first task is run. The second part was explaining that I can't use a method to pass values between <code>doit</code> tasks (called <code>getargs</code>) because I can't <code>yield</code> subtasks from a function inside a task (<a href="http://pydoit.org/dependencies.html#getargs" rel="nofollow noreferrer">pydoit.org/dependencies.html#getargs</a>)</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/help/mcve"><i>How to create a <b>Minimal</b>, Complete, and Verifiable example</i></a> that reproduces the problem, then someone may be able to show you how to use <code>getargs</code> to accomplish what you want to do.</span>
<span class="comment-copy">The example I have given is a complete example. <code>pip3 install doit</code>, then place that code in a <code>dodo.py</code>, then run <code>doit</code> in the folder and it produces the same error. The tags on this don't help because it's not so much a Python question as a <code>doit</code> question, and I don't have enough rep to create a new tag. I appreciate what you're saying, and as Python it won't do anything except define two functions, but using <code>doit</code> those <code>task_</code> functions are run to define tasks, and fail because the second task definition is run before the first task, but depends on output from the first task.</span>
