<div class="post-text" itemprop="text">
<p>I have a simple program which looks through a file, finds any numbers inside, and adds them up into a variable called running_total.  My issue seems to be that my file name is the thing that is being read instead of its contents.  </p>
<pre><code>import re

file = input('Enter file name:')
open(file)
print(file)
running_total = None

for line in file:
    line = line.rstrip()
    numbers = re.findall("[0-9]+", line)
    print(numbers)
    for number in numbers:
        running_total += float(number)

print(running_total)
</code></pre>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>file</code> is a string denoting a filename when it comes out of the <code>input</code> function, and it remains a string. So when you iterate over it, you get the letters of the filename one by one.   When you call <code>open(file)</code> that returns an object that can be iterated over to provide file content, but you are not currently giving that object a name or re-using it.  You really mean something like:</p>
<pre><code>file_name = input('Enter file name:')
file_handle = open(file_name)   # this doesn't change file_name, but it does output something new (let's call that file_handle)
for line in file_handle:
    ....
file_handle.close()
</code></pre>
<p>...although the more idiomatic, Pythonic way is to use a <code>with</code> statement:</p>
<pre><code>file_name = input('Enter file name:')
with open(file_name) as file_handle:
    for line in file_handle:
        ....
# and then you don't have to worry about closing the file at the end (or about whether it has been left open if an exception occurs)
</code></pre>
<p>Note that the variable <code>file_handle</code> is an object whose class is called <code>file</code> (which is one of the reasons I've changed the variable names here).</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you'll want to start the running total to a number that can be added to. </p>
<p>Then, you need to get the file handle </p>
<p>And the regex  makes rstrip unnecessary </p>
<pre><code>running_total = 0
with open(file) as f: 
    for line in f:
        running_total += sum(float(x) for x in re.findall("[0-9]+", line))
print(running_total)
</code></pre>
<p>Also here </p>
<p><a href="https://stackoverflow.com/a/35592562/2308683">https://stackoverflow.com/a/35592562/2308683</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use "with open() as" to read your file, because it should close automatically. Otherwise you need to explicitly tell it to close the file. </p>
<p>Assigning running_total as None threw me errors, but giving it a value of 0 fixed this issue. </p>
<p>Also, instead of using regex and stripping lines, just use isnumeric(). This also removes the second for loop you're using, which should be more efficient. </p>
<pre><code>file = input('Enter file name:')
with open(file, 'r') as f:
    file = f.read()
print(file)
running_total = 0
for line in file:
    if line.isnumeric():
        running_total += int(line)
print(running_total)
</code></pre>
<p>I tested this with a txt file containing numbers on their own rows and numbers imbedded in words and it correctly found all instances. </p>
<p>Edit: I just realized the poster wanted to sum all the numbers, not find all the instances. Changed <code>running_total += 1</code> to <code>running_total += int(line)</code>. </p>
</div>
<span class="comment-copy">you need to capture the return from <code>open</code>. It returns a file object, despite its name <code>file</code> is just a string. You will also need to ensure the file is closed after you have used it. <code>running_total = None</code> is wrong, it should be <code>running_total = 0</code>. The values are not interchangeable, adding to <code>None</code> is not a valid operation.</span>
<span class="comment-copy">Start <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Since <code>file</code> is just a string, <code>for line in file</code> is going to loop through the characters in the string.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/3277503/how-do-i-read-a-file-line-by-line-into-a-list">How do I read a file line-by-line into a list?</a> <i>(There may be a better one, but you can see some examples of how a file is opened and the lines iterated through.)</i></span>
<span class="comment-copy">I think you still have to worry about exceptions. The file might not exist, or permissions disallow opening</span>
<span class="comment-copy">@cricket_007 clarified</span>
<span class="comment-copy">I would do <code>with open(file) as ...</code>, or at the very least put the resulting File object into a variable, so that you can cleanup after (file.close()).</span>
<span class="comment-copy">You're reading the whole filename into the memory needlessly here</span>
<span class="comment-copy">I may be getting confused by the term filename. Wouldn't you need the filename?</span>
<span class="comment-copy">Sorry... autocomplete. The whole <i>file</i>... And <code>for line in file</code>, is actually not a line at all, but a <i>character</i></span>
<span class="comment-copy">@cricket_007 That makes more sense. Thank you. Sorry, I thought I missed something with filename. You can instead use list comprehension to do away with loading the entire file and it would work. As for line in file, yes it iterates through the characters. My code will only add individual character numbers together. If it is larger than 9, it doesn't work and your regex version is more suitable. Depends on purpose</span>
<span class="comment-copy">The regex version isn't mine. It was what the question used. So <code>100</code> + <code>1</code> is much different answer than <code>1+0+0+1</code>.</span>
