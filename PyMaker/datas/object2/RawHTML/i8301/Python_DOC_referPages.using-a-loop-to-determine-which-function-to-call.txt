<div class="post-text" itemprop="text">
<p>I have many different methods in a class. Each method contains a function for a unique case. The case is passed to the constructor as a simple integer that identifies which method should be used. 
Is there a better way to set call this function then just a bunch of if statements?</p>
<pre><code>class Class:
    def __init__(self, case):
        self.__case = case # case is a integer from 1 to 10
        if case == 1:
            self.case1()
        elif case == 2:
            self.case2()
        elif case == 3:
            self.case3() 
        ...
        elif case == 10:
            self.case10():

    def case1(self):
        ...
    def case2(self):
        ...
    def case10(self):
</code></pre>
<p>The code works but it is very redundant. Is there a more pythonic way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there are better ways.</p>
<p>If your method names do not follow a pattern but there is a fixed number of them, use a list, then use <code>case</code> as an index:</p>
<pre><code>cases = [None, self.case1, self.case2, ..., self.case10]
cases[case]()
</code></pre>
<p>You can build this list up-front with a decorator, but then you'd have to make sure you <a href="https://docs.python.org/3/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">bind the function objects to <code>self</code></a> first:</p>
<pre><code>class Class:
    def __init__(self, case):
        self._cases[case].__get__(self)()

    def case1(self):
        ...
    def case2(self):
        ...
    def case10(self):
        ...

    _cases = [case1, case2, ..., case10]
</code></pre>
<p>If your methods really are sequentially numbered, you can generate the method name and use <code>getattr()</code> to look up the method:</p>
<pre><code>getattr(self, 'case{}'.format(case))()
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python">Replacements for switch statement in Python?</a></span>
