<div class="post-text" itemprop="text">
<p>Given an object or type I can get the object's module using the <code>inspect</code> package</p>
<h3>Example</h3>
<p>Here, given a function I get the module that contains that function:</p>
<pre><code>&gt;&gt;&gt; inspect.getmodule(np.memmap)
&lt;module 'numpy.core.memmap' from ...&gt;
</code></pre>
<p>However what I really want is to get the top-level module that corresponds to the package, in this case <code>numpy</code> rather than <code>numpy.core.memmap</code>.</p>
<pre><code>&gt;&gt;&gt; function_that_I_want(np.memmap)
&lt;module 'numpy' from ...&gt;
</code></pre>
<p><em>Given an object or a module, how do I get the top-level module?</em></p>
</div>
<div class="post-text" itemprop="text">
<p>If you have imported the submodule, then the top-level module must also be loaded in <code>sys.modules</code> already (because that's how the import system works).  So, something dumb and simple like this should be reliable:</p>
<pre><code>import sys, inspect

def function_that_I_want(obj):
    mod = inspect.getmodule(obj)
    base, _sep, _stem = mod.__name__.partition('.')
    return sys.modules[base]
</code></pre>
<p>The module's <a href="https://docs.python.org/3/reference/import.html#__package__" rel="nofollow noreferrer"><code>__package__</code></a> attribute may be interesting for you also (or future readers).  For submodules, this is a string set to the parent package's name (which is not necessarily the top-level module name).  See <a href="https://www.python.org/dev/peps/pep-0366/" rel="nofollow noreferrer">PEP366</a> for more details. </p>
</div>
