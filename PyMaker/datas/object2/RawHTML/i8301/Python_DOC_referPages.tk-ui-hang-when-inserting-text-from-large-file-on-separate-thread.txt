<div class="post-text" itemprop="text">
<p>Even when run in a seperate thread my UI hangs while a large file is being loaded into a Text widget. Is it just because the application is under heavy load or is there a way I can keep the UI functional while this is happening. Im loading several text files in different widgets so the hang up is longer than desired. </p>
<pre><code>from tkinter import *
import threading

i = 'large/text/file/400,000+lines'
root = Tk()

txt = Text(root)
txt.grid()


def loadfile():
    with open(i, 'r') as f:
        a = f.readlines()
        txt.insert('end', ' '.join(a))
        #for line in a:
         #   txt.insert('end', line)

def threadstarter():
    startit = threading.Thread(target=loadfile())
    startit.start()

btn = Button(root, text= 'start', command=lambda: threadstarter())
btn.grid()

root.mainloop()
</code></pre>
<p>Tested on several machines with plenty of resources. </p>
</div>
<div class="post-text" itemprop="text">
<p>What Bryan is saying is that you need to launch a thread like this: </p>
<pre><code>from tkinter import *
import threading

i = 'large/text/file/400,000+lines'
root = Tk()

txt = Text(root)
txt.grid()

def loadfile():
    with open(i, 'r') as f:
        txt.insert('end', f.read())

def threadstarter():
    startit = threading.Thread(target=loadfile)
    startit.start()

btn = Button(root, text= 'start', command=threadstarter)
btn.grid()

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to invoke <code>loadfile</code> in a separate thread with positional/keyword arguments, use the <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer"><code>args</code> and <code>kwargs</code> arguments to <code>threading.Thread</code></a> like so:</p>
<pre><code>def threadstarter():
    startit = threading.Thread(target=loadfile, args=(42,), kwargs={'a': 'foo'})
    startit.start()
</code></pre>
<p>... which would invoke <code>loadfile(42, a='foo')</code> in the thread.</p>
</div>
<span class="comment-copy">What you call a 'separate thread' isn't actually so <i>separate</i> because of the Python's GIL which allows you to run <i>only one Python thread at once</i>.</span>
<span class="comment-copy">How large is large? Also, you're not running the code in a thread. <code>target=loadfile()</code> will immediately run <code>loadfile()</code> and give the results to the <code>target</code> attribute.</span>
<span class="comment-copy">@BryanOakley File size is ~50mb and text file has ~400,000 lines.</span>
<span class="comment-copy">@BryanOakley am I using threading wrong? Maybe thats the problem.</span>
<span class="comment-copy">I am able to read about 100,000 lines / 100mb in under a second.</span>
<span class="comment-copy">thank you for clarifying.</span>
<span class="comment-copy">What's the difference?</span>
<span class="comment-copy">ForceBru -no () at the end of the target. Jonathan, how would you pass a value to the function if you have to call it this way?</span>
<span class="comment-copy"><code>threading.Thread(target=loadfile, args=(arg1, arg2))</code>. Similar with kwargs</span>
