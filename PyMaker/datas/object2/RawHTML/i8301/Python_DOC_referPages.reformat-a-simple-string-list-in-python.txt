<div class="post-text" itemprop="text">
<p>Reformat a string, such as converting a list of authors like </p>
<pre><code>"David Joyner, Ashok Goel, Nic Papin"
</code></pre>
<p>to </p>
<pre><code>"Joyner, D., Goel, A., Papin, N."
</code></pre>
<p>Confused on where to go with this problem. I know it is simple and just uses methods such as <code>.split()</code> and <code>.strip()</code> but can't figure out what combination I need. Please help before I turn into Dobby banging my head on the wall. </p>
</div>
<div class="post-text" itemprop="text">
<p>This should work.    </p>
<pre><code>s = "David Joyner, Ashok Goel, Nic Papin"
s_list = s.split()
s_result = ""
for i,name in enumerate(s_list):
    # Even number elements are first names and should be turned into single letters.
    if i % 2 == 0:
        inital = name[0]
    else:
        # Since we only split on spaces, in the odd case, name has a comma already appended.
        s_result += name + " " + inital + "., "
# [:-2] removes both the trailing space and the comma. 
print(s_result[:-2])

# Joyner, D., Goel, A., Papin N.
</code></pre>
<p>A slightly simpler version would be:</p>
<pre><code>s = "David Joyner, Ashok Goel, Nic Papin"
names = s.split(",")
result = ""
for name in names:
    first, last = name.split()
    result += last + ', ' + first[0] + '., '
print(result[:-2])
</code></pre>
<p>But involves an additional <code>split</code> operation, which would make it slower if you have a huge number of names (otherwise it would be a negligible change).</p>
<p><strong>Doing something specific with the last name:</strong></p>
<p>So if you want to do something specific with the last element of a list you can do it two ways: </p>
<p>The most pythonic would be to use <code>enumerate</code> like in the first example, and capture the case where <code>index == len(list) - 1</code> (the last element):</p>
<pre><code>s = "David Joyner, Ashok Goel, Nic Papin"
names = s.split(",")
result = ""
for index, name in enumerate(names):
    first, last = name.split()
    # Checks if index is lower than last.
    if index &lt; (len(names) - 1):
        result += last + ', ' + first[0] + '., '
    else: 
        result += '&amp; ' + last + ", " + first[0] + '.'
print(result)
</code></pre>
<p>However, if you're dead set against using <code>enumerate</code>, then you can get the same behavior by iterating through the list only to the second to last element, and performing the final operation outside the loop:</p>
<pre><code>s = "David Joyner, Ashok Goel, Nic Papin"
names = s.split(",")
result = ""
for name in names[:-1]:
    first, last = name.split()
    result += last + ', ' + first[0] + '., '
# Final element operation.
first, last = names[-1].split()
result += '&amp; ' + last + ", " + first[0] + '.'
print(result)
</code></pre>
<p>Really you should just use <code>enumerate</code>, this is its intended use case. Regardless of which algorithm you choose, you'll notice we print <code>result</code> and not <code>result[:-2]</code>. This is because we no longer add the unnecessary characters to the last names like we did previously. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://i.stack.imgur.com/OwIgX.jpg" rel="nofollow noreferrer">as far as i've gotten on the updated question with "and" and "&amp;"</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Check out <a href="http://asdf" rel="nofollow noreferrer">list comprehensions</a>, <a href="https://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join</a>, and <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format</a>.  If you use python much you will find them all to be very helpful.</p>
<pre><code>s = "David Joyner, Ashok Goel, Nic Papin"
fl_names = [name.split() for name in s.split(",")]
formatted_names = ["{0}, {1}.".format(last, first[0]) for first, last in fl_names]
result = ", ".join(formatted_names)
</code></pre>
<p>You can also jam everything together with nested list comprehensions but as you can see this can get harder to read quickly.</p>
<pre><code>", ".join(["{0}, {1}.".format(last, first[0]) 
        for first, last in [name.split() for name in s.split(",")]])
</code></pre>
</div>
<span class="comment-copy">Mind posting what you tried so far?</span>
<span class="comment-copy">It would help if you showed your code for this and indicate what part of your code is not working as expected. Ultimately, you want to iterate over the list and do your transformation per iteration.</span>
<span class="comment-copy">apply split twice once on ',' and then on ' ' after that just arrange your values...</span>
<span class="comment-copy">When I try to split twice it says I cant use .split on a List</span>
<span class="comment-copy">posted down below</span>
<span class="comment-copy">This works but can you explain how to do it without the 4th line being so complex? we haven't learned anything about enumerate or how to search for two terms at once like that.</span>
<span class="comment-copy">I added a simpler version, but <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> is a simple builtin function that allows you to iterate a list with its element AND its index.</span>
<span class="comment-copy">what if the string was changed to "David Joyner, Ashok Goel, and Nic Papin" and the desired result was "Joyner, D., Goel, A., &amp; Papin, N. with the &amp; only coming before the last name set, regardless of the length of the string or list</span>
<span class="comment-copy">Added two more examples showing how to do what you're asking with and without <code>enumerate</code>.</span>
<span class="comment-copy">Hi John, just for future reference: the answer section is not for updating your progress on the initial question. You should edit your original question with new information. Additionally, don't post images of code, post them in code blocks (with the error in a separate code block) so that people trying to help you can easily copy and paste your code. :)</span>
