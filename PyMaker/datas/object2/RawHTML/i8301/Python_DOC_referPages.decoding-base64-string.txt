<div class="post-text" itemprop="text">
<p>I'm working with <strong>Python</strong> to do some string decoding and I am trying to understand what does this line of code...</p>
<pre><code>for irradiance_data in struct.iter_unpack("qHHHHfff", irradiance_list_bytes):
                print(irradiance_data)
</code></pre>
<p>In my case irradiance_list_bytes is something like this</p>
<pre><code>"\xf5R\x960\x00\x00\x00\x009\x0f\xb4\x03\x01\x00d\x00\xa7D\xd1BC\x8c\x9d\xc2\xb3\xa5\xf0\xc0\xaer\x990\x00\x00\x00\x000\x0f\xb2\x03\x01\x00d\x00\x8f+\xd1B\x81\x9c\x9d\xc2\xf7\xfb\xe6\xc0u\x96\x9c0\x00\x00\x00\x00.\x0f\xb1\x03\x01\x00d\x00\xfe\x81\xd3B\x8a\r\x9e\xc2\xb4\xe7\x01\xc1\x1a\x7f\x9f0\x00\x00\x00\x00*\x0f\xb0\x03\x01\x00d\x00Z\xf5\xd3B\xedq\x9e\xc2&amp;\xa1\x03\xc1\x94\x82\xa20\x00\x00\x00\x00-\x0f\xb1\x03\x01\x00d\x00\xb6\x8f\xd3Bg\xdf\x9d\xc2\x00\xad\xfd\xc0#\x93\xa50\x00\x00\x00\x000\x0f\xb2\x03\x01\x00d\x00\x95n\xd4B\x1d'\x9e\xc2\x1dW\x01\xc1\xd3\xa1\xa80\x00\x00\x00\x001\x0f\xb2\x03\x01\x00d\x00\x1d\xbc\xd3B\xeb\xca\x9d\xc2s\xbf\xf2\xc0.\xaf\xab0\x00\x00\x00\x001\x0f\xb2\x03\x01\x00d\x00\x13\xad\xd4BJx\x9d\xc2G(\xfb\xc0.\xc2\xae0\x00\x00\x00\x007\x0f\xb4\x03\x01\x00d\x00\xd1\xc9\xd4BS\xb8\x9d\xc2\xf0\xd9\xf8\xc0"
</code></pre>
<p>And the message error is</p>
<pre><code>AttributeError: 'module' object has no attribute 'iter_unpack'
</code></pre>
<p>I beleive that, I have to change "qHHHHfff" to another string format, but I don't understand ?</p>
<p>The complete code is here...</p>
<pre><code>import os
import glob
import exiftool
import base64
import struct 

irradiance_list_tag = 'XMP:IrradianceList'
irradiance_calibration_measurement_golden_tag = 'XMP:IrradianceCalibrationMeasurementGolden'
irradiance_calibration_measurement_tag = 'XMP:IrradianceCalibrationMeasurement'

tags = [ irradiance_list_tag, irradiance_calibration_measurement_tag ]

directory = '/home/stagiaire/Bureau/AAAA/'

channels = [ 'RED' ]

index = 0

for channel in channels:
    files = glob.glob(os.path.join(directory, '*' + channel + '*'))
    with exiftool.ExifTool() as et:
        metadata = et.get_tags_batch(tags, files)
        for file_metadata in metadata:
            irradiance_list = file_metadata[irradiance_list_tag]
            irradiance_calibration_measurement = file_metadata[irradiance_calibration_measurement_tag]
            irradiance_list_bytes = base64.b64decode(irradiance_list)
            print(files[index])
            index += 1            

            for irradiance_data in struct.iter_unpack("qHHHHfff", irradiance_list_bytes):
                print(irradiance_data)
</code></pre>
<p>EDIT</p>
<p>So a stated by Strubbly, this is the solution for this question. </p>
<pre><code>print struct.unpack("I",x[:4])
</code></pre>
<p>for i in range(8):
    start = 4 + i*28
    print struct.unpack("qHHHHfff",x[start:start+28])</p>
</div>
<div class="post-text" itemprop="text">
<p><code>struct.iter_unpack</code> is only available in Python 3 and you are using Python 2.
There is no direct equivalent.  <code>struct.unpack</code> will unpack one lump of 28 bytes (with that format string).  <code>struct.iter_unpack</code> will unpack multiples of 28 bytes in Python 3.</p>
<p>If your data was suitable for <code>struct.iter_unpack</code> with that format code then you could do something like this:</p>
<pre><code>for i in range(0,len(x),28):
    print struct.unpack("qHHHHfff",x[i:i+28])
</code></pre>
<p>Unfortunately your sample data is not a multiple of 28 bytes long and so I would expect an error in Python 3 as well.</p>
<p>Without knowing about your data it is hard to correct your code but, at a guess, you data might have 4 bytes of some other data at the front.  So that could be unpacked with something like this:</p>
<pre><code>print struct.unpack("I",x[:4])
for i in range(8):
    start = 4 + i*28
    print struct.unpack("qHHHHfff",x[start:start+28])
</code></pre>
<p>In this example I have guessed that the first four bytes are an <code>unsigned int</code> but I have no way of knowing if that is correct.  More information is needed.</p>
</div>
<span class="comment-copy">Are you by chance using Python 2? It looks like <code>iter_unpack</code> was added in Python 3: <a href="https://docs.python.org/3/library/struct.html#struct.iter_unpack" rel="nofollow noreferrer">docs.python.org/3/library/struct.html#struct.iter_unpack</a></span>
<span class="comment-copy">The error actually tells you that there is no function called <code>iter_unpack</code> in the <code>struct</code> module. What version of Python are you using? According to the documentation (<a href="https://docs.python.org/3/library/struct.html#struct.iter_unpack" rel="nofollow noreferrer">docs.python.org/3/library/struct.html#struct.iter_unpack</a>), this function was added in 3.4.</span>
<span class="comment-copy">@bernie Yes I am using Python2, so what is the equivalent of that function in Python 2 ?</span>
<span class="comment-copy">@Sven Festersen Yes I am using Python2, so what is the equivalent of that function in Python 2 ?</span>
<span class="comment-copy">Thank you vertu mych sur ! I just tried this code in Python 2...    <code>for i in range(0,len(x),28):     print struct.unpack("qHHHHfff",x[i:i+28])</code>   And it worked !</span>
