<div class="post-text" itemprop="text">
<p>I'm confused about the use of a double for loop in python, this is my code:</p>
<pre><code>import numpy as np

range1 = np.linspace(1,6,10)
range2 = reversed(np.linspace(1,6,10))

for t1 in range1:
    print t1
    for t2 in range2:
        print t1,t2
</code></pre>
<p>The output is this:</p>
<pre><code>1.0
1.0 6.0
1.0 5.44444444444
1.0 4.88888888889
1.0 4.33333333333
1.0 3.77777777778
1.0 3.22222222222
1.0 2.66666666667
1.0 2.11111111111
1.0 1.55555555556
1.0 1.0
1.55555555556
2.11111111111
2.66666666667
3.22222222222
3.77777777778
4.33333333333
4.88888888889
5.44444444444
6.0
</code></pre>
<p>It only executes the inner loop for the first value of the outer loop, why is this happening? How can I get it to loop over all combinations of the first and second variable?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>reversed()</code> produces an <em>iterator</em>; once you reach the end of an iterator, you can't re-use it:</p>
<pre><code>&gt;&gt;&gt; it = reversed([1, 2, 3])
&gt;&gt;&gt; list(it)
[3, 2, 1]
&gt;&gt;&gt; list(it)
[]
</code></pre>
<p>Create a new iterator for the nested loop:</p>
<pre><code>for t1 in range1:
    print t1
    for t2 in reversed(range1):
        print t1,t2
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#reversed" rel="noreferrer"><code>reversed()</code> documentation</a> links to the <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="noreferrer"><em>iterator</em> glossary entry</a>:</p>
<blockquote>
<p>When no more data are available a <code>StopIteration</code> exception is raised instead. <strong>At this point, the iterator object is exhausted</strong> and any further calls to its <code>__next__()</code> method just raise <code>StopIteration</code> again. </p>
</blockquote>
<p>Bold emphasis mine.</p>
</div>
<div class="post-text" itemprop="text">
<p>In every implementation that respects pythons data model the result of <code>reversed</code> can only be exhausted once (because it <em>should</em> return an iterator that is exhausted after the first traversal). After that iterator is exhausted it won't <code>yield</code> any items anymore. But you can simply reverse your array using slicing:</p>
<pre><code>range2 = np.linspace(1,6,10)[::-1]

for t1 in range1:
    print t1
    for t2 in range2:
        print t1,t2
</code></pre>
<p>Basic slicing for <code>numpy.array</code>s is very performant, it doesn't even need to copy the original.</p>
<p>Given that you use <code>array</code>s you should be aware that iterating over them is a very slow operation because every value needs to be unboxed during the iteration. If you <strong>really need</strong> to iterate over one-dimensional <code>array</code>s (hint: you generally don't) you should convert them to <code>list</code>s:</p>
<pre><code>range1 = np.linspace(1,6,10).tolist()
range2 = np.linspace(1,6,10)[::-1].tolist()
</code></pre>
<p>Because <code>tolist</code> is more efficient at the unboxing compared to the (implicit) unboxing in a <code>for</code>-loop.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>reversed</code> returns a iterator. An iterator can only be consumed once.</p>
<p>You consume that iterator during the first iteration.</p>
<p>To use an iterator several times, you can store it in a <code>list</code>:</p>
<pre><code>import numpy as np

range1 = np.linspace(1,6,10)
range2 = list(reversed(np.linspace(1,6,10)))  # store in list

for t1 in range1:
    print t1
    for t2 in range2:
        print t1,t2
</code></pre>
<p>One of the benefit of iterators is that the whole list is never computed. You can iterate over 1 million elements without creating the whole <code>[0, 1, ..., 1000000]</code> list, which is even better if your algorithm expects to break out of the loop when a condition is fulfilled.</p>
<p>In a simple case like in the OP, the list is short and you know you will be iterating over all the elements, so using a list is simple and efficient enough.</p>
</div>
<span class="comment-copy">It's not always a generator. If the class implements <code>__reversed__</code> it can return practically anything. But for <code>np.array</code> you're correct!</span>
<span class="comment-copy">Hmm, wouldn't that suffer from the same problem by consuming <code>range1</code> during the first inner loop, leaving nothing for the outer loop?</span>
<span class="comment-copy">@MSeifert: the <a href="https://docs.python.org/3/reference/datamodel.html#object.__reversed__" rel="nofollow noreferrer"><code>__reversed__</code> documentation</a> requires that an iterator is returned.</span>
<span class="comment-copy">@TimPietzcker: <code>range()</code> is a sequence, not a generator, see <a href="https://docs.python.org/3/library/stdtypes.html#ranges" rel="nofollow noreferrer">the documentation</a>: <i>The <code>range</code> type represents an immutable sequence of numbers</i>.</span>
<span class="comment-copy">@Jérôme: exactly. Creating a full copy of the list has a memory cost that <code>reversed</code> avoids. That can be a price that's worth paying of course. But when you do use <code>reversed()</code>, you have to create a new one in the loop each time.</span>
