<div class="post-text" itemprop="text">
<p>I have this string:</p>
<pre><code>-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)
</code></pre>
<p>but actually I have a lot of string like this:</p>
<pre><code>a*p**(-1.0) + b*p**(c)
</code></pre>
<p>where a,b and c are double. And I would like to extract a,b and c of this string. How can I do this using Python? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
s = '-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)'
pattern = r'-?\d+\.\d*'  

a,_,b,c = re.findall(pattern,s)
print(a, b, c)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>('-1007.88670550662', '67293.8347365694', '-0.416543501823503')
</code></pre>
<p><code>s</code> is your test strings and what not, <code>pattern</code> is the regex pattern, we are looking for floats, and once we find them using <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>findall()</code></a> we assign them back to <code>a</code>,<code>b</code>,<code>c</code> </p>
<p>Note this method works only if your string is in format of what you've given. else you can play with the pattern to match what you want. </p>
<p>Edit like most people stated in the comments if you need to include a <code>+</code> in front of your positive numbers you can use this pattern <code>r'[-+]?\d+\.\d*'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Using the reqular expression </p>
<pre><code>(-?\d+\.?\d*)\*p\*\*\(-1\.0\)\s*\+\s*(-?\d+\.?\d*)\*p\*\*\((-?\d+\.?\d*)\)
</code></pre>
<p>We can do</p>
<pre><code>import re

pat = r'(-?\d+\.?\d*)\*p\*\*\(-1\.0\)\s*\+\s*(-?\d+\.?\d*)\*p\*\*\((-?\d+\.?\d*)\)'

regex = re.compile(pat)

print(regex.findall('-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)'))
</code></pre>
<p>will print <code>[('-1007.88670550662', '67293.8347365694', '-0.416543501823503')]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If your formats are consistent, and you don't want to deep dive into regex (check out <a href="http://www.regex101.com" rel="nofollow noreferrer">regex101</a> for this, btw) you could just split your way through it.</p>
<p>Here's a start:</p>
<pre><code>&gt;&gt;&gt; s= "-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)"
&gt;&gt;&gt; a, buf, c = s.split("*p**")
&gt;&gt;&gt; b = buf.split()[-1]
&gt;&gt;&gt; a,b,c
('-1007.88670550662', '67293.8347365694', '(-0.416543501823503)')
&gt;&gt;&gt; [float(x.strip("()")) for x in (a,b,c)]
[-1007.88670550662, 67293.8347365694, -0.416543501823503]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>re</code> module can certainly be made to work for this, although as some of the comments on the other answers have pointed out, the corner cases can be interesting -- decimal points, plus and minus signs, etc.  It could be even more interesting; e.g. can one of your numbers be imaginary?</p>
<p>Anyway, if your string is always a valid Python expression, you can use Python's built-in tools to process it.  <a href="https://stackoverflow.com/questions/1515357/simple-example-of-how-to-use-ast-nodevisitor">Here is a good generic explanation</a> about the ast module's <code>NodeVisitor</code> class.  To use it for your example is quite simple:</p>
<pre><code>import ast

x = "-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)"

def getnums(s):
    result = []
    class GetNums(ast.NodeVisitor):
        def visit_Num(self, node):
            result.append(node.n)
        def visit_UnaryOp(self, node):
            if (isinstance(node.op, ast.USub) and
                isinstance(node.operand, ast.Num)):
                result.append(-node.operand.n)
            else:
                ast.NodeVisitor.generic_visit(self, node)
    GetNums().visit(ast.parse(s))
    return result

print(getnums(x))
</code></pre>
<p>This will return a list with all the numbers in your expression:</p>
<pre><code>[-1007.88670550662, -1.0, 67293.8347365694, -0.416543501823503]
</code></pre>
<p>The <code>visit_UnaryOp</code> method is only required for Python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use something like:</p>
<pre><code>import re
a,_,b,c = re.findall(r"[\d\-.]+", subject)
print(a,b,c)
</code></pre>
<p><a href="https://ideone.com/x393QT" rel="nofollow noreferrer">Demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>While I prefer MooingRawr's answer as it is simple, I would extend it a bit to cover more situations.</p>
<p>A floating point number can be converted to string with surprising variety of formats:</p>
<ul>
<li>Exponential format (eg. <code>2.0e+07</code>)</li>
<li>Without leading digit (eg. <code>.5</code>, which is equal to <code>0.5</code>)</li>
<li>Without trailing digit (eg. <code>5.</code>, which is equal to <code>5</code>)</li>
<li>Positive numbers with plus sign (eg. <code>+5</code>, which is equal to <code>5</code>)</li>
<li>Numbers without decimal part (integers) (eg. <code>0</code> or <code>5</code>)</li>
</ul>
<p><strong>Script</strong></p>
<pre><code>import re

test_values = [
    '-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)',
    '-2.000e+07*p**(-1.0) + 1.23e+07*p**(-5e+07)',
    '+2.*p**(-1.0) + -1.*p**(5)',
    '0*p**(-1.0) + .123*p**(7.89)'
]

pattern = r'([-+]?\.?\d+\.?\d*(?:[eE][-+]?\d+)?)'

for value in test_values:
    print("Test with '%s':" % value)
    matches = re.findall(pattern, value)
    del matches[1]
    print(matches, end='\n\n')
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Test with '-1007.88670550662*p**(-1.0) + 67293.8347365694*p**(-0.416543501823503)':
['-1007.88670550662', '67293.8347365694', '-0.416543501823503']

Test with '-2.000e+07*p**(-1.0) + 1.23e+07*p**(-5e+07)':
['-2.000e+07', '1.23e+07', '-5e+07']

Test with '+2.*p**(-1.0) + -1.*p**(5)':
['+2.', '-1.', '5']

Test with '0*p**(-1.0) + .123*p**(7.89)':
['0', '.123', '7.89']
</code></pre>
</div>
<span class="comment-copy">use regex and pull the doubles out as you parse it.</span>
<span class="comment-copy">Thank you but i don't know regex... How can i use it ?</span>
<span class="comment-copy">@GuyDavis See the <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">@GuyDavis sounds like a good opportunity to learn regex.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.6/howto/regex.html" rel="nofollow noreferrer">Here</a> is some very clear guidance with examples, including numbers!</span>
<span class="comment-copy">You probably want <code>pattern = r'-?\d+\.\d+'</code> to catch the possible minus sign.</span>
<span class="comment-copy">@DavidCullen thank you for the suggestion. edited.</span>
<span class="comment-copy">and a possible plus sign</span>
<span class="comment-copy">Doesn't this matches <code>-1.0</code>?</span>
<span class="comment-copy">@PedroLobito it does and i disregard it, like my answer states, if the string is given in that exact format as in <code>a*p**(-1.0) + b*p**(c)</code> like op stated, then it has no issues</span>
<span class="comment-copy">No offense but this might discourage some people from learning regex.</span>
<span class="comment-copy">This is good idea for a solution without regex. It could be simplified like this <code>s.replace('*p**(-1.0) +', '*p**').split('*p**')</code></span>
