<div class="post-text" itemprop="text">
<p>I have an array that I need to check for a specific value. If that value exists within the List, I need to be able to return that to a variable outside of the List. In this case, I'm looking to see if any of the values in the List are 'booked'. If all the values in the List are 'available' then availability should be 'available', but if one or more of the values are 'booked' then availability needs to be 'booked'</p>
<pre><code>array = ['booked','available','available']

availability = 'available'

for id in array:
    temp_avail = id
    if temp_avail == 'available':
        global availability
        availability = 'available'
    elif temp_avail == 'booked' or availability == 'booked':
        global availability
        availability = 'booked'
    else:
        global availability
        availability = 'error'

print(availability)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>global</code> here; you're working at the module level.</p>
<p>You can simply use the built-in <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> with a <em><a href="http://book.pythontips.com/en/latest/ternary_operators.html" rel="nofollow noreferrer">ternary operator</a></em>:</p>
<pre><code>availability = 'available' if all(i=='available' for i in array) else 'booked'
</code></pre>
<p><code>all</code> checks that all the items in the list are <code>available</code>, while the ternary returns a value for assignment depending on the <em>truthiness</em> of the <code>all</code> expression.</p>
</div>
<span class="comment-copy">Don't use global variables, <i>return a value instead</i>. Indeed, in this case your <code>global</code> statements are entirely useless, because <code>availability</code> is already in the outer-most scope.</span>
<span class="comment-copy">Let me put it this way, in my 3 years or programming in Python, I have never, <i>ever</i> used <code>global</code>, let alone in production code, except on StackOverflow, to explain how to use it, and always promptly followed by recommending against using it.</span>
<span class="comment-copy">or <code>any(i=='booked' for i in array)</code></span>
<span class="comment-copy">@karakfa Both will shortcircuit, so both <code>all</code> and <code>any</code> are safe here.</span>
<span class="comment-copy">@moses-koledoye there is one wrinkle I didn't mention as I wasn't expecting a one-liner like yours. The list is actually made up of values that I need to check an external source for to find the value (I'm using Zapier). So temp_avail = id should actually read temp_avail = store.get(id). So your answer is correct, but i'm wondering if you might be able to explain how I would do this broken out?</span>
<span class="comment-copy">@csakon I wasn't after a one liner, I was after something that is expressive. If you read about the built-in <code>all</code> and ternary operators you'll see the answer I've provided is quite basic :)</span>
<span class="comment-copy">@Moses Koledoye, yes right.  For some reason I though <code>all</code> wouldn't short-circuit.  But there is no reason not to make them symmetric.</span>
