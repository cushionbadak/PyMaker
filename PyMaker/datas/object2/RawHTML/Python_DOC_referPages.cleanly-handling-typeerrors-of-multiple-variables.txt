<div class="post-text" itemprop="text">
<p>Currently I am working on a webapp, where I came across the problem, that a function has to handle multiple inputs, but any number of them could be <code>None</code>(Or cause some other error for that matter):</p>
<pre><code>def my_func(input_1: set, input_2: set, input_3: set): -&gt; set
    return input_1 | input_2 | input_3
</code></pre>
<p>What would be the most elegant way of handling this? Just writing out all the cases would certainly be an option.</p>
<p>Looking forward to learning something and many Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If the only case is that the inputs may be <code>None</code> you can assign empty <code>set()</code> instead of <code>None</code>:</p>
<pre><code>def my_func(input_1: set, input_2: set, input_3: set) -&gt; set:
    inputs = (
        input_1 or set(), 
        input_2 or set(),
        input_3 or set()
    )

    return set.union(*inputs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Did it the brute force way by typing out all the of the cases:</p>
<pre><code>def my_func(input_1, input_2, input_3):
    types = (
        type(input_1),
        type(input_2),
        type(input_3),
        )

    if not all(types):
        return None
    elif not (types[0] and types[1]):
        return input_3
    elif not (types[0] and types[2]):
        return input_2
    elif not (types[1] and types[2]):
        return imput_1
    elif not types[0]:
        return input_2 | input_3
    elif not types[1]:
       return input_1 | input_3
    elif not types[2]:
        return input_1 | input_2
    else:
        return input_1 | input_2 | input_3
</code></pre>
<p>Unfortunately this will fail with more inputs being used, sice one needs to handle 2^(num_inputs) cases, so I'm open to better suggestions.</p>
</div>
<span class="comment-copy">First, beware that explicitly declaring variable type on some webapps, like Flask will generate errors. what I would do to manage types is : <code>def my_func(input_1=None, input_2=None, input_3=None):</code> <code>if input_1 is None:</code> <code>#do something</code> and same for other inputs. You can also test on types with : <code>if type(input_2) is not set:     </code>#do something`</span>
<span class="comment-copy">@lalam Thanks for the tip about declaring types. I would have run head first into that in the next 30 minutes.</span>
