<div class="post-text" itemprop="text">
<p>Using py2neo 4.x, neo4j 3.5.3, python 3.7.x</p>
<p>What I have: a node from the graph <code>a</code> </p>
<pre><code>graph = Graph(
    host="alpha.graph.domain.co",
    auth=('neo4j', 'theActualPassword')
)
# grab the graph
a = Node("Type", url="https://en.wikipedia.org/wiki/Vivendi")
# create a local node with attributes I should be able to MERGE on
graph.merge(a,"Type","url")
# do said merge
graph.pull(a)
# pull any attributes (in my case Labels) that exist on the node in neo4j...
# ...but not on my local node
# better ways to do this also would be nice in the comments
relMatch = RelationshipMatcher(graph)
</code></pre>
<p>What I want: the count of how many <code>"CREATED"</code> relationships are connected to <code>a</code><a href="https://i.stack.imgur.com/vuzgr.png" rel="nofollow noreferrer"><img alt="A neo4j return describing how these relationships are connected to node a" src="https://i.stack.imgur.com/vuzgr.png"/></a> (in this case, 7)</p>
<p>What I've tried: </p>
<p><code>x = relMatch.get(20943820943)</code> using one of the IDs of the relationships to see what's what. It returns <code>None</code>, which the <a href="https://py2neo.org/v4/matching.html#py2neo.matching.RelationshipMatcher" rel="nofollow noreferrer">docs</a> say means </p>
<blockquote>
<p>If no such Relationship is found, py:const:None is returned instead. Contrast with matcher[1234] which raises a KeyError if no entity is found.</p>
</blockquote>
<p>which leaves me thinking I'm coming at it all wrong. </p>
<p>also: <code>relMatch.match(a,"CREATED")</code> 
which raises</p>
<blockquote>
<p>raise ValueError("Nodes must be supplied as a Sequence or a Set")</p>
</blockquote>
<p>telling me that I'm definitely not reading the docs right.</p>
<p>Not necessarily using this class, which probably isn't what I think it is, how do I get a count of how many <code>["CREATED"]</code> are pointed at <code>a</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>With a <code>RelationshipMatcher</code>, you can simply take a count using <code>len</code>. So if I read your code correctly, you'll need something like:</p>
<pre><code>count = len(RelationshipMatcher(graph).match((None, a), "CREATED"))
</code></pre>
<p>Or even easier:</p>
<pre><code>count = len(graph.match((None, a), "CREATED"))
</code></pre>
<p>(since <code>graph.match</code> is a shortcut to <code>RelationshipMatcher(graph)</code>)</p>
<p>The <code>(None, a)</code> tuple specifies an ordered pair of nodes (relationships in one direction only) where the start node is any node and the end node is <code>a</code>. Using <code>len</code> simply evaluates the match and returns a count.</p>
</div>
<div class="post-text" itemprop="text">
<p>Below works, and is easier to write than the previous implementation, but I don't think it's the right way to do it.</p>
<pre><code>result = graph.run(
    "MATCH(a) &lt; -[r:CREATED]-(b) WHERE ID(a)=" + str(a.identity) + " RETURN count(r)"
).evaluate()
print(result)
</code></pre>
</div>
<span class="comment-copy">Nigel, you the real MVP</span>
