<div class="post-text" itemprop="text">
<p>I'm new to Python and I'm stuck trying to figure out how to count how many times a number shows up in a list.  The output I'm looking for is something like this "7 occurred 2 times, 4 occurred 1 time" but the problem I'm running into is that I'm printing output for each my_integer.  So if I enter 7, 7, 4 as input I get "7 occurred 2 times, 7 occurred 2 times, 4 occurred 1 time" I was thinking of writing a method to check for uniqueness of a number after count has been returned. </p>
<pre><code>integers = input("Enter integers between 1 and 100: ")
split_integers = integers.split()
integer_list = [eval(x) for x in split_integers]

for my_integer in integer_list:
    print(integer_list.count(my_integer))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, you don't need to use <code>eval()</code> in this line:</p>
<pre><code> integer_list = [eval(x) for x in split_integers]
</code></pre>
<p>you can simply cast <code>int()</code> here. </p>
<p>Furthermore, since your just counting numbers, you don't even need to convert them to integers to begin with. The conversion would only be necessary if you needed to do some computation with these integers, but since your just counting unique ones, keeping them as strings works fine here. </p>
<p>Secondly, if you want to count unique items, you can use <a href="https://docs.python.org/3.6/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a> for this:</p>
<pre><code>from collections import Counter

integers = input("Enter integers between 1 and 100: ")
split_integers = integers.split()

counts = Counter(split_integers)
for k, v in counts.items():
    print(k, 'occurred', v, 'times')
</code></pre>
<p>Which works as follows:</p>
<pre><code>Enter integers between 1 and 100: 7 7 4 7 4
7 occurred 3 times
4 occurred 2 times
</code></pre>
<p><code>Counter()</code> is basically a subclass of <code>dict</code> for counting objects. It stores elements in a dictionary where the elements are stored as keys and their counts as values. This allows you to count unique items and store how many times they occur. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set()</code>.</p>
<pre><code>for my_integer in set(integer_list):
    count = integer_list.count(my_integer)
    tmp = "{} occurred {} time".format(my_integer, count)
    if count &gt; 1:
        tmp += "s"
    print(tmp)
</code></pre>
<p>For <code>integer_list = [7, 7, 4]</code>, it should print out</p>
<pre><code>4 occurred 1 time
7 occurred 2 times
</code></pre>
<p>Why does it print the number 4 first before 7? Because <code>set()</code> automatically sorts the array. Learn more about it <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">here.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to generate a <code>dict</code> of element and number of times it appears in the list.
The input list to <code>groupby</code> should be sorted(either in ascending or descending).</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; l = [1,2,2,1,3,3,3,3,4,5,6,6,6]
&gt;&gt;&gt; {k:len(list(v)) for k,v in groupby(sorted(l))}
</code></pre>
<p>This will output</p>
<pre><code>&gt;&gt;&gt; {1: 2, 2: 2, 3: 4, 4: 1, 5: 1, 6: 3}
</code></pre>
<p>Or you can use list comprehension to produce a list of tuples and then pass it to <code>dict</code> constructor. This will also yield same result</p>
<pre><code>&gt;&gt;&gt; dict((k,len(list(v))) for k,v in groupby(sorted(l)))
&gt;&gt;&gt; {1: 2, 2: 2, 3: 4, 4: 1, 5: 1, 6: 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary:</p>
<pre><code>integers = input("Enter integers between 1 and 100: ")
split_integers = integers.split()
integer_list = [eval(x) for x in split_integers]

counts = {}
for my_integer in integer_list:
    try:
        counts[my_integer] += 1
    except KeyError:
        counts[my_integer] = 1

for k in counts:
    print('Integer {} occurred {} times'.format(k, counts[k]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No module imports:</p>
<pre><code>b = []                               #addition 1
for my_integer in integer_list:
    if my_integer in b:
        print (value, "occurs", integer_list.count(my_integer))
        b.append(my_integer)
</code></pre>
<p>or</p>
<pre><code>while len(a) &gt; 0:
   value = a[0]
   count = a.count(value)
   print (value, "occurs", count)
   for i in range(count):
      a.remove(value)
</code></pre>
</div>
<span class="comment-copy">there is a counter in python, which you can use.<a href="https://pymotw.com/2/collections/counter.html" rel="nofollow noreferrer">pymotw.com/2/collections/counter.html</a></span>
<span class="comment-copy">Use a dictionary.</span>
<span class="comment-copy">I'm not even sure that the call to <code>int</code> is necessary for this.</span>
<span class="comment-copy">@SethMMorton Yeah your right, keeping them as strings to begin with work just as fine. I'll update it, cheers.</span>
