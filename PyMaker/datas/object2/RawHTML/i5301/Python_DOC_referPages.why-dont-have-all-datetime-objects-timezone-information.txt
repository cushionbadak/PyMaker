<div class="post-text" itemprop="text">
<p>I just stumbled over</p>
<pre><code>&gt;&gt;&gt; a = datetime.datetime(2017, 12, 24)
&gt;&gt;&gt; b = datetime.datetime(2017, 12, 24, tzinfo=datetime.timezone.utc)
&gt;&gt;&gt; a - b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't subtract offset-naive and offset-aware datetimes
</code></pre>
<p>Now I wonder: <strong>Why don't have all datetime objects a timezone?</strong> Is a timezone more than an offset from UTC (+ an associated name)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because timezones are non-trivial and not just simple offsets, and not all use cases need to take timezones into account. </p>
<h2>Not simple offsets</h2>
<p>A timezone usually is not just an offset from UTC. Timezones may also dictate <em>daylight savings time</em> (when exactly does a timezone switch between summer and winter time), for example.</p>
<p>Not all use-cases need to handle DST, and sometimes you have string representations of datetime values that only include an offset from UTC. But that doesn't mean that you can assume that timezone handling in <em>general</em> only has to deal with an offset.</p>
<h2>Timezones are not static entities</h2>
<p>Timezones also <em>change</em> over time; what physical locations use what exact timezone can change, as well as the rules of a timezone. Because the Earth is a large place, this happens more often than you think. And not only can DST rules or geographical reach change, but so can the timezone offset.  See <a href="https://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result">Jon Skeet's highest voted answer</a> for an example of a historical timezone change, where the <em>database</em> entries have been corrected over time as well.</p>
<p>Such changes certainly take place more often than Python releases can be made. As such, Python can't ship a comprehensive timezone database with the standard library and hope it'll stay up to date until the next release. Instead, the Python maintainers rely on third-party libraries to produce such a database; such libraries can follow a much more aggressive release cycle.</p>
<h2>Not all use cases need timezones</h2>
<p>However, many use cases involving datetime calculations <em>do not need to include a timezone</em>; they can and should be timezone agnostic. Forcing all such use cases to use a timezone anyway would put an undue burden on developers that then have to understand how to handle calculations with other datetime values that do include timezone information.</p>
<p>So, the <code>datetime</code> library distinguishes between 'simple' datetime values without a timezone, and those with a timezone. Until Python 3.2, the library didn't even include a <code>timezone</code> object; that was left to third-party libraries. The current <a href="https://docs.python.org/3/library/datetime.html#timezone-objects" rel="nofollow noreferrer"><code>datetime.timezone()</code> support</a> is there to support <em>simple offset timezones without history or DST support</em>; those at least don't require constant maintenance and updates.</p>
<h2>If you need access to proper timezones</h2>
<p>The canonical Python implementation for timezones is the <a href="https://pypi.python.org/pypi/pytz" rel="nofollow noreferrer"><code>pytz</code> package</a>, which packages the <a href="https://en.wikipedia.org/wiki/Tz_database" rel="nofollow noreferrer">Olson database</a> (used by UNIX-like OSes including Mac OS X). A new release is created whenever the Olson database is updated; I'd expect a new 2018-01 release to package the recent 2018c release.</p>
<p>Do take into account that the <code>datetime</code> library design didn't anticipate having to handle historical timezone changes that <code>pytz</code> includes with a timezone; do follow the <code>pytz</code> documentation and use <code>timezone.localize(naive_datetime)</code> to apply the correct offsets for the date. See <a href="https://stackoverflow.com/questions/7065164/how-to-make-an-unaware-datetime-timezone-aware-in-python">How to make an unaware datetime timezone aware in python</a></p>
<p>The <a href="https://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer"><code>python-dateutil</code> package</a> also contains timezone support.</p>
</div>
<span class="comment-copy">Because if you do not provide it, it is unknown...</span>
<span class="comment-copy">Because not all datetime problems need to carry a timezone, and including one complicates matters?</span>
<span class="comment-copy">I can't answer on the design of <code>datetime</code>, but I suggest you look at this <a href="https://stackoverflow.com/questions/7065164/how-to-make-an-unaware-datetime-timezone-aware-in-python">comprehensive question and answer</a> for tips on how to deal with timezones.</span>
<span class="comment-copy">@MartinThoma: yes, daylight savings time transitions, and historical timezone information; timezones are not static, if you have a date in the past, then the timezone could well be using a different offset.</span>
<span class="comment-copy">@MartinThoma: yes, a simple offset-only timezone doesn't include daylight savings transitions or historical information. No, the OS doesn't supply a simple offset. See the <a href="https://en.wikipedia.org/wiki/Tz_database" rel="nofollow noreferrer">Olson timezone database</a> for what kind of info the OS provides these days.</span>
