<div class="post-text" itemprop="text">
<p>I am trying to create a mock version of a generator method for my unit tests. Setting the return value is easy:</p>
<pre><code>    patcher = unittest.mock.patch.multiple("__main__.MyClass",
        method_one=DEFAULT,
        ...
    )
    patcher.start()
    MyClass.method_one.return_value = my_mock_gen(some_params)
</code></pre>
<p>However this will only work once and has to be reset every time:</p>
<pre><code>    for value in my_obj.method_one(some_params):
        # do stuff with value

    my_obj.method_one.reset_mock() # doesn't work with `yield from` as well
</code></pre>
<p>Plus I am not able to generate mock values based on <code>some_params</code>. Is there a preferred way of handling this scenario that I am missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run a function when a mock is called, that's <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code></a>, not <code>return_value</code>:</p>
<pre><code>MyClass.method_one.side_effect = my_mock_gen
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution is to convert <code>generator</code> to <code>list</code> for testing. It works, but it might be bad.</p>
<pre><code>    #!/usr/bin/python
    import mock
    import unittest


    class FooBar(object):

        def method_one(self, a, b):
            for i in range(a, b):
                yield i * i

        def bar(self):
            return 'bar'


    def mock_generator(a, b):
        for i in range(a, b):
            yield (i + 1) * i


    class TestFooBar(unittest.TestCase):

        def test_method_one(self):
            # set default to a list
            mock_method_one = mock.Mock(return_value=['aaa', 'ccc'])
            # this is how I access the class
            patcher = mock.patch.multiple(
                "python_tools.tests.patch_multiple.FooBar",
                method_one=mock_method_one,
                bar=mock.Mock(return_value='bar')
            )

            patcher.start()
            # method_one return generator only supposed to be read once
            # convert generator to list for testing, crazy?! not sure
            # [6, 12] after converting to list
            mock_method_one.return_value = list(mock_generator(2, 4))
            fb = FooBar()

            # no change
            self.assertEqual(fb.method_one(200, 500), [6, 12])

            # no change
            for item in fb.method_one(2, 5):
                self.assertTrue(item, [6, 12])

            # no change
            self.assertEqual(fb.method_one(1, 6), [6, 12])

            patcher.stop()
</code></pre>
</div>
<span class="comment-copy">regarding reset issue, instead of <code>method_one=DEFAULT</code>, how about change to <code>method_one=mock.Mock(return_value='mocked foo!'),</code> or define <code>return_value</code> before <code>patcher.start()</code>?</span>
<span class="comment-copy">The problem is that a new iterator should be generated on the go instead of reusing the one set via <code>return_value=...</code>. I donâ€™t think your suggestion will change anything, but I will accept your answer if you can provide a working example.</span>
<span class="comment-copy"><code>side_effect</code> is way better and have more control over data, Thanks!</span>
<span class="comment-copy">Interesting, I thought <code>side_effect</code> merely creates side effects and not affect the return value.</span>
<span class="comment-copy">Apologies, but I should have mentioned that <code>method_one</code> in my tests uses <code>yield</code> (since it is a generator method) which does not return a simple list.</span>
