<div class="post-text" itemprop="text">
<p>I am using python's <code>multiprocessing.Process</code> to parallelize; is there a simple way to find out when each child job is done? For example, this is how I currently implement my code:</p>
<pre><code>def func(k):
  print(42*k)

q = mp.Queue()
processes = [mp.Process(target=func, args=(k, q)) for k in keys)]

for p in processes:
  p.start()  # start each
for p in processes:
  p.join()  # wait for all to come back

result = [q.get() for _ in processes]  # collect
</code></pre>
<p>What I want is <code>print "{} done".format(k)</code> right as each child joins the parent.</p>
<p>Why do I want this? A couple of my processes take longer than the others, so I want to see of they finished or not before all of the processes return. The easiest (but not so clean) solution is to print the message inside <code>func()</code>; but I would rather do it in the parent module.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a job for concurrent.futures -<a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a></p>
<p>There are many things subtle in joining concurrent tasks, and a lot of things to improve, like having a pool of worker process that match the number of cores on you machine, and reuse those processes --
The <code>concurrent.futures</code> does ll that allowign a choice of using threads or process to execute each task.</p>
<p>So, what you want would be something like:</p>
<pre><code>In [19]: import concurrent.futures, time, random
    ...: executor = concurrent.futures.ThreadPoolExecutor(4)
    ...: def func(n):
    ...:     time.sleep(random.random())
    ...:     return n
    ...: futures = [executor.submit(func, i ) for i in range(10)]
    ...: 
    ...: 

In [20]: for fut in concurrent.futures.as_completed(futures):
    ...:     print(fut.result())
    ...:     
6
3
7
5
2
8
4
9
0
1
</code></pre>
<p>(I used ThreadPoolExecutor in order for the example to run on the interactive interpreter here - you will want to use <code>concurrent.futures.ProcessPollExecutor</code> instead)</p>
</div>
<span class="comment-copy">where is <code>func(k)</code> used?</span>
<span class="comment-copy">Good catch. That is the target. Modified code to reflect that.</span>
<span class="comment-copy">The call to <code>p.join()</code> could come <i>long</i> after the process actually completes, if a previous call blocks a faster process from being joined. You are better off doing the logging from the child processes.</span>
<span class="comment-copy">@chepner Good point! I am currently doing the logging from the child processes. Thanks.</span>
<span class="comment-copy">@liliscent the <code>Queue</code> is used in the collection of the results. This is a barebones code that I extracted from a large codebase. So strange might describe it.</span>
<span class="comment-copy">Thanks, this looks intriguing! I'll ping back.</span>
