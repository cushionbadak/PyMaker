<div class="post-text" itemprop="text">
<p>I am trying to join two lists in such a manner in Python 2.7:</p>
<pre><code>a = ['x','y','z']
b = [1,2,3]
</code></pre>
<p>and the end result should be:</p>
<pre><code>c=['x1','y2','z3']
</code></pre>
<p>How do I do that?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>c = [p + str(q) for p, q in zip(a, b)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of concatenating the string, it is even better to use <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer"><strong><code>string.format</code></strong></a> function. You can also use it with <a href="https://docs.python.org/2/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><strong><code>itertools.starmap</code></strong></a> with the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip</code></strong></a> version of the lists as:</p>
<pre><code>&gt;&gt;&gt; from itertools import starmap
&gt;&gt;&gt; a = ['x','y','z']
&gt;&gt;&gt; b = [1,2,3]

&gt;&gt;&gt; list(starmap("{}{}".format, zip(a, b)))
['x1', 'y2', 'z3']

# Note: `starmap` returns an iterator. If you want to iterate this value
# only once, then there is no need to type-case it to `list`
</code></pre>
<p>Or you can use it with the legendary <em>list comprehensions</em> as:</p>
<pre><code>&gt;&gt;&gt; ['{}{}'.format(x, y) for x, y in zip(a, b)]
['x1', 'y2', 'z3']
</code></pre>
<p>With <code>format</code>, you don't have to explicitly type-cast your <code>int</code> to <code>str</code>. Also it is simpler to change the format of your desired strings in the lists. For example:</p>
<pre><code>&gt;&gt;&gt; ['{} -- {}'.format(x, y) for x, y in zip(a, b)]
['x -- 1', 'y -- 2', 'z -- 3']
</code></pre>
<p>Here's a <strong>generalized solution to format <code>n</code> lists</strong>:</p>
<pre><code>&gt;&gt;&gt; my_lists = [
        ['a', 'b', 'c'],   # List 1
        [1, 2, 3],         # List 2
        # ...              # few more lists 
        ['x', 'y', 'z']    # List `N`
    ]

# Using `itertools.starmap`
&gt;&gt;&gt; list(starmap(("{}"*len(my_lists)).format, zip(*my_lists)))
['a1x', 'b2y', 'c3z']

# Using list comprehension
&gt;&gt;&gt; [('{}'*len(my_lists)).format(*x) for x in zip(*my_lists)]
['a1x', 'b2y', 'c3z']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this one as well, based on @SilverSlash's solution, using the <code>map</code> function:</p>
<pre><code>a = ['x','y','z']
b = [1,2,3]

c = list(map(''.join, zip(a, map(str, b))))
print(c)
</code></pre>
<p>Output:</p>
<pre><code>['x1', 'y2', 'z3']
</code></pre>
</div>
<span class="comment-copy">You should read some docs and try it yourself before asking. This is basic.</span>
<span class="comment-copy">I don't think I need an advice what to post.</span>
<span class="comment-copy">Thank you for your fast response.</span>
<span class="comment-copy">I do prefer <code>format</code> as well. It even makes using maps a lot nicer. checkout <code>import itertools; itertools.starmap("{}{}".format, zip(a, b))</code></span>
<span class="comment-copy">@juanpa.arrivillaga Nice usecase of <code>starmap</code>.</span>
<span class="comment-copy">Thank you very much for your detailled and fast answer. The thing is my list is quite a long one. It has 7000 items in both of the list. When I used you proposed method it perfectly does it but only the half of the items. Do you have an idea what could go wrong?</span>
<span class="comment-copy">@SavasAdiloglu possibly your one of the list is having lesser items than the other list. try checking length of both using <code>len(your_list)</code></span>
<span class="comment-copy">Any negative side effects using <code>itertools.zip_longest</code> with <code>fillvalue = ''</code> instead of <code>zip</code>?</span>
<span class="comment-copy">You can also simplify it to <code>list(map(''.join, zip(a, map(str, b))))</code></span>
<span class="comment-copy">@RoadRunner done.</span>
