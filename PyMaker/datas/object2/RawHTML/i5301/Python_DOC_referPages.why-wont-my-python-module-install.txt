<div class="post-text" itemprop="text">
<p>I am trying to build a <a href="https://docs.pulpproject.org/dev-guide/newtypesupport/plugin/distributors.html" rel="nofollow noreferrer">pulp distributor plugin</a> which will execute a bash script containing arbitrary code so that I may trigger actions after an RPM repo is published.</p>
<p>These plugins are generally created using <a href="https://docs.python.org/2/install/index.html#the-new-standard-distutils" rel="nofollow noreferrer">distutils</a>. However, when I attempt to install my module, I receive the error:</p>
<pre><code>warning: install_lib: 'build/lib' does not exist -- no Python modules to install
</code></pre>
<p>Typically, this means that the <a href="https://stackoverflow.com/a/14867310/3127174">working directory is incorrect</a> or <a href="https://stackoverflow.com/questions/30353218/installed-module-is-empty">__init.py__ is missing</a>. In my case however, I am attempting to install from the correct working directory and I did create __init.py__ files (see the repo <a href="https://github.com/jdshewey/pulp_hook" rel="nofollow noreferrer">here</a>).</p>
<p>I suspect that I am running into a pathing issue having something to do with my code being in a subdirectory so far removed from setup.py. What am I doing wrong? Why won't my module install? </p>
</div>
<div class="post-text" itemprop="text">
<p>When you face errors like this, one of the first things to check is what packages are actually being added to your distribution when you build it. In your case the package list is empty, but should contain at least the <code>pulp_hook</code> package:</p>
<pre><code>$ python -c "from setuptools import find_packages; print(find_packages())"
[]
</code></pre>
<p>So why does <code>setuptools</code> not recognize <code>pulp_hook</code> as a regular package? Look at its structure: you have added file named <code>__init.py__</code>, but <a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="nofollow noreferrer">its name should be <code>__init__.py</code></a>. Once you rename the files, the <code>pulp_hook</code> and its subdirectories become regular packages:</p>
<pre><code>$ python -c "from setuptools import find_packages; print(find_packages())"
['pulp_hook', 'pulp_hook.plugins', 'pulp_hook.plugins.distributors']
</code></pre>
<p>Now <code>build/lib</code> will be created because now <code>distutils</code> finds at least one package to install:</p>
<pre><code>$ python setup.py install_lib
running install_lib
running build_py
creating build
creating build/lib
creating build/lib/pulp_hook
copying pulp_hook/__init__.py -&gt; build/lib/pulp_hook
creating build/lib/pulp_hook/plugins
copying pulp_hook/plugins/__init__.py -&gt; build/lib/pulp_hook/plugins
creating build/lib/pulp_hook/plugins/distributors
copying pulp_hook/plugins/distributors/distributionhook.py -&gt; build/lib/pulp_hook/plugins/distributors
copying pulp_hook/plugins/distributors/__init__.py -&gt; build/lib/pulp_hook/plugins/distributors
</code></pre>
</div>
