<div class="post-text" itemprop="text">
<p>I've written some code that can parse a string into tuples as such:</p>
<pre><code>s = '30M3I5X'
l = []
num = ""
for c in s:
  if c in '0123456789':
     num = num + c
     print(num)
  else:
     l.append([int(num), c])
  num = ""

print(l)
</code></pre>
<p>I.e.; </p>
<pre><code>'30M3I5X' 
</code></pre>
<p>becomes </p>
<pre><code>[[30, 'M'], [3, 'I'], [5, 'X']]
</code></pre>
<p>That part works just fine. I'm struggling now, however, with figuring out how to get the values from the first column of a tab-separated-value file to become my new 's'. I.e.; for a file that looks like:</p>
<pre><code># File Example #
30M3I45M2I20M   I:AAC-I:TC
50M3X35M2I20M   X:TCC-I:AG
</code></pre>
<p>There would somehow be a loop incorporated to take only the first column, producing</p>
<pre><code>[[30, 'M'],[3, 'I'],[45, 'M'],[2, 'I'],[20, 'M']]
[[50, 'M'],[3, 'X'],[35, 'M'],[2, 'I'],[20, 'M']]
</code></pre>
<p><strong>without</strong> having to use </p>
<pre><code>import csv 
</code></pre>
<p>Or any other module.</p>
<p>Thanks so much!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">open</a> the path to the file and iterate through the records?</p>
<pre><code>def fx(s):    
    l=[]  
    num=""  
    for c in s:  
        if c in '0123456789':  
           num=num+c  
        print(num)  
        else:  
           l.append([int(num), c])  
      num=""  
    return l

with open(fp) as f:
  for record in f:
      s, _ = record.split('\t')
      l = fx(s)
      # process l here ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following code would serve your purpose</p>
<pre><code>rows = ['30M3I45M2I20M   I:AAC-I:TC', '30M3I45M2I20M   I:AAC-I:TC']

for row in rows:
    words = row.split('  ')
    print(words[0])
    l = []
    num = ""
    for c in words[0]:
        if c in '0123456789':
             num = num + c
        else:
            l.append([int(num), c])

    print(l)
</code></pre>
<p>Change row.split('  ') to ('\t') or any other seperator as per the need</p>
</div>
<div class="post-text" itemprop="text">
<p>something like this should do what you're looking for.</p>
<pre><code>filename = r'\path\to\your\file.txt'
with open(filename,'r') as input:
    for row in input:
        elements = row.split()
        # processing goes here  
</code></pre>
<p>elements[0] contains the string that is the first column of data in the file.</p>
<p>Edit:</p>
<p>to end up with a list of the lists of processed data:</p>
<pre><code>result = []
filename = r'\path\to\your\file.txt'
with open(filename,'r') as input:
    for row in input:
        elements = row.split()
        # processing goes here
        result.append(l) # l is the result of your processing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So this is what ended up working for me--took bits and pieces from everyone, thank you all! </p>
<p><em>Note: I know it's a bit verbose, but since I'm new, it helps me keep track of everything :)</em></p>
<pre><code>#Defining the parser function

def col1parser(col1):
l = []
num = ""
for c in col1:
    if c in '0123456789':
        num = num + c
    else:
        l.append([int(num), c])
        num = ""
print(l)


#Open file, run function on column1
filename = r'filepath.txt'
with open(filename,'r') as input:
    for row in input:
        elements = row.split()
        col1 = elements[0]
        l = col1parser(col1)
</code></pre>
</div>
<span class="comment-copy">What's your reason for not using any modules?</span>
<span class="comment-copy">I'm new to Python and want to see how you would do something like this from scratch.  I don't have any bias against using modules--they save tons of time. Unfortunately, sometimes in PyCharm the editor will throw an "unused import statement" in there, and I haven't quite figured out why.</span>
<span class="comment-copy">This works, but the end result is only the correct array for the last row in the file.</span>
<span class="comment-copy">This is helpful, but the issue that popped up with this is that if the processing is included within the loop, then we end up with an array that has all of the arrays included as one large array--with no distinction between rows.</span>
<span class="comment-copy">If the processing is included outside of the loop, then the result is the correct array, but only for the last row of the file.</span>
