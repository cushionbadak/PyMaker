<div class="post-text" itemprop="text">
<p>I have recently started to develop a game called falldown and have completed making the controls, start screen, and the ball but I am struggling in randomly spawning the platforms. I had been able to temporarily draw a random platform, but in order to give the illusion that the specific platform was moving up, I needed to draw the same platform again and I couldn't figure out how to do that. </p>
<p>I researched a lot and found these two code samples:<br/>
<a href="https://github.com/Beavotropper2/FallDown" rel="nofollow noreferrer">https://github.com/Beavotropper2/FallDown</a><br/>
<a href="https://sourceforge.net/projects/falldown/" rel="nofollow noreferrer">https://sourceforge.net/projects/falldown/</a><br/>
but I couldn't really understand how they solved this issue. Can you help me understand how to possibly create the multiple platforms generated that move up like in falldown?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd implement the platforms as follows: The <code>Platform</code> class only needs to contain an image (<code>pygame.Surface</code>) and a <code>pygame.Rect</code> which is used to store the position (can also be utilized for collision detection).</p>
<p>In the <code>update</code> method I only change the <code>self.rect.y</code> position to move the sprite and delete it when it's above the top of the screen.</p>
<p>To store the platform sprites, I use a <code>pygame.sprite.Group</code> which allows me to update and blit all contained sprites with two method calls.</p>
<p>The sprites get added to the group separately in the <code>add_platforms</code> function, where I first call <code>random.randint</code> to get the number of platforms and then pass it and the <code>range(0, 800, 100)</code> to <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code></a> to get 4-7 random x-coords. Then you can just loop over this list and pass the coords to the sprite instances.</p>
<p>I use the <a href="http://www.pygame.org/docs/ref/time.html#pygame.time.set_timer" rel="nofollow noreferrer"><code>pygame.time.set_timer</code></a> function to generate a custom event (<code>ADD_PLATFORM_EVENT</code>) every two seconds, which you can handle in the event loop to call the <code>add_platforms</code> function.</p>
<pre><code>import random
import pygame


pygame.init()
game_display = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()
PLATFORM_IMAGE = pygame.Surface((100, 20))
PLATFORM_IMAGE.fill((30, 220, 150))
# This event is needed for the timer and to add platforms.
ADD_PLATFORM_EVENT = pygame.USEREVENT+1


class Platform(pygame.sprite.Sprite):

    def __init__(self, x, y, platform_image):
        pygame.sprite.Sprite.__init__(self)
        self.image = platform_image
        self.rect = self.image.get_rect(topleft=(x, y))

    def update(self):
        self.rect.y -= 1

        if self.rect.y &lt; -50:
            self.kill()


def add_platforms(group):
    """Add platforms to a sprite group.

    Choose 4-7 random x-positions, create the Platform sprites (pass
    the x- and y-positions) and add them to the passed group.
    """
    platform_count = random.randint(4, 7)
    positions = random.sample(range(0, 800, 100), platform_count)
    y = game_display.get_height()
    for x in positions:
        group.add(Platform(x, y, PLATFORM_IMAGE))


def main_game():
    # This will add a `ADD_PLATFORM_EVENT` to the event queue after two seconds.
    pygame.time.set_timer(ADD_PLATFORM_EVENT, 2000)
    platform_group = pygame.sprite.Group()
    add_platforms(platform_group)

    game_exit = False

    while not game_exit:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_exit = True
            # Call the `add_platforms` function if
            # an `ADD_PLATFORM_EVENT` occurs.
            elif event.type == ADD_PLATFORM_EVENT:
                add_platforms(platform_group)

        # Call the update methods of all contained sprites.
        platform_group.update()

        game_display.fill((30, 30, 30))
        # Blit the images of all sprites at their rects.
        platform_group.draw(game_display)

        pygame.display.flip()
        clock.tick(60)

main_game()
pygame.quit()
</code></pre>
</div>
<span class="comment-copy">One more note: If you want to move the platforms by a floating point number, you need to give the sprites an additional <code>self.y_position</code> attribute to which you add the speed each frame, e.g. <code>self.y_position += 0.5</code>, and then assign the position to the rect <code>self.rect.y = self.y_position</code>. You have to do it in this way, because pygame.Rect attributes can only be ints and floats are truncated.</span>
