<div class="post-text" itemprop="text">
<p>I would like to write a filter which replaces some $variables$ in my streamfield text. What is the best way to do this in my "Page" model? I tried the following but it is sometimes not working if I save my model as draft and publish it afterwards. Does anyone know a better way doing this?</p>
<pre><code>class CityPage(Page, CityVariables):

    cityobject = models.ForeignKey(CityTranslated, on_delete=models.SET_NULL, null=True, blank=True)
    streamfield  = StreamField(BasicStreamBlock, null=True, blank=True)

    content_panels = Page.content_panels + [
        FieldPanel('cityobject', classname="full"),
        StreamFieldPanel('streamfield'),

    ]

    def get_streamfield(self):
        for block in self.streamfield:
            if type(block.value) == unicode:
                block.value = self.replace_veriables(block.value)
            elif type(block.value) == RichText:
                block.value.source = self.replace_veriables(block.value.source)
            else:
                print "notimplemented"
        return self.streamfield
</code></pre>
<p>And this is just the class which replaces $variables$ with values from my database.</p>
<pre><code>class CityVariables():

    def replace_veriables(self, repstr):
        reprules = self.get_city_context()
        for key, value in reprules.iteritems():
            repstr = repstr.replace(key, value)
        return repstr

    def get_city_context(self):
        context = {}
        if self.cityobject.population:
            context['$population$'] = unicode(self.cityobject.population)
        if self.cityobject.transregion:
            context['$region$'] = unicode(self.cityobject.transregion)
        return context


class BasicStreamBlock(blocks.StreamBlock):
    h2              = blocks.CharBlock(icon="title", classname="title")
    h3              = blocks.CharBlock(icon="title", classname="title")
    h4              = blocks.CharBlock(icon="title", classname="title")
    h5              = blocks.CharBlock(icon="title", classname="title")
    paragraph       = blocks.RichTextBlock(icon="pilcrow")
    image           = ImageChooserBlock(label="Image", icon="image")
    aligned_html    = blocks.RawHTMLBlock(icon="code", label='Raw HTML')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a way to simply make the templated (converted) html output from streamfield from within your CityPage model.</p>
<p><strong>Overview:</strong></p>
<ul>
<li>Use Python's built in <a href="https://docs.python.org/2/library/string.html#template-strings" rel="nofollow noreferrer">basic Template system</a> (or <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">Python 3 docs</a>), it is easy and will save you the hassle of dealing directly with the substitution.</li>
<li>Python's built in Template system uses <code>$variablename</code> not <code>$variablename$</code> but works well and can be configured if really needed.</li>
<li>Avoid trying to build up the blocks within your streamfield manually, best to just to something like <code>str(self.streamfield)</code> which will force it to render into nice HTML.</li>
<li>Remember you can customise the html for any streamblock using <code>class Meta: template = ...</code> <a href="http://docs.wagtail.io/en/v1.13.1/topics/streamfield.html#template-rendering" rel="nofollow noreferrer">see docs</a>.</li>
<li>Once we have our HTML output from the streamfield, we can use the <code>string.Template</code> class to create our output text by providing a dict of the template names and what to replace them with. Template variable names should <strong>not</strong> have the <code>$</code> symbol in them (<code>variablename</code> not <code>$variablename</code>), the library takes care of that for you, it also takes care of basic string conversion.</li>
<li>For the sake of simplicity, I used a helpful <code>model_to_dict</code> util from Django to make the <code>CityObject</code> into a dict to pass directly to the template (think of this as your context for Django templates).</li>
<li>Note: This means that your <code>$region</code> would not work, it would need to match the fieldname eg. <code>$transregion</code> - or just change the fieldnames. It makes it easier for reading the code later if all the variables/fieldnames match anyway.</li>
<li>Before we can use this output in our final <code>city_page.html</code> template, we will need to mark it as safe for Django to render directly. <strong>Important:</strong> please be really careful about this as it means someone could save javascript code to the CityObject an it would run in the frontend, you may want another layer after <code>model_to_dict</code> to clear any potential js code.</li>
</ul>
<p><strong>Example: myapp/models.py</strong></p>
<pre><code>from django.forms.models import model_to_dict
from django.utils.safestring import mark_safe

from string import Template
# other imports... Page, etc


class CityPage(Page):

    cityobject = models.ForeignKey(
        CityTranslated, on_delete=models.SET_NULL, null=True, blank=True)
    streamfield = StreamField(BasicStreamBlock, null=True, blank=True)

    content_panels = Page.content_panels + [
        FieldPanel('cityobject', classname="full"),
        StreamFieldPanel('streamfield'),
    ]

    def get_templated_streamfield(self):
        # using str is a quick way to force the content to be rendered
        rendered_streamfield = str(self.streamfield)
        # will generate a dict eg. {'population': 23000, 'transregion': 'EU'}
        # will not convert to values string/unicode - but this is handled by Template
        template_variables = model_to_dict(self.cityobject)
        template = Template(rendered_streamfield)
        # using safe_substitute will **not** throw an error if a variable exists without a value
        converted = template.safe_substitute(template_variables)
        # as we have html markup we must mark it as safe
        return mark_safe(converted)
</code></pre>
<p><strong>Example: myapp/template/city_page.html</strong></p>
<pre><code>{% extends "base.html" %}
{% load wagtailimages_tags %}

{% block content %}
    {% include "base/include/header.html" %}
    &lt;div class="container"&gt;
        &lt;div class="row"&gt;
            &lt;div class="col-md-6"&gt;
                &lt;em&gt;Streamfield Original (without templating)&lt;/em&gt;
                {{ page.streamfield }}
            &lt;/div&gt;
            &lt;div class="col-md-2"&gt;
                &lt;em&gt;Streamfield with templating&lt;/em&gt;
                {{ page.get_templated_streamfield }}
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
{% endblock content %}
</code></pre>
</div>
<span class="comment-copy">Could you please add the code to your BasicStreamBlock? It will help.</span>
<span class="comment-copy">@LBBenJohnston: Done, thx</span>
