<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19373233/new-operators-in-python">New operators in Python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>So I am developing a class for vectorial calculations, and I overwrote the <code>__mul__(self, b)</code> function to do a Scalarproduct. Now whenever I write <code>A * B</code> it calculates as I want it to. So I would like to do the same with an <code>x</code> for the Crossproduct. Sadly there is no default <code>x</code> operator in python, it would probably just annoy you. But is there a way to create your own operator which ONLY works for my own class, but can otherwise be used in a code aswell (as a variable definition I mean)? Or maybe define <code>***</code> as an operator?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of just define an operator, you can write your own interpreter for your own language inside python. Basically, you need to create 4 modules</p>
<ul>
<li><p>parser</p></li>
<li><p>environment</p></li>
<li><p>eval</p></li>
<li><p>repl</p></li>
</ul>
<p>Then you can program with your own language within python.</p>
<p>read <a href="http://norvig.com/lispy.html" rel="nofollow noreferrer">Peter Novig's article</a> for a detailed example of a python LISP interpreter</p>
</div>
<span class="comment-copy">In brief: No, you cannot define your own operators in Python.</span>
<span class="comment-copy">As DYZ's pointer question suggests, you may want to check out this hacky approach: <a href="http://code.activestate.com/recipes/384122-infix-operators/" rel="nofollow noreferrer">code.activestate.com/recipes/384122-infix-operators</a></span>
<span class="comment-copy">In recent versions of Python you could override <a href="https://docs.python.org/3/reference/datamodel.html#object.__matmul__" rel="nofollow noreferrer">the <code>__matmul__</code> method</a>, which is associated with the <code>@</code> operator. It's <i>supposed</i> to be for matrix multiplication, but that's not a hard &amp; fast rule.</span>
