<div class="post-text" itemprop="text">
<p>Suppose that I have a list <code>lst</code> of some objects.</p>
<p>What value of an object is used to perform <code>sorted(lst)</code> if key function is not provided? Is it hash or some id?</p>
</div>
<div class="post-text" itemprop="text">
<p>when no key is provided, <code>sort</code> uses exclusively the <code>&lt;</code> operator, as demonstrated in this example:</p>
<pre><code>class A:
    def __init__(self,a):
        self.a = a
    def __lt__(self,other):
        return self.a &lt; other.a

    def __repr__(self):
        return str(self.a)

lst = [A(12),A(10),A(44)]
print(sorted(lst))
</code></pre>
<p>here I get:</p>
<pre><code>[10, 12, 44]
</code></pre>
<p><code>sort</code> used the defined <code>__lt__</code> (less than) operator internally, only, not equal not superior. Sorting is only performed with <code>&lt;</code> operator.</p>
<p>(commenting the <code>__lt__</code> operator leads to <code>TypeError: unorderable types: A() &lt; A()</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>sort()</code></p>
<blockquote>
<p>This method sorts the list in place, using only &lt; comparisons between
  items. Exceptions are not suppressed - if any comparison operations
  fail, the entire sort operation will fail (and the list will likely be
  left in a partially modified state).</p>
</blockquote>
<p>Refer: <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">list.sort()</a></p>
</div>
<span class="comment-copy">it depends on the object type. This is described in their respective classes (how they implement comparison).</span>
<span class="comment-copy"><code>lst.sort()</code> equal to <code>[1,11,111,2,3,33,333]</code> awesome sort !</span>
