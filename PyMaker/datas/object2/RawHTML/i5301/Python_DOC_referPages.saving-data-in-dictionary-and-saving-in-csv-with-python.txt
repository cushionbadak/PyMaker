<div class="post-text" itemprop="text">
<p>I'm trying to save information about traffic from an API to excel with python.</p>
<p>Basically I can get the data once at the moment but I want it to go underneath headings and then go down a row every new iteration in the csv output; in this example the headings are traffic travel time, length in meters, departure time and traffic delay in seconds. I am basically looking at traffic data every 10 minutes / whatever time say.</p>
<p>So how would I go about creating headers to separate columns, then having the data go below those columns, for the excel output. I assume it's to do with how I append the information to the variable i've set being data. </p>
<p>It would look like this basically,</p>
<pre><code>Traffic Delay - Length In Meters - Departure Time - etc
Data at 0time - Data at 0time - Data at 0time - etc
Data at10time - Data at10time - Data at10time - etc
</code></pre>
<p>And the script i've written so far is below.</p>
<pre><code>from lxml import etree
import urllib.request
import csv

#Pickle is not needed
#append to list next

def handleLeg(leg):
   # print this leg as text, or save it to file maybe...
   text = etree.tostring(leg, pretty_print=True)
   # also process individual elements of interest here if we want
   tagsOfInterest=["noTrafficTravelTimeInSeconds", "lengthInMeters", "departureTime", "trafficDelayInSeconds"]  # whatever
   #list to use for data analysis
   global data
   data = []
   #create header dictionary that includes the data to be appended within it. IE, Header = {TrafficDelay[data(0)]...etc
   for child in leg:
       if 'summary' in child.tag:
          for elem in child:
              for item in tagsOfInterest:
                  if item in elem.tag:
                      data.append(elem.text)


    def parseXML(xmlFile):

  While option
   lastTime = time.time() - 600
   while time.time() &gt;= lastTime + 600:
    lastTime += 600
   #Parse the xml

   #Threading way to run every couple of seconds
   #threading.Timer(5.0, parseXML, ["xmlFile"]).start()

  with urllib.request.urlopen("https://api.tomtom.com/routing/1/calculateRoute/-37.79205923474775,145.03010268799338:-37.798883995180496,145.03040309540322:-37.807106781970354,145.02895470253526:-37.80320743019992,145.01021142594075:-37.7999012967757,144.99318476311566:?routeType=shortest&amp;key=xxxx&amp;computeTravelTimeFor=all") as fobj:
           xml = fobj.read()

   root = etree.fromstring(xml)

   for child in root:
       if 'route' in child.tag:
           handleLeg(child)
           # Write CSV file
           with open('datafile.csv', 'w') as fp:
            writer = csv.writer(fp, delimiter=' ')
            # writer.writerow(["your", "header", "foo"])  # write header
            writer.writerows(data)
           """for elem in child:
               if 'leg' in elem.tag:
                   handleLeg(elem)
"""


if __name__ == "__main__":
   parseXML("xmlFile")

with open('datafile.csv', 'r') as fp:
    reader = csv.reader(fp, quotechar='"')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)
</code></pre>
<p>Here is an example of what the API comes out as (it's XML)</p>
<pre><code>&lt;calculateRouteResponse xmlns="http://api.tomtom.com/routing" formatVersion="0.0.12"&gt;
&lt;copyright&gt;...&lt;/copyright&gt;
&lt;privacy&gt;...&lt;/privacy&gt;
&lt;route&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;5144&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;687&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:16:06+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:27:33+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;478&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;687&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;687&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;806&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;68&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:16:06+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:17:14+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;59&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;68&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;68&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;958&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;114&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:17:14+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:19:08+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;77&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;114&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;114&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;1798&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;224&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:19:08+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:22:53+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;181&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;224&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;224&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;1582&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;280&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:22:53+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:27:33+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;160&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;280&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;280&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;sections&gt;
&lt;section&gt;
&lt;startPointIndex&gt;0&lt;/startPointIndex&gt;
&lt;endPointIndex&gt;139&lt;/endPointIndex&gt;
&lt;sectionType&gt;TRAVEL_MODE&lt;/sectionType&gt;
&lt;travelMode&gt;car&lt;/travelMode&gt;
&lt;/section&gt;
&lt;/sections&gt;
&lt;/route&gt;
&lt;/calculateRouteResponse&gt;
</code></pre>
<p>Really appreciate your help - I'm very confused about how to proceed at the moment.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are various tools in the xml and csv python libraries, and multiple ways to parse xml to csv.</p>
<p><a href="http://blog.appliedinformaticsinc.com/how-to-parse-and-convert-xml-to-csv-using-python/" rel="nofollow noreferrer">http://blog.appliedinformaticsinc.com/how-to-parse-and-convert-xml-to-csv-using-python/</a></p>
<p>seems to have an example already written, if a bit verbose...</p>
<p>I would recommend reading the docs on the libraries, and then using them to transform your data in the way you best see fit.</p>
<p><a href="https://docs.python.org/2/library/xml.html" rel="nofollow noreferrer">https://docs.python.org/2/library/xml.html</a></p>
<p><a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a></p>
<p>Update in response to OP comment:</p>
<p>Use a while loop.</p>
<pre><code>lastTime = time.time() - 600
while time.time() &gt;= lastTime + 600:
    lastTime += 600
    do whatever here
</code></pre>
</div>
<span class="comment-copy">These examples are pretty confusing - appreciate the links though.</span>
<span class="comment-copy">Brilliant. I tried another way to running it with threading. Is super complicated haha</span>
<span class="comment-copy">This only ran the script once</span>
<span class="comment-copy">The loop I posted will run every ten minutes. Which IDE are you using? Step through your code in your debugger and inspect it line by line.</span>
<span class="comment-copy">KK I'm running it through PythonAnywhere</span>
