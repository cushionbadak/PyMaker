<div class="post-text" itemprop="text">
<p>I have a question about using data from functions in another function.
When I try the following:</p>
<pre><code>import pandas as pd
def input(param1, param2, param3 = 4):

    df = (param1 + param2 + param3)
    pd.options.display.float_format = '{:,.0f}'.format

    return df

def calculator(df):
    df2 = df * df
    print(df2)

    return
</code></pre>
<p>I get the following result:</p>
<pre><code>&gt;&gt;&gt; input(2,2,2)
6
</code></pre>
<p>Why does it print out 6 instead of 36 and how can I write it such that it uses the <code>df</code> to calculate <code>df2</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The return value of <code>input()</code> is summing the arguments you have passed to it i.e. <code>2 + 2 + 2 = 6</code>.</p>
<p>You never call the <code>calculator</code> function. Therefore, in order to use the result of <code>input</code> in <code>calculator</code>, you need to return the result and then <em>pass</em> this into the <code>calculator</code> function.</p>
<pre><code>def input(param1, param2, param3 = 4):

    df = (param1 + param2 + param3)

    return df

def calculator(df):
    df2 = df * df
    print(df2)

outer_df = input(2,2,2)
calculator(outer_df)
# 36
</code></pre>
<p><strong>Note:</strong> I would advise against calling a function you write yourself <code>input</code> as this will shadow the built-in <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't see any trouble in your code, you get <code>6</code> because you are calling <code>input</code>, but if you call <code>calculator</code> with that result:</p>
<pre><code>In [2]: input(2,2,2)
Out[2]: 6

In [3]: calculator(6)
36
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a another way to implement this, calling on a feature from <em>functional programming</em>:</p>
<pre><code>from toolz import compose

def my_input(param1, param2, param3 = 4):
    df = (param1 + param2 + param3)
    return df

def calculator(df):
    df2 = df * df
    return df2

comp_calc = compose(calculator, my_input)

comp_calc(2, 2, 2)  # 36
</code></pre>
<p>We've created a composite function and now you don't have to work with nested functions. This is often useful if you have several functions feeding each other. It makes your code cleaner and easier to follow.</p>
</div>
<span class="comment-copy">You aren't calling <code>calculator</code></span>
