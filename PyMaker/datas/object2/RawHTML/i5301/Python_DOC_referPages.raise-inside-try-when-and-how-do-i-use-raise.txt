<div class="post-text" itemprop="text">
<p>So here's the code:</p>
<pre><code>def fancy_divide(list_of_numbers, index):
    try:
        try:
            raise Exception("0")
        finally:
            denom = list_of_numbers[index]
            for i in range(len(list_of_numbers)):
            l    ist_of_numbers[i] /= denom
    except Exception as ex:
        print(ex)
</code></pre>
<p>If I call :</p>
<pre><code>fancy_divide([0, 2, 4], 0)
</code></pre>
<p>why does it not print out '0' ?</p>
<p>and if I edit the code like this :</p>
<pre><code>def fancy_divide(list_of_numbers, index):
    try:
        try:
            raise Exception("0")
        finally:
            denom = list_of_numbers[index]
            for i in range(len(list_of_numbers)):
                list_of_numbers[i] /= denom
    except Exception as ex:
        raise Exception("0")
        print(ex)
</code></pre>
<p>and then call the same thing, it prints:</p>
<pre><code>Traceback (most recent call last):

  File "&lt;ipython-input-16-c1b0ac98281c&gt;", line 1, in &lt;module&gt;
    fancy_divide([0, 2, 4], 0)

  File "/Users/dsn/.spyder-py3/temp.py", line 10, in fancy_divide
    raise Exception("0")

Exception: 0
</code></pre>
<p>Why is that ? And what is the right way to / when should I use raise?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>finally</code> block is raising an exception itself, a divide-by-zero error (because your denominator is 0). If a <code>finally</code> block executes as an exception is bubbling, and raises an exception of its own, it either:</p>
<ol>
<li>On Python 2, replaces the existing exception</li>
<li>On Python 3, it wraps the existing exception in the new exception (creating a chain of exceptions, where the outermost one is the one that is checked, but the inner exceptions exist for context)</li>
</ol>
<p>Your other code prints the traceback because you don't catch the second exception you raise at all (and it bypasses your <code>print</code>).</p>
<p>I'd suggest <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">reading the exception tutorial</a> to understand more; your example code is so contrived/pointless it's impossible to say what misunderstandings you really have, and what is just to illustrate a specific behavior to support your question.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def fancy_divide(list_of_numbers, index):
    try:
        try:
            raise Exception("0")  # 1
        finally:
            denom = list_of_numbers[index]
            for i in range(len(list_of_numbers)):
            list_of_numbers[i] /= denom
    except Exception as ex:
        print(ex)  # 2
</code></pre>
<p><em>Notice the numbers</em></p>
<p>1.This thing executes first triggering the <code>except</code> block outside the 2nd <code>try</code> and disregards other block.</p>
<p>2.This will be triggered as there is an exception in the <code>try</code> block.</p>
<p>Use raise inside the <code>except</code> block to avoid complicated things.</p>
<p>I would rewrite your code as:</p>
<pre><code>def fancy_divide(list_of_numbers, index):
    try:
        # Your fancy divide logic here
    except Exception as ex:
        raise Exception('Something went wrong: {exception}'.format(exception=ex))
    finally:
        # Don't need to
</code></pre>
</div>
<span class="comment-copy">You have another exception in your finally. What do you expect it to do?</span>
<span class="comment-copy">The <code>finally</code> block is run, a <code>ZeroDivisionError</code> is raised, gets caught and printed.  What are you trying to do?  There's probably a better way.</span>
