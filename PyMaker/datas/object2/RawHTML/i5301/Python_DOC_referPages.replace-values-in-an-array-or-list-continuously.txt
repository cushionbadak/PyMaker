<div class="post-text" itemprop="text">
<p>I am very new to coding and I was wondering if it is possible to limit an array in python to 100 items.</p>
<p>If it is possible, can you keep adding to that array and pushing out the old numbers in the array? So the oldest number should be pushed out to make room each time a new number is added.</p>
<p>Thank you very much in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>What about creating a simple function to do this:</p>
<pre><code>def add_to_array(lst, item, maxsize):

    if len(lst) &gt;= maxsize:
        lst.pop(0)

    lst.append(item)
</code></pre>
<p>Which works like this:</p>
<pre><code>&gt;&gt;&gt; lst = [i for i in range(1, 10)]
&gt;&gt;&gt; lst
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; add_to_array(lst, 10, 10)
&gt;&gt;&gt; lst
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; add_to_array(lst, 11, 10)
&gt;&gt;&gt; lst
[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
</code></pre>
<p><strong>Note:</strong> If your looking for something more efficient, you can use <a href="https://docs.python.org/3.6/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>, as pointed out in the other answer. </p>
<p>Here is an example of using <code>deque</code> to emulate your desired behaviour:</p>
<pre><code>&gt;&gt;&gt; lst = deque((i for i in range(1, 10)), maxlen=10)
&gt;&gt;&gt; lst
deque([1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
&gt;&gt;&gt; lst.append(10)
&gt;&gt;&gt; lst
deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)
&gt;&gt;&gt; lst.append(11)
&gt;&gt;&gt; lst
deque([2, 3, 4, 5, 6, 7, 8, 9, 10, 11], maxlen=10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it's possible via <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>:</p>
<pre><code>from collections import deque

lst = deque([], 100)
</code></pre>
<p>Like <code>list.append</code>, <code>deque.append</code> works in place:</p>
<pre><code>A = deque(range(10), maxlen=10)

print(A)

deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)

A.append(10)

print(A)

deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)
</code></pre>
</div>
<span class="comment-copy">Worth pointing out: given the purpose of a queue of fixed length is to <code>append</code> and <code>pop</code> I think the performance benefit of <code>deque</code> over <code>list</code> type may be important.</span>
<span class="comment-copy">This does sort of the opposite of what the asker wants - the <i>newest</i> entry is kicked out when adding more instead of the <i>oldest</i>. <code>lst.pop(0)</code> is probably what you want. But actually, as @jp_data_analysis shows, really what they probably want is <code>deque</code>.</span>
<span class="comment-copy">@jp_data_analysis point noted. Worth pointing out also: the OP is new to coding and is probably looking for something simple like this. Having said that, this is definitely less efficient, but I don't think at this point that should be a problem for the OP.</span>
<span class="comment-copy">Considering OP didn't know to ask about <code>deque</code> or <code>queue</code> or specify <code>FIFO</code>, I think it's safe to assume that performance won't be a concern here :-)</span>
<span class="comment-copy">@RoadRunner. It's a good idea to introduce both the existing tools and the <i>techniques</i> to reinvent the wheel. That being said, <code>lst.append(item)</code> should probably not appear twice in the <code>if</code> statement. You can flip the condition, remove the <code>else</code>, and move it out entirely.</span>
<span class="comment-copy">With <code>lst.append(xxx)</code>.</span>
