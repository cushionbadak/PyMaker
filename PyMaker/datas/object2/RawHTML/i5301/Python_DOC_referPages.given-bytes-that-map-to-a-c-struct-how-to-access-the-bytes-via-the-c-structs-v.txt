<div class="post-text" itemprop="text">
<p>(Bear with me, I think in C and not Python, so you're probably about to see some real dumb stuff...)</p>
<p>I have many (100+) different C <code>structs</code>, pulled into Python (version 3.5.1) as <code>bytes</code>, that I want to be able to access using the original C struct's variable names.  Here's a simple example.  In Python I have received these <code>bytes</code>:</p>
<pre><code># In Python:
example1_bytes = b'\x08\x09\x0a\x0b'
</code></pre>
<p>Assume these <code>bytes</code> were provided by something running C, using a <code>struct</code> of the following format:</p>
<pre><code>// In C:
struct example1 {
  uint8_t val1;
  uint8_t val2;
  uint8_t val3;
  uint8_t val4; };
</code></pre>
<p>How can I process <code>example1_bytes</code> so that I can access them like this:</p>
<pre><code># In Python:
result = process_example1_bytes(example1_bytes)
print(result.val1)
# Prints "8"
print(result.val2)
# Prints "9"
# Et cetera
</code></pre>
<p>Taking it a step further, what if the C <code>struct</code> is more complex and contains arrays and/or sub-structs?  For example, something like this:</p>
<pre><code>// In C:
struct substruct {
  uint8_t ss_val1;
  uint8_t ss_val2; };

struct example2 {
  uint8_t val1;
  uint8_t val2;
  struct substruct ss[8]; };
</code></pre>
<p>How can I process <code>example2_bytes</code> so that I can access them like this:</p>
<pre><code># In Python:
result = process_example2_bytes(example2_bytes)
print(result.val1)
print(result.ss[3].ss_val2)
</code></pre>
<p>I've experimented a bit using Python's <code>struct</code> <code>unpack</code>, which returns tuples and I <em>think</em> is a step in the right direction, but it hasn't quite gotten me to the usable solution I want.  I'm not sure if I need to go down the <code>namedtuple</code> path or take some other direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code> library</a>, which allows you to define Python wrappers around for complex, underlying C-struct. For a simple type:</p>
<pre><code>import ctypes

example1_bytes = b'\x08\x09\x0a\x0b'

class Example1(ctypes.Structure):
    _fields_ = (
        ('val1', ctypes.c_uint8),
        ('val2', ctypes.c_uint8),
        ('val3', ctypes.c_uint8),
        ('val4', ctypes.c_uint8)
    )

ex1 = Example1.from_buffer_copy(example1_bytes)

print(ex1.val1, ex1.val2, ex1.val3, ex1.val4, sep='|')
# 8|9|10|11
</code></pre>
<p>More complex structures:</p>
<pre><code>class substruct(ctypes.Structure):
    _fields_ = (
        ('ss_val1', ctypes.c_uint8),
        ('ss_val2', ctypes.c_uint8),
    )

class Example2(ctypes.Structure):
    _fields_ = (
        ('val1', ctypes.c_uint8),
        ('val2', ctypes.c_uint8),
        ('ss', substruct*8), #array type!
    )
</code></pre>
<p>Note, you define an array of type <code>T</code> of size <code>n</code> using the multiplication operator!: <code>T*n</code></p>
<p>So, along with <code>Structures</code> and <code>Arrays</code>, it supports <code>Unions</code> and pointers, as well as containing all sorts of goodies for C-programmers.</p>
<p>Note, you are using <code>bytes</code> objects, which are immutable and will require a copy when creating a structure. however, if you use a <code>bytearray</code>, you won't require a copy of the underlying buffer!:</p>
<pre><code>In [4]: example1_bytes
Out[4]: b'\x08\t\n\x0b'

In [5]: ex1.val2 = 99

In [6]: example1_bytes
Out[6]: b'\x08\t\n\x0b'
</code></pre>
<p>However, using a bytearray:</p>
<pre><code>In [16]: buffer = bytearray(example1_bytes)

In [17]: ex2 = Example1.from_buffer(buffer)

In [18]: ex2
Out[18]: &lt;__main__.Example1 at 0x10a5b5598&gt;

In [19]: buffer
Out[19]: bytearray(b'\x08\t\n\x0b')

In [20]: ex2.val2 = 99

In [21]: buffer
Out[21]: bytearray(b'\x08c\n\x0b')
</code></pre>
</div>
<span class="comment-copy">Relevant: <a href="https://stackoverflow.com/questions/1825715/how-to-pack-and-unpack-using-ctypes-structure-str" title="how to pack and unpack using ctypes structure str">stackoverflow.com/questions/1825715/â€¦</a></span>
<span class="comment-copy">Exceptionally helpful answer.  Thanks!</span>
<span class="comment-copy">@AndrewCottrell you're welcome! Hopefully, this will make the transition to Python from C a little less painful. Note, Python and C are natural friends, when Guido created Python, he was aiming the language at "Unix/C hackers."</span>
