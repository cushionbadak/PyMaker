<div class="post-text" itemprop="text">
<p>I have a sort like this:</p>
<pre><code>db.getCollection('TEST').aggregate([
    {'$sort': {'create_time': 1, 'status': 1}}
])
</code></pre>
<p>It has 2 sort fields, mongo will sort the <code>create_time</code> field first, then <code>status</code>.But in python <code>dict</code> is disordered, it sometimes sorts <code>create_time</code> first, sometimes <code>status</code> first, so the question is how can I make sure it always sorts the <code>create_time</code> first?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply go by a sort instead of <code>aggregate</code></p>
<p>This is the pattern:</p>
<pre><code>.sort([("field1", pymongo.ASCENDING), ("field2", pymongo.DESCENDING)])
</code></pre>
<p>You can chain the functions so that you can limit the documents to sort by a filter first:</p>
<pre><code>db.getCollection('TEST').find({ field1: &lt;value&gt;, field2: &lt;value&gt; ... }).sort([("field3", pymongo.ASCENDING), ("field4", pymongo.DESCENDING)])
</code></pre>
<p>As a side note: the fields in .find() and .sort() do not need to be different.</p>
</div>
<span class="comment-copy">Use <code>sort</code> function which accepts a <code>tuple</code>. <code>collection.find().sort([("date",pymongo.DESCENDING), ("another_date",pymongo.DESCENDING)])</code></span>
<span class="comment-copy">Hi Garbage Collector, cause I have other options (such as <code>$addFields</code> and sort by the added field), so I must use <code>aggregate</code> to do this.</span>
<span class="comment-copy">Then have a look at <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">Ordered Dict</a></span>
<span class="comment-copy">I have tried by this and it works.Thanks!</span>
