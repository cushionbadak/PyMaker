<div class="post-text" itemprop="text">
<p>Trying as a developer to convert from php to python. Currently attempting to debug a python script that takes around 45 minutes to run. Haven't had it die yet when running from command line. Dies about half the time when run from cron. </p>
<p>With php I could just go back to the box it ran on, check the log file for the time it was run and find/fix errors if the script bombed out. Does python have something similar?</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you are asking for two different things. PHP is generally running as a server side application thus has specific constructs for error logging. Python can run about any type of application and run multiple instances at once - so what you are asking doesn't really make sense in that context. However, you can still accomplish what you desire. </p>
<p>Though you can pipe output to stderr directly from you cron job " &gt; /path/to/log.txt", for more granular information, use pythons <a href="https://docs.python.org/3.6/library/logging.html" rel="nofollow noreferrer">logging</a> libarary - part of the standard libary. Personally, though, I prefer <a href="https://github.com/reubano/pygogo" rel="nofollow noreferrer">pygogo</a> -- it provides a nice wrapper around the logging libary. </p>
<p>So...</p>
<ol>
<li>Add some logging to your Python with either the standard library or pygogo</li>
<li>Pipe the output from your cron job to a log file using " &gt; " or " tee ". </li>
<li>Watch your logs real time using "tail -f /path/to/my/log.txt"</li>
</ol>
<p>I do this regularly, works like a charm. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python <em>can</em> print logs in a file, but that is not the behavior you get out of the box. By default, it prints logs with a log level equal or higher than WARNING on stderr:</p>
<pre><code>import logging              

logging.debug('debug')
logging.info('info')
logging.warning('warning')
logging.error('error')
logging.critical('critical')
</code></pre>
<p>Here is what happens when you run this script:</p>
<pre><code>$ python log.py            
WARNING:root:warning
ERROR:root:error
CRITICAL:root:critical

$ python log.py 2&gt;/dev/null   # does not print anything

$
</code></pre>
<p>So if you redirected stderr to a file in your cron job, you should at least see the warnings and errors in that file. If you want to easily log directly into a file, you can use <code>logging.basicConfig</code>:</p>
<pre><code>import logging                                                                

# print log in example.log instead of the console, and set the log level to DEBUG (by default, it is set to WARNING)
logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)

logging.debug('debug')
logging.info('info')
logging.warning('warning')
logging.error('error')
logging.critical('critical')
</code></pre>
<p>Now if you run it, you should not have any input in the console anymore, but everything should be in <code>example.log</code>:</p>
<pre><code>$ python log.py         

$ cat example.log       
DEBUG:root:debug        
INFO:root:info          
WARNING:root:warning    
ERROR:root:error        
CRITICAL:root:critical  
</code></pre>
<p>You'll find much more details and configuration options in the <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">logging HOWTO page</a></p>
</div>
