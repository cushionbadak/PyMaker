<div class="post-text" itemprop="text">
<p>The Python docs lists property() as a <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in <em>function</em></a>.</p>
<p>However, the function <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">description</a> has the keyword "class" in front of it in the docs. </p>
<blockquote>
<p><em>class</em> <strong>property</strong>(fget=None, fset=None, fdel=None, doc=None) </p>
</blockquote>
<p>This also happens with </p>
<blockquote>
<p><em>class</em> <strong>set</strong>([iterable])</p>
</blockquote>
<p>and</p>
<blockquote>
<p><em>class</em> <strong>slice</strong>(stop)</p>
</blockquote>
<p>What does this mean? - why are classes listed under built-in functions. Is this just a documentation issue or is there a technical reason?</p>
<p>EDIT: I am not asking about how property() works.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/glossary.html" rel="nofollow noreferrer">Python glossary</a> defines a function as:</p>
<blockquote>
<p>A series of statements which returns some value to a caller. It can also be passed zero or more arguments which may be used in the execution of the body.</p>
</blockquote>
<p>A class can be passed arguments, and returns a value to the caller, so arguably by this definition classes <em>are</em> functions*.</p>
<p>In addition (as deceze points out in the comments), a class should always return an instance of itself – <code>set</code>, <code>property</code>, <code>slice</code>, etc. all return instances of <code>set</code>, <code>property</code>, <code>slice</code>, etc. respectively – so <code>set</code>, <code>property</code> and friends are all <em>also</em> classes, and so they are documented as such:</p>
<blockquote>
<p><em>class</em> <strong>set</strong>([<em>iterable</em>])</p>
</blockquote>
<p>meaning that <code>set</code> is a class, not that it returns one.</p>
<p>I would guess that <code>set</code> etc. are documented in the "built-in functions" page because a) they are callable, and b) it's convenient to have all the documentation for "things you can call" in one place.</p>
<p>*Strictly speaking, <code>isinstance(C, types.FunctionType)</code> is false for any class <code>C</code> (as far as I can tell), but classes are certainly callables (<code>isinstance(C, typing.Callable)</code> is true), which is maybe a more useful property to think about.</p>
</div>
<span class="comment-copy">i don't understand why this is a duplicate. i wasn't asking about how the @property decorator works, i'm asking about why it is a class listed as a function.</span>
<span class="comment-copy">You are correct if you want to be pedantic, but since a class can be called as if it was a function, then the distinction is burred.  <code>property</code> is not the only example, <code>str</code>, <code>int</code>, <code>float</code>, <code>set</code>, <code>list</code>, <code>type</code> and more are all listed as functions but are all classes.    This is really a documentation issue, nothing more.</span>
<span class="comment-copy">the doc says "...has a number of functions and <i>types</i> built into it...", <code>property</code> is one of those type constructors, <a href="https://github.com/python/cpython/blob/v3.6.3/Python/bltinmodule.c#L2728-L2753" rel="nofollow noreferrer">see cpython ref</a>, btw I changed my mind and voted to reopen.</span>
<span class="comment-copy">whether or not my question warrants a post on SO is a completely different issue from whether it is a duplicate. marking my question as a duplicate prevents me from getting the proper answer to my question, regardless of how trivial the question is. If the answer is indeed that the title of the documentation is sub-optimal (and not some other technical reason), then why can't the question be answered?</span>
<span class="comment-copy">I'd rather one of the other enthusiasts here post an answer; the only thing I can say is <i>because it is a class</i>, which is too trivial.</span>
<span class="comment-copy">I think one more reason might be that we should understand that these are not just functions (or more accurately, work as function), they are also classes having associated attributes with them.</span>
<span class="comment-copy">So what you are saying is that the documentation should be titled “Built in Callables” since functions, classes and decorators are all callables.</span>
