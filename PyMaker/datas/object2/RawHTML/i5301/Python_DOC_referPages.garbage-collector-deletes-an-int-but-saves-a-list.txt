<div class="post-text" itemprop="text">
<p>I am curious why, if I make a list and an int and try to find it in gc.get_objects(), I found only the list. Code:</p>
<pre><code>import gc

a = 1
b = [1, 2, 3]
for obj in gc.get_objects():
    if a is obj:
        print('Found: a')
    if b is obj:
        print('Found: b')
print(a)
</code></pre>
<p>Outputs only: </p>
<p>Found: b</p>
<p>1</p>
<p>There's no <code>a</code> in <code>gc.get_objects()</code> but of course I can still access it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can read the python documentation <a href="https://docs.python.org/3/library/gc.html" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>As a general rule, instances of atomic types aren’t tracked and instances of non-atomic types (containers, user-defined objects…) are.</p>
</blockquote>
<p>To be noticed that this is not absolutely the case. This citation is also added to avoid misleading:</p>
<blockquote>
<p>However, some type-specific optimizations can be present in order to suppress the garbage collector footprint of simple instances</p>
</blockquote>
</div>
<span class="comment-copy">Not all objects are tracked by the garbage collector, indeed, this is stated in the <code>gc</code> <a href="https://docs.python.org/3/library/gc.html#gc.is_tracked" rel="nofollow noreferrer">docs</a>. Python only uses the garbage collector to clean up objects that might be missed by reference counting (i.e. caused by cyclic references).</span>
<span class="comment-copy">So read more <a href="http://effbot.org/pyfaq/how-does-python-manage-memory.htm" rel="nofollow noreferrer">here</a>. Note: "The standard C implementation of Python uses reference counting to detect inaccessible objects, and a separate mechanism to collect reference cycles, periodically executing a cycle detection algorithm which looks for inaccessible cycles and deletes the objects involved." that separate mechanism <i>is what is exposed</i> <code>gc</code>. As an optimization, many types like <code>int</code>, and <code>str</code> aren't even tracked by the cycle detector.</span>
<span class="comment-copy"><code>gc.get_objects()</code> will not return a list of all objects. also numpy arrays will not be found by this function.</span>
