<div class="post-text" itemprop="text">
<p>I'm trying to understand subprocess.Popen and subprocess.PIPE. While doing so, I created three small scripts.</p>
<p>The goal of this exercise is, to print data with one script, read it from the other and echo this back to the first script.</p>
<p>The problem is, that the last sys.stdin.read() prevents the entire code from working properly.</p>
<p><strong>test.py</strong></p>
<pre><code>#!/usr/bin/python3

from subprocess import Popen, PIPE

proc1 = Popen(["python3","script1.py"], stdin=PIPE, stdout=PIPE)
proc2 = Popen(["python3","script2.py"], stdin=PIPE, stdout=PIPE)

first_output = proc1.stdout.read()

print("[test.py:] " + str(first_output))

proc2.stdin.write(first_output)
proc2.stdin.flush()
proc2.stdin.close()

answer = proc2.stdout.read()

print("[test.py:] " + str(answer))

proc1.stdin.write(answer)
</code></pre>
<p><strong>script1.py</strong></p>
<pre><code>import sys

sys.stdout.write("Hello world")
sys.stdout.flush()

answer = str(sys.stdin.read())
</code></pre>
<p>The last line in script1.py <code>answer = str(sys.stdin.read())</code> causes the entire program to get stuck. If I comment it out, everything works fine.</p>
<p>Why is that so and why am I not able to communicate any further? I didn't find an answer yet.</p>
<p><strong>script2.py</strong></p>
<pre><code>import sys

input_read = str(sys.stdin.read())

sys.stdout.write("[script2.py:] " + input_read + " input read")
sys.stdout.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you do:</p>
<pre><code>first_output = proc1.stdout.read()
</code></pre>
<p>this tries to read everything <code>proc1</code> has to say; that is, it reads until the file handle is closed. That doesn't happen, because <code>proc1</code> is itself waiting to read:</p>
<pre><code>answer = str(sys.stdin.read())
</code></pre>
<p>Communicating between processes using pipes can be a bit tricky. I'd recommend reading through <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">the documentation for the subprocess module</a>.</p>
<p>To solve your immediate problem, I know of two simple solutions. One would be to switch to communicating in lines. In <code>script1.py</code>, write a newline:</p>
<pre><code>sys.stdout.write("Hello world\n")
sys.stdouf.flush()

answer = str(sys.stdin.readline())
</code></pre>
<p>And in script2.py add a newline and switch to <code>readline</code> as well:</p>
<pre><code>input_read = str(sys.stdin.readline())

sys.stdout.write("[script2.py:] " + input_read + " input read\n")
sys.stdout.flush()
</code></pre>
<p>The other approach would be to switch to using <a href="https://docs.python.org/3/library/io.html?highlight=read1#io.BufferedIOBase.read1" rel="nofollow noreferrer"><code>read1</code></a> instead of read. It takes an argument for the number of bytes to read, but doesn't wait to receive that much data before returning it.</p>
</div>
<span class="comment-copy">Thank you for pointing that out. Would it be better to write something around the lines of "as intended" or what would you recommend me changing the title to?</span>
<span class="comment-copy">Hmm. <i>sys.stdin.read() in subprocess never returning</i> would describe the behavior without implying that this happens because a system facility isn't operating per spec.</span>
<span class="comment-copy">Thank you for pointing out what my fault was. I find it a little difficult to enable communication between two processes. I will try to work with readline(). I already read the documentation about subprocess. I will have a closer look into the read documentation.</span>
<span class="comment-copy">It worked just as I intended. readline() was the way to go. Thank you!</span>
<span class="comment-copy">Happy to be of help!</span>
