<div class="post-text" itemprop="text">
<p>I am trying following code:</p>
<pre><code>In [16]: a,b = 1,2
</code></pre>
<p>Above allocates 1 to a and 2 to b as expected and there is no error message:</p>
<pre><code>In [18]: a
Out[18]: 1

In [19]: b
Out[19]: 2
</code></pre>
<p>But if I try to compare them together: </p>
<pre><code>In [17]: a,b == 1,2
Out[17]: (1, False, 2)
</code></pre>
<p>I get 3 outputs. Where is the problem or what do these 3 outputs mean?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no problem here. It is evaluated like this</p>
<pre><code>(a, (b == 1), 2)
</code></pre>
<p>A tuple of three values.</p>
<p>In Python the surrounding parentheses are not necessary to create a tuple if it has more than one elements. So as per Python grammar, this is treated as a tuple. This is documented <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">here</a>,</p>
<blockquote>
<p>Except when part of a list or set display, an expression list containing at least one comma yields a tuple. The length of the tuple is the number of expressions in the list. The expressions are evaluated from left to right.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>The trailing comma is required only to create a single tuple (a.k.a. a singleton); it is optional in all other cases. A single expression without a trailing comma doesnâ€™t create a tuple, but rather yields the value of that expression. (To create an empty tuple, use an empty pair of parentheses: ().)</p>
</blockquote>
<hr/>
<p>To achieve what you want, you need to do it like this</p>
<pre><code>(a, b) == (1, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a,b = 1,2
</code></pre>
<p>This is multiple assignment where the variables a and b are simultaneously given the values 1 and 2. The right-hand side expressions are evaluated from the left to the right first.</p>
<pre><code>  a,b==1,2
</code></pre>
<p>Here only the b==1 is taken. That is why the result is 1,True,2</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>dis</code> module in the python helps you to see whats going under the hood</p>
<pre><code>&gt;&gt;&gt; from dis import dis

&gt;&gt;&gt; def bo(a=2,b=3):
...     print a,b==2,3
... 
&gt;&gt;&gt; dis(bo)
  2           0 LOAD_FAST                0 (a)
              3 PRINT_ITEM          
              4 LOAD_FAST                1 (b)
              7 LOAD_CONST               1 (2)
             10 COMPARE_OP               2 (==)
             13 PRINT_ITEM          
             14 LOAD_CONST               2 (3)
             17 PRINT_ITEM          
             18 PRINT_NEWLINE       
             19 LOAD_CONST               0 (None)
             22 RETURN_VALUE        
&gt;&gt;&gt; bo()
2 False 3
&gt;&gt;&gt; def bo(a=2,b=3):
...     print a,b==3,2
... 
&gt;&gt;&gt; bo()
2 True 2
</code></pre>
<blockquote>
<p>if we use <code>a,b==3,2</code> when <code>a=2</code> and <code>b=3</code> the tuple `s middle element will
  have True value</p>
</blockquote>
<p>First <code>a</code> and <code>b</code> are pushed onto the stack the popped of the stack and compared with corresponding values and then made into a tuple .</p>
<p>So in effect the comparison is done in the reverse order </p>
<p>So reversing the order of elements provides us a correct value in the resulting tuple </p>
<p><strong>In short</strong> </p>
<pre><code>def bo(a=1,b=2,c=3,d=4):
    print a,b,c,d==4,3,2,1
bo()
</code></pre>
<p>will print </p>
<pre><code>1 2 3 True 3 2 1
</code></pre>
<p>So we can access the tuples middle element for correct value</p>
</div>
<span class="comment-copy">So how can I evaluate both of them together and get 1 or 2 comparison outputs?</span>
<span class="comment-copy">Please check the updated answer.</span>
<span class="comment-copy">Can I get 2 comparison outputs while using one <code>==</code> comparison operator?</span>
<span class="comment-copy">Nope. That is not possible.</span>
<span class="comment-copy"><code>list(map(lambda x,y: x==y, [a,b],[1,2]))</code> ?</span>
