<div class="post-text" itemprop="text">
<p>I need to compress a file using the <a href="https://docs.python.org/3/library/gzip.html" rel="nofollow noreferrer"><code>gzip</code></a> module, but the output file extension may not be <code>.gz</code>.</p>
<p>Look at this simple code:</p>
<pre><code>import gzip
import shutil

input_path = "test.txt"
output_path = input_path + ".gz"

with open(input_path, 'w') as file:
    file.write("abc" * 10)

with gzip.open(output_path, 'wb') as f_out:
    with open(input_path, 'rb') as f_in:
        shutil.copyfileobj(f_in, f_out)
</code></pre>
<p>It works fine. But if I replace <code>".gz"</code> with <code>".gzip"</code> for example, then I am not able to open the compressed file correctly:</p>
<p><a href="https://i.stack.imgur.com/gnYAl.gif" rel="nofollow noreferrer"><img alt="Uncompressing not working" src="https://i.stack.imgur.com/gnYAl.gif"/></a></p>
<p>I tried with 7-Zip and WinRar, the result is the same, and the bug persists even if I rename the file.</p>
<p>Does anyone know where the problem comes from, please?</p>
<p>I tried with compression <a href="https://docs.python.org/3.6/library/bz2.html" rel="nofollow noreferrer"><code>bz2</code></a> and <a href="https://docs.python.org/3/library/lzma.html" rel="nofollow noreferrer"><code>lzma</code></a>, they seem to work properly no matter what the extension is.</p>
</div>
<div class="post-text" itemprop="text">
<p>You actually have two versions of file created this way:</p>
<p>First, <code>.gz</code> file:</p>
<pre><code>with gzip.open("test.txt.gz", 'wb') as f_out:
    with open("test.txt", 'rb') as f_in:
        shutil.copyfileobj(f_in, f_out)
</code></pre>
<p>Second, <code>.gzip</code> file:</p>
<pre><code>with gzip.open("test.txt.gzip", 'wb') as f_out:
    with open("test.txt", 'rb') as f_in:
        shutil.copyfileobj(f_in, f_out)
</code></pre>
<p>Both create a GZIP with your <code>test.txt</code> in it. The only difference is that in the second case, <code>test.txt</code> is renamed to <code>test.txt.gzip</code>.</p>
<hr/>
<p>The problem is that the argument to <code>gzip.open</code> actually has two purposes: the filename of the gzip archive <strong>and</strong> the filename of the file inside (bad design, imho).</p>
<p>So, if you do <code>gzip.open("abcd", 'wb')</code> and write to it, it will create gzip archive named <code>abcd</code> with a file named <code>abcd</code> inside.</p>
<p>But then, there comes magic: if the filename endswith <code>.gz</code>, then it behaves differently, e.g. <code>gzip.open("bla.gz", 'wb')</code> creates a gzip archive named <code>bla.gz</code> with a file named <code>bla</code> inside.</p>
<p>So, with <code>.gz</code> you activated the (undocumented, as far as I can see!) magic, whereas with <code>.gzip</code> you did not.</p>
</div>
<div class="post-text" itemprop="text">
<p>The filename inside the archive can be controlled by utilising <code>gzip.GzipFile</code> constructor instead of the <code>gzip.open</code> method. The <code>gzip.GzipFile</code> needs then a separate <code>os.open</code> call before it.</p>
<pre><code>with open(output_path, 'wb') as f_out_gz:
    with gzip.GzipFile(fileobj=f_out_gz, filename=input_path, mode='wb') as f_out: 
    ...
    f_out.flush()
</code></pre>
<p>Note also the added <code>f_out.flush()</code> - according to my experience without this line the <code>GzipFile</code> may in some cases randomly not flush the data before the file is closed, resulting in corrupt archive.</p>
<p>Or as a complete example:</p>
<pre><code>import gzip
import shutil

input_path = "test.txt"
output_path = input_path + ".gz"

with open(input_path, 'w') as file:
    file.write("abc" * 10)

with open(output_path, 'wb') as f_out_gz:
    with gzip.GzipFile(fileobj=f_out_gz, filename=input_path, mode='wb') as f_out
        with open(input_path, 'rb') as f_in:
            shutil.copyfileobj(f_in, f_out)
            f_out.flush()
</code></pre>
</div>
<span class="comment-copy">Do the files differ?</span>
<span class="comment-copy">@StefanPochmann It looks like as theire size differ.</span>
<span class="comment-copy">Why are you trying this, btw? <code>.gzip</code> seems to be nonstandard. At least the <a href="https://en.wikipedia.org/wiki/Gzip" rel="nofollow noreferrer">wikipedia page</a> only mentions the <code>.gz</code> extension. If you tried output name <code>test.txt.foo</code>, would you expect it to recognize that as gzipped as well?</span>
<span class="comment-copy">@StefanPochmann Because I need to compress arbitrary <code>.tar</code> file given in input to <code>.tgz</code>. I think I will end up with compressing to <code>.tar.gz</code> to ensure the <code>gzip</code> command works well, and then rename to <code>.tgz</code> but this is weird anyway.</span>
<span class="comment-copy">Indeed, this is what I was currently investigating. Actually, I can read correctly the compressed content if I do <code>gzip.open(output_path)</code>, but I cannot if I use 7-Zip or WinRar. I looked at the source code on Github, and I found <a href="https://github.com/python/cpython/blob/a4d00012565d716db6e6abe1b8f33eaaa4de416e/Lib/gzip.py#L230-L231" rel="nofollow noreferrer">the behavior you are describing</a>. If I manually edit the module source code on my computer, and add <code>else: fname = b''</code> it seems to fix it. So I guess I will open an issue on the Python bug tracker and propose a patch to see what Python core developers think of it.</span>
<span class="comment-copy">@Delgan You can use 7 zip to extract the file from the archive and then open it in notepad. It is still usable, just the filename is messed up. Anyway, yes, I think you should propose a change in Python. The behaviour depending on extension is not python-like.</span>
<span class="comment-copy">I opened <a href="https://bugs.python.org/issue32698" rel="nofollow noreferrer">an issue on the bug tracker</a> but I closed it shortward after that because there is a workaround using <a href="https://docs.python.org/3/library/gzip.html#gzip.GzipFile" rel="nofollow noreferrer"><code>gzip.GzipFile()</code></a>.</span>
