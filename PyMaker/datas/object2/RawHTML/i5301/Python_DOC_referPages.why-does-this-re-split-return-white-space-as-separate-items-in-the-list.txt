<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/22444/my-regex-is-matching-too-much-how-do-i-make-it-stop">My regex is matching too much. How do I make it stop?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I am using this code to split a string at <code>\.*[\s$]</code>, but preserving the split characters as an item in the list:</p>
<pre><code>import re

markup = r"\{caption Figure 1: Leaf shapes\} \image:leaf_shapes.tiff"
tokens = re.split(r'(\.*[\s$])', markup)
</code></pre>
<p>I expected it to return this list:</p>
<pre><code>['\\caption ', 'Figure 1: Leaf shapes', '\\} ', '\\image:leaf_shapes.tiff']
</code></pre>
<p>But instead I get this:</p>
<pre><code>['\\{caption', ' ', 'Figure', ' ', '1:', ' ', 'Leaf', ' ', 'shapes\\}',
 ' ', '\\image:leaf_shapes.tiff']
</code></pre>
<p>Why are white spaces returned as separate items in the list?</p>
<h3>Edit</h3>
<p>I was supposed to escape the backslash, not the period, so I've changed my code to this:</p>
<pre><code>markup = r"\{caption Figure 1: Leaf shapes\} \image:leaf_shapes.tiff"
tokens = re.split(r'(\\.*[\s$])', markup)
</code></pre>
<p>But now I get this result:</p>
<pre><code>['', '\\{caption Figure 1: Leaf shapes\\} ', '\\image:leaf_shapes.tiff']
</code></pre>
<p>Please look at my expected result so you know what I'm trying to achieve.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get your expected output, you'd want to use a non-greedy match, changing:</p>
<pre><code>re.split(r'(\\.*[\s$])', markup)
</code></pre>
<p>to:</p>
<pre><code>re.split(r'(\\.*?[\s$])', markup)
</code></pre>
<p>The reason is that <code>.*</code> will happily match as much of the string as possible (so long as it can still match the fixed anchors around it), and since your fixed anchors are so simple (a leading backslash, any characters, then trailing whitespace or <code>$</code> character), it will match from the first backslash to the final whitespace character.</p>
<p>That gets output of:</p>
<pre><code>['', '\\{caption ', 'Figure 1: Leaf shapes', '\\} ', '\\image:leaf_shapes.tiff']
</code></pre>
<p>which is almost what you want (aside from the leading empty string, created because your regex matches at the very beginning of the string). You can manually pop it off if needed, e.g. to remove leading and trailing empty strings:</p>
<pre><code>tokens = re.split(r'(\\.*?[\s$])', markup)
if tokens and not tokens[0]:
    tokens.pop(0)
if tokens and not tokens[-1]:
    tokens.pop()
</code></pre>
<p>Note: If your intent was to match until whitespace or end of string, not whitespace or literal <code>$</code>, you need to change <code>[\s$]</code> to <code>(?:\s|$)</code>; inside a character class <code>$</code> isn't special, so you need to use a (non-capturing) grouped alternation instead.</p>
</div>
<span class="comment-copy">You're using capturing parentheses, so it's <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">going to be returned with the results</a>.</span>
<span class="comment-copy">@excaza But the <code>\.*</code> is also included in the parentheses, so I thought they would be included in the same items as the white space</span>
<span class="comment-copy"><code>\.*</code> matches <code>.</code> zero to unlimited times</span>
<span class="comment-copy">@kangaroo: You escaped the <code>.</code>, so that only matches literal periods.</span>
<span class="comment-copy">@user2357112 Oops, I was meant to escape the backslash, not the period.</span>
