<div class="post-text" itemprop="text">
<p>I have a Python script which takes a lot of arguments.
I currently use a <code>configuration.ini</code> file (read using <code>configparser</code>), but would like to allow the user to override specific arguments using command line.
If I'd only have had two arguments I'd have used something like:</p>
<pre><code>if not arg1:
    arg1 = config[section]['arg1']
</code></pre>
<p>But I don't want to do that for 30 arguments.
Any easy way to take optional arguments from cmd line, and default to the <code>config</code> file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try the following, using <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer">dict.update()</a>:</p>
<pre><code>import argparse
import configparser

config = configparser.ConfigParser()
config.read('config.ini')
defaults = config['default']

parser = argparse.ArgumentParser()
parser.add_argument('-a', dest='arg1')
parser.add_argument('-b', dest='arg2')
parser.add_argument('-c', dest='arg3')
args = vars(parser.parse_args())

result = dict(defaults)
result.update({k: v for k, v in args.items() if v is not None})  # Update if v is not None
</code></pre>
<p>With this example of ini file:</p>
<pre><code>[default]
arg1=val1
arg2=val2
arg3=val3
</code></pre>
<p>and</p>
<pre><code>python myargparser.py -a "test"
</code></pre>
<p><code>result</code> would contain:</p>
<pre><code>{'arg1': 'test', 'arg2': 'val2', 'arg3': 'val3'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/collections.html#chainmap-objects" rel="nofollow noreferrer">ChainMap</a> from the <code>collections</code> module.</p>
<p>From the doc:</p>
<blockquote>
<p>A ChainMap groups multiple dicts or
  other mappings together to create a single, updateable view. [...]</p>
<p>Lookups search the underlying mappings successively until a key is
  found.  [...]</p>
</blockquote>
<p>So, you could create </p>
<ul>
<li>a <code>config</code> dict containing the key-value pairs from your config file,</li>
<li>a <code>cmd_line_args</code> dict containing the ones given on the command line</li>
</ul>
<p>Then, create a ChainMap:</p>
<pre><code>from collections import ChainMap
combined = ChainMap(cmd_line_args, config)
</code></pre>
<p>When you access <code>combined['arg1']</code>, arg1 will first be looked up in the <code>cmd_line_args</code> dict, and if it isn't found there, <code>config[arg1]</code> will be returned.
You can chain as many dicts as you wish, which lets you combine as many levels of defaults as you wish.</p>
</div>
<span class="comment-copy">You should have a look at <a href="https://docs.python.org/3/library/collections.html#chainmap-objects" rel="nofollow noreferrer">collections.ChainMap</a>, there's even an example quite close to what you want.</span>
<span class="comment-copy">Use <code>default=argparse.SUPPRESS</code>, <a href="https://docs.python.org/3/library/argparse.html#default" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#default</a>, to keep arguments out of the namespace when no value is provided.  Then use <code>update</code> to add <code>vars(args)</code> entries to a dictionary containing the <code>config</code> values.</span>
<span class="comment-copy">With <code>default=argparse.SUPPRESS</code> you won't need the <code>None</code> filter.</span>
