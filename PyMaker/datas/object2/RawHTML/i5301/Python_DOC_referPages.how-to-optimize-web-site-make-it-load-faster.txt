<div class="post-text" itemprop="text">
<p>I have a webpage which does web scraping and displays news in a slideshow. It also extracts tweets from Twitter using tweepy. </p>
<p>The code sequence is below: </p>
<pre><code>class extract_news:
   def bcnews(self):
        //code to extract news
   def func2(self):
        //code to extract news
    ...
    ...
   def extractfromtwitter(self):
        //code to extract using tweepy
</code></pre>
<p>I have multiple such functions to extract from different websites using BS4 and to display the news and tweets. I am using Flask to run this code.</p>
<p>But the page takes about 20seconds or so to load. And if someone tries to access it remotely, it takes too long and the browser gives the error "Connection Timed Out" or just doesn't load.</p>
<p>How can I make this page load faster? Say in like &gt;5 seconds.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to identify the bottlenecks in your code and then figure out how to reduce them. It's difficult to help you with the minimal amount of code that you have provided, but the most likely cause is that each HTTP request takes most of the time, and the parsing is probably negligible in comparison.</p>
<p>See if you can figure out a way to paralleise the HTTP requests, e.g. using the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> or <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a> modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with the others. To give a concrete answer/solution we will NEED to see the code. 
However in a nutshell what you will need to do is profile the application with your DevTools. This will result in you pushing the sync javascript code below the CSS, markup, and ASCII loading. </p>
<p>Also create a routine to load an initial chunk of content (approximately one page or slide worth) so that the user will have something to look at. The rest can load in the background and they will never know the difference. It will almost certainly be available before they are able to click to scroll to the next slide. Even if it does take 10 seconds or so.</p>
<p>Perceived performance is what I am describing here. Yes I agree , you will and should find ways to improve the overall loading. However arguably more important is improving the "perceived performance". This is done (as I said), by loading some initial content. Then streaming in the rest immediately afterwards.</p>
</div>
<span class="comment-copy">Cannot optimize code we cannot see</span>
<span class="comment-copy">The solution to your problem is Javascript, not Python. Push all the processing to the client, not the server</span>
<span class="comment-copy">Without watching code and calculating space and time complexity no one can help you.</span>
<span class="comment-copy">And/or prefetch some results so that you already have them cached when a client comes in. They probably don't care if the content you are displaying is 5 or 10 minutes old, most of the time.</span>
