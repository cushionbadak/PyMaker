<div class="post-text" itemprop="text">
<p>I'm not great on all the technical terms so I'll do my best to explain my problem.</p>
<p>I've written a small script to open android SDK and check for attached devices (using windows 10 and python 2.7.14). The code I've got is as follows:</p>
<pre><code>import os
import datetime
import time

print 'Current Directory:', os.getcwd()
print 'Opening Android SDK...'
os.chdir('C:\\android-sdk\\platform-tools')
print 'Current Directory:', os.getcwd()
t = time.ctime()
print t
print 'Checking for connected devices:'
os.system('adb devices -l')
</code></pre>
<p>That all works fine, but I want to get the last 3 lines to save to a text file. I've tried <code>f = open('logfile.txt', 'w')</code> then converting it all to a string  using <code>s = str(t, 'Checking for connected devices:', os.system('adb devices -l'))</code> and writing it to the file and closing it, but it's not working. It's not even creating the file, let alone writing anything to it.</p>
<p>I'm probably missing something key but I'm a newbie at this so please be nice! </p>
<p>Any help would be much appreciated.</p>
<p>Many thanks</p>
<p>Edit: whole code with the write stuff included:</p>
<pre><code>import os
import datetime
import time

print 'Current Directory:', os.getcwd()
print 'Opening Android SDK...'
os.chdir('C:\\android-sdk\\platform-tools')
print 'Current Directory:', os.getcwd()
t = time.ctime()
f = open('logfile.txt', 'w')
s = str(t, 'Checking for connected devices:', os.system('adb devices -l'))
f.write(s)
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following:</p>
<pre><code>import os 
import subprocess 
import time 

print ('Current Directory: {}'.format(os.getcwd()) ) 
print ('Opening Android SDK...') 
os.chdir('C:\\android-sdk\\platform-tools') 
print ('Current Directory: {}'.format(os.getcwd()) )
t = str(time.ctime()) 
try:
    process_output = subprocess.check_output(["adb", "devices", "-l"])
except: #Add here the type of exception you want to raise and logic
    print("Please check your ADB installation and syntax.")
s = ('{} Checking for connected devices: {}'.format(t,process_output) ) 
with open('logfile.txt', 'w') as f:
    f.write(s) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.system</code> executes the command in a subshell and returns the command's exit code. It does not provide any mean to capture the outputs of the command ("outputs" =&gt; what the command prints to it's stdout/stderr streams).</p>
<p>To capture the command's outputs you'll have to use some of the <code>subprocess</code> module's feature, the most obvious here being <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a> </p>
<pre><code># ...
import subprocess
# ...
# NB : you may want to catch subprocess.CalledProcessError here
out = subprocess.check_output(['adb',  'devices', '-l'])
msg = "{t}\nChecking for connected devices:\n{out}".format(t=t, out=out)
with open('logfile.txt', 'w') as f:
    f.write(msg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks everyone for your help. The answer was: </p>
<pre><code>import os
import time
import subprocess

print 'Current Directory:', os.getcwd()
print 'Opening Android SDK...'
os.chdir('C:\\android-sdk\\platform-tools')
print 'Current Directory:', os.getcwd()
print 'Checking for connected devices:'
t = time.ctime()
# save log of time and connected devices
with open('logfile.txt', 'w') as f:
    s = ('{}\n{}'.format(t, subprocess.check_output(["adb", "devices", "-l"])))
    f.write(s)
print(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.5+ you can (and probably should) use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a> which conveniently replaces the legacy <code>subprocess.check_output()</code> with a more versatile API.</p>
<pre><code>import subprocess

with open('logfile.txt', 'w') as f:
    subprocess.run(['adb', 'devices', '-l'], stdout=f,
        universal_newlines=True)  # this obscurely makes everything Unicode
</code></pre>
<p>Directly connecting the <code>stdout</code> of the subprocess to an open file handle is possible via the old <code>check_output()</code> API too, mind you.</p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a></span>
<span class="comment-copy">@GeekSambhu opening a file in write mode creates it if it doesn't exist yet (and truncate it if it does), so opening in append mode wont change much here (wrt/ file creation I mean).</span>
<span class="comment-copy"><code>os.system</code> writes directly to its shell's <code>stdout</code>, it's not designed to allow you to capture that output (although you <i>could</i> capture it via shell redirection). Generally, you should use one of the <code>subprocess</code> functions instead of the very primitive <code>os.system</code>.</span>
<span class="comment-copy">If you are writing new code, you should definitely be targetting Python 3 now.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/26005583/return-value-of-x-os-system">Return value of x = os.system(..)</a></span>
<span class="comment-copy">Tried this, it removed the output of the adb command and still hasn't created a text file :(</span>
<span class="comment-copy">Try to print s and see whats inside, unfortunately i can't install adb to run it since i don't have root access on my current machine</span>
<span class="comment-copy">When I do that it outputs exactly what I need it to (everything that's been written to it), but i still can't actually find the text file?</span>
<span class="comment-copy">umh weird, try to create a new folder, put the script inside and run it from there, does it create the <code>logfile.txt</code>?</span>
<span class="comment-copy">Right it was me being an idiot... I was looking for it in the folder where the original .py file was, it's in the platform-tools folder, which is pretty obvious now I stop and think. -_- Thank you for your help!!</span>
<span class="comment-copy">@elarinya17 added a Q&amp;D example (untested obviously since I dont have adb installed here).</span>
<span class="comment-copy">I'm getting some errors, I think it's because it's not recognising the adb command anymore.</span>
<span class="comment-copy">Ok I fixed the error (just needed a comma between 'devices' and '-l', but now it's just not running the adb command at all, and not creating a text file either</span>
<span class="comment-copy">Yes I saw the error too (and fixed it in my answer).  wrt/ the "it's just not running...": if you have an error, please post the error message, the full traceback, and the <i>exact</i> code that produced the error (edit your question, dont post this in a comment). Else, add some traces in your code (ie <code>print "calling command"</code> before the subprocess call and <code>print  "out : '{}'".format(out)</code> just after the subprocess call. Basic debugging stuff really.</span>
<span class="comment-copy">@ModusTollens you're right indeed, my bad. elarinya17 if you read this...</span>
<span class="comment-copy">This is now identical to the accepted answer. Perhaps just delete this as it doesn't contribute anything.</span>
<span class="comment-copy">I'ma just leave it here because I got told off for not posting it before, and then told off for posting it in the wrong place.</span>
