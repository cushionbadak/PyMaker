<div class="post-text" itemprop="text">
<p>i have a problem i don't know how to print two dictionary on the same line.</p>
<p>I have: </p>
<pre><code>Fantasy = {"Gotham":[city, 2000], "Smallville":[town, 40], "Nuketown":[town,60]}
Real = {"London":[city, 1500], "Whitby":[town, 40], "Liverpool":[city, 1000]}
</code></pre>
<p>i've tried this (pass):</p>
<pre><code>listFantasy = dictList(Fantasy)
listReal = dictList(Real)    
def dictList (dict):
       list = []
         for key, value in dict_.iteritems(): # Create list form dict
            temp = [key,value]
            lista_finale.append(temp)
       return list

for list1, list2 in zip(listFantasy, listReal):
        print list1[0]
        for listValue1, listValue2 in zip(list1[1:],list2[1:]):
            listValue1.sort(key = lambda x: x[1], reverse = True)
            listValue2.sort(key = lambda x: x[1], reverse = True)
            for value1, value2 in zip(listValue1, listValue2):
                print " \n %-10s \t %-10s" % (valore1[0], valore1[1]),"\t\t\t\t %-10s \t %-10s" % (valore2[0], valore2[1])
</code></pre>
<p>OUTPUT:</p>
<pre><code>Gotham           London 
   city 2000        city 1500        
NukeTow        Liverpool
   town 60          city 1000
Smallville     Whitby
   town 40          town 40
</code></pre>
<p>But this solution is very slow, it takes me about 30 seconds, I need to know how to directly print the two dictionaries online in the same way, without serious waste of time on the code execution.</p>
</div>
<div class="post-text" itemprop="text">
<p>May be like this?</p>
<pre><code>&gt;&gt;&gt; Fantasy = {'Gotham':['city', 2000], 'Smallville':['town', 30]}
&gt;&gt;&gt; Real = {'London':['city', 1000], 'Whitby':['town', 40]}
&gt;&gt;&gt; print '{:15}\t\t{:15}'.format('Fantasy','Real')    
&gt;&gt;&gt; for c1,c2 in zip(sorted(Fantasy),sorted(Real)):
        print '{:10}{:5}\t\t{:10}{:5}'.format(c1, Fantasy[c1][1], c2,Real[c2][1])

Fantasy             Real    
Gotham     2000     London     1000
Smallville   30     Whitby       40
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here you go</p>
<pre><code>print(Fantasy, Real)
</code></pre>
<p>If you want a custom format, then looping over the two is the only option. Consult <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer"><code>IO Formatting</code></a> documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try this:-</strong></p>
<pre><code>Fantasy = {"Gotham":["city", 2000], "Smallville":["town", 30]}
Real = {"London":["city", 1000], "Whitby":["town", 40]}

for i,j in zip(Fantasy,Real):
    print (i,end='')
    print (" ",Fantasy[i][-1],end = '')
    print (" ",j,end='')
    print (" ",Real[j][-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to join and align an arbitrary number of dictionaries (maybe, not only Fantasy and Real), with multiple object types (maybe, not only city and town), you may find <code>pandas</code> useful:</p>
<pre><code>Fantasy = {'Gotham':['city', 2000], 'Smallville':['town', 30]}
Real = {'London':['city', 1000], 'Whitby':['town', 40]}
# You have to code 'Fantasy' and 'Real' as strings, for Python to interpret and print them
dicts = {'Fantasy': Fantasy, 'Real': Real}

import pandas as pd
frames = []
for key, value in dicts.items():
    # Create a small table from each dict
    frame = pd.DataFrame(value, index=['type', 'size']).T.reset_index().set_index('type')
    # Add an extra column name (e.g. 'Fantasy')
    frame.columns = pd.MultiIndex.from_arrays([[key]*2, frame.columns])
    frames.append(frame)
print(pd.concat(frames, axis=1))
</code></pre>
<p>This code prints a little bit more than you wanted, but I think this extra info is useful, and must be shown explicitly:</p>
<pre><code>         Fantasy          Real      
           index  size   index  size
type                                
city      Gotham  2000  London  1000
town  Smallville    30  Whitby    40 
</code></pre>
</div>
<span class="comment-copy">Please update your question with the code you have tried so far.</span>
<span class="comment-copy">Your declaration is bloken, since you will have <code>NameError</code> while running it.</span>
<span class="comment-copy">Also note that the order cannot be guaranteed (you could have <code>Gotham</code> and <code>Whitby</code> in the same line). And <i>quote your strings...</i></span>
<span class="comment-copy">thankyou for updating the question. The trouble now is that your code doesn't run: First line has <code>NameError: name 'Gotham' is not defined</code></span>
<span class="comment-copy">why is Smallville, London on the same line  when op also asked for Gotham and London to be on same line</span>
<span class="comment-copy">In python <code>dict</code>s don't have an order of their keys.</span>
<span class="comment-copy">@AlbinPaul Sorting added.</span>
<span class="comment-copy">i hope this will help you</span>
