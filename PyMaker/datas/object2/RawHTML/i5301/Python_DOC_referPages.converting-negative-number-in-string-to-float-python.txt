<div class="post-text" itemprop="text">
<p>Ok. I give up.</p>
<p>I have a DataFrame with a column ("Amount") of large numbers:</p>
<pre><code>Amount
-1 000 000,00
 4 848 903,00
-2 949 234,00
13 038 023,00
 7 985 232,00
 ....
</code></pre>
<p>I want to convert these to numbers that I can calculate with.</p>
<p>Let's investigate:</p>
<pre><code>&gt;type(b["Amount"][0])
str
</code></pre>
<p>Ok, it's a string.</p>
<pre><code>&gt;float("-1 000 000,00".replace(' ', '').replace(',','.'))
-1000000.00
</code></pre>
<p>Ok, works great!</p>
<p>To make a lambda thingy (to process all elements in column), I need it in a function:</p>
<pre><code>def make_float(num):
    num = num.replace(' ','').replace(',','.')
    return float(num)


&gt;make_float(b["Amount"][0])
ValueError: could not convert string to float: −1 000 000.00
</code></pre>
<p>What?!</p>
<pre><code>&gt;b["Amount"][0].replace(' ','').replace(',','.')
Out[258]:
'\xe2\x88\x921\xc2\xa0000\xc2\xa0000.00'
</code></pre>
<p>Oh no!! Unicode hell! I give up.</p>
<p><strong>Does Python have an easy function/method that will convert my numbers (including negative) to something I can calculate with?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>looks like you have a problem with the minus('-') symbol in the string. </p>
<p><strong>Try:</strong></p>
<pre><code>def make_float(num):
    num = num.replace(' ','').replace(',','.').replace("−", "-")
    return float(num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should solve your issue. The problem is to get the first value of the column as a value you should use <code>pd.Series.values[0]</code>.</p>
<pre><code>import pandas as pd

s = pd.Series(['-1 000 000,00'])

def make_float(num):
    num = num.replace(' ','').replace(',','.')
    return float(num)

s.map(make_float)

# 0   -1000000.0
# dtype: float64

make_float(s.values[0])
# -1000000.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What if you try to encode it?</p>
<pre><code>def make_float(num):
    num = num.encode('latin-1').replace(' ','').replace(',','.')
    return float(num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your data contains unicode minus sign (one of several minus signs in unicode) and non breaking space (one of several space characters in unicode)</p>
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate()</code></a> to convert characters to a format that can be correctly parsed by <code>float()</code>.</p>
<pre><code>def make_float(num):
     return float(num.translate({0x2c: '.', 0xa0: None, 0x2212: '-'}))

make_float('−1\xa0000\xa0000,00')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok. This seemed to do the trick.
It's a solution in 3 steps.</p>
<ol>
<li><p>I checked my dataset with <code>chardetect data.csv</code>
It said 'utf8' with confidence 0.99</p></li>
<li><p>I made sure to pass that into my pandas.read_csv: <code>pandas.read_csv(data....., encoding = 'utf8')</code></p></li>
<li><p>I made a function,</p>
<p>def make_float(num):
num = num.replace(u'\N{MINUS SIGN}', '-')  # encode the minus sign
num = num.replace(',','.') #change the decimal separator from comma to dot
num = num.replace(unichr(160), '') # encode the (non-breaking) space to ''
num = float(num)
return num</p></li>
</ol>
<p>I then passed this function to the pandas.read_csv thing with <code>pandas.read_csv(data...., encoding='utf8', converters={'Amount':make_float})</code> </p>
<p>Working good so far.</p>
</div>
<span class="comment-copy">I even tried a function that goes like this: def make_float(num):          num = num.replace(',','.')     num = num.replace(' ','')     num = num.replace('\U00002013', '-')     num = num.replace(u'\N{MINUS SIGN}', '-')     num = num.decode('unicode_escape').encode('ascii','ignore')          num = float(num)     return num</span>
<span class="comment-copy">What does <code>print(b["Amount"][0])</code> prints out? And in the <code>make_float</code> functions, can you add a <code>print(num)</code> after you set the <code>num</code> variable and see what it prints out?</span>
<span class="comment-copy">The function you wrote is works fine. The problem is with  <code>b["Amount"][0]</code> I guess</span>
<span class="comment-copy">I'm reading this file with pandas.read_csv. Changing the encoding might or might not help?</span>
<span class="comment-copy">The value of <code>print(b["Amount"][0])</code> is <code>-1 000 000,00</code>.</span>
