<div class="post-text" itemprop="text">
<hr/>
<pre><code>out_gate,in_gate,num_connection
a,b,1
a,b,3
b,a,2
b,c,4
c,a,5
c,b,5
c,b,3
c,a,4
</code></pre>
<p>shown above is a sample csv file.
First of all, My final goal is that the compile result becomes a table about number of connections between gates like below:</p>
<pre><code>  a b c 
a 0 4 0 
b 2 0 4 
c 9 8 0 
</code></pre>
<p>and Now I finished making a list of the first column(out_gate)
like this; <code>listfile = ['a','b','c']</code> and trying to match this each data <code>(a,b,c)</code> one by one to the in_gate 
so, for example when out_gate 'c'-&gt; in_gate 'b', number of connections is 8 and
'c'-&gt;'a' becomes 9.</p>
<p>I can match out_blk and in_blk in a row with its connection numbers, but hard to accumulate the connection numbers of each out_gate</p>
<p>Is there any solution ?</p>
</div>
<div class="post-text" itemprop="text">
<p>In plain Python you should look at the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><strong><code>csv</code></strong></a> module for the input and a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><strong><code>collections.defaultdict</code></strong></a> for collecting the totals:</p>
<pre><code>from csv import reader
from collections import defaultdict

d = defaultdict(lambda: defaultdict(int))
with open('file.csv') as f:
    r = reader(f)
    next(r)  # skip headers
    for row in r:
        if len(row) &gt;= 3:
            x, y, count = row
            d[x][y] += int(count)

keys = sorted(d)
for x in keys:
    print(' '.join(str(d[x][y]) for y in keys))

0 4 0
2 0 4
9 8 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you do this for large amounts of data, you should absolutely check out numpy and pandas, which both have more effective and natural methods of handling tables than native python.</p>
<p>In case you only need a solution right now, accumulations can be done straight forwardly in pure python with <code>collections.defaultdict</code>:</p>
<pre><code>from collections import defaultdict

con = defaultdict(int)
for count, line in enumerate(connections):
    if count == 0:
        continue
    in_gate, out_gate, number = line.split(',')
    con[f"{in_gate}-&gt;{out_gate}"] += int(number)
</code></pre>
<p>Now you can access the entries the following way:</p>
<pre><code>print(con['a-&gt;b'])
&gt;&gt; 4
print(con['a-&gt;c'])
&gt;&gt; 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a one-line high-level answer via <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.pivot_table.html" rel="nofollow noreferrer">pandas.pivot_table</a>, if you do not wish to resort to line-by-line readers and defaultdict.</p>
<pre><code>import pandas as pd

df = pd.DataFrame([['a', 'b', 1], ['a', 'b', 3], ['b', 'a', 2], ['b', 'c', 4],
                   ['c', 'a', 5], ['c', 'b', 5], ['c', 'b', 3], ['c', 'a', 4]],
                  columns=['out_gate', 'in_gate', 'num_connection'])

pd.pivot_table(df, index='out_gate', columns='in_gate', values='num_connection', aggfunc='sum').fillna(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>import csv
import itertools
data = list(csv.reader(open('filename.csv')))
new_data = [b+[int(a)] for *b, a in data]
final_data = {tuple(a):sum(map(lambda x:x[-1], list(b))) for a, b in itertools.groupby(sorted(new_data, key=lambda x:x[:2]), key=lambda x:x[:2])}
letters = sorted(set([i for b in final_data.keys() for i in b]))
matrix = '\n'.join([' '.join(map(str, [final_data.get((b, i), 0) for i in letters])) for b in letters])
</code></pre>
<p>Output:</p>
<pre><code>0 4 0
2 0 4
9 8 0
</code></pre>
</div>
<span class="comment-copy">I think you should take a look at pandas.</span>
<span class="comment-copy">Agree with Jutorres, pandas is a good choice (see my solution below) because it is well tested, often well optimized, and deals nicely with missing data.</span>
<span class="comment-copy">Thanks for the answer ! but I've just run the module you posted,  there's an error saying: Traceback (most recent call last):   File "C:/Users/user/Desktop/test7.py", line 8, in &lt;module&gt;     for x, y, count in r: ValueError: not enough values to unpack (expected 3, got 0)  Is there any reason for this ?  thanks agian:)</span>
<span class="comment-copy">There might be an empty line at the end of the file or some line that does not contain at least 2 commas. I added some sanity check there.</span>
<span class="comment-copy">Thanks. by the way, What if My final goal changes into commas and strings as well just like the form of csv file?? (just like 4x4 matrix with commas and strings(a,b,c)) . I appreciate your answer but It still doesn't work when I use this way with 30 input gates and output gates. and I don't understand the meaning of the 9th line of your answer. Everything elses are fine.  and Is there any other way with using lists of colunmns and for loop? (ex) list1=[a,b,c],list2=[b,b,a,c,a,b,b,a]) Hope it helps for others as well thanks!</span>
