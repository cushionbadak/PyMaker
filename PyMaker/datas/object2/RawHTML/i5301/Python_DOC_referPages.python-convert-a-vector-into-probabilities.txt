<div class="post-text" itemprop="text">
<p>So given this <code>numpy</code> array:</p>
<pre><code>import numpy as np

vector = np.array([1, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 1])  

# len(vector) == 12
# 2 x ones, 4 x two, 6 x three
</code></pre>
<p>How can I convert this into a vector of probabilities? </p>
<p>Such that the result would be:</p>
<pre><code>array([0.16, 0.33, 0.33, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.33, 0.33, 0.16])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This essentially requires a grouping operation, which <code>numpy</code> isn't great at... but <code>pandas</code> is. You can do this with <code>groupby</code> + <code>transform</code> + <code>count</code>, and divide the result by the <code>len</code>gth of <code>vector</code>. </p>
<pre><code>import pandas as pd

s = pd.Series(vector)
vector = (s.groupby(s).transform('count') / len(s)).values
</code></pre>
<p></p>
<pre><code>vector
array([ 0.16666667,  0.33333333,  0.33333333,  0.5       ,  0.5       ,
        0.5       ,  0.5       ,  0.5       ,  0.5       ,  0.33333333,
        0.33333333,  0.16666667])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to first determine the frequency of each element. Then create an intermediate mapping dict which will contain key as the element and value as the frequency. Finally using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.html" rel="nofollow noreferrer"><code>numpy.vectorize</code></a> to transform the array to your desired format</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; v = np.array([1, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 1]) 
&gt;&gt;&gt; freq_dict = Counter(v)
</code></pre>
<p>At this point the <code>freq_dict</code> will contains frequency of each element like</p>
<pre><code>&gt;&gt;&gt; freq_dict
&gt;&gt;&gt; Counter({3: 6, 2: 4, 1: 2})
</code></pre>
<p>Next build a probability dict of the format <code>element: probability</code>, using dict comprehension</p>
<pre><code>&gt;&gt;&gt; prob_dict = dict((k,round(val/len(v),3)) for k, val in freq_dict.items())
&gt;&gt;&gt; prob_dict
&gt;&gt;&gt; {1: 0.167, 2: 0.333, 3: 0.5}
</code></pre>
<p>Finally using <code>numpy.vectorize</code> to get your desired output</p>
<pre><code>&gt;&gt;&gt; out = np.vectorize(prob_dict.get)(v)
</code></pre>
<p>This will produce:</p>
<pre><code>&gt;&gt;&gt; out
&gt;&gt;&gt; array([ 0.167,  0.333,  0.333,  0.5, 0.5,  0.5,  0.5, 0.5,
           0.5, 0.333, 0.333, 0.167])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>[Update to a general one]</strong></p>
<p>How about this one using <code>np.histogram</code>:</p>
<pre><code>import numpy as np

l = np.array([1,2,2,3,3,3,3,3,3,2,2,1])
_u, _l = np.unique(l, return_inverse=True)
np.histogram(_l, bins=np.arange(_u.size+1))[0][_l] / _l.size
</code></pre>
</div>
<span class="comment-copy">but this is not a vector of probabilities.  By definition, <code>Probabilities</code> must sum to one. Else it's wrong to call it as probabilities</span>
<span class="comment-copy">@kmario23 Fair point. Forgive my terminology. What should i call it?</span>
<span class="comment-copy">NIce, I knew there must be a nice way. I just couldn't find it! Thanks COLDSPEED!</span>
<span class="comment-copy">In general, <code>numpy</code> way is much faster than <code>pandas</code> way.</span>
<span class="comment-copy">Cool, great answer! Thanks</span>
