<div class="post-text" itemprop="text">
<p>While learning about the <code>tkinter</code> module, i came across a few variables like <code>tkinter.TOP</code>, <code>tkinter.BOTTOM</code>, <code>tkinter.NW</code>, etc.</p>
<p>I also learned that <code>tkinter</code> will work equally fine if you replace them with strings such as <code>'top'</code>, <code>'bottom'</code>, <code>'nw'</code> respectively.</p>
<p>I tried to investigate these variables and found that they're just string objects:</p>
<pre><code>&gt;&gt;&gt; import tkinter
&gt;&gt;&gt; tkinter.TOP
'top'
&gt;&gt;&gt; type(tkinter.TOP)
&lt;class 'str'&gt;
</code></pre>
<p>My question is, what is the use of these 'module constants' if they can just be replaced by strings? Do they provide some sort of performance improvement? I googled for a while but couldn't find an explanation.</p>
</div>
<div class="post-text" itemprop="text">
<p>My recommendation is to never use the tkinter constants. My guess is that they were added to be more pythonic, but in my opinion, it just makes the code harder to read. They provide no performance improvements over using the string literals. It's harmless to use them, though, so it really comes down to personal preference.</p>
<p>Their internal value will likely never change<sup>1</sup> so there's simply no advantage to using the constant over the string literal it represents.</p>
<p>The added benefit to using string literals is that it requires less code. For example, I find this:</p>
<pre><code>something.grid(..., sticky="nsew")
</code></pre>
<p>... much preferable to this:</p>
<pre><code>something.grid(..., sticky=tk.N+tk.S+tk.E+tk.W)
</code></pre>
<p>It's also worth noting that the official tkinter documentation quite often shows the use of the string literals rather than these constants. For example:</p>
<ul>
<li><a href="https://docs.python.org/3/library/tkinter.html#packer-options" rel="nofollow noreferrer">https://docs.python.org/3/library/tkinter.html#packer-options</a></li>
<li><a href="https://docs.python.org/3/library/tkinter.html#tk-option-data-types" rel="nofollow noreferrer">https://docs.python.org/3/library/tkinter.html#tk-option-data-types</a></li>
<li><a href="https://docs.python.org/3/library/tkinter.html#the-index-parameter" rel="nofollow noreferrer">https://docs.python.org/3/library/tkinter.html#the-index-parameter</a></li>
</ul>
<hr/>
<p><sup>1</sup> Tk -- the library upon which tkinter is built -- takes backwards compatibility <em>very</em> seriously. These constants have not changed in <em>decades</em>. Given that the constant names themselves reflect the actual value of the constant, if the value should ever change then it's almost certain that the name of the constant will change as well. It would be rather odd to have a constant named <code>N</code> be defined as "top" or "upper" or whatever the new value might be. </p>
</div>
<div class="post-text" itemprop="text">
<p>Tkinter provides a <code>tkinter.constants</code> module that contains all the constants (aka. <code>Top</code>, <code>Left</code>, ...).  When you import the <code>tkinter</code> module, <code>tkinter.constants</code> is imported automatically. </p>
<p>Usually you can do:</p>
<pre><code>import tkinter
from tkinter.constants import *

print(TOP)
</code></pre>
<p>So you don't need to define all the constants that you need to use in your code manually.</p>
<pre><code>import tkinter

TOP = "top"
LEFT = "left"
</code></pre>
<p>Plus, there's always a chance that <code>tkinter</code> might want to change some of the constants to something else. (Change <code>TOP</code> to the number 3) Since it's contains less bytes than <code>"top"</code>, so it takes up less space. </p>
<p>Using the constants provided by the module guarantees the constants are always defined properly in the current implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless the documentation says you can use either method, then use the constant in the module. </p>
<p>The idea is that the actual implementation of (for example) <code>BOTTOM</code> is hidden so the developers are free to alter it (<em>encapsulation</em>). They might, for example, feel that integer <code>42</code> would be more efficient to use than the text 'bottom' (and it probably would).  That change would break anyone who had make the assumption f the text string.</p>
<p>For the sake of a few characters typed, using the underlying value is not worth the risk. </p>
</div>
<div class="post-text" itemprop="text">
<p>The thing about such constants for tkinter and python modules in general is, that you can overwrite it manually if needed. This is not only relevant for string constants, but for general config. </p>
<p>I'm not aware of tkinter, but probably they are used somewhere in the code and the developers of tkinter wanted to give you the possibility to simply affect the behaviour via overwriting them.</p>
<p>For example, when <a href="https://matplotlib.org/users/customizing.html" rel="nofollow noreferrer">using matplotlib</a>, a package for plotting, u can do things like</p>
<pre><code>import matplotlib as mpl
mpl.rcParams['lines.linewidth'] = 2
</code></pre>
<p>to set the linewidth of the plots other than default.</p>
</div>
<div class="post-text" itemprop="text">
<p>One point is that constants means single copy. Less space used, no GC needed.</p>
<p>Second - compare can be done faster if you know that it is the same object. </p>
<p>Next - code completion - works.</p>
<p>If something is changed - only underlying part needs to be changed - since your code only refers to it, by name.</p>
</div>
<span class="comment-copy">Are you asking about <code>tkinter</code> specifically or generally?</span>
<span class="comment-copy">They're probably just to protect against typos (<code>NameError</code> vs weird and hard to debug stuff)</span>
<span class="comment-copy">Good answer <a href="https://stackoverflow.com/a/46004569/7954504">here</a> for further reading @RottenCandy</span>
<span class="comment-copy">Like the builtin constants <a href="https://docs.python.org/3/library/constants.html" rel="nofollow noreferrer">docs.python.org/3/library/constants.html</a> ?</span>
<span class="comment-copy">@Chris_Rands:  those are <i>real</i> constants (at least, in Python 3 they are), the UPPERCASE names are constant only by convention.</span>
<span class="comment-copy">So that means <code>tkinter</code> just threw in the constants so that it  may match the users' coding style? And there is no such thing as performance improvement?</span>
<span class="comment-copy">@RottenCandy:  I don't know for certain why they threw in the constants, but yes, there is no performance improvement by using the constants. If anything, there's an imperceptibly tiny performance penalty for having to do a lookup on the value of the constant.</span>
<span class="comment-copy">The nsew example isn't a very good one, because <code>tk.NSEW</code> is a thing. That said, these constants don't provide any abstraction; it's like <code>#define ONE 1</code>. The only benefit I can see is that typo-ing <code>tk.SOME_CONSTANT</code> as <code>tk.SOME_CONSTAN</code> produces an AttributeError instead of whatever you'd get from <code>'some_constan'</code>.</span>
<span class="comment-copy"><i>"there's always a chance that tkinter might want to change some of the constants to something else."</i> - I think that chance is effectively zero. tk takes backwards compatibility very seriously, and these string values have been around for decades.</span>
<span class="comment-copy">I can say with almost absolute confidence that the values of these constants will never change. Tk takes backwards compatibility very seriously. These string values have already been around unaltered for decades. While your advice is sound in general, in this specific case I don't think it applies.</span>
<span class="comment-copy">FWIW, the official python docs include examples that use the literal strings, and in most cases shows the literal strings rather than the constants. For example, see <a href="https://docs.python.org/3/library/tkinter.html#packer-options" rel="nofollow noreferrer">docs.python.org/3/library/tkinter.html#packer-options</a></span>
<span class="comment-copy">Surely the point of 'constants' is that you shouldn't change them?</span>
<span class="comment-copy">Yeah of course, I thought he'd talk about Variables and it was just by mistake 'constants'...</span>
<span class="comment-copy">Also - no 'magic numbers' (or magic strings) in the code.</span>
<span class="comment-copy">Well, yest and no. For me - <code>TOP</code>, and <code>"TOP"</code> - are the same here, but if that are numbers, then I would like to see <code>TOP</code>, much more then <code>5</code> :)</span>
<span class="comment-copy">@snakecharmerb: I'm not sure I would call these strings "magic strings" in this specific context. They are quite literally the documented values you must use.</span>
<span class="comment-copy">@BryanOakley perhaps not in this specific context, but the OP claimed to be interested in constants in general.</span>
<span class="comment-copy">His examples ware strings, his question was about "use of these", that is why I've sticked to this case. But in general - I think we are on the same page. Thanks for comments.</span>
