<div class="post-text" itemprop="text">
<p>I know that I can do:</p>
<pre><code>try:
    # do something that may fail
except:
    # do this if ANYTHING goes wrong
</code></pre>
<p>I can also do this:</p>
<pre><code>try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreTooShortException:
    # stand on a ladder
</code></pre>
<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>
<pre><code>try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreBeingMeanException:
    # say please
</code></pre>
<p>Is there any way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>
<pre><code>try:
    # do something that may fail
except IDontLikeYouException, YouAreBeingMeanException:
    # say please
</code></pre>
<p>Now this really won't work, as it matches the syntax for:</p>
<pre><code>try:
    # do something that may fail
except Exception, e:
    # say please
</code></pre>
<p>So, my effort to catch the two distinct exceptions doesn't exactly come through.</p>
<p>Is there a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="noreferrer">Python Documentation</a>:</p>
<blockquote>
<p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>
</blockquote>
<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:
    pass
</code></pre>
<p>Or, for Python 2 only:</p>
<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:
    pass
</code></pre>
<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>How do I catch multiple exceptions in one line (except block)</h2>
</blockquote>
<p>Do this:</p>
<pre><code>try:
    may_raise_specific_errors():
except (SpecificErrorOne, SpecificErrorTwo) as error:
    handle(error) # might log or have some other default behavior...
</code></pre>
<p>The parentheses are required due to older syntax that used the commas to assign the error object to a name. The <code>as</code> keyword is used for the assignment. You can use any name for the error object, I prefer <code>error</code> personally.</p>
<h2>Best Practice</h2>
<p>To do this in a manner currently and forward compatible with Python, you need to separate the Exceptions with commas and wrap them with parentheses to differentiate from earlier syntax that assigned the exception instance to a variable name by following the Exception type to be caught with a comma. </p>
<p>Here's an example of simple usage:</p>
<pre><code>try:
    mainstuff()
except (KeyboardInterrupt, EOFError): # the parens are necessary
    quit(0)
</code></pre>
<p>I'm specifying only these exceptions to avoid hiding bugs, which if I encounter I expect the full stack trace from.</p>
<p>This is documented here: <a href="https://docs.python.org/tutorial/errors.html" rel="noreferrer">https://docs.python.org/tutorial/errors.html</a></p>
<p>You can assign the exception to a variable, (<code>e</code> is common, but you might prefer a more verbose variable if you have long exception handling or your IDE only highlights selections larger than that, as mine does.) The instance has an args attribute. Here is an example:</p>
<pre><code>try:
    mainstuff()
except (KeyboardInterrupt, EOFError) as err: 
    print(err)
    print(err.args)
    quit(0)
</code></pre>
<p>Note that in Python 3, the <code>err</code> object falls out of scope when the <code>except</code> block is concluded.</p>
<h2>Deprecated</h2>
<p>You may see code that assigns the error with a comma. This usage, the only form available in Python 2.5 and earlier, is deprecated, and if you wish your code to be forward compatible in Python 3, you should update the syntax to use the new form:</p>
<pre><code>try:
    mainstuff()
except (KeyboardInterrupt, EOFError), err: # don't do this in Python 2.6+
    print err
    print err.args
    quit(0)
</code></pre>
<p>If you see the comma name assignment in your codebase, and you're using Python 2.5 or higher, switch to the new way of doing it so your code remains compatible when you upgrade.</p>
<h2>The <code>suppress</code> context manager</h2>
<p>The accepted answer is really 4 lines of code, minimum:</p>
<pre><code>try:
    do_something()
except (IDontLikeYouException, YouAreBeingMeanException) as e:
    pass
</code></pre>
<p>The <code>try</code>, <code>except</code>, <code>pass</code> lines can be handled in a single line with the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="noreferrer">suppress context manager, available in Python 3.4</a>:</p>
<pre><code>from contextlib import suppress

with suppress(IDontLikeYouException, YouAreBeingMeanException):
     do_something()
</code></pre>
<p>So when you want to <code>pass</code> on certain exceptions, use <code>suppress</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For python 2.5 and earlier versions, the correct syntax is:</p>
<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:
    print e
</code></pre>
<p>Where <code>e</code> is the Exception instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/2/tutorial/errors.html#handling-exceptions">Python documentation -&gt; 8.3 Handling Exceptions</a>:</p>
<blockquote>
<p>A <code>try</code> statement may have more than one except clause, to specify
  handlers for different exceptions. At most one handler will be
  executed. Handlers only handle exceptions that occur in the
  corresponding try clause, not in other handlers of the same try
  statement. An except clause may name multiple exceptions as a
  parenthesized tuple, for example:</p>
<pre><code>except (RuntimeError, TypeError, NameError):
    pass
</code></pre>
<p>Note that the parentheses around this tuple are required, because
  except <code>ValueError, e:</code> was the syntax used for what is normally
  written as <code>except ValueError as e:</code> in modern Python (described
  below). The old syntax is still supported for backwards compatibility.
  This means <code>except RuntimeError, TypeError</code> is not equivalent to
  <code>except (RuntimeError, TypeError):</code> but to <code>except RuntimeError as</code>
<code>TypeError:</code> which is not what you want.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times. </p>
<pre><code>#This example code is a technique I use in a library that connects with websites to gather data

ConnectErrs  = (URLError, SSLError, SocketTimeoutError, BadStatusLine, ConnectionResetError)

def connect(url, data):
    #do connection and return some data
    return(received_data)

def some_function(var_a, var_b, ...):
    try: o = connect(url, data)
    except ConnectErrs as e:
        #do the recovery stuff
    blah #do normal stuff you would do if no exception occurred
</code></pre>
<p><strong>NOTES:</strong> </p>
<ol>
<li><p>If you, also, need to catch other exceptions than those in the
pre-defined tuple, you will need to define another except block.  </p></li>
<li><p>If you just cannot tolerate a global variable, define it in main()
and pass it around where needed...</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>One of the way to do this is..</p>
<pre><code>try:
   You do your operations here;
   ......................
except(Exception1[, Exception2[,...ExceptionN]]]):
   If there is any exception from the given exception list, 
   then execute this block.
   ......................
else:
   If there is no exception then execute this block. 
</code></pre>
<p>and another way is to create method which performs task executed by <code>except</code> block and call it through all of the <code>except</code> block that you write..</p>
<pre><code>try:
   You do your operations here;
   ......................
except Exception1:
    functionname(parameterList)
except Exception2:
    functionname(parameterList)
except Exception3:
    functionname(parameterList)
else:
   If there is no exception then execute this block. 

def functionname( parameters ):
   //your task..
   return [expression]
</code></pre>
<p>I know that second one is not the best way to do this, but i'm just showing number of ways to do this thing.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Python 2.7 Documentation states that:</h2>
<blockquote>
<p>A try statement may have more than one except clause, to specify
  handlers for different exceptions. At most one handler will be
  executed. Handlers only handle exceptions that occur in the
  corresponding try clause, not in other handlers of the same try
  statement. An except clause may name multiple exceptions as a
  parenthesized tuple, for example:</p>
</blockquote>
<pre><code>try:
    raise ValueError("hello")
except (RuntimeError, ValueError, KeyError) as a:
    print a
</code></pre>
<blockquote>
<p>Note
  that the parentheses around this tuple are required, because except
  ValueError, e: was the syntax used for what is normally written as
  except ValueError as e: in modern Python (described below). The old
  syntax is still supported for backwards compatibility. This means
  except RuntimeError, TypeError is not equivalent to except
  (RuntimeError, TypeError): but to except RuntimeError as TypeError:
  which is not what you want.</p>
</blockquote>
</div>
<span class="comment-copy">Is it possible to store desired exceptions in an iterable, and then catch the iterable? I'm trying to turn a list of warnings into errors using <code>warnings.filterwarnings</code>, and I don't want to have to specify the list of warnings twice.</span>
<span class="comment-copy">I did try it... with a <code>list</code>, and it resulted in a <code>TypeError</code>. Looks like the errors must be in a <code>tuple</code> for catching to work as expected.</span>
<span class="comment-copy">Why would you ever have used a list when you see clearly that it is documented that a tuple is needed in this case?</span>
<span class="comment-copy">It was unclear whether the "parenthesized tuple" was merely syntactical  or that a bona fide tuple was required. "Parenthesized" is misleading because you may create a tuple without parentheses elsewhere and then use it in the <code>except</code> line. It is only necessarily parenthesized if created in the <code>except</code> line.</span>
<span class="comment-copy">Anything parenthesized in python is a tuple</span>
<span class="comment-copy">Most complete answer. The only one that specifies how to use the <code>except (KeyboardInterrupt, EOFError):</code> syntax.</span>
<span class="comment-copy">You shouldn't be assigning e with the comma if you want forward compatible code, and Python 2.5 is no longer being updated: <a href="https://mail.python.org/pipermail/python-committers/2011-October/001844.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-committers/2011-October/…</a></span>
<span class="comment-copy">yes, but with python 2.5 there's no other way. Solution explicitly states the (old) version.</span>
