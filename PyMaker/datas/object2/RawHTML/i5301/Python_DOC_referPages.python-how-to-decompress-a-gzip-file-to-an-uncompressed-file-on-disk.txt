<div class="post-text" itemprop="text">
<p>I want to emulate the behavior of <code>gzip -d &lt;file.gz&gt;</code> within a Python script.</p>
<p>The compressed GZIP file is decompressed and written as a file with the same file name as the original GZIP file without the .gz extension.</p>
<p>file.abc.gz --&gt; file.abc</p>
<p>It's not obvious how to do this using the gzip library, all the examples in the docs are for compressing data arrays, and I've not yet found a good example via Google. Can anyone advise? Thanks in advance for your help.</p>
<p>EDIT: I've tried the below using tarfile module, but unfortunately it's not working, I think since the GZIP file wasn't created with tar.</p>
<pre><code># get the zipped file's contents list, extract the file
with tarfile.TarFile(local_zipped_filename) as tar_file:

    # list the contents, make sure we only extract the expected named file
    members = tar_file.getmembers()
    for member in members:
        if member.name == filename_unzipped:
            members_to_extract = [member]
            tar_file.extractall(path=destination_dir, members=members_to_extract)
            break   # we've extracted our file, done
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import gzip, shutil

with gzip.open('file.abc.gz', 'r') as f_in, open('file.abc', 'wb') as f_out:
  shutil.copyfileobj(f_in, f_out)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/gzip.html" rel="noreferrer"><code>gzip</code> module</a> provides a file-like object with the decompressed content of a gzip file; the <a href="https://docs.python.org/3/library/shutil.html" rel="noreferrer"><code>shutil</code> module</a> provides a convenient helper for copying content from one file-like object to another.</p>
<hr/>
<p>This is a simple inversion of an example given in <a href="https://docs.python.org/3/library/gzip.html#examples-of-usage" rel="noreferrer">the official documentation</a>:</p>
<blockquote>
<p>Example of how to GZIP compress an existing file:</p>
<pre><code>import gzip
import shutil
with open('/home/joe/file.txt', 'rb') as f_in:
    with gzip.open('/home/joe/file.txt.gz', 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <strong><a href="https://docs.python.org/2/library/tarfile.html" rel="nofollow noreferrer">tarfile</a></strong> module to what you are asking.</p>
<p><strong>Example:</strong></p>
<pre><code>import tarfile
tar = tarfile.open("test.tar.gz")
tar.extractall()
tar.close()
</code></pre>
</div>
<span class="comment-copy">Very helpful answer, this appears to work as advertised. Thanks!</span>
<span class="comment-copy">Only true if the OP's file is actually in <code>.tar.gz</code> format, which they haven't as yet specified.</span>
<span class="comment-copy">@CharlesDuffy; You are right.</span>
<span class="comment-copy">Seems to be the case, I get an error when I try using this approach: tarfile.ReadError: invalid header..</span>
