<div class="post-text" itemprop="text">
<p>I am trying to understand what 'callables' are in Python and what it means for a class to be callable. I was playing with the following code:</p>
<pre><code>class A(object):

    def __init__(self):
        pass

print("Is A callable? " + str(callable(A)))
a=A()
print("created a")
a()
</code></pre>
<p>This gives the following result:</p>
<pre><code>Is A callable? True
created a
Traceback (most recent call last):    
File "test2.py", line 11, in &lt;module&gt;
a()
TypeError: 'A' object is not callable  
</code></pre>
<p>Furthermore,</p>
<pre><code>print(type(A.__call__()))
</code></pre>
<p>Gives:</p>
<pre><code>&lt;class '__main__.A'&gt;
</code></pre>
<p>Does this mean that class A has a <code>__call__</code> method? and why is it of type class?</p>
<p>is <code>A.__call__()</code> being called each time I instantiate with A()?</p>
</div>
<div class="post-text" itemprop="text">
<p>So, start with the fact that in Python, ordinarily functions are callable, and classes are callable. 
Leaving apart the mechanisms that mark functions as callable, Python classes have, as you know, special methods. The method that makes <em>instances</em> of a class callable is <code>__call__</code>. So, if your class has an explicit <code>__call__</code> method, its instances are callable and  end of story: when you call the instance, it is the <code>__call__</code> method that is called. </p>
<p>That answers half your question - now let's check what the <code>__call__</code>  method on the class of classes does. </p>
<p>Classes in Python are themselves also first class objects - but they have to be an <strong>instance</strong> of type. That is, calling <code>type</code> as one calls a class to create an instance, creates a new <code>class</code>. The Python runtime does this automatically when a class body block is met in code. 
(but one can also create new classes programmaticaly by explicitly calling type in its three+ parameter form)</p>
<p>As <code>type</code> itself is a subclass of <code>object</code> - its  <code>__new__</code> method is what it has of special, as it creates a new class, filling up all needed data structures as required by the cPython ABI, allocating memory, and putting values into fields that are not accessible from pure Python codes. As it is the class for any kind of class-object in Python it is called a metaclas. One can derive other classes from type and create custom metaclasses, to run code,r insert attributes, register data and so on at the moment classes are created - but that is optional. Any class created goes through type's <code>__new__</code>.</p>
<p>And when you instantiate a class? I wrote above that what makes an object callable in Python is the presence of a <code>__call__</code> method in its class. <code>type</code> being the class of all classes, it <em>does</em> feature a <code>__call__</code> method - and it contains the code needed to orchestrate the call to the class' <code>__new__</code> and <code>__init__</code> methods. And that is why classes are callable, and why Python can use the same syntax for function calls and object instantiation.  </p>
<blockquote>
<p>is <code>A.__call__()</code> being called each time I instantiate with A()?</p>
</blockquote>
<p>Not properly - what is called is <code>type(A).__call__</code>. <code>A.__call__</code> and <code>type(A).__call__</code> will be the same if there is no explict <code>__call__</code> method defined in <code>A</code> (then its class, <code>type</code> is searched for <code>__call__</code>. But special methods are not called implicitly by Python by ordinary attribute retrieval: they are always picked from the object's class - and that is made inside the runtime.</p>
<p>You might be confused for the metaclass' call not to be available to the class: that is simply not defined like that in the method retrieval algorithms from Python. When you ask for an attribute or method of an object- including a special method like <code>__call__</code>, the class is searched for the attribute in the form a descriptor (to provide custom attribute access)  - and then the base classes of that class, but not the class of that class. (Also, for special methods, they are only special if they are defined in the object's class itself: being attached directly to an instance have no effect).</p>
<p>The key document where this is all published is the Python's <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Data Model</a> - it can take some time and experimenting to figure everything out from there, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>When a <code>__something__</code> method of an object is called, something like this happens:</p>
<ul>
<li>Does the object's class have it? If so, return.</li>
<li>Does its class's superclass have it? If so, return.</li>
<li>Does its class's superclass's superclass have it? If so, return.</li>
<li>...</li>
</ul>
<p>Note that it never looks at the object's class's class.</p>
<p>Since classes are instances of <code>type</code> (or a subclass of it, see <a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">here</a>), classes are callable (<code>type</code> has <code>__call__</code>). However, unless the class also defines <code>__call__</code>, its instances won't have it, because it will never look in the class's class.</p>
</div>
<span class="comment-copy">What do you expect <code>a()</code> to do? The former is callable because it delegates to the constructor when called. You haven't specified the behavior that would allow instances of the class to be callable though, which is why the latter fails.</span>
<span class="comment-copy">In Python everything is an object. An object is callaballe if it has a <code>__call__</code> method. Methods are objects as well, so <code>__call__</code> has a <code>__call__</code> method itself.</span>
<span class="comment-copy">I don't think the question marked as duplicate give a straight answer to this question. (the understanding can be puzzled out from the answers there).</span>
<span class="comment-copy">Why do you think there is a relation between doing <code>A()</code> and doing <code>a()</code> ?</span>
<span class="comment-copy">Interesting: <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#callable</a></span>
<span class="comment-copy">thanks this helps a lot</span>
