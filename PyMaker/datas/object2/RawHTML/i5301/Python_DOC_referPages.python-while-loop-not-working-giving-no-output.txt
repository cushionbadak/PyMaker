<div class="post-text" itemprop="text">
<p>I am trying to use a while loop to make a script run every 10 or so minutes (in this example shorter for the sake of understanding if it's working). </p>
<p>It won't work and I'm not sure why - difficult to understand exactly what it is that isn't working. Basically it runs without an issue but nothing is going into the CSV file I am trying to save. Ideally I want it too save across a row, then go down another row with every loop. Thanks in advance!</p>
<pre><code>from lxml import etree
import urllib.request
import csv
#import threading un-need at the moment.
import time

#Pickle is not needed
#append to list next
def handleLeg(leg):

   # print this leg as text, or save it to file maybe...
   #text = etree.tostring(leg, pretty_print=True)
   # also process individual elements of interest here if we want

   tagsOfInterest=["noTrafficTravelTimeInSeconds", "lengthInMeters", "departureTime", "trafficDelayInSeconds"]  # whatever

   #list to use for data analysis
   global data
   data = []
   #create header dictionary that includes the data to be appended within it. IE, Header = {TrafficDelay[data(0)]...etc
   for child in leg:
       if 'summary' in child.tag:
          for elem in child:
              for item in tagsOfInterest:
                  if item in elem.tag:
                      data.append(elem.text)



 #Parse the xml
#Threading way to run every couple of seconds
#threading.Timer(5.0, parseXML, ["xmlFile"]).start()
def parseXML(xmlFile):
    lastTime = time.time() - 10
    while time.time() &gt;= lastTime + 10:
        lastTime += 10
        with urllib.request.urlopen("https://api.tomtom.com/routing/1/calculateRoute/-37.79205923474775,145.03010268799338:-37.798883995180496,145.03040309540322:-37.807106781970354,145.02895470253526:-37.80320743019992,145.01021142594075:-37.7999012967757,144.99318476311566:?routeType=shortest&amp;key=HerpinaLongbottom&amp;computeTravelTimeFor=all") as fobj:
            xml = fobj.read()
        root = etree.fromstring(xml)
        for child in root:
            if 'route' in child.tag:
                handleLeg(child)

           # Write CSV file
                with open('datafile.csv', 'a') as fp:
                    writer = csv.writer(fp, delimiter=' ')
            # writer.writerow(["your", "header", "foo"])  # write header
                    writer.writerows(data)
                with open('datafile.csv', 'r') as fp:
                    reader = csv.reader(fp, quotechar='"')
        # next(reader, None)  # skip the headers
                    data_read = [row for row in reader]
                print(data_read)


if __name__ == "__main__":
   parseXML("xmlFile")

"""with open('datafile.csv', 'r') as fp:
    reader = csv.reader(fp, quotechar='"')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"""
</code></pre>
<p>This is an example of the XML it's pulling as I obviously can't provide the code to the API i'm using.</p>
<pre><code>&lt;calculateRouteResponse xmlns="http://api.tomtom.com/routing" formatVersion="0.0.12"&gt;
&lt;copyright&gt;...&lt;/copyright&gt;
&lt;privacy&gt;...&lt;/privacy&gt;
&lt;route&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;5144&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;687&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:16:06+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:27:33+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;478&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;687&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;687&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;806&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;68&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:16:06+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:17:14+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;59&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;68&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;68&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;958&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;114&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:17:14+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:19:08+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;77&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;114&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;114&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;1798&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;224&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:19:08+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:22:53+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;181&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;224&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;224&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;leg&gt;
&lt;summary&gt;
&lt;lengthInMeters&gt;1582&lt;/lengthInMeters&gt;
&lt;travelTimeInSeconds&gt;280&lt;/travelTimeInSeconds&gt;
&lt;trafficDelayInSeconds&gt;0&lt;/trafficDelayInSeconds&gt;
&lt;departureTime&gt;2018-01-16T11:22:53+11:00&lt;/departureTime&gt;
&lt;arrivalTime&gt;2018-01-16T11:27:33+11:00&lt;/arrivalTime&gt;
&lt;noTrafficTravelTimeInSeconds&gt;160&lt;/noTrafficTravelTimeInSeconds&gt;
&lt;historicTrafficTravelTimeInSeconds&gt;280&lt;/historicTrafficTravelTimeInSeconds&gt;
&lt;liveTrafficIncidentsTravelTimeInSeconds&gt;280&lt;/liveTrafficIncidentsTravelTimeInSeconds&gt;
&lt;/summary&gt;
&lt;points&gt;...&lt;/points&gt;
&lt;/leg&gt;
&lt;sections&gt;
&lt;section&gt;
&lt;startPointIndex&gt;0&lt;/startPointIndex&gt;
&lt;endPointIndex&gt;139&lt;/endPointIndex&gt;
&lt;sectionType&gt;TRAVEL_MODE&lt;/sectionType&gt;
&lt;travelMode&gt;car&lt;/travelMode&gt;
&lt;/section&gt;
&lt;/sections&gt;
&lt;/route&gt;
&lt;/calculateRouteResponse&gt;
</code></pre>
<p>Yet again Stack, appreciate any help. This task has upped my learning of python significantly - excited to get this little script working!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>open</code>'s 'w' argument truncates the file each time it's invoked.  You need an 'a'.</p>
<p>From <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html</a>:</p>
<blockquote>
<p>mode can be 'r' when the file will only be read, 'w' for only writing (an existing file with the same name will be erased), and 'a' opens the file for appending; any data written to the file is automatically added to the end. 'r+' opens the file for both reading and writing.</p>
</blockquote>
<p>Also, it seems that the script subsequent to <code>lastTime += 10</code> should be indented to be in the timing loop, otherwise you never get there.</p>
<p>UPDATE:</p>
<p>Looking more closely, I think you mean something like:</p>
<pre><code>lastTime = time.time() - 10
while True:       
    if time.time() &gt;= lastTime + 10: 
        # repeated action here
        lastTime = time.time()
</code></pre>
<p>Otherwise the while loop exits after the argument is false the first time.</p>
<p>UPDATE 2:</p>
<p>Actually, a simpler way to write this is:</p>
<pre><code> while True:
    # repeated action here
    time.sleep(10)
</code></pre>
<p>This also has the benefit that your CPU isn't constantly looping waiting for 10s to pass, freeing up resources for other processes.        </p>
</div>
<span class="comment-copy">Yeah it isn't automatically looping for some reason</span>
<span class="comment-copy">I'll list my changes.</span>
<span class="comment-copy">Listed @joshua R.</span>
<span class="comment-copy">Updated my answer... look like your timing loop logic needs a little tweak too.</span>
<span class="comment-copy">Brilliant! So how does tihs work exactly? What is time.time() ?</span>
