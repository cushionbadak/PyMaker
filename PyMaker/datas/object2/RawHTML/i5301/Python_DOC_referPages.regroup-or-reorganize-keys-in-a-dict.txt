<div class="post-text" itemprop="text">
<p>I have a dict inside a list that is currently like this:</p>
<pre><code>[ {'name': 'Joe', 
   'score': 98,
   'subject': 'Math'},
{'name': 'Bob', 
   'score': 90,
   'subject': 'Math'},
{'name': 'Bill', 
   'score': 88,
   'subject': 'English'},
{'name': 'Jane', 
   'score': 95,
   'subject': 'English'}]
</code></pre>
<p>I would like to regroup or reorganize it as follows:</p>
<pre><code>[ {'subject': 'Math',
  'Results': [{'name': 'Joe','score':98}, {'name':'Bob', 'score':90}]},
  {'subject': 'English',
  'Results': [{'name': 'Jane','score':95}, {'name':'Bill', 'score':88}]}
]
</code></pre>
<p>I tried using <code>itertools.groupby</code> and <code>dict.setdefault()</code> as suggested <a href="https://stackoverflow.com/questions/31730845/reorganize-dictionary">here</a>, but cannot quite get what I want.  How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>With a small loop and <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault</code></a> you can do the grouping like this:</p>
<h3>Code:</h3>
<pre><code>grouped = {}
for score in scores:
    grouped.setdefault(score['subject'], []).append(
        {k: v for k, v in score.items() if k != 'subject'})
</code></pre>
<p>To get the other output format after grouping:</p>
<pre><code>grouped = [{'subject': k, 'Results': v} for k, v in grouped.items()]
</code></pre>
<h3>Test Code:</h3>
<pre><code>scores = [
    {'name': 'Joe',
       'score': 98,
       'subject': 'Math'},
    {'name': 'Bob',
       'score': 90,
       'subject': 'Math'},
    {'name': 'Bill',
       'score': 88,
       'subject': 'English'},
    {'name': 'Jane',
       'score': 95,
       'subject': 'English'}]

grouped = {}
for score in scores:
    grouped.setdefault(score['subject'], []).append({
        k: v for k, v in score.items() if k != 'subject'})

print([{'subject': k, 'Results': v} for k, v in grouped.items()])
</code></pre>
<h3>Results:</h3>
<pre><code>[
    {'subject': 'Math', 
     'Results': [{'name': 'Joe', 'score': 98}, {'name': 'Bob', 'score': 90}]}, 
    {'subject': 'English', 
     'Results': [{'name': 'Bill', 'score': 88}, {'name': 'Jane', 'score': 95}]}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><strong>itertools.groupby</strong></a>, then the following code maybe help you.</p>
<pre><code>[{'subject': k, 'Results': list(g)} for k, g in itertools.groupby(a, key=itemgetter('subject'))]
</code></pre>
<p><strong>Sample Output:</strong></p>
<pre><code>[{'Results': [{'score': 98, 'name': 'Joe', 'subject': 'Math'}, {'score': 90, 'name': 'Bob', 'subject': 'Math'}], 'subject': 'Math'}, {'Results': [{'score': 88, 'name': 'Bill', 'subject': 'English'}, {'score': 95, 'name': 'Jane', 'subject': 'English'}], 'subject': 'English'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will need to iterate through the old list and reformat each element into the new one</p>
<pre><code>#first we need to create the newList in the general format that you want

newList = [{'subject':'math','results':[]},{'subject':'english','results':[]}]

#then we iterate through the elements in the old list and put them into the new list with the new formatting

for i in oldList:

    element = 0 if i['subject']=='math' else 'english' #because, in your post, you ordered them this way

    #then we need to append the element to the results list

    newList[element]['results'].append({'name':i['name'],'score':i['score']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like this kind of syntax when dealing with custom objects derived from some dictionary data:</p>
<pre><code>o = [ {'name': 'Joe', 
   'score': 98,
   'subject': 'Math'},
{'name': 'Bob', 
   'score': 90,
   'subject': 'Math'},
{'name': 'Bill', 
   'score': 88,
   'subject': 'English'},
{'name': 'Jane', 
   'score': 95,
   'subject': 'English'}]

r = []
for a in set([b['subject'] for b in o]):
  r.append({
      'subject': a, 
      'Results': [{'name':c['name'], 'score':c['score']} for c in o if c['subject']==a ],
  })

print(r)
</code></pre>
<p>Working code: <a href="https://repl.it/repls/WeakDismalCowrie" rel="nofollow noreferrer">repl.it</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use a <code>collections.defaultdict()</code>, you can do this:</p>
<pre><code>from collections import defaultdict
from pprint import pprint

scores = [{'name': 'Joe', 
           'score': 98,
           'subject': 'Math'},
          {'name': 'Bob', 
           'score': 90,
           'subject': 'Math'},
          {'name': 'Bill', 
           'score': 88,
           'subject': 'English'},
          {'name': 'Jane', 
           'score': 95,
           'subject': 'English'}]

result = defaultdict(list)
for score in scores:
    temp = {k: _ for k, _ in score.items() if k != 'subject'}
    result[score['subject']].append(temp)

pprint([{'subject' : k, 'Results': v} for k, v in result.items()])
</code></pre>
<p>Which gives:</p>
<pre><code>[{'Results': [{'name': 'Joe', 'score': 98}, {'name': 'Bob', 'score': 90}],
  'subject': 'Math'},
 {'Results': [{'name': 'Bill', 'score': 88}, {'name': 'Jane', 'score': 95}],
  'subject': 'English'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Option 1</em></p>
<p>Here is a standard <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> approach: </p>
<pre><code>key = "subject"
[{key: k, "Result": {k_: v for d in g for k_, v in d.items() if k_ != key}} for k, g in it.groupby(lst, lambda x: x[key])]
</code></pre>
<p>For simplicity, if given the form <code>[k: g for k, g in itertools.groupby(iterable, key)]</code>, here <code>g</code> simply is substituted with a filtered dictionary comprehension.  <code>lst</code> is the input list of dicts.</p>
<p><em>Option 2</em></p>
<p><a href="https://more-itertools.readthedocs.io/en/latest/api.html" rel="nofollow noreferrer"><code>more_itertools.groupby_transform</code></a> is a third-party recipe that extends <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to allow changes to the resulting groups:  </p>
<pre><code>import copy

import more_itertools as mit


def get_scores(iterable, key):
    """Return resulting ditctionaries grouped by key."""
    iterable = copy.deepcopy(iterable)                            # optional
    kfunc = lambda x: x[key]
    def vfunc(x):
        del x[key]
        return x
    return [{key: k, "Result": list(g)} for k, g in mit.groupby_transform(iterable, keyfunc=kfunc, valuefunc=vfunc)]


get_scores(lst, "subject")
</code></pre>
<p>Here duplicate keys are deleted from the resulting groups.  Deleting items will mutate the nested dictionaries.  To preserve some level of the former nested dicts, make deepcopies, i.e.g. see the optional line. </p>
</div>
<div class="post-text" itemprop="text">
<p>in one line you can do something like this:</p>
<pre><code>data=[ {'name': 'Joe',
   'score': 98,
   'subject': 'Math'},
{'name': 'Bob',
   'score': 90,
   'subject': 'Math'},
{'name': 'Bill',
   'score': 88,
   'subject': 'English'},
{'name': 'Jane',
   'score': 95,
   'subject': 'English'}]

import itertools

print({i:list(j) for i,j in itertools.groupby(data,key=lambda x:x['subject'])})
</code></pre>
<p>output:</p>
<pre><code>{'English': [{'subject': 'English', 'score': 88, 'name': 'Bill'}, {'subject': 'English', 'score': 95, 'name': 'Jane'}], 'Math': [{'subject': 'Math', 'score': 98, 'name': 'Joe'}, {'subject': 'Math', 'score': 90, 'name': 'Bob'}]}
</code></pre>
</div>
<span class="comment-copy">Seems like <code>pandas</code>'s <code>groupby</code> function may help</span>
<span class="comment-copy">"cannot quite get what i want" is not very useful in a question. Provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> for what you tried, with example input and expected output (which can be what you provided here) and observed (unexpected) output, and we can provide assistance fixing it. In general "write my code for me" questions are frowned upon.</span>
<span class="comment-copy">Note: If performance matters, <code>setdefault</code> with a non-constant-literal default can get kinda wasteful on large inputs (in this case it has to create the default new empty <code>list</code>s on every call, whether they're needed or not). Making <code>grouped = collections.defaultdict(list)</code>, then doing <code>grouped[score['subject']].append(...)</code> would be faster/cleaner (<code>defaultdict</code> lazily creates the default value only when the key requested doesn't exist); if you wanted to remove the defaulting behavior after, just do <code>grouped = dict(grouped)</code> at the end to convert back.</span>
<span class="comment-copy">This is close to the desired result.  Extra key items still appear in the resulting dicts.</span>
