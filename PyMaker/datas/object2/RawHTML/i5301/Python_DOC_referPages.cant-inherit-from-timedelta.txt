<div class="post-text" itemprop="text">
<p>i was annoyed by the fact that <a href="https://docs.python.org/3/library/datetime.html?highlight=timedelta#datetime.timedelta" rel="nofollow noreferrer"><code>timedelta</code></a> has no <code>__format__</code> method. so i wanted to inherit from <code>timedelta</code> (monkey-patching is no option for <code>built-in/extension type 'datetime.timedelta'</code>)</p>
<p>so i tired inheritance (<code>my_dict</code> is just here for reference; this one works!).</p>
<pre><code>from datetime import timedelta

class my_dict(dict):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

class my_timedelta(timedelta):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

print(my_dict.__mro__)
# (&lt;class '__main__.my_dict'&gt;, &lt;class 'dict'&gt;, &lt;class 'object'&gt;)

print(my_timedelta.__mro__)
# (&lt;class '__main__.my_timedelta'&gt;,
#  &lt;class 'datetime.timedelta'&gt;, &lt;class 'object'&gt;)

d0 = my_dict(); d1 = my_dict(a=3)
print(d0, d1)
# -&gt; {} {'a': 3}

# no arguments: this works!
t0 = my_timedelta()
print(t0)      # -&gt; 0:00:00

# one argument: TypeError
# t1 = my_timedelta(5)  # -&gt; TypeError: object.__init__() takes no parameters
# print(t1)

# a key-word argument: TypeError
# t2 = my_timedelta(seconds=5)  # -&gt; TypeError: object.__init__() 
#                                               takes no parameters
# print(t2)
</code></pre>
<p>the method resolution order of both looks similar; but it seems that <code>__init__</code> in the <code>timedelta</code> case is skipping <code>timedelta.__init__</code> and jumping directoy to <code>object.__init__</code>.</p>
<p>am i doing something very wrong? how can i inherit from <code>timedelta</code>? what goes wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://stackoverflow.com/questions/40743739/how-to-initialize-an-inherited-object-with-either-the-usual-keyword-argument?rq=1">How to initialize an inherited object with either the 'usual' (keyword) arguments or an instance of the parent</a>, you have to override <code>new()</code> method. Something like:</p>
<pre><code>class my_timedelta(timedelta):
    def __new__(cls, *args, **kwargs):
        # whatever here
        return super().__new__(cls, *args, **kwargs)
</code></pre>
</div>
<span class="comment-copy"><code>timedelta</code> has no <code>__init__</code>. Why do you need it if you only call the base initializer inside? I think that if you need to do some custom initialization, you should override the <i>ctor</i> (<code>__new__</code>).</span>
<span class="comment-copy">@CristiFati oh, good point! that is indeed where i went wrong!</span>
<span class="comment-copy">yup, thanks! did not realize <code>timedelta</code> has no <code>__init__</code>. should have noticed that from the error messages...</span>
