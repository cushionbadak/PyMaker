<div class="post-text" itemprop="text">
<p>I am trying to take multiple csv files (15 by 15 matrices), flatten them out into 1D matrices and then write them row by row into a new csv file using python.</p>
<p>An example of an input csv file:</p>
<pre><code>0,1,1,1,1,1,1,1,1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
....
....
</code></pre>
<p>This is the approach I am currently using:</p>
<pre><code>import pandas as pd
import glob
import numpy as np

path = r'.../Model_AMs'

allFiles = glob.glob(path + "/*.csv")

for file_ in allFiles:
    df = pd.read_csv(file_, header=None).values.flatten()

    np.savetxt('trainingdata.csv', df, newline=" ", delimiter=',')
</code></pre>
<p>However when I open <code>trainingdata.csv</code> it looks like this:</p>
<pre><code>0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00
</code></pre>
<p>It is not delimiting the elements with ',' and also adds a lot of 0s rather than simply keeping the values as 1s or 0s.</p>
<p>Any help would be appreciated. Thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>The 2d array approach is neater, but here's a way to do it with pandas only:</p>
<pre><code>import pandas as pd
import glob

path = r'.../Model_AMs'

allFiles = glob.glob(path + "/*.csv")

for file_ in allFiles:

    # transpose() is here to order values in same way as 
    # numpy's flatten(). astype() shouldn't be necessary,
    # but useful just in case pandas finds some floating
    # point values in your data
    df = pd.read_csv(file_, header=None).astype(int).transpose().melt()

    # writing in append mode
    pd.DataFrame(dict(zip(df.index, df.value)), index=[0]).to_csv(
      'trainingdata.csv', index=False, header=False, mode='a')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>At the moment you are writing one line at the time into your file (and by that overwrite the line before). As pointed out by @hpaulj in the comments you could think about using a 2D array. </p>
<p>The following shows an example for the 2D case:</p>
<pre><code>import numpy as np

df = np.arange(15*15)
df = df.reshape(15,15)
print df

np.savetxt('trainingdata.csv', df, fmt='%i', newline=" ", delimiter=',')
</code></pre>
<p>The <code>fmt</code> argument formats the values as integers as you wished.
If you really want to override the lines before or use a 1D array otherwise it can be saved as follows:</p>
<pre><code>import numpy as np

df = np.arange(15*15)
df = df.reshape(15,15)


for i in range(15):
    np.savetxt('trainingdata2.csv', [df[i]], fmt='%i', newline=" ", delimiter=',')
</code></pre>
<p>Note the <code>[df[i]]</code> which effectively makes a 2D array of the 1D array before writing it to the file. This prevents the comma issue you described. The reason for that is, that by using <code>[df[i]]</code> you are telling <code>np.savetxt</code> that you want 1 row with 15 columns. If you enter a simple 1D array with 15 elements, it is interpreted as 15 rows with 1 column each. You did not recognize that, because you set the value of <code>newline = ' '</code> which causes them be in the same line of the file although they are actually multiple "lines" separated by spaces.</p>
</div>
<span class="comment-copy">For the format of the numbers you can use the keyword argument <code>fmt</code> (for details on how to use it, see <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.savetxt.html#r285" rel="nofollow noreferrer">docs.scipy.org/doc/numpy-1.13.0/reference/generated/…</a> and <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs.python.org/3/library/…</a>)</span>
<span class="comment-copy">I saw that but wasn't sure if it was the right thing to use. In the docs it same <code>fmt</code> is used for 'str or sequence of strs'. I am trying to keep the binary format (which is integers i believe?)</span>
<span class="comment-copy">It would be better if you collected all the values into one 2d array and wrote that with just one <code>savetxt</code> call.  Currently your loop is overwriting the previous save.  You can save a 1d array, but its easier to control the layout with a 2d array (rows = lines; cols = columns).  Default <code>fmt</code> is general scientific float.</span>
<span class="comment-copy">I can not reproduce the issue with the missing comma when I use a 2D-array just as @hpaulj suggested, however when I override the lines I also have no commas.</span>
<span class="comment-copy">Does exactly what I want it to do, thanks!</span>
