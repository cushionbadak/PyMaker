<div class="post-text" itemprop="text">
<p>Normally we are checking if script is running in the main scope<br/>
just like in Python docs: <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">__main__</a>, like this:</p>
<pre><code>if __name__ == "__main__":
    # execute only if run as a script
    main()
</code></pre>
<p>This is simple and clear, but there is also a problem – indentation. <br/>
Whole <code>def main():</code> have additional indent.<br/>
Does it hurt? Me – yes, a bit.<br/></p>
<p>In Python we are particularly sensitive to line length.<br/>
This is important to respect space every time, not only<br/>
while writing 79th character.<br/></p>
<p>Because of that I'm looking for good method to reduce<br/>
redundant indentation.<br/>
In my opinion – there is one. Also simple, clear and elegant.<br/></p>
<pre><code>if __name__ != "__main__":
    exit()
# execute only if run as a script
</code></pre>
<p>Almost every of our ideas is wrong or already used somewhere,<br/>
so – I was looking for usage of this method and got nothing.<br/>
Looks like I'm the only one using that. I can't belief that at all,<br/>
but why then (if there is no hidden, tragic surprises) isn't it as popular<br/>
as it should be? </p>
</div>
<div class="post-text" itemprop="text">
<p>The major flaw with your proposal is that importing your module will cause the entire interpreter to exit.  This means you can't import your module at all.  If you try, the program will terminate.</p>
<p>Generally the purpose of the <code>if __name__ == "__main__"</code> block is to allow the module to be imported so you can use functions, classes, etc. inside it.  This purpose is defeated by having the module exit when imported.</p>
<p>In addition, having the "extra indent" for the body of <code>main</code> is not just wasting line space.  The body of <code>main</code> will be indented because it is the body of a <em>function</em>, and that function, like any other, can be called from elsewhere if the module is imported.  This means someone else can import your module without running <code>main</code>, but later call <code>main</code> explicitly if they want.</p>
</div>
<span class="comment-copy">"def main()" does <i>not</i> need an additional indent.  Only the line that <i>calls</i> main needs an indent, and your alternative has exactly the same indentation pattern for this section.</span>
<span class="comment-copy">@BrenBarn <code>def main():\nprint("test")</code> gives me indent error, <code>def main():\n\tprint("test")</code> not. Can you explain me what do you mean?</span>
<span class="comment-copy">@Sylogista You must indent the body of a function with respect to its header.</span>
<span class="comment-copy">While it would be nice to be able to stop parsing a file where you have <code>exit()</code>, there's currently no command in Python to do that.</span>
<span class="comment-copy">You may be able to write a decorator that keeps a function definition from completing if <code>__name__ != __main__</code>. That would allow you to define main above the <code>if</code> without indentation.</span>
<span class="comment-copy">I think he means that if <code>main()</code> is only ever used for <code>__main__</code>, then it must be defined inside the <code>if</code> which indents the entire function body one more level.</span>
<span class="comment-copy">@Harvey: No, <code>main</code> doesn't have to be defined inside the <code>if</code>.  It can be defined outside and only called from within the <code>if</code>.</span>
<span class="comment-copy">I don't think any of this matters, though. I think Python will always evaluate and byte-compile <code>main</code> no matter where it's located. And if the code is a module, <code>main</code> can be easily hidden from the outside.</span>
<span class="comment-copy">@Harvey: Yes, the point is, that's a bad argument, because who's to say it's "not needed"?  Making the main entry point available as a function is a good thing, since it allows that entry point code to be run on demand if desired, whereas keeping the code outside the function prevents that.</span>
<span class="comment-copy">@Sylogista It's better to wrap your "main" code in a <code>main</code> function than to have it just sitting there outside a function, cluttering up the global context and needlessly using global names when it could be using local names (which are faster).</span>
