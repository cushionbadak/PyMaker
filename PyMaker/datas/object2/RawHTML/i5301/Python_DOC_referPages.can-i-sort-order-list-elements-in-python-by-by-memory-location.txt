<div class="post-text" itemprop="text">
<p>This may actually be a nonsensical request, as I'll explain after I've asked it!</p>
<p>I have a list loaded in a script like this:</p>
<pre><code>PROPERTIES = list(set().union(*[n.properties for n in NETWORKS]))  # random order
</code></pre>
<p>I use the set() function to avoid counting the same Property object twice (Property is a class I defined earlier, it's unrelated to python's own 'property' keyword).
Now, because sets are unordered, when I cast it into a list the resulting PROPERTIES may come out in a different order each time I load it. </p>
<p>When I access a object in the list, it will read something like "&lt; ...object at 0x103098550&gt;", where 0x103098550 is the internal memory of the object loaded. </p>
<p>My question is the following: Is there a way to then sort the list into ascending order of memory locations, such that the order of PROPERTIES will be the same each time I load it?</p>
<p>Note that the ordering of NETWORKS is always the same, there is no randomness there. The only possible randomness is when the set() function is called.</p>
<p>This might be a dumb question if the locations are dynamically generated with this line of code itself.  </p>
<p>Edit: note. I'm not asking for the memory locations to be the same each time I load it (I know that's to do with my whole computer and may as well be random), but perhaps the <em>ordering</em> of memory of the objects n.properties is the same each time I load it. After all, when I build/load NETWORKS, I always load each network inside it in the same order, and presumably the memory locations assigned will go monotonically down (or up? I can't remember how heaps work). </p>
</div>
<div class="post-text" itemprop="text">
<p>The memory location of any object is retrieved via the <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id</code></a> function. So you can do this:</p>
<pre><code>sorted(PROPERTIES, key=id)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Relying on memory location - which is not garanteed to be monotonic (the Python runtime handles it's own memory pool and quite often reuses already allocated memory) - is certainly not going to work in a reliable way (it can <em>seem</em> to work sometimes - specially in a quick test script - but you can consider this as an accident).</p>
<p>A simpler solution (assuming your property objects are hashable) would be to use a <code>collections.OrderedDict</code> with dummy values:</p>
<pre><code>from collections import OrderedDict
PROPERTIES = list(OrderedDict(n.properties, None) for n in NETWORKS))
</code></pre>
<p>This solution <strong>is</strong> garanteed to work.</p>
</div>
<span class="comment-copy">As you have said in the question itself ("nonsensical request"), why do you need to do it? (this may be a XY problem)</span>
<span class="comment-copy">Although I'm not sure if this is an XY problem, or if this is the correct original problem you're facing, but: [If you are trying to get "any consistent ordering", use hash.]</span>
<span class="comment-copy">The memory locations are also random. There's no point sorting by them.</span>
<span class="comment-copy">Thanks user202729! I don't actually know what an XY problem is though, I guess it's something to do with mis-referencing some object? At any rate I believe schwobaseggl has provided the answer I was looking for.</span>
<span class="comment-copy">And while schwobaseggl  exactly answered the "how to sort objects by memory location" question, it does actually not solves your real problem which is "how to deduplicate a list while preserving order". Typical XY problem indeed: you asked about the solution you've imagined instead of asking about your <i>real</i> problem.</span>
<span class="comment-copy">"Bureaucrat Conrad, you are technically correct - the best kind of correct. I hereby promote you to grade 37."</span>
<span class="comment-copy">@gregory-fen: this is indeed the technically exact answer to your question - but as Rawing mentionned in a comment, memory location are in no way garanteed to be monotonic - they <i>might</i> sometimes be and sometimes not -, so you'd better not rely on this.</span>
<span class="comment-copy">Answers the question posed, but won't actually meet the OP's needs. OP, do not do this.</span>
<span class="comment-copy">It's worth mentioning that the <code>id</code> function doesn't necessarily return the memory address of the object - that's a CPython implementation detail. In other words, sorting by memory location is something python-the-language doesn't even support.</span>
