<div class="post-text" itemprop="text">
<p>Goal is to replace the second field of <code>csv_line</code> with <code>new_item</code> in an elegant way. This question is different from the topics listed by Rawing because here we are working with a different data structure, though we can use other topics to get inspired.</p>
<pre><code># Please assume that csv_line has not been imported from a file.
csv_line = 'unknown_item1,unknown_old_item2,unknown_item3'
new_item = 'unknown_new_item2'
goal = 'unknown_item1,unknown_new_item2,unknown_item3'

# Works but error prone. Non-replaced items could be inadvertently swapped.
# In addition, not convenient if string has many fields.
item1, item2, item3 = csv_line.split(',')
result = ','.join([item1, new_item, item3])
print(result)  # unknown_item1,unknown_new_item2,unknown_item3

# Less error prone but ugly.
result_list = []
new_item_idx = 1
for i, item in enumerate(csv_line.split(',')):
    result_list += [item] if i != new_item_idx else [new_item]
result = ','.join(result_list)
print(result)  # unknown_item1,unknown_new_item2,unknown_item3

# Ideal (not-error prone) but not working.
csv_line.split(',')[1] = new_item
print(csv_line)  # unknown_item1,unknown_old_item2,unknown_item3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = csv_line.split(',')
l[1] = new_item
csv_line = ','.join(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The second item could be replaced using Python's CSV library by making use of <a href="https://docs.python.org/3/library/io.html?highlight=stringio#io.StringIO" rel="nofollow noreferrer"><code>io.StringIO()</code></a> objects. This behave like files but can be read as a string: </p>
<pre><code>import csv
import io

csv_line = 'unknown_item1,unknown_old_item2,unknown_item3'
new_item = 'unknown_new_item2'

row = next(csv.reader(io.StringIO(csv_line)))
row[1] = new_item
output = io.StringIO()
csv.writer(output).writerow(row)
goal = output.getvalue()

print(goal)
</code></pre>
<p>This would display <code>goal</code> as:</p>
<pre><code>unknown_item1,unknown_new_item2,unknown_item3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the line <code>csv_line.split(',')[1] = new_item</code>, you do not alter the csv_line variable at all. You need to assign the new list created with .split() to a variable before you can change the elements within it:</p>
<pre><code>new_csv = csv_line.split(',')
new_csv[1] = new_item

print(','.join(new_csv))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems the most pythonic:</p>
<pre><code>csv_line = 'unknown_item1,old_item2,unknown_item3'
old_index = 1
new_item = 'new_item2'
goal = 'unknown_item1,new_item2,unknown_item3'

items = csv_line.split(',')
items[old_index] = new_item

print(','.join(items))
print(goal)
</code></pre>
<p>Output:</p>
<pre><code>unknown_item1,new_item2,unknown_item3
unknown_item1,new_item2,unknown_item3
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/11033590/change-specific-value-in-csv-file-via-python">Change specific value in CSV file via Python</a></span>
<span class="comment-copy">Alternative dupe: <a href="https://stackoverflow.com/questions/8905165/replace-data-in-csv-file-using-python" title="replace data in csv file using python">stackoverflow.com/questions/8905165/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/8905165/replace-data-in-csv-file-using-python">Replace data in csv file using python</a></span>
<span class="comment-copy">Wrong IMO. Here we are using a different data structure (string) and no IO.</span>
<span class="comment-copy">@MLguy It doesn't depend on anything. You can wrap the string in a <code>StringIO</code> and use a csv reader on that. That's the correct way to handle csv data. But if you can, you should avoid reading the data as a string in the first place.</span>
<span class="comment-copy">You should use the csv module instead of splitting on commas.</span>
<span class="comment-copy">@Rawing, <code>csv</code> module is for "CSV File Reading and Writing". The question is about a "string formatted as csv line". The asker could have just used this to mean "comma delimited one line string". We don't even know if there are any files involved...</span>
<span class="comment-copy">csv data is more than just text separated by commas, so if you just split on commas, your program is incorrect. Unless the input string materialized out of nowhere, it's almost certainly being read from a file (or other file-like object) that can be wrapped in a csv reader. And if it isn't, you can wrap the string in a <code>StringIO</code> object. A small price to pay in exchange for a program that works correctly.</span>
<span class="comment-copy">What could be the rationale for accepting this answer considering that it involves more logic than using <code>split(',')</code>?</span>
<span class="comment-copy">As it is capable of correctly processing full CSV entries such as <code>abc,"hello, world",def</code></span>
<span class="comment-copy">You should use the csv module instead of splitting on commas.</span>
<span class="comment-copy">Your right, but csv_line is given as a string, so it would be pointless to involve the csv libary in this case.</span>
<span class="comment-copy">It's never pointless to include a library that makes your code work correctly. Besides, we don't know where the OP is getting their data from. If the input is read from any file-like object, wrapping it in a csv reader is trivial.</span>
<span class="comment-copy">@Tynan I've accepted talz's answer since he's been a few seconds faster and answers are the same.</span>
<span class="comment-copy">You should use the csv module instead of splitting on commas.</span>
<span class="comment-copy">@Rawing I am unclear how the <code>csv</code> module splits a comma delimited string</span>
<span class="comment-copy">The starting assumption is that <code>old_item2</code> is unknown, so we can't use <code>!=</code>.</span>
<span class="comment-copy">Ok, I'll update my answer with code which replaces the second field.</span>
<span class="comment-copy">The idea is to use a csv reader to read the input so that it is no longer a string. We don't know where OP is getting this string from, but chances are it's being read from a file or file-like object. Wrapping that in a csv reader is trivial.</span>
