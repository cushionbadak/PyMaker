<div class="post-text" itemprop="text">
<p>Say I have a list of numbers <code>[2,8,16]</code> and I wanted to find all of the unique sums I could have from this (in this case they would be: <code>2,8,16,10,18,24,26</code>)</p>
<p>Is there an easy way I can do this in Python3?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way via <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a>.</p>
<pre><code>from itertools import combinations

lst = [2, 8, 16]

result = sorted({sum(i) for j in range(1, len(lst)+1) for i in combinations(lst, j)})
# [2, 8, 10, 16, 18, 24, 26]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lecture:
<a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">chain</a>
and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer">chain.from_iterable</a>
and <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a></p>
<p><strong>Partial sums with output of the summands:</strong></p>
<pre><code>import itertools
nums = [2,8,16]

sums = itertools.chain( itertools.combinations(nums, r=n) for n in range(1,len(nums)+1))

for it in  sums:
    for s in it:
        print ( f"sum({s}) = {s if isinstance(s,int) else sum(s)}")
</code></pre>
<p>Output:</p>
<pre><code>sum((2,)) = 2
sum((8,)) = 8
sum((16,)) = 16
sum((2, 8)) = 10
sum((2, 16)) = 18
sum((8, 16)) = 24
sum((2, 8, 16)) = 26
</code></pre>
<p><strong>The <em>boring</em> one would be:</strong></p>
<pre><code>sums = itertools.chain( itertools.combinations(nums, r=n) for n in range(1,len(nums)+1))
print( [sum(s) for it in sums for s in it])        
</code></pre>
<p>Output:</p>
<pre><code>[2, 8, 16, 10, 18, 24, 26]
</code></pre>
<p><strong>The one you could have found by researchin <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools-recipes: powerset</a>:</strong></p>
<pre><code>from itertools import chain, combinations 
nums = [2,8,6,16]

def powerset(iterable):
    """powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)

     Credit to: https://docs.python.org/3/library/itertools.html#itertools-recipes"""
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

print( sorted([sum(s) for s in powerset(nums) if s])) #sorted + remove empty tuple
</code></pre>
<p>Output:</p>
<pre><code>[2, 6, 8, 8, 10, 14, 16, 16, 18, 22, 24, 24, 26, 30, 32]
</code></pre>
<blockquote>
<p><strong>Sidenote:</strong> these solutions will conserve duplicate sums. Put them in <code>list(set(result))</code> to remove duplicates, maybe using <code>sorted()</code> to order them. This was not part of the original question but added as comment to the accepted answer.</p>
</blockquote>
</div>
<span class="comment-copy">What have you tried so far? Show us your code man</span>
<span class="comment-copy">I should have stated:  the removal of duplicates is what is needed; so this is the correct answer.</span>
