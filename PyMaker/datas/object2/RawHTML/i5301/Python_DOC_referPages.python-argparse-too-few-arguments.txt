<div class="post-text" itemprop="text">
<p>Here's my code: </p>
<pre><code>def parse_args():
    parser = argparse.ArgumentParser(description='Simple training script for object detection from a CSV file.')
    parser.add_argument('csv_path', help='Path to CSV file')
    parser.add_argument('--weights', help='Weights to use for initialization (defaults to ImageNet).', default='imagenet')
    parser.add_argument('--batch-size', help='Size of the batches.', default=1, type=int)

    return parser.parse_args()
</code></pre>
<p>when I run my code, I get an error: </p>
<pre><code>usage: Train.py [-h] [--weights WEIGHTS] [--batch-size BATCH_SIZE] csv_path
Train.py: error: too few arguments
</code></pre>
<p>Any idea where I'm going wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because you did not specify the number of arguments expected after each flag  with <code>nargs</code> as such:</p>
<pre><code>import argparse

def parse_args():
    parser = argparse.ArgumentParser(description='Simple training script for object detection from a CSV file.')
    parser.add_argument('csv_path', nargs="?", type=str, help='Path to CSV file')
    parser.add_argument('--weights', nargs="?", help='Weights to use for initialization (defaults to ImageNet).', default='imagenet')
    parser.add_argument('--batch-size', nargs="?", help='Size of the batches.', default=1, type=int)

    return parser.parse_args()
parse_args()
</code></pre>
<p>According to the doc:</p>
<p><code>If the nargs keyword argument is not provided, the number of arguments consumed is determined by the action. Generally this means a single command-line argument will be consumed and a single item (not a list) will be produced.</code></p>
<p><code>'?'. One argument will be consumed from the command line if possible, and produced as a single item. If no command-line argument is present, the value from default will be produced. Note that for optional arguments, there is an additional case - the option string is present but not followed by a command-line argument. In this case the value from const will be produced. Some examples to illustrate this:</code></p>
<p>Details <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The first arg <code>csv_path</code> is required (you did not provide some default value), so you need to pass that to your command line like below:</p>
<pre><code>python Train.py some_file.csv  # or the path to your file if it's not in the same directory
</code></pre>
</div>
<span class="comment-copy">Apparently you're using too few arguments when you run your program. What arguments are you using?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/33102272/pycharm-and-sys-argv-arguments" title="pycharm and sys argv arguments">stackoverflow.com/questions/33102272/â€¦</a> - sounds like you don't know how to call a script with commandline arguments.  Here's a SO on how to do that in <code>pycharm</code>.</span>
<span class="comment-copy">You don't need to specify '?' for a flagged argument unless you need the 3-way switch provided by the <code>const</code> parameter.   '?' for a positional should have a meaningful <code>default</code>.</span>
<span class="comment-copy">What i can insert to <code>csv_path</code> line?</span>
<span class="comment-copy">Eg: 'home/hoang/coco' ??</span>
<span class="comment-copy">@Wiliam yes, your csv path, if your csv file is in the same folder, you can just specify the name</span>
<span class="comment-copy">but i get error :</span>
<span class="comment-copy">ValueError: invalid option string 'csv_path': must start with a character '-'</span>
