<div class="post-text" itemprop="text">
<p>I want to check if two strings are anagrams. For example, if my word is "halo", I want to check if those letters appear in "loha". It should match because it's an anagram. </p>
<p>My attempt fails and I'm not sure why. My code and output is below. I have a list of words and I want to check to see which elements are anagrams in the list.</p>
<pre><code>def anagram(myList):
    for elem in myList:
        chars = set(elem)
        if all((c in chars) for c in myList):
            print  "Yes, anagram ", elem, chars
        else:
            print "NOT anagram ", elem, chars


wordsList = ["halo", "loha", "ahlo", "sully"]
anagram(wordsList)
</code></pre>
<p>And here's my output</p>
<pre><code>NOT anagram  halo set(['a', 'h', 'l', 'o'])
NOT anagram  loha set(['a', 'h', 'l', 'o'])
NOT anagram  ahlo set(['a', 'h', 'l', 'o'])
NOT anagram  sully set(['y', 's', 'u', 'l'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should prove to be relatively fast in that it keeps a sorted list so it only has to make ONE new one every time it iterates.</p>
<pre><code>from itertools import islice

def anagram(myList):
    s1 = sorted(myList[0])
    for i,elem in enumerate(islice(myList,1,len(myList))):
        s2 = sorted(elem)
        if s1 == s2:
            print ("Yes anagram: ",myList[i],elem)
        else:
            print ("Not anagram: ",myList[i],elem)
        s1 = s2

wordsList = ["halo", "loha", "ahlo", "sully"]
anagram(wordsList)
</code></pre>
<p>result:</p>
<pre><code>Yes anagram:  halo loha
Yes anagram:  loha ahlo
Not anagram:  ahlo sully
</code></pre>
<p>Different structure option:</p>
<pre><code>from itertools import islice

def is_anagram(sorted_1,sorted_2):
    if sorted_1 == sorted_2:
        return True
    return False

wordsList = ["halo", "loha", "ahlo", "sully"]

s1 = sorted(wordsList[0])
for i,elem in enumerate(islice(wordsList,1,len(wordsList))):
    s2 = sorted(elem)
    if is_anagram(s1,s2):
        print ("Yes anagram: ",wordsList[i],elem)
    else:
        print ("Not anagram: ",wordsList[i],elem)
    s1 = s2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>def isanagram(ele1,ele2):
    ele1=list(ele1)
    ele2=list(ele2)
    return(sorted(ele1)==sorted(ele2))

print(isanagram("ahlo", "halo"))
</code></pre>
<p>Out put</p>
<blockquote>
<p>True</p>
</blockquote>
<p><strong>For multiple elements check</strong></p>
<pre><code>print(map(isanagram,["ahlo", "halo"],[ "alho", "sully"])
</code></pre>
<p>Out put</p>
<blockquote>
<p>[True, False]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>counter</code> which outputs a dictionary of letter counts for each letter in a word</p>
<pre><code>from Collections import Counter

word1='halo'
word2='hola'

if Counter(word1) == Counter(word2):
   print 'Yes Anagram {} {}'.format(word1,word2)
else :
   print 'Not Anagram {} {}'.format(word1,word2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find all the angrams in your list, you might want to do this instead:</p>
<pre><code># Checks if two strings are anagrams
def isAnagram(str1, str2):
    return sorted(str1) == sorted(str2)

# Iterates over all items in your list and compares it with all other items to check if they are anagrams.
def anagrams(myList):
    for i in range(0,len(myList)):
        for j in range(i+1, len(myList)):
            if isAnagram(myList[i], myList[j]):
                print "Yes anagram: ", myList[i], myList[j]
            else:
                print "Not anagram: ", myList[i], myList[j]

wordsList = ["halo", "loha", "ahlo", "sully"]
anagram(wordsList)
</code></pre>
<p>This would return the following:</p>
<pre><code>Yes anagram: halo loha
Yes anagram: halo ahlo
Not anagram: halo sully
Yes anagram: loha ahlo
Not anagram: loha sully
Not anagram: ahlo sully
</code></pre>
<p>This may not be the most efficient solution but it gets the job done.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <code>sorted()</code> on both strings and compare them.</p>
<pre><code>def is_anagram(str1, str2):
   return sorted(str1) == sorted(str2)

k = is_anagram('angel', 'glean')
if k == True:
   print('Strings are anagrams')
else:
   print('Strings are not anagrams')
</code></pre>
<p>Here, <code>sorted('angel')</code> outputs <code>['a', 'e', 'g', 'l', 'n']</code> and <code>sorted('glean')</code> also outputs <code>['a', 'e', 'g', 'l', 'n']</code>. Both equal, hence are <strong>anagrams</strong>.</p>
<p>To make things clear:</p>
<pre><code>&gt;&gt;&gt; sorted('angel') 
['a', 'e', 'g', 'l', 'n'] 
&gt;&gt;&gt; sorted('glean') 
['a', 'e', 'g', 'l', 'n'] 
&gt;&gt;&gt; sorted('angel') == sorted('glean') 
True
</code></pre>
<p><strong>Solution to your problem:</strong></p>
<pre><code>def is_anagram(str1, str2):
   return sorted(str1) == sorted(str2)

wordsList = ["halo", "loha", "ahlo", "sully"]
each = wordsList[0]
for another in wordsList:
   if each != another:
      k = is_anagram(each, another)
      if k == True:
         print('{} and {} are anagrams'.format(each, another))
      else:
         print('{} and {} are not anagrams'.format(each, another))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>halo and loha are anagrams
halo and ahlo are anagrams
halo and sully are not anagrams
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below code takes a list of words as input and groups them into anagrams</p>
<pre><code>def is_grouped(word, anagram_groups):
    is_grouped = False
    for group in anagram_groups:
        if word in group:
            print "{0} is already part of anagram group={1}".format(word, group)
            is_grouped = True
            break
    return is_grouped

def get_anagram_group(word_to_check, word_to_check_index, wordlist):
    word_to_check_as_list = list(word_to_check)
    word_to_check_as_list.sort()
    group = [word_to_check]
    for i in range(0, len(wordlist)):
        if not i == word_to_check_index:
            word = wordlist[i]
            word_as_list = list(word)
            word_as_list.sort()
            if word_as_list == word_to_check_as_list:
                group.append(word)   
    return group

def group_anagrams(wordlist):
    anagram_groups = []
    for i in range(0, len(wordlist)):

        word_under_test = wordlist[i]
        # check if the word's anagrams already identified as part of anagram group
        anagramed = is_grouped(word_under_test, anagram_groups)
        if not anagramed:
            # if word not already a part of anagram group then find find all anagrams for the word
            anagram_group = get_anagram_group(word_under_test, i, wordlist)
            if len(anagram_group) == 1:
                print "no anagrams found for word {0}".format(word_under_test)
            else:
                print "anagrams found for word {0}={1}".format(word_under_test, anagram_group)
                anagram_groups.append(anagram_group)
    return anagram_groups



wlist = ['aloha' , 'hoala', 'loaha', '123', '321', 'xya']
print group_anagrams(wlist)
</code></pre>
<p>output:</p>
<pre><code>anagrams found for word aloha=['aloha', 'hoala', 'loaha']
hoala is already part of anagram group=['aloha', 'hoala', 'loaha']
loaha is already part of anagram group=['aloha', 'hoala', 'loaha']
anagrams found for word 123=['123', '321']
321 is already part of anagram group=['123', '321']
no anagrams found for word xya
[['aloha', 'hoala', 'loaha'], ['123', '321']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use sets:</p>
<pre><code>set('hola')==set('loha')
</code></pre>
<p>outputs True</p>
<p>As noted in the comments, this will not work even with a len parameter attached.
Here's a recursive anagram test to redeem myself</p>
<pre><code>`def anagram(string1,string2):
if string1=='' or string2== '':
    if string1!='' or string2!='':
        return False
    else:
        return True
if len(string1)!=len(string2) or set(string1)!=set(string2):
    return False
stemp1 = list(string1)
stemp2 = list(string2)
stemp2.remove(stemp1[0])
return anagram(''.join(stemp1[1:]),''.join(stemp2))`
</code></pre>
</div>
<span class="comment-copy">sets remove duplicates. Are you sure that's the kind of functionality you want?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>s are the best data structures for this</span>
<span class="comment-copy">@coldspeed No it's not, I forgot about that. What should I use instead?</span>
<span class="comment-copy">Related/dupe: <a href="https://stackoverflow.com/questions/8286554/using-python-find-anagrams-for-a-list-of-words">Using Python, find anagrams for a list of words</a></span>
<span class="comment-copy"><i>I want to check if two strings are anagrams</i> If you only want to check two strings, why are you passing the entire word list to <code>anagram()</code>?</span>
<span class="comment-copy">I see that this is more efficent</span>
<span class="comment-copy">This fails for <code>set('marg')==set('grammar') &gt;&gt; True</code>.</span>
<span class="comment-copy">just put a parameter before like <code>if len('marg'')==len('grammar'):</code> or add it to the logical:  <code>set('marg')==set('grammar') and len('marg')==len('grammar') &gt;&gt;false </code> and boom universal anagram testing</span>
<span class="comment-copy">Nope. It would still not be able to tell the difference between <code>grammar</code> and <code>agmrrrr</code>. Read the <a href="https://docs.python.org/3.6/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">documentation on <code>set</code></a> for the reason.</span>
<span class="comment-copy">I see the reason.  You've bypassed the len parameter by making strings of the same len made up of different counts of characters.  No need to read set docs but thanks.</span>
