<div class="post-text" itemprop="text">
<p>I am still learning how Python classes work. Here is my sample code:</p>
<pre><code>class StringPopped(str):
    def __init__(self, input):
        super().__init__()
        self.output = input[:-1]

str1 = StringPopped('Alice')
</code></pre>
<p>Then the output for <code>&gt;&gt;&gt; str1</code> is <code>Alice</code> and <code>str1.output</code> is <code>Alic</code>. How do I make <code>str1</code> have the same result as <code>str1.output</code>?</p>
<p>I tried <code>__repr__</code> but that only changes what is displayed and not what the value of <code>str1</code> actually is. Is there a way to make a statement like <code>self = self.output</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable.  I guess you'll have to approach this with <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a>, not <code>__init__</code>:</p>
<pre><code>&gt;&gt;&gt; class StringPopped(str):
...     def __new__(cls, val):
...         return super().__new__(cls, val[:-1])
...     
&gt;&gt;&gt; s = StringPopped('Alice')
&gt;&gt;&gt; s
'Alic'
&gt;&gt;&gt; type(s)
__main__.StringPopped
</code></pre>
</div>
<span class="comment-copy">This doesn't seem like a case for a class at all. This should be a function, <code>def f(string): return string[:-1]</code>.</span>
<span class="comment-copy">If you want to learn about how Python classes work, inheriting from builtin types is not going to be a fun way to do it.</span>
