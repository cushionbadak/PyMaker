<div class="post-text" itemprop="text">
<p>can somebody please help me with this easy task i gave to myself?
I just want to write into a file numbers like: <code>001</code> <code>002</code> <code>003</code> etc. using loop.</p>
<p>I started with just 01 - 99 and decided to try it using list for now.</p>
<p>I came with something like this:</p>
<pre><code>number = [0,0]

outfile = open("number.txt", "w")
outfile.write(str(number) + "\n")

while not number[0] == 9:

    while not number[1] == 9:

        number[1] = number[1] + 1
        outfile.write(str(number) + "\n")

number[0] = number[0] + 1
number[1] = 0
outfile.write(str(number) + "\n")
</code></pre>
<p>But it doesnt work. :|</p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot to add 1 to the tens digit and reset the units digit at the end of the loop. Also, <code>str()</code> will not work the way you want here.</p>
<p>Try this:</p>
<pre><code>number = [0,0]


def num_list_to_string(num_list):
  return str(num_list[0]) + str(num_list[1])


outfile = open("number.txt", "w")
outfile.write(num_list_to_string(number) + "\n")

while not number[0] == 10:
    while not number[1] == 9:
        number[1] = number[1] + 1
        outfile.write(num_list_to_string(number) + "\n")
    number[0] = number[0] + 1
    number[1] = 0
    outfile.write(num_list_to_string(number) + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do it using <code>zfill</code>. </p>
<p>For example:</p>
<pre><code>str(1).zfill(3)
</code></pre>
<p>Will return: <code>001</code></p>
<p>You can then loop and increment a counter:</p>
<pre><code>for i in range(100)

    outfile.write(str(i).zfill(3) + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider using the <em>with</em> keyword and working with the <a href="https://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">file input context manager</a> for opening files.</p>
<p>You can also benefit from using python's <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range()</a> function.</p>
<pre><code>with open('yourfile.txt', w) as outfile:
   for x in range(1,100):
       outfile.write(str(x).zfill(3))
       outfile.write('\n')
</code></pre>
<p>Based on the formatting of the numbers you're dealing with, the <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer">zfill() string method</a> also appears useful to you in order to zero pad.</p>
<p>The benefit of using range() rather than a list when dealing with large number sets is the memory allocation. Lists will store all values in memory, while a generator (what the range function is), will only return one value at a time. Therefore, only x is in memory at any given time and can be processed through the rest of your for loop. </p>
</div>
<span class="comment-copy">what do you want as output? You're creating an infinte loop in there.</span>
<span class="comment-copy">Correction - your code needs a bit of formatting</span>
<span class="comment-copy">Check your indentation, the last 3 lines aren't in the loop.</span>
<span class="comment-copy">What exactly does not work? What was the expected output, what was the actual output, and what is the difference? Did you get an error message? What is the full traceback? See <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">You can <i>create</i> a range of numbers using the <a href="https://docs.python.org/3.6/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a> function and you can iterate over those numbers with <code>for n in range(1, 100): #do something with n</code>.</span>
<span class="comment-copy">oh yes, you are right. it would end up with [9,0] only. and now i see it, my last three lines weren't in while loop as someone already mentioned. im so dumb. but thank you for your solution!</span>
<span class="comment-copy">Sure @RadimLycka If it solved your problem, don't forget to upvote and accept it as a solution. :)</span>
<span class="comment-copy">I'd recommend the str.zfill method for this, it's exactly what it's intended for.  So, <code>str(i).zfill(3)</code></span>
<span class="comment-copy">@Magitrek Thank you I agree. I updated the answer</span>
