<div class="post-text" itemprop="text">
<p>I am trying to port:</p>
<p><a href="https://coderwall.com/p/ewk0mq/stop-remove-all-docker-containers" rel="nofollow noreferrer">https://coderwall.com/p/ewk0mq/stop-remove-all-docker-containers</a></p>
<p>to a python script. So far I have:</p>
<pre><code>def remove_all_containers():
    subprocess.call(['docker', 'stop','$(docker ps -a -q)'])
    subprocess.call(['docker', 'rm','$(docker ps -a -q)'])  
    return;
</code></pre>
<p>But get:</p>
<pre><code>Error response from daemon: No such container: $(docker ps -a -q)
</code></pre>
<p>I have also tried:</p>
<pre><code>def remove_all_containers():
    subprocess.call(['docker', 'stop',$(docker ps -a -q)])
    subprocess.call(['docker', 'rm',$(docker ps -a -q)])
    return;
</code></pre>
<p>But that gives:</p>
<pre><code>    subprocess.call(['docker', 'stop',$(docker ps -a -q)])
SyntaxError: invalid syntax
</code></pre>
<p>it seems I need to nest another subprocess call into the parent subprocess call. Or is there a simpler way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR:</strong> Command substitution <code>$(...)</code> is a shell feature, therefore you must run your commands on a shell:</p>
<pre><code>subprocess.call('docker stop $(docker ps -a -q)', shell=True)
subprocess.call('docker rm $(docker ps -a -q)', shell=True)
</code></pre>
<hr/>
<p><strong>Additional improvements:</strong></p>
<p>It's not required, but I would suggest using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_call" rel="nofollow noreferrer"><code>check_call</code></a> (or <code>run(..., check=True)</code>, see below) instead of <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>call()</code></a>, so that if an error occurs it doesn't go unnoticed:</p>
<pre><code>subprocess.check_call('docker stop $(docker ps -a -q)', shell=True)
subprocess.check_call('docker rm $(docker ps -a -q)', shell=True)
</code></pre>
<p>You can also go another route: parse the output of <code>docker ps -a -q</code> and then pass to <code>stop</code> and <code>rm</code>:</p>
<pre><code>container_ids = subprocess.check_output(['docker', 'ps', '-aq'], encoding='ascii')
container_ids = container_ids.strip().split()
if container_ids:
    subprocess.check_call(['docker', 'stop'] + container_ids])
    subprocess.check_call(['docker', 'rm'] + container_ids])
</code></pre>
<p>If you're using Python 3.5+, you can also use the newer <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>run()</code></a> function:</p>
<pre><code># With shell
subprocess.run('docker stop $(docker ps -a -q)', shell=True, check=True)
subprocess.run('docker rm $(docker ps -a -q)', shell=True, check=True)

# Without shell
proc = subprocess.run(['docker', 'ps', '-aq'], check=True, stdout=PIPE, encoding='ascii')
container_ids = proc.stdout.strip().split()
if container_ids:
    subprocess.run(['docker', 'stop'] + container_ids], check=True)
    subprocess.run(['docker', 'rm'] + container_ids], check=True)
</code></pre>
</div>
<span class="comment-copy">You're using $(shell features), and you're not calling through the shell.</span>
