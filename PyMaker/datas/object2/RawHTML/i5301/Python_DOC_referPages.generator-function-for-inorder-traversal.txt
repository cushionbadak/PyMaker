<div class="post-text" itemprop="text">
<p>I've been working on my generator functions and expressions recently, but I'm not quite sure how I would tackle this. How could I use a generator function to yield and then later print the values in order?  </p>
<p>I built my BST using pythons list</p>
<pre><code>bst = [20, [10, [5, [2, [], []], [8, [], []]], [15, [], []]], [30, [25, [22, [], []], [27, [], []]], [35, [], [37, [], []]]]]
</code></pre>
<p>If I were to print the inorder traversal, I have no problem. So if I were to call <code>inorder(bst)</code> for the following function:</p>
<pre><code>def inorder(tree):
    if tree:
        inorder(tree[1])
        print (tree[0])
        inorder(tree[2])
</code></pre>
<p>I get this output.</p>
<pre><code>2
5
8
10
15
20
22
25
27
30
35
37
</code></pre>
<p>I would think that a generator expression would be equally as simple </p>
<pre><code>def inorder(tree):
    if tree:
        inorder(tree[1])
        yield (tree[0])
        inorder(tree[2])
</code></pre>
<p>The problem I'm running into is getting my main to iterate through what's yielded in the function. I thought it was supposed to be something like</p>
<pre><code>test= inorder(bst)

for i in range(0,len(l)): # l is the number of items in bst
    print (next(test))
</code></pre>
<p>Instead of iterating over the entire functions yields, it simply stops the iterable seemingly before it starts. </p>
<pre><code>    20
Traceback (most recent call last):
  File "functionGenerator.py", line 64, in &lt;module&gt;
    print(next(test))
StopIteration
</code></pre>
<p>What do I need to do to make my function generator operate correctly? </p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>inorder()</code> implementation doesn't correctly recurse. You are only printing the current top node of your tree. That's because only calling <code>inorder(tree[1])</code> or <code>inorder(tree[2])</code> returns a generator object, you are not iterating over those generators.</p>
<p>Use</p>
<pre><code>def inorder(tree):
    if tree:
        yield from inorder(tree[1])
        yield tree[0]
        yield from inorder(tree[2])
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow noreferrer"><code>yield from</code> expression</a> delegates the generator to another, yielding from that sub-generator until it is done. That way you properly recurse.</p>
<p>If you are using an older Python release (before Python 3.3), you need to manually iterate over the recursive calls:</p>
<pre><code>def inorder(tree):
    if tree:
        for sub in inorder(tree[1]):
            yield sub
        yield tree[0]
        for sub in inorder(tree[2]):
            yield sub
</code></pre>
<p>Next, you can just iterate over the <code>inorder()</code> generator:</p>
<pre><code>&gt;&gt;&gt; for node in inorder(bst):
...     print(node)
...
2
5
8
10
15
20
22
25
27
30
35
37
</code></pre>
<p>although using <code>next()</code> works too:</p>
<pre><code>&gt;&gt;&gt; tree = inorder(bst)
&gt;&gt;&gt; print(next(tree))
2
&gt;&gt;&gt; print(next(tree))
5
</code></pre>
<p>but iteration is cleaner and stops automatically once <code>StopIteration</code> is raised.</p>
</div>
<span class="comment-copy">Your syntax error has nothing to do with generators, you are using Python 2 syntax in Python 3.</span>
<span class="comment-copy">Alright, what would python 3 syntax look like instead?</span>
<span class="comment-copy"><code>print(next(test))</code></span>
<span class="comment-copy">You are using it in your original <code>inorder()</code> implementation...</span>
<span class="comment-copy">Your recursive <code>inorder()</code> has other issues however; you need to use <code>yield from inorder(tree[1])</code> or <code>for res in inorder(tree[1]): yield res</code>.</span>
<span class="comment-copy">Thank you, I will make sure to follow the minimal complete and verifiable example in future questions.</span>
