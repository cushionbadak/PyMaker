<div class="post-text" itemprop="text">
<p>This question is a little difficult to articulate with my inadequate English but I will do my best.</p>
<p>I have a directory of xml files, each file contains xml such as:</p>
<pre><code>&lt;root&gt;
    &lt;fields&gt;
        &lt;field&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_487" page="1"/&gt;
        &lt;/field&gt;
        &lt;field&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_488.`0" page="1"/&gt;
            &lt;region id="String.T2S366_R_488.`1" page="1"/&gt;
        &lt;/field&gt;
    &lt;/fields&gt;
&lt;/root&gt;
</code></pre>
<p>I'd like to do a String replacement on the lines which contain the <code>dot, tick, number</code> notation such as .`0 with an index notation like [0],[1], [2], ... and so forth. </p>
<p>So the transformed xml payload should look like something below:</p>
<pre><code>&lt;root&gt;
    &lt;fields&gt;
        &lt;field&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_487" page="1"/&gt;
        &lt;/field&gt;
        &lt;field&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_488[0]" page="1"/&gt;
            &lt;region id="String.T2S366_R_488[1]" page="1"/&gt;
        &lt;/field&gt;
    &lt;/fields&gt;
&lt;/root&gt;
</code></pre>
<p>How can I accomplish this using python? This seems fairly straight forward to do using regex but that would be difficult to do for a directory of files containing multiple files. I'd like to see an implementation using python 3.x, as I am learning it. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you can loop over all files in your directory with <a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer">os.listdir</a> and make substitutions in-place with <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">fileinput</a>:</p>
<pre><code>import os
import fileinput

path = '/home/arabian_albert/'
for f in os.listdir(path):
    with fileinput.FileInput(f, inplace=True, backup='.bak') as file:
        for line in file:
            print(re.sub(r'\.`(\d+)', r'\[\1\]', line), end='')
</code></pre>
<p>However, you should consider doing this from the command line with sed:</p>
<pre><code>find . -type f -exec sed -i.bak -E "s/\.`([0-9]+)/[\1]/g" {} \;
</code></pre>
<p>The above will make the substitution for all files in the current directory, and backup with old files with <code>.bak</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a simple regex to do that:</p>
<pre><code>import re
sample_str = """
&lt;root&gt;
    &lt;fields&gt;
        &lt;field id="S366/487" type="xs:int" bind="T2S366/487"&gt;
            &lt;description/&gt;
            &lt;region id="WholeNumberWithSeparator.T2S366_R_487" page="1"/&gt;
        &lt;/field&gt;
        &lt;field id="S366/488" type="xs:int" bind="T2S366/488"&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_488.`0" page="1"/&gt;
            &lt;region id="String.T2S366_R_488.`1" page="1"/&gt;
        &lt;/field&gt;
    &lt;/fields&gt;
&lt;/root&gt;
"""
pattern = "\.`(\d+)"
result = re.sub(pattern, lambda x: "[{}]".format(x.groups()[0]), sample_str)
print result
</code></pre>
<p>yields</p>
<pre><code>&lt;root&gt;
    &lt;fields&gt;
        &lt;field id="S366/487" type="xs:int" bind="T2S366/487"&gt;
            &lt;description/&gt;
            &lt;region id="WholeNumberWithSeparator.T2S366_R_487" page="1"/&gt;
        &lt;/field&gt;
        &lt;field id="S366/488" type="xs:int" bind="T2S366/488"&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_488[0]" page="1"/&gt;
            &lt;region id="String.T2S366_R_488[1]" page="1"/&gt;
        &lt;/field&gt;
    &lt;/fields&gt;
&lt;/root&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>wholefile = ''

with open(r'xml_input.xml', 'r+') as f:
    lines = f.readlines()
    for line in lines:
        split_line = line.split('.')  # split at periods
        end_point = split_line.pop(-1)  # get and remove existing endpoint
        if end_point[0] == '`':  # if it matches tick notation
            idx_after_num = end_point.find('"')  # get the first index that matches a double quote
            the_int = end_point[1:idx_after_num]  # slice from after the tick to the end of the int
            end_point = list(end_point)  # convert to list
            del(end_point[:idx_after_num])  # delete up to the double quote
            end_point = ''.join(end_point)  # reconstruct string
            new_endpoint = '[{}]'.format(the_int) + end_point  # create new endpoint
            split_line += [new_endpoint]  # append new endpoint to end of list of split strs
            new_line = ''  # new empty string
            for n, segment in enumerate(split_line):
                if n &gt;= len(split_line) - 2:  # if we're at or beyond the endpoint
                    new_line += segment  # concatenate the new endpoint
                else:
                    new_line += segment + '.'  # concatenate, replacing the needed '.'s
            wholefile += new_line  # replace, with changes
        else:
            wholefile += line  # replace, with no changes

with open('xml_out.xml', 'w+') as f:
    f.write(wholefile)
</code></pre>
<p>my output:</p>
<pre><code>&lt;root&gt;
    &lt;fields&gt;
        &lt;field id="S366/487" type="xs:int" bind="T2S366/487"&gt;
            &lt;description/&gt;
            &lt;region id="WholeNumberWithSeparator.T2S366_R_487" page="1"/&gt;
        &lt;/field&gt;
        &lt;field id="S366/488" type="xs:int" bind="T2S366/488"&gt;
            &lt;description/&gt;
            &lt;region id="Number.T2S366_R_488[0]" page="1"/&gt;
            &lt;region id="String.T2S366_R_488[1]" page="1"/&gt;
        &lt;/field&gt;
    &lt;/fields&gt;
&lt;/root&gt;
</code></pre>
</div>
<span class="comment-copy">Suggest checking out the <code>lxml</code> library for Python3: <a href="http://lxml.de/installation.html" rel="nofollow noreferrer">lxml.de/installation.html</a></span>
<span class="comment-copy">Oh nice implementation, I especially like the way of backing up old files with the .bak extension. I guess there is no way around regex</span>
<span class="comment-copy">Yes, I left that in there in case I screwed up :)</span>
<span class="comment-copy">Thanks, very straightforward implementation</span>
