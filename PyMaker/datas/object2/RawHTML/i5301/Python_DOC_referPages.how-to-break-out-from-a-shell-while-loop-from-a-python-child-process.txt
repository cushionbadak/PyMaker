<div class="post-text" itemprop="text">
<p>I start a python script multiple times with a shell script. After some python script runs, i want to break out from the while-loop. In my current solution i send a kill signal from python for the shell script PID. But i would like to prevent the parent process from dying before the child process finished.</p>
<p>My current shell script:</p>
<pre><code>#!/bin/sh
while true
do
  python3 my_py_script.py $$
done
</code></pre>
<p>The relevant parts of my python script:</p>
<pre><code>import signal
import sys
...
shell_script_pid = int(sys.argv[1])
...
if ..something..:
   os.kill(shell_script_pid, signal.SIGTERM)
   sys.exit('python script end')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest a solution where you do not kill the parent process, but use the exit code instead.</p>
<p>shell script:</p>
<pre><code>#!/bin/sh
while python3 my_py_script.py; do :; done
</code></pre>
<p>python script:</p>
<pre><code>if ..something..:
   sys.exit('python script ends with errorcode 1')
</code></pre>
<p>The default exit code of a python script is 0. So when it exits at the end, then the shell-loop will run again. when it exits with <code>sys.exit('python script ends with errorcode 1')</code>, than the shell-loop will stop.</p>
<p><a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html#sys.exit</a>:</p>
<blockquote>
<p>[...] If another type of object is passed, None is equivalent to passing zero, and any other object is printed to stderr and results in an exit code of 1. In particular, sys.exit("some error message") is a quick way to exit a program when an error occurs.</p>
</blockquote>
<p>In case there are other error, that should not cause the shell script to exit from the loop, a precise error code can be used with <code>sys.exit(123)</code> and <code>python3 my_py_script.py; lastexitcode=$?</code>.</p>
</div>
<span class="comment-copy">Can't you wrap the Python code in a while loop and manage the iterations in your Python code?</span>
<span class="comment-copy">Why do you need to prevent the parent process from exiting before one of your child processes is complete?</span>
<span class="comment-copy">@Evan  To prevent zombie processes.</span>
<span class="comment-copy">@franciscosollima That is a solution, too. But I prefer each run with a new fresh process.</span>
<span class="comment-copy">I dont understand your shell script. You set as condition "run the python script" with a empty loop body?</span>
<span class="comment-copy">exactly, in a shell script a condition is just a command, and the condition is true when the exit code of the command is 0, the condition is false when the exit code is anything but 0</span>
<span class="comment-copy">So the python script run one time?</span>
<span class="comment-copy">in a while loop the condition is run for each loop. the shell script means: 1. run python3 my_py_script.py, 2. check if exit code is anything but zero 3. when the exit code is not zero exit the loop 4. do nothing inside the loop; 5. start over with step 1</span>
<span class="comment-copy">the default exit code of a python script is 0. so when it exits at the end the loop will run again, when it exits with <code>sys.exit('python script ends with errorcode 1')</code> the shell-loop will stop</span>
