<div class="post-text" itemprop="text">
<p>I have a csv file with this structure:</p>
<pre><code>Name:   Tags:   col4    col4    col5    col6    col7
T1      G1      G2      G3      G4      G5  
T2      G1      G2              
T3      G1      G2      G3          
T4      G1      G2      G3      G4      G5      G6
T5      G1      G2      G3      G4      
</code></pre>
<p>The actual file has 279 columns, and all the rows are varying in length. My aim is get each name as a key, and then the corresponding tags as a list of values in a python dictionary. </p>
<p>My current code is this:</p>
<pre><code>import csv

my_dict = {}
with open('infile.csv') as file:
    reader = csv.reader(file)
    for row in reader:
        my_dict[row[0]] = row[1:]
print(my_dict)
</code></pre>
<p>This works, but the blank cells are included as values in the dictionary eg;</p>
<pre><code>{T1: ['G1', 'G2', 'G3', 'G4', 'G5', ''], T2: ['G1', 'G2', '', '', '', ''] etc.
</code></pre>
<p>Whereas my aim is to get this:</p>
<pre><code>{T1: ['G1', 'G2', 'G3', 'G4', 'G5'], T2: ['G1', 'G2'] etc.
</code></pre>
<p>I can't find any option for csv.reader that skips over blank cells. I have tried csv.DictReader (apparently this automatically ignores blank cells?) but it doesn't allow slices, and I can't name and specify 279 columns. </p>
<p>I am aware that there are similar questions on here, but none of them seem to be what I'm looking for in terms of how I want the file to be read. </p>
<p>I have been stuck on this for a while so any help would be much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just use a list comprehension to pick non empty cells as follows:</p>
<pre><code>import csv

my_dict = {}

with open('infile.csv', newline='') as f_input:
    csv_input = csv.reader(f_input)
    header = next(csv_input)   # skip over the header row

    for row in csv_input:
        my_dict[row[0]] = [cell for cell in row[1:] if cell]

print(my_dict)        
</code></pre>
<p>Giving you <code>my_dict</code> containing:</p>
<pre><code>{'T1': ['G1', 'G2', 'G3', 'G4', 'G5'], 'T2': ['G1', 'G2'], 'T3': ['G1', 'G2', 'G3'], 'T4': ['G1', 'G2', 'G3', 'G4', 'G5', 'G6'], 'T5': ['G1', 'G2', 'G3', 'G4']}
</code></pre>
<p>Note: Using Python 3.x, the file should be opened with <a href="https://docs.python.org/3/library/csv.html?highlight=csv#csv.reader" rel="nofollow noreferrer"><code>newline=''</code></a> when used with a CSV object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. </p>
<pre><code>import csv

my_dict = {}
with open('infile.csv') as file:
    reader = csv.reader(file)
    for row in reader:
        my_dict[row[0]] = [x for x in row[1:] if x!= ""]
print(my_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe there is a better way, but you can add the key only if present and filter the result.</p>
<pre><code>import csv
my_dict = {}
with open('infile.csv') as file:
    reader = csv.reader(file)
    for row in reader:
        if row[0]:
            my_dict[row[0]] = list(filter(None, row[1:]))
print(my_dict)
</code></pre>
<p>in Python 2.7 filter returns directly a list, so you can avoid calling list on it.</p>
<p>edit:
Thinking about it, a completely empty row shouldn't be in the data in the first place. So you probably can remove the if statement for row[0].</p>
</div>
<span class="comment-copy">Thanks this seems to work the same with or without the if statement.</span>
