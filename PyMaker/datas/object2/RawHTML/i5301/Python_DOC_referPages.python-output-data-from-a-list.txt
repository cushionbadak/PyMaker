<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to output list items.  the code below is taking answers and checking them against a key to see which answers are correct.  for each student correct answers are stored in correct_count.  Then I'm sorting in ascending order based on the correct count.</p>
<pre><code>  def main():

    answers = [
        ['A', 'B', 'A', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
        ['D', 'B', 'A', 'B', 'C', 'A', 'E', 'E', 'A', 'D'],
        ['E', 'D', 'D', 'A', 'C', 'B', 'E', 'E', 'A', 'D'],
        ['C', 'B', 'A', 'E', 'D', 'C', 'E', 'E', 'A', 'D'],
        ['A', 'B', 'D', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
        ['B', 'B', 'E', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
        ['B', 'B', 'A', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
        ['E', 'B', 'E', 'C', 'C', 'D', 'E', 'E', 'A', 'D']]

    keys = ['D', 'B', 'D', 'C', 'C', 'D', 'A', 'E', 'A', 'D']

    grades = []

    # Grade all answers
    for i in range(len(answers)):
        # Grade one student
        correct_count = 0
        for j in range(len(answers[i])):
            if answers[i][j] == keys[j]:
                correct_count += 1

        grades.append([i, correct_count])
        grades.sort(key=lambda x: x[1])


            # print("Student", i, "'s correct count is", correct_count)


if __name__ == '__main__':
    main()
</code></pre>
<p>if I print out <code>grades</code> the output looks like this</p>
<pre><code>[[0, 7]]
[[1, 6], [0, 7]]
[[2, 5], [1, 6], [0, 7]]
[[3, 4], [2, 5], [1, 6], [0, 7]]
[[3, 4], [2, 5], [1, 6], [0, 7], [4, 8]]
[[3, 4], [2, 5], [1, 6], [0, 7], [5, 7], [4, 8]]
[[3, 4], [2, 5], [1, 6], [0, 7], [5, 7], [6, 7], [4, 8]]
[[3, 4], [2, 5], [1, 6], [0, 7], [5, 7], [6, 7], [7, 7], [4, 8]]
</code></pre>
<p>what I'm interested in is the last row.  The first number of each set corresponds to a student id and it's sorted in ascending order based on the 2nd number which represents a grade (4, 5, 6, 7, 7, 7, 7, 8).</p>
<p>I'm not sure how to grab that last row and iterate through it so that i get output like
<code>student 3 has a grade of 4</code> and <code>student 2 has a grade of 5</code></p>
<pre><code>[[3, 4], [2, 5], [1, 6], [0, 7], [5, 7], [6, 7], [7, 7], [4, 8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def main():
    answers = [
    ['A', 'B', 'A', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
    ['D', 'B', 'A', 'B', 'C', 'A', 'E', 'E', 'A', 'D'],
    ['E', 'D', 'D', 'A', 'C', 'B', 'E', 'E', 'A', 'D'],
    ['C', 'B', 'A', 'E', 'D', 'C', 'E', 'E', 'A', 'D'],
    ['A', 'B', 'D', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
    ['B', 'B', 'E', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
    ['B', 'B', 'A', 'C', 'C', 'D', 'E', 'E', 'A', 'D'],
    ['E', 'B', 'E', 'C', 'C', 'D', 'E', 'E', 'A', 'D']]

    keys = ['D', 'B', 'D', 'C', 'C', 'D', 'A', 'E', 'A', 'D']

    grades = []

    # Grade all answers
    for i in range(len(answers)):
        # Grade one student
        correct_count = 0
        for j in range(len(answers[i])):
            if answers[i][j] == keys[j]:
                correct_count += 1

        grades.append([i, correct_count])
        grades.sort(key=lambda x: x[1])

    for student, correct in grades:
        print("Student", student,"'s correct count is", correct)


if __name__ == '__main__':
    main()
</code></pre>
<p>What you were doing was printing <code>grades</code> while you were still in the loop. If you would've printed grades after both loops, you would've only seen the last line: <code>[[3, 4], [2, 5], [1, 6], [0, 7], [5, 7], [6, 7], [7, 7], [4, 8]]</code>, then just loop through grades and python will "unpack" the list into the student, and grade, respectively ash shown above.</p>
<p>Here is the output:</p>
<pre><code>Student 3 's correct count is 4
Student 2 's correct count is 5
Student 1 's correct count is 6
Student 0 's correct count is 7
Student 5 's correct count is 7
Student 6 's correct count is 7
Student 7 's correct count is 7
Student 4 's correct count is 8
</code></pre>
<p>Don't forget to click the check mark if you like this answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>What about something like the following:</p>
<pre><code>students_grade = {}
for id, ans in enumerate(answers):
    students_grade[id] = sum([x == y for x, y in zip(ans, key)])
</code></pre>
<p>Now you have a dictionary with the <code>id</code> of students mapping to their score ;)
Of course, you can change the enumerate to have the true list of <code>id</code>s instead!</p>
</div>
<div class="post-text" itemprop="text">
<p>While <code>MMelvin0581</code> already addressed the problem in your code, You can also use nested list comprehension to achieve the same results</p>
<pre><code>&gt;&gt;&gt; [(a,sum([1 if k==i else 0 for k,i in zip(keys,j)])) for a,j in enumerate(answers)]
</code></pre>
<p>This will produce output like:</p>
<pre><code>&gt;&gt;&gt; [(0, 7), (1, 6), (2, 5), (3, 4), (4, 8), (5, 7), (6, 7), (7, 7)]
</code></pre>
<p>Then you can sort your results based on the criteria</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(out, key=itemgetter(1))
</code></pre>
<p><strong>Note</strong>: <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a> will have slight performance benefit over <code>lambda</code>. The above operation will produce output like:</p>
<pre><code>&gt;&gt;&gt; [(3, 4), (2, 5), (1, 6), (0, 7), (5, 7), (6, 7), (7, 7), (4, 8)]
</code></pre>
<p>Then finally print your list like:</p>
<pre><code>for item in sorted_list:
    print("Student: {} Scored: {}".format(item[0],item[1]))
</code></pre>
</div>
<span class="comment-copy">ah of course, I forgot to break out of the loop before printing.  I just started learning Python.  Thanks for pointing me in the right direction.</span>
<span class="comment-copy">No problem bro.</span>
