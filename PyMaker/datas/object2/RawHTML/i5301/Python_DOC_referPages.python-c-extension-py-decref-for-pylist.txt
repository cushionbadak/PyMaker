<div class="post-text" itemprop="text">
<p>I have a question on how to properly use <code>Py_DECREF()</code> on PyList in C. So let say I have a function called <code>build_list()</code> which accepts a string linked list as its input argument and returns a Python list if everything goes well, or <code>NULL</code> if there is an error.</p>
<p>Below is the minimalistic example:</p>
<pre><code>struct strlist {
    char *str;
    size_t len;
    struct strlist *next;
};

PyObject *build_list (struct strlist *inlist) {
    struct strlist *node = NULL;
    PyObject *tmp_obj = NULL;
    int success;

    PyObject *ret_obj = PyList_New(0);
    if (ret_obj == NULL) {
        return NULL;
    }

    node = inlist;
    while (node != NULL) {
        tmp_obj = PyString_FromStringAndSize(node-&gt;str, node-&gt;len);
        if (tmp_obj == NULL) {
            Py_DECREF(ret_obj);
            return NULL;
        }
        else {
            success = PyList_Append(ret_obj, tmp_obj);
            Py_DECREF(tmp_obj);
            if (success != 0) {
                Py_DECREF(ret_obj);
                return NULL;
            }
        }
        node = node-&gt;next;
    }
    return ret_obj;
}
</code></pre>
<p>Have I used <code>Py_DECREF()</code> correctly in this case?</p>
<p><strong>My particular question is:</strong>
If a few elements have been appended to the list before an error occur, my code will decrement the reference to the list directly (inside <code>success != 0</code>) while the elements inside the list technically still have refcount of 1. Should I instead decrement each element's reference first before I finally decrement the reference to the list?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>After creating the <code>list</code>, it has a refcount of 1. Each <code>string</code> is born with a refcount of 1 and appending it to the list increases that to 2 (because the <code>list</code> and your function reference it). So it's correct to <code>DECREF</code> after the <code>Append()</code>, as your function no longer uses the <code>string</code> itself.
Inside both error paths (<code>tmp_obj == NULL</code>, <code>success != 0</code>), <code>DECREF</code>ing the <code>list</code>-object will free the object (because it's refcount is now 0). The <code>list</code>-object will walk it's members and <code>DECREF</code> every one of them, reducing the refcount of each <code>string</code> to 0, freeing them.</p>
<p>Long story short: Your code is correct. The elements inside the list <strong>must</strong> have a refcount of (at least) 1, because the list is referring to them. It's the <code>list</code>'s exclusive responsibility to <code>DECREF</code> it's members.</p>
<p>As an exercise, you may try reducing the strings' refcounts yourself. The interpreter will most likely crash (maybe at <code>exit()</code>), because when the list is freed, the strings' refcounts go to -1, triggering an assertion.</p>
</div>
<span class="comment-copy">I guess you can still say if <b>you</b> didn't INCREF <b>you</b> don't DECREF, however, for functions that say return a new reference (mostly when you create a python object), you own the object so you have to DECREF.</span>
<span class="comment-copy">thank you for your detailed explanation! can you point me to references which explain the <code>DECREF</code> behavior toward the list you explained (i.e. walk its members and <code>DECREF</code> each of them)?</span>
<span class="comment-copy">AFAIKS the documentation does not specify this, it's implied behaviour: Objects in Python are never owned, they are always referenced. Each objects that holds references to other objects is supposed to a) properly get those references counted and b) properly clean up after them. For example, if an object may hold references to other arbitrary objects, it may actually refer to itself. Correctly taking part in c-python's garbage collection is simply implied.</span>
<span class="comment-copy">FWIW see <a href="https://docs.python.org/3/c-api/intro.html#reference-count-details" rel="nofollow noreferrer">this</a></span>
