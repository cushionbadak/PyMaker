<div class="post-text" itemprop="text">
<h1>Background</h1>
<p>I have some large text files used in an automation script for audio tuning. Each line in the text file looks roughly like:</p>
<pre><code>A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]] BANANA # BANANA
</code></pre>
<p>The text gets fed to an old command-line program which searches for keywords, and swaps them out. Sample output would be:</p>
<pre><code>A[0] + B[100] - C[0x1000] [[0]] 0 # 0
A[2] + B[200] - C[0x100A] [[2]] 0 # 0
</code></pre>
<hr/>
<h1>Problem</h1>
<p>Sometimes, text files have keywords that are meant to be left untouched (i.e. cases where we don't want "BANANA" substituted). I'd like to modify the text files to use some kind of keyword/delimiter that is unlikely to pop up in normal circumstances, i.e:</p>
<pre><code>A[#1] + B[#2] - C[#3] [[#1]] #1 # #1
</code></pre>
<hr/>
<h1>Question</h1>
<p>Does python's text file parser have any special indexing/escape sequences I could use instead of simple keywords?</p>
</div>
<div class="post-text" itemprop="text">
<p>use a regular expression <em>replacement function</em> with a dictionary.</p>
<p>Match everything between brackets (non-greedy, avoiding the brackets themselves) and replace by the value of the dict, put original value if not found:</p>
<pre><code>import re

d = {"BANANA":"12", "PINEAPPLE":"20","CHERRY":"100","BANANA":"400"}
s = "A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]"

print(re.sub("\[([^\[\]]*)\]",lambda m : "[{}]".format(d.get(m.group(1),m.group(1))),s))
</code></pre>
<p>prints:</p>
<pre><code>A[400] + B[20] - C[100] [[400]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.sub</code> to perform the substitution. This answer creates a list of randomized values to demonstrate, however, the list can be replaces with the data you are using:</p>
<pre><code>import re
import random
s = "A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]"
new_s = re.sub('(?&lt;=\[)[a-zA-Z0-9]+(?=\])', '{}', s)
random_data = [[random.randint(1, 2000) for i in range(4)] for _ in range(10)]
final_results = [new_s.format(*i) for i in random_data]
for command in final_results:
  print(command)
</code></pre>
<p>Output:</p>
<pre><code>A[51] + B[134] - C[864] [[1344]]
A[468] + B[1761] - C[1132] [[1927]]
A[1236] + B[34] - C[494] [[1009]]
A[1330] + B[1002] - C[1751] [[1813]]
A[936] + B[567] - C[393] [[560]]
A[1926] + B[936] - C[906] [[1596]]
A[1532] + B[1881] - C[871] [[1766]]
A[506] + B[1505] - C[1096] [[491]]
A[290] + B[1841] - C[664] [[38]]
A[1552] + B[501] - C[500] [[373]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use</p>
<pre><code>\[([^][]+)\]
</code></pre>
<p>And replace this with the desired result, e.g. <code>123</code>.
<hr/>
Broken down, this says</p>
<pre><code>\[       # opening bracket
([^][]+) # capture anything not brackets, 1+ times
\]       # closing bracket
</code></pre>
<p>See <a href="https://regex101.com/r/Uj5CtS/1/" rel="nofollow noreferrer"><strong>a demo on regex101.com</strong></a>.
<hr/>
For your changed requirements, you could use an <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><strong><code>OrderedDict</code></strong></a>:</p>
<pre><code>import re
from collections import OrderedDict

rx = re.compile(r'\[([^][]+)\]')
d = OrderedDict()

def replacer(match):
    item = match.group(1)
    d[item] = 1
    return '[#{}]'.format(list(d.keys()).index(item) + 1)

string = "A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]"
string = rx.sub(replacer, string)
print(string)
</code></pre>
<p>Which yields</p>
<pre><code>A[#1] + B[#2] - C[#3] [[#1]]
</code></pre>
<p>The idea here is to put every (potentially) new item in the dict, then search for the index. <code>OrderedDict</code>s remember the order entry.
<hr/>
For the sake of academic completeness, you could do it all on your own as well:</p>
<pre><code>import re

class Replacer:
    rx = re.compile(r'\[([^][]+)\]')
    keywords = []

    def do_replace(self, match):
        idx = self.lookup(match.group(1))
        return '[#{}]'.format(idx + 1)

    def replace(self, string):
        return self.rx.sub(self.do_replace, string)

    def lookup(self, item):
        for idx, key in enumerate(self.keywords):
            if key == item:
                return idx

        self.keywords.append(item)
        return len(self.keywords)-1

string = "A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]"

rpl = Replacer()
string = rpl.replace(string)
print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can also be done using <a href="https://pypi.python.org/pypi/pyparsing/1.5.7" rel="nofollow noreferrer">pyparsing</a>.</p>
<p>This parser essentially defines <code>noun</code> to be the uppercase things within square brackets, then defines a sequence of them to be one line of input, as <code>complete</code>.</p>
<p>To replace items identified with other things define a <code>class</code> derived from <code>dict</code> in a suitable way, so that anything not in the <code>class</code> is left unchanged.</p>
<pre><code>&gt;&gt;&gt; import pyparsing as pp
&gt;&gt;&gt; noun = pp.Word(pp.alphas.upper())
&gt;&gt;&gt; between = pp.CharsNotIn('[]')
&gt;&gt;&gt; leftbrackets = pp.OneOrMore('[')
&gt;&gt;&gt; rightbrackets = pp.OneOrMore(']')
&gt;&gt;&gt; stmt = 'A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]'
&gt;&gt;&gt; one = between + leftbrackets + noun + rightbrackets
&gt;&gt;&gt; complete = pp.OneOrMore(one)
&gt;&gt;&gt; complete.parseString(stmt)
(['A', '[', 'BANANA', ']', ' + B', '[', 'PINEAPPLE', ']', ' - C', '[', 'CHERRY', ']', ' ', '[', '[', 'BANANA', ']', ']'], {})
&gt;&gt;&gt; class Replace(dict):
...     def __missing__(self, key):
...         return key
...     
&gt;&gt;&gt; replace = Replace({'BANANA': '1', 'PINEAPPLE': '2'})
&gt;&gt;&gt; new = []
&gt;&gt;&gt; for item in complete.parseString(stmt).asList():
...     new.append(replace[item])
... 
&gt;&gt;&gt; ''.join(new)
'A[1] + B[2] - C[CHERRY] [[1]]'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it's easier — and clearer — using <a href="https://pythonhosted.org/plex/tutorial.html" rel="nofollow noreferrer">plex</a>. The snag is that it appears to be available only for Py2. It took me an hour or two to make sufficient conversion work to Py3 to get this.</p>
<p>Just three types of tokens to watch for, then a similar number of branches within a <code>while</code> statement.</p>
<pre><code>from plex import *
from io import StringIO

stmt = StringIO('A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]')

lexicon = Lexicon([
    (Rep1(AnyBut('[]')), 'not_brackets'),
    (Str('['), 'left_bracket'),
    (Str(']'), 'right_bracket'),
])

class Replace(dict):
    def __missing__(self, key):
        return key

replace = Replace({'BANANA': '1', 'PINEAPPLE': '2'})

scanner = Scanner(lexicon, stmt)
new_statement = []
while True:
    token = scanner.read()
    if token[0] is None:
        break
    elif token[0]=='no_brackets':
        new_statement.append(replace[token[1]])
    else:
        new_statement.append(token[1])

print (''.join(new_statement))
</code></pre>
<p>Result:</p>
<pre><code>A[BANANA] + B[PINEAPPLE] - C[CHERRY] [[BANANA]]
</code></pre>
</div>
<span class="comment-copy">Whats the desired output from this?</span>
<span class="comment-copy">You don't mean that all of the input lines look like that? Do you have a grammar for the input lines?</span>
<span class="comment-copy">This is a strange post, almost confusing. What is this, like mail merge? A simple key/value pair that needs to be swapped out? It's pretty simple, why is it confusing me ?</span>
<span class="comment-copy">If you don't want "BANANA" substituted for, then why would you substitute in #1?</span>
<span class="comment-copy">Lookarounds are much more "expensive" - rather match the brackets and put them in the substitution back again. See <a href="https://regex101.com/r/Uj5CtS/1" rel="nofollow noreferrer"><b>mine</b></a>  vs. <a href="https://regex101.com/r/Uj5CtS/2" rel="nofollow noreferrer"><b>your's</b></a>, 27 vs 81 steps, a third.</span>
