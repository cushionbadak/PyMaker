<div class="post-text" itemprop="text">
<p><strong>what i tried drawing:</strong></p>
<blockquote>
<p>G = nx.gnp_random_graph(20,0.5)</p>
</blockquote>
<p><strong>what i got with plt.show(G):</strong></p>
<p><a href="https://i.stack.imgur.com/AGi1L.png" rel="nofollow noreferrer">my result</a></p>
<p><strong>what my instrutor drew: with same commands:</strong></p>
<p><a href="https://i.stack.imgur.com/vWuLz.png" rel="nofollow noreferrer">instructor's result</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Code like:</p>
<pre><code>G = nx.gnp_random_graph(20,0.5)
G = nx.gnp_random_graph(n=20, p=0.5, seed=None, directed=False)  # equivalent
</code></pre>
<p>will use current time or other resources to init the PRNG (as <code>seed=None</code>)</p>
<p>As networkx is pure python and <a href="https://networkx.github.io/documentation/networkx-1.10/_modules/networkx/generators/random_graphs.html#gnp_random_graph" rel="nofollow noreferrer">reuses the standardlib</a>, this boils down to <a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow noreferrer">python's random module seed</a>:</p>
<blockquote>
<p>random.seed(a=None, version=2)</p>
<pre><code>Initialize the random number generator.

If a is omitted or None, the current system time is used. If randomness sources are provided by the operating system, they are used instead of the system time (see the os.urandom() function for details on availability).

If a is an int, it is used directly.

With version 2 (the default), a str, bytes, or bytearray object gets converted to an int and all of its bits are used.

With version 1 (provided for reproducing random sequences from older versions of Python), the algorithm for str and bytes generates a narrower range of seeds.

Changed in version 3.2: Moved to the version 2 scheme which uses all of the bits in a string seed.
</code></pre>
</blockquote>
<p>You can set the seed to make it deterministic like:</p>
<pre><code>G = nx.gnp_random_graph(20,0.5,0)  # or any other int
</code></pre>
<p>The last line will always output the same graph (the docs explicitly call for an int!).</p>
<p>If your instructor did not fix the seed, it's somewhat bogus to try to reproduce it.</p>
</div>
<span class="comment-copy">Maybe it has to do with the <i>random</i> in <code>gnp_random_graph</code>...</span>
<span class="comment-copy">what do you mean by 'same commands'? It's a random graph, no?</span>
<span class="comment-copy">@banana by same commands i mean, plt.show() and the previous one.</span>
<span class="comment-copy">Also, the default for Networkx's plotting (<code>spring_layout</code>) uses a random initialization.  So even the same graph will be displayed differently.</span>
<span class="comment-copy">@Joel Good point, although this only tackles visualization. For people interested: <a href="https://github.com/networkx/networkx/pull/2766" rel="nofollow noreferrer">there is a seed-param now</a>.</span>
