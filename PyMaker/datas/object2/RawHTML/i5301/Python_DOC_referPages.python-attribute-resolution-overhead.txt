<div class="post-text" itemprop="text">
<p>During attribute resolution, does Python check for each attribute if it exists in the class? If so, doesn't it incur a large overhead?</p>
<p>For example, checking the attribute <code>a.x</code>. Python must first check if <code>A.__dict__["x"]</code> is a data descriptor (as they override normal attribute lookups), meaning it should check the entire <code>__mro__</code> for data descriptors.
This in turn means that every attribute lookup in an instance dict, makes a lookup in the entire class mro which sounds like it's a HUGE overhead. Is this cached? And even if it is, what prevents the modification of one of the base classes, by dynamically adding a data descriptor? How will this theoretical cache get invalidated?</p>
</div>
<div class="post-text" itemprop="text">
<p>The class is already responsible for handling attribute lookups. But yes, to look up attributes the current class and the base classes are consulted, because the attribute could be a data descriptor.</p>
<p>That's because some objects are <em>special</em>, in that they can be bound to the instance or class (a <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">descriptor</a>, <em>and</em> that they'll override any attribute with the same name on the instance if they are <em>data</em> descriptors (descriptors that support setting or deleting values).</p>
<p>All this is handled in the C implementation of the class's <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>__getattribute__</code> method</a> (usually inherited from <code>object.__getattribute__)</code>, and in C, access to both the instance and class namespaces is relatively cheap.</p>
<p>See the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><em>Descriptor HOWTO</em></a> for further details on how and why this is done.</p>
</div>
<span class="comment-copy">Not entirely sure how "cheap" it is but thanks :-)</span>
