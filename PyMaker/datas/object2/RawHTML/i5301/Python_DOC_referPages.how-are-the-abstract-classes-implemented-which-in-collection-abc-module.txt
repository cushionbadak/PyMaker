<div class="post-text" itemprop="text">
<p>I was wondering that how the implementation mechanism work for tuple, list, or set data types. When I have checked the tuple data type with <strong>help()</strong> function, I can't see any inherited class from collection.abc module.</p>
<pre><code>help(tuple)

Help on class tuple in module builtins:

class tuple(object)
# omitting the other details
</code></pre>
<p>When I was checking:</p>
<pre><code>import collections

issubclass(tuple, collections.abc.MutableSequence) # False
issubclass(tuple, collections.abc.Sequence) # True

issubclass(list, collections.abc.MutableSequence) # True
issubclass(list, collections.abc.Sequence) # True
</code></pre>
<p>Both of two lines for list are correct because I know that MutableSequence is also subclass of Sequence abstract class.</p>
<p>I'm getting confused because as I mentioned above I couldn't see any inherited class from the collection.abc module within concrete tuple or list implementation. Long story short I try to find an explanation about implementation of abstract base classes for Python data types.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>tuple</code> and <code>list</code> do not inherit from any collections abstract base class. Instead, the collections classes customize <a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks" rel="noreferrer">instance and subclass checks</a>, with the <code>class.__instancecheck__()</code> and <code>class.__subclasscheck__()</code> hooks.</p>
<p>These hooks are called whenever you use <code>isinstance()</code> or <code>issubclass()</code> with a class that implements them, and their result is returned:</p>
<pre><code>&gt;&gt;&gt; import collections.abc
&gt;&gt;&gt; collections.abc.MutableSequence.__subclasscheck__(tuple)
False
&gt;&gt;&gt; collections.abc.MutableSequence.__subclasscheck__(list)
True
</code></pre>
<p>Specifically, the hooks are implemented by the <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta" rel="noreferrer"><code>abc.ABCMeta</code> Abstract Base Class metaclass</a>, which abstracts the process. Your Abstract Base Class only needs to implement the <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__" rel="noreferrer"><code>__subclasshook__()</code> class method</a>; this is easier to implement, as the <code>__subclasscheck__</code> and <code>__instancecheck__</code> special methods must be implemented on a metaclass.</p>
<p>The <code>ABCMeta</code> implementation also includes a registry to add types to an ABC, with the <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.register" rel="noreferrer"><code>ABCMeta.register()</code> method</a>. The <code>tuple</code> and <code>list</code> classes are registered explicitly with the <code>Sequence</code> type, for example:</p>
<pre><code>Sequence.register(tuple)
Sequence.register(str)
Sequence.register(range)
Sequence.register(memoryview)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__" rel="nofollow noreferrer">docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__</a></span>
<span class="comment-copy">The implementation is written in python, if you want to take a look. <a href="https://github.com/python/cpython/blob/master/Lib/_collections_abc.py" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Lib/_collections_abc.py</a></span>
<span class="comment-copy">@user2357112 thanks for your effort but the line you wrote neither an explanation nor a comment.</span>
<span class="comment-copy">at that case, what is the difference between subclassing and registration?</span>
<span class="comment-copy">@vildhjarta: A subclass inherits the <i>implementation</i>. Registration only makes a statement that the right methods are present and implemented correctly.</span>
<span class="comment-copy">@vildhjarta: the ABCs are implemented in Python and have base implementations for the methods. <code>list</code> and <code>tuple</code> are implemented in C code, their implementations are materially different and would be way too slow if they actually inherited from the base ABC implementations.</span>
<span class="comment-copy">thanks for the clarifications.</span>
