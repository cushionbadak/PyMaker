<div class="post-text" itemprop="text">
<p>Here is what I am doing</p>
<pre><code>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.getLogger().setLevel(logging.INFO)
&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; date = date.today()
&gt;&gt;&gt; logging.info('date={}', date)
Traceback (most recent call last):
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.py", line 846, in emit
    msg = self.format(record)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.py", line 723, in format
    return fmt.format(record)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.py", line 464, in format
    record.message = record.getMessage()
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.py", line 328, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Logged from file &lt;stdin&gt;, line 1
&gt;&gt;&gt; 
</code></pre>
<p>My python version is </p>
<pre><code>$ python --version
Python 2.7.3
</code></pre>
<p>How do I make it work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do the formatting yourself:</p>
<pre><code>logging.info('date={}'.format(date))
</code></pre>
<p>As was pointed out by Martijn Pieters, this will always run the string formatting, while using the logging module would cause the formatting to only be performed if the message is actually logged. </p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot use new-style formatting when using the logging module; use <code>%s</code> instead of <code>{}</code>.</p>
<pre><code>logging.info('date=%s', date)
</code></pre>
<p>The logging module uses the old-style <code>%</code> operator to format the log string. See the <a href="http://docs.python.org/library/logging.html#logging.Logger.debug" rel="noreferrer"><code>debug</code> method</a> for more detail.</p>
<p>If you really want to use <code>str.format()</code> string formatting, consider using custom objects that apply the formatting 'late', when actually converted to a string:</p>
<pre><code>class BraceMessage(object):
    def __init__(self, fmt, *args, **kwargs):
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs

    def __str__(self):
        return self.fmt.format(*self.args, **self.kwargs)

__ = BraceMessage

logging.info(__('date={}', date))
</code></pre>
<p>This is an approach the <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-custom-message-objects" rel="noreferrer">Python 3 <code>logging</code> module documentation proposes</a>, and it happens to work on Python 2 too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Martijn's answer is correct, but if you prefer to use new style formatting with logging, it can be accomplished by subclassing Logger.</p>
<pre><code>import logging

class LogRecord(logging.LogRecord):
    def getMessage(self):
        msg = self.msg
        if self.args:
            if isinstance(self.args, dict):
                msg = msg.format(**self.args)
            else:
                msg = msg.format(*self.args)
        return msg

class Logger(logging.Logger):
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None):
        rv = LogRecord(name, level, fn, lno, msg, args, exc_info, func)
        if extra is not None:
            for key in extra:
                rv.__dict__[key] = extra[key]
        return rv
</code></pre>
<p>Then just set the logging class:</p>
<pre><code>logging.setLoggerClass(Logger)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do also (Python 3);</p>
<pre><code>logging.info(f'date={date}')
</code></pre>
</div>
<span class="comment-copy">In my case, I was trying to pass an exception object to exception level: <code>logger.exception('msg', exception_obj)</code>, similar to how I used to pass with error level. Remove the object and let it handle the exception logging for you.</span>
<span class="comment-copy">Do know that by doing the formatting yourself, you loose the speed advantage offered by letting the logging module do it for you <i>only when the message is actually logged</i>. In other words, if you use the <code>debug()</code> handler but the logging level excludes DEBUG level, you are not incurring the penalty of the string formatting operation. The speed difference can be significant if you have a lot of debug messages.</span>
<span class="comment-copy">Or even (at least on Python 3.5) use just LogRecord with <code>logging.setLogRecordFactory(LogRecord)</code></span>
