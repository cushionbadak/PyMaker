<div class="post-text" itemprop="text">
<p>Looking into the <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">documentation</a> of the <code>with</code> statement in python:</p>
<blockquote>
<ol start="6">
<li>The context manager’s <code>__exit__()</code> method is invoked. </li>
</ol>
</blockquote>
<p>I was wondering what exactly happens if I do</p>
<pre><code>with open("foo","w") as f:
    pass
</code></pre>
<p>Judging from the documentation and <code>f.closed</code> evaluating to True suggests, that the <code>__exit__()</code> seems to be somewhat equivalent to a <code>close()</code>. But I was wondering if there is any more detail to be found about the actual behaviour of the <code>__exit__()</code> function. Any hints are appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a more specific answer, <code>open</code> returns a subclass of <code>_io._IOBase</code> (depending on options). The <code>__exit__</code> method is implemented in C in <a href="https://github.com/python/cpython/blob/f320be77ffb73e3b9e7fc98c37b8df3975d84b40/Modules/_io/iobase.c" rel="nofollow noreferrer"><code>iobase.c</code></a> with the code</p>
<pre><code>static PyObject *
iobase_exit(PyObject *self, PyObject *args)
{
    return PyObject_CallMethodObjArgs(self, _PyIO_str_close, NULL);
}
</code></pre>
<p>which you can see, just calls the objects <code>close</code> "method".</p>
</div>
<div class="post-text" itemprop="text">
<p>Anything can be used as a context manager - it just has to provide it's own <code>__enter__</code> and <code>__exit__</code> methods. See <a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">PEP343</a> for all the details on how <code>with</code> and context managers work.</p>
<p>In the case of <code>open</code> this is actually a call to <code>io.TextIOBase</code> class under the hood. This is implemented mostly in C, but there's a fallback python implementation (<code>_pyio.py</code>) which contains the following code, which confirms that it just calls <code>close()</code></p>
<pre><code>### Context manager ###

def __enter__(self):  # That's a forward reference
    """Context management protocol.  Returns self (an instance of IOBase)."""
    self._checkClosed()
    return self

def __exit__(self, *args):
    """Context management protocol.  Calls close()"""
    self.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This depends on the context manager itself; the point is that a context manager can determine what to do when it exits.</p>
<p>In the case of <code>open</code>, yes what it does is close the file; but other context managers are free to do whatever they like. A database connection manager might commit or rollback the cursor before closing the connection, for example; or a temporary file manager might delete the tempfiles.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="nofollow noreferrer">docs.python.org/3/library/io.html#io.IOBase</a> is one place it’s referenced: “IOBase is also a context manager and therefore supports the with statement. In this example, file is closed after the with statement’s suite is finished—even if an exception occurs”</span>
