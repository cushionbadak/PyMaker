<div class="post-text" itemprop="text">
<p>I just spent half an hour looking into a bug in statsmodels' SARIMAX functionality that I could finally trace back to the fact that numpy.int32 fails type checks for int.</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; foo = np.int32(3)
&gt;&gt;&gt; isinstance(foo, int)
False
</code></pre>
<p>Is there a way to circumvent this kind of issue without explicit type conversions?
Should proper code even test for types and not check if a variable can safely be cast to a type?</p>
<p>Edit: My question is answered by an account of what technical limitations or design decisions are the cause of this behaviour and how to pythonically handle cases where both pure python's <code>int</code> and numpy <code>int32</code> or <code>int64</code> types might appear.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why <em>should</em> <code>numpy.int32</code> descend from <code>int</code>? <code>int</code> is a specific class. It is one way of representing integers. That doesn't mean that every class that represents integers should descend from <code>int</code>. <code>numpy.int32</code> has different semantics and different methods - for example, it has most of the functionality needed to operate like a 0-dimensional array - and inheriting from <code>int</code> isn't particularly useful for implementing <code>numpy.int32</code>.</p>
<p>On some builds of Python 2 (Windows only?), <code>numpy.int32</code> actually will descend from <code>int</code> (which is also 32-bit on those builds), but I believe this design decision dates back to a time when <code>int</code> performed wraparound arithmetic like <code>numpy.int32</code> instead of promoting to <code>long</code> on overflow, and when <code>operator.index</code> didn't exist. It was a more reasonable decision back then.</p>
<p>As for how to treat <code>numpy.int32</code> like <code>int</code>, <code>numbers.Integral</code> does a sort of okay job, but the implementation relies on people explicitly <code>register</code>-ing their classes with <code>numbers.Integral</code>, and people often don't think to do that. NumPy didn't add the <code>register</code> calls until <a href="https://github.com/numpy/numpy/commit/2d73ff34f48980778b4e808afc76c0c1fa841ba7" rel="nofollow noreferrer">2014</a>, 6 years after <code>numbers.Integral</code> was introduced. Similar libraries like SymPy still don't have the calls.</p>
<p>I find <code>operator.index</code> to be a better check:</p>
<pre><code>try:
    real_int = operator.index(some_intlike_thing)
except TypeError:
    # Not intlike.
    do_something_about_that()
</code></pre>
<p><code>operator.index</code> is the hook an int-like class has to implement to make its instances usable as a sequence index. It's a stricter check than <code>int(x)</code>, which would accept <code>3.5</code> and <code>'3'</code>. Since there's a concrete, easily noticeable impact if this hook is missing, it's more likely to be present than <code>numbers.Integral</code> support.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__mro__</code> lists the inheritance stack of a class:</p>
<pre><code>np.int32.__mro__
Out[30]: 
(numpy.int32,
 numpy.signedinteger,
 numpy.integer,
 numpy.number,
 numpy.generic,
 object)

int.__mro__
Out[31]: (int, object)
</code></pre>
<p>For a basic array:</p>
<pre><code>x=np.array([1,2,3])    
x.dtype
Out[33]: dtype('int32')
</code></pre>
<p><code>isinstance</code> of classes on this stack returns True:</p>
<pre><code>isinstance(x[0], np.int32)
Out[37]: True    
isinstance(x[0], np.number)
Out[38]: True    
</code></pre>
<p><code>int</code> isn't on this stack:</p>
<pre><code>isinstance(x[0], int)
Out[39]: False    
isinstance(x[0], object)
Out[40]: True
</code></pre>
<p><code>item</code> extracts a value from its <code>numpy</code> wrapper:</p>
<pre><code>isinstance(x[0].item(), int)
Out[41]: True
</code></pre>
<p>@kazemakase suggests using the <code>numbers</code> module:</p>
<pre><code>isinstance(x[0], numbers.Integral)
Out[47]: True
</code></pre>
</div>
<span class="comment-copy"><code>&lt;class 'numpy.int32'&gt;</code> is not <code>&lt;class 'int'&gt;</code>. So if you are working with <code>numpy</code> instead of checking for <code>isinstance(foo, int)</code>, check for <code>isinstance(foo, np.int32)</code>.</span>
<span class="comment-copy">@Ev.Kounis What reason is there, not to inherit from pure python's int type, allowing <code>isinstance</code> to recognize the type?</span>
<span class="comment-copy">I see more problems created than solved with that. This is all explained well in the proposed dupe. <i>My favorite answer is the second in vote-count</i>. I think we have to make an important distinction here between <i>integer numbers</i> as we, humans, know them and <code>integer types</code> as they are implemented in programming languages. You probably want to check for the 1&lt;sup&gt;st&lt;/sup&gt; but actually check for the 2&lt;sup&gt;nd&lt;/sup&gt;.</span>
<span class="comment-copy">@coldspeed I voted to reopen the question because the dup target, while providing important information on the topic, does not answer <i>how to correctly test for integer types</i>. I think answering that would be appropriate here but not there.</span>
<span class="comment-copy">For reference: you can check against <a href="https://docs.python.org/3/library/numbers.html#module-numbers" rel="nofollow noreferrer">numeric abstract base classes</a>. <code>isinstance(foo, numbers.Integral)</code> seems to work for numpy types too.</span>
