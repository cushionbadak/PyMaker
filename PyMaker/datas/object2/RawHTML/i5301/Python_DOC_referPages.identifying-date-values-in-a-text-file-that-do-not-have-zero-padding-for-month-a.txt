<div class="post-text" itemprop="text">
<p>I am reading a text file in which one of the columns (3rd) contains date values in different date formats along with other data types (string, number, etc). I am identifying each unique date format in my input file and outputting the values for each date format to a text file. One of the date formats I am looking for in my input file is - Month dd, YYYY. </p>
<p>For e.g. May 1, 2001.</p>
<p>I am using the python strftime() function to search for the above date format in my file. However, my code provided below is only outputting date values with zero-padding. </p>
<p>For e.g. May 01, 2001</p>
<p>But, I need my program to also find date values without the zero-padding that I know exist in my input file such as:</p>
<p>May 1, 2001</p>
<p>2/4/2012</p>
<p>I have searched the forum for the solution, and most of it involved removing/replacing the zero. However, this does not solve my problem as I am searching the file for both zero padded and non zero-padded date values.<br/>
I also tried adding the "-" sign after the "%" sign in my date format, but it did not work. I have provided my code below. Can anyone guide me in the right direction ? I am using Pycharm CE 2017.2 with the python 3.6.3 interpreter.</p>
<p>My Code:</p>
<pre><code># Identifying Month dd, yyyy date format

from datetime import datetime

import csv

with open('file1.csv', 'r') as f_input, open('file2.txt', 'w') as f_output:

    csv_input = csv.reader(f_input)
    csv_output = csv.writer(f_output)

    for row in csv_input:
        for date_format in ['%B %d, %Y']:
            try:
                converted = datetime.strptime(row[3], date_format)
                csv_output.writerow([row[0], row[1], row[2], converted.strftime(date_format), row[4]])
            except ValueError:
                pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is <em>very</em> hard to do what you want reliably using <code>datetime.strptime()</code>. I can see from your code that you are already planning to have multiple date format strings (otherwise your date format string wouldn't be in a 1-list). </p>
<p>Try this approach instead:</p>
<pre><code>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse("May 1, 2001")
datetime.datetime(2001, 5, 1, 0, 0)
&gt;&gt;&gt; parser.parse("May 01, 2001")
datetime.datetime(2001, 5, 1, 0, 0)
&gt;&gt;&gt; parser.parse("2/4/2012")
datetime.datetime(2012, 2, 4, 0, 0)
&gt;&gt;&gt; parser.parse("02/04/2012")
datetime.datetime(2012, 2, 4, 0, 0)
</code></pre>
<p>So, instead of</p>
<pre><code>for row in csv_input:
    for date_format in ['%B %d, %Y']:
        try:
            converted = datetime.strptime(row[3], date_format)
            csv_output.writerow([row[0], row[1], row[2], converted.strftime(date_format), row[4]])
        except ValueError:
            pass
</code></pre>
<p>do </p>
<pre><code>for row in csv_input:
    converted = parser.parse(row[3])
    csv_output.writerow([row[0], row[1], row[2], converted.strftime('%B %d, %Y'), row[4]])
</code></pre>
<p>This will convert <em>all</em> of your input dates to a standard format, for example "May 1, 2001". I've omitted your <code>try...except</code> because that is there to catch the cases where <code>strptime()</code> fails, and <code>parser.parse()</code> will do a competent job of whatever you pass it, as long as it isn't complete nonsense, and in that case you should not want to silently suppress the exception.</p>
<p><code>dateutil</code> isn't in the standard library but it's well worth the effort of installing.</p>
</div>
<div class="post-text" itemprop="text">
<p>tested in python 3.5.2 (should be same in 3.6). I see no issues</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('May 1, 2018', '%B %d, %Y')
datetime.datetime(2018, 5, 1, 0, 0)
&gt;&gt;&gt; datetime.strptime('May 01, 2018', '%B %d, %Y')
datetime.datetime(2018, 5, 1, 0, 0)
</code></pre>
<p>You might need to paste some of the file to get a better understanding of what is going on.</p>
<p><strong>edit</strong></p>
<p>Here is a link to a <a href="https://repl.it" rel="nofollow noreferrer">repl.it</a>. Thanks to @usr2564301 telling me about it.</p>
<p><a href="https://repl.it/@ryati/GrayIllinformedFlyingsquirrel" rel="nofollow noreferrer">https://repl.it/@ryati/GrayIllinformedFlyingsquirrel</a></p>
</div>
<span class="comment-copy">Could you also tell me where inside my for loop would I insert the parse statements that you have suggested ?</span>
<span class="comment-copy">Sample code added.</span>
<span class="comment-copy">An upvote for actually trying, although to be fair <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">the documentation</a> <i>explicitly</i> states "<code>%d</code>	Day of the month as a zero-padded decimal number." ... Confirmed on <a href="https://repl.it" rel="nofollow noreferrer">repl.it</a> with the language set to Python 3.6.1.</span>
<span class="comment-copy">Never heard of <a href="https://repl.it" rel="nofollow noreferrer">repl.it</a>. Great site! I will add that to my answer.</span>
<span class="comment-copy">Could you tell me the purpose of the line - "datetime.datetime(2018, 5, 1, 0, 0)". When I add it to my code, I get an error on real.it saying -  AttributeError: type object 'datetime.datetime' has no attribute 'datetime'.  Also, when I run - print(datetime.strptime('May 01, 2018', '%B %d, %Y')), I am getting "2018-05-01 00:00:00" as the output. Shouldn't the output be May 1, 2018 ?</span>
<span class="comment-copy"><code>datetime.datetime(2018, 5, 1, 0, 0)</code> is output from the python console. all the lines that start with <code>&gt;&gt;&gt;</code> represent my input. Basically, don't copy the output lines. They are just there to show my results.</span>
<span class="comment-copy">However, I get the impression that there are more issues with your input file. Again, please provide a sample so we can properly address any other errors.</span>
