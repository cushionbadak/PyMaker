<div class="post-text" itemprop="text">
<p>I'm new to python and even newer to SQL and have just run into the following problem:</p>
<p>I want to insert a list (or actually, a list containing one or more dictionaries) into a single cell in my SQL database. This is one row of my data:</p>
<pre><code>[a,b,c,[{key1: int, key2: int},{key1: int, key2: int}]]
</code></pre>
<p>As the number of dictionaries inside the lists varies and I want to iterate through the elements of the list later on, I thought it would make sense to keep it in one place (thus not splitting the list into its single elements). However, when trying to insert the list as it is, I get the following error:</p>
<pre><code>sqlite3.InterfaceError: Error binding parameter 2 - probably unsupported type.
</code></pre>
<p>How can this kind of list be inserted into a single cell of my SQL database?</p>
</div>
<div class="post-text" itemprop="text">
<p>SQLite has no facility for a 'nested' column; you'd have to store your list as <em>text</em> or binary data blob; serialise it on the way in, deserialise it again on the way out.</p>
<p>How you serialise to text or binary data depends on your use-cases. JSON (via the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code> module</a> could be suitable if your lists and dictionaries consist only of text, numbers, booleans and <code>None</code> (with the dictionaries only using strings as keys). JSON is supported by a wide range of other languages, so you keep your data reasonably compatible. Or you could use <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a>, which lets you serialise to a binary format and can handle just about anything Python can throw at it, but it's specific to Python.</p>
<p>You can then <a href="https://docs.python.org/3/library/sqlite3.html#using-adapters-to-store-additional-python-types-in-sqlite-databases" rel="nofollow noreferrer">register an adapter</a> to handle converting between the serialisation format and Python lists:</p>
<pre><code>import json
import sqlite

def adapt_list_to_JSON(lst):
    return json.dumps(lst).encode('utf8')

def convert_JSON_to_list(data):
    return json.loads(data.decode('utf8'))

sqlite3.register_adapter(list, adapt_list_to_JSON)
sqlite3.register_converter("json", convert_JSON_to_list)
</code></pre>
<p>then connect with <code>detect_types=sqlite3.PARSE_DECLTYPES</code> and declare your column type as <code>json</code>, or use <code>detect_types=sqlite3.PARSE_COLNAMES</code> and use <code>[json]</code> in a column alias (<code>SELECT datacol AS "datacol [json]" FROM ...</code>) to trigger the conversion on loading.</p>
</div>
<span class="comment-copy">would converting the list to a string format be acceptable ? for example JSON ?</span>
<span class="comment-copy">You should show your insert code. With SQLite you would store that as a textual string, that's ok for storage but if you want to use SQL later on to query the data say for a specific key value then that's not the way to do it.</span>
