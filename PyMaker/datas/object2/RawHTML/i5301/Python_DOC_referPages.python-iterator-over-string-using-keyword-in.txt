<div class="post-text" itemprop="text">
<p>I recently came across some python code I don't understand completely. </p>
<pre><code>s = "abcdef"
x = "bde"
it = iter(s)
print all(c in it for c in x)
</code></pre>
<p>I understand that this code checks if x is a subsequence of s. Can someone explain or point me towards an article that explains what's exactly happening at <code>c in it</code>. What is calling the next method of iterator <code>it</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It’s good to start with reading the documentation for the built-in function <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a>:</p>
<blockquote>
<p>Return True if all elements of the iterable are true (or if the iterable is empty).</p>
</blockquote>
<p>That means that <code>c in it for c in x</code> is a <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">“generator expression”</a>: it produces values. The values it produces are of the boolean expression <code>c in it</code> (see the <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow noreferrer"><code>in</code> operator</a>) for all characters <code>c</code> in string <code>x</code>.</p>
<p>Here, the <code>in</code> operator is responsible for advancing the iterator. Note, however, that the True result is probably lucky. The iterator <code>it</code> can advance only once and because <code>x = "bde"</code> contains the letters in the same sequence as they appear in <code>s = "abcdef"</code>, the whole expression works out to the expected result True. Reverse <code>x = "edb"</code> and the expression is False because the iterator is exhausted.</p>
</div>
<span class="comment-copy"><i>"because all letters of x are also letters of s"</i> - i.e <code>x</code> is a subset of <code>s</code>.</span>
<span class="comment-copy">Judging by the question's use of the word "subsequence", it sounds like the code is <i>supposed</i> to return false for <code>x = "edb"</code> and <code>s = "abcdef"</code>.</span>
<span class="comment-copy">@user2357112, while the op’s <i>commentary</i> uses the term “subsequence” the code does <i>not</i> implement a subsequence, and <code>"bde"</code> is certainly not a subsequence (i.e. substring) of <code>"abcdef"</code>.</span>
<span class="comment-copy">@Jens: ...but it does, doesn't it? At least by the definition used in contexts like the <a href="https://en.wikipedia.org/wiki/Longest_increasing_subsequence" rel="nofollow noreferrer">longest increasing subsequence problem</a>, where a subsequence doesn't have to be contiguous, as opposed to a <a href="https://en.wikipedia.org/wiki/Substring" rel="nofollow noreferrer">substring</a>, which does have to be contiguous.</span>
<span class="comment-copy">@user2357112 in that case, I agree.</span>
