<div class="post-text" itemprop="text">
<p>I'm looking for a way to gracefully exit from a long running python script which I launch from my Laravel app.</p>
<p>My actual process to do so is:</p>
<ul>
<li>From Laravel set a 'script_state' to 1 in a MySql table database</li>
<li>Launch the python script via <code>shell_exec</code></li>
<li>The python scripts periodically check the 'script_state' by a MySql query. If it is changed to 0 (intentionally from my Laravel app) then it gracefully exit the script</li>
</ul>
<p>Retrieving the <code>pid</code> from the <code>shell_exec</code> and then kill could have been an option but I actually wan't the script to stop and exit gracefully.</p>
<p>My actual config works but I'm looking for a better approach. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Retrieving the <code>pid</code> from the <code>shell_exec</code> and then kill could have been an option but I actually wan't the script to stop and exit gracefully.</p>
</blockquote>
<p>This is probably your best bet. You can use <a href="https://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html" rel="nofollow noreferrer"><code>SIGTERM</code></a> to politely ask the script to exit:</p>
<blockquote>
<p>The <code>SIGTERM</code> signal is a generic signal used to cause program termination. Unlike <code>SIGKILL</code>, this signal can be blocked, handled, and ignored. It is the normal way to politely ask a program to terminate.</p>
</blockquote>
<p>This is effectively what happens when you click the close button in a GUI application.</p>
<p>In your Python code you can handle <code>SIGTERM</code> using the <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer"><code>signal</code> module</a> with whatever cleanup logic you want, then exit:</p>
<blockquote>
<pre><code>import signal, os

def handler(signum, frame):
    print('Signal handler called with signal', signum)
    raise OSError("Couldn't open device!")

# Set the signal handler and a 5-second alarm
signal.signal(signal.SIGALRM, handler)
signal.alarm(5)

# This open() may hang indefinitely
fd = os.open('/dev/ttyS0', os.O_RDWR)

signal.alarm(0)          # Disable the alarm
</code></pre>
</blockquote>
<p>See also <a href="https://stackoverflow.com/a/31464349/354577">this Stack Overflow answer</a> for a class that cleans up before exiting.</p>
</div>
