<div class="post-text" itemprop="text">
<p>I am trying to extract the first parts of files with certain extension (<code>.txt</code>) , and I am trying to make it as short as possible, even in one line:</p>
<pre><code>path = "/home/inputs"
text_files = [f for f in os.listdir("path") if f.endswith('.txt')]

print(text_files)
&gt;['new_categorized.txt', 'new.txt', '2017_input.txt']
</code></pre>
<p>So until here, it works. However, I am not able to get this required list of :</p>
<pre><code>&gt;['new_categorized', 'new', '2017_input']
</code></pre>
<p>I have tried:</p>
<pre><code>print(os.path.splitext(text_files[0])[0])
&gt; new_categorized
</code></pre>
<p>But this way, I lose the other filenames. How can I get all?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a small trick:</p>
<pre><code>path = "/home/inputs"
text_files = ['.'.join(f.split('.')[:-1]) for f in os.listdir(path) if f.endswith('.txt')]
</code></pre>
<p>Here's the trick:</p>
<pre><code>'.'.join(f.split('.')[:-1])
</code></pre>
<p>It first splits the filename by dot, then removes the last one, and join them back with dots. This effectively strips the last dot and everything after, and if there's no dot, does nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.4 and above, try using the new <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>:</p>
<pre><code>print([path.stem for path in Path('/home/inputs').glob('*.txt')])
</code></pre>
<p><code>Path.glob()</code> achieves the same as your <code>os.listdir</code> + <code>f.endswith('.txt')</code> and then to get the part of the path after the last slash but before the extension we just use the <code>.stem</code> property on each path.</p>
<p>With your existing code, you "lose the other file names," because you only call <code>os.path.splittext</code> on <code>text_files[0]</code>. To do it on multiple of them use a list comprehension:</p>
<pre><code>print([os.path.splitext(path)[0] for path in text_files])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just editied 2 main things from your code. First I used path as variable rather than string. Second I used slicing to get required result.</p>
<p>So with this you can try something like this:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; path = "/home/shashank"

&gt;&gt;&gt; text_files = [f for f in os.listdir(path) if f.endswith('.txt')]
&gt;&gt;&gt; text_files
['temp.txt', 'myfile.txt', 'angular.txt', 'y.txt']
&gt;&gt;&gt;
&gt;&gt;&gt; text_files = [f[:-4] for f in os.listdir(path) if f.endswith('.txt')]
&gt;&gt;&gt; text_files
['temp', 'myfile', 'angular', 'y']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want it as short as possible, use the <code>map</code> function with a lambda expression:</p>
<pre><code>print(list(map(lambda f: os.path.splitext(f)[0], text_files)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can this:</p>
<pre><code>[f.split(".")[0] for f in os.listdir(path) if f.endswith('.txt')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A purely functional approach is possible:</p>
<pre><code>import os

text_files = ['new_categorized.txt', 'new.txt', '2017_input.txt']
list(zip(*map(os.path.splitext, text_files)))[0]

# ('new_categorized', 'new', '2017_input')
</code></pre>
<p>The output here is a tuple instead of a list.</p>
</div>
