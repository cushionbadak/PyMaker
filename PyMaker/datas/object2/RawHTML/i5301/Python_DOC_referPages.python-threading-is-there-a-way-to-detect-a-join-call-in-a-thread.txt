<div class="post-text" itemprop="text">
<p>I have created a program that runs <strong>X</strong> number of threads which all need to be able to be closed down by the main thread. Currently I can stop the program so that each thread will be abruptly killed. I want to be able to detect the close and handle it more gracefully. To do this I want to use the <code>join()</code> function, which waits for the threads to finish. The issue is that the threads don't have a set end and so calling <code>join()</code> would mean that the main thread will wait forever for the threads to end. </p>
<p>So the question is. Is there a way to detect a <code>join()</code> call in a thread and write a customized response to it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can handle the stop signal outside your threads (with <code>signal</code> module, like <a href="https://stackoverflow.com/a/31464349/4271929">this</a>), set a flag on your threads asking them to stop processing and call <code>join</code> in your main thread.</p>
</div>
<span class="comment-copy">Why do you want <code>join</code> to be the signal? Why not use a mechanism designed for sending messages between threads?</span>
<span class="comment-copy">That would work just as well. I'm relatively new to python threading. Would you mind pushing me in the right direction regarding passing messages between threads?</span>
<span class="comment-copy">For this particular use case, an <a href="https://docs.python.org/3/library/threading.html#threading.Event" rel="nofollow noreferrer">Event</a> seems appropriate.</span>
<span class="comment-copy">Thanks @user2357112</span>
