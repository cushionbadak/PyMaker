<div class="post-text" itemprop="text">
<p>I don't understand what they're asking. Can someone just clarify the question? </p>
<p>The question is: (They gave us the doc-string for it)</p>
<p>Write and test the method combine in the stack_array module. Test it from a module named q3.py.</p>
<p>This is extending the Stack class. It should produce the same result as Question 1, but it must work at the lowest level of the Stack code definition. In other words, this method cannot call the Stack push and pop, it has to work with _values directly.</p>
<pre><code>def combine(self, s2):
    """
    -------------------------------------------------------
    Combines a second stack with the current stack.
    (iterative algorithm)
    Use: s3 = s1.combine(s2)
    -------------------------------------------------------
    Preconditions:
       s2 - an array-based stack (Stack)
    Postconditions:
       Returns:
          s3 - the contents of the current stack and s2
          are interlaced into s3 - current stack and s2
          are empty (Stack)
   -------------------------------------------------------
   """
   #Write your code here
</code></pre>
<p>I've solved it using push,pop, and peek.</p>
<pre><code>s3 = Stack()
if len(s1._values) &gt;= len(s2._values):
    for things in s1:
        if s2.is_empty() != True:
            s3.push(things)
            s1.pop()
            s3.push(s2.peek())
            s2.pop()
        else:
            s3.push(things)
            s1.pop()
else:
    for things in s2:
        if s1.is_empty() != True:
            s3.push(things)
            s2.pop()
            s3.push(s1.peek())
            s1.pop()
        else:
            s3.push(things)
            s2.pop()
return s3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you can't use your stack methods, you need to go back to the basics.</p>
<p>In order to interlace <code>s1</code> and <code>s2</code>, you need to first have a loop that keeps adding corresponding elements from both stacks until one of them is empty. There are builtin functions you can use here such as <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a> , but for now we will just keep it simple. </p>
<p>Let's say you have your two stacks lists and <code>s3</code> declared as:</p>
<pre><code>s3 = Stack()

first = self.items
second = s2.items
</code></pre>
<p>You can use a counter to add the corresponding elements together:</p>
<pre><code>i = 0
while i &lt; len(first) and i &lt; len(second):
    s3.items.append(first[i])
    s3.items.append(second[i])
    i += 1
</code></pre>
<p>Which basically iterates until <code>i</code> has exceeded the length of either <code>first</code> or <code>second</code>. So if you had <code>s1</code> as <code>[1,2,3]</code> and <code>s2</code> as <code>[4, 5]</code>, this would create [<code>1, 4, 2, 5]</code>. </p>
<p>However, as shown above, if the lists are not the same length, you need to extend the rest of the bigger list to <code>s3</code>. In order to do this, you need to check if <code>i</code> is less than the original lengths of <code>first</code> and <code>second</code>.</p>
<p>Here is how you could do this:</p>
<pre><code>if i &lt; len(second):
    s3.items.extend(second[i:])

elif i &lt; len(first):
    s3.items.extend(first[i:])
</code></pre>
<p>And if none of these conditions are triggered, then both lists were the same size to begin with. </p>
<p>There are more pythonic ways to do this, such as using iterators and builtin functions, but this bare minimum logic should allow you to complete your task. </p>
<p>Since this is homework, I'll leave the rest to you. </p>
</div>
<span class="comment-copy">We are not going to do your homework or your teachers' work in giving proper instructions.</span>
<span class="comment-copy">I'm not asking for people to do my homework, I'd just like some clarification on what the question is asking, or how one would attempt it.</span>
<span class="comment-copy">If you don't understand your assignment, ask your instructor to clarify things. They know best what is being asked, and they're being paid to teach you.</span>
<span class="comment-copy">How does it create the new stack? so if you had <code>s1</code> as <code>[1,2,3]</code> and <code>s2</code> as <code>[3,4,5]</code>, What does <code>s3</code> have to look like? Would it be <code>[1, 3, 2, 4, 3, 5]</code>?</span>
<span class="comment-copy">@RoadRunner : It creates a new stack using this, and and yes it's supposed to look like that.   'def __init__(self):         """         -------------------------------------------------------         Initializes an empty stack. Data is stored in a list.         Use: s = Stack()         -------------------------------------------------------         Postconditions:             Initializes an empty stack.         -------------------------------------------------------         """         self._values = []         return'</span>
<span class="comment-copy">Thank you so much! @RoadRunner</span>
<span class="comment-copy">@JadFoukAladeh No problem. If this helped you, make sure to mark it as correct.</span>
