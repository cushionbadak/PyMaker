<div class="post-text" itemprop="text">
<p>I am working on a script someone created for modifying 3D digital models that was written in Python code. The original author compiles the file into a Windows executable before distributing it. I'm guessing he uses <code>py2exe</code> or some similar tool.</p>
<p>My question is, is there any speed benefit in doing so? The script is very slow, and I'm hoping for better performance after compiling the script. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>No. <code>py2exe</code> and similar tools just create a bundle including the Python interpreter, the bytecode of your Python sources and their dependencies. It's just a deploy convenience, there's no speed advantage (besides skipping the initial parsing of the <code>.py</code> files; in this respect, it's like running your code the second time when the <code>.pyc</code> files are already created).</p>
<p>For "out of the box" performance improvement you can try running your script with PyPy instead of CPython - for "all interpreted" (=&gt; no numpy &amp; co.) numerical Python code I saw very often 20x speedups. </p>
</div>
<span class="comment-copy">Try it and <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">time it</a></span>
<span class="comment-copy">Depending on the code, you could probaly compile parts of, or the whole code with numba. If there are only numpy arrays with eccesiive looping involved numba would be a good alternative. For example take a look here <a href="https://stackoverflow.com/questions/45399851/improving-python-code-in-monte-carlo-simulation/45403017#45403017" title="improving python code in monte carlo simulation">stackoverflow.com/questions/45399851/â€¦</a></span>
<span class="comment-copy">Can I use PyPy to compile scripts into executables? Will they run faster than regular compiled Python scripts?</span>
<span class="comment-copy">@posfan12: PyPy is a JIT compiler (it compiles to machine code at runtime after examining the "typical" code paths of the interpreted code), so by itself it cannot generate a "classical", ahead-of-time compiled binary. As for the "exe bundle" trick generally used for CPython by py2exe e PyInstaller, AFAIK they don't work with PyPy. Most probably your script <i>will</i> run faster, but there's no simple way to deploy it without explicitly installing PyPy as well.</span>
<span class="comment-copy">Can I install regular Python and PyPy on the same machine at the same time? Are scripts called in a different way on the command line?</span>
<span class="comment-copy">Yes. No (well, you have to write <code>pypy</code> instead of <code>python</code>, but that's about it).</span>
<span class="comment-copy">I will probably just switch to another (compiled) programming language.</span>
