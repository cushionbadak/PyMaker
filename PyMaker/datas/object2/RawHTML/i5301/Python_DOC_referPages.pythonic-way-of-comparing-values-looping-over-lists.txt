<div class="post-text" itemprop="text">
<p>From an API i got a "list of lists" containing different coordinates:</p>
<pre><code>List = [[1.0, 2.5, 3.6], [2.02, 2.3, 3.1], [1.5, 6.5, 3.9]]
</code></pre>
<p>I have to find the minimum distance between two coordinates.
I did something like:</p>
<pre><code>MinDist = 9999999999.
for Coord1 in List:
    for Coord2 in List:
        if Coord1 != Coord2:
            Dist = CalcDistance(Coord1,Coord2)
            if Dist &lt; MinDist:
                MinDist=Dist
</code></pre>
<p>Is there a more "intelligent" (and faster) way to get this information?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a built in algorithm:</p>
<pre><code>import numpy as np
from scipy.spatial.distance import pdist, squareform

List = [[1.0, 2.5, 3.6], [2.02, 2.3, 3.1], [1.5, 6.5, 3.9]]

dist_mat = squareform(pdist(List, CalcDistance))
np.fill_diagonal(dist_mat,np.inf)
i,j = np.unravel_index(dist_mat.argmin(), dist_mat.shape)

print((List[i],List[j]))
</code></pre>
<p>The code above combines <a href="https://stackoverflow.com/questions/20984767/find-the-index-of-the-min-value-in-a-pdist-condensed-distance-matrix">Find the index of the min value in a pdist condensed distance matrix</a> and <a href="https://stackoverflow.com/questions/3230067/numpy-minimum-in-row-column-format">Numpy minimum in (row, column) format</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>CalcDistance</code> is something like the below, you could use <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> and a key function together with <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a></p>
<pre><code>from itertools import zip_longest, combinations

def CalcDistance(a, b):
    return (sum((x-y)**2 for x, y in zip_longest(a, b, fillvalue=0)))**.5

List = [[1.0, 2.5, 3.6], [2.02, 2.3, 3.1], [1.5, 6.5, 3.9]]

print(min(combinations(List, 2), key=lambda x: CalcDistance(*x)))
# ([1.0, 2.5, 3.6], [2.02, 2.3, 3.1])
</code></pre>
</div>
<span class="comment-copy">No, there is not</span>
<span class="comment-copy">What is <code>CalcDistance</code>?</span>
<span class="comment-copy">is <code>CalcDistance (List[i]) ==  CalcDistance (List[j])</code> for any couple of <code>i</code>, <code>j</code> ?</span>
<span class="comment-copy">This looks like a computation involving arrays consistent with <code>numpy</code> data types. So you can convert to <code>numpy</code> array and try optimizing with <code>numba</code> (JIT compiler). For loops, it's usually very effective.</span>
<span class="comment-copy">CalcDistance is just the function calculating the distance between the two coordinates</span>
