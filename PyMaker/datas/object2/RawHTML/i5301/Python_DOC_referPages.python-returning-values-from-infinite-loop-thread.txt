<div class="post-text" itemprop="text">
<p>So for my program I need to check a client on my local network, which has a Flask server running. This Flask server is returning a number that is able to change.<br/><br/>
Now to retrieve that value, I use the requests library and BeautifulSoup.<br/> I want to use the retrieved value in another part of my script (while continuously checking the other client). For this I thought I could use the threading module.<br/>The problem is, however, that the thread only returns it's values when it's done with the loop, but the loop needs to be infinite.<br/><br/>This is what I got so far:</p>
<pre><code>import threading
import requests
from bs4 import BeautifulSoup

def checkClient():
    while True:
        page = requests.get('http://192.168.1.25/8080')
        soup = BeautifulSoup(page.text, 'html.parser')
        value = soup.find('div', class_='valueDecibel')
        print(value)

t1 = threading.Thread(target=checkClient, name=checkClient)
t1.start()
</code></pre>
<p><br/>
Does anyone know how to return the printed values to another function here? Of course you can replace the requests.get url with some kind of API where the values change a lot.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a <code>Queue</code> and something listening on the queue</p>
<pre><code>import queue
import threading
import requests
from bs4 import BeautifulSoup

def checkClient(q):
    while True:
        page = requests.get('http://192.168.1.25/8080')
        soup = BeautifulSoup(page.text, 'html.parser')
        value = soup.find('div', class_='valueDecibel')
        q.put(value)

q = queue.Queue()
t1 = threading.Thread(target=checkClient, name=checkClient, args=(q,))
t1.start()

while True:
    value = q.get()
    print(value)
</code></pre>
<p>The <code>Queue</code> is thread safe and allows to pass values back and forth. In your case they are only being sent from the thread to a receiver.</p>
<p>See: <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">https://docs.python.org/3/library/queue.html</a></p>
</div>
<span class="comment-copy">Depending on what kind of performance you need, a simple producer-consumer queue may be sufficient.</span>
<span class="comment-copy">It does not need to be high speed. I have looked in to the Queue module, but I am not sure whether if provides what I need. Besides, I don't really know how to use it(I have already looked in the documentation). Thanks for the answer!</span>
<span class="comment-copy">Put the values in a queue and start another thread that removes values from the queue.</span>
<span class="comment-copy">Ah okay. I will try that. I assume @mementum did this in his code?</span>
<span class="comment-copy">Are you sure you need the values as fast as possible? Add a <code>sleep()</code> in your loop. Also, are you only interested in the most recent value (current volume) or the whole history? In the latter case consider attaching timestamps to values, because you're not going to receive them at an always consistent rate.</span>
<span class="comment-copy">Two problems arise when the client thread fails to read from the queue for some time. (1) The queue gets filled up with old values, which can be quite many. (2) The current value is the last. Also, not having a <code>sleep(...)</code> inside the infinite loop is a good way to kill that local server with entirely too many requests.</span>
<span class="comment-copy">Letting the <i>putter</i> block on <code>put</code> by defining the <code>Queue</code> with a <code>maxsize</code> is a straightforward solution to the problem. I guess the OP wanted first to understand how to cleanly get values in and out of a thread.</span>
