<div class="post-text" itemprop="text">
<p>I have data that looks like this:</p>
<pre><code>SMITH,JOHN, additional data delimited by commas
JONES,TOMMY, additional data delimited by commas
WILLIAMS, BILLY, additional data delimited by commas
etc.
</code></pre>
<p>I need to make it look like this:</p>
<pre><code>SMITH, JOHN, additional data delimited by commas
JONES, TOMMY, additional data delimited by commas
WILLIAMS, BILLY, additional data delimited by commas
etc.
</code></pre>
<p>Notice the extra space after the comma on the first two names.</p>
<p>I think I need to use a regex to make this happen, but it doesn't seem to work. I've tried:</p>
<pre><code>grantor = grantor.replace(r'[A-Z],[A-Z]', r'[A-Z], [A-Z]')
</code></pre>
<p>but it isn't happening for me. What have I missed? I only need to change the names where there is a text character, a comma, and a text character immediately next to each other. Other names in the list are right and don't need to be changed.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> does not use regular expressions. You would have to use the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> module</a> for that.</p>
<p>But since you are just replacing a comma by a comma and a space, you donâ€™t actually need regular expressions here:</p>
<pre><code>s = '''SMITH,JOHN
JONES,TOMMY
etc.'''

s = s.replace(',', ', ')

print(s)
# SMITH, JOHN
# JONES, TOMMY
# etc.
</code></pre>
<blockquote>
<p>I only need to replace the commas that are immediately preceded and proceeded by uppercase text characters.</p>
</blockquote>
<p>Then you might want to use regular expressions after all. You will have to use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> for this:</p>
<pre><code>import re
s = 'FOO, SMITH,JOHN'

s = re.sub('([A-Z]),([A-Z])', r'\1, \2', s)
print(s)
# FOO, SMITH, JOHN
</code></pre>
<p>This uses references to put in those two characters around the comma. You can also use lookbehinds and lookaheads for this:</p>
<pre><code>s = 'FOO, SMITH,JOHN'

s = re.sub('(?&lt;=[A-Z]),(?=[A-Z])', ', ', s)
print(s)
# FOO, SMITH, JOHN
</code></pre>
</div>
<span class="comment-copy"><code>str.replace(",",", ")</code>?</span>
<span class="comment-copy"><i>"What have I missed?"</i> - at least two things: 1. <code>str.replace</code> (<i>don't</i> name your own variable <code>str</code>, by the way; you shadow the built-in) has nothing to do with regular expressions; and 2. that's not how you'd write a regex pattern and replacement to do this anyway.</span>
<span class="comment-copy">Thanks, but if I use what you are suggesting, it would replace all the commas in the list (there is additional text after the names). I only need to replace the commas that are immediately preceded and proceeded by uppercase text characters.</span>
<span class="comment-copy">Then I suggest you have a look at <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.sub</a> and something like <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a>. You could o make the first and second names separate capturing groups (including the comma with the first, if you like) and use those groups in the replacement.</span>
<span class="comment-copy">You knocked it out of the ballpark! Thanks so much!</span>
