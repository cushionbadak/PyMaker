<div class="post-text" itemprop="text">
<p>I seem to be unable to instantiate a <code>namedtuple</code> subclass:</p>
<pre><code>from collections import namedtuple

foo = namedtuple("foo",["a","b","c"])
class Foo(foo):
    def __init__(self, a, b):
        super(Foo, self).__init__(a=a,b=b,c=a+b)
</code></pre>
<p>When I try to create an instance, I get:</p>
<pre><code>&gt;&gt;&gt; Foo(1,2)
TypeError: __new__() takes exactly 4 arguments (3 given)
</code></pre>
<p>I expected <code>Foo(1,2,3)</code>.</p>
<p>There seems to be a workaround: using a class method instead of <code>__init__</code>:</p>
<pre><code>class Foo(foo):
    @classmethod
    def get(cls, a, b):
        return cls(a=a, b=b, c=a+b)
</code></pre>
<p>Now <code>Foo.get(1,2)</code> indeed returns <code>foo(a=1, b=2, c=3)</code>.</p>
<p>However, this looks ugly.</p>
<p>Is this the only way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Named tuples are <em>immutable</em>, you need to use the <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code> method</a> instead:</p>
<pre><code>class Foo(foo):
    def __new__(cls, a, b):
        return super(Foo, cls).__new__(cls, a=a, b=b, c=a+b)
</code></pre>
<p>(Note: <code>__new__</code> is implicitly made a static method, so you need to pass on the <code>cls</code> argument explicitly; the method returns the newly created instance).</p>
<p><code>__init__</code> can't be used because that is called after the instance has already been created and so would not be able to mutate the tuple anymore.</p>
<p>Note that you should really add a <code>__slots__ = ()</code> line to your subclass; a named tuple has no <code>__dict__</code> dictionary cluttering up your memory, but your subclass <em>will</em> unless you add the <code>__slots__</code> line:</p>
<pre><code>class Foo(foo):
    __slots__ = ()
    def __new__(cls, a, b):
        return super(Foo, cls).__new__(cls, a=a, b=b, c=a+b)
</code></pre>
<p>That way you get to keep the memory footprint of your named tuples low. See the <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a> documentation:</p>
<blockquote>
<p>The action of a <em><code>__slots__</code></em> declaration is limited to the class where it is defined. As a result, subclasses will have a <em><code>__dict__</code></em> unless they also define <em><code>__slots__</code></em> (which must only contain names of any <em>additional</em> slots).</p>
</blockquote>
</div>
<span class="comment-copy">Actually, I did want to have <code>__dict__</code> but it is not there (2.7.14).</span>
<span class="comment-copy">@sds: no, and that's by design. Subclass the namedtuple and leave out the <code>__slots__</code> line in the subclass if you really want one, but consider adding a slot for the attribute you want to add instead.</span>
<span class="comment-copy">I did <b><i>not</i></b> add the <code>__slots__ = ()</code> you recommended, and I still do not have <code>__dict__</code>. Sorry about being unclear.</span>
<span class="comment-copy">@sds: I can't reproduce that: <a href="https://ideone.com/T9JYUw" rel="nofollow noreferrer">ideone.com/T9JYUw</a></span>
<span class="comment-copy">I get the same as you do - <code>f.__dict__</code> is <code>{}</code> instead of <code>{'a': 42, 'c': 123, 'b': 81}</code> as I expected.</span>
