<div class="post-text" itemprop="text">
<p>I need to create a program that has a  class that crates an object "Food" and a list called "fridge" that holds these objects created by class "Food".</p>
<pre><code>class Food:
    def __init__(self, name, expiration):
        self.name = name
        self.expiration = expiration


fridge = [Food("beer",4), Food("steak",1),  Food("hamburger",1),  Food("donut",3),]
</code></pre>
<p>This was not hard. Then i created an function, that gives you a food with highest expiration number.</p>
<pre><code>def exp(fridge):
    expList=[]
    xen = 0
    for i in range(0,len(fridge)):
        expList.append(fridge[xen].expiration)
        xen += 1
    print(expList)
    sortedList = sorted(expList)
    return sortedList.pop()

exp(fridge)
</code></pre>
<p>This one works too, now i have to create a function that returns a list where the index of the list is the expiration date and the number of that index is number of food with that expiration date. 
The output should look like: [0,2,1,1] - first index 0 means that there is no food with expiration date "0". Index 1 means that there  are 2 pieces of food with expiration days left 1. And so on. I got stuck with too many if lines and i cant get this one to work at all. How should i approach this ? Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to return it as a list, you will first need to figure out the maximum expiration date in the fridge.</p>
<pre><code>max_expiration = max(food.expiration for food in fridge) +1 # need +1 since 0 is also a possible expiration
exp_list = [0] * max_expiration
for food in fridge:
    exp_list[food.expiration] += 1
print(exp_list)
</code></pre>
<p>returns <code>[0, 2, 0, 1, 1]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate on the list of <code>Food</code> objects and update a dictionary keyed on expiration, with the values as number of items having that expiration. Avoid redundancy such as keeping zero counts in a list by using a <code>collections.Counter</code> object (a subclass of dict):</p>
<pre><code>from collections import Counter

d = Counter(food.expiration for food in fridge)
# fetch number of food with expiration 0
print(d[0]) # -&gt; 0
# fetch number of food with expiration 1
print(d[1]) # -&gt; 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to create a <code>dict</code> where key will be the food expiration date and value will be the number of times it occurs in the list</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; fridge = [Food("beer",4), Food("steak",1),  Food("hamburger",1),  Food("donut",3),]
&gt;&gt;&gt; d = dict((k,len(list(v))) for k,v in groupby(sorted(l,key=lambda x: x.expiration), key=lambda x: x.expiration))
</code></pre>
<p>Here we specify <code>groupby</code> to group all elements of list that have same <code>expiration</code>(<strong>Note</strong> the <code>key</code> argument in <code>groupby</code>). The output of groupby operation is roughly equivalent to <code>(k,[v])</code>, where <code>k</code> is the group key and <code>[v]</code> is the list of values belong to that particular group.</p>
<p>This will produce output like this:</p>
<pre><code>&gt;&gt;&gt; d
&gt;&gt;&gt; {1: 2, 3: 1, 4: 1}
</code></pre>
<p>At this point we have <code>expiration</code> and number of times a particular expiration occurs in a list, stored in a dict <code>d</code>.</p>
<p>Next we need to create a list such that If an element is present in the dict <code>d</code> output it, else output <code>0</code>. We need to iterate from 0 till max number in dict <code>d</code> keys. To do this we can do:</p>
<pre><code>&gt;&gt;&gt; [0 if not d.get(x) else d.get(x) for x in range(0, max(d.keys())+1)]
</code></pre>
<p>This will yield your required output</p>
<pre><code>&gt;&gt;&gt; [0,2,0,1,1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a flexible method using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict</a>:</p>
<pre><code>from collections import defaultdict

def ReverseDictionary(input_dict):
    reversed_dict = defaultdict(set)
    for k, v in input_dict.items():
        reversed_dict[v].add(k)
    return reversed_dict

fridge_dict = {f.name: f.expiration for f in fridge}

exp_food = ReverseDictionary(fridge_dict)
# defaultdict(set, {1: {'hamburger', 'steak'}, 3: {'donut'}, 4: {'beer'}})

exp_count = {k: len(exp_food.get(k, set())) for k in range(max(exp_food)+1)}
# {0: 0, 1: 2, 2: 0, 3: 1, 4: 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Modify yours with count(). </p>
<pre><code>def exp(fridge):
    output = []
    exp_list = [i.expiration for i in fridge]
    for i in range(0, max(exp_list)+1):
        output.append(exp_list.count(i))
    return output
</code></pre>
</div>
<span class="comment-copy">is <code>expList</code> is the expiration date of each item ? from that list you want your o/p like you mentioned ?</span>
<span class="comment-copy">Can you mention first o/ps you are getting and exact o/p you need next ?</span>
<span class="comment-copy">My question has been already answered in the comments below. Thanks for the interest. expList is the exp date of each item, yes.</span>
<span class="comment-copy">Thanks a lot for the answer. Could you please describe your function a little bit  more ? I am having a hard time to understand it, even in debugger. Thanks :)</span>
<span class="comment-copy">Sure, <code>max(food.expiration for food in fridge)</code> will iterate over the food in the fridge, look at the expiration and return the maximum encountered expiration number. In your example this would be 4. In your example you want to return a list of length 5, you want to show how often expiration 0, 1 , 2 ,3 and 4 is returned (hence the +1). You then initiate a list with 5 zeroes in it using the line <code>[0] * max_expiration</code>. Then you iterate through the food in the fridge and update the index matching the expiration date accordingly.</span>
<span class="comment-copy">Thanks a lot. Now i understand :)</span>
<span class="comment-copy">Thanks for the answer. Could you please explain a bit, how does your code works ?</span>
<span class="comment-copy">I found a it would be wrong if the maximum of expiration is bigger then fridge's length. So I modified it from <code>range(0, len(fridge)+1)</code> to<code>range(0, max(exp_list)+1 )</code>.</span>
<span class="comment-copy">Anyway, create a list of all the expiration, and iterate it from 0 to the maximum expiration. count() is a function to count specific item in a list, so in the loop it will append counts of the expiration to output list in sequence, <code>output[0] = exp_list.count(0)</code> and so on.</span>
