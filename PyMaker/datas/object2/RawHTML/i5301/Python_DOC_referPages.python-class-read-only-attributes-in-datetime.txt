<div class="post-text" itemprop="text">
<p>I know that a quick way of setting an attribute to be private is to use <code>__</code> before an attribute (<strong>corrected later as this is actually for name mangling, not for restriction of access</strong>), or use @property</p>
<p>But, I found that for a python standard library module, for example, <a href="https://docs.python.org/3/library/datetime.html#module-datetime" rel="nofollow noreferrer">datetime</a>, this was set a different way?</p>
<p>To explain my question, please go to <a href="https://github.com/python/cpython/tree/3.6/Lib/datetime.py" rel="nofollow noreferrer">the source code of datetime</a></p>
<p>Let's take class <code>timedelta</code> as an example:</p>
<pre><code>class timedelta:
    ...
    ...
    ... 

timedelta.min = timedelta(-999999999)
timedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,
                          microseconds=999999)
timedelta.resolution = timedelta(microseconds=1)
</code></pre>
<p><strong>The class attributes was set outside of the class? why?</strong></p>
<p>and if I:</p>
<pre><code>import datetime
d= datetime.timedelta(days=1, hours=12)
print(d)
print(d.max)  # &gt;&gt;&gt; 999999999 days, 23:59:59.999999
print(type(d.max))  # &gt;&gt;&gt; &lt;class 'datetime.timedelta'&gt;

d.max = 1000  # regardless of the reason, if I just want to do this
# &gt;&gt;&gt; AttributeError: 'datetime.timedelta' object attribute 'max' is read-only
</code></pre>
<p><strong>I wonder where does this <code>AttributeError</code> coming from? I can not find in anywhere in the source code that this error message will be raised?</strong></p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The class attributes was set outside of the class? why?</p>
</blockquote>
<p><code>timedelta</code> doesn't exist when the body of the <code>timedelta</code> class is being executed. You have to execute all of the code in the <code>class timedelta:</code> block before the class object is created and can be used on its own.</p>
<blockquote>
<p>I wonder where does this AttributeError coming from? I can not find in anywhere in the source code that this error message will be raised?</p>
</blockquote>
<p>The <code>datetime</code> module is written in pure Python but <a href="https://github.com/python/cpython/blob/09dc2f508c8513e0466a759cc27a09108c1e55c2/Lib/datetime.py#L2412" rel="nofollow noreferrer">tries to use</a> a faster module <a href="https://github.com/python/cpython/blob/9f1b7b93f5f0ef589e7b272e127cacf4ce5d23f1/Modules/_datetimemodule.c" rel="nofollow noreferrer">written in C</a> if it can. The pure Python code works as you'd expect:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['_datetime'] = None  # prevent the C module from loading
&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; timedelta.min = 5
&gt;&gt;&gt; timedelta.min
5
</code></pre>
<p>The <code>timedelta</code> class has <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_flags" rel="nofollow noreferrer"><code>tp_flags</code></a> set to <a href="https://github.com/python/cpython/blob/9f1b7b93f5f0ef589e7b272e127cacf4ce5d23f1/Modules/_datetimemodule.c#L2698" rel="nofollow noreferrer"><code>Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE</code></a>. You can only set the attributes of objects which include the <a href="https://github.com/python/cpython/blob/ce5b0e9db1b9698e6ffc43ae41cf3a22ca5a6ba6/Objects/typeobject.c#L3224-L3228" rel="nofollow noreferrer"><code>Py_TPFLAGS_HEAPTYPE</code> flag</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is not the source code of the date-time module used by the CPython interpreter. The CPython source implements a lot of the standard library in C for performance reasons. They do provide Python-only implementations (which I believe are relied upon by PyPy in many instances, for example). </p>
<p>The source code for <code>datetime</code> is actually here:</p>
<p><a href="https://github.com/python/cpython/blob/3.6/Modules/_datetimemodule.c" rel="nofollow noreferrer">https://github.com/python/cpython/blob/3.6/Modules/_datetimemodule.c</a></p>
<p>Access is restricted at the C-level.</p>
<p>Note, double-underscore name-mangling does <em>name-mangling</em>, it doesn't restrict access.</p>
</div>
<span class="comment-copy">There are no private attributes in Python. double-underscore name-mangling does <i>name-mangling</i>, it doesn't restrict access.</span>
<span class="comment-copy">@juanpa.arrivillaga I do know that for a fact as <code>__private</code> is disguised under <code>_Class__private</code>, so it is not truly read-only . That makes me even more wondering how they set it up to make <code>timedelta.max</code> read-only</span>
<span class="comment-copy">@juanpa.arrivillaga Got it, thanks!</span>
<span class="comment-copy">Thank you so much for the clear explanation! As a beginner who just started to learn python not too long ago (and only python), I may have gone too far asking this question at this early stage.</span>
<span class="comment-copy">If I can ask a further question based on your answer. How can one tell if a .py file is trying to use a module written in C? From the datetime.py file, I can only see CPython in comments, but no else where</span>
<span class="comment-copy">@Code_Control_jxie0755: If you look at the very bottom of <code>datetime.py</code>, it has code that <code>try</code>s to do <code>from _datetime import *</code>. Using an underscore prefixed module name is the Python 3 standard for the C extension module backing a module implemented in pure Python, and the pattern of "define all the Python stuff, but then see if we can't replace most/all of it with equivalents from the accelerator module" is fairly common.</span>
<span class="comment-copy">@ShadowRanger Thank you!!! Very clear.</span>
