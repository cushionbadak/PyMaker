<div class="post-text" itemprop="text">
<p>I am trying to install simstring python wrapper in windows by <a href="https://github.com/Georgetown-IR-Lab/simstring" rel="nofollow noreferrer">https://github.com/Georgetown-IR-Lab/simstring</a>. For linux it works fine but for windows it is giving me error while installing.</p>
<pre><code>    D:\Users\source\repos&gt;python setup.py install
    running install
    running build
    running build_py
    running build_ext
    building '_simstring' extension
    C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I. -IC:\ProgramData\Anaconda3\include -IC:\ProgramData\Anaconda3\include "-IC:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\ATLMFC\include" "-IC:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\include" "-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\winrt" /EHsc /Tpexport.cpp /Fobuild\temp.win-amd64-3.6\Release\export.obj
    export.cpp
    export.cpp(7): fatal error C1083: Cannot open include file: 'iconv.h': No such file or directory
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.12.25827\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2
</code></pre>
<p>After this I included iconv.h in the project. But now it shows different error.</p>
<pre><code>running install
running build
running build_py
running build_ext
building '_simstring' extension
C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I. -IC:\ProgramData\Anaconda3\include -IC:\ProgramData\Anaconda3\include "-IC:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\ATLMFC\include" "-IC:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\include" "-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\winrt" /EHsc /Tpexport.cpp /Fobuild\temp.win-amd64-3.6\Release\export.obj
export.cpp
d:\users\aki\source\repos\simstring\cdbpp.h(101): warning C4267: 'initializing': conversion from 'size_t' to 'uint32_t', possible loss of data
export.cpp(37): error C2664: 'size_t libiconv(libiconv_t,const char **,size_t *,char **,size_t *)': cannot convert argument 2 from 'char **' to 'const char **'
export.cpp(37): note: Conversion loses qualifiers
export.cpp(140): note: see reference to function template instantiation 'bool iconv_convert&lt;std::string,std::wstring&gt;(libiconv_t,const source_type &amp;,destination_type &amp;)' being compiled
        with
        [
            source_type=std::string,
            destination_type=std::wstring
        ]
error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.12.25827\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2
</code></pre>
<p>Any help or guidance is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Ground notes</strong>:</p>
<ul>
<li><p>I managed to go with the build process but I got stuck at one point. I created <a href="https://stackoverflow.com/questions/48716223/compile-error-for-char-based-stl-stream-containers-in-visual-studio">[SO]: Compile error for (char based) STL (stream) containers in Visual Studio</a> (I spent quite some time on that issue). I got that working somehow, but there were other (similar?) errors when trying to build <em>simstring</em>, so I had to strip some (<em>Nix</em> based) code (that didn't compile) out</p></li>
<li><p><em>simstring</em> is written in <em>C++</em>. When <em>C++</em> (<em>C</em>) code is built, the result is <em>PE</em> or <em>Portable Executable</em> (<em>.exe</em>, <em>.dll</em>). Check <a href="https://stackoverflow.com/questions/34748913/lnk2005-error-in-clr-windows-form/34777349#34777349">[SO]: LNK2005 Error in CLR Windows Form (@CristiFati's answer)</a> for more details regarding how code gets transformed. When dealing with an <em>.exe</em> that depends on (loads) <em>.dll</em>s, there are certain restrictions:</p>
<ul>
<li><p>The <em>.exe</em> (in this case <em>python.exe</em>)'s architecture (32 <em>vs.</em> 64 bit or (<em>x86</em> <em>vs.</em> <em>x64</em> (or <em>AMD64</em>))) must match the one of any <em>.dll</em> that it loads (and other <em>.dll</em> that a loaded <em>.dll</em> loads, and so on), so all the <em>dll</em>s in the dependency tree, otherwise the <em>.dll</em> won't load</p></li>
<li><p>The platform (<em>Debug</em> <em>vs.</em> <em>Release</em>) should match in some cases. Here's what could happen if it didn't: <a href="https://stackoverflow.com/questions/8528437/when-using-fstream-in-a-library-i-get-linker-errors-in-the-executable/41558269#41558269">[SO]: When using fstream in a library I get linker errors in the executable (@CristiFati's answer)</a>, but I don't think that we are in that situation</p></li>
<li>The build tools should also match in some (other) cases. Examples:

<ul>
<li>Compiler type (<a href="https://stackoverflow.com/questions/41862030/python-extensions-with-c-staticforward/42793268#42793268">[SO]: Python extensions with C: staticforward (@CristiFati's answer)</a>)</li>
<li>The <em>CRT runtime</em> (<a href="https://stackoverflow.com/questions/35116437/errors-when-linking-to-protobuf-3-on-msvc-2013/35118400#35118400">[SO]: Errors when linking to protobuf 3 on MSVC 2013 (@CristiFati's answer)</a>)</li>
<li>The <em>CRT runtime</em> <strong>version</strong> is important in our case. Check <a href="https://wiki.python.org/moin/WindowsCompilers" rel="nofollow noreferrer">[Python.Wiki]: WindowsCompilers</a> for compatibilities between <em>Python</em> and <em>VStudio</em> versions. Note that this only applies for <em>Python</em> versions downloaded and installed (if you built your <em>Python</em> from sources, then you should use the same build tool - but I guess it's not the case here)

<ul>
<li>I see you are using <em>VStudio 2017</em>, so the compatible versions are <em>Python 3.5</em> and <em>Python 3.6</em> <sup><strong>1</strong></sup>. I have ~10 <em>Python</em> installations on my machine (some installed, some built by me - with different compiler; most of them are <em>x64</em>, I also have some <em>VEnv</em>s, but that shouldn't make any difference). I also have 5 <em>VStudio</em> versions installed, in my case, <em>setup.py</em> automatically selects <em>VStudio 2015</em> (but it's ok, since as <em>VStudio 2017</em> it has compiler <strong>v14.0</strong>)</li>
</ul></li>
</ul></li>
<li><em>simstring</em> depends on <em>libiconv</em> which also comes as a <em>.dll</em> (actually there are more, but we only care about one). Checking the <em>.dll</em> (see below) with <a href="http://dependencywalker.com" rel="nofollow noreferrer">Dependency Walker</a> reveals that it's <em>x86</em> <sup><strong>2</strong></sup>. That means that either:

<ul>
<li><em>Python</em> 32bit (<em>x86</em>) should be used. This is the variant that I'm going to go with. From <sup><strong>1</strong></sup> and <sup><strong>2</strong></sup>, the only available version on my machine is <em>Python 3.6 x86</em> (<em>Python 3.5</em> is my version of choice, I also have it in 32bit format, but I messed it up and didn't reinstall it)</li>
<li>Build <em>libiconv</em> from source, and get rid of restriction <sup><strong>2</strong></sup>. But, that could take time, and it's outside the scope of the current question. If there will be a question about building it, I'll take some time and give it a shot, as I enjoy that kind of tasks (<a href="https://stackoverflow.com/questions/44450813/how-to-build-a-dll-version-of-libjpeg-9b/44469099#44469099">[SO]: How to build a DLL version of libjpeg 9b? (@CristiFati's answer)</a>)</li>
</ul></li>
</ul></li>
</ul>
<p><strong>Walkthrough</strong>:</p>
<ul>
<li>Create a dir and <em>cd</em> to it (should be empty). This will be the <em>%ROOT_DIR%</em>, and all the paths that I'm going to use will be relative to it (except of course for absolute ones), and this will be the default dir (when unspecified)</li>
<li>Download <em>simstring</em> sources (<a href="https://github.com/Georgetown-IR-Lab/simstring/archive/master.zip" rel="nofollow noreferrer">[GitHub]: Georgetown-IR-Lab/simstring - simstring-master.zip</a>)</li>
<li>Unzip the archive - it will do it in a dir <em>simstring-master</em> (will be automatically created)</li>
<li>Create a dir <em>libiconv</em>. Inside it, download:

<ol>
<li><a href="http://gnuwin32.sourceforge.net/downlinks/libiconv-lib-zip.php" rel="nofollow noreferrer">[SourceForge]: gnuwin32/GnuWin - libiconv-1.9.2-1-lib.zip</a></li>
<li><a href="http://gnuwin32.sourceforge.net/downlinks/libiconv-bin-zip.php" rel="nofollow noreferrer">[SourceForge]: gnuwin32/GnuWin - libiconv-1.9.2-1-bin.zip</a></li>
<li>Extract needed stuff from these files:

<ul>
<li>From <em>#1.</em>:

<ul>
<li><em>include</em> dir - used at <em>compile</em> phase</li>
<li><em>lib</em> dir - used at <em>link</em> phase</li>
<li>Both phases are performed by <em>setup.py</em> (below)</li>
</ul></li>
<li>From <em>#2.</em>:

<ul>
<li><em>bin</em> dir - used at runtime (when using (importing) the module)</li>
</ul></li>
</ul></li>
</ol></li>
<li><em>cd</em> to the <em>simstring-master</em> dir. To build the extension, I'm using <em>setup.py</em>'s <em>build_ext</em> command (invoked recursively by <em>install</em> - as seen in your output): <a href="https://docs.python.org/3/distutils/apiref.html#module-distutils.command.build_ext" rel="nofollow noreferrer">[Python 3]: distutils.command.build_ext - Build any extensions in a package</a></li>
<li><p>Running <em>build_ext</em>, will yield your error:</p>
<blockquote>
<pre><code>export.cpp(7): fatal error C1083: Cannot open include file: 'iconv.h': No such file or directory
</code></pre>
</blockquote>
<p>That is because <em>Python</em> build system doesn't know what we did (in the <em>libiconv</em> dir). To let it know, pass the:</p>
<ol>
<li><strong><em>-I</em></strong> (<em>--include-dirs</em>) - will be translated to <a href="https://docs.microsoft.com/en-us/cpp/build/reference/i-additional-include-directories?view=vs-2015" rel="nofollow noreferrer">[MS.Docs]: /I (Additional include directories)</a></li>
<li><strong><em>-L</em></strong> (<em>--library-dirs</em>) - will be translated to <a href="https://docs.microsoft.com/en-us/cpp/build/reference/libpath-additional-libpath?view=vs-2015" rel="nofollow noreferrer">[MS.Docs]: /LIBPATH (Additional Libpath)</a></li>
<li><strong><em>-l</em></strong> (<em>--libraries</em>) - will be translated to <a href="https://docs.microsoft.com/en-us/cpp/build/reference/link-input-files?view=vs-2015" rel="nofollow noreferrer">[MS.Docs]: LINK Input Files</a></li>
</ol>
<p><br/>flags (<code>python setup.py build_ext --help</code> will display all of them). For now, don't pass <em>#2.</em> and <em>#3.</em> because we won't get to the <em>link</em> phase (where they are required):</p>
<blockquote>
<pre><code>(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;"e:\Work\Dev\VEnvs\py36x86_test\Scripts\python.exe" setup.py build_ext -I"../libiconv/include"
running build_ext
building '_simstring' extension
C:\Install\x86\Microsoft\Visual Studio Community\2015\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I. -I../libiconv/include -Ic:\Install\x86\Python\Python\3.6\include -Ic:\Install\x86\Python\Python\3.6\include "-IC:\Install\x86\Microsoft\Visual Studio Community\2015\VC\INCLUDE" "-IC:\Install\x86\Microsoft\Visual Studio Community\2015\VC\ATLMFC\INCLUDE" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\winrt" /EHsc /Tpexport.cpp /Fobuild\temp.win32-3.6\Release\export.obj
export.cpp
export.cpp(112): warning C4297: 'writer::~writer': function assumed not to throw an exception but does
export.cpp(112): note: destructor or deallocator has a (possibly implicit) non-throwing exception specification
export.cpp(126): warning C4297: 'writer::~writer': function assumed not to throw an exception but does
export.cpp(126): note: destructor or deallocator has a (possibly implicit) non-throwing exception specification
export.cpp(37): error C2664: 'size_t libiconv(libiconv_t,const char **,size_t *,char **,size_t *)': cannot convert argument 2 from 'char **' to 'const char **'
export.cpp(37): note: Conversion loses qualifiers
export.cpp(140): note: see reference to function template instantiation 'bool iconv_convert&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;,std::wstring&gt;(libiconv_t,const source_type &amp;,destination_type &amp;)' being compiled
with
[
    source_type=std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;,
    destination_type=std::wstring
]
error: command 'C:\\Install\\x86\\Microsoft\\Visual Studio Community\\2015\\VC\\BIN\\cl.exe' failed with exit status 2
</code></pre>
</blockquote></li>
<li><p>Things to do (found out fixing the errors one by one, only <em>export.cpp</em> required changes):</p>
<ol>
<li><code>#define ICONV_CONST const</code> (<em>cl.exe</em> doesn't automatically cast <em>const</em>ness)</li>
<li><code>#define __SIZEOF_WCHAR_T__ 2</code> (as <code>sizeof(wchar_t)</code> is <strong><em>2</em></strong>)</li>
<li>Strip out the code that doesn't compile (that I talked about at the beginning): <em>STL</em> containers with <em>4 byte</em> <em>char</em>s don't compile on <em>Win</em>, wanted to fix the code, and when <em>Win</em> will support such <em>char</em>s, the code will compile <em>OOTB</em>, but I wasn't able to, so I had to do whatever was done for <em>OSX</em>. As a consequence, <code>#ifdef __APPLE__</code> should be replaced by <code>#if defined(__APPLE__) || defined(WIN32)</code> (5 occurences)</li>
</ol>
<p><br/>Note that #1. and #2. could (should) be done either by cmdline (<strong><em>-D</em></strong> flag, but I wasn't able to specify a value for a defined flag), or in <em>setup.py</em> (so they are only defined once even if they need to be declared in lots of files), but I didn't spend too much time on it, so I'm replacing them directly in the source code.</p>
<p><br/>Either apply the changes manually, either save:</p>
<pre><code>--- export.cpp.orig 2016-11-30 18:53:32.000000000 +0200
+++ export.cpp  2018-02-14 13:36:31.317953200 +0200
@@ -19,9 +19,18 @@
 #endif/*USE_LIBICONV_GNU*/

 #ifndef ICONV_CONST
+#if defined (WIN32)
+#define ICONV_CONST const
+#else
 #define ICONV_CONST
+#endif
 #endif/*ICONV_CONST*/

+#if defined (WIN32)
+#define __SIZEOF_WCHAR_T__ 2
+#endif
+
+
 template &lt;class source_type, class destination_type&gt;
 bool iconv_convert(iconv_t cd, const source_type&amp; src, destination_type&amp; dst)
 {
@@ -269,7 +278,7 @@
     iconv_close(bwd);
 }

-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(WIN32)
 #include &lt;cassert&gt;
 #endif

@@ -283,7 +292,7 @@
         retrieve_thru(dbr, query, this-&gt;measure, this-&gt;threshold, std::back_inserter(ret));
         break;
     case 2:
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(WIN32)
 #if __SIZEOF_WCHAR_T__ == 2
         retrieve_iconv&lt;wchar_t&gt;(dbr, query, UTF16, this-&gt;measure, this-&gt;threshold, std::back_inserter(ret));
 #else
@@ -294,7 +303,7 @@
 #endif
         break;
     case 4:
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(WIN32)
 #if __SIZEOF_WCHAR_T__ == 4
         retrieve_iconv&lt;wchar_t&gt;(dbr, query, UTF32, this-&gt;measure, this-&gt;threshold, std::back_inserter(ret));
 #else
@@ -317,7 +326,7 @@
         std::string qstr = query;
         return dbr.check(qstr, translate_measure(this-&gt;measure), this-&gt;threshold);
     } else if (dbr.char_size() == 2) {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(WIN32)
 #if __SIZEOF_WCHAR_T__ == 2
         std::basic_string&lt;wchar_t&gt; qstr;
 #else
@@ -333,7 +342,7 @@
         iconv_close(fwd);
         return dbr.check(qstr, translate_measure(this-&gt;measure), this-&gt;threshold);
     } else if (dbr.char_size() == 4) {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(WIN32)
 #if __SIZEOF_WCHAR_T__ == 4
         std::basic_string&lt;wchar_t&gt; qstr;
 #else
</code></pre>
<p>as <em>simstring_win.diff</em>. That is a <em>diff</em>. See <a href="https://stackoverflow.com/questions/42989471/run-debug-a-django-applications-unittests-from-the-mouse-right-click-context-me/42989490#42989490">[SO]: Run/Debug a Django application's UnitTests from the mouse right click context menu in PyCharm Community Edition? (@CristiFati's answer)</a> (<strong>Patching <em>utrunner</em></strong> section) for how to apply patches on <em>Win</em> (basically, every line that starts with <strong>one "+"</strong> sign goes in, and every line that starts with <strong>one "-"</strong> sign goes out). I am using <em>Cygwin</em>, <em>btw</em>. <br/>I also submitted this patch to <a href="https://github.com/Georgetown-IR-Lab/simstring/pull/2" rel="nofollow noreferrer"><strong>[GitHub]: Georgetown-IR-Lab/simstring - Support for Win</strong></a>, and <strong>it was merged today</strong> (<em>180222</em>).</p>
<blockquote>
<pre><code>(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;"c:\Install\x64\Cygwin\Cygwin\AllVers\bin\patch.exe" -i "../simstring_win.diff"
patching file export.cpp

(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;rem Looking at export.cpp content, you'll notice the changes

(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;"e:\Work\Dev\VEnvs\py36x86_test\Scripts\python.exe" setup.py build_ext  -I"../libiconv/include" -L"../libiconv/lib" -llibiconv
running build_ext
building '_simstring' extension
C:\Install\x86\Microsoft\Visual Studio Community\2015\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I. -I../libiconv/include -Ic:\Install\x86\Python\Python\3.6\include -Ic:\Install\x86\Python\Python\3.6\include "-IC:\Install\x86\Microsoft\Visual Studio Community\2015\VC\INCLUDE" "-IC:\Install\x86\Microsoft\Visual Studio Community\2015\VC\ATLMFC\INCLUDE" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\winrt" /EHsc /Tpexport.cpp /Fobuild\temp.win32-3.6\Release\export.obj
export.cpp
export.cpp(121): warning C4297: 'writer::~writer': function assumed not to throw an exception but does
export.cpp(121): note: destructor or deallocator has a (possibly implicit) non-throwing exception specification
export.cpp(135): warning C4297: 'writer::~writer': function assumed not to throw an exception but does
export.cpp(135): note: destructor or deallocator has a (possibly implicit) non-throwing exception specification
C:\Install\x86\Microsoft\Visual Studio Community\2015\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I. -I../libiconv/include -Ic:\Install\x86\Python\Python\3.6\include -Ic:\Install\x86\Python\Python\3.6\include "-IC:\Install\x86\Microsoft\Visual Studio Community\2015\VC\INCLUDE" "-IC:\Install\x86\Microsoft\Visual Studio Community\2015\VC\ATLMFC\INCLUDE" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\winrt" /EHsc /Tpexport_wrap.cpp /Fobuild\temp.win32-3.6\Release\export_wrap.obj
export_wrap.cpp
C:\Install\x86\Microsoft\Visual Studio Community\2015\VC\BIN\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:c:\Install\x86\Python\Python\3.6\Libs /LIBPATH:../libiconv/lib /LIBPATH:e:\Work\Dev\VEnvs\py36x86_test\libs /LIBPATH:e:\Work\Dev\VEnvs\py36x86_test\PCbuild\win32 "/LIBPATH:C:\Install\x86\Microsoft\Visual Studio Community\2015\VC\LIB" "/LIBPATH:C:\Install\x86\Microsoft\Visual Studio Community\2015\VC\ATLMFC\LIB" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.16299.0\ucrt\x86" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\lib\um\x86" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.16299.0\um\x86" libiconv.lib /EXPORT:PyInit__simstring build\temp.win32-3.6\Release\export.obj build\temp.win32-3.6\Release\export_wrap.obj /OUT:build\lib.win32-3.6\_simstring.cp36-win32.pyd /IMPLIB:build\temp.win32-3.6\Release\_simstring.cp36-win32.lib
   Creating library build\temp.win32-3.6\Release\_simstring.cp36-win32.lib and object build\temp.win32-3.6\Release\_simstring.cp36-win32.exp
Generating code
Finished generating code

(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;dir /b "build\lib.win32-3.6"
_simstring.cp36-win32.pyd
</code></pre>
</blockquote></li>
<li><p>Finally, it built. the <em>.pyd</em> is just a <em>.dll</em>. This is how it looks like in <em>Dependency Walker</em>:</p>
<p><a href="https://i.stack.imgur.com/D8GsP.jpg" rel="nofollow noreferrer"><img alt="_simstring.pyd" src="https://i.stack.imgur.com/D8GsP.jpg"/></a></p></li>
<li><p>Let's try to see if we can use it:</p>
<blockquote>
<pre><code>(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;"e:\Work\Dev\VEnvs\py36x86_test\Scripts\python.exe" sample.py
Traceback (most recent call last):
  File "E:\Work\Dev\StackOverflow\q048528041\simstring-master\simstring.py", line 18, in swig_import_helper
    fp, pathname, description = imp.find_module('_simstring', [dirname(__file__)])
  File "e:\Work\Dev\VEnvs\py36x86_test\lib\imp.py", line 296, in find_module
    raise ImportError(_ERR_MSG.format(name), name=name)
ImportError: No module named '_simstring'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "sample.py", line 3, in &lt;module&gt;
    import simstring
  File "E:\Work\Dev\StackOverflow\q048528041\simstring-master\simstring.py", line 28, in &lt;module&gt;
    _simstring = swig_import_helper()
  File "E:\Work\Dev\StackOverflow\q048528041\simstring-master\simstring.py", line 20, in swig_import_helper
    import _simstring
ModuleNotFoundError: No module named '_simstring'
</code></pre>
</blockquote>
<p>That is because when importing <em>simstring</em>, which in turn imports <em>_simstring</em> (the <em>.pyd</em>), <em>Python</em> doesn't find it. To fix this:</p>
<ul>
<li>Add the <em>.pyd</em> path to <em>%PYTHONPATH%</em></li>
<li>As seen in the pic, the <em>.pyd</em> depends on <em>libiconv2.dll</em>, so the <em>OS</em> must know where to look for it. Simplest way is to add its path to <em>%PATH%</em> (<a href="https://docs.microsoft.com/en-gb/windows/desktop/Dlls/dynamic-link-library-search-order" rel="nofollow noreferrer">[MS.Docs]: Dynamic-Link Library Search Order</a>)</li>
</ul>
<blockquote>
<pre><code>(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;set PYTHONPATH=%PYTHONPATH%;build\lib.win32-3.6

(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;set PATH=%PATH%;..\libiconv\bin

(py36x86_test) E:\Work\Dev\StackOverflow\q048528041\simstring-master&gt;"e:\Work\Dev\VEnvs\py36x86_test\Scripts\python.exe" sample.py
('Barack Hussein Obama II',)
('James Gordon Brown',)
()
('Barack Hussein Obama II',)
</code></pre>
</blockquote></li>
</ul>
<p><strong>Final notes</strong>:</p>
<ul>
<li>There is some output from the module, it's identical to the one on <em>Lnx</em> (<em>Ubtu</em>) (where I also built it - there I encountered no problem), I'm not sure whether it's <em>semantically</em> correct or not</li>
<li>I didn't run <em>setup.py</em>'s <strong><em>install</em></strong> command (and I'm not gonna), one thing that I can think of that could go wrong (although I'm not sure it will), is not copying/including <em>libiconv2.dll</em> into the pkg. If so, you'll probably need to modify <em>setup.py</em> (changes should be minor)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Besides my other response about building under Cygwin, I've made a few other changes to allow this to build and install seamlessly with Windows using Anaconda.  Turns out conda can install iconv very easily.  </p>
<p>Much of this is based on the work that ChristiFati added in this thread, this change intends to simplify the steps and potential installation.</p>
<p><s>This change currently exists in my own fork.  Steps are in the README here.  I have also submitted a Pull Request for this.</s></p>
<p>UPDATE: This pull request has now been taken into the Georgetown repo so you can get it herre:
<a href="https://github.com/Georgetown-IR-Lab/simstring" rel="nofollow noreferrer">https://github.com/Georgetown-IR-Lab/simstring</a></p>
<p>As a side note, one of the motivations for doing this is making this repo easier to set up: <a href="https://github.com/Georgetown-IR-Lab/QuickUMLS" rel="nofollow noreferrer">https://github.com/Georgetown-IR-Lab/QuickUMLS</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I was able to build that repo under Cygwin.  The packages libiconv-devel and python3-devel both need to be installed.</p>
<p>After that, I had one more change that I made to ensure that libiconv would be available for Windows build.  I made that single commit here:</p>
<p><a href="https://github.com/burgersmoke/simstring" rel="nofollow noreferrer">https://github.com/burgersmoke/simstring</a></p>
</div>
<span class="comment-copy"><i>iconv</i> is <i>Ux</i> based. Did you install the port for <i>Win</i>?</span>
<span class="comment-copy">Yes, i did install it for windows by following <a href="http://gnuwin32.sourceforge.net/packages/libiconv.htm" rel="nofollow noreferrer">gnuwin32.sourceforge.net/packages/libiconv.htm</a></span>
<span class="comment-copy">I really encourage you to submit PR as I was in touch with one of the contributor (<a href="https://github.com/soldni" rel="nofollow noreferrer">github.com/soldni</a>) and he is willing to accept PR.</span>
<span class="comment-copy">Thank you for letting me know. Done: <a href="https://github.com/Georgetown-IR-Lab/simstring/pull/2" rel="nofollow noreferrer">github.com/Georgetown-IR-Lab/simstring/pull/2</a>.</span>
<span class="comment-copy">Thanks for your contribution.</span>
