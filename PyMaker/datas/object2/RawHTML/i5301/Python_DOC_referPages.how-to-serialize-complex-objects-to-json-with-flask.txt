<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3768895/how-to-make-a-class-json-serializable">How to make a class JSON serializable</a>
<span class="question-originals-answer-count">
                    25 answers
                </span>
</li>
</ul>
</div>
<p>I'm new with Flask, and I'm having some problem trying to return an object which contains another object instance as field, like the follows:</p>
<pre><code>class Park(object):
    park_id = 0
    address = ""
    services = []
    position = None

    def __init__(self, park_id, address, services, latitude, longitude):
        self.park_id = park_id
        self.address = address
        self.services = services
        self.position = Point(latitude, longitude)
</code></pre>
<p>where the Point class is simply the follow:</p>
<pre><code>class Point(object):
    latitude = None
    longitude = None

    def __init__(self, latitude, longitude):
        self.latitude = latitude
        self.longitude = longitude
</code></pre>
<p>when I try to return a Park instance</p>
<pre><code>@app.route('/')
def test():
    park = Park(....)
    return jsonify(park])
</code></pre>
<p>I obtain this error: <code>TypeError: Object of type 'Park' is not JSON serializable</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python's default json module doesn't serialize complex objects by default.</p>
<p>You can use a library like <a href="http://jsonpickle.github.io/" rel="nofollow noreferrer">jsonpickle</a>; or simply implement a <code>to_dict</code> method in your <code>Park</code> class that transforms your objects into a dictionary, so you can call <code>jsonify(park.to_dict())</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think Willem is right, in that you first need to convert your class into a JSON like object, such as a <code>dict</code>. If you want to just convert the attributes of your <code>Point</code> class, you can use either <code>__dict__</code> special attribute or the <code>vars()</code> builtin.</p>
<p>Below is a quick function to convert using <code>vars</code>. Note that I've hard coded it to check for the <code>Point</code> class, but this could easily be extended to be more generic. This also only checks one level deep, but could be written to recursive as deep as needed. You could also convert this function into a method of the <code>Park</code> class itself to keep everything together / more object orientated.</p>
<pre><code>def convert_park_to_dict(park):
    park_dict = {}
    for attr in vars(park):
        attr_value = getattr(park, attr)
        if isinstance(attr_value, Point):
            point_dict = vars(attr_value)
            park_dict[attr] = point_dict
        else:
            park_dict[attr] = attr_value
    return park_dict

@app.route('/')
def test():
    park = Park(1, 'my_house', ['swings', 'shop'], 50, 60)
    park_dict = convert_park_to_dict(park)
    return jsonify(park_dict)
</code></pre>
<p>):</p>
<p>Read a bit more about <code>__dict__</code> <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">I think you first have to think how you will convert a <code>Point</code> instance to a JSON object, like <code>{"latitude": 123.4, "longitude": 567.8}</code>?</span>
