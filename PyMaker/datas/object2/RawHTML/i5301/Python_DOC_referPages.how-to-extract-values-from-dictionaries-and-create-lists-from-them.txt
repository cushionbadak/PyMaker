<div class="post-text" itemprop="text">
<p>I have a list of dictionaries:</p>
<pre><code>dictionaries = [
    {'id': 1, 'name': 'test1', 'description': 'foo'}, 
    {'id': 2, 'name': 'test2', 'description': 'bar'}
]
</code></pre>
<p>I would like to separate the values from the keys in each dictionary, making a list of lists like this:</p>
<pre><code>[(1 ,'test1', 'foo'), (2, 'test2', 'bar')]
</code></pre>
<p>I have the following code to perform this...</p>
<pre><code>values_list = []

for dict in dictionaries:
    values_list.append(list(dict.values()))
</code></pre>
<p>When I run this code in my app, I get:</p>
<blockquote>
<p>TypeError: list() takes 0 positional arguments but 1 was given</p>
</blockquote>
<p>What's the right way to do this type of list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>That can be done with a couple of <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehensions</a> like:</p>
<h3>Code:</h3>
<pre><code>def get_values_as_tuple(dict_list, keys):
    return [tuple(d[k] for k in keys) for d in dict_list]
</code></pre>
<h3>How?</h3>
<p>How does this work? This is a nested <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehension</a>.  Let's go from the inside out, and start with:</p>
<pre><code>tuple(d[k] for k in keys)
</code></pre>
<p>This creates a tuple of all of the elements in <code>d</code> that are specified via <code>k</code> in <code>keys</code>.  So, that is nice, but what the heck are <code>d</code>, <code>k</code> and <code>keys</code>?</p>
<ul>
<li><p><code>keys</code> is passed to the function, and are the keys we will look for in our dicts.</p></li>
<li><p><code>k</code> is the individual values in <code>keys</code> from <code>k in keys</code>.</p></li>
<li><p><code>d</code> is the individual dicts in <code>dict_list</code> from <code>d in dict_list</code>.</p></li>
</ul>
<p>The outer comprehension builds a list of the tuples discussed above:</p>
<pre><code>[tuple(d[k] for k in keys) for d in dict_list]
</code></pre>
<h3>Test Code:</h3>
<pre><code>dictionaries = [{'id': 1, 'name': 'test1', 'description': 'foo'},
                {'id': 2, 'name': 'test2', 'description': 'bar'}]


def get_values_as_tuple(dict_list, keys):
    return [tuple(d[k] for k in keys) for d in dict_list]

print(get_values_as_tuple(dictionaries, ('id', 'name', 'description')))
</code></pre>
<h3>Results:</h3>
<pre><code>[(1, 'test1', 'foo'), (2, 'test2', 'bar')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hi If you want to convert a list of tuples it so easy with list comprehension technique or the code which you are using it is for list of list but you expected solution looks like list of tuples</p>
<pre><code>dictionaries = [{'id': 1, 'name': 'test1', 'description': 'foo'}, 
{'id': 2, 'name': 'test2', 'description': 'bar'}]
values_list = []

for dict in dictionaries:
    values_list.append(tuple(dict.values()))

data = [tuple(dict.values()) for dict in dictionaries]   

print(values_list)
print(data)
</code></pre>
<p>This might help you which will give you output like this</p>
<pre><code>[(1, 'test1', 'foo'), (2, 'test2', 'bar')]
[(1, 'test1', 'foo'), (2, 'test2', 'bar')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [14]: dictionaries = [{'id': 1, 'name': 'test1', 'description': 
'foo'}, 
   ....: {'id': 2, 'name': 'test2', 'description': 'bar'}]

In [15]: [tuple(d.values()) for d in dictionaries]
Out[15]: [('foo', 1, 'test1'), ('bar', 2, 'test2')]
</code></pre>
<p>Hi, Trey,<code>Dict</code> is disordered in python, so the values in the <code>tuple</code> may be disordered too.If you want a ordered result, you may try <code>OrderedDict</code> in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.x:</p>
<pre><code>from collections import namedtuple
dictionaries = [
    {'id': 1, 'name': 'test1', 'description': 'foo'}, 
    {'id': 2, 'name': 'test2', 'description': 'bar'}
]
main_list = []
keys = namedtuple("keys",['id','name','description'])
for val in dictionaries:
    data = keys(**val)
    main_list.append((data.id,data.name,data.description))
print(main_list)
&gt;&gt;&gt;[(1, 'test1', 'foo'), (2, 'test2', 'bar')]
</code></pre>
<p>Python 3.x:</p>
<pre><code>dictionaries = [
    {'id': 1, 'name': 'test1', 'description': 'foo'}, 
    {'id': 2, 'name': 'test2', 'description': 'bar'}
]
data = [tuple(val.values()) for val in dictionaries]
print(data)
&gt;&gt;&gt;[(1, 'test1', 'foo'), (2, 'test2', 'bar')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Code:</strong> </p>
<pre><code>dicts = [
        {'id': 1, 'name': 'test1', 'description': 'foo'}, 
        {'id': 2, 'name': 'test2', 'description': 'bar'}
        ]

v_list = []

for d in dicts:
    v_list.append( tuple( d.values() ) )

print( v_list )
</code></pre>
<p><strong>Results:</strong></p>
<pre><code>[(1, 'test1', 'foo'), (2, 'test2', 'bar')]
</code></pre>
</div>
<span class="comment-copy"><code>[tuple(d.values()) for d in dictionaries]</code></span>
<span class="comment-copy">Your (posted) code also has no error. Have you copied the trace from somewhere else?</span>
<span class="comment-copy">Probably somewhere in the full code you replace the python built-in <code>list()</code> function with your own definition of <code>list()</code> function that takes no argument. That explain why you get the exception</span>
<span class="comment-copy">@caramel1995 thanks for that tip. I'm going to double check the whole app...</span>
<span class="comment-copy">Thanks for the tip, I tried this out and it works well. I'm not sure exactly how, though. If I understand correctly, the function you have defined is saying "look in each dictionary from the dictionary-list provided in the first argument. Pull out all the keys as indicated in the second argument and make a tuple from what is left." What does the "[k]" code mean? Is that a shorthand for saying "remove k from d"?</span>
<span class="comment-copy"><code>dict</code> is already a builtin function.</span>
<span class="comment-copy">so sorry i used it as a variable from the original question</span>
<span class="comment-copy">Thanks for the fast response!</span>
