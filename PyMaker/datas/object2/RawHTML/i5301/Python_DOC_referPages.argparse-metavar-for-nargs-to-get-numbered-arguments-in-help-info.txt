<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse document</a>, there is an example using <code>nargs='+'</code>:</p>
<pre><code>parser.add_argument('integers', metavar='N', type=int, nargs='+')
</code></pre>
<p>The corresponding help information is </p>
<pre><code>usage: prog.py [-h] [--sum] N [N ...]
</code></pre>
<p>Is it possible to set the <code>metavar</code> such that the help info looks like this?</p>
<pre><code>usage: prog.py [-h] [--sum] N1 [N2 ...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>metavar</code> can be tuple, as in</p>
<pre><code>In [26]: parser = argparse.ArgumentParser()
In [27]: a=parser.add_argument('--integers', metavar=('N1','N2'), type=int, nargs='+');
In [28]: parser.print_help()
usage: ipython3 [-h] [--integers N1 [N2 ...]]

optional arguments:
  -h, --help            show this help message and exit
  --integers N1 [N2 ...]
</code></pre>
<p>But that only works for optionals (flagged arguments), not positionals. I'm not exactly sure why, though I may have dug into this issue before.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#metavar" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#metavar</a></p>
<hr/>
<p>With the positional, the error stack includes:</p>
<pre><code>/usr/lib/python3.5/argparse.py in _format_action_invocation(self, action)
    542         if not action.option_strings:
    543             default = self._get_default_metavar_for_positional(action)
--&gt; 544             metavar, = self._metavar_formatter(action, default)(1)
    545             return metavar
    546 
</code></pre>
<p>A <code>positional</code> doesn't have <code>option_strings</code> (or its empty), so it's using the <code>metavar, = ...</code> unpacking idiom to ask for just one string.  Hence the error: <code>ValueError: too many values to unpack (expected 1)</code>.</p>
<p>So expecting only one <code>metavar</code> variable is quite intentional, but I'm not sure about the rational.  Maybe it's because it would be harder to tell where one positional ends and the next starts in the <code>usage</code>:</p>
<pre><code>In [34]: parser = argparse.ArgumentParser()
In [35]: parser.add_argument('foo', type=int, nargs=2);
In [36]: parser.add_argument('bar', type=int, nargs='+');
In [38]: parser.print_usage()
usage: ipython3 [-h] foo foo bar [bar ...]
</code></pre>
<p>I looked at this a couple of years ago, <a href="https://bugs.python.org/issue14074" rel="nofollow noreferrer">https://bugs.python.org/issue14074</a>.  Looks like there can be problems with the <code>usage</code>, help-lines and error message.</p>
<hr/>
<p>Actually the problem isn't in the <code>usage</code>, it's in formatting the help lines:</p>
<pre><code>In [39]: parser = argparse.ArgumentParser()
In [40]: a=parser.add_argument('integers', metavar=('N1','N2'), type=int, nargs='+')
In [41]: parser.print_usage()
usage: ipython3 [-h] N1 [N2 ...]
</code></pre>
<p>The normal help line for a positional just shows one symbol, not the <code>N [N ...]</code> of the usage:</p>
<pre><code>In [43]: parser.print_help()
usage: ipython3 [-h] N [N ...]

positional arguments:
  N
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would make a custom <code>HelpFormatter</code> and use that.  Below is a quick hack.</p>
<pre><code>from argparse import HelpFormatter, ZERO_OR_MORE, ONE_OR_MORE


class CustomHelpFormatter(HelpFormatter):
    def _format_args(self, action, default_metavar):
        get_metavar = self._metavar_formatter(action, default_metavar)
        if action.nargs == ZERO_OR_MORE:
            return '[%s1 [%s2 ...]]' % get_metavar(2)
        elif action.nargs == ONE_OR_MORE:
            return '%s1 [%s2 ...]' % get_metavar(2)
        else:
            return super()._format_args(action, default_metavar)


&gt;&gt;&gt; parser = argparse.ArgumentParser(formatter_class=CustomHelpFormatter)
&gt;&gt;&gt; parser.add_argument('integers', metavar='N', type=int, nargs='+')
&gt;&gt;&gt; parser.parse_args(['--help'])
</code></pre>
</div>
