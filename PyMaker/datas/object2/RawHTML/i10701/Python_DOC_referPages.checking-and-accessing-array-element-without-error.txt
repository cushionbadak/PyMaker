<div class="post-text" itemprop="text">
<p>I have array, which I want to validate, 2nd item of that array. There are 2 ways which comes to my mind</p>
<ol>
<li><p>Check for <code>array</code> length</p>
<pre><code>if len(array) &gt; 1:
    # Process for array[1]
</code></pre></li>
<li><p>Catch <code>IndexError</code> and process in <code>else</code> block.</p>
<pre><code>try:
    array[1]
except IndexError:
    pass
else:
    # Process for array[1]
</code></pre></li>
</ol>
<p>Which one is better?</p>
<p>If you have any other option, I am ready to learn :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python encourages <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP coding style</a>:</p>
<blockquote>
<p><strong>EAFP</strong><br/>
  Easier to ask for forgiveness than permission. This common Python
  coding style assumes the existence of valid keys or attributes and
  catches exceptions if the assumption proves false. This clean and fast
  style is characterized by the presence of many <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow"><code>try</code></a> and <a href="https://docs.python.org/3/reference/compound_stmts.html#except" rel="nofollow"><code>except</code></a>
  statements. The technique contrasts with the <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow">LBYL</a> style common to many
  other languages such as C.</p>
</blockquote>
<p>This means the <code>try</code> / <code>except</code> is perfectly fine, but you do not have to use the <code>else</code> clause, simply do:</p>
<pre><code>try:
    # Process for array[1]
except IndexError:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your array should have at least 2 items, I would do an assert:</p>
<pre><code>assert len(array) &gt; 1, "Array should have at least 2 items"
</code></pre>
<p>If your array could have 2 items I would use the first form:</p>
<pre><code>if len(array) &gt; 1:
    # Process for array[1]
</code></pre>
<p>For me the try form can be less readable in the long run especially if you need to catch exceptions in the "Process for array[1]" part...</p>
</div>
<span class="comment-copy">A big thing about decisions like this in python is readability. The first option looks more readable to me.</span>
<span class="comment-copy">This is a bad question for Stack Overflow, but you have enough rep to join us in the <a href="http://chat.stackoverflow.com/rooms/6/python">chat room</a>, where we'll be glad to discuss this</span>
<span class="comment-copy">I ask same question to <code>codereview</code> they ask me to move this to <code>stackoverflow</code>, now <code>stackoverflow</code> ask me to go to <code>chatroom</code>, <code>charroom</code> rules says "Do not link your recent (&lt; 1-2 days) questions in the room. The main site is the dedicated space for posting questions, and having them answered.", where should I ask this ?</span>
<span class="comment-copy">Very similar to question <a href="http://stackoverflow.com/questions/3733992/determine-whether-a-key-is-present-in-a-dictionary">Determine whether a key is present in a dictionary</a>.</span>
<span class="comment-copy">Processing in the try imply that he will not have to catch another IndexError during the processing or he will have to do a try specifically for it and if he doesn't do it, could lead to strange bugs because the catch was not done on the right IndexError. Especially when "Process" get bigger and bigger. Making the way he wrote it 'better' but heavy if he need to ask a lot of forgiveness that way...</span>
<span class="comment-copy">Is there any draw back for using <code>try / catch / else</code> block ?</span>
<span class="comment-copy">@Cabu your suggession is to use <code>if</code> condtion instead of <code>IndexError</code>? and what is the meaning of <code>catch was not done on the right IndexError</code>?</span>
<span class="comment-copy">There is technically no drawback, but using <code>try / catch / else</code> instead of a simple <code>try / catch</code> is an improper use of theses statements, which leads to less readable and less maintainable code.</span>
<span class="comment-copy">@lafada I mean that if in "process" there is "another_array[out_of_range_index]" the except will catch it could be an error and should not catch it.</span>
