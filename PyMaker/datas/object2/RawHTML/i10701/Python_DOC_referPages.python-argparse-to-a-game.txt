<div class="post-text" itemprop="text">
<p>I'm trying to figure out argparse for my adventure game.
This is my code:</p>
<pre><code>parser = argparse.ArgumentParser(description='Adventure')
parser.add_argument('--cheat','-c', action='store_true', help='cheat')
parser.add_argument('--info','-i', action='store_true', help='Information' )
parser.add_argument('--version','-v', action='store_true', help='Version' )
parser.add_argument('--about', '-a', action='store_true', help='About' )

args = parser.parse_args()

if args.cheat or args.c:
    print("Cheat")
    sys.exit()
elif args.info or args.i:
    print("Information")
    sys.exit()
elif args.version or args.v:
    print("Version")
    sys.exit()
elif args.about or args.a:
    print("About")
    sys.exit()
else:
    #Game code#
</code></pre>
<p>But I'm getting an error when I have all these arguments. It worked fine when I only had cheat to begin with but when I added all the others, it messed up. Either I dont really know what i'm doing or I cant see whats wrong...</p>
<p>Here is my error:</p>
<pre><code>$ python3 adventure.py --info
  Traceback (most recent call last):
  File "adventure.py", line 12, in &lt;module&gt;
  if args.cheat or args.c:
      AttributeError: 'Namespace' object has no attribute 'c'
</code></pre>
<p>The reason I have it like this is because I want to type in this in terminal without starting the game, so if you just type python3 adventure.py the game will start. But I cant even do that now :P.
Only python3 adventure.py -c and python3 adventure --cheat works.</p>
<p>Anyone know a solution to this?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error messages is pretty clear: <code>'Namespace' object has no attribute 'c'</code>.</p>
<p><code>argparse</code> library automatically determines the name of the attribute to store the value of the command line option <a href="https://docs.python.org/3/library/argparse.html#dest" rel="nofollow">in the following way</a>:</p>
<blockquote>
<p>For optional argument actions, the value of <code>dest</code> is normally inferred from the option strings. <code>ArgumentParser</code> generates the value of <code>dest</code> by taking the first long option string and stripping away the initial <code>--</code> string. If no long option strings were supplied, <code>dest</code> will be derived from the first short option string by stripping the initial <code>-</code> character.</p>
</blockquote>
<p>Since you have both long and short names for your option, the long name is used. In other words, replace <code>if args.cheat or args.c:</code> with <code>if args.cheat:</code>.</p>
</div>
