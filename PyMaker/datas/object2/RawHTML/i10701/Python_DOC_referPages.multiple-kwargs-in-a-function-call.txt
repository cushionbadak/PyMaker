<div class="post-text" itemprop="text">
<p>I have a simple function which is called like this:</p>
<pre><code>arbitrary_function(**kwargs1, **kwargs2, **kwargs3)
</code></pre>
<p>It seems to compile fine on my local installation (python 3.5.1) but throws a SyntaxError when I compile it on a docker with python 3.4.5.</p>
<p>I'm not too sure why this behavior is present. Are multiple kwargs not allowed? Should I combine them before passing to function? It is more convenient to pass them individually, for example:</p>
<pre><code>plot(**x_axis_params, **y_axis_params, **plot_params)
</code></pre>
<p>instead of </p>
<pre><code>params = dict()

for specific_param in [x_axis_params, y_axis_params, plot_params]:    
    params.update(specific_param)

plot(**params)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's a new feature introduced in Python 3.5. If you have to support Python 3.4, you're basically stuck with the <code>update</code> loop.</p>
<p>People have their own favored variations on how to combine multiple dicts into one, but the only one that's really a major improvement over the <code>update</code> loop is 3.5+ exclusive, so it doesn't help with this. (For reference, the new dict-merging syntax is <code>{**kwargs1, **kwargs2, **kwargs3}</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>One workaround <a href="https://www.python.org/dev/peps/pep-0448/#rationale" rel="nofollow">mentioned in the rationale for PEP448</a> (which introduced that Python feature) is to use <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow"><code>collections.ChainMap</code></a>:</p>
<pre><code>from collections import ChainMap

plot(**ChainMap(x_axis_params, y_axis_params, plot_params))
</code></pre>
<p><code>ChainMap</code> was introduced in Python 3.3, so it should work in your docker instance.</p>
</div>
<span class="comment-copy">this is an syntax error either in Python 3.4 and Python 3.5.</span>
<span class="comment-copy">Yeah, that's not supposed to be allowed. You can <i>call</i> a function and unpack multiple keyword argument dicts into the call, but you can't <i>define</i> a function with multiple <code>**</code> arguments. There'd be no way to decide which argument receives which keywords.</span>
<span class="comment-copy">Sorry, i edited the question. it is regarding a function call, not a function definition.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448" rel="nofollow noreferrer">"Additional Unpacking Generalizations"</a> in python 3.5 changelog and the linked <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">PEP-448</a>.</span>
