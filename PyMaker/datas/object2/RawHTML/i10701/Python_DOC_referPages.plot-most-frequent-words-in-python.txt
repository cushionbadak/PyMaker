<div class="post-text" itemprop="text">
<p>list of most common words
Output is given below:</p>
<p><em>[('film', 904), ('movie', 561), ('one', 379), ('like', 292)]</em></p>
<p>I want a graph using matplotlib for each word according to the numbers</p>
<p>please help me</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one quick adoptation of this <a href="http://matplotlib.org/examples/api/barchart_demo.html" rel="nofollow">example</a> using a bar-chart.</p>
<pre><code>#!/usr/bin/env python
# a bar plot with errorbars
import numpy as np
import matplotlib.pyplot as plt


data = [('film', 904), ('movie', 561), ('one', 379), ('like', 292)]
names, values = zip(*data)  # @comment by Matthias
# names = [x[0] for x in data]  # These two lines are equivalent to the the zip-command.
# values = [x[1] for x in data] # These two lines are equivalent to the the zip-command.

ind = np.arange(len(data))  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, values, width, color='r')

# add some text for labels, title and axes ticks
ax.set_ylabel('Count')
ax.set_xticks(ind+width/2.)
ax.set_xticklabels(names)



def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                '%d' % int(height),
                ha='center', va='bottom')

autolabel(rects1)

plt.show()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>"""
Bar chart demo with pairs of bars grouped for easy comparison.
"""
import numpy as np
import matplotlib.pyplot as plt

data = [('film', 904), ('movie', 561), ('one', 379), ('like', 292)]

n_groups = len(data)

vals_films = [x[1] for x in data]
legends_films = [x[0] for x in data]

fig, ax = plt.subplots()

index = np.arange(n_groups)
bar_width = 0.25

opacity = 0.4

rects1 = plt.bar(index, vals_films, bar_width,
                 alpha=opacity,
                 color='b',
                 label='Ocurrences')


plt.xlabel('Occurrences')
plt.ylabel('Words')
plt.title('Occurrences by word')
plt.xticks(index + bar_width, legends_films)
plt.legend()

plt.tight_layout()
plt.show()
</code></pre>
<p>If you happen to use Jupyter Notebook (highly recommended), add this to the beginning of the notebook: <code>%matplotlib notebook</code></p>
</div>
<span class="comment-copy">what code do you have so far?</span>
<span class="comment-copy">Actually i tried  using matplotlib in different ways. But i found solution for input like x=[a, b, c] and y = [1, 3,4]  or another way like for a table. But i didn't get the solution for the output like above.</span>
<span class="comment-copy">Did I get this right: You know how to do it if you have two lists and are now looking for a way to create two lists out of your data?</span>
<span class="comment-copy">Just do <code>x, y = map(list, zip(*L))</code> and you can continue as before.</span>
<span class="comment-copy"><code>names</code> and <code>values</code> can be produced with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>: <code>names, values = zip(*data)</code></span>
<span class="comment-copy">Didn't think of that, thank you for reminding me!  That is indeed sweeter.</span>
<span class="comment-copy">Thanks, it is working well!!!</span>
<span class="comment-copy">Yes, it is also working... and thanks for your suggestion..</span>
