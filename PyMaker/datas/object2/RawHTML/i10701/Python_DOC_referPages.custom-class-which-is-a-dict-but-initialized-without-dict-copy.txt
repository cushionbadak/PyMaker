<div class="post-text" itemprop="text">
<p>For legibility purposes, I would like to have a custom class that behaves exactly like a dict (but carries a meaningful type instead of the more general dict type):</p>
<pre><code>class Derivatives(dict):
    "Dictionary that represents the derivatives."
</code></pre>
<p>Now, is there a way of building new objects of this class in a way that does not involve copies? The naive usage</p>
<pre><code>derivs = Derivatives({var: 1})  # var is a Python object
</code></pre>
<p>in fact creates a <em>copy</em> of the dictionary passed as an argument, which I would like to avoid, for efficiency reasons.</p>
<p>I tried to bypass the copy but then the class of the dict cannot be changed, in CPython:</p>
<pre><code>class Derivatives(dict):
    def __new__(cls, init_dict):
        init_dict.__class__ = cls  # Fails with __class__ assignment: only for heap types
        return init_dict
</code></pre>
<p>I would like to have both the ability to give an explicit class name to the dictionaries that the program manipulates <em>and</em> an efficient way of building such dictionaries (instead of being forced to copy a Python dict). Is this doable efficiently in Python?</p>
<p>PS: The use case is maybe 100,000 creations of single-key <code>Derivatives</code>, where the key is a variable (not a string, so no keyword initialization). This is actually not slow, so "efficiency reasons" here means more something like "elegance": there is ideally no need to waste time doing a copy when the copy is not needed. So, in this particular case the question is more about the elegance/clarity that Python can bring here than about running speed.</p>
</div>
<div class="post-text" itemprop="text">
<p>TL;DR: There's not general-purpose way to do it unless you do it in C.</p>
<p>Long answer:
The <code>dict</code> class is implemented in C. Thus, there is no way to access it's internal properties - and most importantly, it's internal hash table, unless you use C.</p>
<p>In C, you could simply copy the pointer representing the hash table into your object without having to iterate over the <code>dict</code> (key, value) pairs and insert them into your object. (Of course, it's a bit more complicated than this. Note that I omit memory management details).</p>
<p>Longer answer:</p>
<p>I'm not sure why you are concerned about efficiency.</p>
<p>Python passes arguments as references. It rarely every copies unless you  explicitly tell it to.</p>
<p>I read in the comments that you can't use named parameters, as the keys are actual Python objects. That leaves me to understand that you're worried about copying the <code>dict</code> keys (and maybe values). However, even the dictionary keys are not copied, and passed by reference! Consider this code:</p>
<pre><code>class Test:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __hash__(self):
        return self.x

t = Test(1, 2)
print(t.y) # prints 2
d = {t: 1}
print(d[t]) # prints 1
keys = list(d.keys())
keys[0].y = 10
print(t.y)  # prints 10! No copying was made when inserting object into dictionary.
</code></pre>
<p>Thus, the only remaining area of concern is iterating through the <code>dict</code> and inserting the values in your <code>Derivatives</code> class.  This is unavoidable, unless you can somehow set the internal hash table of your class to the <code>dict</code>'s internal hash table. There is no way to do this in pure python, as the dict class is implemented in C (as mentioned above).</p>
<p>Note that others have suggested using generators. This seems like a good idea too - say if you were reading the derivatives from a file or if you were generating them with a simple formula. It would avoid creating the <code>dict</code> object in the first place. However, there will be no noticable improvements in efficiency if the generators are just wrappers around <code>list</code>s (or any other data structure that can contain an arbritary set of values).</p>
<p>Your best bet is do stick with your original method. Generators are great, but they can't efficiently represent an arbritary set of values (which might be the case in your scenario). It's also not worth it to do it in C.</p>
<p>EDIT: It <em>might</em> be worth it to do it in C, after all!</p>
<p>I'm not too big on the details of the Python C API, but consider defining a class in C, for example,<code>DerivativesBase</code> (deriving from <code>dict</code>). All you do is define an <code>__init__</code> function in C for <code>DerivativesBase</code> that takes a <code>dict</code> as a parameter and copies the hash table pointer from the <code>dict</code> into your <code>DerivativesBase</code> object. Then, in python, your <code>Derivatives</code> class derives from <code>DerivativesBase</code> and implements the bulk of the functionality.</p>
</div>
<div class="post-text" itemprop="text">
<p>By inheriting from <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer"><code>dict</code></a> you are given three possibilities for constructor arguments: (baring the <code>{}</code> literal)</p>
<pre><code>class dict(**kwarg)
class dict(mapping, **kwarg)
class dict(iterable, **kwarg)
</code></pre>
<p>This means that, in order to instantiate your instance you <strong>must</strong> do one of the following:</p>
<ol>
<li>Pass the variables as keywords <code>D(x=1)</code> which are then packed into an intermediate dictionary anyway.</li>
<li><p>Create a plain dictionary and pass it as a <code>mapping</code>.</p></li>
<li><p>Pass an iterable of (key,value) pairs.</p></li>
</ol>
<p>So in all three of these cases you will need to create intermediate objects to satisfy the <code>dict</code> constructor.</p>
<p>The third option for a single pair it would look like <code>D(((var,1),))</code> which I highly recommend against for readability sake.</p>
<p>So if you want your class to inherit from a dictionary, using <code>Derivatives({var: 1})</code> is your most efficient and most readable option.  </p>
<p>As a personal note if you will have thousands of single pair dictionaries I'm not sure how the <code>dict</code> setup is the best in the first place, you may just reconsider the basis of your class.</p>
</div>
<span class="comment-copy">Why not just <code>derivs = Derivatives(x=1)</code>? The same copying behaviour would happen with a vanilla dictionary (<code>dict({'x': 1})</code>), it's unclear why you expected otherwise.</span>
<span class="comment-copy">Good point, but I can't because the keys are actually Python objects. I will update the example.</span>
<span class="comment-copy">Then no, there's no way to provide your own literals. If you don't need it to <i>be</i> a dictionary, you could just make it <i>contain</i> a dictionary, and expose it via <code>__getitem__</code> etc.</span>
<span class="comment-copy">This answer, with an explanation/pointers about why this is the case, would be an answer I can accept. :) Other point: I did not expect <code>Derivatives({…})</code> to copy any less than <code>dict({…})</code> (this is the "naive usage" I was referring to), I am just looking for a way to avoid a copy (which is obviously not this one).</span>
<span class="comment-copy">Yeah, containing a dictionary is the only solution I thought about. The <code>__getitem__()</code> idea is good, but then it would probably be less efficient than doing the copy in the first place…</span>
<span class="comment-copy">This is interesting and quite complete. One detail: I don't think that it is correct, though, to say that "generators are just wrappers around lists". For example, a generator function can return all the natural integers: no list is involved here. Similarly, a generator expression like <code>(x**2 for x in xrange(9))</code> has not reason to first build a list (this is why <code>xrange()</code> exists in the first place). That said, I reach the same conclusion, because copies are made anyway.</span>
<span class="comment-copy">@EOL I mean that generators are inefficient if they are wrappers around list! (For example, there's no benefit to (i for i in [1, 2, 3]) - the list needs to be created and stored anyway! (Notice how I said there is no noticable gain in efficiency <i>if</i> the generator is just a wrapper around a list.</span>
<span class="comment-copy">This is correct, but my question is then about whether the <code>dict()</code> constructor can be somehow avoided (in the question, I show an attempt at just changing the <code>__class__</code> of the dict to the new custom class, for example).</span>
