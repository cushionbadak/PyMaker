<div class="post-text" itemprop="text">
<p>I've searched for a relevant thread on how to do this but I cannot find anything.</p>
<p>I have an array:</p>
<pre><code>x = [a,a,a,b,a,a]
</code></pre>
<p>I want to copy the elements of the array into a new array until I find 'b'. I tried to do this with a loop but I get an error that "y is not defined", I tried initializing y but that didn't work either. Any ideas? I'm sure there is a better way to do this.</p>
<pre><code>for ii in x:
    if x[ii].find(num) == 0:
        break
    else:
        y[ii] = x[ii]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>y = []
for e in x:
    if e == 2:
        break
    y.append(e)
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow"><code>itertools.takewhile</code></a>:</p>
<pre><code>&gt;&gt;&gt; x = [1,1,1,2,1,1]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; y = list(itertools.takewhile(lambda i: i != 2, x))
&gt;&gt;&gt; y
[1, 1, 1]
</code></pre>
<p>When using a loop, you have to use <code>y.append</code>; if you do <code>y[ii] = ...</code>, then you will get an <code>IndexError</code> as you try to set e.g. the first element of an array that has zero elements. Also, when you loop like this <code>for ii in x:</code> then <code>ii</code> is already the element from <code>x</code>, i.e. you do <em>not</em> have to do <code>x[ii]</code>. In your case, this did not give an exception, since <code>x[1]</code> would be a valid element of <code>x</code>, but it would not be what you expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>x = [1,1,1,2,1,1]
b = 2

try:
    y = x[:x.index(b)]
except ValueError:
    y = x[:]
</code></pre>
<p>For example:</p>
<pre><code>In [10]: x = [1,1,1,2,1,1]
    ...: b = 2
    ...: 
    ...: try:
    ...:     y = x[:x.index(b)]
    ...: except ValueError:
    ...:     # b was not found in x. Just copy the whole thing.
    ...:     y = x[:]
    ...:

In [11]: y
Out[11]: [1, 1, 1]
</code></pre>
<p>See <a href="https://docs.python.org/2.7/tutorial/datastructures.html" rel="nofollow"><code>list.index()</code></a> and the <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow">shallow-copy slice</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p>Way to get things done with <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow"><strong>generator expression</strong></a>:</p>
<pre><code>x = ['a', 'a', 'a', 'b', 'a', 'a']
items = list(next(iter([])) if item == 'b' else item for item in x)
print items
['a', 'a', 'a']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Though it is somehow similar  to Will's answer, but in here it shows the use of <a href="https://docs.python.org/3/library/functions.html?highlight=slice#slice" rel="nofollow"><code>slice</code></a> built-in slicing object:</p>
<pre><code>&gt;&gt;&gt; x = ['a','a','a','b','a','a']
&gt;&gt;&gt; s = slice(x.index('b'))
&gt;&gt;&gt; 
&gt;&gt;&gt; x[s]
['a', 'a', 'a']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would split the array by the <code>b</code> index:</p>
<pre><code>&gt;&gt;&gt; x = ['a','a','a','b','a','a']
&gt;&gt;&gt; c = x.index('b')
&gt;&gt;&gt; x[:c]
['a', 'a', 'a']
&gt;&gt;&gt; x[c:]
['b', 'a', 'a']
</code></pre>
</div>
<span class="comment-copy">What do u mean by <code>x[ii].find(num)</code>? You have a list of integers or strings?</span>
<span class="comment-copy">Sorry, I used integers as an example, its an array of strings. Fixed.</span>
<span class="comment-copy">Also known as <code>y = x[:x.index(2)]</code>.</span>
<span class="comment-copy">Mephy: right. Just thought the author needs some plain implementation.</span>
<span class="comment-copy">@IgorPomaranskiy Besides the <i>implementation</i>, some <i>explanation</i> would also be nice,</span>
<span class="comment-copy">Wow, using <code>next(iter([]))</code> to trigger <code>StopIteration</code> in a list comprehension. I'm not sure whether I should upvote this, but certainly a creative solution. ;-)</span>
<span class="comment-copy">@tobias_k thanks, your comment is better than upvoting )))</span>
<span class="comment-copy">BTW, actually, this is a generator expression, not a list comprehension. With a proper list comprehension this would not work.</span>
<span class="comment-copy">Cool and creative .. +1</span>
<span class="comment-copy">@tobias_k missed that moment, thanks</span>
<span class="comment-copy">Can you also use this method with an object of type 'dict'?</span>
<span class="comment-copy">You mean a list of dict ?</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion. Please also try not to crowd your code with explanatory comments, as this reduces the readability of both the code and the explanations!</span>
