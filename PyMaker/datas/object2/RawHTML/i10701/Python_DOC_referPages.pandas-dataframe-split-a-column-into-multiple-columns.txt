<div class="post-text" itemprop="text">
<p>I have a pandas dataframe looks like as below:</p>
<pre><code>date     |    location          | occurance &lt;br&gt;
------------------------------------------------------
somedate |united_kingdom_london | 5  
somedate |united_state_newyork  | 5   
</code></pre>
<p>I want it to transform into </p>
<pre><code>date     | country        | city    | occurance &lt;br&gt;
---------------------------------------------------
somedate | united kingdom | london  | 5  
---------------------------------------------------
somedate | united state   | newyork | 5     
</code></pre>
<p>I am new to Python and after some research I have written following code, but seems to unable to extract country and city:</p>
<pre><code>df.location= df.location.replace({'-': ' '}, regex=True)
df.location= df.location.replace({'_': ' '}, regex=True)

temp_location = df['location'].str.split(' ').tolist() 

location_data = pd.DataFrame(temp_location, columns=['country', 'city'])
</code></pre>
<p>I appreciate your response.</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting with this: </p>
<pre><code>df = pd.DataFrame({'Date': ['somedate', 'somedate'],
                   'location': ['united_kingdom_london', 'united_state_newyork'],
                   'occurence': [5, 5]})
</code></pre>
<p>Try this: </p>
<pre><code>df['Country'] = df['location'].str.rpartition('_')[0].str.replace("_", " ")
df['City']    = df['location'].str.rpartition('_')[2]
df[['Date','Country', 'City', 'occurence']]

      Date        Country      City  occurence
0  somedate  united kingdom   london          5
1  somedate    united state  newyork          5
</code></pre>
<p>Borrowing idea from @MaxU</p>
<pre><code>df[['Country'," " , 'City']] = (df.location.str.replace('_',' ').str.rpartition(' ', expand= True ))
df[['Date','Country', 'City','occurence' ]]

      Date        Country      City  occurence
0  somedate  united kingdom   london          5
1  somedate    united state  newyork          5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.rsplit.html" rel="nofollow"><code>str.rsplit</code></a>, which works nice if country has no <code>_</code> (contains only one word):</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'date': {0: 'somedate', 1: 'somedate', 2: 'somedate'}, 
                   'location': {0: 'slovakia_bratislava', 
                                1: 'united_kingdom_london', 
                                2: 'united_state_newyork'}, 
                   'occurance &lt;br&gt;': {0: 5, 1: 5, 2: 5}})    
print (df)
       date               location  occurance &lt;br&gt;
0  somedate    slovakia_bratislava               5
1  somedate  united_kingdom_london               5
2  somedate   united_state_newyork               5

df[['country','city']] = df.location.str.replace('_', ' ').str.rsplit(n=1, expand=True)
#change ordering of columns, remove location column
cols = df.columns.tolist()
df = df[cols[:1] + cols[3:5] + cols[2:3]]
print (df)
       date         country        city  occurance &lt;br&gt;
0  somedate        slovakia  bratislava               5
1  somedate  united kingdom      london               5
2  somedate    united state     newyork               5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider splitting the column's string value using <a href="https://docs.python.org/3/library/stdtypes.html#str.rfind" rel="nofollow"><code>rfind()</code></a></p>
<pre><code>import pandas as pd

df = pd.DataFrame({'Date': ['somedate', 'somedate'],
                   'location': ['united_kingdom_london', 'united_state_newyork'],
                   'occurence': [5, 5]})

df['country'] = df['location'].apply(lambda x: x[0:x.rfind('_')])
df['city'] = df['location'].apply(lambda x: x[x.rfind('_')+1:])

df = df[['Date', 'country', 'city', 'occurence']]
print(df)

#        Date         country     city  occurence
# 0  somedate  united_kingdom   london          5
# 1  somedate    united_state  newyork          5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>temp_location = {}
splits = df['location'].str.split(' ')
temp_location['country'] = splits[0:-1].tolist() 
temp_location['city'] = splits[-1].tolist() 

location_data = pd.DataFrame(temp_location)
</code></pre>
<p>If you want it back in the original df:</p>
<pre><code>df['country'] = splits[0:-1].tolist() 
df['city'] = splits[-1].tolist() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this works</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'Date': ['somedate', 'somedate'],
                   'location': ['united_kingdom_london', 'united_state_newyork'],
                   'occurence': [5, 5]})

df.location = df.location.str[::-1].str.replace("_", " ", 1).str[::-1]
newcols = df.location.str.split(" ")
newcols = pd.DataFrame(df.location.str.split(" ").tolist(),
                         columns=["country", "city"])
newcols.country = newcols.country.str.replace("_", " ")
df = pd.concat([df, newcols], axis=1)
df.drop("location", axis=1, inplace=True)
print(df)

         Date  occurence         country     city
  0  somedate          5  united kingdom   london
  1  somedate          5    united state  newyork
</code></pre>
<p>You could use regex in the replace for a more complicated pattern but if it's just the word after the last <code>_</code> I find it easier to just reverse the str twice as a hack rather than fiddling around with regular expressions</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extract.html" rel="nofollow">.str.extract()</a> method:</p>
<pre><code>In [107]: df
Out[107]:
       Date               location  occurence
0  somedate  united_kingdom_london          5
1  somedate   united_state_newyork          5
2  somedate         germany_munich          5

In [108]: df[['country','city']] = (df.location.str.replace('_',' ')
   .....:                             .str.extract(r'(.*)\s+([^\s]*)', expand=True))

In [109]: df
Out[109]:
       Date               location  occurence         country     city
0  somedate  united_kingdom_london          5  united kingdom   london
1  somedate   united_state_newyork          5    united state  newyork
2  somedate         germany_munich          5         germany   munich

In [110]: df = df.drop('location', 1)

In [111]: df
Out[111]:
       Date  occurence         country     city
0  somedate          5  united kingdom   london
1  somedate          5    united state  newyork
2  somedate          5         germany   munich
</code></pre>
<p>PS please be aware that it's not possible to parse properly (to distinguish) between rows containing two-words country + one-word city and rows containing one-word country + two-words city (unless you have a full list of countries so you check it against this list)...</p>
</div>
<span class="comment-copy">Thanks guys for your response. With given  context, all of your solutions works fine, but actual dataset I am working quite complicated. As a result, I was unable to work it out as yet. From above snippet of mine, after replacing '-', '_' I am doing    for item in temp:          if str(item) == 'United':                  frames = [temp[0], temp[2].str.partition(" ", expand=True)]          result = pd.concat(frames)         print result //but this does not seems working</span>
<span class="comment-copy">But you will have a empty column name in second method.</span>
<span class="comment-copy">@shivsn, yes its not used.</span>
