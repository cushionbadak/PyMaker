<div class="post-text" itemprop="text">
<p>I'd like to find a string in "match objects" in python, but ".find" does not work. Here is my snippet:</p>
<pre><code>e_list = []
for file in os.listdir('.'):
    r = re.compile(r".*\.(aaa|bbb)$")
    e_found = r.search(file)
    if e_found is not None:
        e_list.append(e_found.group(0))

e_length = len(e_list);

for num_e in range(e_length):
    if(e_list[num_e].group(0).find('50M') &gt; 0)
        print(e_list[num_e].group(0))
</code></pre>
<p>... Now <code>e_list</code> is like:</p>
<pre><code>[&lt;_sre.SRE_Match object; span=(0, 7), match='30M.aaa'&gt;,  
 &lt;_sre.SRE_Match object; span=(0, 7), match='40M.bbb'&gt;,  
 &lt;_sre.SRE_Match object; span=(0, 7), match='50M.aaa'&gt;,  
 &lt;_sre.SRE_Match object; span=(0, 7), match='50M.bbb'&gt;,  
 &lt;_sre.SRE_Match object; span=(0, 7), match='50M.ccc'&gt;]
</code></pre>
<p>I'm expecting to have the result:</p>
<pre><code>'50M.aaa'  
'50M.bbb'
</code></pre>
<p>While <code>e_list[0].group(0)</code> returns <code>'30M.aaa'</code>, <code>.find</code> cannot be applied because it's a match object. Then, what should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think Python is not your first language, your code smell like Java.</p>
<p>Please do not use <code>re.compile</code>, because it is unnecessary. Just use <code>re.search</code> or <code>re.findall</code>.</p>
<p>And in Python, you can just use:</p>
<pre><code>result = re.findall('.*\.(aaa|bbb)$', file)
</code></pre>
<p>then, <code>result</code> is a list, you can print it or use <code>for... loop</code> to get every item of it.</p>
<p>As you can also use:</p>
<pre><code>result = re.search('.*\.(aaa|bbb)$', file)
</code></pre>
<p>the result is a group. </p>
<p>Then you should use <strong>result.group(1)</strong> to get the the matched item.</p>
<p>SO, your code can be:</p>
<pre><code>e_list = []
for file in os.listdir('.'):
    e_found = re.search(".*\.(aaa|bbb)$", file)

    if e_found:
        e_list.append(e_found.group(1))


for item in e_list:
    if item.find('50M') &gt; 0
        print(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check if the string begins with <code>'50M'</code>, use <code>str.startswith('50M')</code>. This will not detect cases where <code>50M</code> is the suffix (<code>test.50M</code>).</p>
<pre><code>if e_list[num_e].startswith('50M'):
    print(e_list[num_e])
</code></pre>
<p>If the suffix is a legitimate place to find the <code>50M</code>, using <code>in</code> is much cleaner than <code>.find('50M') &gt; 0</code>.</p>
<pre><code>if '50M' in e_list[num_e]:
</code></pre>
</div>
<span class="comment-copy">For further reading:  The Python 3 "<a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">Regular Expression HOWTO</a>".</span>
<span class="comment-copy">You should use <a href="https://docs.python.org/3/library/re.html#raw-string-notation" rel="nofollow noreferrer">raw strings</a> for your regular expressions, to prevent weird interactions with backslashes and string-vs-regex metacharacters:  <code>r".*\.(aaa|bbb)$"</code>.  Even though <i>this</i> regex doesn't need it, starting the habit now will save you headaches later.</span>
<span class="comment-copy">To @Kevin J. Chase: Oops, I thought I already put an 'r' in front of the regex, but it was missing. Thank you for reminding me.</span>
<span class="comment-copy">Solved by your answer. Actually, e_list.append(e_found.group(0)) gives me what I wanted (the entire file names). Except that, I copied completely yours and it works perfectly. Thank you also for correcting my iteration.</span>
<span class="comment-copy">It didn't work. After reading Kingname's answer, I noticed that the last part should have been: if(e_list[num_e].find('50M') &gt; 0):     print(e_list[num_e])</span>
<span class="comment-copy">@IanHacker Ah, I see. I have updated my answer to be correct - the ways I describe will be much cleaner and more specific than <code>.find()</code>.</span>
<span class="comment-copy">Yes, now it works. Thank you.</span>
