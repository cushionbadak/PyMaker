<div class="post-text" itemprop="text">
<p>Hi I am looking for a smart way to get a for loop in Python in which one variable, say k, has to shift from 0 to 2 and than back to 0 up to the end of the loop. Something like </p>
<pre><code>k = 0
for j in range(15):
    fancycode
    k = k + 1
</code></pre>
<p>In which for each loop k has the following values</p>
<pre><code>loop1 k = 0
loop2 k = 1
loop3 k = 2
loop4 k = 0
loop5 k = 1
loop6 k = 2
loop7 k = 0
...
</code></pre>
<p>I may use an if statement but I would like to know whether there could be something smart that does not burden my code</p>
</div>
<div class="post-text" itemprop="text">
<p>The right way to do it is to use <a href="https://docs.python.org/3/library/itertools.html?highlight=chain#itertools.cycle" rel="nofollow">itertools.cycle()</a> For example:</p>
<pre><code>import itertools

my_cycle = itertools.cycle(range(3))
for j in range(15):
  k = my_cycle.next()
</code></pre>
<p>valid in Python 2.x</p>
<p>for 3.x you should use</p>
<pre><code>import itertools

my_cycle = itertools.cycle(range(3))
for j in range(15):
  k = next(my_cycle)
</code></pre>
<p>This will work with any iterable regardless of it's nature.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import cycle, islice

for index, value in enumerate(islice(cycle([0, 2]), 15)):
    print('loop{} k = {}'.format(index, value))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply using modulo! (%)</p>
<pre><code>for j in range(15):
    fancycode
    k = j % 3
    print(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using list comprehension you can:</p>
<pre><code>for j, k in ((j, j % 3) for j in range(15)):
    print('j: {0}, k: {1}'.format(j, k))
</code></pre>
<p>will print:</p>
<pre><code>j: 0, k: 0
j: 1, k: 1
j: 2, k: 2
j: 3, k: 0
j: 4, k: 1
j: 5, k: 2
j: 6, k: 0
j: 7, k: 1
j: 8, k: 2
j: 9, k: 0
j: 10, k: 1
j: 11, k: 2
j: 12, k: 0
j: 13, k: 1
j: 14, k: 2
</code></pre>
</div>
<span class="comment-copy">Would <code>k = j % 3</code> work?</span>
