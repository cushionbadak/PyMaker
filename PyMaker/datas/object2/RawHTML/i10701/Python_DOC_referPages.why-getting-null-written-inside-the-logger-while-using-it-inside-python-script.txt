<div class="post-text" itemprop="text">
<p>I am using logger in my python script as :</p>
<pre><code>import logger
logging.basicConfig(filename='sample.log',level=logging.DEBUG)
logging.info("helllo")
</code></pre>
<p>Now there are many functions inside the python script and every time i have to use a logger i need to mention following line :</p>
<pre><code>logging.basicConfig(filename='sample.log',level=logging.DEBUG)
</code></pre>
<p>again and again. In order to resolve this i declared function which returns logger object as follows:</p>
<pre><code>class sample()
    def set_log(self):
            l = logging.getLogger(logger_name)
            l.setLevel(logging.DEBUG)
            formatter = logging.Formatter(' %(levelname)s : %(message)s')
            fileHandler = logging.FileHandler("c:/sample.log", mode='w')
            fileHandler.setFormatter(formatter)
            streamHandler = logging.StreamHandler()
            streamHandler.setFormatter(formatter)    
            l.addHandler(fileHandler)
            return l
      def func(self):
            log = self.set_log()
            log.info("hsdhkhd")
</code></pre>
<p>Now i am using set_log() inside func() but what happens is it sometimes it inserts NUll at various locations inside the log but actually null should not get entered. So, why is it that i am getting null inside the log files sometimes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to call <code>logging.basicConfig()</code> each time, no. You only need to call it <em>once</em>. The <code>logging.basicConfig()</code> function always returns <code>None</code>, so you can't use it to access a <code>Logger.info()</code> method anyway.</p>
<p>You can always access the root logger (in configured state) with <code>logging.getLogger()</code>. That's because the <code>logging</code> module uses <em>singletons</em>, global state, to configure all logging operations.</p>
<p>The convention is to store a global reference to a logger in your module:</p>
<pre><code>logger = logging.getLogger(__name__)
</code></pre>
<p>Here the module name is used to indicate where log messages come from, and this also lets you adjust configuration per module.</p>
<p>However, subsequent calls to <code>logging.getLogger(somename)</code> will always return the same singleton logger object (not passing in the name gives you the root <code>Logger</code> in the hierarchy).</p>
<p>At any rate, the top-level <code>logging.info()</code> function just delegates to the root logger, it is equivalent to <code>logging.getLogger().info()</code>. It does call <code>logging.basicConfig()</code> <em>if it wasn't already called before</em>.</p>
<hr/>
<p>Your updated sample function will add new <code>FileHandler()</code> and <code>StreamHandler()</code> instance to the singleton <code>logger_name</code> logger object each time <code>self.set_log()</code> is called. That'll lead to undefined results you re-open the file (truncating it each time).</p>
<p>Stick to calling <code>basicConfig()</code> <strong>once</strong>, at the start of your program. The rest of your code should only concern themselves with direct <code>logging.getLogger()</code> calls.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/logging.html#logging.getLogger" rel="nofollow noreferrer"><code>logging.getLogger()</code></a>?</span>
<span class="comment-copy">The constructor should be more like this: def __init__(self, variable1, varriable2, logging)</span>
<span class="comment-copy">@Martjin i have added a function (edited the question)which returns logger object but when i use this function i sometimes get null written inside the log but there are actuall values. so, why is it behaviour that sometimes it adds null to the log?</span>
<span class="comment-copy">@newlearner: why are you re-defining a log object <i>each and every time</i>? Don't do this. The <code>logging</code> module keeps track of the object <i>for you</i>. All you have to do is give it a name and keep asking for it: <code>logging.getLogger(name)</code>.</span>
<span class="comment-copy">@newlearner: your code keeps adding more and more <code>StreamHandler</code> instances. That'll certainly lead to weird results.</span>
<span class="comment-copy">thank you for the elaborate answer, it helped me as well!</span>
