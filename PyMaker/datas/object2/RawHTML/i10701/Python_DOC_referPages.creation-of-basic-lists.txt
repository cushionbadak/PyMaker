<div class="post-text" itemprop="text">
<p>I am trying to create a list in Python from a text file. I would like to open the file, read the lines, use the <code>split</code> method, append them to a list. This is what I have so far. All it does is print the text file:</p>
<pre><code>lines = []
folder = open("test.txt")
word = folder.readlines()
for line in word:
    var = ()
    for line in word:
        lines.append(line.strip().split(","))
        print (word)
</code></pre>
<p>My file  looks like this: <code>fat cat hat mat sat bat lap</code> </p>
<p>I want this to come out: <code>['fat', 'cat', 'hat', 'mat', 'sat', 'bat', 'lap']</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>As other commentors have observed, variable naming should provide the <strong>context</strong> of what your variable is <em>assigned</em> to. Even though you can name a variable a multitude of names, they <em>should</em> be relevant! </p>
<p>You can use the <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow"><code>with</code></a> statement to open and close a file within the same scope, ensuring that the file object is <strong>closed</strong> (<em>generally good practice</em>). From then on, you can print the <code>lines</code> returned from the <code>readlines()</code> function as a <code>list</code> that is <code>split()</code> based on a <code>' '</code> delimiter. </p>
<pre><code>with open("test.txt") as file:
    lines = file.readlines()
for line in lines:
    print line.split(' ')
</code></pre>
<p><strong>Sample output:</strong></p>
<p>File: <code>fat cat hat mat sat bat lap</code></p>
<pre><code>&gt;&gt;&gt; ['fat', 'cat', 'hat', 'mat', 'sat', 'bat', 'lap']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your file only consists of one line then you don't need to do nearly as much work as you seem to think.</p>
<p><code>str.split</code> returns a list, so there is no need to <code>append</code> the individual elements.  When you call <code>.split()</code> without any arguments it will split by any whitespace (spaces, tabs, newlines etc) so to do what you want to do would literally just be:</p>
<pre><code>with open("test.txt","r") as f:
    mywords = f.read().split()

print(mywords)
</code></pre>
<p>open the file, read the contents, split it up by whitespace, store the resulting list in a variable called <code>mywords</code>. (or whatever you want to call it)</p>
<p>Note that spliting by any whitespace means it will treat new lines the same as spaces, just another separation of words.</p>
</div>
<span class="comment-copy">Do you think your <code>for line in word</code> within (loop-wise) <code>for line in word</code> is a good construct in <i>any programming language</i>?`:-)</span>
<span class="comment-copy">Why do you expect <code>.split(',')</code> to split it up when there are no commas?</span>
<span class="comment-copy">Definitely consider what @sascha said. Also, consider the statement "for line in word". Might want to flip the names so you don't get confused.</span>
<span class="comment-copy">I should add that when you're ever in need of help with something simple like this, first consult the doc ;-): <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a></span>
<span class="comment-copy">if there is only one line in the file I'm not sure traversing it is really necessary.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen I chose to keep it in to be more robust, this way more lines can be added or removed from the text file.</span>
<span class="comment-copy">Even if more lines are added to the file, then <code>for line in file:</code> would still work</span>
<span class="comment-copy">Since much has been said in this thread about variable naming, shouldn't your <code>mylines</code> be <code>mywords</code> instead? ;-)</span>
<span class="comment-copy">Yes I realized that as I was going to bed. :)</span>
<span class="comment-copy">Ha ha ha. I don't much appreciate poor posts like this. I think that's why there a <a href="http://stackoverflow.com/documentation">documentation</a> now on SO.</span>
