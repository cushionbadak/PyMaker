<div class="post-text" itemprop="text">
<p>I'm writing an IDE for python, in python, and need to use subprocess to intereact with a user's script.</p>
<p>I am completely new to using subprocess and not sure what I'm doing here. I've created a test snippet representing what I'm trying to do:</p>
<pre><code>from subprocess import Popen,PIPE,STDOUT
import tkinter as tk

t=tk.Text()
t.pack()

p = Popen(["python","c:/runme.py"],stdout=PIPE,stdin=PIPE,stderr=PIPE,shell=True)
p.stdin.write("5".encode())
out=p.stdout.read()

t.insert(1.0,out)
</code></pre>
<p>And here is the test script I'm trying to interact with:</p>
<pre><code>print("Hello World")
inp=input("Enter a Number: ")
print(inp)
quit()
</code></pre>
<p>Unfortunately it just waiting (presumably) on line 2. How do I read what has already been printed and how to I then input the string?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to flush stdout regularly, because, if the script is not connected to a terminal, the output is not automatically flushed:</p>
<pre><code>import sys
print("Hello World")
print("Enter a Number: ")
stdout.flush()
inp = input()
print(inp)
</code></pre>
<p>and you have to terminate the input by return <code>\n</code>:</p>
<pre><code>p = Popen(["python", "c:/runme.py"], stdout=PIPE, stdin=PIPE, stderr=PIPE)
p.stdin.write("5\n".encode())
out = p.stdout.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Remove <code>shell=True</code></strong>. Currently you are <em>not</em> executing the script at all, but just launching a <code>python</code> interactive interpreter.</p>
<p>The problem is that <a href="https://stackoverflow.com/a/21029310/510937">when you use <code>shell=True</code> the way in which the first argument is interpreted changes.</a> You do not need <code>shell=True</code> and the arguments you provided are correct for the <code>shell=False</code> version.</p>
<p>See the difference between:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen(['python', 'whatever'], shell=True)
&lt;subprocess.Popen object at 0x7ff1bf933d30&gt;
&gt;&gt;&gt; Python 2.7.12 (default, Jul  1 2016, 15:12:24) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
KeyboardInterrupt
&gt;&gt;&gt; 
KeyboardInterrupt
</code></pre>
<p>Which as you may notice launches a python interpreter which gets stuck, and this:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen(['python', 'whatever'])
&lt;subprocess.Popen object at 0x7f14e1446cf8&gt;
&gt;&gt;&gt; python: can't open file 'whatever': [Errno 2] No such file or directory
</code></pre>
<p>Which tries to execute <code>whatever</code>.</p>
<hr/>
<p>Also you should consider using the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer"><code>communicate</code></a> method instead of reading and writing directly to/from <code>stdin</code>/<code>stdout</code>.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4417546/constantly-print-subprocess-output-while-process-is-running">Constantly print Subprocess output while process is running</a></span>
<span class="comment-copy">Running Python as a subprocess of Python is just crazy. Look into the <code>multiprocessing</code> module if you genuinely need Python to execute multiple processes in parallel.</span>
<span class="comment-copy">The <code>stdout</code> lies in <code>sys</code> module, and the <code>p.stdin</code> should also be flushed after <code>write()</code>, too. All other parts of my answer is same as yours :)</span>
<span class="comment-copy">I have removed <code>shell=True</code> and flush before reading and after writing. Now my problem is that I cannot read what the input prompt is, I have to write before I can read. Is there a way of reading while the file is waiting for input, then "forwarding" user input from that file to the process?</span>
<span class="comment-copy">@HaydenR The problem could be that the prompt isn't flushed by <code>input</code>. Try to change <code>input(prompt)</code> with <code>sys.stdout.write(prompt);sys.stdout.flush();input()</code> and see if that makes a difference. If it does you should write a simple wrapper around <code>input</code> that flushes the prompt.</span>
