<div class="post-text" itemprop="text">
<p>I'm trying to generate the csv with delimiter '@|@' but, I couldn't achieve through below code.</p>
<pre><code>import csv
ifile  = open('test.csv', "rb")
reader = csv.reader(ifile)
ofile  = open('ttest.csv', "wb")
writer = csv.writer(ofile, delimiter='|', quotechar='"', quoting=csv.QUOTE_ALL)
for row in reader:
    writer.writerow(row)
ifile.close()
ofile.close()
</code></pre>
<p>While running, It has thrown below error.</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):

File "csvfile.py", line 6, in &lt;module&gt;
writer = csv.writer(ofile, delimiter='@|@', quotechar='"', quoting=csv.QUOTE_ALL)
TypeError: "delimiter" must be an 1-character string
</code></pre>
<p>How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In csv <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.delimiter" rel="nofollow">documentation</a> they say </p>
<blockquote>
<p>A one-character string used to separate fields. It defaults to ','.</p>
</blockquote>
<p>So you can do this as an alternative.</p>
<pre><code>csv.reader((line.replace('@|@', '|') for line in ifile), delimiter='|')
</code></pre>
<p>So the complete code is,</p>
<pre><code>import csv
ifile  = open('test.csv', "rb")
reader = csv.reader((line.replace('@|@', '|') for line in ifile), delimiter='|')
ofile  = open('ttest.csv', "wb")
writer = csv.writer(ofile, delimiter='|', quotechar='"', quoting=csv.QUOTE_ALL)
for row in reader:
    writer.writerow(row)
ifile.close()
ofile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Life is too short, just use <code>pandas</code></p>
<pre><code>import pandas as pd
df.to_csv('output.csv', sep='|')
</code></pre>
<p>By default, the delimiator is <code>','</code>, that is why it is called Commasv. But by changing the <code>sep</code> to <code>'|'</code>, you could simply achieve what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>csvfile</em> argument to the <code>csv.writer</code> constructor only has to be a "file-like object". This means you could supply an instance of your own class which changes a single character into one with two or more characters (but which otherwise acts like a open output file object).</p>
<p>Here's what I mean:</p>
<pre><code>import csv

class CSV_Translater(object):
    """ Output file-like object that translates characters. """
    def __init__(self, f, old, new):
        self.f = f
        self.old = old
        self.new = new
    def write(self, s):
        self.f.write(s.replace(self.old, self.new))
    def close(self):
        self.f.close()
    def flush(self):
        self.f.flush()

with open('in_test.csv', "rb") as ifile:
    reader = csv.reader(ifile)
    with open('out_test.csv', "wb") as ofile:
        translater = CSV_Translater(ofile, '|', '@|@')
        writer = csv.writer(translater, delimiter='|', quotechar='"',
                            quoting=csv.QUOTE_ALL)
        for row in reader:
            writer.writerow(row)
</code></pre>
</div>
<span class="comment-copy">replace('@|@', '|') or to something that does not contain in your string</span>
<span class="comment-copy"><code>'@|@'</code> looks like a three character delimiter...and the code in the traceback doesn't match the code in your snippet.</span>
<span class="comment-copy"><code>pandas</code> doesn't allow 2 characters as delimiter in <code>pandas.to_csv()</code>. In pandas.to_csv() "delimiter" must be a 1-character string.</span>
