<div class="post-text" itemprop="text">
<p>So I've got about 5008 rows in a CSV file, a total of 5009 with the headers. I'm creating and writing this file all within the same script. But when i read it at the end, with either pandas pd.read_csv, or python3's csv module, and print the len, it outputs 4967. I checked the file for any weird characters that may be confusing python but don't see any. All the data is delimited by commas.</p>
<p>I also opened it in sublime and it shows 5009 rows not 4967.</p>
<p>I could try other methods from pandas like merge or concat, but if python wont read the csv correct, that's no use.</p>
<p>This is one method i tried.</p>
<pre><code>df1=pd.read_csv('out.csv',quoting=csv.QUOTE_NONE, error_bad_lines=False)
df2=pd.read_excel(xlsfile)

print (len(df1))#4967
print (len(df2))#5008

df2['Location']=df1['Location']
df2['Sublocation']=df1['Sublocation']
df2['Zone']=df1['Zone']
df2['Subnet Type']=df1['Subnet Type']
df2['Description']=df1['Description']

newfile = input("Enter a name for the combined csv file: ")
print('Saving to new csv file...')
df2.to_csv(newfile, index=False)
print('Done.')

target.close()
</code></pre>
<p>Another way I tried is</p>
<pre><code>dfcsv = pd.read_csv('out.csv')

wb = xlrd.open_workbook(xlsfile)
ws = wb.sheet_by_index(0)
xlsdata = []
for rx in range(ws.nrows):
    xlsdata.append(ws.row_values(rx))

print (len(dfcsv))#4967
print (len(xlsdata))#5009

df1 = pd.DataFrame(data=dfcsv)
df2 = pd.DataFrame(data=xlsdata)

df3 = pd.concat([df2,df1], axis=1)

newfile = input("Enter a name for the combined csv file: ")
print('Saving to new csv file...')
df3.to_csv(newfile, index=False)    
print('Done.')

target.close()
</code></pre>
<p>But not matter what way I try the CSV file is the actual issue, python is writing it correctly but not reading it correctly.</p>
<p>Edit: Weirdest part is that i'm getting absolutely no encoding errors or any errors when running the code...</p>
<p>Edit2: Tried testing it with nrows param in first code example, works up to 4000 rows. Soon as i specify 5000 rows, it reads only 4967.</p>
<p>Edit3: manually saved csv file with my data instead of using the one written by the program, and it read 5008 rows. Why is python not writing the csv file correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>I ran into this issue also. I realized that some of my lines had open-ended quotes, which was for some reason interfering with the reader.<p>
So for example, some rows were written as:</p>
<pre><code>GO:0000026  molecular_function  "alpha-1
GO:0000027  biological_process  ribosomal large subunit assembly
GO:0000033  molecular_function  "alpha-1
</code></pre>
<p>and this led to rows being read incorrectly. (Unfortunately I don't know enough about how csvreader works to tell you why. Hopefully someone can clarify the quote behavior!)</p>
<p>I just removed the quotes and it worked out.</p>
<p>Edited: This option works too, if you want to maintain the quotes: </p>
<pre><code>quotechar=None
</code></pre>
</p></div>
<div class="post-text" itemprop="text">
<p>My best guess without seeing the file is that you have some lines with too many or not enough commas, maybe due to values like <code>foo,bar</code>. </p>
<p>Please try setting <code>error_bad_lines=True</code>. From Pandas documentation: <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow">http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html</a> to see if it catches lines with errors in them, and my guess is that there will be 41 such lines. </p>
<blockquote>
<p>error_bad_lines : boolean, default True
  Lines with too many fields (e.g. a csv line with too many commas) will by default cause an exception to be raised, and no DataFrame will be returned. If False, then these “bad lines” will dropped from the DataFrame that is returned. (Only valid with C parser)</p>
</blockquote>
<p>The <code>csv.QUOTE_NONE</code> option seems to not quote fields and replace the current delimiter with escape_char + delimiter when writing, but you didn't paste your writing code, but on read it's unclear what this option does. <a href="https://docs.python.org/3/library/csv.html#csv.Dialect" rel="nofollow">https://docs.python.org/3/library/csv.html#csv.Dialect</a></p>
</div>
<span class="comment-copy">are you sure every line ends with a proper newline? Did you try <code>error_bad_lines=True</code>?</span>
<span class="comment-copy">Are you sure that the source file does not contain any encoding errors? Can you open it with <code>open()</code> without any errors?</span>
<span class="comment-copy">You use sure then there is no (guarded/shielded) newlines in the middle of field?</span>
<span class="comment-copy">@Tommy Yes, the way i'm writing the CSV in the script each row of data ends in a newline.</span>
<span class="comment-copy">@DaVinci what happens when <code>error_bad_lines=True</code>?</span>
<span class="comment-copy">I did try setting that to True, however, the len of the csv still outputs as 4967.</span>
<span class="comment-copy">@DaVinci do you have any values with your delimiter in them?</span>
<span class="comment-copy">I checked for that and no, no data values with commas in them.</span>
