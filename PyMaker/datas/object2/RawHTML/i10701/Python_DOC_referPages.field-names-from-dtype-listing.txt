<div class="post-text" itemprop="text">
<p>I'm using code from <a href="https://stackoverflow.com/questions/7008608/scipy-io-loadmat-nested-structures-i-e-dictionaries">scipy.io.loadmat nested structures (i.e. dictionaries)</a> to read a matlab structure into Python.  I want to make a list of names of fields that appear in the dtype listing.  My code is:</p>
<pre><code>matfile   =loadmat(dataDirStr + matFileName, struct_as_record=True) # a dictionary
theseKeys = matfile.keys()            #as list
thisDict  = matfile[ theseKeys[ 1 ] ] #type = void1152, size = (1, 118)
#
#screen display of contents is:
#
dtype    = [ ( 'Aircraft_Name', 'O'), ('Low_Mass', 'O') ]
</code></pre>
<p>So, with that in mind, I would like to create a listing of the entries in dtype:</p>
<pre><code>thisList = [ 'Aircraft_Name', 'Low_Mass' ] #etc., etc.
</code></pre>
<p>such that the order of names in the dtype entry is preserved.</p>
<p>Can you please help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use a list comprehension and pick up the first item from each tuple, in each iteration:</p>
<pre><code>thisList = [item[0] for item in dtype]
</code></pre>
<p>Or as a functional approach use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a>:</p>
<pre><code>thisList = next(zip(*dtype)) # in python 2.x zip(*dtype)[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [168]: dt=np.dtype([ ( 'Aircraft_Name', 'O'), ('Low_Mass', 'O') ])
In [169]: dt
Out[169]: dtype([('Aircraft_Name', 'O'), ('Low_Mass', 'O')])
In [170]: dt.names
Out[170]: ('Aircraft_Name', 'Low_Mass')
</code></pre>
<p>This tuple is handy for setting, or fetching, all fields, one by one:</p>
<pre><code>In [171]: x=np.empty((3,),dtype=dt)
In [172]: x
Out[172]: 
array([(None, None), (None, None), (None, None)], 
      dtype=[('Aircraft_Name', 'O'), ('Low_Mass', 'O')])
In [173]: for name in x.dtype.names:
     ...:     x[name][:]=['one','two','three']
     ...:     
In [174]: x
Out[174]: 
array([('one', 'one'), ('two', 'two'), ('three', 'three')], 
      dtype=[('Aircraft_Name', 'O'), ('Low_Mass', 'O')])
</code></pre>
<p><code>descr</code> is a list description of the variable's dtype; names can be pulled from that as well:</p>
<pre><code>In [180]: x.dtype.descr
Out[180]: [('Aircraft_Name', '|O'), ('Low_Mass', '|O')]
In [181]: [i[0] for i in x.dtype.descr]
Out[181]: ['Aircraft_Name', 'Low_Mass']
In [182]: x.dtype.names
Out[182]: ('Aircraft_Name', 'Low_Mass')
</code></pre>
</div>
<span class="comment-copy">Fair enough suggestions, but how do I access 'dtype' from its location inside the dict variable?  I can send the screen-shot if that helps.</span>
<span class="comment-copy">Data looks like this on screen (sorry)....</span>
<span class="comment-copy">([u'B788__'], [[99817]], [[140000]], [[160000]], [[43000]],       dtype=[('Aircraft_Name', 'O'), ('Low_Mass', 'O'), (</span>
<span class="comment-copy">Thank you.  However, the dt variable is embedded in the dict variable, as noted above, and it's what I want to retrieve.  You've given me the information to create it, and that's fine.  But, how about dynamically creating the list from the dtype within the dict variable?  Thank you.</span>
<span class="comment-copy">If <code>thisDict</code> is the variable, an array, then <code>thisDict.dtype</code> is its <code>dtype</code>, and <code>thisDict.dtype.names</code> are the field names.</span>
<span class="comment-copy">Bingo.  Thanks so much.</span>
