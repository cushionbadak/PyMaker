<div class="post-text" itemprop="text">
<p>I fully get the general principle of not catching all exception, as explained in this question, for instance (<a href="https://stackoverflow.com/questions/21553327/why-is-except-pass-a-bad-programming-practice">Why is "except: pass" a bad programming practice?</a>). Yet I have found myself writing this sequence to get the source of a file like object:</p>
<pre><code>    try:
        self.doc.source = source.geturl()
    except:
        try:
            self.doc.source = pathlib.Path(os.path.abspath(source.name)).as_uri()
        except:
            self.doc.source = None
</code></pre>
<p>Clearly with some spelunking I could figure out which specific errors to catch with a reasonable degree of confidence. But at is explained in this question (<a href="https://stackoverflow.com/questions/1591319/python-how-can-i-know-which-exceptions-might-be-thrown-from-a-method-call">Python: How can I know which exceptions might be thrown from a method call</a>) you can't ever be quite certain.</p>
<p>So is there a better way to do what I am doing here, which is essentially to say: try this and if it doesn't work try this and if that doesn't work do this. Since this is all about setting a single variable, and there is a fallback of setting it to None, it is not obvious to me wherein the peril lies in this construct. </p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe it'd be better to put it into a dedicated function ?</p>
<pre><code>def func(source):
   try:
       return source.geturl()
   except Exception:
       try:
           return pathlib.Path(os.path.abspath(source.name)).as_uri()
       except Exception:
           pass
</code></pre>
<h2>Notes on swallowing exceptions</h2>
<p>Ignoring any kind of exception is not the best pattern : it'd be better to know what call can raise what kind of exception.</p>
<p>Even if <code>except ...: pass</code> is bad, that's already what you were doing in your example, and here it's clear that we try another way if it fails.</p>
<p>The bad programming practice is basing the error handling on the ability to catch any kind of error. In itself, <code>except: pass</code> is better than <code>except: &lt;lots_of_things_that_wont_raise_again&gt;</code>. </p>
<p>However, the first answer in the post you referred to says something very sensible : <code>pass</code> semantically indicates that you won't do <strong>ANYTHING</strong> with the exception, and as you do not store in a variable, it also shows that you'll never be able to access it again (well you could, but still..). As /u/Aprillion/, you'll want to at least log these errors, because otherwise, you <strong>may be swallowing very useful debugging information</strong>, which could make your life (or others) much more difficult at some point.</p>
<p>For example, what happens if there's a bug hidden in <code>geturl</code>, that makes it raises exception in normal cases ? It may stay hidden for long, because this exception will be swallowed and never shown anywhere. Good luck to the debugger to find it !</p>
<h2>Ways to improve this</h2>
<ul>
<li>replace <code>except Exception</code> with the exceptions that could be raised</li>
<li>check before an attempt if it is going to fail, so that you don't have to catch an exception</li>
</ul>
<p>Additionally, you probably want to use a logger to save/show these exceptions somewhere, at least in DEBUG mode.</p>
<blockquote>
<p>Clearly with some spelunking I could figure out which specific errors to catch with a reasonable degree of confidence. But at is explained in this question (Python: How can I know which exceptions might be thrown from a method call) you can't ever be quite certain.</p>
</blockquote>
<p>Why would that change anything ? If <code>geturl</code> returns specific exception types, you'd only catch these, and you'd want other unexpected errors to bubble up to the interpreter.</p>
<p>The big problem with the givn approach is that if <code>geturl</code> is undefined, or not callable, or take more arguments, this error would not make the interpreter crash, even though it is a clear programming error. That's because <code>except:</code> or <code>except Exception:</code> will catch a lof of Python errors, should it be <code>AttributeError</code>, <code>NameError</code>, <code>ImportError</code> or even <code>SyntaxError</code>.</p>
<p>To conclude, I really think you'd prefer to replace <code>Exception</code> with the list of exceptions you can catch (and at least send the exceptions to a logger). Note that you can write it as such :</p>
<pre><code>   try:
       return source.geturl()
   except (ExceptionA, ExceptionB, ExceptionC):
       pass
</code></pre>
</div>
<span class="comment-copy">as long as you save the <a href="https://docs.python.org/3/library/logging.html#logging.exception" rel="nofollow noreferrer">logging.exception()</a> to a log file..</span>
<span class="comment-copy">I get that. I guess what I am asking myself is, what is the lesser of the two evils. If geturl fails for some reasons other than the source not being a URL, it is better for debugging purposes to have the program fail, but it may be better from the user perspective to have it continue with mildly reduced functionality. They will even get a warning down the line if the program is unable to resolve a URL relative to the current source, since that is why we need the self.doc.source variable in the first place. So a bug would not pass entirely unnoticed. So: lesser of two evils?</span>
<span class="comment-copy">The bigger of two evils is : sending useful information a blackhole. If if should work with reduced functionality, it should be upon clearly defined conditions, doing it based on "any kind of error" is bad code architecture.</span>
<span class="comment-copy">Also, you say "source not being a URL", what do you mean by that ? Are you doing all this because <code>source</code> can be one of two types, one who has a <code>name</code> attribute and the other one a <code>geturl</code> function ?</span>
<span class="comment-copy">A last thing : "better from the user perspective" could also mean "with clearly defined behaviour", which imply "failing on unexpected errors". The thing is to separate expected and unexpected errors, which you can't do if you <code>except Exception: ...</code> or <code>except:</code>.</span>
<span class="comment-copy">I meant, not being an object that has a <code>geturl</code> function, I suppose. Which by itself would raise an <code>AttributeError</code>. So it would be reasonable to catch the <code>AttributeError</code> and then have the program recover from unexpected errors where they are not fatal, but report them as unexpected errors and ask for a bug report? For instance, wrap this whole thing in another try, use 'except Exception' to catch unexpected exceptions, report/log them and continue?</span>
