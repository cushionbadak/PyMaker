<div class="post-text" itemprop="text">
<p>I was really confused by sys.exit() in python.
In <a href="https://docs.python.org/2/library/sys.html" rel="noreferrer">python documentation</a>, it says "Exit from Python"; does that mean when <code>sys.exit()</code> is called in a python program, the process will exit? If so, the code below shows a different result:</p>
<pre><code>import sys
import time
import threading

def threadrun():
    while(True):
        time.sleep(1)

if __name__=="__main__":
    t=threading.Thread(target=threadrun)
    t.start()
    sys.exit()
</code></pre>
<p>Launching this program in linux, result was not the expected one as python documentation says but still run in the system, so what does <code>sys.exit()</code> really do?</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the documentation <a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow noreferrer"><code>sys.exit()</code></a> raises <code>SystemExit</code>:</p>
<blockquote>
<p>Exit the interpreter by raising SystemExit(status).</p>
</blockquote>
<p>If <code>SystemExit</code> reaches the <a href="https://github.com/python/cpython/blob/836b6421484cbbe3de105d9c7cec9371422d1397/Python/pythonrun.c##L1170" rel="nofollow noreferrer">default exception handler</a>,
it calls <code>handle_system_exit()</code>, which more or less pushes through to <a href="https://github.com/python/cpython/blob/836b6421484cbbe3de105d9c7cec9371422d1397/Python/pythonrun.c#L411" rel="nofollow noreferrer"><code>Py_Finalize()</code></a>, which in turn calls <a href="https://github.com/python/cpython/blob/836b6421484cbbe3de105d9c7cec9371422d1397/Python/pythonrun.c#L419" rel="nofollow noreferrer"><code>wait_for_thread_shutdown()</code></a> in Python 2, so <code>sys.exit()</code> is the same as the normal <em>falling off the bottom of the main module</em> in waiting for all non-daemon threads to terminate.</p>
</div>
<div class="post-text" itemprop="text">
<p><sub>(Paraphrasing what's in the Python 2 documentation for <a href="https://docs.python.org/2/library/threading.html#thread-objects" rel="nofollow noreferrer">Thread Objects</a>)</sub></p>
<p>Normally a Python program exits only when there's nothing but daemon<sup>✶</sup>
 threads (ignoring itself) left running. The “main thread” object which corresponds to the initial thread of control in the program <em>isn't</em> a daemon thread. Threads created using <code>threading.Thread</code> inherit their daemonic status from the creating thread, so if that's the main thread, they will also be non-daemonic.</p>
<p>This means that <em>by default</em> any threads created and started by your main program will prevent it from exiting if they are still running when the main thread is terminated (by <code>sys.exit()</code> or simply by just hitting the end of its code). In other words, the program exits only when no alive <strong>non-daemon</strong> threads (in other words, only daemon ones) are left.</p>
<p>You can override this default behavior by explicitly setting<sup>✶✶</sup> the
<code>daemon</code> propertyof any
created thread objects to <code>True</code> <em>before</em> starting it.</p>
<pre><code>if __name__=="__main__":
    t = threading.Thread(target=threadrun)
    t.daemon = True  # Explicitly set property.
    t.start()
    sys.exit()
</code></pre>
<p>Which will allow the program to actually end when <code>sys.exit()</code> is called (although calling it explicitly like that isn't necessary since it's at the end of the script anyway).</p>
<hr/>
<p><sup>✶</sup> A daemon thread is a low priority thread that runs in background and does not prevent the interpreter from exiting. See <a href="https://stackoverflow.com/questions/190010/daemon-threads-explanation">Daemon Threads Explanation</a>.
</p>
<p><sup>✶✶</sup> In Python 3.3, a <em><code>daemon</code></em> keyword argument was added
to the <code>Thread</code>
<a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer">class constructor</a>,
which means that, starting from that version onwards, you can simply use:</p>
<pre><code>    # Sets whether the thread is daemonic via "daemon" keyword argument.
    t = threading.Thread(target=threadrun, daemon=True)
</code></pre>
<p>However, doing it separately via an explicit attribute assignment statement
still works, and would therefore be the more version-portable way of
doing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is easy. </p>
<p>In your case, the end of the program is when the last thread will be terminated. Maybe kind of join() method(as in Java) in python will wait for other threads. 
you can change <code>while(true)</code> to have finite method in sense of time.</p>
<pre><code>def threadrun():
i=1000_000_000_000
    while(i&gt;0):
        i=i-1
        time.sleep(1)
</code></pre>
<p>and watch another behave your program. </p>
<p>in advance sorry for my english(: </p>
<p>and please, read this article(: there is a good explanation how to play with threads in your case
<a href="https://stackoverflow.com/questions/19138219/use-of-threading-thread-join">Use of threading.Thread.join()</a></p>
<p>and </p>
<p>documentation
<a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/2/library/threading.html</a> (but relax, it is only for additional knowledge.</p>
<p>and read this article about daemon property(if you do not want to wait for others threads become terminated
<a href="https://stackoverflow.com/questions/4330111/python-thread-daemon-property">Python thread daemon property</a></p>
</div>
<span class="comment-copy">it waits for the thread to finish, the thread does not finish so it doesn't close, were you expecting it to forcefully stop the thread?</span>
<span class="comment-copy">i got it ,thank you anyway!</span>
<span class="comment-copy">All these links are broken. I think this is a good answer, but I'm not sure what all your links are referring to.</span>
<span class="comment-copy">@tmastny Let's fix those links, then. Check again, please. Curiously, those have been github "permalinks".</span>
<span class="comment-copy">They all work for me now, thanks for the help. And the <code>wait_for_threat_shutdown</code> link answered my question!</span>
<span class="comment-copy">Thanks. This is exactly the response I needed.</span>
