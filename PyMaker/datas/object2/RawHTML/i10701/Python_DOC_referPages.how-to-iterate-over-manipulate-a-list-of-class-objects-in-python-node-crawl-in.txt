<div class="post-text" itemprop="text">
<p>Can anyone help me with the an iteration over a list of class objects?</p>
<p>I want to setup a simulation of nodes interacting with each other in a decentralized network. Each node is created as an object in the class Node. 
Every node gets his name and a list of max three other nodes (also objects in sam class) he is connected to.</p>
<p>for the simulation later on it is necessary that each node has three lists.
l1 contains all nodes he is connected to
l2 contains all nodes the nodes from l1 are connected to
l3 contains all nodes the nodes from l2 are connected to</p>
<p>I want to create l2 and l3 dynamically. My idea was since every node knows the nodes he is directly conected to I just have to fetch l1 from every node. So far I have this (although I don't like how l2 is created now since its static).</p>
<pre><code>class Node:

    def __init__(self,nid,ports):
        self.id=nid
        self.port1=ports[0]
        self.port2=ports[1]
        self.port3=ports[2]
        self.l1=[self.port1,self.port2,self.port3]
        self.l2=[]
        self.l3=[]

    def node_crawl(self):
        self.l2=self.port1.l1+self.port2.l1+self.port3.l1

    def show_node(self):
        print (" Node-id:   ", self.id)
        print (" Net-Setup","\n","Port 1:   ",self.port1,"\n","Port 2: ",self.port2,"\n","Port 3:   ",self.port3)

if __name__ == '__main__':


    node1=Node("node1",[node2,node3,node6])
    node2=Node("node2",[node1,node3,node5])
    node3=Node("node3",[node2,node4,node6])
    node4=Node("node4",[node3,node5,node6])
    node5=Node("node5",[node2,node4])
    node6=Node("node6",[node3,node4,node1])

    node1.node_crawl()
</code></pre>
<p>I thought maybe I can write a for loop to use every element from the preceeding list. </p>
<pre><code>for i in self.l1:
    self.l2.append(self.l1[i].l1)
</code></pre>
<p>But that doesn't work. Python tells me that indices must be integers or slices. Any advice would be highly appreciated. Later I will have to clean the lists of double mentioned nodes any advice on that would be great too.
Cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>Okay so thanks to wwii I found the answer</p>
<pre><code> for i in self.l1:        
        self.l2.extend(i.l1)

 for i in self.l2:        
        self.l3.extend(i.l1)
</code></pre>
<p>nodes appearing double in the list can be eliminated with:</p>
<pre><code>from collections import OrderedDict as odict

self.l2=list(odict.fromkeys(self.l2))
self.l3=list(odict.fromkeys(self.l3))
</code></pre>
</div>
<span class="comment-copy">You don't have any female nodes?</span>
<span class="comment-copy">Check out the tutorial <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">Flow Control</a> section.  You are iterating over a list of things, you don't need an index - maybe <code>...append(i)</code>.</span>
<span class="comment-copy">Its pretty much unisex. with <code>...append(i)</code> i would only recreate the preceeding list. but i want a list of all the initial list for each element i.</span>
<span class="comment-copy">say initial list is l1= a,b,c a,b and c are objects who have their own initial list a.l1, b.l1, c.l1. So l2 should be a list of those three lists. for that first layer it is possible to not do it via a loop. but since with every layer this is increasing with the power of three this would get tidious pretty soon....</span>
<span class="comment-copy">Thanks wwii.  your comment pushed me in the right direction. cheers</span>
<span class="comment-copy">You might even want to use something more descriptive than <code>i</code> like <code>for port in self.li: ...</code></span>
