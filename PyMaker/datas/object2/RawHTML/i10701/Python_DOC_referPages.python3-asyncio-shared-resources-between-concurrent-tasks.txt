<div class="post-text" itemprop="text">
<p>I've got a network application written in Python3.5 which takes advantage of pythons Asyncio which concurrently handles each incoming connection. </p>
<p>On every concurrent connection, I want to store the connected clients data in a list. I'm worried that if two clients connect at the same time (which is a possibility) then both tasks will attempt to write to the list at the same time, which will surely raise an issue. How would I solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>asyncio does context switching only on <em>yield points</em> (<code>await</code> expressions), thus two parallel tasks are not executed at <strong>the same</strong> time.</p>
<p>But if race conditions are still possible (it depends on concrete code structure) you may use <a href="https://docs.python.org/3/library/asyncio-sync.html" rel="nofollow">asyncio synchronization primitives</a> and <a href="https://docs.python.org/3/library/asyncio-queue.html" rel="nofollow">queues</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is lots of info that is missing in your question.</p>
<ul>
<li>Is your app threaded? If yes, then you have to wrap your list in a <code>threading.Lock</code>.</li>
<li>Do you switch context (e.g. use <code>await</code>) between writes (to the list) in the request handler? If yes, then you have to wrap your list in a <code>asyncio.Lock</code>.</li>
<li>Do you do multiprocessing? If yes then you have to use <code>multiprocessing.Lock</code></li>
<li>Is your app divided onto multiple machines? Then you have to use some external shared database (e.g. Redis).</li>
</ul>
<p>If answers to all of those questions is <em>no</em> then you don't have to do anything since single-threaded async app cannot update shared resource parallely.</p>
</div>
<span class="comment-copy">if you're doing HTTP you should use <code>aiohttp</code>, which (AFAIK) takes care of all of that for you.</span>
<span class="comment-copy">Each client connection is handled by an individual task. Within each task, when the client is being handled, data is appended to a global list. <code>task = asyncio.Task(self._handle_client(client_reader, client_writer))         self.clients[task] = (client_reader, client_writer)</code> and within <code>_handle_client</code> the list is being appended to. Will this cause an issue if two clients connect at the exact same time?</span>
<span class="comment-copy">No, it's pretty safe.</span>
