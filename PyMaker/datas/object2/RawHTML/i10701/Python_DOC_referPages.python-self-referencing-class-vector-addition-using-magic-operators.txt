<div class="post-text" itemprop="text">
<p>I'm having trouble understanding how the self-reference for this class works in this code:</p>
<pre><code>class Vector2D:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  def __add__(self, other):
    return Vector2D(self.x + other.x, self.y + other.y)

first = Vector2D(5, 7)
second = Vector2D(3, 9)
result = first + second
print(result.x)
print(result.y)
</code></pre>
<p>--
Just to check if I'm understanding how magic methods work, in <code>result = first + second</code>, the argument <code>other</code> refers to <code>second</code> right?</p>
<p>--Edit:
Thanks, I guess that clears up my confusions regarding <code>other</code>.
I still don't get how this line works though: <code>return Vector2D(self.x + other.x, self.y + other.y)</code> i.e. the class <code>Vector2D</code> being referenced inside it</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>other</code> is the right-hand-side expression result, <code>second</code> in your case.</p>
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="nofollow"><code>object.__add__()</code> documentation</a>:</p>
<blockquote>
<p>For instance, to evaluate the expression <code>x + y</code>, where <code>x</code> is an instance of a class that has an <code>__add__()</code> method, <code>x.__add__(y)</code> is called.</p>
</blockquote>
<p>The expression <code>Vector2D(self.x + other.x, self.y + other.y)</code> creates a new instance of the class with new values for <code>x</code> and <code>y</code>, which here are constructed from the sum of the current instance <code>x</code> and <code>y</code> and the same attributes on the right-hand side instance.</p>
<p>A new instance is created because the normal semantics of <code>+</code> are to return a new instance, leaving the operands themselves untouched. Compare this to adding up two lists (<code>['foo', 'bar'] + ['bar', 'baz']</code>); there too a new list object is returned.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is equivalent to:</p>
<pre><code>result = first.__add__(second)
</code></pre>
<p>so:</p>
<ol>
<li><code>self</code> is <code>first</code></li>
<li><code>other</code> is <code>second</code></li>
<li><code>result</code> is the new <code>Vector2D</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>the argument <code>other</code> refers to <code>second</code>, right?</p>
</blockquote>
<p>Correct. You can verify that with a <code>print</code> inside <code>__add__</code>:</p>
<pre><code>class Vector2D:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  def __add__(self, other):
      print(other.x, other.y)
      return Vector2D(self.x + other.x, self.y + other.y)

first = Vector2D(5, 7)
second = Vector2D(3, 9)
result = first + second

&gt;&gt; 3 9
</code></pre>
</div>
<span class="comment-copy">"I still don't get how this line works though: <code>return Vector2D(self.x + other.x, self.y + other.y)</code>" - what exactly confuses you?</span>
<span class="comment-copy">Python doesnâ€™t use a "new" keyword to instanciate a new object from a class. The construction is simply a function call. So <code>Vector2D(...)</code> is the construction of a new instance of class <code>Vector2D</code>. Internally, the construction calls the <code>__new__</code> method and the the <code>__init__</code> method. The parameters are sent to this <code>__init__</code> method. You sould read the tutorial about classes: <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/classes.html</a></span>
<span class="comment-copy">I'm not sure I can explain it well but, my reference tutorial hasn't made any  previous examples regarding a class being called inside it. | Did it call the class inside it just so it can create an instance in <code>__init__</code>?</span>
<span class="comment-copy">@LaurentLAPORTE thanks. I guess my comment above is right?</span>
<span class="comment-copy">In <code>__add__</code> method, your are not "calling a class Inside it", your are calling its constructor. By "calling a class Inside it" do you mean recursive call? The vocabulary you use is blur, I think.</span>
