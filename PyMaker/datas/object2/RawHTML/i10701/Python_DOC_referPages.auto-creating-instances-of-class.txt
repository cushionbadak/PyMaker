<div class="post-text" itemprop="text">
<p>I'm trying to create instances of a class by loading a textfile and using some strings from that as input.</p>
<p>This is supposed to spit out all the scene headers from a film manuscript and create an instance of a Scene class for every time it reads a scene header that is characterized by starting with either INT or EXT.</p>
<p>While it does find all the scenes correctly, I am having trouble creating the actual instances. </p>
<p><strong>How do I make instances of Class in the create function, and then print them out ?</strong></p>
<pre><code>class Scene(object):
    def __init__(self, name, isint, isday):
        self.name = name
        self.isint = bool(isint)
        self.isday = bool(isday)

    def create(self):
        with open('output.txt', 'r') as searchfile:
             for line in searchfile:
                if 'INT' in line or 'EXT' in line:
                    return Scene()
                if line.startswith(INT):
                    Scene.isint == True
                if line.endswith('NAT\n'):
                    Scene.isday == False

    def __repr__(self):
        print(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your function shouldn't be a method of <code>Scene</code>, since it doesn't actually do anything but create a bunch of objects. You can use generators to emit your <code>Scene</code> instances as you parse the file:</p>
<pre><code>def read_scenes(filename):
    with open(filename, 'r') as handle:
        scene = Scene(None, None, None)

        for line in handle:
            if line.startswith('INT'):
                scene.isint = True

            if line.endswith('NAT\n'):
                scene.isday = False

            if 'INT' in line or 'EXT' in line:
                # Spit out the current scene
                yield scene

                # Create a new one
                scene = Scene(None, None, None)

for scene in read_scenes('output.txt'):
    print(scene)
</code></pre>
<hr/>
<p><strong>Original answer</strong></p>
<p>Your <code>create</code> function is an instance method, so it requires you create an instance of your class <em>first</em> and then call the <code>create</code> method. This is kind of backwards if you think about it, since your <code>create</code> method should not require an instance of a class, since it should be the one creating the instance.</p>
<p>The solution is to make your <code>create</code> method a <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow">class method</a>. Instance methods take in an <em>instance</em> of your class as their first argument, while class methods take in the <em>class itself</em>, letting you create instance of your class using different functions.</p>
<pre><code>class Scene(object):
    def __init__(self, name, isint, isday):
        self.name = name
        self.isint = bool(isint)
        self.isday = bool(isday)

    @classmethod
    def from_file(cls, filename, name):
        isint = None
        isday = None

        with open(filename, 'r') as searchfile:
             for line in searchfile:
                if 'INT' in line or 'EXT' in line:
                    return cls(name, isint, isday)

                if line.startswith(INT):
                    isint = True

                if line.endswith('NAT\n'):
                    isday = False
</code></pre>
<p>Since the function is a class method, you don't need an instance of your <code>Scene</code> class to call it:</p>
<pre><code>scene = Scene.from_file('output.txt', 'The Name')
</code></pre>
<p>It's equivalent to doing something like:</p>
<pre><code>name, isint, isday = parse_scene_file('output.txt')
scene = Scene(name, isint, isday)
</code></pre>
</div>
<span class="comment-copy">What is the name suppose to be from the output.txt?</span>
<span class="comment-copy">The entire line in "from line in searchfile"</span>
<span class="comment-copy">if you intend to make multiple <code>Scene</code> instances you should either construct a list of them in the <code>create</code> function and return the list at the end or better yet use a generator to <code>yield</code> the instances instead of returning a single one.</span>
<span class="comment-copy">This all makes sense in a beautiful way :D I do have one question. If I use Scene.from_file('output.txt', 'The Name'), then wouldn't I be creating just one instance with "The Name"?</span>
<span class="comment-copy">@JamesKolber: Yes, when you execute <code>return cls(name, isint, isday)</code>.</span>
<span class="comment-copy">but then how is this any different if it is only one instance?</span>
<span class="comment-copy">@JamesKolber: Oh, I understand what you're doing.</span>
<span class="comment-copy">what? I think your solution is great, but how do I instantiate the classmethod to create a lot of instances?</span>
