<div class="post-text" itemprop="text">
<p>I've just started learning regular expressions and the documentation for  <code>re.sub()</code> states:</p>
<blockquote>
<p><strong>Changed in version 3.5</strong>: Unmatched groups are replaced with an empty
  string.</p>
<p><strong>Deprecated since version 3.5, will be removed in version 3.6</strong>: Unknown
  escapes consist of '\' and ASCII letter now raise a deprecation
  warning and will be forbidden in Python 3.6.</p>
</blockquote>
<p>Is re.sub() deprecated? What should I use then?</p>
</div>
<div class="post-text" itemprop="text">
<p>You misunderstand the documentation. The <code>re.sub()</code> function is <strong>not deprecated</strong>. The deprecation warning concerns <em>specific syntax</em>.</p>
<p>Earlier in the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub()</code> documentation</a> you'll find this:</p>
<blockquote>
<p>Unknown escapes such as <code>\&amp;</code> are left alone.</p>
</blockquote>
<p>If you used and <em>unknown</em> escape with an <em>ASCII letter</em> the escape will no longer be ignored, you'll get a warning instead. This applies both to <code>re.sub()</code> replacement patterns <em>and</em> to the regular expression patterns. The same warning is placed in the section on regex pattern syntax.</p>
<p>The <em>Changed in version 3.5</em> line also concerns how <code>re.sub()</code> works. Rather than raise an exception when there is no matching group for a <code>\number</code> backreference, an empty string is inserted at that location.</p>
</div>
<div class="post-text" itemprop="text">
<p>The two entries are not related, and <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><strong><code>re.sub</code></strong></a> will  <em>not</em> be deprecated.</p>
<p>In Python version earlier than 3.5 <code>re.sub</code> failed if a backreference was used to a capturing group that did not participate in the match. See <a href="https://stackoverflow.com/a/35516425/3832970"><strong>Empty string instead of unmatched group error</strong></a> SO question.</p>
<p>An <a href="http://ideone.com/UVzXOQ" rel="nofollow noreferrer">example</a> where the failure occurred:</p>
<pre><code>import re
old = 'regexregex'
new = re.sub(r'regex(group)?regex', r'something\1something', old)
print(new) # =&gt; fail as there is no "group" in between "regex" and "regex" in "regexregex"
#    and Group 1 was not initialized with an empty string, i.e. remains null
</code></pre>
<p>As for the second one, it only says that there will be a warning (and later forbidden) if you use an <em>unknown for a regex engine</em> literal backslash followed with an ASCII character. The backslash was just ignored in them before, in Python 2.x through 3.5, <code>print(re.sub(r'\j', '', 'joy'))</code> <a href="http://ideone.com/gAF65v" rel="nofollow noreferrer">prints <code>oy</code></a>. So, these will be forbidden in Python 3.6.</p>
</div>
<span class="comment-copy"><code>re.sub</code> is <b>not</b> deprecated. Only specific replacement syntax is.</span>
<span class="comment-copy">Are you getting a warning? Then please share the code that generated that warning. If not, you have nothing to worry about.</span>
<span class="comment-copy">@MartijnPieters oh, I misread this. Thanks. UPD. I don't get any warnings. Just started with docs.</span>
<span class="comment-copy">I also tried it and did not get any warnings, but I added more examples to my answer.</span>
<span class="comment-copy">A <code>\digit</code> is not an <i>escape sequence</i>, it is a backreference consisting of a literal <code>\</code> + a <i>number</i> (there are groups with IDs more than <code>9</code>).</span>
<span class="comment-copy">@Wiktor: right, but it is still an escape sequence, one that <i>signifies</i> a backreference. Just like <code>\n</code> is an escape sequence that signifies a newline.</span>
<span class="comment-copy">The <code>"\n"</code> is an escape sequence, but <code>r"\n"</code> is not an escape sequence, it is just a combination of <code>\</code> and <code>n</code> - I doubt any regex reference refers to them (and <code>\w</code>, <code>\d</code>, <code>\S</code>, etc.) as <i>escape sequences</i>.</span>
<span class="comment-copy">@WiktorStribi≈ºew the regex engine still interprets the <code>\n</code> combination as special. You match a literal newline character with them.</span>
<span class="comment-copy">Right, I just would not call it an escape sequence. Maybe I am too used to Microsoft terminology, where <i>escape sequence</i> refers to the string literals <code>\n</code>, <code>\r</code>, <code>\f</code>, <code>\a</code>, etc.</span>
<span class="comment-copy">Thank you for the explanation. Such a dumb question.</span>
<span class="comment-copy">Well, the <code>re.sub</code> has been bugging for a long time, it is really a great change that came with Python 3.5. As for the unknown escape sequences, almost every Python regex SO (good) answer states that it is best practice to use <i>raw string literals</i> to define regex patterns. Now, it will be supported by these warnings.</span>
<span class="comment-copy">Rather than describe the <code>re.sub</code> issue here, I hope the link to one of my answers will provide extensive reference on that issue that will remain in Python 2.x.</span>
<span class="comment-copy">Python's too-forgiving string literals have always bugged me, but that's not what the warning is about.  It's referring to unknown <i>regex</i> escapes, like <code>\j</code>.  Python has always ignored the backslash, which is arguably wrong and definitely inconsistent with other flavors.</span>
<span class="comment-copy">@AlanMoore: I see, I fixed that and updated with more illustrations.</span>
