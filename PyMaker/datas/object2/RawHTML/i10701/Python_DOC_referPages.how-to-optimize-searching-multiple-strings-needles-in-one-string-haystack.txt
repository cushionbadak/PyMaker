<div class="post-text" itemprop="text">
<p>I need to know if either/all needle are found in a haystack. I assume there's a way to optimize the time for searching.  For example:</p>
<pre><code>haystack = "xxxxxefgyyy"
needles = [ 'ezz', 'efg', 'eee', 'b', ... ]
</code></pre>
<p>In this example an optimized method would probably sort the needles by first letter(s). After matching "ezz" in the haystack, there's no point in searching haystack all over again.  Ideally for the next needle ("egh"), the haystack would be searched from the last position of 'e', and not from the beginning ('xxx..').</p>
<p>What is the name for such an algorithm?</p>
<p>What are the python implementations for that?</p>
<p>notes:</p>
<ul>
<li>my current program searches thousands of known needles in an unknown text.</li>
<li>In this case i just need to check for existence (true/false)</li>
<li>in this case i search if any needle exists ("OR" search). Assume that most needles need to be searched anyway (@marko).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Maybe there is a more efficient implementation for that but you can simply use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">re</a>. For a really big <code>needles</code> this might not be ideal - don't know where  "really big" starts.</p>
<pre><code>import re

haystack = "xxxxxefgyyy"
needles = [ 'ezz', 'efg', 'eee', 'b']

needles_re=re.compile("|".join(map(re.escape,needles)))

for m in needles_re.finditer(haystack):
    print(m.group(0))
</code></pre>
</div>
<span class="comment-copy">I don't get it, do you search in haystack for each needle ? what do you need, only check exsistance, return the index, do you need to find all occurences of them ..</span>
<span class="comment-copy">@BerryTsakala What if your haystack is "xxxefgezezezzyyy"? Don't we have to go back?</span>
<span class="comment-copy">The <a href="https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm" rel="nofollow noreferrer">Aho-Corasick method</a> is a classical algorithm for multiple string searching.</span>
<span class="comment-copy">@be_good_do_good  in your case we can at least search from the 1st 'e' - we don't have to start all over from the beginning of the string</span>
<span class="comment-copy">@MarkoMackic updated my questions; see "notes" section</span>
<span class="comment-copy">Actually, the re module will optimize the search by searching for all the needles at once.</span>
<span class="comment-copy">as I wrote, i have thousands of "needles": len(needles) &gt; 5000. Can "re" handle such quantity efficiently?</span>
<span class="comment-copy">I have tried with <code>needles=[str(i) for i in xrange(100000)]</code> and <code>haystack="".join(needles)</code> - compiling the re takes a about a second but finditer looks instant.</span>
