<div class="post-text" itemprop="text">
<p>So here is my code:</p>
<pre><code>import unittest

class Primes:
    @staticmethod
    def first(n):
    &lt;python code here&gt;

class Test(unittest.TestCase):
    def __init__(self):
        pass
    def assert_equals(self, l, m):
        self.assertEqual(l, m)

Test = Test()
Test.assert_equals(Primes.first(1), [2])
</code></pre>
<p>Whenever I run my code, I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "firstNPrimes.py", line 37, in &lt;module&gt;
    Test.assert_equals(Primes.first(1), [2])
  File "firstNPrimes.py", line 34, in assert_equals
    self.assertEqual(l, m)
  File "/usr/lib/python3.4/unittest/case.py", line 796, in assertEqual
    assertion_func = self._getAssertEqualityFunc(first, second)
  File "/usr/lib/python3.4/unittest/case.py", line 777, in _getAssertEqualityFunc
    asserter = self._type_equality_funcs.get(type(first))
AttributeError: 'Test' object has no attribute '_type_equality_funcs'
</code></pre>
<p>I don't understand what the problem is here.</p>
</div>
<div class="post-text" itemprop="text">
<p>You get the error because you're using <code>unittest</code> incorrectly. Per <a href="https://docs.python.org/3/library/unittest.html#basic-example" rel="nofollow">the example in the docs</a>, your tests should look like:</p>
<pre><code>import unittest

class TestPrimes(unittest.TestCase):

    def test_singlePrime_returnsListContainingTwo(self):
        self.assertEqual(Primes.first(1), [2])

    def test_whateverCase_expectedOutcome(self):
        self.assertEqual(Primes.first(...), ...)

if __name__ == '__main__':  #Â optional, but makes import and reuse easier
    unittest.main()
</code></pre>
<p>You can't just instantiate the test case class yourself and call the methods, that skips all of the test discovery and setup.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your methods look fine to me, and mimic what I see in the example code provided through the help function.</p>
<p>import unittest
help(unittest)</p>
<p>I have the same problem using a debs build in a virtual box working in a python 2.7 environment.  For some reason only the assertEqual method is problematic. assertAlmostEqual (scientific assert equal), assertSequenceEqual, assertItemEqual, etc. have no problems.  </p>
<p>Since you are subclassing unittest.TestCase the class you define is inheriting all the methods of unittest.TestCase class, including the method assertEqual.  </p>
<p>for your code I can run (from the command line in python 2.7):</p>
<blockquote>
<blockquote>
<blockquote>
<p>import testing_code as t</p>
<p>test_object = t.Test()</p>
<p>t.assertSequenceEqual([4,5,6] , [4,5,6]) </p>
<p>t.assertNotEqual(4,7)</p>
</blockquote>
</blockquote>
</blockquote>
<p>and no problems... I get your same errors trying a simple assertEqual method.  I don't think this is a code structure/misuse of unittest problem, and am pretty sure this is an environment/build problem. I decided i needed an assert equal as a method on my class so i just made a simple one:</p>
<pre><code> def AssertEqual(self, a, b):
    if a!=b:
        msg= 'inputs unequal: a, b:', a, b
        raise ValueError, msg
</code></pre>
</div>
<span class="comment-copy">What made you think that was the correct way to actually execute the tests? You're bypassing all of the machinery that makes it work, you can't just call the test method directly. Read <a href="https://docs.python.org/3/library/unittest.html#basic-example" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">New to unit-testing in Python. Looked up a few examples to get the ground running. I'm trying to solve a question on CodeWars, so just replicated their tests to try solutions on my computer before I post it online.</span>
<span class="comment-copy">Your test should look like <code>self.assertEqual(Primes.first(1), [2])</code>, and you should run it with <code>unittest.main</code> rather than instantiating the <code>TestCase</code> and calling its methods. Then the test setup and discovery is done for you. Otherwise you might as well just write <code>assert Primes.first(1) == [2]</code>.</span>
<span class="comment-copy">But If I have more than one test would I include all of them under the same method or different methods, e.g., <code>test_p1</code>, <code>test_p2</code>, etc?</span>
<span class="comment-copy">If you want to setup your environment like CodeWars, this is the link to the CodeWars Test module: <a href="https://github.com/ChristianECooper/CodeWars-Python-TestFramework" rel="nofollow noreferrer">github.com/ChristianECooper/CodeWars-Python-TestFramework</a>. Hope it helps!</span>
<span class="comment-copy">Ah okay, thanks!</span>
