<div class="post-text" itemprop="text">
<p>I am currently working on Project Euler Problem 4 (<a href="https://projecteuler.net/problem=4" rel="nofollow">https://projecteuler.net/problem=4</a>) and am consistently getting an error when I try to run my code. I have looked at other questions regarding the 'int' object is not iterable, but have not found one that has helped me so far. Here is my current code:</p>
<pre><code># Euler 4
# Find the largest palindrome made from the product of two 3-digit numbers
j = []
i = None
for x,y in range(1,1000):
    j.append(x*y)

    for i in range(1,j.length):
        if (str(j[i]))[::-1] == str(j[i]):
            print j
</code></pre>
<p>When I run this, I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Daniel Bashir\Desktop\HMC\Projects\Python\Project Euler\PE4.py", line 5, in &lt;module&gt;
    for x,y in range(1,1000):
TypeError: 'int' object is not iterable
</code></pre>
<p>Most of the fixes I have seen for this for loop issue involve changing "for a in b" to "for a in range...", but I already have that syntax here.</p>
<p>Could anyone help me figure out what is wrong?</p>
<p>Any general comments about my code are also welcome. I'm just a beginner!</p>
</div>
<div class="post-text" itemprop="text">
<p>range(start, end) yields integers</p>
<p>using this</p>
<pre><code>for x,y in range(1,1000):
</code></pre>
<p>you are trying to iterate over an integer (1)
you can't iterate over an integer</p>
<p>you want</p>
<pre><code>for x in range(1,1000):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying (without realizing it) to iterate over each integer yielded by the <code>range</code> function:</p>
<pre><code>for x,y in range (1,1000):
    j.append(x*y)
</code></pre>
<p>The comma in <code>x,y</code> makes those three characters a single 2-tuple, which is <em>not</em> the same as two variables <code>x</code> and <code>y</code>... especially when they're on the left-hand side of an assignment statement.  Yes, <code>for</code> is an assignment statement --- about a thousand of them, in your case --- with the <code>x,y</code> tuple on the left side and an integer on the right:</p>
<pre><code>(x, y) = 1     # TypeError: 'int' object is not iterable
(x, y) = 2     # It never gets this far...
#...
(x, y) = 1000  # ...but it's trying to.
</code></pre>
<p>Assigning to a tuple uses <strong>sequence unpacking</strong> (described at the end of the "<a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">Tuples and Sequences</a>" section), which iterates over the values and assigns them to the variables inside the tuple.  But there is no sequence of values in your code, only an <code>int</code>, which leads directly to the "'int' object is not iterable" error message.</p>
<p>As <a href="https://stackoverflow.com/questions/38888087/4116239">luke_aus answered</a>, you can solve the immediate problem by replacing the tuple with a lone variable, but that means <code>y</code> never gets assigned:</p>
<pre><code>for x in range(1, 1000):
    j.append(x * y)  # NameError: name 'y' is not defined
</code></pre>
<p>In this case, though, you don't need <code>y</code> at all.  It's always equal to <code>x</code>, so just use <code>x</code>:</p>
<pre><code>for x in range(1, 1000):
    j.append(x * x)
</code></pre>
<p>Or, if you really <em>will</em> need that <code>y</code> later, just assign <code>y</code> whenever "later" happens:</p>
<pre><code>for x in range(1, 1000):
    j.append(x * x)
    #...
    y = something_else()  # Later is now!
    do_something_with_both(x, y)
</code></pre>
</div>
<span class="comment-copy">What do you think <code>range(1, 1000)</code> produces? What do you expect each <code>x</code> and <code>y</code> to be?</span>
<span class="comment-copy">If you're a beginner, I'd <i>very highly recommend</i> completing a class or tutorial before jumping into coding challenges.</span>
<span class="comment-copy">Following up on TigerhawkT3's first comment, <code>x, y</code> is <i>not</i> the same as a lone <code>x</code> followed by a lone <code>y</code>.</span>
<span class="comment-copy">@TigerhawkT3 I see that this isn't exactly the way to produce all of the products of numbers from 1 to 1000... I'll think about this some more.</span>
<span class="comment-copy">@TigerhawkT3 I have done a few tutorials/classes! I still consider myself a relative novice, though.</span>
<span class="comment-copy">To clarify, <code>range(start, end)</code> doesn't return an integer - it yields integers when you iterate over it.</span>
<span class="comment-copy">@TigerhawkT3 true dat. Otherwise you would be stuck in an infinite loop! updated.</span>
