<div class="post-text" itemprop="text">
<p>For example if q = 2, then i have to generate all sequence between [1,1] to [2,2].
if q = 3, then generate sequence between [1,1,1] to [3,3,3]. for q = 4, then generate sequence between [1,1,1,1] to [4,4,4,4], etc..</p>
<p>example of sequence .
for q = 3</p>
<pre><code>(1, 1, 1)
(1, 1, 2)
(1, 1, 3)
(1, 2, 1)
(1, 2, 2)
(1, 2, 3)
(1, 3, 1)
(1, 3, 2)
(1, 3, 3)
(2, 1, 1)
(2, 1, 2)
(2, 1, 3)
(2, 2, 1)
(2, 2, 2)
(2, 2, 3)
(2, 3, 1)
(2, 3, 2)
(2, 3, 3)
(3, 1, 1)
(3, 1, 2)
(3, 1, 3)
(3, 2, 1)
(3, 2, 2)
(3, 2, 3)
(3, 3, 1)
(3, 3, 2)
(3, 3, 3)
</code></pre>
<p>i have tried this "<a href="https://stackoverflow.com/questions/31552101/python-generating-all-nondecreasing-sequences">Python generating all nondecreasing sequences</a>"  but not getting the required output.</p>
<p>currently i am using this code,</p>
<pre><code>import itertools

def generate(q):
    k = range(1, q+1) * q
    ola = set(i for i in itertools.permutations(k, q))
    for i in sorted(ola):
        print i

generate(3)
</code></pre>
<p>i need another and good way to generate this sequence.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use itertools.product with the repeat parameter:</p>
<pre><code>q = 2
list(itertools.product(range(1, q + 1), repeat=q))
Out: [(1, 1), (1, 2), (2, 1), (2, 2)]

q = 3

list(itertools.product(range(1, q + 1), repeat=q))
Out: 
[(1, 1, 1),
 (1, 1, 2),
 (1, 1, 3),
 (1, 2, 1),
 (1, 2, 2),
 ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you want <code>itertools.product()</code>, which does all possible combinations of the iterable elements. <code>itertools.permutations()</code> does not repeat elements, and <code>itertools.combinations()</code> or <code>itertools.combinations_with_replacement()</code> only goes in sorted order (e.g. the first element of the input iterable won't be the last element of the result).</p>
<pre><code>from itertools import product

def generate(q):
    assert q &gt; 0  # not defined for &lt;= 0
    return list(product(range(1,q+1), repeat=q))

generate(3)  # [(1,1,1), (1,1,2), ..., (3,3,2), (3,3,3)]
</code></pre>
<p>See: <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">https://docs.python.org/3/library/itertools.html</a></p>
</div>
<span class="comment-copy">So clean and simple!</span>
