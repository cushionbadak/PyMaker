<div class="post-text" itemprop="text">
<p>In a dictionary, I want to make sure that a specific key has a specific encoding.</p>
<pre><code>test_dictionary = { k:v.encode('latin-1') if k=="test_key" else k:v for k,v in test_dictionary.items() }
</code></pre>
<p>I get <code>SyntaxError</code>. I expected this to be allowed though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this instead:</p>
<pre><code>test_dictionary = { k:v.encode('latin-1') if k=="test_key" else v for k,v in test_dictionary.items() }
</code></pre>
<p>The second <code>:</code> has been removed so the inline <code>if</code> either encodes <code>v</code>, or leaves it as it is depending on the condition.</p>
<p>To clarify I've added parentheses to the expression below to make it clearer that this is the "value" part of the list comprehension:</p>
<pre><code>{ k: (v.encode('latin-1') if k=="test_key" else v) for k,v in test_dictionary.items() }
     ^___________________________________________^
</code></pre>
</div>
<span class="comment-copy">For reference: <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">Conditional expression syntax</a> and <a href="https://docs.python.org/3/reference/expressions.html#dictionary-displays" rel="nofollow noreferrer">Dict comprehension syntax</a></span>
<span class="comment-copy">Note that you could use the if/else for the key part as well, just not in combination (as the <code>:</code> itself is not part of an expression). If you still want to specify completely different key value pair based on a condition, you can use the "old" syntax: <code>dict((k, v) if condition else (v, k) for k, v in d.iteritems())</code></span>
<span class="comment-copy">Got it. I guess that without your parenthesis the expression is just ambiguous unless you know beforehand how it's interpreted. Thank you.</span>
<span class="comment-copy">@oneloop: the expression is not ambiguous and the parens are not required - I just put them there to make it clearer to you.</span>
<span class="comment-copy">@mhawke It is ambiguous in the sense that's an ad hoc decision by the python core developer on how that particular idiom should work. They could've decided to make it the way I was expecting, but didn't</span>
