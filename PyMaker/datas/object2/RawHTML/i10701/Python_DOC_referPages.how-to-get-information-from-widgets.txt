<div class="post-text" itemprop="text">
<p>I have a PyQt program and in this project I have some calculations based on earlier set preferences.</p>
<p>As an example, I created a small calculator which contains the following files:</p>
<p><em>example_run_vars.py</em>:</p>
<pre><code>from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(324, 332)
        self.gridLayout = QtWidgets.QGridLayout(Dialog)
        self.gridLayout.setObjectName("gridLayout")
        self.B = QtWidgets.QLabel(Dialog)
        self.B.setObjectName("B")
        self.gridLayout.addWidget(self.B, 0, 0, 1, 1)
        self.A_val = QtWidgets.QLineEdit(Dialog)
        self.A_val.setObjectName("A_val")
        self.gridLayout.addWidget(self.A_val, 0, 1, 1, 1)
        self.A = QtWidgets.QLabel(Dialog)
        self.A.setObjectName("A")
        self.gridLayout.addWidget(self.A, 1, 0, 1, 1)
        self.B_val = QtWidgets.QLineEdit(Dialog)
        self.B_val.setObjectName("B_val")
        self.gridLayout.addWidget(self.B_val, 1, 1, 1, 1)
        self.Zerocheck = QtWidgets.QCheckBox(Dialog)
        self.Zerocheck.setObjectName("Zerocheck")
        self.gridLayout.addWidget(self.Zerocheck, 1, 2, 1, 1)
        self.math = QtWidgets.QComboBox(Dialog)
        self.math.setObjectName("math")
        self.gridLayout.addWidget(self.math, 2, 1, 1, 1)
        self.math_else = QtWidgets.QComboBox(Dialog)
        self.math_else.setObjectName("math_else")
        self.gridLayout.addWidget(self.math_else, 3, 1, 1, 1)
        self.Run = QtWidgets.QPushButton(Dialog)
        self.Run.setObjectName("Run")
        self.gridLayout.addWidget(self.Run, 4, 1, 1, 1)
        self.Answer = QtWidgets.QLineEdit(Dialog)
        self.Answer.setReadOnly(False)
        self.Answer.setObjectName("Answer")
        self.gridLayout.addWidget(self.Answer, 5, 1, 1, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.B.setText(_translate("Dialog", "A: "))
        self.A.setText(_translate("Dialog", "B: "))
        self.Zerocheck.setText(_translate("Dialog", "ZeroCheck"))
        self.Run.setText(_translate("Dialog", "Run"))
</code></pre>
<p><em>example.py</em>:</p>
<pre><code>import sys, os
from PyQt5 import QtCore, QtGui, QtWidgets
from example_run_vars import Ui_Dialog  

class example(QtWidgets.QDialog):
    def __init__(self, parent=None):
        # QtGui.QWidget.__init__(self, parent)  # PyQt4
        super(example, self).__init__(parent)  # pyQt5
        self.ui = Ui_Dialog() 
        self.ui.setupUi(self)
        self.ui.retranslateUi(self)


        self.ui.math.addItem('Add')
        self.ui.math.addItem('Substract')
        self.ui.math.addItem('Multiply')
        self.ui.math.addItem('Divide')
        self.ui.math.addItem('Power')
        self.ui.math.addItem('Sqrt')
        self.ui.math.activated[str].connect(self.dosomething)

        self.ui.math_else.addItem('math function x')
        self.ui.math_else.activated[str].connect(self.dosomething)

        self.ui.Zerocheck.setChecked(False)
        self.ui.Zerocheck.clicked.connect( self.dosomething)

        self.ui.Run.clicked.connect(self.calculate)

    def a_changed(self):
        pass

    def b_changed(self):
        pass

    def calculate(self):
        # return value in Answer text box
        pass

    def dosomething(self):
        # arbritary thing i realy don't know if i need it...
        pass

if __name__ == "__main__":
    import sys
app = QtWidgets.QApplication(sys.argv)
exampleDialog = QtWidgets.QDialog() 
examplepanel = example()
examplepanel.show()
sys.exit(app.exec_())
</code></pre>
<p>The idea is, when I press the run button in the script, it gives an answer in the textbox. The point is that I have no idea what is the easiest (or programmically the best) method for returning the answer.</p>
<p>I have an idea there are two or tree options:</p>
<ol>
<li>Every checkbox/combobox/textbox does something and puts this somewhere, and the calculate button reads this out.</li>
<li>When calculating, read out all checkboxes/comboboxes/textboxes and add this to the function.</li>
<li>A combination of those two.</li>
</ol>
<p>What is the best method of dealing with kind of situation, and why?</p>
</div>
<div class="post-text" itemprop="text">
<p>The data is <em>already</em> stored in the widgets, so it is inefficient make another copy of it. Also, you would need to set up handlers for each individual widget, which is unnecessarily complicated. In general, it is best to gather all the information from the widgets at the point when the calculation is made.</p>
<p>In your example, I would suggest you keep the <code>calculate</code> slot connected to the run button, but get rid of all the other signals/slots. You should then create functions for all the mathematical operations you need. Each of these functions <strong>must</strong> have two arguments, which will take the A/B values from the line-edits. You could use some of the functions from the <a href="http://docs.python.org/3/library/operator.html#module-operator" rel="nofollow">operator module</a> for this, or just write your own:</p>
<pre><code>def add_func(a, b):
    return a + b
</code></pre>
<p>You can then link these functions directly to the combo-box items like this:</p>
<pre><code>    self.ui.math.addItem('Add', add_func)
    self.ui.math.addItem('Substract', sub_func)
    self.ui.math.addItem('Multiply', mult_func)
</code></pre>
<p>With that in place, the <code>calculate</code> slot would then look something like this:</p>
<pre><code>    def calculate(self):
        a = float(self.ui.A_val.text())
        b = float(self.ui.B_val.text())
        # get the linked function from the combo-box
        func = self.ui.math.currentData()
        # calculate the answer
        answer = func(a, b)
        # show the new answer
        self.ui.Answer.setText(str(answer))
</code></pre>
<p>Doing things this way makes it very easy to add, remove or re-order the functions in the combo-box (i.e. the <code>calculate</code> slot never has to change).</p>
</div>
