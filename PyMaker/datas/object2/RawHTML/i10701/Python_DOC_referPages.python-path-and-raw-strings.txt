<div class="post-text" itemprop="text">
<p>I have some problems with the name of path + file (which is an input for a function). This works:</p>
<pre><code>result=r"D:\final\Res.mat"
</code></pre>
<p>This does not work:</p>
<pre><code>result="D:\\final\\Res.mat"
</code></pre>
<p>What I would like to do is the following (but also does not work <code>[Errno 22] invalid mode ('rb') or filename:</code>):</p>
<pre><code>path = "D:\final"
nameFile= "Res"

result=''+ path+ '\\' + nameFile'mat'+''
</code></pre>
<p>How do I get the "r" in front of the name without using " "? Or, is there a possibility without putting <code>r</code> in front of the path?</p>
</div>
<div class="post-text" itemprop="text">
<p>My interpreter suggests that you are mistaken in your belief that the second example does not work, because</p>
<pre><code>&gt;&gt;&gt; r"D:\final\Res.mat" == "D:\\final\\Res.mat"
True
</code></pre>
<p>The correct way to build file paths from components is by using the <code>os.path.join</code> function, which can take multiple arguments and is portable across platforms. I would suggest you try something like</p>
<pre><code>result = os.path.join(path, nameFile+".mat")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do I get the "r" in front of the name without using " "?</p>
</blockquote>
<p>Just use <code>os.path.join</code>:</p>
<pre><code>import os

path = r"D:\final"
nameFile= "Res.mat"

result = os.path.join(path, nameFile)
print(result)
&gt;&gt; D:\final\Res.mat
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>r</code> prefix is used to indicate the you want the string to be evaluated as "raw", keeping backslashes as-is.</p>
<p>Try this:</p>
<pre><code>path = r"D:\final"
nameFile = "Res"

result = path + '\\' + nameFile + 'mat'
</code></pre>
<p>As you can see, I added <code>r</code> before the string expression that contains a non-escaped backslash.</p>
<p>To see the difference, try doing :</p>
<pre><code>print("\\")
print(r"\\")
</code></pre>
<p>(Without the parentheses if you're using Python2)</p>
<p>Also, I recommend using the <code>pathlib</code> module of the standard library to handle paths properly. This will also help a lot if you try to make your code portable:</p>
<pre><code>from pathlib import Path
(Path("D:/final") / path / nameFile).with_suffix('.mat')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need use a raw string for the path variable, or escape the backslash:</p>
<pre><code>path = r"D:\final"
</code></pre>
<p>You can see the difference here:</p>
<pre><code>&gt;&gt;&gt; "D:\final"
'D:\x0cinal'
&gt;&gt;&gt; r"D:\final"
'D:\\final'
</code></pre>
<p>In the first case <code>'\f</code>' is the form feed character 0x0c.</p>
<p>Also, use <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow"><code>os.path.join()</code></a> to construct pathnames:</p>
<pre><code>import os.path

path = r"D:\final"
nameFile = "Res.mat"

result = os.path.join(path, nameFile)
&gt;&gt;&gt; result
'D:\\final\\Res'
</code></pre>
<p>Since you explicitly append the string literal <code>.mat</code> to <code>nameFile</code>, why not simply define <code>nameFile</code> with the <code>.mat</code> extension? If this needs to be dynamic, just add it on like this:</p>
<pre><code>extension = '.mat'
result = os.path.join(path, nameFile + extension)
</code></pre>
</div>
