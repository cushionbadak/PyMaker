<div class="post-text" itemprop="text">
<p>I have to two arrays (in my code below): "donlist" is a list of random donation amounts between $1 and $100, and "charlist" is a list of random charity numbers between 1 and 15. I need to create a third array using the total donations for each charity. So if charity #3 appears 8 times in "charlist", I have to get the sum of the corresponding floats from "donlist". I have absolutely no idea how to do this and have been trying to figure it out for the past 2-3 hours now. Does anyone know how to do it? Thank you.</p>
<pre><code>import random
from array import *

counter = 0
donlist = []
charlist = []

while counter != 100:
    d = random.uniform(1.00,100.00)
    c = random.randint(1,15)
    counter +=1
    donlist.append(d)
    donlist = [round(elem,2) for elem in donlist]
    charlist.append(c)
    if counter == 100:
        break
</code></pre>
<p>Sample output:</p>
<pre><code>Charity    Total Donations
1          802.65
2          1212.25
3          108.25
4          9324.12
5          534.98
6          6235.12
7          223.18
8          11.12
9          3345.68
10         856.68
11         7123.05
12         6125.86
13         1200.25
14         468.32
15         685.26
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>dict</code>, with the charity number as the key. You simply add the donation to the corresponding <code>dict</code> value. If the <code>dict</code> element doesn't exist yet, set it to zero as its initial value.
I'm using <code>defaultdict</code>: the <code>lambda: 0</code> argument will guarantee a zero value if the key doesn't exist yet, otherwise you can just add to it.</p>
<p>Updating your script (with a few minor other alterations):</p>
<pre><code>import random
from collections import defaultdict

donlist = []
charlist = []
totals = defaultdict(float)

counter = 0
while counter != 100:
    counter += 1
    d = random.uniform(1.00,100.00)  
    c = random.randint(1,15)  
    donlist.append(d)      
    donlist = [round(elem,2) for elem in donlist]
    charlist.append(c)      
    totals[c] += d
</code></pre>
<p>nb: I removed the <code>array</code> import, since you're only using <code>list</code>s in the code.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems a good example to use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a> function. It gets two lists as argument (in your case the <code>donlist</code> and <code>charlist</code>) and creates an iterator of these, so you can iterate one time adding the values from <code>donlist</code> in the right charity position. <code>zip</code> example:</p>
<pre class="lang-py prettyprint-override"><code>for a, b in zip(range(1, 5), range(5, 10)):
    print(a, b)
</code></pre>
<p>will output</p>
<pre><code>1 5
2 6
3 7
4 8
</code></pre>
<p>I strongly recommend generating the data lists before creating the third, so you can do</p>
<pre class="lang-py prettyprint-override"><code>donlist = [ random.uniform(1.0, 100.0) for _ in range(0, 100) ]
charlist = [ random.randint(1, 15) for _ in range(0, 100) ]
</code></pre>
<p>This is a simple syntax to create a list from an iterator. You can read more about it <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">here</a>.</p>
<p>This way, you can guarantee that it works for cases when these lists are not generated during the calculation, for an example, where the user input the values.</p>
<p>After the lists generation / input you can just:</p>
<pre class="lang-py prettyprint-override"><code># this is the same as a list comprehension but for a dict
# https://docs.python.org/3/tutorial/datastructures.html#dictionaries
result = { char : 0 for char in range(1, 16) }
for don, char in zip(donlist, charlist):
    result[char] += don
</code></pre>
<p>In the end each charity <code>N</code> has it's donation value in <code>result[N]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; l1 = [1,1,3,4] # charity list
&gt;&gt;&gt; l2 = [5,6,7,8] # donation list
&gt;&gt;&gt; zip(l1,l2)
[(1, 5), (1, 6), (3, 7), (4, 8)]

&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for k,v in zip(l1,l2):
...    d[k] += v
...
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {1: 11, 3: 7, 4: 8})
</code></pre>
<p>You can now index <code>d</code> by charity number and get the value of donation.</p>
</div>
<span class="comment-copy">Can you give a simple example of input and expected output to make things crystal clear?</span>
<span class="comment-copy">Oh sure I'll add that now</span>
<span class="comment-copy">In Python, array and list are two different things.</span>
<span class="comment-copy">in your example charities appear only once. Also you don't provide expected output.</span>
<span class="comment-copy"><code>random.uniform(1.00, 100.00)</code> won't result in integer numbers you have now. And it's <i>very</i> unlikely they would add up to exactly 100: that would mean each donation is exactly $1, since you loop 100 times in your code.</span>
<span class="comment-copy">Thank you! Do you know how I can get "totals" to give two decimal place results? Or rather, how I can format "d"? I originally formatted "donlist" instead because I wasn't able to format "d" itself. I just tried changing the code to "d = round(random.uniform(1.00,100.00),2)" but some values in totals still have very long decimals.</span>
<span class="comment-copy">Use string formatting. E.g., use something like <code>"{:.2f}".format(123.456789)</code> and you'll end up with a string <code>"123.46"</code>.</span>
<span class="comment-copy">I used your defaultdict concept to create a fourth array, "totalnum" that calculates how many donations were given per charity. I now have to calculate the average donation per charity, but I can't divide the two lists because they both have the charity numbers in there as well. Do you know how I can do this? Thank you so much!</span>
<span class="comment-copy">That's a different question.</span>
<span class="comment-copy">Okay I'll ask in a new question! Thanks for all the help!</span>
<span class="comment-copy">Can somebody explain me why this got downvoted? Thanks</span>
<span class="comment-copy">Downvotes happen randomly. But perhaps someone felt there's too much magic without an explanation: <code>zip</code> by itself doesn't do the work.</span>
<span class="comment-copy">I understand, I'm changing this reply to add more information. Thanks!</span>
<span class="comment-copy">If that can comfort you, I recently got -5 for a similar valid but not explained answer... Some people are angry.</span>
<span class="comment-copy">Lol I've gotten my account banned for two weeks before for getting -12 on a question I just did not understand. I never try to get people to do my homework for me.. I just really don't understand a lot of things (it's my first Python class).</span>
