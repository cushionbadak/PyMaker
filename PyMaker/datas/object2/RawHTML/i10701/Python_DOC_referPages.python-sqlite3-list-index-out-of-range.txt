<div class="post-text" itemprop="text">
<p>Hi i am looking for some help with an "List index out of range" error i am getting while trying to insert data into my sqlite3 database.</p>
<p>This is my first attempt at using a class helper to parse data to and from my database, so please don't laugh at my unwieldy coding. :))</p>
<p>here is my main.py for testing out my class.</p>
<pre><code>import kivy
kivy.require('1.9.1')

from databaseHelper import DatabaseHelper
from kivy.app import App
from kivy.uix.widget import Widget  


class Window1(Widget):
    pass

class MyApp(App):
    def build(self):

        db = DatabaseHelper() 
        db.createDatabase('myDatabase')
        columnData = ['unix', 'value', 'datestamp', 'keyword']
        data = [57489543789, 2096, "12-12-12", "hello data"]

        db.createTable(db.name, "datatable", columnData)
        db.insertInto(db.name, "datatable", columnData, data)
        return Window1()


if __name__ == '__main__':
    MyApp().run()
</code></pre>
<p>Which creates the database and creates the table entries.
Here is my insertInto method from my DatabaseHelper class.</p>
<pre><code>def insertInto(self, db_name, table_name, column_data, data):
        self.db_name = db_name
        self.table_name = table_name
        self.column_data = column_data
        self.data = data

    try:
        conn = sqlite3.connect(self.db_name)
        c = conn.cursor()

        dataString = ''
        string = ''
        values = ''
        for i in data:
            string += column_data[i] + ", "
            values += '?, '
            dataString += 'self.data' + '[' + str(i) + ']' + ', '


        string = string[0:string.__len__() - 2]
        values = values[0:values.__len__() - 2]
        dataString = dataString[0:dataString.__len__() - 2]

        c.execute("INSERT INTO " + self.table_name + " (" + string + ")" + " VALUES " + "(" + values + ")",
                "(" + dataString + ")"                                                
                )
        conn.commit()
        print("Succesfully input data into database: " + self.db_name + " Table: " + self.table_name)

    except Exception as e:
        print("Failed to input data into database: " + self.db_name + " Table: " + self.table_name)
        print(e)

    finally:
        c.close()
        conn.close()
</code></pre>
<p>Which throws an "List index out of range" error.</p>
<p>Any help would be much appreciated, thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is way too much string manipulation going on there. This <code>insertInto</code> is probably closer to what you want:</p>
<pre><code>def insertInto(self, db_name, table_name, column_data, data):
    self.db_name = db_name
    self.table_name = table_name
    self.column_data = column_data
    self.data = data

    try:
        conn = sqlite3.connect(self.db_name)
        c = conn.cursor()

        c.execute(
            "INSERT INTO {table} ({columns}) VALUES ({parameters})".format(
                table=table_name,
                columns=', '.join(column_data),
                parameters=', '.join(['?'] * len(column_data)),
            ),
            data
        )
        conn.commit()

        print("Succesfully input data into database: " + self.db_name + " Table: " + self.table_name)
    except Exception as e:
        print("Failed to input data into database: " + self.db_name + " Table: " + self.table_name)
        print(e)
    finally:
        c.close()
        conn.close()
</code></pre>
<p>The key changes here are:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a>ing all of the items instead of concatenating the next part and a delimiter in a loop, then slicing away the delimiter afterwards.</p>
<p>Here’s how it works:</p>
<pre><code>&gt;&gt;&gt; ', '.join(['one', 'two', 'three'])
'one, two, three'
</code></pre></li>
<li><p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow">string formatting</a> to build strings by naming parts instead of using the <code>+</code> operator a bunch. It’s easier to read.</p></li>
<li><p>Using list multiplication to get some number of <code>?</code> placeholders.</p>
<p>And here’s how that works:</p>
<pre><code>&gt;&gt;&gt; ['?'] * 5
['?', '?', '?', '?', '?']
</code></pre></li>
<li><p>Passing <code>data</code> as a parameter instead of a string with the text <code>'(data[0], data[1], …)'</code>. <code>data</code> should probably be a tuple, too:</p>
<pre><code>columnData = ('unix', 'value', 'datestamp', 'keyword')
data = (57489543789, 2096, "12-12-12", "hello data")
</code></pre></li>
</ul>
<p>I’m also not sure what a <code>DatabaseHelper</code> is supposed to represent. Does it have any state associated with it? <code>self.db_name</code>, <code>self.table_name</code>, <code>self.column_data</code>, <code>self.data</code>… they all seem to get overwritten with every insertion. A database connection seems like useful state to associate with a database helper, though:</p>
<pre><code>class DatabaseHelper:
    def __init__(self, db_name):
        self.connection = sqlite3.connect(self.db_name, isolation_level=None)

    def close(self):
        self.connection.close()

    def insertInto(self, table_name, columns, data):
        query = "INSERT INTO {table} ({columns}) VALUES ({parameters})".format(
            table=table_name,
            columns=', '.join(columns),
            parameters=', '.join(['?'] * len(columns))
        )

        self.connection.execute(query, data)

        print("Succesfully input data into database: " + db_name + " Table: " + table_name)
</code></pre>
<p>Then you can use it like this:</p>
<pre><code>class MyApp(App):
    def build(self):
        db = DatabaseHelper('myDatabase')
        columnData = ('unix', 'value', 'datestamp', 'keyword')
        data = (57489543789, 2096, "12-12-12", "hello data")

        db.createTable("datatable", columnData)
        db.insertInto("datatable", columnData, data)
        return Window1()
</code></pre>
</div>
<span class="comment-copy"><code>string.__len__()</code> is better written as <code>len(string)</code>.</span>
<span class="comment-copy">Yeah, thanks Ryan. Kind of new to programming and am relying on youcompleteme for a lot of methods. Every day is a school day. :)</span>
<span class="comment-copy">Thanks Ryan, Will have a look over what you have posted and get back with any success. May take a little time to study what is going on, but thanks for helping.</span>
<span class="comment-copy">++, @Forbidden303 a major change here which you should include whatever you do is the use of the parameters in the query, it will prevent against the text in 'data' being interpreted as database commands and being a <a href="http://security.stackexchange.com/questions/128412/sql-injection-is-17-years-old-why-is-it-still-around/">huge exploit hole</a></span>
<span class="comment-copy">@Ryan Well sir i have to take my hat off to you. This version worked first time with no modification. The use of the .format() method with curly brace expansion really is a lot cleaner and the join methods and list multiplication are a much more sane way of doing things. As for the declaring self.vars, i guess this is only required if the object is 'staying alive' for a period and i need to refer to vars? Anyways man, Thanks a lot for taking the time to help, it certainly has been an education. Much obliged.</span>
