<div class="post-text" itemprop="text">
<p>I'm learning Python asyncio for asynchronous programing. I know that the event loop watch over Future objects until they are ready and then resumes the appropriate coroutines to continue the execution in the point where the await keyword occurred. </p>
<p>This is very understandable when you use something like <code>asyncio.sleep</code> because the sleeping function knows how many time it will take and so will know the event loop but <strong>what happens with something that relies on networking ( for example) where the waiting time is unknown?</strong>. </p>
<p>How does the event loop know when a resource is ready or how many time will take to gather data from some source? </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How does the event loop know when a resource is ready or how many time will take to gather data from some source?</p>
</blockquote>
<p>The default event loop (based on <a href="https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.SelectorEventLoop" rel="nofollow">SelectorEventLoop</a>) uses the <a href="https://docs.python.org/3.4/library/selectors.html#module-selectors" rel="nofollow">selector</a> module to keep track of all the resources to monitor and get notified when new data is ready. <a href="https://docs.python.org/3.4/library/selectors.html#selectors.BaseSelector.select" rel="nofollow">BaseSelector.select</a> is <a href="https://github.com/python/asyncio/blob/c288d5b771a4381655894e78afc97b4557c4d7f4/asyncio/base_events.py#L1276" rel="nofollow">where the magic happens</a>.</p>
</div>
<span class="comment-copy">asyncio implements several protocols it integrates with; it is creating the connection and watching it, waking up your coroutines when something happens. <a href="https://docs.python.org/3/library/asyncio-protocol.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio-protocol.html</a></span>
<span class="comment-copy">I believe it keeps going through the awaits until it finds one ready to go again. If you have only the one await, then it will keep checking repeatedly until ready.</span>
<span class="comment-copy">Some reference? :)</span>
<span class="comment-copy">Follow along in a debugger :) You'll see it repeatedly cycling through yield (await) points... Purely anecdotal, I'm not aware of much higher logic behind the scenes in how it decides which yield point to visit next, nor if it 'consciously' waits until an sleep point is finished prior to revisiting.</span>
