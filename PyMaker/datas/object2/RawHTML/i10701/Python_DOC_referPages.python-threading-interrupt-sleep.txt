<div class="post-text" itemprop="text">
<p>Is there a way in python to interrupt a thread when it's sleeping?
 (As we can do in java)</p>
<p>I am looking for something like that.</p>
<pre><code>  import threading
  from time import sleep

  def f():
      print('started')
  try:
      sleep(100)
      print('finished')
  except SleepInterruptedException:
      print('interrupted')

t = threading.Thread(target=f)
t.start()

if input() == 'stop':
    t.interrupt()
</code></pre>
<p>The thread is sleeping for 100 seconds and if I type 'stop', it interrupts</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using condition objects:  <a href="https://docs.python.org/2/library/threading.html#condition-objects" rel="nofollow">https://docs.python.org/2/library/threading.html#condition-objects</a></p>
<p>Instead of sleep() you use wait(<em>timeout</em>). To "interrupt" you call notify().</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct approach is to use <code>threading.Event</code>. For example:</p>
<pre><code>import threading

e = threading.Event()
e.wait(timeout=100)   # instead of time.sleep(100)
</code></pre>
<p>In the other thread, you need to have access to <code>e</code>. You can interrupt the sleep by issuing:</p>
<pre><code>e.set()
</code></pre>
<p>This will immediately interrupt the sleep. You can check the return value of <code>e.wait</code> to determine whether it's timed out or interrupted. For more information refer to the documentation: <a href="https://docs.python.org/3/library/threading.html#event-objects" rel="noreferrer">https://docs.python.org/3/library/threading.html#event-objects</a> .</p>
</div>
<span class="comment-copy">You could implement an <a href="https://docs.python.org/3.5/library/threading.html#threading.Event" rel="nofollow noreferrer">Event</a> and use <code>Event.wait(100)</code></span>
<span class="comment-copy">Loop through 100  <code>time.sleep(1)</code> and check for any exceptions</span>
<span class="comment-copy">@Kristof thanks</span>
