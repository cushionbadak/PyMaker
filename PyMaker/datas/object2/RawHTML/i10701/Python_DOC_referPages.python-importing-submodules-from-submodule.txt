<div class="post-text" itemprop="text">
<p>I have got a problem when using python imports. I wrote a finished module, that itself uses several submodules (those are imported).</p>
<p>e.g.</p>
<pre><code>module:
   main_class.py
   submodule1.py
   ....
</code></pre>
<p>Now I want to use this finished module by another supermodule, so the folder structure would change like this</p>
<pre><code>supermodule:
    main_class_super.py     -- this class imports module.main_class
    module:
       main_class.py
       submodule1.py
       ....
</code></pre>
<p>However now all imports that are used in the code of <code>main_class.py</code> inside the module fail (I guess because the import now works in the namespace of <code>main_class_super.py</code>)</p>
<p>Any idea how to solve this problem without restructuring the entire sources?</p>
<hr/>
<p>The concrete error:</p>
<p>In my <code>main_class.py</code> I use the line:</p>
<pre><code>import submodule1
</code></pre>
<p>In my <code>supermodule.py</code> I use the line:</p>
<pre><code>import module.main_class
</code></pre>
<p>When executing the superclass that imports <code>module.main_class</code> of course the <code>import submodule1</code> line is executed as well, but fails as it can not find the module in the namespace of <code>supermodule.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on python 2 you should add <code>from __future__ import absolute_import</code>  to your files (not needed on 3) so you can do the imports like <a href="https://www.python.org/dev/peps/pep-0328/#guido-s-decision" rel="nofollow">Guido states in PEP 328</a></p>
<p>According to this you should</p>
<ul>
<li><p>Make sure all your package folders have a <code>__init__.py</code> in it to mark them as importable</p></li>
<li><p>In main_class.py: replace <code>import submodule1</code> or <code>import module.submodule1</code> with <code>from . import submodule1</code></p></li>
<li><p>In main_class_super.py: replace <code>import module.main_class</code> with <code>from .module import main_class</code></p></li>
</ul>
<p>This way you don't have to care about any outer package structure.</p>
<p>The option to use absolute and explicit relative imports <a href="https://docs.python.org/3/whatsnew/2.5.html#pep-328-absolute-and-relative-imports" rel="nofollow">was added</a> in Python 2.5.</p>
</div>
<span class="comment-copy">Er, i think i do not quite get how this can help me. Given my folder structure, how would i do the import of the submodule1.py inside the supermodule.py?</span>
<span class="comment-copy">edited answer to add explicit solution</span>
<span class="comment-copy">Sorry to bother you again, by i encountered another problem. Inside those submodules several modules import the same other modules (e.g. submodule1 imports submodule2 and 3 and submodule2 also imports submodule3. Then this import inside submodule2 wont work. (even though i changed it to from . import submodule3). All other imports just work fine</span>
<span class="comment-copy">Sorry, without directory layout (what files are in what folders?)  i cannot help on that</span>
<span class="comment-copy">Structure is the same, only that there is not only submodule1.py on the lowest level but also submodule2.py and submodule3.py.</span>
