<div class="post-text" itemprop="text">
<p>Python 2 will implicitly convert <code>str</code> to <code>unicode</code> in some circumstances. This conversion will sometimes throw a <code>UnicodeError</code> depending on what you try to do with the resulting value. I don't know the exact semantics, but it's something I'd like to avoid.</p>
<p>Is it possible to use another type besides <code>unicode</code> or a command-line argument similar to <code>--strict-optional</code> (<a href="http://mypy-lang.blogspot.co.uk/2016/07/mypy-043-released.html" rel="nofollow noreferrer">http://mypy-lang.blogspot.co.uk/2016/07/mypy-043-released.html</a>) to cause programs using this implicit conversion to fail to type check?</p>
<pre><code>def returns_string_not_unicode():
    # type: () -&gt; str
    return u"a"

def returns_unicode_not_string():
    # type: () -&gt; unicode
    return "a"
</code></pre>
<p>In this example, only the function <code>returns_string_not_unicode</code> fails to type check.</p>
<pre><code>$ mypy --py2 unicode.py
unicode.py: note: In function "returns_string_not_unicode":
unicode.py:3: error: Incompatible return value type (got "unicode", expected "str")
</code></pre>
<p>I would like both of them to fail to typecheck.</p>
<p>EDIT:</p>
<p><code>type: () -&gt; byte</code> seems to be treated the same way as <code>str</code></p>
<pre><code>def returns_string_not_unicode():
    # type: () -&gt; bytes
    return u"a"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is, unfortunately, an ongoing and currently unresolved issue -- see <a href="https://github.com/python/mypy/issues/1141" rel="nofollow">https://github.com/python/mypy/issues/1141</a> and <a href="https://github.com/python/typing/issues/208" rel="nofollow">https://github.com/python/typing/issues/208</a>.</p>
<p>A partial fix is to use <code>typing.Text</code> which is (unfortunately) currently undocumented (I'll work on fixing that though). It's aliased to <code>str</code> in Python 3 and to <code>unicode</code> in Python 2. It won't resolve your actual issue or cause the second function to fail to typecheck, but it <em>does</em> make it a bit easier to write types compatible with both Python 2 and Python 3.</p>
<p>In the meantime, you can hack together a partial workaround by using the recently-implemented <a href="https://docs.python.org/3/library/typing.html#newtype" rel="nofollow"><code>NewType</code> feature</a> -- it lets you define a psuedo-subclass with minimal runtime cost, which you can use to approximate the functionality you're looking for:</p>
<pre><code>from typing import NewType, Text

# Tell mypy to treat 'Unicode' as a subtype of `Text`, which is
# aliased to 'unicode' in Python 2 and 'str' (aka unicode) in Python 3
Unicode = NewType('Unicode', Text)

def unicode_not_str(a: Unicode) -&gt; Unicode:
    return a

# my_unicode is still the original string at runtime, but Mypy
# treats it as having a distinct type from `str` and `unicode`.
my_unicode = Unicode(u"some string")

unicode_not_str(my_unicode)      # typechecks
unicode_not_str("foo")           # fails
unicode_not_str(u"foo")          # fails, unfortunately
unicode_not_str(Unicode("bar"))  # works, unfortunately
</code></pre>
<p>It's not perfect, but if you're principled about when you elevate a string into being treated as being of your custom <code>Unicode</code> type, you can get something approximating the type safety you're looking for with minimal runtime cost until the bytes/str/unicode issue is settled.</p>
<p><s>Note that you'll need to install mypy from the master branch on Github to use <code>NewType</code>.</s></p>
<p>Note that NewType was added as of <a href="http://mypy-lang.blogspot.co.uk/2016/08/mypy-044-released.html" rel="nofollow">mypy version 0.4.4</a>.</p>
</div>
<span class="comment-copy">See if declaring the return type as <code>bytes</code> helps.</span>
<span class="comment-copy">@user2357112 it appears not to.</span>
