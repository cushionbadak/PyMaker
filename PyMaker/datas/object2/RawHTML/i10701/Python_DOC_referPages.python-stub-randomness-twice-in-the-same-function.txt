<div class="post-text" itemprop="text">
<p>How would I stub the output of <code>pickCard()</code> function which is being called twice in <code>deal()</code> function? I want to test both losing and winning cases.<br/>
For example, I would like to have for the winning case, the first time <code>pickCard()</code> is called is given value <code>8</code> to <code>card1</code>, and second given value <code>10</code> to <code>card2</code>. </p>
<p>I have tried using @Mock.patch, but this works only for doing one call.</p>
<p>I have used  <code>self.blackjack.pickCard = MagicMock(return_value=8)</code> but again if i use it twice it will overwrite the return value</p>
<p>Here is the code:</p>
<pre><code>import random

class Game:
    def __init__(self):
        self.cards = [1,2,3,4,5,6,7,8,9,10]

    def deal(self):
        card1 = self.pickCard()
        self.removeCards(card1)
        card2 = self.pickCard()
        return card1  + card2  &gt; 16

    def pickCard(self):
        return random.choice(self.cards)

    def removeCards(self,card1):
        return self.cards.remove(card1)
</code></pre>
<p>The test file is:</p>
<pre><code>import unittest
from mock import MagicMock
import mock
from lib.game import Game

class TestGame(unittest.TestCase):
    def setUp(self):
        self.game = Game()

    def test_0(self):#passing
        """Only cards from 1 to 10 exist"""
        self.assertListEqual(self.game.cards, [1,2,3,4,5,6,7,8,9,10])

    #Here is where I am finding difficulty writing the test
    def test_1(self):
        """Player dealt winning card"""
        with mock.patch('lib.game.Game.pickCard') as mock_pick:
            mock_pick.side_effect = (8, 10)
            g = Game()
            g.pickCard()
            g.pickCard()
            self.assertTrue(self.game.deal())
</code></pre>
<p>EDIT</p>
<p>I ran this test with above code, and I get this stack trace instead of passing</p>
<pre><code>Traceback (most recent call last):
 tests/game_test.py line 26 in test_1
   self.assertTrue(self.game.deal())
 lib/game.py line 8 in deal
   card1 = self.pickCard()
 /usr/local/lib/python2.7/site-packages/mock/mock.py line 1062 in __call__
   return _mock_self._mock_call(*args, **kwargs)
 /usr/local/lib/python2.7/site-packages/mock/mock.py line 1121 in _mock_call
   result = next(effect)
 /usr/local/lib/python2.7/site-packages/mock/mock.py line 109 in next
   return _next(obj)
</code></pre>
<p>Do I need to put the two <code>g.pickCard()</code> elsewhere in the test? Or do I need to need to access this in the <code>self.game.deal()</code> method somehow?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>mock.patch</code> is the way to go, but instead of <code>return_value</code> you should specify <code>side_effect=(8, 10)</code></p>
<pre><code>with mock.patch('lib.game.Game.pickCard') as mock_pick:
    mock_pick.side_effect = (8, 10)
    g = Game()
    print(g.pickCard())
    print(g.pickCard())

# 8
# 10
</code></pre>
<p><strong>EDIT #1</strong></p>
<p>Pick card was just for demonstration that different cards are picked.
In your code you pick both cards and then call <code>game.deal</code> which picks another two cards which are not mocked which raises <code>StopIteration</code>. Also, since your game object already exists (created in setUp) you should patch this object directly, not create a new game object, hence your <code>test_1</code> should be:</p>
<pre><code>def test_1(self):
    """Player dealt winning card"""
    with mock.patch.object(self.game, 'pickCard') as mock_pick:
        mock_pick.side_effect = (8, 10)
        self.assertTrue(self.game.deal())
</code></pre>
<p>You path object's property <code>pickCard</code> with MagicMock and set it's side effects to 8 and 10 respectively.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">If you need something way more sophisticated, which controls the behavior of <code>mock_pick</code> at each call, see my answer here: <a href="http://stackoverflow.com/questions/26783678/python-mock-builtin-open-in-a-class-using-two-different-files/38618056#38618056" title="python mock builtin open in a class using two different files">stackoverflow.com/questions/26783678/…</a></span>
<span class="comment-copy">Thanks for that @warownia1, I did see side effect elsewhere, but was not too sure how to use it. I am still getting issues with using the stubbed methods, see above in OP.</span>
<span class="comment-copy">Edited to suit your particular case. My first answer was a generic example how to patch functions when multiple calls are required.</span>
