<div class="post-text" itemprop="text">
<p>Here's a simple Python filter that does nothing but put "TEST - " in front of a log message.  (The real filter will do more helpful processing later):</p>
<pre><code>class TimeStamp_Filter(logging.Filter):
    def filter(self, record):
        record.msg = "TEST - " + str(record.msg)
        return True
</code></pre>
<p>And here's the config being pulled in from a JSON file and parsed with <code>dictConfig()</code>:</p>
<pre><code>{
    "version": 1,
    "disable_existing_loggers": false,
    "filters": {
        "timestamp_filter": {
            "()": "TimeStamp_Filter"
        }
    },
    "handlers": {
        "file_handler": {
            "class": "logging.FileHandler",
            "level": "INFO",
            "filename": "../log/default.log",
            "mode": "a"                      
        },
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "filters": ["timestamp_filter"],
            "stream": "ext://sys.stdout"
        }
    },
    "root": {
        "level": "DEBUG",
        "handlers": ["console", "file_handler"]
    }
}
</code></pre>
<p>The filter itself seems to work - if I create a logger and run <code>logger.info("Hello, world!")</code>, I get the output <code>TEST - Hello, world!</code> on screen.  </p>
<p>However I <strong>also</strong> get that output (including the "TEST") in my <code>default.log</code> file.  I had thought that by attaching the <code>timestamp_filter</code> only to the <code>console</code> handler, I would get that TEST output only on screen.  </p>
<p>Why is also being sent to the <code>file_handler</code> handler and ending up in my log file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are changing the message of the log record from a filter. That is causing the issue. </p>
<p>Python will apply that filter to your console output alright but when it does, it changes the original log message. So when the log message is  passed to the file handler, the message has changed already and contains that extra input. </p>
<p>If you want to change the log format for specific handlers, you should consider using formatters instead. Filtering is for selecting which message gets logged and which one should not. </p>
<p><strong>Update:</strong> As per the comments, here's a sample code explaining how we can use custom formatter and handle business logic inside it. </p>
<pre><code>import logging
import sys


class CustomFormatter(logging.Formatter):
    def format(self, record):
        mycondition = True  # Here goes your business logic
        formatted_message = super().format(record=record)

        if mycondition:
            formatted_message += "TEST"

        return formatted_message


logger = logging.getLogger("test")
logger.setLevel(logging.DEBUG)

handler = logging.StreamHandler(stream=sys.stdout)
handler.setFormatter(CustomFormatter())
logger.addHandler(handler)



logger.info("Hello!")
</code></pre>
</div>
<span class="comment-copy">Masnum, thanks for the explanation.  I was basing my idea on the Python Cookbook (<a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a>) where they suggest using a filter to inject extra info into the message, like IP data.  In my case, the data that needs to be injected will require some business logic.  Is it possible to add Python code to a formatter?  The only examples I've seen involve modifying the output string using predefined variables like <code>%(asctime)s</code> <code>%(processName)</code>, etc. - nothing that involves a block of code.</span>
<span class="comment-copy">Yes, you can put the business logic in formatter too. But remember not to change the main record object. That would cause similar problems.</span>
<span class="comment-copy">Masnun, thanks again for your help.  Could you point me to an example of how that business logic can go into a formatter?  I know how to set it with a formatting string with predefined variables (e.g. <code>formatter = logging.Formatter('TEST - %(asctime)s - %(name)s - %(levelname)s - %(message)s')</code>) but I confess that I do not understand how to roll the whole formatter into a function or class in order to apply more complex logic.  (just to make up an example, to print the word "TEST" only if the <code>socket.hostname()</code> is a certain value).</span>
<span class="comment-copy">That's excellent - thank you!</span>
