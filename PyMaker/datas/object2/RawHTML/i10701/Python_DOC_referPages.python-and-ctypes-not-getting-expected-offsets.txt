<div class="post-text" itemprop="text">
<p>I am converting an app from VB.NET to Python 3.4 and am running into problems calling a function within a DLL file using ctypes.  For that particular function, two structures are passed in byref.  For one structure, the field offsets are not working out as needed.  The last field's offset ends up being off.  That makes all of the fields in that structure have values that are not correct.</p>
<p>For the PPNChartList structure below, the field offsets should be 0, 8, 12, and 76 (based on the working VB.NET code) but end up being 0, 8, 12, and 72.  So, how can I shift that last field over or otherwise get the correct values for that structure?</p>
<p>Any guidance would be appreciated.</p>
<p>Below is the Python code:</p>
<pre><code>import os
from ctypes import *

_sFile = 'ppn.dll'
_sPath = os.path.join(*(os.path.split(__file__)[:-1] + (_sFile,)))
_ppn =  windll.LoadLibrary(_sPath)

class PPNChartSpec(Structure):
    _fields_ = [("dStructVer", c_double),
                ("iNumLanes", c_long),
                ("iNumCars", c_long),
                ("iNumRounds", c_long),
                ("iOptHeatCountEven", c_long),
                ("iOptAvoidConsecRaces", c_long),
                ("iOptAvoidRepeatLanes", c_long)]

class PPNChartList(Structure):  # This is the problem structure
    _fields_ = [("dStructVer", c_double),
                ("iUsedAlts", c_long),
                ("aiChartType", c_long * 15),
                ("audtChartSpec", PPNChartSpec * 15)] # The offset for this last field is off by 4

class PPNChart(Structure):
    _fields_ = [("dStructVer", c_double),
                ("udtSpec", PPNChartSpec),
                ("iChartType", c_long),
                ("iNumLanes", c_long),
                ("iNumHeats", c_long),
                ("aiCar", c_long * 2399)]

makePPNChart = _ppn.makePPNChart
ptrChartSpec = POINTER(PPNChartSpec)
ptrChart = POINTER(PPNChart)
makePPNChart.argtypes = [ptrChartSpec, ptrChart]
makePPNChart.restype = c_int

altCharts = _ppn.altCharts
ptrChartSpec = POINTER(PPNChartSpec)
ptrChartList = POINTER(PPNChartList)
altCharts.argtypes = [ptrChartSpec, ptrChartList]
altCharts.restype = c_int
</code></pre>
<p>EDIT: If it helps any, below is the applicable portions of the working VB.NET code showing the structure and function definitions.  This shows the appropriate offsets for the structures.  In Python, I am able to call the makePPNChart() function and pass it the two structures byref that it needs.  The structures come back as they should.  So, I have it partially working in Python.</p>
<pre><code>&lt;StructLayout(LayoutKind.Explicit)&gt; _
Friend Structure PPNChartSpec
  &lt;FieldOffset(0)&gt; Dim dStructVer As Double
  &lt;FieldOffset(8)&gt; Dim iNumLanes As Integer
  &lt;FieldOffset(12)&gt; Dim iNumCars As Integer
  &lt;FieldOffset(16)&gt; Dim iNumRounds As Integer
  &lt;FieldOffset(20)&gt; Dim iOptHeatCountEven As Integer
  &lt;FieldOffset(24)&gt; Dim iOptAvoidConsecRaces As Integer
  &lt;FieldOffset(28)&gt; Dim iOptAvoidRepeatLanes As Integer
End Structure

&lt;StructLayout(LayoutKind.Explicit)&gt; _
Friend Structure PPNChartList
  &lt;FieldOffset(0)&gt; Dim dStructVer As Double
  &lt;FieldOffset(8)&gt; Dim iUsedAlts As Integer
  &lt;FieldOffset(12)&gt; &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=15)&gt; _
  Dim aiChartType() As Integer
  &lt;FieldOffset(76)&gt; &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=15)&gt; _
  Dim audtChartSpec() As PPNChartSpec
End Structure

&lt;StructLayout(LayoutKind.Explicit)&gt; _
Friend Structure PPNChart
  &lt;FieldOffset(0)&gt; Dim dStructVer As Double
  &lt;FieldOffset(8)&gt; Dim udtSpec As PPNChartSpec
  &lt;FieldOffset(40)&gt; Dim iChartType As Integer
  &lt;FieldOffset(44)&gt; Dim iNumLanes As Integer
  &lt;FieldOffset(48)&gt; Dim iNumHeats As Integer
  &lt;FieldOffset(52)&gt; &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=2399)&gt; _
  Dim aiCar() As Integer
End Structure

&lt;DllImport("ppn.dll")&gt; _
Friend Shared Function makePPNChart(&lt;MarshalAs(UnmanagedType.Struct)&gt; ByRef spec As PPNChartSpec, &lt;MarshalAs(UnmanagedType.Struct)&gt; ByRef Chart As PPNChart) As Short
End Function

&lt;DllImport("ppn.dll")&gt; _
Friend Shared Function altCharts(&lt;MarshalAs(UnmanagedType.Struct)&gt; ByRef spec As PPNChartSpec, &lt;MarshalAs(UnmanagedType.Struct)&gt; ByRef List As PPNChartList) As Short
End Function
</code></pre>
<p>EDIT #2:  I used the loop below to check the offsets.  Adding in an extra c_long field into that structure's definition, I would think that would shift things over just right.  However, as you can see below, the offset for the audtChartSpec structure jumps to 80, instead of the expected 76.</p>
<pre><code>for f, t in ppn.PPNChartList._fields_:
    a = getattr(ppn.PPNChartList, f)
    print(f, a)

dStructVer &lt;Field type=c_double, ofs=0, size=8&gt;
iUsedAlts &lt;Field type=c_long, ofs=8, size=4&gt;
aiChartType &lt;Field type=c_long_Array_15, ofs=12, size=60&gt;
unknown &lt;Field type=c_long, ofs=72, size=4&gt;
audtChartSpec &lt;Field type=PPNChartSpec_Array_15, ofs=80, size=480&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>12+15*4 <em>is</em> 72, so the VB.NET structure skips those 4 bytes, maybe to guarantee that the array is null terminated. Without knowing the actual struct definition from the called library it's hard to say. You could just add an additional 4 byte padding field.</p>
<p>To control the alignment of the members you can set <code>_pack_ = 4</code> to make them 4-bytes aligned (<a href="https://docs.python.org/3/library/ctypes.html#structure-union-alignment-and-byte-order" rel="nofollow">the equivalent of <code>#pragma pack(4)</code></a>):</p>
<pre><code>class PPNChartList(Structure):
    _pack_ = 4
    _fields_ = [("dStructVer", c_double),
                ("iUsedAlts", c_long),
                ("aiChartType", c_long * 15),
                ("padding", c_long),
                ("audtChartSpec", PPNChartSpec * 15)]
</code></pre>
<p>Now you should get the expected result, at least on systems where c_long is 32bit.</p>
</div>
<span class="comment-copy">Are you sure the DLL is compiled from C/C++? If it is a CLR DLL, you can't use ctypes.</span>
<span class="comment-copy">Yes, I'm sure.  There is another function within that DLL (not listed above for clarity sake) that I am able to call without a problem.  It uses the PPNChartSpec structure listed above and works just fine.  The problem is with the PPNChartList structure used with the one function that I did list above.</span>
<span class="comment-copy">For a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, at least relevant function and struct definitions (in C language) for the DLL should be included.</span>
<span class="comment-copy">Well, I can't really give out the DLL for someone to replicate this and I don't have the C/C++ source.  What I do have is a working VB.NET app that is able to use this DLL.  I am trying to port that to Python.  I've edited my original post and included that code.  It seems to me that the issue is how the struture is being defined in python.  With VB.NET, I could specify the field offsets.  I don't see how to do that with ctypes.</span>
<span class="comment-copy">well, 12+15*4 is 72, so the VB.NET structure skips those 4 bytes, maybe to guarantee that the array is null terminated. Without knowing the actual struct definition from the called library it's hard to say. You could just add an additional 4 byte padding field</span>
<span class="comment-copy">That worked perfect.  Thank you very much!  Using this DLL is critical to the app, so it is a huge relief to get this working.</span>
