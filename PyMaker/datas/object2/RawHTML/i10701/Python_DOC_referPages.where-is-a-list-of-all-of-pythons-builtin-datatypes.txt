<div class="post-text" itemprop="text">
<p>I'm using comparisons like:</p>
<pre><code>if type( self.__dict__[ key ] ) is str \
    or type( self.__dict__[ key ] ) is set \
    or type( self.__dict__[ key ] ) is dict \
    or type( self.__dict__[ key ] ) is list \
    or type( self.__dict__[ key ] ) is tuple \
    or type( self.__dict__[ key ] ) is int \
    or type( self.__dict__[ key ] ) is float:
</code></pre>
<p>I've once discovered, that I've missed the bool type: </p>
<p><code>or type( self.__dict__[ key ] ) is bool \</code>, </p>
<p>Okay - I wondered which other types I missed?</p>
<ul>
<li><a href="https://docs.python.org/2/library/types.html" rel="nofollow">docs.python.org</a> - There is no table with ALL types...</li>
</ul>
<p>I've started googling:</p>
<ul>
<li><p><a href="http://www.diveintopython3.net/native-datatypes.html" rel="nofollow">diveintopython3</a>:</p>
<blockquote>
<p>Python has many native datatypes. Here are the important ones:</p>
</blockquote>
<ol>
<li>Booleans are either True or False.</li>
<li>Numbers can be integers (1 and 2), floats (1.1 and 1.2), fractions (1/2 and 2/3), or even complex numbers.</li>
<li>Strings are sequences of Unicode characters, e.g. an html document.</li>
<li>Bytes and byte arrays, e.g. a jpeg image file.</li>
<li>Lists are ordered sequences of values.</li>
<li>Tuples are ordered, immutable sequences of values.</li>
<li>Sets are unordered bags of values.</li>
<li>Dictionaries are unordered bags of key-value pairs.</li>
</ol></li>
</ul>
<p>Why is that everywhere people are talking about <strong>many types</strong>, but I can't find a list of all of them? It's almost always only about <em>important ones</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over <code>__builtin__</code>'s <a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="nofollow"><code>__dict__</code></a>, and use <a href="https://docs.python.org/2/library/functions.html#isinstance" rel="nofollow"><code>isinstance</code></a> to see if something is a class:</p>
<pre><code>builtins = [e for (name, e) in __builtin__.__dict__.items() if isinstance(e, type) and e is not object]
&gt;&gt;&gt; builtins
[bytearray,
 IndexError,
 SyntaxError,
 unicode,
 UnicodeDecodeError,
 memoryview,
 NameError,
 BytesWarning,
 dict'
 SystemExit
 ...
</code></pre>
<p>(Note that as @user2357112 pointed out in the excellent comment, we are explicitly excluding <code>object</code>, as it is not useful.)</p>
<p>Note also that <code>isinstance</code> can take a tuple as the second argument, which you can use instead of your series of <code>if</code>s. Consequently, you can write things like so:</p>
<pre><code>builtins = tuple([e for (name, e) in __builtin__.__dict__.items() if isinstance(e, type) and not isinstance(object, e)])
&gt;&gt;&gt; isinstance({}, builtin_types)
True
</code></pre>
</div>
<span class="comment-copy">The actual types depends on which version of Python you are running. Why don't you have a look at (Python3) <code>import builtins; vars(builtins)</code> ?</span>
<span class="comment-copy"><code>Python 2.7.9</code>, there is such err: <code>ImportError: No module named builtins</code></span>
<span class="comment-copy">Yes of course, in Python 2 there is no builtins. It was (incorrectly) called <code>__builtin__</code>) and that got fixed years ago.</span>
<span class="comment-copy">Why specifically the types from <code>__builtin__</code>? Do you want a <code>False</code> output if the object is a function, or a <code>collections.defaultdict</code>?</span>
<span class="comment-copy">This seems like it might be an <a href="http://meta.stackexchange.com/a/66378/223254">XY problem</a>. Why do you want to know all of those types? There's almost never going to be a good reason to test an object that could be any of them (you should either know more about the object you're testing ahead of time, or you should care about some other criteria, like not being an instance of some specific custom class).</span>
<span class="comment-copy"><code>vars(__builtin__)</code> more usual</span>
<span class="comment-copy">it's actually <code>__builtins__</code></span>
<span class="comment-copy">@self: No it's not. <code>__builtins__</code> is an implementation detail that people keep abusing because they don't know they're supposed to be using <code>__builtin__</code>. Code that uses <code>__builtins__</code> is likely to fail when you put it in a different context and suddenly <code>__builtins__</code> is a dict instead of a module, or vice versa.</span>
<span class="comment-copy">@wim Thanks, I was not aware of that.</span>
<span class="comment-copy">@AmiTavory: <code>isinstance(anything, builtin_types)</code> will always give <code>True</code>, because everything is an <code>object</code>.</span>
