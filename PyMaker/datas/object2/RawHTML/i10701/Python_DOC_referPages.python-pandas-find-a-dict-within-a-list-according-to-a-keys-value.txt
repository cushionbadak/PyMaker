<div class="post-text" itemprop="text">
<p>I have a list which look like this:</p>
<pre><code>dict_list = [{'angle': 5.0,
              'basic_info': '111',
              'x': [1,2,3,4],
              'y': [3,2,1,4],},
            {'angle': 25.0,
              'basic_info': '111',
              'x': [1,2,3,4],
              'y': [3,1,5,2],},
            {'angle': 3.0,
              'basic_info': '111',
              'x': [1,2,3,4],
              'y': [1,1,4,1],},]
</code></pre>
<p>I want to get the dict angle 25, how can I do it?</p>
<hr/>
<p>UPDATE: </p>
<p>After playing a while with Pandas, I find this might be possible </p>
<pre><code>df = pd.DataFrame(dict_list)
temp = df.query("(angle ==25 )").T.to_dict()[temp.keys()[0]]
temp
</code></pre>
<p>Returns </p>
<pre><code>{'angle': 25.0, 'basic_info': '111', 'x': [1, 2, 3, 4], 'y': [3, 1, 5, 2]}
</code></pre>
<p>But this is a bit hack.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming each angle in your dictionary is unique and each dictionary contains the key 'angle':</p>
<pre><code>df = None
for sub_dict in dict_list:
    if sub_dict['angle'] == 25:
        df = pd.DataFrame({'x': sub_dict['x'], 'y': sub_dict['y']})
        break  # Stops after finding the first matching angle.
if df is not None:
    df.plot(x='x', y='y')
</code></pre>
<p><a href="https://i.stack.imgur.com/h6TCJ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/h6TCJ.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> function will do what you want... you just need to feed it a function that determines which objects to keep.  That function below is <code>has_angle</code>.</p>
<p>I wrapped <code>has_angle</code> in <code>filter_by_angle</code>, so I could use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> to avoid hard-coding the angle sought.  <code>filter_by_angle</code> is a generator function, so it can <code>yield</code> any number of matching shapes.</p>
<pre><code>import functools


def has_angle(angle, shape):
    # get with default None prevents a KeyError on shapes
    # without angles.
    return shape.get('angle', None) == angle


def filter_by_angle(angle, shapes):
    filter_key = functools.partial(has_angle, angle)
    yield from filter(filter_key, shapes)


def main():
    dict_list = ...  # Same as yours.
    matching_shapes = filter_by_angle(25, dict_list)
    for shape in matching_shapes:
        print(shape)
    return
</code></pre>
<p>This prints:</p>
<pre class="lang-none prettyprint-override"><code>{'y': [3, 1, 5, 2], 'angle': 25.0, 'x': [1, 2, 3, 4], 'basic_info': '111'}
</code></pre>
<p>Note that the <code>yield from</code> syntax requires Python 3.3 or greater.</p>
</div>
<span class="comment-copy">I have made an UPDATE. I think it looks pretty simple, can you check with that too?</span>
<span class="comment-copy">@cqcn1991 have you tried <code>df.query('angle == 25').plot(x='x', y='y')</code>?</span>
<span class="comment-copy">@oldrinb I'm afraid that's not enough. The core problem is about extracting info at a given row. I also need the value to some other works.</span>
<span class="comment-copy">This can be a good alternative for some good programmers. However, I finally hacked this problem with 2 lines with <code>pandas</code>.</span>
<span class="comment-copy">@cqcn1991:  I couldn't tell if <code>pandas</code> was a requirement, or just something you were trying because you couldn't find a pure Python way.  Since you started with just lists and dicts, I didn't see any need to convert it all to dataframes just to filter it.</span>
<span class="comment-copy">@cqcn1991:  Also, please self-answer your question, so people know it's been solved.</span>
<span class="comment-copy">I think it is not a good answer. Still, I update it in the question.</span>
