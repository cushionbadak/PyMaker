<div class="post-text" itemprop="text">
<p>I am new to unit testing using script. I tried to verify login with arguments in post data, but I am getting login page as response and not get logged in.Because of <code>@tornado.web.authenticated</code> i can't access other functions without login and it responding to login page</p>
<pre><code>import tornado
from tornado.testing import AsyncTestCase
from tornado.web import Application, RequestHandler
import app
import urllib

class MyTestCase(AsyncTestCase):
    @tornado.testing.gen_test
    def test_http_fetch_login(self):
        data = urllib.urlencode(dict(username='admin', password=''))
        client = AsyncHTTPClient(self.io_loop)
        response = yield client.fetch("http://localhost:8888/console/login/?", method="POST",body=data)
        # Test contents of response
        self.assertIn("Automaton web console", response.body)

    @tornado.testing.gen_test
    def test_http_fetch_config(self):
        client = AsyncHTTPClient(self.io_loop)
        response = yield client.fetch("http://localhost:8888/console/configuration/?")
        self.assertIn("server-version",response.body)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To test code that uses <code>@authenticated</code> (unless you are testing the redirection to the login page itself), you need to pass a cookie (or whatever form of authentication you're using) that will be accepted by your <code>get_current_user</code> method. The details of this will vary depending on how exactly you are doing your authentication, but if you're using Tornado's secure cookies you'll probably use the <code>create_signed_value</code> function to encode a cookie. </p>
</div>
<div class="post-text" itemprop="text">
<p>From documentation:</p>
<blockquote>
<p>If you decorate post() methods with the authenticated decorator, and the user is not logged in, the server will send a 403 response. The @authenticated decorator is simply shorthand for if not self.current_user: self.redirect() and may not be appropriate for non-browser-based login schemes.</p>
</blockquote>
<p>So you can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock</a> do like pointed in this answer: <a href="https://stackoverflow.com/a/18286742/1090700">https://stackoverflow.com/a/18286742/1090700</a></p>
<p>Another 403 status will be thrown on POST calls if you have <code>secure_cookies=True</code> app param. If you want to test the code in a <em>non debug fashion</em>, you can also using mock POST actions while keeping the <code>secure_cookies=True</code> application parameter and then just mock the <code>check_xsrf_cookie</code> Handler method as well, like this:</p>
<pre><code>    # Some previous stuff...
    with mock.patch.object(YourSecuredHandler, 'get_secure_cookie') as mget:
        mget.return_value = 'user_email'
        response = self.fetch('/', method='GET')     
    with mock.patch.object(
            YourSecuredHandler, 'check_xsrf_cookie') as mpost:
        mpost.return_value = None
        response = self.fetch(
            url, method="POST", body=parse.urlencode(body1),
            headers=headers)
        self.assertEqual(response.code, 201)
</code></pre>
</div>
