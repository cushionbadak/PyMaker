<div class="post-text" itemprop="text">
<p>I'm currently trying to get used to Python and am trying to read a column and count the repeating elements from the strings.</p>
<p>What I have so far:</p>
<pre><code>i = 0
y = [i]
fav_Split = row[9].split('|')
#print fav_Split

for x in fav_Split:
    #print x
    y[i] = x
    i = i+1
</code></pre>
<p><code>print fav_Split</code> gives me:</p>
<pre><code>['XA', 'MA']
['BA', 'MA', 'RA']
['EB', 'CB']
['JA', 'RB', 'RA']
['ED', 'EA', 'RB', 'KA', 'RA']
['SB']
['MA', 'ED', 'SB']
['EC']
['FA']
['RA', 'MA']
['RB']
['CB']
['AC']
['CB', 'MA', 'RA']
['AC']
['KA']
['SA', 'CB']
['BA', 'ED', 'MA']
['KA', 'ED', 'SA']
['AB']
['CA']
['AB']
['SB', 'MA']
['XA', 'BA', 'CA']
['SA', 'AB']
['SA', 'XA', 'CA']
['KA']
['MA', 'XA']
['MA']
['RA', 'EC', 'JA']
['RA']
['CC', 'RA']
['CC']
['CC', 'RA']
['SA', 'RA']
['RA', 'AC']
['XA', 'JA', 'RA']
['CB', 'KA', 'RA']
['ZZ']
['CB', 'SA', 'RA']
['MA']
['LA', 'RB', 'RA']
['XA', 'RA']
['GA', 'RA', 'LA']
</code></pre>
<p><code>print x</code> gives me:</p>
<pre><code>XA
MA
BA
MA
RA
EB
CB
JA
RB
RA
ED
EA
RB
KA
RA
SB
MA
ED
SB
EC
FA
RA
MA
RB
CB
AC
CB
MA
RA
AC
KA
SA
CB
BA
ED
MA
KA
ED
SA
AB
CA
AB
SB
MA
XA
BA
CA
SA
AB
SA
XA
CA
KA
MA
XA
MA
RA
EC
JA
RA
CC
RA
CC
CC
RA
SA
RA
RA
AC
XA
JA
RA
CB
KA
RA
ZZ
CB
SA
RA
MA
LA
RB
RA
XA
RA
GA
RA
LA
</code></pre>
<p>Which is what I want. I'm trying to read those separate vars into an array and simply count them afterwards. But I am getting an error when trying to read into the y array</p>
<pre><code>y[i] = x
    IndexError: list assignment index out of range
</code></pre>
<p>Can anyone help me with this? My next steps are counting the repeating elements and displaying the top X (which can be changed based on user input).</p>
<p>UPDATE 2:
Debugging pic:
I don't understand here: y is...not...seeing x as its own element?
<img alt="enter image description here" src="https://i.stack.imgur.com/RQCt7.png"/></p>
<p>UPDATE 3:
for y += x
<img alt="enter image description here" src="https://i.stack.imgur.com/3oPAJ.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>First, let me give you an improvement to your original code:</p>
<pre><code>y = []
fav_Split = row[9].split('|') 
#print fav_Split

for x in fav_Split:
    y += x
</code></pre>
<p>Or, even shorter:</p>
<pre><code>fav_split = row[9].split('|')
y = [item for sublist in fav_Split for item in sublist]
</code></pre>
<p>Okay, now we have the list of two-letter-codes you wanted. The next step is using the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> class, which seems to be exactly what you need. You pass a list to it, and it computes the occurences of each element and orders it descending by its occurences.</p>
<pre><code>import collections.Counter
c = collections.Counter(y)
</code></pre>
<p>To get the <code>n</code> most common elements from your list, you can simply use <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><code>most_common()</code></a></p>
<pre><code>c.most_common(n)
</code></pre>
<p>which will </p>
<blockquote>
<p>Return a list of the n most common elements and their counts from the most common to the least.</p>
</blockquote>
</div>
<span class="comment-copy">I'm pretty sure this question has nothing to do with CSV (or Excel).  Counting strings should have nothing to do with where those strings came from.</span>
<span class="comment-copy">The data is from a CVS file originally, the script as a whole is reading in from CSV and writing out to a new CSV, then calling a VBA macro to further modify the CSV data, then renaming the CSV file with a timestamp...I should specify more I guess :P     - I will remove the tags if it is not necessary</span>
<span class="comment-copy">1.  (Re-)read "<a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>" --- images are <i>not</i> a substitute for code.  Even if the image link survives, it can't be turned into a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.  Also, images can't tell us what you think is wrong... they just show Python doing what Python does when you tell it to do that (which is fine in my book).</span>
<span class="comment-copy">2.  Your "update 3" is a completely unrelated question, so don't ask it here --- ask it as a new question.  Better yet, ask <i>yourself</i> what you expected <code>y += x</code> to do.  Then experiment with it a bit in a new Python interpreter and read the Python docs.  Learn <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">what it actually does</a>.  This is the sort of thing you can work out on your own.</span>
<span class="comment-copy">Thanks alot! I will get on this now, Oh</span>
<span class="comment-copy">Good luck! If it doesn't work, let me know.</span>
<span class="comment-copy">Oh, I remember I tried this earlier!  I did not know about collect function though. My result for printing c is:  Counter({'XA': 1, 'MA': 1}) Counter({'MA': 1, 'BA': 1, 'RA': 1}) Counter({'CB': 1, 'EB': 1}) Counter({'JA': 1, 'RB': 1, 'RA': 1}) Counter({'ED': 1, 'KA': 1, 'EA': 1, 'RA': 1, 'RB': 1}) Counter({'SB': 1}) Counter({'ED': 1, 'MA': 1, 'SB': 1}) Counter({'EC': 1}) ....etc In this case, it seems to be adding each separate array as a separate element to this list</span>
<span class="comment-copy">@BrianGeoghegan That shouldn't be the case. Once you've got an array like the <code>x</code>from your question, you can just pass it to <code>collections.Counter</code> and use it. I don't see how there are separate arrays. Your result looks more like the result of a <code>map</code> on a list of stuff.</span>
<span class="comment-copy">@BrianGeoghegan Please use a new question for that if its outside the exact scope of this one.</span>
