<div class="post-text" itemprop="text">
<p>I'm looking for something like:</p>
<pre><code>foo = [ p for p in somelist if xxx(p)][0:10]
</code></pre>
<p>This works, but executes xxx on all of somelist, and xxx is expensive. </p>
<p>I could write a subfunction such as </p>
<pre><code>def blah (list, len): 
    res=[]; i=0; 
    while i&lt;len: 
        if xxx(list[i]): 
            res.append(i) 
   return res
</code></pre>
<p>but this seems very unpythonic. </p>
<p>An example that proves the first result does the wrong thing would be:</p>
<pre><code>foo = [ p for p in (1,2,3,4,5,0,6) if 100/p ][0:3]
</code></pre>
<p>which "should" return [1,2,3] but in fact fails on the divide by zero. </p>
<p>I've tried various tools from itertools but can't find a combination that stops execution of the iterator after the size is reached. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/dev/library/itertools.html#itertools.islice" rel="nofollow noreferrer">itertools.islice</a>:</p>
<pre><code>from itertools import islice
foo = list(islice((p for p in (1,2,3,4,5,0,6) if 100/p), 4))
</code></pre>
<p>Notice the lack of brackets: this is a <a href="https://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension">generator comprehension</a></p>
</div>
<div class="post-text" itemprop="text">
<p>That is impossible to do with list comprehensions but it is possible with generator comprehensions.</p>
<p>What is the difference between the two? List comprehensions will iterate over the iterable all at once and return a list back to you according to your operations on items on the iterable. The key here is <em>all at once</em>.</p>
<p>Your example uses list comprehensions and here's what happens: First the list comprehension is evaluated. In your case it will fail, but even if it didn't fail, it would have iterated over everything in the iterable <code>somelist</code> and would have returned a resulting list back. Then this list is sliced and a new resulting list is returned.</p>
<p>Generator comprehensions and generators in general have different way of working. They are basically code blocks that are suspended until you request more data from them, which is what you really want to do. </p>
<p>In effect, you create a generator as follows:</p>
<pre><code>g = (p for p in (1,2,3,4,5,0,6) if 100/p )
</code></pre>
<p>You now have a generator that will generate values for you when you <em>request</em> it to do so, according to the "rule" you gave it.</p>
<p>As soon as you have a generator at hand, there are several ways you could get <code>n</code> items from it.</p>
<p>You could write a simple for loop as follows:</p>
<pre><code>results = []
for x in range(3): # n = 3 in your case
    results.append(next(g))
</code></pre>
<p>Of course, that isn't Pythonic. Assuming you want a list back, you can now use a list comprehension:</p>
<pre><code>results = [next(g) for x in range(3)]
</code></pre>
<p>This is the "manual" way of doing it. You could also use the <code>islice</code> function from the <code>itertools</code> module <a href="https://docs.python.org/dev/library/itertools.html#itertools.islice" rel="nofollow">(Documentation here)</a>:</p>
<pre><code>import itertools
results = list(itertools.islice(g, 4))
</code></pre>
<p>And there it is. Generators are pretty useful. A code block that executes when requested to and remember its state is truly invaluable.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using a combination of the builtin filter and <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow">islice</a> you can achieve what you want.
eg.</p>
<pre><code>length = 3
items_iter = islice(filter(None, [1, 2, 0, 4, 5]), length) # returns a lazy iterator
items = list(items_iter)
assert items == [1, 2, 5]
</code></pre>
<p>However, you may wish to write your own generator. Generator functions will, rather than returning a single result, will yield successive items. Sometimes it might yield no items, and sometimes they can yield an infinite number of items. Here is an example for your case:</p>
<pre><code>def take_first_n_that_pass(test, length, iterator):
    i = 0
    for item in iterator:
        if i &gt;= length:
            return # stops generator
        if test(item):
            yield item
            i += 1
    # end of iterator -- generator stops here as well

items_iter = take_first_n_that_pass(bool, 3, [0, 1, 2, 0, 4, 5])
items = list(items_iter)
assert items == [1, 2, 4]
</code></pre>
</div>
<span class="comment-copy">Angle brackets are these: <code>&lt;&gt;</code>. The <code>[]</code> ones are called square brackets, or just brackets depending on where you're from.</span>
<span class="comment-copy">@user2357112: very true, thanks</span>
