<div class="post-text" itemprop="text">
<p>The below script works fine, until I added in "def test", I am trying to get rid of all global variables my programming in general and as I'm not a great programmer, I hope there is a way to do this.  </p>
<p>I want to pass "foo" from function "test" back to Function "work" but this does not work as its not a global variable.  Any ideas?</p>
<pre><code>bar = "bar"
barnone = "barnone"

def function_A():
    data = 5
    data1 = 15
    if host == 1:
        work(data, data1)
    else:
        function_B()

def function_B():
    data = 3
    data1 = 13
    work(data, data1)
    test(data)
    print foo

def work(data,data1):
    print data
    print data1
    test(data)
    print foo

def test(data):
    if data == 3:foo = bar
    elif data == 5:foo = barnone

if __name__ == '__main__':
    host = 11
    function_A()
</code></pre>
<p><strong>EDIT:</strong></p>
<p>Thank you, this works...  I appreciate all the feedback as I am a novice, keep in mind this was just a test script I put together to understand passing parameters to different functions.  Before this I was using globals and I'm trying to get rid of them.</p>
<p>Thank you, any advice is helpful. </p>
<pre><code>bar = "bar"
barnone = "barnone"

def function_A():
    data = 5
    data1 = 15
    if host == 1:
        work(data, data1)
    else:
        function_B()

def function_B():
    data = 3
    data1 = 13
    work(data, data1)
    test(data)

def work(data,data1):
    print data
    print data1
    test(data)
    print test(data)

def test(data):
    if data == 3:foo = bar
    elif data == 5:foo = barnone
    return foo

if __name__ == '__main__':
    host = 11
    function_A()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add the following to the end of your <code>test()</code> function:</p>
<pre><code>`return foo`
</code></pre>
<p>then you can print the variable in <code>work()</code> like this</p>
<pre><code>print test(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>foo</code> is only defined in the "scope" of the function <code>test()</code>, since that is where you created it. The function <code>work()</code> has no knowledge of the variable <code>foo</code>, as it is <em>undefined</em> outside of the function <code>test()</code>. So, <code>test()</code> has to <em>return</em> the variable <code>foo</code> to the place that <em>called</em> <code>test()</code>, which is the line <code>test(data)</code> in <code>work()</code>. </p>
<p>So, yes, add <code>return foo</code> to the end of <code>test()</code>. </p>
<p><strong>Edit:</strong></p>
<p>When you say <code>test(data)</code>, that is basically saying <code>sum([1,2,3])</code>. You've called a function, but you're not doing anything with the result, you're not <em>assigning</em> it. You have to say <code>new_variable = test(data)</code>. This means, from the perspective of <code>work()</code>: "call the function <code>test()</code> and have it do its thing. I don't care what's going on inside of <code>test()</code>, but I am expecting to it to spit something out at me when it is done. I will assign that something to a variable in <em>my</em> scope so I can use it later".</p>
<p>It is just like saying <code>x = sum([1,2,3])</code>. <code>sum</code> is a <em>function</em> that does something inside of it, you don't really care what, you just know that it should return a sensible value that you will assign to <code>x</code> to use later. </p>
<p><strong>Edit2:</strong> Also, as it stands, <code>test()</code> is going to return a <code>boolean</code> for <code>foo</code>, since you use the <code>==</code> operator rather than the assignment operator <code>=</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>test</code> function should be written like</p>
<pre><code>def test(data):
    if data == 3:
        return 'bar'
    elif data == 5:
        return 'barnone'
</code></pre>
<p>In a function that calls <code>test</code>, assign the result</p>
<pre><code>something = test(data)
</code></pre>
<p>Note that your code has some unrelated problems, e.g., what should happen if <code>data</code> is neither 3 nor 5?</p>
</div>
<span class="comment-copy">Perhaps a Python tutorial will clear things up for you. Your code has so many issues that it's hard to even begin describing them. <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a></span>
<span class="comment-copy">OP is obviously a very novice programmer. I don't see any point in making stylistic suggestions which may just confuse him for now, such as moving the return statements around. Its easier just to point out that his code as it is in <code>test</code> is fine, and it just needs a <code>return</code> at the end. Edit: "fine" as in functional</span>
<span class="comment-copy">@jphollowed For that reason, I didn't mention the ternary operator. I believe that at OP level, full control-path thought is necessary.</span>
<span class="comment-copy">I agree, I just think it makes more sense for him to put a <code>return</code> statement at the bottom of the function, and understand what it does, before he worries about modifying his whole function. That may make it easier to understand <i>precisely</i> where the difference is being made.</span>
<span class="comment-copy">@jphollowed Oh, I see. However, the point remains, no? The logic is undefined when the value is neither of the two. I was not trying to make a stylistic point of where the <code>return</code>s should go (if only because I don't have an opinion on it).</span>
<span class="comment-copy">@ Ah yes you're right, sorry. Perhaps it would be good for OP to add a naive <code>return</code> and then interpret the error when data != 3 or 5</span>
