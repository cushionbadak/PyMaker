<div class="post-text" itemprop="text">
<p>I run the following very trivial Python code. I am very surprised that it actually run. Could someone explain to me why I can even assign values to "nd" and "hel" without defining them in the class definition? Is this because the attribute can be added in the instance level?</p>
<pre><code>class tempClass(object):

a = tempClass()
a.nd = 1
a.hel = 'wem3'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has no notion of variable declaration, only assignments. The same applies to attributes: you simply assign an initial value to bring it into existence.</p>
<p>There is nothing special about the <code>__init__</code> method in this regard. For example,</p>
<pre><code>class TempClass(object):
    def __init__(self):
        self.nd = 1

a = tempClass()
a.hel = 'wem3'
</code></pre>
<p>Both attributes are created in the same way: by assigning a value to them. <code>__init__</code> is called when <code>a</code> is first created, but otherwise is not special. <code>self</code> inside <code>__init__</code> is a reference to the object referenced by <code>a</code>, so <code>self.nd = 1</code> is identical to <code>a.nd = 1</code>. After the object is created, <code>a.hel</code> is created and initialized with <code>'wem3'</code> by the same process.</p>
</div>
<span class="comment-copy">The way that objects were designed allows you to create attributes by assignment.  Try the same thing with a function (functions are objects):  define a function, <code>f</code>, then add an attribute to it - <code>f.new = 1</code> - it works :).  <code>...can be added in the instance level?</code> attributes can be added to the class itself in the same manner.</span>
<span class="comment-copy">Thank you, @wwii. Does it work adding a function, instead of an attribute, to an instance of a class? I tried it. It did not work. But maybe I did not do it the right way.</span>
<span class="comment-copy">Define the function then assign the function name to the class or instance attribute.   <code>def f(): print('1'); tempClass.foo = f</code>.</span>
<span class="comment-copy">So I played around a bit and some objects don't allow that behaviour but classes and functions do.  There is a hint in the "User-defined functions" section of <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">3.2 The standard type hierarchy</a> in the docs.</span>
<span class="comment-copy">Thank you, @wwii. It works as you said.</span>
