<div class="post-text" itemprop="text">
<p>I'm trying to translate a part of my matlab code in python. Actually I'm looking for how to translate <code>fminsearch</code> and I found it on this website with this example :</p>
<pre><code>import scipy.optimize

banana = lambda x: 100*(x[1]-x[0]**2)**2+(1-x[0])**2
xopt = scipy.optimize.fmin(func=banana, x0=[-1.2,1])
</code></pre>
<p>My first question is how to return also the value of <code>fmin</code> ? </p>
<p>And in my code when I type :</p>
<pre><code>banana = lambda X: diff_norm(X, abst0, ord0);
Xu = scipy.optimize.fmin(func=banana, X)
</code></pre>
<p>Python answered me :</p>
<pre><code>Xu = scipy.optimize.fmin(func=banana, X)
SyntaxError: non-keyword arg after keyword arg
</code></pre>
<p>I don't understand why Python told me that because what i want to do is to minimize the function <code>diff_norm</code> changing the values of <code>X</code>, i precise <code>X</code> is an array of length 10.</p>
<p>Thank you very much for your help !</p>
</div>
<div class="post-text" itemprop="text">
<p>Python told you that because in Python, keyword arguments always follow non keyword (i.e positional) arguments (keyword args have a name assigned to them, as in <code>func</code> in the <code>fmin</code> call). Your function call should look like:</p>
<pre><code>Xu = scipy.optimize.fmin(func=banana, x0=X)
</code></pre>
<p>in order to comply with <em><a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow">Python's calling conventions</a></em>. Alternatively, and, according to the <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin.html#scipy-optimize-fmin" rel="nofollow">function definition of <code>fmin</code></a>, you could only supply positional arguments for these two first arguments:</p>
<pre><code>Xu = scipy.optimize.fmin(banana, X)
</code></pre>
<p>this will return the values that minimize the function, so, just call the function providing these arguments:</p>
<pre><code>minval = banana(Xu)
</code></pre>
<p>Alternatively you could call <code>fmin</code> with <code>full_output = True</code> and get a tuple of elements back, the second element of that tuple is the minimum value:</p>
<pre><code>_, minval, *_ = scipy.optimize.fmin(banana, X, full_output=True)
</code></pre>
<p>Now <code>minval</code> contains your full output.</p>
</div>
<span class="comment-copy">Ok thanks and how can i have the value of fmind ?</span>
