<div class="post-text" itemprop="text">
<p>Got some strange import error which is as much strangely reported by interpreter.</p>
<p>I use CPython-3.5</p>
<p>Directory structure:</p>
<pre><code>.
+-- outer
|   +-- inner
|   |   +-- __init__.py
|   |   +-- first.py
|   |   +-- second.py
|   +-- __init__.py
+-- main.py
</code></pre>
<p>main.py:</p>
<pre><code>import outer.inner
print(outer.inner.var)
</code></pre>
<p>outer/__init__.py: empty</p>
<p>outer/inner/__init__.py:</p>
<pre><code>import outer.inner.first
var = outer.inner.first.var
</code></pre>
<p>outer/inner/first.py:</p>
<pre><code>import outer.inner.second
var = outer.inner.second.var
</code></pre>
<p>outer/inner/second.py:</p>
<pre><code>var = 1337
</code></pre>
<p>then, I run <code>main.py</code> and script fails with this stack trace:</p>
<pre><code>Traceback (most recent call last):
  File "main.py", line 1, in &lt;module&gt;
    import outer.inner
  File "/outer/inner/__init__.py", line 1, in &lt;module&gt;
    import outer.inner.first
  File "/outer/inner/first.py", line 2, in &lt;module&gt;
    var = outer.inner.second.var
AttributeError: module 'outer' has no attribute 'inner'
</code></pre>
<p>So, Python does not want to bind names correctly. Although import statement in first.py: <code>import outer.inner.second</code> is executed without crashing, this statement binds to name <code>outer</code> something like an empty package, which doesn't have (but should) the module named <code>inner</code> </p>
<p>What do I do wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's better to import relative paths, not absolute ones. I do not know what you are trying to achieve, but correct way to import something from a file on the same level is to use a dot <code>.</code> so In your <code>first</code> file use something like:</p>
<pre><code>from .second import var as second_var
var = second_var
</code></pre>
<p>And in your <code>inner/__init__.py</code> file something like:</p>
<pre><code>from .first import var as first_var
var = first_var
</code></pre>
<p>This allows you to avoid name conflicts as well as keep names simple, unique and generally more readible code.</p>
<p>EDIT:</p>
<p>Also if you are nw to python consider adding interpreter comment in your <code>main.py</code> module. It's convenient for users of Unix-like systems (OS X, Linux etc.)</p>
<pre><code>#!/usr/bin/env python3
</code></pre>
</div>
<span class="comment-copy">So <code>inner</code> is trying to import from <code>outer</code> - why? Why doesn't <code>first.py</code>, for example, just <code>from .second import var</code>?</span>
<span class="comment-copy">@jonrsharpe I'm relatively new to Python, but I heard that relative imports are quite controversial. And anyway, I just want to find out, what the hell is doing wrong here, not only what should I do instead</span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html</a>, then <a href="https://stackoverflow.com/posts/38944665/edit">edit</a> to clarify the question if still needed.</span>
