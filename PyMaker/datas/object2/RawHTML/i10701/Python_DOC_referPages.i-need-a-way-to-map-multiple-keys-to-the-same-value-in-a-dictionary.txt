<div class="post-text" itemprop="text">
<p>Admittedly, this question seems like it might be a popular one, but I couldn't really find it (perhaps I wasn't using the right search terms). Anyway, I need something of this sort:</p>
<pre><code>tel = {}
tel['1 12'] = 1729
tel['9 10'] = 1729
tel['1 2'] = 9
tel['2 1'] = 9
tel['1 1'] = 2
print(tel)

{['1 1'] : 2, ['1 2', '2 1'] : 9, ['1 12', '9 10'] : 1729}
</code></pre>
<p>So whenever a key's value is already in the dict, append the key to the list of keys mapping to that value; else, add the key value pair to the dict.</p>
<p><strong>EDIT</strong>
I'm sorry if I confused the lot of you, and I'm REALLY sorry if the following confuses you even more :)</p>
<p>This is the original problem I wanted to solve: Given the equation a^3 + b^3, produce a dictionary mapping all positive integer pair values for a, b less than 1000 to the value of the equation when evaluated. When two pairs evaluate to the same value, I want the two pairs to share the same value in the dictionary <em>and</em> be <strong>grouped</strong> together somehow. (I'm already aware that I can map different keys to the same value in a dict, but I need this grouping).</p>
<p>So a sample of my pseudocode would be given by:</p>
<pre><code>for a in range(1, 1000):
    for b in range(1, 1000):
        map pair (a, b) to a^3 + b^3
</code></pre>
<p>For some integer pairs (a, b) and (p, q) where a != p, and b != q, a^3 + b^3 == p^3 + q^3. I want these pairs to be grouped together in some way. So for example, [(1, 12), (9, 10)] maps to 1729. I hope this makes it more clear what I want.</p>
<p><strong>EDIT2</strong>
As many of you have pointed out, I shall switch the key value pairs if it means a faster lookup time. That would mean though that the values in the key:value pair need to be tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>As many of the comments have already pointed out, you seem to have your <strong>key/value</strong> structure <strong>inverted</strong>. I would recommend factoring out your <code>int</code> values as <strong>keys</strong> instead. This way you achieve efficient dictionary look ups using the int value as a key, and implement more elegant simple design in your data - using a dictionary as <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">intended</a>.</p>
<p>Ex: <code>{9: ('1 2', '2 1'), 2: ('1 1',), 1729: ('9 10', '1 12')}</code></p>
<p>That being said the snippet below will do what you require. It first maps the data as shown above, then <em>inverts</em> the key/values essentially. </p>
<pre><code>tel = {}
tel['1 12'] = 1729
tel['9 10'] = 1729
tel['1 2'] = 9
tel['2 1'] = 9
tel['1 1'] = 2
#-----------------------------------------------------------
from collections import defaultdict

new_tel = defaultdict(list)
for key, value in tel.items():
    new_tel[value].append(key)

# new_tel -&gt; {9: ['1 2', '2 1'], 2: ['1 1'], 1729: ['9 10', '1 12']}
print {tuple(key):value for value, key in new_tel.items()}
&gt;&gt;&gt; {('1 2', '2 1'): 9, ('1 1',): 2, ('9 10', '1 12'): 1729}
</code></pre>
</div>
<span class="comment-copy">why aren't the values keys and the keys values, it would seem to make a lot more sense that way</span>
<span class="comment-copy">Multiple keys already can map to the same value, in a dictionary.  So could you explain what's wrong with a normal dict?  Do you need lookup access to the list of keys which are pointing to a particular value?</span>
<span class="comment-copy">A list is not hashable, so you can't do that anyway.  You could use a tuple instead, but as @depperm says, this seems back-to-front.</span>
<span class="comment-copy">@asfeynman, please tell us more about the data in concrete terms.  What is being related to what, and how must it be searched/indexed?  Maybe we can suggest a data structure that solves the problem idiomatically.</span>
<span class="comment-copy">can the OP give a reason/explanation why the current values can't be keys and the keys be the values?</span>
<span class="comment-copy">To the OP, this is what you asked for, although it seems like a bad idea. Thus the comments asking what do you really want?</span>
<span class="comment-copy">@Kenny Ostrom Uhm, not really sure what you mean by replacing my answer with your code?  I just added an explanation and better formatting.</span>
<span class="comment-copy">Yes, apparently. I misread it the first time, then saw the edit go through. I apologize for my hasty rudeness.</span>
<span class="comment-copy">You should probably be using <code>list</code>s as your values, rather than <code>tuple</code>s, as <code>tuple</code>s are not designed to be modified.</span>
<span class="comment-copy">I chose this answer because it did what I needed at the time. However, I will be switching the role of the keys and values as suggested by others. Thanks!</span>
