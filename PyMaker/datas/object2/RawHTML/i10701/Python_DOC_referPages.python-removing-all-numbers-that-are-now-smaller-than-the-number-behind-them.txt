<div class="post-text" itemprop="text">
<p>I made a function for this in my functions file:</p>
<pre><code>def removeNum(myList):
    listSize = len(myList) -1
    loop = 0
    while loop &lt; listSize:
        if myList[loop] &gt; myList[loop + 1]:
            myList.remove(myList[loop + 1])
            listSize = listSize - 1
        loop = loop + 1

    return myList
</code></pre>
<p>My main program looks like: ( I use the removeNum function i'm having issues with towards the bottom of the code. )</p>
<pre><code>import functionsFile




finalDataList = []
openFinalData = open("FinalData.data")
for entry in openFinalData:
    entry = entry.strip()
    entry = int(entry)
    finalDataList.append(entry)


print("The file has been read")

listSum = 0
for numb in finalDataList:
    listSum = listSum + numb

listAvg = listSum / len(finalDataList)
listAvg = round(listAvg,2)

print("The sum of all the numbers:--&gt; "+str(listSum))

print("The average of the numbers is:--&gt; "+str(listAvg))



functionsFile.firstTen(finalDataList)
functionsFile.lastTen(finalDataList)

finalDataList.sort()
finalDataList.reverse()

print("After sorting the numbers")

functionsFile.firstTen(finalDataList)
functionsFile.lastTen(finalDataList)

oddNumList = []
for numb in finalDataList:
    oddNumList.append(functionsFile.makeOdd(numb))

finalDataList = oddNumList

newListSum = 0
for numb in finalDataList:
    newListSum = newListSum + numb

newListAvg = newListSum / len(finalDataList)
newlistAvg = round(newListAvg,2)


print("After replacing the list with all the answers,"
      +"here are the new totals")


print(" The new sum of all the numbers will be: "+str(newListSum))

print("The new average of all the numbers will be:"+str(newListAvg))

print(" ")

functionsFile.firstTen(finalDataList)
functionsFile.lastTen(finalDataList)

print(" ")
print(" ")


functionsFile.removeNum(finalDataList)


print(finalDataList)

openFinalData.close()
</code></pre>
<p>When I run the program it doesn't print out the new list that's been modified from the removeNum function above, is there something wrong with my function or in my main program? I'm not getting any errors. Any thoughts would be appreciated. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to approach the problem is to <code>zip</code> the list with a copy of itself offset by 1 and then filter using a list comprehension as follows:</p>
<pre><code>ls = [1, 3, 0, 7, 9, 4]
zipped = zip(ls, ls[0:1] + ls[:-1])
ls_filtered = [p[0] for p in zipped if p[0] &gt;= p[1]]
# ls_filtered is now [1, 3, 7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your function is broken, look</p>
<pre><code>&gt;&gt;&gt; removeNum([9, 7, 4, 3, 1, 0])
[9, 4, 1]    
</code></pre>
<p>it skip number, the reason is simple</p>
<pre><code>def removeNum(myList):
    listSize = len(myList) -1
    loop = 0
    while loop &lt; listSize:
        if myList[loop] &gt; myList[loop + 1]:
            myList.remove(myList[loop + 1])
            listSize = listSize - 1
        loop = loop + 1  #&lt;-- here is the problem

    return myList
</code></pre>
<p>you advance <code>loop</code> regardless of the situation, when you should not do it when you remove a element, to fix this just do</p>
<pre><code>def removeNum(myList):
    listSize = len(myList) -1
    loop = 0
    while loop &lt; listSize:
        if myList[loop] &gt; myList[loop + 1]:
            myList.pop(loop + 1) # as the position is know, use pop
            listSize = listSize - 1
        else: 
            loop = loop + 1

    return myList
</code></pre>
<p>now it produce the expected outcome</p>
<pre><code>&gt;&gt;&gt; removeNum([9, 7, 4, 3, 1, 0])
[9]
&gt;&gt;&gt; 
</code></pre>
<p>I don't recommend modify the list in place, but rather make a new one with the result like for example</p>
<pre><code>def make_always_growing(iterable):
    current_max = None
    result = []
    for x in iterable:
        if current_max is None or x &gt; current_max:
            current_max = x
            result.append(x)
    return result
</code></pre>
<p>the advantage of this is that don't depend in <code>iterable</code> being a list, which make it more generic and allow it to work with tuple, generator, and anything else</p>
<hr/>
<p>also some line of your cade are unneeded like </p>
<pre><code>listSum = 0
for numb in finalDataList:
    listSum = listSum + numb
</code></pre>
<p>you can use the build-in <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum</code></a> for this</p>
<pre><code>listSum = sum(finalDataList)
</code></pre>
<p>or </p>
<pre><code>functionsFile.firstTen(finalDataList)
functionsFile.lastTen(finalDataList)
</code></pre>
<p>if they do what it name suggest, then you can use a slice to get that</p>
<pre><code> firstTen = finalDataList[:10]
 lastTen  = finalDataList[-10:]
</code></pre>
<p>but as you don't assign it result to anything, then you print it?</p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>my_list = [1, 0, 5, 9, 3, 8, 4]
return [item for index, item in enumerate(my_list) if index == 0 or my_list[index] &gt;= my_list[index - 1]]
</code></pre>
<p>this code will iterate over <code>my_list</code> comparing current item to previous taking only ones which are greater then previous.</p>
</div>
<span class="comment-copy">Have you tried replacing <code>myList.remove(myList[loop + 1])</code> with <code>myList.pop(loop + 1)</code>?</span>
<span class="comment-copy">No I haven't, I just tried running it though and still got the same result.</span>
<span class="comment-copy">to test this here, I need this <code>functionsFile</code></span>
<span class="comment-copy">error is in assignment of return value... do some research on the <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">scope of variables in python</a></span>
<span class="comment-copy">Also, can you give us an example of some input data you've tried, what result you get, and what result you expected?</span>
<span class="comment-copy">removeNum works fine.. the problem lies elsewhere...</span>
