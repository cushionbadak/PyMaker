<div class="post-text" itemprop="text">
<p>I followed the advice of the django docs, and use logging like this:</p>
<pre><code>import logging
logger = logging.getLogger(__name__)

def today(...):
    logger.info('Sun is shining, the weather is sweet')
</code></pre>
<p>With my current configuration, the output looks like this:</p>
<pre><code>2016-08-11 14:54:06 mylib.foo.today: INFO Sun is shining, the weather is sweet
</code></pre>
<p>Unfortunately some libraries which I can't modify use logging like this:</p>
<pre><code>import logging

def third_party(...):
    logging.info('Make you want to move your dancing feet')
</code></pre>
<p>The output unfortunately looks like this:</p>
<pre><code>2016-08-09 08:28:04 root.third_party: INFO Make you want to move your dancing feet
</code></pre>
<p>I want to see this:</p>
<pre><code>2016-08-09 08:28:04 other_lib.some_file.third_party: INFO Make you want to move your dancing feet
</code></pre>
<p>Difference: </p>
<p><em>root.third_party</em> ==&gt; <em>other_lib.some_file.third_party</em></p>
<p>I want to see the long version (not <code>root</code>) if code uses <code>logging.info()</code> instead of <code>logger.info()</code></p>
<p><strong>Update</strong></p>
<p>This is not a duplicate of <a href="https://stackoverflow.com/questions/1598823/elegant-setup-of-python-logging-in-django">Elegant setup of Python logging in Django</a>, since the solution of it is:</p>
<p>Start of quote</p>
<p>In each module, I define a logger using</p>
<pre><code>logger = logging.getLogger(__name__)
</code></pre>
<p>End of quote.</p>
<p>No, I won't modify third-party-code which uses <code>logging.info()</code> instead of <code>logger.info()</code>.</p>
<p><strong>Follow Up Question</strong></p>
<p><a href="https://stackoverflow.com/questions/38952681/">Avoid <code>logger=logging.getLogger(__name__)</code> without loosing way to filter logs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As Wayne Werner suggested, I would use the Log Record format options. Here's an example.</p>
<p>File 1: <code>external_module</code></p>
<pre><code>import logging
def third_party():
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger()

    logger.info("Hello from %s!"%__name__)
</code></pre>
<p>File 2: <code>main</code></p>
<pre><code>import external_module
import logging

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(module)s.%(funcName)s: %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

def cmd():
    logger.info("Hello from %s!"%__name__)
    external_module.third_party()
cmd()
</code></pre>
<p>Output:</p>
<pre><code>2016-08-11 09:18:17,993 main.cmd: INFO Hello from __main__!
2016-08-11 09:18:17,993 external_module.third_party(): INFO Hello from external_module!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because they're using the root logger (which is what you get by default when you just do </p>
<pre><code>import logging

logging.info("Hi! I'm the root logger!")
</code></pre>
<p>If you want to do something different you have two (or three) options. The best would be to use the <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" rel="nofollow">Log Record format options</a>. Alternatively, you could monkey patch the libraries that you're using, e.g.</p>
<pre><code>import logging
import mod_with_lazy_logging

mod_with_lazy_logging.logger = logging.getLogger(mod_with_lazy_logging.__name__)
</code></pre>
<p>Or you could do something gnarly with parsing the ast and rewriting their bits of logging code. But, don't do that.</p>
</div>
<span class="comment-copy"><a href="https://docs.djangoproject.com/en/1.9/topics/logging/" rel="nofollow noreferrer">docs.djangoproject.com/en/1.9/topics/logging</a> you should configure it in your settings.py</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1598823/elegant-setup-of-python-logging-in-django">Elegant setup of Python logging in Django</a></span>
<span class="comment-copy">@be_good_do_good yes, I configured logging. The question is: How to handle loggers which are not named with <code>logger = logging.getLogger(__name__)</code></span>
<span class="comment-copy">Also, I'd probably file a bug report with the upstream library. There's no excuse for <i>not</i> using <code>logger = logging.getLogger(__name__)</code> in a module.</span>
<span class="comment-copy">Could you partially solve this issues by logging file name? File name should respect PYTHONPATH, therefore should be unique. It is not logger name, but should be pretty close.</span>
<span class="comment-copy">Monkey Patching the library could work. But it has a lot of files ... It feels like too much work.</span>
<span class="comment-copy">If it's an open source library, I'd recommend either filing an issue with the maintainer, or creating a PR yourself. Or both. Not using <code>logger = logging.getLogger(__name__)</code>, or at least using <code>'library name'</code> seems lazy/irresponsible.</span>
