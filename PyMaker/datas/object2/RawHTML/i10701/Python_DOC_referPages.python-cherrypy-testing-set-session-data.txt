<div class="post-text" itemprop="text">
<p>When running a pytest unit test against a CherryPy server, using a cherrypy.helper.CPWebCase sub-class, how can I set data for the session object? I tried just calling <code>cherrypy.session['foo']='bar'</code> like I would if I was really in a cherrypy call, but that just gave an <code>"AttributeError: '_Serving' object has no attribute 'session'"</code></p>
<p>For reference, a test case might look something like this (pulled from <a href="https://cherrypy.readthedocs.io/en/latest/advanced.html?highlight=web%20sockets#testing-your-application" rel="nofollow">the CherryPy Docs</a> with minor edits):</p>
<pre><code>import cherrypy
from cherrypy.test import helper
from MyApp import Root

class SimpleCPTest(helper.CPWebCase):
    def setup_server():
        cherrypy.tree.mount(Root(), "/", {'/': {'tools.sessions.on': True}})

    setup_server = staticmethod(setup_server)

    def check_two_plus_two_equals_four(self):
        #&lt;code to set session variable to 2 here&gt;
        # This is the question: How do I set a session variable?
        self.getPage("/")
        self.assertStatus('200 OK')
        self.assertHeader('Content-Type', 'text/html;charset=utf-8')
        self.assertBody('4')
</code></pre>
<p>And the handler might look something like this (or anything else, it makes no difference whatsoever):</p>
<pre><code>class Root:
    @cherrypy.expose
    def test_handler(self):
        #get a random session variable and do something with it
        number_var=cherrypy.session.get('Number')
        # Add two. This will fail if the session variable has not been set,
        # Or is not a number
        number_var = number_var+2
        return str(number_var)
</code></pre>
<p>It's safe to assume that the config is correct, and sessions work as expected. </p>
<p>I could, of course, write a CherryPy page that takes a key and value as arguments, and then sets the specified session value, and call that from my test code (EDIT: I've tested this, and it does work). That, however, seems kludgy, and I'd really want to limit it to testing only somehow if I went down that road.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are trying to achieve is usually referred as <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><em>mocking</em></a>.</p>
<p>While running tests you'd usually want to 'mock' some of resources you access with dummy objects having same interface (duck typing). This may be achieved with monkey patching. To simplify this process you may use <code>unittest.mock.patch</code> as either context manager or method/function decorator.</p>
<p>Please find below the working example with context manager option:</p>
<p>==&gt; MyApp.py &lt;==</p>
<pre><code>import cherrypy


class Root:
    _cp_config = {'tools.sessions.on': True}

    @cherrypy.expose
    def test_handler(self):
        # get a random session variable and do something with it
        number_var = cherrypy.session.get('Number')
        # Add two. This will fail if the session variable has not been set,
        # Or is not a number
        number_var = number_var + 2
        return str(number_var)
</code></pre>
<p>==&gt; cp_test.py &lt;==</p>
<pre><code>from unittest.mock import patch

import cherrypy
from cherrypy.test import helper
from cherrypy.lib.sessions import RamSession

from MyApp import Root


class SimpleCPTest(helper.CPWebCase):
    @staticmethod
    def setup_server():
        cherrypy.tree.mount(Root(), '/', {})

    def test_check_two_plus_two_equals_four(self):
        # &lt;code to set session variable to 2 here&gt;
        sess_mock = RamSession()
        sess_mock['Number'] = 2
        with patch('cherrypy.session', sess_mock, create=True):
            # Inside of this block all manipulations with `cherrypy.session`
            # actually access `sess_mock` instance instead
            self.getPage("/test_handler")
        self.assertStatus('200 OK')
        self.assertHeader('Content-Type', 'text/html;charset=utf-8')
        self.assertBody('4')
</code></pre>
<p>Now you may safely run test as follows:</p>
<pre class="lang-sh prettyprint-override"><code> $ py.test -sv cp_test.py
============================================================================================================ test session starts =============================================================================================================
platform darwin -- Python 3.5.2, pytest-2.9.2, py-1.4.31, pluggy-0.3.1 -- ~/.pyenv/versions/3.5.2/envs/cptest-pyenv-virtualenv/bin/python3.5
cachedir: .cache
rootdir: ~/src/cptest, inifile:
collected 2 items

cp_test.py::SimpleCPTest::test_check_two_plus_two_equals_four PASSED
cp_test.py::SimpleCPTest::test_gc &lt;- ../../.pyenv/versions/3.5.2/envs/cptest-pyenv-virtualenv/lib/python3.5/site-packages/cherrypy/test/helper.py PASSED
</code></pre>
</div>
<span class="comment-copy">Did you enable <code>cherrypy.tools.session</code> for your endpoint? What's the exact code of your handler and testcase, plz provide snippets.</span>
<span class="comment-copy">Yes, sessions are enabled - the app works, I'm just trying to write a test for it. My handler is WAY to complex to post here, consisting of dozens of files and thousands of lines of code (since this doesn't refer to any specific portion). As far as the test case, that's what I'm asking for: what code do I need in my test case to be able to set a value on the session object? Unless it would help if I were to post some generic test case code?</span>
<span class="comment-copy">Could you please post the minimal version you your handler and config, with which it is possible to reproduce such issue (ommiting all your heavy logic). I would like to see how you set a session with my eyes. As for now the test looks fine. Please also check the version of CherryPy you're using.</span>
<span class="comment-copy">P.S. I'd use <code>@staticmethod</code> decorator instead of explicit reassignment</span>
<span class="comment-copy">@webKnjaZ Ok, I added a basic example. Of course, ANY example would work - the issue is that I don't have a clue how to do it, not that it isn't working :-) Using CherryPy 7.1.0</span>
<span class="comment-copy">Of course! Just override the cherrypy thread local session object with my own, global object! Of course, you have to make sure to set <i>any</i> values you need to access in the tested function, not just what you are testing (since the <i>real</i> session object is no longer available), but that's minor.</span>
<span class="comment-copy">Yep, that's correct :)</span>
