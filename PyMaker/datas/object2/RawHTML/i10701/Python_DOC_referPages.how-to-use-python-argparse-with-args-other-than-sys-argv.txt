<div class="post-text" itemprop="text">
<p>I've been all over the documentation and it seems like there's no way to do it, but:</p>
<p>Is there a way to use argparse with any list of strings, instead of only with sys.argv?</p>
<p>Here's my problem: I have a program which looks something like this:</p>
<pre><code># This file is program1.py
import argparse

def main(argv):
    parser = argparse.ArgumentParser()
    # Do some argument parsing

if __name__ == '__main__':
    main(sys.argv)
</code></pre>
<p>This works fine when this program is called straight from the command line. However, I have another python script which runs batch versions of this script with different commandline arguments, which I'm using like this:</p>
<pre><code>import program1

arguments = ['arg1', 'arg2', 'arg3']
program1.main(arguments)
</code></pre>
<p>I still want to be able to parse the arguments, but argparse automatically defaults to using sys.argv instead of the arguments that I give it. Is there a way to pass in the argument list instead of using sys.argv?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a list of strings to <code>parse_args</code>:</p>
<pre><code>parser.parse_args(['--foo', 'FOO'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just change the script to default to <code>sys.argv[1:]</code> and parse arguments omitting the first one (which is the name of the invoked command)</p>
<pre><code>import argparse,sys

def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser()
    # Do some argument parsing
    args = parser.parse_args(argv)

if __name__ == '__main__':
    main()
</code></pre>
<p>Or, if you cannot omit the first argument:</p>
<pre><code>import argparse,sys

def main(args=None):
    # if None passed, uses sys.argv[1:], else use custom args
    parser = argparse.ArgumentParser()
    parser.add_argument("--level", type=int)
    args = parser.parse_args(args)

    # Do some argument parsing

if __name__ == '__main__':
    main()
</code></pre>
<p>Last one: if you cannot change the called program, you can still do something</p>
<p>Let's suppose the program you cannot change is called <code>argtest.py</code> (I added a call to print arguments)</p>
<p>Then just change the local <code>argv</code> value of the <code>argtest.sys</code> module:</p>
<pre><code>import argtest
argtest.sys.argv=["dummy","foo","bar"]
argtest.main()
</code></pre>
<p>output:</p>
<pre><code>['dummy', 'foo', 'bar']    
</code></pre>
</div>
<span class="comment-copy">Are you sure that you've "been all over the documentation"?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/argparse.html#parsing-arguments" rel="nofollow noreferrer">becouse</a> <a href="https://docs.python.org/3/library/argparse.html#parsing-arguments" rel="nofollow noreferrer">allmost</a> <a href="https://docs.python.org/3/library/argparse.html#prefix-chars" rel="nofollow noreferrer">all</a> <a href="https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars" rel="nofollow noreferrer">examples</a> <a href="https://docs.python.org/3/library/argparse.html#argument-default" rel="nofollow noreferrer">do</a> <a href="https://docs.python.org/3/library/argparse.html#allow_abbrev" rel="nofollow noreferrer">not</a> <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow noreferrer">use</a> <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer">sys.argv</a></span>
<span class="comment-copy">Ahh now I see... I was looking at the argparse tutorial (which only uses <code>parse_args()</code> with no arguments) instead of the actual docs that you posted.</span>
<span class="comment-copy">It is also possible to modify <code>sys.argv</code> itself (though this will affect other users of that <code>sys.argv</code>).  The unittest file, <code>test_argparse.py</code> tests cases both ways.</span>
<span class="comment-copy">Another way to find answers like this is to look at the code.  All of <code>argparse</code> is written in <code>python</code>.  It isn't a compiled blackbox.</span>
<span class="comment-copy">Thanks, I was apparently looking at the tutorial for argparse and missed the actual documentation that shows this.</span>
<span class="comment-copy">The arguments are generated programatically, so I cannot use sys.argv in any way.</span>
<span class="comment-copy">Your code is missing the most critical part: <code>args = parser.parse_args(args)</code></span>
<span class="comment-copy">okay, adding it even if it's not the point here. The point is: how to change default arguments and pass custom arguments. I also added a way to manage without changing the called program at all.</span>
<span class="comment-copy">+1 because even though it was a little more info than I needed, the first part (<code>sys.argv[1:]</code>) was missing from the accepted answer.</span>
<span class="comment-copy">thanks, I thought that it was a useful subtlety</span>
