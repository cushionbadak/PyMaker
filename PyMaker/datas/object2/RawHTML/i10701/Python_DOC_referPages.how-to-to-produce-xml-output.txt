<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3605680/creating-a-simple-xml-file-using-python">Creating a simple XML file using python</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I'm creating an web api and need a good way to very quickly generate some well formatted xml. I cannot find any good way of doing this in python.</p>
<p>Note: Some libraries look promising but either lack documentation or only output to files. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://lxml.de/" rel="noreferrer">lxml</a>:</p>
<pre><code>from lxml import etree

# create XML 
root = etree.Element('root')
root.append(etree.Element('child'))
# another child with text
child = etree.Element('child')
child.text = 'some text'
root.append(child)

# pretty string
s = etree.tostring(root, pretty_print=True)
print s
</code></pre>
<p>Output:</p>
<pre><code>&lt;root&gt;
  &lt;child/&gt;
  &lt;child&gt;some text&lt;/child&gt;
&lt;/root&gt;
</code></pre>
<p>See the <a href="http://lxml.de/tutorial.html" rel="noreferrer">tutorial</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer">ElementTree</a> is a good module for reading xml and writing too e.g.</p>
<pre><code>from xml.etree.ElementTree import Element, SubElement, tostring

root = Element('root')
child = SubElement(root, "child")
child.text = "I am a child"

print tostring(root)
</code></pre>
<p>Output:</p>
<pre><code>&lt;root&gt;&lt;child&gt;I am a child&lt;/child&gt;&lt;/root&gt;
</code></pre>
<p>See this <a href="https://pymotw.com/3/xml.etree.ElementTree/create.html" rel="noreferrer">tutorial</a> for more details and how to pretty print.</p>
<p>Alternatively if your XML is simple, do not underestimate the power of string formatting :)</p>
<pre><code>xmlTemplate = """&lt;root&gt;
    &lt;person&gt;
        &lt;name&gt;%(name)s&lt;/name&gt;
        &lt;address&gt;%(address)s&lt;/address&gt;
     &lt;/person&gt;
&lt;/root&gt;"""

data = {'name':'anurag', 'address':'Pune, india'}
print xmlTemplate%data
</code></pre>
<p>Output:</p>
<pre><code>&lt;root&gt;
    &lt;person&gt;
        &lt;name&gt;anurag&lt;/name&gt;
        &lt;address&gt;Pune, india&lt;/address&gt;
     &lt;/person&gt;
&lt;/root&gt;
</code></pre>
<p>You can use string.Template or some template engine too, for complex formatting.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use lxml.builder class, from: <a href="http://lxml.de/tutorial.html#the-e-factory" rel="noreferrer">http://lxml.de/tutorial.html#the-e-factory</a></p>
<pre><code>import lxml.builder as lb
from lxml import etree

nstext = "new story"
story = lb.E.Asset(
  lb.E.Attribute(nstext, name="Name", act="set"),
  lb.E.Relation(lb.E.Asset(idref="Scope:767"),
            name="Scope", act="set")
  )

print 'story:\n', etree.tostring(story, pretty_print=True)
</code></pre>
<p>Output:</p>
<pre><code>story:
&lt;Asset&gt;
  &lt;Attribute name="Name" act="set"&gt;new story&lt;/Attribute&gt;
  &lt;Relation name="Scope" act="set"&gt;
    &lt;Asset idref="Scope:767"/&gt;
  &lt;/Relation&gt;
&lt;/Asset&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use the <a href="http://www.yattag.org" rel="noreferrer">yattag</a> library. I think it's the most pythonic way:</p>
<pre><code>from yattag import Doc

doc, tag, text = Doc().tagtext()

with tag('food'):
    with tag('name'):
        text('French Breakfast')
    with tag('price', currency='USD'):
        text('6.95')
    with tag('ingredients'):
        for ingredient in ('baguettes', 'jam', 'butter', 'croissants'):
            with tag('ingredient'):
                text(ingredient)


print(doc.getvalue())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An optional way if you want to use pure Python:</p>
<p><em><a href="https://docs.python.org/3/library/xml.etree.elementtree.html">ElementTree</a></em> is good for most cases, but it can't <em>CData</em> and <em>pretty print</em>.</p>
<p>So, if you need <em>CData</em> and <em>pretty print</em> you should use <a href="https://docs.python.org/3/library/xml.dom.minidom.html">minidom</a>:</p>
<p><strong>minidom_example.py:</strong></p>
<pre><code>from xml.dom import minidom

doc = minidom.Document()

root = doc.createElement('root')
doc.appendChild(root)

leaf = doc.createElement('leaf')
text = doc.createTextNode('Text element with attributes')
leaf.appendChild(text)
leaf.setAttribute('color', 'white')
root.appendChild(leaf)

leaf_cdata = doc.createElement('leaf_cdata')
cdata = doc.createCDATASection('&lt;em&gt;CData&lt;/em&gt; can contain &lt;strong&gt;HTML tags&lt;/strong&gt; without encoding')
leaf_cdata.appendChild(cdata)
root.appendChild(leaf_cdata)

branch = doc.createElement('branch')
branch.appendChild(leaf.cloneNode(True))
root.appendChild(branch)

mixed = doc.createElement('mixed')
mixed_leaf = leaf.cloneNode(True)
mixed_leaf.setAttribute('color', 'black')
mixed_leaf.setAttribute('state', 'modified')
mixed.appendChild(mixed_leaf)
mixed_text = doc.createTextNode('Do not use mixed elements if it possible.')
mixed.appendChild(mixed_text)
root.appendChild(mixed)

xml_str = doc.toprettyxml(indent="  ")
with open("minidom_example.xml", "w") as f:
    f.write(xml_str)
</code></pre>
<p><strong>minidom_example.xml:</strong></p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;root&gt;
  &lt;leaf color="white"&gt;Text element with attributes&lt;/leaf&gt;
  &lt;leaf_cdata&gt;
&lt;![CDATA[&lt;em&gt;CData&lt;/em&gt; can contain &lt;strong&gt;HTML tags&lt;/strong&gt; without encoding]]&gt;  &lt;/leaf_cdata&gt;
  &lt;branch&gt;
    &lt;leaf color="white"&gt;Text element with attributes&lt;/leaf&gt;
  &lt;/branch&gt;
  &lt;mixed&gt;
    &lt;leaf color="black" state="modified"&gt;Text element with attributes&lt;/leaf&gt;
    Do not use mixed elements if it possible.
  &lt;/mixed&gt;
&lt;/root&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've tried a some of the solutions in this thread, and unfortunately, I found some of them to be cumbersome (i.e. requiring excessive effort when doing something non-trivial) and inelegant. Consequently, I thought I'd throw my preferred solution, <a href="http://web2py.com/books/default/chapter/29/05/the-views#Built-in-helpers" rel="nofollow">web2py HTML helper objects</a>, into the mix. </p>
<p>First, install the the <a href="https://pypi.python.org/pypi/web2py/2.1.1" rel="nofollow">standalone web2py module</a>:</p>
<pre><code>pip install web2py
</code></pre>
<p>Unfortunately, the above installs an extremely antiquated version of web2py, but it'll be good enough for this example. The updated source is <a href="http://www.web2py.com/init/default/download" rel="nofollow">here</a>.</p>
<p>Import web2py HTML helper objects documented <a href="http://web2py.com/books/default/chapter/29/05/the-views#Built-in-helpers" rel="nofollow">here</a>.</p>
<pre><code>from gluon.html import *
</code></pre>
<p>Now, you can use web2py helpers to generate XML/HTML.</p>
<pre><code>words = ['this', 'is', 'my', 'item', 'list']
# helper function
create_item = lambda idx, word: LI(word, _id = 'item_%s' % idx, _class = 'item')
# create the HTML
items = [create_item(idx, word) for idx,word in enumerate(words)]
ul = UL(items, _id = 'my_item_list', _class = 'item_list')
my_div = DIV(ul, _class = 'container')

&gt;&gt;&gt; my_div

&lt;gluon.html.DIV object at 0x00000000039DEAC8&gt;

&gt;&gt;&gt; my_div.xml()
# I added the line breaks for clarity
&lt;div class="container"&gt;
   &lt;ul class="item_list" id="my_item_list"&gt;
      &lt;li class="item" id="item_0"&gt;this&lt;/li&gt;
      &lt;li class="item" id="item_1"&gt;is&lt;/li&gt;
      &lt;li class="item" id="item_2"&gt;my&lt;/li&gt;
      &lt;li class="item" id="item_3"&gt;item&lt;/li&gt;
      &lt;li class="item" id="item_4"&gt;list&lt;/li&gt;
   &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
</div>
<span class="comment-copy">How do you write the result to an xml file?</span>
<span class="comment-copy">Be careful with the second method, as it does not quote special characters, so if your data contains characters such as <code>&lt;&gt;&amp;</code> you can end up with malformed xml.</span>
<span class="comment-copy">I am not sure, if I should think it's beautiful or ugly actually. I've used the <code>with</code> statement for opening files so far and I think of it as a help to "clean up" or "close" whatever I write directly after the <code>with</code> statement.So in this case it would close the tags? Or would it throw them away like a file handle, when opening files? If it throws it away, then why is it still in the final output? Must be because of that <code>text()</code> function. But isn't that circumventing the character of the <code>with</code> statement?</span>
