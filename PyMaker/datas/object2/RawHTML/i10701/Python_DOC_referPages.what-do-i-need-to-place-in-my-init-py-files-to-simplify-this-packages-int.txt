<div class="post-text" itemprop="text">
<p>I have a package that works with the following files:</p>
<pre><code># package/sub1/obj1.py
class Obj1:
    pass

# package/sub2/obj2.py
from ..sub1.obj1 import Obj1
class Obj2(Obj1):
    pass
</code></pre>
<p>Currently, with a file at the same level as the <code>package</code> folder, I need to do this:</p>
<pre><code>from package.sub1.ob1 import Obj1
from package.sub2.ob2 import Obj2
</code></pre>
<p>I want to be able to use the following:</p>
<pre><code>from package.sub1 import Obj1 # can reference package.sub1.Obj1
from package.sub2 import Obj2 # can reference package.sub2.Obj2
from package import * # Can reference both
</code></pre>
<p>I know I need to edit one or more of the three existing <code>__init__.py</code> files, and I <em>think</em> I'll need to set the <code>__all__</code> variable in one or more of them, but I can't seem to figure out what the proper use is for what I want. Am I going about this incorrectly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make it work by adding the following to your <code>__init__.py</code> files:</p>
<p>In <code>package/sub1/__init__.py</code>:</p>
<pre><code>from .ob1 import Obj1
</code></pre>
<p>In <code>package/sub2/__init__.py</code>:</p>
<pre><code>from .ob2 import Obj2
</code></pre>
<p>In <code>package/__init__.py</code>:</p>
<pre><code>__all__ = ['sub1', 'sub2']
</code></pre>
<p>Now top-level code can do any the imports you asked about and they'll make <code>package.subX.ObjX</code> a valid name.</p>
<p>Is this a good design? Not really. One of the principles of good Python design is that <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">"flat is better than nested"</a>. As <a href="https://stackoverflow.com/users/2357112/user2357112">user2357112</a> commented, unlike some other languages, Python doesn't require each class to have its own file. Since you want the <code>Obj1</code> and <code>Obj2</code> classes to be accessible from the <code>package.sub1</code> and <code>package.sub2</code> namespaces, respectively, it might make more sense to combine the files from the <code>subX</code> folders into a single <code>subX.py</code> file (replacing the subpackage with a single larger module).</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you don't have anything else in the <code>__init__.py</code> files except for the following, this should work:</p>
<pre><code># package/sub1/__init__.py
from package.sub1.obj1 import Obj1

# package/sub2/__init__.py
from package.sub2.obj2 import Obj2

# package/__init__.py
from package.sub1 import Obj1
from package.sub2 import Obj2
</code></pre>
<p>After this your 3 use cases should work. You should not need a <code>__all__</code> unless you have other stuff in the <code>__init__.py</code> and keep in mind this only affects the load all syntax <code>from package import *</code>.</p>
<p>One benefit to the <code>package/__init__.py</code> file using the aliased imports for <code>Obj1</code> and <code>Obj2</code> is that you can restructure the entirety of the subpackages and not have to change your <code>package/__init__.py</code> as long as the <code>package/sub*/__init__.py</code> files reflect the new structure.</p>
<p><strong>Edit: Flat vs Nested</strong></p>
<p>(copied from other answer's comment)</p>
<p>It is best for the user of your package that your package appears as flat as possible, but for developers it may be any structure. For example if your package is mainly used via the Obj1 class it would suck to have to do <code>from package.sub1.obj1 import Obj1</code>. On the other hand it would suck as a developer to have to organize all the Obj1 dependencies in one large package/module with the rest of the package. Using the imports the way we've described will make it appear flat while being organized underneath.</p>
</div>
<span class="comment-copy">Any particular reason these classes are in separate files? This package structure looks more like something you'd see in Java than Python.</span>
<span class="comment-copy">I simplified things for the question. Each sub-package actually has multiple files, and I find it easier to keep track of things with each class having a dedicated file.</span>
<span class="comment-copy">I thought that relative imports were frowned upon now, but after reading the related parts of PEP8 it might only be for the standard library. "Standard library code should avoid complex package layouts and always use absolute imports.  Implicit relative imports should never be used and have been removed in Python 3."</span>
<span class="comment-copy">@Chuck I'd like to point out that this solution does not make <code>Obj1</code> and <code>Obj2</code> available when doing <code>from package import *</code>, mine does. It depends how you wanted to use it.</span>
<span class="comment-copy">Yeah, I noticed that you and I interpreted the <code>from package import *</code> bit differently. I'm not sure what the questioner really wanted, so I think it's good to see different options.</span>
<span class="comment-copy">Regarding flat vs. nested, I was working off this as an example: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a>, but I'll check into the philosophy of "flat is better than nested" more to see if I can be convinced. :)</span>
<span class="comment-copy">@daveydave400: <i>Implicit</i> relative imports, as in importing <code>pkg.mod1</code> from inside <code>pkg.mod2</code> as just <code>import mod1</code>, should never be used.</span>
<span class="comment-copy">Re: Flat vs. Nested. Perhaps I can bask in the fact that perhaps I was being pythonic without knowing it, then. :)</span>
