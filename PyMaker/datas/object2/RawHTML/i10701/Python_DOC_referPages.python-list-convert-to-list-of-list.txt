<div class="post-text" itemprop="text">
<p>I am hoping someone can point me in the right direction along with any documentation that can provide even more info than just the answer. Here we go, I have a list of strings:</p>
<pre><code>arr = ["abcd","abcdef","def","abcdef"]
</code></pre>
<p>I want to turn that list into a list of lists so that the new element will be its order of appearance</p>
<pre><code>arr = [("abcd",1),("abcdef",1),("def",1),("abcdef",2)]
</code></pre>
<p>the reason for this is because I would like to then sort that list by length of string, and in case any are of identical length, I can use the 2nd element of the list to know which one was first from my original list.</p>
<pre><code>when "abcdef" appears twice, it also contains 1 or 2 in its 2nd element
</code></pre>
<p>hope that makes sense. thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple and pythonic.</p>
<pre><code>[(v, lst[:i].count(v)+1) for i,v in enumerate(lst)]
</code></pre>
<p>where <code>lst</code> is your list.</p>
<pre><code>&gt;&gt;&gt; lst = ["abcd","abcdef","def","abcdef"]
&gt;&gt;&gt; [(v, lst[:i].count(v)+1) for i,v in enumerate(lst)]
[('abcd', 1), ('abcdef', 1), ('def', 1), ('abcdef', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following for loop:</p>
<pre><code>&gt;&gt;&gt; arr = ["abcd","abcdef","def","abcdef"]
&gt;&gt;&gt; counts = {}
&gt;&gt;&gt; new = []
&gt;&gt;&gt; for item in arr:
...     if item not in counts:
...             new.append((item, 1))
...             counts[item] = 1
...     else:
...             counts[item]+=1
...             new.append((item, counts[item]))
... 
&gt;&gt;&gt; new
[('abcd', 1), ('abcdef', 1), ('def', 1), ('abcdef', 2)]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's sort is stable, per <a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=sort#list.sort" rel="nofollow">docs</a>:</p>
<blockquote>
<p>The sort() method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal</p>
</blockquote>
<p>So just sort the list like the deleted answer of @JulienBernu:</p>
<pre><code>&gt;&gt;&gt; sorted(["abcd","abcdeg","def","abcdef"], key=len)
['def', 'abcd', 'abcdeg', 'abcdef']
&gt;&gt;&gt; sorted(["abcd","abcdef","def","abcdeg"], key=len)
['def', 'abcd', 'abcdef', 'abcdeg']
</code></pre>
<p>Note that the items of equal length remain in the original order.  You don't need to track it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sorted(["abcd","abcdef","def","abcdef"], key=len)</code> will do the job.</p>
</div>
<div class="post-text" itemprop="text">
<p>this look like a job for <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a></p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; arr = ["abcd","abcdef","def","abcdef"]
&gt;&gt;&gt; result = []
&gt;&gt;&gt; current_count = Counter()
&gt;&gt;&gt; for x in arr:
        current_count[x] += 1
        result.append( (x,current_count[x]) )

&gt;&gt;&gt; result
[('abcd', 1), ('abcdef', 1), ('def', 1), ('abcdef', 2)]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">To start you off, here's the <code>Counter</code> module: <a href="https://pymotw.com/2/collections/counter.html" rel="nofollow noreferrer">pymotw.com/2/collections/counter.html</a></span>
<span class="comment-copy">@cricket_007 thanks! I will do some more research</span>
<span class="comment-copy">I don't understand the reason you're describing. Why exactly can't you just sort the strings by length? What bad thing would happen?</span>
<span class="comment-copy">@Paul - I appreciate that... I will do some reading there!</span>
<span class="comment-copy">@JulienBernu I'm with you, but OP keeps avoiding my question.</span>
<span class="comment-copy">Stop downvoting other answers otherwise I shall report you.</span>
<span class="comment-copy">A. J.  The other 2 answers (not yours) were purely incorrect.  IMO, yours is complete not-pythonic, as it does something in 9 lines as mine does in 1.</span>
<span class="comment-copy">So? It answers the question so it does not merit a downvote... Just because one solution is shorter doesn't mean the poster needs to downvote the rest</span>
<span class="comment-copy">Shorter is not better.  @A.J. algorithm is more efficient.</span>
<span class="comment-copy">Simply adding the enumerate value identifies the original order as well:  <code>[(a,i) for i,a in enumerate(arr)]</code>.  <code>[('abcd', 0), ('abcdef', 1), ('def', 2), ('abcdef', 3)]</code>.</span>
<span class="comment-copy">I think you can just do <code>if item not in counts:</code> on line 5, no need for <code>keys()</code>.</span>
<span class="comment-copy">@Paul true, thanks :)</span>
<span class="comment-copy">Thanks! I thought I was getting crazy... any way to report those undeserved downvotes?</span>
<span class="comment-copy">I find it is better to give the OP want they want rather than convince them of what they need. That was the point I was getting at.</span>
<span class="comment-copy">@cricket_007 You are totally right: I must have told the OP to write "the reason for this is because I would like to then sort that list by length of string, and in case any are of identical length, I can use the 2nd element of the list to know which one was first from my original list." I give up with you dude!</span>
<span class="comment-copy">What if the list has a lot of items of the same length? They will all appear in the same order, not in the order of appearance in the list. Try your solution with <code>arr = ["abcd","abcdef","def","abcdef", "aba", "dad", "zzz", "oop", "def", "123", "def"]</code>. But @cricket_007 solution works.</span>
<span class="comment-copy">@chapelo I'm not sure what you are trying to say.  Items with the same length will appear in the same relative order they appeared in the original list...even with your example.</span>
<span class="comment-copy">That's not a list of lists...</span>
<span class="comment-copy">@cricket_007 "the reason for this is because I would like to then sort that list by length of string, and in case any are of identical length, I can use the 2nd element of the list to know which one was first from my original list." Doesn't my answer give solve the final goal?</span>
<span class="comment-copy">I suppose, for the sorting part, yes, but it doesn't solve how it uses the second element to know which order the original list had</span>
<span class="comment-copy">@cricket_007 The order is left as it's inputted in case of identical length!</span>
<span class="comment-copy">You are using the <code>Counter</code> as a mere <code>dict</code>. You are doing the counting, not the <code>Counter</code>. You might as well use a <code>dict</code> or <code>defaultdict(int)</code></span>
<span class="comment-copy">@chapelo I have to do it that way if I am going to preserve the order of the original list, and I choice <code>Counter</code> over the others because it already work with numbers by definition and go with semantics of the code</span>
