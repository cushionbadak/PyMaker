<div class="post-text" itemprop="text">
<p>Why do function generators and class generators behave differently? I mean, with class generators I can use generator as many times as I want, but with function generators, I can only use it once? Why so?</p>
<pre><code>def f_counter(low,high):
    counter=low
    while counter&lt;=high:
        yield counter
        counter+=1

class CCounter(object):
    def __init__(self, low, high):
        self.low = low
        self.high = high
    def __iter__(self):
       counter = self.low
       while self.high &gt;= counter:
            yield counter
            counter += 1

f_gen=f_counter(5,10)
for i in f_gen:
    print(i,end=' ')

print('\n')

for j in f_gen:
    print(j,end=' ')  #no output

print('\n')

c_gen=CCounter(5,10)
for i in c_gen:
    print(i,end=' ') 

print('\n')

for j in c_gen:
    print(j,end=' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Calling the <code>f_gen()</code> function produces an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow"><em>iterator</em></a> (specifically, a <a href="https://docs.python.org/3/glossary.html#term-generator-iterator" rel="nofollow"><em>generator iterator</em></a>). Iterators can only ever be looped over once. Your class is <strong>not</strong> an iterator, it is instead an <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow"><em>iterable</em></a>, an object that can produce any number of <em>iterators</em>.</p>
<p>Your class produces a <em>new</em> generator iterator each time you use <code>for</code>, because <code>for</code> applies the <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow"><code>iter()</code> function</a> on the object you pass in, which in turn calls <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow"><code>object.__iter__()</code></a>, which in your implementation returns a <em>new</em> generator iterator each time it is called.</p>
<p>In other words, you can make the class behave the same way by calling <code>iter(instance)</code> or <code>instance.__iter__()</code> before looping:</p>
<pre><code>c_gen = CCounter(5,10)
c_gen_iterator = iter(c_gen)
for i in c_gen_iterator:
    # ...
</code></pre>
<p>You can also make the <code>CCounter()</code> into an <em>iterator</em> by returning <code>self</code> from <code>__iter__</code>, and adding an <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" rel="nofollow"><code>object.__next__()</code> method</a> (<code>object.next()</code> in Python 2):</p>
<pre><code>class CCounter(object):
    def __init__(self, low, high):
        self.low = low
        self.high = high
    def __iter__(self):
       return self
    def __next__(self):
       result = self.low
       if result &gt;= self.high:
           raise StopIteration()
       self.low += 1
       return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your class is an iterable, but not an iterator itself. Each time you call <code>iter</code> on it, you get a new iterator.</p>
<p>If you want to replicate the behavior of the generator function with a class, then you want an iterator like this:</p>
<pre><code>class CCounter(object):
    def __init__(self, low, high):
        self.low = low
        self.high = high
        self.counter = self.low
    def __iter__(self):
       return self
    def __next__(self):
       if self.counter &gt; self.high:
           raise StopIteration()
       val = self.counter
       self.counter += 1
       return val
</code></pre>
</div>
