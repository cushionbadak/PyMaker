<div class="post-text" itemprop="text">
<p>I am importing a small amount of baseline data into tables immediately after creating them.  Only one table is giving me trouble, and this is because one of the fields is JSON.</p>
<p>I have not found a syntax engine capable of properly interpreting escapped quotes and commas within the JSON.  I have not tried them all and am, of course, open to suggestions based on any experience with a similar problem.</p>
<p>I don't know if it matters, but I'm using Toad for Oracle to export the CSV files as a baseline for development rebuilds of data.  Toad has no option to replace the delimiters in the CSV and while it wouldn't be hard for me to manually change a single CSV file doing so as a maintenance task would be a PITA.</p>
<p>Here is a sample of the CSV data causing the problem:</p>
<pre><code>"RULE_ID","NAME","DISPLAY_DESC","NOTES","RULE","SOURCE_ID","RULE_META","RULE_SCOPE","ACTIVE"
265.00,"RoadKill Report Processor","Report Processor","Loads a long-run-thread for each report matched by the handler method.","MvcsReportProcessManager",41.00,"{
                \"handler\"        : \"processReports\",
                \"consumer_prototype\" :
                \"RoadKill_report_processor.AssetDataReportHostConsumer\",
                \"match_expression\" : \"^MVCS_.*\",
                \"schedule\"    : [
                        \"0:30-4:00|mon-sun|*|*\",
                        \"!*|*|1|jan\",
                        \"!*|*|25|dec\",
                        \"!*|thu|22-28|nov\"
                    ],
                \"wake_interval\" : \"30m\",
                \"interval\"      : \"24h\"
            }","INST",0.00
321.00,"RoadKill AG Processor","Asset Group Reflection","Loads a long-run-thread to download Asset Groups daily.","MvcsAssetGroupDownloader",41.00,"{
                \"handler\"        : \"replicateAssetGroups\",
                \"consumer_prototype\" :
                \"RoadKill_report_processor.AssetGroupConsumer\",
                \"schedule\"    : [
                        \"00:30-17:00|mon-sun|*|*\",
                        \"!*|*|1|jan\",
                        \"!*|*|25|dec\",
                        \"!*|thu|22-28|nov\"
                    ],
                \"wake_interval\" : \"30m\",
                \"interval\"      : \"24h\"
            }","INST",1.00
322.00,"RoadKill Asset Processor","Asset Reflection","Loads a long-run-thread to download Assets daily.","MvcsAssetAPIHostDownloader",41.00,"{
                \"handler\"        : \"replicateAssets\",
                \"consumer_prototype\" :
                \"RoadKill_report_processor.\",
                \"schedule\"    : [
                        \"00:30-17:00|mon-sun|*|*\",
                        \"!*|*|1|jan\",
                        \"!*|*|25|dec\",
                        \"!*|thu|22-28|nov\"
                    ],
                \"wake_interval\" : \"30m\",
                \"interval\"      : \"24h\"
            }","INST",1.00
323.00,"RoadKill Vuln Processor","Vuln Reflection","Loads a long-run-thread to download Vulns daily.","MvcsAssetAPIVulnDownloader",41.00,"{
                \"handler\"        : \"replicateVulns\",
                \"consumer_prototype\" :
                \"RoadKill_report_processor.AssetAPIHostDetectionConsumer\",
                \"schedule\"    : [
                        \"00:30-17:00|mon-sun|*|*\",
                        \"!*|*|1|jan\",
                        \"!*|*|25|dec\",
                        \"!*|thu|22-28|nov\"
                    ],
                \"wake_interval\" : \"30m\",
                \"interval\"      : \"24h\"
            }","INST",1.00
141.00,"RoadKill Manager","RoadKill Sync","Loads RoadKill instances and dispatches an entry point for that source + instance (one for each instance rule).","MvcsInstanceDispatchRule",41.00,"{
            \"handler\"        : \"startInstanceRules\",
            \"schedule\"    : [
                    \"0:00-23:59|mon-sun|*|*\"
                ],
            \"wake_interval\" : \"30m\"
        }","CORE",1.00
</code></pre>
<p>And here is what the python csv module returns as a row when it attempts to parse a row:</p>
<pre><code>&gt;&gt;&gt; [(o,v) for o,v in enumerate(row)]
[(0, '265.00'), (1, 'RoadKill Report Processor'), (2, 'Report Processor'), (3, 'Loads a long-run-thread for each report matched by the handler method.'), (4, 'MvcsReportProcessManager'), (5, '41.00'), (6, '{\n                \\handler\\"        : \\"processReports\\"'), (7, '')]
</code></pre>
<p>Finally, here is the csv reader code:</p>
<pre><code>col_offsets = None
for f in os.listdir(testdatadir):
    #split filename.  get tablename.
    fname = os.path.basename(f)
    if fname and\
            fname.startswith('mvcs_') and\
            fname.endswith('.csv'):
        tblname = fname.split('.')[0]
        tobj = get_class_by_tablename(tblname)
        with open(testdatadir+'/'+fname, 'r') as csvfile:
            csvreader = csv.reader(csvfile, delimiter=',',
                    quotechar='"')
            for count,row in enumerate(csvreader):
                if not count:
                    col_offsets = getColumnOffsets(row)
                elif not col_offsets:
                    raise Exception('Missing column offsets.')
                else:
                    tinst = tobj(
                        **{colname.lower() : row[offset] for
                            offset,colname in col_offsets})
                    try:
                        session.add(tinst)
                    except Exception as e:
                        logger.warn(str(e))
                        logger.warn('on adding:')
                        logger.warn(str(tinst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Line 69-70 (from <a href="https://docs.python.org/3.5/library/csv.html#dialects-and-formatting-parameters" rel="nofollow">https://docs.python.org/3.5/library/csv.html#dialects-and-formatting-parameters</a> ) Dialects.  Escapechar is set to None by default.</p>
<p>Modified to backslash</p>
<pre><code>csvreader = csv.reader(csvfile, delimiter=',',
    quotechar='"', dialect='unix', escapechar='\\')
</code></pre>
</div>
<span class="comment-copy">have you tried wrapping the rows like <code>"["+row+"]"</code> and applying <code>json.loads</code>? your data look like it could work</span>
<span class="comment-copy">if your rows can contain newlines you can still read the values one by one with <a href="https://docs.python.org/3/library/json.html#json.JSONDecoder.raw_decode" rel="nofollow noreferrer">raw_decode</a></span>
<span class="comment-copy">Yeah, that won't work.  I'd basically have to use all kinds of special tweaks.  Why bother making a specific solution when I could simply fix the original parse module with about as much effort.</span>
<span class="comment-copy">looks like the SO syntax parser handles it better than the csv module.</span>
