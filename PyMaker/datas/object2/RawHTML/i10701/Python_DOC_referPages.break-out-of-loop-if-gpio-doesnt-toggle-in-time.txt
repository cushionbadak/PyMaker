<div class="post-text" itemprop="text">
<p>I'm changing some inputs to a device with relays, and I'm expecting at some point to break the firmware.  The question is, when will this happen?</p>
<p>So, to determine if the firmware breaks, I'm monitoring some LEDs that normally blink during normal operation.  I know that they will lock up in whatever state they're currently in when the firmware breaks.  So, my bright idea was to simple feed that signal back into a Raspberry Pi and watch the that GPIO for a change-state.  If I see the state change, then go ahead and flip the relays...Then look at the LEDs and make sure they're still blinking...rinse, repeat.</p>
<p>However, I would normally check this with an interrupt or something in C, but I'm writing this in Python...</p>
<p>What's the Python way for handling this?  I know that if I don't see any blinking for 2 seconds or so, the test is over, but I'm not sure how to do this without invoking something like <code>sleep</code>...to which, I wouldn't be able to watch for pin changes.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/Inputs/" rel="nofollow">gpio</a> module, create a threaded callback function that fires every time a rising (or falling, etc...) edge is detected.</p>
<p>Then using <a href="https://docs.python.org/3/library/signal.html#signal.alarm" rel="nofollow">signal</a> within this function call <code>signal.alarm()</code> to reset an alarm whenever the pin changes.</p>
<p>Finally use <code>signal.signal()</code> to register a function for what should happen when the alarm is not reset in time (ie, firmware has broken)</p>
<p><em>this won't work if you're using windows unfortunately... you would need to implement your own alarm system with threading if you are</em></p>
</div>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/signal.html#signal.alarm" rel="nofollow noreferrer"><code>signal.alarm()</code></a> for example.</span>
<span class="comment-copy">This is pretty good...As I got more into it, I went a slightly different route:</span>
<span class="comment-copy">While (not_broken)  {  Do the manipulations  GPIO.Wait_for_falling_edge(timeout=x seconds)  if/else statement to break the loop  }</span>
