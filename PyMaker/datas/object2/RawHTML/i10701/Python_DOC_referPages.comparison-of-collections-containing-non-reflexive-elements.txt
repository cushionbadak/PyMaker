<div class="post-text" itemprop="text">
<p>In python, a value <code>x</code> is not always constrained to equal itself.  Perhaps the best known example is <code>NaN</code>:</p>
<pre><code>&gt;&gt;&gt; x = float("NaN")
&gt;&gt;&gt; x == x
False
</code></pre>
<p>Now consider a list of exactly one item.  We might consider two such lists to be <em>equal</em> if and only the items they contained were <em>equal</em>.  For example:</p>
<pre><code>&gt;&gt;&gt; ["hello"] == ["hello"]
True
</code></pre>
<p>But this does not appear to be the case with <code>NaN</code>:</p>
<pre><code>&gt;&gt;&gt; x = float("NaN")
&gt;&gt;&gt; x == x
False
&gt;&gt;&gt; [x] == [x]
True
</code></pre>
<p>So these lists of items that are "not equal", are "equal".  But only sometimes ... in particular:</p>
<ul>
<li>two lists consisting of the same instance of <code>NaN</code> are considered equal; while </li>
<li>two separate lists consisting of different instances of <code>NaN</code> are not equal</li>
</ul>
<p>Observe: </p>
<pre><code>&gt;&gt;&gt; x = float("NaN")
&gt;&gt;&gt; [x] == [x]
True
&gt;&gt;&gt; [x] == [float("NaN")]
False
</code></pre>
<p>This general behaviour also applies to other collection types such as tuples and sets.  Is there a good rationale for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="nofollow">the docs</a>,</p>
<blockquote>
<p>In enforcing reflexivity of elements, <strong>the comparison of collections assumes that for a collection element x, x == x is always true</strong>. Based on that assumption, element identity is compared first, and element comparison is performed only for distinct elements. This approach yields the same result as a strict element comparison would, if the compared elements are reflexive. For non-reflexive elements, the result is different than for strict element comparison, and may be surprising: The non-reflexive not-a-number values for example result in the following comparison behavior when used in a list: </p>
<pre><code> &gt;&gt;&gt; nan = float('NaN')
 &gt;&gt;&gt; nan is nan
 True
 &gt;&gt;&gt; nan == nan
 False                 &lt;-- the defined non-reflexive behavior of NaN
 &gt;&gt;&gt; [nan] == [nan]
 True                  &lt;-- list enforces reflexivity and tests identity first
</code></pre>
</blockquote>
</div>
<span class="comment-copy">In case you <i>want</i> to compare with NaNs being not-equal, you can use NumPy, which considers them that way: <code>(np.array(a) == np.array(b)).all()</code> will return False if there are any NaNs.</span>
<span class="comment-copy">Is there a known rationale for collections to be reflexive, other than convenience (and comparison efficiency perhaps)?</span>
<span class="comment-copy">It might be an accident of history. See <a href="https://www.python.org/dev/peps/pep-0207/" rel="nofollow noreferrer">PEP207</a>: "The reflexivity rules <i>are</i> assumed by Python.  Thus, the interpreter may swap y&gt;x with x&lt;y, y&gt;=x with x&lt;=y, and may swap the arguments of x==y and x!=y." This is a statement of the way things are. It goes on to say, "(Note: Python currently assumes that x==x is always true and x!=x is never true; this should not be assumed.)" which seems to indicate that <code>list.__eq__</code> was implemented with the <i>assumption</i> that <code>x!=x</code> could never be true even though, as it turns out, that should not have been assumed.</span>
<span class="comment-copy">This is interesting ... do you have a view on <a href="http://stackoverflow.com/questions/38779970/collection-comparison-is-reflexive-yet-does-not-short-circuit-why">this question</a> at all?</span>
