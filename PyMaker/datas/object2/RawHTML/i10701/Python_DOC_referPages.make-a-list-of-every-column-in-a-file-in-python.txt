<div class="post-text" itemprop="text">
<p>I would like to create a list for every column in a txt file. 
The file looks like this:</p>
<p><code>NAME  S1   S2  S3  S4
A       1    4   3   1 
B       2    1   2   6
C       2    1   3   5</code></p>
<p>PROBLEM 1 . How do I dynamically make the number of lists that fit the number of columns, such that I can fill them? In some files I will have 4 columns, others I will have 6 or 8...</p>
<p>PROBLEM 2. What is a pythonic way to iterate through each column and make a list of the values like this:</p>
<pre><code>list_s1 = [1,2,2]

list_s2 = [4,1,1]
</code></pre>
<p>etc.</p>
<p>Right now I have read in the txt file and I have each individual line. As input I give the number of NAMES in a file (here HOW_MANY_SAMPLES = 4)</p>
<pre><code>def parse_textFile(file):

    list_names = []
    with open(file) as f:
        header = f.next()
        head_list = header.rstrip("\r\n").split("\t")
        for i in f:
            e = i.rstrip("\r\n").split("\t")
            list_names.append(e)

    for i in range(1, HOW_MANY_SAMPLES):    
        l+i = []
        l+i.append([a[i] for a in list_names])
</code></pre>
<p>I need a dynamic way of creating and filling the number of lists that correspond to the amount of columns in my table.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using <code>pandas</code> you can create a list of list or a dic to get what you are looking for.</p>
<p>Create a <code>dataframe</code> from your file, then iterate through each column and add it to a list or dic.</p>
<pre><code>from StringIO import StringIO
import pandas as pd

TESTDATA = StringIO("""NAME   S1   S2   S3   S4
                        A   1    4   3   1 
                        B   2    1   2   6
                        C   2    1   3   5""")

columns = []
c_dic = {}
df = pd.read_csv(TESTDATA, sep="   ", engine='python')
for column in df:
    columns.append(df[column].tolist())
    c_dic[column] = df[column].tolist()
</code></pre>
<p>Then you will have a list of list for all the columns</p>
<pre><code>for x in columns:
    print x
</code></pre>
<p>Returns </p>
<pre><code>['A', 'B', 'C']
[1, 2, 2]
[4, 1, 1]
[3, 2, 3]
[1, 6, 5]
</code></pre>
<p>and </p>
<pre><code>for k,v in c_dic.iteritems():
    print k,v
</code></pre>
<p>returns </p>
<pre><code>S3 [3, 2, 3]
S2 [4, 1, 1]
NAME ['A', 'B', 'C']
S1 [1, 2, 2]
S4 [1, 6, 5]
</code></pre>
<p>if you need to keep track of columns name and data</p>
</div>
<div class="post-text" itemprop="text">
<h2>Problem 1:</h2>
<p>You can use <code>len(head_list)</code> instead of having to specify <code>HOW_MANY_SAMPLES</code>.</p>
<p>You can also try using <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">Python's CSV module</a> and setting the delimiter to a space or a tab instead of a comma.</p>
<p>See <a href="https://stackoverflow.com/a/8859304/3199915">this answer to a similar StackOverflow question</a>.</p>
<h2>Problem 2:</h2>
<p>Once you have a list representing each row, you can use <code>zip</code> to create lists representing each column:
See <a href="https://stackoverflow.com/a/20279160/3199915">this answer</a>.</p>
<p>With the CSV module, you can <a href="https://stackoverflow.com/a/29082892/3199915">follow this suggestion</a>, which is another way to invert the data from row-based lists to column-based lists.</p>
<h2>Sample:</h2>
<pre><code>import csv

# open the file in universal line ending mode 
with open('data.txt', 'rU') as infile:

    # register a dialect that skips extra whitespace
    csv.register_dialect('ignorespaces', delimiter=' ', skipinitialspace=True)

    # read the file as a dictionary for each row ({header : value})
    reader = csv.DictReader(infile, dialect='ignorespaces')
    data = {}
    for row in reader:
        for header, value in row.items():
            try:
                if (header):
                    data[header].append(value)
            except KeyError:
                data[header] = [value]

for column in data.keys():
    print (column + ": " + str(data[column]))
</code></pre>
<p>this yields:</p>
<pre><code>S2: ['4', '1', '1']
S1: ['1', '2', '2']
S3: ['3', '2', '3']
S4: ['1', '6', '5']
NAME: ['A', 'B', 'C']
</code></pre>
</div>
<span class="comment-copy">this is exactly what I need!!!! Thank you very much. I am learning about pandas. It is powerful</span>
<span class="comment-copy">@amc great! glad i could help</span>
