<div class="post-text" itemprop="text">
<p>For example, if I try to do:</p>
<pre><code>a_string + an_int
</code></pre>
<p>... where a_string is type 'str' and an_int is type 'int', or:</p>
<pre><code>an_int + a_string
</code></pre>
<p>There would be a <code>TypeError</code> because there is no implicit conversion of the types. I understand that if I were using my own subclasses of int and string, I would be able to overload the <code>__add__()</code> method in my classes to achieve this. </p>
<p>However, out of curiosity, I would like to know: would it be possible to overload the + operator in the class definitions of <code>int</code> and <code>str</code>, so that <code>__add__(int,str)</code> and <code>__add__(str,int)</code> automatically concatenate them as strings? </p>
<p>If not, what are the reasons why a programmer should not overload the operators for a native datatype? </p>
</div>
<div class="post-text" itemprop="text">
<p>In general, without reverting to the C-level API, you cannot modify attributes of builtin types (see <a href="https://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a">here</a>). You can, however, subclass builtin types and do what you want on the new types. For the question you specifically asked (making the addition string based), you'd modify <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer"><code>__add__</code> and <code>__radd__</code></a>:</p>
<pre><code>class Int(int):
    def __add__(self, other):
        return Int(int(str(self) + str(other)))

    def __radd__(self, other):
        return Int(str(other) + str(self))

&gt;&gt;&gt; Int(5) + 3
53

&gt;&gt;&gt; 3 + Int(5) + 87
3587
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out above, you can't (unless you are up to building your own Python implementation). That is, you cannot change the way <code>'1'+1</code> is handled if encountered in code. But you can mess with builtin <em>functions</em> however you please:</p>
<pre><code>&gt;&gt;&gt; int = str
&gt;&gt;&gt; type(1)
&lt;class 'int'&gt;
&gt;&gt;&gt; type('1')
&lt;class 'str'&gt;
&gt;&gt;&gt; int(1)
'1'
&gt;&gt;&gt; type(int(1))
&lt;class 'str'&gt;
</code></pre>
<p>It's little more than an enlightening example of first-class functions' awesomeness, thoug. Any changes you make stay in a namespace you are making them in. Consider this:</p>
<pre><code>&gt;&gt;&gt; str=int
&gt;&gt;&gt; str('1')
1
&gt;&gt;&gt; str('asd')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'asd'
&gt;&gt;&gt; input()
2
'2'
&gt;&gt;&gt; 
</code></pre>
<p>You are using whatever you put in <code>str</code>, in this case <code>int</code>. But <code>input()</code> knows better and falls back to the builtins. There may be some weird trick with closures that'll make it refer to your implementation, but I can't find it. By the way, original <code>str</code> is in <code>__builtins__.str</code>, should you need it back.</p>
<p>Pulling the same trick on builtin's methods doesn't work:</p>
<pre><code>&gt;&gt;&gt; int.__add__ = str.__add__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'int'
</code></pre>
</div>
<span class="comment-copy"><a href="http://blog.teamtreehouse.com/operator-overloading-python" rel="nofollow noreferrer">blog.teamtreehouse.com/operator-overloading-python</a></span>
<span class="comment-copy">Thank you for the link, it's a good explanation of how to overload operators in a user-defined class.. however, I'm wondering if it's possible to do it for native datatypes such as 'str' and 'int'.</span>
<span class="comment-copy">Is it for python 2.x or 3.x?</span>
<span class="comment-copy">I'm using 3.5.2 on my machine at the moment.</span>
<span class="comment-copy">Thank you. Is there any Pythonic reason why we are not allowed to change member attributes of built-in types?</span>
<span class="comment-copy">It might cause stuff that's too weird: your program would malfunction, and you couldn't figure out why, because string's <code>__str__</code> form could mean one crazy thing, and the the debugger wouldn't work because integer addition would mean some other crazy thing.</span>
<span class="comment-copy">That sounds sensible, thank you.</span>
<span class="comment-copy">Very good point.</span>
