<div class="post-text" itemprop="text">
<p>I found importing modules in Python complicated, so I'm doing experiments to clear it up. Here is my file structure:</p>
<pre><code>PythonTest/
  package/
    __init__.py
    test.py
</code></pre>
<p>Content of <code>__init__.py</code>:</p>
<pre><code>package = 'Variable package in __init__.py'
from package import test
</code></pre>
<p>Content of <code>test.py</code>:</p>
<pre><code>from package import package
print package
</code></pre>
<p>When I stay out of <code>package</code>(in <code>PythonTest</code>), and execute <code>python package/test.py</code>, I get:</p>
<pre><code>Traceback (most recent call last):
  File "package/test.py", line 1, in &lt;module&gt;
    from package import package
ImportError: No module named package
</code></pre>
<p>The expected output is <code>Variable package in __init__.py</code>. What am I doing wrong?</p>
<hr/>
<p>However, I can get the expected output in the interactive mode:</p>
<pre><code>sunqingyaos-MacBook-Air:PythonTest sunqingyao$ python
Python 2.7.10 (default, Oct 23 2015, 19:19:21) 
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import package
Package in __init__.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First Let's see how Python search for packages and modules. <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="noreferrer"><code>sys.path</code></a> </p>
<blockquote>
<p>A list of strings that specifies the search path for modules. Initialized from the environment variable <code>PYTHONPATH</code>, plus an installation-dependent default.</p>
</blockquote>
<p>That's the search paths. Therefore, if your module/package is located in one of <code>sys.path</code>, python interpreter is able to find and import it. The doc says more:</p>
<blockquote>
<p>As initialized upon program startup, the first item of this list, <code>path[0]</code>, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), <code>path[0]</code> is the empty string, which directs Python to search modules in the current directory first.</p>
</blockquote>
<p>I modified <code>test.py</code> as an example.</p>
<pre><code>import sys; import pprint
pprint.pprint(sys.path)

from package import package
print package 
</code></pre>
<p>There are two cases:</p>
<pre><code>$ python package/test.py
['/Users/laike9m/Dev/Python/TestPython/package',
 '/usr/local/lib/python2.7/site-packages/doc2dash-2.1.0.dev0-py2.7.egg',
 '/usr/local/lib/python2.7/site-packages/zope.interface-4.1.3-py2.7-macosx-10.10-x86_64.egg',
 '/usr/local/lib/python2.7/site-packages/six-1.10.0-py2.7.egg',
 '/usr/local/lib/python2.7/site-packages/colorama-0.3.3-py2.7.egg',
</code></pre>
<p>As you see, <code>path[0]</code> is <code>/Users/laike9m/Dev/Python/TestPython/package</code>, which is the directory containing the script <code>test.py</code> that was used to invoke the Python interpreter.</p>
<pre><code>$ python                                         
Python 2.7.12 (default, Jun 29 2016, 14:05:02)
[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import package
['',
 '/usr/local/lib/python2.7/site-packages/doc2dash-2.1.0.dev0-py2.7.egg',
 '/usr/local/lib/python2.7/site-packages/zope.interface-4.1.3-py2.7-macosx-10.10-x86_64.egg',
 '/usr/local/lib/python2.7/site-packages/six-1.10.0-py2.7.egg',
 '/usr/local/lib/python2.7/site-packages/colorama-0.3.3-py2.7.egg',
...
</code></pre>
<p>Now comes the second case, when invoked interactively, "<code>path[0]</code> is the empty string, which directs Python to search modules in the current directory first." What's the current directory? <code>/Users/laike9m/Dev/Python/TestPython/</code>.(look this is the path on my machine, it's equivalent to the path to <code>PythonTest</code> in your case)</p>
<p>Now you know the answers:</p>
<ol>
<li><p><strong>Why did <code>python package/test.py</code> give <code>ImportError: No module named package</code>?</strong> </p>
<p>Because the interpreter does not "see" the package. For the interpreter to be aware of package <code>package</code>, <code>PythonTest</code> has to be in <code>sys.path</code>, but it's not.
<br/><br/></p></li>
<li><p><strong>Why did this work in interactive mode?</strong></p>
<p>Because now <code>PythonTest</code> is in <code>sys.path</code>, so the interpreter is able to locate package <code>package</code>.</p></li>
</ol>
</div>
<span class="comment-copy">It doesn't look like the module search path is set up for the <code>package</code> package to be findable.</span>
<span class="comment-copy">@user2357112 So I should set <code>PYTHONPATH</code> or modify <code>sys.path</code>? But why everything is OK under the interactive mode?</span>
<span class="comment-copy">I'm assuming you are starting the interactive mode from the same directory as your file, so that path becomes part of the search path automatically.  Try starting python from a totally different directory</span>
<span class="comment-copy">The directory from which I invoked the interactive mode is exactly the directory from which I executed <code>python package/test.py</code>. When I enter a totally different directory, neither of this two approaches works.</span>
<span class="comment-copy"><code>python package/test.py</code> adds the directory of the script you're executing to the search path, not the directory you're launching the script from.</span>
