<div class="post-text" itemprop="text">
<p>In Java, using the <code>close()</code> method frees resources by removing out of scope objects. I am confused as to what is the Python equivalent for this? </p>
<ul>
<li>Does Python's garbage collector automatically do this?</li>
<li>Is it the <code>del</code> method?</li>
<li>Should I use the <code>with</code> statement?</li>
</ul>
<p>Any help will be appreciated.</p>
<p>Edit: My goal is to explicitly remove <strong>class objects</strong> when desired, not file objects.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Should I use the with statement?</p>
</blockquote>
<p>Yes, according to <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>It is good practice to use the with keyword when dealing with file objects. This has the advantage that the file is properly closed after its suite finishes, even if an exception is raised on the way. It is also much shorter than writing equivalent try-finally blocks:</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You will find your answer <a href="https://stackoverflow.com/questions/1316767/how-can-i-explicitly-free-memory-in-python">here</a>: place gc.collect() before your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>ICart's comment is spot on for many different situations. However, regarding the creation and disposal of objects in general, I think <a href="https://stackoverflow.com/questions/6315244/how-to-give-object-away-to-python-garbage-collection">this other thread</a> provides a pretty good explanation of how python handles their objects (reference counts), and where garbage collection comes in.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/19747371/python-exit-commands-why-so-many-and-when-should-each-be-used" title="python exit commands why so many and when should each be used">stackoverflow.com/questions/19747371/…</a> does this help?</span>
<span class="comment-copy">@AgataB Not really</span>
<span class="comment-copy">Do you have a specific use case that requires this?  Can you elaborate on it?  Python use wouldn't typically involve zeroing out instances (what you call class objects) manually. <b>weakref</b> might be of interest to avoid them sticking around.  <b>with</b> is <b>not</b> an appropriate construct because it operates <b>within the context of</b> an instance - it's intended to free <b>resources</b> held by an instance.  I've never seen any seriously written Python code use <b>gc</b> directly - not to say it should never be done, but it's hackish wo a very good reason.</span>
<span class="comment-copy">Does this also remove unused class objects?</span>
<span class="comment-copy">For that, the following discussion might be of interest: <a href="http://stackoverflow.com/questions/693070/how-can-you-find-unused-functions-in-python-code" title="how can you find unused functions in python code">stackoverflow.com/questions/693070/…</a>.</span>
<span class="comment-copy">It seems that you would need to use additional tools (pyflakes and vulture).</span>
<span class="comment-copy">That is not actually what I want, I should have phrased my question better. What I need to do, is to "close" objects that I am no longer going to use, explicitly using a statement.</span>
<span class="comment-copy">Yes, I am looking for similar functionality like that, but for class objects, not to close files.</span>
