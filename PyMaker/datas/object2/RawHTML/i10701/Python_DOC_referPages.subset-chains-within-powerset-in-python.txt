<div class="post-text" itemprop="text">
<p>If I've enumerated the powerset of the alphabet, for example, as 0,...,1&lt;&lt;26-1.</p>
<p>For a given number in that range, I want to know what all of its subsets are.  I can do something a bit inefficient like:</p>
<pre><code>def find_subset_chain(subset):
    return [i for i in subset if i &amp; subset == i]
</code></pre>
<p>In the event that I'm doing this for <em>every</em> element of the powerset, I can proceed backward from the element in question until I hit a subset, and then attach the stuff I've already figured out, but it happens to be  the case that I want to do this for some select elements of the power set and not all of them.</p>
<p>Perhaps there exists a more number theoretic way to produce the list of subsets of a given element, a, of the powerset without having to iterate through every element up to a? </p>
</div>
<div class="post-text" itemprop="text">
<p>We can find the least significant set bit of a number as</p>
<pre><code>n &amp; -n
</code></pre>
<p>and we can use that to "count down" the subsets of a set represented as a bitmask by repeatedly clearing the least significant set bit and restoring all less-significant set bits from the original number:</p>
<pre><code>def subsets(bitmask):
    current = bitmask
    while current:
        yield current
        lssb = current &amp; -current        # find least significant set bit
        current &amp;= ~lssb                 # clear least significant set bit
        current |= bitmask &amp; (lssb - 1)  # restore less significant bits from original
    yield current
</code></pre>
</div>
<span class="comment-copy">You've already taken the power set of a 26-element set, and now you want to take the power set of every element in the power set? While the implementation is straightforward, have you given any thought to how huge the output you're asking for is? Whatever problem you're trying to solve by doing this, there's probably a better way to solve it.</span>
<span class="comment-copy">@user2357112: Not every element.  Just some elements.  Yes, power sets are large.  Appreciate the non-constructive disdain :D</span>
<span class="comment-copy">Check out the powerset recipe from the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module.</span>
<span class="comment-copy">@wwii: not particularly relevant here, but is a cool tidbit nonetheless.</span>
<span class="comment-copy">This is great!  Thanks. I guess your earlier comment was just a warm up.</span>
