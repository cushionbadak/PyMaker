<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>I am using a recursive function on a list of lists with an accumulator, but instead of creating the right list of lists, it makes a list with duplicates of the last item inserted in the accumulator. I recreated the problem in a much simpler recursive function and list. This function takes a list of lists and makes 2 copies and reverses them n times.</p>
<pre><code>def recursauto(x, n, instSet):
    #Base Case
    if(n==0):
        instSet.append(x)
        print(x) #Print to see what SHOULD be added
    else:
        temp = [x]*(2)  # Make a list with 2 copies of the original list
        for i in range(len(temp)):
            temp[i][i] = temp[i][i][::-1] # Make the list backwards
        for i in range(2):
            recursauto(temp[i], n-1, instSet) #Input each element

MyList = [] #Empyt list for accumulator
print("Correct output:")
recursauto([["A", "l", "e", "x"], ["A", "b", "d", "a", "l", "a", "h"]], 2, MyList)

print("Wrong printed list:")
for i in MyList:
    print(i) #Print what is in the accumulator
</code></pre>
<p>The output comes out wrong and the accumulator does not have the right things that were put into it.</p>
<pre><code>Correct output:
[['A', 'l', 'e', 'x'], ['A', 'b', 'd', 'a', 'l', 'a', 'h']]
[['A', 'l', 'e', 'x'], ['A', 'b', 'd', 'a', 'l', 'a', 'h']]
[['x', 'e', 'l', 'A'], ['h', 'a', 'l', 'a', 'd', 'b', 'A']]
[['x', 'e', 'l', 'A'], ['h', 'a', 'l', 'a', 'd', 'b', 'A']]
Wrong printed list:
[['x', 'e', 'l', 'A'], ['h', 'a', 'l', 'a', 'd', 'b', 'A']]
[['x', 'e', 'l', 'A'], ['h', 'a', 'l', 'a', 'd', 'b', 'A']]
[['x', 'e', 'l', 'A'], ['h', 'a', 'l', 'a', 'd', 'b', 'A']]
[['x', 'e', 'l', 'A'], ['h', 'a', 'l', 'a', 'd', 'b', 'A']]
</code></pre>
<p>I know that there is an easier way to do this, but the function I'm actually making requires recursion. Like I said, this is just a simplified recreation of the problem I am having.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>temp = [x]*(2)
</code></pre>
<p>The above line does not create a list of two <em>copies</em> of the original list; in fact, it just stores a reference to the same original list twice. If you want a distinct copy of <code>x</code>, try using the list copy constructor like <code>temp = [list(x), list(x)]</code> or alternatively the shallow <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">copy method</a> <code>[x.copy() x.copy()]</code>.</p>
<p>See the below example.</p>
<pre><code>&gt;&gt;&gt; ls = ['a']
&gt;&gt;&gt; dup = [ls] * 2
&gt;&gt;&gt; dup
[['a'], ['a']]
&gt;&gt;&gt; ls.append('b')
&gt;&gt;&gt; dup
[['a', 'b'], ['a', 'b']]
</code></pre>
</div>
<span class="comment-copy">What would be the correct output?</span>
<span class="comment-copy">The correct output is the list that is going into the accumulator. This is the same thing as what is printed before the "Wrong printed list:" line in the output.</span>
<span class="comment-copy">What is the purpose of the recursive function?</span>
<span class="comment-copy">It just creates 2 copies and reverses the strings every n times.</span>
<span class="comment-copy">Please don't use <code>list</code> as a variable name.</span>
<span class="comment-copy">More general solution: <code>[MyList for i in range(a)]</code> where a is the number of independent lists thats are required. Use the * operator only if you want to initialize a list of hashable items such a numbers or None, not for lists of lists.</span>
<span class="comment-copy">The problem is that I actually do that because I need a list with 2*n copies of x, so I have been doing temp = [x]*(2*n). What's the alternative to that?</span>
<span class="comment-copy">@AbdalahEl-Barrad like Michael said: <code>[x.copy() for i in range(n * 2)]</code></span>
<span class="comment-copy">However if x is a number, the * operator will do.</span>
