<div class="post-text" itemprop="text">
<p>I am creating two lists by reading from a text file with  two columns, which always has the same layout but the length of the columns differ.</p>
<pre><code>def read_columns(x,y,filename,rw):
            print(filename)
            if(not os.path.isfile(filename)):
                sys.exit(filename + " does not exist")

            file = open(filename,rw)
            left_column = True
            for line in file:
                # print(line)
                if ("X" not in line and line is not ""):
                    s = line.split()
                    for floats in s:
                        if left_column:
                            left_column = False
                            x.append(float(floats))
                        else:
                            y.append(float(floats))
                            left_column = True
</code></pre>
<p>Then I'd like to find the minimum value in the Y list</p>
<pre><code>def find_minforce(y):                
            min_force = min(y)

            return min_force
</code></pre>
<p>However the corresponding x value of the minimum y-value should be higher than a certain value. Like ignore all y values with a corresponding x-value lower than 0.01. Any suggestions?</p>
<p>for example</p>
<pre><code>x y
0 -8
1 -9
2 -4
2.5 -6
2.71 -3
</code></pre>
<p>I should get minimum_y = -6 in case I want to ignore all x&lt;2</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a couple of problems in your code besides what you're trying to do. I've tried to fix the errors and explain what I was doing.</p>
<pre><code>import logging
from collections import namedtuple
logging.basicConfig(level=logging.DEBUG)

# See https://docs.python.org/3/library/collections.html#collections.namedtuple
# but namedtuples are an awesome way to group related
# data that allows you to use attribute lookup.
# In this case - point.x and point.y.
# Point was my best guess for name, since you
# had `x` and `y`.
Point = namedtuple('Point', ('x', 'y'))

# There was no need to pass in any of these values
# Returning lists is better than passing them in to
# be mutated. Also you're not writing to the file in
# here that I see. It'd be better to pass in a file
# object if you need to control that from outside
# the function
def read_columns(filename):
    data = []  # creating a list of data here

    # Better to use logging - that way you can just
    # change the log level if you don't want to see
    # the messages any more
    logging.debug('Reading from file %r', filename)
    try:
        with open(filename) as file:
            for line in file:
                line = line.strip()
                logging.debug('Line: %r', line)

                # Parenthesis aren't necessary
                # `line is not ""` is checking for
                # identity and not equality. Also
                # an empty line will evaluate to False.
                # but iterating over lines will always
                # include the `\n` so we call line.strip()
                # earlier
                if line.strip() and 'X' not in line:
                    left, right = line.split()
                    point = Point(x=float(left), y=float(right))
                    if point.x &gt; 2:
                        data.append()
    except FileNotFoundError as e:
        sys.exit("File {!r} does not exist".format(filename))

    return data
</code></pre>
<p>Note that if I weren't worried about the file existing, I'd probably do something like this:</p>
<pre><code>with open(filename) as f:
    data = [point for point in 
            (Point(*(float(_) for _ in line.split())
             for line in f if line.strip() and 'X' not in line)
            if point.x &gt; 2
            ]

# could be compressed into one line, but that's not very readable.
with open(filename) as f:
    data = [point for point in (Point(*(float(_) for _ in line.split()) for line in f if line.strip() and 'X' not in line) if point.x &gt; 2]
</code></pre>
<p>That approach uses a list comprehension, a generator comprehension, and argument unpacking. They're very powerful techniques.</p>
</div>
<span class="comment-copy"><code>min(yy for xx,yy in zip(x,y) if xx&gt;0.01)</code></span>
<span class="comment-copy">That was extremely helpful, I'm using scripting to control my engineering simulations for my thesis. Thank you so much for taking the time.</span>
<span class="comment-copy">You're welcome! If this solves your problem, you can mark it as accepted with the checkmark to the left. If you think it's well written/extra helpful, you can also upvote it :)</span>
