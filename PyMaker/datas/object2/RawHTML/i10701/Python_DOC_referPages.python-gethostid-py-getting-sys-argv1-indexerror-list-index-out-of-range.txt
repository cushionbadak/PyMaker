<div class="post-text" itemprop="text">
<p>i am working on a python script to be a multi tool for getting DNS information on servers in a enterprise env. so far the script i have is using python 3.5. i am using argparse for creating command line options, which i am trying to create an if/ elif / else statement which contains the different selections. the main error message i am getting is:</p>
<pre><code>./GetHostName.py
Traceback (most recent call last):
  File "./GetHostName.py", line 34, in &lt;module&gt;
    remoteServer = sys.argv[1]
IndexError: list index out of range
</code></pre>
<p>that is when the command is run by itself. 
when it is run with a host name at the end ./GetHostName.py hostName 
it gives this message: </p>
<pre><code>GetHostName.py: error: unrecognized arguments: hostName 
</code></pre>
<p>I didn't put real name of server for security issues....
When i use the argparse options say like the -f option for getting the FQDN, it gives this response...</p>
<pre><code>./GetHostName.py -f hostName
3
-f
</code></pre>
<p>from the way it appears, it is taking the -f as input for the server name, when it should only be the input for argparse input. i have tried everything to fix it that i can think of. i have encased the main code body in a main function, that didn't work so i removed it. i use the try: statement and exception statements. that didn't work. i am wondering if there is something just basically wrong with my programming logic at this point...</p>
<p>this here is the code from the script:</p>
<pre><code>#!C:\Bin\Python35\python.exe
# 

# import libraries
import sys, os
import argparse as ap
import socket

# Command Line interface setup


def argParse():
    #Command Line arg parse
    parser=ap.ArgumentParser(description='A tool to get a remote servers DNS information.')
    parser.add_argument("-a", "--address", default="fqdn", help="Gets IP address from host name.")
    parser.add_argument("-f", "--fqdn", default="fqdn", help="Gets the FQDN address of server.")
    parser.add_argument("-d", "--addrinfo", default="fqdn", help="Gets the FQDN address of server.")
    parser.add_argument("-l", "--local", default="fqdn", help="Gets info on local host.")
    parser.add_argument("-Pr", "--proto",  default="fqdn", help="Translate an Internet protocol name to a constant suitable for passing as the (optional) third argument to the socket() function.")
    parser.add_argument("-n", "--nameinfo", default="fqdn", help="Gets name and port on remote host.")
    parser.add_argument("-Sn", "--servbyname", default="fqdn", help="Translate an Internet service name and protocol name to a port number for that service.")
    parser.add_argument("-Sp", "--servbyport",  default="fqdn", help="Translate an Internet port number and protocol name to a service name for that service.")
    parser.add_argument("-t", "--timeout", default="fqdn", help="Return the default timeout in seconds for new socket objects.")
    parser.add_argument("-v", "--verbose",  default="fqdn", help="Increase output verbosity")
    return parser.parse_args()
    #remoteServer = input().strip().split()

args=argParse()




if args.fqdn:
    remoteServer = sys.argv[1]
    print (len(sys.argv))
    remoteServerIP = socket.getfqdn(remoteServer)
    print (remoteServerIP)

elif args.address:
    remoteServer = sys.argv[2]
    print (len(sys.argv))
    remoteServerIP = socket.gethostbyname(remoteServer)
    print (remoteServerIP)

elif args.addrinfo:
    remoteServer = sys.argv[3]
    print (len(sys.argv))
    remoteServerIP = socket.getaddrinfo(remoteServer)
    print (remoteServerIP)

elif args.local:
    remoteServer = sys.argv[4]
    print (len(sys.argv))
    remoteServerIP = socket.gethostname()
    print (remoteServerIP)  

 elif args.proto:
    remoteServer = sys.argv[5]
    print (len(sys.argv))
    remoteServerIP = socket.getprotobyname(remoteServer)
    print (remoteServerIP)

elif args.servbyname:
    remoteServer = sys.argv[6]
    print (len(sys.argv))
    remoteServerIP = socket.getservbyname(remoteServer)
    print (remoteServerIP)

elif args.servbyport:
    remoteServer = sys.argv[7]
    print (len(sys.argv))
    remoteServerIP = socket.getservbyport(remoteServer)
    print (remoteServerIP)

elif args.timeout:
    remoteServer = sys.argv[8]
    print (len(sys.argv))
    remoteServerIP = socket.getdefaulttimeout(remoteServer)
    print (remoteServerIP)

elif args.verbose:
    remoteServer = sys.argv[9]
    print (len(sys.argv))
    remoteServerIP = socket.gethostbyaddr(remoteServer)
    print (remoteServerIP)

else:
    args.nameinfo
    remoteServer = sys.argv[10]
    print (len(sys.argv))
    remoteServerIP = socket.getnameinfo(remoteServer)
    print (remoteServerIP)
</code></pre>
<p>any help would be appreciated. please note that when i run a script with just this in it, it works just fine:</p>
<pre><code>#!C:\Bin\Python35\python.exe
#
import sys, os
import argparse
import socket

# Command Line interface setup
def main():
        remoteServer = sys.argv[1]
        remoteServerIP = socket.gethostbyaddr(remoteServer)
        print (remoteServerIP)

if __name__ == '__main__':
    main()
</code></pre>
<p>thanks in advance.
-Betzelel</p>
<p>P.S. the code may look out of format, due to having to copy and paste into this blog, and manually putting 4 spaces on to each line to get it to show up as code lol. </p>
</div>
<div class="post-text" itemprop="text">
<p>I've had this problem long time ago. To fix this I've changed</p>
<pre><code>parser.add_argument("-a", "--address", default="fqdn", help="Gets IP address from host name.")
</code></pre>
<p>in</p>
<pre><code>parser.add_argument("-a", "--address", default="fqdn", help="Gets IP address from host name.", dest=ipfromhostname)
</code></pre>
<p>So for getting the value from <code>-a</code> you have to change</p>
<pre><code>remoteServer = sys.argv[1]
</code></pre>
<p>in</p>
<pre><code>remoteServer = args.ipfromhostname
</code></pre>
<p>where <code>ipfromhostname</code> is the <code>dest</code> value.</p>
<p>EDIT:</p>
<p>You have to do this operation for every <code>parser.add_argument</code></p>
</div>
<span class="comment-copy">ok cool thanks i will try that out. :-) i have been racking my brain trying to figure this one out.</span>
<span class="comment-copy">ok so the changes i made are as such</span>
<span class="comment-copy">ok so the changes i made are as such: i added the variable IPFromHostName = sys.argv[1]  so it takes input from the cli and assigns it to the var. i put dest = IPFromHostName  at the end of each add_argument statement. in each of the if statments i added remoteServer = args.IPFromHostName.  the error message has changed now to: TypeError: __init__() got an unexpected keyword argument 'dest'     i have tried to look up the dest keyword from <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a> but i am still working on trying to figure it out.</span>
<span class="comment-copy">Oh sorry! In python 2.7 this works</span>
<span class="comment-copy">In a script I've used: <code>import argparse parser = argparse.ArgumentParser() parser.add_argument('-v', action = 'store_false', dest = 'verbose', help = 'Enable verbose mode')</code>  And   <code>results = parser.parse_args() verbose = results.verbose</code></span>
