<div class="post-text" itemprop="text">
<p>New to unittest package. 
I'm trying to verify the DataFrame returned by a function through the following code. Even though I hardcoded the inputs of <code>assert_frame_equal</code> to be equal (<code>pd.DataFrame([0,0,0,0])</code>), the unittest still fails. Anyone would like to explain why it happens?</p>
<pre><code>import unittest
from pandas.util.testing import assert_frame_equal
class TestSplitWeight(unittest.TestCase):
    def test_allZero(self):
        #splitWeight(pd.DataFrame([0,0,0,0]),10)
        self.assert_frame_equal(pd.DataFrame([0,0,0,0]),pd.DataFrame([0,0,0,0]))

suite = unittest.TestLoader().loadTestsFromTestCase(TestSplitWeight)
unittest.TextTestRunner(verbosity=2).run(suite)
</code></pre>
<pre>Error: AttributeError: 'TestSplitWeight' object has no attribute 'assert_frame_equal'</pre>
</div>
<div class="post-text" itemprop="text">
<p><code>assert_frame_equal()</code> is coming from the <code>pandas.util.testing</code> package, not from the <code>unittest.TestCase</code> class. Replace:</p>
<pre><code>self.assert_frame_equal(pd.DataFrame([0,0,0,0]),pd.DataFrame([0,0,0,0]))
</code></pre>
<p>with:</p>
<pre><code>assert_frame_equal(pd.DataFrame([0,0,0,0]), pd.DataFrame([0,0,0,0]))
</code></pre>
<hr/>
<p>When you had <code>self.assert_frame_equal</code>, it tried to find <code>assert_frame_equal</code> attribute on the <code>unittest.TestCase</code> instance, and, since there is not <code>assert_frame_equal</code> attribute or method exposed on an <code>unittest.TestCase</code> class, it raised an <code>AttributeError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>alecxe answer is incomplete, you can indeed use pandas' <code>assert_frame_equal()</code> with <code>unittest.TestCase</code>, using <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.addTypeEqualityFunc" rel="nofollow noreferrer"><code>unittest.TestCase.addTypeEqualityFunc</code></a></p>
<pre class="lang-py prettyprint-override"><code>import unittest
import pandas as pd
import pandas.testing as pd_testing

class TestSplitWeight(unittest.TestCase):
    def assertDataframequal(self, a, b, msg):
        try:
            pd_testing.assert_frame_equal(a, b)
        except AssertionError as e:
            raise self.failureException(msg) from e

    def setUp(self):
        self.addTypeEqualityFunc(pd.DataFrame, self.assertDataframeEqual)

    def test_allZero(self):
        self.assertEqual(pd.DataFrame([0,0,0,0]), pd.DataFrame([0,0,0,0]))
</code></pre>
</div>
