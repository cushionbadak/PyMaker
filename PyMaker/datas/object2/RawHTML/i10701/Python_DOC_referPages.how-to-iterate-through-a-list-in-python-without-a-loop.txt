<div class="post-text" itemprop="text">
<p>Suppose I want to print all the elements between index 2 and 8 of the list, how do I implement this without using a for, or while loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's take this sample list:</p>
<pre><code>&gt;&gt;&gt; mylist
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
</code></pre>
<p>Now, let's print elements 2 through 8 without looping:</p>
<pre><code>&gt;&gt;&gt; ' '.join(mylist[2:9])
'two three four five six seven eight'
</code></pre>
<p>Here, <code>2:9</code> tells python to uses indices starting with <code>2</code> and continuing up to but <em>not</em> including <code>9</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>By slicing the list</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; print(l[1:8])
[2, 3, 4, 5, 6, 7, 8] # output in console
</code></pre>
<p>To get the summation of the values in <code>l[1:8]</code> use <code>sum</code></p>
<pre><code>&gt;&gt;&gt; sum(l[1:8])
35 # output
</code></pre>
<p>EDIT because of @pzp:</p>
<p>If you want to print all the elements between index 2 and index 8 both inclusive,just replace <code>print(l[1:8])</code> in the code above with <code>print(l[2:9])</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using recursion?</p>
<pre><code>def iterate(lst, start, end):
  if start &lt; 0 or end &gt;= len(lst) or start &gt; end:
    return
  print(lst[start])
  iterate(lst, start + 1, end)
</code></pre>
<p>Call it like this:</p>
<pre><code>iterate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 8)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simple solution using list comprehension </p>
<pre><code>list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
sum1 = sum([i for i in list1 if i &gt; 2 and i &lt; 9])
</code></pre>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> along with a <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">slice</a> of the list.</span>
<span class="comment-copy">Thanks! Suppose I have a list of 20 numbers, how do I get the sum of numbers between 2 and 9 without using a loop?</span>
<span class="comment-copy">@Falcon2908 , that's a completely different question. Please submit a new one.</span>
<span class="comment-copy"><code>x = range(20); sum(x[2:10])</code></span>
<span class="comment-copy">@Falcon2908 That's a separate question so you should either figure it out yourself (it's not too big of a logical jump from the code that John1024 gave you) or ask a new question.</span>
<span class="comment-copy">@Falcon2908 Please see my answer to find the sum.</span>
<span class="comment-copy">Looks like you have an off-by-one error in your slice indices.</span>
<span class="comment-copy">@pzp Nope, I did chose [1:8] on purpose because I want to list 2 to 8 in the list <code>l</code>. I know that in Python indexes start at 0.</span>
<span class="comment-copy">The OP asked for "the elements between index 2 and 8" (not value 2 and 8) and your answer gives the elements between index 1 and 8.</span>
<span class="comment-copy">@Ralf17, if you use sum() function, doesn't it behave as a for loop with complexity O (n) ?</span>
<span class="comment-copy">@Falcon2908: You can't  sum a list of <code>n</code> elements faster than going through each of the element.</span>
<span class="comment-copy">Very nice solution. Perhaps you should generalize your function for any start and end index.</span>
<span class="comment-copy">@pzp thanks! I updated my answer :)</span>
