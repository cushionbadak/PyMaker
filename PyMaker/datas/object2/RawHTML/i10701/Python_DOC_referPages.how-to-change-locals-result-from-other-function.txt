<div class="post-text" itemprop="text">
<p>I have some code like this:</p>
<pre><code>def f():
    i = 5
    g(locals())
    print 'in f:', i, j

def g(env):
    env['j'] = env['i'] + 1
    print 'in g:', env['i'], env['j']

f()
</code></pre>
<p>I get:</p>
<pre><code>in g: 5 6
in f: 5---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
NameError: global name 'j' is not defined
</code></pre>
<p>It seems that g cannot change the local variables got by locals() in f. Is there anyway to change the local variables in other function?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/2/library/functions.html#locals" rel="nofollow">docs</a> regarding <code>locals</code>:</p>
<blockquote>
<p>Note The contents of this dictionary should not be modified; changes
  may not affect the values of local and free variables used by the
  interpreter.</p>
</blockquote>
<p>An alternative solution is to just return <code>j</code>.</p>
<pre><code>def f():
    i = 5
    j = g(locals())
    print 'in f:', i, j

def g(env):
    j = env['i'] + 1
    print 'in g:', env['i'], j
    return j

f()
</code></pre>
</div>
<span class="comment-copy">The answer is to not use <code>locals()</code>. What are you actually trying to accomplish?</span>
<span class="comment-copy">No, the error points to the local variable <code>j</code> that is being accessed in the function <code>f()</code>.</span>
<span class="comment-copy">@TigerhawkT3 Do you mean that this is not a common requirement in python?</span>
<span class="comment-copy">As says in the <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">docs</a>: "The contents of this dictionary should not be modified."</span>
<span class="comment-copy">That's correct; this is not a common requirement. I've never seen or heard of anyone actually using <code>locals()</code> (or <code>globals()</code>) for an appropriate purpose. <code>exec()</code> (and <code>eval()</code>) are similarly more dangerous than they are practical.</span>
