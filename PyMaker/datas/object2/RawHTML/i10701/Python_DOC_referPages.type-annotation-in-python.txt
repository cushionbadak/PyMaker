<div class="post-text" itemprop="text">
<p>how to write the <strong>:type</strong> annotation in Python in case the argument can have different types?</p>
<pre><code>    """
    :type param_name: type1|type2
    """
</code></pre>
<p>or</p>
<pre><code>    """
    :type param_name: type1 / type2
    """
</code></pre>
<p>PyCharm accepts the 2nd variant</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using the <em>Sphinx project notation</em>, which incidentally was rejected for inclusion in the <a href="https://www.python.org/dev/peps/pep-0484/#other-backwards-compatible-conventions" rel="nofollow">PEP 484 -- <em>Type Hints</em> proposal</a>. </p>
<p><code>:type</code> is an <a href="http://www.sphinx-doc.org/en/stable/domains.html#info-field-lists" rel="nofollow">info field list</a>, and there isn't really all that much of a formal specification for these. The documentation example uses <code>or</code>:</p>
<pre><code>:type priority: integer or None
</code></pre>
<p>but note that <code>integer</code> isn't a formal type, nor is <code>None</code> (it is a singleton object).</p>
<p>These are <em>documentation</em> constructs, not type hints, really. That PyCharm supports these at all is nice, but these are not a Python standard.</p>
<p>I'd stick with proper type annotations instead. That means using a <a href="https://www.python.org/dev/peps/pep-0484/#union-types" rel="nofollow"><code>Union</code> type</a>:</p>
<pre><code>Union[type1, type2]
</code></pre>
<p>You can put these in a <code># type:</code> comment if you need to support Python 2.</p>
</div>
<span class="comment-copy">Is there a more general type that applies to both of them? Could you use one of the existing <a href="https://docs.python.org/3/library/collections.abc.html#module-collections.abc" rel="nofollow noreferrer">ABCs</a> to show the <i>interface</i> they must provide?</span>
<span class="comment-copy">@jonrsharpe let's assume the function can apply both the boolean and the user model instance &lt;User&gt; and depend on this parameter it can choose what to do. I'm just interesting to know how to write doc-strings in python correctly. Should it be a "|" or "/" or some other type divider in case the parameter can be different type</span>
