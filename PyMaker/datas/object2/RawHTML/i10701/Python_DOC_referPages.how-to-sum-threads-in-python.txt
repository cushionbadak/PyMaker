<div class="post-text" itemprop="text">
<p>I need help on how i can sum all the threads.to get sum of thread one to three all together..The parallel program should use all processors in host computer</p>
<pre><code>import threading
import time
from datetime import datetime

start_time = datetime.now()   
def sum_number():   

summ = 100
for num in range (1, 100):
  summ = summ + num
  num -= 1
 print ("SUM IS", summ)


def sum_number1():  

  summr = 200
  for num in range (101,200):
    summr = summr + num
    num -= 1
    print ("SUM IS", summr)



 def sum_number2():
  summy = 300
  for num in range (201, 300):
    summy = summy + num
    num -= 1
    print ("SUM IS", summy)


#take time t2
#end_time =datetime.now()
#print t2 -t1

#print('Time taken : {}'. format(end_time-start_time))
if __name__=="__main__":

  #sum_number()
  #sum_number1()
  #sum_number2()
  #sum_number3()

  t1=threading.Thread(target=sum_number)

  t1.start()
  time.sleep(5)

  t2=threading.Thread(target=sum_number1)

  t2.start()
  time.sleep(10)

  t3=threading.Thread(target=sum_number2)

  t3.start()
  time.sleep(15)



  #end_time =datetime.now()
</code></pre>
<p>I need help on how i can sum all the threads.to get sum of thread one to three all together..The parallel program should use all processors in host computer</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do</p>
<pre><code>import time
import multiprocessing.dummy as mp # uses threads instead of full processes

def sum_range(start_stop):
    start,stop=start_stop
    return sum(range(start,stop))

if __name__=="__main__":
    start_time=time.perf_counter()
    with mp.Pool() as p:
        my_sums=p.map(sum_range,[(1,101),(101,201),(201,301)]) # sums from 1 to 300 (including 300)
        full_sum=sum(my_sums) 
    end_time=time.perf_counter()
    print("The sum is", full_sum)
    print("Calculating it took",end_time-start_time, "seconds." ) 
</code></pre>
<p>for using processes instead of threads use <code>import multiprocessing as mp</code></p>
<p>In this case if you are after performance, doing the sum in a single thread/process is much faster because you are summing so few numbers. Creating Threads takes time and creating Processes takes much more time. (Normally using threads does not increase computational performance with the standard interpreter if you are not using special functions which release the "GIL")</p>
</div>
<span class="comment-copy">Please correct the code indentation in your question.</span>
<span class="comment-copy">i just did.corrected the indentation.Any help on how i can sum all threads?</span>
<span class="comment-copy">The general idea would be to have each thread return a result by writing to a <code>Queue</code>. The main thread would take items off the queue and calculate the final sum.</span>
<span class="comment-copy">can you show me in code.coment with a code.Iam new to python</span>
<span class="comment-copy">BTW, using threads is not going to use the available processors. You should use the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer"><code>multiprocessing</code></a> module.</span>
<span class="comment-copy">To produce the same result as the OP's code, <code>sum_range()</code> should <code>return sum(range(start,stop)) + stop</code>.</span>
<span class="comment-copy">@mhawke thanks, i fixed the bounds</span>
