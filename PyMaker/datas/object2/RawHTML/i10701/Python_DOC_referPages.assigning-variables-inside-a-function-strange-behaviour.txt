<div class="post-text" itemprop="text">
<p>I use Python rarely, so it's unclear to me why such behaviour is allowed:
There is no w object and hence it has no s attribute, then why f allows to make <code>w.s</code> assignment?</p>
<pre><code>&gt;&gt;&gt; def f():
    w.s="ads"  #allows, no exception
&gt;&gt;&gt; w.s="sds"  #outside function
Traceback (most recent call last):
  File "&lt;pyshell#74&gt;", line 1, in &lt;module&gt;
    w.s="sds"
NameError: name 'w' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Such behaviour is allowed because Python is a dynamic language. At compilation time, when the <code>f</code> function definition is executed (i.e., compiled to byte code), the interpreter knows that there in no local object in the function bound to the name <code>w</code>, so <code>w</code> must refer to a global object. Sure, there is <em>currently</em> no object in the global scope which is bound to that name, but that doesn't matter: Python assumes you know what you're doing, until proven otherwise :).</p>
<p>We can use the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow"><code>dis</code></a> module to disassemble the function's byte code. Here's a short demo.</p>
<pre><code>from dis import dis

def f():
    w.s = "ads"

dis(f)
print('- ' * 30)

class Test(object):
    pass

try:
    f()
except Exception as e:
    print(e)

w = Test()
f()
print(w.__dict__)
</code></pre>
<p><strong>output</strong></p>
<pre><code> 40           0 LOAD_CONST               1 ('ads')
              3 LOAD_GLOBAL              0 (w)
              6 STORE_ATTR               1 (s)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
name 'w' is not defined
{'s': 'ads'}
</code></pre>
<p>FWIW, in Python 2 the byte code for <code>f</code> is identical, but the <code>NameException</code> error message is<br/>
<code>global name 'w' is not defined</code>.</p>
<p>So if we try to call <code>f()</code> without a valid <code>w</code> in the global scope at the time of the call we will get an exception, but if there _is _ a valid <code>w</code> then everything's ok.</p>
<p>Note that <code>w</code> <em>must</em> be in the global scope, a local <code>w</code> inside another function will not work. Eg:</p>
<pre><code>def f():
    w.s = "ads"

class Test(object):
    pass

def g():
    w = Test()
    try:
        f()
    except Exception as e:
        print(e)
    print(w.__dict__)

g()
</code></pre>
<p><strong>output</strong></p>
<pre><code>name 'w' is not defined
{}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try running your function and see what happens. Python doesn't catch it as you write your code but as soon as you run the code it will error. </p>
<p>What you see is because python doesn't know that by the time your function runs there won't be an object <code>w</code> with an attribute <code>s</code>. However, when you do it outside the function call it checks that there is no <code>w</code> in the scope and thus errors.</p>
<p>Try this: </p>
<pre><code>def f():
    w.s = "one"
w.s  = "one" # called before there is such an object
f() # called before w exists, it will error out    

class SomeClass(object):
    def __init__(self):
        self.s = "two"

w = SomeClass()
f() # since w exists it will run
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A function is not yet being run because it hasn't been called yet, as opposed to the assignment of <code>w.s</code> to <code>"sds"</code> being done outside of the function.</p>
</div>
<span class="comment-copy">Once you call <code>f()</code> it will show the same error. Until or unless you have not called it, it will not show any error.</span>
<span class="comment-copy">Sorry I posted my answer in a hurry, realized it after clearing looking at it "NameError". Thank you</span>
