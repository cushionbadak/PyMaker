<div class="post-text" itemprop="text">
<p>I'm learning Python through <em>Automate the Boring Stuff</em> and I'm running into a something I don't quite understand.</p>
<p>I'm trying to create a simple for loop that prints the elements of a list in this format: <code>W, X, Y, and Z</code>.</p>
<p>My code looks like the following: </p>
<pre><code>spam = ['apples', 'bananas', 'tofu', 'cats']

def printSpam(item):
    for i in item:
        if i &lt; len(item)-1:
            print (','.join(str(item[i])))
        else:
            print ("and ".join(str(item[len(item)-1])))
    return

printSpam(spam)
</code></pre>
<p>I get this error in response: </p>
<pre><code>Traceback (most recent call last):
  File "CH4_ListFunction.py", line 11, in &lt;module&gt;
    printSpam(spam)
  File "CH4_ListFunction.py", line 5, in printSpam
    if i &lt; len(item)-1:
TypeError: '&lt;' not supported between instances of 'str' and 'int'
</code></pre>
<p>Any help is appreciated.  Thanks for helping a newbie.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ah, but <code>for i in array</code> iterates over each <em>element</em>, so <code>if i &lt; len(item)-1:</code> is comparing a <em>string</em> (the array element <code>item</code>) and an integer (<code>len(item)-1:</code>).</p>
<p>So, the problem is you misunderstood <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">how <code>for</code> works</a> in Python.</p>
<p>The quick fix?</p>
<p>You can replace your <code>for</code> with <code>for i in range(len(array))</code>, as <code>range</code> works like this:</p>
<pre><code>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Thus obtaining:</p>
<pre><code>spam = ['apples', 'bananas', 'tofu', 'cats']

def printSpam(item):
    for i in range(len(item)):
        if i &lt; len(item)-1:
            print (','.join(str(item[i])))
        else:
            print ("and ".join(str(item[len(item)-1])))
    return

printSpam(spam)
</code></pre>
<p>The output <em>probably</em> won't be what you expect, though, as <code>'c'.join(array)</code> uses 'c' as "glue" between the various elements of the array - and what is a string, if not an array of chars?</p>
<pre><code>&gt;&gt;&gt; ','.join("bananas")
'b,a,n,a,n,a,s'
</code></pre>
<p>Thus, the output will be:</p>
<pre><code>a,p,p,l,e,s
b,a,n,a,n,a,s
t,o,f,u
cand aand tand s
</code></pre>
<p>We can do better anyway.</p>
<p>Python supports so-called <a href="https://stackoverflow.com/questions/509211/explain-pythons-slice-notation">slice notation</a> and negative indexes (that start at the end of the array).</p>
<p>Since</p>
<pre><code>&gt;&gt;&gt; spam[0:-1]
['apples', 'bananas', 'tofu']
&gt;&gt;&gt; spam[-1]
'cats'
</code></pre>
<p>We have that </p>
<pre><code>&gt;&gt;&gt; ", ".join(spam[0:-1])
'apples, bananas, tofu'
</code></pre>
<p>And</p>
<pre><code>&gt;&gt;&gt; ", ".join(spam[0:-1]) + " and " + spam[-1]
'apples, bananas, tofu and cats'
</code></pre>
<p>Therefore, you can write your function as simply</p>
<pre><code>def printSpam(item):
    print ", ".join(item[0:-1]) + " and " + item[-1]
</code></pre>
<p>That's it.
It works.</p>
<p>P.S.: One las thing about Python and array notation:</p>
<pre><code>&gt;&gt;&gt; "Python"[::-1]
'nohtyP'
</code></pre>
</div>
<span class="comment-copy">You are misunderstanding how <code>for ... in ...</code> works. <code>i</code> is already the string from the list, <i>not</i> the index, thus <code>&lt;</code> is comparing strings and integers, and <code>item[i]</code> does not make sense, either. Also, you are trying to <code>join</code> a single item!</span>
<span class="comment-copy">You're basically doing <code>"s" &lt; 4</code>. This makes no sense.</span>
<span class="comment-copy">In this case <code>i</code> is a string.  You are trying to compare a string to the length of a list.</span>
<span class="comment-copy">Instead of looping, you can use list slices like <code>item[0:-1]</code> to get all but the last item, and <code>item[-1]</code> to get the last item. Join the first set with <code>,</code>, and then connect that with <code>and</code> to the last.</span>
<span class="comment-copy">@Barmar: argh, you beat me to it while I was answering :)</span>
<span class="comment-copy">This was literally the most informative explanation on <code>for</code> notation in Python that I've read yet and I'm slightly embarrassed that I forgot the <code>range()</code> function in my code; CodeAcademy at least taught me that.  I going to go back and try with a different code practice and see if I can make something different this time.  Thanks for your response!</span>
