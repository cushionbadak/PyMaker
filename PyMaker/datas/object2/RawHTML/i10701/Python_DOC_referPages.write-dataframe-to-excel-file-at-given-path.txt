<div class="post-text" itemprop="text">
<pre><code>I have a dataframe 
df = pd.DataFrame({'Data': [10, 20, 30, 20, 15, 30, 45]})

This is working :
writer = pd.ExcelWriter('pandas_simple.xlsx', engine='xlsxwriter')
df.to_excel(writer, sheet_name='Sheet1')
writer.save()

but when I try 
out_path = "C:\Users\Bala\output\temp-excel.xlsx"
writer = pd.ExcelWriter(out_path , engine='xlsxwriter')
df.to_excel(writer, sheet_name='Sheet1')
writer.save()
</code></pre>
<p>I'm getting error : IOError: [Errno 22] invalid mode ('wb') or filename: 'C:\Users\Bala Nadella\output\temp-excel.xlsx'. </p>
<p>How to create file in given path. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="noreferrer">String literals</a></p>
<p>Study the table in that link. You need to escape your '\' with '\\'. Partly, DOS is responsible for this mess in the world.</p>
<pre><code>out_path = "C:\\Users\\Bala\\output\\temp-excel.xlsx"
</code></pre>
<p>Or</p>
<pre><code>out_path = r"C:\Users\Bala\output\temp-excel.xlsx" # the `r` prefix means raw string
</code></pre>
<p>But best alternative is this:</p>
<pre><code>out_path = "C:/Users/Bala/output/temp-excel.xlsx"
</code></pre>
<p>It will work on any platform.</p>
<hr/>
<p>Edited to remove the solution with <code>os.path.abspath</code>. After the comment below this answer, I read the documentation myself and realized that it has a different purpose. Although I have used it in the past to make my code dual OS friendly, because it neatly appends CWD to the path, and changes <code>/</code> to <code>\\</code> when moving from Debian to Windows and vice versa. </p>
</div>
<div class="post-text" itemprop="text">
<p>In a string the backslash is an escape character. It means that you're giving a special command, not a regular character. Eg. <code>"Hello\nWorld"</code> means, put a newline between <code>"Hello"</code> and <code>"World"</code>.</p>
<p>If you actually want to use a backslash as a character, type it as <code>"\\"</code>.</p>
<p>Or better yet, just use forward slashes!</p>
</div>
<span class="comment-copy">You should add the error you're getting. Does the directory C:\Users\Bala\output\ exist?</span>
<span class="comment-copy">Yes. That is local directory of my box and it works for to_csv.</span>
<span class="comment-copy"><code>os.path.abspath</code> is a nice function, but you have completely misrepresented what it does. It can't magically interpret literal backslashes in strings, and it is not at all what is needed here. Honestly, the <b>best</b> solution <b>is</b> to use forward slashes instead of backslashes (even in Windows). If you insist on using backslashes, you should be using <i>raw strings</i>.</span>
<span class="comment-copy">You are right. Answer edited. I used to use it for situations, when I had both Windows and Ubuntu on my machine, and required the same code to run on files in my CWD. I found it quite handy, but it is not the solution to this question.</span>
<span class="comment-copy">Good edit, now I feel comfortable upvoting this answer.</span>
<span class="comment-copy">Still doesn't work for me somehow. I tried to wrap the entire thing in a function: <code>def excel_to_path(frame, path):     writer = pd.ExcelWriter(path , engine='xlsxwriter')     frame.to_excel(writer, sheet_name='Sheet1')     writer.save()</code> and to pass <code>df</code>and <code>"../foo/bar/myfile.xlsx"</code> any ideas?</span>
<span class="comment-copy">@Rachel try replacing the relative path with absolute path. Also please use <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">context manager</a>. The doc shows <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#io-excel-writer" rel="nofollow noreferrer">pandas implementation</a>. It'll save your butt when something goes wrong.</span>
