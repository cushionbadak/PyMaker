<div class="post-text" itemprop="text">
<p>I want the first 9 digits and last 9 digits of a fibonocci series for an infinite loop. Running the tests individually, I get better result for the last 9 digits using modulo operator no where comparable to the first 9 digits. I ran different tests like <code>int(str(b)[::-1])%10**9, b/(10**(len(str(b))-9))</code> but still the same result. I think this happens because of number to string conversion of higher digits. Is there any other way of printing the first 9 digits without converting into a string or an efficient way with/without strings?</p>
<pre><code>def fibby():
    a,b = 1,1
    yield [a,a]
    yield [b,b]
    while True:
        a,b = b,a+b
        yield [str(b)[:9], b%10**9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are a few versions and timings for getting the first 30000 prefixes. I left out the first two yields and the last digits for simplicity.</p>
<ul>
<li><code>fibby1</code> is the original way just using <code>str(b)[:9]</code>.</li>
<li><code>fibby2</code> keeps track of the appropriate power of 10 to divide by.</li>
<li><code>fibby3</code> keeps the first 9 digits in <code>a</code> and <code>b</code> and the remaining digits in <code>A</code> and <code>B</code>. Compared to <code>fibby2</code>, this avoids dividing a large <code>b</code> by a large power of 10. Large numbers are only added/subtracted/compared, or multiplied with a tiny number.</li>
<li><code>fibby4</code> uses <code>math.log10</code> suggested by @therefromhere.</li>
<li><code>fibby5</code> uses the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow"><code>decimal</code></a> module.</li>
</ul>
<p>The output:</p>
<pre><code>All agree? True
fibby1: 24.835 seconds
fibby2:  0.289 seconds
fibby3:  0.201 seconds
fibby4:  2.802 seconds
fibby5:  0.216 seconds
</code></pre>
<p>Just for comparison I also tried <code>str(b % 10**9)</code>, i.e., the last nine digits, and that took 0.506 seconds. Which is <strong>slower</strong> than my fast solutions for the first nine digits.</p>
<p>The code:</p>
<pre><code>def fibby1():
    a, b = 1, 1
    while True:
        yield str(b)[:9]
        a, b = b, a+b

def fibby2():
    a, b = 1, 1
    div = 1
    while True:
        while True:
            front = b // div
            if front &lt; 10**9:
                break
            div *= 10
        yield str(front)
        a, b = b, a+b

def fibby3():
    a,b = 1,1
    A,B,C = 0,0,1
    while True:
        yield str(b)
        a, b = b, a+b
        A, B = B, A+B
        if B &gt;= C:
            B -= C
            b += 1
        if b &gt;= 10**9:
            A += a%10 * C
            B += b%10 * C
            a //= 10
            b //= 10
            C *= 10

def fibby4():
    from math import log10
    a, b = 1, 1
    while True:
        yield str(b // 10**max(0, int(log10(b) - 8)))
        a, b = b, a+b

def fibby5():
    from decimal import Decimal, getcontext
    getcontext().prec = 7000 # enough for n = 30000
    a, b = Decimal(1), Decimal(1)
    while True:
        yield str(b)[:9]
        a, b = b, a+b

from timeit import timeit
from itertools import islice
from time import time

n = 30000
t0 = time()
list1 = list(islice(fibby1(), n))
t1 = time()
list2 = list(islice(fibby2(), n))
t2 = time()
list3 = list(islice(fibby3(), n))
t3 = time()
list4 = list(islice(fibby4(), n))
t4 = time()
list5 = list(islice(fibby5(), n))
t5 = time()
print('All agree?', list1 == list2 == list3 == list4 == list5)
print('fibby1: %6.3f seconds' % (t1 - t0))
print('fibby2: %6.3f seconds' % (t2 - t1))
print('fibby3: %6.3f seconds' % (t3 - t2))
print('fibby4: %6.3f seconds' % (t4 - t3))
print('fibby5: %6.3f seconds' % (t5 - t4))
</code></pre>
</div>
<span class="comment-copy">What do you mean by "better results"? Which results do you obtain and what is wrong about them?</span>
<span class="comment-copy">I'm not sure it'll be any more efficient than converting the whole number to a string, but you can use <code>math.log10()</code> to count the digits, and <code>//</code> to do an integer divide to fetch the most significant figures.</span>
<span class="comment-copy">I mean in terms of time performance. Say, the least significant digits pop up to 10**8 in 6 seconds while the MSB takes more than 2 minutes(testing them individually). Can the MSB be a timematch for the LSB?</span>
<span class="comment-copy">@DeepakKota What does "pop up to 10**8 in 6 seconds" mean?</span>
<span class="comment-copy">I am solving a problem in project Euler 104. There is a better algorithm, but when I was trying to do brute force I was wondering if there can be a time match for the first digits and last digits.</span>
