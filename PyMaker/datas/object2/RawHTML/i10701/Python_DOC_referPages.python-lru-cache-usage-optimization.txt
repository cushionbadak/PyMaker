<div class="post-text" itemprop="text">
<p>Say I have this method that I cache using <a href="https://docs.python.org/3/library/functools.html" rel="nofollow"><code>lru_cache</code></a>:</p>
<pre><code>@lru_cache(maxsize=8)
def very_expensive_call(number):
    # do something that's very expensive
    return number
</code></pre>
<p>I am calling this method like this:</p>
<pre><code>print([very_expensive_call(i) for i in range(10)]) # call_1
</code></pre>
<p>Because the maxsize of the cache is 8, only numbers 2-9 are cached at this point. </p>
<p>After call_1, I am doing call_2:</p>
<pre><code>print([very_expensive_call(i) for i in range(10)]) # call_2
</code></pre>
<p>During call_2, again first number <code>0</code> is called (not in cache!), and after that numbers 0 and 3-9 are cached.
Then number <code>1</code> is called (not in cache!) and after that numbers 0-1 and 4-9 are cached.
Well, you see where this is going: the cache is never used...</p>
<p>I understand that for this specific example I could alternate between <code>range(...</code> and <code>reverse(range(...</code> but in a more complicated scenario that's probably not possible.</p>
<p><strong>Question</strong>: Is it possible to inspect which numbers are cached and to order the calls based on that? What would be the overhead for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, no, the <code>cache</code> used in <code>lru</code> is specifically designed to not be public-facing. All its internals <a href="https://hg.python.org/cpython/file/3.5/Lib/functools.py#l411" rel="nofollow"><em>are encapsulated</em></a> for thread safety and in order to not break code if the implementation changes.</p>
<p>Apart from that, I don't think it is a good idea to base your input based on caching, you should cache based on your input. If your callable is not periodically called with the same arguments, maybe a cache is not the best option. </p>
</div>
<span class="comment-copy">Thanks for answering. I get that it is against lru_cache philosophy. I think it's more of an optimization issue in my case: came across this issue when I discovered that I was calling a method repeatedly with just a little more different arguments then my maxsize and suddenly cache wasn't used at all anymore. Will probably fall back on increasing maxsize.</span>
