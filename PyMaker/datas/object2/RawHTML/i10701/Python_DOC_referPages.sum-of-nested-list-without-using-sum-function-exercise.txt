<div class="post-text" itemprop="text">
<p>Trying to write a function that take the sum of each list and return individual values in a new single list. 
E.g  </p>
<pre><code>[[2, 7, 6], [9, 5, 1], [4, 3, 8]] 
</code></pre>
<p>becomes </p>
<pre><code>[15, 15, 15]
</code></pre>
<p>What I have so far:<br/></p>
<pre><code>def row_sums(square):
    total_list = []
    total = 0
    for i in square:
        for j in i: 
            total += j
        total_list.append(total)
    return total_list    
</code></pre>
<p>But this just accumulates each list onto each other resulting in:</p>
<pre><code>[15, 30, 45] 
</code></pre>
<p>I'm not sure how to keep the sums for each list separate here. The SUM function is not allowed here as it's an exercise on nested loops.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to reset your <code>total</code> counter before starting each inside for.
Also, you don't need to declare it outside, because you will use it only inside.</p>
<pre><code>def row_sums(square):
    total_list = []
    for i in square:
        total = 0
        for j in i: 
            total += j
        total_list.append(total)
    return total_list 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error is you do not re-initialize the <code>total</code> variable after each loop. Instead, initialize <code>sum = 0</code> inside he first for-loop like so:</p>
<pre><code>def row_sums(square):
    total_list = []
    for i in square:
        total = 0
        for j in i: 
            total += j
        total_list.append(total)
    return total_list  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun:</p>
<pre><code>&gt;&gt;&gt; list = [[2, 7, 6], [9, 5, 1], [4, 3, 8]] 
&gt;&gt;&gt; import functools
&gt;&gt;&gt; [functools.reduce(lambda x, y: x + y, sublist, 0) for sublist in list]
[15, 15, 15]
</code></pre>
<p>I did't use <code>sum</code> :)</p>
<p>You can read more about <code>functools.reduce</code> <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow">here</a>.</p>
<p>Edit: As Sevanteri pointed out in the comment, you can also use <code>[functools.reduce(int.__add__, sublist, 0) for sublist in list]
</code>(if you really want to drive your teacher mad!)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to zero your total for each list.</p>
<pre><code>def row_sums(square):
    total_list = []
    total = 0
    for i in square:
       for j in i: 
          total += j
       total_list.append(total)
       total = 0
    return total_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To be different, flatten the lists and using a generator (assumes sublists are the same length):</p>
<pre><code>def _notsum2(lists):
    per_yield = len(lists)
    total = 0
    for ind, next in enumerate(val for sublist in lists for val in sublist):
        if ind % per_yield == 0 and ind:
            yield total
            total = 0
        total += next
    yield total


if __name__ == '__main__':
    li = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]
    print [g for g in _notsum2(li)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do it using <code>map</code> and list comprehension as:</p>
<pre><code>l=[[2, 7, 6], [9, 5, 1], [4, 3, 8]] 
a,b,c=[x for x in l]
map(lambda x,y,z:x+y+z, a,b,c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>[sum(i) for i in zip(*[[2, 7, 6], [9, 5, 1], [4, 3, 8]])]</code></p>
<p>bultin zip func is what you exactly needed</p>
</div>
<span class="comment-copy">set <code>total=0</code> inside the first <code>for</code> loop. Also make sure you post correctly indented code.</span>
<span class="comment-copy">why down votes?</span>
<span class="comment-copy">Makes sense. At least it was something very simple. Thanks a bunch.</span>
<span class="comment-copy">@RobertHemingway You are very welcome. If you liked my answer, please upvote it.</span>
<span class="comment-copy">Why am I downvoted?</span>
<span class="comment-copy">And since there is already a binary sum function for integers, you can just replace that lambda with <code>int.__add__</code>. :)</span>
<span class="comment-copy">@Sevanteri Hahaha I like this idea!</span>
<span class="comment-copy">using <code>int.__add__</code> looks a little ugly, I rather use <code>operator.add</code> :)</span>
<span class="comment-copy">@Copperfield Black magic!!! :)</span>
<span class="comment-copy">the OP want to do it without <code>sum</code>, also want the sum of the elements in each sublist not a the combination with all sublist</span>
