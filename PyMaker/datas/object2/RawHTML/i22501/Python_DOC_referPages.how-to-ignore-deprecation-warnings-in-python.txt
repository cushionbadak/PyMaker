<div class="post-text" itemprop="text">
<p>I keep getting this :</p>
<pre><code>DeprecationWarning: integer argument expected, got float
</code></pre>
<p>How do I make this message go away? Is there a way to avoid warnings in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>From documentation of the <a href="https://docs.python.org/3/library/warnings.html" rel="noreferrer"><code>warnings</code> module</a>:</p>
<pre><code> #!/usr/bin/env python -W ignore::DeprecationWarning
</code></pre>
<p>If you're on Windows: pass <code>-W ignore::DeprecationWarning</code> as an argument to Python. Better though to resolve the issue, by casting to <a href="http://docs.python.org/3.0/library/functions.html#int" rel="noreferrer">int</a>.</p>
<p>(Note that in Python 3.2, deprecation warnings are ignored by default.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I had these:</p>
<pre><code>/home/eddyp/virtualenv/lib/python2.6/site-packages/Twisted-8.2.0-py2.6-linux-x86_64.egg/twisted/persisted/sob.py:12:
DeprecationWarning: the md5 module is deprecated; use hashlib instead import os, md5, sys

/home/eddyp/virtualenv/lib/python2.6/site-packages/Twisted-8.2.0-py2.6-linux-x86_64.egg/twisted/python/filepath.py:12:
DeprecationWarning: the sha module is deprecated; use the hashlib module instead import sha
</code></pre>
<p>Fixed it with:</p>
<pre><code>import warnings

with warnings.catch_warnings():
    warnings.filterwarnings("ignore",category=DeprecationWarning)
    import md5, sha

yourcode()
</code></pre>
<p>Now you still get all the other <code>DeprecationWarning</code>s, but not the ones caused by:</p>
<pre><code>import md5, sha
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should just fix your code but just in case,</p>
<pre><code>import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found the cleanest way to do this (especially on windows) is by adding the following to C:\Python26\Lib\site-packages\sitecustomize.py:</p>
<pre><code>import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
</code></pre>
<p>Note that I had to create this file.  Of course, change the path to python if yours is different.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>None of these answers worked for me so I will post my way to solve this. I use the following <code>at the beginning of my main.py</code> script and it works fine.</strong></p>
<hr/>
<p>Use the following as it is (copy-paste it):</p>
<pre><code>import ....
import ....

def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

# more code here...
# more code here...
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>Pass the correct arguments? :P</p>
<p>On the more serious note, you can pass the argument -Wi::DeprecationWarning on the command line to the interpreter to ignore the deprecation warnings.</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert the argument to int. It's as simple as</p>
<pre><code>int(argument)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you want to ignore warnings only in functions you can do the following.</p>
<pre><code>import warnings
from functools import wraps


def ignore_warnings(f):
    @wraps(f)
    def inner(*args, **kwargs):
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter("ignore")
            response = f(*args, **kwargs)
        return response
    return inner

@ignore_warnings
def foo(arg1, arg2):
    ...
    write your code here without warnings
    ...

@ignore_warnings
def foo2(arg1, arg2, arg3):
    ...
    write your code here without warnings
    ...
</code></pre>
<p>Just add the @ignore_warnings decorator on the function you want to ignore all warnings</p>
</div>
<div class="post-text" itemprop="text">
<p>Not to beat you up about it but you are being warned that what you are doing will likely stop working when you next upgrade python. Convert to int and be done with it.</p>
<p>BTW. You can also write your own warnings handler. Just assign a function that does nothing.
<a href="https://stackoverflow.com/questions/858916/how-to-redirect-python-warnings-to-a-custom-stream">How to redirect python warnings to a custom stream?</a></p>
</div>
<span class="comment-copy">casting works too .. but the flag was helpful !</span>
<span class="comment-copy">I wish I could make this work...  I get a <code>/usr/bin/env: python -W ignore::DeprecationWarning: No such file or directory</code> error.  It works if I run python with the <code>-W ignore::DeprecationWarning</code> option on the command-line, but /usr/bin/env doesn't deal with it.</span>
<span class="comment-copy">Seems to be a windows-only solution.</span>
<span class="comment-copy">You can set the env variable PYTHONWARNINGS this worked for me <code>export PYTHONWARNINGS="ignore::DeprecationWarning:simplejson"</code> to disable django json deprication warnings from sorl</span>
<span class="comment-copy">@yvess, if this were an answer, I'd have voted for it.  Seems a clean way to ignore specific warnings systemwide.  I put it in my ~/.profile. Works great.</span>
<span class="comment-copy">Awesome, thank you so much!!  (Took me a moment to realize I could also wrap non-import bits of code in this, since some packages were also generating DeprecationWarnings when used after import.)  Very nice way to only silence specific DeprecationWarnings that I've already looked at and decided I want to ignore.</span>
<span class="comment-copy">Worked for me using iPython</span>
<span class="comment-copy">This doesn't work for me at all, still seeing deprecationwarnings.</span>
<span class="comment-copy">@user1244215 I could be wrong but I think it matters where in your code you run <code>warnings.filterwarnings("ignore", category=DeprecationWarning)</code>.  I think you have to run this after you import the library that's spitting out the warnings, although I could be mistaken.</span>
<span class="comment-copy">import warnings warnings.filterwarnings("ignore", category=RuntimeWarning)</span>
<span class="comment-copy">In my case, the code that was causing the warning was <code>from xgboost import XGBClassifier</code>. I had to put <code>warnings.filterwarnings("ignore", category=DeprecationWarning)</code> immediately before that import for it to work.</span>
<span class="comment-copy">That worked when all other solutions didn't. Thanks!</span>
<span class="comment-copy">This saved me too. Glad that I could help.</span>
<span class="comment-copy">That advice only works if it is indeed his own code and not from some 3rd party package.</span>
