<div class="post-text" itemprop="text">
<p>I'm building a simple helper script for work that will copy a couple of template files in our code base to the current directory. I don't, however, have the absolute path to the directory where the templates are stored. I do have a relative path from the script but when I call the script it treats that as a path relative to the current working directory. Is there a way to specify that this relative url is from the location of the script instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the file that has the script, you want to do something like this:</p>
<pre><code>import os
dirname = os.path.dirname(__file__)
filename = os.path.join(dirname, 'relative/path/to/file/you/want')
</code></pre>
<p>This will give you the absolute path to the file you're looking for.  Note that if you're using setuptools, you should probably use its <a href="http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources" rel="noreferrer">package resources API</a> instead.</p>
<p><strong>UPDATE</strong>:  I'm responding to a comment here so I can paste a code sample.  :-)</p>
<blockquote>
<p>Am I correct in thinking that <code>__file__</code> is not always available (e.g. when you run the file directly rather than importing it)?</p>
</blockquote>
<p>I'm assuming you mean the <code>__main__</code> script when you mention running the file directly.  If so, that doesn't appear to be the case on my system (python 2.5.1 on OS X 10.5.7):</p>
<pre><code>#foo.py
import os
print os.getcwd()
print __file__

#in the interactive interpreter
&gt;&gt;&gt; import foo
/Users/jason
foo.py

#and finally, at the shell:
~ % python foo.py
/Users/jason
foo.py
</code></pre>
<p>However, I do know that there are some quirks with <code>__file__</code> on C extensions.  For example, I can do this on my Mac:</p>
<pre><code>&gt;&gt;&gt; import collections #note that collections is a C extension in Python 2.5
&gt;&gt;&gt; collections.__file__
'/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-
dynload/collections.so'
</code></pre>
<p>However, this raises an exception on my Windows machine.</p>
</div>
<div class="post-text" itemprop="text">
<p>you need <code>os.path.realpath</code> (sample below adds the parent directory to your path)</p>
<pre><code>import sys,os
sys.path.append(os.path.realpath('..'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the accepted answer <br/></p>
<pre><code>import os
dir = os.path.dirname(__file__)
filename = os.path.join(dir, '/relative/path/to/file/you/want')
</code></pre>
<p>I just want to add that</p>
<blockquote>
<p>the latter string can't begin with the backslash , infact no string
  should include a backslash</p>
</blockquote>
<p>It should be something like</p>
<pre><code>import os
dir = os.path.dirname(__file__)
filename = os.path.join(dir, 'relative','path','to','file','you','want')
</code></pre>
<p>The accepted answer can be misleading in some cases , please refer to <a href="https://stackoverflow.com/questions/1945920/why-doesnt-os-path-join-work-in-this-case">this</a> link for details</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider my code:</p>
<pre><code>import os


def readFile(filename):
    filehandle = open(filename)
    print filehandle.read()
    filehandle.close()



fileDir = os.path.dirname(os.path.realpath('__file__'))
print fileDir

#For accessing the file in the same folder
filename = "same.txt"
readFile(filename)

#For accessing the file in a folder contained in the current folder
filename = os.path.join(fileDir, 'Folder1.1/same.txt')
readFile(filename)

#For accessing the file in the parent folder of the current folder
filename = os.path.join(fileDir, '../same.txt')
readFile(filename)

#For accessing the file inside a sibling folder.
filename = os.path.join(fileDir, '../Folder2/same.txt')
filename = os.path.abspath(os.path.realpath(filename))
print filename
readFile(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="http://docs.python.org/library/sys.html#sys.path" rel="noreferrer">sys.path</a>
As initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter. </p>
<p>Use this path as the root folder from which you <a href="http://docs.python.org/library/os.path.html#os.path.join" rel="noreferrer">apply your relative path</a></p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os.path
&gt;&gt;&gt; sys.path[0]
'C:\\Python25\\Lib\\idlelib'
&gt;&gt;&gt; os.path.relpath(sys.path[0], "path_to_libs") # if you have python 2.6
&gt;&gt;&gt; os.path.join(sys.path[0], "path_to_libs")
'C:\\Python25\\Lib\\idlelib\\path_to_libs'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's 2018 now, and Python have already evolve to the <code>__future__</code> long time ago. So how about using the amazing <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> coming with Python 3.4 to accomplish the task instead of struggling with <code>os</code>, <code>os.path</code>, <code>glob</code>, <code>shutil</code>, etc.</p>
<p>So we have 3 paths here (possibly duplicated):</p>
<ul>
<li><code>mod_path</code>: which is the path of the <em>simple helper script</em></li>
<li><code>src_path</code>: which contains <em>a couple of template files</em> waiting to be copied.</li>
<li><code>cwd</code>: <em>current directory</em>, the destination of those template files.</li>
</ul>
<p>and the problem is: <strong>we don't have</strong> the full path of <code>src_path</code>, only know <strong>it's relative path</strong> to the <code>mod_path</code>.</p>
<p>Now let's solve this with the the amazing <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a>:</p>
<pre><code># Hope you don't be imprisoned by legacy Python code :)
from pathlib import Path

# `cwd`: current directory is straightforward
cwd = Path.cwd()

# `mod_path`: According to the accepted answer and combine with future power
# if we are in the `helper_script.py`
mod_path = Path(__file__).parent
# OR if we are `import helper_script`
mod_path = Path(helper_script.__file__).parent

# `src_path`: with the future power, it's just so straightforward
relative_path_1 = 'same/parent/with/helper/script/'
relative_path_2 = '../../or/any/level/up/'
src_path_1 = (mod_path / relative_path_1).resolve()
src_path_2 = (mod_path / relative_path_2).resolve()
</code></pre>
<p>In the future, it just that simple. :D </p>
<hr/>
<p>Moreover, we can select and check and copy/move those template files with <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a>:</p>
<pre><code>if src_path != cwd:
    # When we have different types of files in the `src_path`
    for template_path in src_path.glob('*.ini'):
        fname = template_path.name
        target = cwd / fname
        if not target.exists():
            # This is the COPY action
            with target.open(mode='wb') as fd:
                fd.write(template_path.read_bytes())
            # If we want MOVE action, we could use:
            # template_path.replace(target)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using </p>
<pre><code>import os
dirname = os.path.dirname(__file__)
filename = os.path.join(dirname, 'relative/path/to/file/you/want')
</code></pre>
<p>as in the accepted answer, it would be more robust to use:</p>
<pre><code>import inspect
import os
dirname = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))
filename = os.path.join(dirname, 'relative/path/to/file/you/want')
</code></pre>
<p>because using __file__ will return the file from which the module was loaded, if it was loaded from a file, so if the file with the script is called from elsewhere, the directory returned will not be correct. </p>
<p>These answers give more detail: <a href="https://stackoverflow.com/a/31867043/5542253">https://stackoverflow.com/a/31867043/5542253</a> and <a href="https://stackoverflow.com/a/50502/5542253">https://stackoverflow.com/a/50502/5542253</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This code will return the absolute path to the main script.</p>
<pre><code>import os
def whereAmI():
    return os.path.dirname(os.path.realpath(__import__("__main__").__file__))
</code></pre>
<p>This will work even in a module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hi first of all you should understand functions <strong>os.path.abspath(path)</strong> and <strong>os.path.relpath(path)</strong> </p>
<p>In short <strong>os.path.abspath(path)</strong> makes a <strong>relative path</strong> to <strong>absolute path</strong>. And if the path provided is itself a absolute path then the function returns the same path.</p>
<p>similarly <strong>os.path.relpath(path)</strong> makes a <strong>absolute path</strong> to <strong>relative path</strong>. And if the path provided is itself a relative path then the function returns the same path.</p>
<p><em><strong>Below example can let you understand the above concept properly</strong></em></p></div>
<div class="post-text" itemprop="text">
<p>An alternative which works for me: </p>
<pre><code>this_dir = os.path.dirname(__file__) 
filename = os.path.realpath("{0}/relative/file.path".format(this_dir))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What worked for me is using <code>sys.path.insert</code>. Then I specified the  directory I needed to go. For example I just needed to go up one directory.</p>
<pre><code>import sys
sys.path.insert(0, '../')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if this applies to some of the older versions, but I believe Python 3.3 has native relative path support.</p>
<p>For example the following code should create a text file in the same folder as the python script:</p>
<pre><code>open("text_file_name.txt", "w+t")
</code></pre>
<p>(note that there shouldn't be a forward or backslash at the beginning if it's a relative path)</p>
</div>
<span class="comment-copy">Similar questions: <a href="https://stackoverflow.com/questions/51520/how-to-get-an-absolute-file-path-in-python" title="how to get an absolute file path in python">stackoverflow.com/questions/51520/…</a> <a href="https://stackoverflow.com/questions/7165749/open-file-in-a-relative-location-in-python" title="open file in a relative location in python">stackoverflow.com/questions/7165749/…</a> <a href="https://stackoverflow.com/questions/3561691/python-syntaxerror-eol-while-scanning-string-literal" title="python syntaxerror eol while scanning string literal">stackoverflow.com/questions/3561691/…</a></span>
<span class="comment-copy">Am I correct in thinking that <b>file</b> is not always available (e.g. when you run the file directly rather than importing it)?</span>
<span class="comment-copy">@Stephen Edmonds I'm using it a file that I run, rather than import, and it works great.</span>
<span class="comment-copy">Note you should use os.path.join everywhere for portability: <code>filename = os.path.join(dir, 'relative', 'path', 'to', 'file', 'you' , 'want')</code></span>
<span class="comment-copy"><code>os.path.dirname(__file__)</code> can give an empty string, use <code>os.path.dirname(os.path.abspath(__file__))</code> instead</span>
<span class="comment-copy">It's a minor thing, but PLEASE don't use dir as a variable name since it is a builtin.</span>
<span class="comment-copy"><code>os.path.dirname(__file__)</code> gave me an empty string. This worked perfectly.</span>
<span class="comment-copy">This seems to give the parent of the directory the script is run from, not of the script's location.</span>
<span class="comment-copy"><code>os.path.realpath('..')</code> gives you the parent directory of the <b>current working dir</b>. That's usually <b>not</b> what you want.</span>
<span class="comment-copy">@DarraghEnright: That only happens in a Python-script-to-exe packaging environment. That's one of the rare exceptions where relying on the current working dir would be the alternative.</span>
<span class="comment-copy">Yes using <code>os.path.join</code> is better because it joins them with the OS-specific separator.</span>
<span class="comment-copy"><code>'/relative/path...'</code> is not a relative path. Is that intentional?</span>
<span class="comment-copy">Yes, that's part of what I was pointing out.</span>
<span class="comment-copy">This answer is now outdated, as the top answer has been edited to use a proper relative path in <code>os.path.join()</code>. What is left is the preference to use separate strings for each path element over hardcoding the path separator.</span>
<span class="comment-copy">That's not necessarily true.  Usually sys.path[0] is an empty string or a dot, which is a relative path to the current directory.  If you want the current directory, use os.getcwd.</span>
<span class="comment-copy">The original poster commented that the current working directory is the wrong place to base the relative path from. You are correct in saying that sys.path[0] is not always valid.</span>
<span class="comment-copy">No, <code>sys.path[0]</code> is not always set to the parent directory. Python code can be invoked with <code>-c</code> or <code>-m</code> or via an embedded interpreter, at which point <code>sys.path[0]</code> is set to something different altogether.</span>
<span class="comment-copy"><code>inspect.stack()</code> is an <i>expensive</i> function to call. It retrieves info for all stack frames, which you then discard and only get the top one for. It basically calls <code>inspect.getfile()</code> on the module object, which just returns <code>module.__file__</code>. You are far better of just using <code>__file__</code>.</span>
<span class="comment-copy">Instead of re-importing, you'd use <code>sys.modules['__main__'].__file__</code>.</span>
<span class="comment-copy">This relies on the current working directory, which could be radically different from what you actually want.</span>
<span class="comment-copy">right, so this will work from the CWD which is not what the OP asks for. The want to work from the scripts location.</span>
