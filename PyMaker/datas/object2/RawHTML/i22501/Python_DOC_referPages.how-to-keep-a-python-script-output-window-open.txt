<div class="post-text" itemprop="text">
<p>I have just started with Python. When I execute a python script file on Windows, the output window appears but instantaneously goes away. I need it to stay there so I can analyze my output. How can I keep it open?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a few options:</p>
<ol>
<li><p>Run the program from an already-open terminal. Open a command prompt and type:</p>
<pre><code>python myscript.py
</code></pre>
<p>For that to work you need the python executable in your path. Just check on <a href="https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them">how to edit environment variables</a> on Windows, and add <code>C:\PYTHON26</code> (or whatever directory you installed python to).</p>
<p>When the program ends, it'll drop you back to the <strong>cmd</strong> prompt instead of closing the window.</p></li>
<li><p>Add code to wait at the end of your script. For Python2, adding ...</p>
<pre><code>raw_input()
</code></pre>
<p>... at the end of the script makes it wait for the <kbd>Enter</kbd> key. That method is annoying because you have to modify the script, and have to remember removing it when you're done. Specially annoying when testing other people's scripts.  For Python3, use <code>input()</code>.</p></li>
<li><p>Use an editor that pauses for you. Some editors prepared for python will automatically pause for you after execution. Other editors allow you to configure the command line it uses to run your program. I find it particularly useful to configure it as "<code>python -i myscript.py</code>" when running. That drops you to a python shell after the end of the program, with the program environment loaded, so you may further play with the variables and call functions and methods.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>cmd /k</code> is the typical way to open any console application (not only Python) with a console window that will remain after the application closes. The easiest way I can think to do that, is to press Win+R, type <code>cmd /k</code> and then drag&amp;drop the script you want to the Run dialog.</p>
</div>
<div class="post-text" itemprop="text">
<p>Start the script from already open cmd window or
at the end of script add something like this, in Python 2:</p>
<pre><code> raw_input("Press enter to exit ;)")
</code></pre>
<p>Or, in Python 3:</p>
<pre><code>input("Press enter to exit ;)")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To keep your window open in case of exception (yet, while printing the exception)</p>
<h1>Python 2</h1>
<pre><code>if __name__ == '__main__':
    try:
        ## your code, typically one function call
    except Exception:
        import sys
        print sys.exc_info()[0]
        import traceback
        print traceback.format_exc()
        print "Press Enter to continue ..." 
        raw_input() 
</code></pre>
<p>To keep the window open in any case:</p>
<pre><code>if __name__ == '__main__':
    try:
        ## your code, typically one function call
    except Exception:
        import sys
        print sys.exc_info()[0]
        import traceback
        print traceback.format_exc()
    finally:
        print "Press Enter to continue ..." 
        raw_input()
</code></pre>
<h1>Python 3</h1>
<p>For Python3 you'll have to <a href="https://stackoverflow.com/a/30991566/2436175">use <code>input()</code> in place of <code>raw_input()</code></a>, and of course adapt the <code>print</code> statements.</p>
<pre><code>if __name__ == '__main__':
    try:
        ## your code, typically one function call
    except BaseException:
        import sys
        print(sys.exc_info()[0])
        import traceback
        print(traceback.format_exc())
        print("Press Enter to continue ...")
        input() 
</code></pre>
<p>To keep the window open in any case:</p>
<pre><code>if __name__ == '__main__':
    try:
        ## your code, typically one function call
except BaseException:
    import sys
    print(sys.exc_info()[0])
    import traceback
    print(traceback.format_exc())
finally:
    print("Press Enter to continue ...")
    input()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can combine the answers before: (for Notepad++ User)</p>
<p>press F5 to run current script and type in command: </p>
<pre><code>cmd /k python -i "$(FULL_CURRENT_PATH)"
</code></pre>
<p>in this way you stay in interactive mode after executing your Notepad++ python script and you are able to play around with your variables and so on :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a Windows batch file with these 2 lines:</p>
<pre><code>python your-program.py

pause
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python 2 you can do it with: raw_input()</p>
<pre><code>&gt;&gt;print("Hello World!")    
&gt;&gt;raw_input('Waiting a key...')
</code></pre>
<p>In python 3 you can do it with: input()  </p>
<pre><code>&gt;&gt;print("Hello world!")    
&gt;&gt;input('Waiting a key...')
</code></pre>
<p>Also, you can do it with the time.sleep(time)</p>
<pre><code>&gt;&gt;import time
&gt;&gt;print("The program will close in 5 seconds")
&gt;&gt;time.sleep(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/atexit.html" rel="noreferrer"><code>atexit</code></a>, you can pause the program right when it exits. If an error/exception is the reason for the exit, it will pause after printing the stacktrace.</p>
<pre><code>import atexit

# Python 2 should use `raw_input` instead of `input`
atexit.register(input, 'Press Enter to continue...')
</code></pre>
<p>In my program, I put the call to <code>atexit.register</code> in the <code>except</code> clause, so that it will only pause if something went wrong.</p>
<pre><code>if __name__ == "__main__":
    try:
        something_that_may_fail()

    except:
        # Register the pause.
        import atexit
        atexit.register(input, 'Press Enter to continue...')

        raise # Reraise the exception.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar problem. With Notepad++ I used to use the command : <code>C:\Python27\python.exe "$(FULL_CURRENT_PATH)"</code> which closed the cmd window immediately after the code terminated.<br/>
Now I am using <code>cmd /k c:\Python27\python.exe "$(FULL_CURRENT_PATH)"</code> which keeps the cmd window open.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3</p>
<pre><code>input('Press Enter to Exit...')
</code></pre>
<p>Will do the trick. </p>
</div>
<div class="post-text" itemprop="text">
<p>To just keep the window open I agree with Anurag and this is what I did to keep my windows open for short little calculation type programs.</p>
<p><em>This would just show a cursor with no text:</em></p>
<pre><code>raw_input() 
</code></pre>
<p><em>This next example would give you a clear message that the program is done and not waiting on another input prompt within the program:</em></p>
<pre><code>print('You have reached the end and the "raw_input()" function is keeping the window open') 
raw_input()
</code></pre>
<blockquote>
<p>Note!<br/>
  (1) In python 3, there is no <strong>raw_input()</strong>, just
  <strong>input()</strong>.<br/>
  (2) Use single quotes to indicate a string; otherwise if you type doubles around anything, such as
  "raw_input()", it will think it is a function, variable, etc, and not text.</p>
</blockquote>
<p><em>In this next example, I use double quotes and it <strong>won't</strong> work because it thinks there is a break in the quotes between "the" and "function" even though when you read it, your own mind can make perfect sense of it:</em></p>
<pre><code>print("You have reached the end and the "input()" function is keeping the window open")
input()
</code></pre>
<p>Hopefully this helps others who might be starting out and still haven't figured out how the computer thinks yet. It can take a while. :o)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run your script from a desktop shortcut, right click your python file and select <code>Send to|Desktop (create shortcut)</code>. Then right click the shortcut and select Properties. On the Shortcut tab select the Target: text box and add <code>cmd /k</code>  in front of the path and click OK. The shortcut should now run your script without closing and you don't need the <code>input('Hit enter to close')</code></p>
<p>Note, if you have more than one version of python on your machine, add the name of the required python executable between cmd /k and the scipt path like this:</p>
<pre><code>cmd /k python3 "C:\Users\&lt;yourname&gt;\Documents\your_scipt.py"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Apart from <code>input</code> and <code>raw_input</code>, you could also use an infinite <code>while</code> loop, like this:
<code>while True: pass</code> (Python 2.5+/3) or <code>while 1: pass</code> (all versions of Python 2/3). This might use computing power, though.</p>
<p>You could also run the program from the command line. Type <code>python</code> into the command line (Mac OS X Terminal) and it should say <code>Python 3.?.?</code> (Your Python version) It it does not show your Python version, or says <code>python: command not found</code>, look into changing PATH values (enviromentl values, listed above)/type <code>C:\(Python folder\python.exe</code>. If that is successful, type <code>python</code> or <code>C:\(Python installation)\python.exe</code> and the <em>full directory</em> of your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>A very belated answer, but I created a Windows Batch file called <code>pythonbat.bat</code> containing the following:</p>
<pre><code>python.exe %1
@echo off
echo.
pause
</code></pre>
<p>and then specified <code>pythonbat.bat</code> as the default handler for <code>.py</code> files.</p>
<p>Now, when I double-click a <code>.py</code> file in File Explorer, it opens a new console window, runs the Python script and then pauses (remains open), until I press any key...</p>
<p>No changes required to any Python scripts.</p>
<p>I can still open a console window and specify <code>python myscript.py</code> if I want to...</p>
<p>(I just noticed @maurizio already posted this exact answer)</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Go <a href="http://notepad-plus-plus.org/" rel="nofollow">here</a> and download and install Notepad++  </li>
<li>Go <a href="http://python.org/download" rel="nofollow">here</a> and download and install Python 2.7 not 3.  </li>
<li>Start, Run Powershell.  Enter the following.  <code>[Environment]::SetEnvironmentVariable("Path", "$env:Path;C:\Python27", "User")</code></li>
<li>Close Powershell and reopen it.</li>
<li>Make a directory for your programs.  mkdir scripts</li>
<li>Open that directory cd scripts</li>
<li>In Notepad++, in a new file type: <code>print "hello world"</code></li>
<li>Save the file as hello.py</li>
<li>Go back to powershell and make sure you are in the right directory by typing dir.  You should see your file hello.py there.</li>
<li>At the Powershell prompt type: <code>python hello.py</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>A simple hack to keep the window open:</p>
<pre><code>counter = 0

While (True):

    If (counter == 0):

        # Code goes here

    counter += 1
</code></pre>
<p>The counter is so the code won’t repeat itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>On windows 10 insert at beggining this:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
</code></pre>
<p>Strange, but it work for me!(Together with  input() at the end, of course)</p>
</div>
<span class="comment-copy">A belated +1000. I'm using python as a teaching language for a friend who uses Windows, and I could not believe how much trouble it was (at least based on existing documentation) getting to where we could run a script and see the output.</span>
<span class="comment-copy">just drag/drop your script into a cmd windows</span>
<span class="comment-copy">You would think the output window should stay open by default. It does when running Python in Mac OS. Very frustrating</span>
<span class="comment-copy">I'm going to link another question <a href="https://stackoverflow.com/questions/2843545/keep-windows-console-open-after-a-python-error">Keep Windows Console open after a Python Error</a> to this one (which I've posted an answer for debugging with drag &amp; drop python scripts.)</span>
<span class="comment-copy">See the answer that @maurizio posted below - it's the only one that doesn't need you to change your python scripts.</span>
<span class="comment-copy">+1 to item 3.  I use Scite as my Python editor and it simply keeps the output in its own output window.  This is really useful because you can potentially see the output of more than one run in a single window.</span>
<span class="comment-copy">I am able to see the output by running it from an already open terminal. But I need to give the complete script address in the python command? Can that be avoided?  When I use the raw_input() method, it gives me     NameError: name 'raw_input'is not defined.   Can you suggest an editor which automatically pauses after execution?</span>
<span class="comment-copy">@movingahead: maybe you are using python 3? in python 3 it was renamed to input(). But I would use python 2.6 for now, since python 3 lacks important third party libraries that haven't been ported yet. (see other questions on python 2vs3). About editor, I don't use windows, notepad++ lets you configure the command. I use emacs which has a windows version, but I never used it.</span>
<span class="comment-copy">@nosklo thanks!! Yah I am using Python 3. Doing basic stuff now so shouldn't be much of an issue. I will try notepad++. Am currently trying out Pydev for Eclipse</span>
<span class="comment-copy">@movingahead I use Aptana studio. (pydev pre packaged). its really good. nothing to say.</span>
<span class="comment-copy">yah it works out too</span>
<span class="comment-copy">Fantastic answer. You should have got this.</span>
<span class="comment-copy">Just fyi for the python os.system command you would do os.system( "cmd /k " + myAppPath + " " + myFlagsString )</span>
<span class="comment-copy"><code>cmd /k</code> is Windows-only. I can't help with a Mac alternative, sorry.</span>
<span class="comment-copy">Do you have to drag the script, including the Python command itself? Sorry can I have an example please? I am new, very new to Python under windows.</span>
<span class="comment-copy">"Any key" won't work, only Enter will (or Ctrl+D, depending on where we are).</span>
<span class="comment-copy">@DanielAndersson yep, changed the text</span>
<span class="comment-copy">If you think about it, it's kind of deep that only "enter" will allow you to "exit"...</span>
<span class="comment-copy">thank you, Antonio!</span>
<span class="comment-copy">This makes a great Windows batch file, if you change $(FULL_CURRENT_PATH) to a Windows path name.</span>
<span class="comment-copy">I found it much easier to get the pluggin PyNPP and assign a shortcut to run it (don't forget to disable the previous F5 shortcut)</span>
<span class="comment-copy">thank you, works great</span>
<span class="comment-copy">Or <code>import os os.system("pause")</code> at the end of the <code>.py</code> file</span>
<span class="comment-copy">This is the only answer here that's even remotely correct.  Answers that require corrupting <i>every single Python script you will ever run</i> with <code>raw_input</code> or other garbage are simply wrong.  Either type your command on the command line the way Python expects you to, or use the <a href="https://en.wikipedia.org/wiki/List_of_DOS_commands#PAUSE" rel="nofollow noreferrer">batch language</a> that has been provided with MS-DOS for <i>exactly this purpose</i> since <a href="https://en.wikipedia.org/wiki/Timeline_of_DOS_operating_systems#8108" rel="nofollow noreferrer">August 1981</a>.</span>
<span class="comment-copy">even better, use <code>python %*</code> and set it as one of the "open with" programs so you can either right click a .py file to open a pausing window or  I also put it in my Anaconda3 folder (in PATH) as py_pause.bat so now I can run <code>py_pause my-prog.py all my args</code> from the cmd line</span>
<span class="comment-copy">This is literally the ONLY correct answer.</span>
<span class="comment-copy">You may want to add ";C:\Python27" to the end of your Path environment variable. That way it can be shortened to 'cmd /k python -i "$(FULL_CURRENT_PATH)"' - Exactly what the answer above says plus the useful -i.</span>
<span class="comment-copy">Thanks! This actually helped me a lot. I am a Linux user and could not figure this out.</span>
<span class="comment-copy">This is like leaving your car running whilst you go for a coffee or sleep! Dangerous on many levels</span>
<span class="comment-copy">Why was this downvoted? It actually works!</span>
