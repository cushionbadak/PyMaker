<div class="post-text" itemprop="text">
<p>I have a multi-threading Python program, and a utility function, writeLog(message), that writes out a timestamp followed by the message. Unfortunately, the resultant log file gives no indication of which thread is generating which message. </p>
<p>I would like writeLog() to be able to add something to the message to identify which thread is calling it. Obviously I could just make the threads pass this information in, but that would be a lot more work. Is there some thread equivalent of os.getpid() that I could use?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/threading.html#threading.get_ident" rel="nofollow noreferrer"><code>threading.get_ident()</code></a> works, or <a href="https://docs.python.org/3/library/threading.html#threading.current_thread" rel="nofollow noreferrer"><code>threading.current_thread().ident</code></a> (or <code>threading.currentThread().ident</code> for Python &lt; 2.6).</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="http://docs.python.org/library/logging.html" rel="noreferrer">logging</a> module you can automatically add the current thread identifier in each log entry. 
Just use one of these <a href="http://docs.python.org/library/logging.html#logging.LogRecord" rel="noreferrer">LogRecord</a> mapping keys in your logger format string:</p>
<blockquote>
<p><em>%(thread)d :</em>     Thread ID (if available).</p>
<p><em>%(threadName)s :</em>  Thread name (if available).</p>
</blockquote>
<p>and set up your default handler with it:</p>
<pre><code>logging.basicConfig(format="%(threadName)s:%(message)s")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>thread.get_ident()</code> function returns a long integer on Linux. It's not really a thread id.</p>
<p>I use <a href="http://blog.devork.be/2010/09/finding-linux-thread-id-from-within.html" rel="noreferrer">this method</a> to really get the thread id on Linux:</p>
<pre><code>import ctypes
libc = ctypes.cdll.LoadLibrary('libc.so.6')

# System dependent, see e.g. /usr/include/x86_64-linux-gnu/asm/unistd_64.h
SYS_gettid = 186

def getThreadId():
   """Returns OS thread id - Specific to Linux"""
   return libc.syscall(SYS_gettid)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I saw examples of thread IDs like this:</p>
<pre><code>class myThread(threading.Thread):
    def __init__(self, threadID, name, counter):
        self.threadID = threadID
        ...
</code></pre>
<p>The <a href="http://docs.python.org/library/threading.html#threading.Thread.name" rel="noreferrer">threading module docs</a> lists <code>name</code> attribute as well:</p>
<pre><code>...

A thread has a name. 
The name can be passed to the constructor, 
and read or changed through the name attribute.

...

Thread.name

A string used for identification purposes only. 
It has no semantics. Multiple threads may
be given the same name. The initial name is set by the constructor.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the ident of the current running thread. The ident could be reused for other threads, if the current thread ends.</p>
<p>When you crate an instance of Thread, a name is given implicit to the thread, which is the pattern: Thread-number</p>
<p>The name has no meaning and the name don't have to be unique. The ident of all running threads is unique.</p>
<pre><code>import threading


def worker():
    print(threading.current_thread().name)
    print(threading.get_ident())


threading.Thread(target=worker).start()
threading.Thread(target=worker, name='foo').start()
</code></pre>
<p>The function threading.current_thread() returns the current running thread. This object holds the whole information of the thread.</p>
</div>
<div class="post-text" itemprop="text">
<p>I created multiple threads in Python, I printed the thread objects, and I printed the id using the <code>ident</code> variable. I see all the ids are same:</p>
<pre><code>&lt;Thread(Thread-1, stopped 140500807628544)&gt;
&lt;Thread(Thread-2, started 140500807628544)&gt;
&lt;Thread(Thread-3, started 140500807628544)&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similarly to @brucexin I needed to get OS-level thread identifier (which != <code>thread.get_ident()</code>) and use something like below not to depend on particular numbers and being amd64-only:</p>
<pre><code>---- 8&lt; ---- (xos.pyx)
"""module xos complements standard module os""" 

cdef extern from "&lt;sys/syscall.h&gt;":                                                             
    long syscall(long number, ...)                                                              
    const int SYS_gettid                                                                        

# gettid returns current OS thread identifier.                                                  
def gettid():                                                                                   
    return syscall(SYS_gettid)                                                                  
</code></pre>
<p>and</p>
<pre><code>---- 8&lt; ---- (test.py)
import pyximport; pyximport.install()
import xos

...

print 'my tid: %d' % xos.gettid()
</code></pre>
<p>this depends on Cython though.</p>
</div>
<span class="comment-copy">Corrected your links Nicholas. I recently realised that if you hover over a title in the docs a little red symbol appears to the right. Copy+paste that for more specific links to the docs :-)</span>
<span class="comment-copy">Note that if you're using Jython, you want <code>threading.currentThread()</code> (camelCase, not camel_case) as of version 2.5.</span>
<span class="comment-copy">@CharlesAnderson beware, the python docs on <a href="http://docs.python.org/2/library/threading.html#threading.Thread.name" rel="nofollow noreferrer">Thread.name</a> say "name - A string used for identification purposes only. It has no semantics. <b>Multiple threads may be given the same name.</b> The initial name is set by the constructor."</span>
<span class="comment-copy">Also note that at least in Python 2.5 and 2.6 on OS X, there seems to be a bug where <code>threading.current_thread().ident</code> is inappropriately <code>None</code>. Probably makes sense just to use <code>thread.get_ident()</code> in Python 2 and <code>threading.current_thread().ident</code> in Python 3.</span>
<span class="comment-copy">Previous versions of my answer <i>did</i> mention <code>thread.get_ident()</code> (<code>threading.get_ident()</code> was added in Python 3.3 â€” follow the links to the documentation).</span>
<span class="comment-copy">I am using logger. So I think you answer is the simplest solution. But I am getting <code>&lt;concurrent.futures.thread.ThreadPoolExecutor object at 0x7f00f882a438&gt;_2</code>  this as a thread name. Is that two is my thread number which invoked</span>
<span class="comment-copy">This can be used sometimes but is not portable</span>
<span class="comment-copy">That linked code returns the Process ID, not the Thread ID</span>
<span class="comment-copy">Could you please edit this answer so it will continue to be useful to visitors if the link becomes bad?</span>
<span class="comment-copy">Exactly what I was looking for, thank you</span>
<span class="comment-copy">how to wrap the start() method of my thread class so it can fill my self.pid with it's pid everytime I launch the thread? Tried os.kill(pid) from inside the own thread, it just stops all the threads including the main, must be done externally by the parent, but how to get that child pid from the parent?</span>
<span class="comment-copy">I guess it is recycled, as the docs for <code>ident</code> say:  <code>Thread identifiers may be recycled when a thread exits and another thread is created.</code> <a href="https://docs.python.org/2/library/threading.html#threading.Thread.ident" rel="nofollow noreferrer">docs.python.org/2/library/threading.html#threading.Thread.ident</a></span>
