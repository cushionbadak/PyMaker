<div class="post-text" itemprop="text">
<p>Is there a way to return a list of all the subdirectories in the current directory in Python?</p>
<p>I know you can do this with files, but I need to get the list of directories instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean immediate subdirectories, or every directory right down the tree? </p>
<p>Either way, you could use <a href="http://docs.python.org/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a> to do this:</p>
<pre><code>os.walk(directory)
</code></pre>
<p>will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so</p>
<pre><code>[x[0] for x in os.walk(directory)]
</code></pre>
<p>should give you all of the subdirectories, recursively.</p>
<p>Note that the second entry in the tuple is the list of child directories of the entry in the first position, so you could use this instead, but it's not likely to save you much.</p>
<p>However, you could use it just to give you the immediate child directories:</p>
<pre><code>next(os.walk('.'))[1]
</code></pre>
<p>Or see the other solutions already posted, using <a href="http://docs.python.org/library/os.html#os.listdir" rel="noreferrer"><code>os.listdir</code></a> and <a href="http://docs.python.org/library/os.path.html#os.path.isdir" rel="noreferrer"><code>os.path.isdir</code></a>, including those at "<a href="https://stackoverflow.com/questions/800197/get-all-of-the-immediate-subdirectories-in-python">How to get all of the immediate subdirectories in Python</a>".</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

d = '.'
[os.path.join(d, o) for o in os.listdir(d) 
                    if os.path.isdir(os.path.join(d,o))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just use <code>glob.glob</code></p>
<pre><code>from glob import glob
glob("/path/to/directory/*/")
</code></pre>
<p>Don't forget the trailing <code>/</code> after the <code>*</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Much nicer than the above, because you don't need several os.path.join() and you will get the full path directly (if you wish), you can do this in <strong>Python 3.5+</strong></p>
<pre><code>subfolders = [f.path for f in os.scandir(folder) if f.is_dir() ]    
</code></pre>
<p>This will give the complete path to the subdirectory.
If you only want the name of the subdirectory use <code>f.name</code> instead of <code>f.path</code></p>
<p><a href="https://docs.python.org/3/library/os.html#os.scandir" rel="noreferrer">https://docs.python.org/3/library/os.html#os.scandir</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you need a recursive solution that will find all the subdirectories in the subdirectories, use walk as proposed before.</p>
<p>If you only need the current directory's child directories, combine <code>os.listdir</code> with <code>os.path.isdir</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer using filter (<a href="https://docs.python.org/2/library/functions.html#filter">https://docs.python.org/2/library/functions.html#filter</a>), but this is just a matter of taste.</p>
<pre><code>d='.'
filter(lambda x: os.path.isdir(os.path.join(d, x)), os.listdir(d))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Implemented this using python-os-walk. (<a href="http://www.pythonforbeginners.com/code-snippets-source-code/python-os-walk/" rel="noreferrer">http://www.pythonforbeginners.com/code-snippets-source-code/python-os-walk/</a>)</p>
<pre><code>import os

print("root prints out directories only from what you specified")
print("dirs prints out sub-directories from root")
print("files prints out all files from root and directories")
print("*" * 20)

for root, dirs, files in os.walk("/var/log"):
    print(root)
    print(dirs)
    print(files)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the list of subdirectories (and files) in Python 2.7 using os.listdir(path)</p>
<pre><code>import os
os.listdir(path)  # list of subdirectories and files
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Listing Out only directories</h1>
<pre><code>print("\nWe are listing out only the directories in current directory -")
directories_in_curdir = filter(os.path.isdir, os.listdir(os.curdir))
print(directories_in_curdir)
</code></pre>
<h1>Listing Out only files in current directory</h1>
<pre><code>files = filter(os.path.isfile, os.listdir(os.curdir))
print("\nThe following are the list of all files in the current directory -")
print(files)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since I stumbled upon this problem using Python 3.4 and Windows UNC paths, here's a variant for this environment:</p>
<pre><code>from pathlib import WindowsPath

def SubDirPath (d):
    return [f for f in d.iterdir() if f.is_dir()]

subdirs = SubDirPath(WindowsPath(r'\\file01.acme.local\home$'))
print(subdirs)
</code></pre>
<p>Pathlib is new in Python 3.4 and makes working with paths under different OSes much easier:
<a href="https://docs.python.org/3.4/library/pathlib.html" rel="noreferrer">https://docs.python.org/3.4/library/pathlib.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the tips, guys. I ran into an issue with softlinks (infinite recursion) being returned as dirs. Softlinks? We don't want no stinkin' soft links! So...</p>
<p>This rendered just the dirs, not softlinks:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; inf = os.walk('.')
&gt;&gt;&gt; [x[0] for x in inf]
['.', './iamadir']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although this question is answered a long time ago. I want to recommend to use the <a href="https://docs.python.org/3.4/library/pathlib.html#pathlib.Path" rel="noreferrer"><code>pathlib</code></a> module since this is a robust way to work on Windows and Unix OS.</p>
<p>So to get all paths in a specific directory including subdirectories:</p>
<pre><code>from pathlib import Path
paths = list(Path('myhomefolder', 'folder').glob('**/*.txt'))

# all sorts of operations
file = paths[0]
file.name
file.stem
file.parent
file.suffix
</code></pre>
<p>etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4 introduced <a href="https://docs.python.org/3.4/library/pathlib.html#" rel="noreferrer">the <code>pathlib</code> module</a> into the standard library, which provides an object oriented approach to handle filesystem paths:</p>
<pre><code>from pathlib import Path

p = Path('./')

# List comprehension
[f for f in p.iterdir() if f.is_dir()]

# The trailing slash to glob indicated directories
# This will also include the current directory '.'
list(p.glob('**/'))
</code></pre>
<p>Pathlib is also available on Python 2.7 via <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer">the pathlib2 module on PyPi.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Building upon Eli Bendersky's solution, use the following example:</p>
<pre><code>import os
test_directory = &lt;your_directory&gt;
for child in os.listdir(test_directory):
    test_path = os.path.join(test_directory, child)
    if os.path.isdir(test_path):
        print test_path
        # Do stuff to the directory "test_path"
</code></pre>
<p>where <code>&lt;your_directory&gt;</code> is the path to the directory you want to traverse.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple of simple functions based on @Blair Conrad's example - </p>
<pre><code>import os

def get_subdirs(dir):
    "Get a list of immediate subdirectories"
    return next(os.walk(dir))[1]

def get_subfiles(dir):
    "Get a list of immediate subfiles"
    return next(os.walk(dir))[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With full path and accounting for path being <code>.</code>, <code>..</code>, <code>\\</code>, <code>..\\..\\subfolder</code>, etc:</p>
<pre><code>import os, pprint
pprint.pprint([os.path.join(os.path.abspath(path), x[0]) \
    for x in os.walk(os.path.abspath(path))])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This answer didn't seem to exist already.</p>
<pre><code>directories = [ x for x in os.listdir('.') if os.path.isdir(x) ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've had a similar question recently, and I found out that the best answer for python 3.6 (as user havlock added) is to use <code>os.scandir</code>. Since it seems there is no solution using it, I'll add my own. First, a non-recursive solution that lists only the subdirectories directly under the root directory.</p>
<pre><code>def get_dirlist(rootdir):

    dirlist = []

    with os.scandir(rootdir) as rit:
        for entry in rit:
            if not entry.name.startswith('.') and entry.is_dir():
                dirlist.append(entry.path)

    dirlist.sort() # Optional, in case you want sorted directory names
    return dirlist
</code></pre>
<p>The recursive version would look like this:</p>
<pre><code>def get_dirlist(rootdir):

    dirlist = []

    with os.scandir(rootdir) as rit:
        for entry in rit:
            if not entry.name.startswith('.') and entry.is_dir():
                dirlist.append(entry.path)
                dirlist += get_dirlist(entry.path)

    dirlist.sort() # Optional, in case you want sorted directory names
    return dirlist
</code></pre>
<p>keep in mind that <code>entry.path</code> wields the absolute path to the subdirectory. In case you only need the folder name, you can use <code>entry.name</code> instead. Refer to <a href="https://docs.python.org/3/library/os.html#os.DirEntry" rel="nofollow noreferrer" title="os.DirEntry">os.DirEntry</a> for additional details about the <code>entry</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>use a filter function <code>os.path.isdir</code> over <code>os.listdir()</code>
something like this <code>filter(os.path.isdir,[os.path.join(os.path.abspath('PATH'),p) for p in os.listdir('PATH/')])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Copy paste friendly in <code>ipython</code>:</p>
<pre><code>import os
d='.'
folders = list(filter(lambda x: os.path.isdir(os.path.join(d, x)), os.listdir(d)))
</code></pre>
<p>Output from <code>print(folders)</code>:</p>
<pre><code>['folderA', 'folderB']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want just the top list folder, please use listdir as walk take too much time.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.4/library/os.html?highlight=os#os.listdir" rel="nofollow noreferrer">docs.python.org/3.4/library/os.html?highlight=os#os.listdir</a> <a href="https://docs.python.org/3.4/library/os.path.html#os.path.isdir" rel="nofollow noreferrer">docs.python.org/3.4/library/os.path.html#os.path.isdir</a></span>
<span class="comment-copy">I think os.walk returns triples (root,dirs,files). Which means that dirs has many repeating entries. Is there a more efficient way that recurses through directories?</span>
<span class="comment-copy">Do not use <code>os.walk('.').next()[1]</code> or <code>os.walk('.').__next__()[1]</code> directly. Instead, use the built-in function <code>next()</code>, which is available both in <a href="https://docs.python.org/2/library/functions.html#next" rel="nofollow noreferrer">Python 2 (see doc)</a> and <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">Python 3 (see doc)</a>. For example: <code>next(os.walk('.'))[1]</code>.</span>
<span class="comment-copy">@Lucio Why is it bad to use <code>os.walk('.').next()[1]</code> directly?</span>
<span class="comment-copy">@wisbucky it is a bad practice because <code>iteraror.__next__()</code> is an internal method and <code>iterator.next()</code> usage should be transitioned to the built-in <code>next()</code> according to PEP-3114. See <a href="https://www.python.org/dev/peps/pep-3114/" rel="nofollow noreferrer">PEP-3114</a> which was approved in 2007.</span>
<span class="comment-copy">For anyone concerned about performance differences between <code>os.walk</code> and <code>os.listdir</code>+<code>os.path.isdir</code> solutions: I just tested on a directory with 10,000 subdirectories (with millions of files in the hierarchy below) and the performance differences are negligible. <code>os.walk</code>: "10 loops, best of 3: 44.6 msec per loop" and <code>os.listdir</code>+<code>os.path.isdir</code>: "10 loops, best of 3: 45.1 msec per loop"</span>
<span class="comment-copy">note that in this approach you need to care of abspath-issues if not executed on '.'</span>
<span class="comment-copy">Just a heads up, if you are not using the cwd ('.'), this will not work unless you do an <code>os.path.join</code> on <code>o</code> to get the full path, otherwise <code>isdir(0)</code> will always return false</span>
<span class="comment-copy">It appears that the post has been updated with fixes for the two mentioned issues above.</span>
<span class="comment-copy">Nice. Simple. Only, it leaves the trailing <code>/</code> in the names</span>
<span class="comment-copy">If you cannot assume <code>/</code> to be the folder separator, do this: <code>glob(os.path.join(path_to_directory, "*", ""))</code></span>
<span class="comment-copy">This doesn't work for subdirectories! To use glob here's the complete answer: <a href="https://stackoverflow.com/questions/2186525/use-a-glob-to-find-files-recursively-in-python">Use a Glob() to find files recursively in Python?</a></span>
<span class="comment-copy">As the library link implies, this is only available in python 3 (specifically, 3.5)</span>
<span class="comment-copy">This is probably why I wrote <code>you can do this in Python 3.5+</code> in bold, when I wrote my post...</span>
<span class="comment-copy">This includes files too.</span>
<span class="comment-copy">The name is confusing as 'dir' does not refer to the objects forming the list but to the container directory. Please check your one-line answers, for beginners it is very tempting to select them.</span>
<span class="comment-copy">Beware of that <code>os.listdir</code> lists contents of directory including files.</span>
<span class="comment-copy">Did not work on mac OS. I think that the problem is that os.listdir returns only the name of the directory and not the full path but os.path.isdir only returns True if the full path is a directory.</span>
<span class="comment-copy">What is <code>[x[0] for x in inf]</code> called in python so I could look it up?</span>
<span class="comment-copy">@shinzou  That's a list comprehension. Super useful. Also look up dict comprehensions.</span>
<span class="comment-copy">This will always return an empty list if you are searching anything other than the current working directory, which is technically what the OP is looking to do, but not very reusable.</span>
<span class="comment-copy">directories = [ x for x in os.listdir(localDir) if os.path.isdir(localDir+x)</span>
<span class="comment-copy">Actually, the way this is written it will not work on 3.5, only 3.6. To use on 3.5 you need to remove context manager - see <a href="https://stackoverflow.com/questions/41401417/with-os-scandir-raises-attributeerror-exit" title="with os scandir raises attributeerror exit">stackoverflow.com/questions/41401417/…</a></span>
<span class="comment-copy">This is correct. I could swear I read somewhere that the context manager was implemented in 3.5, but It seems I'm wrong.</span>
<span class="comment-copy">What is X in this case?</span>
<span class="comment-copy">How does this help?</span>
