<div class="post-text" itemprop="text">
<p>I'm using <a href="http://sphinx.pocoo.org" rel="noreferrer">sphinx</a> and the autodoc plugin to generate API documentation for my Python modules.  Whilst I can see how to nicely document specific parameters, I cannot find an example of how to document a <code>**kwargs</code> parameter.</p>
<p>Does anyone have a good example of a clear way to document these?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think <a href="http://docs.python.org/library/subprocess.html" rel="noreferrer"><code>subprocess</code>-module's docs</a> is a good example. Give an exhaustive list of all parameters for a <a href="http://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="noreferrer">top/parent class</a>. Then just refer to that list for all other occurrences of <code>**kwargs</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>After finding this question I settled on the following, which is valid Sphinx and works fairly well:</p>
<pre><code>def some_function(first, second="two", **kwargs):
    r"""Fetches and returns this thing

    :param first:
        The first parameter
    :type first: ``int``
    :param second:
        The second parameter
    :type second: ``str``
    :param \**kwargs:
        See below

    :Keyword Arguments:
        * *extra* (``list``) --
          Extra stuff
        * *supplement* (``dict``) --
          Additional content

    """
</code></pre>
<p>The <code>r"""..."""</code> is required to make this a "raw" docstring and thus keep the <code>\*</code> intact (for Sphinx to pick up as a literal <code>*</code> and not the start of "emphasis").</p>
<p>The chosen formatting (bulleted list with parenthesized type and m-dash-separated description) is simply to match the automated formatting provided by Sphinx.</p>
<p>Once you've gone to this effort of making the "Keyword Arguments" section look like the default "Parameters" section, it seems like it might be easier to roll your own parameters section from the outset (as per some of the other answers), but as a proof of concept this is one way to achieve a nice look for supplementary <code>**kwargs</code> if you're already using Sphinx.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Google Style docstrings parsed by Sphinx</strong></p>
<p>Disclaimer: not tested.</p>
<p>From this cutout of the <a href="http://sphinx-doc.org/latest/ext/example_google.html#example-google" rel="noreferrer">sphinx docstring example</a>, the <code>*args</code> and <code>**kwargs</code> are left <strong>unexpanded</strong>:</p>
<pre><code>def module_level_function(param1, param2=None, *args, **kwargs):
    """
    ...

    Args:
        param1 (int): The first parameter.
        param2 (Optional[str]): The second parameter. Defaults to None.
            Second line of description should be indented.
        *args: Variable length argument list.
        **kwargs: Arbitrary keyword arguments.
</code></pre>
<p>I would <strong>suggest</strong> the following solution for compactness:</p>
<pre><code>    """
    Args:
        param1 (int): The first parameter.
        param2 (Optional[str]): The second parameter. Defaults to None.
            Second line of description should be indented.
        *param3 (int): description
        *param4 (str): 
        ...
        **key1 (int): description 
        **key2 (int): description 
        ...
</code></pre>
<p>Notice how, <code>Optional</code> is not required for <code>**key</code> arguments. </p>
<p><strong>Otherwise</strong>, you can try to explicitly list the *args under <code>Other Parameters</code> and <code>**kwargs</code> under the <code>Keyword Args</code> (see parsed <a href="http://sphinxcontrib-napoleon.readthedocs.org/en/latest/index.html#sections" rel="noreferrer">sections</a>):</p>
<pre><code>    """
    Args:
        param1 (int): The first parameter.
        param2 (Optional[str]): The second parameter. Defaults to None.
            Second line of description should be indented.

    Other Parameters:
        param3 (int): description
        param4 (str): 
        ...

    Keyword Args:
        key1 (int): description 
        key2 (int): description 
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a <a href="http://pythonhosted.org/an_example_pypi_project/sphinx.html#full-code-exampl" rel="nofollow noreferrer">doctstring example</a> for Sphinx in their documentation.  Specifically they show the following: </p>
<pre><code>def public_fn_with_googley_docstring(name, state=None):
"""This function does something.

Args:
   name (str):  The name to use.

Kwargs:
   state (bool): Current state to be in.

Returns:
   int.  The return code::

      0 -- Success!
      1 -- No good.
      2 -- Try again.

Raises:
   AttributeError, KeyError

A really great idea.  A way you might use me is

&gt;&gt;&gt; print public_fn_with_googley_docstring(name='foo', state=None)
0

BTW, this always returns 0.  **NEVER** use with :class:`MyPublicClass`.

"""
return 0
</code></pre>
<p>Though you asked about <a class="post-tag" href="/questions/tagged/sphinx" rel="tag" title="show questions tagged 'sphinx'">sphinx</a> explicitly, I would also point to the <a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html" rel="nofollow noreferrer">Google Python Style Guide</a>. Their docstring example seems to imply that they don't call out kwargs specifically. (other_silly_variable=None) </p>
<pre><code>def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):
"""Fetches rows from a Bigtable.

Retrieves rows pertaining to the given keys from the Table instance
represented by big_table.  Silly things may happen if
other_silly_variable is not None.

Args:
    big_table: An open Bigtable Table instance.
    keys: A sequence of strings representing the key of each table row
        to fetch.
    other_silly_variable: Another optional variable, that has a much
        longer name than the other args, and which does nothing.

Returns:
    A dict mapping keys to the corresponding table row data
    fetched. Each row is represented as a tuple of strings. For
    example:

    {'Serak': ('Rigel VII', 'Preparer'),
     'Zim': ('Irk', 'Invader'),
     'Lrrr': ('Omicron Persei 8', 'Emperor')}

    If a key from the keys argument is missing from the dictionary,
    then that row was not found in the table.

Raises:
    IOError: An error occurred accessing the bigtable.Table object.
"""
pass
</code></pre>
<p>A-B-B has a question about the accepted answer of referencing the subprocess management documentation. If you import a module, you can quickly see the module docstrings via inspect.getsource. </p>
<p>An example from the python interpreter using Silent Ghost's recommendation: </p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import print inspect.getsource(subprocess)
</code></pre>
<p>Of course you can also view the module documentation via help function. For example help(subprocess) </p>
<p>I'm not personally a fan of the subprocess docstring for kwargs as an example, but like the Google example it doesn't list kwargs seperately as shown in the Sphinx documentation example. </p>
<pre><code>def call(*popenargs, **kwargs):
"""Run command with arguments.  Wait for command to complete, then
return the returncode attribute.

The arguments are the same as for the Popen constructor.  Example:

retcode = call(["ls", "-l"])
"""
return Popen(*popenargs, **kwargs).wait()
</code></pre>
<p>I'm including this answer to A-B-B's question because it's worth noting that you can review any module's source or documentation this way for insights and inspiration for commenting your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>If anyone else is looking for some valid syntax.. Here's an example docstring. This is just how I did it, I hope it's useful to you, but I can't claim that it's compliant with anything in particular.</p>
<pre><code>def bar(x=True, y=False):
    """
    Just some silly bar function.

    :Parameters:
      - `x` (`bool`) - dummy description for x
      - `y` (`string`) - dummy description for y
    :return: (`string`) concatenation of x and y.
    """
    return str(x) + y

def foo (a, b, **kwargs):
    """
    Do foo on a, b and some other objects.

    :Parameters:
      - `a` (`int`) - A number.
      - `b` (`int`, `string`) - Another number, or maybe a string.
      - `\**kwargs` - remaining keyword arguments are passed to `bar`

    :return: Success
    :rtype: `bool`
    """
    return len(str(a) + str(b) + bar(**kwargs)) &gt; 20
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This depends on the style of documentation you use, but if you are using the <a href="https://github.com/numpy/numpydoc" rel="nofollow noreferrer">numpydoc</a> style it is recommend to document <code>**kwargs</code> using <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer"><code>Other Parameters</code></a>.</p>
<p>For example, following quornian's example:</p>
<pre><code>def some_function(first, second="two", **kwargs):
    """Fetches and returns this thing

    Parameters
    ----------
    first : `int`
        The first parameter
    second : `str`, optional
        The second parameter

    Other Parameters
    ----------------
    extra : `list`, optional
        Extra stuff. Default ``[]``.
    suplement : `dict`, optional
        Additional content. Default ``{'key' : 42}``.
    """
</code></pre>
<p>Note especially that it is recommended to give the defaults of kwargs, since these are not obvious from the function signature.</p>
</div>
<span class="comment-copy">This depends entirely on what docstring method you use. (reStructuredText, Sphinx, Google)</span>
<span class="comment-copy">This should not have been closed. It is a valid question. It is specific (how to document **kwargs using sphinx) As doc comments are not entirely standardized in python this will result in opinions (or multiple methods) as long as they support the question specifically (sphinx).</span>
<span class="comment-copy">Am I the only one to whom this answer made no sense? I couldn't find the specific example in question.</span>
<span class="comment-copy">The example is likely <code>subprocess.call(*popenargs, **kwargs)</code>. It is documented as <code>subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)</code> where everything after the <code>*</code> is the recognized keys in <code>**kwargs</code> (Or at least the ones frequently used)</span>
<span class="comment-copy">The most meaningful continuation of that is now <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> and I'm not sure that it's a particularly great example any more.</span>
<span class="comment-copy">Unless I'm mistaken, it's no longer documented in <a href="https://github.com/python/cpython/blob/3.7/Lib/subprocess.py" rel="nofollow noreferrer">Python 3.7</a>.</span>
<span class="comment-copy">Correction: that's not part of Sphinx's documentation, but of an independent 'example pypi project', which explicitly describes itself as a non-authoritative tutorial.</span>
<span class="comment-copy">`` does the trick, markdown way of ignoring.</span>
<span class="comment-copy">So what about the individual keyword arguments?</span>
