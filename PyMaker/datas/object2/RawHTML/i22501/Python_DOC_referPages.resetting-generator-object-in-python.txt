<div class="post-text" itemprop="text">
<p>I have generator object returned by multiple yield. Preparation to call this generator is rather time-consuming operation. That is why I want to reuse generator several times.</p>
<pre><code>y = FunctionWithYield()
for x in y: print(x)
#here must be something to reset 'y'
for x in y: print(x)
</code></pre>
<p>Of course, I'm taking in mind copying content into simple list. </p>
</div>
<div class="post-text" itemprop="text">
<p>Another option is to use the <a href="https://docs.python.org/library/itertools.html#itertools.tee" rel="noreferrer"><code>itertools.tee()</code></a> function to create a second version of your generator:</p>
<pre><code>y = FunctionWithYield()
y, y_backup = tee(y)
for x in y:
    print(x)
for x in y_backup:
    print(x)
</code></pre>
<p>This could be beneficial from memory usage point of view if the original iteration might not process all the items.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generators can't be rewound. You have the following options:</p>
<ol>
<li><p>Run the generator function again, restarting the generation:</p>
<pre><code>y = FunctionWithYield()
for x in y: print(x)
y = FunctionWithYield()
for x in y: print(x)
</code></pre></li>
<li><p>Store the generator results in a data structure on memory or disk which you can iterate over again:</p>
<pre><code>y = list(FunctionWithYield())
for x in y: print(x)
# can iterate again:
for x in y: print(x)
</code></pre></li>
</ol>
<p>The downside of option <strong>1</strong> is that it computes the values again. If that's CPU-intensive you end up calculating twice. On the other hand, the downside of <strong>2</strong> is the storage. The entire list of values will be stored on memory. If there are too many values, that can be unpractical.</p>
<p>So you have the classic <em>memory vs. processing tradeoff</em>. I can't imagine a way of rewinding the generator without either storing the values or calculating them again.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def gen():
...     def init():
...         return 0
...     i = init()
...     while True:
...         val = (yield i)
...         if val=='restart':
...             i = init()
...         else:
...             i += 1

&gt;&gt;&gt; g = gen()
&gt;&gt;&gt; g.next()
0
&gt;&gt;&gt; g.next()
1
&gt;&gt;&gt; g.next()
2
&gt;&gt;&gt; g.next()
3
&gt;&gt;&gt; g.send('restart')
0
&gt;&gt;&gt; g.next()
1
&gt;&gt;&gt; g.next()
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably the most simple solution is to wrap the expensive part in an object and pass that to the generator:</p>
<pre><code>data = ExpensiveSetup()
for x in FunctionWithYield(data): pass
for x in FunctionWithYield(data): pass
</code></pre>
<p>This way, you can cache the expensive calculations.</p>
<p>If you can keep all results in RAM at the same time, then use <code>list()</code> to materialize the results of the generator in a plain list and work with that.</p>
</div>
<div class="post-text" itemprop="text">
<p>I want to offer a different solution to an old problem</p>
<pre><code>class IterableAdapter:
    def __init__(self, iterator_factory):
        self.iterator_factory = iterator_factory

    def __iter__(self):
        return self.iterator_factory()

squares = IterableAdapter(lambda: (x * x for x in range(5)))

for x in squares: print(x)
for x in squares: print(x)
</code></pre>
<p>The benefit of this when compared to something like <code>list(iterator)</code> is that this is <code>O(1)</code> space complexity and <code>list(iterator)</code> is <code>O(n)</code>. The disadvantage is that, if you only have access to the iterator, but not the function that produced the iterator, then you cannot use this method. For example, <strong>it might seem reasonable to do the following, but it will not work.</strong></p>
<pre><code>g = (x * x for x in range(5))

squares = IterableAdapter(lambda: g)

for x in squares: print(x)
for x in squares: print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If GrzegorzOledzki's answer won't suffice, you could probably use <code>send()</code> to accomplish your goal. See <a href="http://www.python.org/dev/peps/pep-0342/" rel="nofollow noreferrer">PEP-0342</a> for more details on enhanced generators and yield expressions.</p>
<p>UPDATE: Also see <a href="http://docs.python.org/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee()</code></a>. It involves some of that memory vs. processing tradeoff mentioned above, but it <em>might</em> save some memory over just storing the generator results in a <code>list</code>; it depends on how you're using the generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow">official documentation of tee</a>:</p>
<blockquote>
<p>In general, if one iterator uses most or all of the data before
  another iterator starts, it is faster to use list() instead of tee().</p>
</blockquote>
<p>So it's best to use <code>list(iterable)</code> instead in your case.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your generator is pure in a sense that its output only depends on passed arguments and the step number, and you want the resulting generator to be restartable, here's a sort snippet that might be handy:</p>
<pre><code>import copy

def generator(i):
    yield from range(i)

g = generator(10)
print(list(g))
print(list(g))

class GeneratorRestartHandler(object):
    def __init__(self, gen_func, argv, kwargv):
        self.gen_func = gen_func
        self.argv = copy.copy(argv)
        self.kwargv = copy.copy(kwargv)
        self.local_copy = iter(self)

    def __iter__(self):
        return self.gen_func(*self.argv, **self.kwargv)

    def __next__(self):
        return next(self.local_copy)

def restartable(g_func: callable) -&gt; callable:
    def tmp(*argv, **kwargv):
        return GeneratorRestartHandler(g_func, argv, kwargv)

    return tmp

@restartable
def generator2(i):
    yield from range(i)

g = generator2(10)
print(next(g))
print(list(g))
print(list(g))
print(next(g))
</code></pre>
<p>outputs:</p>
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[]
0
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define a function that returns your generator</p>
<pre><code>def f():
  def FunctionWithYield(generator_args):
    code here...

  return FunctionWithYield
</code></pre>
<p>Now you can just do as many times as you like:</p>
<pre><code>for x in f()(generator_args): print(x)
for x in f()(generator_args): print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no option to reset iterators. Iterator usually pops out when it iterate through <code>next()</code> function. Only way is to take a backup before iterate on the iterator object. Check below.</p>
<p><strong>Creating iterator object with items 0 to 9</strong></p>
<pre><code>i=iter(range(10))
</code></pre>
<p><strong>Iterating through next() function which will pop out</strong></p>
<pre><code>print(next(i))
</code></pre>
<p><strong>Converting the iterator object to list</strong></p>
<pre><code>L=list(i)
print(L)
output: [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>so item 0 is already popped out. Also all the items are popped as we converted the iterator to list.</p>
<pre><code>next(L) 

Traceback (most recent call last):
  File "&lt;pyshell#129&gt;", line 1, in &lt;module&gt;
    next(L)
StopIteration
</code></pre>
<p>So you need to convert the iterator to lists for backup before start iterating.
List could be converted to iterator with <code>iter(&lt;list-object&gt;)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can now use <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.seekable" rel="nofollow noreferrer"><code>more_itertools.seekable</code></a> (a third-party tool) which enables resetting iterators.</p>
<p>Install via <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>&gt; pip install more_itertools</code></a></p>
<pre><code>import more_itertools as mit


y = mit.seekable(FunctionWithYield())
for x in y:
    print(x)

y.seek(0)                                              # reset iterator
for x in y:
    print(x)
</code></pre>
<p>Note: memory consumption grows while advancing the iterator, so be wary of large iterables.  </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you meant by expensive preparation, but I guess you actually have</p>
<pre><code>data = ... # Expensive computation
y = FunctionWithYield(data)
for x in y: print(x)
#here must be something to reset 'y'
# this is expensive - data = ... # Expensive computation
# y = FunctionWithYield(data)
for x in y: print(x)
</code></pre>
<p>If that's the case, why not reuse <code>data</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, you say you want to call a generator multiple times, but initialization is expensive... What about something like this?</p>
<pre><code>class InitializedFunctionWithYield(object):
    def __init__(self):
        # do expensive initialization
        self.start = 5

    def __call__(self, *args, **kwargs):
        # do cheap iteration
        for i in xrange(5):
            yield self.start + i

y = InitializedFunctionWithYield()

for x in y():
    print x

for x in y():
    print x
</code></pre>
<p>Alternatively, you could just make your own class that follows the iterator protocol and defines some sort of 'reset' function.</p>
<pre><code>class MyIterator(object):
    def __init__(self):
        self.reset()

    def reset(self):
        self.i = 5

    def __iter__(self):
        return self

    def next(self):
        i = self.i
        if i &gt; 0:
            self.i -= 1
            return i
        else:
            raise StopIteration()

my_iterator = MyIterator()

for x in my_iterator:
    print x

print 'resetting...'
my_iterator.reset()

for x in my_iterator:
    print x
</code></pre>
<p><a href="https://docs.python.org/2/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html#iterator-types</a>
<a href="http://anandology.com/python-practice-book/iterators.html" rel="nofollow noreferrer">http://anandology.com/python-practice-book/iterators.html</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Using a wrapper function to handle <code>StopIteration</code></h2>
<p>You could write a simple wrapper function to your generator-generating function that tracks when the generator is exhausted. It will do so using the <code>StopIteration</code> exception a generator throws when it reaches end of iteration.</p>
<pre><code>import types

def generator_wrapper(function=None, **kwargs):
    assert function is not None, "Please supply a function"
    def inner_func(function=function, **kwargs):
        generator = function(**kwargs)
        assert isinstance(generator, types.GeneratorType), "Invalid function"
        try:
            yield next(generator)
        except StopIteration:
            generator = function(**kwargs)
            yield next(generator)
    return inner_func
</code></pre>
<p>As you can spot above, when our wrapper function catches a <code>StopIteration</code> exception, it simply re-initializes the generator object (using another instance of the function call).</p>
<p>And then, assuming you define your generator-supplying function somewhere as below, you could use the Python function decorator syntax to wrap it implicitly:</p>
<pre><code>@generator_wrapper
def generator_generating_function(**kwargs):
    for item in ["a value", "another value"]
        yield item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can be done by code object. Here is the example.</p>
<pre><code>code_str="y=(a for a in [1,2,3,4])"
code1=compile(code_str,'&lt;string&gt;','single')
exec(code1)
for i in y: print i
</code></pre>
<p>1
2
3
4</p>
<pre><code>for i in y: print i


exec(code1)
for i in y: print i
</code></pre>
<p>1
2
3
4</p>
</div>
<span class="comment-copy">If you're wondering about what it will do in this case, it's essentially caching elements in the list. So you might as well use <code>y = list(y)</code> with the rest of your code unchanged.</span>
<span class="comment-copy">tee() will create a list internally to store the data, so that's the same as I did in my answer.</span>
<span class="comment-copy">Look at implmentation(<a href="http://docs.python.org/library/itertools.html#itertools.tee" rel="nofollow noreferrer">docs.python.org/library/itertools.html#itertools.tee</a>) - this uses lazy load strategy, so items to list copied only on demand</span>
<span class="comment-copy">@Dewfy: Which will be <b>slower</b> since all items will have to be copied anyway.</span>
<span class="comment-copy">yes, list() is better in this case. tee is only useful if you are not consuming the entire list</span>
<span class="comment-copy">May be exists a way to save signature of function call? FunctionWithYield, param1, param2...</span>
<span class="comment-copy">@Dewfy: sure: def call_my_func(): return FunctionWithYield(param1, param2)</span>
<span class="comment-copy">Surely this is the correct answer to the question.</span>
<span class="comment-copy">@Dewfy What do you mean by "save signature of function call"? Could you please explain? Do you mean saving the parameters passed to the generator?</span>
<span class="comment-copy">@АндрейБеньковский - See the answer of <b>nosklo</b></span>
<span class="comment-copy">where is actually code for generation?</span>
<span class="comment-copy">@Dewfy In the first snippet, the generator is on the line "squares = ...". Generator expressions behave the same way as calling a function that uses yield, and I only used one because it's less verbose than writing a function with yield for such a short example. In the second snippet, I've used FunctionWithYield as the generator_factory, so it will be called whenever <b>iter</b> is called, which is whenever I write "for x in y".</span>
<span class="comment-copy">Good solution. This actually makes a stateless iterable object instead of a stateful iterator object, so the object itself is reusable. Especially useful if you want to pass an iterable object to a function and that function will use the object multiple times.</span>
<span class="comment-copy">what about infinite generators?</span>
<span class="comment-copy">Speed is not the only consideration; <code>list()</code> puts the whole iterable into memory</span>
<span class="comment-copy">@Chris_Rands So will <code>tee()</code> if one iterator consumes all the values - that's how <code>tee</code> works.</span>
<span class="comment-copy">@Dewfy: for infinite generators, use Aaron Digulla's solution (ExpensiveSetup function returning the precious data.)</span>
<span class="comment-copy">Thank you for the answer, but main point of question was avoid <b>creation</b> , invoking inner function just hides creation - you create it twice</span>
<span class="comment-copy">You just delegate problem to wrapper. Assume that expensive initialization creates generator. My question was about how to reset inside your <code>__call__</code></span>
<span class="comment-copy">Added a second example in response to your comment. This essentially a custom generator with a reset method.</span>
<span class="comment-copy">Would this work the same as <code>itertools.cycle()</code>?</span>
<span class="comment-copy">well, actually resetting generator was needed to avoid twice execution of initialization code. Your approach (1) executes initialization twice anyway, (2) it involves <code>exec</code> that slightly non-recommended for such simple case.</span>
