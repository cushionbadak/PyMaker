<div class="post-text" itemprop="text">
<p>What is the <strong>easiest</strong> way to generate a random hash (MD5) in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>A md5-hash is just a 128-bit value, so if you want a random one:</p>
<pre><code>import random

hash = random.getrandbits(128)

print("hash value: %032x" % hash)
</code></pre>
<p>I don't really see the point, though. Maybe you should elaborate why you need this...</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are looking for is a universal unique identifier.Then the module UUID in python is what you are looking for.</p>
<pre><code>import uuid
uuid.uuid4().hex
</code></pre>
<p>UUID4 gives you a random unique identifier that has the same length as a md5 sum. Hex will represent is as an hex string instead of returning a uuid object. </p>
<p><a href="http://docs.python.org/2/library/uuid.html">http://docs.python.org/2/library/uuid.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This works for both python 2.x and 3.x</p>
<pre><code>import os
import binascii
print(binascii.hexlify(os.urandom(16)))
'4a4d443679ed46f7514ad6dbe3733c3d'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/secrets.html" rel="noreferrer"><code>secrets</code> module</a> was added in Python 3.6+. It provides cryptographically secure random values with a single call. The functions take an optional <code>nbytes</code> argument, default is 32 (bytes * 8 bits = 256-bit tokens). MD5 has 128-bit hashes, so provide 16 for "MD5-like" tokens.</p>
<pre><code>&gt;&gt;&gt; import secrets

&gt;&gt;&gt; secrets.token_hex(nbytes=16)
'17adbcf543e851aa9216acc9d7206b96'

&gt;&gt;&gt; secrets.token_urlsafe(16)
'X7NYIolv893DXLunTzeTIQ'

&gt;&gt;&gt; secrets.token_bytes(128 // 8)
b'\x0b\xdcA\xc0.\x0e\x87\x9b`\x93\\Ev\x1a|u'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yet another approach. You won't have to format an int to get it.</p>
<pre><code>import random
import string

def random_string(length):
    pool = string.letters + string.digits
    return ''.join(random.choice(pool) for i in xrange(length))
</code></pre>
<p>Gives you flexibility on the length of the string.</p>
<pre><code>&gt;&gt;&gt; random_string(64)
'XTgDkdxHK7seEbNDDUim9gUBFiheRLRgg7HyP18j6BZU5Sa7AXiCHP1NEIxuL2s0'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach to this specific question:</p>
<pre><code>import random, string

def random_md5like_hash():
    available_chars= string.hexdigits[:16]
    return ''.join(
        random.choice(available_chars)
        for dummy in xrange(32))
</code></pre>
<p>I'm not saying it's faster or preferable to any other answer; just that it's <em>another</em> approach :)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import uuid
from md5 import md5

print md5(str(uuid.uuid4())).hexdigest()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os, hashlib
hashlib.md5(os.urandom(32)).hexdigest()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from hashlib import md5
plaintext=input('Enter the plaintext data to be hashed: ') # Must be a string
ciphertext=md5(plaintext.encode('utf-8').hexdigest()
print(ciphertext)
</code></pre>
<p>It should also be noted that MD5 is a very weak hash function, also collisions have been found (two different plaintext values result in the same hash)
Just use a random value for <code>plaintext</code>.</p>
</div>
<span class="comment-copy">Random as in for anything? Or for an object?  If you just want a random MD5, just pick some numbers.</span>
<span class="comment-copy">I am renaming files before uploading and want a filename like this: timestamp_randommd5.extension  Cheers!</span>
<span class="comment-copy">You could just rename them to timestamp_randomnumber.ext. There really isn't a reason why md5(randomnumber) would be any better than randomnumber itself.</span>
<span class="comment-copy">best answer for Python 3 is the last one <code>import uuid; uuid.uuid().hex</code> <a href="http://stackoverflow.com/a/20060712/3218806">stackoverflow.com/a/20060712/3218806</a></span>
<span class="comment-copy">+1 - surely this is better than my answer, can be used also like this: hex(random.getrandbits(128))[2:-1] this gives you same output as md5 hexdigest method.</span>
<span class="comment-copy">the random.seed() call is useless, more or less.</span>
<span class="comment-copy">I would've used os.urandom because wanting an MD5 hash might mean wanting a secure one.</span>
<span class="comment-copy">Nice use of the hex format specification to print. +1</span>
<span class="comment-copy">Here's how to do it with <code>os.urandom</code>: <code>''.join('%02x' % ord(x) for x in os.urandom(16))</code></span>
<span class="comment-copy">urandom docs @ <a href="http://docs.python.org/2/library/os.html#os.urandom" rel="nofollow noreferrer">docs.python.org/2/library/os.html#os.urandom</a></span>
<span class="comment-copy">This way of hexadecimal encoding doesn't work in Python 3 anymore.</span>
<span class="comment-copy">thanks. this is the best way to make a random hash key.</span>
<span class="comment-copy">works for 2.x and 3.x: binascii.hexlify(os.urandom(16))</span>
<span class="comment-copy">I would probably change string.letters to 'abcdf' to reflect hexadecimal digits. But great solution!</span>
<span class="comment-copy">Requiring user input doesn't help with the "easiest" aspect of the original question...</span>
