<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35817/how-to-escape-os-system-calls">How to escape os.system() calls?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>Is there anything in the Python standard library that will properly parse/unparse strings for using in shell commands? I'm looking for the python analog to perl's <code>String::ShellQuote::shell_quote</code>:</p>
<pre><code>$ print String::ShellQuote::shell_quote("hello", "stack", "overflow's", "quite", "cool")
hello stack 'overflow'\''s' quite cool
</code></pre>
<p>And, even more importantly, something which will work in the reverse direction (take a string and decompose it into a list).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>pipes.quote</code> is now <code>shlex.quote</code> in python 3.
It is easy enough to use that piece of code.</p>
<p><a href="https://github.com/python/cpython/blob/master/Lib/shlex.py#L281" rel="noreferrer">https://github.com/python/cpython/blob/master/Lib/shlex.py#L281</a></p>
<p>That version handles zero-length argument correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like </p>
<pre><code>try:  # py3
    from shlex import quote
except ImportError:  # py2
    from pipes import quote

quote("hello stack overflow's quite cool")
&gt;&gt;&gt; '"hello stack overflow\'s quite cool"'
</code></pre>
<p>gets me far enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm pretty sure that pipes.quote is broken, and should not be used, because it does not handle zero-length arguments correctly:</p>
<pre><code>&gt;&gt;&gt; from pipes import quote
&gt;&gt;&gt; args = ['arg1', '', 'arg3']
&gt;&gt;&gt; print 'mycommand %s' % (' '.join(quote(arg) for arg in args))
mycommand arg1  arg3
</code></pre>
<p>I believe the result should be something like</p>
<pre><code>mycommand arg1 '' arg3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For shell quoting, this works:  I've rigorously tested it on Posix.  [I'm assuming that the <code>list2cmdline</code> function supplied by Python works as advertised on Windows]</p>
<pre><code># shell.py
import os
if os.name == 'nt':
    from subprocess import list2cmdline

    def quote(arg):
        return list2cmdline([arg])[0]
else:
    import re
    _quote_pos = re.compile('(?=[^-0-9a-zA-Z_./\n])')

    def quote(arg):
        r"""
        &gt;&gt;&gt; quote('\t')
        '\\\t'
        &gt;&gt;&gt; quote('foo bar')
        'foo\\ bar'
        """
        # This is the logic emacs uses
        if arg:
            return _quote_pos.sub('\\\\', arg).replace('\n',"'\n'")
        else:
            return "''"

    def list2cmdline(args):
        return ' '.join([ quote(a) for a in args ])
</code></pre>
<p>The tests are <a href="https://github.com/boostpro/bbot/blob/43cf775186d9f895f69992e800612e1c52a08a49/test/util_shell_tests.py" rel="noreferrer">here</a>, if anyone cares.</p>
</div>
<div class="post-text" itemprop="text">
<p>To unquote, try  <code>shlex.split()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You should never have to shell quote. The correct way to do a command is to not do shell quoting and instead use <a href="http://docs.python.org/3.0/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">subprocess.call</a> or <a href="http://docs.python.org/3.0/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">subprocess.Popen</a>, and pass a list of unquoted arguments. This is immune to shell expansion.</p>
<p>i.e.</p>
<pre><code>subprocess.Popen(['echo', '"', '$foo'], shell=False)
</code></pre>
<p>If you want to unquote shell quoted data, you can use <a href="http://docs.python.org/3.0/library/shlex.html?highlight=shlex#shlex.shlex" rel="nofollow noreferrer">shlex.shlex</a> like this:</p>
<pre><code>list(shlex.shlex("hello stack 'overflow'\''s' quite cool"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The standard library module subprocess has the list2cmdline function which does this, albeit according to <a href="http://msdn.microsoft.com/en-us/library/17w5ykft.aspx" rel="nofollow">Microsoft rules</a> so I am not sure how reliable it works in Unix-like environments for more complicated command lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>quote</code>function is available for quite some time (Python 2.7?) -- the major drawback is it moved from <code>pipe</code> module to <code>shlex</code> between 3.2 and 3.3.</p>
<p>You have to be prepared to handle both cases while importing that function:</p>
<pre><code>try:
    from shlex import quote
except ImportError:
    from pipes import quote
</code></pre>
</div>
<span class="comment-copy">Sure, <code>subprocess</code> is swell for actually starting processes in python, but for code generation, this was just what I needed! +1</span>
<span class="comment-copy">In Python 3, this is <code>shlex.quote</code>.</span>
<span class="comment-copy">On windows, <code>subprocess.list2cmdline</code> is more accurate. <code>pipes.quote</code> always uses single quotes, which is not acceptable in Windows command line environment.</span>
<span class="comment-copy">@asmeurer but pipes isn't deprecated in python3</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/pipes.html#pipes.quote" rel="nofollow noreferrer"><i>"Deprecated since version 2.7"</i></a> <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><i>"It is finally exposed publicly in Python 3.3 as the quote function in the shlex module."</i></a></span>
<span class="comment-copy">fair enough.  but then we need a better solution :-)</span>
<span class="comment-copy"><code>print 'mycommand %s' % (' '.join(quote(arg) or "''" for arg in args))</code> ?</span>
<span class="comment-copy">At John's initiative, <a href="http://bugs.python.org/issue7476" rel="nofollow noreferrer">this was fixed in Python 2.6.</a></span>
<span class="comment-copy">... but the use of <code>join</code> defeats most of the purpose of using <code>quote</code> here!</span>
<span class="comment-copy">Why do you say that?</span>
<span class="comment-copy">Counter example: string to be quoted contains <code>"\xC3\xA9"</code>, which is an Ã© in UTF-8, and thus not uncommon in filenames. Code above puts backslashes in front of both characters, which  is incorrect. <code>pipes.quote</code> will put it in single quotes.</span>
<span class="comment-copy">What if I need to pass a command (that requires escaping) for ssh to execute once it reaches the other side?</span>
<span class="comment-copy">This is not a helpful answer (well it answers one half my question, so it's half helpful...).  There are are any number of occasions when you need to shell quote -- Mike Boers gives just one great example (in fact, that's the one I'm running into)</span>
<span class="comment-copy">actually even worse, the given example breaks:  (Pdb) list(shlex.shlex("hello stack 'overflow'\''s' quite cool")) *** Error in argument: '(shlex.shlex("hello stack \'overflow\'\\\'\'s\' quite cool"))'</span>
<span class="comment-copy">From subprocess documentation: If shell is True, it is recommended to pass args as a string rather than as a sequence. ... This includes, for example, quoting or backslash escaping filenames with spaces in them. - That's just another example where you need quoting.</span>
<span class="comment-copy">My use case for shell quoting is: my Python program is using subprocess.Popen() as suggested, but when it does I'd like it to print something to the console which can be directly cut-and-pasted into a shell, for manual debugging should the command fail.</span>
