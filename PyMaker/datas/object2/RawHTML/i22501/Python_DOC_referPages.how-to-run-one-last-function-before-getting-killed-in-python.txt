<div class="post-text" itemprop="text">
<p>Is there any way to run one last command before a running Python script is stopped by being killed by some other script, keyboard interrupt etc.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time

try:
    time.sleep(10)
finally:
    print "clean up"

clean up
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
KeyboardInterrupt
</code></pre>
<p>If you need to catch other OS level interrupts, look at the signal module:</p>
<p><a href="http://docs.python.org/library/signal.html" rel="noreferrer">http://docs.python.org/library/signal.html</a></p>
<h3>Signal Example</h3>
<pre><code>from signal import *
import sys, time

def clean(*args):
    print "clean me"
    sys.exit(0)

for sig in (SIGABRT, SIGBREAK, SIGILL, SIGINT, SIGSEGV, SIGTERM):
    signal(sig, clean)

time.sleep(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>atexit</code> module. With it, you can register a function which will be called at program termination. An example from here: <a href="http://docs.python.org/library/atexit.html" rel="nofollow noreferrer">http://docs.python.org/library/atexit.html</a></p>
<pre><code>try:
    _count = int(open("/tmp/counter").read())
except IOError:
    _count = 0

def incrcounter(n):
    global _count
    _count = _count + n

def savecounter():
    open("/tmp/counter", "w").write("%d" % _count)

import atexit
atexit.register(savecounter)
</code></pre>
<p>You can also pass positional and keyword parameters to the function you want to call at program termination.</p>
<p>Note that there are a few circumstances listed in the docs in which your handler won't be called:</p>
<blockquote>
<p><strong>Note</strong>: The functions registered via this module are not called when the program is killed by a signal not handled by Python, when a Python fatal internal error is detected, or when <a href="https://docs.python.org/3/library/os.html#os._exit" rel="nofollow noreferrer"><code>os._exit()</code></a> is called.</p>
</blockquote>
<p>As such, you may want to also register a signal handler.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import signal
import sys
import time

def cleanup(*args):
    print 'Exiting'
    sys.exit(0)

signal.signal(signal.SIGINT, cleanup)
signal.signal(signal.SIGTERM, cleanup)
while True:
    time.sleep(60)  # less busy loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>WIth apologies to 'Unknown' for taking their answer and correcting it as though it was my own answer, but my edits were rejected.</p>
<p>The approved answer contains an error that will cause a segfault.</p>
<p>You cannot use sys.exit() in a signal handler, but you can use os._exit so that it becomes:</p>
<pre><code>from signal import *
import os, time

def clean(*args):
    print "clean me"
    os._exit(0)

for sig in (SIGABRT, SIGINT, SIGTERM):
    signal(sig, clean)

time.sleep(10)
</code></pre>
<p>SIGBREAK may be used if the target platform is Windows.</p>
<p>Depending on the use case and the need to cleanup in the event of fatal errors - you may add SIGSEGV and SIGILL but generally this is not advised since the program state may be such that you create an infinite loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the atexit module to register a function that will be called at the end.</p>
<pre><code>import atexit
atexit.register(some_function)
</code></pre>
</div>
<span class="comment-copy">I have no idea why you chose that particular set, but SIGBREAK doesn't work on non-Windows Pythons, and SIGILL are SIGSEGV are probably not signals that you want to be trapping without a really good reason.</span>
<span class="comment-copy">@Dave its just an example. And its for dan to decide which interrupts he wants to trap.</span>
<span class="comment-copy">Is <code>sys.exit(0)</code> necessary? I thought python exits after your function finished anyway. Did you use that to show it is a handled termination?</span>
<span class="comment-copy">-1 for the weird and arbitrary set of signals, as noted by @Dave. Using <code>SIGTERM</code> would make sense (since its purpose is to instruct processes to exit), and using <code>SIGUSR1</code> would be defensible (since it's for user-defined actions), but having stuff like <code>SIGILL</code> in there is just illogical. Also, this only partially answers the question; it won't handle the case where the script is killed by a keyboard interrupt, which was a possibility included in the question.</span>
<span class="comment-copy">Note: although exit() is not async-safe in C, the wording of the Python documentation suggests to me that Python takes care of this problem with some special signal-handling code.</span>
<span class="comment-copy">I've tested this code on Windows XP, and an error is actually raised because time.sleep() was interrupted. It works on GNU/Linux.</span>
<span class="comment-copy"><i>"The approved answer contains an error that will cause a segfault."</i> - what's the error? The use of <code>sys.exit()</code>? It doesn't segfault for me; what do I need to do to see this segfault? <i>"You cannot use sys.exit() in a signal handler"</i> - it seems to work for me; what's your basis for this? A cautious -1 for now since the key claims in this answer are unsubstantiated.</span>
<span class="comment-copy">The crash is not guarenteed, basically the behaviour of raising the exception from sys.exit() is undefined. Various behaviours seen include crashing (<a href="https://stackoverflow.com/questions/24789269/python-core-dump-on-sys-exit-from-signal-handler" title="python core dump on sys exit from signal handler">stackoverflow.com/questions/24789269/…</a>) or the exit call simply appearing not to work at all (<a href="https://stackoverflow.com/questions/29980078/sys-exit1-does-not-exit-when-calling-from-the-signal-handler" title="sys exit1 does not exit when calling from the signal handler">stackoverflow.com/questions/29980078/…</a>). See also <a href="https://thushw.blogspot.co.uk/2010/12/python-dont-use-sysexit-inside-signal.html" rel="nofollow noreferrer">thushw.blogspot.co.uk/2010/12/…</a></span>
<span class="comment-copy">You also didn't acknowledge my comments on SIGSEGV/SIGILL which are also incorrect in the accepted answer.</span>
<span class="comment-copy">@StuartM it seems likely that the problem in that blog post was caused by the bare <code>except:</code> catching the <code>SystemExit</code>. Please could you expand on what you mean by "the behaviour of raising the exception from sys.exit() is undefined"? I'm not sure I understand you.</span>
<span class="comment-copy">only works for SIGINT</span>
<span class="comment-copy">Doesn`t work on keyboard interrupt.</span>
