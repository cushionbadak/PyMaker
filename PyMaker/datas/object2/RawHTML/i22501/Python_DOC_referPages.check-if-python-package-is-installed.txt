<div class="post-text" itemprop="text">
<p>What's a good way to check if a package is installed while within a Python script? I know it's easy from the interpreter, but I need to do it within a script. </p>
<p>I guess I could check if there's a directory on the system that's created during the installation, but I feel like there's a better way. I'm trying to make sure the Skype4Py package is installed, and if not I'll install it.</p>
<p>My ideas for accomplishing the check</p>
<ul>
<li>check for a directory in the typical install path</li>
<li>try to import the package and if an exception is throw, then install package</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you mean a python script, just do something like this:</p>
<pre><code>try:
 import mymodule
except ImportError, e:
 pass # module doesn't exist, deal with it.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Updated answer</h2>
<p>A better way of doing this is:</p>
<pre><code>import subprocess
import sys

reqs = subprocess.check_output([sys.executable, '-m', 'pip', 'freeze'])
installed_packages = [r.decode().split('==')[0] for r in reqs.split()]
</code></pre>
<p>The result:</p>
<pre><code>print(installed_packages)

[
    "Django",
    "six",
    "requests",
]
</code></pre>
<p>Check if <code>requests</code> is installed:</p>
<pre><code>if 'requests' in installed_packages:
    # Do something
</code></pre>
<p>Why this way? Sometimes you have app name collisions. Importing from the app namespace doesn't give you the full picture of what's installed on the system.</p>
<h2>Old answer</h2>
<p>A better way of doing this is:</p>
<pre><code>import pip
installed_packages = pip.get_installed_distributions()
</code></pre>
<p>For pip&gt;=10.x use:</p>
<pre><code>from pip._internal.utils.misc import get_installed_distributions
</code></pre>
<p>Why this way? Sometimes you have app name collisions. Importing from the app namespace doesn't give you the full picture of what's installed on the system.</p>
<p>As a result, you get a list of <code>pkg_resources.Distribution</code> objects. See the following as an example:</p>
<pre><code>print installed_packages
[
    "Django 1.6.4 (/path-to-your-env/lib/python2.7/site-packages)",
    "six 1.6.1 (/path-to-your-env/lib/python2.7/site-packages)",
    "requests 2.5.0 (/path-to-your-env/lib/python2.7/site-packages)",
]
</code></pre>
<p>Make a list of it:</p>
<pre><code>flat_installed_packages = [package.project_name for package in installed_packages]

[
    "Django",
    "six",
    "requests",
]
</code></pre>
<p>Check if <code>requests</code> is installed:</p>
<pre><code>if 'requests' in flat_installed_packages:
    # Do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to have the check from the terminal, you can run</p>
<pre><code>pip3 show package_name
</code></pre>
<p>and if nothing is returned, the package is not installed.</p>
<p>If perhaps you want to automate this check, so that for example you can install it if missing, you can have the following in your bash script:</p>
<pre><code>pip3 show package_name 1&gt;/dev/null #pip for Python 2
if [ $? == 0 ]; then
   echo "Installed" #Replace with your actions
else
   echo "Not Installed" #Replace with your actions, 'pip3 install --upgrade package_name' ?
fi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.3, you can use the <a href="https://docs.python.org/3/library/importlib.html#importlib.util.find_spec" rel="noreferrer">find_spec()</a> method</p>
<pre><code>import importlib.util
import sys

# For illustrative purposes.
package_name = 'pandas'

spec = importlib.util.find_spec(package_name)
if spec is None:
    print(package_name +" is not installed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an extension of <a href="https://stackoverflow.com/a/46303144/3393574">this answer</a>:</p>
<p>For Python 2.*, <code>pip show &lt;package_name&gt;</code> will perform the same task.</p>
<p>For example <code>pip show numpy</code> will return the following or alike:</p>
<pre><code>Name: numpy
Version: 1.11.1
Summary: NumPy: array processing for numbers, strings, records, and objects.
Home-page: http://www.numpy.org
Author: NumPy Developers
Author-email: numpy-discussion@scipy.org
License: BSD
Location: /home/***/anaconda2/lib/python2.7/site-packages
Requires: 
Required-by: smop, pandas, tables, spectrum, seaborn, patsy, odo, numpy-stl, numba, nfft, netCDF4, MDAnalysis, matplotlib, h5py, GridDataFormats, dynd, datashape, Bottleneck, blaze, astropy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the pkg_resources module from setuptools. For example:</p>
<pre><code>import pkg_resources

package_name = 'cool_package'
try:
    cool_package_dist_info = pkg_resources.get_distribution(package_name)
except pkg_resources.DistributionNotFound:
    print('{} not installed'.format(package_name))
else:
    print(cool_package_dist_info)
</code></pre>
<p>Note that there is a difference between python module and a python package. A package can contain multiple modules and module's names might not match the package name. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to add some thoughts/findings of mine to this topic.
I'm writing a script that checks all requirements for a custom made program. There are many checks with python modules too. </p>
<p>There's a little issue with the </p>
<pre><code>try:
   import ..
except:
   ..
</code></pre>
<p>solution. 
In my case one of the python modules called <code>python-nmap</code>, but you import it with <code>import nmap</code> and as you see the names mismatch. Therefore the test with the above solution returns a False result, and it also imports the module on hit, but maybe no need to use a lot of memory for a simple test/check.</p>
<p>I also found that </p>
<pre><code>import pip
installed_packages = pip.get_installed_distributions()
</code></pre>
<p><strong><code>installed_packages</code> will have</strong> only the packages has been <strong>installed with pip</strong>.
On my system <code>pip freeze</code> returns over <code>40</code> python modules, while <code>installed_packages</code> has only <code>1</code>, the one I installed manually (python-nmap).</p>
<p>Another solution below that I know it <strong>may not relevant to the question</strong>, but I think it's a good practice to <strong>keep the test function separate</strong> from the one that performs the install it might be useful for some.</p>
<p>The solution that worked for me. It based on this answer <a href="https://stackoverflow.com/a/14050282/8006845">How to check if a python module exists without importing it</a></p>
<pre><code>from imp import find_module

def checkPythonmod(mod):
    try:
        op = find_module(mod)
        return True
    except ImportError:
        return False
</code></pre>
<p>NOTE: this solution can't find the module by the name <code>python-nmap</code> too, I have to use <code>nmap</code> instead (easy to live with) but in this case the module won't be loaded to the memory whatsoever.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you'd like your script to install missing packages and continue, you could do something like this (on example of 'krbV' module in 'python-krbV' package):</p>
<pre><code>import pip
import sys

for m, pkg in [('krbV', 'python-krbV')]:
    try:
        setattr(sys.modules[__name__], m, __import__(m))
    except ImportError:
        pip.main(['install', pkg])
        setattr(sys.modules[__name__], m, __import__(m))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick way is to use <strong>python</strong> command line tool.
Simply type <code>import &lt;your module name&gt;</code>
You see an error if module is missing.</p>
<pre><code>$ python
Python 2.7.6 (default, Jun 22 2015, 17:58:13) 
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import jocker
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named jocker
$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Go option #2.  If <code>ImportError</code> is thrown, then the package is not installed (or not in <code>sys.path</code>).</p>
</div>
<span class="comment-copy">What kind of script?</span>
<span class="comment-copy">Writing a Python script to automate starting Skype and using tcpdump to collect packet data so I can analyze how the network functions when you have a conference call.</span>
<span class="comment-copy">Thanks, much appreciated.</span>
<span class="comment-copy">Warning: I just had a situation today where the ImportError was thrown within the module itself. This should not happen often, but just be aware that this check is not reliable in all cases.</span>
<span class="comment-copy">This doesn't only <i>check</i>; it also imports it; see also <a href="http://stackoverflow.com/questions/14050281/how-to-check-if-a-python-module-exists-without-importing-it" title="how to check if a python module exists without importing it">stackoverflow.com/questions/14050281/â€¦</a></span>
<span class="comment-copy">Yes. That's generally what you want. You can use the import tools module to do a more sophisticated check, but most of the time the only reason you care if a module is installed is because you want to use it.</span>
<span class="comment-copy">As mentioned in the other answer, it is possible that the error is not caught. Therefore I think this should be the accepted answer.</span>
<span class="comment-copy"><code>AttributeError: module 'pip' has no attribute 'get_installed_distributions'</code></span>
<span class="comment-copy">Probably it was take out from most recent version of pip. Which version are you using? I think in 8.x it still worked.</span>
<span class="comment-copy">I'm using 10.0.1 here. pip's own manual also advises <i>against</i> importing <code>pip</code> or using any of it's methods: "As noted previously, pip is a command line program. While it is implemented in Python, and so is available from your Python code via import pip, you must not use pip's internal APIs in this way."</span>
<span class="comment-copy">See the updated answer.</span>
<span class="comment-copy">This seems great but it always returns "Not Installed" for me. Why?</span>
<span class="comment-copy">Clean and simple, best answer here. This needs more upvotes.</span>
