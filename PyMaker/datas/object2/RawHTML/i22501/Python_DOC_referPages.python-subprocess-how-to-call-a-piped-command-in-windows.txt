<div class="post-text" itemprop="text">
<p>How do I run this command with subprocess?</p>
<p>I tried:</p>
<pre><code>proc = subprocess.Popen(
    '''ECHO bosco|"C:\Program Files\GNU\GnuPG\gpg.exe" --batch --passphrase-fd 0 --output "c:\docume~1\usi\locals~1\temp\tmptlbxka.txt" --decrypt "test.txt.gpg"''',
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
   stderr=subprocess.STDOUT,
)
stdout_value, stderr_value = proc.communicate()
</code></pre>
<p>but got:</p>
<pre><code>Traceback (most recent call last):
...
  File "C:\Python24\lib\subprocess.py", line 542, in __init__
    errread, errwrite)
  File "C:\Python24\lib\subprocess.py", line 706, in _execute_child
    startupinfo)
WindowsError: [Errno 2] The system cannot find the file specified
</code></pre>
<p>Things I've noticed:</p>
<ol>
<li>Running the command on the windows
console works fine. </li>
<li>If I remove the
ECHO bosco| part, it runs fine the
the popen call above.  So I think
this problem is related to echo or
|.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>First and foremost, you don't actually need a pipe; you are just sending input. You can use <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.communicate" rel="noreferrer">subprocess.communicate</a> for that.</p>
<p>Secondly, don't specify the command as a string; that's messy as soon as filenames with spaces are involved.</p>
<p>Thirdly, if you really wanted to execute a piped command, just call the shell. On Windows, I believe it's <code>cmd /c program name arguments | further stuff</code>.</p>
<p>Finally, single back slashes can be dangerous: <code>"\p"</code> is <code>'\\p'</code>, but <code>'\n'</code> is a new line. Use <a href="http://docs.python.org/library/os.path.html#os.path.join" rel="noreferrer">os.path.join()</a> or <a href="http://docs.python.org/library/os.html#os.sep" rel="noreferrer">os.sep</a> or, if specified outside python, just a forward slash.</p>
<pre><code>proc = subprocess.Popen(
    ['C:/Program Files/GNU/GnuPG/gpg.exe',
    '--batch', '--passphrase-fd', '0',
    '--output ', 'c:/docume~1/usi/locals~1/temp/tmptlbxka.txt',
    '--decrypt', 'test.txt.gpg',],
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
   stderr=subprocess.STDOUT,
)
stdout_value, stderr_value = proc.communicate('bosco')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were right, the ECHO is the problem. Without the shell=True option the ECHO command cannot be found.</p>
<p>This fails with the error you saw:</p>
<pre><code>subprocess.call(["ECHO", "Ni"])
</code></pre>
<p>This passes: prints Ni and a 0</p>
<pre><code>subprocess.call(["ECHO", "Ni"], shell=True)
</code></pre>
</div>
<span class="comment-copy">Does that full line actually work when you run it in the Windows console?  WindowsError suggests that the problem is not your Python code, but the actual command to be executed.</span>
<span class="comment-copy">Yes, it runs from the windows dos console.</span>
<span class="comment-copy">Thanks, that worked!</span>
<span class="comment-copy">actually, shouldn't this be <code>subprocess.call("ECHO Ni", shell=True)</code> ? and <code>subprocess.call(["ECHO", "Ni"])</code> works fine for me.</span>
<span class="comment-copy">You can use either but according to the <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Popen Constructor</a>  docs: “Unless otherwise stated, it is recommended to pass args as a sequence.”</span>
