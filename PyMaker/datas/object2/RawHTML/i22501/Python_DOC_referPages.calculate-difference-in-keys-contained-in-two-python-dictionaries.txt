<div class="post-text" itemprop="text">
<p>Suppose I have two Python dictionaries - <code>dictA</code> and <code>dictB</code>. I need to find out if there are any keys which are present in <code>dictB</code> but not in <code>dictA</code>. What is the fastest way to go about it?</p>
<p>Should I convert the dictionary keys into a set and then go about?</p>
<p>Interested in knowing your thoughts... </p>
<hr/>
<p>Thanks for your responses.</p>
<p>Apologies for not stating my question properly.
My scenario is like this - I have a <code>dictA</code> which can be the same as <code>dictB</code> or may have some keys missing as compared to <code>dictB</code> or else the value of some keys might be different which has to be set to that of <code>dictA</code> key's value.</p>
<p>Problem is the dictionary has no standard and can have values which can be dict of dict.</p>
<p>Say</p>
<pre><code>dictA={'key1':a, 'key2':b, 'key3':{'key11':cc, 'key12':dd}, 'key4':{'key111':{....}}}
dictB={'key1':a, 'key2:':newb, 'key3':{'key11':cc, 'key12':newdd, 'key13':ee}.......
</code></pre>
<p>So 'key2' value has to be reset to the new value and 'key13' has to be added inside the dict.
The key value does not have a fixed format. It can be a simple value or a dict or a dict of dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use set operations on the keys:</p>
<pre><code>diff = set(dictb.keys()) - set(dicta.keys())
</code></pre>
<p>Here is a class to find all the possibilities: what was added, what was removed, which key-value pairs are the same, and which key-value pairs are changed.</p>
<pre><code>class DictDiffer(object):
    """
    Calculate the difference between two dictionaries as:
    (1) items added
    (2) items removed
    (3) keys same in both but changed values
    (4) keys same in both and unchanged values
    """
    def __init__(self, current_dict, past_dict):
        self.current_dict, self.past_dict = current_dict, past_dict
        self.set_current, self.set_past = set(current_dict.keys()), set(past_dict.keys())
        self.intersect = self.set_current.intersection(self.set_past)
    def added(self):
        return self.set_current - self.intersect 
    def removed(self):
        return self.set_past - self.intersect 
    def changed(self):
        return set(o for o in self.intersect if self.past_dict[o] != self.current_dict[o])
    def unchanged(self):
        return set(o for o in self.intersect if self.past_dict[o] == self.current_dict[o])
</code></pre>
<p>Here is some sample output:</p>
<pre><code>&gt;&gt;&gt; a = {'a': 1, 'b': 1, 'c': 0}
&gt;&gt;&gt; b = {'a': 1, 'b': 2, 'd': 0}
&gt;&gt;&gt; d = DictDiffer(b, a)
&gt;&gt;&gt; print "Added:", d.added()
Added: set(['d'])
&gt;&gt;&gt; print "Removed:", d.removed()
Removed: set(['c'])
&gt;&gt;&gt; print "Changed:", d.changed()
Changed: set(['b'])
&gt;&gt;&gt; print "Unchanged:", d.unchanged()
Unchanged: set(['a'])
</code></pre>
<p>Available as a github repo:
<a href="https://github.com/hughdbrown/dictdiffer" rel="noreferrer">https://github.com/hughdbrown/dictdiffer</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In case you want the difference recursively, I have written a package for python:
<a href="https://github.com/seperman/deepdiff">https://github.com/seperman/deepdiff</a></p>
<h2>Installation</h2>
<p>Install from PyPi:</p>
<pre><code>pip install deepdiff
</code></pre>
<h2>Example usage</h2>
<p>Importing</p>
<pre><code>&gt;&gt;&gt; from deepdiff import DeepDiff
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; from __future__ import print_function # In case running on Python 2
</code></pre>
<p>Same object returns empty</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3}
&gt;&gt;&gt; t2 = t1
&gt;&gt;&gt; print(DeepDiff(t1, t2))
{}
</code></pre>
<p>Type of an item has changed</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3}
&gt;&gt;&gt; t2 = {1:1, 2:"2", 3:3}
&gt;&gt;&gt; pprint(DeepDiff(t1, t2), indent=2)
{ 'type_changes': { 'root[2]': { 'newtype': &lt;class 'str'&gt;,
                                 'newvalue': '2',
                                 'oldtype': &lt;class 'int'&gt;,
                                 'oldvalue': 2}}}
</code></pre>
<p>Value of an item has changed</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3}
&gt;&gt;&gt; t2 = {1:1, 2:4, 3:3}
&gt;&gt;&gt; pprint(DeepDiff(t1, t2), indent=2)
{'values_changed': {'root[2]': {'newvalue': 4, 'oldvalue': 2}}}
</code></pre>
<p>Item added and/or removed</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:4}
&gt;&gt;&gt; t2 = {1:1, 2:4, 3:3, 5:5, 6:6}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff)
{'dic_item_added': ['root[5]', 'root[6]'],
 'dic_item_removed': ['root[4]'],
 'values_changed': {'root[2]': {'newvalue': 4, 'oldvalue': 2}}}
</code></pre>
<p>String difference</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world"}}
&gt;&gt;&gt; t2 = {1:1, 2:4, 3:3, 4:{"a":"hello", "b":"world!"}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'values_changed': { 'root[2]': {'newvalue': 4, 'oldvalue': 2},
                      "root[4]['b']": { 'newvalue': 'world!',
                                        'oldvalue': 'world'}}}
</code></pre>
<p>String difference 2</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world!\nGoodbye!\n1\n2\nEnd"}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world\n1\n2\nEnd"}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'values_changed': { "root[4]['b']": { 'diff': '--- \n'
                                                '+++ \n'
                                                '@@ -1,5 +1,4 @@\n'
                                                '-world!\n'
                                                '-Goodbye!\n'
                                                '+world\n'
                                                ' 1\n'
                                                ' 2\n'
                                                ' End',
                                        'newvalue': 'world\n1\n2\nEnd',
                                        'oldvalue': 'world!\n'
                                                    'Goodbye!\n'
                                                    '1\n'
                                                    '2\n'
                                                    'End'}}}

&gt;&gt;&gt; 
&gt;&gt;&gt; print (ddiff['values_changed']["root[4]['b']"]["diff"])
--- 
+++ 
@@ -1,5 +1,4 @@
-world!
-Goodbye!
+world
 1
 2
 End
</code></pre>
<p>Type change</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world\n\n\nEnd"}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'type_changes': { "root[4]['b']": { 'newtype': &lt;class 'str'&gt;,
                                      'newvalue': 'world\n\n\nEnd',
                                      'oldtype': &lt;class 'list'&gt;,
                                      'oldvalue': [1, 2, 3]}}}
</code></pre>
<p>List difference</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3, 4]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{'iterable_item_removed': {"root[4]['b'][2]": 3, "root[4]['b'][3]": 4}}
</code></pre>
<p>List difference 2:</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 3, 2, 3]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'iterable_item_added': {"root[4]['b'][3]": 3},
  'values_changed': { "root[4]['b'][1]": {'newvalue': 3, 'oldvalue': 2},
                      "root[4]['b'][2]": {'newvalue': 2, 'oldvalue': 3}}}
</code></pre>
<p>List difference ignoring order or duplicates: (with the same dictionaries as above)</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 3, 2, 3]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2, ignore_order=True)
&gt;&gt;&gt; print (ddiff)
{}
</code></pre>
<p>List that contains dictionary:</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, {1:1, 2:2}]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, {1:3}]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'dic_item_removed': ["root[4]['b'][2][2]"],
  'values_changed': {"root[4]['b'][2][1]": {'newvalue': 3, 'oldvalue': 1}}}
</code></pre>
<p>Sets:</p>
<pre><code>&gt;&gt;&gt; t1 = {1, 2, 8}
&gt;&gt;&gt; t2 = {1, 2, 3, 5}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (DeepDiff(t1, t2))
{'set_item_added': ['root[3]', 'root[5]'], 'set_item_removed': ['root[8]']}
</code></pre>
<p>Named Tuples:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; t1 = Point(x=11, y=22)
&gt;&gt;&gt; t2 = Point(x=11, y=23)
&gt;&gt;&gt; pprint (DeepDiff(t1, t2))
{'values_changed': {'root.y': {'newvalue': 23, 'oldvalue': 22}}}
</code></pre>
<p>Custom objects:</p>
<pre><code>&gt;&gt;&gt; class ClassA(object):
...     a = 1
...     def __init__(self, b):
...         self.b = b
... 
&gt;&gt;&gt; t1 = ClassA(1)
&gt;&gt;&gt; t2 = ClassA(2)
&gt;&gt;&gt; 
&gt;&gt;&gt; pprint(DeepDiff(t1, t2))
{'values_changed': {'root.b': {'newvalue': 2, 'oldvalue': 1}}}
</code></pre>
<p>Object attribute added:</p>
<pre><code>&gt;&gt;&gt; t2.c = "new attribute"
&gt;&gt;&gt; pprint(DeepDiff(t1, t2))
{'attribute_added': ['root.c'],
 'values_changed': {'root.b': {'newvalue': 2, 'oldvalue': 1}}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>not sure whether its "fast" or not, but normally, one can do this</p>
<pre><code>dicta = {"a":1,"b":2,"c":3,"d":4}
dictb = {"a":1,"d":2}
for key in dicta.keys():
    if not key in dictb:
        print key
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As Alex Martelli wrote, if you simply want to check if any key in B is not in A, <code>any(True  for k in dictB if k not in dictA)</code> would be the way to go.</p>
<p>To find the keys that are missing:</p>
<pre><code>diff = set(dictB)-set(dictA) #sets

C:\Dokumente und Einstellungen\thc&gt;python -m timeit -s "dictA =    
dict(zip(range(1000),range
(1000))); dictB = dict(zip(range(0,2000,2),range(1000)))" "diff=set(dictB)-set(dictA)"
10000 loops, best of 3: 107 usec per loop

diff = [ k for k in dictB if k not in dictA ] #lc

C:\Dokumente und Einstellungen\thc&gt;python -m timeit -s "dictA = 
dict(zip(range(1000),range
(1000))); dictB = dict(zip(range(0,2000,2),range(1000)))" "diff=[ k for k in dictB if
k not in dictA ]"
10000 loops, best of 3: 95.9 usec per loop
</code></pre>
<p>So those two solutions are pretty much the same speed. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you really mean exactly what you say (that you only need to find out IF "there are any keys" in B and not in A, not WHICH ONES might those be if any), the fastest way should be:</p>
<pre><code>if any(True for k in dictB if k not in dictA): ...
</code></pre>
<p>If you actually need to find out WHICH KEYS, if any, are in B and not in A, and not just "IF" there are such keys, then existing answers are quite appropriate (but I do suggest more precision in future questions if that's indeed what you mean;-).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">Use <code>set()</code></a>:</p>
<pre><code>set(dictA.keys()).intersection(dictB.keys())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is an other <a href="https://stackoverflow.com/questions/6632244/difference-in-a-dict">question in stackoverflow about this argument</a> and i have to admit that there is a simple solution explained: the <a href="https://pypi.python.org/pypi/datadiff" rel="nofollow noreferrer">datadiff library</a> of python helps printing the difference between two dictionaries. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/1165552/908494">The top answer by hughdbrown</a> suggests using set difference, which is definitely the best approach:</p>
<pre><code>diff = set(dictb.keys()) - set(dicta.keys())
</code></pre>
<p>The problem with this code is that it builds two lists just to create two sets, so it's wasting 4N time and 2N space. It's also a bit more complicated than it needs to be.</p>
<p>Usually, this is not a big deal, but if it is:</p>
<pre><code>diff = dictb.keys() - dicta
</code></pre>
<ul>
<li>You don't need to convert the right dict to a set; set difference takes any iterable (and a dict is an iterable of its keys).</li>
<li>You also don't need to convert the left dict to a set, because <a href="https://docs.python.org/3/library/collections.abc.html" rel="noreferrer">anything that complies with <code>collections.abc.Mapping</code> has a <code>KeysView</code> that acts like a <code>Set</code></a>.</li>
</ul>
<h3>Python 2</h3>
<p>In Python 2, <code>keys()</code> returns a list of the keys, not a <code>KeysView</code>. So you have to ask for <code>viewkeys()</code> directly.</p>
<pre><code>diff = dictb.viewkeys() - dicta
</code></pre>
<p>For dual-version 2.7/3.x code, you're hopefully using <code>six</code> or something similar, so you can use <a href="http://six.readthedocs.io/#six.viewkeys" rel="noreferrer"><code>six.viewkeys(dictb)</code></a>:</p>
<pre><code>diff = six.viewkeys(dictb) - dicta
</code></pre>
<p>In 2.4-2.6, there is no <code>KeysView</code>. But you can at least cut the cost from 4N to N by building your left set directly out of an iterator, instead of building a list first:</p>
<pre><code>diff = set(dictb) - dicta
</code></pre>
<h3>Items</h3>
<blockquote>
<p>I have a dictA which can be the same as dictB or may have some keys missing as compared to dictB or else the value of some keys might be different</p>
</blockquote>
<p>So you really don't need to compare the keys, but the items. An <code>ItemsView</code> is only a <code>Set</code> if the values are hashable, like strings. If they are, it's easy:</p>
<pre><code>diff = dictb.items() - dicta.items()
</code></pre>
<h3>Recursive diff</h3>
<p>Although the question isn't directly asking for a recursive diff, some of the example values are dicts, and it appears the expected output does recursively diff them. There are already multiple answers here showing how to do that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way that will work, allows for keys that evaluate to <code>False</code>, and still uses a generator expression to fall out early if possible. It's not exceptionally pretty though.</p>
<pre><code>any(map(lambda x: True, (k for k in b if k not in a)))
</code></pre>
<p><strong>EDIT:</strong></p>
<p>THC4k posted a reply to my comment on another answer.  Here's a better, prettier way to do the above:</p>
<pre><code>any(True for k in b if k not in a)
</code></pre>
<p>Not sure how that never crossed my mind...</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an old question and asks a little bit less than what I needed so this answer actually solves more than this question asks. The answers in this question helped me solve the following:</p>
<ol>
<li>(asked) Record differences between two dictionaries</li>
<li>Merge differences from #1 into base dictionary</li>
<li>(asked) Merge differences between two dictionaries (treat dictionary #2 as if it were a diff dictionary)</li>
<li>Try to detect item movements as well as changes</li>
<li>(asked) Do all of this recursively</li>
</ol>
<p>All this combined with JSON makes for a pretty powerful configuration storage support.</p>
<p>The solution (<a href="https://github.com/velis74/dictdiff" rel="nofollow">also on github</a>):</p>
<pre><code>from collections import OrderedDict
from pprint import pprint


class izipDestinationMatching(object):
    __slots__ = ("attr", "value", "index")

    def __init__(self, attr, value, index):
        self.attr, self.value, self.index = attr, value, index

    def __repr__(self):
        return "izip_destination_matching: found match by '%s' = '%s' @ %d" % (self.attr, self.value, self.index)


def izip_destination(a, b, attrs, addMarker=True):
    """
    Returns zipped lists, but final size is equal to b with (if shorter) a padded with nulls
    Additionally also tries to find item reallocations by searching child dicts (if they are dicts) for attribute, listed in attrs)
    When addMarker == False (patching), final size will be the longer of a, b
    """
    for idx, item in enumerate(b):
        try:
            attr = next((x for x in attrs if x in item), None)  # See if the item has any of the ID attributes
            match, matchIdx = next(((orgItm, idx) for idx, orgItm in enumerate(a) if attr in orgItm and orgItm[attr] == item[attr]), (None, None)) if attr else (None, None)
            if match and matchIdx != idx and addMarker: item[izipDestinationMatching] = izipDestinationMatching(attr, item[attr], matchIdx)
        except:
            match = None
        yield (match if match else a[idx] if len(a) &gt; idx else None), item
    if not addMarker and len(a) &gt; len(b):
        for item in a[len(b) - len(a):]:
            yield item, item


def dictdiff(a, b, searchAttrs=[]):
    """
    returns a dictionary which represents difference from a to b
    the return dict is as short as possible:
      equal items are removed
      added / changed items are listed
      removed items are listed with value=None
    Also processes list values where the resulting list size will match that of b.
    It can also search said list items (that are dicts) for identity values to detect changed positions.
      In case such identity value is found, it is kept so that it can be re-found during the merge phase
    @param a: original dict
    @param b: new dict
    @param searchAttrs: list of strings (keys to search for in sub-dicts)
    @return: dict / list / whatever input is
    """
    if not (isinstance(a, dict) and isinstance(b, dict)):
        if isinstance(a, list) and isinstance(b, list):
            return [dictdiff(v1, v2, searchAttrs) for v1, v2 in izip_destination(a, b, searchAttrs)]
        return b
    res = OrderedDict()
    if izipDestinationMatching in b:
        keepKey = b[izipDestinationMatching].attr
        del b[izipDestinationMatching]
    else:
        keepKey = izipDestinationMatching
    for key in sorted(set(a.keys() + b.keys())):
        v1 = a.get(key, None)
        v2 = b.get(key, None)
        if keepKey == key or v1 != v2: res[key] = dictdiff(v1, v2, searchAttrs)
    if len(res) &lt;= 1: res = dict(res)  # This is only here for pretty print (OrderedDict doesn't pprint nicely)
    return res


def dictmerge(a, b, searchAttrs=[]):
    """
    Returns a dictionary which merges differences recorded in b to base dictionary a
    Also processes list values where the resulting list size will match that of a
    It can also search said list items (that are dicts) for identity values to detect changed positions
    @param a: original dict
    @param b: diff dict to patch into a
    @param searchAttrs: list of strings (keys to search for in sub-dicts)
    @return: dict / list / whatever input is
    """
    if not (isinstance(a, dict) and isinstance(b, dict)):
        if isinstance(a, list) and isinstance(b, list):
            return [dictmerge(v1, v2, searchAttrs) for v1, v2 in izip_destination(a, b, searchAttrs, False)]
        return b
    res = OrderedDict()
    for key in sorted(set(a.keys() + b.keys())):
        v1 = a.get(key, None)
        v2 = b.get(key, None)
        #print "processing", key, v1, v2, key not in b, dictmerge(v1, v2)
        if v2 is not None: res[key] = dictmerge(v1, v2, searchAttrs)
        elif key not in b: res[key] = v1
    if len(res) &lt;= 1: res = dict(res)  # This is only here for pretty print (OrderedDict doesn't pprint nicely)
    return res
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what about standart (compare FULL Object)</p>
<p>PyDev-&gt;new PyDev Module-&gt;Module: unittest</p>
<pre><code>import unittest


class Test(unittest.TestCase):


    def testName(self):
        obj1 = {1:1, 2:2}
        obj2 = {1:1, 2:2}
        self.maxDiff = None # sometimes is usefull
        self.assertDictEqual(d1, d2)

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']

    unittest.main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If on Python ≥ 2.7:</p>
<pre><code># update different values in dictB
# I would assume only dictA should be updated,
# but the question specifies otherwise

for k in dictA.viewkeys() &amp; dictB.viewkeys():
    if dictA[k] != dictB[k]:
        dictB[k]= dictA[k]

# add missing keys to dictA

dictA.update( (k,dictB[k]) for k in dictB.viewkeys() - dictA.viewkeys() )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution for deep comparing 2 dictionaries keys:</p>
<pre><code>def compareDictKeys(dict1, dict2):
  if type(dict1) != dict or type(dict2) != dict:
      return False

  keys1, keys2 = dict1.keys(), dict2.keys()
  diff = set(keys1) - set(keys2) or set(keys2) - set(keys1)

  if not diff:
      for key in keys1:
          if (type(dict1[key]) == dict or type(dict2[key]) == dict) and not compareDictKeys(dict1[key], dict2[key]):
              diff = True
              break

  return not diff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here's a solution that can compare more than two dicts:</p>
<pre><code>def diff_dict(dicts, default=None):
    diff_dict = {}
    # add 'list()' around 'd.keys()' for python 3 compatibility
    for k in set(sum([d.keys() for d in dicts], [])):
        # we can just use "values = [d.get(k, default) ..." below if 
        # we don't care that d1[k]=default and d2[k]=missing will
        # be treated as equal
        if any(k not in d for d in dicts):
            diff_dict[k] = [d.get(k, default) for d in dicts]
        else:
            values = [d[k] for d in dicts]
            if any(v != values[0] for v in values):
                diff_dict[k] = values
    return diff_dict
</code></pre>
<p>usage example:</p>
<pre><code>import matplotlib.pyplot as plt
diff_dict([plt.rcParams, plt.rcParamsDefault, plt.matplotlib.rcParamsOrig])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My recipe of symmetric difference between two dictionaries:</p>
<pre><code>def find_dict_diffs(dict1, dict2):
    unequal_keys = []
    unequal_keys.extend(set(dict1.keys()).symmetric_difference(set(dict2.keys())))
    for k in dict1.keys():
        if dict1.get(k, 'N\A') != dict2.get(k, 'N\A'):
            unequal_keys.append(k)
    if unequal_keys:
        print 'param', 'dict1\t', 'dict2'
        for k in set(unequal_keys):
            print str(k)+'\t'+dict1.get(k, 'N\A')+'\t '+dict2.get(k, 'N\A')
    else:
        print 'Dicts are equal'

dict1 = {1:'a', 2:'b', 3:'c', 4:'d', 5:'e'}
dict2 = {1:'b', 2:'a', 3:'c', 4:'d', 6:'f'}

find_dict_diffs(dict1, dict2)
</code></pre>
<p>And result is:</p>
<pre><code>param   dict1   dict2
1       a       b
2       b       a
5       e       N\A
6       N\A     f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in other answers, unittest produces some nice output for comparing dicts, but in this example we don't want to have to build a whole test first.</p>
<p>Scraping the unittest source, it looks like you can get a fair solution with just this:</p>
<pre><code>import difflib
import pprint

def diff_dicts(a, b):
    if a == b:
        return ''
    return '\n'.join(
        difflib.ndiff(pprint.pformat(a, width=30).splitlines(),
                      pprint.pformat(b, width=30).splitlines())
    )
</code></pre>
<p>so</p>
<pre><code>dictA = dict(zip(range(7), map(ord, 'python')))
dictB = {0: 112, 1: 'spam', 2: [1,2,3], 3: 104, 4: 111}
print diff_dicts(dictA, dictB)
</code></pre>
<p>Results in:</p>
<pre><code>{0: 112,
-  1: 121,
-  2: 116,
+  1: 'spam',
+  2: [1, 2, 3],
   3: 104,
-  4: 111,
?        ^

+  4: 111}
?        ^

-  5: 110}
</code></pre>
<p>Where:</p>
<ul>
<li>'-' indicates key/values in the first but not second dict</li>
<li>'+' indicates key/values in the second but not the first dict</li>
</ul>
<p>Like in unittest, the only caveat is that the final mapping can be thought to be a diff, due to the trailing comma/bracket.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Maxx has an excellent answer, use the <code>unittest</code> tools provided by Python:</p>
<pre><code>import unittest


class Test(unittest.TestCase):
    def runTest(self):
        pass

    def testDict(self, d1, d2, maxDiff=None):
        self.maxDiff = maxDiff
        self.assertDictEqual(d1, d2)
</code></pre>
<p>Then, anywhere in your code you can call:</p>
<pre><code>try:
    Test().testDict(dict1, dict2)
except Exception, e:
    print e
</code></pre>
<p>The resulting output looks like the output from <code>diff</code>, pretty-printing the dictionaries with <code>+</code> or <code>-</code> prepending each line that is different.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if it is still relevant but I came across this problem, my situation i just needed to return a dictionary of the changes for all nested dictionaries etc etc. Could not find a good solution out there but I did end up <a href="https://github.com/jmickle/jmickle/blob/master/recurse_dicts.py" rel="nofollow">writing a simple function to do this</a>. Hope this helps, </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a built-in solution for a full comparison with arbitrary dict structures, @Maxx's answer is a good start.</p>
<pre><code>import unittest

test = unittest.TestCase()
test.assertEqual(dictA, dictB)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on ghostdog74's answer,</p>
<pre><code>dicta = {"a":1,"d":2}
dictb = {"a":5,"d":2}

for value in dicta.values():
    if not value in dictb.values():
        print value
</code></pre>
<p>will print differ value of dicta</p>
</div>
<div class="post-text" itemprop="text">
<p>Below i created two dictionaries. I need to return the key and value differences between them. I am stuck here. I am not sure which way is correct. I need to know how to get the key value difference. I want to first check if they are the same and if they are not to print key -value differences. I dont want to use deep diff. I dont know to compare if they are the same ?</p>
<pre><code>num_list = [1,2]
val_list = [0,1]
dict1 = dict(zip(num_list,val_list))
print dict1

num_list2= [1,2]
val_list2 = [0,6]
dict2 = dict(zip(num_list2,val_list2))
print dict2
if dict1 == dict2 
</code></pre>
<p>output : currently 
{1: 0, 2: 1}
{1: 0, 2: 6}</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this to find de intersection, the keys that is in both dictionarie, if you want the keys not found on second dictionarie, just use the <strong>not in</strong>...</p>
<pre><code>intersect = filter(lambda x, dictB=dictB.keys(): x in dictB, dictA.keys())
</code></pre>
</div>
<span class="comment-copy">Smart solution, thanks! I've made it work with nested dicts by checking whether changed or unchanged values are dict instances and calling a recursive function to check them again using your class.</span>
<span class="comment-copy">@AJJ I'd love to see that implementation.</span>
<span class="comment-copy">How about a <code>def update(self, new_dict): self.__init__(new_dict, self.current_dict)</code> or the like so you can do a rolling comparison</span>
<span class="comment-copy">Some remarks : the <code>DictDiffer</code> class is a stateless class and could be a function. The <code>changed</code> and <code>unchanged</code> values could be computed in the same loop. This two functions could return a <code>list</code> instead of a <code>set</code> which is certainly less expensive. For deep comparison, you can take a look at the Unit testing framework: <a href="http://docs.python.org/2/library/unittest.html" rel="nofollow noreferrer">docs.python.org/2/library/unittest.html</a>, just follow the <code>assertDictEqual</code> method in the source code.</span>
<span class="comment-copy">FWIW, <code>set(dictb)</code> is probably better than <code>set(dictb.keys())</code>.</span>
<span class="comment-copy">Thank you for this! Just implemented on my project, works great!</span>
<span class="comment-copy">@gtalarico Happy to help! Thanks for the kind words!</span>
<span class="comment-copy">You have to swap <code>dicta</code> and <code>dictb</code> since he wants to know those keys of <code>dictb</code> that are not in <code>dicta</code>.</span>
<span class="comment-copy"><code>for key in dicta.keys():</code> =&gt; <code>for key in dicta:</code></span>
<span class="comment-copy">This makes more sense: <code>any(k not in dictA for k in dictB)</code></span>
<span class="comment-copy"><code>set(d)</code> already returns just the keys, so you can do <code>set(da).intersection(db)</code></span>
<span class="comment-copy">the definite answer from 2018.</span>
<span class="comment-copy">@Jean-FrançoisFabre Of course the Python 2.4-2.6 stuff is already pretty irrelevant in 2018…</span>
<span class="comment-copy">some people are stuck with 2.6</span>
<span class="comment-copy">this is the same answer as earlier Alex Martelli answer</span>
<span class="comment-copy">It is now.  When I posted it (nine years ago, lol) the earlier answer was <code>any(k for k in dictB if k not in dictA)</code> which is not the same thing (for falsey keys).  Check the edit history/timestamps.</span>
<span class="comment-copy">This is wonderful if you have a huge nested dictionary and you want to compare every thing inside and see the differences. Thanks!</span>
<span class="comment-copy">It would be preferable to have the smallest amount of code that fixes the OP's problem actually in the answer, instead of a link. If the link dies or moves, your answer becomes useless.</span>
<span class="comment-copy">You apparently can't instantiate a test class like that, which is too bad.</span>
