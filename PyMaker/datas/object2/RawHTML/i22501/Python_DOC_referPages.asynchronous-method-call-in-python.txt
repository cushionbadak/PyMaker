<div class="post-text" itemprop="text">
<p>I was wondering if there's any library for asynchronous method calls in <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a>. It would be great if you could do something like</p>
<pre><code>@async
def longComputation():
    &lt;code&gt;


token = longComputation()
token.registerCallback(callback_function)
# alternative, polling
while not token.finished():
    doSomethingElse()
    if token.finished():
        result = token.result()
</code></pre>
<p>Or to call a non-async routine asynchronously</p>
<pre><code>def longComputation()
    &lt;code&gt;

token = asynccall(longComputation())
</code></pre>
<p>It would be great to have a more refined strategy as native in the language core. Was this considered?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/library/multiprocessing.html#module-multiprocessing" rel="noreferrer">multiprocessing module</a> added in Python 2.6. You can use pools of processes and then get results asynchronously with: </p>
<pre><code>apply_async(func[, args[, kwds[, callback]]])
</code></pre>
<p>E.g.:</p>
<pre><code>from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    pool = Pool(processes=1)              # Start a worker processes.
    result = pool.apply_async(f, [10], callback) # Evaluate "f(10)" asynchronously calling callback when finished.
</code></pre>
<p>This is only one alternative. This module provides lots of facilities to achieve what you want. Also it will be really easy to make a decorator from this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like:</p>
<pre><code>import threading

thr = threading.Thread(target=foo, args=(), kwargs={})
thr.start() # Will run "foo"
....
thr.is_alive() # Will return whether foo is running currently
....
thr.join() # Will wait till "foo" is done
</code></pre>
<p>See the documentation at <a href="https://docs.python.org/2/library/threading.html#module-threading" rel="noreferrer">https://docs.python.org/2/library/threading.html#module-threading</a> for more details; this code should work for Python 3 as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.5, you can use enhanced generators for async functions.</p>
<pre><code>import asyncio
import datetime
</code></pre>
<p><strong>Enhanced generator syntax:</strong></p>
<pre><code>@asyncio.coroutine
def display_date(loop):
    end_time = loop.time() + 5.0
    while True:
        print(datetime.datetime.now())
        if (loop.time() + 1.0) &gt;= end_time:
            break
        yield from asyncio.sleep(1)


loop = asyncio.get_event_loop()
# Blocking call which returns when the display_date() coroutine is done
loop.run_until_complete(display_date(loop))
loop.close()
</code></pre>
<p><strong>New <code>async/await</code> syntax:</strong></p>
<pre><code>async def display_date(loop):
    end_time = loop.time() + 5.0
    while True:
        print(datetime.datetime.now())
        if (loop.time() + 1.0) &gt;= end_time:
            break
        await asyncio.sleep(1)


loop = asyncio.get_event_loop()
# Blocking call which returns when the display_date() coroutine is done
loop.run_until_complete(display_date(loop))
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not in the language core, but a very mature library that does what you want is <a href="http://twistedmatrix.com/" rel="noreferrer">Twisted</a>. It introduces the Deferred object, which you can attach callbacks or error handlers ("errbacks") to. A Deferred is basically a "promise" that a function will have a result eventually.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can implement a decorator to make your functions asynchronous, though that's a bit tricky. The <code>multiprocessing</code> module is full of little quirks and seemingly arbitrary restrictions â€“ all the more reason to encapsulate it behind a friendly interface, though.</p>
<pre><code>from inspect import getmodule
from multiprocessing import Pool


def async(decorated):
    r'''Wraps a top-level function around an asynchronous dispatcher.

        when the decorated function is called, a task is submitted to a
        process pool, and a future object is returned, providing access to an
        eventual return value.

        The future object has a blocking get() method to access the task
        result: it will return immediately if the job is already done, or block
        until it completes.

        This decorator won't work on methods, due to limitations in Python's
        pickling machinery (in principle methods could be made pickleable, but
        good luck on that).
    '''
    # Keeps the original function visible from the module global namespace,
    # under a name consistent to its __name__ attribute. This is necessary for
    # the multiprocessing pickling machinery to work properly.
    module = getmodule(decorated)
    decorated.__name__ += '_original'
    setattr(module, decorated.__name__, decorated)

    def send(*args, **opts):
        return async.pool.apply_async(decorated, args, opts)

    return send
</code></pre>
<p>The code below illustrates usage of the decorator:</p>
<pre><code>@async
def printsum(uid, values):
    summed = 0
    for value in values:
        summed += value

    print("Worker %i: sum value is %i" % (uid, summed))

    return (uid, summed)


if __name__ == '__main__':
    from random import sample

    # The process pool must be created inside __main__.
    async.pool = Pool(4)

    p = range(0, 1000)
    results = []
    for i in range(4):
        result = printsum(i, sample(p, 100))
        results.append(result)

    for result in results:
        print("Worker %i: sum value is %i" % result.get())
</code></pre>
<p>In a real-world case I would ellaborate a bit more on the decorator, providing some way to turn it off for debugging (while keeping the future interface in place), or maybe a facility for dealing with exceptions; but I think this demonstrates the principle well enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just</p>
<pre><code>import threading, time

def f():
    print "f started"
    time.sleep(3)
    print "f finished"

threading.Thread(target=f).start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution is:</p>
<pre><code>import threading

class TimeoutError(RuntimeError):
    pass

class AsyncCall(object):
    def __init__(self, fnc, callback = None):
        self.Callable = fnc
        self.Callback = callback

    def __call__(self, *args, **kwargs):
        self.Thread = threading.Thread(target = self.run, name = self.Callable.__name__, args = args, kwargs = kwargs)
        self.Thread.start()
        return self

    def wait(self, timeout = None):
        self.Thread.join(timeout)
        if self.Thread.isAlive():
            raise TimeoutError()
        else:
            return self.Result

    def run(self, *args, **kwargs):
        self.Result = self.Callable(*args, **kwargs)
        if self.Callback:
            self.Callback(self.Result)

class AsyncMethod(object):
    def __init__(self, fnc, callback=None):
        self.Callable = fnc
        self.Callback = callback

    def __call__(self, *args, **kwargs):
        return AsyncCall(self.Callable, self.Callback)(*args, **kwargs)

def Async(fnc = None, callback = None):
    if fnc == None:
        def AddAsyncCallback(fnc):
            return AsyncMethod(fnc, callback)
        return AddAsyncCallback
    else:
        return AsyncMethod(fnc, callback)
</code></pre>
<p>And works exactly as requested:</p>
<pre><code>@Async
def fnc():
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use eventlet. It lets you write what appears to be synchronous code, but have it operate asynchronously over the network.</p>
<p>Here's an example of a super minimal crawler:</p>
<pre><code>urls = ["http://www.google.com/intl/en_ALL/images/logo.gif",
     "https://wiki.secondlife.com/w/images/secondlife.jpg",
     "http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif"]

import eventlet
from eventlet.green import urllib2

def fetch(url):

  return urllib2.urlopen(url).read()

pool = eventlet.GreenPool()

for body in pool.imap(fetch, urls):
  print "got body", len(body)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this works for me, you can then call the function, and it will dispatch itself onto a new thread.</p>
<pre><code>from thread import start_new_thread

def dowork(asynchronous=True):
    if asynchronous:
        args = (False)
        start_new_thread(dowork,args) #Call itself on a new thread.
    else:
        while True:
            #do something...
            time.sleep(60) #sleep for a minute
    return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is there any reason not to use threads? You can use the <code>threading</code> class.
Instead of <code>finished()</code> function use the <code>isAlive()</code>. The <code>result()</code> function could <code>join()</code> the thread and retrieve the result. And, if you can, override the <code>run()</code> and <code>__init__</code> functions to call the function specified in the constructor and save the value somewhere to the instance of the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer" title="concurrent futures">concurrent.futures</a> (added in Python 3.2).</p>
<pre><code>import time
from concurrent.futures import ThreadPoolExecutor


def long_computation(duration):
    for x in range(0, duration):
        print(x)
        time.sleep(1)
    return duration * 2


print('Use polling')
with ThreadPoolExecutor(max_workers=1) as executor:
    future = executor.submit(long_computation, 5)
    while not future.done():
        print('waiting...')
        time.sleep(0.5)

    print(future.result())

print('Use callback')
executor = ThreadPoolExecutor(max_workers=1)
future = executor.submit(long_computation, 5)
future.add_done_callback(lambda f: print(f.result()))

print('waiting for callback')

executor.shutdown(False)  # non-blocking

print('shutdown invoked')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use process. If you want to run it forever use while (like networking) in you function:</p>
<pre><code>from multiprocessing import Process
def foo():
    while 1:
        # Do something

p = Process(target = foo)
p.start()
</code></pre>
<p>if you just want to run it one time, do like that:</p>
<pre><code>from multiprocessing import Process
def foo():
    # Do something

p = Process(target = foo)
p.start()
p.join()
</code></pre>
</div>
<span class="comment-copy">As of Python 3.4: <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio.html</a> (there's a backport for 3.3 and shiny new <code>async</code> and <code>await</code> syntax from 3.5).</span>
<span class="comment-copy">There is no callback mechanism, but you can aggregate results in a dictionary and it is based on Python's multiprocessing module. I am sure you can add one more parameter to the decorated function as a callback. <a href="https://github.com/alex-sherman/deco" rel="nofollow noreferrer">github.com/alex-sherman/deco</a>.</span>
<span class="comment-copy">To get started.  Official Documentation - <a href="https://docs.python.org/3/library/concurrency.html" rel="nofollow noreferrer">docs.python.org/3/library/concurrency.html</a></span>
<span class="comment-copy">Lucas S., your example does not work, unfortunately. The callback function never gets called.</span>
<span class="comment-copy">It's probably worth bearing in mind that this spawns separate processes rather than separate thread within a process. This might some implications.</span>
<span class="comment-copy">This works:  result = pool.apply_async(f, [10], callback=finish)</span>
<span class="comment-copy">To truly do anything asynchronously in python requires using the multiprocessing module to spawn new processes. Merely creating new threads is still at the mercy of the Global Interpreter Lock which prevents a python process from doing multiple things at once.</span>
<span class="comment-copy">In case you don't want to spawn a new process while using this solution - change the import to <code>from multiprocessing.dummy import Pool</code>. multiprocessing.dummy has the exact same behavior implemented over threads instead of processes</span>
<span class="comment-copy">This really should be the top answer. I tried all the others and had issues. This is so simple.</span>
<span class="comment-copy">yeah, if you just need to do things asynchronously, why dont just use thread? after all thread is light weight than process</span>
<span class="comment-copy">Important note: the standard implementation (CPython) of threads won't help with compute-bound tasks, due to the "Global Interpreter Lock". See the library doc:<a href="http://docs.python.org/2/library/threading.html#module-threading" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">Is using thread.join() really asynchronous? What if you want to not block a thread (e.g. a UI thread) and not use a ton of resources doing a while loop on it?</span>
<span class="comment-copy">@Mgamerz join is synchronous. You you could let the thread to put the results of the execution in some queue, or/and call a callback. Otherwise you do not know when it's done (if at all).</span>
<span class="comment-copy">@carnabeh, could you extend that example to include the OP's "def longComputation()" function? Most example use "await asyncio.sleep(1)", but if the longComputation() returns, say, a double, you can't just use "await longComputation()".</span>
<span class="comment-copy">In particular, look at twisted.internet.defer (<a href="http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.defer.html" rel="nofollow noreferrer">twistedmatrix.com/documents/8.2.0/api/â€¦</a>).</span>
<span class="comment-copy">This should be the best answer. I love how it can return value. Not like the thread which merely running asynchronously.</span>
<span class="comment-copy">Exactly what I needed, thanks</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/33453581/2284570">This doesnâ€™t apply to paramiko</a></span>
<span class="comment-copy">If it's a computationally expensive function threading won't get you anything (it will probably make things slower actually) since a Python process is limited to one CPU core due to the GIL.</span>
<span class="comment-copy">@Kurt, while that's true, the OP didn't mention that performance was his concern.  There are other reasons for wanting asynchronous behaviour...</span>
<span class="comment-copy">Threads in python aren't great when you want to have the option of killing the asynchronous method call, since only the main thread in python receives signals.</span>
<span class="comment-copy">This is a very great answer, as it is the only one here that gives the possibility of a threadpool with callbacks</span>
