<div class="post-text" itemprop="text">
<p>The problem:</p>
<pre><code>&gt;&gt;&gt; a = dict(a=1,b=2    )
&gt;&gt;&gt; b = dict(    b=3,c=2)

&gt;&gt;&gt; c = ???

c = {'a': 1, 'b': 5, 'c': 2}
</code></pre>
<p>So, the idea is two add to dictionaries by int/float values in the shortest form.
Here's one solution that I've devised, but I don't like it, cause it's long:</p>
<pre><code>c = dict([(i,a.get(i,0) + b.get(i,0)) for i in set(a.keys()+b.keys())])
</code></pre>
<p>I think there must be a shorter/concise solution (maybe something to do with reduce and operator module? itertools?)... Any ideas?</p>
<hr/>
<p>Update: I'm really hoping to find something more elegant like "reduce(operator.add, key = itemgetter(0), a+b)". (Obviously that isn't real code, but you should get the idea). But it seems that may be a dream.</p>
<hr/>
<p>Update: Still loking for more concise solutions. Maybe groupby can help?
The solution I've come up with using "reduce"/"groupby" isn't actually concise:</p>
<pre><code>from itertools import groupby
from operator import itemgetter,add

c = dict( [(i,reduce(add,map(itemgetter(1), v))) \
              for i,v in groupby(sorted(a.items()+b.items()), itemgetter(0))] )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Easiest to just use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a></p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = dict(a=1,b=2    )
&gt;&gt;&gt; b = dict(    b=3,c=2)
&gt;&gt;&gt; Counter(a)+Counter(b)
Counter({'b': 5, 'c': 2, 'a': 1})
&gt;&gt;&gt; dict(Counter({'b': 5, 'c': 2, 'a': 1}))
{'a': 1, 'c': 2, 'b': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>solving not in terms of "length" but performance, I'd do the following:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def d_sum(a, b):
        d = defaultdict(int, a)
        for k, v in b.items():
            d[k] += v
        return dict(d)
&gt;&gt;&gt; a = {'a': 1, 'b': 2}
&gt;&gt;&gt; b = {'c': 2, 'b': 3}
&gt;&gt;&gt; d_sum(a, b)
{'a': 1, 'c': 2, 'b': 5}
</code></pre>
<p>it's also py3k-compatible, unlike your original code.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my first impression, I will write:</p>
<pre><code>&gt;&gt;&gt; c = a.copy()
&gt;&gt;&gt; for k in b: c[k] = c.get(k, 0) + b[k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want short code, you're there.</p>
<p>If you want clean code, inherit from Ber's <code>defaultdict</code> and overload <code>__add__</code>:</p>
<pre><code>from collections import defaultdict

class summable(defaultdict):
    def __add__(self, rhs):
        new = summable()
        for i in (self.keys() + rhs.keys()):
            new[i] = self.get(i, 0) + rhs.get(i, 0)
        return new

a = summable(int, a=1, b=2)
b = summable(int, b=3, c=4)
c = a + b
print c
</code></pre>
<p>Gives:</p>
<pre><code>&gt;&gt;&gt; 
defaultdict(None, {'a': 1, 'c': 4, 'b': 5})
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think one line of code is already pretty short :)</p>
<p>I may become "half a line", it you use <a href="http://docs.python.org/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> and remove some unnecessary list and set creations:</p>
<pre><code>from collections import defaultdict

a = defaultdict(int, a=1, b=2)
b = defaultdict(int, b=3, c=4)

c = dict((k, a[k]+b[k]) for k in (a.keys() + b.keys()))
print c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first thing I think of is a bit more efficient and (IMO) a bit more elegant, but still too much typing.  Actually, it's about equivalent to kcwu's.</p>
<pre><code>c = reduce(lambda(d, k): [d.update({k: d.get(k, 0) + b[k]}), d][1], b, a.copy())
</code></pre>
<p>It's really a shame that <code>dict.update</code> doesn't return <code>self</code>.  I guess it's not the Python way.  If it did, the <code>[..., d][1]</code> trick would be unnecessary.</p>
<hr/>
<blockquote>
<p>Perl: "Easy things are easy, hard things are possible"</p>
</blockquote>
<pre><code>%a = (a =&gt; 1, b =&gt; 2);
%b = (b =&gt; 3, c =&gt; 2);

%c = (%a, map {$_ =&gt; $a{$_} + $b{$_}} keys %b);
</code></pre>
<blockquote>
<p>Haskell: <s>"Easy things are hard, hard things are easy"</s>
  "Hard things are easy, the impossible just happened"</p>
</blockquote>
<pre><code>import qualified Data.Map as M

a = M.fromList [('a', 1), ('b', 2)]
b = M.fromList [('b', 3), ('c', 2)]

c = M.unionWith (+) a b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Comment for <a href="https://stackoverflow.com/questions/877295/python-dict-addbyvaluedict2/877395#877395">@John Pirie's answer</a>:</h3>
<p>Here's implementation that doesn't use <code>(self.keys() + rhs.keys())</code>:</p>
<pre><code>from collections import defaultdict

class sumdict(defaultdict):
    def __add__(self, rhs):
        d = self.copy() 
        d += rhs
        return d
    __radd__ = lambda self, lhs: self + lhs
    def __iadd__(self, rhs):
        for k, v in rhs.items():
            self[k] += v
        return self

a = sumdict(int, a=1, b=2)
b = dict(b=3, c=4)
c = b + a
a += b

assert a == c == {'a': 1, 'c': 4, 'b': 5} != b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def GenerateSum():
  for k in set(a).union(b):
    yield k, a.get(k, 0) + b.get(k, 0)

e = dict(GenerateSum())
print e
</code></pre>
<p>or, with a one liner:</p>
<pre><code> print dict((k, a.get(k,0) + b.get(k,0)) for k in set(a).union(b))
</code></pre>
</div>
<span class="comment-copy">long? do you have a limited number of characters or something?</span>
<span class="comment-copy">Of course not, but I think there must be something more elegant, concise. It's pretty common problem (at least in my experience), and  I don't think this is the shortest solution.</span>
<span class="comment-copy">Not a big deal, but the use of (a,b,c) as both the dict names and the key names is confusing!</span>
<span class="comment-copy">Could you change the title of the question.  It is not very meaningful.</span>
<span class="comment-copy">+1 Simple and elegant.</span>
<span class="comment-copy">For most purposes, there's no need for that final <code>dict</code> conversion, as <code>Counter</code> is a subclass of <code>dict</code>.</span>
<span class="comment-copy">Hmm, that's news for me. What did they change in Py3k that makes my code incompatible?</span>
<span class="comment-copy"><code>a.keys() + b.keys()</code> - you would need to first convert each of them to lists for you code to work</span>
<span class="comment-copy">&gt;&gt;&gt; type(dict().keys()) == &lt;type 'list'&gt;; Isn't dict's keys() the list?</span>
<span class="comment-copy">not in py3k: it's just a dict view, as are .values() and .items()</span>
<span class="comment-copy"><code>self.keys()</code> is unnecessary here.</span>
<span class="comment-copy">@J.F., I think it is necessary, but thanks for raising the issue -- my original code snip was flat wrong.  Fixed and tested.</span>
<span class="comment-copy">@John Pirie: I've posted variant without <code>self.keys()</code> <a href="http://stackoverflow.com/questions/877295/python-dict-addbyvaluedict2/1027258#1027258" title="python dict addbyvaluedict2">stackoverflow.com/questions/877295/python-dict-addbyvaluedict2/â€¦</a></span>
<span class="comment-copy">Thanks for posting that -- I obviously have a lot more Python to learn.</span>
