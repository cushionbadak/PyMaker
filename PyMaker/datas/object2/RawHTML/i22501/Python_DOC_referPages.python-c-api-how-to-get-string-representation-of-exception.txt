<div class="post-text" itemprop="text">
<p>If I do (e.g.)</p>
<pre><code> open("/snafu/fnord")
</code></pre>
<p>in Python (and the file does not exist), I get a traceback and the message</p>
<pre><code> IOError: [Errno 2] No such file or directory: '/snafu/fnord'
</code></pre>
<p>I would like to get the above string with Python's C API (i.e., a Python interpreter embedded in a C program). I need it as a string, not output to the console.</p>
<p>With <code>PyErr_Fetch()</code> I can get the type object of the exception and the value. For the above example, the value is a tuple:</p>
<pre><code> (2, 'No such file or directory', '/snafu/fnord')
</code></pre>
<p>Is there an easy way from the information I get from <code>PyErr_Fetch()</code> to the string the Python interpreter shows? (One that does not involve to construct such strings for each exception type yourself.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that Python exceptions are printed by running "str()" on the exception instance, which will return the formatted string you're interested in. You can get this from C by calling the <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_Str" rel="nofollow noreferrer"><code>PyObject_Str()</code></a> method described here:</p>
<p><a href="https://docs.python.org/c-api/object.html" rel="nofollow noreferrer">https://docs.python.org/c-api/object.html</a></p>
<p>Good luck!</p>
<p><strong>Update:</strong> I'm a bit confused why the second element being returned to you by <code>PyErr_Fetch()</code> is a string. My guess is that you are receiving an "unnormalized exception" and need to call <code>PyErr_NormalizeException()</code> to turn that tuple into a "real" Exception that can format itself as a string like you want it to.</p>
</div>
<span class="comment-copy">The second argument is a tuple and not a string. And I already call PyErr_NormalizeException(). But PyErr_Fetch() does not return an exception object, only the exception type. So I have to create the exception object myself, I guess? And I pass the second argument of PyErr_Fetch() to the constructor?</span>
<span class="comment-copy">Oh, just checked my code and I did not call PyErr_NormalizeException() in all cases. Calling it, indeed turns the second argument into an exception object. And converting that one to a string with PyObject_Str() gets me the desired result. Thanks a lot.</span>
