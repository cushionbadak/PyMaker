<div class="post-text" itemprop="text">
<p>I would like to know how to I exit from Python without having an traceback dump on the output. </p>
<p>I still want want to be able to return an error code but I do not want to display the traceback log.</p>
<p>I want to be able to exit using <code>exit(number)</code> without trace but in case of an Exception (not an exit) I want the trace.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are presumably encountering an exception and the program is exiting because of this (with a traceback).  The first thing to do therefore is to catch that exception, before exiting cleanly (maybe with a message, example given).</p>
<p>Try something like this in your <code>main</code> routine:</p>
<pre><code>import sys, traceback

def main():
    try:
        do main program stuff here
        ....
    except KeyboardInterrupt:
        print "Shutdown requested...exiting"
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you're trying to catch all exceptions and this is catching the <code>SystemExit</code> exception raised by <code>sys.exit()</code>?</p>
<pre><code>import sys

try:
    sys.exit(1) # Or something that calls sys.exit()
except SystemExit as e:
    sys.exit(e)
except:
    # Cleanup and reraise. This will print a backtrace.
    # (Insert your cleanup code here.)
    raise
</code></pre>
<p>In general, using <code>except:</code> without naming an exception is a bad idea. You'll catch all kinds of stuff you don't want to catch -- like <code>SystemExit</code> -- and it can also mask your own programming errors. My example above is silly, unless you're doing something in terms of cleanup. You could replace it with:</p>
<pre><code>import sys
sys.exit(1) # Or something that calls sys.exit().
</code></pre>
<p>If you need to exit without raising <code>SystemExit</code>:</p>
<pre><code>import os
os._exit(1)
</code></pre>
<p>I do this, in code that runs under unittest and calls <code>fork()</code>. Unittest gets when the forked process raises <code>SystemExit</code>. This is definitely a corner case!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
sys.exit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>something like <code>import sys; sys.exit(0)</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code will not raise an exception and will exit without a traceback:</p>
<pre><code>import os
os._exit(1)
</code></pre>
<p><a href="https://stackoverflow.com/questions/173278/is-there-a-way-to-prevent-a-systemexit-exception-raised-from-sys-exit-from-bei">See this question and related answers</a> for more details. Surprised why all other answers are so overcomplicated.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's much better practise to avoid using sys.exit() and instead raise/handle exceptions to allow the program to finish cleanly.  If you want to turn off traceback, simply use:</p>
<pre><code>sys.trackbacklimit=0
</code></pre>
<p>You can set this at the top of your script to squash all traceback output, but I prefer to use it more sparingly, for example "known errors" where I want the output to be clean, e.g. in the file foo.py:</p>
<pre><code>import sys
from subprocess import *

try:
  check_call([ 'uptime', '--help' ])
except CalledProcessError:
  sys.tracebacklimit=0
  print "Process failed"
  raise

print "This message should never follow an error."
</code></pre>
<p>If CalledProcessError is caught, the output will look like this:</p>
<pre><code>[me@test01 dev]$ ./foo.py
usage: uptime [-V]
    -V    display version
Process failed
subprocess.CalledProcessError: Command '['uptime', '--help']' returned non-zero exit status 1
</code></pre>
<p>If any other error occurs, we still get the full traceback output.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the built-in python function quit() and that's it.
No need to import any library.
I'm using python 3.4</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do it this way:</p>
<pre><code>import sys

def do_my_stuff():
    pass

if __name__ == "__main__":
    try:
        do_my_stuff()
    except SystemExit, e:
        print(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about</p>
<pre><code>import sys
....
....
....
sys.exit("I am getting the heck out of here!")
</code></pre>
<p>No traceback and somehow more explicit.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># Pygame Example  

import pygame, sys  
from pygame.locals import *

pygame.init()  
DISPLAYSURF = pygame.display.set_mode((400, 300))  
pygame.display.set_caption('IBM Emulator')

BLACK = (0, 0, 0)  
GREEN = (0, 255, 0)

fontObj = pygame.font.Font('freesansbold.ttf', 32)  
textSurfaceObj = fontObj.render('IBM PC Emulator', True, GREEN,BLACK)  
textRectObj = textSurfaceObj.get_rect()  
textRectObj = (10, 10)

try:  
    while True: # main loop  
        DISPLAYSURF.fill(BLACK)  
        DISPLAYSURF.blit(textSurfaceObj, textRectObj)  
        for event in pygame.event.get():  
            if event.type == QUIT:  
                pygame.quit()  
                sys.exit()  
        pygame.display.update()  
except SystemExit:  
    pass
</code></pre>
</div>
<span class="comment-copy">sys.exit() stops execution without printing a backtrace, raising an Exception does... your question describes exactly what the default behavior is, so don't change anything.</span>
<span class="comment-copy">@Luper It is very easy to check that sys.exit() throws SystemExit!</span>
<span class="comment-copy">I said it doesn't print a traceback, not that it doesn't raise an exception.</span>
<span class="comment-copy">I think that this really answers the question you asked: <a href="http://stackoverflow.com/questions/173278/is-there-a-way-to-prevent-a-systemexit-exception-raised-from-sys-exit-from-bei" title="is there a way to prevent a systemexit exception raised from sys exit from bei">stackoverflow.com/questions/173278/â€¦</a></span>
<span class="comment-copy">Is this question specifically for Jython 2.4 or something like that? Because for modern versions of Python (even in 2009, when that meant CPython 2.6 and 3.1, Jython 2.5, and IronPython 2.6), the question makes no sense, and the top answers are wrong.</span>
<span class="comment-copy">There should be something like "from sys import exit" in the beginning.</span>
<span class="comment-copy">If sys.exit() is called in "main program stuff", the code above throws away the value passed to sys.exit. Notice that sys.exit raises SystemExit and the variable "e" will contain the exit code.</span>
<span class="comment-copy">i would suggest printing in stderr sys.stderr.write(msg)</span>
<span class="comment-copy">I <i>strongly</i> suggest removing the lines from <code>except Exception:</code> to <code>sys.exit(0)</code>, inclusive. It is already the default behavior to print a traceback on all non-handled exceptions, and to exit after code ends, so why bother doing the same manually?</span>
<span class="comment-copy">@jkp - Regarding your comment: <code>sys.exit()</code> should be used for programs. <code>exit()</code> is intended for interactive shells. See <a href="http://stackoverflow.com/questions/6501121/the-difference-between-exit-and-sys-exit-in-python">The difference between exit() and sys.exit() in Python?</a>.</span>
<span class="comment-copy">-1: This code is silly: why catch <code>SystemExit</code> just to call <code>sys.exit(e)</code>?  Removing both lines has the <i>same</i> effect. Also, cleanup belongs to <code>finally:</code>, not <code>except Exception: ... raise</code>.</span>
<span class="comment-copy">@MestreLion: You're free to downvote, but if you read my comment just above yours, that's only true for 2.5+. If you read all of my post, I explicitly said that the code is silly and suggested exactly what you said in your comment.</span>
<span class="comment-copy">Sorry, you're right... I forgot there was a major re-structure of exceptions in Python 2.5. I tried to undo the downvote, but SO only allows me to do so if the answer is edited. So, since we are in 2012 and Python 2.4 is ancient history, why not edit it and show the correct (current) code upfront, leaving the pre-2.5 method as a footnote? It will improve the answer a lot and I'll be able to undo the downvote, and will gladly do so. Win-win for everyone :)</span>
<span class="comment-copy">@MestreLion: I started editing as you suggested, but this answer really only makes sense in the context of the question and a 2.4 environment. The downvote doesn't upset me.</span>
<span class="comment-copy">Downvote. It throws SystemExit, which causes traceback</span>
<span class="comment-copy">@Val: wrong again. It does not causes traceback</span>
<span class="comment-copy">@mestreLion Then why do I get     Dets 06 18:53:17 Traceback (most recent call last):   File "debug_new.py", line 4, in &lt;module&gt;     import sys; sys.exit(0)   SystemExit: 0         at   org.python.core.PyException.fillInStackTrace(PyException.java:70)  in my console?</span>
<span class="comment-copy">@Val: because you're not using a standard python console. Jython is not Python, and it looks like it (or at least its console) handles exceptions differently.</span>
<span class="comment-copy">@Val See <a href="https://stackoverflow.com/q/48571212/3357935"><i>Why is sys.exit() causing a traceback?</i></a></span>
<span class="comment-copy">For using <code>sys.trackbacklimit</code> in Python 3, see <a href="http://stackoverflow.com/a/21556806/832230">this answer</a>.</span>
<span class="comment-copy">It says very clearly in the <a href="https://docs.python.org/3/library/constants.html#quit" rel="nofollow noreferrer">docs</a> that things like <code>quit</code> and <code>exit</code> should not be used in programs.</span>
<span class="comment-copy">You're right, I'm aware of that, but my impression while reading the question wasn't that he's using the script for production, I thought he was doing some tests for himself or something. Well, i've read it quickly, and yeah maybe I should've pointed out that quit() should not be used in final production scripts!</span>
<span class="comment-copy">If you would comment the code, it would increase the quality of the answer.</span>
