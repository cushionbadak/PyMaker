<div class="post-text" itemprop="text">
<p>How can I check what version of the Python Interpreter is interpreting my script?</p>
</div>
<div class="post-text" itemprop="text">
<p>This information is available in the <a href="http://docs.python.org/2/library/sys.html#sys.version" rel="noreferrer">sys.version</a> string in the <a href="http://docs.python.org/2/library/sys.html" rel="noreferrer">sys</a> module:</p>
<pre><code>&gt;&gt;&gt; import sys
</code></pre>
<p>Human readable:</p>
<pre><code>&gt;&gt;&gt; print(sys.version)  # parentheses necessary in python 3.       
2.5.2 (r252:60911, Jul 31 2008, 17:28:52) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]
</code></pre>
<p>For further processing:</p>
<pre><code>&gt;&gt;&gt; sys.version_info
(2, 5, 2, 'final', 0)
# or
&gt;&gt;&gt; sys.hexversion
34014192
</code></pre>
<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>
<pre><code>assert sys.version_info &gt;= (2, 5)
</code></pre>
<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to "duck" check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the command line (note the capital 'V'):</p>
<pre><code>python -V
</code></pre>
<p>This is documented in 'man python'.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like <code>sys.hexversion</code> for stuff like this.</p>
<p><a href="http://docs.python.org/library/sys.html#sys.hexversion" rel="noreferrer">http://docs.python.org/library/sys.html#sys.hexversion</a></p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.hexversion
33883376
&gt;&gt;&gt; '%x' % sys.hexversion
'20504f0'
&gt;&gt;&gt; sys.hexversion &lt; 0x02060000
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your best bet is probably something like so: </p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version_info
(2, 6, 4, 'final', 0)
&gt;&gt;&gt; if not sys.version_info[:2] == (2, 6):
...    print "Error, I need python 2.6"
... else:
...    from my_module import twoPointSixCode
&gt;&gt;&gt; 
</code></pre>
<p>Additionally, you can always wrap your imports in a simple try, which should catch syntax errors. And, to @Heikki's point, this code will be compatible with much older versions of python: </p>
<pre><code>&gt;&gt;&gt; try:
...     from my_module import twoPointSixCode
... except Exception: 
...     print "can't import, probably because your python is too old!"
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/platform.html#platform.python_version" rel="noreferrer"><code>platform</code>'s <code>python_version</code></a> from the stdlib:</p>
<pre><code>&gt;&gt;&gt; from platform import python_version
&gt;&gt;&gt; print(python_version())
2.7.8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put something like:</p>
<pre><code>#!/usr/bin/env/python
import sys
if sys.version_info&lt;(2,6,0):
  sys.stderr.write("You need python 2.6 or later to run this script\n")
  exit(1)
</code></pre>
<p>at the top of your script.</p>
<p>Note that depending on what else is in your script, older versions of python than the target may not be able to even load the script, so won't get far enough to report this error. As a workaround, you can run the above in a script that imports the script with the more modern code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a short commandline version which exits straight away (handy for scripts and automated execution):</p>
<pre><code>python -c "print(__import__('sys').version)"
</code></pre>
<p>Or just the major, minor and micro:</p>
<pre><code>python -c "print(__import__('sys').version_info[:1])" # (2,)
python -c "print(__import__('sys').version_info[:2])" # (2, 7)
python -c "print(__import__('sys').version_info[:3])" # (2, 7, 6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <code>six</code> module, you can do it by:</p>
<pre><code>import six

if six.PY2:
  # this is python2.x
else:
  # six.PY3
  # this is python3.x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>The simplest way</h1>
<p>Just type python in your terminal and you can see the version 
 as like following </p>
<pre><code>desktop:~$ python
Python 2.7.6 (default, Jun 22 2015, 18:00:18) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like Seth said, the main script could check <code>sys.version_info</code> (but note that that didn't appear until 2.0, so if you want to support older versions you would need to check another version property of the sys module).</p>
<p>But you still need to take care of not using any Python language features in the file that are not available in older Python versions. For example, this is allowed in Python 2.5 and later:</p>
<pre><code>try:
    pass
except:
    pass
finally:
    pass
</code></pre>
<p>but won't work in older Python versions, because you could only have except OR finally match the try. So for compatibility with older Python versions you need to write:</p>
<pre><code>try:
    try:
        pass
    except:
        pass
finally:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
sys.version.split(' ')[0]
</code></pre>
<p>sys.version gives you what you want, just pick the first number :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Check Python version: <code>python -V</code> or <code>python --version</code> or <code>apt-cache policy python</code></p>
<p>you can also run <code>whereis python</code> to see how many versions are installed.</p>
</div>
<div class="post-text" itemprop="text">
<p>To see a MSDOS script to check the version before running the Python interpreter (to avoid Python version syntax exceptions) See solution:</p>
<p><a href="https://stackoverflow.com/questions/446052/python-best-way-to-check-for-python-version-in-program-that-uses-new-language-fe/7642536#7642536">How can I check for Python version in a program that uses new language features?</a></p>
<p>and </p>
<p>MS script; Python version check prelaunch of Python module
<a href="http://pastebin.com/aAuJ91FQ" rel="nofollow noreferrer">http://pastebin.com/aAuJ91FQ</a>
(script likely easy to convert to other OS scripts.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Several answers already suggest how to <em>query</em> the current python version. To <em>check</em> programmatically the version requirements, I'd make use of one of the following two methods:</p>
<pre><code># Method 1: (see krawyoti's answer)
import sys
assert(sys.version_info &gt;= (2,6))

# Method 2: 
import platform
from distutils.version import StrictVersion 
assert(StrictVersion(platform.python_version()) &gt;= "2.6")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun, the following is a way of doing it on CPython 1.0-3.7b2, Pypy, Jython and Micropython.  This is more of a curiosity than a way of doing it in modern code.  I wrote it as part of <a href="http://stromberg.dnsalias.org/~strombrg/pythons/" rel="nofollow noreferrer">http://stromberg.dnsalias.org/~strombrg/pythons/</a> , which is a script for testing a snippet of code on many versions of python at once, so you can easily get a feel for what python features are compatible with what versions of python:</p>
<pre><code>via_platform = 0
check_sys = 0
via_sys_version_info = 0
via_sys_version = 0
test_sys = 0
try:
    import platform
except (ImportError, NameError):
    # We have no platform module - try to get the info via the sys module
    check_sys = 1

if not check_sys:
    if hasattr(platform, "python_version"):
        via_platform = 1
    else:
        check_sys = 1

if check_sys:
    try:
        import sys
        test_sys = 1
    except (ImportError, NameError):
        # just let via_sys_version_info and via_sys_version remain False - we have no sys module
        pass

if test_sys:
    if hasattr(sys, "version_info"):
        via_sys_version_info = 1
    elif hasattr(sys, "version"):
        via_sys_version = 1
    else:
        # just let via_sys remain False
        pass

if via_platform:
    # This gives pretty good info, but is not available in older interpreters.  Also, micropython has a
    # platform module that does not really contain anything.
    print(platform.python_version())
elif via_sys_version_info:
    # This is compatible with some older interpreters, but does not give quite as much info.
    print("%s.%s.%s" % sys.version_info[:3])
elif via_sys_version:
    import string
    # This is compatible with some older interpreters, but does not give quite as much info.
    verbose_version = sys.version
    version_list = string.split(verbose_version)
    print(version_list[0])
else:
    print("unknown")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.version_info</code> doesn't seem to return a <code>tuple</code> as of 3.7. Rather, it returns a special class, so all of the examples using tuples don't work, for me at least. Here's the output from a python console:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; type(sys.version_info)
&lt;class 'sys.version_info'&gt;
</code></pre>
<p>I've found that using a combination of <code>sys.version_info.major</code> and <code>sys.version_info.minor</code> seems to suffice. For example,...</p>
<pre class="lang-python prettyprint-override"><code>import sys
if sys.version_info.major &gt; 3:
    print('Upgrade to Python 3')
    exit(1)
</code></pre>
<p>checks if you're running Python 3.  You can even check for more specific versions with...
</p>
<pre><code>import sys
ver = sys.version_info
if ver.major &gt; 2:
    if ver.major == 3 and ver.minor &lt;= 4:
        print('Upgrade to Python 3.5')
        exit(1)
</code></pre>
<p>can check to see if you're running at least Python 3.5.</p>
</div>
<div class="post-text" itemprop="text">
<h3>If you want to detect pre-Python 3 and don't want to import anything...</h3>
<p>...you can (ab)use list comprehension scoping changes and do it in a <strong>single expression</strong>:</p>
<pre><code>is_python_3_or_above = (lambda x: [x for x in [False]] and None or x)(True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To verify the Python version for commands on Windows, run the following commands in a command prompt and verify the output </p>
<pre><code>c:\&gt;python -V
Python 2.7.16

c:\&gt;py -2 -V
Python 2.7.16

c:\&gt;py -3 -V
Python 3.7.3
</code></pre>
<p>Also, To see the folder configuration for each Python version, run the following commands:</p>
<pre><code>For Python 2,'py -2 -m site'
For Python 3,'py -3 -m site'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are working on linux just give command <code>python</code>  output will be like this</p>
<blockquote>
<p>Python 2.4.3 (#1, Jun 11 2009, 14:09:37)</p>
<p>[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2</p>
<p>Type "help", "copyright", "credits" or "license" for more
  information.</p>
</blockquote>
</div>
<span class="comment-copy">The current thread is about checking python version from a python program/script. In case you are looking to check the version of python interpreter installed on your machine from command line then please refer to the following post - <a href="https://stackoverflow.com/q/8917885/465053">Which version of Python do I have installed?</a></span>
<span class="comment-copy">I like that the syntax to determine what version you're running changes depending on what version you're running.</span>
<span class="comment-copy">it's actually the syntax for print. not for checking the version. i use that in my python 2 and 3 scripts: <code>PY3 = sys.version_info[0] == 3</code></span>
<span class="comment-copy">PY2 = sys.version_info[0] == 2   PY3 = sys.version_info[0] == 3</span>
<span class="comment-copy">You can also access some of the fields in <code>sys.version_info</code> as properties, so <code>PY3 = sys.version_info.major == 3</code> might be a little more appealing.</span>
<span class="comment-copy">@Arbiter In what way does it change?</span>
<span class="comment-copy">The question is not "How do I check what version of python I have installed?"  Many of the other answers are correct.</span>
<span class="comment-copy">python -v is verbose no version....this is documented in python -h</span>
<span class="comment-copy">capital V is version, not lowercase</span>
<span class="comment-copy">@carrier I don't understand what the difference is supposed to be.</span>
<span class="comment-copy">The different is that you need to check <b>while you are running the script</b> so you can react accordingly; e.g., if you are running in an environment where the python version is not under your control.</span>
<span class="comment-copy">That's a nifty version feature I hadn't seen, and a bit easier to use (at least to me) than the regular version...</span>
<span class="comment-copy">@sorin: can you explain how this is better than for example Seth's answer? Since you state this is the best, I'm wondering.</span>
<span class="comment-copy">@0xC0000022L Had you ever wondered how you would be able to compare the text from the tuple? How does 'final' compares to beta, rc, or whatever it could be there. Instead if you have a numeric value, you will always be able to specify an exact version.</span>
<span class="comment-copy">@sorin: uhm, that doesn't exactly matter, does it? If I compare against <code>(2,6,4)</code> the <code>'final'</code> doesn't seem to affect the comparison and it isn't supposed to. Apparently no slicing is needed when I compare the "most significant" parts of the tuple. This seems to be how it's treated and that's what my question was about. I'm not saying this solution doesn't have its merit, I'm just wondering why it's the best - i.e. what I am missing.</span>
<span class="comment-copy">The release level is defined to be one of 'alpha', 'beta', 'candidate', or 'final' which also happens to be compare correctly...</span>
<span class="comment-copy">Why a plain Exception and not an ImportError? :P</span>
<span class="comment-copy">@deadly - ImportError won't catch SyntaxErrors, which will be thrown if you try to use a new syntax in an old python, such as trying to use the <a href="https://mail.python.org/pipermail/python-dev/2005-September/056846.html" rel="nofollow noreferrer">shortcut conditional</a> in pre-2.5.</span>
<span class="comment-copy"><code>except Exception</code> is too broad. Wouldn't it be better to use specific exceptions which you expect?</span>
<span class="comment-copy">@Fermiparadox - Being broad keeps the assumptions low. The <code>except Exception:</code> line by itself already assumes a modern (2.x+) python. Maybe some future python will rearrange exception names in some backward-incompatible way? (Probably not, but who knows what python will look like in 20 years when we all have oculus rift eyeball implants? Code lasts a long time.)</span>
<span class="comment-copy">For the print funtion, it would be better in parentheses, thought about compatibility. If someone use sample in version 3, syntax error will be there waiting.</span>
<span class="comment-copy">This is incorrect (or at least, incomplete) because the old interpreters will barf on newer language constructs such as <code>x if Pred() else y</code>.  They will die during the "lexing" phase, and never have a chance to actually <i>execute</i> <code>exit(1)</code>.  <a href="http://stackoverflow.com/questions/3016157/determing-python-version-at-runtime/3016171#3016171">Seth's answer</a> is correct in encapsulating the new language features in other files.</span>
<span class="comment-copy">@MarkRushakoff: your comment is confusing. Which aspect of this answer is wrong? The missing <code>else</code> branch or that a <code>&lt;</code> is used for <code>version_info</code>? AFAIK Python pads missing values in tuples, and all of this should be valid before 2.6, no? So Seth's answer uses slicing (redundantly) while this one doesn't and that makes your comment even more confusing.</span>
<span class="comment-copy">I think what @MarkRushakoff is saying is that if you have this at the top of a file, and a new language feature elsewhere in the same file, the old version of python will die when loading the file, before it runs any of it, so the error won't be shown. Basically you have to put the above (or another check) at the top of a file, then import the code that requires a new version of python from separate files.</span>
<span class="comment-copy">Yep, what @rjmunro said :)</span>
<span class="comment-copy">not working for python3</span>
<span class="comment-copy">@vigilancer you're right, at the time of writing it wasn't that relevant yet but I've updated it for Python 3 now :)</span>
<span class="comment-copy">thanks, now it's working for both 2 and 3 versions</span>
<span class="comment-copy"><i>"The simplest way"</i> ...to do something different than what was asked for.</span>
<span class="comment-copy"><code>sys.version_info</code> is already a tuple.</span>
<span class="comment-copy">Same answer was already posted. and, The question is not "How do I check what version of python I have installed?" but "How do I check version in my script".</span>
<span class="comment-copy">It's something like a subclass of <code>namedtuple</code> and comparing it with tuple definitely works. To get full equality you need a five-element typle: major, minor, micro, releaselevel (string) and serial.</span>
<span class="comment-copy">I want my python script to be able to obtain the version of python that is interpreting it.  The correct answer has been accepted.</span>
<span class="comment-copy">The does not help to get <code>Python</code> version within the script, also similar answer already posted before: <a href="https://stackoverflow.com/a/35294211/950762">stackoverflow.com/a/35294211/950762</a></span>
