<div class="post-text" itemprop="text">
<p>cgi.escape seems like one possible choice.  Does it work well?  Is there something that is considered better?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/cgi.html#cgi.escape" rel="noreferrer"><code>cgi.escape</code></a> is fine. It escapes:</p>
<ul>
<li><code>&lt;</code> to <code>&amp;lt;</code></li>
<li><code>&gt;</code> to <code>&amp;gt;</code></li>
<li><code>&amp;</code> to <code>&amp;amp;</code></li>
</ul>
<p>That is enough for all HTML.</p>
<p>EDIT: If you have non-ascii chars you also want to escape, for inclusion in another encoded document that uses a different encoding, like <em>Craig</em> says, just use:</p>
<pre><code>data.encode('ascii', 'xmlcharrefreplace')
</code></pre>
<p>Don't forget to decode <code>data</code> to <code>unicode</code> first, using whatever encoding it was encoded.</p>
<p>However in my experience that kind of encoding is useless if you just work with <code>unicode</code> all the time from start. Just encode at the end to the encoding specified in the document header (<code>utf-8</code> for maximum compatibility).</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; cgi.escape(u'&lt;a&gt;bá&lt;/a&gt;').encode('ascii', 'xmlcharrefreplace')
'&amp;lt;a&amp;gt;b&amp;#225;&amp;lt;/a&amp;gt;
</code></pre>
<p>Also worth of note (thanks Greg) is the extra <em><code>quote</code></em> parameter <code>cgi.escape</code> takes. With it set to <code>True</code>, <code>cgi.escape</code> also escapes double quote chars (<code>"</code>) so you can use the resulting value in a XML/HTML attribute.</p>
<p>EDIT: Note that cgi.escape has been deprecated in Python 3.2 in favor of <a href="http://docs.python.org/3/library/html.html#html.escape" rel="noreferrer"><code>html.escape</code></a>, which does the same except that <em><code>quote</code></em> defaults to True.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.2 a new <code>html</code> module was introduced, which is used for escaping reserved characters from HTML markup.</p>
<p>It has one function <code>escape()</code>:</p>
<pre><code>&gt;&gt;&gt; import html
&gt;&gt;&gt; html.escape('x &gt; 2 &amp;&amp; x &lt; 7')
'x &amp;gt; 2 &amp;amp;&amp;amp; x &amp;lt; 7'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>If you wish to escape HTML in a URL:</strong></p>
<p>This is probably NOT what the OP wanted (the question doesn't clearly indicate in which context the escaping is meant to be used), but Python's native library <a href="http://docs.python.org/2/library/urllib.html" rel="nofollow noreferrer">urllib</a> has a method to escape HTML entities that need to be included in a URL safely.</p>
<p>The following is an example:</p>
<pre><code>#!/usr/bin/python
from urllib import quote

x = '+&lt;&gt;^&amp;'
print quote(x) # prints '%2B%3C%3E%5E%26'
</code></pre>
<p><a href="http://docs.python.org/2/library/urllib.html" rel="nofollow noreferrer">Find docs here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There is also the excellent <a href="https://github.com/mitsuhiko/markupsafe" rel="noreferrer">markupsafe package</a>.</p>
<pre><code>&gt;&gt;&gt; from markupsafe import Markup, escape
&gt;&gt;&gt; escape("&lt;script&gt;alert(document.cookie);&lt;/script&gt;")
Markup(u'&amp;lt;script&amp;gt;alert(document.cookie);&amp;lt;/script&amp;gt;')
</code></pre>
<p>The <code>markupsafe</code> package is well engineered, and probably the most versatile and Pythonic way to go about escaping, IMHO, because:</p>
<ol>
<li>the return (<code>Markup</code>) is a class derived from unicode (i.e. <code>isinstance(escape('str'), unicode) == True</code></li>
<li>it properly handles unicode input</li>
<li>it works in Python (2.6, 2.7, 3.3, and pypy)</li>
<li>it respects custom methods of objects (i.e. objects with a <code>__html__</code> property) and template overloads (<code>__html_format__</code>).</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/cgi.html#cgi.escape" rel="nofollow noreferrer"><code>cgi.escape</code></a> should be good to escape HTML in the limited sense of escaping the HTML tags and character entities.</p>
<p>But you might have to also consider encoding issues: if the HTML you want to quote has non-ASCII characters in a particular encoding, then you would also have to take care that you represent those sensibly when quoting. Perhaps you could convert them to entities. Otherwise you should ensure that the correct encoding translations are done between the "source" HTML and the page it's embedded in, to avoid corrupting the non-ASCII characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>No libraries, pure python, safely escapes text into html text:</p>
<pre><code>text.replace('&amp;', '&amp;amp;').replace('&gt;', '&amp;gt;').replace('&lt;', '&amp;lt;'
        ).encode('ascii', 'xmlcharrefreplace')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2><code>cgi.escape</code> extended</h2>
<p>This version improves <code>cgi.escape</code>.  It also preserves whitespace and newlines.  Returns a <code>unicode</code> string.</p>
<pre><code>def escape_html(text):
    """escape strings for display in HTML"""
    return cgi.escape(text, quote=True).\
           replace(u'\n', u'&lt;br /&gt;').\
           replace(u'\t', u'&amp;emsp;').\
           replace(u'  ', u' &amp;nbsp;')
</code></pre>
<h3>for example</h3>
<pre><code>&gt;&gt;&gt; escape_html('&lt;foo&gt;\nfoo\t"bar"')
u'&amp;lt;foo&amp;gt;&lt;br /&gt;foo&amp;emsp;&amp;quot;bar&amp;quot;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not the easiest way, but still straightforward. The main difference from <strong>cgi.escape</strong> module - it still will work properly if you already have <code>&amp;amp;</code> in your text. As you see from comments to it:</p>
<p><em>cgi.escape version</em></p>
<pre><code>def escape(s, quote=None):
    '''Replace special characters "&amp;", "&lt;" and "&gt;" to HTML-safe sequences.
    If the optional flag quote is true, the quotation mark character (")
is also translated.'''
    s = s.replace("&amp;", "&amp;amp;") # Must be done first!
    s = s.replace("&lt;", "&amp;lt;")
    s = s.replace("&gt;", "&amp;gt;")
    if quote:
        s = s.replace('"', "&amp;quot;")
    return s
</code></pre>
<p><em>regex version</em></p>
<pre><code>QUOTE_PATTERN = r"""([&amp;&lt;&gt;"'])(?!(amp|lt|gt|quot|#39);)"""
def escape(word):
    """
    Replaces special characters &lt;&gt;&amp;"' to HTML-safe sequences. 
    With attention to already escaped characters.
    """
    replace_with = {
        '&lt;': '&amp;gt;',
        '&gt;': '&amp;lt;',
        '&amp;': '&amp;amp;',
        '"': '&amp;quot;', # should be escaped in attributes
        "'": '&amp;#39'    # should be escaped in attributes
    }
    quote_pattern = re.compile(QUOTE_PATTERN)
    return re.sub(quote_pattern, lambda x: replace_with[x.group(0)], word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Via <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow">BeautifulSoup4</a>:</p>
<pre><code>&gt;&gt;&gt; bs4.dammit import EntitySubstitution
&gt;&gt;&gt; esub = EntitySubstitution()
&gt;&gt;&gt; esub.substitute_html("r&amp;d")
'r&amp;amp;d'
</code></pre>
</div>
<span class="comment-copy">The additional boolean parameter to cgi.escape should also be considered for escaping quotes when text is used in HTML attribute values.</span>
<span class="comment-copy">Just to be sure: If I run all untrusted data through the <code>cgi.escape</code> function, is enough to protect against all (known) XSS attacs?</span>
<span class="comment-copy">@Tomas Sedovic: Depends on where you'll put the text after running cgi.escape in it. If placed in root HTML context then yes, you're completely safe.</span>
<span class="comment-copy">What about input like {{Measures 12 Ω"H x 17 5/8"W x 8 7/8"D. Imported.}} That's not ascii, so encode() will throw an exception at you.</span>
<span class="comment-copy">@Andrew Kolesnikov: Have you tried it? <code>cgi.escape(yourunicodeobj).encode('ascii', 'xmlcharrefreplace') == '{{Measures 12 &amp;#937;"H x 17 5/8"W x 8 7/8"D. Imported.}}'</code> -- as you can see, the expression returns ascii bytestring, with all non-ascii unicode chars encoded using the xml character reference table.</span>
<span class="comment-copy">WARNING: Don't use this for attribute values, it won't escape stuff like &lt;a href="<code>javascript:alert()</code>"&gt; (nor does cgi.escape).</span>
<span class="comment-copy">What about <code>quote=True</code>?</span>
<span class="comment-copy">This is the wrong kind of escaping; we're looking for <a href="http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references" rel="nofollow noreferrer">HTML escapes</a>, as opposed to <a href="http://en.wikipedia.org/wiki/URL_Encoding" rel="nofollow noreferrer">URL encoding</a>.</span>
<span class="comment-copy">Nontheless - it was what I was actually looking for ;-)</span>
<span class="comment-copy">Your ordering is wrong, the <code>&amp;lt;</code> will get escaped to <code>&amp;amp;lt;</code></span>
<span class="comment-copy">@jason s Thanks for the fix!</span>
