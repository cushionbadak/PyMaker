<div class="post-text" itemprop="text">
<p>I'm trying to decode HTML entries from here <a href="http://www.nytimes.com/2009/07/31/world/middleeast/31adviser.html?_r=1&amp;hp" rel="noreferrer">NYTimes.com</a> and I cannot figure out what I am doing wrong. </p>
<p>Take for example: </p>
<pre><code>"U.S. Adviser&amp;#8217;s Blunt Memo on Iraq: Time &amp;#8216;to Go Home&amp;#8217;"
</code></pre>
<p>I've tried BeautifulSoup, decode('iso-8859-1'), and django.utils.encoding's smart_str without any success.  </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try this:</strong></p>
<pre><code>import re

def _callback(matches):
    id = matches.group(1)
    try:
        return unichr(int(id))
    except:
        return id

def decode_unicode_references(data):
    return re.sub("&amp;#(\d+)(;|(?=\s))", _callback, data)

data = "U.S. Adviser&amp;#8217;s Blunt Memo on Iraq: Time &amp;#8216;to Go Home&amp;#8217;"
print decode_unicode_references(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually what you have are not HTML entities. There are THREE varieties of those &amp;.....; thingies -- for example <code>&amp;#160; &amp;#xa0; &amp;nbsp;</code> all mean U+00A0 NO-BREAK SPACE.</p>
<p><code>&amp;#160;</code> (the type you have) is a "numeric character reference" (decimal).<br/>
<code>&amp;#xa0;</code> is a "numeric character reference" (hexadecimal).<br/>
<code>&amp;nbsp;</code> is an entity.</p>
<p>Further reading: <a href="http://htmlhelp.com/reference/html40/entities/" rel="noreferrer">http://htmlhelp.com/reference/html40/entities/</a></p>
<p>Here you will find code for Python2.x that does all three in one scan through the input: <a href="http://effbot.org/zone/re-sub.htm#unescape-html" rel="noreferrer">http://effbot.org/zone/re-sub.htm#unescape-html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This does work:</p>
<pre><code>from BeautifulSoup import BeautifulStoneSoup
s = "U.S. Adviser&amp;#8217;s Blunt Memo on Iraq: Time &amp;#8216;to Go Home&amp;#8217;"
decoded = BeautifulStoneSoup(s, convertEntities=BeautifulStoneSoup.HTML_ENTITIES)
</code></pre>
<p>If you want a string instead of a Unicode object, you'll need to decode it to an encoding that supports the characters being used; ISO-8859-1 doesn't:</p>
<pre><code>result = decoded.encode("UTF-8")
</code></pre>
<p>It's unfortunate that you need an external module for something like this; simple HTML/XML entity decoding should be in the standard library, and not require me to use a library with meaningless class names like "BeautifulStoneSoup".  (Class and function names should not be "creative", they should be meaningful.)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from HTMLParser import HTMLParser
&gt;&gt;&gt; print HTMLParser().unescape('U.S. Adviser&amp;#8217;s Blunt Memo on Iraq: '
...                             'Time &amp;#8216;to Go Home&amp;#8217;')
U.S. Adviser’s Blunt Memo on Iraq: Time ‘to Go Home’
</code></pre>
<p>The function is undocumented in Python 2. <a href="http://bugs.python.org/issue2927" rel="noreferrer">It is fixed in Python 3.4+</a>: it is exposed as <a href="https://docs.python.org/3/library/html.html#html.unescape" rel="noreferrer"><code>html.unescape()</code> there</a>.</p>
</div>
<span class="comment-copy">This questions seems to come up a lot with no good solution.  Makes me want to write something of my own...</span>
<span class="comment-copy">Ha I think that's the best solution I've found thus far. I might actually try to do that myself. If I do, I'll post my solution.</span>
<span class="comment-copy">@Triptych: there is <a href="http://stackoverflow.com/a/20715131/4279"><code>unescape()</code></a>.</span>
<span class="comment-copy">UnicodeEncodeError: 'charmap' codec can't encode character u'\u2019' in position 12: character maps to &lt;undefined&gt;  This seems to be the error I keep getting regardless of what I try.</span>
<span class="comment-copy">Could you provide more code, then? I just tried it with the function I wrote and the character 2019 works fine. It shows up as: ߣ</span>
<span class="comment-copy">A few questions on your regexp: (1) Shouldn't it be \d instead of \w? The regexp will match <code>&amp;#xa0;</code> and <code>&amp;nbsp;</code> but then it will crash in int() (2) Allowing the character reference (it's NOT an entity) to end in a whitespace instead of ';' seems very tolerant -- shouldn't you mention this? (3) Wouldn't the last part be better written as [;\s]?</span>
<span class="comment-copy">John, you were correct on point one <i>partially</i>. It won't match &amp;nbsp; since that doesn't start with <code>&amp;#</code>, but yes it should have been <code>\d</code>. Regarding point two to allowing it to end with whitespace, it should be noted that even though it isn't pretty, it's still supported. I've updated the code in the following way: (1) Changed it to <code>\d</code>, (2) made the callback a bit stronger, and (3) used a lookahead assertion for ending whitespace instead of absorbing it like it was.</span>
<span class="comment-copy">Evan, thanks for the enlightenment, especially about the tolerance of whitespace, which I didn't know about. I got some more clues by looking in the HTML 4.01 and 2.0 specs. They referred to the SGML standard (ISO 8879). Cost = CHF 238(!) so I didn't read it, but HTML 2.0 commented that ';' is only needed when the character following the reference would otherwise be part of the name. Experiments with FF, IE and Opera using space - / X A and <code>&amp;</code> instead of ; all gave the same result: they terminate the reference and are not swallowed. I'm looking forward to your updated solution ;-)</span>
<span class="comment-copy">+1 for the effbot.org link, very valuable!</span>
<span class="comment-copy">lxml, alas also not in the standard library, also provides a Beautiful Soup parser (and lots more) with somewhat less "creative" names.</span>
<span class="comment-copy">Support for entity decoding is in the standard library (module htmlentitydefs). What the OP has are (decimal) numeric character references, not entities.</span>
<span class="comment-copy">Works as well with BeautifulSoup instead of BeautifulStoneSoup - one step less "creative" :)</span>
<span class="comment-copy">' names should not be "creative" ' is that a stone cold rule, or just personal choice?</span>
<span class="comment-copy">@TankorSmash: There's no authority--beyond the compiler--forcing you to follow any coding standards at all, but this seems like common sense to me.</span>
<span class="comment-copy">For future users, this answer appears to have so few upvotes simply because it came 4 years later than the existing answers. It seems to be at least as good an answer. This answer has the advantage that it is simple (unlike writing your own function to to interpret HTML standards using a regex) and uses a standard library (unlike BeautifulSoup). It has the disadvantage that is is using an undocumented function.</span>
<span class="comment-copy">Upvote this people!</span>
