<div class="post-text" itemprop="text">
<p>I've written a buffer class that provides a File-like interface with <code>read</code>, <code>write</code>, <code>seek</code>, <code>tell</code>, <code>flush</code> methods to a simple string in memory. Of course it is incomplete (e.g. I didn't write <code>readline</code>). It's purpose is to be filled by a background thread from some external data source, but let a user treat it like a file. I'd expect it to contain a relatively small amount of data (maybe 50K max)</p>
<p>Is there a better way to do this instead of writing it from scratch?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the standard Python modules <a href="http://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer"><code>StringIO</code></a> or <a href="http://docs.python.org/2/library/stringio.html#module-cStringIO" rel="nofollow noreferrer"><code>cStringIO</code></a> to obtain an in-memory buffer which implements the <a href="http://docs.python.org/2/library/stdtypes.html#bltin-file-objects" rel="nofollow noreferrer">file interface</a>.</p>
<p><code>cStringIO</code> is implemented in C, and will be faster, so you should use that version if possible.</p>
<p>If you're using Python 3 you should use the <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><code>io.StringIO</code></a> instead of <code>StringIO</code> and <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer"><code>io.BytesIO</code></a> instead of <code>cStringIO</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you might be looking for <code>StringIO</code>.</p>
</div>
<span class="comment-copy">I think that's what I'm looking for. But are these classes thread-safe? I will have separate reader and writer threads.</span>
<span class="comment-copy">Pythons GIL means that thread safety is highly unlikely to be a problem, as two threads don't execute at the same time.</span>
<span class="comment-copy">That doesn't make it thread-safe. If it did, then we wouldn't need thread safety on single-core processors.</span>
<span class="comment-copy">Thanks to @Sean1708 for <a href="https://stackoverflow.com/review/suggested-edits/13810461">including</a> the Python3 notes:)</span>
