<div class="post-text" itemprop="text">
<p>My background is in C# and I've just recently started programming in Python. When an exception is thrown I typically want to wrap it in another exception that adds more information, while still showing the full stack trace. It's quite easy in C#, but how do I do it in Python?</p>
<p>Eg. in C# I would do something like this:</p>
<pre><code>try
{
  ProcessFile(filePath);
}
catch (Exception ex)
{
  throw new ApplicationException("Failed to process file " + filePath, ex);
}
</code></pre>
<p>In Python I can do something similar:</p>
<pre><code>try:
  ProcessFile(filePath)
except Exception as e:
  raise Exception('Failed to process file ' + filePath, e)
</code></pre>
<p>...but this loses the traceback of the inner exception!</p>
<p><strong>Edit:</strong> I'd like to see both exception messages and both stack traces and correlate the two. That is, I want to see in the output that exception X occurred here and then exception Y there - same as I would in C#. Is this possible in Python 2.6? Looks like the best I can do so far (based on Glenn Maynard's answer) is:</p>
<pre><code>try:
  ProcessFile(filePath)
except Exception as e:
  raise Exception('Failed to process file' + filePath, e), None, sys.exc_info()[2]
</code></pre>
<p>This includes both the messages and both the tracebacks, but it doesn't show which exception occurred where in the traceback.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Python 2</h1>
<p>It's simple; pass the traceback as the third argument to raise.</p>
<pre><code>import sys
class MyException(Exception): pass

try:
    raise TypeError("test")
except TypeError, e:
    raise MyException(), None, sys.exc_info()[2]
</code></pre>
<p>Always do this when catching one exception and re-raising another.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Python 3</h1>
<p>In python 3 you can do the following:</p>
<pre><code>try:
    raise MyExceptionToBeWrapped("I have twisted my ankle")

except MyExceptionToBeWrapped as e:

    raise MyWrapperException("I'm not in a good shape") from e
</code></pre>
<p>This will produce something like this:</p>
<pre class="lang-none prettyprint-override"><code>   Traceback (most recent call last):
   ...
   MyExceptionToBeWrapped: ("I have twisted my ankle")

The above exception was the direct cause of the following exception:

   Traceback (most recent call last):
   ...
   MyWrapperException: ("I'm not in a good shape")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 has the <a href="https://docs.python.org/3/reference/simple_stmts.html#raise" rel="noreferrer"><code>raise</code> ... <code>from</code> clause</a> to chain exceptions. <a href="https://stackoverflow.com/a/1350981/4794">Glenn's answer</a> is great for Python 2.7, but it only uses the original exception's traceback and throws away the error message and other details. Here are some examples in Python 2.7 that add context information from the current scope into the original exception's error message, but keep other details intact.</p>
<h2>Known Exception Type</h2>
<pre><code>try:
    sock_common = xmlrpclib.ServerProxy(rpc_url+'/common')
    self.user_id = sock_common.login(self.dbname, username, self.pwd)
except IOError:
    _, ex, traceback = sys.exc_info()
    message = "Connecting to '%s': %s." % (config['connection'],
                                           ex.strerror)
    raise IOError, (ex.errno, message), traceback
</code></pre>
<p>That flavour of <a href="http://docs.python.org/reference/simple_stmts.html#the-raise-statement" rel="noreferrer"><code>raise</code> statement</a> takes the exception type as the first expression, the exception class constructor arguments in a tuple as the second expression, and the traceback as the third expression. If you're running earlier than Python 2.2, see the warnings on <a href="http://docs.python.org/library/sys.html#sys.exc_info" rel="noreferrer"><code>sys.exc_info()</code></a>.</p>
<h2>Any Exception Type</h2>
<p>Here's another example that's more general purpose if you don't know what kind of exceptions your code might have to catch. The downside is that it loses the exception type and just raises a RuntimeError. You have to import the <code>traceback</code> module.</p>
<pre><code>except Exception:
    extype, ex, tb = sys.exc_info()
    formatted = traceback.format_exception_only(extype, ex)[-1]
    message = "Importing row %d, %s" % (rownum, formatted)
    raise RuntimeError, message, tb
</code></pre>
<h2>Modify the Message</h2>
<p>Here's another option if the exception type will let you add context to it. You can modify the exception's message and then reraise it.</p>
<pre><code>import subprocess

try:
    final_args = ['lsx', '/home']
    s = subprocess.check_output(final_args)
except OSError as ex:
    ex.strerror += ' for command {}'.format(final_args)
    raise
</code></pre>
<p>That generates the following stack trace:</p>
<pre><code>Traceback (most recent call last):
  File "/mnt/data/don/workspace/scratch/scratch.py", line 5, in &lt;module&gt;
    s = subprocess.check_output(final_args)
  File "/usr/lib/python2.7/subprocess.py", line 566, in check_output
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
  File "/usr/lib/python2.7/subprocess.py", line 710, in __init__
    errread, errwrite)
  File "/usr/lib/python2.7/subprocess.py", line 1327, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory for command ['lsx', '/home']
</code></pre>
<p>You can see that it shows the line where <code>check_output()</code> was called, but the exception message now includes the command line.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <strong>Python 3.x</strong>:</p>
<pre><code>raise Exception('Failed to process file ' + filePath).with_traceback(e.__traceback__)
</code></pre>
<p><strong>or</strong> simply </p>
<pre><code>except Exception:
    raise MyException()
</code></pre>
<p>which will propagate <code>MyException</code> but print <strong>both</strong> exceptions if it will not be handled.</p>
<p>In <strong>Python 2.x</strong>:</p>
<pre><code>raise Exception, 'Failed to process file ' + filePath, e
</code></pre>
<hr/>
<p>You can prevent printing both exceptions by killing the <code>__context__</code> attribute. Here I write a context manager using that to catch and change your exception on the fly:
(see <a href="http://docs.python.org/3.1/library/stdtypes.html" rel="noreferrer">http://docs.python.org/3.1/library/stdtypes.html</a> for expanation of how they work)    </p>
<pre><code>try: # Wrap the whole program into the block that will kill __context__.

    class Catcher(Exception):
        '''This context manager reraises an exception under a different name.'''

        def __init__(self, name):
            super().__init__('Failed to process code in {!r}'.format(name))

        def __enter__(self):
            return self

        def __exit__(self, exc_type, exc_val, exc_tb):
            if exc_type is not None:
                self.__traceback__ = exc_tb
                raise self

    ...


    with Catcher('class definition'):
        class a:
            def spam(self):
                # not really pass, but you get the idea
                pass

            lut = [1,
                   3,
                   17,
                   [12,34],
                   5,
                   _spam]


        assert a().lut[-1] == a.spam

    ...


except Catcher as e:
    e.__context__ = None
    raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you can do this in Python 2.x, but something similar to this functionality is part of Python 3. From <a href="http://www.python.org/dev/peps/pep-3134/" rel="noreferrer">PEP 3134</a>:</p>
<blockquote>
<p>In today's Python implementation, exceptions are composed of three
      parts: the type, the value, and the traceback.  The 'sys' module,
      exposes the current exception in three parallel variables, exc_type,
      exc_value, and exc_traceback, the sys.exc_info() function returns a
      tuple of these three parts, and the 'raise' statement has a
      three-argument form accepting these three parts.  Manipulating
      exceptions often requires passing these three things in parallel,
      which can be tedious and error-prone.  Additionally, the 'except'
      statement can only provide access to the value, not the traceback.
      Adding the '<strong>traceback</strong>' attribute to exception values makes all
      the exception information accessible from a single place.</p>
</blockquote>
<p>Comparison to C#:</p>
<blockquote>
<p>Exceptions in C# contain a read-only 'InnerException' property that
      may point to another exception.  Its documentation [10] says that
      "When an exception X is thrown as a direct result of a previous
      exception Y, the InnerException property of X should contain a
      reference to Y."  This property is not set by the VM automatically;
      rather, all exception constructors take an optional 'innerException'
      argument to set it explicitly.  The '<strong>cause</strong>' attribute fulfills
      the same purpose as InnerException, but this PEP proposes a new form
      of 'raise' rather than extending the constructors of all exceptions.
      C# also provides a GetBaseException method that jumps directly to
      the end of the InnerException chain; this PEP proposes no analog.</p>
</blockquote>
<p>Note also that Java, Ruby and Perl 5 don't support this type of thing either. Quoting again:</p>
<blockquote>
<p>As for other languages, Java and Ruby both discard the original
      exception when another exception occurs in a 'catch'/'rescue' or
      'finally'/'ensure' clause.  Perl 5 lacks built-in structured
      exception handling.  For Perl 6, RFC number 88 [9] proposes an exception
      mechanism that implicitly retains chained exceptions in an array
      named @@.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could use my <a href="http://code.activestate.com/recipes/578252-python-exception-chains-or-trees/?in=user-4182236" rel="nofollow">CausedException class</a> to chain exceptions in Python 2.x (and even in Python 3 it can be useful in case you want to give more than one caught exception as cause to a newly raised exception).  Maybe it can help you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you could grab the relevant information and pass it up?  I'm thinking something like:</p>
<pre><code>import traceback
import sys
import StringIO

class ApplicationError:
    def __init__(self, value, e):
        s = StringIO.StringIO()
        traceback.print_exc(file=s)
        self.value = (value, s.getvalue())

    def __str__(self):
        return repr(self.value)

try:
    try:
        a = 1/0
    except Exception, e:
        raise ApplicationError("Failed to process file", e)
except Exception, e:
    print e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming:</p>
<ul>
<li>you need a solution, which works for Python 2 (for pure Python 3 see <code>raise ... from</code> solution)</li>
<li>just want to enrich the error message, e.g. providing some additional context</li>
<li>need the full stack trace</li>
</ul>
<p>you can use a simple solution from the the docs <a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#raising-exceptions</a>:</p>
<pre><code>try:
    raise NameError('HiThere')
except NameError:
    print 'An exception flew by!' # print or log, provide details about context
    raise # reraise the original exception, keeping full stack trace
</code></pre>
<p>The output:</p>
<pre><code>An exception flew by!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ?
NameError: HiThere
</code></pre>
<p>It looks like the key piece is the simplified 'raise' keyword that stands alone. That will re-raise the Exception in the except block.</p>
</div>
<div class="post-text" itemprop="text">
<p>For maximum compatibility between Python 2 and 3, you can use <code>raise_from</code> in the <code>six</code> library.  <a href="https://six.readthedocs.io/#six.raise_from" rel="nofollow noreferrer">https://six.readthedocs.io/#six.raise_from</a> .  Here is your example (slightly modified for clarity):</p>
<pre><code>import six

try:
  ProcessFile(filePath)
except Exception as e:
  six.raise_from(IOError('Failed to process file ' + repr(filePath)), e)
</code></pre>
</div>
<span class="comment-copy">The accepted answer is getting out of date, perhaps you should consider accepting another one.</span>
<span class="comment-copy">Thanks. That preserves the traceback, but it loses the error message of the original exception. How do I see both messages and both tracebacks?</span>
<span class="comment-copy"><code>raise MyException(str(e)), ...</code>, etc.</span>
<span class="comment-copy">Python 3 adds <code>raise E() from tb</code> and <code>.with_traceback(...)</code></span>
<span class="comment-copy">@GlennMaynard it is a pretty old question, but the middle argument of the <code>raise</code> is the value to pass to the exception (in case the first argument is an exception class and not an instance). So if you want to swap exceptions, instead of doing <code>raise MyException(str(e)), None, sys.exc_info()[2]</code>, it is better to use this: <code>raise MyException, e.args, sys.exc_info()[2]</code>.</span>
<span class="comment-copy">A Python2 and 3 compliant way is possible using the future package: <a href="http://python-future.org/compatible_idioms.html#raising-exceptions" rel="nofollow noreferrer">python-future.org/compatible_idioms.html#raising-exceptions</a> E.g. <code>from future.utils import raise_</code> and <code>raise_(ValueError, None, sys.exc_info()[2])</code>.</span>
<span class="comment-copy"><code>raise ... from ...</code> is indeed the correct way to do this in Python 3.  This needs more upvotes.</span>
<span class="comment-copy"><code>Nakedible</code> I think it is because unfortunately most people still aren't using Python 3.</span>
<span class="comment-copy">This seems to happen even with using 'from' in python 3</span>
<span class="comment-copy">Could be backported to Python 2. Hope it will one day.</span>
<span class="comment-copy">@ogrisel You can use the <code>future</code> package to achieve this: <a href="http://python-future.org/compatible_idioms.html#raising-exceptions" rel="nofollow noreferrer">python-future.org/compatible_idioms.html#raising-exceptions</a> E.g. <code>from future.utils import raise_</code> and <code>raise_(ValueError, None, sys.exc_info()[2])</code>.</span>
<span class="comment-copy">Where is the <code>ex.strerror</code> coming from? I can't find any relevant hit for that in the Python docs. Shouldn't it be <code>str(ex)</code>?</span>
<span class="comment-copy"><code>IOError</code> is derived from <a href="http://docs.python.org/2/library/exceptions.html#exceptions.EnvironmentError" rel="nofollow noreferrer"><code>EnvironmentError</code></a>, @hheimbuerger, which provides the <code>errorno</code> and <code>strerror</code> attributes.</span>
<span class="comment-copy">How would I wrap an arbitrary <code>Error</code>, e.g. ValueError, into a <code>RuntimeError</code> by catching <code>Exception</code>? If I reproduce your answer for this case, the stacktrace is lost.</span>
<span class="comment-copy">I'm not sure what you're asking, @karl. Can you post a sample in a new question and then link to it from here?</span>
<span class="comment-copy">I edited my duplicate of the question of the OP at <a href="http://stackoverflow.com/questions/23157766/nested-causes-in-nested-exceptions-in-python/" title="nested causes in nested exceptions in python">stackoverflow.com/questions/23157766/…</a> with a clearification taking into account your answer directly. We should discuss there :)</span>
<span class="comment-copy">TypeError: raise: arg 3 must be a traceback or None</span>
<span class="comment-copy">Sorry, I made a mistake, somehow I thought it also accepts exceptions and gets their traceback attribute automatically. As per <a href="http://docs.python.org/3.1/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">docs.python.org/3.1/reference/…</a>, this should be e.__traceback__</span>
<span class="comment-copy">@ilyan.: Python 2 does not have <code>e.__traceback__</code> attribute!</span>
<span class="comment-copy">But, of course, in Perl5 you can just say "confess qq{OH NOES! $@}" and not lose the other exception's stack trace.  Or you can implement your own type which retains the exception.</span>
<span class="comment-copy">This is the Python 2 &amp; 3 compatible solution! Thanks!</span>
<span class="comment-copy">I think the idea was to raise a different type of exception.</span>
<span class="comment-copy">This is not a chain of nested exceptions, just reraising one exception</span>
<span class="comment-copy">This is the best python 2 solution, if you just need to enrich the exception message and have the full stack trace!</span>
