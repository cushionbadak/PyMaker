<div class="post-text" itemprop="text">
<p>Tested on Python 2.6 interpreter:</p>
<pre><code>&gt;&gt;&gt; a=set('abcde')
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd'])
&gt;&gt;&gt; l=['f','g']
&gt;&gt;&gt; l
['f', 'g']
&gt;&gt;&gt; a.add(l)
Traceback (most recent call last):
  File "&lt;pyshell#35&gt;", line 1, in &lt;module&gt;
    a.add(l)
TypeError: list objects are unhashable
</code></pre>
<p>I think that I can't add the list to the set because there's no way Python can tell If I have added the same list twice. Is there a workaround?</p>
<p><strong>EDIT: I want to add the list itself, not its elements.</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can't add a list to a set because lists are mutable, meaning that you can change the contents of the list after adding it to the set.</p>
<p>You can however add tuples to the set, because you cannot change the contents of a tuple:</p>
<pre><code>&gt;&gt;&gt; a.add(('f', 'g'))
&gt;&gt;&gt; print a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
</code></pre>
<hr/>
<p><strong>Edit</strong>: some explanation: The documentation defines a <code>set</code> as <em>an unordered collection of distinct hashable objects.</em> The objects have to be hashable so that finding, adding and removing elements can be done faster than looking at each individual element every time you perform these operations. The specific algorithms used are explained in the <a href="http://en.wikipedia.org/wiki/Hash_tree" rel="noreferrer">Wikipedia article</a>. Pythons hashing algorithms are explained on <a href="http://effbot.org/zone/python-hash.htm" rel="noreferrer">effbot.org</a> and pythons <code>__hash__</code> function in the <a href="http://docs.python.org/reference/datamodel.html#object.__hash__" rel="noreferrer">python reference</a>.</p>
<p>Some facts:</p>
<ul>
<li><strong>Set elements</strong> as well as <strong>dictionary keys</strong> have to be hashable</li>
<li>Some unhashable datatypes:

<ul>
<li><code>list</code>: use <code>tuple</code> instead</li>
<li><code>set</code>: use <code>frozenset</code> instead</li>
<li><code>dict</code>: has no official counterpart, but there are some 
<a href="https://stackoverflow.com/questions/1151658/python-hashable-dicts">recipes</a></li>
</ul></li>
<li>Object instances are hashable by default with each instance having a unique hash. You can  override this behavior as explained in the python reference.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.update" rel="noreferrer"><code>set.update()</code></a> or <code>|=</code></p>
<pre><code>&gt;&gt;&gt; a = set('abc')
&gt;&gt;&gt; l = ['d', 'e']
&gt;&gt;&gt; a.update(l)
&gt;&gt;&gt; a
{'e', 'b', 'c', 'd', 'a'}

&gt;&gt;&gt; l = ['f', 'g']
&gt;&gt;&gt; a |= set(l)
&gt;&gt;&gt; a
{'e', 'b', 'f', 'c', 'd', 'g', 'a'}
</code></pre>
<p>edit: If you want to add the list itself and not its members, then you must use a tuple, unfortunately. Set members must be <a href="https://stackoverflow.com/questions/14535730/what-do-you-mean-by-hashable-in-python">hashable</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To <strong>add the elements of a list to a set</strong>, use <code>update</code></p>
<p>From <a href="https://docs.python.org/2/library/sets.html" rel="noreferrer">https://docs.python.org/2/library/sets.html</a></p>
<blockquote>
<p>s.update(t): return set s with elements added from t</p>
</blockquote>
<p>E.g.</p>
<pre><code>&gt;&gt;&gt; s = set([1, 2])
&gt;&gt;&gt; l = [3, 4]
&gt;&gt;&gt; s.update(l)
&gt;&gt;&gt; s
{1, 2, 3, 4}
</code></pre>
<p>If you instead want to <strong>add the entire list as a single element</strong> to the set, you can't because lists aren't hashable.  You could instead add a tuple, e.g. <code>s.add(tuple(l))</code>.  See also <a href="https://stackoverflow.com/questions/13464152/typeerror-unhashable-type-list-when-using-built-in-set-function">TypeError: unhashable type: 'list' when using built-in set function</a> for more information on that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully this helps:</p>
<pre><code>&gt;&gt;&gt; seta = set('1234')
&gt;&gt;&gt; listb = ['a','b','c']
&gt;&gt;&gt; seta.union(listb)
set(['a', 'c', 'b', '1', '3', '2', '4'])
&gt;&gt;&gt; seta
set(['1', '3', '2', '4'])
&gt;&gt;&gt; seta = seta.union(listb)
&gt;&gt;&gt; seta
set(['a', 'c', 'b', '1', '3', '2', '4'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please notice the function <code>set.update()</code>. The documentation says:</p>
<blockquote>
<p>Update a set with the union of itself and others.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strong>list objects are unhashable</strong>. you might want to turn them in to tuples though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets can't have mutable (changeable) elements/members. A list, being mutable, cannot be a member of a set.</p>
<p>As sets are mutable, you cannot have a set of sets!
You can have a set of frozensets though.</p>
<p>(The same kind of "mutability requirement" applies to the keys of a dict.)</p>
<p>Other answers have already given you code, I hope this gives a bit of insight.
I'm hoping Alex Martelli will answer with even more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to add a tuple, not a list:</p>
<pre><code>&gt;&gt;&gt; a=set('abcde')
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd'])
&gt;&gt;&gt; l=['f','g']
&gt;&gt;&gt; l
['f', 'g']
&gt;&gt;&gt; t = tuple(l)
&gt;&gt;&gt; t
('f', 'g')
&gt;&gt;&gt; a.add(t)
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
</code></pre>
<p>If you have a list, you can convert to the tuple, as shown above. A tuple is immutable, so it can be added to the set.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll want to use tuples, which are hashable (you can't hash a mutable object like a list).</p>
<pre><code>&gt;&gt;&gt; a = set("abcde")
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd'])
&gt;&gt;&gt; t = ('f', 'g')
&gt;&gt;&gt; a.add(t)
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found I needed to do something similar today. The algorithm knew when it was creating a new list that needed to added to the set, but not when it would have finished operating on the list.</p>
<p>Anyway, the behaviour I wanted was for set to use <code>id</code> rather than <code>hash</code>. As such I found <code>mydict[id(mylist)] = mylist</code> instead of <code>myset.add(mylist)</code> to offer the behaviour I wanted.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is how I usually do it:</p>
<pre><code>def add_list_to_set(my_list, my_set):
    [my_set.add(each) for each in my_list]
return my_set
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do:</p>
<pre><code>set(tuple(i) for i in L)
</code></pre>
</div>
<span class="comment-copy">Do you want to add the list to the set or the items in the list?</span>
<span class="comment-copy">The list itself - I want to have a set of lists.</span>
<span class="comment-copy">Then use the tuple option that Otto answered.</span>
<span class="comment-copy">And if you ever want to add a set to a set, use frozenset.</span>
<span class="comment-copy"><a href="http://docs.python.org/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a> might be considered "official" counterpart of the <code>dict</code>.</span>
<span class="comment-copy">@FogleBird or the union operator: |=</span>
<span class="comment-copy">@Wahnfrieden: that is adding the <i>contents</i> of a set, not the set itself.</span>
<span class="comment-copy">Well answered. The tuple() function is also worth mentioning.</span>
<span class="comment-copy">Works like charm</span>
<span class="comment-copy">This doesn't answer the question (since the OP wants to add the list itself to the set) but it was the answer that I needed when Google brought me here :-)</span>
<span class="comment-copy">Well, it seems like the most relevant answer to the question to me... for instance, if b = set([1]), b.update([7,25]) will give b the following value : set([1, 25, 7]) ---&gt; Isn't it what we're looking for here?</span>
