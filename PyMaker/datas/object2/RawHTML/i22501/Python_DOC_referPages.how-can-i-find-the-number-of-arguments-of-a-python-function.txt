<div class="post-text" itemprop="text">
<p>How can I find the number of arguments of a Python function? I need to know how many normal arguments it has and how many named arguments.</p>
<p>Example:</p>
<pre><code>def someMethod(self, arg1, kwarg1=None):
    pass
</code></pre>
<p>This method has 2 arguments and 1 named argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>The previously accepted answer has been <a href="https://docs.python.org/3/library/inspect.html#inspect.getargspec" rel="noreferrer"><em>deprecated</em></a> as of <code>Python 3.0</code>. Instead of using <code>inspect.getargspec</code> you should now opt for the <code>Signature</code> class which superseded it. </p>
<p>Creating a Signature for the function is easy via the <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="noreferrer"><code>signature</code> function</a>:</p>
<pre><code>from inspect import signature

def someMethod(self, arg1, kwarg1=None):
    pass

sig = signature(someMethod)
</code></pre>
<p>Now, you can either view its parameters quickly by <code>str</code>ing it:</p>
<pre><code>str(sig)  # returns: '(self, arg1, kwarg1=None)'
</code></pre>
<p>or you can also get a mapping of attribute names to parameter objects via <code>sig.parameters</code>. </p>
<pre><code>params = sig.parameters 
print(params['kwarg1']) # prints: kwarg1=20
</code></pre>
<p>Additionally, you can call <code>len</code> on <code>sig.parameters</code> to also see the number of arguments this function requires:</p>
<pre><code>print(len(params))  # 3
</code></pre>
<p>Each entry in the <code>params</code> mapping is actually a <a href="https://docs.python.org/3/library/inspect.html#inspect.Parameter" rel="noreferrer"><code>Parameter</code> object</a> that has further attributes making your life easier. For example, grabbing a parameter and viewing its default value is now easily performed with:</p>
<pre><code>kwarg1 = params['kwarg1']
kwarg1.default # returns: None
</code></pre>
<p>similarly for the rest of the objects contained in <code>parameters</code>.</p>
<hr/>
<p>As for Python <code>2.x</code> users, while <code>inspect.getargspec</code> <em>isn't</em> deprecated, the language will soon be :-). The <code>Signature</code> class isn't available in the <code>2.x</code> series and won't be. So you still need to work with <a href="https://docs.python.org/3/library/inspect.html#inspect.getargspec" rel="noreferrer"><code>inspect.getargspec</code></a>.</p>
<p>As for transitioning between Python 2 and 3, if you have code that relies on the interface of <code>getargspec</code> in Python 2 and switching to <code>signature</code> in <code>3</code> is too difficult, <em>you do have the valuable option</em> of using <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="noreferrer"><code>inspect.getfullargspec</code></a>. It offers a similar interface to <code>getargspec</code> (a single callable argument) in order to grab the arguments of a function while also handling some additional cases that <code>getargspec</code> doesn't:</p>
<pre><code>from inspect import getfullargspec

def someMethod(self, arg1, kwarg1=None):
    pass

args = getfullargspec(someMethod)
</code></pre>
<p>As with <code>getargspec</code>, <code>getfullargspec</code> returns a <code>NamedTuple</code> which contains the arguments.</p>
<pre><code>print(args)
FullArgSpec(args=['self', 'arg1', 'kwarg1'], varargs=None, varkw=None, defaults=(None,), kwonlyargs=[], kwonlydefaults=None, annotations={})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import inspect
inspect.getargspec(someMethod)
</code></pre>
<p>see <a href="http://docs.python.org/library/inspect.html#classes-and-functions" rel="noreferrer">the inspect module</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>someMethod.func_code.co_argcount
</code></pre>
<p>or, if the current function name is undetermined:</p>
<pre><code>import sys

sys._getframe().func_code.co_argcount
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer">inspect.getargspec()</a></p>
<blockquote>
<p>Get the names and default values of a function’s arguments. A tuple of four things is returned: (args, varargs, varkw, defaults). args is a list of the argument names (it may contain nested lists). varargs and varkw are the names of the * and ** arguments or None. defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args.</p>
<p>Changed in version 2.6: Returns a named tuple ArgSpec(args, varargs, keywords, defaults).</p>
</blockquote>
<p>See <a href="https://stackoverflow.com/questions/196960/can-you-list-the-keyword-arguments-a-python-function-receives">can-you-list-the-keyword-arguments-a-python-function-receives</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to the above, I've also seen that the most of the times help() function really helps</p>
<p>For eg, it gives all the details about the arguments it takes. </p>
<pre><code>help(&lt;method&gt;)
</code></pre>
<p>gives the below</p>
<pre><code>method(self, **kwargs) method of apiclient.discovery.Resource instance
Retrieves a report which is a collection of properties / statistics for a specific customer.

Args:
  date: string, Represents the date in yyyy-mm-dd format for which the data is to be fetched. (required)
  pageToken: string, Token to specify next page.
  parameters: string, Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1, app_name2:param_name2.

Returns:
  An object of the form:

    { # JSON template for a collection of usage reports.
    "nextPageToken": "A String", # Token for retrieving the next page
    "kind": "admin#reports#usageReports", # Th
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>inspect.getargspec() to meet your needs</p>
<pre><code>from inspect import getargspec

def func(a, b):
    pass
print len(getargspec(func).args)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Good news for folks who want to do this in a portable way between Python 2 and Python 3.6+: use <code>inpsect.getfullargspec( )</code> method. It works in both Python 2.x and 3.6+    </p>
<p>As Jim Fasarakis Hilliard and others have pointed out, it used to be like this:<br/>
1. In Python 2.x: use <code>inspect.getargspec( )</code><br/>
2. In Python 3.x: use signature, as <code>getargspec( )</code> and <code>getfullargspec( )</code> were deprecated.  </p>
<p>However, starting Python 3.6 (by popular demand?), things have changed towards better:   </p>
<p>From the Python 3 <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">documentation page</a>:</p>
<blockquote>
<p><strong>inspect.getfullargspec(func)</strong></p>
<p><em>Changed in version 3.6</em>: This method was previously documented as deprecated in favour of <code>signature()</code> in Python 3.5, but that decision has been reversed in order to restore a clearly supported standard interface for single-source Python 2/3 code migrating away from the legacy <code>getargspec()</code> API.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As other answers suggest, <code>getargspec</code> works well as long as the thing being queried is actually a function. It does not work for <em>built-in</em> functions such as <code>open</code>, <code>len</code>, etc, and will throw an exception in such cases:</p>
<pre><code>TypeError: &lt;built-in function open&gt; is not a Python function
</code></pre>
<p>The below function (inspired by <a href="https://stackoverflow.com/a/3276823/712506">this answer</a>) demonstrates a workaround. It returns the number of args expected by <code>f</code>:</p>
<pre><code>from inspect import isfunction, getargspec
def num_args(f):
  if isfunction(f):
    return len(getargspec(f).args)
  else:
    spec = f.__doc__.split('\n')[0]
    args = spec[spec.find('(')+1:spec.find(')')]
    return args.count(',')+1 if args else 0
</code></pre>
<p>The idea is to parse the function spec out of the <code>__doc__</code> string. Obviously this relies on the format of said string so is hardly robust!</p>
</div>
<span class="comment-copy">the question is fully warranted; if it wasn't (since you can always read the source), there wouldn't be any justification for the <code>inspect</code> standard library module.</span>
<span class="comment-copy">Plenty of languages implement at least one unjustified feature. The <code>inspect</code> module has a lot of other features, so it is unfair to say that the whole module would be unjustified if one particular function in it was. Moreover, it's easy to see how this feature could be used poorly. (See <a href="http://stackoverflow.com/questions/741950">stackoverflow.com/questions/741950</a>). That said, it is a useful feature, especially for writing decorators and other functions that operate on function.</span>
<span class="comment-copy">You're welcome @GeorgSchölly.  I was surprised a popular question like this one offered solutions that either were deprecated or down right sneaky (peeking in the <code>co_argcount</code> attribute.)</span>
<span class="comment-copy"><code>getfullargspec</code> is not implemented in Python 2.x, you need to use <code>getargspec</code></span>
<span class="comment-copy"><code>getargspec</code> does not work on built-in functions: <code>getargspec(open)</code> gives <code>TypeError: &lt;built-in function open&gt; is not a Python function</code> See <a href="http://stackoverflow.com/questions/3276635/how-to-get-the-number-of-args-of-a-built-in-function-in-python">this answer</a> for some ideas...</span>
<span class="comment-copy">In your last example, when you do <code>print(args)</code> you don't get <code>defaults=(None,)</code> you get <code>defaults=None</code>.</span>
<span class="comment-copy">Generally what you want, but this doesn't work for built-in functions. The only way to know to get this info for builtins is to parse their <b>doc</b> string, which is fugly but doable.</span>
<span class="comment-copy">This is deprecated in Python 3: <a href="https://docs.python.org/3/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer">docs.python.org/3/library/inspect.html#inspect.getargspec</a></span>
<span class="comment-copy">Is there a solution which is not deprecated in Python 3?</span>
<span class="comment-copy">If you follow the link you will see that it recommends using <code>inspect.signature</code> - <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer">docs.python.org/3/library/inspect.html#inspect.signature</a></span>
<span class="comment-copy">I posted another possible approach for builtin functions without parsing the docstring here: <a href="https://stackoverflow.com/questions/48567935/get-parameter-count-of-builtin-functions-in-python" title="get parameter count of builtin functions in python">stackoverflow.com/questions/48567935/…</a></span>
<span class="comment-copy">@elyase, just do: <code>dir(someMethod)</code> -&gt; <code>'func_code'</code>; Go further: <code>dir(someMethod.func_code)</code> -&gt; <code>'co_argcount'</code>; You can use the built-in <code>dir()</code> to determine available methods of an object.</span>
<span class="comment-copy">@elyase I was courious too, so I found this <a href="https://docs.python.org/2/library/inspect.html#types-and-members" rel="nofollow noreferrer">docs.python.org/2/library/inspect.html#types-and-members</a></span>
<span class="comment-copy">To support Python 3: <code>six.get_function_code(someMethod).co_argcount</code></span>
<span class="comment-copy">@noisecapella no need for a third party module, when you can simply do <code>some_method.__code__.co_argcount</code></span>
<span class="comment-copy">In general, you <i>shouldn't</i> be peeking inside the function object to look at these things. <code>co_argcount</code> is used internally during evaluation of the code object. What I'm trying to say is, there's really no guarantees that these attributes won't change from one release to the other.</span>
<span class="comment-copy">It would be good for people to leave a comment on what is wrong with a post than to just click on the minus button.</span>
<span class="comment-copy"><code>help</code> function only shows what the docstring says. Have you even tested if it works with the function definition in the question?</span>
<span class="comment-copy">@0xc0de - Have you tested it? Because it actually does work. <code>help()</code> spits out more than just the docstring - even on undocumented code it still prints out the argspec and tells you where the code was defined. The person who posted the original question wasn't clear whether they needed an answer that was machine or human friendly. If it only needs to be human friendly, <code>help()</code> is perfectly adequate.</span>
<span class="comment-copy">@ArtOfWarfare not at all, as now you would have to parse whatever <code>help()</code> returns, and try and find the <code>args</code> and <code>kwargs</code>.</span>
<span class="comment-copy">Welcome to Stack Overflow! Please don't answer just with source code. Try to provide a nice description about how your solution works. See: <a href="https://stackoverflow.com/help/how-to-answer">How do I write a good answer?</a>. Thanks</span>
