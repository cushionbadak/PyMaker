<div class="post-text" itemprop="text">
<p>In Python, how do you get the last element of a list?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>some_list[-1]</code> is the shortest and most Pythonic.</p>
<p>In fact, you can do much more with this syntax. The <code>some_list[-n]</code> syntax gets the nth-to-last element. So <code>some_list[-1]</code> gets the last element, <code>some_list[-2]</code> gets the second to last, etc, all the way down to <code>some_list[-len(some_list)]</code>, which gives you the first element.</p>
<p>You can also set list elements in this way. For instance:</p>
<pre><code>&gt;&gt;&gt; some_list = [1, 2, 3]
&gt;&gt;&gt; some_list[-1] = 5 # Set the last element
&gt;&gt;&gt; some_list[-2] = 3 # Set the second to last element
&gt;&gt;&gt; some_list
[1, 3, 5]
</code></pre>
<p>Note that getting a list item by index will raise an <a href="https://docs.python.org/3/library/exceptions.html#IndexError" rel="noreferrer"><code>IndexError</code></a> if the expected item doesn't exist. This means that <code>some_list[-1]</code> will raise an exception if <code>some_list</code> is empty, because an empty list can't have a last element.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your <code>str()</code> or <code>list()</code> objects might end up being empty as so: <code>astr = ''</code> or <code>alist = []</code>, then you might want to use <code>alist[-1:]</code> instead of <code>alist[-1]</code> for object "sameness".</p>
<p>The significance of this is:</p>
<pre><code>alist = []
alist[-1]   # will generate an IndexError exception whereas 
alist[-1:]  # will return an empty list
astr = ''
astr[-1]    # will generate an IndexError exception whereas
astr[-1:]   # will return an empty str
</code></pre>
<p>Where the distinction being made is that returning an empty list object or empty str object is more "last element"-like then an exception object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do:</p>
<pre><code>alist.pop()
</code></pre>
<p>It depends on what you want to do with your list because the <code>pop()</code> method will delete the last element.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to display last element in python is</p>
<pre><code>&gt;&gt;&gt; list[-1:] # returns indexed value
    [3]
&gt;&gt;&gt; list[-1]  # returns value
    3
</code></pre>
<p>there are many other method to achieve such a goal but these are short and sweet to use.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>In Python, how do you get the last element of a list?</h2>
</blockquote>
<p>To just get the last element, </p>
<ul>
<li>without modifying the list, and </li>
<li>assuming you know the list <em>has</em> a last element (i.e. it is nonempty) </li>
</ul>
<p>pass <code>-1</code> to the subscript notation:</p>
<pre><code>&gt;&gt;&gt; a_list = ['zero', 'one', 'two', 'three']
&gt;&gt;&gt; a_list[-1]
'three'
</code></pre>
<h2>Explanation</h2>
<p>Indexes and slices can take negative integers as arguments.</p>
<p>I have modified an example <a href="https://docs.python.org/3/tutorial/introduction.html" rel="noreferrer">from the documentation</a> to indicate which item in a sequence each index references, in this case, in the string <code>"Python"</code>, <code>-1</code> references the last element, the character, <code>'n'</code>:</p>
<pre><code> +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
   0   1   2   3   4   5 
  -6  -5  -4  -3  -2  -1

&gt;&gt;&gt; p = 'Python'
&gt;&gt;&gt; p[-1]
'n'
</code></pre>
<h2>Assignment via iterable unpacking</h2>
<p>This method may unnecessarily materialize a second list for the purposes of just getting the last element, but for the sake of completeness (and since it supports any iterable - not just lists):</p>
<pre><code>&gt;&gt;&gt; *head, last = a_list
&gt;&gt;&gt; last
'three'
</code></pre>
<p>The variable name, head is bound to the unnecessary newly created list:</p>
<pre><code>&gt;&gt;&gt; head
['zero', 'one', 'two']
</code></pre>
<p>If you intend to do nothing with that list, this would be more apropos:</p>
<pre><code>*_, last = a_list
</code></pre>
<p>Or, really, if you know it's a list (or at least accepts subscript notation):</p>
<pre><code>last = a_list[-1]
</code></pre>
<h2>In a function</h2>
<p>A commenter said:</p>
<blockquote>
<p>I wish Python had a function for first() and last() like Lisp does... it would get rid of a lot of unnecessary lambda functions.</p>
</blockquote>
<p>These would be quite simple to define:</p>
<pre><code>def last(a_list):
    return a_list[-1]

def first(a_list):
    return a_list[0]
</code></pre>
<p>Or use <code>operator.itemgetter</code>:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; last = operator.itemgetter(-1)
&gt;&gt;&gt; first = operator.itemgetter(0)
</code></pre>
<p>In either case:</p>
<pre><code>&gt;&gt;&gt; last(a_list)
'three'
&gt;&gt;&gt; first(a_list)
'zero'
</code></pre>
<h2>Special cases</h2>
<p>If you're doing something more complicated, you may find it more performant to get the last element in slightly different ways.</p>
<p>If you're new to programming, you should avoid this section, because it couples otherwise semantically different parts of algorithms together. If you change your algorithm in one place, it may have an unintended impact on another line of code. </p>
<p>I try to provide caveats and conditions as completely as I can, but I may have missed something. Please comment if you think I'm leaving a caveat out.</p>
<h3>Slicing</h3>
<p>A slice of a list returns a new list - so we can slice from -1 to the end if we are going to want the element in a new list:</p>
<pre><code>&gt;&gt;&gt; a_slice = a_list[-1:]
&gt;&gt;&gt; a_slice
['three']
</code></pre>
<p>This has the upside of not failing if the list is empty:</p>
<pre><code>&gt;&gt;&gt; empty_list = []
&gt;&gt;&gt; tail = empty_list[-1:]
&gt;&gt;&gt; if tail:
...     do_something(tail)
</code></pre>
<p>Whereas attempting to access by index raises an <code>IndexError</code> which would need to be handled:</p>
<pre><code>&gt;&gt;&gt; empty_list[-1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
<p>But again, slicing for this purpose should only be done if you need:</p>
<ul>
<li>a new list created</li>
<li>and the new list to be empty if the prior list was empty.</li>
</ul>
<h3><code>for</code> loops</h3>
<p>As a feature of Python, there is no inner scoping in a <code>for</code> loop.</p>
<p>If you're performing a complete iteration over the list already, the last element will still be referenced by the variable name assigned in the loop:</p>
<pre><code>&gt;&gt;&gt; def do_something(arg): pass
&gt;&gt;&gt; for item in a_list:
...     do_something(item)
...     
&gt;&gt;&gt; item
'three'
</code></pre>
<p>This is not semantically the last thing in the list. This is semantically the last thing that the name, <code>item</code>, was bound to.</p>
<pre><code>&gt;&gt;&gt; def do_something(arg): raise Exception
&gt;&gt;&gt; for item in a_list:
...     do_something(item)
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in do_something
Exception
&gt;&gt;&gt; item
'zero'
</code></pre>
<p>Thus this should only be used to get the last element if you </p>
<ul>
<li>are already looping, and </li>
<li>you know the loop will finish (not break or exit due to errors), otherwise it will point to the last element referenced by the loop.</li>
</ul>
<h3>Getting and removing it</h3>
<p>We can also mutate our original list by removing and returning the last element:</p>
<pre><code>&gt;&gt;&gt; a_list.pop(-1)
'three'
&gt;&gt;&gt; a_list
['zero', 'one', 'two']
</code></pre>
<p>But now the original list is modified. </p>
<p>(<code>-1</code> is actually the default argument, so <code>list.pop</code> can be used without an index argument):</p>
<pre><code>&gt;&gt;&gt; a_list.pop()
'two'
</code></pre>
<p>Only do this if</p>
<ul>
<li>you know the list has elements in it, or are prepared to handle the exception if it is empty, and</li>
<li>you do intend to remove the last element from the list, treating it like a stack. </li>
</ul>
<p>These are valid use-cases, but not very common.</p>
<h3>Saving the rest of the reverse for later:</h3>
<p>I don't know why you'd do it, but for completeness, since <code>reversed</code> returns an <strong><em>iterator</em></strong> (which supports the iterator protocol) you can pass its result to <code>next</code>:</p>
<pre><code>&gt;&gt;&gt; next(reversed([1,2,3]))
3
</code></pre>
<p>So it's like doing the reverse of this:</p>
<pre><code>&gt;&gt;&gt; next(iter([1,2,3]))
1
</code></pre>
<p>But I can't think of a good reason to do this, unless you'll need the rest of the reverse iterator later, which would probably look more like this:</p>
<pre><code>reverse_iterator = reversed([1,2,3])
last_element = next(reverse_iterator)

use_later = list(reverse_iterator)
</code></pre>
<p>and now:</p>
<pre><code>&gt;&gt;&gt; use_later
[2, 1]
&gt;&gt;&gt; last_element
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = [ 1 , 2 , 3 , 4 , 5]

#------------------------------------
# Method-1 : Last index
#------------------------------------

print(mylist[-1])


#------------------------------------
# Method-2 : Using len 
#------------------------------------

print(mylist[len(mylist) - 1])


#------------------------------------
# Method-3 : Using pop, pop will remove the last 
#            element from the list.
#------------------------------------

print(mylist.pop())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>some_list = [1, 2, 3]</p>
</blockquote>
<p>Method 1:</p>
<pre><code>some_list[-1]
</code></pre>
<p>Method 2:</p>
<pre><code>**some_list.reverse()** 

**some_list[0]**
</code></pre>
<p>Method 3:</p>
<pre><code>some_list.pop() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want to just <strong>get</strong> the last value of list, you should use :</p>
<pre><code>your_list[-1]
</code></pre>
<p><strong>BUT</strong> if you want to <strong>get</strong> value and also <strong>remove</strong> it from list, you can use :</p>
<pre><code>your_list.pop()
</code></pre>
<p><strong>OR:</strong> you can pop with index too...</p>
<pre><code>your_list.pop(-1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>lst[-1]</code> is the best approach, but with general iterables, consider <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.last" rel="noreferrer"><code>more_itertools.last</code></a>:</p>
<p><strong>Code</strong></p>
<pre><code>import more_itertools as mit


mit.last([0, 1, 2, 3])
# 3

mit.last(iter([1, 2, 3]))
# 3

mit.last([], "some default")
# 'some default'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok, but what about common in almost every language way <code>items[len(items) - 1]</code>? This is IMO the easiest way to get last element, because it does not require anything <em>pythonic</em> knowledge.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list[-1]</code> will retrieve the last element of the list without changing the list.
<code>list.pop()</code> will retrieve the last element of the list, but it will mutate/change the original list. Usually, mutating the original list is not recommended.</p>
<p>Alternatively, if, for some reason, you're looking for something less pythonic, you could use <code>list[len(list)-1]</code>, assuming the list is not empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the code below, if you do not want to get IndexError when the list is empty.</p>
<pre><code>next(reversed(some_list), None)
</code></pre>
</div>
<span class="comment-copy">Downvoted because I feel the core of this answer is incorrect. Getting a list when you want an element only postpones the inevitable "list index out of range" - and that's what should happen when attempting to get an element from an empty list. For Strings astr[-1:] could be a valid approach since it returns the same type as astr[-1], but I don't think the ':' helps to deal with empty lists (and the question is about lists). If the idea is to use "alist[-1:]" as a conditional instead of "len(alist) &gt; 0", I think it's much more readable to use the later. (happy to upvote if I missed something)</span>
<span class="comment-copy">You're down vote is understandable and valid. However I find there are two basic camps on what exception objects are intended for. One certainty is that exceptions halt your app. One camp uses exceptions in try clauses as the other camp would use the if len(alist)&gt;0: structure instead. In any event, exceptions are objects that halt your code. And as such to me are less sequence object like then returned "null"-sequences which do not halt your code. My preference is to use IF clauses to test for "null" objects instead of objects that halt my code that  I preempt with a try clause.</span>
<span class="comment-copy">Upvoted because slice syntax is worth the discussion, however I agree with @StanKurdziel that the morphology is wrong, you're just moving the goalpost -  I found my own solution was related to the primary use of 'add this to the list if you didn't already add it'  (delta line graphs), so the combined expression <code>if len(my_vector) == 0 or my_vector[-1] != update_val</code> is a workable pattern. but  it's certainly not a global solution - it would be nice to have a syntax form where None was the result</span>
<span class="comment-copy">Upvoted for the pure obsessive value of this discussion.</span>
<span class="comment-copy"><code>xs[-1] if xs else None</code></span>
<span class="comment-copy">if your list length is zero, this solution works while <code>list[-1]</code> will error.</span>
<span class="comment-copy">You still get IndexError: list out of range when you call this code on an empty list: a[-1:][0] == 'news'   Therefore the answer is incomplete and will still result in errors.  You still need to add another line of code to test for empty list before calling list[-1:][0], therefore this answer is no better than just calling list[-1]</span>
<span class="comment-copy">What? Why would you do <code>a[-1:][0]</code> <b>at all</b>? He provides <code>a[-1]</code> anyways too. Explanation please?</span>
<span class="comment-copy">Methods 1 and 3 have been mentioned years ago and Method 2 is so inefficient it is not worth mentioning</span>
<span class="comment-copy">items[len(items) - 1] is essentially what Python is doing under the hood, but since the len of a sequence is already stored in the sequence there is no need to count it, you're creating more work than is necessary.</span>
<span class="comment-copy">since you're writing Python, you really should try to be more Pythonic</span>
<span class="comment-copy">@MichaelWu There is no sense to do that. Pythonic way often is not self-explanatory, need more attention where you have to introduce new persons to project and, of course, wouldn't work when you have to switch to other languages like Java - you can't use Python specific knowledge. When you omit pythonic way as is possible, then also returning to project after months/years is much easier.</span>
<span class="comment-copy">@Pneumokok You make point, but I would argue that list indexing is a <i>very</i> basic Python technique compared to say generators. Also, why bother to use anything other than C or maybe javascript if you aren't going to take advantage of individual language tools and syntax? Then you can be consistently doing everything the hard way in all of your projects.</span>
<span class="comment-copy">Although it's not very pythonic I think this is in some respects better than the <code>some_list[-1]</code> approach because it's more logical, and shows what it is actually doing better than <code>some_list[-1]</code> in my opinion.</span>
<span class="comment-copy">It's probably bad to assume that mutating the original list is usually not recommended, because, after all, it is very commonly carried out</span>
