<div class="post-text" itemprop="text">
<p>Let's say I have an id of a Python object, which I retrieved by doing <code>id(thing)</code>. How do I find <code>thing</code> again by the id number I was given?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll probably want to consider implementing it another way. Are you aware of the weakref module?</p>
<p>(Edited) The Python <a href="http://docs.python.org/library/weakref.html" rel="noreferrer">weakref module</a> lets you keep references, dictionary references, and proxies to objects without having those references count in the reference counter. They're like symbolic links.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the object is still there, this can be done by <a href="https://docs.python.org/3/library/ctypes.html" rel="noreferrer"><code>ctypes</code></a>:</p>
<pre><code>import ctypes
a = "hello world"
print ctypes.cast(id(a), ctypes.py_object).value
</code></pre>
<p>output:</p>
<pre><code>hello world
</code></pre>
<p>If you don't know whether the object is still there, this is a recipe for undefined behavior and weird crashes or worse, so be careful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer, you can't.</p>
<p>Long answer, you can maintain a dict for mapping IDs to objects, or look the ID up by exhaustive search of <code>gc.get_objects()</code>, but this will create one of two problems: either the dict's reference will keep the object alive and prevent GC, or (if it's a WeakValue dict or you use <code>gc.get_objects()</code>) the ID may be deallocated and reused for a completely different object.</p>
<p>Basically, if you're trying to do this, you probably need to do something differently.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/library/gc.html" rel="noreferrer">gc</a> module to get all the objects currently tracked by the Python garbage collector.</p>
<pre><code>import gc

def objects_by_id(id_):
    for obj in gc.get_objects():
        if id(obj) == id_:
            return obj
    raise Exception("No found")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just mentioning this module for completeness. <a href="http://www.friday.com/bbum/2007/08/24/python-di/" rel="noreferrer">This code by Bill Bumgarner</a> includes a C extension to do what you want without looping throughout every object in existence.</p>
<p>The code for the function is quite straightforward. Every Python object is represented in C by a pointer to <a href="http://docs.python.org/2/c-api/structures.html" rel="noreferrer">a <code>PyObject</code> struct</a>. Because <code>id(x)</code> is just the memory address of this struct, we can retrieve the Python object just by treating <code>x</code> as a pointer to a <code>PyObject</code>, then calling <code>Py_INCREF</code> to tell the garbage collector that we're creating a new reference to the object.</p>
<pre><code>static PyObject *
di_di(PyObject *self, PyObject *args)
{
    PyObject *obj;
    if (!PyArg_ParseTuple(args, "l:di", &amp;obj))
        return  NULL;

    Py_INCREF(obj);
    return obj;
}
</code></pre>
<p>If the original object no longer exists then the result is undefined. It may crash, but it could also return a reference to a new object that's taken the location of the old one in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>eGenix mxTools library does provide such a function, although marked as "expert-only": <a href="http://www.egenix.com/products/python/mxBase/mxTools/doc/#_Toc199521822" rel="nofollow noreferrer"><code>mx.Tools.makeref(id)</code></a> </p>
</div>
<div class="post-text" itemprop="text">
<p>This will do:</p>
<pre><code>a = 0
id_a = id(a)
variables = {**locals(), **globals()}
for var in variables:
    exec('var_id=id(%s)'%var)
    if var_id == id_a:
        exec('the_variable=%s'%var)
print(the_variable)
print(id(the_variable))
</code></pre>
<p>But I suggest implementing a more decent way.</p>
</div>
<span class="comment-copy">I'm curious: why do you want to do this? What is your objective?</span>
<span class="comment-copy">@Craig McQueen: <a href="http://stackoverflow.com/questions/1400295/python-class-for-pickle-and-copy-persistent-object" title="python class for pickle and copy persistent object">stackoverflow.com/questions/1400295/â€¦</a></span>
<span class="comment-copy">I couldn't re-find the source of this but I thought that what is returned by id() is whatever the particular distribution wants it to be. Restated CPython may, at this time, return a memory-like address now, but other distributions could return different object types or ints that are not memory pointers. It would be nice if there was a built in function to obtain an object by what is returned by id(). Although other then persistence use-cases are hard to imagine. Also although *variable, like C seems to make sense; I love Python for it's lack of punctuation trickery like most other languages.</span>
<span class="comment-copy">Suggest you see answer to duplicate question <a href="http://stackoverflow.com/questions/15011674/is-it-possible-to-dereference-variable-ids"><b><i>Is it possible to dereference variable id's?</i></b></a></span>
<span class="comment-copy">Legitimate reason to do this: debugging. The default <code>repr</code> on objects includes their memory address. Sometimes when debugging (especially interactively), you want to be able to access that object without trying to dig into where it is defined.</span>
<span class="comment-copy">Sometimes you can't create weak reference to the object, e.g: TypeError: cannot create weak reference to 'lxml.etree._Element' object</span>
<span class="comment-copy">In CPython, today, anyhow. :^)</span>
<span class="comment-copy">This one is a perfect answer!</span>
<span class="comment-copy">@HamidFzM No, not really. If I have an ID, I maybe don't even know whether the object still exists or not.</span>
<span class="comment-copy"><code>repr</code> outputs the hexadecimal representation of id(a), in order to use ctypes one must convert it back to decimal by using <code>int(hexid, 0)</code>. just my two cents here</span>
<span class="comment-copy">Is there a way to check if a memory address exists first before doing this? If you pass an invalid value (say, because it's been garbage collected), the interpreter segfaults.</span>
<span class="comment-copy">I've been intending to throw away the id reference in the object's <code>__del__</code>, do you think that this will make sure things will not break?</span>
<span class="comment-copy">+1: Agree:  Don't do this.  Simply create a proper dictionary of objects with proper keys -- you'll be a lot happier.</span>
<span class="comment-copy">@cool-RR: Yeah, you should be safe with that.</span>
<span class="comment-copy">This has an aliasing issue: an ID obtained at an arbitrary point in the past may now refer to a different object.</span>
<span class="comment-copy">As long as you've maintained a reference to the object, that won't happen.  Just the same, this is generally a bad idea.</span>
<span class="comment-copy">I agree with many of the other commenters: don't do this.  Make your own dictionary of objects.</span>
