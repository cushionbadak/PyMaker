<div class="post-text" itemprop="text">
<p>I want to do something like:</p>
<pre><code>foo = {'foo':1,'zip':2,'zam':3,'bar':4}

if ("foo","bar") in foo:
    #do stuff
</code></pre>
<p>How do I check whether both 'foo' and 'bar' are in dict foo?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you could do this:</p>
<pre><code>&gt;&gt;&gt; if all (k in foo for k in ("foo","bar")):
...     print "They're there!"
...
They're there!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>if set(("foo", "bar")) &lt;= set(myDict): ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Simple benchmarking rig for 3 of the alternatives.</h2>
<p>Put in your own values for D and Q</p>
<pre><code>
&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; setup='''from random import randint as R;d=dict((str(R(0,1000000)),R(0,1000000)) for i in range(D));q=dict((str(R(0,1000000)),R(0,1000000)) for i in range(Q));print("looking for %s items in %s"%(len(q),len(d)))'''

&gt;&gt;&gt; Timer('set(q) &lt;= set(d)','D=1000000;Q=100;'+setup).timeit(1)
looking for 100 items in 632499
0.28672504425048828

#This one only works for Python3
&gt;&gt;&gt; Timer('set(q) &lt;= d.keys()','D=1000000;Q=100;'+setup).timeit(1)
looking for 100 items in 632084
2.5987625122070312e-05

&gt;&gt;&gt; Timer('all(k in d for k in q)','D=1000000;Q=100;'+setup).timeit(1)
looking for 100 items in 632219
1.1920928955078125e-05
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to wrap the left side in a set. You can just do this:</p>
<pre class="lang-py prettyprint-override"><code>if {'foo', 'bar'} &lt;= set(some_dict):
    pass
</code></pre>
<p>This also performs better than the <code>all(k in d...)</code> solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <strong><a href="http://docs.python.org/library/stdtypes.html#set-types-set-frozenset" rel="noreferrer">sets</a></strong>:</p>
<pre><code>if set(("foo", "bar")).issubset(foo):
    #do stuff
</code></pre>
<p>Alternatively:</p>
<pre><code>if set(("foo", "bar")) &lt;= set(foo):
    #do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>if all(key in foo for key in ["foo","bar"]):
    # do stuff
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While I like Alex Martelli's answer, it doesn't seem Pythonic to me.  That is, I thought an important part of being Pythonic is to be easily understandable.  With that goal, <code>&lt;=</code> isn't easy to understand.</p>
<p>While it's more characters, using <code>issubset()</code> as suggested by Karl Voigtland's answer is more understandable.  Since that method can use a dictionary as an argument, a short, understandable solution is:</p>
<pre class="lang-py prettyprint-override"><code>foo = {'foo': 1, 'zip': 2, 'zam': 3, 'bar': 4}

if set(('foo', 'bar')).issubset(foo):
    #do stuff
</code></pre>
<p>I'd like to use <code>{'foo', 'bar'}</code> in place of <code>set(('foo', 'bar'))</code>, because it's shorter.  However, it's not that understandable and I think the braces are too easily confused as being a dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alex Martelli's solution <code>set(queries) &lt;= set(my_dict)</code> is the shortest code but may not be the fastest. Assume Q = len(queries) and D = len(my_dict).</p>
<p>This takes O(Q) + O(D) to make the two sets, and then (one hopes!) only O(min(Q,D)) to do the subset test -- assuming of course that Python set look-up is O(1) -- this is worst case (when the answer is True).</p>
<p>The generator solution of hughdbrown (et al?) <code>all(k in my_dict for k in queries)</code> is worst-case O(Q).</p>
<p>Complicating factors:<br/>
(1) the loops in the set-based gadget are all done at C-speed whereas the any-based gadget is looping over bytecode.<br/>
(2) The caller of the any-based gadget may be able to use any knowledge of probability of failure to order the query items accordingly whereas the set-based gadget allows no such control.</p>
<p>As always, if speed is important, benchmarking under operational conditions is a good idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is the smartest and pithonic.</p>
<pre><code>{'key1','key2'} &lt;= my_dict.keys()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using lambda?</p>
<pre><code> if reduce( (lambda x, y: x and foo.has_key(y) ), [ True, "foo", "bar"] ): # do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you want to: </p>
<ul>
<li>also get the values for the keys</li>
<li>check more than one dictonary</li>
</ul>
<p>then:</p>
<pre><code>from operator import itemgetter
foo = {'foo':1,'zip':2,'zam':3,'bar':4}
keys = ("foo","bar") 
getter = itemgetter(*keys) # returns all values
try:
    values = getter(foo)
except KeyError:
    # not both keys exist
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not to suggest that this isn't something that you haven't thought of, but I find that the simplest thing is usually the best:</p>
<pre><code>if ("foo" in foo) and ("bar" in foo):
    # do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; if 'foo' in foo and 'bar' in foo:
...     print 'yes'
... 
yes
</code></pre>
<p>Jason, () aren't necessary in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://python-reference.readthedocs.io/en/latest/docs/sets/issubset.html" rel="nofollow noreferrer">.issubset()</a> as well</p>
<pre><code>&gt;&gt;&gt; {"key1", "key2"}.issubset({"key1":1, "key2":2, "key3": 3})
True
&gt;&gt;&gt; {"key4", "key2"}.issubset({"key1":1, "key2":2, "key3": 3})
False
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; ok
{'five': '5', 'two': '2', 'one': '1'}

&gt;&gt;&gt; if ('two' and 'one' and 'five') in ok:
...   print "cool"
... 
cool
</code></pre>
<p>This seems to work</p>
</div>
<span class="comment-copy">Thank you all for your answers. I liked the answers Alex and hughdbrown put forth probably the best. I used the answer from hughdbrown in the code.  Alex had the simplest looking answer though.</span>
<span class="comment-copy">+1, I like this better than Greg's answer because it's more concise AND faster (no building of irrelevant temporary list, AND full exploitation of short-circuiting).</span>
<span class="comment-copy">I love all() and any(). They make so many algorithms so much cleaner.</span>
<span class="comment-copy">I ultimately ended up using this solution.  It seemed the best for larger datasets. When checking for say 25 or 30 keys.</span>
<span class="comment-copy">It's a good solution thanks to short-circuiting, especially if the test fails more often than not; unless you can create the set of keys of interest just once and check it many times, in which case <code>set</code> is superior. As usual... measure it!-)</span>
<span class="comment-copy">I use this whenever it looks nicer than the "normal" way, with all the and's or the or's... it's also nice 'cause you can use either "all" or "any"... in addition you can either have "k in foo" or "k not in foo" depending on the test you are trying to perform</span>
<span class="comment-copy">looks good! The only thing I don't like is that you have to create temporary sets, but it's very compact. So I must say... nice use of sets!</span>
<span class="comment-copy">In python 3 you can say <code>set(("foo","bar")) &lt;= myDict.keys()</code> which avoids the temporary set, so is much faster. For my testing it is about the same speed as using all when the query was 10 items. It gets slower as the query gets bigger though.</span>
<span class="comment-copy">I've posted some of my tests as an answer. <a href="http://stackoverflow.com/questions/1285911/python-how-do-i-check-that-multiple-keys-are-in-a-dict-in-one-go/1552005#1552005" title="python how do i check that multiple keys are in a dict in one go">stackoverflow.com/questions/1285911/â€¦</a></span>
<span class="comment-copy"><code>if {'foo', 'bar'} &lt;= set(myDict): ...</code></span>
<span class="comment-copy">For anyone wondering why this works: the operator &lt;= is the same as use .set issubset() method: <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#set-types-set-frozenset</a></span>
<span class="comment-copy">Python 2.7 has <code>d.viewkeys()</code> to make <code>set(q) &lt;= d.viewkeys()</code>.</span>
<span class="comment-copy"><code>Python 2.7.5</code> has <code>d.keys()</code> method too.</span>
<span class="comment-copy">@IvanKharlamov, but in Python2, it doesn't return an object that is compatible with <code>set(q) &lt;= ...</code></span>
<span class="comment-copy">My bad, you're absolutely spot on: it returns <code>TypeError: can only compare to a set</code>. Sorry! :))</span>
<span class="comment-copy">For Python 2 switch the order: <code>d.viewkeys() &gt;= set(q)</code>. I came here trying to find out why the order matters!</span>
<span class="comment-copy">This also performs better than the all(k in d...) solution. I suggested this as an edit, but it was rejected on grounds it was <a href="http://stackoverflow.com/review/suggested-edits/6905833">better to add a comment</a>. So here's me doing just that</span>
<span class="comment-copy">@miraculixx It's not better to add a comment.  It's better to edit relevant information into an answer and delete the comments.</span>
<span class="comment-copy">@endolith I agree, some people obviously don't as you can see in the rejected edit that I did in the first place. Anyway that's a discussion for meta not for here.</span>
<span class="comment-copy">Can someone explain this please?  I've gathered that {} creates a set, but how is the less-than-or-equal operator working here?</span>
<span class="comment-copy">@Locane The &lt;= operator tests if the first set is a subset of the second set. You could also do {'foo', 'bar'}.issubset(somedict). The documentation for set methodology can be found here:  <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">docs.python.org/2/library/sets.html</a></span>
<span class="comment-copy">set(d) as I used in my answer is just like set(d.keys()) but faster, shorter, and I would say stylistically preferable.</span>
<span class="comment-copy"><code>set(d)</code> is the same as <code>set(d.keys())</code> ( without the intermediate list that <code>d.keys()</code> constructs )</span>
<span class="comment-copy">The square brackets there are unnecessary..</span>
<span class="comment-copy">indeed, not only unnecessary, positively harmful, as they impede the normal short-circuiting behavior of <code>all</code>.</span>
<span class="comment-copy">I think it's understandable once you understand what it means.</span>
<span class="comment-copy">The generator was faster for all the cases I tried. <a href="http://stackoverflow.com/questions/1285911/python-how-do-i-check-that-multiple-keys-are-in-a-dict-in-one-go/1552005#1552005" title="python how do i check that multiple keys are in a dict in one go">stackoverflow.com/questions/1285911/â€¦</a></span>
<span class="comment-copy">This answer is the only functionally-correct one that will work on Python 1.5 with a simple change (s/True/1/) ... but it's got nothing else going for it. AND the True thingy would be better as the optional initializer arg rather than crammed into the front of the sequence arg.</span>
<span class="comment-copy">Still they might be good style... without them, my C++-addled brain always wonders if it's going to be interpreted as "if 'foo in (foo and 'bar') in foo:"</span>
<span class="comment-copy">I understand that they aren't necessary.  I just feel that they add clarity in this case.</span>
<span class="comment-copy">This is clever and I was convinced it didn't work until I tried it myself.  I suspected the <code>()</code> would be evaluated first and result in <code>True</code>, which would then check if <code>True in ok</code>.  How does this actually work?!</span>
<span class="comment-copy">('two' and 'one' and 'five') returns 'five', so it actually checks only  if 'five' is on the dict</span>
