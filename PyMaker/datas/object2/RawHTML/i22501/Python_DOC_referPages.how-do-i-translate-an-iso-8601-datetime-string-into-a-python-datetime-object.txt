<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/127803/how-do-i-parse-an-iso-8601-formatted-date">How do I parse an ISO 8601-formatted date?</a>
<span class="question-originals-answer-count">
                    24 answers
                </span>
</li>
</ul>
</div>
<p>I'm getting a datetime string in a format like "2009-05-28T16:15:00" (this is ISO 8601, I believe). One hackish option seems to be to parse the string using <code>time.strptime</code> and passing the first six elements of the tuple into the datetime constructor, like:</p>
<pre><code>datetime.datetime(*time.strptime("2007-03-04T21:08:12", "%Y-%m-%dT%H:%M:%S")[:6])
</code></pre>
<p>I haven't been able to find a "cleaner" way of doing this. Is there one?</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer using the <a href="https://pypi.python.org/pypi/python-dateutil/2.6.0" rel="noreferrer">dateutil</a> library for timezone handling and generally solid date parsing. If you were to get an ISO 8601 string like: 2010-05-08T23:41:54.000Z you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. pyiso8601 has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me: </p>
<pre><code>import dateutil.parser
yourdate = dateutil.parser.parse(datestring)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3 and no external libraries:</p>
<pre><code>datetime.datetime.strptime('2019-01-04T16:41:24+0200', "%Y-%m-%dT%H:%M:%S%z")
</code></pre>
<p>Python 2 doesn't support the <code>%z</code> format specifier, so it's best to explicitly use Zulu time everywhere if possible:</p>
<pre><code>datetime.datetime.strptime("2007-03-04T21:08:12Z", "%Y-%m-%dT%H:%M:%SZ")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because ISO 8601 allows many variations of optional colons and dashes being present, basically <code>CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]</code>. If you want to use strptime, you need to strip out those variations first.</p>
<p><strong>The goal is to generate a UTC datetime object.</strong></p>
<hr/>
<p>If you just want a basic case that work for UTC with the Z suffix like <code>2016-06-29T19:36:29.3453Z</code>:</p>
<pre><code>datetime.datetime.strptime(timestamp.translate(None, ':-'), "%Y%m%dT%H%M%S.%fZ")
</code></pre>
<hr/>
<p>If you want to handle timezone offsets like <code>2016-06-29T19:36:29.3453-0400</code> or <code>2008-09-03T20:56:35.450686+05:00</code> use the following. These will convert all variations into something without variable delimiters like  <code>20080903T205635.450686+0500</code> making it more consistent/easier to parse.</p>
<pre><code>import re
# This regex removes all colons and all
# dashes EXCEPT for the dash indicating + or - utc offset for the timezone
conformed_timestamp = re.sub(r"[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))", '', timestamp)
datetime.datetime.strptime(conformed_timestamp, "%Y%m%dT%H%M%S.%f%z" )
</code></pre>
<hr/>
<p>If your system does not support the <code>%z</code> strptime directive (you see something like <code>ValueError: 'z' is a bad directive in format '%Y%m%dT%H%M%S.%f%z'</code>) then you need to manually offset the time from <code>Z</code> (UTC). Note <code>%z</code> may not work on your system in Python versions &lt; 3 as it depended on the C library support which varies across system/Python build type (i.e., <a href="http://en.wikipedia.org/wiki/Jython" rel="nofollow noreferrer">Jython</a>, <a href="http://en.wikipedia.org/wiki/Cython" rel="nofollow noreferrer">Cython</a>, etc.).</p>
<pre><code>import re
import datetime

# This regex removes all colons and all
# dashes EXCEPT for the dash indicating + or - utc offset for the timezone
conformed_timestamp = re.sub(r"[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))", '', timestamp)

# Split on the offset to remove it. Use a capture group to keep the delimiter
split_timestamp = re.split(r"[+|-]",conformed_timestamp)
main_timestamp = split_timestamp[0]
if len(split_timestamp) == 3:
    sign = split_timestamp[1]
    offset = split_timestamp[2]
else:
    sign = None
    offset = None

# Generate the datetime object without the offset at UTC time
output_datetime = datetime.datetime.strptime(main_timestamp +"Z", "%Y%m%dT%H%M%S.%fZ" )
if offset:
    # Create timedelta based on offset
    offset_delta = datetime.timedelta(hours=int(sign+offset[:-2]), minutes=int(sign+offset[-2:]))

    # Offset datetime with timedelta
    output_datetime = output_datetime + offset_delta
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/crsmithdev/arrow" rel="nofollow noreferrer">Arrow</a> looks promising for this:</p>
<pre><code>&gt;&gt;&gt; import arrow
&gt;&gt;&gt; arrow.get('2014-11-13T14:53:18.694072+00:00').datetime
datetime.datetime(2014, 11, 13, 14, 53, 18, 694072, tzinfo=tzoffset(None, 0))
</code></pre>
<blockquote>
<p>Arrow is a Python library that provides a sensible, intelligent way of creating, manipulating, formatting and converting dates and times. Arrow is simple, lightweight and heavily inspired by <a href="https://github.com/timrwood/moment" rel="nofollow noreferrer">moment.js</a> and <a href="https://github.com/kennethreitz/requests" rel="nofollow noreferrer">requests</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You should keep an eye on the timezone information, as you might get into trouble when comparing non-tz-aware datetimes with tz-aware ones.</p>
<p>It's probably the best to always make them tz-aware (even if only as UTC), unless you really know why it wouldn't be of any use to do so.</p>
<pre><code>#-----------------------------------------------
import datetime
import pytz
import dateutil.parser
#-----------------------------------------------

utc = pytz.utc
BERLIN = pytz.timezone('Europe/Berlin')
#-----------------------------------------------

def to_iso8601(when=None, tz=BERLIN):
  if not when:
    when = datetime.datetime.now(tz)
  if not when.tzinfo:
    when = tz.localize(when)
  _when = when.strftime("%Y-%m-%dT%H:%M:%S.%f%z")
  return _when[:-8] + _when[-5:] # Remove microseconds
#-----------------------------------------------

def from_iso8601(when=None, tz=BERLIN):
  _when = dateutil.parser.parse(when)
  if not _when.tzinfo:
    _when = tz.localize(_when)
  return _when
#-----------------------------------------------
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I haven't tried it yet, but <a href="https://bitbucket.org/micktwomey/pyiso8601" rel="nofollow noreferrer">pyiso8601</a> promises to support this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Both ways:</p>
<p>Epoch to ISO time:</p>
<pre><code>isoTime = time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(epochTime))
</code></pre>
<p>ISO time to Epoch:</p>
<pre><code>epochTime = time.mktime(time.strptime(isoTime, '%Y-%m-%dT%H:%M:%SZ'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime, time
def convert_enddate_to_seconds(self, ts):
    """Takes ISO 8601 format(string) and converts into epoch time."""
    dt = datetime.datetime.strptime(ts[:-7],'%Y-%m-%dT%H:%M:%S.%f')+\
                datetime.timedelta(hours=int(ts[-5:-3]),
                minutes=int(ts[-2:]))*int(ts[-6:-5]+'1')
    seconds = time.mktime(dt.timetuple()) + dt.microsecond/1000000.0
    return seconds
</code></pre>
<p>This also includes the milliseconds and time zone.</p>
<p>If the time is '2012-09-30T15:31:50.262-08:00', this will convert into epoch time.</p>
<pre><code>&gt;&gt;&gt; import datetime, time
&gt;&gt;&gt; ts = '2012-09-30T15:31:50.262-08:00'
&gt;&gt;&gt; dt = datetime.datetime.strptime(ts[:-7],'%Y-%m-%dT%H:%M:%S.%f')+ datetime.timedelta(hours=int(ts[-5:-3]), minutes=int(ts[-2:]))*int(ts[-6:-5]+'1')
&gt;&gt;&gt; seconds = time.mktime(dt.timetuple()) + dt.microsecond/1000000.0
&gt;&gt;&gt; seconds
1348990310.26
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://pypi.python.org/pypi/isodate" rel="noreferrer">Isodate</a> seems to have the most complete support.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://bitbucket.org/nielsenb/aniso8601" rel="nofollow noreferrer">aniso8601</a> should handle this. It also understands timezones, Python 2 and Python 3, and it has a reasonable coverage of the rest of <a href="http://en.wikipedia.org/wiki/ISO_8601" rel="nofollow noreferrer">ISOÂ 8601</a>, should you ever need it.</p>
<pre><code>import aniso8601
aniso8601.parse_datetime('2007-03-04T21:08:12')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a super simple way to do these kind of conversions.
No parsing, or extra libraries required.
It is clean, simple, and fast.</p>
<pre><code>import datetime
import time

################################################
#
# Takes the time (in seconds),
#   and returns a string of the time in ISO8601 format.
# Note: Timezone is UTC
#
################################################

def TimeToISO8601(seconds):
   strKv = datetime.datetime.fromtimestamp(seconds).strftime('%Y-%m-%d')
   strKv = strKv + "T"
   strKv = strKv + datetime.datetime.fromtimestamp(seconds).strftime('%H:%M:%S')
   strKv = strKv +"Z"
   return strKv

################################################
#
# Takes a string of the time in ISO8601 format,
#   and returns the time (in seconds).
# Note: Timezone is UTC
#
################################################

def ISO8601ToTime(strISOTime):
   K1 = 0
   K2 = 9999999999
   K3 = 0
   counter = 0
   while counter &lt; 95:
     K3 = (K1 + K2) / 2
     strK4 = TimeToISO8601(K3)
     if strK4 &lt; strISOTime:
       K1 = K3
     if strK4 &gt; strISOTime:
       K2 = K3
     counter = counter + 1
   return K3

################################################
#
# Takes a string of the time in ISO8601 (UTC) format,
#   and returns a python DateTime object.
# Note: returned value is your local time zone.
#
################################################

def ISO8601ToDateTime(strISOTime):
   return time.gmtime(ISO8601ToTime(strISOTime))


#To test:
Test = "2014-09-27T12:05:06.9876"
print ("The test value is: " + Test)
Ans = ISO8601ToTime(Test)
print ("The answer in seconds is: " + str(Ans))
print ("And a Python datetime object is: " + str(ISO8601ToDateTime(Test)))
</code></pre>
</div>
<span class="comment-copy">It's worth bearing in mind that this isn't <i>quite</i> a duplicate of the issue it's been closed against. The linked issue refers specifically to <a href="https://tools.ietf.org/html/rfc3339" rel="nofollow noreferrer">RFC 3339</a> strings, while this one refers to ISO 8601 strings. The RFC 3339 syntax is a subset of the ISO 8601 syntax (defined in the non-free ISO 8601 standard which, like most ISO standards, you must either pirate or pay a huge fee to read). The datetime string exhibited in this question is an ISO 8601 datetime, but NOT an RFC 3339 datetime. UTC offsets are mandatory in RFC 3339 datetimes, and none is provided here.</span>
<span class="comment-copy">right, pyiso8601 has some very subtle issues which you might notice when it's already spread over the entire code. dateutil.parser is really good, but one should keep an eye of enforcing tz-awareness manually if necessary.</span>
<span class="comment-copy">An update to pyiso8601 in early Feb 2014 has resolved many issues. It handles a much broader set of valid ISO8601 strings. It is worth another look.</span>
<span class="comment-copy">I've been pulling my hair out with a ton of <code>elif</code>s trying to use <code>datetime.datetime.strptime</code> to handle all my various datetime formats. THANK YOU for showing me the light.</span>
<span class="comment-copy">Correct me if I'm wrong, but doesn't the Z in the time example you include specifically indicate a UTC time?</span>
<span class="comment-copy">As from python 3.7 you can use <code>datetime.datetime.fromisoformat</code> <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat" rel="nofollow noreferrer">docs.python.org/3/library/â¦</a></span>
<span class="comment-copy">Perhaps you were looking the datetime module level functions, instead of the datetime.datetime class methods.</span>
<span class="comment-copy">You gotta agree though that this contradicts python ideology, being rather unobvious... <code>strptime</code>? Couldn't they use a meaningful name rather than propagate an old crappy C name?...</span>
<span class="comment-copy">Maybe I'm missing something, but I don't think this would successfully parse a valid ISO-8601 datetime which included time zone information. In that case the string would end with either an offset such as <code>-06:00</code> or with <code>Z</code> for UTC, and <code>strptime</code> would throw an exception.</span>
<span class="comment-copy">@AviFlax, yes this wouldn't work for ISO-8601 datetime. It doesn't have timezone information.</span>
<span class="comment-copy">Sorry, this doesn't parse the timezone field.</span>
<span class="comment-copy">Note, this deals with timezones appropriately ( note the .%fZ)</span>
<span class="comment-copy">This will fail on valid ISO 8601 datetime like <code>20160628T100000</code>.</span>
<span class="comment-copy">@SeppoErviÃ¤lÃ¤, good point. I updated my answer.</span>
<span class="comment-copy">Note, the updated answer also deals with the Z +HH:MM or -HH:MM UTC offset format, like +05:00 or -10:30 which @MarkAmery mentioned here as it strips out the colons</span>
<span class="comment-copy">Oh dear, Python. What the hell are you doing?!?</span>
<span class="comment-copy">pyiso8601 has a <i>very</i> limited range of formats which it accepts. better use dateutil.parser --&gt; "Currently the following formats are handled: 1) 2006-01-01T00:00:00Z 2) 2006-01-01T00:00:00[+-]00:00" Having [+-]0000 as tz-information is just as valid under the iso standard. IIRC on [+-]0000 it would just discard the tz-information...</span>
<span class="comment-copy"><a href="https://pypi.python.org/pypi/iso8601/" rel="nofollow noreferrer">pyiso8601</a> has been updated recently (circa Feb 2014) and now handles [+-]0000. It also handles just dates. I've been using pyiso8601 to good effect.</span>
<span class="comment-copy">but you are limited to UTC only (z)</span>
<span class="comment-copy">Parses neither decimal seconds nor timezones (other than "Z")</span>
<span class="comment-copy">Good point, however you could modify the text string params to fit your specific format. <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">docs.python.org/2/library/time.html</a> You just need to manipulate the string to fit your input.</span>
<span class="comment-copy">Moreover, you can set arbitrary format instead of ISO: <code>time.strftime("%d-%m-%y %H:%M", time.localtime(EPOCH_TIME))</code>.</span>
<span class="comment-copy">syntax would be: <code>dt = isodate.parse_datetime(ts)</code></span>
<span class="comment-copy">No parsing ? Clean ? Fast ? What are those hardcoded values like 9999999999 ? 95 ? Better use a library ...</span>
<span class="comment-copy">That's neither simple nor clean and surely slower than all the other proposed answers...</span>
