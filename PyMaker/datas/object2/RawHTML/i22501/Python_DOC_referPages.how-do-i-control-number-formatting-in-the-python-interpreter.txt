<div class="post-text" itemprop="text">
<p>I often use the python interpreter for doing quick numerical calculations and would like all numerical results to be automatically printed using, e.g., exponential notation.  Is there a way to set this for the entire session?</p>
<p>For example, I want:</p>
<pre><code>&gt;&gt;&gt; 1.e12
1.0e+12
</code></pre>
<p>not:</p>
<pre><code>&gt;&gt;&gt; 1.e12
1000000000000.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a Python script called whatever you want (say <code>mystartup.py</code>) and then set an environment variable <code>PYTHONSTARTUP</code> to the path of this script. Python will then load this script on startup of an interactive session (but not when running scripts). In this script, define a function similar to this:</p>
<pre><code>def _(v):
    if type(v) == type(0.0):
        print "%e" % v
    else:
        print v
</code></pre>
<p>Then, in an interactive session:</p>
<pre>
C:\temp&gt;set PYTHONSTARTUP=mystartup.py

C:\temp&gt;python
ActivePython 2.5.2.2 (ActiveState Software Inc.) based on
Python 2.5.2 (r252:60911, Mar 27 2008, 17:57:18) [MSC v.1310 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; _(1e12)
1.000000e+012
&gt;&gt;&gt; _(14)
14
&gt;&gt;&gt; _(14.0)
1.400000e+001
&gt;&gt;&gt;
</pre>
<p>Of course, you can define the function to be called whaetver you want and to work exactly however you want.</p>
<p>Even better than this would be to use <a href="http://ipython.scipy.org/" rel="nofollow noreferrer">IPython</a>. It's great, and you can set the number formatting how you want by using <code>result_display.when_type(some_type)(my_print_func)</code> (see the IPython site or search for more details on how to use this).</p>
</div>
<div class="post-text" itemprop="text">
<p>Hm... It's not a 100% solution, but this have come to my mind...</p>
<p>How about defining a subclass of float which would have an overridden <code>__str__</code> method (to print with the exp notation). And then you would have to wrap all the expressions with object construction of this class).
It would be a bit shorter than Dave's solution, you would define the class once and then write something like:</p>
<pre><code>&gt;&gt;&gt; F(1.e12)
1.0e+12
&gt;&gt;&gt; F(3.)
3.0e+0
&gt;&gt;&gt; F(1.+2.+3.+4.)
1.0e+1
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you know you can use <a href="http://www.python.org/doc/2.5.2/lib/typesseq-strings.html" rel="nofollow noreferrer">the <code>%</code> operator</a> or <a href="http://docs.python.org/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> to format strings:</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; "%e" % 1.e12
'1.000000e+12'
</code></pre>
<p>I was wondering if you could <a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow noreferrer">monkey patch</a> the built-in <code>float</code> class to change the formatting but it seems that Python won't let you:</p>
<pre><code>&gt;&gt;&gt; 1.e12.__class__.__repr__ = lambda x: "%e" % x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'float'
</code></pre>
<p>So the only other thing I can think of is to write your own file-like object which captures output, reformats it and sends it to the standard output.  You'd then redirect standard output of the interpreter to this object:</p>
<pre><code>sys.stdout = my_formatting_object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building on Dave Webb's hint above. You can of course set the precision if you like ("%.3e") and perhaps override writelines if needed.</p>
<pre><code>import os
import sys

class ExpFloatFileObject:
    def write(self, s):
        try:
            s = "%e"%float(s)
        except ValueError:
            pass
        sys.__stdout__.write(s)

    def __getattr__(self, name):
        return getattr(sys.__stdout__, name)

sys.stdout = ExpFloatFileObject()  
</code></pre>
<p>and usage:</p>
<pre><code>&gt;&gt;&gt; 14000    
1.400000e+04  
&gt;&gt;&gt; "text"
'text'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When using IPython/Jupyter-console, the "magic" command <code>%precision %e</code> will change the display of raw floats in exponential notation. <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-precision" rel="nofollow noreferrer">https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-precision</a></p>
<p>For more formatting control, a formatter can be registered:</p>
<pre><code>excited_floats = lambda val: "{:e}!!!".format(val)
console_formatter = get_ipython().display_formatter.formatters['text/plain']
console_formatter.for_type(float, lambda val, p, c: p.text(excited_floats(val)))
</code></pre>
<p><a href="https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.formatters.html#IPython.core.formatters.PlainTextFormatter" rel="nofollow noreferrer">https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.formatters.html#IPython.core.formatters.PlainTextFormatter</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry for necroposting, but this topic shows up in related google searches and I believe a satisfactory answer is missing here.</p>
<p>I believe the right way is to use <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer"><code>sys.displayhook</code></a>. For example, you could add code like this in your <code>PYTHONSTARTUP</code> file:</p>
<pre class="lang-py prettyprint-override"><code>import builtins
import sys
import numbers


__orig_hook = sys.displayhook

def __displayhook(value):
    if isinstance(value, numbers.Number) and value &gt;= 1e5:
        builtins._ = value
        print("{:e}".format(value))
    else:
        __orig_hook(value)

sys.displayhook = __displayhook
</code></pre>
<p>This will display large enough values using the exp syntax. Feel free to modify the threshold as you see fit.</p>
<p>Alternatively you can have the answer printed in both formats for large numbers:</p>
<pre class="lang-py prettyprint-override"><code>def __displayhook(value):
    __orig_hook(value)
    if isinstance(value, numbers.Number) and value &gt;= 1e5:
        print("{:e}".format(value))
</code></pre>
<p>Or you can define yourself another answer variable besides the default <code>_</code>, such as <code>__</code> (such creativity, I know):</p>
<pre class="lang-py prettyprint-override"><code>builtins.__ = None
__orig_hook = sys.displayhook

def __displayhook(value):
    if isinstance(value, numbers.Number):
        builtins.__ = "{:e}".format(value)
    __orig_hook(value)

sys.displayhook = __displayhook
</code></pre>
<p>... and then display the exp-formatted answer by typing just <code>__</code>.</p>
</div>
<span class="comment-copy">Yes, but I do not want to have to type this with every input.  Since I want the same formatting for the entire session I would like to set it once and not bother with it anymore.</span>
<span class="comment-copy">Whoops. Sorry, didn't read your question properly.  Have expanded the answer to cover your question properly, as far as I can.</span>
