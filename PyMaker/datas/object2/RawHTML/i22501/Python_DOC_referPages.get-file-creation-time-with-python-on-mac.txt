<div class="post-text" itemprop="text">
<p>Python's os.path.getctime on the Mac (and under Unix in general) does not give the date when a file was created but "the time of the last change" (according to the docs at least). On the other hand in the Finder I can see the real file creation time so this information is kept by HFS+.</p>
<p>Do you have any suggestions on how to obtain the file creation time on the Mac in a Python program? </p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime" rel="nofollow noreferrer"><strong><code>st_birthtime</code></strong></a> property on the result of a call to <a href="https://docs.python.org/3/library/os.html#os.stat" rel="nofollow noreferrer"><code>os.stat()</code></a> (or <code>fstat</code>/<code>lstat</code>).</p>
<pre><code>def get_creation_time(path):
    return os.stat(path).st_birthtime
</code></pre>
<p>You can convert the integer result to a datetime object using <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.fromtimestamp()</code></a>.</p>
<p><sub>For some reason I don't think this worked on Mac OS X when this answer was first written, but I could be mistaken, and it does work now, even with older versions of Python. The old answer is below for posterity.</sub></p>
<hr/>
<p>Using <code>ctypes</code> to access the system call <code>stat64</code> (works with Python 2.5+):</p>
<pre><code>from ctypes import *

class struct_timespec(Structure):
    _fields_ = [('tv_sec', c_long), ('tv_nsec', c_long)]

class struct_stat64(Structure):
    _fields_ = [
        ('st_dev', c_int32),
        ('st_mode', c_uint16),
        ('st_nlink', c_uint16),
        ('st_ino', c_uint64),
        ('st_uid', c_uint32),
        ('st_gid', c_uint32), 
        ('st_rdev', c_int32),
        ('st_atimespec', struct_timespec),
        ('st_mtimespec', struct_timespec),
        ('st_ctimespec', struct_timespec),
        ('st_birthtimespec', struct_timespec),
        ('dont_care', c_uint64 * 8)
    ]

libc = CDLL('libc.dylib') # or /usr/lib/libc.dylib
stat64 = libc.stat64
stat64.argtypes = [c_char_p, POINTER(struct_stat64)]

def get_creation_time(path):
    buf = struct_stat64()
    rv = stat64(path, pointer(buf))
    if rv != 0:
        raise OSError("Couldn't stat file %r" % path)
    return buf.st_birthtimespec.tv_sec
</code></pre>
<p>Using <code>subprocess</code> to call the <code>stat</code> utility:</p>
<pre><code>import subprocess

def get_creation_time(path):
    p = subprocess.Popen(['stat', '-f%B', path],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if p.wait():
        raise OSError(p.stderr.read().rstrip())
    else:
        return int(p.stdout.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>ctime differs on the platform: <em>On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time</em>. That's because Unices usually don't preserve the "original" creation time.</p>
<p>That said you can access all information that the OS provides with the <a href="http://docs.python.org/library/stat.html" rel="nofollow noreferrer">stat</a> module.</p>
<blockquote>
<p>The stat module defines constants and functions for interpreting the results of os.stat(), os.fstat() and os.lstat() (if they exist). For complete details about the stat, fstat and lstat calls, consult the documentation for your system.</p>
<p>stat.ST_CTIME<br/>
  The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>By lack of a good utility, I've created <a href="https://github.com/kootenpv/crtime" rel="nofollow noreferrer">crtime</a>.</p>
<pre><code>pip install crtime
</code></pre>
<p>Then you can use it like:</p>
<pre><code>sudo crtime ./
</code></pre>
<p>Would print:</p>
<pre><code>1552938281  /home/pascal/crtime/.gitignore
1552938281  /home/pascal/crtime/README.md
1552938281  /home/pascal/crtime/crtime
1552938281  /home/pascal/crtime/deploy.py
1552938281  /home/pascal/crtime/setup.cfg
1552938281  /home/pascal/crtime/setup.py
1552938961  /home/pascal/crtime/crtime.egg-info
1552939447  /home/pascal/crtime/.git
1552939540  /home/pascal/crtime/build
1552939540  /home/pascal/crtime/dist
</code></pre>
<p>Note that for large directories it will be easily 1000x faster than <code>xstat</code> that is sometimes mentioned, as this creates a temporary file and then executes <code>stat</code> calls for all files at once.</p>
</div>
<span class="comment-copy">Duplicate: <a href="http://stackoverflow.com/questions/237079/how-to-get-file-creation-modification-date-times-in-python" title="how to get file creation modification date times in python">stackoverflow.com/questions/237079/…</a></span>
<span class="comment-copy">@S.Lott: not really, since getting the file creation time on a Mac is inherently non-cross-platform.</span>
<span class="comment-copy">@Miles: perhaps true, but the answer there applies to this question perfectly.</span>
<span class="comment-copy">@S.Lott: it's not a duplicate and believe me that the answer there does not apply <i>at all</i> to the Mac (unless you accept that the answer is that there is no way to get the creation time on the Mac which Miles has proven wrong). On the Mac both os.path.getctime and os.stat give the last <i>change</i> time and not the creation time. So everybody that says that os.stat is the cross-platform method of getting the creation time is wrong.</span>
<span class="comment-copy">Perfect! This is exactly what I was looking for.</span>
<span class="comment-copy">On El Capitan, you might want to use <code>libc = CDLL('/usr/lib/libc.dylib')</code> instead of <code>libc = CDLL('libc.dylib')</code> if you get an <code>OSError: dlopen(libc.dylib, 6): image not found</code>.</span>
<span class="comment-copy">@ThomasOrozco Turns out there's a better approach than ctypes anyway.</span>
<span class="comment-copy">Thanks but... stat.ST_CTIME: The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).</span>
<span class="comment-copy">@cefstat That's the point. Some systems (like unices) simply do <i>not</i> provide the "original" creation time. There's nothing python can do about that.</span>
