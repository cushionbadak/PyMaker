<div class="post-text" itemprop="text">
<p>Let's say I'm parsing a file, which uses <code>;</code> as the comment character. I don't want to parse comments. So if I a line looks like this:</p>
<pre><code>example.com.              600     IN      MX      8 s1b9.example.net ; hello!
</code></pre>
<p>Is there an easier/more-elegant way to strip chars out other than this:</p>
<pre><code>rtr = ''
for line in file:
    trig = False
    for char in line:
        if not trig and char != ';':
            rtr += char
        else:
            trig = True
    if rtr[max(rtr)] != '\n':
        rtr += '\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend saying</p>
<pre><code>line.split(";")[0]
</code></pre>
<p>which will give you a string of all characters up to but not including the first ";" character.  If no ";" character is present, then it will give you the entire line.</p>
</div>
<div class="post-text" itemprop="text">
<p>just do a split on the line by comment then get the first element
eg</p>
<pre><code>line.split(";")[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.5 or greater, I would use the <a href="http://docs.python.org/library/stdtypes.html?highlight=partition#str.partition" rel="nofollow noreferrer"><code>partition</code></a> method:</p>
<pre><code>rtr = line.partition(';')[0].rstrip() + '\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>file = open(r'c:\temp\test.txt', 'r')
for line in file:   print
   line.split(";")[0].strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So you'll want to split the line on the first semicolon, take everything before it, strip off any lingering whitespace, and append a newline character.</p>
<pre><code>rtr = line.split(";", 1)[0].rstrip() + '\n'
</code></pre>
<p><strong>Links to Documentation:</strong></p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">split</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer">rstrip</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Reading, splitting, stripping, and joining lines with newline all in one line of python:</p>
<pre><code>rtr = '\n'.join(line.split(';')[0].strip() for line in open(r'c:\temp\test.txt', 'r'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way :</p>
<pre>
In [6]: line = "foo;bar"
In [7]: line[:line.find(";")] + "\n"
Out[7]: 'foo\n'
</pre>
</div>
<div class="post-text" itemprop="text">
<p>I have not tested this with python but I use similar code else where.</p>
<pre><code>import re
content = open(r'c:\temp\test.txt', 'r').read()
content = re.sub(";.+", "\n")
</code></pre>
</div>
<span class="comment-copy">are you using python &lt; 2.5?</span>
<span class="comment-copy">Yes, python2.4. Should have mentioned that in the ??</span>
<span class="comment-copy">well python2.4 is <b>two</b> versions behind current stable version. what do you think?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/904746/how-to-remove-all-characters-after-a-specific-character-in-python">How to remove all characters after a specific character in python?</a></span>
<span class="comment-copy">+1 You could use 1 for maxsplit param to be perfect</span>
<span class="comment-copy">I agree with @Jiri in using the maxsplit arg, i.e <code>line.split(";", 1)[0]</code>. It's faster (especially if you are parsing lots of text) because you don't end up having to split the entire text just for getting the first element.</span>
<span class="comment-copy">not available for version &lt;2.5++</span>
<span class="comment-copy">@ghostdog74: stable versions of python are 2.6 and 3.1</span>
<span class="comment-copy">@SG, that's fine, but still, if one is still using &lt;2.5++ in production, they will not have this luxury.</span>
<span class="comment-copy">This answer was valid when I posted it because the OP had not yet mentioned that he was using Python 2.4 (now about five years old). I am not going to delete this answer because I find the fact that <code>partition</code> returns a fixed length vector a useful feature, although it does not matter much here.</span>
<span class="comment-copy">Why is <code>partition</code> better?</span>
<span class="comment-copy">fix your syntax</span>
<span class="comment-copy">links you provide and methods you use are not the same</span>
<span class="comment-copy">if line == "fubar", that produces "fuba\n" ... correcting the problem in a one-liner produces this: <code>line[:None if line.find(";") == -1 else line.find(";")]</code> (which I'm certainly not proposing as a good idea at all).</span>
<span class="comment-copy">your re.sub() is missing an argument and thus won't run -- very fortunate since <b>it would trash the first ';' in the file and everything after it</b></span>
