<div class="post-text" itemprop="text">
<p>What's better practice in a user-defined function in Python: <code>raise</code> an exception or <code>return None</code>?  For example, I have a function that finds the most recent file in a folder.</p>
<pre><code>def latestpdf(folder):
    # list the files and sort them
    try:
        latest = files[-1]
    except IndexError:
        # Folder is empty.
        return None  # One possibility
        raise FileNotFoundError()  # Alternative
    else:
        return somefunc(latest)  # In my case, somefunc parses the filename
</code></pre>
<p>Another option is leave the exception and handle it in the caller code, but I figure it's more clear to deal with a <code>FileNotFoundError</code> than an <code>IndexError</code>. Or is it bad form to re-raise an exception with a different name?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's really a matter of semantics.  What does <code>foo = latestpdf(d)</code> <em>mean</em>?</p>
<p>Is it perfectly reasonable that there's no latest file?  Then sure, just return None.</p>
<p>Are you expecting to always find a latest file?  Raise an exception.  And yes, re-raising a more appropriate exception is fine.</p>
<p>If this is just a general function that's supposed to apply to any directory, I'd do the former and return None.  If the directory is, e.g., meant to be a specific data directory that contains an application's known set of files, I'd raise an exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would make a couple suggestions before answering your question as it may answer the question for you.</p>
<ul>
<li>Always name your functions descriptive.  <code>latestpdf</code> means very little to anyone but looking over your function <code>latestpdf()</code> gets the latest pdf.  I would suggest that you name it <code>getLatestPdfFromFolder(folder)</code>.</li>
</ul>
<p>As soon as I did this it became clear what it should return..  If there isn't a pdf raise an exception. But wait there more..</p>
<ul>
<li>Keep the functions clearly defined.  Since it's not apparent what somefuc is supposed to do and it's not (apparently) obvious how it relates to getting the latest pdf I would suggest you move it out.  This makes the code much more readable.</li>
</ul>
<hr/>
<pre><code>for folder in folders:
   try:
       latest = getLatestPdfFromFolder(folder)
       results = somefuc(latest)
   except IOError: pass
</code></pre>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>I usually prefer to handle exceptions internally (i.e. try/except inside the called function, possibly returning a None) because python is dynamically typed.  In general, I consider it a judgment call one way or the other, but in a dynamically typed language, there are small factors that tip the scales in favor of not passing the exception to the caller:</p>
<ol>
<li>Anyone calling your function is not notified of the exceptions that can be thrown.  It becomes a bit of an art form to know what kind of exception you are hunting for (and generic except blocks ought to be avoided).</li>
<li><code>if val is None</code> is a little easier than <code>except ComplicatedCustomExceptionThatHadToBeImportedFromSomeNameSpace</code>.  Seriously, I hate having to remember to type <code>from django.core.exceptions import ObjectDoesNotExist</code> at the top of all my django files just to handle a really common use case.  In a statically typed world, let the editor do it for you.</li>
</ol>
<p>Honestly, though, it's always a judgment call, and the situation you're describing, where the called function receives an error it can't help, is an excellent reason to re-raise an exception that is meaningful.  You have the exact right idea, but unless you're exception is going to provide more meaningful information in a stack trace than</p>
<pre><code>AttributeError: 'NoneType' object has no attribute 'foo'
</code></pre>
<p>which, nine times out of ten, is what the caller will see if you return an unhandled None, don't bother.</p>
<p>(All this kind of makes me wish that python exceptions had the <code>cause</code> attributes by default, as in java, which lets you pass exceptions into new exceptions so that you can rethrow all you want and never lose the original source of the problem.)</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, I'd say an exception should be thrown if something catastrophic has occured that cannot be recovered from (i.e. your function deals with some internet resource that cannot be connected to), and you should return None if your function should really return something but nothing would be appropriate to return (i.e. "None" if your function tries to match a substring in a string for example).</p>
</div>
<div class="post-text" itemprop="text">
<p>with python 3.5's <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">typing</a>:</p>
<p>example function when returning None will be:</p>
<pre><code>def latestpdf(folder: str) -&gt; Union[str, None]
</code></pre>
<p>and when raising an exception will be:</p>
<pre><code>def latestpdf(folder: str) -&gt; str 
</code></pre>
<p>option 2 seem more readable and pythonic</p>
<p>(+option to add comment to exception as stated earlier.)</p>
</div>
<span class="comment-copy">Similar: <a href="http://stackoverflow.com/questions/1152541/is-it-better-to-use-exception-or-return-code-in-python" title="is it better to use exception or return code in python">stackoverflow.com/questions/1152541/â€¦</a></span>
<span class="comment-copy">I lean towards raising an exception so I am forced to handle the exception in the calling function. If I forget to check if the output is None in the calling function, I could have a latent bug. If you returned None, hopefully the next line in the calling function will raise an AttributeError. However if the returned value is added to a dictionary and then 100 function calls in a different source file an AttributeError is raised, you'll have fun hunting down why that value was None.</span>
<span class="comment-copy">In general, I also avoid values that have a special meaning or having multiple signatures for one function (it could return a string or None).</span>
<span class="comment-copy">Another point to consider: If raising an exception a message can be attached, but we cannot do that when returning <code>None</code>.</span>
<span class="comment-copy"><code>Union[str, None]</code> should be <code>Optional[str]</code></span>
<span class="comment-copy">a shorthand, but you're right, it's more readable. not editing so both options are here.</span>
