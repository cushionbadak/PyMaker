<div class="post-text" itemprop="text">
<p>I need a way to tell what mode the shell is in from within the shell.  </p>
<p>I've tried looking at the <a href="http://docs.python.org/library/platform.html" rel="noreferrer">platform</a> module but it seems only to tell you about "about the bit architecture and the linkage format used for the executable": the binary is compiled as 64bit though (I'm running on OS X 10.6) so it seems to always report 64bit even though I'm using the methods <a href="https://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man1/python.1.html" rel="noreferrer">described here</a> to force 32bit mode).</p>
</div>
<div class="post-text" itemprop="text">
<p>UPDATED:
One way is to look at <code>sys.maxsize</code> as documented <a href="http://docs.python.org/library/platform.html#cross-platform" rel="noreferrer">here</a>:</p>
<pre><code>$ python-32 -c 'import sys;print("%x" % sys.maxsize, sys.maxsize &gt; 2**32)'
('7fffffff', False)
$ python-64 -c 'import sys;print("%x" % sys.maxsize, sys.maxsize &gt; 2**32)'
('7fffffffffffffff', True)
</code></pre>
<p><code>sys.maxsize</code> was introduced in Python 2.6.  If you need a test for older systems, this slightly more complicated test should work on all Python 2 and 3 releases:</p>
<pre><code>$ python-32 -c 'import struct;print( 8 * struct.calcsize("P"))'
32
$ python-64 -c 'import struct;print( 8 * struct.calcsize("P"))'
64
</code></pre>
<p>BTW, you might be tempted to use <code>platform.architecture()</code> for this.  Unfortunately, its results are not always reliable, <a href="http://docs.python.org/library/platform.html#platform.architecture" rel="noreferrer">particularly in the case of OS X universal binaries</a>.</p>
<pre><code>$ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'
64bit True
$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'
64bit False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When starting the Python interpreter in the terminal/command line you may also see a line like: </p>
<p><code>Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on win32</code> </p>
<p>Where <code>[MSC v.1500 64 bit (AMD64)]</code> means 64-bit Python.
Works for my particular setup.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically a variant on Matthew Marshall's answer (with struct from the std.library):</p>
<pre><code>import struct
print struct.calcsize("P") * 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using ctypes to get the size of a void pointer:</p>
<pre><code>import ctypes
print ctypes.sizeof(ctypes.c_voidp)
</code></pre>
<p>It'll be 4 for 32 bit or 8 for 64 bit.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Open python console:</strong></p>
<pre><code>import platform
platform.architecture()[0]
</code></pre>
<p>it should display the '64bit' or '32bit' according to your platform.</p>
<p><strong>Alternatively</strong>( <a href="https://docs.python.org/3/library/platform.html#cross-platform">in case of OS X binaries</a> ):</p>
<pre><code>import sys
sys.maxsize &gt; 2**32 
# it should display True in case of 64bit and False in case of 32bit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a non-programmatic solution, look in the Activity Monitor. It lists the architecture of 64-bit processes as “Intel (64-bit)”.</p>
</div>
<div class="post-text" itemprop="text">
<p>On my Centos Linux system I did the following:
<br/><br/>
1) Started the Python interpreter (I'm using 2.6.6)<br/>
2) Ran the following code:</p>
<pre><code>import platform
print(platform.architecture())
</code></pre>
<p>and it gave me </p>
<pre><code>(64bit, 'ELF')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/platform.html#platform.architecture" rel="nofollow noreferrer"><code>platform.architecture()</code></a> notes say:</p>
<blockquote>
<p>Note:
  On Mac OS X (and perhaps other platforms), executable files may be universal files containing multiple architectures.</p>
<p>To get at the “64-bitness” of the current interpreter, it is more reliable
  to query the sys.maxsize attribute:</p>
</blockquote>
<pre><code>import sys
is_64bits = sys.maxsize &gt; 2**32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Grouping everything...</p>
<p>Considering that:</p>
<ul>
<li>The question is asked for <em>OSX</em> (I have an old (and cracked) <em>VM</em> with an ancient <em>Python</em> version)</li>
<li>My main env is <em>Win</em></li>
<li>I only have the <em>32bit</em> version installed on <em>Win</em> (and I built a "crippled" one on <em>Lnx</em>)</li>
</ul>
<p>I'm going to exemplify on all 3 platforms, using <em>Python3</em> and <em>Python2</em>.</p>
<ol>
<li>Check <a href="https://docs.python.org/3/library/sys.html#sys.maxsize" rel="nofollow noreferrer">[Python 3]: sys.<strong>maxsize</strong></a> value - compare it to <code>0x100000000</code> (<code>2 ** 32</code>): greater for <em>64bit</em>, smaller for <em>32bit</em>:

<ul>
<li><em>OSX 9 x64</em>:

<ul>
<li><em>Python 2.7.10 x64</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; "Python {:s} on {:s}".format(sys.version, sys.platform)
'Python 2.7.10 (default, Oct 14 2015, 05:51:29) \n[GCC 4.8.2] on darwin'
&gt;&gt;&gt; hex(sys.maxsize), sys.maxsize &gt; 0x100000000
('0x7fffffffffffffff', True)
</code></pre>
</blockquote></li>
</ul></li>
<li><em>Ubtu 16 x64</em>:

<ul>
<li><em>Python 3.5.2 x64</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; "Python {:s} on {:s}".format(sys.version, sys.platform)
'Python 3.5.2 (default, Nov 23 2017, 16:37:01) \n[GCC 5.4.0 20160609] on linux'
&gt;&gt;&gt; hex(sys.maxsize), sys.maxsize &gt; 0x100000000
('0x7fffffffffffffff', True)
</code></pre>
</blockquote></li>
<li><em>Python 3.6.4 x86</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; "Python {:s} on {:s}".format(sys.version, sys.platform)
'Python 3.6.4 (default, Apr 25 2018, 23:55:56) \n[GCC 5.4.0 20160609] on linux'
&gt;&gt;&gt; hex(sys.maxsize), sys.maxsize &gt; 0x100000000
('0x7fffffff', False)
</code></pre>
</blockquote></li>
</ul></li>
<li><em>Win 10 x64</em>:

<ul>
<li><em>Python 3.5.4 x64</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; "Python {:s} on {:s}".format(sys.version, sys.platform)
'Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32'
&gt;&gt;&gt; hex(sys.maxsize), sys.maxsize &gt; 0x100000000
('0x7fffffffffffffff', True)
</code></pre>
</blockquote></li>
<li><em>Python 3.6.2 x86</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; "Python {:s} on {:s}".format(sys.version, sys.platform)
'Python 3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] on win32'
&gt;&gt;&gt; hex(sys.maxsize), sys.maxsize &gt; 0x100000000
('0x7fffffff', False)
</code></pre>
</blockquote></li>
</ul></li>
</ul></li>
</ol>
<p><br/></p>
<ol start="2">
<li>Use <a href="https://docs.python.org/3/library/struct.html#struct.calcsize" rel="nofollow noreferrer">[Python 3]: struct.<strong>calcsize</strong>(<em>fmt</em>)</a> to determine the object size produced by the (pointer) format. In other words, determines the pointer size (<code>sizeof(void*)</code>):

<ul>
<li><em>OSX 9 x64</em>:

<ul>
<li><em>Python 2.7.10 x64</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; truct.calcsize("P") * 8
64
</code></pre>
</blockquote></li>
</ul></li>
<li><em>Ubtu 16 x64</em>:

<ul>
<li><em>Python 3.5.2 x64</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; truct.calcsize("P") * 8
64
</code></pre>
</blockquote></li>
<li><em>Python 3.6.4 x86</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; truct.calcsize("P") * 8
32
</code></pre>
</blockquote></li>
</ul></li>
<li><em>Win 10 x64</em>:

<ul>
<li><em>Python 3.5.4 x64</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; truct.calcsize("P") * 8
64
</code></pre>
</blockquote></li>
<li><em>Python 3.6.2 x86</em>:

<blockquote>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; truct.calcsize("P") * 8
32
</code></pre>
</blockquote></li>
</ul></li>
</ul></li>
</ol>
<p><br/></p>
<ol start="3">
<li>Use <a href="https://docs.python.org/3.5/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3.5]: ctypes - A foreign function library for Python</a>. It also boils down to determining the size of a pointer (<code>sizeof(void*)</code>). As a note, <em>ctypes</em> uses <strong><em>#2.</em></strong> (not necessarily for this task) via <em>"${PYTHON_SRC_DIR}/Lib/ctypes/__init__.py"</em> (around <em>line <strong>#15</strong></em></li></ol></div>
<div class="post-text" itemprop="text">
<p><code>struct.calcsize("P")</code> returns size of the bytes required to store a single pointer. On a 32-bit system, it would return 4 bytes. On a 64-bit system, it would return 8 bytes. </p>
<p>So the following would return <code>32</code> if you're running 32-bit python and <code>64</code> if you're running 64-bit python:</p>
<p><strong>Python 2</strong></p>
<pre><code>import struct;print struct.calcsize("P") * 8
</code></pre>
<p><strong>Python 3</strong></p>
<pre><code>import struct;print(struct.calcsize("P") * 8)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>C:\Users\xyz&gt;python

Python 2.7.6 (default, Nov XY ..., 19:24:24) **[MSC v.1500 64 bit (AMD64)] on win
32**
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<p>after hitting python in cmd</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
print(sys.version)
</code></pre>
<p>3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 <strong>64 bit (AMD64)</strong>]</p>
</div>
<div class="post-text" itemprop="text">
<p>Platform Architecture is not the reliable way.
Instead us:</p>
<pre><code>$ arch -i386 /usr/local/bin/python2.7
Python 2.7.9 (v2.7.9:648dcafa7e5f, Dec 10 2014, 10:10:46)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import platform, sys
&gt;&gt;&gt; platform.architecture(), sys.maxsize
(('64bit', ''), 2147483647)
&gt;&gt;&gt; ^D
$ arch -x86_64 /usr/local/bin/python2.7
Python 2.7.9 (v2.7.9:648dcafa7e5f, Dec 10 2014, 10:10:46)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import platform, sys
&gt;&gt;&gt; platform.architecture(), sys.maxsize
(('64bit', ''), 9223372036854775807)
</code></pre>
</div>
<span class="comment-copy">Just out of interest: Why do you need to know?</span>
<span class="comment-copy">I'm having problems building and loading some modules on OS X 10.6.  Specifically pysco, which is complaining I'm running in 64bit mode.  This is under a virtualenv as well so there is some extra complications I need to work through...</span>
<span class="comment-copy">I'd like to know because when I use something like PyInstaller to create a stand-alone binary distributable (to give to users who might not have (the right version of) Python installed, the binary I produce will be 32/64 bit depending on the Python I run PyInstaller with. Ideally I'm thinking I'd like to automatically name the resulting binary/archive file with '32' or '64' in the filename, rather than having to manually rename the files depending on where I execute the 'make' command from.</span>
<span class="comment-copy">Using sys.maxint will not work to detect a 64-bit Python when running Windows (see <a href="http://stackoverflow.com/questions/3411079/why-does-the-python-2-7-amd-64-installer-seem-to-run-python-in-32-bit-mode">here</a>).  Instead, use struct.calcsize("P") for a cross-platform solution.</span>
<span class="comment-copy">Interesting. Does <code>sys.maxsize</code> work for 64-bit Windows?</span>
<span class="comment-copy">Yes, sys.maxsize works for 64-bit Windows.</span>
<span class="comment-copy">Yinon, that's true but that's not what the question asked for.  And, on those CPUs where it is possible to run, say, either 32-bit or 64-bit binaries, the arch of the machine is usually not all that relevant to a Python program; what matters is what arch the Python interpreter itself is running as.</span>
<span class="comment-copy">On windows cmd, you need to put the double quotes on the outside and the single quotes on the inside or else it will produce a syntax error. That's probably because windows thinks spaces between single-quotes are still argument delimiters. It may be helpful to adjust this answer to accommodate that fact.</span>
<span class="comment-copy">so this is what? 64bit python or 32bit python?</span>
<span class="comment-copy">@phpJs 64 bit because of <code>[MSC v.1500 64 bit (AMD64)]</code></span>
<span class="comment-copy">Unfortunately only works for Windows versions of Python. My OSX installation returns <code>Python 2.7.8 (v2.7.8:ee879c0ffa11, Jun 29, 2014, 21:07:35) [GCC 4.2.1 (Apple In. build 5666) (dot 3)] on darwin</code></span>
<span class="comment-copy">Doesn't work on linux either.</span>
<span class="comment-copy">On cygwin, you get this answer: <code>Python 2.7.8 (default, Jul 25 2014, 14:04:36) [GCC 4.8.3] on cygwin</code></span>
<span class="comment-copy">Imho, better than ctypes version - works even with older Python.</span>
<span class="comment-copy">Very useful, can be used in one line.  $ python -c 'import struct; print struct.calcsize("P") * 8'</span>
<span class="comment-copy">That works, too, although it does have the possible slight disadvantage of an unnecessary import and module load if you don't otherwise need ctypes: the sys module, otoh, is compiled into the interpreter.</span>
<span class="comment-copy">please help me understand: on my 64b installation <code>python -c 'import ctypes; print ctypes.sizeof(ctypes.c_voidp)'</code> returns <b>8</b>. Or should it be <code>python -c 'import ctypes; print ctypes.sizeof(ctypes.c_voidp) * 8'</code> ?</span>
<span class="comment-copy">The function returns the size in <a href="http://en.wikipedia.org/wiki/Byte" rel="nofollow noreferrer">bytes</a> (4 or 8). If you need the size in <a href="http://en.wikipedia.org/wiki/Bit" rel="nofollow noreferrer">bits</a> (32 or 64) you have to multiply with 8. b_is_python_64bit = (ctypes.sizeof(ctypes.c_voidp) == 8)</span>
<span class="comment-copy">Just call <code>python -c "import ctypes; print(32 if ctypes.sizeof(ctypes.c_voidp)==4 else 64, 'bit CPU')"</code></span>
<span class="comment-copy">A very nice alternative answer for those of us using Mac OS 10.x.x Thank you!</span>
<span class="comment-copy">Wasn't this solution described as non-working for him by the OP?</span>
<span class="comment-copy">That may be, but this is EXACTLY what I needed; sorry to +1 a "wrong answer", but I needed this badly.</span>
<span class="comment-copy">This solution is perfect for Solaris 11.</span>
<span class="comment-copy">Doesn't apply to <i>OSX</i>.</span>
