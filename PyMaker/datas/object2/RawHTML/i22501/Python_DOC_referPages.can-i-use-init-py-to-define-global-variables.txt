<div class="post-text" itemprop="text">
<p>I want to define a constant that should be available in all of the submodules of a package. I've thought that the best place would be in in the <code>__init__.py</code> file of the root package. But I don't know how to do this. Suppose I have a few subpackages and each with several modules. How can I access that variable from these modules?</p>
<p>Of course, if this is totally wrong, and there is a better alternative, I'd like to know it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to put them in <code>__init__.py</code>.  This is done all the time.</p>
<p><strong><code>mypackage/__init__.py</code></strong>:</p>
<pre><code>MY_CONSTANT = 42
</code></pre>
<p><strong><code>mypackage/mymodule.py</code></strong>:</p>
<pre><code>from mypackage import MY_CONSTANT
print "my constant is", MY_CONSTANT
</code></pre>
<p>Then, import mymodule:</p>
<pre><code>&gt;&gt;&gt; from mypackage import mymodule
my constant is 42
</code></pre>
<p>Still, if you do have constants, it would be reasonable (best practices, probably) to put them in a separate module (constants.py, config.py, ...) and then if you want them in the package namespace, import them.</p>
<p><strong><code>mypackage/__init__.py</code></strong>:</p>
<pre><code>from mypackage.constants import *
</code></pre>
<p>Still, this doesn't automatically include the constants in the namespaces of the package modules.  Each of the modules in the package will still have to import constants explicitly either from <code>mypackage</code> or from <code>mypackage.constants</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do that. You will have to explicitely import your constants into each individual module's namespace. The best way to achieve this is to define your constants in a "config" module and import it everywhere you require it:</p>
<pre><code># mypackage/config.py
MY_CONST = 17

# mypackage/main.py
from mypackage.config import *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define global variables from anywhere, but it is a really bad idea. import the <code>__builtin__</code> module and modify or add attributes to this modules, and suddenly you have new builtin constants or functions. In fact, when my application installs gettext, I get the _() function in all my modules, without importing anything. So this is possible, but of course only for Application-type projects, not for reusable packages or modules.</p>
<p>And I guess no one would recommend this practice anyway. What's wrong with a namespace? Said application has the version module, so that I have "global" variables available like <code>version.VERSION</code>, <code>version.PACKAGE_NAME</code> etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just wanted to add that constants can be employed using a config.ini file and parsed in the script using the configparser library. This way you could have constants for multiple circumstances. For instance if you had parameter constants for two separate url requests just label them like so:</p>
<pre><code>mymodule/config.ini
[request0]
conn = 'admin@localhost'
pass = 'admin'
...

[request1]
conn = 'barney@localhost'
pass = 'dinosaur'
...
</code></pre>
<p>I found the documentation on the Python website very helpful. I am not sure if there are any differences between Python 2 and 3 so here are the links to both:</p>
<p>For Python 3: <a href="https://docs.python.org/3/library/configparser.html#module-configparser" rel="nofollow">https://docs.python.org/3/library/configparser.html#module-configparser</a> </p>
<p>For Python 2: <a href="https://docs.python.org/2/library/configparser.html#module-configparser" rel="nofollow">https://docs.python.org/2/library/configparser.html#module-configparser</a></p>
</div>
<span class="comment-copy">Yeah, it makes sense that you have to import them.</span>
<span class="comment-copy">This should have been the accepted answer. If you are working with Python 2.5 or higher you can also use an explicit relative import as well as described <a href="http://docs.python.org/2/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">here</a>:  <code>from . import MY_CONSTANT</code></span>
<span class="comment-copy">This answer is correct and gives a direct solution rather than a workaround. Thanks for providing this and it should be the accepted answer. +1</span>
<span class="comment-copy">doesn't the second way only work for constants? <code>from mypackage.constants import *</code> will place copies of <code>MY_CONSTANT</code> in every submodule rather than a reference to the same variable</span>
<span class="comment-copy">One catch with the example is if you import <code>mymodule.py</code> in <code>__init__.py</code> before <code>MY_CONSTANT = 42</code> that will fail because when importing <code>mymodule.py</code> <code>MY_CONSTANT</code> hasn't been defined yet. So need to move <code>MY_CONSTANT = 42</code> above <code>import mymodule</code></span>
<span class="comment-copy">Yeah, a configuration file is what I would like. I just thought that <b>init</b>.py would be a good place.  Your solution sounds like standard practice. Is it?</span>
<span class="comment-copy">Good point. I didn't realize the question was to have the constants <i>automatically</i> placed in the namespace of all package modules.</span>
<span class="comment-copy">But every time a script imports config.py, the code inside is executed. What do you recommend if the code inside config.py is to be run only once? Say I'm reading a settings.json file inside config.py and I don't want to open() it every time I import config.py.</span>
<span class="comment-copy">@UGS This is not how Python works. Every module is executed only once. When it is imported the second time, the module is already cached in <code>sys.modules</code>.</span>
<span class="comment-copy">@FerdinandBeyer Oops! I forgot to mention that I'm importing config.py from several scripts and not the same script. Say a.py is importing config.py &amp; b.py and b.py is importing config.py. I was wondering if its possible to make sure code inside config.py is executed only once.</span>
