<div class="post-text" itemprop="text">
<p>I need to write a python script that makes multiple HTTP requests to the same site.  Unless I'm wrong (and I may very well be) urllib reauthenticates for every request.  For reasons I won't go into I need to be able to authenticate once and then use that session for the rest of my requests.  </p>
<p>I'm using python 2.3.4</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to keep the authentication you need to reuse the cookie. I'm not sure if urllib2 is available in python 2.3.4 but here is an example on how to do it:</p>
<pre><code>req1 = urllib2.Request(url1)
response = urllib2.urlopen(req1)
cookie = response.headers.get('Set-Cookie')

# Use the cookie is subsequent requests
req2 = urllib2.Request(url2)
req2.add_header('cookie', cookie)
response = urllib2.urlopen(req2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://github.com/kennethreitz/requests" rel="noreferrer">Requests</a> library. From <a href="http://docs.python-requests.org/en/latest/user/advanced/#session-objects" rel="noreferrer">http://docs.python-requests.org/en/latest/user/advanced/#session-objects</a> :</p>
<blockquote>
<p>The Session object allows you to persist certain parameters across
  requests. It also persists cookies across all requests made from the
  Session instance.</p>
<pre><code>s = requests.session()

s.get('http://httpbin.org/cookies/set/sessioncookie/123456789')
r = s.get("http://httpbin.org/cookies")

print r.text
# '{"cookies": {"sessioncookie": "123456789"}}'
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<h2>Python 2</h2>
<p>If this is cookie based authentication use <a href="http://docs.python.org/2/library/cookielib.html#examples" rel="nofollow noreferrer">HTTPCookieProcessor</a>:</p>
<pre><code>import cookielib, urllib2
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
</code></pre>
<p>If this is HTTP authentication use <a href="http://docs.python.org/2/library/urllib2.html#examples" rel="nofollow noreferrer">basic or digest AuthHandler</a>:</p>
<pre><code>import urllib2
# Create an OpenerDirector with support for Basic HTTP Authentication...
auth_handler = urllib2.HTTPBasicAuthHandler()
auth_handler.add_password(realm='PDQ Application',
                          uri='https://mahler:8092/site-updates.py',
                          user='klem',
                          passwd='kadidd!ehopper')
opener = urllib2.build_opener(auth_handler)
# ...and install it globally so it can be used with urlopen.
urllib2.install_opener(opener)
urllib2.urlopen('http://www.example.com/login.html')
</code></pre>
<p>... and use same opener for every request.</p>
<h2>Python 3</h2>
<p>In Python3 urllib2 and cookielib were moved to <a href="https://docs.python.org/3/library/urllib.request.html#examples" rel="nofollow noreferrer">http.request</a> and <a href="https://docs.python.org/3/library/http.cookiejar.html#examples" rel="nofollow noreferrer">http.cookiejar</a> respectively.</p>
</div>
<span class="comment-copy">Authentication is driven by the site.  If they ask for authentication (via  401 response), your client can provide it.  You can (sometimes) head this off.  Depends on the site's use of the Nonce.</span>
<span class="comment-copy">python 2.3.4 does have urllib2.  Thanks</span>
<span class="comment-copy">That's not so straightforward as you show it is. See RFC 6265, section <i>5.4 The Cookie Header</i>, when you find this statement <i>The user agent MUST use an algorithm equivalent to the following algorithm to compute the "cookie-string" from a cookie store and a request-uri:</i> with the following algorithm.</span>
<span class="comment-copy">requests has serious memory leak problem: <a href="https://github.com/requests/requests/issues/4601" rel="nofollow noreferrer">github.com/requests/requests/issues/4601</a></span>
<span class="comment-copy">Can we manage session and basic auth together? For example using more handlers, i.e.: opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj), auth_handler) ??</span>
<span class="comment-copy">@FabianoTarlao Sure you can. That's the beauty of python's urllib :-)</span>
<span class="comment-copy">Thank you, I was going to update my comment but you anticipated me -- I have successfully tried and works like a charm.</span>
