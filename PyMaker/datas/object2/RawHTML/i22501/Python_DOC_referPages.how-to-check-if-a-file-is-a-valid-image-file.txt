<div class="post-text" itemprop="text">
<p>I am currently using PIL.</p>
<pre><code>from PIL import Image
try:
    im=Image.open(filename)
    # do stuff
except IOError:
    # filename not an image file
</code></pre>
<p>However, while this sufficiently covers most cases, some image files like, xcf, svg and psd are not being detected. Psd files throws an OverflowError exception.</p>
<p>Is there someway I could include them as well?</p>
</div>
<div class="post-text" itemprop="text">
<p>A lot of times the first couple chars will be a magic number for various file formats.  You could check for this in addition to your exception checking above. </p>
</div>
<div class="post-text" itemprop="text">
<p>I have just found the builtin <a href="http://docs.python.org/library/imghdr.html" rel="noreferrer">imghdr</a> module. From python documentation:</p>
<blockquote>
<p>The imghdr module determines the type
  of image contained in a file or byte
  stream.</p>
</blockquote>
<p>This is how it works:</p>
<pre><code>&gt;&gt;&gt; import imghdr
&gt;&gt;&gt; imghdr.what('/tmp/bass')
'gif'
</code></pre>
<p>Using a module is much better than reimplementing similar functionality</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to what Brian is suggesting you could use PIL's <a href="http://effbot.org/imagingbook/image.htm#tag-Image.Image.verify" rel="noreferrer">verify</a> method to check if the file is broken.</p>
<blockquote>
<p>im.verify()</p>
<p>Attempts to determine if the file is
  broken, without actually decoding the
  image data. If this method finds any
  problems, it raises suitable
  exceptions. This method only works on
  a newly opened image; if the image has
  already been loaded, the result is
  undefined. Also, if you need to load
  the image after using this method, you
  must reopen the image file. Attributes</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could use the Python bindings to libmagic, <a href="http://pypi.python.org/pypi/python-magic/" rel="nofollow noreferrer">python-magic</a> and then check the mime types. This won't tell you if the files are corrupted or intact but it should be able to determine what type of image it is.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, I do not know about the insides of psd, but I, sure, know that, as a matter of fact, svg is not an image file per se, -- it is based on xml, so it is, essentially, a plain text file.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Linux, you could use python-magic (<a href="http://pypi.python.org/pypi/python-magic/0.1" rel="nofollow noreferrer">http://pypi.python.org/pypi/python-magic/0.1</a>) which uses libmagic to identify file formats.</p>
<p>AFAIK, libmagic looks into the file and tries to tell you more about it than just the format, like bitmap dimensions, format version etc.. So you might see this as a superficial test for "validity".</p>
<p>For other definitions of "valid" you might have to write your own tests.</p>
</div>
<div class="post-text" itemprop="text">
<p>Would checking the file extensions be acceptable or are you trying to confirm the data itself represents an image file?</p>
<p>If you can check the file extension a regular expression or a simple comparison could satisfy the requirement.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update</strong></p>
<p>I also implemented the following solution in my Python script <a href="https://github.com/ftarlao/check-media-integrity" rel="nofollow noreferrer">here on GitHub</a>.</p>
<p>I also verified that damaged files (jpg) frequently are not 'broken' images i.e, a damaged picture file sometimes remains a legit picture file, the original image is lost or altered but you are still able to load it with no errors. But, file truncation cause always errors. </p>
<p><strong>End Update</strong></p>
<p>You can use Python <em>Pillow</em>(PIL) module, with most image formats, to check if a file is a valid and intact image file.</p>
<p>In the case you aim at detecting also broken images, @Nadia Alramli correctly suggests the <code>im.verify()</code> method, but this <strong>does not detect all the possible image defects</strong>, e.g., <code>im.verify</code> does not detect truncated images (that most viewers often load with a greyed area).</p>
<p><em>Pillow</em> is able to detect these type of defects too, but you have to apply image manipulation or image decode/recode in or to trigger the check. Finally I suggest to use this code:</p>
<pre><code>try:
  im = Image.load(filename)
  im.verify() #I perform also verify, don't know if he sees other types o defects
  im.close() #reload is necessary in my case
  im = Image.load(filename) 
  im.transpose(PIL.Image.FLIP_LEFT_RIGHT)
  im.close()
except: 
  #manage excetions here
</code></pre>
<p>In case of image defects this code will raise an exception.
Please consider that im.verify is about 100 times faster than performing the image manipulation (and I think that flip is one of the cheaper transformations).
With this code you are going to verify a set of images at about 10 MBytes/sec with standard Pillow or 40 MBytes/sec with Pillow-SIMD module (modern 2.5Ghz x86_64 CPU).</p>
<p>For the other formats <em>psd</em>,<em>xcf</em>,.. you can use <em>Imagemagick</em> wrapper <em>Wand</em>, the code is as follows:</p>
<pre><code>im = wand.image.Image(filename=filename)
temp = im.flip;
im.close()
</code></pre>
<p>But, from my experiments Wand does not detect truncated images, I think it loads lacking parts as greyed area without prompting. </p>
<p>I red that <em>Imagemagick</em> has an external command <em>identify</em> that <strong>could</strong> make the job, but I have not found a way to invoke that function programmatically and I have not tested this route.</p>
<p>I suggest to always perform a preliminary check, check the <em>filesize</em> to not be zero (or very small), is a very <em>cheap</em> idea:</p>
<pre><code>statfile = os.stat(filename)
filesize = statfile.st_size
if filesize == 0:
  #manage here the 'faulty image' case
</code></pre>
</div>
<span class="comment-copy">It's not particularly common practice to close duplicates across different languages. If you can't find any other Python questions with this leave it open as there could be Python-specific solutions that people want to post that did not make it to the question you posted.</span>
<span class="comment-copy">yes, first of all I was really hoping for a python lib I didnt know about :P and then as ben pointed out, just the magic numbers doesnt validate the entire image.</span>
<span class="comment-copy">@Sujoy, validating an entire image is nearly impossible, unless you already have a copy of it, because the computer can't tell the difference between a correct colour pixel, and a garbled set of 1s and 0s, as long as all the control (magic numbers) are correct.</span>
<span class="comment-copy">@devinb, agreed, i will just get the magic numbers and be done with it unless someone else comes up with something better to call for a refactor :)</span>
<span class="comment-copy">xcf and psd aren't really images, they're project files that contain (often many) images... you could probably make a case for svg though.</span>
<span class="comment-copy">That won't be sufficient if he's really testing for "valid" images; the presence of a magic number doesn't guarantee that the file hasn't been truncated, for example.</span>
<span class="comment-copy">excellent advice, now i just need to figure out what those numbers are. thanks :)</span>
<span class="comment-copy">@ben, ouch i didnt think of that yet. thats a good point indeed</span>
<span class="comment-copy">@Ben, how would you expect a library to infer a file has been truncated?</span>
<span class="comment-copy">@Ben Blank: True, but solving a problem 99% of the way is often better then not solving it at all.</span>
<span class="comment-copy">yes imghdr works for most image formats but not all. as per my original problem with svg, xcf and psd files, well those are undetected in imghdr as well</span>
<span class="comment-copy">Your answer is actually better, thanks. Like someone above said <i>...but solving a problem 99% of the way is often better then not solving it at all..</i></span>
<span class="comment-copy">Worth to note: <code>imghdr.what(path)</code> returns <code>None</code> if given <code>path</code> is not recognized image file type. <a href="https://docs.python.org/3/library/imghdr.html" rel="nofollow noreferrer">List</a> of currently recognized image types: <i>rgb</i>, <i>gif</i>, <i>pbm</i>, <i>pgm</i>, <i>ppm</i>, <i>tiff</i>, <i>rast</i>, <i>xbm</i>, <i>jpeg</i>, <i>bmp</i>, <i>png</i>, <i>webp</i>, <i>exr</i>.</span>
<span class="comment-copy">Be careful! A valid hdr doesn't mean a valid image (e.g. the image bytes may have been scrambled!)</span>
<span class="comment-copy">Per @FilippoMazza 's comment, I can confirm that a bad image that got cut off during transfer can pass this test, but will break when PIL tries to read it.</span>
<span class="comment-copy">well the main problem is that svg,xcf and psd files cannot be opened with Image.open() hence, no chance of verifying with im.verify()</span>
<span class="comment-copy">My god the PIL documentation is terrible. What is exactly is a "suitable exception"?</span>
<span class="comment-copy">Here's the link to the <a href="https://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image.verify" rel="nofollow noreferrer">Pillow documentation for Image.verify()</a>. Unfortunately, it's no better, and it looks like they just lifted the paragraph above without adding anything.</span>
<span class="comment-copy">I've seen verify raise SyntaxError for corrupt png files</span>
<span class="comment-copy">is there a way to verify "WITH actually decoding the image data"?</span>
<span class="comment-copy">aha, you are right. it is xml. however, it contains some image data embedded in it.</span>
<span class="comment-copy">simply checking extension wont suffice, as one can rename a txt file as jpg or something. i guess, if i can find no solution, only then i will use extension checking for xcf and svg</span>
<span class="comment-copy">Understandable, I was just hoping for some clarification before I proceeded to devise a solution that might better suit your needs.  Thanks!</span>
