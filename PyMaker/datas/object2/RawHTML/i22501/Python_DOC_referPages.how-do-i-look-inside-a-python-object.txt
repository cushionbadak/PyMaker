<div class="post-text" itemprop="text">
<p>I'm starting to code in various projects using Python (including Django web development and Panda3D game development). </p>
<p>To help me understand what's going on, I would like to basically 'look' inside the Python objects to see how they tick - like their methods and properties. </p>
<p>So say I have a Python object, what would I need to print out its contents? Is that even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a strong set of introspection features. </p>
<p>Take a look at the following <a href="http://docs.python.org/library/functions.html" rel="noreferrer">built-in functions</a>:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#type" rel="noreferrer"><code>type()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#dir" rel="noreferrer"><code>dir()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#id" rel="noreferrer"><code>id()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#getattr" rel="noreferrer"><code>getattr()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#hasattr" rel="noreferrer"><code>hasattr()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#globals" rel="noreferrer"><code>globals()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#locals" rel="noreferrer"><code>locals()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#callable" rel="noreferrer"><code>callable()</code></a></li>
</ul>
<p><code>type()</code> and <code>dir()</code> are particularly useful for inspecting the type of an object and its set of attributes, respectively.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>object.__dict__</code></p>
</div>
<div class="post-text" itemprop="text">
<p>First, read the source.</p>
<p>Second, use the <code>dir()</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised no one's mentioned help yet!</p>
<pre><code>In [1]: def foo():
   ...:     "foo!"
   ...:

In [2]: help(foo)
Help on function foo in module __main__:

foo()
    foo!
</code></pre>
<p>Help lets you read the docstring and get an idea of what attributes a class might have, which is pretty helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>If this is for exploration to see what's going on, I'd recommend looking at <a href="http://ipython.scipy.org/moin/" rel="noreferrer">IPython</a>.  This adds various shortcuts to obtain an objects documentation, properties and even source code.  For instance appending a "?" to a function will give the help for the object (effectively a shortcut for "help(obj)", wheras using two ?'s ("<code>func??</code>") will display the sourcecode if it is available.</p>
<p>There are also a lot of additional conveniences, like tab completion, pretty printing of results, result history etc. that make it very handy for this sort of exploratory programming.</p>
<p>For more programmatic use of introspection, the basic builtins like <code>dir()</code>, <code>vars()</code>, <code>getattr</code> etc will be useful, but it is well worth your time to check out the <a href="http://docs.python.org/library/inspect.html" rel="noreferrer">inspect</a> module.  To fetch the source of a function, use "<code>inspect.getsource</code>"  eg, applying it to itself:</p>
<pre><code>&gt;&gt;&gt; print inspect.getsource(inspect.getsource)
def getsource(object):
    """Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    IOError is raised if the source code cannot be retrieved."""
    lines, lnum = getsourcelines(object)
    return string.join(lines, '')
</code></pre>
<p><code>inspect.getargspec</code> is also frequently useful if you're dealing with wrapping or manipulating functions, as it will give the names and default values of function parameters.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're interested in a GUI for this, take a look at <a href="https://pypi.python.org/pypi/objbrowser" rel="noreferrer">objbrowser</a>. It uses the inspect module from the Python standard library for the object introspection underneath.</p>
<p><img alt="objbrowserscreenshot" src="https://i.stack.imgur.com/Vofje.png"/> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can list the attributes of a object with dir() in the shell:</p>
<pre><code>&gt;&gt;&gt; dir(object())
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</code></pre>
<p>Of course, there is also the inspect module: <a href="http://docs.python.org/library/inspect.html#module-inspect" rel="noreferrer">http://docs.python.org/library/inspect.html#module-inspect</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Others have already mentioned the dir() built-in which sounds like what you're looking for, but here's another good tip.  Many libraries -- including most of the standard library -- are distributed in source form.  Meaning you can pretty easily read the source code directly.  The trick is in finding it; for example:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.__file__
'/usr/lib/python2.5/string.pyc'
</code></pre>
<p>The *.pyc file is compiled, so remove the trailing 'c' and open up the uncompiled *.py file in your favorite editor or file viewer:</p>
<pre><code>/usr/lib/python2.5/string.py
</code></pre>
<p>I've found this incredibly useful for discovering things like which exceptions are raised from a given API.  This kind of detail is rarely well-documented in the Python world.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>"""Visit http://diveintopython.net/"""

__author__ = "Mark Pilgrim (mark@diveintopython.org)"


def info(object, spacing=10, collapse=1):
    """Print methods and doc strings.

    Takes module, class, list, dictionary, or string."""
    methodList = [e for e in dir(object) if callable(getattr(object, e))]
    processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
    print "\n".join(["%s %s" %
                     (method.ljust(spacing),
                      processFunc(str(getattr(object, method).__doc__)))
                     for method in methodList])

if __name__ == "__main__":
    print help.__doc__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://github.com/symonsoft/ppretty" rel="noreferrer">ppretty</a></p>
<pre><code>from ppretty import ppretty


class A(object):
    s = 5

    def __init__(self):
        self._p = 8

    @property
    def foo(self):
        return range(10)


print ppretty(A(), indent='    ', depth=2, width=30, seq_length=6,
              show_protected=True, show_private=False, show_static=True,
              show_properties=True, show_address=True)
</code></pre>
<p>Output:</p>
<pre><code>__main__.A at 0x1debd68L (
    _p = 8, 
    foo = [0, 1, 2, ..., 7, 8, 9], 
    s = 5
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://docs.python.org/2/library/pprint.html" rel="noreferrer"><code>pprint</code></a> has been mentioned already by others I'd like to add some context.</p>
<blockquote>
<p>The pprint module provides a capability to “pretty-print” arbitrary
  Python data structures in a form which can be used as input to the
  interpreter. If the formatted structures include objects which are not
  fundamental Python types, the representation may not be loadable. This
  may be the case if objects such as files, sockets, classes, or
  instances are included, as well as many other built-in objects which
  are not representable as Python constants.</p>
</blockquote>
<p><code>pprint</code> might be in high-demand by developers with a PHP background who are looking for an alternative to <a href="https://stackoverflow.com/questions/383944/what-is-a-python-equivalent-of-phps-var-dump/21791626"><code>var_dump()</code></a>.</p>
<p>Objects with a dict attribute can be dumped nicely using <code>pprint()</code> mixed with <a href="https://docs.python.org/3/library/functions.html#vars" rel="noreferrer"><code>vars()</code></a>, which returns the <code>__dict__</code> attribute for a module, class, instance, etc.:</p>
<pre><code>from pprint import pprint
pprint(vars(your_object))
</code></pre>
<p>So, <a href="https://stackoverflow.com/a/192184/8291949">no need for a loop</a>.  </p>
<p>To dump all variables contained in the <em>global</em> or <em>local scope</em> simply use:</p>
<pre><code>pprint(globals())
pprint(locals())
</code></pre>
<p><code>locals()</code> shows variables defined in a function.<br/>
It's also useful to access functions with their corresponding name as a string key, among <a href="https://stackoverflow.com/questions/12693606/reason-for-globals-in-python">other usages</a>:</p>
<pre><code>locals()['foo']() # foo()
globals()['foo']() # foo()
</code></pre>
<p>Similarly, using <a href="https://docs.python.org/3/library/functions.html#dir" rel="noreferrer"><code>dir()</code></a> to see the contents of a module, or the attributes of an object.</p>
<p>And there is still more.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to look at parameters and methods, as others have pointed out you may well use <code>pprint</code> or <code>dir()</code></p>
<p>If you want to see the actual value of the contents, you can do</p>
<p><code>object.__dict__</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There is a python code library build just for this purpose: <a href="http://docs.python.org/2/library/inspect.html" rel="nofollow">inspect</a>  Introduced in Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>Two great tools for inspecting code are:</p>
<ol>
<li><p><a href="https://ipython.org/" rel="nofollow noreferrer">IPython</a>. A python terminal that allows you to inspect using tab completion.</p></li>
<li><p><a href="https://eclipse.org/" rel="nofollow noreferrer">Eclipse</a> with the <a href="http://www.pydev.org/manual_adv_debugger.html" rel="nofollow noreferrer">PyDev plugin</a>. It has an excellent debugger that allows you to break at a given spot and inspect objects by browsing all variables as a tree.  You can even use the embedded terminal to try code at that spot or type the object and press '.' to have it give code hints for you.</p></li>
</ol>
<p><a href="https://i.stack.imgur.com/mMuoA.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/mMuoA.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>pprint and dir together work great</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to look inside a live object, then python's <code>inspect</code> module is a good answer.  In general, it works for getting the source code of functions that are defined in a source file somewhere on disk. If you want to get the source of live functions and lambdas that were defined in the interpreter, you can use <code>dill.source.getsource</code> from <a href="https://github.com/uqfoundation/dill" rel="nofollow"><code>dill</code></a>. It also can get the code for from bound or unbound class methods and functions defined in curries... however, you might not be able to compile that code without the enclosing object's code.</p>
<pre><code>&gt;&gt;&gt; from dill.source import getsource
&gt;&gt;&gt; 
&gt;&gt;&gt; def add(x,y):
...   return x+y
... 
&gt;&gt;&gt; squared = lambda x:x**2
&gt;&gt;&gt; 
&gt;&gt;&gt; print getsource(add)
def add(x,y):
  return x+y

&gt;&gt;&gt; print getsource(squared)
squared = lambda x:x**2

&gt;&gt;&gt; 
&gt;&gt;&gt; class Foo(object):
...   def bar(self, x):
...     return x*x+x
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; print getsource(f.bar)
def bar(self, x):
    return x*x+x

&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>vars(obj) returns the attributes of an object.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pprint

pprint.pprint(obj.__dict__)
</code></pre>
<p>or</p>
<pre><code>pprint.pprint(vars(obj))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are interested to see the source code of the function corresponding to the object <code>myobj</code>, you can type in <code>iPython</code> or <code>Jupyter Notebook</code>:</p>
<p><code>myobj??</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>In addition if you want to look inside list and dictionaries, you can use pprint()</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using:</p>
<pre><code>print(object.stringify())
</code></pre>
<ul>
<li>where <code>object</code> is the variable name of the object you are trying to inspect.</li>
</ul>
<p>This prints out a nicely formatted and tabbed output showing all the hierarchy of keys and values in the object.</p>
<p>NOTE: This works in python3. Not sure if it works in earlier versions</p>
</div>
<span class="comment-copy">Didn't know the term was 'introspection'. That's a great help! Aswell as all the functons you've given me... Thank you!</span>
<span class="comment-copy">property, classmethod and staticmethod are not related to introspection.  These methods all create special types of objects that can be used to define classes with special behavior, but are of no help at inspecting those classes or constructs.</span>
<span class="comment-copy">The answer from @Brian below shows you how to also view the source code of various python objects from within python. That is what I was originally searching for and I'm sure I won't be alone. (It might be worth including a reference to his answer in this answer since it's the most accepted.)</span>
<span class="comment-copy">It's like built-in <b>"IntelliSense"</b> for python. I love it.</span>
<span class="comment-copy">i think its a bad answer. instead of giving us a solution it just gives us everything related to that in the documentation</span>
<span class="comment-copy">Won't work with slots</span>
<span class="comment-copy">this is not working.</span>
<span class="comment-copy"><code>vars(object)</code> is made for that.</span>
<span class="comment-copy">I'd reverse that order.</span>
<span class="comment-copy">The source is more informative than dir() and a better habit to develop.</span>
<span class="comment-copy">I beg to differ. dir() is just so much quicker and in 99% of the cases let's you find out what you need in combination with help().</span>
<span class="comment-copy">I agree with usuallyuseless. A lot of the time, a simple call to dir() will suffice, thus saving you the trouble of having to look through the source code.</span>
<span class="comment-copy">Sometime inspecting objects at run time can be useful but reading sources not. E.g. httplib.py classes and their methods :).</span>
<span class="comment-copy">What if the method has no docstring, i.e. no documentation?</span>
<span class="comment-copy">This works fine in python 3 if you just add parens around the prints.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding <b>how</b> and/or <b>why</b> it solves the problem would improve the answer's long-term value.</span>
<span class="comment-copy">Doesn't work on a 'Request' object "'Request' object has no attribute 'stringify'"</span>
