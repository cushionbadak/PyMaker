<div class="post-text" itemprop="text">
<p>We are working with a code repository which is deployed both to Windows and Linux - sometimes on different directories.  How should one of the modules inside the project refer to one of the non-Python resources in the project (CSV files, etc.)?</p>
<p>If we do something like:</p>
<pre><code>thefile=open('test.csv')
</code></pre>
<p>or:</p>
<pre><code>thefile=open('../somedirectory/test.csv')
</code></pre>
<p>It will work only when the script is run from one specific directory, or a subset of the directories.</p>
<p>What I would like to do is something like:</p>
<pre><code>path=getBasePathOfProject()+'/somedirectory/test.csv'
thefile=open(path)
</code></pre>
<p>Is this the right way? Is it possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try to use a filename relative to the current files path. Example for './my_file':</p>
<pre><code>fn = os.path.join(os.path.dirname(__file__), 'my_file')
</code></pre>
<p>In Python 3.4+ you can also use <a href="https://docs.python.org/3/library/pathlib.htm" rel="noreferrer">pathlib</a>:</p>
<pre><code>fn = pathlib.Path(__file__).parent / 'my_file'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using setup tools or distribute (a setup.py install) then the "right" way to access these packaged resources seem to be using package_resources.</p>
<p>In your case the example would be</p>
<pre><code>import pkg_resources
my_data = pkg_resources.resource_string(__name__, "foo.dat")
</code></pre>
<p>Which of course reads the resource and the read binary data would be the value of my_data</p>
<p>If you just need the filename you could also use</p>
<pre><code>resource_filename(package_or_requirement, resource_name)
</code></pre>
<p>Example:</p>
<pre><code>resource_filename("MyPackage","foo.dat")
</code></pre>
<p>The advantage is that its guaranteed to work even if it is an archive distribution like an egg. </p>
<p>See <a href="http://packages.python.org/distribute/pkg_resources.html#resourcemanager-api" rel="noreferrer">http://packages.python.org/distribute/pkg_resources.html#resourcemanager-api</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I often use something similar to this:</p>
<pre><code>import os
DATA_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), 'datadir'))

# if you have more paths to set, you might want to shorten this as
here = lambda x: os.path.abspath(os.path.join(os.path.dirname(__file__), x))
DATA_DIR = here('datadir') 

pathjoin = os.path.join
# ...
# later in script
for fn in os.listdir(DATA_DIR):
    f = open(pathjoin(DATA_DIR, fn))
    # ...
</code></pre>
<p>The variable</p>
<pre><code>__file__
</code></pre>
<p>holds the file name of the script you write that code in, so you can make paths relative to script, but still written with absolute paths. It works quite well for several reasons:</p>
<ul>
<li>path is absolute, but still relative</li>
<li>the project can still be deployed in a relative container</li>
</ul>
<p>But you need to watch for platform compatibility - Windows' os.pathsep is different than UNIX.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, paths are relative to the <strong><em>current working directory</em></strong>, which in most cases is the directory from which you run your program. The <em>current working directory</em> is very likely not as same as the directory of your module file, so using a path relative to your current module file is always a bad choice.</p>
<p>Using absolute path should be the best solution:</p>
<pre><code>import os
package_dir = os.path.dirname(os.path.abspath(__file__))
thefile = os.path.join(package_dir,'test.cvs')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
cwd = os.getcwd()
path = os.path.join(cwd, "my_file")
f = open(path)
</code></pre>
<p>You also try to normalize your <code>cwd</code> using <code>os.path.abspath(os.getcwd())</code>. More info <a href="http://docs.python.org/library/os.path.html" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the build in <code>__file__</code> variable. It contains the path of the current file. I would implement getBaseOfProject in a module in the root of your project. There I would get the path part of <code>__file__</code> and would return that. This method can then be used everywhere in your project.</p>
</div>
<div class="post-text" itemprop="text">
<p>I spent a long time figuring out the answer to this, but I finally got it (and it's actually really simple):</p>
<pre><code>import sys
import os
sys.path.append(os.getcwd() + '/your/subfolder/of/choice')

# now import whatever other modules you want, both the standard ones,
# as the ones supplied in your subfolders
</code></pre>
<p>This will append the relative path of your subfolder to the directories for python to look in
It's pretty quick and dirty, but it works like a charm :)</p>
</div>
<span class="comment-copy">I think this solution will only work if the resource is in the same directory of the python file, or in a sub directory of it. How do you solve it when you have the following tree structure: /Project_Root_dir     /python_files_dir         /Some more subdirs here             py_file.py     /resources         /some subdirs here              resource_file.csv</span>
<span class="comment-copy">Sorry, the file tree got garbled on that last message... second try: you have your file at /Project_Root_dir/python_files_dir/some_subdirs/py_file.py and you have your resource file at /Project_Root_dir/resources/some_subdirs/resource_file.csv</span>
<span class="comment-copy">You should be able to get to the parent directory using join(foo, '..'). So from /root/python_files/module/myfile, use os.path.join(os.path.dirname(<code>__file__</code>), '..', '..', 'resources')</span>
<span class="comment-copy"><a href="http://docs.python.org/2/library/os.html#os.pardir" rel="nofollow noreferrer"><code>os.pardir</code></a> is slightly better than <code>'..'</code>, though the two are equivalent on both POSIX and Windows.</span>
<span class="comment-copy">@cedbeu: It is equivalent on every system I ever came across and I think every system python runs on today (please correct me if i'm wrong here). However, if you expect python to be ported to a system using a different path separator in the future and want your code to be ready for it, os.pardir will be more portable. I'd make the case that every programmer, even one who never read any python knows the meaning of "..", while "os.pardir" is a level o f indirection one would have to look up in the documentation so personally I'd stick to "..".</span>
<span class="comment-copy">I know this is an old answer, my preferred way is(/was maybe?) to use pkg_resources, but with the disappearance of zipped eggs, is there any harm in just using <code>__file__</code> like the good old days?</span>
<span class="comment-copy">This is a solid approach. Even if the egg convention is going away, setuptools isn't and many are still installing deps against git repos where the egg is built at runtime</span>
<span class="comment-copy">very few use-cases where the <code>cwd</code> is the path of a module, though</span>
<span class="comment-copy">This will only work if you're running the Python program from the same directory as the .py file in question. And in that case, you could just do <code>open('your/subfolder/of/choice')</code> anyway.</span>
<span class="comment-copy">and the OP mentioned that the code needs to work on both Windows and Linux. This will not.</span>
