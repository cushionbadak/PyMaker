<div class="post-text" itemprop="text">
<p>Is there a difference between <code>assertEquals</code> and <code>assertEqual</code> in the python <code>unittest.TestCase</code>?</p>
<p>And if there is not, why are there two functions? Only for convenience? </p>
</div>
<div class="post-text" itemprop="text">
<p>Good question!</p>
<p>Actually, in Python 2.6, both <code>assertEqual</code> and <code>assertEquals</code> are convenience aliases to <code>failUnlessEqual</code>. The source declares them thus: </p>
<pre><code> # Synonyms for assertion methods
 assertEqual = assertEquals = failUnlessEqual
</code></pre>
<p>In <a href="http://docs.python.org/3/library/unittest.html#deprecated-aliases" rel="noreferrer">Python 3</a>, to your point, <code>failUnlessEqual</code> is explicitly deprecated. <code>assertEquals</code> carries this comment :-)</p>
<blockquote>
<p># Synonyms for assertion methods</p>
<p># The plurals are undocumented.  Keep them that way to discourage use.</p>
<p># Do not add more.  Do not remove.</p>
<p># Going through a deprecation cycle on these would annoy many people.</p>
</blockquote>
<p>So, the upshot appears to be that you should use whatever you like for Python 2.x, but tend toward <code>assertEqual</code> for Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>A 3.3 update: From <a href="http://docs.python.org/3.3/library/unittest.html#deprecated-aliases">26.3.7.1.1. Deprecated aliases</a> :</p>
<blockquote>
<p>For historical reasons, some of the TestCase methods had one or more aliases that are now deprecated. The following table lists the correct names along with their deprecated aliases:</p>
</blockquote>
<pre><code>Method Name   | Deprecated alias | Deprecated alias
--------------+------------------+-----------------
assertEqual() | failUnlessEqual  | assertEquals
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not just for Python 3.x, since Python 2.7 <code>assertEquals</code> has been deprecated as well:</p>
<pre><code>Method Name            | Deprecated alias(es)
_________________________________________________________
assertEqual()          | failUnlessEqual, assertEquals
</code></pre>
<p>From <a href="https://docs.python.org/2/library/unittest.html#deprecated-aliases" rel="noreferrer" title="25.3.7.1.1.1. Deprecated aliases">25.3.7.1.1. Deprecated aliases</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think this was tension between the "only one obvious way to do it" vs. "alias to make the overall code flow semantically".  Personally I found I like to read</p>
<pre><code>failIf(some_condition)
</code></pre>
<p>over </p>
<pre><code>assertFalse(some_condition)
</code></pre>
<p>but liked</p>
<pre><code>assertEqual(a, b)
</code></pre>
<p>over the other two (<code>assertEquals(a, b)</code> bothers my sense of grammar).</p>
<p>The "only one obvious way to do it" has taken precedence going forward.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't find any mention of assertEquals in <a href="http://docs.python.org/library/unittest.html" rel="nofollow noreferrer">http://docs.python.org/library/unittest.html</a>.  However, when I import TestCase and then do a "help(TestCase)", it's listed.  I think it's just a synonym for convenience.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you open the source code in python 2.7, you can find this:</p>
<pre><code># Synonyms for assertion methods
# The plurals are undocumented.  Keep them that way to discourage use.
# Do not add more.  Do not remove.
# Going through a deprecation cycle on these would annoy many people.
</code></pre>
<blockquote>
<p>assertEquals = assertEqual</p>
</blockquote>
<pre><code>assertNotEquals = assertNotEqual
assertAlmostEquals = assertAlmostEqual
assertNotAlmostEquals = assertNotAlmostEqual
assert_ = assertTrue
</code></pre>
</div>
<span class="comment-copy">Actually the comment about plurals is ambiguous. It says "the plurals" are undocumented. Your final sentence indicates you understand this to mean method names ending with 's', like <code>assertEquals</code>. Yet grammatically, <i>equals</i> is a singular (3rd person) form of a verb, not a plural. I think you understood correctly what the comment-writer meant, but the word 'plural' is mistaken.</span>
<span class="comment-copy">Yeah, but it badly breaks the "only one obvious way to do it" mantra:-(.</span>
<span class="comment-copy">@Alex - You'll get no argument from me on that.</span>
