<div class="post-text" itemprop="text">
<p>I'm writing something in Python 3 to get proxies from sites and check if the proxies are valid.
I used queue and threading module to make the check procedure faster.
However, the consequence was weird.</p>
<pre><code>def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

q = Queue()
for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

q.join()  
</code></pre>
<p>This is an example from queue document. My code is based on this example.</p>
<p>So, my question is:
 <strong>When will the while loop in worker() end?</strong></p>
<p>When the number of item in queue more than 200, the q keeps block code and 1 item in the queue can't get processed and 1 thread keeps doing q.get(), while other threads say that q was empty.</p>
<p>Please help me out. Thanks.
And sorry about my poor English. I'm still working on it.</p>
<p>----Update ---------------------------------------------------------------------</p>
<p>I tried ThreadPoolExecutor, and it worked, like threading and queue. But the blocking situation didn't change.</p>
<p>After a 20 min game, one trial running of the code ended and printed the expected output.</p>
<p>I found that the check procedure ends in 2 or 3 minutes (for 100 proxies), and the code just kept blocking for about 10 minutes before it ended.</p>
<p>And the second question:
 <strong>What may cause this?</strong> </p>
<p>Thank you! :)</p>
<p>----Update----------------------------------------------------------------------</p>
<p>Problem solved!!</p>
<p>I thought it was the thread thing that cause the block, but it turns out that the connection and transfer time is the causation.</p>
<p>Since I use pycurl for proxy check, and pycurl's default <a href="http://curl.haxx.se/libcurl/c/CURLOPT_TIMEOUT.html" rel="nofollow">TIMEOUT</a> is 300.</p>
<p>I only set CONNECTTIMEOUT to 5 and ignored TIMEOUT which limits the whole transfer time.</p>
<p>And this is the new code I use for proxy check:</p>
<pre><code>c = pycurl.Curl()

c.setopt(c.URL, url)
c.setopt(c.HTTPHEADER, headers)
c.setopt(c.PROXY, proxy)
c.setopt(c.WRITEFUNCTION, lambda x: None)
c.setopt(c.CONNECTTIMEOUT, 5)
*c.setopt(c.TIMEOUT, 5)*

c.perform()
c.close()
</code></pre>
<p>However, setting TIMEOUT to 5 reduced the number of valid proxies significantly. I will keep trying for the best TIMEOUT value.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>while True</code> loop without like that will never end, and your threads will never quit. You have to tell explicitly your threads when to exit.</p>
<p>A way of doing this is by using a sentinel, like this:</p>
<pre><code>end_of_queue = object()

def worker():
    while True:
        item = q.get()
        if item is end_of_queue:
            q.task_done()
            break
        do_work(item)
        q.task_done()

q = Queue()

for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

for i in range(num_worker_threads):
    q.put(end_of_queue)

q.join()
</code></pre>
<p>What I've done here is adding a few <code>end_of_queue</code> elements to your queue, one for each thread. When a thread sees this <code>end_of_queue</code> object, it means it has to quit and can break out of the loop.</p>
<p>If you prefer a different approach, you can consider using an <a href="https://docs.python.org/dev/library/threading.html#event-objects" rel="nofollow"><code>Event</code> object</a> to notify the threads when they have to quit, like this:</p>
<pre><code>quit_event = Event()

def worker():
    while not q.empty() or not quit_event.is_set():
        try:
            item = q.get(timeout=.1)
        except Empty:
            continue
        do_work(item)
        q.task_done()

q = Queue()

for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

quit_event.set()
q.join()
</code></pre>
<p>The drawback of this solution is that you have to <code>get()</code> with a timeout.</p>
<p>Last but not least, your code seems could benefit from using a <a href="https://docs.python.org/dev/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow">thread pool</a>, like this:</p>
<pre><code>with ThreadPoolExecutor(max_workers=num_worker_threads) as executor:
    executor.map(do_work, source())
</code></pre>
<p>(For the reference, <a href="https://hg.python.org/cpython/file/62e88e5a61c0/Lib/concurrent/futures/thread.py#l61" rel="nofollow"><code>ThreadPoolExecutor</code> uses the <code>end_of_queue</code> approach</a>, the only two differences are that <code>end_of_queue</code> is <code>None</code> and each thread is responsible for notifying the other ones.)</p>
</div>
<div class="post-text" itemprop="text">
<p>just another example of using thread, queue and loop from a class</p>
<pre><code>import threading
import Queue

q = Queue.Queue()

class listener(object):
    def __init__(self):
        thread = threading.Thread(target=self.loop)
        # thread.daemon = True
        thread.start()

    def loop(self):
        for i in xrange(0,13):
            q.put(i)

class ui(object):
    def __init__(self):
        listener()
        while True:
            item = q.get()
            print item
            if item == 10:
                break
ui()
</code></pre>
</div>
<span class="comment-copy">The wile loop won't end, since <code>True</code> is always true. Use eg. <code>while not q.empty()</code></span>
<span class="comment-copy">@Finwood Thank you for your response. Since while loop won't end, then I suppose the threads won't end neither. Is that right? Or threads end when q is empty? Or just keep doing while loop?</span>
<span class="comment-copy">Since your threads are configured as <i>daemon</i>, they end when the main program ends. <a href="https://docs.python.org/3.5/library/queue.html#queue.Queue.join" rel="nofollow noreferrer"><code>q.join()</code></a> at the end waits for the queue to get empty, so all your threads end at that time as well. You might want to take a look at a <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow noreferrer"><code>ThreadPoolExecutor</code></a>, though.</span>
<span class="comment-copy">The threads are started before any elements are written to the queue. If you terminate when the queue is empty, they might terminate immediately before you get the chance to fill the queue. That said, please provide a complete but minimal example, so that everyone can reproduce your issues.</span>
<span class="comment-copy">Please avoid asking two questions in one. For the second problem, create a new question and provide an example, as Ulrich said. See also <a href="http://stackoverflow.com/help/mcve">mcve</a></span>
<span class="comment-copy">Thank you for the answer. I tried thread pool, and it worked perfectly, for a while. Please take a look at update.</span>
