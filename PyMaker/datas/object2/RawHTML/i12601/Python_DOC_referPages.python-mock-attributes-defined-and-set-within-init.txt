<div class="post-text" itemprop="text">
<p>I am trying to write some unit tests for an application and I using python mock. I am familiar with other mocking libraries and haven't had much trouble until now. I am trying to mock a chained call on an attribute set within the <strong>init</strong> block of the parent class. Here is an example of what I need:</p>
<pre><code>class ApplicationUnderTest:

    def __init__(self):
      self.attributeBeginningChain = SomeClass(False)

    def methodWithChain(self):
      object = self.attributeBeginningChain.methodOfSomeClass()
</code></pre>
<p>I need the chained call to throw an error. I have tried resolving this in the following manner:</p>
<pre><code>@patch.object(SomeClass(False), 'methodOfSomeClass', side_effect=ErrorClass)
def test_chained_call(self, mock_someclass):
    A = ApplicationUnderTest.methodWithChain()
    self.assertTrue(mock_someclass.called)
</code></pre>
<p>The last assertion fails so I am pretty sure this isn't the way to do this. I have also tried:</p>
<pre><code>@patch('ApplicationUnderTest.attributeBeginningChain')
def test_chained_call(self, mock_someclass):
    mock_someclass.methodOfSomeClass.side_effect = ErrorClass
    A = ApplicationUnderTest.methodWithChain()
    self.assertTrue(mock_someclass.called)
</code></pre>
<p>That throws the error:</p>
<pre><code>AttributeError: package.ApplicationUnderTest does not have the attribute 'attributeBeginningChain'
</code></pre>
<p>I cannot make alterations to the code under test, so my question is how can I mock chained calls made on attributes set under the 
_init__ function? I have read that this is not possible but surely there must be a work around? Can I perhaps somehow instruct the mock fixture to react to the call itself rather than the attribute object via autospec?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>attributeBeginningChain</code> instance attribute is set by <code>__init__</code> so the patched static value that you set by <code>patch</code> call in <code>ApplicationUnderTest</code> call will  be override by <code>__init__</code> call.</p>
<p>You should patch <code>ApplicationUnderTest</code> instance instead:</p>
<pre><code>def test_chained_call(self):
    A = ApplicationUnderTest()
    with patch.object(A, 'attributeBeginningChain') as mock_someclass:
        mock_someclass.methodOfSomeClass.side_effect = ErrorClass
        with self.assertRaise(ErrorClass):
            A.methodWithChain()
</code></pre>
<p>Another possibility is to patch directly <code>SomeClass.methodOfSomeClass</code></p>
<pre><code>@patch('package.SomeClass.methodOfSomeClass', side_effect=ErrorClass)
def test_chained_call(self, mock_methodOfSomeClass):
    with self.assertRaise(ErrorClass):
        ApplicationUnderTest().methodWithChain()
</code></pre>
<p>I'm not sure where your objects are and so how you should patch them: take a look at <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">where to patch</a> to understand how you should use <code>patch</code> calls.</p>
</div>
<span class="comment-copy">Thanks for the reply! I haven't tried this yet (moved on to other things) but I will check this out and respond when I get back to it.</span>
