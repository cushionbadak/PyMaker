<div class="post-text" itemprop="text">
<p>I am trying to compile a simple <code>cython</code> module using the following <code>setup.py</code>:</p>
<pre><code>from distutils.core import setup
from Cython.Build import cythonize

setup(
    ext_modules=cythonize("verifier_c.pyx"),
)
</code></pre>
<p>I have the following folder structure:</p>
<pre><code>.
c_ext/
  __init__.py
  verifier_c.pyx
  setup.py
</code></pre>
<p>If I run the following:</p>
<pre><code>python setup.py build_ext --inplace
</code></pre>
<p>I get an extra <code>c_ext</code> subfolder like this:</p>
<pre><code>.
c_ext/
  build/
    ...
  c_ext/
    verifier_c.so
  __init__.py
  verifier_c.pyx
  setup.py
</code></pre>
<p>But if I remove the <code>__init__.py</code> file, I get the <code>verifier_c.so</code> file in the same folder as <code>verifier_c.pyx</code>.</p>
<p>I did not find where this behavior is documented, but I would like to keep <code>verifier_c.so</code> in the same folder as <code>verifier_c.pyx</code> but without having to delete <code>__init__.py</code> each time I run <code>setup.py</code>. How can I achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments, the <code>setup.py</code> should not live inside your package. As far as I know the build_ext commands has no option (apart from <code>--inplace</code>) to specify a target path. You can find some documentation <a href="http://www.cac.cornell.edu/wiki/index.php?title=Python_Distutils_Tips" rel="nofollow noreferrer">here</a>. Also <a href="https://stackoverflow.com/questions/31847561/the-command-python-setup-py-build-ext-inplace-always-create-a-new-directory">this question</a> deals with a similar topic.</p>
<p>To adapts the required package structure your package would have to look like:</p>
<pre><code>c_ext/
    setup.py
    myfile.py
    verifier/
        __init__.py
        verifier_c.pyx
</code></pre>
<p>You will get an extension that lives in the verifier package:</p>
<pre><code>me@machine:~/c_ext/$ python setup.py build_ext --inplace

c_ext/
    setup.py
    myfile.py
    verifier/
        __init__.py
        verifier_c.pyx
        verifier_c.so
</code></pre>
<p>You can then import verifier_c from the verifier package. For example from <code>myfile.py</code> this would look like:</p>
<pre><code>from verifier import verifier_c
...
</code></pre>
<p>You can manage a separate package (and folder) for each Cython extension or create one sub folder that contains all of them. You have to pass the other modules to <code>cythonize</code> as well. It can handle a <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob pattern</a>, list of glob patterns or a list of <code>Distutils.Extensions</code> objects. The latter can be handy to specify cython compiler directives </p>
<pre><code>from distutils.core import setup
from distutils.extension import Extension
from Cython.Build import cythonize

extensions = [
    Extension("verifier_c", ["verifier/verifier_c.pyx"]),
    Extension("something_else", ["foobar/something_else.pyx"] compiler_directives={'embedsignature': True}),
    ]

setup(
    ext_modules=cythonize(extensions),
)
</code></pre>
<p>I hope this help :)</p>
</div>
<span class="comment-copy">The <code>setup.py</code> is in the wrong folder. Move it up one level and change the argument of <code>cythonize()</code> accordingly. Then the <code>.so</code> file should show up in the already existing <code>c_ext/</code> folder (which is a package if there is a <code>__init__.py</code> file present.</span>
<span class="comment-copy">@BlackJack It is not possible to have the <code>setup.py</code> and <code>.pyx</code> file in the same folder and generate the <code>.so</code> in this folder? I would like to totally separate the <code>c</code> part from the reste of my app (and thus not put the <code>setup.py</code> in the base app).</span>
<span class="comment-copy">I don't know if it's possible somehow but it is just wrong to have the <code>setup.py</code> in that spot. It's part of the package the way you organized it.  There is a <code>c_ext.setup</code> module this way which doesn't make sense.</span>
