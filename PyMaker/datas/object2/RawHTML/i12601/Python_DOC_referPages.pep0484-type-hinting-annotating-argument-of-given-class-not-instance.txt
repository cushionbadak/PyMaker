<div class="post-text" itemprop="text">
<p>Let me explain with some sample, first.<br/>
Suppose there is a web API client module (MyAPIClient), a mapper class that converts arbitrary response into Python object (ObjectMapper), and a class that represents response object (User and Message).</p>
<pre><code>class User(MyResponse):
    def __init__(self, status: int, id: int, name: str) -&gt; None:
        super().__init__(status)
        self.id = int
        self.name = name

class Message(MyResponse):
    def __init__(self, status: int, id: int, text: str) -&gt; None:
        super().__init__(status)
        self.id = int
        self.text = name

class ObjectMapper(object):
    def __init__(self, mapping_class: ???) -&gt; None:
        self.mapping_class = mapping_class

    def map(self, obj) -&gt; MyResponse:
        return self.mapping_class(**kwargs)

class MyAPIClient(object):
    def __init__(self, ...) -&gt; None:
        pass

    def get_current_user(...) -&gt; User:
        self.request("GET", "/current_user", ObjectMapper(User))

    def get_message(...) -&gt; Message:
        self.request("GET", "/message", ObjectMapper(Message))

    def request(method: str, endpoint: str, mapper: ObjectMapper):
        res = requests.request(...)
        return json.loads(response.content.decode(), object_hook=mapper.map)
</code></pre>
<p>As shown in the sample above, ObjectMapper receives an argument named "mapping_class." This is <strong>NOT</strong> an instance of the class, but a class itself as shown in <em>MyAPIClient#get_current_user</em> and <em>MyAPIClient#get_message</em>. My question is how I should annotate this mapping_class in the <strong>ObjectMapper#__init__</strong> which is currently marked as "???" in the sample above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Class itself is <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow">callable</a>, that returns instance of that class. Solution can be:</p>
<pre><code>mapping_class: Callable[..., MyResponse]
</code></pre>
</div>
<span class="comment-copy">I am not familiar with PEP 484, but all classes are instances of <code>type</code>. If this helps you, feel free to post it as an answer yourself, because I cannot judge the applicability with respect to PEP 484.</span>
<span class="comment-copy">Thank you for bringing that up, @JonasWielicki. I actually tried going with "type," but kind of gaveup because... 1)  mypy complains "error: 'type' not callable," and 2) assigning "type" seems too broad, so I'd like to narrow it down to something related to "MyResponse" class in the sample above because it's the base class of "User" and "Message".</span>
<span class="comment-copy">Yeah, that's what I thought. However mypy and PyCharm complain "not callable" error. Since the code is expecting to receive the instance of MyResponse or its subclasses instance, it's natural that it complains "not callable" because any of them has <b>call</b> implemented and I'm not going to. So here comes the initial question, how to let them know we are just passing class, not instance...</span>
<span class="comment-copy">@PadraicCunningham 'mapping_class: MyResponse' - is wrong: type(MyResponse) != type(MyResponse())</span>
<span class="comment-copy">Just declare with "mapping_class: type".  PyCharm won't complain about it anymore, but mypy returns "error: 'type' not callable" on the calling part; "self.mapping_class(**kwargs)".</span>
<span class="comment-copy">Pycharm etc.. would still complain, object is not callable</span>
<span class="comment-copy">@PadraicCunningham it's not about solution, but about Pycharm doesn't support "Callable" annotation yet, see: <a href="https://youtrack.jetbrains.com/issue/PY-17888" rel="nofollow noreferrer">youtrack.jetbrains.com/issue/PY-17888</a> You can vote for that issue :)</span>
<span class="comment-copy">I could pass <code>ObjectMapper(Foo)</code> where Foo has no relation to MyResponse and it would work fine</span>
<span class="comment-copy">@PadraicCunningham, why? "Callable[..., MyResponse]" says that return value should be instance of "MyResponse". Instance of "Foo" is not instance of "MyResponse".</span>
<span class="comment-copy">That is my point, you can pass anything and there is no warning or error</span>
