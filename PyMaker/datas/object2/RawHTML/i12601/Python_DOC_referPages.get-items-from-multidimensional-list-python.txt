<div class="post-text" itemprop="text">
<p>I have a list with the following appearance:</p>
<pre><code> [0] = [ [0.0, 100.0], [0.1, 93.08], [0.3, 92.85], [0.5, 92.62], [0.7, 91.12], [0.9, 90.89] ]

 [1] = [ [0.0, 100.0], [0.1, 2.79], [0.3, 2.62], [0.5, 2.21], [0.7, 1.83], [0.9, 1.83] ]
</code></pre>
<p>and IÂ´d like to obtain vectors to plot the info as follows:</p>
<pre><code>[0.0, 0.1, 0.3, 0.5, 0.7, 0.9]
[100.0, 93.08, 92.85, 92.62, 91.12, 90.89]
</code></pre>
<p>and the same with all entries in the list.
I was trying something like:</p>
<pre><code>x = mylist[0][:][0]
</code></pre>
<p>Any ideas? I appreciate the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#zip"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; mylist = [
    [0.0, 100.0], [0.1, 93.08], [0.3, 92.85], [0.5, 92.62],
    [0.7, 91.12], [0.9, 90.89] ]
&gt;&gt;&gt; a, b = zip(*mylist)
&gt;&gt;&gt; a
(0.0, 0.1, 0.3, 0.5, 0.7, 0.9)
&gt;&gt;&gt; b
(100.0, 93.08, 92.85, 92.62, 91.12, 90.89)

&gt;&gt;&gt; list(a)
[0.0, 0.1, 0.3, 0.5, 0.7, 0.9]
&gt;&gt;&gt; list(b)
[100.0, 93.08, 92.85, 92.62, 91.12, 90.89]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With pure-python you should use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list-comprehension</a></p>
<pre><code>data = [ [0.0, 100.0], [0.1, 93.08], [0.3, 92.85], [0.5, 92.62], [0.7, 91.12], [0.9, 90.89] ]
listx = [item[0] for item in data ]
listy = [item[1] for item in data ]

&gt;&gt;&gt;listx
[0.0, 0.1, 0.3, 0.5, 0.7, 0.9]
&gt;&gt;&gt;listy
[100.0, 93.08, 92.85, 92.62, 91.12, 90.89]
</code></pre>
<p>I think its a bit better than <strong>zip</strong> because it is easier to read and you do not have to cast the tuples</p>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy</code> solution:</p>
<pre><code>import numpy as np
data = [ [0.0, 100.0], [0.1, 93.08], [0.3, 92.85], [0.5, 92.62], [0.7, 91.12], [0.9, 90.89] ]
data_np = np.array(data)
a = data_np[:,0]
b = data_np[:,1]

In [126]: a
Out[126]: array([ 0. ,  0.1,  0.3,  0.5,  0.7,  0.9])

In [127]: b
Out[127]: array([ 100.  ,   93.08,   92.85,   92.62,   91.12,   90.89])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One can use <code>map</code> too:</p>
<pre><code>a = map(lambda x: x[0], your_list)
b = map(lambda x: x[1], your_list)
</code></pre>
</div>
<span class="comment-copy">Is this just python or numpy?</span>
<span class="comment-copy">Just pyhton. I should've used numpy but it's too late now.</span>
<span class="comment-copy">Dang it, I had this answer, plus a whole Devo 'when a problem comes along you must zip it' joke going on :(</span>
<span class="comment-copy">one line solution: <code>a, b = map(list, zip(*data))</code></span>
