<div class="post-text" itemprop="text">
<p>I'm testing some code to timeout a function call using multiprocessing with <code>Process</code> and <code>Queue</code>. The <code>Queue.get()</code> method takes an optional timeout parameter. I wrote the following test to confirm it throws a timeout error when the called process takes longer than what is allotted in the call to <code>get</code> but it doesn't throw the error. Can anybody tell me how I'm failing to properly test the <code>get</code> timeout? I'm on <strong>Windows 7 with python 2</strong>.</p>
<pre><code>import time
from multiprocessing import Process, Queue


def f(q, t):
    time.sleep(t)
    q.put(0)

if __name__ == '__main__':
    q = Queue()
    p = Process(target=f, args=(q, 15, ))
    p.start()
    x = q.get(1)
    print "received ", x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.get" rel="nofollow">documentation</a>, <code>Queue.get</code> receives 2 parameters: <code>block</code> and <code>timeout</code>, in that order. You should call it like this</p>
<pre><code>q.get(timeout=1)
</code></pre>
</div>
<span class="comment-copy">The first argument to Queue.get is whether or not to block. The second argument is the length of time to wait (in seconds).</span>
<span class="comment-copy">Thank you! I was mistakenly looking at the doc for the get method of multiprocessing.pool.AsyncResult... Thanks for the help.</span>
