<div class="post-text" itemprop="text">
<p>The below code snippet is getting different outputs from Python 2.7 and 3.3.</p>
<pre><code>data = {'_out':[1,2,3,3,4]}
codes = ['_tmp=[]',
         '[_tmp.append(x) for x in _out if x not in _tmp]',
         'print(_tmp)']
for c in codes:
    exec(c,{},data)
</code></pre>
<p>Output from Python 2.7:</p>
<pre><code>[1,2,3,4]
</code></pre>
<p>Output from Python 3.3:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 8, in &lt;module&gt;
    exec(c,{},data)
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;listcomp&gt;
NameError: global name '_tmp' is not defined
</code></pre>
<p>To fix the error in Python 3.3, I simply set the globals to be as the same as locals, that is <code>exec(c,data,data)</code>.  Any idea why Python 3.3 is not behaving as that in 2.7?</p>
</div>
<div class="post-text" itemprop="text">
<p>It appears to be known and <strong>desired</strong> behaviour, see issue 13557 
<a href="https://bugs.python.org/issue13557" rel="nofollow">https://bugs.python.org/issue13557</a></p>
<p>and further in </p>
<p><a href="https://docs.python.org/3/reference/executionmodel.html#interaction-with-dynamic-features" rel="nofollow">https://docs.python.org/3/reference/executionmodel.html#interaction-with-dynamic-features</a></p>
<blockquote>
<p><strong>The eval() and exec() functions do not have access to the full environment for resolving names</strong>. Names may be resolved in the local and global namespaces of the caller. <strong>Free variables are not resolved in the nearest enclosing namespace, but in the global namespace</strong>.</p>
</blockquote>
<p>You can solve the above problem by not using list comprehension with local variables method calls, or by providing variables through global scope</p>
<h3>Loops instead</h3>
<pre><code>data = {'_out':[1,2,3,3,4]}
codes = ['_tmp=[]', """
for x in _out: 
  if x not in _tmp: 
    _tmp.append(x)
""",
         'print(_tmp)']

for c in codes:
    exec(c, {}, data)
</code></pre>
<h3>Global environment</h3>
<pre><code>data = {'_out':[1,2,3,3,4]}
codes = ['_tmp=[]',
         '[_tmp.append(x) for x in _out if x not in _tmp]',
         'print(_tmp)']
for c in codes:
    exec(c, data)
</code></pre>
</div>
<span class="comment-copy">even more interesting - it works just fine when using simple <code>for</code> loop instead of comprehension (which is by the way - incorrect way to operate with your list)</span>
<span class="comment-copy">Yup, for loop works, that's why I thought it was a bug. Thanks for the comprehensive answer.  Issue 13557 is a great find!</span>
<span class="comment-copy">Two things or relevance here changed in 3.0.  <code>Exec</code> is now a function instead of a statement. The body of comprehensions is now executed in a separate namespace instead of the namespace that contains the comprehension.</span>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/q/2220699/4014959">What's the difference between eval, exec, and compile in Python?</a>, especially the excellent <a href="http://stackoverflow.com/a/29456463/4014959">answer</a> by Antti Haapala.</span>
