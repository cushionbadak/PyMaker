<div class="post-text" itemprop="text">
<p>Does asyncio supports asynchronous I/O for file operations? If yes, how I can use this in Python 3.5 with async/await syntax code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Most operating systems don't support asynchronous file operations.
That's why <code>asyncio</code> doesn't support them either.</p>
<p>See <a href="https://github.com/python/asyncio/wiki/ThirdParty#filesystem" rel="noreferrer">the asyncio wiki</a> for further explanation.</p>
</div>
<div class="post-text" itemprop="text">
<p>That depends what library you use.</p>
<p><code>curio</code> offers this functionality, <a href="https://curio.readthedocs.io/en/latest/reference.html#module-curio.file" rel="noreferrer">https://curio.readthedocs.io/en/latest/reference.html#module-curio.file</a></p>
<p>plain <code>asyncio</code> doesn't, but there are 3rd party libraries, e.g. <a href="https://github.com/Tinche/aiofiles" rel="noreferrer">https://github.com/Tinche/aiofiles</a> (which is really synchronous file access isolated in threads)</p>
<p>Modern operating systems do provide asynchronous file primitives, but these are varied, thus each would need own implementation. Please compare:</p>
<ul>
<li><a href="http://man7.org/linux/man-pages/man7/aio.7.html" rel="noreferrer">http://man7.org/linux/man-pages/man7/aio.7.html</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365683(v=vs.85).aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/windows/desktop/aa365683(v=vs.85).aspx</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/TechniquesforReadingandWritingCustomFiles/TechniquesforReadingandWritingCustomFiles.html" rel="noreferrer">https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/TechniquesforReadingandWritingCustomFiles/TechniquesforReadingandWritingCustomFiles.html</a></li>
</ul>
<p>I suspect someone will soon rip out underlying async io from <code>node.js</code> and make a decent Python library, or perhaps someone already has.</p>
</div>
<div class="post-text" itemprop="text">
<p>asyncio does not have support for this. However,  <a href="https://github.com/Tinche/aiofiles/" rel="noreferrer">aiofiles</a> supports just this. Please have a look.</p>
</div>
<span class="comment-copy">You mean like in the docs and examples? <a href="https://docs.python.org/3/library/asyncio-eventloop.html#watch-file-descriptors" rel="nofollow noreferrer">docs.python.org/3/library/…</a> <a href="https://docs.python.org/3/library/asyncio-eventloop.html#watch-a-file-descriptor-for-read-events" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">I mean, i need non-blocking file I/O functionality. But in docs i found only descriptors monitoring functions.</span>
<span class="comment-copy">If you just want non-blocking IO you should just be able to use python's threads. Do you want async IO or non-blocking IO? <a href="http://stackoverflow.com/questions/319132/asynchronous-file-writing-possible-in-python" title="asynchronous file writing possible in python">stackoverflow.com/questions/319132/…</a> might have some useful info.</span>
<span class="comment-copy">Let's explain. I have several Tasks in my IOLoop, that are working with sockets. And I want to add one more Task, that will read data to send from a file. Synchronization will be performed by asyncio.Queue.</span>
<span class="comment-copy">It is. Even <code>node.js</code> uses thread pool internally for providing async file API</span>
<span class="comment-copy">You mean they do support it?</span>
<span class="comment-copy">They <i>emulate</i> it, it makes a difference.</span>
<span class="comment-copy">It is not achieved cooperatively, so it suffers from having to to code around pre-emptive context switches, so more inefficient all in all?</span>
<span class="comment-copy">It uses thread pool internally, not cooperative switch.  Performance is quite good though.</span>
<span class="comment-copy">As far as I know, all options that you've mentioned use threads (curio, aiofiles, glib's aio implementation, and even Windows Overlapped I/O uses a thread pool under the hood).</span>
<span class="comment-copy">Is there a recommendation? aiofiles as suggested by the official python asyncio docs?</span>
<span class="comment-copy">For <code>curio</code>, the canonical recommendation is <code>curio.file</code>; There doesn't seem to be a recommendation for <code>asyncio</code>, so pick whatever's popular, like <code>aiofiles</code>.</span>
