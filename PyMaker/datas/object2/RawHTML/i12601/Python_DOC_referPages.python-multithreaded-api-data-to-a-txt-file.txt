<div class="post-text" itemprop="text">
<p>I currently have a Python script that makes an API request to an endpoint, gets back a list of data, saves this data to a file and counts the number of records gotten. </p>
<p>The API request is currently one big request e.g: 'Get All data from last 7 days'. I know that if I run 7 requests rather than one big one, its much faster but can I run all 7 at the same time using Multithreading - and save all outputs to the same file, at the same time?</p>
<p>Or would I have to save 7 files individually and then collect them all together in a kind of 'post multithread processing'? Or would all 7 threads happily save to the same file at the same time?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>map()</code> is the obvious solution in cases like this. But the built-in map is not concurrent.</p>
<p>If you are using Python 3.5 you could use a <code>ThreadpoolExecutor.map()</code> from  <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow"><code>concurrent.futures</code></a>.</p>
<p>Since Python 2 doesn't have <code>concurrent.futures</code>, I would recommend <code>Pool.map()</code> from <a href="https://docs.python.org/2.7/library/multiprocessing.html" rel="nofollow"><code>multiprocessing</code></a> since the <code>threading</code> module in Python2 doesn't have an equivalent for that.</p>
<p>I am not <em>sure</em> that the <code>map()</code> methods return a list that is in the same order as the arguments that were supplied to it. The documentation isn't explicit on this. If this is important to you, have the function that you supply to the map return a tuple of its input and result, then you can always sort them out if necessary.</p>
</div>
<span class="comment-copy">you can get results back  from all threads and save all in a file, but use multiprocessing</span>
<span class="comment-copy">what would be the difference between multithreading and multiprocessing here?</span>
<span class="comment-copy">read docs, it explains why it's better to use - <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html</a></span>
<span class="comment-copy">Multithreading runs many threads in one process. Multiprocessing runs many separate processed.For this use case multiprocessing is <i>not</i> the better choice, since the GIL doesn't hurt networking. BTW, you can not write concurrently to the same file without synchronization. It'd</span>
