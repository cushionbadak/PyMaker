<div class="post-text" itemprop="text">
<p>I've got a regular expression:</p>
<pre><code>valid_name = re.compile("^[_a-zA-Z][_a-zA-Z0-9]*$")
</code></pre>
<p>Is there a way to build a new regular expression using <code>valid_name</code>? Something like:</p>
<pre><code>valid_module = re.compile("^(VALID_NAME\.)*VALID_NAME$")
</code></pre>
<p>I don't want to use string concatenation but use compiled regular expressions in new ones.</p>
</div>
<div class="post-text" itemprop="text">
<p>You won't be able to reuse a compiled regular expression, but you can do better than plain string concatenation.</p>
<p>Python's <code>regex</code> module <a href="https://pypi.python.org/pypi/regex#additional-features" rel="nofollow">supports</a> Perl's <code>(?(DEFINE)...)</code> syntax.</p>
<p>So you can define a string with common expressions you want to reuse later, concatenate that to your pattern, and <em>call</em> the subexpressions with the recursion syntax: <code>(?&amp;name)</code>.</p>
<p>Here's an example:</p>
<pre><code>import regex

common = r"""(?(DEFINE)
             (?&lt;VALID_NAME&gt;\b[_a-zA-Z][_a-zA-Z0-9]*)
             (?&lt;SOMETHING_ELSE&gt;[-+/*])
         )"""

pattern = regex.compile(common + r"((?&amp;VALID_NAME)\.)*(?&amp;VALID_NAME)")

result = pattern.search("42hello! foo.bar.baz")

print(result[0])
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>foo.bar.baz
</code></pre>
</div>
<span class="comment-copy">No, I don't think there is.</span>
<span class="comment-copy">You can get the original pattern string from <code>valid_name.pattern</code> and then do string concatenation on that, but there's no way for one regular expression to directly reference another one.  The regex syntax doesn't have any provision for that.  If you want to do complex parsing like this, you may be better off looking at a parsing library instead of using regexes.</span>
<span class="comment-copy">Note that compiling regular expressions is not really necessary in python, since the regular expressions are cached anyway. This might clean up your code, since you could then just use simple strings.</span>
<span class="comment-copy">@jonrsharpe when there's a will, there's a way :)</span>
<span class="comment-copy">Note: Don't confuse the <code>regex</code> module with the usually used <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> module</a>.</span>
