<div class="post-text" itemprop="text">
<p>Working with currency data in Python Pandas/Numpy, I am experiencing "unexpected" rounding behavior due to the float representation of decimals. For example</p>
<pre><code>import numpy as np    
np.round(19.95 * 0.9, 2)
17.949999999999999
</code></pre>
<p>Calculating in decimals as I learned in school, the result is 17.955 so I would expect rounding to 17.96.</p>
<p>How can I represent numbers in Python Pandas to achieve "decimal style" rounding? I have seen the Decimal module and the currency package, but I'm not sure how to efficiently use them with Pandas data frames.</p>
<p><strong>SOLUTION:</strong></p>
<p>In case anybody else is interested, this is how I solved the problem:</p>
<pre><code>from decimal import Decimal
import pandas as pd

def float2dec(value):
    "Convert `value` to Decimal cents."
    return Decimal(value).quantize(Decimal('0.01'))

df = pd.DataFrame({'price': [1.90, 1.95, 19.95]})

df['price_reduced'] = (df['price'].map(float2dec) * float2dec(0.9)).map(float2dec)

#    price      price_reduced
#0  1.90        1.71
#1  1.95        1.76
#2  19.95       17.96
</code></pre>
<p>Also, I ended up using the <a href="https://stackoverflow.com/a/8192918/3392896">cdecimal implementation</a>, which uses the same syntax but is some 10x faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the Decimal type in pandas dataframes. Everything should work as expected since the Decimal type implements it's own versions of addition and multiplication, which pandas will happily use behind the scenes for sum, cumsum, etc.</p>
<p>It won't be as fast as floating points, but using precise decimal representations is <em>never</em> as fast as using floating points.</p>
<p>I wouldn't worry about efficiency unless you actually run into performance problems in your program.</p>
<p><a href="http://rhodesmill.org/brandon/2014/pandas-payroll/" rel="nofollow">http://rhodesmill.org/brandon/2014/pandas-payroll/</a></p>
</div>
<span class="comment-copy">The original answer is actually slightly lower than 17.955 (17.9549999999999982946974341757595539093017578125) due to floating point. The rounding down is therefore correct. 17.95 is also not able to be exactly represented in floating point, giving you your final answer of 17.949999999999999.  See <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">Floating Point Arithmetic: Issues and Limitations</a>.  This issue is not specific to Python.</span>
<span class="comment-copy">Yes, anytime you are working with currency data, <i>use decimal types</i></span>
<span class="comment-copy">Excellent, I had forgotten cdecimal exists.</span>
