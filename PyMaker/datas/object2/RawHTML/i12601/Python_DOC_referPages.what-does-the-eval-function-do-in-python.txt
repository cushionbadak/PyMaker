<div class="post-text" itemprop="text">
<p>Please consider a code:</p>
<pre><code>import random
name = input("Welcome to this Arithmetic quiz,please enter your name:")

number1 = random.randint(20,50)
number2 = random.randint(1,20)
oper = random.choice('+-*')

result = eval(str(number1)+oper+str(number2))
answer = (int(input('What is:'+str(number1)+oper+str(number2)+'=')) == result)

if answer == True:
    print('Correct!')
else:
    print('Incorrect!')
</code></pre>
<p>What is the difference between the <code>answer</code> and <code>result</code> variables and what is the point of <code>eval</code>, what's it's purpose ?</p>
</div>
<div class="post-text" itemprop="text">
<p>In your code, the <code>answer</code> variable is what the user enters in response to your request for <code>input</code>. It's their answer to your question. The <code>result</code> variable is the correct answer to your randomly generated question. What you want to do is check whether their <code>answer</code> is the same as the expected <code>result</code> (which is why I called that variable <code>correct_answer</code> in my answer to your previous question).</p>
<p>The reason for using <code>eval</code> is that it <strong>eval</strong>uates an expression which is passed as a string. So for example if you pass "2*3" to <code>eval</code> it will return 6.</p>
<p>The documentation for <code>eval</code> is <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow">here</a> which is always a good place to start.</p>
<p>Breaking down the line which is giving you trouble:</p>
<pre><code>result = eval(str(number1)+oper+str(number2))
</code></pre>
<p>Breaks down for an example where <code>number1</code> is 4 and <code>number2</code> is 7:</p>
<pre><code>result = eval("4*7")
</code></pre>
<p>The "4*7" is then converted by <code>eval</code> from the string "4*7" to the source code <code>4*7</code> which is then calculated out to be <code>28</code>.</p>
<p>I think the difficulty you're having is seeing that there is a difference between "4*7" which is a string, and <code>4*7</code> which is a code statement. What <code>eval</code> does is convert strings to statements which can then be executed as code.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow">Documentation</a> says:</p>
<blockquote>
<p>eval(expression, globals=None, locals=None)</p>
<p>The <code>expression</code> argument is parsed and evaluated as a Python
  expression</p>
</blockquote>
<p>In short, the string argument passed to <code>eval()</code> is executed as normal python instructions. For example:</p>
<pre><code>hello_printer = 'print("hello")'
eval(hello_printer)
</code></pre>
<p>prints out <code>hello</code> onto screen, as would be done when executing <code>print("hello")</code> instruction. Python interpreter simply tries and executes the string argument passed to <code>eval</code> function.</p>
<p>The argument to your eval function is <code>str(number1)+oper+str(number2)</code>, which is broken down to:</p>
<ul>
<li>convert <code>number1</code> to string form</li>
<li>concat the operator to <code>number1</code> which is string form</li>
<li>convert the <code>number2</code> to string form and concat it to the previous</li>
</ul>
<p>e.g. if <code>number1</code> is <code>10</code>, <code>oper</code> is <code>+</code>, and <code>number2</code> is <code>20</code>, then this makes the string <code>'10+20'</code>, which is passed to <code>eval</code> function and evaluated as <code>10+20</code>. Then the evaluated value is stored in the variable <code>result</code>. Finally <code>result</code> is compared to the answer provided by the user. If they match, <code>True</code> is stored in answer, otherwise <code>False</code>, which is then checked to give the output of 'correct' or 'incorrect'</p>
</div>
<span class="comment-copy">Please change the title to something meaningful and fix your indentation. Please be specific about what part of the documentation of the used functions you did not understand.</span>
<span class="comment-copy">Changed and I have been specific read the last line.</span>
<span class="comment-copy">@PythonNooby, is this Python 2 or Python 3? For the former, <code>input()</code> already includes an implicit <code>eval()</code>.</span>
<span class="comment-copy">@CharlesDuffy The <code>eval</code> is working on the generated question, not the response.</span>
<span class="comment-copy">@JamieBull, that's true, but the above is -- I believe -- still worth mentioning.</span>
<span class="comment-copy">Thank you for your answer but how will line 6 give us the actual answer , how does line 6 work ?</span>
<span class="comment-copy">Thank you , The answer has to be a whole number because I am only using multiply , add  and subtract.Also I have changed the random numbers so they don't go in negative.(It is supposed to be for a primary school).I said line 6 sorry you explained line 7....</span>
<span class="comment-copy">Ah, that makes sense. Also I've amended my answer.</span>
<span class="comment-copy">OMG !!! You are a Genius ;) You explained it such a good way , I completely understand why we use eval and result now.Can I give points or reputations ? I am new :) I pressed the up arrow and the tick.</span>
<span class="comment-copy">So eval() is useless in a way ?</span>
<span class="comment-copy">Not at all. Using eval() you can execute dynamically created python code. Read the documentation to know more about eval()</span>
