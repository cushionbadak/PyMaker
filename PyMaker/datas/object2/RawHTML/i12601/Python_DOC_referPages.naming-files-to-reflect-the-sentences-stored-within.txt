<div class="post-text" itemprop="text">
<p>I have a large set of mp3 audio files, with each file containing a single short sentence or in some cases two short sentences. For example, the file might contain the likes of one of the following three:</p>
<ol>
<li>¡No tienes miedo!</li>
<li>¿No tienes miedo?</li>
<li>Var är du? Här är jag.</li>
</ol>
<p>I need to write a function in python3 which takes a string like:</p>
<pre><code>"Var är du? Här är jag."
</code></pre>
<p>and converts it to a unique and valid file name for Mac Os X and the Apache web server (don't know what os) onto which the audio files will eventually reside. I will then be playing the audio files using HTML5 and javascript.</p>
<p>So the python function will need to return different values for "¡No tienes misdo!" and "¿No tienes miedo?", for example. It would of course be convenient if the function returns something readable so that one would have an idea as to what sentence is associated with the file, but this is not mandatory as I will be auto generating the html scripts from the same python script which names the mp3 files.</p>
<p>I will eventually be dealing with a whole bunch of different languages.</p>
<p>How would you recommend I write this function?</p>
<p>This is my feeble attempt:</p>
<pre><code>def file_name(s): 
    return "".join("{:02x}".format(c) for c in s.encode())

file_name('Eso no es bueno, ¿no?')
</code></pre>
<p>Which returns:</p>
<pre><code>'45736f206e6f206573206275656e6f2c20c2bf6e6f3f'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to convert a string to another string that uses a smaller character set. That means that each character contains less information, which means there have to be more characters; that is, the file name has to be longer than the original string. You can't just convert each special character to a string of alphanumeric characters, though; that would be indistinguishable from that string in the original, unless you also convert allowed characters to longer strings. This suggests that the file names probably can't be human-readable. If you get rid of that constraint, hashing is probably the best way to go. You're using Python 3, so you can do that with <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow">hashlib</a>:</p>
<pre><code>def file_name(s):
    hash=hashlib.md5() #you can use any algorithm here
    hash.update(s)
    return hash.digest()
</code></pre>
</div>
<span class="comment-copy">Those are already valid filenames for OSX.</span>
<span class="comment-copy">@Turn No idea what os the web server is running</span>
<span class="comment-copy">Generate SHA1 hash out of file name (or, better yet, <b>content</b>). If it is good enough for <code>git</code>, it is good enough for your website.</span>
