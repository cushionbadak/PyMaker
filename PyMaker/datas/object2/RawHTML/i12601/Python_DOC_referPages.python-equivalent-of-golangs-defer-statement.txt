<div class="post-text" itemprop="text">
<p>How would one implement something that works like the <code>defer</code> statement from go in python? </p>
<p>Defer pushes a function call to a stack. When the function containing the defer statement returns, the defered function calls are popped and executed one by one, in the scope that the defer statement was inside in the first place. Defer statements look like function calls, but are not executed until they are popped.</p>
<p>Go example of how it works:</p>
<pre><code>func main() {
    fmt.Println("counting")

    var a *int
    for i := 0; i &lt; 10; i++ {
        a = &amp;i
        defer fmt.Println(*a, i)
    }

    x := 42
    a = &amp;x

    fmt.Println("done")
}
</code></pre>
<p>Outputs: </p>
<pre><code>counting
done
9 9
8 8
7 7
6 6
5 5
4 4
3 3
2 2
1 1
0 0
</code></pre>
<p>Go example of a usecase:</p>
<pre><code>var m sync.Mutex
func someFunction() {
    m.Lock()
    defer m.Unlock()
    // Whatever you want, with as many return statements as you want, wherever.
    // Simply forget that you ever locked a mutex, or that you have to remember to release it again.
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To emulate <code>defer fmt.Println(*a, i)</code> example, you could <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="noreferrer">use <code>contextlib.ExitStack</code></a>:</p>
<pre><code>#!/usr/bin/env python3
from contextlib import ExitStack
from functools import partial

print("counting")
with ExitStack() as stack:
    for i in range(10):
        a = i
        stack.callback(partial(print, a, i))

    x = 42
    a = x
    print("done")
</code></pre>
<h3><a href="http://ideone.com/ZxufQ8" rel="noreferrer">Output</a></h3>
<pre><code>counting
done
9 9
8 8
7 7
6 6
5 5
4 4
3 3
2 2
1 1
0 0
</code></pre>
<p>It is easy to emulate the mutex case:</p>
<pre><code>def some_function(lock=Lock()):
    with lock:
        # whatever
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've made one <a href="https://habrahabr.ru/post/191786/" rel="noreferrer">there</a> (compatible with 2.x):</p>
<pre><code>@defers_collector
def func():
    f = open('file.txt', 'w')
    defer(lambda: f.close())

    defer(lambda : print("Defer called!"))

    def my_defer():
    recover()

    defer(lambda: my_defer())

    print("Ok )")
    panic("WTF?")

    print("Never printed (((")


func()
print("Recovered!")
</code></pre>
<p>Source of <code>defers_collector</code> is:</p>
<pre><code># Go-style error handling

import inspect
import sys

def panic(x):
    raise Exception(x)

def defer(x):
    for f in inspect.stack():
    if '__defers__' in f[0].f_locals:
        f[0].f_locals['__defers__'].append(x)
        break

def recover():
    val = None
    for f in inspect.stack():
    loc = f[0].f_locals
    if f[3] == '__exit__' and '__suppress__' in loc:
        val = loc['exc_value']
        loc['__suppress__'].append(True)
        break
    return val

class DefersContainer(object):
    def __init__(self):
    # List for sustain refer in shallow clone
    self.defers = []

    def append(self, defer):
    self.defers.append(defer)

    def __enter__(self):
    pass

    def __exit__(self, exc_type, exc_value, traceback):
    __suppress__ = []
    for d in reversed(self.defers):
        try:
            d()
        except:
            __suppress__ = []
            exc_type, exc_value, traceback = sys.exc_info()
    return __suppress__


def defers_collector(func):
    def __wrap__(*args, **kwargs):
    __defers__ = DefersContainer()
    with __defers__:
        func(*args, **kwargs)
    return __wrap__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement">with statement</a> serves a similar purpose to Go's defer.</p>
<p>The similar code in Python is:</p>
<pre><code>mutex = Lock()

def someFunction():
    with mutex:
        # Whatever you want, with as many return statements
        # as you want, wherever. Simply forget that you ever
        # locked a mutex, or that you have to remember to 
        # release it again.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <em>defer</em> implementation partly inspired by <a href="https://stackoverflow.com/users/311655/deniskolodin">@DenisKolodin</a> <a href="https://stackoverflow.com/a/43028386/9456786">answer</a> is available as part of <a href="https://pypi.org/project/pygolang" rel="nofollow noreferrer">pygolang</a>, <a href="https://lab.nexedi.com/kirr/pygolang/commit/5146eb0b" rel="nofollow noreferrer">2</a>:</p>
<pre><code>   wc = wcfs.join(zurl)    │     wc = wcfs.join(zurl)
   defer(wc.close)         │     try:
                           │        ...
   ...                     │        ...
   ...                     │        ...
   ...                     │     finally:
                           │        wc.close()
</code></pre>
</div>
<span class="comment-copy">One thing to remember here is that you need to have a context manager defined to use <code>with</code>. Lots of things (<code>file</code>s, <code>threading.Lock</code>, for instance) come with this built-in, but if you want to do something specific like in the first example, you have to custom build it.</span>
<span class="comment-copy">@ap <a href="https://docs.python.org/2/library/contextlib.html" rel="nofollow noreferrer">docs.python.org/2/library/contextlib.html</a> is helpful :)</span>
<span class="comment-copy">This is the correct answer.</span>
