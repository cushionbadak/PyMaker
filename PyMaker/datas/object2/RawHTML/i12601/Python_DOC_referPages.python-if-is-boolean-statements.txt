<div class="post-text" itemprop="text">
<p>I am having a problem in a simple expression which is the following.</p>
<pre><code>number=int(input("enter the number"))
for n in range(40-101):
    if n % number is 0:
        print(n)
</code></pre>
<p>When I enter 10 as an input it prints nothing as an output. With my elementary school math, I can easily assume that this should print all the numbers which can be divided by 10.</p>
<p>So the problem should be in the <code>if</code> statement. It doesn't enter to <code>print(n)</code>.</p>
<p>I am using PyCharm Community Edition and Python 3.4</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>You should use <code>==</code> instead of <code>is</code> in this case because:</p>
<blockquote>
<p><code>is</code> checks if two object's <code>id</code> are the same, and <code>==</code> checks if two object's values are the same.</p>
</blockquote></li>
<li><p>Well, <code>range(40-101)</code> gives <code>range(-61)</code> and that's treated as <code>range(0, -61)</code>. Let's see:</p>
<pre><code>&gt;&gt;&gt; range(40-101)
range(0, -61)
&gt;&gt;&gt; list(range(40-101))
[]
</code></pre>
<p>I think you mean <code>range(40, 101)</code> right?</p></li>
</ol>
<p>So your code should look like:</p>
<pre><code>number = int(input("Enter the number: "))
for n in range(40, 101):
    if n % number == 0:
        print(n)
</code></pre>
<p>Demo:</p>
<pre><code>Enter the number: 10
40
50
60
70
80
90
100
</code></pre>
<hr/>
<p>Just got an idea to improve your code, you don't need <code>%</code> in this case since <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow"><code>range()</code></a> has a <code>step</code> argument. From the document:</p>
<blockquote>
<p><code>class range(stop)</code>
<code>class range(start, stop[, step])</code></p>
<p>The arguments to the range constructor must be integers (either built-in int or any object that implements the <code>__index__</code> special method). </p>
<p>If the <code>step</code> argument is omitted, it defaults to 1. If the start argument is omitted, it defaults to 0. If step is zero, <code>ValueError</code> is raised.</p>
<p>For a positive step, the contents of a range r are determined by the formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> and <code>r[i] &lt; stop</code>.</p>
</blockquote>
<p>So as the document says, you can also set the <code>step</code> instead of use <code>%</code> to check <em>all the numbers which can be divided by <code>number</code></em> manually use <code>if</code>. For example:</p>
<pre><code>number = int(input("Enter the number: "))
for n in range(40, 101, number):
    print(n)
</code></pre>
</div>
<span class="comment-copy"><i>"since they use "is" in everywhere..."</i> Who is "they"? I suggest you stop listening to them because you should barely ever use <code>is</code>.</span>
<span class="comment-copy">The only common occurrence of <code>is</code> I can think of off the top of my head is when you're checking <code>if something is None</code>, and that's only because it's semantically more correct. <code>something == None</code> still works - it's just not as nice.</span>
<span class="comment-copy">This is true but after the suggestion of Arc676, I tried to execute my same code in range(40,101,1) with number as 10.It works.So I thik is works for integers but fails for strings etc just like java.So what I mean is two different strings with same content are false according to is.But two different variables with same integer values are equal according to is</span>
<span class="comment-copy">The third argument of <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range()</code></a> is <code>step</code>. So however, there's no difference between <code>range(40,101,1)</code> and <code>range(40,101)</code>. But huh, I have a good idea to improve your code.</span>
<span class="comment-copy">@Juwan: And however, I don't see any string in your code, you already converted the input string to integer use <code>int()</code> function right?</span>
<span class="comment-copy">Yes, I think it works like that.Because if you try to enter someting like name as an input code fails since it cannot parse it to an integer value.</span>
<span class="comment-copy">@Juwan: Oh, you mean that. Then you can use <code>try...except</code> to catch the <code>ValueError</code> which <code>int()</code> raised. I think you'll learn that soon ;)</span>
