<div class="post-text" itemprop="text">
<p>I am looking to set up Python's <code>virtualenv</code>. I am doing this since I need to run some python files written with:</p>
<p>a. Python 2.7 and also need to run some files that were written for python 3.4</p>
<p>b. two different versions of:</p>
<ul>
<li>NumPy - NumPy 1.9.3 and NumPy 1.10.0</li>
<li>Matplotlib - Matplotlib 1.5.0
and Matplotlib 1.41</li>
</ul>
<p>I need to run all these files on the same Windows system (Windows 7 64-bit).</p>
<p><strong><em>Currently:</em></strong></p>
<p>I currently have Python 2.7 installed with NumPy 1.9.3 and Matplotlib 1.5.0. I have set up and used <code>virtualenv</code> using the following procedure:</p>
<pre><code>cd C:\Users\WrAU\Downloads
virtualenv venv_test
cd venv_test
venv_test\Scripts\activate
pip install Django==1.0
deactivate
</code></pre>
<p>I have added C:\Python27 and C:\Python27\Scripts to my path. I have not yet installed Python 3.4.</p>
<p><strong><em>My problem:</em></strong></p>
<p>I need:</p>
<ul>
<li><p>2 different versions of Python</p></li>
<li><p>2 versions of NumPy and Matplotlib</p></li>
</ul>
<p><strong><em>Questions:</em></strong></p>
<p>Do I need to create a separate <code>virtualenv</code> for Python 3.4 using the same procedure as I did for Python 2.7 above? Or is there a different method that is required for that?</p>
<p>How do I install separate versions of Python packages to a <code>virtualenv</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you do create 1 virtualenv per interpreter.
In it you can install matplotlib and numpy.
You can create 2 venv with python 2.7 for testing differents versions of matplotlib and numpy, and make the same scheme with python 3.X </p>
</div>
<div class="post-text" itemprop="text">
<p>Under windows I would definitely do it through anaconda/miniconda.
Regardless of which version (py3/py2) you install, it can create venvs for py3/py2.
For example:</p>
<pre><code>conda create -n app_py2 numpy==1.9.3 matplotlib==1.5.0 python=2
conda create -n app_py2 numpy==1.10.0 matplotlib==1.4.1 python=3
</code></pre>
</div>
<span class="comment-copy">You might consider <a href="https://tox.readthedocs.org/en/latest/" rel="nofollow noreferrer">tox</a></span>
<span class="comment-copy">Thanks. I can see that it is cross-Python compatible. But does it offer the potential for different package versions?</span>
<span class="comment-copy">Tox creates a virtualenv for each version of python that you specify, and then will install dependencies in that version and run your tests. I'm <i>assuming</i> that you're running tests, though you still could use tox to create the virtualenvs &amp; install dependencies. On Windows though, Numpy and Matplotlib you might have to install in your main Windows install and then use the <a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments" rel="nofollow noreferrer"><code>--system-site-packages</code></a> when creating your virtualenv.</span>
<span class="comment-copy">Wayne: Would you be able to post an Answer here with how this could be done with tox? Maybe a simplified approach for one of the packages  - NumPy?</span>
<span class="comment-copy">Wayne: To answer your earlier question - No, I don't plan to run any tests. I simply need to know that my scripts are compatible with different versions of Python. Or did you meant something specific by <i>I'm assuming that you're running tests</i>?</span>
<span class="comment-copy">This is the method that I am leaning towards going with as well. It seems like the simplest to understand. However, I think it is going to be very tedious. Suppose I had Python 2.7 with A) matplotlib 1.4.1 and numpy 1.10.1, B) matplotlib 1.4.1 and numpy 1.9.3, C) matplotlib 1.5.0 and numpy 1.10.1, D) matplotlib 1.5.0 and numpy 1.9.3. Based on this, I would need 4 different virtual environments to account for all package version combinations. Or have I misunderstood something?</span>
<span class="comment-copy">Yes 4 different virtualenv</span>
<span class="comment-copy">That really does seem like a lot of work.</span>
<span class="comment-copy">What is <code>app_py2</code>? Is that a virtual environment? And does this mean that a new <code>virtualenv</code> must be created for each combination of packages?</span>
<span class="comment-copy">Yes it's just the name of the virtualenv; you may create as many environments as combinations on the same system</span>
