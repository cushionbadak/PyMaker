<div class="post-text" itemprop="text">
<p>Debugging the following problem, post problem and code reference I am debugging. My question is, I think this if condition check if not necessary, and could be removed safely? If I am wrong, please feel free to correct me. Thanks.</p>
<pre><code>if len(first) &gt; 1 and first[0] == '*' and  len(second) == 0:
    return False
</code></pre>
<p>Given two strings where first string may contain wild card characters and second string is a normal string. Write a function that returns true if the two strings match. The following are allowed wild card characters in first string.</p>
<pre><code>* --&gt; Matches with 0 or more instances of any character or set of characters.
? --&gt; Matches with any one character.
</code></pre>
<p>For example, <code>g*ks</code> matches with <code>geeks</code> match. And string <code>ge?ks*</code> matches with <code>geeksforgeeks</code> (note <code>*</code> at the end of first string). But <code>g*k</code> doesnâ€™t match with <code>gee</code> as character <code>k</code> is not present in second string.</p>
<pre><code># Python program to match wild card characters

# The main function that checks if two given strings match.
# The first string may contain wildcard characters
def match(first, second):

    # If we reach at the end of both strings, we are done
    if len(first) == 0 and len(second) == 0:
        return True

    # Make sure that the characters after '*' are present
    # in second string. This function assumes that the first
    # string will not contain two consecutive '*'
    if len(first) &gt; 1 and first[0] == '*' and  len(second) == 0:
        return False

    # If the first string contains '?', or current characters
    # of both strings match
    if (len(first) &gt; 1 and first[0] == '?') or (len(first) != 0
        and len(second) !=0 and first[0] == second[0]):
        return match(first[1:],second[1:]);

    # If there is *, then there are two possibilities
    # a) We consider current character of second string
    # b) We ignore current character of second string.
    if len(first) !=0 and first[0] == '*':
        return match(first[1:],second) or match(first,second[1:])

    return False
</code></pre>
<p>thanks in advance,
Lin</p>
</div>
<div class="post-text" itemprop="text">
<p>That <code>if</code> statement is critical to the proper operation of the function. Removing it will have disastrous consequences. </p>
<p>For example, assume that <code>first="*a"</code> and <code>second=""</code>. In other words, the function was called as <code>match("*a","")</code>. Then the <code>if</code> statement will cause the function to return <code>False</code> (which is correct since there is no <code>a</code> in <code>second</code>). Without the <code>if</code> statement, the code will proceed to the line</p>
<pre><code>return match(first[1:],second) or match(first,second[1:])
</code></pre>
<p>The call <code>match(first[1:],second)</code> will evaluate to <code>match("a","")</code> which will return <code>False</code>. But when the code calls <code>match(first,second[1:])</code>, the call is equivalent to <code>match("*a","")</code>, and the result is infinite recursion.</p>
</div>
<span class="comment-copy">BTW, I do not know what is wrong with my format, I mark my code as source code using brackets, but it seems the 3 lines "Python program to match wild card characters The main function that checks if two given strings match. The first string may contain wildcard characters" are not displayed correctly in the right format. If anyone could help to take a look, it will be great. Thanks.</span>
<span class="comment-copy">FYI, this looks like you're trying to hand-implement globbing. Perhaps take a look at the <a href="https://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer"><code>fnmatch</code> (short for "file name matching") module</a>, which already does this? Or if you are actually scanning the file system, use the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code> module</a>?</span>
<span class="comment-copy">Also, to follow up, <a href="https://hg.python.org/cpython/file/3.5/Lib/fnmatch.py" rel="nofollow noreferrer"><code>fnmatch</code> is implemented in Python, no special accelerators</a>, so you could just copy and modify it if you needed to handle only <code>*</code> and <code>?</code>, but not the character class wildcards.</span>
<span class="comment-copy">@ShadowRanger, thanks for the recommendations, very knowledgeable. :)</span>
<span class="comment-copy">But would such an infinite recursion also cause my house to blow up or my street to flood? :)</span>
<span class="comment-copy">@N.Wouda Well, if the infinite recursion makes your computer draw more power, and that overloads the local power transformer, resulting in a fire, and the fire truck accidentally bumps the fire hydrant, then yes, your house could catch on fire and flood at the same time.</span>
<span class="comment-copy">Thanks for the advice user3386109, mark your reply as answered. :)</span>
