<div class="post-text" itemprop="text">
<p>I have a problem I am trying to find a solution. I am not sure if I can do it with argparse.</p>
<p>I want to be able to specify an option</p>
<pre><code>myprog -a 1
myprog -a 2
</code></pre>
<p>Now when I have <strong>a = 1</strong>, I want to be able to specify <strong>b</strong> and <strong>c</strong>. But when <strong>a = 2</strong>, I can only specify <em>d</em>.</p>
<pre><code>myprog -a 1 -b 3 -c 0
myprog -a 2 -d 3
</code></pre>
<p>Also <strong>a</strong> must always be specified</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do this with switched values as a single <code>parse_args</code> call, but you can do one of:</p>
<ol>
<li>Use <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow">sub-commands/sub-parsers</a></li>
<li>Do partial parsing before fully configuring the parser and running on the complete command line, at first only checking for <code>a</code>, and then selecting the additional parser args to parse based on the result of the first call. The trick is to use <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args" rel="nofollow"><code>parse_known_args</code></a> for the first call, so it handles <code>a</code> (which it recognizes) and ignores everything else.</li>
</ol>
<p>For example, for approach #2, you could do:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('-a', required=True, type=int, choices=(1, 2)
args = parser.parse_known_args()

if args.a == 1:
    parser.add_argument('-b', ...)
    parser.add_argument('-c', ...)    
    args = parser.parse_args()
else:
    parser.add_argument('-d', ...)
    args = parser.parse_args()
</code></pre>
<p>Downside to this approach is that the usage info spat out for incorrect usage will be incomplete; you'd have to include the text specifying the "real" usage in the base parser manually, which is no fun. Subparsers can't be toggled based on value switches, but they have a unified, coherent usage display.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest solution is to make <code>'-a'</code> a <code>required=True</code> argument, and leave the others with default not-required.  Then after parsing perform the tests on a <code>args.a</code> and the other values (I assume you can write that kind of Python logic).</p>
<p>You can raise your own errors, or you can use a <code>parser.error("I don't like your input")</code> call.</p>
<p>You many need to write a custom <code>usage</code> line.  What would be a meaningful usage, given these requirements?</p>
<p>There is a <code>mutually exclusive argument group</code> method, but it does not use specific values, just the presence or not of arguments.</p>
<p>You could also incorporate the tests in custom Action classes.  But usually that's more complicated than performing the tests after parsing (since argparse handles arguments that occur in any order).</p>
<p>Another possibility to convert the <code>-a</code> argument into a subparser.  That allows you to define one set of arguments for one 'parser' value, and another set for another value.  I think the argparse documentation is clear enough on that.</p>
</div>
