<div class="post-text" itemprop="text">
<p>I am going through functions in <a href="https://en.wikipedia.org/wiki/Learning_Python" rel="nofollow">Learning Python</a>, this one is giving me a little trouble understanding, was wondering if anyone could help me understand it better, more specifically the <code>if test(arg, res)</code>
When I run the first function, it doesn't matter what I put as the first argument, then the second argument has to be a list, and it just spits the list back as written. I'm confused on when you combine the functions and print them together how it gives the max and min.</p>
<pre><code>def minmax(test, *args):
    res = args[0]
    for arg in args[1:]:
        if test(arg, res):
            res = arg
    return res
def lessthan(x, y): return x &lt; y
def grtrthan(x, y): return x &gt; y
print(minmax(lessthan, 4, 2, 1, 5, 6, 3))
print(minmax(grtrthan, 4, 2, 1, 5, 6, 3))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be misunderstanding how the <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow">starred function argument</a> works. When you call your function as <code>minmax(something, [1, 2, ...])</code>, <code>args</code> becomes a tuple of one element equal to <code>[1, 2, ...]</code>. Therefore the body of the loop never gets executed and the value of <code>test</code> does not matter. The function is supposed to be invoked as <code>minmax(something, 1, 2, ...)</code>. This way <code>args</code> gets the value <code>(1, 2, ...)</code> and the loop goes through its elements.</p>
<p><em>Clarification:</em> The answer is based on what you wrote. Your code snippet is correct and works exactly as intended.</p>
</div>
<div class="post-text" itemprop="text">
<p>I haven't read that book so I don't know the context, but it looks that function (<code>minmax</code>) is not well named.  It does not return two values, it only returns one -- and which one depends on the testing function you give it.  If you pass in the <code>lessthan</code> function:</p>
<pre><code>print(minmax(lessthan, 4, 2, 1, 5, 6, 3))
</code></pre>
<p>you'll get <code>1</code>, and if you pass in the <code>grtrthan</code> function:</p>
<pre><code>print(minmax(grtrthan, 4, 2, 1, 5, 6, 3))
</code></pre>
<p>you'll get <code>6</code>.</p>
</div>
<span class="comment-copy">"then the second argument has to be a list" Are you sure you're reading it properly?</span>
<span class="comment-copy">Where are the arguments for the lessthan and grtrthan functions coming from? They need two right?</span>
<span class="comment-copy">In your code <code>test</code> becomes equal to <code>lessthan</code> or <code>grtrthan</code>. It then gets called with two arguments.</span>
<span class="comment-copy">Could you explain the for loop? How come when I change the res = arg to res &gt; arg or res &lt; arg both prints give me 4 and 4?</span>
<span class="comment-copy">When you make these changes the lines do not do anything (<code>res=arg</code> <b>assigns</b> a value to <code>res</code>; <code>res &gt; arg</code> evaluates to <code>True</code> or <code>False</code> and the value gets discarded), so <code>res</code> keeps its initially assigned value of <code>args[0]</code> (which happens to be <code>4</code> in your case)</span>
<span class="comment-copy">Something is just flying over my head. Thanks for the help, it makes more sense now. But when I run the lessthan and grtrthan functions on there own they give me true or false, and when I run the minmax function it gives me whatever I put for *args. I still cant figure out how the combination gives a min and max. Im going to feel like an idiot when I figure it out :(</span>
