<div class="post-text" itemprop="text">
<p>Currently <code>--resize</code> flag that I created is boolean, and means that all my objects will be resized:</p>
<pre><code>parser.add_argument("--resize", action="store_true", help="Do dictionary resize")

# ...

# if resize flag is true I'm re-sizing all objects
if args.resize:
    for object in my_obects:
        object.do_resize()
</code></pre>
<p>Is there a way implement argparse argument that if passed as boolean flag (<code>--resize</code>) will return true, but if passed with value (<code>--resize 10</code>), will contain value.</p>
<p>Example:</p>
<ol>
<li><code>python ./my_script.py --resize # Will contain True that means, resize all the objects</code></li>
<li><code>python ./my_script.py --resize &lt;index&gt; # Will contain index, that means resize only specific object</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In order to optionally accept a value, you need to set <a href="https://docs.python.org/2/library/argparse.html#nargs" rel="nofollow"><code>nargs</code></a> to <code>'?'</code>. This will make the argument consume one value if it is specified. If the argument is specified but without value, then the argument will be assigned the argument’s <a href="https://docs.python.org/3/library/argparse.html#const" rel="nofollow"><code>const</code></a> value, so that’s what you need to specify too:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--resize', nargs='?', const=True)
</code></pre>
<p>There are now three cases for this argument:</p>
<ol>
<li><p>Not specified: The argument will get its <a href="https://docs.python.org/3/library/argparse.html#default" rel="nofollow">default value</a> (<code>None</code> by default):</p>
<pre><code>&gt;&gt;&gt; parser.parse_args(''.split())
Namespace(resize=None)
</code></pre></li>
<li><p>Specified without a value: The argument will get its const value:</p>
<pre><code>&gt;&gt;&gt; parser.parse_args('--resize'.split())
Namespace(resize=True)
</code></pre></li>
<li><p>Specified with a value: The argument will get the specified value:</p>
<pre><code>&gt;&gt;&gt; parser.parse_args('--resize 123'.split())
Namespace(resize='123')
</code></pre></li>
</ol>
<p>Since you are looking for an index, you can also specify <code>type=int</code> so that the argument value will be automatically parsed as an integer. This will not affect the default or const case, so you still get <code>None</code> or <code>True</code> in those cases:</p>
<pre><code>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--resize', nargs='?', type=int, const=True)
&gt;&gt;&gt; parser.parse_args('--resize 123'.split())
Namespace(resize=123)
</code></pre>
<hr/>
<p>Your usage would then look something like this:</p>
<pre><code>if args.resize is True:
    for object in my_objects:
        object.do_resize()
elif args.resize:
    my_objects[args.resize].do_resize()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add <code>default=False</code>, <code>const=True</code> and <code>nargs='?'</code> to the argument definition and remove <code>action</code>. This way if you don't pass <code>--resize</code> it will store False, if you pass <code>--resize</code> with no argument will store <code>True</code> and otherwise the passed argument. Still you will have to refactor the code a bit to know if you have index to delete or delete all objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>nargs</code> to accept different number of command-line arguments</p>
<p>Use <code>default</code> and <code>const</code> to set the default value of resize</p>
<p>see here for details: <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow">https://docs.python.org/3/library/argparse.html#nargs</a></p>
<pre><code>parser.add_argument('-resize', dest='resize', type=int, nargs='?', default=False, const=True)

&gt;&gt;tmp.py -resize 1  
args.resize: 1

&gt;&gt;tmp.py -resize  
args.resize: True

&gt;&gt;tmp.py   
args.resize: False
</code></pre>
</div>
<span class="comment-copy">I'd recommend picking a value other than <code>True</code> to mean resizing all objects. <code>if args.resize</code> will trigger on any nonzero integer value of <code>resize</code>, and if you try changing that to <code>if args.resize == True</code>, it'll still trigger when <code>args.resize</code> is <code>1</code>, since <code>True == 1</code>. The string <code>'all'</code> might be a good choice.</span>
<span class="comment-copy">@user2357112 You should <i>always</i> check against boolean values using identity. E.g. <code>if args.resize is True: resizeAll() / elif args.resize: resizeIndex(args.resize)</code></span>
<span class="comment-copy">@poke: On the contrary, you should <i>almost never</i> check boolean values by identity. Checking booleans using identity is quite strongly counter to the usual practice, and an <code>is True</code> check would run a risk of someone removing it without realizing that it's actually necessary in this particular case.</span>
<span class="comment-copy">@user2357112: Generally, what you're saying is perfectly correct. But here we need to distinguish between <code>True</code> and various truthy integers, so <code>if args.resize is True</code> is appropriate in this circumstance.</span>
<span class="comment-copy">@PM2Ring: <code>if args.resize is True</code> is certainly an improvement on the given code, but it's the wrong improvement. Switching <code>True</code> for a different value produces code that future maintainers will understand quicker and be much less likely to screw up. Saying that you should <i>always</i> check booleans by identity is just plain wrong.</span>
