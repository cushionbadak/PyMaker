<div class="post-text" itemprop="text">
<p>Some downloads are failing due to Python not being built with the <code>--enable-shared</code> tag, is there some way to get rid of the version I have and rebuild python? Or even better, just change it without reinstalling?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can rebuild python, and pass <code>--enable-shared</code> to <code>./configure</code>
Just follow:</p>
<p>For python 3:
<a href="https://docs.python.org/3/using/unix.html#building-python" rel="nofollow">https://docs.python.org/3/using/unix.html#building-python</a></p>
<p>For Python 2:
<a href="https://docs.python.org/2/using/unix.html#building-python" rel="nofollow">https://docs.python.org/2/using/unix.html#building-python</a></p>
<p>Be careful with the things in your distribution that require python, make sure you set the <code>Python Path</code> properly. And check if any of them requires any special configuration flags.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can install different Python versions (side-by-side even) using pythonz: <a href="http://saghul.github.io/pythonz/" rel="nofollow">http://saghul.github.io/pythonz/</a></p>
<p>Basically, after installing it, you run a command to download and install Python with the version you want:</p>
<pre><code>pythonz install 3.5.1
</code></pre>
<p>To pass custom compiling options, use <code>--configure "... options here"</code> <a href="https://github.com/saghul/pythonz#install-some-pythons" rel="nofollow">as per documentation here</a>.</p>
<p>It even supports PyPy and Jython.</p>
<p>I've been using it with success for the past year or so, it has made my life of testing projects in different Python versions much easier -- highly recommended.</p>
</div>
<div class="post-text" itemprop="text">
<p>Get sources with:</p>
<pre><code>apt-get source python2.7
</code></pre>
<p>in the downloaded directory, change in <code>python2.7.../debian/rules</code>:</p>
<pre><code>with_interp := static
#with_interp := shared
</code></pre>
<p>to</p>
<pre><code>#with_interp := static
with_interp := shared
</code></pre>
<p>Then at the same level as the <code>debian</code> directory, run <code>dpkg-buildpackage</code>. You'll get ready <code>.deb</code> packages one directory higher. Just install them with <code>dpkg -i python2.7.....deb</code></p>
</div>
<span class="comment-copy">I don't know about Ubuntu, but some Linux flavors (CentOS, RHEL) <i>rely</i> on the system's version of Python. I think it might not be a good idea to get rid of it.</span>
<span class="comment-copy">Have you tried <code>sudo apt-get install --reinstall python2.7</code>?</span>
<span class="comment-copy">sweet, that's what I ended up doing. Now where do I change which python is used? I would think in .bashrc but that path points to /usr/local/bin rather than usr/local/lib where my different versions of python are</span>
<span class="comment-copy">@ChandlerSquires You can add the new location you wish to the <code>$PATH</code>  with <code>PATH=$PATH:/data/myscripts</code></span>
<span class="comment-copy">I'm not sure if that's what I want - I need packages that rely on python to be built using the new version, not just to run this version of python when I type python. I thought that the path variable just let said what modules to include in the interpreter.</span>
<span class="comment-copy">oh, in your <code>\usr\bin</code> there are symlinks to python. you just need to erase them and replace them by the new ones with <code>ln</code></span>
