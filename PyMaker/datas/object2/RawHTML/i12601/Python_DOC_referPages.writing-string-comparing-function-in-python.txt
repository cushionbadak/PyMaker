<div class="post-text" itemprop="text">
<p>Im trying to write a function that get 2 arguments (2 strings actually) and compares them (ignoring the difference in upper/lower cases). For example:</p>
<pre><code>cmr_func('House', 'HouSe')
true

cmr_func('Chair123', 'CHAIr123')
true

cmr_func('Mandy123', 'Mandy1234')
False.
</code></pre>
<p>Well, I tried something, but it seems very stupid and bad designed function, which anyway does not work. I would like to get idea. I believe i need to use some built-in <code>str</code> function, but im not sure how they can help me.  </p>
<p>I thought about using <code>in</code> function with some loop. But i dont know on what kind of object should i apply a loop.</p>
<pre><code>def str_comp(a,b):
    for i in a:
        i.lower()
    for i in b:
        i.lower()

    if a == b:
        print 'true'
    else:
        print 'false'
</code></pre>
<p>Any hint or idea are welcomed. Thanks :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just convert both strings to lower-case and compare those results:</p>
<pre><code>def str_comp (a, b):
    return a.lower() == b.lower()
</code></pre>
<p>The idea behind this is normalization. Basically, you want to take any input string, and normalize it in a way that all other strings that are considered equal result in the same normalized string. And then, you just need to compare the normalized strings for equality.</p>
<p>Other operations you might consider are stripping whitespace (using <code>str.strip()</code>), or even more complex operations like converting umlauts to 2-letter combinations (e.g. <code>ä</code> to <code>ae</code>).</p>
<hr/>
<p>The problem with your solution is that you seem to assume that iterating over a string will allow you to modify the characters individually. But strings are immutable, so you cannot modify an existing string without creating a new one. As such, when you iterate over a string using <code>for i in a</code> you get many individual, independent strings for each character which are in no way linked to the original string <code>a</code>. So modifying <code>i</code> will not affect <code>a</code>.</p>
<p>Similarly, just calling <a href="https://docs.python.org/3/library/stdtypes.html#str.lower" rel="nofollow"><code>str.lower()</code></a> will not modify the string either (since it’s immutable), so instead, the function will return a new string with all letters converted to lower-case.</p>
<p>Finally, you shouldn’t return a string “True” or “False”. Python has boolean constants <code>True</code> and <code>False</code> which should be used for that. And if you use them, you don’t need to do the following either:</p>
<pre><code>if condition:
    return True
else:
    return False
</code></pre>
<p>Since <code>condition</code> already is interpreted as a boolean, you can just return the condition directly to get the same result:</p>
<pre><code>return condition
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you dont need to iterate the String to make all chars lowercase.
You can just:</p>
<pre><code>a.lower()
b.lower()
</code></pre>
<p>Or you can do it all together:</p>
<pre><code>def str_comp(a,b):
    return a.lower() == b.lower()
</code></pre>
<p>Dont forget you're also returning True or False a Boolean, not returning a String (in this case the string "True" or "False")</p>
<p>If you want to return a String is function would different :</p>
<pre><code>def str_comp(a,b):
    if a.lower() == b.lower()
        return "True"
    return "False"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The function <a href="https://docs.python.org/2/library/string.html#string.lower" rel="nofollow"><code>str.lower()</code></a> actually works in a slightly different way:</p>
<ol>
<li>This is no in-place modification. Calling <code>a.lower()</code> returns a copy of <code>a</code> with only lowercase letters and does not change <code>a</code> itself.</li>
<li><code>str.lower()</code> can be called on whole strings, not just characters, so the <code>for i in a</code> loop won't be necessary.</li>
</ol>
<p>Therefore you could simplify your function like following:</p>
<pre><code>def str_comp(a, b):
    if a.lower() == b.lower():
        print 'true'
    else:
        print 'false'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def are_strings_equal(string_1, string_2):
    return string_1.lower() == string_2.lower()
</code></pre>
</div>
<span class="comment-copy"><code>i.lower()</code> doesn't do what you expect it to do in your code. It <i>returns</i> the string with all characters converted to lowercase, so calling just <code>i.lower()</code> <i>doesn't do anything</i> since you aren't using the value returned.</span>
<span class="comment-copy">thanks. i didnt know boolean are defined like this.</span>
<span class="comment-copy">Thank you all.   I didnt think it would be that simple - i thought i have to define some kind of boolean variable first (though i dont know how or if its even exist in python).  What is the difeerence between '=' and '==' ?</span>
<span class="comment-copy">@AmirChazan <code>=</code> is an assignment of a value to a variable, while <code>==</code> is a comparison that returns a boolean value as a result.</span>
