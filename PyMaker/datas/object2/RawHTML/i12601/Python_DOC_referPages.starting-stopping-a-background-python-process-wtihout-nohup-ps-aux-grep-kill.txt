<div class="post-text" itemprop="text">
<p>I usually use:</p>
<pre><code>nohup python -u myscript.py &amp;&gt; ./mylog.log &amp;       # or should I use nohup 2&gt;&amp;1 ? I never remember
</code></pre>
<p>to start a background Python process that I'd like to continue running even if I log out, and:</p>
<pre><code>ps aux |grep python
# check for the relevant PID
kill &lt;relevantPID&gt;
</code></pre>
<p>It works but it's a annoying to do all these steps.</p>
<p>I've read some methods in which you need to save the PID in some file, but that's even more hassle.</p>
<hr/>
<p><strong>Is there a clean method to easily start / stop a Python script?</strong> like:</p>
<pre><code>startpy myscript.py             # will automatically continue running in
                                # background even if I log out

# two days later, even if I logged out / logged in again the meantime
stoppy myscript.py
</code></pre>
<p>Or could this long part <code>nohup python -u myscript.py &amp;&gt; ./mylog.log &amp;</code> be written in the shebang of the script, such that I could start the script easily with <code>./myscript.py</code> instead of writing the long nohup line?</p>
<hr/>
<p><em>Note : I'm looking for a one or two line solution, I don't want to have to write a dedicated systemd service for this operation</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I know, there are just two (or maybe three or maybe four?) solutions to the problem of running background scripts on remote systems.</p>
<p><strong>1) nohup</strong></p>
<pre><code>nohup python -u myscript.py &gt; ./mylog.log  2&gt;&amp;1 &amp;
</code></pre>
<p><strong>1 bis) disown</strong></p>
<p>Same as above, slightly different because it actually remove the program to the shell job lists, preventing the SIGHUP to be sent.</p>
<p><strong>2) screen (or tmux as suggested by neared)</strong></p>
<p><a href="https://stackoverflow.com/questions/70661/what-is-gnu-screen">Here</a> you will find a starting point for screen.</p>
<p>See this <a href="https://unix.stackexchange.com/questions/3886/difference-between-nohup-disown-and">post</a> for a great explanation of how background processes works. Another related <a href="https://stackoverflow.com/questions/4797050/how-to-run-process-as-background-and-never-die">post</a>.</p>
<p><strong>3) Bash</strong> </p>
<p>Another solution is to write two bash functions that do the job:</p>
<pre><code>mynohup () {
    [[ "$1" = "" ]] &amp;&amp; echo "usage: mynohup python_script" &amp;&amp; return 0
    nohup python -u "$1" &gt; "${1%.*}.log" 2&gt;&amp;1 &lt; /dev/null &amp;
}

mykill() {
    ps -ef | grep "$1" | grep -v grep | awk '{print $2}' | xargs kill
    echo "process "$1" killed"
}
</code></pre>
<p>Just put the above functions in your <code>~/.bashrc</code> or <code>~/.bash_profile</code> and use them as normal bash commands.</p>
<p>Now you can do exactly what you told:</p>
<pre><code>mynohup myscript.py             # will automatically continue running in
                                # background even if I log out

# two days later, even if I logged out / logged in again the meantime
mykill myscript.py
</code></pre>
<p><strong>4) Daemon</strong></p>
<p>This <a href="https://gist.github.com/josephernest/77fdb0012b72ebdf4c9d19d6256a1119" rel="nofollow noreferrer">daemon module</a> is very useful:</p>
<pre><code>python myscript.py start

python myscript.py stop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean log in and out remotely (e.g. via SSH)? If so, a simple solution is to install tmux (terminal multiplexer). It creates a server for terminals that run underneath it as clients. You open up tmux with <code>tmux</code>, type in your command, type in <code>CONTROL+B+D</code> to 'detach' from tmux, and then type exit at the main terminal to log out. When you log back in, tmux and the processes running in it will still be running.</p>
</div>
<span class="comment-copy">Well, you can use <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer"><code>os.system()</code></a> or <a href="https://docs.python.org/3/library/subprocess.html#subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> to run a program in the backgound. You can also use <a href="https://docs.python.org/3/library/os.html#os.kill" rel="nofollow noreferrer"><code>os.kill()</code></a> instead of GNU <code>kill</code>.  <a href="http://stackoverflow.com/questions/2703640/process-list-on-linux-via-python">And here's some ways to get a list of running processes.</a> But something I don't understand: What do you mean about <i>two days later, even after some reboot</i> ?</span>
<span class="comment-copy">@KevinGuan : Sorry, I edited my question (I meant: <i>two days later even after some log out / log in</i>). About the first part of your comment: no, I don't want to start or kill a process <i>from</i> Python (with <code>os</code> module). I want to start / stop a background-running-Python process easily, in one or two lines, from bash.</span>
<span class="comment-copy">Ah, that's fine. I have removed Python tag and added Bash tag since actually you're not <i>programming in Python</i>.</span>
<span class="comment-copy">By the way, are you looking for <code>pkill</code> or <code>killall</code> command? Which kills a process by it's name.</span>
<span class="comment-copy">@KevinGuan Ok for adding bash tag, but I have set python tag again, because sometimes there are specific behaviour when using Python (for example <code>nohup python myscript...</code> works bad whereas <code>nohup python -u myscript...</code> ensures everyting is written, unbuffered etc.)</span>
<span class="comment-copy">Your last solution (mynohup / mykill) is wonderful! Thanks!</span>
<span class="comment-copy">Is it possible to make such a bash function <code>myrun</code> that will be used with <code>myrun script.py</code> that 1) reads the first line of <code>script.py</code>, remove the leading <code>#MYRUN:</code> 2) execute the command written in this first line. Example: doing <code>myrun script.py</code> with <a href="http://pastebin.com/u7KVhMLx" rel="nofollow noreferrer">this file</a> will execute <code>nohup python -u script.py &amp;</code>.</span>
<span class="comment-copy">I started a question about this here <a href="http://stackoverflow.com/questions/34829145/a-bash-function-that-runs-script" title="a bash function that runs script">stackoverflow.com/questions/34829145/â€¦</a></span>
<span class="comment-copy">I now use <code>screen</code> and that's awesome and simple. <code>screen -s myscript</code>, then run the script <code>python myscript.py</code> then detach with CTRL+A, D, then I can log out etc. To reattach <code>screen -r myscript</code>, that's it!</span>
<span class="comment-copy">Welcome to the wonderful world of multiple sessionsss ;)</span>
<span class="comment-copy">Yes I mean log in and out remotely from SSH (the place where the script is run is a distant server). What happens to tmux when I log out from SSH? Will the Python script continue? Something else: how to avoid to write <code>nohup python -u myscript.py &amp;&gt; ./mylog.log &amp;</code> every time? Can I put this thing in shebang?</span>
<span class="comment-copy">When you logout with <code>logout</code> or with <code>exit</code>, the script will continue to run either way. The only things you will need to type are <code>tmux</code>, <code>command to run</code>, <code>CTRL + B + D</code> (to detach from tmux), and <code>logout</code>. When you log back in and want to stop the script, tmux will still be running. You can connect to it with <code>tmux attach</code>. As another plus, you can run as many terminal clients in one window as you want. See here for its many configuration options: <a href="http://manpages.ubuntu.com/manpages/precise/en/man1/tmux.1.html" rel="nofollow noreferrer">manpages.ubuntu.com/manpages/precise/en/man1/tmux.1.html</a></span>
