<div class="post-text" itemprop="text">
<p>I have a large set of strings, and am looking to extract a certain part of each of the strings. Each string contains a sub string like this:</p>
<pre><code>my_token:[
  "key_of_interest"
],
</code></pre>
<p>This is the only part in each string it says <code>my_token</code>. I was thinking about getting the end index position of ' my_token:[" ' and after that getting the beginning index position of ' "], ' and getting all the text between those two index positions.</p>
<p>Is there a better or more efficient way of doing this? I'll be doing this for string of length ~10,000 and sets of size 100,000.</p>
<p>Edit: The file is a .ion file. From my understanding it can be treated as a flat file - as it is text based and used for describing metadata.</p>
</div>
<div class="post-text" itemprop="text">
<p>How can this can possibly be done the "dumbest and simplest way"?</p>
<ul>
<li>find the starting position</li>
<li>look on for the ending position</li>
<li>grab everything indiscriminately between the two</li>
</ul>
<p>This is indeed what you're doing. Thus any further inprovement can only come from the optimization of each step. Possible ways include:</p>
<ul>
<li>narrow down the search region (requires additional constraints/assumptions as per <a href="https://stackoverflow.com/questions/34624597/best-way-to-extract-part-of-long-string-in-python#comment56995056_34624597">comment56995056</a>)</li>
<li>speed up the search operation bits, which include:

<ul>
<li>extracting raw data from the format

<ul>
<li>you already did this by disregarding the format altogether - so you have to make sure there'll never be any incorrect parsing (e.g. your search terms embedded in strings elsewhere or matching a part of a token) as per <a href="https://stackoverflow.com/questions/34624597/best-way-to-extract-part-of-long-string-in-python#comment56995034_34624597">comment56995034</a></li>
</ul></li>
<li>elementary pattern comparison operation

<ul>
<li>unlikely to attain in pure Python since <code>str.index</code> is implemented in C already and the implementation is probably already as simple as can possibly be</li>
</ul></li>
</ul></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The underlying requirement shows through when you clarify:</p>
<blockquote>
<p>I was thinking about getting the end index position of ' my_token:[" ' and after that getting the beginning index position of ' "], ' and getting all the text between those two index positions.</p>
</blockquote>
<p>That sounds like you're trying to avoid the correct approach: <strong>use a parser</strong> for whatever language is in the string.</p>
<p>There is no good reason to build directly on top of string primitives for parsing, unless you are interested in writing <a href="https://wiki.python.org/moin/LanguageParsing" rel="nofollow">yet another parsing framework</a>.</p>
<p>So, use libraries written by people who have dealt with the issues before you.</p>
<ul>
<li>If it's JSON, use the <a href="https://docs.python.org/3/library/json.html" rel="nofollow">standard library <code>json</code> module</a>; ditto if it's some other language with a parser already in the Python standard library.</li>
<li>If it's some other widely-implemented standard: get whichever already-existing third-party Python library knows how to parse that properly.</li>
<li>If it's not already implemented: write a custom parser using <a href="https://pyparsing.wikispaces.com/" rel="nofollow">pyparsing</a> or some other well-known solid library.</li>
</ul>
<p>So to make a good choice you need to know <strong>what is the data format</strong> (this is not answered by “what are the file names”; rather, you need to know what is the data format of the <em>content</em> of those files). Then you'll be able to search for a parser library that knows about that data format.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, as already mentioned - a parser seems the best option.</p>
<p>But to answer your question without all this extra advice ... if you're just looking at speed, a parser isn't really the best method of doing this. The faster method is you already have a string like this would be to use regex.</p>
<pre><code>matches = re.match(r"my_token:\[\s*"(.*)"\s*\]\.",str)
key_of_interest = matches.groups()[0]
</code></pre>
<p>There are other issues that come up. For example what if your key has a <code>"</code> inside it ? strinified JSON will automatically use an escape character there and that will be captures by the regex too. And therefore this gets a bit too complicated.</p>
<p>And JSON is not regex parsable in itself (<a href="https://cstheory.stackexchange.com/questions/3987/is-json-a-regular-language">is-json-a-regular-language</a>). So, use at your own risk. But with the appropriate restrictions and assumptions regex would be faster than a json parser.</p>
</div>
<span class="comment-copy">If the string is JSON, use <code>json.loads</code> and access it on the parsed object, don't try to slice it as a string.</span>
<span class="comment-copy">Assuming that is the only time <code>my_token</code> appears in each string, without an additional constraint (such as 'it is likely to be in the last half of the string'), what sort of efficiency improvement are you looking for? I think you could get a marginal increase in efficiency using regex to simply capture <code>key_of_interest</code> by making a regex for the surrounding characters, but not to an algorithmically significant degree.</span>
<span class="comment-copy">@Amadan Why would that be more efficient? If the string is already in-memory and he has no need for any other part of the string, isn't that just adding overhead of loading the string into a separate object?</span>
<span class="comment-copy">@NathanielFord: You are right, I was thinking of safety and managed to skip the bit where it is "the only part in each string it says <code>my_token</code>". Feel free to disregard.</span>
<span class="comment-copy">You should clarify your question. Speed-wise, your solution <b>is</b> the fastest possible, but it might be reasonable to actually sacrifice a bit of processing speed in favor of other factors, such as abstraction, expandability etc.</span>
<span class="comment-copy">The file is a .ion file. Would you suggest using pyparsing?</span>
<span class="comment-copy">The file is not a JSON file. It is a .ion file.</span>
<span class="comment-copy">That's interesting. I've never heard of a .ion file. Could you give the full form or what it is being used for ?</span>
