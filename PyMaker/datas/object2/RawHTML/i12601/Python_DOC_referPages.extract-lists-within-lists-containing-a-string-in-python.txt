<div class="post-text" itemprop="text">
<p>I'm trying to divide a nested list into two nested lists using list comprehensions. I am unable to do so without converting the inner lists to strings, which in turn ruins my ability to access/print/control the values later on.  </p>
<p>I tried this::</p>
<pre><code>paragraphs3 = [['Page: 2', 'Bib: Something', 'Derived:  This n that'], ['Page: 3', 'Bib: Something', 'Argument: Wouldn't you like to know?'], ...]

derived = [k for k in paragraphs3 if 'Derived:' in k]
therest = [k for k in paragraphs3 if 'Derived:' not in k]
</code></pre>
<p>What happens is that the whole of paragraphs3 = [] ends up in therest = [], unless i do something like this:</p>
<pre><code>for i in paragraphs3:
    i = str(i)
    paragraphs4.append(i)
</code></pre>
<p>If I then feed paragraphs4 to the list comprehension, I get two lists, just like I want. But they are not nested lists anymore since this: </p>
<pre><code>    for i in therest:
        g.write('\n'.join(i))
        g.write('\n\n') 
</code></pre>
<p>Writes each !character! in therest = [] in a separate line:</p>
<pre><code>'
P
a
g
e
:

2
'
</code></pre>
<p>Thus I'm looking for a better way to split paragraphs3 ... Or maybe the solution lies elsewhere? The end result/output I'm looking for is: </p>
<pre><code>Page: 2
Bib: Something
Derived: This n that

Page: 3
Bib: Something
.
.
.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code separates the sublists based on whether they contain a string that starts with <code>'Derived:'</code>. </p>
<pre><code>paragraphs3 = [['Page: 2', 'Bib: Something', 'Derived:  This n that'], ['Page: 3', 'Bib: Something', "Argument: Wouldn't you like to know?"], ]

def show(paragraphs):
    for para in paragraphs:
        print('\n'.join(para), '\n')

derived = []
therest = []

print('---input---')
show(paragraphs3)

for para in paragraphs3:
    if any(item.startswith('Derived:') for item in para):
        derived.append(para)
    else:
        therest.append(para)

print('---derived---')
show(derived)

print('---therest---')
show(therest)
</code></pre>
<h3>output</h3>
<pre><code>---input---
Page: 2
Bib: Something
Derived:  This n that 

Page: 3
Bib: Something
Argument: Wouldn't you like to know? 

---derived---
Page: 2
Bib: Something
Derived:  This n that 

---therest---
Page: 3
Bib: Something
Argument: Wouldn't you like to know? 
</code></pre>
<p>The most important part of this code is</p>
<pre><code>`any(item.startswith('Derived:') for item in para)`
</code></pre>
<p>This iterates over the individual strings in <code>para</code> (the current paragraph), and returns <code>True</code> as soon as it finds a string that starts with <code>'Derived:'</code>.  </p>
<hr/>
<p>FWIW, that <code>for</code> loop can be condensed down to:</p>
<pre><code>for para in paragraphs3:
    (therest, derived)[any(item.startswith('Derived:') for item in para)].append(para)
</code></pre>
<p>because <code>False</code> and <code>True</code> evaluate to 0 and 1 respectively, so they can be used to index the <code>(therest, derived)</code> tuple. However, many people would consider that verging on unreadable. :) </p>
</div>
<div class="post-text" itemprop="text">
<p>The code you've written is almost correct. You need to check if <code>'Derived:'</code> is present in the 3rd element of the list. <code>k</code> basically contains the first element of <code>paragraphs3</code></p>
<pre><code>&gt;&gt;&gt; paragraphs3 = [['Page: 2', 'Bib: Something', 'Derived:  This n that'], ['Page: 3', 'Bib: Something', 'Argument: Wouldn\'t you like to know?']]
&gt;&gt;&gt; paragraphs3[0]
['Page: 2', 'Bib: Something', 'Derived:  This n that']
&gt;&gt;&gt; paragraphs3[0][2] # Here is where you want to check the condition
'Derived:  This n that'
</code></pre>
<p>So all you have to do is change the condition to <code>if 'Derived:' in k[2]</code>.</p>
<pre><code>&gt;&gt;&gt; [k for k in paragraphs3 if 'Derived:' in k[2]]
[['Page: 2', 'Bib: Something', 'Derived:  This n that']]

&gt;&gt;&gt; [k for k in paragraphs3 if 'Derived:' not in k[2]]
[['Page: 3', 'Bib: Something', "Argument: Wouldn't you like to know?"]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Solution</h2>
<pre><code>derived = [l for l in paragraphs3 if any(filter(lambda k: 'Derived: ' in k, l))]
therest = [l for l in paragraphs3 if any(filter(lambda k: 'Derived: ' not in k, l))]
</code></pre>
<h2>Detailed explanation</h2>
<p>Copying the entire list:</p>
<pre><code>[l for l in paragraph3]
</code></pre>
<p>Copying list with condition:</p>
<pre><code>[l for l in paragraph3 if sublist_contains('Derived: ', l)]
</code></pre>
<p>Function <code>sublist_contains</code> is not implemented yet, so let's implement it.</p>
<p>Retrieve only items which match the <code>condition_check</code>:</p>
<pre><code>filter(condition_check, l)
</code></pre>
<p>Since <code>condition_check</code> can be expressed as a lambda function:</p>
<pre><code>filter(lambda k: 'Derived: ' in k, l)
</code></pre>
<p>Converting result to boolean (will be True if at least one item is found matching the condition):</p>
<pre><code>any(filter(lambda k: 'Derived: ' in k, l))
</code></pre>
<p>And replacing <code>sublist_contains</code> with resulting inline code:</p>
<pre><code>derived = [l for l in paragraphs3 if any(filter(lambda k: 'Derived: ' in k, l))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like your inner list has structure; the list itself is one value, not just a list of unrelated values. With that in mind, you could write a class to represent that data.</p>
<pre><code>paragraphs3 = [['Page: 2', 'Bib: Something', 'Derived:  This n that'], ['Page: 3', 'Bib: Something', 'Argument: Wouldn\'t you like to know?'], ...]

class Paragraph(object):
    def __init__(self, page, bib, extra):
        self.page = page
        self.bib = bib
        self.extra = extra

    @property
    def is_derived(self):
        return 'Derived: ' in self.extra

paras = [Paragraph(p) for p in paragraphs3]
</code></pre>
<p>You can then use the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">partition</a> recipe from itertools to split that one list into two iterators.</p>
<pre><code>def partition(pred, iterable):
    'Use a predicate to partition entries into false entries and true entries'
    # partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)

(not_derived_paras, derived_paras) = partition(lambda p: p.is_derived, paras)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems to me like the most straight-forward way of doing it: </p>
<pre><code>[p for p in paragraphs3 if 'Derived:' in '\n'.join(p)]
[p for p in paragraphs3 if 'Derived:' not in '\n'.join(p)]
</code></pre>
<p>However, if you'd like, you can get a lot fancier, and pull this off in a single line (though it will be more complicated than necessary). </p>
<pre><code>result = {k:[p for p in paragraphs3 if ('Derived:' in '\n'.join(p)) == test]  for k,test in {'derived': True, 'therest': False}.items()}
</code></pre>
<p>This produces a <code>dict</code> with <code>'derived'</code> and <code>'therest'</code> as keys. Now you can do this: </p>
<pre><code>for k,p in result.items():
    print(k)
    for i in p:
        print(''.join(i))
</code></pre>
</div>
<span class="comment-copy">can you please describe the desired output better? My impression is your input is already what you want as output</span>
<span class="comment-copy">Is the nested list depth fixed or arbitrary?</span>
<span class="comment-copy">@Pynchia: it is - i'm just trying to seperate two groups of items, because i write them to file separately later on.</span>
<span class="comment-copy">@Lav: Fixed - that is, paragraphs3 is always a list of lists, which never contain any sublists.</span>
<span class="comment-copy">I checked your answer first and it worked! Thank you. I will try the others a bit later I'm sure many are correct, but I am most comfortable with the good old for loop, though I hear it's the slowest option?</span>
<span class="comment-copy">@treakec: Thanks! The good old <code>for</code> loop with <code>append</code> is <i>slightly</i> slower than the equivalent list comprehension, but not much. However, for this application using append works out much faster than doing two list comprehensions, since the list comp versions have to scan and test everything twice: once for the <code>derived</code> list and once again for the <code>therest</code> list.</span>
<span class="comment-copy">@treakec: And as I mentioned in my answer, using <code>any</code> on a generator expression returns <code>True</code> as soon as it finds a match, it only has to scan the whole list if it doesn't find a match.</span>
