<div class="post-text" itemprop="text">
<p>I've tried module multiprocessing Manager and Array , but it can't meet my needs
Is there a method just like shared memory in linux C?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Not as such</strong>.</p>
<p>Sharing memory like this in the general case is very tricky.  The CPython interpreter does not relocate objects, so they would have to be created <em>in situ</em> within the shared memory region.  That means shared memory allocation, which is considerably more complex than just calling <a href="https://docs.python.org/3/c-api/memory.html#memory-interface" rel="nofollow"><code>PyMem_Malloc()</code></a>.  In increasing order of difficulty, you would need cross-process locking, a per-process reference count, and some kind of inter-process cyclic garbage collection.  That last one is <em>really hard</em> to do efficiently and safely.  It's also necessary to ensure that shared objects only reference other shared objects, which is very difficult to do if you're not willing to relocate objects into the shared region.  So Python doesn't provide a general purpose means of stuffing arbitrary full-blown Python objects into shared memory.</p>
<p>But you can share <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow"><code>mmap</code></a> objects between processes, and <code>mmap</code> supports the buffer protocol, so you can wrap it up in something higher-level like <code>array</code>/<code>numpy.ndarray</code> or anything else with <a href="https://docs.python.org/3/c-api/buffer.html#bufferobjects" rel="nofollow">buffer protocol</a> support.  Depending on your precise modality, you might have to write a small amount of C or Cython glue code to rapidly move data between the mmap and the array.  This should not be necessary if you are working with NumPy.  Note that high-level objects may require locking which mmap does not provide.</p>
</div>
<span class="comment-copy">If you're <i>really</i> on Linux (and not, say, some other Unix clone, or Windows or some other crazy thing), you can probably just create files in <code>/dev/shm</code>.  They'll live in RAM.  Combine with <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow noreferrer"><code>mmap</code></a> and stir vigorously.</span>
<span class="comment-copy">well using a file as a shared storage is a good idea but the question is in the cost of serialization/deserialization.</span>
<span class="comment-copy">The Python interpreter is not designed to host Python objects in shared memory.  Because then you have to figure out which process "owns" the memory, and who has the right to (re)use it.</span>
<span class="comment-copy">@Kevin can you give some reference on that of "The Python interpreter is not designed to host Python objects in shared memory"? While I ran web application in apache, class veriables make no sense if there are more than one process, that means class veriables is valid only for a given process. However python docs does have a discussion on "[Sharing state between processes][1]" [1] <a href="https://docs.python.org/2/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">@caot: Your application was running in a single process and communicating with Apache over WSGI.</span>
