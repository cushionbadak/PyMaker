<div class="post-text" itemprop="text">
<p>While loops are new to me and I'm having trouble getting my code to validate.</p>
<hr/>
<p><strong>Description</strong></p>
<blockquote>
<p>In this exercise your function will receive two parameters: a
  string(long_word) and a character(char). Use a while loop to go
  through all the letters in the string and build a new string made up
  from those letters until you find the char. You may assume that each
  string will contain the passed in character(char).</p>
</blockquote>
<p><strong>This is my code.</strong></p>
<pre><code>def letters_up_to_char(long_word, char):
    new = ""
    i = 0
    while i != char:
        for letter in long_word:
            new += letter
        i += 1
    return new
</code></pre>
<p><strong>Example output</strong></p>
<pre><code>letters_up_to_char('coderoxthesox', 'x') -&gt; 'codero'
letters_up_to_char('abcdefghijklmnop', 'f') -&gt; 'abcde'
</code></pre>
<p>When I go to run my code I get: </p>
<pre><code>TypeError: cannot concatenate 'str' and 'int' objects
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>To get rid of <code>TypeError: cannot concatenate 'str' and 'xyz' objects</code>, just
  cast the object being concatenated to a string. If your code was
  <code>string + num</code> or <code>string += num</code> just cast <code>num</code> to string like so:
  <code>str(num)</code></p>
</blockquote>
<p>BUT, your code won't return the desired output. See why below:</p>
<p>If I'm not mistaken, the code <em>shouldn't</em> compile because when <code>new</code> is defined, you don't close the <strong>double quotes</strong>. Or if you are using <strong>single quotes</strong>, change your code and your question to reflect your change.</p>
<p>When I ran your code and executed it, it went in an infinite loop, the beginner's worst enemy! In your code, the </p>
<pre><code>for letter in long_word:
    new += letter
</code></pre>
<p>Is the same as saying <code>new += long_word</code>, because you are just adding the individual characters instead of the whole string at one go.</p>
<p>Your code can then be rewritten as follows:</p>
<pre><code>def letters_up_to_char(long_word, char):
    new = ""
    i = 0
    while i != char:
        new += long_word
        i += 1
    return new
</code></pre>
<p>Now it is clear what your code is doing. It's just adding the whole word to <code>new</code> each time the while loop is executed. And the while loop is executed till <code>i != char</code>. Since <code>i</code> is an <code>int</code> and <code>char</code> is a <code>str</code>, <code>i != char</code> is always true. Infinite loop in the making!</p>
<p>Your function should look like this:</p>
<pre><code>def letters_up_to_char(long_word, char):
    new = ""
    i = 0
    while i &lt; len(long_word) and long_word[i] != char:
        new += long_word[i]
        i += 1
    return new
</code></pre>
<p>Explanation:
Go through each character in <code>long_word</code> from the start (this can be more easily accomplished using a <code>for...in</code> loop, but I'm using a while loop as per your request) and till the current character != <code>char</code>, add that character to <code>new</code>.
This code returns the desired output for both your test cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering</p>
<blockquote>
<p>You may assume that each string will contain the passed in
  character(char).</p>
</blockquote>
<p>not including the char:</p>
<pre><code>def letters_up_to_char(long_word, char):
        i=0
        while long_word[i] != char:
            i+=1
        return long_word[:i]
</code></pre>
<p>including the char:</p>
<pre><code>def letters_up_to_char(long_word, char):
        i=0
        while long_word[i] != char:
            i+=1
        return long_word[:i+1]
</code></pre>
<p>Though a more pythonic way is, i.e.:</p>
<pre><code>def letters_up_to_char(long_word, char):
    return long_word.partition(char)[0]
</code></pre>
<p>Suggest you to use <a href="http://docs.python.org/3/tutorial/index.html" rel="nofollow">http://docs.python.org/3/tutorial/index.html</a> as a reference, when completing your assignments.</p>
</div>
<div class="post-text" itemprop="text">
<p>The "i" is <code>int</code> type which cannot be compared with a <code>str</code> type "char". </p>
<pre><code>while i &lt; len(long_word) and long_word[i] != char 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of ways similar to this to write this code. In your example, the <code>while i != char</code> line is going to result in a very long loop because it will loop until <code>i == int(char)</code>, or possibly infinitely. I would write it with either a <code>for</code> <strong>or</strong> a <code>while</code>, as below:</p>
<pre><code>def letters_while(long_word, char):
    new = ""
    i = 0
    # A second condition is needed to prevent an infinite loop
    # in the case that char is not in long_word
    while long_word[i] != char and i &lt; len(long_word):
        new += letter
        i += 1
    return new

def letters_for(long_word, char):
   new = ""
   for letter in long_word:
        if letter != char:
            new += letter
   return new
</code></pre>
<p>As a note, these are easy to understand examples, and a better way to do this would be</p>
<pre><code>long_word.split(char)[0]
</code></pre>
</div>
<span class="comment-copy">Just a remark that you can relay to the person that gave the assignment to you: This is a horrible eay of teaching Python. The algoritm described violate every best practice pattern for Python and is highly inefficient. Do not teach this to students! (If the person is interested I can explain in details.)</span>
