<div class="post-text" itemprop="text">
<p>I'm curious if it is possible to append a return value from function f(x,y) into, for example, list. </p>
<p>So I have this:</p>
<p><strong>Parallel:</strong></p>
<pre><code> def download_unit_LVs(self, cislo_uzemia):
     pool = Pool(number_of_workers)
     for cislo in cisla:
         pool.apply_async(self.download_cislo, args=(cislo_uzemia,cislo))
     pool.close()
     pool.join()
     self.manager.commit()
</code></pre>
<p>This is the way how I run the method <code>self.download_cislo</code> parallel but the problem is, that it returns a value which I have to append to results list.</p>
<p>How to do that?</p>
<p><strong>Sequential</strong>:</p>
<pre><code> def download_unit_LVs(self, cislo_uzemia):
        results = []
        for cislo in cisla:
            results.append(self.download_cislo(cislo_uzemia,cislo))
        self.manager.commit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>pool.apply_async</code> call can be passed a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow"><code>callback</code>
function</a>. The
callback function will be called when <code>foo</code> function completes and will be
passed the value returned by <code>foo</code>. Note that the return value <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow">must be picklable</a>, as the communication between processes is done with a Queue.</p>
<pre><code>import multiprocessing as mp

def foo(x):
    return x * x

if __name__ == '__main__':
    result = []
    pool = mp.Pool()
    for i in range(100):
        pool.apply_async(foo, args=(i, ), callback=result.append)
    pool.close()
    pool.join()
    print(result)
    # [0, 1, 4, 9, 16, ... 9409, 9604, 9801]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the results should end up in a list use the <code>map()</code> method of the <code>Pool</code>:</p>
<pre><code>def download_unit_LVs(self, cislo_uzemia):
    pool = Pool(number_of_workers)
    results = pool.map(partial(self.download_cislo, cislo_uzemia), self.cisla)
    self.manager.commit()
</code></pre>
<p><code>partial()</code> is from the <code>functools</code> module.</p>
</div>
<span class="comment-copy">The <code>lambda</code> expression is unnecessary, just pass <code>result.append</code> as <code>callback</code>. In this example callbacks and the loop are also unnecessary because those can be replaced by <code>Pool.map()</code> which already returns a list with all results.</span>
<span class="comment-copy">@BlackJack: True. Thanks for the correction.</span>
<span class="comment-copy">I just tested both options with <code>map</code> and <code>apply_async</code> and <code>apply_async</code> is faster, thanks!</span>
