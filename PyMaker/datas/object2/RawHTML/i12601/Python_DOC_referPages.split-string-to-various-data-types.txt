<div class="post-text" itemprop="text">
<p>I would like to convert the following string:</p>
<pre><code>s = '1|2|a|b'
</code></pre>
<p>to</p>
<pre><code>[1, 2, 'a', 'b']
</code></pre>
<p>Is it possible to do the conversion in one line?    </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is it possible to do the conversion in one line? </p>
</blockquote>
<p><strong>YES</strong>, It is possible. But how?</p>
<p><em>Algorithm for the approach</em> </p>
<ul>
<li><p>Split the string into its constituent parts using <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a>. The output of this is </p>
<pre><code>&gt;&gt;&gt; s = '1|2|a|b'
&gt;&gt;&gt; s.split('|')
['1', '2', 'a', 'b']
</code></pre></li>
<li><p>Now we have got half the problem. Next we need to loop through the split string and then check if each of them is a string or an int. For this we use </p>
<ul>
<li>A <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, which is for the looping part</li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><code>str.isdigit</code></a> for finding if the element is an <code>int</code> or a <code>str</code>. </li>
</ul></li>
<li><p>The list comprehension can be easily written as <code>[i for i in s.split('|')]</code>. But how do we add an <code>if</code> clause there? This is covered in <a href="https://stackoverflow.com/questions/17321138/python-one-line-list-comprehension-if-else-variants">One-line list comprehension: if-else variants</a>. Now that we know which all elements are <code>int</code> and which are not, we can easily call the builtin <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> on it.</p>
<p>Hence the final code will look like </p>
<pre><code>  [int(i) if i.isdigit() else i for i in s.split('|')]
</code></pre></li>
</ul>
<p>Now for a small demo,</p>
<pre><code>&gt;&gt;&gt; s = '1|2|a|b'
&gt;&gt;&gt; [int(i) if i.isdigit() else i for i in s.split('|')]
[1, 2, 'a', 'b']
</code></pre>
<p>As we can see, the output is as expected. </p>
<hr/>
<p>Note that this approach is not suitable if there are many types to be converted.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do it for negative numbers or lots of mixed types in one line but you could use a  function that would work for multiple types using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a>:</p>
<pre><code>from ast import  literal_eval
def f(s, delim):
    for ele in s.split(delim):
        try:
            yield literal_eval(ele)
        except ValueError:
            yield ele

s = '1|-2|a|b|3.4'

print(list(f(s,"|")))
[1, -2, 'a', 'b', 3.4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way, is using <code>map</code> built-in method:</p>
<pre><code>&gt;&gt;&gt; s='1|2|a|b'
&gt;&gt;&gt; l = map(lambda x: int(x) if x.isdigit() else x, s.split('|'))
&gt;&gt;&gt; l
[1, 2, 'a', 'b']
</code></pre>
<p>If Python3, then:</p>
<pre><code>&gt;&gt;&gt; s='1|2|a|b'
&gt;&gt;&gt; l = list(map(lambda x: int(x) if x.isdigit() else x, s.split('|')))
&gt;&gt;&gt; l
[1, 2, 'a', 'b']
</code></pre>
<p>Since <code>map</code> in Python3 would give a generator, so you must convert it to <code>list</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to do arbitrarily many or complex conversions "in a single line" if you're allowed a helper function.  Python does not natively have a "convert this string to the type that it should represent" function, because what it "should" represent is vague and may change from application to application.</p>
<pre><code>def convert(input):
    converters = [int, float, json.loads]
    for converter in converters:
        try:
            return converter(input)
        except (TypeError, ValueError):
            pass
    # here we assume if all converters failed, it's just a string
    return input

s = "1|2.3|a|[4,5]"
result = [convert(x) for x in s.split("|")]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have all kinds of data types(more than str and int), I believe this does the job.</p>
<pre><code>s = '1|2|a|b|[1, 2, 3]|(1, 2, 3)'
print [eval(x) if not x.isalpha() else x for x in s.split("|")]

# [1, 2, 'a', 'b', [1, 2, 3], (1, 2, 3)]
</code></pre>
<p>This fails if there exists elements such as "b1"</p>
</div>
<span class="comment-copy">What about more complex data types? How many data types do you expect? Have you tried anything? Any specific problems with your code? Why are you trying to do this in one line?</span>
<span class="comment-copy">@vaultah at first, just <code>int</code> and <code>string</code> but I'm thinking about how to use the solution for <code>float</code> too.</span>
<span class="comment-copy">Thank you for suggesting <code>ast.literal_eval</code>.  It is very useful.  I can now convert to many types using two lines: <code>from ast import literal_eval</code> and <code>[literal_eval(e) if e[-1].isdigit() else e for e in s.split('|')]</code></span>
<span class="comment-copy">@wannik no worries, if you wanted a single line you could  try  <code>list(map(literal_eval, re.sub('(?!\|)([A-Za-z]+)', "'" + r"\1" + "'", s).split("|"))))</code>, wrapping the characters in quotes but the function approach is a lot more robust</span>
<span class="comment-copy">you really no need map-lambda here.</span>
<span class="comment-copy">this is all but pythonic</span>
<span class="comment-copy">Perhaps you could suggest ways to improve it, then?  I'm not sure what part of it is so egregious to you.</span>
<span class="comment-copy">not trying to offend, but a stack of try excepts is not a good practice at all in my opinion.</span>
<span class="comment-copy">and to suggest i would say that harcoding the types is a bad level solution,  maybe having a list of registered types to convert would be better.</span>
<span class="comment-copy">Good suggestions.  I've improved the answer to fit.</span>
