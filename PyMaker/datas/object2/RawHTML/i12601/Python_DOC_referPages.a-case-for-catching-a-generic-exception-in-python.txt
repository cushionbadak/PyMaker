<div class="post-text" itemprop="text">
<p>There is a simple scenario that I seem to encounter quite often: I invoke a function that can raise any number of exceptions. I won't do anything different if it is one exception versus another, I just want to log the exception information and either re-raise the exception or indicate in some other way that something didn't go as planned (such as returning None), otherwise proceed normally. So I use some form of the exception handling shown below.</p>
<p>Please note:</p>
<ul>
<li><p>Imagine his code is running in a daemon that processes messages, so it needs to keep running, even if one of the messages causes some kind of exception.</p></li>
<li><p>I am aware that there is a rule of thumb that it is not generally advisable to catch a generic Exception because that may hide specfic errors that should be handled differently. (This is true in other languages as well.) This case is different because I don't care what exception is raised, the handling is the same.</p></li>
</ul>
<p>Is there a better way?</p>
<pre><code>def my_func(p1):                                                                
    retval = None                                                            
    try:                                                                        
        valx = other_func1(p1)                                                  
    except Exception as ex:                                                     
        log.error('other_func1 failed. {}: {}'.format(type(ex).__name__, ex))   
    else:                                                                       
        retval = ...                                                            
    return retval                                                               
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a better way? </p>
</blockquote>
<p>Doubt it, Python has these built-in Base Exception Classes so creating something on your own is really just being redundant. If you handle everything in the same way, generalizing in your <code>except</code> with <code>Exception</code> is most likely the best way to tackle this. </p>
<p><em>Small caveat here:</em> <strong><a href="https://docs.python.org/3/library/exceptions.html#Exception" rel="nofollow"><code>Exception</code></a></strong> isn't the most general you can get, from the documentation:</p>
<blockquote>
<p>All built-in, non-system-exiting exceptions are derived from this class. All user-defined exceptions should also be derived from this class.</p>
</blockquote>
<p>So, it won't catch <strong>all</strong> exceptions:</p>
<pre><code>In [4]: try:
   ...:     raise SystemExit
   ...: except Exception as b:
   ...:     print("Catch All")
To exit: use 'exit', 'quit', or Ctrl-D.
An exception has occurred, use %tb to see the full traceback.

SystemExit
</code></pre>
<p>Which, do note, is of course something you should want. A <code>SystemExit</code> should exit. But, if some edge case requires it, to also catch system-exiting exceptions you can use <strong><a href="https://docs.python.org/3/library/exceptions.html#BaseException" rel="nofollow"><code>BaseException</code></a></strong> which is as loose as you can get with exception matching:</p>
<pre><code>In [2]: try:
   ...:     raise SystemExit
   ...: except BaseException as b:
   ...:     print("Catch All")
Catch All
</code></pre>
<p>Use it at your own discretion but, <strong>it probably makes zero sense to actually use it</strong>, and this case does not seem to require it. I just mentioned it because it is the most general you can get. I believe the way you have done it is more than sufficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>That looks like a fine way to catch them if you're handling them all the same way. <s>If you want to check what kind of exception was raised, you can use the built-in function <code>type</code> and compare the result to an exception class (for example, one from <a href="https://docs.python.org/2/library/exceptions.html" rel="nofollow">the list of built-in exception types</a>):</s></p>
<pre><code>try:
    f()
except Exception as ex:
    if type(ex)==ValueError:
        handle_valueerror()
    else:
        handle_other_exception()
</code></pre>
<p></p></div>
<span class="comment-copy">That seems decent, actually.</span>
<span class="comment-copy">aside, you can <a href="https://docs.python.org/2/library/logging.html#logging.Logger.exception" rel="nofollow noreferrer"><code>log.exception()</code></a> inside an <code>except</code> suite and make your calls a bit simpler.  Usually just <code>log.exception("something bad happened")</code> and the logging system will format the traceback itself for you.</span>
<span class="comment-copy">I would note that if the best answer is <code>except Exception as ex/:</code> then you are most likely asking a wrong question and have serious design issues in whatever you are doing. And the exceptions of that I can count on single hand. In case of a daemon this would, potentially, also suppress an error which indicates that it cannot spawn more worker threads, so it will not work and for you it will be yet-another-generic-exception.</span>
<span class="comment-copy">@TymoteuszPaul, are you saying that there are non-system-exiting Exceptions that would not be caught here? Also, I don't understand how the answer by KSFT has a checkmark next to it. At least I didn't intend to mark it that way. (Noob here)</span>
<span class="comment-copy">it seems unwise to catch system-exiting-exceptions, since I would think they are things like out-of-memory, in which case it would be dangerous to continue doing anything.</span>
<span class="comment-copy">Totally agree. Just threw it out there as the "most general".</span>
<span class="comment-copy">But then you could just use specific excepts before the broad one, <a href="https://docs.python.org/2/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">as python supports it just fine</a></span>
<span class="comment-copy">@TymoteuszPaul Downvoting over style? Wow.</span>
<span class="comment-copy">@Zizouz212 this isn't matter of just style but also reinventing the wheel, why do that when there is a native support for a better solution? Or is that all constructive you had to add here?</span>
<span class="comment-copy">@TymoteuszPaul Wow, I'm not sure what I was thinking. That was a really stupid way to do that.</span>
<span class="comment-copy">@KSFT we are all here to learn, which is why I always leave a comment whenever I down vote something :).</span>
