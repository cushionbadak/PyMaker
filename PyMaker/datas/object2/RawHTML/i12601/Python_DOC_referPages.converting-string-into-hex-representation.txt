<div class="post-text" itemprop="text">
<p>I am looking for a good way to convert a string into a hex string. </p>
<p>For example: </p>
<ul>
<li><code>'\x01\x25\x89'</code> -&gt; <code>'0x012589'</code></li>
<li><code>'\x25\x01\x00\x89'</code> -&gt; <code>'0x25010089'</code></li>
</ul>
<p>Here is what I have come up with:</p>
<pre><code>def to_hex(input_str):
    new_str = '0x'

    for char in input_str:
        new_str += '{:02X}'.format(ord(char))

    return new_str
</code></pre>
<p>It seems like there is probably a better way to do this that I haven't been able to find yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want the <a href="https://docs.python.org/3/library/binascii.html#binascii.hexlify">binascii</a> module.</p>
<pre><code>&gt;&gt;&gt; binascii.hexlify('\x01\x25\x89')
'012589'
&gt;&gt;&gt; binascii.hexlify('\x25\x01\x00\x89')
'25010089'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just encode to hex:</p>
<pre><code>In [5]: s= "\x01\x25\x89"

In [6]: s.encode("hex")
Out[6]: '012589'

In [7]: s = "\x25\x01\x00\x89"
In [8]: s.encode("hex")
Out[8]: '25010089'
</code></pre>
</div>
<span class="comment-copy">Use regex to remove the <code>\x</code>s?</span>
<span class="comment-copy">the <code>\x</code> isn't really part of the string. it's to show the value of the raw bytes</span>
<span class="comment-copy">This works well for python 2 and I like that it doesn't require a module. The answer by <a href="http://stackoverflow.com/a/34661666/4538876">Chris</a> will work for python 2 and 3 though.</span>
<span class="comment-copy">@JakeGreen, neither would actually work for python3 without an encode, if you wanted a solution for both 2 and 3 <code>codecs.encode(s,  "hex")</code> but again you will have to encode  s</span>
<span class="comment-copy">you are right. I was thinking more about my specific use case in my previous comment and I never mentioned what my use case is. I have been using <code>struct</code> to pack some data which returns type bytes in python 3 and not a string, so binascii works for my use case in both versions of python. Sorry about that. Thanks for the good info though.</span>
