<div class="post-text" itemprop="text">
<p>Basically I have a program where a name will be input, and three numbers calculated, and put into a list like this:</p>
<p><img alt="list" src="https://i.imgur.com/o6XXSp5.png"/></p>
<p>Each time that the code has been run, it will write this list into a text file. After multiple runs of the program, the text file looks like this:</p>
<p><img alt="file" src="https://i.imgur.com/XuUZ2dN.png"/></p>
<p>What I need to do is read each line of the text file and find the highest number out of each line, and print them out with the name attached like so, highest to lowest:</p>
<p><img alt="file" src="https://i.imgur.com/YcjjhvV.png"/></p>
<p>I figured that I would have to use something like 'for line in lines' , and 'if num1&gt;num2 and num1&gt;num3: line=[name,num1]</p>
<p>However I realised that I couldn't take the variables back out of line. I have spent a long time researching and trying to find a way to do it, but I haven't been successful at all. Does anyone know how to do this, so python will print out the contents of the file arranged by highest number to lowest number, like so:</p>
<p><img alt="file" src="https://i.imgur.com/YcjjhvV.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>You can first get rid of first and last character ('[' and ']'), split line by comma, convert first, second and third element to integer, then search maximum value from this. Something like:</p>
<pre><code>lines = []
with open(fname) as f:
    lines = f.readlines()

for line in lines:
    line = line[1:-1] # get rid of '[' and ']'
    splitted = line.split(",") # split string by commas
    numbers = list(map(int, splitted[1:])) # get numbers and convert to ints
    maxNum = max(numbers) # search maximum
    # now you can print
    print("[" + splitted[0] + ", " + str(maxNum) + "]")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can parse the file like user3599110 correctly suggests, and then you still have to sort your results. To do that, before printing anything, you store the various (name,maxNum) tuples in a list, and then perform a list sort based on maxNum. </p>
<p>The code looks something like:</p>
<pre><code>lines = []
with open(fname) as f:
    lines = f.readlines()

res_list = []
for line in lines:
    line = line[1:-1] # get rid of '[' and ']'
    splitted = line.split(",") # split string by commas
    numbers = list(map(int, splitted[1:])) # get numbers and convert to ints
    maxNum = max(numbers) # search maximum
    res_list.append( (splitted[0],maxNum) ) # save (name,maxNum) on the list

# now we sort the list based on 'maxNum' which is the second element of each tuple. 
# We use a simple lambda function here, and reverse=True
sorted_list = sorted(res_list, key=lambda x: x[1], reverse=True)

# now you can print
for item in sorted_list:
   print("[" + item[0] + ", " + str(item[1]) + "]")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't hand-parse this. These are Python <code>list</code> literals, at least in your example, and Python can parse them correctly, safely, and easily with <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a>:</p>
<pre><code>import ast
from operator import itemgetter

with open(fname) as f:
    # Parse to Python lists
    all_lists = map(ast.literal_eval, filter(str.strip, f))
    # Convert to name, maxval pairs
    max_vals = ([lst[0], max(lst[1:])] for lst in all_lists)
    # Sort by the maxval from highest to lowest
    sorted_vals = sorted(max_vals, key=itemgetter(1), reverse=True)

# Print results
for elem in sorted_vals:
    print(elem)
</code></pre>
<p>No complex hand-rolled parsers, you let Python do all the heavy lifting (and it will run faster for it). <code>ast.literal_eval</code> is similar to regular <code>eval</code>, but only parses code consisting purely of Python literals; it can't execute arbitrary code, removing the major security/stability risks of using <code>eval</code>.</p>
</div>
<span class="comment-copy">This is why you don't roll your own parsing and serialization code if you can avoid it. At first glance, your slice is stripping the <code>[</code> and the trailing newline, not the close <code>]</code>, and you're omitting the quotes around the name on print (you could have just printed a <code>list</code> literal of the two values and let the <code>list</code> <code>repr</code> do the work). This also doesn't sort, which makes slurping the whole file kind of pointless; if you're not sorting, you could just process line-by-line and avoid the latency and memory overhead involved in slurping the whole file before processing a single line.</span>
<span class="comment-copy">But that does answer the question, doesn't it?</span>
<span class="comment-copy">Hi, thanks for your help. When I run the program I get this error: <a href="http://i.imgur.com/uTIeuEX.png" rel="nofollow noreferrer">i.imgur.com/uTIeuEX.png</a>   I think that it  is trying to convert the end bracket ']' of each line into an integer, but obviously it can't do that.</span>
<span class="comment-copy">@Balmer: The same problem from the other answer was copy-pasted into this one; it's supposed to strip the bracket, but it only strips the leading bracket and the new line. Use <code>ast.literal_eval</code>; seriously, rolling your own code is just signing up for a maintenance nightmare for no reason.</span>
<span class="comment-copy">@ShadowRanger  I used your method first, however I got an error 'Unexpected EOF while parsing' <a href="http://i.imgur.com/L5erwvB.png" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">@Balmer: Split up my method to parse line by line in a loop; catch the exception, figure out what line had the problem. If you've got empty lines, you'll need to filter them out before sending them into <code>ast.literal_eval</code>; a simple wrap in <code>filter(str.strip, f)</code> would exclude the empty (all whitespace) lines for you.</span>
<span class="comment-copy">@ShadowRanger To be honest I don't know how to do that as I have no experience in parsing files. Where exactly would I put the <code>filter(str.strip, f)</code> if the code currently looks like this: <a href="http://i.imgur.com/uujzmBF.png" rel="nofollow noreferrer">link</a></span>
