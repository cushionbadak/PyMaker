<div class="post-text" itemprop="text">
<p>Lets assume I have one list and another tuple both of them are already sorted:</p>
<pre><code>A = [10, 20, 30, 40]
B = (20, 60, 81, 90)
</code></pre>
<p>What I would need is to add all the elements from B into A in such a way that A remains sorted.</p>
<p>Solution I could come with was:</p>
<pre><code>for item in B:
    for i in range(0, len(A)):
        if item &gt; A[i]:
            i += 1
        else: 
            A.insert(i, item)
</code></pre>
<p>assuming A of size m, and B of size n; this solution would take O(m<code>x</code>n) in worst case, how can I make it perform better ?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way would be <a href="https://docs.python.org/2/library/heapq.html#heapq.merge" rel="nofollow">heapq.merge</a>:</p>
<pre><code>A = [10, 20, 30, 40]

B = (20, 60, 81, 90)

from heapq import merge

for ele in merge(A,B):
    print(ele)
</code></pre>
<p>Output:</p>
<pre><code>10
20
20
30
40
60
81
90
</code></pre>
<p>Some timings using the other <code>O(n)</code> solution:</p>
<pre><code>In [53]: A = list(range(10000))

In [54]: B = list(range(1,20000,10))

In [55]: timeit list(merge(A,B))
100 loops, best of 3: 2.52 ms per loop

In [56]: %%timeit
C = []
i = j = 0
while i &lt; len(A) and j &lt; len(B):
    if A[i] &lt; B[j]:
        C.append(A[i])
        i += 1
    else:
        C.append(B[j])
        j += 1
C += A[i:] + B[j:]
   ....: 
100 loops, best of 3: 4.29 ms per loop
In [58]: m =list(merge(A,B))
In [59]: m == C
Out[59]: True
</code></pre>
<p>If you wanted to roll your own this is a bit faster than merge:</p>
<pre><code>def merger_try(a, b):
    if not a or not b:
        yield chain(a, b)
    iter_a, iter_b = iter(a), iter(b)
    prev_a, prev_b = next(iter_a), next(iter_b)
    while True:
        if prev_a &gt;= prev_b:
            yield prev_b
            try:
                prev_b = next(iter_b)
            except StopIteration:
                yield prev_a
                break
        else:
            yield prev_a
            try:
                prev_a = next(iter_a)
            except StopIteration:
                yield prev_b
                break
    for ele in chain(iter_b, iter_a):
        yield ele
</code></pre>
<p>Some timings:</p>
<pre><code>In [128]: timeit list(merge(A,B))
1 loops, best of 3: 771 ms per loop

In [129]: timeit list(merger_try(A,B))
1 loops, best of 3: 581 ms per loop

In [130]: list(merger_try(A,B))  == list(merge(A,B))
Out[130]: True

In [131]: %%timeit                                 
C = []
i = j = 0
while i &lt; len(A) and j &lt; len(B):
    if A[i] &lt; B[j]:
        C.append(A[i])
        i += 1
    else:
        C.append(B[j])
        j += 1
C += A[i:] + B[j:]
   .....: 
1 loops, best of 3: 919 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/bisect.html" rel="nofollow"><code>bisect</code></a> module "<em>provides support for maintaining a list in sorted order without having to sort the list after each insertion</em>":</p>
<pre><code>import bisect
for b in B:
    bisect.insort(A, b)
</code></pre>
<p>This solution does not create a new list.</p>
<hr/>
<p>Please note that <code>bisect.insort(A, b)</code> is equivalent to </p>
<pre><code>A.insert(bisect.bisect_right(A, b), b)
</code></pre>
<p>Even though the search is fast (<em>O(log n)</em>), the insertion is slow (<a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow"><em>O(n)</em></a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Lots of good discussion in this post! Arguing about timing is hard, so I wrote some timing script. It's quite rudimentary but I think it will do for now. I've attached the results too.</p>
<pre><code>import timeit
import math
import matplotlib.pyplot as plt
from collections import defaultdict


setup = """
import bisect
import heapq
from random import randint


A = sorted((randint(1, 10000) for _ in range({})))
B = sorted((randint(1, 10000) for _ in range({})))


def bisect_sol(A, B):
    for b in B:
        bisect.insort(A, b)


def merge_sol(A, B):
    ia = ib = 0
    while ib &lt; len(B):
        if ia &lt; len(A) and A[ia] &lt; B[ib]:
            if ia &lt; len(A):
                ia += 1
        else:
            A.insert(ia + 1, B[ib])
            ib += 1


def heap_sol(A, B):
    return heapq.merge(A, B)


def sorted_sol(A, B):
    return sorted(A + B)
"""


sols = ["bisect", "merge", "heap", "sorted"]
times = defaultdict(list)
iters = [100, 1000, 2000, 5000, 10000, 20000, 50000, 100000]

for n in iters:
    for sol in sols:
        t = min(timeit.repeat(stmt="{}_sol(A, B)".format(sol), setup=setup.format(n, n), number=1, repeat=5))
        print("({}, {}) done".format(n, sol))
        times[sol].append(math.log(t))

for sol in sols:
    plt.plot(iters, times[sol])
plt.xlabel("iterations")
plt.ylabel("log time")
plt.legend(sols)
plt.show()
</code></pre>
<p>This is the result:</p>
<p><a href="https://i.stack.imgur.com/DukAS.png" rel="nofollow noreferrer"><img alt="Iterations vs. Time" src="https://i.stack.imgur.com/DukAS.png"/></a></p>
<p>It's clear that modifying the list is the major bottleneck, so creating a new list is the way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution in <code>O(n)</code>:</p>
<pre><code>A = [10, 20, 30, 40]
B = [20, 60, 81, 90]
C = []
i = j = 0
while i &lt; len(A) and j &lt; len(B):
    if A[i] &lt; B[j]:
        C.append(A[i])
        i += 1
    else:
        C.append(B[j])
        j += 1
C += A[i:] + B[j:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to perform a merge. But the "traditional" merge generates a new list; so you need some modifications in order to expand one list.</p>
<pre><code>ia = ib = 0
while ib &lt; len(B):
    if ia &lt; len(A) and A[ia] &lt; B[ib]:
        if ia &lt; len(A):
            ia += 1
    else:
        A.insert(ia + 1, B[ib])
        ib += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>edited</strong></p>
<pre><code>l1 = [10,20,30,40]
l2 = (10,20,30,40)
l2 = list(l2)
l1 = sorted(l1+l2)
</code></pre>
</div>
<span class="comment-copy">see the outplace merge algorithm used in mergesort. It takes <code>O(m+n)</code> time.</span>
<span class="comment-copy">I suggest you compare to the naive (but readable) version of <code>sorted(A+B)</code>. Also, you may want to search for existing libraries, that will probably be faster than hand-made implementation : <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow noreferrer">grantjenks.com/docs/sortedcontainers</a></span>
<span class="comment-copy">Hint: do not modify either list; create a new one. The code will become clean and fast.</span>
<span class="comment-copy">I got down voted very fast... but you indicate "A remains sorted."  It already is sorted so my solution just appended B to A.  Not sure why I got hit for that...</span>
<span class="comment-copy">@Holmes: Correct solution should be <code>A == [10, 20, 20, 30, 40, 60, 81, 90]</code>, which is not <code>B</code> concatenated to <code>A</code>.</span>
<span class="comment-copy">What is Order of this algorithm?</span>
<span class="comment-copy">@Arman the documentation doesn't say, but it would be reasonable to assume that a merge operation will be O(n) where n is the combined size of the inputs. And to get the result back into <code>A</code>, use <code>A = list(merge(A, B))</code>.</span>
<span class="comment-copy">This is O(nlgm). It's possible to do this in O(n+m).</span>
<span class="comment-copy">This is still an O(n^2) solution for something which can be done in O(n). Even the most readable solution <code>sorted(A+B)</code> is O(n*logn) and therefore faster for large inputs. <code>bisect.insort</code> is useful when you're inserting elements one by one and need the result to remain sorted after each step - which is not the case here.</span>
<span class="comment-copy">The insert isn't really O(n) right? List expansion isn't done 1 at a time. Python "over-allocates".</span>
<span class="comment-copy">@JayanthKoushik The insert is O(n) because all the elements after the insertion point need to be moved. Over-allocation doesn't help.</span>
<span class="comment-copy">can you add my answer too , I want see its order , cause documention dosent say</span>
<span class="comment-copy">@Arman: Adding; Meanwhile, please do take a look at the code. Don't want any bugs in the testing code!</span>
<span class="comment-copy">I tested it now , its correct</span>
<span class="comment-copy">@Arman: Please see edit.</span>
<span class="comment-copy">Thanks dude , but lower slope means more worse timing?</span>
<span class="comment-copy">Finding the index can be done in O(logn) each time, but the insertion will then take O(n) so the total is O(n^2).</span>
<span class="comment-copy">@interjay see my edited answer</span>
<span class="comment-copy">@Arman it is still O(n^2) .</span>
<span class="comment-copy">Why do you do both extend and l1 + l2? You're adding elements of l2 twice.</span>
<span class="comment-copy">@JayanthKoushik , You are Right, I removed line extend</span>
