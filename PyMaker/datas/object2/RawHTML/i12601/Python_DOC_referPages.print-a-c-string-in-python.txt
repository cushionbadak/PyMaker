<div class="post-text" itemprop="text">
<p>I want to print a C string using the Python <code>print</code> statement. The array <code>vendorName</code> contains the ASCIIZ C string <code>A ANTHONY &amp; SONS INC</code>. My motivation is to convert the C string to a Python string such that I can use all of the Python string methods. </p>
<p>I have a struct:</p>
<pre><code>class _vendrRecord(Structure):
    _pack_ = 1                                            # pack the struct
    _fields_ = [
        ("vendorName"            ,c_ubyte *(40 + 1)),
        ("ytdPayments"           ,c_ulong),
        ]
</code></pre>
<p>I want to print the string "vendorName" which is ASCIIZ. </p>
<p>I can print it using printf like this:</p>
<pre><code>printf(b"%s\n", vendrRecord.vendorName)
</code></pre>
<p>I have tried this <code>print(vendrRecord.vendorName)</code> but it just prints the address. Based on information from Jamie Nicholl-Shelley, I tried <code>print(cast(vendrRecord.vendorName,c_char_p).value)</code> but that gives <code>b'A ANTHONY &amp; SONS INC'</code>. I want simply <code>A ANTHONY &amp; SONS INC</code> </p>
<p>Note that <code>print(vendrRecord.ytdPayments)</code> prints correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you've figured out most of it and are just confused about string encoding.  You've managed to get to a <code>bytes</code> object:</p>
<pre><code>&gt;&gt;&gt; v.vendorName
&lt;__main__.c_ubyte_Array_41 object at 0xb0994a04&gt;
&gt;&gt;&gt; cast(v.vendorName, c_char_p)
c_char_p(176882328)
&gt;&gt;&gt; cast(v.vendorName, c_char_p).value
b'A ANTHONY &amp; SONS INC'
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#bytes" rel="nofollow">bytes</a> object is what it sounds like, just a sequence of bytes -- it's only as a convenience for the user that it's shown in a stringlike way.  Unlike a string, each component is an integer:</p>
<pre><code>&gt;&gt;&gt; cast(v.vendorName, c_char_p).value[7]
78
</code></pre>
<p>But since we know that we're using ascii, we can <em>decode</em> this bytes object into a Python string, and then use all of the usual methods on it:</p>
<pre><code>&gt;&gt;&gt; s = cast(v.vendorName, c_char_p).value.decode("ascii")
&gt;&gt;&gt; s
'A ANTHONY &amp; SONS INC'
&gt;&gt;&gt; type(s)
&lt;class 'str'&gt;
&gt;&gt;&gt; s.lower()
'a anthony &amp; sons inc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are printing the address as that is what you have asked the code to do.
You have told it that it is a string type, but not declared it as a string in the function, instead use a pointer to the data at the address</p>
<p>Compared to print(), which figures this out for you as it a c++ based function</p>
</div>
<span class="comment-copy">Can't you access the string with <code>vendrRecord.vendorName.content</code>? I'm not so much into ctypes though.</span>
<span class="comment-copy"><code>vendrRecord.vendorName.content</code> gives <code>AttributeError: 'c_ubyte_Array_41' object has no attribute 'content'</code></span>
<span class="comment-copy">Perfect! This does exactly what I want. It is interesting that your Python prints s.lower() with quotes but mine does not. I'm using the latest 32 bit version.</span>
<span class="comment-copy">@Eddy: I didn't <i>print</i> anything.  Since I was working at the console, it showed me the <i>repr</i>.  If I'd done <code>print(s.lower())</code>, there would have been no quotes.</span>
<span class="comment-copy">That information got me closer but still not all the way. <code>print(cast(vendrRecord.vendorName,c_char_p))</code> gives <code>c_char_p(b'A ANTHONY &amp; SONS INC')</code>. How do I dereference it such that it is now a Python string? So I tried <code>print(cast(vendrRecord.vendorName,c_char_p).value)</code> but that gives <code>b'A ANTHONY &amp; SONS INC'</code> (note the <code>b</code>).</span>
<span class="comment-copy">Sorry I don't do much Python now days. I imagine it's an output type identifier that's used to link with the python compiler.</span>
