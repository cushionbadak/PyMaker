<div class="post-text" itemprop="text">
<p>This is mostly syntactic sugar but I'd like to access the items of a dictionary as object properties.</p>
<p>Example:</p>
<pre><code>class CoolThing():
  def __init__(self):
    self.CoolDict = {'a': 1, 'b': 2}
</code></pre>
<p>and I'd like to have</p>
<pre><code>my_cool_thing.a # =&gt; 1
my_cool_thing.b # =&gt; 2
</code></pre>
<p><strong>Edit: some code of a potential solution with a nested structure with dot notation: device.property.field</strong></p>
<pre><code>class Parameters():

    def __init__(self, ids, devices):
        self._ids = ids
        self._devices = devices
        for p in self._devices:
            p = p[0]
            if self.__dict__.get(p.device) is None:
                self.__dict__[p.device] = SmartDict()
            else:
                if self.__dict__[p.device].get(p.property) is None:
                    self.__dict__[p.device][p.property] = SmartDict()
                else:
                    if self.__dict__[p.device][p.property].get(p.field) is None:
                        self.__dict__[p.device][p.property][p.field] = ParameterData(p)

class SmartDict():
    def __init__(self):
        self.__dict__ = {}

    def __getitem__(self, k):
        return self.__dict__[k]

    def __setitem__(self, k, v):
        self.__dict__[k] = v

    def get(self, k):
        return self.__dict__.get(k)

    def __len__(self):
        return len(self.__dict__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow"><code>__getattr__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__setattr__" rel="nofollow"><code>__setattr__</code></a>, though you'll have to roll your own class (I'm not aware of any builtins, though <code>namedtuple</code> might work if you don't need to change values much)</p>
<pre><code>class AttrDict(dict):
    def __getattr__(self, attr):
        return self[attr]

    def __setattr__(self, attr, value):
        self[attr] = value
</code></pre>
<p>If you just want to access a sub-dictionary that way, you just change <code>self</code> to <code>self.cool_dict</code></p>
<pre><code>class CoolThing:
   def __init__(self):
      self.cool_dict = {'a': 1, 'b': 2}

   def __getattr__(self, attr):
      return self.cool_dict[attr] 

   def __setattr__(self, attr, value):
      # Note, you'll have to do this for anything that you want to set
      # in __init__. 
      if attr == 'cool_dict':
          super().__setattr__(attr, value)
      else:
          self.cool_dict[attr] = value
</code></pre>
<p>Note that <code>__getattr__</code> is used <em>after</em> any other lookups fail, but if you want to ensure that your function is called first, you can use <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow"><code>__getattribute__</code></a></p>
<p>Also note that <code>self.cool_dict</code> does <em>not</em> exist on <code>CoolThing</code> until after <code>__init__</code> is called. My initial version of this would throw a maximum recursion depth exceeded, because as you created the class it would go to set <code>self.cool_dict</code> in init, call <code>__setattr__</code>, which would try to get <code>self.cool_dict</code> so it could set <code>[attr] = value</code> on it. Naturally it can't find <code>cool_dict</code> yet, and so it will try to call <code>__getattr__</code> again... which can't find <code>cool_dict</code> and round and round it goes.</p>
<p>Another option would be to use a class-level variable instead, but that's probably not at all what you want :)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>CoolDict</code> already exists, it's named <code>__dict__</code>:</p>
<pre><code>&gt;&gt;&gt; class CoolThing(object):
...     def __init__(self):
...         self.__dict__['a'] = 1
...         self.__dict__['b'] = 2
... 
&gt;&gt;&gt; thing = CoolThing()
&gt;&gt;&gt; thing.a
1
&gt;&gt;&gt; thing.b
2
&gt;&gt;&gt; thing.c = 3
&gt;&gt;&gt; thing.__dict__
{'a': 1, 'b': 2, 'c': 3}
</code></pre>
</div>
<span class="comment-copy">Look into <a href="https://docs.python.org/2/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a>.</span>
<span class="comment-copy">Thanks, <code>__getattr__</code> and <code>__dict__</code> are the things I was looking for. How does it interact with <code>@property</code>? While lookup for an attribute, <code>@property</code> goes before <code>__getattr__</code>?</span>
<span class="comment-copy">@CedricH. I've expanded my answer to include that information.</span>
<span class="comment-copy">@AndreaCorbellini A property will be looked up before the instance <code>__dict__</code>. <code>__getattr__</code> is only used as a last resort when every  thing else has failed (property or other descriptor, instance dict, class and parents dicts).</span>
<span class="comment-copy">@brunodesthuilliers: right, sorry</span>
<span class="comment-copy"><code>return self.cool_dict[attr] = value</code> gives a syntax error</span>
<span class="comment-copy">Messing with <code>__getattribute__</code> is more often than not a false good idea. First because it can be tricky, but also because it will slow down attributes resolution by a noticeable factor (at least it was quite noticeable last time I benchmarked this solution).</span>
<span class="comment-copy">have you tried your code? The solution does NOT work. Max recursion depth exceeded</span>
<span class="comment-copy">@Pynchia ah, you're right when it comes to the <code>__getattr__</code> - that's because the <code>self.cool_dict</code> part. Trying to find a workaround.</span>
<span class="comment-copy">@Pynchia fixed!</span>
<span class="comment-copy">This will not provide the  <code>mapping</code> API  - except by direct access to the instance <code>__dict__</code> which is definitely not a great idea.</span>
<span class="comment-copy">@brunodesthuilliers: but this is what the OP asked for :)</span>
<span class="comment-copy">"I'd like to access the items of a dictionary as object properties" - this doesn't mean he's willing to give up on the mapping API ;)</span>
<span class="comment-copy">@brunodesthuilliers: my aim was to let the user know about <code>__dict__</code>. I'm sorry but I'm not going to write anything more sophisticated than that</span>
<span class="comment-copy">@brunodesthuilliers I'm not sure I understand what you mean 'mapping API'</span>
