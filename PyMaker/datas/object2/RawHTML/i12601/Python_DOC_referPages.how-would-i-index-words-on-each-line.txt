<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function named lineIndex that takes a file name, fName,
  as a parameter and returns a dictionary, d, that indexes the 
  words in fName by line number, with the first line in fName
  being numbered 0.
  Each word in fName should be a key in the returned dictionary d,
  and the corresponding value should be a list of the line numbers
  on which the word occurs. A line number should occur no more 
  than one time in a given list of line numbers.**</p>
</blockquote>
<p><em>I tried numerous ways but couldn't find a solution.</em> </p>
<p>What I have accomplished, I am not sure how to remove repeating words.</p>
<pre><code>def lineindex(fname):
    ifile=open(fname, 'rt')
    readfile = ifile.readlines()

    d = {}
    fst=[]
    for line in readfile:
        #print(readfile[0][0])
        #print(readfile.index(line))
        #print(line)
        split=line.split()
           for word in split:
           if word not in d:
               d[word] = line.index(word)
           else:

    return d
</code></pre>
<p><strong>Sample input</strong></p>
<pre><code>I have no pride
I have no shame
You gotta make it rain
Make it rain rain rain
</code></pre>
<p><strong>Correct output</strong></p>
<pre><code>{'rain': [2, 3], 'gotta': [2], 'make': [2], 'it': [2, 3], 'shame': [1], 'I': [0,1], 'You': [2], 'have': [0, 1], 'no': [0,1], 'Make': [3], 'pride': [0]}
</code></pre>
<p><strong>Edit 2:</strong></p>
<pre><code>def lineindex(fname):
    ifile=open(fname, 'rt')
    readfile = ifile.readlines()
    d = {}
    for line in readfile:
        #print(line, readfile.index(line))
        words=line.split()
        for word in words:
            #print(word, readfile.index(line))
            if word not in d:
                d[word] = readfile.index(line)
            else:

return d  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're close - what you need to utilise is a <code>set</code> - it can only contain one unique element per key - so that'll handle the repeating words for you. You also missed out line numbers from your code, so look at <code>enumerate</code> for that. Then you can look at <code>collections.defaultdict</code> which does the creation of a default value for keys that are not existent for you.</p>
<pre><code>from collections import defaultdict

def lineindex(fname):
    dd = defaultdict(list)
    with open(fname) as fin:
        for lineno, line in enumerate(fin):
            for word in set(line.split()):
                dd[word].append(lineno)
    return dd
</code></pre>
<p>Purely using builtins, then:</p>
<pre><code>def lineindex(fname):
    dd = {}
    with open(fname) as fin:
        for lineno, line in enumerate(fin):
            for word in set(line.split()):
                dd.setdefault(word, []).append(lineno)
    return dd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A version without imports:</p>
<pre><code>def lineindex(fname):
    d = {}
    with open(fname) as fobj:
        for lineno, line in enumerate(fobj):
            for word in set(line.split()):
                d.setdefault(word, []).append(lineno)
    return d

&gt;&gt;&gt; lineindex('sample.txt') == out
True
</code></pre>
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=setdefault#dict.setdefault" rel="nofollow">setdefault</a> method of dictionaries. It looks for the key and returns the value if the key is there. If it cannot find the key it it returns  a new list that can appended to immediately. </p>
</div>
<span class="comment-copy">What were your efforts? What problems have you encountered? What concrete questions do you have?</span>
<span class="comment-copy">Break the problem down into smaller parts and solve one part at a time.  First, write a program that reads the file and prints out each line on the screen. Then, change the program so that it prints out each <i>word</i> on a separate line, along with the line number in the original file on which it was found.  Then change the program so that instead of printing out the words it stores them in a Python dictionary.  Finally, change the program so that in addition to the words, it remembers the lines on which they were found.  Get as far as you can, and when you're stuck, post what you have so far.</span>
<span class="comment-copy">If you can fix your newly introduced code block formatting (thanks for that!) it'd also be very helpful if you could provide sample input/output</span>
<span class="comment-copy">"A line number should occur no more than one time in a given list of line numbers" - so the items of the dict should be sets, not lists.</span>
<span class="comment-copy">@EugenePrimako I took <i>the corresponding value should be a list of the line numbers on which the word occurs.</i> to mean that if a word occurs more than once on a line - the line number shouldn't appear more than once for that word (eg: given a single line file containing "blah blah blah" - the list associated with the key "blah" shouldn't be <code>[1]</code> rather than <code>[1, 1, 1]</code> - hence the use of <code>set</code> to dedupe the words per line)</span>
<span class="comment-copy">I can't use modules, it all has to be done without importing anything</span>
<span class="comment-copy">@KamranRaza then put that in your question!?</span>
<span class="comment-copy">@JonClements I am sorry</span>
