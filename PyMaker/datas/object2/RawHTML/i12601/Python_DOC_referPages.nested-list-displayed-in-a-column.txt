<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9989334/create-nice-column-output-in-python">Create nice column output in python</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to display a nested list as a column. So the data that I'm working with is:</p>
<pre><code>tableData = [['apples', 'oranges', 'cherries', 'banana'], ['Alice', 'Bob', 'Carol', 'David'], ['dogs', 'cats', 'moose', 'goose']]
</code></pre>
<p>which I want to display as</p>
<pre><code>  apples Alice  dogs
 oranges   Bob  cats
cherries Carol moose
  banana David goose
</code></pre>
<p>so that the entries are right aligned. I've had a look at <a href="https://stackoverflow.com/questions/9989334/create-nice-column-output-in-python">Create nice column output in python</a> but I'm not able to implement it for a similar outcome. The code that I have so far is:</p>
<pre><code>tableData = [['apples', 'oranges', 'cherries', 'banana'], ['Alice', 'Bob', 'Carol', 'David'], ['dogs', 'cats', 'moose', 'goose']]

total_len= [[] for x in range(len(tableData))]
longest_string = []

for y1 in range(0, len(tableData)):
    for y2 in range(0, len(tableData[y1])):       
        total_len[y1].append(len(tableData[y1][y2]))

for y1 in range(0, len(total_len)):    
    longest_string.append(max(total_len[y1]))

for y1 in range(len(tableData)):
    for y2 in range(len(tableData[y1])):
        print("".join(tableData[y1][y2].rjust(longest_string[y1])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar formatting without 3rd party pandas:</p>
<pre><code>tableData = [['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]

# Find the max length of the word in each row
lens = [max(len(col) for col in row) for row in tableData]

# zip(*list) transposes a list...rows become columns
for row in zip(*tableData):
    # Pass the column widths dynamically.
    print('{:&gt;{lens[0]}} {:&gt;{lens[1]}} {:&gt;{lens[2]}}'.format(*row,lens=lens))
</code></pre>
<p>Output:</p>
<pre><code>  apples Alice  dogs
 oranges   Bob  cats
cherries Carol moose
  banana David goose
</code></pre>
<p><strong>EDIT</strong></p>
<p>Here's a version that can dynamically display any number of rows and columns:</p>
<pre><code>tableData = [['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]

# Find the max length of the word in each row
lens = [max(len(col) for col in row) for row in tableData]

# build a format string with an entry for each column
rowfmt = '{:&gt;{}} ' * len(tableData)

# zip(*list) transposes a list...rows become columns
for row in zip(*tableData):
    # Pass the values and column widths dynamically.
    # The zip pairs up each datum with its column width, but in tuples.
    # For example, [data1,data2],[width1,width2] -&gt; [(data1,width1),(data2,width2)]
    # itertools.chain flattens the list of tuples.
    # For example, above becomes [data1,width1,data2,width2]
    print(rowfmt.format(*itertools.chain(*zip(row,lens))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> and the <a href="https://stackoverflow.com/a/9996049/771848">solution</a> from the linked thread:</p>
<pre><code>&gt;&gt;&gt; for row in zip(*tableData):
...     print("{: &gt;10} {: &gt;10} {: &gt;10}".format(*row))
... 
    apples      Alice       dogs
   oranges        Bob       cats
  cherries      Carol      moose
    banana      David      goose
</code></pre>
<p>Though I really like the <a href="https://stackoverflow.com/a/34524197/771848">"pandas" dataframe based solution</a> more.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know do you have a <a href="http://pandas.pydata.org/" rel="nofollow"><code>pandas</code></a> but if you do it's pretty easy to that. You could create dataframe and then use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_string.html" rel="nofollow"><code>to_string</code></a> method:</p>
<pre><code>import pandas as pd
tableData = [['apples', 'oranges', 'cherries', 'banana'], ['Alice', 'Bob', 'Carol', 'David'], ['dogs', 'cats', 'moose', 'goose']]
df = pd.DataFrame(tableData).T

In [224]: df
Out[224]: 
          0      1      2
0    apples  Alice   dogs
1   oranges    Bob   cats
2  cherries  Carol  moose
3    banana  David  goose

result = df.to_string(index=False, header=False)

In [228]: print(result)
   apples  Alice   dogs
  oranges    Bob   cats
 cherries  Carol  moose
   banana  David  goose
</code></pre>
</div>
<span class="comment-copy">I figured that your in your for loop the print statement has 3 entries of the form {:&gt;{lens[i]}} because there are 3 sublists in table data which is specific to this example. Would it be possible to have some sort of function that can take any list containing any number of sublists and display it in the same fashion?</span>
<span class="comment-copy">@user49231, yes with some more work and more complicated code.  I'll add a more flexible example.</span>
