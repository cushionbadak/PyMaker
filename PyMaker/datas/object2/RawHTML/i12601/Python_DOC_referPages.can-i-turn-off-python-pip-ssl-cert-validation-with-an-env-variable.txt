<div class="post-text" itemprop="text">
<p>I have a really bad network that uses a MITM cert to snoop on everyone's convos. This means I need to turn it off, for example, in node I use <code>export NODE_TLS_REJECT_UNAUTHORIZED="0"</code>.</p>
<p>Is there a similar way to do this in Python to get around this issue?</p>
<hr/>
<p>Pretend I am security deficient (which I am). In my example for node I just configure an environmental variable and be done. This has me using a pem file (which I have no idea where to get). I tried downloading the cert chain but couldn't get it to a pem file. Is there really no more straight forward way to accomplish this? Honestly the way the network is set up I don't think I can even import just one cert.</p>
<hr/>
<p>I tried using this...</p>
<pre><code>pip3 install itsdangerous --proxy=http://proxy.me.com:80 --index-url=http://pypi.python.org/simple/

Getting page http://pypi.python.org/simple/
Could not fetch URL http://pypi.python.org/simple/: timed out
Will skip URL http://pypi.python.org/simple/ when looking for download links for itsdangerous
Cannot fetch index base URL http://pypi.python.org/simple/
</code></pre>
<p>Still confirming that this isn't a red herring thanks to our proxy.</p>
<hr/>
<p>Also I've tried adding <code>HTTP_PROXY</code> and <code>HTTPS_PROXY</code> instead of the command line option. Still get the following result...</p>
<pre><code>  pip3 install itsdangerous --index-url=http://pypi.python.org/simple/
  ...
  Downloading/unpacking itsdangerous
  Getting page http://pypi.python.org/simple/itsdangerous/
  Could not fetch URL http://pypi.python.org/simple/itsdangerous/: connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:600)
  Will skip URL http://pypi.python.org/simple/itsdangerous/ when looking for download links for itsdangerous
  Getting page http://pypi.python.org/simple/
  Could not fetch URL http://pypi.python.org/simple/: connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:600)
</code></pre>
<p>Also might be important...</p>
<pre><code>pip 1.5.4 from /usr/lib/python3/dist-packages (python 3.4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have the exact same issue on my network.  I did this to install pillow:</p>
<pre><code>pip install Pillow --trusted-host pypi.python.org --index-url=http://pypi.python.org/simple/
</code></pre>
<p>...and it worked great for me.  Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>When I need to ignore the certificate validation chains I have used the following code:</p>
<pre><code>import ssl

        try:
            _create_verified_https_context = ssl._create_default_https_context
            _create_unverified_https_context = ssl._create_unverified_context
        except AttributeError:
            pass
        else:
            # Handle target environment that doesn't support HTTPS verification. Save
            # a reference to the previous method so it is still available if needed.
            ssl._create_default_https_context = _create_unverified_https_context
            if not hasattr(ssl, '_create_verified_https_context'):
                ssl._create_verified_https_context = _create_verified_https_context
</code></pre>
<p>The above code will tell your SSL instance in your python to ignore unverified errors.  You can also modify your SSL.py file directly to change the behavior.  </p>
<p>You may want to also take a look at: <a href="https://docs.python.org/3/library/ssl.html#ssl.SSLContext" rel="nofollow">https://docs.python.org/3/library/ssl.html#ssl.SSLContext</a></p>
</div>
<span class="comment-copy">A variety of options to either bypass SSL verification or work around this are in <a href="http://stackoverflow.com/questions/25981703/pip-install-fails-with-connection-error-ssl-certificate-verify-failed-certi">the answers to this question</a>.</span>
<span class="comment-copy">Pretend I am security deficient (which I am). In my example for node I just configure an environmental variable and be done. This has me using a pem file (which I have no idea where to get). I tried downloading the cert chain but couldn't get it to a pem file. Is there really no more straight forward way to accomplish this? Honestly the way the network is set up I don't think I can even import just one cert</span>
<span class="comment-copy">Do you need to go through the proxy? <code>--proxy</code> may not work for you, so you have to set the environment variables <code>http_proxy</code> and <code>https_proxy</code> like <code>export http_proxy=http://proxy.me.com:80</code> and <code>export https_proxy=http://proxy.me.com:80</code> and run <code>pip</code> again.</span>
<span class="comment-copy">tried adding those env variables same outcome</span>
<span class="comment-copy">using <code>--index-url=https://pypi.python.org/simple/</code> worked for me.  I'm working on a corporate proxy server.</span>
<span class="comment-copy">it doesn't work for me anymore..</span>
<span class="comment-copy">Are you serious where the heck am I even supposed to put this, this is way more complex than what I am looking for sorry man. Hence the environmental variable requirement</span>
