<div class="post-text" itemprop="text">
<p>I have a string of poker hands that looks like this: </p>
<p>AA:1,KK:1,AK:1,AQ:0.5,AJs:1,ATs:1,...</p>
<p>The number after the hand represents the weight from 0-100%. I then convert this into a dictionary that I can read the weight of the hand. The problem is the data I get lumps AKs and AKo into just AK if both hands are at the same weight. So I need some way to turn AK:1 into AKs:1 and AKo:1 and get rid of the AK:1</p>
<p>right now I have code that just deals with the hands and not the weights:</p>
<pre><code>def parse_preflop_hand(hand):
if len(hand) &lt; 3 and hand[0] != hand[1]:  #this avoids pairs like AA and hands like AKs
    new_hand = hand + 's' + ', ' + hand + 'o'
else:
    new_hand = hand
return new_hand
</code></pre>
<p>This turns AK into AKs, AKo but when I append it to a list it gets added as one item not two separate items. It also leaves the original hand in the list.</p>
<ol>
<li>How do I split this into two separate items when appending to a list?</li>
<li>Whats most efficient way to get rid of the original hand?</li>
<li>I import the information from a text or csv file, will converting it into a list or dictionary right away make things easier? Any other ideas appreciated.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Are you using Python3? The most minimal change to make that work is probably:</p>
<pre><code>def parse_preflop_hand(hand):
    if len(hand) &lt; 3 and hand[0] != hand[1]:
        parsed_hand = [hand + 's', hand + 'o']
    else:
        parsed_hand = [hand]
    yield from parsed_hand
</code></pre>
<p>Then in your main code you'll do something like:</p>
<pre><code>for parsed_hand in parse_preflop_hand(unparsed_hand):
    ...
</code></pre>
<p>The whole code to me is probably:</p>
<pre><code># note this is different from the minimal change above
def parse_preflop_hand(hand, value):
    if len(hand) &lt; 3 and hand[0] != hand[1]:
        return {hand + 's': value, hand+'o': value}
    else:
        return {hand: value}

final_dict = {}
for token in handstring.split(','):
    for unparsed_hand, value in token.split(":"):
        final_dict.update(parse_preflop_hand(unparsed_hand))
</code></pre>
</div>
<span class="comment-copy">Thanks for the help. Never used "yield from" before. Found more info on it here: <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer">python doc</a> and here: <a href="http://stackoverflow.com/questions/9708902/in-practice-what-are-the-main-uses-for-the-new-yield-from-syntax-in-python-3">yield from uses</a></span>
