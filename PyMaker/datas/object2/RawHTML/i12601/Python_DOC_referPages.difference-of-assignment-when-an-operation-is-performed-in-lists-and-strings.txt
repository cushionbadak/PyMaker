<div class="post-text" itemprop="text">
<p>So I started with Strings &amp; Lists (Basics mostly) and noticed this little thing:</p>
<pre><code>String1 = "    Lot of white space  "
String1 = String1.strip()
print(String1)
</code></pre>
<p>Works like a charm.</p>
<p>When I try the same thing (different operation) on a LIST. Things go south: </p>
<pre><code>list1 = [1,5,8,4,2]
list1 = list1.sort()
print(list1)
</code></pre>
<p>Output - NONE</p>
<p>However:</p>
<pre><code>list1.sort()
print(list1)
</code></pre>
<p>Gives the required output.</p>
<p><strong>Why is it so?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/stdtypes.html?highlight=list.sort#list.sort" rel="nofollow">Python Docs</a>:</p>
<blockquote>
<p><strong>sort(*, key=None, reverse=None)</strong> This method <strong>sorts the list in place</strong>,
  using only &lt; comparisons between items. Exceptions are not suppressed
  - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state).</p>
<p>sort() accepts two arguments that can only be passed by keyword
  (keyword-only arguments):
  ...
  <strong>This method modifies the sequence in place</strong> for economy of space when
  sorting a large sequence. To remind users that it operates by side
  effect, it does not return the sorted sequence (use sorted() to
  explicitly request a new sorted list instance).</p>
</blockquote>
<p>That means, <code>list1.sort()</code> will sort the element of <code>list1</code> in place without creating any new object or list only returning <code>None</code>.</p>
<pre><code>&gt;&gt;&gt; list1 = [1,5,8,4,2]
&gt;&gt;&gt; is_None = list1.sort()
&gt;&gt;&gt; is_None is None
True
</code></pre>
<p>Contrary to <code>list1.sort()</code>, <a href="https://docs.python.org/3/library/functions.html?highlight=sorted#sorted" rel="nofollow"><code>sorted()</code></a> (built-in method) instead returns a new sorted list of <code>list1</code>:</p>
<blockquote>
<p><code>sorted(iterable[, key][, reverse])</code> <strong>Return a new sorted</strong> list from the
  items in iterable.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; list_sorted = sorted(list1)
&gt;&gt;&gt; list_sorted
[1, 2, 4, 5, 8]
&gt;&gt;&gt; type(list_sorted)
&lt;type 'list'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sort()</code> sorts a list <strong>in place</strong> but returns <code>None</code>. The first snippet prints the return value of <code>sort()</code>. The second prints the sorted list itself.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> is an in-place method. It <em>modifies</em> the list, rather than returning a new list. Its return value is <code>None</code>, so <code>anything = some_list.sort()</code> sets <code>anything</code> to <code>None</code>.</p>
<p>From the docs:</p>
<blockquote>
<p>This method modifies the sequence in place for economy of space when sorting a large sequence. To remind users that it operates by side effect, it does not return the sorted sequence (use <code>sorted()</code> to explicitly request a new sorted list instance).</p>
</blockquote>
<p>If you prefer that syntax (which is perfectly fine), use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted(...)</code></a> instead of <code>list.sort</code></p>
<pre><code>list1 = [1,5,8,4,2]
list1 = sorted(list1)
</code></pre>
</div>
<span class="comment-copy">It is convention in Python to have mutating methods <code>return None</code> rather than <code>return self</code> because it avoids the tendency to chain together a bunch of side-effect inducing code (which can dramatically reduce readability).</span>
<span class="comment-copy"><code>list.sort()</code> doesn't return value(actually every function in Python returns a value and if not specified with return - it's <code>None</code>), while <code>str.split()</code> return new string instance. In Python strings are immutable - i.e. their internal structure can not be changed. List on the other hand are mutable - you can easily change their elements(<code>a[1] = 1</code>) without creating new list instances.</span>
