<div class="post-text" itemprop="text">
<p>I have an array:</p>
<pre><code>a = np.array([2,3,5,8,3,5])
</code></pre>
<p>What is the most efficient (vectorized) way to calculate an array where each resulting element is (Pseudocode):</p>
<pre><code>result[0] = a[0]
for i &gt; 0:
    result[i] = result[i-1] + (a[i] - result[i-1]) * factor
</code></pre>
<p>I could do this with the following inefficient code (factor = 0.5):</p>
<pre><code>a = np.array([2,3,5,8,3,5])
result = np.array([a[0]])
for k in a[1:]:
   result = np.append(result, result[-1]+(k-result[-1])*0.5)
</code></pre>
<p>The result of this damping function would be:</p>
<pre><code>array([ 2.,  2.5,  3.75,  5.875,  4.4375,  4.71875])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You a looking for Haskell's <a href="http://hackage.haskell.org/package/base-4.8.1.0/docs/Prelude.html#v:scanl1" rel="nofollow noreferrer"><code>scanl1</code></a> alternative in Python (Haskell example):</p>
<pre><code>Prelude&gt; scanl1 (\a  b -&gt; a + (b - a) * 0.5) [2, 3, 5, 8, 3, 5]
[2.0,2.5,3.75,5.875,4.4375,4.71875]
</code></pre>
<p>There is an <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>accumulate</code></a> function in <code>itertools</code> module:</p>
<pre><code>In [1]: import itertools

In [2]: itertools.accumulate([2, 3, 5, 8, 3, 5], lambda a, b: a + (b - a) * 0.5)
Out[2]: &lt;itertools.accumulate at 0x7f1fc1fc1608&gt;

In [3]: list(itertools.accumulate([2, 3, 5, 8, 3, 5], lambda a, b: a + (b - a) * 0.5))
Out[3]: [2, 2.5, 3.75, 5.875, 4.4375, 4.71875]
</code></pre>
<p>With NumPy you may use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.accumulate.html" rel="nofollow noreferrer"><code>numpy.ufunc.accumulate</code></a> function, however, according to <a href="https://stackoverflow.com/a/27912352/1532460">this answer</a>, there is a bug in the implementation, that is why we should use a cast. Unfortunately, I'm not very familiar with NumPy, and, probably, there is a better way:</p>
<pre><code>In [9]: import numpy as np

In [10]: uf = np.frompyfunc(lambda a, b: a + (b - a) * 0.5, 2, 1)

In [11]: uf.accumulate([2,3,5,8,3,5], dtype=np.object).astype(np.float)
Out[11]: array([ 2.     ,  2.5    ,  3.75   ,  5.875  ,  4.4375 ,  4.71875])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would like to post how the @soon code works, or how to implement it with <code>reduce</code>:</p>
<pre><code>def scanl(f, v):
    return reduce(lambda (l, v1), v:(l+[f(v1, v)], f(v1, v)), v[1:],  ([v[0]], v[0]))[0]

&gt;&gt;&gt; scanl(lambda a, b: a + (b - a) * 0.5,[2, 3, 5, 8, 3, 5])
[2, 2.5, 3.75, 5.875, 4.4375, 4.71875]
</code></pre>
<p>Its not the best performance nor the cutier one but gives you an idea of how to do it.</p>
</div>
<span class="comment-copy">Not every recurrence relation can be vectorized.  Whether yours can is really more of a math question than a programming question (i.e., can you convert the recurrence relation into an explicit formula for <code>f(n)</code>).</span>
<span class="comment-copy">Theoretically, this is O(n) and you can't do better than that, if the requirement is to calculate all of the n values.</span>
<span class="comment-copy">luv this answer</span>
