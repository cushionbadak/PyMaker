<div class="post-text" itemprop="text">
<p>Why would one use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress"><code>contextlib.suppress</code></a> to suppress an exception, instead of <code>try</code>/<code>except</code> with a <code>pass</code>?</p>
<p>There is no difference in the amount of characters between these two methods (if anything, <code>suppress</code> has more characters), and even though code is often counted in LOC instead of characters, <code>suppress</code> also seems to be much slower than <code>try</code>/<code>except</code> in both cases, when an error is raised and when it's not:</p>
<pre><code>Python 3.5.0 (v3.5.0:374f501f4567, Sep 13 2015, 02:27:37) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; # With an error
&gt;&gt;&gt; timeit("""with suppress(ValueError):
    x = int('a')""", setup="from contextlib import suppress")
1.9571568971892543
&gt;&gt;&gt; timeit("""try:
    x = int('a')
except ValueError:
    pass""")
1.0758466499161656
&gt;&gt;&gt; # With no error
&gt;&gt;&gt; timeit("""with suppress(ValueError):
    x = int(3)""", setup="from contextlib import suppress")
0.7513525708063895
&gt;&gt;&gt; timeit("""try:
    x = int(3)
except ValueError:
    pass""")
0.10141028937128027
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is two lines less code without sacrificing readability.</p>
<p>It might be especially convenient for nested or consecutive code blocks. Compare:</p>
<pre><code>try:
    a()
    try:
        b()
    except B:
        pass
except A:
    pass
</code></pre>
<p>vs.:</p>
<pre><code>with suppress(A):
    a()
    with suppress(B):
        b()
</code></pre>
<p>It also allows to express the intent: </p>
<ul>
<li><code>with suppress(SpecificError): do_something()</code> says <em>don't propagate the error if it is raised while doing something</em></li>
<li><code>try: do_something() except SpecificError: pass</code> says <em>do something and don't propagate the error if it is raised</em></li>
</ul>
<p>It is less important because most people won't notice the difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>Conceptually, for me, the contextlib.suppress approach allows me to handle errors that are likely to occur (such as attempting to remove a file that may not actually be there). try/except then becomes a more active handling of 'this should not happen' events (such as a divide by 0 or inability to open a few to which I want to write). </p>
</div>
<span class="comment-copy">It saves two lines. It improves readability a lot if you have several consecutive blocks like this</span>
<span class="comment-copy">Similarly, why use <code>any()</code> or <code>all()</code> when you can use a for loop? I think using <code>contextlib.suppress</code> helps with readability and maintenance.</span>
<span class="comment-copy">@SimeonVisser <code>any()</code> and <code>all()</code> <i>clearly</i> make the code shorter, both line wise and character wise. I'm also pretty sure <code>any()</code> and <code>all()</code> are performance wise faster than a <code>for</code> loop. As far as I can see, the only reason to use <code>suppress</code> is that it's a bit more readable (and evne this is debatable as it takes more characters). Using <code>try/except</code> is <i>much</i> faster on the other hand.</span>
<span class="comment-copy">That's true. Perhaps it has to do with taking a functional programming (i.e., passing <code>contextlib.suppress</code> around to conditionally suppress exceptions in some situations but not others)?</span>
<span class="comment-copy"><a href="http://bugs.python.org/issue15806" rel="nofollow noreferrer">relevant Python issue</a></span>
