<div class="post-text" itemprop="text">
<p>I'm just learning Python but have about 16 years experience with PERL and PHP. </p>
<p>I'm trying to get the output of ngrep and write it to a log file using Python while also tailing the log file. I've seen some examples online but some seem old and outdated and others use shell=True which is discouraged.</p>
<p>In perl I just use something similar to the following</p>
<pre><code>#!/usr/bin/perl
open(NGFH,"ngrep -iW byline $filter");
while ($line = &lt;NGFH&gt;) {
    open(LOG,"&gt;&gt; /path/to/file.log")
    // highlighting, filtering, other sub routine calls
    print LOG $line
}
</code></pre>
<p>I've gotten tail to work but ngrep doesn't. I'd like to be able to run this infinately and output the stream from ngrep to the log file after filtering. I couldn't get the output from ngrep to show in stdout so that's as far as I've gotten. I was expecting to be able to see the data file tail as the log file was updated and see the output from ngrep. For now i was just using bash to run the following. </p>
<pre><code>echo "." &gt;&gt; /path/to/ngrep.log
</code></pre>
<p>Thanks!</p>
<p>Here's what I got so far...</p>
<p><strong>Updated</strong> 
This seems to work now. I wouldn't know how to improve on it though. </p>
<pre><code>import subprocess
import select
import re

log = open('/path/to/ngrep.log','a+',0)
print log.name

n = subprocess.Popen(['ngrep', '-iW', 'byline'],\
    stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
p = select.poll()
p.register(n.stdout)

f = subprocess.Popen(['tail','-F','-n','0','/path/to/tailme.log'],\
    stdout=subprocess.PIPE,stderr=subprocess.PIPE)
p2 = select.poll()
p2.register(f.stdout)

def srtrepl(match):
    if match.group(0) == 'x.x.x.x':
        # do something
    if match.group(0) == 'x.x.y.y':
        # do something else

    return '\033[92m'+ match.group(0) + '\033[0m'

while True:
    if p.poll(1):
        line = n.stdout.readline()
        s = re.compile(r'(8.8.(4.4|8.8)|192.168.[0-9]{1,3}.[0-9]{1,3})' )
        print s.sub( srtrepl, line )
        log.write(n.stdout.readline())

    if p2.poll(1):
        print f.stdout.readline().rstrip('\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To emulate your perl code in Python:</p>
<pre><code>#!/usr/bin/env python3
from subprocess import Popen, PIPE

with Popen("ngrep -iW byline".split() + [filter_], stdout=PIPE) as process, \
     open('/path/to/file.log', 'ab') as log_file:
    for line in process.stdout: # read b'\n'-separated lines
        # highlighting, filtering, other function calls
        log_file.write(line)
</code></pre>
<p>It starts <code>ngrep</code> process passing <code>filter_</code> variable and appends the output to the log file while allowing you to modify it in Python. See <a href="https://stackoverflow.com/a/17698359/4279">Python: read streaming input from subprocess.communicate()</a> (there could be buffering issues: check whether <code>ngrep</code> supports <code>--line-buffered</code> option like <code>grep</code> and if you want to tail <code>file.log</code> then <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">pass <code>buffering=1</code> to <code>open()</code>, to enable line-buffering (only usable in the text-mode)</a> or call <code>log_file.flush()</code> after <code>log_file.write(line)</code>).</p>
<p>You could emulate <code>ngrep</code> in pure Python too.</p>
<hr/>
<p>If you want to read output from several processes concurrently (<code>ngrep</code>, <code>tail</code> in your case) then you need to able to <a href="https://stackoverflow.com/q/375427/4279">read pipes without blocking e.g., using threads, async.io</a>.</p>
</div>
<span class="comment-copy">Why would you need tail and ngrep? You could use "pure" Python code in here.</span>
<span class="comment-copy">@Kay Convenience, familiarity with the tools, and use of well-tested &amp; comprehensive tools. Normally, you'd connect these tools with a (ba/z/c)sh script. Perl can do this very well, and provide easier means of handling data in between those tools. Python is not optimal for acting like a shell script.</span>
<span class="comment-copy">Depending on your goals (e.g., using Python as a shell script), you might find <a href="http://amoffat.github.io/sh/index.html" rel="nofollow noreferrer">sh.py</a> useful, or <a href="https://plumbum.readthedocs.org/en/latest/" rel="nofollow noreferrer">plumbum</a>. Both are externals modules, but easy to install.</span>
<span class="comment-copy">Do you want to interleave log and grep output or is it okay to print one then the other?</span>
<span class="comment-copy">@Kay but <code>ngrep</code> is a different beast - <i>"ngrep is a pcap-aware tool that will allow you to specify extended regular expressions to match against data payloads of packets"</i></span>
