<div class="post-text" itemprop="text">
<p>I want to check if an array in Python contains incrementing elements, incremented by one each and starting with 0. So, e.g. <code>[0, 1, 2, 3]</code> should return "valid", whereas e.g. <code>[0, 1, 3, 4]</code> or <code>[-1, 0, 1]</code> should return "not valid". </p>
<p>Is there an easy way to achieve that in Python? Maybe an built-in function?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the problem is truly as you describe it, this can be solved trivially using <code>range</code>, like so:</p>
<pre><code>myList = [...]
if myList == list(range(myList[-1] + 1)):
    # Do stuff.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using <a href="https://docs.python.org/3/library/functions.html?highlight=all#all" rel="nofollow"><code>all</code></a> :</p>
<pre><code>&gt;&gt;&gt; l = [0, 1, 2, 3]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l, l[1:]))
True
&gt;&gt;&gt; l1 = [0,1,2,3,5,7]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l1, l1[1:]))
False
&gt;&gt;&gt; l2 = [0,1,2,3,4,7]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l2, l2[1:]))
False
&gt;&gt;&gt; l3=[-1,0,1,2]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l3, l3[1:]))
False
&gt;&gt;&gt; l2 = [0,1,2,3,4,5,7]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l2, l2[1:]))
False
&gt;&gt;&gt; l4=[0,2,3,4,5,7,8]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l4, l4[1:]))
False
&gt;&gt;&gt; l5=[0,2,3,4,5,6,7,8]
&gt;&gt;&gt; not l[0] and all(y-x==1 for x,y in zip(l5, l5[1:]))
False
</code></pre>
<p>So you can put this into a function, this way:</p>
<pre><code>def check_my_list(lst):
    if not lst:
        print 'List Empty'
        return False
    test = not lst[0] and all(y-x==1 for x,y in zip(lst,lst[1:])
    return test
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it can be solved via a one-liner in a functional manner:</p>
<pre><code>print not len(filter(lambda i: i!=-1, [x[i]-x[i+1] for i in range(len(x)-1)]))
</code></pre>
<p>given <code>True</code> for <code>x = [0, 1, 2, 3]</code> and <code>False</code> for <code>x = [0, 1, 3, 4]</code></p>
<p>Explanation:</p>
<pre><code> [x[i]-x[i+1] for i in range(len(x)-1)]
</code></pre>
<p>makes a list of differences between successive elements, obviously we want to have all <code>-1</code>...</p>
<p>Then we use <code>filter</code> to select those elements which are different from <code>-1</code>, if there is at least one, it is not a incrementing elements and so the length of such filtered list &gt; 0</p>
<p>If yes, i.e. there are just <code>-1</code>, the field is empty and we get length of 0.</p>
</div>
<span class="comment-copy">I'm currently just check if there exists a 0 in my array <code>y</code> and assume it to be filled with increasing values. I'm dealing with classification and the values in the array represent class labels. But using something like <code>(y == 0).any()</code> is only ok if the array has the form I'm assuming. But to check it I want to know if there is any function or easy way to do it.</span>
<span class="comment-copy">@KevinJ.Chase which is exactly as the OP stated it should be.</span>
<span class="comment-copy">Wouldn't <code>list(range(len(myList)))</code> work as well?</span>
<span class="comment-copy">@N.Wouda Thank you very much, this solved my problem perfectly! I see that this is actually a trivial question, but I'm a Python beginner and very glad for your solution.</span>
<span class="comment-copy">@PatrickWei√ü just because the solution is simple, does not mean the question is bad! You're welcome :).</span>
<span class="comment-copy">Wrapping in list(...) is only necessary in Python 3. It's a list naturally in Python 2</span>
<span class="comment-copy">Shouldn't <code>[-1, 0, 1, 2]</code> evaluate to <code>False</code>, as per the OP's guidelines?</span>
<span class="comment-copy">@N.Wouda...Right..I didn't notice that requirement to start from 0...</span>
<span class="comment-copy">Love the <code>lambda</code> approach, but shouldn't <code>[-1, 0, 1, 2]</code> evaluate to <code>False</code>, as per the OP's guidelines?</span>
<span class="comment-copy">@n-wouda yes, that's true, I did not see it before, thanks:) so maybe we can add <code>abs()</code> to the expression like that: <code>abs(x[i])-abs(x[i+1])</code></span>
