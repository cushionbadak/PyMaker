<div class="post-text" itemprop="text">
<p>If list stored in csv file below the example, does each row stored in the array?</p>
<pre><code>import csv
import os

DIR = "C:/Users/Administrator/Desktop/key_list.csv"

def Customer_List(csv):
    customer = open(DIR)
    for line in customer:
        row = []
        (row['MEM_ID'],
         row['MEM_SQ'],
         row['X_AUTH_USER'],
         row['X_AUTH_KEY'],
         row['X_STORAGE_URL'])=line.split(",")

        if csv == row['MEM_ID']:
            customer.close()
            return(row)
        else:
            print ("Not search for ID")
            return([])
query = input("Input the your email id: ")
result = Customer_List(query)
</code></pre>
<p>This example alert errors code.. Why ..?
Additionally update the this code &amp; error</p>
<pre><code>Input the your email id: sdfsdf@naver.com
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\PyDev\Pydev\Day4\uCloudStorage.py", line 32, in &lt;module&gt;
    result = Customer_List(query)
  File "C:\Users\Administrator\Desktop\PyDev\Pydev\Day4\uCloudStorage.py", line 20, in Customer_List
    row['X_STORAGE_URL'])=line.split(",")
ValueError: too many values to unpack (expected 5)
</code></pre>
<p>To show what's in the CSV, here's some simple code and the result:</p>
<pre><code>DIR = "C:/Users/Administrator/Desktop/key_list.csv"

def Customer_List():
    customer = open(DIR)
    for line in customer:
        print (line)
</code></pre>
<p>result:</p>
<pre class="lang-none prettyprint-override"><code>MEM_ID, MEM_SQ, X_AUTH_USER, X_AUTH_KEY, X_STORAGE_URL
kimdm98@gmail.com, M100009, M100009:M100009, wreQew3u, AUTH_xxxxxx-xxxxx
minsejisuk@paran.com, M100022, M100022:M100022, PEm6tREx, AUTH_xxxxx-xxxxx
sdfsdf@naver.com, M100034, M100034:M100034, 3tAzEf3u, AUTH_xxxx-xxxxx
</code></pre>
<p>=============================================================================
I edited this script..... Is it best practice ?</p>
<pre><code>DIR = "C:/Users/Administrator/Desktop/key_list.csv"
DATA = csv.reader(open(DIR,"r"))

ID = input("Input the Customer EMAIL ID: ")
def cList(value):
    for row in DATA:
        MEM_ID = row[0]
        MEM_SQ = row[1]
        X_AUTH_USER = row[2]
        X_AUTH_KEY = row[3]
        X_STORAGE_URL = row[4]
        ACCESSKEY = row[5]
        ACCESSKEYID1 = row[6]
        SECRETKEY1 = row[7]
        ACCESSKEYID2 = row[8]
        SECRETKEY2 = row[9]
        if MEM_ID == value:
            print(".EMAIL ID     :" + MEM_ID)
            print(".MID          :" + MEM_SQ)
            print(".PASSWORD     :" + X_AUTH_KEY)
            print(".AUTH_ACCOUNT :" + X_STORAGE_URL)
            print(".API KEY      :" + ACCESSKEY)

cList(ID)
print ("============================")
print ("1. Upload / Download Error")
print ("2. Permission Error")
print ("3. 4xx Error")
print ("4. etc... Error")
print ("============================")
</code></pre>
<p>Result</p>
<pre><code>Input the Customer EMAIL ID: kiyoung.jung@kt.com
.EMAIL ID     :kiyoung.jung@kt.com
.MID          :xxxxxx
.PASSWORD     :xxxxxx
.AUTH_ACCOUNT :xxxxxx-d50a-xxxx-xxxbc05-6267d5ff6712
.API KEY      :xxxxxxxx
============================
1. Upload / Download Error
2. Permission Error
3. 4xx Error
4. etc... Error
============================
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your input data is formatted like what you added at the very end of your question, your could get your approach to work like this:</p>
<pre><code>import csv

DIR = "C:/Users/Administrator/Desktop/key_list.csv"

def Customer_List(email_id):
    with open(DIR, newline='') as f:  # open assuming Python 3.x
        csvreader = csv.reader(f, skipinitialspace=True)
        for fields in csvreader:
            row = {}  # initialize to an empty dictionary
            (row['MEM_ID'],
             row['MEM_SQ'],
             row['X_AUTH_USER'],
             row['X_AUTH_KEY'],
             row['X_STORAGE_URL']) = fields

            if row['MEM_ID'] == email_id:
                return [row['MEM_ID'],
                        row['MEM_SQ'],
                        row['X_AUTH_USER'],
                        row['X_AUTH_KEY'],
                        row['X_STORAGE_URL']]

        else:
            print("ID not found")
            return []

match = Customer_List('minsejisuk@paran.com')
if match:
    print('found! {}'.format(match))
</code></pre>
<p>However you could simplify things slightly by using a <code>csv.DictReader</code> to read the file which will automatically read the header line to obtain the fieldnames and then return a dictionary using them as keys for each row read:</p>
<pre><code>def Customer_List(email_id):
    with open(DIR, newline='') as f:  # open assuming Python 3.x
        csvreader = csv.DictReader(f, skipinitialspace=True)
        for row in csvreader:
            if row['MEM_ID'] == email_id:
                return [row['MEM_ID'],
                        row['MEM_SQ'],
                        row['X_AUTH_USER'],
                        row['X_AUTH_KEY'],
                        row['X_STORAGE_URL']]
        else:
            print("ID not found")
            return []
</code></pre>
</div>
<span class="comment-copy">1. <code>row</code> is a <b>list</b> in your code, it <b>isn't a dict</b>. You can't use list to do this, but I think you can do this use <b>dict</b> as I said. And your file example format seems broken. 2. What's the error you're getting? 3. Here's a module called <a href="https://docs.python.org/3/library/csv.html#csv" rel="nofollow noreferrer"><code>csv</code></a>.</span>
<span class="comment-copy">Post the full error you are getting.</span>
<span class="comment-copy">Okay, updated this question</span>
<span class="comment-copy">Surprise: You split on a comma but there are no commas in the CSV file?</span>
<span class="comment-copy">If this is Py3 (possible, given the parenthesized <code>print</code>s), you'd want to change the <code>open</code> from <code>open(DIR, 'rb')</code> to <code>open(DIR, newline='')</code> (leaving the mode the default <code>'r'</code> so you read/decode <code>str</code>, not <code>bytes</code>, but explicitly disabling line ending conversions, so <code>csv</code> can handle them properly).</span>
<span class="comment-copy">@ShadowRanger: Good point...answer updated.</span>
