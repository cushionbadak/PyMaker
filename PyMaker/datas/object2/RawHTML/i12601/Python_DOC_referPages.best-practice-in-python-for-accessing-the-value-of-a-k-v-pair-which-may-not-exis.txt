<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6130768/return-none-if-dictionary-key-is-not-available">Return None if Dictionary key is not available</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<pre><code>function getParams(data) {
    return {
        id: data &amp;&amp; data.uuid
    }
}
</code></pre>
<p>So the above represents a common pattern in Javascript for accessing the items of an object.</p>
<p>What is the most commonly used equivalent practice in Python for accessing items of a dict?</p>
<p>Would it be like so?</p>
<pre><code>def getParams(data):
    params = {}
    if data is not None and hasattr(data, "id"):
        params["id"] = data["id"]
    return params
</code></pre>
<p>If not, what is the best practice? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get a key from a dict without knowing if it's there, you can use the <a href="https://docs.python.org/2/library/stdtypes.html#dict.get"><code>get</code></a> method of dicts.  It returns None (or a specific default value) if the key isn't there:</p>
<pre><code>&gt;&gt;&gt; x = {}
&gt;&gt;&gt; print(x.get('a'))
None
&gt;&gt;&gt; print(x.get('a', 'default'))
default
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you mean attributes:</p>
<pre><code>params['id'] = data.id if data else None
</code></pre>
<p>If you mean items:</p>
<pre><code>params['id'] = data.get('id')
</code></pre>
<p>In both cases <code>params['id']</code> will contain value or <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>dict</code> is different from <code>javascript</code>.</p>
<pre><code>def getParams(data):
    params = {}
    if data and 'id' in data.keys():
        params["id"] = data["id"]
    return params
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>get</code> method of <code>dict</code>. A default value can also be specified, which could be used if the specified key do not exist.</p>
<pre><code>data.get('id', None)
</code></pre>
</div>
<span class="comment-copy">Do you want to access <i>attributes</i> (<code>data.foo</code>) or <i>items</i> (<code>data['foo']</code>)?  JavaScript uses the same syntax for these, but they are distinct in Python.</span>
<span class="comment-copy">I want to access items, sorry. Assume <code>data</code> is a python dictionary.</span>
<span class="comment-copy">Do you really want to return a dictionary with the same key as you're searching in the original?</span>
<span class="comment-copy">Gotcha. What is the traditional thing to do if I want to check an item in a nested dictionary? i.e. Javascript equivalent would be:</span>
<span class="comment-copy"><code>data &amp;&amp; data.uuid &amp;&amp; data.uuid.someAttribute</code></span>
<span class="comment-copy">@RyanYu: You can use <code>get</code> multiple times, like <code>data.get('uuid', {}).get('someAttribute', None)</code>.  But also look around on this site for other people asking similar questions, there are many.</span>
<span class="comment-copy">Although <code>get</code> is convenient, be aware that it can be noticeably slower than more verbose code that uses <code>in</code>.</span>
<span class="comment-copy">What if 'id' does not exist in data? did you check that?</span>
<span class="comment-copy">If 'id' doesn't exist in data, data.get('id') will return None.</span>
<span class="comment-copy">If you want to check, that an item is in a dictionary, use  <code>'id' in data</code>. Key checking is a key feature of dicts.</span>
<span class="comment-copy">What Daniel said. <code>'id' in data.keys()</code> is wasteful because it has to construct the keys object. That's not so bad in Python 3 because it's a <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary view object</a> that accesses the underlying <code>dict</code>; and look-ups on dictviews are fast. But in Python 2 <code>dict.keys()</code> has to build a new list object, and lookups on a list involve a slow linear search rather than the fast O(1) lookup that a dictionary or set provides.</span>
