<div class="post-text" itemprop="text">
<p>I have a text file that looks like this:</p>
<pre><code>Mike 5 7 9
Terry 3 7 4
Ste 8 2 3
</code></pre>
<p>I wrote the following program to</p>
<ul>
<li>Retrieve the data from the text file</li>
<li>Split the text into columns delimited by a space</li>
<li>Sort the scores following each name into order (Lowest First,Highest last)</li>
<li>Load the name and the highest score for each person into a list (scoreslist)</li>
<li>Sort the list and output the results in alphabetical order</li>
</ul>
<pre class="lang-python prettyprint-override"><code>def alphabetical():
    scoreslist = []
    with open ("classa.txt") as f:
        content = f.read().splitlines()
        for line in content:
            splitline = line.split(" ")
            name = splitline[0]
            score = splitline[1:]
            highscore = sorted(score)[-1]
            scoreslist.append("{} {}".format(name,highscore))

    scoreslist.sort(key=lambda x: x[0])
    print(scoreslist)
</code></pre>
<p>The final output looks like this:</p>
<pre><code>Mike 9
Ste 8
Terry 7
</code></pre>
<p>I'm happy with the function at the moment but I feel that it could be a little more concise. Is there a simpler way?</p>
<p>More importantly, I want to take the original file and use the same method to create an average of the numbers in the original text file and output in the same format. I thought there might be a simple average function that I could use but this obviously isn't happening:</p>
<pre class="lang-python prettyprint-override"><code>score = splitline.avg[-1:-3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow">statistics.mean</a> to calculate your averages, the <a href="https://docs.python.org/3.5/library/csv.html" rel="nofollow">csv</a> lib to parse your file into rows, you never need to call <code>read</code> unless you actually want a single string of all the file content, you can iterate over a file object and split each line.  </p>
<pre><code>from statistics import mean
import csv

def sort_mean(fle):
    with open(fle) as f:
       for name, *scores in csv.reader(f, delimiter=" "):
            srt = sorted(map(int, scores))
            print("Highest score for {} is  {}".format(name, srt[-1]))
            print("Average score for {} is {}".format(name, mean(srt)))
</code></pre>
<p>For your input file it would ouput:</p>
<pre><code>Highest score for Mike is  9
Average score for Mike is 7.0
Highest score for Terry is  7
Average score for Terry is 4.666666666666667
Highest score for Ste is  8
Average score for Ste is 4.333333333333333
</code></pre>
<p>Now if you want to store all that data and output it ordered:</p>
<pre><code>from statistics import mean
import csv
from operator import itemgetter


def sort_mean(fle):
    avgs, high = [], []
    with open(fle) as f:
        for name, *scores in csv.reader(f, delimiter=" "):
            srt = list(map(int, scores))
            avgs.append((name, mean(srt)))
            high.append((name, max(srt)))
    avgs.sort(key=itemgetter(1), reverse=1)
    high.sort(key=itemgetter(1), reverse=1)
    return avgs, high
</code></pre>
<p>That will give you two lists sorted from highest to lowest:</p>
<pre><code>In [10]: high, avgs = sort_mean("in.txt")

In [11]: high
Out[11]: [('Mike', 7.0), ('Terry', 4.666666666666667), ('Ste', 4.333333333333333)]

In [12]: avgs
Out[12]: [('Mike', 9), ('Ste', 8), ('Terry', 7)]
</code></pre>
<p>For python2 you will need to calculate the average yourself and the logic for the loop is a little different:</p>
<pre><code>def sort_mean(fle):
    avgs, high = [], []
    with open(fle) as f:
        for row in csv.reader(f, delimiter=" "):
            name, scores = row[0], row[1:]
            srt = map(int, scores)
            avgs.append((name, sum(srt,0.0) / len(srt)))
            high.append((name, max(srt)))
    avgs.sort(key=itemgetter(1), reverse=1)
    high.sort(key=itemgetter(1), reverse=1)
    return avgs, high
</code></pre>
<p>Instead of two lists you could store a dict of dicts that had the users highest score and mean and sort the items store in that.</p>
<p>In regard to your own function, you could rewrite it as the following:</p>
<pre><code>def alphabetical():
    scoreslist = []
    with open ("classa.txt") as f:
        # just iterate over the file object
        # line by line
        for line in f:
            # don't need to pass a delimiter
            split_line = line.split()
            name = split_line[0]
            score = split_line[1:]
            # use max to get the highscore and use int as the key
            # or "123" &lt; "2"
            high_score =  max(score,key=int)
            scores_list.append("{} {}".format(name,high_score))
    # don't need lambda to sort alphabetically
    scores_list.sort()
    print(scores_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For your averaging problem, either use <code>sum(x) / len(x)</code> to calculate it manually, or the <code>statistic</code> module contains a <code>mean</code> function as suggested in another answer.</p>
<p>In general, for problems like yours, use the <a href="http://pandas.pydata.org/" rel="nofollow">pandas</a> module for data analysis. Note that this is an external package that has to be <a href="http://pandas.pydata.org/pandas-docs/stable/install.html" rel="nofollow">installed</a> before imported. For tutorials, see <a href="http://pandas.pydata.org/pandas-docs/stable/tutorials.html" rel="nofollow">here</a>.</p>
<pre><code>import pandas as pd

df = pd.read_table("classa.txt", sep=" ", header=None,
                   names = ["name", "score1", "score2", "score3"])

df["max_score"] = df[["score1", "score2", "score3"]].max(axis = 1)

df_sorted = df[["name", "max_score"]].sort_values(by = "max_score",
                                                  ascending = False)


&gt;&gt;&gt; df_sorted 
    name  max_score
0   Mike          9
2    Ste          8
1  Terry          7
</code></pre>
<p>Check the <code>.mean()</code> method of <code>pandas</code> <code>DataFrame</code> objects for taking averages. For writing the resulting <code>DataFrame</code>, check the <code>.to_csv</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I gave it a little thought and this seems to work fine. As with all my code it isn't pretty.</p>
<pre><code>scoreslist = []
with open (classchoice) as f:
    content = f.read().splitlines()
    for line in content:
        splitline = line.split(" ") #splits each line by Space
        name = splitline[0]
        total = int(splitline[-1]) + int(splitline[-2]) + int(splitline[-3]) #I created a total by adding the last three values in the text file
        average = (total/3) #then divided them by 3
        scoreslist.append("{} {}".format(name,average)) #changed the output to feature average instead of high score
scoreslist.sort(key=lambda x: x[0])
print(scoreslist)
</code></pre>
<p>It seems to work but I assumed there would be a function such as min, max, mean, average that could just be plugged in.</p>
<p>I am, very much, a beginner at this and I must admit that pandas isn't something i've used (or seen) before but thank you for the assistance with it paljenczy.</p>
</div>
<span class="comment-copy">It does work but I would like to modify it to create an average using the same sort of system rather than just having it select the highest score from each person</span>
<span class="comment-copy">That's really interesting and very helpful. Thanks very much. I noticed before you mentioned something about my use of splitlines within the loop before you removed it and answered my question. Could you elaborate on it for me?</span>
<span class="comment-copy">@mjolnir,  you can just iterate line by line, you only  call read or readlines etc.. if you actually need all the data at once, you also have to be careful when sorting numbers, strings are compared char by char the first char that is higher basically wins so you would get incorrect output, I added a version of your own code that that incorporates it all, I also changed your variable names  using underscores to make your code more readable</span>
<span class="comment-copy"><code>total = sum(map(int,splitline[-3:]))</code> would do what the same. You don't need to call read or splitlines as I have shown in my answer and there are functions like min max and average as also shown in my answer, mean is only in python3 but  min and max etc.. are builtins</span>
