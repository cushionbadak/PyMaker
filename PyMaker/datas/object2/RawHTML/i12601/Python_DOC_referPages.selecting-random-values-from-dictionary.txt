<div class="post-text" itemprop="text">
<p>Let's say I have this dictionary:</p>
<pre><code>dict = {'a': 100, 'b': 5, 'c': 150, 'd': 60};
</code></pre>
<p>I get the key which has greatest value with this code:</p>
<pre><code>most_similar = max(dic.iteritems(), key=operator.itemgetter(1))[0]
</code></pre>
<p>it returns <code>'c'</code></p>
<p>But I want to select a random key from top 3 greatest values. According to this dictionary top 3 are:</p>
<pre><code>c
a
d
</code></pre>
<p>It should randomly select a key from them. How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find the top 3 keys and then get one of the keys randomly, then I would recommend using <a href="https://docs.python.org/3/library/random.html#random.choice"><code>random.choice</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.Counter"><code>collections.Counter</code></a>, like this</p>
<pre><code>&gt;&gt;&gt; d = {'a': 100, 'b': 5, 'c': 150, 'd': 60}
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; choice(Counter(d).most_common(3))[0]
'c'
</code></pre>
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common"><code>Counter(d).most_common(3)</code></a> will get the top three values from the dictionary based on the values of the dictionary object passed to it and then we randomly pick one of the returned values and return only the key from it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Get the keys with the three largest values.</p>
<pre><code>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; d = {'a': 100, 'b': 5, 'c': 150, 'd': 60}
&gt;&gt;&gt; largest = heapq.nlargest(3, d, key=d.__getitem__)
&gt;&gt;&gt; largest
['c', 'a', 'd']
</code></pre>
<p>Then select one of them randomly:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(largest)
'c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort the dictionary by descending value, get the first three objects from the resulting <code>list</code>, then use <code>random.choice</code>:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; d = {'a': 100, 'b': 5, 'c': 150, 'd': 60}
&gt;&gt;&gt; random.choice(sorted(d, reverse=True, key=d.get)[:3])
'c'
</code></pre>
<p>And don't call it <code>dict</code> or you'll mask the built-in.</p>
</div>
<span class="comment-copy">So, you want a single random selection from a dictionary? Or a single random selection from a preexisting <code>list</code> of the top 3 keys? Or you want to find the top 3 keys, and then select a single random one from them?</span>
<span class="comment-copy">I hate to be a downer, but this question is easily answered by combining the answers from <a href="http://stackoverflow.com/q/306400/1394393">How do I randomly select an item from a list using Python?</a> and <a href="http://stackoverflow.com/q/7197315/1394393">5 maximum values in a python dictionary</a>. I've downvoted as a result, since that constitutes poor research effort in my book. Could you explain how this question distinguishes itself from just slapping those two together?</span>
<span class="comment-copy">regarding your earlier comment on my answer: does <code>most_common</code> not have to do some sorting as well, such that the complexity is O(nlog(n)) for both solutions?</span>
<span class="comment-copy">Okay, thanks for the clarification.</span>
<span class="comment-copy">What about <a href="http://stackoverflow.com/questions/34707280/selecting-random-values-from-dictionary/34707349#34707349">TigerhawkT3</a>'s answer ?</span>
<span class="comment-copy">@IronFist That also has the same O(nlogn) complexity.</span>
<span class="comment-copy">For picking just 3 elements <code>most_common</code> should be closer to linear time <a href="http://stackoverflow.com/questions/29240807/python-collections-counter-most-common-complexity" title="python collections counter most common complexity">stackoverflow.com/questions/29240807/â€¦</a></span>
