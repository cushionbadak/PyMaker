<div class="post-text" itemprop="text">
<p>I try to write some code to catch a Broken Pipe Error. The code should run in Python 2.x and Python 3.x.</p>
<p>In Python 2.x a broken pipe is represented by a <code>socket.error</code></p>
<pre><code>socket.error: [Errno 32] Broken pipe
</code></pre>
<p>This was changed in Python 3.x - a broken pipe now is a <code>BrokenPipeError</code></p>
<pre><code>BrokenPipeError: [Errno 32] Broken pipe
</code></pre>
<p>Also the syntax of exception handling has changed a bit (see <a href="https://stackoverflow.com/a/34463112/263589">https://stackoverflow.com/a/34463112/263589</a>) so what I need to do would be something like:</p>
<pre><code>try:
    do_something()
except BrokenPipeError as e: # implies Python 3.x
    resolve_for_python2()
except socket.error as e:
    if sys.version_info[0] == 2: # this is necessary, as in Python &gt;=3.3
                                 # socket.error is an alias of OSError
                                 # https://docs.python.org/3/library/socket.html#socket.error
        resolve_for_python3()
    else:
        raise
</code></pre>
<p>There's (at least) one remaining problem: In Python 2.x there is no <code>BrokenPipeError</code>, so whenever there is an exception in <code>do_something()</code> Python 2.x would throw another exception and complain that it doesn't know <code>BrokenPipeError</code>. As <code>socket.error</code> is deprecated in Python 3.x a similar problem could arise in Python 3.x in the near future.</p>
<p>What can I do to make this code run in Python 2.x and Python 3.x?</p>
</div>
<div class="post-text" itemprop="text">
<p>If all you care about are broken pipe errors, then you might want to catch <code>socket.error</code> and simply check whether it's indeed a broken pipe error. </p>
<p>You can do so using the exception's <code>errno</code> attribute, which is present in both Python 2 and Python 3, which means, you don't need different Python 2 vs. 3 logic (I'd argue the intent is a little clearer this way):</p>
<pre><code>import socket
import errno


try:
    do_something()
except socket.error as e:
    if e.errno != errno.EPIPE:
        # Not a broken pipe
        raise
    do_something_about_the_broken_pipe()
</code></pre>
<hr/>
<p>If you do care about more than broken pipes, thefourtheye's answer is appropriate and idiomatic.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <code>BrokenPipeError</code> and if it throws a <code>NameError</code>, then fall back to <code>socket.error</code>, like this</p>
<pre><code>import socket
try:
    expected_error = BrokenPipeError
except NameError:
    expected_error = socket.error
</code></pre>
<p>And then use it like this</p>
<pre><code>try:
    1 == 2
except expected_error as ex:
    # Handle the actual exception here
</code></pre>
</div>
<span class="comment-copy">Have a look at <a href="http://python-future.org/compatible_idioms.html" rel="nofollow noreferrer">python-future.org/compatible_idioms.html</a>, they show exception handling.</span>
<span class="comment-copy"><a href="http://newbebweb.blogspot.in/2012/02/python-head-ioerror-errno-32-broken.html" rel="nofollow noreferrer">newbebweb.blogspot.in/2012/02/â€¦</a> here is</span>
<span class="comment-copy">Thank you! But <a href="http://python-future.org/compatible_idioms.html#catching-exceptions" rel="nofollow noreferrer">python-future.org/compatible_idioms.html#catching-exceptions</a> doesn't explain how to catch an exception that doesn't exist in either Python 2 or Python 3 but is mandatory in the other version.</span>
<span class="comment-copy">@RajarshiDas this is interesting! Are you trying to say that catching the broken pipe isn't necessary at all if Python is advised to just ignore the SIGPIPE error?</span>
<span class="comment-copy">Thank you! It worries me a bit that <code>socket.error</code> is deprecated in Python 3. So in case I update my Python 3 interpreter, there might be another problem in the (near) future...</span>
<span class="comment-copy">@speendo there are dozens of references to <code>socket.error</code> <i>in the Python standard library itself</i>. It's deprecated, sure, but it's not going away. Removing <code>socket.error</code> would be a pointless breaking change, which is something the Python core developers have publicly stated they'll avoid in the future. If it did end up removed (in a few decades?! ;) ), the error would be trivial to identify and fix, and at that point you probably wouldn't be supporting Python 2 anymore anyway.</span>
<span class="comment-copy">makes sense....</span>
