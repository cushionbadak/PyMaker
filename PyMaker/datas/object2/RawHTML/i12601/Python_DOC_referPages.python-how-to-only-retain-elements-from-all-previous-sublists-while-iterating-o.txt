<div class="post-text" itemprop="text">
<p>So this is what I have:</p>
<pre><code> lst = [[1,4,5,9], [4,5,7,9], [6,2,9], [4,5,9], [4,5]]
</code></pre>
<p>And I want to make a new list where the sublists only have the elements that are shared with ALL the previous sublists.</p>
<p>It should look like this:</p>
<pre><code>new_lst = [[1,4,5,9], [4,5,9], [9], [9], []]
</code></pre>
<p>I tried converting the integers to strings and iterating over it, but I can't seem to get the right result. I'm new to python, so any help is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about the order of the items, you can use a <code>set</code> based approach:</p>
<pre><code>last = set(lst[0])
res = [lst[0]]
for item in lst[1:]:
    last &amp;= set(item)
    res.append(list(last))
</code></pre>
<p>Here, <code>res</code> contains the resulting list of lists. The important line is <code>last &amp;= set(item)</code> which calculates the intersection between the previous and the current item.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow">accumulate</a></p>
<pre><code>from itertools import accumulate
new_lst = map(list,accumulate(map(set,lst), set.intersection))
print(list(new_lst))
</code></pre>
<p>which produces</p>
<pre><code>[[1, 4, 5, 9], [4, 5, 9], [9], [9], []]
</code></pre>
<p>but it doesn't guarantee the items of the sublists will be in the same order.</p>
<p>In case you do care about the order of the items, you can do it manually</p>
<pre><code>last = set(lst[0])
new_lst = [lst[0]]
for l in lst[1:]:
    new_els = [n for n in l if n in last]
    new_lst.append(new_els)
    last &amp;= set(new_els)

print(new_lst)
</code></pre>
<p>Or just ignore sets and use lists instead, but sets are faster, since they are hashed and intersection is a core functionality.</p>
</div>
<div class="post-text" itemprop="text">
<p>One line answer:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce   # for forward compatible.
&gt;&gt;&gt; lst = [[1,4,5,9], [4,5,7,9], [4,5,7,9], [4,5,9], [4,5]]
&gt;&gt;&gt; [list(reduce(lambda x,y: set(x)&amp;set(y), lst[:i+1])) for i in range(len(lst))]
[[1, 4, 5, 9], [9, 4, 5], [9], [9], []]
</code></pre>
<p>The explanation:</p>
<pre><code>[1, 4, 5, 9] = list(set([1, 4, 5, 9]))
[9, 4, 5] = list(set([1, 4, 5, 9]) &amp; set([4,5,7,9]))
[9] = list(set([1, 4, 5, 9]) &amp; set([4,5,7,9]) &amp; set([4,5,7,9]))
...
</code></pre>
<p>in the <code>i</code>'st loop,  it should be union the items in <code>lst[:i+1]</code>.</p>
</div>
<span class="comment-copy">That isn't valid Python code. Did you mean to add commas between the sublists?</span>
<span class="comment-copy">You should show what you've tried, to show you have at least made an effort.</span>
<span class="comment-copy">How would you go about doing this from the right side? I tried using lst[-1] instead of lst[0], and for the loop I did lst[:-2:-1] but it doesn't seem to work .</span>
<span class="comment-copy">You'll start with <code>lst[-1]</code> and iterate over <code>lst[-2::-1]</code>, which basically iterates everything in reverse.</span>
<span class="comment-copy">Awesome, thank you! Misplaced the -2 in the slice.</span>
<span class="comment-copy">Simpler: <code>… res = []; for item in lst: …</code>. Also, use <code>sorted</code> instead of <code>list</code> for deterministic output.</span>
<span class="comment-copy">To go right-to-left: <code>for item in reversed(lst): …</code>.</span>
<span class="comment-copy">please see my edited answer for a better solution</span>
<span class="comment-copy">I like that solution, but I think it does not preserve the order of the items in the sublists, since it also uses set interactions.</span>
<span class="comment-copy">true, I corrected it now</span>
