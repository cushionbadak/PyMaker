<div class="post-text" itemprop="text">
<pre><code>import os, sys
import os.path, time
path=os.getcwd()
def file_info(directory):
    file_list = []
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list


print file_info(path)
</code></pre>
<p><strong>Problem</strong></p>
<ul>
<li>how I can show each list item in new line and nice a nice format </li>
<li>how I can sort the file/directory list based on last modified </li>
<li>how I can sort the file/directory list based on creatation date </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here is the program with some nice printing using the format function:</p>
<pre><code>import os
import time

path = os.getcwd()

def file_info(directory):
    file_list = []
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list


file_list = file_info(path)

for item in file_list:
    line = "Name: {:&lt;20} | Last Accessed: {:&gt;20} | Date Created: {:&gt;20}".format(item[0],item[1],item[2])
    print(line)
</code></pre>
<p>Here is some code with a sort function being used on the <strong>accessed time</strong>. The code is not optimized but it is very readable and you should be able to understand it. </p>
<pre><code>import os
import time

path = os.getcwd()

def file_info(directory,sortLastModifiedOrNaw=False):
    file_list = []
    currentMin = 0 #This is the variable that will track the lowest digit
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        if sortLastModifiedOrNaw == True: #If you would like to sort.
            if a.st_atime &gt; currentMin: #Check if this is bigger than the current minimum. 
                currentMin = a.st_atime #If it is we update the current minimum
                #Below we append so that it ends up in the end of the list
                file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
            else: #If it is smaller, it should be in the front of the list so we insert it into position 0. 
                file_list.insert(0,[i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
        else: #If you would not like to sort
            file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list


file_list = file_info(path)

print("Unsorted Example")
for item in file_list:
    line = "Name: {:&lt;20} | Date Last Accessed: {:&gt;20} | Date Created: {:&gt;20}".format(item[0],item[1],item[2])
    print(line)

print("\nSorted example using last modified time")
file_list = file_info(path,sortLastModifiedOrNaw=True)

for item in file_list:
    line = "Name: {:&lt;20} | Date Last Accessed: {:&gt;20} | Date Created: {:&gt;20}".format(item[0],item[1],item[2])
    print(line)
</code></pre>
<p>Sample output:</p>
<pre><code>Unsorted Example
Name: .idea                | Date Last Accessed: Sun Jan  3 21:13:45 2016 | Date Created: Sun Jan  3 21:13:14 2016
Name: blahblah.py          | Date Last Accessed: Sun Jan  3 21:13:48 2016 | Date Created: Sun Jan  3 21:13:48 2016
Name: testhoe1.py          | Date Last Accessed: Sun Jan  3 19:09:57 2016 | Date Created: Sun Jan  3 18:52:06 2016

Sorted example using last modified time
Name: testhoe1.py          | Date Last Accessed: Sun Jan  3 19:09:57 2016 | Date Created: Sun Jan  3 18:52:06 2016
Name: .idea                | Date Last Accessed: Sun Jan  3 21:13:45 2016 | Date Created: Sun Jan  3 21:13:14 2016
Name: blahblah.py          | Date Last Accessed: Sun Jan  3 21:13:48 2016 | Date Created: Sun Jan  3 21:13:48 2016
</code></pre>
<p>Happy optimizing! #If you change line 12 <strong>atime</strong> to <strong>ctime</strong> it will sort based on create-time. </p>
</div>
<span class="comment-copy">Have you tried anything and looked at <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> built-in function?</span>
<span class="comment-copy">@KevinGuan I looked at sorted but unable to sort yet</span>
<span class="comment-copy">how to sort the file based on created dated or last accessed ?</span>
<span class="comment-copy">What's wrong with <code>sorted(file_list, key=lambda x: x[1])</code> and <code>sorted(file_list, key=lambda x: x[2])</code> to sort the list based on last modified and creation date instead of change the insert order? Don't you think that your code is little complex?</span>
<span class="comment-copy">You get a vote up for a very pythonic higher-order solution, but I refrained from such complications for the sake of the user and the learning experience. Although your solution is quicker, it hides more of the logic. But it is faster, a wee bit faster. Nice work.</span>
<span class="comment-copy">@Roujri that seems like more of an issue with how you are expecting os.stat to work. Please research os.stat some more and see how things work to understand why that is happening. I myself have not seen this occur. This is most likely being caused because you created a file but never modified it. The modified time is then never changed but is set to the creation time. Make sense?</span>
<span class="comment-copy">@Roujri I have included some example output to show you it works. Please Make sure you are running the correct updated code in your development environment.</span>
