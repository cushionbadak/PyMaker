<div class="post-text" itemprop="text">
<p>I have written a <code>coloured_output</code> module which holds a class named <code>ColouredMsg</code>.
To use it I only have to create an instance of <code>ColouredMsg</code>:</p>
<pre><code>from coloured_output import ColouredMsg
cm = ColouredMsg()
</code></pre>
<p>then use it this way:</p>
<pre><code>warning_msg = cm.warn(*parameters)
error_msg = cm.error(*parameters)
</code></pre>
<p>The thing is I am planning to use this class for console logs, in a software:</p>
<pre><code>cm = ColouredMsg()
print cm.warn(*parameters)
</code></pre>
<p>As one might guess, this call will be often made, in almost every module. So at this point, I'd like to know which practice is best. Either I stick with this way, and I will have to import the module <code>coloured_output</code> and to declare an instance of <code>ColouredMsg</code> at the beginning of each module, or I can make a general function in the <code>coloured_output</code> module, like this:</p>
<pre><code>def warn(*parameters):
    cm = ColouredMsg()
    return cm.warn(*parameters)
</code></pre>
<p>then in my software:</p>
<pre><code>import coloured_output as co
# ...
co.warn(*parameters)
</code></pre>
<p>But here I would have to create an instance of <code>ColouredMsg</code> everytime I want to print a coloured message, which would be heavy and should probably be avoided.</p>
<p>Which leaves me with a third choice, I could create a general instance of <code>ColouredMsg</code> in my <code>coloured_output</code> module, which would look like:</p>
<pre><code>class ColouredMsg():

    def warn(*parameters):
        message = do_whatever_is_needed(*parameters)
        return message

cm = ColouredMsg()

def warn(*parameters):
    return cm.warn(*parameters)
</code></pre>
<p>So I have two choices: either declaring a general instance in each of my software modules, or declaring a general instance in the <code>coloured_output</code> module. Or something else I have not thought about.</p>
<p>I would embrace any suggestion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Daniel's suggestion in the comments is good. </p>
<p>But if you <em>really</em> want to do this yourself, I recommend using a hidden instance in the module, rather than creating a new temporary instance in each function call. The "hidden instance" approach is used in the standard library, eg, that's what the <code>random</code> module does for the standard random functions.</p>
</div>
<span class="comment-copy">Seems like this should be a logging <a href="https://docs.python.org/3/library/logging.html#formatter-objects" rel="nofollow noreferrer">Formatter object</a>, then you can configure the loggers to do the work for you.</span>
<span class="comment-copy">Nice suggestion I will probably use it at some point.</span>
<span class="comment-copy">I see you already accepted an answer but I really think that reinventing the wheel here is wrong  why not use something like <a href="https://pypi.python.org/pypi/colorlog/2.0.0" rel="nofollow noreferrer">pypi.python.org/pypi/colorlog/2.0.0</a>?</span>
<span class="comment-copy">@yoav glazner: Isn't reinventing the wheel a nice thing to do for learning and practicing purpose?</span>
<span class="comment-copy">Nice to know this "hidden instance" practice is common.</span>
<span class="comment-copy">@kaligne: In general (but not always), imitating the practices of the Python standard library, is a Good Thing. :) I'm sure there are various other examples of modules that use hidden instances, but I can't think of any off-hand... maybe <code>time</code> or <code>datetime</code>.</span>
