<div class="post-text" itemprop="text">
<p>I'm new to python and have an array, where each element is an array of tuples. I need to sort the tuples in the inner array by the first element in the tuple. My array looks something like this:</p>
<pre><code>[[(u'10:30', u'11:20'), (u'08:30', u'09:20')], [(u'14:30', u'15:50'), (u'10:00', u'11:20'), (u'10:30', u'11:20'), (u'13:00', u'14:20')], [(u'10:30', u'11:20'), (u'08:30', u'09:20')], [(u'14:30', u'15:50'), (u'10:00', u'11:20'), (u'13:00', u'14:20')], [(u'10:30', u'11:20'), (u'08:30', u'09:20')]]
</code></pre>
<p>I tried doing something like</p>
<pre><code>for index, elm in array:
    array[index] = sorted(elm, key=lambda x: x[0])
</code></pre>
<p>But I get the ValueError: need more than 0 values to unpack. Not sure if my syntax is off or something</p>
<p>The expected result is</p>
<pre><code>  [[ (u'08:30', u'09:20'), (u'10:30', u'11:20')], [ (u'10:00', u'11:20'), (u'10:30', u'11:20'), (u'13:00', u'14:20'), (u'14:30', u'15:50')], [(u'08:30', u'09:20'),(u'10:30', u'11:20') ], [ (u'10:00', u'11:20'), (u'13:00', u'14:20'), (u'14:30', u'15:50'),] [ (u'08:30', u'09:20'), (u'10:30', u'11:20')]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>for</code> statement is missing <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a>:</p>
<pre><code>for index, elm in enumerate(array):
</code></pre>
<p>But, if you want to sort the list in-place, you don't need to use index. Use <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> instead:</p>
<pre><code>for elm in array:                                                              
    elm.sort(key=lambda x: x[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>for index, elm in array:</code>, you're iterating over pairs of objects. On the first loop iteration, <code>index</code> is <code>(u'10:30', u'11:20')</code> and <code>elm</code> is <code>(u'08:30', u'09:20')</code>, which isn't what you want (I get <code>TypeError</code> when I enter your posted code, not <code>ValueError</code>). You can get what you planned with the <code>enumerate()</code> function:</p>
<pre><code>for index, elm in enumerate(array):
    array[index] = sorted(elm, key=lambda x: x[0])
</code></pre>
</div>
<span class="comment-copy">@The6thSense, Strings like <code>10:30</code> cannot be converted to <code>int</code>.</span>
<span class="comment-copy">Sorry did not see the actual data now I have a little doubt should not it be sorted according to time than normal strings ? It provides the correct output but is string comparsion enough here ?</span>
<span class="comment-copy">@The6thSense, Strings are sorted according to lexicographical order. <code>'10:30' &lt; '11:45'</code></span>
<span class="comment-copy">@The6thSense: Normal (lexicographic) string sorting will sort these time strings correctly because they are zero-padded. If we had times like <code>2:30</code> then there <i>would</i> be problems because eg, <code>'2:30' &gt; '10:30'</code> is True.</span>
<span class="comment-copy">@PM2Ring hmm yeah that makes sense :).</span>
<span class="comment-copy">@The6thSense - There's a leading zero, so that's not necessary. If there was no leading zero, a simple <code>int()</code> call wouldn't be enough to parse these time strings. Adding a leading zero with string formatting would be easier.</span>
<span class="comment-copy">FWIW, using the <code>sorted</code> function when the result is going to replace the original list isn't very efficient. That's because  <code>sorted</code> copies the source list to a new list and does an in-place sort of that new list. So in this situation it's much better to simply do an in-place sort directly, using the <code>.sort()</code> method.</span>
