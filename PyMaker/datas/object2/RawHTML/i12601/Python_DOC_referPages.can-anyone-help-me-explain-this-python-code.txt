<div class="post-text" itemprop="text">
<blockquote>
<p>7.2  Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:</p>
<pre><code>  X-DSPAM-Confidence:    0.8475
</code></pre>
<p>Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below.</p>
<p>You can download the sample data at <a href="http://www.pythonlearn.com/code/mbox-short.txt" rel="nofollow">http://www.pythonlearn.com/code/mbox-short.txt</a> when you are testing below enter mbox-short.txt as the file name.</p>
</blockquote>
<p>This is what I did and got the output but is it the right way to do it?:</p>
<pre><code>fname = raw_input("Enter file name: ")
fh = open(fname)
sum = 0
count = 0
for line in fh:
if not line.startswith("X-DSPAM-Confidence:") : continue
    line = line.replace("X-DSPAM-Confidence:","")
    line = line.strip()
    sum = sum + float(line)
    count = count + 1

avg = sum/count

print "Average spam confidence:",float(avg)
</code></pre>
<p>However, in few other sides, this one, and GitHub the code has been written differently. Can anyone explain it to me?</p>
<p>1)</p>
<pre><code>fname = raw_input("Enter file name: ")
fh = open(fname)
tot = 0.0
count = 0
for line in fh:
    if not line.startswith("X-DSPAM-Confidence:") : continue
    words = line.split()
    tot = tot + float(words[1])
    count = count + 1
print "Average spam confidence:", tot/count
</code></pre>
<p>What does <code>split()</code> do here? Remove blank spaces and print it on the next line right? So how does that help? And what will <code>float(words[1])</code> be then? Sorry is this sounds silly but this is my 3rd day into Python and I'm just trying to learn.</p>
<p>2) Lots others have used sum this way:</p>
<pre><code> a = line.split(':')
     sum = sum + float(a[1])
</code></pre>
<p>How does this work?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>split</code> will split a single string into multiples as a list, using either blank space or whatever character you pass as the parameter. By taking <code>[1]</code> you're using the second of the resulting strings, since indexes start at 0.</p>
<p><code>float</code> will ignore leading spaces, so if you split on <code>:</code> and it leaves some spaces it doesn't matter.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code></a> split a string into a list. Check the examples in the document for more deatils. By the way:</p>
<pre><code>&gt;&gt;&gt; '1 2 3 4'.split()
['1', '2', '3', '4']

&gt;&gt;&gt; '1:2:3:4'.split()
['1:2:3:4']

&gt;&gt;&gt; '1:2:3:4'.split(':')
['1', '2', '3', '4']


&gt;&gt;&gt; 'X-DSPAM-Confidence:    0.8475'.split()
['X-DSPAM-Confidence:', '0.8475']

&gt;&gt;&gt; 'X-DSPAM-Confidence:    0.8475'.split(':')
['X-DSPAM-Confidence', '    0.8475']
</code></pre></li>
<li><p><code>a[1]</code> is list index in this case. As the above example:</p>
<pre><code>&gt;&gt;&gt; a = 'X-DSPAM-Confidence:    0.8475'.split(':')
&gt;&gt;&gt; a[0]
'X-DSPAM-Confidence'
&gt;&gt;&gt; a[1]
'    0.8475'
</code></pre>
<p>It's:</p>
<pre><code>['X-DSPAM-Confidence', '    0.8475']
       ^^^^                ^^^^
   a[0]                a[1]
</code></pre></li>
<li><p><a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow"><code>float(x)</code></a>: Return a floating point number constructed from a number or string <code>x</code>.</p>
<p>It's easy to understand:</p>
<pre><code>&gt;&gt;&gt; float('0.8475')
0.8475

&gt;&gt;&gt; a = 'X-DSPAM-Confidence:    0.8475'.split(':')      
&gt;&gt;&gt; float(a[1]) + 0.5
1.3475

&gt;&gt;&gt; a[1] + 0.5
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: Can't convert 'float' object to str implicitly
</code></pre>
<p>If you don't do the convert, Python will raise <code>Type</code> when you run <code>+</code> between string object and float object like the above example.</p>
<p>And however, <code>float()</code> ignores spaces. So:</p>
<pre><code>&gt;&gt;&gt; float('         0.8475   ')
0.8475
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In your file input you have <code>"X-DSPAM-Confidence"</code> always appearing like - <code>XDSPAM-Confidence: 0.6959</code>. So there is space due to which your <code>line.split()</code> splits the required line like this:</p>
<pre><code>['X-DSPAM-Confidence:', '0.9846']
</code></pre>
<p>Since by default space is argument for split command.</p>
</div>
<span class="comment-copy">Don't name variables <code>sum</code>; it shadows the <code>sum</code> built-in (which would often be handy for many tasks like this); shadowing the built-ins is a terrible idea.</span>
<span class="comment-copy">So what you're saying is if we use split(), each will be a single string? So shouldn't word[1] in the program be "-" Since it's second?</span>
<span class="comment-copy">Or you're saying is if we use split(), it will remove the spaces between the X-DS thing and the number. And the the left side of the space becomes a[0] and right becomes a[1]? If there was another space and a character say 'banana' after the number, banana would be a[2]?</span>
<span class="comment-copy">@JaneDoe by "blank space" I mean any space characters or equivalent (such as tabs or newline), however many there are. A <code>-</code> doesn't count as blank space. And yes, if there was a blank space after the number, anything between the number and the next space would be <code>a[2]</code>.</span>
<span class="comment-copy">I think I'm still not clear about split() and that's why I'm not understanding few bits here. So what you're saying is if we use split(), it will remove the spaces between the X-DS thing and the number. And the the left side of the space becomes a[0] and right becomes a[1]? If there was another space and a character say 'banana' after the number, banana would be a[2]?</span>
<span class="comment-copy">@JaneDoe: Well, please check the document linked in my answer. <code>str.split()</code> with <b>no <code>sep</code></b> split the string to a list by <i>empty letters</i> such as spaces, newlines (<code>\n</code>), tabs (<code>\t</code>), etc. If you set the <code>sep</code> argument like <code>':'</code> in this case, it doesn't remove spaces, but split the string by the <code>sep</code> <code>:</code>. So it gives <code>['X-DSPAM-Confidence', '    0.8475']</code>. And <code>a[1]</code> is `'0.8475'.</span>
<span class="comment-copy">Yes, I got that now. But still finding it hard to understand what is the use of that when we use "tot = tot + float(words[1])" after that. How does removing space help us in getting the number?</span>
<span class="comment-copy">So what you're saying is if we use split(), it will remove the spaces between the X-DS thing and the number. And the the left side of the space becomes a[0] and right becomes a[1]? If there was another space and a character say 'banana' after the number, banana would be a[2]?</span>
<span class="comment-copy">now the word variable is a list (you can assume it to be array for simplicity) with two elements and your index one contains the value of which you have to take average. Also the value extracted is of type string which is type-casted to float..  Yes you are correct</span>
