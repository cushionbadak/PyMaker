<div class="post-text" itemprop="text">
<p>I am attempting to embed Python in an (ultimately multiplatform) C++ app. </p>
<p>It's important that my app contains its own Python implementation (in the same way that blender does), so that it is entirely self-contained. (Else it becomes a configuration minefield).</p>
<p>I have two options:</p>
<ol>
<li><p>Attempt to embed Python3 <em>without</em> the standard library (which I have asked <a href="https://stackoverflow.com/questions/34724057/embed-python3-without-standard-library">here</a>)</p></li>
<li><p><strong>Attempt to embed Python3 <em>with</em> the standard library.</strong></p></li>
</ol>
<p>What is required for (2)?</p>
<p>With this information I would be able to balance the merits of each approach against the effort required to set it up.</p>
<p>My embedded Python will be for my own use (rather than any userland scripting) -- mainly control flow / game logic. I will need very little from the standard library -- maybe I can whittle that down to 0 by tunnelling back into C++ whenever necessary -- for example if I need a random number, I can create a C++ routine and access that from Python. I have all of that covered. </p>
<p>However, it is starting to look as though even a minimal installation will have to contain some stdlib component(s), which prompts the question: "If I must include some, maybe it is better to include all!"</p>
</div>
<div class="post-text" itemprop="text">
<h2>You are looking for <a href="https://www.boost.org/doc/libs/release/libs/python/" rel="nofollow noreferrer">Boost.Python</a>!</h2>
<p>It's a <strong>C++ library</strong> which enables <em>seamless interoperability</em> between C++ and the Python programming language and in my opinion this should suffice your need, unless you are trying to achieve something else.</p>
<p>It also has a mechanism for embedding the python interpreter into C++ code and one can refer to <a href="http://www.boost.org/doc/libs/release/libs/python/doc/html/reference/embedding.html" rel="nofollow noreferrer">this link</a> (URL isn't release specific) to delve into the possibilities.</p>
<p>P.S. I believe less in reinventing the wheel and more into the re-usability.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suppose that you have already double check how to Embedding Python in Another Application (<a href="https://docs.python.org/2/extending/embedding.html" rel="nofollow noreferrer">here</a> you will see something which cover embedding python2 but will be true for python3 also in my opinion) </p>
<p>There is different types of embedding:</p>
<ul>
<li>Very High Level Embedding</li>
<li>Beyond Very High Level Embedding</li>
<li>Pure Embedding</li>
<li>Embedding Python in C++</li>
</ul>
<p>As your question is relative to "Embedding Python in C++" you may read this:</p>
<blockquote>
<p>It is also possible to embed Python in a C++ program; <strong>precisely how
  this is done will depend on the details of the C++ system used</strong>; in
  general you will need to write the main program in C++, and use the
  C++ compiler to compile and link your program. There is no need to
  recompile Python itself using C++.</p>
</blockquote>
<p>As one hand you said "<em>(ultimately multiplatform) C++ app</em>", and in the other hand you have "<em>precisely how this is done will depend on the details of the C++ system used</em>", so may you explain more details of the C++ system used ?</p>
<p>You may also find some tips <a href="https://skebanga.github.io/embedded-python-pybind11/" rel="nofollow noreferrer">here</a> relative to the use of <a href="https://github.com/pybind/pybind11" rel="nofollow noreferrer">pybind11 module</a> or another <a href="http://blog.dmaggot.org/2009/12/embed-python-and-import-modules-in-cc/" rel="nofollow noreferrer">old page</a> which treat about how to Embed Python and Import Modules in C/C++ (python2.6 but I hope you may found inspiration with)</p>
<p>To conclude:</p>
<blockquote>
<p>You'll obviously need development packages for Python in order to have
  the Python include directory</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Since this doesn't really have an answer, I will offer this for posterity. I also do not have access to a Mac, so it may be a little different for you than on Linux. Also, the required dependencies must be installed for this to work, but that is usually easy enough to figure out.</p>
<p>Create a working directory</p>
<pre><code>mkdir ~/embeddedpython
cd ~/embeddedpython
</code></pre>
<p>Download the Python source</p>
<pre><code>wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz
</code></pre>
<p>Create an installation directory for Python</p>
<pre><code>mkdir ./installation
</code></pre>
<p>Extract the downloaded source files</p>
<pre><code>tar xvf Python-3.6.1.tgz
</code></pre>
<p>Enter the newly created source directory</p>
<pre><code>cd Python-3.6.1
</code></pre>
<p>Configure Python to install in our installation directory</p>
<pre><code>./configure --prefix="/home/&lt;username&gt;/embeddedpython/installation"
</code></pre>
<p>Make and install Python</p>
<pre><code>make &amp;&amp; make install
</code></pre>
<p>Go back to your working directory</p>
<pre><code>cd ..
</code></pre>
<p>Create a new <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME" rel="nofollow noreferrer">PYTHONHOME</a> directory where the library will reside</p>
<pre><code>mkdir home &amp;&amp; mkdir home/lib
</code></pre>
<p>Copy the Python library to our new home directory</p>
<pre><code>cp -r ./installation/lib/python3.6 ./home/lib/
</code></pre>
<p>Create a new c++ source file (embeddedpython.cpp) with the following code taken from the <a href="https://docs.python.org/3/extending/embedding.html#very-high-level-embedding" rel="nofollow noreferrer">python documentation</a>, with the exception of the <code>setenv</code> function call.</p>
<pre><code>#include &lt;Python.h&gt;
#include &lt;cstdlib&gt;

int main(int argc, char *argv[])
{
    setenv("PYTHONHOME", "./home", 1);

    wchar_t *program = Py_DecodeLocale(argv[0], NULL);
    if (program == NULL) {
        fprintf(stderr, "Fatal error: cannot decode argv[0]\n");
        exit(1);
    }
    Py_SetProgramName(program);  /* optional but recommended */
    Py_Initialize();
    PyRun_SimpleString("from time import time,ctime\n"
                       "print('Today is', ctime(time()))\n");
    if (Py_FinalizeEx() &lt; 0) {
        exit(120);
    }
    PyMem_RawFree(program);
    return 0;
}
</code></pre>
<p>Compile and run</p>
<pre><code>g++ embeddedpython.cpp -I ./installation/include/python3.6m/ ./installation/lib/libpython3.6m.a  -lpthread -ldl -lutil
./a.out

&gt; Today is Fri Apr 14 16:06:54 2017
</code></pre>
<p>From here on it is standard embedded python as usual. With this method, the "home" directory must be included in your deployment, and the environment variable <code>PYTHONHOME</code> must be set to point to it before any python related code is executed.</p>
</div>
<span class="comment-copy">This is <b>not</b> a duplicate of <a href="http://stackoverflow.com/q/34724057/3005167">stackoverflow.com/q/34724057/3005167</a>. (Just mentioning this to prevent accidential flags, like it just almost happened to me :))</span>
<span class="comment-copy">Hm, what's the hiccup? Is there something that isn't working or are you looking for a broad-ish answer for it?</span>
<span class="comment-copy">This answer is very vague. You should include some kind of (further) explanation or concrete implementation for the task the OP is trying to approach.</span>
<span class="comment-copy">Moreover, subtle personal comments or opinions are well-received if they are accompanied with a high-quality explanation, but not if they virtually substitute it all.</span>
