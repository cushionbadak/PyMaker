<div class="post-text" itemprop="text">
<p>Directory structure:</p>
<pre><code>/dir1
    foo.py
    bar.py
/dir2
    test.py
</code></pre>
<p>Now, I want to import all the modules present in <code>dir1</code> and use it in <code>test.py</code> present in <code>dir2</code>. I have used an <code>__init__.py</code> in <code>/dir1</code> with the following contents:</p>
<pre><code>from os.path import dirname, basename, isfile
import glob

modules = glob.glob(dirname(__file__)+"/*.py")
__all__ = [ basename(f)[:-3] for f in modules if isfile(f) if not f.endswith('__init__.py')]            
</code></pre>
<p>However, when I do a <code>from dir1 import *</code> in <code>test.py</code>, it says <code>no module named dir1</code>.</p>
<p>I did come across quite a few similar questions like <a href="https://stackoverflow.com/questions/16852811/python-how-to-import-from-all-modules-in-dir">this</a>, but nothing seemed to solve the problem.
Where am I going wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that Python only searches in the current directory, and presumably you're running this from within <code>dir2</code> - therefore Python expects <code>dir1</code> inside of <code>dir2</code>.</p>
<p>You need to tell Python where to find <code>dir1</code>, and one way is to add this directory to the system path inside of <code>test.py</code>.</p>
<pre><code>import sys
sys.path.append('/path/to/parent/of/dir1')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>importlib</code></p>
<p>The following works in Python 3.3+ <a href="https://docs.python.org/3/library/importlib.html#module-importlib.machinery" rel="nofollow">See Documentation</a></p>
<pre>
    from importlib.machinery import SourceFileLoader

    path = '../dir1/foo.py'
    module_name = 'foo'

    loader = SourceFileLoader(module_name, path)
    module = loader.load_module()
</pre>
</div>
<span class="comment-copy">if you want to from dir1 import * I think you have to edit the  <b>init</b>.py  in dir1</span>
<span class="comment-copy">Yeah, i have done that. It's mentioned in the question.</span>
<span class="comment-copy">I did that, @Martin, but I'm still getting the same error.</span>
<span class="comment-copy">Did you add that to the <code>test.py</code> file?</span>
<span class="comment-copy">Yeah. When i print <code>sys.path</code> from inside the <code>test.py</code> file, I can actually see  <code>'/path/to/parent/of/dir1'</code> present. However, it's still giving me the same error.</span>
<span class="comment-copy">Can you confirm, that <code>dir1</code> isn't actually in the path. That it ends precisely at the parent dir's name.</span>
<span class="comment-copy">Thanks a ton, Martin. The mistake I'd made was I'd added the path to <code>dir1</code> and not to <code>parent of dir1</code>. :) It's working now</span>
<span class="comment-copy">Thanks, but I need a solution to python 2.7. I edited my question just now to make that clearer. :)</span>
<span class="comment-copy">Check out this function in the Fabric code: <a href="https://github.com/fabric/fabric/blob/master/fabric/main.py#L135" rel="nofollow noreferrer">github.com/fabric/fabric/blob/master/fabric/main.py#L135</a></span>
