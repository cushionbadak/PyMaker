<div class="post-text" itemprop="text">
<p>Sometimes a function in Python may accept an argument of a flexible type. Or it may return a value of a flexible type. Now I can't remember a good example of such a function right now, therefore I am demonstrating what such a function may look like with a toy example below.</p>
<p>I want to know how to write docstrings for such functions using the Sphinx documentation notation. In the example below, the arguments may be either <code>str</code> or <code>int</code>. Similarly it may return either <code>str</code> or <code>int</code>.</p>
<p>I have given an example docstrings (both in the default Sphinx notation as well as the Google notation understood by Sphinx's napoleon extension). I don't know if this is the right way to document the flexible types.</p>
<p>Sphinx default notation:</p>
<pre><code>def add(a, b):
    """Add numbers or concatenate strings.

    :param int/str a: String or integer to be added
    :param int/str b: String or integer to be added
    :return: Result
    :rtype: int/str
    """
    pass
</code></pre>
<p>Sphinx napoleon Google notation:</p>
<pre><code>def add2(a, b):
    """Add numbers or concatenate strings.

    Args:
      a (int/str): String or integer to be added
      b (int/str): String or integer to be added

    Returns:
      int/str: Result
    """
    pass
</code></pre>
<p>What is the right way to express multiple types for parameters or return values in docstrings that are meant to be processed by Sphinx?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 3.5 <code>Union</code> type hints</strong></p>
<p><a href="https://docs.python.org/3/library/typing.html#typing.Union" rel="noreferrer">https://docs.python.org/3/library/typing.html#typing.Union</a></p>
<p>For now, I recommend using the exact same syntax as that module, which will:</p>
<ul>
<li>make porting easier, and possibly automatable, later on</li>
<li>specifies a unique well defined canonical way to do things</li>
</ul>
<p>Example:</p>
<pre><code>def f(int_or_float):
    """
    :type int_or_float: Union[int, float]
    :rtype: float
    """
    return int_or_float + 1.0
</code></pre>
<p>Then when you have 3.5, you will write just:</p>
<pre><code>def f(list_of_int : Union[int, float]) -&gt; float:
    return int_or_float + 1.0
</code></pre>
<p>I think it already has documentation generation support, but I haven't tested it yet: <a href="https://github.com/sphinx-doc/sphinx/issues/1968" rel="noreferrer">https://github.com/sphinx-doc/sphinx/issues/1968</a></p>
</div>
<span class="comment-copy">Similar question: <a href="http://stackoverflow.com/q/33482493/407651">stackoverflow.com/q/33482493/407651</a></span>
<span class="comment-copy"><code>def add(a: str or int, b: str or int):</code> worked for me. Better to define a <a href="https://docs.python.org/3/library/typing.html#typing.TypeVar" rel="nofollow noreferrer">typing.TypeVar</a> for reuse.</span>
