<div class="post-text" itemprop="text">
<p>I have a sample Python class </p>
<pre><code>class bean :
    def __init__(self, puid, pogid, bucketId, dt, at) :
    self.puid = puid
    self.pogid = pogid
    self.bucketId = bucketId
    self.dt = (datetime.datetime.today() - datetime.datetime.strptime(dt, "%Y-%m-%d %H:%M:%S")).days
    self.absdt=dt
    self.at = at
</code></pre>
<p>Now i know that in Java to make a class serializable we just have to extend Serializable and ovverride a few methods and life is simple. Though Python is so simplistic yet i cant find a way to serialize the objects of this class. </p>
<p>This class should be serializable over network because the objects of this call goes to apache spark which distributes the object over network. </p>
<p>What is the best way to do that.</p>
<p>I also found <a href="https://stackoverflow.com/questions/10252010/serializing-python-object-instance-to-json">this</a> but dont know if it is the best way to do it.</p>
<p>I also read </p>
<blockquote>
<p>Classes, functions, and methods cannot be pickled -- if you pickle an object, the object's class is not pickled, just a string that identifies what class it belongs to.</p>
</blockquote>
<p>So does that mean those classes cant be serialized ?</p>
<p>PS: There would be millions of object of this class as the data is huge. So please provide 2 solution one the easiest and other the most efficient way of doing so.</p>
<p><strong>EDIT :</strong></p>
<p>For clarification i have to use this something like</p>
<pre><code>def myfun():
    **Some Logic **
    t1 = bean(&lt;params&gt;)
    t2 = bean(&lt;params2&gt;)
    temp = list()
    temp.append(t1)
    temp.append(t2)
    return temp
</code></pre>
<p>Now how it is finally called</p>
<pre><code>PairRDD.map(myfun).collect()
</code></pre>
<p>which throws exception</p>
<pre><code>&lt;function __init__ at 0x7f3549853c80&gt; is not JSON serializable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As long as the all arguments you pass to <code>__init__</code> (<code>puid</code>, <code>pogid</code>, <code>bucketId</code>, <code>dt</code>, <code>at</code>) can be serialized there should be no need for any additional steps. If you experience any problems it most likely means you didn't properly distribute your modules over the cluster.</p>
<p>While PySpark automatically distributes variables and functions referenced inside closures, distributing modules, libraries and classes is your responsibility. In case of simples classes creating a separate module and passing it via <code>SparkContext.addPyFile</code> should be just enough:</p>
<pre><code># https://www.python.org/dev/peps/pep-0008/#class-names
from some_module import Bean  

sc.addPyFile("some_module.py")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, for your example pickle will work great. pickle doesn't serialize "functions", it only serializes "data" - so if you have the types you are trying to serialize on the remote script, i.e. if you have the type "bean" imported on the receiving end - you can use pickle or cpickle and everything will work.the mentioned disclaimer stated it doesn't keep the <em>code</em> of the class, meaning if you don't have it imported on the receiving end, pickle won't work for you.</p>
<p>All cross-language serialization solutions (i.e. <code>json</code>, <code>xml</code>) will never provide the ability to transfer class "code" because there's no reasonable way to represent it. If you're using the same language on both ends (like here) there are way to get this to work - you could for example <a href="https://docs.python.org/2/library/marshal.html" rel="nofollow">marshal</a> the object, pickle the result, send it over, receive on receiving end, unpickle and unmarshal and you have an object with it's functions - this is in fact sending the code and <code>eval()</code>-ing it on the receiving end..</p>
<p>Here's a quick example based on your class for pickling object:</p>
<p><strong>test.py</strong></p>
<pre class="lang-py prettyprint-override"><code>import datetime
import pickle

class bean:
    def __init__(self, puid, pogid, bucketId, dt, at) :
        self.puid = puid
        self.pogid = pogid
        self.bucketId = bucketId
        self.dt = (datetime.datetime.today() - datetime.datetime.strptime(dt, "%Y-%m-%d %H:%M:%S")).days
        self.absdt=dt
        self.at = at
    def whoami(self):
        return "%d %d"%(self.puid, self.pogid)

def myfun():
    t1 = bean(1,2,3,"2015-12-31 11:50:25",4)
    t2 = bean(5,6,7,"2015-12-31 12:50:25",8)
    tmp = list()
    tmp.append(t1)
    tmp.append(t2)
    return tmp

if __name__ == "__main__":
    with open("test.data", "w") as f:
        pickle.dump(myfun(), f)
    with open("test.data", "r") as f2:
        obj = pickle.load(f2)
    print "|".join([bean.whoami() for bean in obj])
</code></pre>
<p>running it:</p>
<pre><code>ben@ben-lnx:~$ python test.py 
1 2|5 6
</code></pre>
<p>so you can see pickle works as long as you have the imported type..</p>
</div>
<span class="comment-copy">If you're going to send the objects to something, shouldn't you look at the requirements of the receive? I mean, you're asking here for <i>any</i> way to serialize a python object, but you've linked to a question about <i>json</i> serialization. Do you need json serialization? Have you looked at <code>pickle</code>?</span>
<span class="comment-copy">Yes i looked at pickle and cpickle. i was hoping to find a fuctionality like in java we can get an instance of serializable object. I linked that question because thats the only workaround i found. For pickle all the examples i found we have to specify a file save location for pickled object. But in my case i have to return the serialized object instance from some other function</span>
<span class="comment-copy">Could you explain what is the issue here? It looks like <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a> to me. What are the types of the attributes (puid, pogid, bucketId, dt, at)? Also please fix the indentation.</span>
<span class="comment-copy">Well i think the use case is generic. How to go  about doing this when say my class is a derived class from a couple of parent series and it also has instance of other class, some function and stuff (what i mean there are also custom object) how to do this in that case. Can you please add that to your answer so some links</span>
<span class="comment-copy">There is really nothing to add. All required classes should to placed in module(s) and distributed to the workers. Number of classes or nesting doesn't really affect that. The rest is pretty much a standard pickle with <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">its limitations</a>.</span>
