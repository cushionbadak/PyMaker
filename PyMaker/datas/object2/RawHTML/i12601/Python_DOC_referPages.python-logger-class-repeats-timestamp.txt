<div class="post-text" itemprop="text">
<p>I'm using a 'Logger' class (sourced from another SO answer) in order to write to both a log file and to the terminal simultaneously whenever a print (or similar) command is used.</p>
<p>I've modified the logger so that it prepends all messages with a timestamp.  However, it is also appending the timestamp, which is not desired.  So I end up with the timestamp at both the beginning and the end of every line.</p>
<p>The example code below is modified to replace the actual timestamp code with the literal text "BLAH", to demonstrate that it occurs for any text, and it unrelated to the method used to obtain the timestamp.</p>
<pre><code>class Logger(object):
    def __init__(self):
        self.terminal = sys.stdout
        self.log = open(r"C:\Temp\gis_list2reference.txt", "a")

    def write(self, msg):
        line = "%s  %s" % ("BLAH", msg)
        self.terminal.write(line)
        self.terminal.flush()
        self.log.write(line)
        self.log.flush()

##    #this flush method is needed for python 3 compatibility.
##    def flush(self):
##        pass

sys.stdout = Logger()

print "some log text"
</code></pre>
<p>The output, to both the terminal and the log file, is:</p>
<pre><code>BLAH  some log textBLAH
</code></pre>
<p>How can I avoid the extra "BLAH" (or timestamp) at the end of each line logged?</p>
<p>Why is it getting logged?</p>
<p>EDIT:</p>
<p>As per the accepted answer below, the following code works (although it's clearly not a 'pythonic' neat way to do it:</p>
<pre><code>class Logger(object):
    def __init__(self):
        self.terminal = sys.stdout
        self.log = open(r"C:\Temp\gis_list2reference.txt", "a")

    def write(self, msg):
        if msg != "\n":
            msg = "%s  %s" % (strftime("%Y-%m-%d %H:%M:%S"), msg)
        self.terminal.write(msg)
        #self.terminal.flush()
        self.log.write(msg)
        self.log.flush()

##    #this flush method is needed for python 3 compatibility.
##    def flush(self):
##        pass

sys.stdout = Logger()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you are doing</p>
<pre><code>print "some log test"
</code></pre>
<p>python will call your object twice</p>
<pre><code>yourlogger.write("some log test") #this will output BLAH  some log text
yourlogger.write("\n") #this will output BLAH \n
</code></pre>
<blockquote>
<blockquote>
<p>BLAH  some log textoutput BLAH \n</p>
</blockquote>
</blockquote>
<p>Got it? :)</p>
<p>To avoid this bug you may add a special case for \n or just use a real logging.Logger :)</p>
</div>
<span class="comment-copy">Use the logging module that comes with Python. Create a logger and register a streamhandler and a filehandler. What you are doing is not the pythonic way to solve your problem</span>
<span class="comment-copy">@brunsgaard is correct. Use <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a></span>
<span class="comment-copy">The logging module doesn't appear to write to the terminal, as far as I can tell (from a quick skim through the doco).  I need to write to both terminal and to log file for every 'print' (or equivalent).  Can the logging module do this?</span>
<span class="comment-copy">So the 'print' command uses a separate call for the "\n"?  I didn't realise that.  Your answer seems to be spot on.  I also need to investigate the logger class, I think.</span>
<span class="comment-copy">@SonofaBeach   Cool, Accept it then :). I also think the most pythonic way is the logging module...</span>
<span class="comment-copy">I agree that it's not the most pythonic way, but (as above) does the logging module provide the functionality to log to both the terminal and to a log file simultaneously for each 'print' (or equivalent)?</span>
<span class="comment-copy">Yes, please refer to the logging module docs for superb examples</span>
