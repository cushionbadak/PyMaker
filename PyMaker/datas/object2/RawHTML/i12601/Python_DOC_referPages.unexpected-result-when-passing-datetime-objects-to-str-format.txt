<div class="post-text" itemprop="text">
<p>In Python 2.7, <code>str.format()</code> accepts non-string arguments and calls the <code>__str__</code> method of the value before formatting output:</p>
<pre><code>class Test:
     def __str__(self):
         return 'test'

t = Test()
str(t) # output: 'test'
repr(t) # output: '__main__.Test instance at 0x...'

'{0: &lt;5}'.format(t) # output: 'test ' in python 2.7 and TypeError in python3
'{0: &lt;5}'.format('a') # output: 'a    '
'{0: &lt;5}'.format(None) # output: 'None ' in python 2.7 and TypeError in python3
'{0: &lt;5}'.format([]) # output: '[]   ' in python 2.7 and TypeError in python3
</code></pre>
<p>But when I pass a <code>datetime.time</code> object, I get <code>' &lt;5'</code> as output in both Python 2.7 and Python 3:</p>
<pre><code>from datetime import time
'{0: &lt;5}'.format(time(10,10)) # output: ' &lt;5'
</code></pre>
<p>Passing a <code>datetime.time</code> object to <code>str.format()</code> should either raise a <code>TypeError</code> or format <code>str(datetime.time)</code>, instead it returns the formatting directive. Why is that?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>'{0: &lt;5}'.format(time(10, 10))</code> results in call to <code>time(10, 10).__format__</code>, which returns <code>&lt;5</code> for the <code>&lt;5</code> format specifier:</p>
<pre><code>In [26]: time(10, 10).__format__(' &lt;5')
Out[26]: ' &lt;5'
</code></pre>
<p>This happens because <a href="https://docs.python.org/3/library/datetime.html#datetime.time.__format__" rel="nofollow"><code>time_instance.__format__</code></a> attempts to format <code>time_instance</code> using <a href="https://docs.python.org/3/library/datetime.html#datetime.time.strftime" rel="nofollow"><code>time.strftime</code></a> and <code>time.strftime</code> doesn't understand the formatting directive.</p>
<pre><code>In [29]: time(10, 10).strftime(' &lt;5')
Out[29]: ' &lt;5'
</code></pre>
<hr/>
<p>The <code>!s</code> conversion flag will tell <code>str.format</code> to call <code>str</code> on the <code>time</code> instance before rendering the result - it will call <code>str(time(10, 10)).__format__(' &lt;5')</code>:</p>
<pre><code>In [30]: '{0!s: &lt;5}'.format(time(10, 10))
Out[30]: '10:10:00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>datetime</code> objects support the <code>datetime.strftime()</code> options when formatting:</p>
<pre><code>&gt;&gt;&gt; from datetime import time
&gt;&gt;&gt; '{0:%H}'.format(time(10,10))
'10'
</code></pre>
<p>That format includes support for literal text:</p>
<pre><code>&gt;&gt;&gt; time(10, 10).strftime('Hour: %H')
'Hour: 10'
</code></pre>
<p>The <code>&gt;5</code> format is treated as literal text. You can fit your time into a 5-character column using the following format:</p>
<pre><code>'{0:%H:%M}'
</code></pre>
</div>
<span class="comment-copy">You didn't provide an answer to my question; so have to upvote elsewhere ;-)</span>
