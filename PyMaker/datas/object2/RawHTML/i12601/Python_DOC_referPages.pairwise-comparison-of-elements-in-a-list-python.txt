<div class="post-text" itemprop="text">
<p>Given a list below:</p>
<pre><code>snplist = [[1786, 0.0126525], [2463, 0.0126525], [2907, 0.0126525], [3068, 0.0126525], [3086, 0.0126525], [3398, 0.0126525], [5468,0.012654], [5531,0.0127005], [5564,0.0127005], [5580,0.0127005]]
</code></pre>
<p>I want to do a pairwise comparison of the second element in each sublist of the list, i.e. compare to see <code>0.0126525</code> from <code>[1786, 0.0126525]</code> is equal to <code>0.0126525</code> from <code>[2463, 0.0126525]</code> and so forth, if so, print the output as indicated in the code.</p>
<p>Using for loop, I achieve the result:</p>
<pre><code>for index, item in enumerate(snplist, 0):
    if index &lt; len(snplist)-1:
        if snplist[index][1] == snplist[index+1][1]:
            print snplist[index][0], snplist[index+1][0], snplist[index][1]
</code></pre>
<p>When doing pairwise comparisons of the elements of a loop using list index, I always get into the error of <code>'index out of range'</code> because of the last element. I solve this problem by adding a condition </p>
<pre><code>if index &lt; len(snplist)-1:
</code></pre>
<p>I don't think this is the best way of doing this. I was wondering if there are more elaborate ways of doing pairwise comparisons of list elements in python?</p>
<p>EDIT: I had not thought about the level of tolerance when comparing floats. I would consider two floats with <code>0.001</code> difference as being equal.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>zip</code> the <code>snplist</code> with the same list excluding the first element, and do the comparison, like this</p>
<pre><code>for l1, l2 in zip(snplist, snplist[1:]):
    if l1[1] == l2[1]:
      print l1[0], l2[0], l1[1]
</code></pre>
<p>Since you are comparing floating point numbers, I would recommend using <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer"><code>math.isclose</code></a> function from Python 3.5, like this</p>
<pre><code>def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
    return abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)
</code></pre>
<p>As you want to have 0.001 tolerance, you can do the comparison like this</p>
<pre><code>if is_close(l1[1], l2[1], 0.001):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest that you use <code>izip</code> for this to create a generator of item-neighbor pairs. Leaving the problem of comparing floating points aside, the code would look like this:</p>
<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; lst = [[1,2], [3,4], [5,4], [7,8], [9,10], [11, 10]]
&gt;&gt;&gt; for item, next in izip(lst, lst[1:]):
...     if item[1] == next[1]:
...         print item[0], next[0], item[1]
... 
3 5 4
9 11 10
</code></pre>
<p>Remember to specify a tolerance when comparing floats, do <em>not</em> compare them with == !</p>
<p>You could define an <code>almost_equal</code> function for this, for example:</p>
<pre><code>def almost_equal(x, y, tolerance):
    return abs(x-y) &lt; tolerance
</code></pre>
<p>Then in the code above, use <code>almost_equal(item[1], next[1], tolerance)</code> instead of the comparison with ==.</p>
</div>
<span class="comment-copy">You are comparing floats. Define "equal". What's the tolerance?</span>
<span class="comment-copy">hmm, OP is using Python2.7, how do you get <code>math.is_close</code> imported?</span>
<span class="comment-copy">@timgeb It is a simple two-liner. I hope he can copy paste and use it :-)</span>
