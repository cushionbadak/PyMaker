<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">List of lists changes reflected across sublists unexpectedly</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I have the following piece of code as a problem.</p>
<pre><code>list = [ [ ] ] * 5
print list
list[0].append(1)
print list
</code></pre>
<p>The first line prints <code>[[][][][][]]</code> which is what it should print 
but the second print gives</p>
<p><code>[[1][1][1][1][1]]</code></p>
<p>why does this happen? it is supposed to append only to the first list. </p>
</div>
<div class="post-text" itemprop="text">
<p>In</p>
<pre><code>list = [ [] ] * 5
</code></pre>
<p>...you're creating five <strong>references</strong> to the same inner list. Thus, appending to one of them appends to them all.</p>
<hr/>
<p>Consider instead:</p>
<pre><code>l = [ [] for _ in range(5) ]
</code></pre>
<p>...which constructs a new list for each element.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html?highlight=id#id" rel="nofollow"><code>id</code></a> you can see that they refer to the same object.:</p>
<pre><code>&gt;&gt;&gt; l = [[]]*5
&gt;&gt;&gt; for i in l:
    print id(i)


42277424
42277424
42277424
42277424
42277424
&gt;&gt;&gt; 
&gt;&gt;&gt; l[0].append(1)
&gt;&gt;&gt; l
[[1], [1], [1], [1], [1]]
&gt;&gt;&gt; id(1)
32851648
&gt;&gt;&gt; for lst in l:
    for item in lst:
        print 'item : {0}, list : {1}'.format(id(item), id(lst))


item : 32851648, list : 42277424
item : 32851648, list : 42277424
item : 32851648, list : 42277424
item : 32851648, list : 42277424
item : 32851648, list : 42277424
</code></pre>
<p>As you can see, <code>l</code> actually have five same references to one object, <code>[]</code>. So if you change anyone of them, you will see the same effect on the rest items</p>
</div>
<span class="comment-copy">Not to answer your question, though you should avoid variable naming as built-in names...<code>list</code> is a built-in name</span>
<span class="comment-copy"><code>list</code> is a Python built-in name , dont use it for a variable name</span>
<span class="comment-copy">alright i just wanted to make an example.this is not the exact code.</span>
<span class="comment-copy">why am i being downvoted?</span>
<span class="comment-copy">As an aside, a close cousin to this bug is what happens when one passes a list (or other mutable object) as a default parameter to a function -- every time the function is called without that parameter being overridden, a reference to that exact same object is used.</span>
<span class="comment-copy">thanks that helps.</span>
