<div class="post-text" itemprop="text">
<p>I have a file in which my data is like:</p>
<pre><code>1 [0,1, 4, 89]     
2 [3, 56, 6]     
3 [3,4,0]
</code></pre>
<p>And so on.</p>
<p>I'd like to read this file to access data line by line in my script so I try this to read my file and memorize it in a dictionary:</p>
<pre><code>dictionary = {}

with open('file.txt') as f:
    for line in f:
        nb, list = line.split(' ')
        dictionary[nb] = list 
</code></pre>
<p>Then I will do something like:</p>
<pre><code>for e in dictionary:
    etc.
</code></pre>
<p>I have this error:</p>
<pre><code>too many values to unpack
</code></pre>
<p>because I don't know how to deal with the second split element which is a list.</p>
<p>Is there an other way to access and work with any input file easily?</p>
</div>
<div class="post-text" itemprop="text">
<p>First at all, you can set a <code>maxsplit</code> argument of <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code></a>. From the document:</p>
<blockquote>
<p><code>str.split(sep=None, maxsplit=-1)</code> </p>
<p>Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most <code>maxsplit+1</code> elements). If maxsplit is not specified or <code>-1</code>, then there is no limit on the number of splits (all possible splits are made).</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; s = '1 [0,1, 4, 89]'
&gt;&gt;&gt; s.split(' ', 1)
['1', '[0,1, 4, 89]']
&gt;&gt;&gt; s.split(' ')
['1', '[0,1,', '4,', '89]']

&gt;&gt;&gt; s.split(' ')[1]
'[0,1,'
&gt;&gt;&gt; s.split(' ', 1)[1]
'[0,1, 4, 89]'
</code></pre>
<hr/>
<p>Then you need convert the <em>string of list</em> to a <em>real list</em>. I'd recommend use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a>. From the document:</p>
<blockquote>
<p><code>ast.literal_eval(node_or_string)</code></p>
<p>Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>.</p>
</blockquote>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = '1 [0,1, 4, 89]'
&gt;&gt;&gt; s.split(' ', 1)[1]
'[0,1, 4, 89]'
&gt;&gt;&gt; ast.literal_eval(s.split(' ', 1)[1])
[0, 1, 4, 89]
&gt;&gt;&gt; type(ast.literal_eval(s.split(' ', 1)[1]))
&lt;class 'list'&gt;
&gt;&gt;&gt; type(s.split(' ', 1)[1])
&lt;class 'str'&gt;
</code></pre>
<hr/>
<p>If you need remove the <code>\n</code> after the string, just use <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip()</code></a>. From the document:</p>
<blockquote>
<p><code>str.strip([chars])</code></p>
<p>Return a copy of the string with the leading and trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace.</p>
</blockquote>
<p>Use it like this:</p>
<pre><code>&gt;&gt;&gt; '   1 [0,1, 4, 89]   '.strip()
'1 [0,1, 4, 89]'
&gt;&gt;&gt; '1 [0,1, 4, 89]\n'.strip()
'1 [0,1, 4, 89]'
&gt;&gt;&gt; 
</code></pre>
<p>It remove all tabs, newlines, spaces before and after the string, If you just want remove the spaces, newlines before or after the string, take a look at <a href="https://docs.python.org/3/library/stdtypes.html#str.lstrip" rel="nofollow"><code>str.lstrip()</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow"><code>str.rstrip()</code></a>. </p>
<hr/>
<p>So you can write your code like this:</p>
<pre><code>import ast
dictionary = {}

with open('file.txt') as f:
    for line in f:
        key, value = line.strip().split(1)
        dictionary[key] = value
</code></pre>
<p>If you want the <code>dictionary</code>'s keys be int objects, just use <code>int()</code> function to convert it like:</p>
<pre><code>import ast
dictionary = {}

with open('file.txt') as f:
    for line in f:
        key, value = line.strip().split(' ', 1)
        dictionary[int(key)] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a save eval use <a href="https://docs.python.org/3/library/ast.html?highlight=literal_eval#ast.literal_eval" rel="nofollow">ast.literal_eval</a>:</p>
<pre><code>from ast import literal_eval

data = {}
with open('file.txt') as fobj:
    for line in fobj:
        key, rest = line.split(None, 1)
        data[key] = literal_eval(rest)


&gt;&gt;&gt; data
{'1': [0, 1, 4, 89], '2': [3, 56, 6], '3': [3, 4, 0]}
</code></pre>
<p>From the docs:</p>
<blockquote>
<pre><code>ast.literal_eval(node_or_string)
</code></pre>
<p>This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Would this do?</p>
<pre><code>import ast
d = dict()
with open('file.txt') as f:
    for line in f:
        k, l = line.split(' ', 1)
        d[k] = ast.literal_eval(l)

print(d)
</code></pre>
<p>it produces</p>
<pre><code>{'3': [3, 4, 0], '1': [0, 1, 4, 89], '2': [3, 56, 6]}
</code></pre>
<p>In case you want the key to be an integer instead of a string just do</p>
<pre><code>d[int(k)] = ast.literal_eval(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>maxsplit</code> argument and <code>ast.literal_eval()</code>:</p>
<pre><code>import ast
dictionary = {}

with open('file.txt') as f:
    for line in f:
        nb, l = line.split(maxsplit=1)
        dictionary[nb] = ast.literal_eval(l)
</code></pre>
<p>Note that I've changed the name of the <code>list</code> to something that doesn't mask the built-in function <code>list()</code>, and used the default delimiter of any whitespace.</p>
</div>
<span class="comment-copy">look at this, is what you get by spliting the line <code>['1', '[0,1,', '4,', '89]']</code></span>
<span class="comment-copy">Thank you ! It works :),  if I may, how to avoid /n at the end of lists ? I can't specified that values are integer (like we can do it easily for keys when we construct the dictionary).</span>
<span class="comment-copy">@H.eyXD: Well, if an answer is helpful, remember mark it as accepted answer. Please check our <a href="https://stackoverflow.com/tour">tour</a> and <a href="https://stackoverflow.com/help">help center</a> for more details.</span>
<span class="comment-copy">@H.eyXD: Okay, I've edited my answer.</span>
<span class="comment-copy">Thank you again for your explanation and your help :)</span>
<span class="comment-copy">I can't do this because split() do not accept any argument (maybe because I'm working with python 2.7) ?</span>
<span class="comment-copy">@H.eyXD - I've adjusted this question's tags to account for this information. You'll have to use one of the answers with <code>(' ', 1)</code>. Pynchia, I'd recommend <code>ast.literal_eval()</code> over <code>eval()</code> for this sort of thing.</span>
<span class="comment-copy">@TigerhawkT3 hey, mine was with <code>(' ', 1)</code>... I changed it because it looked nicer to explicitate the parameter name, as you did...  I'll change it back.... BTW, it wodl be great to know the python version beforehand</span>
<span class="comment-copy">@TigerhawkT3 thank you for the heads-up on <code>literal_eval</code></span>
