<div class="post-text" itemprop="text">
<p>I'm trying to create a list of available ports in Python. I am following <a href="http://www.pythonforbeginners.com/code-snippets-source-code/port-scanner-in-python">this tutorial</a>, but instead of printing the open ports, I'm adding them to a list.</p>
<p>Initially, I had something like the following:</p>
<pre><code>available_ports = []

try:
    for port in range(1,8081):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((remoteServerIP, port))
        if result == 0:
            available_ports.append(port)
        sock.close()

# ...
</code></pre>
<p>This clearly works fine, but it is well known that <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops">comprehensions are faster than loops</a>, so I now have:</p>
<pre><code>try:
    available_ports = [port for port in range(1, 8081) if not socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex((remoteServerIP, port))]

# ...
</code></pre>
<p>I assumed the sockets wouldn't be closed, but I tested it with the following:</p>
<pre><code>try:
    available_ports = [port for port in range(1, 8081) if not socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex((remoteServerIP, port))]

    for port in range(1,8081):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((remoteServerIP, port))
        if result == 0:
            print("Port {}: \t Open".format(port))
        sock.close()

# ...
</code></pre>
<p>and indeed the open ports were printed.</p>
<p>Why are the sockets closed in the comprehension but not the for loop? Can I rely on this behavior or is this a red herring?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are no references left to your opened sockets, which means they are garbage collected. Sockets are closed <a href="https://docs.python.org/3/library/socket.html#socket.socket.close" rel="nofollow">as soon as they are garbage collected</a>.</p>
<p>Exactly when the sockets from your list comprehension are garbage collected differs between Python implementations. CPython uses reference counting and therefore closes the sockets as soon as the last reference is dropped. Other implementations might defer the closing to the next GC cycle.</p>
</div>
<span class="comment-copy">Interesting. I feel like even if there were a way to manually GC the references, it wouldn't be pythonic. I also don't think there's a way to close the sockets within the comprehension (no <code>with open(socket) as s</code>). I might need to just eat the few milliseconds it takes to <code>append</code> the ports.</span>
<span class="comment-copy">That is a different question, really, but if you need to guarantee closing of the socket I think you should just prefer the <code>for</code> loop.</span>
<span class="comment-copy">No questions - just musings. I appreciate the help and the references.</span>
