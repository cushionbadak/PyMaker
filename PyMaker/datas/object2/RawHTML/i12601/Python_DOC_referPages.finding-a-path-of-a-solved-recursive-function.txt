<div class="post-text" itemprop="text">
<p>In the code below, I got the optimal value of a recursive function that I set.<br/>
Now I want to get the values that helped build it - I mean, know which choice (or a "ride" (this is my decision)) was used in each step, and return that also as a string/array/somehow.</p>
<p><strong>thestory</strong> : i have 6 rides, in every step i need to choose whether to go on the ride im on again, or switch. every ride has a fun rate for each time i go on it and i want to maximize the fun. right now i have the optimal value but not the rides that i went on that led me to it</p>
<p>The function F is the main focus here.</p>
<pre><code>import math
import numpy as np

#fun rate for each ride,per loop
def funPerRide(rideNum,loopsNum):
    if rideNum==1:
        return 0

    if rideNum==2:
        return 100-np.power((4*loopsNum-10),2)

    if rideNum==3:
        return 50-(1000*np.power(np.e,(-loopsNum/2))/(5*loopsNum+20))

    if rideNum==4:
        return 4*loopsNum

    if rideNum==5:
        return 2.5*np.power(loopsNum,2)

    if rideNum==6:
        return 50*np.power(np.e,(-2*loopsNum+4))


def F(totalTime,timeLeft,rideNum,loopOnCurrRide):
    #time of line+operation of ride
    totalTimePerRide={1:0,2:40,3:15,4:20,5:23,6:11}
    #time of operation of rides
    operationTimePerRide={1:0,2:4,3:5,4:8,5:3,6:6}
     #unfeasable conditions:        
    if timeLeft&lt;0:
        return -np.inf

    if timeLeft+loopOnCurrRide*operationTimePerRide[rideNum]&gt;totalTime:
        return -np.inf

    if loopOnCurrRide&gt;3:
        return -np.inf
    #edge condition
    if timeLeft == 0:
        return 0

    #fun if i stay on the ride im on right now
    staying = funPerRide(rideNum,loopOnCurrRide+1)-funPerRide(rideNum,loopOnCurrRide)+F(totalTime,timeLeft-operationTimePerRide[rideNum],rideNum,loopOnCurrRide+1)

    #calculating fun if i switch to the maximum-fun-ride, that is not the ride im currently at
    switching = -1
    whichRide=-1
    for i in range(1,7):
        if i&gt;rideNum:
            switchOption = funPerRide(i,loopOnCurrRide)+F(totalTime,timeLeft-4.5-totalTimePerRide[i],i,1)
            if switchOption&gt;switching:
                switching, whichRide=switchOption,i

    #calculating maximum fun between switching and staying
    maxval,maxride=max((staying,rideNum),(switching,whichRide))
    path.append(maxride)
    maxval=float(maxval)

    return float(maxval)

path = []    
print(F(120,120,1,0),path)  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your function F can return a pair of two values: first - optimal answer, second - optimal path as a list of indexes.</p>
<pre><code>def F(totalTime, timeLeft, rideNum, loopOnCurrRide):
    # time of line+operation of ride
    totalTimePerRide = {1: 0, 2: 40, 3: 15, 4: 20, 5: 23, 6: 11}
    # time of operation of rides
    operationTimePerRide = {1: 0, 2: 4, 3: 5, 4: 8, 5: 3, 6: 6}
    if timeLeft + loopOnCurrRide * operationTimePerRide[rideNum] &gt; totalTime:
        return -10, []

    if loopOnCurrRide &gt; 3:
        return -10, []

    if timeLeft == 0:
        return 0, []

    staying, staying_path = F(totalTime, timeLeft - operationTimePerRide[rideNum], rideNum, loopOnCurrRide + 1)
    staying += funPerRide(rideNum, loopOnCurrRide + 1) - funPerRide(rideNum, loopOnCurrRide)
    staying_path = [-1] + staying_path

    switching = -1
    switching_path = []
    for i in range(1, 7):
        if i &gt; rideNum:
            switchOption, switchOption_path = F(totalTime, timeLeft - 4.5 - totalTimePerRide[i], i, 1)
            switchOption += funPerRide(i, loopOnCurrRide)
            if switchOption &gt; switching:
                switching = switchOption
                switching_path = [i] + switchOption_path

    return max((staying, staying_path), (switching, switching_path))


answer, path = F(120, 120, 1, 0)
</code></pre>
</div>
<span class="comment-copy">I see a case of severe hardcoding. You can replace all those countless if-statements with a one-liner using a dictionary.</span>
<span class="comment-copy">true. i will make it all a dictionary/list, but this isn't the current issue i'm afraid.. i need to think of a way to record the path</span>
<span class="comment-copy">Hey @DanielleKapon, please comment the code whenever you can and use camelCase for readability's sake. And welcome to Python</span>
<span class="comment-copy">@aim110k fixed it, i believe. is the code clearer now?</span>
<span class="comment-copy">Yup, working on it. In the mean time you might wanna take a look at <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer">docs.python.org/3/library/traceback.html</a> and <a href="http://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program" title="how to print the full traceback without halting the program">stackoverflow.com/questions/3702675/â€¦</a></span>
<span class="comment-copy">with this I am getting: TypeError: unsupported operand type(s) for +: 'int' and 'tuple' on the row of the staying,staying path. moreover if we put staying,staying_path and only recieve one value to it, what does it do?</span>
<span class="comment-copy">@DanielleKapon, sorry, i've edited the code</span>
<span class="comment-copy">This is getting really close! now i am getting answer= 2728.90750166 (like before) and path = [6], which is probably the last option i'm in, but I am still missing the whole path... if I just put this option that i just went to ride 6, i get a much smaller value for the answer</span>
<span class="comment-copy">@DanielleKapon, implementation of path is correct, but your code seems buggy. For example, check the statement "timeLeft - loopOnCurrRide * operationTimePerRide[rideNum] &gt; totalTime". timeLeft variable should decrease with each round of recursion, and possible you meant "if timeLeft - loopOnCurrRide * operationTimePerRide[rideNum] &lt; 0:"?</span>
<span class="comment-copy">I FOUND IT! i forgot 1 multiplier in my fun functions. thank you so so much! have a wonderful weekend</span>
