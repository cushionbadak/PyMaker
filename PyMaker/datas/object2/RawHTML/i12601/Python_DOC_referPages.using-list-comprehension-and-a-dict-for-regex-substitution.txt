<div class="post-text" itemprop="text">
<p>The following Python 3 code loops through a list of strings and uses a regex to replace some text in each string.</p>
<p>The strings here are straightforward but they are likely to be more complex and far more numerous in a real-world situation, hence my decision to use <code>re.sub()</code> rather than <code>str.replace()</code>.</p>
<pre><code>all = ("this line has no hits",
       "a letter to tom from peter",
       "today bonny went to school",
       "harry made some cake")

for myitem in all:
    newitem = re.sub("harry","sally",myitem)
    newitem = re.sub("tom","jerry",newitem)
    newitem = re.sub("bonny","clyde",newitem)
    print(newitem)
</code></pre>
<p>This seems to work as expected:</p>
<pre><code>&gt;&gt;&gt; this line has no hits
a letter to jerry from peter
today clyde went to school
sally made some cake
&gt;&gt;&gt; 
</code></pre>
<p>In real life there will be a large number of strings, which would make for a messy block of code. I thought there might be a neater, more Pythonic way to do this by defining the regex pairs in a <code>dict</code> and using a list comprehension. So I tried this:</p>
<pre><code>mydict = {'harry':'sally','tom':'jerry','bonny':'clyde'}

newall = [re.sub(i, mydict[i], j) for i in mydict for j in all]
print(newall)
</code></pre>
<p>This doesn't work, in that it doesn't return a list of strings with substituted text, but I don't understand why it doesn't work.</p>
<p>My question/s are:</p>
<ul>
<li>What am I doing wrong in the above example?</li>
<li>Is there a better way to approach the problem of doing a large number of substitutions involving long-ish strings?</li>
</ul>
<p>(NB I may have missed the obvious here as I've only been looking at Python for a couple of days; my background is in R and Perl.) </p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions with two lists are nasty. They're error-prone and hard to read. Why not simply use two loops?:</p>
<pre><code>all = ("this line has no hits",
       "a letter to tom from peter",
       "today bonny went to school",
       "harry made some cake")

mydict = {'harry':'sally','tom':'jerry','bonny':'clyde'}

output = []
for line in all:
    for search, replace in mydict.items():
        line = re.sub(search, replace, line)
    output.append(line)

print(output)
</code></pre>
<blockquote>
<p>['this line has no hits', 'a letter to jerry from peter', 'today clyde went to school', 'sally made some cake']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You need to use another functional programming concept, reduce. </p>
<p>You want to apply <strong>each</strong> key-value in mydict, one after the other, to the same string, resulting in <strong>one</strong>, final string. When this is the case (using a multi-valued dict/list/set to obtain a single answer), you use reduce. Like so:</p>
<pre><code>import re

# copied from question
all = ("this line has no hits",
       "a letter to tom from peter",
       "today bonny went to school",
       "harry made some cake")

mydict = {'harry':'sally','tom':'jerry','bonny':'clyde'}

# define the function used in reduce
def replace_strings(line, mydictkey):
    return re.sub(mydictkey, mydict[mydictkey], line)

for line in all:
    print reduce(replace_strings, mydict.keys(), line)
</code></pre>
<p>And in list comprehension form:</p>
<pre><code>newall = [reduce(replace_strings, mydict.keys(), line) for line in all]
print newall
</code></pre>
<p>There's some good basic stuff on functional programming constructs (reduce, list comprehension, filter): <a href="https://docs.python.org/2/tutorial/datastructures.html#functional-programming-tools" rel="nofollow">https://docs.python.org/2/tutorial/datastructures.html#functional-programming-tools</a></p>
</div>
<span class="comment-copy">What is the output of <code>print(newall)</code>?</span>
<span class="comment-copy">Nevermind, what your solution does is some sort of cartesian product of the items in <code>all</code> and the items in <code>mydict</code>. See the answers for solutions :)</span>
<span class="comment-copy">Btw, <code>all</code> is a python built-in function that you may not want to override.</span>
<span class="comment-copy">Right. mixed with python2 here. Should be okay now.</span>
<span class="comment-copy">I would change <code>all</code> to something else, that's a <a href="https://docs.python.org/3/library/functions.html?highlight=all#all" rel="nofollow noreferrer">built-in method</a> name.</span>
<span class="comment-copy">I'd agree, but since this seems like a one-off script I wanted to follow the OP's naming</span>
<span class="comment-copy">Thank you for this answer. I am using Python 3, which appears to not have <code>reduce</code>?</span>
<span class="comment-copy">Hm, looks like you have to import and use functools: <a href="https://docs.python.org/3.0/whatsnew/3.0.html" rel="nofollow noreferrer">docs.python.org/3.0/whatsnew/3.0.html</a>  I guess it's explicitly non-recommended, but I quite like reduce personally</span>
