<div class="post-text" itemprop="text">
<p>I have two files containing timestamps and parameters. file1 has much more entries than file2. The parameters of file1 were sampled every minute, whereas parameters of file2 were sampled irregularly approx. every 5 minutes. I would like to have for every existing entry in file 2 the equivalent entries of file1. How to do that?</p>
<pre><code>`file1 = pd.read_csv('file1.csv', sep=',', header=1, parse_dates=True, na_values=['NAN'])
</code></pre>
<p><code>file2 = pd.read_csv('file2.csv', sep=',', header=1, parse_dates=True, na_values=['NAN'])</code></p>
<p>file1 looks like this:
<a href="https://i.stack.imgur.com/2nGiJ.png" rel="nofollow noreferrer">enter image description here</a></p>
<p>file2 looks like this:
<a href="https://i.stack.imgur.com/zwWt6.png" rel="nofollow noreferrer">enter image description here</a></p>
<p>To give an example, I want to have a new row which contains for the entry in file2: 2019-02-15 00:01:02 the equivalent value from file1 e.g. from the parameter BV_iDL_BOX that was taken at the same minute and date: 2019-02-15 00:01</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what your data looks like and your expected outome, so hopefully this will help a bit:</p>
<p><strong>Step 1: Create Dataframe</strong></p>
<pre><code>file1 = pd.date_range('2018-01-01', periods=5, freq='s')
file2 = pd.date_range('2018-01-01', periods=5, freq='5s')
file1 = pd.DataFrame(idx)
file1['column2'] = [1,2,3,4,5]
file2 = pd.DataFrame(id3)
file2['column3'] = [1,2,3,4,5]
</code></pre>
<p><strong>Step 2: Join Dataframe</strong></p>
<pre><code>file1.join(file2, how='outer')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming you are asking <em>'how can I get the frequency of 1 minute in my file2 when I have a 5 minute frequency'</em>.</p>
<p>Instead what you could do is make a loop that discards rows from file1, so that you essentially have 5 minutes between observations in file1, making the files equal. It would go something like this (code doesn't fully work)</p>
<pre><code>rows = 0
for index, row in df.iterrows():

    if(rows &gt; 0):
        df.drop(df.index[[index])
        if(rows &gt; 4):
            rows = 0
    rows = rows + 1
</code></pre>
<p>Else what you are referring to is actually imputing the values, so that file2 gets the frequency of 1 minute between each observation. I cannot see a solution that wouldn't result in data issues with this one.</p>
<p>A third option is discarding the dataset with 5 minute frequency and slice file1 into two datasets.</p>
</div>
<span class="comment-copy">not super sure what you want, but sounds like a join may cover it, <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/reference/api/â€¦</a></span>
<span class="comment-copy">join would only work on predefined and regular frequencies, not if you have a sample at 05 then 07 then 12 and so on...</span>
<span class="comment-copy">why not create a column with a rounded timestamp for your join key?</span>
<span class="comment-copy">No sorry thats not what I want. There are other threads that explain how to get 1 minute values out of 5 minute values.</span>
