<div class="post-text" itemprop="text">
<p>How can I run a bunch of imports and path appends from the interpreter with one command/import? If I import another module that runs the commands for me the imports are not available in main namespace. Similar to running a bash script that modifies/adds commands and variables to the current session.</p>
<p>ex.</p>
<pre><code>import os, ...
sys.path.append(...)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, you're just looking for the <code>from … import …</code> statement. For example:</p>
<p>lotsostuff.py:</p>
<pre><code>import json
def foo(): pass
</code></pre>
<p>Now:</p>
<pre><code>$ python3.3
&gt;&gt;&gt; from lotsostuff import *
&gt;&gt;&gt; json
&lt;module 'json' from '/usr/local/lib/python3.3/json/__init__.py'&gt;
&gt;&gt;&gt; foo
&lt;function lotsostuff.foo&gt;
</code></pre>
<hr/>
<p>However, you might want to consider a different alternative. If you're just trying to control the startup of your interpreter session, you can do this:</p>
<pre><code>$ PYTHONSTARTUP=lotsostuff.py
$ python3.3
&gt;&gt;&gt; json
&lt;module 'json' from '/usr/local/lib/python3.3/json/__init__.py'&gt;
&gt;&gt;&gt; foo
&lt;function __main__.foo&gt;
</code></pre>
<p>Notice the difference in the last line. You're now running <code>lotsostuff</code> in the <code>__main__</code> namespace, rather than running in a separate namespace and grabbing all of its members.</p>
<hr/>
<p>Similarly:</p>
<pre><code>$ python3.3 -i lotsostuff.py
&gt;&gt;&gt; json
&lt;module 'json' from '/usr/local/lib/python3.3/json/__init__.py'&gt;
</code></pre>
<p>You'd normally use <code>PYTHONSTARTUP</code> if you want to do this every time in your session, <code>-i</code> if you want to do it just this once.</p>
<hr/>
<p>If you want to do the same thing in the middle of a session instead of at startup… well, you can't do it directly, but you can come pretty close with <a href="http://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec</code></a> (Python 3.x) (or <a href="http://docs.python.org/2/library/functions.html#execfile" rel="nofollow"><code>execfile</code></a> in Python 2.x).</p>
<hr/>
<p>If you really want to do <em>exactly</em> what you described—importing a module, as a normal import, except merged into your namespace instead of in its own—you'll need to customize the import process. This isn't that hard with <a href="http://docs.python.org/3/library/importlib.html" rel="nofollow"><code>importlib</code></a>; if you're not in Python 3.2 or later, you'll have a lot more work to do it with <a href="http://docs.python.org/2/library/imp.html" rel="nofollow"><code>imp</code></a>.</p>
<hr/>
<p>That's pretty much the difference between <code>. ./foo</code> instead of just <code>./foo</code> in a <code>bash</code> script that I think you were looking for.</p>
<p>If you're using <a href="http://ipython.org" rel="nofollow"><code>ipython</code></a>, there are even cooler options. (And if you're not using <code>ipython</code>, you might want to check it out.)</p>
</div>
<span class="comment-copy">Are you asking how to get the names from that module into your main namespace? That's just <code>from foo import *</code> instead of <code>import foo</code>. Or are you asking how to make the module itself reach outward and force modules onto you? Or something different?</span>
<span class="comment-copy">Thanks! The -i flag was just what I was looking for.</span>
