<div class="post-text" itemprop="text">
<p>First time Python user and I am lost.  I need to create a table from a list that displays the daily temperature and the running average of temperature up to that day.</p>
<pre><code>xData = arange(1,32)    
tData = [86,87,84,86,86,86,84,83,90,89,88,85,86,79,83,81, \
     75,80,81,85,81,88,89,87,84,85,86,88,88,90,90]
avg = [86.]  # First value for monthly avg high temp is just the Day 1 temp
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A running average is just, for each value in a list, the average of all of the values up to that one. For a stripped-down version of your example:</p>
<pre><code>&gt;&gt;&gt; tData = [86,87,84,86]
</code></pre>
<p>The running averages are <code>86/1</code>, <code>(86+87)/2</code>, <code>(86+87+84)/3</code>, and <code>(86+87+84+86)/4</code>.</p>
<p>So, at each index, the running average is the running total, dividing by (index + 1).</p>
<p>You can get the running totals with <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>accumulate</code></a>:</p>
<pre><code>&gt;&gt;&gt; list(accumulate(tData))
[86, 173, 257, 343]
</code></pre>
<p>And you can get the (1-based) indexes with <code>enumerate</code>:</p>
<pre><code>&gt;&gt;&gt; list(enumerate(accumulate(tData, start=1))
[(1, 86), (2, 73), (3, 257), (4, 343)]
</code></pre>
<p>So, just divide:</p>
<pre><code>&gt;&gt;&gt; [total / index for index, total in enumerate(accumulate(tData, start=1))]
[86.0, 86.5, 85.66666666666667, 85.75]
</code></pre>
<hr/>
<p>Or using <code>statistics</code> in Python 3.4, or its backport/predecessor <a href="https://pypi.python.org/pypi/stats/" rel="nofollow"><code>stats</code></a> for 3.1-3.3:</p>
<pre><code>&gt;&gt;&gt; from stats import running_average
&gt;&gt;&gt; running_average(tData)
[86, 86.5, 85.66666666666667, 85.75]
</code></pre>
<hr/>
<p>Of course you can always do it explicitly if you prefer:</p>
<pre><code>&gt;&gt;&gt; running_sum, running_sums = 0, []
&gt;&gt;&gt; for value in tData:
...     running_sum += value
...     running_sum.append(running_sum)
&gt;&gt;&gt; [value / index for index, value in enumerate(running_sums, start=1)]
[86, 86.5, 85.66666666666667, 85.75]
</code></pre>
<p>… or even:</p>
<pre><code>&gt;&gt;&gt; running_sum, running_averages = 0, []
&gt;&gt;&gt; for index, value in enumerate(tData, start=1):
...     running_sum += value
...     running_averages.append(running_sum / index)
&gt;&gt;&gt; running_averages
[86, 86.5, 85.66666666666667, 85.75]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd go with this:</p>
<pre><code>def runningAvgs(data):
    avg = data[0]
    for i, d in enumerate(data[1:], start=1):
        yield avg
        avg = ((i * avg) + d) / (i + 1.0)
    yield avg

tData = [86,87,84,86,86,86,84,83,90,89,88,85,86,79,83,81, \
     75,80,81,85,81,88,89,87,84,85,86,88,88,90,90]

print list(runningAvgs(tData))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another way to do it:</p>
<pre><code>def cumSeries(series):
    result = [0]
    for s in series:
        result.append(s + result[-1])
    return result

def runningAvg(series):
    cs = cumSeries(series)
    return [(cs[i] - cs[0]) / float(i) for i in range(1, len(cs))]


tData = [86,87,84,86,86,86,84,83,90,89,88,85,86,79,83,81, \
     75,80,81,85,81,88,89,87,84,85,86,88,88,90,90]

print runningAvg(tData)
</code></pre>
<p>Using cumulative series is a very useful way of working with sums over parts of a series.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to do it using <a href="https://docs.python.org/3.5/library/itertools.html" rel="nofollow noreferrer">itertools</a> and <a href="https://docs.python.org/3.5/library/operator.html" rel="nofollow noreferrer">operators</a></p>
<pre><code>from itertools import starmap, accumulate
from operator import add

def moving_average(data):
   moving_sum = enumerate(accumulate(data, add)), start=1)
   return starmap(lambda index, elem: elem / index, moving_sum)
</code></pre>
</div>
<span class="comment-copy">Where are you stuck? What have you tried?</span>
<span class="comment-copy">I'm just not sure how to start, to make it a running average.  I know how to do a "regular" average, I just don't know how to make it a "running average"</span>
<span class="comment-copy">What version of Python? If you can wait for 3.4, just <code>import statistics</code> and it's a one-liner. For 3.1-3.3, you can use <a href="https://pypi.python.org/pypi/stats/" rel="nofollow noreferrer">the backport</a> on PyPI. Otherwise, you have to write a few lines of code.</span>
<span class="comment-copy">+1. <code>enumerate</code> accepts a second argument for a starting value.  If you start at 1 then you don't need to add it later.   Very up to date with the <code>statistics</code> module. Do you lurk on the python dev mailing list?</span>
<span class="comment-copy">@StevenRumbalski: Thanks. I don't know how I forgot about the <code>start</code> parameter, but I've updated the answer. And I skim both python-dev and python-ideas to keep up, and also occasionally look for new stuff on the PEP list. Even rejected proposals often include interesting ideas…</span>
