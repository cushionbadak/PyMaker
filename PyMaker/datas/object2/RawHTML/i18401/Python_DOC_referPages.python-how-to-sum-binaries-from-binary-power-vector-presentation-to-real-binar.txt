<div class="post-text" itemprop="text">
<p>I am trying to express a list that express a binary number as a real binary number like (1,3,6) means <code>0b100101</code>. First, I try to sum them as 2^1+2^3+2^6 and then convert to binary</p>
<pre><code>with open('DATA.txt') as f:
    for line in f:
            myLine=line.rstrip().split("\t")
            print [bin(2**int(l)) for l in myLine[1:5]]
</code></pre>
<p>where I converted it to list like the <code>a</code> below so</p>
<pre><code>&gt;&gt;&gt; a=['0b10000000000000000000000000', '0b100000000000', '0b100000000000000000000000000000']
&gt;&gt;&gt; a[1]|a[2]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for |: 'str' and 'str'
&gt;&gt;&gt; bin(a[1])+bin(a[2])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object cannot be interpreted as an index
</code></pre>
<p>So</p>
<blockquote>
<p><strong>How should I convert the power vector into a binary number i.e. how can I get from power-binary number presentation into real binary number presentation?</strong></p>
</blockquote>
<p><strong>Simple example</strong></p>
<blockquote>
<p><strong>Input</strong></p>
<pre><code>['0b10000000000000000000000000', '0b100000000000', '0b100000000000000000000000000000']
</code></pre>
<p><strong>Intended Output</strong></p>
<pre><code>0b100010000000000000100000000000
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Bakuriu explained what is going on very well, so Iâ€™ll make this short. The solution to your problem is</p>
<pre><code>with open('DATA.txt') as f:
    for line in f:
        myLine=line.rstrip().split("\t")
        print sum(2**int(l) for l in myLine[1:5])
</code></pre>
<p>Note that summation is equal to binary or, as long as only different bits are set, which I assume is the case here.</p>
</div>
<div class="post-text" itemprop="text">
<p>The value returned by the <a href="http://docs.python.org/3/library/functions.html#bin" rel="nofollow"><code>bin</code></a> built-in is a simple <em>string</em>. It's not a "binary number". Binary numbers do not exist, there is only a binary <em>representation</em> of numbers. Python integers are internally represented as base-2, the <code>bin</code> function allow to "see" this(actually the modulus and sign representation, not two's complement) representation as a string.</p>
<p>If you want to perform bitwise operations such as <code>|</code> on those strings  you must convert them to integers and then back to strings:</p>
<pre><code>In [7]: bin(int('0b10000', 2)|int('0b100', 2))
Out[7]: '0b10100'
</code></pre>
<p>If, given a list of binary strings, you want to obtain a number that combines those strings you can use the <a href="http://docs.python.org/3/library/functools.html?highlight=functools#functools.reduce" rel="nofollow"><code>reduce</code></a> function:</p>
<pre><code>In [8]: import operator as op

In [9]: from functools import reduce

In [10]: a = ['0b10000000000000000000000000', '0b100000000000', '0b100000000000000000000000000000']

In [13]: bin(reduce(op.or_, (int(num, 2) for num in a)))
Out[13]: '0b100010000000000000100000000000'
</code></pre>
</div>
<span class="comment-copy">I get binary numbers of different lengths, is it possible to get every number in certain length such as 10-int-long? Example: "0b10 0b1100 0b100100 0b11000" so that "0b00010 0b001100 0b100100 0b011000" where extra zeros padded to the front? someStringBinary.zfill(30) works almost like that.</span>
<span class="comment-copy"><code>"0b"+bin(20)[2:].zfill(10)</code></span>
