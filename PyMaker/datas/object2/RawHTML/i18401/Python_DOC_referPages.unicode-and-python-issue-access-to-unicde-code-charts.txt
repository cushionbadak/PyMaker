<div class="post-text" itemprop="text">
<p>Yesterday i wrote the following <code>function</code> to convert <code>integer</code> to <code>Persian</code> :</p>
<pre><code>def integerToPersian(number):
    listedPersian = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹']
    listedEnglish = ['0','1','2','3','4','5','6','7','8','9']    
    returnList = list()

    listedTmpString = list(str(number))

    for i in listedTmpString:
        returnList.append(listedPersian[listedEnglish.index(i)])

    return ''.join(returnList)
</code></pre>
<p>When  you call it such as : <code>integerToPersian(3455)</code> ,  it <code>return ۳۴۵۵</code>,
<code>۳۴۵۵</code> is equivalent to <code>3455</code> in <code>Persian</code> and <code>Arabic language</code>.When you read
a number such as reading from <code>databae</code>, and want to show in <code>widget</code>, this
<code>function</code> is very useful.</p>
<p>I downloaded <code>codes charts</code>  of <code>unicode</code> from <a href="http://unicode.org" rel="nofollow">http://unicode.org</a> ,Because i need to wrote <code>PersianToInteger('unicodeString')</code> According to it should get <code>utf-8</code> as parameter and <code>utf-8</code> store <code>2 bytes</code>,Also i'm newbie in pytho.</p>
<p><strong>My questions</strong> are, how can store <code>2bytes</code>? , how can <code>utf8</code> store , how can split an <code>unicode string</code> to another format ? how can use <code>unicode code charts</code>?</p>
<p><strong>Notes:</strong> I found to use <code>int() built-in fuinction</code> , but i couldn't use it.may be you can</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to read the Python Unicode HOWTO for either Python <a href="http://docs.python.org/2/howto/unicode.html" rel="nofollow">2.x</a> or <a href="http://docs.python.org/3/howto/unicode.html" rel="nofollow">3.x</a>, as appropriate. But I can give you brief answers to your questions.</p>
<blockquote>
<p>My questions are, how can store 2bytes? how can utf8 store , how can split an unicode string to another format ?</p>
</blockquote>
<p>A <code>unicode</code> object holds characters; a <code>bytes</code> object holds bytes.</p>
<p>Note that in Python 2.x, <code>str</code> is the same thing as <code>bytes</code>; in 3.x, it's the same thing as <code>unicode</code>. And in both languages, a literal with neither a <code>u</code> nor a <code>b</code> prefix is a <code>str</code>. Since you didn't tell us whether you're using Python 2 or 3, I'll use explicit <code>unicode</code> and <code>bytes</code>, and <code>u</code> and <code>b</code> prefixes, everywhere.</p>
<p>You convert between them by picking an encoding (in this case, UTF-8) and using the <code>encode</code> and <code>decode</code> methods. For example:</p>
<pre><code>&gt;&gt;&gt; my_str = u'۰۱'
&gt;&gt;&gt; my_bytes = b'\xdb\xb0\xdb\xb1'
&gt;&gt;&gt; my_str.encode('utf-8') == my_bytes
True
&gt;&gt;&gt; my_bytes.decode('utf-8') == my_str
True
</code></pre>
<p>If you have a UTF-8 <code>bytes</code> object, you should <code>decode</code> it to <code>unicode</code> as early as possible, and do all your work with it in Unicode. Then you don't have to worry about how many bytes something takes, just treat each character as a character. If you need UTF-8 output, <code>encode</code> back as late as possible.</p>
<p>(Very occasionally, the performance cost of decoding and encoding is too high, and you need to deal with UTF-8 directly. But unless that really is a bottleneck in your code, don't do it.)</p>
<p>So, let's say you wanted to adapt your <code>integerToPersian</code> to take a UTF-8 English digit string instead of an integer, and to return a UTF-8 Persian digit string instead of a Unicode one. (I'm assuming Python 3 for the purposes of this example.) All you need to do is change <code>str(number)</code> to <code>number.decode('utf-8')</code>, and change <code>return ''.join(returnList)</code> to <code>return ''.join(returnList).encode('utf-8')</code>, and that's it.</p>
<blockquote>
<p>how can use unicode code charts?</p>
</blockquote>
<p>Python already comes with the Unicode code charts (and the right ones to match your version of Python) compiled into the <a href="http://docs.python.org/3/library/unicodedata.html" rel="nofollow"><code>unicodedata</code></a> module, so usually it's a lot easier to just use those than to try to use the charts yourself. For example:</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.digit(u'۱')
1
</code></pre>
<hr/>
<blockquote>
<p>… i need to wrote PersianToInteger('unicodeString')</p>
</blockquote>
<p>You really shouldn't need to. Unless you're using a very old Python, <code>int</code> should do it for you. For example, in 2.6:</p>
<pre><code>&gt;&gt;&gt; int(u'۱۱')
11
</code></pre>
<p>If it's not working for you, <code>unicodedata</code> is the easiest solution:</p>
<pre><code>&gt;&gt;&gt; numeral = u'۱۱'
&gt;&gt;&gt; [unicodedata.digit(ch) for ch in numeral]
[1, 1]
</code></pre>
<p>However, either of these will convert digits in <em>any</em> script to a number, not just Persian. And there's nothing in the Unicode charts that will directly tell you that a digit is Persian; the best you can do is parse the name:</p>
<pre><code>&gt;&gt;&gt; all('ARABIC-INDIC DIGIT' in unicodedata.name(ch) for ch in numeral)
True
&gt;&gt;&gt; all('ARABIC-INDIC DIGIT' in unicodedata.name(ch) for ch in '123')
False
</code></pre>
<hr/>
<p>If you really want to do things in either direction by mapping digits from one script to another, here's a better solution:</p>
<pre><code>listedPersian = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹']
listedEnglish = ['0','1','2','3','4','5','6','7','8','9']    
persianToEnglishMap = dict(zip(listedPersian, listedEnglish))
englishToPersianMap = dict(zip(listedEnglish, listedPersian))

def persianToNumber(persian_numeral):
    english_numeral = ''.join(persianToEnglishMap[digit] for digit in persial_numeral)
    return int(english_numeral)
</code></pre>
</div>
<span class="comment-copy">Are you using python2 or python3?</span>
<span class="comment-copy">Note that Python comes with all the information from the Unicode charts built-in (and they're guaranteed to match the version of Unicode your Python version works with) in the <code>unicodedata</code> module.</span>
<span class="comment-copy">As a side note, <code>listedEnglish.index(i)</code> is intended to be just <code>int(i)</code>, right? Which is a lot simpler, and means you can get rid of <code>listedEnglish</code> entirely…</span>
<span class="comment-copy">If you read agian, my <code>integerToPersian</code> work fine, i need to help for <code>persianToInteger</code>.</span>
<span class="comment-copy">@MohsenPahlevanzadeh: If you would actually answer people's questions instead of writing the same comment over and over, it would be much easier to help you.</span>
