<div class="post-text" itemprop="text">
<p>This might seem like a strange question, but I have this idea that I want to make a python script that requires a pass login. The user should be able to type in the desired pass in the beginning of the program then the code will write that into the actual source code (so no extra files are generated).</p>
<p>I know that this is possible by doing something like this</p>
<pre><code>with open('test.py','a') as f:
    f.write('\nprint "hello world"') 
</code></pre>
<p>Running this script 3 times will generate the following code</p>
<pre><code>with open('test.py','a') as f:
    f.write('\nprint "hello world"')
print "hello world"
print "hello world"
print "hello world"
</code></pre>
<p>But I would like to make my python script work on every windows machine that doesn't have python installed. So i would have to use PyInstaller - but then how would I be able to write to the source code?</p>
<p>(Optional solution to my question would be an answer how to securely save then password without creating too many obscure files that frightens the end-user) </p>
</div>
<div class="post-text" itemprop="text">
<p>AFAIK there is no way to modify your code after it is an executable, <em>but</em> you can simply store the password <em>as <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function" rel="nofollow noreferrer">hash</a></em> in one file (Method A) or better use a special module for it (Method B). <em>You should never store passwords anywhere in plain text (even not in your executable)</em></p>
<p>Method A (only use this if you can't use other libraries)<br/>
The code could look like this:</p>
<pre><code># To create the password file (e.g. change password)
import hashlib
with open('password', 'wb') as f:
    p = 'new password'
    f.write(hashlib.sha512(p.encode('utf-8')).digest())  # hash and save password

# To check the password
import hashlib
with open('password', 'rb') as f:
    p_in = # your method to read get the password from the user
    p = hashlib.sha512(p_in.encode('utf-8')).digest()  # create hash
    if p == f.read():  # verify hash (password)
        # right password
    else:
        # wrong password
</code></pre>
<p>The content of the file is the binary form of the hash.<br/>
One important thing to note is, that you should use a secure hash function (look into the article linked above) or better use Method B.</p>
<hr/>
<p>Method B (you should use this)<br/>
Here is a way more secure and even simpler version (as pointed out by user9876) with the usage of the library <a href="http://code.google.com/p/passlib/" rel="nofollow noreferrer">passlib</a> which is for such things.<br/>
This is an example copied from the <a href="http://pythonhosted.org/passlib/index.html" rel="nofollow noreferrer">passlib documentation</a>:</p>
<pre><code># import the context under an app-specific name (so it can easily be replaced later)
from passlib.apps import custom_app_context as pwd_context

# encrypting a password...
hash = pwd_context.encrypt("somepass")

# verifying a password...
ok = pwd_context.verify("somepass", hash)
</code></pre>
<p>As you can see the hashing and verification is very simple and you can configure various parameters if you want.</p>
<hr/>
<p>There are a many ways to store the hash, which all have pros and cons so you have to carefully think about them. </p>
<ol>
<li>A simple File.

<ul>
<li>You could use the same file to store other settings of you program</li>
<li>If someone installs your program into <code>C:\Program Files\</code> your program would probably not have the rights to store a file there (but you can use some standard directory like %APPDATA%)</li>
<li>You could hide the file (but if someone copies the program there is a high chance, that it will be lost)</li>
</ul></li>
<li>The Windows registry. You can use the standard python <a href="http://docs.python.org/3/library/winreg.html" rel="nofollow noreferrer">winreg</a> module.

<ul>
<li>Hidden from the user</li>
<li>No extra files</li>
<li>Only on windows</li>
<li><em>Not portable</em> (if you copy the program to another computer the password will be lost)</li>
</ul></li>
<li><a href="https://stackoverflow.com/questions/5795446/appending-data-to-an-exe">Append it to the executable</a>. This is an possibility, but it wouldn't work in your case, because you can't modify a running executable. That means you would need another program to change your main program and that would be another file. So it is the same number of files as if you use the first option, but more work.</li>
</ol>
<p>Another think to note is, that you could have a <em>master password</em> or <em>fallback password</em> if someone (accidentally) deletes your saved password. But you should think about this, because someone who knows the master password can delete the old password and get into your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you already noticed, storing data in code has more problems than it solves. The way to store "hidden" configuration would be to use <code>_winreg</code> (or <code>winreg</code> in py3) under Windows, and <code>ConfigParser</code> for a <code>~/.config/myapp.ini</code> file under Linux and other POSIX systems. But then, most people use an .INI file in <code>%APPDATA%</code> under Windows too, that's hidden enough.</p>
<p>If you write a wrapper class that abstracts away the differences, your application code can use this uniformly as a small key/value store. More or less ready-to-use solutions are <a href="http://code.activestate.com/recipes/138944-extending-configparser-for-reading-and-writing-opt/" rel="nofollow">in this recipe</a> and in <a href="https://developers.kilnhg.com/Code/Kiln/Group/Kiln-Storage-Service/Files/kiln/workerqueue/kilnconfig.py" rel="nofollow">kilnconfig</a>.</p>
<p>Then when it comes to passwords, use <a href="https://pypi.python.org/pypi/py-bcrypt" rel="nofollow">py-bcrypt</a> to securely persist them.</p>
</div>
<div class="post-text" itemprop="text">
<p>NEVER NEVER NEVER store passwords!!! It is just insecure! 
Use the following approach instead:</p>
<ol>
<li>make a file "passwords.pwd" (windows will not recognize the file type - good for dummy useres)</li>
<li><p>Don't store the pssword but the hashing function of the password (you can use e.g. <a href="https://code.google.com/p/passlib/" rel="nofollow">passlib</a> or do your own approach):</p>
<pre><code>import hashlib
password = "12345" #take user input here
hashed_password = hashlib.sha512(password).hexdigest()
print hashed_password
</code></pre>
<p>Whenever you have to verify a password, just do the above calculation and compare the result to the strored hash value.</p></li>
</ol>
</div>
<span class="comment-copy">Could you use a password protected self-extracting zip file?</span>
<span class="comment-copy">@MagnusHoff would it require a special zip software to run?</span>
<span class="comment-copy">No. That's what is meant by "self-extracting". See for example <a href="http://kb.winzip.com/kb/entry/179" rel="nofollow noreferrer">kb.winzip.com/kb/entry/179</a></span>
<span class="comment-copy">@MagnusHoff should like a good solution but how would you make it so the stored password can't be read? Do you have an example code?</span>
<span class="comment-copy">If it's only ever going to run on windows, then you could store the password (or I'd suggest a hash of it) in the registry. You could use the winreg python module to do it.</span>
<span class="comment-copy">Please don't hash passwords like that.  It's more secure than plaintext, but won't protect against a determined attacker.  There are plenty of libraries around that will do proper salted hashes that are designed to be much slower than SHA512, so are much harder to brute-force.</span>
<span class="comment-copy">@user9876 your right! I simply wrote the simplest method. I now added a version using <a href="http://code.google.com/p/passlib/" rel="nofollow noreferrer">passlib</a></span>
<span class="comment-copy">I really like this solution a lot and it is most likely going to run on a windows machine. But what if I want to make a portable .exe and don't want to create a lot of extra files? these files might not be copied if the user wants to make a duplicate. Sorry for the newbie questions - not used to working with passwords that much.</span>
<span class="comment-copy">@Norfeldt I added a section about saving the password.</span>
<span class="comment-copy">Never use your own approach when it comes to cryptography, unless your name is Bruce.</span>
<span class="comment-copy">+1 for dummy users</span>
