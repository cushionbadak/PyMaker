<div class="post-text" itemprop="text">
<p>Note: this code works fine on Ubuntu but not on mac and instead of changing the mac/python settings locally I'm trying to make change to the code so it'll work everywhere..</p>
<pre><code>import ssl 
import httplib 
httplib.HTTPConnection(server, port, timeout)
</code></pre>
<p>but it throws error:</p>
<blockquote>
<p>[Errno 1] _ssl.c:503: error:140770FC:SSL
  routines:SSL23_GET_SERVER_HELLO:unknown protocol</p>
</blockquote>
<p>now code's not using <strong><em>urllib.request</em></strong> instead using <strong><em>httplib</em></strong></p>
<p>I want to change the code so it'll take SSLv3 as default protocol, something like this:</p>
<pre><code>ssl.SSLContext(ssl.PROTOCOL_SSLv3)
</code></pre>
<p>I looked around and found few links but nothing is working!</p>
<p><a href="http://scanf.info/post/37833206412/sslv3-alert-handshake-failure-on-ubuntu-12-04" rel="noreferrer">this link is for ubuntu</a></p>
<p><a href="http://carnivore.it/2011/10/07/error_14077458_ssl_routines_ssl23_get_server_hello_reason_1112#blogtng__comment_form" rel="noreferrer">link for python urllib and cURL</a></p>
<p><a href="http://bugs.python.org/issue11220" rel="noreferrer">python bug fix, but again for urllib</a></p>
</div>
<div class="post-text" itemprop="text">
<p><em>Note:</em> The <a href="https://docs.python.org/2/library/httplib.html#httplib.HTTPSConnection" rel="nofollow">HTTPSConnection</a> constructor allows to pass an ssl <code>context</code> as argument since python 2.7.9, which should be used in this case.</p>
<p>This answer predates that change and therefore only applies to outdated versions of python.</p>
<hr/>
<p><a href="http://hg.python.org/cpython/file/70274d53c1dd/Lib/httplib.py#l1161" rel="nofollow"><code>httplib.HTTPSConnection.connect</code></a> just calls <a href="http://hg.python.org/cpython/file/70274d53c1dd/Lib/ssl.py#l370" rel="nofollow"><code>ssl.wrap_socket</code></a> on the opened socket to initalize a https connection, unfortunately you can't specify any parameters in python2.7 (python3 allows <a href="http://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection" rel="nofollow">passing the <code>SSLContext</code></a>).</p>
<p>If you want to specify the protocol version, you'd need to monkey patch one of these two:</p>
<p><em>Method 1</em>: patch <code>httplib.HTTPSConnection.connect</code>:</p>
<pre><code>import httplib
import socket
import ssl

def connect_patched(self):
    "Connect to a host on a given (SSL) port."

    sock = socket.create_connection((self.host, self.port),
                                    self.timeout, self.source_address)
    if self._tunnel_host:
        self.sock = sock
        self._tunnel()
    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,
                                ssl_version=ssl.PROTOCOL_SSLv3)

httplib.HTTPSConnection.connect = connect_patched
</code></pre>
<p>This changes the protocol version for all connections made with <code>HTTPSConnection</code>.</p>
<p><em>Method 2</em>: patch <code>ssl.wrap_socket</code>:</p>
<pre><code>import ssl

wrap_socket_orig = ssl.wrap_socket

def wrap_socket_patched(sock, keyfile=None, certfile=None,
                        server_side=False, cert_reqs=ssl.CERT_NONE,
                        ssl_version=ssl.PROTOCOL_SSLv3, ca_certs=None,
                        do_handshake_on_connect=True,
                        suppress_ragged_eofs=True, ciphers=None):
    return wrap_socket_orig(sock, keyfile, certfile, server_side,
                            cert_reqs, ssl_version, ca_certs,
                            do_handshake_on_connect,
                            suppress_ragged_eofs, ciphers)

ssl.wrap_socket = wrap_socket_patched
</code></pre>
<p>This changes the default protocol version for <em>all</em> code that uses <code>wrap_socket</code>, therefore also affects other libraries.</p>
<p>edit:</p>
<p><em>Method 3</em>: because httplib actually accesses only <code>wrap_socket</code> from <code>ssl</code>, you could also just replace <code>httplib.ssl</code> with a class providing <code>wrap_socket</code>. Using <code>functools.partial</code> makes it very elegant to write this:</p>
<pre><code>import httplib
import ssl
from functools import partial

class fake_ssl:
    wrap_socket = partial(ssl.wrap_socket, ssl_version=ssl.PROTOCOL_SSLv3)

httplib.ssl = fake_ssl
</code></pre>
</div>
<span class="comment-copy">I tried method 3 and now its throwing "SSL routines:SSL3_GET_RECORD:wrong version number" but if I check the server protocol by "openssl s_client -connect host:port | grep Protocol" it returns "Protocol : SSLv3"! I'll try other methods and lyk..</span>
<span class="comment-copy">tried all 3 methods now getting error(for all methods) "SSL routines:SSL3_GET_RECORD:wrong version number"</span>
<span class="comment-copy">The result should be the same, no matter which method of the above methods you use. Have you tried different protocol versoins? I'm not sure how to reproduce the error you get. I only get the exact same error when connecting to a SSLv3 server using a TLSv1 client...</span>
<span class="comment-copy">Yes I have tried all protocols with SSLv3 and TLSv1 it say "wrong version number" with SSLv23 it say "unknown protocol" and SSLv2 just timeouts. I believe its an issue with my env, but your code resolves the initial problem.</span>
