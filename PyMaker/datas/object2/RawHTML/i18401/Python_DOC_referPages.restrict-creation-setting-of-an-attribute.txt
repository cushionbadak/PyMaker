<div class="post-text" itemprop="text">
<p>How to restrict the creation of an attribute, outside its class/sub-class?</p>
<pre><code>__all__ = ["Employee","Salary","Wage"]
##################################################################################################
class Person(object):
    def __init__(self,fname,lname,gender):
        self.__setfname(fname) # "We are all adults." vs. "Name mangling."
        self.__setlname(lname)
        self.__setgender(gender)
    def __setfname(self,fname): self.__fname = fname
    def __setlname(self,lname): self.__lname = lname
    def __setgender(self,gender): self.__gender = gender
    def getname(self): return "{} {}".format(self.__fname,self.__lname)
    def getformattedname(self):
        if(self.__gender.lower() == "m"):
            return "Mr. {}".format(self.getname())
        if(self.__gender.lower() == "f"):
            return "Ms. {}".format(self.getname())
        if(self.__gender.lower() == ""):
            return "{}".format(self.getname())
class Payment(object):
    def __init__(self,amount,currency="INR"): # currency="USD"
        self.__setamount(amount)
        self.__setcurrency(currency)
    def __setamount(self,amount): self.__amount = amount
    def __setcurrency(self,currency): self.__currency = currency
    def getamount(self): return "{}".format(self.__amount)
    def getformattedamount(self): return "{} {}".format(self.getamount(),self.__currency)
##################################################################################################
##################################################################################################
class Employee(Person):
    def __init__(self,fname,lname,gender): super(Employee,self).__init__(fname,lname,gender)
    def __str__(self): return self.getformattedname()
class Salary(Payment):
    def __init__(self,amount,currency="INR"): super(Salary,self).__init__(amount,currency)
    def __str__(self): return self.getformattedamount()
class Wage(Payment):
    def __init__(self,amount,currency="INR"): super(Wage,self).__init__(amount,currency)
    def __str__(self): return self.getformattedamount()
##################################################################################################
</code></pre>
<hr/>
<p>I'm OK with this:</p>
<pre><code>e1._Person__fname = "Spam"
s1._Payment__amount = "1000000000000000"
</code></pre>
<p>but the following code creates new attributes:</p>
<pre><code>e1.fname = "New"
s1.amount = -10
</code></pre>
<hr/>
<pre><code>import re
from com.example.model import Employee,Salary,Wage

def printzip(l1,l2): print(list(zip([str(e) for e in l1],[str(e) for e in l2])))

(e1,e2) = (Employee("Sandeep","Mehta","m"),Employee("Varsha","Mehta","f"))
(s1,s2) = (Salary(3000,"USD"),Salary(3000,"USD"))

printzip([e1,e2],[s1,s2])
e1.fname = "New"
s1.amount = -3000
e1._Person__fname = "Spam"
s1._Payment__amount = "3000000000000000"

for e in enumerate([e for e in dir(e1) if not (re.search(r"^__.*__$",e))]): print(e)
for e in enumerate([e for e in dir(s1) if not (re.search(r"^__.*__$",e))]): print(e)
printzip([e1],[s1])
</code></pre>
<p><img alt="Python IDLE" src="https://i.stack.imgur.com/6496W.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Do not try to do this. It's not your business what someone else does with your class. You should document what attributes are expected to be available, and if someone wants to abuse it that's their problem, not yours.</p>
<p>"We're all consenting adults here" is the Pythonic philosophy.</p>
</div>
<div class="post-text" itemprop="text">
<p>We could <a href="http://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow">abuse <code>__slots__</code></a>, though the primary purpose of <code>__slots__</code> is not to avoid creating extra attributes:</p>
<pre><code>class Person(object):
    __slots__ = ('_Person__fname', '_Person__lname', '_Person__gender')
    ...

class Employee(Person):
    __slots__ = () # All subclasses also need define __slots__ 
    ...

e1._Person__fname = "Spam"  # Fine
e1.fname = "New"            # AttributeError: 'Employee' object has no attribute 'fname'
</code></pre>
<p>Note that with <code>__slots__</code>, the instance's <code>__dict__</code> is not created, which may break some code using them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you looking for properties?</p>
<pre><code>class Foo(object):
    def __init__(self):
        self._amount = 0

    @property
    def amount(self):
        return self._amount


f = Foo()
print f.amount  # ok
f.amount = 100  # error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this:</p>
<pre><code>class A:
    def __setattr__(self, attr, val):
        try :
            class_name, varname = attr.split('__', 1)
            if class_name == '_' + self.__class__.__name__:
                self.__dict__[attr] = val
            else:
                raise AttributeError
        except ValueError:
            raise AttributeError
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; %run so.py
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a._A__foo = 1
&gt;&gt;&gt; a._A__bar = 2
&gt;&gt;&gt; a._A = 2
Traceback (most recent call last):
  File "&lt;ipython-input-28-eace128dbfc5&gt;", line 1, in &lt;module&gt;
    a._A = 2
  File "/home/monty/py/so.py", line 10, in __setattr__
    raise AttributeError
AttributeError

&gt;&gt;&gt; a.A__bar = 2
Traceback (most recent call last):
  File "&lt;ipython-input-29-57210782cd6a&gt;", line 1, in &lt;module&gt;
    a.A__bar = 2
  File "/home/monty/py/so.py", line 8, in __setattr__
    raise AttributeError
AttributeError

&gt;&gt;&gt; a._A__spam = 3
&gt;&gt;&gt; a.__dict__
{'_A__foo': 1, '_A__spam': 3, '_A__bar': 2}
</code></pre>
</div>
<span class="comment-copy">Why are extra attributes a problem?</span>
<span class="comment-copy">I'm using <code>__</code> prefix for making the attributes private. I don't want those "names" (attributes) to be accessible outside the class.</span>
<span class="comment-copy">(y) @"It's not your business what someone else does with your class." But... it is my business if someone else starts abusing the attributes  such that the models/databases start getting affected.</span>
<span class="comment-copy">I am of the same opinion as Daniel. If you buy a car and manipulate the breaks in such a manner that they don't work anymore, this won't hardly be the problem of the automobile manufacturer but your own. If you use undocumented features of a library and suddenly those aren't supported anymore, it is your business and not the business of the library's authors. If a user abuses your code, it is his business not yours. "Use code only as intended". Just my two cents.</span>
<span class="comment-copy">@GLES are your coworkers really so untrustworthy you can't rely on them not to hack the database?</span>
<span class="comment-copy">@DanielRoseman Yes. In a way :)</span>
<span class="comment-copy">@GLES: If they're wanting to hack the database, surely they could just modify the source of your class? Also, <code>object.__setattr__(your_class_instance, 'whatever_key_i_like', value)</code> is going to ruin whatever you try to do.</span>
<span class="comment-copy">Thanks! I despr'ly needed such a technique, suggesting the use of a magic method.</span>
<span class="comment-copy">@GLES: Please read <a href="http://stackoverflow.com/questions/472000/python-slots">stackoverflow.com/questions/472000/python-slots</a> before using this solution.</span>
<span class="comment-copy">I was ignoring the topic "decorators" :) Now I realize that it was ignoring me :)</span>
<span class="comment-copy">Thanks bhai! I'm gonna try this.</span>
