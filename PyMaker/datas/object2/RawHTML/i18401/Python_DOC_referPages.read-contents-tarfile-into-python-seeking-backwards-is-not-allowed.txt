<div class="post-text" itemprop="text">
<p>I am new to python. I am having trouble reading the contents of a tarfile into python. </p>
<p>The data are the contents of a journal article (hosted at pubmed central). See info below. And link to tarfile which I want to read into Python.</p>
<p><a href="http://www.pubmedcentral.nih.gov/utils/oa/oa.fcgi?id=PMC13901" rel="nofollow noreferrer">http://www.pubmedcentral.nih.gov/utils/oa/oa.fcgi?id=PMC13901</a>
<a href="ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/b0/ac/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz" rel="nofollow noreferrer">ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/b0/ac/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz</a></p>
<p>I have a list of similar .tar.gz file I will eventually want to read in as well. I think (know) all of the tarfiles have a .nxml file associated with them. It is the content of the .nxml files I am actually interested in extracting/reading. Open to any suggestions on the best way to do this...</p>
<p>Here is what I have if I save the tarfile to my PC. All runs as expected.</p>
<pre><code>tarfile_name = "F:/PMC_OA_TextMining/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz"
tfile = tarfile.open(tarfile_name)

tfile_members = tfile.getmembers()

tfile_members1 = []
for i in range(len(tfile_members)):
tfile_members_name = tfile_members[i].name
tfile_members1.append(tfile_members_name)

tfile_members2 = []
for i in range(len(tfile_members1)):
if tfile_members1[i].endswith('.nxml'):
    tfile_members2.append(tfile_members1[i])

tfile_extract1 = tfile.extractfile(tfile_members2[0])
tfile_extract1_text = tfile_extract1.read()
</code></pre>
<p>I learned today that to in order to access the tarfile directly from the pubmed centrals FTP site I have to set up a network request using <code>urllib</code>. Below is the revised code (and link to stackoverflow answer I received):</p>
<p><a href="https://stackoverflow.com/questions/18617244/read-contents-of-tar-gz-file-from-website-into-a-python-3-x-object">Read contents of .tar.gz file from website into a python 3.x object</a></p>
<pre><code>tarfile_name = "ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/b0/ac/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz"
ftpstream = urllib.request.urlopen(tarfile_name)
tfile = tarfile.open(fileobj=ftpstream, mode="r|gz")
</code></pre>
<p>However, when I run the remaining piece of the code (below) I get an error message ("seeking backwards is not allowed"). How come?</p>
<pre><code>tfile_members = tfile.getmembers()

tfile_members1 = []
for i in range(len(tfile_members)):
tfile_members_name = tfile_members[i].name
tfile_members1.append(tfile_members_name)

tfile_members2 = []
for i in range(len(tfile_members1)):
if tfile_members1[i].endswith('.nxml'):
    tfile_members2.append(tfile_members1[i])

tfile_extract1 = tfile.extractfile(tfile_members2[0])
tfile_extract1_text = tfile_extract1.read()
</code></pre>
<p>The code fails on the last line, where I try to read the .nxml content associated with my tarfile. Below is the actual error message I receive. What does it mean? What is my best workaround for reading/accessing the content of these .nxml files which are all embedded in tarfiles?</p>
<pre><code>Traceback (most recent call last):
File "F:\PMC_OA_TextMining\test2.py", line 135, in &lt;module&gt;
tfile_extract1_text = tfile_extract1.read()
File "C:\Python30\lib\tarfile.py", line 804, in read
buf += self.fileobj.read()
File "C:\Python30\lib\tarfile.py", line 715, in read
return self.readnormal(size)
File "C:\Python30\lib\tarfile.py", line 722, in readnormal
self.fileobj.seek(self.offset + self.position)
File "C:\Python30\lib\tarfile.py", line 531, in seek
raise StreamError("seeking backwards is not allowed")
tarfile.StreamError: seeking backwards is not allowed 
</code></pre>
<p>Thanks in advance for your help. Chris</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>What's going wrong:</strong> Tar files are stored interleaved. They come in the order header, data, header, data, header, data, etc. When you enumerated the files with <code>getmembers()</code>, you've already read through the entire file to get the headers. Then when you asked the tarfile object to read the data, it tried to seek backward from the last header to the first data. But you can't seek backward in a network stream without closing and reopening the urllib request.</p>
<p><strong>How to work around it:</strong> You'll need to download the file, save a temporary copy to disk or to a StringIO, enumerate the files in this temporary copy, and then extract the files you want.</p>
<pre><code>#!/usr/bin/env python3
from io import BytesIO
import urllib.request
import tarfile

tarfile_url = "ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/b0/ac/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz"
ftpstream = urllib.request.urlopen(tarfile_url)

# BytesIO creates an in-memory temporary file.
# See the Python manual: http://docs.python.org/3/library/io.html
tmpfile = BytesIO()
while True:
    # Download a piece of the file from the connection
    s = ftpstream.read(16384)

    # Once the entire file has been downloaded, tarfile returns b''
    # (the empty bytes) which is a falsey value
    if not s:  
        break

    # Otherwise, write the piece of the file to the temporary file.
    tmpfile.write(s)
ftpstream.close()

# Now that the FTP stream has been downloaded to the temporary file,
# we can ditch the FTP stream and have the tarfile module work with
# the temporary file.  Begin by seeking back to the beginning of the
# temporary file.
tmpfile.seek(0)

# Now tell the tarfile module that you're using a file object
# that supports seeking backward.
# r|gz forbids seeking backward; r:gz allows seeking backward
tfile = tarfile.open(fileobj=tmpfile, mode="r:gz")

# You want to limit it to the .nxml files
tfile_members2 = [filename
                  for filename in tfile.getnames()
                  if filename.endswith('.nxml')]

tfile_extract1 = tfile.extractfile(tfile_members2[0])
tfile_extract1_text = tfile_extract1.read()

# And when you're done extracting members:
tfile.close()
tmpfile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same error when trying to <code>requests.get</code> the file, so I extracted all to a tmp directory instead of using <code>BytesIO</code>, or <code>extractfile(member)</code>:</p>
<pre><code># stream == requests.get
inputs = [tarfile.open(fileobj=LZMAFile(stream), mode='r|')]
t = "/tmp"
for tarfileobj in inputs:        
    tarfileobj.extractall(path=t, members=None)
for fn in os.listdir(t):
    with open(os.path.join(t, fn)) as payload:
        print(payload.read())
</code></pre>
</div>
<span class="comment-copy">How do I save a temporary copy to a <code>StringIO</code>? Sorry have been working with Python for less than a week.</span>
<span class="comment-copy">I've added working Python 3 code to do what it appears you want.</span>
<span class="comment-copy">Thanks for the detailed and helpful explanation @tepples</span>
<span class="comment-copy">Don't forget to add code to securely create and reliably delete this temporary directory.</span>
