<div class="post-text" itemprop="text">
<p>Basically it works for almost every case I've tried besides 0.93. I then added "print money" in the while loop to see what it was doing after every loop and this was what happened:</p>
<pre><code>Enter an amount less than a dollar: 0.93
0.68
0.43
0.18
0.08
0.03
0.02
0.01
3.81639164715e-17
-0.01
Your change is 3 quarters 1 dimes 1 nickels 4 pennies
</code></pre>
<p>Can someone explain what the hell is going on?</p>
<pre><code>money = input("Enter an amount less than a dollar: ")
quarter = 0
dime = 0
nickel = 0
penny = 0

while money &gt; 0.00:
    if money &gt;= 0.25:
        quarter = quarter + 1
        money = money - 0.25

    elif money &gt;= 0.10:
        dime = dime+1
        money = money - 0.10

    elif money &gt;= 0.05:
        nickel = nickel + 1
        money = money - 0.05

    else:
        penny = penny + 1
        money = money - 0.01



print "Your change is %d quarters %d dimes %d nickels %d pennies" % (quarter, dime, nickel, penny)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Floating point numbers <a href="http://docs.python.org/3/tutorial/floatingpoint.html">can't represent most decimal fractions exactly</a>, just like you can't write the result of 1/3 exactly using decimal floating point notation. </p>
<p>Use integers to calculate with cents instead, or use the <a href="http://docs.python.org/2/library/decimal.html"><code>decimal</code> module</a>.</p>
<p>This has nothing to do with Python, by the way, but with the way computers generally do floating point math.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>amount = 93
quarters = amount // 25
amount = amount % 25
dimes = amount // 10
amount = amount * 10
nickel = amount // 5
cents = amount % 5
</code></pre>
<p><code>//</code> is integer division. <code>%</code> is the modulus operator (remainder of integer division) </p>
<p>bit of thought you could pass in a list [25,10,5,1] and do it in a loop</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't express most fractions exactly using floating point. I Think that integers are the best solution to the problem in your case. I rewrote your code  to use cents and python 3.</p>
<pre><code>cents = int(input("Enter a number of cents: "))
quarter = 0
dime = 0
nickel = 0
penny = 0

while cents &gt; 0:
    if cents &gt;= 25:
        quarter+=1
        cents-=25
    elif cents &gt;= 10:
        dime+=1
        cents-=10
    elif cents &gt;= 5:
        nickel+=1
        cents-=5
    else:
        penny+=1
        cents-=1
print ("Your change is %d quarters %d dimes %d nickels %d pennies" % (quarter, dime, nickel, penny)
</code></pre>
</div>
<span class="comment-copy">I agree with the recommendation to use integer arithmetic or decimal fraction arithmetic for money. However, if you want to really understand the underlying problem with using floating point, read <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></span>
<span class="comment-copy">Yep I'd go integers too. You could use the modulus operator as well, chop out 3/4 of that code</span>
