<div class="post-text" itemprop="text">
<p>How can I include two variables in the same <code>for</code> loop?</p>
<pre><code>t1 = [a list of integers, strings and lists]
t2 = [another list of integers, strings and lists]

def f(t):  #a function that will read lists "t1" and "t2" and return all elements that are identical
    for i in range(len(t1)) and for j in range(len(t2)):
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the effect of a nested for loop, use:</p>
<pre><code>import itertools
for i, j in itertools.product(range(x), range(y)):
    # Stuff...
</code></pre>
<p>If you just want to loop simultaneously, use:</p>
<pre><code>for i, j in zip(range(x), range(y)):
    # Stuff...
</code></pre>
<p>Note that if <code>x</code> and <code>y</code> are not the same length, <code>zip</code> will truncate to the shortest list.  As @abarnert pointed out, if you don't want to truncate to the shortest list, you could use <code>itertools.zip_longest</code>.</p>
<p><strong>UPDATE</strong></p>
<p>Based on the request for "a function that will read lists "t1" and "t2" and return all elements that are identical", I don't think the OP wants <code>zip</code> <em>or</em> <code>product</code>.  I think they want a <code>set</code>:</p>
<pre><code>def equal_elements(t1, t2):
    return list(set(t1).intersection(set(t2)))
    # You could also do
    # return list(set(t1) &amp; set(t2))
</code></pre>
<p>The <code>intersection</code> method of a <code>set</code> will return all the elements common to it and another set (Note that if your lists contains other <code>list</code>s, you might want to convert the inner <code>list</code>s to <code>tuples</code> first so that they are hashable; otherwise the call to <code>set</code> will fail.).  The <code>list</code> function then turns the set back into a list.</p>
<p><strong>UPDATE 2</strong></p>
<p>OR, the OP might want elements that are identical in <em>the same position in the lists</em>.  In this case, <code>zip</code> would be most appropriate, and the fact that it truncates to the shortest list is what you would want (since it is impossible for there to be the same element at index 9 when one of the lists is only 5 elements long).  If that is what you want, go with this:</p>
<pre><code>def equal_elements(t1, t2):
    return [x for x, y in zip(t1, t2) if x == y]
</code></pre>
<p>This will return a list containing only the elements that are the same and in the same position in the lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's two possible questions here: how can you iterate over those variables <em>simultaneously</em>, or how can you loop over their <em>combination</em>.</p>
<p>Fortunately, there's simple answers to both. First case, you want to use <code>zip</code>.</p>
<pre><code>x = [1, 2, 3]
y = [4, 5, 6]

for i, j in zip(x, y):
   print i + " / " + j
</code></pre>
<p>will output</p>
<pre><code>1 / 4
2 / 5
3 / 6
</code></pre>
<p>Remember that you can put <em>any iterable</em> in <code>zip</code>, so you could just as easily write your exmple like:</p>
<pre><code>for i, j in zip(range(x), range(y)):
    # do work here.
</code></pre>
<p><strong>Actually, just realised that won't work.</strong> It would only iterate until the smaller range ran out. In which case, it sounds like you want to iterate over the combination of loops.</p>
<p>In the other case, you just want a nested loop.</p>
<pre><code>for i in x:
    for j in y:
        print i + " / " + j
</code></pre>
<p>gives you</p>
<pre><code>1 / 4
1 / 5
1 / 6
2 / 4
2 / 5
...
</code></pre>
<p>You can also do this as a list comprehension.</p>
<pre><code>[i + " / " + j for i in range(x) for j in range(y)]
</code></pre>
<p>Hope that helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Any reason you can't use a nested for loop?</p>
<pre><code>for i in range(x):
   for j in range(y):
       #code that uses i and j
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for (i,j) in [(i,j) for i in range(x) for j in range(y)]
</code></pre>
<p>should do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really just have lock-step iteration over a range, you can do it one of several ways:</p>
<pre><code>for i in range(x):
  j = i
  …
# or
for i, j in enumerate(range(x)):
  …
# or
for i, j in ((i,i) for i in range(x)):
  …
</code></pre>
<p>All of the above are equivalent to <code>for i, j in zip(range(x), range(y))</code> if <code>x &lt;= y</code>.</p>
<p>If you want a nested loop and you only have two iterables, just use a nested loop:</p>
<pre><code>for i in range(x):
  for i in range(y):
    …
</code></pre>
<p>If you have more than two iterables, use <code>itertools.product</code>.</p>
<p>Finally, if you want lock-step iteration up to <code>x</code> and then to continue to <code>y</code>, you have to decide what the rest of the <code>x</code> values should be.</p>
<pre><code>for i, j in itertools.zip_longest(range(x), range(y), fillvalue=float('nan')):
  …
# or
for i in range(min(x,y)):
  j = i
  …
for i in range(min(x,y), max(x,y)):
  j = float('nan')
  …
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"Python 3."</p>
<p>Add 2 vars with for loop using zip and range; Returning a list.</p>
<p>Note: Will only run till smallest range ends.</p>
<pre><code>&gt;&gt;&gt;a=[g+h for g,h in zip(range(10), range(10))]
&gt;&gt;&gt;a
&gt;&gt;&gt;[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you are looking for nested loops. </p>
<p>Example (based on your edit):</p>
<pre><code>t1=[1,2,'Hello',(1,2),999,1.23]
t2=[1,'Hello',(1,2),999]

t3=[]

for it1, e1 in enumerate(t1):
    for it2, e2 in enumerate(t2):
        if e1==e2:
            t3.append((it1,it2,e1))

# t3=[(0, 0, 1), (2, 1, 'Hello'), (3, 2, (1, 2)), (4, 3, 999)]
</code></pre>
<p>Which can be reduced to a single comprehension:</p>
<pre><code>[(it1,it2,e1) for it1, e1 in enumerate(t1) for it2, e2 in enumerate(t2) if e1==e2] 
</code></pre>
<p>But to find the common elements, you can just do:</p>
<pre><code>print set(t1) &amp; set(t2)
# set([(1, 2), 1, 'Hello', 999])
</code></pre>
<p>If your list contains non-hashable objects (like other lists, dicts) use a frozen set:</p>
<pre><code>from collections import Iterable
s1=set(frozenset(e1) if isinstance(e1,Iterable) else e1 for e1 in t1)
s2=set(frozenset(e2) if isinstance(e2,Iterable) else e2 for e2 in t2)
print s1 &amp; s2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For your use case, it may be easier to utilize a <a href="https://docs.python.org/3/reference/compound_stmts.html#while" rel="nofollow noreferrer"><code>while</code></a> loop.</p>
<pre><code>t1 = [137, 42]
t2 = ["Hello", "world"]

i = 0
j = 0
while i &lt; len(t1) and j &lt; len(t2):
    print t1[i], t2[j]
    i += 1
    j += 1

# 137 Hello
# 42 world
</code></pre>
<p>As a caveat, this approach will truncate to the length of your shortest list.</p>
</div>
<span class="comment-copy">Are x and y two lists?</span>
<span class="comment-copy">@user2246674 <code>zip</code> is good iff the iterables have the same length.</span>
<span class="comment-copy">Do you want something like a nested loop in one line, or just to iterate over the lists simultaneously?</span>
<span class="comment-copy">In case SethMMorton's question isn't clear to you: If <code>x</code> and <code>y</code> are both 3, simultaneous (aka "lock-step" or "parallel") iteration  would give you <code>0, 0</code> then <code>1, 1</code> then <code>2, 2</code>; nested iteration would give you <code>0, 0</code>, <code>0, 1</code>, <code>0, 2</code>, <code>1, 0</code>, <code>1, 1</code>, <code>1, 2</code>, <code>2, 0</code>, <code>2, 1</code>, <code>2, 2</code>. (Or maybe you even want something different from both? In that case, please explain what.)</span>
<span class="comment-copy">I didn't downvote, but probably because it's not clear if you want simultaneous looping or nested looping, even after the commenters asked for clarification.</span>
<span class="comment-copy">-1 The <code>zip</code> answer is underqualified. As I commented above, it only works if <code>x == y</code> here.</span>
<span class="comment-copy">@kojiro: Well, the OP didn't specify what should happen if <code>x != y</code>. Once he explains it, the answer is either going to be <code>zip</code> or <code>itertools.zip_longest</code>.</span>
<span class="comment-copy">@kojiro Better?</span>
<span class="comment-copy">is there a simultaneous iteration without zip?</span>
<span class="comment-copy">@Quester You could use <code>itertools.izip</code>, which is essentially the same thing.  Other than that, not that I know of.  But what's wrong with <code>zip</code>?</span>
<span class="comment-copy">@Matt: it just didn't look elegant enough to me.</span>
<span class="comment-copy">@Quester: You can use <code>product</code> instead, as in SethMMorton's answer. That would certainly be more elegant/readable if you had six ranges instead of 2, or the number of them were dynamic and only known at runtime. But for just 2 of them… it's hard to beat 2 nested loops for simplicity.</span>
<span class="comment-copy">And who doesn't love going through indenting everything to make python happy?</span>
<span class="comment-copy">nested loop runs for i*j times. what if he wanted to run it for i times only, considering i == j</span>
<span class="comment-copy">@abarnert  "&gt; it's hard to beat 2 nested loops for simplicity." I was working on a project which required me to type hundereds of times "<code>for i in range(len(...)): for j in rnage(len((...))</code>" ... a lot of time would have been saved had I known this and then i could do "<code>for (i,j) in grid:</code>"</span>
<span class="comment-copy">This is just a harder-to-read variation of the nested for loop in Matt Quinlan's answer.</span>
<span class="comment-copy">Seems like inception :)</span>
<span class="comment-copy">this didn't work for me</span>
<span class="comment-copy">Link to Python Docs!    <a href="https://docs.python.org/3.3/library/stdtypes.html#iterator.__iter__" rel="nofollow noreferrer">docs.python.org/3.3/library/stdtypes.html#iterator.__iter__</a></span>
