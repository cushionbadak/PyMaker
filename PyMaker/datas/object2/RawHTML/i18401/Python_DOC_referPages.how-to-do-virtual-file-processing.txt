<div class="post-text" itemprop="text">
<p>So for creating files I use the following:</p>
<pre><code>fileHandle = open('fileName', 'w')
</code></pre>
<p>then write the contents to the file, close the file.
In the next step I process the file.
At the end of the program, I end up with a "physical file" that I need to delete.</p>
<p>Is there a way to write a "virtual" file that behaves exactly like a "physical" one (allowing it to be manipulated the same way) but does not exist at the end of the run in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to consider using a <a href="https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile" rel="noreferrer"><code>tempfile.SpooledTemporaryFile</code></a> which gives you the best of both worlds in the sense that it will create a temporary memory-based virtual file initially but will automatically switch to a physical disk-based file if the data held in memory exceeds a specified size.</p>
<p>Another nice feature is that (when using memory) it will automatically use either an <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="noreferrer"><code>io.BytesIO</code></a> or <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="noreferrer"><code>io.StringIO</code></a> depending on what <code>mode</code> is being used—allowing you to  either read and write Unicode strings or binary data (bytes) to it.</p>
<p>The only tricky part might be the fact that you'll need to avoid closing the file between steps because doing so would cause it to be deleted from memory or disk. Instead you can just rewind it back to the beginning with a file <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="noreferrer"><code>seek(0)</code></a> method call.</p>
<p>When you are completely done with the file and close it, it will automatically be deleted from disk if the amount of data in it caused it to be rolled-over to a physical file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have <code>StringIO</code> and <code>BytesIO</code> in the <code>io</code> module.</p>
<p><code>StringIO</code> behaves like a file opened in text mode - reading and writing unicode strings (equivalent to opening a file with <code>io.open(filename, mode, encoding='...')</code>), and the <code>BytesIO</code> behaves like a file opened in binary mode (<code>mode='[rw]b'</code>), and can read write bytes.</p>
<p>Python 2:</p>
<pre><code>In [4]: f = io.BytesIO('test')
In [5]: type(f.read())
Out[5]: str
In [6]: f = io.StringIO(u'test')
In [7]: type(f.read())
Out[7]: unicode
</code></pre>
<p>Python 3:</p>
<pre><code>In [2]: f = io.BytesIO(b'test')
In [3]: type(f.read())
Out[3]: builtins.bytes
In [4]: f = io.StringIO('test')
In [5]: type(f.read())
Out[5]: builtins.str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use StringIO as a virtual file ,
from official <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer">documentation</a> </p>
<pre><code>import StringIO

output = StringIO.StringIO()
output.write('First line.\n')
print &gt;&gt;output, 'Second line.'

# Retrieve file contents -- this will be
# 'First line.\nSecond line.\n'
contents = output.getvalue()

# Close object and discard memory buffer --
# .getvalue() will now raise an exception.
output.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is the <code>StringIO</code> module, read <a href="http://docs.python.org/2/library/stringio.html" rel="nofollow">its documentation</a>, it should be easy to use.</p>
<p>Bear in mind, though, that this would keep the "file's" contents in memory.  If you have too much data, it would probably be better to create a real file, e.g. in /tmp, and delete it afterwards.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you mean writing to memory instead of a file, you can simply write the text to a buffer and use the following function:</p>
<pre><code>def write(text):
  global buffer
  buffer += text + '\n'  # Add a linefeed as you would if you were writing to a file

buffer = ""  # Initialize the buffer
write("My name is Steve Grafton")
</code></pre>
<p>At the end, you will have a buffer that will be the same as if you had written your stuff to a file and then open the file and read all its contents to a buffer!
Moreover, you can use the buffer during the process (before having finished your writing)    and do searches in it, as if you had created a file for both reading and writing, only that in this case your pointer will  </p>
</div>
<span class="comment-copy">Relevant examples: <a href="https://stackoverflow.com/questions/8577137/creating-a-tmp-file-in-python" title="creating a tmp file in python">stackoverflow.com/questions/8577137/…</a></span>
<span class="comment-copy">Coming here from another question, it is worth noting that there is no filename for this temporary in-memory file (one needs to operate on the handler). The solution is great for OP usage though (+1). What is unfortunately missing in the module is <code>tempfile.NamedSpooledTemporaryFile()</code> (a combination of <code>NamedTemporaryFile()</code> and <code>SpooledTemporaryFile()</code>)</span>
<span class="comment-copy">@WoJ: Thanks for the +1. I think the reason there's no <code>tempfile.NamedSpooledTemporaryFile()</code> is that it doesn't make sense to say something that starts out as a memory-based virtual file could be guaranteed to have a visible name in the file system—although It <i>might</i> have one at some point should its size exceeds the specified <code>max_size</code> threshold. The source code for the <code>tempfile</code> module is in <code>python/Lib/tempfile.py</code>, which might be helpful if you wanted to implement something yourself with the desired behavior (whatever that might be when the data is currently in memory).</span>
<span class="comment-copy">It should be noted that should you need to interface with code that needs filenames, then: <a href="http://stackoverflow.com/questions/11892623/python-stringio-and-compatibility-with-with-statement-context-manager/11892712#11892712">If all your legacy code can take is a filename, then a <code>StringIO</code> instance is not the way to go. Use the <code>tempfile</code> module to generate a temporary filename instead.</a></span>
<span class="comment-copy">Remember, if you want to pass it to another function, as a file-like object, you should rewind the the virtual file with:     output.seek(0)</span>
<span class="comment-copy">man, are you copy-pasting from the official documentation? :) I think it's fair to use a link in such cases.</span>
<span class="comment-copy">@maxadamo Done. Thanks.</span>
<span class="comment-copy"><code>from io import StringIO</code> for python &gt;= 3</span>
