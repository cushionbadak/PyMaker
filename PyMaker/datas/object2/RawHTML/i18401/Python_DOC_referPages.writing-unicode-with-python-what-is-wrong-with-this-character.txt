<div class="post-text" itemprop="text">
<p>With python 2.7 I am reading as unicode and writing as utf-16-le. Most characters are correctly interpreted. But some are not, for example, u'\u810a', also known as <a href="http://www.unicode.org/cgi-bin/GetUnihanData.pl?codepoint=810A&amp;useutf8=false" rel="nofollow">unichr(33034)</a>. The following code code does not write correctly:</p>
<pre><code>import codecs
with open('temp.txt','w') as temp:
    temp.write(codecs.BOM_UTF16_LE)     
    text = unichr(33034)  # text = u'\u810a'
    temp.write(text.encode('utf-16-le'))
</code></pre>
<p>But either of these things, when replaced above, make the code work.</p>
<ol>
<li><p>unichr(33033) and unichr(33035) work correctly.</p></li>
<li><p>'utf-8' encoding (without BOM, <a href="http://en.wikipedia.org/wiki/Byte_order_mark" rel="nofollow">byte-order mark</a>).</p></li>
</ol>
<p>How can I recognize characters that won't write correctly, and how can I write a 'utf-16-le' encoded file with BOM that either prints these characters or some replacement?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are opening the file in text mode, which means that <a href="http://docs.python.org/2/library/functions.html#open" rel="nofollow">line-break characters/bytes will be translated to the local convention</a>. Unfortunately the character you are trying to write includes a byte, <code>0A</code>, that is interpreted as a line break and does not make it to the file correctly.</p>
<p>Open the file in binary mode instead:</p>
<pre><code>open('temp.txt','wb')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Joni's answer is the root of the problem, but if you use <code>codecs.open</code> instead it always opens in binary mode, even if not specified.  Using the <code>utf16</code> codec also automatically writes the BOM using native endian-ness as well:</p>
<pre><code>import codecs
with codecs.open('temp.txt','w','utf16') as temp:
    temp.write(u'\u810a')
</code></pre>
<p>Hex dump of <code>temp.txt</code>:</p>
<pre><code>FF FE 0A 81
</code></pre>
<p>Reference: <a href="http://docs.python.org/3/library/codecs.html?highlight=codecs.open#codecs.open" rel="nofollow">codecs.open</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You're already using the codecs library. When working with that file, you should swap out using open() with codecs.open() to transparently handle encoding.</p>
<pre><code>import codecs
with codecs.open('temp.txt', 'w', encoding='utf-16-le') as temp:
    temp.write(unichr(33033))
    temp.write(unichr(33034))
    temp.write(unichr(33035))
</code></pre>
<p>If you have a problem after that, you might have an issue with your viewer, not your Python script.</p>
</div>
<span class="comment-copy">Please define "incorrectly". What did you expect? What happens instead?</span>
<span class="comment-copy">When unichr(33033) and unichr(33035) are used, the output is the correct Han character. But when I write unichr(33034), trying to write è„Š, I get garbled text.</span>
<span class="comment-copy">What are you using to view the file? What bytes are written, and what bytes did you expect?</span>
<span class="comment-copy">I am using notepad++, which correctly views the character when it is pasted in. When writing the character with the above method, the hex values don't match.</span>
<span class="comment-copy">This answer does correct the problem. Many thanks! I'll accept once I debug completely.</span>
<span class="comment-copy">Clear and concise - Thanks again!</span>
<span class="comment-copy">Looks good, but if I take your code (and add the "as temp" to the open line), I get the following error: UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 0: ordinal not in range(128).</span>
<span class="comment-copy">Thanks for the correction. I noticed that I used underscores instead of dashes for the encoding. Please try again.</span>
<span class="comment-copy">Unfortunately, same error message.</span>
<span class="comment-copy">You shouldn't be writing the BOM explicitly, just open the file with encoding="'utf-16' and the BOM will be written for you. See this answer for an explanation <a href="http://stackoverflow.com/a/5726295/107660">stackoverflow.com/a/5726295/107660</a></span>
