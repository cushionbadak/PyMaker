<div class="post-text" itemprop="text">
<p>I had thought Python3 is supposed to be able to handle numbers of arbitrary length, but I'm running into a problem where they don't seem to act consistently.</p>
<p>After multiplying then dividing, my int seems to have changed it's internal representation, and no longer evaluates as a match for it's former self.</p>
<p>I'm using whole numbers, without any decimals or fractions, but it's acting almost as if it's losing precision to rounding..?</p>
<p>I'd appreciate any insight on why this is happening, and if there's something I should be doing differently. I have workarounds for my code, but since the result is counter-intuitive, I'd love to know what's behind the behavior ;)</p>
<pre><code>Python 3.3.2 (default, Jul 30 2013, 00:52:04) 
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = 313585730727764141482831584863
&gt;&gt;&gt; a
313585730727764141482831584863
&gt;&gt;&gt; b = a*2
&gt;&gt;&gt; c = b /2
&gt;&gt;&gt; a
313585730727764141482831584863
&gt;&gt;&gt; c
3.1358573072776415e+29
&gt;&gt;&gt; a == c
False
</code></pre>
<p>This seems to work if I use floor division, however-</p>
<pre><code>&gt;&gt;&gt; c = b//2
&gt;&gt;&gt; c
313585730727764141482831584863
&gt;&gt;&gt; a == c
True
</code></pre>
<p>Python 2.7 also seems to avoid this scenerio, keeping them in <code>longs</code></p>
<pre><code>&gt;&gt;&gt; a = 313585730727764141482831584863
&gt;&gt;&gt; a
313585730727764141482831584863L
&gt;&gt;&gt; b = a*2
&gt;&gt;&gt; c = b /2
&gt;&gt;&gt; a
313585730727764141482831584863L
&gt;&gt;&gt; c
313585730727764141482831584863L
&gt;&gt;&gt; a == c
True
</code></pre>
<p>I'd appreciate any insight!
Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You are dividing using the true division operator <code>/</code>, which will <em>always</em> result in floating point values. Use floor division instead, <code>//</code>, to get integer results:</p>
<pre><code>&gt;&gt;&gt; a = 313585730727764141482831584863
&gt;&gt;&gt; b = a*2
&gt;&gt;&gt; c = b // 2
&gt;&gt;&gt; a == c
True
</code></pre>
<p>Your computer hardware cannot handle float values with the required precision.</p>
<p>The alternative is to use <a href="http://docs.python.org/3/library/decimal.html" rel="nofollow"><code>decimal.Decimal()</code> values</a>, but this will result in slower arithmetic operations.</p>
<p>In Python 2, the <code>/</code> operator <em>is</em> the floor division operator, but when applied to integers <em>only</em>. To get the same behaviour in Python 2, add:</p>
<pre><code>from __future__ import division
</code></pre>
<p>The behaviour was changed because the difference between using only integer operators and using at least one float argument was confusing.</p>
<p>In other words, the standard Python 2 <code>/</code> operator is a <em>different</em> beast from the Python 3 <code>/</code> division operator. When applied to two integer operands, it acts just like the <code>//</code> floor division operator in Python 3. But if either one of the two operands is a float instead, then it acts like the <code>/</code> float division operator <em>instead</em>. The above <code>__future__</code> import swaps out the Python 2 <code>/</code> operator for the true division operator found in Python 3.</p>
<p>You can see this when disassembling Python bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def olddivision(x, y): return x / y
... 
&gt;&gt;&gt; dis.dis(olddivision)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_FAST                1 (y)
              6 BINARY_DIVIDE       
              7 RETURN_VALUE        
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; def newdivision(x, y): return x / y
... 
&gt;&gt;&gt; dis.dis(newdivision)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_FAST                1 (y)
              6 BINARY_TRUE_DIVIDE  
              7 RETURN_VALUE        
</code></pre>
<p>the <code>__future__</code> import caused the Python compiler to use a different bytecode for the division operator, swapping <code>BINARY_DIVIDE</code> for <code>BINARY_TRUE_DIVIDE</code>.</p>
</div>
<span class="comment-copy">Don't forget to accept Martijn's answer.</span>
<span class="comment-copy">Thanks! I mentioned the <code>//</code> operator in the post above - Where I get confused is why floats are invited to the party ;) The example is arithmetic division, where the numbers divide cleanly. Does Python do <i>all</i> division by casting to floats? Thanks!</span>
<span class="comment-copy">@ColinDavis: Because floating point calculations are done in hardware and have a limited precision.</span>
<span class="comment-copy">Sure - I'm fully on-board with how floating point works, how it's stored internally, precision on various platforms, etc. I'm using Decimal to ensure it acts predictably - I understand the change that was made between Py2 and Py3, and have read the relevant PEP - What I'm trying to understand is why we're hitting floating point logic at all. What I'm guessing is that Py3 is casting all division to floats before doing the division, since knowing before hand if it'll be necessary would be more costly.</span>
<span class="comment-copy">No, using <code>/</code> in Python 3 <b>always</b> results in float results. That is about consistency, not about knowing the operands beforehand. The Python 2 behaviour was a mistake leading to confusion. A new operator was introduced to alleviate that problem.</span>
