<div class="post-text" itemprop="text">
<p>I have now:</p>
<pre><code>list1 = [1, 2, 3]
list2 = [4, 5, 6]
</code></pre>
<p>I wish to have:</p>
<pre><code>[1, 2, 3]
 +  +  +
[4, 5, 6]
|| || ||
[5, 7, 9]
</code></pre>
<p>Simply an element-wise addition of two lists.</p>
<p>I can surely iterate the two lists, but I don't want do that.</p>
<p>What is <strong>the most Pythonic way</strong> of doing so?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a> with <a href="https://docs.python.org/2/library/operator.html#operator.add" rel="noreferrer"><code>operator.add</code></a>:</p>
<pre><code>&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; list( map(add, list1, list2) )
[5, 7, 9]
</code></pre>
<p>or <a href="https://docs.python.org/2/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> with a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [sum(x) for x in zip(list1, list2)]
[5, 7, 9]
</code></pre>
<h3>Timing comparisons:</h3>
<pre><code>&gt;&gt;&gt; list2 = [4, 5, 6]*10**5
&gt;&gt;&gt; list1 = [1, 2, 3]*10**5
&gt;&gt;&gt; %timeit from operator import add;map(add, list1, list2)
10 loops, best of 3: 44.6 ms per loop
&gt;&gt;&gt; %timeit from itertools import izip; [a + b for a, b in izip(list1, list2)]
10 loops, best of 3: 71 ms per loop
&gt;&gt;&gt; %timeit [a + b for a, b in zip(list1, list2)]
10 loops, best of 3: 112 ms per loop
&gt;&gt;&gt; %timeit from itertools import izip;[sum(x) for x in izip(list1, list2)]
1 loops, best of 3: 139 ms per loop
&gt;&gt;&gt; %timeit [sum(x) for x in zip(list1, list2)]
1 loops, best of 3: 177 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The others gave examples how to do this in pure python. If you want to do this with arrays with 100.000 elements, you should use numpy:</p>
<pre><code>In [1]: import numpy as np
In [2]: vector1 = np.array([1, 2, 3])
In [3]: vector2 = np.array([4, 5, 6])
</code></pre>
<p>Doing the element-wise addition is now as trivial as</p>
<pre><code>In [4]: sum_vector = vector1 + vector2
In [5]: print sum_vector
[5 7 9]
</code></pre>
<p>just like in Matlab.</p>
<p>Timing to compare with Ashwini's fastest version:</p>
<pre><code>In [16]: from operator import add
In [17]: n = 10**5
In [18]: vector2 = np.tile([4,5,6], n)
In [19]: vector1 = np.tile([1,2,3], n)
In [20]: list1 = [1,2,3]*n
In [21]: list2 = [4,5,6]*n
In [22]: timeit map(add, list1, list2)
10 loops, best of 3: 26.9 ms per loop

In [23]: timeit vector1 + vector2
1000 loops, best of 3: 1.06 ms per loop
</code></pre>
<p>So this is a factor 25 faster! But use what suits your situation. For a simple program, you probably don't want to install numpy, so use standard python (and I find Henry's version the most pythonic one). If you are into serious number crunching, let <code>numpy</code> do the heavy lifting. For the speed freaks: it seems that the numpy solution is faster starting around <code>n = 8</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[a + b for a, b in zip(list1, list2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As described by others, a fast and also space efficient solution is using numpy (np) with it's built-in vector manipulation capability:</p>
<p><strong>1. With Numpy</strong></p>
<pre><code>x = np.array([1,2,3])
y = np.array([2,3,4])
print x+y
</code></pre>
<p><strong>2. With built-ins</strong></p>
<p><strong>2.1 Lambda</strong></p>
<pre><code>list1=[1, 2, 3]
list2=[4, 5, 6]
print map(lambda x,y:x+y, list1, list2)
</code></pre>
<p>Notice that map() supports multiple arguments.</p>
<p><strong>2.2 zip and list comprehension</strong></p>
<pre><code>list1=[1, 2, 3]
list2=[4, 5, 6]
print [x + y for x, y in zip(list1, list2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's simpler to use <code>numpy</code> from my opinion:</p>
<pre><code>import numpy as np
list1=[1,2,3]
list2=[4,5,6]
np.add(list1,list2)
</code></pre>
<p>Results:</p>
<p><a href="https://i.stack.imgur.com/CLi2t.png" rel="noreferrer"><img alt="Terminal execution" src="https://i.stack.imgur.com/CLi2t.png"/></a></p>
<p>For detailed parameter information, check here: <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html" rel="noreferrer">numpy.add</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps "the most pythonic way" should include handling the case where list1 and list2 are not the same size. Applying some of these methods will quietly give you an answer. The numpy approach will let you know, most likely with a ValueError.</p>
<p>Example:</p>
<pre><code>import numpy as np
&gt;&gt;&gt; list1 = [ 1, 2 ]
&gt;&gt;&gt; list2 = [ 1, 2, 3]
&gt;&gt;&gt; list3 = [ 1 ]
&gt;&gt;&gt; [a + b for a, b in zip(list1, list2)]
[2, 4]
&gt;&gt;&gt; [a + b for a, b in zip(list1, list3)]
[2]
&gt;&gt;&gt; a = np.array (list1)
&gt;&gt;&gt; b = np.array (list2)
&gt;&gt;&gt; a+b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: operands could not be broadcast together with shapes (2) (3)
</code></pre>
<p>Which result might you want if this were in a function in your problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will work for 2 or more lists; iterating through the list of lists, but using numpy addition to deal with elements of each list</p>
<pre><code>import numpy as np
list1=[1, 2, 3]
list2=[4, 5, 6]

lists = [list1, list2]
list_sum = np.zeros(len(list1))
for i in lists:
   list_sum += i
list_sum = list_sum.tolist()    

[5.0, 7.0, 9.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is simple with <strong><code>numpy.add()</code></strong></p>
<pre><code>import numpy

list1 = numpy.array([1, 2, 3])
list2 = numpy.array([4, 5, 6])
result = numpy.add(list1, list2) # result receive element-wise addition of list1 and list2
print(result)
array([5, 7, 9])
</code></pre>
<p><a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.add.html#numpy-add" rel="nofollow noreferrer">See doc here</a></p>
<p>If you want to receiver a python list:</p>
<pre><code>result.tolist()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use map with lambda function:</p>
<pre><code>&gt;&gt;&gt; map(lambda x, y: x + y, list1, list2)
[5, 7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I haven't timed it but I suspect this would be pretty quick:  </p>
<pre><code>import numpy as np
list1=[1, 2, 3]
list2=[4, 5, 6]

list_sum = (np.add(list1, list2)).tolist()

[5, 7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to handle lists of different sizes, worry not! The wonderful <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools</a> module has you covered:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; list1 = [1,2,1]
&gt;&gt;&gt; list2 = [2,1,2,3]
&gt;&gt;&gt; [sum(x) for x in zip_longest(list1, list2, fillvalue=0)]
[3, 3, 3, 3]
&gt;&gt;&gt;
</code></pre>
<p>In Python 2, <code>zip_longest</code> is called <a href="https://docs.python.org/2.7/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a>.</p>
<p>See also <a href="https://stackoverflow.com/questions/2407398/python-merge-items-of-two-lists-into-a-list-of-tuples#comment2388427_2407405">this relevant answer and comment on another question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[list1[i] + list2[i] for i in range(len(list1))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although, the actual question does not want to iterate over the list to generate the result, but all the solutions that has been proposed does exactly that under-neath the hood! </p>
<p>To refresh: You cannot add two vectors without looking into all the vector elements. So, the algorithmic complexity of most of these solutions are Big-O(n). Where n is the dimension of the vector.</p>
<p>So, from an algorithmic point of view, using a for loop to iteratively generate the resulting list is logical and pythonic too. However, in addition, this method does not have the overhead of calling or importing any additional library.</p>
<pre><code># Assumption: The lists are of equal length.
resultList = [list1[i] + list2[i] for i in range(len(list1))]
</code></pre>
<p>The timings that are being showed/discussed here are system and implementation dependent, and cannot be reliable measure to measure the efficiency of the operation. In any case, the big O complexity of the vector addition operation is linear, meaning O(n).</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/845112/concise-vector-adding-in-python">Concise vector adding in Python?</a></span>
<span class="comment-copy">If you use those huge arrays, the numpy solution by @BasSwinckels is probably something you should be looking at.</span>
<span class="comment-copy">What Python version did you use for those timings?</span>
<span class="comment-copy">@arshajii It is <a href="http://Ipython.org" rel="nofollow noreferrer">IPython</a> shell.</span>
<span class="comment-copy">N.B. - in python3, map() returns an iterable thingy rather than a list. If you do need an actual list, the first answer is list(map(add, list1, list2))</span>
<span class="comment-copy">Noting the python3 issue noted by @FLHerne with <code>map</code> will just grow more important over time. Python 2 will lose official support in less than 3 years.</span>
<span class="comment-copy">@deltab   The accepted answer is faster AND it contains this answer (more informative)</span>
<span class="comment-copy">@perfectionm1ng though I understand your point (and don't begrudge it one bit) I just thought it's worth pointing out that I would always use either the solution I've presented (which given it requires no imports is arguably the simplest, as well as being arguably the more pythonic), or where speed counts, the answer of <a href="http://stackoverflow.com/a/18713494/709852">Bas Swinckel</a>, which is overwhelmingly the right option where speed matters.</span>
<span class="comment-copy">Yes. Thanks for the opinion. But essentially <code>[sum(x) for x in zip(list1, list2)]</code> is the same as your answer, isn't it? :)</span>
<span class="comment-copy">@perfectionm1ng More or less (though it was added after mine with an edit :). Personally, I prefer the the a+b notation with explicit tuple unpacking for readability and pythonicness.</span>
<span class="comment-copy">+1 for the lambda approach. It's a shame this solution is combined with other solutions which are duplicated elsewhere.</span>
<span class="comment-copy">More pythonic would be <code>[a + b for (a, b) in zip(list1, list2)]</code></span>
