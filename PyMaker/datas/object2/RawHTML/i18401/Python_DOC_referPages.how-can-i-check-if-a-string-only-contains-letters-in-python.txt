<div class="post-text" itemprop="text">
<p>I'm trying to check if a string only contains letters, not digits or symbols.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; only_letters("hello")
True
&gt;&gt;&gt; only_letters("he7lo")
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple:</p>
<pre><code>if string.isalpha():
    print("It's all letters")
</code></pre>
<p><a href="http://docs.python.org/2/library/stdtypes.html#str.isalpha"><code>str.isalpha()</code></a> is only true if <em>all</em> characters in the string are letters:</p>
<blockquote>
<p>Return true if all characters in the string are alphabetic and there is at least one character, false otherwise.</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; 'hello'.isalpha()
True
&gt;&gt;&gt; '42hello'.isalpha()
False
&gt;&gt;&gt; 'hel lo'.isalpha()
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>str.isalpha()</code> function works.  ie.</p>
<pre><code>if my_string.isalpha():
    print('it is letters')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For people finding this question via Google who might want to know if a string contains only a subset of all letters, I recommend using regexes:</p>
<pre><code>import re

def only_letters(tested_string):
    match = re.match("^[ABCDEFGHJKLM]*$", tested_string)
    return match is not None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>string.isalpha()</code> function will work for you. </p>
<p>See <a href="http://www.tutorialspoint.com/python/string_isalpha.htm" rel="noreferrer">http://www.tutorialspoint.com/python/string_isalpha.htm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like people are saying to use <code>str.isalpha</code>.</p>
<p>This is the one line function to check if all characters are letters.</p>
<pre><code>def only_letters(string):
    return all(letter.isalpha() for letter in string)
</code></pre>
<p><code>all</code> accepts an iterable of booleans, and returns <code>True</code> iff all of the booleans are <code>True</code>. </p>
<p>More generally, <code>all</code> returns <code>True</code> if the objects in your iterable would be considered <code>True</code>. These would be considered <code>False</code></p>
<ul>
<li>0</li>
<li><code>None</code></li>
<li>Empty data structures (ie: <code>len(list) == 0</code>)</li>
<li><code>False</code>. (duh)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Actually, we're now in globalized world of 21st century and people no longer communicate using ASCII only so when anwering question about "is it letters only" you need to take into account letters from non-ASCII alphabets as well. Python has a pretty cool <a href="https://docs.python.org/3/library/unicodedata.html" rel="noreferrer">unicodedata</a> library which among other things allows categorization of Unicode characters:</p>
<pre><code>unicodedata.category('陳')
'Lo'

unicodedata.category('A')
'Lu'

unicodedata.category('1')
'Nd'

unicodedata.category('a')
'Ll'
</code></pre>
<p>The <a href="http://www.unicode.org/reports/tr44/tr44-6.html#General_Category_Values" rel="noreferrer">categories and their abbreviations</a> are defined in the Unicode standard. From here you can quite easily you can come up with a function like this:</p>
<pre><code>def only_letters(s):
    for c in s:
        cat = unicodedata.category(c)
        if cat not in ('Ll','Lu','Lo'):
            return False
    return True
</code></pre>
<p>And then:</p>
<pre><code>only_letters('Bzdrężyło')
True

only_letters('He7lo')
False
</code></pre>
<p>As you can see the whitelisted categories can be quite easily controlled by the tuple inside the function. See <a href="https://ipsec.pl/python/2017/input-validation-free-form-unicode-text-python.html" rel="noreferrer">this article</a> for a more detailed discussion.</p>
</div>
<div class="post-text" itemprop="text">
<p>(1) Use <strong>str.isalpha()</strong> when you print the string.</p>
<p>(2) Please check below program for your reference:-</p>
<pre><code> str = "this";  # No space &amp; digit in this string
 print str.isalpha() # it gives return True

 str = "this is 2";
 print str.isalpha() # it gives return False
</code></pre>
<p><strong>Note:-</strong> I checked above example in Ubuntu.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can leverage regular expressions.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile("^[a-zA-Z]+$")
&gt;&gt;&gt; pattern.match("hello")
&lt;_sre.SRE_Match object; span=(0, 5), match='hello'&gt;
&gt;&gt;&gt; pattern.match("hel7lo")
&gt;&gt;&gt;
</code></pre>
<p>The <code>match()</code> method will return a <code>Match</code> object if a match is found. Otherwise it will return <code>None</code>.</p>
<hr/>
<p>An easier approach is to use the <code>.isalpha()</code> method</p>
<pre><code>&gt;&gt;&gt; "Hello".isalpha()
True
&gt;&gt;&gt; "Hel7lo".isalpha()
False
</code></pre>
<p><code>isalpha()</code> returns true if there is at least 1 character in the string and if all the characters in the string are alphabets.</p>
</div>
<div class="post-text" itemprop="text">
<p>A pretty simple solution I came up with: (Python 3)</p>
<pre><code>    def only_letters(tested_string):
        for letter in tested_string:
            if not letter in "abcdefghjklmnopqrstuvwxyz":
                return False
        return True
</code></pre>
<p>You can add a space in the string you are checking against if you want spaces to be allowed.</p>
</div>
<span class="comment-copy">Note: In python2, this is not unicode aware so <code>"ä".isalpha()</code> is False. However, in python3 <code>"ä".isalpha()</code> is True, because python3 has unicode strings defaulty.</span>
<span class="comment-copy">@MrBones: In Python 2, use a <code>unicode</code> object if that matters.</span>
<span class="comment-copy">Yeah, I was just adding it as extra useful info for unsuspecting readers</span>
<span class="comment-copy">Sorry to go nitpicking, but the regex in your example could also be <code>^[A-HJ-M]*$</code>, which is in my opinion more readable.</span>
<span class="comment-copy">this is the most interesting solution, given it's easy to negate the premise on a per character basis.</span>
<span class="comment-copy"><code>isalpha</code> already checks every letter. There's no need to use it more than once.</span>
<span class="comment-copy">if  letter <i>not</i> in "abcdefghjklmnopqrstuvwxyz"</span>
<span class="comment-copy">You are missing a I, and don't use not properly: <code>if  letter **not** in "abcdefgh**i**jklmnopqrstuvwxyz"</code></span>
<span class="comment-copy">You would probably want to use <code>if letter.lower()...</code> As it is, uppercase letters wouldn't count. The <code>string</code> module also has a variable predefined to all the letters in the alphabet. In fact, there are three: for uppercase, lowercase, and both. Of course, the simpler solution is already given above: <code>isalpha</code>.</span>
