<div class="post-text" itemprop="text">
<p>In studying <a href="https://stackoverflow.com/a/18647337/65696">this answer</a>, I discoved, much to my surprise, that <code>exec</code> has a strange behavior;</p>
<pre><code>&gt;&gt;&gt; def f1():
...     return x
... 
&gt;&gt;&gt; def f2():
...     exec ""
...     return x
... 
&gt;&gt;&gt; f1()
Traceback (most recent call last):
  ...
NameError: global name 'x' is not defined
&gt;&gt;&gt; f2()
Traceback (most recent call last):
  ...
NameError: name 'x' is not defined
&gt;&gt;&gt; x = 'bar'
&gt;&gt;&gt; f1()
'bar'
&gt;&gt;&gt; f2()
'bar'
</code></pre>
<p>Obviously, both return some global value <code>x</code>; but not so if <code>f2()</code> is changed slightly:</p>
<pre><code>&gt;&gt;&gt; def f2():
...     exec "x = 'im local now'"
...     return x
... 
&gt;&gt;&gt; f2()
'im local now'
</code></pre>
<p>f2 returns its own special copy of <code>x</code>, even though there's nothing in the body of f2 that would seem to cause that (no assignment to x).</p>
<p>I can easy see how this is happening, the presence of the <code>exec</code> statement changes the <code>LOAD_GLOBAL</code> bytecode into a <code>LOAD_NAME</code>, in a similar vein as the presence of <code>yield</code> turns a function into a generator.</p>
<pre><code>&gt;&gt;&gt; dis.dis(f1)
  2           0 LOAD_GLOBAL              0 (x)
              3 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(f2)
  2           0 LOAD_CONST               1 ('')
              3 LOAD_CONST               0 (None)
              6 DUP_TOP             
              7 EXEC_STMT           

  3           8 LOAD_NAME                0 (x)
             11 RETURN_VALUE        
</code></pre>
<p>But what I don't understand is <em>why</em>.  Is this documented behavior?  is this an implementation detail of cpython? (it works in the same way in IronPython, although the <code>dis</code> module is non functional)</p>
</div>
<div class="post-text" itemprop="text">
<p>Imagine a more general case:</p>
<pre><code>def f(stuff):
    exec(stuff)
    return x
</code></pre>
<p>Python obviously has to use <code>LOAD_NAME</code> here, because it doesn't know whether the code in <code>stuff</code> will mess with <code>x</code>. The same case goes for <em>any</em> use of <code>exec()</code>, even if the argument is a constant â€” Python simply doesn't do a deep enough analysis to determine that any <code>exec()</code> happens to be safe.</p>
<p>(There's a perfectly good reason why it shouldn't do that analysis, too: the only case that it <em>could</em> even analyze with any degree of success would be <code>exec()</code> on a constant argument, which is pointless. If the argument is fully known ahead of time, it should just be normal code!)</p>
</div>
<span class="comment-copy">Your first <code>f2</code> also seems to be returning a local <code>x</code>.</span>
<span class="comment-copy">Doesn't this statement in the documentation of <a href="http://docs.python.org/3/library/functions.html?highlight=exec#exec" rel="nofollow noreferrer">exec</a> explain this behavior: "In all cases, if the optional parts are omitted, the code is executed in the current scope."</span>
<span class="comment-copy"><code>exec</code> isn't a function in Python 2. In Python 3, it's a function, but it doesn't affect the bytecode generated.</span>
