<div class="post-text" itemprop="text">
<p>I want to cut a long text after x characters, but I don't want to cut a word in the middle, I want to cut at the last whitespace before x chars:</p>
<pre><code>'This is a sample text'[:20]
</code></pre>
<p>gives me</p>
<pre><code>'This is a sample tex'
</code></pre>
<p>but I want</p>
<pre><code>'This is a sample'
</code></pre>
<p>Another example:</p>
<pre><code>'And another sample sentence'[:15]
</code></pre>
<p>gives me</p>
<pre><code>'And another sam'
</code></pre>
<p>but I want</p>
<pre><code>'And another'
</code></pre>
<p>What is the easiest way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import textwrap
lines = textwrap.wrap(text, 20)
# then use either
lines[0]
# or
'\n'.join(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/library/stdtypes.html#str.rpartition" rel="nofollow noreferrer"><code>str.rpartition()</code></a> or <a href="http://docs.python.org/3/library/stdtypes.html#str.rsplit" rel="nofollow noreferrer"><code>str.rsplit()</code></a> to remove everything after the last space of the remainder:</p>
<pre><code>example[:20].rpartition(' ')[0]

example[:20].rsplit(' ', 1)[0]
</code></pre>
<p>The second argument to <code>str.rsplit()</code> limits the split to the first space from the right, and the <code>[0]</code> index takes whatever was split off before that space. </p>
<p><code>str.rpartition()</code> is a bit faster, and always returns three strings; if there was no space then the first string returned is empty, so you may want to stick with <code>str.rsplit()</code> if thatâ€™s a possibility (that version would return a list with a single string in that case, so you end up with the original string again).</p>
</div>
<div class="post-text" itemprop="text">
<p>Upvoted the two other answers, but just for the fun, with regex:</p>
<pre><code>import re

r = re.compile('.{,20}(?&lt;! )(?= |\Z|\A)')
for s in ('This is a sample text',
          'abcdefghijklmnopqrstuvwxyz  ',
          'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
          'This is 1 first sample text  ',
          'This is 1 again sample text',
          'A great blank          here',
          'Another blank     here',
          'A short text',
          '  little indent',
          '                      great indent',
          'ocean',
          '!',
          ''):
    print ('-----------------------\n'
           " ....5...10...15...20\n"
           '%r\n%r'
           % (s, r.match(s).group() )   )
</code></pre>
<p>result</p>
<pre><code>-----------------------
 ....5...10...15...20
'This is a sample text'
'This is a sample'
-----------------------
 ....5...10...15...20
'abcdefghijklmnopqrstuvwxyz  '
''
-----------------------
 ....5...10...15...20
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
''
-----------------------
 ....5...10...15...20
'This is 1 first sample text  '
'This is 1 first'
-----------------------
 ....5...10...15...20
'This is 1 again sample text'
'This is 1 again'
-----------------------
 ....5...10...15...20
'A great blank          here'
'A great blank'
-----------------------
 ....5...10...15...20
'Another blank     here'
'Another blank'
-----------------------
 ....5...10...15...20
'A short text'
'A short text'
-----------------------
 ....5...10...15...20
'  little indent'
'  little indent'
-----------------------
 ....5...10...15...20
'                      great indent'
''
-----------------------
 ....5...10...15...20
'ocean'
'ocean'
-----------------------
 ....5...10...15...20
'!'
'!'
-----------------------
 ....5...10...15...20
''
''
</code></pre>
</div>
<span class="comment-copy">That... is amazing. +1. This is what makes python brilliant. (you might want to add <code>[0]</code> at the end)</span>
<span class="comment-copy">This returns a list, but is otherwise a great idea. Add <code>[0]</code> and you've won the internetz.</span>
<span class="comment-copy"><code>lines = textwrap.wrap(text, 20)</code> <code>'\n'.join(lines)</code> : the doc says it is <code>textwrap.fill(text, 20)</code></span>
<span class="comment-copy">If you wanted joined lines, you could use <code>textwrap.fill()</code>, which does exactly that.</span>
