<div class="post-text" itemprop="text">
<p>I want to replace a word in a string with another word. Ex. replaceWord("cool","awesome","Stack overflow is cool.") Output would be: "Stack overflow is awesome" I don't understand why my code isn't working.</p>
<pre><code>def replaceWord(oldWord,newWord,aStr):
    aStr.replace(oldWord,newWord)
    return aStr
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def replaceWord(old, new, astr):
   return astr.replace(old, new)
</code></pre>
<p>A string operation is <em>never</em> in-place - instead replace() will create a new string because strings are immutable.</p>
<p>But wait...why do you want your own string replaceWord() method? </p>
<p>Strings have their own build-in replace() method!</p>
</div>
<div class="post-text" itemprop="text">
<p>Why are you not just using the return value of <code>aStr.replace(oldWord,newWord)</code>? Why is it necessary to nest this function inside another function? As for your question it is because <code>replace</code> is not an in place operation. You need to do something like:</p>
<pre><code>return aStr.replace(oldWord, newWord)
</code></pre>
<p>Anyways I still find it strange that you wrapped it in a function...</p>
</div>
<div class="post-text" itemprop="text">
<p>Try This</p>
<pre><code>def replaceWord(oldWord,newWord,aStr): 
   aStr = aStr.replace(oldWord,newWord) 
   return aStr
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="http://docs.python.org/2/library/string.html" rel="nofollow">http://docs.python.org/2/library/string.html</a></p>
<blockquote>
<p>string.replace(s, old, new[, maxreplace]) Return a copy of string s
  with all occurrences of substring old replaced by new. If the optional
  argument maxreplace is given, the first maxreplace occurrences are
  replaced.</p>
</blockquote>
<p>Your code should thus be modified to:</p>
<pre><code>def replaceWord(oldWord,newWord,aStr):
    return aStr.replace(oldWord,newWord)
</code></pre>
<p>This difference being that yours did not catch the returned (new) string from the replace function.</p>
<p>Ideally thought you should just use <code>aStr.replace(oldWord,newWord)</code> without wrapping it in a function. There would be less overhead that way, and it makes the code clearer.</p>
<p>If you want it to only replace the first word you can add the third, optional, parameter which is the number of replacements to do.</p>
</div>
<span class="comment-copy">Look at this <code>str.replace(old, new[, max])</code> ,<code>max -- If this optional argument max is given, only the first count occurrences are replaced</code></span>
<span class="comment-copy"><a href="http://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#string-methods</a></span>
<span class="comment-copy">Of course, it's preferred to just use <code>str.replace</code> as opposed to wrapping it like this.</span>
<span class="comment-copy">Nah. I'm an intro CS student, so I always have dumb questions like this. Thanks though!</span>
