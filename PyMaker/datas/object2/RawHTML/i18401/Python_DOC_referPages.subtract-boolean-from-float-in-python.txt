<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2764017/is-false-0-and-true-1-in-python-an-implementation-detail-or-is-it-guarante">Is False == 0 and True == 1 in Python an implementation detail or is it guaranteed by the language?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>Anyways when debuging my code I found statement that basically subtracted <code>boolean</code> from <code>float</code>.</p>
<p>Then I tried following in python console: </p>
<pre><code>&gt;&gt;&gt; 15.0 - True 
14.0
&gt;&gt;&gt; 15.0 - False
15.0
</code></pre>
<p>Can anyone explain to me: </p>
<ul>
<li>Why subtracting booleans from numeric types is legal (the docs only state that you can do <code>and</code>, <code>not</code> and <code>or</code> on boolean values: <a href="http://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow">http://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not</a>)</li>
<li>Has this any practical use?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p><a href="http://docs.python.org/3/library/stdtypes.html#boolean-values" rel="nofollow">http://docs.python.org/3/library/stdtypes.html#boolean-values</a></p>
<blockquote>
<p>Boolean values are the two constant objects False and True. They are used to represent truth values (although other values can also be considered false or true).</p>
<p>In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively.</p>
</blockquote></li>
<li><p>not really nowadays, but you can write </p>
<p><code>result = numeric_value * a_bool</code> <em>(this one is used a lot, for example, in shader languages)</em></p>
<p>instead of</p>
<p><code>result = numeric_value if a_bool else 0</code></p>
<p>or </p>
<p><code>result = (value_if_false, value_if_true)[a_bool]</code></p>
<p>Don't do any of that though.</p></li>
</ul>
<p>It's mostly what people with experience in lower-level languages expect, why take that away from them? In C, true and false are still macros for 1 and 0.</p>
<p>Before 2.3, there was no <code>bool</code> type in Python as well, so when it was introduced making it a subclass of <code>int</code> made sure no code was broken.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is legal, because <code>bool</code> is a subclass of <code>int</code>:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; bool.__bases__
(&lt;type 'int'&gt;,)
&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; False == 0
True
</code></pre>
<p>Yes, it has some practical application. For example it was possible to do something like that before ternary statement was introduced:</p>
<pre class="lang-py prettyprint-override"><code>result = [value_if_false, value_if_true][condition]
</code></pre>
<p>Which basically does what would be done in this code:</p>
<pre class="lang-py prettyprint-override"><code>if condition:
    result = value_if_false
else:
    result = value_if_true
</code></pre>
<p>Other practical usages are:</p>
<ul>
<li>you can <code>sum</code> several checks / booleans to receive number of results equaling <code>True</code>,</li>
<li><p>you can multiply by the result of the check:</p>
<pre class="lang-py prettyprint-override"><code>result = can_count_a * a + can_count_b * b
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>True evaluates to 1 and False evaluates to 0.</p>
<pre><code>&gt;&gt;&gt; True is 1
False
&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt;
</code></pre>
<p>Bool is a subclass of int. As stated in <a href="http://www.python.org/dev/peps/pep-0285/" rel="nofollow">PEP-285</a>:</p>
<blockquote>
<p>6) Should bool inherit from int?</p>
<p>=&gt; Yes.</p>
<p>In an ideal world, bool might be better implemented as a separate
  integer type that knows how to perform mixed-mode arithmetic. 
  However, inheriting bool from int eases the implementation enormously
  (in part since all C code that calls PyInt_Check() will continue to
  work -- this returns true for subclasses of int).  Also, I believe
  this is right in terms of substitutability: code that requires an int
  can be fed a bool and it will behave the same as 0 or 1.  Code that
  requires a bool may not work when it is given an int; for example, 3 &amp;
  4 is 0, but both 3 and 4 are true when considered as truth values.</p>
</blockquote>
<p>This isn't of any much practical use and there are other answers with <code>sudo</code> examples of using bools. I thought it would be good to have some <em>real</em> examples:</p>
<pre><code>f,b="Fizz","Buzz"
print "\n".join([["",f,b,f+b][(x%3==0) + 2*(x%5==0)] or str(x) for x in range(1,101)])
</code></pre>
<p>The section in question:</p>
<pre><code>["",f,b,f+b][(x%3==0) + 2*(x%5==0)]
</code></pre>
<p>The selection of the return each line is based on two boolean expressions, if both are true we get <code>(True) + 2*(True)</code> which evaluates to 4 which is a fizzbuzz. Not too hard to understand once you get used to the idea that <code>True == 1</code> and <code>False == 0</code> </p>
<p>Further more keeping with the theme:</p>
<pre><code>print '\n'.join(['Fizz'*(not i%3) + 'Buzz'*(not i%5) or str(i) for i in range(1, 101)])
</code></pre>
<p>This example relies on what happens when you multiply strings in python:</p>
<pre><code>&gt;&gt;&gt; "Noelkd" * False
''
</code></pre>
<p>And that not True evaluates to 0:</p>
<pre><code>&gt;&gt;&gt; not True == 0
True
</code></pre>
<p>Uses for this fall into two categories:</p>
<ul>
<li><p>Making harder to read code. </p></li>
<li><p>Competing in code golf competitions.</p></li>
</ul>
</div>
<span class="comment-copy">Because <code>True == 1</code></span>
<span class="comment-copy">I have done <code>result = (value_if_false, value_if_true)[a_bool]</code> when it is faster.  great answer tho +1</span>
<span class="comment-copy">@Noelkd: faster than a ternary <code>if</code>?</span>
<span class="comment-copy">In some toy code when we where doing speed comps in the office yes, will have to wait till tomorrow for examples. ( edit: maybe not ternary if)</span>
<span class="comment-copy">A similar answer to complement this one: <a href="http://stackoverflow.com/a/2764099/25450">stackoverflow.com/a/2764099/25450</a> (Strictly speaking, in Python2 <code>True</code> and <code>False</code> can be reassigned: <code>True, False = 2, 0; 15.0 - True</code> =&gt; <code>13.0</code>)</span>
<span class="comment-copy">disassembling a ternary operator call and @Noelkd 's expression: ternary operator performs 4 more calls when looking at bytecode mnemonics vs. 4 overall in the tuple-expression.</span>
<span class="comment-copy">What is the formal name for this? It's very similar to the ability to add a float to an int and have a float returned.</span>
<span class="comment-copy">@MikeVella: Formal name of what? Since <code>bool</code> is a subclass of <code>int</code>, when you are adding <code>bool</code> to <code>float</code>, the result is almost identical to adding <code>int</code> to <code>float</code>. Are you asking about <i>coercion</i>?</span>
<span class="comment-copy">yes! <i>coercion</i> is just the term I was looking for - thanks!</span>
<span class="comment-copy">@MikeVella: No problem, I am happy I helped.</span>
