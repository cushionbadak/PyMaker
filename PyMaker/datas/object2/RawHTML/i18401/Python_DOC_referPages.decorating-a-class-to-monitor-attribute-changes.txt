<div class="post-text" itemprop="text">
<p>I want to have classes that automatically send notifications to subscribers whenever one of their attributes change. So if I would write this code:</p>
<pre><code>@ChangeMonitor
class ChangingClass(object):

    def __init__(self, x):
        self.x = x


changer = ChangingClass(5)
print("Going to change x.")
changer.x = 6
print("Going to not change x.")
changer.x = 6
print("End of program")
</code></pre>
<p>The output would be:</p>
<pre><code>Going to change x
Old x = 5, new x = 6
Going to not change x.
End of program.
</code></pre>
<p>My question is how to implement the ChangeMonitor decorator class. In the above example I assume it will print a line indicating the changes of an attribute, but for useful purposes it could send notifications to subscribed objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd have to add a <a href="http://docs.python.org/3/reference/datamodel.html#object.__setattr__" rel="nofollow"><code>__setattr__()</code> method</a>:</p>
<pre><code>def ChangeMonitor(cls):
    _sentinel = object()
    old_setattr = getattr(cls, '__setattr__', None)
    def __setattr__(self, name, value):
        old = getattr(self, name, _sentinel)
        if old not is _sentinel and old != value:
            print "Old {0} = {1!r}, new {0} = {2!r}".format(name, old, value)
        if old_setattr:
            old_setattr(self, name, value)
        else:
            # Old-style class
            self.__dict__[name] = value

    cls.__setattr__ = __setattr__

    return cls
</code></pre>
<p>This should handle existing <code>__setattr__</code> hooks as well. The <code>_sentinel</code> is used to allow <code>None</code> as the old value too.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; changer = ChangingClass(5)
&gt;&gt;&gt; changer.x = 6
Old x = 5, new x = 6
&gt;&gt;&gt; changer.x = 6
&gt;&gt;&gt; # nothing printed
...
&gt;&gt;&gt; changer.x = None
Old x = 6, new x = None
&gt;&gt;&gt; changer.x = 6
Old x = None, new x = 6
</code></pre>
</div>
<span class="comment-copy">I do not see the use of _sentinel or the second if statement. If I leave _sentinel out and replace the "if old_setattr" statement with "old_setattr(self, name, value)", the behavior is the same. Could you explain this? Thanks for your help anyway, you've been a great help!</span>
<span class="comment-copy">If you replace the sentinel with <code>None</code> you won't be able to tell if an old value of <code>None</code> was replaced by a new value. Instead it'll be indistinguishable from the 'no old value at all' case.  I believe old-style classes (not inheriting from <code>object</code>) have no default <code>__setattr__</code> hook; I am not in a position to test that right now though; it may be redundant to test if a hook was found</span>
<span class="comment-copy">I see your point regarding sentinel. I checked the code without inheriting from object and the examples give the same output, so I think you're right that the test for <b>setattr</b> is redundant.</span>
