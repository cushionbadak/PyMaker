<div class="post-text" itemprop="text">
<pre><code>array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
array2 = [1, 2, 2, 2, 5, 6, 6, 6, 9]

temp = set(array2)

array1.remove(temp)

Traceback (most recent call last):
  File "Sudoku V2.py", line 6, in &lt;module&gt;
    array1.remove(temp)
ValueError: list.remove(x): x not in list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this: </p>
<pre><code>array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
array2 = [1, 2, 2, 2, 5, 6, 6, 6, 9]
set(array1).difference(array2)
=&gt; set([3, 4, 7, 8])
</code></pre>
<p>The above makes use of the <a href="http://docs.python.org/2/library/stdtypes.html#set.difference" rel="noreferrer">difference()</a> method of sets, which returns a new set with elements in the set that are not in the iterable(s) received as parameter. Notice that there's no need to convert <code>array2</code> to a set for this to work.</p>
<p>Also be aware that by using sets, all duplicate elements will be removed and the original order of the iterables won't necessarily be preserved. If that's an issue, try this alternative solution:</p>
<pre><code>[x for x in array1 if x not in array2]
=&gt; [3, 4, 7, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about the order of elements in the result, or about duplicate elements, <code>set.difference</code>, as in Óscar López's answer, is exactly what you want.</p>
<p>If you <em>do</em> care about order and preserving duplicates, the simplest way is to just build a new list, filtering out the ones in <code>array2</code>:</p>
<pre><code>set2 = set(array2)
array1 = [item for item in array1 if item not in set2]
</code></pre>
<p>If you need to destructively modify <code>array1</code> in-place instead of building a new one, it's almost always simpler to just destructively replace the contents of <code>array1</code> all at once:</p>
<pre><code>array1[:] = [item for item in array1 if item not in set2]
</code></pre>
<p>If you really want to modify it element by element, the best way would be to iterate <code>array1</code> backward, removing in-place:</p>
<pre><code>set2 = set(array2)
for i, value in enumerate(array1)[::-1]:
    if value in set2:
        del array1[i]
</code></pre>
<p>Finally, you <em>can</em> do it the way flornquake suggested, but that will take quadratic time instead of linear, because it takes no advantage of the <code>set</code>; for each element in <code>set2</code>, it does a linear <code>array1.remove</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want array1 - array2?</p>
<p>set1 = set(array1)</p>
<p>set2 = set(array2)</p>
<p>set1.difference(set2) is what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>s -&gt; sequence</p>
<pre><code>s.remove(x) remove the first item from s where s[i] == x

remove raises ValueError when x is not found in s.
</code></pre>
<p><a href="http://docs.python.org/3/library/stdtypes.html#index-23" rel="nofollow">http://docs.python.org/3/library/stdtypes.html#index-23</a></p>
<p>None of the elements in array1 is a set.  All the elements in array1 are integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>remove()</code> method takes a single element of the list, so we have to call it once for each element:</p>
<pre><code>for item in set(array2):
    array1.remove(item)
</code></pre>
<p>Other methods such as Óscar's and abanert's are better though, they are more idiomatic and a lot more efficient.</p>
</div>
<span class="comment-copy">What part of the error message is confusing? <code>set(array2)</code> isn't in <code>array1</code>.</span>
<span class="comment-copy">What do you actually want to remove from array1? Each element of array2?</span>
<span class="comment-copy">what is your question???</span>
<span class="comment-copy">In general, it helps if you show the desired output rather than making us guess at it. See <a href="http://sscce.org" rel="nofollow noreferrer">SSCCE</a> for guidance.</span>
<span class="comment-copy">downvoters: care to comment? that's just great, some people rush to downvote without ever considering if an answer is right, and then don't show up to remove the downvote or at the very least, explain the reason for it.</span>
<span class="comment-copy">That's perfect! Thanks a bunch!</span>
<span class="comment-copy">I didn't downvote, but I suspect whoever did, did so because your answer returns a set, destroying any order in the original <code>array1</code>, and any duplicate values as well. I don't see a good reason in the OP's question to assume that this is unacceptable. But it would be a better answer if you explained the consequences of doing it this way (and offered a different alternative if they're not acceptable).</span>
<span class="comment-copy">@YuraB Great! if this answer was helpful for you, please consider <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accepting</a> it by clicking on the check mark to its left ;)</span>
<span class="comment-copy">Your answer was exactly what I was looking for, Oscar. Your help is greatly appreciated!</span>
<span class="comment-copy">You should convert array2 to a set only once</span>
<span class="comment-copy">What I mean is that <code>array1 = [item for item in array1 if item not in set(array2)]</code> should be <code>s = set(array2); array1 = [item for item in array1 if item not in s]</code> to avoid quadratic behavior.</span>
<span class="comment-copy">@flornquake: Thanks. I was already doing that in the later examples, but not the first one. Fixed.</span>
<span class="comment-copy">There's no need to convert <code>array2</code> to a set, <code>difference</code> takes an iterable as argument, see my answer.</span>
<span class="comment-copy">Welcome to <a href="https://stackoverflow.com">Stack Overflow</a>!  You can indent code with four spaces to format it nicely, or surround it by the ` character (backtick)</span>
<span class="comment-copy">@ÓscarLópez, you are right, thank you.</span>
<span class="comment-copy">@askewchan, get it, thank you.</span>
<span class="comment-copy">You aren't really making use of the set here at all; you're just iterating over all of the elements…</span>
<span class="comment-copy">You're right, thanks for pointing that out. I've edited my answer to clarify that, but I'm leaving the rest because it explains the remove method that the OP misused.</span>
