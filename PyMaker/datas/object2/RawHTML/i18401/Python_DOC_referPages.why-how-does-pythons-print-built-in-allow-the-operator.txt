<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3078042/how-does-the-right-shift-operator-work-in-a-python-print-statement">How does the right-shift operator work in a python print statement?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I searched around and couldn't find an answer to this either on this site or elsewhere (always a challenge searching for topics involving punctuation chars).</p>
<p>I was looking up the <code>StringIO</code> in the Python standard library (<a href="http://docs.python.org/2/library/stringio.html" rel="nofollow">here</a>) and one of the examples is this (excerpt):</p>
<pre><code>import StringIO

output = StringIO.StringIO()
output.write('First line.\n')
print &gt;&gt;output, 'Second line.'  # &lt;-- This is the line I'm asking about
</code></pre>
<p>How or why does the <code>&gt;&gt;</code> operator work here? As far as I can tell (and I'm no Python expert), this is the right shift operator. I thought perhaps <code>StringIO</code> overrides <code>__rshift__</code> or something, but the source for StringIO does not betray any such thing.</p>
<p>I haven't poked around to see how the <code>print</code> built-in is implemented yet, but with initial searching I'm unable to figure out how this works. Anyone?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is really a few questions in one.</p>
<hr/>
<p>First, the "how" question:</p>
<p>The <code>&gt;&gt;</code> token is not actually an operator here; it's part of the syntax of the <code>print</code> statement, as documented <a href="http://docs.python.org/2.7/reference/simple_stmts.html#the-print-statement" rel="nofollow">here</a>. The grammar is:</p>
<pre><code>print_stmt ::=  "print" ([expression ("," expression)* [","]]
                | "&gt;&gt;" expression [("," expression)+ [","]])
</code></pre>
<p>… and the semantics are:</p>
<blockquote>
<p>This form is sometimes referred to as “print chevron.” In this form, the first expression after the <code>&gt;&gt;</code> must evaluate to a “file-like” object, specifically an object that has a <code>write()</code> method as described above. With this extended form, the subsequent expressions are printed to this file object.</p>
</blockquote>
<hr/>
<p>Second, the "why" question:</p>
<p>Early on, the Python developers thought this was a convenient way to write to files.</p>
<p>Since then, they've added <a href="http://docs.python.org/2.7/library/sys.html#sys.stdin" rel="nofollow">stdout redirection</a>, and more powerful file and string-formatting APIs, so it's not as useful anymore. And, thanks to other modern features like keyword arguments, and a few decades to think about it, they've come up with a more flexible way to design <a href="http://docs.python.org/3.3/library/functions.html#print" rel="nofollow"><code>print</code></a> as a regular function that doesn't require any special syntax at all. But removing it would break backward compatibility, so it couldn't be removed until 3.0.</p>
<p>And it was removed in 3.0; you're only still seeing it because you're using an older version.</p>
<p>If you want the new <code>print</code> function in 2.7, however, you can use a <a href="http://docs.python.org/2.7/reference/simple_stmts.html#future" rel="nofollow">future statement</a>: <code>from __future__ import print_function</code>. But that will of course break <code>print &gt;&gt;foo, spam</code>; you'll have to rewrite it as <code>print(spam, file=foo)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, <code>print</code> is a statement (not a function), and statements can make up any goofy syntax they like ;-)  The <code>&gt;&gt;</code> here has nothing to do with the right shift operator - it's a gimmick specific to the <code>print</code> statement.</p>
<p>This is widely viewed as ugly, and in Python 3 <code>print</code> is a builtin function (instead of a statement), and to specify a file to which to print Python 3 adds an optional <code>file=</code> argument to the <code>print()</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is additional <em>syntax</em>; the compiler looks for <code>&gt;&gt;</code> after a <code>print</code> statement:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def print_redirected(fh, msg):
...     print &gt;&gt;fh, msg
... 
&gt;&gt;&gt; dis.dis(print_redirected)
  2           0 LOAD_FAST                0 (fh)
              3 DUP_TOP             
              4 LOAD_FAST                1 (msg)
              7 ROT_TWO             
              8 PRINT_ITEM_TO       
              9 PRINT_NEWLINE_TO    
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
&gt;&gt;&gt; def print_direct(msg):
...     print msg
... 
&gt;&gt;&gt; dis.dis(print_direct)
  2           0 LOAD_FAST                0 (msg)
              3 PRINT_ITEM          
              4 PRINT_NEWLINE       
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE        
</code></pre>
<p>The <code>&gt;&gt;</code> results in different bytecode; <code>PRINT_ITEM_TO</code> instead of <code>PRINT_ITEM</code>.</p>
<p>This is the result of the <a href="http://docs.python.org/2/reference/grammar.html" rel="nofollow">Python grammar</a> explicitly allowing for the extended syntax:</p>
<pre><code>print_stmt: 'print' ( [ test (',' test)* [','] ] |
                      '&gt;&gt;' test [ (',' test)+ [','] ] )
</code></pre>
<p>At no point does the compiler interpret the <code>&gt;&gt;</code> as a right-shift operator.</p>
<p>Redirecting print output with this syntax is little used; you can just write directly to the file, or reassign to <a href="http://docs.python.org/2/library/sys.html#sys.stdout" rel="nofollow"><code>sys.stdout</code></a> instead. The simple formatting options the <code>print</code> statement offers can easily be replicated using (much more powerful) <a href="http://docs.python.org/2/library/string.html#formatstrings" rel="nofollow">string formatting</a> in any case.</p>
<p>Python 3's <a href="http://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print()</code> function</a> accepts a <code>file</code> keyword argument to achieve the same functionality.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is answered in a <a href="https://stackoverflow.com/questions/3078042/how-does-the-right-shift-operator-work-in-a-python-print-statement">duplicate post</a>.
Quoted:</p>
<blockquote>
<p>print also has an extended form, defined by the second portion of the
  syntax described above. This form is sometimes referred to as “print
  chevron.” In this form, the first expression after the &gt;&gt; must
  evaluate to a “file-like” object, specifically an object that has a
  write() method as described above. With this extended form, the
  subsequent expressions are printed to this file object. If the first
  expression evaluates to None, then sys.stdout is used as the file for
  output.</p>
</blockquote>
</div>
<span class="comment-copy">Doh, classic case of looking in the wrong place. Should've looked at print's documentation :-) Thanks for the answers!</span>
<span class="comment-copy">Thanks @abarnert for the explanation. Could you also please add a link to the "stdout redirection" you refer to? Would like to read about it for when I cross the Python 3 bridge (soon-ish).</span>
<span class="comment-copy">@scorpiodawg: <code>stdout redirection</code> is just setting <code>sys.stdout = otherfile</code>. I believe that was added in Python 1.5, or something similarly ancient, so you can already use that today. But it's usually not the answer to what you want.</span>
<span class="comment-copy">Really handy answer; am torn but am accepting the other one since it also helped me understand the "why" but if I could accept another one this is it :-)</span>
<span class="comment-copy">@scorpiodawg: You may not be able to accept two answers, but you can upvote them, and I think this one adds enough that it's definitely worth upvoting.</span>
<span class="comment-copy">Already done :)</span>
<span class="comment-copy">@scorpiodawg: You'll have to accept the answer <i>you</i> found to be most helpful; abarnert added some interesting 'why' background, for example. :-)</span>
