<div class="post-text" itemprop="text">
<p>I'm building a network music player with my Raspberry Pi and I'm trying to come up with a scheme that will allow me to send a "command" to my Pi that will allow it to do various things over the network (such as transport control).</p>
<p>This is what I'm thinking on the receiver (in sort-of pseudo-code):</p>
<pre><code>while True:
   while nothingIsRecvD:
      do_stuff()
   do_something_with(theDataRecvDfromSocket)
</code></pre>
<p>Is there some basic code for beginners I can look at?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to use <a href="http://docs.python.org/3/library/socket.html" rel="nofollow">the <code>socket</code> module</a> and <a href="http://docs.python.org/3/library/select.html" rel="nofollow">the <code>select</code> module</a>.</p>
<p>To set up the socket, you'll need to</p>
<ol>
<li>Use <a href="http://docs.python.org/3/library/socket.html#socket.socket" rel="nofollow"><code>socket.socket</code></a> to create a socket. You'll probably want to use the <code>AF_INET</code> address family. For TCP, use <code>SOCK_STREAM</code>; for UDP, use <code>SOCK_DGRAM</code>.</li>
<li><a href="http://docs.python.org/3/library/socket.html#socket.bind" rel="nofollow"><code>bind</code></a> the socket to the interface and port you want to listen on.</li>
<li>For TCP, call <a href="http://docs.python.org/3/library/socket.html#socket.listen" rel="nofollow"><code>listen</code></a> on the socket. 5 is the typical backlog value used.</li>
</ol>
<p>If you're using TCP, you've just created a listening socket. In order to actually receive data, you'll need to accept a connection using <a href="http://docs.python.org/3/library/socket.html#socket.accept" rel="nofollow"><code>accept</code></a>. With a connected socket you can <a href="http://docs.python.org/3/library/socket.html#socket.recv" rel="nofollow"><code>recv</code></a> or <a href="http://docs.python.org/3/library/socket.html#socket.send" rel="nofollow"><code>send</code></a> data.</p>
<p>UDP is similar, except accepting is not necessary and you'll use <a href="http://docs.python.org/3/library/socket.html#socket.recvfrom" rel="nofollow"><code>recvfrom</code></a> and <a href="http://docs.python.org/3/library/socket.html#socket.sendto" rel="nofollow"><code>sendto</code></a> rather than <a href="http://docs.python.org/3/library/socket.html#socket.recv" rel="nofollow"><code>recv</code></a> and <a href="http://docs.python.org/3/library/socket.html#socket.send" rel="nofollow"><code>send</code></a>.</p>
<p>These methods block, however, and if I understand you correctly, you don't want that. <a href="http://docs.python.org/3/library/select.html#select.select" rel="nofollow"><code>select.select</code></a> lets you wait for an event to occur on any of a given set of sockets. You can also provide a zero timeout if you want to just check if there is some activity. Once it has detected activity, you can usually perform the appropriate action once without blocking.</p>
<p>Once you're done with sockets, be polite and <a href="http://docs.python.org/3/library/socket.html#socket.close" rel="nofollow"><code>close</code></a> them after <a href="http://docs.python.org/3/library/socket.html#socket.shutdown" rel="nofollow">shutting down</a> any connected sockets.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could consider using sockets to communicate between the music player and server. The recv() call (typically used with TCP sockets) or recvfrom() call (typically used with UDP sockets) are blocking -- so they should provide a nice blocking context to your nothingIsRecvd case and would allow you to get rid of the "while True" loop. You can find examples on Python Library reference: <a href="http://docs.python.org/release/2.5.2/lib/socket-example.html" rel="nofollow">http://docs.python.org/release/2.5.2/lib/socket-example.html</a></p>
</div>
