<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3748063/what-is-the-syntax-to-insert-one-list-into-another-list-in-python">What is the syntax to insert one list into another list in python?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>Let's have, for instance:</p>
<pre><code>nodes = [[1, 2],[3, 4]] 
thelist = [[5, 6], [7, 8]]
</code></pre>
<p>How do I code it so list will be:</p>
<pre><code>[[1, 2],[3, 4],[5, 6],[7, 8]]
</code></pre>
<p>I know how to do it, but I want an elegant python way.</p>
<p>My try:</p>
<pre><code>for node in nodes:
    thelist.insert(0, node)
</code></pre>
<p>I guess there should be a more pythonic way to do that.</p>
<p>EDIT: The order somehow matters (that's why I try to insert at index 0).</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply add them together:</p>
<pre><code>In [11]: nodes + thelist
Out[11]: [[1, 2], [3, 4], [5, 6], [7, 8]]
</code></pre>
<p>You can also use extend (which modifies nodes):</p>
<pre><code>In [12]: nodes.extend(thelist)

In [13]: nodes
Out[13]: [[1, 2], [3, 4], [5, 6], [7, 8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can assign to the slice <code>thelist[:0]</code> to insert elements at the beginning:</p>
<pre><code>nodes = [[1, 2],[3, 4]]
thelist = [[5, 6], [7, 8]]
thelist[:0] = nodes
# thelist is now [[1, 2], [3, 4], [5, 6], [7, 8]]
</code></pre>
<p>See the Python tutorial for <a href="http://docs.python.org/3/tutorial/introduction.html#lists">lots of useful ways to manipulate lists</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, if some sort of order is important, or just the ability to take items one at a time, then you can use <code>heapq.merge</code>:</p>
<pre><code>import heapq

nodes = [[1, 2],[3, 4]]
thelist = [[5, 6], [7, 8]] 
res = list(heapq.merge(nodes, thelist))
# [[1, 2], [3, 4], [5, 6], [7, 8]]

nodes = [[1, 2], [5,6]]
thelist = [[3, 4], [7, 8]]    
res = list(heapq.merge(nodes, thelist))
# [[1, 2], [3, 4], [5, 6], [7, 8]]
</code></pre>
<p>Or, just use:</p>
<pre><code>for heapq.merge(nodes, thelist):
</code></pre>
<p>Note that order is potentially different than <code>itertools.chain</code>.</p>
</div>
<span class="comment-copy">Any Python book or tutorial on the internet will teach you how to concatenate lists. By the way, do not use <code>insert</code> with a <code>list</code> at index <code>0</code>. It causes the entire <code>list</code> to be reallocated. Lists are optimized for appending not prepending.</span>
<span class="comment-copy">Estimated OdraEncoded, i know how to concatenate, and most books teach examples with lists like the post sza mentioned. But in this case, I'll be facing list of lists and list with lists of lists filled with lists haha. And I couldn't find such great answers as the ones you have been posting.  edit: Oh, and I didn't insert at the index 0 because of fun the order kinda mattered, I'm gonna to add it to the OP.</span>
<span class="comment-copy">@sza Not a duplicate, imo, because the proper answer to the linked question is <code>extend</code>, which doesn't apply here. Also, why is this being downvoted? There might be a better way to do this in this case, but that doesn't invalidate the question. As phrased in the title, this question is perfectly valid.</span>
<span class="comment-copy">Do you need to do anything more than iterate over the combined result?  If not, <code>itertools.chain</code> might be what you want.  If you do frequent inserts and don't need to retrieve items by index you might instead want <code>collections.deque</code>.</span>
<span class="comment-copy">Thanks! Although all the answers solve the problem, this (using the '+' operator) seems to be the most pythonic one.</span>
<span class="comment-copy">The + operator returns a new list.</span>
<span class="comment-copy">+1.  This assigns to a slice which is exactly what the OP asks for.  Although the OP asked for <code>thetist</code> to be mutated the more common pattern is to create a new list and reassign to the same name: <code>theList = nodes + thelist</code>.</span>
<span class="comment-copy">+1, that is some interesting syntax that I didn't know about :P</span>
<span class="comment-copy">This solution actually could be find in some books, is pretty ellegant and I guess I missed it because I came from other languages where slicing is not possible. Thanks a lot.</span>
<span class="comment-copy">+1 gotta love heapq</span>
<span class="comment-copy">I'm curious why <code>heapq.merge</code> over <code>itertools.chain</code>.  Is there an advantage to using one over the other?</span>
<span class="comment-copy">@StevenRumbalski See the second example, list is in sorted order.</span>
<span class="comment-copy">Useful indeed! But I suppose it's not as pythonic as I asked.</span>
<span class="comment-copy">@MarceloZÃ¡rate it's perfectly Pythonic if you wanted to merge sequences in order... If you just wish to concat sequences - use any of the other answers you've got :)</span>
