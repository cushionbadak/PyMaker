<div class="post-text" itemprop="text">
<p><a href="http://cscircles.cemc.uwaterloo.ca/13-lists/#pybox8" rel="nofollow">I'm taking this online Python course</a> and trying to solve the following problem called Coding Exercise: It's Natural:</p>
<blockquote>
<p>Write a function naturalNumbers which takes a positive integer n as input, and returns a list [1, 2, ...] consisting of the first n natural numbers.</p>
</blockquote>
<p>Do I even need a for loop to create a list? Here's my code (which doesn't work obviously). Keep in mind, they have not taught list comprehension. I found this concept on stackoverflow.</p>
<pre><code>def naturalNumbers(n):
   list = [n+1 for i in n]
   return list
</code></pre>
<p>Should I take another approach where I create multiple lists of 1,2,3...n and concatenate them all together like [1] + [2] + [3]....</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Do I even need a for loop to create a list?</p>
</blockquote>
<p>No, you can (and in general circumstances <em>should</em>) use the built-in function <a href="http://docs.python.org/2/library/functions.html#range" rel="nofollow"><code>range()</code></a>:</p>
<pre><code>&gt;&gt;&gt; range(1,5)
[1, 2, 3, 4]
</code></pre>
<p>i.e.</p>
<pre><code>def naturalNumbers(n):
    return range(1, n + 1)
</code></pre>
<p><a href="http://docs.python.org/3.3/library/functions.html#func-range" rel="nofollow">Python 3's <code>range()</code></a> is slightly different in that it returns a <code>range</code> object and not a list, so if you're using 3.x wrap it all in <code>list()</code>: <code>list(range(1, n + 1))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a few ways to create a list with N of continuous natural numbers starting from 1. </p>
<p>1 range:</p>
<pre><code>def numbers(n): 
    return range(1, n+1);
</code></pre>
<p>2 List Comprehensions:</p>
<pre><code>def numbers(n):
    return [i for i in range(1, n+1)]
</code></pre>
<p>You may want to look into the method xrange and the concepts of generators, those are fun in python. Good luck with your Learning!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems with your attempt.</p>
<p>First, you've used <code>n+1</code> instead of <code>i+1</code>, so you're going to return something like <code>[5, 5, 5, 5]</code> instead of <code>[1, 2, 3, 4]</code>.</p>
<p>Second, you can't <code>for</code>-loop over a number like <code>n</code>, you need to loop over some kind of sequence, like <code>range(n)</code>. </p>
<p>So:</p>
<pre><code>def naturalNumbers(n):
    return [i+1 for i in range(n)]
</code></pre>
<p>But if you already have the <code>range</code> function, you don't need this at all; you can just <code>return range(1, n+1)</code>, as arshaji showed.</p>
<p>So, how would you build this yourself? You don't have a sequence to loop over, so instead of <code>for</code>, you have to build it yourself with <code>while</code>:</p>
<pre><code>def naturalNumbers(n):
    results = []
    i = 1
    while i &lt;= n:
        results.append(i)
        i += 1
    return results
</code></pre>
<p>Of course in real-life code, you should always use <code>for</code> with a <code>range</code>, instead of doing things manually. In fact, even for this exercise, it might be better to write your own <code>range</code> function first, just to use it for <code>naturalNumbers</code>. (It's already pretty close.)</p>
<hr/>
<p>There is one more option, if you want to get clever.</p>
<p>If you have a list, you can slice it. For example, the first 5 elements of <code>my_list</code> are <code>my_list[:5]</code>. So, if you had an infinitely-long list starting with <code>1</code>, that would be easy. Unfortunately, you can't have an infinitely-long list… but you can have an iterator that simulates one very easily, either by using <a href="http://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>count</code></a> or by writing your own 2-liner equivalent. And, while you can't slice an iterator, you can do the equivalent with <a href="http://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>islice</code></a>. So:</p>
<pre><code>from itertools import count, islice
def naturalNumbers(n):
    return list(islice(count(1), n)))
</code></pre>
</div>
<span class="comment-copy">Your online Python course is strange. Basically asking you to reinvent the wheel (<code>range</code> function)</span>
<span class="comment-copy">In fact, you can hardly do this with a list. Your example will give an error because there isn't anything to loop through in <code>n</code> since <code>n</code> "is not iterable"</span>
<span class="comment-copy">S Gupta - That's exactly what I thought.</span>
<span class="comment-copy">It's sometimes useful to try to figure out how to implement built-in functions, so you understand what they're doing, and see the benefits of using them (a <code>for</code> loop over a <code>range</code> is so much nicer than a <code>while</code> loop with an explicit counter), and so on. I wrote my own <code>itertools.groupby</code> for similar reasons. But once you understand things, just use the standard batteries in your real code and all future learning, of course.</span>
<span class="comment-copy">The class compiler errors out and says that it needs type of list not range. I understand what you mean though. Range would be much easier.</span>
<span class="comment-copy">@StacyM Refer to the last sentence of the answer.</span>
<span class="comment-copy">@StacyM They use <code>range</code> in the examples on the page you linked to.</span>
<span class="comment-copy">Got it thanks! Enjoy the points. I also thought range was just for for loops (for in range (0,n)). I didn't know you could use it as a method. Thanks!</span>
<span class="comment-copy">3.x <code>range</code> doesn't return a generator, it returns a <code>range</code> object, which is very different. It doesn't keep any internal state, you can index it (e.g., <code>range(5)[3]</code>), etc. In fact, it acts a lot more like a list than like a generator. But without wasting the memory of a list.</span>
<span class="comment-copy">The list comprehension doesn't do anything useful here. <code>[i for i in foo]</code> is always the same thing as <code>list(foo)</code>, just slower, less readable, and more verbose. And if you're using Python 2.x (which you presumably are, since you mentioned <code>xrange</code>), you already <i>have</i> a list, so <code>[i for i in foo]</code> and <code>list(foo)</code> are <i>both</i> unnecessary.</span>
<span class="comment-copy">So, the instructor just replied with a comment saying that range was not the intended solution. Instead I was supposed to concatenate. Any ideas on how this would be done? This seems like "reinventing the wheel" and inefficient!</span>
<span class="comment-copy">@StacyM: It's certainly an inefficient way to write real-life code. But for learning purposes, it can be an efficient way to learn something. For example, he may be trying to show you what the verbose and error-prone <code>while</code> version looks like, so tomorrow he can show you the better <code>for</code> version and you'll understand it. (And, in the future, if you ever find yourself writing a <code>while</code> loop that checks and increments <code>i</code>, you'll immediately know there's a better way.)</span>
<span class="comment-copy">@StacyM: At any rate, I think what he wants is my ugly <code>while</code> loop version. I have no idea why he said "concatenate", because usually that means <code>extend</code> or <code>+</code> instead of <code>append</code>, and I doubt he actually wants you to write <code>results.extend([i])</code> instead of <code>results.append(i)</code>; probably he just misspoke.</span>
<span class="comment-copy">@StacyM: If you want to be clever/annoying, you might want to turn in an <code>itertools</code> version first. He'll tell you that wasn't his intended answer either, but it might be worth it to see whether he doesn't get it (in which case you've got the wrong instructor) or whether he just doesn't want you getting ahead of yourself…</span>
<span class="comment-copy">for the <code>return list(islice(count(1), n)))</code> seems you have an extra <code>)</code></span>
