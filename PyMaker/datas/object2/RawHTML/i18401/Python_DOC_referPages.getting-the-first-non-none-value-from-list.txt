<div class="post-text" itemprop="text">
<p>Given a list, is there a way to get the first non-None value? And, if so, what would be the pythonic way to do so?</p>
<p>For example, I have:</p>
<ul>
<li><code>a = objA.addreses.country.code</code> </li>
<li><code>b = objB.country.code</code></li>
<li><code>c = None</code> </li>
<li><code>d = 'CA'</code></li>
</ul>
<p>In this case, if a is None, then I would like to get b. If a and b are both None, the I would like to get d.</p>
<p>Currently I am doing something along the lines of <code>(((a or b) or c) or d)</code>, is there another way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#next"><code>next()</code></a>:</p>
<pre><code>&gt;&gt;&gt; a = [None, None, None, 1, 2, 3, 4, 5]
&gt;&gt;&gt; next(item for item in a if item is not None)
1
</code></pre>
<p>If the list contains only Nones, it will throw <code>StopIteration</code> exception. If you want to have a default value in this case, do this:</p>
<pre><code>&gt;&gt;&gt; a = [None, None, None]
&gt;&gt;&gt; next((item for item in a if item is not None), 'All are Nones')
All are Nones
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>first_true</code> is an <code>itertools</code> recipe found in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer">Python 3 docs</a>:  </p>
<pre><code>def first_true(iterable, default=False, pred=None):
    """Returns the first true value in the iterable.

    If no true value is found, returns *default*

    If *pred* is not None, returns the first item
    for which pred(item) is true.

    """
    # first_true([a,b,c], x) --&gt; a or b or c or x
    # first_true([a,b], x, f) --&gt; a if f(a) else b if f(b) else x
    return next(filter(pred, iterable), default)
</code></pre>
<p>One may choose to implement the latter recipe or import <code>more_itertools</code>, a library that ships with <code>itertools</code> recipes and more:</p>
<pre><code>&gt; pip install more_itertools
</code></pre>
<p>Use:</p>
<pre><code>import more_itertools as mit

a = [None, None, None, 1, 2, 3, 4, 5]
mit.first_true(a, pred=lambda x: x is not None)
# 1

a = [None, None, None]
mit.first_true(a, default="All are None", pred=lambda x: x is not None)
# 'All are None'
</code></pre>
<hr/>
<p><strong>Why use the predicate?</strong></p>
<p>"First non-<code>None</code>" item is not the same as "first <code>True</code>" item, e.g. <code>[None, None, 0]</code> where <code>0</code> is the first non-<code>None</code>, but it is not the first <code>True</code> item.  The predicate allows <code>first_true</code> to be useable, ensuring any first seen, non-None, falsey item in the iterable is still returned (e.g. <code>0</code>, <code>False</code>) instead of the default.</p>
<pre><code>a = [None, None, None, False]
mit.first_true(a, default="All are None", pred=lambda x: x is not None)
# 'False'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adapt from the following (you could one-liner it if you wanted):</p>
<pre><code>values = (a, b, c, d)
not_None = (el for el in values if el is not None)
value = next(not_None, None)
</code></pre>
<p>This takes the first non <code>None</code> value, or returns <code>None</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is the <strong>simplest way</strong> when dealing with a small set of values (will work in a list comprehension as well):</p>
<pre><code>firstVal = a or b or c or d
</code></pre>
<p>Will always return the first non "None' value</p>
</div>
<span class="comment-copy">I'd add a <code>try:</code> <code>except StopIteration:</code> to handle lists containing only None items. But that's a great answer.</span>
<span class="comment-copy">@Germano updated the answer, please check. Btw, Jon's answer should be accepted - he was first to suggest a solution for None-only lists.</span>
<span class="comment-copy">I had a brain burp.... Thanks to those who pointed it out... I think this answer is better written out anyway ;)</span>
<span class="comment-copy">@kevlar1818, if you leave out the "is not None", then it treats 0 and "" the same as it would treat a None (at least in my version of python)</span>
<span class="comment-copy">Haha, five years ago I was very wrong. Sorry all.</span>
<span class="comment-copy">Excellent!  A shame this is part of the standard lib.</span>
<span class="comment-copy">Well the recipe is part of the docs.  You just have to implement it yourself.</span>
<span class="comment-copy">I don't understand. Wont this be printing just <code>True</code> or <code>False</code>?</span>
<span class="comment-copy">@thefourtheye yes - had a brain burp... thanks for pointing it out</span>
