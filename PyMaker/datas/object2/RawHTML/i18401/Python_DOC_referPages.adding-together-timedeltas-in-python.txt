<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/538666/python-format-timedelta-to-string">Python format timedelta to string</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>So I have this list:</p>
<pre><code>[datetime.timedelta(0, 1800), datetime.timedelta(0, 1800), datetime.timedelta(0, 1800), datetime.timedelta(0, 1800)]
</code></pre>
<p>Collectively that is 2:00 hours. I'm trying to add those up to get 2:00 time delta, which then in turn needs to be turned into a string of 2.0 Hours. Respectively 1:30 Hours would be 1.5 Hours as the final countdown.</p>
</div>
<div class="post-text" itemprop="text">
<p>The naive approach would be to take the <code>seconds</code> from each object and <code>sum</code> them </p>
<pre><code>&gt;&gt;&gt; a = [datetime.timedelta(0, 1800)] * 4
&gt;&gt;&gt; print sum([d.seconds for d in a])
7200
&gt;&gt;&gt; print sum([d.seconds for d in a]) / 60.0 / 60.0
2.0
</code></pre>
<p>but this is not as robust as Haidro's solution:</p>
<pre><code>import operator
reduce(operator.add, a)
</code></pre>
<p>This results in a <code>timedelta</code> object with the correct delta that you can use however you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>The obvious way to sum anything number-like and addable in Python is with the <a href="http://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum</code></a> function:</p>
<pre><code>&gt;&gt;&gt; dts = [datetime.timedelta(0, 1800), datetime.timedelta(0, 1800), datetime.timedelta(0, 1800), datetime.timedelta(0, 1800)]
&gt;&gt;&gt; sum(dts, start=datetime.timedelta(0))
datetime.timedelta(0, 9, 933279)
</code></pre>
<p>(For most number-like types, you don't even need the <code>start</code> value, because they know how to add themselves to <code>0</code>. <code>timedelta</code> explicitly does not allow this, to avoid accidentally mixing dimensionless intervals—e.g., you don't want to add <code>timeout_in_millis</code> to a <code>timedelta</code>…)</p>
<hr/>
<p>Whenever you're using <code>reduce</code> with <code>operator.add</code> for number-like values, you're probably doing it wrong.</p>
<p>If you don't provide an <code>initial</code> argument to <code>reduce</code>, it will do the wrong thing with an empty list, raising a <code>TypeError</code> instead of returning the <code>0</code> value. (The sum of no numbers is 0; the sum of no <code>timedelta</code>s is <code>timedelta(0)</code>; etc.)</p>
<p>And if you do provide an <code>initial</code> argument, then it's just a more verbose, more complicated, and slower way to write <code>sum</code>. Compare:</p>
<pre><code>functools.reduce(operator.add, a, foo(0))
sum(a, foo(0))
</code></pre>
</div>
<span class="comment-copy"><code>import operator;reduce(operator.add, YourList)</code></span>
<span class="comment-copy">Summing <code>.seconds</code> is risky. You'll drop hours and microseconds so it's a pretty big assumption not to include them. Either use <code>.total_seconds()</code> (python 2.7) or do the math to include hours/microseconds.</span>
<span class="comment-copy">Hah! Operator is amazing, you're right better off going that route. By chance how can you remember all these different module so effectively?</span>
<span class="comment-copy">@Matthew Heh, well, the operator solution was mine, so I guess I'll answer this. Overtime when answering questions I learn a lot of things, such as built-in functions I've never seen before or awesome modules, such as this one. The <code>operator</code> special is nothing special, it's just a simplified version of something else. For example, <code>operator.add(a, b)</code> is the same as <code>a + b</code>.</span>
<span class="comment-copy">Either version is overkill. You don't have to call <code>sum</code> on the <code>d.total_seconds()</code> values, when you can just call it directly on the values. And you don't have to build <code>sum</code> manually out of <code>reduce</code> when you can just use the builtin.</span>
