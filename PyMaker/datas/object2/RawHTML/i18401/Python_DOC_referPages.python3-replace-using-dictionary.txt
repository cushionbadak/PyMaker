<div class="post-text" itemprop="text">
<p>Could anyone please explain what is wrong here:</p>
<pre><code>def get_complementary_sequence(string):
    dic = {'A':'T', 'C':'G', 'T':'A', 'G':'C'}
    for a, b in dic.items():
        string = string.replace(a, b)
    return string
</code></pre>
<p>I get proper results for 'T' and 'C', but 'A' and 'C' won't replace. Got really stuck. </p>
<p>String looks like 'ACGTACG'.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are first replacing all <code>A</code>s with <code>T</code>s before then replacing all <code>T</code>s with <code>A</code>s again (including those you just replaced <code>A</code>s with!):</p>
<pre><code>&gt;&gt;&gt; string = 'ACGTACG'
&gt;&gt;&gt; string.replace('A', 'T')
'TCGTTCG'
&gt;&gt;&gt; string.replace('A', 'T').replace('T', 'A')
'ACGAACG'
</code></pre>
<p>Use a translation map instead, fed to <a href="http://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate()</code></a>:</p>
<pre><code>transmap = {ord('A'): 'T', ord('C'): 'G', ord('T'): 'A', ord('G'): 'C'}
return string.translate(transmap)
</code></pre>
<p>The <code>str.translate()</code> method requires a dictionary mapping codepoints (integers) to replacement characters (either a single character or a codepoint), or <code>None</code> (to delete the codepoint from the input string). The <code>ord()</code> function gives us those codepoints for the given 'from' letters.</p>
<p>This looks up characters in <code>string</code>, one by one in C code, in the translation map, instead of replacing all <code>A</code>s followed by all <code>T</code>s.</p>
<p><code>str.translate()</code> has the added advantage of being <em>much</em> faster than a series of <code>str.replace()</code> calls.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; string = 'ACGTACG'
&gt;&gt;&gt; transmap = {ord('A'): 'T', ord('C'): 'G', ord('T'): 'A', ord('G'): 'C'}
&gt;&gt;&gt; string.translate(transmap)
'TGCATGC'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Mutable data is your enemy :)</p>
<p>See, you first replace all <code>A</code>s with <code>T</code>s, <em>then</em>, in another iteration, replace all <code>T</code>s with <code>A</code>s again.</p>
<p>What works:</p>
<pre><code># for Creek and Watson's sake, name your variables sensibly
complements = {ord('A'):'T', ord('C'):'G', ord('T'):'A', ord('G'):'C'}
sequence = "AGCTTCAG"
print(sequence.translate(complements))
</code></pre>
<p>It prints <code>TCGAAGTC</code>.</p>
</div>
<span class="comment-copy">You're iterating over each item of the dictionary in order, so they are all being replaced correctly!  The problem is that when you replace T, A has already been replaced by T, so you replace it back.</span>
<span class="comment-copy">now that you are trying to deal with DNA sequence, I suggest you to use <a href="http://biopython.org/wiki/Main_Page" rel="nofollow noreferrer">BioPython</a> instead</span>
<span class="comment-copy"><code>str.translate()</code> is also much faster than the naive <code>''.join(dic[c] for c in s)</code>.</span>
