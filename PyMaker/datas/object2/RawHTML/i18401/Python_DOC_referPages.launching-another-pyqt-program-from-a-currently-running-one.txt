<div class="post-text" itemprop="text">
<p>I have two pyqt programs. Both should be available to run by themselves, but I need to run one of them from the other. The one that will only run manually is called <code>foo</code> and the second one (the one I want to call from <code>foo</code>) is called <code>bar</code>. I tried to follow <a href="https://stackoverflow.com/questions/14410152/pyqt-on-click-open-new-window">this</a> example and I get the new window, but with an error</p>
<blockquote>
<p>AttributeError: 'bar' object has no attribute 'exec_'</p>
</blockquote>
<p>I guess I could create it, but I don't know what to put in it. So how do I make another window pop by clicking a button in the first window?</p>
<p>Bonus points for somebody who can make the original window inactive. </p>
<p>Here is how my function look right now:</p>
<pre><code>barMaker = bar(self)
bar.exec_()
</code></pre>
<p>Unimaginative, I know. </p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want to just call the second gui program using </p>
<pre><code>new_gui = subprocess.Popen("python "+path)
</code></pre>
<p>?</p>
<p>You can then disable your first GUI or do whatever you want with it.  The new GUI is running in a separate process.  </p>
</div>
<div class="post-text" itemprop="text">
<p>@ballsatballsdotballs answer did not work for me, but was very close. Referring to the docs (same for <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Python2</a> and <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Python3</a>) states: </p>
<blockquote>
<p><code>subprocess.Popen(args, ...)</code></p>
<p><code>args</code> should be a sequence of program arguments or else a single string. By default, the program to execute is the first item in <code>args</code> if <code>args</code> is a sequence. If <code>args</code> is a string, the interpretation is platform-dependent and described below.</p>
</blockquote>
<p>I'm not sure if this has changed only since the original answer was posted (&gt;4 yrs old), but for completeness, the following Popen construction worked for me:</p>
<pre><code>new_gui = subprocess.Popen(["python", path])
</code></pre>
<p>One could also substitute "python3" if desired.</p>
</div>
