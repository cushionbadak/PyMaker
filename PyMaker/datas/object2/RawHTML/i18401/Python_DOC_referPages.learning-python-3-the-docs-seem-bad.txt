<div class="post-text" itemprop="text">
<p>How do you figure out what methods are available within a class?</p>
<p>Example :</p>
<p>I am trying to learn about urllib.request. I found urlopen() in the docs :</p>
<p><a href="http://docs.python.org/3.0/library/urllib.request.html" rel="nofollow">http://docs.python.org/3.0/library/urllib.request.html</a></p>
<p>So I have :</p>
<pre><code>response = urllib.request.urlopen(url)
</code></pre>
<p>What does this return? I know it will probably be an object, but what are this objects methods? Eventually I get to the examples (stuck at the bottom of the page far from where the idea was introduced) and discover read(), but I had to look outside the docs to find .decode(), which finally lets you do what the whole purpose of this library is.</p>
<p>Im having this type of problem with much of the docs.python.org pages. Is there a better documentation somewhere else, or am I going about learning this all the wrong way?</p>
</div>
<div class="post-text" itemprop="text">
<p>The real problem here is that you're using a very old version of the documentation. I have no idea how you found it, but it should be pretty clear from the URL <a href="http://docs.python.org/3.0/library/urllib.request.html" rel="nofollow">http://docs.python.org/3.0/library/urllib.request.html</a>, and the header on the top of that page ("Python v3.0.1 documentation"), and so on that you're not looking at the documentation for your version.*</p>
<p>If you were looking at <a href="http://docs.python.org/3.3/library/urllib.request.html" rel="nofollow">the 3.3 documentation</a>, you would have seen this:</p>
<blockquote>
<p>For http and https urls, this function returns a <a href="http://docs.python.org/3.3/library/http.client.html#http.client.HTTPResponse" rel="nofollow">http.client.HTTPResponse</a> object which has the following <a href="http://docs.python.org/3.3/library/http.client.html#httpresponse-objects" rel="nofollow">HTTPResponse Objects</a> methods.</p>
</blockquote>
<p>The first link takes you to the reference for the exact class, the second to the reference for the abstract type. Which gives you exactly what you were looking for—the <code>read</code> method, and everything else.</p>
<hr/>
<p>In older versions of Python, the term "file-like object" was thrown around loosely. This was always a vague term (sometimes it means "an iterable of lines", "has a <code>read()</code> and/or <code>write()</code> as appropriate", "has a <code>fileno()</code>", …), and became much more so in Python 3 (because you have to distinguish a binary file from a text file). So, over the years, they've phased this out in favor of more specific documentation. But if you're looking at the very earliest Python 3 documentation, you're not getting the benefit.</p>
<hr/>
<p>* Note that if you visit any recent-ish version of the docs, like the 3.3 linked above, there's a pulldown menu in the header that lets you switch to a different version if you've found the wrong one. And, the default will always be 2.7 or the latest stable 3.x, and those are also the most common search results, and the easiest things to link to, so you will usually be on one of those unless you're really trying to make things hard for yourself. If you do find yourself on ancient docs like 3.0 or 2.4 or something, you can often just edit the URL to <code>3.3</code> or <code>2.7</code>, or just <code>3</code> or <code>2</code>; if not, a quick search should work.</p>
</div>
<div class="post-text" itemprop="text">
<p>The key phrase in the documentation of <code>urlopen</code> is:</p>
<blockquote>
<p>This function returns a file-like object with two additional methods from the urllib.response module</p>
</blockquote>
<p>The fact that this is a <em>file-like object</em> indicates that all the normal file operation functions (<code>read</code>, <code>close</code>) apply to the returned object also.</p>
</div>
<div class="post-text" itemprop="text">
<p>The document you linked to says this:</p>
<blockquote>
<p>This function returns a <strong>file-like object</strong> with two additional methods
  from the urllib.response module</p>
<pre><code>geturl() — return the URL of the resource retrieved, commonly used to determine if a redirect was followed
info() — return the meta-information of the page, such as headers, in the form of an http.client.HTTPMessage instance (see Quick Reference to HTTP Headers)
</code></pre>
</blockquote>
<p>Emphasis mine. A "file-like object" is <a href="http://docs.python.org/3/glossary.html#term-file-object" rel="nofollow">defined as follows</a>:</p>
<blockquote>
<p>file object</p>
<p>An object exposing a file-oriented API (with methods such as read() or write()) to an underlying resource. Depending on the way it was created, a file object can mediate access to a real on-disk file or to another type of storage or communication device (for example standard input/output, in-memory buffers, sockets, pipes, etc.). File objects are also called file-like objects or streams.</p>
</blockquote>
<hr/>
<p>As @abarnert points out, you're probably just better off using the <a href="http://docs.python.org/3/library/urllib.request.html" rel="nofollow">new docs</a>, which explicitly link to the <a href="http://docs.python.org/3/library/http.client.html#httpresponse-objects" rel="nofollow">methods of the returned object</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you aren't using <a href="http://ipython.org/" rel="nofollow">Ipython</a> already you should be.  Then you can just type urllib. and press tab to see all the available options and do the same for whatever it returns.  If you type a question mark after the function it will bring up the documentation, two question marks often brings up the source.</p>
<p>For what its worth though I have always found the online documentation to be very helpful.  It does say that urllib.request.urlopen is going to return a file like object early in the explanation</p>
</div>
<span class="comment-copy"><code>help(urllib.request.urlopen(url))</code></span>
<span class="comment-copy">The best way to learn Python (or as a matter of fact any language) is to play around with stuff in the REPL. <code>dir</code>, <code>type</code> and <code>help</code> are your friends.</span>
<span class="comment-copy">Help on function urlopen in module urllib.request:  urlopen(url, data=None, timeout=&lt;object object&gt;, *, cafile=None, capath=None)  (Thats not exactly helpful)</span>
<span class="comment-copy">Since <code>decode</code> is a method on the bytes-string that's returned by <code>read</code>, not the request object itself, why would you expect it to be documented here? And in what sense does <code>decode</code> "finally let you do what the whole purpose of this library is"? You've already requested a URL and downloaded the response; which is the whole purpose of the library. You could save it to a file, send it to another server, etc. without ever decoding, if you wanted.</span>
<span class="comment-copy">Also, why are you using the 3.0 documentation instead of the correct version? (Or, if you're actually using 3.0… why are you using 3.0 instead of 3.3?)</span>
<span class="comment-copy">They should add a link to 'file like object'.</span>
<span class="comment-copy">@jason: the purpose of the glossary is so that you can look those terms up if you're unfamiliar. A link would be nice, but not strictly necessary. (If you think it's a good idea, you <a href="http://bugs.python.org" rel="nofollow noreferrer">can file a documentation bug</a>).</span>
<span class="comment-copy">But there's not much point in filing a documentation bug against 3.0 docs that have been <a href="http://docs.python.org/3/library/urllib.request.html" rel="nofollow noreferrer">completely rewritten for recent versions</a> long ago. The current version says that it returns an <code>HTTPResponse</code>, and provides a link to the documentation for that type.</span>
<span class="comment-copy">Yeah I just learned theres better docs which seem to be the answer to my overall problem. Thank you!</span>
<span class="comment-copy">I saw that file like object line. It should say something like 'a file like object that you can call read() on and then later decode the result'.</span>
<span class="comment-copy">sounds like a slippery slope to me :)  Why not just include all the available documentation on file like objects right there?</span>
<span class="comment-copy">I admit though it would be helpful if file like object were a hyperlink or something so you could easily look it up</span>
<span class="comment-copy">yeah I didnt realize at first that 'file like object' meant so much. If it would have been linked it would have made me wonder why that phrase was so important.</span>
