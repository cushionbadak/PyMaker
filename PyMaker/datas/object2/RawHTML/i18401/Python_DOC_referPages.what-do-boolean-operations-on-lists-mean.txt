<div class="post-text" itemprop="text">
<p>I was going through the source of <code>pyftpdlib</code> and I found this:  </p>
<p><code>if self.rejected_users and self.allowed_users:
     raise AuthorizerError("rejected_users and allowed_users options are mutually exclusive")
</code></p>
<p><code>rejected_users</code> and <code>allowed_users</code> are lists.
What's confusing me is how the <code>and</code> operator operates on two lists. I'd appreciate it if someone helped me out.  </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>All</strong> objects in Python have a boolean 'value'; they are either true or false in a boolean context.</p>
<p>Empty lists are false. This applies to all sequences and containers, including tuples, sets, dictionaries and strings.</p>
<p>Numeric 0 is false too, so 0, 0.0, 0j are all false as well, as are <code>None</code> and of course <code>False</code> itself:</p>
<pre><code>&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([1, 2])
True
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool('')
False
</code></pre>
<p>Everything else is considered true in a boolean context; so a list that is <em>not</em> empty is true, and two non-empty lists together with <code>and</code> is considered true as well.</p>
<p>You can make custom types  look like empty containers by implementing <a href="http://docs.python.org/2/reference/datamodel.html#object.__len__" rel="nofollow noreferrer"><code>__len__()</code></a> and returning <code>0</code>, or look like a number by implementing <a href="http://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer"><code>__nonzero__()</code></a><sup>*</sup> and returning <code>False</code> when the instance is to be the boolean equivalent of numeric zero.</p>
<p>Just remember that <code>and</code> and <code>or</code> shortcircuit; if the first expression locks in the result then that value is returned and the second expression is ignored altogether. For <code>and</code>, that means that in the expression <code>x and y</code>, <code>y</code> is ignored if <code>x</code> is a false value (like an empty list), because the whole expression can never be true in that case. For <code>x or y</code>, <code>y</code> is ignored if <code>x</code> is a true value.</p>
<p>These rules are all covered by the <a href="http://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Boolean operations reference documentation</a>.</p>
<p><sup>*<sub>In Python 3, use <a href="http://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a> instead</sub></sup>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Empty list evaluates to <code>False</code> and non-empty list evaluates to <code>True</code>.</p>
<p><code>if list1 and list2:</code></p>
<p>is equivalent to:</p>
<p><code>if list1 is not empty and list2 is not empty</code>:</p>
<hr/>
<h2><a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">List of falsy values in python</a>:</h2>
<ul>
<li><p>None</p></li>
<li><p>False</p></li>
<li><p>zero of any numeric type, for example, <code>0</code>, <code>0L</code>, <code>0.0</code>, <code>0j</code>.</p></li>
<li><p>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</p></li>
<li><p>any empty mapping, for example, <code>{}</code>.</p></li>
<li><p>instances of user-defined classes, if the class defines a
<code>__nonzero__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False. </p></li>
</ul>
<p>All other values are considered true â€” so objects of many types are always true.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>list_a</code> is empty, then <code>list_a and list_b</code> will evaluate to <code>list_a</code>, otherwise it will evaluate to <code>list_b</code>. For example:</p>
<pre><code>&gt;&gt;&gt; [1] and [2]
[2]
&gt;&gt;&gt; [] and [2]
[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to @Ashwini answer, you can use <code>bool</code> inbuilt function to check what a given object will evaluate to.</p>
<pre><code>&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([1,2,3])
True
&gt;&gt;&gt; bool('')
False
&gt;&gt;&gt; bool('hello')
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks to me as though it's a logical boolean statement. In Python, when building an If statement, boolean statements have an interesting logical shorthand:</p>
<pre><code>bool = True;

If bool:
    return "Blah!"
</code></pre>
<p>Is the same as:</p>
<pre><code>bool = True;

If bool==True:
    return "Blah!"
</code></pre>
<p>The statement <code>If *[boolean]*</code> is a cooler way of saying <code>If *[boolean]* is True</code>. In that same way, the statement <code>If *![boolean]*</code> is a cooler way of saying <code>If *[boolean]* is False</code>, because <code>!</code> is the logical <code>NOT</code> operator.<br/><br/>It takes a little time to acclimate to this logic but once you do, it makes your code a lot nicer looking.</p>
<p>So why do the lists do this like a boolean value should?</p>
<p>Since Python doesn't have explicit type declaration, every data type has a boolean representation. For lists like <code>rejected_users</code> and <code>allowed_users</code>, if the lists are empty <code>{}</code>'s, it returns <code>False</code> and if NOT empty, it returns <code>True</code>. Thus, the english translation of</p>
<pre><code>if self.rejected_users and self.allowed_users:
</code></pre>
<p>should read:</p>
<pre><code>if self.rejected_users is NOT empty AND if self.allowed_users is NOT empty:
</code></pre>
<p>I hope this helps.</p>
</div>
<span class="comment-copy">I might want to add a link to some Python docs: <a href="http://docs.python.org/2.4/lib/truth.html" rel="nofollow noreferrer">docs.python.org/2.4/lib/truth.html</a></span>
<span class="comment-copy">@xtofl: I prefer to link to more current documentation; I've added a reference link.</span>
<span class="comment-copy">Though perhaps annoyingly, <code>bool([0]) == True</code></span>
<span class="comment-copy">@NickT: it's not an empty list, noone ever said anything about the contents. Empty -&gt; false, not empty -&gt; true. Done.</span>
