<div class="post-text" itemprop="text">
<p>I have looked at other questions on SO like this one but they are too techy for me to understand (only been learning a few days).
I am making a phonebook and i am trying to save a dictionary like so,</p>
<pre><code>numbers = {}
def save(a):
   x = open("phonebook.txt", "w")
   for l in a:
       x.write(l, a[l])
   x.close()
</code></pre>
<p>But i get error write() only takes 1 argument and obv im passing 2, so my question is how can i do this in a beginner freindly way and could you describe it in a non techy way.
Thanks a lot.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's better to use <a href="http://docs.python.org/3/library/json.html" rel="nofollow">json</a> module for dumping/loading dictionary to/from a file:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; numbers = {'1': 2, '3': 4, '5': 6}
&gt;&gt;&gt; with open('numbers.txt', 'w') as f:
...     json.dump(numbers, f)
&gt;&gt;&gt; with open('numbers.txt', 'r') as f:
...     print json.load(f)
... 
{u'1': 2, u'3': 4, u'5': 6}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While JSON is a good choice and is cross-language and supported by browsers, Python has its own serialization format called pickle that is much more flexible.</p>
<pre><code>import pickle

data = {'Spam': 10, 'Eggs': 5, 'Bacon': 11}

with open('/tmp/data.pickle', 'w') as pfile:
    pickle.dump(data, pfile)

with open('/tmp/data.pickle', 'r') as pfile:
    read_data = pickle.load(pfile)

print(read_data)
</code></pre>
<p>Pickle is Python-specific, doesn't work with other languages, and be careful to never load pickle data from untrusted sources (such as over the web) as it's not considered "safe".</p>
<p>Pickle works for other data types too, including instances of your own classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use the <code>json</code> module and <code>JSONEncode</code> your dict, then you can use the module to write the new object to file.</p>
<p>When you read the file, you need to <code>JSONDecode</code> to convert it back into a python dict.</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; d = {1:1, 2:2, 3:3}
&gt;&gt;&gt; d
{1: 1, 2: 2, 3: 3}
&gt;&gt;&gt; json.JSONEncoder().encode(d)
'{"1": 1, "2": 2, "3": 3}'
&gt;&gt;&gt; with open('phonebook.txt', 'w') as f:
    f.write(json.JSONEncoder().encode(d))

&gt;&gt;&gt; with open('phonebook.txt', 'r') as f:
    print f.readlines()

['{"1": 1, "2": 2, "3": 3}']
</code></pre>
</div>
<span class="comment-copy">What output format do you expect?</span>
<span class="comment-copy">@SrinivasReddyThatiparthy you should remove that comment; horrible advice.</span>
<span class="comment-copy">beginner friendly :) but fair enough</span>
<span class="comment-copy">Thanks for answering but could you explain 'with' and 'as f' . And i take it .dump is .write and .load is .read</span>
<span class="comment-copy">@PaulRice sure, <a href="http://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">with</a> is a context manager, shortcut that replaces <code>try: except: finally:</code> boilerplate code. <code>dump</code> is write, <code>load</code> is read, right.</span>
<span class="comment-copy">Ok great help. Thanks .. One last thing how do i close it after or is it not needed</span>
<span class="comment-copy">@PaulRice that's the point, it closes it automatically. Python is beautiful, isn't it? :)</span>
<span class="comment-copy">It's generally simpler to just use the <code>json.dump()</code> and <code>json.load()</code> functions. Like <code>json.dump(d, f)</code> to write, and <code>json.load(f)</code> to read.</span>
