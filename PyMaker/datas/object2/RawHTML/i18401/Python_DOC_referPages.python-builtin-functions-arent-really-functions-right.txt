<div class="post-text" itemprop="text">
<p>Was just thinking about Python's <code>dict</code> <em>"function"</em> and starting to realize that <code>dict</code> isn't really a function at all. For example, if we do <code>dir(dict)</code>, we get all sorts of methods that aren't include in the usual namespace of an user defined function. Extending that thought, its similar to <code>dir(list)</code> and <code>dir(len)</code>. They aren't function, but really <code>type</code>s. But then I'm confused about the documentation page, <a href="http://docs.python.org/2/library/functions.html" rel="noreferrer">http://docs.python.org/2/library/functions.html</a>, which clearly says functions. (I guess it should really just says builtin callables)</p>
<p>So what gives? (Starting to seem that making the distinction of classes and functions is trivial)</p>
</div>
<div class="post-text" itemprop="text">
<p>One way that <code>dict</code> is special, compared to, say, <code>sum</code>, is that though both are <code>callable</code>, and both are implemented in C (in cpython, anyway), <code>dict</code> is a <code>type</code>; that is, <code>isinstance(dict, type) == True</code>.  This means that you can use <code>dict</code> as the base class for other types, you can write:</p>
<pre><code>class MyDictSubclass(dict):
    pass
</code></pre>
<p>but not</p>
<pre><code>class MySumSubclass(sum):
    pass
</code></pre>
<p>This can be useful to make classes that behave almost like a builtin object, but with some enhancements.  For instance, you can define a subclass of <code>tuple</code> that implements <code>+</code> as vector addition instead of concatenation:</p>
<pre><code>class Vector(tuple):
    def __add__(self, other):
        return Vector(x + y for x, y in zip(self, other))
</code></pre>
<p>Which brings up another interesting point.  <code>type</code> is also implemented in C.  It's also callable.  Like <code>dict</code> (and unlike <code>sum</code>) it's an instance of <code>type</code>; <code>isinstance(type, type) == True</code>.  Because of this weird, seemingly impossible cycle, <code>type</code> can be used to make new classes of classes, (called metaclasses).  You can write:</p>
<pre><code>class MyTypeSubclass(type):
    pass

class MyClass(object):
    __metaclass__ = MyTypeSubclass
</code></pre>
<p>or, in Python 3:</p>
<pre><code>class MyClass(metaclass=MyTypeSubclass):
    pass
</code></pre>
<p>Which give the interesting result that <code>isinstance(MyClass, MyTypeSubclass) == True</code>.  How this is useful is a bit beyond the scope of this answer, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a callable, as are classes in general. Calling <code>dict()</code> is effectively to call the dict constructor. It is like when you define your own class (<code>C</code>, say) and you call <code>C()</code> to instantiate it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict()</code> is a constructor for a <code>dict</code> instance.  When you do <code>dir(dict)</code> you're looking at the attributes of class <code>dict</code>.  When you write <code>a = dict()</code> you're setting <code>a</code> to a new instance of type <code>dict</code>.</p>
<p>I'm assuming here that <code>dict()</code> is what you're referring to as the "dict function".  Or are you calling an indexed instance of <code>dict</code>, e.g. <code>a['my_key']</code> a function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that calling <code>dir</code> on the constructor <code>dict.__init__</code></p>
<pre><code>dir(dict.__init__)
</code></pre>
<p>gives you what you would expect, including the same stuff as you'd get for any other function.  Since a call to the <code>dict()</code> constructor results in a call to <code>dict.__init__(instance)</code>, that explains where those function attributes went.  (Of course there's a little extra behind-the-scenes work in any constructor, but that's the same for dicts as for any object.)</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/a/4205163/489590">If it looks like a function and acts like a function, then it's a function</a>, right?</span>
<span class="comment-copy">Note that <code>dir()</code> was never intended to give a <i>complete</i> overview of available functions. <code>dir(type)</code> gives you a lot of those same functions.</span>
<span class="comment-copy">I'd agree that the aspects of these point more into the direction of classes than of functions.  After all you can do things like <code>isinstance(x, dict)</code> which shouldn't work if <code>dict</code> was a pure function.</span>
<span class="comment-copy">I personally think that they just called it a function.  Kinda like how I've seen some people call this an array or list: <code>('a', 'b')</code>, when its technical term is "tuple".</span>
<span class="comment-copy">Note that the sentence has become <code>The Python interpreter has a number of functions and types built into it that are always available.</code> in the documentation of the versions 3.x</span>
<span class="comment-copy">I understand its a callable, but then why are we calling them <code>functions</code> on the documentation page? It would seem that having the names <code>class</code> and <code>function</code> is quite trivial.</span>
<span class="comment-copy">@PhillipCloud I understand the difference, but surely you can admit that its a bit misleading to have the documentation page say builtin functions when user defined functions have <code>func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name'</code> and none of the builtins do.</span>
<span class="comment-copy">@EdgarAroutiounian The constructor is really a method on the <code>type</code> object. This method is of course a special kind of function. It's definitely <i>not</i> trivial to make the distinction between a function (not method) created by a <code>def</code> statement and a class and its constructor. The fact that you think this distinction is trivial implies that you might not have written many functions and/or classes. I also don't think calling <code>dict</code> a function is confusing if you understand the difference between classes and functions and how classes are related to callables.</span>
<span class="comment-copy">@PhillipCloud Pedantic or not, its an issue of being clear. Reread my post, I never said that that the distinction of functions and classes is indeed trivial, rather that it, at least superficially, could <code>seem</code> to be the case and that perhaps the documentation for the builtin functions page is better called the builtin callables page. In any case, I'm not sure what benefit Stack gets from pointless speculation about how many classes and or function an OP has written, maybe you'd like to speculate how many lines of code OPs have written as well?</span>
<span class="comment-copy">@Edgar I am completly on the same line as you, I don't like confusion and lack of precision in use of the terms</span>
<span class="comment-copy">yes, referring to the <code>dict()</code> function.</span>
<span class="comment-copy">I think it's better to call it the <code>dict()</code> constructor, since it's more than just an initialization function.  It also allocates a new instance.</span>
<span class="comment-copy">@Codie CodeMonkey I wonder if your wish of calling <code>dict()</code> a constructor isn't influenced by other languages you certainly know. I don't agree with this wish. Seeing in the doc's index, entry <code>constructor</code> leads to <code>object.__init__(self[, ...])</code>. Things are enough complex without adding complexity by giving self definition for words that have already one.</span>
<span class="comment-copy">@eyquem, could well be!  So the proper name for <code>dict()</code> is the <code>dict</code> function?</span>
<span class="comment-copy">@eyquem, Your point that Python doesn't refer to <code>dict()</code> as a constructor is a good one.  I simply asked what the appropriate name for such a construct is, as the OP used the phrase 'dict function'.  I did a brief search and found that docs.python.org uses "instantiation operation" (<a href="http://docs.python.org/3/tutorial/classes.html#class-objects" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html#class-objects</a>).  I think that's what I was looking for.</span>
