<div class="post-text" itemprop="text">
<p>I'm working with a string of bytes (which can be anywhere between 10kb and 3MB) and I need to filter out approximately 16 bytes (replacing them with other bytes)</p>
<p>At the moment I have a function a bit like this..</p>
<pre><code>BYTE_REPLACE = {
  52: 7, # first number is the byte I want to replace
  53: 12, # while the second number is the byte I want to replace it WITH
}
def filter(st):
  for b in BYTE_REPLACE:
    st = st.replace(chr(b),chr(BYTE_REPLACE[b]))
  return st
</code></pre>
<p>(Byte list paraphrased for the sake of this question)</p>
<p>Using map resulted in an execution time of ~.33s, while this results in a 10x faster time of ~.03s (Both performed on a HUGE string, larger than 1.5MB compressed).</p>
<p>While any performance gains would be considerably negligible, is there a better way of doing this?</p>
<p>(I am aware that it would be much more optimal to store the filtered string. This isn't an option, though. I'm fooling with a Minecraft Classic server's level format and have to filter out bytes that certain clients don't support)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/stdtypes#str.translate" rel="noreferrer"><code>str.translate</code></a>:</p>
<h2>Python 3.x</h2>
<pre><code>def subs(st):
    return st.translate(BYTE_REPLACE)
</code></pre>
<p>Example usage:</p>
<pre><code>&gt;&gt;&gt; subs('4567')
'\x07\x0c67'
</code></pre>
<h2>Python 2.x</h2>
<p><a href="http://docs.python.org/2/library/stdtypes#str.translate" rel="noreferrer"><code>str.translate</code> (Python 2)</a></p>
<pre><code>import string
k, v = zip(*BYTE_REPLACE.iteritems())
k, v = ''.join(map(chr, k)), ''.join(map(chr, v))
tbl = string.maketrans(k, v)
def subs(st):
    return st.translate(tbl)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look up the <code>translate()</code> method on strings.  That allows you to do any number of 1-byte transformations in a single pass over the string.  Use the <code>string.maketrans()</code> function to build the translation table.  If you usually have 16 pairs, this should run about 16 times faster than doing 1-byte replacements 16 times.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your current design, <code>String.replace()</code> is being called on the string <code>n</code> times, for each pair. While its most likely an efficient algorithm, on a 3MB string it might slow down.</p>
<p>If the string is already contained in memory by the time this function is called, I'd wager that the most efficient way would be:</p>
<pre><code>BYTE_REPLACE = {
  52: 7, # first number is the byte I want to replace
  53: 12, # while the second number is the byte I want to replace it WITH
}
def filter(st):
  st = list(st) # Convert string to list to edit in place :/
  for i,s in enumerate(st): #iterate through list
    if ord(s) in BYTE_REPLACE.keys():
        s[i]=chr(BYTE_REPLACE[ord(b)])
  return "".join(st) #return string
</code></pre>
<p>There is a large operation to create a new list at the start, and another to convert back to a string, but since python strings are immutable in your design a new string is made for each replacement.</p>
<p>This is all based on conjecture, and could be wrong. You'd want to test it with your actual data.</p>
</div>
<span class="comment-copy">How are you reading in the string? Is it from the file system, from a URL, is it already all in memory? That will probably have a big influence on the most optimal method.</span>
<span class="comment-copy">It's all available in memory (and passed straight to the function in every case)  There is a few cases where a single byte will be passed to this function - this is negligible enough that I'm not bothered by it.</span>
<span class="comment-copy">How many pairs are in <code>BYTE_REPLACE</code>? Just 2?</span>
<span class="comment-copy">16 usually. With the full list, and a loadtest level that is fairly large (512*512*256 bytes uncompressed), it takes .03s to do the full replacement (with str.replace)</span>
<span class="comment-copy"><a href="http://docs.python.org/2/library/string.html#string.maketrans" rel="nofollow noreferrer"><code>string.maketrans</code></a> and <a href="http://docs.python.org/2/library/string.html#string.translate" rel="nofollow noreferrer"><code>string.translate</code></a> may help here.</span>
<span class="comment-copy">Using str.translate was approximately twice as fast as the previous way I was doing it.</span>
