<div class="post-text" itemprop="text">
<p>I am trying to create a text file in csv format out of a PyQt4 <code>QTableWidget</code>. I want to write the text with a UTF-8 encoding because it contains special characters. I use following code:</p>
<pre><code>import codecs
...
myfile = codecs.open(filename, 'w','utf-8')
...
f = result.table.item(i,c).text()
myfile.write(f+";")
</code></pre>
<p>It works until the cell contains a special character. I tried also with</p>
<pre><code>myfile = open(filename, 'w')
...
f = unicode(result.table.item(i,c).text(), "utf-8")
</code></pre>
<p>But it also stops when a special character appears. I have no idea what I am doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>From your shell run:</p>
<pre><code>pip2 install unicodecsv
</code></pre>
<p>And (unlike the original question) presuming you're using Python's built in <code>csv</code> module, turn <br/>
<code>import csv</code> into <br/>
<code>import unicodecsv as csv</code> in your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's very simple for Python 3.x (<a href="https://docs.python.org/3/library/csv.html" rel="noreferrer">docs</a>).</p>
<pre><code>import csv

with open('output_file_name', 'w', newline='', encoding='utf-8') as csv_file:
    writer = csv.writer(csv_file, delimiter=';')
    writer.writerow('my_utf8_string')
</code></pre>
<p>For Python 2.x, look <a href="https://docs.python.org/2/library/csv.html" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this package, it just works: <a href="https://github.com/jdunck/python-unicodecsv">https://github.com/jdunck/python-unicodecsv</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>The examples in the Python documentation show how to write Unicode CSV files: <a href="http://docs.python.org/2/library/csv.html#examples" rel="nofollow">http://docs.python.org/2/library/csv.html#examples</a></p>
<p>(can't copy the code here because it's protected by copyright)</p>
</div>
<div class="post-text" itemprop="text">
<p>For me the <code>UnicodeWriter</code> class from Python 2 CSV module documentation didn't really work as it breaks the <code>csv.writer.write_row()</code> interface.</p>
<p>For example:
</p>
<pre><code>csv_writer = csv.writer(csv_file)
row = ['The meaning', 42]
csv_writer.writerow(row)
</code></pre>
<p>works, while:
</p>
<pre><code>csv_writer = UnicodeWriter(csv_file)
row = ['The meaning', 42]
csv_writer.writerow(row)
</code></pre>
<p>will throw <code>AttributeError: 'int' object has no attribute 'encode'</code>.</p>
<p>As <code>UnicodeWriter</code> obviously expects all column values to be strings, we can convert the values ourselves and just use the default CSV module:</p>
<pre class="lang-python prettyprint-override"><code>def to_utf8(lst):
    return [unicode(elem).encode('utf-8') for elem in lst]

...
csv_writer.writerow(to_utf8(row))
</code></pre>
<p>Or we can even monkey-patch csv_writer to add a <code>write_utf8_row</code> function - the exercise is left to the reader.</p>
</div>
<div class="post-text" itemprop="text">
<p>For <strong>python2</strong> you can use this code before <code>csv_writer.writerows(rows)</code>
<br/> <em>This code will NOT convert integers to utf-8 strings</em></p>
<pre>
def encode_rows_to_utf8(rows):
    encoded_rows = []
    for row in rows:
        encoded_row = []
        for value in row:
            if isinstance(value, basestring):
                value = unicode(value).encode("utf-8")
            encoded_row.append(value)
        encoded_rows.append(encoded_row)
    return encoded_rows
</pre>
</div>
<div class="post-text" itemprop="text">
<p>A very simple hack is to use the json import instead of csv.  For example instead of csv.writer just do the following:</p>
<pre><code>    fd = codecs.open(tempfilename, 'wb', 'utf-8')  
    for c in whatever :
        fd.write( json.dumps(c) [1:-1] )   # json dumps writes ["a",..]
        fd.write('\n')
    fd.close()
</code></pre>
<p>Basically, given the list of fields in correct order, the json formatted string is identical to a csv line except for [ and ] at the start and end respectively. And json seems to be robust to utf-8 in python 2.*</p>
</div>
<span class="comment-copy">"it salso tops"? What does that mean? What error do you get? What is your input?</span>
<span class="comment-copy">The input is a pyqt4 QTableWidgetItem. The problem is that i don't get any error because script is running as a plugin.</span>
<span class="comment-copy">Then try to reproduce the problem outside of QT.</span>
<span class="comment-copy">Found the solution. I had to write <code>myfile.write(u"%s"&amp;f+";")</code></span>
<span class="comment-copy">See also: <a href="https://stackoverflow.com/a/41585079/562769">How do I read and write CSV files with Python?</a></span>
<span class="comment-copy">It didn't work just by replacing the import, I also had to add the encoding when creating the writer: <code>writer = csv.writer(out, dialect='excel', encoding='utf-8')</code>, and create the file handler with <code>open(...</code>, <b>not</b> <code>codecs.open(...</code>.</span>
<span class="comment-copy">I tried all suggestions on StackOverflow and only this one works for me.</span>
<span class="comment-copy">It works like a charm for me. Thank you Kasper!</span>
<span class="comment-copy">Great! Thanks. This works.</span>
<span class="comment-copy">what if the content to <code>writerow</code> is not a utf-8? will it work?</span>
<span class="comment-copy">Thanks for the link. It was helpful. For my knowledge, even if you have posted the link you can't copy paste the code here? (+1 for ownering the copyright)</span>
<span class="comment-copy">@Mutant: Code isn't like scientific papers. Code is protected by copyright. While I'm 99.999% sure that the Python owners wouldn't sue SO for copying their code, I didn't feel like reading their <a href="https://docs.python.org/2/license.html#history-and-license" rel="nofollow noreferrer">lengthy license</a> to find out whether it's allowed or not. Also, it's good to remind people once in a while that "I can see it on my monitor" != "I can do whatever I want with it" :-)</span>
<span class="comment-copy">Thanks for the reminder. Unfortunately the world we live in became so (unreasonably) fast and careless where information is flowing faster than one can imagine, it does require reminder once and while on the restriction that matters. Thanks for that :)</span>
<span class="comment-copy">The docs link is semi-useful (examples are better), but the "copyright" argument here is overblown and asinine. Python is explicitly open source (<a href="https://docs.python.org/2/license.html" rel="nofollow noreferrer">v2</a> <a href="https://docs.python.org/3/license.html" rel="nofollow noreferrer">v3</a>). The license is clear: "royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute ... [etc., etc.]" Even the simple phrase at the top of the page, "GPL-compatible" should give you comfort. Share open source stuff. Even modify it if you want to. It's open source for a reason.</span>
<span class="comment-copy">@alttag Copying or using GPLd code in a project means that all the other code in the same project is now under GPL as well. Since I'm not a copyright lawyer, I don't know what that means with regards to code published on a web site.</span>
