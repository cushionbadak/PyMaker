<div class="post-text" itemprop="text">
<p>I wrote my own vector class:</p>
<pre><code>#! /usr/bin/env python3

class V:
    """Defines a 2D vector"""
    def __init__(self,x,y):
        self.x = x
        self.y = y
    def __add__(self,other):
        newx = self.x + other.x
        newy = self.y + other.y
        return V(newx,newy)
    def __sub__(self,other):
        newx = self.x - other.x
        newy = self.y - other.y
        return V(newx,newy)
    def __str__(self):
        return "V({x},{y})".format(x=self.x,y=self.y)
</code></pre>
<p>I want to define that V(0,0) is an empty vector, such that this would work: (The first case should return "Vector is empty")</p>
<pre><code>v = V(0,0)
u = V(1,2)

if u:
    print (u)
else:
    print("Vector is empty")

if v:
    print(v)
else:
    print("Vector is empty")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define <a href="http://docs.python.org/dev/reference/datamodel.html#object.__bool__" rel="nofollow"><strong><code>__bool__</code></strong></a>, like this:</p>
<pre><code>class V:
    """Defines a 2D vector"""
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __bool__(self):
        return self.x != 0 or self.y != 0

    # Python 2 compatibility
    __nonzero__ = __bool__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can implement the special method <a href="http://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a>:</p>
<pre><code>def __bool__ (self):
    return self.x != 0 or self.y != 0
</code></pre>
<p>Note that in Python 2, the special method is named <a href="http://docs.python.org/2.7/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer"><code>__nonzero__</code></a>.</p>
<p><s>Alternatively, because you have a vector, it might make even more sense to implement <a href="http://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow noreferrer"><code>__len__</code></a> and provide the actual vector length instead. If <code>__bool__</code> is not defined, Python will automatically try to use the <code>__len__</code> method to get the length and evaluate if it’s not zero.</s></p>
</div>
<div class="post-text" itemprop="text">
<p>If you're just concerned about the output. Just extend the <strong><code>__str__</code></strong> method.</p>
<pre><code>def __str__( self ):
    if self.x and self.y :
        return "V({x},{y})".format( x = self.x, y = self.y )
    else:
        return "Vector is empty"



v = V( 0, 0 )
u = V( 1, 2 )
print v
print u
</code></pre>
<p>Output will be:</p>
<p>Vector is empty</p>
<p>V(1,2)</p>
</div>
<span class="comment-copy">Note: this doesn't do anything in Python 2, which the OP's <code>print</code> syntax suggests they're using. The correct method is <code>__nonzero__</code></span>
<span class="comment-copy">@Wooble Thanks, added <code>__nonzero__</code> to the answer.</span>
<span class="comment-copy">When I try to evaluate the length of the vector I get: TypeError: 'float' object cannot be interpreted as an integer</span>
<span class="comment-copy">That's because <code>__len__</code> has to return an integer. The real vector length isn't always an integer, so i'd rather just implement <code>__bool__</code>.</span>
<span class="comment-copy">@MarkusUnterwaditzer Good point about the integer return value! Didn’t think of that.</span>
<span class="comment-copy">About the <code>__len__</code> method, would that be more intended for getting the size of something that stores a number of elements (like characters in a <code>str</code> or items in a <code>list</code>)?</span>
<span class="comment-copy">the way you would have python tell you the 'vector length' is with <code>abs()</code>, for which the special method name is <code>__abs__()</code></span>
