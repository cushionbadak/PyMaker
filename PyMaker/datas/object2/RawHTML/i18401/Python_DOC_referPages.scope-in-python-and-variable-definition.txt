<div class="post-text" itemprop="text">
<p>I'm reading a wiki book Python_Programming and I'm a little confused about the piece of code below:</p>
<pre><code>def foo():
    def bar():
        x=5
        return x+y
    y=10
    return bar()
foo()
</code></pre>
<p>well, I notice that <code>y</code> is defined outside of bar() and it's used in <code>x+y</code>, which is "before" <code>y</code> is defined. I think similar code will cause a compiling error in C and we have to write something like:</p>
<pre><code>def foo():
    def bar(y):
        x=5
        return x+y
    y=10
    return bar(y)
foo()
</code></pre>
<p>Without defining <code>y</code> as a formal parameter in <code>bar()</code>, I don't think the compiler is OK with it.
But I guess it's totally fine in Python, which is an interpreted language, right?</p>
<p>Is this something different in interpreted language compared to compiled language? What's the actual process Python uses when interpreting the code at top?</p>
<hr/>
<p>EDIT 1:
I think the answer below has made this point very clear, it's about free variable and closure. Here are some links which I think help this question a lot:</p>
<p><a href="https://stackoverflow.com/questions/8678745/python-free-variables-why-does-this-fail">SO:python-free-variables-why-does-this-fail</a><br/>
<a href="https://stackoverflow.com/questions/4020419/closures-in-python">SO:closures-in-python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking at a <a href="http://en.wikipedia.org/wiki/Closure_%28computer_science%29" rel="nofollow"><em>closure</em></a>; the Python compiler marks <code>y</code> in <code>bar</code> as a free variable because <code>y</code> is not assigned to.</p>
<p><code>y</code> <em>is</em> a local in <code>foo</code> and because there is a nested scope that uses that name as a free variable, <code>y</code> is marked as a closure.</p>
<p>When the code runs, Python creates a closure for <code>y</code> immediately when creating the <code>bar()</code> function (it is recreated every time you call <code>foo()</code>; only the bytecode for the function remains unchanged, a constant attached to the <code>foo</code> function code).</p>
<p>Only when <code>bar()</code> is <strong>invoked</strong> does Python need to look up <code>y</code>, which means dereferencing the closure, and from there dereferencing the current value of <code>y</code>.</p>
<p>You can see all this in action with some introspection and disassembly of the bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     def bar(): return y
...     y = 10
...     return bar
... 
&gt;&gt;&gt; foo()
&lt;function foo.&lt;locals&gt;.bar at 0x10d53ce60&gt;
&gt;&gt;&gt; foo()()
10
</code></pre>
<p>This builds a function with a closure and returns it without calling. This allows us to introspect the <code>bar()</code> function created by <code>foo()</code>.</p>
<pre><code>&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_CLOSURE             0 (y) 
              3 BUILD_TUPLE              1 
              6 LOAD_CONST               1 (&lt;code object bar at 0x10d5138a0, file "&lt;stdin&gt;", line 2&gt;) 
              9 LOAD_CONST               2 ('foo.&lt;locals&gt;.bar') 
             12 MAKE_CLOSURE             0 
             15 STORE_FAST               0 (bar) 

  3          18 LOAD_CONST               3 (10) 
             21 STORE_DEREF              0 (y) 

  4          24 LOAD_FAST                0 (bar) 
             27 RETURN_VALUE         
</code></pre>
<p>Note how the Python compiler has inserted a <code>LOAD_CLOSURE</code> for <code>y</code> at the top there. <code>MAKE_CLOSURE</code> creates the function object with attached closure, for <code>bar</code>.</p>
<pre><code>&gt;&gt;&gt; dis.dis(foo())
  2           0 LOAD_DEREF               0 (y) 
              3 RETURN_VALUE         
</code></pre>
<p>All <code>bar()</code> has to do is dereference the attached closure.</p>
<pre><code>&gt;&gt;&gt; foo.__code__.co_consts
(None, &lt;code object bar at 0x10d5138a0, file "&lt;stdin&gt;", line 2&gt;, 'foo.&lt;locals&gt;.bar', 10)
&gt;&gt;&gt; foo.__code__.co_cellvars
('y',)
&gt;&gt;&gt; foo().__closure__
(&lt;cell at 0x10d5e2c20: int object at 0x10d188940&gt;,)
&gt;&gt;&gt; foo().__closure__[0].cell_contents
10
</code></pre>
<p>The closure points to <code>y</code>, and looking up the contents gives you <code>10</code>, as expected.</p>
<p>Compiled languages could do this as well; someone managed to compile Scheme to C, with preserving the closures: <a href="http://matt.might.net/articles/compiling-scheme-to-c/" rel="nofollow">Compiling Scheme to C</a>, for example.</p>
</div>
<span class="comment-copy">Great! Learn a lot things new here...module dis, closure, free variable, etc. One more thing: I get <code>&lt;function bar at 0x14336e0&gt;</code> while you get <code>&lt;function foo.&lt;locals&gt;.bar at 0x10d53ce60&gt;</code>, why there's no <code>foo.&lt;locals&gt;.</code> in my output? I'm using Python 2.7.3,thx!</span>
<span class="comment-copy">I used Python 3, that's all; new functionality added more information to name where a function comes from.</span>
<span class="comment-copy">yeah, seems like a difference made in Python 3.3, thx a lot!</span>
<span class="comment-copy">@AmareKnight: See <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions" rel="nofollow noreferrer">Qualified name for classes and functions</a>.</span>
