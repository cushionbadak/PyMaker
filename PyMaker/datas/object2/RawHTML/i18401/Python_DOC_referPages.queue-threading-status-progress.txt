<div class="post-text" itemprop="text">
<p>I'm trying to create a web extractor, I have this code for multithreads, and I need print the status/progress of the scanner :</p>
<pre><code>import time
import threading
import Queue       
import sys

try:
    Lista = open(sys.argv[1], "r").readlines()
except(IOError): 
    print "Error: Check your ip list path\n"
    sys.exit(1)

class WorkerThread(threading.Thread) :

    def __init__(self, queue) :
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self) :
        while True :
            counter = self.queue.get()
            sys.stdout.write("line nr : \r")
            self.queue.task_done()      

queue = Queue.Queue()

for i in range(50) :
    worker = WorkerThread(queue)
    worker.setDaemon(True)
    worker.start()

for line in Lista:
    queue.put(line)

queue.join()

print "All task over!"
</code></pre>
<p>How can I print the status/progress when the scanner working, I'm tried <code>len(queue)</code> but it doesn't work?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Queue</code> objects do not have a <code>len</code> because, by their very nature, they're being shared across threads, and it would be inaccurate and misleading.</p>
<p>However, they have a <a href="http://docs.python.org/3/library/queue.html#queue.Queue.qsize" rel="nofollow"><code>qsize</code></a> method that gives you the approximate size, for exactly this kind of purpose.</p>
<hr/>
<p>If you want <em>exact</em> values, you need a second <code>Queue</code> for that, where each task puts something on the out-queue, and some extra thread (or possibly the main thread) loops over it and counts up the tasks done so far. Or, alternatively, something simpler, like a global <code>int</code> counter with a global <code>Lock</code> protecting it.</p>
<hr/>
<p>However, I think it would be a lot simpler to write this in terms of a pool or executor. That would take care of queueing up tasks for you, and returning a value for each one to the main thread, without you needing to manage anything. For example, using <a href="https://pypi.python.org/pypi/futures" rel="nofollow"><code>futures</code></a>, the backport of the Python 3.x <a href="http://docs.python.org/3/library/concurrent.futures.html" rel="nofollow"><code>concurrent.futures</code></a> module for 2.x, here's your whole program, with progress added:</p>
<pre><code>import sys
import futures 

try:
    Lista = open(sys.argv[1], "r").readlines()
except(IOError): 
    print "Error: Check your ip list path\n"
    sys.exit(1)

def task(line):
    # Do something

with futures.ThreadPoolExecutor(50) as executor:
    fs = [executor.submit(task, line) for line in Lista]
    for i, f in enumerate(futures.as_completed(fs)):
        sys.stdout.write("line nr: {} / {} \r".format(i, len(Lista)))

print "All task over!"
</code></pre>
</div>
<span class="comment-copy">Can you explain a bit why <code>len(queue)</code> is not correct?</span>
<span class="comment-copy">@OfirIsrael: <code>Queue</code>s don't have lengths, so you get a <code>TypeError</code> or <code>AttributeError</code> depending on your Python version, and presumably he doesn't consider that a correct way to get information for a progress barâ€¦</span>
