<div class="post-text" itemprop="text">
<p>I actually needed <code>xor</code> for my solution, but while thinking on it, I started wondering about the question above. What is the meaning of <code>True == True != False</code>? </p>
<p>Looking at the documentation I suppose it's <code>True == True and True != False</code>, but I'd like a more general and certain approach. How do I quickly get readable form of bytecode for such code. Is there an easier way to find out than both bytecode and documentation?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's called <a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="nofollow noreferrer"><em>operator chaining</em></a>. Whenever you have an expression like <code>A op1 B op2 C</code> with <code>op1</code> and <code>op2</code> comparisons it is "translated" to <code>A op1 B and B op2 C</code>.
(Actually it does evaluate <code>B</code> only once).</p>
<p>Note: comparisons operator include <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>! (e.g. <code>a is b is not None</code> means <code>a is b and b is not None</code>).</p>
<p>If you want to look at bytecode you can use the <a href="http://docs.python.org/3.3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a> module:</p>
<pre><code>In [1]: import dis

In [2]: dis.dis(lambda: True == True != False)
  1           0 LOAD_CONST               1 (True) 
              3 LOAD_CONST               1 (True) 
              6 DUP_TOP              
              7 ROT_THREE            
              8 COMPARE_OP               2 (==) 
             11 JUMP_IF_FALSE_OR_POP    21 
             14 LOAD_CONST               2 (False) 
             17 COMPARE_OP               3 (!=) 
             20 RETURN_VALUE         
        &gt;&gt;   21 ROT_TWO              
             22 POP_TOP              
             23 RETURN_VALUE 
</code></pre>
<p>If you read at the bytecode you can understand that it performs operator chaining.</p>
<p>Given that the expression is <code>True == True != False</code>, which is "interpreted" as <code>True == True and True != False</code> it first loads the <em>two</em> <code>True</code> constants for the first operator via the <code>LOAD_CONST</code> bytecode. The <code>DUP_TOP</code> duplicates the top of the stack(this avoids re-evaluating <code>True</code> for the second comparison).
It performs the first comparison(<code>COMPARE_OP</code>) if it is false it just to the bytecode 21, otherwise it pops the top of the stack(<code>JUMP_IF_FALSE_OR_POP</code>). It then performs the second comparison.</p>
<p>To answer your general question the fastest way to find out about some feature of python is to use the <a href="http://docs.python.org/3/search.html?q=&amp;check_keywords=yes&amp;area=default" rel="nofollow noreferrer">quicksearch</a> page of the documentation.
I'd also suggest to read <a href="http://docs.python.org/3/search.html?q=&amp;check_keywords=yes&amp;area=default" rel="nofollow noreferrer">Python's tutorial</a> for a general introduction to the language.</p>
<p>I'd like to add that, since python provides an interactive environment, it is often easier to understand how some code works writing it in the interpreter and watching the results. Almost all buil-in types have the documentation available via docstrings, so doing <code>help(some_object)</code> should give you a lot of information.
In particular <a href="http://ipython.org/" rel="nofollow noreferrer"><code>IPython</code></a> provides an enhanced interactive interpreter with more user-friendly help messages/error formatting etc.)</p>
</div>
<div class="post-text" itemprop="text">
<p>In most languages, <code>a == b != c</code> parses as <code>(a == b) != c</code>.
Therefore, what you would expect is that <code>True == True != False</code> would be the same as <code>(True == True) != False</code>, which evaluates to <code>True != False</code>, which evaluates to <code>True</code>.</p>
<p>Python has a different meaning, as can be witnessed here:</p>
<pre><code>&gt;&gt;&gt; True != False != False
False
&gt;&gt;&gt; (True != False) != False
True
</code></pre>
<p>In Python, <code>a == b != c</code> is equivalent to <code>(a == b) and (b != c)</code>.
This means that <code>True == True != False</code> is equivalent to <code>(True == True) and (True != False)</code>, which evaluates to <code>True and True</code>, which evaluates to <code>True</code>.</p>
<p>Coincidentally, both meanings (Python's and that of other languages) give the same result here, but one should be cautious.</p>
</div>
<span class="comment-copy">Thanks, this was very exhaustive. I actually use IPython and help features and looked it up in the docs, but I didn't have experience with <code>dis</code> or quicksearch. The answer from @nickie gives a bit of insight of why I wanted to know about <code>dis</code>. My code evaluates to the same value in both Python and typical semantics, so my usual approach (the interpreter) doesn't cut it.</span>
