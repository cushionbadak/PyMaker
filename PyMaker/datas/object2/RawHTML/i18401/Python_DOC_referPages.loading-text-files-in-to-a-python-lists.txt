<div class="post-text" itemprop="text">
<p>I'm very very new to Python so no doubt there are several very basic mistakes, although I have looked through several Python tutorials and everything seems ok.</p>
<p>I'm trying to import two text files in to my list.</p>
<p>The <code>username.txt</code> looks like this</p>
<blockquote>
<p>user1<br/>
  user2<br/>
  user3  </p>
</blockquote>
<p>and the <code>password.txt</code> looks like this</p>
<blockquote>
<p>pass1<br/>
  pass2<br/>
  pass3  </p>
</blockquote>
<p>when I run everything the debugger doesn't give me any errors but when I try a <code>user/password</code> combination it says that it isn't correct.</p>
<p>Can you see anything wrong, or know anything that might help?</p>
<p>This is what I am running:</p>
<pre><code>from Tkinter import *

username = ["nathan"]
password = ["1"]

def login():
        index = 0
        usrnm = usernameEntry.get()
        while index &lt; len(username):
                if username[index] == usrnm:
                        psswrd = passwordEntry.get()
                        if password[index] == psswrd:
                                print("Success")
                                break
                        else:
                                print("Password doesn't exist!")
                                break
                else:
                        index = index + 1
        else:
                print("Username doesn't exist!")

def save():
        fWUsername = open("username.txt", "w")
        fWUsername.write("\n".join(str(x) for x in username))
        fWUsername.close

        fWPassword = open("password.txt", "w")
        fWPassword.write("\n".join(str(x) for x in password))
        fWPassword.close

def load():
        fRUsername = open("username.txt", "r")
        username = fRUsername.readlines()
        fRUsername.close()

        fRPassword = open("password.txt", "r")
        password = fRPassword.readlines()
        fRPassword.close()

loginForm = Tk()

usernameLabel = Label(loginForm, text = "username:")
usernameLabel.pack()

usernameEntry = Entry(loginForm)
usernameEntry.pack()

passwordLabel = Label(loginForm, text = "password:")
passwordLabel.pack()

passwordEntry = Entry(loginForm, show = "*")
passwordEntry.pack()

submitButton = Button(loginForm, text = "submit", command = login)
submitButton.pack()

loadButton = Button(loginForm, text = "load data lists", command = load)
loadButton.pack()

saveButton = Button(loginForm, text = "save data lists", command = save)
saveButton.pack()

mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That’s actually a mean issue you have here, because it’s not really obvious at all. As a tip, you can easily print some additional information throughout your code to give you an idea of what’s going wrong.</p>
<p>In this case, I put a <code>print(username)</code> at the beginning of the login function and saw that only <code>nathan</code> is a valid user, although I clicked the load button before.</p>
<p>So what’s happening?</p>
<p>The variables <code>username</code> and <code>password</code> are both defined at the root of the module (the script); this makes them <em>global variables</em>. Global variables can be accessed from anywhere within the module—unless they are hidden by local variables of the same name. Now, while they can be accessed from anywhere, changing them is not possible by default.</p>
<p>So within your <code>load</code> function, you have this:</p>
<pre><code>username = fRUsername.readlines()
</code></pre>
<p>This will declare a <em>local</em> variable within your function, hiding the global variable. When the function ends, that local variable is thrown away; but your global variable is unchanged.</p>
<p>To change this behaviour, you can define that you want to use the <em>global</em> variables <code>username</code> and <code>password</code>. To do that, add a global statement for them at the beginning of the function:</p>
<pre><code>def load():
    global username, password
    username = ... # this now changes the _global_ variable
</code></pre>
<p>If you do that, the global variables are correctly changed and all usernames are available from the login function.</p>
<p>However, <code>readlines</code> will include line breaks after each line. So the usernames will actually be <code>user1\n</code>, <code>user2\n</code> and <code>user3</code> (same with the passwords). To fix that, you might want to <code>strip()</code> those values before comparing them (removing all leading and trailing whitespace).</p>
<p>Finally, it is generally recommmended to use the <code>with</code> statement when opening files. This will make sure that the handles are correctly closed (you don’t need to call <code>close()</code> explicitely—which you aren’t doing in the save method btw!):</p>
<pre><code>with open('username.txt', 'r') as fRUsername:
    username = fRUsername.readlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>At first glance, the code looks correct. A good way to solve problems like this is adding logging to make sure the code does what you expect when you run it. Think of logging as a protocol that allows you to debug a problem afterwards. It's a very useful skill to have.</p>
<p>In your case, you should add logging after loading user names and passwords (print how many you loaded). If the two numbers disagree or both are 1, you already know that something is wrong.</p>
<p>Later, when searching users and passwords, print the index and the expected password.</p>
<p>Note: For security reasons, you shouldn't print passwords during logging. Log files are often only weakly protected.</p>
</div>
<span class="comment-copy">What error message do you get? That code shouldn't do much as the login, save and load methods are never called.</span>
<span class="comment-copy">do a <code>print username</code> after <code>username = fRUsername.readlines()</code> and see if the format is as you expect.</span>
<span class="comment-copy">Mike Vella, when I click the 'loadButton' it calls the load method, but I don't get an error message. What I want to happen is the contents of the user and password txts replace the contents of the current lists so when I enter them in to the entry box it prints success</span>
<span class="comment-copy">Fredrik, they aren't; they have "/n" on the end of each, is there a way to get rid of this?</span>
<span class="comment-copy">to get rid of the trailing newline characters use <code>strip()</code></span>
<span class="comment-copy"><code>global</code> is a horrid statement to suggest to a beginner since there is almost never a reason to use them in Python.</span>
<span class="comment-copy">@msw You are more than welcome to write an extensive answer yourself and explain how to structure the whole application in a better way to avoid having to use <code>global</code>. In this case, it’s still the simplest solution to fix this issue, and I think it helps beginners more to fix their solution than to propose a complete rewrite into something that they didn’t come up with themselves.</span>
<span class="comment-copy">I read somewhere that on non-Unix systems the symbol for line breaks is different, so the strip may not work the same? Is this true, and, if so, is there a way to remove it for both Unix and non-Unix systems?</span>
<span class="comment-copy">No, <a href="http://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip</code></a> will by default remove any <i>whitespace</i>, including unix line breaks <code>\n</code> and Windows’ combined <code>\r\n</code>, but also including spaces which you might want to get rid of for logins anyway.</span>
