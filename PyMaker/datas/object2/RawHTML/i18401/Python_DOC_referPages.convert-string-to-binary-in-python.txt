<div class="post-text" itemprop="text">
<p>I am in need of a way to get the binary representation of a string in python. e.g. </p>
<pre><code>st = "hello world"
toBinary(st)
</code></pre>
<p>Is there a module of some neat way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this?</p>
<pre><code>&gt;&gt;&gt; st = "hello world"
&gt;&gt;&gt; ' '.join(format(ord(x), 'b') for x in st)
'1101000 1100101 1101100 1101100 1101111 100000 1110111 1101111 1110010 1101100 1100100'

#using `bytearray`
&gt;&gt;&gt; ' '.join(format(x, 'b') for x in bytearray(st))
'1101000 1100101 1101100 1101100 1101111 100000 1110111 1101111 1110010 1101100 1100100'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a more pythonic way you can first convert your string to byte array then use <code>bin</code> function within <code>map</code> :</p>
<pre><code>&gt;&gt;&gt; st = "hello world"
&gt;&gt;&gt; map(bin,bytearray(st))
['0b1101000', '0b1100101', '0b1101100', '0b1101100', '0b1101111', '0b100000', '0b1110111', '0b1101111', '0b1110010', '0b1101100', '0b1100100']
</code></pre>
<p>Or you can join it:</p>
<pre><code>&gt;&gt;&gt; ' '.join(map(bin,bytearray(st)))
'0b1101000 0b1100101 0b1101100 0b1101100 0b1101111 0b100000 0b1110111 0b1101111 0b1110010 0b1101100 0b1100100'
</code></pre>
<p>Note that in <em>python3</em> you need to specify an encoding for <code>bytearray</code> function :</p>
<pre><code>&gt;&gt;&gt; ' '.join(map(bin,bytearray(st,'utf8')))
'0b1101000 0b1100101 0b1101100 0b1101100 0b1101111 0b100000 0b1110111 0b1101111 0b1110010 0b1101100 0b1100100'
</code></pre>
<p>You can also use <code>binascii</code> module in python 2:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; bin(int(binascii.hexlify(st),16))
'0b110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
</code></pre>
<p><code>hexlify</code> return the hexadecimal representation of the binary data then you can convert to int by specifying 16 as its base then convert it to binary with <code>bin</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can access the code values for the characters in your string using the <code>ord()</code> built-in function.  If you then need to format this in binary, the <code>string.format()</code> method will do the job.</p>
<pre><code>a = "test"
print(' '.join(format(ord(x), 'b') for x in a))
</code></pre>
<p>(Thanks to Ashwini Chaudhary for posting that code snippet.)</p>
<p>While the above code works in Python 3, this matter gets more complicated if you're assuming any encoding other than UTF-8.  In Python 2, strings are byte sequences, and ASCII encoding is assumed by default.  In Python 3, strings are assumed to be Unicode, and there's a separate <code>bytes</code> type that acts more like a Python 2 string.  If you wish to assume any encoding other than UTF-8, you'll need to specify the encoding.</p>
<p>In Python 3, then, you can do something like this:</p>
<pre><code>a = "test"
a_bytes = bytes(a, "ascii")
print(' '.join(["{0:b}".format(x) for x in a_bytes]))
</code></pre>
<p>The differences between UTF-8 and ascii encoding won't be obvious for simple alphanumeric strings, but will become important if you're processing text that includes characters not in the ascii character set.</p>
</div>
<div class="post-text" itemprop="text">
<p>We just need to encode it.</p>
<pre><code>'string'.encode('ascii')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an update for the existing answers which used <a href="https://docs.python.org/3/library/functions.html#func-bytearray" rel="nofollow noreferrer"><code>bytearray()</code></a> and can not work that way anymore:</p>
<pre><code>&gt;&gt;&gt; st = "hello world"
&gt;&gt;&gt; map(bin, bytearray(st))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: string argument without an encoding
</code></pre>
<p>Because, as explained in the link above, if the source is a string,  <em>you must also give the encoding</em>:</p>
<pre><code>&gt;&gt;&gt; map(bin, bytearray(st, encoding='utf-8'))
&lt;map object at 0x7f14dfb1ff28&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def method_a(sample_string):
    binary = ' '.join(format(ord(x), 'b') for x in sample_string)

def method_b(sample_string):
    binary = ' '.join(map(bin,bytearray(sample_string,encoding='utf-8')))


if __name__ == '__main__':

    from timeit import timeit

    sample_string = 'Convert this ascii strong to binary.'

    print(
        timeit(f'method_a("{sample_string}")',setup='from __main__ import method_a'),
        timeit(f'method_b("{sample_string}")',setup='from __main__ import method_b')
    )

# 9.564299999998184 2.943955828988692
</code></pre>
<p>method_b is substantially more efficient at converting to a byte array because it makes low level function calls instead of manually transforming every character to an integer, and then converting that integer into its binary value.</p>
</div>
<span class="comment-copy">What do you expect the output to be, specifically?</span>
<span class="comment-copy">By "binary", do you mean 0101010 type or the <code>ord</code>inal number of each character in (e.g. hex)?</span>
<span class="comment-copy">Assuming that you actually mean binary (zeros and ones), do you want a binary representation of each character (8 bits per character) one after another? e.g. h is ascii value 104 would be 01101000 in binary</span>
<span class="comment-copy">This question has been answered many times on stackoverflow:  <a href="http://stackoverflow.com/questions/11599226/how-to-convert-binary-string-to-ascii-string-in-python" title="how to convert binary string to ascii string in python">stackoverflow.com/questions/11599226/…</a> <a href="http://stackoverflow.com/questions/8553310/python-2-5-convert-string-to-binary" title="python 2 5 convert string to binary">stackoverflow.com/questions/8553310/…</a></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/7396849/convert-binary-to-ascii-and-vice-versa-python">Convert Binary to ASCII and vice versa (Python)</a></span>
<span class="comment-copy">Or if you want each binary number to be 1 byte: ' '.join(format(ord(i),'b').zfill(8) for i in st)</span>
<span class="comment-copy">For full bytes you can also use <code>' '.join('{0:08b}'.format(ord(x), 'b') for x in st)</code>, which is about 35% faster than the <code>zfill(8)</code> solution (at least on my machine).</span>
<span class="comment-copy">What about converting more-than-one-byte chars, like <code>β</code>, e.g., which    seems to me represented by <code>11001110 10110010</code> internally?</span>
<span class="comment-copy">I know this was posted long time ago, but what about non-ASCII characters?</span>
<span class="comment-copy">Not only this is more pythonic, but this is "more" correct for multi-byte non-ASCII strings.</span>
