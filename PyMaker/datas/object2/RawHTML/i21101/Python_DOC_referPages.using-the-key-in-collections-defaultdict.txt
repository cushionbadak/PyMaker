<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a> is great. Especially in conjunction with <code>lambda</code>:</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; a = collections.defaultdict(lambda : [None,None])
&gt;&gt;&gt; a['foo']
[None, None]
</code></pre>
<p>Is there a way to use the key given (e.g. <code>'foo'</code>) in the lambda?  For example (doesn't work):</p>
<pre><code>&gt;&gt;&gt; a = collections.defaultdict(lambda : [None]*key)
&gt;&gt;&gt; a[1]
[None]
&gt;&gt;&gt; a[2]
[None, None]
&gt;&gt;&gt; a
defaultdict(&lt;function &lt;lambda&gt; at 0x02984170&gt;, {1: [None], 2: [None, None]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably want <code>__missing__</code> which is called on <code>dict</code> whenever you try to access an item not present in the dict;  the vanilla <code>__missing__</code> raises an exception, but you could do whatever you like in a subclass:</p>
<pre><code>class A(dict):
    def __missing__(self, key):
        value = self[key] = [None] * key
        return value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combining the answers from <a href="https://stackoverflow.com/a/7966208/2124834">SingleNegationElimination</a> and <a href="https://stackoverflow.com/a/7963892/2124834">rplnt</a>, and <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">the defaultdict documentation</a>, I used the following solution.</p>
<pre><code>import collections
class KeyBasedDefaultDict(collections.defaultdict):
    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = self.default_factory(key)
        return self[key]
</code></pre>
<p>The body of the method could possibly just be <code>return self.default_factory(key)</code>, but the extra code makes sure to replicate all defaultdict behaviour.</p>
<p>Usage as described in question:</p>
<pre><code>d = KeyBasedDefaultDict(lambda key: [None] * key)
d[1]
&gt; [None]
d[2]
&gt; [None, None]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will work as requested, although it's probably not the best solution (you need to initialize it with default call and then not use it). It could probably be fixed with overriding some other method(s).</p>
<pre><code>class NoneDict(collections.defaultdict):
    def __setitem__(self, key, value):
        super(NoneDict, self).__setitem__(key, key*[None])
</code></pre>
</div>
<span class="comment-copy">didn't know about this magic method before, :), great</span>
