<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/595374/whats-the-function-like-sum-but-for-multiplication-product">What's the function like sum() but for multiplication? product()?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I've been looking through a tutorial and book but I can find no mention of a built in product function i.e. of the same type as sum(), but I could not find anything such as <code>prod()</code>.</p>
<p>Is the only way I could find the product of items in a list by importing the <code>mul()</code> operator?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Pronouncement</h2>
<p>Yes, that's right.  Guido <a href="http://bugs.python.org/issue1093" rel="nofollow noreferrer">rejected the idea</a> for a built-in prod() function because he thought it was rarely needed.</p>
<h2>Python 3.8 Update</h2>
<p>In Python 3.8, <em>prod()</em> was added to the math module:</p>
<pre><code>&gt;&gt;&gt; from math import prod
&gt;&gt;&gt; prod(range(1, 11))
3628800
</code></pre>
<h2>Alternative with reduce()</h2>
<p>As you suggested, it is not hard to make your own using <a href="https://docs.python.org/2.7/library/functions.html#reduce" rel="nofollow noreferrer"><em>reduce()</em></a> and <a href="https://docs.python.org/3/library/operator.html#operator.mul" rel="nofollow noreferrer"><em>operator.mul()</em></a>:</p>
<pre><code>def prod(iterable):
    return reduce(operator.mul, iterable, 1)

&gt;&gt;&gt; prod(range(1, 5))
24
</code></pre>
<p>In Python 3, the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><em>reduce()</em></a> function was moved to the <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools module</a>, so you would need to add:</p>
<pre><code>from functools import reduce
</code></pre>
<h2>Specific case: Factorials</h2>
<p>As a side note, the primary motivating use case for <em>prod()</em> is to compute factorials.  We already have support for that in the <a href="https://docs.python.org/2.7/library/math.html#math.factorial" rel="nofollow noreferrer">math module</a>:</p>
<pre><code>&gt;&gt;&gt; import math

&gt;&gt;&gt; math.factorial(10)
3628800
</code></pre>
<h2>Alternative with logarithms</h2>
<p>If your data consists of floats, you can compute a product using <em>sum()</em> with exponents and logarithms:</p>
<pre><code>&gt;&gt;&gt; from math import log, exp

&gt;&gt;&gt; data = [1.2, 1.5, 2.5, 0.9, 14.2, 3.8]
&gt;&gt;&gt; exp(sum(map(log, data)))
218.53799999999993

&gt;&gt;&gt; 1.2 * 1.5 * 2.5 * 0.9 * 14.2 * 3.8
218.53799999999998
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no <code>product</code> in Python, but you can define it as</p>
<pre><code>def product(iterable):
    return reduce(operator.mul, iterable, 1)
</code></pre>
<p>Or, if you have NumPy, use <code>numpy.product</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>
Since the <a href="https://docs.python.org/3.0/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">reduce() function has been moved to the module <code>functools</code> python 3.0</a>, you have to take a different approach.</p>
<p>You can use <code>functools.reduce()</code> to access the function:</p>
<pre class="lang-python prettyprint-override"><code>product = functools.reduce(operator.mul, iterable, 1)
</code></pre>
<p>Or, if you want to follow the spirit of the python-team (which removed <code>reduce()</code> because they think <code>for</code> would be more readable), do it with a loop:</p>
<pre class="lang-python prettyprint-override"><code>product = 1
for x in iterable:
    product *= x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from numpy import multiply, product
list1 = [2,2,2]
list2 = [2,2,2]
mult = 3
prod_of_lists = multiply(list1,list2)
&gt;&gt;&gt;[4,4,4]
prod_of_list_by_mult = multiply(list1,mult)
&gt;&gt;&gt;[6,6,6]
prod_of_single_array = product(list1)
&gt;&gt;&gt;8
</code></pre>
<p>numpy has many really cool functions for lists!</p>
</div>
<span class="comment-copy">I came here looking for <code>product([1,2], [3,4]) == [(1,3), (1,4), (2,3), (2,4)]</code>. That one you get here: <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer">docs.python.org/2/library/itertools.html#itertools.product</a></span>
<span class="comment-copy">@dhill <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> is for Cartesian product of iterables. Not plain old multiplication of numbers</span>
<span class="comment-copy">Source of the BDFL's statement: <a href="http://bugs.python.org/issue1093" rel="nofollow noreferrer">bugs.python.org/issue1093</a></span>
<span class="comment-copy">Of course, <code>prod(range(1, 5))</code> is more properly written <code>math.factorial(4)</code> :) Still too bad this function isn't in the <code>math</code> module either.</span>
<span class="comment-copy">And of course, people who make frequent use of factorials should cache them in a list so they don't get recalculated on every call ;-)  fact=[math.factorial(i) for i in range(100)]</span>
<span class="comment-copy">@RaymondHettinger another fancy way is to use the memoize decorator on the factorial function <a href="http://wiki.python.org/moin/PythonDecoratorLibrary#Memoize" rel="nofollow noreferrer">wiki.python.org/moin/PythonDecoratorLibrary#Memoize</a></span>
<span class="comment-copy">Please note that reduce() has been removed from the built-in functions in python3. My answer gives alternatives for python3-users.</span>
<span class="comment-copy">Damn ok thanks for the help, is it possible to define one function inside another?</span>
<span class="comment-copy">@GeorgeBurrows: yes, you can nest function definitions, though I wouldn't do that unless you're doing higher-order stuff.</span>
<span class="comment-copy">Re <code>numpy.product</code>, be aware <i>arithmetic is modular when using integer types, and no error is raised on overflow</i> <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html" rel="nofollow noreferrer">(source)</a>.</span>
<span class="comment-copy">How did I not think of this ages ago? This is perfect, and Pythonic!</span>
<span class="comment-copy">I wouldn't say that reduce() has been <i>removed</i>.  It's just been moved from the list of standard functions to a module in the standard library (functools).  You don't need to install anything; you'll just have to import the module.  That's the same as the math library.</span>
<span class="comment-copy">@BaconBits of course you are correct, thanks for pointing this out. I tried to change the wording to adress this better.</span>
<span class="comment-copy">I like that this answer points to a powerful numeric library â€” if the person asking the question really needs to do a product of a series of scalars for any reason other than homework, then the person probably needs to think about something like numbpy for the larger problem they're trying to solve.</span>
<span class="comment-copy">I'm not sure that someone who is just starting with the Python tutorial should be pointed at numpy to solve such as simple problem.  As they saying goes, "now they have two problems" :-)  Once Python basics have be acquired, I do agree that numpy would we a powerful addition to the toolkit for anyone doing number crunching.</span>
