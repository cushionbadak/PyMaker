<div class="post-text" itemprop="text">
<p>In Python, is there a good way to interleave two lists of the same length?</p>
<p>Say I'm given <code>[1,2,3]</code> and <code>[10,20,30]</code>. I'd like to transform those into <code>[1,10,2,20,3,30]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Having posted the question, I've realised that I can simply do the following:</p>
<pre><code>[val for pair in zip(l1, l2) for val in pair]
</code></pre>
<p>where <code>l1</code> and <code>l2</code> are the two lists.</p>
<hr/>
<p>If there are N lists to interleave, then</p>
<pre><code>lists = [l1, l2, ...]
[val for tup in zip(*lists) for val in tup]
</code></pre>
<p>For more recipes, follow <a href="https://stackoverflow.com/questions/50312305/best-way-to-interleave-a-list-with-its-suffix-values/50312321#50312321">Best way to interleave a list with its suffix values</a>. Some of the methods demonstrated there can be generalised to two or more lists of equal length. </p>
</div>
<div class="post-text" itemprop="text">
<p>For python&gt;=2.3, there's <a href="http://docs.python.org/2.3/whatsnew/section-slices.html" rel="noreferrer">extended slice syntax</a>:</p>
<pre><code>&gt;&gt;&gt; a = [0, 2, 4, 6, 8]
&gt;&gt;&gt; b = [1, 3, 5, 7, 9]
&gt;&gt;&gt; c = a + b
&gt;&gt;&gt; c[::2] = a
&gt;&gt;&gt; c[1::2] = b
&gt;&gt;&gt; c
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>The line <code>c = a + b</code> is used as a simple way to create a new list of the exactly the right length (at this stage, its contents are not important). The next two lines do the actual work of interleaving <code>a</code> and <code>b</code>: the first one assigns the elements of <code>a</code> to all the even-numbered indexes of <code>c</code>; the second one assigns the elements of <code>b</code> to all the odd-numbered indexes of <code>c</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Given</strong></p>
<pre><code>a = [1, 2, 3]
b = [10, 20, 30]
c = [100, 200, 300, 999]
</code></pre>
<p><strong>Code</strong></p>
<p>Assuming lists of equal length, you can get an interleaved list with <code>itertools.chain</code> and <code>zip</code>:</p>
<pre><code>import itertools


list(itertools.chain(*zip(a, b)))
# [1, 10, 2, 20, 3, 30]
</code></pre>
<hr/>
<p><strong>Alternatives</strong></p>
<p><em><a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a></em></p>
<p>More generally with unequal lists, use <code>zip_longest</code> (recommended):</p>
<pre><code>[x for x in itertools.chain(*itertools.zip_longest(a, c)) if x is not None]
# [1, 100, 2, 200, 3, 300, 999]
</code></pre>
<p>Many lists can safely be interleaved:</p>
<pre><code>[x for x in itertools.chain(*itertools.zip_longest(a, b, c)) if x is not None]
# [1, 10, 100, 2, 20, 200, 3, 30, 300, 999]
</code></pre>
<p><em><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a></em><sup>+</sup></p>
<p>A library that ships with the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>roundrobin</code></a> itertools recipe, <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.interleave" rel="nofollow noreferrer"><code>interleave</code></a> and <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.interleave_longest" rel="nofollow noreferrer"><code>interleave_longest</code></a>.</p>
<pre><code>import more_itertools


list(more_itertools.roundrobin(a, b))
# [1, 10, 2, 20, 3, 30]

list(more_itertools.interleave(a, b))
# [1, 10, 2, 20, 3, 30]

list(more_itertools.interleave_longest(a, c))
# [1, 100, 2, 200, 3, 300, 999]
</code></pre>
<p><em><code>yield from</code></em></p>
<p>Finally, for something interesting in Python 3 (though not recommended):</p>
<pre><code>list(filter(None, ((yield from x) for x in zip(a, b))))
# [1, 10, 2, 20, 3, 30]

list([(yield from x) for x in zip(a, b)])
# [1, 10, 2, 20, 3, 30]
</code></pre>
<p><sub><sup>+</sup>Install using <code>pip install more_itertools</code></sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Alternative:</p>
<pre><code>&gt;&gt;&gt; l1=[1,2,3]
&gt;&gt;&gt; l2=[10,20,30]
&gt;&gt;&gt; [y for x in map(None,l1,l2) for y in x if y is not None]
[1, 10, 2, 20, 3, 30]
</code></pre>
<p>This works because <a href="http://docs.python.org/library/functions.html#map" rel="noreferrer">map</a> works on lists in parallel. It <a href="http://docs.python.org/release/2.2/lib/built-in-funcs.html" rel="noreferrer">works the same</a> under 2.2. By itself, with <code>None</code> as the called functions, <code>map</code> produces a list of tuples:</p>
<pre><code>&gt;&gt;&gt; map(None,l1,l2,'abcd')
[(1, 10, 'a'), (2, 20, 'b'), (3, 30, 'c'), (None, None, 'd')]
</code></pre>
<p>Then just flatten the list of tuples. </p>
<p>The advantage, of course, is <code>map</code>  will work for any number of lists and will work even if they are different lengths:</p>
<pre><code>&gt;&gt;&gt; l1=[1,2,3]
&gt;&gt;&gt; l2=[10,20,30]
&gt;&gt;&gt; l3=[101,102,103,104]
&gt;&gt;&gt; [y for x in map(None,l1,l2,l3) for y in x if y in not None]
[1, 10, 101, 2, 20, 102, 3, 30, 103, 104]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I needed a way to do this with lists of different sizes which the accepted answer doesn't address.</p>
<p>My solution uses a generator and its usage looks a bit nicer because of it:</p>
<pre><code>def interleave(l1, l2):
    iter1 = iter(l1)
    iter2 = iter(l2)
    while True:
        try:
            if iter1 != None:
                yield next(iter1)
        except StopIteration:
            iter1 = None
        try:
            if iter2 != None:
                yield next(iter2)
        except StopIteration:
            iter2 = None
        if iter1 == None and iter2 == None:
            raise StopIteration()
</code></pre>
<p>And its usage:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; b = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
&gt;&gt;&gt; list(interleave(a, b))
[1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 'f', 'g']
&gt;&gt;&gt; list(interleave(b, a))
['a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5, 'f', 'g']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like aix's solution best. here is another way I think should work in 2.2:</p>
<pre><code>&gt;&gt;&gt; x=range(3)
&gt;&gt;&gt; x
[0, 1, 2]
&gt;&gt;&gt; y=range(7,10)
&gt;&gt;&gt; y
[7, 8, 9]
&gt;&gt;&gt; sum(zip(x,y),[])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate list (not "tuple") to list
&gt;&gt;&gt; sum(map(list,zip(x,y)),[])
[0, 7, 1, 8, 2, 9]
</code></pre>
<p>and one more way:</p>
<pre><code>&gt;&gt;&gt; a=[x,y]
&gt;&gt;&gt; [a[i][j] for j in range(3) for i in (0,1)]
[0, 7, 1, 8, 2, 9]
</code></pre>
<p>and:</p>
<pre><code>&gt;&gt;&gt; sum((list(i) for i in zip(x,y)),[])
[0, 7, 1, 8, 2, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[el for el in itertools.chain(*itertools.izip_longest([1,2,3], [4,5])) if el is not None]
</code></pre>
<p>As long as you don't have <code>None</code> that you want to keep</p>
</div>
<span class="comment-copy">You do realize that 2.2 is now ten years old? There's no reason to still be using it.</span>
<span class="comment-copy">@DanielRoseman: I do. In this instance I get no choice.</span>
<span class="comment-copy">Not recommended, but try this: <code>it = iter(l1); list((yield next(it)) or i for i in l2)</code></span>
<span class="comment-copy">For more options, as well as performance comparison on list interleaving, see <a href="https://stackoverflow.com/q/50312305/4909087">this post</a>.</span>
<span class="comment-copy">works only if l1 and l2 have the same number of elements</span>
<span class="comment-copy">@Emmanuel: The question reads "In Python, is there a good way to interleave two lists <b>of the same length</b>?"</span>
<span class="comment-copy">Thank you I think I need new pair of glasses.</span>
<span class="comment-copy">If you'd like to pad to longest list, use <code>izip_longest</code> for python2 and <code>zip_longest</code> for python3 ` <code>[val for pair in itertools.zip_longest(l1, l2) for val in pair]</code> results with <code>['a', 'b', 'a', 'b', 'a', 'b', None, 'b', None, 'b', None, 'b']</code></span>
<span class="comment-copy"><code>if y</code> will filter out <code>0</code> too, <code>if y is not None</code> is less fragile.</span>
<span class="comment-copy">@Jochen Ritzel: Thanks! I agree with you. Fixed. I wrote it with only muscles engaged...</span>
