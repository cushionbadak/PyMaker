<div class="post-text" itemprop="text">
<p>I'm creating a class where one of the methods inserts a new item into the sorted list. The item is inserted in the corrected (sorted) position in the sorted list. I'm not allowed to use any built-in list functions or methods other than <code>[]</code>, <code>[:]</code>, <code>+</code>, and <code>len</code> though. This is the part that's really confusing to me.</p>
<p>What would be the best way in going about this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Hint 1:  You might want to study the Python code in the <a href="http://docs.python.org/py3k/library/bisect.html#module-bisect">bisect module</a>.</p>
<p>Hint 2:  <a href="http://docs.python.org/tutorial/introduction.html#lists">Slicing</a> can be used for list insertion:</p>
<pre><code>&gt;&gt;&gt; s = ['a', 'b', 'd', 'e']
&gt;&gt;&gt; s[2:2] = ['c']
&gt;&gt;&gt; s
['a', 'b', 'c', 'd', 'e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/bisect.html?highlight=insort#bisect.insort">insort</a> function of the <a href="http://docs.python.org/3/library/bisect.html">bisect</a> module: </p>
<pre><code>&gt;&gt; import bisect 
&gt;&gt; a = [1, 2, 4, 5] 
&gt;&gt; bisect.insort(a, 3) 
&gt;&gt; print(a) 
[1, 2, 3, 4, 5] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the bisect module. Also, the list needs to be sorted before using bisect.insort_left </p>
<p>It's a pretty big difference.</p>
<pre><code>&gt;&gt;&gt; l = [0, 2, 4, 5, 9]
&gt;&gt;&gt; bisect.insort_left(l,8)
&gt;&gt;&gt; l
[0, 2, 4, 5, 8, 9]

timeit.timeit("l.append(8); l = sorted(l)",setup="l = [4,2,0,9,5]; import bisect; l = sorted(l)",number=10000)
    1.2235019207000732

timeit.timeit("bisect.insort_left(l,8)",setup="l = [4,2,0,9,5]; import bisect; l=sorted(l)",number=10000)
    0.041441917419433594
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a possible solution for you:</p>
<pre><code>a = [15, 12, 10]
b = sorted(a)
print b # --&gt; b = [10, 12, 15]
c = 13
for i in range(len(b)):
    if b[i] &gt; c:
        break
d = b[:i] + [c] + b[i:]
print d # --&gt; d = [10, 12, 13, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm learning Algorithm right now, so i wonder how bisect module writes.
Here is the code from bisect module about inserting an item into sorted list, which uses dichotomy:</p>
<pre><code>def insort_right(a, x, lo=0, hi=None):
    """Insert item x in list a, and keep it sorted assuming a is sorted.
    If x is already in a, insert it to the right of the rightmost x.
    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """

    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if x &lt; a[mid]:
            hi = mid
        else:
            lo = mid+1
    a.insert(lo, x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the best way to append the list and insert values to sorted list:</p>
<pre><code> a = [] num = int(input('How many numbers: ')) for n in range(num):
     numbers = int(input('Enter values:'))
     a.append(numbers)

 b = sorted(a) print(b) c = int(input("enter value:")) for i in
 range(len(b)):
     if b[i] &gt; c:
         index = i
         break d = b[:i] + [c] + b[i:] print(d)`
</code></pre>
</div>
<span class="comment-copy">Homework? You would probably start by searching the Web how to insert elements into a sorted list.</span>
<span class="comment-copy">if only there was a well known sorting algorithm that was suited to INSERTION =P</span>
<span class="comment-copy">I'm not allowed to use and built-in list functions though</span>
<span class="comment-copy">@jon_darkstar while taking that off time for your thing you still could also throw <a href="https://stackoverflow.com/questions/12755568/python-insertion-sort">a <i>link</i> to "insertion short"</a>... well, if you ask me, learning is <b><i>not</i></b> the time for the inessential spoiler-sensitivity.</span>
<span class="comment-copy">@FelixKling the OP stated that the disallowance of <a href="https://docs.python.org/2/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>.insert()</code></a> is what makes it confusing for the OP. Not very expectable for any amount of search to find anyone a good focus on this in the particular context.</span>
<span class="comment-copy">+1 for at least mentioning The Right Way to do this outside of a classroom setting.</span>
<span class="comment-copy">+1 for slicing trick. Python is so magic, there is always something to learn:)</span>
<span class="comment-copy">+1 for leading a horse to water. I'm curious, is there a reason to prefer slicing over insort()?</span>
<span class="comment-copy">Since OP wasn't allowed to use any functions or methods, slicing is left as  the only way to insert a new element into a list.</span>
<span class="comment-copy">bisect is nice for sorted list insertions, but it falls down to O(N) in speed, because it uses python's base lists. Is there anything on the market with linked lists or something like that?</span>
<span class="comment-copy">This thread is now 4 years old and the title doesn't mention the stdlib allergy, therefore people like me are happy to find this answer.</span>
<span class="comment-copy">Missing what to do, when items are not integers. I.e. how can I use it in real world problem?</span>
<span class="comment-copy">@Velda here's a non-integer example: <code>s = ['a', 'b', 'd']; bisect.insort(s, 'c'); assert(s == ['a', 'b', 'c', 'd'])</code></span>
<span class="comment-copy">Still integer example. And btw., how often do you sort letters...? What if I want to sort instances of some class by some property of it?</span>
<span class="comment-copy">@Velda I think the last example of bisect documentation might be useful. Also you may adjust the code of bisect.insort a bit just like in this answer: <a href="https://stackoverflow.com/a/41903429/7708392">stackoverflow.com/a/41903429/7708392</a></span>
<span class="comment-copy">Seems unaware of the feeling that the the idea of slicing didn't get through to the OP who appears to be a student, or that the lecturer might suffer from a disease that makes someone unable to say a term he wants to hear to the people whom he wants to hear it, under the fallacy that this all would somehow make for a better learning, which it will not. Nice profiling, though!</span>
<span class="comment-copy">Not the best solution, the <code>bisect</code> module would find the insertion point in O(log n) steps, your's potentially has to search the whole list, O(n) complexity.</span>
<span class="comment-copy"><code>index = i</code> is useless</span>
<span class="comment-copy">Maybe Using dichotomy will be better</span>
