<div class="post-text" itemprop="text">
<p>Can anyone tell me how can I call for indexes in a nested list?</p>
<p>Generally I just write: </p>
<pre><code>for i in range (list)
</code></pre>
<p>but what if I have a list with nested lists as below:</p>
<pre><code>Nlist = [[2,2,2],[3,3,3],[4,4,4]...]
</code></pre>
<p>and I want to go through the indexes of each one separately?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really need the indices you can just do what you said again for the inner list:</p>
<pre><code>l = [[2,2,2],[3,3,3],[4,4,4]
for i1 in xrange(len(l)):
    for i2 in xrange(len(l[i1])):
        print i1, i2, l[i1][i2]
</code></pre>
<p>But it is more pythonic to iterate through the list itself:</p>
<pre><code>for inner_l in l:
    for item in inner_l:
        print item
</code></pre>
<p>If you really need the indices you can also use <a href="http://docs.python.org/library/functions.html#enumerate"><code>enumerate</code></a>:</p>
<pre><code>for i1, inner_l in enumerate(l):
    for i2, item in enumerate(inner_l):
        print i1, i2, item, l[i1][i2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this setup:</p>
<pre><code>a = [["a","b","c",],["d","e"],["f","g","h"]]
</code></pre>
<p>To print the 2nd element in the 1st list ("b"), use <code>print a[0][1]</code> - For the 2nd element in 3rd list ("g"): <code>print a[2][1]</code></p>
<p>The first brackets reference which nested list you're accessing, the second pair references the item in that list. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this. Adapt it to your situation:</p>
<pre><code>  for l in Nlist:
      for item in l:
        print item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The question title is too wide and the author's need is more specific. In my case, <strong>I needed to extract all elements from nested list like in the example below</strong>:</p>
<h1>Example:</h1>
<pre><code>input -&gt; [1,2,[3,4]]
output -&gt; [1,2,3,4]
</code></pre>
<p>The code below gives me the result, but I would like to know if anyone can create a simpler answer:</p>
<pre><code>def get_elements_from_nested_list(l, new_l):
    if l is not None:
        e = l[0]
        if isinstance(e, list):
            get_elements_from_nested_list(e, new_l)
        else:
            new_l.append(e)
        if len(l) &gt; 1:
            return get_elements_from_nested_list(l[1:], new_l)
        else:
            return new_l
</code></pre>
<h1>Call of the method</h1>
<pre><code>l = [1,2,[3,4]]
new_l = []

get_elements_from_nested_list(l, new_l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
def flatten(lists):
  results = []
  for numbers in lists:
    for numbers2 in numbers:
        results.append(numbers2) 
  return results
print flatten(n)
</code></pre>
<p>Output: <code>n = [1,2,3,4,5,6,7,8,9]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I think you want to access list values and their indices simultaneously and separately:</p>
<pre><code>l = [[2,2,2],[3,3,3],[4,4,4],[5,5,5]]
l_len = len(l)
l_item_len = len(l[0])
for i in range(l_len):
    for j in range(l_item_len):
        print(f'List[{i}][{j}] : {l[i][j]}'  )
</code></pre>
</div>
<span class="comment-copy">You need to rewrite your question and make it clear. Your use of “indexes” is suspect; perhaps you meant “items”?</span>
<span class="comment-copy">This is a question about walking nested lists, the <a href="http://stackoverflow.com/questions/8184768/comparing-lists-python">other</a> is about comparing nested lists.</span>
<span class="comment-copy">this was helpful but i hate how you used variables "l', i and 1. so freakin' hard to read and differentiate I dont know why people do this for their examples.</span>
<span class="comment-copy">This snippet is an unnecessary re-invention of <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a></span>
<span class="comment-copy">Indeed it is...</span>
