<div class="post-text" itemprop="text">
<p>I need to override a method of a parent class, which is a generator, and am wondering the correct way to do this. Is there anything wrong with the following, or a more efficient way?</p>
<pre><code>class A:
    def gen(self):
        yield 1
        yield 2

class B(A):
    def gen(self):
        yield 3
        for n in super().gen():
            yield n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you have looks fine, but is not the only approach. What's important about a generator function is that it returns an iterable object. Your subclass could thus instead directly create an iterable, for example:</p>
<pre><code>import itertools

class B(A):
    def gen(self):
        return itertools.chain([3], super().gen())
</code></pre>
<p>The better approach is going to depend on exactly what you're doing; the above looks needlessly complex, but I wouldn't want to generalize from such a simple example. </p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.3 and up, the best, most general way to do this is:</p>
<pre><code>class A:
    def gen(self):
        yield 1
        yield 2

class B(A):
    def gen(self):
        yield 3
        yield from super().gen()
</code></pre>
<p>This uses <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer">the new <code>yield from</code> syntax for delegating to a subgenerator</a>. It's better than the other solutions because it's actually handing control to the generator it delegates to; if said generator supports <code>.send</code> and <code>.throw</code> to pass values and exceptions <em>into</em> the generator, then delegation means it actually receives the values; explicitly looping and <code>yield</code>ing one by one will receive the values in the <code>gen</code> wrapper, not the generator actually producing the values, and the same problem applies to other solutions like using <code>itertools.chain</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To call a method from a subclass you need the keyword <code>super</code>.</p>
<p>New Source Code:</p>
<pre><code>class B(A):
    def gen(self):
        yield 3
        for n in super().gen():
            yield n
</code></pre>
<p>This:</p>
<pre><code>b = B()
for i in b.gen():
     print(i)
</code></pre>
<p>produces the output:</p>
<pre><code>   3
   1
   2
</code></pre>
<p>In the first Iteration your generator stops at '3', for the following iterations it just goes on as the superclass normally would. </p>
<p>This Question provides a really good and lengthy explanation of generators, iterators and the yield- keyword:
<a href="https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained">What does the "yield" keyword do in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is correct.<br/>
Or rather, I don't see problem in it and it apparently runs correctly.</p>
<p>The only thing I can think of is the following one.</p>
<p>.</p>
<h3>Post-scriptum</h3>
<p>For new-style classes, see other answers that use <strong>super()</strong><br/>
But <strong>super()</strong> only works for new-style classes
Anyway, this answer could be useful at least, but only, for classic-style classes.   </p>
<p>.</p>
<p>When the interpreter arrives on the instruction <code>for n in A.gen(self):</code>, it must find the function <strong>A.gen</strong>.  </p>
<p>The notation <code>A.gen</code> doesn't mean that the object <strong>A.gen</strong> is INSIDE the object <strong>A</strong>.<br/>
The object <strong>A.gen</strong> is SOMEWHERE in the memory and the interpreter will know where to find it by obtaining the needed information (an address) from <code>A.__dict__['gen']</code> , in which <code>A.__dict__</code> is the namespace of <strong>A</strong>.<br/>
So, finding the function object <strong>A.gen</strong> in the memory requires a lookup in <strong>A.__<em>dict</em>__</strong> </p>
<p>But to perform this lookup, the interpreter must first find the object <strong>A</strong> itself.<br/>
So, when it arrives on the instruction <code>for n in A.gen(self):</code> , it first searches if the identifier  <code>A</code> is among the local  identifiers, that is to say it searches for the string '<em>A</em>' in the local namespace of the function (of which I don't know the name).<br/>
Since it is not, the interpreter goes outside the function and searches for this identifier at the module level, in the global namespace (which is <strong>globals()</strong> )</p>
<p>At this point, it may be that the global namespace would have hundreds or thousands of attributes names among which to perform the lookup for '<em>A</em>'. </p>
<p>However, <strong>A</strong> has very few attributes: its <code>__dict__</code> 's keys are only '_ <em>module</em> _' , '<em>gen</em>' and '_ <em>doc</em> _' (to see that, make <code>print A.__dict__</code> )<br/>
So, it would be a pity that the little search for the string '<em>gen</em>' in <strong>A._<em>dict</em>_</strong> should be done after a search among hundreds of items in the dictionary-namespace <strong>globals()</strong> of the module level.</p>
<p>.</p>
<p>That's why I suggest another way to make the interpreter able to find the function <strong>A.gen</strong></p>
<pre><code>class A:
    def gen(self):
        yield 1
        yield 2

class BB(A):
    def gen(self):
        yield 3
        for n in self.__class__.__bases__[0].gen(self):
            yield n


bb = BB()
print list(bb.gen())  # prints [3, 1, 2]
</code></pre>
<p><strong>self._<em>class</em>_</strong> is the class from which has been instanciated the instance, that is to say it is <strong>Bu</strong> </p>
<p><strong>self._<em>class</em>_._<em>bases</em>_</strong> is a tuple containing the base classes of <strong>Bu</strong><br/>
Presently there is only one element in this tuple , so <strong>self._<em>class</em>_._<em>bases</em>_[0]</strong>  is <strong>A</strong> </p>
<p><code>__class__</code> and <code>__bases__</code> are names of special attributes that aren't listed in <strong>_<em>dict</em>_</strong> ;<br/>
In fact <strong>_<em>class</em>_</strong> , <strong>_<em>bases</em>_</strong> and <strong>_<em>dict</em>_</strong> are special attributes of similar nature, they are  Python-provided attributes, see:<br/>
<a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html" rel="nofollow">http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html</a></p>
<p>.</p>
<p>Well, what I mean , in the end, is that there are few elements in <strong>self._<em>class</em>_</strong>  and in  <strong>self._<em>class</em>_._<em>bases</em>_</strong>  , so it is rational to think that the successive lookups in these objects to finally find the way to access to <strong>A.gen</strong> will be faster than the lookup to search for '<em>gen</em>' in the global namespace in case this one contains hundreds of elements.</p>
<p>Maybe that's trying to do too much optimization, maybe not.<br/>
This answer is mainly  to give information on the underlying implied mechanisms, that I personally find interesting to know.</p>
<p>.</p>
<h2>Edit</h2>
<p>You can obtain the same as your code with a more concise instruction</p>
<pre><code>class A:
    def gen(self):
        yield 1
        yield 2

class Bu(A):
    def gen(self):
        yield 3
        for n in A.gen(self):
            yield n

b = Bu()
print 'list(b.gen()) ==',list(b.gen())

from itertools import chain
w = chain(iter((3,)),xrange(1,3))
print 'list(w)       ==',list(w)
</code></pre>
<p>produces</p>
<pre><code>list(b.gen()) == [3, 1, 2]
list(w)       == [3, 1, 2]
</code></pre>
</div>
<span class="comment-copy">@J.Barber +1 Your answer is better than mine: use of <b>super()</b> is lighter. But the correct syntax is <code>return itertools.chain([3], super(B,self).gen())</code> . And moreover <b>super()</b> only works for new-style classes; that means that class <b>A</b> must be defined with <code>class A(object)</code></span>
<span class="comment-copy">@eyquem The syntax used in the question, and my answer, is for Python 3. There are no classic classes in Python 3, so <code>class A</code> is equivalent to <code>class A(object)</code>.</span>
<span class="comment-copy">@eyquem: In Python 3, <code>super()</code> is perfectly fine (recommended in fact). Which also did away with old-style classes. And since OP used <code>super()</code> himself, I'd say it's safe to assume 3.x.</span>
<span class="comment-copy">@Barber Thank you for these precisions. I don't think enough to the differences between Python 3 and Python 2. There was indeed a tag that signals it is in Python 3, but I didn't remarked it. The syntax now present in the question isn't the one that was used initially used. There was <code>for n in A.gen():</code></span>
<span class="comment-copy">@delnan Now there's <code>super().gen()</code> in the question but it's because it has been edited. I wouldn't have run into such a long answer if I hadn't read <code>A.gen()</code></span>
<span class="comment-copy">Thanks for your reply. My question is about the use of yield in the second class, not the use of super(), but I've updated to use better code.</span>
<span class="comment-copy">I hope it's a bit more helpful.</span>
<span class="comment-copy">@Ria The correct syntax is <code>return itertools.chain([3], super(B,self).gen())</code> . And moreover <b>super()</b> only works for new-style classes; that means that class <b>A</b> must be defined with <code>class A(object)</code> . +1 anyway for super()</span>
<span class="comment-copy">Thanks for the detailed information about use of super and optimizing to find the parent class method. Will certainly keep that in mind.</span>
