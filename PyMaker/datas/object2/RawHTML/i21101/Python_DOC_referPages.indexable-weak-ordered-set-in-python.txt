<div class="post-text" itemprop="text">
<p>I was wondering if there is an easy way to build an indexable weak ordered set in Python.  I tried to build one myself.  Here's what I came up with:</p>
<pre><code>"""
An indexable, ordered set of objects, which are held by weak reference.
"""
from nose.tools import *
import blist
import weakref


class WeakOrderedSet(blist.weaksortedset):
    """
    A blist.weaksortedset whose key is the insertion order.
    """
    def __init__(self, iterable=()):
        self.insertion_order = weakref.WeakKeyDictionary()  # value_type to int
        self.last_key = 0
        super().__init__(key=self.insertion_order.__getitem__)
        for item in iterable:
            self.add(item)

    def __delitem__(self, index):
        values = super().__getitem__(index)
        super().__delitem__(index)
        if not isinstance(index, slice):
            # values is just one element
            values = [values]
        for value in values:
            if value not in self:
                del self.insertion_order[value]

    def add(self, value):
        # Choose a key so that value is on the end.
        if value not in self.insertion_order:
            key = self.last_key
            self.last_key += 1
            self.insertion_order[value] = key
        super().add(value)

    def discard(self, value):
        super().discard(value)
        if value not in self:
            del self.insertion_order[value]

    def remove(self, value):
        super().remove(value)
        if value not in self:
            del self.insertion_order[value]

    def pop(self, *args, **kwargs):
        value = super().pop(*args, **kwargs)
        if value not in self:
            del self.insertion_order[value]

    def clear(self):
        super().clear()
        self.insertion_order.clear()

    def update(self, *args):
        for arg in args:
            for item in arg:
                self.add(item)


if __name__ == '__main__':
    class Dummy:
        def __init__(self, value):
            self.value = value

    x = [Dummy(i) for i in range(10)]
    w = WeakOrderedSet(reversed(x))
    del w[2:8]
    assert_equals([9,8,1,0], [i.value for i in w])
    del w[0]
    assert_equals([8,1,0], [i.value for i in w])
    del x
    assert_equals([], [i.value for i in w])
</code></pre>
<p>Is there an easier way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to is to take advantage of existing components in the standard library.</p>
<p><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> and the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet" rel="nofollow noreferrer">MutableSet</a> <a href="https://docs.python.org/3/glossary.html#term-abstract-base-class" rel="nofollow noreferrer">ABC</a> make it easy to write an OrderedSet.</p>
<p>Likewise, you can reuse the existing <a href="https://docs.python.org/3/library/weakref.html#weakref.WeakSet" rel="nofollow noreferrer">weakref.WeakSet</a> and replace its underlying <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">set()</a> with an OrderedSet.</p>
<p>Indexing is more difficult to achieve -- these easiest way it to convert it to a list when needed.  That is necessary because sets and dicts are intrinsically sparse.</p>
<pre><code>import collections.abc
import weakref

class OrderedSet(collections.abc.MutableSet):
    def __init__(self, values=()):
        self._od = collections.OrderedDict().fromkeys(values)
    def __len__(self):
        return len(self._od)
    def __iter__(self):
        return iter(self._od)
    def __contains__(self, value):
        return value in self._od
    def add(self, value):
        self._od[value] = None
    def discard(self, value):
        self._od.pop(value, None)

class OrderedWeakrefSet(weakref.WeakSet):
    def __init__(self, values=()):
        super(OrderedWeakrefSet, self).__init__()
        self.data = OrderedSet()
        for elem in values:
            self.add(elem)
</code></pre>
<p>Use it like this:</p>
<pre><code>&gt;&gt;&gt; names = OrderedSet(['Alice', 'Bob', 'Carol', 'Bob', 'Dave', 'Edna'])
&gt;&gt;&gt; len(names)
5
&gt;&gt;&gt; 'Bob' in names
True
&gt;&gt;&gt; s = list(names)
&gt;&gt;&gt; s[2]
'Carol'
&gt;&gt;&gt; s[4]
'Edna'
</code></pre>
<p>Note as of Python 3.7, regular dicts are guaranteed to be ordered, so you can substitute <code>dict</code> for <code>OrderedDict</code> in this recipe and it will all work fine :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Raymond has a great and succinct answer, as usual, but I actually came here a while back interested in the indexable part, more than the weakref part. I eventually built my own answer, which became <a href="http://boltons.readthedocs.org/en/latest/setutils.html" rel="nofollow">the <code>IndexedSet</code> type in the boltons utility library</a>. Basically, it's all the best parts of the <code>list</code> and <code>set</code> APIs, combined. </p>
<pre><code>&gt;&gt;&gt; x = IndexedSet(list(range(4)) + list(range(8)))
&gt;&gt;&gt; x
IndexedSet([0, 1, 2, 3, 4, 5, 6, 7])
&gt;&gt;&gt; x - set(range(2))
IndexedSet([2, 3, 4, 5, 6, 7])
&gt;&gt;&gt; x[-1]
7
&gt;&gt;&gt; fcr = IndexedSet('freecreditreport.com')
&gt;&gt;&gt; ''.join(fcr[:fcr.index('.')])
'frecditpo'
</code></pre>
<p>If the weakref part is critical you can likely add it via inheritance or direct modification of a copy of the code (the module is standalone, pure-Python, and 2/3 compatible).</p>
</div>
<span class="comment-copy">Very nice!  Where is the <code>data</code> member of <code>weakref.WeakSet</code> documented?</span>
<span class="comment-copy">The docs for WeakSet are incomplete (almost non-existent).</span>
<span class="comment-copy">Pypy uses the same (or very similar) <code>WeakSet</code> implementation, so this works there as well (<code>gc.collect()</code> is required to deleted weakrefs).</span>
<span class="comment-copy">Hi @RaymondHettinger I am a beginner python user &amp; I tried to use this code, I tried to index the set but got "TypeError: 'OrderedSet' object does not support indexing". I did A =OrderedSet({1,2,3,4,5,0,23,99,123,3,21,31,412,256}). Can you please point me what to do ?</span>
<span class="comment-copy">@RaymondHettinger I am a big fan of you! I have seen all your python Videos on youtube, feeling blessed that you replied back to my comment, looking forward to learning more from you. :-)</span>
