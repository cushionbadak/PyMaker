<div class="post-text" itemprop="text">
<p>How do I get specific path sections from a url? For example, I want a function which operates on this: </p>
<pre><code>http://www.mydomain.com/hithere?image=2934
</code></pre>
<p>and returns "hithere"</p>
<p>or operates on this:</p>
<pre><code>http://www.mydomain.com/hithere/something/else
</code></pre>
<p>and returns the same thing ("hithere")</p>
<p>I know this will probably use urllib or urllib2 but I can't figure out from the docs how to get only a section of the path.</p>
</div>
<div class="post-text" itemprop="text">
<p>Extract the path component of the URL with <a href="https://docs.python.org/2/library/urlparse.html" rel="noreferrer">urlparse</a>:</p>
<pre><code>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; path = urlparse.urlparse('http://www.example.com/hithere/something/else').path
&gt;&gt;&gt; path
'/hithere/something/else'
</code></pre>
<p>Split the path into components with <a href="http://docs.python.org/library/os.path.html" rel="noreferrer">os.path</a>.split:</p>
<pre><code>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.split(path)
('/hithere/something', 'else')
</code></pre>
<p>The dirname and basename functions give you the two pieces of the split; perhaps use dirname in a while loop:</p>
<pre><code>&gt;&gt;&gt; while os.path.dirname(path) != '/':
...     path = os.path.dirname(path)
... 
&gt;&gt;&gt; path
'/hithere'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best option is to use the <a href="https://docs.python.org/3/library/undoc.html"><code>posixpath</code></a> module when working with the path component of URLs. This module has the same interface as <a href="https://docs.python.org/3/library/os.path.html#module-os.path"><code>os.path</code></a> and consistently operates on POSIX paths when used on POSIX and Windows NT based platforms.</p>
<hr/>
<p>Sample Code:</p>
<pre><code>#!/usr/bin/env python3

import urllib.parse
import sys
import posixpath
import ntpath
import json

def path_parse( path_string, *, normalize = True, module = posixpath ):
    result = []
    if normalize:
        tmp = module.normpath( path_string )
    else:
        tmp = path_string
    while tmp != "/":
        ( tmp, item ) = module.split( tmp )
        result.insert( 0, item )
    return result

def dump_array( array ):
    string = "[ "
    for index, item in enumerate( array ):
        if index &gt; 0:
            string += ", "
        string += "\"{}\"".format( item )
    string += " ]"
    return string

def test_url( url, *, normalize = True, module = posixpath ):
    url_parsed = urllib.parse.urlparse( url )
    path_parsed = path_parse( urllib.parse.unquote( url_parsed.path ),
        normalize=normalize, module=module )
    sys.stdout.write( "{}\n  --[n={},m={}]--&gt;\n    {}\n".format( 
        url, normalize, module.__name__, dump_array( path_parsed ) ) )

test_url( "http://eg.com/hithere/something/else" )
test_url( "http://eg.com/hithere/something/else/" )
test_url( "http://eg.com/hithere/something/else/", normalize = False )
test_url( "http://eg.com/hithere/../else" )
test_url( "http://eg.com/hithere/../else", normalize = False )
test_url( "http://eg.com/hithere/../../else" )
test_url( "http://eg.com/hithere/../../else", normalize = False )
test_url( "http://eg.com/hithere/something/./else" )
test_url( "http://eg.com/hithere/something/./else", normalize = False )
test_url( "http://eg.com/hithere/something/./else/./" )
test_url( "http://eg.com/hithere/something/./else/./", normalize = False )

test_url( "http://eg.com/see%5C/if%5C/this%5C/works", normalize = False )
test_url( "http://eg.com/see%5C/if%5C/this%5C/works", normalize = False,
    module = ntpath )
</code></pre>
<hr/>
<p>Code output:</p>
<pre class="lang-none prettyprint-override"><code>http://eg.com/hithere/something/else
  --[n=True,m=posixpath]--&gt;
    [ "hithere", "something", "else" ]
http://eg.com/hithere/something/else/
  --[n=True,m=posixpath]--&gt;
    [ "hithere", "something", "else" ]
http://eg.com/hithere/something/else/
  --[n=False,m=posixpath]--&gt;
    [ "hithere", "something", "else", "" ]
http://eg.com/hithere/../else
  --[n=True,m=posixpath]--&gt;
    [ "else" ]
http://eg.com/hithere/../else
  --[n=False,m=posixpath]--&gt;
    [ "hithere", "..", "else" ]
http://eg.com/hithere/../../else
  --[n=True,m=posixpath]--&gt;
    [ "else" ]
http://eg.com/hithere/../../else
  --[n=False,m=posixpath]--&gt;
    [ "hithere", "..", "..", "else" ]
http://eg.com/hithere/something/./else
  --[n=True,m=posixpath]--&gt;
    [ "hithere", "something", "else" ]
http://eg.com/hithere/something/./else
  --[n=False,m=posixpath]--&gt;
    [ "hithere", "something", ".", "else" ]
http://eg.com/hithere/something/./else/./
  --[n=True,m=posixpath]--&gt;
    [ "hithere", "something", "else" ]
http://eg.com/hithere/something/./else/./
  --[n=False,m=posixpath]--&gt;
    [ "hithere", "something", ".", "else", ".", "" ]
http://eg.com/see%5C/if%5C/this%5C/works
  --[n=False,m=posixpath]--&gt;
    [ "see\", "if\", "this\", "works" ]
http://eg.com/see%5C/if%5C/this%5C/works
  --[n=False,m=ntpath]--&gt;
    [ "see", "if", "this", "works" ]
</code></pre>
<hr/>
<p>Notes:</p>
<ul>
<li>On Windows NT based platforms <a href="https://docs.python.org/3/library/os.path.html#module-os.path"><code>os.path</code></a> is <a href="https://docs.python.org/3/library/undoc.html"><code>ntpath</code></a></li>
<li>On Unix/Posix based platforms <a href="https://docs.python.org/3/library/os.path.html#module-os.path"><code>os.path</code></a> is <a href="https://docs.python.org/3/library/undoc.html"><code>posixpath</code></a></li>
<li><a href="https://docs.python.org/3/library/undoc.html"><code>ntpath</code></a> will not handle backslashes (<code>\</code>) correctly (see last two cases in code/output) - which is why <a href="https://docs.python.org/3/library/undoc.html"><code>posixpath</code></a> is recommended.</li>
<li>remember to use <a href="https://docs.python.org/dev/library/urllib.parse.html#urllib.parse.unquote"><code>urllib.parse.unquote</code></a></li>
<li>consider using <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath"><code>posixpath.normpath</code></a></li>
<li>The semantics of multiple path separators (<code>/</code>) is not defined by <a href="http://tools.ietf.org/html/rfc3986">RFC 3986</a>. However, <a href="https://docs.python.org/3/library/undoc.html"><code>posixpath</code></a> collapses multiple adjacent path separators  (i.e. it treats <code>///</code>, <code>//</code> and <code>/</code> the same)</li>
<li>Even though POSIX and URL paths have similar syntax and semantics, they are not identical.</li>
</ul>
<hr/>
<p>Normative References:</p>
<ul>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_12">IEEE Std 1003.1, 2013 - Vol. 1: Base Definitions - Section 4.12: Pathname Resolution</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_node/File-Names.html#File-Names">The GNU C Library Reference Manual - Section 11.2: File Names</a></li>
<li><a href="http://tools.ietf.org/html/rfc3986#section-3.3">IETF RFC 3986: Uniform Resource Identifier (URI): Generic Syntax - Section 3.3: Path</a></li>
<li><a href="http://tools.ietf.org/html/rfc3986#section-6">IETF RFC 3986: Uniform Resource Identifier (URI): Generic Syntax - Section 6: Normalization and Comparison</a></li>
<li><a href="http://en.wikipedia.org/wiki/URL_normalization">Wikipedia: URL normalization</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4+ solution: </p>
<pre class="lang-py prettyprint-override"><code>from urllib.parse import unquote, urlparse
from pathlib import PurePosixPath

url = 'http://www.example.com/hithere/something/else'

PurePosixPath(
    unquote(
        urlparse(
            url
        ).path
    )
).parts[1]

# returns 'hithere' (the same for the URL with parameters)

# parts holds ('/', 'hithere', 'something', 'else')
#               0    1          2            3

</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note in Python3 import has changed to <code>from urllib.parse import urlparse</code> See <a href="https://docs.python.org/3.6/library/urllib.parse.html?highlight=urlparse#url-parsing" rel="nofollow noreferrer">documentation</a>. Here is an example:</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import urlparse
&gt;&gt;&gt; url = 's3://bucket.test/my/file/directory'
&gt;&gt;&gt; p = urlparse(url)
&gt;&gt;&gt; p
ParseResult(scheme='s3', netloc='bucket.test', path='/my/file/directory', params='', query='', fragment='')
&gt;&gt;&gt; p.scheme
's3'
&gt;&gt;&gt; p.netloc
'bucket.test'
&gt;&gt;&gt; p.path
'/my/file/directory'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import urlparse

output = urlparse.urlparse('http://www.example.com/temp/something/happen/index.html').path

output

'/temp/something/happen/index.html'

Split the path -- inbuilt rpartition func of string 

output.rpartition('/')[0]

'/temp/something/happen'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A combination of <a href="https://docs.python.org/2/library/urlparse.html" rel="nofollow">urlparse</a> and <a href="https://docs.python.org/2/library/os.path.html#os.path.split" rel="nofollow">os.path.split</a> will do the trick. The following script stores all sections of a url in a list, backwards.</p>
<pre><code>import os.path, urlparse

def generate_sections_of_url(url):
    path = urlparse.urlparse(url).path
    sections = []; temp = "";
    while path != '/':
        temp = os.path.split(path)
        path = temp[0]
        sections.append(temp[1])
    return sections
</code></pre>
<p>This would return: ["else", "something", "hithere"]</p>
</div>
<span class="comment-copy">The URL syntax is something like: <code>scheme://domain:port/path?query_string#fragment_id</code>, so 'hithere' is the whole <code>path</code> in the first case and 1 section of the it in the second. Just urlparse it then 'hithere' is going to be path.split('/')[1]</span>
<span class="comment-copy">wouldn't it be  <code>path.split('/')[0]</code>? (the first item of the list)</span>
<span class="comment-copy">No, because the path starts with a '/' so [0] is an empty string. I.e. <a href="http://ideone.com/hJRxk" rel="nofollow noreferrer">ideone.com/hJRxk</a></span>
<span class="comment-copy">Does urllib not have any function that can do this without doing a bunch of string parsing/splitting/looping? I thought there'd be a shortcut...</span>
<span class="comment-copy">Don't use os.path.split for urls as it is platform dependent. That code will fail on Windows because it expects \ as a delimiter!</span>
<span class="comment-copy">@Viorel This is incorrect. I just tested. It would be wrong to use <code>os.path.join</code> since it would use the wrong delimiter, but the <code>split</code> method can still split on <code>/</code>. In fact, you can type all your directory paths for Windows using <code>/</code> as the directory separator in Python. Using <code>/</code> as the directory separator works in a lot of places on Windows, not just in Python.</span>
<span class="comment-copy">os.path.split may happen to work but I think it would be bad practice to use it here, as it is clearly intended for os paths and not url paths.</span>
<span class="comment-copy"><code>filter(bool, path.split("/"))</code>, in case there is a trailing "/" char</span>
<span class="comment-copy">Python 3.4+ solution: <code>url_path = PurePosixPath(urllib.parse.unquote(urllib.parse.urlparse(url‌​).path))</code>.</span>
<span class="comment-copy">@Navin worthwhile to post this as an answer</span>
<span class="comment-copy">@bahmait Done: <a href="https://stackoverflow.com/a/53076133/703382">stackoverflow.com/a/53076133/703382</a></span>
