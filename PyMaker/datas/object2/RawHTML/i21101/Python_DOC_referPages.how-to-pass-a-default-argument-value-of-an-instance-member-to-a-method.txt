<div class="post-text" itemprop="text">
<p>I want to pass a default argument to an instance method using the value of an attribute of the instance:</p>
<pre><code>class C:
    def __init__(self, format):
        self.format = format

    def process(self, formatting=self.format):
        print(formatting)
</code></pre>
<p>When trying that, I get the following error message:</p>
<pre class="lang-none prettyprint-override"><code>NameError: name 'self' is not defined
</code></pre>
<p>I want the method to behave like this:</p>
<pre><code>C("abc").process()       # prints "abc"
C("abc").process("xyz")  # prints "xyz"
</code></pre>
<p>What is the problem here, why does this not work? And how could I make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't really define this as the default value, since the default value is evaluated when the method is defined which is before any instances exist. An easy work-around is to do something like this:</p>
<pre><code>class C:
    def __init__(self, format):
        self.format = format

    def process(self, formatting=None):
        formatting = formatting if formatting is not None else self.format
        print(formatting)
</code></pre>
<p><code>self.format</code> will only be used if <code>formatting</code> is <code>None</code>.</p>
<hr/>
<p>To demonstrate the point of how default values work, see this example:</p>
<pre><code>def mk_default():
    print("mk_default has been called!")

def myfun(foo=mk_default()):
    print("myfun has been called.")

print("about to test functions")
myfun("testing")
myfun("testing again")
</code></pre>
<p>And the output here:</p>
<pre><code>mk_default has been called!
about to test functions
myfun has been called.
myfun has been called.
</code></pre>
<p>Notice how <code>mk_default</code> was called only once, and that happened before the function was ever called!</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, the name <code>self</code> is <strong>not</strong> special. It's just a convention for the parameter name, which is why there is a <code>self</code> parameter in <code>__init__</code>. (Actually, <code>__init__</code> is not very special either, and in particular it does <strong>not</strong> actually create the object... that's a longer story)</p>
<p><code>C("abc").process()</code> creates a <code>C</code> instance, looks up the <code>process</code> method in the <code>C</code> class, and calls that method with the <code>C</code> instance as the first parameter. So it will end up in the <code>self</code> parameter if you provided it.</p>
<p>Even if you had that parameter, though, you would not be allowed to write something like <code>def process(self, formatting = self.formatting)</code>, because <code>self</code> is not in scope yet at the point where you set the default value. In Python, the default value for a parameter is calculated when the function is compiled, and "stuck" to the function. (This is the same reason why, if you use a default like <code>[]</code>, that list will remember changes between calls to the function.)</p>
<blockquote>
<p>How could I make this work?</p>
</blockquote>
<p>The traditional way is to use <code>None</code> as a default, and check for that value and replace it inside the function. You may find it is a little safer to make a special value for the purpose (an <code>object</code> instance is all you need, as long as you hide it so that the calling code does not use the same instance) instead of <code>None</code>. Either way, you should check for this value with <code>is</code>, not <code>==</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to use <code>self.format</code> as a default argument this implies that the method needs to be instance specific (i.e. there is no way to define this at class level). Instead you can define the specific method during the class' <code>__init__</code> for example. This is where you have access to instance specific attributes.</p>
<p>One approach is to use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> in order to obtain an updated (specific) version of the method:</p>
<pre><code>from functools import partial


class C:
    def __init__(self, format):
        self.format = format
        self.process = partial(self.process, formatting=self.format)

    def process(self, formatting):
        print(formatting)


c = C('default')
c.process()
# c.process('custom')  # Doesn't work!
c.process(formatting='custom')
</code></pre>
<p>Note that with this approach you can only pass the corresponding argument by keyword, since if you provided it by position, this would create a conflict in <code>partial</code>.</p>
<p>Another approach is to define and set the method in <code>__init__</code>:</p>
<pre><code>from types import MethodType


class C:
    def __init__(self, format):
        self.format = format

        def process(self, formatting=self.format):
            print(formatting)

        self.process = MethodType(process, self)


c = C('test')
c.process()
c.process('custom')
c.process(formatting='custom')
</code></pre>
<p>This allows also passing the argument by position, however the method resolution order becomes less apparent (which can affect the IDE inspection for example, but I suppose there are IDE specific workarounds for that).</p>
<p>Another approach would be to create a custom type for these kind of "instance attribute defaults" together with a special decorator that performs the corresponding <code>getattr</code> argument filling:</p>
<pre><code>import inspect


class Attribute:
    def __init__(self, name):
        self.name = name


def decorator(method):
    signature = inspect.signature(method)

    def wrapper(self, *args, **kwargs):
        bound = signature.bind(*((self,) + args), **kwargs)
        bound.apply_defaults()
        bound.arguments.update({k: getattr(self, v.name) for k, v in bound.arguments.items()
                                if isinstance(v, Attribute)})
        return method(*bound.args, **bound.kwargs)

    return wrapper


class C:
    def __init__(self, format):
        self.format = format

    @decorator
    def process(self, formatting=Attribute('format')):
        print(formatting)


c = C('test')
c.process()
c.process('custom')
c.process(formatting='custom')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"self" need to be pass as the first argument to any class functions if you want them to behave as non-static methods.</p>
<p>it refers to the object itself. You could not pass "self" as default argument as it's position is fix as first argument.</p>
<p>In your case instead of "formatting=self.format" use "formatting=None" and then assign value from code as below:</p>
<p>[EDIT]</p>
<pre><code>class c:
        def __init__(self, cformat):
            self.cformat = cformat

        def process(self, formatting=None):
            print "Formating---",formatting
            if formatting == None:
                formatting = self.cformat
                print formatting
                return formatting
            else:
                print formatting
                return formatting

c("abc").process()          # prints "abc"
c("abc").process("xyz")     # prints "xyz"
</code></pre>
<p>Note : do not use "format" as variable name, 'cause it is built-in function in python</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't access self in the method definition. My workaround is this -</p>
<pre><code>class Test:
  def __init__(self):
    self.default_v = 20

  def test(self, v=None):
    v = v or self.default_v
    print(v)

Test().test()
&gt; 20

Test().test(10)
&gt; 10
</code></pre>
</div>
<span class="comment-copy">do not use format as variable name, as it is built-in function in python.</span>
<span class="comment-copy">Editing the mistake of <code>self</code> in <code>process method</code></span>
<span class="comment-copy">I believe <code>mk_default</code> was called before the functions were called since <code>foo=mk_default()</code> called it, due to the parenthesis. Shouldn't it be <code>foo=mk_default</code>? Then your example might change to <code>myfun("testing")</code> followed by <code>myfun()</code>.</span>
<span class="comment-copy">Is this still the recommended workaround?</span>
<span class="comment-copy">Note that <code>formatting = formatting or self.format</code>will set <code>formatting</code> to <code>self.format</code> if <code>formatting</code> is a falsey value, such as 0. This just bite me. A safer way is to type <code>formatting = formatting if formatting is not None else self.format</code> or equivalent.</span>
<span class="comment-copy">@Godsmith, good point!  I've updated my answer to account for this.. thanks!</span>
<span class="comment-copy">Your workaround doesn't meets the desired output on using None.</span>
<span class="comment-copy">If <code>None</code> is a valid value for <code>formatting</code>, then you will have to pick something else, like I explained.</span>
<span class="comment-copy">Well, I corrected the <code>self</code> problem. But your answer doesn't meets the desired output.</span>
<span class="comment-copy">check edited block, it would help you.</span>
