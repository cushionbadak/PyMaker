<div class="post-text" itemprop="text">
<p>I'm confused on what an immutable type is. I know the <code>float</code> object is considered to be immutable, with this type of example from my book:</p>
<pre><code>class RoundFloat(float):
    def __new__(cls, val):
        return float.__new__(cls, round(val, 2))
</code></pre>
<p>Is this considered to be immutable because of the class structure / hierarchy?, meaning <code>float</code> is at the top of the class and is its own method call. Similar to this type of example (even though my book says <code>dict</code> is mutable):</p>
<pre><code>class SortedKeyDict(dict):
    def __new__(cls, val):
        return dict.__new__(cls, val.clear())
</code></pre>
<p>Whereas something mutable has methods inside the class, with this type of example:</p>
<pre><code>class SortedKeyDict_a(dict):
    def example(self):
        return self.keys()
</code></pre>
<hr/>
<p>Also, for the last <code>class(SortedKeyDict_a)</code>, if I pass this type of set to it:</p>
<pre><code>d = (('zheng-cai', 67), ('hui-jun', 68),('xin-yi', 2))
</code></pre>
<p>without calling the <code>example</code> method, it returns a dictionary. The <code>SortedKeyDict</code> with <code>__new__</code> flags it as an error. I tried passing integers to the <code>RoundFloat</code> class with <code>__new__</code> and it flagged no errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>What? Floats are immutable? But can't I do</p>
<pre><code>x = 5.0
x += 7.0
print x # 12.0
</code></pre>
<p>Doesn't that "mut" x?</p>
<p>Well you agree strings are immutable right? But you can do the same thing.</p>
<pre><code>s = 'foo'
s += 'bar'
print s # foobar
</code></pre>
<p>The value of the variable changes, but it changes by changing what the variable refers to. A mutable type can change that way, and it can <em>also</em> change "in place".</p>
<p>Here is the difference.</p>
<pre><code>x = something # immutable type
print x
func(x)
print x # prints the same thing

x = something # mutable type
print x
func(x)
print x # might print something different

x = something # immutable type
y = x
print x
# some statement that operates on y
print x # prints the same thing

x = something # mutable type
y = x
print x
# some statement that operates on y
print x # might print something different
</code></pre>
<p>Concrete examples</p>
<pre><code>x = 'foo'
y = x
print x # foo
y += 'bar'
print x # foo

x = [1, 2, 3]
y = x
print x # [1, 2, 3]
y += [3, 2, 1]
print x # [1, 2, 3, 3, 2, 1]

def func(val):
    val += 'bar'

x = 'foo'
print x # foo
func(x)
print x # foo

def func(val):
    val += [3, 2, 1]

x = [1, 2, 3]
print x # [1, 2, 3]
func(x)
print x # [1, 2, 3, 3, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to understand that Python represents all its data as objects. Some of these objects like lists and dictionaries are mutable, meaning you can change their content without changing their identity. Other objects like integers, floats, strings and tuples are objects that can not be changed. 
An easy way to understand that is if you have a look at an objects ID. </p>
<p>Below you see a string that is immutable. You can not change its content. It will raise a <code>TypeError</code> if you try to change it. Also, if we assign new content, a new object is created instead of the contents being modified.</p>
<pre><code>&gt;&gt;&gt; s = "abc"
&gt;&gt;&gt;id(s)
4702124
&gt;&gt;&gt; s[0] 
'a'
&gt;&gt;&gt; s[0] = "o"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object does not support item assignment
&gt;&gt;&gt; s = "xyz"
&gt;&gt;&gt;id(s)
4800100
&gt;&gt;&gt; s += "uvw"
&gt;&gt;&gt;id(s)
4800500
</code></pre>
<p>You can do that with a list and it will not change the objects identity</p>
<pre><code>&gt;&gt;&gt; i = [1,2,3]
&gt;&gt;&gt;id(i)
2146718700
&gt;&gt;&gt; i[0] 
1
&gt;&gt;&gt; i[0] = 7
&gt;&gt;&gt; id(i)
2146718700
</code></pre>
<p>To read more about Python's data model you could have a look at the Python language reference:</p>
<ul>
<li><a href="https://docs.python.org/2/reference/datamodel.html" rel="noreferrer">Python 2 datamodel</a></li>
<li><a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">Python 3 datamodel</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Common immutable type: </p>
<ol>
<li>numbers: <code>int()</code>, <code>float()</code>, <code>complex()</code></li>
<li>immutable sequences: <code>str()</code>, <code>tuple()</code>, <code>frozenset()</code>, <code>bytes()</code></li>
</ol>
<p>Common mutable type (almost everything else):</p>
<ol>
<li>mutable sequences: <code>list()</code>, <code>bytearray()</code></li>
<li>set type: <code>set()</code></li>
<li>mapping type: <code>dict()</code></li>
<li>classes, class instances</li>
<li>etc.</li>
</ol>
<p>One trick to quickly test if a type is mutable or not, is to use <code>id()</code> built-in function. </p>
<p>Examples, using on integer,</p>
<pre><code>&gt;&gt;&gt; i = 1
&gt;&gt;&gt; id(i)
***704
&gt;&gt;&gt; i += 1
&gt;&gt;&gt; i
2
&gt;&gt;&gt; id(i)
***736 (different from ***704)
</code></pre>
<p>using on list,</p>
<pre><code>&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; id(a)
***416
&gt;&gt;&gt; a.append(2)
&gt;&gt;&gt; a
[1, 2]
&gt;&gt;&gt; id(a)
***416 (same with the above id)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, whether a class has methods or what it's class structure is has nothing to do with mutability.</p>
<p><code>int</code>s and <code>float</code>s are <em>immutable</em>. If I do</p>
<pre><code>a = 1
a += 5
</code></pre>
<p>It points the name <code>a</code> at a <code>1</code> somewhere in memory on the first line. On the second line, it looks up that <code>1</code>, adds <code>5</code>, gets <code>6</code>, then points <code>a</code> at that <code>6</code> in memory -- it didn't <em>change</em> the <code>1</code> to a <code>6</code> in any way. The same logic applies to the following examples, using other <em>immutable</em> types:</p>
<pre><code>b = 'some string'
b += 'some other string'
c = ('some', 'tuple')
c += ('some', 'other', 'tuple')
</code></pre>
<p>For <em>mutable</em> types, I can do thing that actallly <em>change the value where it's stored in memory</em>. With:</p>
<pre><code>d = [1, 2, 3]
</code></pre>
<p>I've created a list of the locations of <code>1</code>, <code>2</code>, and <code>3</code> in memory. If I then do</p>
<pre><code>e = d
</code></pre>
<p>I just point <code>e</code> to the <em>same <code>list</code></em> <code>d</code> points at. I can then do:</p>
<pre><code>e += [4, 5]
</code></pre>
<p>And the list that both <code>e</code> and <code>d</code> points at will be updated to also have the locations of <code>4</code> and <code>5</code> in memory.</p>
<p>If I go back to an <em>immutable</em> type and do that with a <code>tuple</code>:</p>
<pre><code>f = (1, 2, 3)
g = f
g += (4, 5)
</code></pre>
<p>Then <code>f</code> still only points to the <em>original <code>tuple</code></em> -- you've pointed <code>g</code> at an <em>entirely new <code>tuple</code></em>.</p>
<p>Now, with your example of </p>
<pre><code>class SortedKeyDict(dict):
    def __new__(cls, val):
        return dict.__new__(cls, val.clear())
</code></pre>
<p>Where you pass </p>
<pre><code>d = (('zheng-cai', 67), ('hui-jun', 68),('xin-yi', 2))
</code></pre>
<p>(which is a <code>tuple</code> of <code>tuples</code>) as <code>val</code>, you're getting an error because <code>tuple</code>s don't have a <code>.clear()</code> method -- you'd have to pass <code>dict(d)</code> as <code>val</code> for it to work, in which case you'll get an empty <code>SortedKeyDict</code> as a result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Whether an object is mutable or not depends on its type. This doesn't depend on whether or not it has certain methods, nor on the structure of the class hierarchy.</p>
<p>User-defined types (i.e. classes) are generally mutable. There are some exceptions, such as simple sub-classes of an immutable type. Other immutable types include some built-in types such as <code>int</code>, <code>float</code>, <code>tuple</code> and <code>str</code>, as well as some Python classes implemented in C.</p>
<p>A general explanation from <a href="http://docs.python.org/reference/datamodel.html#objects-values-and-types" rel="noreferrer">the "Data Model" chapter in the Python Language Reference"</a>:</p>
<blockquote>
<p>The value of some objects can change. Objects whose value can change
  are said to be mutable; objects whose value is unchangeable once they
  are created are called immutable.</p>
<p>(The value of an immutable container
  object that contains a reference to a mutable object can change when
  the latter’s value is changed; however the container is still
  considered immutable, because the collection of objects it contains
  cannot be changed. So, immutability is not strictly the same as having
  an unchangeable value, it is more subtle.)</p>
<p>An object’s mutability is
  determined by its type; for instance, numbers, strings and tuples are
  immutable, while dictionaries and lists are mutable.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you're coming to Python from another language (except one that's a lot like Python, like Ruby), and insist on understanding it in terms of that other language, here's where people usually get confused:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; a = 2 # I thought int was immutable, but I just changed it?!
</code></pre>
<p>In Python, assignment is not mutation in Python.</p>
<p>In C++, if you write <code>a = 2</code>, you're calling <code>a.operator=(2)</code>, which will mutate the object stored in <code>a</code>. (And if there <em>was</em> no object stored in <code>a</code>, that's an error.)</p>
<p>In Python, <code>a = 2</code> does nothing to whatever was stored in <code>a</code>; it just means that <code>2</code> is now stored in <code>a</code> instead. (And if there <em>was</em> no object stored in <code>a</code>, that's fine.)</p>
<hr/>
<p>Ultimately, this is part of an even deeper distinction.</p>
<p>A variable in a language like C++ is a typed location in memory. If <code>a</code> is an <code>int</code>, that means it's 4 bytes somewhere that the compiler knows is supposed to be interpreted as an <code>int</code>. So, when you do <code>a = 2</code>, it changes what's stored in those 4 bytes of memory from <code>0, 0, 0, 1</code> to <code>0, 0, 0, 2</code>. If there's another int variable somewhere else, it has its own 4 bytes.</p>
<p>A variable in a language like Python is a name for an object that has a life of its own. There's an object for the number <code>1</code>, and another object for the number <code>2</code>. And <code>a</code> isn't 4 bytes of memory that are represented as an <code>int</code>, it's just a name that points at the <code>1</code> object. It doesn't make sense for <code>a = 2</code> to turn the number 1 into the number 2 (that would give any Python programmer way too much power to change the fundamental workings of the universe); what it does instead is just make <code>a</code> forget the <code>1</code> object and point at the <code>2</code> object instead.</p>
<hr/>
<p>So, if assignment isn't a mutation, what <em>is</em> a mutation?</p>
<ul>
<li>Calling a method that's documented to mutate, like <code>a.append(b)</code>. (Note that these methods almost always return <code>None</code>). Immutable types do not have any such methods, mutable types usually do.</li>
<li>Assigning to a part of the object, like <code>a.spam = b</code> or <code>a[0] = b</code>. Immutable types do not allow assignment to attributes or elements, mutable types usually allow one or the other.</li>
<li>Sometimes using augmented assignment, like <code>a += b</code>, sometimes not. Mutable types usually mutate the value; immutable types never do, and give you a copy instead (they calculate <code>a + b</code>, then assign the result to <code>a</code>).</li>
</ul>
<p>But if assignment isn't mutation, how is assigning to part of the object mutation? That's where it gets tricky. <code>a[0] = b</code> does <em>not</em> mutate <code>a[0]</code> (again, unlike C++), but it <em>does</em> mutate <code>a</code> (unlike C++, except indirectly).</p>
<p>All of this is why it's probably better <em>not</em> to try to put Python's semantics in terms of a language you're used to, and instead learn Python's semantics on their own terms.</p>
</div>
<div class="post-text" itemprop="text">
<p>A mutable object has to have at least a method able to mutate the object. For example, the <code>list</code> object has the <code>append</code> method, which will actually mutate the object:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; a.append('hello') # `a` has mutated but is still the same object
&gt;&gt;&gt; a
[1, 2, 3, 'hello']
</code></pre>
<p>but the class <code>float</code> has no method to mutate a float object. You can do:</p>
<pre><code>&gt;&gt;&gt; b = 5.0 
&gt;&gt;&gt; b = b + 0.1
&gt;&gt;&gt; b
5.1
</code></pre>
<p>but the <code>=</code> operand is not a method. It just make a bind between the variable and whatever is to the right of it, nothing else. It never changes or creates objects. It is a declaration of what the variable will point to, since now on. </p>
<p>When you do <code>b = b + 0.1</code> the <code>=</code> operand binds the variable to a new float, wich is created with te result of  <code>5 + 0.1</code>.</p>
<p>When you assign a variable to an existent object, mutable or not, the <code>=</code> operand binds the variable to that object. And nothing more happens</p>
<p>In either case, the <code>=</code> just make the bind. It doesn't change or create objects.</p>
<p>When you do <code>a = 1.0</code>, the <code>=</code> operand is not wich create the float, but the <code>1.0</code> part of the line. Actually when you write <code>1.0</code> it is a shorthand for <code>float(1.0)</code> a constructor call returning a float object. (That is the reason why if you type <code>1.0</code> and press enter you get the "echo" <code>1.0</code> printed below; that is the return value of the constructor function you called)</p>
<p>Now, if <code>b</code> is a float and you assign <code>a = b</code>, both variables are pointing to the same object, but actually the variables can't comunicate betweem themselves, because the object is inmutable, and if you do <code>b += 1</code>, now <code>b</code> point to a new object, and <code>a</code> is still pointing to the oldone and cannot know what <code>b</code> is pointing to.</p>
<p>but if <code>c</code> is, let's say, a <code>list</code>, and you assign <code>a = c</code>, now <code>a</code> and <code>c</code> can "comunicate", because <code>list</code> is mutable, and if you do <code>c.append('msg')</code>, then just checking <code>a</code> you get the message.</p>
<p>(By the way, every object has an unique id number asociated to, wich you can get with <code>id(x)</code>. So you can check if an object is the same or not checking if its unique id has changed.)</p>
</div>
<div class="post-text" itemprop="text">
<h1>Difference between Mutable and Immutable object</h1>
<h2>Definitions</h2>
<p><strong>Mutable object</strong>: Object that can be changed after creating it.<br/>
<strong>Immutable object</strong>: Object that cannot be changed after creating it.<br/></p>
<p>In python will try to change the value of the immutable object it will give the new object.</p>
<h1>Mutable Objects</h1>
<p>Here are the list objects in python that are of mutable type:<br/></p>
<ol>
<li><code>list</code></li>
<li><code>Dictionary</code></li>
<li><code>Set</code></li>
<li><code>bytearray</code></li>
<li><code>user defined classes</code></li>
</ol>
<h1>Immutable Objects</h1>
<p>Here are the list objects in python that are of immutable type:<br/></p>
<ol>
<li><code>int</code></li>
<li><code>float</code></li>
<li><code>decimal</code></li>
<li><code>complex</code></li>
<li><code>bool</code></li>
<li><code>string</code></li>
<li><code>tuple</code></li>
<li><code>range</code></li>
<li><code>frozenset</code></li>
<li><code>bytes</code></li>
</ol>
<h1>Some Unanswered Questions</h1>
<p><strong>Questions</strong>: <strong>Is string a immutable type?</strong><br/>
<strong>Answer</strong>: <strong>yes</strong>  it is, but can you explain this:
<strong>Proof 1</strong>:<br/></p>
<pre><code>a = "Hello"
a +=" World"
print a
</code></pre>
<p><strong>Output</strong></p>
<pre><code>"Hello World"
</code></pre>
<p>In the above example string got once created as "Hello" finally changed to "Hello World". This implies that string is of the mutable type. But it is not we can check its identity and check whether it is of mutable type or not.</p>
<pre><code>a = "Hello"
identity_a = id(a)
a += " World"
new_identity_a = id(a)
if identity_a != new_identity_a:
    print "String is Immutable"
</code></pre>
<p><strong>Output</strong></p>
<pre><code>String is Immutable
</code></pre>
<p><strong>Proof 2</strong>:<br/></p>
<pre><code>a = "Hello World"
a[0] = "M"
</code></pre>
<p><strong>Output</strong></p>
<pre><code>TypeError 'str' object does not support item assignment
</code></pre>
<p><strong>Questions</strong>: <strong>Is Tuple a immutable type?</strong><br/>
<strong>Answer</strong>: <strong>yes</strong>  it is
<strong>Proof 1</strong>:<br/></p>
<pre><code>tuple_a = (1,)
tuple_a[0] = (2,)
print a
</code></pre>
<p><strong>Output</strong></p>
<pre><code>'tuple' object does not support item assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>A class is <strong>immutable</strong> if each object of that class has a fixed value upon instantiation that cannot <strong><em>SUBSEQUENTLY</em></strong> be changed </p>
</blockquote>
<p>In another word change the entire value of that variable <code>(name)</code> or leave it alone.</p>
<p>Example: </p>
<pre><code>my_string = "Hello world" 
my_string[0] = "h"
print my_string 
</code></pre>
<p>you expected this to work and print <strong>hello world</strong> but this will throw the following error: </p>
<pre><code>Traceback (most recent call last):
File "test.py", line 4, in &lt;module&gt;
my_string[0] = "h"
TypeError: 'str' object does not support item assignment
</code></pre>
<p>The interpreter is saying : <em>i can't change the first character of this string</em></p>
<p>you will have to change the whole <code>string</code> in order to make it works:</p>
<pre><code>my_string = "Hello World" 
my_string = "hello world"
print my_string #hello world
</code></pre>
<p>check this table: </p>
<p><a href="https://i.stack.imgur.com/M3iZD.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/M3iZD.png"/></a></p>
<p><a href="https://it-ebooks24.com/ebook/data-structures-and-algorithms-in-python" rel="nofollow noreferrer">source</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It would seem to me that <strong>you are fighting with the question what mutable/immutable actually means</strong>. So here is a simple explenation:</p>
<p><strong>First we need a foundation to base the explenation on.</strong> </p>
<p>So think of anything that you program as a virtual object, something that is saved in a computers memory as a sequence of binary numbers. (Don't try to imagine this too hard, though.^^) Now in most computer languages you will not work with these binary numbers directly, but rather more you use an interpretation of binary numbers.</p>
<p>E.g. you do not think about numbers like 0x110, 0xaf0278297319 or similar, but instead you think about numbers like 6 or Strings like "Hello, world". Never the less theses numbers or Strings are an interpretation of a binary number in the computers memory. The same is true for any value of a variable.</p>
<p>In short: <strong><em>We</em></strong> do not <strong>program with</strong> actual values but with <strong>interpretations of actual binary values.</strong></p></div>
<div class="post-text" itemprop="text">
<p>The goal of this answer is to create a single place to find all the good ideas about how to tell if you are dealing with mutating/nonmutating (immutable/mutable), and where possible, what to do about it?  There are times when mutation is undesirable and python's behavior in this regard can feel counter-intuitive to coders coming into it from other languages.</p>
<p>As per a useful post by @mina-gabriel:</p>
<ul>
<li>Books to read that might help:  "<a href="https://it-ebooks24.com/ebook/data-structures-and-algorithms-in-python" rel="nofollow noreferrer">Data Structures and Algorithms in Python</a>"</li>
<li>Excerpt from that book that lists mutable/immutable types: 
<a href="https://i.stack.imgur.com/M3iZD.png" rel="nofollow noreferrer">mutable/imutable types image</a></li>
</ul>
<p>Analyzing the above and combining w/ a post by @arrakëën:</p>
<p><em>What cannot change unexpectedly?</em></p>
<ul>
<li>scalars (variable types storing a single value) do not change unexpectedly

<ul>
<li>numeric examples: int(), float(), complex()</li>
</ul></li>
<li>there are some "mutable sequences":

<ul>
<li>str(), tuple(), frozenset(), bytes()</li>
</ul></li>
</ul>
<p><em>What can?</em> </p>
<ul>
<li>list like objects (lists, dictionaries, sets, bytearray())</li>
<li>a post on here also says classes and class instances but this may depend on what the class inherits from and/or how its built.</li>
</ul>
<p>by "unexpectedly" I mean that programmers from other languages might not expect this behavior (with the exception or Ruby, and maybe a few other "Python like" languages).</p>
<p>Adding to this discussion:</p>
<p>This behavior is an advantage when it prevents you from accidentally populating your code with mutliple copies of memory-eating large data structures.  But when this is undesirable, how do we get around it?</p>
<p>With lists, the simple solution is to build a new one like so:</p>
<p>list2 = list(list1)</p>
<p>with other structures ... the solution can be trickier.  One way is to loop through the elements and add them to a new empty data structure (of the same type).</p>
<p>functions can mutate the original when you pass in mutable structures.  How to tell?</p>
<ul>
<li>There are some tests given on other comments on this thread but then there are comments indicating these tests are not full proof</li>
<li>object.function() is a method of the original object but only some of these mutate.  If they return nothing, they probably do.  One would expect .append() to mutate without testing it given its name.  .union() returns the union of set1.union(set2) and does not mutate.  When in doubt, the function can be checked for a return value.  If return = None, it does not mutate.</li>
<li>sorted() might be a workaround in some cases.  Since it returns a sorted version of the original, it can allow you to store a non-mutated copy before you start working on the original in other ways. However, this option assumes you don't care about the order of the original elements (if you do, you need to find another way).  In contrast .sort() mutates the original (as one might expect).</li>
</ul>
<p>Non-standard Approaches (in case helpful):
Found this on github published under an MIT license: </p>
<ul>
<li>github repository under: tobgu named: pyrsistent</li>
<li>What it is:  Python persistent data structure code written to be used in place of core data structures when mutation is undesirable</li>
</ul>
<p>For custom classes, @semicolon suggests checking if there is a <code>__hash__</code> function because mutable objects should generally not have a <code>__hash__()</code> function.</p>
<p>This is all I have amassed on this topic for now.  Other ideas, corrections, etc. are welcome.  Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way of thinking of the difference:</p>
<p>Assignments to immutable objects in python can be thought of as deep copies, 
whereas assignments to mutable objects are shallow</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>The simplest answer:</strong></p>
<p>A mutable variable is one whose value may change in place, whereas in an immutable variable change of value will not happen in place. Modifying an immutable variable will rebuild the same variable.</p>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt;x = 5
</code></pre>
<p>Will create a value 5 referenced by x</p>
<p>x -&gt; 5</p>
<pre><code>&gt;&gt;&gt;y = x
</code></pre>
<p>This statement will make y refer to 5 of x</p>
<p>x -------------&gt; 5 &lt;-----------y</p>
<pre><code>&gt;&gt;&gt;x = x + y
</code></pre>
<p>As x being an integer (immutable type) has been rebuild.</p>
<p>In the statement, the expression on RHS will result into value 10 and when this is assigned to LHS (x), x will rebuild to 10. So now</p>
<p>x---------&gt;10</p>
<p>y---------&gt;5</p>
</div>
<div class="post-text" itemprop="text">
<p>For immutable objects, assignment creates a new copy of values, for example.</p>
<pre><code>x=7
y=x
print(x,y)
x=10 # so for immutable objects this creates a new copy so that it doesnot 
#effect the value of y
print(x,y)
</code></pre>
<p>For mutable objects, the assignment doesn't create another copy of values. For example,</p>
<pre><code>x=[1,2,3,4]
print(x)
y=x #for immutable objects assignment doesn't create new copy 
x[2]=5
print(x,y) # both x&amp;y holds the same list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, there's a easy way to know:</p>
<p>Immutable:</p>
<pre><code>    &gt;&gt;&gt; s='asd'
    &gt;&gt;&gt; s is 'asd'
    True
    &gt;&gt;&gt; s=None
    &gt;&gt;&gt; s is None
    True
    &gt;&gt;&gt; s=123
    &gt;&gt;&gt; s is 123
    True
</code></pre>
<p>Mutable:</p>
<pre><code>&gt;&gt;&gt; s={}
&gt;&gt;&gt; s is {}
False
&gt;&gt;&gt; {} is {}
Flase
&gt;&gt;&gt; s=[1,2]
&gt;&gt;&gt; s is [1,2]
False
&gt;&gt;&gt; s=(1,2)
&gt;&gt;&gt; s is (1,2)
False
</code></pre>
<p>And:</p>
<pre><code>&gt;&gt;&gt; s=abs
&gt;&gt;&gt; s is abs
True
</code></pre>
<p>So I think built-in function is also immutable in Python.</p>
<p>But I really don't understand how float works:</p>
<pre><code>&gt;&gt;&gt; s=12.3
&gt;&gt;&gt; s is 12.3
False
&gt;&gt;&gt; 12.3 is 12.3
True
&gt;&gt;&gt; s == 12.3
True
&gt;&gt;&gt; id(12.3)
140241478380112
&gt;&gt;&gt; id(s)
140241478380256
&gt;&gt;&gt; s=12.3
&gt;&gt;&gt; id(s)
140241478380112
&gt;&gt;&gt; id(12.3)
140241478380256
&gt;&gt;&gt; id(12.3)
140241478380256
</code></pre>
<p>It's so weird.</p>
</div>
<div class="post-text" itemprop="text">
<p>I haven't read all the answers, but the selected answer is not correct and I think the author has an idea that being able to reassign a variable means that whatever datatype is mutable. That is not the case. Mutability has to do with passing by reference rather than passing by value.</p>
<p>Lets say you created a List</p>
<pre><code>a = [1,2]
</code></pre>
<p>If you were to say:</p>
<pre><code>b = a
b[1] = 3
</code></pre>
<p>Even though you reassigned a value on B, it will also reassign the value on a. Its because when you assign "b = a". You are passing the "Reference" to the object rather than a copy of the value. This is not the case with strings, floats etc. This makes list, dictionaries and the likes mutable, but booleans, floats etc immutable.</p>
</div>
<span class="comment-copy">You can also check out <a href="http://stackoverflow.com/questions/7677275/list-assignment-with/7677417#7677417">List assignment with [:]</a> and <a href="http://stackoverflow.com/questions/7046971/python-when-to-use-copy-copy/7047061#7047061">python when to use copy.copy</a> which I also answered for more info about mutability.</span>
<span class="comment-copy">Note: Python list is mutable and python tuple is not..</span>
<span class="comment-copy">What you explain means to me: mutable variables are passed by reference, immutable variables are passed by value. Is this correct ?</span>
<span class="comment-copy">Almost, but not exactly. Technically, all variables are passed by reference in Python, but have a semantics more like pass by value in C. A counterexample to your analogy is if you do <code>def f(my_list): my_list = [1, 2, 3]</code>. With pass-by-reference in C, the value of the argument could change by calling that function. In Python, that function doesn't do anything. <code>def f(my_list): my_list[:] = [1, 2, 3]</code> would do something.</span>
<span class="comment-copy">Mutable types can be changed in place. Immutable types can not change in place. That's the way python sees the world. It is regardless of how variables are passed to functions.</span>
<span class="comment-copy">The key difference between Python's semantics and C++ pass-by-reference semantics is that assignment is not mutation in Python, and it is in C++. (But of course that's complicated by the fact that augmented assignment, like <code>a += b</code> sometimes <i>is</i> mutation. And the fact that assignment to part of a larger object sometimes means mutation of that larger object, just never mutation of the part—e.g., <code>a[0] = b</code> doesn't mutate <code>a[0]</code>, but it probably does mutate <code>a</code>… Which is why it may be better not to try to put things in terms of C++ and instead just describe what Python does in its own terms…)</span>
<span class="comment-copy">+1 For the link to the Python docs. However it took me some time until I realized that today you need to differentiate bewteen Python 2 &amp; 3 - I updated the answer to emphasize that.</span>
<span class="comment-copy">Well explained. Liked the concept of checking by <code>id()</code>. +1.</span>
<span class="comment-copy">Great answer, concise and use of  id() is a nice trick.</span>
<span class="comment-copy">Actually the use of <code>id()</code> is misleading here.  A given object will always have the same id during its lifetime, but different objects that exist at different times may have the same id due to garbage collection.</span>
<span class="comment-copy">This is very good explanation. Loved this question and lot of interesting (new) perspectives to explain it.</span>
<span class="comment-copy">+1 Note though that only some extension types (you may want to review your definition of that, all of Python's builtin types are implemented in C) are immutable. Others (most, I'd dare say) are perfectly mutable.</span>
<span class="comment-copy">You're correct. I've revised my answer to be more accurate.</span>
<span class="comment-copy">@delnan What do you call <i>"extensions types"</i> ?</span>
<span class="comment-copy">@eyquem: I used the term "extension types" incorrectly in my answer, and delnan was referring to that. After his comment I revised my answer and avoided using this term.</span>
<span class="comment-copy">Say a = 'hi'. a[0] = 'f' will have 'print a' print out 'fi' (Am I right so far?), so when you say that it doesn't mutate a[0], rather a, what does that mean? Does a[n] also have it's own place now, and changing its value points it to a different value?</span>
<span class="comment-copy">In [46]: a ="Hello"  In [47]: id(a) Out[47]: 140071263880128  In [48]: a = a.replace("H","g")  In [49]: a Out[49]: 'gello'  In [50]: id(a) Out[50]: 140071263881040</span>
<span class="comment-copy">would you care to proof your item assignment issue to my given above example</span>
<span class="comment-copy">item assignment is not issue in immutable types. In your case you are  changing the string a but in memory its assigning to a new variable. Item assignment in my case will not change the memory of variable like in case of list or dictionary. if you are doing replace you are creating a new variable not modifying existing variable</span>
<span class="comment-copy">How can one modify components of a python string in a more concise way than you showed above?</span>
<span class="comment-copy">@LukeDavis You could do <code>my_string = 'h' + my_string[1:]</code>. This will generate a new string called my_string, and the original my_string is gone (print <code>id(my_string)</code> to see this). Of course that is not very flexible, for the more general case you could convert to list and back: <code>l = list(my_string)</code> <code>l[0] = 'h'</code> <code>my_string = ''.join(l)</code></span>
<span class="comment-copy">This is incorrect.  All assignments in Python are by reference.  There is no copying involved.</span>
<span class="comment-copy">But that is clearly not valid. Because tuples are immutable. Type <code>x = (1, 2)</code> and then try and mutate <code>x</code>, it's not possible. One way I have found to check for mutability is <code>hash</code>, it works for the builtin objects at least. <code>hash(1)</code> <code>hash('a')</code> <code>hash((1, 2))</code> <code>hash(True)</code> all work, and <code>hash([])</code> <code>hash({})</code> <code>hash({1, 2})</code> all do not work.</span>
<span class="comment-copy">@semicolon For user-defined classes then <code>hash()</code> will work if the object defines a <code>__hash__()</code> method, even though user-defined classes are generally mutable.</span>
<span class="comment-copy">@augurar I mean yes, but nothing in Python will guarantee anything, because Python has no real static typing or formal guarantees. But the <code>hash</code> method is still a pretty good one, because mutable objects should generally not have a <code>__hash__()</code> method, since making them keys in a dictionary is just dangerous.</span>
<span class="comment-copy">@augurar and semicolon (or others if they know it): __hash__() solution ... does creator of a custom class have to add it for it to be there?  If so, then the rule is if exists the object should be immutable; if it does not exist, we can't tell since creator may have simply left if off.</span>
