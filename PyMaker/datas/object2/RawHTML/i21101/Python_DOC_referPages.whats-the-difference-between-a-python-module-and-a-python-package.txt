<div class="post-text" itemprop="text">
<p>What's the difference between a Python module and a Python package?</p>
<p>See also: <a href="https://stackoverflow.com/questions/3680883/whats-the-difference-between-package-and-module">What's the difference between "package" and "module"</a> (for other languages)</p>
</div>
<div class="post-text" itemprop="text">
<p>A module is a single file (or files) that are imported under one import and used. 
e.g.</p>
<pre><code>import my_module
</code></pre>
<p>A package is a collection of modules in directories that give a package hierarchy.</p>
<pre><code>from my_package.timing.danger.internets import function_of_love
</code></pre>
<p><a href="http://docs.python.org/tutorial/modules.html" rel="noreferrer">Documentation for modules</a></p>
<p><a href="http://www.network-theory.co.uk/docs/pytut/Packages.html" rel="noreferrer">Introduction to packages</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Any Python file is a <a href="http://docs.python.org/tutorial/modules.html">module</a>, its name being the file's base name without the <code>.py</code> extension. A <a href="http://docs.python.org/tutorial/modules.html#packages">package</a> is a collection of Python modules: while a module is a single Python file, a package is a directory of Python modules containing an additional <code>__init__.py</code> file, to distinguish a package from a directory that just happens to contain a bunch of Python scripts. Packages can be nested to any depth, provided that the corresponding directories contain their own <code>__init__.py</code> file.</p>
<p>The distinction between module and package seems to hold just at the file system level. When you import a module or a package, the corresponding object created by Python is always of type <code>module</code>. Note, however, when you import a package, only variables/functions/classes in the <code>__init__.py</code> file of that package are directly visible, <em>not</em> sub-packages or modules. As an example, consider the <code>xml</code> package in the Python standard library: its <code>xml</code> directory contains an <code>__init__.py</code> file and four sub-directories; the sub-directory <code>etree</code> contains an <code>__init__.py</code> file and, among others, an <code>ElementTree.py</code> file. See what happens when you try to interactively import package/modules:</p>
<pre><code>&gt;&gt;&gt; import xml
&gt;&gt;&gt; type(xml)
&lt;type 'module'&gt;
&gt;&gt;&gt; xml.etree.ElementTree
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'etree'
&gt;&gt;&gt; import xml.etree
&gt;&gt;&gt; type(xml.etree)
&lt;type 'module'&gt;
&gt;&gt;&gt; xml.etree.ElementTree
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'ElementTree'
&gt;&gt;&gt; import xml.etree.ElementTree
&gt;&gt;&gt; type(xml.etree.ElementTree)
&lt;type 'module'&gt;
&gt;&gt;&gt; xml.etree.ElementTree.parse
&lt;function parse at 0x00B135B0&gt;
</code></pre>
<p>In Python there also are built-in modules, such as <code>sys</code>, that are written in C, but I don't think you meant to consider those in your question.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/glossary.html#term-package" rel="noreferrer">Python glossary</a>: </p>
<blockquote>
<p><em>It’s important to keep in mind that all packages are modules, but not all modules are packages. Or put another way, packages are just a special kind of module. Specifically, any module that contains a <code>__path__</code> attribute is considered a package.</em> </p>
</blockquote>
<p>Python files with a dash in the name, like <code>my-file.py</code>, cannot be imported with a simple <code>import</code> statement. Code-wise, <code>import my-file</code> is the same as <code>import my - file</code> which will raise an exception. Such files are better characterized as <em>scripts</em> whereas importable files are <em>modules</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p>First, keep in mind that, in its precise definition, a <em>module</em> is an object in the memory of a Python interpreter, often created by reading one or more files from disk. While we may informally call a disk file such as <code>a/b/c.py</code> a "module," it doesn't actually become one until it's combined with information from several other sources (such as <code>sys.path</code>) to create the module object. (Note, for example, that two modules with different names can be loaded from the same file, depending on <code>sys.path</code> and other settings.)</p>
<p>A <em>package</em> is a module that may have submodules (including subpackages). Not all modules can do this. As an example, create a small module hierarchy:</p>
<pre><code>$ mkdir -p a/b
$ touch a/b/c.py
</code></pre>
<p>Ensure that there are no other files under <code>a</code>. Start a Python 3.4 or later interpreter (e.g., with <code>python3 -i</code>) and examine the results of the following statements:</p>
<pre><code>import a
a                ⇒ &lt;module 'a' (namespace)&gt;
a.b              ⇒ AttributeError: module 'a' has no attribute 'b'
import a.b.c
a.b              ⇒ &lt;module 'a.b' (namespace)&gt;
a.b.c            ⇒ &lt;module 'a.b.c' from '/home/cjs/a/b/c.py'&gt;
</code></pre>
<p>Modules <code>a</code> and <code>a.b</code> are packages (in fact, a certain kind of package called a "namespace package," though we wont' worry about that here). However, module <code>a.b.c</code> is not a package. We can demonstrate this by adding another file, <code>a/b.py</code> to the directory structure above and starting a fresh interpreter:</p>
<pre><code>import a.b.c
⇒ ImportError: No module named 'a.b.c'; 'a.b' is not a package
import a.b
a                ⇒ &lt;module 'a' (namespace)&gt;
a.__path__       ⇒ _NamespacePath(['/.../a'])
a.b              ⇒ &lt;module 'a.b' from '/home/cjs/tmp/a/b.py'&gt;
a.b.__path__     ⇒ AttributeError: 'module' object has no attribute '__path__'
</code></pre>
<p>Python ensures that all parent modules are loaded before a child module is loaded. Above it finds that <code>a/</code> is a directory, and so creates a namespace package <code>a</code>, and that <code>a/b.py</code> is a Python source file which it loads and uses to create a (non-package) module <code>a.b</code>. At this point you cannot have a module <code>a.b.c</code> because <code>a.b</code> is not a package, and thus cannot have submodules.</p>
<p>You can also see here that the package module <code>a</code> has a <code>__path__</code> attribute (packages must have this) but the non-package module <code>a.b</code> does not.</p>
</div>
<div class="post-text" itemprop="text">
<p>A late answer, yet another definition:</p>
<blockquote>
<p>A package is represented by an imported top-entity which could either
  be a self-contained module, or the <code>__init__.py</code> special module as the
  top-entity from a set of modules within a sub directory structure.</p>
</blockquote>
<p>So physically a package is a distribution unit, which provides one or more modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>So you remember back on your text books where on the content page the chapters were divided in modules.
So there lies the concept different chapters which have the same objective or the part of same theory then these parts are clustered together and know as module.
Similarly, in programming, when different functions are clustered together they are seperated and named as module.</p>
</div>
<span class="comment-copy">I might be wrong but for me: a module is basically one python file. A package is a folder with a bunch of modules (python files).</span>
<span class="comment-copy">To be considered a package, that folder must contain an <code>__init__.py</code> file.</span>
<span class="comment-copy">@lc2817: it is the most common case but it is not necessary for a module to be loaded from a file system e.g., <a href="https://github.com/tomerfiliba/plumbum/blob/81f50467152efb48c10f80a68e049c04d8540a2f/plumbum/__init__.py#L47" rel="nofollow noreferrer">see <code>from plumbum.cmd import ls</code> implementation</a></span>
<span class="comment-copy">@GiulioPiancastelli: In Python 3.3+, <a href="https://docs.python.org/3/reference/import.html#namespace-packages" rel="nofollow noreferrer">namespace packages do not use <code>__init__.py</code></a></span>
<span class="comment-copy">How does the community differentiate between Python packages, and packages used to distribute Python components like PyPI/wheels/etc? The two seem like different applications of the word "package" to me.</span>
<span class="comment-copy">When you say: "A module is a single file (or files) that are imported under one import" can you explain the situation where a module is more than one file? Or am I misreading what you mean?</span>
<span class="comment-copy">According to the documentation, a module is a single file.  Nowhere does it say that multiple files can be one module.</span>
<span class="comment-copy">You don't need a file to create a module e.g., you could import a module from a zip file. Same for packages. There is only one class for modules/packages in Python. Package is just a module with a <code>__path__</code> attribute.</span>
<span class="comment-copy">Packages <i>are modules too</i>. They are just packaged up differently; they are formed by the combination of a directory plus <code>__init__.py</code> file. They are modules that can contain other modules.</span>
<span class="comment-copy">@Jacquot sure, see <a href="https://docs.python.org/3/reference/import.html#packages" rel="nofollow noreferrer"><i>The import system</i></a> in the reference documentation: <i>It’s important to keep in mind that all packages are modules</i>.</span>
<span class="comment-copy">no function_of_love, but much better explanation ;). &lt;3</span>
<span class="comment-copy">Thanks for explicitly mentioning that the corresponding object created by Python is always of type <code>module</code>. I'm in the process of writing a debugger and was worried that my debugger was incorrect in saying that my packages were <code>module</code>s.</span>
<span class="comment-copy">@jolvi Python files with a filename containing dashes can still be imported as modules, just not with the usual <code>import</code> statement, because dashes are not allowed in Python identifiers. Use <code>importlib.import_module()</code> instead.</span>
<span class="comment-copy">@jolvi I'm not. Where in my comment are you reading that? I'm just saying that, if you happen to have or stumble upon a Python file with dashes in its name, you can still import it as a module. I'm not making a statement about the preferred way of naming a Python file. I'm sure you can find that somewhere else: it is usually strongly advised to avoid dashes in favor of underscores.</span>
<span class="comment-copy">Being new to Python, sub-packages or modules not being available by default when importing the parent package is what made me stumble. Is there a particular reason for that? And is there a common pattern how to <i>make</i> sub-packages or modules available (via their fully qualified name) when importing the parent package?</span>
<span class="comment-copy">Yes the added confusion :)</span>
<span class="comment-copy">I feel that there are two definitions for <i>package</i> in Python and they are distinct. Your answer seems to combine them together. Strictly speaking, a python package is a directory with a <code>__init__.py</code> module inside, yet if you talk about distribution units (commonly via PyPI) then this is another type of package entirely (usually defined by the existence of <code>setup.py</code>). I find these two uses of the term <code>package</code> confusing, and I've spoken to some Python beginners who find it utterly bewildering.</span>
