<div class="post-text" itemprop="text">
<p>I'd like to use the <code>ArgumentError</code> exception in the <code>argparse</code> module in Python, but I can't figure out how to use it. The signature says that it should be called as <code>ArgumentError(argument, message)</code>, but I can't figure out what <code>argument</code> should be. I think it should be some part of the parser object, but I couldn't find any documentation for it.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://hg.python.org/cpython/file/v3.5.2/Lib/argparse.py#l34">the source documentation</a>:</p>
<blockquote>
<p>ArgumentError: The exception raised by ArgumentParser objects when there are errors with the parser's actions. Errors raised while parsing the command-line are caught by ArgumentParser and emitted as command-line messages.</p>
</blockquote>
<p>The <code>argument</code> parameter of the constructor is the <code>Action</code> object from which the exception is raised. Usually there is no need to raise it outside of an <code>Action</code> subclass, and when subclassing it, there is no need to raise it explicitly; you usually raise <code>ValueError</code> (or whatever is appropriate) instead.</p>
<h3>Float values between 0 and 1</h3>
<p>In regards to your comment, that you only want to accept floating point values between 0 and 1. For this you should use the ability to define custom types. You can do it for example like this:</p>
<pre><code>def percentFloat (string):
    value = float(string)
    if value &lt; 0 or value &gt; 1:
        raise argparse.ArgumentTypeError('Value has to be between 0 and 1')
    return value

parser = argparse.ArgumentParser()
parser.add_argument('test', type=percentFloat)
parser.parse_args()
</code></pre>
<p>Note that this is also safe against non-floats as <code>float(string)</code> will raise a <code>ValueError</code> for non-floats which also triggers an invalid type error by the <code>argparse</code> module. <a href="https://hg.python.org/cpython/file/v3.5.2/Lib/argparse.py#l725"><code>ArgumentTypeError</code></a> is just a way to specify a custom error message.</p>
<h3>Mutually exclusive parameters</h3>
<p>For mutually exclusive parameters, you should use <a href="http://docs.python.org/3/library/argparse.html#mutual-exclusion"><code>argparse.add_mutually_exclusive_group</code></a>.</p>
<h3>Parameter dependency</h3>
<p>Parameter dependency isnâ€™t really something that should be done by the argument <em>parser</em>. For semantic details, you should instead simply do it yourself:</p>
<pre><code>args = parser.parse_args()
if args.w and not args.p:
    parser.error('-p is required when -w is set.')
</code></pre>
<p>You can use <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.error"><code>ArgumentParser.error</code></a> to raise custom error message which will interrupt the program and print to the console.</p>
<p>But of course in such a basic situation it would make a lot more sense just to implicitly guess <code>-p</code> if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>While <code>parser.error()</code> is what most people probably want, it is also possible to use argparse.ArgumentError() (as the question asks.)  You need a reference to the argument, like the <code>bar_arg</code> in the example below:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--foo')
bar_arg = parser.add_argument('--bar')

args = parser.parse_args()
if args.bar == 'xyzzy':
    raise argparse.ArgumentError(bar_arg, "Can't be 'xyzzy'")

if args.foo == 'xyzzy':
    parser.error("Can't be 'xyzzy'")
</code></pre>
<p>This will result in output like the one below:</p>
<pre class="lang-none prettyprint-override"><code>$ python argparse_test.py --foo xyzzy
usage: argparse_test.py [-h] [--foo FOO] [--bar BAR]
argparse_test.py: error: Can't be 'xyzzy'

$ python argparse_test.py --bar xyzzy
Traceback (most recent call last):
  File "argparse_test.py", line 10, in &lt;module&gt;
    raise argparse.ArgumentError(bar_arg, "Can't be 'xyzzy'")
argparse.ArgumentError: argument --bar: Can't be 'xyzzy'
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/8293325/1497596">Is it bad form to raise <code>ArgumentError</code> by hand?</a></span>
<span class="comment-copy">You can use it within a custom <code>Action</code> class, just as the existing classes do.  But I can't imagine a reason to do so outside of the <code>parser</code>.   It doesn't anything special - just adds the <code>Action</code> name to the error message.  Study its use in the code.</span>
<span class="comment-copy">That isn't right.  If I just send the value, I get <code>AttributeError: 'float' object has no attribute 'option_strings'</code>.</span>
<span class="comment-copy">And by the way, I want to use it because I want to do type checking that the module doesn't directly support. For example, I want a floating point value that is between 0 and 1.  argparse lets you specify that it should be a float, but I have to manually check the range.  This seems like the correct error to emit when the value is wrong.</span>
<span class="comment-copy">@asmeurer Edited my answer to give you an example on how to do that.</span>
<span class="comment-copy">Updated my answer.</span>
<span class="comment-copy">Thanks.  That parser.error was what I was looking for.</span>
<span class="comment-copy">This is a good example of how using <code>ArgumentError</code> outside of the <code>parser</code> is possible, but probably inferior to using <code>parser.error</code>.</span>
<span class="comment-copy">@hpaulj, yes, but ArgumentError has one benefit: it lets you know which switch was the offending one.</span>
<span class="comment-copy">Well, if you write your error message well, then you'd be sure to <i>mention</i> which switch was the offending one. Creating a separate variable for each added argument can be very cumbersome...</span>
<span class="comment-copy">@Praveen It's a question of preference I suppose.  Myself I prefer the variable to writing "'--foo' can't be 'xyzzy'", since I then have to remember what the proper name of the switch was (it's not necessarily the same as the attribute to <code>args</code>).  But honestly, I think <code>parser.error()</code> should include the name of the offending switch by default.</span>
