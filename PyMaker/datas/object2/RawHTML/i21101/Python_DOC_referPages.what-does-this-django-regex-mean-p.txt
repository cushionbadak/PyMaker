<div class="post-text" itemprop="text">
<p>I have the following regex in my urls.py and I'd like  to know what it means. Specifically the <code>(?P&lt;category_slug&gt;</code> portion of the regex.</p>
<p><code>r'^category/(?P&lt;category_slug&gt;[-\w]+)/$</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>(?P&lt;name&gt;regex)</code> - Round brackets group the regex between them. They capture the text matched by the regex inside them that can be referenced by the name between the sharp brackets. The name may consist of letters and digits.</p>
<p>Copy paste from: <a href="http://www.regular-expressions.info/refext.html">http://www.regular-expressions.info/refext.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In django, named capturing groups are passed to your view as keyword arguments.</p>
<p>Unnamed capturing groups (just a parenthesis) are passed to your view as arguments.</p>
<p>The ?P is a named capturing group, as opposed to an unnamed capturing group.</p>
<p><a href="http://docs.python.org/library/re.html" rel="noreferrer">http://docs.python.org/library/re.html</a></p>
<blockquote>
<p><code>(?P&lt;name&gt;...)</code> Similar to regular parentheses, but the substring
  matched by the group is accessible within the rest of the regular
  expression via the symbolic group name name. Group names must be valid
  Python identifiers, and each group name must be defined only once
  within a regular expression. A symbolic group is also a numbered
  group, just as if the group were not named. So the group named id in
  the example below can also be referenced as the numbered group 1.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>(?P&lt;category_slug&gt;)</code> creates a match group named <code>category_slug</code>.</p>
<p>The regex itself matches a string starting with <code>category/</code> and then a mix of alphanumeric characters, the dash <code>-</code> and the underscore <code>_</code>, followed by a trailing slash.</p>
<p>Example URLs accepted by the regex:</p>
<ul>
<li>category/foo/</li>
<li>category/foo_bar-baz/</li>
<li>category/12345/</li>
<li>category/q1e2_asdf/</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>New in version 3.6.</p>
<p><code>(?P&lt;name&gt;...)</code>
Similar to regular parentheses, but the substring matched by the group is accessible via the symbolic group name name. Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression. A symbolic group is also a numbered group, just as if the group were not named.</p>
<p>copy paste from <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Python3Regex</a></p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/library/re.html" rel="nofollow noreferrer">docs.python.org/library/re.html</a> would be a better reference url.</span>
<span class="comment-copy">I'm not familiar with django but the most likely behaviour is that the view function will receive a keyword argument named <code>category_slut</code></span>
<span class="comment-copy">@cfarm54 -- The <code>re</code> module provides functions to match the expression. They return a Match object if text matches the regex. Then <code>match.group('category_slug')</code> returns the contents of the group (<code>'foo'</code>, <code>'foo_bar-baz'</code>, etc.).</span>
<span class="comment-copy">@ThiefMaster: Best typo ever</span>
<span class="comment-copy">@ThiefMaster +1 for the category_slut</span>
<span class="comment-copy">@ThiefMaster your comment made my day.</span>
