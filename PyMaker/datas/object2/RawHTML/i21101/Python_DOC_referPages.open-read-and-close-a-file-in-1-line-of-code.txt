<div class="post-text" itemprop="text">
<p>Now I use:</p>
<pre><code>pageHeadSectionFile = open('pagehead.section.htm','r')
output = pageHeadSectionFile.read()
pageHeadSectionFile.close()
</code></pre>
<p>But to make the code look better, I can do:</p>
<pre><code>output = open('pagehead.section.htm','r').read()
</code></pre>
<p>When using the above syntax, how do I close the file to free up system resources?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't really have to close it - Python will do it automatically either during garbage collection or at program exit. But as @delnan noted, it's better practice to explicitly close it for various reasons.</p>
<p>So, what you can do to keep it short, simple and explicit:</p>
<pre><code>with open('pagehead.section.htm','r') as f:
    output = f.read()
</code></pre>
<p>Now it's just two lines and pretty readable, I think.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python Standard Library <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">Pathlib</a> module does what you looking for:</p>
<pre><code>Path('pagehead.section.htm').read_text()
</code></pre>
<p>Don't forget to import Path:</p>
<pre><code>jsk@dev1:~$ python3
Python 3.5.2 (default, Sep 10 2016, 08:21:44)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; (Path("/etc") / "hostname").read_text()
'dev1.example\n'
</code></pre>
<p>On Python 27 install backported <a href="https://pypi.python.org/pypi/pathlib" rel="noreferrer"><code>pathlib</code></a> or <a href="https://pypi.python.org/pypi/pathlib2" rel="noreferrer"><code>pathlib2</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using CPython, your file will be closed immediately after the line is executed, because the file object is immediately garbage collected.  There are two drawbacks, though:</p>
<ol>
<li><p>In Python implementations different from CPython, the file often isn't immediately closed, but rather at a later time, beyond your control.</p></li>
<li><p>In Python 3.2 or above, this will throw a <code>ResourceWarning</code>, if enabled.</p></li>
</ol>
<p>Better to invest one additional line:</p>
<pre><code>with open('pagehead.section.htm','r') as f:
    output = f.read()
</code></pre>
<p>This will ensure that the file is correctly closed under all circumstances.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you can do is to use the <code>with</code> statement:</p>
<pre><code>&gt;&gt;&gt; with open('pagehead.section.htm', 'r') as fin:
...     output = fin.read()
</code></pre>
<p>The <code>with</code> statement will take care to call <code>__exit__</code> function of the given object even if something bad happened in your code; it's close to the <code>try... finally</code> syntax. For  object returned by <code>open</code>, <code>__exit__</code> corresponds to file closure. </p>
<p>This statement has been introduced with Python 2.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>No need to import any special libraries to do this.  </p>
<p><strong>Use normal syntax and it will open the file for reading then close it.</strong></p>
<pre><code>with open("/etc/hostname","r") as f: print f.read() 
</code></pre>
<p><strong>or</strong> </p>
<pre><code>with open("/etc/hosts","r") as f: x = f.read().splitlines()
</code></pre>
<p><strong>which gives you an array x containing the lines, and can be printed like so:</strong></p>
<pre><code>for line in x: print line
</code></pre>
<hr/>
<h2>These one-liners are very helpful for maintenance - basically self-documenting.</h2>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://github.com/gowhari/ilio" rel="noreferrer">ilio</a>: (inline io):</p>
<p>just one function call instead of file open(), read(), close().</p>
<pre><code>from ilio import read

content = read('filename')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('pagehead.section.htm')as f:contents=f.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I frequently do something like this when I need to get a few lines surrounding something I've grepped in a log file:</p>
<pre><code>$ grep -n "xlrd" requirements.txt | awk -F ":" '{print $1}'
54

$ python -c "with open('requirements.txt') as file: print ''.join(file.readlines()[52:55])"
wsgiref==0.1.2
xlrd==0.9.2
xlwt==0.7.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.with_iter" rel="nofollow noreferrer"><code>more_itertools.with_iter</code></a>, it is possible to open, read, close and assign an equivalent <code>output</code> in one line (excluding the import statement):</p>
<pre><code>import more_itertools as mit


output = "".join(line for line in mit.with_iter(open("pagehead.section.htm", "r")))
</code></pre>
<p>Although possible, I would look for another approach other than assigning the contents of a file to a variable, i.e. lazy iteration - this can be done using a traditional <code>with</code> block or in the example above by removing <code>join()</code> and iterating <code>output</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want that warm and fuzzy feeling just go with <em>with</em>.</p>
<p>For python 3.6 I ran these two programs under a fresh start of IDLE, giving runtimes of:</p>
<pre><code>0.002000093460083008  Test A
0.0020003318786621094 Test B: with guaranteed close
</code></pre>
<p>So not much of a difference.</p>
<pre><code>#--------*---------*---------*---------*---------*---------*---------*---------*
# Desc: Test A for reading a text file line-by-line into a list
#--------*---------*---------*---------*---------*---------*---------*---------*

import sys
import time

#                                  # MAINLINE
if __name__ == '__main__':
    print("OK, starting program...")

    inTextFile = '/Users/Mike/Desktop/garbage.txt'

#                                  # Test: A: no 'with;
    c=[]
    start_time = time.time()
    c = open(inTextFile).read().splitlines()
    print("--- %s seconds ---" % (time.time() - start_time))

    print("OK, program execution has ended.")
    sys.exit()                     # END MAINLINE
</code></pre>
<p>OUTPUT:</p>
<pre><code>OK, starting program...
--- 0.002000093460083008 seconds ---
OK, program execution has ended.

#--------*---------*---------*---------*---------*---------*---------*---------*
# Desc: Test B for reading a text file line-by-line into a list
#--------*---------*---------*---------*---------*---------*---------*---------*

import sys
import time

#                                  # MAINLINE
if __name__ == '__main__':
    print("OK, starting program...")

    inTextFile = '/Users/Mike/Desktop/garbage.txt'

#                                  # Test: B: using 'with'
    c=[]
    start_time = time.time()
    with open(inTextFile) as D: c = D.read().splitlines()
    print("--- %s seconds ---" % (time.time() - start_time))

    print("OK, program execution has ended.")
    sys.exit()                     # END MAINLINE
</code></pre>
<p>OUTPUT:</p>
<pre><code>OK, starting program...
--- 0.0020003318786621094 seconds ---
OK, program execution has ended.
</code></pre>
</div>
<span class="comment-copy">There is nothing inherently more attractive about one-liners. Code is read far more often than it is written, and should be written for comprehension, not for "coolness." The only exception is when there is a well-known idiom in a language, but I am unaware of one in this case.</span>
<span class="comment-copy">@drdwilcox: Cryptic one-liners are bad, declarative one-liners are good. There is no reason (at least I cannot see one), why there is no function wrapper in the core to read a file (such common need) in a single function call. Something like <code>contents = os.readfile(path)</code>. If I wanted to do something fancier, then ok, I'd happily use <code>with open(path) as fd: contents = fd.read()</code>. Of course one can write its own wrapper, but that's what the core is for, to provide the useful to abstractions to programmers.</span>
<span class="comment-copy">It's true that code is read far more than it's written, but the implication that longer code is just as good as short code couldn't be more wrong. If you invest time in making your code as short as possible (without resorting to clever tricks that are hard to understand), that investment will pay off over and over when the code is read. Every line you write is a disservice to anyone reading your code, so you should strive to write as little as possible. Remember the famous quote from Pascal: "I made this letter longer only because I have not had the leisure to make it shorter."</span>
<span class="comment-copy">I am using it on GAE, so the question is if it will cost me extra resources since I am not closing the file "correctly"</span>
<span class="comment-copy">@1qazxsw2 If you use the <a href="http://docs.python.org/reference/compound_stmts.html#with" rel="nofollow noreferrer"><code>with</code> statement</a> the file resource will be closed properly for you.</span>
<span class="comment-copy">Re first sentence: Python will close it <i>eventually</i>. But that doesn't mean you should forget about closing. Even with refcounting, the file may stay open far longer than you think and want (e.g. if it happens to be referred to by cycles). This goes thrice in Python implementations that have a decent GC, where you have no guarantee that anything is GC'd at any particular time. Even the <a href="http://docs.python.org/reference/datamodel.html" rel="nofollow noreferrer">CPython documentation</a> says you shouldn't rely on GC for cleanup like this. The latter part of the answer should be bold.</span>
<span class="comment-copy">If you really need a <i>one-liner</i>, it is possible to put the <code>output = f.read()</code> part on the same line after the <code>:</code>.</span>
<span class="comment-copy">That’s implementation dependent - see Sven’s answer.</span>
<span class="comment-copy">The other answers proposing <code>with</code> are fine, but <code>with</code> is a statement, not an expression. This <code>pathlib</code> answer is the only reply to the original question that can be embedded in a Python expression. Something like <code>SECRET_KEY = os.environ.get('SECRET_KEY') or pathlib.Path('SECRET_KEY').read_bytes()</code></span>
<span class="comment-copy">Small clarification: according to the <a href="http://docs.python.org/reference/compound_stmts.html#with" rel="nofollow noreferrer">documentation</a> <code>with</code> was introduced in Python 2.5, but had to be <a href="http://docs.python.org/whatsnew/2.5.html#pep-343-the-with-statement" rel="nofollow noreferrer">explicitly imported</a> from <code>__future__</code>. It became available from all contexts in Python 2.6.</span>
<span class="comment-copy">this is two lines, not 1</span>
<span class="comment-copy">Thanks for the precise answer!</span>
<span class="comment-copy">How is this any different from the top 3 answers?</span>
<span class="comment-copy">The biggest difference is that it is only one line as the question specified. Personally I can't find any beyond that but feel free to critique my work rather than actually contributing to the question yourself.</span>
<span class="comment-copy">The shortest, built-in way to achieve opening, reading, and closing a file in Python is using 2 logical lines whether it's condensed down to 1 line or not. So I don't see this answer to be effectively any different from the 3 original answers.</span>
<span class="comment-copy">It does not matter if its 'effectively' different. I got to this page looking for one-line syntax that might be used with <code>python -c</code> on the command line, so posting 2-line answers does not help.</span>
<span class="comment-copy">@user5359531 I don't see your point: do you know that you can quote python expressions with <code>"</code>, use <code>;</code> to append two instructions, and delete newline after <code>:</code> ? Following expression works just fine for me : <code>$&gt; python -c "with open('some file', 'r') as f: print(next(f))"</code></span>
<span class="comment-copy">Completely unrelated to the original topic, but you should look into <code>grep -A &lt;n&gt;</code>, <code>grep -B &lt;n&gt;</code>, and <code>grep -C &lt;n&gt;</code>, if it is helpful. More info: <a href="http://stackoverflow.com/a/9083/1830159">stackoverflow.com/a/9083/1830159</a></span>
<span class="comment-copy">You can import inside the oneliner as well. <code>"".join(line for line in __import__('more_itertools').with_iter(open("pagehead.section.htm", "r")))</code> This works just fine, and eliminates the need for a line for the import.</span>
<span class="comment-copy">I appreciate the comment.  That is an interesting implantation of that function.  I'm afraid it teeters the line of what is considered "pythonic".   Here I've conformed to PEP8's "Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants" and PEP20's "Explicit is better than implicit"/"Readability counts".</span>
<span class="comment-copy">I completely agree with you. However while discussing solving tasks with oneliners, I've often found myself in arguments where the agreed outcome should be a single line of code pasted into a fresh python shell. Such challenges rarely conform to pep8. It's in no way a good practice for writing code, it was only meant as a tip to remove the need for imports.</span>
