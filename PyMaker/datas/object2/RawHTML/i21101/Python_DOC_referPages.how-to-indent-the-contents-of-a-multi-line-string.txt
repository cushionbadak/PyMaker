<div class="post-text" itemprop="text">
<p>I'm using the python <a href="http://nedbatchelder.com/code/cog" rel="noreferrer">cog</a> module to generate C++ boilerplate code, and it is working great so far, but my only concern is that the resulting code, which is ugly by itself, is made worse by the fact that it's not indented. I'm too lazy to get the indentation right in the string generation function, so I'm wondering if there is a Python util function to indent the content of a multi-line string?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not pipe the output through a command-line code formatter such as astyle?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can indent the lines in a string by just padding each one with proper number of pad characters. This can easily be done by using the <a href="https://docs.python.org/3/library/textwrap.html#textwrap.indent" rel="nofollow noreferrer"><code>textwrap.indent()</code></a> function which was added to the module in Python 3.3. Alternatively you could use the code below which will also work in earlier Python versions.</p>
<pre><code>try:
    import textwrap
    textwrap.indent
except AttributeError:  # undefined function (wasn't added until Python 3.3)
    def indent(text, amount, ch=' '):
        padding = amount * ch
        return ''.join(padding+line for line in text.splitlines(True))
else:
    def indent(text, amount, ch=' '):
        return textwrap.indent(text, amount * ch)

text = '''\
And the Lord God said unto the serpent,
Because thou hast done this, thou art
cursed above all cattle, and above every
beast of the field; upon thy belly shalt
thou go, and dust shalt thou eat all the
days of thy life: And I will put enmity
between thee and the woman, and between
thy seed and her seed; it shall bruise
thy head, and thou shalt bruise his
heel.

3:15-King James
'''

print('Text indented 4 spaces:\n')
print(indent(text, 4))
</code></pre>
<p>Result:</p>
<pre class="lang-none prettyprint-override"><code>Text indented 4 spaces:

    And the Lord God said unto the serpent,
    Because thou hast done this, thou art
    cursed above all cattle, and above every
    beast of the field; upon thy belly shalt
    thou go, and dust shalt thou eat all the
    days of thy life: And I will put enmity
    between thee and the woman, and between
    thy seed and her seed; it shall bruise
    thy head, and thou shalt bruise his
    heel.

    3:15-King James
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>If you have a leading newline:</h3>
<p>Heredocs can contain a literal newline, or you can prepend one.</p>
<pre><code>indent = '    '

indent_me = '''
Hello
World
''' 
indented = indent_me.replace('\n', '\n' + indent)
print(indented)
</code></pre>
<p>Here is it shown in pprint dump:</p>
<blockquote>
<p>&gt;&gt;&gt; pprint(indented)</p>
<p><code>'    Hello\n    World\n    '</code></p>
</blockquote>
<p>Awkward, but works</p>
<hr/>
<h3>If you do not have a leading newline:</h3>
<pre><code>indent = '    '

indent_me = '''\
Hello
World
''' 
indented = indent + indent_me.replace('\n', '\n' + indent)
print(indented)
</code></pre>
<p>Optional, trim first newline and trailing spaces/tabs</p>
<pre><code>.lstrip('\n').rstrip(' \t')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a script located in the python <code>Tools/Scripts/</code> directory which is primarily for fixing the indentation of entire python files.  However, you can easily tweak the script a little and apply it to sections/lines of code, or other types of files.</p>
<p>The script is also located online, here:<br/>
<a href="http://svn.python.org/projects/python/trunk/Tools/scripts/reindent.py" rel="nofollow">http://svn.python.org/projects/python/trunk/Tools/scripts/reindent.py</a></p>
<p>Or, as a module here:<br/>
<a href="http://pypi.python.org/pypi/Reindent/0.1.0" rel="nofollow">http://pypi.python.org/pypi/Reindent/0.1.0</a></p>
</div>
<span class="comment-copy">What platform are you running on. On many you could use some external formatter like uncrustify, astyle or indent.</span>
<span class="comment-copy">@honk, this is on ubuntu 10.10 running python 2.6</span>
<span class="comment-copy"><code>mytext = re.sub( '^',' '*4, mytext ,flags=re.MULTILINE )</code></span>
<span class="comment-copy">the output is thrown inside the same file by cog</span>
<span class="comment-copy">i think this can work, since in any case i have to add <code>cog</code> as a pre-build step, i might as well add <code>indent</code> or whatever in it</span>
<span class="comment-copy">Thanks, I found this useful. However, if the text to be indented <i>ends</i> in a newline this will add padding afterwards, which will indent whatever comes next. So, best to add a check for that if it's important.</span>
<span class="comment-copy">@Beright: Sorry, I think you bewrong about that. The <code>text</code> in my answer ends with a newline. If you add a <code>print 'another line'</code> at the end of it that will <i>not</i> be indented.</span>
<span class="comment-copy">No I Beright. If you place a comma after your print statement ("print indent(text, 4),") and then, on the next line, put "print 'another line'" it will in fact be indented 4 spaces (plus an extra space from the comma)</span>
<span class="comment-copy">@Beright: As I said, the text in the example in my answer does end in a newline -- it's right after the word "James" before the ending triple-quotes. You must mean additional newlines beyond that -- as indeed it will indent such trailing blank lines. That can easily be remedied by changing the last line to <code>return padding + ('\n'+padding).join(lines.rstrip().split('\n'))</code>. It keeps removing the @martineau because it'll happen automatically since your comment is under my answer.</span>
<span class="comment-copy">Since python v3.3, you can just <code>import textwrap</code> and then <code>textwrap.indent(text, ' ' * 4)</code></span>
<span class="comment-copy">I think he wanted to format C++ code.</span>
<span class="comment-copy">@honk Yea, I think so too, but since the <code>reindent.py</code> is only a hundred or so lines of pretty simple code, what I am suggesting is to customize it a little and apply it to the c/c++.  Or even subclass the <code>Reindenter</code> class in <code>reindent.py</code> to make it specific for c++.  It may not be the quickest solution, but its an option ).</span>
