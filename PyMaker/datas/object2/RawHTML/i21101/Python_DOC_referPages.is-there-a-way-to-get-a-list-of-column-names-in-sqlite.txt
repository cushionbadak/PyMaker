<div class="post-text" itemprop="text">
<p>I want to get a list of column names from a table in a database. Using pragma I get a list of tuples with a lot of unneeded information. Is there a way to get only the column names? So I might end up with something like this:</p>
<blockquote>
<p>[Column1, Column2, Column3, Column4]</p>
</blockquote>
<p>The reason why I absolutely need this list is because I want to search for a column name in the list and get the index because the index is used in a lot of my code.</p>
<p>Is there a way of getting a list like this?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use sqlite3 and <a href="http://www.python.org/dev/peps/pep-0249/" rel="noreferrer">pep-249</a></p>
<pre><code>import sqlite3
connection = sqlite3.connect('~/foo.sqlite')
cursor = connection.execute('select * from bar')
</code></pre>
<p><b>cursor.description</b> is description of columns</p>
<pre><code>names = list(map(lambda x: x[0], cursor.description))
</code></pre>
<p>Alternatively you could use a list comprehension:</p>
<pre><code>names = [description[0] for description in cursor.description]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative to the <strong>cursor.description</strong> solution from <a href="https://stackoverflow.com/users/975918/smallredstone">smallredstone</a> could be to use <strong>row.keys()</strong>:</p>
<pre><code>import sqlite3
connection = sqlite3.connect('~/foo.sqlite')
connection.row_factory = sqlite3.Row
cursor = connection.execute('select * from bar')
# instead of cursor.description:
row = cursor.fetchone()
names = row.keys()
</code></pre>
<p>The drawback: it only works if there is at least a row returned from the query. </p>
<p>The benefit: you can access the columns by their name (row['your_column_name'])</p>
<p>Read more about the <a href="http://docs.python.org/3/library/sqlite3.html#sqlite3.Row" rel="noreferrer">Row objects in the python documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I can tell Sqlite doesn't support INFORMATION_SCHEMA. Instead it has sqlite_master.</p>
<p>I don't think you can get the list you want in just one command. You can get the information you need using sql or pragma, then use regex to split it into the format you need</p>
<pre><code>SELECT sql FROM sqlite_master WHERE name='tablename';
</code></pre>
<p>gives you something like</p>
<pre><code>CREATE TABLE tablename(
        col1 INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        col2 NVARCHAR(100) NOT NULL,
        col3 NVARCHAR(100) NOT NULL,
)
</code></pre>
<p>Or using pragma</p>
<pre><code>PRAGMA table_info(tablename);
</code></pre>
<p>gives you something like</p>
<pre><code>0|col1|INTEGER|1||1
1|col2|NVARCHAR(100)|1||0
2|col3|NVARCHAR(100)|1||0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Quick, interactive way to see column names</strong></p>
<p>If you're working interactively in Python and just want to quickly 'see' the column names, I found cursor.description to work.</p>
<pre><code>import sqlite3
conn = sqlite3.connect('test-db.db')
cursor = conn.execute('select * from mytable')
cursor.description
</code></pre>
<p><em>Outputs something like this:</em></p>
<pre><code>(('Date', None, None, None, None, None, None),
 ('Object-Name', None, None, None, None, None, None),
 ('Object-Count', None, None, None, None, None, None))
</code></pre>
<p>Or, quick way to access and print them out.</p>
<pre><code>colnames = cursor.description
for row in colnames:
    print row[0]
</code></pre>
<p><em>Outputs something like this:</em></p>
<pre><code>Date
Object-Name
Object-Count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you know the table name, and want the names of the data columns you can use the listed code will do it in a simple and elegant way to my taste: </p>
<pre><code>import sqlite3

def get_col_names():
#this works beautifully given that you know the table name
    conn = sqlite3.connect("t.db")
    c = conn.cursor()
    c.execute("select * from tablename")
    return [member[0] for member in c.description]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I use this:</p>
<pre><code>import sqlite3

    db = sqlite3.connect('~/foo.sqlite')
    dbc = db.cursor()
    dbc.execute("PRAGMA table_info('bar')"
    ciao = dbc.fetchall()

    HeaderList=[]
    for i in ciao:
        counter=0
        for a in i:
            counter+=1
            if( counter==2):
                HeaderList.append(a)

print(HeaderList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like the answer by @thebeancounter, but prefer to parameterize the unknowns, the only problem being a vulnerability to exploits on the table name.  If you're sure it's okay, then this works:</p>
<pre><code>def get_col_names(cursor, tablename):
    """Get column names of a table, given its name and a cursor
       (or connection) to the database.
    """
    reader=cursor.execute("SELECT * FROM {}".format(tablename))
    return [x[0] for x in reader.description] 
</code></pre>
<p>If it's a problem, you could add code to sanitize the tablename.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get a list of column names by running:</p>
<pre><code>SELECT name FROM PRAGMA_TABLE_INFO('your_table');
name      
tbl_name  
rootpage  
sql
</code></pre>
<p>You can check if a certain column exists by running:</p>
<pre><code>SELECT 1 FROM PRAGMA_TABLE_INFO('your_table') WHERE name='sql';
1
</code></pre>
<p>Reference:</p>
<p><a href="https://www.sqlite.org/pragma.html#pragfunc" rel="nofollow noreferrer">https://www.sqlite.org/pragma.html#pragfunc</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It is very easy.<br/>
First create a connection , lets name it, <code>con</code>.
Then run the following code.</p>
<pre class="lang-sql prettyprint-override"><code>get_column_names=con.execute("select * from table_name limit 1")
col_name=[i[0] for i in get_column_names.description]
print(col_name)
</code></pre>
<p>You will get column name as a list</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not a sqlite user, so take this with a grain of salt; most RDBM's support the ANSI standard of the INFORMATION_SCHEMA views.  If you run the following query:</p>
<pre><code>SELECT *
FROM INFORMATION_SCHEMA.columns
WHERE table_name = 'your table'
</code></pre>
<p>You should get a table which lists all of the columns in your specified table.  IT may take some tweaking to get the output you want, but hopefully its a start.</p>
</div>
<span class="comment-copy">In python3, you can do <code>next(zip(*cursor.description))</code>, or <code>zip(*cursor.description)[0]</code> in python2</span>
<span class="comment-copy">I like the <code>row_factory</code> idea much better than the <code>cursor.description</code>. Leaving the drawback aside, your code won't be littered with <code>row[names['column_name']]</code> and instead, use a more readable pattern of <code>row['column_name']</code> (which is the whole point of python after all!).</span>
<span class="comment-copy">In the rare case that you need the column names regardless of the number of rows returned, you can always use <code>cursor.description</code> for <i>that particular case</i>.</span>
<span class="comment-copy">Isn't <code>row_factory</code> slow?</span>
<span class="comment-copy">row.keys() also doesnt work with fetchall...</span>
<span class="comment-copy">Did this recently as well. Simplest way i could find was using a few qureies above and a bit of scripting to pull what i needed.</span>
<span class="comment-copy">This only works for the simplest queries involving all columns of a single table.</span>
<span class="comment-copy">There is no query, this is to get you information about a table, not to query it.</span>
<span class="comment-copy">The pragma approach here worked well for me from pysqlite (aka sqlite3 in Python). The output is relatively easy to parse as Python objects.</span>
<span class="comment-copy">What exactly do the multiple 'None's refer to in the output of <code>cursor.descrition</code>?</span>
<span class="comment-copy">Looks like the 'None's are just empty placeholders "... To remain compatible with the Python DB API ..." according to Python docs.  See: <a href="https://docs.python.org/2/library/sqlite3.html#sqlite3.Cursor.description" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">thanks, this is better than the fetch in another answer because getting the column header doesn't start iterating through the rows, which would cause you to have to rewind if you don't want to skip row 1 in further processing</span>
<span class="comment-copy">this does not works on sqlite</span>
<span class="comment-copy">Just googled it, and it should work if your replace the period with an underscore: INFORMATION_SCHEMA_COLUMNS</span>
<span class="comment-copy">it doesn't work. it's pretty easy to download and run sqlite3 to check before you post misinformation</span>
<span class="comment-copy">Well, that's helpful; thanks!</span>
