<div class="post-text" itemprop="text">
<p>I want to save the name of the error and the traceback details into a variable.  Here's is my attempt.</p>
<pre><code>import sys
try:
    try:
        print x
    except Exception, ex:
        raise NameError
except Exception, er:
    print "0", sys.exc_info()[0]
    print "1", sys.exc_info()[1]
    print "2", sys.exc_info()[2]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>0 &lt;type 'exceptions.NameError'&gt;
1 
2 &lt;traceback object at 0xbd5fc8&gt;
</code></pre>
<p><strong>Desired Output:</strong></p>
<pre><code>0 NameError
1
2 Traceback (most recent call last):
  File "exception.py", line 6, in &lt;module&gt;
    raise NameError
</code></pre>
<p>P.S. I know this can be done easily using the traceback module, but I want to know usage of sys.exc_info()[2] object here.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I do it:</p>
<pre><code>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; try:
...   int('k')
... except:
...   var = traceback.format_exc()
... 
&gt;&gt;&gt; print var
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'k'
</code></pre>
<p>You should however take a look at the <a href="http://docs.python.org/library/traceback.html">traceback documentation</a>, as you might find there more suitable methods, depending to how you want to process your variable afterwards...</p>
</div>
<div class="post-text" itemprop="text">
<p>sys.exc_info() returns a tuple with three values (type, value, traceback). </p>
<ol>
<li>Here type gets the exception type of the Exception being handled</li>
<li><strong>value is the arguments that are being passed to constructor of exception class</strong> </li>
<li>traceback contains the stack information like where the exception occurred etc.</li>
</ol>
<p>For Example, In the following program</p>
<pre><code>try:

    a = 1/0

except Exception,e:

    exc_tuple = sys.exc_info()
</code></pre>
<p>Now If we print the tuple the values will be this.</p>
<ol>
<li>exc_tuple[0] value will be "<strong>ZeroDivisionError</strong>"</li>
<li>exc_tuple[1] value will be "<strong>integer division or modulo by zero</strong>" (String passed as parameter to the exception class)</li>
<li>exc_tuple[2] value will be "<strong>trackback object at (some memory address)</strong>"</li>
</ol>
<p>The above details can also be fetched by simply printing the exception in string format. </p>
<pre><code>print str(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>traceback.extract_stack()</code> if you want convenient access to module and function names and line numbers.</p>
<p>Use <code>''.join(traceback.format_stack())</code> if you just want a string that looks like the <code>traceback.print_stack()</code> output.</p>
<p>Notice that even with <code>''.join()</code> you will get a multi-line string, since the elements of <code>format_stack()</code> contain <code>\n</code>.  See output below.</p>
<p>Remember to <code>import traceback</code>.</p>
<p>Here's the output from <code>traceback.extract_stack()</code>.  Formatting added for readability.</p>
<pre><code>&gt;&gt;&gt; traceback.extract_stack()
[
   ('&lt;string&gt;', 1, '&lt;module&gt;', None),
   ('C:\\Python\\lib\\idlelib\\run.py', 126, 'main', 'ret = method(*args, **kwargs)'),
   ('C:\\Python\\lib\\idlelib\\run.py', 353, 'runcode', 'exec(code, self.locals)'),
   ('&lt;pyshell#1&gt;', 1, '&lt;module&gt;', None)
]
</code></pre>
<p>Here's the output from <code>''.join(traceback.format_stack())</code>.  Formatting added for readability.</p>
<pre><code>&gt;&gt;&gt; ''.join(traceback.format_stack())
'  File "&lt;string&gt;", line 1, in &lt;module&gt;\n
   File "C:\\Python\\lib\\idlelib\\run.py", line 126, in main\n
       ret = method(*args, **kwargs)\n
   File "C:\\Python\\lib\\idlelib\\run.py", line 353, in runcode\n
       exec(code, self.locals)\n  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Be careful when you take the exception object or the traceback object out of the exception handler, since this causes circular references and <code>gc.collect()</code> will fail to collect. This appears to be of a particular problem in the ipython/jupyter notebook environment where the traceback object doesn't get cleared at the right time and even an explicit call to <code>gc.collect()</code> in <code>finally</code> section does nothing. And that's a huge problem if you have some huge objects that don't get their memory reclaimed because of that (e.g. CUDA out of memory exceptions that w/o this solution require a complete kernel restart to recover).</p>
<p>In general if you want to save the traceback object, you need to clear it from references to <code>locals()</code>, like so:</p>
<pre><code>import sys, traceback, gc
type, val, tb = None, None, None
try:
    myfunc()
except:
    type, val, tb = sys.exc_info()
    traceback.clear_frames(tb)
# some cleanup code
gc.collect()
# and then use the tb:
if tb:
    raise type(val).with_traceback(tb)
</code></pre>
<p>In the case of jupyter notebook, you have to do that at the very least inside the exception handler:</p>
<pre><code>try:
    myfunc()
except:
    type, val, tb = sys.exc_info()
    traceback.clear_frames(tb)
    raise type(val).with_traceback(tb)
finally:
    # cleanup code in here
    gc.collect()
</code></pre>
<p>Tested with python 3.7.</p>
<p>p.s. the problem with ipython or jupyter notebook env is that it has <code>%tb</code> magic which saves the traceback and makes it available at any point later. And as a result any <code>locals()</code> in all frames participating in the traceback will not be freed until the notebook exits or another exception will overwrite the previously stored backtrace. This is very problematic. It should not store the traceback w/o cleaning its frames. Fix submitted <a href="https://github.com/ipython/ipython/pull/11572" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The object can be used as a parameter in <code>Exception.with_traceback()</code> function:</p>
<pre><code>except Exception as e:
    tb = sys.exc_info()
    print(e.with_traceback(tb[2]))
</code></pre>
</div>
<span class="comment-copy">Did you try printing sys.exc_info()[x].__str__()?</span>
<span class="comment-copy">You might have misunderstood what is going on in your program: what you refer to as "sys.exc_info()[2] object" is an instance of the traceback object (=you are using the traceback module already). Now, you can manipulate that object without using the helper functions in the traceback module, but that doesn't change the fact that you are still using it. :)</span>
<span class="comment-copy">So @mac please help me using accessing the value from this object with or without using the helper function.</span>
<span class="comment-copy">@dragosrsupercool - As I mentioned in my answer below, you should look at the <a href="http://docs.python.org/library/traceback.html" rel="nofollow noreferrer">traceback documentation</a>. I provided an example of how retrieve the data textually, but there are other methods of the object that allow you to extract the exception name, the row of the code, etc... the right one really depends on how you want to manipulate the value afterwards...</span>
<span class="comment-copy">acutally I did read traceback documentation and its pretty working when I use traceback module directly.. But when I use sys.exc_info()[2] which is a afcourse a traceback class object, I am not able to use those same function here.. something like 	 sys.exc_info()[2].tb_text doesnt work.. . any idea why?</span>
<span class="comment-copy">I was seeking for a method without using traceback module. Is there someway we can just print trace-back details from this object reference? sys.exc_info()[2]</span>
<span class="comment-copy">Right, that is why I thought we can do something like sys.exc_info()[2].format_exc(), but this dont work.. Thus, I wonder how can I extract value from trace-back object sys.exc_info()[2]. Any idea?</span>
<span class="comment-copy">sys.exc_info()[2].tb_text gives follow error -&gt; AttributeError: 'traceback' object has no attribute 'tb_text'</span>
<span class="comment-copy">@dragosrsupercool - <code>sys.exc_info()[2].tb_frame.f_code.co_names[3]</code>, but it make no sense whatsoever... If there is a module called <code>traceback</code> in the standard library, there is a reason for it... :)</span>
<span class="comment-copy">@codersofthedark <code>traceback.format_exception(*sys.exc_info())</code> is the way to do it. But that's functionally equivalent to <code>traceback.format_exc()</code>.</span>
<span class="comment-copy">For Python3, exc_tuple[1] (aka value) is the <i>instance</i> of the exception, not the "String passed as parameter". See: <a href="https://docs.python.org/3/library/sys.html#sys.exc_info" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.exc_info</a></span>
