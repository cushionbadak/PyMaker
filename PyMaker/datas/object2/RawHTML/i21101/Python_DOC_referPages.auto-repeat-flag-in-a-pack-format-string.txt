<div class="post-text" itemprop="text">
<p>In php, unpack() has the "*" flag which means "repeat this format until the end of input". For example, this prints 97, 98, 99</p>
<pre><code>$str = "abc";
$b = unpack("c*", $str);
print_r($b);
</code></pre>
<p>Is there something like this in python? Of course, I can do</p>
<pre><code>str = "abc"
print struct.unpack("b" * len(str), str)
</code></pre>
<p>but I'm wondering if there is a better way.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no such facility built into <code>struct.unpack</code>, but it is possible to define such a function:</p>
<pre><code>import struct

def unpack(fmt, astr):
    """
    Return struct.unpack(fmt, astr) with the optional single * in fmt replaced with
    the appropriate number, given the length of astr.
    """
    # http://stackoverflow.com/a/7867892/190597
    try:
        return struct.unpack(fmt, astr)
    except struct.error:
        flen = struct.calcsize(fmt.replace('*', ''))
        alen = len(astr)
        idx = fmt.find('*')
        before_char = fmt[idx-1]
        n = (alen-flen)/struct.calcsize(before_char)+1
        fmt = ''.join((fmt[:idx-1], str(n), before_char, fmt[idx+1:]))
        return struct.unpack(fmt, astr)

print(unpack('b*','abc'))
# (97, 98, 99)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4 and later, you can use the new function <a href="https://docs.python.org/3/library/struct.html#struct.iter_unpack" rel="nofollow noreferrer"><code>struct.iter_unpack</code></a>.</p>
<blockquote>
<p><code>struct.iter_unpack(fmt, buffer)</code></p>
<p>Iteratively unpack from the buffer buffer according to the format string fmt. This function returns an iterator which will read equally-sized chunks from the buffer until all its contents have been consumed. The bufferâ€™s size in bytes must be a multiple of the size required by the format, as reflected by calcsize().<br/><br/>
  Each iteration yields a tuple as specified by the format string.</p>
</blockquote>
<p>Let's say we want to unpack the array <code>b'\x01\x02\x03'*3</code> with the repeating format string <code>'&lt;2sc'</code> (2 characters followed by a single character, repeat until done). </p>
<p>With <code>iter_unpack</code>, you can do the following:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; some_bytes = b'\x01\x02\x03'*3
&gt;&gt;&gt; fmt = '&lt;2sc'
&gt;&gt;&gt; 
&gt;&gt;&gt; tuple(struct.iter_unpack(fmt, some_bytes))
((b'\x01\x02', b'\x03'), (b'\x01\x02', b'\x03'), (b'\x01\x02', b'\x03'))
</code></pre>
<p>If you want to un-nest this result, you can do so with <a href="https://docs.python.org/3.5/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; tuple(chain.from_iterable(struct.iter_unpack(fmt, some_bytes)))
(b'\x01\x02', b'\x03', b'\x01\x02', b'\x03', b'\x01\x02', b'\x03')
</code></pre>
<p>Of course, you could just employ a nested comprehension to do the same thing.</p>
<pre><code>&gt;&gt;&gt; tuple(x for subtuple in struct.iter_unpack(fmt, some_bytes) for x in subtuple)
(b'\x01\x02', b'\x03', b'\x01\x02', b'\x03', b'\x01\x02', b'\x03')
</code></pre>
</div>
<span class="comment-copy"><code>[ord(i) for i in string]</code></span>
<span class="comment-copy">JBernardo, you should consider moving this to answer.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/9176354/unpack-format-characters-in-python">Unpack format characters in Python</a></span>
<span class="comment-copy">thanks, that was helpful</span>
