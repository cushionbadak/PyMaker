<div class="post-text" itemprop="text">
<p>I want to gzip a file in Python. I am trying to use the subprocss.check_call(), but it keeps failing with the error 'OSError: [Errno 2] No such file or directory'. Is there a problem with what I am trying here? Is there a better way to gzip a file than using subprocess.check_call?</p>
<pre><code>from subprocess import check_call

def gZipFile(fullFilePath)
    check_call('gzip ' + fullFilePath)
</code></pre>
<p>Thanks!!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>check_call(['gzip', fullFilePath])
</code></pre>
<p>Depending on what you're doing with the data of these files, Skirmantas's link to <a href="http://docs.python.org/library/gzip.html">http://docs.python.org/library/gzip.html</a> may also be helpful.  Note the examples near the bottom of the page.  If you aren't needing to access the data, or don't have the data already in your Python code, executing gzip may be the cleanest way to do it so you don't have to handle the data in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a module <a href="http://docs.python.org/library/gzip.html" rel="nofollow noreferrer">gzip</a>. Usage:</p>
<p>Example of how to create a compressed GZIP file:</p>
<pre><code>import gzip
content = b"Lots of content here"
f = gzip.open('/home/joe/file.txt.gz', 'wb')
f.write(content)
f.close()
</code></pre>
<p>Example of how to GZIP compress an existing file:</p>
<pre><code>import gzip
f_in = open('/home/joe/file.txt')
f_out = gzip.open('/home/joe/file.txt.gz', 'wb')
f_out.writelines(f_in)
f_out.close()
f_in.close()
</code></pre>
<p><strong>EDIT:</strong> </p>
<p><a href="https://stackoverflow.com/a/11524322/708434">Jace Browning's answer</a> using <code>with</code> in Python &gt;= 2.7 is obviously more terse and readable, so my second snippet would (and should) look like:</p>
<pre><code>import gzip
with open('/home/joe/file.txt', 'rb') as f_in, gzip.open('/home/joe/file.txt.gz', 'wb') as f_out:
    f_out.writelines(f_in)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.7 format:</p>
<pre><code>import gzip

with open("path/to/file", 'rb') as orig_file:
    with gzip.open("path/to/file.gz", 'wb') as zipped_file:
        zipped_file.writelines(orig_file)
</code></pre>
<hr/>
<p>Even shorter (Tested on python 2.7.6)</p>
<pre><code>with open('path/to/file') as src, gzip.open('path/to/file.gz', 'wb') as dst:        
    dst.writelines(src)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/library/gzip.html" rel="noreferrer">gzip</a> module:</p>
<pre><code>import gzip
import os

in_file = "somefile.data"
in_data = open(in_file, "rb").read()
out_gz = "foo.gz"
gzf = gzip.open(out_gz, "wb")
gzf.write(in_data)
gzf.close()

# If you want to delete the original file after the gzip is done:
os.unlink(in_file)
</code></pre>
<hr/>
<p>Your error: <code>OSError: [Errno 2] No such file or directory'</code> is telling you that the file <code>fullFilePath</code> does not exist.  If you still need to go that route, please make sure that file exists on your system and you are using an absolute path not relative.</p>
</div>
<div class="post-text" itemprop="text">
<p>the documentation on this is actually insanely straightforward</p>
<p>Example of how to read a compressed file:</p>
<pre><code>import gzip
f = gzip.open('file.txt.gz', 'rb')
file_content = f.read()
f.close()
</code></pre>
<p>Example of how to create a compressed GZIP file:</p>
<pre><code>import gzip
content = "Lots of content here"
f = gzip.open('file.txt.gz', 'wb')
f.write(content)
f.close()
</code></pre>
<p>Example of how to GZIP compress an existing file:</p>
<pre><code>import gzip
f_in = open('file.txt', 'rb')
f_out = gzip.open('file.txt.gz', 'wb')
f_out.writelines(f_in)
f_out.close()
f_in.close()
</code></pre>
<p><a href="https://docs.python.org/2/library/gzip.html" rel="nofollow">https://docs.python.org/2/library/gzip.html</a></p>
<p>That's the whole documentation . . . </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import gzip

def gzip_file(src_path, dst_path):
    with open(src_path, 'rb') as src, gzip.open(dst_path, 'wb') as dst:
        for chunk in iter(lambda: src.read(4096), b""):
            dst.write(chunk)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3.7/library/gzip.html#examples-of-usage" rel="nofollow noreferrer">docs for Python3</a></p>
<h2>Gzip an existing file</h2>
<pre><code>import gzip
import shutil
with open('file.txt', 'rb') as f_in:
    with gzip.open('file.txt.gz', 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)

# or because I hate nested with statements

import gzip
import shutil
from contextlib import ExitStack
with ExitStack() as stack:
    f_in = stack.enter_context(open('file.txt', 'rb'))
    f_out = stack.enter_context(gzip.open('file.txt.gz', 'wb'))
    shutil.copyfileobj(f_in, f_out)
</code></pre>
<h2>Create a new gzip file:</h2>
<pre><code>import gzip
content = b"Lots of content here"
with gzip.open("file.txt.gz", "wb") as f:
    f.write(content)
</code></pre>
<p><strong><em>Note the fact that content is turned into bytes</em></strong></p>
<p>Another method for if you aren't creating content as a string/byte literal like the above example would be</p>
<pre><code>import gzip
# get content as a string from somewhere else in the code
with gzip.open("file.txt.gz", "wb") as f:
    f.write(content.encode("utf-8"))
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3">this SO question</a> for a discussion of other encoding methods.</p>
</div>
<span class="comment-copy">Why not <a href="http://docs.python.org/library/gzip.html" rel="nofollow noreferrer">docs.python.org/library/gzip.html</a> ?</span>
<span class="comment-copy">related: to create a gzipped tarball <code>archive.tar.gz</code> from a directory <code>/dir/path</code>, you could use <code>shutil.make_archive('archive', 'gztar', '/dir/path')</code></span>
<span class="comment-copy">well, idk if “clean” is the right word for it but it certainly is the fastest way, and the one needing the least code on your side.</span>
<span class="comment-copy">does the second version replaces the original file with the gzipped one, as the gzip command would ? It seems it doesn't.</span>
<span class="comment-copy">@Benoît: Since the output file has a different name than the one being read, it's pretty obvious that it doesn't do that. Doing so would require the compressed data to be temporarily stored somewhere else until the all the data in the original file had been compressed.</span>
<span class="comment-copy">Using gzip, the ouput filename is different from the input filename. And it still removes the input file after having created the output one. I was simply asking whether the python gzip module did the same thing.</span>
<span class="comment-copy">the file opened in read mode is just read from normally. there’s no way for the gzip module to know where the data came from and do something like deleting the file. use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink" rel="nofollow noreferrer"><code>Path(in_path).unlink()</code></a> to remove the file afterwards. or just use <code>check_call(['gzip', in_path])</code>, which compresses faster and deletes the file.</span>
<span class="comment-copy">I suggest a correction: content = b"Lots of content here"</span>
<span class="comment-copy">Thanks everyone for the quick repoonses.Everyone here is suggesting gzip.I had tried that as well.Is it a better way?The reason why I am not using that is that it leaves the original file as is.So I end up with both versions -regular and gzip file. I am accessing the data of the file though.@retracile, your fix worked,thanks a ton.I am still wondering if I should use subprocess or gzip.</span>
<span class="comment-copy">@Rinks The easiest way to do that would be: When the gzip is done, call <code>os.unlink(original_File_Name)</code> to delete the original file that you made the gzip from.  See my edits.</span>
<span class="comment-copy">@Rinks: <i>The reason why I am not using that is that it leaves the original file as is</i> - so why don't you delete file afterwards?</span>
<span class="comment-copy">Thanks again. I can certainly delete the file later on. I am going to test both methods -gzip and check_call for a few days and finalize on one.</span>
<span class="comment-copy">@Rinks Cool, good luck!</span>
<span class="comment-copy">I didn't know about <code>ExitStack</code>...interesting!</span>
