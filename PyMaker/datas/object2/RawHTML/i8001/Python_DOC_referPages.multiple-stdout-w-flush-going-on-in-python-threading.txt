<div class="post-text" itemprop="text">
<p>I have a small piece of code that I made to test out and hopefully debug the problem without having to modify the code in my main applet in Python. This has let me to build this code:</p>
<pre><code>#!/usr/bin/env python
import sys, threading, time

def loop1():
    count = 0
    while True:
        sys.stdout.write('\r thread 1: ' + str(count))
        sys.stdout.flush()
        count = count + 1
        time.sleep(.3)
        pass
    pass

def loop2():
    count = 0
    print ""
    while True:
        sys.stdout.write('\r thread 2: ' + str(count))
        sys.stdout.flush()
        count = count + 2
        time.sleep(.3)
    pass

if __name__ == '__main__':
    try:
        th = threading.Thread(target=loop1)
        th.start()

        th1 = threading.Thread(target=loop2)
        th1.start()
        pass
    except KeyboardInterrupt:
        print ""
        pass
    pass
</code></pre>
<p>My goal with this code is to be able to have both of these threads displaying output in stdout format (with flushing) at the same time and have then side by side or something. problem is that I assume since it is flushing each one, it flushes the other string by default. I don't quite know how to get this to work if it is even possible. </p>
<p>If you just run one of the threads, it works fine. However I want to be able to run both threads with their own string running at the same time in the terminal output. Here is a picture displaying what I'm getting:</p>
<p>terminal screenshot</p>
<p><img alt="" src="https://i.stack.imgur.com/GfTpI.png"/></p>
<p>let me know if you need more info. thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of allowing each thread to output to stdout, a better solution is to have one thread control stdout exclusively. Then provide a threadsafe channel for the other threads to dispatch data to be output.</p>
<p>One good method to achieve this is to share a <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">Queue</a> between all threads. Ensure that only the output thread is accessing data after it has been added to the queue.</p>
<p>The output thread can store the last message from each other thread and use that data to format stdout nicely. This can include clearing output to display something like this, and update it as each thread generates new data.</p>
<pre><code>Threads
#1: 0
#2: 0
</code></pre>
<h1>Example</h1>
<p>Note that there are a few gotchas in passing arguments to a thread, as well as my use of a few tricks to ensure a safe exit, such as making the threads daemons. No newlines are used because <code>\r</code> carriage returns only restart the current line of output.</p>
<pre><code>import queue, threading
import time, sys

q = queue.Queue()
keepRunning = True

def loop_output():
    thread_outputs = dict()

    while keepRunning:
        try:
            thread_id, data = q.get_nowait()
            thread_outputs[thread_id] = data
        except queue.Empty:
            # because the queue is used to update, there's no need to wait or block.
            pass

        pretty_output = ""
        for thread_id, data in thread_outputs.items():
            pretty_output += '({}:{}) '.format(thread_id, str(data))

        sys.stdout.write('\r' + pretty_output)
        sys.stdout.flush()
        time.sleep(1)

def loop_count(thread_id, increment):
    count = 0
    while keepRunning:
        msg = (thread_id, count)
        try:
            q.put_nowait(msg)
        except queue.Full:
            pass

        count = count + increment
        time.sleep(.3)
        pass
    pass

if __name__ == '__main__':
    try:
        th_out = threading.Thread(target=loop_output)
        th_out.start()

        # make sure to use args, not pass arguments directly
        th0 = threading.Thread(target=loop_count, args=("Thread0", 1))
        th0.daemon = True
        th0.start()

        th1 = threading.Thread(target=loop_count, args=("Thread1", 3))
        th1.daemon = True
        th1.start()

    # Keep the main thread alive to wait for KeyboardInterrupt
    while True:
        time.sleep(.1)

    except KeyboardInterrupt:
        print("Ended by keyboard stroke")
        keepRunning = False
        for th in [th0, th1]:
            th.join()
</code></pre>
<p>Example Output:</p>
<pre><code>(Thread0:110) (Thread1:330)
</code></pre>
</div>
<span class="comment-copy">Printing to stdout isn't thread safe. Either use the <code>logging</code> module, implement some sort of locking, or move the printing to another thread.</span>
<span class="comment-copy">I use stdout because I like how it will show (for exaple) a number, then flush it and print a new one in it's old place. Thus creating a stationary spot for the output instead of having it just create a new line for every number just to print it.</span>
<span class="comment-copy">Can you write up some code for me please?</span>
<span class="comment-copy">@BlackVikingPro All done</span>
<span class="comment-copy">@BlackVikingPro Welcome to StackOverflow by the way! If any answers help solve your problem or give you useful insight, please be sure to upvote them and select a best answer when the question has been solved to your liking :)</span>
