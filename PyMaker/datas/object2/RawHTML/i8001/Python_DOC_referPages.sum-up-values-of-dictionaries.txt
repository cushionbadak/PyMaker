<div class="post-text" itemprop="text">
<p>I have a dictionary such as below:</p>
<pre><code>grocery={
    'James': {'Brocolli': 3, 'Carrot': 3, 'Cherry': 5},
    'Jill': {'Apples': 2, 'Carrot': 4, 'Tomatoes': 8},
    'Sunny': {'Apples': 5, 'Carrot': 2, 'Cherry': 2, 'Chicken': 3, 'Tomatoes': 6}
}
food={}
for a,b in grocery.items():
     for i,j in b.items():
          food[i]+=(b.get(i,0))
</code></pre>
<p>I am trying to calculate total of each food item and it is not working as expected.</p>
<p>For eg: I would like to count total of Carrot, total of Apples and so on.</p>
<p>The above code is giving me following error:</p>
<pre><code>File "dictionary1.py", line 6, in &lt;module&gt;
      food[i]+=(b.get(i,0))
   KeyError: 'Cherry
</code></pre>
<p>How to sum up total of each item?</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply do</p>
<p><code>from collections import defaultdict</code></p>
<p><code>food = defaultdict(int)</code>  &lt;-- default value of 0 to every non existent key</p>
<p>..and your code should work :)</p>
<p>PS. You get the error because you are trying to add values to uninitialized keys... Don't assume that non existent keys start from 0... </p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>food</code> dictionary is empty and has no keys at the start; you can't just sum up a value to something that isn't there yet.</p>
<p>Instead of <code>+=</code>, get the current value <em>or a default</em>, using <code>dict.get()</code> again:</p>
<pre><code>food[i] = food.get(i, 0) + b.get(i,0)
</code></pre>
<p>You don't really need to use <code>b.get()</code> here, as you <em>already</em> have the values of <code>b</code> in the variable <code>j</code>:</p>
<pre><code>food[i] = food.get(i, 0) + j
</code></pre>
<p>You could also use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code> object</a> to make keys 'automatically' exist when you try to access them, with a default value:</p>
<pre><code>from collections import defaultdict

food = defaultdict(int)  # insert int() == 0 when a key is not there yet
</code></pre>
<p>and in the inner loop then use <code>food[i] += j</code>.</p>
<p>I strongly recommend you use better names for your variables. If you iterate over <code>dict.values()</code> rather than <code>dict.items()</code>, you can look at the values only when you don't need the keys (like for the outer <code>for</code> loop):</p>
<pre><code>food = {}
for shopping in grocery.values():
    for name, quantity in shopping.items():
        food[name] = food.get(name, 0) + quantity
</code></pre>
<p>Another option is to use a dedicated counting and summing dictionary subclass, called <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a>. This class directly supports summing your groceries in a single line:</p>
<pre><code>from collections import Counter

food = sum(map(Counter, grocery.values()), Counter())
</code></pre>
<p><code>map(Counter, ...)</code> creates <code>Counter</code> objects for each of your input dictionaries, and <code>sum()</code> adds up all those objects (the extra <code>Counter()</code> argument 'primes' the function to use an empty <code>Counter()</code> as a starting value rather than an integer <code>0</code>).</p>
<p>Demo of the  latter:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; sum(map(Counter, grocery.values()), Counter())
Counter({'Tomatoes': 14, 'Carrot': 9, 'Cherry': 7, 'Apples': 7, 'Brocolli': 3, 'Chicken': 3})
</code></pre>
<p>A <code>Counter</code> is still a dictionary, just one with extra functionality. You can always go back to a dictionary by passing the <code>Counter</code> to <code>dict()</code>:</p>
<pre><code>&gt;&gt;&gt; food = sum(map(Counter, grocery.values()), Counter())
&gt;&gt;&gt; dict(food)
{'Brocolli': 3, 'Carrot': 9, 'Cherry': 7, 'Apples': 7, 'Tomatoes': 14, 'Chicken': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get the error, because in the beginning the keys, i.e. 'Apples', 'Tomatoes', ..., do not exist in food. You can correct this with a try-except block:</p>
<pre><code>grocery={
    "Jill":{"Apples":2, "Tomatoes":8,"Carrot":4},
    "James":{"Carrot":3,"Brocolli":3,"Cherry":5},
    "Sunny":{"Chicken":3,"Apples":5,"Carrot":2,"Tomatoes":6,"Cherry":2}
}
food={}
for a,b in grocery.items():
    for i,j in b.items():
        try:
            food[i] += j
        except KeyError:
            food[i] = j
</code></pre>
<p>Also, you can get rid of the b.get(i,0) statement, because you already iterate through b and only get values (j) that actually exist in b.</p>
</div>
<span class="comment-copy">You can't use <code>+=</code>, you need <code>food[i] = food.get(i, 0) + j</code></span>
