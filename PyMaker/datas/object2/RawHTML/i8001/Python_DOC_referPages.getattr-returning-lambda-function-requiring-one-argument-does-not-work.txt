<div class="post-text" itemprop="text">
<p>I am in the process of learning Python 3 and just ran into the <code>getattr</code> function. From what I can tell, it is invoked when the attribute call is not found in the class definition as a function or a variable.</p>
<p>In order to understand the behaviour, I wrote the following test class (based on what I've read):</p>
<pre><code>class Test(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar

    def __getattr__(self, itm):
        if itm is 'test':
            return lambda x: "%s%s" % (x.foo, x.bar)
        raise AttributeError(itm)
</code></pre>
<p>And I then initate my object and call the non-existent function <code>test</code> which, expectedly, returns the reference to the function:</p>
<pre><code>t = Test("Foo", "Bar")    
print(t.test)
&lt;function Test.__getattr__.&lt;locals&gt;.&lt;lambda&gt; at 0x01A138E8&gt;
</code></pre>
<p>However, if I call the function, the result is not the expected "FooBar", but an error:</p>
<pre><code>print(t.test())
TypeError: &lt;lambda&gt;() missing 1 required positional argument: 'x'
</code></pre>
<p>In order to get my expected results, I need to call the function with the same object as the first parameter, like this:</p>
<pre><code>print(t.test(t))
FooBar
</code></pre>
<p>I find this behaviour rather strange, as when calling <code>p.some_function()</code>, is said to add <code>p</code> as the first argument.</p>
<p>I would be grateful if someone could shine some light over this headache of mine. I am using PyDev in Eclipse.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__getattr__</code> return values are "raw", they don't behave like class attributes, invoking the descriptor protocol that plain methods involve that causes the creation of bound methods (where <code>self</code> is passed implicitly). To bind the function as a method, you need to perform the binding manually:</p>
<pre><code>import types

...

def __getattr__(self, itm):
    if itm is 'test':  # Note: This should really be == 'test', not is 'test'
        # Explicitly bind function to self
        return types.MethodType(lambda x: "%s%s" % (x.foo, x.bar), self)
    raise AttributeError(itm)
</code></pre>
<p><a href="https://docs.python.org/3/library/types.html#types.MethodType" rel="nofollow noreferrer"><code>types.MethodType</code> is poorly documented</a> (the interactive help is more helpful), but basically, you pass it a user-defined function and an instance of a class and it returns a bound method that, when called, implicitly passes that instance as the first positional argument (the <code>self</code> argument).</p>
</div>
<div class="post-text" itemprop="text">
<p>To get what you want, you need a lambda that doesn't take arguments:</p>
<pre><code>return lambda: "%s%s" % (self.foo, self.bar)
</code></pre>
<p>But you should really use a <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer"><strong>property</strong></a> for this, instead.</p>
<pre><code>class Test(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar

    @property
    def test(self):
        return "{}{}".format(self.foo, self.bar)

t = Test("Foo", "Bar")
print(t.test)
# FooBar
</code></pre>
<p>Note the lack of parentheses.</p>
<hr/>
<p>If you're absolutely determined that it <strong>must</strong> be a function, do this:</p>
<pre><code>class Test(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar

    @property
    def test(self):
        return lambda: "{}{}".format(self.foo, self.bar)

t = Test("Foo", "Bar")
print(t.test())
# FooBar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to create something that behaves like a bound method, you could simply use <code>functools.partial</code> to bind the instance to the function:</p>
<pre><code>from functools import partial

class Test(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar

    def __getattr__(self, itm):
        if itm == 'test':  # you shouldn't use "is" for comparisons!
            return partial(lambda x: "%s%s" % (x.foo, x.bar), self)
        raise AttributeError(itm)
</code></pre>
<p>The test:</p>
<pre><code>t = Test("Foo", "Bar")    
print(t.test)
# functools.partial(&lt;function Test.__getattr__.&lt;locals&gt;.&lt;lambda&gt; at 0x0000020C70CA6510&gt;, &lt;__main__.Test object at 0x0000020C7217F8D0&gt;)
print(t.test())
# FooBar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>"I find this behaviour rather strange, as when calling
  p.some_function(), is said to add p as the first argument."</p>
</blockquote>
<p><code>some_function</code> is actually a <em>method</em>, which is why it gets passed an instance <em>implicitly</em> when the method is "bound to an object." But plain functions don't work that way, only functions <em>defined in the class body have this magic applied to them automagically</em>. And actually, unbound methods (accessed via the class directly) function the same as normal functions! The terminology "bound and unbound" methods no longer applies, because in Python 3 we only have methods and functions (getting rid of the distinction between unbound methods and plain functions). When an instance is instantiated, accessing the attribute returns a <em>method</em> which implicitly calls the instance on invocation.</p>
<pre><code>&gt;&gt;&gt; class A:
...     def method(self, x):
...         return x
...
&gt;&gt;&gt; a.method
&lt;bound method A.method of &lt;__main__.A object at 0x101a5b3c8&gt;&gt;
&gt;&gt;&gt; type(a.method)
&lt;class 'method'&gt;
</code></pre>
<p>However, if you access the attribute of the <em>class</em> you'll see it's just a function:</p>
<pre><code>&gt;&gt;&gt; A.method
&lt;function A.method at 0x101a64950&gt;
&gt;&gt;&gt; type(A.method)
&lt;class 'function'&gt;
&gt;&gt;&gt; a = A()
</code></pre>
<p>Now, observe:</p>
<pre><code>&gt;&gt;&gt; bound = a.method
&gt;&gt;&gt; bound(42)
42
&gt;&gt;&gt; unbound = A.method
&gt;&gt;&gt; unbound(42)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method() missing 1 required positional argument: 'x'
</code></pre>
<p>But this is the magic of classes. Note, you can even add functions to classes dynamically, and they get magically turned into methods when you invoke them on an instance:</p>
<pre><code>&gt;&gt;&gt; A.method2 = lambda self, x: x*2
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.method2(4)
8
</code></pre>
<p>And, as one would hope, the behavior still applies to objects already created!</p>
<pre><code>&gt;&gt;&gt; a.method2(2)
4
</code></pre>
<p>Note, this <em>doesn't work</em> if you dynamically add to an <em>instance</em>:</p>
<pre><code>&gt;&gt;&gt; a.method3 = lambda self, x: x*3
&gt;&gt;&gt; a.method3(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: &lt;lambda&gt;() missing 1 required positional argument: 'x'
</code></pre>
<p>You have to do the magic yourself:</p>
<pre><code>&gt;&gt;&gt; from types import MethodType
&gt;&gt;&gt; a.method4 = MethodType((lambda self, x: x*4), a)
&gt;&gt;&gt; a.method4(4)
16
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Notice that if you do <code>print(t.__getattr__)</code> you get something like <code>&lt;bound method Test.__getattr__ of &lt;__main__.Test object at 0x00000123FBAE4DA0&gt;&gt;</code>. The key point is that methods defined on an object are said to be 'bound' and so always take the object as the first parameter. Your lambda function is just an anonymous function not 'bound' to anything, so for it to access the object it needs to be explicitly passed in.</p>
<p>I presume you are only doing this to experiment with using `__getattr__', as what you are doing could be much more easily achieved by making your lambda a method on the object.</p>
</div>
<span class="comment-copy">Why are you using a <code>lambda</code> here at all? Just return <code>return "%s%s" % (x.foo, x.bar)</code></span>
<span class="comment-copy">Originally, the use of <code>lambda</code> in this context comes from an example. However, your solution will produce an error as the variable <code>x</code> comes from the lambda expression. Even if I replace it with <code>self</code>, it will not be a function, which is of interest, but a string.</span>
<span class="comment-copy">OK, but <i>why do you want to to be a function</i>??? I meant you should just return a string, i meant <code>"%s%s" % (self.foo, self.bar)</code></span>
<span class="comment-copy">The sole reason for it to be a function is because of an example I read <a href="https://antrix.net/static/pages/python-for-java/online/" rel="nofollow noreferrer">antrix.net/static/pages/python-for-java/online</a> which I could not get my head around and when I tried it, it didn't work out for me like in the example. I guess this might have to do with the example not being Python 3, though, but rather 2.</span>
<span class="comment-copy">That's clever - I always used <code>partial</code>. Good to know there's an explicit type for <code>method</code>s. :)</span>
<span class="comment-copy">@MSeifert: Yar. <code>partial</code> mostly works, but it doesn't benefit from some of the optimizations for bound methods, and it doesn't behave like a bound method for introspection purposes, which can be frustrating when engaged in metaprogramming. In Python 2, it could be abused even further, to turn C built-in methods into unbound methods, but sadly, with the demise of the concept of unbound methods, that's no longer possible in Python 3.</span>
<span class="comment-copy">@MSeifert You could have always use <code>MethodType = type(a.some_method)</code></span>
<span class="comment-copy">@juanpa.arrivillaga: Which <a href="https://github.com/python/cpython/blob/3.6/Lib/types.py#L34" rel="nofollow noreferrer">is actually what the <code>types</code> module does</a>. :-) Needs to create a user-defined class to do so though, since C built-ins don't obey the same rules.</span>
<span class="comment-copy">@juanpa.arrivillaga That's a bit tricky because methods on classes are <code>function</code>s, methods on instances are <code>method</code>s and methods on builtin-types are <code>method-descriptor</code>s or <code>builtin_function_or_method</code>. (tested on Python-3.5). But yes, when <code>a</code> is an instance of a python class you're right :)</span>
<span class="comment-copy">It makes perfect sense talking about methods and functions. Of course, what I did was creating a function behaving like a "static method" (to use Java language) which was only callable from instantiated classes. I now realize my mistake. :-)</span>
<span class="comment-copy">@ChristofferCalås yeah, Python has a <a href="https://docs.python.org/3.6/library/functions.html#staticmethod" rel="nofollow noreferrer">built-in decorator</a> to mimic the static methods from languages like Java, but note it isn't actually intrinsic to the class system. It basically makes a <i>property</i>. Honestly, I have never used a static method in my Python code, if I need a function that doesn't make use of the instance (or the class) then I just make it a module-level function. A lot of things are done more simply that way when you aren't forced to write everything as a class definition, as you are in Java.</span>
<span class="comment-copy">I definitely see your point, and I totally agree. The resemblance of Python's module-level functions to Java's static methods are very apparent, and there seem to be no practical difference at first glance. Thanks for this valuable remark.</span>
<span class="comment-copy">@ChristofferCalås yes, Python let's you write in the procedural style. Many OO purists say this is bad, but I actually think Python is <i>more</i> object-oriented than Java since <i>everything</i> is an object, and there are no primitive types. If module-level functions make OO-purists uneasy, they can relax and realize that a module <i>is just another type of object</i>, and the functions are <i>attributes</i> of the module object...</span>
