<div class="post-text" itemprop="text">
<p>I have this method:</p>
<pre><code>def filter_branches_by_names(self, names, exclude=False):
    """Filter branches list using names list.

    Args:
        names (list): names list to use as
            filter condition.
        exclude (bool): If set to False, keep branches in
            names list. If set to True, keep branches not in names
            list. Optional, default: False.
    Returns:
        branch (list): list of git branch objects.
    """
    heads = self.repo.heads
    if exclude:
        return [head for head in heads if head.name not in names]
    else:
        return [head for head in heads if head.name in names]
</code></pre>
<p>It filters out branch objects that are accessed using <code>gitPython</code> library. I do not know if that is something special with library (or it works for all objects), but when I use <code>sorted</code> on result of that function, it actually does not sort those objects.</p>
<p>I mean this does not work:</p>
<pre><code>sorted(self.filter_branches_by_names(['a', 'b'])
</code></pre>
<p>This works:</p>
<pre><code>sorted(self.filter_branches_by_names(['a', 'b'], key=lambda x: x.name)
</code></pre>
<p>I'm using sorted for my unittests to check if I get correct branches when using that method, so I actually do not care how it is sorted, as long as both result and compared against lists are sorted the same.</p>
<p>So is <code>sorted</code> intended to not sort objects (I thought it uses some kind of default parameter to sort by) when not specifying <code>key</code> or it is something else here?</p>
<p><strong>NOTE: I'm not saying I'm expecting it to sort by <code>name</code> attribute. What I'm saying it does not sort at all, when not specifying key for <code>sorted</code>. It seems people misunderstood me.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The base class <code>object</code> defines all 6 rich comparison methods: <code>__eq__</code>, <code>__ge__</code>, <code>__gt__</code>, and so on.  These default methods compare by integer object identity, as returned by <code>id(obj)</code>.  For most purposes, one may consider ids to be random unique integers.  Any class can define more appropriate comparison methods for instances of the class.  It appears that the branch object class does not.  My guess is that the authors of the class expect you to select an attribute for sorting.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem was not with <code>sorted</code>, the problem was that every time branches are accessed from <code>gitPython</code> repo instance, it actually creates new branch object, so it sorts two lists with (kind of same branches) branches differently (using identity address), because those objects are different.</p>
<p>Though, if they are sorted by let say name (name is the same even if new branch object is created), then it passes <code>assertEqual</code> check, even if those objects are different.</p>
</div>
<span class="comment-copy">Sure it is, but how should Python know that you want to sort by the <code>name</code> attribute instead of by the natural ordering of the objects? See <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">rich comparison methods</a>.</span>
<span class="comment-copy">If you don't supply a key or comparator function, <code>sorted()</code> will use the object's own definition of comparison.  Perhaps these git branch objects you're using define comparison with something other than the <code>name</code> field as the primary key, perhaps they don't define comparison at all.</span>
<span class="comment-copy">@jasonharper I guess it does not have comparison defined, cause it should have sorted by something then.</span>
<span class="comment-copy">@Phillip You did not understood my question I guess. I did not say it should sort by name. What I said it did not sort by anything when not specifying key. I do not care by what it sorts, as long it sorts.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/reference/datamodel.html#object.__cmp__" rel="nofollow noreferrer">"If no <code>__cmp__()</code>, <code>__eq__()</code> or <code>__ne__()</code> operation is defined, class instances are compared by object identity (“address”)."</a></span>
