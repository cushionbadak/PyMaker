<div class="post-text" itemprop="text">
<p>I'm trying to write a class that inherits from dictionary and overwrote <code>__setitem__</code> and <code>__getitem__</code> and everything was going so well until I noticed that <code>items</code> and <code>values</code> do not use <code>__getitem__</code>. Anyone know how to overwrite their look up functions?</p>
<p>Example implementation below:</p>
<pre><code>class ReturnStringsDict(dict):

    def __getitem__(self, key):
        """Return value only."""
        return str(super().__getitem__(key))


test = ReturnStringsDict()
test['a'] = 1
test['b'] = 2

# Throws assertion error.
for value in test.values():
    assert isinstance(value, str)

# Throws assertion error.
for key, value in test.items():
    assert test[key] == value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation on emulating container types (<a href="https://docs.python.org/3.5/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">https://docs.python.org/3.5/reference/datamodel.html#emulating-container-types</a>), you should implement <code>items()</code> and <code>values()</code> (and a few others) directly.</p>
<p>It might help to implement <code>__iter__</code>, because that's what a lot of those functions do, but you should really check the docs here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well you can <strong>overwrite</strong> the <code>values()</code> and <code>items()</code> functions:</p>
<pre><code>class ReturnStringsDict(dict):

    # ...

    def values(self):
        for v in super().values():
            yield str(v)

    def items(self):
        for k,v in super().items():
            yield k,str(v)
</code></pre>
<p>As far as I know dictionaries are <em>not</em> implemented in Python itself. So they do not use Python code to obtain a key or value. Simply overwriting the <code>__getitem__</code> will thus not work since <code>values()</code> are implemented at the interpreter level. <a href="http://svn.python.org/view/*checkout*/python/tags/r266/Objects/dictobject.c?revision=84293&amp;content-type=text/plain" rel="nofollow noreferrer">This is for instance the source code of a Python dictionary of Python 2.6.6</a>.</p>
</div>
<span class="comment-copy">why do you need your own container?</span>
<span class="comment-copy">@AzatIbrakov: well an idea is to subclass <code>dict</code> to something like a <code>Counter</code>,...</span>
<span class="comment-copy">there are already a lot of containers in <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections</code></a> package and others, why to reinvent the wheel? only as an example, i guess</span>
<span class="comment-copy">@AzatIbrakov: yeah I know there is a <code>Counter</code>. What I mean is that you sometimes want a custom "dictionary" type to carry out a special task (like for instance the <code>collection</code> package does).</span>
<span class="comment-copy">Thanks, I had tried overwriting <code>__iter__</code> but <code>__iter__</code> on a dict only yields the keys. Thanks for the ref to the docs, should have looked there.</span>
