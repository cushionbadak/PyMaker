<div class="post-text" itemprop="text">
<p>I am trying to use counter to sort letters by occurrence, and put any that have the same frequency into alphabetical order, but I can't get access to the Value of the dictionary that it produces. </p>
<pre><code>letter_count = collections.Counter("alphabet")
print(letter_count)
</code></pre>
<p>produces:</p>
<pre><code>Counter({'a': 2, 'l': 1, 't': 1, 'p': 1, 'h': 1, 'e': 1, 'b': 1})
</code></pre>
<p>How can I get it ordered by frequency, then by alphabetical order, so everything that shows up only once is in alphabetical order?</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like your question is how to sort the entire list by frequency, then break ties alphabetically. You can sort the <em>entire list</em> like this:</p>
<pre><code>&gt;&gt;&gt; a = sorted(letter_count.items(), key=lambda item: (-item[1], item[0]))
&gt;&gt;&gt; print(a)
# [('a', 2), ('b', 1), ('e', 1), ('h', 1), ('l', 1), ('p', 1), ('t', 1)]
</code></pre>
<p>If you want the output to be a dict still, you can convert it into a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>&gt;&gt;&gt; collections.OrderedDict(a)
# OrderedDict([('a', 2),
#              ('b', 1),
#              ('e', 1),
#              ('h', 1),
#              ('l', 1),
#              ('p', 1),
#              ('t', 1)])
</code></pre>
<p>This preserves the ordering, as you can see. <code>'a'</code> is first because it's most frequent. Everything else is sorted alphabetically.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of completeness, to get the single-occurrence letters in alphabetical order:</p>
<pre><code>letter_count = collections.Counter("alphabet")

single_occurrences = sorted([letter for letter, occurrence in letter_count.items() if occurrence == 1])
print(single_occurrences)
# prints: ['b', 'e', 'h', 'l', 'p', 't']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>letter_count = collections.Counter("alphabet")

the_letters = [a for a, b in letter_count.items() if b == 1]
letters.sort()
print("letters that occur only once:")

for i in the_letters:
     print(i)
</code></pre>
<p>This code creates a list of all letters that occur only once by using list comprehension, and then prints them all. items() returns a key-value pair, which can be used to determine if the value of a key is equal to one.</p>
</div>
<span class="comment-copy">As I understand it, that was said because the entry that occurs twice had already been put at the front of the list; the OP wanted the ties between the hapaxes broken alphabetically.</span>
<span class="comment-copy">That's right, that's exactly what I was trying to do. Thank you.</span>
<span class="comment-copy">Question has been clarified by OP; you may want to update your answer.</span>
<span class="comment-copy">Question has been clarified by OP; you may want to update your answer.</span>
