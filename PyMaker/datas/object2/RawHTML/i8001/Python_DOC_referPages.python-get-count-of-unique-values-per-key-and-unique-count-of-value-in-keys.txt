<div class="post-text" itemprop="text">
<p>I have the following dictionary:</p>
<pre><code>dictA = { 
    'a' : ['duck','duck','goose'], 
    'b' : ['goose','goose'], 
    'c' : ['duck','duck','duck'], 
    'd' : ['goose'], 
    'e' : ['duck','goose'] 
    }
</code></pre>
<p>I want to get the following results:</p>
<pre><code>{
    'duck': {'countALL':3, 'countDoc': {'a': 2, 'b': 0, 'c': 3, 'd': 0, 'e':1}},
    'goose': {'countALL':4, 'countDoc': {'a': 1, 'b': 2, 'c': 0, 'd': 1, 'e':1}},
}   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do the following:</p>
<pre><code>unique_items = set(x for y in dictA.values() for x in y)

new_dict = {}
for item in unique_items:
    new_dict[item] = {'countALL': sum(1 for x in dictA if item in dictA[x]), 'countDoc': {k: v.count(item) for k, v in dictA.items()}}
print(new_dict)
# {'goose': {'countALL': 4, 'countDoc': {'e': 1, 'a': 1, 'c': 0, 'b': 2, 'd': 1}}, 'duck': {'countALL': 3, 'countDoc': {'e': 1, 'a': 2, 'c': 3, 'b': 0, 'd': 0}}}
</code></pre>
<p>Note that the order on the inner dict is <em>random</em>.</p>
<p>There are two interesting points to this:</p>
<ul>
<li><p>the generator expression that counts the lists that contain <code>item</code>: <code>sum(1 for x in dictA if item in dictA[x])</code>.</p></li>
<li><p>and the dict comprehension that gets the count in each list: <code>{k: v.count(item) for k, v in dictA.items()}</code></p></li>
</ul>
<p>But they are both relatively easy to read so I will leave that to you for now. If you have any questions feel free to ask though.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the lists are very large, it might pay off to create <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collection.Counter</code></a> instances first, instead of repeatedly calling <code>list.count</code>:</p>
<pre><code>&gt;&gt;&gt; words = set(word for lst in dictA.values() for word in lst)
&gt;&gt;&gt; counts = {k: Counter(v) for k, v in dictA.items()}
&gt;&gt;&gt; counts
{'a': Counter({'duck': 2, 'goose': 1}), 'd': Counter({'goose': 1}), 
 'b': Counter({'goose': 2}), 'c': Counter({'duck': 3}), 
 'e': Counter({'goose': 1, 'duck': 1})}
</code></pre>
<p>The result can then be assembles using a "simple" nested dictionary-comprehension:</p>
<pre><code>&gt;&gt;&gt; {word: {"countALL": sum(word in c for c in counts.values()), 
...         "countDoc": {k: v.get(word, 0) for k, v in counts.items()}}
...  for word in words}
{'duck':  {'countALL': 3, 'countDoc': {'a': 2, 'd': 0, 'b': 0, 'c': 3, 'e': 1}},
 'goose': {'countALL': 4, 'countDoc': {'a': 1, 'd': 1, 'b': 2, 'c': 0, 'e': 1}}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dictA = { 
    'a' : ['duck','duck','goose'], 
    'b' : ['goose','goose'], 
    'c' : ['duck','duck','duck'], 
    'd' : ['goose'], 
    'e' : ['duck','goose'] 
    }

dictB = {}
mySetOfKeys=set()

for myKey in dictA:
    mySetOfKeys.add(myKey)
    for myBird in dictA[myKey]:
        if dictB.has_key(myBird):
            if dictB[myBird]['countDoc'].has_key(myKey):
                dictB[myBird]['countDoc'][myKey] += 1
            else:
                dictB[myBird]['countALL'] += 1
                dictB[myBird]['countDoc'][myKey] = 1
        else:
            dictB[myBird] = {'countALL':1,'countDoc':{myKey:1}}

for myBird in dictB:
    for myKey in mySetOfKeys:
        if dictB[myBird]['countDoc'].has_key(myKey):
            pass
        else:
            dictB[myBird]['countDoc'][myKey] = 0
print dictB
print mySetOfKeys

    enter code here
</code></pre>
</div>
<span class="comment-copy">did you try anything worth posting?</span>
<span class="comment-copy">Your expected results aren't a valid object. you have a keyless entry in a dict. (or a keyed entry in a set)</span>
<span class="comment-copy">@ChrisCharles I fixed the error, please see the updated question</span>
<span class="comment-copy">unclear, why <code>duck</code> has <code>'countALL':3</code> ?</span>
<span class="comment-copy">@RomanPerekhrest Because it appears in 3 separate lists.</span>
