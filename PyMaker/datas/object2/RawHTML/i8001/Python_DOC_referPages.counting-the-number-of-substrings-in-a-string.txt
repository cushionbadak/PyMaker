<div class="post-text" itemprop="text">
<p>I am working on an Python assignment and I am stuck here.</p>
<p>Apparently, I have to write a code that counts the number of a given substring within a string. </p>
<p>I thought I got it right, then I am stuck here.</p>
<pre><code>def count(substr,theStr):
    # your code here
    num = 0
    i = 0
    while substr in theStr[i:]:
        i = i + theStr.find(substr)+1
        num = num + 1

    return num

substr = 'is'
theStr = 'mississipi'
print(count(substr,theStr))
</code></pre>
<p>if I run this, I expect to get <strong>2</strong> as the result, rather, I get <strong>3</strong>...</p>
<p>See, other examples such as <code>ana</code> and <code>banana</code> works fine, but this specific example keeps making the error. I don't know what I did wrong here.</p>
<p>Would you PLEASE help me out.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your code</p>
<pre><code>while substr in theStr[i:]:
</code></pre>
<p>correctly advances over the target string <code>theStr</code>, however the</p>
<pre><code>i = i + theStr.find(substr)+1
</code></pre>
<p>keeps looking from the start of <code>theStr</code>.</p>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer"><code>str.find</code></a> method accepts optional <em>start</em> and <em>end</em> arguments to limit the search:</p>
<blockquote>
<p><code>str.find(sub[, start[, end]])</code></p>
<p>Return the lowest index in the string where substring <em>sub</em> is found
  within the slice <code>s[start:end]</code>. Optional arguments <em>start</em> and <em>end</em>
  are interpreted as in slice notation. Return -1 if <em>sub</em> is not found.</p>
</blockquote>
<p>We don't really need to use <code>in</code> here: we can just check that <code>find</code> doesn't return -1. It's a bit wasteful performing an <code>in</code> search when we then need to repeat the search using <code>find</code> to get the index of the substring.</p>
<p>I assume that you want to find overlapping matches, since the <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow noreferrer"><code>str.count</code></a> method can find non-overlapping matches, and since it's implemented in C it's more efficient than implementing it yourself in Python.</p>
<pre><code>def count(substr, theStr):
    num = i = 0
    while True:
        j = theStr.find(substr, i)
        if j == -1:
            break
        num += 1
        i = j + 1
    return num

print(count('is', 'mississipi'))
print(count('ana', 'bananana'))
</code></pre>
<p><strong>output</strong></p>
<pre><code>2
3
</code></pre>
<p>The core of this code is</p>
<pre><code>j = theStr.find(substr, i)
</code></pre>
<p><code>i</code> is initialised to 0, so we start searching from the beginning of <code>theStr</code>, and because of <code>i = j + 1</code> subsequent searches start looking from the index following the last found match.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code change you need is -</p>
<pre><code>i = i + theStr[i:].find(substr)+ 1
</code></pre>
<p>instead of</p>
<pre><code>i = i + theStr.find(substr)+ 1
</code></pre>
<p>In your code the substring is always found until <code>i</code> reaches position 4 or more. But while finding the index of the substring, you were using the original(whole) string which in turn returns the position as 1.</p>
<p>In your example of <code>banana</code>, after first iteration <code>i</code> becomes 2. So, in next iteration <code>str[i:]</code> becomes <code>nana</code>. And the position of substring <code>ana</code> in this sliced string and the original string is 1. So, the bug in the code is just suppressed and the code seems to work fine.</p>
<p>If your code is purely for learning purpose, the you can do this way. Otherwise you may want to make use of python provided functions (like <code>count()</code>) to do the job.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def count(substr,theStr):
    num = 0
    for i in range(len(theStr)):
        if theStr[i:i+len(substr)] == substr:
            num += 1
    return num

substr = 'is'
theStr = 'mississipi'
print(count(substr,theStr))
</code></pre>
</div>
<span class="comment-copy"><b>From review queue:</b> May I request you to please add some more context around your answer. Code-only answers are difficult to understand. It will help the asker and future readers both if you can add more information in your post.</span>
