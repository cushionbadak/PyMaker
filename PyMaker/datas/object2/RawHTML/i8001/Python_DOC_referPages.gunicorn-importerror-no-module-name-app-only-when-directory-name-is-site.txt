<div class="post-text" itemprop="text">
<p>Trying to get gunicorn runing with a hello world app.<br/>
This is my project directory structure</p>
<pre><code>Project
  |_ config
  |  |_ ___init__.py
  |  |_ settings.py
  |
  |_ instance
  |  |_settings.py_production
  |
  |_ site
  |  |_ __init__.py
  |  |_ app.py
  |
  |_ .env
  |_ docker-compose.yml
  |_ Dockerfile
  |_ requirements.txt
</code></pre>
<p>I am running this in a docker container but when I go into the container in interactive mode the same behaviour occurs.</p>
<p>When the directory is named <code>site</code> and  I run the command <code>gunicorn -b 0.0.0.0:8000 --access-logfile - "site.app:create_app()"</code> I get an error <code>ImportError: No module name app</code>.  However if I name the directory <code>foo</code>, <code>snakeeyes</code> or <code>blah</code> I do not recieve an error and the app runs as expected.  Is there a reason for this?  Can directories not be named site?  Are there any other restreicted direcory names in python?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>site</code> is part of the <a href="https://docs.python.org/3/library/site.html#module-site" rel="nofollow noreferrer">standard library</a> in python. I assume, but am not positive, that you are experiencing a conflict.</p>
<p><code>site</code> is not a reserved word in python . You can check out this SO post if you're interested in the standard keywords: <a href="https://stackoverflow.com/questions/22864221/is-the-list-of-python-reserved-words-and-builtins-available-in-a-library">Is the list of Python reserved words and builtins available in a library?</a></p>
<p>I think you might be able to test whether this is a conflict by suppressing the automatic import of the library as directed by the documentation:</p>
<pre><code>This module is automatically imported during initialization. The automatic import can be suppressed using the interpreterâ€™s -S option.
</code></pre>
</div>
<span class="comment-copy">You shouldn't call your module the same as any module which is a part of the Python standard library as depending on the ordering of the module import path, you will get the wrong one.</span>
<span class="comment-copy">running <code>gunicorn -S -b 0.0.0.0:8000 --access-logfile - "pickle.app:create_app()"</code> threw an error saying the -S wasn't a valid option.  I did however take a look at the list here <a href="https://docs.python.org/3/contents.html" rel="nofollow noreferrer">docs.python.org/3/contents.html</a> under improved modules where site is located.  I renamed everything to another module <code>pickle</code> and got the same <code>ImportError: No module named app</code> result. I beleve this is the correct answer.</span>
<span class="comment-copy">Gunicorn isn't an interpreter of python. The documentation is referring to the actual call to python. So, something like <code>python -S</code>.  If you wanted to try that experiment you would need to figure out how to pass command line arguments to the python interpreter through gunicorn.</span>
