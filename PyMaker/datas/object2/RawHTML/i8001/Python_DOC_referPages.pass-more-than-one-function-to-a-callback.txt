<div class="post-text" itemprop="text">
<p>Given that :</p>
<pre><code>with concurrent.futures.ProcessPoolExecutor(max_workers=(2*multiprocessing.cpu_count()+1)) as executor:
        for netelement in DOC['code']['info']['dev']:
            job = executor.submit(bgp_communities.do_lookup, netelement)
            job.add_done_callback(functools.partial(bgp_communities.do_data_wrangling, DOC))
</code></pre>
<p>is it possible to pass a 2nd function (like <code>bgp_communities.do_data_wrangling</code>) as a parameter to the callback of the <code>future</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is not very clear. But if you want more than one function to be called when the job is done, just make another call to <code>job.add_done_callback</code>.</p>
<pre><code>with concurrent.futures.ProcessPoolExecutor(max_workers=(2*multiprocessing.cpu_count()+1)) as executor:
    for netelement in DOC['code']['info']['dev']:
        job = executor.submit(bgp_communities.do_lookup, netelement)
        job.add_done_callback(functools.partial(bgp_communities.do_data_wrangling, DOC))
        job.add_done_callback(...)
</code></pre>
<p>see the <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.add_done_callback" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>add_done_callback(fn)</p>
<p>Attaches the callable fn to the future. fn will be called, with the future as its only argument, when the future is cancelled or finishes running.</p>
<p><strong>Added callables are called in the order that they were added</strong> and are always called in a thread belonging to the process that added them. If the callable raises an Exception subclass, it will be logged and ignored. If the callable raises a BaseException subclass, the behavior is undefined.</p>
<p>If the future has already completed or been cancelled, fn will be called immediately.</p>
</blockquote>
</div>
