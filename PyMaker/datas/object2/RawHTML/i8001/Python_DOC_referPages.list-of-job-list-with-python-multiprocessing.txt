<div class="post-text" itemprop="text">
<p>I need to run 100 query in parallel, but I don't have enough resources, so I have created a list with 20 sublists, each sublist contains 5 processes. </p>
<p>Now I want to run the job lists successively. 
I explain more : when the first five queries are finished, the second five will be launched, etc...</p>
<p>I did this : </p>
<pre><code>jobs_list = []
for sublist in list_all:
    jobs = []
    for cd in sublist:
        process = multiprocessing.Process(target=calc_zio, args=(cd,))
        jobs.append(process)
    jobs_list.append(jobs)

for l in jobs_list:
    for j in l:
        j.start()

for l in jobs_list:
    for j in l:
        j.join()
</code></pre>
<p>But I was running at 100% of CPU</p>
<p>Where I was wrong ? </p>
<p>Thank you ! </p>
</div>
<div class="post-text" itemprop="text">
<p>you need to join the sublist before starting the next.</p>
<pre><code>jobs_list = []
for sublist in list_all:
    jobs = []
    for cd in sublist:
        process = multiprocessing.Process(target=calc_zio, args=(cd,))
        jobs.append(process)
    jobs_list.append(jobs)

for l in jobs_list:
    for j in l:
        j.start()
    for j in l:
        j.join()</code></pre>
</div>
<span class="comment-copy">If I count right, you are running <b>100</b> <code>process</code>. Read about: <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Thank you, now i understand It seems to work. I'am running between 40% and 65% of CPU and I have only 5 python.exe launched</span>
<span class="comment-copy">@AdamAdam as stovfl mentioned in the comments, this would likely be a good place to use <code>multiprocessing.pool</code> that way you can keep a given number of processes running at all times. With this implementation, if one of the 5 or so takes a lot longer than the rest, much of the time for that batch will be taken to run a single process. A pool will therefore both give you the ability to limit resources consumed, as well as keep the load more consistent.</span>
<span class="comment-copy">this is what I am trying to do now, but I can't find a useful example with multiprocessing.pool</span>
<span class="comment-copy">@AdamAdam I just wrote another answer using <code>pool.apply_async</code>, and <code>pool.starmap</code>. It should be a good place to start.</span>
<span class="comment-copy">I can not see your new answer @Aaron</span>
