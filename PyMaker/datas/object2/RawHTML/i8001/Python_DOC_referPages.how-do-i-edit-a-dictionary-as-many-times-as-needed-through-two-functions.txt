<div class="post-text" itemprop="text">
<p>I have this code for Python:</p>
<pre><code>def additems():
    items = {}
    add = input("What would you like to add?")
    value = input("What value would you like to assign?")
    items[add] = value
    return items

def resume():
    decision = input("would you like to continue?")
    if decision == "Y":
        main()
    else:
       print("Exiting...")

def main():
    items = additems()
    print(items)
    resume()

main()
</code></pre>
<p>The objective is to be able to edit "items" as many times as I want while always returning the updated dictionary back to main. But, as it stands, I can only edit the dictionary once inside the function "additems" and then it resets when "main" is run. I don't want the dictionary to reset when main is run, I always want it to print the updated "items" dictionary. So instead of:</p>
<p>"What would you like to add?"
 - G
"What value would you like to assign?"
 - 3
"{'G': '3'}"
"Would you like to continue?"
 - Y 
"What would you like to add?"
 - J
"What value would you like to assign?"
 - 4
"{'J': '4'}" (only the most recent addition to the dictionary is printed)</p>
<p>... Which is what the code currently does, I want it to be able to do:</p>
<p>"What would you like to add?"
 - G
"What value would you like to assign?"
 - 3
"{'G': '3'}"
"Would you like to continue?"
 - Y 
"What would you like to add?"
 - J
"What value would you like to assign?"
 - 4
"{'G': '3', 'J': '4'}" (both additions are printed)</p>
<p>... and to be able to do this as long as I provide an input of Y, meaning I am able to continue.</p>
<p>If you haven't already guessed, I am new to both Stack and to Python, but help would be appreciated. Thus, when I mean help, I mean help in the context of one who is new to Python and programming in general, not help to one with experience. Just answer as if you were talking to a 5 year old and save us all the trouble.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @AChampion noted you don't need recursion, just pass <code>items</code> from <code>main</code> function to <code>additems</code>.</p>
<p>Since <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a> objects are mutable we don't need to pass and return them, just mutate in case of need.</p>
<p>We can replace recursion with infinite loop like</p>
<pre><code>def additems(items):
    add = input("What would you like to add?\n")
    value = input("What value would you like to assign?\n")
    items[add] = value


def main():
    items = {}
    while True:
        additems(items)
        print(items)
        decision = input("would you like to continue?\n")
        if decision != "Y":
            print("Exiting...")
            return


main()
</code></pre>
<p>I've added newline characters <code>'\n'</code> to the end of each question to make it simpler for user to interact, if you don't need them â€“ feel free to remove.</p>
</div>
<span class="comment-copy">Make <code>items</code> a global(as @AChampion said 'blah!') instead and remove the definition and <code>return</code> from <code>additems</code> then just call <code>additems</code> from <code>main</code> instead of assigning</span>
<span class="comment-copy">Because you are recursing down the call stack you will need to pass the dict with it or create a global dictionary (not recommended if you can avoid it - and you can avoid it!). Alternatively, implement this iteratively.</span>
<span class="comment-copy">Thanks to both @Nick A  for your swiftly given advice! I never thought to make the dictionary a global, and I have done so and it works (:D), however ideally I store it in a function somewhere instead of the alternative. Thus my next question is of course: how do I go about achieving this? Preferably answered in a way that <i>sigh</i> my inept mind can understand.</span>
<span class="comment-copy">In that case, I suggest you define items in your main, then pass it as a parameter to getitems, there you can update it and return it (as opposed to making a new empty items dictionary each call), and have a think about your program structure so that you arent using recursion (calling main from resume). Hint: <code>while</code> loop</span>
