<div class="post-text" itemprop="text">
<p>I have write this algorithm but i am not sure that this is correct or not please help me to solve this problem, i am beginner in python programming language.</p>
<pre><code>for n in maxN:
     alist = range(n)
     adict = {}
     for j in xrange(n):
         adict[j] = None
     random_index = random.randint(0, n-1)

     start1 = time.time()
     del_in_list(alist, random_index)
     end1 = time.time()

     start2 = time.time()
     del_in_dict(adict, random_index)
     end2 = time.time()

     start3 = time.time()
     empty(adict, random_index)
     end3 = time.time()

     y1.append(end1-start1-(end3-start3))
     y2.append(end2-start2-(end3-start3))    
 plt.plot(maxN,y1, "r--", maxN, y2)
</code></pre>
<p>plt.show()</p>
<p>Is this algorithm is correct if yes then
<em>how to improve this algorithm in linear?</em></p>
</div>
<div class="post-text" itemprop="text">
<p>There is actually an algorithm to find the Kth smallest/largest element in an unsorted list in a linear time.<br/>
In order to do it in an O(n*log(n)) complexity, all you have to do is sort the list, and then retrieve the nth element. something like :</p>
<pre><code>x = sorted(your_list)
print x[n]
</code></pre>
<p>If you don't want the 1st element to be in position 0, just change n to n-1.</p>
</div>
<span class="comment-copy">I don't think there is a linear time solution to the general case.  There might be an n*log(k) solution: maintain a heap, insert items into the heap and trim the heap back down to k items at each item of n.</span>
<span class="comment-copy">By the way: posting 20 lines of uncommented pseudo-code is not the ideal way to discuss an algorithm.  I have no idea what this "code" is supposed to be doing.  Try summarizing the strategy at a high level (in a comment) and then drilling down into how different functions and snippets implement that strategy.</span>
<span class="comment-copy">The best way to verify if an algorithm works is to test it. Especially, try write an <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a> for it.</span>
<span class="comment-copy">What about doing merge sort in ascending order and than getting "kth" element?</span>
<span class="comment-copy">@JimDennis There is a linear time solution, though it's not exactly beginner-level. Google 'median of medians'.</span>
