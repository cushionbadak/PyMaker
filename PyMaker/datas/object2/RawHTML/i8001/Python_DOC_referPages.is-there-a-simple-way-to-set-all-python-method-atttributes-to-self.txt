<div class="post-text" itemprop="text">
<p>I have a function that defines many parameters in my class object - such as:</p>
<pre><code>class Project:
    def newTask(self, taskName=None, taskDuration=None):
        self.taskName=taskName
        self.taskDuration=taskDuration
</code></pre>
<p>Is there a "natural" way of setting all (or some) of the method's parameters to <code>self.</code> attributes of the same name(s)?</p>
<hr/>
<p>By extension, is there is an equivalent for passing a <code>Task</code> <strong>object</strong> so that <code>Project</code> can <code>self.</code> the task's methods as well?</p>
<pre><code>class Task:        
    def populate(self, taskName=None, taskDuration=None):
        self.taskName=taskName
        self.taskDuration=taskDuration

t=Task()
t.populate(taskName='Task1',taskDuration=100)

class Project:
    def newTask(self, t):
        self.taskName=t.taskName
        self.taskDuration=t.taskDuration
        self.populate
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's always:</p>
<pre><code>for arg in ('taskName', 'taskDuration'):
    setattr(self, arg, locals()[arg])
</code></pre>
<p>But it's a terrible idea for readability and for automatic static code analysis. Neither me, not the computer can quickly figure out how <code>taskName</code> is used.</p>
<p>If you have things that belong together and are often passed around, maybe you should try <code>namedtuple</code> instead? It saves you some boilerplate code, does immutability by default, and you can pass it around as one object instead of multiple ones.</p>
<p>Usage would be something like:</p>
<pre><code>from collections import namedtuple

Task = namedtuple('Task', ['name', 'duration'])

class Project:
    def addTask(self, task):
        self.tasks.append(task)

t = Task('some name', 10)
project.addTask(t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following uses the built-in <a href="https://docs.python.org/2/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a>:</p>
<pre><code>def newTask(self, **kwargs):
    for name, vaue in kwargs.items():
        setattr(self, name, value)
</code></pre>
<p>You might want to add validation as to whether all the kwargs you want are there.</p>
</div>
<span class="comment-copy">Couldn't you pass a <code>Task</code> object to <code>Project</code> and then in <code>Project</code> do <code>self.task = my_task</code>? Then you would access the task methods with <code>my_proj.task.populate(*args)</code></span>
<span class="comment-copy">Thank you very much - just to check - this can't be extended to a <code>Task</code> object with methods I take it? I'm not having much luck</span>
<span class="comment-copy">@Bendy It sure can. See the end of documentation in <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> for an example. <code>class Point(namedtuple('Point', ['x', 'y'])):</code></span>
