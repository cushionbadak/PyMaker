<div class="post-text" itemprop="text">
<p>From the documentation on <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression</a> I understand that it's recommended to use "raw" strings for patterns to make sure backslashes are not handled in any special way:</p>
<blockquote>
<p>Regular expressions use the backslash character (<code>'\'</code>) to indicate
  special forms or to allow special characters to be used without
  invoking their special meaning. This collides with Python’s usage of
  the same character for the same purpose in string literals; for
  example, to match a literal backslash, one might have to write <code>'\\\\'</code>
  as the pattern string, because the regular expression must be <code>\\</code>, and
  each backslash must be expressed as <code>\\</code> inside a regular Python string
  literal.</p>
<p>The solution is to use Python’s raw string notation for regular
  expression patterns; backslashes are not handled in any special way in
  a string literal prefixed with <code>'r'</code>.</p>
</blockquote>
<p>I wonder what other cases (apart from the literal backslash) may require using raw strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>One another example is sequences like <code>\1</code>, <code>\2</code> which are octal escapes in Python strings, but reference captured groups in regular expressions.</p>
<pre><code>&gt;&gt;&gt; re.search(r"(\w+) \1", "the the")
&lt;_sre.SRE_Match object; span=(0, 7), match='the the'&gt;
&gt;&gt;&gt; re.search("(\w+) \1", "the the")
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Pretty much anything that can be interpreted as a Python string escape sequence... no?</span>
<span class="comment-copy">It useful when dealing with paths, on Windows at least... e.g. "C:\Users\Me\Desktop" may not behave as desired.</span>
