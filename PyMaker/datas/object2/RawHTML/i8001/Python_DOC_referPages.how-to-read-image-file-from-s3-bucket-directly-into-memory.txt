<div class="post-text" itemprop="text">
<p>I have the following code</p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import boto3
s3 = boto3.resource('s3', region_name='us-east-2')
bucket = s3.Bucket('sentinel-s2-l1c')
object = bucket.Object('tiles/10/S/DG/2015/12/7/0/B01.jp2')
object.download_file('B01.jp2')
img=mpimg.imread('B01.jp2')
imgplot = plt.imshow(img)
plt.show(imgplot)
</code></pre>
<p>and it works. But the problem it downloads file into current directory first. Is it possible to read file and decode it as image directly in RAM?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Greg Merritt's answer below is better method.</h2>
<p>I'd like to suggest using Python's <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="noreferrer">NamedTemporaryFile</a> in <code>tempfile</code> module. It creates temporary files that will be deleted as file is closed (Thanks to @NoamG)</p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import boto3
import tempfile

s3 = boto3.resource('s3', region_name='us-east-2')
bucket = s3.Bucket('sentinel-s2-l1c')
object = bucket.Object('tiles/10/S/DG/2015/12/7/0/B01.jp2')
tmp = tempfile.NamedTemporaryFile()

with open(tmp.name, 'wb') as f:
    object.download_fileobj(f)
    img=mpimg.imread(tmp.name)
    # ...Do jobs using img
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using <a href="https://docs.python.org/3.6/library/io.html" rel="noreferrer">io module</a> to read the file directly in to memory, without having to use a temporary file at all.</p>
<p>For example:</p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import boto3
import io

s3 = boto3.resource('s3', region_name='us-east-2')
bucket = s3.Bucket('sentinel-s2-l1c')
object = bucket.Object('tiles/10/S/DG/2015/12/7/0/B01.jp2')

file_stream = io.StringIO()
object.download_fileobj(file_stream)
img = mpimg.imread(file_stream)
# whatever you need to do
</code></pre>
<p>You could also use <code>io.BytesIO</code> if your data is binary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Streaming the image is possible by specifying the file format in <code>imread()</code>.</p>
<pre><code>import boto3
from io import BytesIO
import matplotlib.image as mpimg
import matplotlib.pyplot as plt

resource = boto3.resource('s3', region_name='us-east-2')
bucket = resource.Bucket('sentinel-s2-l1c')

image_object = bucket.Object('tiles/10/S/DG/2015/12/7/0/B01.jp2')
image = mpimg.imread(BytesIO(image_object.get()['Body'].read()), 'jp2')

plt.figure(0)
plt.imshow(image)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>object = bucket.Object('tiles/10/S/DG/2015/12/7/0/B01.jp2')
img_data = object.get().get('Body').read()
</code></pre>
</div>
<span class="comment-copy">This should work fine, but under the hood, a real file is created and will be destroyed as soon as it is closed.</span>
<span class="comment-copy">@NoamG Thanks! I was misunderstanding how <code>tempfile</code> module works. Updated my answers.</span>
<span class="comment-copy">object.download_fileobj(file_stream) gives me an error, TypeError: unicode argument expected, got 'str'</span>
<span class="comment-copy">I get the same error: TypeError: string argument expected, got 'bytes'</span>
<span class="comment-copy">If "string argument expected, got bytes" is your error, remember to try <code>io.BytesIO()</code> instead of <code>io.StringIO()</code>. For boto3 and python 3, that's the key</span>
<span class="comment-copy">Thank you for this code snippet, which may provide some immediate help. A proper explanation <a href="https://meta.stackexchange.com/q/114762">would greatly improve</a> its educational value by showing why this is a good solution to the problem, and would make it more useful to future readers with similar, but not identical, questions. Please edit your answer to add an explanation, and give an indication of what limitations and assumptions apply.</span>
