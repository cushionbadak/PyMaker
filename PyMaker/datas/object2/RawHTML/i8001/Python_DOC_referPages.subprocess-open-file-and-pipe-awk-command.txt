<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13332268/how-to-use-subprocess-command-with-pipes">How to use `subprocess` command with pipes</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>This is my input file format:</p>
<pre><code>@SRR2056440.1 1 length=100
TGTAGGTCTGAGCAGCTTGTCCTGGCTGTGTCCATGTCAGAGCAACGGCCCAAGTCTGGGTCTGGGGGGGAAGGTGTCATGGAGCCCCCTACGATTCCCA
+SRR2056440.1 1 length=100
BCBFFFEFHHHHHJJJJJJIJJJJJJJJIJHHIJJIIJJJJJIJJIJJJJJJJJFHIJJJHHHHHHFDDDBDDD&gt;&gt;ACDEDDDDDDDDDDDDDDDDDEDD
@SRR2056440.2 2 length=100
CTGCCGCCACCGCAGCAGCCACAGGCAGAGGAGGACGAGGACGACTGGGAATCGTAGGGGGCTCCATGACACCTTCCCCCCCAGACCCAGACTTGGGCCA
+SRR2056440.2 2 length=100
CCCFFFFFHHHHHJJJJJJJJJJJIJIJIGJGGIGGJIJJEHFEDDDDDDDDDDABDDDDDDDDDDDDDDADDDDDDDDDDDCDDDDDDBBDDCDDBDD@
@SRR2056440.3 3 length=100
TCTGCCGCCACCGCAGCAGCCACAGGCAGAGGAGGACGAGGACGACTGGGAATCGTAGGGGGCTCCATGACACCTTCCCCCCCAGACCCAGACTTGGGCC
+SRR2056440.3 3 length=100
CCCFFFFFHGHHHJJJJJIJJJJJJIJJIJJJIJJIIIGIJ&lt;CDBCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDCDDDDDDDDDDDDDDDDDDCDCBDD
</code></pre>
<p>This is the command I want to execute:</p>
<pre><code>cat input.fq | awk 'NR%4==2{sum+=length($0);nr++;sumsq+=length($0)*length($0)}END{printf"%.1f\t%.1f\n",sum/nr,sqrt(sumsq/nr-(sum/nr)**2)}'
</code></pre>
<p>And the output of the command:</p>
<blockquote>
<p>100.0 0.0</p>
</blockquote>
<p>I want to execute that command inside a python script using subprocess. I have done several attempts but I can't figure out, this is my last try:</p>
<pre><code>awk_comm = r"""'NR%4==2{sum+=length($0);nr++;sumsq+=length($0)*length($0)}END{printf"%.1f\t%.1f\n",sum/nr,sqrt(sumsq/nr-(sum/nr)**2)}'"""
cmd = ['cat', 'input.fq', '|', 'awk', awk_comm]
p2 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
out1, err = p2.communicate()
</code></pre>
<p><strong>EDIT:</strong></p>
<p>I can't see any error in the output. It gets stuck, running forever.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no point to <code>shell=True</code> here. Just set up your <code>subprocess.Popen</code> object to do everything you'd otherwise use the shell for:</p>
<pre><code># the original awk code, with whitespace added for readability
awk_command = r"""
NR%4==2 {
  sum+=length($0);
  nr++;
  sumsq+=length($0)*length($0)
}
END {
  printf "%.1f\t%.1f\n", sum/nr, sqrt(sumsq/nr-(sum/nr)**2)
}
"""

p2 = subprocess.Popen(
  ['awk', awk_command],
  stdin=open('input.fq', 'r'),  # pass a file handle to input.fq directly on awk's stdin
  stdout=subprocess.PIPE,
  stderr=subprocess.PIPE)
out1, err = p2.communicate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following works for me.    </p>
<pre><code>&gt;&gt;&gt; awk_comm = r"""cat input.fq | awk 'NR%4==2{sum+=length($0);nr++;sumsq+=length($0)*length($0)}END{printf"%.1f\t%.1f\n",sum/nr,sqrt(sumsq/nr-(sum/nr)**2)}'"""
&gt;&gt;&gt; p2 = subprocess.Popen(awk_comm, stdout=subprocess.PIPE,shell=True)
&gt;&gt;&gt; res = p2.communicate()
&gt;&gt;&gt; res
('100.0\t0.0\n', None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By default, Python doesn't use the shell to run commands...but pipes are evaluated by the shell!! You need to pass <code>shell=True</code>:</p>
<pre><code>p2 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the commands module to achieve this:</p>
<pre><code>import commands
awk_comm = r"""'NR%4==2{sum+=length($0);nr++;sumsq+=length($0)*length($0)}END{printf"%.1f\t%.1f\n",sum/nr,sqrt(sumsq/nr-(sum/nr)**2)}'"""
p1 = commands.getoutput('cat input.fq | awk ' + awk_comm)
print p1
</code></pre>
<p>Hope this helps</p>
</div>
<span class="comment-copy">BTW, <code>cat input.fq | ...</code> is bad practice even in shell -- it forces your <code>awk</code> to read a FIFO from <code>cat</code>, which is necessarily slower than just reading from the file direct; moreover, with a direct file handle you can reread, seek around, etc; but a FIFO can only be read once front-to-back.</span>
<span class="comment-copy">anyhow, when you pass an array with <code>shell=True</code>, the result is <code>subprocess.Popen(['sh', '-c']+yourarray, shell=False)</code>. That means that the only thing passed as source for the shell to parse is the <b>very first</b> element of that array.</span>
<span class="comment-copy">BTW -- do see the warning in <a href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">docs.python.org/2/library/…</a> before using <code>shell=True</code>.</span>
<span class="comment-copy">Thank you very much. This makes more sense. But there is a reason why I'm using <code>cat</code>. Before executing the command I check whether the file is compressed with gzip, if so, I open the file using zcat and otherwise, using cat. Can I open gziped file using open?</span>
<span class="comment-copy">@cucurbit, for what I'd do, see <a href="https://gist.github.com/charles-dyfis-net/14ec07896f3e899315c367420c54afd1" rel="nofollow noreferrer">gist.github.com/charles-dyfis-net/…</a>. That way you're passing a direct file handle where possible, or piping from <code>gunzip</code> where not.</span>
<span class="comment-copy">Thank you! If you remove the quotes from input_filename: <code>input_file = open('input_filename', 'r')</code> it works perfectly well.</span>
<span class="comment-copy">Thank you but I have tried that one and it is not working neither.</span>
<span class="comment-copy">@cucurbit With <code>shell=True</code>, could you edit your question to include the <i>full</i> error??</span>
<span class="comment-copy">There is no error... it get's stuck like running forever... :/</span>
<span class="comment-copy">With <code>cmd=['cat', ...]</code>, this is just running <code>cat</code>. The other arguments are passed to <code>/bin/sh</code>, but not anything else.</span>
<span class="comment-copy">(That's why it runs forever: <code>cat</code> blocks reading from stdin when not given an argument or a stdin that ever provides an EOF).</span>
<span class="comment-copy">Using string concatenation to form shell commands is innately prone to shell injection attacks. It's not exploitable here, because all the strings are hardcoded, but if you wanted to let the user specify the name of <code>input.fq</code>, the naive approach would allow arbitrary commands to be run by embedding them in that name.</span>
<span class="comment-copy">Moreover, <code>commands</code> is explicitly deprecated in favor of <code>subprocess</code>. You'll note that <code>commands</code> doesn't even exist at all in Python 3; and the docs for <code>subprocess</code> describes <a href="https://docs.python.org/3/library/subprocess.html#legacy-shell-invocation-functions" rel="nofollow noreferrer">how to use it in place of <code>commands</code></a>.</span>
<span class="comment-copy">Thanks for the insight @CharlesDuffy</span>
