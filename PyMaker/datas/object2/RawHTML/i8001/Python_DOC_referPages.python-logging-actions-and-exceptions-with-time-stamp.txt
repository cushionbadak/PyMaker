<div class="post-text" itemprop="text">
<p>I am writing a script that connects to N hosts via SSH ... queries the 3rd party system and extracts data and then displays all the collected data in a certain format.</p>
<p>I want to log all the actions the script is executing as well as any exceptions encountered on to the console and to a log file, so that the user can see what is happening while the script is running (If someone used Ansible - then just like the output we get on the console and logs when running the playbooks)</p>
<p>Expected output</p>
<ul>
<li>[timestamp]: connecting machine 1 </li>
<li>[timestamp]: connection established</li>
<li>[timestamp]: querying database xyz</li>
<li>[timestamp]: ERR: invalid credentials</li>
<li>[timestamp]: aborting data extraction</li>
<li>[timestamp]: connection closed</li>
<li>[timestamp]: ---------------------------</li>
<li>[timestamp]: connecting machine 2      </li>
<li>[timestamp]: connection established</li>
<li>[timestamp]: querying database xyz</li>
<li>[timestamp]: extraction complete</li>
<li>[timestamp]: closing the connection</li>
</ul>
<p>I hope I am able to explain it correctly - Logging actions and exceptions with timestamp for the whole script and all the data iterations.</p>
<p>Please advice and if possible with an example script that uses the technique. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can have a look <a href="https://docs.python.org/2.7/howto/logging.html" rel="nofollow noreferrer">here</a> for some more detailed guidance. Here's how I usually set up logging on my stuff:</p>
<pre><code>import logging

...

logger = logging.getLogger()
log_handler = logging.StreamHandler(sys.stdout)
log_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(funcName)s - line %(lineno)d"))
log_handler.setLevel(logging.DEBUG)
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)
</code></pre>
<p>This will produce output like this, for any event from <code>DEBUG</code> upwards:</p>
<pre><code>2017-05-16 13:30:03,193 - root - INFO - Starting execution - main - line 35
2017-05-16 13:30:03,206 - root - DEBUG - Config file grabbed successfully - readConfig - line 71
...
2017-05-15 13:30:26,792 - root - WARNING - Reached maximum number of attempts (3) for this request; skipping request. - main - line 79
2017-05-15 13:30:26,797 - root - ERROR - Failed to grab item. Unfortunately, this is a showstopper :( - main - line 79
</code></pre>
<p>The above is produced by a line in the <code>main</code> function of my app, that reads:</p>
<pre><code>logger.info("Starting execution")
</code></pre>
<p>Another line in my <code>readConfig</code> function:</p>
<pre><code>logging.debug("Config file grabbed successfully")
</code></pre>
<p>And another two lines in <code>main</code> again:</p>
<pre><code>logging.warning("Reached maximum number of attempts ({max_attempts}) for this request; skipping request.".format(max_attempts = max_tries))
...
logging.error("Failed to grab item. Unfortunately, this is a showstopper :(")
</code></pre>
<p>Then it's a matter of how much information and context you need on each log entry. Have a look <a href="https://docs.python.org/2.7/howto/logging.html#changing-the-format-of-displayed-messages" rel="nofollow noreferrer">here</a> at formatting the entries, and <a href="https://docs.python.org/2.7/howto/logging.html#formatters" rel="nofollow noreferrer">here</a> at formatters. I'll have these sent to me via email, anytime the app runs triggered by <code>crontab</code>, by adding <code>MAILTO = root</code> to the top of my <code>crontab</code> file, <a href="https://unix.stackexchange.com/q/26980">and making sure my system email is properly set</a>.</p>
<p>If you want to set it to go to the console <em>and</em> a file, you'll just need to set two different handlers. <a href="https://stackoverflow.com/a/13733863/7968653">This answer</a> provides a good example, where you'd set <a href="https://docs.python.org/2.7/library/logging.handlers.html#streamhandler" rel="nofollow noreferrer">a <code>StreamHandler</code></a> to log to the console, and <a href="https://docs.python.org/2.7/library/logging.handlers.html#filehandler" rel="nofollow noreferrer">a <code>FileHandler</code></a> to log to a file. So instead of setting it up as I mentioned above I usually do, you could try:</p>
<pre><code>import logging

...

# Set up logging and formatting
logger = logging.getLogger()
logFormatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(funcName)s - line %(lineno)d")

# Set up the console handler
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)

# Set up the file handler 
fileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))
fileHandler.setFormatter(logFormatter)
logger.addHandler(fileHandler)

# Set up logging levels
consoleHandler.setLevel(logging.DEBUG)
fileHandler.setLevel(logging.DEBUG)
logger.setLevel(logging.DEBUG)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check out the <strong>logging</strong> module <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">here</a>, there's a nice example section with both basic and advanced applications.  Doing stuff in the format you've described appears to be included in the tutorial.</p>
</div>
<span class="comment-copy">Thanks I'll look into it.</span>
<span class="comment-copy">Thanks. I'll look into it</span>
