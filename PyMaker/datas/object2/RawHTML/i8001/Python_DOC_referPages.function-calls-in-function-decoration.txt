<div class="post-text" itemprop="text">
<p>When decorating a function, you can use a method <code>@object.method</code>, and you can use methods of attributes of attributes and so on <code>@object.attribute.attribute.method</code>. You may also pass extra arguments to the decorator <code>@function(foo="bar")</code>.</p>
<p>However, it appears that these conflict. When there is a function call in the chain, python appears to assume that it's the bit where you pass arguments to the decorator, and any chains after that are a SyntaxError.</p>
<p>Is there anything I'm missing here? A reason for this behaviour or a way to work around it?</p>
<p>This code was written for Python 3.4.</p>
<pre><code>#!/usr/bin/env python3

class Decorator:
    def decorate(self, callback):
        return callback

_dec = Decorator()
def findit():
    return _dec

class B: dec = _dec
class A: bar = B()
foo = A()

dec = findit()
@dec.decorate
#@findit().decorate
#Above line is a syntax error
@foo.bar.dec.decorate #also permitted
def function():
    pass
</code></pre>
<p>Error:</p>
<pre><code>  File "test.py", line 17
    @findit().decorate
             ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">The grammar</a> for decorators is something like:</p>
<pre><code>decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef | async_funcdef)
</code></pre>
<p>Here <code>dotted_name</code> is(AKA <code>foo</code>, <code>foo.bar.spam</code> etc):</p>
<pre><code>dotted_name: NAME ('.' NAME)*
</code></pre>
<p>From the grammar it's clear that the parenthesis can only be followed by a newline not another <code>dotted_name</code>, hence it throws a syntax error.</p>
<p>So, to fix this make sure the function call is always at the end, if there's a function call in-between you must assign it to a variable beforehand(taken from your code only):</p>
<pre><code>dec = findit()
@dec.decorate
</code></pre>
<hr/>
<p>For the history related to the decorator syntax you can go through this doc: <a href="https://wiki.python.org/moin/PythonDecorators" rel="nofollow noreferrer">https://wiki.python.org/moin/PythonDecorators</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You already have the workaround within your question. Just evaluate <code>findit()</code> before applying it as a decorator:</p>
<pre><code>dec = findit()
@dec.decorate
def function():
    pass
</code></pre>
<p>Remember that the <code>@decorator</code> syntax is just syntactic sugar, so the above is equivalent to:</p>
<pre><code>def function():
    pass

function = findit().decorate(function)
</code></pre>
</div>
<span class="comment-copy">Try <code>@(findit().decorate)</code>. Could be a precedence issue?</span>
<span class="comment-copy"><code>@(findit().decorate)</code> gives a syntax error on the opening bracket.</span>
