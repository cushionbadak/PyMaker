<div class="post-text" itemprop="text">
<p>I'm relatively new with a decent amount of experience and I'm trying to make a text based adventure, I'm making a fighting system and wish to have enemy's that have different abilities. Instead of recreating the fight for a different enemy every time, I'm trying to use interchangeable dictionaries for each enemy. My goal is to create a function call that varies depending on what enemy is in the fight without getting into objects. I have an example below and would like to know if there is a way to do something similar.</p>
<pre><code>wolf = {'ability': 'bite'}
bear = {'ability': 'claw'}
enemy = {}

def claw():
    print('stuff')

def bite():
    print('different stuff')

def use_ability():
    enemy = wolf
    enemy['ability']()

use_ability()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python functions are first class objects. You can just use them as values in your dictionary.</p>
<pre><code>wolf = {'ability': bite}
bear = {'ability': claw}
</code></pre>
<p>However be careful as there is no forward referencing in python. So make sure you define your functions before you assign them to a dictionary.</p>
<pre><code>def claw():
    print('stuff')

def bite():
    print('different stuff')

wolf = {'ability': bite}
bear = {'ability': claw}

def use_ability():
    enemy = wolf
    enemy['ability']()

use_ability()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it:</p>
<pre><code>def claw():
    print('stuff')

def bite():
    print('different stuff')

wolf = {'ability': bite}
bear = {'ability': claw}

def use_ability(enemy):
    enemy['ability']()

use_ability(wolf)
# different stuff
</code></pre>
<p>It really doesn't mean you should do it this way, though.</p>
<p>Use Object-Oriented programming. If you only want to use dicts and functions, you probably should write Javascript instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>I can't help myself but to make a little program explaining <strong>how it should be done in an Object Orientated Language</strong>:</p>
<blockquote>
<p>You should look up some guides how OOP-Languages work, because when making a game it will be really helpfull if you do it that way</p>
<p><a href="http://www.python-course.eu/object_oriented_programming.php" rel="nofollow noreferrer">http://www.python-course.eu/object_oriented_programming.php</a></p>
</blockquote>
<pre><code># This is the SUPERCLASS it holds functions and variables 
# that all classes related to this object use
class Enemy(object):
    # Here we initialise our Class with varibales I've given an example of how to do that
    def __init__(self, HP, MAXHP, ability):
        self.HP = HP
        self.MAXHP = MAXHP
        self.ability = ability

    # This function will be used by both Bear and Wolf!
    def use_ability(self):
        print(self.ability)

# This is our Wolf Object or Class
class Wolf(Enemy):
    # Here we init the class inheriting from (Enemy)
    def __init__(self, ability, HP, MAXHP):
        super().__init__(HP, MAXHP, ability)

    # Here we call the superfunction of this Object.
    def use_ability(self):
        super().use_ability()

# Same as Wolf
class Bear(Enemy):
    def __init__(self, ability, HP, MAXHP):
        super().__init__(HP, MAXHP, ability)

    def use_ability(self):
        super().use_ability()

# How to init Classes
wolf_abilities = 'bite'
w = Wolf(wolf_abilities, 10, 10)

bear_abilities = 'claw'
b = Bear(bear_abilities, 10, 10)

# How to use methods from Classes
b.use_ability() # This will print 'bite'
w.use_ability() # This will print 'claw'
</code></pre>
</div>
<span class="comment-copy">Lookup how <code>Classes</code> work in python. Python is an Object-Orientated language. <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a></span>
<span class="comment-copy">Learning classes currently, I just wanted to finish this project in a simpler fashion before advancing</span>
<span class="comment-copy">And how is he supposed to call a function that can handle both dictionaries? Because this is just hardcoded. What if he wants to <code>use_ability</code> of <code>bear</code></span>
<span class="comment-copy">@Ludisposed He could parameterize the function, but obviously using inheritance is a better design here. The poster asked for a non-oop answer.</span>
<span class="comment-copy">Thank you so much, yes I didn't specify it changing, it was just a hard coded example. I did try to just use the name without quotes, but it told me undefined, thank you for clarifying that! Excellent answer!</span>
<span class="comment-copy">Indeed. It's more verbose but much more flexible than OP's code.</span>
<span class="comment-copy">I'm starting to get into object oriented programming, however I wanted to create this project first before advancing, and wanted a simpler explanation</span>
<span class="comment-copy">I know. Just couldn't help myself ^^</span>
