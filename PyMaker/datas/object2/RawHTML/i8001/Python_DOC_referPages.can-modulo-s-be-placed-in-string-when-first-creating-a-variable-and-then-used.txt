<div class="post-text" itemprop="text">
<p>I'm quite new to python, so forgive me if this is a silly question. I know how to use the modulo in strings in this fashion</p>
<pre><code>Me = "I'm %s and I like to %s" % ('Mike', 'code')
</code></pre>
<p>However, through my searching I haven't found an answer to whether or not it's possible to hardcode modulos into a string, then take advantage of it later.</p>
<p>Example:</p>
<pre><code>REPO_MENU = {'Issues':Api.github/repo/%s/branch/%s/issues,
         'Pull Requests':'Api.github/repo/%s/branch/%s/pull_requests',
         'Commits':'Api.github/repo/%s/branch/%s/commits'
         '&lt;FILTER&gt;: Branch':'Api.github/repo/%s/branch/%s'
        }

for key, value in REPO_MENU.items():
    Print value % ('Beta', 'master')
</code></pre>
<p>Will that format work? Is it good practice to use this method? I feel it could be beneficial in a lot of situations.</p>
</div>
<div class="post-text" itemprop="text">
<p>This does work. You can also use the <strong>format</strong> function, which works well. For example:</p>
<pre><code>menu1 = {'start':'hello_{0}_{1}',
        'end':'goodbye_{0}_{1}'}

menu2 = {'start':'hello_%s_%s',
        'end':'goodbye_%s_%s'}

for key, value in menu1.items():
    print value.format('john','smith')

for key, value in menu2.items():
    print value %('john','smith')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>%</code> is an operator like any other; when its left-hand operand is a string, it attempts to replace various placeholders with values from its right-hand operand. It doesn't matter if the left-hand operand is a string literal or a more complex expression, as long as it evaluates to a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers have noted, you can definitely perform the string-modulo operation multiple times on the same string. However, if you are using Python 3.6 (and if you can, you definitely SHOULD!), I suggest that you <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">use fstrings</a> rather than the string-modulo or <code>.format</code>. They are <a href="http://tomatohater.com/2013/08/30/python-performance-string-formatting/" rel="nofollow noreferrer">faster</a>, easier to read, and very convenient:</p>
<blockquote>
<p>A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'. These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.</p>
</blockquote>
<p>So the f-string is also portable, just like the other formatting options. </p>
<p>E.g.:</p>
<pre><code>&gt;&gt;&gt; value = f'A {flower.lower()} by any name would smell as sweet.'
&gt;&gt;&gt; flower = 'ROSE'
&gt;&gt;&gt; print(value)
A rose by any name would smell as sweet.
&gt;&gt;&gt; flower = 'Petunia'
&gt;&gt;&gt; print(value)
A petunia by any name would smell as sweet.
&gt;&gt;&gt; flower = 'Ferrari'
&gt;&gt;&gt; print(value)
A ferrari by any name would smell as sweet.
</code></pre>
<p>You can add this at the top of any module using the f-string as a helpful alert for other users (or future-you): </p>
<pre><code>try: 
    eval(f'')
except SyntaxError:
    print('Python 3.6+ required.')`.
    raise
</code></pre>
</div>
<span class="comment-copy">That's not a modulo operator. It''s a format string. Modulo means the remainder of an integer division operation (e.g., 10 modulo 7 = 3) ; it has nothing to do with strings.</span>
<span class="comment-copy">In addition to the answer by @KenWhite , if you're using the 3.x interpreter it's standard to use the <code>str.format()</code> method. It is also more flexible so you don't have to provide the format specifier. Oh and I think <code>'Mike, code'</code> should have been <code>'Mike', 'code'</code></span>
<span class="comment-copy">If you are using Python 3.6 (if you can, you SHOULD!), don't use <code>.format</code> OR <code>%</code>. Instead, <a href="http://tomatohater.com/2013/08/30/python-performance-string-formatting/" rel="nofollow noreferrer">use fstrings</a>.</span>
<span class="comment-copy">@KenWhite. I have often seen that operator called modulo even when it is used for other things, like string formatting.</span>
<span class="comment-copy">@RickTeachey thanks for the advice. The reason I'd like to work with either <code>.format</code> or <code>%</code> is because 1) To me it's more readable at the moment (still learning) and 2) It would allow for backwards compatibility for environments that are unable to use 3.x.</span>
<span class="comment-copy">Thank you for confirming and +1 for providing <b>both</b> examples. Just what I was looking for.</span>
<span class="comment-copy">Thank you for the detailed explanation and helpful links. I will likely revisit fstrings in the future when I'm a bit more seasoned, but for now I'd like to focus on methods that provide more readability for myself in order to build my understanding.</span>
<span class="comment-copy">@CaffeinatedCoder Added a helpful hint to the end.</span>
