<div class="post-text" itemprop="text">
<p>I am going to use spaCy NLP engine and I have started from dictionary. I have read <a href="https://spacy.io/docs/api/vocab" rel="nofollow noreferrer">this resource</a> and <a href="https://spacy.io/docs/usage/tutorials" rel="nofollow noreferrer">this</a> but cannot start to do it.</p>
<p>I have this code:</p>
<pre><code>from spacy.en import English
import _regex
parser = English()

# Test Data
multiSentence = "There is an art, it says, or rather, a knack to flying." \
                 "The knack lies in learning how to throw yourself at the ground and miss." \
                 "In the beginning the Universe was created. This has made a lot of people "\
                 "very angry and been widely regarded as a bad move."
parsedData = parser(multiSentence)
for i, token in enumerate(parsedData):
    print("original:", token.orth, token.orth_)
    print("lowercased:", token.lower, token.lower_)
    print("lemma:", token.lemma, token.lemma_)
    print("shape:", token.shape, token.shape_)
    print("prefix:", token.prefix, token.prefix_)
    print("suffix:", token.suffix, token.suffix_)
    print("log probability:", token.prob)
    print("Brown cluster id:", token.cluster)
    print("----------------------------------------")
    if i &gt; 1:
        break

# Let's look at the sentences
sents = []
for span in parsedData.sents:
    # go from the start to the end of each span, returning each token in the sentence
    # combine each token using join()
    sent = ''.join(parsedData[i].string for i in range(span.start, span.end)).strip()
    sents.append(sent)

print('To show sentence')
for sentence in sents:
    print(sentence)


# Let's look at the part of speech tags of the first sentence
for span in parsedData.sents:
    sent = [parsedData[i] for i in range(span.start, span.end)]
    break

for token in sent:
    print(token.orth_, token.pos_)

# Let's look at the dependencies of this example:
example = "The boy with the spotted dog quickly ran after the firetruck."
parsedEx = parser(example)
# shown as: original token, dependency tag, head word, left dependents, right dependents
for token in parsedEx:
    print(token.orth_, token.dep_, token.head.orth_, [t.orth_ for t in token.lefts], [t.orth_ for t in token.rights])

# Let's look at the named entities of this example:
example = "Apple's stocks dropped dramatically after the death of Steve Jobs in October."
parsedEx = parser(example)
for token in parsedEx:
    print(token.orth_, token.ent_type_ if token.ent_type_ != "" else "(not an entity)")

print("-------------- entities only ---------------")
# if you just want the entities and nothing else, you can do access the parsed examples "ents" property like this:
ents = list(parsedEx.ents)
for entity in ents:
    print(entity.label, entity.label_, ' '.join(t.orth_ for t in entity))

messyData = "lol that is rly funny :) This is gr8 i rate it 8/8!!!"
parsedData = parser(messyData)
for token in parsedData:
    print(token.orth_, token.pos_, token.lemma_)
</code></pre>
<p>Where can I change these tokens (token.orth, token.orth_, so on):</p>
<pre><code>print("original:", token.orth, token.orth_)
    print("lowercased:", token.lower, token.lower_)
    print("lemma:", token.lemma, token.lemma_)
    print("shape:", token.shape, token.shape_)
    print("prefix:", token.prefix, token.prefix_)
    print("suffix:", token.suffix, token.suffix_)
    print("log probability:", token.prob)
    print("Brown cluster id:", token.cluster)
</code></pre>
<p>Can I save those tokens in the own dictionary? Thank you for any help</p>
</div>
<div class="post-text" itemprop="text">
<p>It's unclear what is the desired data structure that you require but let's try to answer some of the question.</p>
<h1>Q: Where can I change these tokens (token.orth, token.orth_, ...)?</h1>
<p>These tokens shouldn't be changed because they are the annotations created by the English models from <code>spacy</code>. (See definition of <a href="https://www.safaribooksonline.com/library/view/natural-language-annotation/9781449332693/ch01.html" rel="nofollow noreferrer">annotations</a>)</p>
<p>For details on what the individual annotation mean, see <a href="https://stackoverflow.com/questions/43990617/spacy-documentation-for-orth-pos-tag-lema-and-text">spaCy Documentation for [ orth , pos , tag, lema and text ]</a> </p>
<h1>Q: But can we change the annotations of these tokens?</h1>
<p>Possibly, yes and no. </p>
<p>Looking at the code, we see that the <a href="https://github.com/explosion/spaCy/blob/master/spacy/tokens/doc.pyx" rel="nofollow noreferrer"><code>spacy.tokens.doc.Doc</code></a> class is a rather complex Cython object:</p>
<pre><code>cdef class Doc:
    """
    A sequence of `Token` objects. Access sentences and named entities,
    export annotations to numpy arrays, losslessly serialize to compressed
    binary strings.
    Aside: Internals
        The `Doc` object holds an array of `TokenC` structs.
        The Python-level `Token` and `Span` objects are views of this
        array, i.e. they don't own the data themselves.
    Code: Construction 1
        doc = nlp.tokenizer(u'Some text')
    Code: Construction 2
        doc = Doc(nlp.vocab, orths_and_spaces=[(u'Some', True), (u'text', True)])
    """
</code></pre>
<p>But in general it's a sequence of the <a href="https://github.com/explosion/spaCy/blob/master/spacy/tokens/token.pyx" rel="nofollow noreferrer"><code>spacy.tokens.token.Token</code></a> object which contains a is inherently tied closely to the <a href="https://github.com/explosion/spaCy/blob/master/spacy/vocab.pyx" rel="nofollow noreferrer"><code>spacy.Vocab</code></a> object.</p>
<p>First, let's see whether some of these annotations are mutable. Let's start with the POS tags:</p>
<pre><code>&gt;&gt;&gt; import spacy
&gt;&gt;&gt; nlp = spacy.load('en')
&gt;&gt;&gt; doc = nlp('This is a foo bar sentence.')

&gt;&gt;&gt; type(doc[0]) # First word. 
&lt;class 'spacy.tokens.token.Token'&gt;

&gt;&gt;&gt; dir(doc[0]) # Properties/functions available for the Token object. 
['__bytes__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__pyx_vtable__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__unicode__', 'ancestors', 'check_flag', 'children', 'cluster', 'conjuncts', 'dep', 'dep_', 'doc', 'ent_id', 'ent_id_', 'ent_iob', 'ent_iob_', 'ent_type', 'ent_type_', 'has_repvec', 'has_vector', 'head', 'i', 'idx', 'is_alpha', 'is_ancestor', 'is_ancestor_of', 'is_ascii', 'is_bracket', 'is_digit', 'is_left_punct', 'is_lower', 'is_oov', 'is_punct', 'is_quote', 'is_right_punct', 'is_space', 'is_stop', 'is_title', 'lang', 'lang_', 'left_edge', 'lefts', 'lemma', 'lemma_', 'lex_id', 'like_email', 'like_num', 'like_url', 'lower', 'lower_', 'n_lefts', 'n_rights', 'nbor', 'norm', 'norm_', 'orth', 'orth_', 'pos', 'pos_', 'prefix', 'prefix_', 'prob', 'rank', 'repvec', 'right_edge', 'rights', 'sentiment', 'shape', 'shape_', 'similarity', 'string', 'subtree', 'suffix', 'suffix_', 'tag', 'tag_', 'text', 'text_with_ws', 'vector', 'vector_norm', 'vocab', 'whitespace_']

# The POS tag assigned by spacy's model.
&gt;&gt;&gt; doc[0].tag_ 
'DT'

# Let's try to override it.
&gt;&gt;&gt; doc[0].tag_ = 'NN'

# It works!!!
&gt;&gt;&gt; doc[0].tag_
'NN'

# What if we overwrite index of the tag_ rather than the form?
&gt;&gt;&gt; doc[0].tag
474
&gt;&gt;&gt; doc[0].tag = 123
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "spacy/tokens/token.pyx", line 206, in spacy.tokens.token.Token.tag.__set__ (spacy/tokens/token.cpp:6755)
  File "spacy/morphology.pyx", line 64, in spacy.morphology.Morphology.assign_tag (spacy/morphology.cpp:4540)
KeyError: 123
&gt;&gt;&gt; doc[0].tag = 352
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "spacy/tokens/token.pyx", line 206, in spacy.tokens.token.Token.tag.__set__ (spacy/tokens/token.cpp:6755)
  File "spacy/morphology.pyx", line 64, in spacy.morphology.Morphology.assign_tag (spacy/morphology.cpp:4540)
KeyError: 352
</code></pre>
<p>So somehow, if you change the form of the POS tag (<code>.pos_</code>), it persist but there's no way principled way to get the correct key since these keys are automatically generated from the Cython properties. </p>
<p>Let's take a look at another annotation <code>.orth_</code>:</p>
<pre><code>&gt;&gt;&gt; doc[0].orth_
'This'
&gt;&gt;&gt; doc[0].orth_ = 'that'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: attribute 'orth_' of 'spacy.tokens.token.Token' objects is not writable
</code></pre>
<p>Now we see that there are some annotation of the Tokens like <code>.orth_</code> is protected from being overwritten. Most probably this is because it will break how the tokens are mapped back to the original offset of the input string. </p>
<p>Ans: It seems like some properties of the Token object can be changed and some cannot. </p>
<h1>Q: So which Token properties can be changed and which can't?</h1>
<p>An easy way to check this is to look out for the <code>__set__</code> function in the Cython properties in <a href="https://github.com/explosion/spaCy/blob/master/spacy/tokens/token.pyx#L32" rel="nofollow noreferrer">https://github.com/explosion/spaCy/blob/master/spacy/tokens/token.pyx#L32</a>. </p>
<p>This would allow mutable variables and most probably these are the Token properties that can be overwritten/changed.</p>
<p>E.g. </p>
<pre><code>property lemma_:
    def __get__(self):
        return self.vocab.strings[self.c.lemma]
    def __set__(self, unicode lemma_):
        self.c.lemma = self.vocab.strings[lemma_]

property pos_:
    def __get__(self):
        return parts_of_speech.NAMES[self.c.pos]

property tag_:
    def __get__(self):
        return self.vocab.strings[self.c.tag]
    def __set__(self, tag):
        self.tag = self.vocab.strings[tag]
</code></pre>
<p>We'll see that <code>.tag_</code> and <code>.lemma_</code> is mutable but <code>.pos_</code> isn't:</p>
<pre><code>&gt;&gt;&gt; doc[0].lemma_
'this'
&gt;&gt;&gt; doc[0].lemma_ = 'that'
&gt;&gt;&gt; doc[0].lemma_
'that'

&gt;&gt;&gt; doc[0].tag_ 
'DT'
&gt;&gt;&gt; doc[0].tag_ = 'NN'
&gt;&gt;&gt; doc[0].tag_
'NN'

&gt;&gt;&gt; doc[0].pos_
'NOUN'
&gt;&gt;&gt; doc[0].pos_ = 'VERB'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: attribute 'pos_' of 'spacy.tokens.token.Token' objects is not writable
</code></pre>
<h1>Q: Can I save those tokens in the own dictionary?</h1>
<p>I'm not exactly sure what that meant. But perhaps, you meant something like <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a>.</p>
<p>Somehow, the default <code>pickle</code> works weirdly for Cython objects so you might require other methods of saving <code>spacy.tokens.doc.Doc</code> or <code>spacy.tokens.token.Token</code> objects created by <code>spacy</code>, i.e. </p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; import spacy

&gt;&gt;&gt; nlp = spacy.load('en')
&gt;&gt;&gt; doc = nlp('This is a foo bar sentence.')

&gt;&gt;&gt; doc
This is a foo bar sentence.

# Pickle the Doc object.
&gt;&gt;&gt; pickle.dump(doc, open('spacy_processed_doc.pkl', 'wb'))

# Now you see me.
&gt;&gt;&gt; doc
This is a foo bar sentence.
# Now you don't
&gt;&gt;&gt; doc = None
&gt;&gt;&gt; doc

# Let's load the saved pickle.
&gt;&gt;&gt; doc = pickle.load(open('spacy_processed_doc.pkl', 'rb'))
&gt;&gt;&gt; doc

&gt;&gt;&gt; type(doc)
&lt;class 'spacy.tokens.doc.Doc'&gt;
&gt;&gt;&gt; doc[0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "spacy/tokens/doc.pyx", line 185, in spacy.tokens.doc.Doc.__getitem__ (spacy/tokens/doc.cpp:5550)
TypeError: 'NoneType' object is not subscriptable
</code></pre>
</div>
<span class="comment-copy">Could you explain further about what you require in the desired dictionary?</span>
<span class="comment-copy">WOW! Thank you for your very clear explanation.</span>
