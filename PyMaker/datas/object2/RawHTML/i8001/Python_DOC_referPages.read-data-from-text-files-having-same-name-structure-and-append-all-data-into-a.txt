<div class="post-text" itemprop="text">
<p>I have some data files, say <code>data1.txt</code>, <code>data 2.txt</code>,... and so on. I want to read all these data files using a single loop structure and append the data values into a single file, say data-all.txt.</p>
<p>I am fine with any of the following programming languages: <code>c</code>, <code>python</code>, <code>matlab</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>pathlib</code> module is great for globbing matching files, and for easy read/write:</p>
<pre><code>from pathlib import Path

def all_files(dir, mask):
    for path in Path(dir).glob(mask):
        yield from path.open()

Path('data_all.txt').write_text(''.join(all_files('.', 'data*.txt')))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In windows,  use
copy data*.txt data-all.txt</p>
<p>In Unix, use
cat data*.txt &gt;&gt; data-all.txt</p>
</div>
<div class="post-text" itemprop="text">
<p>Use python <strong>zip</strong> and the <strong>csv</strong> module to achieve this. Within a single for loop:</p>
<p>For Example:</p>
<pre><code>import csv
with open("data_all.csv", "w") as f:
    csv_writer = csv.writer(f)
    for d1, d2, d3 in zip(open("data1.txt", "r"), open("data2.txt", "r"), open("data3.txt", "r")):
        csv_writer.writerow([d1, d2, d3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python First of all you have to create the list of all file paths you can use the glob library in python.</p>
<pre><code>import glob
import pandas as pd
path_list = glob.glob('Path/To/Your/DataFolder/pattern(data*)')
</code></pre>
<p>then you can read that data using list comprehension.it will give you the list of data frames depending upon the data files in your folder</p>
<pre><code>list_data = [pd.read_csv(x,sep='\t') for x in path_list]
</code></pre>
<p>It will combine the data in single data frame and you can write it as a single dataframe. </p>
<pre><code>data_all = pd.concat(list_data,ignore_index=True)
</code></pre>
<p>now you can write the dataframe in a single file.</p>
<pre><code>data_all.to_csv('Path',sep=',')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can be done through reading the content of each file, and writing them into an output file handle. The files structure in your description contains numbers, so we might need to call sorted to sort them before start reading. The "files_search_pattern" should point out to the input directory 'PATH/*.txt' and the same for the output file handle "data-all.txt"</p>
<pre><code>import glob

files_search_pattern = "*.txt"

files = sorted(glob.glob(files_search_pattern))

with open("data-all.txt", "wb") as output:
    for f in files:
        with open(f, "rb") as inputFile:
            output.write(inputFile.read())
</code></pre>
</div>
<span class="comment-copy">Do you have any prototype of your code? Give more details of your files. What is the structure of these files? Are they tab or comma-delimited? If this is the case, I suggest that you read about the csv module (<a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a>).</span>
<span class="comment-copy">@Felipe All the data files are in <code>.txt</code> format. There are M rows and 3 columns with only numerical values and no text (not even header). The numerical values are tab-delimited.</span>
<span class="comment-copy">Paul, good night! What do you mean by "matching files"?</span>
<span class="comment-copy">Files whose name match a glob wildcard string.</span>
<span class="comment-copy">Gosh, what a great module! Thanks for the tip!!</span>
<span class="comment-copy">How about this sexy '/' operator overload? <code>dir_path = Path('/tmp/some/dir'); file_in_dir = dir_path / 'data1.txt'</code>  And there is also <code>rglob</code> for recursive glob.</span>
<span class="comment-copy">I am getting following error while running this code: <code>SyntaxError: Invalid syntax</code> for the line 5, that is <code>yield from path.open()</code></span>
