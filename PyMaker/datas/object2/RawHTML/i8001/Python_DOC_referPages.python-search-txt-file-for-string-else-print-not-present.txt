<div class="post-text" itemprop="text">
<p>I am having an issue where I'm trying to write a program that combs a config file for 'certain' search terms and if they match, print its there, if not print its not here. Here is what i have so far:</p>
<pre><code>import sys
import fnmatch
import re

check = ["test1", "test2", "test3"]

 for f in filter(os.path.isfile, sys.argv[1:]): ##open doc arg
    for line in open(f).readlines(): ##loop for reading line by line
        if re.match(check[0], line): ##match at beginning for check
            print(check[0], "is in place") ##print if match == true
        elif re.search(check[0], line): ##if not check search (full file)
            print(check[0], "is not in place") ##print if true
    for line in open(f).readlines():
        if re.match(check[1], line):
            print(check[1], "is in place")
        elif ((re.search(check[1], line)) == None):
            print(check[1], "is not in place")
</code></pre>
<p>So the issue is, if i print an else: statement, then every line (all 1500) prints since the loop runs line by line. Is there a way to search the whole doc and not line by line?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>else</code> clause of the <code>for</code> loop along with the <code>break</code> statement. Also note that just iterating over the file itself will do; no need to explicitly read all the lines. (I also added <code>with</code> to make sure the file gets closed.)</p>
<pre><code>with open(f) as infile:
    for line in infile:
        if re.match(check[0], line):
            print(check[0], "is in place")
            break     # stop after finding one match
    else:             # we got to the end of the file without a match
        print(check[0], "is not in place")
</code></pre>
<p>You can even write it as one of those ever-popular generator expressions:</p>
<pre><code>with open(f) as infile:
    if any(re.match(check[0], line) for line in infile):
        print(check[0], "is in place")
    else:
        print(check[0], "is not in place")
</code></pre>
<p>Since the messages being printed are so similar, you can code-golf it even further:</p>
<pre><code>with open(f) as infile:
    print(check[0], "is" if any(re.match(check[0], line) for line in infile) else "is not", "in place")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is possible, using <code>read()</code>. But beware that if your file is huge, it may not be a good idea to load the entire file at once in your memory.</p>
<p>Also you are looping through the same file multiple times, try to avoid this by only iterating over the file once and searching all the values in the <code>check</code> array at once. Furthermore try to avoid using regexes whenever possible since they can be slow. Something like this can work too:</p>
<pre><code>for line in open(f).readlines():
    for check_value in check:
        if check_value in line:
            print "{} is in place.".format(check_value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To read the entire file, you can use <code>read()</code> instead of <code>readlines()</code>.</p>
<pre><code>with open(f) as fil:
    lines = fil.read()
</code></pre>
<p>If what you're looking for in the file is just a string, you don't need <code>re</code>:</p>
<pre><code>if check[0] in lines:
    print(check[0], "is in place")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you can read the file to a string and use a simple <code>if x in...</code>, i.e.:</p>
<pre><code>with open("text_contains.txt") as f:
    text =  f.read().lower() # remove .lower() for caseSensiTive matching
for x in ["test1", "test2", "test3"]:
    if x in text:
        print("{} is in place".format(x))
    else:
        print("{} is not in place".format(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really need to read the file line by line (I assume you need the line of the occurrence), then:</p>
<pre><code>import sys
import fnmatch
import re

searchTerms = ["test1", "test2", "test3"]
occurrences = {}

# Initialise occurrences list for each term:

for term in searchTerms:
    occurrences[term] = []

# Read line by line and check if any of the terms is present in that specific
# line. If it is, save the occurrence.

for f in filter(os.path.isfile, sys.argv[1:]):
    for line in open(f).readlines():
        for term in searchTerms:
            if re.match(term, line):
                occurrences[term].append(line)

# For each term, print all the lines with occurrences, if any, or 'not found'
# otherwise:

for term in searchTerms:
    if len(occurrences[term]) &gt; 0:
        print("'%s' found in lines: %s" % ", ".join(occurrences[term]))
    else:
        print("'%s' not found" % term)
</code></pre>
<p>However, if you just need to check if the term is there, regardless of the line, just use <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer"><code>read</code></a> to read the whole file at once:</p>
<pre><code>for f in filter(os.path.isfile, sys.argv[1:]):
    with open(f) as file:
        text = file.read()

        for term in searchTerms:
            if re.match(term, text):
                print("'%s' found" % term)
            else:
                print("'%s' not found" % term)
</code></pre>
</div>
<span class="comment-copy">Do you need to match all strings in the list or just one ?</span>
<span class="comment-copy">only need one string to match, moreover, needs to match at the beginning of the string.</span>
<span class="comment-copy">Another method might be to +=1 to a variable instead of your print statements, then at the end print your print statements if those variables are greater than zero?</span>
<span class="comment-copy">this is awesome, i see where i went wrong with my logic. Thanks a lot!</span>
