<div class="post-text" itemprop="text">
<p>I am trying to read a txt file that is a mix of string and float
like this:</p>
<pre><code>n_rows=55;    #This describes the mask array below, not the experiment!!
n_cols=32;
# Note that 'columns' run down and rows run across!

mask = [
/*RC1   0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 */
/* 0 */ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,
/* 1 */ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,
/* 2 */ 1,0,0,1,1,1,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,
/* 3 */ 0,0,0,1,1,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,1, 0,0,0,0,1,1,1,1,1,0, 1,0,1,1,1,
/* 4 */ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,
/* 5 */ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,
/* 6 */ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,
/* 7 */ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 1,1,0,0,1,
/*RC2   0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 */
</code></pre>
<p>The only thing I want is the numbers after /* n */ that I can finally get a matrix consisting 1 and 0. There are 32 rows in total (example file only shows 8 rows) and there are useless lines in between them.</p>
<p>I tried some pretty dumb way of doing this:</p>
<pre><code>txtlines = tuple(open(filename, 'r'))   #read files so that each whole line in txt file become an element of a list)
txtlines=list(txtlines)

import re
pattern = re.compile("/*[0-31]*/")     #set a pattern to remove unwanted lines


gen = [i for i in txtlines if pattern.match(i)==None] # The useless element
lines_cut = [x for x in txtlines if x not in gen]
</code></pre>
<p>I planned to cut off '/* n */' within each element later and change each the elements to be a 1d array of [0,1,0,1,0,0,0,...] and append all of them to be a 2d array.</p>
<p>There are two problems so far:</p>
<ol>
<li><p>I didn't successfully cut all of the useless element by that pattern, the line like /*RC2   0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 5 6 7 8 9  0 1 2 3 4 */ remains</p></li>
<li><p>After cutting gen from lines, the order of remaining elements is totally changed, initially the first element is the one with /<em>0</em>/ but not it's /<em>25</em>/. But i really need the order to be persistent.</p></li>
</ol>
<p>I kinda solved problem 2 by changing the list to array, and then remove </p>
<pre><code>array=np.asarray(txtlines)
gen_array=np.asarray(gen)
array_cut=[x for x in array if x not in gen_array] 
</code></pre>
<p>It seems working but I am not quite sure if I'm doing the correct thing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your regular expression is not correct. You need to escape '*' and instead of [0-31] you need [0-9]+, i.e. one or more digits. For example,</p>
<pre><code>import re
import numpy as np

def get_line(filename):
    pattern = re.compile('^/\* *[0-9]+ *\*/(.*)')    
    with open(filename, 'r') as file:
        for line in file:
            m = re.match(pattern, line)
            if m:
                yield m.group(1).strip(', ').split(',')

m = np.matrix([l for l in get_line(filename)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = []
with open("tonparr.txt","r") as f:
    for line in f:
        if line[0:3] == "/* ":
            a.append(line[8:-1])

b= []
for x in range(0,len(a)):
    b.append([])
    for i in a[x].split(","):
        if i.isdigit():
            b[x].append(int(i))
</code></pre>
<p>produces a 2D array of each line as int arrays, from there you just need to convert each to a numpy array. Sorry if I interpreted the question incorrectly.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>result = []
with open('data.txt') as data:
    for line in data:
        if not line.startswith('/* '): continue
        pieces = line.split('*/')
        result.append(pieces[1].strip().replace(' ', ''))
for row in result:
    print (row)
</code></pre>
<p>You are looking for lines that open with <code>'/* '</code>. When you find one split it on <code>'*/'</code> and retain the right-hand piece in the 'result` array minus the blanks.</p>
</div>
<span class="comment-copy">This seems like it can work. You can slice to solve problem 1. If you have "new_array = array_cut[1:-1]", you will take off the first and last rows.</span>
<span class="comment-copy">Does it means that the array will always tend to keep the order after array operation, while the list won't?</span>
<span class="comment-copy">It works, and it looks so neat!  Is m.group(1) keep the parts that correspond to (.*) in the regular expression?</span>
<span class="comment-copy">@Jude, yes. See the official documentation: <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a></span>
