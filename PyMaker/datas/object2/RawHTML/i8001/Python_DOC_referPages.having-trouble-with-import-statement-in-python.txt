<div class="post-text" itemprop="text">
<p>My current projects are structured like so.</p>
<pre><code>python/
    __init__.py
    project_1/
        __init__.py
        program_1.py
    project_2/
        __init__.py
        program_2.py
    project_3/
        __init__.py
        program_3.py
</code></pre>
<p>I wanted to import a class from project_3/program_3.py, called INFO, from both project_1/program_1.py and project_2/program_2.py.  In both my program_1.py and program_2.py, I've tried the following import statements that didn't work.</p>
<p><strong>Edit</strong> - I typically "cd" into project_1 and run my program_1.py from there.</p>
<pre><code>from project_3.program_3 import INFO

Traceback (most recent call last):
  File "./program_1.py", line 43, in &lt;module&gt;
    from project_3.program_3 import INFO
ImportError: No module named 'project_3'

from python.project_3.program_3 import INFO

Traceback (most recent call last):
  File "./program_1.py", line 43, in &lt;module&gt;
    from python.project_3.program_3 import INFO
ImportError: No module named 'python'
</code></pre>
<p>The only way for me to import class INFO into program_1.py and program_2.py is by copying program_3.py in both program_1 and program_2's folder.  My import in program_1 and program_2's statement would become:</p>
<pre><code>python/
    __init__.py
    project_1/
        __init__.py
        program_1.py
        program_3.py
    project_2/
        __init__.py
        program_2.py
        program_3.py
    project_3/
        __init__.py
        program_3.py

from program_3 import INFO
</code></pre>
<p>This is quite inconvenience because now I have to update program_3.py in all 3 locations.  Assuming my the way I structured my project folder is retarded:</p>
<ul>
<li>What's the correct/best way to structure my folders so that I could call program_3.py from program_1/2.py?</li>
<li>If there's nothing wrong with my current structure, how do I correctly import the INFO class into program_1/2.py?</li>
</ul>
<p>I have read the <a href="https://docs.python.org/3/tutorial/modules.html#packages%22Python%20Documentation%22" rel="nofollow noreferrer">python documentation</a> but it didn't say anything regarding importing classes from one subfolder to another.  I also looked at another <a href="https://stackoverflow.com/questions/456481/cant-get-python-to-import-from-a-different-folder%22post%22">post</a> from Stack Overflow as well but it didn't have the same structure as mine.</p>
<p><strong>Update 1</strong> - It's important to note that I'm merely using project_1/2 as folder to organized my projects.  I originally had <strong>init</strong>.py in all my folders because I have no clue what I'm doing.  The only module/package that I wanted to import in my project_1/program_1.py is from project_3/program_3.py.  Example:</p>
<pre><code>python/
    project_1/
        program_1.py
    project_2/
        program_2.py
    project_3/
        __init__.py
        program_3.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When using submodules, you need to use relative imports. In the example provided, importing <code>program_3</code> from <code>program_1</code> should be :</p>
<pre><code>from ..project_3 import program_3
</code></pre>
<p>and then you can use the <code>INFO</code> class: <code>program_3.INFO</code>. </p>
<p>This works if your executable file is outside the script, that is the file which uses the module <code>python</code> in the example should be outside the <code>python</code> module. </p>
<p>If parts of the <code>python</code> package  are executed as a script, the <code>-m</code> option should be passed to the interpreter: </p>
<pre><code>python3 -m python.project_1.program_1
</code></pre>
<p>I hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The previous solution provides me the same error.</p>
<p>I found a fix by using sys:</p>
<pre><code>import sys
sys.path.append('../')

from project_3 import program_3
...
</code></pre>
<p>This way, you setup 'python' folder as reference (in your case it's the parent folder but you can select the path you want)</p>
<p>I hope it helps,</p>
</div>
<span class="comment-copy">Change directory in each python script to the python  root directory<code>os.chdir('./python')</code>  and then handle imports from there</span>
<span class="comment-copy">I did a bit differently but similar by doing "from ..project_3.program_3 import INFO".  The error I got was "SystemError: Parent module '' not loaded, cannot perform relative import."</span>
<span class="comment-copy">Is the file you are running inside the module itself?. If this is the case, use <code>-m</code> option such as <code>python -m python.project_1.program_1</code></span>
<span class="comment-copy">I typically cd into project_1 and run ./program_1.py from there. If I tried to run it with the -m option, I get the following error: python3.5 -m python.project_1.program_1.py /usr/local/bin/python3.5: Error while finding spec for 'python.project_1.program_1.py' (ImportError: No module named 'python')</span>
<span class="comment-copy">You need to cd to the directory which contains the outer module <code>python</code>, then you can run your program as in the updated answer. If you really want to run it from within program_1, you will need to change the path from within the program or something like that...</span>
<span class="comment-copy">@dreamzboy in general, directly executing code from within packages (folders that have an <code>__init__.py</code> within) is wrong and very likely to cause problems.</span>
<span class="comment-copy">I have updated my answer so that it works when running scripts within the module.</span>
<span class="comment-copy">Thanks.  This works but of course PEP8 doesn't like the fact that the import statement is below the sys.path.append ('../') statement.  It's definitely better than my work around but I prefer following the "standard" to keep things neat if there's an alternative.</span>
<span class="comment-copy">Unfortunately, it's the only solution I found on others forums. They provide more elegant way to define the path but it's the same fix. Please share if you got another solution (I'm also interested :) )</span>
<span class="comment-copy">I ended up doing the workaround where I moved my program_1/2.py under python/ directory and was able to use from project_3 import program_3.py with no errors.  Your solution is definitely clever but in my opinion it's more of a hack than a solution. If I have different versions of program_1, I'll just move it back into the project_1 folder and continue to develop the original program_1 under the python directory.</span>
