<div class="post-text" itemprop="text">
<p>If I had a <code>dict</code> object say <code>values = {'a': 'alpha', 'b': 'bravo'}</code>.</p>
<p>I've seen use cases where one may do <code>values['a']</code> to get the value of the <code>a</code> key.</p>
<p>Now I am aware this is a normal way to access <code>dict</code> values, but I have also seen it used with objects such as a <code>Tk.Scrollbar['command'] = yadayada</code>.</p>
<p>Is there a name or documentation for this practice of using <code>[ ]</code> with objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>[ ]</code> is called indexing or slicing (or sometimes array/sequence/mapping-like access). The <code>x[idx] = val</code> is called index or slice <em>assigment</em>.</p>
<p>The methods that are responsible how the instance acts when indexed or sliced are:</p>
<ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__</code></a>, </li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__</code></a> and </li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" rel="nofollow noreferrer"><code>__delitem__</code></a>. </li>
<li>(In Python-2.x there is also <code>__getslice__</code>, ... but these are deprecated since python 2.0 - if you don't inherit from a class that uses these you shouldn't need those)</li>
</ul>
<p>For example (missing any actual implementation, just some <code>print</code>s):</p>
<pre><code>class Something(object):
    def __getitem__(self, item):
        print('in getitem')
    def __setitem__(self, item, newvalue):
        print('in setitem')
    def __delitem__(self, item):
        print('in delitem')
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; sth = Something()
&gt;&gt;&gt; sth[10]  
in getitem
&gt;&gt;&gt; sth[10] = 100  
in setitem
&gt;&gt;&gt; del sth[10]  
in delitem
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is briefly described in the python tkinter documentation. Tkinter does it simply as a convenience, the feature has no name that is specific to tkinter.</p>
<p><a href="https://docs.python.org/3.6/library/tkinter.html#setting-options" rel="nofollow noreferrer">https://docs.python.org/3.6/library/tkinter.html#setting-options</a></p>
<blockquote>
<p>Options control things like the color and border width of a widget. Options can be set in three ways:</p>
<p>At object creation time, using keyword arguments<br/></p>
<p><code>fred = Button(self, fg="red", bg="blue")</code></p>
<p>After object creation, treating the option name like a dictionary index</p>
<p><code>fred["fg"] = "red"</code><br/>
<code>fred["bg"] = "blue"</code></p>
<p>Use the config() method to update multiple attrs subsequent to object creation</p>
<p><code>fred.config(fg="red", bg="blue")</code></p>
</blockquote>
<p>For more general purpose information outside of the context of tkinter, see <a href="https://stackoverflow.com/questions/4014621/a-python-class-that-acts-like-dict">A python class that acts like dict</a></p>
</div>
<span class="comment-copy">Are you sure <code>Tk.Scrollbar</code> isn't just a dictionary?</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/4014621/a-python-class-that-acts-like-dict" title="a python class that acts like dict">stackoverflow.com/questions/4014621/â€¦</a></span>
<span class="comment-copy"><code>__getslice__</code> has been deprecated since Python <i>2.0</i>, but it was still used by built-in types, so one needs to override it when subclassing those.</span>
<span class="comment-copy">@chepner That's correct. I just wanted to mention <code>__getslice__</code> without going into details - so I haven't double checked what I've written there. I updated the answer.</span>
<span class="comment-copy">It's not called "slicing"  unless the slice syntax is used (i.e. there is at least one <code>:</code> in the <code>[]</code>).</span>
