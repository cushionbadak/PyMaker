<div class="post-text" itemprop="text">
<p>so stdin returns a sting of text into a list, and multiple lines of text are all list elements.
How do you split them all into single words?</p>
<pre><code>mylist = ['this is a string of text \n', 'this is a different string of text \n', 'and for good measure here is another one \n']
</code></pre>
<p>wanted output:</p>
<pre><code>newlist = ['this', 'is', 'a', 'string', 'of', 'text', 'this', 'is', 'a', 'different', 'string', 'of', 'text', 'and', 'for', 'good', 'measure', 'here', 'is', 'another', 'one']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use simple list comprehension, like:</p>
<pre><code>newlist = [<b>word</b> for line in mylist <b>for word in line.split()</b>]</code></pre>
<p>This generates:</p>
<pre><code>&gt;&gt;&gt; [word for line in mylist for word in line.split()]
['this', 'is', 'a', 'string', 'of', 'text', 'this', 'is', 'a', 'different', 'string', 'of', 'text', 'and', 'for', 'good', 'measure', 'here', 'is', 'another', 'one']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just do:</p>
<pre><code>words = str(list).split()
</code></pre>
<p>So you turn the list into a string then split it by a space bar.
Then you can remove the /n's by doing:</p>
<pre><code>words.replace("/n", "")
</code></pre>
<p>Or if you want to do it in one line:</p>
<pre><code>words = str(str(str(list).split()).replace("/n", "")).split()
</code></pre>
<p>Just saying this may not work in python 2</p>
</div>
<div class="post-text" itemprop="text">
<p>Besides the list comprehension answer above that i vouch for, you could also do it in a for loop:</p>
<pre><code>#Define the newlist as an empty list
newlist = list()
#Iterate over mylist items
for item in mylist:
 #split the element string into a list of words
 itemWords = item.split()
 #extend newlist to include all itemWords
 newlist.extend(itemWords)
print(newlist)
</code></pre>
<p>eventually your <code>newlist</code> will contain all split words that were in all elements in <code>mylist</code></p>
<p>But the python list comprehension looks much nicer and you can do awesome things with it. Check here for more:</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a> </p>
</div>
<span class="comment-copy">Thank you, that is perfect. What is even nicer is that you have outlined a whole new concept in python for me to study.</span>
<span class="comment-copy">Yes, thanks for putting me onto this, I was studying it all weekend. It is a nice and elegant way to solve the problem. My main concern is speed and efficiency, and it seems to me that list comprehensions being part of the built in python language would be quicker than a loop.</span>
