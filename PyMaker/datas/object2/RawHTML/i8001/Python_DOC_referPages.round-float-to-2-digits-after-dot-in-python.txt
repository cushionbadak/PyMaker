<div class="post-text" itemprop="text">
<p>I'm using this code:</p>
<pre><code>f = 0.3223322
float('%.2f' % (f))
</code></pre>
<p>Is there more pythonic, less verbose method without 2 castings?
Using <a href="http://The%20behavior%20of%20round()%20for%20floats%20can%20be%20surprising:%20for%20example,%20round(2.675,%202)%20gives%202.67%20instead%20of%20the%20expected%202.68.%20This%20is%20not%20a%20bug:%20it%E2%80%99s%20a%20result%20of%20the%20fact%20that%20most%20decimal%20fractions%20can%E2%80%99t%20be%20represented%20exactly%20as%20a%20float.%20See%20Floating%20Point%20Arithmetic:%20Issues%20and%20Limitations%20for%20more%20information." rel="nofollow noreferrer">round</a> is discouraging by the following note from the documentation</p>
<blockquote>
<p>The behavior of round() for floats can be surprising: for example,
  round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a
  bug: it’s a result of the fact that most decimal fractions can’t be
  represented exactly as a float. See Floating Point Arithmetic: Issues
  and Limitations for more information.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round(number[, ndigits])</code></a>:</p>
<pre><code>&gt;&gt;&gt; round(0.3223322, 2)
0.32
</code></pre>
<p>Note that you’ll probably still want to use a certain precision of string formatting when producing output due to floating point imprecision.</p>
<p>Depending on what you’re trying to achieve, it might be appropriate to use the <code>Decimal</code> type:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; round(Decimal(0.3223322), 2)
Decimal('0.32')
</code></pre>
<p>which does its math in (surprise!) decimal instead of binary and therefore doesn’t suffer any issues with decimal rounding (except initially if you’re trying to create it from a float).</p>
</div>
<div class="post-text" itemprop="text">
<p>Whats wrong with good old, built in <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">round()</a>?</p>
<p>Use it like so:</p>
<pre><code>round(input, digits)
</code></pre>
<p>Example output:</p>
<pre><code>&gt;&gt;&gt; f = 0.3223322
&gt;&gt;&gt; round(f, 2)
0.32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not as nice, but I'm always a fan of:</p>
<pre><code>f=float(int(100*f))/100
</code></pre>
<p>Far from the best way to do it, but it's one I use often.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd go with <code>round()</code> but if you don't like its behavior you can always write your own <code>round()</code> so, for the sake of completness:</p>
<pre><code>def custom_round(number, ndigits=2):
    return int(number * 10 ** ndigits) / 10.0 ** ndigits if ndigits else int(number)
</code></pre>
<p>Keep in mind that this round, unlike the builtin <code>round()</code> rounds down, not up.</p>
</div>
<span class="comment-copy">Note that <code>float('%.2f' % f)</code> has exactly the same issue as <code>round()</code>. That's because, as the documentation says, it's a limitation of the way floating points work on computers. I wouldn't worry about it in most situations. In case it does matter, I think it's better to use the <code>decimal</code> module, or the <code>fractions</code> module, or some arbitary precision library, depending on the exact use case.</span>
<span class="comment-copy">What are you trying to round for?</span>
