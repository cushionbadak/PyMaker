<div class="post-text" itemprop="text">
<p>I would like to initialise a global variable, in this case a <code>dict</code> called <code>DOC</code>, after passing a number of command line arguments and using the <code>click</code> library.</p>
<p>I have tried the following:</p>
<pre><code>#!/usr/bin/python3

import os
import sys
import yaml
import logging
import click

DOC = {}


@click.group()
def cli():
    pass

@click.command()
@click.option("--logger-file", required=True, default='{}/blabla/cfg/logger.{}.yml'.format(os.environ['HOME'],os.path.basename(__file__)), show_default=True, help="YAML logging configuration file")
def cli_logger_file(logger_file):
    if os.path.exists(logger_file):
        try:
            with open(logger_file, "rt") as f:
                DOC = yaml.safe_load(f.read())
                print( "logger" )
        except Exception as e:
            print( str(e) )
            sys.exit()
    else:
        sys.exit()


if __name__ == '__main__':
    cli_logger_file()
    print( "hi!" )
    print( DOC )
</code></pre>
<p>But when I run it, the output is:</p>
<pre><code>$ python3 etc.py --logger-file=/home/blabla/cfg/logger.src.app.component.yml
logger
{}
</code></pre>
<p>Could you please help me understand:</p>
<ol>
<li>Why I do not see <code>hi!</code> being printed?</li>
<li>Why if I replace <code>@click.command()</code> with <code>@cli.command()</code> it does not recognise the command-line option <code>--logger-file</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>A couple of misunderstandings about how click works.</p>
<p><strong>Why I do not see hi! being printed?</strong></p>
<p>Click is a framework for writing cli programs.  After the framework calls your handlers, it does not return...</p>
<p><strong>What is @click.group()?</strong></p>
<p>This question:</p>
<blockquote>
<p>Why if I replace @click.command() with @cli.command() it does not recognize the command-line option --logger-file ?</p>
</blockquote>
<p>is related to what <code>@click.group()</code> does.  A group is a special processor intended to implement sub commands.  So in your case, using a group click will parse any <code>--flags</code> <em>before</em> the subcommand.  But you don't have any subcommands so the <code>--flags</code> will be consumed by the group.  Just remove the group as you don't need it.</p>
<p><strong>Code:</strong></p>
<pre><code>@click.command()
@click.option("--logger-file",
              default=os.path.join(os.path.expanduser("~"),
                                   'blabla/cfg/logger.{}.yml'.format(
                                       os.path.basename(__file__))),
              show_default=True,
              help="YAML logging configuration file")

def cli(logger_file):
    if os.path.exists(logger_file):
        try:
            with open(logger_file, "rt") as f:
                global DOC
                DOC = yaml.safe_load(f.read())
        except Exception as e:
            click.echo(str(e))
            sys.exit()
    click.echo('DOC: %s' % DOC)

if __name__ == '__main__':
    cli()
</code></pre>
<p><strong>Notes:</strong></p>
<ol>
<li>You had set the <code>--loggerfile</code> to required but also specifying a default.</li>
<li>I used <code>os.path.expanduser()</code> instead of directly using an environment variable.</li>
<li><p>In setting the variable DOC, you need to tell python it is a global.</p>
<p>But, why a global?  After you understand the answer to the first question at the top of this post, you will realize that any functionality that this program implements will need to be called from the the same function that you are parsing the <code>yaml</code> in.  So, you likely should just pass it as a variable....</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">Assigning to a global variable from a function requires a <code>global</code> declaration.</a></p>
<p>Group commands are invoked by name, so when you use <code>@cli.command</code> you need to write:</p>
<p><code>$ python3 etc.py cli_logger_file --logger-file=foo.yml</code></p>
</div>
