<div class="post-text" itemprop="text">
<p>I have this json:</p>
<pre><code>json = {
    "state": {
        "reported": {
            "figure": {"x":10, "y":12, "z":12},
            "gif": {"x":10,"y":12, "z":12}
        }
    }
}
</code></pre>
<p>and this list of strings:</p>
<pre><code>lista = ["json['state']['reported']['figure']['x']",
         "json['state']['reported']['figure']['y']",
         "json['state']['reported']['gif']['z']"]
</code></pre>
<p>I would like to know if there is a way to get the result of the json using this list?</p>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out in another answer, you <em>can</em> use <code>eval</code> for this.  There are even tricks to make it a little more difficult for hackers to take control of your system.  This is by far the <em>easiest</em> route, however, there isn't a clear way to make this actually safe.  Any of those tricks that you play will only give you a false sense of security.  Therefore DO NOT use it if you do not trust the source of <code>lista</code> completely.  Bad things will happen.</p>
<p>The good news is that if you're willing to write (or copy/paste) a little more code, <strong>we can use python's AST to do this safely</strong>.  The trick will be to parse the string into an AST.  We'll then create a class that can walk the AST and take appropriate (and safe) actions when certain types of nodes are found.  In your example, there are 4 types of nodes that we need to deal with:</p>
<ul>
<li><code>Str</code>: Represents a string literal.</li>
<li><code>Name</code>: Represents a name lookup.  e.g. <code>json</code></li>
<li><code>Subscript</code>: Represents a <code>__getitem__</code> call.</li>
<li><code>Index</code>: The object that will get passed to <code>__getitem__</code>.  In general this could be a slice too -- but that isn't in the inputs that you've shown, so we'll not support it for now.</li>
</ul>
<p>Other types of nodes that you might need (depending on the inputs) are <code>Num</code>, and <code>Slice</code>.  It should be straight forward to implement them once you've grokked the <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="nofollow noreferrer">ast reference</a> (which can be somewhat obscure if you haven't looked at it before).</p>
<p>Now writing our class starts to look pretty simple:</p>
<pre><code>class Evaluator(ast.NodeVisitor):
    def __init__(self, globals):
        self._globals = globals

    def visit_Str(self, n):
        return n.s

    def visit_Name(self, n):
        return self._globals[n.id]

    def visit_Subscript(self, n):
        item = self.visit(n.value)
        slce = self.visit(n.slice)
        return item[slce]

    def visit_Index(self, n):
        return self.visit(n.value)

    def visit_Expr(self, n):
        return self.visit(n.value)
</code></pre>
<p>In action, it looks like:</p>
<pre><code>e = Evaluator({'json': json})
print([e.visit(ast.parse(s).body[0]) for s in lista])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's eval function. That being said, this is a really bad idea because eval is a dangerous function. Please check this link for more info on the eval function: <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html</a></p>
<pre><code>json = {
    "state": {
        "reported": {
            "figure": {"x": 10, "y": 12, "z": 12},
            "gif": {"x": 10, "y": 12, "z": 12}
        }}}

lista = [
    "json['state']['reported']['figure']['x']",
    "json['state']['reported']['figure']['y']",
    "json['state']['reported']['gif']['z']"
]

values = [eval(x) for x in lista]
</code></pre>
</div>
<span class="comment-copy">You may fetch out the dict keys in your list using regex and then recursively get the value from your json object. But ideally you should be changing the logic to form that strings in your list and instead create the list of keys, if possible</span>
<span class="comment-copy">Here is an unsafe, yet effective, way to do it: <code>result = [eval(item) for item in lista]</code>.</span>
<span class="comment-copy">Not that unsafe for hard-coded data</span>
<span class="comment-copy">Please don't use <code>eval</code> for this (or for anything for that matter). There are modules like <code>jsonpath</code> designed for this purpose.</span>
<span class="comment-copy">@zwer i don't understand why everyone is against eval. Sure <code>eval(input())</code> is begging for code inj, but what's wrong with this <code>x = eval('1')</code> ?</span>
<span class="comment-copy">can you tell how to use this sscript if i have for example:  json1=json.dumps(json)   ???????</span>
<span class="comment-copy">@Adler: Your follow-on question makes no sense since you are trying to use <code>json</code> to represent both the <code>json</code> module <i>and</i> the dictionary variable in your question. You could use <code>import json as json_module</code> to avoid that, which would allow you to write <code>json1 = json_module.dumps(json)</code>, <code>e = Evaluator({'json': json})</code>, then <code>print([e.visit(ast.parse(s).body[0]) for s in lista])</code>.</span>
<span class="comment-copy">that was an interesting read, thanks for sharing @spooky</span>
