<div class="post-text" itemprop="text">
<p>Try to embed python3.6 in C++ on Win10 64bit system.
Python is installed by <code>python-3.6.1-amd64.exe</code>.
The CMakeList.txt is showing below</p>
<pre><code>cmake_minimum_required(VERSION 3.8)
project(EmbedPython)

set(CMAKE_CXX_STANDARD 11)

set(SOURCE_FILES main.cpp)
find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})
add_executable(EmbedPython ${SOURCE_FILES} ${PYTHON_INCLUDE_DIRS})
target_link_libraries(EmbedPython ${PYTHON_LIBRARIES})
</code></pre>
<p>And CMake found the Python package.</p>
<pre><code>PYTHON_INCLUDE_DIR C:/Program Files (x86)/Python36/include
PYTHON_LIBRARY C:/Program Files (x86)/Python36/libs/python36.lib
</code></pre>
<p><a href="https://github.com/jdmillard/ecen631/blob/5942d8102dc4b26164a8506db0fc2d4fedb13df0/assignment8/CMakeLists.txt" rel="nofollow noreferrer">Find a comment on github</a> it's talking about the API problem.</p>
<blockquote>
<pre><code># used to embed python script
find_package(PythonLibs 2.7 REQUIRED) # this has to be 2.7 because the 3.0 API requires argv to be wchar_t** rather than the default char**
include_directories(${PYTHON_INCLUDE_DIRS})
target_link_libraries( assignment ${PYTHON_LIBRARIES})
</code></pre>
</blockquote>
<p>The errors below is what I'm facing.</p>
<pre><code>[ 50%] Building CXX object CMakeFiles/EmbedPython.dir/main.cpp.obj
[100%] Linking CXX executable EmbedPython.exe
CMakeFiles\EmbedPython.dir/objects.a(main.cpp.obj): In function `main':
D:/Projects/EmbedPython/main.cpp:16: undefined reference to `_imp__Py_Initialize'
D:/Projects/EmbedPython/main.cpp:17: undefined reference to `_imp__PyUnicode_DecodeFSDefault'
D:/Projects/EmbedPython/main.cpp:20: undefined reference to `_imp__PyImport_Import'
D:/Projects/EmbedPython/main.cpp:24: undefined reference to `_imp__PyObject_GetAttrString'
D:/Projects/EmbedPython/main.cpp:27: undefined reference to `_imp__PyCallable_Check'
D:/Projects/EmbedPython/main.cpp:28: undefined reference to `_imp__PyTuple_New'
D:/Projects/EmbedPython/main.cpp:30: undefined reference to `_imp__PyLong_FromLong'
D:/Projects/EmbedPython/main.cpp:38: undefined reference to `_imp__PyTuple_SetItem'
D:/Projects/EmbedPython/main.cpp:40: undefined reference to `_imp__PyObject_CallObject'
D:/Projects/EmbedPython/main.cpp:43: undefined reference to `_imp__PyLong_AsLong'
D:/Projects/EmbedPython/main.cpp:49: undefined reference to `_imp__PyErr_Print'
D:/Projects/EmbedPython/main.cpp:55: undefined reference to `_imp__PyErr_Occurred'
D:/Projects/EmbedPython/main.cpp:56: undefined reference to `_imp__PyErr_Print'
D:/Projects/EmbedPython/main.cpp:63: undefined reference to `_imp__PyErr_Print'
D:/Projects/EmbedPython/main.cpp:67: undefined reference to `_imp__Py_FinalizeEx'
collect2.exe: error: ld returned 1 exit status
mingw32-make.exe[3]: *** [EmbedPython.exe] Error 1
mingw32-make.exe[2]: *** [CMakeFiles/EmbedPython.dir/all] Error 2
mingw32-make.exe[1]: *** [CMakeFiles/EmbedPython.dir/rule] Error 2
mingw32-make.exe: *** [EmbedPython] Error 2
CMakeFiles\EmbedPython.dir\build.make:96: recipe for target 'EmbedPython.exe' failed
CMakeFiles\Makefile2:66: recipe for target 'CMakeFiles/EmbedPython.dir/all' failed
CMakeFiles\Makefile2:78: recipe for target 'CMakeFiles/EmbedPython.dir/rule' failed
Makefile:117: recipe for target 'EmbedPython' failed
</code></pre>
<p>Not sure what to do to make the project run.Any help would be appreciated.</p>
<p><strong>EDIT:</strong> 
the result from <code>make VERBOSE=1</code></p>
<pre><code>D:\Projects\EmbedPython\cmake-build-debug&gt;make VERBOSE=1
"C:\Program Files\JetBrains\CLion 172.2273.4\bin\cmake\bin\cmake.exe" -HD:\Projects\EmbedPython -BD:\Projects\EmbedPython\cmake-build-debug --check-build-system CMakeFiles\Makefile.cmake 0
"C:\Program Files\JetBrains\CLion 172.2273.4\bin\cmake\bin\cmake.exe" -E cmake_progress_start D:\Projects\EmbedPython\cmake-build-debug\CMakeFiles D:\Projects\EmbedPython\cmake-build-debug\CMakeFiles\progress.marks
make -f CMakeFiles\Makefile2 all
make[1]: Entering directory 'D:/Projects/EmbedPython/cmake-build-debug'
make -f CMakeFiles\EmbedPython.dir\build.make CMakeFiles/EmbedPython.dir/depend
make[2]: Entering directory 'D:/Projects/EmbedPython/cmake-build-debug'
"C:\Program Files\JetBrains\CLion 172.2273.4\bin\cmake\bin\cmake.exe" -E cmake_depends "MinGW Makefiles" D:\Projects\EmbedPython D:\Projects\EmbedPython D:\Projects\EmbedPython\cmake-build-debug D:\Projects\EmbedPython\cmake-build-debug D:\Projects\EmbedPython\cmake-build-debug\CMakeFiles\EmbedPython.dir\DependInfo.cmake --color=
make[2]: Leaving directory 'D:/Projects/EmbedPython/cmake-build-debug'
make -f CMakeFiles\EmbedPython.dir\build.make CMakeFiles/EmbedPython.dir/build
make[2]: Entering directory 'D:/Projects/EmbedPython/cmake-build-debug'
[ 50%] Linking CXX executable EmbedPython.exe
"C:\Program Files\JetBrains\CLion 172.2273.4\bin\cmake\bin\cmake.exe" -E cmake_link_script CMakeFiles\EmbedPython.dir\link.txt --verbose=1
"C:\Program Files\JetBrains\CLion 172.2273.4\bin\cmake\bin\cmake.exe" -E remove -f CMakeFiles\EmbedPython.dir/objects.a
C:\PROGRA~2\MINGW-~1\I686-6~1.0-P\mingw32\bin\ar.exe cr CMakeFiles\EmbedPython.dir/objects.a @CMakeFiles\EmbedPython.dir\objects1.rsp
C:\PROGRA~2\MINGW-~1\I686-6~1.0-P\mingw32\bin\G__~1.EXE -g   -Wl,--whole-archive CMakeFiles\EmbedPython.dir/objects.a -Wl,--no-whole-archive  -o EmbedPython.exe -Wl,--out-implib,libEmbedPython.dll.a -Wl,--major-image-version,0,--minor-image-version,0 @CMakeFiles\EmbedPython.dir\linklibs.rsp
CMakeFiles\EmbedPython.dir/objects.a(main.cpp.obj): In function `main':
D:/Projects/EmbedPython/main.cpp:16: undefined reference to `_imp__Py_Initialize'
D:/Projects/EmbedPython/main.cpp:17: undefined reference to `_imp__PyUnicode_DecodeFSDefault'
D:/Projects/EmbedPython/main.cpp:20: undefined reference to `_imp__PyImport_Import'
D:/Projects/EmbedPython/main.cpp:24: undefined reference to `_imp__PyObject_GetAttrString'
D:/Projects/EmbedPython/main.cpp:27: undefined reference to `_imp__PyCallable_Check'
D:/Projects/EmbedPython/main.cpp:28: undefined reference to `_imp__PyTuple_New'
D:/Projects/EmbedPython/main.cpp:30: undefined reference to `_imp__PyLong_FromLong'
D:/Projects/EmbedPython/main.cpp:38: undefined reference to `_imp__PyTuple_SetItem'
D:/Projects/EmbedPython/main.cpp:40: undefined reference to `_imp__PyObject_CallObject'
D:/Projects/EmbedPython/main.cpp:43: undefined reference to `_imp__PyLong_AsLong'
D:/Projects/EmbedPython/main.cpp:49: undefined reference to `_imp__PyErr_Print'
D:/Projects/EmbedPython/main.cpp:55: undefined reference to `_imp__PyErr_Occurred'
D:/Projects/EmbedPython/main.cpp:56: undefined reference to `_imp__PyErr_Print'
D:/Projects/EmbedPython/main.cpp:63: undefined reference to `_imp__PyErr_Print'
D:/Projects/EmbedPython/main.cpp:67: undefined reference to `_imp__Py_FinalizeEx'
collect2.exe: error: ld returned 1 exit status
CMakeFiles\EmbedPython.dir\build.make:97: recipe for target 'EmbedPython.exe' failed
make[2]: *** [EmbedPython.exe] Error 1
make[2]: Leaving directory 'D:/Projects/EmbedPython/cmake-build-debug'
CMakeFiles\Makefile2:66: recipe for target 'CMakeFiles/EmbedPython.dir/all' failed
make[1]: *** [CMakeFiles/EmbedPython.dir/all] Error 2
make[1]: Leaving directory 'D:/Projects/EmbedPython/cmake-build-debug'
Makefile:82: recipe for target 'all' failed
make: *** [all] Error 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the exactly same problem, just with Python 3.7 while trying to build the <a href="https://docs.python.org/3/extending/embedding.html#very-high-level-embedding" rel="nofollow noreferrer">example</a> from the Python manual.</p>
<p>My system is a 64-bit Windows, the installed Python is a 64-bit 3.7 (from Anaconda3), and the compiler is a 32-bit MinGW 5.3.0 (from Qt 5.11).</p>
<p>The simplest solution that worked for me is the following:</p>
<ul>
<li>Download <a href="https://www.python.org/ftp/python/3.7.1/python-3.7.1-embed-win32.zip" rel="nofollow noreferrer">Windows x86 embeddable zip file</a> from <a href="https://www.python.org/downloads/release/python-371/" rel="nofollow noreferrer">this</a> page.</li>
<li>Put the content of that archive to a folder inside the project you're building.</li>
<li>Do <strong>not</strong> install anything from that archive and do <strong>not</strong> put it on the system PATH.</li>
<li>Add the above folder to the gcc library search path, using: <code>-L"path/to/folder/"</code></li>
<li>Add the python library to the linker, using <code>-l"python37"</code> ( replace <code>37</code> with whatever version you download)</li>
<li>As noted <a href="https://www.bugs.python.org/msg322316" rel="nofollow noreferrer">here</a> (this was a hard one to find!), add a definition, using <code>-DPy_BUILD_CORE_BUILTIN=1</code> (It is also possible to write <code>#define DPy_BUILD_CORE_BUILTIN 1</code> just before <code>#include</code>-ing the Python header, though I would not recommend it)</li>
<li>Provide the path to the Python headers, using <code>-I"path/to/include"</code>. I used the one from Anaconda, e.g. <code>-I"c:/Users/user/Anaconda3/include/"</code>. Any installed header will do, just make sure its from the same version (headers from an <strong>older</strong> version might also be used, but this may cause a rupture in the space-time continuum)</li>
<li>Make sure that <code>#include &lt;Python.h&gt;</code> is before any other include, as stated in the manual.</li>
</ul>
<p>As a side note, the MinGW linker (ld) is perfectly content, for many years now, if you just give it the "dll" file. No "lib", nor "a", is needed if you don't have one and only perform dynamic linking. This is why I just told the linker to use <code>python37</code>.</p>
<p>It it actually <a href="http://www.mingw.org/wiki/specify_the_libraries_for_the_linker_to_use" rel="nofollow noreferrer">smart enough</a> to look for files like <code>python37.lib</code>, <code>python37.dll</code> &amp; <code>libpython37.a</code>.</p>
<p>Also note that the "embedable zip" is just the bare minimum needed for, well, embedding Python.</p>
<p>And as a last comment, contrary to what is stated <a href="https://stackoverflow.com/questions/6731100/link-to-python-with-mingw">here</a>, there is no problem whatsoever linking from GCC with a library compiled using MSVS (and vice versa), as long as the library uses the plain <strong>C</strong> interface, since that interface is pretty much the only thing that is compatible across different compilers for any given platform.</p>
<p>This is pretty much the exact reason why Python is using the <strong>C</strong> interface (and nothing else, not even <strong>C++</strong>) for extending &amp; embedding - to allow code written in any language, using any tool set, to interface with Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem.</p>
<p>probably the problem is because of using 32 bit MinGW and 64 bit Python. you should install <em>32 bit version of python</em> </p>
<p>Hope it will be useful to you :-)</p>
</div>
<span class="comment-copy">Please show your CMakeLists.txt and the output from <code>make VERBOSE=1</code>. Also please don't post images of text.</span>
<span class="comment-copy">@n.m. I added the output from make <code>VERBOSE=1</code> and remove the image from CMake GUI.</span>
<span class="comment-copy">You need to use <code>target_link_libraries</code>. <code>add_executable</code> lets you specify sources, not libraries.</span>
<span class="comment-copy">You build the project with <b>MinGW</b>, but use python <i>imported</i> library <code>.lib</code>, which is for <b>MSVC</b>. Probably, you need to convert it for MinGW, like in that question: <a href="https://stackoverflow.com/questions/6731100/link-to-python-with-mingw" title="link to python with mingw">stackoverflow.com/questions/6731100/link-to-python-with-mingw</a></span>
<span class="comment-copy">Is it possible to display <code>${PYTHON_LIBRARIES}</code> content? And to extend @Tsyvarev, suggestion, by default <i>Python</i> is compiled with <i>VStudio</i>. So, unless you built yours from sources using <i>MinGW</i>, the easiest way would be to build your extension with <i>VStudio</i> (assuming there are no restrictions related to using it) as well, and more: use the same version as listed on <a href="https://wiki.python.org/moin/WindowsCompilers" rel="nofollow noreferrer">[Python]: WindowsCompilers</a>.</span>
