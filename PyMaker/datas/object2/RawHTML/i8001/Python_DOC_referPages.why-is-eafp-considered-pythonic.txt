<div class="post-text" itemprop="text">
<p>Considering below example,</p>
<pre><code>myList = [1, 2, 3, 4, 5, 6]
</code></pre>
<p>To print last index,</p>
<pre><code># Non - pythonic
if len(myList) &gt;= 6:
   print(myList[5])
else:
   print('Index does not exist')

# Pythonic
try:
   print(myList[5])
except:
   print('Index does not exist')
</code></pre>
<p>What is the idea behind the preference to ask for forgiveness over taking permission?</p>
</div>
<div class="post-text" itemprop="text">
<p>I can't speak to whether something is Pythonic but I can speak to why it leads to more concise code.  In general you're doing a lot of things, not just looking at one index.  So consider what happens when I'm looking at several attributes in a dictionary:</p>
<pre><code>try:
    obj.a = data['a']
    obj.b = data['b']
    obj.c = data['c']
except KeyError: 
    #Oops our data didn't have all we needed.
</code></pre>
<p>Each of those assignments would have needed to be an if statement without  using the exception handling.  That is, the more things you can do in an try block, the less percentage of your overall code will need to deal with errors.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-eafp</a></span>
<span class="comment-copy">In general there are a lot of ways you can get the LBYL method (look before you leap) wrong, and the technique can even result in race conditions. <a href="http://stackoverflow.com/questions/9748678/which-is-the-best-way-to-check-for-the-existence-of-an-attribute/9748715#9748715" title="which is the best way to check for the existence of an attribute">stackoverflow.com/questions/9748678/â€¦</a></span>
<span class="comment-copy">You also need to take into account that some cases you can't know the pre-condition for success of what you're trying (and that pre-condition may even  become invalid between the test and attempt). So using exceptions is considered more Pythonic (not bare excepts though) so something that has a chance of handling it can see it and possibly deal with it.</span>
<span class="comment-copy">What is the advantage of scaling up exceptions?</span>
<span class="comment-copy">@overexchange Corrected answer.  It's not so much that exceptions scale up is that your code is more efficient when you can share the same error handler across a lot of tasks.</span>
<span class="comment-copy">Notice that this is fine as long as you fail <i>before actually mutating state</i> (otherwise you have to do your bookkeeping anyway to revert) and if you are sure that the exception you are trapping only comes from the cases you are thinking about.</span>
<span class="comment-copy">@MatteoItalia which in this specific case you could do with <code>obj.a, obj.b, obj.c = itemgetter(*'abc')(data)</code> as it'd let the KeyError handle itself nicely, but could still propagate exceptions depending on the assignment but in more complicated scenarios... yeah... you'd need to do other things...</span>
<span class="comment-copy">O, yeah, but talking about how broad a try block can be would be way too broad for this question and would be well into writing a tutorial territory.</span>
