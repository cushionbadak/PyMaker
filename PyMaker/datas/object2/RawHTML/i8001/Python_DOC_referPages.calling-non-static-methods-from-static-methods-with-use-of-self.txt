<div class="post-text" itemprop="text">
<p>I am a beginner in Python, so please be... kind?</p>
<p>Anyway, I need use a static method to call another method, which requires the use of "self" (and thus, a normal method I believe). I am working with <a href="https://github.com/LonamiWebs/Telethon" rel="nofollow noreferrer">Telethon</a>, a Python implementation of Telegram. I have tried other questions on SO, but I just can't seem to find a solution to my problem.</p>
<p>An overview of the program (please correct me if I'm wrong):</p>
<p>1) interactive_telegram_client is a child class of telegram_client, and it creates an instance.</p>
<pre><code>#interactive_telegram_client.py
class InteractiveTelegramClient(TelegramClient):
    super().__init__(session_user_id, api_id, api_hash, proxy)
</code></pre>
<p>2) When the InteractiveTelegramClient runs, it adds an update_handler <code>self.add_update_handler(self.update_handler)</code> to constantly check for messages received/sent, and prints it to screen </p>
<pre><code>#telegram_client.py
def add_update_handler(self, handler):
    """Adds an update handler (a function which takes a TLObject,
      an update, as its parameter) and listens for updates"""
    if not self.sender:
        raise RuntimeError(
            "You should connect at least once to add update handlers.")

    self.sender.add_update_handler(handler)

#interactive_telegram_client.py
@staticmethod
def update_handler(update_object):
    try:
        if type(update_object) is UpdateShortMessage:
            if update_object.out:
                print('You sent {} to user #{}'.format(update_object.message,
                                                       update_object.user_id))
            else:
                print('[User #{} sent {}]'.format(update_object.user_id,
                                                  update_object.message))
</code></pre>
<p>Now, my aim here is to send back an auto-reply message upon receiving a message. Thus, I <em>think</em> that adding a call to method <code>InteractiveTelegramClient.send_ack(update_object)</code> in the <code>update_handler</code> method would serve my needs.</p>
<pre><code>#interactive_telegram_client.py
def send_ack(self, update_object):
    entity = update_object.user_id
    message = update_object.message
    msg, entities = parse_message_entities(message)
    msg_id = utils.generate_random_long()

    self.invoke(SendMessageRequest(peer=get_input_peer(entity),
        message=msg,random_id=msg_id,entities=entities,no_webpage=False))
</code></pre>
<p>However, as you can see, I require the <code>self</code> to invoke this function (based on the <a href="https://github.com/LonamiWebs/Telethon#id12" rel="nofollow noreferrer">readme</a>, where I assume <code>client</code> to refer to the same thing as <code>self</code>). Since the method <code>update_handler</code> is a static one, <code>self</code> is not passed through, and as such I cannot invoke the call as such.</p>
<p>My possible strategies which have failed include:</p>
<p>1) Instantiating a new client for the auto-reply
- Creating a new client/conversation for each reply...</p>
<p>2) Making all the methods non-static
- Involves a tremendous amount of work since other methods modified as well</p>
<p>3) Observer pattern (sounds like a good idea, I tried, but due to a lack of skills, not succeeded)</p>
<p>I was wondering if there's any other way to tackle this problem? Or perhaps it's actually easy, just that I have some misconception somewhere?</p>
<p>Forgot to mention that due to some restrictions on my project, I can only use Telethon, as opposed to looking at other alternatives. Adopting another library (like an existing auto-reply one) is allowed, though I did not really look into that since merging that and Telethon may be too difficult for me...</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>based on the readme, where I assume client to refer to the same thing as self</p>
</blockquote>
<p>Correct, since the <code>InteractiveTelegramClient</code> subclasses the <code>TelegramClient</code> and hence, <code>self</code> is an instance of the extended client.</p>
<blockquote>
<p>Instantiating a new client for the auto-reply - Creating a new client/conversation for each reply</p>
</blockquote>
<p>This would require you to create another authorization <em>and</em> send another code request to login, because you can't work with the same <code>*.session</code> at the same time.</p>
<blockquote>
<p>Making all the methods non-static - Involves a tremendous amount of work since other methods modified as well</p>
</blockquote>
<p>It doesn't require such amount of work. Consider the following example:</p>
<pre class="lang-python prettyprint-override"><code>class Example:
    def __init__(self, a):
        self.a = a

    def do_something(self):
        Example.other_method()

    @staticmethod
    def other_method():
        print('hello, world!')
</code></pre>
<p>Is equivalent to:</p>
<pre class="lang-python prettyprint-override"><code>class Example:
    def __init__(self, a):
        self.a = a

    def do_something(self):
        self.other_method()

    @staticmethod
    def other_method():
        print('hello, world!')
</code></pre>
<p>It doesn't matter whether you use <code>self.</code> or the class name to refer to a static method from within the class. Since the <code>InteractiveClientExample</code> already uses <code>self.</code>, all you would have to do would be changing:</p>
<pre class="lang-python prettyprint-override"><code>@staticmethod
def update_handler(update_object):
</code></pre>
<p>for</p>
<pre class="lang-python prettyprint-override"><code>def update_handler(self, update_object):
</code></pre>
<p>For more on the <code>@staticmethod</code> decorator, you can <a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod" rel="nofollow noreferrer" title="Built-in Functions, staticmethod">refer to the docs</a>.</p>
</div>
<span class="comment-copy">If your <code>update_handler(..)</code> needs an instance (logically speaking) to work with, then it should probably not be a static method..</span>
<span class="comment-copy">I thought so too, but due to the fact that several other methods (from other classes etc) call upon this, it is quite difficult to change it to non-static, but I will take another look at this if it's a possible solution. :)</span>
<span class="comment-copy">Is this question still relative? I'd like to see the complete script in action.</span>
<span class="comment-copy">@Mand what do you mean exactly? Perhaps you have a different question?</span>
