<div class="post-text" itemprop="text">
<p>I have list of tuples called lt.</p>
<pre><code>lt = [ (1,2) , (1,2) , (2,3) , (3,4) , (5,6) , (7,8) , (7,8) ] 
</code></pre>
<p>I want to remove all consecutive duplicate tuple from the list. The result should look like this.</p>
<pre><code>mainList = [(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="https://docs.python.org/3/library/itertools.html#recipes" rel="noreferrer"><code>pairwise()</code> function from the <code>itertools</code> reception section</a>:</p>
<pre><code>from itertools import tee

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

mainList = [curr for curr, next in pairwise(lt) if curr != next]
</code></pre>
<p>This gives you a new list with all consecutive tuples removed. You could also use the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby()</code> function</a> with the default identity key:</p>
<pre><code>from itertools import groupby

mainList = [k for k, g in groupby(lt)]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import tee, groupby
&gt;&gt;&gt; lt = [ (1,2) , (1,2) , (2,3) , (3,4) , (5,6) , (7,8) , (7,8) ]
&gt;&gt;&gt; def pairwise(iterable):
...     "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
...     a, b = tee(iterable)
...     next(b, None)
...     return zip(a, b)
...
&gt;&gt;&gt; [curr for curr, next in pairwise(lt) if curr != next]
[(1, 2), (2, 3), (3, 4), (5, 6)]
&gt;&gt;&gt; [k for k, g in groupby(lt)]
[(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lt = [ (1,2) , (1,2) , (2,3) , (3,4) , (5,6) , (7,8) , (7,8) ] 

mainList = []

for t in lt:
  if len(mainList) == 0:
    mainList.append(t)
  else:
    if mainList[-1] != t:
      mainList.append(t)

print(mainList) 
</code></pre>
<p><strong>RESULT</strong></p>
<pre><code>[(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about an intricate list comprehension?</p>
<pre><code>[v for i, v in enumerate(lt) if i == o or v != lt[i-1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try to make a new list, and add the elements to that list. If an element is already in the new list, don't add it.</p>
<pre><code>lt = [ (1,2) , (1,2) , (2,3) , (3,4) , (5,6) , (7,8) , (7,8) ] 
newlt = [lt[0]]
for item in range(len(lt)):
    if item == 0:
        continue
    elif lt[item] == lt[item - 1]:
        continue
    else:
        newlt.append(lt[item])
print(newlt)

[(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]
</code></pre>
<p>Edit: New solution, this should work. It's clearly very basic.</p>
</div>
<span class="comment-copy">Good attempt, but your code will produce inaccurate result. Try your code with this list. lt = [ (1,2) , (1,2) , (2,3) , (3,4) , (5,6) , (7,8) , (7,8) ,(1,2)] . index0 and 1 are consecutive duplicate but the last element is not. Your code will remove the last one too.</span>
