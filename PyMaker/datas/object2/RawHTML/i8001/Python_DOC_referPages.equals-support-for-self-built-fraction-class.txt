<div class="post-text" itemprop="text">
<pre><code>class Fraction:
    """Class for performing fraction arithmetic.
    Each Fraction has two attributes: a numerator, n and a deconominator, d.
    Both must be integer and the deonominator cannot be zero."""

    def __init__(self,n,d):
        """Performs error checking and standardises to ensure denominator is 
positive"""
        if type(n)!=int or type(d)!=int:
            raise TypeError("n and d must be integers")
        if d==0:
            raise ValueError("d must be positive")
        elif d&lt;0:
            self.n = -n
            self.d = -d
        else:
            self.n = n
            self.d = d

    def __str__(self):
        """Gives string representation of Fraction (so we can use print)"""
        return(str(self.n) + "/" + str(self.d))

    def __add__(self, otherFrac):
        """Produces new Fraction for the sum of two Fractions"""
        newN = self.n*otherFrac.d + self.d*otherFrac.n
        newD = self.d*otherFrac.d
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __sub__(self, otherFrac):
        """Produces new Fraction for the difference between two Fractions"""        
        newN = self.n*otherFrac.d - self.d*otherFrac.n
        newD = self.d*otherFrac.d
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __mul__(self, otherFrac):
        """Produces new Fraction for the product of two Fractions"""        
        newN = self.n*otherFrac.n
        newD = self.d*otherFrac.d
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __truediv__(self, otherFrac):
        """Produces new Fraction for the quotient of two Fractions"""        
        newN = self.n*otherFrac.d
        newD = self.d*otherFrac.n
        newFrac = Fraction(newN, newD)
        return(newFrac)
</code></pre>
<p>As code showed above, how can I print </p>
<pre><code>Fraction(1,3) == Fraction(2,6)
</code></pre>
<p>As example:</p>
<pre><code>Fraction(1,2) + Fraction(1,3)
Fraction(1,2) - Fraction(1,3)
Fraction(1,2) * Fraction(1,3)
Fraction(1,2) / Fraction(1,3)
</code></pre>
<p>They are all work for calculation every time. And when I try to print fraction(1,3) == fraction(2,6), it come out as <code>False</code>. How can I let it calculate as <code>True</code>?</p>
<p>How can I do it without using <code>import fraction</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def __eq__(self, other):
    return  self.n*other.d == self.d*other.n
</code></pre>
<p>As pointed out in the comments, there is no need to implement the <code>__ne__</code>.</p>
<p><strong>EDIT:</strong> As requested in the comments to this answer, here is a method for simplifying fractions.</p>
<p>The simplification of fraction implies dividing both numbers by the greatest common divisor. As posted in <a href="https://stackoverflow.com/questions/11175131/code-for-greatest-common-divisor-in-python">here</a> the code is rather simple</p>
<pre><code># return the simplified version of a fraction
def simplified(self):
    # calculate the greatest common divisor
    a = self.n
    b = self.d
    while b:
        a, b = b, a%b
    # a is the gcd
    return Fraction(self.n/a, self.d/a)
</code></pre>
<p>I hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer">data model</a> specifies <code>__eq__</code> as method that implements <code>==</code> checks.</p>
<p>A very simple implementation of <code>__eq__</code> would be:</p>
<pre><code>def __eq__(self, other):
    return self.n == other.n and self.d == other.d
</code></pre>
<p>It would work for <code>Fraction(1, 2) == Fraction(1, 2)</code> but it wouldn't work for <code>Fraction(1, 2) == Fraction(2, 4)</code>. </p>
<p>You would need modify the contents of the <code>__eq__</code> method so it allows even to compare multiples.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python to get custom behavior for the == operator you must provide an implementation for the method <code>__eq__</code>. If you don't override it the default behavior is to check if the objects are really the same object, which in this case they are not.</p>
</div>
<span class="comment-copy">You need to implement <code>__eq__</code> . This is the method that decides if two objects are equal.</span>
<span class="comment-copy">The last comment is incorrect. If there's no <code>__ne__</code> method it will negate the result of <code>__eq__</code>: "By default, <code>__ne__()</code> delegates to <code>__eq__()</code> and inverts the result unless it is <code>NotImplemented</code>." (<a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__eq__</a>)</span>
<span class="comment-copy">@ko-ko As an aside, you are reporting <code>("d must be positive")</code> where you actually mean <code>("d must be non-zero")</code></span>
<span class="comment-copy">Thank you @MSeifert ! I was not aware of that</span>
<span class="comment-copy">Not sure about the first comment, I guess that was directed at the questioner?</span>
<span class="comment-copy">Thanks for answer, for another question, how can I simple 30/18 into 5/3????</span>
