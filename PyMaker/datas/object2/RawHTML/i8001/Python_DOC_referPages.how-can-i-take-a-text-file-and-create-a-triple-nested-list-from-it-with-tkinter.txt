<div class="post-text" itemprop="text">
<p>I'm making a program that allows the user to log loot they receive from monsters in an MMO. I have the drop tables for each monster stored in text files. I've tried a few different formats but I still can't pin down exactly how to take that information into python and store it into a list of lists of lists. </p>
<p>The text file is formatted like this</p>
<pre><code>item 1*4,5,8*ns
item 2*3*s
item 3*90,34*ns
</code></pre>
<p>The item # is the name of the item, the numbers are different quantities that can be dropped, and the s/ns is whether the item is stackable or not stackable in game. </p>
<p>I want the entire drop table of the monster to be stored in a list called currentDropTable so that I can reference the names and quantities of the items to pull photos and log the quantities dropped and stuff. </p>
<p>The list for the above example should look like this</p>
<pre><code>[["item 1", ["4","5","8"], "ns"], ["item 2", ["2","3"], "s"], ["item 3", ["90","34"], "ns"]]
</code></pre>
<p>That way, I can reference currentDropTable[0][0] to get the name of an item, or if I want to log a drop of 4 of item 1, I can use currentDropTable[0][1][0]. </p>
<p>I hope this makes sense, I've tried the following and it almost works, but I don't know what to add or change to get the result I want. </p>
<pre><code>def convert_drop_table(list):
    global currentDropTable
    currentDropTable = []
    for i in list:
        item = i.split('*')
        currentDropTable.append(item)

dropTableFile = open("droptable.txt", "r").read().split('\n')
convert_drop_table(dropTableFile)

print(currentDropTable)
</code></pre>
<p>This prints everything properly except the quantities are still an entity without being a list, so it would look like</p>
<pre><code>[['item 1', '4,5,8', 'ns'], ['item 2', '2,3', 's']...etc]
</code></pre>
<p>I've tried nesting another for j in i, split(',') but then that breaks up everything, not just the list of quantities. </p>
<p>I hope I was clear, if I need to clarify anything let me know. This is the first time I've posted on here, usually I can just find another solution from the past but I haven't been able to find anyone who is trying to do or doing what I want to do. </p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to split only the second entity by <code>','</code> so you don't need another loop. Since you know that <code>item = i.split('*')</code> returns a list of 3 items, you can simply change your innermost for-loop as follows,</p>
<pre><code>for i in list:
        item = i.split('*')
        item[1] = item[1].split(',')
        currentDropTable.append(item)
</code></pre>
<p>Here you replace the second element of <code>item</code> with a list of the quantities.</p>
</div>
<div class="post-text" itemprop="text">
<p>You only need to split second element from that list.</p>
<pre><code>def convert_drop_table(list):
    global currentDropTable
    currentDropTable = []
    for i in list:
        item = i.split('*')
        item[1] = item[1].split(',')
        currentDropTable.append(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first thing I feel bound to say is that it's usually a good idea to avoid using <code>global</code> variables in any language. Errors involving them can be hard to track down. In fact you could simply omit that function <code>convert_drop_table</code> from your code and do what you need in-line. Then readers aren't obliged to look elsewhere to find out what it does.</p>
<p>And here's <em>yet another way</em> to parse those lines! :) Look for the asterisks then use their positions to select what you want.</p>
<pre><code>currentDropTable = []
with open('droptable.txt') as droptable:
    for line in droptable:
        line = line.strip()
        p = line.find('*')
        q = line.rfind('*')
        currentDropTable.append([line[0:p], line[1+p:q], line[1+q:]])

print (currentDropTable)
</code></pre>
</div>
<span class="comment-copy">I'd like to mention that a <code>dict</code> might be a more appropriate data structure then this list, or possibly using some <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> as part of the info. would be easier to understand <code>table["dragon"][0].count</code> etc. instead of all integer indices.</span>
<span class="comment-copy">Thank you so much! I can't believe it was that easy, but I just implemented it and it worked perfectly. You rock!</span>
<span class="comment-copy">Thank you so much, both of you! I marked Antimony's solution with the check mark thing since you both have the same answer and he answered first. You both still rock though and fixed a problem I've been racking my brain about since last night in 20 mins!</span>
<span class="comment-copy">Wow, it's crazy how there are always so many different approaches to the same problem that all work. Thank you for adding this one. As for global variables, I've found some people say to never use them and others say it's okay. I'm very new to coding, this is my first project in any language. I couldn't really find a way to make it work other than using global variables, but I'm sure that's just my inexperience talking. Say I have a variable called "killCount" that tracks total kills. How do I use it and have it be changed by multiple functions without it being global?</span>
<span class="comment-copy">Globals: (a) Never say never. (b) Consider the reputations of the people offering the advice (and I'm not referring to myself), and the arguments they offer to justify their advice. killCount: It really depends on the situation. One way would be to encapsulate those functions you mention as methods in an object along with killCount so that, at least, killCount would be known only inside the object.</span>
