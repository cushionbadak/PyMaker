<div class="post-text" itemprop="text">
<p>Hi I have the below from which I am trying to pull data from Outlook using code obtained on StackOverflow. </p>
<p>Using the first loop, I am trying to gather all attributes available to the object.</p>
<p>Whilst running it I notice the absence of Name which is later called in the 2nd loop, I assume this is due to inheritance. Please can you assist me in finding all attributes available to a class?</p>
<pre><code>import win32com.client,sys

o = win32com.client.gencache.EnsureDispatch("Outlook.Application")
ns = o.GetNamespace("MAPI")

adrLi = ns.AddressLists.Item("Global Address List")
contacts = adrLi.AddressEntries
numEntries = adrLi.AddressEntries.Count
print(type(contacts))
nameAliasDict = {}
attrs_ = dir(contacts)
for i in range(len(attrs_)):
    print((attrs_[i]))

for j in contacts:
    print(j.Name)

    sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python provides a handy little builtin called dir. I can use that on a class instance to get a list of all the attributes and methods of that class along with some inherited magic methods, such as <code>__delattr__,</code> <code>__dict__</code>, <code>__doc__</code>, <code>__format__</code>, etc. You can try this yourself by doing the following:</p>
<pre><code>x = dir(myClassInstance)
</code></pre>
<p>but what you want is:</p>
<pre><code>child.__class__.__bases__[0]().getAttributes()
</code></pre>
<p><code>__bases__</code> is a class attribute containing tuple of base classes for this class. so if your class has only one base class, this is the answer, but if class has more than one base class, just do same for all elements from that tuple.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a> and <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir</code></a> built-in functions.</p>
<p><code>super</code> refers to the instance of the mother class.</p>
<blockquote>
<p>Return a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class.</p>
</blockquote>
<p><code>dir</code> returns a list of the argument's attributes.</p>
<blockquote>
<p>With an argument, attempt to return a list of valid attributes for that object.</p>
</blockquote>
<pre><code>class Foo:
    def __init__(self):
        self.v = 10

class Bar(Foo):
    def __init__(self):
        super().__init__()
        print(dir(super()))

b = Bar()
</code></pre>
<p>Output:</p>
<pre><code>[(...), 'v']
</code></pre>
<p>The output list contains all the attributes that are defined in the mother class. It mostly contains attributes inherited from <code>object</code> (the attributes between double underscores).</p>
<hr/>
<p>If you do not extend the class whose you want to know the attributes, just use <code>dir</code> on an instance:</p>
<pre><code>&gt;&gt;&gt; dir(Foo())
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'v']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dir(contacts)</code> will show you all the attribute names of <code>contacts</code>.</p>
<blockquote>
<p>I notice the absence of Name which is later called in the 2nd loop</p>
</blockquote>
<p>You use <code>j.Name</code> not <code>contacts.Name</code> so there is no reason for <code>Name</code> to show up from the first loop.  If you want to know all the available attributes on <code>j</code> then do <code>dir(j)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given two classes, Parent and Child, if you want only the inherited attributes you could use the <a href="https://docs.python.org/3.6/library/inspect.html" rel="nofollow noreferrer">inspect</a> module coupled with <code>dir</code>:</p>
<pre><code>import inspect

class Parent():
    a = 1

    def myfunc(self):
        return 2

class Child(Parent):

    c = 4


mros = inspect.getmro(Child) #returns a tuple with the class in parameter at the first position, the rest should be the parent class(es)
child_attrs = dir(mros[0])
parent_attrs = dir(mros[1])

inherited_attr = [item for item in child_attrs if item in parent_attrs]

print(parent_attrs)
print(child_attrs)
print(inherited_attr)
</code></pre>
<p>And you can go like this up into the hierarchy however you wish</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/4241171/inspect-python-class-attributes" title="inspect python class attributes">stackoverflow.com/questions/4241171/â€¦</a> note object attributes might be different</span>
<span class="comment-copy">Not necessarily inheritance; the set of names for which attribute lookup succeeds is not necessarily explicitly defined. The only thing you can say for certain is that an attribute <code>x</code> is available for <code>foo</code> if <code>foo.x</code> does not raise an <code>AttributeError</code>.</span>
<span class="comment-copy">Where does the method <code>getAttributes()</code> come from?</span>
<span class="comment-copy"><code>dir(super())</code> doesn't do what you think it does. For example, if <code>v</code> was defined in <code>Bar</code> instead of <code>Foo</code>, it would still show up in the output. Also, <code>dir(super())</code> won't show inherited methods, or any of the object's methods; the methods shown by <code>dir(super())</code> are a completely unrelated list, coming from the class hierarchy of <code>super</code> itself.</span>
