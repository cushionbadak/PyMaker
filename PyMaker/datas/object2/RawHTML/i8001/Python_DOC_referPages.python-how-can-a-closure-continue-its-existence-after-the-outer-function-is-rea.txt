<div class="post-text" itemprop="text">
<p>I learning about closures in Python, and I get the concept well enough. While messing around in IDLE I thought about what would happen if I reassigned the enclosing function and then tried to call the enclosed function:</p>
<pre><code>&gt;&gt;&gt; def outer_function(hello):
        message = hello
        def inner_function():
            print(message)
        return inner_function

&gt;&gt;&gt; function = outer_function("hello")

&gt;&gt;&gt; function()
hello

&gt;&gt;&gt; def outer_function():
    print("hi")

&gt;&gt;&gt; function()
hello
</code></pre>
<p>I think that this is very interesting, but I realize that I do not have a good enough understanding about what happens to the closure in memory etc. Can someone explain how I can call <code>inner_function</code> after reassignment of <code>outer_function</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>In CPython (i.e. the reference implementation written in C that most people think of as just "Python"), lexical closures are implemented as 'flat closures' (see <a href="https://www.python.org/dev/peps/pep-0227/" rel="nofollow noreferrer">PEP 227</a>) that use cell object references instead of searching a linked list of frame objects (nested scopes) at runtime. This allows for quick lookup and improves garbage collection when returning a closure function.</p>
<p>The bytecode in <code>outer_function</code> is specialized to access a cell object in the stack frame instead of directly referencing the <code>message</code> object. The interpreter knows about this when setting up the stack frame for the call because the code object has this variable defined as a cell variable:</p>
<pre><code>&gt;&gt;&gt; outer_function.__code__.co_cellvars
('message',)
</code></pre>
<p>The bytecode in <code>inner_function</code> also dereferences a cell object for the value of <code>message</code>, but since it's not the source of the object, it's classified instead as a free variable:</p>
<pre><code>&gt;&gt;&gt; type(outer_function.__code__.co_consts[1])
&lt;class 'code'&gt;
&gt;&gt;&gt; outer_function.__code__.co_consts[1].co_name
'inner_function'
&gt;&gt;&gt; outer_function.__code__.co_consts[1].co_freevars
('message',)
</code></pre>
<p>Each <code>inner_function</code> function object that gets instantiated has a <code>__closure__</code> tuple that references the cell for the enclosed free variable. For example:</p>
<pre><code>&gt;&gt;&gt; function = outer_function('hello')
&gt;&gt;&gt; type(function.__closure__[0])
&lt;class 'cell'&gt;
&gt;&gt;&gt; function.__closure__[0].cell_contents
'hello'
</code></pre>
<p>The cells in this <code>__closure__</code> tuple are loaded in the stack frame when <code>function</code> is called. </p>
<p>This tuple of cells is what makes it flattened. No matter how deeply you nest the scopes, the <code>__closure__</code> will always propagate all of the required cells. For example:</p>
<pre><code>def a():
    x = 1
    def b():
        def c():
            def d():
                x
            print('d.__closure__[0].cell_contents:',
                  d.__closure__[0].cell_contents)
        print('c.__closure__[0].cell_contents:',
              c.__closure__[0].cell_contents)
        c()
    print('b.__closure__[0].cell_contents:',
          b.__closure__[0].cell_contents)
    b()

&gt;&gt;&gt; a()
b.__closure__[0].cell_contents: 1
c.__closure__[0].cell_contents: 1
d.__closure__[0].cell_contents: 1
</code></pre>
<p>Functions <code>b</code> and <code>c</code> don't directly reference <code>x</code>, but they have to propagate the cell for the inner function <code>d</code> to reference it.</p>
<hr/>
<p>The above inspection relies on CPython implementation details. In Python 3.3+ you can instead call <a href="https://docs.python.org/3/library/inspect.html#inspect.getclosurevars" rel="nofollow noreferrer"><code>inspect.getclosurevars</code></a> to inspect closure variables. For example:</p>
<pre><code>import inspect

def outer_function(hello):
    message = hello
    def inner_function():
        print(message)
    return inner_function

&gt;&gt;&gt; function = outer_function('hello')
&gt;&gt;&gt; inspect.getclosurevars(function)
ClosureVars(nonlocals={'message': 'hello'},
            globals={},
            builtins={'print': &lt;built-in function print&gt;},
            unbound=set())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This behavior is not limited to closures. What you just did is create a copy of the whole function object which refers to the older function and obviously it <strong>persists</strong> even if you create another function of the same name. </p>
<pre><code>def test(x): return 2*x
t = test
# redeclare the function 
def test(x): return 3*x
</code></pre>
<p>Tests </p>
<pre><code>&gt;&gt;&gt; test(2)
6
&gt;&gt;&gt; t(2)
4
&gt;&gt;&gt; t is test 
False 
</code></pre>
<p>Also, you can check the locations of both <code>t</code> and <code>test</code> which shows they are <strong>different objects</strong> - </p>
<pre><code>&gt;&gt;&gt; t 
&lt;function test at 0x10f9d6d90&gt;
&gt;&gt;&gt; test 
&lt;function test at 0x10f778f28&gt;
</code></pre>
<p>You can see they are both the same functions but at <strong>different locations</strong> and hence different objects. The same thing is happening in your case. </p>
</div>
<span class="comment-copy">CPython closures are implemented using cell objects. The code in <code>outer_function</code> is specialized to access a cell object on its stack instead of directly referencing the <code>message</code> object. The code in <code>inner_function</code> also accesses a cell object. The key detail is that each <code>inner_function</code> object that gets instantiated when <code>outer_function</code> is called gets created with a <code>__closure__</code> tuple that references the cell objects for enclosed variables. For example, check <code>function.__closure__[0].cell_contents</code>. The contents of this closure tuple gets loaded on its stack when <code>function</code> is called.</span>
<span class="comment-copy">@eryksun you should make that an answer!</span>
<span class="comment-copy">Thank you @eryksun, that was very interesting. I must admit I have not read anything about cell objects up to this point, so I will definitively do it now!</span>
<span class="comment-copy">@Kontorstol, it's an internal implementation detail of CPython. I'm just providing a low-level explanation to hopefully explain away anything that seems magical. But don't depend on the same mechanism to be necessarily present in other implementations such as PyPy, Jython, IronPython, etc.</span>
<span class="comment-copy">@Kontorstol You should unmark my answer as correct. It's not relevant. You can read mine and eryksun's discussion in the comments section.</span>
<span class="comment-copy">Hat off to you  @eryksun. I will need to do a bit if reading to wrap my head around your answer, but well done! It looks like my question was more interesting than I thought.</span>
<span class="comment-copy">Thank you. But what about the free variable <code>message</code>? Will it just be available as if it was created inside the <code>inner_function</code>?</span>
<span class="comment-copy">@Kontorstol It is bound to the function object. <b>Imagine</b> your <code>inner_function</code> (or any function) like a bag which has an ID (location in memory) and a name on it. This bag contains all the variables declared inside. When you created another function, another bag was created with the same name but a different ID and different contents.</span>
<span class="comment-copy">If I'm reading you right, it's really not right to say that <code>function</code> refers to the original <code>outer_function</code> object -- not in CPython. It's not implemented like that. <code>outer_function</code> is actually completely deallocated after you've replaced it with a new function, because nothing has a reference to the original <code>outer_function</code> object. <code>inner_function</code> was instantiated with a reference to a cell object that the enclosing <code>outer_function</code> call frame also referenced.</span>
<span class="comment-copy">Run the OP's original experiment, but with the addition of <code>ref = weakref.ref(outer_function)</code> before replacing it. Assign <code>function</code> like before and then replace <code>outer_function</code> with a new function. You will find that calling <code>ref()</code> now returns <code>None</code> because the original function object has been deallocated because its reference count dropped to 0. <code>function</code> does not reference it.</span>
<span class="comment-copy">@eryksun Damn! It was silly on part of me. Obviously, the ref count will drop to zero. It's <code>function = outer_function("hello")</code> not <code>function = outer_function</code>. I was thinking that your answer in the comments is irrelevant. Turns out mine is actually irrelevant haha.</span>
