<div class="post-text" itemprop="text">
<p>I have a class that maps a database object</p>
<pre><code>class MyObj:
    def __init__(self):
        ...SQL request with id as key...
        if len(rows) == 1:
            ...maps columns as my_obj attributes...
            self.exists = True
        else:
            self.exists = False
</code></pre>
<p>With such design, an object is created each time, and we check if it is present in database with .exists attribute.  </p>
<pre><code>my_obj = MyObj(id=15)
if my_obj.exists:
    ...do stuff...
</code></pre>
<p>It works.  </p>
<p>But I suspect there is a cleaner way to init, and we would just have to check like that:</p>
<pre><code> my_obj = MyObj(id=15)
 if my_obj:
     ...do stuff...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't do this in <code>__init__</code>, because that method is run <em>after</em> the new instance is created.</p>
<p>You <em>can</em> do it with <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="noreferrer"><code>object.__new__()</code></a> however, this is run to create the instance in the first place. Because it is normally supposed to return that new instance, you could also choose to return <em>something else</em> (like <code>None</code>).</p>
<p>You could use it like this:</p>
<pre><code>class MyObj:
    def __new__(cls, id):
        # ...SQL request with id as key...
        if not rows:
            # no rows, so no data. Return `None`.
            return None

        # create a new instance and set attributes on it
        instance = super().__new__(cls)  # empty instance
        instance.rows = ...
        return instance
</code></pre>
</div>
<span class="comment-copy">Isn't it possible to use __del__() method in the __init__() ? Usually I handle it with global class array (called <i>instances</i>) where I push <i>self</i> if my condition is true. After I just have to loop thru <i>MyClass.instances</i>.</span>
<span class="comment-copy">nope, I tried but doesn't work AttributeError: 'Test' object has no attribute '<b>del</b>'</span>
<span class="comment-copy">@martijn, why did you put the instance = super()... seems to work well with 'self' instead of 'cls' and self.rows / return self</span>
<span class="comment-copy">@comte: You can't use <code>__del__</code> because that is only called when the number of references to the instance drops to 0. You are assigning the object to <code>my_obj</code> so it is still references and won't be deleted. You can't delete the object by calling <code>__del__</code>; that hook is called <i>after</i> it is decided to delete the object; you use it to clean up before it is deleted entirely.</span>
<span class="comment-copy">@comte: <code>__new__</code> is called <i>with the class as first argument</i>, not with an instance. The method is supposed to <i>create</i> an instance, so it doesn't exist yet when the method is called. You can use any name you like for that first argument, but <code>cls</code> is the convention as it makes it clear we have a class reference here, not an instance. I used <code>super()</code> to ask the normal machinery (<code>object.__new__</code>) to create the instance for me first, so we can use it to set attributes on, etc. I've moved it down a little in my latest edit, so this is clearer.</span>
