<div class="post-text" itemprop="text">
<pre><code>strings = ("name", "last", "middle")
file = ["name","blabla","middle"]
for line in file:
    if any(s in line for s in strings):
        print ("found")
</code></pre>
<p>I want to compare two lists and get check for the common strings, and <strong>if and only if two or more</strong> strings are same.
The above code works well for <strong>one</strong> but I want it to check for <strong>two</strong> keywords. </p>
<p>Eg: It should <strong>only</strong> <code>print(found)</code> if <strong>and only if</strong> 'name' and 'middle' is found. Not only if 'name' is found. It should check for <strong>two</strong> strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>First you can find number of matches using <code>list comprehension</code> and then  <code>len &gt; 2</code> or not </p>
<pre><code>&gt;&gt;&gt; num = 2
&gt;&gt;&gt; l = [i for i in strings if i in file]
&gt;&gt;&gt; if len(l) &gt;= num:
        print('found')
found
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set</code>s and <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow noreferrer"><code>intersection</code></a> if you want to check for the common items (and it's not important which ones).</p>
<pre><code>if len(set(strings).intersection(file)) &gt;= 2:  # at least 2 common values
    print('found')
</code></pre>
<p>If you want to look for fixed items you could use the <a href="https://docs.python.org/3/library/stdtypes.html#set.issubset" rel="nofollow noreferrer"><code>issubset</code></a> method:</p>
<pre><code>strings = ("name", "last", "middle")
file = ["name","blabla","middle"]

check = {'name', 'middle'}  # that's a set containing the items to look for.
if check.issubset(strings) and check.issubset(file):
    print('found')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you like one-liners here's my proposition:</p>
<pre><code># If two or more elemnts from listA are present in listB returns TRUE
def two_or_more(listA, listB):
    return sum(map(lambda x : x in listB, listA)) &gt; 1 
</code></pre>
</div>
<span class="comment-copy">Do you have duplicates values in your tuple or list? How do you want to handle strings with different case?</span>
