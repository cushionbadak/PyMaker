<div class="post-text" itemprop="text">
<p>Put simply, I have a piece of code that looks like this:</p>
<pre><code>if some_condition_that_evals_to_True:
    raise ValueError("Error message")
</code></pre>
<p>What I want to do is to insert a logging statement that logs this entire exception but doing it just this way only saves the logger message:</p>
<pre><code>if some_condition_that_evals_to_True:
    logger.error("Logged error message")
    raise ValueError("Error message")
</code></pre>
<p>Any one know how to save the entire error message including the ValueError?</p>
<p>EDIT:</p>
<p>The following is what I am trying to recreate:</p>
<pre><code>if some_condition_that_evals_to_True:
    try:
        raise ValueError("Error with value")
    except ValueError:
        logger.exception("Logging Error with Value")
        raise 
</code></pre>
<p>But this seems like a roundabout way to get the behavior I want, so another way to phrase my question: Is there a more elegant way get the same behavior as the above codeblock?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try the <code>stack_info</code> keyword argument when using the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging module</a>:</p>
<pre><code>import logging
logging.basicConfig(filename='example.log',level=logging.DEBUG)
if True:
    logging.error('Error Message', stack_info=True)
    raise ValueError('Custom Error Message')
</code></pre>
<p>Running this shows the following:</p>
<pre><code>J:\&gt;python log_stack.py
Traceback (most recent call last):
  File "log_stack.py", line 5, in &lt;module&gt;
    raise ValueError('Custom Error Message')
ValueError: Custom Error Message

J:\&gt;more example.log
ERROR:root:Error Message
Stack (most recent call last):
  File "log_stack.py", line 4, in &lt;module&gt;
    logging.error('Error Message', stack_info=True)
</code></pre>
</div>
<span class="comment-copy">What <i>actually</i> happened when you tried this?  Show the actual output, and how it differs from what you wanted.  In short, don't ask <i>us</i> whether it will work, ask the ultimate authority: your Python run-time system.  :-)</span>
<span class="comment-copy">@Prune Tried it and got the expected result and I edited the description to reflect that</span>
<span class="comment-copy">Great.  Try an exception handler for <code>ValueError</code> and log what you like in that.  Will that work for you?</span>
<span class="comment-copy">@Prune Are you saying insert a try-except on the inside of the if statement with just the raised error and catch the exception that way?</span>
<span class="comment-copy">No, I was suggesting that you put the handler in the routine that calls this one.  If it were as simple as adding a line or to in the current <code>if</code> I trust that you would have already tried that.</span>
<span class="comment-copy">This is almost exactly what I was hoping for. Is there a way log that the the ValueError is what caused the error? Essentially just log what is printed</span>
<span class="comment-copy">@Abdullah The <code>ValueError</code> didn't cause the error, <code>ValueError</code> is merely is mechanism to inform other code of the specific error type. Your log message should be informative for humans, so a log message like <code>'Invalid value %r for foo' % foo</code> should give you all the information you need.</span>
<span class="comment-copy">@Abdullah you are able to instantiate an exception, e.g. <code>e = ValueError('custom')</code> and then log that using <code>logging.exception(e, stack_info=True)</code>, however the documentation says that should only be called from an exception handler (I don't know the specific reasons), which is why I haven't used it above. It works in our trivial example.</span>
