<div class="post-text" itemprop="text">
<p>Working on a real-time python project, for specific reasons I need to manage and monitor the lifetime of some objects. </p>
<p>In my code I do have some function generator that generates objects each specific period of time that I call <code>time_of_creation</code> and each has a <code>service_time</code>. I am using threads to create those objects. </p>
<p>I want to know how I can remove an object given its <code>time_of_creation</code> and its <code>service_time</code>. Do I need to monitor those objects using a thread also ? Is it right to do this : Assuming that I already have a function named remove that takes as an object obj and a key</p>
<pre><code>while 1:
    if time.time() - obj[key].time_of_creation == id_obj[key].service_time:
        remove(obj, key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe you could. Just keep in mind:</p>
<ol>
<li><p>Synchronize access to the objects between threads using <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer">threading.Lock</a> or similar, so you don't try to remove the object while some other thread is using it.</p></li>
<li><p>Rather than comparing for equality, check if the elapsed time is greater or equal than the service time, in case you miss the exact time (even if your thread doesn't sleep a bit inside the loop body (which it should imo), it can miss the exact time due to scheduling or the lookup / delete operations taking up time). Better late than never.</p></li>
</ol>
</div>
<span class="comment-copy"><code>time.time() - obj[key].time_of_creation == id_obj[key].service_time</code> may be <code>True</code> only by a very lucky coincidence. Usually <code>time()</code> returns a float with microseconds precision. You wanted <code>&gt;=</code>, I suppose.</span>
<span class="comment-copy">9000 you are absolutely right. Dmitry Narkevich I might tolerate one or two seconds. But sure I will use threading.Lock because they share the same state at some point. But what do you think if I create a thread and each second I verify the difference as I wrote above ? What do you suggest ? Thank you guys.</span>
<span class="comment-copy">Am I right to make use of multiprocessing module to perform the removal of objects ?</span>
<span class="comment-copy">If you already have a main loop in the main thread that uses/changes the objects then it'd be easier to do it at the end of that. But otherwise yes, as long as you lock everything correctly, it should be completely fine. (actually it might work fine even without locking on CPython due to the global interpreter lock if I'm not mistaken, but better do it anyway)</span>
<span class="comment-copy">You don't have to tolerate a few seconds. Even just a few milliseconds should be fine for preventing 100% cpu usage.</span>
