<div class="post-text" itemprop="text">
<p>Is there a robust way to test for equality of floating point numbers, or to generally ensure that floats that should be equal actually do equal each other to within the float's precision? For example, here is a distressing situation:</p>
<pre><code>&gt;&gt; np.mod(2.1, 2) == 0.1
Out[96]: False
</code></pre>
<p>I realize that this occurs because of the floating point error:</p>
<pre><code>&gt;&gt; np.mod(2.1, 2)
Out[98]: 0.10000000000000009
</code></pre>
<p>I am familiar with the <code>np.isclose(a,b,tol)</code> function, but using it makes me uncomfortable since I might get false positives, i.e. getting told that things are equal when they really should not be. There is also the note that <code>np.isclose(a,b)</code> may be different from <code>np.isclose(b,a)</code> which is even worse. </p>
<p>I am wondering, is there a more robust way to determine equality of floats, without false positives/false negatives, without <code>a==b</code> being different from <code>b==a</code> and without having to mess around with tolerances? If not, what are the best practices/recommendations for setting the tolerances to ensure robust behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>You stated that you want the check to return True if their infinite-precision forms are equal. In that case you need to use an infinite-precision data structure. For example <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer"><code>fractions.Fraction</code></a>:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(21, 10) % 2 == Fraction(1, 10)
True
</code></pre>
<p>There is also (although slow!) support for arrays containing python objects:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.array([Fraction(1, 10), Fraction(11, 10), Fraction(21, 10), 
...                 Fraction(31, 10), Fraction(41, 10)])
&gt;&gt;&gt; arr % 2 == Fraction(1, 10)
array([ True, False,  True, False,  True], dtype=bool)
</code></pre>
<p>You just have to make sure you don't lose the infinite-precision objects (which isn't easy for several numpy/scipy functions). </p>
<p>In your case you could even just operate on integers:</p>
<pre><code>&gt;&gt;&gt; 21 % 20 == 1
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>sympy</code> library has some support for this kind of thing.</p>
<pre><code>from sympy import *

a, b = GoldenRatio**1000/sqrt(5), fibonacci(1000)
print(float(a))
# prints 4.34665576869e+208
print(float(b))
# prints 4.34665576869e+208
print("Floats: ", float(a) - float(b))
# prints 0.0
print("More precise: ", N(fibonacci(100) - GoldenRatio**100/sqrt(5)))
# prints -5.64613129282185e-22
</code></pre>
<p><code>N</code> allows you to specify the precision that you'd like (with some caveats). Additionally, <code>sympy</code> has the <code>Rational</code> class. For more info, see <a href="http://docs.sympy.org/dev/modules/evalf.html" rel="nofollow noreferrer">here</a>.</p>
<p>Note that the floating point standard exists because it uses a fixed number of bits for computation. This is important for both processing speed and memory footprint. If you really need this type of precision, especially if you're looking for exact equality, you should really consider using a symbolic solver (like Mathematica, for example).</p>
<p>Python can do it, but it wasn't <em>designed</em> to do it.</p>
</div>
<span class="comment-copy">With epsilon and absolute value: <code>abs(np.mod(2.1, 2) - 0.1) &lt; 1e-6</code>? (returns <code>True</code>)</span>
<span class="comment-copy">Use integers if you want to be <i>exact</i>. Otherwise you can sort the two values to <code>isclose</code> so that they are symmetric</span>
<span class="comment-copy"><code>are equal when they really should not be</code> is a puzzling phrase.  What's your logic for determining whether they should be equal or not?  Other than value.  The derivation history?</span>
<span class="comment-copy">You'll need to give examples where <code>isclose</code> (or alternatives) does not work (to your satisfaction).  Otherwise you'll get downvotes and close votes.</span>
<span class="comment-copy">The obvious example is <code>a=1e-8; b=2e-8; np.isclose(a,b)</code> --&gt; <code>True</code>. To which you might say "Use <code>np.isclose(a, b, atol=1e-9)</code> --&gt; <code>False</code>."  But then, of course, <code>a=1e-9</code>; <code>b=2e-9</code> returns <code>True</code> again. Also, as I've already mentioned <code>isclose</code> is not a symmetric relation according to the docs (I haven't yet found an example of it, but that doesn't mean that it will never occur).</span>
<span class="comment-copy">I disagree with "Python can do it, but it wasn't designed to do it.", <a href="https://docs.python.org/library/decimal.html" rel="nofollow noreferrer"><code>decimal.Decimal</code></a> and <a href="https://docs.python.org/library/fractions.html" rel="nofollow noreferrer"><code>fractions.Fraction</code></a> show that Python has <b>built-in modules</b> designed especially to do <b>it</b>. However, if you meant "<i>NumPy</i> can do it, but it wasn't designed to do it" I would agree.</span>
<span class="comment-copy">It certainly has built-ins that can do it, but I'd have to disagree Python was designed around infinite/arbitrary precision arithmetic. Mathematica was, for contrast. Numerical computations in Mathematica support arbitrary precision by default. NumPy has no skin in the game what so ever. Agreed on that point!</span>
