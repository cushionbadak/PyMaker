<div class="post-text" itemprop="text">
<p><strong>Edit</strong><br/>
I'm not sure if this question is being read correctly.<br/>
I already know what <em>string formats</em> are in Python.<br/>
Every single little detail, I already know.<br/>
Please stop directing me to questions about string types in Python.</p>
<p>This is a specific question that has to do with the problem string delimiter<br/>
in the body of a <em>raw syntax</em> construction.  </p>
<p>I want to know why I can't use the raw syntax r"" or r'' form on this<br/>
raw string <code>"word's"</code> and have it exist in a variable just like this.  </p>
<p>It doesn't matter why I want to do this, but I've explained below.  </p>
<p>Thanks.</p>
<hr/>
<p>I'm just going over a some syntax rules to parse and create<br/>
strings using the Raw String Syntax rules for <code>r' '</code> and <code>r" "</code>.  </p>
<blockquote>
<p>For the record, I have read the <em>docs</em> and rules on raw strings.<br/>
  The question is specific to escaping the delimiter within the raw string.</p>
</blockquote>
<p>I have a utility that parses/makes other string types and is used<br/>
in production code.  </p>
<p>I'm perplexed that Python does not remove the <em>escape</em> of the escaped delimiter when the string is in a variable.  </p>
<p>Is this by design, ie. NOT removing the escape on the delimiter or what I am<br/>
hoping, just a missed part of the parse process.<br/>
Basically, a bug ?  </p>
<p>The string is not really a raw image of the original if after parsing, it does<br/>
not look like the original.<br/>
After parsing, in a variable, it now becomes useless.  </p>
<p>Is this an oversight and possibly something that will be corrected in the future?  </p>
<p>As it is now, in my utility, I can only create a raw syntax form, but due to<br/>
this bug, I cannot parse it unless I take off the escape from the delimiter.  </p>
<p>I mean, I guess I could do this as it is a direct inverse of making the string,<br/>
but it's disturbing that the lexical parser leaves this artificial escape in the variable after<br/>
the parsing process.  </p>
<p>Here is some code I used to verify the problem:   </p>
<p>Code  </p>
<pre><code>#python 2.7.12

print "Raw targt string test = \"word's\""

v1 = r' "word\'s" '     # =&gt; "word\'s" 
v2 = r" \"word's\" "    # =&gt; \"word's\"

print "using r' ' syntax, variable contains  " + v1
print "using r\" \" syntax, variable contains  " + v2

if len(v1) == len(v2) :
   print "length's are equal" 
else :
   print "length's are NOT equal" 
</code></pre>
<p>Output  </p>
<pre><code>Raw targt string test = "word's"
using r' ' syntax, variable contains   "word\'s" 
using r" " syntax, variable contains   \"word's\" 
length's are NOT equal
</code></pre>
<p>Either </p>
</div>
<div class="post-text" itemprop="text">
<p>To quote the <a href="https://docs.python.org/3/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash" rel="nofollow noreferrer">Python FAQ</a>, raw string literals in Python were "designed to ease creating input for processors (chiefly regular expression engines) that want to do their own backslash escape processing". Since the regex engine will strip the backslash in front of the quote character, Python doesn't need to strip it. This behavior will most likely never be changed since it would severely break backwards compatibility.</p>
<p>So yes, it is by design -- although it is quite confusing.</p>
<blockquote>
<p>I want to know why I can't use the raw syntax r"" or r'' form on this
  raw string "word's" and have it exist in a variable just like this.</p>
</blockquote>
<p>Python's raw string literals were not designed to be able to represent every possible string. In particular, the string <code>"'</code> cannot be represented within <code>r""</code> or <code>r''</code>. When you use raw string literals for regex patterns, this is not a problem, since the patterns <code>\"'</code>, <code>"\'</code>, <code>"'</code>, and <code>\"\'</code>, are equivalent (that is, they all match the single string <code>"'</code>).</p>
<p>However, note that you can write the string <code>"word's"</code> using the triple-quoted raw string literal <code>r'''"word's"'''</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's not a bug, that's intended behavior. When using <code>r</code> you're telling the interpreter to interpret your string, well, raw - that means turn off all escape sequences and treat the backslash as an ordinary char:</p>
<blockquote>
<p>Both string and bytes literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and treat backslashes as literal characters. As a result, in string literals, '\U' and '\u' escapes in raw strings are not treated specially. </p>
</blockquote>
<p>Since the backslash is treated as a literal character, when you do <code>r' "word\'s" '</code> it's equivalent to writing <code>' "word\\\'s" '</code>, and since your double quoted string has different escape sequence: <code>r" \"word's\" "</code> it's equivalent to: <code>' \\"word\'s\\" '</code> - hence, they don't match (one more backslash, plus on different locations).</p>
<p>Unfortunately, since strings must be single or double quoted you must escape single quotes in a single-quoted string and double quotes in a double quoted string to avoid syntax error, but the <code>r</code> instruction tells the interpreter to treat all escapes literally. Besides, <code>r</code> was never intended for string operation anyway.</p>
</div>
<span class="comment-copy"><code>r</code> is an instruction <i>not</i> to interpret any characters within a string in any special way. Also, Python interpreter does not distinguish single and double quotes as string delimiters, as long as they match pairwise. The following representations of a string a completely equivalent: <code>r'\''</code> <code>'\\\''</code> <code>"\\\'"</code> <code>"\\'"</code> <code>r"\'"</code>. Each of these representations refers to a two-element string consisting of a literal backslash and a single quote.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-flags-do-in-python-and-what-are-raw-string-l">What exactly do "u" and "r" string flags do in Python, and what are raw string literals?</a></span>
<span class="comment-copy">@DYZ - It's not a duplicate, please read my question. Also, I don't care about C style strings, only raw syntax literals. If there is no way to get this raw string <code>"word's"</code> into a variable, unchanged, using raw string syntax, then if it's intended, it's useless. If not intended, it's a bug. That's all my question is. I was curious if this deleterious behavior might be cured In the future, or any other insight. That's all.</span>
<span class="comment-copy">Your question, frankly speaking, is quite confusing. The only thing that <code>r</code> does is it turns off the special meaning of the backslash. If your string does not have any backslashes, adding <code>r</code> makes no difference</span>
<span class="comment-copy">@sln - It's not useless, it's quite useful when writing regular expressions and you don't have to escape every single backslash. That alone makes it a time saver. And it is intended to work like that - or rather, the 'inconsistent' appearance when interchanging double and single quotes is a collateral of Python syntax - if you could tell the interpreter any other way what are string boundaries you wouldn't have the issue with 'raw' strings.</span>
<span class="comment-copy">How is your long quote on strings ending with a backslash related to the OP and even to your own answer?</span>
<span class="comment-copy">@DYZ The OP wrote "Is this by design?" and "Is this an oversight and possibly something that will be corrected in the future?". I believe that to be the core of OP's question, so that is the part I answered. The quote is an authoritative source on the <b>design</b> of raw string literals and explains why backslashes are not removed when the raw string literal is parsed. This is summarized in the first paragraph of my answer.</span>
<span class="comment-copy">His question is not about a backslash <i>at the end</i> of a string. This is an entirely different topic.</span>
<span class="comment-copy">You're right, that's not what OP asked. I've edited my answer down. I think the pointer to the Python FAQ is important as an official source on the design of r-strings.</span>
<span class="comment-copy">Thanks for the edit and note. I have a utility that parses and makes every kind of string literal that exists. The operation is inversely equivalent. Even Dot-Net's <code>@""</code> is reversible and is correct. Like I said I'm not interested in getting <code>"word's"</code> into a string variable. I am focused on raw string syntax only. If this is how it is in python, it is <i>useless</i> and apparently is <i>by design</i>. I'll just pass on them and go on to the next language.</span>
<span class="comment-copy">Thanks. I'm glad you said it <code>Besides, r was never intended for string operation anyway</code>. It is apparently, utterly useless.</span>
