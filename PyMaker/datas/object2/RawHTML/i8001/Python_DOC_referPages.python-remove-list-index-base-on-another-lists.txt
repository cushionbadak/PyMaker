<div class="post-text" itemprop="text">
<p>I have a 2 lists as detailed below:</p>
<pre><code>a = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]]
remove_a_index = [[0], [0, 2, 3], [1]]
</code></pre>
<p>What is the best solution to remove list index of a base on the number from <code>remove_a_index</code> for e.g. for a[0] I need to remove number <code>0</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>You may use a nested <em>list comprehension</em> expression using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip()</code></strong></a> and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><strong><code>enumerate()</code></strong></a> to filter the content as:</p>
<pre><code>&gt;&gt;&gt; a = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]]
&gt;&gt;&gt; remove_a_index = [[0], [0, 2, 3], [1]]

&gt;&gt;&gt; a = [[j for i, j  in enumerate(x) if i not in y] for x, y in zip(a, remove_a_index)]
# where new value of `a` will be:
# [[1, 1, 2], [5], [2, 3, 3]]
</code></pre>
<hr/>
<p>Based on your desired result, in case if you just want to remove zeroes from the <code>a</code> list then you don't need the intermediate <code>remove_a_index</code> list. You may use a <em>list comprehension</em> expression to skip the zeroes from the new list as:</p>
<pre><code>&gt;&gt;&gt; a = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]]

&gt;&gt;&gt; [[j for j in i if j!=0] for i in a]
[[1, 1, 2], [5], [2, 3, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understood correctly the question, this should work:</p>
<pre><code>for i, to_remove in enumerate(remove_a_index):
    for j in reversed(to_remove):
        del a[i][j]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a language feature called List Comprehensions that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in l3:</p>
<pre><code>As an example, if I have l1 = [1,2,6,8] and l2 = [2,3,5,8], l1 - l2 should return [1,6]

l3 = [x for x in l1 if x not in l2]
l3 will contain [1, 6].
</code></pre>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>The shortest one-liner is below:</p>
<pre><code>a = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]]
remove_a_index = [[0], [0, 2, 3], [1]]

b = [[y for y in original_tuple if y not in remove_a_index[index]] for index, original_tuple in enumerate(a)]
print b
</code></pre>
<p>To explain, it's using list comprehension to loop through a and use the index:</p>
<pre><code>[? for index, original_tuple in enumerate(a)]
</code></pre>
<p>At this point the index is (0, 1, 2...) and original_tuple is each tuple.</p>
<p>Then for each tuple, you can access the subtracting tuple (remove_a_index[x]) by checking if it's in it or not.</p>
<pre><code>[y for y in original_tuple if y not in remove_a_index[index]] ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following:</p>
<ol>
<li>Create a new list.</li>
<li>Modify the all the items that you wish to remove to 'remove' on the original list.</li>
<li>Populate the new list with all the items that are not 'remove'.</li>
</ol>
<p>The code:</p>
<pre><code>a_new=[]
for i, item in enumerate(a):
    for element_to_remove in remove_a_index[i]:
        item[element_to_remove]='remove'

    new_item = [element  for element in item if element!='remove']
    a_new.append(new_item)
a=a_new
</code></pre>
</div>
<span class="comment-copy">Can you provide the desired output based on your example please?</span>
<span class="comment-copy">For longer lists, you could also use <code>zip(a, map(set, remove_a_index))</code> to speed up the lookup.</span>
<span class="comment-copy">I think you should provide at least a brief explanation to your answer.</span>
