<div class="post-text" itemprop="text">
<p>I have been stuck with this question on finding out the second largest number in a list to be read from the console with:</p>
<p>n = size of the list(number of elements) AND 
arr = The list itself</p>
<p>One of the constraints is -100&lt;=A[i]&lt;=100 which I am unable to integrate within my code as I am getting a LIST INDEX OUT OF RANGE ERROR. For instance, this code fails for the custom input: 
3
-10 0 10 </p>
<p>but passes for 
3
10 0 10 </p>
<pre><code>n = int(input())
arr = map(int, input().split())

sortedlist = sorted(arr)
temp = len(sortedlist)

emptylist = []

i = 0 
for temp in range(2, 11):
    if sortedlist[i]&lt;sortedlist[i+1]:
        i+=1
        emptylist.insert(i, sortedlist[i-1])
b = max(emptylist)
print(emptylist)
</code></pre>
<p>Error:</p>
<blockquote>
<p>Traceback (most recent call last):</p>
<p>File "solution.py", line 12, in
   if sortedlist[i]
  
  <p>IndexError: list index out of range</p>
</p></blockquote>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>if sortedlist[i] &lt; sortedlist[i+1]:</p>
</blockquote>
<p>The problem lies here. In your example <code>n = 3</code> so i can only be 0, 1 or 2. But in your code, <code>i+1</code> goes 1, 2 and 3 in the above line, which is out of the array bounds.</p>
<p>You can print <code>i</code> and see that <code>i</code> goes till 2 which is <code>n-1</code> and so <code>i+1</code> will be out of bounds. That is one easy way you could debug.</p>
<p>You have to ensure a condition where you do not compare with the next element for the last element.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can just use <code>sortedlist[-2]</code> to get the second largest number.</p>
<p>In case of repeated numbers you have to use <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> method call over original/sorted list.</p>
<p><code>sortedlist = sorted(list(set(arr)))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>try below snippet 
    <code>
        number_of_inputs = 4  # this is user defined
        i = 0
        collections = list()
        while True:
            user_input = input("Enter your numbers \n")
            if 100 &gt;= user_input &gt;= -100:
                i += 1
                collections.append(user_input)
                if i == number_of_inputs:
                    print "second largest number is \t ",sorted(collections)[-2]
                    break
            else:
                print"this Entry not allowed !!!"
</code></p>
</div>
<span class="comment-copy">So you sort the list then check <code>if sortedlist[i] &lt; sortedlist[i+1]</code>, why don't you trust Python builtins to make their job ? And what is <code>for temp in range(2, 11):</code> supposed to accomplish ?</span>
<span class="comment-copy">Because <code>i</code> is getting incremented every time and you have no checking whether it crossed the list length limit or not</span>
<span class="comment-copy">@polku because it could be <code>==</code></span>
<span class="comment-copy">As for the second case it passes as second element is greater than the third, <code>i</code> is not incremented again. So <code>i</code> always stays 1</span>
<span class="comment-copy">Got it! I was unnecessarily putting a constraint on temp between 2 and 11 as the question asked but that wasn't needed. For i in range(0, temp-1) did the job.</span>
<span class="comment-copy">Thanks. Got it. Issue was with my constraints for i in the for loop. For i in range(0, temp-1) did the job.</span>
<span class="comment-copy">Great! But just out of curiosity, why are you not using <code>sortedList[-2]</code> to get the second largest element? Would make your job much easier!</span>
<span class="comment-copy">I guess I got too obsessed with trying to find the logic behind it.</span>
