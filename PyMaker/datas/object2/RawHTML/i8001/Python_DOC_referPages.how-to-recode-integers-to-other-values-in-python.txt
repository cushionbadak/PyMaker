<div class="post-text" itemprop="text">
<p>I was surprised this question has not been asked yet. Given an array of integers</p>
<pre><code>x = np.random.randint(1,4,10)

&gt; array([3, 2, 1, 2, 1, 1, 3, 3, 2, 1])
</code></pre>
<p>How can I (easily) change all values according to some systematic rule, such as </p>
<pre><code>x[x==1] = 5
x[x==2] = 6
x[x==3] = 7

&gt; array([6, 5, 6, 7, 5, 5, 6, 5, 7, 6])
</code></pre>
<p>The rule may be more complex than this, e.g. recode <code>1=2</code> and <code>2=1</code> so that the order plays a role.</p>
</div>
<div class="post-text" itemprop="text">
<p>While others may suggest <em>just</em> using a dictionary, I would suggest using something that is actually made for this particular type of behavior rather manually using a dictionary, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">Python's <code>map</code></a> function.</p>
<p><code>map</code> takes a function and applies it to each input, and returns the result of that as a list.  So you would create your <code>if x == y, return z</code> as a function and apply <code>map(yourfunction, yourlist)</code> to it. </p>
<p>The nice <a href="http://book.pythontips.com/en/latest/map_filter.html" rel="nofollow noreferrer">thing about <code>map</code></a> is that you can use it on any iterable, and not just your list</p>
<p>Normal python version</p>
<pre><code>def numberfunc(x):
    if x == 1:
       return 5

    elif x == 2:
       return 6

    elif x== 3:
       return 7

    else:
        return x

x = [random.randint(1,4) for _ in range(10)]
# array([3, 2, 1, 2, 1, 1, 3, 3, 2, 1])

x = map(numberfunc, x)
# array([6, 5, 6, 7, 5, 5, 6, 5, 7, 6])
</code></pre>
<p>Numpy version (numpy uses <a href="https://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.vectorize.html" rel="nofollow noreferrer"><code>vectorize</code></a> as its <code>map</code>)</p>
<pre><code>x = np.random.randint(1,4,10)
# array([3, 2, 1, 2, 1, 1, 3, 3, 2, 1])

x = x.vectorize(numberfunc)
# array([6, 5, 6, 7, 5, 5, 6, 5, 7, 6])
</code></pre>
<p>Additionally if your number map function had a large amount of comparisons (larger than the 3 you list here) you might consider using python's <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code></a> in order to increase performance given <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">O(1) armortized</a> element access times, for example:</p>
<pre><code>num_dict {1:5, 2:6, 3:7, ...}
def numberfunc(x):
        if x in num_dict:
            return num_dict[x]
        return x
</code></pre>
<p>You probably wouldn't want to do this in the simple case because of the <em>armortized</em> gotcha on dictionary run time performance and constant overhead.  <a href="https://www.merriam-webster.com/dictionary/amortize" rel="nofollow noreferrer">Amortized</a> basically means that taking into account all operations you will make that are armortized, the cost of the most expensive operations will be offset by the <em>cheap</em>ness of the less expensive ones.  Occasionally dictionary mutation can be expensive; taken as a whole, many dictionary mutations will not be expensive compared to other data structures. Dictionaries also have larger indexing overheads compared to things like arrays.  In a naive implementation, <a href="https://www.tutorialspoint.com/data_structures_algorithms/hash_data_structure.htm" rel="nofollow noreferrer">you will typically have to iterate over lists given your key to find your value</a> and in more complicated scenarios, <a href="https://en.wikipedia.org/wiki/Cuckoo_hashing" rel="nofollow noreferrer">often more guaranteed overhead is involved</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The most straightforward way would just be to iterate over the array replacing values.</p>
<pre><code>rule = {1: 5, 2: 6, 3: 7}
x = x.vectorize(lambda x: rule[x] if x in rule else x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>map</code> to do the transformation. <code>map</code> takes a transformation function and a list of inputs and outputs the result of applying that function to all of the inputs systematically.</p>
<p>For example:</p>
<pre><code>def mapping(i):
    if i == 1:
        return 5
    elif i == 2:
        return 6
    elif i == 3:
        return 7
    return i

print array(map(mapping, [3, 2, 1, 2, 1, 1, 3, 3, 2, 1]))
</code></pre>
</div>
<span class="comment-copy">This is a great application for using a dictionary as a direct look-up list.  Or, if the transfer function is this simple, then you simply apply the rule of <code>item += 4</code> on the entire list.</span>
