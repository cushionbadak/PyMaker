<div class="post-text" itemprop="text">
<p>Say I have a class called <code>Person</code>, which will have only the person's name and gender.</p>
<p>The gender should be randomly selected from Male and Female. To do that, I import the <code>random.randint()</code> function. The random gender is determined according to the random int.</p>
<pre><code>import random

class Person:
    alias = random.randint(1, 3)
    if alias == 2:
        gender = 'Male'
    else:
        gender = 'Female'

    def __init__(self, name):
        self.name = name

r = Person('rachel')
s = Person('Stanky')
print(r.gender)
print(s.gender)
</code></pre>
<p>However, the result I get for different person from this class all have the same gender. My understanding is the <code>randint</code> is fixed once been generated. My question is how to make it different for each class instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason your never getting a different gender is because the gender attribute is a <em>class</em> variable. Once Python creates your class object <code>Person</code>, the value of <code>gender</code> is never computed again. You need to make the <code>gender</code> variable an <em>instance</em> attribute. That means the gender will be computed on a per instance basis, instead of per class definition. eg:</p>
<pre><code>import random

class Person:
  def __init__(self, name):
      self.name = name
      alias= random.randint(1, 3)
      if alias == 2:
          self.gender = 'Male'
      else:
          self.gender = 'Female'

r= Person('rachel')
s= Person('Stanky')

print(r.gender) 
print(s.gender)
</code></pre>
<p>Which outputs</p>
<pre><code>Female
Male
</code></pre>
<p>On a side note, I think a much better choice for your task would be to use <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice()</code></a> to select a random gender from a list of genders(male or female):</p>
<pre><code>from random import choice

class Person:
  genders = ('Male', 'Female', 'Female')
  def __init__(self, name):
      self.name = name
      self.gender = choice(Person.genders)

rachel = Person('Rachel')
stanky = Person('Stanky')

print(rachel.gender) 
print(stanky.gender)
</code></pre>
<p>Notice in my example above, <code>Person.genders</code> <em>is</em> a class variable. This is on purpose. Because we only need to create a list of genders <em>once</em>, we can make the list a class level variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you already guessed the reason correctly why the gender doesn't change. To solve this you could use a <a href="https://docs.python.org/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> for <code>gender</code>:</p>
<pre><code>import random

class Person(object):
    def __init__(self, name):
        self.name = name

    @property
    def gender(self):
        try:
            # If it has been defined for the instance, simply return the gender
            return self._gender
        except AttributeError:
            # If it's not defined yet, define it, and then return it
            self._gender = random.choice(['male', 'female'])
            return self._gender

r = Person('rachel')
s = Person('Stanky')
print(r.gender)
print(s.gender)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should put random gender generation under <code>__init__</code>, so that it would be randomly generated for each class instance.</p>
<pre><code>import random

class Person:
    def __init__(self, name):
        self.name = name
        alias= random.randint(1, 3)
        if alias == 2:
            self.gender = 'Male'
        else:
            self.gender = 'Female'

r= Person('rachel')
s= Person('Stanky')
print(r.gender)
print(s.gender)
</code></pre>
<p>Three times of results:</p>
<pre><code>$ python classRandom.py 
Male
Female
$ python classRandom.py 
Female
Female
$ python classRandom.py 
Female
Male
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The gender variable is currently a class variable, that's why it stays the same for all the instance created. You will need to change them into a instance's attribute.</p>
<p>Side note: <code>random.randint(1, 3)</code> will either return 1, 2 or 3 not just 1 or 2. It is not the same as indexing, in which the ending is ignored. Right now, there's a higher chance to be a Female since it could be 1 or 3, so <code>random.randint(1,2)</code> makes more sense. I mentioned this just in case it was not done on purpose. You can also use <code>random.choice</code>, which will choose a random selection from a list.</p>
<pre><code>import random

class Person:

    def __init__(self, name):
        self.name = name
        self.gender= random.choice(["Male", "Female"]) # or random.choice(["Male", "Female", "Female"]) if you want a higher chance of being a female

r= Person('rachel')
s= Person('Stanky')
print(r.gender)
print(s.gender)
</code></pre>
</div>
<span class="comment-copy">Code on the top level of the class is run only once (at import time). If you want to make the choice for every instance put the code in the <code>__init__</code> method.</span>
<span class="comment-copy">One other thing worth mentioning: this can be made a lot simpler using <code>self.gender = random.choice(['Male', 'Female'])</code>.</span>
<span class="comment-copy">@Mac I was just about to add an edit saying the exact same thing. Great minds think alive, eh? ;-)</span>
<span class="comment-copy">you should definetly put the <code>choice</code> approach at the top. That's the right way to solve the problem!</span>
<span class="comment-copy">@MSeifert While I most certainly agree, it seems to me that it would be better to answers the OP's <i>original</i> question first(see this <a href="https://meta.stackoverflow.com/questions/349138/should-i-stop-including-useful-tips-with-my-answers">meta discussion for more info</a>). But your right, I'll add a comment saying the using the <code>choice</code> method is a better way.</span>
<span class="comment-copy">You're right. It could also be intended that the female to male ratio is 2:1 (<code>randint</code> includes end points). In that case the <code>choice</code> approach needs to be <code>choice(['male', 'female', 'female'])</code>... Better to have <code>randint</code> at the top as long as the intention isn't clearly stated.</span>
<span class="comment-copy">is this different with : <code>def __init__(self, name): self.name = name self.gender = random.choice(['Male','Female']) </code>?    Cuz what I see here is if no gender variable is declared, then we declare a new gender variable. However, this class only have a variable, which is name. That means no gender local variable will be defined for sure, isn't it?</span>
<span class="comment-copy">You're right, it is different. The <code>_gender</code> variable is undefined as long as you don't access the property <code>gender</code>. But as soon as you access the property it will be defined. So it's a different implementation but for most purposes it will behave exactly like the <code>__init__</code> solutions.</span>
