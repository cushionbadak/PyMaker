<div class="post-text" itemprop="text">
<p>I'm trying to convert a decimal number to an arbitrary base and back to decimal. I found this code below from <a href="https://stackoverflow.com/a/2267721/6171895">another question</a>:</p>
<pre><code>def int2base(x,b,alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):
    'convert an integer to its string representation in a given base'
    if b&lt;2 or b&gt;len(alphabet):
        if b==64: # assume base64 rather than raise error
            alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        else:
            raise AssertionError("int2base base out of range")
    if isinstance(x,complex): # return a tuple
        return ( int2base(x.real,b,alphabet) , int2base(x.imag,b,alphabet) )
    if x&lt;=0:
        if x==0:
            return alphabet[0]
        else:
            return  '-' + int2base(-x,b,alphabet)
    # else x is non-negative real
    rets=''
    while x&gt;0:
        x,idx = divmod(x,b)
        rets = alphabet[idx] + rets
    return rets
</code></pre>
<p>When I convert a decimal to hex:</p>
<pre><code>in_base16 = int2base(number, 16)
</code></pre>
<p>it works, but when I try to convert that result back to decimal (base 10):</p>
<pre><code>back_to_10 = int2base(in_base16, 10)
</code></pre>
<p>... it gives me the error: </p>
<pre><code>    if x&lt;=0:
    TypeError: '&lt;=' not supported between instances of 'str' and 'int'
</code></pre>
<p>It can't convert a string back to a number for some reason.  I don't understand why.  How would I convert a number of an arbitrary base back to decimal?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>int2base</code> function only accepts an integer as input, so you need to convert your string to an integer. So, you can simply use the built-in function <code>int(string, base)</code> to do this:</p>
<pre><code>in_base16 = int2base(number, 16)
back_to_10 = int2base(int(in_base16, 16), 10)
</code></pre>
<p>Which works fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>If base-n is up to 36, you can use the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">built-in</a> <code>int(str,base)</code>.</p>
<pre><code>&gt;&gt;&gt; int('AA', 32)
330
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your basic problem is the signature: your function works only on <code>x</code> as an integer.  Instead, you need either a second function that works on strings, or a type check at the top of this routine to detect the input type.</p>
<p>The basic problem is that you've assumed that you can get the digit's value within the radix (base) with a simple reference; this works for an integer, but not a string.  "9" doesn't yield a numeric value of <code>9</code>; "B" doesn't give you 11.</p>
<p>Instead, you need to feed the character to the <code>index</code> function and take the return value:</p>
<pre><code>digit_value = alphabet.index(char)
</code></pre>
<p>will give you the character's position in the alphabet, which is the digital value you want for your computations.</p>
<p>Can you take it from there?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need one function for converting from int to base (returning a string that represents a number in that base -- here up to base 36):</p>
<pre><code>digits = '0123456789abcdefghijklmnopqrstuvwxyz'

def int2base(n, b=2, digits=digits):
    "convert integer n to base b"
    if n &lt; 0:
        raise ValueError("no negative numbers")
    if n &lt; b:
        return digits[n]
    res = []
    q = n
    while q:
        q, r = divmod(q, b)
        res.append(digits[r])
    return ''.join(reversed(res))
</code></pre>
<p>and another function for converting back from base to int:</p>
<pre><code>def base2int(s, base=2, digits=digits):
    "convert string s representing a number in base to int (base 10)"
    if not (2 &lt;= base &lt;= len(digits)):
        raise ValueError("base must be &gt;= 2 and &lt;= %d" % len(digits))
    res = 0
    for i, v in enumerate(reversed(s)):
        digit = digits.index(v)
        res += digit * (base ** i)
    return res
</code></pre>
</div>
<span class="comment-copy"><code>"0x10" &lt;= 0</code> is something python does not understand... try <code>int(in_base16,16)</code></span>
<span class="comment-copy">The function you are using converts a number from an integer to its string representation in another base. By passing its output to itself, you are now passing a string to a function that only accepts integers. You need to use the built-in <code>int(string, base)</code> function to convert your number to an integer before putting it into the function you have.</span>
<span class="comment-copy">@RandomDavis Oh, yeah, I see now. But is there an easy way to convert that representation of a number back to decimal?</span>
<span class="comment-copy">Yes, it's built-in to python: <code>int(string, base)</code>. You would just have to change your second function call to <code>back_to_10 = int2base(int(in_base16, 16), 10)</code>. I converted this comment into an answer if that indeed is all you needed.</span>
<span class="comment-copy">Thank you. It works indeed. But it seems it only works for range 2 - 36 <code>int() base must be &gt;= 2 and &lt;= 36</code></span>
<span class="comment-copy">Sounds like if you needed more than those bases, you would just have to rework your int2base function to go the other direction.</span>
<span class="comment-copy">I knew about that one, but thank you. It's a nice one</span>
<span class="comment-copy">Yeah, I understand that now. The other answers works fine, but the built-in function doesn't work for base &gt;36.  I'm going to try your method now. Thanks</span>
<span class="comment-copy">Great to hear.  Also check your alphabet for base-64, in case there's some standard that matters.  The one I used in ancient times started with the decimal digits.</span>
<span class="comment-copy">BTW, you can find the code for this solution in many places on line, if a pre-packaged solution would do the trick.</span>
<span class="comment-copy">I tried to find the solution on stackoverflow (via google) but I couldn't find the way to convert it back to decimal. Can't quite do it myself yet. I've already got 2 errors, trying to add your line of code in the function, ehh, newbie programmers...</span>
<span class="comment-copy">Hint from an aged programmer: write a separate function before you try to make this one do both jobs.</span>
