<div class="post-text" itemprop="text">
<p>I'm trying to run a nested for loop with a conditional statement. When running it, I expect it to print the statement that I defined if my conditional statement. But it doesn't print anything. (and it doesn't run indefinitely). Pokemons_gyms is a list of strings. Players is a dictionary. I tried adding <code>else: continue</code> but it doesn't work. I'm stuck cause I don't get any error running the code...</p>
<pre><code>pokemon_gyms = ['reddit.com', 'amazon.com', 'twitter.com', 
            'linkedin.com', 'ebay.com','netflix.com',
            'udacity.com','stackoverflow.com','github.com',
            'quora.com']

players= {
    1: {
        'gyms_visited': ['amazon.com', 'ebay.com']
        }
    2:{
        'gyms_visited' : ['stackoverflow.com','github.com']
      }
}

for gym in pokemon_gyms:     
    for players_id in players:
        if gym == players[players_id]['gyms_visited']:
            print(str(players[players_id]['player_name']) +" has visited "+ str(gym))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>players[players_id]['gyms_visited']</code> returns a list so <code>gym == players[players_id]['gyms_visited']</code> always evaluates to <code>False</code>.</p>
<p>You should check for membership using <code>in</code>:</p>
<pre><code>if gym in players[players_id]['gyms_visited']:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that <code>gym</code> is going to be a <code>str</code> while <code>players[players_id]['gyms_visited']</code> is a <em>list</em> of strings.  Because of this, they will never be equal.</p>
<p>Perhaps you want to check</p>
<pre><code>if gym in players[players_id]['gyms_visited']:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is in the line <code>if gym == players[players_id]['gyms_visited']:</code>. <code>==</code> checks for equality so this will look if <code>gym</code> is equal to the list in <code>players[players_id]['gyms_visited']</code> in the dictionary.</p>
<p>If you want to check if the any of the items in the list is equal to the string you can use the <code>in</code> keyword</p>
<pre><code>for gym in pokemon_gyms:
    for players_id in players:
        if gym in players[player_id]['gyms_visited']:
            # Do things here
</code></pre>
<p>Notice that for large lists this can be rather slow so you might want to consider using a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer" title="set">set</a> instead if you are going to have players with lots of visited pokemon_gyms.</p>
</div>
<div class="post-text" itemprop="text">
<p>YUP! 
All set, it was '==' that was resulting to all results being False because of type(gym) is different from type(players[players_id]['gyms_visited']).</p>
<p>I replaced '==' by 'in' and it worked perfectly.</p>
<p>Thank you guys!</p>
</div>
<span class="comment-copy">"is" and "evaluates to", respectively; not "returns". There are no returns here.</span>
<span class="comment-copy">@BoundaryImposition -- maybe.  At a low enough level, we're talking about what <code>__getitem__</code> is going to return, so there <i>is</i> a return value here, it's just not so explicit.</span>
<span class="comment-copy">@mgilson: heh nice maneuvering. Still, it wouldn't be correct to say "X returns Y" even though "X" was produced through a return from some function</span>
<span class="comment-copy">= is an assignment operator == is an equality operator</span>
