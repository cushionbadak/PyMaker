<div class="post-text" itemprop="text">
<p>I'm trying to import a package from a different project, but it's not recognising the project that I'm trying to import from. I've looked at various answers to this question (including <a href="https://stackoverflow.com/questions/16786563/python-import-another-project-module-named-same-with-a-local-module">python: import another project module named same with a local module</a>).</p>
<p>My project structure looks like this:</p>
<pre><code>Project1
 - __init__.py
 - foo_directory
  - foo.py
  - __init__.py


Project2
 - __init__.py
 -bar_directory
  - bar.py
  - __init__.py
</code></pre>
<p>In bar.py I'm trying to do:</p>
<pre><code>import sys
sys.path.append('path/to/Project2')

from Project1.foo_directory import foo.py
</code></pre>
<p>I can't work out why it's not recognising Project1 when I try to do an import?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should create two packages, <code>Project1</code> and <code>Project2</code> (note the <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer"><code>setup.py</code></a>)</p>
<pre><code>Project1
 - setup.py
 - Project1
  - __init__.py
  - foo_directory
   - foo.py
   - __init__.py
</code></pre>
<p>and</p>
<pre><code>Project2
 - setup.py
 - Project2
  - __init__.py
  - bar_directory
   - bar.py
   - __init__.py
</code></pre>
<p>then install them</p>
<pre><code>pip install -e Project1/
pip install -e Project2/
</code></pre>
<p>And then you can simply do</p>
<pre><code>from Project1.foo_directory import foo
</code></pre>
<p>The obvious advantage: Package2 depends on Package1 but <em>doesn't need to know where it was installed</em>. Managing all the import paths is done by <code>pip</code> and the environment you're in (hopefully a virtualenv).</p>
</div>
<div class="post-text" itemprop="text">
<p>2 Solutions:</p>
<p>1- Use the PYTHONPATH environoment variable. See <a href="https://stackoverflow.com/questions/19917492/how-to-use-pythonpath">this answer</a> for more details</p>
<pre><code>$ export PYTHONPATH=$(PYTHONPATH):/path/to/project1 
</code></pre>
<p>2 - Create a setup.py for your projects so you can install them, thus import them&gt;</p>
<p><a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">https://docs.python.org/3/distutils/setupscript.html</a></p>
<p>Note: Messing with the sys.path from within app is not a recommanded solution as it is not really robust not crossplatform. </p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the advice Maresh gave me, I did the following (I'm using Windows, which is why I couldn't follow his answer exactly):</p>
<p>In PyCharm: File &gt; Settings &gt; Project: Project1 &gt; Project Structure.
  - Add Content Root (add the location for Project2).
  - Apply and OK</p>
<p>Then in bar.py I was able to import files from Project2</p>
</div>
<span class="comment-copy">maybe this helps: <a href="http://stackoverflow.com/a/30625670/4954037">stackoverflow.com/a/30625670/4954037</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1046628/importing-python-modules-from-different-working-directory">Importing Python modules from different working directory</a></span>
