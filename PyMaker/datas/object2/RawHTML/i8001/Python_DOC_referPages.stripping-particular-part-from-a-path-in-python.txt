<div class="post-text" itemprop="text">
<p>I have a path which is something like this.</p>
<pre><code>/schemas/123/templates/Template1/a/b
</code></pre>
<p>I want to strip off everything and store only the number (i.e. 123) to variable. Can someone help with this. And the number which I want to store stays at the same place in the path every time. I mean the number always comes after /schemas/"number"</p>
<p>Thanks much </p>
</div>
<div class="post-text" itemprop="text">
<p><code>pathlib</code> objects are designed for easy access to the component <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parts" rel="nofollow noreferrer">parts</a> of paths:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; path = Path('/schemas/123/templates/Template1/a/b')
&gt;&gt;&gt; path.parts
('/', 'schemas', '123', 'templates', 'Template1', 'a', 'b')
&gt;&gt;&gt; [int(part) for part in path.parts if part.isdigit()]
[123]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT</strong> In the comments it is stated that it can be numbers and characters</p>
<p><strong>Method 1</strong> Using split</p>
<pre><code>#!/usr/bin/python
testLine = "/schemas/123abc/templates/Template1/a/b"
print testLine.split("/")[2]
</code></pre>
<p><strong>Method 2</strong> Using regex</p>
<p>Select anything between the second and the third (<em>if exists</em>) slash</p>
<pre><code>#!/usr/bin/python
import re

testLine = "/schemas/123abc/templates/Template1/a/b"
pattern = "^/schemas/(.[^/]+).*"
matchObj = re.match(pattern, testLine)

if matchObj:
    num = matchObj.group(1)
    print int(num)
else:
    print "not found"
</code></pre>
<p>The pattern is as follows:</p>
<ul>
<li><strong>^/</strong> the string begins with slash</li>
<li><strong>schemas/</strong> next comes the word schemas with a slash in the end</li>
<li><strong>(.[^/]+)</strong> contains one or more characters excluding slash (parenthesis used for grouping)</li>
<li><strong>.*</strong> ends with any character</li>
</ul>
</div>
<span class="comment-copy">thanks so much for prompt reply. Is there any other way to achieve this without having to install any modules. Because my script is being used by lot of people around. I cant tell everyone to install this module. If you can suggest any other way without new modules thats really great.</span>
<span class="comment-copy"><code>pathlib</code> is included in standard libs for more than 3 years now.  So anyone using a current version of Python does not have to install any extra modules, it comes with Python.</span>
<span class="comment-copy">Follow the link in the answer and you will see, the module is part of the standard library :)</span>
<span class="comment-copy">I have python 2.6.6. When i run the code by importing pathlib module, I get module error.</span>
<span class="comment-copy"><b>Python 2.6 is nearly 10 years old now.</b>  Perhaps it's time for you to upgrade the Python version.</span>
<span class="comment-copy">Thanks much. But for some reason it is not matching the pattern and resulting "not found". The "testline"  i have in my script is string. Is that causing any issue?</span>
<span class="comment-copy">no testLine should be a string. Be careful the pattern is pretty strict, your testLine should start with "/schemas/" (also you can try to remove "^/")</span>
<span class="comment-copy">Yeah i tested with that pattern as well and the path starts with /schemas. All I am suspecting is it because we are not specifying another after the number in pattern? Like it should accept what ever it comes after the "(\d+)" . Any ideas of how to do that?</span>
<span class="comment-copy">You can try "^/schemas/(\d+)" or "^/schemas/(\d+).*"</span>
<span class="comment-copy">"^/schemas/(\d+).*" This worked. But it is only picking up first three numbers. Ok, I have the number as mix of alphabets and numbers like 123abc. "(\d+)" is only picking up 123. How to denote this aplhanumeric thing?</span>
