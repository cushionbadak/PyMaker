<div class="post-text" itemprop="text">
<p>I am following this tutorial: <a href="https://github.com/TomAugspurger/pydata-chi-h2t/blob/master/3-Indexing.ipynb" rel="nofollow noreferrer">GitHub Link</a></p>
<p>If you scroll down (Ctrl+F: Exercise: Select the most-reviewd beers ) to the section that says <code>Exercise: Select the most-reviewd beers</code>:</p>
<p>The dataframe is multindexed:
<a href="https://i.stack.imgur.com/M5QKz.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/M5QKz.png"/></a></p>
<p>To select the most-reviewed beers:</p>
<pre><code>top_beers = df['beer_id'].value_counts().head(10).index
reviews.loc[pd.IndexSlice[:, top_beers], ['beer_name', 'beer_style']]
</code></pre>
<p>My question is the way of how the IndexSlice is used, how come you can skip the colon after top_beers and the code still run?</p>
<pre><code>reviews.loc[pd.IndexSlice[:, top_beers, :], ['beer_name', 'beer_style']] 
</code></pre>
<p>There are three indexes, <code>pofile_name</code>, <code>beed_id</code> and <code>time</code>. Why does <code>pd.IndexSlice[:, top_beers]</code> work (without specify what to do with the time column)?</p>
</div>
<div class="post-text" itemprop="text">
<p>To complement the previous answer, let me explain how <code>pd.IndexSlice</code> works and why it is useful.</p>
<p>Well, there is not much to say about its implementation. As you read in the <a href="https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py" rel="nofollow noreferrer">source</a>, it just does the following: </p>
<pre><code>class IndexSlice(object):
    def __getitem__(self, arg):
        return arg
</code></pre>
<p>From this we see that <code>pd.IndexSlice</code> only forwards the arguments that <code>__getitem__</code> has received. Looks pretty stupid, doesn't it? However, it actually does something. </p>
<p>As you certainly know already, <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>obj.__getitem__(arg)</code></a> is called if you access an object <code>obj</code> through its bracket operator <code>obj[arg]</code>. For sequence-type objects, <code>arg</code> can be either an integer or a <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer">slice object</a>. We rarely construct slices ourselves. Rather, we'd use the slice operator <code>:</code> (aka ellipsis) for this purpose, e.g. <code>obj[0:5]</code>.</p>
<p>And here comes the point. The python interpretor converts these slice operators <code>:</code> into slice objects before calling the object's <code>__getitem__(arg)</code> method. Therefore, the return value of <code>IndexSlice.__getItem__()</code>  will actually be a slice, an integer (if no <code>:</code> was used), or a tuple of these (if multiple arguments are passed). In summary, the only purpose of <code>IndexSlice</code> is that we don't have to construct the slices on our own. This behavior is particularly useful for <code>pd.DataFrame.loc</code>.</p>
<p>Let's first have a look at the following examples:</p>
<pre><code>import pandas as pd
idx = pd.IndexSlice
print(idx[0])               # 0
print(idx[0,'a'])           # (0, 'a')
print(idx[:])               # slice(None, None, None)
print(idx[0:3])             # slice(0, 3, None)
print(idx[0:3,'a':'c'])     # (slice(0, 3, None), slice('a', 'c', None))
</code></pre>
<p>So all colons <code>:</code> are converted into a corresponding slice object. If multiple arguments are passed to the index operator, the arguments are returned as an n-tuple. </p>
<p>To demonstrate how this could be useful for a pandas data-frame <code>df</code> with a multi-level index, let's have a look at the following.</p>
<pre><code># Let's first construct a table with a three-level
# row-index, and single-level column index.
import numpy as np
level0 = range(0,10)
level1 = list('abcdef')
level2 = ['I', 'II', 'III', 'IV']
mi = pd.MultiIndex.from_product([level0, level1, level2])
df = pd.DataFrame(np.random.random([len(mi),2]), 
                  index=mi, columns=['col1', 'col2'])

# Return 'col1', select all rows.
df.loc[:,'col1']            # pd.Series         

# Note: in the above example, the returned value has type
# pd.Series, because only one column is returned. One can 
# enforce the returned object to be a data-frame:
df.loc[:,['col1']]          # pd.DataFrame, or
df.loc[:,'col1'].to_frame() # 

# Select all rows with top-level values 0:3.
df.loc[0:3, 'col1']   

# If we want to create a slice for multiple index levels
# we need to pass somehow a list of slices. The following
# however leads to a SyntaxError because the slice 
# operator ':' cannot be placed inside a list declaration.
df.loc[[0:3, 'a':'c'], 'col1'] 

# The following is valid python code, but looks clumsy:
df.loc[(slice(0, 3, None), slice('a', 'c', None)), 'col1']

# Here is why pd.IndexSlice is useful. It helps
# to create a slice that makes use of two index-levels.
df.loc[idx[0:3, 'a':'c'], 'col1'] 

# We can also expand the slice specification by third level.
df.loc[idx[0:3, 'a':'c', 'I':'III'], 'col1'] 

# A solitary slicing operator ':' means: take them all.
# It is equivalent to slice(None).
df.loc[idx[0:3, 'a':'c', :], 'col1'] # pd.Series

# Semantically, this is equivalent to the following,
# because the last ':' in the previous example does 
# not add any information about the slice specification.
df.loc[idx[0:3, 'a':'c'], 'col1']    # pd.Series

# The following lines are also equivalent, but
# both expressions evaluate to a result with multiple columns.
df.loc[idx[0:3, 'a':'c', :], :]    # pd.DataFrame
df.loc[idx[0:3, 'a':'c'], :]       # pd.DataFrame
</code></pre>
<p>So in summary, <code>pd.IndexSlice</code> helps to improve readability when specifying slices for rows and column indices.</p>
<p>What pandas then does with these slice specifications is a different story. It essentially selects rows/columns, starting from the topmost index-level and reduces the selection when going further down the levels, depending on how many levels have been specified. <code>pd.DataFrame.loc</code> is an object with its own <code>__getitem__()</code> function that does all this.</p>
<p>As you pointed out already in one of your comments, pandas seemingly behaves weird in some special cases. The two examples you mentioned will actually evaluate to the same result. However, they are treated differently by pandas internally.</p>
<pre><code># This will work.
reviews.loc[idx[top_reviewers,        99, :], ['beer_name', 'brewer_id']]
# This will fail with TypeError "unhashable type: 'Index'".
reviews.loc[idx[top_reviewers,        99]   , ['beer_name', 'brewer_id']]
# This fixes the problem. (pd.Index is not hashable, a tuple is.
# However, the problem matters only with the second expression.)
reviews.loc[idx[tuple(top_reviewers), 99]   , ['beer_name', 'brewer_id']]
</code></pre>
<p>Admittedly, the difference is subtle. </p>
</div>
<div class="post-text" itemprop="text">
<p>Pandas only requires you to specify enough levels of the MultiIndex to remove an ambiguity. Since you're slicing on the 2nd level, you need the first <code>:</code> to say I'm not filtering on this level.</p>
<p>Any additional levels not specified are returned in their entirety, so equivalent to a <code>:</code> on each of those levels.</p>
</div>
<span class="comment-copy">That's what the <code>:</code> operator does. You are filtering by only one of the three columns of the hierarchical index. The other two (the ones using <code>:</code>) can take any value. You can think of <code>:</code> as a filter that matches <code>True</code> for any value.</span>
<span class="comment-copy">@GustavoBezerra the problem is that even without the third <code>:</code> the code still works. <code>reviews.loc[pd.IndexSlice[:, top_beers], ['beer_name', 'beer_style']]</code> works even without the third `:'</span>
<span class="comment-copy">If that is the case then why can't I remove the colon from this line within the same tutorial <code>reviews.loc[pd.IndexSlice[top_reviewers, 99,:], ['beer_name', 'brewer_id']]</code>, if I remove the colon and comma after <code>99</code>, I get a <code>unhashable type: 'Index'</code> error</span>
<span class="comment-copy">Not sure off the top of my head. Based on the error message, about <code>Index</code> being unhashable, it's possible it's taking a different indexing path. You could open an issue on github with a simpler example and we'll take a look.</span>
<span class="comment-copy">@Cheng: The problem is that <code>top_reviewers</code> is of type <code>pd.Index</code>, which apparently is not hashable out of the box. To fix this, you could transform it into a list first (which can be further transformed into a hashable object). So the following will work: <code>reviews.loc[pd.IndexSlice[top_reviewers.tolist(), 99], ['beer_name', 'brewer_id']]</code></span>
<span class="comment-copy">@Cheng But it's true that you discovered a small inconsistency in the way pandas processes slices: <code>top_reviewers</code> in <code>pd.IndexSlice[top_reviewers, 99, :]</code> and <code>pd.IndexSlice[top_reviewers, 99]</code> is not treated in exactly the same way, the latter leading to an error, while the former does not.</span>
