<div class="post-text" itemprop="text">
<pre><code>from string import capwords

capwords('\"this is test\", please tell me.')
# output: '\"this Is Test\", Please Tell Me.'
             ^
</code></pre>
<p>Why is it not equal to this? â†“</p>
<pre><code>'\"This Is Test\", Please Tell Me.'
   ^
</code></pre>
<p>How can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/string.html#helper-functions" rel="nofollow noreferrer">documentation</a> for <code>string.capwords()</code> says:</p>
<blockquote>
<p>Split the argument into words using <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a>, capitalize each word using <a href="https://docs.python.org/3/library/stdtypes.html#str.capitalize" rel="nofollow noreferrer"><code>str.capitalize()</code></a>, and join the capitalized words using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a>. If the optional second argument <em>sep</em> is absent or <code>None</code>, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise <em>sep</em> is used to split and join the words.</p>
</blockquote>
<p>If we do this step by step:</p>
<pre><code>&gt;&gt;&gt; s = '\"this is test\", please tell me.'
&gt;&gt;&gt; split = s.split()
&gt;&gt;&gt; split
['"this', 'is', 'test",', 'please', 'tell', 'me.']
&gt;&gt;&gt; ' '.join(x.capitalize() for x in split)
'"this Is Test", Please Tell Me.'
</code></pre>
<p>So you can see the double quotes are treated as being the part of the words, and so the following <code>"t"</code>s are not capitalised.</p>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.title" rel="nofollow noreferrer"><code>str.title()</code></a> method of strings is what you should use:</p>
<pre><code>&gt;&gt;&gt; s.title()
'"This Is Test", Please Tell Me.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't work because it is naive and is confused by the leading <code>"</code> which makes it think that <code>"This</code> does not begin with a letter.</p>
<p>Use the built-in string method <code>.title()</code> instead.</p>
<pre><code>&gt;&gt;&gt; '\"this is test\", please tell me.'.title()
'"This Is Test", Please Tell Me.'
</code></pre>
<p>This probably is the reason why <code>capwords()</code> remains in the <code>string</code> module but was never made a string method.</p>
</div>
<span class="comment-copy">The <code>string</code> module is a leftover from Python 1 and was made almost entirely obsolete when Python 2.0 introduced string methods. You almost <i>never</i> need to <code>import string</code>. I can think of only two exceptions: <code>maketrans()</code> (which I have used now and then) and the locale-dependent uppercase/lowercase stuff (which I have never used).</span>
<span class="comment-copy">Thanks guys. Using <code>.title()</code> solved the problem.</span>
<span class="comment-copy">I was just about to post the same thing :-D</span>
<span class="comment-copy">It turns out <a href="https://docs.python.org/release/2.1/lib/module-string.html" rel="nofollow noreferrer">string.capwords</a> has been a builtin forever, since 2.x. Rarely used.</span>
<span class="comment-copy">useful but will be fail where you do not wish to capitalise e.g. 123abc -&gt; 123Abc.</span>
<span class="comment-copy">Capitalization is about text, not about arbitrary strings. To work with those you need to write a function that does what you want.</span>
