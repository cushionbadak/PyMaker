<div class="post-text" itemprop="text">
<p>Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the <a href="https://docs.python.org/3.6/whatsnew/3.6.html#other-language-changes" rel="noreferrer">documentation</a>. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.</p>
<p>How does the new dictionary implementation perform better than the older one while preserving element order? </p>
<p>Here is the text from the documentation:</p>
<blockquote>
<p><code>dict()</code> now uses a “compact” representation <a href="https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html" rel="noreferrer">pioneered by PyPy</a>. The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5. <a href="https://www.python.org/dev/peps/pep-0468" rel="noreferrer">PEP 468</a> (Preserving the order of **kwargs in a function.) is implemented by this. The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5). (Contributed by INADA Naoki in <a href="https://bugs.python.org/issue27350" rel="noreferrer">issue 27350</a>. Idea <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">originally suggested by Raymond Hettinger</a>.)</p>
</blockquote>
<p>Update December 2017: <code>dict</code>s retaining insertion order is <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">guaranteed</a> for Python 3.7</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Are dictionaries ordered in Python 3.6+?</strong></p>
</blockquote>
<p>They are <strong>insertion ordered</strong><sup><strong>[1]</strong></sup>. As of Python 3.6, for the CPython implementation of Python, dictionaries <em>remember the order of items inserted</em>. <em>This is considered an implementation detail in Python 3.6</em>; you need to use <code>OrderedDict</code> if you want insertion ordering that's <em>guaranteed</em> across other implementations of Python (and other ordered behavior<sup><strong>[1]</strong></sup>).</p>
<p><strong>As of Python 3.7</strong>, this is no longer an implementation detail and instead becomes a language feature. <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">From a python-dev message by GvR</a>:</p>
<blockquote>
<p>Make it so. "Dict keeps insertion order" is the ruling. Thanks!</p>
</blockquote>
<p>This simply means that <em>you can depend on it</em>. Other implementations of Python must also offer an insertion ordered dictionary if they wish to be a conforming implementation of Python 3.7.</p>
<hr/>
<blockquote>
<p><strong>How does the Python <code>3.6</code> dictionary implementation perform better<sup>[2]</sup> than the older one while preserving element order?</strong></p>
</blockquote>
<p>Essentially, by <em>keeping two arrays</em>. </p>
<ul>
<li><p>The first array, <a href="https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551" rel="noreferrer"><code>dk_entries</code></a>, holds the entries (<a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4" rel="noreferrer">of type <code>PyDictKeyEntry</code></a>) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).</p></li>
<li><p>The second, <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70" rel="noreferrer"><code>dk_indices</code></a>, holds the indices for the <code>dk_entries</code> array (that is, values that indicate the position of the corresponding entry in <code>dk_entries</code>). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in <code>dk_indices</code> and the corresponding entry is fetched by indexing <code>dk_entries</code>. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64" rel="noreferrer"><code>int8_t</code></a>(<code>1</code> byte) to <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66" rel="noreferrer"><code>int32_t</code></a>/<a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68" rel="noreferrer"><code>int64_t</code></a> (<code>4</code>/<code>8</code> bytes) on <code>32</code>/<code>64</code> bit builds) </p></li>
</ul>
<p>In the previous implementation, a sparse array of type <code>PyDictKeyEntry</code> and size <code>dk_size</code> had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than <code>2/3 * dk_size</code> full <a href="https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375" rel="noreferrer">for performance reasons</a>. (and the empty space <em>still</em> had <code>PyDictKeyEntry</code> size!). </p>
<p>This is not the case now since only the <em>required</em> entries are stored (those that have been inserted) and a sparse array of type <code>intX_t</code> (<code>X</code> depending on dict size) <code>2/3 * dk_size</code>s full is kept. The empty space changed from type <code>PyDictKeyEntry</code> to <code>intX_t</code>. </p>
<p>So, obviously, creating a sparse array of type <code>PyDictKeyEntry</code> is much more memory demanding than a sparse array for storing <code>int</code>s.</p>
<p>You can see the full conversation <a href="https://mail.python.org/pipermail/python-dev/2016-September/146327.html" rel="noreferrer">on Python-Dev</a> regarding this feature if interested, it is a good read.</p>
<hr/>
<p><a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">In the original proposal made by Raymond Hettinger</a>, a visualization of the data structures used can be seen which captures the gist of the idea.</p>
<blockquote>
<p>For example, the dictionary:</p>
<pre><code>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}
</code></pre>
<p>is currently stored as:</p>
<pre><code>entries = [['--', '--', '--'],
           [-8522787127447073495, 'barry', 'green'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           [-9092791511155847987, 'timmy', 'red'],
           ['--', '--', '--'],
           [-6480567542315338377, 'guido', 'blue']]
</code></pre>
<p>Instead, the data should be organized as follows:</p>
<pre><code>indices =  [None, 1, None, None, None, 0, None, 2]
entries =  [[-9092791511155847987, 'timmy', 'red'],
            [-8522787127447073495, 'barry', 'green'],
            [-6480567542315338377, 'guido', 'blue']]
</code></pre>
</blockquote>
<p>As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it's really required, in the indices.</p>
<hr/>
<p><sub>
[1]: I say "insertion ordered" and not "ordered" since, with the existence of OrderedDict, "ordered" suggests further behavior that the <code>dict</code> object <em>doesn't provide</em>. OrderedDicts are reversible, provide order sensitive methods and, mainly, provide an order-sensive equality tests (<code>==</code>, <code>!=</code>). <code>dict</code>s currently don't offer any of those behaviors/methods.
</sub></p>
<hr/>
<p><sub>
[2]: The new dictionary implementations performs better <strong>memory wise</strong> by being designed more compactly; that's the main benefit here. Speed wise, the difference isn't so drastic, there's places where the new dict might introduce slight regressions (<a href="http://bugs.python.org/msg275587" rel="noreferrer">key-lookups, for example</a>) while in others (iteration and resizing come to mind) a performance boost should be present. 
</sub></p>
<p><sub>
Overall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.<br/>
</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Below is answering the original first question:</p>
<blockquote>
<p>Should I use <code>dict</code> or <code>OrderedDict</code> in Python 3.6?</p>
</blockquote>
<p>I think this sentence from the documentation is actually enough to answer your question</p>
<blockquote>
<p>The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon</p>
</blockquote>
<p><code>dict</code> is not explicitly meant to be an ordered collection, so if you want to stay consistent and not rely on a side effect of the new implementation you should stick with <code>OrderedDict</code>.</p>
<p>Make your code future proof :)</p>
<p>There's a debate about that <a href="https://news.ycombinator.com/item?id=12460936" rel="noreferrer">here</a>.</p>
<p>EDIT: <strong>Python 3.7 will keep this as a feature</strong> <a href="https://stackoverflow.com/a/47837132/1447525">see</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Update:
Guido van Rossum <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">announced on the mailing list</a> that as of Python 3.7 <code>dict</code>s in all Python implementations must preserve insertion order.</p>
</div>
<span class="comment-copy">See this thread on Python-Dev mailing-list : <a href="https://mail.python.org/pipermail/python-dev/2016-September/146327.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-dev/2016-September/146327.html</a> if you haven't seen it ; it's basically a discussion around these subjects.</span>
<span class="comment-copy">Notice that a long time ago (2003), Perl implementers decided to make hash tables (equivalent to Python dictionaries) not only explicitly unordered, but randomized for security reasons (<a href="http://perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks" rel="nofollow noreferrer">perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks</a>). So I would definitely not count on this "feature", because if experience of others may be a guide, it's probably deemed to be reversed at some point...</span>
<span class="comment-copy">If kwargs are now supposed to be ordered (which is nice idea) and kwargs are dict, not OrderedDict, then I guess one could assume that dict keys will stay ordered in the future version of Python, despite the documentation says otherwise.</span>
<span class="comment-copy">@DmitriySintsov No, don't make that assumption. This was an issue brought up during the writing of the PEP that defines order preserving feature of <code>**kwargs</code> and as such the wording used is diplomatic: <i><code>**kwargs</code> in a function signature is now guaranteed to be an insertion-order-preserving <b>mapping</b></i></span>
<span class="comment-copy">A good <a href="https://www.youtube.com/watch?v=p33CVV29OG8" rel="nofollow noreferrer">video explanation</a> from Raymond Hettinger</span>
<span class="comment-copy">So, what happens when an item is removed? is the <code>entries</code> list resized? or is a blank space kept? or is it compressed from time to time?</span>
<span class="comment-copy">@njzk2 When an item is removed, the corresponding index is replaced by <a href="https://github.com/python/cpython/blob/master/Objects/dict-common.h#L19" rel="nofollow noreferrer"><code>DKIX_DUMMY</code></a> with a value of <code>-2</code> and the entry in the <code>entry</code> array <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c#L1823" rel="nofollow noreferrer">replaced by <code>NULL</code></a>, when inserting is performed the new values are appended to the entries array, Haven't been able to discern yet, but pretty sure when the indices fills up beyond the <code>2/3</code> threshold resizing is performed. This can lead to shrinking instead of growing if many <code>DUMMY</code> entries exist.</span>
<span class="comment-copy">@Chris_Rands Nope, the only actual regression I've seen is on the tracker in a <a href="http://bugs.python.org/msg275587" rel="nofollow noreferrer">message by Victor</a>. Other than that microbenchmark, I've seen no other issue/message indicating a serious speed difference in real-life work loads. There's places where the new dict might introduce slight regressions (key-lookups, for example) while in others (iteration and resizing come to mind) a performance boost would be present.</span>
<span class="comment-copy"><i>Correction on the resizing part</i>: Dictionaries don't resize when you delete items, they re-calculate when you re-insert. So, if a dict is created with <code>d = {i:i for i in range(100)}</code> and you <code>.pop</code> all items w/o inserting, the size won't change. When you add to it again,  <code>d[1] = 1</code>, the appropriate size is calculated and the dict resizes.</span>
<span class="comment-copy">@Chris_Rands I'm pretty sure it is staying. The thing is, and the reason why I changed my answer to remove blanket statements about '<code>dict</code> being ordered', <code>dict</code>s aren't ordered in the sense <code>OrderedDict</code>s are.  The notable issue is equality. <code>dict</code>s have order insensitive <code>==</code>, <code>OrderedDict</code>s have order sensitive ones. Dumping <code>OrderedDict</code>s and changing <code>dicts</code> to now have order sensitive comparisons could lead to a lot of breakage in old code.  I'm guessing the only thing that might change about <code>OrderedDict</code>s is its implementation.</span>
<span class="comment-copy">Seems that if they didn't mean it to be a real feature but only an implementation detail then they shouldn't even put it into the documentation then.</span>
<span class="comment-copy">I'm not sure about your edit caveat; since the guarantee only applies for Python 3.7, I assume the advice for Python 3.6 is unchanged, i.e. dicts are ordered in CPython but don't count on it</span>
<span class="comment-copy">Now that key ordering is the official standard, what is the purpose of the OrderedDict? Or, is it now redundant?</span>
<span class="comment-copy">I guess OrderedDict will not be redundant because it has the <code>move_to_end</code> method and its equality is order sensitive: <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs.python.org/3/library/…</a>. See the note on Jim Fasarakis Hilliard's answer.</span>
<span class="comment-copy">@JonnyWaffles see Jim’s answer and this Q&amp;A <a href="https://stackoverflow.com/questions/50872498/will-ordereddict-become-redundant-in-python-3-7/" title="will ordereddict become redundant in python 3 7">stackoverflow.com/questions/50872498/…</a></span>
<span class="comment-copy">If you want your code to run the same on 2.7 and 3.6/3.7+, you need to use OrderedDict</span>
