<div class="post-text" itemprop="text">
<p>I'm trying to generate a JSON string using .format(). 
I tried the following:</p>
<pre><code>TODO_JSON = '{"id": {0},"title": {1},"completed:" {2}}'
print(TODO_JSON.format(42, 'Some Task', False))
</code></pre>
<p>which raises</p>
<pre><code>File "path/to/file", line 2, in &lt;module&gt;
    print(TODO_JSON.format(42, 'Some Task', False))
KeyError: '"id"'
</code></pre>
<p>Why is this error occurring ? Why is 'id' getting interpreted as a key and not as part of a string ? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>{}</code> has special meaning in <code>str.format</code> (place holder and variable name), if you need literal <code>{}</code> with <code>format</code>, you can use <code>{{</code> and <code>}}</code>:</p>
<pre><code>TODO_JSON = '{{"id": {0},"title": {1},"completed:" {2}}}'
print(TODO_JSON.format(42, 'Some Task', False))
# {"id": 42,"title": Some Task,"completed:" False}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>%</code> formatting style.</p>
<pre><code>TODO_JSON = '{"id": %i,"title": %s,"completed:" %s}'
print(TODO_JSON % (42, 'Some Task', False))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because it's trying to parse to outer <code>{}</code> that are part of the json formatting as something that should be formatted by <code>format</code></p>
<p>But you should try the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a> module</p>
<pre><code>import json
todo = {'id': 42, 'title': 'Some Task', 'completed': False}
TODO_JSON = json.dumps(todo)
</code></pre>
</div>
<span class="comment-copy">This is fine for learning, but I'd use the <code>json</code> module for practical work as it'll escape things for you.</span>
<span class="comment-copy">@NickT I was looking for a good reason to use the json module instead of a simple string â€“ you provide a good one.</span>
<span class="comment-copy">Thanks for your answer.</span>
<span class="comment-copy">My data comes in as a tuple from the database, so it's quire simple to just pass it in the string. What is the benefit of creating a dict and parsing it ?</span>
