<div class="post-text" itemprop="text">
<p>I would like to add a method to my enum.</p>
<pre><code>class Kerneltype(Enum):
    tube = 0
    subspace_KDE = 1
    deltashift = 2
    dist_sens_via_mass_1 = 3

    def aslist(self):
        return [self.tube, self.subspace_KDE, self.deltashift, self.dist_sens_via_mass_1]

    def fromint(self, int):
        return self.aslist()[int]
</code></pre>
<p>does not work. Instead of</p>
<pre><code>Kerneltype.aslist()
</code></pre>
<p>I currently have to do</p>
<pre><code>[kt[1] for kt in ob.Kerneltype.__members__.items()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You created an instance method, so <code>aslist</code> only exists on instances of <code>Kerneltype</code> (i.e. the enum members themselves). You need <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="noreferrer">a classmethod</a> instead:</p>
<pre><code>@classmethod
def aslist(cls):
    return [cls.tube, cls.subspace_KDE, cls.deltashift, cls.dist_sens_via_mass_1]
</code></pre>
<pre><code>&gt;&gt;&gt; Kerneltype.aslist()
[&lt;Kerneltype.tube: 0&gt;, &lt;Kerneltype.subspace_KDE: 1&gt;, &lt;Kerneltype.deltashift: 2&gt;, &lt;Kerneltype.dist_sens_via_mass_1: 3&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should be defining your methods with the <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer"><code>classmethod</code></a> decorator as you are calling them from the class and not the Enum member.</p>
<pre><code>@classmethod
def aslist(cls):
    return [cls.tube, cls.subspace_KDE, cls.deltashift, cls.dist_sens_via_mass_1]

@classmethod
def fromint(cls, int):
    return cls.aslist()[int]
</code></pre>
<hr/>
<p>As others have mentioned in comments, your <code>aslist()</code> method is not required and you can directly use <a href="https://docs.python.org/3/library/enum.html#iteration" rel="nofollow noreferrer"><code>list()</code> on it</a> and it by default preserves the order of definition. Only difference is that it doesn't return the aliases.</p>
<pre><code>&gt;&gt;&gt; list(Kerneltype)
[&lt;Kerneltype.tube: 0&gt;, &lt;Kerneltype.subspace_KDE: 1&gt;, &lt;Kerneltype.deltashift: 2&gt;, &lt;Kerneltype.dist_sens_via_mass_1: 3&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You missed the <a href="https://docs.python.org/3/library/functions.html?highlight=classmethod#classmethod" rel="nofollow noreferrer"><code>classmethod</code></a> decorator:</p>
<pre><code>@classmethod
def aslist(self):
    return [self.tube, self.subspace_KDE, self.deltashift, self.dist_sens_via_mass_1]
</code></pre>
</div>
<span class="comment-copy">"Doesn't work" is a very <i>vague</i> problem description. Please be more specific and provide us with any error messages you're getting.</span>
<span class="comment-copy">Note, your <code>aslist</code> method does not do anything that <code>list(Kerneltype)</code> would not give you automatically.</span>
<span class="comment-copy">The docs can be very helpful here; you don't need a method to <a href="https://docs.python.org/3/library/enum.html#iteration" rel="nofollow noreferrer">iterate over your enum</a> and you can access it by integer index by <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">calling it like a function</a>.</span>
<span class="comment-copy">@Ben The function call actually expects a value not index.</span>
<span class="comment-copy">@Ben That's working because the items in the Enum are also similar to indices, change <code>subspace_KDE</code> to say 5 and then try again.</span>
<span class="comment-copy">Every member is an instance of the Enum class, and instance methods do make sense (just not in this example).</span>
<span class="comment-copy">@EthanFurman I would love to know the use-cases.</span>
<span class="comment-copy">Fair enough, here's an example:  <a href="https://stackoverflow.com/a/22594360/208880">Python Enum, when and where to use?</a></span>
<span class="comment-copy">@EthanFurman Thanks, have updated my answer to remove the bit related to instantiation.</span>
<span class="comment-copy">I did a little more rewording -- hopefully you like it.  :)</span>
