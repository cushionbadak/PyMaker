<div class="post-text" itemprop="text">
<p>I'm trying to understand how Python's type annotations work (e.g. <code>List</code> and <code>Dict</code> - <em>not <code>list</code> or <code>dict</code></em>). Specifically I'm interested in how <code>isinstance(list(), List)</code> works, so that I can create my own custom annotations.</p>
<p>I see that <code>List</code> is defined as:</p>
<pre><code>class List(list, MutableSequence[T], extra=list):
    . . .
</code></pre>
<p>I'm familiar with <code>metaclass = xxx</code> but I can't find any documentation on this <code>extra = xxx</code>. Is this a keyword or just an argument, and if so, where does it come from and does it do what I'm after? Is it even relevant for <code>isinstance</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>isinstance()</code> and <code>issubclass()</code> have <em>hooks</em> in <a href="https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__" rel="noreferrer"><code>object.__instancecheck__()</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#class.__subclasscheck__" rel="noreferrer"><code>object.__subclasscheck__()</code></a> that the <code>typing</code> generics also use.</p>
<p>If you want to provide your own generics, you really want to study the <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/typing.py" rel="noreferrer"><code>typing</code> module source code</a>, specifically how <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/typing.py#L900-L1169" rel="noreferrer"><code>GenericMeta</code></a> and <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/typing.py#L1192-L1219" rel="noreferrer"><code>Generic</code></a> are used to define the other Generic types like <code>List</code>; mostly such checks are delegated to <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__" rel="noreferrer"><code>abc.ABCMeta.__subclasshook__</code></a>. You can define your own ABC with such a hook, then define a Generic that subclasses it. </p>
<p>It is the <code>GenericMeta</code> metaclass here that also gives the <code>extra</code> keyword argument meaning. Such internals are still sparsely documented because the <code>typing</code> implementation is still in flux, the module is still <a href="https://docs.python.org/3/glossary.html#term-provisional-api" rel="noreferrer"><em>provisional</em></a>. The <code>extra</code> argument is stored as <code>__extra__</code> and is used in a <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/typing.py#L859-L886" rel="noreferrer">custom <code>__subclasshook__</code> implementation</a>; for <code>extra=list</code> it simply comes down to translating <code>isinstance(something, List)</code> to <code>isinstance(something, list)</code>.</p>
<p>Note that support for run-time checks is deliberately limited; static type checkers will not actually run those hooks. See the <a href="https://github.com/python/typing/issues/11" rel="noreferrer">structural subtyping discussion</a> in the mypy tracker for further discussion on how the developers are thinking about how to provide better support for complex custom classes that may or may not implement enough methods to be deemed a <em>mapping</em> or a <em>sequence</em> or similar.</p>
</div>
<span class="comment-copy">The fact that it isn't documented either means that a) It isn't part of the public API or b) it was forgotten; I'm leaning towards the first here. Looking at the source for <code>typing</code> you can see that <code>extra</code> is used to, and I quote: "Construct a <code>__subclasshook__</code> callable that incorporates the associated <code>__extra__</code> class in subclass checks performed against <code>cls</code>."</span>
<span class="comment-copy">As an aside, your title and question don't <i>really</i> match. It seems like your question really involves what <code>extra</code>s role is in <code>isinstance</code> and not how <code>isinstance</code>, in the broad sense, works.</span>
