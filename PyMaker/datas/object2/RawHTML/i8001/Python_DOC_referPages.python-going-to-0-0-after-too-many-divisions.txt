<div class="post-text" itemprop="text">
<p>So, I have the following code:</p>
<pre><code>    half= 1/2.0
    print(half)
    for x in range(1,1075):
        half=half/2.0
        print(half)
</code></pre>
<p>But right at the last part of the loop, python decides that half is now 0.0</p>
<pre><code>    1.265e-321
    6.3e-322
    3.16e-322
    1.6e-322
    8e-323
    4e-323
    2e-323
    1e-323
    5e-324
    0.0
</code></pre>
<p>Did I reach python's limit? Do I need to install a package to go farther? I'm not sure why this is happening, but I'm assuming that python just reached  limit</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TLDR</strong>: try <a href="https://docs.python.org/3.6/library/fractions.html#fractions.Fraction" rel="nofollow noreferrer">Fraction</a></p>
<pre><code>half = Fraction(1, 2)
for x in range(1, 1075):
    half = half / 2
    print(half)
</code></pre>
<p>will give</p>
<pre><code>1/4
1/8
...
1/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784
1/404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568
</code></pre>
<hr/>
<p>You can find out the smallest available positive <code>float</code> with</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.float_info.min
2.2250738585072014e-308
</code></pre>
<p>then following your example we will find that</p>
<pre><code>&gt;&gt;&gt; 2 * sys.float_info.min &gt; pow(2, -1074)
True
</code></pre>
<p>i.e. next division by 2 seems to be less than smallest available positive <code>float</code>.</p>
<p>Btw their difference is equal to</p>
<pre><code>&gt;&gt;&gt; diff = 2 * sys.float_info.min - pow(2, -1074)
&gt;&gt;&gt; diff
4.4501477170144023e-308
</code></pre>
<p>but it is interesting that</p>
<pre><code>&gt;&gt;&gt; diff == 2 * sys.float_info.min
False
</code></pre>
<p>while</p>
<pre><code>&gt;&gt;&gt; diff / 2 == sys.float_info.min
True
</code></pre>
<hr/>
<p><strong>P. S.</strong>: dividing <code>Fraction</code> objects by <code>float</code>s will give us <code>float</code></p>
<pre><code>&gt;&gt;&gt; half = Fraction(1, 2)
&gt;&gt;&gt; half = half / 2.0
&gt;&gt;&gt; type(half)
&lt;class 'float'&gt;
</code></pre>
<p>so your code with dividing by <code>2.0</code> will give the same result and for correct working with <code>Fraction</code>s you should add/subtract/divide/multiply it with <code>int</code>s or other <code>Fraction</code>s like</p>
<pre><code>half = Fraction(1, 2)
for x in range(1, 1075):
    half = half / Fraction(2.0)
    print(half)
</code></pre>
<hr/>
<p><strong>P. P. S.</strong>: there is a <a href="https://stackoverflow.com/a/5893946/5997596">convention</a> about using underscore as a name for unused object, so it will be better to write</p>
<pre><code>half = Fraction(1, 2)
for _ in range(1, 1075):
    half = half / 2
    print(half)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, essentially, you have reached the Python's limit. The decimals lose precision as you go on.</p>
<p>One possible way would be to use the <a href="https://docs.python.org/3.6/library/fractions.html#fractions.Fraction" rel="nofollow noreferrer">Fraction</a> class, as suggested by Azat.</p>
<p>However, you can also use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal</a> class.</p>
<p>Here is the example provided on the page linked above. This treats the number as an object and not as a primitive/built-in variable:</p>
<pre><code>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 6
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.142857')
&gt;&gt;&gt; getcontext().prec = 28
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
</code></pre>
<p><code>getcontext().prec = 6</code> line is the one that sets the precision. You can change the number <code>6</code> to whatever you need.</p>
<p>Usually, the precision to 324th decimal place (as in your example) is not necessary, so Python only stores a few digits as <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">binary fractions</a>. Using the Fraction or the Decimal classes allows you to extend the functionality, but it can also slow down the code significantly if you use it repetitively (in loops for example).</p>
</div>
<span class="comment-copy">Have you read this tutorial on numeric representation in python? <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">Yep, you reached python's limit; the reasons behind it have to do with the traditional limits of floating-point arithmetic. If you want to go "deeper", I suggest you explore packages that are specifically built to deal with arbitrary precision, like <a href="http://mpmath.org/" rel="nofollow noreferrer">mpmath.org</a></span>
