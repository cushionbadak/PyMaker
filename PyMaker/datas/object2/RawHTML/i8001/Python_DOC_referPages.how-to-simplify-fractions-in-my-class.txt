<div class="post-text" itemprop="text">
<p>This is my code for class <code>Fraction</code>:</p>
<pre><code>class Fraction:
    """Class for performing fraction arithmetic.
    Each Fraction has two attributes: a numerator, n and a deconominator, d.
    Both must be integer and the deonominator cannot be zero.
    """
    def __init__(self,n,d):
        """Performs error checking and standardises to ensure denominator is positive"""
        if type(n)!=int or type(d)!=int:
            raise TypeError("n and d must be integers")
        if d==0:
            raise ValueError("d must be positive")
        elif d&lt;0:
            self.n = -n
            self.d = -d
        else:
            self.n = n
            self.d = d

    def __str__(self):
        """Gives string representation of Fraction (so we can use print)"""
        return(str(self.n) + "/" + str(self.d))

    def __add__(self, otherFrac):
        """Produces new Fraction for the sum of two Fractions"""
        newN = self.n*otherFrac.d + self.d*otherFrac.n
        newD = self.d*otherFrac.d
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __sub__(self, otherFrac):
        """Produces new Fraction for the difference between two Fractions"""
        newN = self.n*otherFrac.d - self.d*otherFrac.n
        newD = self.d*otherFrac.d
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __mul__(self, otherFrac):
        """Produces new Fraction for the product of two Fractions"""
        newN = self.n*otherFrac.n
        newD = self.d*otherFrac.d
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __truediv__(self, otherFrac):
        """Produces new Fraction for the quotient of two Fractions"""
        newN = self.n*otherFrac.d
        newD = self.d*otherFrac.n
        newFrac = Fraction(newN, newD)
        return(newFrac)

    def __eq__(self,otherFrac):
        return(self.n * otherFrac.d) == (self.d * otherFrac.n)
</code></pre>
<p>To make the class more useful, how can I simplify the fraction?</p>
<p>For example: I want to change 30/15 into 5/3? It looks like:<br/>
(30/2)/(18/2) ---&gt; 15/9 -----&gt; (15/3)/(9/3) -----&gt; 5/3</p>
<p>And I not use <code>import fraction</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to find the <em>greatest common divisor</em> of the numerator and the denominator and divide both by that. The <a href="https://docs.python.org/3/library/math.html#math.gcd" rel="nofollow noreferrer"><code>gcd</code> function</a> is in Python's standard library, but you might want to implement it yourself. One famous (and easy to implement) algorithm to find it is called <a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" rel="nofollow noreferrer">Euclid's algorithm</a>.</p>
<p>You can implement Euclid's algorithm by subtracting your two numbers to get a third number (the difference), then discarding the biggest number of the three and repeating this subtraction/discard process until one of your numbers is zero.</p>
<p>By the way, 30/15 reduced is 2/1.</p>
<p>To take your example (30/15)</p>
<p>30 - 15 = 15</p>
<p>Now you have 3 numbers (30, 15, 15). Discard the largest and repeat.</p>
<p>15 - 15 = 0</p>
<p>Now you have 3 smaller numbers (15, 15, 0).</p>
<p>15 - 0 = 15</p>
<p>Because that didn't change the set of numbers, you can conclude that 15 is your greatest common divisor. (and if you divide both 30 and 15 by 15, you get 2 and one, which is your reduced fraction's numerator and denominator.</p>
</div>
<span class="comment-copy">To simplify fractions you need to use find the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor" rel="nofollow noreferrer"><b><i>greatest common divisor</i></b></a> of the the fraction's numerator and denominator and then divide both of them by it. This should be repeated until the GCD of the two numbers is 1.</span>
<span class="comment-copy">Yea I knew it. But I want to know how to do it in pythen</span>
<span class="comment-copy">@koko If you understand the algorithm, what's stopping you from translating it into code? You need to specify things like that in your question.</span>
<span class="comment-copy">But how can I do it in code which calculate automatically?</span>
<span class="comment-copy">Google "python gcd function" and you'll find lots of implementations. It's more fun to stare at it for a while and figure it out though :)</span>
<span class="comment-copy">Once you have a gcd function, add a <code>reduce</code> method to class that simply replaces <code>self.n</code> and <code>self.d</code> with <code>self.n / gcd(self.n, self.d)</code> and <code>self.d / gcd(self.n, self.d)</code> and call that method at the end of  <code>__init__</code>, and whatever else changes the numerator or denominator. You shouldn't need it at the end of <code>__add__</code> and friends because they already return a new fraction so the <code>__init__</code> case will catch them</span>
