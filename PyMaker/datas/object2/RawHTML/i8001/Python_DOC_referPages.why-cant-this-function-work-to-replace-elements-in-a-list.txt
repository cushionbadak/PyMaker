<div class="post-text" itemprop="text">
<p>Trying to change all 5's into 100's. I know you should use list comprehension but why doesn't this work? Someone can explain theoretically? Thank you.</p>
<pre><code>d = [5,1,1,1,5]

def f1(seq):
    for i in seq:
        if i==5:
            i = 100
    return seq

print (f1(d))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python assignment operator binds a value to a name. Your loop <code>for i in seq</code> binds a value from <code>seq</code> to the local name <code>i</code> on every iteration. <code>i = 100</code> then binds the value <code>100</code> to <code>i</code>. This does not affect the original sequence, and the binding will be changed again in the next iteration of the loop.</p>
<p>You can use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to list the indices along with the values of <code>seq</code> and perform the binding that way:</p>
<pre><code>def f1(seq):
    for n, i in enumerate(seq):
        if i == 5:
            seq[n] = 100
    return seq
</code></pre>
<p>Even simpler may be to just iterate over the indices:</p>
<pre><code>def f2(seq):
    for n in range(len(seq)):
        if seq[n] == 5:
            seq[n] = 100
    return seq
</code></pre>
<p>The options shown above will modify the sequence in-place. You do not need to return it except for convenience. There are also options for creating a new sequence based on the old one. You can then rebind the variable <code>d</code> to point to the new sequence and drop the old one.</p>
<p>The easiest and probably most Pythonic method would be using a list comprehension:</p>
<pre><code>d = [5, 1, 1, 1, 5]
d = [100 if x == 5 else x for x in d]
</code></pre>
<p>You can also use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>d = list(map(lambda x: 100 if x == 5 else x, d))
</code></pre>
<p>The output of <code>map</code> is a generator, so I have wrapped it in <code>list</code> to retain the same output type. This would not be necessary in Python 2, where <code>map</code> already returns a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>This line: </p>
<pre><code>i = 100
</code></pre>
<p>Gives the local variable <code>i</code>, which was originally assigned that value in <code>seq</code>,  the value <code>100</code>.</p>
<p>To change the value in the sequence, you could do:</p>
<pre><code>for index, object in enumerate(seq):
    if object == 5:
        seq[index] = 100
</code></pre>
<p>Enumerate returns two objects each time it is  called on a sequence, the index as a number, and the object itself.</p>
<p>See the docs on lists and (Python 2) <a href="https://docs.python.org/2/library/functions.html" rel="nofollow noreferrer">enumerate</a>.</p>
<p>You could have also written:</p>
<pre><code>for index in range(len(seq)):
    if seq[index] == 5:
        seq[index] = 100
</code></pre>
<p>Which you may prefer, but is sometimes considered less clean.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take the following example:</p>
<pre><code>def f1(seq):
    for i in seq:
        if i==5:
            i = 100
        # at this point (assuming i was 5), i = 100 but seq is still [3,5,7]
        # because i is not a reference to the item but the value *copied* from the list
    ...
f1([3,5,7])
</code></pre>
<p>You could instead loop through the indices and set the value at that index in the list:</p>
<pre><code>d = [5,1,1,1,5]

def f1(seq):
    for i in range(len(seq)):
        if seq[i]==5:
            seq[i] = 100
    return seq

print(f1(d))
# [100,1,1,1,100]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should update the element at the list, like that:</p>
<pre><code>def f1(seq):
    for i in range(len(seq)): # run through the indexes of the list
        if seq[i]==5: # check whether seq at index i is 5
            seq[i] = 100 # update the list at the same index to 100

    return seq
</code></pre>
<p><code>i</code> is a new variable created inside the loop, therefore it's not the same reference as the element inside the list.</p>
<p><strong>NOTE:</strong> </p>
<p>Note that list is a mutable object, therefore changing seq inside the function will affect the list even outside the function.</p>
<p>You can read more about mutable and immutable in <a href="https://stackoverflow.com/questions/8056130/immutable-vs-mutable-types">here</a></p>
</div>
<span class="comment-copy"><code>i</code> has the same value as an item in the sequence. But it's a separate variable. Reassigning it doesn't affect the sequence.</span>
<span class="comment-copy">i is the copy not actual item</span>
<span class="comment-copy">@VazgenTorosyan. <code>i</code> is not a copy, it is a reference to the original item, but it has nothing to do with the list.</span>
<span class="comment-copy">@MadPhysicist So <code>i</code> has a different id than the item in the list?</span>
<span class="comment-copy">@MrSoLoDoLo <code>i</code> initially has the same <code>id</code> as the item in the list. But when you say, <code>i = 100</code>, it will now point <code>i</code> to a different object (an <code>int</code> with a value of 100). The reference in the list will still be pointing to the <code>int</code> with value 5 it was pointing to originally though.</span>
<span class="comment-copy">Good job on resuscitating your answer :)</span>
<span class="comment-copy">Yeap, I was confused before.. well, it's a long day :) @MadPhysicist</span>
