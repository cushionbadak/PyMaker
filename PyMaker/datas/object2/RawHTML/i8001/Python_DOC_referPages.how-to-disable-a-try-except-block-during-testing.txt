<div class="post-text" itemprop="text">
<p>I wrote a cronjob that iterates through a list of accounts and performs some web call for them (shown below):</p>
<pre><code>for account in self.ActiveAccountFactory():
  try:
    self.logger.debug('Updating %s', account.login)
    self.update_account_from_fb(account)
    self.check_balances()
    self.check_rois()
  except Exception,e:
    self.logger.exception(traceback.format_exc())
</code></pre>
<p>Because this job is run by heroku one every 10 minutes, I do not want the entire job to fail just because one account is running into issues (it happens). I placed a try catch clause here so that this task is "fault-tolerant".</p>
<p>However, I noticed that when I am testing, this try/catch block is giving me cryptic problems because of the task is allowed to continue executing even though there is some serious error. </p>
<p>What is the best way to disable a try/except block during testing? </p>
<p>I've though about implementing the code directly like this:</p>
<pre><code>for account in self.ActiveAccountFactory():
    self.logger.debug('Updating %s', account.login)
    self.update_account_from_fb(account)
    self.check_balances()
    self.check_rois()
    self.logger.exception(traceback.format_exc())
</code></pre>
<p>in my test cases but then this makes my tests very clumsy as I am copying large amounts of code over. </p>
<p>What should I do? </p>
</div>
<div class="post-text" itemprop="text">
<p>First of all: don't swallow all exceptions using <code>except Exception</code>. It's bad design. So cut it out. </p>
<p>With that out of the way: </p>
<p>One thing you could do is setup a monkeypatch for the <code>logger.exception</code> method. Then you can handle the test however you see fit based on whether it was called, whether it's creating a mock logger, or a separate testing logger, or a custom testing logger class that stops the tests when certain exceptions occur. You could even choose to end the testing immediately by raising an error. </p>
<p>Here is an example using <a href="https://docs.pytest.org/en/latest/monkeypatch.html" rel="nofollow noreferrer"><code>pytest.monkeypatch</code></a>. I like <code>pytest</code>'s way of doing this because they already have a predefined fixture setup for it, and no boilerplate code is required. However, there are others ways to do this as well (such as using <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>unittest.mock.patch</code></a> as part of the <a href="http://simeonvisser.com/posts/how-to-mock-logging-in-python.html" rel="nofollow noreferrer"><code>unitest</code> module</a>).  </p>
<p>I will call your class <code>SomeClass</code>. What we will do is create a patched version of your <code>SomeClass</code> object as a fixture. The patched version will not log to the logger; instead, it will have a mock logger. Anything that happens to the logger will be recorded in the mock logger for inspection later. </p>
<pre><code>import pytest
import unittest.mock as mock # import mock for Python 2

@pytest.fixture
def SomeClassObj_with_patched_logger(monkeypatch):
    ##### SETUP PHASE ####
    # create a basic mock logger: 
    mock_logger = mock.Mock(spec=LoggerClass)
    # patch the 'logger' attribute so that when it is called on 
    # 'some_class_instance' (which is bound to 'self' in the method)
    # things are re-routed to mock_logger
    monkeypatch.setattr('some_class_instance.logger', mock_logger)
    # now create class instance you will test with the same name
    # as the patched object
    some_class_instance = SomeClass()
    # the class object you created will now be patched
    # we can now send that patched object to any test we want
    # using the standard pytest fixture way of doing things
    yield some_class_instance
    ###### TEARDOWN PHASE #######
    # after all tests have been run, we can inspect what happened to
    # the mock logger like so: 
    print('\n#### ', mock_logger.method_calls)        
</code></pre>
<p>If <code>call.exception</code> appears in the method calls of the mock logger, you know that method was called. There are a lot of other ways you could handle this as well, this is just one. </p>
<p>If you're using the <code>logging</code> module, <code>LoggerClass</code> should just be <code>logging.Logger</code>. Alternatively, you can just do <code>mock_logger = mock.Mock()</code>. Or, you could create your own custom testing logger class that raises an exception when its <code>exception</code> method is called. The sky is the limit! </p>
<p>Use your patched object in any test like so: </p>
<pre><code>def test_something(SomeClassObj_with_patched_logger):
    # no need to do the line below really, just getting
    # a shorter variable name
    my_obj = SomeClassObj_with_patched_logger
    #### DO STUFF WITH my_obj #####
</code></pre>
<p>If you are not familiar with <code>pytest</code>, see <a href="https://youtu.be/RcN26hznmk4?t=2079" rel="nofollow noreferrer">this training video</a> for a little bit more in depth information. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>try...except</code> blocks are difficult when you are testing because they catch and try to dispose of errors you would really rather see. As you have found out. While testing, for </p>
<pre><code>except Exception as e:
</code></pre>
<p>(don't use <code>Exception,e</code>, it's not forward-compatible) substitute an exception type that is really unlikely to occur in your circumstances, such as </p>
<pre><code>except AssertionError as e:
</code></pre>
<p>A text editor will do this for you (and reverse it afterwards) at the cost of a couple of mouse-clicks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make callables test-aware by add a <code>_testing=False</code> parameter.  Use that to code alternate pathways in the callable for when testing.  Then pass _testing=True when calling from a test file.</p>
<p>For the situation presented in this question, putting <code>if _testing: raise</code> in the exception body would 'uncatch' the exception.</p>
<p>Conditioning module level code is tricker.  To get special behavior when testing module <code>mod</code> in package <code>pack</code>, I put </p>
<pre><code>_testing = False  # in `pack.__init__`

from pack import _testing  # in pack.mod
</code></pre>
<p>Then <code>test_mod</code> I put something like:</p>
<pre><code>import pack
pack._testing = True
from pack import mod
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/756180/pylint-warning-on-except-exception" title="pylint warning on except exception">stackoverflow.com/questions/756180/â€¦</a></span>
<span class="comment-copy">Don't use blanket <code>except Exception</code>. Put proper exception handling in your code in the right places.</span>
<span class="comment-copy">Add a simple <code>raise</code> to the <code>except</code> block to re-raise the original exception.</span>
