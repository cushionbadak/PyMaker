<div class="post-text" itemprop="text">
<p>I am trying to initialize a long string value to a variable, but this string has a word that can not be constant, like this example. </p>
<p>Say I want to store a string like this. </p>
<pre><code>str = "https://stackoverflow.com/users/7833397/meskerem" 
</code></pre>
<p>But assume the  number 7833397 will change over time, so I am trying to find a way to store the string while making making a wildcard for the number. But I am not sure if this can be done in Python</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="noreferrer"><code>format</code></a> method.</p>
<pre><code>template = "https://stackoverflow.com/users/{0}/meskerem"

# Lots of stuff happens here

url = template.format("7833397")
</code></pre>
<p>The <code>format</code> method supports its own little mini language, and depending on your use-case you may find it more intuitive to name the various parts of your template, too:</p>
<pre><code>template = "https://stackoverflow.com/users/{id}/{username}"

# Lots of stuff happens here

url = template.format(id="7833397", username="meskerem")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, avoid usign the identifier <code>str</code>. Second, you can put placeholders in strings using two methods of string formatting:</p>
<h3>Old style</h3>
<p>The "old" style uses C-style string formatting syntax, and "modulo" operation on the string to do the actual insertion. You can pass multiple replacements as a tuple:</p>
<pre><code>s = "foo%sbaz" # expects a string
print(s%"bar")
s2 = "foo%s%d"
print(s2%("bar", 2))
</code></pre>
<h3><a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">New style</a></h3>
<p>The "new" style uses a generic <code>{}</code> which can be filled using the <code>str.format()</code> method. Multiple replacements are passed as a unzipped tuple, i.e. as mutiple arguments:</p>
<pre><code>s = "foo{}baz" # can be "anything"
print(s.format("bar"))
s2 = "foo{}{}"
print(s2.format("bar", 2))
</code></pre>
<p><a href="https://pyformat.info/" rel="nofollow noreferrer">This site</a> might come handy as a reference.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use '%s'(string formatting syntax )</p>
<pre><code>modified_str = "https://stackoverflow.com/users/%s/meskerem" % (number,)
</code></pre>
</div>
<span class="comment-copy">you should avoid names of built-ins for your objects</span>
<span class="comment-copy">Strings in python are <i>immutable</i>, i.e. they cannot be changed, they are read-only.  So there is very little point in trying to do what you say - you will have to create a new string object regardless.  You might use a list instead, <code>join</code> the elements together when you need the string.</span>
<span class="comment-copy">@cdarke Not sure about this, but isn't  there a sprintf() function somewhere? I also saw something like <code>foobar%s % ($val)</code>  some time ago but not sure how to use it</span>
<span class="comment-copy">@Gahan Yes, actually. I get the data in json format, but the number must change overtime</span>
<span class="comment-copy">Yes there is more than one way, there is also a <code>format</code> method, but these both create a new string object, they don't alter an existing one.</span>
<span class="comment-copy">A previous commenter commented about f-strings, which can be used since Python 3.6: <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">docs.python.org/3/whatsnew/â€¦</a></span>
<span class="comment-copy">alternatively <code>"https://stackoverflow.com/users/{}/meskerem".format(number)</code> or <code>f"https://stackoverflow.com/users/{number}/meskerem"</code> is also good choice</span>
<span class="comment-copy">@Gahan yes, on Python 3.6 f-strings are the way to go if used thoughtfully.</span>
<span class="comment-copy">Please don't perpetuate the mistake of using <code>str =</code></span>
