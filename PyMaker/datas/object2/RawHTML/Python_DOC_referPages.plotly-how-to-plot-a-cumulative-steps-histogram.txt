<div class="post-text" itemprop="text">
<p>I am trying to plot a cumulative histogram using Plotly in python, but make it look like "steps", i.e. bars with no color and only the top line is displayed. Something like this:  </p>
<p><a href="https://i.stack.imgur.com/2CDWs.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2CDWs.jpg"/></a></p>
<p>Basically, I'm trying to reproduce the behavior of the following matplotlib code:</p>
<pre><code>import matplotlib.pyplot as plt
plt.hist(x, cumulative=True, histtype='step')
</code></pre>
<p>So far, the best I've been able to do is:</p>
<pre><code>import plotly.graph_objs as go
from plotly.offline import iplot
h = go.Histogram(x=x,
                         cumulative=dict(enabled=True),
                         marker=dict(color="rgba(0,0,0,0)",
                                     line=dict(color="red", width=1)))
iplot([h])
</code></pre>
<p>Which results in something like:<br/>
<a href="https://i.stack.imgur.com/ZTXNe.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ZTXNe.jpg"/></a></p>
<p>So what's the trick?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're willing to handle the binning and accumulation <em>before</em> you plot the data, you can use a <code>go.Scatter</code> object with the shape property of the line set to <code>'hvh'</code>.</p>
<p><strong>Plot:</strong></p>
<p><a href="https://i.stack.imgur.com/dZfrX.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dZfrX.png"/></a></p>
<p><strong>Code:</strong> Setup for a Jupyter Notebook</p>
<pre><code>#imports
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

import numpy as np
import pandas as pd

# qtconsole for debugginh
#%qtconsole -- style vim

# Notebook settings
init_notebook_mode(connected=True)

# Some sample data
x = np.random.normal(50, 5, 500)
binned = np.histogram(x, bins=25, density=True)
plot_y = np.cumsum(binned[0])

# Line
trace1 = go.Scatter(
    x=binned[1],
    y=plot_y,
    mode='lines',
    name="X",
    hoverinfo='all',
    line=dict(color = 'rgb(1255, 0, 0)', shape='hvh'
    )
)

data = [trace1]

# Layout
layout = dict(title = 'Binned data from normal distribution',
    legend=dict(
        y=0.5,
        traceorder='reversed',
        font=dict(
            size=16
        )
    )
)

# Make figure
fig = dict(data=data, layout=layout)

# Plot
iplot(fig, filename='line-shapes')
</code></pre>
<p>I hope this is something you can use!</p>
<p>Don't hesitate to let me know if not.</p>
<p><strong>Some details:</strong></p>
<p>The data sample is made using <code>np.random.normal()</code>. <code>x</code> is a sampled normal distribution  with mean = 50, sigma = 5 and 500 observations. <code>x</code> is then put in 50 bins using <code>np.histogram()</code> which returns two arrays. These are used as data source for the plot.</p>
<p><strong>Possible alternative approaches:</strong></p>
<p>I also tried using your snippet with some random sample data and include <code>shape='hvh'</code> in your <code>line=dict(color="red", width=1)</code>. That did not seem to work though. I also considered modifying the layout of your <code>go.Histogram()</code> so that only the top line of the bars were plotted, but I don't think it's possible.</p>
</div>
