<div class="post-text" itemprop="text">
<p>I have a file that looks like</p>
<pre><code>device1.dev:manf:up
device2.dev:manf:up
device3.dev:manf:up
device4.dev:manf:up
device5.dev:manf:down
</code></pre>
<p>I'm trying to create a dictionary holding the device name and status. At the minute my code looks like</p>
<pre><code>        with open(r_file) as f:
            devices = (i.split(":")[0].split(".")[0] for i in f)
</code></pre>
<p>This gets me all the devices. I can also easily do </p>
<pre><code>with open(r_file) as f:
            devices = (i.split(":")[2] for i in f)
</code></pre>
<p>to get the status, but </p>
<pre><code>devices = {i.split(":")[0].split(".")[0] for i in f:i.split(":")[2] for i in f}
</code></pre>
<p>returns invalid syntax.</p>
<p>Is there a good way to do achieve a dictionary of </p>
<pre><code>{device1:up, device2:up, device3:up, device4:up, device5:down}
</code></pre>
<p>that I'm missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me given your example data and desired results.</p>
<pre><code>with open(r_file, 'r') as f:
    devices = {i.split('.', 1)[0]: i.rsplit(':', 1)[-1].strip() for i in f.readlines()}
</code></pre>
<p>Note that using <code>rsplit()</code> to get the status allows you to grab just the stuff you want from the right end of the string.  Also, I used <code>strip()</code> to remove the newlines.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd say to use <code>re.split()</code> but keep it simple:</p>
<pre><code>import re

with open(r_file) as source:
    devices = dict(re.split(r"\..*:", line.rstrip()) for line in source)

print(devices)
</code></pre>
<p>OUTPUT</p>
<pre><code>% python3 test.py
{'device1': 'up', 'device2': 'up', 'device3': 'up', 'device4': 'up', 'device5': 'down'}
%
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternative solution with <code>re.search()</code> function:</p>
<pre><code>import re

with open(r_file) as f:
    pat = re.compile(r'^([^.]+).+?([^:]+)$')
    devices = dict(pat.search(r).groups() for r in f.read().splitlines())

print(devices)
</code></pre>
<p>The output:</p>
<pre><code>{'device1': 'up', 'device2': 'up', 'device3': 'up', 'device4': 'up', 'device5': 'down'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split on multiple delimiters by replacing one delimiter with another before using Python's <code>str.split</code>:</p>
<pre><code>with open(r_file) as f:
    devices = dict(i.rstrip().replace('.', ':').split(':')[::3] for i in f)
</code></pre>
<p>or you can use a regular expression (the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> module</a>):</p>
<pre><code>with open(r_file) as f:
    devices = dict(re.match('(.*)\..*:(.*)', i).groups() for i in f)
</code></pre>
<p>Both return:</p>
<pre><code>{'device1': 'up',
 'device2': 'up',
 'device3': 'up',
 'device4': 'up',
 'device5': 'down'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re</code>:</p>
<pre><code>import re
final_data = dict([re.sub('\.[a-zA-Z:]+:', ' ', i).split() for i in open('filename.txt')])
</code></pre>
<p>Output:</p>
<pre><code>{'device5': 'down', 'device4': 'up', 'device1': 'up', 'device3': 'up', 'device2': 'up'}
</code></pre>
</div>
<span class="comment-copy">Your first example needs to <code>*strip()</code> the data as it's producing output like, <code>{'device1': 'up\n', ...</code> for me.</span>
