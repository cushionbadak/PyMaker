<div class="post-text" itemprop="text">
<p>For this code when I change <code>x</code> to <code>k</code> using <code>change()</code> and then call <code>self.co</code> it does not return the updated value of <code>self.x</code>. How do I fix this kind of problem generally (this is a basic example)? </p>
<pre><code>class scope:
    tag=1
    def __init__(self,h,x):
        self.h = h
        self.x = x
        self.co=(self.x,self.h)
    def change(self,k):
        self.x=k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You did not change the <code>self.co attribute</code>. You are assigning to <code>self.co</code> only when initialization of <code>scope</code> occurs, that is, when you call <code>scope()</code>.Also Python doesn't keep references like pointers in c so changing one would not change the other. </p>
<p>To prove this run this code:</p>
<pre><code>class scope:
    tag=1
    def __init__(self,h,x):
        self.h = h
        self.x = x
        self.co=(self.x,self.h)
    def change(self,k):
        self.x=k

s = scope(2,3)
print(s.co)
print("id of self.x before change:", id(s.x)) #11161896
print("id of self.co's x before change:", id(s.co[0])) #11161896
s.change(6)
print(s.co)
print("id of self.x after change:", id(s.x))  #11161824
print("id of self.co's x after change:", id(s.co[0])) #11161896
</code></pre>
<p>The id are the memory location of the object, and you can see it first starts out the same, but then when you change <code>self.x</code> the memory location in the <code>co</code> doesn't change</p>
<p>You have to update <code>self.co</code> in your <code>change()</code>. If you want a dynamically changing co without manually updating it, write a method to retrieve co.</p>
<p>Option 1:</p>
<pre><code>class scope:
    tag=1
    def __init__(self,h,x):
        self.h = h
        self.x = x
        self.co=(self.x,self.h)
    def change(self,k):
        self.x=k 
        self.co = (self.x,self.h)
</code></pre>
<p>Option 2: </p>
<pre><code>class scope:
    tag=1
    def __init__(self,h,x):
        self.h = h
        self.x = x
    def change(self,k):
        self.x=k
    def co(self):
        return (self.x,self.h)

s = scope(2,3)
print(s.co()) #(3,2)
s.change(6)
print(s.co()) #(6,2)
</code></pre>
<p>You can add to method 2 with a decorator <code>@property</code> to not make it a function call but at this point, I have no idea what your requirements are.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should define <code>self.co</code> as <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><em>property</em></a> of class via using <code>@property</code> decorator. For example:</p>
<pre><code>class Scope:
    tag=1
    def __init__(self,h,x):
        self.h = h
        self.x = x
    def change(self,k):
        self.x=k
    @property
    def co(self):
        return (self.x, self.h)
</code></pre>
<p>Sample Run:</p>
<pre><code>&gt;&gt;&gt; s = Scope(3, 5)
&gt;&gt;&gt; s.co   # initial value
(5, 3)
&gt;&gt;&gt; s.change(45)  # update value of `self.x`
&gt;&gt;&gt; s.co   # updated value
(45, 3)
</code></pre>
<p>Here, on calling <code>self.co</code> will return the dynamic value of <code>(self.x, self.y)</code> each time is called.</p>
<hr/>
<p><strong>Issue with your code:</strong> In your code, when you initialized <code>self.co = (self.x,self.h)</code> in your <code>__init__</code>, a new tuple <code>self.co</code> was created holding the value of <code>(self.x, self.y)</code> <em>(which was not holding the reference to these variable)</em>. Hence, when you updated <code>self.x</code>, it was not updated in your tuple object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to call function with the name it is defined
Second you can use global keyword also
For example</p>
<pre><code>value = 10
Update()
def Update():
    global value
    value = 11
</code></pre>
</div>
