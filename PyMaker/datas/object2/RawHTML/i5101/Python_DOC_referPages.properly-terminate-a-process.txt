<div class="post-text" itemprop="text">
<p>I have a subclass of <code>multiprocessing.Process</code> and I want to terminate it correctly.</p>
<pre><code>class MyProcess(Process):

    def __init__(self, target, input_queue, output_queue, database):
        super().__init__()
        self.input_queue = input_queue
        self.output_queue = output_queue
        self.target = target

        self.database = database
        self.db_session = database.create_session()
        # ...

    def run(self):
        signal.signal(signal.SIGINT, signal.SIG_IGN)
        while True:
            try:
                # doing some stuff here
            except Empty:
                break
            except Exception as err:
                logger.error(str(err))
        try:
            self.db_session.commit()
        except:
            logger.error(str(err))
</code></pre>
<p>I want to close <code>self.db_session</code> (which is an SQLAlchemy Session) when the process is terminated. But as the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate" rel="nofollow noreferrer">Python documentation says</a> "exit handlers and finally clauses, etc., will not be executed". How can I correctly terminate a process and close the things it uses?</p>
</div>
<div class="post-text" itemprop="text">
<p>I found a nice solution, by using <code>multiprocessing.Event()</code>. I added an <code>Event</code> object to the constructor of my <code>MyProcess</code> class, and the process loop looks like that now:</p>
<pre><code>def run(self):
    while True:
        try:
            if self.stop_event.is_set():
                break    # breaks the loop if a stop event is set

            # doing some stuff here
        except Empty:
                break
        except Exception:
            logger.error(str(err))

    try:
        self.db_session.commit()
    except:
        logger.error(str(err))
</code></pre>
<p>Instead of calling <code>terminate()</code> when I need to terminate my processes, I just call <code>stop_event.set()</code>, which will break the loop and close everything gracefully.</p>
</div>
<span class="comment-copy">I don't think you need a specialized process. You have a fine process in python, no need to extend it. Just give it work to do. It is all described in detail: <a href="https://docs.python.org/3/library/multiprocessing.html#" rel="nofollow noreferrer">docs.python.org/3/library/multiprocessing.html#</a></span>
<span class="comment-copy">Yeah maybe it is not really useful to have a full custom Process class, but even if I use the Process class, I still have to close my database session when the process is terminated.</span>
