<div class="post-text" itemprop="text">
<p>I recently came across this notation</p>
<pre><code>a = [1,2,3,4]
b = [2,4,6]

c = [(x,y,z) for x in a for y in b for z in a]
</code></pre>
<p>First I don't know how to search for the notation in creating <code>c</code>, is there a name for this type of structure?</p>
<p>Also, I'm confident that <code>c</code> can be updated to not allow <code>x</code> to equal <code>z</code>. Please can you help me with this?</p>
<p>I've tried various things on the lines of</p>
<pre><code>c = [(x,y,z) for x in a for y in b for z in a for x != z]
</code></pre>
<p>but so far I can't find anything that works, or is even valid syntax.</p>
<p>What I'm trying to accomplish is to find every combination of <code>(a,b,a)</code> where <code>a</code> can only be used once in each line so the result would be</p>
<pre><code>[(1, 2, 2),
 (1, 2, 3),
 (1, 2, 4),
 (1, 4, 2),
 (1, 4, 3),
 (1, 4, 4),
 (1, 6, 2),
 (1, 6, 3),
 (1, 6, 4),
 (2, 2, 1),
 (2, 2, 3),
 (2, 2, 4),
 (2, 4, 1),
 (2, 4, 3),
 (2, 4, 4),
 (2, 6, 1),
 (2, 6, 3),
 (2, 6, 4),
 (3, 2, 1),
 (3, 2, 2),
 (3, 2, 4),
 (3, 4, 1),
 (3, 4, 2),
 (3, 4, 4),
 (3, 6, 1),
 (3, 6, 2),
 (3, 6, 4),
 (4, 2, 1),
 (4, 2, 2),
 (4, 2, 3),
 (4, 4, 1),
 (4, 4, 2),
 (4, 4, 3),
 (4, 6, 1),
 (4, 6, 2),
 (4, 6, 3)]
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>It is known as <em>list comprehension</em> and you can use <em>logical <code>if</code></em> within it to filter the results in the returned list as:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; b = [2,4,6]
#     if condition to skip results where `x` equals `z` v
&gt;&gt;&gt; c = [(x,y,z) for x in a for y in b for z in a if x != z]
&gt;&gt;&gt; c   
[(1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 6, 2), (1, 6, 3), (1, 6, 4), (2, 2, 1), (2, 2, 3), (2, 2, 4), (2, 4, 1), (2, 4, 3), (2, 4, 4), (2, 6, 1), (2, 6, 3), (2, 6, 4), (3, 2, 1), (3, 2, 2), (3, 2, 4), (3, 4, 1), (3, 4, 2), (3, 4, 4), (3, 6, 1), (3, 6, 2), (3, 6, 4), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 6, 1), (4, 6, 2), (4, 6, 3)]
</code></pre>
<p>Instead of using <em>nested list comprehension</em>, you may get the same behavior using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><strong><code>itertools.product</code></strong></a> as well:</p>
<pre><code>&gt;&gt;&gt; from itertools import product

&gt;&gt;&gt; [(x,y,z) for x, y, z in product(a, b, a) if x !=z]
[(1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 6, 2), (1, 6, 3), (1, 6, 4), (2, 2, 1), (2, 2, 3), (2, 2, 4), (2, 4, 1), (2, 4, 3), (2, 4, 4), (2, 6, 1), (2, 6, 3), (2, 6, 4), (3, 2, 1), (3, 2, 2), (3, 2, 4), (3, 4, 1), (3, 4, 2), (3, 4, 4), (3, 6, 1), (3, 6, 2), (3, 6, 4), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 6, 1), (4, 6, 2), (4, 6, 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is <code>list comprehension</code> and the correct syntax for the filtering condition is this:</p>
<p><code>c = [(x,y,z) for x in a for y in b for z in a if x != z]</code></p>
<p><a href="https://docs.python.org/3.6/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehensions</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax being used to create <code>c</code> is called a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. Almost your exact case is the fourth code example in those docs:</p>
<blockquote>
<p>A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:</p>
<blockquote>
<p>&gt;&gt;&gt;[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</p>
<p>[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</p>
</blockquote>
</blockquote>
<p>All you need to do is change your last <code>for</code> to an <code>if</code>:</p>
<pre><code>c = [(x,y,z) for x in a for y in b for z in a if x != z]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for the sake of variety, I would like to add the following solution that is based on <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> and <em>circumvents</em> the <code>if</code> check.</p>
<pre><code>from itertools import product
a = [1,2,3,4]
b = [2,4,6]

c = []
for i, item in enumerate(a):
    c.extend((item, x, y) for x, y in product(b, a[:i] + a[i+1:]))
print(c)
</code></pre>
<p>producing:</p>
<pre><code>[(1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 6, 2), (1, 6, 3), (1, 6, 4), (2, 2, 1), (2, 2, 3), (2, 2, 4), (2, 4, 1), (2, 4, 3), (2, 4, 4), (2, 6, 1), (2, 6, 3), (2, 6, 4), (3, 2, 1), (3, 2, 2), (3, 2, 4), (3, 4, 1), (3, 4, 2), (3, 4, 4), (3, 6, 1), (3, 6, 2), (3, 6, 4), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 6, 1), (4, 6, 2), (4, 6, 3)]
</code></pre>
<hr/>
<p>I did some timings too to compare the different approaches using:</p>
<pre><code>from timeit import timeit

setup = '''

from itertools import product


def list_comp(a, b):
    return [(x,y,z) for x in a for y in b for z in a if x != z]


def itertools_listComp(a, b):
    return [(x,y,z) for x, y, z in product(a, b, a) if x !=z]


def itertools_forLoop(a, b):
    c = []
    for i, item in enumerate(a):
        c.extend((item, x, y) for x, y in product(b, a[:i] + a[i + 1:]))
    return c

a = [1, 2, 3, 4]
b = [2, 4, 6]
'''

print('list_comp:', timeit(stmt="list_comp(a, b)", setup=setup, number=1000))
print('itertools_forLoop:', timeit(stmt="itertools_forLoop(a, b)", setup=setup, number=1000))
print('itertools_listComp:', timeit(stmt="itertools_listComp(a, b)", setup=setup, number=1000))
</code></pre>
<p>and the results are:</p>
<pre><code>list_comp:          0.0050
itertools_listComp: 0.0056
itertools_forLoop:  0.0086
</code></pre>
<p>So it seems that the plain list comprehension is the fastest. This behavior persists with bigger <code>a</code> lists too.</p>
</div>
<span class="comment-copy">What are you trying to do? what is your desired output? <code>c</code> is being created using a <code>list comprehension</code></span>
<span class="comment-copy">Thank you, you just saved me numerous nested loops and if-statements</span>
