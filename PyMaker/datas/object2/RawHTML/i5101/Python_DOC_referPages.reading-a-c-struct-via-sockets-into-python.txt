<div class="post-text" itemprop="text">
<p>On an embedded device running a C application, I have defined this struct:</p>
<pre><code>struct TestStruct
{
    float first;
    int second;
    char third;
};
</code></pre>
<p>On request, I send this struct via sockets: </p>
<pre><code>else if(strcmp(str, "Get Stru") == 0)
{
    TestStruct testStruct;
    testStruct.first = 1.2;
    testStruct.second = 42;
    testStruct.third = 'A';

    INT32 sendDataLength = send(m_Socket, (char *)(&amp;testStruct), sizeof(testStruct), 0);
}
</code></pre>
<p>and read it from a Python script on my desktop:</p>
<pre><code>import struct
import socket  
from ctypes import *

class YourStruct(Structure):
    _fields_ = [('v', c_float),
                ('t', c_int),
                ('c', c_char)]

s = socket.socket()
host = '127.0.0.1'
port = 1234

s.connect((host, port))

s.send('Get Stru'.encode())
data = s.recv(20)
print(data)

x = YourStruct()
</code></pre>
<p>This is the data printed to console on my desktop:</p>
<p><a href="https://i.stack.imgur.com/X5Dez.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/X5Dez.jpg"/></a></p>
<p>How can i reassemble the <code>data</code> into a <code>YourStruct</code>?</p>
<p>Note that the embedded device uses little endian, so I have had to use <code>struct.unpack("&lt;" + "f" * 2048, data)</code> to reassemble an array of floats.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/struct.html#module-struct" rel="nofollow noreferrer">[Python]: struct â€” Interpret bytes as packed binary data</a> contains all the needed intel.</p>
<p><em>code.py</em>:</p>
<pre><code>import sys
import ctypes
import struct


class YourStruct(ctypes.Structure):
    _fields_ = [
        ("v", ctypes.c_float),
        ("t", ctypes.c_int),
        ("c", ctypes.c_char)
    ]


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    data = b"\x9a\x99\x99?*\x00\x00\x00A\xbe\xad\xde"
    x = YourStruct()
    fmt = "&lt;fic"
    fmt_size = struct.calcsize(fmt)
    x.v, x.t, x.c = struct.unpack(fmt, data[:fmt_size])
    print("Fields\n  v: {:f}\n  t: {:d}\n  c: {:s}".format(x.v, x.t, x.c.decode()))
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>Starting from the point where the data (<code>data</code>) was received from the socket</li>
<li>The format passed to <code>struct.unpack</code> (<em>fmt</em> arg) tells it how the data is organized: in our case it's <code>"&lt;fic"</code>: <code>float</code>, <code>int</code>, <code>char</code> (preceded by the <em>little endian</em> marker)</li>
<li>Also calculating the size (in bytes) of data that the format requires: it's 9 (4 + 4 + 1). <code>data</code> has 12 bytes, so ignoring the last 3, otherwise <code>struct.unpack</code> will spit <code>struct.error</code></li>
<li>Check <a href="https://stackoverflow.com/questions/37990060/python-struct-pack-behavior">[SO]: Python struct.pack() behavior</a> for more details on <code>struct.pack</code></li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) E:\Work\Dev\StackOverflow\q048822543&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32

Fields
  v: 1.200000
  t: 42
  c: A
</code></pre>
</blockquote>
</div>
