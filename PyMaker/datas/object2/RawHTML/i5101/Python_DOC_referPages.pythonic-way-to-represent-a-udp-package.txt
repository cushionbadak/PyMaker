<div class="post-text" itemprop="text">
<p>I am looking for a pythonic way to represent a UDP package consisting of different fields with different length and so.</p>
<p>I saw <a href="https://pythonhosted.org/bitstring/walkthrough.html" rel="nofollow noreferrer">bitstring</a>, but the process of defining all the fields and their length is quite cumbersome. I probably need to create a class and create a variable for each field and length and also check that they don't get overwritten by larger numbers and so on.</p>
<p>To me that sounds like a job for a library but I could not find one.</p>
<p>Does anyone know of such a library suitable for this task?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first way is to use a "batteries included"-module like:</p>
<ul>
<li><a href="https://github.com/secdev/scapy" rel="nofollow noreferrer">scapy</a></li>
<li><a href="https://pypi.python.org/pypi/dpkt" rel="nofollow noreferrer">dpkt</a></li>
<li><a href="https://github.com/KimiNewt/pyshark" rel="nofollow noreferrer">pyshark</a></li>
<li><a href="https://construct.readthedocs.io/en/latest/" rel="nofollow noreferrer">construct</a> ...etc.</li>
</ul>
<p>Now if you want to create a custom packet, two ways to do it are either
using <a href="https://scapy.readthedocs.io/en/latest/build_dissect.html" rel="nofollow noreferrer"><code>scapy</code></a> to create a new custom protocol, or you can use <a href="https://docs.python.org/2.7/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a> and <a href="https://docs.python.org/2/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> like so:</p>
<pre><code>import os
import struct
from ctypes import *

class myUDP(Structure):
    _fields_ = [
        ("sport",  c_ushort),
        ("dport",  c_ushort),
        ("sum",    c_ushort),
        ("len",    c_ushort)
    ]

    def __new__(self, packet=None):
        return self.from_buffer_copy(packet)

    def __init__(self, packet=None):
        # unpack your data, etc...
        self.srcport  = struct.unpack("H",self.sport)
</code></pre>
<p>The above is a low-level, simple and as minimal as possible example-representation of the UDP header(<em>untested</em>):</p>
<hr/>
<p><a href="https://i.stack.imgur.com/NV0AW.png" rel="nofollow noreferrer"><img alt="UDP header" src="https://i.stack.imgur.com/NV0AW.png"/></a></p>
<p>Though that can a bit difficult to be used in real-world scenarios, with complicated protocols, since it demands a lot of technical work, error handling etc... in order to be a complete packet decoder.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use scapy for packet manipulation</p>
<pre><code>from scapy.all import *
packet = IP(src="1.1.1.1", dst="2.2.2.2")/UDP(dport=4321, sport=123)/"payload"
print str(packet)
# output: 'E\x00\x00#\x00\x01\x00\x00@\x11t\xc4\x01\x01\x01\x01\x02\x02\x02\x02\x00{\x10\xe1\x00\x0f+?payload'
</code></pre>
</div>
<span class="comment-copy">I don't know a ready-to-use library for an UDP inspection. If you create your own, I would use either a C/C++-Library (e.g. take a look at boost:python) or create a class that inherits or at least heavy uses a bytes object and access methods to be used as an array (<a href="https://docs.python.org/2/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">docs.python.org/2/reference/datamodel.html#object.__getitem__</a>)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><b><code>struct</code></b></a></span>
<span class="comment-copy"><a href="https://wiki.python.org/moin/UdpCommunication" rel="nofollow noreferrer">wiki.python.org/moin/UdpCommunication</a></span>
<span class="comment-copy">This is precisely the way I prefer not to do it!</span>
<span class="comment-copy">You can only extract the UDP class representation from scapy, exactly like @game0ver suggested.</span>
