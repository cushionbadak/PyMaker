<div class="post-text" itemprop="text">
<p>I have a string: "Bob's tank has a big boom!"</p>
<p>I want to use filter to find the indices of where letters of the alphabet appear in the string to save their placement to a list.</p>
<pre><code>import string
alphabet = string.ascii_lowercase

str_ = "Bob's tank has a big boom!"

list_index = list(filter(lambda x: x in alphabet, str_))
</code></pre>
<p>Currently it just collects all the letters, but i'd like to know their index in the object <strong>str_</strong>.</p>
<p><strong>Edit for more clarity</strong></p>
<p>Output should be: </p>
<pre><code>[0,1,2,4,6,7...]
[B,o,b,s,t,a...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension with <code>enumerate</code>:</p>
<pre><code>[i for i, v in enumerate(str_) if v in alphabet]
</code></pre>
<ul>
<li><p><code>i</code> is the index, <code>v</code> is the value at corresponding index <code>i</code>, while <code>enumerate</code>-ing over the input string</p></li>
<li><p><code>if v in alphabet</code> does the membership test; if found, the index is saved</p></li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>In [58]: import string
    ...: alphabet = string.ascii_lowercase
    ...: 
    ...: str_ = "Bob's tank has a big boom!"
    ...: 

In [59]: [i for i, v in enumerate(str_) if v in alphabet]
Out[59]: [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This gives each permitted letter and respective position as a list of tuples:</p>
<pre><code>import string

alphabet = string.ascii_lowercase
string = "Bob's tank has a big boom!"

[(j, i) for i, j in enumerate(string) if j in alphabet]

# [('o', 1), ('b', 2), ('s', 4), ('t', 6), ('a', 7), ('n', 8),
#  ('k', 9), ('h', 11), ('a', 12), ('s', 13), ('a', 15), ('b', 17),
#  ('i', 18), ('g', 19), ('b', 21), ('o', 22), ('o', 23), ('m', 24)]
</code></pre>
</div>
<span class="comment-copy">Is using <code>filter</code> absolutely necessary in your scenario? If not, you could use  <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer">re.search</a></span>
<span class="comment-copy">what is your desired output? i'm confused -))</span>
<span class="comment-copy">What's the desired output? Is it just the index values?</span>
<span class="comment-copy">Yes, so Bob would be indices 0-2. The apostrophe is not part of the alphabet so it skips to index 4 which is the second 's', skips the space and goes to index 6 which is 't' . So it would look like string[0],[1],[2],[4],[6]... etc.</span>
<span class="comment-copy">@GregIven can you edit the question and add the desired output? Maybe you're looking for something like <code>filter(lambda x: x[1] in alphabet, enumerate(s))</code>? Also don't use <code>string</code> as a variable name as this will conflict with the <code>string</code> module.</span>
