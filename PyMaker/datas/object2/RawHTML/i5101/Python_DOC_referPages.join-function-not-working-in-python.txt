<div class="post-text" itemprop="text">
<p>I was wondering if someone could help me figure out why my few lines of code isn't working in Python. I am trying to create my own version of the Battleship game, but I can't seem to get the .join() function to work.</p>
<p>Here is my code:</p>
<pre><code>board = []

for x in range(5):
    board.append(["O"*5])

def print_board (board_in):
    for row in board_in:
        print(" ".join(row))

print_board(board)
</code></pre>
<p>However, my output ends up being:</p>
<pre><code>OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
</code></pre>
<p>when I feel like it should be:</p>
<pre><code>O O O O O
O O O O O
O O O O O
O O O O O
O O O O O
</code></pre>
<p>Any help is appreciated! Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is here:</p>
<pre><code>board.append(["O" *5 ])
</code></pre>
<p>Doing <code>"O" * 5</code> doesn't create a list of strings. It simply creates a single string:</p>
<pre><code>&gt;&gt;&gt; "O"*5
'OOOOO'
&gt;&gt;&gt; 
</code></pre>
<p>Thus, what you basically doing when using <code>str.join</code> is:</p>
<pre><code>&gt;&gt;&gt; ' '.join(['OOOOO'])
'OOOOO'
&gt;&gt;&gt; 
</code></pre>
<p>This of course, fails, since the list passed into <code>str.join</code> has a <em>single element</em>, and <code>str.join</code> works by concatenating a list with <em>multiple</em> elements. <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer">From the documentation for <code>str.join</code></a>:</p>
<blockquote>
<h2>str.join(iterable)</h2>
<p>Return a string which is the concatenation of the strings in iterable. A TypeError will be raised if there are any non-string values in iterable, including bytes objects. The separator between elements is the string providing this method.</p>
</blockquote>
<p>What you need to do instead is create each row in your <code>board</code> with five <code>'O'</code>s:</p>
<pre><code>board = [["O"] * 5 for _ in range(5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of creating secondary lists of <code>'O'</code>s, you could leave them as length five strings <code>'OOOOO'</code> and trust that <code>' '.join('OOOOO')</code> will work because <code>'OOOOO'</code> is also an iterable.</p>
<pre><code>board = ['O' * 5 for _ in range(5)]

def print_board (board_in):
    for row in board_in:
        print(" ".join(row))

print_board(board)

O O O O O
O O O O O
O O O O O
O O O O O
O O O O O
</code></pre>
<hr/>
<p>As an aside, my preference would be to write the <code>print_board</code> function like this:</p>
<pre><code>def print_board(board_in):
    print('\n'.join(map(' '.join, board_in)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>["0" * 5]</code> results in <code>["00000"]</code>. What you want is probably <code>["0"] * 5</code>, which makes a list of five elements.</p>
<pre><code>for x in range(5):
    board.append(["O"] * 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split your row as:</p>
<pre><code>&gt;&gt;&gt; row = 'OOOOO'
&gt;&gt;&gt; row_items =[x for x in row]
&gt;&gt;&gt; ' '.join(row_items)
'O O O O O'
</code></pre>
</div>
<span class="comment-copy"><code>"0"*5</code> =&gt; "00000", not a list with 5 zeroes.</span>
<span class="comment-copy">In addition to what they said, what you want to do is append <code>["O"] * 5</code> instead.</span>
<span class="comment-copy">Or just do <code>board.append(["O "*5])</code>.</span>
<span class="comment-copy">@AlexDubrovsky At the expense of trailing whitespace and less flexibility that works in a much smaller codeform.</span>
<span class="comment-copy">If you want <code>board</code> to be a list of 5 strings, each string being length 5, then you want to completely remove the square brackets from this line: <code>board.append(["O"*5])</code>. (This is basically what @piRSquared has suggested, but rewritten with fancier syntax.) What most of the other people are telling you is that you don't want that. Rather, they think you want <code>board</code> to be a list of 5 <i>lists</i>, with each of those inner lists having 5 strings, each string being length 1. Honestly, I don't know which of those you want. But now you know how to do either.</span>
<span class="comment-copy">I understand where your coming from @usr2564301, but that really wasn't my answers purpose. I'm was trying to highlight where the OP's code failed, explain why it failed, and provide a fix. If the OP uses my fix in his <i>already existing code</i>, then he'll get his expected output. Besides, I'm sure the OP wants to use his <code>board</code> like a grid, not like a list of strings. My method provides that interface. I do agree however, that I could provide a easier method of formatting the OP's <code>board</code>.</span>
<span class="comment-copy">Ah I see â€“ if the contents of "rows" are fixed to form a proper list instead of a string, the current <code>print_board</code> function takes care of that.</span>
<span class="comment-copy">Yup, now we see eye to eye @usr2564301 ;-)</span>
<span class="comment-copy">Thank you everyone for your help!!</span>
<span class="comment-copy">This is true @piRSquared, but what if the OP needs to use <code>board</code> as an actually <i>grid</i>? In other words, what if he needs <code>board</code> to have a grid-like interface and be a 2d list? It seems to me that's what the OP really wants.</span>
<span class="comment-copy">Then your answer is better (-:  I'm a fan of adding knowledge.  It doesn't always have to aim for being the most relevant.  Votes will take care of that.  This helps in that little way to remind people that strings are iterables and can be use as such.  If and when single characters are what's needed, then this might help someone.</span>
<span class="comment-copy">Ah, I see @piRSquared. You're just adding a different perspective. That's cool. You have my vote :-) +1</span>
<span class="comment-copy">I think it's a good point to bring up that <code>' '.join('00000')</code> is different than <code>' '.join(['00000'])</code>. But you "advancified" the code so that OP, or other visitors at OP's level of Python proficiency, may not be able to recognize what the heck you're doing, and how the code that you presented actually illustrates/supports the prose of your answer.</span>
<span class="comment-copy">@JohnY that's also a good point.  I'll edit the post to address that.</span>
<span class="comment-copy">Thank you @ChristianDean. I suppose I'm a bit too quick on the trigger finger at times.</span>
<span class="comment-copy">No problem man :-)</span>
