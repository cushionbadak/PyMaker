<div class="post-text" itemprop="text">
<p>I have a csv file that looks like this:</p>
<pre><code>name    team    year
person1 seals   1994
person1 dogs    2008
person2 seals   2006
person3 tigers  1998
person4 seals   1993
person5 dogs    2015
person5 tigers  1990
person5 seals   1990
person6 elephants   2011
person7 elephants   1979
person7 cats    1987
person7     dogs    1990
person8 seals   1992
person8 dogs    1993
</code></pre>
<p>I want to write a python program that goes through the csv and if there is more than one entry in "name" gives me counts on the patterns of "team" that are ordered by "year." </p>
<p>So what I want first is this result... </p>
<pre><code>seals, dogs: 2
tigers, seals, dogs: 1
elephants, cats, dogs: 1
</code></pre>
<p>Finally what I'm interested in finally is determining the most common pattern and the various probabilities, so if one is first a "seal" what is probability one is next a "dog," etc.</p>
<p>I'm new to python. What I’ve got so far is this:</p>
<pre><code>import pandas as pd
df = pd.read_csv(“animals.csv")
dups= df[df.duplicated(['name'], keep=False)]
teams=dups.groupby('name') [[‘team’, 'year']].count()
</code></pre>
<p>But this just gives me:</p>
<pre><code>person1     2   2
person5     3   3
person7     2   2
person8     2   2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Dictionary approach</strong></p>
<p>One way is to use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to output a dictionary. Since lists aren't hashable, I aggregate teams to tuples for this to work.</p>
<pre><code>from collections import Counter

grouper = df.sort_values(['name', 'year']).\
             groupby('name')['team'].apply(tuple).reset_index()

c = Counter(grouper.team)

# Counter({('elephants',): 1,
#          ('elephants', 'cats', 'dogs'): 1,
#          ('seals',): 2,
#          ('seals', 'dogs'): 2,
#          ('tigers',): 1,
#          ('tigers', 'seals', 'dogs'): 1})
</code></pre>
<p><strong>Pandas approach</strong></p>
<p>If you want a pure <code>pandas</code> approach with output as <code>pd.Series</code>, this will work:</p>
<pre><code>counter = df.sort_values(['name', 'year']).\
             groupby('name')['team'].apply(tuple).\
             reset_index().team.value_counts()

# (seals,)                   2
# (seals, dogs)              2
# (tigers,)                  1
# (elephants,)               1
# (elephants, cats, dogs)    1
# (tigers, seals, dogs)      1
# Name: team, dtype: int64
</code></pre>
</div>
