<div class="post-text" itemprop="text">
<p>I have created my own corpus, similar to the movie_reviews corpus in nltk (categorized by neg|pos.)</p>
<p>Within the neg and pos folders are txt files. </p>
<p>Code: </p>
<pre><code>from nltk.corpus import CategorizedPlaintextCorpusReader

    mr = CategorizedPlaintextCorpusReader('C:\mycorpus', r'(?!\.).*\.txt',
            cat_pattern=r'(neg|pos)/.*')
</code></pre>
<p>When I try to read or interact with one of these files, I am unable to. </p>
<p>e.g. <code>len(mr.categories())</code> runs, but does not return anything:</p>
<pre><code>&gt;&gt;&gt;
</code></pre>
<p>I have read multiple documents and questions on here regarding custom categorized corpus', but I am still unable to use them.</p>
<p>Full code:</p>
<pre><code>import nltk
from nltk.corpus import CategorizedPlaintextCorpusReader

mr = CategorizedPlaintextCorpusReader('C:\mycorpus', r'(?!\.).*\.txt',
        cat_pattern=r'(neg|pos)/.*')

len(mr.categories())
</code></pre>
<p>I eventually want to be able to preform a naive bayes algorithm against my data but I am unable to read the content.</p>
<p>Paths: 
<code>C:\mycorpus\pos</code></p>
<pre><code>C:\mycorpus\neg
</code></pre>
<p>Within the pos file is a 'cv.txt' and the neg contains a 'example.txt'</p>
</div>
<div class="post-text" itemprop="text">
<p>I am using Linux, and the following modification to your code (with toy corpus files) works correctly for me:</p>
<pre><code>import nltk
from nltk.corpus import CategorizedPlaintextCorpusReader

import os


mr = CategorizedPlaintextCorpusReader(
    '/home/ely/programming/nltk-test/mycorpus',
    r'(?!\.).*\.txt',
    cat_pattern=os.path.join(r'(neg|pos)', '.*')
)

print(len(mr.categories()))
</code></pre>
<p>This suggests it is a problem with the <code>cat_pattern</code> string using <code>/</code> as a file system delimiter when you're on a Windows system.</p>
<p>Using <code>os.path.join</code> as in my example, or <code>pathlib</code> if using Python 3, would be a good way to solve it so it is OS-agnostic and you don't trip up with the regular expression escape slashes mixed with file system delimiters.</p>
<p>In fact you may way to use this approach for all of the cases of file system delimiters in your argument strings, and it's generally a good habit to get in for making code portable and avoiding strange string munging tech debt.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems to me that there is something weird with your</p>
<pre><code>cat_pattern=r'(neg|pos)/.*'
</code></pre>
<p>for you are on an MsDOS based system (Windows, I guess) and folder inclusions are indecated with <strong>\ , not /</strong> (or I don't get it)</p>
</div>
<span class="comment-copy">I will certainly use this in the future to avoid this. I am using Python 3, as such can you provide the syntax for pathlib rather than os.path.join? Thank you for your answer</span>
<span class="comment-copy">@Yunter That syntax is best described <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">in the docs</a>. Essentially, you'll create a <code>pathlib.Path</code> object, and then the binary operator <code>/</code> will have semantics for file system path resolution, so you could do <code>Path(r'(neg|pos)') / '.*'</code>, and even though it uses the <code>/</code> operator, it resolves it to the appropriate file system delimiter automatically for you. Really it's not better than <code>os.path</code>, just a different syntax for similar operations. Note that you can use <code>os.path</code> in Python 2 or Python 3.</span>
<span class="comment-copy">Apologies - I misinterpreted "or pathlib if using Python 3". Using the 'os.path.join' provided in the code leaves me with the same issue of not returning anything. I will post the contents of the directory above.</span>
<span class="comment-copy">Yes I'm on a Windows OS. So I should change the '/.*' to '\.*' ?</span>
<span class="comment-copy">or just cat_pattern=os.path.join(r'(neg|pos)', '.*') as Ely suggests above. This way, you have a non OS-dependent solution</span>
<span class="comment-copy">Thank you for the answer, I am using Python 3 so will have to use pathlib according to Ely.</span>
