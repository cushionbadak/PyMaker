<div class="post-text" itemprop="text">
<p>I am trying to convert the following XML to CSV. The catch is every single entry might not have a value so it returns a <code>NoneType</code>. For example, in the XML shown below not every "entry" will have a "rule". </p>
<p>If this happens I would like the CSV file to contain either nothing or a generic value such as "EMPTY". I would like the CSV file to look something like this:</p>
<pre><code>domain    serial     seqno   rule
 1       43434343434    1     21
 1       43434343434    1     21
 1       43434343434    1     EMPTY
</code></pre>
<p>By using the list comprehension shown below I was able to avoid the <code>NoneType</code> error. However, it appears that formatting the data in the CSV is where I need some assistance.</p>
<pre><code>rows = [cleanhtml(str(entry))
        for entry in soup.find_all("entry")
        if entry.find(header_list[counter]) is not None]
</code></pre>
<pre><code>#!/usr/bin/env python3

import csv
import re
from bs4 import BeautifulSoup

html_results='''&lt;response status="success"&gt;&lt;result&gt;
      &lt;job&gt;
        &lt;tenq&gt;09:48:24&lt;/tenq&gt;
        &lt;tdeq&gt;09:48:24&lt;/tdeq&gt;
        &lt;tlast&gt;18:00:00&lt;/tlast&gt;
        &lt;status&gt;FIN&lt;/status&gt;
        &lt;id&gt;5955&lt;/id&gt;
        &lt;cached-logs&gt;1118&lt;/cached-logs&gt;
      &lt;/job&gt;
      &lt;log&gt;
        &lt;logs count="100" progress="100"&gt;
          &lt;entry logid="4343"&gt;
            &lt;domain&gt;1&lt;/domain&gt;
            &lt;serial&gt;43434343434&lt;/serial&gt;
            &lt;seqno&gt;0&lt;/seqno&gt;
            &lt;actionflags&gt;0x0&lt;/actionflags&gt;
            &lt;type&gt;EXAMPLE&lt;/type&gt;
            &lt;subtype&gt;EXAMPLE&lt;/subtype&gt;
            &lt;config_ver&gt;0&lt;/config_ver&gt;
            &lt;src&gt;1.1.1.1&lt;/src&gt;
            &lt;dst&gt;1.1.1.1&lt;/dst&gt;
            &lt;rule&gt;Rule 21&lt;/rule&gt;
          &lt;/entry&gt;
      &lt;log&gt;
          &lt;entry logid="4343"&gt;
            &lt;domain&gt;1&lt;/domain&gt;
            &lt;serial&gt;43434343434&lt;/serial&gt;
            &lt;seqno&gt;0&lt;/seqno&gt;
            &lt;actionflags&gt;0x0&lt;/actionflags&gt;
            &lt;type&gt;EXAMPLE&lt;/type&gt;
            &lt;subtype&gt;EXAMPLE&lt;/subtype&gt;
            &lt;config_ver&gt;0&lt;/config_ver&gt;
            &lt;src&gt;1.1.1.1&lt;/src&gt;
            &lt;dst&gt;1.1.1.1&lt;/dst&gt;
            &lt;rule&gt;Rule 21&lt;/rule&gt;
          &lt;/entry&gt;'''

def cleanhtml(raw_html):
  tags = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(tags, '', raw_html)
  return cleantext

soup = BeautifulSoup(html_results, 'html.parser')

header_list = ['domain',"serial","seqno","actionflags","type","subtype","config_ver","src","dst","rule"]

query_results = open("query_results.csv","w")

csvwriter = csv.writer(query_results)

csvwriter.writerow(header_list)

num_of_logs = soup.find("logs").get("count")

counter = 0

rows = [cleanhtml(str(entry)) for entry in soup.find_all("entry") if entry.find(header_list[counter]) is not None]

csvwriter.writerows(rows)

query_results.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not handling your entry subelements; you are merely turning each entry to text and removing the XML tag markup. You need to produce a list or dictionary with each subelement entry teased out separately.</p>
<p>If you produce a <em>dictionary</em> of the nested elements, then the <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer"><code>csv.DictWriter()</code> class</a> could handle filling in empty columns for you, without additional coding:</p>
<pre><code>def entry_to_dict(entry):
    return {tag.name: tag.get_text() for tag in entry.find_all()}

header_list = ['domain', 'serial', 'seqno', 'actionflags', 'type', 'subtype', 'config_ver', 'src', 'dst', 'rule']

soup = BeautifulSoup(html_results, 'html.parser')
with open("query_results.csv","w") as query_results:
    csvwriter = csv.DictWriter(query_results, header_list, restval='EMPTY')
    csvwriter.writeheader()
    csvwriter.writerows(entry_to_dict(entry) for entry in soup.find_all('entry'))
</code></pre>
<p>Here, the <code>restval</code> argument tells the writer how to handle missing values in each row. <code>header_list</code> is passed in as the field names, so the writer knows what keys to expect in each row dictionary.</p>
<p><code>entry_to_dict()</code> simply turns each nested element in an entry into a key-value pair in a dictionary, with the <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text" rel="nofollow noreferrer"><code>tag.get_text()</code> function</a> doing the work of turning element contents into text. The</p>
<p>For your demo XML data, this produces:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; csvwriter = csv.DictWriter(sys.stdout, header_list, restval='EMPTY')
&gt;&gt;&gt; csvwriter.writeheader()
domain,serial,seqno,actionflags,type,subtype,config_ver,src,dst,rule
&gt;&gt;&gt; csvwriter.writerows(entry_to_dict(entry) for entry in soup.find_all('entry'))
1,43434343434,0,0x0,EXAMPLE,EXAMPLE,0,1.1.1.1,1.1.1.1,Rule 21
1,43434343434,0,0x0,EXAMPLE,EXAMPLE,0,1.1.1.1,1.1.1.1,Rule 21
</code></pre>
<p>This doesn't actually contain any empty elements, but when I add some, you can see that <code>EMPTY</code> is used to fill those in:</p>
<pre><code>&gt;&gt;&gt; html_results += '''&lt;/log&gt;&lt;log&gt;
...           &lt;entry logid="4343"&gt;
...             &lt;domain&gt;1&lt;/domain&gt;
...             &lt;serial&gt;43434343434&lt;/serial&gt;
...             &lt;seqno&gt;0&lt;/seqno&gt;
...             &lt;actionflags&gt;0x0&lt;/actionflags&gt;
...             &lt;type&gt;EXAMPLE&lt;/type&gt;
...             &lt;subtype&gt;EXAMPLE&lt;/subtype&gt;
...             &lt;!-- incomplete entry, config_ver, src, dst and rule missing --&gt;
...          &lt;/entry&gt;
...        &lt;/log&gt;'''
&gt;&gt;&gt; soup = BeautifulSoup(html_results, 'html.parser')
&gt;&gt;&gt; csvwriter = csv.DictWriter(sys.stdout, header_list, restval='EMPTY')
&gt;&gt;&gt; csvwriter.writeheader()
domain,serial,seqno,actionflags,type,subtype,config_ver,src,dst,rule
&gt;&gt;&gt; csvwriter.writerows(entry_to_dict(entry) for entry in soup.find_all('entry'))
1,43434343434,0,0x0,EXAMPLE,EXAMPLE,0,1.1.1.1,1.1.1.1,Rule 21
1,43434343434,0,0x0,EXAMPLE,EXAMPLE,0,1.1.1.1,1.1.1.1,Rule 21
1,43434343434,0,0x0,EXAMPLE,EXAMPLE,EMPTY,EMPTY,EMPTY,EMPTY
</code></pre>
<p>As a final note: consider installing the <a href="http://lxml.de/" rel="nofollow noreferrer"><code>lxml</code> library</a>, and use the <code>xml</code> parser in BeautifulSoup:</p>
<pre><code>soup = BeautifulSoup(html_results, 'xml')
</code></pre>
<p>This ensures that your XML is parsed correctly at all times (the HTML parser is fault-tolerant in ways that XML should not be, and is case-insensitive, which could cause issues with mixed-case XML data).</p>
</div>
<span class="comment-copy">So what is your output now that you know how to handle the <code>None</code> entries?</span>
<span class="comment-copy">Thank you, this works! Very much appreciated. (Considering this is my first time posting if there is anything else I have do to besides marking your answer as the correct one please let me know.))</span>
<span class="comment-copy">No, that's it, you are good. :-) Glad to have been of help!</span>
