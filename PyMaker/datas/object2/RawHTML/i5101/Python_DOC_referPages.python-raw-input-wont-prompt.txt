<div class="post-text" itemprop="text">
<p>The input wont prompt when I run the program. How do I fix this? </p>
<pre><code>import sys
def main():

    # Initialize list and determine length
    string_list = raw_input("Enter your strings to be sorted: ").split(' ')
    string_list.sort()
    length = len(string_list)

    # If there are more than one strings to sort, print the list
    # Otherwise break
    if length &gt; 1: 
        print(string_list)
    elif length &lt; 0:
        print("Enter more than one string to sort")
        return sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The standard idiom is useful here:</p>
<pre><code>if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to call your function.  As it is it is not executing anything but closing immediately.  In this case you can call your execute it with <code>main()</code>:</p>
<pre><code>import sys
def main():

    # Initialize list and determine length
    string_list = raw_input("Enter your strings to be sorted: ").split(' ')
    string_list.sort()
    length = len(string_list)

    # If there are more than one strings to sort, print the list
    # Otherwise break
    if length &gt; 1: 
        print(string_list)
    elif length &lt; 0:
        print("Enter more than one string to sort")
        return sys.exit()
main()
</code></pre>
<p>When you create a function you create code that is never executed unless it is called.  This is useful when creating modules for example because it does not execute it immediately.</p>
<p>It seems you are used to another language because unlike some (C++/C/Java) you do not need to use a function for structural purposes but rather to not call code or clarity.  </p>
<p>Also Python automatically stops executing.  Unlike (once again C/C++) you do not need to return anything. </p>
<p>In the case of:</p>
<pre><code>if length &gt; 1: 
    print(string_list)
elif length &lt; 0:
    print("Enter more than one string to sort")
    return sys.exit()
</code></pre>
<p>Rather than printing (which might be considered bad practice) you can return the string:</p>
<pre><code>if length &gt; 1: 
    return string_list
elif length &lt; 0:
    return "Enter more than one string to sort"
</code></pre>
<p>Now to get it to print you can use <code>print(main())</code></p>
<p>You should also ensure to end in either a plain <code>if</code> or an <code>else</code> statement.  Ending with a <code>elif</code> can return strange errors.</p>
<p>If you still need those two loops you could add an <code>else</code> statement at the end and using the <code>pass</code> function that does nothing: </p>
<pre><code>if length &gt; 1: 
    return string_list
elif length &lt; 0:
    return "Enter more than one string to sort"
else: pass
</code></pre>
<hr/>
<p>Once you move on to modules, you may want to execute code that  can be executed and is also a module.  This is where the other answer helps.</p>
<pre><code>if __name__ == '__main__':
    main()
</code></pre>
<p>This specifies if the name of the script (try running <code>print(__name__)</code> in a script) is the main file (i.e. it's not getting called by another script) then <em>only then</em> will it execute by itself.  Otherwise if imported <code>main()</code> will not run.</p>
</div>
<span class="comment-copy">Did you call the func i.e. <code>main()</code>?</span>
<span class="comment-copy">How would I do that? I am just starting with python</span>
<span class="comment-copy">next issue, <code>elif length &lt; 0</code>, you expect strings to have a negative length?! I guess you mean <code>&lt; 1</code> and don't <code>return sys.exit()</code> just call <code>sys.exit()</code></span>
<span class="comment-copy">Python doesn't automatically call <code>main</code> functions like some other languages.  Instead, Python will run all the code at the top level of the file (that is, not encapsulated in a function.)  What most people do is take advantage of the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">scope checking</a> that python offers to make sure their code is only run when called directly</span>
<span class="comment-copy">Yes I meant &lt; 1 typo. ok will just call exit</span>
<span class="comment-copy">@ncotton  No problem.  :-)</span>
<span class="comment-copy"><code>if length &gt; 1</code> / <code>elif length &lt; 0</code> makes no sense. What about 1-character strings? Do you think there are strings with negative length? The correct idiom is <code>if string</code> / <code>else</code>.</span>
<span class="comment-copy">@ChrisJohnson  Thank you for pointing that out.</span>
<span class="comment-copy">@ChrisJohnson  The values might be negative am I wrong then?</span>
<span class="comment-copy">Length cannot be negative.</span>
