<div class="post-text" itemprop="text">
<p>I'm having a hard time understanding why my function is not returning the reversed version of my list. I've spent a long time trying to understand why and i hit a wall: ---it only returns my list in ascending order.</p>
<pre><code>letters = 'abcdefghijk'
numbers = '123456'
dict1 = {}

def reverseOrder(listing):
    lst2 = []
    lst2.append(listing)
    lst2.sort(reverse=True)
    return lst2

for l, n in zip(letters, numbers):
    dict1.update({l:n})
    lst1 = list(dict1) + list(dict1.values())

lst1.sort(key=reverseOrder)
print(lst1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using <code>sort</code> function in an invalid way.</p>
<p>Here is the definition of <code>sort</code> function (from <code>builtins.py</code>):</p>
<pre><code>def sort(self, key=None, reverse=False): # real signature unknown; restored from __doc__
    """ L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE* """
    pass
</code></pre>
<p><code>key</code> argument has to be used if there is 'ambiguity' on how items have to be sorted e.g. items are tuples, dictionaries, etc.</p>
<p>Example:</p>
<pre><code>lst = [(1, 2), (2, 1)]
lst.sort(key=lambda x: x[0]) # lst = [(1, 2), (2, 1)]
lst.sort(key=lambda x: x[1]) # lst = [(2, 1), (1, 2)]
</code></pre>
<p>Not quite sure what you want with this part though:</p>
<pre><code>for l, n in zip(letters, numbers):
    dict1.update({l:n})
    lst1 = list(dict1) + list(dict1.values())
</code></pre>
<p>Seems like you want a list of all numbers and letters but you are doing it an odd way.</p>
<p>Edit: I have updated answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>key</code> function passed to <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort</code></a> has a very specific purpose:</p>
<blockquote>
<p><code>key</code> specifies a function of one argument that is used to extract a comparison key from each list element (for example, <code>key=str.lower</code>). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of <code>None</code> means that list items are sorted directly without calculating a separate key value.</p>
</blockquote>
<p>So the function is supposed to take in a single list element, and then return a key that determines its sorting compared to the other elements.</p>
<p>For example, if you wanted to sort a list by the length of their contents, you could do it like this:</p>
<pre><code>def lengthOfItem (item):
    return len(item)

lst.sort(key=lengthOfItem)
</code></pre>
<p>Since the function only takes a <em>single</em> item, it makes it unsuitable for sorting behaviors where you actually need to compare two elements in order to make a relation. But those sortings are very inefficient, so you should avoid them.</p>
<p>In your case, it seems like you want to reverse your list. In that case you can just use <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>list.reverse()</code></a>.</p>
</div>
<span class="comment-copy">Check here: <a href="https://docs.python.org/2/library/functions.html#sorted%60" rel="nofollow noreferrer">sorted()</a>, key should return a value that indicates sort order...</span>
<span class="comment-copy">You're making the key a list itself, not a letter/number, and <code>lst2.sort(reverse=True)</code> will only ever be one value</span>
<span class="comment-copy">Are you aware of the <code>list.reverse</code> method?</span>
<span class="comment-copy">The <code>key</code> parameter only lets you sort in reverse order if you know enough about the items you are sorting (for example, <code>key=lambda x: -x</code> will sort numbers in reverse order, but not strings).</span>
<span class="comment-copy">Not really clear what the expected output is, but <code>enumerate(letters)</code> will get you numbered tuples of letters. So, you really don't need the numbers string</span>
<span class="comment-copy">Python 3’s <code>list.sort()</code> does not support a <code>cmp</code> function. Also. OP is using a key function, so I’m not sure where your <i>“it has to return -1, 0 or 1”</i> is coming from exactly.</span>
<span class="comment-copy">ahh, thanks ..the above code was basically my attempt to play around with both the sort function and zip function. much appreciated.</span>
<span class="comment-copy">@poke yes, correct, I have updated the answer! Thanks!</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>functools.cmp_to_key</code></a> to convert old-style <code>cmp</code> functions to new <code>key</code> functions.</span>
