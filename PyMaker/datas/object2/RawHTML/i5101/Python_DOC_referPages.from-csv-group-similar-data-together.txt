<div class="post-text" itemprop="text">
<p>I have some data that I'm trying to group together:</p>
<pre><code>Serial_Num     Latitude Longitude
1950004S11059   -11.1   59.1
1950004S11059   -11.6   57.8
1950004S11059   -12.4   56
1950004S11059   -13.2   54.6
1950004S11059   -13.8   53.8
1950004S11059   -14.8   52.7
1950004S11059   -15.9   52
1950004S11059   -18.3   52.4
1950004S11059   -20     54
1950004S11059   -22.1   55.9
1950004S11059   -26.2   59.8
1950012S14150   -14     146.9
1950012S14150   -14.4   145.8
1950012S14150   -14.9   145.4
1950012S14150   -15.8   145.6
1950012S14150   -18.9   149.1
1950012S14150   -22.3   152.5
1950013S14139   -16     139
1950013S14139   -16.3   139
</code></pre>
<p>So simply, for each unique <code>Serial_Num</code>, I want the coordinates. I'm expecting something similar to:</p>
<pre><code>1950004S11059: {"GPS": (-11.1 , 59.1) , (-11.6, 57.8) , (-12.4, 56), ..., (-26.2, 59.8)}
</code></pre>
<p>And then I can loop through the <code>GPS</code> coordinates for each <code>Serial_Num</code> and plot.</p>
<p>I have some scripts that I have used elsewhere, but mainly relies on the .csv data being used to set up a dictionary, with the <code>Serial_Num</code> as the key.</p>
<p>However, the data in the csv is sequential, and the sequence is important.  </p>
<p>What's a way to output, for each <code>Serial_Num</code>, the list of coordinates, in order as they are in the CSV?</p>
<p>Edit: I'm looking at Pandas right now, as it has a <code>groupBy</code> method that may help.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one way. Breakdown of each step below.</p>
<pre><code>import pandas as pd

df = pd.read_csv('file.csv', delim_whitespace=True)
df['GPS'] = list(zip(df.Latitude, df.Longitude))
df.groupby('Serial_Num')['GPS'].apply(list).to_dict()
</code></pre>
<p><strong>Read the data</strong></p>
<pre><code>df = pd.read_csv('file.csv', delim_whitespace=True)

#        Serial_Num  Latitude  Longitude
# 0   1950004S11059     -11.1       59.1
# 1   1950004S11059     -11.6       57.8
# 2   1950004S11059     -12.4       56.0
# 3   1950004S11059     -13.2       54.6
# 4   1950004S11059     -13.8       53.8
# 5   1950004S11059     -14.8       52.7
</code></pre>
<p><strong>Make tuple column</strong></p>
<pre><code>df['GPS'] = list(zip(df.Latitude, df.Longitude))

#        Serial_Num  Latitude  Longitude             GPS
# 0   1950004S11059     -11.1       59.1   (-11.1, 59.1)
# 1   1950004S11059     -11.6       57.8   (-11.6, 57.8)
# 2   1950004S11059     -12.4       56.0   (-12.4, 56.0)
# 3   1950004S11059     -13.2       54.6   (-13.2, 54.6)
# 4   1950004S11059     -13.8       53.8   (-13.8, 53.8)
# 5   1950004S11059     -14.8       52.7   (-14.8, 52.7)
</code></pre>
<p><strong>Create dictionary</strong></p>
<pre><code>df.groupby('Serial_Num')['GPS'].apply(list).to_dict()

# {'1950004S11059': [(-11.1, 59.100000000000001),
#                    (-11.6, 57.799999999999997),
#                    (-12.4, 56.0),
#                    (-13.199999999999999, 54.600000000000001),
#                    (-13.800000000000001, 53.799999999999997),
#                    (-14.800000000000001, 52.700000000000003),
#                    (-15.9, 52.0),
#                    (-18.300000000000001, 52.399999999999999),
#                    (-20.0, 54.0),
#                    (-22.100000000000001, 55.899999999999999),
#                    (-26.199999999999999, 59.799999999999997)],
#  '1950012S14150': [(-14.0, 146.90000000000001),
#                    (-14.4, 145.80000000000001),
#                    (-14.9, 145.40000000000001),
#                    (-15.800000000000001, 145.59999999999999),
#                    (-18.899999999999999, 149.09999999999999),
#                    (-22.300000000000001, 152.5)],
#  '1950013S14139': [(-16.0, 139.0), (-16.300000000000001, 139.0)]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Given</strong></p>
<p>A file named <code>foo.csv</code>:</p>
<pre><code>Serial_Num     Latitude Longitude
1950004S11059   -11.1   59.1
1950004S11059   -11.6   57.8
1950004S11059   -12.4   56
1950004S11059   -13.2   54.6
1950004S11059   -13.8   53.8
1950004S11059   -14.8   52.7
1950004S11059   -15.9   52
1950004S11059   -18.3   52.4
1950004S11059   -20     54
1950004S11059   -22.1   55.9
1950004S11059   -26.2   59.8
1950012S14150   -14     146.9
1950012S14150   -14.4   145.8
1950012S14150   -14.9   145.4
1950012S14150   -15.8   145.6
1950012S14150   -18.9   149.1
1950012S14150   -22.3   152.5
1950013S14139   -16     139
1950013S14139   -16.3   139
</code></pre>
<p>And some code to parse the data as a tuples of (serial, coordinates):</p>
<pre><code>import csv
import collections as ct


def read_file(fname):
    with open(fname) as f:
        reader = csv.reader(f)
        next(reader)
        for line in reader:
            #line = [x for x in line[0].split(" ") if x]
            yield line[0], tuple(map(float, line[1:]))
</code></pre>
<p><strong>Code</strong></p>
<p>We build a nesting of <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">defaultdicts</a>:</p>
<pre><code>data = ct.defaultdict(dict)
for serial, coords in (read_file("foo.csv")):
    if serial not in data:
        dd = ct.defaultdict(list)
    dd["GPS"].append(coords)
    data[serial] = dd

dict(data)
</code></pre>
<p>Output</p>
<pre><code>{'1950004S11059': defaultdict(list,
             {'GPS': [
               (-11.1, 59.1),
               (-11.6, 57.8),
               (-12.4, 56.0),
               (-13.2, 54.6),
               (-13.8, 53.8),
               (-14.8, 52.7),
               (-15.9, 52.0),
               (-18.3, 52.4),
               (-20.0, 54.0),
               (-22.1, 55.9),
               (-26.2, 59.8)]}),
 '1950012S14150': defaultdict(list,
             {'GPS': [
               (-14.0, 146.9),
               (-14.4, 145.8),
               (-14.9, 145.4),
               (-15.8, 145.6),
               (-18.9, 149.1),
               (-22.3, 152.5)]}),
 '1950013S14139': defaultdict(list, 
             {'GPS': [
               (-16.0, 139.0), 
               (-16.3, 139.0)]})}
</code></pre>
</div>
<span class="comment-copy"><b>Yes!!</b> That's amazing.  I am super new to Pandas, but it looks like the <code>Latitude</code> in <code>df.Latitude</code> is not a set method/word in Pandas, but is the literal header in the file, yes? So if I also had, say, states in there under "State", I could do <code>zip(df.State,df.Latitude,df.Longitude)</code>, yeah?  There's a lot going on in those three lines, I'll have to study, but great post/answer, thanks!</span>
<span class="comment-copy">@pylang - when I try that, with a .csv, I get this error: <code>pandas.errors.ParserError: Error tokenizing data. C error: Expected 5 fields in line 901, saw 6</code></span>
<span class="comment-copy">@BruceWayne, looks like there's an issue with your csv file. Can you open in a text editor and see what you have in line 901? It could be a comma where it shouldn't be, or something similar. There is a way to ignore bad lines with <code>pandas</code> [<code>error_bad_lines=False</code>], but this will mean your data may not be complete.</span>
<span class="comment-copy">That's what I thought too - but looking at it, doesn't seem like there's an errant comma, right?  <a href="https://i.stack.imgur.com/H1iLv.jpg" rel="nofollow noreferrer">See screen shot</a></span>
<span class="comment-copy">what i would do is paste that line into a separate file, read it into pandas and see what it gives you.</span>
<span class="comment-copy">I tried that with my <code>.csv</code> (instead of <code>.txt</code>), and it successfully added an entry for each unique Serial_Num, but it returned empty values for each key.  <code>2017161N13119 defaultdict(&lt;class 'list'&gt;, {'GPS': [(), (), (), (), (), (), (), (), (), (), (), (), (), ()]})</code></span>
<span class="comment-copy">I replaced the file extensions to <code>.csv</code> and it worked for me.  Try renaming the file to <code>.txt</code>.  I suspect your csv did not separate columns correctly.</span>
<span class="comment-copy">I see a different serial key in your comment.  Try to confirm whether this code works using the data I posted first.  Lmk what happens.</span>
<span class="comment-copy">Same thing - I put your data in a CSV, get the same empty values.  FWIW, it looks like it's correctly getting the GPS groups, just not adding the values in the list. Your info returned: <code>defaultdict(&lt;class 'dict'&gt;, {'1950004S11059': defaultdict(&lt;class 'list'&gt;, {'GPS': [(), (), (), (), (), (), (), (), (), (), ()]}), '1950012S14150': defaultdict(&lt;class 'list'&gt;, {'GPS': [(), (), (), (), (), ()]}), '1950013S14139': defaultdict(&lt;class 'list'&gt;, {'GPS': [(), ()]})})</code></span>
<span class="comment-copy">Did you try it as a <code>.txt</code> file?</span>
