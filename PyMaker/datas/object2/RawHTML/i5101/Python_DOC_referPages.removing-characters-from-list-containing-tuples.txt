<div class="post-text" itemprop="text">
<p>I have a list of tuples. I want to get rid of first 2 chars and last char of all first tuple elements.</p>
<pre><code>db=[("b'D967E735-070D-48F9-A3BB-D00766D39F57'", 'test1', '51-00401'), 
("b'94F903D1-2EE7-4BD2-A0C6-B464D9F2939C'", 'Ddfsd_test4', '51-00404'), 
("b'FE0CC34C-BA6A-4123-B72C-617ADC0A93E7'", 'Xdsfd_test10', '51-00409'), 
("b'43996819-A615-4DC8-BB93-C4A54007FB34'", 'dsd', '51-00453'), 
("b'15D1B5DA-2E1D-4D86-9E53-60F3257D81E1'", 'dsd', '60-00400')]
</code></pre>
<p>it should return as below (b' and ' has been removed from every first tuple element)</p>
<pre><code>db=[("D967E735-070D-48F9-A3BB-D00766D39F57", 'test1', '51-00401'), 
("94F903D1-2EE7-4BD2-A0C6-B464D9F2939C", 'Ddfsd_test4', '51-00404'), 
("FE0CC34C-BA6A-4123-B72C-617ADC0A93E7", 'Xdsfd_test10', '51-00409'), 
("43996819-A615-4DC8-BB93-C4A54007FB34", 'dsd', '51-00453'), 
("15D1B5DA-2E1D-4D86-9E53-60F3257D81E1", 'dsd', '60-00400')]
</code></pre>
<p>tried below but got TypeError: 'tuple' object is not callable</p>
<pre><code>for i in db:
   y=list(map(i[2:len(i[0])-1],i[0]))
print (y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a little bit of list comprehension:</p>
<pre><code>res = [((x[0][2:-1], x[1], x[2])) for x in db]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I agree with @juanpa.arrivillaga's comment, you should fix a bad output of a function if you can modify it. But if you can't, this solution would work.</p>
<pre><code>import ast

db=[("b'D967E735-070D-48F9-A3BB-D00766D39F57'", 'test1', '51-00401'), 
("b'94F903D1-2EE7-4BD2-A0C6-B464D9F2939C'", 'Ddfsd_test4', '51-00404'), 
("b'FE0CC34C-BA6A-4123-B72C-617ADC0A93E7'", 'Xdsfd_test10', '51-00409'), 
("b'43996819-A615-4DC8-BB93-C4A54007FB34'", 'dsd', '51-00453'), 
("b'15D1B5DA-2E1D-4D86-9E53-60F3257D81E1'", 'dsd', '60-00400')]

new_db = []

for thing, name, code in db:
    thing = ast.literal_eval(thing).decode()
    new_db.append((thing, name, code))

print(new_db)
</code></pre>
<p>Basically, this solutions takes the entry, reads it as a bytes object (using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval()</a>). Then converts it to a string object (using <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">bytes.decode()</a>). I think this is a more natural solution than just removing the first two, and the last character.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using <code>map</code> incorrectly. The first parameter has to be a function or a lambda. <code>i[2:len(i[0])-1]</code> is neither. So you can either define a function that does the same thing, i.e.:</p>
<pre><code>def removeFirstAndLast(theString):
    return theString[2:len(theString[0])-1]
for i in db:
    y=list(removeFirstAndLast,i[0]))
print (y)
</code></pre>
<p>Or just use an inline lambda:</p>
<pre><code>for i in db:
    y=list(map(lambda x: x[2:len(x[0])-1],i[0]))
print (y)
</code></pre>
</div>
<span class="comment-copy">Do you know why it writes a <code>b</code> prefix in the first place?</span>
<span class="comment-copy">Wait, how did something like this: <code>"b'D967E735-070D-48F9-A3BB-D00766D39F57'"</code> come to be? It looks like someone called <code>str</code> on a <code>bytes</code> object... the best solution is to <i>fix that</i></span>
<span class="comment-copy">Do you know why it writes a b prefix in the first place? it is a return value form a database query.</span>
<span class="comment-copy">It also appears that you don't know how <code>map()</code> works. The way you're trying to call it makes no sense. I agree with the previous commenters that you should fix this problem upstream somewhere, but if you change your code to: <code>y = map(lambda i: (i[0][2:-1], i[1], i[2]), db)</code> it should work.</span>
<span class="comment-copy">or decompose your tuple in a list comprehension:   y = [(x[0][2:len(x[0])-1], x[1], x[2]) for x in db]</span>
<span class="comment-copy">For those that prefer fewer subscripts: <code>[(x[2:-1], y, z) for (x, y, z) in db]</code></span>
<span class="comment-copy">Good.  It's important to more explicitly call out that what was missed is that someone called <code>str(thing)</code> rather than <code>thing.decode()</code> somewhere upstream.  The OP would be well advised to look for where his bytes object was cast to string and decode it instead.</span>
