<div class="post-text" itemprop="text">
<p>Looking for a elegant way to convert a list of substrings and the text between them to key, value pairs in a dict.  Example:</p>
<pre><code>s = 'k1:some text k2:more text k3:and still more'
key_list = ['k1','k2','k3']
(missing code)
# s_dict = {'k1':'some text', 'k2':'more text', 'k3':'and still more'}  
</code></pre>
<p>This is solvable using <code>str.find()</code>, etc, but I know there's a better solution than what I've hacked together.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Option 1</strong><br/>
If the keys don't have spaces or colons, you can simplify your solution with <code>dict</code> + <code>re.findall</code> (<code>import re</code>, first):</p>
<pre><code>&gt;&gt;&gt; dict(re.findall('(\S+):(.*?)(?=\s\S+:|$)', s))
{'k1': 'some text', 'k2': 'more text', 'k3': 'and still more'}
</code></pre>
<p>Only the placement of the colon (<code>:</code>) determines how keys/values are matched.</p>
<p><strong>Details</strong></p>
<pre><code>(\S+)   # match the key (anything that is not a space)
:       # colon (not matched)
(.*?)   # non-greedy match - one or more characters - this matches the value 
(?=     # use lookahead to determine when to stop matching the value
\s      # space
\S+:    # anything that is not a space followed by a colon 
|       # regex OR
$)      # EOL
</code></pre>
<p>Note that this code assumes the structure as presented in the question. It will fail on strings with invalid structures.</p>
<hr/>
<p><strong>Option 2</strong><br/>
Look ma, no regex...<br/>
This operates on the same assumption as the one above.</p>
<ol>
<li>Split on colon (<code>:</code>)</li>
<li>All elements but the first and last will need to be split again, on space (to separate keys and values)</li>
<li>zip adjacent elements, and convert to dictionary   </li>
</ol>
<p></p>
<pre><code>v = s.split(':')
v[1:-1] = [j for i in v[1:-1] for j in i.rsplit(None, 1)]

dict(zip(v[::2], v[1::2]))
{'k1': 'some text', 'k2': 'more text', 'k3': 'and still more'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the keys don't have spaces or colons in it, you could:</p>
<ul>
<li>split according to alpha followed by colon to get the tokens</li>
<li>zip half shifted slices in a dict comprehension to rebuild the dict</li>
</ul>
<p>like this:</p>
<pre><code>import re,itertools
s = 'k1:some text k2:more text k3:and still more'
toks = [x for x in re.split("(\w+):",s) if x]  # we need to filter off empty tokens
# toks =&gt; ['k1', 'some text ', 'k2', 'more text ', 'k3', 'and still more']
d = {k:v for k,v in zip(itertools.islice(toks,None,None,2),itertools.islice(toks,1,None,2))}
print(d)
</code></pre>
<p>result:</p>
<pre><code>{'k2': 'more text ', 'k1': 'some text ', 'k3': 'and still more'}
</code></pre>
<p>using <code>itertools.islice</code> avoids to create sub-lists like <code>toks[::2]</code> would do</p>
</div>
<div class="post-text" itemprop="text">
<p>Another <strong>regex</strong> magic with splitting the input string on <strong>key/value</strong> pairs:</p>
<pre><code>import re

s = 'k1:some text k2:more text k3:and still more'
pat = re.compile(r'\s+(?=\w+:)')
result = dict(i.split(':') for i in pat.split(s))

print(result)
</code></pre>
<p>The output:</p>
<pre><code>{'k1': 'some text', 'k2': 'more text', 'k3': 'and still more'}
</code></pre>
<hr/>
<ul>
<li>using <code>re.compile()</code> and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program</li>
<li><code>\s+(?=\w+:)</code> - the crucial pattern to split the input string by whitespace character(s) <code>\s+</code> if it's followed by a <em>"key"</em>(a word <code>\w+</code> with colon <code>:</code>).<br/> <code>(?=...)</code> - stands for lookahead positive assertion</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you have a list of your known keys (and maybe also values, but I don't address that in this answer), you can do it with a regex. There might be a shortcut if, say, you can simply assert that the last whitespace before a colon definitely signals the beginning of the key, but this should work as well:</p>
<pre><code>import re

s = 'k1:some text k2:more text k3:and still more'
key_list = ['k1', 'k2', 'k3']
dict_splitter = re.compile(r'(?P&lt;key&gt;({keys})):(?P&lt;val&gt;.*?)(?=({keys})|$)'.format(keys=')|('.join(key_list)))
result = {match.group('key'): match.group('val') for match in dict_splitter.finditer(s)}
print(result)
&gt;&gt; {'k1': 'some text ', 'k2': 'more text ', 'k3': 'and still more'}
</code></pre>
<p>Explanantion:</p>
<pre><code>(?P&lt;key&gt;({keys}))  # match all the defined keys, call that group 'key'
:                  # match a colon
(?P&lt;val&gt;.*?)       # match anything that follows and call it 'val', but
                   # only as much as necessary..
(?=({keys})|$)     # .. as long as whatever follows is either a new key or 
                   # the end of the string
.format(keys=')|('.join(key_list))
                   # build a string out of the keys where all the keys are
                   # 'or-chained' after one another, format it into the
                   # regex wherever {keys} appears.
</code></pre>
<p><strong>Caveat 1:</strong> If your keys can contain each other order is important, and you might want to go from long keys to shorter ones in order to force longest matches first: <code>key_list.sort(key=len, reverse=True)</code></p>
<p><strong>Caveat 2:</strong> If your key list contains regex metacharacters, it will break the expression, so they might need to be escaped first: <code>key_list = [re.escape(key) for key in key_list]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This version is a bit more verbose but straightforward-ish, it doesn't require any library and takes <code>key_list</code> into account:</p>
<pre><code>def substring_to_dict(text, keys, key_separator=':', block_separator=' '):
    s_dict = {}
    current_key = None

    for block in text.split(block_separator):
        if key_separator in block:
            key, word = block.split(key_separator, 1)
            if key in keys:
                current_key = key
                block = word
        if current_key:
            s_dict.setdefault(current_key, []).append(block)

    return {key:block_separator.join(s_dict[key]) for key in s_dict}
</code></pre>
<p>Here are some examples:</p>
<pre><code>&gt;&gt;&gt; keys = {'k1','k2','k3'}
&gt;&gt;&gt; substring_to_dict('k1:some text k2:more text k3:and still more', keys)
{'k1': 'some text', 'k2': 'more text', 'k3': 'and still more'}
&gt;&gt;&gt; substring_to_dict('k1:some text k2:more text k3:and still more k4:not a key', keys)
{'k1': 'some text', 'k2': 'more text', 'k3': 'and still more k4:not a key'}
&gt;&gt;&gt; substring_to_dict('', keys)
{}
&gt;&gt;&gt; substring_to_dict('not_a_key:test', keys)
{}
&gt;&gt;&gt; substring_to_dict('k1:k2:k3 k2:k3:k1', keys)
{'k1': 'k2:k3', 'k2': 'k3:k1'}
&gt;&gt;&gt; substring_to_dict('k1&gt;some;text;k2&gt;more;text', keys, '&gt;', ';')
{'k1': 'some;text', 'k2': 'more;text'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not that it's a great idea, but for the sake of completeness it is also an option to use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> in this case:</p>
<pre><code>from ast import literal_eval
s = 'k1:some text k2:more text k3:and still more'
key_list = ['k1','k2','k3']
s_ = s
for k in key_list:
            s_ = s_.replace('{}:'.format(k), '","{}": "'.format(k))

s_dict = literal_eval('{{{}"}}'.format(s_[2:]))

print(s_dict)
</code></pre>
<p>Output:</p>
<pre><code>{'k1': 'some text ', 'k2': 'more text ', 'k3': 'and still more'}
</code></pre>
</div>
<span class="comment-copy">So, is the key going to be a word without spaces?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ consider them known from a list (sans <code>:</code>) - I've edited the code.</span>
<span class="comment-copy">Hmm, it isn't going to be easy to figure out where one value ends and the next key begins with code.</span>
<span class="comment-copy"><code>s = 'k1:some text k2:I was on the k1 once k3:and still more'</code> ?</span>
<span class="comment-copy">@PatrickArtner would like to parse as <code>{... k2:'I was on the k1 once' ...}</code>.  Still well defined if <code>:</code> is reserved syntax.</span>
<span class="comment-copy">impressive.  Does <code>regexp</code> still make your eyes bleed, or does it get better with time? :)</span>
<span class="comment-copy">@ConfusinglyCuriousTheThird Regex has its moments. To play with fire, you'd either have to be a pyromaniac, or be ready to get burned. ;)</span>
<span class="comment-copy">@ConfusinglyCuriousTheThird Added an option 2 for you.</span>
<span class="comment-copy">this is pretty good!  I was hoping I could delimit by <code>key:</code> so a <code>:</code> in the value wouldn't throw things off...</span>
<span class="comment-copy">haha :)  I guess regex goes at the end of a very long list of things to do!</span>
<span class="comment-copy">this is a very nice soln.  Thank you for the regex explanation.</span>
