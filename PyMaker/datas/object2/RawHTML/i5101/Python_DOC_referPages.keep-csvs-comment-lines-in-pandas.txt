<div class="post-text" itemprop="text">
<p>So I have just started delving into the world of Pandas, and the first strange csv file I've found is one where there are two lines of comments (with different column widths) right at the beginning. </p>
<pre><code>sometext, sometext2
moretext, moretext1, moretext2
*header*
actual data ---
---------------
</code></pre>
<p>I know how to skip these lines with <code>skiprows</code> or <code>header=</code>, but, instead, how would I retain these comments while using <code>read_csv</code>? Sometimes comments are necessary as file meta information, and I do not want to throw them away.</p>
<p>Any ideas, guys? I will thoroughly appreciate any answers I will receive.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pandas is designed to read structured data.</p>
<p>For unstructured data, just use the built-in <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open</code></a>:</p>
<pre><code>with open('file.csv') as f:
    reader = csv.reader(f)
    row1 = next(reader)  # gets the first line
    row2 = next(reader)  # gets the second line
</code></pre>
<p>You can attach strings to the dataframe like this:</p>
<pre><code>df.comments = 'My Comments'
</code></pre>
<p><a href="https://stackoverflow.com/a/14688398/9209546"><strong>But note</strong></a>:</p>
<blockquote>
<p>Note, however, that while you can attach attributes to a DataFrame,
  operations performed on the DataFrame (such as groupby, pivot, join or
  loc to name just a few) may return a new DataFrame without the
  metadata attached. Pandas does not yet have a robust method of
  propagating metadata attached to DataFrames.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can read first metadata and then use <code>read_csv</code>:</p>
<pre><code>with open('f.csv') as file:
    #read first 2 rows to metadata
    header = [file.readline() for x in range(2)]
    meta = [value.strip().split(',') for value in header]
    print (meta)
    [['sometext', ' sometext2'], ['moretext', ' moretext1', ' moretext2']]

    df = pd.read_csv(file)
    print (df)

          *header*
    0  actual data
</code></pre>
</div>
<span class="comment-copy">Is there a file specification that states CSV files have comments or any metadata? Just read the two lines into a separate variable</span>
<span class="comment-copy">Well, what you imported as raw data can always be kept. IIUC you might be better using <code>iloc[some_row:]</code> and creating a copy of the DF for the rest of your calculations. Not the most memory-efficient way but it depends on your specific problem.</span>
<span class="comment-copy">@roganjosh Could you please elaborate more on <code>iloc[some_row:]</code> to extract the raw data?</span>
<span class="comment-copy">@Coolio2654, if one of the below solutions helped feel free to accept one (tick on left). this will help other users with the same issue.</span>
<span class="comment-copy">Ok, that is informative, I'll make sure I understand the basic file IO then. How could I re-import these extracted comments into my final pandas frame, then? Preferably at the top?</span>
<span class="comment-copy">It's not clear what you mean. If the columns in the first 2 rows align, use <code>pd.read_csv</code> and don't skip them. If they don't align, how do you intend to "reimport into final dataframe"? For metadata, see <a href="https://stackoverflow.com/questions/14688306/adding-meta-information-metadata-to-pandas-dataframe">Adding meta-information/metadata to pandas DataFrame</a>.</span>
<span class="comment-copy">I just want to somehow include these comments in my pandas object as explicitly comments, and not part of the regular data, occupying a special status like the column names.   So now I was thinking that I could use your code A) to extract the comments, B) feed everything in the csv after the comments into pandas, C) append the comments somehow into the pandas object.</span>
<span class="comment-copy">@Coolio2654, see my update, it's possible but with a massive disclaimer.</span>
<span class="comment-copy">This seems to work as well as I can expect at this point, since I am asking about a non-orthodox feature for Pandas. My single last question is whether whatever is in <code>df.comments</code> will be included if the file is saved as a csv again.</span>
<span class="comment-copy">While I chose the other answer as the final one, bec. jp cleared up for me that it is <i>definitively</i> impossible to include comment lines in pandas, and showed me a temporary solution via <code>df.comments</code>, this answer helped me extract those comments in the first place. Thanks, jezrael.</span>
