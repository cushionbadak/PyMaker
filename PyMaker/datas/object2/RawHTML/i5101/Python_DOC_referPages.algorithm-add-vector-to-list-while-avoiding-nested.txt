<div class="post-text" itemprop="text">
<p>I have a list of elements like this:</p>
<pre><code>new_element = {'start':start, 'end':end, 'category':cat, 'value': val}
</code></pre>
<p>Now, I want to append it to a list only if there's no other element that  already contains this new element (checking by start, end and category).</p>
<p>Also, if this element contains an element that is already in the list, I want to add it and delete the old one.</p>
<p>To sum up, I don't want nested elements and I only want to keep the larger one.</p>
<p>What I have so far (id is category):</p>
<pre><code>for ir in irs[:]:
    #is it nested into another?
    if ir['category'] == ir_new['category'] and ir['start'] &lt;= ir_new['start'] and ir['end'] &gt;= ir_new['end']:
        nested = True
    #another is nested in this one
    if ir['category'] == ir_new['category'] and ir['start'] &gt;= ir_new['start'] and ir['end'] &lt;= ir_new['end']:
        irs.remove(ir)
if not nested:
    #append in a list
    irs.append(ir_new)
    found += 1
</code></pre>
<p>This works, I think it's O(n*n). Maybe there's another way to do it more efficient by using dicts or pandas.</p>
<p>Some thoughts:</p>
<p>Should I do it before appending or append all and then check?</p>
<p>UPDATE 1:
There is an implementation of interval tree in this lib, the only issue is that it is not possible to delete intervales once added.</p>
<p><a href="http://bx-python.readthedocs.io/en/latest/lib/bx.intervals.intersection.html#bx.intervals.intersection.IntervalTree" rel="nofollow noreferrer">http://bx-python.readthedocs.io/en/latest/lib/bx.intervals.intersection.html#bx.intervals.intersection.IntervalTree</a></p>
<p>UPDATE 2:
<a href="https://github.com/chaimleib/intervaltree" rel="nofollow noreferrer">https://github.com/chaimleib/intervaltree</a> is interesting, the thing is that I cannot recover while discading partial overlaps. So I only need full overlaps / nest</p>
</div>
<div class="post-text" itemprop="text">
<p>rough draft:</p>
<p>define a class for your "ir" items, with __lt__ using 'start'</p>
<p>have a master dict with category as the key</p>
<p>store a sorted list of items with that category (bisect)</p>
<p>when you find the insert position based on start time, you can start comparing 
end times until you find an "ir" item which should not be deleted.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using pandas library and some coding I was able to get a decent solution</p>
<p>Initialize
...</p>
<pre><code>df = pd.DataFrame(columns=['start','end','seq','record','len','ir_1','ir_2'])
</code></pre>
<p>Add
...</p>
<pre><code>with l_lock:
    new_element = [ir_start, ir_end,ir_seq, record.id, ir_len, seq_q, seq_q_prime]
    df.loc[len(df)] = new_element
</code></pre>
<p>Delete dups
...</p>
<pre><code>for idx, row in df.iterrows():
    res = df[(df.index != idx) &amp; (df.start &gt;= row.start) &amp; (df.end &lt;= row.end)]
    df.drop(res.index,inplace=True)
</code></pre>
<p>As suggested in some comments, interval tree was also a possible solution but I could not get it work </p>
</div>
<span class="comment-copy">Please format your code properly.</span>
<span class="comment-copy">That is not a list, that is a <code>dict</code>... in any event, that looks O(N) to me.</span>
<span class="comment-copy">@pault hope this fit your standarts</span>
<span class="comment-copy">@juanpa.arrivillaga actually it is a list of dicts, the main element is a list, inside could be anything, seems like O(n*n) since I do this for every element (n) I want to add</span>
<span class="comment-copy">Would a segment tree help?</span>
<span class="comment-copy">What is "it" from "with lt using 'start'"</span>
<span class="comment-copy">That's double underscore convention in python being interpreted as bold text by stackoverflow. Fixed it. I'm referring to defining a comparison operator which will let the bisect module find the insert position in a sorted list.</span>
<span class="comment-copy">not lowercase "IT" but lowercase "LT". Stands for the less than operator. See documentation here: <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html</a></span>
<span class="comment-copy">If you can separate the items by category first, that could really cut down on insert time. However, if you need them all in one list for lookups (which are interspersed with inserts) then that makes it not so great.</span>
<span class="comment-copy">I will have to get back to this later. Gotta run for now.</span>
