<div class="post-text" itemprop="text">
<p>If I print out a dataframe directly, I get the correct output with correct datatypes. However, when I try to iterate the same dataframe, the datatypes are changing.</p>
<p>Here is my program:</p>
<pre><code>import pandas as pd

F = 9.37556366342
p = 0.000101673198518
df_between = 2
df_within = 471
df_total = 473

summary_stats_vals = [(F,p,df_between,df_within,df_total)]
labels = ['F-statistics', 'p-value', 'df-between', 'df-within', 'df-total']
df = pd.DataFrame.from_records(summary_stats_vals,columns=labels)

print(df)
print()

#Iterating the dataframe
for index, row in df.iterrows():
    df_row = list()
    df_row.append(index)
    for col in df.columns:
        df_row.append(row[col])
    print(row)
</code></pre>
<p>As you can see from the screenshot below, the data types of df_between, df_within and df_total have not been preserved while iterating. They are changing from int to float data type. What is the way I can preserve the data types while iterating a dataframe?</p>
<p><a href="https://i.stack.imgur.com/DIfph.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/DIfph.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>Because iterrows returns a Series for each row, it does not preserve dtypes across the rows (dtypes are preserved across columns for DataFrames).</p>
</blockquote>
<p>You could use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples" rel="nofollow noreferrer"><code>DataFrame.itertuples()</code></a> and get <a href="https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields" rel="nofollow noreferrer">namedtuples</a> for each row.</p>
<pre><code>&gt;&gt;&gt; for r in df.itertuples(index=False):
...     print(r)

Pandas(_0=9.3755636634199995, _1=0.000101673198518, _2=2, _3=471, _4=473)
&gt;&gt;&gt; for r in df.itertuples(index=False):
...     print(r._3)

471
</code></pre>
<p>Changing your column names to valid Python identifiers might make more sense:</p>
<pre><code>...
labels = ['F_statistics', 'p_value', 'df_between', 'df_within', 'df_total']
...

&gt;&gt;&gt; for r in df.itertuples(index=False, name='Stuff'):
...     print(r)

Stuff(F_statistics=9.3755636634199995, p_value=0.000101673198518, df_between=2, df_within=471, df_total=473)
&gt;&gt;&gt;
&gt;&gt;&gt; for r in df.itertuples(index=False, name='Stuff'):
...     print(r.df_total)

473
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>I haven't found, in the docs, an explicit statement that Series datatype is homogeneous, but it is inferred,it <em>acts like</em> a Numpy ndarray, and the constructor has a dtype parameter which applies to all the values in the Series:</p>
<blockquote>
<p>One-dimensional ndarray with axis labels (including time series).</p>
</blockquote>
<p>Looks like even if only one value in the Series is a float, the series dtype will be float:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1,2,3,4.1], index=['a','b','c','d'])
&gt;&gt;&gt; s
a    1.0
b    2.0
c    3.0
d    4.1
dtype: float64
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you so much wwii. Yeah that worked out very well. The code below is what I needed. Thanks again for your help.</p>
<pre><code>for r in df.itertuples(index=False, name='summary_stats'):
    for item in r:
        print(item)
</code></pre>
<p>I get this output:</p>
<pre><code>&gt;&gt;&gt;9.37556366342
   0.000101673198518
   2
   471
   473
</code></pre>
</div>
<span class="comment-copy">Please don't post images of data. Copy and paste it in you question formatted as code.</span>
