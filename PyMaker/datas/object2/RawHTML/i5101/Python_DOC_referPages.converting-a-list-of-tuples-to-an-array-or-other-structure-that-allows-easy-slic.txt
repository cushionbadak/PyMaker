<div class="post-text" itemprop="text">
<p>Using list comprehension I have created a list of tuples which looks like</p>
<pre><code>temp = [(1, 0, 1, 0, 2), (1, 0, 1, 0, 5), (1, 0, 2, 0, 2), (1, 0, 2, 0, 5)]
</code></pre>
<p>I could also create a list of lists if that works easier.</p>
<p>Either way, I would now like to get an array, or a 2D list, from the data. Something where I can easily access the value of the first element in each tuple in the above using slicing, something like</p>
<pre><code>first_elements = temp[:,0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" rel="nofollow noreferrer">numpy</a> for that type of indexing:</p>
<pre><code>import numpy as np
temp = [(1, 0, 1, 0, 2), (1, 0, 1, 0, 5), (1, 0, 2, 0, 2), (1, 0, 2, 0, 5)]

a = np.array(temp)
a[:, 0]
</code></pre>
<p>returns</p>
<pre><code>array([1, 1, 1, 1])
</code></pre>
<p><strong>Note</strong>: all of your inner lists must be of the same size at for this to work. Otherwise the array constructor will return an array of Python lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>zip</code> and <code>next</code> to get what you want:</p>
<pre><code>temp = [(1, 0, 1, 0, 2), (1, 0, 1, 0, 5), (1, 0, 2, 0, 2), (1, 0, 2, 0, 5)]
print(next(zip(*temp)))
</code></pre>
<p>Returns:</p>
<pre><code>(1, 1, 1, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> which allows you to fetch different combinations from you existing data-structure</p>
<p>For example to fetch first element of each <code>tuple</code> use:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; temp = [(1, 0, 1, 0, 2), (1, 0, 1, 0, 5), (1, 0, 2, 0, 2), (1, 0, 2, 0, 5)]
&gt;&gt;&gt; list(map(itemgetter(0),temp))
&gt;&gt;&gt; [1, 1, 1, 1]
</code></pre>
<p>To fetch second element</p>
<pre><code> &gt;&gt;&gt; list(map(itemgetter(1),temp))
 &gt;&gt;&gt; [0, 0, 0, 0]
</code></pre>
<p>To fetch first and second</p>
<pre><code> &gt;&gt;&gt; list(map(itemgetter(0,1),temp))
 &gt;&gt;&gt; [(1, 0), (1, 0), (1, 0), (1, 0)]
</code></pre>
</div>
<span class="comment-copy">That was embarrassingly straight forward. Thanks</span>
<span class="comment-copy">nice. Note that python 2 <code>zip</code> is not so good as it returns a <code>list</code>. In that case <code>itertools.izip</code> would be better.</span>
<span class="comment-copy">I don't like answering Python 2 questions :D but good point</span>
<span class="comment-copy">Thank you, I am using Python 3, so this answer works great</span>
<span class="comment-copy">the crime would be to answer for python 2 only. this answer is valid, albeit not optimal in python 2 but who cares? (and doesn't need the <code>numpy</code> bazooka)</span>
