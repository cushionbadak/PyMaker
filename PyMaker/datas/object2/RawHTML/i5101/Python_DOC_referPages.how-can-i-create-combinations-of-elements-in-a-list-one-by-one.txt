<div class="post-text" itemprop="text">
<p>I have a list of elements [1, 2, 3, 4, 5], I want to generate combinations one by one, like [1, 2, 3], [2, 4, 5], etc. </p>
<p>I tried using itertools.combinations but that makes a list of all possible combinations, which takes up too much memory space. </p>
<p>How do I access each new combination right when it is generated? </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do I access each new combination right when it is generated?</p>
</blockquote>
<p>Use a <code>for</code> loop, like so:</p>
<pre><code>import itertools
for a, b, c in itertools.combinations(range(1, 101), 3):
    if a**2 + b**2 == c**2:
        print(a, b, c)
</code></pre>
<blockquote>
<p><code>itertools.combinations</code> makes a list of all possible combinations</p>
</blockquote>
<p>No, it doesn't.</p>
<p><code>itertools.combinations()</code> is a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer"><em>generator function</em></a>. When used in a <code>for</code> loop, only one result is returned at a time. No <code>list</code> of all the results is ever created.</p>
</div>
<span class="comment-copy">Iterate through <code>list(itertools.combinations(a,3))</code> where <code>a = [1,2,3,4,5]</code></span>
<span class="comment-copy">Do you want to use <code>generator</code>?</span>
<span class="comment-copy">But itertools.combinations is a generator, thus there shouldn't be a memory problem?</span>
<span class="comment-copy">myList = [1, 2, 3, 4, 5]. list(itertools.combinations(myList, 3)) gives me a list of combinations, [1, 2, 3], [2, 3, 4], ... , [3, 4, 5]. This works fine for small myLists, but for a list with thousands of combinations it takes up a lot of memory space and time. I want to check if each combination of numbers can make a valid triangle. So I want to generate one combination, check it, and stop if it fits, instead of making a list of all the combinations and then checking them.</span>
<span class="comment-copy">N.b. You don't say if you are using Python2 or Python3. <code>range()</code> in Python3 returns a generator object. <code>range()</code> in Python2 returns a <code>list</code>. If you are conserving memory, use <code>xrange()</code> in Python2.</span>
