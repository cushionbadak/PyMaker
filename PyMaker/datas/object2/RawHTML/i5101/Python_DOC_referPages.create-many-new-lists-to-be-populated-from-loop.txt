<div class="post-text" itemprop="text">
<p>What is the best way to generate empty, named lists? Do they need to be created manually? I had hoped the following would work:</p>
<pre><code>fieldlist = ['A', 'B', 'C']

for fieldname in fieldlist:
    str(fieldname) + 'list' = []
</code></pre>
<p>Actual result:</p>
<pre><code>  File "&lt;interactive input&gt;", line 2
SyntaxError: can't assign to operator
</code></pre>
<p>Desired result:</p>
<pre><code>Alist = []
Blist = []
Clist = []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a dictionary. There is rarely, if ever, a need to dynamically name variables from strings.</p>
<pre><code>fieldlist = ['A', 'B', 'C']

d = {}

for fieldname in fieldlist:
    d[str(fieldname) + 'list'] = []

# {'Alist': [], 'Blist': [], 'Clist': []}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/functions.html#locals" rel="nofollow noreferrer">globals</a>. Also you could try locals(), vars(), then check this URL to understand <a href="https://stackoverflow.com/questions/7969949/whats-the-difference-between-globals-locals-and-vars">the differences</a>.</p>
<p>PS: Thanks the corrections from @ShadowRanger.</p>
<p><strong>As API defined:</strong></p>
<p><strong>globals()</strong></p>
<p><em>Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called).</em></p>
<p><strong>The codes will be like below if using globals():</strong></p>
<pre><code>fieldlist = ['A', 'B', 'C']

for fieldname in fieldlist:
    name=str(fieldname) + 'list'
    globals()[name]=[]
print (Alist, Blist, Clist)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[] [] []
[Finished in 0.179s]
</code></pre>
</div>
<span class="comment-copy">Python? You need to tag the language if you want language-specific assistance.</span>
<span class="comment-copy">Probably the best way to do this is to use a dictionary.</span>
<span class="comment-copy">@joechoj, did one of the below solutions help? If so, feel free to accept an answer (tick on left).</span>
<span class="comment-copy">As I'm using numpy to do calculations with &amp; on the arrays, I'd like to have them as standalone lists, and am pretty unused to working with dicts. Can I create them using a dict and then use dynamic assignment statements to split them out? Or perhaps it's best just to create them explicity, even if it's cumbersome?</span>
<span class="comment-copy">Modifications to the <code>locals()</code> dictionary <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">are explicitly documented as being a bad idea</a>; there is no guarantee that the modifications actually work. And in fact, it would not work in the general case on modern Python; the only reason it works here is because you did it at global scope, where <code>locals()</code> returns the same <code>dict</code> that <code>globals()</code> returns (and module globals really are stored in a mutable <code>dict</code>, so changing it works); inside a function body, the <code>dict</code> returned by <code>locals()</code> can't be mutated to do anything useful.</span>
<span class="comment-copy">@ShadowRanger, thanks for the corrections.</span>
