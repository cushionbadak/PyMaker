<div class="post-text" itemprop="text">
<p>I have a code which is written in Twisted and I am having trouble with converting it to Asyncio. From my problem the problem is about protocol in Server class. The code which is written with Twisted is this: </p>
<pre><code>from twisted.internet import reactor, protocol
class Client():
    def __init__(self):
        self.something = ""

    def dataReceived(self, packet):
        print(packet)

    def makeConnection(self, transport):
        self.transport = transport
        self.server = self.factory

    def connectionLost(self, args):
        print("Connection lost.")

class Server(protocol.ServerFactory):
    protocol = Client

if __name__ == '__main__':
    validPort = []
    S = Server()
    try:
        reactor.listenTCP(44444, S)
        validPort.append(44444)
    except:
        print('Problem about port.')

    if not validPort == []:
        print('Server is running.')
    reactor.run()
</code></pre>
<p>And this is the code which I converted to Asyncio and doesnt't work (I am not sure the problem is about protocol in Server Class):</p>
<pre><code>import asyncio, logging, sys
SERVER_ADDRESS = ('localhost', 44444)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(name)s: %(message)s',
    stream=sys.stderr,
)
log = logging.getLogger('main')

event_loop = asyncio.get_event_loop()

class Client():
    def __init__(self):
        self.something = ""

    def data_received(self, packet):
        self.log.debug('received {!r}'.format(data))
        print(packet)

    def connection_made(self, transport):
        self.transport = transport
        self.server = self.factory
        self.log = logging.getLogger(
            'EchoServer_{}_{}'.format(*self.address)
        )
        self.log.debug('connection accepted')

    def connection_lost(self, args):
        if error:
            self.log.error('ERROR: {}'.format(error))
        else:
            self.log.debug('closing')
        super().connection_lost(error)

class Server(asyncio.Protocol):
    protocol = Client

if __name__ == '__main__':
    S = Server()
    factory = event_loop.create_server(S, *SERVER_ADDRESS)
    server = event_loop.run_until_complete(factory)
    log.debug('starting up on {} port {}'.format(*SERVER_ADDRESS))
    try:
        event_loop.run_forever()
    finally:
        log.debug('closing server')
        server.close()
        event_loop.run_until_complete(server.wait_closed())
        log.debug('closing event loop')
        event_loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In asyncio there is no <code>ProtocolFactory</code> abstract interface. Just pass <code>Client</code> or <code>lambda: Client</code> to <code>loop.create_server()</code></p>
</div>
<span class="comment-copy">We are not going to convert it for you. SO is not a coding service. If you have a specific problem please explain it in details.</span>
<span class="comment-copy">The problem is when I convert it to Asyncio I am having problem about protocol in Server class.</span>
<span class="comment-copy">I edited question.</span>
<span class="comment-copy">Now add a proper error description as well.</span>
<span class="comment-copy">I am not getting any error message.</span>
<span class="comment-copy">How can I pass Client to create_server? And where to write pass?</span>
<span class="comment-copy">The first parameter of <code>loop.create_server()</code> is a protocol factory. The factory is a callable which is called without arguments and returns a protocol. See <a href="https://docs.python.org/3/library/asyncio-protocol.html#tcp-echo-server-protocol" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> for example</span>
