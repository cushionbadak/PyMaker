<div class="post-text" itemprop="text">
<p><strong>Note:-</strong> Wait before you mark my question as duplicate please read it completely.</p>
<p>I wan't to <code>run</code> a python file using another.
I have tried using <code>runpy</code>,<code>os.system</code> &amp; <code>subprocess</code>. The problem with <code>subprocess</code> and <code>os.system</code> command is that it fails for systems which have python2 and python3 both installed if i just run with <code>python</code>. If i run it with <code>python3</code> i fails for people having single installation.</p>
<p>The problem with <code>runpy</code> is that it does not work according to my needs.
The following is run my directory structure</p>
<pre><code>test\
   average\
       average.py
       average_test.py
   many similar directories like average...
   run_tests.py
</code></pre>
<p>The content of average is </p>
<pre><code>def average(...args):
     # Do something
</code></pre>
<p>The content of average_test.py</p>
<pre><code>from average import average
def average_test():
    assert average(1,2,3) == 2
</code></pre>
<p>Now if i use <code>runpy.run_path</code> it throws a ImportError saying <code>average</code> is not a module. The <code>os.system</code> and <code>subprocess.call</code> works perfectly but I hope my "testing_framework" will be used by many so I can't use the above two functions. Isn't there any other way to do it. I have researched the whole of SO and google but didn't find a solutions. </p>
<p>Also <code>sys.path.append/insert</code> will not help as I can't tell my "users" to add this to every file of theirs. </p>
<p>Is there no easy way to do it? I mean like <code>pytest</code> accomplishes this so there must be a way.</p>
<p>Thank you moderators for reading my question.</p>
<p><strong>EDIT</strong> I forgot to mention that I wan't the code to be run in <code>if __name__ == '__main__'</code> block too and I have also tried using a snippet from another SO answer which fails too. The snippet was</p>
<pre><code>def exec_full(filepath):
    global_namespace = {
        "__file__": filepath,
        "__name__": "__main__",
    }
    with open(filepath, 'rb') as file:
        exec(compile(file.read(), filepath, 'exec'), global_namespace)
</code></pre>
<p>Please note that the directory structure was just an example the user may have a different code/directory structure.</p>
<p><strong>NOTE:-</strong> I found the answer. I needed to do <code>subprocess.call([sys.executable,file_path])</code>. <code>sys.executable</code> returns the path for the python executable file for the current version.</p>
</div>
<div class="post-text" itemprop="text">
<pre>

    Create an empty __init__.py in average folder
    And then try to import

    from average import average 

    it would work like charm :)

    test\
       average\
           average.py
           average_test.py
           __init__.py
       many similar directories like average...
       run_tests.py

</pre>
</div>
<span class="comment-copy">You could just import it? That runs a file...</span>
<span class="comment-copy">I think i forgot to mention that the code in the <code>if __name__ == '__main__'</code> should be run too.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/11160643/how-to-import-a-module-as-main" title="how to import a module as main">stackoverflow.com/questions/11160643/â€¦</a> take a look at this</span>
<span class="comment-copy">I took and all answers suggest changing the code which you  already know from my question that I can't. The solution of @Unode might work but recommends not to use in production code. :(</span>
<span class="comment-copy">If the code comes from a separate user, maybe just start it in a separate process using <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess.run</code></a>?</span>
<span class="comment-copy">I can't edit the user code</span>
