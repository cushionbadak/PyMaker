<div class="post-text" itemprop="text">
<p>Currently I have code which takes in a set of tuples each having the format (A,B). Over the course of the set, each A has a multiple B's which it is linked to. I want to create another set that contains tuples of the format (A, B1, B2, B3) where B1, B2, B3, etc. are values of B associated with A in the first set. Currently I have this code:</p>
<pre><code>data_set = set(tuple(x) for x in data) #converts given list of lists to set of tuples
association = set() #empty set to add (A, B1, B2, etc.) tuples
    for j in data_set: #loop through data set
        if (j[0]) not in association:
            associaton.add((j[0])) #This makes the first value of of my new tuple the value I want to find
        else:
           #I want to replace the current tuple with the current tuple plus the value of j[1]
</code></pre>
<p>How could I find the correct tuple in association to update. I plan on updating a tuple A by using A = A + (j[1]). </p>
</div>
<div class="post-text" itemprop="text">
<p>I'll lean out of the window and claim that you're describing a <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY problem</a>.</p>
<p>It looks like <code>tuple</code> is not the data structure you are looking for. If you have a list of tuples of the form <code>(A, B)</code> and want to group them by their first item, you could use a <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=dictionary#dictionaries" rel="nofollow noreferrer">dictionary</a> like this:</p>
<pre><code>association = {}  # empty dictionary
for j in data_set:
    if j[0] not in association:
        association[j[0]] = []  # initialize empty list
    association[j[0]].append(j[1])
</code></pre>
<p>If your input data was <code>(A, B1), (A, B2), (A, B3)</code>, the result will be <code>{A: [B1, B2, B3]}</code>.</p>
<p>The above code can be cleared up a bit using tuple unpacking:</p>
<pre><code>association = {}  # empty dictionary
for key, value in data_set:
    if key not in association:
        association[key] = []  # initialize empty list
    association[key].append(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't change the value inside of a tuple, but what you can do is making it a list and making it a tuple after. Something like this:</p>
<pre><code>tupl = ("a", "b", "c")
tupl = list(tupl)   # will change it to a list: ["a", "b", "c"]
tupl.append("d")    # appends "d" to the list
tupl = tuple(tupl)  # changes it back to a tuple ("a", "b", "c", "d")
</code></pre>
</div>
<span class="comment-copy"><code>tuples</code> are immutable... i.e. you cannot change it.  You can use <code>list(x)</code> instead.</span>
<span class="comment-copy"><code>(j[0])</code> isn't a tuple; it's just <code>j[0]</code> in grouping parentheses. <code>(j[0],)</code> would be a tuple.</span>
<span class="comment-copy">You could use a <code>collections.defaultdict</code> with a <code>list</code>: <code>association = defaultdict(list)</code> which would remove the <code>if</code>.</span>
