<div class="post-text" itemprop="text">
<p>I have a java program that I have to run from python, get the output and store the result in 3 variables (if it works as expected, should print 3 values, each one on a different line).</p>
<p>This is the code that I'm using:</p>
<pre><code>stdout1 = subprocess.getoutput("java -jar test.jar" + " -r " + path1)
x, y, z = stdout1.splitlines()[:]
</code></pre>
<p>If the path1 is not found by the test.jar program it will output a message to check the path.</p>
<p>Is there a way to check if the program executed correctly, and only then store the output?</p>
<pre><code>x, y, z = stdout1.splitlines()[:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use </p>
<pre><code>import subprocess

try:
    stdout1 = subprocess.check_output("java -jar test.jar" + " -r " + path1, shell=True)
except subprocess.CalledProcessError as e:
    # handle error
</code></pre>
<p><a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">https://docs.python.org/2/library/subprocess.html#subprocess.check_output</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could check the returned code of the subprocess explicitly:</p>
<pre><code>from subprocess import run, PIPE

process = run('java -Dfile.encoding=utf-8 -jar test.jar'.split()
              + ['-r', path], stdout=PIPE, encoding='utf-8')
if process.returncode == 0:  # success
    x, y, z = process.stdout.splitlines()
</code></pre>
<p>Note: this code runs <code>java</code> executable without starting a new shell.</p>
<p>The code uses the explicit utf-8 encoding to avoid depending on the default locale encoding that might not support all necessary characters.</p>
<hr/>
<p>A minimal code change in your case would be to replace <code>getoutput()</code> with <code>getstatusoutput()</code> which returns <code>(exitcode, output)</code> tuple and check whether <code>exitcode</code> is zero to determine success. </p>
<p><code>getstatusoutput()</code> starts a new shell    even if it is unnecessary and therefore it is not recommended. Also, passing <code>path</code> unescaped opens you to the shell command injection vulnerability if you start the shell.</p>
<p><code>getstatusoutput()</code> calls <code>check_output()</code> internally and catches the exception (it is equivalent to the previous answer).</p>
</div>
<span class="comment-copy">Thank you! Is there an equivalent for python 3.x? I get an error here except subprocess.CalledProcessError as e: invalid syntax.</span>
<span class="comment-copy">This works in python3, maybe you have the wrong indent or something</span>
<span class="comment-copy">The error came from Atom python 3 kernel. I've tested it in jupyter notebook and works as expected. Thank you!</span>
<span class="comment-copy">@AMayer Interesting, it's standard Python3 error syntax <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a> So i'm not sure what would be wrong, must be something else</span>
<span class="comment-copy">It is buggy, I commented a line, saved the file and run Atom just like jupyter with shift+enter each line to see the output and it tries to run the commented line and still prints an error except subprocess.CalledProcessError as e: invalid syntax. But the same code works as expected if i run it from terminal or jupyter.</span>
<span class="comment-copy">Thank you!. It works perfectly on my workstation. Will it work on python 2.7 as well? I have to provide this code and I cannot assume that everyone uses python 3.x. from subprocess import run, PIPE ImportError: cannot import name run.</span>
<span class="comment-copy">@AMayer yes, run() can be implemented on Python 2.7 too (in terms of Popen.communicate()). Though, Python 2.7 won't be maintained past 2020. I wouldn't start <i>new</i> project in Python 2.</span>
<span class="comment-copy">I understand. Am I missing something then here?  from subprocess import run, PIPE ImportError: cannot import name run. I just installed python 2.7 to test it and got that error.</span>
<span class="comment-copy">@AMayer: I can only repeat my previous comment. For clarity, there is no <code>subprocess.run</code> on Python 2.7 as well as there is no <code>subprocess.getoutput()</code>. One can define them using existing <code>subprocess.Popen</code> class and its method <code>.communicate()</code>.</span>
