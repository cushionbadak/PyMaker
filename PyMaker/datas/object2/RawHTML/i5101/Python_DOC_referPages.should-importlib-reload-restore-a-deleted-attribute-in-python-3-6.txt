<div class="post-text" itemprop="text">
<p>I'm looking into these two related questions: <a href="https://stackoverflow.com/questions/48809458/del-has-some-kind-of-memory">here</a> and <a href="https://stackoverflow.com/questions/48808456/deleted-a-modules-function-on-interactive-how-to-re-import-importlib-reload-n">here</a>.</p>
<p>I am seeing a behavior I do not expect in Python 3.6, which differs from behavior using plain <code>reload</code> in Python 2.7 (and 3.4). Namely, it seems that a module attribute that would be populated during module initialization or when re-exec-ing the module during a reload, is not restored after its local name is removed with <code>del</code> ... see below:</p>
<p>For Python 3.6:</p>
<pre><code>In [1]: import importlib

In [2]: import math

In [3]: del math.cos

In [4]: math.cos
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-4-05b06e378197&gt; in &lt;module&gt;()
----&gt; 1 math.cos

AttributeError: module 'math' has no attribute 'cos'

In [5]: math = importlib.reload(math)

In [6]: math.cos
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-6-05b06e378197&gt; in &lt;module&gt;()
----&gt; 1 math.cos

AttributeError: module 'math' has no attribute 'cos'

In [7]: importlib.reload(math)
Out[7]: &lt;module 'math' from '/home/ely/anaconda/envs/py36-keras/lib/python3.6/lib-dynload/math.cpython-36m-x86_64-linux-gnu.so'&gt;

In [8]: math.cos
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-8-05b06e378197&gt; in &lt;module&gt;()
----&gt; 1 math.cos

AttributeError: module 'math' has no attribute 'cos'
</code></pre>
<p>For Python 2.7 (and <a href="https://stackoverflow.com/questions/48813320/should-importlib-reload-restore-a-deleted-attribute-in-python-3-6?noredirect=1#comment84631211_48813320">Python 3.4</a>):</p>
<pre><code>In [1]: import math

In [2]: del math.cos

In [3]: math.cos
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-3-05b06e378197&gt; in &lt;module&gt;()
----&gt; 1 math.cos

AttributeError: 'module' object has no attribute 'cos'

In [4]: reload(math)
Out[4]: &lt;module 'math' from '/home/ely/anaconda/lib/python2.7/lib-dynload/math.so'&gt;

In [5]: math.cos
Out[5]: &lt;function math.cos&gt;
</code></pre>
<p>I have tried chasing the details of importlib from the <a href="https://github.com/python/cpython/blob/94987826e89e8a89c20f081e18be33fc840e6203/Lib/importlib/__init__.py#L133" rel="nofollow noreferrer">source code</a> down to the <a href="https://github.com/python/cpython/blob/5364b5cd7571f2dfa75acd37b388c14ac33fef73/Objects/moduleobject.c#L358" rel="nofollow noreferrer">C-level module exec function</a>, and I can't see any logic that would cause it to fail to write the re-initialized <code>cos</code> attribute back into the module's dict of module-scope globals.</p>
<p>My suspicion is that it's some type of bug in the C-level re-execution logic that looks at the attribute names found in the module's dictionary (the one that exists from whenever it was previously imported, and may be mutated to have deleted an attribute, like in my example), and then when using <code>exec</code> to write the module's execution side-effects into that dictionary, it's skipping key names (like <code>cos</code>) that don't exist in the module's namespace, which is different from the Python 2.7 behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is an (intended? unintended?) effect of <a href="https://www.python.org/dev/peps/pep-0489/#module-reloading" rel="nofollow noreferrer">PEP 489</a>, an overhaul of extension module initialization. The PEP includes the following section:</p>
<blockquote>
<h2>Module Reloading</h2>
<p>Reloading an extension module using importlib.reload() will continue to have no effect, except re-setting
  import-related attributes.</p>
<p>Due to limitations in shared library loading (both dlopen on POSIX and
  LoadModuleEx on Windows), it is not generally possible to load a
  modified library after it has changed on disk.</p>
<p>Use cases for reloading other than trying out a new version of the
  module are too rare to require all module authors to keep reloading in
  mind. If reload-like functionality is needed, authors can export a
  dedicated function for it.</p>
</blockquote>
<p>The <a href="https://github.com/python/cpython/blob/d5cacbb1d9c3edc02bf0ba01702e7c06da5bc318/Python/import.c#L2031" rel="nofollow noreferrer">code change</a> that appears to be responsible for this behavior was introduced in the commit that implemented PEP 489.</p>
<p>Even Python 3.4 didn't support truly reloading an extension module from a changed file; the closest it had was code to <a href="https://github.com/python/cpython/blob/v3.4.8/Python/import.c#L626" rel="nofollow noreferrer">save a copy</a> of the module's dict after initialization and <a href="https://github.com/python/cpython/blob/v3.4.8/Python/import.c#L677" rel="nofollow noreferrer">copy the contents</a> back into the module's actual dict on a reload. That code <a href="https://github.com/python/cpython/blob/v3.6.4/Python/import.c#L564" rel="nofollow noreferrer">still</a> <a href="https://github.com/python/cpython/blob/v3.6.4/Python/import.c#L615" rel="nofollow noreferrer">exists</a>, but it is no longer triggered for reloads, and I don't know if it was ever intended to be triggered for reloads. I believe that code is currently only used for subinterpreters.</p>
</div>
<span class="comment-copy">From doc: When a module is reloaded, its dictionary (containing the moduleâ€™s global variables) is retained. Read more <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">docs.python.org/3/library/importlib.html#importlib.reload</a></span>
<span class="comment-copy">@Kasramvd This does not explain it though. The dictionary is retained sure, but why are not new keys (like <code>cos</code>) added into the dictionary when the module is re-executed? The detail that it re-uses the existing module dictionary doesn't seem to address the question unfortunately, because it does that in Python 2.7 too, just that it re-populates it with module attributes as needed.</span>
<span class="comment-copy">note that the second version also works in python 3.4. So the change must have appeared in between</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">"It is generally not very useful to reload built-in or dynamically loaded modules. Reloading <code>sys</code>, <code>__main__</code>, <code>builtins</code> and other key modules is not recommended. In many cases extension modules are not designed to be initialized more than once, and may fail in arbitrary ways when reloaded."</a></span>
<span class="comment-copy">@user2357112 But <code>math</code> clearly is designed to be reloaded, since it works in Python 2.7 and Python 3.4. I don't believe that comment from the docs is applicable to this problem either.</span>
<span class="comment-copy">I guess there isn't any satisfying answer beyond, "this is just the random thing that was committed for Python 3.6, since the devs consider this to essentially be undefined behavior." Thanks for linking the code change. I do think we should be careful about your line, "Python 3.4 didn't support truly reloading an extension module from a changed file..." The question is <i>not</i> about re-loading a dynamic extension when its source changed, rather it is just a question of why re-initialization is not <i>always</i> attempted, especially when the underlying module <i>did not</i> change.</span>
