<div class="post-text" itemprop="text">
<p>The documents I have have sections that are nicely denoted by titles. I want to split the documents into sections using these titles. Example:</p>
<pre><code>1.1 Lorem Ipsum

Blah blah blah
9 (page break, never will have a period in it though)
Bleh bleh bleh as referenced in Section 1.3 hey hey hey

1.2 Lorem Ipsumus

Blah blah blah
</code></pre>
<p>I would like a regex expression that can take the titles and the text until the next title appears. So the desired results for the example would be,</p>
<pre><code>1.1 Lorem Ipsum Blah blah blah bleh bleh bleh as referenced in Section 1.3 hey hey hey
</code></pre>
<p>And</p>
<pre><code>1.2 Lorem Ipsumus Blah blah blah
</code></pre>
<p>One thing I can always count on is that the section titles will be a new line that starts with some sort of number x.x followed by a few words and since that is pretty unique to the titles, that what I would like to search on.</p>
<p>Basically if I see anything that is a new line and of the form "Section 1.2 Definitions" I know that is a new section and would like to grab all the text from there until the next new line that starts with "Section 1.3 Examples" or perhaps "Section 2.1 Terms". Section titles always start a new line and are of the form "Section 1.3 Examples", "Article 1.3 Examples", or "1.3 Examples". </p>
<p>Sometimes there are references to titles in the middle of a line and these I would like to ignore. This can be seen in the example. </p>
<p>Does anyone know how to do this? Preferebly in python but the regex should be sufficient if not.</p>
<p>p.s. Keeping the page numbers or not is optional but the regex would ideally not create new sections based on the page numbers </p>
<hr/>
<p>EDIT: So far, here is the MWE I have running. Its not quite there.</p>
<pre><code>import re
doc_splitter = re.compile(r"(?&lt;=\n)(?P&lt;secname&gt;[\w]+ )(\d+\.\d+ .*?)(?&lt;=\n)(?P&lt;secname2&gt;[\w]+ )(?=\d+\.\d+|\Z)", re.DOTALL)

text = """

Section 1.1 Lorem Ipsum

Blah blah blah
9
Bleh bleh bleh Section 1.1 hey hey hey

Section 1.2 Lorem Ipsumus 
ref Section 1.3

Blah blah blah

Section 1.3 hey hey

Section 1.4

"""


for match in doc_splitter.finditer(text):
    print([match.group()])
</code></pre>
<p>Ideally it would return:</p>
<pre><code>['Section 1.1 Lorem Ipsum Blah blah blah 9 Bleh bleh bleh Section 1.1 hey hey hey']
['Section 1.2 Lorem Ipsumus ref Section 1.3 Blah blah blah']
['Section 1.3 hey hey']
['Section 1.4']
</code></pre>
<p>But instead it returns:</p>
<pre><code>['Section 1.1 Lorem Ipsum\n\nBlah blah blah\n9\nBleh bleh bleh Section 1.1 hey hey hey\n\nSection ']
['Section 1.3 hey hey\n\nSection ']
</code></pre>
<p>Thanks for all the help everyone! If anyone has any thoughts on how to get this last problem fixed it would be very appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>Just to put my two cents in - you could use</p>
<pre><code>^
(?:Section\ )?\d+\.\d+
[\s\S]*?
(?=^(?:Section\ )?\d+\.\d+|\Z)
</code></pre>
<p>with the <code>verbose</code> and <code>multiline</code> modifier, see <a href="https://regex101.com/r/qgYPxI/2" rel="nofollow noreferrer"><strong>a demo on regex101.com</strong></a>.
<hr/>
In <code>Python</code>:</p>
<pre><code>import re

data = """
1.1 Lorem Ipsum

Blah blah blah
9 (page break, never will have a period in it though)
Bleh bleh bleh as referenced in Section 1.3 hey hey hey

1.2 Lorem Ipsumus

Blah blah blah
"""

rx = re.compile(r'''
    ^
    (?:Section\ )?\d+\.\d+
    [\s\S]*?
    (?=^(?:Section\ )?\d+\.\d+|\Z)

    ''', re.VERBOSE | re.MULTILINE)

parts = [match.group(0) for match in rx.finditer(data)]
print(parts)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you try <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a>, it will help you visualize your regex. Also, the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">documentation for re</a> is very useful to learn (or remember) how the special characters work.</p>
<p>With your example I'd use this regex (with named groups):</p>
<pre><code>(?P&lt;section_number&gt;\d\.\d) (?P&lt;section_title&gt;[\w ]+)\n\n\s*(?P&lt;body&gt;.+?)\s*(?=\d\.\d[\w ]+|$)
</code></pre>
<p>Breaking it down:</p>
<p>For the section number and title I used named groups <code>(?P&lt;section_number&gt;\d\.\d)</code> and <code>(?P&lt;section_title&gt;[\w ]+)</code> separated by a space.</p>
<p>The body <code>(?P&lt;body&gt;.+?)</code> is follwed by the positive lookahead <code>(?=\d\.\d[\w ]+|$)</code>. This means that it will stop capturing text when another section is about to begin or when the document ends. It needs to be nongreedy (<code>+?</code>) or you'll en up with just one section and the rest of the document as the body. </p>
<p>NOTE: you need to enable <code>re.DOTALL</code> when you compile or search for matches or the point will not match new line characters.</p>
<p>If you want the section title to match the beggining of a string you can also add a <code>^</code> to the lookahead but you need to enable <code>re.MULTILINE</code>. You'd also have to change the <code>$</code> at the end to <code>\Z</code> so it matches only the end of the document and not the end of every line.</p>
<pre><code>(?P&lt;section_number&gt;\d\.\d) (?P&lt;section_title&gt;[\w ]+)\n\n\s*(?P&lt;body&gt;.+?)\s*(?=^\d\.\d[\w ]+|\Z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The regex you are looking for might be similar to this:</p>
<pre><code>doc_splitter = re.compile(r"(?&lt;=\n)(\d+\.\d+ .*?)(?&lt;=\n)(?=\d+\.\d+|$)", re.DOTALL)
</code></pre>
<p>, which, given python code, can be run on the whole document with <code>finditer</code>:</p>
<pre><code>text = """
1.1 Lorem Ipsum

Blah blah blah
9 (page break, never will have a period in it though)
Bleh bleh bleh

1.2 Lorem Ipsumus

Blah blah blah"""
for match in doc_splitter.finditer(text):
    print([match.group()])  # print in list to suppress \n interpretation 
</code></pre>
<p>Prints:</p>
<pre><code>['1.1 Lorem Ipsum\n\nBlah blah blah\n9 (page break, never will have a period in it though)\nBleh bleh bleh\n\n']
['1.2 Lorem Ipsumus\n\nBlah blah blah\n']
</code></pre>
<p>which seems to be what you want.</p>
<p>If you iterate the data differently you might be able to get rid of the cumbersome lookaround assertions, which might not cleanly translate into other languages that demand constant length lookarounds. The core is given with <code>(\d+\.\d+ .*?)</code> and forcing a full match.</p>
<hr/>
<h2>Alternative</h2>
<p>Jan's answer is good, but I also wanted to add a solution that solves the problem without lookahead conditions, since they look redundant:</p>
<pre><code>import re
doc_splitter = re.compile(r"^(?:Section\ )?\d+\.\d+", re.MULTILINE)
text = """

Section 1.1 Lorem Ipsum

Blah blah blah
9
Bleh bleh bleh Section 1.1 hey hey hey

Section 1.2 Lorem Ipsumus 
ref Section 1.3

Blah blah blah

Section 1.3 hey hey

Section 1.4

"""
starts = [match.span()[0] for match in doc_splitter.finditer(text)] + [len(text)]
sections = [text[starts[idx]:starts[idx+1]] for idx in range(len(starts)-1)]
for section in sections:
    print([section])
</code></pre>
<p>Prints:</p>
<pre><code>['Section 1.1 Lorem Ipsum\n\nBlah blah blah\n9\nBleh bleh bleh Section 1.1 hey hey hey\n\n']
['Section 1.2 Lorem Ipsumus \nref Section 1.3\n\nBlah blah blah\n\n']
['Section 1.3 hey hey\n\n']
['Section 1.4\n\n']
</code></pre>
<p>The regex only searches for the start of a new section, and should be easy enough to maintain and extend. We have to go through the additional step of splitting the <code>text</code> by hand from each new start, which serves as the ending for the former section.</p>
<p>While a regex is perfectly capable of handling this kind of matching in a single step, I personally prefer to keep them as short as possible. They are difficult enough to understand already.</p>
</div>
<span class="comment-copy">If I was just searching between 'Section' to 'Section' I think I could get it. This seems like much more than a simple regex expression though (I could be wrong) and if someone knows how to do it in a few minutes (like Arne below did) then it seems like a productive question to ask.</span>
<span class="comment-copy">I also think it could be fairly relevant to others in a similar situation</span>
<span class="comment-copy">Nit: If you give your sample in the form of a triple-string you offer your helpers unambiguous input =)</span>
<span class="comment-copy">Please do not add the solution to your question. If you found a solution that worked best for you, then you can accept it below or answer your own question. This site encourages multiple solutions from other users, as the one that worked best for you may not work the best for someone else.</span>
<span class="comment-copy">fyi, I added an alternative that works on your MWE.</span>
<span class="comment-copy">Thanks Jan. I had figured out (via a different way) how to get the same result if the title only started with a number. But how would this change if '1.2' was occasionally 'Section 1.2' instead? Or could you make this work with the second example I give in the question?</span>
<span class="comment-copy">@sfortney: Updated the answer and the demo.</span>
<span class="comment-copy">Thats it! I tried that with my application (more than just the example above) and it worked too so I think it should be good. One final question, how would this change if the next clause could start with <i>either</i> 'Section 1.2' or 'Article 1.2'. Is there a way to make it so it doesn't matter if it is either one of those words (or none and just a number)? Would it just be as simple as replacing (?:Section\ ) with (?:[\w] )?</span>
<span class="comment-copy">Either way I will accept your answer because it answered all my examples above. Thanks!</span>
<span class="comment-copy">@sfortney: Just put it in the alternation (see <a href="https://regex101.com/r/qgYPxI/3" rel="nofollow noreferrer">regex101.com/r/qgYPxI/3</a>). For the future, please put all your requirements in your question in the first place :)</span>
<span class="comment-copy">Thank you izxle! This is awesome. Is there a way to make it so that this regex only catches text between titles at the <i>beginning</i> of a line? The titles always show up at the beginning of the line but sometimes there are references to the titles within the paragraphs which are not actually titles. I edited my question to make this more clear.   My convo with Arne also mentions this.</span>
<span class="comment-copy">And thanks for the detailed explanation!</span>
<span class="comment-copy">Yes, you can match a beginning of a line with the <code>^</code> but you neer to enable <code>re.MULTILINE</code> or it will only match the beginning of the document.</span>
<span class="comment-copy">@sfortney Did you try the one I suggested in my answer?</span>
<span class="comment-copy">That shouldn't happen because you have the <code>^\d\.\d</code> in the lookahead. So the body would include <code>blah Section 1.3 blah</code>. I do not know what a MWE is. The problem could be if <code>Section 1.3</code> is at the start of a line, to solve this you should add an explicit double linebreak after the section title. As so, <code>(?P&lt;section_number&gt;\d\.\d) (?P&lt;section_title&gt;[\w ]+)\n\n\s*(?P&lt;body&gt;.+?)\s*(?=^\d\.\d[\w ]+|\Z)</code>.</span>
<span class="comment-copy">By adding in a non-conditional of those strings at the beginning of the match, like so: <code>r"((Section )?(Article )?(\d+\.\d+ .*?))(?=\d+\.\d+|$)"</code>.</span>
<span class="comment-copy">Also, once the regex gets more complicated, it might be a good idea to give the group that refers to the match you want to get a name: <code>r"(?P&lt;my_name&gt;(Section )?(Article )?(\d+\.\d+ .*?))(?=\d+\.\d+|$)"</code> and access it as <code>match.group('my_name')</code> instead. Helps with later readability a lot.</span>
<span class="comment-copy">You're welcome, happy to help!</span>
<span class="comment-copy">Yes, by including a lookahead that matches the start of the string or newlines. I included it in my answer, it should have been there from the beginning, you weren't ambiguous at all. Btw, I am on a mobile right now so I can't test changes any more. Sorry in advance for any mistakes</span>
<span class="comment-copy">Easy solution: remove the start of string condition from the lookahead <code>|^</code>, and prepend your text with a newline :p</span>
