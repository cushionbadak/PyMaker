<div class="post-text" itemprop="text">
<p>Like most programming languages, Python has operators whose function is simple at first glance, but actually much more complicated when you think about how they interact with the type system. Even a purely numeric operator like <code>-</code> has to deal with various combinations of integers and floating point numbers, as well as booleans (some operators treat these as 0 and 1), and <code>+</code> also has to deal with strings, and does it allow sequences? Bitwise, equality and comparison each have their own rules.</p>
<p>Is it documented anywhere exactly what the rules are? I don't mean tutorials or suggestive heuristics, but an explicit, exact list of all the rules? What you'd need if you were implementing a dialect of Python 3? <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html</a> doesn't say, and the source code is not optimized for this use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to astronavt on #Python, the answer is:</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex</a></p>
</div>
<span class="comment-copy">You're making some assumptions here that aren't necessarily true.  I suggest you read up on the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python Data Model</a>.  A lot of these operators are actually implemented as methods of classes.</span>
<span class="comment-copy">@PatrickHaugh Sure, I have no problem believing CPython implements them that way. The question stands: what are the rules those methods implement? The linked page doesn't say. Is there an alternative way of phrasing the question that would be more to your liking and the liking of the, ah, people doing the downvoting?</span>
<span class="comment-copy">Maybe I don't understand your question. There can't be a list of all type combinations <code>+</code> supports because anyone can write a class that implements <code>__add__</code>, which <code>+</code> would call.  This isn't an implementation detail, it's a major feature of the language. I don't think the page you're looking for exists.</span>
<span class="comment-copy">@PatrickHaugh It turns out that it does. Answer posted.</span>
<span class="comment-copy">You may also be interested in the <a href="https://docs.python.org/3/library/numbers.html?highlight=numbers#module-numbers" rel="nofollow noreferrer"><code>numbers</code> module</a>, which provides several abstract base classes that have APIs that correspond to to the standard numeric types <code>complex</code>, <code>float</code>, <code>fractions.Fraction</code> and <code>int</code>. Note though that numeric types are not the only types to use operatiors in Python. Sequences support concatenation with <code>sequence_1 + sequence_2</code> and repetition with <code>sequence * integer</code>. Strings use the <code>%</code> operator for <code>printf</code>-style formatting. Custom classes can support any operators they want.</span>
