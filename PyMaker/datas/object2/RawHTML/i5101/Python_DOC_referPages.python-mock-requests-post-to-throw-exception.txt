<div class="post-text" itemprop="text">
<p>Using Python 3.5, requests==2.18.4, Flask==0.12.2, urllib3==1.22</p>
<p>I have a method <code>some_method</code> in my main <code>server.py</code> file, that is supposed to make a <code>POST</code> to some url with some data:</p>
<pre><code>def some_method(url, data):
    ...
    error = None
    try:
        response = requests.post(url, json=data)
    except requests.exceptions.ConnectionError as e:
        ...
        app.logger.error(...)
        response = None
        error = str(e)
    return error, response
</code></pre>
<p>The server file defines: <code>app = Flask(__name__)</code>, and <code>some_method</code> is called from <code>@app.route(... methods=['PATCH'])</code>.<br/>
If this method throws an error, the route will eventually return a <code>500</code>.<br/></p>
<p>Tests are run from a test file importing the app with <code>import server</code> and <code>app = server.app</code>, using <code>unittest</code>, and importing <code>mock.patch</code>.<br/></p>
<p>I am able to test the overall app behavior, with a test that shows that the app route behave as expected when the method returns an error and seeing that the route terminates at the right spot:<br/></p>
<pre><code>class ServerTestCase(unittest.TestCase):
    ...
    @patch('server.some_method')
    def test_route_response_status_500_when_throws(self, mock_response):
        mock_response.return_value = 'some_error_string', None
        response = self.app.patch(some_url, some_data, content_type='application/json')
        self.assertEqual(response.status_code, 500)
</code></pre>
<p>However, I would really like to have another test to test <code>some_method</code> in isolation:</p>
<ol>
<li>Mock <code>requests.post</code> to throw <code>requests.exceptions.ConnectionError</code></li>
<li>Show that the method logs an error (I know I can mock my <code>app.logger</code> and assert that it logged during the execution)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Mock the <code>requests.post</code> function, and on the mock set the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code> attribute</a> to the desired exception:</p>
<pre><code>@patch('requests.post')
def test_request_post_exception(self, post_mock):
    post_mock.side_effect = requests.exceptions.ConnectionError()
    # run your test, code calling `requests.post()` will trigger the exception.
</code></pre>
<p>From the linked documentation:</p>
<blockquote>
<p>This can either be a function to be called when the mock is called, an iterable <strong>or an exception (class or instance) to be raised.</strong></p>
<p>[...]</p>
<p>An example of a mock that raises an exception (to test exception handling of an API):</p>
<pre><code>&gt;&gt;&gt; mock = Mock()
&gt;&gt;&gt; mock.side_effect = Exception('Boom!')
&gt;&gt;&gt; mock()
Traceback (most recent call last):
  ...
Exception: Boom!
</code></pre>
</blockquote>
<p>(Bold emphasis mine).</p>
<p>This is also covered in the <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer"><em>Quick Guide</em> section</a>:</p>
<blockquote>
<p><code>side_effect</code> allows you to perform side effects, including raising an exception when a mock is called:</p>
<pre><code>&gt;&gt;&gt; mock = Mock(side_effect=KeyError('foo'))
&gt;&gt;&gt; mock()
Traceback (most recent call last):
 ...
KeyError: 'foo'
</code></pre>
</blockquote>
</div>
<span class="comment-copy">So where did you get stuck? You can mock <code>requests.post</code> just fine, and you can have a mock raise exceptions by setting the <code>side_effects</code> attribute.</span>
<span class="comment-copy">Thank you! I was doing what you mentioned in your response, but I had a few errors: 1. <code>requests.exceptions.ConnectionError</code> -&gt; <code>requests.exceptions.ConnectionError()</code> 2. Was trying many variations of <code>patch</code>, also object but then changed to  -&gt; <code>@patch('requests.post')</code></span>
