<div class="post-text" itemprop="text">
<p>I am trying to get detailed calendar information on all my birthdays to 2024(i.e. week #, day of week etc...). I noticed <code>Pandas</code> as <code>date_range</code> function/method, but am trying to do it using <code>time</code>/<code>datetime</code> because I couldn't get "freq=" to work. This is what I have so far, and I think I can get what I need from <code>myBirthdays</code> list, but am wondering if there is/was an easier way? Seems like a lot of extra work. </p>
<p>TIA. </p>
<pre><code>#import pandas as pd
from datetime import date
import time

def BdayList(birthdate, enddate):
    print(birthdate, type(birthdate), endDate, type(endDate))
    #print(birthdate.weekday(), endDate.isocalendar())
    myMonth =  date.strftime(birthdate, "%m")
    myDay = date.strftime(birthdate, "%d")
    myBirthDays = []
    daysDelta = (enddate - birthdate)
    daysDeltaInt = daysDelta.days / 365
    for year in range(int(date.strftime(birthdate, "%Y")), int(date.strftime(enddate, "%Y"))):   #13148
        year = str(year)
        myBirthday = time.strptime(year+" "+myMonth+" "+myDay, "%Y %m %d") 
        print(myBirthday)
        myBirthDays.append(myBirthday)

    #dateRange = pd.date_range(start, periods = NumPeriods, freq="A")

    return myBirthDays#DaysDelta, type(DaysDelta)
myBday = date(1988, 12, 22)    
endDate = date(2024, 12, 22)
BdayList(myBday, endDate)

time.struct_time(tm_year=1988, tm_mon=12, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=357, tm_isdst=-1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because it is possible to just replace the year in original birth_date, there is no need to switch between dates and strings. (Note that I have also PEP8'd the code and used slightly different variable names + added <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">type hints</a>)</p>
<pre><code>from datetime import date
from typing import List
from pprint import pprint


def get_birthdays(birth_date: date, end_date: date) -&gt; List[date]:
    birthday_list = list()
    while birth_date &lt;= end_date:
        birthday_list.append(birth_date)
        birth_date = birth_date.replace(year=birth_date.year + 1)
    return birthday_list


if __name__ == "__main__":
    birthdays = get_birthdays(
        birth_date=date(1988, month=12, day=22),
        end_date=date(2024, month=12, day=22)
    )
    pprint([(x.strftime("%Y-%m-%d %A, week: %U")) for x in birthdays])
</code></pre>
<p>The output should be:</p>
<pre><code>['1988-12-22 Thursday, week: 51',
 '1989-12-22 Friday, week: 51',
 '1990-12-22 Saturday, week: 50',
 '1991-12-22 Sunday, week: 51',
 '1992-12-22 Tuesday, week: 51',
 '1993-12-22 Wednesday, week: 51',
 '1994-12-22 Thursday, week: 51',
 '1995-12-22 Friday, week: 51']
</code></pre>
<p>To format output, please check <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">datetime</a> documentation. Hopefully this helps!</p>
</div>
<span class="comment-copy">Nice. I haven't figured out how it all works yet, but the result is what I was looking for. Thanks.</span>
