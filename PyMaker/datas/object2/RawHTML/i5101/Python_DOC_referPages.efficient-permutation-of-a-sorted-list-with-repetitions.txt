<div class="post-text" itemprop="text">
<p>I have a list of names assigned to ranks, often with ranks duplicated. I want to generate all permutations of the list with keeping the ranks in sorted order. For example:</p>
<pre><code>[Sam(17), Harry(17), Bob(5), Sally(5)]
</code></pre>
<p>would generate</p>
<pre><code>Sam(17), Harry(17), Bob(5), Sally(5)

Sam(17), Harry(17), Sally(5), Bob(5)

Harry(17), Sam(17), Bob(5), Sally(5)

Harry(17), Sam(17), Sally(5), Bob(5)
</code></pre>
<p>Essentially, for every distinct group of ranks, there are n! combinations. In this case it would be 2! * 2!. I'm having trouble finding an efficient way to do permutations for a list with 34 names across 8 ranks. </p>
<p>I'm running out of memory trying to find 2! * 2! * 4! * 2! * 2! *8! * 4! * 10! different lists.</p>
<p>Is there any efficient way to generate this list? How much memory would python need?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> solution using <code>groupby</code>, <code>permutations</code> and <code>product</code>. As it mostly uses generators it should be not too heavy on memory. If you don't need the result as a list, but for example just want to iterate over it memory requirements should in fact be rather modest.</p>
<p>If you need the list, you'll need the memory for the list but not much more.</p>
<p>But I'm afraid with your numbers the final list alone will just be too large to fit in memory. And the loop will take forever.</p>
<pre><code>&gt;&gt; import itertools, operator
&gt;&gt;&gt; 
&gt;&gt;&gt; data = *zip('Peter Paul Mary Jack Jill'.split(), (17, 17, 17, 4, 4)),
&gt;&gt;&gt; data
(('Peter', 17), ('Paul', 17), ('Mary', 17), ('Jack', 4), ('Jill', 4))
&gt;&gt;&gt; 
# group by rank
&gt;&gt;&gt; groups = itertools.groupby(data, operator.itemgetter(1))
# extract the groups and generate all permutations of each of them
&gt;&gt;&gt; permutations = map(itertools.permutations, map(operator.itemgetter(1), groups))
# form the cartesian product of the permutations, flatten out excess nesting
# convert inner generators to lists
&gt;&gt;&gt; result = map(list, map(itertools.chain.from_iterable, itertools.product(*permutations)))
&gt;&gt;&gt; for i in result:
...     print(i)
... 
[('Peter', 17), ('Paul', 17), ('Mary', 17), ('Jack', 4), ('Jill', 4)]
[('Peter', 17), ('Paul', 17), ('Mary', 17), ('Jill', 4), ('Jack', 4)]
[('Peter', 17), ('Mary', 17), ('Paul', 17), ('Jack', 4), ('Jill', 4)]
[('Peter', 17), ('Mary', 17), ('Paul', 17), ('Jill', 4), ('Jack', 4)]
[('Paul', 17), ('Peter', 17), ('Mary', 17), ('Jack', 4), ('Jill', 4)]
[('Paul', 17), ('Peter', 17), ('Mary', 17), ('Jill', 4), ('Jack', 4)]
[('Paul', 17), ('Mary', 17), ('Peter', 17), ('Jack', 4), ('Jill', 4)]
[('Paul', 17), ('Mary', 17), ('Peter', 17), ('Jill', 4), ('Jack', 4)]
[('Mary', 17), ('Peter', 17), ('Paul', 17), ('Jack', 4), ('Jill', 4)]
[('Mary', 17), ('Peter', 17), ('Paul', 17), ('Jill', 4), ('Jack', 4)]
[('Mary', 17), ('Paul', 17), ('Peter', 17), ('Jack', 4), ('Jill', 4)]
[('Mary', 17), ('Paul', 17), ('Peter', 17), ('Jill', 4), ('Jack', 4)]
</code></pre>
</div>
<span class="comment-copy">You should look into <code>itertools</code>; it seems like you want to create each group, then do a <code>product</code> of their <code>permutations</code>. If you do it with iterators, you don't have to have the whole list in memory at once.</span>
<span class="comment-copy">It might be worth noting that the two <code>operator.itemgetter(1)</code>s are in quite different roles. Assigning names might help, e.g. using <code>get_rank = operator.itemgetter(1)</code> for the first usage and doing something more like <code>group for rank, group in groupby(data, get_rank)</code> for the second. I also thought the syntax for creating the initial dataset was an unnecessary detail, especially given that it's not actually even the OP's structure; YMMV.</span>
<span class="comment-copy">@jonrsharpe Fair enough. It seems some of your edits got lost due to the both of us editing simultaneously.</span>
<span class="comment-copy">No worries, I put the (IMO) most important bit back.</span>
<span class="comment-copy">@Paul, with the final iterator object, can I still access and manipulate individual elements specifically? This sounds a little crazy, but I wanted to use an individual element as an intermediary into a function that would generate a score. The permutation with the lowest score is the optimal. Is that possible?</span>
<span class="comment-copy">@S.Avenci You can loop over them but you can't access them out of order. But what you describe is easy. If <code>f</code> is your score function taking a permutation as its single argument and returning a number you could simply do <code>min(result, key=f)</code> to obtain the optimal permutation. One gotcha if you are new to generators: You can only use them once, after that they are used up.</span>
