<div class="post-text" itemprop="text">
<p>I have this code for my alarm clock program, which checks if the input is of the form <code>HH:MM:SS</code>.</p>
<pre><code>def testing():
    try:
        alarm = input("&gt; ")
        hour = int(alarm[0:2])
        minute = int(alarm[3:5])
        second = int(alarm[6:8])
        if len(alarm) == 8:
            print(("\nsets to %s:%s:%s\n" % (hour, minute, second)))
    except ValueError:
        print("format must be HH:MM:SS")
        testing()

testing()
</code></pre>
<p>It works fine unless, for example, the input is "00:00:00", in which case the output is "0:0:0" instead of the expected output with each unit padded to two digits. Why is this happening?</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the line <code>hour = int(alarm[0:2])</code> when alarm is <code>"00:00:00"</code>:</p>
<p><code>alarm[0:2]</code> will be <code>"00"</code> and <code>int("00")</code> is the integer <code>0</code>.</p>
<p>The same happens for <code>minute</code> and <code>second</code>. When you interpolate the values of <code>hour</code>, <code>minute</code>, and <code>second</code>, then the result is <code>"0:0:0"</code>.</p>
<p>You can pad the hour, minute, and second values to two digits by changing your print statement to</p>
<pre><code>print(("\nsets to %02d:%02d:%02d\n" % (hour, minute, second)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change <code>print(("\nsets to %s:%s:%s\n" % (hour, minute, second)))</code></p>
<p>to</p>
<p><code>print(("\nsets to %02d:%02d:%02d\n" % (hour, minute, second)))</code></p>
<p>This will make it so that instead of printing <code>2:0:0 or 0:0:0</code> you will print <code>02:00:00 or 00:00:00</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are formatting the values into strings, you could do without the conversion from strings to integers:</p>
<pre><code>hour = alarm[0:2]
minute = alarm[3:5]
second = alarm[6:8]
</code></pre>
<p>Also, instead of the <code>%</code> operator, I would use <a href="https://docs.python.org/3/whatsnew/2.6.html#pep-3101" rel="nofollow noreferrer">str.format()</a> which is a more powerful string formatting method:</p>
<pre><code>print("\nsets to {}:{}:{}\n".format(hour, minute, second))
</code></pre>
</div>
