<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19006960/python-format-list-and-width">Python/Format - List and width</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Is there a way to create a formatted string in python with flexible {} adjustments?<br/>
The default way is:</p>
<pre><code>In [1]: "{:20}Hey B! You are {} blocks away.".format("Hey A!", 20-6)
Out[1]: 'Hey A!              Hey B! You are 14 blocks away.'
</code></pre>
<p>But is there a way to code the "distance between A and B" flexible? Like this..?</p>
<pre><code>#not working
In [2]: x = 20
In [3]: "{:x}Hey! You are {} blocks away.".format("Hey! A", x-6)
Out[3]: 'Hey A!              Hey B! You are 14 blocks away.'

In [2]: x = 30
In [3]: "{:x}Hey! You are {} blocks away.".format("Hey! A", x-6)
Out[3]: 'Hey A!                        Hey B! You are 14 blocks away.'
</code></pre>
<p>Or is there any other way simple and convenient way to accomplish it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python allows nested formatting operators. When operating positionally, each positional argument is counted by where its open brace appears. So to use <code>x</code> for justifying <code>"Hey! A"</code> as desired, you can do:</p>
<pre><code>"{:{}}Hey! You are {} blocks away.".format("Hey! A", x, x-6)
   ^^ These brackets fill in the desired width using the second positional arg
</code></pre>
<p>If you want to avoid thinking about the numbering in this case, you can name the argument providing the width, passing it via keyword, e.g. <code>width</code>:</p>
<pre><code>"{:{width}}Hey! You are {} blocks away.".format("Hey! A", x-6, width=x)
</code></pre>
<p>You can see more examples under <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">"Nesting arguments and more complex examples" here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't pretty, but it's one way:</p>
<pre><code>x = 20

("{:"+str(x)+"}Hey! You are {} blocks away.").format("Hey! A", x-6)

# 'Hey! A              Hey! You are 14 blocks away.'
</code></pre>
<p>Alternative syntax:</p>
<pre><code>''.join(("{:", str(x), "}Hey! You are {} blocks away.")).format("Hey! A", x-6)
</code></pre>
</div>
<span class="comment-copy">Downside to this approach is that the format string itself must be constructed anew each time. Nested formatting operators mean the format string remains a constant, producing a single result with no intermediate temporary strings; only the arguments vary each time.</span>
