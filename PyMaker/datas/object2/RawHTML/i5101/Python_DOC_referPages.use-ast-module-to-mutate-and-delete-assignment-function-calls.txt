<div class="post-text" itemprop="text">
<p>For example if I wanted to change greater than to less than or equal to I have successfully executed:</p>
<pre><code>def visit_Gt(self, node):
    new_node = ast.GtE()
    return ast.copy_location(new_node, node)
</code></pre>
<p>How would I visit/detect an assignment operation (<code>=</code>) and a function call <code>()</code> and simply delete them? I'm reading through the AST documentation and I can't find a way to visit the assignment or function call classes and then return nothing.</p>
<p>An example of what I'm seeking for assignment operations:</p>
<pre><code>print("Start")
x = 5
print("End")
</code></pre>
<p>Becomes:</p>
<pre><code>print("Start")

print("End")
</code></pre>
<p>And an example of what I'm seeking for deleting function calls:</p>
<pre><code> print("Start")
 my_function_call(Args)
 print("End")
</code></pre>
<p>Becomes</p>
<pre><code>print("Start")

print("End")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/ast.html#ast.NodeTransformer" rel="nofollow noreferrer"><code>ast.NodeTransformer()</code> subclass</a> to mutate an existing AST tree:</p>
<pre><code>import ast

class RemoveAssignments(ast.NodeTransformer):
    def visit_Assign(self, node):
        return None

    def visit_AugAssign(self, node):
        return None

new_tree = RemoveAssignments().visit(old_tree)
</code></pre>
<p>The above class removes <code>None</code> to completely remove the node from the input tree. The <code>Assign</code> and <code>AugAssign</code> nodes contain the whole assignment statement, so the expression producing the result, and the target list (1 or more names to assign the result to).</p>
<p>This means that the above will turn</p>
<pre><code>print('Start!')
foo = 'bar'
foo += 'eggs'
print('Done!')
</code></pre>
<p>into</p>
<pre><code>print('Start!')


print('Done!')
</code></pre>
<p>If you need to make more fine-grained decisions, look at the child nodes of the assignment, either directly, or by passing the child nodes to <code>self.visit()</code> to have the transformer further call <code>visit_*</code> hooks for them if they exist:</p>
<pre><code>class RemoveFunctionCallAssignments(NodeTransformer):
    """Remove assignments of the form "target = name()", so a single name being called

    The target list size plays no role.

    """
    def visit_Assign(self, node):
        if isinstance(node.value, ast.Call) and isinstance(node.value.func, ast.Name):
            return None
        return node
</code></pre>
<p>Here, we only return <code>None</code> if the value side of the assignment (the expression on the right-hand side) is a <code>Call</code> node that is applied to a straight-forward <code>Name</code> node.  Returning the original node object passed in means that it'll not be replaced.</p>
<p>To replace <em>top-level</em> function calls (so those without an assignment or further expressions), look at <code>Expr</code> nodes; these are expression <em>statements</em>, not just expressions that are part of some other construct. If you have a <code>Expr</code> node with a <code>Call</code>, you can remove it:</p>
<pre><code>def visit_Expr(self, node):
    # stand-alone call to a single name is to be removed
    if isinstance(node.value, ast.Call) and isinstance(node.value.func, ast.Name):
        return None
    return node
</code></pre>
<p>Also see the excellent <a href="https://greentreesnakes.readthedocs.io/" rel="nofollow noreferrer"><em>Green Tree Snakes</em> documentation</a>, which <a href="https://greentreesnakes.readthedocs.io/en/latest/manipulating.html" rel="nofollow noreferrer">covers working on the AST tree</a> with further examples.</p>
</div>
<span class="comment-copy">Can you be a bit more specific, and include an example of the kind of code you are trying to edit? By removing the assignment, should the whole right-hand expression go, or just the target list and <code>=</code>? And by removing the call, do you mean you want to find assignments that involve a function call, or remove <i>all calls</i>, so <code>some_function()</code> becomes <code>some_function</code>?</span>
<span class="comment-copy">I apologize for my question lacking in detail. You absolutely nailed the answer, thank you.</span>
<span class="comment-copy">@MMM: you can always add to the question even though you got your answer, to help future visitors understand if they have the same problem to solve.</span>
<span class="comment-copy">I will do that now. I misread the last part of your answer and will include more detail about what I meant in deleting function calls. One moment as I type it up. If you could add to your answer that would be greatly appreciated.</span>
<span class="comment-copy">Updated the question</span>
<span class="comment-copy">@MMM: added, I'm sure you can mix and match these tools to come up with the right combination now. :-)</span>
