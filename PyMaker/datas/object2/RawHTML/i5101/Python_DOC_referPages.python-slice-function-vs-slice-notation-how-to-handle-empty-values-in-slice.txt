<div class="post-text" itemprop="text">
<p>The docs cover 3 usages of the <a href="https://docs.python.org/3/library/functions.html?highlight=slice#slice" rel="nofollow noreferrer">slice()</a> object:</p>
<ul>
<li><code>obj[:stop]</code> = <code>obj[slice(stop)]</code></li>
<li><code>obj[start:stop]</code> = <code>obj[slice(start, stop)]</code></li>
<li><code>obj[start:stop:step]</code>  =  <code>obj[slice(start, stop, step)]</code></li>
</ul>
<p>But how to do this when I don't know the length of the object in advance? Setting <code>stop</code> to a very high value, like <code>2E32-1</code>?</p>
<ul>
<li><code>obj[start:]</code> =  <code>obj[slice(start, 2E32-1)]</code>?</li>
<li><code>obj[:]</code> =  <code>obj[slice(2E32-1)]</code>?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can set the <code>stop</code> argument to <code>None</code> to continue indefinitely.</p>
<pre><code>obj = [1, 2, 3, 4]

obj[2:] == obj[slice(2, None)]
# == [3, 4]

obj[:] == obj[slice(None, None)]
# == [1, 2, 3, 4]

obj[::2] == obj[slice(None, None, 2)]
# == [1, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use Python's <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><strong><code>slice()</code></strong></a> function with all the capabilities provided by the <em>slice notation</em>. Internally, both <code>slice()</code> function and the slice notation uses the <a href="https://docs.python.org/3/glossary.html#term-slice" rel="nofollow noreferrer"><strong><code>slice</code></strong></a> object.</p>
<p>In your <em>slice notation</em> <code>your_list[start:stop:step]</code>, where you pass empty value, you may get the equivalent <code>slice</code> function <code>slice(start, stop, step)</code> via passing that value as <code>None</code>. For example:</p>
<ul>
<li><p><strong>usage of only <code>start</code> with empty <code>end</code></strong></p>
<pre><code>&gt;&gt;&gt; my_list = list(range(10))  # for demonstration purpose

# start: `5`
# end: empty - meaning end of the list
&gt;&gt;&gt; my_list[5:]
[5, 6, 7, 8, 9]

# use `end` as `None`
&gt;&gt;&gt; my_list[slice(5, None)]  
[5, 6, 7, 8, 9]
</code></pre></li>
<li><p><strong>usage of only <code>end</code> with empty <code>start</code></strong></p>
<pre><code>&gt;&gt;&gt; my_list[:5]
[0, 1, 2, 3, 4]

&gt;&gt;&gt; my_list[slice(5)]
[0, 1, 2, 3, 4]
# OR
&gt;&gt;&gt; my_list[slice(None, 5)]
[0, 1, 2, 3, 4]
</code></pre></li>
<li><p><strong>both <code>start</code> and <code>end</code> as empty</strong> (copy of list)</p>
<pre><code>&gt;&gt;&gt; my_list[:]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

&gt;&gt;&gt; my_list[slice(None, None)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre></li>
</ul>
<p>Few more example:</p>
<pre><code># with both `start` and `end`
&gt;&gt;&gt; my_list[2:5]
[2, 3, 4]
&gt;&gt;&gt; my_list[slice(2, 5)]
[2, 3, 4]

# with `start`, `end` and `step`
&gt;&gt;&gt; my_list[2:5:3]
[2]
&gt;&gt;&gt; my_list[slice(2, 5, 3)]
[2]

# To reverse list
#     with empty `start` and `end`, and `step` as `-1`
&gt;&gt;&gt; my_list[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; my_list[slice(None, None, -1)]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
</div>
<span class="comment-copy">Very clear and concise. Thanks!</span>
