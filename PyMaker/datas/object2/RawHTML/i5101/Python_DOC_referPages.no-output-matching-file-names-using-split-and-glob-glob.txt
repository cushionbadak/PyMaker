<div class="post-text" itemprop="text">
<p>I am trying to find all files in a bunch of subdirectories that have either the form:<br/>
<code>sub-num_ses-wavenum_task-name_run-num_info.ext</code><br/>
 or<br/>
<code>sub-num_ses-wavenum_task-name_info.ext</code> </p>
<p>The part of the file name <code>run-num</code> can take the form <code>run-01</code> through <code>run-15</code> or higher depending on the number files with matching <code>task-name</code> segments. There is not <code>run-num</code> if there are no duplicate task names.  </p>
<p>The script can successfully enter the directories and I can break the file name into chunks by separating at <code>_</code></p>
<pre><code>niidir="some/path"  
for dirpath, dirnames, files in os.walk(niidir): 
    for dirname in dirnames:
        if dirname == "fmap" or dirname == "anat" or dirname == "func":
            fullpath = dirpath + "/" + dirname
            for files in fullpath:
                for file in os.listdir(fullpath):
                    chunks = file.split("_")
                        print(chunks)
</code></pre>
<p>Where <code>print(chunks)</code> will give the output:<br/>
<code>['sub-num', 'ses-wavenum', 'task-name', 'run-num', 'info.ext']</code><br/>
or, if there is no <code>run-num</code>:<br/>
<code>['sub-num', 'ses-wavenum', 'task-name', 'info.ext']</code> </p>
<p>I can also break out the part I want to check to see whether it is a run number or not:  </p>
<pre><code>niidir="some/path"  
for dirpath, dirnames, files in os.walk(niidir): 
    for dirname in dirnames:
        if dirname == "fmap" or dirname == "anat" or dirname == "func":
            fullpath = dirpath + "/" + dirname
            for files in fullpath:
                for file in os.listdir(fullpath):
                    chunks = file.split("_")
                        print(chunks[-2])
</code></pre>
<p>Returns, e.g.:<br/>
<code>run-02</code>, if there is a run number, or<br/>
<code>task-name</code>, if there is no run number.  </p>
<p><strong>BUT</strong>, my problem is that I can't seem to list out <em>only</em> those files that have a run number:  </p>
<pre><code>niidir="some/path"  
for dirpath, dirnames, files in os.walk(niidir): 
    for dirname in dirnames:
        if dirname == "fmap" or dirname == "anat" or dirname == "func":
            fullpath = dirpath + "/" + dirname
            for files in fullpath:
                for file in os.listdir(fullpath):
                    chunks = file.split("_")
                    if chunks[-2]) == glob.glob("run-[0-9]{2}"):
                        print(chunks[-2])
</code></pre>
<p>Gives me no output at all.  </p>
<p>I'm at a loss as to why I can't find the matching sting.</p>
<p><strong>Edit 1:</strong><br/>
path to files is <code>niidir/sub-num/ses-num/sequence/files</code> </p>
<p>There are multiple sub-num directories in clean_nii and multiple ses-num directories in each sub-num directory. Each ses-num directory contains some or all of the following sequence directories: "anat", "func", or "fmap" in which are the files.  </p>
<p><strong>Edit 2:</strong> I'm not a programmer. Please don't assume I know what you're talking about, even if it's "basic". I'm trying.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using the wrong syntax for the glob, and you are using globbing incorrectly. Your <code>glob()</code> call wants to match a literal <code>{2}</code> string after a single digit, and you are trying to use a function that produces a list of files to test if a string matches a pattern.</p>
<p>The correct pattern to match your files would be:</p>
<pre><code>glob.glob("run-[0-9][0-9]*")
</code></pre>
<p>Glob patterns are <em>not regular expressions</em>. See the <a href="https://en.wikipedia.org/wiki/Glob_(programming)" rel="nofollow noreferrer">wikipedia article on glob syntax</a>, and the <a href="https://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer"><code>fnmatch</code> module</a> for details.</p>
<p>Next, <code>glob.glob()</code> looks up files on the filesystem, and returns a <em>list of matching filenames</em>. The above pattern has no path information so only lists files in the local working directory. You'd have to use <code>glob.glob(os.path.join(fullpath, "run-[0-9][0-9]*")</code> to match specific files in a directory, at which point the list will consist of <em>full paths</em>. You should not compare that list with a single string, <code>chunks[-2]</code> is <strong>never</strong> going to be equal to a list of matching filenames.</p>
<p>If you want to see if your string matches a specific globbing pattern, you'd use the <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch" rel="nofollow noreferrer"><code>fname.fnmatch()</code> function</a>:</p>
<pre><code>if fnmatch.fnmatch(chunks[-2], 'run-[0-9][0-9]'):
</code></pre>
<p>Now you are actually testing if your filename part consists of the string <code>run-</code> at the start, followed by two digits.</p>
<p>Next, your <code>for files in fullpath</code> loop iterates over <em>individual characters</em> of the <code>fullpath</code> string. You are repeating this loop <code>len(filepath)</code> times, without any need to repeat anything. You ignore the <code>files</code> variable, you are just doing needless extra work.</p>
<p>Next, your code is still doing more work than it needs to. <code>os.walk()</code> will <em>already</em> list filenames in directories, yet your code lists them redundantly with a <code>os.listdir()</code> call. Either prune your <code>dirnames</code> list after you found those specific subdirectories, or test <code>dirpath</code> for a matching subdirectory and process <code>files</code> instead:</p>
<pre><code>import os
import os.path
import fnmatch

niidir="some/path" 

for dirpath, dirnames, files in os.walk(niidir): 
    directory_name = os.path.basename(dirpath)
    if directory not in {'fmap', 'anat', 'func'}:
        # Only process files in specific subdirectories
        continue
    for filename in fnmatch.filter(files, "run-[0-9][0-9]*"):
        # process matching file
</code></pre>
<p>I used the <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.filter" rel="nofollow noreferrer"><code>fnmatch.filter()</code> function</a> to filter out matching names from the <code>files</code> list produced by <code>os.walk()</code>.</p>
<p>Alternatively, stick to <code>fnmatch.fnmatch()</code> if you want to process all files in the directory and only test specific files in the larger list for your pattern:</p>
<pre><code>for dirpath, dirnames, files in os.walk(niidir): 
    directory_name = os.path.basename(dirpath)
    if directory not in {'fmap', 'anat', 'func'}:
        # Only process files in specific subdirectories
        continue
    for filename in files:
        prefix, remainder = filename.partition('_')
        if fnmatch.fnmatch(prefix, 'run-[0-9][0-9]'):
            # filename starts with a run-number.
        else:
            # do something else
</code></pre>
</div>
<span class="comment-copy">Globs are not regexs.</span>
<span class="comment-copy">Care to elaborate?</span>
<span class="comment-copy">They use different syntaxes. You are using the wrong syntax.</span>
<span class="comment-copy">Thank you, however <code>glob.glob("run-[0-9][0-9]*"):</code> also does not return anything.</span>
<span class="comment-copy">@kdestasio: no, because it has no full path. You should not be using it anyway.</span>
<span class="comment-copy">@kdestasio: I think I covered everything that was wrong in your code, which was quite a few things. <code>glob.glob()</code> is entirely the wrong thing to use here.</span>
