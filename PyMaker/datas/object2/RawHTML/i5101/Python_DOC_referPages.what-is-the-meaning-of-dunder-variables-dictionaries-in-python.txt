<div class="post-text" itemprop="text">
<p>Can someone please explain the exact meaning of having leading underscores before an object's name in Python? Also, explain the difference between a single and a double leading underscore. Also, does that meaning stay the same whether the object in question is a variable, a function, a method, etc.?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Single Underscore</h2>
<p>Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.</p>
<p>To quote <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP-8</a>:</p>
<blockquote>
<p>_single_leading_underscore: weak "internal use" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>
</blockquote>
<h2>Double Underscore (Name Mangling)</h2>
<p>From <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="noreferrer">the Python docs</a>:</p>
<blockquote>
<p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. </p>
</blockquote>
<p>And a warning from the same page:</p>
<blockquote>
<p>Name mangling is intended to give classes an easy way to define “private” instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.</p>
</blockquote>
<h2>Example</h2>
<pre><code>&gt;&gt;&gt; class MyClass():
...     def __init__(self):
...             self.__superprivate = "Hello"
...             self._semiprivate = ", world!"
...
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print mc.__superprivate
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: myClass instance has no attribute '__superprivate'
&gt;&gt;&gt; print mc._semiprivate
, world!
&gt;&gt;&gt; print mc.__dict__
{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Excellent answers so far but some tidbits are missing. A single leading underscore isn't exactly <em>just</em> a convention: if you use <code>from foobar import *</code>, and module <code>foobar</code> does not define an <code>__all__</code> list, the names imported from the module <strong>do not</strong> include those with a leading underscore. Let's say it's <em>mostly</em> a convention, since this case is a pretty obscure corner;-).</p>
<p>The leading-underscore convention is widely used not just for <em>private</em> names, but also for what C++ would call <em>protected</em> ones -- for example, names of methods that are fully intended to be overridden by subclasses (even ones that <strong>have</strong> to be overridden since in the base class they <code>raise NotImplementedError</code>!-) are often single-leading-underscore names to indicate to code <strong>using</strong> instances of that class (or subclasses) that said methods are not meant to be called directly.</p>
<p>For example, to make a thread-safe queue with a different queueing discipline than FIFO, one imports Queue, subclasses Queue.Queue, and overrides such methods as <code>_get</code> and <code>_put</code>; "client code" never calls those ("hook") methods, but rather the ("organizing") public methods such as <code>put</code> and <code>get</code> (this is known as the <a href="http://en.wikipedia.org/wiki/Template_method_pattern">Template Method</a> design pattern -- see e.g. <a href="http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/">here</a> for an interesting presentation based on a video of a talk of mine on the subject, with the addition of synopses of the transcript).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__foo__</code>: this is just a convention, a way for the Python system to use names that won't conflict with user names.</p>
<p><code>_foo</code>: this is just a convention, a way for the programmer to indicate that the variable is private (whatever that means in Python).</p>
<p><code>__foo</code>: this has real meaning: the interpreter replaces this name with <code>_classname__foo</code> as a way to ensure that the name will not overlap with a similar name in another class.</p>
<p>No other form of underscores have meaning in the Python world.</p>
<p>There's no difference between class, variable, global, etc in these conventions.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>._variable</code> is semiprivate and meant just for convention</p>
<p><code>.__variable</code> is often incorrectly considered superprivate, while it's actual meaning is just to namemangle to <strong>prevent accidental access</strong><a href="https://www.youtube.com/watch?v=HTLu2DFOdTg&amp;t=33m8s" rel="noreferrer">[1]</a></p>
<p><code>.__variable__</code> is typically reserved for builtin methods or variables</p>
<p>You can still access <code>.__mangled</code> variables if you desperately want to. The double underscores just namemangles, or renames, the variable to something like <code>instance._className__mangled</code></p>
<p>Example:</p>
<pre><code>class Test(object):
    def __init__(self):
        self.__a = 'a'
        self._b = 'b'

&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t._b
'b'
</code></pre>
<p>t._b is accessible because it is only hidden by convention</p>
<pre><code>&gt;&gt;&gt; t.__a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Test' object has no attribute '__a'
</code></pre>
<p>t.__a isn't found because it no longer exists due to namemangling</p>
<pre><code>&gt;&gt;&gt; t._Test__a
'a'
</code></pre>
<p>By accessing <code>instance._className__variable</code> instead of just the double underscore name, you can access the hidden value</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Single underscore at the beginning:</strong></p>
<p>Python doesn't have real private methods. Instead, one underscore at the start of a method or attribute name means you shouldn't access this method, because it's not part of the API.</p>
<pre><code>class BaseForm(StrAndUnicode):

    def _get_errors(self):
        "Returns an ErrorDict for the data provided for the form"
        if self._errors is None:
            self.full_clean()
        return self._errors

    errors = property(_get_errors)
</code></pre>
<p>(This code snippet was taken from django source code: django/forms/forms.py). In this code, <code>errors</code> is a public property, but the method this property calls, _get_errors, is "private", so you shouldn't access it.</p>
<p><strong>Two underscores at the beginning:</strong></p>
<p>This causes a lot of confusion. It should not be used to create a private method. It should be used to avoid your method being overridden by a subclass or accessed accidentally. Let's see an example:</p>
<pre><code>class A(object):
    def __test(self):
        print "I'm a test method in class A"

    def test(self):
        self.__test()

a = A()
a.test()
# a.__test() # This fails with an AttributeError
a._A__test() # Works! We can access the mangled name directly!
</code></pre>
<p>Output: </p>
<pre><code>$ python test.py
I'm test method in class A
I'm test method in class A
</code></pre>
<p>Now create a subclass B and do customization for __test method</p>
<pre><code>class B(A):
    def __test(self):
        print "I'm test method in class B"

b = B()
b.test()
</code></pre>
<p>Output will be....</p>
<pre><code>$ python test.py
I'm test method in class A
</code></pre>
<p>As we have seen, A.test() didn't call B.__test() methods, as we might expect. But in fact, this is the correct behavior for __. The two methods called __test() are automatically renamed (mangled) to _A__test() and _B__test(), so they do not accidentally override.  When you create a method starting with __ it means that you don't want to anyone to be able to override it, and you only intend to access it from inside its own class.</p>
<p><strong>Two underscores at the beginning and at the end:</strong></p>
<p>When we see a method like <code>__this__</code>, don't call it. This is a method which python is meant to call, not you. Let's take a look:</p>
<pre><code>&gt;&gt;&gt; name = "test string"
&gt;&gt;&gt; name.__len__()
11
&gt;&gt;&gt; len(name)
11

&gt;&gt;&gt; number = 10
&gt;&gt;&gt; number.__add__(40)
50
&gt;&gt;&gt; number + 50
60
</code></pre>
<p>There is always an operator or native function which calls these magic methods. Sometimes it's just a hook python calls in specific situations. For example <code>__init__()</code> is called when the object is created after <code>__new__()</code> is called to build the instance...</p>
<p>Let's take an example...</p>
<pre><code>class FalseCalculator(object):

    def __init__(self, number):
        self.number = number

    def __add__(self, number):
        return self.number - number

    def __sub__(self, number):
        return self.number + number

number = FalseCalculator(20)
print number + 10      # 10
print number - 20      # 40
</code></pre>
<p>For more details, see the <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="noreferrer">PEP-8 guide</a>. For more magic methods, see <a href="//github.com/RafeKettler/magicmethods/blob/master/magicmethods.pdf" rel="noreferrer">this PDF</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes you have what appears to be a tuple with a leading underscore as in </p>
<pre><code>def foo(bar):
    return _('my_' + bar)
</code></pre>
<p>In this case, what's going on is that _() is an alias for a localization function that operates on text to put it into the proper language, etc. based on the locale. For example, Sphinx does this, and you'll find among the imports</p>
<pre><code>from sphinx.locale import l_, _
</code></pre>
<p>and in sphinx.locale, _() is assigned as an alias of some localization function.</p>
</div>
<div class="post-text" itemprop="text">
<p>If one really wants to make a variable read-only, IMHO the best way would be to use property() with only getter passed to it. With property() we can have complete control over the data.</p>
<pre><code>class PrivateVarC(object):

    def get_x(self):
        pass

    def set_x(self, val):
        pass

    rwvar = property(get_p, set_p)  

    ronly = property(get_p) 
</code></pre>
<p>I understand that OP asked a little different question but since I found another question asking for 'how to set private variables' marked duplicate with this one, I thought of adding this additional info here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Single leading underscores is a convention. there is no difference from the interpreter's point of view if whether names starts with a single underscore or not. </p>
<p>Double leading and trailing underscores are used for built-in methods, such as <code>__init__</code>, <code>__bool__</code>, etc.</p>
<p>Double leading underscores w/o trailing counterparts are a convention too, however, the class methods will be <a href="http://docs.python.org/tutorial/classes.html#private-variables" rel="noreferrer">mangled</a> by the interpreter. For variables or basic function names no difference exists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is good, it is not only about methods. Functions and objects in modules are commonly prefixed with one underscore as well, and can be prefixed by two.</p>
<p>But __double_underscore names are not name-mangled in modules, for example. What happens is that names beginning with one (or more) underscores are not imported if you import all from a module (from module import *), nor are the names shown in help(module).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple illustrative example on how double underscore properties can affect an inherited class. So with the following setup:</p>
<pre><code>class parent(object):
    __default = "parent"
    def __init__(self, name=None):
        self.default = name or self.__default

    @property
    def default(self):
        return self.__default

    @default.setter
    def default(self, value):
        self.__default = value


class child(parent):
    __default = "child"
</code></pre>
<p>if you then create a child instance in the python REPL, you will see the below</p>
<pre><code>child_a = child()
child_a.default            # 'parent'
child_a._child__default    # 'child'
child_a._parent__default   # 'parent'

child_b = child("orphan")
## this will show 
child_b.default            # 'orphan'
child_a._child__default    # 'child'
child_a._parent__default   # 'orphan'
</code></pre>
<p>This may be obvious to some, but it caught me off guard in a much more complex environment</p>
</div>
<div class="post-text" itemprop="text">
<p>“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.</p>
<p>reference
<a href="https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references" rel="nofollow">https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Getting the facts of _ and __ is pretty easy; the other answers express them pretty well. The usage is much harder to determine. </p>
<p>This is how I see it:</p>
<pre><code>_
</code></pre>
<p>Should be used to indicate that a function is not for public use as for example an API. This and the import restriction make it behave much like <code>internal</code> in c#.</p>
<pre><code>__
</code></pre>
<p>Should be used to avoid name collision in the inheritace hirarchy and to avoid latebinding. Much like private in c#.</p>
<p>==&gt; </p>
<p>If you want to indicate that something is not for public use, but it should act like <code>protected</code> use <code>_</code>.
If you want to indicate that something is not for public use, but it should act like <code>private</code> use <code>__</code>.</p>
<p>This is also a quote that I like very much:</p>
<blockquote>
<p>The problem is that the author of a class may legitimately think "this
  attribute/method name should be private, only accessible from within
  this class definition" and use the __private convention. But later on,
  a user of that class may make a subclass that legitimately needs
  access to that name. So either the superclass has to be modified
  (which may be difficult or impossible), or the subclass code has to
  use manually mangled names (which is ugly and fragile at best).</p>
</blockquote>
<p>But the problem with that is in my opinion that if there's no IDE that warns you when you override methods, finding the error might take you a while if you have accidentially overriden a method from a base-class.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since so many people are referring to Raymond's <a href="https://www.youtube.com/watch?v=HTLu2DFOdTg&amp;t=33m8s" rel="nofollow noreferrer">talk</a>, I'll just make it a little easier by writing down what he said:</p>
<blockquote>
<p>The intention of the double underscores was not about privacy. The intention was to use it exactly like this</p>
<pre><code>class Circle(object):

    def __init__(self, radius):
        self.radius = radius

    def area(self):
        p = self.__perimeter()
        r = p / math.pi / 2.0
        return math.pi * r ** 2.0

    def perimeter(self):
        return 2.0 * math.pi * self.radius

    __perimeter = perimeter  # local reference


class Tire(Circle):

    def perimeter(self):
        return Circle.perimeter(self) * 1.25
</code></pre>
<p><strong>It's actually the opposite of privacy, it's all about freedom. It makes your subclasses free to override any one method without breaking the others</strong>.</p>
</blockquote>
<p>Say you don't keep a local reference of <code>perimeter</code> in <code>Circle</code>. Now, a derived class <code>Tire</code> overrides the implementation of <code>perimeter</code>, without touching <code>area</code>. When you call <code>Tire(5).area()</code>, in theory it should still be using <code>Circle.perimeter</code> for computation, but in reality it's using <code>Tire.perimeter</code>, which is not the intended behavior. That's why we need a local reference in Circle.</p>
<p>But why <code>__perimeter</code> instead of <code>_perimeter</code>? Because <code>_perimeter</code> still gives derived class the chance to override:</p>
<pre><code>class Tire(Circle):

    def perimeter(self):
        return Circle.perimeter(self) * 1.25

    _perimeter = perimeter
</code></pre>
<p>Double underscores has name mangling, so there's a very little chance that the local reference in parent class get override in derived class. thus "<strong>makes your subclasses free to override any one method without breaking the others</strong>".</p>
<p>If your class won't be inherited, or method overriding does not break anything, then you simply don't need <code>__double_leading_underscore</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Great answers and all are correct.I have provided simple example along with simple definition/meaning. </p>
<p>Meaning:</p>
<p>some_variable --► it's public anyone can see this.</p>
<p>_some_variable --► it's public anyone can see this but it's a convention to indicate private...<strong>warning</strong> no enforcement is done by Python.</p>
<p>__some_varaible  --► Python replaces the variable name with _classname__some_varaible (AKA name mangling) and it reduces/hides it's visibility and be more like private variable.</p>
<p>Just to be honest here <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" rel="nofollow noreferrer">According to Python documentation</a> </p>
<blockquote>
<p>"“Private” instance variables that cannot be accessed except from
  inside an object don’t exist in Python"</p>
</blockquote>
<p>The example:</p>
<pre><code>class A():
    here="abc"
    _here="_abc"
    __here="__abc"


aObject=A()
print(aObject.here) 
print(aObject._here)
# now if we try to print __here then it will fail because it's not public variable 
#print(aObject.__here)
</code></pre>
</div>
<span class="comment-copy">A great short answer from another thread: <a href="https://stackoverflow.com/a/8689983/911945">stackoverflow.com/a/8689983/911945</a></span>
<span class="comment-copy">What if there's a variable name declared with 2 underscores which is not in the class? It's just a normal variable then right?</span>
<span class="comment-copy">what is the meaning of simply <code>__</code> double underscore as a variable name? like <code>a, __ = foo()</code></span>
<span class="comment-copy">This answer is extremely misleading, as it leads the reader to believe that dunderscore is used to make instance attributes "superprivate". This is <i>not</i> the case, as <a href="https://www.youtube.com/watch?v=HTLu2DFOdTg&amp;t=33m8s" rel="nofollow noreferrer">explained here</a> by Raymond Hettinger, who explicitly states that dunderscore is incorrrectly used to mark members private, while it was designed to be the opposite of private.</span>
<span class="comment-copy">@MarkusMeskanen I disagree, the answer explicitly states the use of a dunderscore to make instances of class-private variables and methods. While the dunderscore was designed to make these methods and variables easily overwritten by subclasses (making them public), use of a dunderscore preserves a private instance for use within that class.</span>
<span class="comment-copy">@MarkusMeskanen: The freedom is for the subclasses to use the same names as the superclass does without clobbering the superclass -- in otherwords, the superclasses' dunder names become private to itself.</span>
<span class="comment-copy">So how do you decide whether to use <code>_var_name</code> or use <code>var_name</code> + excluding it from <code>__all__</code>?</span>
<span class="comment-copy">@endolith Use leading underscore to signal to the reader of your code that they probably shouldn’t use this (e.g., because you might change it in version 2.0, or even 1.1); use explicit <code>__all__</code> whenever you want to make the module <code>from spam import *</code> friendly (including at the interactive interpreter). So most of the time, the answer is <i>both</i>.</span>
<span class="comment-copy">@AlexMartelli  Is this import related rule discussed legally somewhere in docs or elsewhere?</span>
<span class="comment-copy">@AlexMartelli And why it doesn't import them? i mean; which processes are stopping the import of 'em?</span>
<span class="comment-copy">Just came across <code>__foo</code> and curious. How can it overlap with similar method names with other Classes? I mean you still have to access it like <code>instance.__foo()</code>(if it were not renamed by interpreter), right?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/551038/private-implementation-class-in-python">This guy</a> states that <code>from module import *</code> does not import underscore-prefixed objects. Therefore, <code>_foo</code> is more than just a convention.</span>
<span class="comment-copy">@Bibhas: if class <code>B</code> subclasses class <code>A</code>, and both implement <code>foo()</code>, then <code>B.foo()</code> overrides the <code>.foo()</code> inherited from <code>A</code>. An instance of <code>B</code> will only be able to access <code>B.foo()</code>, except via <code>super(B).foo()</code>.</span>
<span class="comment-copy">but how about if "__a" was a class variable, then you cannot access it even with the instructions from python docs..</span>
<span class="comment-copy">After editing this answer myself, I prefer <a href="https://stackoverflow.com/a/8689983/1048186">stackoverflow.com/a/8689983/1048186</a></span>
<span class="comment-copy">Furthermore, names beginning with one or more underscores that have two or more trailing underscores behave as any other name again.</span>
<span class="comment-copy">_ is much more similar to for example internal in c# then to private. Double underscore it much more similar to private then underscore is to private I would say.</span>
