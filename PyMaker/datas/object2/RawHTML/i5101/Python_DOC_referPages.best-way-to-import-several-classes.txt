<div class="post-text" itemprop="text">
<p>I have defined several classes in a single python file. My wish is to create a library with these. I would ideally like to import the library in such a way that I can use the classes without a prefix (like mylibrary.myclass() as opposed to just myclass() ), if that's what you can call them, I am not entirely sure as I am a beginner. </p>
<p>What is the proper way to achieve this, or the otherwise best result? Define all classes in __init __? Define them all in a single file as I currently have like AllMyClasses.py? Or should I have a separate file for every class in the library directory like FirstClass.py, SecondClass.py etc. </p>
<p>I realize this is a question that should be easy enough to google, but since I am still quite new to python and programming in general I haven't quite figured out what the correct keywords are for a problem in this context(such as my uncertainty about "prefix")</p>
</div>
<div class="post-text" itemprop="text">
<p>More information can be found in the tutorial on <a href="https://docs.python.org/2/tutorial/modules.html#" rel="nofollow noreferrer">modules</a> (single files) or <a href="https://docs.python.org/2/tutorial/modules.html#packages" rel="nofollow noreferrer">packages</a> (when in a directory with an <code>__init__.py</code> file) on the python site. </p>
<p>The suggested way (according to <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">the style guide</a>) is to spell out each class import specifically.</p>
<pre><code>from my_module import MyClass1, MyClass2
object1 = MyClass1()
object2 = MyClass2()
</code></pre>
<p>While you can also shorten the module name:</p>
<pre><code>import my_module as mo
object = mo.MyClass1()
</code></pre>
<p>Using <code>from my_module import *</code> is recommended to be avoided as it can be confusing (even if it is the recommended way for some things, like <code>tkinter</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's for your personal use, you can just put all your classes <code>Class1</code>, <code>Class2</code>, ... in a <code>myFile.py</code> and to use them call <code>import myFile</code> (without the <code>.py</code> extension)</p>
<pre><code>import myFile

myVar1 = myFile.Class1()
myVar2 = myFile.Class2()
</code></pre>
<p>from within another script. If you want to be able to use the classes without the file name prefix, import the file like this:</p>
<pre><code>from myFile import *
</code></pre>
<p>Note that the file you want to import should be in a directory where Python can find it (the same where the script is running or a directory in <code>PYTHONPATH</code>).</p>
<p>The <code>_init_</code> is needed if you want to create a Python module for distribution. Here are the instructions: <a href="https://docs.python.org/3/distributing/index.html" rel="nofollow noreferrer">Distributing Python Modules</a></p>
<p>EDIT after checking the Python's style guide PEP 8 <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">on imports</a>:</p>
<blockquote>
<p><em>Wildcard imports (from</em> <code>import</code><em>) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools</em></p>
</blockquote>
<p>So in this example you should have used</p>
<pre><code>from myFile import Class1, Class2
</code></pre>
</div>
