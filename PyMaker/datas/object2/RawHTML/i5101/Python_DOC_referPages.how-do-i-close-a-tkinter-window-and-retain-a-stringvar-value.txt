<div class="post-text" itemprop="text">
<p>I am having a couple issues with the following code:</p>
<ol>
<li>After the radio button is selected and the OK button is selected, the Tkinter window does not close.  I have tried various methods to close the Tkinter window - <code>quit()</code> and <code>destroy()</code> both inside <code>buttonAction()</code> and after <code>master.mainloop()</code> - but neither has worked. The code will run endlessly and the window does not close.</li>
<li>The <code>compGDB</code> variable assignment is not retained after the code is run. At this point, I'm wondering if the <code>compGDB</code> variable isn't retaining simply because the destroy/quit code failure.</li>
</ol>
<hr/>
<pre><code>import Tkinter, getpass
username = getpass.getuser()

def buttonAction():
    compGDB = choice.get()
    print compGDB
    #master.quit()
    #master.destroy()

vwrMinGDB = "C:\\Users\\" + username + "\\Desktop\\ViewerAttribution\\Viewer_minimum.gdb"
fullGDB = "C:\\Users\\" + username + "\\Desktop\\ViewerAttribution\\Full_geodatabase.gdb"

master = Tkinter.Tk()
master.title("Schema comparison")
master.geometry("250x100")

choice = Tkinter.StringVar()
choice.set(vwrMinGDB)

chooseOption = Tkinter.Label(master, text="Slect geodatabase for schema comparison")
rButton1 = Tkinter.Radiobutton(master, text="Viewer Minimum Attribution", variable=choice, value=vwrMinGDB)
rButton2 = Tkinter.Radiobutton(master, text="Full Geodatabase Attribution", variable=choice, value=fullGDB)
confirmButton = Tkinter.Button(master, text="OK", command=buttonAction)

chooseOption.grid(column="1", row="0")
rButton1.grid(column="1", row="1")
rButton2.grid(column="1", row="2")
confirmButton.grid(column="1", row="3")

master.mainloop()
#master.quit()
#master.destroy()
</code></pre>
<p>Thanks, y'all!</p>
</div>
<div class="post-text" itemprop="text">
<p>I cannot reproduce your first issue.  You can <code>quit()</code> by calling <code>master.quit()</code> within <code>def buttonAction():</code>, there should be something else missing.</p>
<p>Your second issue though, it is because <code>compGDB</code> is <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer"><em>locally created</em></a> within the function <code>buttonAction</code>, so once the function is done the attribute ceases to be.</p>
<p>While the better advice is to rebuild your code as a <code>class</code> and define <code>compGDB</code> as an <em>instance/class attribute</em> (so you can recall it as long as the class instance is still in memory), you can see it can be a bit of work.  An easy workaround (IMO not best practice) would be:</p>
<pre><code>compGDB = ''

def buttonAction():
    global compGDB
    compGDB = choice.get()
    master.quit()
</code></pre>
<p>So that this way, the <em>global</em> attribute <code>compGDB</code> is still retained and you can recall it anywhere even after <code>master.mainloop()</code>.</p>
<p>But again, consider using an OOP approach for your <code>tkinter</code> if you have use for the information afterwards.  It'll help maintain your namespace easier especially for complex scripts.</p>
</div>
<span class="comment-copy">This works just fine for me, using the <code>master.destroy()</code> that's inside <code>buttonAction()</code> - are you sure you haven't stripped down your code past the point where it actually exhibits the problem?  Calling <code>.quit()</code> just exits the mainloop without closing any window; any code after <code>.mainloop()</code> won't get executed at all until you've already called <code>.quit()</code> or destroyed the window.</span>
<span class="comment-copy">Thanks for your help, Jason.  I swear I tried the block of code independent of my larger script and it didn't work.  But now it is working fine alone.  Weird, but okay...I'll take it. Ha!   So I put it back in it's place within the larger script I was working on and it started having issues again.  It turns out it was because earlier in the larger script I had created a different type of Tkinter window that I never quit or destroyed.  Once I added in a destroy for the first Tkinter window, my radio button works perfectly.   This is my first time using Tkinter so thanks again for your help.</span>
<span class="comment-copy">Thanks for the knowledge and quick workaround!  The script and Tkinter windows are at least functioning now.  I will look into the OOP approach too. Thank you again!</span>
