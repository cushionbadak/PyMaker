<div class="post-text" itemprop="text">
<p>I am giving a wrong input and I want an exception to be raised. Somehow this is not happening. This is my unit test code:</p>
<pre><code>def test_invalid_bag_json_conversion_1(self):
        file_name = "../test/test_files/wrong_bag.bag"
        ru = RosbagUploader(file_name, self.json_output, "", "", "", "")
        status = ru.start()
        self.assertRaises(Exception, RosbagUploader, file_name, self.json_output, "", "", "", "")
        self.assertEquals(ReturnCodes.FAIL, status)
</code></pre>
<p>and my code that I am testing:</p>
<pre><code>class RosbagUploader(object):
    """
    @brief Uploads deserialized input Rosbag file to ElasticSearch or
           stores it locally
    """
    def __init__(self, _rosbag_filepath, _json_filename, _es_addr, _es_index,
                 _es_type, _buffer_size):
        self.overall_status = ReturnCodes.SUCCESS
        self._rosbag_filepath = _rosbag_filepath
        self._json_filename = _json_filename
        self._buffer_size = _buffer_size if _buffer_size &gt; 0 else 5000
        self._es_type = _es_type
        self._es_addr = _es_addr
        self._es_index = _es_index
        self._es_buff = []
        try:
            self._rosbag = rosbag.Bag(_rosbag_filepath, "r")
            if self._es_addr:
                self._es = Elasticsearch() if _es_addr == "" else \
                    Elasticsearch([_es_addr])
            self._total_num_record = self._rosbag.get_message_count()
        except:
            print("[ERROR] {}".format(sys.exc_info()))
            self.overall_status = ReturnCodes.FAIL
</code></pre>
<p>It shows the output that the exception is raised as below:</p>
<pre><code>[ERROR] (&lt;class 'rosbag.bag.ROSBagException'&gt;, ROSBagException(), &lt;traceback object at 0x7fdcb463e8c0&gt;)
EException AttributeError: "'RosbagUploader' object has no attribute '_rosbag'" in &lt;bound method RosbagUploader.__del__ of &lt;rosbag_deserializer_core.RosbagUploader object at 0x7fdcb4899ad0&gt;&gt; ignored
</code></pre>
<p>Which is what it should do. But why doesnt it raise the exception?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are essentially ignoring the exception since you are not re-raising after the print statement:</p>
<pre><code>try:
    [...]
except:
    print("[ERROR] {}".format(sys.exc_info()))
    self.overall_status = ReturnCodes.FAIL
</code></pre>
<p>You need to re-raise for callers to receive the exception:</p>
<pre><code>try:
    [...]
except:
    print("[ERROR] {}".format(sys.exc_info()))
    self.overall_status = ReturnCodes.FAIL
    raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you have a <code>__del__</code> destruction method? Seems to be failing there.</p>
</div>
<span class="comment-copy">I thought that it goes to the except part only when it raises an exception?</span>
<span class="comment-copy">The code in your try-clause does raise the exception. Otherwise you wouldn't get the output you posted? But your test is quite confusing; First, you create a <code>RosbagUploader</code> and expect it to not fail. Then, you create a <code>RosbagUploader</code> using <code>assertRaises()</code> and expect it to fail, using the <i>same</i> arguments as before. So which of the two do you want to happen?</span>
<span class="comment-copy">Actually you are right, I was totally confused and mixed both. but when you write a try and except you raise exception in the try or except? I assumed it only goes to except if an exception occurs?</span>
<span class="comment-copy">I think the <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">Python documentation on exceptions</a> explain how exceptions and try/catch statements work better than I can do in a SO comment.</span>
<span class="comment-copy">can you elaborate please?</span>
<span class="comment-copy">The exception you're seeing is raised from <code>bound method RosbagUploader.__del__</code> and refers to a missing <code>_rosbag</code> attribute, which isn't referenced in the <code>__init__</code> you should us. Therefore I'm thinking that <code>__del__</code> has an error</span>
