<div class="post-text" itemprop="text">
<p>I have some objects of class <code>A</code> which has its own method to be pickled, call it <code>custom_module.customPickle(A)</code> which takes an instance of <code>A</code> and returns a serialization string.
I also have list of objects each of class <code>B</code> that contains <code>A</code>.</p>
<p>I need to pickle the list, but pickling <code>A</code> gives some error difficult to solve. However, <code>A</code> has its own method to be pickled.</p>
<p>I can implement the <code>__reduce__()</code> method in class <code>B</code> so that it calls <code>custom_module.customPickle(A)</code>. But how can I do this so that <code>pickle</code> is able to serialize <code>B</code> efficiently?</p>
<hr/>
<p>Object <code>A</code> is a <code>music21.stream</code> and object <code>B</code> is a custom object. The custom serialization function is <a href="http://web.mit.edu/music21/doc/moduleReference/moduleConverter.html#music21.converter.freezeStr" rel="nofollow noreferrer"><code>music21.converter.freezeStr(streamObj, fmt=None)</code></a> and the unpickle function should be <a href="http://web.mit.edu/music21/doc/moduleReference/moduleConverter.html#music21.converter.thawStr" rel="nofollow noreferrer"><code>music21.converter.thawStr(strData)</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/copyreg.html" rel="nofollow noreferrer"><code>copyreg</code> module</a> to register custom functions for pickling and unpickling; the function you register acts like a <a href="https://docs.python.org/3/library/pickle.html#object.__reduce__" rel="nofollow noreferrer"><code>__reduce__</code> method</a> on the class.</p>
<p>If you return a tuple of <code>(unpickle_function, state)</code>, then the registered <code>unpickle_function</code> callable will be called to unpickle it again, with state as the argument, so you can use your <code>music21.converter.thawStr()</code> function there:</p>
<pre><code>import copyreg
import music21.converter
import music21.stream


def pickle_music21_stream(stream_obj):
    return music21.converter.thawStr, (music21.converter.freezeStr(stream_obj),)

copyreg.pickle(music21.stream.Stream, pickle_music21_stream)
</code></pre>
<p>(the <code>constructor</code> argument to <code>copyreg</code> is ignored in recent Python versions)</p>
<p>This registers a <em>global</em> handler for those objects. You can also use a dispatch table per pickler, see [*Dispatch Tables on how you'd register one.</p>
<p>Now, when pickling, when encountering any instances of <code>Stream</code> the <code>handle_stream()</code> function is used to produce a serialisation, and the <code>thawStr()</code> function will be used to unpickle that data again.</p>
<p><em>However</em>, the <code>music21.converter</code> functions use pickle themselves. They effectively pack and clean up the stream, and then pickle the resulting <code>Stream</code> instance. This will then call the custom handler, and you have an infinite loop.</p>
<p>The work-around is to use a custom <a href="https://docs.python.org/3/library/pickle.html#dispatch-tables" rel="nofollow noreferrer">dispatch table</a> to handle pickling and unpickling. Avoid using <code>copyreg</code> in this case, as it sets a global hook that'll be called recursively each time a <code>Stream</code> object is being pickled.</p>
<p>Your own pickle infrastructure needs to use a custom pickler:</p>
<pre><code>import copyreg
import io
import pickle
import music21.converter
import music21.stream


def pickle_music21_stream(stream_obj):
    return music21.converter.thawStr, (music21.converter.freezeStr(stream_obj),)


def dumps(obj):
    f = io.BytesIO()
    p = pickle.Pickler(f)
    p.dispatch_table = copyreg.dispatch_table.copy()
    p.dispatch_table[music21.stream.Stream] = pickle_music21_stream
    p.dump(obj)
    return f.getvalue()


def loads(data):
    return pickle.loads(data)  # hook is registered in the pickle data
</code></pre>
<p>Here the custom function is only called when a <code>Stream</code> instance is found in your own data structure. The <code>music21</code> routines use the global <code>pickle.dumps()</code> and <code>pickle.loads()</code> functions and won't use the same hook.</p>
</div>
<span class="comment-copy">Do read <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html#pickling-class-instances</a>, especially the dispatch tables section.</span>
<span class="comment-copy">edited the question</span>
<span class="comment-copy">It seems to work, but gives an error with a very very long stack trace: 'RecursionError: maximum recursion depth exceeded while calling a Python object'</span>
<span class="comment-copy">Could you put that up in a pastie or gist somewhere? Not sure what would be recursing here. Perhaps the <code>music.stream</code> serialisation code uses pickle itself?</span>
<span class="comment-copy">@fortea: just found the documentation; the default and only available format is to use pickle. <code>freezeStr()</code> is just a wrapper around the <code>pickle</code> module here and you shouldnâ€™t need to use the custom functions in my answer <i>at all</i>.</span>
<span class="comment-copy">I misunderstood the documentation, then. Maybe this issue is more music21 related...</span>
<span class="comment-copy">@fortea: it is, absolutely. I've updated my answer.</span>
