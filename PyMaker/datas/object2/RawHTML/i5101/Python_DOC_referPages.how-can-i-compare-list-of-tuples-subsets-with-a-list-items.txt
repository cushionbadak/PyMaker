<div class="post-text" itemprop="text">
<p>I'm working on datasets and this is what I wrote till now.</p>
<pre><code>import itertools
import csv
import numpy
def counter(x):
    unique, counts = numpy.unique(result,     return_counts=True)
    list1= numpy.asarray((unique, counts)).T
        return list1
def findsubsets(S,m):
    return list(itertools.combinations(S, m))

sup=input("enter min support\n")
reader = csv.reader(open("test.csv", "rb"), delimiter=",")
X = list(reader)
result = numpy.array(X).astype("string")
print(result)
(m,n)=result.shape

list1=counter(result)
print("deleting items which have less support")
print(list1)
(a,b)=list1.shape
l=[]
for x in range(a):
        a=int(list1[x][1])
        sup1=int(sup)
                if(a&gt;=sup):
            l.append(list1[x][0])
print"after deleting"
print(l)

print("making sets")
o=(findsubsets(l,2))
print(o)
print(X)
</code></pre>
<p>the list o has these tuples</p>
<pre><code>[('Beer', 'Bread'), ('Beer', 'Coke'), ('Beer', 'Diaper'), ('Beer', 'Milk'), ('Bread', 'Coke'), ('Bread', 'Diaper'), ('Bread', 'Milk'), ('Coke', 'Diaper'), ('Coke', 'Milk'), ('Diaper', 'Milk')]
</code></pre>
<p>and the list X has </p>
<pre><code>[['Bread', 'Diaper', 'Beer', 'Eggs'], ['Milk', 'Diaper', 'Beer', 'Coke'], ['Bread', 'Milk', 'Diaper', 'Beer'], ['Bread', 'Milk', 'Diaper', 'Coke']]
</code></pre>
<p>I want to check that every tuple of list-o was really in list-X or not.
for example <code>beer, bread</code> is a tuple of list-o
beer,bread was present in list-X for 2 times. I want to return the count 2. How can I do it?
EDIT :
***********I did this using sets********</p>
<pre><code>O = [('Beer', 'Bread'), ('Beer', 'Coke'), ('Beer', 'Diaper'), ('Beer', 'Milk'), ('Bread', 'Coke'), ('Bread', 'Diaper'), ('Bread', 'Milk'), ('Coke', 'Diaper'), ('Coke', 'Milk'), ('Diaper', 'Milk')]

X = [['Bread', 'Diaper', 'Beer', 'Eggs'], ['Milk', 'Diaper', 'Beer', 'Coke'], ['Bread', 'Milk', 'Diaper', 'Beer'], ['Bread', 'Milk', 'Diaper', 'Coke']]

dict = defaultdict(int)
for tuple in O:
    for LST in X:
        if set(tuple) &lt;= set(LST):
            dict[tuple] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try something of the form</p>
<pre><code> [(l2[0][i], l2[1][i]) == l1[i] for i in range(len(l1))]
</code></pre>
<p>The question is a little vague about the comparison you would like to make, but I can infer (I hope correctly) that the idea is to take the two lists and "stack" them side by side so they look comparable to the list of tuples. Then, I assume you want to perform an equality check.</p>
<p>Here, the equality check performed is an exact match on tuple. This could be incorrect. If so, I can revise my answer.</p>
<p>I assume you are writing this as a python question, but tags would be useful here.</p>
<p>The code I've supplied takes the first element of the second list you've provided (a list) and the second list you've provided (another list). It then creates a tuple based on the index and compares it to the matching element from the list of tuples. This returns a list of booleans: true if there is an identical tuple, false if there is no identical tuple at that index. The length of the list should be the same as the length of the list of tuples you've provided.</p>
<p>If I've interpreted your question correctly, the output is as expected </p>
<pre><code>[False, False, False, False]
</code></pre>
<p>When asking a question like this, it is really useful to specify what you have already tried and why your code produces outputs that you don't expect. Makes it easier for folks to understand the issue and give useful answers! Comment and edit the question to clarify.</p>
<p>BEFORE EDITS (Feb. 17)</p>
<hr/>
<p>AFTER EDITS (Feb. 18)</p>
<p>I'll preserve the above in case people end up having a similar question.
Your question has been edited. Let's see if this addresses the question.</p>
<p>You want to know the number of times a tuple's elements are ALL contained in a list of lists. This is a perfect application of sets.</p>
<pre><code>lists_to_sets = [set(l) for l in X]
tuples_to_sets = [set(t) for t in o]
</code></pre>
<p>Now you want to count the number of times a subset is a member of a superset, so:</p>
<pre><code>[sum([t_set.issubset(l_set) for l_set in lists_to_sets]) for t_set in tuples_to_sets]
</code></pre>
<p>For each of the tuples, this counts the number of lists all the elements of the tuple appear in (are subsets of). This gives the expected output:</p>
<pre><code>[2, 1, 3, 2, 1, 3, 2, 2, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> provides one intuitive method:</p>
<pre><code>from collections import defaultdict

lst_o = [('Beer', 'Bread'), ('Beer', 'Coke'), ('Beer', 'Diaper'), ('Beer', 'Milk'), ('Bread', 'Coke'), ('Bread', 'Diaper'), ('Bread', 'Milk'), ('Coke', 'Diaper'), ('Coke', 'Milk'), ('Diaper', 'Milk')]

lst_x = [['Bread', 'Diaper', 'Beer', 'Eggs'], ['Milk', 'Diaper', 'Beer', 'Coke'], ['Bread', 'Milk', 'Diaper', 'Beer'], ['Bread', 'Milk', 'Diaper', 'Coke']]

d = defaultdict(int)

for tup in lst_o:
    for lst in lst_x:
        if set(tup) &lt;= set(lst):
            d[tup] += 1

# defaultdict(int,
#             {('Beer', 'Bread'): 2,
#              ('Beer', 'Coke'): 1,
#              ('Beer', 'Diaper'): 3,
#              ('Beer', 'Milk'): 2,
#              ('Bread', 'Coke'): 1,
#              ('Bread', 'Diaper'): 3,
#              ('Bread', 'Milk'): 2,
#              ('Coke', 'Diaper'): 2,
#              ('Coke', 'Milk'): 2,
#              ('Diaper', 'Milk'): 3})
</code></pre>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code> documentation</a> for information on <code>set</code> operations.</p>
</div>
<span class="comment-copy">What language, <a href="https://stackoverflow.com/questions/tagged/python">python</a>? <i>"Compare"</i> how, exactly? What have you tried, and what precisely is the problem with it?</span>
<span class="comment-copy">yes It's python. please have a look I've edited the question now. @jonrsharpe</span>
<span class="comment-copy">I think I've answered your question. Please upvote and accept</span>
<span class="comment-copy">I didn't know about this method. So cool. Thanks for sharing! In particular, I didn't realize the &lt;= would suffice</span>
<span class="comment-copy">@PeterBarrettBryan, no problem, I added a link to the documentation which may help you.</span>
