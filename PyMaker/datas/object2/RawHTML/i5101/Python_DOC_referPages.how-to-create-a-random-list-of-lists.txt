<div class="post-text" itemprop="text">
<p>How can you create a random list of lists. The <code>random.sample(range(80), 10)</code> produces a list of 10 items up to 80. </p>
<p>Example Output:</p>
<pre><code>[1,4,6,44,78,45,32,56,72,23]
</code></pre>
<p>But can can you add more data so it is a list of lists? </p>
<p>Desired Output:</p>
<pre><code>[1,4,6,44,78,45,32,56,72,23]
[1,4,6,44,78,45,32,56,72,23]
[1,4,6,44,78,45,32,56,72,23]
[1,4,6,44,78,45,32,56,72,23]
[1,4,6,44,78,45,32,56,72,23]
[1,4,6,44,78,45,32,56,72,23]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Encapsulate the results of <code>random.sample</code> in a list and apply the <code>*</code> operator:</p>
<pre><code>new_list = [random.sample(range(80), 10)]*6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat</code></a></p>
<pre><code>&gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; list(repeat(random.sample(range(80),10),6))
</code></pre>
<p>The idea behind <code>itertools</code> recipes is to consume it lazily. So its a better to use it like:</p>
<pre><code>&gt;&gt;&gt; items = repeat(random.sample(range(80),10),6)
&gt;&gt;&gt; for item in items:
        #consume item here with your program logic
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe the solution to give a better explanation is to think about what kind of list you need to generate. A list can represent a lot of data like items in a table, a market list and lots of other good representations.</p>
<p>Following some quality patterns of production all in relation of code you can made each item be generate by a factor and the list presented on the stack pile or collection of data be generated in a right portable way.</p>
<p>Get arguments based on the program input:</p>
<pre><code>from sys import argv
</code></pre>
<p>First of all utilize that can be made a shot a-top from a horse:</p>
<pre><code>from collections import UserList
</code></pre>
<p>The ceil function to work with a calculation of the seed factor a prediction generation be a machine round not a human like sequences:</p>
<pre><code>from math import ceil
</code></pre>
<p>The sample function generation offered on the box:</p>
<pre><code>from random import sample
</code></pre>
<p>A seed function utilize to limit random generation or increase without a default value offered by the implementation:</p>
<pre><code>from random import seed
</code></pre>
<p>A better usage of iterations can be made using the following function:</p>
<pre><code>from itertools import repeat
</code></pre>
<p>Now you can have this with the following behavior attached round ups with correction:</p>
<pre><code>seed(ceil(1024*8.6))
</code></pre>
<p>One first anonymous lambda function for a small generation:</p>
<pre><code>sample_gen_fn = lambda l=80, n=10, s=0: sample(range(s,l),n)
</code></pre>
<p>Another to work for a nice process of the list:</p>
<pre><code>user_sample_gen_fn = lambda l=80, n=10, s=0: UserList(sample_gen_fn(l,n,s))
</code></pre>
<p>In a world who cats can be predict or read the list this can not made a damage on the brain of the animal by example. On the another running a lot have an damage, thinking on the cat like your processor... this can be extend the computer life time.</p>
<p>All of that can be used on a large context not explained on the description but you need to think on your implementation.</p>
<p>A little observation the pattern used on the native function for a iteration can made an argument specific allocation without call up on the variable with an addressable content this avoid the usage on context just for debug.</p>
<pre><code>def reproduce_pile_fn(ll=6):
    return repeat(lambda: user_sample_gen_fn(),ll)

def stack_pile_cmd(ll=6, l=80, n=10, s=0):
    for seq in reproduce_pile_fn(ll):
        print(seq())
</code></pre>
<p>I think this can help in equality with another answers because is need a good explanation for a small or big implementation.</p>
<p>After that you can call the function on the specific condition.</p>
<pre><code>if __name__ == '__main__':
    # Usage with arguments comming from the program
    # executed as an script.
    #
    # args = argv[1:]
    # stack_pile_cmd(args[0])
    #
    # Common usage

    stack_pile_cmd()
</code></pre>
</div>
<span class="comment-copy">You can use a for loop for that.</span>
<span class="comment-copy">Note: Multiplication of lists containing mutable elements (e.g. other lists) gets decidedly non-intuitive results when the contained elements are mutated. If you want to avoid that headache, you can use a listcomp to shallow copy them all, e.g. <code>new_list = [lst[:] for lst in [random.sample(range(80), 10)]*6]</code> or if you want different initial contents (which seems more useful), <code>new_list = [random.sample(range(80), 10) for _ in range(6)]</code></span>
<span class="comment-copy">Thanks. btw, I don't know why these seemingly small questions get down voted so often? Is it because the information could be found elsewhere, not enough context given in the question, question isn't clear?</span>
<span class="comment-copy">@JPA0888: Didn't downvote, but you requested specific output without saying how the output was to be generated, and you were light enough on details that people could provide valid answers that are almost certainly useless in and of themselves (sequence multiplication to produce lists of lists is broken in most use cases without additional fixups, as I noted). It also helps if you show evidence of effort. What did you try, what didn't work. Questions of the form "write code for me" tend to be frowned on, with associated downvoting activity.</span>
<span class="comment-copy">@JPA0888 Also did not downvote, however, Stackoverflow wishes that OP's provide the attempts that they have made to solve the problem as it is then easier to give clear, relative answers. Your question is quite clear for most developers and is formatted correctly with your input and desired output. Do not take the downvotes too personally.</span>
<span class="comment-copy">I'm not greatly offended. Trying to understand how the site works a little better. Just trying to get feedback I suppose. So try add some more context around the aims and provide attempts. Always reluctant to add attempts in fear of coming across as an idiot.</span>
<span class="comment-copy"><code>itertools.repeat</code> is generally only useful if you need an iterator specifically (e.g. you're consuming it lazily and <i>don't</i> want to hold all values in memory at once); if you're just going to listify the result anyway, sequence multiplication (a la Ajax1234's answer, which gets identical results) is both simpler and more efficient.</span>
<span class="comment-copy">@ShadowRanger I agree with you. The purpose of listifying here is to just provide a quick copy + paste way to verify the results. I will include some more details in edit on how to efficiently use this.</span>
