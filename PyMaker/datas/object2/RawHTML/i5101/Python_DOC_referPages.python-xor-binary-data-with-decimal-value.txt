<div class="post-text" itemprop="text">
<p>I'm a little bit confused about the behavior of the bitwise xor operator. Why, if xor is possible only with binary data, am I able to use xor with decimal numbers?</p>
<p>For example:</p>
<pre><code>fs='a'
sn='k'    
ord(fs) ^ ord(sn)
</code></pre>
<p><code>ord(fs)</code> gives me an ASCII code that is not binary.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the Python 3 <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer">documentation</a> for built-in functions, <code>ord()</code> returns an integer:</p>
<blockquote>
<p>Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 [...]</p>
</blockquote>
<p>This integer is represented by a sequence of bits, and so it is a valid operand to the bitwise XOR operator.</p>
<p><strong>Edit</strong></p>
<p>Python interprets the value <code>97</code> as an integer. And, internally, the integer numeric type is represented as a sequence of bits. The integer type is described in <a href="https://docs.python.org/3/library/stdtypes.html#typesnumeric" rel="nofollow noreferrer">Numeric Types</a>. Another section of that same documentation explains <a href="https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types" rel="nofollow noreferrer">Bitwise Operations on Integer Types</a>, and it states that</p>
<blockquote>
<p>Bitwise operations only make sense for integers.</p>
</blockquote>
<p>That is, bitwise operations on any other type, including a string, are invalid in Python.</p>
<p>So <code>ord()</code> returns an integer. Which is represented <em>internally</em> as a sequence of bits. Although its type is not explicitly "binary," Python still defines the bitwise XOR operator for integers.</p>
<p>To be clear, all values are represented internally as a sequence of bits. It's just that Python only defines the bitwise XOR operator for integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>It works exactly as designed, just that you need to assign it to a variable, and print them. </p>
<p>You can convert them (=integers) back to a binary strings like this <code>'{0:b}'.format(some_integer)</code>. The <code>.zfill(8)</code> in the below example is to "<em>zero fill left to 8 chars</em>" to align them up neatly.</p>
<p>Example:</p>
<pre><code>fs='a' 
sn='k'

#assign result to variable
r = ord(fs) ^ ord(sn)

print('fs=', str(ord(fs)).rjust(3), '{0:b}'.format(ord(fs)).zfill(8))
print('sn=', str(ord(sn)).rjust(3), '{0:b}'.format(ord(sn)).zfill(8))
print('r =', str(r).rjust(3), '{0:b}'.format(r).zfill(8))
</code></pre>
<p>output:</p>
<pre><code>fs=  97 01100001
sn= 107 01101011
r =  10 00001010
</code></pre>
</div>
<span class="comment-copy">Why do you think a ascii code isn't binary?</span>
<span class="comment-copy">Still a little confused, string is a sequence of bit, but in python if I type 97 is integer not bit right?</span>
<span class="comment-copy">I edited my answer to try to clarify</span>
