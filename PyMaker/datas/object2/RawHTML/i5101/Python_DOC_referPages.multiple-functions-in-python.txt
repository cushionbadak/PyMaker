<div class="post-text" itemprop="text">
<p>We have some variable, or other instance: a='?'.
We have such input:</p>
<pre><code>f = a(3112).bas(443).ssad(34) 
</code></pre>
<p>When we type</p>
<pre><code>print(f)
</code></pre>
<p>Output should be:</p>
<pre><code>3112a-443bas-34ssad
</code></pre>
<p>I've tried some ways to solve this and have found information about chaining, but I still have the problem. I can't return class name to the brginning of the string.</p>
<p>This, what I have:</p>
<pre><code>class A():       

    def __getattribute__(self, item):
        print (str(item))
        return super(A, self).__getattribute__(item)    

    def __init__(self, x):
        self.x = x
        print (str(x))

    def b(self, item):
        print (str(item))        
        return self

    def c(self, item):
        print (str(item))
        return self

    def d(self, item):
        print (str(item))
        return self

A(100).b(200).c(300).d(400)
</code></pre>
<p>My output:</p>
<pre><code>100
b
200
c
300
d
400
</code></pre>
<p>But I couldn't concatenate it in one string. </p>
</div>
<div class="post-text" itemprop="text">
<h1>Dynamic way</h1>
<pre><code>class A(object):

    def __init__(self, integer):
        self._strings = ['{}a'.format(integer)]


    def __getattr__(self, attrname, *args):
        def wrapper(*args, **kwargs):
            self._strings.append('{}{}'.format(args[0], attrname))
            return self

        return wrapper


    def __str__(self):
        return '-'.join(self._strings)


print(A(100).bas(200).ssad(300))
</code></pre>
<p>Output</p>
<pre><code>100a-200bas-300ssad
</code></pre>
<p>But also</p>
<pre><code> print(A(100).egg(200).bacon(300).SPAM(1000))
</code></pre>
<p>Output</p>
<pre><code>100a-200egg-300bacon-1000SPAM
</code></pre>
<h1>Static way</h1>
<pre><code>class A(object):

    def __init__(self, integer):
        self._strings = ['{}a'.format(integer)]


    def bas(self, integer):
        self._strings.append('{}bas'.format(integer))
        return self

    def ssad(self, integer):
        self._strings.append('{}ssad'.format(integer))
        return self

    def __str__(self):
        return '-'.join(self._strings)


print(A(100).b(200).c(300))
</code></pre>
<p>Output </p>
<pre><code>100a-200bas-300ssad
</code></pre>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">More about __str__</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can override the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a> method to define your specific output:</p>
<pre><code>class A():
    def __init__(self, a, b="", c="", d=""):
        self._a = a
        self._b = b
        self._c = c
        self._d = d

    def __str__(self):
        return '{}a-{}b-{}c-{}d'.format( self.a, self.b, self.c, self.d )

    def b(self, item):
        self._b = item
        return self

    def c(self, item):
        self._c = item
        return self

    def d(self, item):
        self._d = item
        return self

f = A(100).b(200).c(300).d(400)
print(f)  # 100a-200b-300c-400d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here I tried it in another way , ie, If you want to take the function name instead of manually giving it you can use <code>inspect</code> in python. Try this code :</p>
<pre><code>import inspect


class A():
   l = []

   def __init__(self, x):
        self.x = x
        print (str(x))
        self.l.append(str(x) + "a")

    def b(self, item):
        print (str(item))
        self.l.append(str(item) + inspect.stack()[0][3])
        return self

    def c(self, item):
        print (str(item))
        self.l.append(str(item) + inspect.stack()[0][3])
        return self

    def d(self, item):
        print (str(item))
        self.l.append(str(item) + inspect.stack()[0][3])
        return self


print("-".join(A(100).b(200).c(300).d(400).l))
</code></pre>
<p>The o/p is like :</p>
<pre><code>'100a-200b-300c-400d'
</code></pre>
</div>
<span class="comment-copy">Have you tried not printing?</span>
<span class="comment-copy">Do I understand correctly that this should support unexpected method names? So <code>bas</code> and <code>ssad</code> are arbitrary?</span>
<span class="comment-copy">Is this something you need to write using chaining or an underling XY problem? eg: Do you actually want the line demonstrated as Python code, or is it something you need to parse, or is it something you could just do using string concatenation?</span>
<span class="comment-copy">It seems ultimately you're after <code>'-'.join('{}{}'.format(*el) for el in (('a', 5), ('b', 6), ('c', 35345), ('d', 666)))</code> in some other way</span>
<span class="comment-copy">It looks like he needs to handle arbitrary method calls. bas and ssad could be any unexpected method name.</span>
<span class="comment-copy">a couple of seconds apart, but we have the same basic idea.</span>
<span class="comment-copy">Ho right, fixed</span>
<span class="comment-copy">removed my answer as this is now clearly much better. The only comment I would have is that it seems your <code>_dynamic_function</code> isn't used, and so might be unnecessary here.</span>
<span class="comment-copy">@asongtoruin Ho right, I let this thing. I fixed it, thx :)</span>
<span class="comment-copy">Thanks a lot @vikasdamodar</span>
<span class="comment-copy">you are welcome @MaksymYankin</span>
