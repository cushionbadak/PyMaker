<div class="post-text" itemprop="text">
<p>In Python, I receive two floats e.g.</p>
<pre><code>a = 0.123456
b = 0.012340
</code></pre>
<p>and a precision</p>
<pre><code>p = 0.000001
</code></pre>
<p>that tells me there will be no digits beyond the 6th decimal of the floats.
I want to transform the floats to two integers, so that every information they carry is represented in the integers.</p>
<pre><code>int_a = 137632
int_b = 12340
</code></pre>
<p>The solution in this case is obviously to multiply them by 1000000, but I can't figure out a smart way to get there.
I tried the workaround to get the number of digits in p by:</p>
<pre><code>len(str(p))-1 //-1 because of the dot.
</code></pre>
<p>But:</p>
<pre><code>&gt;&gt;&gt; str(p)
&gt;&gt;&gt; 1e-06
</code></pre>
<p>Well I could replace the "-" by a "+" in the string and transform it back to a float, but this seems for me to be a pretty ugly approach and I thought there must be a much cleaner, mathematical way to do that.
Any suggestion?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why you just do not multiply <code>a</code> and <code>b</code> with <code>1/p</code> ?</p>
<pre><code>int(a * 1/p) 
int(b * 1/p)
</code></pre>
<p>You exactly do not need python (or its string methods) other than converting resulting floats to integer, just arithmetics -))</p>
</div>
<span class="comment-copy">I think you'll find the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal</a> library to be useful.</span>
<span class="comment-copy">You probably want something like <code>-math.log10(p)</code>, but then, since you are using floating point numbers, this approach will be fraught with pitfalls</span>
<span class="comment-copy">haha thousand thanks! I knew there must be an incredibly easy answer. I feel a little bit stupid now^^ maybe I should call it a day.</span>
<span class="comment-copy">the devil is in the  detail :p</span>
<span class="comment-copy">The negative powers of ten are not representable in binary floating point, so the <code>p</code> in the problem statement will contain a rounding error, and so will the divison, This may cause incorrect results in the method proposed in this answer.</span>
<span class="comment-copy">i only used python to convert floats to integer - and my answer is just a standpoint how to solve. other than this, i think, representation of p in python and p itself are different things,   <code>print(p)</code> or <code>p</code> outputs 1e-06, on shell,  but  1/p is still 10^6 and when we multiply with another number, it still acts as we expect.</span>
<span class="comment-copy">Given <code>a = .000493</code> and <code>p = .000001</code>, <code>int(a * 1/p)</code> produces an answer of 492, when 493 may be expected. (This is due to <code>a</code> not being what it may appear.)</span>
