<div class="post-text" itemprop="text">
<p>I thought this would be fairly easy to find but no luck.   Basically if I have two lists, I want to test that one list is the subset of another:</p>
<pre><code>list1 = ['car', 'cart', 'dog']
list2 = ['car',  'dog']
</code></pre>
<p><code>list1 == list 2</code> should be <code>True</code> because <code>list2</code> is a subset of <code>list1</code>.  My solution is way too complex.  My question is - is there a simple function to do this with lists?  More importantly, to test for subsets, is list even the right way to go or is there a better data structure I should study to solve this.  Trying to implement my own version of an apriori algorithm. Many thanks in advance.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Convert <code>list2</code> to a <code>set</code> and use the <code>issubset</code> method:</p>
<pre><code>In [48]: list1 = ['car', 'cart', 'dog']

In [49]: list2 = ['car', 'dog']

In [50]: set(list2).issubset(list1)
Out[50]: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want a <a href="https://github.com/wheerd/multiset" rel="nofollow noreferrer">multiset</a>.  </p>
<pre><code>&gt;&gt;&gt; from multiset import Multiset  # pip install multiset
&gt;&gt;&gt; Multiset(['car', 'dog']) &lt;= Multiset(['car', 'cart', 'dog'])
True
&gt;&gt;&gt; Multiset(['car', 'dog', 'dog']) &lt;= Multiset(['car', 'cart', 'dog'])
False
</code></pre>
<p><code>collections.Counter</code> is the standard library multiset, but it lacks the subset operator <code>&lt;=</code>, so if you want to stick to standard library you will have to write the loop yourself rather than use set operations.</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counter1 = Counter(['car', 'dog'])
&gt;&gt;&gt; counter2 = Counter(['car', 'cart', 'dog'])
&gt;&gt;&gt; all(counter1[k] &lt;= counter2[k] for k in counter1)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using list suggests not only that you are interested in the presence of the members but also their order. If order isn't important you should go for a set instead.</p>
<p>On the other hand you have to consider that you cannot have copies of the same member in a set which you can have in lists. Perhaps your after a third kind of data structure.</p>
<p>The biggest uncertainties for me with the question comes down to if the 'is subset' question takes order into account and possibly how duplicate entries are to be handled.</p>
<p>Could you please elaborate? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> function that returns <code>True</code> if all elements in the iterable passed into it are <code>True</code>. So in our case, we can use a <code>generator-comprehension</code> which yields boolean values for whether each value in <code>list2</code> is in <code>list1</code>:</p>
<pre><code>&gt;&gt;&gt; all(i in list1 for i in list2)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following solution assumes your input lists contain unique elements.</p>
<p>It won't work, for example, with <code>list1 = ['a', 'b']</code> and <code>list2 = ['a', 'a']</code>.</p>
<pre><code>list1 = ['car', 'cart', 'dog']
list2 = ['car',  'dog']

set(list2) &lt;= set(list1)  # True
</code></pre>
<p>If you want to check if it is a <em>proper subset</em>, in other words the two lists cannot be identical, you can use this:</p>
<pre><code>set(list2) &lt; set(list1)   # True
</code></pre>
</div>
<span class="comment-copy">Happy Coding. SO  is about fixing <i>your</i> Code - not implementing your ideas.  Please go over <a href="https://stackoverflow.com/help/how-to-ask">how to ask</a> and  <a href="https://stackoverflow.com/help/on-topic">on-topic</a> again and if you have questions provide  your code as <a href="https://stackoverflow.com/help/mcve">mvce</a>. If you encounter errors, copy and paste the error message verbatim ( word for word) into your question. Avoid using screenshots unless you  need to convey layout errors. We can NOT copy and paste your image into our IDEs to fix your code.</span>
<span class="comment-copy">@NickA I think the OP is aware, they are just using this to explain how their function <i>should</i> work so a similar method to <code>==</code> but one that checks for subsets</span>
<span class="comment-copy">@Joe hmm, I suppose that would indeed make sense</span>
<span class="comment-copy">Hi Vaslo, welcome to stack overflow.  1.  show your attempt, even the code is bad/inefficient/completely broken, your questions will be better received for having shown an attempt before asking for solution  2.  "sublist" is ambiguous so you need to clarify some behavior - is the ordering important?  how should duplicates be handled? do you want a strict sublist, or is equality ok?</span>
<span class="comment-copy">Hi Vasio, you should show your code so we (the community) ´:  see what lvl of skill you have, where your problems are, what kind of advice can be given and to demonstrate that you are not simply offloading your homework to SO. It is kindof a pre-requisit for your question to be "on-topic" and "worthy" of effort of the community. Reason behind it: Your question may be found 4 years later by some other gal searching SO - posed as is it is less worth for "seeing where your exact problem was" then with the code you should have added in the first place. Peace.</span>
<span class="comment-copy">well your answer works well, so +1 from me!</span>
<span class="comment-copy">It’s ridiculous, someone helped me reduce code by dozens of lines using a structure I just don’t know about as a newb, and then question gets crushed.</span>
<span class="comment-copy">@Vaslo Well, don't get discouraged by that.</span>
<span class="comment-copy">@Vaslo, you've said <i>My solution is way too complex</i>, then not shown your solution that alone is reason enough for some people to downvote</span>
<span class="comment-copy">@hee probably not but not much can be done about it except live and learn</span>
<span class="comment-copy">This is quadratic, better to do this in linear time.</span>
<span class="comment-copy">@wim Good point, I wasn't considering efficiency but should have been.</span>
