<div class="post-text" itemprop="text">
<p>Here is a code for writing values to memory using memory mapping. When I try to run the code, I get the error 
   <strong><em>"File "MMF.py", line 26, in 
    memcpy(pBuf, szMsg, len(szMsg)) 
    OSError: exception: access violation writing 0xFFFFFFFFFA1C001B"</em></strong></p>
<pre><code>import msvcrt, mmap
import ctypes
from ctypes import *

FILE_MAP_ALL_ACCESS = 0x04
INVALID_HANDLE_VALUE = 0xFFFFFFFF
SHMEMSIZE = 256
PAGE_READWRITE = 0x04
szName = ctypes.c_wchar_p("MyFileMappingObject")
szMsg = "Message from Python(ctypes) process"

hMapObject = windll.kernel32.CreateFileMappingA(INVALID_HANDLE_VALUE,None, PAGE_READWRITE, 0, SHMEMSIZE, szName)
print("Handle:",hMapObject)
if (hMapObject == 0):
    print("Could not open file mapping object")
    raise WinError()

pBuf = windll.kernel32.MapViewOfFile(hMapObject, FILE_MAP_ALL_ACCESS,0, 0, SHMEMSIZE)
print("Buffer Starting Addr:",pBuf)
if (pBuf == 0):
    print("Could not map view of file")
    raise WinError()
else:
    print(len(szMsg))
    memcpy = cdll.msvcrt.memcpy
    memcpy(pBuf, szMsg, len(szMsg))

shmem = mmap.mmap(0, 256, "MyFileMappingObject_ctypes", mmap.ACCESS_WRITE)
shmem.write("Message Python process")

msvcrt.getch()

windll.kernel32.UnmapViewOfFile(pBuf)
windll.kernel32.CloseHandle(hMapObject)
shmem.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before anything, here's (almost) everything that you need: <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a>. <code>ctypes.wintypes</code> is not explained, but you can see its exports by running <code>dir(ctypes.wintypes)</code> in the <em>Python</em> console. Note that all these types are simple <em>ctypes</em> types, I use them just for convention / consistency / readability's sake.</p>
<p>Your updated code (<em>code.py</em>):</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
from ctypes import windll, cdll,\
    c_wchar, c_size_t, c_ulonglong, c_wchar_p, c_void_p,\
    sizeof,\
    WinError
from ctypes.wintypes import BOOL, DWORD, HANDLE, LPCWSTR, LPCVOID, LPVOID
import mmap


if __name__ == "__main__":
    print("Python {:s} on {:s}".format(sys.version, sys.platform))
    FILE_MAP_ALL_ACCESS = 0x000F001F
    INVALID_HANDLE_VALUE = -1
    SHMEMSIZE = 0x100
    PAGE_READWRITE = 0x04


    kernel32_dll = windll.kernel32
    msvcrt_dll = cdll.msvcrt


    create_file_mapping_func = kernel32_dll.CreateFileMappingW
    create_file_mapping_func.argtypes = (HANDLE, LPVOID, DWORD, DWORD, DWORD, LPCWSTR)
    create_file_mapping_func.restype = HANDLE

    map_view_of_file_func = kernel32_dll.MapViewOfFile
    map_view_of_file_func.argtypes = (HANDLE, DWORD, DWORD, DWORD, c_ulonglong)
    map_view_of_file_func.restype = LPVOID

    memcpy_func = msvcrt_dll.memcpy
    memcpy_func.argtypes = (c_void_p, c_void_p, c_size_t)
    memcpy_func.restype = LPVOID

    rtl_copy_memory_func = kernel32_dll.RtlCopyMemory
    rtl_copy_memory_func.argtypes = (LPVOID, LPCVOID, c_ulonglong)

    unmap_view_of_file_func = kernel32_dll.UnmapViewOfFile
    unmap_view_of_file_func.argtypes = (LPCVOID,)
    unmap_view_of_file_func.restype = BOOL

    close_handle_func = kernel32_dll.CloseHandle
    close_handle_func.argtypes = (HANDLE,)
    close_handle_func.restype = BOOL

    get_last_error_func = kernel32_dll.GetLastError
    getch_func = msvcrt_dll._getch


    file_mapping_name_ptr = c_wchar_p("MyFileMappingObject")
    msg = "Message from Python(ctypes) process"
    msg_ptr = c_wchar_p(msg)

    mapping_handle = create_file_mapping_func(INVALID_HANDLE_VALUE, 0, PAGE_READWRITE, 0, SHMEMSIZE, file_mapping_name_ptr)

    print("Mapping object handle: 0x{:016X}".format(mapping_handle))
    if not mapping_handle:
        print("Could not open file mapping object: {:d}".format(get_last_error_func()))
        raise WinError()

    mapped_view_ptr = map_view_of_file_func(mapping_handle, FILE_MAP_ALL_ACCESS, 0, 0, SHMEMSIZE)

    print("Mapped view addr: 0x{:016X}".format(mapped_view_ptr))
    if not mapped_view_ptr:
        print("Could not map view of file: {:d}".format(get_last_error_func()))
        close_handle_func(mapping_handle)
        raise WinError()

    byte_len = len(msg) * sizeof(c_wchar)
    print("Message length: {:d} chars ({:d} bytes)".format(len(msg), byte_len))

    memcpy_func(mapped_view_ptr, msg_ptr, byte_len)
    rtl_copy_memory_func(mapped_view_ptr, msg_ptr, byte_len)

    unmap_view_of_file_func(mapped_view_ptr)
    close_handle_func(mapping_handle)


    shmem = mmap.mmap(0, 256, "MyFileMappingObject_ctypes", mmap.ACCESS_WRITE)
    shmem.write(b"Message Python process")
    shmem.close()


    print("Hit a key to exit...")
    getch_func()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>Added the <em>argtypes</em> and <em>restype</em> for the functions. Details can be seen in the "<em>Specifying the required argument types (function prototypes)</em>" and "<em>Return types</em>" sections, and of course <a href="https://msdn.microsoft.com" rel="nofollow noreferrer">MSDN</a> for function declarations</li>
<li><em>memcpy</em>'s 2<sup>nd</sup> argument is a <strong><em>Python</em></strong> string, which is <strong>not</strong> the same its <code>char *</code> address (not to mention that in <em>Python 3</em>, strings are <em>wchar_t</em> based) that <em>memcpy</em> expects, this will probably yield <strong>Undefined Behavior</strong></li>
<li><em>FILE_MAP_ALL_ACCESS</em>'s value is <em>0x000F001F</em> (printed out the value from <em>VStudio 2015</em>), <em>0x04</em> corresponds to <em>FILE_MAP_READ</em></li>
<li>Error converting <em>INVALID_HANDLE_VALUE</em>'s old value to <em>HANDLE</em>, changed it to -1 (as in <em>handleapi.h</em>)</li>
<li>You're calling <em>CreateFileMappingA</em> with a <em>c_wchar_p</em>. That will set a name consisting of only the 1<sup>st</sup> character from the supplied string for the mapping object because each <em>wcha_t</em> consists of 2 bytes: <em>0x00</em> plus the corresponding <em>char</em> value - '<strong>A</strong>' will be represented as <em>0x00 0x41</em> (generally this is <strong>not</strong> true - especially the <em>0x00</em> part, but in our case, it is) - so the 2<sup>nd</sup> <em>char</em> in the <em>lpName</em> argument (due to <em>little-endianness</em>) will be <em>0x00</em> (<em>NULL</em>)</li>
<li>No need to import <em>msvcrt</em> module, just for <em>_getch</em> which is also exposed by <em>vcruntime140.dll</em> (<em>ucrtbase.dll</em>)</li>
<li><p>According to the page above:</p>
<blockquote>
<p>Accessing the standard C library through <code>cdll.msvcrt</code> will use an outdated version of the library that may be incompatible with the one being used by Python.</p>
</blockquote>
<p>So, I also added <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-rtlcopymemory" rel="nofollow noreferrer">[Docs.MS]: RtlCopyMemory function</a> to replace <code>memcpy</code> (you can comment out its line, I left it there just to show that it works), as in the example (<a href="https://docs.microsoft.com/en-gb/windows/desktop/Memory/creating-named-shared-memory" rel="nofollow noreferrer">[MS.Docs]: Creating Named Shared Memory</a>) that you took the code from, and tried to convert it ([<em>minwinbase.h: 36</em>]: <code>#define CopyMemory RtlCopyMemory</code>)</p></li>
<li>Changed naming convention to be <em>Python</em> compliant (<a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow noreferrer">[Python]: PEP 8 -- Style Guide for Python Code</a>)</li>
<li>Other (non critical) changes (output formatting, moving lines of code around for a better structure, and so on ...)</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) E:\Work\Dev\StackOverflow\q048788549&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32
Mapping object handle: 0x000000000000012C
Mapped view addr: 0x00000206E3BD0000
Message length: 35 chars (70 bytes)
Hit a key to exit...
</code></pre>
</blockquote>
</div>
<span class="comment-copy">You will need to specify argtypes and restype on these imports otherwise they will default to 32 bit integer. Not what you want.</span>
<span class="comment-copy">+ you don't mix native functions with <i>Python</i> objects or viceversa. And some constants are incorrectly used/defined.</span>
<span class="comment-copy">I tried initializing argtypes and still the result is same</span>
<span class="comment-copy">@prabakars Then maybe you made a mistake in the ”declarations”. We can't tell until we see what you've done.</span>
