<div class="post-text" itemprop="text">
<p>lets say i have something as follow: </p>
<pre><code>c = list(range(1,5))
</code></pre>
<p>when I print c, I get </p>
<pre><code>1
2
3
4
</code></pre>
<p>I am using c as an iteration in a programme. </p>
<p>Now lets say that while working on "2"  i get an error and I want to go back to 2 so as it does the following</p>
<pre><code>1
2 (error)
2
3
4
</code></pre>
<p>how to do that? </p>
<p>I have inserted an "if" statement if an error occurs and a "continue" but it just skips to the next item. </p>
<p>Thanks</p>
<pre><code>for i in range (4513,5001):
                url="https://...{pagenum}.....xml".format(pagenum=i)
                response=requests.get(url, verify=False)
                soup=BeautifulSoup(response.text)
                g_data=soup.find_all("td",{"class":"detail_1"})
                if not g_data:
                                print("List is empty")
                                continue
                results=[]
                print (i)
                for item in g_data:
                                results.append(item.text)
                df=pd.DataFrame(np.array(results).reshape(20,7),columns=list("abcdefg"))
                excel_reader=pd.ExcelFile('test6.xlsx')
                to_update={"Sheet1":df}
                excel_writer=pd.ExcelWriter('test6.xlsx')
                for sheet in excel_reader.sheet_names:
                                sheet_df=excel_reader.parse(sheet)
                                append_df=to_update.get(sheet)
                                if append_df is not None:
                                                sheet_df=pd.concat([sheet_df,df]).drop_duplicates()
                                sheet_df.to_excel(excel_writer,sheet,index=False)
                excel_writer.save()
</code></pre>
<p>Usually I get a value error after the df line. Thats because the server of the website didnt have enough time to respond. Hence g_data is empty. </p>
</div>
<div class="post-text" itemprop="text">
<p>The error is occurring on this line at the call to reshape(...):</p>
<pre><code>df=pd.DataFrame(np.array(results).reshape(20,7),columns=list("abcdefg"))
</code></pre>
<p>'results' can be an empty array right? Then np.array(results) gives you and you get an empty array. Then when you call reshape(20,7) with the result of np.array(results), it gives array because the result of np.array(results) does not have 20*7 = 140 elements</p>
<p>reshape(20,7) expects that the input (previous) array should also have 20*7 = 140 elements. But you may have an input array with 0 elements (according to lines preceding the df line).</p>
<p>You may check the description of 'reshape' parameter on <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html" rel="nofollow noreferrer">https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</a></p>
<p>One solution to what you want (<strong>Warning:</strong> if the server fails all the time for a certain page, you will get an infinite loop unless you want to limit the number of retries):</p>
<pre><code>for i in range (4513,5001):
    url="https://...{pagenum}.....xml".format(pagenum=i)
    downloaded = False

    while(not downloaded):
        response=requests.get(url, verify=False)
        soup=BeautifulSoup(response.text)
        g_data=soup.find_all("td",{"class":"detail_1"})
        if not g_data:
            print("List is empty")
            continue
        else:
            downloaded = True
        results=[]
        print (i)
        for item in g_data:
            results.append(item.text)
        df=pd.DataFrame(np.array(results).reshape(20,7),columns=list("abcdefg"))
        excel_reader=pd.ExcelFile('test6.xlsx')
        to_update={"Sheet1":df}
        excel_writer=pd.ExcelWriter('test6.xlsx')
        for sheet in excel_reader.sheet_names:
            sheet_df=excel_reader.parse(sheet)
            append_df=to_update.get(sheet)
            if append_df is not None:
                sheet_df=pd.concat([sheet_df,df]).drop_duplicates()
            sheet_df.to_excel(excel_writer,sheet,index=False)
        excel_writer.save()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can loop over each item using a <code>while</code> loop, <code>break</code>ing on success and continuing to the next item:</p>
<p>for i in items:</p>
<pre><code>while True:
  # some code that can succeed or fail goes here
  if success:
    break
</code></pre>
</div>
<span class="comment-copy">Could you post the failing code and perhaps the error traceback, please?</span>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum or tutorial. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the other links on that page.  Invest some time with <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a> practicing the examples. It will give you an idea of the tools Python offers to help you solve your problem.  <a href="https://meta.stackoverflow.com/questions/284236/why-is-can-someone-help-me-not-an-actual-question">“Can someone help me?” not an actual question?</a>.</span>
<span class="comment-copy">Do you want to stop your outer <code>for</code> loop when an error occurs? If that's the case, using <code>break</code> instead of <code>continue</code> may work.</span>
<span class="comment-copy">I used continue. It then skips the value connected with the error and goes on to the next. I want it to repeat the value if an error occurs before moving on the the next one.</span>
<span class="comment-copy">In that case a loop, as @match suggested, might do the trick.</span>
