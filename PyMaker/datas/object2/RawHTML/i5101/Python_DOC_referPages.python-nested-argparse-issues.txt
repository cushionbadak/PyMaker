<div class="post-text" itemprop="text">
<p>I'm trying to get this to work</p>
<p>script.py command onesubcommand mabyanotherone [something] [--optional stuff]</p>
<p>This currenlty works with script.py command -h and it shows that command got a set of subcommands, and etc command subcommand -h shows it got a set of required options and optional.</p>
<pre><code>parser = argparse.ArgumentParser(description='Some commands :D.')
mainsubparsers = parser.add_subparsers()

###

# Arg (sub)command &lt;sub&gt;
parser_list = mainsubparsers.add_parser('command', help='List different things, see command -h')
subparsers = parser_list.add_subparsers()

# Arg (sub)command &gt; subcommand (amount)
parser_subcommand = subparsers.add_parser('subcommand')
parser_subcommand.add_argument('-a', '--amount', type=int, help='Amount to list', default=5)

###

args = parser.parse_args()
</code></pre>
<p>Then I'm trying to get this to work</p>
<pre><code>if __name__ == '__main__':
  if args.parser_command:

      ###

      elif args.parser_command.subcommand:
        # Do stuff

      ### 
</code></pre>
<p>but throws</p>
<pre><code>py script.py command subcommand
Traceback (most recent call last):
  File "script.py", line 178, in &lt;module&gt;
    if args.parser_command:
AttributeError: 'Namespace' object has no attribute 'parser_command'
</code></pre>
<p>So I tried to add this to the parser part</p>
<pre><code>def c_command:
  print(args)


parser_command = mainsubparsers.add_parser('command', help='List different things,see command -h')
subparsers = parser_command.add_subparsers()
parser_command.set_defaults(func=c_command)

###

args.func(args)
</code></pre>
<p>the function gets triggered but I don't see how I can get the subcommand out and it's parameters, etc args.command throws namespace.</p>
<p>How do I solve this or how do I do this the correct way?</p>
<p>I just want nested commands with options.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem isn't with the nesting.  It's with basic <code>subparsers</code> definition.</p>
<p>Look at the <code>namespace</code>, the <code>args</code> object created by <code>parse_args</code>:</p>
<pre><code>In [4]: parser.parse_args(['command'])
Out[4]: Namespace()
In [5]: parser.parse_args(['command','subcommand'])
Out[5]: Namespace(amount=5)
</code></pre>
<p>A command like: <code>mainsubparsers = parser.add_subparsers()</code> doesn't save any indication of what the command was.  <code>Out[5]</code> has an attribute because of the <code>parser_subcommand.add_argument...</code>, and value is the default.</p>
<p><code>In[4]</code> is possible with Py3.  In Py2 is will raise an error, because subparsers are required (that's a bug in Py3 version).</p>
<p>If I add a <code>dest</code> parameter to each <code>add_subparsers</code> (as discussed in the docs) I get</p>
<pre><code>In [8]: parser.parse_args(['command','subcommand'])
Out[8]: Namespace(amount=5, cmd='command', subcmd='subcommand')
</code></pre>
<p>With this then <code>args.cmd</code> and <code>args.subcmd</code> can be referenced.</p>
<p>The docs also show how <code>set_defaults</code> can be used to define other attributes selectively, including ones with object values.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#sub-commands</a></p>
</div>
<span class="comment-copy">your error says <code>elif args.parser_command:</code> but there is no <code>elif</code> in your example code. Please ensure you are posting code and errors that go together.</span>
<span class="comment-copy">Edited to match the error. Just a mismatch when writing this down. (Could not copypaste)</span>
<span class="comment-copy">Your options are named <code>command</code> and <code>subcommand</code> not <code>parser_command</code> and <code>parser_subcommand</code> (and that <code>elif</code> code is  invalid python).</span>
<span class="comment-copy">changed to if args.command and this is the output "AttributeError: 'Namespace' object has no attribute 'command". How is elif invalid python?</span>
<span class="comment-copy">The indentation, and the lack of other related code at that indentation.</span>
<span class="comment-copy">Thanks for the explaination, I will try this out.</span>
<span class="comment-copy">Correct way to do it or not, this works perfectly. Thanks a lot, I have used the whole day to get this to work.</span>
