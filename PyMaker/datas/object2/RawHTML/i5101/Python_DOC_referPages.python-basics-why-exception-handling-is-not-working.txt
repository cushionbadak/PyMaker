<div class="post-text" itemprop="text">
<p>Am new to python development and trying to understand exception handling.
I have 2 functions 1st to find 1 occurrence of duplicate value in a list and 2nd to call the function.
But if try to pass the name of list that does not exist it should print message from except block , but its not working , please help </p>
<pre><code>def first_duplicate(a):
    x = 0
    for i, j in enumerate(a):
        for k in a[i + 1:]:
            if j == k:
               x = 1
                return j
        if x == 1:
            break


def call_main (list_name):
    try:
        x = first_duplicate(list_name)
        if x is None:
            print("No duplicates")
        else:
            print(x, "is the first duplicate")
    except NameError:
            print("exception occurred Name ")
    except ValueError:
            print("exception occurred value")
</code></pre>
<p>my command is like</p>
<pre><code>call_main(y)
</code></pre>
<p>where I have not created the list : y , it should print the exception message in this case but its not , please help </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example. In the code below, in <code>try</code> there is a name <code>y</code> which is not an input, so it will raise <code>NameError</code> exception.</p>
<p>The <code>t=[11]; function(t);</code> will raise <code>NameError</code>.</p>
<p>The <code>t=(1,2); function(t)</code> will raise <code>AttributeError</code>..because <code>x.append(5)</code> is catched first.</p>
<pre><code>def function(x):
    try :
      x.append(5);
      x+y
    except NameError:
      print("name error exception")
    except AttributeError:
      print("attribute error excetption")

t=[11];
function(t)

t=(1,2)
function(t)
</code></pre>
<hr/>
<p>Now, if you call <code>function(a_list)</code> , which <code>a_list</code> is not defined yet, then it will raise the default <code>NameError</code>. <em>Because the error happens even before the code inside the function is processed.</em> So the <code>try</code> is not even processed. I think this should explain why you get the default <code>NameError</code>.</p>
<hr/>
<p>If you want it to produce your <code>NameError</code> you can also (in addition) set the <code>try</code> <em>outside the function scope</em>.</p>
<pre><code>try :
    call_main(y);
except NameError:
    print("something");
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fundamentally, in any code you write, <code>try: except</code> blocks can only catch errors for the lines passed within them.  If you make an error in the function call (or code that in fact wraps the <code>try: except</code> block), the error is happening ahead of the test and so the error cannot be caught there.</p>
<p>This is why in order to catch an error caused by an argument before it is  passed into a function (or by the syntax of the function call itself), as in <code>call_main(y)</code>, the error handling has to be moved outside that function as demonstrated by others on here with the code: </p>
<pre><code>try:
     call_main(y)
except NameError:
     print("exception caught a NameError")
</code></pre>
<p>Exception handling can only do so much.  At some point the programmer must proof their code and make sure it works.  On a related note, it is a good best practice to include a general exception statement in your <code>try: except</code> blocks to catch any unexpected errors you have not tested for yet or thought of yet.  The following modification to your code demonstrates this as well as showing how to get the computer to tell you exactly what error it caught:</p>
<pre><code>def call_main (list_name):
    try:
        x = first_duplicate(list_name)
        if x is None:
            print("No duplicates")
        else:
            print(x, "is the first duplicate")
    except NameError:
            print("exception occurred Name ")
    except ValueError:
            print("exception occurred value")
    except Exception as ee:
            print(ee)
            print(type(ee))
</code></pre>
<p>On a final note - to prove your exception handling is working, make the following edits to <code>x = first_duplicate(list_name)</code> and re-run it.</p>
<p><code>x = first_duplicate(y)</code></p>
<p>Result:  code catches the name error</p>
<p><code>x = first_duplicate(0)</code></p>
<p>Result:  general exception is caught and error type identified for you</p>
</div>
<span class="comment-copy">Hi, what does it prints? I tried and the exception shows</span>
<span class="comment-copy">it prints standard python error</span>
<span class="comment-copy">When asking about code that produces an Exception you should always include the complete Traceback in the question. Copy the Traceback and paste it in the question, then format it as code (select it and type <code>ctrl-k</code>).</span>
<span class="comment-copy">Take some time to read about <a href="https://docs.python.org/3/tutorial/classes.html#a-word-about-names-and-objects" rel="nofollow noreferrer">Names, Objects, Scopes, and Namespaces in the Tutorial</a>.  Also <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">Naming and Binding</a> in the docs.  It might not sink in right away.</span>
<span class="comment-copy">@wwii : sure I will , thanks a lot</span>
<span class="comment-copy">ok , thanks , any comment on how to handle this , or any link where i can learn it</span>
<span class="comment-copy"><a href="https://docs.python.org/3/" rel="nofollow noreferrer">docs.python.org/3</a> . You want to raise your own <code>Exception</code> with <code>call_main(y)</code>?</span>
<span class="comment-copy">See edited answer..</span>
<span class="comment-copy">Thanks Arief , I will move ahead and try learn it more</span>
<span class="comment-copy">@etl_devs your welcome, all the best.</span>
<span class="comment-copy">@etl_devs - comments indicated you might be moving ahead while still feeling a bit confused.  See if this write-up helps you.  Best wishes.</span>
