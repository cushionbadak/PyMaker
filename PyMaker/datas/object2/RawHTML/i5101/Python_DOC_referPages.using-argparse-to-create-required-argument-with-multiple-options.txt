<div class="post-text" itemprop="text">
<p>If I understand Argparse correctly, the positional arguments are the required arguments that the user can specify. I need to create a positional argument with argparse where the user can specify a certain type of argument that is displayed if he/she brings up the -h option. I've tried using add_argument_group but it simply only displays a header with a description of the other arguments when you bring up the -h option. </p>
<pre><code>def Main():
    parser = argparse.ArgumentParser(description = __doc__, formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument("input_directory",help = "The input directory where all of the files reside in")

    sub_parser = parser.add_argument_group('File Type')

    sub_parser.add_argument(".txt",help = "The input file is a .txt file")
    sub_parser.add_argument(".n12",help = "The input file is a .n12 file")
    sub_parser.add_argument(".csv",help = "The input file is a .csv file")

    parser.parse_args()

if __name__ == "__main__":
    Main()
</code></pre>
<p>So when I run the script, I should specify   in order to run the script. If I choose either .txt, .n12, or .csv as my  argument, then the script should run. However, if the I  don't specify the file type from those 3 options listed, then the script wouldn't run. </p>
<p>Is there an argparse function that I'm missing that can specify multiple options for a positional argument?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're making this too complicated.  If I understand your problem correctly, you want the user to enter two arguments: a directory name and a file type.  You application will accept only three values for file type.  How about simply doing this:</p>
<pre><code>import argparse

def Main():
    parser = argparse.ArgumentParser(description = __doc__, formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument("input_directory", help = "The input directory where all of the files reside in")
    parser.add_argument("file_type", help="One of: .txt, .n12, .csv")
    args = parser.parse_args()
    print(args)

if __name__ == "__main__":
    Main()
</code></pre>
<p>... and adding application logic to reject invalid values for file type. </p>
<p>You access the user-entered values through the object returned by parse_args().</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/argparse.html#choices" rel="nofollow noreferrer"><code>choices=</code></a> parameter to force the user to choose from a restricted set of values.</p>
<pre><code>import argparse

def Main():
    parser = argparse.ArgumentParser()
    parser.add_argument("input_directory",help = "The input directory where all of the files reside in")
    parser.add_argument("file_type", help = "File Type", choices=['.txt', '.n12', '.csv'])

    ns = parser.parse_args()
    print(ns)


if __name__ == "__main__":
    Main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use option grouping feature use <a href="https://pymotw.com/2/argparse/#mutually-exclusive-options" rel="nofollow noreferrer"><code>add_mutually_exclusive_group()</code></a> instead of <code>add_argument_group()</code></p>
<pre><code>import argparse


def Main():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("input_directory", help="The input directory where all of the files reside in")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-txt", action='store_true', help="The input file is a .txt file")
    group.add_argument("-n12", action='store_true', help="The input file is a .n12 file")
    group.add_argument("-csv", action='store_true', help="The input file is a .csv file")

    print parser.parse_args()

if __name__ == "__main__":
    Main()
</code></pre>
</div>
<span class="comment-copy">You are asking about an enumeration of some sort?  Can you show some examples of what the command should look like?</span>
<span class="comment-copy">Your code defines 4 positional arguments, and thus requires 4 strings from the user.  As you note <code>argument_group</code> just affects the help display; it does nothing during parsing.  I'd suggest you experiment with a flagged argument with a <code>choices=['txt', 'n12', 'csv']</code> parameter.</span>
