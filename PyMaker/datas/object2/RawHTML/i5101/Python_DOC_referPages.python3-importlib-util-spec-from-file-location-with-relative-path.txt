<div class="post-text" itemprop="text">
<p>There are a lot of python questions about how to import <a href="https://stackoverflow.com/questions/72852/how-to-do-relative-imports-in-python">relative packages</a> or by <a href="https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path">explicit location</a> (linked to two popular examples). </p>
<p>In addition there is always the <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">documentation</a></p>
<p>Having read this, I am still not quite sure what specs are, how they are related to modules, and why one would need to tokenize it. </p>
<p>So for someone who doesn't understand, could you please try to explain how one would do this (programmatically and what the means under the hood)</p>
<p>e.g.</p>
<p>if I have</p>
<pre><code>proj-dir
--mod1
--|--__init__.py
--|--class1.py
--mod2
--|--__init__.py
--|--class2.py
</code></pre>
<p>how do I import mod2 into mod1?</p>
<pre><code>import sys
sys.path.insert(0, "../mod2")
</code></pre>
<p>this technically works, but I fear that it may cause issues in the future if I try to pickle objects and use them elsewhere...</p>
<p>The <a href="https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path">explicit location</a> suggested </p>
<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location("module.name", "/path/to/file.py")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>
<p>so in this case I just do:</p>
<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location("mod2.class2", "../mod2/class2.py")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>
<p>??</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, let me clarify the differences between a <strong>Python module</strong> &amp; a <strong>Python package</strong> so that both of us are on the same page. ‚úå </p>
<hr/>
<h3>A module is <strong>a single .py file (or files)</strong> that are imported under one import and used. ‚úî</h3>
<p><code>import aModuleName 
 # Here 'aModuleName' is just a regular .py file.</code></p>
<h3>Whereas, a package is a <strong>collection of modules</strong> in directories that give a package hierarchy. A package contains a distinct <strong><code>__init__.py</code></strong> file. ‚úî</h3>
<p><code>from aPackageName import aModuleName
 # Here 'aPackageName` is a folder with a `__init__.py` file
 # and 'aModuleName', which is just a regular .py file.</code></p>
<hr/>
<p>Therefore, the correct version of your <strong>proj-dir</strong> would be something like this, ‚§µ
<code>
 proj-dir
 --|--__init__.py
 --package1
 --|--__init__.py
 --|--module1.py
 --package2
 --|--__init__.py
 --|--module2.py</code></p>
<blockquote>
<p>üîé Notice that I've also added an empty <strong><code>__init__.py</code></strong> into the <strong>proj-dir</strong> itself which makes it a package too.  </p>
</blockquote>
<p>üëç Now, if you want to import any python object from <strong>module2</strong> of <strong>package2</strong> into <strong>module1</strong> of <strong>package1</strong>, then the <strong>import</strong> statement in the file <strong>module1.py</strong> would be</p>
<p><code>from proj-dir.package2.module2 import object2
 # if you were to import the entire module2 then,
 from proj-dir.package2 import module2</code></p>
<h3>I hope this simple explanation clarifies your doubts on Python imports' mechanism. üòä</h3>
</div>
<span class="comment-copy">How do you plan on running the whole project? Do you want to run <code>mod1.class1</code> as a script i.e to do <code>python -m mod1.class1</code>?</span>
