<div class="post-text" itemprop="text">
<p>I have a python 3 package with the following structure:</p>
<pre><code>.
├── package
│   └── bin
        └── main_module
│   └── lib
│       ├── __init__.py
│       ├── module1.py
│       ├── module2.py
│       └── module3.py
│   └── test
│       ├── test1.py
│       ├── test2.py
│       └── test3.py
│   └── setup.py
</code></pre>
<p>Usually, one runs <code>$ python3 setup.py install</code> and all is good. However, I want to use this package on a cluster server, where I don't have write permissions for <code>/usr/lib/</code>. The following solutions came to my mind.</p>
<ol>
<li><p>Somehow install the package locally in my user folder.</p></li>
<li><p>Modify the package such that it runs without installation.</p></li>
<li><p>Ask the IT guys to install the package for me. </p></li>
</ol>
<p>I want to avoid 3., so my question is whether 1. is possible and if not, how I have to modify the code (particularly the imports) in order to be able to use the package without installation. I have been reading about relative imports in python all morning and I am now even more confused than before. I added <code>__init__.py</code> to package and bin and from what I read I assumed it has to be <code>from package.lib import module1</code>, but I always get <code>ImportError: No module named lib</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order for Python to be able to find your modules you need to add the path of your package to <code>sys.path</code> list. As a general way you can use following snippet:</p>
<pre><code>from sys import path as syspath
from os import path as ospath

syspath.append(ospath.join(ospath.expanduser("~"), 'package_path_from_home'))
</code></pre>
<p><code>os.path.expanduser("~")</code> will give you the path of the home directory and you can join it with the path of your package using <code>os.path.join</code> and then append the final path to <code>sys.path</code>.</p>
<p>If <code>package</code> is in home directory you can just add the following at the leading of your python code that is supposed to use this package:</p>
<pre><code>syspath.append(ospath.join(ospath.expanduser("~"), 'package'))
</code></pre>
<p>Also make sure that you have an <code>__init__.py</code> in all your modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just add the path of your 'package' to environment variable <code>PYTHONPATH</code>. This will get rid of the error you are getting.
OR
programmatically add path of the package to <code>sys.path.append()</code></p>
</div>
<span class="comment-copy">You have to add the path of your package to <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">sys.path</a> so that Python can find your module.</span>
