<div class="post-text" itemprop="text">
<p>I have two csv files that contain:  </p>
<p>CSVFile1:</p>
<pre><code>Data A  Temp at City A  Temp at City B
87.900002   275.151367  273.20108
88.300003   275.213867  273.32608
</code></pre>
<p>CSVFile2:</p>
<pre><code>Data A  Temp at City A  Temp at City B
79.266687   299.566367  213.20766
97.300003   306.213867  271.47999
</code></pre>
<p>I want to make a new CSV file that takes the difference of column values. The result should be what changed between CSVFile 1 and CSVFile 2 and I want to see this difference in a new csv.</p>
<p>I have tried:</p>
<pre><code>import numpy as np    

with open('old.csv', 'r') as t1, open('new.csv', 'r') as t2:
  fileone = t1.readlines()
  filetwo = t2.readlines()

with open('update.csv', 'w') as outFile:
  for line in filetwo:
    if line not in fileone:
        outFile.write(line)

np.savetxt(f, output,fmt="%f",delimiter=',')
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on what I think your code is trying to do (output all the lines in filetwo that aren't in fileone), you could use the array.count() command.</p>
<p>file.readlines() returns an array and so both fileone and filetwo can be used like normal arrays. If the line isn't in fileone, the count of the line will be 0, for example:</p>
<pre><code>x = ["bob", "sandra", "david", "ralph"]
y = ["bob", "david"]

for name in x:
    if(y.index(name) == 0):
        print(name)
</code></pre>
<p>Will output:</p>
<pre><code>bob
sandra
</code></pre>
<p>So, in your program, you could replace:</p>
<pre><code>for line in filetwo:
if line not in fileone:
    outFile.write(line)
</code></pre>
<p>With:</p>
<pre><code>for line in filetwo:
    if(fileone.count(line) == 0):
        outFile.write(line)
</code></pre>
<p><strong>EDIT:</strong></p>
<p>File handling in python is accomplished through the <a href="https://docs.python.org/3.6/library/io.html#text-i-o%20open()" rel="nofollow noreferrer">open()</a> function, which takes the file and the mode to open with (<code>'w'</code> for writing (which will overwrite the file completely) or <code>'r'</code> for reading). So for example:</p>
<pre><code>data = open("data.csv", "w")
</code></pre>
<p>Would open the file, which can then be written to using <code>data.write()</code>. The file can then be closed when finished with using <code>data.close</code>. All this put together gives us:</p>
<pre><code>difference = open("difference.csv", "w")

for line in filetwo:
    if(fileone.count(line) == 0):
        difference.write(line)

difference.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is another answer following a <a href="https://stackoverflow.com/questions/48733595/python-gerating-third-csv-after-comparing-csvfile-1-and-csvfile-2-column-values/48733772#comment84467151_48733772">reclarification</a> of the problem. Solving this problem (finding the difference in <em>value</em> between the two files) is rather complicated and needs to broken down into several steps:</p>
<ol>
<li>The opening of the both files and reading them into python variables</li>
<li>Convert the raw CSV file into a python array of floats</li>
<li>Find the difference between them and put the results into a new array</li>
<li>Convert this results array into a raw CSV file and save it to a file</li>
</ol>
<p><strong>Step 1:</strong></p>
<p>Opening a file in python is done using the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open()</code></a> function, which takes both the files location and a mode (<code>'r'</code> for reading or <code>'w'</code> for writing, along with others). After the file has been opened, we can the use the <a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow noreferrer"><code>file.readlines()</code></a> function to get all the lines in the file, returning them as an array, with each item being a line. Using this:</p>
<pre><code># Open files
file1 = open("data1.csv", "r")
file2 = open("data2.csv", "r")

# Read all file lines
data1 = file1.readlines()
data2 = file2.readlines()

# Close files
file1.close()
file2.close()
</code></pre>
<p>If, for example, we have the files <code>data1.csv</code>:</p>
<pre><code>2,1,5
7,2,4
1,5,1
</code></pre>
<p>And <code>data2.csv</code>:</p>
<pre><code>1,2,4
3,2,6
6,3,1
</code></pre>
<p>Then, at the end of this segment, <code>data1</code> equals <code>['2,1,5\n', '7,2,4\n', '1,5,1']</code> and <code>data2</code> equals <code>['1,2,4\n', '3,2,6\n', '6,3,1']</code></p>
<p><strong>Step 2:</strong></p>
<p>Step 2 is split into two phases - the obtaining of the final data and then the converting of the text string to a number (a float in this case). In stage one, I utilise the <a href="https://docs.python.org/3/library/stdtypes.html#bytearray.split" rel="nofollow noreferrer"><code>array.split()</code></a> function to seperate the entire row of data into the individual data points. For example:</p>
<pre><code>x = "67,45,23"
print(x.split(","))
</code></pre>
<p>Would output:</p>
<pre><code>['67', '45', '23']
</code></pre>
<p>Notice however, that the numbers are still strings, which is why we require the second stage, where I iterate over each seperate data point and convert it to a float (therefore, when you create your data file, you should remove any column headers to stop an error happening). I placed all this into a two seperate functions (one for getting the data, one for converting it to a float) which I then called on both the datasets.</p>
<pre><code># Extract an array from the rows of CSV data
def getDataFromCSV(data):
    extract = []
    # Go through each row in the data
    for row in data:
        # Remove newline in from row
        row = row.strip()
        # Seperate row into individual columns
        row = row.split(",")
        # Add to the final data
        extract.append(row)
    # Return the extracted data
    return extract

final1 = getDataFromCSV(data1)
final2 = getDataFromCSV(data2)

# Convert all data in an array to a float
def convToFloat(data):
    newData = []
    # Iterate through each row
    for row in data:
        newRow = []
        # Go through each column
        for column in row:
            # Convert numbers to an float
            newRow.append(float(column))
        # Append new row to newData
        newData.append(newRow)
    # Replace dataset with new data
    return newData

# Run function on both datasets
final1 = convToFloat(final1)
final2 = convToFloat(final2)
</code></pre>
<p>After both segments are called, <code>final1</code> is <code>[[2.0, 1.0, 5.0], [7.0, 2.0, 4.0], [1.0, 5.0, 1.0]]</code> and <code>final2</code> is <code>[[1.0, 2.0, 4.0], [3.0, 2.0, 6.0], [6.0, 3.0, 1.0]]</code> if we continue to use the same files from above.</p>
<p><strong>Step 3:</strong></p>
<p>In step 3, we find the numerical difference between the two arrays. First, I create an array that will hold the differences between the datasets. Then, the amount of rows in the dataset as well as the amount of columns is determined using the <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer"><code>len()</code></a> function (it goes without saying that to compare the two datasets, they both have to have the same number of rows and columns).</p>
<p>Then, I go through each row in both datasets, creating a new temporary row that will then be appended to the difference array. Before that, each column is gone through and the number in the second file is taken away from the number in the first file to find the change between them. This is also converted to a string in the same line - this is important for later.</p>
<pre><code># Create difference array
difference = []

# Get the amount of rows in the dataset
rows = len(final1)

# Get the amount of columns in the dataset
columns = len(final1[0])

# Go through this for each row
for row in range(rows):
    # Create a new row to put data in
    newRow = []
    # For each column in the row
    for column in range(columns):
        # Get the difference in the dataset and convert it to a string
        diff = str(final2[row][column] - final1[row][column])
        # Append it to the new row
        newRow.append(diff)
    # Add the new row to the final difference array
    difference.append(newRow)
</code></pre>
<p>After this, the <code>difference</code> array is <code>[['-1.0', '1.0', '-1.0'], ['-4.0', '0.0', '2.0'], ['5.0', '-2.0', '0.0']</code>.</p>
<p><strong>Step 4:</strong></p>
<p>Finally, the difference needs to be converted to a raw csv file and saved to disk. To do this, I use the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> function, which joins the items in an array using a certain string. This only works on strings though, which is why we had to make the conversion before. For example:</p>
<pre><code>y = ["The", "small", "dog"]
print(" - ".join(y))
</code></pre>
<p>Outputs:</p>
<pre><code>The - small - dog
</code></pre>
<p>I create an <code>output</code> string to hold the output file and then I go through each row and join the data points together with a <code>,</code> and then add a newline character <code>\n</code> to the end. Then I write to a file - this is as easy as reading to a file, I simple use the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open()</code></a> function again, using the <code>'w'</code> mode (<strong>warning</strong> - this will delete any file that already existed there). Then a simple call to the <code>file.write()</code> function and the program is done. Like this:</p>
<pre><code># Create an output text file
output = ""

# Loop through the results
for row in difference:
    # Append a csv-formatted list to the file
    output += ",".join(row)
    output += "\n"

# Open a file to output to
outputFile = open("output.csv", "w")

# Write output
outputFile.write(output)
</code></pre>
<p>The contents of the <code>output.csv</code> file is:</p>
<pre><code>-1.0,1.0,-1.0
-4.0,0.0,2.0
5.0,-2.0,0.0
</code></pre>
<p><strong>Conclusion:</strong></p>
<p>If you have any questions or want any clarifications, feel free to leave a comment.</p>
</div>
<span class="comment-copy">What does/doesn't work with what you've tried? Why is there a PowerShell tag - don't see Posh code. If you're looking to do this in PowerShell <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/compare-object?view=powershell-6" rel="nofollow noreferrer"><code>Compare-Object</code></a> is what you're after.</span>
<span class="comment-copy">Thanks so much. Yeah my colleagues have debated to run this in a powershell which I have never done or know how to do or as a python script.... If I were to run this task in a powershell, how would i do this? Thanks again</span>
<span class="comment-copy">@Kyle: if you want to reask the same question but for a different language, please open a new question. (and you can link it here by a comment or reference)</span>
<span class="comment-copy">that makes sense. Can I export this as a new csv for example: Difference.csv?</span>
<span class="comment-copy">Yes, the line <code>with open('update.csv', 'w') as outFile:</code> should do this already (though I often do it a bit differently)</span>
<span class="comment-copy">how would you do it?</span>
<span class="comment-copy">can i do x = csv file path and y = csv filepath2 to open and compare?</span>
<span class="comment-copy">Added edit to just show a different way of doing the whole writing the difference to the file. The x and y above are just examples, in reality, they would be the arrays returned by <code>t1.readlines()</code> and <code>t2.readlines()</code></span>
