<div class="post-text" itemprop="text">
<pre><code>import pypyodbc as pyodbc
model_name = 'test'
model_name1 = Master_Cursor.execute("select col1,col2,col3 from tablename where col3 like '%s' order by col3" %(model_name)).fetchall()
</code></pre>
<p>above code returns one record matching <code>model_name = test</code>. 
How would I get back other records having <code>model_name=123test123,abctestabc,ABCtestABC</code> etc??</p>
<p>Basically, looking for</p>
<pre><code>select col1,col2,col3 from tablename where col3 like '%test%'.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>model_name1 = Master_Cursor.execute("select col1,col2,col3 from tablename where col3 like '%%%s%%' order by col3" %(model_name)).fetchall()
</code></pre>
<p>Use 2 percents to represent a real percent character</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Do not</strong> use string formatting to insert variables into your queries, it opens you up to the risk of SQL injection (see e.g. <a href="https://stackoverflow.com/q/601300/3001761">What is SQL injection?</a>) Instead, and per <a href="https://github.com/mkleehammer/pyodbc/wiki/Cursor" rel="nofollow noreferrer">the documentation</a>, you should use <code>?</code> to represent variables in the query, and let the library escape and insert them appropriately. </p>
<p>Next, you need to actually include wild cards along with <code>model_name</code> if you want looser matching. At the moment you're creating:</p>
<pre><code>select col1,col2,col3 from tablename where col3 like 'test' order by col3
</code></pre>
<p>You need to surround <code>model_name</code> with the wildcards <em>before</em> passing it into the query, e.g. using <code>'%%%s%%' % model_name</code> (note that you need to repeat each <code>%</code> to escape it in <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><code>printf</code>-style formatting</a>) or one of the more modern string formatting options.</p>
<p>In this case, for example (using <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a>):</p>
<pre><code>model_name1 = Master_Cursor.execute(
    "select col1, col2, col3 from tablename where col3 like ? order by col3",
    ("%{}%".format(model_name),)
).fetchall()
</code></pre>
</div>
<span class="comment-copy">The first thing is to <i>not</i> use string formatting to create queries since that leaves you open to SQL injection.</span>
<span class="comment-copy">Also if you <i>must</i> do string formatting, there are many more up-to-date options than <code>printf</code> style! The simple answer to your question is <a href="https://stackoverflow.com/q/10678229/3001761">stackoverflow.com/q/10678229/3001761</a>, but you really ought to use proper variable handling, <a href="https://github.com/mkleehammer/pyodbc/wiki/Cursor" rel="nofollow noreferrer">as documented</a>.</span>
<span class="comment-copy">At a guess: <code>model_name1 = Master_Cursor.execute("SELECT col1,col2,col3 FROM tablename WHERE col3 LIKE ? ORDER BY col3",(model_name,)).fetchall()</code></span>
<span class="comment-copy">@roganjosh yes, I'd expect to see <code>... LIKE ?</code>, then the variable would also have <code>%</code> in it for the wildcards. For example: <a href="https://stackoverflow.com/a/24377191/3001761">stackoverflow.com/a/24377191/3001761</a>.</span>
<span class="comment-copy">@roganjosh the Python DB API allows various parameter styles: <a href="https://www.python.org/dev/peps/pep-0249/#paramstyle" rel="nofollow noreferrer">python.org/dev/peps/pep-0249/#paramstyle</a>. I don't know whether it would vary by underlying DB or not.</span>
<span class="comment-copy">This will work, but <i>still has the problem commented on</i>. <b>Do not</b> use string interpolation to build queries.</span>
<span class="comment-copy">2 downvotes for an accepted answer... and the only one that correctly answers the question as asked by the OP.  Also... no other answer mentions the technique of using 2 percents as an escaped percent, which <i>does</i> have legitimate uses</span>
<span class="comment-copy"><i>"the only one that correctly answers the question as asked"</i> - the actual question is <i>"How would I get back other records"</i>, not <i>"how do I escape percents in Python strong formatting"</i>, and I'd expect someone at your rep to be able to spot an XY problem even if it did ask that. <i>"no other answer mentions"</i> - mine <i>does</i> mention it. Did you actually read either the question or the others answer before commenting? <i>"does have legitimate uses"</i> - but you don't even <i>hint</i> that this might not be one of them.</span>
<span class="comment-copy">I think you need <code>...., ("%{}%".format(model_name),))</code> to create the tuple so it doesn't try to unpack the characters of the string.</span>
<span class="comment-copy">@roganjosh I would hope that's handled appropriately, but there will be a fairly prompt error message about passing six parameters to one placeholder otherwise!</span>
<span class="comment-copy">Just preempting another question of the same theme :P Anyway, +1, it's a shame the accepted answer uses string interpolation.</span>
