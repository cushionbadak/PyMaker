<div class="post-text" itemprop="text">
<p>I'm trying to keep a data science project well-organized so I've created a directory inside my <code>src</code> directory called <code>utils</code> that contains a file called <code>helpers.py</code>, which contains some helper functions that will be used in many scripts. What is the best practice for how I should import <code>func_name</code> from <code>src/utils/helpers.py</code> into a file in a totally different directory, such as <code>src/processing/clean_data.py</code>?</p>
<p>I see <a href="https://stackoverflow.com/questions/4383571/importing-files-from-different-folder">answers</a> to this question, and I've implemented a solution that works, but this feels ugly:</p>
<pre><code> sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))))
</code></pre>
<p>Am I doing this right? Do I need to add this to every script that wants to import <code>func_name</code>, like <code>train_model.py</code>?</p>
<p>My current project folder structure:</p>
<pre><code>myproject
    /notebooks
        notebook.ipynb
    /src
        /processing
            clean_data.py
        /utils
            helpers.py
        /models
            train_model.py
        __init__.py
</code></pre>
<p>Example files:</p>
<pre><code># clean_data.py

import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))))
from src.utils.helpers import func_name

func_name()


# helpers.py

def func_name():
    print('I'm a helper function.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to do it is to use <code>__init__.py</code>, <code>setup.py</code> and the <code>setuptools</code> Python package:</p>
<pre><code>myPackage/
    myPackage/
        __init__.py
    setup.py
</code></pre>
<p>This <a href="https://python-packaging.readthedocs.io/en/latest/minimal.html" rel="noreferrer">link</a> has all the steps.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, let me describe you the differences between a <strong>Python module</strong> &amp; a <strong>Python package</strong> so that both of us are on the same page. ‚úå </p>
<hr/>
<h3>A module is <strong>a single .py file (or files)</strong> that are imported under one import and used. ‚úî</h3>
<p><code>import aModuleName 
 # Here 'aModuleName' is just a regular .py file.</code></p>
<h3>Whereas, a package is a <strong>collection of modules</strong> in directories that give a package hierarchy. A package contains a distinct <strong><code>__init__.py</code></strong> file. ‚úî</h3>
<p><code>from aPackageName import aModuleName
 # Here 'aPackageName` is a folder with a `__init__.py` file
 # and 'aModuleName', which is just a regular .py file.</code></p>
<hr/>
<p>Therefore, when we have a project directory named <strong>proj-dir</strong> of the following structure  ‚§µ</p>
<p><code>proj-dir
 --|--__init__.py
   --package1
     --|--__init__.py
     --|--module1.py
   --package2
     --|--__init__.py
     --|--module2.py</code></p>
<blockquote>
<p>üîé Notice that I've also added an empty <strong><code>__init__.py</code></strong> into the <strong>proj-dir</strong> itself which makes it a package too.  </p>
</blockquote>
<p>üëç Now, if you want to import any python object from <strong>module2</strong> of <strong>package2</strong> into <strong>module1</strong> of <strong>package1</strong>, then the <strong>import</strong> statement in the file <strong>module1.py</strong> would be</p>
<p><code>from package2.module2 import object2
 # if you were to import the entire module2 then,
 from package2 import module2</code></p>
<h3>I hope this simple explanation clarifies your doubts on Python imports' mechanism and solves the problem. If not then do comment here. üòä</h3>
</div>
<div class="post-text" itemprop="text">
<p>On Linux, you can just add the path to the <em>parent folder</em> of your <code>src</code> directory to <code>~/.local/lib/python3.6/site-packages/my_modules.pth</code>. See 
<a href="https://stackoverflow.com/questions/15208615/using-pth-files#15209116">Using .pth files</a>. You can then import modules in <code>src</code> from anywhere on your system.</p>
<p>NB1: Replace <code>python3.6</code> by any version of Python you want to use.</p>
<p>NB2: If you use Python2.7 (don't know for other versions), you will need to create <code>__init__.py</code> (empty) files in <code>src/</code> and <code>src/utils</code>.</p>
<p>NB3: Any name<code>.pth</code> file is ok for <code>my_modules.pth</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all let me clarify you that importing an entire module, if you are going to use a part of it, then is not a good idea. Instead of that you can use <code>from</code> to import specific function under a library/package. By doing this, you make your program efficient in terms of memory and performance. </p>
<p>To know more refer these:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/710551/import-module-or-from-module-import">'import module' or 'from module import'</a></li>
<li><a href="http://effbot.org/pyfaq/tutor-whats-the-difference-between-import-foo-and-from-foo-import.htm" rel="nofollow noreferrer">difference between import and from</a></li>
</ol>
<p>Net let us look into the solution.</p>
<p>Before starting off with the solution, let me clarify you the use of <code>__init__.py</code> file. It just tells the python interpreter that the <strong>*.py</strong> files present there are importable which means they are modules and <em>are/maybe</em> a part of a package. </p>
<p>So, If you have N no of sub directories you have to put <code>__init__.py</code> file in all those sub directories such that they can also be imported. Inside <code>__init__.py</code> file you can also add some additional information like which path should be included, default functions,variables,scope,..etc. To know about these just google about <code>__init__.py</code> file or take some python library and go through the same <code>__init__.py</code> file to know about it. (Here lies the solution) </p>
<p>More Info:</p>
<ol>
<li><a href="https://docs.python.org/3/tutorial/modules.html#modules" rel="nofollow noreferrer">modules</a></li>
<li><a href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html" rel="nofollow noreferrer">Be pythonic</a></li>
</ol>
<p>So as stated by <a href="https://stackoverflow.com/users/6154579/sushant-chaudhary">@Sushant Chaudhary</a> your project structure should be like</p>
<pre><code>proj-dir
 --|--__init__.py
   --package1
     --|--__init__.py
     --|--module1.py
   --package2
     --|--__init__.py
     --|--module2.py
</code></pre>
<blockquote>
<p>So now, If I put <code>__init__.py</code> file under my directory like above, Will
  it be importable and work fine? </p>
<p><strong>yes and no</strong>.</p>
</blockquote>
<h2>Yes :</h2>
<p>If you are importing the modules within that project/package directory. 
for example in your case<br/>
 you are importing package1.module1 in pakage2.module2 as <code>from package1 import module1</code>.</p>
<p>Here you have to import the <strong>base dir</strong> inside the sub modules, <strong><em>Why?</em></strong> the project will run fine if you are running the module from the same place. <em>i.e: inside package2 as python module2.py</em>, <strong><em>But</em></strong> will throw <code>ModuleNotFoundError</code> If you run the module from some other directory. <em>i.e: any other path except under package2</em> for example under proj-dir as <code>python package2/module2.py</code>. This is what happening in your case. You are running the module from project-dir. </p>
<p>So How to fix this?</p>
<p>1- You have to append basedir path to system path in module2.py as </p>
<pre><code>from sys import path
dir_path = "/absolute/path/to/proj-dir"
sys.path.insert(0, dir_path)
</code></pre>
<p>So that module2 will be able to find package1 (and module1 inside it).</p>
<p>2- You have to add all the sub module paths in <code>__init__.py</code> file under proj-dir.</p>
<p>For example:</p>
<pre><code>#__init__.py under lxml
# this is a package

def get_include():
    """
    Returns a list of header include paths (for lxml itself, libxml2
    and libxslt) needed to compile C code against lxml if it was built
    with statically linked libraries.
    """
    import os
    lxml_path = __path__[0]
    include_path = os.path.join(lxml_path, 'includes')
    includes = [include_path, lxml_path]

    for name in os.listdir(include_path):
        path = os.path.join(include_path, name)
        if os.path.isdir(path):
            includes.append(path)

    return includes
</code></pre>
<p>This is the <code>__init__.py</code> file of <strong><em>lxml</em></strong> (a python library for parsing html,xml data). You can refer any <code>__init__.py</code> file under any python libraries having sub modules.<strong>ex (os,sys)</strong>. Here I've mentioned <strong><em>lxml</em></strong> because I thought it will be easy for you to understand. You can even check <code>__init__.py</code> file under other libraries/packages. Each will have it's own way of defining the path for submodules.</p>
<h2>No</h2>
<p>If you are trying to import modules outside the directory. Then you have to export the module path such that other modules can find them into environment variables. This can be done directly by appending absolute path of the base dir to <strong><em>PYTHONPATH</em></strong> or to <strong><em>PATH</em></strong>. </p>
<p>To know more:</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/PATH_(variable)" rel="nofollow noreferrer">PATH variables in OS</a></li>
<li><a href="https://docs.python.org/3/using/cmdline.html#environment-variables" rel="nofollow noreferrer">PYTHONPATH variable</a></li>
</ol>
<p>So to solve your problem, include the paths to all the sub modules in <code>__init__.py</code> file under <strong><em>proj-dir</em></strong> and add the <strong><em>/absolute/path/to/proj-dir</em></strong> either to <code>PYTHONPATH</code> or <code>PATH</code>.</p>
<p><strong><em>Hope the answer explains you about usage of <code>__init__.py</code> and solves your problem.</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can only import code from installed packages or from files in you working directory or subdirectories.</p>
</div>
<div class="post-text" itemprop="text">
<p>the way I see it, your problem would be solved if you would have your module or package installed, like an yother package one installs and then imports (numpy, xml, json etc.)</p>
<p>I also have a package I constantly use in all my projects, <a href="https://github.com/PetronelaCretu/pyUtilities" rel="nofollow noreferrer">ulitilies</a>, and I know it's a pain with the importing.</p>
<p>here is a description on how to How to package a python application to make it pip-installable:
<a href="https://marthall.github.io/blog/how-to-package-a-python-app/" rel="nofollow noreferrer">https://marthall.github.io/blog/how-to-package-a-python-app/</a></p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>Navigate to your python installation folder</p></li>
<li><p>Navigate to lib</p></li>
<li><p>Navigate to site-packages</p></li>
<li><p>Make a new file called <code>any_thing_you_want.pth</code></p></li>
<li><p>Type <code>.../src/utils/helpers.py</code> inside that file with your favorite text editor</p></li>
</ul>
<p>Note: the ellipsis before <code>scr/utils/helpers.py</code> will look something like: <code>C:/Users/blahblahblah/python_folders/scr...</code> <strong>&lt;- YOU DO NEED THIS!</strong></p>
<p>This is a cheap way out but it keeps code clean, and is the least complicated. The downside is, for every folder your modules are in, example.pth will need them. Upside: works with Windows all the way up to Windows 10</p>
</div>
<span class="comment-copy">You just need to add <code>__init__.py</code> files at each level you import from/to. This is a standard for python's Distribution Packages.</span>
<span class="comment-copy">You should have <code>__init__.py</code> in each of those folders. And your imports should all be based off of where you are executing your project from in order to avoid all that path manipulation.</span>
<span class="comment-copy">@KeatsKelleher After adding <code>__init__.py</code> in the <code>/utils</code> and <code>/processing</code> and removing the <code>sys.path.append(...)</code>, I get a <code>ModuleNotFoundError: No module named 'src'</code>. Can you provide a more detailed answer?</span>
<span class="comment-copy">Stop doing that sys.path stuff. Read the answer provided and read about how Python packages and modules work. How the import system works and what the <code>__init__.py</code> means</span>
<span class="comment-copy">Thanks for the detailed response. I've added the <code>__init__.py</code> files in the directories as instructed, however where I run <code>projdir $ python package1/module1.py</code>, it returns <code>ModuleNotFoundError: No module named projdir</code>.</span>
<span class="comment-copy">Could you post your <b>new</b> project directory structure here so that I could figure out how exactly you're trying to access the module ?</span>
<span class="comment-copy">I started a new project separate from my existing data science project with the exact directories/files as explained in your answer (I only renamed proj-dir to projdir). Could you create a Github repo with a super basic working example?</span>
<span class="comment-copy">@blahblahblah, Would you mind sharing your faulty project directory with me via GitHub instead ? I would be able to find out the exact cause for the issue in doing so, instead of me making a project that would work on my system and not on yours.</span>
<span class="comment-copy">@blahblahblah Also, check the new project directory structure I've edited and compare it with your's and don't forget to remove all the changes related to <b><code>sys.path</code></b> from all of your modules.</span>
<span class="comment-copy">Isn't this missing the context of how <code>get_include()</code> is called?</span>
<span class="comment-copy">"You have to append basedir path to system path in module1.py", shouldn't this be module2.py, so that it will be able to find module1? And if it is, this is exactly what the OP was trying to avoid, no?</span>
<span class="comment-copy">@HomeroBarrocasSEsmeraldo I've mentioned that this is <code>__init__.py</code> file of <code>lxml</code>. So whenever <code>lxml</code> is imported automatically <code>__init__.py</code> is called. You can assume it like a constructor for the package <code>lxml</code>. Please refer the <code>lxml</code> docs for more details.</span>
<span class="comment-copy">I am confused of where that function is called, as that code is only its declaration. I have checked the code at <a href="https://github.com/lxml/lxml/blob/master/src/lxml/__init__.py" rel="nofollow noreferrer">github.com/lxml/lxml/blob/master/src/lxml/__init__.py</a> it is exactly what you wrote. But do you know where the function is called?</span>
<span class="comment-copy">The function is called nowhere but it's added there such that if needed the submodules can directly call that to include the project path. For more understanding <a href="https://stackoverflow.com/a/50307979/6663095">refer this.</a></span>
