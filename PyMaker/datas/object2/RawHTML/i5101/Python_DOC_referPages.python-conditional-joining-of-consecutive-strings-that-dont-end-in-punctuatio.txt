<div class="post-text" itemprop="text">
<p>I have a list of words,</p>
<pre><code>list1 = ['hello', 'how', 'are', 'you?', 'i', 'am', 'fine', 'thanks.', 'great!']
</code></pre>
<p>Which I would like to join to be,</p>
<pre><code>list2 = ['hello how are you?', 'i am fine thanks.', 'great!']
</code></pre>
<p>Is there an simple pythonic way to do this? I have considered doing an itertools.groupby join but the problem is that all of the elements of my group don't have the same criteria (I can't just query if they all have punctuation). Basically, whether or not element x gets included is a function of potentially element x+n where n can be large. This complicates the problem. </p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>groupby()</code>; you'd get separate groups for those words with and without punctuation, which you then have to re-combine.</p>
<p>Use a generator function:</p>
<pre><code>import string

def sentence_groups(l, punctuation=tuple(string.punctuation)):
    group = []
    for w in l:
        group.append(w)
        if w.endswith(punctuation):
            yield group
            group = []
    if group:
        yield group
</code></pre>
<p>The generator collects words from the input list until one ends with punctuation, at which point that whole group is yielded, after which the group is cleared for a new group.</p>
<p>When iteration ends and there are still words in the group, that last group is yielded too (even though they don't have punctuation at the end).</p>
<p>Use this together whith <code>str.join()</code> to produce your output:</p>
<pre><code>&gt;&gt;&gt; list1 = ['hello', 'how', 'are', 'you?', 'i', 'am', 'fine', 'thanks.', 'great!']
&gt;&gt;&gt; [' '.join(group) for group in sentence_groups(list1)]
['hello how are you?', 'i am fine thanks.', 'great!']
</code></pre>
<p>I used <em>all</em> punctuation in the <a href="https://docs.python.org/3/library/string.html#string.punctuation" rel="nofollow noreferrer"><code>string.punctuation</code></a> string; this is quite broad:</p>
<pre><code>&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
</code></pre>
<p>Pass in a tuple of specific punctuation characters as the second argument if you wanted to narrow that down, or hardcode your own definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>A humble solution:</p>
<pre><code>import string

words = ['hello', 'how', 'are', 'you?', 'i', 'am', 'fine', 'thanks.', 'great!']
sents = []

range_flag = 0
for index, word in enumerate(words):
  if word[-1] in string.punctuation:
    sents.append(words[range_flag+1:index+1])
    print(range_flag, index)
    range_flag = index

print([" ".join(s) for s in sents])

(0, 3)
(3, 7)
(7, 8)
['how are you?', 'i am fine thanks.', 'great!']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>import itertools
import re
list1 = ['hello', 'how', 'are', 'you?', 'i', 'am', 'fine', 'thanks.', 'great!']
new_l = [list(b) for a, b in itertools.groupby(list1, key=lambda x:bool(re.findall('(\?|\.)$', x)))]
final_data = [' '.join(new_l[i]+new_l[i+1]) if i+2 &lt; len(new_l) else new_l[i][0] for i in range(0, len(new_l), 2)]
</code></pre>
<p>Output:</p>
<pre><code>['hello how are you?', 'i am fine thanks.', 'great!']
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/24764572/how-to-recursively-join-a-string-to-an-array-of-type-string-in-golang">How to recursively join a string to an array of type string in golang</a></span>
<span class="comment-copy">FWIW I was looking for a Python solution</span>
<span class="comment-copy">@NaruS: that question has zero bearing on this one. Not only is that a different programming language, it doesn't address producing groups whenever a condition in the list occurs. This question is not looking for a recursive join. If it was, I'm sure we could find be better duplicates that actually were using Python.</span>
<span class="comment-copy">That did it! Thanks Martjin!</span>
<span class="comment-copy">Not really true what you say about <code>groupby</code>... with an appropriate key, you <i>don't</i> get separate groups you need to combine: <a href="https://eval.in/957101" rel="nofollow noreferrer">eval.in/957101</a></span>
<span class="comment-copy">Haha that's a lot work to cram it into the key. Something like that might be useful if you absolutely <i>needed</i> to use groupby I guess :)</span>
<span class="comment-copy">@StefanPochmann: do I really need to add <i>or using convoluted key functions</i> to my answer? Like I commented on Ajax's answer: <i>Sure, you can make it work if you try hard enough, but this is practically unreadable</i>.</span>
<span class="comment-copy">Sure, you can make it work if you try hard enough, but <b>this is practically unreadable</b>. Good luck maintaining this code!</span>
