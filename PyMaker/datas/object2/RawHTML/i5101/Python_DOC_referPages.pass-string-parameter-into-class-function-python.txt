<div class="post-text" itemprop="text">
<p>If I have a class as such:</p>
<pre><code>class Sample:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
</code></pre>
<p>I can create an object by:</p>
<pre><code>temp = Sample(a=100,b=100,c=100)
</code></pre>
<p>But what if I have:</p>
<pre><code>my_str = "a=100,b=100,c=100"
</code></pre>
<p>How can I <code>temp = Sample(my_str)</code> properly? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can parse and eval the string like:</p>
<h3>Code:</h3>
<pre><code>@classmethod
def from_str(cls, a_str):
    return cls(**eval("dict({})".format(a_str)))
</code></pre>
<h3>Test Code:</h3>
<pre><code>class Sample:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    @classmethod
    def from_str(cls, a_str):
        return cls(**eval("dict({})".format(a_str)))

x = Sample.from_str("a=100,b=100,c=100")
print(x.a)
</code></pre>
<h3>Results:</h3>
<pre><code>100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>eval</code></p>
<pre><code>temp = eval("Sample("+my_str+")")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although it is definitely an option, using <a href="https://www.reddit.com/r/Python/comments/7xr839/after_the_recent_pybitmessage_exploit_let_us_all/" rel="nofollow noreferrer"><code>eval</code> can be dangerous</a>. Here is an option which is <a href="https://stackoverflow.com/users/7311767/stephen-rauch">@StephenRauch</a>'s code just without using <code>eval</code>.</p>
<pre><code>&gt;&gt;&gt; class Sample:
...     def __init__(self, a, b, c):
...         self.a = a
...         self.b = b
...         self.c = c
... 
...     @classmethod
...     def from_str(cls, a_str):
...         result = {}
...         for kv in a_str.split(','):
...             k, v = kv.split('=')
...             result[k] = int(v)
...         return cls(**result)
... 
&gt;&gt;&gt; x = Sample.from_str('a=100,b=100,c=100')
&gt;&gt;&gt; x.a
100
&gt;&gt;&gt; type(x.a)
&lt;class 'int'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the below code.</p>
<pre><code>class Sample:
    def __init__(self, a, b, c):
        self.a = int(a)
        self.b = int(b)
        self.c = int(c)

mystr = "a=100,b=100,c=100"
temp = Sample(mystr.split(",")[0].split("=")[1],mystr.split(",")[1].split("=")[1],mystr.split(",")[2].split("=")[1])
print(temp.a)
print(temp.b)
print(temp.c)
</code></pre>
<p>See it in action <a href="https://repl.it/repls/NotedGrubbyProspect" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This works for me:</p>
<pre><code>my_str = "a=100,b=100,c=100"                                                                                         

temp = Sample(int(my_str.split(',')[0].split('=')[1]),
               int(my_str.split(',')[1].split('=')[1]),
               int(my_str.split(',')[2].split('=')[1]))

print(temp.a)
# prints 100

print(temp.b)
# prints 100

print(temp.c)
# prints 100
</code></pre>
</div>
<span class="comment-copy">This seems like an XY problem. Where do you get that string?</span>
<span class="comment-copy">you might need to parse it in another constructor</span>
<span class="comment-copy">propose : change <code>__init__</code> to `__init__(self , **kwds)</span>
<span class="comment-copy">Some of these answers are recommending to use <code>eval</code>. While it is simple, <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">there are reasons why <code>eval</code> is discouraged.</a></span>
<span class="comment-copy"><code>eval</code> is a to use , no for avoiding! it has proplems but when need must use it ,</span>
<span class="comment-copy">How about <code>ast.literal_eval</code> instead?  I guess formatting it to a dict is ok too.</span>
<span class="comment-copy">@pylang <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> can't handle operators (like <code>=</code>). <code>ast.literal_eval('a=100')</code> raises <code>SyntaxError: invalid syntax</code>.</span>
<span class="comment-copy">I don't understand the negative voting for my answer.</span>
<span class="comment-copy">me too, yours and below ones same I guess - imma upvote you buddy</span>
<span class="comment-copy">@AnkushRathi Thanks.</span>
<span class="comment-copy">Shouldn't <code>temp.a == 100</code> and not <code>temp.a == 'a=100'</code>?</span>
<span class="comment-copy">@DeliriousLettuce good point, edited my answer.</span>
<span class="comment-copy">But isn't it supposed to be an integer? You are returning <code>'100'</code> vs <code>100</code></span>
<span class="comment-copy">@DeliriousLettuce Thanks for the comment, edited it again :)  How does it look now?</span>
