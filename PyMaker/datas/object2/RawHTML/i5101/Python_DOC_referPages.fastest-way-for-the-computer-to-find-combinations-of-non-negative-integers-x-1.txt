<div class="post-text" itemprop="text">
<p>I want to find an efficient way for computer to handle LARGE NUMBER OF VARIABLES (say 50: x1, ... , x50) that do something like this:
find ALL combinations [x1,x2,x3]
satisfying:</p>
<ol>
<li><p>0 &lt;= x1 &lt;= x2 &lt;= x3</p></li>
<li><p>x1 + x2 + x3 = 100</p></li>
</ol>
<p>Here is an example of finding all combinations with sum = 100 but [1,99] and [99,1] are considered to be different here:</p>
<pre><code>x=[]
for i, j in itertools.product(range(0,101), range(0,101)):
    if i+j==100:
       x.append([i,j])
</code></pre>
<p>I want to find a way to reduce the number of loops and give only things like:</p>
<p>[0,100], [1,99], [2,98], .........., [50,50]</p>
<p>And nothing from [51,49].</p>
<p>The main goal is doing this with 50 variables (x_1,...x_50) which sums up to 100.</p>
<p>It is not likely to do it with normal loop</p>
</div>
<div class="post-text" itemprop="text">
<p>For 3 variables of form <code>i+j+k==100</code> we need two for loops and for n variables we need n-1 for loops to produce the result </p>
<pre><code>for i in range(0,101):
    for j in range(i,101):
        if(100-j-i&gt;=j):
            print i,j,100-j-i
</code></pre>
<p><strong>Result</strong> </p>
<pre><code>0 0 100
0 1 99
0 2 98
0 3 97
0 4 96
0 5 95
......
......
32 33 35
32 34 34
33 33 34
</code></pre>
<p><strong>Edit 1</strong></p>
<p>or if you dont want to write the code for n-1 loops use this recurisive function and it will be faster as i did some optimization to reduce its runtime</p>
<pre><code>def foo(numberofvariables,sumofvar):
    templist=[0]*(numberofvariables)

    def fun(depthofrecursion,tempsum,sumofvar,var):

        if(depthofrecursion&lt;numberofvariables-1):
            for i in range(var,(sumofvar/(numberofvariables-depthofrecursion)+2)):

                templist[depthofrecursion]=i;
                fun(depthofrecursion+1,tempsum+i,sumofvar,i)
        else:

            if(sumofvar-tempsum&gt;=var):
                templist[numberofvariables-1]=sumofvar-tempsum
                for i in range(0,numberofvariables):
                    print templist[i],

                print 

    fun(0,0,sumofvar,0)

foo(3,100)
</code></pre>
<p>here the n is 3 (number of variables)and sum is 100 produces the same output as above  </p>
</div>
<div class="post-text" itemprop="text">
<p>what about <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinaison </a> ??</p>
<pre><code>import random
from itertools import combinations
l = random.sample(range(1, 10000), 100)

alist =[(x1,x2,x3) if  (0 &lt;= x1 &lt;= x2 &lt;= x3 and sum([x1,x2,x3]) == 100) else None for x1,x2,x3 in combinations(sorted(l), 3)]
L = list(filter(None, alist))
</code></pre>
<p>output </p>
<pre><code>[(1, 4, 95),
 (1, 7, 92),
 (1, 10, 89),
 (1, 12, 87),
 (1, 17, 82),
 (1, 18, 81),
 (1, 30, 69),
 (1, 32, 67),
 (1, 34, 65),
 (1, 38, 61),
 (1, 49, 50),
 (2, 3, 95),
 (2, 5, 93),
 (2, 7, 91),
 (2, 10, 88),
 (2, 12, 86),
 (2, 17, 81),
 (2, 18, 80),
 (2, 22, 76),
 (2, 30, 68),
 (2, 33, 65),
 (3, 4, 93),
 (3, 5, 92),
 (3, 7, 90),
 (3, 10, 87),
 (3, 12, 85),
 (3, 17, 80),
</code></pre>
</div>
<span class="comment-copy">How many is a "large number"?</span>
<span class="comment-copy">Can you think of a faster way to find a <code>j</code> for a given <code>i</code> such that <code>i + j == 100</code>?</span>
<span class="comment-copy">possible duplicate of <a href="https://stackoverflow.com/questions/4632322/finding-all-possible-combinations-of-numbers-to-reach-a-given-sum">Finding all possible combinations of numbers to reach a given sum</a></span>
<span class="comment-copy">@avigil: This problem is not as hard as that one. (And it isn’t about subsets of {1, …, 100}.)</span>
<span class="comment-copy">You can try <code>list(itertools.chain(*[((i,100-i),(100-i,i)) if i!=100-i else ((i,i),) for i in range(51)]))</code></span>
<span class="comment-copy">your codes don't work... you may copy paste and try it yourself</span>
<span class="comment-copy">I think you mean <code>list(filter(lambda x: x is not None, alist))</code>.</span>
<span class="comment-copy">which version of python are you using ??</span>
<span class="comment-copy">the code is for python 3</span>
<span class="comment-copy">@avigil yes or anyway to remove None values from a list</span>
