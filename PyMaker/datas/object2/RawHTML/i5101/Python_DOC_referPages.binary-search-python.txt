<div class="post-text" itemprop="text">
<p>I am trying to get the time taken for 
different sizes on a binary search. I only get for 2097152 with this program. I am new to python.I know indentation is crucial in python. Is it anything with indentation? Thank you</p>
<pre><code>import time
def bsearch(a,first,last,key):
    if first&gt;last:
        #print "not found"
            return
    mid=(first+last)//2
    if key==a[mid]:
        #print "found"
            return
    elif key&gt;a[mid]:
        bsearch(a,mid+1,last,key)
    else:
        bsearch(a,first,mid-1,key)

a=[1]*2097152
sizes=[128,512,2048,8192,32768,131072,524288,2097152]
for i in range(0,8):
    for j in range(0,sizes[i]):
        a[j]=j
start=time.time()
for k in range(0,20000):
    bsearch(a,0,j-1,j)
stop=time.time()
print ("time for size "+str(j)+" is: "+str((stop-start)*1000))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from timeit import timeit

for length in [128,512,2048,8192,32768,131072,524288,2097152]:
    l = list(range(length+1))
    command = 'bsearch(l, 0, length, length)'
    print('{:&lt;23} seconds for {}'.format(timeit(command, globals=globals(), number=2000), length))
</code></pre>
<p>Here's a version using <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow noreferrer"><code>timeit.timeit</code></a> to measure the time it takes to execute <code>bsearch</code> 2000 times on lists of the given sizes. On my machine the results were</p>
<pre class="lang-none prettyprint-override"><code>0.005647999999382591    seconds for 128
0.007602000000588305    seconds for 512
0.009716999999909604    seconds for 2048
0.010829999999259599    seconds for 8192
0.012752000000546104    seconds for 32768
0.0143049999996947      seconds for 131072
0.01644899999973859     seconds for 524288
0.020023000000037428    seconds for 2097152
</code></pre>
<p>Edit:</p>
<p>If you're using a Python version &lt; 3.5, <code>globals</code> won't be available in <code>timeit</code>.  You can instead <code>import</code> from <code>__main__</code></p>
<pre><code>from timeit import timeit

for length in [128,512,2048,8192,32768,131072,524288,2097152]:
    l = list(range(length+1))
    command = 'bsearch(l, 0, length, length)'
    setup = 'from __main__ import bsearch, l, length'
    print('{:&lt;23} seconds for {}'.format(timeit(command, setup=setup, number=2000), length))
</code></pre>
</div>
<span class="comment-copy">What do you get for <code>2097152</code>?  Does your binary search work or not?  You could try using <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow noreferrer"><code>timeit.timeit</code></a> instead of manually trying to calculate the time difference.</span>
<span class="comment-copy">Because of the order and nesting of your for loops <code>j</code> is always 2097152 when it comes to your testing, what are you expecting to happen?</span>
<span class="comment-copy">I am expecting something like this -                                           0.173451093 seconds for 128 1.245498027 seconds for 512 1.152212907 seconds for 2048 1.195236266 seconds for 8192 1.248549547 seconds for 32768 1.286318933 seconds for 131072 1.363635626 seconds for 524288 1.506570667 seconds for 2097152</span>
<span class="comment-copy">I get " time for size 2097152 is : 368.13902854 @Patrick Haugh</span>
<span class="comment-copy">Now I got timeit( )got an unexpected keyword 'globals'. @Patrick Haugh</span>
<span class="comment-copy">Looks like that was added in python 3.5. See my edit for a snippet that can work for older versions of python.</span>
<span class="comment-copy">Thank you very much.</span>
