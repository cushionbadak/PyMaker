<div class="post-text" itemprop="text">
<p>PEP 8 <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">states</a></p>
<blockquote>
<p>Wildcard imports (from  import *) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. </p>
</blockquote>
<p>Nonetheless the <a href="https://docs.python.org/3/library/tkinter.html" rel="nofollow noreferrer">official documentation</a> is contradicting:</p>
<blockquote>
<p>to use Tkinter all you need is a simple import statement:</p>
</blockquote>
<pre><code>import tkinter
</code></pre>
<blockquote>
<p>Or, more often:</p>
</blockquote>
<pre><code> from tkinter import *
</code></pre>
<p>Is this a "documentation bug" ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I raised bug <a href="https://bugs.python.org/issue32830" rel="nofollow noreferrer">issue 32830</a> on this point and the consensus (reached by Python core developers) is that although the <code>from tkinter import *</code> does violate PEP 8, this is a reasonable exception because <code>tkinter</code> "provides the enormous number of names (mostly constants like RIGHT or VERTICAL) which are convenient to use without prefix." Additionally, PEP 8 states "do not break backwards compatibility just to comply with this PEP!" and since tkinter is frequently imported in this way currently, this sentiment applies here.</p>
</div>
<span class="comment-copy">Relevant <a href="https://stackoverflow.com/questions/18337882/tkinter-importing-without" title="tkinter importing without">stackoverflow.com/questions/18337882/tkinter-importing-without</a></span>
<span class="comment-copy">That documentation line has remained unchanged for &gt;10 years (at least Py 2.4) which makes it seem even more likely it's a bug <a href="https://github.com/python/cpython/commit/116aa62bf54a39697e25f21d6cf6799f7faa1349#diff-05a258c160de90c51c1948689f788ef7R53" rel="nofollow noreferrer">github.com/python/cpython/commit/â€¦</a></span>
<span class="comment-copy">My opinion is that it is a mistake in the documentation. For some reason, however, some in the community think tkinter should be an exception. For me, tkinter is a perfect example of why you should <i>not</i> use global imports since there are other packages (ttk) that export classes with identical names.</span>
<span class="comment-copy">I think regardless of how the examples in the documentation are written, you should stick with PEP8 in this regard. Think of the documentation as not necessarily showing you the best way to do something, but simply <i>a</i> way. Notice that the documentation leads with the PEP8 way, and then simply concedes that a lot of people use the global import.</span>
<span class="comment-copy">Interesting outcome: The official sources consider the tkinter module to be an exception to the best practice. I think another comment on the PEP bug thread should be quoted: "PEP 8 also says: 'In particular: do not break backwards compatibility just to comply with this PEP!'  This is one of those cases. There is a ton of code out there that depends on importing tkinter this way. "</span>
<span class="comment-copy">Those constants have string values, which are somewhat faster to use even, such as <code>'right'</code> or <code>'vertical'</code>. Tk takes backward compatibility very seriously(if the constants themselves were to change so were to their variable references) as far as I've read. I do not believe neither are well enough reasons for the bad practice.</span>
<span class="comment-copy">@Nae: I don't think the string literals are any faster. At least, not in any measurable sense. The speed difference between <code>pack(side=RIGHT)</code> and <code>pack(side="right")</code> is probably measured in microseconds.</span>
