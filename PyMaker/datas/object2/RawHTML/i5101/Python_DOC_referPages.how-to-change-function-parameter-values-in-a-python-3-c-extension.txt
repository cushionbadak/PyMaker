<div class="post-text" itemprop="text">
<p>I can't figure out how to change the value of a parameter passed from Python to C. </p>
<pre><code>PyArg_ParseTuple (args, "Os", &amp;file_handle, &amp;filename)
</code></pre>
<p>will let me get file_handle as a <code>PyObject *</code>. Is there a way to change the value <code>file_handle</code> represents? I know I can return multiple values to a Python function call, but that isn't what I want to do in this case. Just for consistency with the C API I am making a module to represent.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't change what the caller's parameter refers to in the caller, all you can do is perform mutations of the object itself using its API. Basically, you received a <em>copy</em> of the caller's pointer, <em>not</em> a C++-style <em>reference</em> (nor a C-style double pointer that would give you access to a pointer declared in the caller), so you can't reassign the argument in the caller.</p>
<p>In general, you don't <em>want</em> to try to perfectly reproduce C APIs (I'm assuming your C API uses double-pointers to allow reassigning the value in the caller?) in Python APIs. That's how PHP operates, and it makes for terribly inconsistent APIs that often take no advantage of being in a high level language.</p>
<p>This case is doubly-fraught because, when used properly with <code>with</code> statements, file-like objects actually have multiple references (not C++ meaning) to them, the named variable (that was passed to your function) and one or more hidden references held inside the interpreter (to ensure the <code>with</code> statement has a consistent <code>__exit__</code> to call, even if the caller deletes their own binding for the object). Even if you could somehow reassign the caller's argument, the <code>with</code> statement would still refer to the original file object, and it wouldn't be obvious to the caller that they needed to <code>close</code> (implicitly using <code>with</code> or explicitly calling <code>close</code>) the result again because your function replaced their object.</p>
<p>Return multiple results (<a href="https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue" rel="nofollow noreferrer"><code>Py_BuildValue</code> makes this easy</a>), and the caller can replace their value if they want to.</p>
</div>
<span class="comment-copy">Are you trying to replicate the behavior of a C function that takes a <code>something *pointer</code> and assigns to <code>*pointer</code>? That's not something Python supports.</span>
<span class="comment-copy">I tried to answer as best I could, but the lack of details here makes me suspect <a href="https://meta.stackexchange.com/q/66377/322040">an XY problem</a>; in general, you shouldn't have resource allocating functions that are also returning other values (if they fail, they raise exceptions), because it becomes quite difficult to properly manage the resources properly (you'd have to unpack, then use a <code>with</code> to ensure proper closure). Can you provide more details?</span>
<span class="comment-copy">The file handle is a good example. In C, it would be FILE *. I want to pass one back so I was expecting that I could update the reference passed in with a new value (assuming a FILE ** is passed in in the form of a uint64_t * that I would cast back and forth in the C code assuming that the Python programmer doesn't munge it). It seems that this isn't the right thing to do nor really possible without writing all but broken code or code that is flaky at best.</span>
<span class="comment-copy">Thanks. This explains why I can't figure it out.</span>
