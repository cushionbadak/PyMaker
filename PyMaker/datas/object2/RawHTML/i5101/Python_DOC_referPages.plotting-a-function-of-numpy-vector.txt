<div class="post-text" itemprop="text">
<p>I want to plot a function of a numpy matrix</p>
<pre><code>f = lambda X: X.T @ X
</code></pre>
<p>but I'm not sure how to proceed. I'm familiar with the method for multivariable functions, and the equivalent function with multivariable functions (along with plotting) would be</p>
<pre><code>g = lambda x, y: x**2 + y**2
X, Y = np.meshgrid(
    np.linspace(start = -10, stop = 10, num = 101),
    np.linspace(start = -10, stop = 10, num = 101))
plt.plot_surface(X,Y,g(X,Y))
</code></pre>
<p>so <code>f(np.matrix((x,y))) == g(x,y)</code>, but I don't know how to extend this to my vector function. So how can this be achieved?</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is arranging dimensions. Your f seem to expect X and Y to be cast as a collection of vectors. But X and Y are two 101x101 matrices. So some rearranging and massaging is required. The good news is that using the <code>map</code> command below can be done to any function. The bad news - efficiency is elegance are probably not optimal.</p>
<p>This is what I would try:</p>
<pre><code>Z = map(f, np.array([X.ravel(), Y.ravel()]).T)
Z = np.array(list(Z)).reshape(X.shape)
</code></pre>
<p>And then</p>
<pre><code>ax.plot_surface(X,Y,Z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that what is meant by <code>X.T @ X</code> is <code>numpy.dot(X.T,X)</code>, you may directly plot the result just as with any other function.</p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

f = lambda X: np.dot(X.T,X)

fig = plt.figure()
ax = plt.subplot(projection="3d")

X, Y = np.meshgrid(
    np.linspace(start = -10, stop = 10, num = 101),
    np.linspace(start = -10, stop = 10, num = 101))
ax.plot_surface(X,Y,f(X))

plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/0C86d.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/0C86d.png"/></a></p>
<p>However, in order to get the desired output from the question, the function depends on both x and y, so what is wanted is probably</p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

f = lambda xi,yi: np.dot(np.dot([xi,yi],np.identity(2)),[[xi],[yi]])

fig = plt.figure()
ax = plt.subplot(projection="3d")

X, Y = np.meshgrid(
    np.linspace(start = -10, stop = 10, num = 101),
    np.linspace(start = -10, stop = 10, num = 101))

Z = np.vectorize(f)(X,Y)
ax.plot_surface(X,Y,Z)

plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/egIQT.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/egIQT.png"/></a></p>
</div>
<span class="comment-copy">So at a point <code>(xi, yi)</code> what is the associated <code>z</code> value?</span>
<span class="comment-copy">What is <code>X.T @ X</code> supposed to be? It's not valid python syntax, is it?</span>
<span class="comment-copy">@ImportanceOfBeingErnest that's matrix multiplication, new in Python 3. <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465" rel="nofollow noreferrer">See this documentation</a></span>
<span class="comment-copy">@unutbu <code>z = f(np.matrix((xi,yi)))</code></span>
<span class="comment-copy"><code>@</code> was added in 3.5, but is equivalent to <code>np.dot(,)</code>. While this approach works with this particular function, I was more interested in a slightly more general approach, as this break down for <code>f = lambda X: X.T @ A @ X</code>, where <code>A</code> is a square matrix of size <code>n≠101</code>.</span>
<span class="comment-copy">Not sure what you mean. For matrix multiplication the number of columns of the first matrix needs to match the number of rows of the second. This is rather a mathematical necessity than a question of implementation in some programming language.</span>
<span class="comment-copy">Indeed, so I believe the input to <code>f</code> should be a list of grid points, not a matrix of the gridlines.</span>
<span class="comment-copy">What exactly is the desired outcome?</span>
<span class="comment-copy">The exact same result as your plot above when using <code>f = lambda X: X.T @ np.identity(2) @ X</code>, which is mathematically identical to your function.</span>
