<div class="post-text" itemprop="text">
<p>While I was learning LEGB scope rule of python, I wanted a deeper understanding of how global works in python. It seems that even if I refer to an undefined variable(Which is also not in builtins), The code doesn't give me an error. Please help me figure out what actually is happening.</p>
<pre><code>def hey():
    x = 1
    def hey2():
        global ew #ew not defined in the module
        x = 2
        print(x)
    hey2()
    print(x)
hey()

OUTPUT: 2
        1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The keyword <code>global</code> is used to <strong>create or update a global variable locally</strong></p>
<pre><code>def hey():
    x = 1
    def hey2():
        global ew #reference to create or update a global variable named ew
        ew=2 # if you comment this global variable will not be created 
        x = 2
        #print(x)
    hey2()
    #print(x)
print '\t ------Before function call-----'
print globals()
hey()

print '\n'
print '\t -----After function call------ '
print globals()
</code></pre>
<p><code>globals()</code> will give you a dictionary of all objects the global scope contains</p>
<p>you can see in the second dictionary <code>ew</code> is present, which was not present in the first dictionary </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer"><code>global</code> statement</a> can apply to a name that is not bound (an undefined variable) or even never used. It doesn't create the name, but informs the compiler that this name should be looked up only in a global scope, not in the local scope. The difference shows up in the compiled code as distinct operations:</p>
<pre><code>&gt;&gt;&gt; def foo():
...   global g
...   l = 1
...   g = 2
...
&gt;&gt;&gt; dis.dis(foo)
  3           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (l)

  4           6 LOAD_CONST               2 (2)
              9 STORE_GLOBAL             0 (g)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE
</code></pre>
<p>We see that <code>STORE_FAST</code> was used for a local variable, while <code>STORE_GLOBAL</code> was used for the global variable. There isn't any output for the <code>global</code> statement itself; it only changed how references to <code>g</code> operate. </p>
</div>
<div class="post-text" itemprop="text">
<p>Simple example  of global variabl in two functions
    def hey():
        global x
        x = 1
        print x
    hey() # prints 1
    def hey2():
        global x
        x += 2
        print x
    hey2() #prints 3</p>
</div>
<span class="comment-copy">read all these answers and you'll have a deeper understanding of how global works, including your current concern: <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them" title="using global variables in a function other than the one that created them">stackoverflow.com/questions/423379/â€¦</a></span>
<span class="comment-copy">Since you are not using the variable, nothing is actually happening.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them">Using global variables in a function other than the one that created them</a></span>
