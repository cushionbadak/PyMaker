<div class="post-text" itemprop="text">
<p>I have a dictionary and if a value appears more than once I want to delete all occurrences of the value and the respective keys.</p>
<p>Any help would be much appreciated.</p>
<p>For those curious my dictionary was as follows:</p>
<p>{'Monster 1': 'Modema', 'Monster 2': 'Aninige', 'Monster 3': 'Dolamisme', 'Monster 4': 'Malexo', 'Monster 5': 'Eludisnismu', 'Monster 6': 'Du-Minime', 'Monster 7': 'Anu', 'Monster 8': 'Mu', 'Monster 9': 'Aluligige', 'Monster 10': 'Asmismu', 'Monster 11': 'Aninige', 'Monster 12': 'Dolamisme', 'Monster 13': 'Esmusno', 'Monster 14': 'Asmismu'}</p>
<p>If any two monsters are in the same place (have the same value) then both the monsters and places must be destroyed.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Using pandas:</strong> <em>just because you can :)</em></p>
<pre><code>import pandas as pd

d = {'a':1,'b':1,'c':2, 'd':'cat','e':'cat','f':'cow'}

new_d = pd.DataFrame([d]).T.drop_duplicates(keep=False)[0].to_dict()
print(new_d)
</code></pre>
<p>Returns:</p>
<pre><code>{'c': 2, 'f': 'cow'}
</code></pre>
<p>And using Collections Counter:</p>
<pre><code>from collections import Counter

d = {'a':1,'b':1,'c':2, 'd':'cat','e':'cat','f':'cow'}

nondup = {k for k,v in Counter(d.values()).items() if v == 1}
new_d = {k:v for k,v in d.items() if v in nondup}
</code></pre>
</div>
<span class="comment-copy">What does your dictionary look like?  What do you have so far?</span>
<span class="comment-copy">If your values are hashable, there's an easy solution using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a></span>
<span class="comment-copy">Just keep another dictionary mapping value to key</span>
<span class="comment-copy">Welcome to SO, please read <a href="https://stackoverflow.com/help/how-to-ask">How to ask a good question</a></span>
<span class="comment-copy">This is a weird problem, since the order of the keys is not determined, hence running the program with the same dictionary twice, could result in <i>totally</i> different output. In the first run other keys can be deleted than in a second run.</span>
