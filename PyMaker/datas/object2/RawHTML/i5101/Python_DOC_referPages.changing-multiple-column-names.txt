<div class="post-text" itemprop="text">
<p>Let's say I have a data frame with such column names: </p>
<pre><code>['a','b','c','d','e','f','g'] 
</code></pre>
<p>And I would like to change names from 'c' to 'f' (actually add string to the name of column), so the whole data frame column names would look like this: </p>
<pre><code>['a','b','var_c_equal','var_d_equal','var_e_equal','var_f_equal','g']
</code></pre>
<p>Well, firstly I made a function that changes column names with the string i want:</p>
<pre><code>df.rename(columns=lambda x: 'or_'+x+'_no', inplace=True)
</code></pre>
<p>But now I really want to understand how to implement something like this:</p>
<pre><code>df.loc[:,'c':'f'].rename(columns=lambda x: 'var_'+x+'_equal', inplace=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use a dictionary instead of an anonymous function. Both the below variations assume the columns you need to rename are contiguous.</p>
<p><strong>Contiguous columns by position</strong></p>
<pre><code>d = {k: 'var_'+k+'_equal' for k in df.columns[2:6]}
df = df.rename(columns=d)
</code></pre>
<p><strong>Contiguous columns by name</strong></p>
<p>If you need to calculate the numerical indices:</p>
<pre><code>cols = df.columns.get_loc
d = {k: 'var_'+k+'_equal' for k in df.columns[cols('c'):cols('f')+1]}
df = df.rename(columns=d)
</code></pre>
<p><strong>Specifically identified columns</strong></p>
<p>If you want to provide the columns explicitly:</p>
<pre><code>d = {k: 'var_'+k+'_equal' for k in 'cdef'}
df = df.rename(columns=d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can a use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> for that like:</p>
<h3>Code:</h3>
<pre><code>new_columns = ['var_{}_equal'.format(c) if c in 'cdef' else c for c in columns]
</code></pre>
<h3>Test Code:</h3>
<pre><code>import pandas as pd


df = pd.DataFrame({'a':(1,2), 'b':(1,2), 'c':(1,2), 'd':(1,2)})
print(df)
df.columns = ['var_{}_equal'.format(c) if c in 'cdef' else c
               for c in df.columns]
print(df)
</code></pre>
<h3>Results:</h3>
<pre><code>   a  b  c  d
0  1  1  1  1
1  2  2  2  2

   a  b  var_c_equal  var_d_equal
0  1  1            1            1
1  2  2            2            2
</code></pre>
</div>
<span class="comment-copy">I am interested in first variant, but how can i select range by column names, but not indexes.</span>
<span class="comment-copy">My second solution deals with column names, you input 'c' &amp; 'f' and all columns between them will be renamed.</span>
<span class="comment-copy">oh sorry. Thank you a lot for your help)</span>
