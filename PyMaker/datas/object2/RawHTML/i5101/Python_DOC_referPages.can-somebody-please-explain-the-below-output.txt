<div class="post-text" itemprop="text">
<pre><code>def closure_add():
    x = 3
    def adder():
        nonlocal x
        x+=1
        return x
    return adder
a = closure_add()
b = closure_add()
print(a())
print(b())
print(b())
print(b())
</code></pre>
<p>The output is:</p>
<pre><code>4
4
5
6
</code></pre>
<p>If variable 'b' which holds the function 'adder' remembers the scope of variable (x=3), shouldn't the output be '4' no matter how many times you call it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Links below should provide more info:</p>
<ul>
<li><a href="https://www.learnpython.org/en/Closures" rel="nofollow noreferrer">Python closures</a></li>
<li><a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="nofollow noreferrer">Python nonlocal statement</a></li>
</ul>
<p>What this boils down to in the end in your example:</p>
<ol>
<li>You instantiate two separate function objects in variables <code>a</code> and <code>b</code></li>
<li>You invoke <code>a</code> once, it increases the value once</li>
<li>You invoke <code>b</code> three times which increases the value three times</li>
</ol>
<p>Since the value that gets increased in the closure is defined in the method that increases it as <code>nonlocal</code>, the value is stored after each change that is done to it in the parent function, in the <code>x</code> variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>The line <code>x += 1</code> is modifying the <code>nonlocal</code> variable <code>x</code>. So, the next time the <code>closure_add()</code> is called, the value of <code>x</code> has been incremented.</p>
<p>However, also note that each <code>adder()</code> function object (the function returned by <code>closure_add()</code>) "owns" a separate copy of <code>x</code>. Which explains why the first calls to <code>a()</code> and <code>b()</code> output <code>4</code>.</p>
</div>
<span class="comment-copy">What do you think <code>x+=1</code> is doing, if not modifying that remembered variable?</span>
<span class="comment-copy">@jasonharper I think you didn't get my question. read my last lines in the question. If 'b' was assigned function 'adder' with the remembered value of 'x' as '3', then why do the consecutive calls change the value. No matter where I call it, how I call it, shouldn't x be instantiated as '3' ? Isn't 'b' which holds the function is always set to have x as 3.</span>
<span class="comment-copy">The last time you instantiated an <code>x</code> was in the line <code>b = closure_add()</code>.  The subsequent calls to <code>b()</code> just modify that one instance of <code>x</code>.  (There is one other instance of <code>x</code>, associated with the variable <code>a</code>.)</span>
