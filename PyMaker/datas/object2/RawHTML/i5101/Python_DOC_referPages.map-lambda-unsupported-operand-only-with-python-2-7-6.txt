<div class="post-text" itemprop="text">
<p>I am asking for help in last resort, I have a problem with my code that is driving me crazy. 
I work with both Python 2.7.6 and Python 3.4.3 on Ubuntu 14.04 with the following very simple part of code that I took from there <a href="https://gist.github.com/rudyryk/6102448" rel="nofollow noreferrer">password generator urandom</a></p>
<pre><code>import os


def random_password(length=20, symbols='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@$^_+&amp;'):
    password = []
    for i in map(lambda x: int(len(symbols)*x/255.0), os.urandom(length)):
        password.append(symbols[i])
    return ''.join(password)

random_password()

password = random_password()

print(password)
</code></pre>
<p>This part of code works with python 3.4.3. but randomly give the following error every 2 or 3 run:</p>
<pre><code>Traceback (most recent call last):
  File "/home/jsmith/Documents/PythonProjects/MainFile", line 12, in &lt;module&gt;
    IotaSeed = Gen_Seed()
  File "/home/jsmith/Documents/PythonProjects/MainFile", line 7, in Gen_Seed
    IotaSeed.append(symbols[i])
IndexError: string index out of range
</code></pre>
<p>And with Python 2.7.6, it doesn't work at all and give the following error :</p>
<pre><code>Traceback (most recent call last):
  File "PWDGEN.py", line 10, in &lt;module&gt;
    random_password()
  File "PWDGEN.py", line 6, in random_password
    for i in map(lambda x: int(len(symbols)*x/255.0), os.urandom(length)):
  File "PWDGEN.py", line 6, in &lt;lambda&gt;
    for i in map(lambda x: int(len(symbols)*x/255.0), os.urandom(length)):
TypeError: unsupported operand type(s) for /: 'str' and 'float'
</code></pre>
<p>I understand how lambda and map works but I just can't find a solution and I can't switch to python 3.4.3 because I coded my main program with 2.7. </p>
<p>What can I do to make it works under python 2.7 and avoid the "string index out of range" error seen in 3.4.3?</p>
<p>Thanks, PGriffin.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>int(len(symbols)*x/255.0)
</code></pre>
<p>can result in <code>len(symbols)</code> when <code>x == 255</code>. To fix that, you could divide by 256 instead. This wonâ€™t give evenly-distributed random characters, though, which is undesirable for password generation. Use <a href="https://docs.python.org/3/library/random.html#random.SystemRandom" rel="nofollow noreferrer"><code>SystemRandom</code></a> instead:</p>
<pre><code>import string
from random import SystemRandom


ALPHANUMERICS = string.ascii_letters + string.digits


def random_password(length=20, symbols=ALPHANUMERICS + '@$^_+&amp;'):
    rng = SystemRandom()
    return ''.join(rng.choice(symbols) for _ in range(length))
</code></pre>
<p>Compare how often each character appears in a password before:</p>
<p><a href="https://i.stack.imgur.com/Dt2zk.png" rel="nofollow noreferrer"><img alt="histogram not characteristic of a uniform distribution" src="https://i.stack.imgur.com/Dt2zk.png"/></a></p>
<p>and after:</p>
<p><a href="https://i.stack.imgur.com/4lqSt.png" rel="nofollow noreferrer"><img alt="histogram characteristic of a uniform distribution" src="https://i.stack.imgur.com/4lqSt.png"/></a></p>
</div>
<span class="comment-copy">Maybe just fix <code>"foo" / 12.34</code> ..? Ie. ensure  there are two numbers.. and find out why the expectation that there <i>was</i> another number was violated.</span>
<span class="comment-copy">It was violated because in Python 3 urandom returns a <code>bytes</code> object. When you iterate over <code>bytes</code> you get <code>int</code>'s. In Python 2 urandom returns a <code>str</code> object. When you iterate over that you get each character (also of type <code>str</code>). In python 2 you need to call <code>ord(x)</code> to convert each character to its corresponding <code>int</code> value.</span>
<span class="comment-copy">The index out of range error comes from code that's not included in your question so we can't help you there.</span>
<span class="comment-copy">It fails in Python3 when the <code>i</code> exceeds 67 (the upper bound of <code>symbols</code>).  In the few tests I have run, that is always 68.</span>
<span class="comment-copy">So, putting that together, the lambda in Python 2 should be <code>lambda x: int((len(symbols)-1)*ord(x)/255.0), os.urandom(length)</code>.</span>
