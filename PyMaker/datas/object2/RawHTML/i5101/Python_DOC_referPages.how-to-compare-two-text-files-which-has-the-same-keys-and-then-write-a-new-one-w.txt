<div class="post-text" itemprop="text">
<p><strong>Input files:</strong></p>
<p>file1.txt</p>
<pre class="lang-none prettyprint-override"><code>danial,23,janitor
adam,42,waiter
katherine,21,teacher
</code></pre>
<p>file2.txt</p>
<pre class="lang-none prettyprint-override"><code>danial,5,broadway street
brooke,4,hughway street
adam,3,new street
</code></pre>
<hr/>
<p><strong>Desired output:</strong></p>
<pre class="lang-none prettyprint-override"><code>danial,23,janitor,5,broadway street
adam,42,waiter,3,new street
katherine,21,teacher
brooke,4,hughway street
</code></pre>
<hr/>
<p><strong>My current code:</strong></p>
<pre><code>with open('C:\\Users\\user\\Desktop\\Dap\\job.txt') as f1, open('C:\\Users\\user\\Desktop\\Dap\\address.txt') as f2:
    job = {}
    for line in f1:
        name, age, job = line.split(',')
        address[name] = age, job

    address = {}
    for line in f2:
        name2, num, address = line.split(',')
        course[name2] = num, address

    common = set(job.keys() &amp; set(address.keys()))
    with open('C:\\Users\\Izz\\Desktop\\Data\\output.txt', 'w') as f:
        for i in common:
            f.write("%s\t%s\t%s\n" % (i, job[i], address[i]))
</code></pre>
<p><strong>Edit:</strong></p>
<p>With this code here I managed to only print the one with similar keys. 
I managed to do a dictionary method where I assign the first column as key but I can only print the one with similar keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems to do what you want:</p>
<pre><code>from collections import defaultdict
import itertools


with open('file1.txt') as f1, open('file2.txt') as f2, open('out.txt', 'w') as out:
    tmp = defaultdict(list)

    for l in itertools.chain(f1, f2):
        l = l.strip()

        if not l:
            continue

        name, a, b = l.split(',')
        tmp[name] += (a, b)

    out.writelines((','.join((k, *v)) + '\n' for k, v in tmp.items()))
</code></pre>
<hr/>
<p><strong>Description:</strong></p>
<p>We create a <code>tmp</code> <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> first to store the various attributes (age, occupation, ...) that each person might have. The defaultdict creates an empty list for us whenever we access a key for the first time, this allows us to do <code>tmp[name] += (a, b)</code> without having to first check if <code>name</code> already exists (and if not, create a new list), improving readability.</p>
<p>Have a look at the <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain(l1, l2, ...)</code></a> documentation for an explanation of that as the example provided there is pretty concise.</p>
<p>Iterating through <code>f1</code> and <code>f2</code> will yield each line of the file, including any newlines, so we have to first use <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>l = l.strip()</code></a> to strip those off before continuing further.</p>
<p>If your input file has blank lines, then <code>if not l: continue</code> is used to check if <code>l</code> is the blank string, <code>''</code> (which evaluates to <code>False</code>), and if it is, skip it. We could have alternatively had:</p>
<pre><code>if l:
    # do our stuff
</code></pre>
<p>However this is slightly worse form, prefer to write your code assuming everything goes as planned and introducing if statements to handle the exceptional cases instead will improve its readability.</p>
<p>We now split each line into their three components with <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>l.split(',')</code></a> and unpack the result into the variables <code>name</code>, <code>a</code>, <code>b</code>, assuming that the format of your input file will always be, the persons name, followed by two arbitrary attributes, delimited by commas. (If you're unsure on how tuple unpacking works, <a href="https://en.wikibooks.org/wiki/Python_Programming/Tuples" rel="nofollow noreferrer">this</a> seems to provide a good introduction to tuples in general (including unpacking)).</p>
<p>Since we can extend lists like so:</p>
<pre><code>&gt;&gt;&gt; v = [1, 2, 3]
&gt;&gt;&gt; v += (4, 5)
&gt;&gt;&gt; v
[1, 2, 3, 4, 5]
</code></pre>
<p>We then append our person's attribute <code>a</code> and <code>b</code> into <code>tmp[name]</code> by doing <code>tmp[name] += (a, b)</code>.</p>
<p>The last step now that the <code>tmp</code> dictionary has been constructed with everyone's names and attributes, is to write it into our out file.</p>
<pre><code>out.writelines((','.join((k, *v)) + '\n' for k, v in tmp.items()))
</code></pre>
<p>Here we use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to format our output (if you're also unsure of this, have a look at the documentation linked), and if you're unfamiliar with the <code>*</code> operator, it is used here to unpack <code>v</code> (which is the list of attributes for person with name <code>k</code>), <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">link to doc</a>.</p>
<p>And then <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>','.join(lst)</code></a> will combine the strings in <code>lst</code> (in this case <code>(k, *v)</code>) into one string, each value separated by <code>','</code>.</p>
<p>Finally, we add on a newline onto the end since <a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="nofollow noreferrer"><code>out.writelines(lines)</code></a> doesn't include them for us, and we write our lines to the file with <code>writelines()</code>.</p>
</div>
<span class="comment-copy">Please show us the code that isn't doing what you want.</span>
<span class="comment-copy">yeah i,ve put the code in @BoarGules</span>
<span class="comment-copy">thank you! it works! is it possible if you can sort of explain some of the code? i would like to learn as well but again thank you! @eugenhu</span>
<span class="comment-copy">@Danny Yeah sure, I've made an edit to the answer.</span>
<span class="comment-copy">Thank you for the detailed explanation !</span>
