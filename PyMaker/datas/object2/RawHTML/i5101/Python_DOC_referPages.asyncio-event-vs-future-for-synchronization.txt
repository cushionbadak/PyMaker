<div class="post-text" itemprop="text">
<p>I'm going through some <code>asyncio</code> source for networking and implementation raised a question in my head.</p>
<p>To create a non-blocking I/O when waiting for the data to arrive from a socket, <code>asyncio.StreamReader.read()</code> at its end calls <code>_wait_for_data</code> method that <a href="https://github.com/python/cpython/blob/3.6/Lib/asyncio/streams.py#L462-L464" rel="nofollow noreferrer">creates an empty <code>Future</code></a> and awaits it.</p>
<p>That future is set as <em>finished</em> (which allows it to be finally awaited) in <a href="https://github.com/python/cpython/blob/3.6/Lib/asyncio/streams.py#L399" rel="nofollow noreferrer"><code>_wakeup_waiter</code></a> method that is called <em>when a new data arrives</em> to the stream (<code>feed_data</code> method).</p>
<p>That makes complete sense.</p>
<p><strong>My question is:</strong></p>
<p><strong>Why not use <a href="https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event" rel="nofollow noreferrer"><code>asyncio.Event</code></a>?</strong> It feels to me like Event was designed exactly for these purposes. In fact, you wouldn't have to create a new Future on each <code>_wait_for_data</code> call, but would initialize a single Event in a class and would simply toggle its value during its lifetime. It also has specific <code>.wait()</code> method for awaiting its value to become True (for when the new data arrives from the socket).</p>
<p>Can anyone elaborate if there's an actual difference between the two approaches? Or is it just a method chosen arbitrarily?</p>
</div>
<div class="post-text" itemprop="text">
<p>While usually you can replace <code>Future</code> with <code>Event</code> if you don't care about data future will be populated with, I don't think it's true in this case. </p>
<p>In the code <code>self._waiter</code> is used not only to indicate wakeup event, but also to <a href="https://github.com/python/cpython/blob/3.6/Lib/asyncio/streams.py#L391" rel="nofollow noreferrer">indicate exception</a> that happened. <code>set_exception</code> to <code>Future</code> means that exact this exception will be raised inside code that awaits for future:</p>
<pre><code># 

waiter.set_exception(exc)  # Exception set here...

# 

self._waiter = self._loop.create_future()
try:
    yield from self._waiter  # ... will be raised here and propagated to outer code
finally:
    self._waiter = None
</code></pre>
<p>You wouldn't be able to achieve this if you change <code>self._waiter</code> to an <code>Event</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Future is low level primitive.
It is powerful but user code usually don't need it.
Like Linux has futex but user code uses high level objects like lock and recursive lock.</p>
</div>
<span class="comment-copy">Oh, you're right! I haven't realized it's also used for exception handling :) Thanks, Mikhail</span>
<span class="comment-copy">Thanks for adding this, Andrew. Do you have any resources on hand on how efficient creating new Futures is?</span>
<span class="comment-copy">What do you mean by efficiency? It is written in C and everything in asyncio is based on top of futures. Another question is: should you use the future? I saw too many errors in future-based user code.</span>
<span class="comment-copy">I was worried about the performance since in this case a new Future has to be created quite oftenâ€”but I guess if it's so low-level, implemented in C and is used under whole asyncio, it souldn't really be an issue.  Do you have any tips on how to avoid those errors you've seen? Read the docs carefully, I guess?</span>
<span class="comment-copy">Usually everything works just fine in case of normal flow but fails/hangs/leaks under some conditions. See <a href="https://bugs.python.org/issue32734" rel="nofollow noreferrer">bugs.python.org/issue32734</a> <a href="https://bugs.python.org/issue32841" rel="nofollow noreferrer">bugs.python.org/issue32841</a> <a href="https://bugs.python.org/issue32574" rel="nofollow noreferrer">bugs.python.org/issue32574</a></span>
<span class="comment-copy">Will check those out. Thank you</span>
