<div class="post-text" itemprop="text">
<p>so I have a huge amount of data to process, to do it I'm using everything I can get, my parents computers, my girlfriend computer, my computers, my brothers computers.</p>
<p>They are ok with lending me some of their processing power, and the processing programs only uses 1 of the 4 cores of their computer.
I'll set up something that will launch the slaves at their computer startup</p>
<p>I coded this "distributed computing program" by myself, I just learned about sockets with google and I want to make sure that I'm not making a big mistake</p>
<p>From what I understand a socket is one way only, A can only send data to B, if B needs to send data to A then an other socket on an other port need to be opened. </p>
<pre><code>the "distributor" is the program that orchestrates the computing, it sends data to crunch to all the slaves, it is running on a cheap dedicated server
the "slaves" ask data from the distributor and compute stuff, store the result, then ask for more data to crunch

the "distributor" has a registration_port_distributor : 15555
the "slaves" have a registration_port_slave : 14444 (yes the same for each slaves)
work_port = registration_port_distributor + 1

the distributer boots
start of the loop
    wait for a slave connection
    a slave connect to port 15555 (registration_port_distributor) and tell the distributor "I am 'slave_name', give me 2 ports to work on my port 14444 (registration_port_slave)"
    the disbtributor connect to the slave on port 'registration_port_slave' and give it "work_port" (data_reception_port) for receiving data and work_port+1 (data_request_port) so that the slave can request new data to crunch
    work_port is incremented by 2
</code></pre>
<p>from this point a slave can receive data to process from a connection on 'data_reception_port'
and it can ask for new data to crunch from a connection on 'data_request_port'</p>
<p>The only problem I can see here is if 2 slaves try to connect at the same time, but that is easily
fixed using a while loop on each slave with a 5 second sleep for reattempting a connection.</p>
<p>What do you think?</p>
<p>Thanks.</p>
<p>ps : yes the slaves do not send back the result, I will get them manually, or implement that later.</p>
<p>pps : will be uploaded to my github later, the code is a mess right now, I am testing various things.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>From what I understand a socket is one way only, A can only send data
  to B, if B needs to send data to A then an other socket on an other
  port need to be opened.</p>
</blockquote>
<p>As already mentioned by several people in the comments, a TCP socket is bi-directional, and you can use the same for two way communication. The application has to be coded in such a way that both side understand each other.</p>
<blockquote>
<p>from this point a slave can receive data to process from a connection
  on 'data_reception_port' and it can ask for new data to crunch from a
  connection on 'data_request_port'</p>
</blockquote>
<p>Once you change your application model to the way as explained above, you'd no longer require to communicate using two separate ports/connections each side.</p>
<blockquote>
<p>The only problem I can see here is if 2 slaves try to connect at the
  same time, but that is easily fixed using a while loop on each slave
  with a 5 second sleep for reattempting a connection.</p>
</blockquote>
<p>Please read about the backlog in Socket communications. If the count of incoming requests are more than which can be served at the moment, the requests would be  queued (the exact number of requests waiting in the queue depends on the backlog parameter). Check <a href="https://docs.python.org/3/library/socket.html#socket.socket.listen" rel="nofollow noreferrer">documentation of <code>socket.listen([backlog])</code> function</a> for more information.</p>
<p>I hope this answers your questions. Please feel free to query further in case of any confusion.</p>
</div>
<span class="comment-copy">a tcp socket can be used for communicating in both directions or only a single direction(depending on the options you provide when creating it) for a single connection</span>
<span class="comment-copy">Oh allright, I'm going to re-read the documenation and adapt the code then</span>
<span class="comment-copy"><i>From what I understand a socket is one way only</i>. Wrong. By default a connected (TCP) socket is bi-directional.</span>
<span class="comment-copy"><i>The only problem I can see here is if 2 slaves try to connect at the same time</i>. That is what <code>listen</code> - <code>accept</code> is made for. As long as the number of simultaneous connection request is not greater that <code>listen</code> backlog, they are gently queued and then processed one at a time with <code>accept</code>.</span>
<span class="comment-copy">@SergeBallesta oh indeed; well then everything is fine</span>
<span class="comment-copy">Thanks, I did not saw that in the tutorial :)</span>
