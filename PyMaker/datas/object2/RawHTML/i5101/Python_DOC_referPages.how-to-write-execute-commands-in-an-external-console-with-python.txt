<div class="post-text" itemprop="text">
<p>I'm new to Python and could not find a solution for the following propblem:</p>
<p>I want to write python script, which let's say opens the cmd and executes several commands in a for loop. Starting the cmd (e.g. <code>subprocess.run()</code>)and predefining the command happens with Python (v.3.6).</p>
<pre><code>import subprocess
_path = "C:\\..."
_exe = "...\\cmd.exe"
subprocess.run(_path + _exe)
for i in range (1,100,1)
   ...
</code></pre>
<p>But how can I then write the command from Python into cmd? And in consequence? How can i get a signal, whether my cmd command is executed so i can start a new command (like in a for loop)</p>
<p>Thanks for the help and with best regards,</p>
<p>Andreas Buyer</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably wanna use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">Popen.communicate(input=None, timeout=None)</a> and set the <strong>shell</strong> arg to true. Then you wanna wait on the process output stream for the response to your command. Note: Popen.communicate requires the input to be byte-encoded. The output of Popen.communicate is also byte encoded, so you need to do a str.decode() on it to extract the encoded strings.</p>
<p><strong>All of this is fully documented in the Python API. I would suggest you read the manual.</strong></p>
<p>Or, you could use a library like <a href="https://pypi.python.org/pypi/shell/1.0.1" rel="nofollow noreferrer">this one</a> which wraps all of this stuff for you.</p>
<pre><code>import subprocess

proc = subprocess.Popen('ls', stdout=subprocess.PIPE, stdin=subprocess.PIPE)
try:
    outs, errs = proc.communicate(timeout=15) # use input= param if you need to
    proc.wait()
except TimeoutExpired:
    proc.kill()
    outs, errs = proc.communicate()

print ('%s, %s' % (outs, errs))
</code></pre>
<p>Output and comparison to actual 'ls' output:</p>
<pre><code>$ python popen_ex.py 
b'__pycache__\npopen_ex.py\n', None
$ ls
__pycache__ popen_ex.py
</code></pre>
<p>Any additional commands you need to send to popen can be sent in proc.communicate.</p>
<p>If you REALLY want to communicate to an interactive shell, Popen.communicate() allows for a ONE TIME write to stdin and read from stdout/stderr. After one call to Popen.communicate(), the input/output/error streams are closed by subprocess. IF YOU WANT A FULLY INTERACTIVE SHELL, you MUST either write one yourself, or use a library, like the one I linked.</p>
<pre><code>import subprocess
proc = subprocess.Popen('sh', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
try:
    outs, errs = proc.communicate(input='ls'.encode('ascii'), timeout=15)
    proc.wait()
    print ('%s, %s' % (outs, errs))

    proc = subprocess.Popen('sh', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    outs, errs = proc.communicate(input='ps'.encode('ascii'), timeout=15)
    proc.wait()
    print ('%s, %s' % (outs, errs))
except TimeoutError:
    proc.kill()
    outs, errs = proc.communicate()
</code></pre>
<p>Output and comparison to actual 'ls', 'ps'</p>
<pre><code>$ python popen_ex.py 
    b'__pycache__\npopen_ex.py\n', b''
    b'  PID TTY           TIME CMD\n  879 ttys000    0:00.18 -bash\n 7063 ttys000    0:00.06 python popen_ex.py\n 7066 ttys000    0:00.00 sh\n  911 ttys001    0:00.06 -bash\n  938 ttys002    0:00.16 -bash\n 6728 ttys002    0:00.11 python\n  972 ttys004    0:00.06 -bash\n 1019 ttys005    0:00.06 -bash\n 1021 ttys006    0:00.06 -bash\n 1023 ttys007    0:00.06 -bash\n', b''
$ ls
    __pycache__ popen_ex.py
$ ps
      PID TTY           TIME CMD
      879 ttys000    0:00.19 -bash
      911 ttys001    0:00.06 -bash
      938 ttys002    0:00.16 -bash
     6728 ttys002    0:00.11 python
      972 ttys004    0:00.06 -bash
     1019 ttys005    0:00.06 -bash
     1021 ttys006    0:00.06 -bash
     1023 ttys007    0:00.06 -bash
</code></pre>
</div>
<span class="comment-copy">Use a pipe for standard input?</span>
<span class="comment-copy">you could run commands directly without <code>cmd.exe</code>: <code>for cmd in commands: subprocess.run(cmd)</code>. Or  you could generate a bat-file and run it: <code>subprocess.run(batfile)</code> if the commands depend on <code>cmd.exe</code>. To open a new console window: <code>cmd /c start your_command</code> <a href="https://stackoverflow.com/q/19479504/4279">How can I open two consoles from a single script</a></span>
<span class="comment-copy">Hi,  thanks for the suggestion with Popen.communicate(). Unfortunatelly, I'm really new to Python and don't know how to implement the command (the docmentation here is rather cryptic for a newbe). Could you give a short example of how to implement the statements with an example snytax? However, as far as I recognized, it does not solve the problem with the missing signal if the command is executed in the cmd.  I wrote a batch file and executed the batch file in the above mentioned loop, but insted of wainting until one loop is executed, it opened all statements simultaneously.</span>
<span class="comment-copy">@a.buyer as stated before by jfs, there is no need to execute the command in 'cmd'. Popen supports opening a process with an <b>interactive shell</b> which is the same as launching the process in 'cmd'. I'll edit with a suggestion for how you'd do this. Now, if you're trying to write your own shell, calling command prompt is the wrong way to do it.</span>
<span class="comment-copy">Hi, thanks for the help! As I said, the documentation is rather cryptic when you are a newbe to python ;) And I needed an example implementation of how the syntax looks like. Now it works =)</span>
