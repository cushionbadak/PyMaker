<div class="post-text" itemprop="text">
<p>I have a package with some modules in it:</p>
<pre><code>/package/
   mod1
   mod2
   mod3
</code></pre>
<p>Which I imported like so:</p>
<pre><code>from package import *
</code></pre>
<p>Now I want iterate through the modules in the package without knowing the module's name so if more modules are added the code does not have to be changed, like so:</p>
<pre><code>for module in package
   module.some_method()
</code></pre>
<p>Can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the modules from the package if the package imports them in it's <code>__init__.py</code>. For example:</p>
<pre><code># package/__init__.py
import mod1
import mod2
import mod3
</code></pre>
<p>Then you could import the package and just look for all members of that package that are a "module" type:</p>
<pre><code>import types
import package

for mod in package.__dict__.values():
  if type(mod) == types.ModuleType:
    print mod, 'is a module!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot import submodules from a package unless you list them within the <code>__all__</code> list within the <code>__init__.py</code> file within your package. </p>
<p><a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#importing-from-a-package</a></p>
<p>At some point, you need to know the modules names. This could work for you, but it could have some unintended consequences.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not always there are distributed modules packaged as one package in python. It cannot be done.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can try this:-</strong></p>
<pre><code>import inspect
import yourmodule

all_module = inspect.getmembers(yourmodule,inspect.ismodule)
print(all_module)#will list all related module
</code></pre>
</div>
<span class="comment-copy">I think you misunderstand what the <code>*</code> import does.  It's <i>not</i> going to import submodules automatically.</span>
<span class="comment-copy">Use the <code>dir</code> function</span>
<span class="comment-copy">This works. I can access the attributes etc in the module.</span>
