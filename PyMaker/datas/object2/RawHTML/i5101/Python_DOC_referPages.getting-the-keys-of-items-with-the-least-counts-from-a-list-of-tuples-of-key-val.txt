<div class="post-text" itemprop="text">
<p>The input is an unsorted list of tuples: </p>
<pre><code>x = [('herr', 1),
     ('dapao', 1),
     ('cino', 1),
     ('o', 38),
     ('tiao', 2),
     ('tut', 1),
     ('poh', 6),
     ('micheal', 1),
     ('orh', 1),
     ('horlick', 3),
     ('si', 1),
     ('tai', 1),
     ('titlo', 1),
     ('siew', 17),
     ('da', 1),
     ('halia', 2)]
</code></pre>
<p>The goal is to find the last <code>n</code> keys with the least counts, i.e. desired output:</p>
<pre><code>['orh', 'si', 'tai', 'titlo', 'da']
</code></pre>
<p>I've tried doing this by:</p>
<ul>
<li>first convert the list of tuples to a dict</li>
<li>cast the dict into a Counter</li>
<li>then find the <code>[-n:]</code> list of tuples from the <code>Counter.most_common()</code></li>
<li>cast the list of tuples from the <code>[-n:]</code> to a dict</li>
<li>get the keys and then convert it into a list</li>
</ul>
<p>i.e. </p>
<pre><code>n = 5
list(dict(Counter(dict(x)).most_common()[-n:]).keys())
</code></pre>
<p><strong>Is there a less convoluted way to get the same output?</strong> </p>
<hr/>
<p>I could also do this:</p>
<pre><code>from operator import itemgetter
output, *_ = zip(*sorted(x, key=itemgetter(1))[n:])
list(output)
</code></pre>
<p>But now I've merely swapped out the <code>Counter.most_common</code> with <code>sorted</code> and <code>itemgetter</code>. Then I would still need to <code>zip(*list)</code> to extract the keys through unpacking the first value from each list of tuples after the zip.</p>
<p><strong>There must be a simpler way.</strong></p>
<hr/>
<h1>NOTE</h1>
<p>Note that the question is not asking to sort, it's to extract the list first element in the original list of tuples given. And the criterion to extract is based on the last nth items with the lowest value in the 2nd element.</p>
<p>The <a href="https://stackoverflow.com/questions/10695139">answers from the possible duplicate linked</a> still requires the step to unpack the list of sorted tuples and and the extract the top nth of the list of first elements. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The goal is to find the last <code>n</code> keys with the least counts</p>
</blockquote>
<p>Given this goal's definition neither of your two solutions fit. In one with <code>Counter</code> you use <code>dict</code> which will make the order of keys undefined and you will not get the last keys, but some <code>n</code> keys with least value. The second solution has incorrect slicing, and if it's fixed it returns first <code>n</code> keys with least value.</p>
<p>Taking into account that <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> implementation is <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" rel="nofollow noreferrer">stable</a> it can be rewritten like this to fit the goal:</p>
<pre><code>def author_2():
    output, *_ = zip(*sorted(reversed(l), key=lambda v: v[1])[:n])
    return list(reversed(output))
</code></pre>
<p>But it's a better idea to use <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer"><code>heapq</code></a>, which is the stdlib tool for questions like "n smallest/greatest values from an iterable" (as Martijn Pieters pointed out, <code>nlargest</code> and <code>nsmallest</code> are also stable and the docs really say that, but in implicit way). Especially if the real list you have to deal with is big (for small <code>n</code> it should be faster that <code>sorted</code> as <a href="https://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer">docs describe</a>). </p>
<pre><code>def prop_1():
    rev_result = heapq.nsmallest(n, reversed(l), key=lambda v: v[1])
    return [item[0] for item in rev_result][::-1]
</code></pre>
<p>You can improve performance even further, but at the cost of order (sorting stability), i.e. some <code>n</code> keys with least value instead of last <code>n</code> keys with least value. To do that you need to keep a "heapified" list and use it as your internal data structure instead of plain <code>list</code> (if you don't change the list and need the bottom-n only once, it will not give a performance benefit). You can push and pop from the list, for example:</p>
<pre><code>_p2_heap = None

def prop_2():
    global _p2_heap
    if not _p2_heap:
        _p2_heap = []
        for item in l:
            heapq.heappush(_p2_heap, item[::-1])

    return [item[1] for item in heapq.nsmallest(n, _p2_heap)]
</code></pre>
<p>Here's the complete module you can use to benchmark the solutions. </p>
<pre><code>import heapq
from collections import Counter  

l = [
    ('herr', 1), ('dapao', 1),
    ('cino', 1), ('o', 38),
    ('tiao', 2), ('tut', 1),
    ('poh', 6), ('micheal', 1),
    ('orh', 1), ('horlick', 3),
    ('si', 1), ('tai', 1),
    ('titlo', 1), ('siew', 17),
    ('da', 1), ('halia', 2)
]
n = 5    

def author_1():
    return list(dict(Counter(dict(l)).most_common()[-n:]).keys())

def author_2():
    output, *_ = zip(*sorted(reversed(l), key=lambda v: v[1])[:n])
    return list(reversed(output))

def prop_1():
    rev_result = heapq.nsmallest(n, reversed(l), key=lambda v: v[1])
    return [item[0] for item in rev_result][::-1]

_p2_heap = None    
def prop_2():
    global _p2_heap
    if not _p2_heap:
        _p2_heap = []
        for item in l:
            heapq.heappush(_p2_heap, item[::-1])

    return [item[1] for item in heapq.nsmallest(n, _p2_heap)][::-1]
</code></pre>
<p>And here are the <code>timeit</code> results:</p>
<pre><code>$ python -m timeit -s "import tst" "tst.author_1()"
100000 loops, best of 3: 7.72 usec per loop
$ python -m timeit -s "import tst" "tst.author_2()"
100000 loops, best of 3: 3.7 usec per loop
$ python -m timeit -s "import tst" "tst.prop_1()"
100000 loops, best of 3: 5.51 usec per loop
$ python -m timeit -s "import tst" "tst.prop_2()"
100000 loops, best of 3: 3.96 usec per loop
</code></pre>
<p>But if we make <code>l = l * 1000</code> the difference will become noticeable:</p>
<pre><code>$ python -m timeit -s "import tst" "tst.author_1()"
1000 loops, best of 3: 263 usec per loop
$ python -m timeit -s "import tst" "tst.author_2()"
100 loops, best of 3: 2.72 msec per loop
$ python -m timeit -s "import tst" "tst.prop_1()"
1000 loops, best of 3: 1.65 msec per loop
$ python -m timeit -s "import tst" "tst.prop_2()"
1000 loops, best of 3: 767 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use a heap, it will give you the desired output.</p>
<pre><code>import heapq

x = [('herr', 1),
('dapao', 1),
('cino', 1),
('o', 38),
('tiao', 2),
('tut', 1),
('poh', 6),
('micheal', 1),
('orh', 1),
('horlick', 3),
('si', 1),
('tai', 1),
('titlo', 1),
('siew', 17),
('da', 1),
('halia', 2)]

heap = [(item[1],-index,item[0]) for index, item in enumerate(x)]
heapq.heapify(heap)

print(list(map(lambda item : item[2], heapq.nsmallest(5, heap))))
</code></pre>
<p><code>heapq.nsmallest(n, iterable, key=None)</code>has a key argument,you can use it inside of using <code>-index</code> like me.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>[k for k,v in sorted(x, key=lambda x: x[1])[:n]]</code></p>
<p>Where <code>x</code> is list of key, count tuples and <code>n</code> is desired number of keys.</p>
<p>You may also adjust the sort criteria to include the keys themselves- if their order is important</p>
<p><code>[k for k,v in sorted(x, key=lambda x: (x[1], x[0]))[:n]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Edit
@alvas :</p>
<pre><code>mi = min(x, key =lambda x:x[1])[1]
r = [a[0] for a in x if a[1] == mi][-5:]
</code></pre>
<p>Will generate the output you desire </p>
<hr/>
<p>You can use this:</p>
<pre><code>sorted(x, key=lambda x: x[1])
</code></pre>
<p>Please refer to this (possible duplicate)</p>
<p><a href="https://stackoverflow.com/questions/10695139/sort-a-list-of-tuples-by-2nd-item-integer-value">Sort a list of tuples by 2nd item (integer value)</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://pandas.pydata.org/index.html" rel="nofollow noreferrer">pandas</a> if you don't feel like reinventing the wheel.  Performance should be excellent since it's based on NumPy, which uses C under the hood instead of pure Python.</p>
<h1>Short answer</h1>
<pre><code>df = pd.DataFrame(x, columns=['name', 'count'])
df = df.sort_values(by='count', kind='mergesort', ascending=False).tail(n)
print df['name'].tolist()
</code></pre>
<h1>Result</h1>
<pre><code>['orh', 'si', 'tai', 'titlo', 'da']
</code></pre>
<h1>Expanded, working example with comments</h1>
<pre><code>import pandas as pd

n = 5
x = [('herr', 1),
     ('dapao', 1),
     ('cino', 1),
     ('o', 38),
     ('tiao', 2),
     ('tut', 1),
     ('poh', 6),
     ('micheal', 1),
     ('orh', 1),
     ('horlick', 3),
     ('si', 1),
     ('tai', 1),
     ('titlo', 1),
     ('siew', 17),
     ('da', 1),
     ('halia', 2)]

# Put the data in a dataframe.
df = pd.DataFrame(x, columns=['name', 'count'])

# Get the last n rows having the smallest 'count'.
# Mergesort is used instead of quicksort (default) since a stable sort is needed
# to get the *last* n smallest items instead of just *any* n smallest items.
df = df.sort_values(by='count', kind='mergesort', ascending=False).tail(n)

# Print the 'name' column as a list (since a list is what you asked for).
print df['name'].tolist()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>[i[0] for i in sorted(x.__reversed__(), key=lambda x: x[1])[:n]]</p>
</blockquote>
<p>Almost exactly the same as @Stacksonstacks answer, just that this actually gives you the 'desired output' (if you put n = 5)</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't really need any imports for this task, you can also do it the following way: </p>
<pre><code>x = [('herr', 1),
     ('dapao', 1),
     ('cino', 1),
     ('o', 38),
     ('tiao', 2),
     ('tut', 1),
     ('poh', 6),
     ('micheal', 1),
     ('orh', 1),
     ('horlick', 3),
     ('si', 1),
     ('tai', 1),
     ('titlo', 1),
     ('siew', 17),
     ('da', 1),
     ('halia', 2)]

n = 5
result = [name[0] for name in sorted(x, key=lambda i: i[1], reverse=True)[-n:]]
print(result)
</code></pre>
<p>Output:</p>
<pre><code>['orh', 'si', 'tai', 'titlo', 'da']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my suggestion:   </p>
<pre><code>n = 5
output=[]

# Search and store the n least numbers
leastNbs = [a[1] for a in sorted(x, key=lambda x: x[1])[:n]]

# Iterate over the list of tuples starting from the end
# in order to find the tuples including one of the n least numbers
for x,nb in reversed(x):
    if nb in leastNbs:
        output.append(x)  # Store the string in output
        print(x)

# Keep only the n last strings (starting from the end)
output = list(reversed(output[:n]))

print(output)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a clean, simple approach without using python idioms: </p>
<pre><code>m = x[0][1]
l = []

for elem in x:
    if m &gt; elem[1]:
        l = [elem[0]]
        m = elem[1]
    elif m == elem[1]:
        l.append(elem[0])

print(l[-5:])
</code></pre>
<p>It is kind of like a fusion of min-value search plus filtering. <code>m</code> stores the min value up till now, and <code>l</code> stores the list of elements which have that min count. You reset them when you find a lower value.</p>
<p>This can be modified to hold only 5 elements, so no splicing would be required in the end.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>A Pure Python Solution</strong> </p>
<p>Since we are trying to find the <code>n</code> elements <em>in order of min to max</em>, we cannot simply filter out those which do not have the smallest second element. We also have the second aim of trying to maintain order - this eliminates merely <em>sorting</em> on the second element of each tuple.</p>
<p>My solution has complexity <code>O(n)</code> - which is the best you can do here as we are creating a new list which is dependent on a pre-existing list.</p>
<p>It works by creating a <code>set</code> (unordered) of the first <code>n</code> elements of each tuple in <code>x</code> - after <code>x</code> has been reversed (<code>[::-1]</code>) and then sorted based on the second element. This has the neat trick that since we are slicing before we convert to the set, there is still order within those tuples with equivalent second elements.</p>
<p>Now, the neatness of using a <code>set</code> is that lookup is <code>O(1)</code> (instant) as the elements are stored in order of their <code>hashes</code>, so calling <code>__contains__</code> is much faster than with a <code>list</code>.</p>
<p>We finally need to use a <code>list-comprehension</code> to carry out the final filtering of <code>x</code>:</p>
<pre><code>&gt;&gt;&gt; n = 5
&gt;&gt;&gt; s = {i[0] for i in sorted(x[::-1], key=lambda t: t[1])[:n]}
&gt;&gt;&gt; [i for i, _ in x if i in s]
['orh', 'si', 'tai', 'titlo', 'da']
</code></pre>
<hr/>
<p><em>Also a test to shows that it works with <code>n = 11</code></em></p>
<pre><code>['herr', 'dapao', 'cino', 'tut', 'micheal', 'orh', 'si', 'tai', 'titlo', 'da', 'halia']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a>:  </p>
<p><code>[key for key,value in sorted(x, key=lambda y: y[1], reverse=True)][-n:]</code></p>
<p>or</p>
<p><code>[key for key,value in sorted(reversed(x), key=lambda y: y[1])][:n][::-1]</code></p>
<p>where <code>n</code> is the number of keys you want in the resultant. Note that using the latter, with <code>[::-1]</code>, is more expensive because it slices the list once more to reverse it back.</p>
<pre><code>from timeit import default_timer

def timeit(method, *args, **kwargs):
    start = default_timer()
    result = method(*args, **kwargs)
    end = default_timer()
    print('%s:\n(timing: %fs)\n%s\n' % (method.__name__, (end - start), result))

def with_copy(x, n):
    return [key for key,value in sorted(reversed(x), key=lambda y: y[1])][:n][::-1]

def without_copy(x, n):
    return [key for key,value in sorted(x, key=lambda y: y[1], reverse=True)][-n:]

x = [('herr', 1), ('dapao', 1), ('cino', 1), ('o', 38), ('tiao', 2),
     ('tut', 1), ('poh', 6), ('micheal', 1), ('orh', 1), ('horlick', 3),
     ('si', 1), ('tai', 1), ('titlo', 1), ('siew', 17), ('da', 1),
     ('halia', 2)]
n = 5
timeit(with_copy, x, n)
timeit(without_copy, x, n)
n = 11
timeit(with_copy, x, n)
timeit(without_copy, x, n)
</code></pre>
<h3>Results with <code>n = 5</code>:</h3>
<pre><code>with_copy:
(timing: 0.000026s)
['orh', 'si', 'tai', 'titlo', 'da']

without_copy:
(timing: 0.000018s)
['orh', 'si', 'tai', 'titlo', 'da']
</code></pre>
<h3>Results with <code>n = 11</code>:</h3>
<pre><code>with_copy:
(timing: 0.000019s)
['halia', 'herr', 'dapao', 'cino', 'tut', 'micheal', 'orh', 'si', 'tai', 'titlo', 'da']

without_copy:
(timing: 0.000013s)
['halia', 'herr', 'dapao', 'cino', 'tut', 'micheal', 'orh', 'si', 'tai', 'titlo', 'da']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>No Need of sorting in this solution </li>
<li><p>Small Solution:</p>
<pre><code>import numpy as np 
n = 5
x = [('herr', 1),
     ('dapao', 1),
     ('cino', 1),
     ('o', 38),
     ('tiao', 2),
     ('tut', 1),
     ('poh', 6),
     ('micheal', 1),
     ('orh', 1),
     ('horlick', 3),
     ('si', 1),
     ('tai', 1),
     ('titlo', 1),
     ('siew', 17),
     ('da', 1),
     ('halia', 2)]

x = np.array(x)  # make the list a numpy array
names = x[:, 0]   
numbers = x[:, 1].astype(int)
least_count = np.take(names, np.where(numbers == np.min(numbers)))[0][-n:]
print(least_count)
</code></pre></li>
<li><p>output of above solution:</p>
<pre><code>['orh', 'si', 'tai', 'titlo', 'da']
</code></pre></li>
<li><p>Explanation of solution with comments</p>
<pre><code>import numpy as np 

x = [('herr', 1),
 ('dapao', 1),
 ('cino', 1),
 ('o', 38),
 ('tiao', 2),
 ('tut', 1),
 ('poh', 6),
 ('micheal', 1),
 ('orh', 1),
 ('horlick', 3),
 ('si', 1),
 ('tai', 1),
 ('titlo', 1),
 ('siew', 17),
 ('da', 1),
 ('halia', 2)]

x = np.array(x)  # make the list a numpy array
# ==========================================
# split the array into names and numbers
# ==========================================
names = x[:, 0]   
numbers = x[:, 1].astype(int)

mini = np.min(numbers)  # find the minimum in the numbers array
idx = np.where(numbers == mini)   # Find the indices where minimum occurs in the numbers array
least_count = np.take(names, idx)[0] # Use the indices found from numbers array in the above line to access names array
print(least_count)
least_count = least_count.tolist()  # to convert the numpy array to list
n = 5   # say n is 5
print(least_count[-n:]) # now you can do simple slicing to extract the last n element 
</code></pre></li>
<li><p>output of above explaination:</p>
<pre><code>['herr' 'dapao' 'cino' 'tut' 'micheal' 'orh' 'si' 'tai' 'titlo' 'da']
['orh', 'si', 'tai', 'titlo', 'da']
</code></pre></li>
</ul>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/3121979/how-to-sort-list-tuple-of-lists-tuples">Possible duplicate</a></span>
<span class="comment-copy">how those values <code>'kup', 'gor', 'beer', 'hor', 'jia'</code> correlate with your input tuples?</span>
<span class="comment-copy">Your code does not yield your desired output.</span>
<span class="comment-copy">@Lomtrur, after the sort by values, there's still more steps to get the last/first few keys =)</span>
<span class="comment-copy">@Goyo , RomanPerekhrest, pardon the mistake copy+paste. Corrected the output.</span>
<span class="comment-copy">Your <code>prop_2</code> test is fatally flawed, because <code>_p2_heap</code> is global and <b>reused for the timed tests</b>. The <code>heapq.nsmallest()</code> function <b>already</b> creates that heap, and the only reason that <code>prop_2</code> is faster is because the global allows it to cache state for the trial runs.</span>
<span class="comment-copy">That said, this is absolutely a heapq problem, where using <code>heapq.nsmallest</code> gives you a O(K log N) solution (where K is the size of the input, and N is the desired number of items). Sorting gives you a O(K log K) solution, the heapq will easily beat it.</span>
<span class="comment-copy">@MartijnPieters If you paid enough attention to the answer your could notice <i>you can improve performance if you keep a "heapified" list. You can push and pop from the list</i>. This obviously was the intention to show that if it's used as internal data structure (what you call <i>cached</i>), it has performance benefit. <code>heapq</code> docs also say for <code>nsmallest</code> and for <code>nlargest</code> <i>if repeated usage of these functions is required, consider turning the iterable into an actual heap</i>. This was demonstrated.</span>
<span class="comment-copy">I did misunderstand what you meant with 'keep a heapified list'. Please do expand on that, to make it explicit that the performance improvement is gained only when you need to produce the top N more than once with the input sequence being updated.</span>
<span class="comment-copy">Actually, looking at the implementation I forgot that <code>nlargest</code> and <code>nsmallest</code> <i>already</i> add a counter to break ties, making those implementations <i>stable</i>. <code>nlargest()</code> counts down, <code>nsmallest()</code> counts up. Only when you use the <code>heapsort</code> function from the documentation will you have an unstable sort.</span>
<span class="comment-copy">This is absolutely a heapq problem.</span>
<span class="comment-copy">This doesn't produce the output alvas wants.</span>
<span class="comment-copy">This will sort the values in order of the keys, he can loop and get the last n keys using <code>sorted(x, key=lambda x: x[1])[-n:]</code></span>
<span class="comment-copy">@vaultah edited. This produces the output alvas desires.</span>
<span class="comment-copy">Now it produces wrong output for <code>n = 11</code>.</span>
<span class="comment-copy">@vaultah can you provide the full list, I'll check. Also, this will give those with min counts, if alvas needs all in ascending order, he'll have to go by second approach of sorting.</span>
<span class="comment-copy">You could write <code>[a[0] for a in sorted(x, key=lambda x: x[1])[:n]]</code> and stop there.</span>
<span class="comment-copy">The result is incorrect for <code>n = 11</code>.</span>
<span class="comment-copy">@vaultah how so?</span>
<span class="comment-copy">The length of your result for <code>n = 11</code> is 10.</span>
<span class="comment-copy">@vaultah Oh! My bad,  I didn't realise the OP meant least as <i>in order</i> or smallest not literally those with <i>the smallest</i>.</span>
<span class="comment-copy">@vaultah See my updated answer, I think it is correct now...</span>
