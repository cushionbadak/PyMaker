<div class="post-text" itemprop="text">
<p>suppose I have a CSV file similar to this one, only much bigger:</p>
<pre><code>Cost center number,Month,Amount 1,Amount 2
1234,1,755,9356
1234,2,6758,786654
1234,1,-954,31234
1234,2,2345,778
1234,5,680,986
5678,6,876,456
5678,6,1426,321
5678,5,823,164
5678,7,4387,3485
91011,11,1582,714
91011,12,778,963
91011,10,28,852
91011,12,23475,147
</code></pre>
<p>I want to sort of mimic Excel pivot table functionality and group the data by cost center, months and sum of both amounts, so the output would look like this:</p>
<pre><code>Cost center number,Month,Amount 1 + Amount 2
1234,1,Amount 1 value + Amount 2 value
1234,2,Amount 1 value + Amount 2 value
1234,5,Amount 1 value + Amount 2 value
5678,6,Amount 1 value + Amount 2 value
5678,5,Amount 1 value + Amount 2 value
5678,7,Amount 1 value + Amount 2 value
91011,11,Amount 1 value + Amount 2 value
91011,10,Amount 1 value + Amount 2 value
91011,12,Amount 1 value + Amount 2 value
</code></pre>
<p>So far I have tried iterating through each row and creating list for the data I am interested in by I don't know where to go from there:</p>
<pre><code>import csv

filename = 'APAC.csv'

with open(filename) as f:
    reader = csv.reader(f)
    headers = next(reader)     

    for header in enumerate(headers):
        print(header)

    cost_centers = []
    months = []
    amounts1 = []
    amounts2 = []

    for row in reader:
        cost_centers.append(row[1])
        months.append(row[2)]
        amounts1.append(row[3])
        amounts2.append(row[4])
</code></pre>
<p>I know with Pandas there is the option of 'group by' and 'agg', but this is an exercise for list and dictionaries (however I am open to different approaches) for me and I would prefer to stay within the native Python library.</p>
</div>
<div class="post-text" itemprop="text">
<p>This could be done using Python's built in <a href="https://docs.python.org/3/library/collections.html?highlight=defaultdict#defaultdict-objects" rel="nofollow noreferrer"><code>defaultdict</code></a> to help with creating a dictionary entry for each <code>cost center</code> and <code>month</code>:</p>
<pre><code>from collections import defaultdict
import csv

filename = 'APAC.csv'
totals = defaultdict(lambda : defaultdict(int))

with open(filename, 'r', newline='') as f_input:
    csv_input = csv.reader(f_input)
    header = next(csv_input)     

    for cost_center, month, amount_1, amount_2 in csv_input:
        totals[cost_center][month] += int(amount_1) + int(amount_2)

with open('output.csv', 'w', newline='') as f_output:        
    csv_output = csv.writer(f_output)
    csv_output.writerow(['Cost center number', 'Month', 'Amount 1 + Amount 2'])

    for cost_center, month_data in sorted(totals.items()):
        for month, total in sorted(month_data.items()):
            csv_output.writerow([cost_center, month, total])
</code></pre>
<p>Which would give you an <code>output.csv</code> file containing:            </p>
<pre class="lang-none prettyprint-override"><code>Cost center number,Month,Amount 1 + Amount 2
1234,1,40391
1234,2,796535
1234,5,1666
5678,5,987
5678,6,3079
5678,7,7872
91011,10,880
91011,11,2296
91011,12,25363
</code></pre>
<p>By using a <code>defaultdict</code> it makes it easier to add entries without having to first test if one already exists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html" rel="nofollow noreferrer"><code>groupby</code></a> and aggregate <code>sum</code> and then if need sum all columns add <code>sum</code> with <code>axis=1</code>:</p>
<pre><code>#create DataFrame
df = pd.read_csv('APAC.csv')

df = df.groupby(['Cost center number','Month']).sum().sum(axis=1).reset_index(name='sum')
print (df)

   Cost center number  Month     sum
0                1234      1   40391
1                1234      2  796535
2                1234      5    1666
3                5678      5     987
4                5678      6    3079
5                5678      7    7872
6               91011     10     880
7               91011     11    2296
8               91011     12   25363
</code></pre>
<p><strong>Detail</strong>:</p>
<pre><code>print (df.groupby(['Cost center number','Month']).sum())
                          Amount 1  Amount 2
Cost center number Month                    
1234               1          -199     40590
                   2          9103    787432
                   5           680       986
5678               5           823       164
                   6          2302       777
                   7          4387      3485
91011              10           28       852
                   11         1582       714
                   12        24253      1110
</code></pre>
<p>If want one liner answer first <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.add.html" rel="nofollow noreferrer"><code>add</code></a>, then <code>groupby</code> by columns and last aggregate <code>sum</code>:</p>
<pre><code>df = (
      df['Amount 1'].add(df['Amount 2'])
                    .groupby([df['Cost center number'], df['Month']])
                    .sum()
                    .reset_index(name='sum')
     )
print (df)
   Cost center number  Month     sum
0                1234      1   40391
1                1234      2  796535
2                1234      5    1666
3                5678      5     987
4                5678      6    3079
5                5678      7    7872
6               91011     10     880
7               91011     11    2296
8               91011     12   25363
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one way.</p>
<p>(1) Create an 'Amount Total' column.<br/>
(2) Group by 'Cost center number' and 'month', summing 'Amount Total'.  </p>
<pre><code>df['Amount Total'] = df['Amount 1'] + df['Amount 2']

df.groupby(['Cost center number', 'month'])['Amount Total'].sum().reset_index()

#    Cost center number  month  Amount Total
# 0                1234      1         40391
# 1                1234      2        796535
# 2                1234      5          1666
# 3                5678      5           987
# 4                5678      6          3079
# 5                5678      7          7872
# 6               91011     10           880
# 7               91011     11          2296
# 8               91011     12         25363
</code></pre>
<p>For a one-line (but less explicit) answer, see <a href="https://stackoverflow.com/a/48853903/9209546">@jezrael's solution</a>.</p>
</div>
<span class="comment-copy">Thanks a lot jezrael. As I have stated in my question , I would prefer to omit Pandas if possible and find a solution with lists or dictionaries instead (I have thus removed Pandas tag from my post as it was misleading). Do you think it is achievable?</span>
<span class="comment-copy">Yes, it is possible, but a bit complicated - check <a href="https://stackoverflow.com/a/17430992/2901002">here</a></span>
