<div class="post-text" itemprop="text">
<p>I am trying to make a game similar to a MMORPG but is single player. I am trying to put the Player class on one script, the MaelstromPlayer, and it's child class MaelstromMove to connect to it using another script because I am adding the MaelstromBattle and MaelstromInv classes soon.</p>
<p>The problem is that I could not access, not to mention adjust, the MaelstromPlayer class attributes. I wonder what caused this problem and how to solve it, or even if this is possible.</p>
<p>In case you were wondering, I got the method of "Distributing A Class Across Multiple Files" from this website <a href="https://mail.python.org/pipermail/python-list/2012-January/618880.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/python-list/2012-January/618880.html</a> .</p>
<p>This is my code for MaelstromPlayer, the file where I store the parent class.</p>
<pre><code>class Player(object):
    def __init__(self):
        self.place = int("001")
        self.name = input("What name do you want?")
        self.knownplaces={}
        self.knownplaces[int("001")]="Ruby City"
        self.knownplaces[int("002")]="Ruby Inn"
        self.knownplaces[int("003")]="Ruby Forests"
        self.knownplaces[int("004")]="Ruby Countryside"
        self.knownplaces[int("005")]="Witch Hideout"
        self.mode="moving"
    def __str__(self):
        rep = self.movepossible
</code></pre>
<p>This is my code for MaelstromMove, where I store the child class of PlayerMove.</p>
<pre><code>import sys
sys.path.append('F:\Maelstrom\Python\MaelstromPlayer.py')
from MaelstromPlayer import Player

class PlayerMoving(Player):
    def __init__(Player):
        print('Welcome')
    def movepossible(Player,position):
        #001--Ruby City
        #002--Ruby Inn
        #003--Ruby Forests
        #004--Ruby Countryside
        #005--Witch Hideout
        if position==int("001"):
            possible=[int("002"),int("003")]
            return possible
        elif position==int("002"):
            possible=[int("001")]
            return possible
        elif position==int("003"):
            possible=[int("001"),int("004")]
            return possible
        elif position==int("004"):
            possible=[int("001"),int("003"),int("005")]
            return possible
        elif position==int("005"):
            possible=[int("004")]
            return possible
        else:
            return null
    def move(Player,position):
        if Player.mode=="moving":
            position=int(position)
            possiblewords=[]
            print('Choose between paths:')
            possible = Player.movepossible(position)
            for m in range(0,len(possible),1):
                possiblewords.append(Places.knownplaces[possible[m]])
            for n in range(0,len(possiblewords),1):
                print(str(n+1)+':'+str(possiblewords[n]))

            choice=input('Make your choice...')
                #choice=int(choice)
            if choice == '':
                choice = int('9999999999')
            if int(choice) &lt;= len(possiblewords):
                Player.place=possible[int(choice)-int('1')]
            print("\n")
            print("\n")
    def showposition(Player):
        print('You are at '+Player.knownplaces[int(Player.place)])

test = Player()
while True:
    place = test.place
    test.move(place)
    test.showposition()
</code></pre>
<p>The sys.path method is from here: <a href="http://www.daveoncode.com/2017/03/07/how-to-solve-python-modulenotfound-no-module-named-import-error/" rel="nofollow noreferrer">http://www.daveoncode.com/2017/03/07/how-to-solve-python-modulenotfound-no-module-named-import-error/</a> .</p>
<p>Please help, preferably with a code sample, thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you never call the the <code>PlayerMoving</code> class (for your test at the bottom), just the <code>Player</code> class. Also in the <code>PlayerMoving</code> class you override the <code>Player</code> class' <code>__init__</code> method. To make sure the <code>Player.__init__</code> is still called, do something like this:</p>
<pre><code>class PlayerMoving(Player):
    def __init__(self):
        print('Welcome')
        super().__init__()
</code></pre>
<hr/>
<p>Some additional problems:</p>
<ul>
<li>don't use <code>int("001")</code>, it's inefficient, pointless and just bad practice.</li>
<li>For creating your <code>dict</code> do <code>self.knownplaces = {1: "Ruby City", 2: "Ruby Inn", ...}  # etc</code></li>
<li><code>null</code> isn't defined in python, perhaps you mean <code>None</code> but you'll automatically <code>return None</code> if you don't return anything else.</li>
<li>Your <code>while</code> loop will never end. Put a <code>break</code> clause in or something.</li>
<li>Don't use <code>Player</code> as the first method argument. Use <code>self</code> like you'll find in every python class example ever <a href="https://docs.python.org/3/tutorial/classes.html#class-objects" rel="nofollow noreferrer">1</a><a href="https://www.learnpython.org/en/Classes_and_Objects" rel="nofollow noreferrer">2</a><a href="https://en.wikibooks.org/wiki/A_Beginner%27s_Python_Tutorial/Classes#Creating_a_Class" rel="nofollow noreferrer">3</a><a href="https://www.programiz.com/python-programming/class#define" rel="nofollow noreferrer">4</a><a href="http://python-textbok.readthedocs.io/en/1.0/Classes.html#defining-and-using-a-class" rel="nofollow noreferrer">5</a>.</li>
</ul>
<p>Finally, have you noticed that that entire thread from <a href="https://mail.python.org/pipermail/python-list/2012-January/618880.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/python-list/2012-January/618880.html</a> is about how you should <strong>never</strong> do this?</p>
</div>
<span class="comment-copy">fix your indentation. Also, it doesn't make sense to have the <code>move</code> as a class if it's an action of your player... which means it should be a method of such class.</span>
<span class="comment-copy">Why <code>int("001")</code> and not just <code>1</code>?</span>
<span class="comment-copy">Sorry, the indentation is difficult in Stack Overflow, also, the class makes it easier to put on the web for multiplayer, which I will do later. The int("001") is just my habits, and 001 is for more areas.</span>
<span class="comment-copy">In python we use <code>self</code> as the first argument of a method call, not the class name. What if you wanted to call a static method of that class? Also you don't need a single one of those <code>int</code> calls. It may be a habit but you should aim to get rid of your bad habits as soon as possible.</span>
<span class="comment-copy">Yes, I understand, I will try, also, I thought that to access the Player class I had to add it in, also, I thought that since I don't need any self calls I don't need it as an argument.</span>
<span class="comment-copy">How can I adjust the attributes and arguments in the Player class?</span>
<span class="comment-copy">By doing something like <code>def f(self): self.knownplaces[1] = 'new place'</code> like normal. I get the feeling you're getting ahead of yourself. You're trying relatively complex things like inheritance and you haven't got the basics down yet.</span>
