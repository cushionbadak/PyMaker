<div class="post-text" itemprop="text">
<p>What I want to do is to remove duplicates from the list and every time duplicate is removed insert an empty item.</p>
<p>I have code for removing duplicates. It also ignores empty list items</p>
<pre><code>import csv

#Create new output file

new_file = open('addr_list_corrected.csv','w')
new_file.close()

with open('addr_list.csv', 'r') as addr_list:
    csv_reader = csv.reader(addr_list, delimiter=',')
    for row in csv_reader:

        print row
        print "##########################"
        seen=set()
        seen_add=seen.add
        #empty cell/element evaluates to false

        new_row = [ cell for cell in row if not (cell and cell in seen or seen_add(cell))]
        print new_row

        with open('addr_list_corrected.csv', 'a') as addr_list_corrected:
            csv_writer=csv.writer(addr_list_corrected, delimiter=',')
            csv_writer.writerow(new_row)
</code></pre>
<p>But I need to replace every removed item with an empty string.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong> reverse the logic to make the meaning clearer:</p>
<p>Another alternative would be to do something like this:</p>
<pre><code>seen = dict()
seen_setdefault = seen.setdefault
new_row = ["" if cell in seen else seen_setdefault(cell, cell) for cell in row]
</code></pre>
<p>To give an example:</p>
<pre><code>&gt;&gt;&gt; row = ["to", "be", "or", "not", "to", "be"]
&gt;&gt;&gt; seen = dict()
&gt;&gt;&gt; seen_setdefault = seen.setdefault
&gt;&gt;&gt; new_row = ["" if cell in seen else seen_setdefault(cell, cell) for cell in row]
&gt;&gt;&gt; new_row
['to', 'be', 'or', 'not', '', '']
</code></pre>
<p><strong>Edit 2:</strong> Out of curiosity I ran a quick test to see which approach was fastest:</p>
<pre><code>&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; from statistics import mean
&gt;&gt;&gt; from timeit import repeat
&gt;&gt;&gt;
&gt;&gt;&gt; def standard(seq):
...     """Trivial modification to standard method for removing duplicates."""
...     seen = set()
...     seen_add = seen.add
...     return ["" if x in seen or seen_add(x) else x for x in seq]
...
&gt;&gt;&gt; def dedup(seq):
...     seen = set()
...     for v in seq:
...         yield '' if v in seen else v
...         seen.add(v)
...
&gt;&gt;&gt; def pedro(seq):
...     """Pedro's iterator based approach to removing duplicates."""
...     my_dedup = dedup
...     return [x for x in my_dedup(seq)]
...
&gt;&gt;&gt; def srgerg(seq):
...     """Srgerg's dict based approach to removing duplicates."""
...     seen = dict()
...     seen_setdefault = seen.setdefault
...     return ["" if cell in seen else seen_setdefault(cell, cell) for cell in seq]
...
&gt;&gt;&gt; data = [randint(0, 10000) for x in range(100000)]
&gt;&gt;&gt;
&gt;&gt;&gt; mean(repeat("standard(data)", "from __main__ import data, standard", number=100))
1.2130275770426708
&gt;&gt;&gt; mean(repeat("pedro(data)", "from __main__ import data, pedro", number=100))
3.1519048346103555
&gt;&gt;&gt; mean(repeat("srgerg(data)", "from __main__ import data, srgerg", number=100))
1.2611971098676882
</code></pre>
<p>As can be seen from the results, making a relatively simple modification to the standard approach described in <a href="https://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order">this other stack-overflow question</a> is fastest.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do that with an iterator. Something like this:</p>
<pre><code>def dedup(seq):
    seen = set()
    for v in seq:
        yield '' if v in seen else v
        seen.add(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>set</code> to keep track of seen items. Using the example list used above:</p>
<pre><code>x = ['to', 'be', 'or', 'not', 'to', 'be']
seen = set()
for index, item in enumerate(x):
    if item in seen:
        x[index] = ''
    else:
        seen.add(item)
print x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a new List and append the element if it is not present in the new List else append None if the element is already present in the new List.</p>
<pre><code>oldList = [3, 1, 'a', 2, 4, 2, 'a', 5, 1, 3]
newList = []

for i in oldList:
    if i in newList:
        newList.append(None)
    else:
        newList.append(i)
print newList
</code></pre>
<p>Output:</p>
<pre><code>[3, 1, 'a', 2, 4, None, None, 5, None, None]
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order">How do you remove duplicates from a list in Python whilst preserving order?</a></span>
<span class="comment-copy">I've voted to close this a dupe. The duped answer doesn't "insert empty items", but it's a trivial modification to do so.</span>
<span class="comment-copy">Take a look at the <code>unique_everseen</code> function in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">Itertools Recipes</a>.</span>
<span class="comment-copy">@Anonymous yes it is probably a trivial modification but do not seem to be able to do it ;)</span>
<span class="comment-copy">Hi Guys! Thanks a lot. I am new to python did not quite understand comprehensions. Trivial modification did the trick:  <code>seen=set() 		seen_add=seen.add 		new_row = ["" if x in seen or seen_add(x) else x for x in row]</code> @srgerg  Thanks a lot!</span>
<span class="comment-copy">you seem to use for loop would list comprehension be any better?</span>
<span class="comment-copy">Better in what sense? Faster? Probably.</span>
