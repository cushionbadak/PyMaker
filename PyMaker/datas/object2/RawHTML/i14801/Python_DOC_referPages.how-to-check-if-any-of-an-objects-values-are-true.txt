<div class="post-text" itemprop="text">
<p>so I have an object in an array of objects instantiated from this class:</p>
<pre><code>class entity:
    def __init__(self,name):
        self.entity = self
        person = True
        plant = False
        self.name = name
</code></pre>
<p>and I want an if statement that says something equivilant to the below psudocode: </p>
<pre><code>for i in index:
    if i.property (let's say plant for instance) == True:
        print (the name of the value, ie plant)
</code></pre>
<p>This when when the if statement evaluates as true for a property, instead of printing "True" it will print "plant".  How would I go about doing this, considering i.property is obviously wrong, and I don't know how to reference the name of an object's value?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the builtin <code>vars</code>, which returns a dictionary of an object's properties and values:</p>
<pre><code>&gt;&gt;&gt; x = Entity('foo')
&gt;&gt;&gt; vars(x)
{'entity': &lt;__main__.Entity instance at 0x7fed7788b368&gt;, 'name': 'foo'}  
</code></pre>
<p>So,</p>
<pre><code>for prop, val in vars(x).iteritems():
    if val is True:
        print prop
</code></pre>
<p>Note that in your original code <code>person</code> and <code>plant</code> are local variables in <code>__init__</code> and won't be attached as properties of the Entity.</p>
</div>
<div class="post-text" itemprop="text">
<p>A richer definition of your <code>entity</code> objects might be:</p>
<pre class="lang-py prettyprint-override"><code>class entity(object):

    def __init__(self, name, person=False, plant=False):
        self.person = person
        self.plant = plant
        self.name = name

    def __repr__(self):
        return "entity({0!r})".format(self.name)
</code></pre>
<p>Then given a collection of entities, you can iterate over them pretty easily:</p>
<pre class="lang-py prettyprint-override"><code>entities = [
        entity("Joe", person=True),
        entity("tulip", plant=True),
        entity("Mona Lisa"),
        entity("rose", plant=True),
        entity("Rose McGowan", person=True)
    ]

for e in entities:
    if e.plant:
        print(repr(e.name), "is a plant")
</code></pre>
<p>Yields:</p>
<pre class="lang-none prettyprint-override"><code>'tulip' is a plant
'rose' is a plant
</code></pre>
<p>Note that in Python, it's easy and idiomatic to iterate over the items of a collection, rather than over indices (contra C, JavaScript, and some other languages). </p>
<p>You can also filter collections into new collections, for example with list comprehensions:</p>
<pre class="lang-py prettyprint-override"><code>plants = [ e for e in entities if e.plant ]
print(plants)
</code></pre>
<p>Yields:</p>
<pre class="lang-py prettyprint-override"><code>[entity('tulip'), entity('rose')]
</code></pre>
<p>The pretty representation of the entities, rather than something like <code>&lt;__main__.entity object at 0x104603668&gt;</code>, is why we defined the <code>__repr__</code> method. </p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, you want to print all attribute names which are
<code>True</code> for given object.</p>
<p>This could be done using:</p>
<blockquote>
<p><strong>dir([object])</strong></p>
<p>Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.
  ..</p>
</blockquote>
<p>(see: <a href="https://docs.python.org/2/library/functions.html?highlight=dir#dir" rel="nofollow">https://docs.python.org/2/library/functions.html?highlight=dir#dir</a>)</p>
<p>which returns list of all attributes accessible from given object.</p>
<pre><code>&gt;&gt;&gt; class entity:
...     def __init__(self,name):
...         self.entity = self
...         person = False
...         plant = False
...         self.name = name
... 
&gt;&gt;&gt; e = entity('x')
&gt;&gt;&gt; dir(e)
['__doc__', '__init__', '__module__', 'entity', 'name']
</code></pre>
<p>So you can print all <code>True</code> attributes using this code:</p>
<pre><code>&gt;&gt;&gt; # no attribute is True, so none is printed
&gt;&gt;&gt; for attribute in dir(e):
...     if getattr(e, attribute) is True:
...         print '"%s" is True' % (attribute, )
... 
&gt;&gt;&gt; e.person = True
&gt;&gt;&gt; for attribute in dir(e):
...     if getattr(e, attribute) is True:
...         print '"%s" is True' % (attribute, )
... 
"person" is True
&gt;&gt;&gt; 
</code></pre>
<p>Note that I'm using <code>is True</code> means the value must literally be <code>True</code>, not
just evaluate to <code>True</code> (like <code>1</code>, <code>"non-empty string"</code>, etc.).</p>
<p><strong>Edited based on comment:</strong></p>
<p>I do not understand your concern - the class <code>entity</code>'s <code>__init__</code> method sets
<code>person</code> and <code>plant</code> to <code>False</code>. Therefore every instance of <code>entity</code> class
has <strong>no</strong> <code>True</code> values. No matter what you pass as a <code>name</code>, without
explicitly changing some attribute to <code>True</code>, there will never be any
attribute with <code>True</code> value.</p>
<p>But it is quite likely that I didn't understand what was your intention.</p>
</div>
<span class="comment-copy">If <code>property</code> is a name for a string, <code>property = 'person'</code>,  use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr(object_name, property)</code></a></span>
<span class="comment-copy">so if what you're saying is true, why doesn't this code print that the person attribute to the object morganFreeman == True?          morganFreeman = entity("morgan freeman")       for attribute in dir(morganFreeman):         if getattr(morganFreeman, attribute) is True:             print '"%s" is True' % (attribute)</span>
<span class="comment-copy">@user3150635 because there is no <code>morganFreeman</code> attribute in <code>entity</code> class you provided and I used. If there would be, it would get printed.</span>
<span class="comment-copy">sorry i'm trying to figure out how to format code in a comment.  In any case, what I'm asking is what part of your code do I need to replace with "morganFreeman" so that it will evaluate if either his plant or person values are true and then print them?</span>
<span class="comment-copy">nevermind, I wrote the question wrong, person is supposed to always be true.  I'm asking what part of your code I have to replace with my object's name for it to work, because I clearly implemented it wrong.</span>
<span class="comment-copy">@user3150635 you don't have to replace anything. There is nothing <code>True</code> unless you set it to <code>True</code> in every <code>entity</code> instance. Please try to improve your original question and add more details about what do you actually need to do. It seems to me you're probably trying to do something very different from what me and all others think you're trying to do.</span>
