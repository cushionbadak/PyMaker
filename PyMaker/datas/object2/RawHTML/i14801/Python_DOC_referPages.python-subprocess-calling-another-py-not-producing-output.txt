<div class="post-text" itemprop="text">
<p>I have 2 programs, one is calling the other through subprocess. Running this in pyCharm. My issue is that the call to the second program doesn't print out the desired string (see programs). What am I doing wrong, or is my understanding of the subprocess wrong?</p>
<h1>this is something.py:</h1>
<pre><code>import subprocess
def func():
    print("this is something")
    sb = subprocess.call("diff.py", shell=True)
return sb


if __name__=="__main__":
   func()
</code></pre>
<h1>this is diff.py:</h1>
<pre><code>print("this is diff running")

def caller():
    print("this is diff running called from name main")


if __name__=="__main__":
    caller()
</code></pre>
<p>I decided to try subprocessing instead of importing for the purpose of running the calls concurrently in diff threads in the future. For now I just wanted to make sure I grasp subprocessing but I'm stuck at this basic level with this issue and get figure it out.</p>
</div>
<div class="post-text" itemprop="text">
<p>You must use python to run python files.</p>
<pre><code>import subprocess
def func():
    print("this is something")
    sb = subprocess.call("python diff.py", shell=True)
    # It is also important to keep returns in functions
    return sb


if __name__=="__main__":
   func()
</code></pre>
<p>I would be careful to understand the layout of how pycharm saves files. Maybe consider trying to run a program that already exists for the Windows command line if you are just trying to learn about the subprocess module.</p>
<pre><code>import subprocess
print("this is where command prompt is located")
sb = subprocess.call("where cmd.exe", shell=True)
</code></pre>
<p>returns </p>
<pre><code>this is where command prompt is located
C:\Windows\System32\cmd.exe
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you. 
subprocess.call("python something.py", shell=True) now works as intended but for some reason the very same call from pyCharm does not return the second string from diff.py  I assume the issue is with pyCharm then</p>
</div>
<div class="post-text" itemprop="text">
<p>To run <code>diff.py</code> script from the current directory using the same Python interpreter that runs the parent script:</p>
<pre><code>#!/usr/bin/env python
import sys
from subprocess import check_call

check_call([sys.executable, 'diff.py'])
</code></pre>
<ul>
<li>do not use <code>shell=True</code> unless it is necessary e.g., unless you need to run an internal command such as <code>dir</code>, you don't need <code>shell=True</code> in most cases</li>
<li>use <code>check_call()</code> instead of <code>call()</code> to raise an exception if the child script returns with non-zero exit code</li>
</ul>
<hr/>
<blockquote>
<p>Why[When] I try python something.py pyCharm fires up to interpret it.</p>
</blockquote>
<p>You should <a href="https://docs.python.org/3/using/windows.html#executing-scripts" rel="nofollow">associate <code>.py</code> extension with <code>py</code> (Python launcher)</a>. Though if running the command:</p>
<pre><code>T:\&gt; python something.py
</code></pre>
<p>literally brings up PyCharm with the file <code>something.py</code> opened instead of running the script using a Python interpreter then something is really broken. Find out what program is run then you type <code>python</code> (without arguments).</p>
<p>Make sure you understand the difference between:</p>
<pre><code>subprocess.Popen(['python', 'diff.py']) 
subprocess.Popen('diff.py')
subprocess.Popen('diff.py', shell=True)
os.startfile('diff.py')
os.startfile('diff.py', 'edit')
</code></pre>
<p>Try to run it from the command-line (<code>cmd.exe</code>) and from IDLE (<code>python3 -m idlelib</code>) and see what happens in each case.</p>
<hr/>
<p>You should prefer to import the Python module and use <code>multiprocessing</code>, <code>threading</code> modules if necessary  to run the corresponding functions  instead of running the Python script as a child process via <code>subprocess</code> module.</p>
</div>
<span class="comment-copy"><code>def caller()</code> with no colon doesn't look like valid Python syntax to me. Please post your actual code. In any case, why not just <code>import</code> the script?</span>
<span class="comment-copy">sorry for the typo...still doesn't work</span>
<span class="comment-copy">why using subprocess instead of importing it?</span>
<span class="comment-copy">I just wanted to learn a bit about subprocess but it seems that I'm either not understanding it or doing something incorrectly.</span>
<span class="comment-copy">maybe you're just missing the shebang line at the top of your script. first try running diff.py from command line before trying from subprocess</span>
<span class="comment-copy">Great. This definitely clarified some things for me especially calling Popen() vs ([,]).  Why would you say it's better to use multiprocessing/threadings vs subprocess? I read a bit about subprocess and it was praised as a neatly packaged tool. This coming from a newbie.</span>
