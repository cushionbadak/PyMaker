<div class="post-text" itemprop="text">
<p>I have a package installed in <code>/u/home/j/joelfred/python-dev-modules</code>. It looks like:</p>
<pre><code>/a
    __init__.py
    b.py
</code></pre>
<p>The source for <code>b.py</code> is simply:</p>
<pre><code>def hello():
    print('hi yourself')
</code></pre>
<p>And for <code>__init__.py</code>:</p>
<pre><code>import b
</code></pre>
<p>First, I make sure I'm in my home directory, and set my PYTHONPATH:</p>
<pre><code>$ cd
$ export PYTHONPATH=/u/home/j/joelfred/python-dev-modules/
</code></pre>
<p>Then I run <code>python3</code>:</p>
<pre><code>$ python3
Python 3.4.3 (default, Mar 18 2015, 17:28:34) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/u/home/j/joelfred/python-dev-modules/a/__init__.py", line 1, in &lt;module&gt;
    import b
ImportError: No module named 'b'
</code></pre>
<p>Okay, that's weird. But if I change <code>__init__.py</code> to be blank:</p>
<pre><code>$ python3
Python 3.4.3 (default, Mar 18 2015, 17:28:34) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import a.b as b
&gt;&gt;&gt; b.hello()
hi yourself
&gt;&gt;&gt; 
</code></pre>
<p>What on earth is going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 all imports are absolute.  You can't do <code>import b</code> unless <code>b</code> itself is a top-level module/package available on <code>sys.path</code>.  If you want to import <code>b</code> from inside <code>a</code>, use an explicit relative import: </p>
<pre><code>from . import b
</code></pre>
</div>
<span class="comment-copy">Doesn't work, invalid syntax:  Python 3.4.3 (default, Mar 18 2015, 17:28:34)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import a Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt;   File "/u/home/j/joelfred/python-dev-modules/a/__init__.py", line 1     import .b            ^ SyntaxError: invalid syntax &gt;&gt;&gt;</span>
<span class="comment-copy">you should <code>from .b import *</code></span>
<span class="comment-copy">Okay, that works, but why? What if I don't want <code>hello</code> in <code>a</code>'s namespace? Why doesn't the way I did it work?</span>
<span class="comment-copy">If you don't want <code>hello</code> in <code>a</code>'s namespace, you should define a list with a special name <code>__all__</code> in <code>b</code> and not put <code>hello</code> in it. You might want to take a look at answers <a href="http://stackoverflow.com/questions/44834/can-someone-explain-all-in-python">here</a>.</span>
<span class="comment-copy">Thanks, that was driving me crazy. I'll accept your answer as soon as the system lets me. Is there someplace in the python documentation that points this out?</span>
<span class="comment-copy">@Joel there may be a more friendly page that describes the Python 3 import differences, but <a href="https://www.python.org/dev/peps/pep-0328/" rel="nofollow noreferrer">PEP 328</a> is where the changes originated.</span>
<span class="comment-copy">@Joel: <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow noreferrer">The documentation on <code>import</code></a> gives an outline, with a link to the (lengthy) <a href="https://docs.python.org/3/reference/import.html#importsystem" rel="nofollow noreferrer">full description</a> of the import system.  Absolute/relative imports are described in <a href="https://www.python.org/dev/peps/pep-0328/" rel="nofollow noreferrer">PEP 328</a>.  The fact that implicit relative imports used to work in Python 2 but don't in Python 3 is mentioned in basically every list of differences between Python 2 and 3, for instance <a href="https://docs.python.org/3.0/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@BrenBarn Thanks, I feel a bit silly for missing a basic change in the language. I wish there'd been that warning on the modules documentation page somewhere.</span>
