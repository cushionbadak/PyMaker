<div class="post-text" itemprop="text">
<p>I have a number of objects that I need to print out to the terminal (for debugging). The normal <code>print</code> function is almost perfect, except that some objects are too large, so <code>print</code> would create millions of lines of output. I'd like to create a function that does what <code>print</code> does, except that the output is truncated after a predefined number of characters, replacing the rest with <code>...</code>.</p>
<p>What's a good way to do that?</p>
<p>Note that performance is a concern, so ideally I'd prefer not to save a gigabyte-sized string and then take the first few characters from it; similarly, <code>pprint</code> is a bit of a problem since it sorts keys in dictionaries (and with millions of keys it takes a while).</p>
<p>Example:</p>
<pre><code>obj = [ [1, 2, 3], list(range(1000000)) ]
my_print(obj, 20)
# should output:
# [[1, 2, 3], [0, 1, 2...
</code></pre>
<p>Python 3, if it matters.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3.4/library/reprlib.html" rel="noreferrer"><code>reprlib</code></a> module (Python 3.x only) suggested by @m0nhawk is made exactly for this purpose. Here's how you would use it:</p>
<p>If you're fine with the <strong>default limits</strong>, you can simply use <a href="https://docs.python.org/3/library/reprlib.html#reprlib.repr" rel="noreferrer"><code>reprlib.repr(obj)</code></a>:</p>
<pre><code>import reprlib

obj = [[1, 2, 3], list(range(10000))]

print(reprlib.repr(obj))
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2, 3], [0, 1, 2, 3, 4, 5, ...]]
</code></pre>
<hr/>
<p>In order to <strong>customize the <a href="https://docs.python.org/3/library/reprlib.html#repr-objects" rel="noreferrer">available limits</a></strong>, simply create a <code>reprlib.Repr</code> instance and set the appropriate instance attributes:</p>
<pre><code>r = reprlib.Repr()
r.maxlist = 4       # max elements displayed for lists
r.maxstring = 10    # max characters displayed for strings

obj = [[1, 2, 3], list(range(10000)), 'looooooong string', 'a', 'b', 'c']

print(r.repr(obj))
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2, 3], [0, 1, 2, 3, ...], 'lo...ing', 'a', ...]
</code></pre>
<hr/>
<p>If you're dealing with sequence <strong>objects that refer to themselves</strong>, you can use <code>Repr.maxlevel</code> to limit the recursion depth:</p>
<pre><code>lst = [1, 2, 3]
lst.append(lst)  # oh my!

r = reprlib.Repr()
r.maxlevel = 5   # max recursion depth

print(r.repr(lst))
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 3, [1, 2, 3, [1, 2, 3, [1, 2, 3, [1, 2, 3, [...]]]]]]
</code></pre>
<hr/>
<p>Note that <code>reprlib.repr()</code> <em>returns</em> a string, but doesn't <code>print</code> it (unless you're in an interactive console where the result of every expression you enter gets evaluated and its representation displayed). </p>
</div>
<div class="post-text" itemprop="text">
<p>Why not just make a simple slice wrapper over the <code>print</code> function?</p>
<pre><code>def my_print(obj, depth):
    print(str(obj)[:depth])
</code></pre>
<p><code>print</code> does the same thing as <code>str</code> before writing to the output stream. So what you want to do is do that casting early, before passing it into print, and then slice off a chunk of it that has a max size of whatever you want.</p>
<p>Python slicing is graceful, so a string slice like <code>'xyz'[:30000]</code> evaluates simply to <code>'xyz'</code> rather than raising an error.</p>
</div>
<span class="comment-copy">If you have dictionaries with nesting, probably <a href="https://docs.python.org/3.4/library/pprint.html" rel="nofollow noreferrer"><code>pprint.pprint</code></a> with parameter <code>depth</code> set will help?</span>
<span class="comment-copy">@myaut it's not exactly what I was looking for, but it's really helpful! Thanks!</span>
<span class="comment-copy">You can define your own representation with <a href="https://docs.python.org/3.4/library/reprlib.html" rel="nofollow noreferrer"><code>reprlib</code></a>.</span>
<span class="comment-copy">@m0nhawk I think this is it. Can you please move it from a comment to an answer?</span>
<span class="comment-copy">This would work perfectly, except it would still take forever to run. I have dictionaries with hundreds of thousands of keys, whose values are lists with hundreds of items. Converting those to <code>str</code> will take a very long time, so ideally I'd like to avoid this.</span>
<span class="comment-copy">@max I think the call to <code>str</code> is pretty much unavoidable. You could try changing what <code>str</code> does by looking into Python's special methods system and <code>__str__</code>: <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__str__</a> However, a big problem is that you can't change the attributes of built-in types like <code>dict</code>. I think you might be stuck with implementing your own wrapper class over dict and then overriding its <code>__str__</code> function with your own custom one.</span>
