<div class="post-text" itemprop="text">
<p>I would like to establish a very simple communication between two python scripts. I have decided that the best way to communicate and to have both scripts read from a text file. I would like the main program to wait while to child programs execute.</p>
<p>Normally I would make the main program wait x amount of time and continuously check the text file for an okay flag. However I have seen people talk about using a signal.</p>
<p>Could someone please give an example of this.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.send_signal" rel="nofollow noreferrer"><code>Popen.send_signal()</code> method</a> that allows you to send a signal to a child process.</p>
<p>Here's <a href="https://stackoverflow.com/a/27995163/4279">code example that sends <code>SIGINT</code> to <code>ping</code> subprocess to get the summary in the output on exit</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need one process to write and one to read; both processes reading leads to no communication. Signals are used only for special proposes, not for normal inter-process-communication. Use something like pipes or sockets. It's not more complicated than files, but much more powerful. </p>
</div>
<span class="comment-copy"><a href="http://pymotw.com/2/subprocess/" rel="nofollow noreferrer">pymotw.com/2/subprocess</a> provides an example of using signal. Look at the Signaling Between Processes subsection.</span>
<span class="comment-copy">1. Why do you use <code>subprocess</code> instead of importing the corresponding modules and calling the necessary function directly (possibly using <code>threading</code>, <code>multiprocessing</code> modules)? 2. There are many IPC methods and the reading from a text file on receiving a signal might not be the best option e.g., you could use pipes to exchange data between processes instead.</span>
