<div class="post-text" itemprop="text">
<p>I'm currently trying to write a small Python script which parses a SVN <code>.diff</code> file and writes the result to a <code>.csv</code> which can easily be opened in Microsoft Excel or similar programs. However, I'm stuck at the parsing part, more precisely at the line sorting. The file I want to parse looks like the following.</p>
<pre><code>-   &lt;name key="first.key"&gt;Old string 1&lt;/name&gt;
-   &lt;name key="second.key"&gt;Old string 2&lt;/name&gt;
+   &lt;name key="first.key"&gt;New string 1&lt;/name&gt;
+   &lt;name key="second.key"&gt;New string 2&lt;/name&gt;
+   &lt;name key="third.key"&gt;Another new string&lt;/name&gt;
...
</code></pre>
<p>To easily parse the file and write keys that belong together next to each other into a table, I need to sort it by key pairs, so it looks like the following. That way, I'll be able to run through the file easily.</p>
<pre><code>-   &lt;name key="first.key"&gt;Old string 1&lt;/name&gt;
+   &lt;name key="first.key"&gt;New string 1&lt;/name&gt;
-   &lt;name key="second.key"&gt;Old string 2&lt;/name&gt;
+   &lt;name key="second.key"&gt;New string 2&lt;/name&gt;    
+   &lt;name key="third.key"&gt;Another new string&lt;/name&gt;
...
</code></pre>
<p>Is there a build-in way to do this kind of sorting or a simple alternative?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there is! You can use the <code>sorted</code> (or <code>sort</code>) functions with your own sorting function:</p>
<pre><code>import re

pattern = re.compile(r'\&lt;name key="(.*)"&gt;(.*)&lt;\/name&gt;')
def sorter(pair):
    return pattern.match(pair).groups()

print(sorted(list_of_lines, key=sorter))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways to do it by implementing the 'key' in sorted(). Here is a demo for a crude method.</p>
<pre><code>&gt;&gt;&gt; for l in data:
...     print l
... 
-   &lt;name key="first.key"&gt;String&lt;/name&gt;
-   &lt;name key="second.key"&gt;String&lt;/name&gt;
+   &lt;name key="first.key"&gt;String&lt;/name&gt;
+   &lt;name key="second.key"&gt;String&lt;/name&gt;
+   &lt;name key="third.key"&gt;String&lt;/name&gt;
&gt;&gt;&gt; for l in sorted(data, key=lambda s: s[1:s.index('.key')]):
...     print l
... 
-   &lt;name key="first.key"&gt;String&lt;/name&gt;
+   &lt;name key="first.key"&gt;String&lt;/name&gt;
-   &lt;name key="second.key"&gt;String&lt;/name&gt;
+   &lt;name key="second.key"&gt;String&lt;/name&gt;
+   &lt;name key="third.key"&gt;String&lt;/name&gt;
</code></pre>
</div>
<span class="comment-copy">that is <i>not</i> sorting by key; instead you are reorganizing the deltas.</span>
<span class="comment-copy">You probably want to sort it primarily by <code>first.key</code> and secondary by the first character in the line so that you get your <code>-</code> lines before your <code>+</code> lines. This may be done by passing a cmp argument to sorted which splits the string, extracts the first.key (e.g. by regex) and the diff character. If first key is different it determines the comparison, otherwise the diff char determines the comparison.</span>
<span class="comment-copy">the <code>cmp</code> argument is probably not your best bet. It's a lot slower than using <code>key</code> (and <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">gone in Py3k</a>).</span>
<span class="comment-copy">TotempaaltJ: Ok. You can still use the same technique by having the key function return a tuple of the prioritized sort  order. E.g. <code>(key_first, diff_char)</code> where the key_first and diff_char are extracted by a regex.</span>
<span class="comment-copy">That's a great solution. Is there a way to also sort by the first character in the line, so that <code>-</code> comes before <code>+</code>? Also see my edit, the second match group in the regex won't be needed because the string changes.</span>
<span class="comment-copy">Yes but that makes it a little more difficult. By default, Python sorts <code>+</code> before <code>-</code>. You could do something like (uh) a <code>return (pattern.match(pair).group(0), 0 if pair[0] == '-' else 1)</code>... that should work.</span>
<span class="comment-copy">If "By default, Python sorts + before -" then you may use 'reverse=True' in sorted().</span>
<span class="comment-copy">You could do that (and replace the trinary operator with a simple <code>pair[0]</code>, but that would also reverse the sorting of the pattern match which might not be what @Erdnussknacker wants.</span>
<span class="comment-copy">This work fine and IMO looks much better than my answer. Not necessarily more elegant, just more readable.</span>
