<div class="post-text" itemprop="text">
<p>I'm currently doing the tutorials on DataQuest.io.
The goal in the following exercise is to loop through a dataset (flight_delays) and create a list of unique carriers.</p>
<pre><code>#setting up empty lists
delays_by_carrier = {}
unique_carriers = []
#formula that returns column number based on column name
carrier_column = column_number_from_name("carrier")

for row in flight_delays:
    if row[carrier_column] in unique_carriers == False:
        unique_carriers.append(row[carrier_column])
print (unique_carriers)
</code></pre>
<p>The print(unique_carriers) command returns an empty list while I was expecting a list of unique carriers. Can somebody explain/correct? </p>
<p>FYI - I managed to solve the problem by using another approach. I'm still interested to see how I could have fixed this!</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue in your code is the test. You want to check that the carrier is not yet in <code>unique_carriers</code> but your test is a bit weird. In any case, you should avoid comparing Boolean values in a test because a test is already a comparison of a Boolean value. The simple expression would be:</p>
<pre><code>if row[carrier_column] not in unique_carriers:
    ...
</code></pre>
<p>What you wanted to write was:</p>
<pre><code>if (row[carrier_column] in unique_carriers) == False:
    ...
</code></pre>
<p>That would have worked (but is inelegant). You could also write <code>not (row[carrier_column] in unique_carriers)</code>.</p>
<p>What is interesting in your question is what actually happens. This is not an issue about operator priority: your code is not interpreted as <code>row[carrier_column] in (unique_carriers == False)</code>, that would raise a <code>TypeError</code> exception stating that you cannot use the <code>in</code> operator with a Boolean.</p>
<p>No, what happens is that in Python, you can <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow">chain comparisons</a> such as <code>x &lt; y &lt; z</code>, and <code>in</code> and <code>==</code> are both comparisons in that sense. Therefore your statement was interpreted as <code>(row[carrier_column] in unique_carriers) and (unique_carriers == False)</code>.</p>
<p>You can confirm it with the bytecode. Here I do a simple function to look at what Python will do with it:</p>
<pre><code>&gt;&gt;&gt; def f():
...     if row[carrier_column] in unique_carriers == False:
...         pass
...     
</code></pre>
<p>And then, let's look at bytecode!</p>
<pre><code>&gt;&gt;&gt; dis.dis(f)
2         0 LOAD_GLOBAL              0 (row)
          3 LOAD_GLOBAL              1 (carrier_column)
          6 BINARY_SUBSCR
          7 LOAD_GLOBAL              2 (unique_carriers)
         10 DUP_TOP
         11 ROT_THREE
         12 COMPARE_OP               6 (in)
         15 JUMP_IF_FALSE_OR_POP    27
         18 LOAD_CONST               1 (False)
         21 COMPARE_OP               2 (==)
         24 JUMP_FORWARD             2 (to 29)
    &gt;&gt;   27 ROT_TWO
         28 POP_TOP
    &gt;&gt;   29 POP_JUMP_IF_FALSE       35

3        32 JUMP_FORWARD             0 (to 35)
    &gt;&gt;   35 LOAD_CONST               0 (None)
         38 RETURN_VALUE
</code></pre>
<p>At <code>10</code> you see the <code>DUP_TOP</code> that duplicates the top of the stack which, at that time, is the list. Then the <code>ROT_THREE</code> rotates the stack such that you end up with:</p>
<pre><code>unique_carriers
row[carrier_column]
unique_carriers
</code></pre>
<p>Now you get the first comparison using <code>in</code> (<code>12</code>) which, if <code>True</code> continues to <code>18</code> and <code>21</code> to compare what remains (<code>unique_carriers</code> since the other 2 have been popped in the comparison) with <code>False</code>. That's it, your test is:</p>
<pre><code>if row[carrier_column] in unique_carriers:
    if unique_carriers == False:
        # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you for your answer. To resume, the following solutions would have worked:</p>
<pre><code>if row[carrier_column] not in unique_carriers:
</code></pre>
<hr/>
<pre><code>if (row[carrier_column] in unique_carriers) == False:
</code></pre>
<p>The explanation on why my code didn't work kind of got over my head. But I now understand the complexity of the test I created ensuring that I will try to find an elegant solution first.</p>
<p>Kind regards</p>
</div>
<span class="comment-copy">What is flight_delays? A list, dictionary...?</span>
<span class="comment-copy">Flight delays would be a list of lists.</span>
