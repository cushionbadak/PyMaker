<div class="post-text" itemprop="text">
<p>I am making a math quiz game in python, where the computer selects 2 numbers and 1 symbol from a list and prints it, then the user answers the question. In my list with the symbols, I have the math symbols as strings, but when I want the computer to get the answer, It can't, because the symbols are strings. How do I convert the '*' string to the * symbol used in math? Any help is appreciated, I will post what I have of the game so far as well.</p>
<pre><code>import random
import time
import math

symbols = ('*', '+', '-', '/')
count = 0
def intro():
    print("Hi")
    print("Welcome to the math quiz game, where you will be tested on addition")
    print("Subtraction, multiplication, and division, and other math skills")
    time.sleep(3)
    print("Lets begin")

def main(count):
        number_1 = random.randrange(10,20+1)
        number_2 = random.randrange(1,10+1)
        symbol = (random.choice(symbols))
        print("Your question is: What is %d %s %d") %(number_1, symbol, number_2)


main(count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to give a meaning to those symbols. One way would be by realizing that each of these symbols is a function that takes two arguments. Thus you can do:</p>
<pre><code>symbols = {
    '*': lambda x, y: x*y,
    '+': lambda x, y: x+y,
    '-': lambda x, y: x-y,
    '/': lambda x, y: x/y,
}
</code></pre>
<p>and then you can do</p>
<pre><code>number_1 = random.randrange(10,20+1)
number_2 = random.randrange(1,10+1)
symbol = random.choice(symbols.keys())
operator = symbols[symbol]
result = operator(number_1, number_2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/operator.html" rel="nofollow"><code>operator</code></a> module and map the operators to your desired symbols:</p>
<pre><code>import operator
import random

OPS = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv,
}

op_symbol = random.choice(OPS.keys())
operand1 = random.randint(1, 10)
operand2 = random.randint(1, 10)

formula = "{} {} {} = ?".format(operand1, op_symbol, operand2)
operator = OPS[op_symbol]
result = operator(operand1, operand2)

print "Question: {}".format(formula)
print "Result: {}".format(result)
</code></pre>
<p>Note that for Python 2.x the <code>/</code> operator (<code>operator.div</code>) does integer division - hence I used <code>operator.truediv</code> instead because otherwise you'd get surprising results when dividing integers. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow"><code>eval</code></a> functionality to evaluate a string as a command:</p>
<pre><code>result=eval(str(number_1)+str(symbol)+str(number_2))
</code></pre>
<p>In that case <code>result</code> will get the value of the queried question.</p>
<p>However as @icktoofay says, always <strong>use <code>eval</code> with caution</strong>: if you don't use it properly it can have side effects (like <code>eval("somecommand()")</code>) or even worse, it can allow a user to insert python logic in your program: for instance <code>eval(cmd)</code> where the user can enter the command.</p>
</div>
<span class="comment-copy">You might be better using a dictionary, with the symbols as keys and the operator functions as values.  See the <code>operator</code> module in the standard library.</span>
<span class="comment-copy">The functions for multiplication, addition, subtraction, and division already exist in <a href="https://docs.python.org/3.5/library/operator.html" rel="nofollow noreferrer">the <code>operator</code> module</a>, though the <code>lambda</code>s are pretty clear too.</span>
<span class="comment-copy">This is true, but keep in mind: <code>eval</code> is evil.</span>
<span class="comment-copy"><code>number_1 = 4; symbol = "+sum(sys.stdout.write('sup, i am in your computer, reading your files') or 0 for _ in range(10))+"; number_2 = 5; result=eval(str(number_1)+str(symbol)+str(number_2))</code></span>
<span class="comment-copy">@CommuSoft I know, I was just using that as an exercise for myself to execute an expression without throwing a suspicious error, so it was not really a criticism of your answer. I did not downvote you, but I still think it's best to discourage the use of eval whenever possible as a 'best practice' sort of thing, unless you are running in sandbox mode. And yes, even if the 'computer' is the one doing the inputs.</span>
<span class="comment-copy">Well the answer is interesting because it shows a strategy to solve it. I don't claim it's the best solution. But in this case, your fully in charge of the variables used. Furthermore it doesn't involve lambda-expressions, so it's easy to understand. So it's <b>a</b> solution. I agree it's not the best/safest solution....</span>
<span class="comment-copy">"eval is evil" is something you tell a beginner to make sure he will not use it. When one reaches a certain level, we can assume that the given person will have a good reason to use it if suggests its usage. Everything depends on context. Here, the usage of eval is perfectly valid and the author was even warning on the dangers when one uses eval. As a result, I believe this answer is good.</span>
