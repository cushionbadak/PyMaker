<div class="post-text" itemprop="text">
<p>Many make that comment, but no one offers a reason why it is bad.</p>
<p>How else to catch user input errors? Wait for some code somewhere else to "throw an exception?" Why is it not better to catch an error immediately?</p>
<p>For instance, an (ab)user types in 17.6 for an expected integer response. It is clearly an error, getting a <em>type</em> of <code>float</code> for an expected <em>type</em> of <code>int</code> (just to be clear?).</p>
<p>Or, say, that (ab)user even enters 17/6 for the intended <code>float</code>. 17/6 <em>is</em> a <code>float</code>, so it would be hard to catch this error, if one waited for the data to get where it is actually used.</p>
<p>I do not understand the premise.</p>
<p>===========================
The following is an edit based on the many (very good) replies - and THANKS for all of them!</p>
<p>First, I believe that ALL coding <em>styles</em> are based upon opinions of people that have learned to have those opinions based on some error they have encountered. So, yes, by definition, as this is a coding style question, all answers are likely based upon opinions, or experience which led there.</p>
<p>Second, testing type after input, at a function, is now something I understand from the comments. Many thanks for the examples and explanations.</p>
<p>Third, perhaps the "testing for type is bad" ideology should be somewhat expounded upon to mean AFTER testing inputs, as many comments pointed towards. It was a blanket statement stated in many responses to searches I have done, trying to test the human inputs obtained in my code.</p>
<p>Once again, many thanks for all of the knowledge y'all have shared.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a couple examples,</p>
<ol>
<li><p>Let's say you need to pass a file to a function.  What you really want is a <em>file-like object</em>, which means that you implement the <code>.write()</code> method on any object you like and pass it to the function.  Checking the type of the object is bad, what you need is to verify that the object has the correct interface.</p></li>
<li><p>Let's say you take some numbers out of a numpy array and serialize them to disk in JSON.  Whoops!</p>
<pre><code>import numpy, json
a = numpy.array([1, 2, 3], numpy.uint16)
print(json.dumps(a[0]))
</code></pre>
<p>When you run it,</p>
<pre><code>TypeError: 1 is not JSON serializable
</code></pre>
<p>What? Obviously, 1 <em>is</em> JSON serializable, but that's a 1 with a different type.  Just imagine tracking that kind of error down.  Who knows how long it's been since that number was in a numpy array!</p></li>
</ol>
<p>So you want to do input validation, yes, because this will catch errors earlier before they become problems.  However, you don't want to simply rely on an object's type, because the type system in Python does not express the kind of constraints that you actually want on your inputs.</p>
<p>In other languages, the convention is to express constraints on inputs using the type system.  For example, <em>file-like object</em> could be implemented as a type class or an interface in languages with such concepts.</p>
<p>That said, I think type checking is fine if you really just need an <code>int</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To expand on Simeon Visser's and my comments, input validation should always be done. However, using type checking to validate input is not a good idea, since that implies you're probably using <code>eval()</code> on arbitrary data, and that's a massive security flaw, as explained by SO member Ned Batchelder's article <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow">Eval really is dangerous</a></p>
<p>Input validation should be performed as soon as possible so that you can guarantee that the internal functions of your program only receive sane data which does not require further validation. Having every function validate its arguments is inefficient and bloats the code, making it harder to read and maintain. An analogy: input validation routines are like security guards at the entrance of your program. Once the data has passed the security check, all the functions inside your program can assume that the data is safe.</p>
<p>Duck typing allows you to write functions that are lenient on the type of data they expect. This makes them more flexible and re-usable. So (for example) functions that perform arithmetic shouldn't care about the type of data they receive, only that the data supports the arithmetic operations that the functions perform. This lets you use the same functions not only on ints or floats, but also on more exotic numeric types like fractions, or even polynomials.</p>
</div>
<div class="post-text" itemprop="text">
<p>I disagree with the question that type checking is a bad idea, and I'm not sure why somebody would make such statements. I find type checking rather important, and Python provides many built-in functions to address type related issues. <em>The use of types improves the safety and performance of the code execution by eliminating runtime checks to determine a value's type.</em></p>
<p>Python is a <a href="http://en.wikipedia.org/wiki/Dynamic_programming_language" rel="nofollow">dynamically typed</a> language (and interpreted), in contrast to statically typed languages (which are often compiled). As per Python 3.5 and <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow">PEP 484</a> the language supports <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">type hints</a> in its source code which are yet to be supported by the bytecode interpreter or a compiler.</p>
<p>You may want to read up on the term <a href="http://en.wikipedia.org/wiki/Duck_typing" rel="nofollow">Duck Typing</a>, but also check out the <a href="https://docs.python.org/2/library/functions.html#type" rel="nofollow"><code>type()</code></a> function and other <a href="https://docs.python.org/3.4/library/types.html" rel="nofollow">type related functions</a>.</p>
<p>To illustrate with your examples:</p>
<pre><code>&gt;&gt;&gt; i = 17
&gt;&gt;&gt; type(i) # get the type of variable i
&lt;class 'int'&gt;
&gt;&gt;&gt; float(i) # convert int to float
17.0
&gt;&gt;&gt; f = 17.6
&gt;&gt;&gt; type(f) # get the type of variable f
&lt;class 'float'&gt;
&gt;&gt;&gt; type(f) is float # check if variable f is a float
True
&gt;&gt;&gt; type(f) is int # check if variable f is an int
False
&gt;&gt;&gt; int(f) # convert float to int
17
&gt;&gt;&gt; s = "17.6"
&gt;&gt;&gt; type(s) # get the type of variable s
&lt;class 'str'&gt;
&gt;&gt;&gt; float(s) # convert string s to float (or exception if not possible)
17.6
&gt;&gt;&gt; type( float(s) )
&lt;class 'float'&gt;
</code></pre>
</div>
<span class="comment-copy">Pedantic: 17/6 is a int, 17.0/6 or 17/6.0 is a float</span>
<span class="comment-copy">Input validation should always be done. However, elsewhere in the code duck typing is more important than type checking.</span>
<span class="comment-copy">@Kroltan: <code>from __future__ import division</code></span>
<span class="comment-copy">Python is a <i>dynamically</i> typed language. You may want to read up on the term <a href="http://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">Duck Typing</a>, but also check out the <a href="https://docs.python.org/2/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code></a> function and other <a href="https://docs.python.org/3.4/library/types.html" rel="nofollow noreferrer">type related functions</a>.</span>
<span class="comment-copy">@DietrichEpp Soon, but not quite yet, my comment will be invalid.</span>
<span class="comment-copy">type classes solves #2, serializeable type class.</span>
