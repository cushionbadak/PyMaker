<div class="post-text" itemprop="text">
<p>I am writing a test for some code that checks for a value in <code>os.environ</code> (I know this isn't optimal, but I have to go with it).  I would like to remove an entry from os.environ for the duration of the test.  I am not sure if mock supports this.  I know <code>patch.dict</code> can be used to modify an item, but I want the key/value pair removed.  I would like something along these lines:</p>
<pre><code>print os.environ
{ ... , 'MY_THING': 'foo', ... }

with mock.patch.dict.delete('os.environ', 'MY_THING'):
    # run the test
    # ( 'MY_THING' in os.environ ) should return False

# everything back to normal now    
print os.environ
{ ... , 'MY_THING': 'foo', ... }
</code></pre>
<p>Is there a way to perform such a feat?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html#patch-dict" rel="noreferrer"><code>mock.patch.dict</code></a> doesn't quite work like your sample desired code. <code>patch.dict</code> is a function which requires an argument. You probably want to use it like this:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import mock
&gt;&gt;&gt; with mock.patch.dict('os.environ'):
...     del os.environ['PATH']
...     print 'PATH' in os.environ
...
False
&gt;&gt;&gt; print 'PATH' in os.environ
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For deleting the item, you can simply use:</p>
<pre><code>my_thing = os.environ['MY_THING']  # Gotta store it to restore it later
del os.environ['MY_THING']
</code></pre>
<p>And then restore it with:</p>
<pre><code>os.environ['MY_THING'] = my_thing
</code></pre>
</div>
<span class="comment-copy">mock.patch.dict doesn't work like that, because I made it up :)  Your solution works for me though.</span>
<span class="comment-copy">That seems not very stable.  If the test fails halfway through, I'm stuck with MY_THING deleted from os.environ :(</span>
<span class="comment-copy">Or use <code>my_thing = os.environ.pop('MY_THING')</code> and omit the <code>del</code>.</span>
<span class="comment-copy">If you want it in a form that works with <code>with</code>, create a class <code>DictDelete</code> with a method <code>__enter__</code> that does the deletion, and <code>__exit__</code> that does the restore. Then use <code>with DictDelete()</code>. I'd format it nicely, but comments are limited.</span>
