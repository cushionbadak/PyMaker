<div class="post-text" itemprop="text">
<p>I would like to use an enum to represent an internal state of a class:</p>
<pre><code>#!/usr/bin/python3
from enum import Enum


class testClass:
    class Color(Enum):
        red = 1
        blue = 2
        green = 3

    def __init__(self):
        self.value = 0

    def setValue(self, Color):
        self.value = Color
</code></pre>
<p>this is what I thought could be a possible implementation. The two annoying things that I see are:</p>
<ol>
<li><p>to set <code>value</code> I have to do :</p>
<p><code>q = testClass()</code></p>
<p><code>q.setValue(q.Color.red)</code></p>
<p>and I find the <code>q.Color.red</code> someway umpleasant, I'd rather have something like:<code>Color.red</code> or just <code>red</code>. Maybe the only way to have that is to use some string comparison, but it is exactly what I am trying to avoid using enum.</p></li>
<li><p>I get an extra method that is <code>q.Color.mro</code> that seems like an internal method of the enum class. What is this for? </p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Alternative #1: You can have the <code>Enum</code> class do the string lookup for you:</p>
<pre><code>    def setValue(self, color):
        self.value = self.Color[color]
</code></pre>
<p>Usage:</p>
<pre><code>q = testClass()
q.setValue('red')
</code></pre>
<p>Reference:</p>
<ul>
<li><a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow">https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes</a></li>
</ul>
<hr/>
<p>Alternative #2: If there are no conflicts, you can promote the Enum's members to the parent class:</p>
<pre><code>class testClass:
    class Color(Enum):
        red = 1
        blue = 2
        green = 3
    red = Color.red
    blue = Color.blue
    green = Color.green

    def setValue(self, color):
        self.value = color
</code></pre>
<p>Usage:</p>
<pre><code>q = testClass()
q.setValue(q.red)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your Class Color wont be conflicting with anything else in your application, you can move Color class out of testClass.</p>
<pre><code>#!/usr/bin/python3
from enum import Enum

class Color(Enum):
    red = 1 
    blue = 2 
    green = 3 


class testClass:
    def __init__(self):
        self.value = 0 

    def setValue(self, Color):
        self.value = Color
</code></pre>
<p>Then you will be able to use </p>
<pre><code>q = testClass()
q.setValue(Color.b)
</code></pre>
</div>
<span class="comment-copy">The <code>red</code>/<code>blue</code>/<code>green</code> assignments can be replaced with <code>locals().update(Color.__members__)</code></span>
<span class="comment-copy">Thanks for your answer. Yes, just that the class testClass is defined in another file from the main one. I import testClass with <code>from testClassfile import testClass</code> . If I follow your advice I will have to add also <code>from testClassfile import Color</code>.  I know that maybe I'm too picky but I am trying to find an "elegant" way...</span>
<span class="comment-copy">Well if you want to import is as part of testClass you will have to stick with referencing it as testClass.Color EDIT: For extra style points you can import both classes (if separate) in one line by: from testClassfile import testClass, Color</span>
