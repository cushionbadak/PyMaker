<div class="post-text" itemprop="text">
<p>i have one list with some coordinates in it, when i am printing it like that:</p>
<pre><code>for i in range(0,len(List)):
    print("".join(["(%d, %d) \n" % (y[i], y[i+1]) for y in (List)]))
</code></pre>
<p>the output is this:</p>
<pre><code>(0, 3) 
(0, 2) 
(0, 1) 
(1, 1) 
(1, 2) 
(2, 2) 
(2, 1) 
(3, 1) 
(3, 0) 
(2, 0) 
(1, 0) 
(0, 0)
</code></pre>
<p>i want to save the output in a .txt, but that is not a problem, my problem is that the .txt must be formmated like this:</p>
<pre><code>(0, 3), (0, 2)
(0, 2), (0, 1)
(0, 1),(1, 1)
(1, 1),(1, 2)
(1, 2),(2, 2)
.....
</code></pre>
<p>i've tried many things but nothing worked..
it must be easy, but i am new to python
thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>This does the trick:</p>
<pre><code>l = [(0, 3), (0, 2), (0, 1), (1, 1), (1, 2), (2, 2)]

for i in range(0, len(l), 2):
    print(', '.join([str(l[i]), str(l[i+1])]))

# (0, 3), (0, 2)
# (0, 1), (1, 1)
# (1, 2), (2, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip</code></a>.</p>
<pre><code>mylist = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
# That doesn't have to be the numbers though, you can use your own.

for a, b in zip(mylist, mylist[1:]):
    print("{}, {}".format(a, b), file = myfile) # Will print to myfile.
</code></pre>
<p>That's assuming that you are printing to an open file. Leave the <code>file</code> argument out if you don't want to print anywhere else, but the default screen.</p>
<p>in <code>myfile.txt</code>:</p>
<pre><code>(0, 0), (0, 1)
(0, 1), (0, 2)
(0, 2), (1, 0)
(1, 0), (1, 1)
(1, 1), (1, 2)
(1, 2), (2, 0)
(2, 0), (2, 1)
(2, 1), (2, 2)    
</code></pre>
<p>The output is in tuples, not lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, besides other answers playing with indices, you can also use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a>:</p>
<pre><code>for a, b, c, d in zip(List, List[1:], List[2:], List[3:]):
    print('({}, {}), ({}, {})'.format(a, b, c, d))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regarding expected output:</p>
<pre><code>l = [(0, 3), (0, 2), (0, 1), (1, 1), (1, 2), (2, 2)]

for i,j in zip(l,l[1:]):
    print str(i) + "," + str(j) # or print ",".join([str(i),str(j)])

#output
(0, 3),(0, 2)
(0, 2),(0, 1)
(0, 1),(1, 1)
(1, 1),(1, 2)
(1, 2),(2, 2)
</code></pre>
<p>If you want list chunking with 2 elements,Try this</p>
<pre><code>def chunks(l, n):
    for i in xrange(0, len(l), n):
        yield l[i:i+n]


for i,j in list(chunks(l,2)):
    print ",".join([str(i),str(j)])

#output
(0, 3),(0, 2)
(0, 1),(1, 1)
(1, 2),(2, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code:</p>
<pre><code>for i in range(0,len(List)):
    print("".join(["(%d, %d) \n" % (y[i], y[i+1]) for y in (List)]))
</code></pre>
<p>Turning this into a list comp.</p>
<pre><code>t = ["".join(["(%d, %d) \n" % (y[i], y[i+1]) for y in (List)]) for i in range(0,len(List))]
</code></pre>
<p>(equivalent to)</p>
<pre><code>s = []
for i in range(0,len(List)):
    s.append("".join(["(%d, %d) \n" % (y[i], y[i+1]) for y in (List)]))
</code></pre>
<p>Then:</p>
<pre><code>first = True
other = None
r = ""
for i in t:
    if not first:
        r += other+", "+i+"\n"
        first = True
    else:
        other = i
        first = False
f = open("out.txt","w")
f.write(t)
f.close() #go to notepad
</code></pre>
</div>
<span class="comment-copy">Looks like you want to use <a href="http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python">this answer</a> and group into 4's, then format</span>
<span class="comment-copy">Try not to do complex expressions like that because it isn't very pythonic - at least try to use comments.</span>
<span class="comment-copy">This should work</span>
<span class="comment-copy">thanks, this worked, but instead of (0, 3), (0, 2) i have [0, 3], [0, 2]</span>
<span class="comment-copy">It means you get lists earlier in your code. You can turn the lists into tuples with <code>tuple([0, 3]) # returns (0, 3)</code>.</span>
<span class="comment-copy">This doesn't work. The latter number remains the same.</span>
<span class="comment-copy">when i print my list is like that [[0, 3], [0, 2],......], it's not like the above example  of viod.The viod answer is working but the output is with brackets not parenthesis, and i tried this thing with the tuple</span>
<span class="comment-copy"><code>/n</code> <b>isn't</b> a new line... you're attempting to write to a file that's not opened in <i>write</i> mode... as for the rest of it... needs some work :) (the output won't match what the OP wants, even if the logic is correct - did you test this at all?)</span>
<span class="comment-copy">Bud, what happened to setting your reading options in <code>open</code> and your wrong newline tokens.</span>
