<div class="post-text" itemprop="text">
<p>I want to print out columns of text and I am trying to do this through for loops. I tried using this:</p>
<pre><code>a = 0
while a&lt;58:
    for x in Char[a],Numb[a]:
        print (x)
    a+=2
</code></pre>
<p>but this prints out the two values on separate lines. Is there any way to print it so it comes out like:</p>
<pre><code>A  1
B  2
C  3
D  4
E  5   ...etc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = 0
while a&lt;58:
    print Char[a], Numb[a]
    a+=2
</code></pre>
<p>or if you want, you can add some formatting to make it fixed-width:</p>
<pre><code>a = 0
while a&lt;58:
    print '{0:3} {1}'.format(Char[a], Numb[a])
    a+=2
</code></pre>
<p>and maybe a little cleaner:</p>
<pre><code>for a in xrange(0,58,2):
    print '{0:3} {1}'.format(Char[a], Numb[a])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> and a <code>for</code> loop : </p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; for i,j in enumerate(string.ascii_uppercase,1) :
...    print j,'\t',i #in python 3 print (j,'\t',i)
... 
A   1
B   2
C   3
D   4
E   5
F   6
G   7
H   8
I   9
J   10
K   11
L   12
M   13
N   14
O   15
P   16
Q   17
R   18
S   19
T   20
U   21
V   22
W   23
X   24
Y   25
Z   26
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Some remarks:</p>
<ol>
<li>Rewriting the while loop as a for loop is nicer and makes it less likely to get an infinite loop.</li>
<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a></li>
<li>Unpacking tuples / lists is nice (e.g. <code>a, b = (1, 2)</code>)</li>
<li>Take a look at <a href="http://martin-thoma.com/formatting-strings-python/" rel="nofollow">string formatting with Python</a>, especially the <a href="http://martin-thoma.com/formatting-strings-python/#tocAnchor-1-8" rel="nofollow">columns section</a>. Or simply use <code>\t</code> (the ASCII-symbol for tab).</li>
</ol>
<p>As code, it looks like this:</p>
<pre><code>import string

chars = string.ascii_uppercase
digits = string.digits

for a in range(0, min(len(chars), len(digits)), 2):
    for char, digit in zip(chars[a], digits[a]):
        print("{0:&gt;3} {1:&gt;3}".format(char, digit))
</code></pre>
<p>Formatting options like <code>{i:&gt;n}</code> mean:</p>
<ul>
<li><code>&gt;</code>: Right align (you don't need it. You can also take <code>&lt;</code> or nothing.</li>
<li><code>i</code>: i-th element of the tuple</li>
<li><code>n</code>: n columns in total. This is also not necessary.</li>
</ul>
<p>I usually make something like:</p>
<pre><code>import string

chars = string.ascii_uppercase
digits = string.digits

headers = ["chars", "digits"]
sizes = [(len(el) + 2) for el in headers]
formatter = "{0:&gt;" + str(sizes[0]) + "} {1:&gt;" + str(sizes[1]) + "}"

print(formatter.format(*headers))
print("-"*(sum(sizes) + len(sizes)))
for a in range(0, min(len(chars), len(digits)), 2):
    for char, digit in zip(chars[a], digits[a]):
        print(formatter.format(char, digit))
</code></pre>
<p>which gives</p>
<pre><code>  chars   digits
-----------------
      A        0
      C        2
      E        4
      G        6
      I        8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assume that your two lists have data as follows, then the following code will do the trick</p>
<pre><code># for python3
Char=['A', 'B', 'C', 'D', 'E']    # these lists can have as many elements as you want
Numb=[1,2,3,4,5]

for x,y in zip(Char, Numb):       #zip stops when the shorter list ends
  print (x +" "+ str(y) )
</code></pre>
<p><strong>Output</strong></p>
<pre><code>sh-4.2# python3 main.py                                                                                                                                                         
A 1                                                                                                                                                                             
B 2                                                                                                                                                                             
C 3                                                                                                                                                                             
D 4                                                                                                                                                                             
E 5  
</code></pre>
</div>
