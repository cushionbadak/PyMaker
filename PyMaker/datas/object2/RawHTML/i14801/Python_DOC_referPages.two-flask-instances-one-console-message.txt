<div class="post-text" itemprop="text">
<p>I have two instances of flask running on a <code>LAMP</code> server.  Both are in their own virtual environments.  </p>
<p>I've noticed that if I have both running at once <strong>on different users that aren't root</strong> they work fine from a "web" standpoint but, I only get console messages / debugging from one instance.  </p>
<p>Is there a way I can have both console messages show or such output routed to files?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://flask.pocoo.org/docs/0.10/errorhandling/" rel="nofollow">Flask has a pretty great tutorial when it comes to application logging</a></p>
<p>My personal suggestion is to use something like this </p>
<pre><code>if not app.debug:
    import logging
    from themodule import TheHandlerYouWant
    file_handler = logging.handlers.RotatingFileHandler(
         filename="/var/log/&lt;flask_instance_name&gt;",
         maxBytes=500000000,
         backupCount=4)
    file_handler.setLevel(logging.WARNING)
    app.logger.addHandler(file_handler)
</code></pre>
<p>In this case each file roles over at 500 Mb and there can be 5 copies at once, <code>500 Mb * 5 files = 2.5 Gb * 2 instances = 5 Gb</code> of total potential space utilization on just logs. I'm stressing these numbers because they're kind of important.</p>
<p>A slightly more complicated but overall better approach is to use NTEventLog or SysLog. These are more complicated because they require system changes. For example, SysLog requires UDP port <code>514</code> to be open and listening</p>
<pre><code>if not app.debug:
    import logging
    from themodule import TheHandlerYouWant
    file_handler = logging.handlers.SysLogHandler(address="Instance address")
    file_handler.setLevel(logging.WARNING)
    app.logger.addHandler(file_handler)
</code></pre>
<p>The important part is that the address or filename argument is different for each flask application.</p>
<p>After you've instantiated the logger then anywhere in flask where app is in scope you can call the logger that way. Now you can explicitly control where your log messages are going.</p>
<pre><code>@app.route('/', methods=['GET', 'POST'])
def home_page():
    app.logger.debug("I'm a debugging message going to file {}!".format(
        app.logger.baseFilename))
    return "This is a test home page."
</code></pre>
</div>
<span class="comment-copy">Use Python logging instead of stdout / console messages. Then you can have routed log files, log rotation of whatever you can imagine. <a href="https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial" rel="nofollow noreferrer">docs.python.org/3/howto/logging.html#logging-advanced-tutorial</a></span>
<span class="comment-copy">Did my answer work for you or are you still having problems?</span>
<span class="comment-copy">Aside from @Rawrgulmuffins answering my question with his advice, I also found a small mistake I had made.  In the conf file for the 2nd flask instance, I had basic config that didn't include Proxy pass and proxy pass reverse.  As such, I'd be able to get info from flask in a browser, but not in the console.  Fixing it fixed the console.</span>
<span class="comment-copy">Sorry for the delay, busy day.  I got everything working the way it needed to be.  I also found a bug in my apache2 conf file, in that I had the wrong port in one place.  That, in combination with your advice, fixed it all.  Thank you so much for mentoring me.</span>
<span class="comment-copy">If you have the time you should consider (If it's relevant) adding an explanation for the configuration error you had for future users. And you're welcome.</span>
