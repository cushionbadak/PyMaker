<div class="post-text" itemprop="text">
<p>I am converting a c++ code into python. C++ code reads a binary file and then converts it to a different endianness. I am facing problem doing the same in python. Can someone help me on the same?</p>
<p>Here is the C++ code:</p>
<pre><code>  if( bByteSwap ) // make big-endian
  {
     pHdr = (UDUMPHDR *)buf;
     iAPID = pHdr-&gt;sHdr.ccsdsHdr.sW1.uAPID;
     iType = pHdr-&gt;sHdr.ccsdsHdr.sW7.uFmtID;
     iSeqCnt = pHdr-&gt;sHdr.ccsdsHdr.uiPktSeq;


     for( BYTE *pB=buf; pB&lt;buf+nSz; pB+=2 ) ByteSwap( pB, 2 );
}
else    // already big-endian
{
    ::CopyMemory( buf1, buf, nSz1 ); 

    for( BYTE *pB=buf1; pB&lt;buf1+nSz1; pB+=2 ) ByteSwap( pB, 2 );

    pHdr1 = (UDUMPHDR *)buf1;

    iAPID = pHdr1-&gt;sHdr.ccsdsHdr.sW1.uAPID;
    iType = pHdr1-&gt;sHdr.ccsdsHdr.sW7.uFmtID;
    iSeqCnt = pHdr1-&gt;sHdr.ccsdsHdr.uiPktSeq;
}
</code></pre>
<p>Here, <code>UDUMPHDR</code> is a structure. I am using ctypes in python to create same structure and using <code>fileHandle.readinto(s)</code> function to read the structure from the binary file. Can someone help me on what is the best way to do this?</p>
<p>Currently Written Python Code:</p>
<pre><code>class UDUMPHDR(Union):
_fields_ = [("sHdr", TLEDUMPHDR),
            ("wHdr", WORD * int(sys.getsizeof(TLEDUMPHDR)/2)),
            ("bHdr", BYTE * sys.getsizeof(TLEDUMPHDR))]


hFile = open(myFile, 'rb')
s = UDUMPHDR()

print("Bytes read:", hFile.readinto(s))

#Make it Big Endian
if(bByteSwap):
    print("PktCnt:" + str(s.sHdr.pktHdr.uiPktCnt))
    iAPID = s.sHdr.ccsdsHdr.sW1.uAPID
    iType = s.sHdr.ccsdsHdr.sW7.uFmtID
    iSeqCnt = s.sHdr.ccsdsHdr.uiPktSeq

else:

    buf1 = copy.deepcopy(s)
    iAPID = buf1.sHdr.ccsdsHdr.sW1.uAPID
    iType = buf1.sHdr.ccsdsHdr.sW7.uFmtID
    iSeqCnt = buf1.sHdr.ccsdsHdr.uiPktSeq
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Most of the code that you copied does is a very complicated way of byte-swapping <code>int16_t</code> values. The <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow"><code>struct</code></a> module can readily handle it for you, so you do not need to worry about it.</p>
<p>The real problem there is to read the actual <code>TLEDUMPHDR</code> using its actual layout.
Say, you have a structure with the following layout:</p>
<pre><code>typedef struct TLEDUMPHDR {
    int32_t x;
    int16_t y;
    int16_t z;
} TLEDUMPHDR;
</code></pre>
<p>and you are reading it from little-endian and writing it to big-endian. The <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow">format</a> for that is <code>'ihh'</code>; and the flag for big-endian is <code>&gt;</code>, and the little-endian is <code>&lt;</code>; thus we get:</p>
<pre><code>import struct

buf = bytes([1,2,3,4,5,6,7,8])  # 8 bytes

from_big_endian = struct.unpack('&gt;ihh', buf)
to_little_endian = struct.pack('&lt;ihh', *from_big_endian)
</code></pre>
</div>
<span class="comment-copy">Are you using Python 3 or Python 2? Are you familiar with the <a href="https://docs.python.org/2/library/struct.html" rel="nofollow noreferrer">struct</a> module?</span>
<span class="comment-copy">@PM2Ring I am using Python 3 and know about struct module. But I am not exactly sure how to use it. A little direction would be of great help. t</span>
<span class="comment-copy">@PM2Ring I am using Python3 and know about <code>struct</code> but unfortunately I am not able to make use of it. A little direction would be of great help. Thanks.</span>
<span class="comment-copy">It would help if you posted your current Python code, even if that's mostly just the ctypes structure definitions. (I may not be able to offer much help, since I don't know C++, although I do know C).</span>
<span class="comment-copy">@PM2Ring Added the code. Let me know if you can help. Thanks.</span>
<span class="comment-copy">What if the above structure is a nested structure or has a union member in it?</span>
<span class="comment-copy">It's helpful but still I am not able to resolve struct of structs or struct of unions.  :(</span>
