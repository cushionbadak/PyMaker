<div class="post-text" itemprop="text">
<p>I have a user-defined class 'myclass' that I store on file with the <code>pickle</code> module, but I am having problem unpickling it. I have about 20 distinct instances of the same structure, that I save in distinct files. When I read each file, the code works on some files and not on others, when I get the error:</p>
<pre><code>'module' object has no attribute 'myclass'
</code></pre>
<p>I have generated some files today and some other yesterday, and my code only works on the files generated today (I have NOT changed class definition between yesterday and today). </p>
<p>I was wondering if maybe my method is not robust, if I am not doing things as I should do, for example maybe I cannot pickled user-defined class, and if this is introducing some randomness in the process.</p>
<p>Another issue could be that the files that I generated yesterday were generated on a different machine --- because I work on an academic cluster, I have some login nodes and some computing nodes, that differs by architecture. So I generated yesterday files on the computing nodes, and today files on the login nodes, and I am reading everything on the login nodes.</p>
<hr/>
<p>As suggested in some of the comments, I have installed <code>dill</code> and loaded it with <code>import dill as pickle</code>. Now I can read the files from computing nodes to login nodes of the same cluster. But if I try to read the files generated on the computing node of one cluster, on the login node of another cluster I cannot.  I get <code>KeyError: 'ClassType'</code> in _load_type(name) in dill.py </p>
<p>Can it be because the python version is different? I have generated the files with python2.7 and I read them with python3.3.</p>
<hr/>
<p>EDIT:</p>
<p>I can read the pickled files, if I use everywhere python 2.7. Sadly, part of my code, written in python 3, is not automatically compatible with python 2.7 :(</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you <code>from mymodule import myclass</code>? Pickling does not pickle the class, just a reference to it. To load a pickled object python must be able to find the class that was to be used to create the object.</p>
<p>eg.</p>
<pre><code>import pickle

class A(object):
    pass

obj = A()
pickled = pickle.dumps(obj)

_A = A; del A # hide class

try:
    pickle.loads(pickled)
except AttributeError as e:
    print(e)

A = _A # unhide class
print(pickle.loads(pickled))
</code></pre>
</div>
<span class="comment-copy">Sounds like the python versions/libraries used might have been different.</span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/pickle.html#data-stream-format" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html#data-stream-format</a> - you may need to explicitly set the protocol.</span>
<span class="comment-copy">If the versions of python or the versions of any of the libraries are different, your pickled objects may not translate between machines  (seconding @MarcusMÃ¼ller). When you see <code>'module' object has no attribute 'myclass'</code>, that means that <code>module</code> is being loaded, but the reference to <code>myclass</code> is not being found in it.  This often happens when a package moves a function or a class internally, and leaves a name-reference or (worse) an instance of the class to maintain the backward compatibility.  The error you are seeing is also common for curried functions and references to class instances.</span>
<span class="comment-copy">You could use a serializer (like <code>dill</code>) that has the option of pickling the entire class definition (instead of by reference), and that might insulate you against different versions of python or the library/libraries.  It won't do anything for already built pickles however.</span>
<span class="comment-copy">setting the protocol does not solve my problem, but now I am using <code>dill</code> and it works</span>
<span class="comment-copy">as I said my code work for some files</span>
