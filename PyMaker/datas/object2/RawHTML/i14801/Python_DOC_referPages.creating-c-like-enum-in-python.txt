<div class="post-text" itemprop="text">
<p>Maybe I have already found the answer to this question in that it's not possible, but if there's a nifty trick... I'm all ears.  I'm trying to reproduce the following C enumeration list in python:</p>
<pre><code>enum Id
{
   NONE = 0,
   HEARTBEAT, //0x1
   FLUID_TRANSFER_REQUEST,
   FLUID_TRANSFER_STATUS_MSG,
   FLUID_TRANSFER_ERROR_MSG,
   FLUID_TRANSFER_RESUME,
   EMERGENCY_STOP_MSG,
   LOG_MSG,
   VERSION_REQUEST,
   VERSION_RESPONSE,
   CHANNEL_INFORMATION_REQUEST,
   CHANNEL_INFORMATION_RESPONSE,
   TEST_REQUEST,
   LED_CONTROL_REQ,
   RESET_REQ,

   // Camera App Messages
   START_SENDING_PICTURES = 0x010000,
   STOP_SENDING_PICTURES,
   START_RECORDING_VIDEO_REQ,
   STOP_RECORDING_VIDEO_REQ,
   TAKE_PICTURE_REQ,
   SET_VOLUME_LIMIT,         
   VIDEO_FRAME_MSG,
   PICTURE_MSG,
   I_FRAME_REQUEST,
   CURRENT_VOLUME,
   START_ANALYZING_IMAGES_REQ,
   STOP_ANALYZING_IMAGES_REQ,
   SET_FILE_PATH,

   //Sensor Calibration
   VOLUME_REQUEST = 0x020000,
   START_CAL,
   CLI_COMMAND_REQUEST,
   CLI_COMMAND_RESPONSE,

   // File Mananger
   NEW_DELIVERY_REQ = 0x30000,
   GET_DELIVERY_FILE_REQ,
   GET_FILE_REQ,

   ACK_NACK,
   RESPONSE,

   LAST_ID
};
</code></pre>
<p>However, I don't want to have to specify every value for the list because it's changing often.  Since I also have it set to a new value in the various sections, I can't use the AutoNumber methodology (e.g. VOLUME_REQUEST = 0x020000).  Anyone got a clever trick to reproduce C style enums in python, or am I stuck with reproducing it the hard way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Please see the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow">Python documentation</a> for Python 3.4 if this is applicable. I wrote my code based off of what I found here.</p>
<p>This is mostly a hack because I'm sure there is a much more efficient way to solve what I have done.</p>
<p>Despite this is now marked as Duplicate, I think I can at least solve your problem.</p>
<pre><code>from enum import IntEnum
import re

class AutoNumber(IntEnum):
    def __new__(cls, *args):
        numberList = re.findall(r'\d+', str(cls._member_map_))
        if len(cls.__members__) &gt; 0 and not args:
            prevMax = max(map(int, numberList))
            value = prevMax + 1
            print(format(value, '#04x'))
        else:
            value = args[0]
            print(format(value, '#04x'))

        integer = int.__new__(cls)
        integer._value_ = value
        return integer

class EnumClass(AutoNumber):
   NONE = 0
   HEARTBEAT = () # 0x1
   FLUID_TRANSFER_REQUEST = ()
   # ...

   # Camera App Messages
   START_SENDING_PICTURES = 0x010000
   STOP_SENDING_PICTURES = ()
   START_RECORDING_VIDEO_REQ = ()
   # ...

   # Sensor Calibration
   VOLUME_REQUEST = 0x020000
   START_CAL = ()
   # ...

   # File Mananger
   NEW_DELIVERY_REQ = 0x30000
   GET_DELIVERY_FILE_REQ = ()
   GET_FILE_REQ = ()
   # ...
</code></pre>
<p>This 'enum' outputs are effectively:</p>
<pre><code>0x00 # NONE
0x01
0x02
...
0x10000 # START_SENDING_PICTURES
0x10001
0x10002
...
0x20000 # VOLUME_REQUEST
0x20001
...
0x30000 # NEW_DELIVERY_REQ
0x30001
0x30002
...
</code></pre>
<p>Note, the output is when the item is created using the print statement, it was meant for debug purposes, but it's the nicest way I could get the data to come out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you could use some variant of <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">this</a> in Python 3. For Python 2, I simply did the following (with parentheses to avoid an ugly <code>\</code> at the end of each line):</p>
<pre><code>(T_OR, T_AND, T_NOT,
 T_OPEN_PAREN, T_CLOSE_PAREN,
 T_EQUAL, T_UNEQUAL,
 ...
 T_DEFCONFIG_LIST, T_MODULES, T_VISIBLE) = range(0, 39)
</code></pre>
<p>To handle multiple ranges, just use multiple separate <code>range()</code> assignments. The downside is that you have to specify the final value explicitly.</p>
<p>There seems to be some fancier methods in <a href="https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">How can I represent an 'Enum' in Python?</a> too, but the above should be closest to a C-style <code>enum</code> with minimal syntactic overhead.</p>
<p>Not a serious suggestion, but if you enjoy cryptic code and questionable practices, then the hack below seems to work as well for a C-style <code>enum</code> (with the caveat that the enumerators are always created at module scope). Feel free to harp on it. ;)</p>
<pre><code>def create_var_range(first_val, *names):
    for name in names:
        globals()[name] = first_val
        first_val += 1

create_var_range(0,
                 "NONE",
                 "HEARTBEAT",
                 ...)

create_var_range(0x010000,
                 "START_SENDING_PICTURES",
                 "STOP_SENDING_PICTURES",
                 ...)
</code></pre>
<p><code>create_var_range()</code> steps through its variable argument list of names and creates a variable for each, assigning increasing integer values starting from <code>first_val</code>. It makes use of the <code>globals()</code> function, which return a dictionary with the global symbol table.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a new <a href="https://pypi.python.org/pypi/aenum" rel="nofollow">aenum library</a> by the author of <a href="https://pypi.python.org/pypi/enum34" rel="nofollow"><code>enum34</code></a> which has a few extra goodies (such as a class-based <code>NamedTuple</code> and a <code>Constant</code> class).</p>
<p>One of the cool features available if you are using Python 3 is the built-in auto-numbering:</p>
<pre><code>from aenum import Enum

class Id(Enum, start=0):

    NONE  # 0x0
    HEARTBEAT  # 0x1
    FLUID_TRANSFER_REQUEST
    FLUID_TRANSFER_STATUS_MSG
    FLUID_TRANSFER_ERROR_MSG
    # ...

    # Camera App Messages
    START_SENDING_PICTURES = 0x010000
    STOP_SENDING_PICTURES
    START_RECORDING_VIDEO_REQ
    STOP_RECORDING_VIDEO_REQ
    # ...

    # Sensor Calibration
    VOLUME_REQUEST = 0x020000
    START_CAL
    CLI_COMMAND_REQUEST
    CLI_COMMAND_RESPONSE

    # File Mananger
    NEW_DELIVERY_REQ = 0x30000
    GET_DELIVERY_FILE_REQ
    GET_FILE_REQ

    ACK_NACK
    RESPONSE

    LAST_ID
</code></pre>
<p>and in use:</p>
<pre><code>print(repr(Id.HEARTBEAT))
# &lt;Id.HEARTBEAT: 1&gt;

print(repr(Id.STOP_SENDING_PICTURES))
# &lt;Id.STOP_SENDING_PICTURES: 65537&gt;

print(repr(Id.VOLUME_REQUEST))
# &lt;Id.VOLUME_REQUEST: 131072&gt;
</code></pre>
</div>
<span class="comment-copy">@David, I did see before I posted <a href="http://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">How can I represent an 'Enum' in Python?</a> but I didn't think it answered my specific request in a good way.  I believe the answers below are much better served for this particular request.</span>
<span class="comment-copy">The answers here are a subset of, and a pale imitation, of the answers there. I suggest that you read those answers more closely.</span>
<span class="comment-copy">I just went through those answers, and none of them address the OP's question.  If you are curious about my credentials: I'm the primary author of the <a href="http://docs.python.org/3.4/library/enum.html" rel="nofollow noreferrer">Enum data type</a>, and of the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer">enum34 backport</a>.</span>
<span class="comment-copy">Thanks @Ethan :)</span>
<span class="comment-copy">According to the docs you link to, this code is invalid</span>
<span class="comment-copy">I updated with working code. This is mostly a hack, but effectively works as a self-updating enumeration.</span>
<span class="comment-copy">I'm not a huge fan of the <code>= ()</code> after each enum, but this does the job that I want.  Thanks!</span>
<span class="comment-copy">Thanks! I think this and @Saturisk answers will work for my purposes.  I just need to pick which one I want to use :)</span>
<span class="comment-copy">This is pretty cool and may be the cleanest, simplest solution, but I didn't have the library at the time.  And I believe we were limited to what external libraries we could include.  Nice solution though @Ethan :)</span>
<span class="comment-copy">@ls6777:  Thanks!  If you like it, it's okay to up-vote it.  ;)</span>
<span class="comment-copy">I did upvote, but it won't publicly display until I have 15 rep points ;)</span>
<span class="comment-copy">Ah, okay.  Thanks!</span>
