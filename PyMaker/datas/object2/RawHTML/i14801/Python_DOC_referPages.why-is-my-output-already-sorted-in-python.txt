<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/526125/why-is-python-ordering-my-dictionary-like-so">Why is python ordering my dictionary like so? [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<pre><code>prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}
stock = {
    "banana": 6,
    "apple" : 0,
    "orange": 32,
    "pear": 15
}

for item in prices:
    print item
    print "price: %s" % prices[item]
    print "stock: %s" % stock[item]
</code></pre>
<p>The outout of the following code gives the following output</p>
<pre><code>orange
price: 1.5
stock: 32
pear
price: 3
stock: 15
banana
price: 4
stock: 6
apple
price: 2
stock: 0
None
</code></pre>
<p>I want to ask why is it displayed in this way (in sorted order) . Isn't banana should come first , then apple , orange and pear ?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not sorted. You use a dictionary to store your data. Standard dictionaries in Python are unordered. They basically are a hashmap of keys connected to values. The order you see is the order of keys in the dict's hashmap. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built in sort routine.  There is more information regarding Pythons default routine in this Stack Overflow post.<br/>
<a href="https://stackoverflow.com/questions/5679161/python-sort-algorithm">Python Sort Algorithm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>an unordered dictionary is most probably implemented as a  <a href="http://en.wikipedia.org/wiki/Hash_table" rel="nofollow">hash table</a> (in fact, the Python <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow">documentation</a> states this outright) where the order of elements is well-defined but not immediately obvious. Your observations match the rules of a hash table perfectly: apparent arbitrary, but constant order.</p>
<p>Thanks to @konrad-rudolph</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict</code> doesn't guarantee sorting, it is basically a <a href="http://en.wikipedia.org/wiki/Hash_table" rel="nofollow">Hash Table</a>. </p>
<p>Order is based on <code>hash()</code> function, you may check this in interpreter:</p>
<pre><code>&gt;&gt;&gt; hash('orange') &lt; hash('pear')
True
</code></pre>
<p>To print keys in really sorted order, use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> or apply <code>sorted()</code> while iterating keys:</p>
<pre><code>for item in sorted(prices.keys()):
     ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>Dict</code> has no order.So you can use <code>OrderedDict</code></p>
<pre><code>from collections import OrderedDict
for i, j in  OrderedDict(sorted(prices.items(), key=lambda x:x[1])).items():
    print i, j

orange 1.5
apple 2
pear 3
banana 4
</code></pre>
</div>
<span class="comment-copy">Search for the gazillion other duplicates about ordering in dictionaries...</span>
