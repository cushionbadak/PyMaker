<div class="post-text" itemprop="text">
<p>I have the following structure:</p>
<pre><code>/blog
    /app
        /static
            staticfile.py
        /templates
            templatefile.py
    run.py
</code></pre>
<p>In <code>run.py</code> I have,</p>
<pre><code>from app.static import staticfile

print("you run me")
</code></pre>
<p>In <code>staticfile.py</code> I have, <code>print("ran from staticfile")</code></p>
<p>When I run <code>python run.py</code> I get,</p>
<pre><code>ran from staticfile
you run me
</code></pre>
<p>I do not have <code>__init__.py</code> anywhere and I do not have a virtual environment.  How does my reference work without the <code>__init__.py</code> file? Is it because I'm using Python 3.4? I am in Windows 7 if it matters.</p>
<p>EDIT:  Best I can tell it is because I am in 3.4.  I explicitly used <code>C:\python27\python run.py</code> and it failed until I put <code>__init__.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The 3.4 Glossary has this entry</p>
<blockquote>
<p>namespace package</p>
<p>A PEP 420 package which serves only as a container for subpackages.
  Namespace packages may have no physical representation, and
  specifically are not like a regular package because they have no
  <strong>init</strong>.py file.</p>
</blockquote>
<p>From my reading of the PEP, directories contained in directories on <code>sys.path</code> but not containing <code>__init__.py</code> are potential namespace directories.  When <code>run.py</code> is run, <code>'.'</code>, representing <code>/blog</code>, is added to the front of <code>sys.path</code>.  Therefore, the directories in `/blog' are searched as potential namespace directories.</p>
<p>The PEP also says</p>
<blockquote>
<p>If a developer knows that her package will never be a portion of a
  namespace package, then there is a performance advantage to it being a
  regular package (with an <strong>init</strong>.py ).  Creation and loading of a regular 
  package can take place immediately when it is located along the path.
  With namespace packages, all entries in the path must be scanned
  before the package is created.</p>
</blockquote>
<p>In other words, every directory on <code>sys.path</code> is searched for possibly other modules in the <code>app.static</code> package, instead of stopping with <code>'.'</code> (<code>/blog</code>). I would go ahead and add the <code>__init__.py</code> files that you thought were required. </p>
<p>The PEP also noted the possible surprise effect.</p>
<blockquote>
<p>Note that an ImportWarning will no longer be raised for a directory
  lacking an <strong>init</strong>.py file. Such a directory will now be imported as
  a namespace package, whereas in prior Python versions an ImportWarning
  would be raised.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Yes, as of <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow" title="Python 3.3">Python 3.3</a> you do not need to include <code>__init__.py</code> in your packages. Please see <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow">PEP 420</a> for more details.</p>
</div>
<span class="comment-copy">Yes.  Thank you.</span>
