<div class="post-text" itemprop="text">
<p>If I have a list with say <code>[7,6,5,4,3,2,1]</code> how can I make it add upp every second number, for instance <code>7 + 5 + 3 + 1</code>?</p>
<p>I've tried adding <code>mylist[0] + mylist[2]</code> etc but it is very tedious.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sum(mylist[::2])
</code></pre>
<p>the <code>mylist[::2]</code> takes every other item, and <code>sum</code> sums it.</p>
<p>If you want to have the first, third, fifth et cetera item, you can use:  </p>
<pre><code>sum(list[1::2])
</code></pre>
<p>This will first omit the first item (with the <code>1</code> part), then do the same as in the first command.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to create a new list you can use xrange adding every even indexed element:</p>
<pre><code>l = [7,6,5,4,3,2,1]

print(sum(l[i] for i in xrange(0, len(l), 2)))
</code></pre>
<p>Or use <code>itertools.islice</code>:</p>
<pre><code>sum(islice(l, 0, None, 2))
</code></pre>
<p>Some timings show islice wins on time and space using python2:</p>
<pre><code>In [14]: timeit sum(islice(l, 0, None, 2))
10 loops, best of 3: 123 ms per loop

In [15]: timeit sum(l[i] for i in xrange(0,len(l), 2))
1 loops, best of 3: 363 ms per loop

In [16]: timeit sum(l[::2])
10 loops, best of 3: 148 ms per loop
</code></pre>
<p>And they all return the same result:</p>
<pre><code>In [21]: sum(islice(l, 0, None, 2))
Out[21]: 24999995000000

In [22]: sum(l[i] for i in xrange(0,len(l), 2))
Out[22]: 24999995000000

In [23]: sum(l[::2])
Out[23]: 24999995000000
</code></pre>
</div>
<span class="comment-copy">You can use <code>sum(mylist[1::2])</code> to add every odd items.</span>
<span class="comment-copy">@Aaron You're absolutely right. I changed it :)</span>
<span class="comment-copy">Note: if you are dealing with huge lists or you are already memory constrained you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> instead of plain slicing: <code>sum(islice(mylist, 0, len(mylist), 2))</code>. This will only take as much memory as one element instead of creating a whole copy.</span>
