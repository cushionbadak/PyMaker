<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16083791/alternative-to-contextlib-nested-with-variable-number-of-context-managers">Alternative to contextlib.nested with variable number of context managers</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have an array of files:</p>
<pre><code>    part_files = [open(name, "w+") for name in part_names]
    ...
    [part.close() for part in part_files]
</code></pre>
<p>I would like to close them in a guaranteed manner even when there is an exception in between.</p>
<p>I am aware of two ways, namely <code>try catch finally</code> and <code>contextlib.nested</code> however I'd like to know which is preferred and would work on both 2.7 and 3.0. From what I understand <code>contextlib.nested</code> is deprecated in 3.0</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3.3+, you could use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow"><code>contextlib.ExitStack</code></a>.
In Python2 (or older versions of Python3), you could use <a href="http://contextlib2.readthedocs.org/en/latest/#contextlib2.ExitStack" rel="nofollow">contextlib2.ExitStack</a>, which is installable with</p>
<pre><code>pip install contextlib2
</code></pre>
<hr/>
<pre><code>try:
    import contextlib
    contextlib.ExitStack
except AttributeError:
    import contextlib2 as contextlib

partnames = ['foo', 'bar', 'baz']
with contextlib.ExitStack() as stack:
    # All opened files will automatically be closed at the end of
    # the with statement, even if attempts to open files later
    # in the list raise an exception
    files = [stack.enter_context(open(name, "w+")) for name in partnames]
    print(files)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>part_files = []
try:
  for name in part_names:
    part_files.append(open(name, "w+"))
  ... do stuff ...
finally:
  for part in part_files:
    part.close()
</code></pre>
<p>If an exception is thrown while opening files, it will still close all the files that have been opened so far</p>
</div>
<span class="comment-copy"><code>contextlib</code> is not deprecated, but <code>contextlib.nested()</code> <i>is</i>, as it won't handle exceptions when opening correctly.</span>
<span class="comment-copy">@MartijnPieters thanks for correcting</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/16083791">Alternative to contextlib.nested with variable number of context managers</a></span>
<span class="comment-copy">Since you open them only for write, isn't it possible to write to the files one after another? I usually hate those questions but do you <i>really</i> need to have them open all at the same time? Otherwise you could use <code>with open(name, "w+") as fileobj:</code> within a foreach loop over the names. Which would actually be the preferred way afaik.</span>
<span class="comment-copy">If you use the try/finally approach, the trick is to use a <code>for</code> loop that has a try/except clause so that you continue after exceptions.</span>
<span class="comment-copy">what does the 3rd line do (counting from 1)?</span>
<span class="comment-copy"><code>contextlib.ExitStack</code> tests for the existence of <code>ExitStack</code> as an attribute of the module <code>contextlib</code>. In Python3.3+ it will already exist. In Python 2 it won't, so an <code>AttributeError</code> will be raised. The <code>AttributeError</code> is caught and handled by the <code>except</code>-suite, which tries to import <code>contextlib2</code>.</span>
<span class="comment-copy">we can say <code>from contextlib import ExitStack</code> to replace lines 2, 3 I guess?</span>
<span class="comment-copy">Yes, you could do that, but then be sure to change <code>except AttributeError</code> to <code>except ImportError</code>.</span>
<span class="comment-copy">This will still not close some files if closing of the others fails.</span>
<span class="comment-copy">@райтфолд doesn't close() not throw anything?</span>
