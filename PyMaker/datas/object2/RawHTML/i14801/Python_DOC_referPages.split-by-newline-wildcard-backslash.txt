<div class="post-text" itemprop="text">
<p>Split by <code>\n</code>wildcard<code>/</code>. I have the following text:</p>
<pre><code>wiring /(cid:3)(cid:9)waərŋ/ noun 1. a network of wires
wisdom tooth /(cid:3)(cid:9)wzdəm tu(cid:11)θ/ noun one of
the four teeth in the back of the jaw
witch  hazel  /(cid:3)(cid:9)wtʃ  (cid:4)hez(ə)l/ noun  a  lotion
made  from  the  bark  of  a  tree
</code></pre>
<p>I want to split it to get the words that are defined, so I want to split by <code>\n./</code>, but when I use </p>
<pre><code>  txt.split('\n./') 
</code></pre>
<p>or</p>
<pre><code>  txt.split('\\n./')
</code></pre>
<p>It just returns <code>txt</code></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.4/library/stdtypes.html?highlight=split#str.split" rel="nofollow"><code>str.split()</code></a> is different from <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow"><code>re.split()</code></a>. <code>.</code> is a simple dot in <code>str.split()</code>, not a wildcard.</p>
<pre><code>s = "I like dogs"
print(s.split('.'))   # Prints ['I like dogs']
</code></pre>
<hr/>
<p>To extract only the "words" like: <code>'wiring', 'wisdom tooth', 'witch  hazel'</code> you can use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expressions</a>: </p>
<pre><code>l = re.findall(r'(.+?)\s*/.*?\n', s)
</code></pre>
<p><code>findall()</code> returns a list with all matches. </p>
<p><code>.</code> matches any non newline character, <code>+</code> matches 1 or more of those. <code>()</code> is a capturing group (the part of the match that will be "stored"). <code>*</code> means 0 or more of the previous. <code>\s</code> is the whitespace character. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is an alternative, although I do think regular expression is the best way to go.</p>
<p>You can first split the <code>\n</code>, iterate the list, find <code>/</code> and split the <code>/</code> to return the first item: </p>
<pre><code>txt = '''wiring /(cid:3)(cid:9)waərŋ/ noun 1. a network of wires
wisdom tooth /(cid:3)(cid:9)wzdəm tu(cid:11)θ/ noun one of
the four teeth in the back of the jaw
witch  hazel  /(cid:3)(cid:9)wtʃ  (cid:4)hez(ə)l/ noun  a  lotion
made  from  the  bark  of  a  tree'''

for line in txt.split('\n'):
    if '/' in line:
        print line.split('/')[0].strip()

wiring
wisdom tooth
witch  hazel
</code></pre>
<p>or list comprehension to do it all at once:</p>
<pre><code>print [line.split('/')[0].strip() for line in txt.split('\n') if '/' in line]

['wiring', 'wisdom tooth', 'witch  hazel']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer your question as posed, the <code>.split()</code> operator needs to be performed on the actual variable. When you enter <code>txt.split(...)</code>, you are actually splitting the variable <code>txt</code>. So, define your text above as a string, then split that string.</p>
<pre><code>textarray = 'wiring...'
textarray.split('\n./')
</code></pre>
</div>
<span class="comment-copy">You realize that this won't match the first word since there is no newline before it. And, the <code>.</code> operator only matches one character.</span>
<span class="comment-copy">@jakekimds <code>.</code> is not an operator in <code>str.split()</code>. It is a simple dot.</span>
<span class="comment-copy">@user5061 It looks like he is trying using regex. However, he must compile it first.</span>
