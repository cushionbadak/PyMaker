<div class="post-text" itemprop="text">
<p>I have the following file <code>app.py</code></p>
<pre><code>class Baz():
    def __init__(self, num):
        self.a = num
        print self.a

def foo(num):
    obj = Baz(num)
</code></pre>
<p>and the second file <code>main.py</code></p>
<pre><code>from app import foo
foo(10)
</code></pre>
<p>Running the file <code>python main.py</code> gives the correct output.</p>
<p>Now in the second file, I'm just importing the function not the class, although successful execution of my function requires the class as well.</p>
<p>When importing the function does Python automatically import everything else which is needed to run that function, or does it automatically search for the class in the current directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>As @DavidZ already mentioned the whole Python file gets compiled when we import it. But another special thing happens when a function body is parsed, a function knows which variables it should look for in local scope and which variables it should look for in global scope(well there are free variables too).  </p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  7           0 LOAD_GLOBAL              0 (Baz)
              3 LOAD_FAST                0 (num)
              6 CALL_FUNCTION            1
              9 STORE_FAST               1 (obj)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE
</code></pre>
<p>So, here <code>Baz</code> must be fetched from global scope.</p>
<blockquote>
<p>But how to identify this global scope when we import app.py in another
  file?</p>
</blockquote>
<p>Well, each function has a special attribute <code>__globals__</code> attached to it which contains its actual global namespace. Hence, that's the source of <code>Baz</code>:</p>
<pre><code>&gt;&gt;&gt; foo.__globals__['Baz']
&lt;class __main__.Baz at 0x10f6e1c80&gt;
</code></pre>
<p>So, app's module dictionary and <code>foo.__globals__</code> point to the same object:</p>
<pre><code>&gt;&gt;&gt;sys.modules['app'].__dict__ is foo.__globals__ 
True
</code></pre>
<p>Due to this even if you define another variable named <code>Baz</code> in <code>main.py</code> after importing <code>foo</code> it will still access the actual <code>Baz</code>.</p>
<p>From <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow">data-model page</a>:</p>
<p><code>__globals__ func_globals</code>:</p>
<blockquote>
<p>A reference to the dictionary that holds the function’s global
  variables — the global namespace of the <strong>module in which the function
  was defined</strong>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python does not automatically do any of these things.</p>
<p>When you import something from a module (in this case, the <code>app</code> module), Python first runs all the code in the corresponding file (<code>app.py</code>). The code in the file <code>app.py</code> which you've written does two things:</p>
<ol>
<li>define the class <code>Baz</code></li>
<li>define the function <code>foo</code></li>
</ol>
<p>When the function <code>foo</code> runs, Python looks for <code>Baz</code> in the module that <code>foo</code> is part of, and only there. (Well, it also checks local variables defined in the function <code>foo</code>, but you don't have any of those except <code>obj</code>.) Specifically, it looks for <code>app.Baz</code>. If you alter your <code>main.py</code> to do the same search:</p>
<pre><code>from app import foo
foo(10)
import app # same app that was already imported
print app.Baz
</code></pre>
<p>you will see that <code>app.Baz</code> is the class you defined in <code>app.py</code>.</p>
<p>If you put the definition of class <code>Baz</code> in yet another file, and if you don't import that file, Python will not run it. This shows that Python does <em>not</em> automatically import dependencies. In particular, suppose <code>app.py</code> contains</p>
<pre><code>def foo(num):
    obj = Baz(num)
</code></pre>
<p>and <code>baz.py</code> contains</p>
<pre><code>class Baz():
    def __init__(self, num):
        self.a = num
        print self.a
</code></pre>
<p>and <code>main.py</code> is unchanged. You'll get an error because Python has not run the code to define the class <code>Baz</code>.</p>
</div>
<span class="comment-copy">This is neat. So I should never put unrelated code in one file if my intention is to just load a single function, because Python will always compile the whole file, right?</span>
<span class="comment-copy">@KartikAnand Python will compile it only once to a <code>.pyc</code> file, later imports simply fetch the bytecode from that same <code>.pyc</code> file until you again update the <code>.py</code> file.</span>
<span class="comment-copy">So if I am not explicitly importing <code>Baz</code>, can I instantiate it by accessing it from <code>__globals__</code> attached to the function?</span>
<span class="comment-copy">@KartikAnand Yes. Well you can access the whole module using <code>import sys;sys.modules['app']</code>. Imports are cached in Python. <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">docs.python.org/3/reference/import.html#the-module-cache</a></span>
<span class="comment-copy">So it's just good practice to import whatever you need instead of accessing it using <code>sys.modules dict</code></span>
<span class="comment-copy">I know about the definition part. When it runs the file, does it store the definition part of the Class in some form in the current file?</span>
<span class="comment-copy">See if my edit helps clarify anything</span>
