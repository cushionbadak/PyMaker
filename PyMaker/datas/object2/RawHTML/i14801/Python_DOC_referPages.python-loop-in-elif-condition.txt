<div class="post-text" itemprop="text">
<p>I'm running Python 3.</p>
<p>Is it possible to put a loop in the condition for <code>elif</code>? Here's the basic idea I'm trying to achieve. The number of items in the list is not constant.</p>
<pre><code>if some_condition:
    do this
elif [ x.method() for x in list ]:
    do this to x
else:
    do something else
</code></pre>
<p>Now, this comes to my mind:</p>
<pre><code>if some_condition:
    do this
for x in list:
    if x.method():
        do this to x
        break
</code></pre>
<p>But I'm trying to avoid running all the if statements, there's a lot of stuff going on in them. And I would like to get it in the <code>elif</code> part specifically and not in <code>else</code>.</p>
<h2>Edit / more clarification:</h2>
<p>It seems what I would need is <code>any( x.method() for x in list )</code> but also with a reference to <code>x</code> so that I can then use <code>x</code> if the condition was true.</p>
<p>Here's the whole concept I'm trying to get again:</p>
<pre><code>if condition:
    do this
elif list[0].method():
    do this to list[0]
elif list[1].method():
    do this to list[1]
...
elif list[n].method():
    do this to list[n]
else:
    do this
</code></pre>
<p>where <code>method()</code> is some method that returns <code>True</code> or <code>False</code>, and <code>n</code> is the size of the list and not a constant.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think what you want -- to have it entirely in the <code>elif</code> -- is possible. You'd have to evaluate whether there is <code>any</code> such value in the list, and then bind it to <code>x</code> <em>in the condition</em>. As far as I know, this is not possible in Python's syntax. <a href="https://docs.python.org/2/reference/compound_stmts.html#the-if-statement" rel="nofollow">You can not do an assignment in the condition</a>, and while the loop variable in a list comprehension <em>can</em> "leak" to the outside scope, the same is <em>not</em> true for a generator.</p>
<pre><code>&gt;&gt;&gt; if any(x for x in range(10) if x &gt;= 5):
...     print x
NameError: name 'x' is not defined
&gt;&gt;&gt; if any([x for x in range(10) if x &gt;= 5]):
...     print x
9
</code></pre>
<p>In the second case (list), we have a reference to <code>x</code>, but it is the last value from the entire list, and in the first case (generator), <code>x</code> can not be resolved at all.</p>
<hr/>
<p>Instead, here's another variant, using a generator expression to combine the <code>for</code> with the <code>if</code>, and adding an <code>else</code> to the <code>for</code> to enumate your final <code>else</code> clause.</p>
<pre><code>if some_condition:
    print "do this"
else:
    for x in (x for x in lst if foo(x)):
        print "do this to", x
        break
    else:
        print "do something else"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>if [ x.method() for x in list ]:
</code></pre>
<p>You ask, is it possible? Yes. What does it do, though? Probably not what you intend.</p>
<p>For the number of items in <em>list</em>, it will fabricate one value in the resulting list. For list values, only a list of zero length will be False. [False, False, False] is True, so the body of the condition will be executed.</p>
<p>You may be looking for <strong>all()</strong> or <strong>any()</strong> if <em>x.method()</em> is supposed to influence the following condition decision.</p>
<pre><code>if all(x.method() for x in list):   # will require that every *x.method* call return truth.
</code></pre>
<p>Likewise, you may want </p>
<pre><code>if any(x.method() for x in list):   # only one required. May not do every .method if it can stop early. Beware side-effects.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I see now. The Pythonic way of doing what your updated edit says is to make a for loop and break out after you find your first item and act on it, and use the almost unknown and unused "else" of a loop. </p>
<p>Since the "for / else" idiom is so rarely used, you will need to add a comment about it, for future readers.</p>
<pre><code>if some_test:
    first_action()
else:
    for item in list:
        if item.method():
            do_this(item)
            break   # process no more of list
    else:   # for-else only entered if no break from the list!
        final_action()
</code></pre>
<p>Read up on <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops%20loop%20elses" rel="nofollow">loop elses in the Python Tutorial</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not exactly possible to do what you want, but you can do something similar with list comprehensions:</p>
<pre><code>if some_condition:
    do this
else:
    res = [x for x in list if x.method()]
    if res:
        do something to res[0]
    else:
        do something else
</code></pre>
<p>To avoid do <code>x.method()</code> for every value, you could also use <code>itertools.dropwhile</code>.  The following approach will keep checking <code>x.method()</code> until it finds one that is true, then stop and return just that value of <code>x</code>.  If it doesn't find any that are true, it will do something else.</p>
<pre><code>from itertools import dropwhile
if some_condition:
    do this
else:
    try:
        res = next(dropwhile(lambda x: not x.method(), x))
        do something to res
    except StopIteration:
        do something else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This could work as long as you don't need a reference to x outside of the elif block. This feels closest to the syntax you are asking for, but I would still probably go with either Kevin or Tobias's answers as they are more explicit and readable.</p>
<pre><code> def check_and_do(x):
    b = x.method()
    if b:
        do this to x
    return b

if condition:
    do this
elif any(check_and_do(x) for x in list):
    pass  # Already did this to x in check_and_do
else:
    do something else
</code></pre>
</div>
<span class="comment-copy">Could you provide a concrete example of what you're trying to do? What are the contents of <code>list</code>? What is <code>some_condition</code>? What is <code>do this</code>? What is <code>x.method()</code>? What is <code>do this to x</code>? What is <code>do something else</code>? Exactly what output do you expect to see?</span>
<span class="comment-copy">@Kevin I added another clarification of the concept, maybe the clearest so far, I guess.</span>
<span class="comment-copy">If you take a look at the last clarification I added to the question (which I think is the clearest so far), would you say it's not possible? But thanks for the <code>for ... else</code>, I totally forgot about that one (naturally). It's close enough to what I need.</span>
<span class="comment-copy">@tobias_k  Just an update, I have tried second case in python 3.6, it is not working</span>
<span class="comment-copy">@BhargavKatkam Right, that "leaking out of a list comprehension" thing was fixed in Python 3. Note, however, that it did not "work" in Python 2, either, as <code>x</code> will have the last value from the list, which is evaluated entirely before the <code>any</code> is applied.</span>
<span class="comment-copy">This does not give you a reference to <code>x</code>, so you basically would have to do it all again to find the right <code>x</code></span>
<span class="comment-copy">Yes, what I would like to have is <code>any()</code> but with a reference to x.</span>
<span class="comment-copy">Very true, and that's what was already suggested. I did totally forget about that one.</span>
<span class="comment-copy">This will execute <code>x.method</code> for all <code>x</code></span>
<span class="comment-copy">So would the syntax that the question proposed, if it worked.</span>
<span class="comment-copy">But if you read the question and examine the examples, you see that OP does not want to execute it for each <code>x</code> and that he <code>break</code>s after the first match.</span>
<span class="comment-copy">It is not clear to me, but anyway I have added a variant that does not have this issue.</span>
<span class="comment-copy">I thought of that <code>try/except</code> hack, too, but you do not need <code>dropwhile</code>. Just do <code>next(x for x in list if x.method())</code></span>
