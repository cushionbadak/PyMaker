<div class="post-text" itemprop="text">
<p>I have a large list containing many dictionaries. Within each dictionary I want to iterate over 3 particular keys and then dump into a new list. The keys are the same for each dict. </p>
<p>For example, I'd like to grab keys c, d, e from all the dicts in List below, output to List2.</p>
<pre><code>List = [{'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6...},
        {'a':10, 'b':20, 'c':30, 'd':40, 'e':50, 'f':60...},
        {'a':100, 'b':200, 'c':300, 'd':400, 'e':500, 'f':600...},]

List2 = [{'c':3, 'd':4, 'e':5},
         {'c':30, 'd':40, 'e':50},
         {'c':300, 'd':400, 'e':500}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested dict comprehension:</p>
<pre><code>keys = ('c', 'd', 'e')
[{k: d[k] for k in keys} for d in List]
</code></pre>
<p>If those keys <em>may</em> be missing, you can use a <a href="https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects">dictionary view object</a> (<a href="https://docs.python.org/2/library/stdtypes.html#dict.viewkeys"><code>dict.viewkeys()</code></a> in Python 2, <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys"><code>dict.keys()</code></a> in Python 3) to find an intersection to only include keys that are actually present:</p>
<pre><code>keys = {'c', 'd', 'e'}
[{k: d[k] for k in d.viewkeys() &amp; keys} for d in List]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; List = [{'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6},
...         {'a':10, 'b':20, 'c':30, 'd':40, 'e':50, 'f':60},
...         {'a':100, 'b':200, 'c':300, 'd':400, 'e':500, 'f':600}]
&gt;&gt;&gt; keys = ('c', 'd', 'e')
&gt;&gt;&gt; [{k: d[k] for k in keys} for d in List]
[{'c': 3, 'e': 5, 'd': 4}, {'c': 30, 'e': 50, 'd': 40}, {'c': 300, 'e': 500, 'd': 400}]
&gt;&gt;&gt; List = [{'a':1, 'b':2, 'd':4, 'e':5, 'f':6},
...         {'a':10, 'b':20, 'c':30, 'd':40, 'f':60},
...         {'a':100, 'b':200, 'e':500, 'f':600}]
&gt;&gt;&gt; keys = {'c', 'd', 'e'}
&gt;&gt;&gt; [{k: d[k] for k in d.viewkeys() &amp; keys} for d in List]
[{'e': 5, 'd': 4}, {'c': 30, 'd': 40}, {'e': 500}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this code:</p>
<pre><code>keys = ['c', 'd']  
for dictionary in List1:
        d = {}
        for key in dictionary:
            if key in keys:
                d[key] = dictionary[key]
        List2.append(d)
</code></pre>
</div>
<span class="comment-copy">It seems that working with <code>pandas</code> <code>DataFrame</code> would be convenient for something like this, each dict keys would be column names, and values rows.</span>
<span class="comment-copy">Thanks Martijn for the fast response, worked perfectly. I also tried Rafael's answer but could not get it to work. I don't understand nested dict comprehension yet, it is really efficient... I am new to Python.</span>
<span class="comment-copy">Why loop over the larger number of dictionary keys here rather than the smaller <code>keys</code> sequence? Also, testing for a key in a dictionary is O(1) constant cost vs. the O(N) cost of testing against a list, so you are picking the worst of performance options by looping over the dictionary here.</span>
<span class="comment-copy">Yes, you are right. Your method is much better.</span>
