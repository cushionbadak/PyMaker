<div class="post-text" itemprop="text">
<pre><code>Traceback (most recent call last):
line 56, in &lt;module&gt;
    distanceToOne = point1.Distance(pointUser)
line 22, in Distance
    distance = math.sqrt((self.__x - toPoint.x)**2 +(self.__y - toPoint.y)**2 +(self.__z - toPoint.z)**2)
AttributeError: 'Point' object has no attribute 'x'
</code></pre>
<p>For some reason I keep getting the above error message whenever I get to: <code>distanceToOne = point1.Distance(pointUser)</code> after grabbing my three points to calculate the distance from.</p>
<p>Here is a better view if needed: <a href="http://pastie.org/private/vige6oaphkwestdemr5uw" rel="nofollow">http://pastie.org/private/vige6oaphkwestdemr5uw</a></p>
<p>Thanks in advance for your help!</p>
<pre><code>import math
class Point(object):
    def __init__(self, x = 0, y = 0, z = 0, description = 'TBD'):
        self.__x = x
        self.__y = y
        self.__z = z
        self.__description = description

    def SetPoint(self, coords):
        self.__x = coords[0]
        self.__y = coords[1]
        self.__z = coords[2]

    def GetPoint(self):
        return [self.__x, self.__y, self.__z]
    PointCoords = property(GetPoint, SetPoint)

    def Distance(self, toPoint):
        toPoint.PointCoords[0]
        toPoint.PointCoords[1]
        toPoint.PointCoords[2]
        return math.sqrt(
            (self.__x - toPoint.x)**2 +
            (self.__y - toPoint.y)**2 +
            (self.__z - toPoint.z)**2)

    def SetDescription(self, description):
        self.__description = description

    def GetDescription(self):
        return self.__description
    PointDescription = property(GetDescription, SetDescription)

if __name__ == "__main__":
    print "Program 9: Demonstrate how to define a class"

    point2 = Point()
    point1 = Point(10, 54, 788, 'Ploto')
    point2.PointCoords = 77, 2, 205
    point2.PointDescription = 'Mars'
    doAnother = "y"
    while(doAnother == "y"):
        pointX = raw_input("Enter a X Number: ")
        pointY = raw_input("Enter a Y Number: ")
        pointZ = raw_input("Enter a Z Number: ")

        # Constructor - Represent the user's location
        pointUser = Point(pointX, pointY, pointZ, 'Sun')

        distanceToOne = point1.Distance(pointUser)
        distanceToTwo = point2.Distance(pointUser)

        # Comparing the two distances between the two to see which one is the closest
        if (distanceToOne &gt; distanceToTwo):
            closest = point2
        else:
            closest = point1
            print ('You are closest to',closest.PointDescription(), 'which is located at ',closest.PointCoords())
        doAnother = raw_input("Do another (y/n)? ").lower()
    print ('Good Bye!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The actual error is due to accessing <code>toPoint.x</code>, which doesn't exist because you have never defined it.</strong> </p>
<p>On a related note, prepending attributes with double underscores activates pythons <a href="https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references" rel="nofollow">name mangling</a> feature.  The actual attributes will still be publicly accessible at <code>my_point._Point__x</code>, <code>my_point._Point__y</code>, etc from outside the class.  </p>
<p>As a matter of style, there does not seem to be any reason to use name mangling in this case.  The intended use-case of this feature is to avoid clashes with inherited classes, it's not really about trying to make "private" variables (for that, the convention is to use a single underscore to indicate when an attribute is implementation detail).  </p>
<p>In your case, I think you should just name (and access) the attributes normally <code>x</code>, <code>y</code>, etc.  In python we don't normally write getters and setters for class members unless there is a special requirement to do so, because <a href="http://dirtsimple.org/2004/12/python-is-not-java.html" rel="nofollow">Python is not Java</a>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>In the return line of Distance(), __x instead of x (same for y and z), since the instances of the Point class do not have x, y z attributes but they do have __x, __y, __z attributes.
â€‹</p>
<pre><code>def Distance(self, toPoint):
    toPoint.PointCoords[0]
    toPoint.PointCoords[1]
    toPoint.PointCoords[2]
    return math.sqrt(
        (self.__x - toPoint.__x)**2 +
        (self.__y - toPoint.__y)**2 +
        (self.__z - toPoint.__z)**2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make the <code>x</code>, <code>y</code> and <code>z</code> attributes of your Point class publicly accessible. If you want the client to be able to read but not write to them, you can use a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow">property</a>. For example:</p>
<pre><code>class Point(object):
    def __init__(self, x = 0, y = 0, z = 0, description = 'TBD'):
        self.__x = x
        self.__y = y
        self.__z = z
        self.__description = description

    @property
    def x(self):
        return self.__x

    @property
    def y(self):
        return self.__y

    @property
    def z(self):
        return self.__z

    ...
</code></pre>
<p>You can then access x, y and z without the leading underscores and your Distance function should work.</p>
<pre><code>&gt;&gt;&gt; p = Point(1, 2, 3, 'Dummy')
&gt;&gt;&gt; p.x
1
&gt;&gt;&gt; p.y
2
&gt;&gt;&gt; p.z
3
&gt;&gt;&gt; p.x = 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This example uses the namedtuple class from collections.  I've also re-written the class to implement it (it should still work with your existing program).</p>
<p>Also note that python generally does not use setters or getters.  In fact. you set the description directly in your program (as you should) rather than having used your setter function.</p>
<pre><code>import math
from collections import namedtuple

point = namedtuple('point', ['x', 'y', 'z'])

class Point(object):
    def __init__(self, x=0, y=0, z=0, description='TBD'):
        self.point = point(x, y, z)
        self.__description = description

    def __repr__(self):
        return str(self.point)

    def set_point(self, coords):
        self.point = point(coords)

    def get_point(self):
        p = self.point
        return p.x, p.y, p.z

    def distance(self, toPoint):
        p = toPoint.point
        return math.sqrt(
            (self.point.x - p.x)**2 +
            (self.point.y - p.y)**2 +
            (self.point.z - p.z)**2)

    def set_description(self, description):
        # Python generally does not use getters/setters.
        self.description = description

    def get_description(self):
        # Python generally does not use getters/setters.
        return self.description
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do it is to unpack <code>toPoint.PointCoords</code> into local variables like this:</p>
<pre><code>def Distance(self, toPoint):
    x, y, z = toPoint.PointCoords
    return math.sqrt(
        (self.__x - x)**2 +
        (self.__y - y)**2 +
        (self.__z - z)**2)
</code></pre>
</div>
<span class="comment-copy">unrelated but another bug in this program comes from the fact that pointX, pointY and pointZ will be str instead of numbers ... so you won't be able to do the subtraction on line 22.</span>
<span class="comment-copy">3 more bugs: line 59, the print statement has the wrong indentation (should have same indentation as if statement), line 59 PointDescription and PointCoords are not callable =&gt; no parenthesis</span>
<span class="comment-copy">I agree that there is no need for name mangling, however, such attributes are still accessible without name mangling within instances of the same class.</span>
<span class="comment-copy">@mhawke thanks for the comment, you are correct (and I didn't know this!).  I will edit the post</span>
<span class="comment-copy">This will not work because the <code>toPoint</code> is name-mangled.</span>
<span class="comment-copy">ok ... Good to know. I'll delete my answer.</span>
<span class="comment-copy">@wim actually, I've just tried and it seems to work (except that there is another bug where the OP mixes int and str)</span>
<span class="comment-copy">I was able to finally get it working this way, just had to make self.__x = int(x), self.__y = int(y), self.__z = int(z) in <b>init</b> then move the 2nd to last print out of the else statement was good to go.</span>
<span class="comment-copy">@wim: This does work. For instances of the same class, you can still access the attributes named with leading double underscore within the class.</span>
