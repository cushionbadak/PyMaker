<div class="post-text" itemprop="text">
<p>I have the contains method in my Sentence class that checks if a word is in a sentence(string in my case) </p>
<p>I tried to check in my <code>functionTesting</code> if <code>hello</code> exist in <code>hello world</code> and I got this error instead:</p>
<pre class="lang-none prettyprint-override"><code>AttributeError: 'Sentence' object has no attribute 'contains'
</code></pre>
<p>here is my code</p>
<pre><code>class Sentence:

    def __init__(self, string):
        self._string = string

    def getSentence(self):
        return self._string

    def getWords(self):
        return self._string.split()

    def getLength(self):
        return len(self._string)

    def getNumWords(self):
        return len(self._string.split())

    def capitalize(self):
        self._string = self._string.upper()

    def punctation(self):
        self._string = self._string + ", "

    def __str__(self):
        return self._string

    def __getitem__(self, k):
        return k

    def __len__(self):
        return self._String

    def __getslice__(self, start, end):
        return self[max(0, i):max(0, j):]

    def __add__(self, other):
        self._string = self._string + other._string
        return self._string

    def __frequencyTable__(self):
        return 0

    def __contains__(self, word):
        if word in self._string:
            return True  # contains function!!##


def functionTesting():
    hippo = Sentence("hello world")
    print(hippo.getSentence())
    print(hippo.getLength())
    print(hippo.getNumWords())
    print(hippo.getWords())

    hippo.capitalize()
    hippo.punctation()

    print(hippo.getSentence())

    print(hippo.contains("hello"))


functionTesting()
</code></pre>
<p>How do you call the <code>__contains__</code> function? Did I make a mistake in the class method function or did I make a mistake in the <code>functionTesting</code> when calling it? I am expecting to get <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting the documentation of <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow"><code>__contains__</code></a>,</p>
<blockquote>
<p>Called to implement membership test operators. Should return true if <strong><code>item</code> is in <code>self</code></strong>, false otherwise. For mapping objects, this should consider the keys of the mapping rather than the values or the key-item pairs.</p>
<p>For objects that donâ€™t define <code>__contains__()</code>, the membership test first tries iteration via <code>__iter__()</code>, then the old sequence iteration protocol via <code>__getitem__()</code></p>
</blockquote>
<p>So, it will be invoked when used with the membership testing operator, <code>in</code>, and you should use it like this</p>
<pre><code>print("hello" in hippo)
</code></pre>
<p><strong>Important Note:</strong> Python 3.x, doesn't have <code>__getslice__</code> special method at all. Quoting <a href="https://docs.python.org/3.0/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow">Python 3.0 Change log</a>,</p>
<blockquote>
<p><code>__getslice__()</code>, <code>__setslice__()</code> and <code>__delslice__()</code> were killed. The syntax <code>a[i:j]</code> now translates to <code>a.__getitem__(slice(i, j))</code> (or <code>__setitem__()</code> or <code>__delitem__()</code>, when used as an assignment or deletion target, respectively).</p>
</blockquote>
<p>So, you cannot invoke it with the slicing syntax.</p>
<hr/>
<blockquote>
<p>I am expecting to get True.</p>
</blockquote>
<p>No. You cannot get <code>True</code>, because you already called <code>hippo.capitalize()</code> before the membership test. So, your <code>self._string</code> is <code>HELLO WORLD,</code> by the time membership test is happening. So, you will actually get <code>False</code>.</p>
<p><strong>Note 1:</strong> In Python, boolean values are represented with <code>True</code> and <code>False</code>. But in your <code>__contains__</code> function you are returning <code>true</code> which will raise <code>NameError</code> at runtime. You can better write it succinctly like this</p>
<pre><code>def __contains__(self, word):
    return word in self._string
</code></pre>
<p><strong>Note 2:</strong> Also in your <code>__getslice__</code> function,</p>
<pre><code>def __getslice__(self, start, end):
    return self[max(0, i):max(0, j):]
</code></pre>
<p>you are using <code>i</code> and <code>j</code> which are not defined. Perhaps you wanted to use <code>start</code> and <code>end</code> like this</p>
<pre><code>def __getslice__(self, start, end):
    return self[max(0, start):max(0, end):]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can call the <code>__contains__</code> function by using <code>in</code> keyword</p>
<p>like </p>
<pre><code>print "hello" in hippo
</code></pre>
</div>
<span class="comment-copy">You are right about Note 2. Have not debugged those functions yet. Thank you</span>
<span class="comment-copy">Note: if the OP is really using python3 then <code>__getslice__</code> is useless because it was removed. It should be implemented inside <code>__getitem__</code> by checking that the index is a <code>slice</code> object. See <a href="https://docs.python.org/3/reference/datamodel.html?highlight=special%20methods#specialnames" rel="nofollow noreferrer">here</a> for the list of python3 special methods.</span>
<span class="comment-copy">@Bakuriu Thanks :-) I included that as an important note and the change log reference in the answer.</span>
