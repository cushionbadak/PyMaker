<div class="post-text" itemprop="text">
<p>I'm trying to write a nested loop that prints out all possible "unique pairs" of numbers from a certain range. For example, if the range was from 1 to 3 the unique pairs would be:</p>
<p>(1,2)
(1,3)
(2,3)</p>
<p>If the range was from 1 to 4 the unique pairs would be:</p>
<p>(1,2)
(1,3)
(1,4)
(2,3)
(2,4)
(3,4)</p>
<p>Here's how I did it for 1 to 3:</p>
<pre><code>for i in range(1,4):
    for j in range(2,4):
        if (i != j &amp; j != (i-1)):
            print (i,j)
</code></pre>
<p>which prints out (1, 2), (1, 3),(2, 3). But this is a hack because it doesn't work when I change the range to 1,5. It prints out duplicate pairs such as (1,5) and (5,1).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="noreferrer"><code>itertools.combinations()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; print list(itertools.combinations(range(1, 5), r=2))
[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
</code></pre>
<p>As long as your inputs are unique, there will be no repeated combinations:</p>
<blockquote>
<p><code>itertools.combinations(iterable, r)</code></p>
<p>Return <code>r</code> length subsequences of elements from the input <code>iterable</code>.</p>
<p>Combinations are emitted in lexicographic sort order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.</p>
<p>Elements are treated as unique based on their position, not on their
  value. So if the input elements are unique, <strong>there will be no repeat
  values in each combination</strong>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(1,4):
    for j in range(i+1,4):  # &lt;-- the key is to make j start at i+1
        print (i,j)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably looking for something like this:</p>
<pre><code>n = 4
x = [(i,j) for i in range(1,n+1) for j in range(i+1, n+1)]
print x
</code></pre>
<p>Cheers,
Alex</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.combinations</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; print list(combinations(range(1,4), 2))
[(1, 2), (1, 3), (2, 3)]
</code></pre>
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="noreferrer">Python 2 Documentation</a></p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="noreferrer">Python 3 Documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow">itertools</a> module. </p>
<p>Maybe what you want is</p>
<pre><code>list(itertools.combinations(range(1,4),2)) == [(1, 2), (1, 3), (2, 3)]
</code></pre>
</div>
<span class="comment-copy">Why <code>n+1</code>? Isn't <code>n+1</code> just 5? Maybe I'm misunderstanding something here?</span>
<span class="comment-copy">You need n+1 because range (i, j) goes from i to j - 1. So if we used (1, n) we would have 1 to n - 1. So if n was 4, then we would be missing 4, we would only have 1, 2 and 3.</span>
<span class="comment-copy">@AlexandruGodri I think he is asking why not replace all <code>n+1</code>'s with 5's.</span>
<span class="comment-copy">Because i wrote it for a general purpose. You just change the "n" to whatever and the code works :)</span>
