<div class="post-text" itemprop="text">
<p>I have a <code>class Sentence</code> with a magic method function <code>__getslice__</code></p>
<p>I am not understanding how to call that function ? </p>
<p>I am trying to do slicing of words. so for example if the string is <code>"HELLO WORLD, james"</code> , and I slice it at [0:1] , I expect to get <code>"HELLO"</code></p>
<p>I am getting instead this error: <code>'method' object is not subscriptable</code></p>
<p>Here is my code:
</p>
<pre><code>    class Sentence:
        def __init__(self, string):
            self._string = string
        def getSentence(self):
            return self._string
        def getWords(self):
            return self._string.split()
        def getLength(self):
            return len(self._string)
        def getNumWords(self):
            return len(self._string.split())
        def capitalize(self):
            self._string =  self._string.upper()
        def punctation(self):
            self._string = self._string + ", "
        def __str__(self):
            return self._string
        def __getitem__(self, k):
            return self._string[k]
        def __len__(self):
            return self._String
        def __getslice__(self, start, end):
            return self[max(0, start):max(0, end):]
        def __add__(self, other):
            self._string = self._string + other
            return self._string
        def __frequencyTable__(self, word):
            count = 0
            for w in self._string:
                if self._string.has_key(word):
                    count = count + 1
            return count
        def __contains__(self, word):
            return word in self._string


def functionTesting():
    hippo = Sentence("hello world")
    print(hippo.getSentence())
    print(hippo.getLength())
    print(hippo.getNumWords())
    print(hippo.getWords())

    hippo.capitalize()
    hippo.punctation()

    print(hippo.getSentence())

    print("HELLO" in hippo)           ##contains

    print(hippo.__getitem__(0))      ##__getitem

    print(hippo.__add__("james"))      ##__add__

    print(hippo.__getslice__[0:1])



functionTesting()
</code></pre>
<p>Also where can I learn more about magic method functions ? As it seems I am having trouble calling the functions more than writing them</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>hippo.__getslice__[0:1]</code> you are actually trying to slice the method <code>hippo.__getslice__</code>. That is why it is failing with the error</p>
<pre class="lang-none prettyprint-override"><code>'method' object is not subscriptable
</code></pre>
<p><strong>Important Note:</strong> <code>__getslice__</code> is deprecated since Python 2.0 and it is not available in Python 3.x. Quoting the official <a href="https://docs.python.org/2/reference/datamodel.html#object.__getslice__" rel="nofollow">documentation of <code>__getslice__</code></a>,</p>
<blockquote>
<p>Deprecated since version 2.0: Support slice objects as parameters to the <a href="https://docs.python.org/2/reference/datamodel.html#object.__getitem__" rel="nofollow"><code>__getitem__()</code></a> method. (However, built-in types in CPython currently still implement <code>__getslice__()</code>. Therefore, you have to override it in derived classes when implementing slicing.)</p>
</blockquote>
<p>So you should use <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow"><code>__getitem__</code></a> for slicing. Quoting the question,</p>
<blockquote>
<p>for example if the string is "HELLO WORLD, james" , and I slice it at [0:1] , I expect to get "HELLO"</p>
</blockquote>
<p>Since you want to get words with slicing, if the key passed to <code>__getitem__</code> is a <a href="https://docs.python.org/3/glossary.html#term-slice" rel="nofollow"><code>slice</code></a> object, then call <code>self.getWords()</code> and slice the returned object like shown below</p>
<pre><code>def __getitem__(self, k):
    if isinstance(k, slice):
        return self.getWords()[k]
    return self._string[k]

....
print(hippo[0:1])
['HELLO']
</code></pre>
<p><strong>Note 1:</strong> You don't have to explicitly call <code>__getitem__</code> when you are  subscripting the <code>hippo</code> object. You can simply do</p>
<pre><code>print(hippo[0])
# H
</code></pre>
<p>This will internally call <code>__getitem__</code> with <code>k</code> as <code>0</code>.</p>
<p><strong>Note 2:</strong> Same as the previous one. You don't have to explicitly call <a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="nofollow"><code>__add__</code></a> and that can be implicitly called with the arithmetic operator <code>+</code>, like this</p>
<pre><code>print(hippo + "james")
# HELLO WORLD, james
</code></pre>
<p><strong>Note 3:</strong> In your <code>__frequenceTable__</code> implementation, you are using <code>has_key</code> method (<a href="https://docs.python.org/2/library/stdtypes.html#dict.has_key" rel="nofollow">which is a deprecated dictionary method</a> on a string. So, at runtime, your program will fail with</p>
<pre class="lang-none prettyprint-override"><code>AttributeError: 'str' object has no attribute 'has_key'
</code></pre>
<p>Perhaps you meant to use <code>in</code> operator.</p>
<pre><code>def __frequencyTable__(self, word):
    count = 0
    for w in self._string:
        if word in self._string:
            count = count + 1
    return count
</code></pre>
<p><strong>PS:</strong> I am not sure what this <code>__frequencyTable__</code> method tries to achieve.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__getslice__()</code> was deprecated in Python 2.6 and is removed in Python 3. You should instead use <code>__getitem__()</code> which will receive a slice object when called with slice notation. </p>
<p>i.e.</p>
<pre><code>def __getitem__(self, k):
    if isinstance(k, slice):
        # do slice stuff here
    return self._string[k]
</code></pre>
<p>You can refer to the <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">datamodel documentation</a> for details on all the magic methods.</p>
</div>
