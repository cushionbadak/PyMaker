<div class="post-text" itemprop="text">
<p>In a third-party script, it's meant to spit out Json for me to decode but instead prepends a timestamp:</p>
<pre><code>2015-03-28T16:32:41.875199+00:00 {"1": {"Power (kW)": "0.301", "Energy Imported (kWh)": "62.281"...}}
</code></pre>
<p>All of this is in one big integer. I've tried to split this based on the space/whitespace contained before the first curly bracket but can simply not do it. I'd really appreciate some pointers - I'm aware my questions here are very basic, and apparently I'm going to be blocked soon unless I improve, so please don't shoot me for asking another simple one!</p>
<p>Updated 31/3/2015 for @Alex.</p>
<p>I realise it may seem impossible but assure you that it returns a datatype of int. You may not believe it, but you'll have to, and <a href="https://github.com/edrabbit/neurio" rel="nofollow">check the guy's code here</a>. This is what I've used to call the script:</p>
<pre><code>get_power=os.system("python /fetch_neurio.py --ip 172.16.0.8 --format json --type sensor")
thedata = get_power
print type(thedata)
</code></pre>
<p>If you find that too unbelievable then look at the code of fetch_neurio yourself. If you're struggling to help a cretin like me, then no worries. I just came here to ask for help.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>No idea what you mean by "one big <code>int</code>" in the text <strong>and</strong> subject since pretty clearly the data is a <strong>string</strong>, not an integer.  I'm going to answer on the assumption that your repeated use of <code>int</code> is just a weird repeated typo and you meant "string" instead.</p>
<p>Given</p>
<pre><code>data = '2015-03-28T16:32:41.875199+00:00 {"1": {"Power (kW)": "0.301", "Energy Imported (kWh)": "62.281"}}'
</code></pre>
<p>(removing the <code>...</code> to make the JSON part syntactically valid),</p>
<pre><code>import json

timestamp, jsondata = data.split(None, 1)
pythondata = json.loads(jsondata)
</code></pre>
<p>...yep, it <strong>is</strong> as simple as this!-)</p>
<p>"Splitting on <code>None</code>" means to split on sequences of 1+ whitespace characters (in case that blank-looking thing might be a tab or whatever, we don't care:-).  The second optional argument, here <code>1</code>, to the split method, means to do just one split (on the very first sequence of whitespace) -- thus producing two pieces that we assign correspondingly to two variables.</p>
<p>There are of course other possibilities, for example using regular expressions, if the anomalies in <code>data</code> are worse than you have communicated so far (i.e, more than just a pre-pended, whitespace separated timestamp), but based on what you <strong>have</strong> communicated, this simplistic approach should suffice.</p>
</div>
<div class="post-text" itemprop="text">
<p>pass <code>maxsplit</code> the second argument to split as 1.</p>
<pre><code>'2015-03-28T16:32:41.875199+00:00 {"1": {"Power (kW)": "0.301", "Energy Imported (kWh)": "62.281"...}}'.split(' ',1)[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you see on the screen (a line that starts with <code>2015-03-28...</code>) is the <em>output</em> from the shell command that you've started using <code>os.system()</code> function. It is printed directly to stdout. <code>os.system()</code> returns the exit code from the command (an integer); it does not return the output.</p>
<p>To capture the output from a subprocess, you could use: <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output()</code></a>. Or (better) import the module and call the appropriate functions, to get the result without unnecessary external process and printing/parsing:</p>
<pre><code>#!/usr/bin/env python
import fetch_neurio #NOTE: make sure fetch_nerio.py's directory is in pythonpath

url = 'http://{ip}/both_tables.html'.format(ip='172.16.0.8')
(timestamp, data) = fetch_neurio.fetch_page(url, localtime=False)
parsed_data = fetch_neurio.parse_readings(data)
readings = fetch_neurio.get_sensor_readings(parsed_data)
# use timestamp, readings here.. 
</code></pre>
</div>
<span class="comment-copy">Well, why is it when I request its type does it return &lt;type 'int'&gt; ?</span>
<span class="comment-copy">@Will, it is, simply, absolutely impossible, for <code>type()</code> called on the string you show us, to respond with <code>&lt;type 'int'&gt;</code>.  If you see the latter, you must, instead, be calling <code>type</code> on something very different than the string you show us in your question.  Please edit your Q to show exactly what data you're calling <code>type</code> on (presumably by <code>print</code>ing both <code>repr(data)</code> and  <code>type(data)</code>) and if the bug in your code is not obvious to you I'll be glad to point it out (if you give us enough info to do so).</span>
<span class="comment-copy">I've updated it, @alex. It's definitely an int.</span>
<span class="comment-copy">@Will, <b>of course</b> <code>os.system</code> returns an <code>int</code>, <b>no matter what</b> separate process you're running with it -- that return value is the exit <b>status</b> of said separate process and has <b>absolutely nothing</b> to do with the string you show at the start of the Q!  Rather, that line gets written to <code>output.log</code> (you could ask for a different filename with an <code>--outputfile</code> argument to that script, as easily determined by eyeballing said script).  So, forget the irrelevant status code returned from <code>os.system</code>, read the last line of <code>output.log</code>, and parse <b>that</b>!</span>
<span class="comment-copy">OK, Alex. Thanks. I think I'll just forget it and find another way, and another site. I find your tone pretty impossible to deal with, but I'm grateful for your help anyway. All the best.</span>
