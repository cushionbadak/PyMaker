<div class="post-text" itemprop="text">
<p>Suppose I have two generators, for simplicity:</p>
<pre><code>it1 = iter([1,2,3,4])
it2 = iter([1,2,10,20])
</code></pre>
<p>what is the best way to know where is the first difference (position 2) or if they are equal? I would like to avoid explicit loop:</p>
<pre><code>for pos, v1, v2 in enumerate(izip(it1, it2)):
   if v1 != v2: return pos
return None
</code></pre>
<p>and use functional programming:</p>
<pre><code>try:
  return next(pos for pos, (v1, v2) in enumerate(izip(it1, it2)) if v1 != v2)
except StopIteration:
  return None
</code></pre>
<p>The point is that the solution I am using is ugly, more verbose than the explicit loop, ...</p>
<p>can you do better?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simplify your second example by giving a default value to <code>next</code>:</p>
<pre><code>return next((pos for pos, (v1, v2) in enumerate(izip(it1, it2)) if v1 != v2), None)
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow">docs</a>:</p>
<blockquote>
<p><code>next(iterator[, default])</code></p>
<p>Retrieve the next item from the <code>iterator</code> by calling its <code>__next__()</code> method. <strong>If <code>default</code> is given, it is returned if the iterator is
  exhausted</strong>, otherwise <code>StopIteration</code> is raised.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative answer you can use <code>numpy.where</code> instead loop over your arrays and use <code>enumerate</code> :</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; def test(a,b):
...    try :
...         return np.where(a!=b)[0][0]
...    except IndexError:
...         return None
... 
&gt;&gt;&gt; test(it1,it2)
&gt;&gt;&gt; it1 = np.array([1,2,3,4])
&gt;&gt;&gt; it2 = np.array([1,2,0,4])
&gt;&gt;&gt; test(it1,it2)
2
</code></pre>
<p>Or with <code>next</code> :</p>
<pre><code>&gt;&gt;&gt; it1 = np.array([1,2,3,4,6])
&gt;&gt;&gt; it2 = np.array([1,2,3,0,6])
&gt;&gt;&gt; next(iter(np.where(it1!=it2)[0]),None)
3
</code></pre>
<p>Also for <code>generators</code> you can use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html" rel="nofollow"><code>numpy.fromiter</code></a> to convert your generator to a numpy array!  </p>
<p>some benchmarks :</p>
<pre><code>:~$ python -m timeit "from itertools import izip;it1=[1,2,3,4];it2=[1,2,10,20];next((pos for pos, (v1, v2) in enumerate(izip(it1, it2)) if v1 != v2), None)"
100000 loops, best of 3: 2.77 usec per loop
:~$ python -m timeit "import numpy as np;it1=[1,2,3,4];it2=[1,2,10,20];next(iter(np.where(it1!=it2)[0]),None)"
100000 loops, best of 3: 2.02 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've been experimenting with builtin <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> but probably <a href="https://docs.python.org/3/library/itertools.html#itertools.filterfalse" rel="nofollow noreferrer">python3 filterfalse</a> might be even nicer.</p>
<pre><code>filter(lambda x: x if len(set(x)) else None, zip(it1, it2))
&gt;&gt;&gt; [(3, 10), (4, 20)]
</code></pre>
<p>However, we don't get index of differences but just different items in such way.  </p>
<p>So I've been thinking some more and check for <a href="https://stackoverflow.com/questions/9983547/comparing-two-generators-in-python">related</a> but then actually, OP wants index not a result. So, revised   </p>
<pre><code>filter(lambda x:x[0] if len(set(x[1])) &gt; 1 else None, enumerate(zip(it1,it2)))
&gt;&gt;&gt; [(2, (3, 10)), (3, (4, 20))]
</code></pre>
<p>Of course this doesn't even come close to above answers so I wouldn't recommend that in production code. Only benefit? No imports. Here are my timeit results:</p>
<pre><code>python -m timeit "import numpy as np;it1=[1,2,3,4];it2=[1,2,10,20];next(iter(np.where(it1!=it2)[0]),None)"
100000 loops, best of 3: 2.02 usec per loop
10 loops, best of 3: 13.1 usec per loop

python -m timeit "from itertools import izip;it1=[1,2,3,4];it2=[1,2,10,20];next((pos for pos, (v1, v2) in enumerate(izip(it1, it2)) if v1 != v2), None)"
100000 loops, best of 3: 16.6 usec per loop

python -m timeit "it1=[1,2,3,4];it2=[1,2,10,20];filter(lambda x:x[0] if len(set(x[1])) &gt; 1 else None, enumerate(zip(it1,it2)))"
10000 loops, best of 3: 19.1 usec per loop
</code></pre>
</div>
<span class="comment-copy">I would argue that the loop is the cleanest way to do this...</span>
<span class="comment-copy">@mgilson: you are out of topic.</span>
<span class="comment-copy"><i>"I would like to avoid explicit loop"</i> - why?</span>
<span class="comment-copy">this is much better. I didn't know the second argument of <code>next</code>.</span>
<span class="comment-copy">it doesn't seems to be very efficient. I guess internally you are looping one time to check if the arrays are equal, and a second time to check where they are different.</span>
<span class="comment-copy">@RuggeroTurra oh, yes! the checking for equality was remained from my older try! thanks for reminding!</span>
<span class="comment-copy">it's not clear to me if numpy transforms iterators into <code>np.array</code>s or if it uses them as they are.</span>
<span class="comment-copy">@RuggeroTurra no you need to convert your generators to numpy arrays! checkout the edit! any way this is answer than using <code>enumerate</code></span>
<span class="comment-copy">your solutions do not stop at the first difference. I don't need all the different elements. I just want the first.</span>
