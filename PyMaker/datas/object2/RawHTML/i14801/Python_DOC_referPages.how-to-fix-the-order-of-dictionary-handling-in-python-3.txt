<div class="post-text" itemprop="text">
<p>Is there a way to reliably fix the order of dictionary handling in Python 3, i.e. establish iteration over keys and values with a predictable order?</p>
<p>For debugging purposes and to reproduce a failure that, supposedly, is based on dictionary access in python 3.3 and 3.4, I need to somehow make the iteration over dictionaries predictable. What I mean is I want to fix the way any iteration is performed at the start of the Python program. Such that starting the program many times, calls to <code>dict.items()</code>, <code>dict.keys()</code>, <code>dict.values()</code> always produce the same order of elements. Even more so, it would be nice to change this order by setting some sort of seed value of the hash function. How can I do this?</p>
<p>This is for <strong>debugging only</strong>, I don't want and cannot use something like <code>sorted(dict.keys())</code> or <code>OrderedDict</code>. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You should take a look at the <code>PYTHONHASHSEED</code> environment variable:</p>
<p><a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED">https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED</a></p>
<p>Set it to a fixed integer and then your hash seed is deterministic.</p>
</div>
<span class="comment-copy">Just make sure you don't do this in production.</span>
<span class="comment-copy">Well, if you set it to a secret value nobody knows, I don't see it as a large problem.</span>
<span class="comment-copy">No, that's missing the point. It's random for a reason, which is to prevent various attacks that rely on predictable dict ordering; for example, the sort of DoS exploit described <a href="http://www.ocert.org/advisories/ocert-2011-003.html" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">I think everybody agrees that it's random to prevent a DoS exploit. I don't quite agree with the 'security by obscurity' argument: if that argument can be considered valid, then using public key cryptography would be also categorized as 'security by obscurity', as if somebody knows the private key, how do you know if somebody <i>else</i> knows it? The value of <code>PYTHONHASHSEED</code> must be guarded using the same kind of care that is used for guarding private keys. But I agree, random value is the best.</span>
<span class="comment-copy">Don't worry, this is solely for debugging. The environment variable is only set in my PyCharm run configuration and nowhere else :-D</span>
