<div class="post-text" itemprop="text">
<p>I was using Python 2.7 in my project and since I have seen that Python 3.5 is already coming soon, I decided to upgrade my Python interpreter.</p>
<p>I am using <code>base64</code> encoding. Since string objects are somehow different in new Python versions, I am getting the following error:</p>
<p><code>TypeError: 'str' does not support the buffer interface</code></p>
<p>I have already found out that I have to encode my string before passing it to this function (<code>'string'.encode()</code>), but isn't there a way to encode the string automatically to unicode or something? </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <code>str</code> <strong>means</strong> "unicode text" -- whether you express it as <code>'mystring'</code> or <code>u'mystring'</code> makes no difference (the latter is tolerated only to facilitate porting/coexistence with Python 2).</p>
<p>To indicate a <strong>binary string of bytes</strong>, you'd use <code>b'mystring'</code> instead.</p>
<p>As <a href="https://docs.python.org/3/library/base64.html" rel="nofollow">https://docs.python.org/3/library/base64.html</a> puts it,</p>
<blockquote>
<p>This module provides functions for encoding <strong>binary</strong> data</p>
</blockquote>
<p>(my emphasis) -- nothing to do with text (i.e unicode) data.  As a logical consequence, all functions in the module expect or return <strong>byte</strong> strings.</p>
<p>Not sure why you can't be using <strong>byte</strong> strings (as opposed to <strong>text</strong> strings) directly in your program, but if that's a problem, simplest is to wrap the needed functions from the <code>base64</code> module into your own function that provide whatever encoding (text -&gt; bytes) or decoding (bytes -&gt; text) you require.  For example:</p>
<pre><code>import base64

def b64encode(text, codec='utf8'):
    return base64.b64encode(text.encode(codec))
</code></pre>
<p>then use this <code>b64encode</code> throughout the rest of your code, rather than <code>base64.b64encode</code> directly -- etc, etc for the decoding part.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure you will be glad you made the change.  You can make life easier (if you need to) by using the ftfy package:
   <a href="http://blog.luminoso.com/2012/08/24/fixing-unicode-mistakes-and-more-the-ftfy-package/" rel="nofollow">http://blog.luminoso.com/2012/08/24/fixing-unicode-mistakes-and-more-the-ftfy-package/</a> </p>
<p>...or you can take a look at the chardet library:-</p>
<p>from chardet.universaldetector import UniversalDetector</p>
<p>This 'guesses' the encoding of a file, if you are unsure.</p>
</div>
<span class="comment-copy">Thank you for clearing that, so why do I have that Error? And how do I fix it sistematically</span>
<span class="comment-copy">@MalikBrahimi and a way to avoid doing that? It's not very nice to do that constantly</span>
<span class="comment-copy">I actually can use byte strings in my program, I am just saying that it is very annoying to encode the string every time I have to call the function. :D</span>
<span class="comment-copy">@JuanRocamonde, if you use byte strings then of course you have no need to encode them.  The encoding is only needed if you use text strings but want to use them with functionality that deals, strictly, only with <b>binary</b> data, as <code>base64</code> does and clearly documents.</span>
<span class="comment-copy">Thank you for the help!</span>
