<div class="post-text" itemprop="text">
<p>I read some question and <a href="https://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators">answers</a> about differences between iterators and generators. But I don't understand when you should choose one over other? Do you know any examples (simple, real life ones) when one is better than the other? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Iterators provide efficient ways of iterating over an existing data structure.</p>
<p>Generators provide efficient ways of generating elements of a sequence on the fly.</p>
<h1>Iterator Example</h1>
<p>Python's file readers can be used as iterators.  So what you <em>might</em> use to process one line of a file:</p>
<pre><code>with open('file.txt', 'rb') as fh:
    lines = fh.readlines()  # this reads the entire file into lines, now
    for line in lines:
        process(line)       # something to be done on each line
</code></pre>
<p>You can implement more efficiently using iterators</p>
<pre><code>with open('file.txt', 'rb') as fh:
    for line in fh:         # this will only read as much as needed, each time
        process(line)
</code></pre>
<p>The advantage is in the fact that in the second example, you're not reading the entire file into memory, then iterating over a list of lines.  Instead, the reader (<code>BufferedReader</code> in Python3) is reading a line at a time, every time you ask for one.</p>
<h1>Generator Example</h1>
<p>Generators <em>generate</em> elements of a sequence on the fly.  Consider the following:</p>
<pre><code>def fib():
    idx  = 0
    vals = [0,1]
    while True:
        # If we need to compute a new value, do so on the fly
        if len(vals) &lt;= idx: vals.append(vals[-1] + vals[-2])
        yield vals[idx]
        idx += 1
</code></pre>
<p>This is an example of a generator.  In this case, every time it's "called" it produces the next number in the <a href="http://en.wikipedia.org/wiki/Fibonacci_number" rel="nofollow noreferrer">Fibonacci sequence</a>.</p>
<p>I put "called" in scare quotes because the method of getting successive values from generators is different than a traditional function.</p>
<p>We have two main ways to get values from generators:</p>
<p><strong>Iterating over it</strong></p>
<pre><code># Print the fibonacci sequence until some event occurs
for f in fib():
    print(f)
    if f &gt; 100: break
</code></pre>
<p>Here we use the <code>in</code> syntax to iterate over the generator, and print the values that are returned, until we get a value that's greater than 100.</p>
<p>Output:</p>
<pre>
0
1
1
2
3
5
8
13
21
34
55
89
144
</pre>
<p><strong>Calling next()</strong></p>
<p>We could also call <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> on the generator (since <a href="https://stackoverflow.com/a/2776865/736937">generators are iterators</a>) and (generate and) access the values that way:</p>
<pre><code>f = fib()

print(next(f))  # 0
print(next(f))  # 1
print(next(f))  # 1
print(next(f))  # 2
print(next(f))  # 3
</code></pre>
<p>There are more persuasive examples of generators however.  And these often come in the form of <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow noreferrer">"generator expressions"</a>, a related concept (<a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">PEP-289</a>).</p>
<p>Consider something like the following:</p>
<pre><code>first = any((expensive_thing(i) for i in range(100)))
</code></pre>
<p>Here, we're creating a generator expression:</p>
<pre><code>(expensive_thing(i) for i in range(100))
</code></pre>
<p>And passing it to the <code>any</code> built-in function.  <code>any</code> will return <code>True</code> as soon as an element of the iterable is determined to be <code>True</code>.  So when you pass a generator function to <code>any</code>, it will only call <code>expensive_thing(i)</code> as many times as necessary to find a <code>True</code>-ish value.</p>
<p>Compare this with using a list comprehension passed to <code>any</code>:</p>
<pre><code>first = any([expensive_thing(i) for i in range(100)])
</code></pre>
<p>In this case, <code>expensive_thing(i)</code> will be called for <em>all</em> values of <code>i</code>, <strong>first</strong>, then the 100-element list of <code>True</code>/<code>False</code> values will be given to <code>any</code> which will return <code>True</code> if it finds a <code>True</code>-ish value.</p>
<p>But if <code>expensive_thing(0)</code> returned <code>True</code>, clearly the better approach would only be to evaluate that, test it, and stop there.  Generators allow you to do this, whereas something like a list comprehension do not.</p>
<hr/>
<p>Consider the following example, illustrating the advantage of using a generator expression over list comprehension:</p>
<pre><code>import time

def expensive_thing(n):
    time.sleep(0.1)
    return 10 &lt; n &lt; 20

# Find first True value, by using a generator expression
t0 = time.time()
print( any((expensive_thing(i) for i in range(100))) )
t1 = time.time()
td1 = t1-t0

# Find first True value, by using a list comprehension
t0 = time.time()
print( any([expensive_thing(i) for i in range(100)]) )
t1 = time.time()
td2 = t1-t0

print("TD 1:", td1)  # TD 1:  1.213068962097168
print("TD 2:", td2)  # TD 2: 10.000572204589844
</code></pre>
<p>The function <code>expensive_thing</code> introduces an artificial delay to illustrate the difference between the two approaches.  The second (list comprehension) approach takes significantly longer, because <code>expensive_thing</code> is evaluated at <strong>all</strong> 100 indices, whereas the first only calls <code>expensive_thing</code> until it finds a <code>True</code> values (<code>i=11</code>).</p>
</div>
<span class="comment-copy">What specifically do you not understand after reading the post?</span>
<span class="comment-copy">I am new to python. Most things is new to me. Simple examples for a noob are better than writing that 'Pythonâ€™s generators provide a convenient way to implement the iterator protocol' or other technical gorgon.</span>
<span class="comment-copy">Some knowledge of technical jargon is required, the more you know the better you'll be able to find answers to questions and present questions to get more and better answers. To answer your question, check out <a href="http://nvie.com/posts/iterators-vs-generators/" rel="nofollow noreferrer">Vincent Driessen's</a> post on the interator vs generator question.</span>
<span class="comment-copy">As I explained in that (top-voted but still unaccepted:-) answer nearly five years ago, all generators are iterators (though not vice versa) so your question is absolutely bereft of any sense -- like asking "when should I eat spaghetti rather than pasta" when spaghetti <b>are</b> an example (instance, special case of) pasta, or asking "should I buy a Labrador or a dog" (since Labradors <b>are</b> a breed of dogs), and so forth.</span>
<span class="comment-copy">Brevity, genexp -&gt; generator. Extensibility, flexibility -&gt; iterator.</span>
<span class="comment-copy">The Python 3.x <code>range</code> and the Python 2.x <code>xrange</code> are not generators.  They are lazy sequences.  The definition of a generator is a function that produces an iterator.  See <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-generator</a></span>
<span class="comment-copy">For the purposes of understanding the concept, they can 100% be thought of as generators, and since these built-ins are likely ones the OP is familiar with, I used them -- but I'll update my post with a proper generator.</span>
