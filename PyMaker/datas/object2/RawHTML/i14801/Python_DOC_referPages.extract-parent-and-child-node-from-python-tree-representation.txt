<div class="post-text" itemprop="text">
<pre><code>[Tree('ROOT', [Tree('S', [Tree('INTJ', [Tree('UH', ['Hello'])]), Tree(',', [',']), Tree('NP', [Tree('PRP$', ['My']), Tree('NN', ['name'])]), Tree('VP', [Tree('VBZ', ['is']), Tree('ADJP', [Tree('JJ', ['Melroy'])])]), Tree('.', ['.'])])]), Tree('ROOT', [Tree('SBARQ', [Tree('WHNP', [Tree('WP', ['What'])]), Tree('SQ', [Tree('VBZ', ['is']), Tree('NP', [Tree('PRP$', ['your']), Tree('NN', ['name'])])]), Tree('.', ['?'])])])]
</code></pre>
<p>I have many of these strings available in Python, which are actually tree representations. I want to extract the parent and child node for every word, e.g. for <code>'Hello'</code> I want <code>(INTJ, UH)</code>, and for <code>'My'</code> it is <code>(NP, PRP$)</code>.</p>
<p>This is the outcome I want:</p>
<pre><code>(INTJ, UH) , (NP, PRP$), (NP, NN) , (VP, VBZ) , (VP , VPZ) , (ADJP, JJ) , (WHNP, WP), (SQ, VBZ), (NP, PRP$), (NP, NN)
</code></pre>
<p>How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your string is obviously the representation of a list of <code>Tree</code> objects. It would be much better if you had access to, or could reconstruct in some other way, that list – if not, the most straightforward way to create a data structure you can work with is <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow"><code>eval()</code></a> (with all the <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow">usual caveats</a> about calling <code>eval()</code> on user-supplied data).</p>
<p>Since you don't say anything about your <code>Tree</code> class, I'll write a simple one that suffices for the purposes of this question:</p>
<pre><code>class Tree:

    def __init__(self, name, branches):
        self.name = name
        self.branches = branches
</code></pre>
<p>Now we can recreate your data structure:</p>
<pre><code>data = eval("""[Tree('ROOT', [Tree('S', [Tree('INTJ', [Tree('UH', ['Hello'])]), Tree(',', [',']), Tree('NP', [Tree('PRP$', ['My']), Tree('NN', ['name'])]), Tree('VP', [Tree('VBZ', ['is']), Tree('ADJP', [Tree('JJ', ['Melroy'])])]), Tree('.', ['.'])])]), Tree('ROOT', [Tree('SBARQ', [Tree('WHNP', [Tree('WP', ['What'])]), Tree('SQ', [Tree('VBZ', ['is']), Tree('NP', [Tree('PRP$', ['your']), Tree('NN', ['name'])])]), Tree('.', ['?'])])])]""")
</code></pre>
<p>Once we have that, we can write a function that produces the list of 2-tuples you want:</p>
<pre><code>def tails(items, path=()):
    for item in items:
        if isinstance(item, Tree):
            if item.name in {".", ","}:  # ignore punctuation
                continue
            for result in tails(item.branches, path + (item.name,)):
                yield result
        else:
            yield path[-2:]
</code></pre>
<p>This function descends recursively into the tree, yielding the last two <code>Tree</code> names each time it hits an appropriate leaf node.</p>
<p>Example use:</p>
<pre><code>&gt;&gt;&gt; list(tails(data))
[('INTJ', 'UH'), ('NP', 'PRP$'), ('NP', 'NN'), ('VP', 'VBZ'), ('ADJP', 'JJ'), ('WHNP', 'WP'), ('SQ', 'VBZ'), ('NP', 'PRP$'), ('NP', 'NN')]
</code></pre>
</div>
<span class="comment-copy">Your data structure is <code>sentences</code>, then. If you don't understand how to get from there to the ability to use the solution in my answer, you'll need to ask a new question.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/29397460/extract-parent-and-child-node-from-python-tree">link</a> new question asked.Thank You very much for helping me out @Zero</span>
<span class="comment-copy">@rombi That is good, however do remove parts of the new question from here! Thanks.</span>
<span class="comment-copy">There is error coming in line 6 of tails function. I think  keyword <code>from</code> is not required. Secondly when i am running the code <b>print list(tails(data))</b>,it gives me this  <code>[&lt;generator object tails at 0x043CA918&gt;, &lt;generator object tails at 0x043CA940&gt;] </code>. Please help me out.</span>
<span class="comment-copy">Ah, you're using a version of Python less than 3.3, then. Let me update the code ...</span>
<span class="comment-copy">@rombi I've updated the code so it no longer relies on the <code>yield from</code> construct <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator" rel="nofollow noreferrer">introduced</a> in Python 3.3 ­– hopefully it works for you now.</span>
<span class="comment-copy">yeah now it works. I am using python 2.7</span>
<span class="comment-copy">From my answer: <b>"It would be much better if you had access to, or could reconstruct in some other way, that list"</b>. Using <code>eval()</code> is a last resort (and I only used it because you didn't supply a data structure in your question); since that string is the representation of an existing data structure, you should be using that data structure instead. Calling <code>eval()</code> on a representation complex enough to give you a stack overflow error is obviously a terrible idea.</span>
