<div class="post-text" itemprop="text">
<p>I have a dataframe with a TimeStamps column. I want to convert it to strings of local time, ie with daylight saving. </p>
<p>So I want to convert ts[0] below to "2015-03-30 <strong>03</strong>:55:05". Pandas seems to be aware of DST, but only when you call .values on the series.</p>
<p>Thanks</p>
<pre><code>(Pdb) ts = df['TimeStamps']
(Pdb) ts
0   2015-03-30 02:55:05.993000
1   2015-03-30 03:10:20.937000
2   2015-03-30 10:09:19.947000
Name: TimeStamps, dtype: datetime64[ns]
(Pdb) ts[0]
Timestamp('2015-03-30 02:55:05.993000')
(Pdb) ts.values
array(['2015-03-30T03:55:05.993000000+0100',
   '2015-03-30T04:10:20.937000000+0100',
   '2015-03-30T11:09:19.947000000+0100'], dtype='datetime64[ns]')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>DST is relative to your location (e.g. London DST began a few weeks after NY).  You first need to make the timestamp timezone aware: </p>
<pre><code>from pytz import UTC
from pytz import timezone
import datetime as dt

ts = pd.Timestamp(datetime.datetime(2015, 3, 31, 15, 47, 25, 901597))
# or...
ts = pd.Timestamp('2015-03-31 15:47:25.901597')
# ts is a Timestamp, but it has no idea where in the world it is...
&gt;&gt;&gt; ts.tzinfo is None
True

# So the timestamp needs to be localized.  Assuming it was originally a UTC timestamp, it can be localized to UTC.
ts_utc = ts.tz_localize(UTC)
# Once localized, it can be expressed in other timezone regions, e.g.: 
eastern = pytz.timezone('US/Eastern')
ts_eastern = ts_utc.astimezone(eastern)
# And to convert it to an ISO string of local time (e.g. eastern):
&gt;&gt;&gt; ts_eastern.isoformat()
'2015-03-30T08:09:27.143173-04:00'
</code></pre>
<p>See <a href="http://pytz.sourceforge.net" rel="noreferrer">pytz</a> or <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer">datetime</a> for more information.</p>
</div>
<span class="comment-copy">what is your local timezone (e.g., <code>Europe/London</code>)? Is there a DST transition on 2015-03-30?</span>
<span class="comment-copy">Hi, yes, DST started on 2015-03-29. The timestamp in UTC is correct, but I can't find the way to display it as a string in London time. @Alexander got it.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/25653529/4279">Converting timezones from pandas Timestamps</a></span>
<span class="comment-copy">if <code>dt</code> is the <code>datetime</code> module then use <code>utcnow()</code> instead <code>now()</code> here.</span>
<span class="comment-copy">Sure, but the point is to show how to convert a local timestamp to UTC (the 'now' instance is just an example).  It is considered best practice to always deal in UTC time except for when displaying.</span>
<span class="comment-copy">Europe/London timezone != UTC!!! Do not use <code>.now()</code> (returns time in <i>local</i> timezone) then you mean <code>.utcnow()</code> (returns time in UTC)!</span>
<span class="comment-copy">Never said they were, but I updated the example to clarify the steps.</span>
<span class="comment-copy">Do understand that using <code>.now()</code> instead of <code>.utcnow()</code> is equivalent to saying that <code>Europe/London</code> == <code>UTC</code> in this particular case? (OPs local timezone is Europe/London).</span>
