<div class="post-text" itemprop="text">
<p>We have got a legacy application that runs on Python 2.2.1. Now we need to upgrade to the latest version of Python (3.4).</p>
<p>I would like to know a few details on the upgrade:</p>
<ol>
<li>Would that be a direct upgrade for all of the associated files? I mean what libraries that have been used in the older code have to be changed to make it work in latest version?</li>
<li>How do we upgrade the .py files from the older to the newer version?</li>
</ol>
<p>Everywhere it talks about upgrading 2.6 to 3 and nowhere does it cover 2.2.1 to 3. Is there any direct upgrade possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>To expand on my comments, <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow noreferrer">the PyPorting docs</a> suggest a seven-step process that I think would be useful here too:</p>
<ol>
<li><p><strong>Only worry about supporting Python 2.7</strong> - it will be easier for you to upgrade to 3 if you first make sure your code runs in the latest 2.x branch. If you're lucky, this won't require many changes!</p></li>
<li><p><strong>Make sure you have good test coverage</strong> - crucial for any major change. If you can't be sure it's working now, how will you be sure it's working after the upgrade?</p></li>
<li><p><strong>Learn the differences between Python 2 &amp; 3</strong> - per <a href="https://stackoverflow.com/questions/29385069/upgrade-from-python-2-2-1-to-3-4/29385149?noredirect=1#comment46948774_29385149">cdarke's comment</a>, you will probably have to do some manual intervention, so will need to know what's changed. In your case, this may also involve learning the differences between 2.x versions. You can use <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">What's new in Python x.x?</a> to help. </p></li>
<li><p><strong>Use Modernize or Futurize to update your code</strong> - automated tools to make your code 3.x-ready (the documentation notes that you can use <code>2to3</code> if you don't want to retain 2.x compatibility). </p></li>
<li><p><strong>Use Pylint to help make sure you donâ€™t regress on your Python 3 support</strong> - <code>pylint</code> will give you lots of helpful warnings to help improve the code generally. </p></li>
<li><p><strong>Use caniusepython3 to find out which of your dependencies are blocking your use of Python 3</strong> - you ask about updates to libraries; this tool can tell you what's 3.x compatible. You may need to find compatible replacements for some dependencies; see <a href="https://pypi.python.org/pypi?:action=browse&amp;c=533&amp;show=all" rel="nofollow noreferrer">PyPI</a>. </p></li>
<li><p><strong>Use continuous integration to make sure you stay compatible with Python 2 &amp; 3</strong> - whatever versions you want to support, good CI can ensure that you stay compatible with all of them as you modify the code. </p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend that you take a look at something like: <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow">2to3</a>
The idea is that you can just run the program on your old file, and convert it to 3.4 compatible code. Best of luck!</p>
</div>
<span class="comment-copy"><a href="https://www.python.org/download/releases/2.2.1/" rel="nofollow noreferrer">2.2.1</a> is very nearly 13 years old. Even if you have some great reason to be on 2.2, you shouldn't be using it; there are later, bug-fixed versions on that branch. Also, have you read <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow noreferrer">docs.python.org/3/howto/pyporting.html</a>?</span>
<span class="comment-copy">So this has to be done for all the .py file in the project ? isn't there any way to batch convert all the files ?</span>
<span class="comment-copy">@user3689864 why not <b>read the docs</b>? <i>"To translate an entire project from one directory tree to another use: <code>$ 2to3 --output-dir=python3-version/mycode -W -n python2-version/mycode</code>"</i></span>
<span class="comment-copy">@user3689864: yes, every .py file, and don't expect to convert without doing some manual work and eye-balling the code.  2to3 is good, but you can't expect it to convert more than 90% of 90% of your files (if you are lucky).  Modules have be the right version.</span>
<span class="comment-copy">@jonrsharpe is a clever man. Listen to him, not me. :P</span>
