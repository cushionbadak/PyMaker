<div class="post-text" itemprop="text">
<p>While it may seem an already-answered question, it's not.</p>
<p>I am trying to find a way to do the following:</p>
<ul>
<li>I have a known string, e.g "I love dogs"</li>
<li>I have a bunch of possible characters, eg "@!470"</li>
<li>I have a bunch of characters that should be substitute in the "known string", e.g s,e</li>
<li>I want a way to substitute for every interaction, in the known string "I Love dogs", 1 single character known in "possible characters", and let everything else unchanged.</li>
<li>When finished, start substituting 2 characters at a time</li>
<li>When finished, start substituting 3 characters at a time</li>
<li>And so on till I have no more "possible characters"</li>
</ul>
<p>An example of the output expected is described below:</p>
<ul>
<li>I have known string "This is my string"</li>
<li>I have a list of possible characters "!$"</li>
<li>I have the characters to substitute "is"</li>
</ul>
<p>First, the program would proceed by changing every i in !, having:</p>
<pre><code>"Th!s !s my str!ng"
</code></pre>
<p>Next, it would change s in $:</p>
<pre><code>"Thi$ i$ my $tring"
</code></pre>
<p>Now I finished the 1-character permutation and I need to start 2 characters permutations:</p>
<pre><code>"Th!$ !s my $tr!ng"
</code></pre>
<p>Since I have only 1 pair, I only have one possible permutation here, hence the program finishes.</p>
<p>I am trying to figure out how to do this in python, but I only end up in an infinite list of "if .. then.." and there must be a more efficient way of doing it.</p>
<p>For those curious, I am interested in this because I "lost" my password. I mean, my password is something like "I love ice cream", but being the responsible person I am, I changed some of the characters with symbols and now I have no clue what was it...</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't do exactly what you're asking for, but it might help:</p>
<pre><code>from itertools import product

SUBSTITUTIONS = {
    "i": "!1|",
    "o": "0",
    "s": "$5",
}

def sub(text):
    possibilities = [c + SUBSTITUTIONS.get(c, "") for c in text]
    # 'spoils' -&gt; ['s$5', 'p', 'o0', 'i!1|', 'l', 's$5']
    for subbed in product(*possibilities):
        print("".join(subbed))
</code></pre>
<p>It uses <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a> to iterate over every possible combination of <code>SUBSTITUTIONS</code> for <code>text</code>:</p>
<pre><code>&gt;&gt;&gt; sub('spoils')
spoils spoil$ spoil5 spo!ls spo!l$ spo!l5 spo1ls spo1l$ spo1l5
spo|ls spo|l$ spo|l5 sp0ils sp0il$ sp0il5 sp0!ls sp0!l$ sp0!l5
sp01ls sp01l$ sp01l5 sp0|ls sp0|l$ sp0|l5 $poils $poil$ $poil5
$po!ls $po!l$ $po!l5 $po1ls $po1l$ $po1l5 $po|ls $po|l$ $po|l5
$p0ils $p0il$ $p0il5 $p0!ls $p0!l$ $p0!l5 $p01ls $p01l$ $p01l5
$p0|ls $p0|l$ $p0|l5 5poils 5poil$ 5poil5 5po!ls 5po!l$ 5po!l5
5po1ls 5po1l$ 5po1l5 5po|ls 5po|l$ 5po|l5 5p0ils 5p0il$ 5p0il5
5p0!ls 5p0!l$ 5p0!l5 5p01ls 5p01l$ 5p01l5 5p0|ls 5p0|l$ 5p0|l5
</code></pre>
<p>I've reformatted the output for compactness, but you get the idea. Obviously, the number of candidate passwords is going to increase exponentially with the number of substitutions, but there's not much you can do about that.</p>
</div>
