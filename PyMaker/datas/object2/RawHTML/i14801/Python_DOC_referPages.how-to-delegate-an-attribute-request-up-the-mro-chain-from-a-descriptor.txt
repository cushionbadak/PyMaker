<div class="post-text" itemprop="text">
<p>If I have a parent class and a child class, I get the following behavior in Python when asking for attributes:</p>
<pre><code>class Parent():
    i = 1

class Child(Parent):
    def __init__(self, j = 2):
        self.j = j

ch = Child()
print(ch.i, ch.j) # 1 2
</code></pre>
<p>The request for the <code>i</code> and <code>j</code> attributes go up the MRO chain as expected; <code>i</code> is found in the parent class attributes, <code>j</code> is found in the instance attributes. </p>
<p>Now, if I add a generic descriptor and replace the <code>j</code> attribute in <code>Child</code>, this happens: </p>
<pre><code>class _Attr():
    def __init__(self, attr_name):
        self.attr_name = '_' + attr_name
    def __get__(self, instance, klass):
        return getattr(instance, self.attr_name)

class Child(Parent):
    j = _Attr('j')
    def __init__(self, j = 2):
        self._j = j

ch = Child()
print(ch.i, ch.j) # 1 2
</code></pre>
<p>So far, so good. </p>
<p>However, using the above descriptor, if we do something like this: </p>
<pre><code>class Child(Parent):
    j = _Attr('j')
    i = _Attr('i')
    def __init__(self, j = 2):
        self._j = j

ch = Child()
print(ch.i, ch.j) # AttributeError: 'Ch" object has no attribute '_i'
</code></pre>
<p>This error occurs because of this failed attribute lookup:</p>
<pre><code>return getattr(ch, '_i')
</code></pre>
<p>What I want is for the descriptor to "fail silently" and for the attribute lookup to continue up the MRO chain. I'm unsure how to do this. </p>
<p>I tried this: </p>
<pre><code>class _Attr():
    def __init__(self, attr_name):
        self.attr_name = '_' + attr_name
    def __get__(self, instance, klass):
        result = getattr(instance, self.attr_name, None)
        if result == None:
            return NotImplemented
        else:
            return result
</code></pre>
<p>But that does not do the trick. How can I get the behavior I want? I have a feeling I need to use <code>super()</code> somehow in this case, but I don't know what to do with it. </p>
</div>
<div class="post-text" itemprop="text">
<p>Two things.</p>
<ol>
<li><p>you need to store the reference to the actual attribute name in the <code>_Attr</code>, so that you can use that in the parent lookup.</p></li>
<li><p>during the lookup, you can delegate the attribute fetching work to the <code>Parent</code> class, with <code>super(klass, instance)</code></p></li>
</ol>
<p>So your <code>_Attr</code> would look like this</p>
<pre><code>class _Attr():

    def __init__(self, attr_name):
        self._original_name = attr_name
        self.attr_name = '_' + attr_name

    def __get__(self, instance, klass):
        if hasattr(instance, self.attr_name):
            return getattr(instance, self.attr_name)
        return getattr(super(klass, instance), self._original_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can take care of setting _i in the init method as follows.</p>
<pre><code>class Child(P):
    j = _Attr('j')
    i = _Attr('i')
    def __init__(self, j = 2):
        self._j = j
        self._i = P.i

ch = Child()
print(ch._i, ch._j) 
</code></pre>
</div>
<span class="comment-copy">haven't tested yet, but this won't result in a circular reference...? if not, why doesn't <code>getattr(super(klass, instance), self._original_name)</code> put me right back into the descriptor again...?</span>
<span class="comment-copy">confirmed that it works! now i need to figure out WHY it works... how does <code>super()</code> know we have already looked in the descriptor?</span>
<span class="comment-copy">@RickTeachey When we do <code>super(klass, instance)</code>, it creates a Proxy object, which will help us access the parent class. So, when we do <code>getattr(super(klass, instance)...</code> it will directly hit the <code>Parent</code> for <code>self._original_name</code>. Remember, here, <code>klass</code> is <code>Child</code> and <code>instance</code> is <code>ch</code>.</span>
<span class="comment-copy">@RickTeachey You might want to start with <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a> and <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow noreferrer">this</a>.</span>
<span class="comment-copy">@RickTeachey Well, if you think most of the times your code will not fail, then you can go with this approach. After all, Python encourages <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> :-)</span>
<span class="comment-copy">interesting way of doing it i hadn't thought of. i'm more focused on getting it working by tweaking the descriptor in this particular situation though.</span>
