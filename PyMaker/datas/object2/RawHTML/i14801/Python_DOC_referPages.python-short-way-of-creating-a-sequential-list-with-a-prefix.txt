<div class="post-text" itemprop="text">
<p>how can I generate a string (or Pandas series) like below:</p>
<pre><code>a1,a2,a3,a4,...,a19
</code></pre>
<p>the following works, but I would like to know a shorter way</p>
<pre><code>my_str = ""
for i in range(1, 20):
   comma = ',' if i!= 19 else ''
   my_str += "d" + str(i) + comma
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just use a list comprehension to generate the individual elements (using string concatenation or <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format</code></a>), and then <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer">join</a> the resulting list on the separator string (the comma):</p>
<pre><code>&gt;&gt;&gt; ['a{}'.format(i) for i in range(1, 20)]
['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10', 'a11', 'a12', 'a13', 'a14', 'a15', 'a16', 'a17', 'a18', 'a19']
&gt;&gt;&gt; ','.join(['a{}'.format(i) for i in range(1, 20)])
'a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>s = ','.join(["a%d" % i for i in range(1,20)])
print(s)
</code></pre>
<p>Output:</p>
<pre>a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19
</pre>
<p><s>(This uses a generator expression, which is more efficient than joining over a list comprehension -- only slightly, with such a short list, however)</s>  This now uses a list comprehension!  See comments for an interesting read about why list comprehensions are more appropriate than generator expressions for <code>join</code>.</p>
</div>
<span class="comment-copy">You have redundant parenthesis: <code>','.join("a%d" % i for i in range(1,20))</code></span>
<span class="comment-copy">Unlike common belief, joining on a generator expression is <i>not</i> more efficient than joining on a list directly. See <a href="http://stackoverflow.com/a/9061024/216074">this answer</a> for details.</span>
<span class="comment-copy">@DanD. they're not redundant, they're explicit -- if you were to need additional arguments to the outer function (<code>join</code>, in this case), you would need them.</span>
<span class="comment-copy">@poke, I could never argue with Raymond Hettinger -- will update accordingly.</span>
<span class="comment-copy">@poke, I agree.  But in the spirit of "explicit is better than implicit", I tend to leave them, to avoid future confusion.  If the same generator were applied to say, <code>max(..., key=...)</code>, it would be an odd use indeed, but you would need the parens.</span>
