<div class="post-text" itemprop="text">
<p>I have three csv file: <em>1.csv</em>, <em>2.csv</em>, <em>3.csv</em> like these:</p>
<pre><code>➜  ~  cat 1.csv 
1,1,1,1,1,1
➜  ~  cat 2.csv 
2,2,2,2,2,2
➜  ~  cat 3.csv 
3,3,3,3,3,3
</code></pre>
<p>If I do:</p>
<pre><code>➜  ~  cat &lt; 1.csv &lt; 2.csv &lt; 3.csv &gt; 4.csv
</code></pre>
<p>I obtain:</p>
<pre><code>➜  ~  cat 4.csv 
1,1,1,1,1,1
2,2,2,2,2,2
3,3,3,3,3,3
</code></pre>
<p>as I want.</p>
<p>Now I want to do this in Python subprocess.call </p>
<pre><code>import subprocess as sp

sp.call('cat &lt; 1.csv &lt; 2.csv &lt; 3.csv &gt; 4.csv', shell=True)
</code></pre>
<p>but the result is:</p>
<pre><code>➜  ~  cat 4.csv 
3,3,3,3,3,3
</code></pre>
<p>In these ways it doesn't create 4.csv file:</p>
<pre><code>sp.call(['cat', '&lt;', '1.csv', '&lt;', '2.csv', '&lt;', '3.csv', '&gt;', '4.csv'], stdout=sp.PIPE,stderr=sp.PIPE
</code></pre>
<p>Or</p>
<pre><code>mylist = ['cat', '&lt;', '1.csv', '&lt;', '2.csv', '&lt;', '3.csv', '&gt;', '4.csv']
sp.call(mylist, stdout=sp.PIPE,stderr=sp.PIPE)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both of these work:</p>
<p><code>sp.call('cat 1.csv 2.csv 3.csv &gt; 4.csv', shell=True)
</code></p>
<p>and</p>
<p><code>sp.call('cat &lt; 1.csv &gt; 4.csv', shell=True)
sp.call('cat &lt; 2.csv &gt;&gt; 4.csv', shell=True)
sp.call('cat &lt; 3.csv &gt;&gt; 4.csv', shell=True)
</code></p>
<p>Not sure what your real objective is. If you just want to concatenate some files then doing it directly in python is the way to go. If you want to chain-append some program outputs then I would do it using the 2nd method (one per line).</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be achieved easily using just python:</p>
<pre><code>import fileinput
with open("4.csv", "a") as out:
    for f in fileinput.input(["1.csv","2.csv","3.csv"]):
        out.write(f)
</code></pre>
<p>Using subprocess you could redirect:</p>
<pre><code>from subprocess import check_call
with open("4.csv", "a") as out:
     check_call(["cat", "1.csv", "2.csv", "3.csv"],stdout=out)
</code></pre>
<p>I would recommend using the first example.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you redirect multiple times, all the redirection are performed, but only the last redirection will take effect (assuming none of the earlier redirection cause error).</p>
<pre><code>$ cat &lt; 1.csv &lt; 2.csv &lt; 3.csv &gt; 4.csv
</code></pre>
<p>The above is equivalent to :</p>
<pre><code>$ cat &lt; 3.csv &gt; 4.csv
</code></pre>
<p>unless either of 1.csv, 2.csv or 3.csv doesn't exists in which case this command will expected to fail.</p>
<p>Try this :</p>
<pre><code>import subprocess as sp
sp.call('cat  1.csv  2.csv  3.csv &gt; 4.csv', shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the <a href="https://stackoverflow.com/a/29351066/4279"><code>fileinput</code> approach</a> is too slow, you could try to copy using larger chunks:</p>
<pre><code>#!/usr/bin/env python
from shutil import copyfileobj

with open('4.csv', 'wb') as output_file:
    for filename in ['1.csv', '2.csv', '3.csv']:
        with open(filename, 'rb') as file:
            copyfileobj(file, output_file)
</code></pre>
<p><a href="https://docs.python.org/3/library/shutil.html#shutil.copyfileobj" rel="nofollow noreferrer"><code>copyfileobj()</code></a> accepts <code>length</code> parameter that you could experiment with to find out how it affects the time performance in your case.</p>
<p>If it is not enough, you could try <a href="https://docs.python.org/3/library/os.html#os.sendfile" rel="nofollow noreferrer"><code>os.sendfile()</code></a>:</p>
<pre><code>#!/usr/bin/env python3
import os

with open('4.csv', 'wb') as output_file:
    for filename in ['1.csv', '2.csv', '3.csv']:
        with open(filename, 'rb') as file:
            while os.sendfile(output_file.fileno(), file.fileno(), None, 1 &lt;&lt; 30) != 0:
                pass
</code></pre>
</div>
<span class="comment-copy">I wouldn't use the shell either...</span>
<span class="comment-copy">Does your cat command really return you this:  <code>1,1,1,1,1,1 2,2,2,2,2,2 3,3,3,3,3,3</code> ? In bash it returns <code>3,3,3,3,3,3</code>. This is the expected behavior unless you buffer the inputs from 1.csv and 2.csv</span>
<span class="comment-copy">This way with subprocess.call is faster than python way...I have to concatenate csv files with more than 10 millions of lines.</span>
<span class="comment-copy">@maxv15: <a href="http://stackoverflow.com/a/29351066/4279">you don't need <code>shell=True</code> here even if you use <code>subprocess</code></a></span>
<span class="comment-copy">First example is a good pythonic way...but I have to join big files (csv with more than 10 million of lines) and subprocess.call is faster.</span>
<span class="comment-copy">upvote for the pure Python solution. You could write <code>check_call(['cat', '1.csv', '2.csv', '3.csv'], stdout=out)</code> instead of the second code example.</span>
<span class="comment-copy">@J.F.Sebastian, yes indeed, edited thanks.</span>
<span class="comment-copy">This is a good solution! I didn't know copyfileobj. Thanks.</span>
