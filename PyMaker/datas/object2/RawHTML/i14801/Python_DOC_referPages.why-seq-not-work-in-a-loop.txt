<div class="post-text" itemprop="text">
<pre><code>for i in range(10):
    print(i, sep = ',', end = '')
</code></pre>
<p>It should be <code>0,1,2,3,4,5,6,7,8,9</code>,but the truth is 
<img alt="enter image description here" src="https://i.stack.imgur.com/95Iqb.png"/>
The <code>sep</code> does not work. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The optional <code>sep</code> argument is used to define the separator between comma separated argument values that are fed to the <code>objects</code> parameter of <code>print</code>. <code>objects</code> is a variable argument parameter, which means it can take any number of arguments (or an unpacked iterable).</p>
<p>From the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow">docs</a>:</p>
<blockquote>
<p><strong>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)</strong></p>
<p>Print
  objects to the text stream file, separated by sep and followed by end.
  sep, end and file, if present, must be given as keyword arguments.</p>
<p>All non-keyword arguments are converted to strings like str() does and
  written to the stream, separated by sep and followed by end. Both sep
  and end must be strings; they can also be None, which means to use the
  default values. If no objects are given, print() will just write end.</p>
</blockquote>
<p>A better way of writing your code would be the following:</p>
<pre><code>print(*range(10), sep=',', end='')
</code></pre>
<p>This uses the <code>*</code> operator to unpack the iterable and feed each of its elements in as arguments to the <code>print</code> function.</p>
<p>It is equivalent to:</p>
<pre><code>print(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, sep=',', end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this loop, <code>i</code> is always a one digit integer and this can't be seperated.</p>
<p>It would be like this:</p>
<pre><code>print("1", sep=',', end='')
print("2", sep=',', end='')
print("3", sep=',', end='')
...
</code></pre>
</div>
<span class="comment-copy">You're only printing a single number at a time, there's nothing to separate as far as <code>print</code> is concerned.</span>
<span class="comment-copy">You should do something like: <code>','.join([str(i) for i in range(10)])</code>. Others already mentioned why your version doesn't work.</span>
<span class="comment-copy">understand, thanks.</span>
<span class="comment-copy">Does 'sep' just work for sequence?</span>
<span class="comment-copy"><code>sep</code> mean seperator, and it only works if it can seperate something. So yes, it needs something it can iterate over. What do you expect when you tell <code>print</code> to seperate "1"?</span>
<span class="comment-copy">understand, thanks.</span>
