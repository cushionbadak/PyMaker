<div class="post-text" itemprop="text">
<p>I was wondering why I should use something like this:</p>
<pre><code>name = "Doe"
surname = "John"
print("He is {0} {1}".format(surname, name))
</code></pre>
<p>Instead of:</p>
<pre><code>name = "Doe"
surname = "John"
print("He is" + surname + " " + name) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For starters, try doing this with <code>+</code>:</p>
<pre><code>&gt;&gt;&gt; concatenate_me = (1,2,99999,100,600, 80)
&gt;&gt;&gt;'{0} {0} {2} {2} {1} {2} {3} {5} {5} {4} {0} {2}'.format(*concatenate_me)
</code></pre>
<p><strong><code>.format()</code> benefits:</strong></p>
<ul>
<li><p>Contains <em>placeholders</em>, <sup><em>i.e.</em></sup><code>..{0}..{1}..{2}</code>. Using <code>.format</code>, arguments passed are substituted into their respective placeholders (based on their order). This allows you to re-use arguments, as seen in the example above. </p></li>
<li><p>In each replacement with <code>.format</code>, you have a <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow">format specification</a> (<code>:</code>). This specification allows you control with respect to many properties for each substitution you make, and there's a whole mini-language for it. </p></li>
</ul>
<p>Additionally, <code>.format</code> is a function, which you can pass as an argument when needed. In Python 3 it is called <a href="https://docs.python.org/3.1/library/string.html#format-string-syntax" rel="nofollow">advanced string formatting</a> as it is much more powerful than simple concatenation. </p>
<hr/>
<p>You can do some pretty wild and flexible things if you <em>really</em> want using the <code>.format</code> function as well, for instance:</p>
<pre><code>&gt;&gt;&gt;'Python {0.version_info[0]:!&lt;13.2%}'.format(sys)
'Python 300.00%!!!!!!'
</code></pre>
<p>And one further example with a dictionary, to display its ability to take keyword arguments:</p>
<pre><code>&gt;&gt;&gt;my_dict = { 'adjective': 'cool', 'function':'format'}
&gt;&gt;&gt;"Look how awesome my {adjective} Python {function} skills are!".format(**my_dict)
'Look how awesome my cool Python format skills are.'
</code></pre>
<p>There's some further examples and uses in the <a href="https://docs.python.org/2/library/string.html#format-examples" rel="nofollow">Python docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>format</code> is much more powerful, and as you can see in the other answer, you can do a loot of cool things with it. However, I would like to add that format is not the fastest (at least in python 3.4 on ubuntu 14.04). For simple formatting, plus notation is faster. For example:</p>
<pre><code>import timeit


print(timeit.timeit("name = \"Doe\"; surname = \"John\"; 'He is {0} {1}'.format(surname, name)", number=100000))
# 0.04642631400201935

print(timeit.timeit("name = \"Doe\"; surname = \"John\"; \"He is\" + surname + \" \" + name", number=100000))
# 0.01718082799925469
</code></pre>
</div>
<span class="comment-copy">More readable and more pythonic. :)</span>
<span class="comment-copy">also a lot more convenient if what you want to print is of mixed types</span>
<span class="comment-copy">It can make localization a lot easier as word order can change between languages.</span>
