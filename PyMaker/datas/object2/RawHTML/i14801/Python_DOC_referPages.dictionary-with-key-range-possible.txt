<div class="post-text" itemprop="text">
<p>I am trying to assign multiple keys to the same value in a single step and am having trouble.</p>
<pre><code>stateDict = {1:'AZ', 2:'AZ', 3:'AZ', 4:'AZ'.......}
</code></pre>
<p>I would like to assign a range of numbers like <code>0-100</code> all to <code>'AZ'</code> without having to assign the individually.</p>
<p>Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="noreferrer">dictionary comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; {x:'AZ' for x in range(1, 100)} # Use xrange in Python 2
{1: 'AZ', 2: 'AZ', 3: 'AZ', 4: 'AZ', 5: 'AZ', 6: 'AZ', 7: 'AZ', 8: 'AZ', 9: 'AZ', 10: 'AZ', 11: 'AZ', 12: 'AZ', 13: 'AZ', 14: 'AZ', 15: 'AZ', 16: 'AZ', 17: 'AZ', 18: 'AZ', 19: 'AZ', 20: 'AZ', 21: 'AZ', 22: 'AZ', 23: 'AZ', 24: 'AZ', 25: 'AZ', 26: 'AZ', 27: 'AZ', 28: 'AZ', 29: 'AZ', 30: 'AZ', 31: 'AZ', 32: 'AZ', 33: 'AZ', 34: 'AZ', 35: 'AZ', 36: 'AZ', 37: 'AZ', 38: 'AZ', 39: 'AZ', 40: 'AZ', 41: 'AZ', 42: 'AZ', 43: 'AZ', 44: 'AZ', 45: 'AZ', 46: 'AZ', 47: 'AZ', 48: 'AZ', 49: 'AZ', 50: 'AZ', 51: 'AZ', 52: 'AZ', 53: 'AZ', 54: 'AZ', 55: 'AZ', 56: 'AZ', 57: 'AZ', 58: 'AZ', 59: 'AZ', 60: 'AZ', 61: 'AZ', 62: 'AZ', 63: 'AZ', 64: 'AZ', 65: 'AZ', 66: 'AZ', 67: 'AZ', 68: 'AZ', 69: 'AZ', 70: 'AZ', 71: 'AZ', 72: 'AZ', 73: 'AZ', 74: 'AZ', 75: 'AZ', 76: 'AZ', 77: 'AZ', 78: 'AZ', 79: 'AZ', 80: 'AZ', 81: 'AZ', 82: 'AZ', 83: 'AZ', 84: 'AZ', 85: 'AZ', 86: 'AZ', 87: 'AZ', 88: 'AZ', 89: 'AZ', 90: 'AZ', 91: 'AZ', 92: 'AZ', 93: 'AZ', 94: 'AZ', 95: 'AZ', 96: 'AZ', 97: 'AZ', 98: 'AZ', 99: 'AZ'}
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/stdtypes.html#dict.fromkeys" rel="nofollow">.fromkeys()</a> method:</p>
<pre><code>&gt;&gt;&gt; d={}.fromkeys(range(1, 101), 'AZ')
&gt;&gt;&gt; d
{1: 'AZ', 2: 'AZ', 3: 'AZ', 4: 'AZ', 5: 'AZ', 6: 'AZ', 7: 'AZ', 8: 'AZ', 9: 'AZ', 10: 'AZ', 11: 'AZ', 12: 'AZ', 13: 'AZ', 14: 'AZ', 15: 'AZ', 16: 'AZ', 17: 'AZ', 18: 'AZ', 19: 'AZ', 20: 'AZ', 21: 'AZ', 22: 'AZ', 23: 'AZ', 24: 'AZ', 25: 'AZ', 26: 'AZ', 27: 'AZ', 28: 'AZ', 29: 'AZ', 30: 'AZ', 31: 'AZ', 32: 'AZ', 33: 'AZ', 34: 'AZ', 35: 'AZ', 36: 'AZ', 37: 'AZ', 38: 'AZ', 39: 'AZ', 40: 'AZ', 41: 'AZ', 42: 'AZ', 43: 'AZ', 44: 'AZ', 45: 'AZ', 46: 'AZ', 47: 'AZ', 48: 'AZ', 49: 'AZ', 50: 'AZ', 51: 'AZ', 52: 'AZ', 53: 'AZ', 54: 'AZ', 55: 'AZ', 56: 'AZ', 57: 'AZ', 58: 'AZ', 59: 'AZ', 60: 'AZ', 61: 'AZ', 62: 'AZ', 63: 'AZ', 64: 'AZ', 65: 'AZ', 66: 'AZ', 67: 'AZ', 68: 'AZ', 69: 'AZ', 70: 'AZ', 71: 'AZ', 72: 'AZ', 73: 'AZ', 74: 'AZ', 75: 'AZ', 76: 'AZ', 77: 'AZ', 78: 'AZ', 79: 'AZ', 80: 'AZ', 81: 'AZ', 82: 'AZ', 83: 'AZ', 84: 'AZ', 85: 'AZ', 86: 'AZ', 87: 'AZ', 88: 'AZ', 89: 'AZ', 90: 'AZ', 91: 'AZ', 92: 'AZ', 93: 'AZ', 94: 'AZ', 95: 'AZ', 96: 'AZ', 97: 'AZ', 98: 'AZ', 99: 'AZ', 100: 'AZ'}
</code></pre>
<p>If the dictionary is already existing, use .update():</p>
<pre><code>&gt;&gt;&gt; d={1:'A', 2:'B', 3:'C'}
&gt;&gt;&gt; d.update({}.fromkeys(range(4,10), 'the rest'))
&gt;&gt;&gt; d
{1: 'A', 2: 'B', 3: 'C', 4: 'the rest', 5: 'the rest', 6: 'the rest', 7: 'the rest', 8: 'the rest', 9: 'the rest'}
</code></pre>
<p>Which let's you do multiple ranges with different values:</p>
<pre><code>&gt;&gt;&gt; d={}.fromkeys(range(5), 'AZ')
&gt;&gt;&gt; d
{0: 'AZ', 1: 'AZ', 2: 'AZ', 3: 'AZ', 4: 'AZ'}
&gt;&gt;&gt; d.update({}.fromkeys(range(5,10), 'AK'))
&gt;&gt;&gt; d
{0: 'AZ', 1: 'AZ', 2: 'AZ', 3: 'AZ', 4: 'AZ', 5: 'AK', 6: 'AK', 7: 'AK', 8: 'AK', 9: 'AK'}
</code></pre>
<p>Think of it as kinda like a slice for a dictionary. </p>
<p>Don't make this mistake with it though:</p>
<pre><code>&gt;&gt;&gt; d={}.fromkeys(range(5), [])
&gt;&gt;&gt; d
{0: [], 1: [], 2: [], 3: [], 4: []}
&gt;&gt;&gt; d[0].append('mistake')
&gt;&gt;&gt; d
{0: ['mistake'], 1: ['mistake'], 2: ['mistake'], 3: ['mistake'], 4: ['mistake']}
</code></pre>
<p>Since <em>value</em> in <code>fromkeys(seq[, value])</code> is fixed, not interated. </p>
</div>
<div class="post-text" itemprop="text">
<p>Define an empty dictionary then iterate over the numbers in the range 1 to 100 then assign <code>d[key]='AZ'</code> AZ to each number as dictionary key.</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i in range(1,100):
        d[i] = 'AZ'


&gt;&gt;&gt; d
{1: 'AZ', 2: 'AZ', 3: 'AZ', 4: 'AZ', 5: 'AZ', 6: 'AZ', 7: 'AZ', 8: 'AZ', 9: 'AZ', 10: 'AZ', 11: 'AZ', 12: 'AZ', 13: 'AZ', 14: 'AZ', 15: 'AZ', 16: 'AZ', 17: 'AZ', 18: 'AZ', 19: 'AZ', 20: 'AZ', 21: 'AZ', 22: 'AZ', 23: 'AZ', 24: 'AZ', 25: 'AZ', 26: 'AZ', 27: 'AZ', 28: 'AZ', 29: 'AZ', 30: 'AZ', 31: 'AZ', 32: 'AZ', 33: 'AZ', 34: 'AZ', 35: 'AZ', 36: 'AZ', 37: 'AZ', 38: 'AZ', 39: 'AZ', 40: 'AZ', 41: 'AZ', 42: 'AZ', 43: 'AZ', 44: 'AZ', 45: 'AZ', 46: 'AZ', 47: 'AZ', 48: 'AZ', 49: 'AZ', 50: 'AZ', 51: 'AZ', 52: 'AZ', 53: 'AZ', 54: 'AZ', 55: 'AZ', 56: 'AZ', 57: 'AZ', 58: 'AZ', 59: 'AZ', 60: 'AZ', 61: 'AZ', 62: 'AZ', 63: 'AZ', 64: 'AZ', 65: 'AZ', 66: 'AZ', 67: 'AZ', 68: 'AZ', 69: 'AZ', 70: 'AZ', 71: 'AZ', 72: 'AZ', 73: 'AZ', 74: 'AZ', 75: 'AZ', 76: 'AZ', 77: 'AZ', 78: 'AZ', 79: 'AZ', 80: 'AZ', 81: 'AZ', 82: 'AZ', 83: 'AZ', 84: 'AZ', 85: 'AZ', 86: 'AZ', 87: 'AZ', 88: 'AZ', 89: 'AZ', 90: 'AZ', 91: 'AZ', 92: 'AZ', 93: 'AZ', 94: 'AZ', 95: 'AZ', 96: 'AZ', 97: 'AZ', 98: 'AZ', 99: 'AZ'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, it is not possible, but it is easy to do via dictionary comprehension:</p>
<pre><code>state_dict = {n: 'AZ' for n in range(100)}
</code></pre>
</div>
<span class="comment-copy">Thank you very much!!</span>
<span class="comment-copy">If i wanted to do the same process but for many states at once, would the same format apply. For instance, assigning 1-100 to 'AZ' and 101-200 to 'AK'? Or would i need to call a new line of code each time?</span>
<span class="comment-copy">@Jerry - You could maybe put everything into one line with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>, but the solution wouldn't be very readable.  It would be better to do <code>d = {x:'AZ' for x in range(1, 100)}</code> on one line and then <code>d.update({x:'AK' for x in range(101, 200)})</code> on the next and so on.</span>
