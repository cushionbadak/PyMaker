<div class="post-text" itemprop="text">
<p>note: I'm using Python3</p>
<p>I've been searching everywhere and finding nothing complete. Asking on IRC everywhere. I need a regex expression that removes ALL IRC colour control codes. Nowhere is there a complete solution.</p>
<p>Bold, Italics, Underline, Reverse, Colour, and Plain text
The characters numbers are 2 29 31 22 3 15 respectively.</p>
<p><strong>Edited:</strong> </p>
<p>I just found a \x0f character being used also.</p>
<p>The Colour character (3) contains possibly max 2 digits after it, with a possible comma then up to max of 2 digits more or no digits just character 3. It might also just be a comma with plain text after it in which case the comma should be left in the string.</p>
<p>Please help I am stuck in the mud.</p>
<p>Example: </p>
<pre><code>'\003' + '12,4' + 'Red and blue' + '\003'+', \031Underline\031' 
</code></pre>
<p>The 12 is blue and the 4 is red, used with character 3.</p>
<p>The expected output is just "Red and blue, Underline" plain text, no colour codes. That way I can use:</p>
<pre><code>line = 'Red and blue, Underline'

line.split(' ')[0] == 'Red'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[\x02\x0F\x16\x1D\x1F]|\x03(\d{,2}(,\d{,2})?)?
</code></pre>
<p>This will match all IRC formatting codes you have mentioned. In the case of color codes, it will even catch malformed ones like <code>\x03,11</code>, <code>\x034,</code> and <code>\x03,</code>. I realize this may or may not be ideal depending on how you wish to handle malformed codes like those, but you could easily tweak it to do what you want. If need be, you can explain how you'd like those handled and I can update the answer to reflect that.</p>
<p>As for what to do, one solution is:</p>
<pre><code>pattern = r'[\x02\x0F\x16\x1D\x1F]|\x03(\d{,2}(,\d{,2})?)?';
text = '\x0312,4Text\x03';
stripped = re.sub(pattern, '', text);
</code></pre>
<p>See also <a href="https://docs.python.org/3/library/re.html" rel="nofollow">Section 6.2</a> of the Python docs.</p>
</div>
<div class="post-text" itemprop="text">
<p>I know I asked for a regex solution but I finally got around to coding a working non regex solution.</p>
<p>I updated the code to be more compatible with colour codes; allowing infinity colour code numbers as the irc clients wrap the colours around starting from the first colour (0 which is white) comes after the end of the colour list and so forth forever.  So now the colourstrip() will treat the colour numbers for what they are instead of the old code which demanded the colour numbers to be a maximum of 2 digits which is pointless to do anyway.</p>
<pre><code>def colourstrip(data):
    find = data.find('\x03')
    while find &gt; -1:
        done = False
        data = data[0:find] + data[find+1:]
        if len(data) &lt;= find+1:
            done = True
        try:
            assert not done
            assert int(data[find])
            while True:
                assert int(data[find])
                data = data[0:find] + data[find+1:]
        except:
            if not done:
                if data[find] != ',': done = True

        if (not done) and (len(data) &gt; find+1) and (data[find] == ','):
            try:
                assert not done
                assert int(data[find+1])
                data = data[0:find] + data[find+1:]
                data = data[0:find] + data[find+1:]
            except:
                done = True
            try:
                assert not done
                while True:
                    assert int(data[find])
                    data = data[0:find] + data[find+1:]
            except: pass

        find = data.find('\x03')
    data = data.replace('\x02','')
    data = data.replace('\x1d','')
    data = data.replace('\x1f','')
    data = data.replace('\x16','')
    data = data.replace('\x0f','')
    return data

datastring = '\x03123434,27384This is coolour \x032689,34344This is too\x03'
print(colourstrip(datastring))
</code></pre>
<p>Thank you for the help everyone.</p>
</div>
<span class="comment-copy">an example along with expected output would be better.</span>
<span class="comment-copy">An example is 12,4red and blue, underline. The control characters dont display in a browser.  Maybe '\003' + '12,4' + 'Red and blue'+'\003'+', \031Underline\031'</span>
<span class="comment-copy">please use code blocks to display code, control chars can display  in browser if code block is used . You can edit your question to update that</span>
<span class="comment-copy">Maybe some information from this page - <a href="http://www.ircbeginner.com/ircinfo/colors.html" rel="nofollow noreferrer">ircbeginner.com/ircinfo/colors.html</a> - should be helpful. Judging by the question, it seems you are not going to <i>remove</i>, but rather <i>replace</i> these codes with words denoting them. Then, you might even need no regex solution...</span>
<span class="comment-copy">With \x03,11 \x034, and \x03, the comma shouldbe left in as plain text.  Also how do we use that regular expression? text = '\x0312,4Text\x03; striptext = regex_that_returns_plain_text(text)</span>
<span class="comment-copy">Why would you want to leave the comma? You'd be handling malformed color codes by leaving behind a comma that shouldn't be there in the first place. The whole thing should be stripped. As for how to apply it, I edited the answer (you could have found this out yourself by searching for a few seconds though).</span>
<span class="comment-copy">ZeroKnight The comma stays because if you are colouring a comma or finishing the colour at a comma the comma stays. Its not malformed, its like that by design. so \x03, Text so it is in error if Text is a number because of the space after the control char? In all cases the comma is where the text starts at, not stripped out.</span>
<span class="comment-copy">ZeroKnight There is no removing of text. '\x0312, Text' is a blue comma followed by Text. That is how all the irc clients view the text. They dont try to fix broken colour attempts they just end the colour sequence.</span>
