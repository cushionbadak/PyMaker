<div class="post-text" itemprop="text">
<p>I am relatively new to Python and programming in general. I am working on writing a console application.</p>
<p>How do you write a console application that accepts commands in a terminal? For instance, like how a terminal itself accepts commands and does a corresponding task. Are the "commands" actually just functions in the application that are called by the user? Is the console interface itself just a function? E.g. :</p>
<pre><code>def console_interface():
    user_input = input()
    if user_input == "some_function":
        some_function()

    if user_input == "some_other_function":
        some_other_function()
</code></pre>
<p>Although it is not efficient, I know the above works because I have tested it. Is this general idea correct or is it way off?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's standard library offers a module that encapsulates exactly the "console application that accepts commands" functionality: see <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow">https://docs.python.org/3/library/cmd.html</a> .</p>
<p>In that module, the commands are actually <strong>methods</strong> of your class, which subclasses <code>cmd.Cmd</code>: <code>do_this</code>, <code>do_that</code>, etc, by naming convention.  The example at <a href="https://docs.python.org/3/library/cmd.html#cmd-example" rel="nofollow">https://docs.python.org/3/library/cmd.html#cmd-example</a> is a rich "console accepting commands" for turtle graphics, so you can play with it.</p>
<p>Didactically, you may want to start with far simpler examples given at <a href="http://pymotw.com/2/cmd/" rel="nofollow">http://pymotw.com/2/cmd/</a> -- that's Python 2 but the functionality is just about the same.  The excellent series of examples need a little adaptation to run in Python 3, but it shouldn't be too hard.</p>
<p>For example, consider the very first one:</p>
<pre><code>import cmd

class HelloWorld(cmd.Cmd):
    """Simple command processor example."""

    def do_greet(self, line):
        print "hello"

    def do_EOF(self, line):
        return True

if __name__ == '__main__':
    HelloWorld().cmdloop()
</code></pre>
<p>The <code>do_EOF</code> is what happens when the user terminates standard input (control-D on Unix); as <a href="https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop" rel="nofollow">https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop</a> says,</p>
<pre><code>An end-of-file on input is passed back as the string 'EOF'.
</code></pre>
<p>(In this case, the <code>return True</code> terminates the program).</p>
<p>The only thing you need to change to run this in Python 2 rather than 3 is the one line:</p>
<pre><code>        print "hello"
</code></pre>
<p>which must become</p>
<pre><code>        print("hello")
</code></pre>
<p>because <code>print</code>, which was a statement in Python 2, is now a function in Python 3.</p>
<p>I find the <code>cmd.py</code> sources at <a href="http://www.opensource.apple.com/source/python/python-3/python/Lib/cmd.py" rel="nofollow">http://www.opensource.apple.com/source/python/python-3/python/Lib/cmd.py</a> to also be quite instructive and I would recommend studying them as an introduction to the world of "dispatching"...!</p>
</div>
<span class="comment-copy">Have you had a look at the <code>cmd</code> module? I would recommend you using this: <a href="https://docs.python.org/2/library/cmd.html" rel="nofollow noreferrer">docs.python.org/2/library/cmd.html</a></span>
<span class="comment-copy">Also <code>argparse</code> <a href="https://docs.python.org/2/library/argparse.html#module-argparse" rel="nofollow noreferrer">docs.python.org/2/library/argparse.html#module-argparse</a></span>
<span class="comment-copy">You might want to look at <code>eval()</code> if all you need to do is dispatch the input.</span>
<span class="comment-copy">In general, yes, parsing the input of a user is what you are doing. Other solutions and libraries are built upon this and may add additional functionalities or a framework so you can easier extend it by without having to reinvent everything all the time.</span>
