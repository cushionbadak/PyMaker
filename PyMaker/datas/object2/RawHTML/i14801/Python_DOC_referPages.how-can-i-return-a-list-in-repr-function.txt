<div class="post-text" itemprop="text">
<p>I have a class Menu</p>
<pre><code>class Menu:

    options = []
    label = 'empty'

    def __init__(self, label, options):
        self.label = label
        self.options = options

    def __repr__(self):
        return '%s \n=====================\n\n%s' % (self.label, self.options[0])
</code></pre>
<p>What I am trying to do here is format the repr function so that it prints all the options. Right now it will correctly print</p>
<pre class="lang-none prettyprint-override"><code>Label

\==============

Option 1
</code></pre>
<p>But can I throw a for loop in that return statement, or is there a proper way of fixing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can join all the values in the list, with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a> function and return it like this</p>
<pre><code>return "{}\n=======\n\nOptions :[{}]".format(self.label, ", ".join(self.options))
</code></pre>
<p><strong>Note:</strong></p>
<ol>
<li><p>If you are creating an attribute called <code>options</code> in <code>__init__</code>, it will shadow the class level attribute <code>options</code>, when you access it with <code>self</code>.</p></li>
<li><p><code>self.options = options</code> will not create a new list when you assign. It will make both <code>self.options</code> and <code>options</code> refer the same list object passed. So, if you change <code>self.options</code>, it will be reflected in <code>options</code> as well. If you want to make a copy, you can use slicing like this <code>self.options = options[:]</code></p></li>
</ol>
</div>
<span class="comment-copy"><code>menu_options = </code> is not valid Python.</span>
<span class="comment-copy">What is the main difference between the %s approach and the .format approach ?  And yes I'll need to look into how classes actually work</span>
<span class="comment-copy">@Thustra You might want to check <a href="http://stackoverflow.com/q/5082452/1903116">this</a> to know more about <code>format</code> and <code>%</code> syntax differences.</span>
<span class="comment-copy">I'll accept it  I went with this for now to create the options list, to add some numbers.  <code>option_list = '\n'.join([str(self.options.index(option) + 1) + '. ' + option for option in self.options])</code>  And then I give that as the second parameter for format()</span>
