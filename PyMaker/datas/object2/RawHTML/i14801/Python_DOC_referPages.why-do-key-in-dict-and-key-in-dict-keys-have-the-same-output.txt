<div class="post-text" itemprop="text">
<p>I tried to search the keys in a dictionary, but I forgot to add the <code>keys()</code> function. I still got the expected answer.</p>
<p>Why is the result the same for these two expressions?</p>
<pre><code>key in dict
</code></pre>
<p>and</p>
<pre><code>key in dict.keys()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To understand why <code>key in dct</code> returns the same result as <code>key in dct.keys()</code> one needs to look in the past. Historically in Python 2, one would test the existence of a <em>key</em> in dictionary <code>dct</code> with <a href="https://docs.python.org/2.7/library/stdtypes.html#dict.has_key" rel="noreferrer"><code>dct.has_key(key)</code></a>. This was changed for <a href="https://docs.python.org/2/whatsnew/2.2.html#pep-234-iterators" rel="noreferrer">Python 2.2</a>, when the preferred way became <code>key in dct</code>, which basically did the same thing:</p>
<blockquote>
<p>In a minor related change, the <code>in</code> operator now works on dictionaries, so <code>key in dict</code>  is now equivalent to <code>dict.has_key(key)</code></p>
</blockquote>
<p>The behaviour of <code>in</code> is implemented internally in terms of the <code>__contains__</code> dunder method. Its behaviour is documented in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="noreferrer">Python language reference - 3 Data Model</a>:</p>
<blockquote>
<p><code>object.__contains__(self, item)</code></p>
<p>Called to implement membership test operators. Should return true if item is in <code>self</code>, false otherwise. <strong>For mapping objects, this should consider the keys of the mapping rather than the values or the key-item pairs.</strong>
  For objects that donâ€™t define <code>__contains__()</code>, the membership test first tries iteration via <code>__iter__()</code>, then the old sequence iteration protocol via <code>__getitem__()</code>, see this section in the language reference.</p>
</blockquote>
<p>(emphasis mine; dictionaries in Python are mapping objects)</p>
<p>In <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="noreferrer">Python 3</a>, the <code>has_key</code> method was removed altogether and now there <em>the</em> correct way to test for the existence of a key is solely <code>key in dict</code>, as documented.</p>
<hr/>
<p>In contrast with the 2 above, <code>key in dct.keys()</code> has <em>never been the correct</em> way of testing whether a key exists in a dictionary.
The result of both your examples is indeed the same, however <code>key in dct.keys()</code> is slightly slower on Python 3 and is abysmally slow on Python 2.</p>
<p><code>key in dct</code> returns true, if the <code>key</code> is found as a key in the <code>dct</code> in almost constant time operation - it does not matter whether there are two or a million keys - its time complexity is constant on average case (<strong>O(1)</strong>)</p>
<p><code>dct.keys()</code> in Python 2 creates a <code>list</code> of all keys; and in Python 3 a <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="noreferrer"><em>view</em></a> of keys; both of these objects understand the <code>key in x</code>. With Python 2 it works like for any <em>iterable</em>; the values are iterated over and <code>True</code> is returned as soon as one value is equal to the given value (here <code>key</code>).</p>
<p>In practice, in Python 2 you'd find <code>key in dct.keys()</code> much slower than <code>key in dict</code> (<code>key in dct.keys()</code> scales linearly with the number of keys - its runtime complexity is <strong>O(n)</strong>.)</p>
<p>In Python 3, the <code>key in dct.keys()</code> won't be much slower than <code>key in dct</code>as the <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="noreferrer"><em>view</em></a> does not make a list of the keys, and the access still would be <strong>O(1)</strong>, however in practice it would be slower by at least a constant value, and it is 7 more characters, so there is no reason to use it, even if on Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/reference/datamodel.html#data-model" rel="nofollow">Python data model</a> dictates that generally a membership test are normally implemented as an iteration through a sequence unless a container object supplies the special method <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow"> <code>__contains__</code> </a>. </p>
<p>As mentioned further in the document, for objects that does not implement the <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow"> <code>__contains__</code> </a> special method, the membership test first tries iteration via <code>__iter__()</code>, then the old sequence iteration protocol via <code>__getitem__()</code>.</p>
<p>Its important to know that for dictionaries, <code>dict.keys()</code> returns <strike>either an iterator</strike> either a dictionary view <strong>(Python 3.X)</strong> or a sequence (more precisely a list), in <strong>Python (2.X)</strong>. Membership test for a sequence/list is an <code>O(n)</code> complexity  where as for a dictionary like object which is implemented as a hash map, or a dictionary view which supports operation like supports operations like membership test and iteration has a complexity of O(1).</p>
<p>So for Python 2.X, there is a distinct difference in terms of what both does, that might impact performance, where as for Python 2.X, the only overhead is an extra function call.</p>
<p>In any case, it is always preferred to use the membership on the dict object rather than using the membership test on a dictionary view or a sequence which is returned by <code>dict.keys</code></p>
</div>
<span class="comment-copy">Have you consulted <a href="https://docs.python.org/2.7/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">the documentation</a>?</span>
<span class="comment-copy">@Shashank <code>&lt;dict&gt;.__iter__</code> isn't the same as <code>&lt;dict&gt;.keys()</code> -- in Python 2, <code>keys</code> returns a list,  in Python 3, <code>keys</code> returns a "view".  In Python 2, <code>&lt;dict&gt;.__iter__</code> is equivalent to <code>&lt;dict&gt;.iterkeys()</code>.  Also, you don't need to use a metaclass or innerclass in an object to implent <code>__iter__</code>.</span>
<span class="comment-copy">I realise that this is just an example, but <i>please</i> don't use <code>dict</code> as a variable name, as it shadows the built-in <code>dict</code> type. The same goes for <code>list</code>, <code>str</code>, <code>set</code>, etc.</span>
<span class="comment-copy">The time complexity of running key in dict vs key in dict.keys() was valuable</span>
