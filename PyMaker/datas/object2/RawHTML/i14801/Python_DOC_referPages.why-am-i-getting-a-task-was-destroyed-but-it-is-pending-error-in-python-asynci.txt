<div class="post-text" itemprop="text">
<p>I use <code>asyncio</code> and beautiful <code>aiohttp</code>. The main idea is that I make request to server (it returns links) and then I want to download files from all links in <strong>parallel</strong> (something like in an <a href="https://docs.python.org/3/library/asyncio-task.html#example-parallel-execution-of-tasks">example</a>).</p>
<p>Code:</p>
<pre><code>import aiohttp
import asyncio

@asyncio.coroutine
def downloader(file):
    print('Download', file['title'])
    yield from asyncio.sleep(1.0) # some actions to download
    print('OK', file['title'])


def run():
    r = yield from aiohttp.request('get', 'my_url.com', True))
    raw = yield from r.json()
    tasks = []
    for file in raw['files']:
        tasks.append(asyncio.async(downloader(file)))
        asyncio.wait(tasks)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(run())
</code></pre>
<p>But, when I try to run it, I have many "Download ..." outputs and</p>
<pre><code>Task was destroyed but it is pending!
</code></pre>
<p>And nothing about 'OK + filename'.</p>
<p>How can I fix that? </p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot to <code>yield from</code> the call to <code>asyncio.wait</code>. You also probably have the indentation on it wrong; you only want to run it after you've iterated over the entire <code>raw['files']</code> list. Here's the complete example with both mistakes fixed:</p>
<pre><code>import aiohttp
import asyncio

@asyncio.coroutine
def downloader(file):
    print('Download', file['title'])
    yield from asyncio.sleep(1.0) # some actions to download
    print('OK', file['title'])

@asyncio.coroutine
def run():
    r = yield from aiohttp.request('get', 'my_url.com', True))
    raw = yield from r.json()
    tasks = []
    for file in raw['files']:
        tasks.append(asyncio.async(downloader(file)))
    yield from asyncio.wait(tasks)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(run())
</code></pre>
<p>Without the call to <code>yield from</code>, <code>run</code> exits immediately after you've iterated over the entire list of files, which will mean your script exits, causing a whole bunch of unfinished <code>downloader</code> tasks to be destroyed, and the warning you saw to be displayed.</p>
</div>
<span class="comment-copy">Many thanks for nice answer</span>
