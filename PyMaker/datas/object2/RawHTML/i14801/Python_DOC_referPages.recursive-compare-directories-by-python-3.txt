<div class="post-text" itemprop="text">
<p>I need to compare directories. I use follow code (sample):</p>
<pre><code>def dir_comp(dir1, dir2):
    filecmp.clear_cache()
    DirComp = filecmp.dircmp(dir1, dir2)
    if len(DirComp.left_only) &gt; 0:
        for item in DirComp.left_only:
            print('File/folder', os.path.join(dir1, item), 'exist only in', dir1)
    if len(DirComp.right_only) &gt; 0:
        for item in DirComp.right_only:
            print('File/folder', os.path.join(dir2, item), 'exist only in', dir2)
    for CommonDirs in DirComp.common_dirs:
        new_dir1 = os.path.join(dir1, CommonDirs)
        new_dir2 = os.path.join(dir2, CommonDirs)
        dir_comp(new_dir1, new_dir2)
</code></pre>
<p>But code show different files only for root directory: <a href="http://i.stack.imgur.com/zUf2i.png" rel="nofollow">http://i.stack.imgur.com/zUf2i.png</a>. See screenshot with real different between directories:
<a href="http://i.stack.imgur.com/FpQTe.png" rel="nofollow">http://i.stack.imgur.com/FpQTe.png</a>.</p>
<p>What is wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like the subdirectories <code>n5/N51</code> and <code>n51/N5</code> are only present in one place (there is no <code>n5/N5</code> directory nor a <code>n51/N51</code>). The comparison by <code>dircmp</code> doesn't recurse into those directories, since it knows ahead of time that every file will be unmatched.</p>
<p>If this isn't what you want, you should probably treat unmatched directories differently from unmatched regular files, using <code>os.walk</code> to inspect their contents. Try something like this:</p>
<pre><code>def dir_comp(dir1, dir2):
    filecmp.clear_cache()
    DirComp = filecmp.dircmp(dir1, dir2)
    for item in DirComp.left_only:
        path = os.path.join(dir1, item)
        if os.path.isdir(path):
            for base, subdirs, files in os.walk(path):
                print("Folder", base, "exists only in", dir1)
                for file in files:
                    print("File", os.path.join(base, file), "exists only in", dir1)
        else:
            print('File', path, 'exist only in', dir1)

    for item in DirComp.right_only:
        path = os.path.join(dir2, item)
        if os.path.isdir(path):
            for base, subdirs, files in os.walk(path):
                print("Folder", base, "exists only in", dir2)
                for file in files:
                    print("File", os.path.join(base, file), "exists only in", dir2)
        else:
            print('File', os.path.join(path), 'exist only in', dir2)

    for CommonDirs in DirComp.common_dirs:
        new_dir1 = os.path.join(dir1, CommonDirs)
        new_dir2 = os.path.join(dir2, CommonDirs)
        dir_comp(new_dir1, new_dir2)
</code></pre>
<p>This should print all files that exist in only one folder (even if they're within a directory that only exists in that one). Note that the <code>DirComp</code> object you're getting already has the information you need for your recursion on the <code>CommonDirs</code>. Check out its <a href="https://docs.python.org/3/library/filecmp.html#filecmp.dircmp.subdirs" rel="nofollow"><code>subdirs</code></a> attribute. You could refactor your code so that you only call <code>filecmp.dircmp</code> once, and then pass the results into a recursive function to print them out.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def print_diff_files(dirs):
    for name in dirs.diff_files:
        diff_files.append(os.path.join(dirs.left, name))
        diff_files.append(os.path.join(dirs.right, name))
    for file_left in dirs.left_only:
        only_left.append(os.path.join(dirs.left, file_left))
    for file_right in dirs.right_only:
        only_right.append(os.path.join(dirs.right, file_right))
    for same_files in dirs.same_files:
        same_files_list.append(os.path.join(dirs.left, same_files))
        same_files_list.append(os.path.join(dirs.right, same_files))
    for sub_dirs in dirs.subdirs.values():
        print_diff_files(sub_dirs)

DirCompare = filecmp.dircmp('old', 'new')
print_diff_files(DirCompare)
</code></pre>
</div>
