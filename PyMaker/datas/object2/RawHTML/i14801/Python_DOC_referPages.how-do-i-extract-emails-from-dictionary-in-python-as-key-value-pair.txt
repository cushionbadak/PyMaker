<div class="post-text" itemprop="text">
<p>From the following dictionary  structure, how do I extract and print email addresses? E.g. I want to see 'smauel.david@gmail' 4, 'sdusa@yahoo.com' 1, etc.</p>
<pre><code>dict_items([('10:04:14', 1), ('3', 6), ('Thu', 6), ('19:51:21', 1),
('2008',27),  ('From', 27), ('11:35:08', 1), ('5', 1),
('sntp@hotmail.com', 3), ('Jan', 27), ('15:46:24', 1), ('14:50:18',
1),  ('11:37:30', 1), ('18:10:48', 1), ('17:07:00', 1), ('09:05:31',
1),  ('10:38:42', 1), ('sdusa@yahoo.com', 1),
('samuel.david@gmail.com', 4) ])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow"><strong>dict comprehensions</strong></a></p>
<pre><code>d = dict([('10:04:14', 1), ('3', 6), ('Thu', 6), ('19:51:21', 1),('2008',27),  ('From', 27), ('11:35:08', 1), ('5', 1),('sntp@hotmail.com', 3), ('Jan', 27), ('15:46:24', 1), ('14:50:18',1),  ('11:37:30', 1), ('18:10:48', 1), ('17:07:00', 1), ('09:05:31',1),  ('10:38:42', 1), ('sdusa@yahoo.com', 1),('samuel.david@gmail.com', 4) ])

{email:val for email, val in d.items() if '@' in email }
</code></pre>
<p><strong>output:</strong></p>
<pre><code> {'sdusa@yahoo.com': 1, 'samuel.david@gmail.com': 4, 'sntp@hotmail.com': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate the keys, and grab only those that contain <code>@</code> (assuming that all your keys are either hours or email addresses):</p>
<pre><code>d = dict([('10:04:14', 1), ('3', 6), ('Thu', 6), ('19:51:21', 1), ('2008',27),  ('From', 27), ('11:35:08', 1), ('5', 1), ('sntp@hotmail.com', 3), ('Jan', 27), ('15:46:24', 1), ('14:50:18', 1),  ('11:37:30', 1), ('18:10:48', 1), ('17:07:00', 1), ('09:05:31', 1),  ('10:38:42', 1), ('sdusa@yahoo.com', 1), ('samuel.david@gmail.com', 4) ])

for key in d:
    if "@" in key:
        print(key)
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>sntp@hotmail.com
samuel.david@gmail.com
sdusa@yahoo.com
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming:</p>
<pre><code>&gt;&gt;&gt; d=dict([('10:04:14', 1), ('3', 6), ('Thu', 6), ('19:51:21', 1),
... ('2008',27),  ('From', 27), ('11:35:08', 1), ('5', 1),
... ('sntp@hotmail.com', 3), ('Jan', 27), ('15:46:24', 1), ('14:50:18',
... 1),  ('11:37:30', 1), ('18:10:48', 1), ('17:07:00', 1), ('09:05:31',
... 1),  ('10:38:42', 1), ('sdusa@yahoo.com', 1),
... ('samuel.david@gmail.com', 4) ])
</code></pre>
<p>If the address are of the type you show, you can use <code>filter</code> on the keys:</p>
<pre><code>&gt;&gt;&gt; list(filter(lambda s: '@' in s, d.keys()))
['sdusa@yahoo.com', 'samuel.david@gmail.com', 'sntp@hotmail.com']
</code></pre>
<p>If, however, you might have more complete strings representing the RFC822 email address of <code>'Comment' &lt;address&gt;</code> type (or a mixture) you might want to use <a href="https://docs.python.org/3/library/email.util.html#email.utils.parseaddr" rel="nofollow">email.utils.parseaddr()</a> to separate the comment (or real name) from the actual address:</p>
<pre><code>&gt;&gt;&gt; from email.utils import parseaddr
&gt;&gt;&gt; parseaddr('"Santa" &lt;Santa@np.org&gt;')
('Santa', 'Santa@np.org')
</code></pre>
<p>So then:</p>
<pre><code>&gt;&gt;&gt; d=dict([('10:04:14', 1), ('3', 6), ('Thu', 6), ('19:51:21', 1),
... ('2008',27),  ('From', 27), ('11:35:08', 1), ('5', 1),
... ('sntp@hotmail.com', 3), ('Jan', 27), ('15:46:24', 1), ('14:50:18',
... 1),  ('11:37:30', 1), ('18:10:48', 1), ('17:07:00', 1), ('09:05:31',
... 1),  ('10:38:42', 1), ('sdusa@yahoo.com', 1),
... ('"Sammy Davis, Jr." &lt;samuel.david@gmail.com&gt;', 4) ])
&gt;&gt;&gt; 
&gt;&gt;&gt; from email.utils import parseaddr
&gt;&gt;&gt; [parseaddr(s)[1] for s in d.keys() if '@' in parseaddr(s)[1]]
['sntp@hotmail.com', 'samuel.david@gmail.com', 'sdusa@yahoo.com']
</code></pre>
<p>Note: <code>parseaddr</code> Only separates the parts of a valid but complete RFC822 address; it does not validate that it is a real address.</p>
</div>
<span class="comment-copy">This community rocks. Great people, always willing to help.</span>
<span class="comment-copy">Brilliant, short and simple. It worked. I love this community of developers and trust their expertise. It was a brain freeze and just couldn't think. You saved my lot of time. I hope to stay in touch for professional advice. A million thanks.</span>
<span class="comment-copy">Brilliant, short and simple. It worked. I love this community of developers and trust their expertise. It was a brain freeze and just couldn't think. You saved my lot of time. I hope to stay in touch for professional advice. A million thanks.</span>
<span class="comment-copy">@Samuel are you a bot ? :)</span>
<span class="comment-copy">Yes indeed now I am back on track. Thanks again. Have a nice weekend.</span>
<span class="comment-copy">Brilliant, short and simple. It worked. I love this community of developers and trust their expertise. It was a brain freeze and just couldn't think. You saved my lot of time. I hope to stay in touch for professional advice. A million thanks. This was also an alternate solution and it worked fine as well. I learned new things.</span>
