<div class="post-text" itemprop="text">
<p>There is the following simple script:</p>
<pre><code>def MyFunction(digit):
    if digit &lt; 4:
        return digit
    else:
        return None

A = [1, 2, 3, 4, 5]
B = [MyFunction(x) for x in A]
print(B) # [1, 2, 3, None, None]
</code></pre>
<p><strong>QUESTION:</strong> </p>
<p>Is it possible to rewrite <code>MyFunction()</code> somehow, so <code>B</code> becomes equal to <code>[1, 2, 3]</code> without <code>None</code>? Please, don't recommend me to use <code>if</code> expressions in the list comprehension, process <code>B</code> after list comprehension etc.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is it possible to rewrite MyFunction() somehow, so B becomes equal to [1, 2, 3] without None? Please, don't recommend me to use if expressions in the list comprehension, process B after list comprehension etc</p>
</blockquote>
<p>No, it isn't.  Your list comprehension will not change the length of the list.  There's nothing you can do in <code>MyFunction()</code> to change that.  You <em>must</em> use an <code>if</code> in the list comprehension or do some kind of pre- or post-processing on the list.</p>
<p>As described in <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-comprehension" rel="nofollow">the Python language reference</a>:</p>
<blockquote>
<p>The comprehension consists of a single expression followed by at least one for clause and zero or more for or if clauses. In this case, the elements of the new container are those that would be produced by considering each of the for or if clauses a block, nesting from left to right, and evaluating the expression to produce <strong>an element</strong> each time the innermost block is reached.</p>
</blockquote>
<p>You get one element per <code>for</code> iteration.  This is built right into the language.</p>
</div>
<div class="post-text" itemprop="text">
<p>To filter elements you need to use <code>filter()</code> or a list comprehension with <code>if</code>.</p>
<p>I.e:</p>
<pre><code>B = filter(lambda digit: digit &lt; 4, A)
</code></pre>
<p>You may use your function, but it should return boolean:</p>
<pre><code>def MyFunction(digit):
    if digit &lt; 4:
        return True
    else:
        return False
B = filter(MyFunction, A)
</code></pre>
<p>Or simply:</p>
<pre><code>def MyFunction(digit):
    return digit &lt; 4
</code></pre>
<p>With list comprehension:</p>
<pre><code>B = [digit for digit in A if digit &lt; 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible, but ugly as hell, to tweak the iterator from the function.  Unfortunately I can't get rid of the last <code>None</code>, but maybe someone else could pick-up the idea and refine it.  Here is my effort, and I extended the test data:</p>
<pre><code>import sys

def MyFunction(digit):
    if digit &lt; 4:
        return digit
    else:
        while digit &gt;= 4:
            try:
                digit = sys._getframe(1).f_locals['.0'].__next__()
            except StopIteration:
                break
        else:
            return digit

A = [6, 7, 1, 2, 3, 4, 5]
B = [MyFunction(x) for x in A]
print(B)
</code></pre>
<p>produces:</p>
<pre><code>[1, 2, 3, None]
</code></pre>
<p>I fully expect someone to say this practice is highly dangerous and implementation specific - and I would not argue with such a comment.</p>
</div>
<span class="comment-copy">Kevin, thank you for the reply. Can you provide some reference?</span>
<span class="comment-copy">@Konstantin: Edited.</span>
<span class="comment-copy"><i>There's nothing you can do in MyFunction() to change that</i> : not entirely true, see my hack below.  If you had said "There's nothing you <i>should</i> do to change that" I would agree.</span>
<span class="comment-copy">@cdarke: OP said "Python" rather than "CPython"; I'd interpret that as standard portable stuff only.</span>
<span class="comment-copy">That's fair enough</span>
<span class="comment-copy">I have no problem with these trivial operations. In my question, I specifically asked about modifying just MyFunction()</span>
