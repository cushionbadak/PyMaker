<div class="post-text" itemprop="text">
<p>I run a script 4 times a day that uses the requests module to download a file, which I then throw into a database.  9 times out of 10, the script works flawlessly.  But the times it does not work is because of a character in the downloaded file that my script, as it is, does not like.  For example, here's the error I got today: <code>UnicodeEncodeError: 'ascii' codec can't encode characters in position 379-381: ordinal not in range(128)</code>.  I downloaded the file another way and here's the character at position 380 which I believe is responsible for stopping my script, "∞".  And, here's the place in my script where it chokes:</p>
<pre><code>##### request file

r = requests.get('https://resources.example.com/requested_file.csv')

##### create the database importable csv file

ld = open('/requested_file.csv', 'w')
print(r.text, file=ld)
</code></pre>
<p>I know this probably has to do with encoding the file somehow before printing it to the .csv file, and is probably a simple thing for someone who knows what they are doing but, after many hours of research, I'm about to cry.  Thanks for your help in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to provide an <em>encoding</em> for your file; currently it defaults to ASCII, which is a very limited codec.</p>
<p>You could use UTF-8 instead, for example:</p>
<pre><code>with open('/requested_file.csv', 'w', encoding='utf8') as ld:
    print(r.text, file=ld)
</code></pre>
<p>However, since you are loading from a URL you are now decoding then encoding again. A better idea is to just copy the data straight to disk as bytes. Make a <em>streaming</em> request and have <code>shutil.copyfileobj()</code> copy the data in chunks. That way you can handle any size of response without loading everything into memory:</p>
<pre><code>import requests
import shutil

r = requests.get('https://resources.example.com/requested_file.csv', stream=True)
with open('/requested_file.csv', 'wb') as ld:
    r.raw.decode_content = True  # decompress gzip or deflate responses
    shutil.copyfileobj(r.raw, ld)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried a lot of different things but here's what ended up working for me:</p>
<pre><code>import requests
import io

##### request file

r = requests.get('https://resources.example.com/requested_file.csv')

##### create the db importable csv file

with open('requested_file_TEMP.csv', 'wb') as ld:
ld.write(r.text.encode())
ld.close()

##### run the temp file through the following code to get rid of any non-ascii characters
##### in the file; non-ascii characters can/will cause the script to choke

with io.open('requested_file_TEMP.csv', 'r',encoding='utf-8',errors='ignore') as infile, \
io.open('requested_file_TEMP.csv', 'w',encoding='ascii',errors='ignore') as outfile:
for line in infile:
    print(*line.split(), file=outfile)
infile.close
outfile.close
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/17856610/python-3-unicode-encode-error" title="python 3 unicode encode error">stackoverflow.com/questions/17856610/…</a></span>
<span class="comment-copy">You'll need to know the encoding (<a href="https://docs.python.org/2/library/codecs.html#standard-encodings" rel="nofollow noreferrer">see here</a>). Does whoever posts the csv files tell you what to use?</span>
<span class="comment-copy">@tdelaney this looks like python3 from the print function - so <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">these docs</a>. Not sure if anything changed.</span>
<span class="comment-copy">Yes, using Python 3</span>
<span class="comment-copy">Is there a reason for not using <code>ld.write(r.text)</code>?</span>
<span class="comment-copy">Did this but now get a different but similar error: "UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 379: ordinal not in range(128)"</span>
<span class="comment-copy">@JeffF: sounds like you have a new question; something is trying to decode bytes as ASCII. For your posted code that could mean the server told <code>requests</code> that the text data was encoded using <code>ASCII</code> but in reality it is not. <code>C3</code> is not a valid ASCII codepoint.</span>
<span class="comment-copy">@JeffF: since you are copying URL data straight to a file, better to open the file in binary mode and just copy the data across straight. No decoding, no encoding.</span>
