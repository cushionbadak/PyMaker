<div class="post-text" itemprop="text">
<p>I'm trying to make a an input timer on a question that gives the user 5 seconds to answer the question before deciding that no input is the same as the wrong answer, but no body wants to touch it with a 10ft pole, so I'm trying to go about it a different way and break a for loop with input?
Any one got suggestions?</p>
<pre><code>import random
import operator
qLimit = 10
oqLimit = 10
score = 0
maxNum = 10
timeLimit = 0
otimeLimit = 5
import time

ops = {
    '+':operator.add,
    '-':operator.sub
}

def generateQuestion():
    x = random.randint(1,maxNum)
    y = random.randint(1,maxNum)
    op = random.choice(list(ops.keys()))
    a = ops.get(op)(x,y)
    print("What is {} {} {}?\n".format(x, op, y))
    return a

def askQuestion(a):
    timeLimit = otimeLimit
    for i in range(0,timeLimit):
        guess = input("")
        print (timeLimit - i)
        time.sleep(1)
        if timeLimit == 0:
            try:
                integer_input = int(guess)
            except ValueError:
                print('Please enter a valid number')
                return
            global score
            if integer_input == a:
                print("Correct!")
                score += 1
            else:
                print("Wrong, the answer is",a)


while qLimit != 0:
    askQuestion(generateQuestion())
    qLimit -= 1
    print ("You have", qLimit, "questions remaining")
    print("Your score is",score)
    if (qLimit == 0):
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adapting the example from <a href="https://docs.python.org/3/library/signal.html#example" rel="nofollow">the Python docs</a>:</p>
<pre><code>import signal

class OutOfTime(Exception):
    "too slow"

def handler(signum, frame):
    raise OutOfTime("no input received")

try:
    # Set the signal handler and a 5-second alarm
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(5)
    ans = input('What is your favorite color? ')
    signal.alarm(0)
except OutOfTime:
    print('\nout of time! too slow!')
else:
    print('%s, huh?  Mine, too!' % ans)
</code></pre>
</div>
<span class="comment-copy"><code>input</code> is a blocking function which means that your code will stop until it receives at least a linefeed. You have to somehow get a nonblocking version otherwise your attempt won't work... maybe you can have a look at <a href="https://repolinux.wordpress.com/2012/10/09/non-blocking-read-from-stdin-in-python/" rel="nofollow noreferrer">this</a></span>
<span class="comment-copy">You can use signals to interrupt a blocking synchronous function like <code>input</code> with a timeout handler. That is the simplest way of doing this in Python. See <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">docs.python.org/3/library/signal.html</a></span>
<span class="comment-copy">Text mode consoles are not designed for this.  Gui frameworks are.  With tkinter, for instance, it would be easy to display a question and start a timer to trigger a no-answer function in x seconds.  The handle-answer function could cancel the no-answer  timer.  The result should work on all platforms, including Windows.</span>
<span class="comment-copy">@cdarke The function is actually <code>signal.alarm(seconds)</code> (where 0 seconds cancels any existing alarm).</span>
