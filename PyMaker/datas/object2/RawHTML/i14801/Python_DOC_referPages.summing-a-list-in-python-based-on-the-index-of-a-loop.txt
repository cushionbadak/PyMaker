<div class="post-text" itemprop="text">
<p>I have a list with numbers in it and I would like to sum different parts (in successive order) of that list and store those values in a new list. </p>
<p>Example:</p>
<pre><code>a = [0, 1, 2, 3, 4, 5]
b = []
b.append(a[0])
b.append(a[0] + a[1])
b.append(a[0] + a[1] + a[2])
</code></pre>
<p>Of course the list I have is much longer so I would assume I need a for loop, but I am unsure how to proceed.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is called a <em>cumulative sum</em> and there is a function in <code>numpy</code> for the job:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; np.cumsum(a)
array([ 0,  1,  3,  6, 10, 15])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a simple <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, with <a href="https://stackoverflow.com/q/509211/1903116">slicing</a> and <a href="https://docs.python.org/2/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function, like this</p>
<pre><code>&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; [sum(a[:i + 1]) for i in xrange(len(a))]
[0, 1, 3, 6, 10, 15]
</code></pre>
<p><strong>Note:</strong> As paxdiablo and DSM noted, this method will be highly inefficient, as it has to find the sum of all the numbers which were seen before, again and again (for example, when you find sum of first 4 elements, you would be computing sum of first three elements as well, and implicitly sum of 2 elements as well). So, this is not suitable for larger lists.</p>
<p><strong>The best way</strong> to solve this is by accumulating the results in a temporary variable and store it in the list like this</p>
<pre><code>&gt;&gt;&gt; result, temp = [], 0
&gt;&gt;&gt; for item in a:
...     temp += item
...     result.append(temp)
...     
&gt;&gt;&gt; result
[0, 1, 3, 6, 10, 15]
</code></pre>
<p>Actually, if you are going to iterate over the sums and if the actual list is very big, then you can better make it as a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator function</a>, like this</p>
<pre><code>&gt;&gt;&gt; def accumulate_sum(input_list):
...     temp = 0
...     for item in input_list:
...         temp += item
...         yield temp
...     
</code></pre>
<p>and then iterate it to get the values one by one, like this</p>
<pre><code>&gt;&gt;&gt; for item in accumulate_sum([0, 1, 2, 3, 4, 5]):
...     print(item)
...     
0
1
3
6
10
15
</code></pre>
<p>You can also get the entire list, with <code>list</code> function, like this</p>
<pre><code>&gt;&gt;&gt; list(accumulate_sum([0, 1, 2, 3, 4, 5]))
[0, 1, 3, 6, 10, 15]
</code></pre>
<p>FYI, Python 3.2+ has a function called <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>, which can be used like this</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; list(accumulate(a, func=add))
[0, 1, 3, 6, 10, 15]
</code></pre>
<p>Or you can pass your own function which adds two numbers to <code>accumulate</code>, like this</p>
<pre><code>&gt;&gt;&gt; list(accumulate([0, 1, 2, 3, 4, 5], func=lambda x, y: x + y))
[0, 1, 3, 6, 10, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = range(6) # or however you want to generate your data
b = [a[0]] # start with first element so we always have a previous element in the loop
for v in a[1:]:
   b.append(v+b[-1]) # the last element of b contains the sum of all the previous numbers
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not take your list and turn it into an array and then sum. The code would look something like this:</p>
<pre><code>    import numpy as np
    a = [0,1,2,3,4]
    b = np.array(a)
    c = []
    for i in range(len(a)):
        c.append(np.sum(b[0:i+1]))
</code></pre>
</div>
<span class="comment-copy">You could use sum(). For instance sum(a[3:]) will sum the third element of the list until the end</span>
<span class="comment-copy">It appears to me the first code block would be fairly inefficient, given it's calculating sums of the same values multiple times. For small lists it probably won't matter but I suspect the second block would be faster.</span>
<span class="comment-copy">@paxdiablo True, I included a note about that and generator version also.</span>
<span class="comment-copy">I think that second line should be <code>b = a[0]</code> - it's just a coincidence that both OPs and your test data have <code>0</code> as the first element.</span>
<span class="comment-copy">True enough, should have been explicit about it</span>
<span class="comment-copy">Oops, yes, and you fixed my error as well, obviously it should have been a <i>list</i> with <code>a[0]</code> in it rather than just <code>a[0]</code>.</span>
