<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1894269/convert-string-representation-of-list-to-list">Convert string representation of list to list</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>Say someone gives me a string like:</p>
<pre><code>"[[A,B],[C,D]]"
</code></pre>
<p>and I want to extract the list it describes:</p>
<pre><code>[[A,B],[C,D]]
</code></pre>
<p>How do I do this?</p>
<p>P.S.</p>
<p>A, B, C, D are just placeholders, they could be numeric values or strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>To prevent an <code>ValueError: malformed string</code> from being raised when passing the input directly to <code>ast.literal_eval</code>, <code>"</code>s need to be added around the characters in the string:</p>
<pre><code>import ast, re
s = "[[A,B],[C,D]]"
new_s = ast.literal_eval(re.sub('\w+', '{}', s).format(*['"{}"'.format(i) for i in re.findall('\w+', s)]))
</code></pre>
<p>Output:</p>
<pre><code>[['A', 'B'], ['C', 'D']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> being numbers (<code>int</code>, or <code>float</code>) or strings (<code>str</code>), you can simply use:</p>
<pre><code>l = eval("[[A,B],[C,D]]")
</code></pre>
<p>For example:</p>
<pre><code>In [1]: l = eval("[[1,2],[3,4]]")

In [2]: l
Out[2]: [[1, 2], [3, 4]]


In [3]: l = eval("[['Hello', 10],['bye', 100]]")

In [4]: l
Out[4]: [['Hello', 10], ['bye', 100]]

In [5]: l = eval("[[3.14, 1],['bye', 2.72]]")

In [6]: l
Out[6]: [[3.14, 1], ['bye', 2.72]]
</code></pre>
</div>
<span class="comment-copy"><code>[[A,B],[C,D]]</code> is not valid Python. Can you clarify?</span>
<span class="comment-copy">Are <code>A</code>, <code>B</code> etc. placeholders occupied by literal values, or are they some existing variable names, or something else?</span>
<span class="comment-copy">Placeholders, it could be anything, numbers, string, etc.</span>
<span class="comment-copy">Note, while this is possible you almost certainly shouldn't be doing this</span>
<span class="comment-copy">That's neat! Never seen that before.</span>
<span class="comment-copy">Actually ast is enough, see my P.S., A,B,C and D are placeholders. Did not know about ast, need to learn, do you have a good link to its use?</span>
<span class="comment-copy">@user See <a href="https://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval">here</a> for information specifically regarding <code>ast.literal_eval</code> or <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">here</a> for more about syntax parsing in Python.</span>
<span class="comment-copy">Would you mind commenting on the difference between eval and ast.literal_eval?</span>
<span class="comment-copy">@user, I found this <a href="https://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval">question</a> with several answers explaining the difference between <code>eval</code> and <code>ast.literal_eval()</code>, is it enough for you?</span>
