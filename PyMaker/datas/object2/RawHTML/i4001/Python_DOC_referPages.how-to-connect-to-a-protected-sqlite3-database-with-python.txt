<div class="post-text" itemprop="text">
<p>I created a <code>SQLite3</code> database and protected it with a password ("test") thanks to the application <code>DB browser for SQLite</code>.
In order to connect to my database via <code>Python</code>, I need to provide the password but I can't figure out how to do that. I tried the following code:</p>
<pre><code>conn=sqlite3.connect("mydatabase.db", Password="test")
cur=conn.cursor()
</code></pre>
<p><strong>EDIT:</strong></p>
<p>My <code>SQLite3</code> database has been encrypted with <code>SQLCipher</code> (see image).
<a href="https://i.stack.imgur.com/kSXYf.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/kSXYf.png"/></a>
If I run the following code:</p>
<pre><code>conn=sqlite3.connect("mydatabase.db")
cur=conn.cursor()
</code></pre>
<p>I get this error:</p>
<pre><code>sqlite3.DatabaseError: file is encrypted or is not a database
</code></pre>
<p>How can I pass the password in order to connect with my <code>db</code> via Python?</p>
<p><strong>EDIT 2</strong></p>
<p>Here a brief summary of what I try to achieve. I am developing an application with <code>Python 3</code> requiring a pre-populated database but this database needs to be protected with a password.
After extensive research, it seems complicated to connect an encrypted <code>SQLite3</code> database via <code>Python 3</code>. A library calls <code>pysqlcipher</code> exists but only for Python 2.7. My next question will be maybe too broadly and I apology in advance. Is there another portable database that exists allowing me to protect it with a password and still get access to Python?
Another idea that I have in mind in order to troubleshoot my problem is to use the <code>zipfile</code> library. This <a href="https://www.sqlite.org/zipfile.html" rel="nofollow noreferrer">link</a> mentions that the <code>zipfile</code> module does not support encryption but itâ€™s not clear if encryption refers to the <code>SQLite3</code> database or to the zip file. The idea would be to zip my unprotected <code>DB</code> into a protected zip file as it seems I can do that (<a href="https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.setpassword" rel="nofollow noreferrer">link</a>).
The goal of this edit is to get new ideas on how to solve my problem. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You need the <a href="https://www.zetetic.net/sqlcipher/" rel="nofollow noreferrer">SQLCipher</a> module to read that database. The default SQLite3 module has no support for that. See <a href="https://github.com/sqlitebrowser/sqlitebrowser/wiki/Encrypted-Databases" rel="nofollow noreferrer">https://github.com/sqlitebrowser/sqlitebrowser/wiki/Encrypted-Databases</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If your database is encrypted with SqlCipher, you need to install sqlcipher in your SO
Windows: <a href="https://www.zetetic.net/sqlcipher/verify/4.0.0/sqlcipher-v4.0.0.zip" rel="nofollow noreferrer">Download</a></p>
<p>Linux: <code>sudo pacman -S sqlcipher</code> or </p>
<pre><code>sudo apt-get install sqlcipher
</code></pre>
<p>After you need the pysqlcipher3 lib: <code>pip install pysqlcipher3</code></p>
<p>See: <a href="https://github.com/rigglemania/pysqlcipher3" rel="nofollow noreferrer">https://github.com/rigglemania/pysqlcipher3</a> </p>
<p>my sample code is:</p>
<pre><code>from pysqlcipher3 import dbapi2 as sqlite3


class Database(object):
    def __init__(self, dbname):
        self.dbname = dbname

    def connDB(self):
        self.conn = sqlite3.connect(self.dbname)
        self.cursor = self.conn.cursor()
        self.cursor.execute("PRAGMA key='mypassword'")

    def createDB(self):
        self.connDB()
        self.cursor.execute(
            '''
            CREATE TABLE IF NOT EXISTS users (
            id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            login TEXT NOT NULL,
            passwd TEXT);
            '''
        )

        self.cursor.execute(
            '''
            INSERT INTO users (name, login, passwd)
            VALUES ("Admininstrator", "admin", "12345")
            '''
        )
        self.conn.commit()
        self.conn.close()

    def queryDB(self, sql):
        self.connDB()
        self.cursor.execute(sql)

        if sql[0:6].lower() == 'select':
            result = self.cursor.fetchall()
            self.conn.close()
            return result
        else:
            self.conn.commit()
            self.conn.close()
</code></pre>
</div>
<span class="comment-copy">What do you mean by <code>SQLCipher</code> module? Are you talking about the <code>pysqlcipher</code>?</span>
