<div class="post-text" itemprop="text">
<p>I'm surprised by the output from Python's logging module. I wrote up the Python.org's <a href="https://docs.python.org/3/howto/logging.html#configuring-logging" rel="nofollow noreferrer">How-To for Logging</a>. When I run the sample code, there is a lot of (confusing) duplication. </p>
<p>The StreamHandler duplicates the log messages, one for each time I reload the file in iPython with the magic <code>%run</code></p>
<pre><code>In [4]: %run main.py
2018-05-11 2127:33 - WARNING - 3. This is a warning, yous!
2018-05-11 2127:33 - ERROR - 4. Here is an error
2018-05-11 2127:33 - CRITICAL - 5. This is f-ing critical!
[...]
In [7]: %run main.py
2018-05-11 2127:38 - WARNING - 3. This is a warning, yous!
2018-05-11 2127:38 - WARNING - 3. This is a warning, yous!
2018-05-11 2127:38 - WARNING - 3. This is a warning, yous!
2018-05-11 2127:38 - ERROR - 4. Here is an error
2018-05-11 2127:38 - ERROR - 4. Here is an error
2018-05-11 2127:38 - ERROR - 4. Here is an error
2018-05-11 2127:38 - CRITICAL - 5. This is f-ing critical!
2018-05-11 2127:38 - CRITICAL - 5. This is f-ing critical!
2018-05-11 2127:38 - CRITICAL - 5. This is f-ing critical!
</code></pre>
<p>I added a FileHandler:</p>
<pre><code>fh = logging.FileHandler("app.log")
fh.setLevel(logging.DEBUG)
fh.setFormatter(formatter)
logger.addHandler(fh)
</code></pre>
<p>This also duplicates:</p>
<pre><code>xtian@spaceghost&gt; cat app.log
2018-05-11 2159:24 - WARNING - 3. This is a warning!
2018-05-11 2159:24 - ERROR - 4. This is an error
2018-05-11 2159:24 - CRITICAL - 5. This is fucking critical!
[...]
2018-05-11 2201:00 - WARNING - 3. This is a warning, yous!
2018-05-11 2201:00 - WARNING - 3. This is a warning, yous!
2018-05-11 2201:00 - WARNING - 3. This is a warning, yous!
2018-05-11 2201:00 - ERROR - 4. Here is an error.
2018-05-11 2201:00 - ERROR - 4. Here is an error.
2018-05-11 2201:00 - ERROR - 4. Here is an error.
2018-05-11 2201:00 - CRITICAL - 5. This is f-ing critical!
2018-05-11 2201:00 - CRITICAL - 5. This is f-ing critical!
2018-05-11 2201:00 - CRITICAL - 5. This is f-ing critical!
</code></pre>
<p>I also followed the suggestions from <a href="https://stackoverflow.com/questions/47440034/python-2-logger-repeats-lines-after-use-of-default-logger">other</a> <a href="https://stackoverflow.com/questions/30628487/python-logs-displaying-multiple-times-in-stdout">posts</a>, and added these lines just before the message calls:</p>
<pre><code># propagation fix
logger.propagate = False
</code></pre>
<p>The results are the same.</p>
<hr/>
<p>Setting up to post, I see a similar question:</p>
<p><a href="https://stackoverflow.com/questions/10326768/what-could-cause-the-logging-module-to-log-a-record-multiple-times">What could cause the logging module to log a record multiple times?</a></p>
<p>But all this debugging is for the OP's original custom code. My issue is with the sample code, which I expect should warn or explain better what's happening. </p>
<p>The docs say,</p>
<blockquote>
<p>Note. If you attach a handler to a logger and one or more of its ancestors,
  it may emit the same record multiple times. In general, you should not
  need to attach a handler to more than one logger - if you just attach
  it to the appropriate logger which is highest in the logger hierarchy,
  then it will see all events logged by all descendant loggers, provided
  that their propagate setting is left set to True. A common scenario is
  to attach handlers only to the root logger, and to let propagation
  take care of the rest.</p>
</blockquote>
<p>You can see the full test file <code>main.py</code> <a href="https://ptpb.pw/Sk_j" rel="nofollow noreferrer">here</a> to see if I have <em>'more than one logger'</em>.</p>
<pre><code>import logging

# Root Logger
logger = logging.getLogger(__name__)

# Console handler
ch = logging.StreamHandler()
ch.setLevel(logging.WARNING)

# Formatter
formatter = logging.Formatter(fmt='%(asctime)s - %(levelname)s - %(message)s' , datefmt='%Y-%m-%d %H%M:%S', style='%')

# Add formatter to Console handler ch
ch.setFormatter(formatter)

# Add ch to logger
logger.addHandler(ch)

# Text File handler
fh = logging.FileHandler("app.log")
fh.setLevel(logging.DEBUG)
fh.setFormatter(formatter)
logger.addHandler(fh)

# propagation fix
logger.propagate = False

# Example Application code
logger.debug("1. This is a debug message.")
logger.info("2. This is an info message.")
logger.warning('3. This is a warning!')
logger.error('4. This is an error')
logger.critical("5. This is fucking critical!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>logger</code> returned by <code>logging.getLogger(__name__)</code> is the same logger each time <code>%run main.py</code> is executed. But </p>
<pre><code>ch = logging.StreamHandler()
</code></pre>
<p>instantiates a new StreamHandler each time, which is then added to the <code>logger</code>:</p>
<pre><code>logger.addHandler(ch)
</code></pre>
<p>Thus, on subsequent runs of <code>%run main.py</code>, the <code>logger</code> has multiple handlers
attached to it and a record gets emitted by each handler.</p>
<hr/>
<pre><code>In [5]: %run main.py
2018-05-11 2251:17 - WARNING - 3. This is a warning!
2018-05-11 2251:17 - ERROR - 4. This is an error
2018-05-11 2251:17 - CRITICAL - 5. This is fucking critical!

In [6]: logger
Out[6]: &lt;logging.Logger at 0x7f5d0152fe10&gt;
</code></pre>
<p>The first time <code>%run main.py</code> is run, two handlers are attached to <code>logger</code>:</p>
<pre><code>In [7]: logger.handlers
Out[12]: 
[&lt;logging.StreamHandler at 0x7f5d0152fdd8&gt;,
 &lt;logging.FileHandler at 0x7f5d014c40f0&gt;]

In [13]: %run main.py
2018-05-11 2251:44 - WARNING - 3. This is a warning!
2018-05-11 2251:44 - WARNING - 3. This is a warning!
2018-05-11 2251:44 - ERROR - 4. This is an error
2018-05-11 2251:44 - ERROR - 4. This is an error
2018-05-11 2251:44 - CRITICAL - 5. This is fucking critical!
2018-05-11 2251:44 - CRITICAL - 5. This is fucking critical!
</code></pre>
<p>The second time, there are now four handlers:</p>
<pre><code>In [14]: logger.handlers
Out[14]: 
[&lt;logging.StreamHandler at 0x7f5d0152fdd8&gt;,
 &lt;logging.FileHandler at 0x7f5d014c40f0&gt;,
 &lt;logging.StreamHandler at 0x7f5d014c4668&gt;,
 &lt;logging.FileHandler at 0x7f5d014c4550&gt;]

In [15]: logger
Out[15]: &lt;logging.Logger at 0x7f5d0152fe10&gt; 
</code></pre>
<p>To prevent duplication, you could call <code>logger.removeHandler</code> between <code>%run</code> calls:</p>
<pre><code>In [29]: for handler in logger.handlers: logger.removeHandler(handler)

In [30]: %run main.py
2018-05-11 2257:30 - WARNING - 3. This is a warning!
2018-05-11 2257:30 - ERROR - 4. This is an error
2018-05-11 2257:30 - CRITICAL - 5. This is fucking critical!
</code></pre>
<p>or, modify <code>main.py</code> so that new handlers are not attached each time <code>%run</code> is called.
For example, you could setup <code>logger</code> using <a href="https://docs.python.org/3.7/library/logging.config.html#logging.config.dictConfig" rel="nofollow noreferrer"><code>logging.config.dictConfig</code></a>:</p>
<pre><code>import logging
import logging.config

# Modified using https://stackoverflow.com/a/7507842/190597 as a template
logging_config = { 
    'version': 1,
    'formatters': { 
        'standard': { 
            'format': '%(asctime)s - %(levelname)s - %(message)s'
        },
    },
    'handlers': { 
        'stream': { 
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
        },
        'file': { 
            'level': 'DEBUG',
            'formatter': 'standard',
            'class': 'logging.FileHandler',
            'filename': 'app.log'
        },
    },
    'loggers': { 
        __name__: { 
            'handlers': ['stream', 'file'],
            'level': 'WARN',
            'propagate': False
        },
    } 
}
logging.config.dictConfig(logging_config)
logger = logging.getLogger(__name__)

# Example Application code
logger.debug("1. This is a debug message.")
logger.info("2. This is an info message.")
logger.warning('3. This is a warning!')
logger.error('4. This is an error')
logger.critical("5. This is fucking critical!")
</code></pre>
<p>Using this code, <code>%run main.py</code> emits the same output each time.</p>
</div>
<span class="comment-copy">How do you prevent duplication?</span>
<span class="comment-copy">You could remove the handlers between <code>%run</code> calls. I've edited the post above to show what I mean.</span>
<span class="comment-copy">Alternatively, use <a href="https://docs.python.org/3.7/library/logging.config.html" rel="nofollow noreferrer"><code>logging.config</code></a> to setup <code>logger</code> without adding new handlers each time <code>%run main.py</code> is called.</span>
<span class="comment-copy"><i>modify main.py so that new handlers are not attached each time</i> Curious that the <code>dictConfig</code> version doesn't attach handlers each time.</span>
<span class="comment-copy">With <code>dictConfig</code> you get to specify the <i>state</i> of the loggers. Under the hood, <code>dictConfig</code> <a href="https://github.com/python/cpython/blob/master/Lib/logging/config.py#L766" rel="nofollow noreferrer">calls <code>removeHandler</code></a>. With <code>'handlers': ['stream', 'file']</code> you just get the two handlers.</span>
