<div class="post-text" itemprop="text">
<p>I noticed something really strange while working with functions. It looks like the variable name 'str' is already defined as a global variable. Take a look:</p>
<pre><code>def Example(x):
   str = input()
   return str

print (Example(str))
#When typing 'Hello!' Output --&gt; Hello! 
</code></pre>
<p>The variable str is defined in the function Example. So why is there no NameError: name 'str' is not defined? </p>
<p>When I call the variable x or something else ( In this case 'bar'):</p>
<pre><code>def Example(x):
   bar = input()
   return bar

print (Example(bar))
#Output: NameError: name 'bar'is not defined
</code></pre>
<p>Why does a variable with the name 'str' act as a global variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, str() is the string constructor. It is used to cast an object to a string.</p>
<p>You can use it locally, but it will override the access to the function. You will not be able to use str() anymore.</p>
<p>for reference:
<a href="https://docs.python.org/2/library/functions.html#str" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#str</a></p>
<blockquote>
<p>class str(object='')</p>
<p>Return a string containing a nicely printable representation of an
  object. For strings, this returns the string itself. The difference
  with repr(object) is that str(object) does not always attempt to
  return a string that is acceptable to eval(); its goal is to return a
  printable string. If no argument is given, returns the empty string,
  ''.</p>
</blockquote>
<p>For general knowledge purpose, you can get back you constructor if you delete your variable. For example:</p>
<pre><code>test = 1
str(test)
&gt;&gt;&gt;'1'

str = 2
str(test)
&gt;&gt;&gt;TypeError: 'int' object is not callable

del str

str(test)
&gt;&gt;&gt;'1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason this fails:</p>
<pre><code>def Example(x):
   bar = input()
   return bar

print (Example(bar))
#Output: NameError: name 'bar'is not defined
</code></pre>
<p>Is because you're attempting to pass the variable <code>bar</code> to the <code>Example()</code> method, but <code>bar</code> was never defined anywhere prior to the call. </p>
<p>I'm not really sure what it is you want to accomplish with this method anyhow, since you pass a variable but don't use it at all.</p>
<p><strong>Comment Response:</strong></p>
<p><code>str</code> is not a built-in function (albeit listed on the <a href="https://docs.python.org/3.6/library/functions.html#func-str" rel="nofollow noreferrer">page</a>), but rather it is the constructor for the built-in type <a href="https://docs.python.org/3.6/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str</code></a>. To show that you are simply reassigning the method associated with the keyword (not necessarily reserved, but it is a keyword nonetheless), consider the following:</p>
<pre><code>&gt;&gt;&gt; str
&lt;class 'str'&gt;
&gt;&gt;&gt; abs
&lt;built-in function abs&gt;
&gt;&gt;&gt; str = abs
&gt;&gt;&gt; str
&lt;built-in function abs&gt;
</code></pre>
<p>Thus you've essentially overwritten the assignment to the <code>str</code> class constructor. I used <code>abs</code> in this example, but the same applies (with a twist) for <code>input</code>:</p>
<pre><code>&gt;&gt;&gt; str
&lt;class 'str'&gt;
&gt;&gt;&gt; input
&lt;built-in function input&gt;
&gt;&gt;&gt; str = input
&gt;&gt;&gt; str
&lt;built-in function input&gt;
&gt;&gt;&gt; str = input()
hello world
&gt;&gt;&gt; str
'hello world'
</code></pre>
<p>Difference here is you assign a string (of type <code>str</code>) to the keyword <code>str</code>. So you can never use <code>str(10)</code> to get <code>'10'</code> because that would now be like calling <code>hello world(10)</code> which fails.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use a keyword as a variable name, by convention a single trailing underscore is used to avoid conflicts with Python keywords, like so:</p>
<pre><code>single_trailing_underscore_
</code></pre>
<p>Cf. <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer" title="PEP 8 -- Style Guide for Python Code">PEP 8 -- Style Guide for Python Codes</a></p>
</div>
<span class="comment-copy">Because <code>str</code> is a type in Python</span>
<span class="comment-copy">Check <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">docs.python.org/3/library/functions.html</a> for details about <code>str</code>. As for the question itself, I'd recommend a <i>Python</i> beginner's tutorial.</span>
<span class="comment-copy">Minor point, but <code>str()</code> is not a function for casting. It's a constructor for a <code>str</code> object.</span>
<span class="comment-copy">I agree, I will update to make it crystal clear.</span>
<span class="comment-copy">Thanks! using the str() function does not work anymore indeed (UnboundLocalError). I know now that you should never give variables names like variable types. Like float, int etc.</span>
<span class="comment-copy">Class override yup.</span>
<span class="comment-copy">Anymore unless you <code>del str</code>. The original is still there :)</span>
<span class="comment-copy">My point was to show difference between outputs of a variable named 'str' and for example 'bar'. I get why varname = 'bar' results in an exception.</span>
<span class="comment-copy">@HugodeHeer Its because you are remapping the function associated with that reserved word.</span>
<span class="comment-copy">It's not exactly a reserved word, or you would get a syntax error on assignment. Try <code>for=0</code>. <code>str</code>is a built-in function. Builtins are the last namespace searched (after the global).</span>
<span class="comment-copy">My comment above was more for @HugodeHeer, but forgot to mention him.</span>
<span class="comment-copy">Just to complement, an isolated underscore  <code>_</code> is sometimes used when you don't care about a returned value, usually when unpacking a tuple with multiple values.</span>
