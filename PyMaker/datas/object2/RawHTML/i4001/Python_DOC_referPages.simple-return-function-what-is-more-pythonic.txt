<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9191388/it-is-more-efficient-to-use-if-return-return-or-if-else-return">It is more efficient to use if-return-return or if-else-return?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>Simple question that I can't find the answer for.</p>
<p><strong>Take the function:</strong></p>
<p>The below <em>looks</em> nice, i.e. more readable, given the else and the aligned spacing between the two return statement. However the else is completely pointless, and that makes it feel a little dirty.</p>
<pre><code>def get_val(self):
    if long_var &lt; other_long_var and var &lt; other_var:
        return true
    else:
        return false 
</code></pre>
<p>Note the two conditions and the long line, this is to express that the following is not applicable in this example:</p>
<pre><code>return true if this else false
</code></pre>
<p>However the below is not as readable, but only slightly. It is more elegant as the useless else is omitted.</p>
<pre><code>def get_val(self):
    if x:
        return true
    return false 
</code></pre>
<p><strong>Is there a Pythonic bias for either of these styles?</strong></p>
<p>If not, is it purely down to the developer?</p>
<p><em>EDIT: To be clear, it is an example function. I was trying to express the need for a function that has a condition and returns true of false.
This is a purely stylistic question</em></p>
</div>
<div class="post-text" itemprop="text">
<p>In such short cases, I would prefer:</p>
<pre><code>def get_val(self):
    return x
</code></pre>
<ul>
<li>it is readable for experienced programmers (who know Python)</li>
<li>performance faster than anything below, though the difference will be minimal</li>
</ul>
<p>Secondly, in my view still pythonic (often seen in codewars.com):</p>
<pre><code>def get_val(self):
    return True if x else False
</code></pre>
<p>But I guess, the style guides will recommend:</p>
<pre><code>def get_val(self):
    if x:
        return True
    else:
        return False
</code></pre>
<p>Your second example might not be very pythonic ...</p>
<p>In codewars.com I have also often seen:</p>
<pre><code>def get_val(x):
    if x == "": return yz
    elif x == "B": return xyz
    else: return z
</code></pre>
<p>which might be a kind of switch/case imitation in Python, though
I don't think that style guides will support this ...</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're just trying to find if the value of a paramater is either True or False, you can use python's built-in function <em>bool</em>.</p>
<pre><code>x = ""
bool(x)
&gt;&gt;&gt; False

x = "something"
bool(x)
&gt;&gt;&gt; True
</code></pre>
<p>Also, you should check the official docs:
<a href="https://docs.python.org/3.6/library/functions.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/functions.html</a></p>
<p>Hope it helped.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the example you've given (which is minimal and complete, as it should be), both options are clear and easy to understand.</p>
<p>The easiest (and most pythonic) way would be:</p>
<pre><code>def get_val(self):
    return bool(x)
</code></pre>
<p>Let me comment on a more general case. Quoting from <code>import this</code>:</p>
<blockquote>
<p>In the face of ambiguity, refuse the temptation to guess.</p>
</blockquote>
<p>While the second option might appear more elegant, it is also ambiguous: Are you returning <code>False</code> because <code>x</code> is <code>False</code>, or because none of the previous <code>return</code> statements have been triggered?</p>
<p>Thinking of a slightly more complex example, I'd suggest to use the final return statement to give you e.g. some default option, a warning, or a ValueError.</p>
<pre><code>def myfunc(x, mode):
    if mode == 'square':
        return x**2
    if mode == 'cube':
        return x**3
    return x
</code></pre>
</div>
<span class="comment-copy">why not use <code>return x</code>?</span>
<span class="comment-copy">@ktzr I hope you mean <code>return bool(x)</code>.</span>
<span class="comment-copy">why do you think this is <i>not as readable</i>. Also this is already discussed @ [It is more efficient to use if-return-return or if-else-return? ](<a href="https://stackoverflow.com/questions/9191388">stackoverflow.com/questions/9191388</a>)</span>
<span class="comment-copy">You can also <code>return True if x else False</code></span>
<span class="comment-copy">@miradulo If you know <code>x</code> is bool, <code>return x</code> makes more sense. Or if you know your caller only cares about val's truthiness, not the actual val. Of course in a toy example like this with meaningless names that doesn't do anything but raise a <code>NameError</code>, it's hard to guess what the actual use looks like…</span>
<span class="comment-copy">Using a chain of <code>elif</code> in place of <code>switch/case</code> is definitely Pythonic; it's half of <a href="https://docs.python.org/3/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python" rel="nofollow noreferrer">the official design FAQ answer to why Python doesn't have or need <code>switch/case</code></a>. (The other half is dict of values or functions.) Doing the one-liner thing… PEP 8 strongly discourages it, but for really trivial cases like this, you see it in code even by some core devs. (But if the chain is long enough that saving vertical space matters, a dict is likely to be clearer, and more efficient to boot…)</span>
<span class="comment-copy">Thank you for your comment, abarnert. True, a <code>dict</code> will be clearer ;) . And yes, the official recommendations might discourage the one liners. But sometimes, in <code>codewars.com</code> I found the short solution very tempting ;) .</span>
<span class="comment-copy">You might want to justify why you believe it to be ambiguous.</span>
<span class="comment-copy">Thanks for the feedback, I've included a very simple pythonic option and some thoughts on a more general case.</span>
<span class="comment-copy">@DanielLenz thanks for the answer. The Python quote answers the question elegantly I feel - as you put it. Your last example does explain the logic behind my second answer, 'by default return false, unless this is true', but it does also possess some ambiguity as you have stated.</span>
