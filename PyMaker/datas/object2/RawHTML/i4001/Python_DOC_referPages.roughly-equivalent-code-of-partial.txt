<div class="post-text" itemprop="text">
<p>In the official docs <a href="https://docs.python.org/3.7/library/functools.html" rel="nofollow noreferrer">10.2. functools</a>
 about partial</p>
<p>Roughly equivalent to:</p>
<pre><code>def partial(func, *args, **keywords):
    def newfunc(*fargs, **fkeywords):
        newkeywords = keywords.copy()
        newkeywords.update(fkeywords)
        return func(*args, *fargs, **newkeywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    return newfunc
</code></pre>
<p>I guess it could be better if refactor it as:</p>
<pre><code>def partial(func, *args, **keywords):
    def newfunc(*fargs, **fkeywords):
        return func(*args, *fargs, **fkeywords, **keywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    return newfunc
</code></pre>
<p>or </p>
<pre><code>def partial(func, *args, **keywords):
    def newfunc(*fargs, **fkeywords):
        newkeywords = keywords.copy()
        newargs = args.copy()
        newkeywords.update(fkeywords)
        args.append(fargs)
        return func(*args, **newkeywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    return newfunc
</code></pre>
<p>Does my assumption make sense?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first version doesn't quite work, because, as <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">the docs</a> explain:</p>
<blockquote>
<p>If additional keyword arguments are supplied, they extend and override keywords.</p>
</blockquote>
<p>When you do two keyword splats, as in your version, you don't override duplicated keywords; instead, you get a <code>TypeError</code>, as explained in <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer"><code>Calls</code></a>:</p>
<blockquote>
<p>If the syntax **expression appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments. If a keyword is already present (as an explicit keyword argument, or from another unpacking), a TypeError exception is raised.</p>
</blockquote>
<p>Compare:</p>
<pre><code>&gt;&gt;&gt; def sub(a, b): return a-b
&gt;&gt;&gt; sub2 = functools.partial(sub, b=2)
&gt;&gt;&gt; sub2(5, b=0)
5
&gt;&gt;&gt; sub2 = partial(sub, b=2)
&gt;&gt;&gt; sub2(5, b=0)
TypeError: f() got multiple values for keyword argument 'b'
</code></pre>
<hr/>
<p>Your second version doesn't work for four reasons:</p>
<ul>
<li><code>*args</code> is a tuple, and tuples don't have <code>copy</code>. Being immutable, there's rarely a reason to copy them.</li>
<li>Tuples also don't have <code>append</code>, being immutable.</li>
<li>Even if they were lists, <code>append</code> would add the new argument list as a single argument to the end, but you want to add them all as separate arguments. That's what <code>extend</code> is for.</li>
<li>Finally, you used <code>args</code> instead of <code>newargs</code>.</li>
</ul>
<p>You could fix all of that by doing something like this:</p>
<pre><code>def newfunc(*fargs, **fkeywords):
    newkeywords = keywords.copy()
    newargs = list(args)
    newkeywords.update(fkeywords)
    newargs.extend(fargs)
    return func(*newargs, **newkeywords)
</code></pre>
<p>But a simpler (and more efficient) way to write that would be:</p>
<pre><code>def newfunc(*fargs, **fkeywords):
    newkeywords = keywords.copy()
    newkeywords.update(fkeywords)
    newargs = args + fargs
    return func(*newargs, **newkeywords)
</code></pre>
<p>And this is in fact pretty close to how <code>partial</code> used to be documented before Python allowed multiple splats in a single call in 3.5. In both <a href="https://docs.python.org/3.4/library/functools.html#functools.partial" rel="nofollow noreferrer">3.4</a> and <a href="https://docs.python.org/2.7/library/functools.html#functools.partial" rel="nofollow noreferrer">2.7</a>:</p>
<pre><code>def newfunc(*fargs, **fkeywords):
    newkeywords = keywords.copy()
    newkeywords.update(fkeywords)
    return func(*(args + fargs), **newkeywords)
</code></pre>
<p>The only difference is they do the <code>args + fargs</code> directly in the splat, instead of assigning it to a <code>newargs</code> variable.</p>
</div>
<span class="comment-copy">Have you tried either of those? Your first rewrite will fail if <code>fkeywords</code> and <code>keywords</code> share the same parameter.</span>
<span class="comment-copy">ty. The extended topic about <code>allowed multiple splats</code>  seem complicated</span>
<span class="comment-copy">What's the splat mean here? I google multiple splats return nothing useful.</span>
<span class="comment-copy">@john Sorry, "splat" is the informal term for using <code>*</code> (or <code>**</code>) to pass a sequence (or mapping) to be unpacked into multiple positional (or keyword) arguments. The formal term for "splat" is "use the iterable-unpacking syntax". If you google "allowed multiple splats <i>python</i>" you get much better results. (Including <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">PEP 448</a>, the proposal to allow multiple uses of <code>*</code> in function calls starting in Python 3.5.)</span>
