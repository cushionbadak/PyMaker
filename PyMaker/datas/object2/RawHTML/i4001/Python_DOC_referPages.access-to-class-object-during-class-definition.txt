<div class="post-text" itemprop="text">
<p>In PyCharm I don't see any variable I can use for this purpose. However, PyCharm seems to hide some of the dunder variables. (for example, <code>__dict__</code> )</p>
<p>I would like to do something like this:</p>
<pre><code>class Foo:
   __id_fields__ = get_id_fields(cls)
</code></pre>
<p>Where <code>cls.__name__</code> is defined.</p>
<p>Rather than this:</p>
<pre><code>class Foo:
   __id_fields__ = get_id_fields("Foo")
</code></pre>
<p>The root questions are really:</p>
<ol>
<li>What variables/information is available while defining the class?</li>
<li>How to properly programmatically add attributes to a Python class in the class definition?</li>
</ol>
<p>Links to relevant docs are appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to @alex-hall for the comment.</p>
<p><a href="https://www.python.org/dev/peps/pep-3155/" rel="nofollow noreferrer">PEP-3155</a> says that:</p>
<ul>
<li><code>__qualname__</code> is the name of the class</li>
<li><code>__name__</code> is the module name</li>
</ul>
</div>
<span class="comment-copy">There is no class object while the class body is executing.</span>
<span class="comment-copy">to complete @user2357112's answer: [<i>The class’s suite is then executed in a new execution frame, using a newly created local namespace and the original global namespace. [...] A class object is then created using the inheritance list for the base classes and the saved local namespace for the attribute dictionary. The class name is bound to this class object in the original local namespace.</i>](<a href="https://docs.python.org/3/reference/compound_stmts.html#class-definitions" rel="nofollow noreferrer">docs.python.org/3/reference/…</a>).</span>
<span class="comment-copy">You can do <code>get_id_fields(__qualname__)</code></span>
<span class="comment-copy">Please note that <code>__qualname__</code> was added on &gt;= Python 3.3. For older versions, you probably need to handle this on a <code>metaclass</code></span>
