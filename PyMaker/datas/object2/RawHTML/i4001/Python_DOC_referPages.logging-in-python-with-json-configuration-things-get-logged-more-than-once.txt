<div class="post-text" itemprop="text">
<p>I am using Python 3, and I am learning how to use logging. I am looking at the code from <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging-cookbook.html</a> and <a href="https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/" rel="nofollow noreferrer">https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/</a>. </p>
<p>I tried to modify part of the first two code blocks in the first link, the main module and the auxiliary module, to use a JSON file. But when I ran the main file, I get certain log outputs repeated 3 times, but I don't know why, or what to change so that lines aren't repeated but are still outputted to the same .log file.</p>
<p>.log file:
<a href="https://i.stack.imgur.com/cSiMC.jpg" rel="nofollow noreferrer">.log file output</a></p>
<p>My JSON file:</p>
<pre><code>{
"version": 1,
"disable_existing_loggers": false,
"formatters": {
    "simple": {
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    }
},

"handlers": {
    "debug_file_handler": {
        "class": "logging.FileHandler",
        "level": "DEBUG",
        "formatter": "simple",
        "filename": "debug.log",
        "encoding": "utf8"
    }
},

"loggers": {
    "spam_application.auxiliary.Auxiliary": {
        "level": "DEBUG",
        "handlers": ["debug_file_handler"]
    },
    "spam_application.auxiliary": {
        "level": "DEBUG",
        "handlers": ["debug_file_handler"]
    }

},

"root": {
    "level": "DEBUG",
    "handlers": ["debug_file_handler"]
}}
</code></pre>
<p>and for the main file:</p>
<pre><code>import auxiliary_module
import os
import json
import logging.config

with open('python_logging_configuration.json', 'r') as logging_configuration_file:
config_dict = json.load(logging_configuration_file)

logging.config.dictConfig(config_dict)

logger = logging.getLogger(__name__)

logger.info('creating an instance of auxiliary_module.Auxiliary')
a = auxiliary_module.Auxiliary()
logger.info('created an instance of auxiliary_module.Auxiliary')
logger.info('calling auxiliary_module.Auxiliary.do_something')
a.do_something()
logger.info('finished auxiliary_module.Auxiliary.do_something')
logger.info('calling auxiliary_module.some_function()')
auxiliary_module.some_function()
logger.info('done with auxiliary_module.some_function()')
</code></pre>
<p>And for the auxiliary_module file</p>
<pre><code>module_logger = logging.getLogger('spam_application.auxiliary')

class Auxiliary:
def __init__(self):
    self.logger = logging.getLogger('spam_application.auxiliary.Auxiliary')
    self.logger.info('creating an instance of Auxiliary')
    self.logger.debug('debug in Auxiliary')

def do_something(self):
    self.logger.info('doing something')
    a = 1 + 1
    self.logger.info('done doing something')

def some_function():
    module_logger.info('received a call to "some_function"')
</code></pre>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<h2>Short answer</h2>
<p>This is because of a <a href="https://docs.python.org/3/library/logging.html#logging.Logger.propagate" rel="nofollow noreferrer">special property called <code>propagate</code></a>. It is a flag that determines whether a logger should pass a log record to its parent logger (<code>propagate=True</code>) or not (<code>propagate=False</code>). You need either to remove the common configuration from the intermediate loggers, leaving only the unique stuff, or pass <code>"propagate": false</code> to all the loggers.</p>
<h2>Long answer</h2>
<h3>loggers hierarchy and log record propagation</h3>
<p>All loggers in Python are organized in a hierarchy: there is always a root logger, returned when you call <code>getLogger</code> without a name:</p>
<pre><code>root_logger = logging.getLogger()
</code></pre>
<p>All the loggers you create with a name are children of the root logger, so</p>
<pre><code>my_logger = logging.getLogger('my-special-logger')
</code></pre>
<p>has <code>root_logger</code> as parent. Now, when you call <code>my_logger.info('Hello world')</code>, the following happens: <code>my_logger</code> will</p>
<ul>
<li>handle the record itself</li>
<li>check whether it has <code>propagate</code> set to <code>True</code>, if yes, then it will pass the record to its parent logger (the root logger in this case), which will also handle the record.</li>
</ul>
<p>This is also visualized in the <a href="https://docs.python.org/3/howto/logging.html#logging-flow" rel="nofollow noreferrer">logging flow diagram</a>, you can check it out if you want.</p>
<p>Now, you can probably already guess what happens if I configure both loggers like this:</p>
<pre class="lang-json prettyprint-override"><code>"loggers": {
    "my-special-logger": {
        "handlers": ["debug_file_handler"]
    },
},

"root": {
    "handlers": ["debug_file_handler"]
}
</code></pre>
<p>On each incoming log record, the <code>my-special-logger</code> writes the record to <code>debug.log</code>, then passes the record further up to <code>root</code>, which also writes the record to <code>debug.log</code>. So the record will appear twice in the end.</p>
<h3>module namespace hierarchy</h3>
<p>However, the question is: why there are three copies of some records in the debug log? The answer is found in <a href="https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial" rel="nofollow noreferrer">Advanced Logging Tutorial</a>:</p>
<blockquote>
<p>Each [logger] instance has a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For example, a logger named <code>scan</code> is the parent of loggers <code>scan.text</code>, <code>scan.html</code> and <code>scan.pdf</code>.</p>
</blockquote>
<p>So now you can evaluate the logger hierarchy in your code:</p>
<pre class="lang-none prettyprint-override"><code>root                                                <b>-&gt; writes to debug.log</b>
└── spam_application
     └── spam_application.auxiliary                <b>-&gt; writes to debug.log</b>
          └── spam_application.auxiliary.Auxiliary <b>-&gt; writes to debug.log</b>
</code></pre>
<h3>solution</h3>
<p>The propagation of records in the logging hierharchy has the advantage that you don't need to repeat the configuration for each logger. So, when your application should log to <code>debug.log</code>, add the <code>debug_file_handler</code> to root logger once and it will already serve all the other loggers, no matter whether you add them to config or not.</p>
<p>This way, your initial config can be reduced to:</p>
<pre class="lang-json prettyprint-override"><code>{
    "version": 1,
    "disable_existing_loggers": false,
    "formatters": { ... },

    "handlers": {
        "debug_file_handler": { ... }
    },

    "root": {
        "level": "DEBUG",
        "handlers": ["debug_file_handler"]
    }
}
</code></pre>
<p>The alternative to that would be passing <code>"propagate": false</code> to each explicitly configured logger so the messages won't be handled multiple times by the <code>debug_file_handler</code>:</p>
<pre class="lang-json prettyprint-override"><code>{
    "version": 1,

    ...

    "loggers": {
        "spam_application.auxiliary.Auxiliary": {
            "level": "DEBUG",
            "handlers": ["debug_file_handler"],
            "propagate": false
        },
        "spam_application.auxiliary": {
            "level": "DEBUG",
            "handlers": ["debug_file_handler"],
            "propagate": false
        }
    },

    ...
</code></pre>
</div>
