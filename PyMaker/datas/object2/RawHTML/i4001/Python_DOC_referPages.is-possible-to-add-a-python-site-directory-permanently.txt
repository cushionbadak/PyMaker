<div class="post-text" itemprop="text">
<p>In order to manage all my python paths for my project and have them available as soon as I start python interpreter, I created a project.pth in the project home directory having relative paths in it,
Actually, to be read, I need to do a site.addsitedir(my_project_home_dir) each time I start the interpreter. </p>
<p>I tried setting PYTHONPATH or create a .pth in site-packages pointing to my project home directory, but project.pth is still not read automatically when I start the interpreter.</p>
<p>The only thing that works is to put my project.pth in site-packages, but by doing that, I have to transform my project relative paths to absolute paths.</p>
<p>So it there a master .pth file where I can specify my project home directory so I can have my project.pth located in that directory to be read automatically ?</p>
</div>
<div class="post-text" itemprop="text">
<p>While I know this doesn't specifically answer your question, might I suggest a different approach? The use of virtual environments (<a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">venv</a>).</p>
<p>Given a project (I used pyscaffold) to create.
 - Create a virtual environment at the highest level (python -m venv venv).
 - Add PYTHONPATH to your venv\Scripts\activate.bat file.
 - PYTHONPATH should contain at least three entries (path\to\MyTestProject; pat\to\MyTestProject\src; path\to\MyTestProject\tests). Activate your virtual environment from cmd by "venv\Scripts\activate.bat". - From within your modules, import from src (import src.mytestproject.package1.module1)</p>
<p>You will have your paths available to you each time you activate your virtual environment - and, you will have all the goodness associated with a virtual environment as a bonus. </p>
<pre><code>MyTestProject
├── AUTHORS.rst
├── CHANGELOG.rst
├── docs
│   ├── authors.rst
│   ├── changelog.rst
│   ├── conf.py
│   ├── index.rst
│   ├── license.rst
│   ├── Makefile
│   └── _static
├── LICENSE.txt
├── README.rst
├── requirements.txt
├── setup.cfg
├── setup.py
├── src
│   └── mytestproject
│       ├── __init__.py
│       ├── package1
│       │   ├── __init__.py
│       │   └── module1.py
│       ├── package2
│       │   ├── __init__.py
│       │   └── module2.py
│       └── skeleton.py
└── tests
    ├── conftest.py
    └── test_skeleton.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finally I found 2 ways : </p>
<p>1) First, note that .pth files also accept lines beginning with 'import' and execute them. So the solution was to create project.pth inside site-packages importing a module in my project home dir that do actually the site.addsitedir()</p>
<p>2) Other possibility : use the environment variable PYTHONSTARTUP : it will execute any module you want at python startup. You can specify a module that do the site.addsitedir() or even directly add paths into sys.path</p>
</div>
<span class="comment-copy">According to <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">the documentation</a>, adding a <code>.pth</code> file to a local <code>lib/site-packages</code> directory (on Windows) should work.</span>
<span class="comment-copy">Are you logging out of Windows (or restarting your PC) so that your path file is updated? If you don't then Windows won't update your paths.</span>
<span class="comment-copy">I am using Linux and I do not want to restart my PC for such a thing. I would like the .pth to be located in my project dir, not in site-packages dir so I can use relative paths.</span>
<span class="comment-copy">Yes, this is a good idea. Nevertheless, as I want to make an automatic installation of the project, it is dangerous to automatically edit an activation file that can change with virtualenv evolution. In addition, there are an activate.bat for windows and an activate for linux, it will be difficult to maintain both for a generic solution.</span>
<span class="comment-copy">Ah...Given your reputation, I guess I should have assumed you knew about virtual environments. It wasn't clear from the question that you were making an automatic installation so I just ASSumed : )  Anyway, best of luck to you.</span>
<span class="comment-copy">Just curious, though, why do you think modifying activate would be either complex or dangerous? Modifying activate with a couple lines of code seems easy and as long as PYTHONPATH is appended to, not overwritten, it seems pretty safe. Is there something I'm missing?</span>
<span class="comment-copy">Modifying manually is easy. But through a post install script, it may encounter some problem if the activate script has changed meanwhile because virtualenv changed. I prefer a flat file with list of paths.</span>
