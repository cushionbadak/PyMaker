<div class="post-text" itemprop="text">
<p>I have dataframe with following columns:</p>
<pre><code>Name, Surname, dateOfBirth, city, country
</code></pre>
<p>I am interested to find what is most common combination of name and surname and how much it occurs as well.
Would be nice also to see list of top 10 combinations.</p>
<p>My idea for top one was:</p>
<pre><code>mostFreqComb= df.groupby(['Name','Surname'])['Name'].count().argmax()
</code></pre>
<p>But I think it is not giving me correct answer.
Help would be much appreciated !</p>
<p>Thanks, 
Neb</p>
</div>
<div class="post-text" itemprop="text">
<p>For performance implications of the below solutions, see <a href="https://stackoverflow.com/questions/50328246/pandas-groupby-size-vs-series-value-counts-vs-collections-counter-with-multiple">Pandas groupby.size vs series.value_counts vs collections.Counter with multiple series</a>. They are presented below with best performance first.</p>
<h3><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.size.html" rel="nofollow noreferrer"><code>GroupBy.size</code></a></h3>
<p>You can create a series of counts with (Name, Surname) tuple indices using <code>GroupBy.size</code>:</p>
<pre><code>res = df.groupby(['Name', 'Surname']).size().sort_values(ascending=False)
</code></pre>
<p>By sorting these values, we can easily extract the most common:</p>
<pre><code>most_common = res.head(1)
most_common_dups = res[res == res.iloc[0]].index.tolist()  # handles duplicate top counts
</code></pre>
<h3><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html" rel="nofollow noreferrer"><code>value_counts</code></a></h3>
<p>Another way is to construct a series of tuples, then apply <code>pd.Series.value_counts</code>:</p>
<pre><code>res = pd.Series(list(zip(df.Name, df.Surname))).value_counts()
</code></pre>
<p>The result will be a series of counts indexed by Name-Surname combinations, sorted from most common to least.</p>
<pre><code>name, surname = res.index[0]  # return most common
most_common_dups = res[res == res.max()].index.tolist()
</code></pre>
<h3><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a></h3>
<p>If you wish to create a dictionary of <code>(name, surname): counts</code> entries, you can do so via <code>collections.Counter</code>:</p>
<pre><code>from collections import Counter

zipper = zip(df.Name, df.Surname)
c = Counter(zipper)
</code></pre>
<p><code>Counter</code> has useful methods such as <code>most_common</code>, which you can use to extract your result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like a good use case for the performant <code>Counter</code>:</p>
<pre><code>from collections import Counter
popular_names = Counter(zip(df.Name, df.Surname)).most_common(10) 
</code></pre>
</div>
<span class="comment-copy">Note on performance, including alternatives: <a href="https://stackoverflow.com/questions/50328246/pandas-groupby-size-vs-series-value-counts-vs-collections-counter-with-multiple">Pandas groupby.size vs series.value_counts vs collections.Counter with multiple series</a></span>
<span class="comment-copy">Hmm, seems like you ninja-edited me there. Well, I'd recommend putting Counter at the top, it's the best part of your answer thus far.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, I disagree.. All a matter of opinion :). For example, the syntax for getting duplicate top counts from a <code>Counter</code> is cumbersome [comprehension] versus <code>pandas</code> series indexing. If performance is not an issue, I'd recommend <code>value_counts</code></span>
<span class="comment-copy">I'm not sure I follow. It seems like OP just wants the top 10 most common values here. Why does it matter if there are duplicate counts or not? By the way, I'll note none of your options currently give OP what they asked for.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, What if the 10th count is repeated? So the 10th most popular count is 100 and there are 3 name-surname combinations with 100 count? <code>nlargest</code> with series indexing is much cleaner syntactically than a comprehension. <a href="https://stackoverflow.com/questions/26830929/collections-counter-most-common-including-equal-counts">Look here</a> for the IMHO ugly alternatives with <code>Counter</code>.</span>
<span class="comment-copy">I get what you're saying may be important to some users, but I doubt that was the point of a "I want the top 10" from this OP. Really, I see your point though, Counter really should have more than one function that let's for a cleaner interaction with their API.</span>
<span class="comment-copy">Downvoter: thanks, but I disagree with your downvote.</span>
