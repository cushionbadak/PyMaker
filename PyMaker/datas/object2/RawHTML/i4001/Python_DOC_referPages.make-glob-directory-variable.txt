<div class="post-text" itemprop="text">
<p>I'm trying to write a Python script that searches a folder for all files with the <code>.txt</code> extension. In the manuals, I have only seen it hardcoded into <code>glob.glob("hardcoded path")</code>.</p>
<p>How do I make the directory that glob searches for patterns a variable? Specifically: A user input. </p>
<p>This is what I tried:</p>
<pre><code>import glob

input_directory = input("Please specify input folder: ") 
txt_files = glob.glob(input_directory+"*.txt")
print(txt_files)
</code></pre>
<p>Despite giving the right directory with the <code>.txt</code> files, the script prints an empty list <code>[ ]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are not sure whether a path contains a separator symbol at the end (usually <code>'/'</code> or <code>'\'</code>), you can concatenate using <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer"><code>os.path.join</code></a>. This is a much more portable method than appending your local OS's path separator manually, and much shorter than writing a conditional to determine if you need to every time:</p>
<pre><code>import glob
import os

input_directory = input('Please specify input folder: ') 
txt_files = glob.glob(os.path.join(input_directory, '*.txt'))
print(txt_files)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.4+, you can use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob" rel="nofollow noreferrer"><code>pathlib.Path.glob()</code></a> for this:</p>
<pre><code>import pathlib

input_directory = pathlib.Path(input('Please specify input folder: '))
if not input_directory.is_dir():
    # Input is invalid.  Bail or ask for a new input.
for file in input_directory.glob('*.txt'):
    # Do something with file.
</code></pre>
<p>There is a <a href="https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use" rel="nofollow noreferrer">time of check to time of use</a> race between the <code>is_dir()</code> and the glob, which unfortunately cannot be easily avoided because <code>glob()</code> just returns an empty iterator in that case.  On Windows, it may not even be possible to avoid because you cannot open directories to get a file descriptor.  This is probably fine in most cases, but could be a problem if your application has <a href="https://en.wikipedia.org/wiki/Confused_deputy_problem" rel="nofollow noreferrer">a different set of privileges from the end user</a> or from other applications with write access to the parent directory.  This problem also applies to any solution using <code>glob.glob()</code>, which has the same behavior.</p>
<p>Finally, <code>Path.glob()</code> returns an iterator, and not a list.  So you need to loop over it as shown, or pass it to <code>list()</code> to materialize it.</p>
</div>
<span class="comment-copy">are you on windows, mac or linux?</span>
<span class="comment-copy">and you might just be missing a backslash (or forward slash) in your input search pattern</span>
<span class="comment-copy">Can you show the output of <code>print(input_directory+"*.txt")</code>?</span>
