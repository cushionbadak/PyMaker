<div class="post-text" itemprop="text">
<p>Is it possible to do this in Python:</p>
<pre><code>class Foo():
    def __init__(self):
        self.bar = MyClass()

foo = Foo()  

assert foo.bar == 0
assert type(foo.bar) == MyClass
</code></pre>
<p>If 0 was a string then __repr__ could be used in MyClass. The the value would be '0' but the type would be MyClass. But since __repr__ can only return string, and foo.bar has to be an int __repr__ does not work. So is it possible to have MyClass() giving a value of 0 (int) but still keep its type as MyClass?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish what you are talking about using the <a href="https://docs.python.org/3/library/numbers.html" rel="nofollow noreferrer">numbers</a> package of the Python standard library, which implements <a href="https://www.python.org/dev/peps/pep-3141/" rel="nofollow noreferrer">PEP 3141</a>.  Specifically, you can derive <code>MyClass</code> from <code>numbers.Integral</code>, and override the special methods as necessary.</p>
</div>
<span class="comment-copy">you could redefine <code>__eq__</code> to return <code>True</code> if argument is 0.</span>
<span class="comment-copy">Why not just store the integer inside of MyClass? So you can just do something like <code>assert foo.bar.val == 0</code> and <code>assert type(foo.bar) == MyClass</code></span>
<span class="comment-copy">I dont' understand what any of this has to do with <code>__repr__</code>.... Anyway, objects don't return things. Objects are values. You cannot be an <code>int</code> and <code>MyClass</code>, unless <code>MyClass</code> derives from <code>int</code></span>
<span class="comment-copy">This sounds like an XY problem, especially if you can't provide the necessary <code>__eq__</code> method for <code>MyClass</code>.</span>
<span class="comment-copy">@juanpa.arrivillaga Or unless you create a new class that multiply inherits from both <code>int</code> and <code>MyClass</code>, which might make sense if <code>MyClass</code> is designed to be used as .a mixin.</span>
