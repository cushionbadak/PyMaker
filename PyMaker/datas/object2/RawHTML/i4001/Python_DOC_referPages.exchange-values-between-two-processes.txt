<div class="post-text" itemprop="text">
<p>I have a python script written for python 2.7 running on my raspberry pi. What I try to do is move forward with my step motor and at the same time check if there is a square ahead. In order that these to things don't interfere I want to move the image processing to its own process and just check if the image was found before further steps are taken.</p>
<p>These are the involved classes.</p>
<p><code>SharedImageDetectionValue</code>:</p>
<pre><code>class SharedImageDetectionValue(object):
    stored_has_position_found = False

    def get_has_position_found(self):
        return self.stored_has_position_found

    def set_has_position_found(self, new_value):
        self.stored_has_position_found = new_value
        return self.stored_has_position_found
</code></pre>
<p><code>ImageProcessor</code>:</p>
<pre><code>class ImageProcessor:
    def __init__(self):
        # constructor code

    def run(self, shared):
        # do image processing till found a square
        shared.set_has_position_found(True)
</code></pre>
<p><code>Stepper</code>:</p>
<pre><code>class Stepper(Observable):
    def __init__(self):
        # constructor code

    def run_until_stopped(self, shared):
        # some motor code
        while self.running:
            has_found = shared.get_has_position_found()
            print("[ StepperH ] Value has found: " + str(has_found))
            if not has_found:
                self.do_steps(0.0005)
</code></pre>
<p>ProcessManager:</p>
<pre><code>class ProcessManager(BaseManager):
    pass
</code></pre>
<p>And I try to create the process with that:</p>
<pre><code>ProcessManager.register('SharedImageDetectionValue', SharedImageDetectionValue)
manager = ProcessManager()
manager.start()

shared = manager.SharedImageDetectionValue()
pool = Pool(1)

imgProcessor = ImageProcessor()
pool.apply_async(imgProcessor.run, args=(shared, ))

print("[ MAIN ] StepperH add to pool")
Stepper().run_until_stopped(shared)
</code></pre>
<p>For test purposes I directly set the value to true in the image processor but in the stepper it stays False.
I also tried to add the <code>Stepper</code> to the pool as well, but it just seemed that the stepper then didn't run as well.</p>
<p>Also I tried to call the processes over two helper functions but with a similar effect:</p>
<pre><code>def start_processing(passed_shared):
    ImageProcessor().run(passed_shared)

def start_moving_to_target_platform(passed_shared):
    StepperH().run_until_stopped(passed_shared)
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why are you complicating things with custom managers when you only want to share a single value - and <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value" rel="nofollow noreferrer"><code>multiprocessing.Value</code></a> exists precisely for that. Also, there is no point in creating a process pool if you're only going to use it to run a single process.</p>
<p>You could simplify your code greatly as:</p>
<pre><code>import ctypes
import multiprocessing

class ImageProcessor(multiprocessing.Process):

    def __init__(self, shared):
        super(ImageProcessor, self).__init__()
        self.shared = shared

    def run(self):
        # do image processing till found a square
        self.shared.value = True

class Stepper(Observable):

    def run_until_stopped(self, shared):
        while self.running:
            print("[ StepperH ] Value has found: {}".format(shared.value)
            if not shared.value:
                self.do_steps(0.0005)

    # rest of your Stepper code

if __name__ == "__main__":  # a multiprocessing guard
    shared = multiprocessing.Value(ctypes.c_bool, False)

    img_processor = ImageProcessor(shared)
    img_processor.start()

    Stepper().run_until_stopped(shared)
</code></pre>
<p>Without sacrificing any of the existing functionality.</p>
</div>
<span class="comment-copy">I refactored the code and use now queues. That seems to work so far..</span>
