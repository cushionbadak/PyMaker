<div class="post-text" itemprop="text">
<p><strong>What is required?</strong></p>
<p>Test if any of *.csv file is generated in the current directory. Note that the csv file is named after date/time so its not possible to get the file name in this case.</p>
<p><strong>Problem</strong></p>
<p>Tried the os.path.isfile([exact_path_to_file]) and it works. However what we need to find is if any one of the .csv file is generated if so, assertTrue else assertFalse. In case of assertTrue, will delete the file.
Is this possible with python?</p>
<p><strong>Reference</strong></p>
<p>The closest of this is using a regular expression like <a href="https://stackoverflow.com/questions/12925288/how-can-i-test-if-a-string-refers-to-a-file-or-directory-with-regular-expressio?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">this</a> post however for this simple check is it really required to go for a regular expression?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/glob.html#module-glob" rel="nofollow noreferrer"><code>glob</code> module</a> to list files in a directory matching a pattern:</p>
<pre><code>import glob
import os.path

csv_files = glob.glob(os.path.join(directory_name, '*.csv'))
</code></pre>
<p>If <code>csv_files</code> is a non-empty list, there are matching files.</p>
<p>Under the hood, the <code>glob</code> module transforms the glob pattern to a regular expression for you (via <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.translate" rel="nofollow noreferrer"><code>fnmatch.translate()</code></a>, runs <code>os.listdir()</code> on the given directory, and returns only those names that match the pattern, as full paths:</p>
<pre><code>&gt;&gt;&gt; import os.path, glob, tempfile
&gt;&gt;&gt; with tempfile.TemporaryDirectory() as directory_name:
...     pattern = os.path.join(directory_name, '*.csv')
...     # nothing in the directory, empty glob
...     print('CSV file count:', len(glob.glob(pattern)))
...     # create some files
...     for n in ('foo.csv', 'bar.txt', 'ham.csv', 'spam.png'):
...         __ = open(os.path.join(directory_name, n), 'w')  # touches file, creating it
...     csv_files = glob.glob(pattern)
...     print('CSV file count after creation:', len(csv_files))
...     for filename in csv_files:
...         print(filename)
...
CSV file count: 0
CSV file count after creation: 2
/var/folders/vh/80414gbd6p1cs28cfjtql3l80000gn/T/tmp2vttt0qf/foo.csv
/var/folders/vh/80414gbd6p1cs28cfjtql3l80000gn/T/tmp2vttt0qf/ham.csv
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>os.listdir</code> to get all file names and <code>os.path.splitext</code> to get file extension</p>
<pre><code>any(os.path.splitext(f)[1] == '.csv' for f in os.listdir(path))
</code></pre>
<p>For current path, <code>path=os.getcwd()</code>, <code>path='.'</code> will both do (or even leave out the parameter). To delete all *.csv files, just go through a loop</p>
<pre><code>for f in os.listdir('.'):
    if os.path.splitext(f)[1] == '.csv':
        os.remove(f)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate <a href="https://stackoverflow.com/questions/2299454/how-do-quickly-search-through-a-csv-file-in-python" title="how do quickly search through a csv file in python">stackoverflow.com/questions/2299454/â€¦</a></span>
<span class="comment-copy">@RonicK I do not see it as a duplicate. The intention of that post is to import multiple csv to database... Here I just want to check if we can find out in the local file system if there exists any file with extension .csv.</span>
<span class="comment-copy">Thanks. This works really well. Good explanation as well. However I would have to choose the other answer for this post which does not include to import any more modules except the system imports.</span>
<span class="comment-copy">@Triguna: <code>glob</code> is in the <i>standard library</i>, just like <code>os</code> and <code>os.path</code> are. But sure, under the hood, the implementation is not much different from what the other answer proposes, but that version only covers the 'matching extension' case, while mine covers the general pattern matching case. For example, the moment you want to extend your pattern to include a prefix such as <code>foobar*.csv</code>, matching the various parts manually becomes more cumbersome without <code>glob.glob()</code>.</span>
<span class="comment-copy">Thank you. Yes that is a good point. Your answer will stay as highly voted as your answer is what most people look for however for the question I have asked the above answer is sufficient.</span>
<span class="comment-copy">@Triguna: just to be clear: you are entirely right to pick the answer that helped <i>you</i> most to award the mark to. :-)</span>
<span class="comment-copy">Thanks this as well works and does not need to import any third party modules.</span>
<span class="comment-copy">I would also change the path to os.getcwd() since it is mentioned in the question as search in current directory. Can you improve the answer?</span>
