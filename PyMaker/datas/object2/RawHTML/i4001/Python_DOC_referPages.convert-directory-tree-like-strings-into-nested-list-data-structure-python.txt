<div class="post-text" itemprop="text">
<p>I have a list of 'directory-tree-like' strings. I want to convert it into a nested list (or another kind of data structure), to emphasize the dependencies.
for example, <strong>the input:</strong></p>
<h3>hierarchy_list</h3>
<pre><code>dir1
dir1/dir1.1                                            
dir1/dir1.2
dir1/dir1.3/dir1.3.1/dir1.3.1.1
dir1/dir1.1/dir1.1.1
dir1/dir1.1/dir1.1.2
</code></pre>
<h3>need to be converted to:</h3>
<pre><code>dir1 -&gt;
    dir1.1 -&gt; dir1.1.1 , dir1.1.2
    dir1.2
    dir1.3 -&gt; dir1.3.1 , dir1.3.2
</code></pre>
<p>where the '-&gt;' symbolize 'contains' (in a form of array attribute or equivalent). </p>
<p>dir1 contains list of dir1.1 , 1.2 , 1.3</p>
<p>dir1.1 contains list of dir1.1.1 , dir1.1.2</p>
<p>and so on...</p>
<p>Does someone have an idea how to do it in <strong>Python</strong> (algorithm and implementation)?</p>
</div>
<div class="post-text" itemprop="text">
<p>With a bit of recursion and a <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a> that can be done like:</p>
<h3>Code:</h3>
<pre><code>def build_dir_dict(dir_name_strings):

    def _build_dir_dict(path_pieces, dir_dict):
        print(path_pieces)
        if path_pieces:
            if not path_pieces[0]:
                _build_dir_dict(path_pieces[1:], dir_dict)
            else:
                if path_pieces[0] not in dir_dict:
                    dir_dict[path_pieces[0]] = {}
                _build_dir_dict(path_pieces[1:], dir_dict[path_pieces[0]])

    result = {}
    for dir_name_string in dir_name_strings:
        if dir_name_string:
            _build_dir_dict(dir_name_string.split('/'), result)
    return result
</code></pre>
<h3>Test Code:</h3>
<pre><code>data = [x.strip() for x in """
    dir1 
    dir1/dir1.1
    dir1/dir1.2 
    dir1/dir1.3/dir1.3.1/dir1.3.1.1 
    dir1/dir1.1/dir1.1.1 
    dir1/dir1.1/dir1.1.2
""".split('\n')[1:-1]]

print(build_dir_dict(data))
</code></pre>
<h3>Results:</h3>
<pre><code>{'dir1': {'dir1.1': {'dir1.1.1': {}, 'dir1.1.2': {}}, 
          'dir1.2': {}, 
          'dir1.3': {'dir1.3.1': {'dir1.3.1.1': {}}}
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For each path, you can just <code>split()</code> it on the '/', then loop through them adding to an existing key or creating the key as needed and then assigning that to the current parent to be considered next. For example:</p>
<pre><code>arr= ['dir1','dir1/dir1.1','dir1/dir1.2','dir1/dir1.3/dir1.3.1/dir1.3.1.1', 'dir1/dir1.1/dir1.1.1','dir1/dir1.1/dir1.1.2']

d = dict()
for path in arr:
    parent = d
    for dir in path.split('/'):    
        if dir not in parent:
            parent[dir] = dict()
        parent = parent[dir]
</code></pre>
<p>The result <code>d</code> will look like:</p>
<pre><code>{'dir1': {'dir1.1': {'dir1.1.1': {}, 'dir1.1.2': {}},
          'dir1.2': {},
          'dir1.3': {'dir1.3.1': {'dir1.3.1.1': {}}}
          }
}
</code></pre>
</div>
<span class="comment-copy">THANK YOU! that looks really sweet solution. I had a thought about recursion, but it stayed in the back part of my head...</span>
<span class="comment-copy">thanks, man! the thing is that I don't know how depth can be the hierarchy... look for the recursive solution above</span>
<span class="comment-copy">@ManorZvi this will work with arbitrary depths.</span>
