<div class="post-text" itemprop="text">
<p>The documentation for python's multiprocesing queue: <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow noreferrer">https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Queue</a></p>
<p>Isn't as clear as the one for queue.Queue: <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">https://docs.python.org/3/library/queue.html</a></p>
<p>As to whether or not the size of the queue is "infinite" (as in, within the possible bounds of whatever the program can manage to allocate memory wise) when the maxsize argument isn't given to the constructor.</p>
<p>Is this the case ?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>multiprocessing.Queue</code> mimics <code>queue.Queue</code> completly with all features (except <code>.task_done()</code> and <code>.join()</code>)</p>
<blockquote>
<p>Queue implements all the methods of Queue.Queue except for task_done() and join().</p>
</blockquote>
<p>So without arguments (or a negative number) it can take infinite elements</p>
<p>(as an side-note since Queues are internally list like structures (<code>dequeue</code>, <code>heapq</code>, <code>list</code>) it is harder to have an limit, then to not have an limit.)</p>
<p>Edit:</p>
<p>Ok as it turns out after looking through the source code, it turns out that <code>multiprocessing.Queue</code> does have a standard upper bound if no value is specified: 2**31-1</p>
<blockquote>
<pre><code># file multiprocessing/queues.py
class Queue(object):
    def __init__(self, maxsize=0, *, ctx):
        if maxsize &lt;= 0:
            from .synchronize import SEM_VALUE_MAX as maxsize # -&gt; 2**31-1
</code></pre>
</blockquote>
<p>So it is not infinte, but praticly infinte</p>
</div>
<span class="comment-copy">I opened the link so I could jump to the part where it was specifically documented... and it's not there. I could have sworn it was explicit in the multiprocessing documentation at one point.</span>
<span class="comment-copy">Hmh... I should have probably opened up that file myself :p</span>
<span class="comment-copy">Seems to be the confirmation I was looking for though, thanks !</span>
<span class="comment-copy">You say "since Queues are internally list", but that's not correct. Queues use <code>collections.dequeue</code> instances to buffer objects to be sent over the queue in FIFO order. The standard <code>queue.Queue</code> (for use in multithreaded programs) also uses a <code>deque</code> and has FIFO semantics, while the <code>PriorityQueue</code> and <code>LifoQueue</code> variants use different data structures (a binary heap using <code>heapq</code> in a <code>list</code>, and <code>list</code> working as a stack, respectively).</span>
<span class="comment-copy">@Blckknght I also found that out after looking close, I am going to edit it <i>list like structures</i></span>
