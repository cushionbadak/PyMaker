<div class="post-text" itemprop="text">
<p>I got following Python list: </p>
<pre><code>[(1, 2, 'Adam', 'M', '2', '12'),
(1, 2, 'Ewa', 'W', '2.0 (E)', '44'),
(1, 2, 'Ewa', 'W', '2.0 (E)', '44'),
(2, 3, 'Adam', 'M', '2', '12'),
(2, 3, 'Ewa', 'W', '2.0 (E)', '44')]
</code></pre>
<p>I want convert my list with tuples to the following structure: </p>
<pre><code>list = [('Adam', '12'), ('Ewa', '44')]
</code></pre>
<p>I dont have idea how I can make it in the most simplest way.</p>
<p>I thought about <code>set()</code>, but 0 and 1 element of tuples are not the same.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Give this a try:</p>
<pre><code>old_list = [(1, 2, 'Adam', 'M', '2', '12'),
            (1, 2, 'Ewa', 'W', '2.0 (E)', '44'),
            (1, 2, 'Ewa', 'W', '2.0 (E)', '44'),
            (2, 3, 'Adam', 'M', '2', '12'),
            (2, 3, 'Ewa', 'W', '2.0 (E)', '44')]

new_set = set((x[2],x[5]) for x in old_list)

print(new_set)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given all the values are the same and you just want to make sure you have all of the items, you can use a <code>dict</code>, e.g.:</p>
<pre><code>In []
import operator as op
dict(map(op.itemgetter(2, 5), old_list))
# dict((e[2], e[5]) for e in old_list)  # Alternative

Out[]
{'Adam': '12', 'Ewa': '44'}
</code></pre>
<p>You can turn it back into a list with <code>list(dict.items())</code> (Py3) or just <code>dict.items()</code> (Py2), though you may find a <code>dict</code> is a useful structure to work from.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use <code>operator.itemgetter</code> with <code>set</code>:</p>
<pre><code>from operator import itemgetter

lst = [(1, 2, 'Adam', 'M', '2', '12'),
       (1, 2, 'Ewa', 'W', '2.0 (E)', '44'),
       (1, 2, 'Ewa', 'W', '2.0 (E)', '44'),
       (2, 3, 'Adam', 'M', '2', '12'),
       (2, 3, 'Ewa', 'W', '2.0 (E)', '44')]

res = set(map(itemgetter(2, 5), lst))

print(res)

{('Adam', '12'), ('Ewa', '44')}
</code></pre>
</div>
<span class="comment-copy">You should really <i>show</i> us what you've attempted.  This isn't a code writing service.</span>
<span class="comment-copy">Your question is not clear. For example, that "Python list" is not actually a list. Also, it is not at all clear how your desired output comes from the stated input. Please explain the way the output is defined from the input, and clarify your input. Finally, since you ask for "the most simplest way" you should know some way, perhaps brute force. Please explain more about the work you have done on the problem and just where you are stuck.</span>
<span class="comment-copy">Thanks for your tips, I know that it's not code writing service, but only here I got possibility to find the best solutions of the really trivial things.I cant find a similar topic.</span>
<span class="comment-copy">These tuples look long and not-super-fun to manage. You might want to check out <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a> to make the code operating on them more understandable.</span>
<span class="comment-copy">you don't need the <code>[]</code>, as you don't need to build a list as argument to the <code>set</code>. The generator is sufficient</span>
<span class="comment-copy">Thanks, @njzk2 I did not know that. The answer has been updated.</span>
<span class="comment-copy">Downvoters care to comment? This solution is, in fact, more efficient than the non-functional one. In my opinion, it's also more readable.</span>
