<div class="post-text" itemprop="text">
<p><strong>Here is the code for the program:</strong>
I tried to implement a vector class as i learned about operator overloading in python. I was able to make a vector class which can be used much like a list with operations like len(vector) , vector1 + vector2 (addition operator overloading) and subtraction . But i found a problem. Here is the code of the program and i have stated the problem below :</p>
<pre><code>class vector:
"""Initialize Vector"""
def __init__(self,d):
    self.coords = [0]*d

def __len__(self):
    return len(self.coords)

def __getitem__(self, item): #Getting an item from a vector
    return self.coords[item]

def __setitem__(self, key, value):
    self.coords[key] = value

def __add__(self, other):
    if(len(self)!= len(other)):
        print("Don't add these too ! they are not same types :P")
    else:
        result = vector(len(self))
        for i in range(0,len(result)):
            result[i] = self[i] + other[i]
        return result
def __sub__(self, other):
    if(len(self) != len(other)):
        print("Dont subtract these two!")
    else:
        result = vector(len(self))
        for i in range(0,len(result)):
            result[i] = self[i] - other[i]
        return result

def __eq__(self, other):
    return self.coords == other.coords

def __ne__(self, other):
    return self.coords != other.coords

def __str__(self):
    return '&lt;'+ str(self.coords)[1:-1] +'&gt;'

print("Input for vector 1")
x = vector(2)
for i in range(0,len(x)):
    x[i] = int(input('Enter a number\n'))
print("Input for vector 2")
y = vector(2)
for i in range(0,len(y)):
    y[i] = int(input('Enter a number\n'))

z = x-y
print(str(x))
print("  +  ")
print(str(y))
print("  =  ")
print(str(z))
</code></pre>
<p><em>It works if i add a vector + list but list + vector gives an error. How can i implement the other .</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You want to implement <a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__" rel="nofollow noreferrer"><code>__radd__</code></a>.  Since it should do the same thing as <code>__add__</code> here, you can just assign <code>__add__</code> to it:</p>
<pre><code>class vector:
  ...
  def __add__(self, other):
    if(len(self)!= len(other)):
      print("Don't add these too ! they are not same types :P")
    else:
      result = vector(len(self))
      for i in range(0,len(result)):
        result[i] = self[i] + other[i]
      return result

  __radd__ = __add__
  ...
</code></pre>
</div>
<span class="comment-copy">Thank you ! i am new to python and currently learning DS ! Your Help is appreciated  :D</span>
<span class="comment-copy">If this answer worked for you, you can accept it by clicking the green checkmark next to it.</span>
