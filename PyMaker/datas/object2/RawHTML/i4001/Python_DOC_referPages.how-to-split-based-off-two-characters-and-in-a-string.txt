<div class="post-text" itemprop="text">
<p>For example calling .split() on the following would give...</p>
<pre><code>x = "[Chorus: Rihanna &amp; Swizz Beatz]
I just wanted you to know
...more lyrics
[Verse 2: Kanye West &amp; Swizz Beatz]
I be Puerto Rican day parade floatin'
... more lyrics"

x.split()
print(x)
</code></pre>
<p>would give</p>
<pre><code>["I just wanted you to know ... more lyrics", " be Puerto Rican day parade floatin' ... more lyrics]
</code></pre>
<p>Also, how would you save the deleted parts in brackets, thank you. Splitting by an unknown string inside two things is hard :/</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <strong><code>re.split</code></strong></p>
<pre><code>&gt;&gt;&gt; x = """[Chorus: Rihanna &amp; Swizz Beatz] I just wanted you to know...more lyrics [Verse 2: Kanye West &amp; Swizz Beatz] I be Puerto Rican day parade floatin' ... more lyrics"""
&gt;&gt;&gt; [i.strip() for i in re.split(r'[\[\]]', x) if i]

# ['Chorus: Rihanna &amp; Swizz Beatz', 'I just wanted you to know...more lyrics', 'Verse 2: Kanye West &amp; Swizz Beatz', "I be Puerto Rican day parade floatin' ... more lyrics"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>data=x.split(']')
print(data)
data=data[1::]
print(data)
location=0;
for i in data:
    data[location]=i.split('[')[0]
    location=location+1;
print(data)
</code></pre>
<p>I got this output for your initial input</p>
<pre><code>['I just wanted you to know...more lyrics', "I be Puerto Rican day parade floatin'... more lyrics"]
</code></pre>
<p>I hope this helps</p>
</div>
<div class="post-text" itemprop="text">
<p>Per the python documentation: <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">https://docs.python.org/2/library/re.html</a></p>
<p>Python is by and large an excellent language with good consistency, but there are still some quirks to the language that should be ironed out. You would <em>think</em> that the re.split() function would just have a potential argument to decide whether the delimiter is returned. It turns out that, for whatever reason, whether it returns the delimiter or not is based on the input. If you surround your regex with parentheses in re.split(), Python will return the delimiter as part of the array. </p>
<p>Here are two ways you might try to accomplish your goal:</p>
<pre><code>re.split("]",string_here)
</code></pre>
<p>and</p>
<pre><code>re.split("(])",string_here)
</code></pre>
<p>The first way will return the string with your delimiter removed. The second way will return the string with your delimiter still there, as a separate entry. </p>
<p>For example, running the first example on the string "This is ] a string" would produce:</p>
<p>["This is a ", " string."]</p>
<p>And running the second example would produce:</p>
<p>["This is a ", "]", " string."]</p>
<p>Personally, I'm not sure <em>why</em> they made this strange design choice.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
...
input='[youwontseethis]what[hi]ever'
...
output=re.split('\[.*?\]',input)
print(output)

#['','what','ever']
</code></pre>
<p>If the input string starts immediately with a 'tag' like your example, the first item in the tuple will be an empty string. If you don't want this functionality you could also do this:</p>
<pre><code>import re
...
input='[youwontseethis]what[hi]ever'
...
output=re.split('\[.*?\]',input)
output=output[1:] if output[0] == '' else output
print(output)

#['what',ever']
</code></pre>
<p>To get the tags simply replace the</p>
<pre><code>output=re.split('\[.*?\]',input)
</code></pre>
<p>with</p>
<pre><code>output=re.findall('\[.*?\]',input)

#['[youwontseethis]','[hi]']
</code></pre>
</div>
<span class="comment-copy">Look at <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a></span>
<span class="comment-copy">I have, but still cant figure out how to do it</span>
<span class="comment-copy">How is this different than your <a href="https://stackoverflow.com/questions/50327590/python-split-based-off-a-string-between-two-characters">previous question</a>? Also what is your desired output for this sample text?</span>
<span class="comment-copy"><code>x.split()</code> doesn't produce the list you claim and you don't mention what you <i>do</i> want. This question is unanswerable as stands. Can you turn your code into a  working example and then include the desired result? Otherwise, we need to close this.</span>
<span class="comment-copy"><i>You would think that the re.split() function would just have a potential argument to decide whether the delimiter is returned.</i> not really... the regex can have multiple groups and they would all be returned.  Its not just a question of a single delimiter.</span>
<span class="comment-copy">Even in the case of multiple delimiters, it's splitting the string based on a pattern. Therefore, it must know what subset of the string was matched to the pattern.</span>
<span class="comment-copy">It knows what subset was matched as the delimiter, but the question is, what part of that delimiter should be returned? The rule is simple: all of the capture groups. If I split on <code>r"\s+"</code>, there are no capture groups and no delimiter is returned. But what about <code>s = "aaa [1, 2] bbb [3, 4] ccc"</code>? <code>re.split(r"\s*\[(\d+)\s*,\s*(\d+)\s*\]\s*", s)</code> returns <code>['aaa', '1', '2', 'bbb', '3', '4', 'ccc']</code>. It would be more complicated to have a parameter outside of the regex telling you which capture groups to use.</span>
