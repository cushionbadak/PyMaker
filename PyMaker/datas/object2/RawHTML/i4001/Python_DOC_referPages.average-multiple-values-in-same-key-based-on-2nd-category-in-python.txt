<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31212260/group-and-compute-the-average-in-list-of-tuples">Group and compute the average in list of tuples</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have a list which looks something like this</p>
<pre><code>[('A1', 'A', 342.5), ('A2', 'A', 509.70), ('A2', 'B', 119.34), 
('A1', 'B', 618.42), ('A1', 'A', 173.54), ('A1', 'B', 235.21)]
</code></pre>
<p>I'm looking to find the average of the third elements for each type of second element for each first column values. The output would look something like this</p>
<pre><code>A1 (A 258.02) (B 426.815)
A2 (A 509.70) (B 119.34)
</code></pre>
<p>I've been able to do something like this for a list of tuples with two elements but am struggling with three.</p>
<p>If this question has already been answered then please point me there as I couldn't find it myself</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a>:</p>
<pre><code>data = [('A1', 'A', 342.5), ('A2', 'A', 509.70), ('A2', 'B', 119.34),
        ('A1', 'B', 618.42), ('A1', 'A', 173.54), ('A1', 'B', 235.21)]

import itertools as it
for g1 in it.groupby(sorted(data), key=lambda x: x[0]):
    print(g1[0], end=' ')
    for g2 in it.groupby(g1[1], key=lambda x: x[1]):
        nums = [i[2] for i in g2[1]]
        print('(%s %.2f)' % (g2[0], sum(nums) / len(nums)), end=' ')
    print()
</code></pre>
<h3>Results:</h3>
<pre><code>A1 (A 258.02) (B 426.81) 
A2 (A 509.70) (B 119.34) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using nested defaultdict with float  </p>
<pre><code>from collections import defaultdict

l = [('A1', 'A', 342.5), ('A2', 'A', 509.70), ('A2', 'B', 119.34),
     ('A1', 'B', 618.42), ('A1', 'A', 173.54), ('A1', 'B', 235.21)]

d = defaultdict(lambda: defaultdict(lambda: defaultdict(float)))

for a,b,c in l:
    d[a][b]['sum'] += c
    d[a][b]['count'] += 1
    d[a][b]['average'] += (c - d[a][b]['average'])/d[a][b]['count']
</code></pre>
<p>We use the fact that the average can be calculates as (see: <a href="https://math.stackexchange.com/posts/957376/">https://math.stackexchange.com/posts/957376/</a>)</p>
<p><a href="https://i.stack.imgur.com/82vMt.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/82vMt.png"/></a></p>
<p>Returns the following structure:</p>
<pre><code>{
  "A1": {
    "A": {
      "sum": 516.04,
      "count": 2.0,
      "average": 258.02
    },
    "B": {
      "sum": 853.63,
      "count": 2.0,
      "average": 426.815
    }
  },
  "A2": {
    "A": {
      "sum": 509.7,
      "count": 1.0,
      "average": 509.7
    },
    "B": {
      "sum": 119.34,
      "count": 1.0,
      "average": 119.34
    }
  }
}
</code></pre>
<hr/>
<p>With this you can easily add more data, e.g. running this again:</p>
<pre><code>l = [('A1', 'A', 100)]

for a,b,c in l:
    d[a][b]['sum'] += c
    d[a][b]['count'] += 1
    d[a][b]['average'] += (c - d[a][b]['average'])/d[a][b]['count']
</code></pre>
<hr/>
<pre><code>for k,v in d.items():
    print(k)
    print('-------------')
    for k2, v2 in v.items():    
        print(k2)  
        for k3, v3 in v2.items(): 
            print('{}: {}'.format(k3,v3))
        print()
</code></pre>
<p>Returns:</p>
<pre><code>A1
-------------
A
sum: 616.04
count: 3.0
average: 205.34666666666666

B
sum: 853.63
count: 2.0
average: 426.815

A2
-------------
A
sum: 509.7
count: 1.0
average: 509.7

B
sum: 119.34
count: 1.0
average: 119.34
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's fairly easy to construct a suitable data structure to hold the data:</p>
<pre><code>d = [('A1', 'A', 342.5), ('A2', 'A', 509.70), ('A2', 'B', 119.34),
     ('A1', 'B', 618.42), ('A1', 'A', 173.54), ('A1', 'B', 235.21)]

In []:
r = {}
for a, b, c in d:
    r.setdefault(a, {}).setdefault(b, []).append(c)
r

Out[]:
{'A1': {'A': [342.5, 173.54], 'B': [618.42, 235.21]}, 'A2': {'A': [509.7], 'B': [119.34]}}
</code></pre>
<p>Then you can just iterate through this doing the sums:</p>
<pre><code>In []:
{k1: {k2: sum(v2)/len(v2) for k2, v2 in v1.items()} for k1, v1 in r.items()}

Out[]:
{'A1': {'A': 258.02, 'B': 426.815}, 'A2': {'A': 509.7, 'B': 119.34}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generate a dictionary of all the values first, and then average them.</p>
<p>So, if we name your list <code>l</code>, you can do:</p>
<pre><code>d = {}
for a, b, c in l:
    d.setdefault(a, {}).setdefault(b, []).append(c)

d = {p: {r: sum(s) / len(s) for r, s in q.items()} for p, q in d.items()}
</code></pre>
<p>which gives <code>d</code> as:</p>
<pre><code>{
    'A1': {
        'A': 258.02,
        'B': 426.815
    },
    'A2': {
        'A': 509.7,
        'B': 119.34
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this really easy in pandas.</p>
<pre><code>import pandas as pd

l = [('A1', 'A', 342.5), ('A2', 'A', 509.70), ('A2', 'B', 119.34),
     ('A1', 'B', 618.42), ('A1', 'A', 173.54), ('A1', 'B', 235.21)]

df = pd.DataFrame(l)
print(df.groupby([0, 1]).mean())
</code></pre>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">Could you post your code; what you have tried?</span>
<span class="comment-copy">Pandas might make your life easier depending on your use case here. <code>pd.DataFrame(l).groupby((0, 1)).mean()</code></span>
<span class="comment-copy">You could have a look at my solution if you are interested in adding values later.</span>
<span class="comment-copy">If one wanted this could also be shortened into a single <code>groupby</code>.</span>
<span class="comment-copy">@miradulo, the funky print at the beginning of the line made a single groupby, well funky.</span>
<span class="comment-copy">@StephenRauch Thank you, this is working. I've now applied it to a much larger list of data. Where would I put in the formatting to make the averages to two decimal points?</span>
<span class="comment-copy">@user9784424, I updated the answer with 2 decimal points.</span>
<span class="comment-copy">@StephenRauch thanks yeah been coding for a bit but first time using SO :). 1 final question is there anyway to order the output by the first element i.e. A1, A2, A3 etc. For the larger data set i've got up to A30</span>
<span class="comment-copy">If you are going to downvote, please provide feedback.</span>
<span class="comment-copy">I did not downvote, but this would have been my first option had I answered the question. +1</span>
<span class="comment-copy">Any feedback for downvote is appreciated.</span>
<span class="comment-copy">I didn't downvote but I'm guessing it is because using Pandas is overkill for this</span>
<span class="comment-copy">Fair, can't disagree for the contrived example. Thanks.</span>
<span class="comment-copy">I downvoted your answer because pandas, while brilliant and wondrous, was not explicitly asked for here. And the solution for this problem is not sufficiently complicated to justify its installation and use (it <i>is</i> in some other cases though).</span>
<span class="comment-copy">I agree with Coldspeed. Your answer is fine, just tough to say if Pandas is warranted or not without a lot more context for what they are doing (which is why I'll advertise it in a comment instead usually).</span>
