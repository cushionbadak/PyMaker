<div class="post-text" itemprop="text">
<p>If I have <code>aaabbbccc</code>, I'd like to change them in to <code>a3b3c3</code>.</p>
<p>I am using if statement for this.. but it looks too inefficient.</p>
<p>Maybe Regex would be helpful, but regex for searching only the consecutives is possible?</p>
<p>if I have <code>aaabbbcccaaa</code> then I'd like to change them <code>a3b3c3a3</code> list this.. which means the algorithm only search the "consecutives and count them" change into integer.</p>
<p>Any hint to proceed would be appreciated.</p>
<pre><code>def comp(string):


index = []

for i in range(len(string)):
    try:
        if string[i] is not string[i+1]:
            index.append(i)
    except:
        pass

first = string[index[0]] + str(index[0]+1)
print(first)

message_comp = [first]
for i in range(1, len(message_comp)):
    message_comp.append(message[index[i]]*(index[i-1]+1))

final = ''.join(message_comp)

return final
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a></strong>:</p>
<blockquote>
<p>Make an iterator that returns consecutive keys and groups from the iterable</p>
</blockquote>
<pre><code>import itertools
x = 'aaabbbcccaaa'
groups = [i + str(len([*j])) for i, j in itertools.groupby(x)]

# ['a3', 'b3', 'c3', 'a3']
</code></pre>
<p><strong><code>join</code></strong> to finish up:</p>
<pre><code>''.join(groups)

# a3b3c3a3
</code></pre>
<p>If needed, <strong><code>replace</code></strong> to remove <code>1</code>:</p>
<p><code>''.join(groups).replace('1', '')</code> instead of <code>''.join(groups)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe itertools groupby?</p>
<pre><code>from itertools import groupby
s = "aaabbbcccaaa"
groups = groupby(s)
a = [(label, sum(1 for _ in group)) for label, group in groups]
b = [i for sub in a for i in sub]
print("".join(map(str,b)))

output: a3b3c3a3
</code></pre>
</div>
<span class="comment-copy">What is the most simple way to deprecate 1? such as for abbccc, not a1b2c3 but ab2c3</span>
<span class="comment-copy">@Beverlie updated my answer, just use <code>''.join(groups).replace('1', '')</code> at the end.</span>
<span class="comment-copy">@chriz what does [*j] mean?</span>
<span class="comment-copy"><code>[*j]</code> unpacks the contents of <code>j</code> (a groupby object) into a list, so that you can check the length of it.</span>
<span class="comment-copy">More about unpacking here: <a href="https://www.geeksforgeeks.org/packing-and-unpacking-arguments-in-python/" rel="nofollow noreferrer">geeksforgeeks.org/packing-and-unpacking-arguments-in-python</a></span>
