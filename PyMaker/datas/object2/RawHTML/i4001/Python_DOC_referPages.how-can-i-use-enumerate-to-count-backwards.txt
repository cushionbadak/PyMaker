<div class="post-text" itemprop="text">
<pre><code>letters = ['a', 'b', 'c']
</code></pre>
<p>Assume this is my list. Where <code>for i, letter in enumerate(letters)</code> would be:</p>
<pre><code>0, a
1, b
2, c
</code></pre>
<p>How can I instead make it enumerate backwards, as:</p>
<pre><code>2, a
1, b
0, c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>letters = ['a', 'b', 'c']
for i, letter in reversed(list(enumerate(reversed(letters)))):
    print(i, letter)
</code></pre>
<p>Output:</p>
<pre><code>2 a
1 b
0 c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would try to make a reverse list first then you may use <code>enumerate()</code></p>
<pre><code>letters = ['a', 'b', 'c']
letters.reverse()
for i, letter in enumerate(letters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>tl;dr: size - index - 1</p>
<p>I'll assume the question you are asking is whether or not you can have the index be reversed while the item is the same, for example, the a has the ordering number of 2 when it actually has an index of 0. </p>
<p>To calculate this, consider that each element in your array or list wants to have the index of the item with the same "distance" (index wise) from the end of the collection. Calculating this gives you size - index. </p>
<p>However, many programming languages start arrays with an index of 0. Due to this, we would need to subtract 1 in order to make the indices correspond properly. Consider our last element, with an index of size - 1. In our original equation, we would get size - (size - 1), which is equal to size - size + 1, which is equal to 1. Therefore, we need to subtract 1. </p>
<p>Final equation (for each element): size - index - 1</p>
</div>
<div class="post-text" itemprop="text">
<p>The zip function creates a list of element-wise pairs for two parameter lists.</p>
<pre><code>list(zip([i for i in range(len(letters))][::-1], letters))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>l = len(letters)
for i, letter in enumerate(letters):
    print(l-i, letters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can define utility function (in <strong>Python3.3+</strong>)</p>
<pre><code>from itertools import count


def enumerate_ext(iterable, start=0, step=1):
    indices = count(start, step)
    yield from zip(indices, iterable)
</code></pre>
<p>and use it directly like</p>
<pre><code>letters = ['a', 'b', 'c']
for index, letter in enumerate_ext(letters,
                                   start=len(letters) - 1,
                                   step=-1):
    print(index, letter)
</code></pre>
<p>or write helper</p>
<pre><code>def reverse_enumerate(sequence):
    yield from enumerate_ext(sequence,
                             start=len(sequence) - 1,
                             step=-1)
</code></pre>
<p>and use it like</p>
<pre><code>for index, letter in reverse_enumerate(letters):
    print(index, letter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>letters = ['a', 'b', 'c']

for i, letter in zip(range(len(letters)-1, -1, -1), letters):
    print(i, letter)
</code></pre>
<p>prints </p>
<pre><code>2 a
1 b
0 c
</code></pre>
<p>Taken from answer in a similar question: <a href="https://stackoverflow.com/questions/529424/traverse-a-list-in-reverse-order-in-python">Traverse a list in reverse order in Python</a></p>
</div>
<span class="comment-copy">Try: <code>for i, letter in reversed(list(enumerate(reversed(letters))))</code></span>
<span class="comment-copy">@davedwards Linked answer does not output exactly what OP wants.</span>
<span class="comment-copy">@VivekPabani, true that! thanks Vivek ;-)</span>
<span class="comment-copy">You could write your own function; <code>enumerate</code> is literally just 4 lines of code in python. Tweaking it a bit should do the job - <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#enumerate</a></span>
