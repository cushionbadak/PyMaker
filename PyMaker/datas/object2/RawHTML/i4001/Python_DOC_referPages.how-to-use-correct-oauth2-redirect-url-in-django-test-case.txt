<div class="post-text" itemprop="text">
<p>My Django webapp uses oAuth2 to get authenticated in Strava.</p>
<ol>
<li><p>I have a link in my webpage that sends a request to Strava indicating a redirect url amongst other arguments. In this example case <a href="http://127.0.0.1:8000/token_exchange" rel="nofollow noreferrer">http://127.0.0.1:8000/token_exchange</a></p></li>
<li><p>Strava then makes a request to that url with the code to exchange for the access token. I have a view that does that exchange in that url.</p></li>
</ol>
<p>Everything works fine.</p>
<p>My problem is that I am trying to build an automated test. But when I launch the tests (with python manage.py test) the server does not run in port 8000 but in a different port.</p>
<p>Is there a best practice way to manage that redirect url so that it has production domain in production but uses the test server address when running the tests?</p>
<p>Thanks!!!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The goal of unit testing is to isolate each part of the program and show that the individual parts are correct.</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Unit_testing#Advantages" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Unit_testing#Advantages</a></p>
<p>If you're writing unit tests and not complex integration tests, the best practice would be just mocking this behavior.</p>
<p>There is a wonderful guide at Python docs about <code>unittest.mock</code> library on how to monkey patch all the behavior you're not testing in the particular case:
<a href="https://docs.python.org/3/library/unittest.mock-examples.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock-examples.html</a></p>
<p>Also, you should definitely check out <code>responses</code> library, it's really useful when you're trying to test parts which rely on third-party services:
<a href="https://github.com/getsentry/responses" rel="nofollow noreferrer">https://github.com/getsentry/responses</a></p>
</div>
<span class="comment-copy">Thanks very much for your advice! In this case I am referring to a functional test. I am trying to test a whole story for a user that gets to my app, chooses to link it to Strava etc. - Would mocking be the right solution in that case too or is there another good practice for those cases?</span>
<span class="comment-copy">@AlvaroAguilar yep, that is correct. To make sure that third-party service responses in such a way you expect it to, you should use the capabilities of monitoring system of your project. More info at this cool article: <a href="https://circleci.com/blog/testing-3rd-party-apis-and-microservices" rel="nofollow noreferrer">circleci.com/blog/testing-3rd-party-apis-and-microservices</a></span>
