<div class="post-text" itemprop="text">
<p>I actually have one dataframe, here is an exemple:</p>
<pre><code>cluster     seq_sp1      seq_sp2
1           seq20        seq56
1           seq56        seq20
2           seq3         seq5
3           seq9         seq5
3           seq7         seq4
3           seq4         seq7
</code></pre>
<p>and I would like to remove duplicated sequences:
here in the exemple <code>seq20 seq56</code> is duplicated because there is also <code>seq56 seq20</code> and the same for  <code>seq7 seq4</code> and <code>seq4 seq7</code> </p>
<p>I guess a solution would be first to sort all columns such: </p>
<pre><code>cluster     seq_sp1      seq_sp2
1           seq20        seq56
1           seq20        seq56
2           seq3         seq5
3           seq9         seq5
4           seq7         seq4
4           seq7         seq4
</code></pre>
<p>and then remove one of the two duplicated sequences and get: </p>
<pre><code>   cluster     seq_sp1      seq_sp2
    1           seq20        seq56
    3           seq3         seq5
    4           seq9         seq5
    6           seq7         seq4
</code></pre>
<p>Thanks for your help :)</p>
<p>Report of the script you gave me :</p>
<p>here is a head of my first data (see picture to see in color the duplictaed groups)</p>
<pre><code>cluster_name    qseqid  sseqid  pident_x    pident_y    length  qstart  qend    sstart  send    qspec   sspec
13  cluster_016663  EOG090X00GO_0035_0035_1 EOG090X00GO_0042_0035_1 0.93    93.0    1179    1   1175    1   1179    0035    0042
14  cluster_016663  EOG090X00GO_0035_0035_1 EOG090X00GO_0042_0042_1 0.93    93.0    1179    1   1175    1   1179    0035    0042
16  cluster_016663  EOG090X00GO_0035_0042_1 EOG090X00GO_0042_0035_1 0.93    93.0    1179    1   1175    1   1179    0035    0042
17  cluster_016663  EOG090X00GO_0035_0042_1 EOG090X00GO_0042_0042_1 0.93    93.0    1179    1   1175    1   1179    0035    0042
19  cluster_016663  EOG090X00GO_0042_0035_1 EOG090X00GO_0035_0035_1 0.93    93.0    1179    1   1179    1   1175    0042    0035
20  cluster_016663  EOG090X00GO_0042_0035_1 EOG090X00GO_0035_0042_1 0.93    93.0    1179    1   1179    1   1175    0042    0035
22  cluster_016663  EOG090X00GO_0042_0042_1 EOG090X00GO_0035_0035_1 0.93    93.0    1179    1   1179    1   1175    0042    0035
23  cluster_016663  EOG090X00GO_0042_0042_1 EOG090X00GO_0035_0042_1 0.93    93.0    1179    1   1179    1   1175    0042    0035
</code></pre>
<p>and here is the result I shoud obtain: </p>
<pre><code>    Unnamed: 0  cluster_name    qseqid  sseqid  pident_x    pident_y    length  qstart  qend    sstart  send    qspec   sspec
0   13  cluster_016663  EOG090X00GO_0035_0035_1 EOG090X00GO_0042_0035_1 0.93    93.0    1179    1   1175    1   1179    35  42
1   14  cluster_016663  EOG090X00GO_0035_0035_1 EOG090X00GO_0042_0042_1 0.93    93.0    1179    1   1175    1   1179    35  42
8   27  cluster_015764  EOG090X00LI_0035_0035_1 EOG090X00LI_0042_0042_1 0.8059999999999999  82.3    1013    1   1013    1   1008    35  42
9   28  cluster_015764  EOG090X00LI_0035_0035_1 EOG090X00LI_0042_0035_1 0.784   78.4    1013    1   1013    1   963 35  42
11  32  cluster_015764  EOG090X00LI_0042_0035_1 g1726.t1_0035_0042  0.67    58.5    1010    1   963 1   751 42  35
</code></pre>
<p>But i'm actually getting:</p>
<pre><code>Unnamed: 0  cluster_name    qseqid  sseqid  pident_x    pident_y    length  qstart  qend    sstart  send    qspec   sspec
0   13  cluster_016663  EOG090X00GO_0035_0035_1 EOG090X00GO_0042_0035_1 0.93    93.0    1179    1   1175    1   1179    35  42
1   14  cluster_016663  EOG090X00GO_0035_0035_1 EOG090X00GO_0042_0042_1 0.93    93.0    1179    1   1175    1   1179    35  42
</code></pre>
<p>I used this code: </p>
<pre><code>df=pd.read_table("dataframe.txt",header=0,sep='\t')

df[['qseqid','sseqid']] = np.sort(df[['qseqid','sseqid']], axis=1)
df = df.drop_duplicates(subset=['qseqid ','sseqid'])
df.to_csv("df_test",sep='\t')
</code></pre>
<p><a href="https://i.stack.imgur.com/wn2Yg.png" rel="nofollow noreferrer"><img alt="picture" src="https://i.stack.imgur.com/wn2Yg.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think need <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html" rel="nofollow noreferrer"><code>numpy.sort</code></a> with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop_duplicates.html" rel="nofollow noreferrer"><code>drop_duplicates</code></a> - return sorted rows:</p>
<pre><code>df[['seq_sp1','seq_sp2']] = np.sort(df[['seq_sp1','seq_sp2']], axis=1)
df = df.drop_duplicates(subset=['seq_sp1','seq_sp2'])
print (df)
   cluster seq_sp1 seq_sp2
0        1   seq20   seq56
2        2    seq3    seq5
3        3    seq5    seq9
4        3    seq4    seq7
</code></pre>
<p>Or use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.duplicated.html" rel="nofollow noreferrer"><code>DataFrame.duplicated</code></a> for mask with inverted mask by <code>~</code> nd filtering by <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing" rel="nofollow noreferrer"><code>boolean indexing</code></a> - original not sorted values in output:</p>
<pre><code>mask = pd.DataFrame(np.sort(df[['seq_sp1','seq_sp2']], axis=1), index=df.index).duplicated()
df = df[~mask]

print (df)
   cluster seq_sp1 seq_sp2
0        1   seq20   seq56
2        2    seq3    seq5
3        3    seq9    seq5
4        3    seq7    seq4
</code></pre>
<p>EDIT:</p>
<p>I test it with new data:</p>
<pre><code>df = df[['qseqid','sseqid']]
print (df)
                     qseqid                   sseqid
13  EOG090X00GO_0035_0035_1  EOG090X00GO_0042_0035_1
14  EOG090X00GO_0035_0035_1  EOG090X00GO_0042_0042_1
16  EOG090X00GO_0035_0042_1  EOG090X00GO_0042_0035_1
17  EOG090X00GO_0035_0042_1  EOG090X00GO_0042_0042_1
19  EOG090X00GO_0042_0035_1  EOG090X00GO_0035_0035_1
20  EOG090X00GO_0042_0035_1  EOG090X00GO_0035_0042_1
22  EOG090X00GO_0042_0042_1  EOG090X00GO_0035_0035_1
23  EOG090X00GO_0042_0042_1  EOG090X00GO_0035_0042_1

df[['qseqid','sseqid']] = np.sort(df[['qseqid','sseqid']], axis=1)
df = df.drop_duplicates(subset=['qseqid','sseqid'])

print (df)
                     qseqid                   sseqid
13  EOG090X00GO_0035_0035_1  EOG090X00GO_0042_0035_1
14  EOG090X00GO_0035_0035_1  EOG090X00GO_0042_0042_1
16  EOG090X00GO_0035_0042_1  EOG090X00GO_0042_0035_1
17  EOG090X00GO_0035_0042_1  EOG090X00GO_0042_0042_1
</code></pre>
<hr/>
<pre><code>mask = pd.DataFrame(np.sort(df[['qseqid','sseqid']], axis=1), index=df.index).duplicated()
print (~mask)
13     True
14     True
16     True
17     True
19    False
20    False
22    False
23    False
dtype: bool

df = df[~mask]
print (df)
                     qseqid                   sseqid
13  EOG090X00GO_0035_0035_1  EOG090X00GO_0042_0035_1
14  EOG090X00GO_0035_0035_1  EOG090X00GO_0042_0042_1
16  EOG090X00GO_0035_0042_1  EOG090X00GO_0042_0035_1
17  EOG090X00GO_0035_0042_1  EOG090X00GO_0042_0042_1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>#sorting rows and joining as string
df["seq_sorted"] = df.apply(lambda row: ",".join(x for x in sorted((row.seq_sp1,  row.seq_sp2))), axis=1)

#droping duplicates
df = df.drop_duplicates(subset="seq_sorted").drop(["seq_sorted"], axis=1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>df_set = df.apply(lambda x: str(sorted(set(x))), 1)

In: df[~df_set.duplicated()]
Out: 
        seq_sp1 seq_sp2
cluster                
1         seq20   seq56
2          seq3    seq5
3          seq9    seq5
3          seq7    seq4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pd.DataFrame.apply</code> to apply <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><code>sorted</code></a> on <code>axis=1</code>. Then use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.duplicated.html" rel="nofollow noreferrer"><code>pd.Series.duplicated</code></a> to drop duplicates.</p>
<pre><code>dups = df[['seq_sp1', 'seq_sp2']].apply(sorted, axis=1).duplicated()
res = df[~dups]

print(res)

   cluster seq_sp1 seq_sp2
0        1   seq20   seq56
2        2    seq3    seq5
3        3    seq9    seq5
4        3    seq7    seq4
</code></pre>
</div>
<span class="comment-copy">Do you need check duplicates only in <code>seq_sp1</code> and <code>seq_sp2</code>, right?</span>
<span class="comment-copy">Yep only in those two columns</span>
<span class="comment-copy">Hi, thanks but there is an issue, I posted what I should get vs what I got</span>
<span class="comment-copy">@Benjamin - there are not some another rows with data? I test it and get different output</span>
<span class="comment-copy">Ok sorry it works thank you :)</span>
<span class="comment-copy">@Benjamin - Glad can help!</span>
<span class="comment-copy">Thanks for your help :)</span>
<span class="comment-copy">It works thank you :)</span>
<span class="comment-copy">Thanks for the hint of sets not being ordered as I had the exact opposite in my mind. @Benjamin: you should consider taking away the accepting, because a non-ordered set breaks the function you expect. Besides, not speaking about performance as this wasn't explicitly asked (even if it is always nice to be efficient, no discuss) but in this case it might have been outweighted by the simple and short code. However - I'll try to correct my solution with regards to these points.</span>
<span class="comment-copy">I just added <code>sorted()</code> so that at least the correct function is guaranteed - see it as a patch... However, jpp's solution obviously is the cleaner way to go here.</span>
<span class="comment-copy"><code>sorted()</code> is <i>not enough</i>, not if there are objects of different types that happen to be equal and have the same hash. <code>float</code>, <code>int</code> and <code>bool</code> objects can be equal, and have the same hash when they are equal, so creating a set of values that mix those types will remove information you may actually want to retain, and different input order <i>will</i> result in radically different sets! Compare <code>{1.0, 1, True}</code>, <code>{1, 1.0, True}</code> and <code>{True, 1, 1.0}</code>, for example.</span>
<span class="comment-copy">Thanks also for this clarification, again interesting to learn. However, I may note that this does not apply here with regards to the given data - but I understand that one has to care about this in general.</span>
<span class="comment-copy">Hi, thanks but I actually get to much seq duplictaed, for exemple I still keep 8 sequences for the cluster cluster_016663</span>
