<div class="post-text" itemprop="text">
<p>I would like to print nested hash in Python, from this:</p>
<pre><code>example_dict = {
    'key1' : 'value1',
    'key2' : {
        'key2a': 'value2a'
    },
    'key3' : {
        'key3a': {
            'key3aa': 'value3aa',
            'key3ab': 'value3ab',
            'key3ac': 'value3ac'
        },
        'key3b': [
            'value3b1',
            'value3b2'
        ]
    },
}
</code></pre>
<p>to something like this:</p>
<pre><code>key1 value1
key2 key2a value2a
key3 key3a key3aa value3aa
key3 key3a key3ab value3ab
key3 key3a key3ac value3ac
key3 key3b value3b1
key3 key3b value3b2
</code></pre>
<p>I am not really familiar with Python, and after couple hours I'm still stuck.</p>
<p>I currently working on this function:</p>
<pre><code>def recursive(src, res, line = ''):
    if isinstance(src, dict):
        for key, value in src.items():
            line += str(' ' + key)
            recursive(value, res, line)
    elif isinstance(src, list):
        for litem in src:
            recursive(litem, res, line)
    else:
        line += str(' ' + str(src))
        res.append(line)
</code></pre>
<p>I'm trying to add each line to a list to be able to use it later, but I think I don't have the right aproach with my shared variable (line), because at each dict the recursive call is made with one more dict key from the same level of depth, so I got this :</p>
<pre><code> key3 key3a key3aa value3aa
 key3 key3a key3aa key3ac value3ac
 key3 key3a key3aa key3ac key3ab value3ab
 key3 key3a key3b value3b1
 key3 key3a key3b value3b2
 key3 key2 key2a value2a
 key3 key2 key1 value1
</code></pre>
<p>What would be a Pythonic way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator</a> (<a href="https://stackoverflow.com/q/231767/7311767"><code>yield</code></a> statement) you can do that recursively like:</p>
<h3>Code:</h3>
<pre><code>def recursive(src, so_far=()):
    if isinstance(src, dict):
        for key, value in src.items():
            yield from recursive(value, so_far + (key,))
    elif isinstance(src, list):
        for item in src:
            yield from recursive(item, so_far)
    else:
        yield ' '.join(so_far + (src,))
</code></pre>
<p>One thing to note is the need to re-yield the results from the generator that was recursed into.  That is done here using:</p>
<pre><code>yield from recursive(item, so_far)
</code></pre>
<p>Which is equivalent to:</p>
<pre><code>for i in recursive(item, so_far):
    yield i
</code></pre>
<h3>Test Code:</h3>
<pre><code>example_dict = {
    'key1': 'value1',
    'key2': {
        'key2a': 'value2a'
    },
    'key3': {
        'key3a': {
            'key3aa': 'value3aa',
            'key3ab': 'value3ab',
            'key3ac': 'value3ac'
        },
        'key3b': [
            'value3b1',
            'value3b2'
        ]
    },
}

for line in recursive(example_dict):
    print(line)
</code></pre>
<h3>Results:</h3>
<pre><code>key1 value1
key2 key2a value2a
key3 key3a key3aa value3aa
key3 key3a key3ab value3ab
key3 key3a key3ac value3ac
key3 key3b value3b1
key3 key3b value3b2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I got this to work, but its a bit hacky, using <code>append</code> adds one element, and <code>extend</code> adds all elements in a list. Hope it helps:</p>
<pre><code>def recursive(src, start=""):
    lst = []
    for k, v in src.items():
        new_start = "{} {}".format(start, k)
        if isinstance(v, dict):
            lst.extend(recursive(v, start=new_start))
        elif isinstance(v, list):
            lst.extend("{}: {}".format(new_start[1:] , val) for val in v)
        else:
            lst.append("{}: {}".format(new_start[1:] , v))

    return lst


items = recursive(example_dict)
for item in items:
    print(item)
</code></pre>
<p>Output:</p>
<pre><code> key1: value1
 key2 key2a: value2a
 key3 key3a key3aa: value3aa
 key3 key3a key3ab: value3ab
 key3 key3a key3ac: value3ac
 key3 key3b: value3b1
 key3 key3b: value3b2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pretty straightforward recursive implementation.</p>
<pre><code>def pr(t, pref=''):
    for k, v in t.items():
        if isinstance(v, dict):
            pr(v, pref=(pref + k + ' '))
        elif isinstance(v, list):
            for el in v:
                if isinstance(el, str):
                    print(pref + ' ' + k + ' ' + el)
                else:
                    pr(el, pref=k + ' ')
        else:
            print(pref + ' ' + k + ' ' + v)
</code></pre>
</div>
<span class="comment-copy">Thanks for the nice answer. I wonder if it would be worth mentioning the <code>yield from</code> construct in the context of the two <code>for ...: yield...</code> blocks?</span>
<span class="comment-copy">Thanks for the answer and for the links, that helps a lot ! I also looking at the <code>yield from</code> as mentioned above by curiosity, but your solution works like a charm in my case. Again Thank you !</span>
