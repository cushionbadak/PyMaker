<div class="post-text" itemprop="text">
<p>In the old days, we used a 'found' variable when iterating through a list to signify that you found a match. There is now the pythonic construct of using an 'else' with a for loop to eliminate using the 'found' variable. For example, this works beautifully:</p>
<pre><code>l = [1, 2, 3]
magic_number = 4

for n in l:
    if n == magic_number:
        print("Magic number found")
        break
else:
    print("Magic number not found")
</code></pre>
<p>But, I have a nested for loop AND I need to store all items that do not exist in the second array (m below) but do exist in the first array (l below). I'm just not sure how to go about implementing this construct. I don't want to (if I don't have to) use a 'found' variable... Any ideas?</p>
<pre><code>l = [1, 2, 3]
m = [4, 5, 6]

not_found = list()

for n in l:
   for o in m:
      if n == o:
         print("Found a match")
         break
   else:
      print("No match found")

   not_found.append(o)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want all the elements in <code>l</code> that are not in <code>m</code> you may do a comprehension (as @PatrickHaugh suggested) or a set operation.</p>
<p>The comprehension:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; m = [4, 5, 6]
&gt;&gt;&gt; [o for o in l if o not in m]
[1, 2, 3]
</code></pre>
<p>If you prefer to use a set operation:</p>
<pre><code>&gt;&gt;&gt; l = {1, 2, 3}
&gt;&gt;&gt; m = {4, 5, 6}
&gt;&gt;&gt; l - m
{1, 2, 3}
&gt;&gt;&gt; l = {1, 2, 3, 4}
&gt;&gt;&gt; l - m
{1, 2, 3}
</code></pre>
<p>Note that <code>l</code> and <code>m</code> here are <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>sets</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of ways that you could do this. </p>
<p>The cleanest and most effiecient way is actually to probably use <code>set</code>s. E.g.</p>
<pre><code>l = {1, 2, 3}
m = {4, 5, 6}
not_found = m - l
</code></pre>
<p>If logging is important to you, you count use the <code>in</code> key world:</p>
<pre><code>l = [1, 2, 3]
m = [4, 5, 6]

not_found = list()

for o in m:
   if o in l:
       print("Found a match")
   else:
       print("No match found")
       not_found.append(o)
</code></pre>
<p>Also, I'm assuming that your last line isn't indented properly. At the moment your example would give <code>not_found = [6, 6, 6]</code></p>
</div>
<span class="comment-copy">It would be better to just use a list comprehension: <code>not_found = [o for o in m if o not in l]</code></span>
<span class="comment-copy">Which "old days" and "now" are you talking about here? <code>for…else…</code> has been in Python since at least the first public release in 1991.</span>
<span class="comment-copy">I'm a little confused, is your second code block working the way you want, or not? If not, you should really say what it's doing, and what you want instead.</span>
<span class="comment-copy">Anyway, while <code>else</code> can be used with nested loops, it's only useful at each level if you break out of that level. It seems like you don't want to break out of the outer level, because you want to find all matches rather than none, therefore there's nothing <code>else</code> can do for you there. Not because there's another <code>while</code> nested inside, just because you don't have any break logic. But you also don't need a flag, because you're already keeping a list. The list is truthy if it's not empty.</span>
