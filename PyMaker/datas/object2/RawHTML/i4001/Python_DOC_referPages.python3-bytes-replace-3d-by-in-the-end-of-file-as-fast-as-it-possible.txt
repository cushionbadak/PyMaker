<div class="post-text" itemprop="text">
<p>I have a bytes object which is actually the file in the format of dataurl. It is about 500 KB. </p>
<p>I need to drop 37 bytes of header (I made it using a slice) and replace %3D by = at the end of file (this sequence can be found 0-2 times).</p>
<p>Urllib.parse changes all entries in the object. </p>
<p>Is there a beautiful way to process this object?</p>
<pre><code>    content_length = int(self.headers['Content-Length']) # &lt;--- Gets the size of data
    post_body = self.rfile.read(content_length) # &lt;--- Gets the data itself
    print(len(post_body))
    with open("1111", "wb") as fd:
        fd.write(post_body)

    post_body = post_body[37:len(post_body)]

    with open("decoded.png", "wb") as fh:
        fh.write(base64.decodebytes(post_body))
</code></pre>
<p>In the last line I have a problem.</p>
<p>'=' characters might be added to make the last block contain four base64 characters. But in the post request I have %3D instead of =</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems to me that you need to "unquote" the url escaped (<code>%xx</code>) symbols.</p>
<p>Python has a function for this, in python2.7 it is <a href="https://docs.python.org/2/library/urllib.html#urllib.unquote" rel="nofollow noreferrer"><code>urllib.unquote</code></a>, in python3 it is <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote" rel="nofollow noreferrer"><code>urllib.parse.unquote</code></a>. Sample usage would be:</p>
<pre><code>from urllib.parse import unquote

post_body = unquote(post_body[37:])
  # my_list[i:] is short for my_list[i:len(my_list)]
</code></pre>
<p>However, I don't know if you may only want to apply it to the last bytes, or only apply if the bytes end with <code>%3D</code>... for which you can use <code>.endswith()</code> that works for strings and bytes the same:</p>
<pre><code>my_bytes.endswith('%3D')
</code></pre>
</div>
<span class="comment-copy">Can you show the code you have tried. Also try to give a minimal reproducible example. I'd recommend reading SO's <a href="https://stackoverflow.com/help/how-to-ask">How to Ask Guidelines</a></span>
<span class="comment-copy">I used decoding before parsing url. This was a mistake.</span>
