<div class="post-text" itemprop="text">
<p>I want to have an option that takes two arguments. I.e. would like to be able to use</p>
<pre><code>$ ./foo --path "old" "new"
</code></pre>
<p>Or what I really want is:</p>
<pre><code>$ ./foo --path "old" "new" --path "old" "new"
</code></pre>
<p>But I don't know how to do it? (In fact I fear that it might not be possible...)</p>
<hr/>
<h3>What I don't want, but which is close</h3>
<p>I know how to have a repeating option (see below), but that is really not what I want here.</p>
<pre><code>#!/usr/bin/env python3
'''foo

Usage:
  foo [--path ARG]...

Options:
  --path=ARG  Repeating option.
'''

import docopt

args = docopt.docopt(__doc__)

print(args)
</code></pre>
<p>Could be called with</p>
<pre><code>$ ./foo --path "old" --path "new"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be easily archived with docopt.</p>
<p>Syntax: <code>Usage: ./foo [--path &lt;src&gt; &lt;dst&gt;]...</code></p>
<p>Input: <code>./foo --path src1 dst1 --path src2 dst2</code></p>
<p>Code:</p>
<pre><code>&gt;&gt;&gt; from docopt import docopt
&gt;&gt;&gt; doc = "Usage: ./foo [--path &lt;src&gt; &lt;dst&gt;]..."
&gt;&gt;&gt; argv = "--path old1 new1 --path old2 new2".split()
&gt;&gt;&gt; args = docopt(doc, argv)
</code></pre>
<p>Result:</p>
<pre><code>{
  "--path": 2, 
  "&lt;dst&gt;": [
    "dst1", 
    "dst2"
  ], 
  "&lt;src&gt;": [
    "src1", 
    "src2"
  ]
}
</code></pre>
<p>And now do something with it:</p>
<pre><code>&gt;&gt;&gt; if bool(args["--path"]):
&gt;&gt;&gt;     n = 1 if args["--path"] is True else if args["--path"]
&gt;&gt;&gt;     for i in range(0, n)]:
&gt;&gt;&gt;         print("{}, {}".format(args["&lt;old&gt;"][i], args["&lt;new&gt;"][i]))
src1, dst1
src2, dst2
</code></pre>
<hr/>
<p>To add a multiple positional arguments, require path option and arguments to be in the correct order with parens "<strong>( )</strong>".</p>
<pre><code>Usage: ./foo [(--path &lt;src&gt; &lt;dst&gt;)]... &lt;arg&gt;...
</code></pre>
<p><strong>Attention:</strong> docopt doesn't raise a <code>SystemExit</code> in case the user mixes up the syntax and inputs <code>./foo arg --path src dst</code> if you use options with multiple arguments like that. You will have to handle it yourself or add another (sub)command in front of it.</p>
<pre><code>Usage: ./foo [(--path &lt;src&gt; &lt;dst&gt;)]... bar &lt;arg&gt;...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not possible to accomplish with docopt.</p>
<p>The owner of the project <a href="https://github.com/docopt/docopt/issues/168" rel="nofollow noreferrer">gives</a> the following reason:</p>
<blockquote>
<p>Because in invocation like <code>prog --foo bar baz qux</code> there's no way for a person to tell if it means <code>prog --foo=bar baz qux</code> or <code>prog --foo=bar,baz qux</code> or <code>prog --foo=bar,baz,qux</code>.</p>
</blockquote>
<p>which I think is pretty reasonable.</p>
<p>I would suggest using two options instead, maybe <code>--from</code> and <code>--to</code>, or <code>--old-path</code> and <code>--new-path</code>.</p>
<p>Alternatively, you could use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> instead, and set the <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer">nargs</a> option (e.g. <code>nargs=2</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use click lib
<a href="http://click.pocoo.org/5/options/" rel="nofollow noreferrer">http://click.pocoo.org/5/options/</a></p>
<pre><code>@click.command()
@click.option('--path', '-m', multiple=True)
def run(path):
    print('\n'.join(path))
</code></pre>
</div>
<span class="comment-copy">That's great! I had already given up hope.</span>
<span class="comment-copy">It is not very robust though... In the sense that it can become mingled with positional arguments, without any warning.</span>
<span class="comment-copy">The only issue I am experiencing is that docopt doesn't raise a <code>SystemExit</code> if you mix up the input and use the positional argument in between the options but you could check the parsed option for the correct syntax and raise it yourself. Can you specify your issue with positional arguments?</span>
<span class="comment-copy">In this example when I would input <code>./foo --path a b c</code> I think that an error should be raised (sure I could this manually, still not very problematic). However with <code>Usage: ./foo [--path &lt;src&gt; &lt;dst&gt;]... &lt;arg&gt;...</code> is becomes more problematic. In this particular case ``./foo --path a b c` cannot be parsed, where I think it should?</span>
<span class="comment-copy">That would be the case with the missing <code>SystemExit</code> I was referencing to. It would be a wrong usage since the options are supposed to be in front of the positional arguments <code>&lt;arg&gt;</code>. It can be avoided with a (sub)command.</span>
<span class="comment-copy">Thanks! I was aware of the argparse solution, but I switched to docopt for its simplicity. I guess in my practical problem I could also ask the user to specify <code>--path="/old/path;/new/path"</code> and have a <code>--sep</code> option.</span>
<span class="comment-copy">Thanks for the click suggestion. Your solution however does not seem to work for me: <code>/foo --path test test Usage: example [OPTIONS]  Error: Got unexpected extra argument (test)</code></span>
<span class="comment-copy">@TomdeGeus  /foo -m test1 -m test2.</span>
