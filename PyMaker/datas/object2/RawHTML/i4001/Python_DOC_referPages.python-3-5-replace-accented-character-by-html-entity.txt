<div class="post-text" itemprop="text">
<p>I'm trying to automatate a series of queries but, to do that, I need to replace characters with accents with the corrresponding html entity.
For reasons it needs to be in Python3</p>
<p>Example:</p>
<pre><code>vèlit 
[needs to become] 
v&amp;egrave;lit
</code></pre>
<p>The thing is, whenever I try to do a word.replace, it doesn't find it.</p>
<p>This:</p>
<pre><code>if u'è' in sentence:
    print(u'Found è')
</code></pre>
<p>Works and finds "è", but doing:</p>
<pre><code>word.replace('è','&amp;egrave;')
</code></pre>
<p>Doesn't do anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace <code>word.replace('è','&amp;egrave;')</code> with <code>word = word.replace('è','&amp;egrave;')</code> and print the result to check.</p>
<p><code>word.replace('è','&amp;egrave;')</code> does work, but it doesn't actually make any changes to the <code>word</code> content itself. </p>
<p>Check <a href="https://docs.python.org/3.3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">str.replace()</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">str.translate</a> method and the data in python's <a href="https://docs.python.org/3/library/html.entities.html" rel="nofollow noreferrer">html</a> package to convert characters to the equivalent html entity.</p>
<p>To do this, <code>str.translate</code> needs a dictionary that maps characters (technically the character's integer representation, or <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer">ordinal</a>) to html entities.</p>
<p><code>html.entities.codepoint2name</code> contains the required data, but the entity names are not bounded by '&amp;' and ';'.  You can use a dict comprehension to create a table with the values you need.</p>
<p>Once the table has been created, call your string's translate method with the table as the argument and the result will be a new string in which any characters with an html entity equivalent will have been converted.  </p>
<pre><code>&gt;&gt;&gt; import html.entities
&gt;&gt;&gt; s = 'vèlit'

&gt;&gt;&gt; # Create the translation table
&gt;&gt;&gt; table = {k: '&amp;{};'.format(v) for k, v in html.entities.codepoint2name.items()}

&gt;&gt;&gt; s.translate(table)
'v&amp;egrave;lit'

&gt;&gt;&gt; 'Voilà'.translate(table)
'Voil&amp;agrave;'
</code></pre>
<p>Be aware that accented latin characters may be represented by a combination of unicode code points: 'è' can be represented by the single code point - <em>LATIN SMALL LETTER E WITH GRAVE</em> - or two codepoints - <em>LATIN SMALL LETTER E</em> followed by <em>COMBINING GRAVE ACCENT</em>.  In the latter case (known as the <em>decomposed</em> form), the translation will not work as expected.</p>
<p>To get around this, you can convert the two-codepoint <em>decomposed</em> form to the single codepoint <em>composed</em> form using the <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer">normalize</a> function from the <a href="https://docs.python.org/3/library/unicodedata.html" rel="nofollow noreferrer">unicodedata</a> module in Python's standard library.</p>
<pre><code>&gt;&gt;&gt; decomposed
'vèlit'
&gt;&gt;&gt; decomposed == s
False
&gt;&gt;&gt; len(decomposed)    # decomposed is longer than composed
6
&gt;&gt;&gt; decomposed.translate(table)
'vèlit'
&gt;&gt;&gt; composed = unicodedata.normalize('NFC', decomposed)
&gt;&gt;&gt; composed == s
True
&gt;&gt;&gt; composed.translate(table)
'v&amp;egrave;lit'
</code></pre>
</div>
<span class="comment-copy">Strings can't be modified. <code>replace</code> creates a new string with the replaced text and returns it.  <code>word = word.replace('è','&amp;egrave;')</code> may be what you are after.</span>
<span class="comment-copy">As an aside, you don't need the <code>u</code> string qualifier in python 3 - strings are already unicode.</span>
<span class="comment-copy">it works for me.</span>
<span class="comment-copy">Thank you! Only been working with Python for a few months so some things still escape me. Thanks! :D</span>
