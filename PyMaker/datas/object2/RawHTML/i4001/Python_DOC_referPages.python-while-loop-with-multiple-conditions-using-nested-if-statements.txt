<div class="post-text" itemprop="text">
<p>The following While loop obtains a randomly generated number and compares it to a user generated number. If the first guess is correct, tit allows the user to use to the name they entered in another module. If however the first guess is incorrect, but the second guess is, it is supposed to output a hardcoded name. If the second guess is incorrect, it should inform the user that all guesses were incorrect and that they do not have superpowers. The problem is I can get the program to work for the if and else statements but not the elif. Please help.</p>
<pre><code>def getUserName():
    print('Welcome to the Superhero Name Game v 2.0')
    print('Copyright \N{COPYRIGHT SIGN}2018. Alex Fraser')

    userName=input('Please enter the superhero name you wish to use. ')
    return userName

def getUserGuess():
    import random
    x = random.randint(1,10)
    userGuess = int(input('Please enter a number between 1 and 10. '))
    return x, userGuess

def superName(n, r, g):
    guessCount = 1
    while guessCount &lt; 3:
        if g == r and guessCount == 1:
            #hooray
            print(f'Congrats! You can use your chosen name. Your superhero name is {n}')
            return
        elif g == r and guessCount == 2:
            #meh good effort
            print('Your superhero name is Captain Marvel.')
            return
        else:
            getUserGuess()
            print(r,g)
        guessCount += 1
    print('All your guesses were incorrect. Sorry you do not have super powers')
    print(f'The number you were looking for was {r}')


n = getUserName()    
r, g = getUserGuess()
print(r,g)
superName(n,r,g)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to break out of an <code>if/elif/else</code> conditional. These are NOT loops. <code>elif</code> and <code>else</code> will only run if the <code>elif</code> and <code>if</code> conditions above them fail. All you are doing with your break statements is breaking out of your while loop. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>else</code> clause doesn't make sense to be where it is. It's syntactically valid, but logically doesn't make sense. What you've written is:</p>
<pre><code>while you haven't guessed three times:
  check if it's a correct guess on the first try. If so, use the user's choice name
  check if it's a correct guess on the second try. If so, assign the user a name.
  for any other guess, tell the user they've failed and break out of the while.
</code></pre>
<p>You want the logic for "tell the user they've failed" to only trigger after the while loop ends, since the while loop is enforcing the "do it three times" thing.</p>
<pre><code>while guess_count &lt; 3:
    if g == r and guess_count == 1:
        # hooray
        return
    elif g == r and guess_count == 2:
        # meh
        return
    else:
        # this is just one incorrect guess -- you should probably
        # prompt the user to guess another number to change the value of g
    guess_count += 1
# boo, you failed to guess
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're iterating over a limited number of tries. I feel it's more natural to convert this into a <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">search-style <code>for</code></a>: </p>
<pre><code>def superName(n, r):    # Note, we ask for all attempts, no initial guess
    for guessCount in (1,2):
        r,g = getUserGuess()
        print(r,g)
        if g == r:
            if guessCount == 1:
                #hooray
                print(f'Congrats! You can use your chosen name. Your superhero name is {n}')
                return
            elif guessCount == 2:
                #meh good effort
                print('Your superhero name is Captain Marvel.')
                return
            # Note: that could've been an else
            # We have covered every case of guessCount
    else:    # Not necessary since we return instead of break
        print('All your guesses were incorrect. Sorry you do not have super powers')
        print(f'The number you were looking for was {r}')
</code></pre>
<p>We can go a step further and iterate over the messages instead:</p>
<pre><code>def superName(n, r):    # Note, we ask for all attempts, no initial guess
    for successmessage in (
            f'Congrats! You can use your chosen name. Your superhero name is {n}',
            'Your superhero name is Captain Marvel.' ):
        r,g = getUserGuess()
        print(r,g)
        if g == r:
            print(successmessage)
            break   # We've found the appropriate message
    else:    # Not necessary if we return instead of break
        print('All your guesses were incorrect. Sorry you do not have super powers')
        print(f'The number you were looking for was {r}')
</code></pre>
<p>I noticed the <code>getUserGuess</code> calls didn't actually change <code>g</code>. You'll probably want to reconsider that (this revision changes <code>r</code> too, which is likely also not what you want). This would explain why you never see the second success message; you entered a second guess but the program checked the first guess again. </p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to @ytpillai for the solution. With a slight modification to limit the number of guesses to 3. Regardless of whether guess 3 is correct or not the user is to get the same message.</p>
<pre><code>def getUserName():
    print('Welcome to the Superhero Name Game v 2.0')
    print('Copyright \N{COPYRIGHT SIGN}2018. Alex Fraser')

    userName=input('Please enter the superhero name you wish to use. ')
    return userName

GUESS_COUNT_LIMIT = 2
def getUserGuess():
    return int(input('What is your guess? '))
def superName(n, r, g):
    guessCount = 1
    if g == r:
        print(f'Congrats! You can use your hero name. Your superhero name is {n}')
        return
    g = getUserGuess()
    if g == r:
        print('Your superhero name is Captain Marvel')
        return

    while g != r and guessCount &lt; GUESS_COUNT_LIMIT:
        g = getUserGuess()

        if g == r:
            print('All your guesses were incorrect. Sorry you do not have super powers')
            return
        guessCount +=1 



    print('All your guesses were incorrect. Sorry you do not have super powers')


import random
superName(getUserName(), random.randint(1, 10),getUserGuess())
</code></pre>
</div>
<span class="comment-copy">Edit, the call to getUserGuess returns 2 values. Because I'm not using those values I can remove the call, however it then breaks the loop.</span>
<span class="comment-copy">please fix the indentation</span>
<span class="comment-copy">The code you've shown doesn't make any sense, as there's a <code>break</code> in every branch of the <code>if</code>/<code>elif</code>/<code>else</code>, so the loop never repeats. I'm afraid I have no idea what you're actually wanting this code to do from the question, so I can't really help you sort it out.</span>
<span class="comment-copy">Blcknght. I'm trying to rework the while loop so that if the second guess is correct the hardcode name is printed to the screen. Unlike the output obtained below.  Copyright Â©2018. Alex Fraser Please enter the superhero name you wish to use. Random Please enter a number between 1 and 10. 4 Please enter a number between 1 and 10. 5 All your guesses were incorrect. Sorry you do not have super powers The number you were looking for was 5</span>
<span class="comment-copy">You're definitely going to have to post how you're calling this and what <code>getUserGuess</code> does</span>
<span class="comment-copy">thanks @ytpillai. The conditionals may not be indented in the code block above but they are in my editor</span>
<span class="comment-copy">I'll remove from my answer then.</span>
<span class="comment-copy">It physically hurts that @AdamSmith stole my accept. :(</span>
<span class="comment-copy">Thanks @AdamSmith. I'll give that a go</span>
<span class="comment-copy">I've implemented the changes you've suggested, however am running into the same problem. The loop iterates correctly however second guess output is never printed?</span>
<span class="comment-copy">Edit: all output statements are executed when the first guess is correct.</span>
<span class="comment-copy">@AlexanderFraser sounds like you're not returning at the end of the clause.</span>
<span class="comment-copy">Can you maybe remove the if and elif from.the while.loop and put it on top? Makes the code a whole lot cleaner.</span>
<span class="comment-copy">@YannVemier you are correct that I do not want r to change</span>
<span class="comment-copy">Then you have another thing to reconsider: Why does <code>getUserGuess</code> generate a random number?</span>
<span class="comment-copy">I realize through using this forum and in consultation with my lecturer that I only need to call for the random number once.</span>
