<div class="post-text" itemprop="text">
<p>I'm scrapping a website script and I came across a variable
<code>var string = "\x61\x48\x52\x30\x63\x44\x6f\x76\x4c\x33\x42\x73\x64\x43\x35\x68\x62\x6d\x6c\x74\x5a\x57\x68\x6c\x59\x58\x5a\x6c\x62\x69\x35\x6c\x64\x53\x7c\x72\x63\x33\x6c\x6b\x63\x32\x51\x76\x51\x6c\x38\x74\x58\x31\x52\x6f\x5a\x56\x7c\x43\x5a\x57\x64\x70\x62\x6d\x35\x70\x62\x6d\x63\x74\x4c\x54\x45\x74\x4c\x54\x45\x31\x4d\x6a\x41\x77\x4e\x44\x51\x78\x4d\x7a\x63\x75\x62\x58\x41\x30\x50\x33\x64\x33\x4e\x58\x63\x30\x4d\x51\x3d\x3d"</code></p>
<p>it's a part of a long string so I'm storing it in python as a substring variable as follows: </p>
<p>let's say that the div that has the script I need is stored in a <code>div</code> variable, therefore <code>script = div.script.text</code> returns the script I need, then I search for the above string beginning <code>st = script.find("var string=")</code> and the end of this string <code>end = script.find(";", k)</code>, now I can form the string using <code>string = script[st + 11: end - 1]</code>, now if I run <code>print(string)</code> it prints</p>
<pre><code>"\x61\x48\x52\x30\x63\x44\x6f\x76\x4c\x33\x42\x73\x64\x43\x35\x68\x62\x6d\x6c\x74\x5a\x57\x68\x6c\x59\x58\x5a\x6c\x62\x69\x35\x6c\x64\x53\x7c\x72\x63\x33\x6c\x6b\x63\x32\x51\x76\x51\x6c\x38\x74\x58\x31\x52\x6f\x5a\x56\x7c\x43\x5a\x57\x64\x70\x62\x6d\x35\x70\x62\x6d\x63\x74\x4c\x54\x45\x74\x4c\x54\x45\x31\x4d\x6a\x41\x77\x4e\x44\x51\x78\x4d\x7a\x63\x75\x62\x58\x41\x30\x50\x33\x64\x33\x4e\x58\x63\x30\x4d\x51\x3d\x3d"
</code></pre>
<p>but I can't get it's actual value, running python in terminal shows the following results</p>
<pre><code>&gt;&gt;&gt; string = "\x61\x48\x52\x30\x63\x44\x6f\x76\x4c\x33\x42\x73\x64\x43\x35\x68\x62\x6d\x6c\x74\x5a\x57\x68\x6c\x59\x58\x5a\x6c\x62\x69\x35\x6c\x64\x53\x7c\x72\x63\x33\x6c\x6b\x63\x32\x51\x76\x51\x6c\x38\x74\x58\x31\x52\x6f\x5a\x56\x7c\x43\x5a\x57\x64\x70\x62\x6d\x35\x70\x62\x6d\x63\x74\x4c\x54\x45\x74\x4c\x54\x45\x31\x4d\x6a\x41\x77\x4e\x44\x51\x78\x4d\x7a\x63\x75\x62\x58\x41\x30\x50\x33\x64\x33\x4e\x58\x63\x30\x4d\x51\x3d\x3d"
&gt;&gt;&gt; string
'aHR0cDovL3BsdC5hbmltZWhlYXZlbi5ldS|rc3lkc2QvQl8tX1RoZV|CZWdpbm5pbmctLTEtLTE1MjAwNDQxMzcubXA0P3d3NXc0MQ=='
</code></pre>
<p>That <code>'aHR0cDovL3BsdC5hbmltZWhlYXZlbi5ldS|rc3lkc2QvQl8tX1RoZV|CZWdpbm5pbmctLTEtLTE1MjAwNDQxMzcubXA0P3d3NXc0MQ=='</code> is what I need, so how to get it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I found the solution a long time ago and forgot to post the answer, so sorry for those who came across the same problem.</p>
<p>First, we need to escape the hex string by removing the <code>\x</code> from it:</p>
<pre><code>un_escaped_hex_string = "\x61\x48\x52\..."
escaped_hex_string = un_escaped_hex_string.replace("\\x", "")
</code></pre>
<p>After removing the <code>\x</code> we have generated a hex string, so, to get it's value we do the following:</p>
<pre><code>byte_value = bytes.fromhex(escaped_hex_string)
value = byte_value.decode('utf-8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your string is <a href="https://en.wikipedia.org/wiki/Base64" rel="nofollow noreferrer">Base64</a> encoded - it has a certain look to it, and the <code>==</code> at the end are a dead giveaway. You can use the <a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer"><code>base64</code> module</a> to turn it back into a byte string.</p>
<pre><code>import base64
base64.b64decode(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ast.literal_eval</code>, since the Javascript string literal in question is also a valid Python string literal.</p>
<pre><code>&gt;&gt;&gt; x = r'"\x61\x48"'
&gt;&gt;&gt; ast.literal_eval(x)
'aH'
</code></pre>
</div>
<span class="comment-copy">I'm not sure I understand. You already have it -- it's right there in <code>string</code>. If you're thinking "but it can't be that simple, because I'm passing <code>string</code> to some algorithm that expects data in a certain format, and that code is failing, so the data must be in the wrong format", let's see that code too.</span>
<span class="comment-copy">Alternatively, if you're thinking, "yes, I know that <code>string</code> contains the data I want, but I can only create <code>string</code> by copying the output of my web scraper and pasting it into the terminal. I want to know how to get that data directly inside my web scraper", let's see the code for your web scraper.</span>
<span class="comment-copy">@Kevin your second comment is what I'm aspiring, I've edited the question.</span>
<span class="comment-copy">Doing what you said get me this <code>b'\xc7\xadq\xe3\xccy\xdb\x1d\xf4\xc7\xad\xf1\xe3\x8cz\x7f\ x1e\xfa\xc7\x871\xdf|x\xdb\x1e\xf7\xc7\xae1\xe3|w\xe7\x1e\ xbc\xc7\xad\xb1\xe9\xdczs\x1e\xf8\xc7\x96\xb1\xe7\xbcz\xf3 \x1e\x9c\xc7\x9fq\xe7\xccyk\x1e\x9c\xc7\xad\xb1\xeb\xdcw\x e7\x1e\x9c\xc7\xae1\xe7|{s\x1e\xf6\xc7\xad\xf1\xdf|zs\x1e\ x9b\xc7\xad\xf1\xdfly\xd7\x1e\xfa\xc7\x9dq\xe9\xccw\xf3\x1 e\xf8\xc7\x9f1\xdf\\y\xdb\x1e\x9f\xc7\x96\xb1\xe7\xac{s\x1 e7\xc7\x96\xb1\xe7\xbcz\xe3\x1e\xf4\xc7\xad\xb1\xe9\xdcw\x e7\x1e\xf4\xc7\xad\xb1\xe9\xdcz\xdf\x1e\xf8\xc7\x871\xe7\x 8cx\xe7\x1e\xf8\xc7\x871\...</code></span>
<span class="comment-copy">@XaydenRosario that's not the same string you used in the question then.</span>
<span class="comment-copy">@XaydenRosario this is why you're asked to provide code in the question. Context is essential.</span>
<span class="comment-copy">I've edited the question</span>
<span class="comment-copy">It returns <code>SyntaxError: unexpected character after line continuation character</code></span>
<span class="comment-copy">But it works fine if I run python in the terminal</span>
