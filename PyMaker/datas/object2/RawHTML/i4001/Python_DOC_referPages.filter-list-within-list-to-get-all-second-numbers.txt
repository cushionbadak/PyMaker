<div class="post-text" itemprop="text">
<p>Im trying to filter the following list:</p>
<pre><code>filtered = [[1.0, 3.0], [2.0, 70.0], [40.0, 3.0], [5.0, 50.0], [6.0, 5.0], [7.0, 21.0]]
</code></pre>
<p>To get every second number in the list within list, resulting in the following:</p>
<pre><code>filtered = [[3.0], [70.0], [3.0], [50.0], [5.0], [21.0]]
</code></pre>
<p>I tried the following which does not work:</p>
<pre><code>from operator import itemgetter
a = map(itemgetter(0), filtered)
print(a)
</code></pre>
<p>The following also doesn't work:</p>
<pre><code>from operator import itemgetter
b = map(filtered,key=itemgetter(1))[1]
print(b)
</code></pre>
<p>In the last line of code i have shown, if I change map to max, it does find the largest value of all the second floats in the lists. So i assume that i am close to a solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</p>
<pre><code>x = [[el[1]] for el in filtered]
</code></pre>
<p>or:</p>
<pre><code>x = [[y] for x,y in filtered]
</code></pre>
<p>You can also use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> with <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a>. To print it, iterate over the <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">iterable</a> object returned by <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>. You can use <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer"><code>list</code></a> for instance.</p>
<pre><code>from operator import itemgetter
x = map(itemgetter(1), filtered)
print(list(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not closer to a solution trying to pass a <code>key</code> to <code>map</code>. <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> only takes a function and an iterable (or multiple iterables). Key functions are for ordering-related functions (<code>sorted</code>, <code>max</code>, etc.)</p>
<p>But you were actually pretty close to a solution in the start:</p>
<pre><code>a = map(itemgetter(0), filtered)
</code></pre>
<p>The first problem is that you want the second item (item 1), but you're passing 0 instead of 1 to <code>itemgetter</code>. That obviously won't work.</p>
<p>The second problem is that <code>a</code> is a <code>map</code> object—a lazily iterable. It does in fact have the information you want:</p>
<pre><code>&gt;&gt;&gt; a = map(itemgetter(1), filtered)
&gt;&gt;&gt; for val in a: print(val, sep=' ')
3.0 70.0 3.0 50.0 5.0 21.0
</code></pre>
<p>… but not as a list. If you want a list, you have to call <code>list</code> on it:</p>
<pre><code>&gt;&gt;&gt; a = list(map(itemgetter(1), filtered))
&gt;&gt;&gt; print(a)
[3.0, 70.0, 3.0, 50.0, 5.0, 21.0]
</code></pre>
<p>Finally, you wanted a list of single-element lists, not a list of elements. In other words, you want the equivalent of <code>item[1:]</code> or <code>[item[1]]</code>, not just <code>item[1]</code>. You can do that with <code>itemgetter</code>, but it's a pretty ugly, because you can't use slice syntax like <code>[1:]</code> directly, you have to manually construct the slice object:</p>
<pre><code>&gt;&gt;&gt; a = list(map(itemgetter(slice(1, None)), filtered))
&gt;&gt;&gt; print(a)
[[3.0], [70.0], [3.0], [50.0], [5.0], [21.0]]
</code></pre>
<p>You could write this a lot more nicely by using a <code>lambda</code> function:</p>
<pre><code>&gt;&gt;&gt; a = list(map(lambda item: item[1:], filtered))
&gt;&gt;&gt; print(a)
[[3.0], [70.0], [3.0], [50.0], [5.0], [21.0]]
</code></pre>
<p>But at this point, it's worth taking a step back: <code>map</code> does the same thing as a generator expression, but <code>map</code> takes a function, while a genexpr takes an expression. We already know exactly what expression we want here; the hard part was turning it into a function:</p>
<pre><code>&gt;&gt;&gt; a = list(item[1:] for item in filtered)
&gt;&gt;&gt; print(a)
</code></pre>
<p>Plus, you don't need that extra step to turn it into a list with a genexpr; just swap the parentheses with brackets and you've got a list comprehension:</p>
<pre><code>&gt;&gt;&gt; a = [item[1:] for item in filtered]
&gt;&gt;&gt; print(a)
</code></pre>
</div>
<span class="comment-copy"><code>[[i[1]] for i in filtered]</code>?</span>
<span class="comment-copy">@sacul i need each second float, thus like this [[1[i]] from filtered. Or is that a line of code I can use?</span>
<span class="comment-copy">Why doesn't it work? Do you actually want a bunch of single element element lists?</span>
<span class="comment-copy">The reasons the first one doesn't work are (a) you're using <code>itemgetter(0)</code> when you want to get item 1, not item 0, and (b) you're printing out the map object. Otherwise, it's fine. For example, if you do <code>a = map(itemgetter(1), filtered)</code> and then <code>print(*a)</code> you'll see <code>3.0 70.0 3.0 50.0 5.0 21.0</code>. Or, if you do <code>a = list(map(itemgetter(1), filtered))</code>, you'll get the list <code>[3.0, 70.0, 3.0, 50.0, 5.0, 21.0]</code>. A list comprehension would probably be nicer for that case than <code>map</code>, but <code>map</code> does work.</span>
<span class="comment-copy">@sacul Now i understand your reply. List comprehension indeed works for me.</span>
