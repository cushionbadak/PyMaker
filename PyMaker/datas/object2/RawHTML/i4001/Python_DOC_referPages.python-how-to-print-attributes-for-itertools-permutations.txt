<div class="post-text" itemprop="text">
<p>I am new to Python and am trying out <code>itertools</code>:</p>
<pre><code>import itertools as it
obj = it.permutations(range(4))
print(obj)
for perm in obj:
    print( perm )
</code></pre>
<p><strong>My Question: How do I view/print all the permutations in <code>obj</code> <em>directly</em> without using a <code>for</code> loop?</strong></p>
<p><strong>What I Tried:</strong>
I tried using <code>__dict__</code> and <code>vars</code> as suggested in this <a href="https://stackoverflow.com/questions/109087/how-to-get-instance-variables-in-python">SO link</a> but both do not work (former does not seem to exist for the object while latter generated 'TypeError: 'itertools.permutations' object is not callable').</p>
<p>Please pardon if my question is rather noobish - this attributes issue appears complicated and most of what is written in <a href="https://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python/610923#610923">SO link</a> flew over my head.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just cast your <code>obj</code> to a <code>list</code>:</p>
<pre><code>print(list(obj))
</code></pre>
<p>This will give you the following output:</p>
<pre><code>[(0, 1, 2, 3), (0, 1, 3, 2), (0, 2, 1, 3), (0, 2, 3, 1), (0, 3, 1, 2), (0, 3, 2, 1), (1, 0, 2, 3), (1, 0, 3, 2), (1, 2, 0, 3), (1, 2, 3, 0), (1, 3, 0, 2), (1, 3, 2, 0), (2, 0, 1, 3), (2, 0, 3, 1), (2, 1, 0, 3), (2, 1, 3, 0), (2, 3, 0, 1), (2, 3, 1, 0), (3, 0, 1, 2), (3, 0, 2, 1), (3, 1, 0, 2), (3, 1, 2, 0), (3, 2, 0, 1), (3, 2, 1, 0)]
</code></pre>
<p>That's the direct answer to your question. Another good thing to figure out is whether you really need what you are asking for.</p>
<p>You see, there is a reason why <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>permutations</code></a> returns a <a href="https://docs.python.org/3.1/glossary.html#term-generator" rel="nofollow noreferrer">generator</a>. If you ain't familiar with that pattern, I'd strongly suggest reading about it. To make a long story short, generally you don't wanna cast such things to a <code>list</code> unless you really need it to be a <code>list</code> (e.g. you want to access items directly by index). In your case where you only need to print permutations there is <em>absolutely</em> nothing wrong with using <code>for</code> loop.</p>
<p>Here is one-liner to print one permutation per line:</p>
<pre><code>print('\n'.join(str(permutation) for permutation in obj))
</code></pre>
<p>But again, simple <code>for</code> loop which you are using already is just fine. Remember that <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">simple is better than complex</a>.</p>
</div>
<span class="comment-copy">you cast it to list; <code>list(it.permutations(range(4)))</code></span>
<span class="comment-copy">BUT, why do you need <code>itertools</code> ?</span>
<span class="comment-copy">Thanks @Ev.Kounis! I've been trying so many different things in vain for the last few hours! Would you like to post it as a solution so that I can accept it?</span>
<span class="comment-copy">Many things in 3.6 return generators (map, zip, itertools.*) - they all need to be iterated to be consumed. If you stuff them inside a <code>list(gener)</code> it will internally iterate all of them and return a list containting each result in it. you can also stuff / evaluate them in list/set/dict comprehensions wich will also iterate over the generator-results.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.4/library/itertools.html#itertool-functions" rel="nofollow noreferrer">docs.python.org/3.4/library/itertools.html#itertool-functions</a> : First sentence: <code>The following module functions all construct and return iterators.</code> - there is a difference between "iterables" "sequences" and "generators"(which I think of as returning a finite length iterable by means of giving you an iterator) that I happen to grapple with. Good post: <a href="https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration">what-exactly-are-iterator-iterable-and-iteration</a>.</span>
<span class="comment-copy">Thanks for your expanded answer, @Ernest!</span>
