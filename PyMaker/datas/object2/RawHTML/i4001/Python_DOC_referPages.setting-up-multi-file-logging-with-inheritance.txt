<div class="post-text" itemprop="text">
<p>I am setting up my first multi-file project using modules (Python 3.6), and I am having some trouble setting up a coherent way to log. I want my whole project to have the same logging level across all modules, and know that child loggers inherit the properties of their parents. So when I have my 2 files set up like this:</p>
<p>main.py:</p>
<pre><code>import logging

logger = logging.getLogger('a')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
logger.addHandler(ch)
import GUI

GUI.hello()
</code></pre>
<p><code>GUI/__init__.py</code>:</p>
<pre><code>import logging
module_logger = logging.getLogger('a.GUI')
module_logger.info(__name__ + ' imported')
def hello():
    module_logger.info('hello')
</code></pre>
<p>I get</p>
<pre><code>GUI imported
hello
</code></pre>
<p>as expected. But when I substitute the logger names for <code>__name__</code>in both the root and module, (<code>logging.getLogger(__name__)</code>) in both cases, I get no output. I am trying to do it this way to avoid having to refactor etc in case something changes down the line. What am I missing? Or is there a better way to set up logging that may be more scalable etc.?</p>
<p>Thank you so much for your help!</p>
<p>EDIT: I've seen <a href="https://docs.python.org/3/howto/logging.html#logging-from-multiple-modules" rel="nofollow noreferrer">this</a>, which works, but would like to have some more granularity if possible, like having custom names for the loggers etc. Though if not possible I can use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__name__</code> of the file executed is always <code>"__main__"</code>. Setting up a loggers by name will thus <em>not</em> have it be the root of the rest of your modules. In your case, you have the following loggers:</p>
<pre><code>"__main__"  # from main.py
"GUI"       # from GUI/__init__.py
"GUI.bar"   # from GUI/bar.py (hypothetically)
</code></pre>
<p>Furthermore, you probably want to add more packages like <code>GUI</code> later on - these will form even more hierarchies!</p>
<p>So, how to solve this?</p>
<ul>
<li><p>Configure the root logger in <code>main</code></p>
<ul>
<li><p>Using the name <code>None</code> or <code>""</code> gives you the root logger for all others. Its settings are inherited by all others. While a library should not configure the root loggers, an application should.</p>
<pre><code># main.py
logger = logging.getLogger()
</code></pre>
<p>This is preferable if your modules are actually a library, and your <code>main</code> is just one executable using it.</p></li>
</ul></li>
<li><p>Fixed name loggers</p>
<ul>
<li><p>Same as you do now, explicitly setting logger names. This has the added benefit of decoupling your loggers from implementation details.</p>
<pre><code># main.py
logger = logging.getLogger('a')
</code></pre></li>
</ul></li>
<li><p>Package based loggers</p>
<ul>
<li><p>If you reorganise all your modules into a single package, you can use the <code>__package__</code> name.</p>
<pre><code># package/main.py
logger = logging.getLogger(__package__)  # 'package'

# package/GUI/__init__.py
logger = logging.getLogger(__package__)  # 'package.GUI'
</code></pre>
<p>Note that <code>main.py</code> should then be called as <code>python -m main</code>.</p></li>
</ul></li>
<li><p>Purpose based loggers</p>
<ul>
<li><p>Use names appropriate to functionality, not position. Note that you can use the same name/logger multiple times!</p>
<pre><code># GUI/__init__.py
input_logger = logging.getLogger('a.input')
output_logger = logging.getLogger('a.output')

# GUI/buttons.py
input_logger = logging.getLogger('a.input')
</code></pre></li>
</ul></li>
</ul>
<p>Note that using a hierarchy of loggers is <em>not</em> about scalability! The most performant approach is using the same logger everywhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>If all your python module uses the exact same logger I highly recommend to use directly the 'logging.info('blabla')' instead of creating multiple loggers for each python files. That will suit your purpose best.
Florent</p>
</div>
