<div class="post-text" itemprop="text">
<p>I'm trying to learn Python comprehensions, but I'm stuck. I'm trying to increase my <code>count</code> variable when the condition is <code>True</code>, and <code>return</code> that count after the loop. Here is my code: </p>
<pre><code>list = [1,2,4,5,7,8,10]
d = 3
count = 0
return [count for x in range(len(list))
        if list[x] + d in list and list[x] + 2 * d in list]
</code></pre>
<p>It's returning <code>"0"</code> each time my condition is <code>True</code>. When I try to add <code>count += 1</code> in the comprehension it's giving me a <code>SyntaxError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">Comprehensions</a> don't work that way. Conceptually, they allow you to set and filter the individual elements of a list, not accumulate into a single variable.</p>
<p>There is a standard idiom for getting around that though. You basically make an iterable of booleans for your condition, or just retain ones for all the elements you want and discard the others, then <a href="https://docs.python.org/3/library/functions.html" rel="noreferrer"><code>sum</code></a> over that.</p>
<p>As a further improvement, I would recommend using a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="noreferrer">generator expression</a> rather than a list comprehension. It looks almost the same, but supports lazy evaluation. This means that you get all the benefits of the one-liner, without having to store the list of flag values in memory.</p>
<p>Here is how the first option would look:</p>
<pre><code>L = [1,2,4,5,7,8,10]
count = sum((x + d in L and x + 2 * d in L) for x in L)
</code></pre>
<p>The second option would look like this:</p>
<pre><code>L = [1,2,4,5,7,8,10]
count = sum(1 for x in L if (x + d in L and x + 2 * d in L))    
</code></pre>
<p>Notice that I renamed your variable <code>list</code> to <code>L</code> so it wouldn't shadow the builtin function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't?</p>
<pre><code>for x in lst:
    if x+d in lst and x+2*d in lst:
        count += 1
</code></pre>
<p>Or use len:</p>
<pre><code>count = len([_ for x in lst if x+d in lst and x+2*d in lst])
</code></pre>
<p>Or use sum:</p>
<pre><code>count = sum(1 for x in lst if x+d in lst and x+2*d in lst)
</code></pre>
<p>Or use sets (prepare to be surprised):</p>
<pre><code>count = len(({x + d for x in lst} | {x + 2 * d for x in lst}) &amp; set(lst))
</code></pre>
<p>Here's the performance numbers on a list of 1000 consecutive numbers:</p>
<pre><code>loop:    20.3 ms ± 8 ms
len:     25.4 ms ± 8.22 ms
sum:     18.3 ms ± 5.06 ms
sets:    272 µs ± 19 µs  (~100x faster)
</code></pre>
<p>That's not a guarantee of performance. Sets are also probably the least memory efficient solution in this case. But it does work (seemingly pretty well).</p>
<p>Also, don't name a variable <code>list</code>, that's a built-in function in Python and overwriting it will cause all sorts of mayhem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are very close. List comprehensions cannot store and reuse variables in the way you wish; they may only contain expressions. One solution is to use <code>sum</code> with a generator expression.</p>
<p>The benefit of this solution is you avoid the expense of building a list, which is not necessary to count the number of elements satisfying a condition.</p>
<pre><code>A = [1,2,4,5,7,8,10]
A_set = set(A)

d = 3
count = 0

res = sum(1 for x in range(len(A)) if \
          (A[x]+d in A_set) and (A[x]+2*d in A_set))

# 3
</code></pre>
<p>Note you should never name variables after classes. In addition, you can use <code>set</code> for O(1) lookup.</p>
<p>Also note that we construct the <code>A_set</code> outside the list comprehension, otherwise it will be computed for each iteration of <code>range(len(A))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list = [1,2,4,5,7,8,10]

d = 3

# python 3 required for _
result = len([_ for x in range(len(list))
                if list[x]+d in list and list[x]+2*d in list])
# python 2
result = len([1 for x in range(len(list))
                if list[x]+d in list and list[x]+2*d in list])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is the quantity of times that happens, return the length of the list:</p>
<pre><code>len([count for x in range(len(list)) 
           if list[x]+d in list and list[x]+2*d in list])
</code></pre>
<p>Remember that this is a <em>list</em> comprehension; you cannot add arbitrary actions., such as assignment.</p>
</div>
<span class="comment-copy">To be clear, you are trying to write a one-liner that counts the number of elements where <code>e + 3</code> and <code>e + 6</code> are in the list?</span>
<span class="comment-copy">@MadPhysicist Yep that's right</span>
<span class="comment-copy">List comprehensions can only contain <i>expressions</i>. <code>count = count + 1</code> is an assignment (<i>statement</i>) so you cannot use it there.</span>
<span class="comment-copy">@MatiasCicero Thanks for making it clear!</span>
<span class="comment-copy">Thanks for the explanation and sample codes! It's really helped me</span>
<span class="comment-copy">While covering most of the stuff in the other answers, the timing bit is nice. +1</span>
<span class="comment-copy">Nice touch to use <code>set</code>. +1</span>
<span class="comment-copy">No need to iterate over the range though. Just iterate over <code>A</code> directly.</span>
<span class="comment-copy">It is very important that <code>A_set</code> be computed outside the comprehension - inlining <code>set(A)</code> would nullify any benefit, due to the cost of repeatedly reconstructing the set.</span>
<span class="comment-copy">Thanks for the reply! I will compare all of this solutions. And thanks for second (set) list trick.</span>
<span class="comment-copy">It's throwing an error : NameError: name '_' is not defined</span>
<span class="comment-copy">@sword1st Just checked. _ requires python 3, for python 2 it throws NameError</span>
<span class="comment-copy">Thanks for your reply!</span>
