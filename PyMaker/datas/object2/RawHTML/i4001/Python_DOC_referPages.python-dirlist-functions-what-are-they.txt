<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; dir(list) 

['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
</code></pre>
<p>Need to know how its used in python script? Do we have to write a class and use them as methods or how is it? Can someone explain me with simple examples please ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The are the python "protocols" or "dunder (double underscore) methods" or "magic methods". The are used for special python operations, such as <code>__add__(self, other)</code> defines what happens when you call <code>self + other</code> and <code>__str__(self)</code> which defines what happens when you call <code>str(self)</code>. </p>
<p><a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer">https://rszalski.github.io/magicmethods/</a></p>
<p><a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#special-method-names</a></p>
<hr/>
<p>Example:</p>
<pre><code>In [19]: class Adder:
    ...:     def __init__(self, x):
    ...:         print('in __init__')
    ...:         self.x = x
    ...: 
    ...:     def __add__(self, other):
    ...:         print('in __add__')
    ...:         return self.x + other
    ...: 
    ...:     def __str__(self):
    ...:         print('in __str__')
    ...:         return 'Adder({})'.format(self.x)
    ...: 
    ...:     def __call__(self, value):
    ...:         print('in __call__')
    ...:         return self + value
    ...:     

In [20]: a = Adder(3)
in __init__

In [21]: a.x
Out[21]: 3

In [22]: a + 12
in __add__
Out[22]: 15

In [23]: str(a)
in __str__
Out[23]: 'Adder(3)'

In [24]: a(3)
in __call__
in __add__
Out[24]: 6
</code></pre>
</div>
<span class="comment-copy">@Chris_Rands I'm answering the question: " <code>dir(list) â€” __functions__</code> what are they?"</span>
