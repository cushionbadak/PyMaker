<div class="post-text" itemprop="text">
<p>As the title suggests, I am trying to update a dictionary using the <code>update()</code> method like in the following code block</p>
<pre><code>for key, val in my_dict.items():
    new_dict.update(key=val)
</code></pre>
<p>If <code>my_dict = {'a': 1, 'b': 2}</code> I would expect the result to be that <code>new_dict = {'a': 1, 'b': 2}</code> (assuming of course that new_dict is already defined). However, when executed, I instead get <code>new_dict = {'key': 2}</code>.</p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Keyword arguments always use the fixed identifier as the key. Use keyword expansion instead.</p>
<pre><code>new_dict.update(**{key: val})
</code></pre>
<p>Or if <code>new_dict</code> really is a dict, just pass the dict itself.</p>
<pre><code>new_dict.update({key: val})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a code for the <code>update</code> method, so you can see why it behaves the way it does (it is not the real source code, just an example):</p>
<pre><code>def update(self, other_dict={}, **kwargs):
    for k, v in other_dict.items():
        self[k] = v
    for k, v in kwargs.items():
        self[k] = v
</code></pre>
<p>So if you call <code>new_dict.update(key=val)</code> your <code>kwargs</code> will be equal to <code>{"key": value}</code>. </p>
<p>You need to pass your arguments inside a dictionary if you want to dinamically set the new keys. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>update</code></a> uses keyword arguments to update dictionary, or dictionary or iterable of pairs. You can just pass your dictionary as the first argument:</p>
<pre><code>new_dict.update(my_dict)
</code></pre>
<p><code>update</code> designed to work with several keys at once. If you just want to set single value, you can just set the value:</p>
<pre><code>new_dict[key] = value
</code></pre>
</div>
<span class="comment-copy">In <code>new_dict.update(key=val)</code>, <code>key</code> isn't your variable, its a named parameter in the keyword arguments in the <code>update</code> method. You can do <code>new_dict.update(my_dict)</code> and skip the for loop.</span>
<span class="comment-copy">I knew there had to be a simple solution for this! Thank you so much :) I will mark as accepted once the 10 minute delay is passed.</span>
<span class="comment-copy">Well, I also tried using <code>new_dict.update(dict(key=val))</code> which gave the same result. Would it have worked if I used a colon instead of an equal?</span>
<span class="comment-copy"><code>dict(key=val)</code> creates a dictionary <code>{"key": val}</code>, with "key" as a string, that's why it gives you the same value. If you do <code>new_dict.update({key: val})</code> it will behave as you want.</span>
<span class="comment-copy">I suppose this would work as well. I initially decided on the loop because I wanted to invoke some conditionals depending on which keys were present in <code>my_dict</code>(for instance <code>if key == 'timepoint': do something</code>)</span>
<span class="comment-copy">Then you can just use <code>new_dict[key] = value</code></span>
<span class="comment-copy">So, are there any benefits to using either <code>update</code> or <code>new_dict[key] = value</code>?</span>
<span class="comment-copy">They are the same if you are setting single element</span>
