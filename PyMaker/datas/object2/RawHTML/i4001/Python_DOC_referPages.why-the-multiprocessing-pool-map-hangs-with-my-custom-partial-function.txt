<div class="post-text" itemprop="text">
<p>I make a custom partial function as following:</p>
<p>(Python 3.6.5 |Anaconda custom (64-bit)| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)])</p>
<pre><code>In [1]: class SecPartialF(object):
   ...:     def __init__(self, func, arg1):
   ...:         self.func, self.arg1 = func, arg1
   ...:     def __call__(self, arg2):
   ...:         return self.func(self.arg1, arg2)
   ...:     
</code></pre>
<p>And it works for the buildin <code>map</code>:</p>
<pre><code>In [2]: def f(x, y):
   ...:     print(x, y)
   ...:     return x + y

In [3]: list(map(SecPartialF(f, 10), range(10)))
10 0
10 1
10 2
10 3
10 4
10 5
10 6
10 7
10 8
10 9
Out[3]: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</code></pre>
<p>However, it doesn't work for multiprocessing. The <code>pool.map</code> hangs and without any output:</p>
<pre><code>In [4]: from multiprocessing import Pool

In [5]: with Pool(4) as pool:
   ...:     list(pool.map(SecPartialF(f, 10), range(10)))
   ...:     
</code></pre>
<p>What's wrong with my custom partial function?</p>
</div>
<div class="post-text" itemprop="text">
<p>This has nothing to do with your custom partial function.</p>
<p>The problem is that, as explained in <a href="https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods" rel="nofollow noreferrer">the docs</a>, you need to put your top-level code in <code>__main__</code> block:</p>
<pre><code>if __name__ == '__main__':
    with Pool(4) as pool:
        list(pool.map(SecPartialF(f, 10), range(10)))
</code></pre>
<p>Otherwise, each child process in the pool will try to create another pool of 4 more children before doing anything else.</p>
<p>Note that this only happens with the <code>spawn</code> and <code>forkserver</code> start methodsâ€”but Windows defaults to <code>spawn</code> (other platforms default to <code>fork</code>), so it happens to you.</p>
</div>
<span class="comment-copy">Thanks for your help.</span>
