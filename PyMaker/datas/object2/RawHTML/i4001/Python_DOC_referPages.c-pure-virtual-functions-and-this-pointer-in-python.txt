<div class="post-text" itemprop="text">
<p>I'm a former c++ coder and have made the plunge into python for several months, which has been great.  I'm doing a bit of code porting and have come across a problem of which i'm not sure the best path.  There are many ways to skin a cat - but i'm looking for advice on what would be the 'best' and/or most pythonic way to do something similar to the section of c++ code below.</p>
<p>I've cut the code to a trivial 'reproducer' just to highlight what was happening. 
Essentially there is a well-defined interface of callbacks the server will call when certain events happen.  When a server is created, it is provided a callback interface as an argument.</p>
<p>In the below case, the client has implemented these callbacks on itself, and thus when it is creating the server, it provides the *this pointer.</p>
<p>Is this something similar in python? Any suggestions would get greatly appreciated.</p>
<pre><code>#include &lt;iostream&gt;

// Client Feed Handler function Interface
class ClientFeedHandlersI
{
public:
    virtual void HandlerFeed1() = 0;
    virtual void HandlerFeed2() = 0;
};

// A very basic server
class Server
{
public:
    Server(ClientFeedHandlersI&amp; handlers) 
        : mHandlers(handlers) {}

void Start()
{
    // Create some random events to illustrate
    for (int i = 0; i &lt; 10; ++i)
        EventLoopHandler();
}
private:
    void EventLoopHandler()
    {
        if (rand() % 10 &gt; 5)
            mHandlers.HandlerFeed1();
        else
            mHandlers.HandlerFeed2();
    }

    ClientFeedHandlersI&amp; mHandlers;
};

// A really simple client
class Client : private ClientFeedHandlersI
{
public:
    Client() 
      : mMyServer(*this)
    {
        mMyServer.Start();
    }

private:
    void HandlerFeed1() override { std::cout &lt;&lt; "HandlerFeed1 called\n"; }
    void HandlerFeed2() override { std::cout &lt;&lt; "HandlerFeed2 called\n"; }

    Server mMyServer;
};

int main()
{
    auto c = Client();
}
</code></pre>
<p>So here's an attempt at porting to python.  Note that in the real world example, there are 20+ client feed handler functions, hence why i want to force the interface using the @abstractmethod.</p>
<pre><code># python 3.6
from abc import ABC, abstractmethod

class ClientFeedHandlersI(ABC):

    def __init__(self):
        pass

    @abstractmethod
    def handler_feed_1(self):
        pass

   @abstractmethod
   def handler_feed_2(self):
        pass

class Server:

    def __init__(self, clientCallBacks:ClientFeedHandlersI):

        self.clientCallBacks = clientCallBacks

    def start(self):
        for ii in range(10):
            self.event_loop_handler()

    def event_loop_handler(self):
        import random
        if random.randint(0,10) &gt; 5:
            self.clientCallBacks.handler_feed_1()
        else:
            self.clientCallBacks.handler_feed_2()


class Client(ClientFeedHandlersI):

    def __init__(self):

        self.server = Server(self)
        self.server.start()

    def handler_feed_1(self):
        print("HandlerFeed1 called\n")
    def handler_feed_2(self):
        print("HandlerFeed2 called\n")

if __name__ == '__main__':
    c = Client()
</code></pre>
<p>Edit: The above code sample now works as per the c++ code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python sample code below C++ in OP now working.</p>
</div>
<span class="comment-copy">Not sure what you are asking about, functions are first class objects in Python so you can easily pass them around. You should not be thinking about how to translate C++ code into Python code. When you learn a new language you are basically starting out from scratch, if the language is worth learning.</span>
<span class="comment-copy">Python is completely dynamic, as long as the functions are there it will work. If you really need to be strict about an interface, you can use the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abstract base class</a> module.</span>
<span class="comment-copy">Added my attempt at porting to python.  Happy to rewrite it, but I'm just not sure the best way to go about it.  Thanks</span>
<span class="comment-copy">Why all the uneccessary ABC-meta stuff. Just pass the functions directly. Why bother with a class for <code>ClientFeedHandlersI</code>? Just define the functions and pass the callbacks directly. In a list if necessary</span>
<span class="comment-copy">But anyway, your code is failing because in your <code>Server</code> class definition you did <code>def __main__</code> instead of <code>def __init__(...)</code>. It's sort of pointless to even bother with a <code>if __name__ == '__main__'</code> guard when you post example code anyway...</span>
