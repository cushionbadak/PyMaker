<div class="post-text" itemprop="text">
<p>example output estimate of pi:</p>
<pre><code>3.13658765
</code></pre>
<p>then a new better estimate comes along. Say, 3.1416232. </p>
<p>So I find the first character in the old estimate that doesn't match the new. In this case, it is the 4th character.</p>
<p>Question: Is there a way to delete the 4th character in console(and then repeat this until all characters after 3.1 are gone) so that I can then print the new, better values for each of those characters? </p>
<p>Note: I don't want to delete everything and console and then reprint, as this would get considerably slower as the number of digits increases.</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want something like:</p>
<pre><code>best_est = None
while True:
    est = some_estimate_method() # assuming this is a 'str'
    if not best_est:
        best_est = est
    else:
        if (float(est) &gt; float(best_est)):
            best_est = est
    print(best_est, end = '\r')''
</code></pre>
<p>Depending on the directional relation of the estimate (i.e. is less better or is more better), you would have to change the inequality to accommodate. </p>
<p>However, if we look at your example:</p>
<pre><code># initial print
3.13658765
# get new estimate (3.1416232)
# overwrite the print
3.1416232
</code></pre>
<p>You originally wanted to "re-print" <code>3.1</code> then print all the new characters in the new estimate. That begs to ask the question <strong><em>why not just print the whole new estimate?</em></strong></p>
<p>Since the entire value of the new estimate is greater, that means the comparison you are looking for (starting at index 4 and beyond) has already be checked when using <code>&lt;</code> or <code>&gt;</code> for inequality. Simply calling a <code>print(est, end = '\r')</code> returns the console cursor to the beginning of the line, effectively overwriting the value each time.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just need to overwrite your last line, you can do something like this. The "\r" means instead of a newline, a return carriage will be printed, moving you back to the start of the same line to overwrite</p>
<pre><code>print("3.1515", end="\r")
print("3.1415")
</code></pre>
<p>Furthermore, if you want to do tricky things, you could look into ANSI escape codes, these will let you print to any arbitrary location, although they aren't the most portable. These will also let you do fun things like setting the colour.</p>
<p>For example <code>print("\033[31;1HX")</code> would print an X to the 31's column and 1st row. To delete a character, you could simply print a space over top (<code>print("\033[31;1H ")</code>).</p>
<p>This may not work on all terminals</p>
<p><a href="http://ascii-table.com/ansi-escape-sequences.php" rel="nofollow noreferrer">http://ascii-table.com/ansi-escape-sequences.php</a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14789930/python-print-one-line-same-space">python print one line same space</a></span>
<span class="comment-copy">It is possible. But it's a lot easier to keep track of what you printed to the console than to read characters from the console. It's easier still to just overwrite all the characters, whether they're the same or not. And it's much, much easier to not even think about it as a character-addressable console, and just print a CR without NL to whatever stdout is, and rewrite the whole line.</span>
<span class="comment-copy">No, my question involves deleting from console.</span>
<span class="comment-copy">A billion digits don't fit on a line, or even a full-screen terminal window on a 4K monitor with a tiny font, so that issue will never come up in the first place.</span>
<span class="comment-copy">Anyway, if you really want to do this, you need to tell us what kind of console you're talking about. For Windows, <a href="https://docs.python.org/3/library/msvcrt.html" rel="nofollow noreferrer"><code>msvcrt</code></a> has some limited support for console stuff, but you probably want the more complete wrapper in <code>pywin32</code> or a third-party lib like <code>conio</code>. For *nix, if you can trust ncurses being present and termcap being correct, you want <a href="https://docs.python.org/3/library/curses.html" rel="nofollow noreferrer"><code>curses</code></a>. For anything else, you wantâ€¦ something else. Anyway, they all have a bit of a learning curve, and I don't know of a good tutorial to point at.</span>
<span class="comment-copy">To answer your question - "Note that I don't want to delete everything and console and then reprint, as this would get considerably slower as the number of digits increases."</span>
<span class="comment-copy">What do the 033 and the H specify?</span>
<span class="comment-copy">Nvm this doesn't work on the terminal I'm using</span>
<span class="comment-copy">@Leosha \033 is a hex literal, it's an escape character. Make sure you don't forget the \</span>
