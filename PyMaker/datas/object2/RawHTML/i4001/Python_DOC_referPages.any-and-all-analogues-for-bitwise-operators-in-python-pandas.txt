<div class="post-text" itemprop="text">
<p>I have a pandas DataFrame with columns "Category" and "Total". There can be 4 different categories: A, B, C, D. I am given the cut point value for each category as a dict. I need to exclude all entries with Total more than the corresponding cut point. This works fine:</p>
<pre><code>cat = weekly_units['Category']
total = weekly_units['Total']
weekly_units = weekly_units[(cat == 'A') &amp; (total &lt;= cutpoints['A'])
                          | (cat == 'B') &amp; (total &lt;= cutpoints['B'])
                          | (cat == 'C') &amp; (total &lt;= cutpoints['C'])
                          | (cat == 'D') &amp; (total &lt;= cutpoints['D'])]
</code></pre>
<p>But I find it WET and unpythonic.
Is there a way to write something like this?</p>
<pre><code>weekly_units = weekly_units[any([(cat == k) &amp; (total &lt;= v) for k, v in cutpoints.items()])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes. What you are looking for is <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.logical_or.html" rel="nofollow noreferrer"><code>numpy.logical_or</code></a>:</p>
<pre><code>conditions = [(cat == k) &amp; (total &lt;= v) for k, v in cutpoints.items()]
weekly_units = weekly_units[np.logical_or.reduce(conditions)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your <code>Category</code> column is actually of <code>CategoricalDtype</code>, you can also do:</p>
<pre><code>weekly_units[total &lt;= cat.cat.rename_categories(cutpoints).astype(float)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is DRY, simple and explicit:</p>
<pre><code>matched = False  # or matched = pd.Series(False, index=weekly_units.index)
for cat, cutpoint in cutpoints.items()
    matched |= ((weekly_units['Category'] == cat) &amp; (weekly_units['Total'] &lt;= cutpoint))
weekly_units = weekly_units[matched]
</code></pre>
<p>Note that this follows the <a href="https://docs.python.org/3.0/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">official advice</a> to "Use functools.reduce() if you really need it; however, 99 percent of the time an explicit for loop is more readable."</p>
<p>There's also a standard-libary approach using <code>reduce()</code>, but as promised, it's less readable:</p>
<pre><code>import functools, operator
matched = functools.reduce(
    operator.__or__,  # or lambda x, y: x | y
    (
        (weekly_units['Category'] == cat) &amp; (weekly_units['Total'] &lt;= cut)
        for cat, cut in cutpoints.items()
    )
)
weekly_units = weekly_units[matched]
</code></pre>
</div>
<span class="comment-copy">Still thinking if the <code>reduce</code> usage is worth it here. GvR tells to avoid <code>reduce</code> at almost any situation but in this particular case it is not really bad I guess.</span>
<span class="comment-copy">@SashaTsukanov. Be carful, this isn't Python <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a>. This is <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.ufunc.reduce.html" rel="nofollow noreferrer"><code>numpy.ufunc.reduce</code></a>. As such, I don't know GvR's views on specific <code>numpy</code> functions.</span>
<span class="comment-copy">Yes I've noticed the difference. Don't know either.</span>
<span class="comment-copy">@SashaTsukanov, In my opinion, if you're using <code>pandas</code>, you should be entirely open to using <code>numpy</code> functions if they help, since <code>pandas</code> relies on <code>numpy</code> internally.</span>
<span class="comment-copy">Sounds reasonable. After I tried to apply it to my original code the result turned out to be the most elegant comparing to others' answers</span>
<span class="comment-copy">I like the idea of not using reduce and writing <code>weekly_units['Category']</code> and <code>weekly_units['Total']</code> explicitly, so I accept your answer. Since in the original code I need <code>matched</code> to be combined with other conditions I'll write separate inner function to compute <code>matched</code></span>
<span class="comment-copy">Is there any significant difference between using <code>operator.__or__</code> and <code>numpy.logical_or</code>?</span>
<span class="comment-copy">@SashaTsukanov You beat me to it on the parentheses! I think they are required around each (in)equality test but not around the whole expression. To answer your question about <code>__or__</code>: Python converts <code>|</code>  or <code>operator.__or__</code> into a call to <code>pd.Series.__or__</code>, which has code that calls <code>operator.or_()</code> (identical to <code>operator.__or__</code>) with ndarrays for the two series. <code>operator.or_</code> just uses the Python <code>|</code> operator on the ndarrays, which passes them to <code>np.ndarray.__or__</code>. I'm not sure how closely <code>np.ndarray.__or__</code> is related to <code>np.logical_or</code>, but they should do roughly the same thing.</span>
<span class="comment-copy">I launched the script without parenthesis around the whole expression and it really worked the same. I have one more question. First you assign <code>matched</code> to <code>False</code> and then it becomes a mask-like series containing a boolean for each <code>weekly_units</code> row. Does this work because of numpy broadcasting?</span>
<span class="comment-copy">@SashaTsukanov The initial <code>False</code> is treated like most numpy or pandas operations between a scalar and a vector/series — the scalar automatically gets used with all elements of the series. I agree that it’s a little jarring that the code promotes <code>matched</code> from a scalar to a series. On the other hand, this avoids having to add special code to the loop for the first pass (something <code>reduce()</code> handles automatically). An alternative would be to initialize with <code>matched = pd.Series(False, index=weekly_units.index)</code>.</span>
