<div class="post-text" itemprop="text">
<p>I have a series of the form: </p>
<pre><code>s

0    [133, 115, 3, 1]
1    [114, 115, 2, 3]
2      [51, 59, 1, 1]
dtype: object
</code></pre>
<p>Note that its elements are <em>strings</em>: </p>
<pre><code>s[0]
'[133, 115, 3, 1]'
</code></pre>
<p>I'm trying to use <code>pd.eval</code> to parse this string into a column of lists. This works for this sample data. </p>
<pre><code>pd.eval(s)

array([[133, 115, 3, 1],
       [114, 115, 2, 3],
       [51, 59, 1, 1]], dtype=object)
</code></pre>
<p>However, on much larger data (order of 10K), this fails miserably!</p>
<pre><code>len(s)
300000

pd.eval(s)
AttributeError: 'PandasExprVisitor' object has no attribute 'visit_Ellipsis'
</code></pre>
<p>What am I missing here? Is there something wrong with the function or my data?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong><br/>
As of <code>v0.21</code>, this is a bug, and an open issue on GitHub. See <a href="https://github.com/pandas-dev/pandas/issues/16289" rel="nofollow noreferrer">GH16289</a>.</p>
<hr/>
<p><strong>Why am I getting this error?</strong><br/>
This (in all probability) is <a href="https://github.com/pandas-dev/pandas/blob/master/pandas/core/computation/eval.py" rel="nofollow noreferrer"><code>pd.eval</code></a>'s fault, which cannot parse series with more than 100 rows. Here's an example. </p>
<pre><code>len(s)
300000

pd.eval(s.head(100))  # returns a parsed result
</code></pre>
<p>Whereas, </p>
<pre><code>pd.eval(s.head(101))
AttributeError: 'PandasExprVisitor' object has no attribute 'visit_Ellipsis'
</code></pre>
<p>This issue persists, regardless of the parser or the engine.</p>
<hr/>
<p><strong>What does this error mean?</strong><br/>
When a series with more than 100 rows is passed, <code>pd.eval</code> operates on the <code>__repr__</code> of the Series, rather than the objects contained within it (which is the cause of this bug). The <code>__repr__</code> truncated rows, replacing them with a <code>...</code> (ellipsis). This ellipsis is misinterpreted by the engine as an <code>Ellipsis</code> object - </p>
<pre><code>...
Ellipsis

pd.eval('...')
AttributeError: 'PandasExprVisitor' object has no attribute 'visit_Ellipsis'
</code></pre>
<p>Which is exactly the cause for this error.</p>
<hr/>
<p><strong>What can I do to make this to work?</strong><br/>
Right now, there isn't a solution (the issue is still open as of 12/28/2017), <em>however</em>, there are a couple of workarounds. </p>
<p><strong>Option 1</strong><br/>
<a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a><br/>
This option should work out of the box if you can guarantee that you do not have any malformed strings.</p>
<pre><code>from ast import literal_eval

s.apply(literal_eval)

0    [133, 115, 3, 1]
1    [114, 115, 2, 3]
2      [51, 59, 1, 1]
dtype: object 
</code></pre>
<p>If there is a possibility of malformed data, you'll need to write a little error handling code. You can do that with a function - </p>
<pre><code>def safe_parse(x):
    try:
        return literal_eval(x)
    except (SyntaxError, ValueError):
        return np.nan # replace with any suitable placeholder value
</code></pre>
<p>Pass this function to <code>apply</code> - </p>
<pre><code>s.apply(safe_parse)

0    [133, 115, 3, 1]
1    [114, 115, 2, 3]
2      [51, 59, 1, 1]
dtype: object
</code></pre>
<p><code>ast</code> works for any number of rows, and is slow, but reliable. You can also use <code>pd.json.loads</code> for JSON data, applying the same ideas as with <code>literal_eval</code>.</p>
<p><strong>Option 2</strong><br/>
<code>yaml.load</code><br/>
Another great option for parsing simple data, I <a href="https://stackoverflow.com/a/45827519/5741205">picked this up</a> from @ayhan a while ago.</p>
<pre><code>import yaml
s.apply(yaml.load)

0    [133, 115, 3, 1]
1    [114, 115, 2, 3]
2      [51, 59, 1, 1]
dtype: object
</code></pre>
<p>I haven't tested this on more complex structures, but this should work for almost any basic string representation of data. </p>
<p>You can find the documentation for PyYAML <a href="http://pyyaml.org/wiki/PyYAMLDocumentation" rel="nofollow noreferrer">here</a>. Scroll down a bit and you'll find more details on the <code>load</code> function.</p>
<hr/>
<p><strong>Note</strong> </p>
<ul>
<li>If you're working with JSON data, it might be suitable to read your file using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_json.html" rel="nofollow noreferrer"><code>pd.read_json</code></a> or <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.io.json.json_normalize.html" rel="nofollow noreferrer"><code>pd.io.json.json_normalize</code></a> to begin with.</li>
<li><p>You can also perform parsing as you read in your data, using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>read_csv</code></a> - </p>
<pre><code>s = pd.read_csv(converters=literal_eval, squeeze=True)
</code></pre>
<p>Where the <code>converters</code> argument will apply that function passed on the column as it is read, so you don't have to deal with parsing later.</p></li>
<li><p>Continuing the point above, if you're working with a dataframe, pass a <code>dict</code> - </p>
<pre><code>df =  pd.read_csv(converters={'col' : literal_eval})
</code></pre>
<p>Where <code>col</code> is the column that needs to be parsed
You can also pass <code>pd.json.loads</code> (for json data), or <code>pd.eval</code> (if you have 100 rows or less).</p></li>
</ul>
<hr/>
<p>Credits to MaxU and Moondra for uncovering this issue. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your data is fine, and <code>pandas.eval</code> is buggy, but not in the way you think. There is a hint <a href="https://github.com/pandas-dev/pandas/issues/16289#issuecomment-300042717" rel="nofollow noreferrer">in the relevant github issue page</a> that urged me to take a closer look <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.eval.html" rel="nofollow noreferrer">at the documentation</a>. </p>
<pre class="lang-none prettyprint-override"><code>pandas.eval(expr, parser='pandas', engine=None, truediv=True, local_dict=None,
            global_dict=None, resolvers=(), level=0, target=None, inplace=False)

    Evaluate a Python expression as a string using various backends.

    Parameters:
        expr: str or unicode
            The expression to evaluate. This string cannot contain any Python
            statements, only Python expressions.
        [...]
</code></pre>
<p>As you can see, the documented behaviour is to pass <em>strings</em> to <code>pd.eval</code>, in line with the general (and expected) behaviour of the <code>eval</code>/<code>exec</code> class of functions. You pass a string, and end up with an arbitrary object.</p>
<p>As I see it, <code>pandas.eval</code> is buggy because it doesn't reject the <code>Series</code> input <code>expr</code> up front, leading it to guess in the face of ambiguity. The fact that the default shortening of the <code>Series</code>' <code>__repr__</code> designed for pretty printing can drastically affect your result is the best proof of this situation.</p>
<p>The solution is then to step back from the XY problem, and use <a href="https://stackoverflow.com/a/48008192/5067311">the right tool to convert your data</a>, and preferably stop using <code>pandas.eval</code> for this purpose entirely. Even in the working cases where the <code>Series</code> is small, you can't really be sure that future pandas versions don't break this "feature" completely.</p>
</div>
<span class="comment-copy">yeah, i remember that case... ;)</span>
<span class="comment-copy">@MaxU I made sure to credit you and Moondra in the answer. Let me know if I can improve the answer somehow!</span>
<span class="comment-copy">I also liked <a href="https://stackoverflow.com/a/45827519/5741205">@ayhan's solution</a> a lot...</span>
<span class="comment-copy">@MaxU Cheers! Can't believe I didn't remember that one.</span>
<span class="comment-copy">I was never been to this error till today. Nice for pointing it out.</span>
<span class="comment-copy">Okay, so you mention an XY problem. What do you suggest?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ your answer lists the alternatives, I just wanted to emphasize that instead of waiting on <code>pd.eval</code> to be "fixed", one should choose one of those :)</span>
<span class="comment-copy">Ah, okay. I didn't pick up on that at first. Thanks for the clarification! Also, I agree with your answer, because the docs don't mention what should be passed and what shouldn't. So, people make the common mistake of assuming that <code>pd.eval</code> will work on each string in the series in isolation, rather than the entire series <code>__repr__</code> as a whole, which is what it does.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ I disagree: the docs are very explicit about <code>expr</code> being an <code>str</code>/<code>unicode</code> instance. There is a remark saying "<i><code>Series</code> and <code>DataFrame</code> objects are supported and behave as they would with plain ol’ Python evaluation</i>", but that refers to the <i>contents</i> of the string passed. Anything else is wishful thinking :P But the comments in the relevant SO posts suggest that this does trip up users every once in a while, so providing a solution/alternative holds value.</span>
