<div class="post-text" itemprop="text">
<p>While I can manipulate a CSV file with Python without an issue if it's strictly comma delimited, I'm running into a massive problem with this format I'm working with. It's comma delimited but the last column conists of a mesh of about six commans withiin the following figure:</p>
<pre><code>"{""EvidenceDetails"": [{""MitigationString"": """", ""Criticality"": 2, ""Timestamp"": ""2018-05-07T13:51:02.000Z"", ""CriticalityLabel"": ""Suspicious"", ""EvidenceString"": ""1 sighting on 1 source: item. Most recent item: Item4: item. I've never seen this IP before. Most recent link (May 7, 2018): link"", ""Rule"": ""Recent""}, {""MitigationString"": """", ""Criticality"": 2, ""Timestamp"": ""2018-05-09T05:32:41.316Z"", "etc"}]}"
</code></pre>
<p>The other columns are standard comma separation, but this one column is a mess. I need to only pull out the timestamps' YYYY-MM-DD; nothing else. I can't seem to figure out a way to strip out the unnecessary characters, however. </p>
<p>Any suggestions? I'm working with Python specifically, but if there's something else I should look to, let me know! </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than splitting/stripping, it may be easier to use a regular expression to extract the datestamps you want directly.</p>
<p>Here is an example with the line you provided in your question:</p>
<pre><code>import re
pattern_to_use = "[0-9]{4}-[0-9]{2}-[0-9]{2}"
string_to_search = """""{""EvidenceDetails"": [{""MitigationString"": """", ""Criticality"": 2, ""Timestamp"": ""2018-05-07T13:51:02.000Z"", ""CriticalityLabel"": ""Suspicious"", ""EvidenceString"": ""1 sighting on 1 source: item. Most recent item: Item4: item. I've never seen this IP before. Most recent link (May 7, 2018): link"", ""Rule"": ""Recent""}, {""MitigationString"": """", ""Criticality"": 2, ""Timestamp"": ""2018-05-09T05:32:41.316Z"", "etc"}]}"""""
print(re.findall(pattern, string_to_search))
</code></pre>
<p>This will print an array containing the datestamps, in the order they appeared in the string (i.e, <code>['2018-05-07', '2018-05-09']</code>)</p>
<p>See <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">The Python 3 Docs</a> for more information on regular expressions.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking at JSON format, so try using the <code>json</code> module:</p>
<pre><code>import json

# if data is in a file
with open('your filename here','r') as f:
    data = json.load(f)

# if data is stored in a string variable
data = json.loads(stringvar)
</code></pre>
<p>The data variable should now contain your data in a more easily accessible format.</p>
</div>
<span class="comment-copy">Forgot about regex completely. I'll give it a shot, thanks!</span>
<span class="comment-copy">Oh well that makes way more sense... I knew they used JSON on the back end but I didn't realize it was a direct conversion into CSV. Okay, I'll give this a shot!</span>
