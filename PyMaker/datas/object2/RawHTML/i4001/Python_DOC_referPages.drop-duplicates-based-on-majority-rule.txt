<div class="post-text" itemprop="text">
<p>I have a table that looks like this:</p>
<pre><code>A  B
1  cat
1  cat
1  dog
2  illama
2  alpaca
3  donkey
</code></pre>
<p>Using <strong><code>A</code></strong> as the key, I'd like to remove duplicates such that that dataframe becomes:</p>
<pre><code>A  B
1  cat
3  donkey
</code></pre>
<p><strong><code>1</code></strong> is duplicated three times, the value <em><code>cat</code></em> occurs the most so it is recorded. there is no majority for <strong><code>2</code></strong> so it is considered ambiguous and removed completely. <strong><code>3</code></strong> remains as it has no duplicate. </p>
</div>
<div class="post-text" itemprop="text">
<h1><code>groupby</code> + <code>pd.Series.mode</code></h1>
<p>This is a two step solution using <code>pd.Series.mode</code>:</p>
<pre><code># find the mode for each group
i = df.groupby('A').B.apply(pd.Series.mode).reset_index(level=1, drop=True)
# filter out groups which have more than one mode—ambiguous groups
j = i[i.groupby(level=0).transform('count') == 1].reset_index()
</code></pre>
<p></p>
<pre><code>print(j)

   A       B
0  1     cat
1  3  donkey
</code></pre>
<hr/>
<h1><code>groupby</code> + <code>&lt;</code>custom func<code>&gt;</code></h1>
<p>Alternatively, define a custom function that computes the mode and call it with <code>apply</code>. The filtration logic is subsumed into the function.</p>
<pre><code>def foo(x):
    m = pd.Series.mode(x)
    if len(m) == 1: 
        return m

df.groupby('A').B.apply(foo).reset_index(level=1, drop=True).reset_index()

   A       B
0  1     cat
1  3  donkey
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using <code>value_counts</code> and <code>rank</code>:</p>
<pre><code>df.groupby('A')['B'].apply(lambda x: x.value_counts().rank(ascending=False)).eq(1)[lambda x: x].reset_index()
</code></pre>
<p>Output:</p>
<pre><code>   A level_1     B
0  1     cat  True
1  3  donkey  True
</code></pre>
<p>Using rank with method='average' as a voter to get "majority" from the results of value_count.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/statistics.html?highlight=statistics#statistics.mode" rel="nofollow noreferrer"><code>statistics.mode</code></a>, which raises <code>StatisticsError</code> if no unique mode exists.</p>
<pre><code>from statistics import mode, StatisticsError

def moder(x):
    try:
        return mode(x)
    except StatisticsError:
        return None

res = df.groupby('A')['B'].apply(moder)\
        .dropna().reset_index()

print(res)

   A       B
0  1     cat
1  3  donkey
</code></pre>
<hr/>
<p><strong>Performance benchmarking</strong></p>
<p>Although all 3 methods are suitable for your task, they have slightly difference performance.</p>
<p>Benchmarking results:</p>
<pre><code>df = pd.concat([df]*10000)

%timeit jpp(df)  # 18.3 ms ± 414 µs per loop
%timeit cs1(df)  # 28.1 ms ± 558 µs per loop
%timeit cs2(df)  # 24.5 ms ± 595 µs per loop
</code></pre>
<p>Benchmarking code:</p>
<pre><code>from statistics import mode, StatisticsError

def moder(x):
    try:
        return mode(x)
    except StatisticsError:
        return None

def foo(x):
    m = pd.Series.mode(x)
    if len(m) == 1: 
        return m

def jpp(df):
    return df.groupby('A')['B'].apply(moder)\
             .dropna().reset_index()

def cs1(df):
    i = df.groupby('A').B.apply(pd.Series.mode).reset_index(level=1, drop=True)
    return i[i.groupby(level=0).transform('count') == 1].reset_index()

def cs2(df):
    return df.groupby('A').B.apply(foo).reset_index(level=1, drop=True).reset_index()
</code></pre>
</div>
<span class="comment-copy">Your code works for me, thank you! Is there a way to get the output as a dataframe that retains B as the column name for the values?</span>
<span class="comment-copy">@AndyG Edited, take a look now?</span>
