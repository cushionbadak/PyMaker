<div class="post-text" itemprop="text">
<pre><code>import os
import numpy as np
import pickle

class CifarLoader(object):
    def __init__(self, source_files):
        self._source = source_files
        self._i = 0
        self.images = None
        self.labels = None

    def load(self):
        data = [unpickle(f) for f in self._source] #again a list comprehension
        images = np.vstack([d["data"] for d in data]) #so vstack stacks these arrays in sequence vertically or row wise
        n = len(images)
        self.images = images.reshape(n, 3, 32, 32).transpose(0, 2, 3, 1).astype(float)/255 #number of possible shades for each channel
        self.labels = one_hot(np.hstack([d["labels"] for d in data]), 10)
        return self

    def next_batch(self, batch_size):
        x, y = self.images[self._i:self._i+batch_size], self.labels[self._i:self._i+batch_size]
        self._i = (sel._i + batch_size) % len(self.images)
        return x, y

DATA_PATH = "cifar10"

def unpickle(file):
    with open(os.path.join(DATA_PATH, file), 'rb') as fo:
        dict = pickle.load(fo, encoding='bytes')
    return dict

def one_hot(vec, vals=10):
    n = len(vec)
    out = np.zeros((n, vals))
    out[range(n), vec] = 1
    return out

class CifarDataManager(object):
    def __init__(self):
        self.train = CifarLoader(["data_batch_{}".format(i) for i in range(1, 6)]).load()
        self.test = CifarLoader(["test_batch"]).load()

def display_cifar(images, size):
    n = len(images)
    plt.figure()
    plt.gca().set_axis_off()
    im = np.vstack([np.hstack([images[np.random.choice(n)] for i in range(size)]) for i in range(size)])
    plt.imshow(im)
    plt.show()

d = CifarDataManager()

print ("Number of train images: {}".format(len(d.train.images)))
print ("Number of train labels: {}".format(len(d.train.labels)))
print ("Number of test images: {}".format(len(d.test.images)))
print ("Number of test images: {}".format(len(d.test.labels)))
images = d.train.images
display_cifar(images, 10)
</code></pre>
<p>And this is the error I'm getting. </p>
<pre><code>---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
&lt;ipython-input-182-b3f5a6bd2e1d&gt; in &lt;module&gt;()
      7     plt.show()
      8 
----&gt; 9 d = CifarDataManager()
     10 
     11 print ("Number of train images: {}".format(len(d.train.images)))

&lt;ipython-input-181-e85d41d02848&gt; in __init__(self)
      1 class CifarDataManager(object):
      2     def __init__(self):
----&gt; 3         self.train = CifarLoader(["data_batch_{}".format(i) for i in range(1, 6)]).load()
      4         self.test = CifarLoader(["test_batch"]).load()

&lt;ipython-input-179-d96c4afcda51&gt; in load(self)
     12     def load(self):
     13         data = [unpickle(f) for f in self._source] #again a list comprehension
---&gt; 14         images = np.vstack([d["data"] for d in data]) #so vstack stacks these arrays in sequence vertically or row wise
     15         n = len(images)
     16         self.images = images.reshape(n, 3, 32, 32).transpose(0, 2, 3, 1).astype(float)/255 #number of possible shades for each channel

&lt;ipython-input-179-d96c4afcda51&gt; in &lt;listcomp&gt;(.0)
     12     def load(self):
     13         data = [unpickle(f) for f in self._source] #again a list comprehension
---&gt; 14         images = np.vstack([d["data"] for d in data]) #so vstack stacks these arrays in sequence vertically or row wise
     15         n = len(images)
     16         self.images = images.reshape(n, 3, 32, 32).transpose(0, 2, 3, 1).astype(float)/255 #number of possible shades for each channel

KeyError: 'data'
</code></pre>
<p>Any help is appreciated! I suspect the issue has to do with pickle and Python3 and the way it loads the data.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thank you for checking out your files and posting the result. It is clear now your key is bytes string (bytes). Since you didn't specify, I can only guess you are using python3 which can't convert bytes object to string implicitly (see the note in <a href="https://docs.python.org/3/library/stdtypes.html#bytes-objects" rel="nofollow noreferrer">this section</a>). Try the following under python 2 and python 3, and you may have a better idea:</p>
<pre><code>d = {b'a': 1, b'b': 2}
print(d.keys())
try:
    print('Key "a" gives: {}'.format(d["a"]))
except Exception as err:
    print('Get "{}"!'.format(err.__class__.__name__))
    print('Key b"a" gives: {}'.format(d[b"a"]))
</code></pre>
</div>
<span class="comment-copy">As you can see, the error says that at least one of your unpickled dict doesn't have the key "data". Without your data files, it might be difficult to help you troubleshoot. Maybe you can just unpickle your data files one by one and make sure they all have the key"data".</span>
<span class="comment-copy">I did exactly that:  <code>try_1 = unpickle("data_batch_1")</code> <code>try_1.keys()</code>  And here's what I got:   dict_keys([b'labels', b'filenames', b'batch_label', b'data'])  And it still doesn't work.</span>
<span class="comment-copy">Ok, that nailed it!!! So changing to:  images = np.vstack([d[b"data"] for d in data]) self.labels = one_hot(np.hstack([d[b"labels"] for d in data]), 10)  Thank you very much for solving this issue!</span>
