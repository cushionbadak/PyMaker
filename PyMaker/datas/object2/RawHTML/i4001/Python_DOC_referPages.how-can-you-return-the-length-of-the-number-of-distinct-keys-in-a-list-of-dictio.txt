<div class="post-text" itemprop="text">
<pre><code>self.dl = ({'a':1, 'b': 2, 'c': 3}, {'c':13, 'd':14, 'e':15}, {'e':25, 'f':26, 'g':27})
</code></pre>
<p>I have this tuple of dictionaries and am trying to get the count of all the distinct keys. I am only able to do this so that all the keys are counted. The output here should be 7 but I am getting 9 because c and e are being counted twice.</p>
<p>I have this so far:</p>
<pre><code>new = []
for d in self.dl:
    for k in d:
        new.append(k)
return len(new)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from operator import or_ as union
from functools import reduce

len(reduce(union, map(dict.keys, self.dl)))
</code></pre>
<p>The view returned by <code>keys()</code> already acts like a set. So if you take the union (<code>or_</code>) of all the key sets from your dicts, you get the set of all keys. The length of that set is the number of unique keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could probably try something like this:</p>
<pre><code>new = {}
for d in self.dl:
    for k in d:
        if k not in new:
            new[k] = 1
return len(new)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a>s are definitely the data structure you want here. There are a few different ways you can accumulate the set:</p>
<pre><code>new = set(k for d in self.dl for k in d)
</code></pre>
<p>or</p>
<pre><code>from itertools import chain
new = set(chain(*self.dl))
</code></pre>
<p>or</p>
<pre><code>new = set()
for d in self.dl:
    new &amp;= d.keys()
</code></pre>
<p>In all cases, <code>len(new)</code> will be the number of unique keys.</p>
</div>
<span class="comment-copy">Use a <code>set()</code>, e.g <code>return len(set(k for d in self.dl for k in d))</code></span>
<span class="comment-copy">That's a tuple, not a list.</span>
<span class="comment-copy">@MadPhysicist I tested the code and got a <code>7</code>. Why wouldn't <code>len</code> work on a set?</span>
<span class="comment-copy">My mistake. I had the output in my head as a generator, bit not a set. Time to sleep :)</span>
<span class="comment-copy">2 things, you don't need the <code>if</code> condition keys are unique in a <code>dict</code>. Second, you don't need a <code>dict</code>, <code>new = set()</code> and <code>new.add(k)</code> would do the same thing.</span>
<span class="comment-copy">@AChampion totally set() would do a better job.</span>
