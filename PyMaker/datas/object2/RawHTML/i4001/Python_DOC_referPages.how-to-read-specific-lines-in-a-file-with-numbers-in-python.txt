<div class="post-text" itemprop="text">
<p>I am writing a script to calculate the average and standard deviation for some measurements that I have. I would like to read the file and make it select the data that I want. </p>
<p>Let's say I have the table as below:</p>
<pre><code>(1 2 3 4;
 4 x x x; 
 4 x x x; 
 4 x x x; 
 4 x x x)
</code></pre>
<p>now I want to make the script such that I will be able to select all the values that are under 1, then all the values under 2 and so on, so which files I import depend on the value of the first line.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use the enumerate() function.</p>
<pre><code>    with open(filename,'r') as file_object:
        for line_number, line in enumerate(file_object):
            if line_number in list_of_line_numbers:
                do_stuff_to(line)
</code></pre>
<p>Where list_of_line_numbers is a list containing the lines you want to take. This approach also has the advantage of not loading the entire file into memory, in the event that you're working with something big.</p>
<p>More info on the enumerate function:</p>
<p><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#enumerate</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If your data set is not too large I would consider using a <code>pandas.DataFrame</code> from the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html" rel="nofollow noreferrer">Pandas Wrangling Library</a>:</p>
<pre><code>pandas.DataFrame(two_dimensional_array_like_object)
</code></pre>
<p>If you have a csv (<code>example.csv</code>) that looks like:</p>
<pre><code>1,2,3
2,3,4
3,4,5
</code></pre>
<p>Importing this into a <code>pandas.DataFrame</code>:</p>
<pre><code>In[7]: import pandas as pd

In[8]: df = pd.read_csv('example.csv', headers=False)

In[9]: print(df)
   0  1  2
0  1  2  3
1  2  3  4
2  3  4  5
</code></pre>
<p>Now you have an extremely functional object (<code>df</code>) that has many built in methods for data wrangling.</p>
<p>To perform your intended slicing:</p>
<pre><code>In[10]: df_copy = df.loc[df[0]==2, :] # select rows that have the number 2 in the first column and make a copy
In[11]: print(df_copy) # print selected rows
   0  1  2
1  2  3  4
</code></pre>
</div>
<span class="comment-copy">It would be better if you post some code you've already written. It's not the best idea to ask the community to solve it for you.</span>
