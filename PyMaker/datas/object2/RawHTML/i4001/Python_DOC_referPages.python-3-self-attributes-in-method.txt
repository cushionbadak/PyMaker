<div class="post-text" itemprop="text">
<p>Suppose there is a simple class with attributes and method.</p>
<pre><code>class c:

    def __init__(self, a, b):
        self.a = a
        self.b = b

    def f(self):
        return(self.a + self.b)

plus = c(2, 2)
print(c.f(plus))

print(c(2, 2).f())
</code></pre>
<p>If I print this, creating an object first, it all works. But when I pass the attributes to the method itself, I get an error.</p>
<pre><code>print(c.f(2, 2))
</code></pre>
<p>So, is it possible to pass attributes to the method itself without creating an object, as in a normal function? Am I doing something wrong, or should I use normal function instead of method in this case?
Thank you guys and girls for helping ;) </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>staticmethod</code>:</p>
<pre><code>class c:
  def __init__(self, a, b):
    self.a = a
    self.b = b
  @staticmethod
  def f(*args):
    return sum(args)


print(c.f(2, 2))
</code></pre>
<p>Output:</p>
<pre><code>4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to avoid creating an instance of your class, you can use the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer"><code>@staticmethod</code></a> decorator:</p>
<pre><code>class C:

    @staticmethod
    def f(a, b):
        return a + b

&gt;&gt;&gt; C.f(2, 2)
4
</code></pre>
<p>I would also recommend following <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">PEP 8 Conventions</a> and using CapWords for naming classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Think of classes as the mold. You don't actually interact with the mold itself, but you use the mold to create objects, that you then can interact with. In order to do something with the object, you have to create it first. This is called Instantiation. </p>
</div>
<span class="comment-copy">You don't have to instantiate a class to use a static method (which is what this user is looking for), in fact, in python, that is frowned upon.</span>
