<div class="post-text" itemprop="text">
<p>I have to test many cases, but this solution is not very elegant:</p>
<pre><code>if '22' in name:
    x = 'this'
elif '35' in name:
    x = 'that'
elif '2' in name:    # this case should be tested *after* the first one
    x = 'another'
elif '5' in name:
    x = 'one'
# and many other cases
</code></pre>
<p>Is there a way to do this sequence of cases with a list?</p>
<pre><code>L = [['22', 'this'], ['35', 'that'], ['2', 'another'], ['5', 'one']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>next</code> to take the first value from a generator.</p>
<pre><code>x = next((val for (num, val) in L if num in name), 'default value')
</code></pre>
<p>The first argument of <code>next</code> is the generator to consume, and the second is the default value if the generator is entirely consumed without producing a value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is called <strong>looping</strong>:</p>
<pre><code>for cond, val in L:
    if cond in name:
        x = val
        break
</code></pre>
</div>
<span class="comment-copy">Great solution! Is there a nice way to have a default case if no match is found, or do I need a <code>try</code> / <code>except StopIteration</code>?</span>
<span class="comment-copy">If you don't want the StopIteration raised, you can use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code> with a default argument.</a>. No need for try-excepts here.</span>
<span class="comment-copy">@Basj <code>next((val for (num, val) in L if num in name), 'default value')</code> would do nicely.</span>
<span class="comment-copy">Thanks, I learned something new today</span>
<span class="comment-copy">Very nice solution, thanks to you two!</span>
