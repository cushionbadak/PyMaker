<div class="post-text" itemprop="text">
<p>this is my first question here so please be patient with me.</p>
<p>My problem is as follows:</p>
<p>Assume we have a pandas Dataframe and we want to apply dynamically some pd.Series methods to a set of columns of this Dataframe. Why the following example doesn't work?</p>
<pre><code>testframe=pd.DataFrame.from_dict({'col1': [1,2] ,'col2': [3,4] })
funcdict={'col1':[pd.Series.astype,str.replace],'col2':[pd.Series.astype,str.replace]}
argdict= {'col1':[['str'],['1','A']],'col2':[['str'],['3','B']]}

for col in testframe.columns:
    for func in funcdict[col]:
            idx=funcdict[col].index(func)
            testframe[col]=testframe[col].func(*argdict[col][idx])
</code></pre>
<p>Expected outcome would be </p>
<pre><code>  col1 col2
0  'A'  'B'
1  '1'  '4'
</code></pre>
<p>But instead i get</p>
<pre><code>AttributeError: 'Series' object has no attribute 'func'
</code></pre>
<p>Remarkably</p>
<pre><code>testframe['col1']=testframe['col1'].astype(*argdict['col1'][0])
</code></pre>
<p>works as expected, so somehow python seems to have a problem with the '.func' syntax despite the fact that </p>
<p><code>print(func)</code></p>
<p>yields the desired output: 'function NDFrame.astype at 0x00000186954EB840' etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your syntax for calling a method is incorrect. There are 2 ways you can call a method in Python.</p>
<p><strong>Direct</strong></p>
<p>As you found, this will work. Note that <code>astype</code> isn't referencing some other object, it's the <em>actual name</em> of the method belonging to <code>pd.Series</code>.</p>
<pre><code>testframe['col1'] = testframe['col1'].astype(*argdict['col1'][0])
</code></pre>
<p><strong>Functional</strong></p>
<p>The functional method demonstrates explicitly that <code>astype</code> is the name of the method.</p>
<pre><code>from operator import methodcaller

testframe['col1'] = methodcaller('astype', *argdict['col1'][0])(testframe[col])
</code></pre>
<p>Trying <code>testframe[col].func(...)</code> will never work as <code>func</code> is not the name of a <code>pd.Series</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://stackoverflow.com/a/31174427/190597"><code>rgettattr</code></a> to get attributes from the Series, <code>testframe[col]</code>:
For example,</p>
<pre><code>In [74]: s = pd.Series(['1','2'])

In [75]: rgetattr(s, 'str.replace')('1', 'A')
Out[75]: 
0    A
1    2
dtype: object
</code></pre>
<hr/>
<pre><code>import functools
import pandas as pd

def rgetattr(obj, attr, *args):
    def _getattr(obj, attr):
        return getattr(obj, attr, *args)
    return functools.reduce(_getattr, [obj] + attr.split('.'))

testframe = pd.DataFrame.from_dict({'col1': [1, 2], 'col2': [3, 4]})

funcdict = {'col1': ['astype', 'str.replace'],
            'col2': ['astype', 'str.replace']}

argdict = {'col1': [['str'], ['1', 'A']], 'col2': [['str'], ['3', 'B']]}

for col in testframe.columns:
    for attr, args in zip(funcdict[col], argdict[col]):
        testframe[col] = rgetattr(testframe[col], attr)(*args)
print(testframe)
</code></pre>
<p>yields</p>
<pre><code>  col1 col2
0    A    B
1    2    4
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> is the function in Python's standard library used for getting a named attribute from an object when the name is given in the form of a string. For example, given</p>
<pre><code>In [92]: s = pd.Series(['1','2']); s
Out[92]: 
0    1
1    2
dtype: object
</code></pre>
<p>we can obtain <code>s.str</code> using</p>
<pre><code>In [85]: getattr(s, 'str')
Out[85]: &lt;pandas.core.strings.StringMethods at 0x7f334a847208&gt;
In [91]: s.str == getattr(s, 'str')
Out[91]: True
</code></pre>
<p>To obtain <code>s.str.replace</code>, we would need</p>
<pre><code>In [88]: getattr(getattr(s, 'str'), 'replace')
Out[88]: &lt;bound method StringMethods.replace of &lt;pandas.core.strings.StringMethods object at 0x7f334a847208&gt;&gt;

In [90]: s.str.replace == getattr(getattr(s, 'str'), 'replace')
Out[90]: True
</code></pre>
<p>However, if we specify </p>
<pre><code>funcdict = {'col1': ['astype', 'str.replace'],
            'col2': ['astype', 'str.replace']}
</code></pre>
<p>then we need some way of handling cases where we need one call to <code>getattr</code>, (e.g. <code>getattr(testframe[col], 'astype')</code>) versus those cases where we need multiple calls to <code>getattr</code> (e.g. <code>getattr(getattr(testframe[col], 'str'), 'replace')</code>. </p>
<p>To unify the two cases into one simple syntax, we can use <code>rgetattr</code>, a recursive drop-in replacement for <code>getattr</code> which can handle dotted chains of string attribute names such as <code>'str.replace'</code>. </p>
<p>The recursion is handled by <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a>.
The docs give as an example that <code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code> calculates <code>((((1+2)+3)+4)+5)</code>. Similarly, you can imagine the <code>+</code> being replaced by <code>getattr</code> so that <code>rgetattr(s, 'str.replace')</code> calculates <code>getattr(getattr(s, 'str'), 'replace')</code>. </p>
</div>
<span class="comment-copy">This solved my problem by using $func.__name__$ as a first argument for methodcaller. Didn't know about that functionality..thx!</span>
<span class="comment-copy">i'm pretty new to python so i will need some time to digest the details but this looks incredbly elegant (+1)</span>
