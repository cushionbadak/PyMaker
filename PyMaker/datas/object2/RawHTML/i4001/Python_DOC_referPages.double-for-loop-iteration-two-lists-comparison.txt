<div class="post-text" itemprop="text">
<p>I'm a beginner.</p>
<p>Could you tell me why this script works <strong>even though the <code>i</code> variable is not defined</strong> in the <code>ip not in i</code> case?</p>
<p>The script compares a list of ARP table <code>match_data</code> (which I get from a  paramiko ssh connection), and my ip list <code>match_ip</code>. I just want to print the IP MAC, and if the IP is not in the ARP list table to <code>print ip + "NO MAC ADDRESS"</code>. </p>
<pre><code>for ip in match_ip:
    for i in match_data:
        if ip in i:
            print  re.search((ip+'\s+'),i).group(0),mac.search(i).group(0)
            break
    if ip not in i:
        print ip + '           NO MAC ADDRESS'
</code></pre>
<h3>Output</h3>
<pre><code>C:\Python27\python.exe C:/Python2/Get_mac_from_arp.py
!!!Connecting SSH!!!
10.240.184.103           30e4.db80.b699
10.240.184.104          7c2f.802d.61e5
10.240.184.105          7c2f.8072.40fc
10.240.184.106          e05f.b982.5720
10.240.178.11           NO MAC ADDRESS
10.240.184.177          e05f.b982.5752
10.240.184.178          7c2f.802a.782a
10.240.184.179          30e4.db80.b6ec
10.240.184.180          7c2f.802a.782b

Process finished with exit code 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The name <code>i</code> is still valid at that point. It has the last value that it got assigned in the <code>for</code> loop. However, there's no need to actually have that <code>if</code> test following the loop. Python <code>for</code> and <code>while</code> loops take an optional <code>else</code> clause which is entered if the loop terminates normally, i.e. it isn't exited early due to a <code>break</code> statement (or a <code>return</code> statement). </p>
<p>So we can re-write that code as:</p>
<pre><code>for ip in match_ip:
    for i in match_data:
        if ip in i:
            print  re.search((ip+'\s+'),i).group(0),mac.search(i).group(0)
            break
    else:
        # We can only get here if the `break` didn't happen
        print ip + '           NO MAC ADDRESS'
</code></pre>
<hr/>
<p>I suppose you expected a <code>for</code> loop to create a new scope, with the loop index and other variables created in the loop only existing in that scope. In some languages (especially those closely related to C) a new block creates a new scope, but that doesn't happen in Python with normal <code>for</code> loops. Python is more conservative with creating scopes, because they aren't as "cheap" to do as they are in C. A function definition creates a new local scope, and so does a class definition. However, a generator expression <em>does</em> run in its own scope, and so does a list comprehension in Python 3, in Python 2 a list comprehension runs in the scope of the surrounding code.</p>
<p>You can read about <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">scopes and namespaces</a> in the official tutorial.</p>
<hr/>
<p>BTW, you should seriously consider migrating to Python 3, Python 2 reaches its official End of Life some time in 2020.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>even though the "i" variable is not defined in the (ip not in i) case? </p>
</blockquote>
<p>It <em>is</em> actually defined - by the  <code>for i in match_data</code> statement. </p>
</div>
<span class="comment-copy">Please verify that the indentation is correct.</span>
<span class="comment-copy">What do you mean by "the i variable is not defined?" In Python you don't declare variables</span>
<span class="comment-copy">Why do you say that "the "i" variable is not defined in the <code>(ip not in i)</code> case". <code>i</code> still has the value it had at the end of the <code>for</code> loop.</span>
<span class="comment-copy">Because, given that your indentation is correct, the <code>i</code> in <code>if ip not in i:</code> takes the last value of <code>i</code> it had in <code>for i in match_data:</code></span>
<span class="comment-copy"><code>i</code> is a very poor name for this variable</span>
<span class="comment-copy">Thank you very much, very informative</span>
<span class="comment-copy">I just merely understand why the "else" case is not expected under the "if  ip in i" as an alternative action =) And why is "break" word is necessary here (without break the script doesnt work properly)</span>
<span class="comment-copy">@Dover The Python  interpreter knows that the <code>else</code> belongs to the <code>for</code> and not the preceding <code>if</code> because of the indentation. So you need to be <b>very</b> careful not to mess the indentation up when using <code>else</code> with <code>for</code> or <code>while</code>! The <code>break</code> is necessary because otherwise control will automatically go into the <code>else</code> block when the <code>for</code> terminates. Also <code>break</code> makes the code more efficient because we don't want to keep testing for matches after we've already found a match.</span>
<span class="comment-copy">This is example why one should name their variables properly instead of using i and j in every for loop.</span>
<span class="comment-copy">Isnt  the last "if" case must be under the "for i in match_data"?</span>
<span class="comment-copy">@Dover Loops do <i>not</i> create a scope in Python</span>
<span class="comment-copy">@Dover: depends on the expected result, but that's another question. Note that if you want it in the inner loop, it would be better written as an <code>else</code> clause.</span>
