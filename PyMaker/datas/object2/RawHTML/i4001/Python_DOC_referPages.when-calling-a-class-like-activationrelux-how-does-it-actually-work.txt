<div class="post-text" itemprop="text">
<p>While I learn Keras, I always see a syntax like <code>Activation('relu')(X)</code>. I looked at the source code and found <code>Activation</code> is a class, so it does make no sense to me how the syntax like <code>Class(...)(...)</code> works.</p>
<p>Here is an <a href="https://github.com/keras-team/keras/blob/master/keras/layers/merge.py#L193" rel="nofollow noreferrer">example</a> and use case of it: <code>A = Add()([A1, A2])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In Keras, it's a bit more convoluted than vanilla Python. Let's break down what happens when you call <code>Activation('relu')(X)</code>:</p>
<ol>
<li><code>Activation('relu')</code> creates a new object of that class by calling the class <code>__init__</code> <a href="https://github.com/keras-team/keras/blob/a6afe7c8149c61372b2aae6ae331d1584eb8a19e/keras/layers/core.py#L298" rel="nofollow noreferrer">method</a>. This creates the object with 'relu' as parameter.</li>
<li>All objects in Python can be callable by implementing <code>__call__</code> allowing you to call it like a function. <code>Activation('relu')(X)</code> now calls that function with <code>X</code> as parameter.</li>
<li>But wait, <code>Activation</code> doesn't directly implement it, in fact it is the base class <code>Layer.__call__</code> gets called which does some checks like shape matching etc.</li>
<li>Then <code>Layer.__call__</code> actually <a href="https://github.com/keras-team/keras/blob/cbadaf00e28f7fe42762b55f52294e3a7bb90515/keras/engine/base_layer.py#L454" rel="nofollow noreferrer">calls</a> <code>self.call(X)</code> which then invokes the <code>Activation.call</code> <a href="https://github.com/keras-team/keras/blob/cbadaf00e28f7fe42762b55f52294e3a7bb90515/keras/layers/core.py#L303" rel="nofollow noreferrer">method</a> which applies the activation to the tensor and returns the result.</li>
</ol>
<p>Hope that clarifies that line of code, a similar process happens when creating other layers and calling them with the functional API.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, classes may have the <code>__call__</code> method, meaning that class instances are callable. </p>
<p>So, it's totally ok to call <code>Activation(...)(...)</code>. </p>
<p>The first step creates an instance of <code>Activation</code>, and the second calls that instance with some parameters.</p>
<p>It's exactly the same as doing:</p>
<pre><code>activationLayer = Activation('relu')
outputTensor = activationLayer(inputTensor) #where inputTensor == X in your example    
</code></pre>
<p>With this, you can also reuse the same layers with different input tensors:</p>
<pre><code>activationLayer = Activation('relu')

out1 = activationLayer(X1)
out2 = activationLayer(X2)
</code></pre>
<p>This doesn't make a big difference with a standard activation layer, but it starts getting very interesting with certain trained layers.</p>
<p>Example: you want to use a standard trained VGG16 model to process two images and then join the images:</p>
<pre><code>vgg16 = keras.applications.vgg16(......)

img1 = Input(imageShape1)
img2 = Input(imageShape2)

out1 = vgg16(img1) #a model is also a layer by inheritance
out2 = vgg16(img2)

... continue the model ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you expecting the <code>new</code> keyword? Python <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">does not use that keyword</a>, instead uses "function notation":</p>
<blockquote>
<p>Class instantiation uses function notation. Just pretend that the class
  object is a parameterless function that returns a new instance of the
  class. For example (assuming the above class):</p>
<pre><code>x = MyClass()
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Objects can have a <code>__call__</code> function which is called when attempting to call the object</span>
<span class="comment-copy">As @BallpointBen mentioned it is <code>__call__</code> method that enables this behavior. It is a way defining objects that can act like functions. Also look at <a href="https://stackoverflow.com/a/9663601/2099607">this</a> answer on SO.</span>
<span class="comment-copy">Thank you, everyone@BallpointBen, the <b>call</b> does solve my question.</span>
<span class="comment-copy">There is similar syntax in <code>dask</code>. The OP isn't asking about the baseline syntax to instantiate an object, its the double <code>class()()</code> syntax. I can give a simple <code>dask</code> example: <a href="http://dask.pydata.org/en/latest/delayed.html" rel="nofollow noreferrer">dask.pydata.org/en/latest/delayed.html</a></span>
<span class="comment-copy">Hi, thank you for the lighting speed response! Guess I didn't make my question clear. Let me give another example here:<a href="https://github.com/keras-team/keras/blob/master/keras/layers/merge.py#L193" rel="nofollow noreferrer">github.com/keras-team/keras/blob/master/keras/layers/â€¦</a>. The usage is like: X = Add()([A1, A2]). So here we have instantiated an Add instance without any parameters by calling Add(), let's call it ADD_INSTANCE, then, what is ADD_INSTANCE([A1, A2]) doing here?</span>
<span class="comment-copy">I think it was clear I was just too eager to give a response to a class syntax that confused me when I was starting general Python! Please ignore my answer, and/or downvote maybe @roganjosh should answer re:dask</span>
<span class="comment-copy">Actually, the reason I'm interested in this question is because I don't really know how it works either! :)</span>
<span class="comment-copy">Did @BallpointBen clarify in their comment to OP? re:<code>__call__</code>? Which was another Python feature that was foreign to me</span>
