<div class="post-text" itemprop="text">
<p>This is actually a quite simple task to do manually, given the two equation, but nevertheless I wanted to know if its possible to equate coefficients in python (maybe using numpy or sympy/scipy?).
So the equations I have look something like this:</p>
<pre><code>y = 1.0066*x**2-1.8908*x-0.888
U = 0.5kB*(r-r0)**2
</code></pre>
<p>Now ideally the second equation should be first multiplied out to take shape like the one above and then <strong>kB</strong> should be calculated via the three coefficients a (=1.0066), b(=1.8908) and c (0.888) with r0 being a constant aswell (basically giving me 3 values for kB)
So the only variables are x and r ,but I am not really interested in them</p>
<p>Is it possible to perform such a task? Bare in mind that I am just a beginner</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>SymPy</code> to represent the right-hand sides as expressions with respect to symbolic variables <code>x</code>, <code>r</code>, <code>r0</code> and <code>kB</code>:</p>
<pre><code>x, r, r0, kB = sym.symbols('x,r,r0,kB')
y = 1.0066*x**2-1.8908*x-0.888
U = 0.5*kB*(r-r0)**2
</code></pre>
<p>Now we can convert <code>y</code> and <code>U</code> into polynomials with respect to <code>x</code> and <code>r</code>:</p>
<pre><code>In [39]: sym.poly(y, x)
Out[39]: Poly(1.0066*x**2 - 1.8908*x - 0.888, x, domain='RR')

In [40]: sym.poly(U, r)
Out[40]: Poly(0.5*kB*r**2 - 1.0*kB*r0*r + 0.5*kB*r0**2, r, domain='RR[r0,kB]')
</code></pre>
<p><a href="http://docs.sympy.org/latest/modules/polys/reference.html" rel="nofollow noreferrer"><code>sym.Poly</code>s</a> have a <a href="http://docs.sympy.org/latest/modules/polys/reference.html#sympy.polys.polytools.Poly.all_coeffs" rel="nofollow noreferrer"><code>all_coeffs</code></a> method which returns a list of the coefficients:</p>
<pre><code>In [41]: sym.poly(y, x).all_coeffs()
Out[41]: [1.00660000000000, -1.89080000000000, -0.888000000000000]

In [42]: sym.poly(U, r).all_coeffs()
Out[42]: [0.5*kB, -1.0*kB*r0, 0.5*kB*r0**2]
</code></pre>
<p>We can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to pair the coefficients from the two lists:</p>
<pre><code>In [43]: list(zip(sym.poly(y, x).all_coeffs(), sym.poly(U, r).all_coeffs()))
Out[43]: 
[(1.00660000000000, 0.5*kB),
 (-1.89080000000000, -1.0*kB*r0),
 (-0.888000000000000, 0.5*kB*r0**2)]
</code></pre>
<p>and then use <code>sympy.Eq</code> to equate the expressions, and use <a href="http://docs.sympy.org/latest/modules/solvers/solvers.html" rel="nofollow noreferrer"><code>sympy.solve</code></a> to solve them for <code>kB</code>. The Python construct I'm using here to generate the list is called a <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>In [44]: [sym.solve(sym.Eq(a, b), [kB]) for a, b in zip(sym.poly(y, x).all_coeffs(), sym.poly(U, r).all_coeffs())]
Out[44]: [[2.01320000000000], [1.8908/r0], [-1.776/r0**2]]
</code></pre>
<p>Putting it all together:</p>
<pre><code>import sympy as sym

x, r, r0, kB = sym.symbols('x,r,r0,kB')
y = 1.0066*x**2-1.8908*x-0.888
U = 0.5*kB*(r-r0)**2
result = [sym.solve(sym.Eq(a, b), [kB]) for a, b in 
          zip(sym.poly(U, r).all_coeffs(), sym.poly(y, x).all_coeffs())]
print(result)
</code></pre>
<p>prints</p>
<pre><code>[[2.01320000000000], [1.8908/r0], [-1.776/r0**2]]
</code></pre>
</div>
<span class="comment-copy">What are the 3 values for kB you are looking for?</span>
<span class="comment-copy">@unutbu for this particular case? They would be just numbers in the range of 2.0xx or did you mean something else?</span>
<span class="comment-copy">I'm not sure I understand the calculation you described. For the example you gave, is the answer you are looking for -- the values of <code>kB</code> found by equating coefficients -- equal to <code>[[2.01320000000000], [1.8908/r0], [-1.776/r0**2]]</code>?</span>
<span class="comment-copy">@unutbu yes exactly! Now I forgot to give you values for r0, but thats just a constant. How did you do that?</span>
<span class="comment-copy">awesome! this works like a charm and I will surely use it for the future for more complex stuff</span>
