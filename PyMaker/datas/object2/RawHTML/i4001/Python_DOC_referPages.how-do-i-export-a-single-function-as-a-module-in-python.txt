<div class="post-text" itemprop="text">
<p>I'm writting a module called <code>foo</code> that has many internal functions, but ultimately boils down to a single external function <code>foo()</code>. When using this module/function, I'd like to do</p>
<pre><code>import foo
foo(whatever)
</code></pre>
<p>instead of</p>
<pre><code>from foo import foo
foo(whatever)
</code></pre>
<p>Is this possible? What do I need to put in <code>__init__.py</code> to make this happen?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't allow a module to be callable.
See this StackOverflow <a href="https://stackoverflow.com/questions/1060796/callable-modules">question about callable modules</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make the name of your module in the <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer"><code>sys.modules</code></a> dictionary point to the function instead of your module.</p>
<p><code>foo.py</code> would look like this</p>
<pre><code>import sys

def foo(x):
    return x + x

sys.modules[__name__] = foo
</code></pre>
<p>then you can use this module from a different file</p>
<pre><code>import foo
print(foo(3))
6
</code></pre>
<p>There are probably reasons for why you shouldn't do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not strictly possible. Python module names are ment to help the programmer distinguish between modules. So even if you had one function, <code>bar</code> in your module <code>foo</code>, using <code>import foo</code> will still need a <code>foo.bar()</code>. You're probably better off just using <code>from foo import *</code>. </p>
<p>However there may be a way around this. Python also has built-in functions, and you may be able to add your own functions to this. Doing so might require rewriting the compile though.</p>
<p>So conclusion: writing <code>from foo import *</code> isn't all that ugly and is a lot easier and prettier than the long way around. </p>
</div>
