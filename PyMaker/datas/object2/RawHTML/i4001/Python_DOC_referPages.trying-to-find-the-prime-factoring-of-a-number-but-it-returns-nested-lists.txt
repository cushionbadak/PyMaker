<div class="post-text" itemprop="text">
<p>I'm having some issues with the output of the function to be a pile of nested lists. I'm trying to recursively make a tree of the factors until I end up with only having factors which are primes.</p>
<pre><code>def getPrimeFactorHelper(x):
    r = []
    getPrimeFactor(x,r)
    return r

def getPrimeFactor(x,r):
    x = int(x)
    if is_Prime(x) == True:
        r.append(x)
        return r
    z = getLowestFactors(x)
    r.append(getPrimeFactor(z[0],r))
    r.append(getPrimeFactor(z[1],r))
    return r
</code></pre>
<p>Well currently it gives me the correct numbers as far as I have been able to figure, but its creating nested lists which isn't what I really want as result.</p>
<p><strong>Outputs:</strong></p>
<p>(3242) <code>[2, [...], 1621, [...]]</code>
the [...] </p>
<p>is the same list again.</p>
<p>Another out where it's even worse: </p>
<p>(48)
 <code>[2, [...], 2, [...], 2, [...], 2, [...], 3, [...], [...], [...], [...]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>getPrimeFactor()</code> returns a list, which you then append to your main list, creating the list of lists output you are seeing. </p>
<p>Thus, instead of </p>
<p><code>r.append(getPrimeFactor(z[0],r))</code> </p>
<p>do:</p>
<p><code>r + getPrimeFactor(z[0],r)</code></p>
<p>That way you concatenate the lists instead of appending: <a href="https://docs.python.org/3.6/tutorial/datastructures.html" rel="nofollow noreferrer">docs</a>. A good intro to these functions is this <a href="https://www.tutorialspoint.com/python/python_lists.htm" rel="nofollow noreferrer">tutorial</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun here is another approach to finding primes with python/numpy. You can make a pretty simple sieve of eratosthenes:</p>
<pre><code>import math
import numpy as np
def sieve_primes(n):

    sieve = np.ones(n/2, dtype=np.bool)  

    i = 3
    while (i**2 &lt; n): 
        if sieve[i/2]:
            sieve[i*i/2 :: i] = False
        i += 2   
    prime_indexes = np.nonzero(sieve)[0][1::]
    primes  = 2 * prime_indexes.astype(np.int32) + 1 
    return primes
</code></pre>
</div>
<span class="comment-copy">Instead of <code>r.append(getPrimeFactor(z[0],r))</code>, do <code>r + getPrimeFactor(z[0],r)</code>. That way you merge the lists instead of appending: <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">Thank you, it works :)</span>
<span class="comment-copy">I'll put it into an answer if you care to accept it then</span>
<span class="comment-copy">actually from a bit more of testing on my end the "r +" isn't actually needed.</span>
<span class="comment-copy">also note that if you want to get rid of duplicate items in a list, you can run <code>set()</code> on it: <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">docs</a></span>
