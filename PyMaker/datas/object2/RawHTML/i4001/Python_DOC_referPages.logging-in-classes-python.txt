<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15727420/using-python-logging-in-multiple-modules">Using Python logging in multiple modules</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to use Python's <code>logging</code> module, and have questions on the best way to use it. </p>
<p>I define several classes, want to write logs and be able to set the level of all of them at the same time. I tried :</p>
<ul>
<li>to use the same logger everywhere. But my classes are used by a framework, I don't have a single entrypoint where I could define a main logger. If so, how should I create it and add handlers ?</li>
<li>to use one logger per file. Should I create it as a class attribute, and adding handlers only the first time the class is instantiated ? Or put it with the imports before the class definition ? <a href="https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/" rel="nofollow noreferrer">This tutorial</a> told me not to, but I don't really get why.</li>
</ul>
<p>Thanks for any hints. I've found lots of docs on the basic way to use a logger, but not much on how to use it in classes.</p>
<p>EDIT: I don't think it's a duplicate of the link below. The accepted answer explains how to load the config in a main program, and then use it in all the modules. But what if I don't have a main program ? Where do I define it ?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you create logger objects in separate files, but with the same name. They will share all the attributes. In fact, they are the same logger. The <code>logging</code> module also allow the creation of logger objects in a hierarchical order. For example, a logger with name <em>spam.mod2</em> is a sub logger of <em>spam</em> in which it takes on all of <em>spam</em>'s attributes, but can also be customized. </p>
<p>To put it into concrete example. I am going to create a simple project which has 2 modules: <code>mod1</code> and <code>mod2</code>. A common module <code>setup_logger</code> is used to create a single logger. Finally, I have a <code>main</code> module, which drives the whole system.</p>
<p>The <code>setup_logger</code> module will create a new logger object and name it <em>spam</em>. The code can be simple as listed, or as complex as you want.</p>
<pre><code># setup_logger.py
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('spam')
</code></pre>
<p>Next, <code>mod1</code> being lazy, just reuse that logger object:</p>
<pre><code># mod1.py
from setup_logger import logger

class Class1(object):
    def do_something(self):
        logger.info('Class1: doing something')
</code></pre>
<p><code>mod2</code> creates its own logger object, but still need to import <code>setup_logger</code> so that the <em>spam</em> logger is created. <code>mod2</code> creates a sub logger by naming it <em>spam.mod2</em>:</p>
<pre><code># mod2.py
import logging
import setup_logger

# mod2 creates its own logger, as a sub logger to 'spam'
logger = logging.getLogger('spam.mod2')

class Class2:
    def do_something(self):
        logger.info('Class2: doing something')
</code></pre>
<p>Finally, <code>main</code> will put all of them together:</p>
<pre><code># main.py
import mod1
import mod2


if __name__ == '__main__':
    object1 = mod1.Class1()
    object1.do_something()

    object2 = mod2.Class2()
    object2.do_something()
</code></pre>
<p>Output:</p>
<pre><code>INFO:spam:Class1: doing something
INFO:spam.mod2:Class2: doing something
</code></pre>
</div>
<span class="comment-copy">Can't you create it where your classes are defined? And like you proposed in question #2, as a singleton?</span>
<span class="comment-copy">Have you read e.g. <a href="https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a>?</span>
<span class="comment-copy">@seb-mtl Yeah I could, but it seems heavy because I have to put that same code to get the same logger in every class. Is it really the good practice ?</span>
<span class="comment-copy">@jonrsharpe yes, but this explains how to let the user configure the logger. Here, the user is the framework and won't configure it, but I still want it</span>
<span class="comment-copy">@akshat I don't think it's a duplicate. The accepted answer explains how to load the config in a main program, and then use it in all the modules. But what if I don't have a main program ? Where do I define it ?</span>
<span class="comment-copy">Thanks. But if I define handlers to my logger in your <code>setup_logger.py</code>, and then import this several times (in each module), the handlers will be created each time the file is imported, right ? Isn't it a problem ?</span>
<span class="comment-copy">The way Python works is the imported code only get executed once, no mater how many imports. Try it out and see for yourself.</span>
