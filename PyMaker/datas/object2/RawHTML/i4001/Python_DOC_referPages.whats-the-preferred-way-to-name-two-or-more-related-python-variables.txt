<div class="post-text" itemprop="text">
<p>I occasionally find myself appending numbers to the end of each variable when I have a couple of arguments, but I don't do it consistently and I would like to establish just one pattern going forward.</p>
<p>Let's say I have a function which takes in two numbers and the name of a mathematical operation and then it returns the result of that operation.</p>
<pre><code>def do_math(input1, input2, operation):
    # perform the operation and return result
</code></pre>
<p><strong>Edit: please don't get hung up on this example. My question applies to variable names, not just functions, and not just operands</strong></p>
<p>I generally end up with something like this <code>input1</code> and <code>input2</code> style, but it feels odd since Python uses zero-based indexing. But <code>input0</code> and <code>input1</code> also doesn't seem right. Sometimes (like in a Jupyter Notebook) I start with one variable like <code>var</code> (just an example, I'm usually more descriptive) and then later end up adding another one and call it something like <code>var1</code> or possibly <code>var2</code>. When I'm prototyping things in a Notebook, I don't usually think it's important enough to then go back and add the <code>0</code> or <code>1</code> to the first variable name, but then I end up with really inconsistent names.</p>
<p><strong>Edit 2: Adding a more typical/realistic example, as requested:</strong></p>
<pre><code>bits0 = hash_to_binary(hash0)
bits1 = hash_to_binary(hash1)
distance = hamming_distance(bits0, bits1)
</code></pre>
<p>I've checked all over this site as well as various style guides, including <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/#function-and-variable-names</a> and can't seem to find an answer to this question. It's very possible there is no preferred way to do this, but I'd love to hear your suggestions for what makes sense. I know it can depend on the exact scenario, but I'm hoping there's some consistent naming convention I can use to avoid confusion and re-factoring down the line.</p>
<p>Other ways I've considered but don't love:</p>
<p><code>var_0</code>, <code>var_1</code></p>
<p>List, tuple, or custom data structure: <code>vars[0]</code> and <code>vars[1]</code></p>
<p>(This is obviously preferred when using lots of values, but seems like overkill for 2)</p>
<p><code>first_var</code>, <code>second_var</code></p>
<p><strong>The style I'm leaning towards:</strong></p>
<p>To cover the case where I don't anticipate needing a second variable, it could make sense to start with <code>var</code> and then add a <code>var1</code> if necessary later. This would be consistent with Python indexing so that the <code>1</code> indicates it's the second instance variable. Then in the case where I'm comparing ids, hashes, or other words used in Python, I can compare <code>id0</code> to <code>id1</code> or <code>hash0</code> to <code>hash1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would sugest you to name the variables in a way that makes them self-explanatory. It makes the code much more readable for anyone else and reduces the need for comments.
For math operations you can just use simple <code>a</code> and <code>b</code> or <code>x</code> and <code>y</code>.</p>
</div>
<span class="comment-copy">What about <code>left_operand</code> and <code>right_operand</code> ?</span>
<span class="comment-copy">Your vars should explain what they hold (like age, number, coordinate or whatever you have) in my opinion.</span>
<span class="comment-copy">@MatiasCicero I think those work well in very limited cases, like comparing two input values or operating on operands. But then what about a 3rd or 4th operand or variables for other uses?</span>
<span class="comment-copy">There's no standard, but starting from 0 seems uncommon. (<code>a</code> and <code>b</code> is another option, used in e.g. the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a> docs, but the fact that it's in one stdlib module's docs doesn't make it officially recommended or anything.)</span>
<span class="comment-copy">@MackM Yes, I'm aware of PEP8 and cited it in the question</span>
<span class="comment-copy">OP already cited the PEP-0008 guideline.</span>
