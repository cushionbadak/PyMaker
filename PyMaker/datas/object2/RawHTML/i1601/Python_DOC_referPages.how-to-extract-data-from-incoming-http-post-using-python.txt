<div class="post-text" itemprop="text">
<p>I have a Ubuntu LAMP webserver and data is being sent to the webserver continuously through HTTP POST method. I need to extract the data from HTTP POST and insert them in a Database. I don't know how to do that. There is a lot of example available on how to handle outgoing HTTP POST request but the incoming HTTP POST request. I want to write a python3 script which will extract the data from incoming HTTP POST request and save them as varible which I will use to insert the data into the database and also return a response to the client.Can anybody help me in this regard?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>UPDATE</strong></p>
<p>According to the code you posted below, here is a working answer.</p>
<pre><code>#!/usr/bin/python3
import socketserver
from http.server import BaseHTTPRequestHandler
import time
import threading


def do_something(site_id, first, last, pass1):
    print(site_id)
    print(first)
    print(last)
    print(pass1)
    #just to illustrate the point and print the variables


class MyHandler(BaseHTTPRequestHandler):
    def do_POST(self):    # !important to use 'do_POST' with Capital POST
        global site_id, first, last, pass1  #those are still undefined at the module level ;) remember this for later
        if self.path == '/do_something':

            request_headers = self.headers

            site_id = request_headers["m_site_name"]
            first = request_headers["m_first_name"]
            last = request_headers["m_last_name"]
            pass1 = request_headers["m_device_name"]

            do_something(site_id, first, last, pass1)
        self.send_response(200)
        self.end_headers()             #as of P3.3 this is required

try:
    httpd = socketserver.TCPServer(("localhost", 9001), MyHandler)
    httpd.serve_forever()
finally:
    httpd = socketserver.TCPServer(("localhost", 9001), MyHandler)
    httpd.server_close()
</code></pre>
<p>Calling it with Postman
<a href="https://i.stack.imgur.com/sQbmm.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/sQbmm.png"/></a></p>
<p>and the command line output is</p>
<blockquote>
<pre><code>C:\Development\Python\test\venv\Scripts\python.exe C:/Development/Python/test/webserver_old.py
1001
jyoti0
127.0.0.1 - - [19/Nov/2018 21:53:45] "POST /do_something HTTP/1.1" 200 -
jyoti1
101
</code></pre>
</blockquote>
<p>I combined answers from these here:
Reference <a href="https://gist.github.com/huyng/814831" rel="nofollow noreferrer">one</a>, <a href="https://gist.github.com/huyng/814831#gistcomment-2177010" rel="nofollow noreferrer">two</a> and <a href="https://gist.github.com/1kastner/e083f9e813c0464e6a2ec8910553e632" rel="nofollow noreferrer">third</a>
And this is also very important to read:
<a href="https://docs.python.org/3/library/http.server.html" rel="nofollow noreferrer">https://docs.python.org/3/library/http.server.html</a></p>
<blockquote>
<p>http.server is not recommended for production. It only implements basic security checks.</p>
</blockquote>
<p>I believe is ok for a small implementation and some testing around or proof of concept but eventually you'll need to manage this better, maybe I can suggest you to spend some time and use <a href="http://flask.pocoo.org/" rel="nofollow noreferrer">Flask</a>, is actually an excellent &amp; very light framework for Python API building and prototyping.</p>
<h2>-</h2>
<h2><strong>Previous answer (deprecated &amp; updated above)</strong></h2>
<p>-</p>
<p>As per a very light and simple reference to <a href="https://gist.github.com/bradmontgomery/2219997" rel="nofollow noreferrer">this</a> one:</p>
<pre><code>def do_POST(self):
        # Doesn't do anything with posted data
        content_length = int(self.headers['Content-Length']) # &lt;--- Gets the size of data
        post_data = self.rfile.read(content_length) # &lt;--- Gets the data itself
        self._set_headers()
        self.wfile.write("&lt;html&gt;&lt;body&gt;&lt;h1&gt;POST!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;")
</code></pre>
<p>Update (without and API):</p>
<p>Assuming you are running on or machine at a custom port with a custom trailing part at the URL, then "pure" python would look like this:</p>
<pre><code>import SocketServer
from BaseHTTPServer import BaseHTTPRequestHandler

def doSomething():
    print "i did"

class MyHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/doSomething':
            mail = self.request.POST.get('email')
            something = self.request.POST.get('something')

            doSomething()
        self.send_response(200)

httpd = SocketServer.TCPServer(("", 8080), MyHandler)
httpd.serve_forever()
</code></pre>
<p>I assume this way you can reuse the variables freely. Check also this reference <a href="https://stackoverflow.com/questions/43640970/cant-get-post-parameters">here</a>, Brenda's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>@oetoni, I am getting time out error while using:</p>
<pre><code>#!/usr/bin/python3
import socketserver
from http.server import BaseHTTPRequestHandler
import time
import threading


def do_something(site_id, first, last, pass1):
    print(site_id)
    print(first)
    print(last)
    print(pass1)
    #just to illustrate the point and print the variables


class MyHandler(BaseHTTPRequestHandler):
    def do_POST(self):    # !important to use 'do_POST' with Capital POST
        global site_id, first, last, pass1  #those are still undefined at the module level ;) remember this for later
        if self.path == '/do_something':

            request_headers = self.headers

            site_id = request_headers["m_site_name"]
            first = request_headers["m_first_name"]
            last = request_headers["m_last_name"]
            pass1 = request_headers["m_device_name"]

            do_something(site_id, first, last, pass1)
        self.send_response(200)
        self.end_headers()             #as of P3.3 this is required

try:
    httpd = socketserver.TCPServer(("localhost", 9001), MyHandler)
    httpd.serve_forever()
finally:
    httpd = socketserver.TCPServer(("localhost", 9001), MyHandler)
    httpd.server_close()
</code></pre>
<p>But I am getting the correct response while using this code:</p>
<pre><code>#!/usr/bin/python3

# -*- coding: UTF-8 -*-

import cgi
import cgitb
cgitb.enable()

print('Content-Type: text/html')
print('')

arguments = cgi.FieldStorage()
for i in arguments.keys():
        print(arguments[i].value)
</code></pre>
<p>and it prints the received data on the web browser.
I am using this script as a cgi script on the apache web server which can be accessed through a web browser. I am not running this script as a service or application. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python3

# -*- coding: UTF-8 -*-

import cgi
import cgitb
cgitb.enable()

print('Content-Type: text/html\n')
arguments = cgi.FieldStorage()
print(arguments["m_site_name"].value)
print("&lt;br /&gt;\n")
print(arguments["m_first_name"].value)
print("&lt;br /&gt;\n")
print(arguments["m_last_name"].value)
print("&lt;br /&gt;\n")
print(arguments["m_device_name"].value)
print("&lt;br /&gt;\n")
site = arguments["m_site_name"].value
first = arguments["m_first_name"].value
last = arguments["m_last_name"].value
device = arguments["m_device_name"].value
-----do_other_things_with_the_variables(site,first,last,device)-----
</code></pre>
<p>This code solved my problem. Now I can store HTTP POST data into variables with this python cgi script.</p>
<p>my HTTP POST Request:
<a href="http://your_server_url_or_IP/cgi-bin/python_script.py?m_site_name=MySite&amp;m_first_name=anyname&amp;m_last_name=anylastanme&amp;m_device_name=anydeviceidorname" rel="nofollow noreferrer">http://your_server_url_or_IP/cgi-bin/python_script.py?m_site_name=MySite&amp;m_first_name=anyname&amp;m_last_name=anylastanme&amp;m_device_name=anydeviceidorname</a></p>
</div>
<span class="comment-copy">Are you using Flask?</span>
<span class="comment-copy">No, I am not using any api. I want to make a request to a python script like <a href="http://anuurl.com/cgi-bin/pythonscript.py" rel="nofollow noreferrer">anuurl.com/cgi-bin/pythonscript.py</a>  and then the script executes and extracts the data from HTTP POST request.</span>
<span class="comment-copy">hi @jyoti, i updated the answer ;) check below</span>
<span class="comment-copy">I am guessing "post_data = self.rfile.read(content_length)" will save all of the data. Is there a way to save specific data as variables, like: user = username mail = xyz@abc.com place = anywhere so that I can use the variables later?</span>
<span class="comment-copy">@jyoti, check again I updated the answer ;) In the first example with .read() you can also check the content during debugging and later understand from what you discover how to extract them as needed</span>
<span class="comment-copy">I will implement both of your suggestions and will let you know about the results. I want to access the pythonscript.py file through a Web Browser and when the script is accessed via web browser the script will be executed and as a result data from the HTTP POST will be extracted and inserted into a database. Unfortunately, I wouldn't implement your suggestion today but I surely will do that on Monday and will update you accordingly. Although thanks for the help, I had no clue about where to start or How to begin with in this regard.</span>
<span class="comment-copy">don't mention it! I hope it helps... please know that the script itself should run as a web service or under and api, to make life easier you can use django or flask but if you are insisting on using non of them then try the second one and only check the content of post ;) you can control the port 8080 as per your preference and the script will run under localhost:8080 (or any port :) )</span>
<span class="comment-copy">I know nothing of Django or flask. That's why I didn't use any of them. I don't know how to use or implement django or flask.</span>
<span class="comment-copy">@oetoni, I've found out the problem. It's the port 9001. I am running this script as a cgi script so, I need to use port 80.  But when I use port 80, I get this error:   <b>AH01215:        self.socket.bind(self.server_address): /var/www/html/cgi-bin/anything.py</b> <b>AH01215: PermissionError: [Errno 13] Permission denied: /var/www/html/cgi-bin/anything.py</b> <b>End of script output before headers: anything.py</b></span>
