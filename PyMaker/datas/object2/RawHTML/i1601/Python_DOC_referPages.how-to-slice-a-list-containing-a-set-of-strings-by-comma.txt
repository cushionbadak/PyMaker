<div class="post-text" itemprop="text">
<p>I have a set of strings inside a list that I read from a CSV file and it looks like this:</p>
<pre><code>myList = ('17.0.1.34', '17.1.182.21', '714'),('203.84.210.248', '27.111.228.3', '10310'),('202.73.40.45', '27.111.228.6', '18106'),...
</code></pre>
<p>I want to store it into a database (Django) that has three fields:</p>
<pre><code>fieldOne = '17.0.1.34', '203.84.210.248','202.73.40.45', ....
fieldTwo = '17.1.182.21', '27.111.228.3', '27.111.228.6', ...
fieldThree = '714', '10310', '18106',...
</code></pre>
<p>What should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a list of 3-tuples:</p>
<pre><code>myList = [
    (a1, b1, c1),
    (a2, b2, c2),
    (a3, b3, c3),
    ...
]
</code></pre>
<p>You want to refactor this list into three variables:</p>
<pre><code>fieldOne = [a1, a2, a3, ...]
fieldTwo = [b1, b2, b3, ...]
fieldThree = [c1, c2, c3, ...]
</code></pre>
<p>You can do this using list comprehension: "Make a list by taking the <code>k</code>th value from each element of <code>myList</code>". That would look like this:</p>
<pre><code>fieldOne = [i[0] for i in myList]    # k = 0
fieldTwo = [i[1] for i in myList]    # k = 1
fieldThree = [i[2] for i in myList]  # k = 2
</code></pre>
<p>Of course, if your tuples are of variable length this gets much more complicated - but these are the fundamentals, and you can play around with them as needed to solve your problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> your results and store them in a dictionary:</p>
<pre><code>&gt;&gt;&gt; myList = [('17.0.1.34', '17.1.182.21', '714'),('203.84.210.248', '27.111.228.3', '10310'),('202.73.40.45', '27.111.228.6', '18106')]
&gt;&gt;&gt; fields = 'fieldOne', 'fieldTwo', 'fieldThree'
&gt;&gt;&gt; dict(zip(fields, zip(*myList)))
{'fieldOne': ('17.0.1.34', '203.84.210.248', '202.73.40.45'), 'fieldTwo': ('17.1.182.21', '27.111.228.3', '27.111.228.6'), 'fieldThree': ('714', '10310', '18106')}
</code></pre>
<p>Then you can just reference the <code>'fieldOne'</code>, <code>'fieldTwo'</code>, <code>'fieldThree'</code> keys from this dictionary and store it in your database.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using the following way so you can use it multiple times.</p>
<pre><code>def create_field(myList):
    fieldOne = [myList[i][0] for i in range(len(myList))]
    fieldTwo = [myList[i][1] for i in range(len(myList))]
    fieldThree = [myList[i][2] for i in range(len(myList))]
    return fieldOne, fieldTwo, fieldThree
create_field(myList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given your data, here is a possible solution:</p>
<pre><code># Initialize each field list
fieldOne = []
fieldTwo = []
fieldThree = []

# fetch each **item** in **myList**, we extract the component corresponding
# append it to the appropriate field
for item in myList:
    fieldOne.append(item[0])
    fieldTwo.append(item[1])
    fieldThree.append(item[2])
</code></pre>
</div>
<span class="comment-copy">Are <code>fieldOne</code>, <code>fieldTwo</code> etc. lists of strings or strings separated by a comma? If they're lists, please surround them with square brackets to make it clearer.</span>
