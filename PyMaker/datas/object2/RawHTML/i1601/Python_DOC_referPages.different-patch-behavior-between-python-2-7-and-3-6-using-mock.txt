<div class="post-text" itemprop="text">
<p><code>@patch</code> does not seem to produce the same behavior under 2.7 and 3.6.</p>
<p>Here is my project structure:</p>
<pre><code>project/
    foo.py
    bar.py
    lol.py
tests/
    test_project.py
</code></pre>
<p>foo.py:</p>
<pre><code>class Foo:
    pass
</code></pre>
<p>bar.py (imports Foo):</p>
<pre><code>from project.foo import Foo

class Bar:
    def __init__(self):
        f = Foo()
</code></pre>
<p>lol.py (imports Bar):</p>
<pre><code>from bar import Bar

class Lol:
    def __init__(self):
        b = Bar()
</code></pre>
<p>Since <code>bar.py</code> imports Foo using <code>from project.foo import Foo</code>, I am patching <code>bar.Foo</code> (according to <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">where to patch</a> docs):</p>
<p>test_bar.py:</p>
<pre><code>from project import lol
from project import bar

@patch('bar.Foo')  # Works in 3.6, fails with 2.7
def test_lol(mock_Foo):
    l = lol.Lol()
    mock_Foo.assert_called()
</code></pre>
<p>This setup runs correctly in Python 3.6 but fails in 2.7 (Foo does not get patched).</p>
<p>However, if I switch my setup to:</p>
<p>test_bar.py:</p>
<pre><code>from project import lol
# from project import bar # No need to import bar anymore

@patch('project.bar.Foo')  # Works in 2.7, fails with 3.6
def test_lol(mock_Foo):
    l = lol.Lol()
    mock_Foo.assert_called()
</code></pre>
<p>It works in 2.7 but fails in 3.6.</p>
<p>What is a recommended way to use <code>@patch</code> to make it produce results consistent between python versions?</p>
<p>Note: This problem only appears when I test <code>lol.py</code>. If I call <code>bar.py</code> from the unit test, I get consistent results using second setup <code>@patch('cookie_test.bar.Foo')</code> and it works in both 2.7 and 3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>I cannot replicate the difference using 2.7 vs 3.6 upon adding <code>__init__.py</code> files to your <code>project</code> directory, and changing the import of <code>Bar</code> in <code>lol.py</code>:</p>
<pre><code>from project.bar import Bar
</code></pre>
<p>In either case, you should not need to import <code>bar</code> in your test - mock is taking care of finding <code>bar</code> by parsing the string passed to the <code>mock</code> decorator.  </p>
<p>I suspect the error you're seeing is due to the fact that Python 3 uses absolute imports (<a href="https://www.python.org/dev/peps/pep-0328/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0328/</a>)</p>
</div>
