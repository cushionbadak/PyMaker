<div class="post-text" itemprop="text">
<p>I am new to python.  Currently, I have a timedata like  "2018-11-15 13:34:40.000 EST".  I want to convert it into EpochSecond. </p>
<p>I know how to use dateparser to get this, however, I want to know is there a simple way to do this without dateparser?</p>
<pre><code>import dateparser
from datetime import datetime, timezone

mytime = "2018-11-15 13:34:40.000 EST"

dateVar = dateparser.parse(mytime)

print(dateVar)

epoch = datetime(1970, 1, 1,  tzinfo=timezone.utc)

print((dateVar - epoch).total_seconds()) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime.timestamp" rel="nofollow noreferrer"><code>datetime.datetime.timestamp()</code></a> is what you're looking for (relevant part):</p>
<blockquote>
<p>For aware datetime instances, the return value is computed as:</p>
<p><code>(dt - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds()</code></p>
</blockquote>
<p>Example: </p>
<pre><code>import datetime

now = datetime.datetime.now()
epoch = now.timestamp()

# 1542394106.155199
</code></pre>
<p>Implemented into your example, we'll have to use another approach as <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#strftime-strptime-behavior" rel="nofollow noreferrer"><code>datetime.datetime.strptime()</code></a> doesn't quite take timezone kindly <a href="http://bugs.python.org/issue22377" rel="nofollow noreferrer">due to a bug</a> (<a href="https://stackoverflow.com/questions/3305413/python-strptime-and-timezones">relevant question</a> where I found the info).  So we'll have to use another builtin to parse it (<a href="https://repl.it/repls/LoosePapayawhipAudacity" rel="nofollow noreferrer">example here</a>):</p>
<pre><code>from dateutil.parser import parse

mytime = "2018-11-12 00:30:20.000 EST"
dt = parse(mytime)
epoch = dt.timestamp()
</code></pre>
<p>The parsed string is still a <code>datetime.datetime</code> object so you can handle it the same after parsing.</p>
<p>Note: however <code>parse</code> might complain it read the timezone but not understood it: </p>
<blockquote>
<pre><code> UnknownTimezoneWarning: tzname EDT identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.
</code></pre>
</blockquote>
<p>You might end up needing to <a href="https://dateutil.readthedocs.io/en/stable/parser.html?highlight=parse#dateutil.parser.parse" rel="nofollow noreferrer">pass the <code>tzinfos</code> into the <code>parse()</code> method</a> anyhow:</p>
<pre><code>from dateutil.parser import parse
# from dateutil.tz import gettz # &lt;-- can use if you know the tz to retrieve

tzinfos = {'EST': -18000, 'CET': +3600}
# another example: {"CST": gettz("America/Chicago")}
mytime = "2018-11-12 00:30:20.000 EST"
dt = parse(mytime, tzinfos=tzinfos)
epoch = dt.timestamp()
print(epoch)
</code></pre>
<p>So I guess in the end it's not as simple as you might want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>from datetime import datetime

epoch = datetime.datetime(1970,1,1)
i = datetime.now()

delta_time = (i - epoch).total_seconds()
</code></pre>
</div>
<span class="comment-copy">Hi Idel, could you be able to explain more about how to use this ?  for example, my time is "2018-11-12 00:30:20.000 EST"</span>
<span class="comment-copy">You'll have to convert your string to a <code>datetime</code> object first of course.  If you don't know a particular format or aren't sure how to convert it, using <code>dateparser</code> is one way.  If the format is consistent you can just use <code>.strptime()</code> method from <code>datetime</code> module and convert the string first, <i>then</i> convert to epoch time.</span>
<span class="comment-copy">Note in your example with the <code>'EST'</code> time zone, it becomes a bit more problematic as there is a <a href="https://bugs.python.org/issue22377" rel="nofollow noreferrer">bug in <code>strptime()</code> to process some time zone</a>.  If <code>dateparser</code> is already working for you, why not rely on that instead? otherwise you'll have to manually parse the timezone and pass it into the <code>datetime</code> object itself.</span>
<span class="comment-copy">You are right, because I can not install the module on my company machine. So I am trying to see if I can parse the data manually.</span>
<span class="comment-copy">@AmenKing Okay I found another way to do this with a different built in.  See my edited answer.</span>
