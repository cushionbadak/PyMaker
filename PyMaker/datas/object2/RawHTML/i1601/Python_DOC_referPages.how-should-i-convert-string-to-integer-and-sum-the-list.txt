<div class="post-text" itemprop="text">
<p>I want to sum up the list of string. I tried to convert strings to integers by using for loop and int(). But it didn't work. What should I do? Thank you for your answer!</p>
<pre><code>a = ['1','2','3']
total = 0
for i in a:
    int(i)
    total = total + i

print(total) #expected output:6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>str</code> and <code>int</code> data types are immutable, so functions called on them <strong>can never modify their values</strong>.</p>
<p>Hence the <code>int()</code> function can't modify your <code>i</code> variable in the for-loop <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">nor is it supposed to.</a></p>
<p>As a result, the <code>int()</code> function is <em>designed to return a new integer</em>, thus you must assign it somewhere or it will be "lost in the void".</p>
<p>I.e.</p>
<pre><code>a = ['1', '2', '3']
total = 0
for i in a:
    total = total + int(i)

print(total)
</code></pre>
<hr/>
<p>Note that it is great practice to learn these, albeit simple, algorithms for operations on lists, strings etc, but the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a> built-in function is there to be used if your in a rush!</p>
<pre><code>a = ['1', '2', '3']
print(sum([int(i) for i in a]))
</code></pre>
<p><em>N.B. I have also used a list-comprehension here that you may not be familiar with; they are <strong>really</strong> useful, I suggest learning them.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a> with <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> to map each item to int:</p>
<pre><code>a = ['1','2','3']

print(sum(map(int, a)))
# 6
</code></pre>
<hr/>
<p><code>int(i)</code> as such does not alter <code>i</code> unless you assign it back. So your code should be:</p>
<pre><code>for i in a:
    i = int(i)
    total = total + i
</code></pre>
<p>Or, shortly:</p>
<pre><code>for i in a:
    total = total + int(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ['1','2','3']
total = 0
for i in a:
    total = total + int(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why everyone suggests loops. Imo the pythonic way would be the following:</p>
<pre><code>total = sum([int(x) for x in a])
</code></pre>
<p>May be a bit heavier on RAM as compared to the <code>total +=...</code> with for loop approach but I'd wager it's faster.</p>
<p>EDIT:
As @tevemadar pointed out you can actually do:</p>
<pre><code>total = sum((int(x) for x in a))
</code></pre>
<p>which changes the list comprehension to be a generator that you then sum, which is a better solution as it does away with having to have the list in memory as one.</p>
<p>EDIT2:
A thing to watch out for with the second solution is that changing <code>a</code> after defining <code>total</code> actually influences <code>total</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Implementing the comment)<br/>
<code>int(i)</code> returns the integer value, <code>i</code> remains being the string it was before.<br/>
You need <code>total = total + int(i)</code>:</p>
<pre><code>a = ['1','2','3']
total = 0
for i in a:
    total = total + int(i)

print(total) # output:6
</code></pre>
</div>
<span class="comment-copy"><code>int(i)</code> returns the integer value, <code>i</code> remains being the string it was before. You need <code>total = total + int(i)</code></span>
<span class="comment-copy"><code>int</code> doesn't change the argument. <code>i=int(i)</code> should do what you want</span>
<span class="comment-copy">You could write <code>sum((int(x) for x in a))</code>, and eliminate memory concerns. But I mainly wanted to write about the remark: explaining the problem with the existing code and fixing it with minimal changes also has value, that is why.</span>
<span class="comment-copy">@tevemadar Oh damn I thought tuple comprehensions weren't a thing. I tried it out and getting a generator is pretty much perfect. Well TIL, thanks, I'll add it to my answer.</span>
