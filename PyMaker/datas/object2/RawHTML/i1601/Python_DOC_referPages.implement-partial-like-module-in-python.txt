<div class="post-text" itemprop="text">
<p>I want to implement a piece of code that are equivalent to each other:</p>
<pre><code>from inspect import getfullargspec
from functools import partial

def incomplete(func):
    global inputs
    global func_args
    func_args = len(getfullargspec(func)[0])
    def wrapper(*args):
        global inputs
        global func_args
        if len(args) &lt; func_args:
            partial(func, args)
        else:
            return func(*args)
    return wrapper

@incomplete
def add(a, b):
    return a + b

add1 = add(1)

assert add1(2) == add(1, 2)
</code></pre>
<p>My problem is that I should return a function in first <code>if</code> statement, but the function is incomplete, what changes should be applied to the below code to have them equivalent?</p>
<pre><code>from inspect import getfullargspec
from functools import partial

def incomplete(func):
    global inputs
    global func_args
    inputs = []
    func_args = len(getfullargspec(func)[0])
    def wrapper(*args):
        global inputs
        global func_args
        if len(inputs) &lt; func_args:
            inputs += args
        else:
            return func(*args)
    return wrapper

@incomplete
def add(a, b):
    return a + b

add1 = add(1)

assert add1(2) == add(1, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from inspect import getfullargspec

def incomplete(func):
    global inputs
    global func_args
    inputs = []
    func_args = len(getfullargspec(func)[0])
    def wrapper(*args):
        global inputs
        global func_args
        inputs += args
        if len(inputs) &lt; func_args:
            def partial(*argss):
                for i in argss:
                    inputs.append(i)
                if (len(inputs) == func_args):
                    return func(*inputs)
                else:
                    return partial
            return partial
        else:
            return func(*args)
    return wrapper

@incomplete
def add(a, b):
    return a + b

add1 = add(1)

assert add1(2) == add(1, 2)
</code></pre>
</div>
<span class="comment-copy">Are you asking how to implement <code>partial</code>?</span>
<span class="comment-copy">@mkrieger1 somehow! My goal is to how can I alter the second code that works like the first one!</span>
<span class="comment-copy">The documentation for <code>partial</code> even gives a possible implementation: <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.partial</a></span>
<span class="comment-copy">@mkrieger1 thank you, I have implemented it in other way :)</span>
