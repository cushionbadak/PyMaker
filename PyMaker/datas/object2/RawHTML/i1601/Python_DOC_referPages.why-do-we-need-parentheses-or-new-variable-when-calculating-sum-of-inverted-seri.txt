<div class="post-text" itemprop="text">
<p>Given some data:</p>
<pre><code>&gt;&gt; s = pd.Series([True, False, True, False, True])
</code></pre>
<hr/>
<pre><code>&gt;&gt; ~s.values == (~s).values
array([True,  True, True,  True, True])
</code></pre>
<p>But</p>
<pre><code>&gt;&gt; ~s.values.sum()
-4 
&gt;&gt; (~s).values.sum()
2
</code></pre>
<p>And</p>
<pre><code>&gt;&gt; x = ~s.values
&gt;&gt; x.sum() == (~s).values.sum()
True
</code></pre>
<p>Why do we need to use parentheses <code>(~s).values</code> or store <code>~s.values</code> in a new variable in order for <code>~Series.sum()</code> to give us the correct number of <code>False</code> values in <code>s</code>?</p>
<hr/>
<p>This is because of precedence, as stated by @juanpa.arrivillaga and @cwallenpoole. Indeed:</p>
<pre><code>&gt;&gt; ~3 is -4
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">precedence</a> of attribute access is higher than the precedence of the <code>~</code> operator. So it is summed before it is negated.</p>
<p>A lot of the numpy/pandas objects override the bitwise operators for vectorized computations. Unfortunately, that will cause them to behave unexpectedly.</p>
<p>In other words, it is getting evaluated as:</p>
<pre><code>~((s.values).sum())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It has to do with evaluation order (or <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">precedence</a>). <code>~</code> produces the inversion of the expression to the right.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without parentheses first sum() is called with the original values. The result of sum() is then inverted.  With (~values).sum the values are inverted first and then sum() is caled with the inverted list.</p>
</div>
<span class="comment-copy">Seriously, I know there's a lot of reasons to downvote questions on the main feed but the few interesting and well-considered questions are attracting downvotes tonight that I don't think they deserve.</span>
