<div class="post-text" itemprop="text">
<pre><code>import csv

filename = str(input("Give the file name: "))
    file = open(filename, "r")
    with file as f:
        size = sum(1 for _ in f)

    print("File", filename, "has been read, and it has", size, "lines.", size - 1, "rows has been analyzed.")
</code></pre>
<p>I pretty much type the csv file path to analyze and do different things with it.</p>
<p>First question is: How can I print the exact cell from the CSV file? I have tried different methods, but I can't seem to get it working.
<a href="https://i.stack.imgur.com/0ntHT.png" rel="nofollow noreferrer"><img alt="For example I want to print the info of those two cells" src="https://i.stack.imgur.com/0ntHT.png"/></a></p>
<p>For example I want to print the info of those two cells</p>
<p>The other question is: Can I automate it to print the very first cell(1 A) and the very last row first cell (1099 A), without me needing to type the cell locations?</p>
<p>Thank you</p>
<p>Small portion of data</p>
<p>Example of the data:</p>
<pre><code>Time    Solar Carport   Solar Fixed  SolarFlatroof  Solar Single
1.1.2016    317         1715         6548           2131
2.1.2016    6443        1223         1213           23121
3.1.2016    0           12213        0              122
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You import <code>csv</code> at the very top but then decided not to use it. I wonder why – it seems <em>just</em> what you need here. So after a brief peek at <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">the official documentation</a>, I got this:</p>
<pre><code>import csv

data = []

with open('../Downloads/htviope2016.csv') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=';')
    for row in spamreader:
        data.append (row)

print("File has been read, and it has ", len(data), " lines.")
</code></pre>
<p>That is all you need to read in the entire file. You don't need to – for some operations, it is sufficient to process one line at a time – but with the full data loaded and ready in memory, you can play around with it.</p>
<pre><code>print (f'First row length: {len(data[0])}')
</code></pre>
<p>The number of cells per row. Note that this first row contains the header, and you probably don't have any use for it. Let's ditch it.</p>
<pre><code>print ('Discarding 1st row NOW. Please wait.')
data.pop(0)
</code></pre>
<p>Done. A plain <code>pop()</code> removes the last item but you can also use an index. Alternatively, you could use the more pythonic (because "slicing") <code>data = data[1:]</code> but I assume this could involve copying and moving around large amounts of data.</p>
<pre><code>print ('First 10 rows are ...')
for i in range(10):
    print ('\t'.join(data[i])+'(end)')
</code></pre>
<p>Look, there is data in memory! I pasted on the <code>(end)</code> because of the following:</p>
<pre><code>print (f'First row, first cell contains "{data[0][0]}"')
print (f'First row, last cell contains "{data[0][-1]}"')
</code></pre>
<p>which shows</p>
<pre><code>First row, first cell contains "2016-01-01 00:00:00"
First row, last cell contains ""
</code></pre>
<p>because each line ends with a <code>;</code>. This empty 'cell' can trivially be removed during reading (ideally), or afterwards (as we still have it in memory):</p>
<pre><code>data = [row[:-1] for row in data]
</code></pre>
<p>and then you get</p>
<pre><code>First row, last cell contains "0"
</code></pre>
<p>and now you can use <code>data[row][column]</code> to address any cell that you want (in valid ranges only, of course).</p>
<p><sup>Disclaimer: this is my very first look at the <code>csv</code> module. Some operations could possibly be done more efficiently. Practically all examples <em>verbatim</em> from <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">the official documentation</a>, which proves it's always worth taking a look there <strong>first</strong>.</sup></p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">Are you aware of pandas library? That's well suited for this job. Do you like to explore that?</span>
<span class="comment-copy"><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas.read_csv" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/…</a></span>
<span class="comment-copy">Thanks both. I have indeed tried to look at both of those guides, but haven't really found the right loaction where it's explained.</span>
<span class="comment-copy">Added a download link to the file Added also a small text.</span>
<span class="comment-copy">Wow man, these instructions give me a massive boost in this excersise. Thank you very much for your time and the help. Because in this exersise, I work with few csv files; I changed <code>filename = str(input("Give the file name: ")) with open(filename) as csvfile:</code></span>
<span class="comment-copy">Also a question; why do you start some of the prints with f' ?  Is it possible to print the date times as in the file? Atm it prints 2016-01-01, but I'd like it to be 1.1.2016 (d.m.yr)</span>
<span class="comment-copy">@Daniel: those are called <a href="https://stackoverflow.com/questions/tagged/f-string">f-string</a> – click that link for Stack Overflow results, or look it up in your favourite documentation. The "dates" are printed as such because they are not <i>dates</i> but just the exact <i>text</i> as they appear in your file.</span>
<span class="comment-copy">In the file the texts are in a format of: "1.1.2016" (check the screencapture in the OP). When I print them, the format changes.</span>
<span class="comment-copy">@Daniel: well all I know is that they are like this in your sample file, and I did not do anything to them. Sounds like you have a new question there.</span>
