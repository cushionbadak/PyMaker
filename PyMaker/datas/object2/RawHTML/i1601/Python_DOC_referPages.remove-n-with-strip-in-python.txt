<div class="post-text" itemprop="text">
<p>I'm working on a file text, but, as it has spaces at the beginning too, when I try to delete my <code>\n</code> using the <code>strip</code> mode and <code>list</code> comprehension, I get a list with empty elements <code>(" ")</code> and I don't know how to delete them. 
I have a text and my code is:</p>
<pre><code>with open(filename) as f:
    testo= f.readlines()
[e.strip() for e in testo]
</code></pre>
<p>but I get a list like this: </p>
<pre><code>[' ', ' ', 'word1', 'word2', 'word3', ' ']
</code></pre>
<p>I wanted to know if I can work it out with the <code>strip</code> method, otherwise with another method. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator to read all the lines and <code>strip()</code> the unwanted newlines.</p>
<p>From the generator you only use those elements that are "Truthy" - empty strings are considered <code>False</code>. </p>
<p>Advantage: you create only one list and get rid of empty strings:</p>
<p><em>Write file:</em></p>
<pre><code>filename = "t.txt"
with open(filename,"w") as f:
    f.write("""

  c
  oo
  l

  te
  xt
  """)
</code></pre>
<p><em>Process file:</em></p>
<pre><code>with open(filename) as f:
    testo = [x for x in (line.strip() for line in f) if x] # f.readlines() not needed. f is
                                                          # an iterable in its own right

print(testo)  # ['c', 'oo', 'l', 'te', 'xt']
</code></pre>
<p>You could do the similarly:</p>
<pre><code>testo = [line.strip() for line in f if line.strip()]
</code></pre>
<p>but that would execute <code>strip()</code> twice and would be slightly less efficient.</p>
<p>Output:</p>
<pre><code>['c', 'oo', 'l', 'te', 'xt']
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3.7/library/stdtypes.html#str.strip" rel="nofollow noreferrer">strip()</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth value testing</a></li>
</ul>
<hr/>
<p>A suggested alternative from <a href="https://stackoverflow.com/users/3846213/eli-korvigo">Eli Korvigo</a> is:</p>
<pre><code>testo = list(filter(bool, map(str.strip, f)))
</code></pre>
<p>with is essentially the same - replacing the explicit list comp using a generator comp with a <code>map</code> of <code>str.strip</code> on  <code>f</code> (resulting in a generator) and applying a <code>filter</code> to that to feed it into a list.</p>
<p>See <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built in function</a> for the docu of <code>filter,map,bool</code>.</p>
<p>I like mine better though ;o)</p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting those empty string because few of lines were just empty line breaks. Here's the code for weeding out these empty strings.</p>
<pre><code>with open(filename) as f:
    testo = [e.strip() for e in f.readlines()]
    final_list = list(filter(lambda x: x != '', testo))
    print(final_list)
</code></pre>
<p>Without lambda and using map:</p>
<pre><code>with open(filename) as f:
    final_list = list(filter(bool, map(str.strip, f)))
    print(final_list)
</code></pre>
<p>Another solution is:</p>
<pre><code>with open(filename) as f:
 testo =  [x for x in f.read().splitlines() if x]
 print(testo)
</code></pre>
<p>For second solution is source is: 
<a href="https://stackoverflow.com/a/15233379/2988776">https://stackoverflow.com/a/15233379/2988776</a></p>
<p>For performance upgrades refer to @Patrick 's answer</p>
</div>
<div class="post-text" itemprop="text">
<p>From the data you showed us, it looks like there is a line with just a space in it. With that in mind, you have to decide whether this is something you want or not.</p>
<p>In case you want it, then your code should look something like this:</p>
<pre><code>with open(filename) as f:
   testo=f.readlines()
list(filter(None, (l.rstrip('\n') for l in testo)))
</code></pre>
<p>In case you don't want lines with just whitespace characters, you can do something like:</p>
<pre><code>with open(filename) as f:
   testo=f.readlines()
[e.rstrip('\n') for e in testo if e.strip()]
</code></pre>
<p>In this case, we avoid stripping the: "   a word with leading and trailing spaces    " to "a word with leading and trailing spaces", since in some cases it might change the semantics of the line:)</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15233340/getting-rid-of-n-when-using-readlines">Getting rid of \n when using .readlines()</a></span>
<span class="comment-copy">What's your file looks like ? can you add your file content?</span>
<span class="comment-copy">Should be: <code>[e.strip() for e in testo if e]</code>.</span>
<span class="comment-copy">@Austin <code>if e</code> will be <code>True</code> if there are newlines.</span>
<span class="comment-copy"><code>with open(...) as lines: clean = list(filter(bool, map(str.strip, lines)))</code> P.S. Are you sure you get <code>' '</code> (a whitespace)? <code>str.strip</code> should've removed the trailing space. My example adsumes this is just a typo.</span>
<span class="comment-copy">Or you can run <code>list(filter(bool, map(str.strip, lines)))</code> to avoid double <code>strip</code> calls. I also believe it would be nice to point out, that there is no need in calling <code>readlines</code> in the first place: the OP can iterate over the file handle directly.</span>
<span class="comment-copy">Ah <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#bool</a>  .. did not know that one</span>
<span class="comment-copy">@EliKorvigo added your suggestion , ping me if you want to create an alternate answer then I remove it again. Comments can vanish, so I'd rather preserve good ones in the answer.</span>
<span class="comment-copy">The only thing I'd add is a cleaner way of writing this code. Since listcomps and <code>map</code>/<code>filter</code> higher-order function are all borrowed from functional languages, nesting them in parentheses is not pretty. If you install package <code>fn</code> (e.g. via pip or conda), you can do better: <code>with open(...) as lines: testo = (F(map, str.strip) &gt;&gt; (filter, bool) &gt;&gt; list)(lines)</code> (this assumes an import: <code>from fn import F</code>)</span>
<span class="comment-copy">@JoachimIsaksson yeah I forgot add line break after testo = f.readlines(), I edited the code now.</span>
<span class="comment-copy">@PatrickArtner this twice list building is happening in your answer as well, difference is that here I am doing in two  steps and you are doing inline. Check what you are doing inside parenthesis in this code:  <code>[x for x in (line.strip() for line in f.readlines()) if x]</code></span>
<span class="comment-copy">You don't need to use <code>lambda x: x != ''</code>, because it's equivalent to <code>bool</code> on <code>str</code> instances. And <code>filter</code>/<code>map</code> work faster with builtin functions.</span>
<span class="comment-copy">@EliKorvigo same as Patrick said: <code>Ah docs.python.org/3/library/functions.html#bool .. did not know that one</code>  Now adding sample for that as well.</span>
<span class="comment-copy">Not to be a downer, but the splitlines solution (if <code>t</code> is changed to <code>f</code> so it can run) will remove line feeds correctly but still return empty lines.</span>
