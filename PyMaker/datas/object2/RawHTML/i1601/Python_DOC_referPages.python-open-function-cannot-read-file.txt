<div class="post-text" itemprop="text">
<p>I'm using python 3.6. I am trying to read a lot of (.txt) files in multiple directories. Some files have a comma in the file name, e.g. <code>'Proposal for Anne, Barry and Carol.txt'</code>.</p>
<p>The following code:</p>
<pre class="lang-py prettyprint-override"><code>for filepath in glob.iglob(params.input_dir + r'\**\**.*', recursive=True):
    # [not shown here: code that filters on .txt filetype]

    with open(filepath) as f:
        for line in f:
            for word in re.findall(r'\w+', line):
                # do stuff
</code></pre>
<p>Gives me an error on reading that file:</p>
<pre><code>Traceback (most recent call last):
  File "dir_scraper.py", line 50, in &lt;module&gt;
    results_new = scraper.scrape_file(filepath)
  File "C:\Projects\scraper.py", line 33, in scrape_file
    return func(filepath)
  File "C:\Projects\scraper.py", line 15, in txt
   with open(filepath) as f:
FileNotFoundError: [Errno 2] No such file or directory: 'Z:\\groups\\Proposal for Anne, Barry and Carol.txt'
</code></pre>
<p>I do not want to edit the names of the files.</p>
<p>How can I properly read the files with comma's in the filenames?</p>
<p>Edit:</p>
<ul>
<li><p>I'm sure the path exists.</p></li>
<li><p>Other files from the same directory are parsed without issues.</p></li>
<li><p>Trying to open the file directly from the commandline also gives: The system cannot find the path specified.</p></li>
<li><p>Also, I seem to be unable to rename the file, if I try to change the name through Windows File Explorer to remove the comma (or change something else), it is reset to the original filename.</p></li>
<li><p>Could it have something to do with file permissions?</p></li>
<li>Or maybe is the filename too long? The full path from <code>Z:[..]</code> to <code>[..].txt</code> is 270 characters long.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This works fine on Python 3, Windows 10</p>
<pre><code>import glob, re
for filepath in glob.iglob('C:/Users/test-ABC/Desktop/test/' + r'\**\**.*', recursive=True):
    with open(filepath) as f:
        print(f)
        for line in f:
            print(line)
            for word in re.findall(r'\w+', line):
                pass

&lt;_io.TextIOWrapper
name='C:/Users/test-ABC/Desktop/test\\loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong
name\\another
looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong
name\\test, file, name.txt' mode='r' encoding='cp1251'&gt;

line1 
line2
line3
</code></pre>
<p>May be the problem in the long path. Try to check questions like this:
<a href="https://stackoverflow.com/questions/29557760/long-paths-in-python-on-windows">Long paths in Python on Windows</a></p>
</div>
<div class="post-text" itemprop="text">
<p>First, you only work on files, not directories, and second, you can use os.path.join to convert on Windows:</p>
<pre><code>&gt;&gt;&gt;os.path.join("d:\ss")
'd:\\ss'
</code></pre>
<p>Try this:</p>
<pre><code>    from pathlib import Path
    import os
    import re
    pathName='./'# r'd:/xx' on windows
    fnLst=list(filter(lambda x:not x.is_dir(),Path(pathName).glob('**/*.txt')))
    print(fnLst)
    for fn in fnLst:
        with open(fn) as f:
            print()
            print(fn)
            for line in f:
                for word in re.findall(r'\w+', line):
                    print(word,end="|")
</code></pre>
<p>Output:</p>
<pre><code>[PosixPath('2.txt'), PosixPath('1.txt')]


2.txt
This|tutorial|introduces|the|reader|informally|to|the|basic|concepts|and|features|of|the|Python|language|and|system|It|helps|to|have|a|Python|interpreter|handy|for|hands|on|experience|but|all|examples|are|self|contained|so|the|tutorial|can|be|read|off|line|as|well|
1.txt
Python|is|an|easy|to|learn|powerful|programming|language|It|has|efficient|high|level|data|structures|and|a|simple|but|effective|approach|to|object|oriented|programming|Python|s|elegant|syntax|and|dynamic|typing|together|with|its|interpreted|nature|make|it|an|ideal|language|for|scripting|and|rapid|application|development|in|many|areas|on|most|platforms|
</code></pre>
</div>
<span class="comment-copy">I cannot reproduce this behavior with Python 3.6.3. Can you show where the variable filepath is set?</span>
<span class="comment-copy">Maybe if you use <code>listdir</code> on the directory you can see what the file is actually called.</span>
<span class="comment-copy">Check the file name correctly, we don't usually need to escape/handle comma names in the file name or any parameter string.</span>
<span class="comment-copy">Are you sure your path <code>Z:\\groups</code> exists ?</span>
<span class="comment-copy">I'm sure the path exists. Other files from the same directory are parsed without issues.  Directly from the commandline, trying to open the file also gives: <code>The system cannot find the path specified.</code>  Also, I seem to be unable to rename the file, if I try to change the name through Windows File Explorer to remove the comma (or change something else), it is reset to the original filename.</span>
<span class="comment-copy">The manifest of Python 3.6+ <a href="https://docs.python.org/3/using/windows.html#removing-the-max-path-limitation" rel="nofollow noreferrer">supports long paths</a>, so if you have "LongPathsEnabled" set in "HKLM\System\CurrentControlSet\Control\FileSystem" in Windows 10, then normalized DOS paths support the native limit of up to about 32760 characters. Otherwise normalized DOS paths use the legacy limit of <code>MAX_PATH</code> (260) characters, and longer paths require an extended local-device path, which is prefixed with "\\?\" (or "\\?\UNC\" for UNC) and must be fully qualified (i.e. not relative) and Unicode.</span>
<span class="comment-copy">Thank you @eryksun. Will note that.</span>
<span class="comment-copy">Thank you! It turned out that the path was too long, indeed. The comma threw me off. I'll have to look in to how best to support the long path. Thanks @eryksun for the suggestion, I'll see if that works.</span>
