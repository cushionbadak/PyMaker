<div class="post-text" itemprop="text">
<p>For a script that I am working on I want to make it optional to pass on an array to a function. The way in which I have attempted to do this is by making the variable in question (<code>residue</code>) a <code>kwarg</code>. </p>
<p>The problem is that when I do it in this way, python changes de dtype of the kwarg from a <code>numpy.ndarray</code> to <code>dict</code>. The simplest solution is to convert the variable back to a <code>np.array</code> using:</p>
<pre><code>    residue = np.array(residue.values())
</code></pre>
<p>But I do not find this a very elegant solution. So I was wondering if someone could show me a "prettier" way to accomplish this and possibly explain to my why python does this?  </p>
<p>The function in question is: </p>
<pre><code>    #Returns a function for a 2D Gaussian model 
    def Gaussian_model2D(data,x_box,y_box,amplitude,x_stddev,y_stddev,theta,**residue):
        if not residue:
            x_mean, y_mean = max_pixel(data) # Returns location of maximum pixel value   
        else:
            x_mean, y_mean = max_pixel(residue) # Returns location of maximum pixel value
        g_init = models.Gaussian2D(amplitude,x_mean,y_mean,x_stddev,y_stddev,theta) 
        return g_init
     # end of Gaussian_model2D
</code></pre>
<p>The function is called with the following command:</p>
<pre><code>    g2_init = Gaussian_model2D(cut_out,x_box,y_box,amp,x_stddev,y_stddev,theta,residue=residue1)
</code></pre>
<p>The version of Python that I am working in is 2.7.15</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://stackoverflow.com/questions/45883655/is-it-always-safe-to-modify-the-kwargs-dictionary/45883925#45883925">the accepted answer here</a> why you <em>always</em> get a mapping-object (aka a <code>dict</code>) if you pass arguments via <code>**kwargs</code>; <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">the language spec says</a>:</p>
<blockquote>
<p>If the form “**identifier” is present, it is initialized to a new
  ordered mapping receiving any excess keyword arguments, defaulting to
  a new empty mapping of the same type.</p>
</blockquote>
<p>In other words, the behavior you described is exactly what the language guarantees.</p>
<p>One of the reasons for this behavior is that all functions, wrappers, and implementations in the underlying language (e.g. C / J) will understand that <code>**kwargs</code> is part of the arguments and should be expanded to its key-value combinations.
If you want to preserve your extra-arguments as an object of a certain type, you can't use <code>**kwargs</code> to do so; pass it via an explicit argument, e.g. <code>extra_args</code> which has no special meaning.</p>
</div>
<span class="comment-copy">That is not how optional arguments work.</span>
<span class="comment-copy"><code>def Gaussian_model2D(data, x_box, y_box, amplitude, x_stddev, y_stddev, theta, residue=None):</code></span>
<span class="comment-copy"><code>dtype</code> cannot be <code>dict</code>...</span>
<span class="comment-copy">Make <code>residue</code> an <i>optional</i> argument, something like <code>def foo(residue=None)</code> then check <code>if residue is not None: ... do stuff with residue</code></span>
<span class="comment-copy">Using <code>residue = None</code> gives me the following error when compiling: <code>ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</code></span>
<span class="comment-copy">I understand, thanks for the explanation!</span>
