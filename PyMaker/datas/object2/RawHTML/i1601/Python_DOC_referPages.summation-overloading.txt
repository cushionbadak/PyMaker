<div class="post-text" itemprop="text">
<p>I want the summation of 3 different objects like:</p>
<pre><code>`2 3 4
 2 3 4
 2 3 4  
 6 9 12`the summation must be like this 
</code></pre>
<p>And tried to do this</p>
<pre><code>`

class mymath:
    def __init__(self,x,y,z):
        self.x=x
        self.y=y
        self.z=z        
    def __add__(self,other):
        return self.x+other.x, self.y+other.y, self.z+other.z
x=mymath(2,7,6)
y=mymath(4,3,8)
z=mymath(2,4,6)
print(x+y+z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are returning a tuple, which doesn't have the <code>__add__()</code> method overloaded. You should return a <code>mymath</code> object instead:</p>
<pre><code>class mymath:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z        

    def __add__(self, other):
        return mymath(self.x + other.x, self.y + other.y, self.z + other.z)

    def __str__(self):
        return "({}, {}, {})".format(self.x, self.y, self.z)

x = mymath(2, 7, 6)
y = mymath(4, 3, 8)
z = mymath(2, 4, 6)
print(x + y + z) # Result: (8, 14, 20)    
</code></pre>
<p><strong>Edit: clarification of the solution added after comment</strong></p>
<p>Each <code>+</code> sign translates to an <code>__add__()</code> call. In your example, the operation <code>x + y + z</code> is actually performing two calls to <code>__add__()</code>: <code>x.__add__(y).__add__(z)</code>. </p>
<p>Adding parentheses to the expression may help: <code>x + y + z</code> actually translates to <code>(x.__add__(y)).__add__(z)</code>.</p>
<p>The problem happens in the second call to <code>__add__()</code>, since your method is returning <code>self.x + other.x, self.y + other.y, self.z + other.z</code> which is the tuple <code>(self.x + other.x, self.y + other.y, self.z + other.z)</code> (you can omit the parentheses in your code, and it's more pythonic, but it's equivalent and it's actually a tuple).</p>
<p>A tuple is a fixed-length list of elements and it's a basic class of python language. You can read more about it <a href="https://python-reference.readthedocs.io/en/latest/docs/tuple/" rel="nofollow noreferrer">here</a>.</p>
<p>The result of <code>x.__add__(y)</code> is the summation you would expect from <code>x + y</code>, but of type <code>tuple</code>. In the example, <code>(6, 10, 14) == (2 + 4, 7 + 3, 6 + 8)</code></p>
<p>You can check this running your code but printing just <code>x + y</code></p>
<pre><code>print(x + y) # Prints (6, 10, 14)
</code></pre>
<p>And also:</p>
<pre><code>print(type(x + y)) # Prints &lt;class 'tuple'&gt;
</code></pre>
<p>The second addition, though, fails, because the result of the first one is a tuple and not a <code>mymath</code> object. So <code>(x + y) + z</code> actually is calling the <code>__add__()</code> method of the tuple, which exists but has other meaning than the one you want. Therefore, you are obtaining the error <code>TypeError: can only concatenate tuple (not "mymath") to tuple</code></p>
<p>Note that adding two tuples is just appending them and not adding the coordinates element-wise: <code>(1, 2, 3) + (4, 5, 6) ==&gt; (1, 2, 3, 4, 5, 6)</code></p>
<p>The solution to this problem is to return a <code>mymath</code> object as the result of the <code>__add__()</code> operation, allowing to concatenate more than one addition operation. </p>
<p>I added the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__()</code></a> method to your class because otherwise the print is just showing a default representation of the class like <code>&lt;__main__.mymath object at 0x7f8654657390&gt;</code>.</p>
</div>
<span class="comment-copy">dunder <code>__add__</code> must return the result, not perform side effects.</span>
<span class="comment-copy">Look to it again</span>
<span class="comment-copy">typo <code>self.x+other.x,self.y+other.y+self.z+other.z</code> =&gt; <code>self.x+other.x,self.y+other.y,self.z+other.z</code> ??</span>
<span class="comment-copy">Can u explain more about tuple in this case?</span>
<span class="comment-copy">I added a clarification to the answer. Hope it helps!</span>
<span class="comment-copy">I thank you very much</span>
<span class="comment-copy">Hi. Is the answer ok? If so, could you accept it as the valid answer for the question? Thanks.</span>
