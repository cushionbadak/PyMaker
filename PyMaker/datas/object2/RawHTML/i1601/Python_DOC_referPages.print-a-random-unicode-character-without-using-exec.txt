<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to print a random unicode character in Python 3 using the format <code>\uXXXX</code> where each <code>X</code> is a character in <code>[0-F]</code>.  This is what I have so far:</p>
<pre><code>import random
chars = '0123456789ABCDEF'
L = len(chars)
fourRandInts = [random.randint(0,L-1) for i in range(4)]
fourRandChars = [chars[i] for i in fourRandInts]
s = r'\u{}{}{}{}'.format(*fourRandChars)
string = "print(u'{}')".format(s)
exec(string)
</code></pre>
<p>It seems to work, but I would prefer to avoid using <code>exec</code>.  Is there a more Pythonic way to do this?</p>
<p><strong>EDIT:</strong> It may seem that this question is a duplicate of <a href="https://stackoverflow.com/questions/1477294/generate-random-utf-8-string-in-python">#1477294 "Generate random UTF-8 string in Python"</a> judging by the title, but that question was rephrased in an edit such that the answers there don't generally answer the original question, nor do they answer this question.</p>
</div>
<div class="post-text" itemprop="text">
<h3>One-liner solution thanks to @CJ59:</h3>
<pre><code># print random unicode character from the Basic Multilingual Plane (BMP)
import random
print(chr(random.randint(0,65536)))
</code></pre>
<p>From the Python 3 <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><code>chr()</code></a> documentation:</p>
<blockquote>
<p>chr(i)</p>
<p>Return the string representing a character whose Unicode code point is the integer i. For example, chr(97) returns the string 'a', while chr(8364) returns the string 'â‚¬'. This is the inverse of ord().</p>
<p>The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). ValueError will be raised if i is outside that range.</p>
</blockquote>
<h3>Solution that preserves the use of `chars` in my original question, thanks to @Matthias, allowing selection of hex digits for creating the unicode character:</h3>
<pre><code># print unicode character using select hex chars
import random
chars = '0123456789ABCDEF'
# create random 4 character string from the characters in chars
hexvalue = ''.join(random.choice(chars) for _ in range(4))
# convert string representation of hex value to int,
# then convert to unicode character for printing
print(chr(int(hexvalue, 16)))
</code></pre>
<h3>Function that returns a random unicode character only if it is printable:</h3>
<p>This function uses the <code>str.isprintable()</code> method to only return a character if it is printable.  This is useful if you want to generate a series of characters.  Also includes an option for the character range.</p>
<pre><code>import random
def randomPrintableUnicode(charRange = None):
    if charRange is None:
        charRange = (0,1114112)
    while True:
        i = random.randint(*charRange)
        c = chr(i)
        if c.isprintable():
            return c
        # should add another conditional break
        # to avoid infinite loop

# Print random unicode character
print(randomPrintableUnicode())

# Print random unicode character from the BMP
print(randomPrintableUnicode(charRange = (0,65536)))

# Print random string of 20 characters
# from the Cyrillic alphabet
cyrillicRange = (int('0410',16),int('0450',16))
print(
    ''.join(
        [
            randomPrintableUnicode(charRange = cyrillicRange)
            for _ in range(20)
        ]
    )
)
</code></pre>
</div>
<span class="comment-copy">You know that there is \UXXXXXXXX too, not only \uXXXX in order to get the non-BMP characters of the Uncode standard? Is your program also supposed to be able to output these non-BMP characters?</span>
<span class="comment-copy">Is there a reason that you can't just do <code>chr(random.randint(0,65536))</code>?</span>
<span class="comment-copy">I'd use the way CJ59 showed. If for any reason you want to exclude some values from 'chars' (e.g. <code>chars = '13579BDF</code>) you could do <code>hexvalue = ''.join(random.choice(chars) for _ in range(4)); print(chr(int(hexvalue, 16)))</code></span>
<span class="comment-copy">@MountainDrew depends if you are using python2 or python3. On python3 chr(65536+25) is working, but in python2 it will throw an "ValueError: chr() arg not in range(256)" Exception. For python2 you need unichr(65536+25) - this function however does not exist in python3 anymore!</span>
<span class="comment-copy">Do note that not every codepoint is printable or even <i>valid</i>. There are a few standard functions that deal with Unicode metadata; perhaps there is something useful in there.</span>
