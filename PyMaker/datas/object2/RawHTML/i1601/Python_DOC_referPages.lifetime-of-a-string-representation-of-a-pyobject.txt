<div class="post-text" itemprop="text">
<p>I compare 2 languages… <em>Tcl</em> and <em>Python</em> on C-API… interacting with a external C-API function… the problem is the <code>const char*</code> String-Representation…</p>
<h1>Tcl</h1>
<pre><code>Tcl_Obj *obj=…;
const char *str=Tcl_GetStringFromObj(obj,NULL);
</code></pre>
<p>→ the <code>str</code> is part of the <code>obj</code> and hast the same lifetime as the <code>obj</code>… dito… no <strong>cleanup</strong> is required</p>
<h1>Python</h1>
<pre><code>PyObject *obj=…;
PyObject *strObj=PyObject_Str(obj);
const char *str=PyBytes_AsString(strObj);
Py_XDECREF(strObj);
</code></pre>
<p>→ the <code>str</code> is part of the <code>strObj</code> an a cleanup <code>Py_XDECREF(strObj)</code> is required…</p>
<p>the cleanup in python is the problem because this requires a <em>freaky</em> housekeeping…because the lifetime of <code>str</code> depends code-logic</p>
<p>even if I do my OWN <code>str</code> copy using <code>strstr</code> I have to cleanup my OWN copy.</p>
<p>Question: what is the general lifetime of an <code>PyObject</code> and the <em>String-Representation</em></p>
</div>
<div class="post-text" itemprop="text">
<p>These are two different approaches to how the string representation of objects is managed. </p>
<p>From <a href="https://www.tcl.tk/man/tcl8.4/TclLib/StringObj.htm" rel="nofollow noreferrer">Tcl docs for <code>Tcl_GetStringFromObj</code></a>:</p>
<blockquote>
<p>The storage referenced by the returned byte pointer is owned by the
  object manager.</p>
</blockquote>
<p>From <a href="https://docs.python.org/3/c-api/object.html" rel="nofollow noreferrer">Python docs for <code>PyObject_Str</code></a>:</p>
<blockquote>
<p>Return value: New reference. Compute a string representation of object
  o.</p>
</blockquote>
<p>So Python decides to compute the string representation of the object every time it's requested and invoking <code>PyObject_Str</code> is basically the same as invoking <code>Tcl_NewStringObj</code>. This does require the developer to do some memory management on the returned object, but on the other hand it means you don't have to worry about managing the internal string representation of the object every time the object is changed: the string is simply computed every time it's requested.</p>
</div>
<span class="comment-copy">:-) yes… <b>lifetime</b></span>
<span class="comment-copy">Technically, the string returned by <code>Tcl_GetStringFromObj</code> is managed by the object, and can be freed (via <code>Tcl_Free</code>) providing the <code>bytes</code> field of the <code>Tcl_Obj</code> is then set to <code>NULL</code> so that everything else knows that the string representation is no longer there.</span>
<span class="comment-copy">thanks… but the <i>good</i> think of <b>Tcl</b> is… that the string returned is <i>not</i> required to <code>Tcl_Free</code>… as I understand… this mean I'm very flexible…</span>
