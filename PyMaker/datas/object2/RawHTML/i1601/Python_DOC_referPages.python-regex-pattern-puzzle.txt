<div class="post-text" itemprop="text">
<p>I want to dig out the name in xml files in my local folder and have the following scripts:</p>
<pre><code>import xml.etree.ElementTree as et
import os, glob, re    
in_path = r'D:\B02'
out_path = r'D:\B02\summary.txt'
re_no = 'zi*?.xml'
re_m = 'zi.*?.xml'
def fetch_name(e):
    for nam in e.findall('PDEheader'):
        return nam.find('name').text
file_add = open(str(out_path), 'w')
for fileName in glob.glob(os.path.join(str(in_path), re_no)):
    re_name=fetch_name(et.parse(fileName))
    re_NO = re.search(re_m, fileName).group()
    file_add.write('{}, {}\n'.format(re_NO, re_name))   
file_add.close()
</code></pre>
<p>I can fetch the xml file address using <code>re_no=‘zi*?.xml’</code> search pattern in the glob script, but I cannot if I use <code>re_no=‘zi.*?.xml’</code>. </p>
<p>On the other hand, I can find the xml file name in the re.search pattern using <code>re_m=‘zi.*?.xml’</code>, but I cannot with <code>re_m=‘zi*?.xml’</code>. Can you explain the difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should get into the habit of using <em>raw strings</em> if declaring regex patterns:</p>
<pre><code>re_no = 'zi*?.xml'     # `z` followed by 
                       # as few as possible `i` followed by 
                       # one anything (see footmark) followed by 
                       # `xml`

re_m = 'zi.*?\.xml'    # `zi` followed by 
                       # as few as possible anythings (see footmark) followed by 
                       # `.xml`   - the . here is literal, not an anything  

re_no = 'zi.*?\\.xml'  # is similar to above - but you look for
                       # `zi` followed by 
                       # as few as possible anythings (see footmark) followed by 
                       # literal `\` followed by
                       # anything followed by 'xml'
</code></pre>
<p>Use </p>
<pre><code>re_m = r'zi.*?\.xml'
</code></pre>
<p>and use <a href="http://regex101.com" rel="nofollow noreferrer">http://regex101.com</a> (switched to python mode) to get your regex explained (in text by the site) and tested (against testdata you provide): <a href="https://regex101.com/r/pa9rxn/1" rel="nofollow noreferrer">example for that</a></p>
<hr/>
<p><em>footmark</em>:</p>
<p>anythings as expressed by <code>.</code> do not cover f.e. newlines unless you specify certain flags - read @ <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">re-doku</a></p>
</div>
<span class="comment-copy"><code>re_NO </code> is not defined - this code would produce some name errors  - my guess is you ment to use <code>re_no</code> instead</span>
<span class="comment-copy">I mean I can fetch the xml file address using re_no=‘zi*?.xml’ search pattern in the glob script, but I cannot if I use re_no=‘zi.*?.xml’. On the other hand, I can find the xml file name in the re.search pattern using re_m=‘zi.*?.xml’, but I cannot with re_m=‘zi*?.xml’. Can you explain the difference?</span>
<span class="comment-copy">@CHENLU you are aware that <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a> and <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re</a> have different syntax? glob does not interpret <code>.</code> as "any character beside newlines" but as "there must be a literal dot in the name at this place" ... why would you believe that those two share the exact same structure for wildcards? regex is for text processing and glob for file path expansion ... glob also <code>?</code> like a regex does <code>.</code>  etc</span>
