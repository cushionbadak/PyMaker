<div class="post-text" itemprop="text">
<p>With the code that I am using, every time there is a <code>"?</code>" on data of the encoded message I get an error back <code>"Incorrect Padding"</code>. When using a decoder online I get the correct value for both <code>value1</code> and <code>value2</code> below, but for <code>value2</code> where there should be a <code>"?"</code> I get an exception instead.</p>
<p>The code is:</p>
<pre><code>value1 = "Y29udGludWENCg=="
expected1 = b'continua\r\n'
value2 = "Y29udGludWE_DQo="
expected2 = b'continua?\r\n'

data1 = base64.b64decode(value1)
assert data1 == expected1
data2 = base64.b64decode(value2)
assert data2 == expected2
</code></pre>
<p>Decoding <code>value2</code> throws a <code>binascii.Error: Incorrect padding</code> exception, but the data has the right amount of padding (the length of <code>value2</code> is a multiple of 4).</p>
</div>
<div class="post-text" itemprop="text">
<p>You do not have standard Base64 data, you have <strong>URL-safe</strong> base64 data.</p>
<p>Base64 normally uses letters, digits and <code>/</code> and <code>+</code> characters, but the latter two carry special meaning in URLs, so an alternative <a href="https://en.wikipedia.org/wiki/Base64#URL_applications" rel="nofollow noreferrer">Base64url encoding</a> is used that uses <code>-</code> and <code>_</code> characters instead.</p>
<p>Use the <a href="https://docs.python.org/3/library/base64.html#base64.urlsafe_b64decode" rel="nofollow noreferrer"><code>base64.urlsafe_b64decode()</code> function</a> to decode these strings:</p>
<pre><code>data2 = base64.urlsafe_b64decode(value2)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import base64
&gt;&gt;&gt; value2 = "Y29udGludWE_DQo="
&gt;&gt;&gt; base64.urlsafe_b64decode(value2)
b'continua?\r\n'
</code></pre>
</div>
<span class="comment-copy">Your base64 padding is indeed invalid. It can be repaired, which is what an online decoder might have done.</span>
<span class="comment-copy">Just add the missing <code>'='</code>. Remove all non-Base64 characters first, then if the length is not a multiple of 4, add <code>=</code> characters until it <i>is</i>.</span>
<span class="comment-copy">could you show me a exemple martijn?</span>
<span class="comment-copy">Ah, I see what is going on: You have <b>URL-safe</b> data. Use <code>base64.urlsafe_b64decode()</code>.</span>
<span class="comment-copy">In future, start with a complete <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>; I've filled in the blanks here once I figured out what kind of data you were expecting. Don't leave people trying to help you to guess.</span>
