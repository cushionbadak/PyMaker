<div class="post-text" itemprop="text">
<p>I am new to Python and just messing around with it. </p>
<p>Is there something unique about sys.version_info that means it doesn't return a proper namedtuple and therefore doesn't have the _asdict function? </p>
<pre><code>sss = sys.version_info._asdict
AttributeError: 'sys.version_info' object has no attribute '_asdict'
[Finished in 0.7s with exit code 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Interesting so I actually dug deeper. As mentioned in the comments, <code>sys.version_info</code> is a bespoke tuple subclass and not to be confused by the <code>docstring</code> that interestingly actually says its a named tuple, though they probably were referring to the <code>print</code> string format.</p>
<pre><code>print(sys.version_info.__doc__)
sys.version_info

Version information as a named tuple.
</code></pre>
<p>You will also realize that if you run <code>dir(sys.version_info)</code> which returns its methods, <code>_asdict</code> or <code>dict</code> is not part of it and therefore returned your error where it does no have <code>_asdict</code> as an attribute.</p>
<p>According to the documentation itself;</p>
<blockquote>
<p>A tuple containing the five components of the version number: major,
  minor, micro, releaselevel, and serial. All values except releaselevel
  are integers; the release level is 'alpha', 'beta', 'candidate', or
  'final'. The version_info value corresponding to the Python version
  2.0 is (2, 0, 0, 'final', 0). The components can also be accessed by name, so sys.version_info[0] is equivalent to sys.version_info.major
  and so on.</p>
</blockquote>
<p>Seeing that the components are static and as mentioned in the documentation, the components can always be accessed by name or their fixed indexes.</p>
<p>If you would really want a dictionary out of it:</p>
<pre><code>comp = 'major minor micro releaselevel serial'.split()
svi_dic ={k:v for (k,v) in zip(comp,sys.version_info)}
svi_dic

{'major': 3, 'minor': 6, 'micro': 6, 'releaselevel': 'final', 'serial': 0}
</code></pre>
<p>It seems redundant as you can also easily do <code>sys.version_info.major</code> and so on. Hope this helps gives you an understanding though.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>version_info</code> isn't ~quite a <code>namedtuple</code> (despite the docstring).</p>
<p>(below assumes cpython implementation detail, it may or may not apply to alternate implementations such as <code>pypy</code> / <code>jython</code>)</p>
<p>It is implemented in C, a <code>StructSequence</code>.  From the <a href="https://github.com/python/cpython/blob/260ec2c36abd73bac51489108409160427979ede/Python/sysmodule.c#L2122-L2125" rel="nofollow noreferrer">3.7.1 sources</a>:</p>
<pre><code>    version_info = PyStructSequence_New(&amp;VersionInfoType);
    if (version_info == NULL) {
        return NULL;
    }
</code></pre>
<p>A <a href="https://docs.python.org/3/c-api/tuple.html#struct-sequence-objects" rel="nofollow noreferrer"><code>StructSequence</code></a> from the docs is:</p>
<blockquote>
<p>the C equivalent of namedtuple() objects, i.e. a sequence whose items can also be accessed through attributes. To create a struct sequence, you first have to create a specific struct sequence type.</p>
</blockquote>
<p>That is, it's <em>like</em> a <code>namedtuple</code>, but not the same.  Notably it appears to be missing the <code>_replace</code>, <code>_asdict</code>, <code>_fields</code>, and <code>_fields_defaults</code> apis.</p>
</div>
<span class="comment-copy">@juanpa.arrivillaga whoops! sorry.</span>
<span class="comment-copy">It is not a <code>namedtuple</code>, did you try checking <code>type(sys.version_info)</code>? Anyway, it is a bespoke <code>tuple</code> subclass, not generated using the <code>namedtuple</code> class factory.</span>
