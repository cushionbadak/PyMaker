<div class="post-text" itemprop="text">
<p>So I have a file with some lines of text:</p>
<pre><code>here's a sentence
look! another one
here's a third one too
and another one
one more
</code></pre>
<p>and I have some code that takes the each line and puts it into a list and then reverses the order of the whole list but now I don't know how to write each line back to the file and delete the existing ones in the text file.</p>
<p>Also when I run this code:</p>
<pre><code>file_lines = open(file_name).readlines()
print(file_lines)
file_lines.reverse()
print(file_lines)
</code></pre>
<p>everything works and the line order is reversed, but when I run this code:</p>
<pre><code>text_file = open(file_name, "w")
file_lines = open(file_name).readlines()
print(file_lines)
file_lines.reverse()
print(file_lines)
for line in file_lines:
    text_file.write(line)
</code></pre>
<p>it prints empty lists for some reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can fix it by doing just 2 little changes in your script.</p>
<ol>
<li><p>Use <code>\r+</code> in place of <code>\w+</code></p></li>
<li><p>Before performing write operation, place file position indicator to the beginning</p>
<p><code>text_file.seek(0)</code></p></li>
</ol>
<p>» <code>rw_file.txt</code> - before operation</p>
<pre><code>here's a sentence
look! another one
here's a third one too
and another one
one more
</code></pre>
<p>Below is your modified script to reverse the content of file (It worked).</p>
<pre><code>def reverseFile(file_name):
    text_file = open(file_name, "r+") # Do not use 'w+', it will erase your file content 
    file_lines = [line.rstrip('\n') for line in text_file.readlines()]
    file_lines.reverse()
    print(file_lines)

    text_file.seek(0) # Place file position indicator at beginning

    for line_item in file_lines:
        text_file.write(line_item+"\n")


reverseFile("rw_file.txt")
</code></pre>
<p>» <code>rw_file.txt</code> - after operation</p>
<pre><code>one more
and another one
here's a third one too
look! another one
here's a sentence
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you open the file in <code>'w'</code> mode, the file is erased. From the <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>'w' for only writing (an existing file with the same name will be
  erased)</p>
</blockquote>
<p>You should also use the <code>with</code> keyword:</p>
<blockquote>
<p>It is good practice to use the with keyword when dealing with file
  objects. The advantage is that the file is properly closed after its
  suite finishes...</p>
</blockquote>
<p>I would recommend you <em>read</em> the contents of the file first, process that data, and then <em>write</em>:</p>
<pre><code>def reverseFile(file_name):
    with open(file_name, 'r') as f:
        file_lines = [line.rstrip('\n') for line in f.readlines()]
    file_lines.reverse()
    with open(file_name, "w") as f:
        for line in file_lines:
            f.write(line + '\n')

reverseFile('text_lines.txt') 
</code></pre>
</div>
<span class="comment-copy">Show us how you create the <code>text_file</code> variable.</span>
<span class="comment-copy">how did you open the <code>text_file</code>? use <code>open(filename, "w")</code></span>
<span class="comment-copy">Also can you please give us a sample of what's in <code>file_lines</code>?</span>
<span class="comment-copy">Opening the file in <code>w+</code> mode erases the existing contents.</span>
<span class="comment-copy">It prints empty list because you have used <code>\w+</code> mode which erases the content of file if it exists (otherwise it creates the file). So no more lines in the file and <code>[]</code> is on your screen. I have updated it in my answer. Please have a look.</span>
<span class="comment-copy">Thanks! That worked amazingly :)))))</span>
<span class="comment-copy">This is the proper way of doing it. You can save a bunch of string copying by only stripping the first newline and appending only the last one. The ones in between take care of themselves.</span>
