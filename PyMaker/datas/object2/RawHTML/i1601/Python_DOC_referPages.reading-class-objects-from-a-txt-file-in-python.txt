<div class="post-text" itemprop="text">
<p>I'm relatively new to Python and trying to learn the language. I have been trying to figure out the code for this problem over the last day, I know it's probably going to be relatively simple.</p>
<p>What I want to do is reading a text file, containing data in the following format, iterate over the data and create a class object for it. Thank you!</p>
<pre><code>class Profile:

    def __init__(self, given_name='', family_name='', email='', gender='', status=''):
        self.__given_name = given_name
        self.__family_name = family_name
        self.__email = email
        self.__gender = gender
        self.__status = status
        self.__number_friends = 0
        self.__friends_list = []


    def set_given_name(self, name):
        self.__given_name = name

    def get_given_name(self):
        return self.__given_name

    def set_family_name(self, name):
        self.__family_name = name

    def get_family_name(self):
        return self.__family_name

    def set_email(self, email):
        self.__email = email

    def get_email(self):
        return self.__email

    def set_gender(self, gender):
        self.__gender = gender

    def get_gender(self):
        return self.__gender

    def set_status(self, status):
        self.__status = status

    def get_status(self):
        return self.__status

    def set_number_friends(self, no_friends):
        self.__number_friends = no_friends

    def get_number_friends(self):
        return self.__number_friends

    def set_friends_list(self, friends_list):
        self.set_number_friends(len(friends_list))
        self.__friends_list = friends_list

    def get_friends_list(self):
        return self.__friends_list

    def __str__(self):
        string = self.__given_name + ' ' + self.__family_name + ' ' + self.__email + ' ' + self.__gender + '\n'
        string += self.__status + '\n'
        string += str(self.__number_friends) + '\n'
        for friend_email in self.get_friends_list():
            string += friend_email + '\n'
        return string


    def add_friend(self, email):

        if self.is_friend(email) == True:
            return False;

        self.__friends_list.append(email)
        self.__number_friends += 1

        return True

    def remove_friend(self, email):

        if self.is_friend(email) == False:
            return False;

        self.__friends_list.remove(email)
        self.__number_friends -= 1

        return True



    def is_friend(self, email):        
        found = False

        for email_address in self.__friends_list:
            if email == email_address:
                found = True

        return found


    def __eq__(self, email):
        if self.__email == email:
            return True
        elif self.__email != email:
            return False
        return NotImplemented
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>the best practice for python is using a json,builtin data type of dict:</p>
<p>eg: 
text_file.json:
<code>{"name":"Fox Mulder","email":"fox@findthetruth.com"}</code>
reader.py:</p>
<pre><code>import json
with open("text_file.json",'r') as file:
  a=file.readlines()
dict_0=json.loads(a[0])
</code></pre>
<p>then it is your reader class:</p>
<pre><code>class Profile:
  def reader(self,input_dict,*kwargs):
    for key in input_dict:
      try:
        setattr(self, key, input_dict[key])
      except:
        print("no such attribute,please consider add it at init")
        continue
</code></pre>
<p>if u wanna read do this</p>
<pre><code>profile_instance=Profile()
profile_instance.reader(dict_0)
</code></pre>
<p>you r all set now</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably the easiest way to do what you want:</p>
<p>you could write a program like this:</p>
<pre><code>test = Profile()
with open('file.txt', 'r') as f:
    test.set_given_name = f.readlines()[0]
    test.set_family_name = f.readlines()[1]
    test.set_email = f.readlines()[2]
    test.set_gender = f.readlines()[3]
    test.set_status = f.readlines()[4]
    test.set_number_friends = f.readlines()[5]
    test.set_friends_list = f.readlines()[6]
</code></pre>
<p>and in file.txt:</p>
<pre><code>John
Doe
johndoe@gmail.com
Male
single
5
['1', '2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I assume by "text file" you mean some kind of CSV/TSV Format, which would be a pretty common use case. It also implies that the CSV file has some kind of header, which defines field names which correspond to the field names of your class, so the <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">DictReader</a> class gives you an appropriate level of abstraction. </p>
<p>The csv module is part of the core modules in Python so you just have to import it, no need to install anything</p>
<p>The following snippet might be used as a skeleton to further build your code up around it</p>
<pre><code>import csv

with open('profiles.csv', newline='') as csvfile:
   reader = csv.DictReader(csvfile)
   for row in reader:
      p = Profile(given_name=row['given_name']
                , family_name=row['family_name']
                , email=row['email']
                , gender=row['gender']
                , status=row['status']
      )

      print(p) # print string representation of the class
</code></pre>
<p>Nevertheless, if DictReader does not fit your needs, you also can parse every row of the textfile as you like on your own, there are some examples on the csv module docs.</p>
</div>
<span class="comment-copy">u can use exec() function</span>
