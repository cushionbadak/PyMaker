<div class="post-text" itemprop="text">
<p>I have a dictionary like this:</p>
<pre><code>header= {'f1': 13, 'f2': 7, 'f3': 45};
</code></pre>
<p>As you see, <code>header['f2'] = 7</code> has the minimum value and this item is the second in header (its index is 1).</p>
<p><strong>What I do?</strong></p>
<p>I have try this code to get the index of minimum item in header (here 1) but it returns the key value:</p>
<pre><code>index = min(header)
</code></pre>
<blockquote>
<p><strong>Output:</strong></p>
<blockquote>
<p>f2</p>
</blockquote>
</blockquote>
<p><strong>What I want?</strong></p>
<p>I want to get the index of the minimum item in the dictionary, How can i do that?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Dictionaries do not have indices</h3>
<p>Even in Python 3.6+ (officially 3.7+), where dictionaries are <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">insertion ordered</a>, you cannot extract a key or value directly by position. The same is true for <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>. See also: <a href="https://stackoverflow.com/questions/52507860/accessing-dictionary-items-by-position-in-python-3-6-efficiently">Accessing dictionary items by position in Python 3.6+ efficiently</a>.</p>
<h3><code>min</code> + <code>enumerate</code></h3>
<p>Assuming Python 3.6+, you <em>can</em>  extract the position of a key / value <strong>based on insertion ordering</strong> via iteration. In this case, you can use <code>min</code> with a custom <code>lambda</code> function:</p>
<pre><code>header = {'f1': 13, 'f2': 7, 'f3': 45}

min_idx, (min_key, min_val) = min(enumerate(header.items()), key=lambda x: x[1][1])

print((min_idx, min_key, min_val))

(1, 'f2', 7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>header.values()</code> returns a list of just the values of your dictionary:</p>
<pre><code>&gt;&gt;&gt; header= {'f1': 13, 'f2': 7, 'f3': 45}
&gt;&gt;&gt; header.values()
[13, 7, 45]
&gt;&gt;&gt; print(min(header.values()))
7
</code></pre>
<p><strong>EDIT:</strong> Sorry, you wanted the corresponding key.  Here's one way to do it, without having to include any other special libraries:</p>
<pre><code>print(header.keys()[header.values().index(min(header.values()))])
</code></pre>
<p>Although dictionaries are not ordered in Python, lists are, and the lists you get from <code>.keys()</code> and <code>.values()</code> line up with each other.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list(header.values()).index(min(header.values()))</code></p>
<p>This returns the index of the smallest value in the dict.</p>
</div>
<span class="comment-copy">What would the index be in your example?</span>
<span class="comment-copy">Did you meant the <code>key</code>? There's no <code>index</code> for <code>dict</code>.</span>
<span class="comment-copy">I want something like an index in dictionary, not a key value</span>
<span class="comment-copy">I have no idea what you expect, as a plain dict does not <i>have</i> a deterministic index.  The entries are hashed; the order changes sometimes as the set of keys changes.  In Python 3.5.4, the <code>7</code> is the first value in the dict.</span>
<span class="comment-copy">Dictionary are not ordered in Python, not until version 3.7 (and that is based on insertion order).  Hence there are no index, and index is not a reliable way to make use of the <code>dict</code> either.  What are you trying to accomplish exactly?</span>
<span class="comment-copy">I get that this answers the spirit of the question, but what possible use could the position of the key be to OP though?</span>
<span class="comment-copy">@Idlehands, I cannot comment on how the dictionary is constructed. I can <i>imagine</i> if it's a static dictionary that's created from some input data and never amended, it can represent an ordered mapping. My point is in 3.7+ people can rely on insertion ordering, even if it's a very inefficient O(<i>n</i>) to use it for indexing.</span>
<span class="comment-copy">@jpp I understand, I just can't help but feel this might be an XY problem.  If OP could elaborate on the question perhaps we could actually point them to the right direction instead of an inefficient solution.  But I digress, in the end this is what OP finds useful.</span>
