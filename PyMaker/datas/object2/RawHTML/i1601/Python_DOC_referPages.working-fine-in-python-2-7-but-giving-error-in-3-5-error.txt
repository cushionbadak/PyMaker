<div class="post-text" itemprop="text">
<p>I'm writing a script to automate data generation for a demo and I need to serialize in a JSON some data. Part of this data is an image, so I encoded it in base64, but when I try to run my script I get:</p>
<pre><code>Traceback (most recent call last):
  File "lazyAutomationScript.py", line 113, in &lt;module&gt;
    json.dump(out_dict, outfile)
  File "/usr/lib/python3.4/json/__init__.py", line 178, in dump
    for chunk in iterable:
  File "/usr/lib/python3.4/json/encoder.py", line 422, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.4/json/encoder.py", line 396, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.4/json/encoder.py", line 396, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.4/json/encoder.py", line 429, in _iterencode
    o = _default(o)
  File "/usr/lib/python3.4/json/encoder.py", line 173, in default
    raise TypeError(repr(o) + " is not JSON serializable")
  TypeError: b'iVBORw0KGgoAAAANSUhEUgAADWcAABRACAYAAABf7ZytAAAABGdB...
     ...
   BF2jhLaJNmRwAAAAAElFTkSuQmCC' is not JSON serializable
</code></pre>
<p>As far as I know, a base64-encoded-whatever (a PNG image, in this case) is just a string, so it should pose to problem to serializating. What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>You must be careful about the datatypes.</p>
<p>If you read a binary image, you get bytes.
If you encode these bytes in base64, you get ... bytes again! (see documentation on <a href="https://docs.python.org/3/library/base64.html#base64.b64encode">b64encode</a>)</p>
<p>json can't handle raw bytes, that's why you get the error.</p>
<p>I have just written some example, with comments, I hope it helps:</p>
<pre><code>from base64 import b64encode
from json import dumps

ENCODING = 'utf-8'
IMAGE_NAME = 'spam.jpg'
JSON_NAME = 'output.json'

# first: reading the binary stuff
# note the 'rb' flag
# result: bytes
with open(IMAGE_NAME, 'rb') as open_file:
    byte_content = open_file.read()

# second: base64 encode read data
# result: bytes (again)
base64_bytes = b64encode(byte_content)

# third: decode these bytes to text
# result: string (in utf-8)
base64_string = base64_bytes.decode(ENCODING)

# optional: doing stuff with the data
# result here: some dict
raw_data = {IMAGE_NAME: base64_string}

# now: encoding the data to json
# result: string
json_data = dumps(raw_data, indent=2)

# finally: writing the json string to disk
# note the 'w' flag, no 'b' needed as we deal with text here
with open(JSON_NAME, 'w') as another_open_file:
    another_open_file.write(json_data)
</code></pre>
</div>
<span class="comment-copy">I had a similar problem when I was using Gmail API to send Email with this specific action <code>return {'raw': base64.urlsafe_b64encode(message.as_string())}</code>. @spky Thanks for your answer!</span>
<span class="comment-copy">I am doing the same for excel file, everything is happening correctly but file written to disk is corrupted, could not be opened normally</span>
