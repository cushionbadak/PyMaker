<div class="post-text" itemprop="text">
<p>This is the code of <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations</a>:</p>
<pre><code>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = list(range(n))
    cycles = list(range(n, n-r, -1))
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
</code></pre>
<p>I want it instead of adding the permutations into a list, to write each permutation it finds to a .txt file immediately not by looping the list and writing them into the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>The whole point of <code>itertools</code> is that values are produced lazily and not as lists. You don't need to change the code of <code>permutations</code>, all you need to do is loop over the permutations <em>as they are produced</em> and then write them to a file.</p>
<pre><code>for p in permutations(your_iterable):
    # your code to write p to a file here
</code></pre>
<p>Note that at no point there's a list involved in this code. <code>permutations(your_iterable)</code> is an iterator you can explicitly pull values out of with <code>next</code> or implicitly by employing a <code>for</code> loop.</p>
<blockquote>
<p>it is a very large amount of permutations and causes a memory error</p>
</blockquote>
<p>I am trying to tell you that <code>permutations(your_iterable)</code> can never produce a memory error in any non-artificially-contrived scenario if you don't explicitly make a list out of <code>permutations(your_iterable)</code> yourself. The iterator produces <em>one</em> permutation at a time which you can write to a file without ever holding all permutations in RAM.</p>
<blockquote>
<p>I am passing a list of length 110 to <code>itertools.permuations</code></p>
</blockquote>
<p>This is not a problem with the standard library or values in RAM.</p>
<p>Your code will produce </p>
<p>15882455415227429404253703127090772871724410234473563207581748318444567162948183030959960131517678520479243672638179990208521148623422266876757623911219200000000000000000000000000</p>
<p>permutations. There is no file system on the planet with enough storage space to write these permutations to.</p>
<p>Also, there's not enough time left until the heat death of the universe to compute all these permutations, even if you could compute one in a nanosecond.</p>
<pre><code>&gt;&gt;&gt; from math import factorial
&gt;&gt;&gt; factorial(110)/(10E9*3600*24*365)
&gt;&gt;&gt; 5.0362935740827724e+160 # years
</code></pre>
<blockquote>
<p>4 is the second parameter for permutations</p>
</blockquote>
<p>Ok, in that case your file would require around 1.7 GiB of space if you stored each permutation as a string of minimum length 13 akin to <code>'(0, 1, 2, 3)\n'</code> with one byte per character.</p>
<pre><code>&gt;&gt;&gt; perms = sum(1 for _ in permutations(list(range(110)), 4))
&gt;&gt;&gt; perms*13/(2**30)
&gt;&gt;&gt; 1.677529625594616
</code></pre>
<p>That's manageable - but it could require much more space if the objects in your list had longer string representations. We can't tell you why you get a memory error without seeing your code.</p>
</div>
<span class="comment-copy">Why not write the <i>result</i> of using the function to a file?</span>
<span class="comment-copy">Okay, cool. What's stopping you from doing that? Do you know how to open files? Do you know how to write to them? Please read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">@PatrickArtner That's not going to be the same if <code>r == 0</code>.</span>
<span class="comment-copy">the code is a <code>copy&amp;paste</code> from <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.permutations</a> ... what did you code?</span>
<span class="comment-copy">I don't know, but I think the Python devs did know what they were doing.</span>
<span class="comment-copy">I want to write them when they are produced not by looping.</span>
<span class="comment-copy">@JohnnyP. this code writes each permutation to a file as soon as it is produced. "Not by looping" makes no sense here, you have to have a loop somewhere if you want to do the same thing (writing) for multiple other things (permutations).</span>
<span class="comment-copy">@JohnnyP., it looks like this is an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>. Why are you preoccupied with whether there's a loop or not? What are you <i>actually</i> trying to accomplish?</span>
<span class="comment-copy">@JohnnyP., I'm going to say this one more time, then I'm going to leave. <b>You <i>must</i> show us <i>your</i> actual code.</b> "A list of length 110, 4" doesn't make any sense. Lists have one length, not two. Are you actually doing something with numpy arrays? We literally <i><b>cannot</b> help you</i> the way you're asking. The problem isn't in the standard library. Please read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>, then try again.</span>
<span class="comment-copy">@JohnnyP. "but how" &lt;- by producing values on the fly, not as lists. If you want to know how iterators are implemented, feel free to read the CPython source code.</span>
