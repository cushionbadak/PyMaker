<div class="post-text" itemprop="text">
<p>I'm a complete amateur, and trying to work out how to write a function that takes a list of objects, and returns a list of the names of said objects (based on whether they pass if statement). This is the class I've written from help of tutorials:</p>
<pre><code>class Student:  
passmark=50  

def __init__(self,name,mark):  
    self.name=name  
    self.mark=mark  

def passes(self):  
    return self.mark &gt; Student.passmark 
</code></pre>
<p>So from now I'm assuming I make a list of objects, say:  </p>
<pre><code>students = []  
</code></pre>
<p>Though this list is just a brand new list, which was necessary sure but how would I link it to the class? From this point I want to find out which students have failed, and return them and also where I am confused:  </p>
<pre><code>def failed(list):  
    for student in Students:  
        if passmark &gt; self.mark:  
            return list  
</code></pre>
<p>Is all I can muster, sorry I've just gotten to classes and calling classes is quite confusing for me. The above code doesn't reference the class at all, and I really am confused on how to do so. I've no syntax errors or anything, I think my logic is fatally flawed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension like this:</p>
<pre><code>def failed(list):
    return [student.name for student in students if not student.passes()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to take all the student from the students list. So use that in the for loop. Also, you correctly encapsulated the logic of pass/fail criteria in a method, so use that.</p>
<p>Here is the code I think will do want you want:</p>
<pre><code>def failed(list_of_students):
   failed_students = []
   for student in list_of_students:  
       if not student.passes():  
           failed_students.append(student.name)  
   return failed_students
</code></pre>
<p>A more advanced way of doing it is by using list comprehension:</p>
<pre><code>def failed(list_of_students):
    return [student for student in list_of_students if not student.passes()]
</code></pre>
<p>It is more pythonic, but my be harder to understand for a beginner with a C or Java background.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this code. Using list comprehension to return results. It's a very powerful python tool.</p>
<pre><code>class Student:  
    passmark = 50
    def __init__(self, name, mark):  
        self.name=name  
        self.mark=mark  

    def passes(self):  
        return self.mark &gt; Student.passmark 

    def __repr__(self):
        return '{} {}'.format(self.name, self.mark)


def failed(students_list):  
    return [student for student in students_list if student.mark &lt; Student.passmark]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given a <code>Student</code> class like you defined:</p>
<pre><code>class Student:  
    passmark=50  

    def __init__(self,name,mark):  
        self.name=name  
        self.mark=mark  

    def passes(self):  
        return self.mark &gt; Student.passmark 
</code></pre>
<p>You could instantiate a list of students with:</p>
<pre><code>students = [Student("John", 49), Student("Mary", 75)]
</code></pre>
<p>It looks like you are also trying to define a function that will return a list of all the failed students; you could do something like this:</p>
<pre><code>def failed(student_list):
    return [x for x in student_list if not x.passes()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mark_to_pass = 50

#Approach one
class Student:
    def __init__(self, student_name, student_mark):
        self.name = student_name
        self.mark = student_mark
        self.pass_mark = self.calculate_passing_mark(mark_to_pass)

    def calculate_passing_mark(self, mark_to_pass):
        if self.mark &gt;= mark_to_pass:
            return True
        return False

if __name__ == '__main__':
    example_student = Student("Swanson", 75)
    print(example_student.pass_mark)
</code></pre>
<p>With this approach every time a student object is created it will tell create a field telling you that student has passed. When working with lists such as a list of student objects you need to add the student to your list. Example</p>
<pre><code>students = []
students.append(example_student)
</code></pre>
<p>Now you can look through your student list by doing</p>
<pre><code>for student in students:
   print(student.pass_mark) # or do some other logic passed on who passed or failed. Or even here you dont need to create pass_mark object you can just check if student.mark &gt; pass_mark
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming that failed isn't a member function of the class Student. The below code should work for what you are trying to do.</p>
<pre><code>class Student:
    passmark=50
    def __init__(self,name,mark):
        self.name=name
        self.mark=mark  

    def passes(self):  
         return self.mark &gt; Student.passmark

students = [Student("tom",40),Student("joe",70)]

def failed(listofStudents):
    listofStudentsThatFail = []
    for student in listofStudents:
        if not student.passes():
            listofStudentsThatFail.append(student)
    return listofStudentsThatFail

for s in failed(students):
    print s.name
</code></pre>
<p>The ouput when you run the code is:
tom</p>
</div>
<span class="comment-copy">Have a look at Handras' answer. This is what you need to understand about lists. Comprehensions (which also exists for dictionaries and other things) are nothing but syntactic sugar over this <code>for</code>-<code>append</code> approach.</span>
<span class="comment-copy">This is just what I needed, though why are you using square brackets for return? Is it because of the use of list? Also this function shows those that passed, made use of 'if not' for failed students.</span>
<span class="comment-copy">Ah you're right that I should use <code>not</code> for students that do not pass instead. Edited then.. Square brackets are part of the syntax of <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</span>
<span class="comment-copy">Thank you! THIS is the right way to explain lists to newcomers. Comprehensions are for later. Except that you mustn't name a list <code>list</code>, of course ;)</span>
<span class="comment-copy">Indeed, that can cause problems, so I correct the answer!</span>
