<div class="post-text" itemprop="text">
<p>I have a nested list and would like to make a product of two items.</p>
<pre><code>test = [[('juice', 'NOUN'), ('orange', 'FLAVOR')], 
        [('juice', 'NOUN'), ('orange', 'FLAVOR'), ('lemon', 'FLAVOR')],
        [('orange', 'FLAVOR'), ('chip', 'NOUN')]]
</code></pre>
<p>What I expect is something like this:</p>
<pre><code>[(('juice', 'NOUN'), ('lemon', 'FLAVOR')), 
 (('juice', 'NOUN'), ('chip', 'NOUN')),
 (('orange', 'FLAVOR'), ('lemon', 'FLAVOR')),
 (('orange', 'FLAVOR'), ('chip', 'NOUN')),
 (('lemon', 'FLAVOR'), ('chip', 'NOUN'))]
</code></pre>
<p>That is to say, I would like to get the permutation across lists but only for unique items. I prefer to use <code>itertools</code>. Previously, I tried <code>list(itertools.product(*test))</code> But I realized it would produce the product of the length of a nested list... </p>
<p>My current code:</p>
<pre><code>unique_list = list(set(itertools.chain(*test)))
list(itertools.combinations(unique_list, 2))
</code></pre>
<p>My thought process is to get the unique items in the nested list first, so the nested list will be  <code>[[('juice', 'NOUN'), ('orange', 'FLAVOR')], [('lemon', 'FLAVOR')], [('chip', 'NOUN')]]</code> and then use the <code>itertools.combinations</code> to permute. Yet, it will permute within the list (i.e. juice and orange appear together), which I do not want in my results.</p>
</div>
<div class="post-text" itemprop="text">
<p>This does what you want <strong>without</strong> fixing the size of the original list to 3:</p>
<p>Input:</p>
<pre><code>test = [[('juice', 'NOUN'), ('orange', 'FLAVOR')], 
        [('juice', 'NOUN'), ('orange', 'FLAVOR'), ('lemon', 'FLAVOR')],
        [('juice', 'NOUN'), ('chip', 'NOUN')]]
</code></pre>
<p>First, reformat input to remove duplicates (see note 1):</p>
<pre><code>test = [[x for x in sublist if x not in sum(test[:i], [])] for i, sublist in enumerate(test)]
</code></pre>
<p>Finally, get the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">product</a> of the <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a>.</p>
<pre><code>from itertools import combinations, product

for c in combinations(test, 2):
    for x in product(*c):
        print(x)
</code></pre>
<p>which produces:</p>
<pre><code>(('juice', 'NOUN'), ('lemon', 'FLAVOR'))
(('orange', 'FLAVOR'), ('lemon', 'FLAVOR'))
(('juice', 'NOUN'), ('chip', 'NOUN'))
(('orange', 'FLAVOR'), ('chip', 'NOUN'))
(('lemon', 'FLAVOR'), ('chip', 'NOUN'))
</code></pre>
<hr/>
<ol>
<li>removes inner tuples if they were seen in any of the previous sublists. The magic here is done by the <code>sum(test[:i], [])</code> which "adds" all the previous sublists together to perform one membership check only.</li>
</ol>
<hr/>
<p>There is also a list-comprehension version of the above for compactness and style-points:</p>
<pre><code>res = [x for c in combinations(test, 2) for x in product(*c)]
</code></pre>
</div>
<span class="comment-copy">why do you not have <code>(('lemon', 'FLAVOR'), ('chip', 'NOUN'))</code> in your results?</span>
<span class="comment-copy">@Ev. Kounis oh! Thanks for pointing out! I want that in my results. I just edited my question</span>
<span class="comment-copy">Have you tried anything so far? Any code you could show?</span>
<span class="comment-copy">is the length of the original list fixed?</span>
<span class="comment-copy">I don't understand why <code>(('juice', 'NOUN'), ('orange', 'FLAVOR'))</code> isn't part of the expected output. It (and its reverse) can be made a whole bunch of ways from your three input lists.</span>
<span class="comment-copy">I tested all the solutions you suggested and they worked like magic! Thanks</span>
<span class="comment-copy">@Abbey Cheers! it was an interesting problem.</span>
