<div class="post-text" itemprop="text">
<p>I want to create an <em>IntEnum</em> subclass called <em>MqHandShakeE</em> in <strong>C</strong> using  <strong>Tcl-C-Code</strong> from the example as template</p>
<pre><code>int NS(Get_MqHandShakeE_FromObj) (Tcl_Interp *interp, Tcl_Obj *enumE, enum MqHandShakeE *ret) {
  int index;
  const static struct LookupEnumE keys[] = {
    { "START",                MQ_HANDSHAKE_START   },
    { "OK",                   MQ_HANDSHAKE_OK      },
    { "ERROR",                MQ_HANDSHAKE_ERROR   },
    { NULL,                   0                    }
  };
  TclErrorCheck (Tcl_GetIndexFromObjStruct (interp, enumE, &amp;keys,
      sizeof(struct LookupClassS), "enum", TCL_EXACT, &amp;index));
  *ret = keys[index].val;
  return TCL_OK;
}
</code></pre>
<p>my Goal is to call a python function with…</p>
<pre><code>myfunc … MqHandShakeE.OK …
</code></pre>
<p>the C-constant <code>MQ_HANDSHAKE_START</code> is an <strong>INTEGER</strong> </p>
<p>Python only solution:</p>
<pre><code>from enum import IntEnum
class WAIT(IntEnum):
  NO  = 0
  ONCE = 1
  FOREVER = 2
</code></pre>
<p>this is type-safe because <code>WAIT.NO</code> has type <code>WAIT</code> and value <code>0</code>… this i can check… the sub-module approach from down is <strong>not</strong> type-safe… the <code>WAIT.NO</code> as sub-module has type <code>int</code></p>
</div>
<div class="post-text" itemprop="text">
<p>After I had published a sample for C++, I realized that OP had tagged the question with C (not C++). Sorry, my fault. Here a sample in C:</p>
<pre><code>#include &lt;Python.h&gt;

#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;

/* sample enum in C */
enum MQ_HANDSHAKE {
  MQ_HANDSHAKE_START,
  MQ_HANDSHAKE_OK,
  MQ_HANDSHAKE_ERROR
};

/* make Python binding for MQ_HANDSHAKE */

static struct PyModuleDef moduleMQ_HANDSHAKE = {
  PyModuleDef_HEAD_INIT,
  "MQ_HANDSHAKE", /* name of module */
  NULL,           /* module documentation, may be NULL */
  -1,             /* size of per-interpreter state of the module,
                   * or -1 if the module keeps state in global variables.
                   */
  NULL            /* function table (no functions) */
};

static PyObject* initModuleMQ_HANDSHAKE(void)
{
  static PyObject *pSelf = NULL;
  if (!pSelf) {
    pSelf = PyModule_Create(&amp;moduleMQ_HANDSHAKE);
    PyModule_AddObject(pSelf, "START", PyLong_FromLong(MQ_HANDSHAKE_START));
    PyModule_AddObject(pSelf, "OK", PyLong_FromLong(MQ_HANDSHAKE_OK));
    PyModule_AddObject(pSelf, "ERROR", PyLong_FromLong(MQ_HANDSHAKE_ERROR));
  }
  return pSelf;
}

/* adds module MQ_HANDSHAKE to Python modules table.
 */
void appendModuleMQ_HANDSHAKE(void)
{
  assert(!Py_IsInitialized());
  PyImport_AppendInittab("MQ_HANDSHAKE", &amp;initModuleMQ_HANDSHAKE);
}

/* test program */
int main()
{
  /* initialize Python extension MQ_HANDSHAKE */
  appendModuleMQ_HANDSHAKE();
  /* initialize Python interpreter */
  Py_Initialize();
  /* sample Python program */
  static const char *const pyProgram
    = "print(\"Hello world (from Python).\")\n"
      "\n"
      "# import Python extension MQ_HANDSHAKE\n"
      "import MQ_HANDSHAKE\n"
      "\n"
      "# test whether it works\n"
      "def printHandshake(value):\n"
      "  if value == MQ_HANDSHAKE.START:\n"
      "    print(\"MQ_HANDSHAKE_START\")\n"
      "  elif value == MQ_HANDSHAKE.OK:\n"
      "    print(\"MQ_HANDSHAKE_OK\")\n"
      "  elif value == MQ_HANDSHAKE.ERROR:\n"
      "    print(\"MQ_HANDSHAKE_ERROR\")\n"
      "  else:\n"
      "    print(\"Illegal MQ_HANDSHAKE value!\")\n"
      "\n"
      "printHandshake(MQ_HANDSHAKE.START)\n"
      "printHandshake(MQ_HANDSHAKE.OK)\n"
      "printHandshake(MQ_HANDSHAKE.ERROR)\n"
      "printHandshake(0)\n"
      "printHandshake(1)\n"
      "printHandshake(2)\n"
      "printHandshake(42)\n";
  /* run Python interpreter */
  const int ret = PyRun_SimpleString(pyProgram);
  if (ret) {
    fprintf(stderr, "Execution in PyRun_SimpleString() failed!\n");
  }
  /* done */
  return ret;
}
</code></pre>
<p>Compiled and tested in VS2013 with Python 3.6:</p>
<pre class="lang-none prettyprint-override"><code>Hello world (from Python).
MQ_HANDSHAKE_START
MQ_HANDSHAKE_OK
MQ_HANDSHAKE_ERROR
MQ_HANDSHAKE_START
MQ_HANDSHAKE_OK
MQ_HANDSHAKE_ERROR
Illegal MQ_HANDSHAKE value!
</code></pre>
<p>This sample establishs a module <code>MQ_HANDSHAKE</code> which
- has to be appended to the Python tables (using <code>PyImport_AppendInittab()</code>)
  before <code>PyInitialize()</code> has been called
- has to be imported in the Python code (using <code>import MQ_HANDSHAKE</code>).</p>
<hr/>
<p>The original answer with code in C++:</p>
<p>I took a look at our Python wrappers and made a little sample for OPs case:</p>
<pre><code>#include &lt;Python.h&gt;

#include &lt;cassert&gt;
#include &lt;iostream&gt;

// sample enum in C/C++
enum MQ_HANDSHAKE {
  MQ_HANDSHAKE_START,
  MQ_HANDSHAKE_OK,
  MQ_HANDSHAKE_ERROR
};

namespace Py {

namespace MQ {

// make Python binding for MQ_HANDSHAKE

namespace HANDSHAKE {

static struct PyModuleDef module = {
  PyModuleDef_HEAD_INIT,
  "mq.Handshake", // name of module
  nullptr,        // module documentation, may be NULL
  -1,             /* size of per-interpreter state of the module,
                   * or -1 if the module keeps state in global variables.
                   */
  nullptr         // function table (no functions)
};

static PyObject* init()
{
  static PyObject *pSelf = nullptr;
  if (!pSelf) {
    pSelf = PyModule_Create(&amp;module);
    PyModule_AddObject(pSelf, "START", PyLong_FromLong(MQ_HANDSHAKE_START));
    PyModule_AddObject(pSelf, "OK", PyLong_FromLong(MQ_HANDSHAKE_OK));
    PyModule_AddObject(pSelf, "ERROR", PyLong_FromLong(MQ_HANDSHAKE_ERROR));
  }
  return pSelf;
}

} // namespace HANDSHAKE

// make module MQ

static struct PyModuleDef module = {
  PyModuleDef_HEAD_INIT,
  "mq",     // name of module
  nullptr,  // module documentation, may be NULL
  -1,       /* size of per-interpreter state of the module,
             * or -1 if the module keeps state in global variables.
             */
  nullptr   // function table (no functions)
};

// initializes module mq
static PyObject* init()
{
  static PyObject *pSelf = nullptr;
  if (!pSelf) {
    pSelf = PyModule_Create(&amp;module);
    PyModule_AddObject(pSelf, "Handshake", HANDSHAKE::init());

  }
  return pSelf;
}

// adds module mq to Python modules table.
void append()
{
  assert(!Py_IsInitialized());
  PyImport_AppendInittab("mq", &amp;init);
}

} // namespace MQ

} // namespace Py

// test program
int main()
{
  // initialize Python extension mq
  Py::MQ::append();
  // initialize Python interpreter
  Py_Initialize();
  // sample Python program
  static const char *const pyProgram
    = "print(\"Hello world (from Python).\")\n"
      "\n"
      "# import Python extension mq\n"
      "import mq\n"
      "\n"
      "# test whether it works\n"
      "def printHandshake(value):\n"
      "  if value == mq.Handshake.START:\n"
      "    print(\"MQ_HANDSHAKE_START\")\n"
      "  elif value == mq.Handshake.OK:\n"
      "    print(\"MQ_HANDSHAKE_OK\")\n"
      "  elif value == mq.Handshake.ERROR:\n"
      "    print(\"MQ_HANDSHAKE_ERROR\")\n"
      "  else:\n"
      "    print(\"Illegal MQ_HANDSHAKE value!\")\n"
      "\n"
      "printHandshake(mq.Handshake.START)\n"
      "printHandshake(mq.Handshake.OK)\n"
      "printHandshake(mq.Handshake.ERROR)\n"
      "printHandshake(0)\n"
      "printHandshake(1)\n"
      "printHandshake(2)\n"
      "printHandshake(42)\n";
  // run Python interpreter
  const int ret = PyRun_SimpleString(pyProgram);
  if (ret) {
    std::cerr &lt;&lt; "Execution in PyRun_SimpleString() failed!\n";
  }
  // done
  return ret;
}
</code></pre>
<p>Compiled and tested in VS2013 with Python 3.6:</p>
<pre class="lang-none prettyprint-override"><code>Hello world (from Python).
MQ_HANDSHAKE_START
MQ_HANDSHAKE_OK
MQ_HANDSHAKE_ERROR
MQ_HANDSHAKE_START
MQ_HANDSHAKE_OK
MQ_HANDSHAKE_ERROR
Illegal MQ_HANDSHAKE value!
</code></pre>
<p>I must admit that I resembled this sample by cheating in our production code which we once did patiently while digging through the online resources. For a basic introduction, I recommend <a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">1. Embedding Python in Another Application</a>.</p>
<p>The root module has to be imported in the Python code before it can be used (<code>import mq</code> in the Python sample code). In our productive code, we did it in a separate preceding call of <code>PyRun_SimpleString()</code>, so that our Python application programmers even don't need to care about this.</p>
<p>I splitted the implementation into multiple modules (<code>mq</code> and <code>mq.Handshake</code>). This surely could be done even shorter by establishing a module <code>mqHandshake</code> with the module variables <code>START</code>, <code>OK</code>, and <code>ERROR</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>this is my answer… to create a <strong>type-safe</strong> <em>IntEnum</em> class in python-C-api.</p>
<p>→  <a href="https://stackoverflow.com/questions/53429829/python-c-api-how-to-write-python-code-in-c/53437252#53437252">Python C-API… how to write python code in C</a></p>
</div>
<span class="comment-copy">When I write Python wrappers for our C++ code, concerning <code>enum</code>s, I make a (sub-)module for each <code>enum</code> and then add <code>int</code> variables for the resp. enumerators. (Something like <code>enum</code> seems not to exist in Python.) May be, it would be possible to sub-class one of the built-in Python integer types but the module/variable trick does properly in our case. Hence, I never tried the sub-classing.</span>
<span class="comment-copy">I test <b>submodul</b> approach… the problem is… it is <b>NOT</b> typesafe</span>
<span class="comment-copy">@AndreasOtto I overlooked the C tag. However, it looks quite similar in C. I extended the answer with a C sample (implementing the mentioned alternative with only one module).</span>
<span class="comment-copy">Hi, I tested this… using &gt; <code>PyModule_AddIntConstant(pSelf, "START", MQ_HANDSHAKE_START)</code> the problem is… the module <code>const</code> has type <code>int</code> this is no improvement adding regular toplevel &gt; <code>PyModule_AddIntConstant(pSelf, "HANDSHAKE_START)",MQ_HANDSHAKE_START)</code></span>
