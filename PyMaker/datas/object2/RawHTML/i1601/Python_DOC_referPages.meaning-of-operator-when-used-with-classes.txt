<div class="post-text" itemprop="text">
<p>I've been trying to follow a video tutorial on Python and cannot understand one operation the developer performs.</p>
<pre><code>class Polynomial():

    def __init__(self, *coeffs):
        self.coeffs = coeffs # (3,4,3)

    def __repr__(self):
        return 'Polynomial(*{!r})'.format(self.coeffs)

    def __add__(self, other):
        print(self.coeffs)
        print(other.coeffs)
        z = (x + y for x, y in zip(self.coeffs, other.coeffs))
        print(z)
        return Polynomial(*(x + y for x, y in zip(self.coeffs, other.coeffs)))

p1 = Polynomial(1, 2, 3) # x^2 + 2x + 3
p2 = Polynomial(3, 4, 3) # 3x^2 + 4x + 3
#print(p2) # Polynomial(*(3, 4, 3))
print(p1 + p2) # Polynomial(*(4, 6, 6))
</code></pre>
<p>The above example will print </p>
<pre><code>&lt;generator object Polynomial.__add__.&lt;locals&gt;.&lt;genexpr&gt; at 0x030D0390&gt;
</code></pre>
<p>as the return value of z, I cannot understand why because I am performing a zip operation of two tuples?</p>
<p>Alongside that problem, I do not understand why removing the <code>*</code> during the return of <code>__add__</code> causes a problem i.e <code>return Polynomial(*(x + y for x, y in zip(self.coeffs, other.coeffs)))</code> to <code>return Polynomial((x + y for x, y in zip(self.coeffs, other.coeffs)))</code></p>
<p><strong>What is the * operator doing, and why is z an object of Polynomial?</strong></p>
<p>The <code>_add__</code> method does not contain a parameter containing a <code>*</code> or <code>**</code> and is therefore a different situation.</p>
</div>
<div class="post-text" itemprop="text">
<p>So first.</p>
<p>Your print is ok. You defined a generator using () parentheses. You can change this to [] and then you should see the elements in list.</p>
<p>Or you can use your generator, so print:</p>
<pre><code>print([el for el in z])
</code></pre>
<p>Second, the *.</p>
<p>It will simply pass iterable as separated args, so:</p>
<pre><code>SomeClass(*args)
</code></pre>
<p>Will do:</p>
<pre><code>SomeClass(args[0], args[1], args[2], ...)
</code></pre>
<p>You can read about this in official docs (single asterisk), here: <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#expression-lists</a>
And here (double asterisk): 
<a href="https://docs.python.org/3/reference/expressions.html#dictionary-displays" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#dictionary-displays</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>When in a function declaration, * is list of args send.</strong></p>
<p>For exemple:</p>
<pre><code>def my_function(a, *b, **c):
    print(a)
    print(b)
    print(c)

my_function("1st arg", "other arg", "other arg again", 2, arg_type="kwargs")
</code></pre>
<p>output :</p>
<pre><code>1st args
["other arg", "other arg again", 2]
{"arg_type": "kwargs"}
</code></pre>
<p><br/>
<strong>And when is not in function declaration, it's for unpack the list.</strong></p>
<p>For exemple:</p>
<pre><code>list_of_arguments = ['a', 'b', 'z']
my_str = "the first letter of alphabet is {}, the second is {} and the last is {}"
print(my_str.format(*list_of_arguments))
</code></pre>
<p><br/></p>
<p>or other exemple</p>
<pre><code> def my_second_func(a, b, c):
     print(a)
     print(b)

 my_list = [1, 2, 3]
 my_second_func(a, b, c)
</code></pre>
<p>will output:</p>
<pre><code> 1
 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider this easy example:</p>
<pre><code>a = [1, 2, 3]
b = [4, 5, 6]

gen = (x + y for x, y in zip(a, b))

print(gen) ## this will print &lt;generator object &lt;genexpr&gt; at 0x...&gt;
</code></pre>
<p>In this case, the asterisk evaluates the generator expression. So when doing</p>
<pre><code>print(*gen) ## this will print 5 7 9
</code></pre>
<p>you evaluate the generator expression.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters">What does ** (double star/asterisk) and * (star/asterisk) do for parameters?</a></span>
<span class="comment-copy">or just print(list(z)). As to second question - you print the result of p1+p2 - i.e. print(p1 + p2). The <b>add</b> method returns Polynominal object, so when you print it and because you don't have <b>str</b> method, it calls the <b>repr</b> method of Polynominal class</span>
<span class="comment-copy">but <b>add</b> does not have a parameter with a *</span>
<span class="comment-copy">i edited my post, in your code <code>*</code> is used for unpack the list returned by the zip() function</span>
