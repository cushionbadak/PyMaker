<div class="post-text" itemprop="text">
<p>As a beginner in python,Im still trying to grasp the concept of dictionary count/loops better. So i've created a sample data to get my question across clearly. Below i have an unordered list of dictionaries containing the revenue information of a few shops. My question is, how do i get the average revenue of each shop - based on the count of reported revenue, reported by these shops?</p>
<pre><code>     #Given data 
     revenue_list_of_dictionaries:
     [{'shop_ID': 1,
       'revenue': 15000},
      {'shop_ID': 2,
       'revenue': 12000},
      {'shop_ID': 1,
       'revenue': 8500},
      {'shop_ID': 3,
       'revenue': 5000}
      {'shop_ID': 1,
       'revenue': 3500}]

     data = revenue_list_of_dictionaries

     result = {}

     # Executing code to find total revenue for each shop ID
     for revenue_list in data:
         shop_ID = revenue_list['shop_ID']
         revenue_per_month = revenue_list['revenue']
         if shop_ID not in result:
             result[shop_ID] = revenue_per_month
         else:
             result[shop_ID] += revenue_per_month
</code></pre>
<p>Running the code above will give me:</p>
<pre><code>         {'1':27000,
          '2':12000,
          '3':5000}
</code></pre>
<p>Based on each shop reporting count:</p>
<pre><code>         {'1':3,
          '2':1,
          '3':1}
</code></pre>
<p>How do i find the average of each revenue reported so that my output will return the following:</p>
<pre><code>         {'1': 9000,
          '2': 12000,
          '3': 5000}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the total revenue is called <code>a</code> and the count <code>b</code> and they both have the same keys (which they have to), you can use a dict comprehension to calculate the average revenue <code>c</code>:</p>
<pre><code>c = {key: value/b[key] for key, value in a.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to manipulate your current approach to work, then <a href="https://stackoverflow.com/questions/53376997/iterating-a-dictionary-key-value-and-averaging-with-known-count/53377102#53377102">user8408080</a>'s approach will work just fine.</p>
<p>Otherwise, as mentioned in the comments by <a href="https://stackoverflow.com/questions/53376997/iterating-a-dictionary-key-value-and-averaging-with-known-count/53377102#comment93629647_53376997">@Chris_Rands</a>, you can collect the revenues with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a>, storing them as lists, then calculate the mean at the end:</p>
<pre><code>from collections import defaultdict
from statistics import mean

revenues = [
    {"shop_ID": 1, "revenue": 15000},
    {"shop_ID": 2, "revenue": 12000},
    {"shop_ID": 1, "revenue": 8500},
    {"shop_ID": 3, "revenue": 5000},
    {"shop_ID": 1, "revenue": 3500},
]

counts = defaultdict(list)
for revenue in revenues:
    counts[revenue['shop_ID']].append(revenue['revenue'])

print({k: mean(v) for k, v in counts.items()})
# {1: 9000, 2: 12000, 3: 5000}
</code></pre>
<p>You could also have a <code>collections.defaultdict()</code> of <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a>, and store the revenues and counts simultaneously:</p>
<pre><code>from collections import defaultdict
from collections import Counter

revenues = [
    {"shop_ID": 1, "revenue": 15000},
    {"shop_ID": 2, "revenue": 12000},
    {"shop_ID": 1, "revenue": 8500},
    {"shop_ID": 3, "revenue": 5000},
    {"shop_ID": 1, "revenue": 3500},
]

counts = defaultdict(Counter)
for revenue in revenues:
    shp, rev = revenue['shop_ID'], revenue['revenue']
    counts[shp]['revenue'] += rev
    counts[shp]['count'] += 1

print({k: v['revenue'] / v['count'] for k, v in counts.items()})
# {1: 9000.0, 2: 12000.0, 3: 5000.0}
</code></pre>
<p><strong>Note:</strong> In the first example I used <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistic.median()</code></a> to calculate the mean. You can also use <code>sum(v) / len(v)</code> if you want to. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it without python packages, as follows:</p>
<pre><code>result = {}
CountList = []

for dic in revenue_list_of_dictionaries:
    result.setdefault(dic.values()[0], 0)
    result[dic.values()[0]] += dic.values()[1]
    CountList.append(dic.values()[0])

#returning an average of all shop_Id revenues
for k, value in result.items():
    result[k] = value/CountList.count(k)

print result
#{1: 9000, 2: 12000, 3: 5000}
</code></pre>
</div>
<span class="comment-copy">create a dictionary with key as shop id but value as list of revenues, then calculate the average at the end. the idiomatic way for this is via <code>collections.defaultdict(list)</code></span>
<span class="comment-copy">Ich you want to overengineer it, you could use a <code>Counter</code> to count the amout of shops and then just compute the average..</span>
<span class="comment-copy">Disclaimer: I'm on mobile rn and can't test, but this should be the solution in pure Python</span>
<span class="comment-copy">This will work fine if the OP wants to ammend his/her current approach.</span>
