<div class="post-text" itemprop="text">
<p>I'm reading CSV file and need to make tuples but I need to get rid the quotations. CSV lines examples:</p>
<pre><code>57, 47, 1.04
1288, 317, 1.106
149, 84, 1.05
</code></pre>
<p>I tried this</p>
<pre><code>import csv
from pprint import pprint

with open('./Documents/1.csv', encoding='utf-8-sig') as file:
   reader = csv.reader(file, skipinitialspace=True)
   x = list(map(tuple, reader))
</code></pre>
<p>and the results are:</p>
<pre><code>[('57', '47', '1.04'),
 ('1288', '317', '1.106'),
 ('149', '84', '1.05')]
</code></pre>
<p>and I need it to be</p>
<pre><code>[(57, 47, 1.04183),
 (1288, 317, 1.106),
 (149, 84, 1.05)]
</code></pre>
<p>Found similar question <a href="https://stackoverflow.com/questions/27810829/tuple-and-csv-reader-in-python">here</a> but can't figure out the answer yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>This needs to add an extra processing, converting with type casting: </p>
<pre><code>reader = csv.reader(file, skipinitialspace=True)
# if the file has a header
# header = next(reader)
rows = [[float(row[0]), float(row[1]), float(row[2])] for row in reader]
print rows
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a> to convert the numbers inside the tuples to their respective types:</p>
<pre><code>import csv
from ast import literal_eval
from pprint import pprint

with open('1.csv', encoding='utf-8-sig') as file:
   reader = csv.reader(file, skipinitialspace=True)
   x = [tuple(map(literal_eval, x)) for x in map(tuple, reader)]
   print(x)
   # [(57, 47, 1.04), (1288, 317, 1.106), (149, 84, 1.05)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def num(s):
        try:
            return int(s)
        except ValueError:
            return float(s)


with open('1.csv', encoding='utf-8-sig') as file:
   reader = csv.reader(file, skipinitialspace=True)
   output = [tuple(map(num, x)) for x in map(tuple, reader)]
   print(output)
</code></pre>
<p>output:</p>
<pre><code>[(57, 47, 1.04), (1288, 317, 1.106), (149, 84, 1.05)]
</code></pre>
</div>
<span class="comment-copy">You want to convert a string to a float.</span>
<span class="comment-copy">Your problem here is that the numbers are read as strings instead of floats. If your file only contains numbers, consider using numpy.genfromtxt(). Otherwise, pandas.read_csv() is able to handle multiple variable types in one data frame.</span>
