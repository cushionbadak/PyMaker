<div class="post-text" itemprop="text">
<p>I have text file called <code>test.txt</code>. From <code>test.txt</code>, I want to grab the lines that start with <code>&gt;lcl</code> then to extract values after <code>locus</code> tag and within close bracket<code>]</code>. I want to do the same thing for values after <code>location</code>. The result I want is shown below. How can I do this in python?</p>
<p><strong>desired result</strong></p>
<pre><code>SS1G_08319  &lt;504653..&gt;506706
SS1G_12233  complement(&lt;502136..&gt;503461)
SS1G_02099  &lt;2692251..&gt;2693298
SS1G_05227  complement(&lt;1032740..&gt;1033620)
</code></pre>
<p><strong>test.txt</strong></p>
<pre><code>&gt;lcl|NW_001820825.1_gene_208 [locus_tag=SS1G_08319] [db_xref=GeneID:5486863] [partial=5',3'] [location=&lt;504653..&gt;506706] [gbkey=Gene]
ATGGGCAAAGCTTCTAGGAATAAGACGAAGCATCGCGCTGATCCTACCGCAAAAACTGTTAAGCCACCCA
CTGACCCAGAGCTTGCAGCAATTCGAGTTAACAAAATTCTGCCAATTCTCCAAGATTTACAAAGTGCAGA
CCAGTCAAAGAGATCAACTGCTGCAACTGCCATTGCGAACCTCGTTGACGATACAAAATGTCGAAAGTTA
TTCTTGAGAGAGCAAATTGTTCGTATTCTACTCGAACAAACCCTTACAGACTCAAGCATGGAAACTAGAA
&gt;lcl|NW_001820817.1_gene_205 [locus_tag=SS1G_12233] [db_xref=GeneID:5483157] [partial=5',3'] [location=complement(&lt;502136..&gt;503461)] [gbkey=Gene]
ATGATCTGTAATACGCTCGGTGTTCCACCCTGCAACAGAATTCTTAAGAAATTCTCCGTTGGCGAGAGTC
GTCTCGAAATTCAAGACTCAGTACGAGGCAAAGATGTCTACATCATTCAATCGGGTGGAGGAAAGGCCAA
TGATCACTTCGTGGATCTTTGCATTATGATCTCCGCATGCAAAACTGGCTCTGCCAAGCGCGTCACTGTC
GTCCTTCCTTTGTTTCCTTATTCACGACAACCTGATCTGCCATACAACAAGATTGGCGCACCACTTGCCA
&gt;lcl|NW_001820834.1_gene_1034 [locus_tag=SS1G_02099] [db_xref=GeneID:5493612] [partial=5',3'] [location=&lt;2692251..&gt;2693298] [gbkey=Gene]
ATGGCTTCTGTTTACAAGTCATTATCAAAGACCTCTGGTCATAAAGAAGAAACCCCGACTGGTGTCAAGA
AAAACAAGCAAAGAGTTTTGATCTTGTCTTCAAGAGGAATAACTTACAGGTATATAAATTTGTACCGATG
CGATGCAAAAAATCGCAGGAAAATGCTAACTCTACAACTTAGACATCGACATCTCCTCAATGACCTTGCG
TCCCTACTTCCCCACGGTAGGAAAGATGCGAAACTCGATACCAAGTCAAAGCTTTATCAATTGAATGAAT
&gt;lcl|NW_001820830.1_gene_400 [locus_tag=SS1G_05227] [db_xref=GeneID:5489764] [partial=5',3'] [location=complement(&lt;1032740..&gt;1033620)] [gbkey=Gene]
ATGGCGGACGGATGTAAGTTAATTGATGTTCCTACTATTCCAGACTAATATTTGTTCTCGTCCCTACAAT
GCATTCGGAACGGATGGTACTCAGTTAACTTTGTAACTAATACAACGTCTAGTAAATGACCAAAGAACTG
</code></pre>
<p>I am new in python so I tried to come up with something like this:</p>
<pre><code>results = []
f = open("test.txt", 'r')

while True:
    line = f.readline()
    if not line:
        break
    file_name = line.split("locus_tag")[-1].strip()
    f.readline()  # skip line 
    data_seq1 = f.readline().strip()
    f.readline()  
    data_seq2 = f.readline().strip()
    results.append((file_name, data_seq1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think, the most trival way to solve your issue is by using <code>regex</code> like this example:</p>
<pre><code>import re

results = []
# Open the file in the 'read' mode
# with statement will take care to close the file
with open('YOUR_FILE_PATH', 'r') as f_file:
    # Read the entire file as a one string
    data = f_file.read()
    # Here we search for the string that begins with '&gt;lcl'
    # and in which we find the [locus_tag=...] and [localtion=...]
    results = re.findall(r'&gt;lcl.*\[locus_tag=(.*?)\].*\[location=(.*?)\]', data)

for locus, location in results:
    print(locus, location)
</code></pre>
<p>Output:</p>
<pre><code>SS1G_08319 &lt;504653..&gt;506706
SS1G_12233 complement(&lt;502136..&gt;503461)
SS1G_02099 &lt;2692251..&gt;2693298
SS1G_05227 complement(&lt;1032740..&gt;1033620)
</code></pre>
<p>Another variation using a <code>dict</code> as a result and by splitting lines:</p>
<pre><code>import re

results = {}
with open('fichier1', 'r') as f_file:
    # Here we split the file's lines into a list
    data = f_file.readlines()
    for line in data:
        # Here we search for the lines that begins by '&gt;lcl'
        # and same as the first attempt
        results.update(re.findall(r'^&gt;lcl.*\[locus_tag=(.*?)\].*\[location=(.*?)\]', line))

for locus, location in results.items():
    print(locus, location)
</code></pre>
<p>Edit: Creating a <code>DataFrame</code> and exporting it into a <code>csv</code> file:</p>
<pre><code>import re
from pandas import DataFrame as df

results = {}
with open('fichier1', 'r') as f_file:
    data = f_file.readlines()
    for line in data:
        results.update(re.findall(
            r'^&gt;lcl.*\[locus_tag=(.*?)\].*\[location=(.*?)\]',
            line
        ))

df_ = df(
    list(results.items()),
    index=range(1, len(results) + 1),
    columns=['locus', 'location']
)
print(df_)
df_.to_csv('results.csv', sep=',')
</code></pre>
<p>It will prints and creates a file called <code>results.csv</code>:</p>
<pre><code>        locus                        location
1  SS1G_12233    complement(&lt;502136..&gt;503461)
2  SS1G_08319                &lt;504653..&gt;506706
3  SS1G_05227  complement(&lt;1032740..&gt;1033620)
4  SS1G_02099              &lt;2692251..&gt;2693298
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would like to present two alternative solutions. One that will extract any set of named tags on your line using regular expressions, and another which is a complete travesty but shows a way to do it without regular expressions.</p>
<p><strong>Generic Regex Solution</strong></p>
<pre><code>import re

def get_tags(filename, tags, prefix='&gt;lcl'):
    tags = set(tags)
    pattern = re.compile(r'\[(.+?)=(.+?)\]')

    def parse_line(line):
        return {m.group(1): m.group(2) for m in pattern.finditer(line) if m.group(1) in tags}

    with open(filename) as f:
        return [parse_line(line) for line in f if prefix is None or line.startswith(prefix)]
</code></pre>
<p>This function returns a list of dictionaries keyed by the tags you are interested in you would use it like this:</p>
<pre><code>tags = ['locus_tag', 'location']
result = get_tags('test.txt', tags)
</code></pre>
<p>You could use the result to get the exact printout you want:</p>
<pre><code>for line in get_tags('test.txt', tags):
    print(*(line[tag] for tag in tags))
</code></pre>
<p>This has the advantage that you can use the results as you chose later, and configure which tags you extract.</p>
<p><strong>No Regex Solution</strong></p>
<p>This version is just something I wrote to show that is possible. Please do not emulate it, as the code is a pointless maintenance burden.</p>
<pre><code>def get_tags2(filename, tags, prefix='&gt;lcl'):
    tags = set(tags)

    def parse_line(line):
        items = [tag.split(']')[0].split('=') for tag in line.split('[')[1:]]
        return dict(tag for tag in items if tag[0] in tags)

    with open(filename) as f:
        return [parse_line(line) for line in data if prefix is None or line.startswith(prefix)]
</code></pre>
<p>This function behaves just like the first one but the parsing function is a hot mess by comparison. It's also much less robust, e.g. because it's assumed that all your square brackets are more or less matching.</p>
<p>Here is an IDEOne link showing off both methods: <a href="https://ideone.com/X2LKqL" rel="nofollow noreferrer">https://ideone.com/X2LKqL</a></p>
</div>
<span class="comment-copy">You forgot to ask a question. What have you tried?</span>
<span class="comment-copy">@LieRyan Please see my edits.</span>
<span class="comment-copy">Can't argue with those results.</span>
<span class="comment-copy">@MAPK. Python has a really good regex tutorial as part of the official docs: <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">docs.python.org/3/howto/regex.html</a>. You will find that this answer I'd quite simple after reading through it.</span>
<span class="comment-copy">@MadPhysicist Thanks for your comment. Can you explain me why you don't argue with the results ?</span>
<span class="comment-copy">@MAPK See my last edit.</span>
<span class="comment-copy">No shame whatsoever, I assure you. You're doing great as it is, and I'm happy to have introduced you to a new expression. I am guessing that French and Python ate the first two languages :)</span>
