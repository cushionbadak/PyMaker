<div class="post-text" itemprop="text">
<p>Hello guys is there any differences between print my output in "try" clause or putting it after "except" clause with "else:"?
here is the code:</p>
<pre><code>try:
    Value1 = int(input("Type the first number: "))
    Value2 = int(input("Type the second number: "))
    Output = Value1 / Value2
except ZeroDivisionError:
    print("Attempted to divide by zero!")
else:
    print(Output)
</code></pre>
<p>or this?</p>
<pre><code>try:
    Value1 = int(input("Type the first number: "))
    Value2 = int(input("Type the second number: "))
    Output = Value1 / Value2
    print(Output)
except ZeroDivisionError:
    print("Attempted to divide by zero!")
</code></pre>
<p>I mean which one is better? because the result is same.
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like you already know we are talking about error handling when we are using <code>try...except</code>.<br/>
When an error is generated by an operation (or other statements) Python will stop the try block execution and is passed down to the first <em>except block</em> that matches the raised exception.
In case there isn't an except clause that matches our exception, it is passed on the outer try statement. This until it's handled or no handler is found, the raised exception becomes an <strong><em>unhandled exception</em></strong> and execution stops with a message of the error traceback.  </p>
<p>In addition to except block we can use a <em>finally block</em>, that will be executed regardless of whether an exception occurs, and else block. The last one is useful for code that must be executed if the try clause does not raise an exception.</p>
<h3>Your examples</h3>
<p>How you said this two pieces of code gives the same result. However, with we read on <a href="https://docs.python.org/3.5/tutorial/errors.html" rel="nofollow noreferrer">documentation</a> page of Python we have this affirmation: </p>
<blockquote>
<p>"<em>The use of the <strong>else</strong> clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the <strong>try … except</strong> statement.</em>"</p>
</blockquote>
<p>Simple speaking if you have different statements that raises the same error, but for one them you aren't interested in catching it, move it to else clause. Look on this <a href="https://stackoverflow.com/questions/855759/python-try-else/855764#855764">question on stack</a> to understand better.</p>
<p>So in your case you can let <code>print</code> statement in try block because you will not catch some particular exceptions from it and there isn't much difference in this case where you put the print statement. However, I think the second example is a good logic separation of type "If no errors where founded then let's execute print".</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>else</code> clause is run only when no exception is thrown.</p>
<p>So the reason why you'd want to put it in there is to make it explicit: <strong>you only want to print the output if there was no exception</strong>.</p>
<p>As you mentioned, in your code, there's no functional difference to what happens.</p>
<p>See the <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first one will work fine as per your expectations (assuming that you don't want to bring up the python error prompt and halt the program). 
It simply prescribes that <strong>IF</strong> 2nd digit is zero then it won't print the Python error prompt and pass it to the print command (And that's how it should be). Otherwise, in every other case, no matter whatever the divisor is, it will always give an output, so that way you eliminate nearly all loopholes. </p>
<p>Suggestion:
Keep the input type as float instead of int, that way you'll be able to print the division for decimal numbers input also. Ex-2/3 </p>
</div>
