<div class="post-text" itemprop="text">
<p>I have started learning python and now learning python for loop. I am using online source to learn python. But i am little but confused about for loop. </p>
<p>The output of </p>
<pre><code>list = ["geeks", "for", "geeks"]
for index in range(len(list)):
    print (list[index])
</code></pre>
<p>and </p>
<pre><code>list = ["geeks", "for", "geeks"]
for i in list:
    print(i)
</code></pre>
<p>are same then why to use range(len) method? </p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>For such simple case, <code>for ind in range(len(sequence))</code> is generally considered an anti-pattern. The are cases when it's useful to have the index around, though, such as when you need to assign back to the list:</p>
<pre><code>for ind in range(len(lst)):
    elem = lst[ind]
    # ... Do some processing
    lst[ind] = processed_elem
</code></pre>
<p>Even in that case, <code>range(len(...))</code> are better avoided in favor of <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>:</p>
<pre><code>for ind, elem in enumerate(lst):
    # ... Do some processing
    lst[ind] = processed_elem
</code></pre>
<p>Also, as already pointed out in a <a href="https://stackoverflow.com/questions/53358753/why-we-use-rangelen-in-for-loop-in-python/53358792#comment93594533_53358753">comment</a>, avoid variable names that clash with built-ins, such as <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>While the latter is definitiely the way to go as long as it fits your needs since its clear and pythonic, there are cases where you really need the index of the element. </p>
<p>One example are sorting algorithms, like this BubbleSort here (<a href="https://www.geeksforgeeks.org/python-program-for-bubble-sort/" rel="nofollow noreferrer">src</a>):</p>
<pre><code>def bubbleSort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n):

        # Last i elements are already in place
        for j in range(0, n-i-1):

            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] &gt; arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
</code></pre>
<p>Here the list indices of sequential elements are used to swap their positions in the list if their sort order is incorrect, while the position in the list is something the pure values of the elements in a <code>for elem in arr</code> loop don't have any connection to anymore. Therefore in such cases you won't get around using the <code>range</code> over the list's <code>len</code> or similar, so that's not un-pythonic by defintion.</p>
<p>Last but not least, a good combination if you need both the index and the value is Python's <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>.</p>
<pre><code>for index, value in enumerate(arr):
     print(index, value)
</code></pre>
<p>Although one could use it in the above BubbleSort example, you'd start mixing <code>value</code> variables with <code>arr[index]</code> expressions, which is not a good idea for the readability of the code. So here, too, it depends very much on the situation if it makes sense to use the one construct or the other, there's no definite choice.</p>
</div>
<div class="post-text" itemprop="text">
<p>you should never use the first one, it's non-pythonic. Use the second one. If for whatever reason you need the index, use enumerate, e.g.</p>
<pre><code>for index, item in enumerate(some_list):
    print(f'Item with index {index} is {item}')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like others, I can't think of many use cases for <code>for idx in range(len(x)):</code>. The only one that really pops to mind is if you need to remove elements from <code>x</code> over the course of the <code>for</code> loop (in which case, as pointed out in the comments, you should go backwards), or you want to do a number of loops equal to <code>len(x)</code> for some reason unconnected to operations on <code>x</code>.</p>
<p>But yes, generally don't use <code>for _ in range(len(x)):</code> if you are iterating over x.</p>
</div>
<span class="comment-copy">@user4815162342 Sorry, I completely forgot to select answer as best answer. Thanks for reminding</span>
<span class="comment-copy">Thanks for your kind help. Is there any best source to learn for loop?</span>
<span class="comment-copy">@Alex44 Just get a good book on Python, it will surely cover the <code>for</code> loop, as well as other things you'll need.</span>
<span class="comment-copy">There's no built-in <code>index</code> function. There's an <code>index</code> method on built-in sequence types, but there's no risk of clashing with that.</span>
<span class="comment-copy">@user2357112 I don't have money to buy book. Thats why i chose online source to learn python.</span>
<span class="comment-copy">@EricDuminil That creates a new list, which may or may not be what you want. Also, there could be other reasons to use the <code>for</code> loop, such as processing not fitting a single expression, or needing to use control flow statements such as <code>break</code>, <code>continue</code>, <code>return</code>, <code>raise</code>, <code>with</code> and others inside the loop body.</span>
<span class="comment-copy">but if you wanted to remove variables as you go along you should go in reverse : <code>range(len(x) -1, -1, -1)</code></span>
