<div class="post-text" itemprop="text">
<p>Here's the problem:</p>
<p>I want to play two mp3 or mpeg format audio files in parallel using pydub. What I notice is that I can start one thread no problem, but it hangs until the first audio file finishes. Only then does the second file start.</p>
<p>I believe this to be due to the python GIL. So I think the threads will not be able to fire in parallel. Am I correct in thinking this?</p>
<p>Here's a simple version of my code:</p>
<pre><code>from pydub import AudioSegment
from pydub.playback import play
import threading
from threading import Thread
from threading import Event

class Song(Thread):
    def __init__(self, filename):
        """initializes the thread"""
        Thread.__init__(self)
        self.soundfilename = filename
        self._stopper = Event()
        self.setName('SoundThread')

    def run(self):
        """plays a given audio file"""
        song = AudioSegment.from_mp3(self.soundfilename)
        play(song)

    def stop(self):
        self._stopper.set()

if __name__ == '__main__':

    s1 = '01. Born To Kill.mp3'
    s2 = 't1.mpeg'

    music1 = Song(s1)
    music2 = Song(s2)

    music1.run()
    music2.run()
</code></pre>
<p>The only work around I discovered on the matter entails taking the mp3, converting it to wave, then feeding it to pyaudio on a thread. That's fine, but it might be computationally expensive for my purposes. </p>
<p><a href="https://github.com/steveway/papagayo-ng/blob/working_vol/SoundPlayer.py" rel="nofollow noreferrer">Link for workaround</a></p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend using pydub with <a href="https://simpleaudio.readthedocs.io/en/latest/" rel="nofollow noreferrer">simpleaudio</a> which supports concurrently playing multiple sounds. For a simple example see <a href="https://github.com/jiaaro/pydub/blob/master/pydub/playback.py#L41" rel="nofollow noreferrer"><code>pydub.playback._play_with_simpleaudio()</code></a> which you can also just use, if you like.</p>
<p>The main <code>pydub.playback.play()</code> function tries to present the same functionality regardless of which playback method is being used, so it waits for playback to complete, but simpleaudio works fine with concurrent playback (and the <code>_play_with_simpleaudio()</code> function does not wait until the sound finishes playing)</p>
</div>
<span class="comment-copy">You're running the <code>run</code> method in the main thread. The <code>Song</code> thread should be run using the <a href="https://docs.python.org/3/library/threading.html#threading.Thread.start" rel="nofollow noreferrer"><code>start</code></a> method.</span>
<span class="comment-copy">@Kendas, that makes sense. But that start method ultimately calls start. Or am I missing something?</span>
<span class="comment-copy">The <code>start</code> method initializes a new thread and runs the contents of the <code>run</code> method in that thread. calling the <code>run</code> method on its own, runs the instructions in your main thread.</span>
<span class="comment-copy">Verified, the behaviour is as you point out. Thank you again @Kendas for your guidance on this.</span>
<span class="comment-copy">Thank you Jiaaro! The solution proposed works.</span>
