<div class="post-text" itemprop="text">
<p>The code I have sends a command to a serial device and returns a string <code>&lt;LF&gt;Mycode&lt;CR&gt;</code> or in Python <code>\nMYCODE\r</code> is the format I send the command in, I can see the incoming data in putty but not in Python? The incoming data also starts with a <code>&lt;LF&gt;</code> and ends with a <code>&lt;CR&gt;</code>. How do I get this data through to Python?</p>
<p>My code:</p>
<pre><code>import time
import serial
import I2C_LCD_driver

mylcd = I2C_LCD_driver.lcd()

print ("Starting Program")
ser = serial.Serial("/dev/ttyUSB0", baudrate=9600,
                    parity=serial.PARITY_NONE,
                    stopbits=serial.STOPBITS_ONE,
                    bytesize=serial.EIGHTBITS
                    )
time.sleep(1)
try:
    ser.write("\nW\r".encode('utf-8'))
    print ("data echo mode enabled")
    while True:
        if ser.inWaiting() &gt; 0:
            data = ser.readline()
            print ("Weight", data.decode(), "kg")
            mylcd.lcd_display_string("Weight" + data.decode(), 1)




except KeyboardInterrupt:
    print ("Exiting Program")

except:
    print ("Error Occurs, Exiting Program")

finally:
    ser.close()
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the issue is with your call to <code>ser.readline()</code>. The <a href="https://pyserial.readthedocs.io/en/latest/pyserial_api.html" rel="nofollow noreferrer">pyserial API</a> states that it uses <code>io.IOBase.readline</code> which reads <a href="https://docs.python.org/3/library/io.html#io.IOBase.readline" rel="nofollow noreferrer">characters up to the newline (<code>\n</code>) character</a>. Since your data begines with <code>\n</code> there are no characters before it, and hence the <code>readline</code> call will read zero bytes from the buffer, and return an empty string.</p>
<p>You should either move the <code>\n</code> to the end of each message, or use the <code>read(n)</code> call directly to read <code>n</code> bytes from the connection.</p>
</div>
<span class="comment-copy">I have used the ser.readline(). The incoming data was quite large and most of it unused so I added [10:17] to limit the characters to what I require. ser.readling()[10:17]</span>
<span class="comment-copy">Does that make it work then? Otherwise I'd say to use the raw <code>read()</code> method and print the data to console to see what you're actually getting.</span>
<span class="comment-copy">It works yes, but the update is so slow in python but in putty its instant! I can use the read() but I only want to read 7 of 18 characters any idea how to do this?</span>
<span class="comment-copy">So your string slicing above (<code>[10:17</code>]) gives you the characters <i>after</i> the read completes. Putty will display each character individually as it arrives, but with python you decide how often to read and display the data that you receive. If you control the format of the data you receive back you could have each response end with <code>\n</code> and just do a readline, then slice the string after.</span>
<span class="comment-copy">That would be the solution but unfortunately the response is preset and canâ€™t be changed</span>
