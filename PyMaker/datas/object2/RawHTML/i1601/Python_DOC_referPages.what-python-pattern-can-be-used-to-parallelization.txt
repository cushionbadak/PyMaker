<div class="post-text" itemprop="text">
<p><code>cmd</code> is a function that process the argument x print the output to stdout. For example, it may be</p>
<pre><code>def cmd(x):
  print(x)
</code></pre>
<p>A serial program calling <code>cmd()</code> looks like the following.</p>
<pre><code>for x in array:
  cmd(x)
</code></pre>
<p>To speed up the program, I'd like it run in parallel. The stdout output can be out-of-order, but the output from a single x must not be broken by the output from another x.</p>
<p>There can be various ways to implement this in python. I figure out something like this.</p>
<pre><code>from joblib import Parallel, delayed
Parallel(n_jobs=100)(delayed(cmd)(i) for i in range(100))
</code></pre>
<p>Is this the best way to implement this in python in terms of code simplicity/readability and efficiency?</p>
<p>Also, the above code runs OK on python3. But not on python2, I got the following error. Is it a problem that may cause errors?</p>
<p>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/joblib/externals/loky/backend/semlock.py:217: RuntimeWarning: semaphore are broken on OSX, release might increase its maximal value
  "increase its maximal value", RuntimeWarning)</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>in standard library <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html</a></p>
<pre><code>import threading

def cmd(x):
    lock.acquire(blocking=True)
    print(x)
    lock.release()

lock = threading.Lock()

for i in range(100):
    t = threading.Thread(target=cmd, args=(i,))
    t.start()
</code></pre>
<p>Using lock guarantees that the code between <code>lock.acquire()</code> and <code>lock.release()</code> is only executed by one thread at a time. <code>print</code> method is already thread-safe in python3 so the output will not be interrupted even without a lock. But if you have any state shared between threads (an object they modify) you need a lock.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using python3, then you can use <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a> from standard library instead</p>
<p>Consider following usage:</p>
<pre><code>with concurrent.futures.ProcessPoolExecutor(100) as executor:
     for x in array:
         executor.submit(cmd, x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would approach the issue in the question with the following code (assuming we talk about CPU bound operations):</p>
<pre><code>import multiprocessing as mp
import random


def cmd(value):
    # some CPU heavy calculation
    for dummy in range(10 ** 8):
        random.random()
    # result
    return "result for {}".format(value)


if __name__ == '__main__':
    data = [val for val in range(10)]
    pool = mp.Pool(4)  # 4 - is the number of processes (the number of CPU cores used)
    # result is obtained after the process of all the data
    result = pool.map(cmd, data)

    print(result)
</code></pre>
<p>Output:</p>
<pre><code>['result for 0', 'result for 1', 'result for 2', 'result for 3', 'result for 4', 'result for 5', 'result for 6', 'result for 7', 'result for 8', 'result for 9']
</code></pre>
<p><strong>EDIT</strong> - another implementation to get result immedeately after calculation - <code>processes</code> and <code>queues</code> instead of <code>pool</code> and <code>map</code>:</p>
<pre><code>import multiprocessing
import random


def cmd(value, result_queue):
    # some CPU heavy calculation
    for dummy in range(10 ** 8):
        random.random()
    # result
    result_queue.put("result for {}".format(value))


if __name__ == '__main__':

    data = [val for val in range(10)]
    results = multiprocessing.Queue()

    LIMIT = 3  # 3 - is the number of processes (the number of CPU cores used)
    counter = 0
    for val in data:
        counter += 1
        multiprocessing.Process(
            target=cmd,
            kwargs={'value': val, 'result_queue': results}
            ).start()
        if counter &gt;= LIMIT:
            print(results.get())
            counter -= 1
    for dummy in range(LIMIT - 1):
        print(results.get())
</code></pre>
<p>Output:</p>
<pre><code>result for 0
result for 1
result for 2
result for 3
result for 4
result for 5
result for 7
result for 6
result for 8
result for 9
</code></pre>
</div>
<span class="comment-copy">I fixed the error in my original message.</span>
<span class="comment-copy">How to make sure that there are concurrently no more than n <code>cmd()</code> running?</span>
<span class="comment-copy">in the simple approach like mine there is no way. parallel processing is a complex subject. for more advanced threading solutions start here: <a href="https://stackoverflow.com/questions/2846653/how-to-use-threading-in-python" title="how to use threading in python">stackoverflow.com/questions/2846653/â€¦</a></span>
<span class="comment-copy">Just to be sure. Does this guarantee the print results don't interleave each other?</span>
<span class="comment-copy">If you're using python3 then yes. But better solution may be to use <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a> module</span>
<span class="comment-copy">Would the results be available immediately? When I use the code in production, I am not sure why the results don't print immediately. I am not sure if this is due the io buffer problem or something related to ProcessPoolExecutor. Does flushing the io buffet cause problems?</span>
<span class="comment-copy">Is your <code>cmd</code> method doing anything else besides calling <code>print</code>?</span>
<span class="comment-copy">Yes. There are some code to do computation, then the results are printed.</span>
<span class="comment-copy">I'd like to print the results as soon as they become available (out-of-order is fine). Can <code>pool.map()</code> do so?</span>
<span class="comment-copy">@user1424739 I guess it is impossible with <code>Pool.map()</code>. Check EDIT addition to the answer for another version of the code.</span>
