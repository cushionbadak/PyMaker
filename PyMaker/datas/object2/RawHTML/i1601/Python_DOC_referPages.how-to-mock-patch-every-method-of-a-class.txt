<div class="post-text" itemprop="text">
<p>I have a Test class with as many as 50 different method. I want to patch every method with a mock function.</p>
<pre><code>prod = {"foo": "bar"}

def TestClass:
  @patch(db.get_product, return_value=prod)
  def test_1:
    pass
  @patch(db.get_product, return_value=prod)
  def test_2:
    pass
  .
  .
  .
  @patch(db.get_product, return_value=prod)
  def test_50:
    pass
</code></pre>
<p>Is there any easy way to do this instead of repeating <code>@patch(db.get_product, return=prod)</code> 50 times?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>patch</code> as a class decorator instead:</p>
<pre><code>@patch(db.get_product, return_value=prod)
class TestClass:
  def test_1:
    pass
  def test_2:
    pass
  .
  .
  .
  def test_50:
    pass
</code></pre>
<p>Excerpt from the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Patch can be used as a TestCase class decorator. It works by
  decorating each test method in the class. This reduces the boilerplate
  code when your test methods share a common patchings set.</p>
</blockquote>
</div>
<span class="comment-copy">Have you looked at the Mock class? <a href="https://docs.python.org/3.7/library/unittest.mock.html#the-mock-class" rel="nofollow noreferrer">docs.python.org/3.7/library/unittest.mock.html#the-mock-class</a></span>
