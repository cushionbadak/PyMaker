<div class="post-text" itemprop="text">
<p>I have a server which I need to login many users to. During each login the server has to do lots of things that take a while like make requests to other servers/databases and wait for them. So whilst one user is logging in I would like the other users to start logging in too.</p>
<p>I have tried to figure out how the asyncio module works but have not found any code that does what I want it to do. </p>
<p>Note: I am using python 3.6 so some of the asyncio features are different to 3.7.</p>
<pre><code>import asyncio
import requests

class user:
    def __init__(self, port):
        # Create user here
        self.port=port
        self.data = requests.get(someURL,port)

    async def login(self,email):
        # Step 1 of logging in
        requsts.post(someURL, self.port, email) # Logs them in but takes a while to process everything
        while True:
            data = requests.get(someURL, self.port)# Gets data from server
            if data.connected == True:
                break
            else:
                pass
                #Go onto logging in next user while we wait for the server to do things

        # Step 2 of logging in
        requests.post(someURL, self.port, email)
        while True:
            data = requests.get(someURL, self.port)
            if data.loggedIn == True:
                break
            else:
                pass
                #Go onto logging in next user while we wait for the server to do things

listOfUsers = []
for i in range(3):
    listOfUsers.append(user(3000+i)) # Creates 3 users

async def loginListOfUsers():

    for user in users:
        await user.login(user.port + "@gmail.com") # Logs in 3 users with i@gmail.com


loop = asyncio.get_event_loop()
loop.run_until_complete(loginListOfUsers())
</code></pre>
<p>I would like to know:</p>
<ol>
<li><p>Is asyncio the right tool for what I am trying to do</p></li>
<li><p>How I would use asyncio to do it</p></li>
</ol>
<p>Here is what I want/think asyncio can do:</p>
<p>Create an event loop,</p>
<p>Add coroutines to this loop and run them,</p>
<p>When it gets to a certain point e.g. an await statement it stops running that coroutine and moves on to the next one in the loop, pushing that one to the back of the loop</p>
<p>I don't have a great understanding of asyncio so am probaby very mistaken but hopefully you can understand what the problem I have is.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>When it gets to a certain point e.g. an await statement it stops running that coroutine and moves on to the next one in the loop, pushing that one to the back of the loop</p>
</blockquote>
<p>That is exactly what asyncio is good at. To execute tasks in parallel, your code needs to satisfy two pre-requisites:</p>
<ol>
<li><p>It needs to actually be async;</p></li>
<li><p>It needs to request the coroutines to run in parallel and not await them in series.</p></li>
</ol>
<p>The first point becomes clear if you take a careful look at the content of coroutines from the question, such as <code>user.login</code>. Although they technically are coroutines (they all begin with <code>async def</code>), they don't <code>await</code> anything, so they never offer asyncio a chance to suspend their execution to do something else.</p>
<p>To make them useful you need to replace every invocation of blocking code with a non-blocking equivalent. The simplest bad-aid to do that while still using <code>requests</code> is to use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer"><code>run_in_executor</code></a> to postpone execution to another thread. In other words, replace:</p>
<pre><code>data = requests.get(someURL, self.port)
</code></pre>
<p>with</p>
<pre><code>data = await loop.run_in_executor(None, requests.get, someURL, self.port)
</code></pre>
<p>The second point can be met by a simple change to <code>loginListOfUsers</code>. Rather than awaiting each coroutine in series (which basically <em>ensures</em> that they will not run in parallel), it needs to start them all in advance and wait for them to complete, for example using <code>asyncio.gather</code>:</p>
<pre><code>async def loginListOfUsers():
    # assemble a list of coroutines without actually running them
    todo = [user.login(user.port + "@gmail.com")
            for user in users]
    # now let all the coroutines run in parallel,
    # and wait for them to complete
    await asyncio.gather(*todo)
</code></pre>
<p>Note that using <code>run_in_executor</code> will use threads under the hood, and will only allow as many parallel connections as there are workers in the thread pool. To make better use of asyncio, you can switch to <a href="https://aiohttp.readthedocs.io/en/stable/client_quickstart.html#make-a-request" rel="nofollow noreferrer">aiohttp</a> which supports multiple connections without each being backed by an OS thread.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two kinds of libraries in python. Async-libraries and blocking-libraries. You should try only to use asyncio-libraries when you use asyncio.</p>
<p>requests is a blocking libarie. Here is an example, how to use it with asyncio: <a href="https://stackoverflow.com/a/23784727/4493241">https://stackoverflow.com/a/23784727/4493241</a></p>
<p>I prefer not to use blocking-libraries at all. So I would recommend to rewrite your code without request. Here is a http-client example with asyncio: <a href="https://asyncio.readthedocs.io/en/latest/http_client.html" rel="nofollow noreferrer">https://asyncio.readthedocs.io/en/latest/http_client.html</a></p>
</div>
<span class="comment-copy">Thanks that sounds very helpful, I'll probably end up using aiohttp anyway so that should speed it up too.</span>
<span class="comment-copy">@Oscar Yes, aiohttp will allow you to have more connections at once by decoupling connections from OS threads. Note that you can pass a custom executor to <code>run_in_executor</code> (instead of a <code>None</code>) argument. You can pass it a <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow noreferrer"><code>ThreadPoolExecutor</code></a> which you've created and which supports a larger number of workers. But in the long run, aiohttp is the way to go, and it also has a very pleasant API, (in spirit) very similar to that of requests!</span>
<span class="comment-copy">@Oscar Also, don't forget to move the blocking call from <code>user.__init__</code> to another method, since the constructor cannot be async.</span>
<span class="comment-copy">That's a good idea, and if I get the rest of it working I'll do that but creating a user is pretty efficient for me at the moment, it is logging in that takes forever.</span>
<span class="comment-copy">Thanks but that doesn't solve the main problem I am having, I need to start logging in one user whilst another is logging in, the length of time it takes for a http get/post is negligible compared to the time taken for the server to login the user, I just need to send the first request to login the first user then whilst they are being logged in make the request for the second user and keep doing this over and over for about 50 users. I am thinking maybe asyncio is not the solution now and it would be easier to just do it in a loop and split each login step to seperate function.</span>
