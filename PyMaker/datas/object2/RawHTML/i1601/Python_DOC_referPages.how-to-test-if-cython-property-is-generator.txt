<div class="post-text" itemprop="text">
<p>In IPython, I can see that a property of a Cython class is a generator by simply defining it and then calling:</p>
<pre><code>%%cython
cdef class SomeCls:
    property x:
        def __get__(self):
            yield 1
</code></pre>
<p>The call looks like</p>
<pre><code>SomeCls().x
# prints &lt;generator at 0x102f61ee8&gt;
</code></pre>
<p>I am having trouble testing if that property is a generator:</p>
<pre><code>import types
print(isinstance(SomeCls().x, types.GeneratorType))
# prints False

import inspect
print(inspect.isgeneratorfunction(SomeCls.x))
# prints False
</code></pre>
<p>How can I determine whether a property of a Cython class is a generator?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why doesn't the usual way work? </p>
<p>First, as you already probably know, there is no difference between <code>inspect.isgeneratorfunction(...)</code> and <code>isinstance(..., types.GeneratorType)</code> - the inspect-module just <a href="https://github.com/python/cpython/blob/7cd25434164882c2093ea41ccfc7b95a05cd5cbd/Lib/inspect.py#L203" rel="nofollow noreferrer">calls</a> <code>isinstance(..., types.GeneratorType)</code>.</p>
<p>On the other hand, <code>types.GeneratorType</code> is <a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Lib/types.py#L18" rel="nofollow noreferrer">defined as</a> </p>
<pre><code>def _g():
    yield 1
GeneratorType = type(_g())
</code></pre>
<p>CPython uses PyGenObject (<a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Include/genobject.h#L34" rel="nofollow noreferrer">here code</a>, <a href="https://docs.python.org/3/c-api/gen.html" rel="nofollow noreferrer">here documentation</a>) for generators, there is no fancy logic for the comparison as for some ABC-classes, so the <code>isinstance</code> will boil down to comparing the C-object types.</p>
<p>However, Cython returns a <a href="https://github.com/cython/cython/blob/bd023b4e4f375ce0c90e85a2bf6302565f9276be/Cython/Utility/Coroutine.c#L365" rel="nofollow noreferrer"><code>__pyx_CoroutineObject</code></a> for generators (just check the cythonized code to see)</p>
<pre><code>typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    ...
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
</code></pre>
<p>which has nothing to do with <code>PyGenObject</code> as far as <code>isinstance</code>is concerned - it doesn't really care whether <code>generator</code> is in the name of the type (but for us humans it can be really puzzling, because <code>type(obj)</code> says "generator").</p>
<p>So you will have to roll out your own version of <code>isgenerator</code>, which takes also Cython-"generators" into account. There are many ways, for example</p>
<pre><code>%%cython
def _f():
    yield 1
CyGeneratorType = type(_f())   
def iscygenerator(o):
    return isinstance(o, CyGeneratorType)
</code></pre>
<p>and now:</p>
<pre><code>import inspect   
def isgenerator(o):
    return inspect.isgenerator(o)  or iscygenerator(o)

isgenerator(SomeCls().x)          #  True
iscygenerator(SomeCls().x)        #  True
inspect.isgenerator(SomeCls().x)  #  False
</code></pre>
</div>
<span class="comment-copy"><i>Avoid answering questions in comments.</i></span>
<span class="comment-copy">Testing against <code>types.GeneratorType</code> works just fine when <i>not</i> using cython...</span>
<span class="comment-copy">Don't be picky about where you get help!  As an experienced poster, I often answer with short comments.  For a regular answer I spend more time, providing working examples and explanations.</span>
<span class="comment-copy">This <i>doesn't</i> fix the problem, but Cython now supports the standard <code>@property</code> syntax (which I think is now preferred since it matches the rest of Python). It behaves exactly the same though with this.</span>
<span class="comment-copy">This answered the question in the MWE that I posted, but unfortunately it didn't solve my problem (determining the type of <a href="https://github.com/explosion/spaCy/blob/develop/spacy/tokens/token.pyx#L456" rel="nofollow noreferrer">this Spacy attribute</a>).  However, I was able to use your example to set <code>SpacyGeneratorType = type(doc.subtree)</code> and then test against that type, like you showed.  This mostly teaches me how little I know about types in Cython.  Thanks for your help!</span>
