<div class="post-text" itemprop="text">
<p>I need to call a list that I made in a function that's in another file. I was trying attempting this below, but I am getting the error <code>cannot import name 'names' from 'backend'</code>. Does anyone know how this can be achieved without making a class?</p>
<pre><code>import backend
from backend import names
word = names
print (word)
</code></pre>
<p>Error message:</p>
<pre class="lang-none prettyprint-override"><code>File "C:/Users/user/OneDrive/Desktop/Pokemon/weather.py", line 52, in &lt;module&gt;
  from backend import names
  builtins.ImportError: cannot import name 'names' from 'backend'
</code></pre>
<p>The code form the other file is</p>
<pre><code>import const 

SEP = ','

def get_pokemon_stats():
    """Reads the data contained in a pokemon data file and parses it into
    several data structures.

    Args:
        None

    Returns: a tuple of:
        -a dict where:
            -each key is a pokemon name (str)
            -each value is a tuple of the following stats:
                -pokemon name (str)
                -species_id (int)
                -height (float)
                -weight (float)
                -type_1 (str)
                -type_2 (str)
                -url_image (str)
                -generation_id (int)
                -evolves_from_species_id (str)
        -a dict where:
            -each key is a pokemon species_id (int)
            -each value is the corresponding pokemon name (str)
        -a list of all pokemon names (strs)
        -a dict where:
            -each key is a pokemon type (str). Note that type_1 and type_2
            entries are all considered types. There should be no special
            treatment for the type NA; it is considered a type as well.
            -each value is a list of all pokemon names (strs) that fall into
            the corresponding type
    """
    name_to_stats = {}
    id_to_name = {}
    names = []
    pokemon_by_type = {}
    DATA_FILENAME = 'pokemon.csv' 


    with open(const.DATA_FILENAME) as f:
        header_to_col_num = parse_header(f)
        for line in f:
            info = line.split(const.SEP)
            name = (info[(header_to_col_num['pokemon'])])
            col_names = ('pokemon', 'species_id', 'height', 'weight', 'type_1', 
            'type_2',
            'url_image', 'generation_id', 'evolves_from_species_id',)
            value = [info[header_to_col_num[col]] for col in col_names]
            value[1] = int(value[1])
            value[2] = float(value[2])
            value[3] = float(value[3])
            value[7] = int(value[7])
            value = tuple(value)

            name_to_stats[name] = value

            species_id = int(info[(header_to_col_num['species_id'])])
            id_to_name[species_id] = name
            names.append(name)


        for name, info in name_to_stats.items():
            type1 = info[4]
            type2 = info[5]
            if type1 in pokemon_by_type:
                pokemon_by_type[type1].append(name)
            else:
                pokemon_by_type[type1] = [name]
            if type2 in pokemon_by_type:
                pokemon_by_type[type2].append(name)
            else:
                pokemon_by_type[type2] = [name]


        return name_to_stats, id_to_name, names, pokemon_by_type
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">Python's documentation</a>:</p>
<blockquote>
<p>In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.</p>
</blockquote>
<p>Thus, the reason why you can't import your <code>names</code> list from another file is because <code>names</code> is inside your <code>get_pokemon_stats</code> function scope and it is not a global variable.</p>
<p>You can make <code>names</code> global putting it outside your function and declaring it as global to use inside your function:</p>
<pre><code>...
names = []
def get_pokemon_stats():
    ...
    global names
    ...
</code></pre>
<p>However, you should consider carefully if you really want to do this. <code>names</code> will only contain actual values once you call your <code>get_pokemon_stats</code> function. Nevertheless, you should avoid just declaring variables globally if you don't really understand how local and global variables work and when we should use them.</p>
<p>I recommend that you consider doing the following code instead:</p>
<pre><code>from backend import get_pokemon_stats
_, _, word, _ = get_pokemon_stats()
print (word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to call the <code>get_pokemon_stats</code> function. It returns four values, and the third value is <code>names</code>.</p>
<pre><code>import backend
name_to_stats, id_to_name, names, pokemon_by_type = backend.get_pokemon_stats()
print(names)
</code></pre>
</div>
<span class="comment-copy">You'll need to show the full traceback here</span>
<span class="comment-copy">Your error doesn't match your code, in your code you're not trying to import <code>pokemon_names</code>. Please show your other file's code and the correct traceback.</span>
<span class="comment-copy">Sorry  I am not familliar with the term traceback?</span>
<span class="comment-copy">The full error message that usually starts with "Traceback (most recent call last)"</span>
<span class="comment-copy">Could you edit your question to add your other file's code?</span>
<span class="comment-copy">Thanks a lot both strategies work and the second one is more acceptable for my teachers, teaching style!</span>
