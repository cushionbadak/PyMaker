<div class="post-text" itemprop="text">
<p>I'm trying to get a list of instance IDs that I get from the <code>describe_instances</code> call using boto3 api in my python script. For those of you who aren't aware of aws, I can post a detailed code after removing the specifics if you need it. I'm trying to access a item from a structure like this</p>
<pre><code>   u'Reservations':[  
      {  
         u'Instances':[  
            {
              u'InstanceId':'i-0000ffffdd'
            },
            {  },   ### each of these dict contain a id like above
            {  },
            {  },
            {  }
         ]
      },
      {  
         u'Instances':[  
            {  },
            {  },
            {  },
            {  },
            {  }
         ]
      },
      {  
         u'Instances':[  
            {  }
         ]         
      }
]
</code></pre>
<p>I'm currently accessing it like</p>
<pre><code>instanceLdict = []
instanceList = []
instances = []
for r in reservations:
  instanceList.append(r['Instances'])
for ilist in instanceList:
   for i in ilist:
       instanceLdict.append(i)
for i in instanceLdict:
    instances.append(i['InstanceId']) ####i need them in a list
print instances
</code></pre>
<p>fyi: my <code>reservations</code> variable contains the whole list of <code>u'Reservations':</code></p>
<p>I feel this is inefficient and since I'm a python newbie I really think there must be some better way to do this rather than the multiple <code>for</code> and <code>if</code>. Is there a better way to do this? Kindly point to the structure/method etc., that might be useful in my scenario</p>
</div>
<div class="post-text" itemprop="text">
<p>Your solution is not actually that inefficient, except you don't really have to create all those top level lists just to save the instance ids in the end. What you could do is a nested loop and keep only what you need:</p>
<pre><code>instances = list()
for r in reservations:
  for ilist in r['Instances']:
    for i in ilist:
      instances.append(i['InstanceId'])  # That's what you looping for
</code></pre>
<p>Yes, there are ways to do this with shorter code, but <em>explicit is better than implicit</em> and stick to what you can read best. Python is quite good with iterations and remember <em>maintainability first, performance second</em>. Also, this part is hardly the bottleneck of what you doing after all those API calls, DB lookups etc.</p>
<p>But if you really insist to do fancy one-liner, go have a look at <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a> helpers, <code>chain.from_iterable()</code> is what you need:</p>
<pre><code>from itertools import chain
instances = [i['InstanceId'] for i in chain.from_iterable(r['Instances'] for r in reservations)]
</code></pre>
</div>
<span class="comment-copy">Thank you for explaining in a detailed manner. I didn't mean a single line code when I meant "efficient" , but still I will look into the itertools helpers which looks complex to me. I was looking reducing the multiple lines/for loops and your answer exactly did that though I had to remove one line. Removing the last for loop in your answer  and accessing directly worked for me  <code>instances.append(ilist['InstanceId'])</code>  And the suggestion part about the maintainability - that's solid advice. Thank you once again.</span>
