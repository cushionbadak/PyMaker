<div class="post-text" itemprop="text">
<p>I have a python class that looks like this:</p>
<pre><code>class Process:
    def __init__(self, PID, PPID, cmd, FDs, reachable, user):
</code></pre>
<p>followed by:</p>
<pre><code>        self.PID=PID
        self.PPID=PPID
        self.cmd=cmd
        ...
</code></pre>
<p>Is there any way to autoinitialize these instance variables, like C++'s initialization list? It would spare lots of redundant code.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a decorator:</p>
<pre><code>from functools import wraps
import inspect

def initializer(func):
    """
    Automatically assigns the parameters.

    &gt;&gt;&gt; class process:
    ...     @initializer
    ...     def __init__(self, cmd, reachable=False, user='root'):
    ...         pass
    &gt;&gt;&gt; p = process('halt', True)
    &gt;&gt;&gt; p.cmd, p.reachable, p.user
    ('halt', True, 'root')
    """
    names, varargs, keywords, defaults = inspect.getargspec(func)

    @wraps(func)
    def wrapper(self, *args, **kargs):
        for name, arg in list(zip(names[1:], args)) + list(kargs.items()):
            setattr(self, name, arg)

        for name, default in zip(reversed(names), reversed(defaults)):
            if not hasattr(self, name):
                setattr(self, name, default)

        func(self, *args, **kargs)

    return wrapper
</code></pre>
<p>Use it to decorate the <code>__init__</code> method:</p>
<pre><code>class process:
    @initializer
    def __init__(self, PID, PPID, cmd, FDs, reachable, user):
        pass
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; c = process(1, 2, 3, 4, 5, 6)
&gt;&gt;&gt; c.PID
1
&gt;&gt;&gt; dir(c)
['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 2.6 or higher, you can use <a href="http://docs.python.org/library/collections.html#collections.namedtuple" rel="noreferrer">collections.namedtuple</a>:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Process = namedtuple('Process', 'PID PPID cmd')
&gt;&gt;&gt; proc = Process(1, 2, 3)
&gt;&gt;&gt; proc.PID
1
&gt;&gt;&gt; proc.PPID
2
</code></pre>
<p>This is appropriate especially when your class is really just a big bag of values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting the <a href="http://www.python.org/dev/peps/pep-0020/" rel="noreferrer">Zen of Python</a>,</p>
<blockquote>
<p>Explicit is better than implicit.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Another thing you can do:</p>
<pre><code>class X(object):
    def __init__(self, a,b,c,d):
        vars = locals() # dict of local names
        self.__dict__.update(vars) # __dict__ holds and object's attributes
        del self.__dict__["self"] # don't need `self`
</code></pre>
<p>But the only solution I would recommend, besides just spelling it out, is "make a macro in your editor" ;-p</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.7+ you can use a <strong><a href="https://www.python.org/dev/peps/pep-0557/" rel="noreferrer">Data Class</a></strong>, which is a very pythonic and maintainable way to do what you want. </p>
<p>It allows you to define <em>fields</em> for your class, which are your automatically initialized instance variables. </p>
<p>It would look something like that: </p>
<pre><code>@dataclass
class Process:
    PID: int
    PPID: int
    cmd: str
    ...
</code></pre>
<p>The <code>__init__</code>method will already be in your class. </p>
<p>Note that here <strong>type hinting is required</strong>, that is why I have used <code>int</code> and <code>str</code> in the example. If you don't know the type of your field, you can use <a href="https://docs.python.org/3/library/typing.html#typing.Any" rel="noreferrer">Any from the <code>typing</code> module</a>.  </p>
<p>The Data Class has many advantages compared to the proposed solutions:</p>
<ul>
<li>It is <strong>explicit</strong>: all fields are visible, which respects the Zen of Python and makes it readable and maintainable. Compare it to the use of <code>**kwargs</code>. </li>
<li>It can have <strong>methods</strong>. Just like any other class. The absence of methods, if you want to use them, is one downside of <code>namedtuple</code>. </li>
<li>It allows you to go beyond the automatic <code>__init__</code> using the <a href="https://www.python.org/dev/peps/pep-0557/#post-init-processing" rel="noreferrer"><code>__post_init__</code></a> method. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could do it easily with the keyword arguments, e.g. like this:</p>
<pre><code>&gt;&gt;&gt; class D:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

&gt;&gt;&gt; D(test='d').test
'd'
</code></pre>
<p>similar implementation for the positional arguments would be:</p>
<pre><code>&gt;&gt; class C:
    def __init__(self, *args):
        self.t, self.d = args


&gt;&gt;&gt; C('abc', 'def').t
'abc'
&gt;&gt;&gt; C('abc', 'def').d
'def'
</code></pre>
<p>which to me doesn't seem to solve your problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nadia's solution is better and more powerful, but I think this is also interesting:</p>
<pre><code>def constructor(*arg_names):
  def __init__(self, *args):
    for name, val in zip(arg_names, args):
      self.__setattr__(name, val)
  return __init__


class MyClass(object):
  __init__ = constructor("var1", "var2", "var3")


&gt;&gt;&gt; c = MyClass("fish", "cheese", "beans")
&gt;&gt;&gt; c.var2
"cheese"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I needed something for the same purpose, but none of the existing answers covered all of the cases I tested.Â  Nadia's answer was the closest to what I was looking for, so I started with her code as a base.  </p>
<p>The decorator below works with all valid combinations of arguments:  </p>
<pre><code>Positional                                          __init__(self, a, b                )
Keyword                                             __init__(self, a=None, b=None      )
Positional + Keyword                                __init__(self, a, b, c=None, d=None)
Variable Positional                                 __init__(self, *a                  )
Variable Positional + Keyword                       __init__(self, *a, b=None          )
Variable Positional + Variable Keyword              __init__(self, *a, **kwargs        )
Positional + Variable Positional + Keyword          __init__(self, a, *b, c=None       )
Positional + Variable Positional + Variable Keyword __init__(self, a, *b, **kwargs     )
Keyword Only                                        __init__(self, *, a=None           )
Positional + Keyword Only                           __init__(self, a, *, b=None        )
</code></pre>
<p>It also implements the standard <code>_</code>-prefix convention to allow for <code>__init__</code>-private variables that won't be assigned to class instances.  </p>
<hr/>
<pre class="lang-py prettyprint-override"><code>###  StdLib  ###
from functools import wraps
import inspect


###########################################################################################################################
#//////|   Decorator   |//////////////////////////////////////////////////////////////////////////////////////////////////#
###########################################################################################################################

def auto_assign_arguments(function):

  @wraps(function)
  def wrapped(self, *args, **kwargs):
    _assign_args(self, list(args), kwargs, function)
    function(self, *args, **kwargs)

  return wrapped


###########################################################################################################################
#//////|   Utils   |//////////////////////////////////////////////////////////////////////////////////////////////////////#
###########################################################################################################################

def _assign_args(instance, args, kwargs, function):

  def set_attribute(instance, parameter, default_arg):
    if not(parameter.startswith("_")):
      setattr(instance, parameter, default_arg)

  def assign_keyword_defaults(parameters, defaults):
    for parameter, default_arg in zip(reversed(parameters), reversed(defaults)):
      set_attribute(instance, parameter, default_arg)

  def assign_positional_args(parameters, args):
    for parameter, arg in zip(parameters, args.copy()):
      set_attribute(instance, parameter, arg)
      args.remove(arg)

  def assign_keyword_args(kwargs):
    for parameter, arg in kwargs.items():
      set_attribute(instance, parameter, arg)
  def assign_keyword_only_defaults(defaults):
    return assign_keyword_args(defaults)

  def assign_variable_args(parameter, args):
    set_attribute(instance, parameter, args)

  POSITIONAL_PARAMS, VARIABLE_PARAM, _, KEYWORD_DEFAULTS, _, KEYWORD_ONLY_DEFAULTS, _ = inspect.getfullargspec(function)
  POSITIONAL_PARAMS = POSITIONAL_PARAMS[1:] # remove 'self'

  if(KEYWORD_DEFAULTS     ): assign_keyword_defaults     (parameters=POSITIONAL_PARAMS,  defaults=KEYWORD_DEFAULTS)
  if(KEYWORD_ONLY_DEFAULTS): assign_keyword_only_defaults(defaults=KEYWORD_ONLY_DEFAULTS                          )
  if(args                 ): assign_positional_args      (parameters=POSITIONAL_PARAMS,  args=args                )
  if(kwargs               ): assign_keyword_args         (kwargs=kwargs                                           )
  if(VARIABLE_PARAM       ): assign_variable_args        (parameter=VARIABLE_PARAM,      args=args                )


###########################################################################################################################$#//////|   Tests   |//////////////////////////////////////////////////////////////////////////////////////////////////////#$###########################################################################################################################$$if __name__ == "__main__":$$#######|   Positional   |##################################################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a, b):$      pass$$  t = T(1, 2)$  assert (t.a == 1) and (t.b == 2)$$#######|   Keyword   |#####################################################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a="KW_DEFAULT_1", b="KW_DEFAULT_2"):$      pass$$  t = T(a="kw_arg_1", b="kw_arg_2")$  assert (t.a == "kw_arg_1") and (t.b == "kw_arg_2")$$#######|   Positional + Keyword   |########################################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a, b, c="KW_DEFAULT_1", d="KW_DEFAULT_2"):$      pass$$  t = T(1, 2)$  assert (t.a == 1) and (t.b == 2) and (t.c == "KW_DEFAULT_1") and (t.d == "KW_DEFAULT_2")$$  t = T(1, 2, c="kw_arg_1")$  assert (t.a == 1) and (t.b == 2) and (t.c == "kw_arg_1") and (t.d == "KW_DEFAULT_2")$$  t = T(1, 2, d="kw_arg_2")$  assert (t.a == 1) and (t.b == 2) and (t.c == "KW_DEFAULT_1") and (t.d == "kw_arg_2")$$#######|   Variable Positional   |#########################################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, *a):$      pass$$  t = T(1, 2, 3)$  assert (t.a == [1, 2, 3])$$#######|   Variable Positional + Keyword   |###############################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, *a, b="KW_DEFAULT_1"):$      pass$$  t = T(1, 2, 3)$  assert (t.a == [1, 2, 3]) and (t.b == "KW_DEFAULT_1")$$  t = T(1, 2, 3, b="kw_arg_1")$  assert (t.a == [1, 2, 3]) and (t.b == "kw_arg_1")$$#######|   Variable Positional + Variable Keyword   |######################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, *a, **kwargs):$      pass$$  t = T(1, 2, 3, b="kw_arg_1", c="kw_arg_2")$  assert (t.a == [1, 2, 3]) and (t.b == "kw_arg_1") and (t.c == "kw_arg_2")$$#######|   Positional + Variable Positional + Keyword   |##################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a, *b, c="KW_DEFAULT_1"):$      pass$$  t = T(1, 2, 3, c="kw_arg_1")$  assert (t.a == 1) and (t.b == [2, 3]) and (t.c == "kw_arg_1")$$#######|   Positional + Variable Positional + Variable Keyword   |#########################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a, *b, **kwargs):$      pass$$  t = T(1, 2, 3, c="kw_arg_1", d="kw_arg_2")$  assert (t.a == 1) and (t.b == [2, 3]) and (t.c == "kw_arg_1") and (t.d == "kw_arg_2")$$#######|   Keyword Only   |################################################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, *, a="KW_DEFAULT_1"):$      pass$$  t = T(a="kw_arg_1")$  assert (t.a == "kw_arg_1")$$#######|   Positional + Keyword Only   |###################################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a, *, b="KW_DEFAULT_1"):$      pass$$  t = T(1)$  assert (t.a == 1) and (t.b == "KW_DEFAULT_1")$$  t = T(1, b="kw_arg_1")$  assert (t.a == 1) and (t.b == "kw_arg_1")$$#######|   Private __init__ Variables (underscored)   |####################################################################$$  class T:$    @auto_assign_arguments$    def __init__(self, a, b, _c):$      pass$$  t = T(1, 2, 3)$  assert hasattr(t, "a") and hasattr(t, "b") and not(hasattr(t, "_c"))
</code></pre>
<hr/>
<h1>Note:</h1>
<p>I included tests, but collapsed them into the last line (<em>58</em>) for brevity.Â  You can expand the tests, which detail all of the potential use cases, by <code>find/replace</code>-ing all <code>$</code> characters with a newline.</p>
</div>
<div class="post-text" itemprop="text">
<p>There may not be a need to initialize variables, as locals() already contains the values!</p>
<p>class Dummy(object):</p>
<pre><code>def __init__(self, a, b, default='Fred'):
    self.params = {k:v for k,v in locals().items() if k != 'self'}
</code></pre>
<p>d = Dummy(2, 3)</p>
<p>d.params</p>
<p>{'a': 2, 'b': 3, 'default': 'Fred'}</p>
<p>d.params['b']</p>
<p>3</p>
<p>Of course, within a class one could use self.params</p>
</div>
<div class="post-text" itemprop="text">
<p>As soon as <code>getargspec</code> is deprecated since Python 3.5, here's solution using <code>inspect.signature</code>:</p>
<pre><code>from inspect import signature, Parameter
import functools


def auto_assign(func):
    # Signature:
    sig = signature(func)
    for name, param in sig.parameters.items():
        if param.kind in (Parameter.VAR_POSITIONAL, Parameter.VAR_KEYWORD):
            raise RuntimeError('Unable to auto assign if *args or **kwargs in signature.')
    # Wrapper:
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        for i, (name, param) in enumerate(sig.parameters.items()):
            # Skip 'self' param:
            if i == 0: continue
            # Search value in args, kwargs or defaults:
            if i - 1 &lt; len(args):
                val = args[i - 1]
            elif name in kwargs:
                val = kwargs[name]
            else:
                val = param.default
            setattr(self, name, val)
        func(self, *args, **kwargs)
    return wrapper
</code></pre>
<p>Check if works:</p>
<pre><code>class Foo(object):
    @auto_assign
    def __init__(self, a, b, c=None, d=None, e=3):
        pass

f = Foo(1, 2, d="a")
assert f.a == 1
assert f.b == 2
assert f.c is None
assert f.d == "a"
assert f.e == 3

print("Ok")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/nu11ptr" rel="nofollow">nu11ptr</a> has made a small module, <a href="https://github.com/nu11ptr/PyInstanceVars" rel="nofollow">PyInstanceVars</a>, which includes this functionality as a function decorator. In the module's README is states that the "<em>[...] performance is now only 30-40% worse than explicit initialization under CPython</em>".</p>
<p>Usage example, lifted straight from the module's <a href="https://github.com/nu11ptr/PyInstanceVars#basic-usage" rel="nofollow">documentation</a>:</p>
<pre><code>&gt;&gt;&gt; from instancevars import *
&gt;&gt;&gt; class TestMe(object):
...     @instancevars(omit=['arg2_'])
...     def __init__(self, _arg1, arg2_, arg3='test'):
...             self.arg2 = arg2_ + 1
...
&gt;&gt;&gt; testme = TestMe(1, 2)
&gt;&gt;&gt; testme._arg1
1
&gt;&gt;&gt; testme.arg2_
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'TestMe' object has no attribute 'arg2_'
&gt;&gt;&gt; testme.arg2
3
&gt;&gt;&gt; testme.arg3
'test'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.3+:</p>
<pre><code>from functools import wraps
from inspect import Parameter, signature


def instance_variables(f):
    sig = signature(f)
    @wraps(f)
    def wrapper(self, *args, **kwargs):
        values = sig.bind(self, *args, **kwargs)
        for k, p in sig.parameters.items():
            if k != 'self':
                if k in values.arguments:
                    val = values.arguments[k]
                    if p.kind in (Parameter.POSITIONAL_OR_KEYWORD, Parameter.KEYWORD_ONLY):
                        setattr(self, k, val)
                    elif p.kind == Parameter.VAR_KEYWORD:
                        for k, v in values.arguments[k].items():
                            setattr(self, k, v) 
                else:
                    setattr(self, k, p.default) 
    return wrapper

class Point(object):
    @instance_variables 
    def __init__(self, x, y, z=1, *, m='meh', **kwargs):
        pass
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; p = Point('foo', 'bar', r=100, u=200)
&gt;&gt;&gt; p.x, p.y, p.z, p.m, p.r, p.u
('foo', 'bar', 1, 'meh', 100, 200)
</code></pre>
<p>A non-decorator approach for both Python 2 and 3 using frames:</p>
<pre><code>import inspect


def populate_self(self):
    frame = inspect.getouterframes(inspect.currentframe())[1][0]
    for k, v in frame.f_locals.items():
        if k != 'self':
            setattr(self, k, v)


class Point(object):
    def __init__(self, x, y):
        populate_self(self)
</code></pre>
<p><strong>Demo:</strong> </p>
<pre><code>&gt;&gt;&gt; p = Point('foo', 'bar')
&gt;&gt;&gt; p.x
'foo'
&gt;&gt;&gt; p.y
'bar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this is a closed question, but I would like to propose my solution in order to know what you think about it. I have used a metaclass which applies a decorator to <strong>init</strong> method</p>
<pre><code>import inspect

class AutoInit(type):
    def __new__(meta, classname, supers, classdict):
        classdict['__init__'] = wrapper(classdict['__init__'])
        return type.__new__(meta, classname, supers, classdict)

def wrapper(old_init):
    def autoinit(*args):
        formals = inspect.getfullargspec(old_init).args
        for name, value in zip(formals[1:], args[1:]):
            setattr(args[0], name, value)
    return autoinit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://www.attrs.org/en/stable/" rel="nofollow noreferrer">attrs</a> library does something like this.</p>
</div>
<span class="comment-copy">See also discussion of the <code>autoassign</code> activestate recipe, and an alternate <code>autoargs</code> implementation at: <a href="http://stackoverflow.com/questions/3652851/what-is-the-best-way-to-do-automatic-attribute-assignment-in-python-and-is-it-a">What is the best way to do automatic attribute assignment in Python, and is it a good idea? - Stack Overflow</a></span>
<span class="comment-copy">This works and answer the question so I voted up. But I kept Ferdidand Beyer answer: "Explicit is better than implicit"</span>
<span class="comment-copy">+1 For great answer that solved my problem. But shouldn't it be a core functionality of the language? Do you think it's worth writing a PEP?</span>
<span class="comment-copy">This is a really good answer - this has gone straight into my toolbox.</span>
<span class="comment-copy">@NadiaAlramli I think there is a small bug in the code. Look here <a href="https://gist.github.com/pmav99/137dbf4681be9a58de74" rel="nofollow noreferrer">gist.github.com/pmav99/137dbf4681be9a58de74</a> (original.py)</span>
<span class="comment-copy">The current example has a bug, and will not work if the signature doesn't include default arguments. You need to include a check to make sure names and defaults are not None. Ex:    if names and defaults:</span>
<span class="comment-copy">+1 for really neat tool.</span>
<span class="comment-copy">"This is appropriate especially when your class is really just a big bag of values." In such a scenario, you could also do this: <a href="https://docs.python.org/3.3/tutorial/classes.html#odds-and-ends" rel="nofollow noreferrer">https://docs.python.org/3.3/tutorial/classes.html#odds-and-ends</a></span>
<span class="comment-copy">Wouldn't an initialization list declaration be explicit enough?</span>
<span class="comment-copy">I guess. But I don't see a reason for adding something like that to the language. I clearly prefer multiple assignment statements over some kind of decorator-magic behind the scenes.</span>
<span class="comment-copy">@Ferdinand, I agree it would be silly to have in the language something that can perfectly well be in the stdlib, but, it SHOULD be in the stdlib, because "beautiful is better than ugly" takes precedence, and many repetitive assignments are ugly (as is any form of repetition).</span>
<span class="comment-copy">Well, to counter: DWIM &gt; DWIS</span>
<span class="comment-copy">I would agree decorator is more beautiful than a list of assignments but  PyCharm makes it uglier by not understanding it :-(</span>
<span class="comment-copy">Good catch on deleting 'self'.</span>
<span class="comment-copy">This should only be used if the purpose of the class is to store data.</span>
<span class="comment-copy">Or to develop around storing data.</span>
<span class="comment-copy">Would you explain why dataclass should be used only for classes that store data, rather than have other behavior as well? I might create a new SO post for this entirely to better understand its appropriate use cases. Thanks.</span>
<span class="comment-copy">Another variation that I like is <code>self.__dict__.update( **kwargs )</code></span>
<span class="comment-copy">Might as well use locals() and put normal arguments.</span>
<span class="comment-copy">It's a nice and original approach, but <code>d['b']</code> is written in Python's <i>lingua franca</i> while <code>d.params['b']</code> will cause confusion for code readers.</span>
