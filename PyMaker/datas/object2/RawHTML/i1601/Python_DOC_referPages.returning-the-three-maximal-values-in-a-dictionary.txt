<div class="post-text" itemprop="text">
<p>I have the following dictionary: </p>
<pre><code>'{0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49, 9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408, 16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}'
</code></pre>
<p>And for this dictionary I want write a function that returns the <strong>three</strong> key-value pairs that have the highest values (So in this case key 18, 19, 20).</p>
<p>I came up with the following: </p>
<pre><code>cachedict = nr_of_objects_per_century() #Dictionary mentioned above

def top_3_centuries():
        max_nr_works_list = sorted(cachedict.values())
        top_3_values = []
        for i in range(len(max_nr_works_list)-3, len(max_nr_works_list)):
            top_3_values.append(max_nr_works_list[i])
            print(top_3_values)
</code></pre>
<p>This gives me a list of the max-values I want to lookup. But how do I proceed from here? Is there a way to do this without a reverse-lookup (Which is slow for dictionaries, right?) I have the feeling that I can do this task much more efficiently/pythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use <a href="https://docs.python.org/3/library/collections.html?highlight=counter#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> with <code>most_common</code> (which internally uses a heap queue):</p>
<pre><code>from collections import Counter

dct = {0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49, 
       9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408, 
       16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}

count = Counter(dct)
print(count.most_common(3))  # [(19, 244675), (20, 115878), (18, 111490)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3.0/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer"><code>heapq.nlargest</code></a></h3>
<p>You can avoid a full sort here by using a heap queue:</p>
<pre><code>from heapq import nlargest
from operator import itemgetter

dct = {0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49,
       9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408,
       16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}

res = nlargest(3, dct.items(), key=itemgetter(1))

print(res)
# [(19, 244675), (20, 115878), (18, 111490)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use this:</p>
<pre><code>a = {0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49,
       9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408,
       16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}

l = sorted(list(a.items()), key=lambda tup: tup[1], reverse=True)[:3]
print(l) # [(19, 244675), (20, 115878), (18, 111490)]
</code></pre>
<p>It converts the dictionary <code>a</code> into a list of tuples, sort by <code>tup[1]</code>, reverse it and get the first 3 hits.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like so:</p>
<pre><code>dct = {0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49, 9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408, 16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}

res = [next(k for k in dct if dct[k]==v) for v in sorted(dct.values(), reverse=True)[:3]]
print(res)  # -&gt; [19, 20, 18]
</code></pre>
<p>Break-down:</p>
<ul>
<li><code>sorted(dct.values(), reverse=True)[:3]</code>:: Takes the 3 max dictionary values.</li>
<li><code>next(k for k in dct if dct[k]==v)</code>:: returns the dictionary key, for which the value is one of the above 3 (iteratively).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>in two simple steps :</p>
<pre><code>aux = sorted([(v,k) for (k,v) in dic.items()])
res = [(v,k) for (k,v) in aux[-3:]] 
#[(18, 111490), (20, 115878), (19, 244675)]
</code></pre>
<p>faster than <code>nlargest</code> and <code>Counter.most_common</code> on this example.</p>
</div>
<div class="post-text" itemprop="text">
<p>This returns what you want:</p>
<pre><code>d = {0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49, 9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408, 16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}

print(sorted([(i,j) for i, j in d.items() if j in (sorted(d.values())[-3:])])[-3:])
#[(18, 111490), (19, 244675), (20, 115878)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {0: 0, 1: 11, 2: 26, 3: 43, 4: 14, 5: 29, 6: 34, 7: 49, 8: 49, 9: 108, 10: 124, 11: 108, 12: 361, 13: 290, 14: 2118, 15: 5408, 16: 43473, 17: 109462, 18: 111490, 19: 244675, 20: 115878, 21: 6960}

d_items_sorted = sorted(d.items(), key=lambda x: x[1], reverse=True)

d_items_sorted[:3]
</code></pre>
<p>Returns : </p>
<pre><code>[(19, 244675), (20, 115878), (18, 111490)]
</code></pre>
<p>This is the easiest code I could get, but sorting the dictionary cost O(nlogn) and you should be able to do the same in O(n)</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you looking for the most efficient way or just the optimal way in permormace/algorithm simplicity?</p>
<p>If it's the latter may be you should consider sorting dictionary items as tuples (you can get them with cachedict.items()) like in this answer <a href="https://stackoverflow.com/a/613218/10453363">https://stackoverflow.com/a/613218/10453363</a></p>
<p>Just sort tuples by the value and then get the last 3 tuples (which are key/value pairs)</p>
</div>
<span class="comment-copy">@schwobaseggl actually it works nicely; as the examples show: a <code>Counter</code> can be initialized with a dict: <code>Counter({'red': 4, 'blue': 2})</code>. the values will be used as number of occurrences.</span>
<span class="comment-copy">This is totally the way to go IMO, under the hood this uses <code>heapq.nlargest</code> anyway <a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Lib/collections/__init__.py#L584" rel="nofollow noreferrer">github.com/python/cpython/blob/â€¦</a></span>
<span class="comment-copy">@hiroprotagonist Thanks =) This is a nice concise way to do it. Do you by any chance know if this avoids a full sort also? Or is the dict first sorted if you use the most_common function?</span>
<span class="comment-copy">@Chris_Rands That answers my question already haha</span>
<span class="comment-copy">@hiroprotagonist My bad, totally solid!! +1</span>
<span class="comment-copy">whoa! that is nice! did not think of it...</span>
<span class="comment-copy">Correct. <code>dct.items</code> returns key-value pairs, <code>lambda x: x[1]</code> extracts the second of these, i.e. the value (since Python is zero-indexed), i.e. the value. <code>nlargest</code> means "get the largest" and we have the <code>3</code> argument for how many.</span>
<span class="comment-copy">This is a nice way to avoid sorting. +1. I think sorting is not needed if you only want the top 3 elements.</span>
<span class="comment-copy">@Psychotechnopath, No. There's no thing as "heapify". It iterates the dictionary and keeps only the largest 3 valuese. So a full sort isn't required.</span>
<span class="comment-copy">@Psychotechnopath, It holds 3 values in memory and updates as it iterates. If you need more information, see <a href="https://en.wikipedia.org/wiki/Priority_queue" rel="nofollow noreferrer">Priority queue</a>. You can write a book on this. If you have a <i>very specific</i> question on how it's implemented, I suggest you ask a new question.</span>
<span class="comment-copy">True, but I don't think that's the case in general (As the dicts get larger) right?</span>
