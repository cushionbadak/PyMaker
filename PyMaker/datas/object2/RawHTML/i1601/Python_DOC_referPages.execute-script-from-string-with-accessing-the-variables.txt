<div class="post-text" itemprop="text">
<p>I have a python script as a string, as example:</p>
<pre><code>exec("sent = {'test': 1}")
global sent
print(sent)
</code></pre>
<p>I executed it using exec function, then I accessed the variable using <code>global</code> python command. This way works without problem without using classes, but when I have the same code in a class, like:</p>
<pre><code>class example:
    def fun1(self):
        exec("sent = {'test': 1}")
        global sent
        print(sent)

v = example()
print(v.fun1())
</code></pre>
<p>I get the following error: </p>
<pre class="lang-none prettyprint-override"><code>NameError: name 'sent' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not passing the global dictionary to modify. Try: </p>
<pre><code> exec("sent = {}",globals())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You really should avoid using global variables. Regardless, here's how to do it:</p>
<pre><code>class example:
    def fun1(self):
#        globals sent  # Not needed in this special case.
        exec("sent = {}", globals())
        print('in fun1, "sent" is now', sent )


v = example()
print(v.fun1())  # Result will be None because fun1() doesn't return anything.
print('after call to fun1(), global "sent" is', sent)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>in fun1, "sent" is now {}
None
after call to fun1(), global "sent" is {}
</code></pre>
<p>A <code>global</code> declaration only does something inside a function or class method and even then is only needed when the global variable's value is going to be set to something. 
However, as a special case, one isn't really needed here in the <code>fun1()</code> method because it explicitly passes <code>globals()</code> (but not a separate locals dict) when it calls <code>exec()</code>. It might be a good idea to put one in anyway to make it more clear what's going on.</p>
<p>Using <code>exec()</code> this way is explained in its <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">documentation</a> which says:</p>
<blockquote>
<p>If only globals is provided, it must be a dictionary, which will be used for <strong>both</strong> the global and the local variables.</p>
</blockquote>
<p>(emphasis mine)</p>
<p>Here's a way to avoid referencing a global variable at all in the method:</p>
<pre><code>class example:
    def fun1(self):
        namespace = {}
        exec("sent = {}", namespace)
        sent = namespace['sent']  # Retrieve result.
        print('in fun1, "sent" is now', sent )
        return sent

v = example()
sent = v.fun1()
print('after calling fun1(), "sent" got set to', sent)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>in fun1, "sent" is now {}
after calling fun1(), "sent" got set to {}
</code></pre>
</div>
<span class="comment-copy">Try: exec("global sent;sent = {}") . But avoid using global variables if you can.</span>
<span class="comment-copy">I can't add "global" to the string, because it's too long</span>
<span class="comment-copy">Ghanem: What do you mean it's too long? Strings can be almost any length in Python.</span>
<span class="comment-copy">It's a dataset, someone build it in a code format .. "dummy way"</span>
<span class="comment-copy">to make the question clear, I append a value to the "sent" variable</span>
<span class="comment-copy">The original question was trying to initialize 'sent' to an empty array. This does that. you may also set 'send' to a given dictionary, as in the modified question by:        exec("sent = {'test': 1}",globals())  or modify a dictionary that was previously defined as global:        exec(" my_global_dictionary['new_key'] = 'new_value'", global())  but adding the second argument, a reference to the global dictionary is crucial. If you do not add this exec creates a global dictionary = {} which is discarded after the function is called.</span>
<span class="comment-copy">it didn't work, it prints "None .. regarding to: "You really should avoid using global variables", what is the alternative in such a case?</span>
<span class="comment-copy">Ghanem: I think it works now, sorry about that. Alternatives to using globals depend on exactly what you're doing. The most common way is by passing them to the function/method as arguments (if they have mutable values). The other is by <code>return</code>ing them from the function/method. i.e. <code>sent = v1.fun1()</code> (assuming you also put a <code>return sent</code> statement at the end of the method).</span>
