<div class="post-text" itemprop="text">
<p>I have a txt file with the following line:</p>
<pre><code>ENBO =&gt; [
 'h4d gh34245 ran54'
]
</code></pre>
<p>I want to be able to put the containments <code>h4d gh34245 ran54</code> inside a variable in my python script.</p>
<p>My python script:</p>
<pre><code>f = open(txt.txt, "r")

for line1 in f:
         if ("ENBO" in line1):
               print (line1)
</code></pre>
<p>However this just prints <code>ENBO =&gt; [</code> , but I want a way to read the line below my current line <code>ENBO =&gt; [</code> to get the line <code>h4d gh34245 ran54</code> and store it inside of a variable in my script so I may read from it accordingly. Also, I do not want to change the txt file in anyway. And I want to search for the containments of <code>ENBO</code> specifically, not hard-code search for <code>h4d gh34245 ran54</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use a context manager to loop over the file and print/store the next value if a line of interest is found:</p>
<pre><code>with open('txt.txt', "r") as f:
    for line in f:
        if 'ENBO' in line:
            print(next(f)) #you can also append the values to a list here
        else:
            #do something here*
            pass

&gt;&gt;'h4d gh34245 ran54'

 'h4d gh34245 ran54'

 'h4d gh34245 ran54'

 'h4d gh34245 ran54'
</code></pre>
<p>You can do this because <code>f</code> is a generator, it prints the next line if <code>ENBO</code> and continues <strong>after</strong> the next line.</p>
<p>This is tested in a mock text file:</p>
<pre><code>ENBO =&gt; [
 'h4d gh34245 ran54'
]

ENBO =&gt; [
 'h4d gh34245 ran54'
]

ENBO =&gt; [
 'h4d gh34245 ran54'
]

ENBO =&gt; [
 'h4d gh34245 ran54'
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this should work.</p>
<pre><code>print_next_line = False
for line1 in f:
    if print_next_line:
        print(line1)
        print_next_line = False
    if "ENBO" in line1:
        print_next_line = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer yper gave should work, but may I also suggest looking into JSON file formatting? This would allow you to assign a value to the key "ENBO" and then access that through a key:value pairing?</p>
<p>Not sure what you're reading the file for, or what generates it so can't guarantee that this approach would help you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean that you wish to put the contents of a text file into a variable?
There are two ways you would do this, the first of which is just to put it all into one string (with only one line I think this is what you want):</p>
<pre><code>f = open(txt.txt, "r") # opening the file

output = f.read().replace('\n', '') # replacing the newline with spaces
</code></pre>
<p>You can just remove a bit of the second line to put it into an array of the lines.</p>
<pre><code>output = f.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The usual way I approach something like this is to read until I find the line that signals the start of the data I'm looking for, then gather the desired data. For this question, something like the following should work:</p>
<pre><code>f = open('txt.txt', "r")
for line1 in f:
    if ("ENBO" in line1):
        break                 # Stops the loop
if f:                         # Make sure you didn't hit the end of the file
    data_line = f.readline()  # Grab the next line
    print(data_line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend just doing this:</p>
<pre><code>from pathlib import Path

print(Path(MY_FILE).read_text().splitlines()[1])
</code></pre>
<p>Using <a href="https://www.google.co.il/search?q=pathlib&amp;oq=pathlib&amp;aqs=chrome..69i57j69i60l3j69i59.510j0j7&amp;sourceid=chrome&amp;ie=UTF-8" rel="nofollow noreferrer"><code>pathlib</code></a> for your file operations is highly recommended. If you can't/won't use it, this is equivalent:</p>
<pre><code>with open(MY_FILE) as f:
    print(f.readlines()[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, it is important to note that your file contains 3 lines, even if semantically those 3 lines represent only one entity.</p>
<p>Now, if your file is really this simple, and you really just want the second line, you can use the method <a href="https://docs.python.org/3.3/tutorial/inputoutput.html" rel="nofollow noreferrer">readlines()</a>.
This will read the whole file and return a list, where each line of the file is represented by one item.</p>
<p>Then, if you know that your line is always on the second line (index 1), you can just access it directly.</p>
<p>here is the suggested solution:</p>
<pre><code>f = open(txt.txt, "r")
all_lines = f.readlines()
requested_line = all_lines[1]
</code></pre>
<p>Also, I would like to suggest that you use the <code>with</code> syntax to open the file, so the resource is disposed of when it is no longer used:</p>
<pre><code>with open(txt.txt, "r") as f:
    all_lines = f.readlines()
    requested_line = all_lines[1]
</code></pre>
<p>You can understand more about the <code>with</code> statement in the <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">docs</a> or in the <a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">developer's guide</a></p>
<p>Note that <code>readlines()</code> goes through the whole file, so if your file might be of an unknown length, you should probably refrain from using it. </p>
</div>
<span class="comment-copy">Yes!!! this did it. Thank you!</span>
<span class="comment-copy">Happy to help, just pay attention to the criteria in the <code>for</code> loop, in this case only <code>ENBO</code> is extracted. There are also very similar examples in the Python documentation <a href="https://docs.python.org/3.5/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">This just prints out nothing for me :/. I also added print (line1) to end of last if statement</span>
