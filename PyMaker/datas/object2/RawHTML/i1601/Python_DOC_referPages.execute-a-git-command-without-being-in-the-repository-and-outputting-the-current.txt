<div class="post-text" itemprop="text">
<p>I'm writing a Python script to loop over all Git repositories in a certain folder. Now I want to include the current folder name in the git-log result, but I can't find how to do this in the <a href="https://git-scm.com/docs/git-log" rel="nofollow noreferrer">git-log documentation</a>.</p>
<p>Is there a way to print out a current directory if you execute Git commands against a repository without being in that repository?</p>
<p>My current git-log command looks like this:</p>
<pre><code>git -C ./%s log --pretty=format:-C,\'"%%H","%%s"\' | grep -E %s &gt;&gt; output.csv
</code></pre>
<p>I know I can use both <code>git --git-dir=repo/.git log</code> and <code>git -C /repo log</code> to execute commands in subfolders. </p>
<p>I also tried to use <code>$(basename "$PWD")</code> but it shows the current folder, but not subfolders.</p>
<p>Any idea on how to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I understand from your question, you want to add the current git repo name with each line from <code>git log</code>.</p>
<p>Since you tagged Python, this might be a long shot, but you can use <a href="https://github.com/gitpython-developers/GitPython" rel="nofollow noreferrer">GitPython</a> to determine if the subfolders inside a folder are git repositories. Then you can open a <code>git log</code> command with <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen()</code></a>, and print out each line with the repos name from stdout. </p>
<p>Make sure to <code>pip install GitPython</code> before running this code.</p>
<p>Here is an example:</p>
<pre><code>from os import listdir
from os import chdir
from os import getcwd

from os.path import abspath

from git import Repo
from git import InvalidGitRepositoryError

from subprocess import Popen
from subprocess import PIPE

# Current working directory with all git repositories
# You can change this path to your liking
ROOT_PATH = getcwd()

# Go over each file in current working directory
for file in listdir(ROOT_PATH):
    full_path = abspath(file)

    # Check if file is a git repository
    try:
        Repo(full_path)

        # Change to directory
        chdir(full_path)

        # Run git log command
        with Popen(
            args=['git', 'log', '--pretty=format:"%h - %an, %ar : %s"'],
            shell=False,
            stdout=PIPE,
            bufsize=1,
            universal_newlines=True,
        ) as process:

            # Print out each line from stdout with repo name
            for line in process.stdout:
                print('%s %s' % (file, line.strip()))

        # Change back to path
        chdir(ROOT_PATH)

    # If we hit here, file is not a git repository
    except InvalidGitRepositoryError:
        continue
</code></pre>
<p>This works for me when I run the script inside a folder with all my git repositories. </p>
<p><strong>Note:</strong> There is probably a nicer way to do this with the <code>git</code> command itself or with bash. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking for a fast GNU findutils + GNU Bash solution, look no further than:
</p>
<pre><code>find -type d -name '*.git' -execdir bash -c 'cd $0; cd ..; git --no-pager log --pretty=format:"${PWD##*/},%H,%s"' {} \;
</code></pre>
</div>
