<div class="post-text" itemprop="text">
<p>I am trying to create an adjacency list in python for coauthorship graph.
I have created a dictionary pf author</p>
<pre><code>{'a1': ' A-ming Hao',
 'a2': ' Qing-zhen Wang',
 'a3': ' Xiao-long Li',
 'a4': ' Ming-da Zhai'}
</code></pre>
<p>I have created edge in this way.</p>
<pre><code>g=nx.Graph()    

g.add_edge(y[0]['a1'],y[0]['a2'])
g.add_edge(y[0]['a2'],y[0]['a3'])
g.add_edge(y[0]['a3'],y[0]['a4'])
g.add_edge(y[0]['a4'],y[0]['a1'])
</code></pre>
<p>but I want to do it using for loop</p>
<pre><code>for key,val in (y[0].items()):
    g.add_edge(y[0][key],y[0][key])
</code></pre>
<p>I want this loop to iterate through each key.
and create edge like this </p>
<pre><code>g.add_edge(y[0][key],y[0][key+1])
</code></pre>
<p>so that an edge can be created between <code>key[a1]</code> and <code>key[a2],</code>.
in my for loop it is actually an edge between <code>key[a1]</code> and <code>key[a1]</code>.</p>
<p>and when it reach to last <code>key[a4]</code> connect it first <code>key[a1]</code></p>
<p>any idea? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use list slicing on the <code>dict.keys()</code> in combination with <code>zip()</code> to get your tuples to put into your graph:</p>
<pre><code>authors = {'a1': ' A-ming Hao',
           'a2': ' Qing-zhen Wang',
           'a3': ' Xiao-long Li',
           'a4': ' Ming-da Zhai'}

keys = list(authors .keys())

# zip keys with itself - rotated by 1 element
tups = list(zip(keys, keys[1:]+keys[0:1]))

print(tups)
</code></pre>
<p>Output:</p>
<pre><code>[('a1', 'a2'), ('a2', 'a3'), ('a3', 'a4'), ('a4', 'a1')]
</code></pre>
<p>with those tuples you can do:</p>
<pre><code>g = nx.Graph()
for a,b in tups:
    g.add_edge(authors[a], authors[b])
</code></pre>
<hr/>
<p>You should keep in mind that the order in which keys are presented might vary - if you need to ensure insertion order you need to use:</p>
<ul>
<li><code>python 3.7</code> up guarantees insertion order on dicts </li>
<li><code>CPython 3.6</code> up has insertion order by implementation detail/sideeffect</li>
<li>or use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> </li>
</ul>
<p>to begin with ( or use <code>keys = sorted(d.keys())</code> )</p>
<hr/>
<p>For dict insertion order, read information @  <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">Are dictionaries ordered in Python 3.6+?</a></p>
</div>
