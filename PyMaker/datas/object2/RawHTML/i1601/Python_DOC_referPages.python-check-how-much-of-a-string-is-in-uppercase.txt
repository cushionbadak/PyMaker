<div class="post-text" itemprop="text">
<p>I have a text, and I want to know if all or a percent bigger than 50% is in uppercase.</p>
<blockquote>
<p>DOFLAMINGO WITH TOUCH SCREEN lorem ipsum</p>
</blockquote>
<p>I try to use regex(found here a solution):</p>
<pre><code>rx = re.compile(r"^([A-Z ':]+$)", re.M)
upp = rx.findall(string)
</code></pre>
<p>But this finds all caps, i don't know if all or more than 50 percent(this includes all) is uppercase ?</p>
<p>I want to number only letters (so no numbers,spaces, new lines etc)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow noreferrer"><code>str.isalpha</code></a> to clean out non-alphabetic chars and <a href="https://docs.python.org/3/library/stdtypes.html#str.isupper" rel="nofollow noreferrer"><code>str.isupper</code></a> to count uppercase chars and calculate the ratio:</p>
<pre><code>s = 'DOFLAMINGO WITH TOUCH SCREEN lorem ipsum'

alph = list(filter(str.isalpha, s))  # ['D', ..., 'O', 'W', ..., 'N', 'l', 'o', ...]
sum(map(str.isupper, alph)) / len(alph)
# 0.7142857142857143
</code></pre>
<p>Also see the docs on <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> which you might find yourself using regularly. Moreover, this uses the fact that <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer"><code>bool</code> is a subclass of <code>int</code></a> and is cast appropriately for the summation which might be too implicit for the taste of some.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regex seems overkill here. You can use <code>sum</code> with a generator expression:</p>
<pre><code>x = 'DOFLAMINGO WITH TOUCH SCREEN lorem ipsum'

x_chars = ''.join(x.split())  # remove all whitespace
x_upper = sum(i.isupper() for i in x_chars) &gt; (len(x_chars) / 2)
</code></pre>
<p>Or functionally via <code>map</code>:</p>
<pre><code>x_upper = sum(map(str.upper, x_chars)) &gt; (len(x_chars) / 2)
</code></pre>
<p>Alternatively, via <code>statistics.mean</code>:</p>
<pre><code>from statistics import mean

x_upper = mean(i.isupper() for i in s if not i.isspace()) &gt; 0.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generic solution that works with any boolean function and iterable (see below for version that only looks at <code>str.isalpha()</code>):</p>
<pre><code>def percentage(data, boolfunc):
    """Returns how many % of the 'data' returns 'True' for the given boolfunc."""
    return (sum(1 for x in data if boolfunc(x)) / len(data))*100

text = "DOFLAMINGO WITH TOUCH SCREEN lorem ipsum"

print( percentage( text, str.isupper ))
print( percentage( text, str.islower ))
print( percentage( text, str.isdigit ))
print( percentage( text, lambda x: x == " " ))
</code></pre>
<p>Output:</p>
<pre><code>62.5  # isupper
25.0  # islower
0.0   # isdigit
12.5  # lambda for spaces
</code></pre>
<hr/>
<p>even better is schwobaseggl's  </p>
<pre><code>return sum(map(boolfunc,data)) / len(data)*100
</code></pre>
<p>because it does not need to persist a list but instead uses a generator.</p>
<hr/>
<p>Edit: 2nd version that only uses str.isalpha characters and allows multiple boolfuncs:</p>
<pre><code>def percentage2(data, *boolfuncs):
    """Returns how many % of the 'data' returns 'True' for all given boolfuncs.
    Only uses str.isalpha() characters"""
    return (sum(1 for x in data if all(f(x) for f in boolfuncs)) / sum(
                for x in data if str.isalpha(x)))*100

text = "DOFLAMINGO WITH TOUCH SCREEN lorem ipsum"

print( percentage2( text, str.isupper, str.isalpha ))
print( percentage2( text, str.islower, str.isalpha ))
</code></pre>
<p>Output:</p>
<pre><code>71.42857142857143
28.57142857142857
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using regular expressions, this is one way you can do it  (given that <code>s</code> is the string in question):</p>
<pre><code>upper = re.findall(r'[A-Z]', s)
lower = re.findall(r'[a-z]', s)
percentage = ( len(upper) / (len(upper) + len(lower)) ) * 100
</code></pre>
<p>It finds the lista of both uppercase and lowercase characters and gets the percentage using their lengths.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way to do it:</p>
<pre><code>f = sum(map(lambda c: c.isupper(), f)) / len(f)
(sum(map(lambda c: c.isupper(), f)) / len(f)) &gt; .50  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like the following should work.</p>
<pre><code>string = 'DOFLAMINGO WITH TOUCH SCREEN lorem ipsum'
rx = re.sub('[^A-Z]', '', string)
print(len(rx)/len(string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this, it's short and does the job:</p>
<pre><code>text = "DOFLAMINGO WITH TOUCH SCREEN lorem ipsum"
print("Percent in Capital Letters:", sum(1 for c in text if c.isupper())/len(text)*100)
# Percent in Capital Letters: 62.5
</code></pre>
</div>
<span class="comment-copy">Or you could use: <code>statistics.mean(ch.isupper() for ch in s if not ch.isspace())</code></span>
<span class="comment-copy">@JonClements, Yep, good point, but a <i>little</i> messier I think because of the <code>if</code> condition.</span>
<span class="comment-copy">Well, since you're iterating character by character anyway to do the isupper check, I think it's a bit messier to do <code>''.join(x.split())</code> to create a new string to iterate over :)</span>
<span class="comment-copy"><code>( len(upper) / len(upper) + len(lower) )</code> == 1 + len(lower)</span>
<span class="comment-copy">@Matthieu Brucher, I'll edit and provide some.</span>
<span class="comment-copy">@Patrick Artner, I missed a pair of parenthesis. I'll edit the answer.</span>
