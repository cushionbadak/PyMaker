<div class="post-text" itemprop="text">
<p>I am writting simple API manager and I have problem with using dictionary in method here is what I wrote so far:</p>
<pre><code>class BnManager():
    def __init__(self, api_key, api_secret):

        self.api_key = api_key
        self.api_secret = api_secret
        self.client = Client(api_key, api_secret)

    def get_candles(self, symbol, interval):
        self.symbol = symbol
        self.interval = interval
        choice = {
            '1m' : Client.KLINE_INTERVAL_1MINUTE,
            '3m' : Client.KLINE_INTERVAL_3MINUTE,
            '5m' : Client.KLINE_INTERVAL_5MINUTE,
            '15m' : Client.KLINE_INTERVAL_15MINUTE,
            '30m' : Client.KLINE_INTERVAL_30MINUTE,
            '1h' : Client.KLINE_INTERVAL_1HOUR,
            '2h' : Client.KLINE_INTERVAL_2HOUR,
            '4h' : Client.KLINE_INTERVAL_4HOUR,
            '6h' : Client.KLINE_INTERVAL_6HOUR,
            '8h' : Client.KLINE_INTERVAL_8HOUR,
            '12h' : Client.KLINE_INTERVAL_12HOUR,
            '1d' : Client.KLINE_INTERVAL_1DAY,
            '3d' : Client.KLINE_INTERVAL_3DAY,
            '1w' : Client.KLINE_INTERVAL_1WEEK,
            '1m' : Client.KLINE_INTERVAL_1MONTH,
            }
        self.klines = self.client.get_klines(
            self.symbol, choice[self.interval])
        self.df = pd.DataFrame(self.klines, columns=[
            'Date', 'Open', 'High', 'Low', 'Close', 'Volume',
            'x', 'x1', 'x2', 'x3', 'x4', 'x5'])
        self.df.drop(labels=['x', 'x1', 'x2', 'x3', 'x4', 'x5'],
                     axis=1, inplace=True).astype(float)
        self.df['Date'] = date2num(pd.to_datetime(df.Date, unit='ms'))
        self.df['Change'] = df['Close'].diff()
</code></pre>
<p>Problem appears when I try to execute <code>get_candles</code> method. 
For example when I write <code>manager.get_candles('BTCUSDT', '1m')</code> I am getting:</p>
<blockquote>
<p>self.symbol, choice[self.interval] TypeError: get_candles() takes 1
  positional argument but 3 were given</p>
</blockquote>
<p>I know this is probably trivial question but I really do not see where the problem is. And my second question: how to write it without using <code>dict</code> . I mean I would like to achieve something like : </p>
<pre><code>self.klines = self.client.get_klines(
            self.symbol, Client.KLINE_INTERVAL_+interval)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the rewriting question you could look into <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">Programmatic access to enumeration members and their attributes</a>. Basically the documentation explains that you can use strings as keys for Enums.</p>
<pre><code>from enum import Enum

class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3

print(Color['RED'])  # output: &lt;Color.RED: 1&gt;
</code></pre>
</div>
<span class="comment-copy">Which get_klines method is throwing that error? Because you've defined a get_klines method but you're also calling client.get_klines. What was the call that threw the error?</span>
<span class="comment-copy">Please include the <code>Client.get_klines(...)</code> definition, since that is the function call that is causing the error. As far as I can see from the error message though, you are try to push three arguments to it <code>(self, self.symbol, choice[self.interval])</code> but it expects only one <code>(self) </code></span>
<span class="comment-copy">I was calling BnManager instance .get_klines() . The one :<code>def get_klines(self, symbol, interval):</code></span>
<span class="comment-copy">Can you post the full traceback?</span>
<span class="comment-copy">Hey @tookas92 Maybe those are not positional arguments but keyword arguments. Try passing with symbol= and inverval=</span>
