<div class="post-text" itemprop="text">
<p>I have a frequency counter, to iterate through a list of times and tell me how often each number comes up. First, I run it through a function to remove the decimals using <code>int()</code>. I check this with a print statement at the bottom, it works fine. But for some reason, even though the frequency thing comes after I change the  the values with <code>int()</code>. Here is my code and I'll give some output.</p>
<pre><code>from itertools import groupby
times = [1.23, 1.23, 2.56, 1.23, 1.23, 1.23, 1.23, 1.5, 4.32, 5.3, 2.5, 5.7, 3.4, 8.9, 8.9, 8.9]
newtimes = []
lentimes = len(times)


for time in times:
  #Rounds down every time
  time = int(time)
  #Adds time to new list
  newtimes.append(time)

setTimes = list(set(newtimes))


freqlist = [len(list(group)) for key, group in groupby(newtimes)]

print(newtimes)
print(lentimes)
print(setTimes)
print("Freqlist is " + str(freqlist))
</code></pre>
<p>the output looks like:</p>
<pre><code>[1, 1, 2, 1, 1, 1, 1, 1, 4, 5, 2, 5, 3, 8, 8, 8]
16
[1, 2, 3, 4, 5, 8]
Freqlist is [2, 1, 5, 1, 1, 1, 1, 1, 3]
</code></pre>
<p>It took my a while to figure out what was up with the freqlist output, it's doing everything right, but it is doing times, not newtimes (where we drop the decimals), even though it should be after we drop the decimals. Any ideas? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> works for <strong>consecutive similar items only</strong>. It requires a sorted <em>input</em> to work in the way you expect. You also don't need to create intermediary lists; instead, you can use <code>sum</code> with a generator expression:</p>
<pre><code>freqlist = [sum(1 for _ in group) for key, group in groupby(sorted(newtimes))]
</code></pre>
<p>Sorting takes O(<em>n</em> log <em>n</em>) time. For an O(<em>n</em>) solution, you can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

d = Counter(map(int, times))

Counter({1: 7, 2: 2, 4: 1, 5: 2, 3: 1, 8: 3})
</code></pre>
<p>Then, if you wish, extract values in a list after sorting by key:</p>
<pre><code>keys, values = zip(*sorted(d.items()))

print(values)

(7, 2, 1, 1, 2, 3)
</code></pre>
</div>
<span class="comment-copy">You're probably right, what way would you recommend?</span>
