<div class="post-text" itemprop="text">
<p>I'm trying to record some stats on a script I'm running in python (a few percentages, less than 12 characters worth). I want it to be efficient. I want the stats to keep being updated as the script runs so that if the script were to exit I still have the stats available to be updated when I run the script again. </p>
<p>I've thought of ways such as recording in a csv (seems inefficient since there looks to be no functionality to keep updating the same row ), updating the title of a file within the system. But can think of nothing which is as clean and efficient as I was hoping. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could store it in a .txt file if you'd like really, or anything. Using the built in module for .csv files in Python, overwriting rows directly - rather than having to recreate the file - isn't possible AFAIK. Check out the sqlite3 module for storing the information in a database. </p>
<p><a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sqlite3.html</a></p>
</div>
<span class="comment-copy">For small scripts, with not many updates write, it's fine to store to a simple txt file, you don't need csv with just a single value. But if there are many operations, the best way might be to use SQLite, and sqlite3 as driver in Python.</span>
<span class="comment-copy">Good ideas. Any idea on the efficiency of using an sql database for this vs. opening a .txt file recording the text and closing the file?</span>
<span class="comment-copy">You could do this perfectly fine on text file if that's okay with you when you are reading it.  When you are creating a solution remember to manipulate all of your data within python in some sort of a data structure before making a system "write()" call. Without implementing this standard your performance would decrease incrementally as you scaled the amount of data points per epoch. How often do you play on performing these operations and how long do you want to store the data? Do you plan on manipulating it in the future? These are three questions that could all lead to different answers.</span>
