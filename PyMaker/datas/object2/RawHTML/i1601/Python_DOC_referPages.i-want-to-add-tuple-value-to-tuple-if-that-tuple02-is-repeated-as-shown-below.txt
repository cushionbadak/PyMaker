<div class="post-text" itemprop="text">
<p>Here i have list</p>
<pre><code>some_list = [('A','B','IP1','N1'),('A','B','IP3','N3'),('B','C','IP2','N2'),('B','C','IP3','N3'),('D','F','IP4','N4')]
</code></pre>
<p>for suppose <code>'A','B'</code> is in <code>('A','B','IP1','N1'),('A','B','IP3','N3')</code>
then we need to combine both tuple and make as one tuple and replace <code>('A','B','IP1','N1'),('A','B','IP3','N3')</code> with <code>('A','B','IP1','N1','IP3','N3')</code> in <code>some_list</code></p>
<p>Result:</p>
<pre><code>some_list = [('A','B','IP1','N1','IP3','N3'), ('B','C','IP2','N2','IP3','N3'), ]
</code></pre>
<p>should come but make sure instead of 'A', 'B','C',.. what ever it'll not be same for everytime</p>
<p>Can you help me with that?</p>
</div>
<div class="post-text" itemprop="text">
<p>basically you need to create a tuple key for your 2 values, and create a default dictionary with that.</p>
<p>Extend the rest of the list for each key, and transform back the key/value couple to list of lists by adding the key (as list) to the value</p>
<p>like this:</p>
<pre><code>import collections

some_list = [('A','B','IP1','N1'),('A','B','IP3','N3'),('B','C','IP2','N2'),('B','C','IP3','N3'),('D','F','IP4','N4')]

c = collections.defaultdict(list)
for k1,k2,*b in some_list:   # extended iterable unpacking allows this
    c[(k1,k2)].extend(b)  # add to existing list or create a new one

result = [a+tuple(b) for a,b in c.items()]
</code></pre>
<p>result:</p>
<pre><code>&gt;&gt;&gt; result
[('D', 'F', 'IP4', 'N4'),
 ('B', 'C', 'IP2', 'N2', 'IP3', 'N3'),
 ('A', 'B', 'IP1', 'N1', 'IP3', 'N3')]
</code></pre>
<p>The <code>for k1,k2,*b in some_list</code> part allows to put the 2 first values in separate <code>k1</code> and <code>k2</code> variables, and the "rest" in a <code>b</code> list. This feature isn't available in python 2. Python 2 users can replace the loop by a more basic:</p>
<pre><code>for a in some_list:
    c[tuple(a[:2])].extend(a[2:])  # add to existing list or create a new one
</code></pre>
<p>(this problem is similar to that one: <a href="https://stackoverflow.com/questions/52454582/merge-tuples-with-the-same-key">Merge tuples with the same key</a> for the core part, but the pre/post processing makes it different)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> to group the tuples by the first two items, then combine the rest of the tuple at the end with flattening:</p>
<pre><code>from itertools import groupby
from itertools import chain
from pprint import pprint


some_list = [
    ("A", "B", "IP1", "N1"),
    ("A", "B", "IP3", "N3"),
    ("B", "C", "IP2", "N2"),
    ("B", "C", "IP3", "N3"),
    ("D", "F", "IP4", "N4"),
]

# key -&gt; first two, rest -&gt; everything after first two
key, rest = lambda x: x[:2], lambda x: x[2:]

pprint(
    [
        list(chain.from_iterable((k, *tuple(map(rest, g)))))
        for k, g in groupby(sorted(some_list, key=key), key=key)
    ]
)
</code></pre>
<p>Which gives the following:</p>
<pre><code>[['A', 'B', 'IP1', 'N1', 'IP3', 'N3'],
 ['B', 'C', 'IP2', 'N2', 'IP3', 'N3'],
 ['D', 'F', 'IP4', 'N4']]
</code></pre>
<p>The above uses <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable()</code></a> to flatten the grouped tuple of tuples. You also need to sort the list of tuples by the first two items, in order to group them with <code>itertools.groupby()</code>. This is because it groups by consecutive keys in an iterable, which you can only achieve by sorting. </p>
<p>Additionally, If your list of tuples are always of length 4 and the key is always the first two items, you can also use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operater.itemgetter()</code></a> for <code>key</code> and <code>rest</code>:</p>
<pre><code>from operator import itemgetter
key, rest = itemgetter(0, 1), itemgetter(2, 3)
</code></pre>
<p>Which looks up the first two values <em>(0, 1)</em> and last two values <em>(2, 3)</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can also try below code.</p>
<pre><code>&gt;&gt;&gt; def get_combined_items(tup1, tup2):
...     l = list(tup1)
...     for item in tup2:
...         if item not in l:
...             l.append(item)
...     return l
...
&gt;&gt;&gt;
&gt;&gt;&gt; if len(some_list) % 2 == 0: # even number of items
...     some_list = [tuple(get_combined_items(some_list[i], some_list[i + 1])) for i in range(0, len(some_list) - 1, 2)]
... else:
...     last_item = some_list[-1] # save last item
...     some_list = [tuple(get_combined_items(some_list[i], some_list[i + 1])) for i in range(0, len(some_list) - 1, 2)]
...     some_list = some_list + [last_item]
...
&gt;&gt;&gt; some_list
[('A', 'B', 'IP1', 'N1', 'IP3', 'N3'), ('B', 'C', 'IP2', 'N2', 'IP3', 'N3'), ('D', 'F', 'IP4', 'N4')]
&gt;&gt;&gt;
</code></pre>
<p>And if you want to try 3rd party package then install <code>ordered-set</code> using <code>pip install ordered-set</code>. </p>
<blockquote>
<p>» pip install ordered-set</p>
</blockquote>
<p>You can check <a href="https://pypi.org/project/ordered-set/" rel="nofollow noreferrer">https://pypi.org/project/ordered-set/</a>.</p>
<blockquote>
<p><strong>Note:</strong> This is just to keep the elements in order after passing the combined tuple to <code>set()</code>.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; from ordered_set import OrderedSet
&gt;&gt;&gt;
&gt;&gt;&gt; some_list = [('A','B','IP1','N1'),('A','B','IP3','N3'),('B','C','IP2','N2'),('B','C','IP3','N3'),('D','F','IP4','N4')]
&gt;&gt;&gt;
&gt;&gt;&gt; if len(some_list) % 2 == 0: # even number of items
...     some_list = [tuple(OrderedSet(some_list[i] + some_list[i + 1])) for i in range(0, len(some_list) - 1, 2)]
... else:
...     last_item = some_list[-1] # save last item
...     some_list = [tuple(OrderedSet(some_list[i] + some_list[i + 1])) for i in range(0, len(some_list) - 1, 2)]
...     some_list = some_list + [last_item]
...
&gt;&gt;&gt;
&gt;&gt;&gt; some_list
[('A', 'B', 'IP1', 'N1', 'IP3', 'N3'), ('B', 'C', 'IP2', 'N2', 'IP3', 'N3'), ('D', 'F', 'IP4', 'N4')]
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Just install <code>ordered-set</code>, check <a href="https://pypi.org/project/ordered-set/" rel="nofollow noreferrer">pypi.org/project/ordered-set</a>. After that you can try <code>some_list = [tuple(set(some_list[i] + some_list[i + 1])) for i in range(0, len(some_list) - 1, 2)]</code> to get the result. I have written this in the answer where you can see the differences with <code>set()</code> and <code>OrderedSet()</code>.</span>
<span class="comment-copy">for k1,k2,*b in some_list:   # extended iterable unpacking allows this               ^ SyntaxError: invalid syntax</span>
<span class="comment-copy">I'm getting this error</span>
<span class="comment-copy">you're using python 2. Let me add a compatible solution</span>
<span class="comment-copy">ok result tuples are now list how can i convert it back?</span>
<span class="comment-copy">changed final conversion</span>
<span class="comment-copy">Thanks for response Can you please check this question also?<a href="https://stackoverflow.com/questions/53363521/need-to-avoid-nested-for-loop-as-it-is-repeating-70007000-times-for-7000-rows?noredirect=1#comment93603732_53363521" title="need to avoid nested for loop as it is repeating 70007000 times for 7000 rows">stackoverflow.com/questions/53363521/…</a></span>
<span class="comment-copy">In Input there is also ('D','F','IP4','N4') which is missing in your result</span>
<span class="comment-copy">As I understood, you want to loop through 2 items in each iteration. So, what should be the final answer in this case. Just paste, I will fix and update my answer. I saw, it is also missing in your question, the <code>result</code> value.</span>
<span class="comment-copy">some_list_input = [('A','B','IP1','N1'),('A','B','IP3','N3'),('B','C','IP2','N2'),('B','C','IP3','N3'),('D','F','IP4','N4')] and my output list should be [('A', 'B', 'IP1', 'N1', 'IP3', 'N3'), ('B', 'C', 'IP2', 'N2', 'IP3', 'N3'), ('D','F','IP4','N4')] and index shouldn't change and i shouldn't install any outside packages only i need to use inbuilt packages</span>
<span class="comment-copy">Okay, got, thanks for reply &amp; now I have updated my answer, you can check.</span>
<span class="comment-copy">Sorry as I have mentioned that I shouldn't install any outside packages only python inbuilt packages need to be used</span>
