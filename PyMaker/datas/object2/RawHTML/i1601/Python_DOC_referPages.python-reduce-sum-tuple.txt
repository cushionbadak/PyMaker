<div class="post-text" itemprop="text">
<p>I have an input that will vary in size.  </p>
<pre><code>data = [(("101","A"),5), (("105","C"),12), (("101", "B"),4)]
</code></pre>
<p>Looking for an output that groups by key[0], keeps all items of key[1]. And, sums up the values.</p>
<pre><code>output = [(("101", "A", "B"),9), (("105", "C"),12)]
</code></pre>
<p>I've tried.  </p>
<pre><code>my_dict = dict(data)
final_values = {}
for k,v in my_dict.items():
    key1 = k[0]
    key2 = k[1]

    if key1 not in final_values:
        final_values[key1] = []
    final_values[key1].append(key2)
    final_values[key1].append(v)
</code></pre>
<p>Which returns.</p>
<pre><code>{'101': ['A', 5, 'B', 4], '105': ['C', 12]}
</code></pre>
<p>I'd like to get the sum of the numbers in the list. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> to group the items, then flattening the results at the end:</p>
<pre><code>from collections import defaultdict
from operator import itemgetter

data = [(("101","A"),5), (("105","C"),12), (("101", "B"),4)]

d = defaultdict(list)
for (x, y), z in data:
    d[x].append((y, z))

result = [
    ((k, *tuple(map(itemgetter(0), v))), sum(map(itemgetter(1), v)))
    for k, v in d.items()
]
print(result)
# [(('101', 'A', 'B'), 9), (('105', 'C'), 12)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for k in final_values:
    print '%s: sum is %d' % (k, sum([x for x in final_values[k] if type(x) is int]))
</code></pre>
</div>
