<div class="post-text" itemprop="text">
<p>for example, </p>
<pre><code>d1 == {'inds': [9, 9, 1, 9, 8, 1], 
       'vals': [0.28, 0.84, 0.71, 0.03, 0.04, 0.75]}

d2 == {'inds': [0, 9, 9, 1, 3, 3, 9], 
       'vals': [0.26, 0.06, 0.46, 0.58, 0.42, 0.21, 0.53, 0.76]}
</code></pre>
<p>how to return the common index by a function below?</p>
<pre><code>find_common_inds(d1, d2) == [1, 9]
</code></pre>
<p>here is my code but it seems not working</p>
<pre><code>intersect = []
for key in d1.keys():
    if key in d2.keys():
           intersect.append(key)
print(intersect)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use set intersection on flattened list of values:</p>
<pre><code>from itertools import chain

d1 = {'inds': [9, 9, 1, 9, 8, 1], 'vals': [0.28, 0.84, 0.71, 0.03, 0.04, 0.75]}

d2 = {'inds': [0, 9, 9, 1, 3, 3, 9], 'vals': [0.26, 0.06, 0.46, 0.58, 0.42, 0.21, 0.53, 0.76]}

print(set(chain.from_iterable(d1.values())).intersection(chain.from_iterable(d2.values())))
# {9, 1}
</code></pre>
<p><strong>References</strong>:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#frozenset.intersection" rel="nofollow noreferrer">set.intersection()</a>.</p></li>
<li><p>Flattening lists using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer">chain.from_iterable()</a>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can change your function to:</p>
<pre><code>def find_common_values_in_identical_keys(d1,d2,**kwargs):
    if 'keyname' in kwargs: 
        kn = kwargs['keyname']   # this is hard  :P and it would still allow a "key"
                                 # that's not a hashable so it will crash donw below :/
    if kn: 
        try:
            return list(set(d1.get(kn, set())).intersection(d2.get(kn, [])))
        except TypeError as e:
            print("Bad keyname:", e)
    else:
        return [(k,find_common_values_in_identical_keys(d1,d2,keyname = k)) 
                for k in set(d1.keys()).union(d2)]  



d1 = {'inds': [9, 9, 1, 9, 8, 1], 
      'vals': [0.28, 0.84, 0.71, 0.03, 0.04, 0.75]}

d2 = {'inds': [0, 9, 9, 1, 3, 3, 9], 
      'vals': [0.26, 0.06, 0.46, 0.58, 0.42, 0.21, 0.53, 0.76]}


print(find_common_values_in_identical_keys(d1,d2,"inds"))
</code></pre>
<p>wich then prints:</p>
<pre><code>[9,1] # the order is random as sets are inheritently unordered 
</code></pre>
<p>This also handles the case for <em>all</em> keys:</p>
<pre><code>print(find_common_values_in_identical_keys(d1,d2))  
</code></pre>
<p>Output:</p>
<pre><code>[('vals', []), ('inds', [9, 1])]
</code></pre>
<p>returning a list of tuples of (keyname, [list of identical values])</p>
<hr/>
<p>You might still want to guard against <code>d1</code> &amp; <code>d2</code> being not <code>dict</code>ionaries using <code>isinstance(...)</code> and throwing <code>ValueError</code>s to make it more foolproof.</p>
</div>
<span class="comment-copy">You would probably have more luck getting an answer if you provided some explanation about your data structure and how you are supposed to derive the output from your inputs.</span>
<span class="comment-copy">Does your <i>common index</i> means common elements of 2 lists <code>inds</code> in <code>d1</code> and <code>d2</code>?</span>
<span class="comment-copy">You've got some stuff converting to sets here unnecessarily... <code>df1.keys() | df2.keys() </code> will give you a set back without the explicit conversions... and where you have a keyname you can use: <code>list(set(d1.get(keyname, set())).intersection(d2.get(keyname, []))</code>... as <code>.intersection</code> can take any iterable</span>
<span class="comment-copy">One other thing to consider is the <code>if keyname</code> check... empty strings, numbers equalling zero and indeed <code>None</code> itself are valid keys in a dictionary (albeit it not necessarily common) - so you might want to consider a sentinel value there so you can work with <code>None</code>/0/<code>''</code> etc... if necessary...</span>
<span class="comment-copy">@JonClements sentinel ... wouldn't  <code>if keyname in d1 or keyname in d2:</code> solve that? The <code>keyname=None</code> would then only work as sugar to enable calling the func with only 1 param ... wouldn't look for someone putting a None as key - 0 though is very likely as might empty strings - all being Falsy.</span>
<span class="comment-copy">Probably a simple change is to make it <code>**kwargs</code> and then check <code>if 'keyname' in kwargs</code>...</span>
<span class="comment-copy">Not quite... you want <code>if 'keyname' in kwargs: kn = kwargs['keyname']; return list(set(...))</code> else you'll still miss cases where the key happens to be a falsy value. (The current change is no different than default <code>keyname=None</code> itself...)</span>
