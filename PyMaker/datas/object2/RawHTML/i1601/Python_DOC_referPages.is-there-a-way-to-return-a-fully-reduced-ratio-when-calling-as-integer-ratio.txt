<div class="post-text" itemprop="text">
<p>I noticed something strange when calling .as_integer_ratio() on some floats. for example:</p>
<pre><code>(2.2).as_integer_ratio()
</code></pre>
<p>This will return a tuple:
(2476979795053773, 1125899906842624)</p>
<p>I was wondering if I could get it to return 11/5 directly somehow?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/q/588004/364696">Floating point can't actually represent most values as typed</a>. 2.2 is a convenient shorthand for the closest value to 2.2, but 2.2 doesn't actually exist:</p>
<pre><code>&gt;&gt;&gt; print('{:.16f}'.format(2.2))
2.2000000000000002
</code></pre>
<p>If you want decimal accurate representations, you'll need to use <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">the <code>decimal</code> module</a> instead of <code>float</code>:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('2.2').as_integer_ratio()  # Constructing from str is *mandatory* for proper precision
(11, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer by @ShadowRanger is correct. The value "2.2" is converted to the closest binary fraction. And <code>.as_integer_ratio()</code> returns that binary fraction. However, there are other nearby rational numbers that result in the same binary representation when converted to a float. It is possible to find a simpler fraction using a <a href="https://en.wikipedia.org/wiki/Stern%E2%80%93Brocot_tree" rel="nofollow noreferrer">Stern-Brocot</a> tree.</p>
<p><code>gmpy2</code> has an implementation of the Stern-Brocot algorithm and it is exposed as <code>.as_simple_fraction()</code>.</p>
<pre><code>&gt;&gt;&gt; gmpy2.mpfr("2.2").as_integer_ratio()
(mpz(2476979795053773), mpz(1125899906842624))
&gt;&gt;&gt; gmpy2.mpfr("2.2").as_simple_fraction()
mpq(11,5)
</code></pre>
</div>
<span class="comment-copy">Except 11/5 is incorrect. <a href="https://stackoverflow.com/q/588004/364696">2.2 can't be represented exactly</a> (there is no such thing as 2.2 in IEEE 754 binary floating point). The ratio given is the fully reduced ratio for the representable value closest to 2.2.</span>
