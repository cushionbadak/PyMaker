<div class="post-text" itemprop="text">
<p>The following code outputs False, when according to the Python Order of Operations it should output True (the order should be in -&gt; ==, not the other way around). Why is == coming before in?</p>
<pre><code>y = "33"
"3" in y == True
</code></pre>
<p>Output</p>
<pre><code>False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The existing answers give helpful advice that you shouldn't compare booleans to <code>True</code> because it's redundant. However, none of the answers actually answer the root question: "why does <code>"3" in y == True</code> evaluate to <code>False</code>?".</p>
<p>That question was answered in a comment by juanpa.arrivillaga:</p>
<blockquote>
<p>Also, this is an instance of <em>operator chaining</em>, since <code>==</code> and <code>in</code> both count as comparison operators. So this is evaluated as <code>('3' in y) and (y == True)</code></p>
</blockquote>
<p>In Python, comparison operators can be <em>chained</em>. For example, if you want to check that <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are increasing, you can write <code>a &lt; b &lt; c &lt; d</code> instead of <code>a &lt; b and b &lt; c and c &lt; d</code>. Similarly, you can check that they are all equal with <code>a == b == c == d</code>.</p>
<p>Chained comparisons are described in the Python documentation <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer">here</a>:</p>
<blockquote>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In python, comparisons, memberships tests and identity tests all have the same precedence.
The keyword <code>in</code> which checks for membership returns a <code>bool</code>, there is no need for extra compare with a second <code>bool</code>. However, you can group the expressions like so...</p>
<p><code>y = "33"</code></p>
<p><code>("3" in y) == True</code></p>
</div>
<span class="comment-copy">the <code>in</code> and the <code>==</code>  operator have the same precedence. So they are evaluated from left to right I belive. Why not using <code>()</code> so it is clear in the code what do you want? <code>("3" in "33") == True </code></span>
<span class="comment-copy">Also, this is an instance of <i>operator chaining</i>, since <code>==</code> and <code>in</code> both count as comparison operators. So this is evaluated as <code>('3' in y) and (y == True)</code></span>
<span class="comment-copy">Also, you never need to compare with True or False. If correctly parenthesized, your statement would mean True == True or False == True</span>
<span class="comment-copy">Also, why not simply write <code>3 in y</code>? there is no need to check a bool result against bool. You can read about <a href="https://stackoverflow.com/a/25753528/1918287">operator chaining here</a></span>
<span class="comment-copy">This doesn't answer the question of "why does <code>"3" in y == True</code> evaluate to <code>False</code>?"</span>
