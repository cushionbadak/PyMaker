<div class="post-text" itemprop="text">
<p>I am trying to call an object attribute with a variable based on user input. This is for a text game. The idea is the player types in 'hat', for example, and this function checks the player object's self.inventory = [] for Item objects named 'hat', and if such an object exists it will append the Item object to the player object's corresponding attribute, in this case self.helm = [].</p>
<p>To do this I am trying to have equipItem be a variable equal to the equipping item's class type which should be the same as one of the player objects' equipment attributes.</p>
<pre><code>move = input("To equip, unequip, or an use item, type [item name]. To trade 
in item for XP, type 't [item name]'. Type 'x' to exit inventory: 
").lower().split()

print(move[0])

for i in currentPlayer.inventory:
     print(i.name)
     if i.name == move[0]:
         print(i)
         equipItem = i.itemClass
         currentPlayer.equipItem.append(i)
         currentPlayer.inventory.remove(i)
         print(currentPlayer.equipItem)
</code></pre>
<p>But of course this throws an error because 'equipItem' in not a player attribute. So my question is how might I achieve the result I am after? Can  I use a variable to call object attributes?</p>
<p>I understand this is all probably quite janky and I am not married to this approach by any means, so any suggestions other approaches are welcome as well!</p>
<p>Player class and Item class below:</p>
<pre><code>class Player:
    def __init__(self, name):
        self.name = name
        self.health = 10
        self.maxHealth = 10
        self.inventory = [Item(1, 1), Item(2, 2)]
        self.weapon = [Item(0, 1)]
        self.helm = [Item(1, 0)]
        self.shield = [Item(5, 0)]
        self.boots = [Item(3, 0)]
        self.greaves = [Item(4, 0)]
        self.gloves = [Item(6, 0)]
        self.cuirass = [Item(2, 0)]
        self.defaultPotion = []
        self.attack = 5 + self.weapon[0].attack
        armorClass = self.helm[0].defense + self.shield[0].defense + 
        self.boots[0].defense + self.greaves[0].defense + 
        self.gloves[0].defense 
        + self.cuirass[0].defense
        self.defense = 1 + armorClass
        self.level = 1
        self.experience = 0
        self.offensiveMagic = 0
        self.defenseiveMagic = 0
        self.offensiveCombat = 0
        self.weightClass = 10

    def __str__(self):
        return self.name

class Item:

    def __init__(self, itemType, subType):
        #denotes type of item (wepaon, gloves, etc)
        self.itemType = allItems[itemType]
        #denotes item name and stats (sword, attack value, etc)
        self.subType = self.itemType[subType]
        #denotes how item is used (euip, consume, etc)self.subType = 0:
        if subType == 0:
            self.itemClass = 'weapon'
        elif subType == 1:
            self.itemClass = 'helm'
        elif subType == 2:
            self.itemClass = 'cuirass'
        elif subType == 3:
            self.itemClass = 'boots'
        elif subType == 4:
            self.itemClass = 'greaves'
        elif subType == 5:
            self.itemClass = 'shield'
        elif subType == 6:
            self.itemClass = 'gloves'
        self.name = self.subType['name']
        self.attack = self.subType['attack']
        self.defense = self.subType['defense']
        # self.equip = 'no'

    def __str__(self):
        return self.itemType
        return self.name
        return self.attack
        return self.defense
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get an object's attribute by name, use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> builtin function. For example: <code>getattr(currentPlayer, equipItem).append(i)</code>. To assign to an attribute, use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a>.</p>
</div>
<span class="comment-copy">You need to <a href="https://stackoverflow.com/posts/53346413/edit">edit</a> your question and make something runnable that reproduces the problem. See <a href="https://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable Example</a>.</span>
<span class="comment-copy">My question was answered below but thank you for the resource :)</span>
<span class="comment-copy">getattr(currentPlayer, equipItem).append(i) is throwing the same error.</span>
<span class="comment-copy">@Matt What error? Please post any error message you've got.</span>
<span class="comment-copy">Sorry,   AttributeError: 'Player' object has no attribute 'equipItem'</span>
<span class="comment-copy">@Matt Haven't you accidentally type <code>getattr(currentPlayer.equipItem)</code> (dot instead of a comma)? <code>currentPlayer</code> and <code>equipItem</code> are two separate arguments, and they should be separated by a comma. Try <code>getattr(currentPlayer, "helm")</code>.</span>
<span class="comment-copy">Ah, I didn't use a dot but I did still have print(currentPlayer.equipItem) which was throwing the error. Changed that and it works now, Thanks for the help!</span>
