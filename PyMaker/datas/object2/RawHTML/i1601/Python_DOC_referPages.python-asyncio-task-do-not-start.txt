<div class="post-text" itemprop="text">
<p>I'm trying to understand python asyncio lib, but it's a pain and each time I think i know how the code will behave, something suprises me.</p>
<p>I have the following code:</p>
<pre><code>async def a():
    while True:
        task = asyncio.current_task()  # asyncio.Task.current_task()
        print(task.name)
        await asyncio.sleep(0.5)

async def main():
    tasks = []

    for i in range(10):
        c = a()
        task = asyncio.create_task(c)
        task.name = "task nr {}".format(i)
        tasks.append(task)

    for task in tasks:
        await task

asyncio.run(main())
</code></pre>
<p>Would result with the following output as suspected:</p>
<pre><code>task nr 0
task nr 1
task nr 2
task nr 3
task nr 4
task nr 5
task nr 6
task nr 7
task nr 8
task nr 9
</code></pre>
<p>and so on.
On the other hand I have a code</p>
<pre><code>async def a():
    while True:
        task = asyncio.current_task()  # asyncio.Task.current_task()
        print(task.name)
        await asyncio.sleep(0.5)

async def main():

    for i in range(10):
        c = a()
        task = asyncio.create_task(c)
        task.name = "task nr {}".format(i)
        await task

asyncio.run(main())
</code></pre>
<p>This time it outputs just "task nr 0".</p>
<p>In the first one creates 10 tasks and then starst all of them. The second one merges those two loops - why it affects behaviour of the program?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The second one merges those two loops - why it affects behaviour of the program?</p>
</blockquote>
<p>Because your first code runs <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task" rel="nofollow noreferrer"><code>create_task</code></a> for all ten coroutines before getting to an <code>await</code>.</p>
<p>Since <code>create_task</code> schedules the execution of the coroutine, in the first example all ten coroutines are happily executing in parallel while you are awaiting the first one (which, as the other answer <a href="https://stackoverflow.com/a/53365844/1600898">points out</a>, will never complete because the coroutines are infinite). In the second loop you are only executing <em>one</em> <code>create_task</code> before the infinite await, so you only get one coroutine running.</p>
<p>If you are familiar with threads, perhaps the following analogy will help: You can think of <code>create_task</code> as spawning a thread, and <code>await</code> as joining it. In the first example you've spawned ten of them, and in the second only one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>a()</code> is an infinite coroutine. The process of awaiting it will <strong>never</strong> complete. Meaning that in your second snippet the <code>for</code> loop will never enter next iteration. It is basically "blocked" forever on <code>await task</code>.</p>
</div>
<span class="comment-copy">Shouldn't this be true also in the first code snippet for the second <code>for</code>-loop?</span>
<span class="comment-copy">@MichaelButscher it is, yes. But in the first code await runs <b>after</b> all tasks are already created.</span>
<span class="comment-copy">I should have read the docs, <code>create_task</code> already runs the task, thanks.</span>
