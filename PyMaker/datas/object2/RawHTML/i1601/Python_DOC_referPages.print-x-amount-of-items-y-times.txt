<div class="post-text" itemprop="text">
<p>So, I'm trying to have an item for list1 printed once, then the first element of item2 dictates how many items from list 3 are printed, then the next loop around, it starts where it left off. Then repeat until I run out of items from list1.. I think I have all the lists formatted right because list1 is a list of strings, list2 is a list of integers and list3 is another list of strings</p>
<pre><code>prevval = 0
for i in list1:
    print(i)
    for j in list2:
        val = j
        print(list3[prevval:val])
        prevval = val   
</code></pre>
<p>it prints out the first x amount of items from list 3, a total of 8 times (which is how many elements are in list 2)</p>
<p>Sample: </p>
<pre><code>list1 = ["test","please"]
list2 = [2, 4, 6]
list3 = ["hard", "to", "come", "up","with","values"]
</code></pre>
<p>it will print:</p>
<pre><code>test
hard to
hard to
hard to
hard to come
</code></pre>
<p>expected would be:</p>
<pre><code>test
hard to
please
come up with values
</code></pre>
<p>etc</p>
</div>
<div class="post-text" itemprop="text">
<p>For each word in <code>list1</code> you want to print a slice of <code>list3</code> determined by the corresponding value in <code>list2</code>. You can do that by zipping <code>list1</code> and <code>list2</code> and computing the appropriate slices:</p>
<pre><code>list1 = ["test","please"]
list2 = [2, 4, 6]
list3 = ["hard", "to", "come", "up","with","values"]

prevval = 0
for w1, i in zip(list1, list2):
    print(w1)
    if prevval &lt; len(list3): 
        print(list3[prevval:prevval + i])
        prevval += i
</code></pre>
<p><strong>Output</strong></p>
<pre><code>test
['hard', 'to']
please
['come', 'up', 'with', 'values']
</code></pre>
<p>If you want to format the lists as a string, you can use <code>join</code>:</p>
<pre><code>' '.join(print(list3[prevval:prevval + i]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will destroy <code>list3</code>:</p>
<pre><code>list1 = ["test","please"]
list2 = [2, 4, 6]
list3 = ["hard", "to", "come", "up","with","values"]

l1_idx = 0
l2_idx = 0

while l3_idx &lt; len(list3):
  print(list1[l1_idx])
  l1_idx += 1
  outarr = []
  for x in range(list2[l2_idx]):
    try:
      outarr.append(list3.pop(0))
    except IndexError:
      break
  print(" ".join(outarr))
  l2_idx += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The shortest one here:</p>
<pre><code>prevval=0
for x,y in zip(list1,list2):
   print(x)
   print(' '.join(list3[prevval:prevval+y]))
   prevval+=y
</code></pre>
<p>The output is:</p>
<pre><code>test
hard to
please
come up with values
</code></pre>
<p><code>zip</code> them and iterate over, add <code>prevval</code> as usual, and remove the inner loop, that's all the changes, note that it makes it shorter (by far).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/bin/python

list1 = ["test","please"]
list2 = [2, 4, 6]
list3 = ["hard", "to", "come", "up","with","values"]

for i in list1:
    print(i)
    s = []
    for j in range(list2.pop(0)):
        s.append(list3.pop(0))
    print(" ".join(s))
</code></pre>
<p>Output:</p>
<pre><code>test
hard to
please
come up with values
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ['test', 'please', 'this', 'works']
list2 = [2,4,6]
list3 = tmp = ['hard', 'to', 'come', 'up', 'with', 'values', 'because', 'it', 'is', 'simple', 'with', 'python']
for index, item in enumerate(list1):
    try:
       print(tmp[:list2[index]])
       tmp = tmp[list2[index]:]
    except:
       break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>prevval = 0

val=0

for i in list1:

    print(i)

    val=list2[val]

    print(list3[prevval:val])

    prevval = val
</code></pre>
</div>
<span class="comment-copy"><code>list</code>, <code>list</code>, <code>list3</code>... what are they?</span>
<span class="comment-copy">So what's the issue?</span>
<span class="comment-copy">List1 is a list of strings, list2 is a list of integers, list3 is a list of strings</span>
<span class="comment-copy">Do you want <code>val += j</code> instead of <code>val = j</code>?</span>
<span class="comment-copy">where does that <code>1</code> come from in your desired output?</span>
<span class="comment-copy">Might you not get an <code>IndexError</code> if <code>prevval + i &gt;= len(list3)</code>? (eg. a short <code>list3</code>)</span>
<span class="comment-copy">@NotAnAmbiTurner No. You'll just get a slice till the end of the list. From the doc <i>"However, out of range slice indexes are handled gracefully when used for slicing"</i> (this was for strings but applies to lists too: <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">docs.python.org/3/tutorial/introduction.html#strings</a>)</span>
<span class="comment-copy">The problem with omitting the <code>if</code> statement is that if <code>list3 = ["hard"]</code> it'll print an empty list (or blank line in this case) which I'm not sure is desirable.</span>
<span class="comment-copy">Code only answers are discouraged. Always add a bit of explanation. Beyond that: make sure to nicely format indent <b>all</b> of your input, instead of just dumping  text on others.</span>
