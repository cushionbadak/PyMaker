<div class="post-text" itemprop="text">
<p>I have a script at the moment which uses <code>asyncio</code> to listen on a TCP port for any incoming connections, if a connection is received then it parses the data and sets a class variable to the data received.</p>
<p>This works perfect just to wait for incoming connections - but I cannot figure out how to run a loop concurrent to this waiting for an incoming connection. I am building a server to receive input via TCP, and update things stored within caches in a loop in the main() function. </p>
<p>This is what I have at present:</p>
<pre><code>import socket
import binascii
import struct
import asyncio

TCP_IP = '127.0.0.1'
TCP_PORT = 30194
BUFFER_SIZE = 1024

loop = asyncio.get_event_loop()
coro = asyncio.start_server(incomingData, TCP_IP, TCP_PORT)
server = loop.run_until_complete(coro)

try:
    loop.run_forever()

except KeyboardInterrupt:
    pass

# Async method to handle incoming connections

async def incomingData(reader, writer):
    data = await reader.read(BUFFER_SIZE)
    incomingMessage = data.decode()
    addr = writer.get_extra_info('peername')
    print("Received %r from %r" % (incomingMessage, addr))

    # [0] login packet
    if ord(incomingMessage[0]) == 0:
        username = ""
        password = ""
        try:
            usernameLength = ord(incomingMessage[1]) + 2 # plus two for the 2 chars taken up by the hex
            passwordLength = ord(incomingMessage[usernameLength]) + 1 + usernameLength

            for x in range(2,usernameLength):
                username += incomingMessage[x]

            for i in range(usernameLength,passwordLength):
                password += incomingMessage[i]

            loginHandler.username = username
            loginHandler.password = password

    except:
        print("Unexpected error")

writer.write(data)
await writer.drain()
writer.close()
</code></pre>
<p>However, if I add a loop to encompass <code>loop.run_forever()</code> then it only outputs the print line once and never again (I would expect it to print hundreds of  times running in a loop) - for instance:</p>
<pre><code>try:
    while True:
        print("debug print?")
        loop.run_forever()
</code></pre>
<p>Will print only once in execution - how can I have a logic loop running concurrent to the asyncio TCP <code>start_server</code> loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could maybe try multithreading.</p>
<p>So you would create a thread for the two things you are trying to do.</p>
<p>You can look at this <a href="https://www.tutorialspoint.com/python/python_multithreading.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/python_multithreading.htm</a></p>
<p>This is my first answer.</p>
</div>
<span class="comment-copy">the code you provide is work perfectly, it sends data back each time.</span>
<span class="comment-copy">Why would you need a loop around <code>run_forever</code>? As the name says, it runs the event loop without exiting, so a loop around it doesn't make sense. Having a loop around calls to <code>incomingData</code> won't work when there are multiple <code>incomingData</code>s running in parallel (when more than one client connects). If you just want to run some code at the end of <code>incomingData</code>, you can just put it there.</span>
<span class="comment-copy">Thanks for contributing an answer, but this answer unfortunately misses the point of the question. The question is specifically about using the <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a> library, and is not resolved by creating a separate thread.</span>
