<div class="post-text" itemprop="text">
<p>Given two lists of equal length <code>N</code>, I want to find the <code>K</code> largest products that can be made by multiplying an element from each list. For example, if</p>
<pre><code>&gt; A = [7, 9, 4, 1, 6]
&gt; B = [8, 1, 3, 10, 7]
&gt; K = 3
</code></pre>
<p>the result is <code>[90, 72, 70]</code> or <code>[9*10, 9*8, 7*10]</code>, found by</p>
<pre><code>&gt; sorted([x*y for x in A for y in B], reverse=True)[:K]
[90, 72, 70]
</code></pre>
<p>Is there a more efficient algorithm that doesn't involve multiplying out all <code>N^2</code> pairs?</p>
</div>
<div class="post-text" itemprop="text">
<p>As already noted, the first step is to sort both lists <code>A</code> and <code>B</code> in descending order (or just the K largest of both lists). Then, all the max K products will sit in a roughly triangular area in the top-left corner, the max product being <code>A[0]*B[0]</code>. In other words, if <code>A[i]*B[j]</code> is in the top K, then so must be both <code>A[i-1]*B[j]</code> and <code>A[i]*B[j-1]</code> (assuming <code>i, j &gt; 0</code>).</p>
<p>Thus, you can start in the top-left corner and then use a <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow noreferrer">Heap</a> to expand both the "lower" and the "right" neighbor of the current element and put those onto the heap, too, until you have all the K elements you need. Or start with all the K largest elements of A paired with the largest from B already on the heap and only expand in one direction.</p>
<p>Example in Python, using the <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer"><code>heapq</code></a> module, but the same will work in almost any other language. Note that we are adding <em>negative</em> products to the heap as the heap will be sorted smallest-first.</p>
<pre class="lang-py prettyprint-override"><code>def top_k_prod(A, B, k):
    A = heapq.nlargest(k, A)
    B = heapq.nlargest(k, B)
    result = []
    heap = [(-A[i] * B[0], i, 0) for i in range(len(A))]
    while heap and len(result) &lt; k:
        p, a, b = heapq.heappop(heap)
        result.append(-p)
        if b &lt; len(B)-1:
            heapq.heappush(heap, (-A[a] * B[b+1], a, b+1))
    return result
</code></pre>
<p>Example:</p>
<pre class="lang-py prettyprint-override"><code>import random
A = [random.randint(0, 100) for _ in range(100)]
B = [random.randint(0, 100) for _ in range(100)]
K = 20
result = top_k_prod(A, B, K)
test = sorted([x*y for x in A for y in B], reverse=True)[:K]
print(result)
# [9900, 9702, 9603, 9600, 9504, 9408, 9405, 9405, 9400, 9400, 9312, 9306, 9300, 9216, 9212, 9212, 9207, 9200, 9120, 9120]
print(result == test)
# True
</code></pre>
<p>The complexity should be about <code>O(NlogN + KlogK)</code> for sorting <code>A</code> and <code>B</code> and then <em>about</em> <code>K</code> iterations with heap-operations in the loop. Each cell in the triangular "target" region will only be expanded once from its left neighbor, and cells added to the heap but not used are also limited to K (one in each "row"), giving a maximum of 2*K elements inspected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Practical solution:</p>
<p>Find largest <code>K</code> elements from list A and <code>K</code> largest elements from list B by using <a href="https://en.cppreference.com/w/cpp/algorithm/partial_sort" rel="nofollow noreferrer">partial_sort</a> (this is a well-known modification of quick sort, and I am sure python has the same in its library). Largest products formed by these new lists are also the largest products of the original lists. Then use max-heap (priority queue) to find <code>K</code> largest products from new lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>If we would find out K max values from both the lists, we would have the max <code>K</code> products from both the lists. </p>
<p>I would suggest two approaches to find out K max values:</p>
<ol>
<li>If <code>K &lt;&lt;&lt; N</code> ( <code>K</code> in 10s and <code>N</code> in millions  ) <br/>
Here you have couple of options.

<ul>
<li>You can use <a href="https://en.wikipedia.org/wiki/Selection_algorithm" rel="nofollow noreferrer">selection algorithm</a> K times for both the lists. That would take <code>O(N*K)</code></li>
<li>K iterations of either <a href="https://en.wikipedia.org/wiki/Selection_sort" rel="nofollow noreferrer">Selection Sort</a> or <a href="https://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow noreferrer">Bubble Sort</a>. You would have <code>K</code> max values at either at the beginning or at the end of the array depending on the type of implementation. Even that would be <code>O(N*K)</code></li>
</ul></li>
</ol>
<blockquote>
<p>Note that because <code>K &lt;&lt;&lt; N</code> you can say that <code>O(N*K)</code> is almost <code>O(N)</code></p>
</blockquote>
<ol start="2">
<li><code>K</code> can be as same as <code>N</code>
<ul>
<li>In this case, The best bet would be to just sort both the lists using <a href="https://en.wikipedia.org/wiki/Merge_sort" rel="nofollow noreferrer">Merge Sort</a> or <a href="https://en.wikipedia.org/wiki/Quicksort" rel="nofollow noreferrer">Quick Sort</a>. That would be <code>O(N*lgN)</code></li>
</ul></li>
</ol>
</div>
<span class="comment-copy">You do not need to multiply every elements of the lists. If you need K values, you can just retrieve first K max values of each lists and multiply each pair. But I think there is an even more optimized solution.</span>
<span class="comment-copy">This can be improved to <code>O(N + KlogK + K)</code> by using <code>numpy.partition(A,n-k)[-k:]</code> to find the K largest values in O(N), and only then sorting them.</span>
<span class="comment-copy">Can also use <code>heapq.nlargest(k, A)</code> to find the largest K values in order in <code>O(KlogK)</code>.</span>
<span class="comment-copy">@wowserx Maybe, but originally the question was not even tagged as Python but just a generic algorithm question, so I wanted to keep it generic. You can use a heap in (almost) any language.</span>
<span class="comment-copy">Right, and you can use a heap in exactly the same way: O(N) heapify, then K heappops for O(N + KlogK + K). I'm saying the algorithmic performance is better if you only sort the K largest elements, instead of calling <code>A = sorted(A, reverse=True)</code> right away.</span>
<span class="comment-copy">"because K &lt;&lt;&lt; N you can say that O(N * K) is almost O(N)" Well, by that reasoning you could also say that sorting the entire list in O(nlogn) is almost O(n). And I agree, for mot practical purposes, it probably is. But then, why not just sort the entire list? In fact, with K=10 and N=1000000, nlogn is still smaller than n*k.</span>
<span class="comment-copy">Also, even if you have the max K values from both lists, you still have to find the max K of those KÂ² pairs/products of numbers. This part is not really addressed.</span>
