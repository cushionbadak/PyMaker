<div class="post-text" itemprop="text">
<p>For example</p>
<pre><code>a = ['1', '2', '3', '4', '5', '6']
b = [[(1, 0.5), (2, 0.8)], [(4, 0.11), (6, 0.23)]]
</code></pre>
<p>And I want to get a matrix c:</p>
<pre><code>c = [0.5, 0.8, 0, 0.11, 0, 0]
</code></pre>
<p>That's like if the i in a = ww for ww,ee in n for n in b, then replace  with ee else 0</p>
<p>I try some if and else command and here is my code</p>
<pre><code>for n in b:
for t,y in n:
    for tt in a:
        mmm = [y if t == ''.join(tt) else ''.join(tt)]
        print(mmm)
</code></pre>
<p>But it failed. How should I code for this situation?</p>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain</code></a> + <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>dict</code></a> + list comprehension</h3>
<p>Your <code>b</code> mapping is a list of lists, you can flatten this into an iterable of tuples via <code>chain.from_iterable</code>. Then feed to <code>dict</code> to create an efficient mapping.</p>
<p>Finally, use a list comprehension with <code>dict.get</code> for the desired result. Just remember to convert the values of <code>a</code> from <code>str</code> to <code>int</code>.</p>
<pre><code>from itertools import chain

a = ['1', '2', '3', '4', '5', '6']
b = [[(1, 0.5), (2, 0.8)], [(4, 0.11), (6, 0.23)]]

b_dict = dict(chain.from_iterable(b))
c = [b_dict.get(i, 0) for i in map(int, a)]

print(c)

[0.5, 0.8, 0, 0.11, 0, 0.23]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This iterates through list <code>a</code> comparing it's value with first value of tuples in <code>b</code> list. This appends the second value of tuple to output list if the first value of tuple matches with the value in <code>a</code>:</p>
<pre><code>from itertools import chain

a = ['1', '2', '3', '4', '5', '6']
b = [[(1, 0.5), (2, 0.8)], [(4, 0.11), (6, 0.23)]]

b = list(chain.from_iterable(b))
lst = []
for x in a:
    for y, z in b:
        if y == int(x):
            lst.append(z)
            break
    else:
        lst.append(0)

print(lst)
# [0.5, 0.8, 0, 0.11, 0, 0.23]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert your double-list of mappings into a lookup dictionary and use a list-comp:</p>
<pre><code>a = ['1', '2', '3', '4', '5', '6']
b = [[(1, 0.5), (2, 0.8)], [(4, 0.11), (6, 0.23)]]

# convert b to a dictionary:
d = {str(k):v for tup in b for k,v in tup} # stringify the lookup key value 
print(d)

# apply the lookup to a's values
result = [d.get(k,0) for k in a]
print(result)
</code></pre>
<p>Output:</p>
<pre><code># the lookup-dictionary
{'1': 0.5, '2': 0.8, '4': 0.11, '6': 0.23}

# result of list c,omprehension
[0.5, 0.8, 0, 0.11, 0, 0.23]
</code></pre>
<p>Related:</p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">dict.get(key[, default])</a></li>
<li><a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey">Why dict.get(key) instead of dict[key]?</a></li>
</ul>
</div>
<span class="comment-copy">Shouldn't the last value in <code>c</code> be <code>0.23</code> ?</span>
<span class="comment-copy"><code>[dict(sum(b,[])).get(int(i),0) for i in a]</code></span>
