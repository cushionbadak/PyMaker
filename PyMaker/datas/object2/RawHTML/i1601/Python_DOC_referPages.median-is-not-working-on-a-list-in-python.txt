<div class="post-text" itemprop="text">
<pre><code>import statistics

print(statistics.median([133, 131, 130, 130, 129, 128, 128, 129, 132, 134, 134, 134]))
</code></pre>
<p>The expected output is:</p>
<pre><code>128
</code></pre>
<p>But I get instantly on <code>np.median</code> and on the <code>statistics.median</code> the output:</p>
<pre><code>130.5
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/statistics.html#statistics.median" rel="nofollow noreferrer">median [statistics-doc]</a> is <a href="https://en.wikipedia.org/wiki/Median" rel="nofollow noreferrer">defined as [Wikipedia]</a>:</p>
<blockquote>
<p>The median is the value <strong>separating the higher half from the lower half</strong> of a data sample (a population or a probability distribution). For a data set, it may be thought of as the "middle" value.</p>
</blockquote>
<p>So given you sort the values first, then it is the middle element (or the average of the two elements in the middle given there is an even number of elements). It is typically used to obtain a value such that 50% of the elements in the collection have a higher value, and 50% have a lower value.</p>
<p>In your case <code>128</code> is the smallest element of the collection, so that is not a good candidate for the median.</p>
<p>If you want the value in the middle (this is <em>not</em> the median statistically speaking), you can use:</p>
<pre><code>def middle_avg(arr):
    idx = len(arr)//2
    return a[idx-1+(len(a)&amp;1):idx+1].mean()
</code></pre>
<p>or perhaps simpler:</p>
<pre><code>def middle_avg(arr):
    idx = len(arr)//2
    if len(arr)&amp;1:
        return arr[idx]
    else:
        return arr[idx-1:idx+1].mean()
</code></pre>
<p>we can then call this with:</p>
<pre><code>&gt;&gt;&gt; middle_avg(np.array([133, 131, 130, 130, 129, 128, 128, 129, 132, 134, 134, 134]))
128.0
</code></pre>
<p>As said however, this is <em>not</em> the median.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have an even number of elements so your program calculates the mean of the two central values in your list after <strong>sorting</strong> it. Docs: <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">statistics python 3</a>.</p>
</div>
<span class="comment-copy"><code>median</code> isn't just the middle element in a list.  That's only the case if the list is sorted.</span>
<span class="comment-copy">The median of a collection is the middle element of the <i>sorted</i> collection so to speak. Not just the middle element of a collection.</span>
<span class="comment-copy">Could you add a reference to the docs like I have done? It would make this the most complete and accurate answer.</span>
<span class="comment-copy">No it should <i>not</i> print <code>128</code> notice that 128 is the smallest value here. The median is the middle item of a <i>sorted</i> collection. So there is a sorting step in between.</span>
<span class="comment-copy">&gt;&gt;&gt; import numpy as np &gt;&gt;&gt; nl = [133, 131, 130, 130, 129, 128, 128, 129, 132, 134, 134, 134] &gt;&gt;&gt; np.median(nl) 130.5 &gt;&gt;&gt;</span>
<span class="comment-copy">Yeah, I corrected it. I haven't noticed that your list isn't sorted. My bad</span>
