<div class="post-text" itemprop="text">
<p>I'm trying to write a script that will use netstat to check ephemeral ports on a windows machine.  When I test this script in the IDLE on Windows, it returns with a 0.</p>
<p>Here is my code that I'm testing: </p>
<pre><code>import os
oPorts=os.system('netstat -ano | find /i \"estab\" /c')
print(oPorts)
</code></pre>
<p>Here is what happens when I try to run that in Python:</p>
<p><img alt="os.system Python Script" src="https://i.stack.imgur.com/mjCHw.png"/>]<a href="https://i.stack.imgur.com/mjCHw.png" rel="nofollow noreferrer">1</a></p>
<p>Here's the output however when I run the same thing in command prompt.</p>
<p><a href="https://i.stack.imgur.com/d04VM.png" rel="nofollow noreferrer"><img alt="cmd prompt output" src="https://i.stack.imgur.com/d04VM.png"/></a></p>
<p>So why is Python outputting a 0 when there are clearly about 311 established connections on the Windows host?  What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a> function returns the exit status of the command.Not the output of the command. You should be using the <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer">subprocess</a> module instead. Then you can capture the output.</p>
</div>
<div class="post-text" itemprop="text">
<p>The return value from an executable process is <strong>not</strong> the same as its output. By convention a process returns 0 to indicate success and anything else to indicate failure. When you run a command from the command line, thbe return value is not typically printed. To capture the output, you need to redirect <code>stdout</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code gave me exactly the output I was intending.</p>
<pre><code>import subprocess

established = (subprocess.Popen('netstat -ano | find /i \"estab\" /c',
                               stdout=subprocess.PIPE,
                               shell=True).communicate()[0].decode('utf-8').strip())
</code></pre>
<p>I'm not sure the difference exactly between <code>check_output</code> and <code>Popen</code>, but <code>Popen</code> and <code>.communicate()[0].decode('utf-8').strip())</code> were the keys.</p>
</div>
<span class="comment-copy">As I mentioned, it's on a windows machine and grep is not an option.</span>
<span class="comment-copy">My bad. .. subprocess is best bet</span>
<span class="comment-copy">Okay so here's my new code: <code>proc = subprocess.check_output('netstat -ano | find /i \"estab\" /c',                                stderr=subprocess.STDOUT,                                shell=True)</code> . This actually does return the correct number but there is also jargon before and after it.  Instead of just returning "330" for example it returns "b'330\r\n" . How do I get rid of that other junk and just have it return an integer?</span>
<span class="comment-copy">@RaptorPete On the returned bytes object do: <code>oPorts = oProts.decode("ascii").strip()</code>.</span>
<span class="comment-copy">If you see below under Keith's response I was able to change up my code and get a number output.  But now it's also including some other random characters. Any idea how I can change the output of b'330\r\n to just say "330"? Thanks</span>
<span class="comment-copy">@RaptorPete The notation <code>b''</code> is python's way of telling you that this is binary data. You can call <code>decode()</code> on it (with the correct encoding name) to convert it to a string.</span>
<span class="comment-copy"><code>Popen</code> is the class that implements the core features. <code>call</code>, <code>check_call</code>, and <code>check_output</code> are convenience functions that wrap <code>Popen</code>. Recent versions of Python 3 also have a more generic <code>run</code> convenience function. They've also added <code>encoding</code> and <code>errors</code> parameters for all these functions.</span>
