<div class="post-text" itemprop="text">
<p>I have a set of data where the nodes have an attribute showing the name of the team to which they belong. I would like to work out the stats for a) the whole network and then b) the stats for each team comparing their connectivity etc. (Lets say I am comparing who sends emails to who and therefore the degree of connectedness of the team. Here is my sample code:</p>
<pre><code>ST = nx.Graph()
ST.add_node('A',role = 'sales1')
ST.add_node('B',role = 'sales1')
ST.add_node('C',role = 'sales1')
ST.add_node('D',role = 'sales1')
ST.add_node('E',role = 'sales2')
ST.add_node('F',role = 'sales2')
ST.add_node('G',role = 'sales2')
ST.add_node('H',role = 'sales2')

ST.add_edges_from([('A','B'),
                   ('A','C'),
                   ('A','D'),
                   ('B','D'),
                   ('B','C'),
                   ('C','D'),
                   ('E','F'),
                   ('E','G'),
                   ('E','H'),
                   ('F','H'),
                   ('G','H'),
                   ('A','E'),
                   ('G','D')])
</code></pre>
<p>I know I can form a subgraph as follows: </p>
<pre><code>H = ST.subgraph(['A','B','C','D'])
</code></pre>
<p>Is there an easier way of setting the nodes by reference to the node attribute? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby

# Sort the nodes by their role (this is required for the groupby to work)
sorted_by_role = sorted(ST.nodes(data=True), key=lambda node_data: node_data[1]["role"])
# Group objects with same role together
grouped = groupby(sorted_by_role, key=lambda node_data: node_data[1]["role"])

subgraphs = dict()
for key, group in grouped:
     nodes_in_group, _ = zip(*list(group))  # We don't care about the data here, only the node names
     subgraphs[key] = ST.subgraph(nodes_in_group)
</code></pre>
<p>Now the <code>subgraphs</code> dict contains the subgraph of every different role present in the graph. This works for an arbitrary number of roles.</p>
</div>
<span class="comment-copy">thank you. That works a treat!</span>
