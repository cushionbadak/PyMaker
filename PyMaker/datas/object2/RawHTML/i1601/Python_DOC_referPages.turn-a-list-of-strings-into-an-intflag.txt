<div class="post-text" itemprop="text">
<p>I have a bunch of <code>IntFlag</code> types, and I expect to frequently convert lists of strings from config files into members of those types. My current plan is to extend <code>IntFlag</code>:</p>
<pre><code>class BetterIntFlag(IntFlag):
    @classmethod
    def parse(cls, items):
        value = cls(0)
        for item in items:
            value |= cls[item]
        return value
</code></pre>
<p>I'm satisfied with this solution, but I can't help but feel that I must be missing a concise built-in way to do this.</p>
<p>I'm on 3.3 with backported enums.</p>
</div>
<div class="post-text" itemprop="text">
<p>If by backport you mean <code>aenum</code><sup>1</sup>, it's built-in:</p>
<pre><code>from aenum import IntFlag

class Color(IntFlag):
  red = 1
  green = 2
  blue = 4
</code></pre>
<p>and in use:</p>
<pre><code>--&gt; Color['red|blue']
&lt;Color.blue|red: 5&gt;

--&gt; items = ['red', 'blue']
--&gt; Color['|'.join(items)]
&lt;Color.blue|red: 5&gt;
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">Alas, I'm using <code>enum.py</code> from Python 3.6.5, which does not support that.</span>
<span class="comment-copy">In any case, given that you've made this suggestion, it seems safe to say that there's no built-in functionality for this in stdlib.</span>
<span class="comment-copy">@ThomSmith:  You could blur the lines between names and values and define your own <code>_missing_</code> to handle calls like <code>Color('red blue')</code> (or however you wanted your strings).</span>
