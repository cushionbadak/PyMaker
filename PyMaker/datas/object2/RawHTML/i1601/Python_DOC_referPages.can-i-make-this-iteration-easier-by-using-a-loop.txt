<div class="post-text" itemprop="text">
<p>So i'm relatively new to python but i have used loops in previous programs i have made but they were relatively simple. 
I was wondering if there was a method that involved a loop or some other way to make this iteration more concise.</p>
<p>Basically is there a way for me to have a variable called 't' that holds values for t1,t2 and t3 in like a list which is then used in 'eq' and 'der' instead of copying and pasting the same piece of code?</p>
<p>I have already tried to look for an answer on here and other places but the solutions i have found so far don't seem to work with what i have got/i'm not python literate enough to understand them.</p>
<p>Thanks in advance.</p>
<pre><code>import numpy as np
U235_Decay_Constant = 9.72e-10
U238_Decay_Constant = 1.54e-10


t0 = 4.1e9


eq = ((np.exp(U238_Decay_Constant*t0)-1)-(0.0167* 
((np.exp(U235_Decay_Constant*t0)-1)))-0.0094)
der = (U238_Decay_Constant*(np.exp(U238_Decay_Constant*t0)))-(0.0167* 
(U235_Decay_Constant*(np.exp(U235_Decay_Constant*t0))))

t1 = t0 - (eq/der)


eq = ((np.exp(U238_Decay_Constant*t1)-1)-(0.0167* 
((np.exp(U235_Decay_Constant*t1)-1)))-0.0094)
der = (U238_Decay_Constant*(np.exp(U238_Decay_Constant*t1)))-(0.0167* 
(U235_Decay_Constant*(np.exp(U235_Decay_Constant*t1))))

t2 = t1 - (eq/der)

eq = ((np.exp(U238_Decay_Constant*t2)-1)-(0.0167* 
((np.exp(U235_Decay_Constant*t2)-1)))-0.0094)
der = (U238_Decay_Constant*(np.exp(U238_Decay_Constant*t2)))-(0.0167* 
(U235_Decay_Constant*(np.exp(U235_Decay_Constant*t2))))

t3 = t2 - (eq/der)
print(t3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Might be a little easier to read as:</p>
<pre><code>import numpy as np
U235_Decay_Constant = 9.72e-10
U238_Decay_Constant = 1.54e-10


t = [4.1e9, None, None, None]

t[0] = 4.1e9
for i in range(3):
    eq = ((np.exp(U238_Decay_Constant*t[i])-1)-(0.0167*
    ((np.exp(U235_Decay_Constant*t[i])-1)))-0.0094)

    der = (U238_Decay_Constant*(np.exp(U238_Decay_Constant*t[0])))-(0.0167*
    (U235_Decay_Constant*(np.exp(U235_Decay_Constant*t[0]))))

    t[i+1] = t[i] - (eq/der)

print(t[3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, iteration can help here. Add your values to a list, then <code>t?</code> is the last value in the list so far; replacing your <code>t?</code> references with <code>t[-1]</code> gives:</p>
<pre><code>t = [4.1e9]
for _ in range(3):
    eq = (
        (np.exp(U238_Decay_Constant * t[-1]) - 1)
        - (0.0167 * ((np.exp(U235_Decay_Constant * t[-1]) - 1)))
        - 0.0094
    )
    der = (U238_Decay_Constant * (np.exp(U238_Decay_Constant * t[-1]))) - (
        0.0167 * (U235_Decay_Constant * (np.exp(U235_Decay_Constant * t[-1])))
    )
    t.append(t[-1] - (eq / der))
</code></pre>
<p>The general principle is one of <em>accumulation</em>, where you produce the running output of a repeated application of a function. So the <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate()</code> function</a> could help here too:</p>
<pre><code>from itertools import accumulate, chain, repeat

def u238_decay(t, _):
    eq = (
        (np.exp(U238_Decay_Constant * t) - 1)
        - (0.0167 * ((np.exp(U235_Decay_Constant * t) - 1)))
        - 0.0094
    )
    der = (U238_Decay_Constant * (np.exp(U238_Decay_Constant * t))) - (
        0.0167 * (U235_Decay_Constant * (np.exp(U235_Decay_Constant * t)))
    )
    return t - (eq / der)

series = accumulate(chain([4.1e9], repeat(None)), u238_decay)
</code></pre>
<p>The above produces an unending series of decay values:</p>
<pre><code>&gt;&gt;&gt; series = accumulate(chain([4.1e9], repeat(None)), u238_decay)
&gt;&gt;&gt; next(series)
4100000000.0
&gt;&gt;&gt; next(series)
4081406102.7439713
&gt;&gt;&gt; next(series)
4081163259.5641546
&gt;&gt;&gt; next(series)
4081163218.6509323
&gt;&gt;&gt; next(series)
4081163218.650931
</code></pre>
<p>You could look into creating a <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/ufuncs.html" rel="nofollow noreferrer">numpy universal function</a> so you can do the same with the <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate" rel="nofollow noreferrer"><code>numpy.ufunc.accumulate()</code> method</a>.</p>
<p>However, I suspect that your formula can be re-cast to not depend on the previous input, but only as a formula of starting amount and <code>t</code> as time, at which point you can use full numpy vectorised calculations.</p>
</div>
<span class="comment-copy">Hey welcome to stackover flow! So basically you want to have a loop that creates the t3 value? You can edit you question to make it easier for us to help ;)</span>
<span class="comment-copy">Glad you found both answers to be of help! However, you can only pick <i>one</i> of them to be the 'accepted' answer. The choice is entirely yours, pick one you feel helped you the most perhaps, and picking neither is also an option.</span>
