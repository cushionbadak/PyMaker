<div class="post-text" itemprop="text">
<p>How could I convert a list into a nested list with increasing size of the sublists?</p>
<p>For example,
from </p>
<pre><code>[1, 2, 3, 4, 5, 6]
</code></pre>
<p>to </p>
<pre><code>[[1], [2, 3], [4, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd do this with <a href="https://docs.python.org/3.7/library/itertools.html#itertools.islice" rel="nofollow noreferrer">islices</a> over an iterator of the original list. This way I can just specifiy the number of elements to take without having to worry at which position I am currently at. (In addition, the following code works with any iterable.)</p>
<pre><code>def increasing_chunks(iterable):
    it = iter(iterable)
    i = 1

    while True:
        chunk = list(islice(it, i))
        if not chunk:
            break
        yield chunk
        i += 1
</code></pre>
<p>The last chunk might be truncated to whatever amount of elements the iterator had left.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list(increasing_chunks([1, 2, 3, 4, 5, 6]))
[[1], [2, 3], [4, 5, 6]]
&gt;&gt;&gt; list(increasing_chunks([1, 2, 3, 4, 5, 6, 7, 8]))
[[1], [2, 3], [4, 5, 6], [7, 8]]
</code></pre>
<p>If you want to discard truncated chunks, adjust the code as follows:</p>
<pre><code>def increasing_chunks_strict(iterable):
    it = iter(iterable)
    i = 1

    while True:
        chunk = list(islice(it, i))
        if len(chunk) &lt; i:
            break
        yield chunk
        i += 1
</code></pre>
<p>Now, truncated chunks are not included in the result.</p>
<pre><code>&gt;&gt;&gt; list(increasing_chunks_strict([1, 2, 3, 4, 5, 6]))
[[1], [2, 3], [4, 5, 6]]
&gt;&gt;&gt; list(increasing_chunks_strict([1, 2, 3, 4, 5, 6, 7, 8]))
[[1], [2, 3], [4, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a follow up to <a href="https://stackoverflow.com/a/53364812/1822698">timgeb's solution</a>, without <code>itertools</code>, you need to keep track of the index:</p>
<pre><code>l = [1, 2, 3, 4, 5, 6]

i, slice_length = 0, 1
result = []
while i &lt; len(l):
    result.append(l[i:i + slice_length])
    i += slice_length
    slice_length += 1

print(result)
# [[1], [2, 3], [4, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Several <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to the rescue:</p>
<pre><code>from itertools import count, accumulate as acc, takewhile as tw

lst = [1, 2, 3, 4, 5, 6]
[lst[c:c+i] for i, c in enumerate(tw(lambda x: x &lt; len(lst), acc(count())), 1)]
# [[1], [2, 3], [4, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you list length has the correct length for the last chunk to have the correct size, you can use list <code>sum</code>, <code>range</code> and <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to solve your problem in few lines:</p>
<pre><code>l = [1, 2, 3, 4, 5, 6]
slices = range(1, (len(l) + 1)/2 + 1)
result = [l[sum(slices[:s-1]):sum(slices[:s-1])+s] for s in slices]
</code></pre>
</div>
<span class="comment-copy">that supposes that the length of the list is of the form (n+1)*n // 2 for starters. Is there something you tried?</span>
<span class="comment-copy">And what have you tried so far?</span>
<span class="comment-copy">By writing some code. How do you decide the length of each sub-array? Would a list <code>[2,3,4]</code> get split in <code>[[2,3],[4]]</code>? If the sequence of lengths is 1,2,3... what happens with the last element if these do not add up?</span>
<span class="comment-copy">this could help (with adaptation): <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks" title="how do you split a list into evenly sized chunks">stackoverflow.com/questions/312443/â€¦</a></span>
<span class="comment-copy">Welcome to SO! It's unclear how odd-length lists should be handled. Please clarify.</span>
