<div class="post-text" itemprop="text">
<p>I am trying to create a program that will find and store the index of each element in the nested list.</p>
<p>So far, I have tried using nested for iterators to accomplish this.</p>
<p>Below is my code.</p>
<pre><code>table = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
def coordinates(table):
    target_cell_list = []
    for row in table:
        for column in row:
            target_cell = (table.index(row), row.index(column))
            target_cell_list.append(target_cell)
    return target_cell_list

&gt;&gt;&gt; table = [[1, 1, 1], [2, 2, 3], [2, 3, 3]]
&gt;&gt;&gt; coordinates(table)
# current output
[(0, 0), (0, 0), (0, 0), (1, 0), (1, 0), (1, 2), (2, 0), (2, 1), (2, 1)]

# desired output
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</code></pre>
<p>I think the row indexes are outputting in a correct manner but the column indexes are doing something strange.</p>
<p>I have looked over the code several times but I cannot find out what's wrong with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>A nested <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehension</a> using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> will do:</p>
<pre><code>table = [[1, 1, 1], [2, 2, 3], [2, 3, 3]]

def coordinates(tbl):
    return [(i, j) for i, row in enumerate(tbl) for j, _ in enumerate(row)]
    # or a little shorter
    # [(i, j) for i, row in enumerate(tbl) for j in range(len(row))]

coordinates(table)
# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</code></pre>
<p>Your <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>list.index(elmnt)</code></a> based approach fails because <code>index</code> always returns the <strong>first</strong> index of the element in the list, so it won't work if there are repetitions. Also, it has worse performance since every <code>index</code> call must iterate the list it is called on.
A pure loop-index-based implementation along your original lines would be:</p>
<pre><code>def coordinates(tbl):
    target_cell_list = []
    for i in range(len(tbl)):
        for j in range(len(tbl[i])):
            target_cell_list.append((i, j))
    return target_cell_list
</code></pre>
<p>And if you know that your table is not <a href="https://en.wikipedia.org/wiki/Jagged_array" rel="nofollow noreferrer">jagged</a>, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>from itertools import product

def coordinates(tbl):
    return list(product(range(len(tbl)), range(len(tbl[0]))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a <code>numpy</code> solution.</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; list(zip(*np.where(np.ones_like(table))))                                                                     
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you observe carefully, then you may observe that there are duplicate values in the list that is the reason you get the indexes wrong. So, in case of duplications you can use enumerate. Enumerate will return the tuple object so iiteration over it and this will give you expected output.</p>
<p>You can try this-</p>
<pre><code>def coordinates(table):
    target_cell_list = []
    for i,row in enumerate(table):
        for j in range(len(row)):
            target_cell = (i,j)
            target_cell_list.append(target_cell)
    return target_cell_list
table = [[1, 1, 1], [2, 2, 3], [2, 3, 3]]
print(coordinates(table))
</code></pre>
</div>
<span class="comment-copy">you are getting that output because for example in first row you have three columns have same number,so it retrieves always index <code>0</code>.</span>
<span class="comment-copy">I have to get a mechanical keyboard with you guys..</span>
