<div class="post-text" itemprop="text">
<p>I have the following code in a django view to create a background task:</p>
<pre><code>    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_in_executor(None, update_contacts, {
        'email': email,
        'access_token': g.tokens['access_token']
    })
</code></pre>
<p>Is there anything I need to do at the end to 'kill' the loop? What would be the proper way to close it, etc?</p>
</div>
<div class="post-text" itemprop="text">
<p>You do not need to <em>start</em> any event loop in the first place. The <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code> package</a> gives direct access to Executors, and <code>threading</code> lets you launch individual Threads:</p>
<pre><code># raw thread
import threading

background_task = threading.Thread(
    target=update_contacts, kwargs={
        'email': email,
        'access_token': g.tokens['access_token']
})
background_task.start()

# executor thread pool
from concurrent.futures import ThreadPoolExecutor

my_executor = ThreadPoolExecutor()
my_executor.submit(update_contacts, email=email, access_token=g.tokens['access_token'])
</code></pre>
<p>In general, a <code>Thread</code> is simpler if you just want to launch a task and forget about it. A <code>ThreadPoolExecutor</code> is more efficient if you have many small tasks at the same time; it can also be used to automatically wait for completion of several tasks.</p>
<pre><code>print('start at', time.time())
with ThreadPoolExecutor() as executor:
    executor.submit(time.sleep, 1)
    executor.submit(time.sleep, 1)
    executor.submit(time.sleep, 1)
    executor.submit(time.sleep, 1)
print('done at', time.time())  # triggers after all 4 sleeps have finished
</code></pre>
<hr/>
<p>The primary purpose of <code>loop.run_in_executor</code> is <em>not</em> to provide a ThreadPoolExecutor. It is meant to bridge the gap between Executors for blocking code <em>and the event loop for non-blocking code</em>. Without the later, there is no need to use <code>asnycio</code> at all.</p>
<pre><code>import time
import asyncio

def block(delay: float):
    print("Stop! Blocking Time!")
    time.sleep(delay)  # block the current thread
    print("Done! Blocking Time!")

async def nonblock(delay: float):
    print("Erm.. Non-Blocking Time!")
    await asyncio.sleep(delay)
    print("Done! Non-Blocking Time!")

async def multiblock(delay: float):
    loop = asyncio.get_event_loop()
    await asyncio.gather(  # await async natively and sync via executors
        nonblock(delay),
        loop.run_in_executor(None, block, delay),
        nonblock(delay),
        loop.run_in_executor(None, block, delay),
    )

asyncio.run(multiblock(1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Asyncio tasks can be canceled by calling the <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel" rel="nofollow noreferrer"><code>cancel</code></a> method on the <code>Task</code> object. Tasks that run asynchronous code, such as those using the <a href="https://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer">aiohttp</a> library, will be canceled immediately. Tasks that run blocking code using <code>run_in_executor</code> will not be canceled because they are run in an OS thread behind the scenes.</p>
<p>This is part of the reason why <code>run_in_executor</code> is discouraged in asyncio code and is only intended as a stop-gap measure to include legacy blocking code in an asyncio program. (The other part is that the number of tasks is limited by the number of OS threads allowed by the pool, whereas the limit for the number of true asynchronous tasks is much higher.)</p>
</div>
<span class="comment-copy">What you're designing there is <code>futures</code>. I believe you are using <code>ThreadPoolExecutor</code>. You need to design it to be stoppable (eg. throw some flag/condition which can be interpreted for done) in order to finish and eventually let the daemon get shut down. Else, the event loop will live forever.</span>
<span class="comment-copy">Why are people lately hell-bent on using <code>asyncio</code> just to launch threads without any <code>async</code> code? It is not what <code>asyncio</code> is there for, and using a plain Executor is much simpler.</span>
<span class="comment-copy">@MisterMiyagi perhaps you could show an example of how you'd suggest using it? I'm new to this all.</span>
