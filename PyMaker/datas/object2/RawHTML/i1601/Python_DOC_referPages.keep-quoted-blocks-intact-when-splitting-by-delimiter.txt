<div class="post-text" itemprop="text">
<p>Given an example string <code>s = 'Hi, my name is Humpty-Dumpty, from "Alice, Through the Looking Glass"'</code> and I want to spearate it to the following chunks:</p>
<pre><code># To Do: something like {l = s.split(',')}
l = ['Hi', 'my name is Humpty-Dumpty', '"Alice, Through the Looking Glass"']
</code></pre>
<p>I don't know where and how many delimiters I'll find.</p>
<p>This is my initial idea, and it is quite long, and not exact, as it removes the all delimiters, while I want the delimiters inside quotes to survive:</p>
<pre><code>s = 'Hi, my name is Humpty-Dumpty, from "Alice, Through the Looking Glass"'
ss = []
inner_string = ""
delimiter = ','

for item in s.split(delimiter):
    if not inner_string: 
        if '\"' not in item: # regullar string. not intersting
            ss.append(item)
        else:
            inner_string += item # start inner string

    elif inner_string:
        inner_string += item

        if '\"' in item:  # end inner string
            ss.append(inner_string)
            inner_string = ""
        else:            # middle of inner string
            pass

print(ss)
# prints ['Hi', ' my name is Humpty-Dumpty', ' from "Alice Through the Looking Glass"'] which is OK-ish
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split by regular expressions with <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; [x for x in re.split(r'([^",]*(?:"[^"]*"[^",]*)*)', s) if x not in (',','')]
</code></pre>
<p>when <code>s</code> is equal to:</p>
<pre><code>'Hi, my name is Humpty-Dumpty, from "Alice, Through the Looking Glass"'
</code></pre>
<p>it outputs:</p>
<pre><code>['Hi', ' my name is Humpty-Dumpty', ' from "Alice, Through the Looking Glass"']
</code></pre>
<p>Regular expression explained:</p>
<pre class="lang-none prettyprint-override"><code>(
    [^",]*          zero or more chars other than " or ,
    (?:             non-capturing group
        "[^"]*"     quoted block
        [^",]*      followed by zero or more chars other than " or ,
    )*              zero or more times
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I solved this problem by avoiding <code>split</code> entirely:</p>
<pre><code>s = 'Hi, my name is Humpty-Dumpty, from "Alice, Through the Looking Glass"'
l = []
substr = ""
quotes_open = False

for c in s:
    if c == ',' and not quotes_open: # check for comma only if no quotes open
        l.append(substr)
        substr = ""
    elif c == '\"':
        quotes_open = not quotes_open
    else:
        substr += c

l.append(substr)

print(l)
</code></pre>
<p>Output:</p>
<pre><code>['Hi', ' my name is Humpty-Dumpty', ' from Alice, Through the Looking Glass']
</code></pre>
<p>A more generalised function could look something like:</p>
<pre><code>def custom_split(input_str, delimiter=' ', avoid_between_char='\"'):
    l = []
    substr = ""
    between_avoid_chars = False
    for c in s:
        if c == delimiter and not between_avoid_chars:
            l.append(substr)
            substr = ""
        elif c == avoid_between_char:
            between_avoid_chars = not between_avoid_chars
        else:
            substr += c
    l.append(substr)
    return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this would work for this specific case and can provide a starting point.</p>
<pre><code>import re
s = 'Hi, my name is Humpty-Dumpty, from "Alice, Through the Looking Glass"'

cut = re.search('(".*")', s)

r = re.sub('(".*")', '$VAR$', s).split(',')
res = []
for i in r:
    res.append(re.sub('\$VAR\$', cut.group(1), i))
</code></pre>
<p>Output</p>
<pre><code>print(res)
['Hi', ' my name is Humpty-Dumpty', ' from "Alice, Through the Looking Glass"']
</code></pre>
</div>
