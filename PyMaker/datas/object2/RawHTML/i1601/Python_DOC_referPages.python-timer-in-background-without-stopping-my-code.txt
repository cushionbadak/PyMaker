<div class="post-text" itemprop="text">
<p>For school, I am working on a remake of cookie clicker. Basically, every second, I need to add 1 to the players score. I found a way to do this, but my problem is that it will only focus on the timer and then I can't run any other parts of the program as the timer needs to be constantly going. I assume there is some way to make the timer always go on in the background while still running my other code. The way I have the timer setup may not be best (I just researched the timer method and cobbled something together). Here is the code:</p>
<pre><code>x = 1
while x == 1:
     score += 1
     time.sleep(1)
</code></pre>
<p>I am still very new and I am kind of learning as I go with this. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have 2 ways. Multithreading/multiprocessing or asyncronous way.</p>
<p>In first case, you should use multiprocessing or multithreading for start parallel process/thread.</p>
<p>In second case, you can use event loop and asyncio, to run your functions in asyncronous way.</p>
</div>
<div class="post-text" itemprop="text">
<p>One common way to time a task is the following:</p>
<p><code>timer = time.time()
do task
timer = time.time() - timer</code></p>
<p>In the end, <code>timer</code> would have the time it took to do the task.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/7370801/measure-time-elapsed-in-python">Measure time elapsed in Python?</a></span>
<span class="comment-copy">To clear it up; the way the game works is every second the player is playing, they get an additional 1 score (cookie). So while the game is running, I need this to  add 1 to their total score every second. I can do it with the code above, but then the rest of the program wouldn't work as it just stays in the while loop and never moves past it. I need to know if I can run this is the background so that it will do this AND run my code at the same time.</span>
<span class="comment-copy">Ok, in this case I believe you would need to use threading, see <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/3/library/multiprocessing.html</a> This is because you would have two processes occurring at the same time.</span>
<span class="comment-copy">I looked into some of it and I think I got a workings solution! Thanks!</span>
<span class="comment-copy">you're welcome :)</span>
