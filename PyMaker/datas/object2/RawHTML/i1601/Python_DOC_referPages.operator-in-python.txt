<div class="post-text" itemprop="text">
<p>I've been using Python a while and I bumped into this operator "^=" for the first time from this <a href="https://codesays.com/2015/solution-to-odd-occurrences-in-array-by-codility/" rel="nofollow noreferrer">link</a>.</p>
<pre><code>def solution(A):
    result = 0
    for number in A:
        result ^= number
    return result
</code></pre>
<p>Of course, I did some googling, but I can't seem to find this operator. What does it do?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The <code>^</code> operator yields the bitwise XOR (exclusive OR) of its arguments, which must be integers.</p>
</blockquote>
<p><a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations</a></p>
<p>As with all the other <code>_=</code> operators, <code>^=</code> assigns the result back to the variable: <code>a =^ b</code> is eqivalent to <code>a = a ^ b</code>.</p>
<p>As a function it is <code>__ixor__</code> (or <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator.ixor</code></a>), and may have different behaviour for non-integer types.</p>
</div>
<div class="post-text" itemprop="text">
<p>The special method that relates to <code>^=</code> and is called behind the curtains is <code>__ixor__</code>. The special method that relates to <code>^</code> is <code>__xor__</code>. They don't have to behave the same.</p>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__ixor__" rel="nofollow noreferrer"><strong><code>__ixor__</code></strong></a> is the <a href="https://www.python.org/dev/peps/pep-0203/" rel="nofollow noreferrer"><strong>Augmented Assignment</strong></a> variant of <a href="https://docs.python.org/3/reference/datamodel.html#object.__xor__" rel="nofollow noreferrer"><strong><code>__xor__</code></strong></a>, performing inplace operations when possible, and falling back to <code>__xor__</code> when <code>__ixor__</code> is not implemented.</p>
<p>In principle, the return value of the method is completely up to the implementation of <code>__ixor__</code>, but there are some common use cases.</p>
<p>For two sets, <code>a ^= b</code> computes the <strong>symmetric difference</strong> of the sets <code>a</code> and <code>b</code> (all elements present in exactly one of the two sets) and <em>mutates</em> <code>a</code>.</p>
<pre><code>&gt;&gt;&gt; a = {1, 2, 3}
&gt;&gt;&gt; b = {1, 4, 5}
&gt;&gt;&gt; reference = a
&gt;&gt;&gt; 
&gt;&gt;&gt; a ^= b
&gt;&gt;&gt; a
{2, 3, 4, 5}
&gt;&gt;&gt; reference
{2, 3, 4, 5} 
</code></pre>
<p>Note that <code>a</code> has been mutated <em>in place</em>, thus <code>a</code> and <code>reference</code> both point to the same <code>set</code> object <code>{2, 3, 4, 5}</code> in memory. Thus <code>^=</code> behaves differently from <code>^</code> in this case, which <em>builds a new set</em> as shown below.</p>
<pre><code>&gt;&gt;&gt; a = {1, 2, 3}
&gt;&gt;&gt; b = {1, 4, 5}
&gt;&gt;&gt; reference = a
&gt;&gt;&gt; a = a^b
&gt;&gt;&gt; a
{2, 3, 4, 5}
&gt;&gt;&gt; reference
{1, 2, 3}
</code></pre>
<p>Note that <code>a = a^b</code> has built a new set to which the name <code>a</code> has been <em>reassigned</em> and <code>reference</code> still refers to the original set <code>{1, 2, 3}</code>.</p>
<p>For builtin <em>immutable</em> types (like integers), <code>a ^= b</code> is indeed equivalent to <code>a = a^b</code>. Since integers have no <code>__ixor__</code> method, Python falls back to using <code>__xor__</code>.
In the case of integers <code>a ^= b</code> performs a <strong>bitwise-non-equal</strong> operation and the name <code>a</code> is reassigned to the result of that computation.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; a^b
3
</code></pre>
<p>Explanation:</p>
<pre><code>    101 (5 decimal)
XOR 110 (6 decimal)
-------------------
    011 (3 decimal)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is XOR. <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations</a>
For example:</p>
<pre><code>9 ^ 1
</code></pre>
<p>Output:</p>
<pre><code>8
</code></pre>
<p>Because in binary <code>9</code> is <code>101</code>, then <code>1</code> is <code>001</code>.
XOR operation mean:</p>
<pre><code>101
001
output:
100 #or 8 in natural number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>a ^= b</code> equialent to <code>a = a^b</code></p>
<p><code>^</code> - is <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">XOR</a> operator</p>
</div>
<span class="comment-copy">In my experience, the Python docs are absurdly hard to Google. Including "Python language reference" in your search can often lead to better results.</span>
<span class="comment-copy">it is xor......</span>
<span class="comment-copy">It is not exactly the same as the question I linked, though. <code>^</code> is the XOR operator. <code>^=</code> is the XOR-assignment operator, so <code>a ^= b</code> means "assign <code>a XOR b</code> to <code>a</code>".</span>
<span class="comment-copy">For some reason, the python docs don't list <code>^=</code> in the assignment operators reference.</span>
<span class="comment-copy">What do you mean with "on an object"? Everything in Python is an object, and it may or may not have <code>__ixor__</code> implemented.</span>
<span class="comment-copy">Ah, okay. I wasn't sure if you were trying to say that numbers are primitive data types like in Java (your top tag).</span>
