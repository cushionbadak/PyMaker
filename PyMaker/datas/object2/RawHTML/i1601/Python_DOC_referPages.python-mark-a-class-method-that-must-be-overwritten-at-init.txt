<div class="post-text" itemprop="text">
<p>Suppose I have a base class with unimplemented methods as follows:</p>
<pre><code>class Polygon():
    def __init__(self):
        pass

    def perimeter(self):
        pass

    def area(self):
        pass
</code></pre>
<p>Now, let's say one of my colleagues uses the Polygon class to create a subclass as follows:</p>
<pre><code>import math

class Circle(Polygon):
    def __init__(self, radius):
        self.radius = radius

    def perimeter(self):
        return 2 * math.pi * self.radius
</code></pre>
<p>(H/Sh)e has forgotten to implement the area() method.</p>
<p>How can I force the subclass to implement the parent's area() method?</p>
</div>
<div class="post-text" itemprop="text">
<p>this could be your parent class:</p>
<pre><code>class Polygon():
    def __init__(self):
        raise NotImplementedError

    def perimeter(self):
        raise NotImplementedError

    def area(self):
        raise NotImplementedError
</code></pre>
<p>although the problem will be spotted at runtime only, when one of the instances of the child classes tries to call one of these methods.</p>
<hr/>
<p>a different version is to use <a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod" rel="nofollow noreferrer"><code>abc.abstractmethod</code></a>.</p>
<pre><code>from abc import ABCMeta, abstractmethod
import math

class Polygon(metaclass=ABCMeta):

    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

    @abstractmethod
    def area(self):
        pass

class Circle(Polygon):
    def __init__(self, radius):
        self.radius = radius

    def perimeter(self):
        return 2 * math.pi * self.radius

#    def area(self):
#        return math.pi * self.radius**2


c = Circle(9.0)
# TypeError: Can't instantiate abstract class Circle
#            with abstract methods area
</code></pre>
<p>you will not be able to instantiate a <code>Circle</code> without it having all the methods implemented.</p>
<p>this is the <code>python 3</code> syntax; in <code>python 2</code> you'd need to</p>
<pre><code>class Polygon(object):
    __metaclass__ = ABCMeta
</code></pre>
<hr/>
<p>also note that for the binary special functions  <code>__eq__(), __lt__(), __add__(), ...</code> it is better to <a href="https://stackoverflow.com/a/44575926/4954037"><code>return NotImplemented</code></a> instead of raising <code>NotImplementedError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's exactly what <code>NotImplementedError</code> are used for :)</p>
<p>In your base class</p>
<pre><code>def area(self):
     raise NotImplementedError("Hey, Don't forget to implement the area!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can raise <a href="https://docs.python.org/3/library/exceptions.html#NotImplementedError" rel="nofollow noreferrer"><code>NotImplementedError</code></a> exception in base class method.</p>
<pre><code>class Polygon:
    def area(self):
        raise NotImplementedError
</code></pre>
<p>Also you can use <a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod" rel="nofollow noreferrer"><code>@abc.abstractmethod</code></a>, but then you need to declare metaclass to be <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta" rel="nofollow noreferrer"><code>abc.ABCMeta</code></a>, which would make your class abstract. More about <a href="https://docs.python.org/3/library/abc.html#module-abc" rel="nofollow noreferrer"><code>abc</code> module</a></p>
</div>
