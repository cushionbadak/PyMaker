<div class="post-text" itemprop="text">
<p>I'm experimenting with Cython and possibilities of code obfuscation (<a href="https://medium.com/@xpl/protecting-python-sources-using-cython-dcd940bb188e" rel="nofollow noreferrer">article</a>). In that article especially noted: </p>
<blockquote>
<p>When the compilation is done thereâ€™s no way to reverse compiled libraries back to readable Python source code!</p>
</blockquote>
<p>I use this <a href="https://stackoverflow.com/questions/48703423/cython-compile-a-standalone-static-executable">question</a> info to compile my code in standalone executable.
In my understanding and as mentioned in article <a href="https://medium.com/@xpl/protecting-python-sources-using-cython-dcd940bb188e" rel="nofollow noreferrer">1</a>, Cython translates Python code into C code, with correspond calls of Python library (is this correct?). In other wolds, we have only C file as output, and it can't be de-compiled back like .pyc files.</p>
<p>My test code is very simple:</p>
<pre><code>def my_crashing_function():
    x = "1"
    y = 2
    test = x + y  # we will crash here

if __name__ == "__main__":
    my_crashing_function()
</code></pre>
<p>But when I run this executable (after <code>cython --embed -o test.c main.py</code> and <code>gcc -Os -I /usr/include/python3.5m -o test test.c -lpython3.5m -lpthread -lm -lutil -ldl -s</code>)
I get error like this:</p>
<pre><code>user@debian:~# ./hello 
Traceback (most recent call last):
  File "main.py", line 7, in init main
   my_crashing_function()
  File "main.py", line 4, in main.my_crashing_function
   test = x + y  # we will crash here
TypeError: Can't convert 'int' object to str implicitly
</code></pre>
<p>As you see, we have traceback with all method names, correct variable names and lines, even with original source code comments. If we rename variable or change comment - it will be also changed in traceback.
I don't understand how traceback can display all this info. It can work that way only if the full source code is also stored in the executable file.
Please explain me, where I'm wrong?</p>
<p>Update. Traceback in my situation was generated from original .py file. This file was in the same folder as compiled executable, and only because of this I got all source code and comments in traceback. After deletion of original .py file traceback will contain only exception type and line numbers, without other info.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it does not embed the code. It relies on being able to find the <code>.pyx</code> file - if you move that file then you will get a traceback but without the original code.</p>
<p>If you inspect the generated C source you'll find that the error handling routine goes through <code>__Pyx_AddTraceback</code>, then <code>__Pyx_CreateCodeObjectForTraceback</code>, which creates a <a href="https://docs.python.org/3/c-api/code.html" rel="nofollow noreferrer"><code>PyCodeObject</code></a> linked to your <code>.pyx</code> source file.</p>
<p>Under some circumstances (I'm not sure what though) it links to your <code>.c</code> file instead. The same rules will apply though - if it can't find the source it won't show that line.</p>
<hr/>
<p>Even without the .pyx file you will still get a traceback with useful method names - these are preserved in the compiled executable.</p>
</div>
