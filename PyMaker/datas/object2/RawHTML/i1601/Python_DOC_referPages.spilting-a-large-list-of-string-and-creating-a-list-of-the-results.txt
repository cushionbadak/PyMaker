<div class="post-text" itemprop="text">
<p>I have a large list of strings. Each string has a number of segments separated by a ";":</p>
<pre><code>'1,2,23,17,-1006,0.20;1,3,3,2258,-1308,0.72;'
</code></pre>
<p>I want to split each string by the ";" and save the resulting list. </p>
<p>I am currently using: </p>
<pre><code>player_parts = []

for line in playerinf:
    parts = line.split(";")
    player_parts = player_parts + parts
</code></pre>
<p>Is there a faster way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, you can try <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> and unpacking a list comprehension:</p>
<pre><code>from itertools import chain

lines = ['1,2,23,17,-1006,0.20;1,3,3,2258,-1308,0.72;', '2,3,34,56,-2134,0.50;2,4,7,2125,-3408,0.56;']
parts = list(chain(*[line.split(';')[:-1] for line in lines]))

parts
# ['1,2,23,17,-1006,0.20', 
#  '1,3,3,2258,-1308,0.72', 
#  '2,3,34,56,-2134,0.50', 
#  '2,4,7,2125,-3408,0.56']
</code></pre>
<p>I added a <code>[:-1]</code> to drop the last empty element of the <code>split(';')</code>.  If however you need that empty element, just remove <code>[:-1]</code>.</p>
<p>Since <code>chain</code> runs on compiled code it should be much faster than the python interpreter.</p>
<p>The run time for 10000 lines are:</p>
<pre><code>using chain: 0.34399986267089844s
using your method: &gt; 240.234s     # (I didn't want to wait any more)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Every time you do <code>player_parts = player_parts + parts</code>, you're combining two lists into a new list and assigning that list to <code>player_parts</code>. That's very inefficient. Doing <code>player_parts.extend(parts)</code> would greatly improve performance, since it's adding the contents to the end of the original <code>player_parts</code> list.</p>
<hr/>
<p>However, it looks like you may be adding some empty strings to the <code>player_parts</code> list. So let's see if there's a better way.</p>
<p>It sounds like you have a file like this:</p>
<pre><code>1,2,23,17,-1006,0.20;1,3,3,2258,-1308,0.72;
1,2,23,17,-1006,0.20;1,3,3,2258,-1308,0.72
1,2,23,17,-1006,0.20;1,3,3,2258,-1308,0.72;
</code></pre>
<p>And you want this result:</p>
<pre><code>['1,2,23,17,-1006,0.20', '1,3,3,2258,-1308,0.72', '1,2,23,17,-1006,0.20',
 '1,3,3,2258,-1308,0.72', '1,2,23,17,-1006,0.20', '1,3,3,2258,-1308,0.72']
</code></pre>
<p>So this should work:</p>
<pre><code>f = open('infile', 'r')

player_parts = []

for line in f:  # For each line in the file
    for segment in line.split(';'):  # For each segment in the line
        if segment.strip():  # If the segment has anything in it besides whitespace
            player_parts.append(segment)  # Add it to the end of the list
</code></pre>
<hr/>
<p>If you're comfortable with comprehensions, you can do this:</p>
<pre><code>f = open('infile', 'r')

player_parts = []

for line in f:
    player_parts.extend(segment for segment in line.split(';') if segment.strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As far as I know list comprehensions are always a good approach if speed is important. </p>
<pre><code>player_parts = [line.split(';') for line in playerinf]
</code></pre>
</div>
<span class="comment-copy">What is the expected output?</span>
<span class="comment-copy">Why the <code>pandas</code> tag?</span>
<span class="comment-copy">Vaishali, a huge list of strings after being seperated by ";"</span>
<span class="comment-copy">Please <i>show us</i> your desired result, after you show a complete example input. (I believe what you show is just one string in your "large list"). Your description is somewhat vague.</span>
<span class="comment-copy">It is very difficult to effectively optimize performance in the abstract. One approach may be the fastest for a particular dataset but not necessarily for all possible datasets.</span>
<span class="comment-copy">Thanks Idlehands</span>
<span class="comment-copy">Thanks for the detailed answer Cyphase</span>
<span class="comment-copy">That returns a list of lists, but the OP's current solution is a flattened list of strings.</span>
