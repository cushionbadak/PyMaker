<div class="post-text" itemprop="text">
<p>I have the problem that for a project I need to work with a framework (Python), that has a poor documentation. I know what it does since it is the back end of a running application. I also know that no framework is good if the documentation is bad and that I should prob. code it myself. But, I have a time constraint. Therefore my question is: Is there a cooking recipe on how to understand a poorly documented framework? </p>
<p>What I tried until now is checking some functions and identify the organizational units in the framework but I am lacking a system to do it more effectively.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I were you, with time constaraints, and bound to use a specific framework. I'll go in the following manner: </p>
<ul>
<li>List down the use cases I desire to implement using the framework </li>
<li>Identify the APIs provided by the framework that helps me implement the use cases</li>
<li>Prototype the usecases based on the available documentation and reading</li>
</ul>
<p>The prototyping is not implementing the entire use case, but to identify the building blocks around the case and implementing them. e.g., If my usecase is to fetch the Students, along with their courses, and if I were using Hibernate to implement, I would prototype the database accesss, validating how easily am I able to access the database using Hibernate, or how easily I am able to get the relational data by means of joining/aggregation etc. </p>
<p>The prototyping will help me figure out the possible limitations/bugs in the framework. If the limitations are more of show-stoppers, I will implement the supporting APIs myself; or I can take a call to scrap out the entire framework and write one for myself; whichever makes more sense. </p>
</div>
<div class="post-text" itemprop="text">
<p>You may also use python debugging library: <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">pdb</a>. After importing it with <code>import pdb</code> you may set traces in the body of functions and classes <code>pdb.set_trace()</code>. Then it will stop the execution of the program in the line and you may look at existing variables and processes. </p>
</div>
<span class="comment-copy">You'll have to read the code. Shariq advice looks good.</span>
