<div class="post-text" itemprop="text">
<p>I am working in Python 3.6+ and want to check if a few different modules are installed from within my script. If not, I want to attempt to install them with a few caveats:</p>
<p>1) the proper way to do this, if I remember reading it correctly, is to look into 'packaging and versioning' .. possibly with setuptools .. im not really sure.  There is a Digital ocean page that is hard to follow. It discusses this but I keep running into an issue with documents around this topic: they are all based around the assumption that the project will be uploaded to pypip for use with pip. I specifically do not want this. I want to distribute this directly to individuals, by hand. Maybe in the future have it available in a closed, not-open-to-everyone github repo. </p>
<p>Currently in my script I'm using a try and except. Try to import these modules, if they don't exist i run this exception which i don't know if it works. </p>
<pre><code>except ImportError:
from pip._internal import main as pip
pip(['install', colorama])
import colorama
print('colorama imported successfully')
</code></pre>
<p>and for what its worth - i have no idea what <code>pip(['install', colorama])</code> is doing. </p>
<p>The packaging aspect seems to include imported modules with your code. How does one preform this function? Instead of checking if colorama is installed and then attempting to launch a subprocess to install it .. how do i just include the entire thing assuming this is the 'right' way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>One thing that's usually done to avoid this problem is to build your program in a <em>virtual environment</em> which you <em>know</em> to contain the correct python scripts - and then either</p>
<ul>
<li>package the entire virtual environment with your project as a unit, or </li>
<li>write a <code>requirements.txt</code> file that lists all the packages (and versions) that are expected to be installed before the user runs the program (you'd install everything on that list by doing <code>pip install -r requirements.txt</code> on the command line before running the program with <code>python script_name.py</code>)</li>
</ul>
<p>Ideally, you'd then have your script fail if the required dependencies aren't there, and have the user install them manually to fix the issue.</p>
<p><a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">Here's python 3's documentation on virtual environments</a></p>
<p>What you're doing now is unconventional - if it's working, it's working, but it's not great practice. Biggest reason for that is that your script, in its current state, is installing software on the user's machine <em>without their consent</em>, i.e. the user did not tell the program to install this software and was not told that the software was necessary, but the program is installing it anyway. In your case this may be harmless, but in general it's something to stay away from because it can get into really shady territory.</p>
</div>
<span class="comment-copy">your reasoning for the unconventionality was really helpful as i didn't consider that aspect. Thank you. Can you comment on .. what is this method/tool/process people seem to use where they have a setup.py script that lists all the required packages and running that seems to fetch and install all that stuff along with the ability to have versioning of your software?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/1471994/what-is-setup-py">This Stackoverflow post</a> does a good job at explaining how you use <code>setup.py</code> files.</span>
