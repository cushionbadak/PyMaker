<div class="post-text" itemprop="text">
<p>Actually, i'm working on a task from SPOJ. How to check if a string contains any char from set, but first char from string where a char from set occur can not be deleted. </p>
<p>F.e.
Have a string </p>
<pre><code>word = "anAconda_elEphant"
</code></pre>
<p>and a set of vowels: </p>
<pre><code>vowels = set('aeiouyAEIOUY')
</code></pre>
<p>I want in result a string </p>
<pre><code>word = "ancnd_lphnt"
</code></pre>
<p>This should return True when occurence of any char in set is equal 1. I know that argument for a method <strong>.count()</strong> must be str, not set.</p>
<pre><code>if word.count(vowels) == 1:
   for char in word[char_pos:]:
        if char in vowels:
            char.replace('')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just use a regular expression </p>
<pre><code>import re
word = "anAconda_elEphant"
# use a  "lookbehind" to make sure there is at least one character in front of this character...
print(re.sub("(?&lt;=.)[aeiouyAEIOUY]",'',word))
# 'ancnd_lphnt'
</code></pre>
<p>as mentioned if you expect it to skip the first match of the set as opposed to just the first letter you will need a different solution</p>
<pre><code>print(re.sub("(?&lt;=.)[aeiouyAEIOUY]",'',"bace"))
# 'bc' # a is not the FIRST letter so it is replaced
</code></pre>
<p>the easiest is to split it into two steps
first split the string on the first match</p>
<pre><code>word = "bace"
splitted_string = re.split("(.*?[aeiouyAEIOUY])",word,1)
# you will notice we have an extra empty string at the beginning of our matches ... so we can skip that
lhs,rhs = splitted_string[1:]
# now just run a simple re.sub on our rhs and rejoin the halves
print(lhs + re.sub("[aeiouyAEIOUY]",'',rhs))
# results in "bac"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>for</code> loop as below. The idea is to build a list, and use a flag to mark when you meet a character from <code>vowels</code>.</p>
<pre><code>word = "anAconda_elEphant"
vowels = set('aeiouyAEIOUY')

flag = False

L = []
for ch in word:
    if (ch not in vowels) or (not flag):
        L.append(ch)
    if ch in vowels:
        flag = True

word = ''.join(L)

print(word)

ancnd_lphnt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print(vowels.intersection(word))
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#frozenset.intersection" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#frozenset.intersection</a></p>
</div>
<span class="comment-copy">Do you want to return a <code>True/False</code> result, or return the modified string?</span>
<span class="comment-copy">When you say the first char shouldn't be deleted, do you mean the first vowel shouldn't be deleted, or the first char of any type? E.g. what should be the result for <code>word = "bace"</code>, <code>bc</code> or <code>bac</code>?</span>
<span class="comment-copy">if its <code>bac</code> that makes my solution invalid</span>
<span class="comment-copy">@Barmar want a return an int which tell me how many vowels are in string. True = 1, False !=1</span>
<span class="comment-copy">But you also said you want to delete vowels from the string. Do you want two returns, the count of vowels and the new string?</span>
<span class="comment-copy">Wished I had the mental capacity to finangle with my own REGEX. Nice answer</span>
<span class="comment-copy">He wants to remove the vowels, so it should be <code>word.difference(vowels)</code></span>
<span class="comment-copy">actually, neither would work if there are duplicate consonants - only one of the duplicates would survive.</span>
