<div class="post-text" itemprop="text">
<p>When trying to open a file using os.open with the mode 777 (meaning allow everything) -</p>
<pre><code>os.open("/tmp/lol", flags=(os.O_CREAT), mode=0o777)
</code></pre>
<p>It creates the file without the write permission like this -</p>
<pre><code>-rwxrwxr-x  1 cybellum cybellum       0 Nov 20 09:38 lol*
</code></pre>
<p>When trying to use chmod("/tmp/lol", 0o777), the file gains the right permissions:</p>
<pre><code>-rwxrwxrwx  1 cybellum cybellum       0 Nov 20 09:38 lol*
</code></pre>
<p>Why doesn't os.open work as expected?<br/>
And is there a way to create a file with the 777 mode (and if the file exists it will just change the permissions.. (Because I tried pathlib.Path.touch))?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you create a file with <code>open</code>, the permissions specified in the <code>open</code> call are modified by your <code>umask</code> setting.  The <code>umask</code> defines bits that are "masked out".  On my system, it looks like my current <code>umask</code> is <code>0002</code>:</p>
<pre><code>$ umask
0002
</code></pre>
<p>This means that when I run code like yours:</p>
<pre><code>import os
os.open('testfile', flags=(os.O_CREAT), mode=0o777)
</code></pre>
<p>I'll get the following behavior:</p>
<pre><code>$ python filetest
$ ls -l testfile
-rwxrwxr-x. 1 lars lars       0 Nov 20 07:47 testfile
</code></pre>
<p>I can set the <code>umask</code> to different values to control the permissions
applied by default:</p>
<pre><code>$ umask 022
$ python filetest
$ ls -l testfile
-rwxr-xr-x. 1 lars lars 0 Nov 20 07:49 testfile
</code></pre>
<p>Or:</p>
<pre><code>$ umask 077
$ python filetest.py
$ ls -l testfile
-rwx------. 1 lars lars 0 Nov 20 07:50 testfile
</code></pre>
<p>Read more <a href="https://en.wikipedia.org/wiki/Umask" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Note that <a href="https://docs.python.org/3/library/os.html#os.umask" rel="nofollow noreferrer">Python includes <code>os.umask</code></a> for manipulating the <code>umask</code>.</span>
<span class="comment-copy">Sure, although I would argue that in most cases you want to let the user manipulate their umask external to your code. If someone has explicitly set their umask to avoid creating world-readable documents, it can be surprising when something goes behind their back to make the change anyway.</span>
<span class="comment-copy">Interesting! But what if you don't want to open all of the files using the set umask and use a specific file creation functionality that will be permissionless?</span>
<span class="comment-copy">You can set <code>umask</code> to 0, of course, either external to your code or, as @ShadowRanger has suggested, using <code>os.umask</code>.</span>
<span class="comment-copy">@larsks: Agreed that usually the user should be in charge of their <code>umask</code>, not the program.</span>
