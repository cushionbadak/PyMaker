<div class="post-text" itemprop="text">
<p>Given some long string:</p>
<pre><code>s = "something blah blah: but it isn't 4:00 or 16:00 yet, how should we do this: that's it"
</code></pre>
<p>I want to be able to get a returning string with: </p>
<pre><code>s = "something blah blah:\n but it isn't 4:00 or 16:00 yet, how should we do this:\n that's it"
</code></pre>
<p>UPDATE THIS IS MY CODE (not working because it either splits the string or not at all):</p>
<pre><code>def tokenize_time(s):
    #check if time is in string
    if re.search(ur"([:])", s):
        if not re.search(ur"([0-9]|[2][0-3]):([0-5][0-9])", s):
            s = re.sub(':', ':\n', s)
    return s 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Why it isn't working:</strong><br/>
You're asking it to search the entire string <code>s</code> for one pattern, <code>ur"([:])"</code>.  </p>
<p>If a match is found, you want it to search the entire string <code>s</code> again, but this time for the pattern <code>ur"([0-9]|[2][0-3]):([0-5][0-9])"</code>.  </p>
<p>If the first pattern is found, but the second pattern is not found, the substitution <code>re.sub(':', ':\n', s)</code> is made, replacing all <code>':'</code> in <code>s</code> with <code>':\n'</code>.  </p>
<p><strong>What you probably want to do is either:</strong><br/>
1) Combine a negative lookbehind <code>(?&lt;!...)</code> with a negative lookahead <code>(?!...)</code> in your pattern to define a pattern which describes "colons but not if it's a time".<br/>
<strong>or</strong><br/>
2) Search the string for a colon, then search the region around that match to see if the match is part of a time; if not, replace that item.  </p>
<p>Certainly (1) is more efficient, but implementing (2) will help you understand why your solution isn't working.  </p>
<p>This may be helpful:<br/>
<a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html#re.search</a> </p>
<p><strong>Solution to #1:</strong>
The complete match pattern you're looking to replace should be:<br/>
<code>(?&lt;!(\b[0-1]?[0-9]|[2][0-3])):(?!([0-5][0-9])((?i)(am)|(pm))?\b)</code><br/>
So your one-liner would be:<br/>
<code>s = re.sub(r'(?&lt;!(\b[0-1]?[0-9]|[2][0-3])):(?!([0-5][0-9])((?i)(am)|(pm))?\b)', ':\n', s)</code><br/>
(Aren't regular expressions just <em>so</em> aesthetically pleasing?)</p>
<p>Try plugging it in here to test: <a href="https://www.debuggex.com/" rel="nofollow noreferrer">https://www.debuggex.com/</a><br/>
(Remember to switch to <code>Python</code> in the dropdown menu.)</p>
<p><strong>EDIT:</strong><br/>
I forgot Python's lookbehinds have to be fixed width. A sloppy fix is to use the pattern:<br/>
<code>(?&lt;!([0-1\b][0-9]|[2][0-3])):(?!([0-5][0-9])((?i)(am)|(pm))?\b)</code><br/>
The caveat here is that it recognizes "garbage like11:45 and whatnot" as containing a time, but correctly identifies that "garbage like1:45 and whatnot" does not contain a time.</p>
<p><strong>EDIT #2:</strong><br/>
A little further checking shows that Javascript doesn't support lookbehinds <em>at all</em>, so many online regex testers might fail to execute this, even if you toggle them into Python mode.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use this:</p>
<pre><code>&gt;&gt;&gt; re.sub('(?=\D):(?&lt;=\D)',':\n',s)
"something blah blah:\n but it isn't 4:00 or 16:00 yet, how should we do this:\n that's it"
</code></pre>
<p>Which will match colons only if they are preceded and followed by a non-numeric (<code>\D</code>) character, using the <code>?=</code> and <code>?&lt;=</code> <a href="https://www.regular-expressions.info/lookaround.html" rel="nofollow noreferrer">lookaround assertions</a></p>
</div>
<span class="comment-copy">Have you tried writing such a regular expression yourself yet? Please post the code you've tried that isn't working</span>
<span class="comment-copy">@CertainPerformance my code currently either splits the string or not at all... having trouble with conditionals and regex</span>
<span class="comment-copy">What is \b at the end for?</span>
<span class="comment-copy">That's to match a word boundary. It's there to ensure that your time is actually a time, and not jumbled into some other garbage, such as a MAC address.</span>
<span class="comment-copy">How do I do conditionals? Say I want to split on either "。」"or" 。" (but not twice on "。」")</span>
<span class="comment-copy">Not sure I get your new question, but you can use <code>|</code> in regex: <code>re.split('。」|。', s)</code></span>
<span class="comment-copy">yes, that works, but this way I don't get to keep either of the delimiters.</span>
