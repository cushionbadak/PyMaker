<div class="post-text" itemprop="text">
<p>I know that this argument is trivial and treated in a lot of post, but I've read it and I'm still don't have clear the idea about how from a folder can be treated as package... 
take this example (I know that there is the *rc files that make the same result .. ) 
I have defined a base class named <code>basequalityplot</code> in which I've defined al the things that is necessary to customize a plot (suction in which I've defined the common parameter (steady or variable) , an update the rcParams ) in a class name quality plot, which contain the base class and more ...:
the complete class named basequalityplot.py is reported in: <a href="https://paste.pound-python.org/show/RiSewRM0Y45ORkIg8dOE/" rel="nofollow noreferrer">enter link description here</a></p>
<p>the base module contains the derived classes ... often repetitive .. and I will report just one :</p>
<pre><code> import sys
import os
import matplotlib
import matplotlib.pyplot as plt 
import numpy as np
from matplotlib.ticker import MultipleLocator, FormatStrFormatter 
from matplotlib.axes import Axes
from cycler import cycler
from matplotlib import cm
from collections import OrderedDict
from matplotlib.ticker import AutoMinorLocator
from basequalityplot import BasePlot

#######################################################################
#######################################################################

class Standard(BasePlot):

    def __init__(self,**kwargs):

        self.parameters = kwargs

        if 'box' not in self.parameters.keys():
            self.parameters['box'] = '#AAAAAA' 
        if 'axeslabel' not in self.parameters.keys():
            self.parameters['axeslabel'] = '#AAAAAA'
        if 'axes.linewidth' not in self.parameters.keys():
            self.parameters['axes.linewidth'] = 0.7
        if 'xtickcolor' not in self.parameters.keys():
            self.parameters['xtickcolor'] ='#AAAAAA' 
        if 'ytickcolor' not in self.parameters.keys(): 
            self.parameters['ytickcolor'] = 'gray' 
        if 'gridcolor' not in self.parameters.keys(): 
            self.parameters['gridcolor'] = 'gray' #'#AAAAAA' #'#dddddd'
        if 'font' not in self.parameters.keys(): 
            self.parameters['font'] = 'serif'
        if 'fontstyle' not in self.parameters.keys():
            self.parameters['fontstyle'] = 'italic'
        if 'fontsize' not in self.parameters.keys():
            self.parameters['fontsize'] = 10.0
        if 'legendfontsize' not in self.parameters.keys():
            self.parameters['legendfontsize'] =10.0
        if 'legendEdgeColor' not in self.parameters.keys():
            self.parameters['legendEdgeColor'] = '#AAAAAA' #'#dddddd'
        if 'scheme' not in self.parameters.keys():
            self.parameters['scheme'] = 'nb'
        if 'cycle' not in self.parameters.keys():
            self.parameters['cycle']  = self.cycle('0')
        if 'axes.linewidth' not in self.parameters.keys():
            self.parameters['axes.linewidth'] = 0.7
        if 'grid.dashes' not in self.parameters.keys():
            self.parameters['grid.dashes'] = (5,5)
        if 'grid.linestyle' not in self.parameters.keys():
            self.parameters['grid.linestyle'] = '--' 
        if 'linestyle' not in self.parameters.keys():
            self.parameters['linestyle'] = self.linestyles('paper')
        if 'cycle' not in self.parameters.keys():
            self.parameters['cycle'] = self.cycle('0')
        if 'grid.alpha' not in self.parameters.keys():
            self.parameters['grid.alpha'] = '1'
        if 'grid.linewidth' not in self.parameters.keys():
            self.parameters['grid.linewidth'] = 0.7


        self.parameters.update(kwargs)

        super().__init__(**self.parameters)
</code></pre>
<p>well ... I would like to contain <code>basequalityplot.py</code> and <code>qualityplot.py</code> in the same directory (where qualityplot is the module that contain the class that I want use .. in this case I've report just the standard one) </p>
<p>I've tried to create a folder named <code>qualityPlot</code> </p>
<p>and then from a script in subdirectory try to <code>import qualityPlot</code> as is usually for import packjage .. but this doesn't works....
May somebody help me ? :( </p>
</div>
<div class="post-text" itemprop="text">
<p>To use modules in Python</p>
<ul>
<li>Ensure the <code>__init__.py</code> file exists in the directory (note the underscores)</li>
<li>Note that both the folder name and the file name are part of the module</li>
<li>Make sure Python will find the path (say with PYTHONPATH) </li>
</ul>
<p>In your example, </p>
<p><code>from basequalityplot import BasePlot</code></p>
<p>This expects to find a file basequalityplot.py in the current directory (or elsewhere directly on the python path, or a compiled version). Inside that file it expects to find the class BasePlot.</p>
<blockquote>
<p>I would like to contain basequalityplot.py and qualityplot.py in the same directory (where qualityplot is the module that contain the class that I want use .. in this case I've report just the standard one)</p>
<p>I've tried to create a folder named qualityPlot</p>
</blockquote>
<p>What you've described here doesn't quite match your example code. If you have a folder structure</p>
<pre><code>qualityPlot/
    __init__.py
    basequalityplot.py
    qualityplot.py
</code></pre>
<p>I would expect the import statement to read</p>
<pre><code>from qualityPlot.qualityplot import BasePlot
</code></pre>
<p>6.4 in the Python Tutorial has a useful example
<a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#packages</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to create a (probably empty) <code>__init__.py</code> in the directory.</p>
<p>Note that in Python there is no requirement or expectation for each class to be in its own file, so it's fine if you just want to create your child classes in the same file.</p>
<p>Note also, a much better pattern for your parameters is to define a dictionary of defaults, and then update it with whatever comes in from kwargs:</p>
<pre><code>self.parameters = {
    'box': '#AAAAAA',
    'axeslabel': '#AAAAAA',
    'axes.linewidth': 0.7,
    'xtickcolor': '#AAAAAA',
    'ytickcolor': 'gray',
    ...
}
self.parameters.update(kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to "help" the <code>import</code> by telling it where to look:</p>
<pre><code>import sys
sys.path.append("C:/path/to/your/qualityplot/folder")
import qualityPlot
</code></pre>
<p>It should work. I use that to write different programs placed at different places but calling to the same common library (personal stuff with maths and graphs mostly).</p>
</div>
<span class="comment-copy">I've tried to create an empty <b>init</b>.py but the thisgs is the same</span>
