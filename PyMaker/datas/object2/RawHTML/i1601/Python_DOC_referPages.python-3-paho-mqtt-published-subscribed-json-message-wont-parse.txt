<div class="post-text" itemprop="text">
<p>Rookie here.  </p>
<p>I have a simple python code that's supposed to subscribe to a topic and publish JSON payload to the same topic using MQTT protocol. But for some reason, I am unable to load the payload as JSON!</p>
<p>What am I doing wrong here?</p>
<pre><code># -*- coding: utf-8 -*-
import paho.mqtt.client as mqtt
import json
mqtt_broker      = '192.168.1.111'
mqtt_topic_one   = 'mqtt_topic/tops_one'
mqtt_topic_two   = 'mqtt_topic/tops_two'

json_data_1      = '''{
    "this_json": "info",
    "data": {
        "multi_keyval": {
            "1": "1",
            "5": "5",
            "15": "15"
        },
        "single_keyval": {
            "single_key": "200"
        }
    }
}'''


def pass_to_func_and_pub(data_to_pub):
    print(data_to_pub)                # --------&gt; This PRINTS
    print(json.loads(data_to_pub))    # --------&gt; This DOES NOT PRINT

    # The following two lines don't work either.
    unpacked_json = json.loads(data_to_pub)
    client.publish(mqtt_topic_two, unpacked_json['this_json'])


def on_connect(client, userdata, flags, rc):
    client.subscribe(mqtt_topic_one)
    client.publish(mqtt_topic_one, json_data_1)


def on_message(client, userdata, msg):
    pass_to_func_and_pub(str(msg.payload))

client = mqtt.Client()

client.on_connect = on_connect
client.on_message = on_message

client.connect(mqtt_broker)
try:
    client.loop_forever()
except KeyboardInterrupt:
    client.disconnect()
    print('MQTT client disconnected, exiting now.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of problems here.</p>
<h2>1. Exception handling</h2>
<p>You're not handling exceptions (and Paho effectively ignores them within handlers, to keep the client alive I guess). This means when the exception <em>is</em> thrown in <code>json.loads(data_to_pub)</code>, you're never seeing this but the function is exited as there is no local <code>except</code> block.</p>
<h3>Improved version</h3>
<pre><code>def pass_to_func_and_pub(data_to_pub):
    print("Raw data: ", data_to_pub)
    try:
        unpacked_json = json.loads(data_to_pub)
    except Exception as e:
        print("Couldn't parse raw data: %s" % data_to_pub, e)
    else:
        print("JSON:", unpacked_json)
        client.publish(mqtt_topic_two, unpacked_json['this_json'])
</code></pre>
<h3>Hang on, what exception?</h3>
<p>Running this improved version we can now see:</p>
<p><code>Couldn't parse raw data: b'{\n    "this_json": "info",\n    "data": {\n        "multi_keyval": {\n            "1": "1",\n            "5": "5",\n            "15": "15"\n        },\n        "single_keyval": {\n            "single_key": "200"\n        }\n    }\n}' Expecting value: line 1 column 1 (char 0)</code></p>
<p><em>Hmmm, what's that <code>b'</code> doing there?</em>...</p>
<h2>2. The encoding problem</h2>
<p>Essentially your problem comes down to one line </p>
<pre><code>def on_message(client, userdata, msg):
    pass_to_func_and_pub(str(msg.payload))
</code></pre>
<p>By calling <code>str</code> on the <code>payload</code> of that <code>MqttMessage</code>, <strong>which is a <code>bytes</code> object</strong> in Python 3, you'll get the stringified version of those bytes, e.g. <code>b'foobar'</code>.</p>
<p>This <code>b</code>, of course, makes it invalid JSON now, hence <code>Expecting value: line 1 column 1 (char 0)</code>...</p>
<h3>Fixed version</h3>
<p>Don't call <code>str</code>! <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer">Json.loads can handle <code>bytes</code> too</a>. So:</p>
<pre><code>def on_message(client, userdata, msg):
    pass_to_func_and_pub(msg.payload)
</code></pre>
<p>Or, assuming utf-8 encoding, we can do this more explicitly (I prefer working in strings):</p>
<pre><code>def on_message(client, userdata, msg):
    pass_to_func_and_pub(msg.payload.decode('utf-8'))
</code></pre>
<p>Hope that helps!</p>
</div>
<span class="comment-copy">This is answer's wonderful and worked perfectly!  Thank you so much.  I didn't realize that Paho ignores exceptions within handlers.</span>
<span class="comment-copy">Great! Glad it helped</span>
