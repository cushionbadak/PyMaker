<div class="post-text" itemprop="text">
<p>I have two nested dictionaries -</p>
<pre><code>Runid1 = { 'test1' : {'r1':6.0, 'r2':1.0, 'r3':3.0, 'r4':116.0, 'r5':80.0},
           'test2' : {'r1':5.0, 'r2':1.0, 'r3':1.0, 'r4':1.0, 'r5':80.0},
           'test3' : {'r1':5.0, 'r2':11.0, 'r3':50.0, 'r4':80.0, 'r5':20.0},
           'test4' : {'r1':7.0 , 'r2':9.0 , 'r3':5.0 , 'r4':1.0 , 'r5':80.0} }

Runid2 = { 'test1' : {'r1':1.0, 'r2':1.0, 'r3':2.0, 'r4':75.0, 'r5':79.0},
           'test5' : {'r1':1.0, 'r2':1.0, 'r3':1.0, 'r4':1.0, 'r5':80.0},
           'test3' : {'r1':2.0, 'r2':10.0, 'r3':45.0, 'r4':60.0, 'r5':80.0},
           'test4' : {'r1':1.0, 'r2':1.0, 'r3':1.0,  'r4':1.0, 'r5':80.0} }
</code></pre>
<p>Task: for each test in Runid1, if the test is present in Runid2, we compare the two nested dictionaries for that test. </p>
<p>Based on some condition(s), we compare each parameter (r-values) of both the dictionaries and create lists of such parameters, that qualify the condition. We add the result to another dictionary named 'Result'.</p>
<p>Eg. For each test in Runid1, add to list all r values that are &lt; 10 and diff between them is &gt; 4.</p>
<pre><code>Result = { 'test1' : {'r1':[6.0,1.0]},
           'test3' : {},
           'test4' : {'r1':[7.0,1.0], 'r2':[9.0,1.0], 'r3':[5.0,1.0]} }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def cmp_r(r1, r2):
...     return r1 &lt; 10 and r2 &lt; 10 and abs(r1 - r2) &gt;= 4
...
&gt;&gt;&gt; def merge_r(d1, d2):
...     return {k: [v, d2[k]] for k,v in d1.items() if k in d2 and cmp_r(v, d2[k])}
...
&gt;&gt;&gt; Result = {k: merge_r(v, Runid2[k]) for k,v in Runid1.items() if k in Runid2}
&gt;&gt;&gt; Result
{'test1': {'r1': [6.0, 1.0]},
 'test3': {},
 'test4': {'r1': [7.0, 1.0], 'r2': [9.0, 1.0], 'r3': [5.0, 1.0]}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try looping over the intersecting keys, then adding the results to a dictionary based on your conditions:</p>
<pre><code>from pprint import pprint

Runid1 = {
    "test1": {"r1": 6.0, "r2": 1.0, "r3": 3.0, "r4": 116.0, "r5": 80.0},
    "test2": {"r1": 5.0, "r2": 1.0, "r3": 1.0, "r4": 1.0, "r5": 80.0},
    "test3": {"r1": 5.0, "r2": 11.0, "r3": 50.0, "r4": 80.0, "r5": 20.0},
    "test4": {"r1": 7.0, "r2": 9.0, "r3": 5.0, "r4": 1.0, "r5": 80.0},
}

Runid2 = {
    "test1": {"r1": 1.0, "r2": 1.0, "r3": 2.0, "r4": 75.0, "r5": 79.0},
    "test5": {"r1": 1.0, "r2": 1.0, "r3": 1.0, "r4": 1.0, "r5": 80.0},
    "test3": {"r1": 2.0, "r2": 10.0, "r3": 45.0, "r4": 60.0, "r5": 80.0},
    "test4": {"r1": 1.0, "r2": 1.0, "r3": 1.0, "r4": 1.0, "r5": 80.0},
}

result = {}
for key in Runid1.keys() &amp; Runid2.keys():
    result[key] = {}

    for k1, k2 in zip(Runid1[key], Runid2[key]):
        v1, v2 = Runid1[key][k1], Runid2[key][k2]

        if v1 &lt; 10 and v2 &lt; 10 and abs(v1 - v2) &gt;= 4:
            result[key][k1] = [v1, v2]

pprint(result)
</code></pre>
<p>Which gives the following:</p>
<pre><code>{'test1': {'r1': [6.0, 1.0]},
 'test3': {},
 'test4': {'r1': [7.0, 1.0], 'r2': [9.0, 1.0], 'r3': [5.0, 1.0]}}
</code></pre>
<p>However, the above approach assumes ordering of keys with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>, which is only guaranteed in <strong>Python3.6+</strong>.</p>
<p>If were using lower versions of Python, then we need to first check if the key from the first dictionary exists in the second dictionary:</p>
<pre><code>result = {}
for key in Runid1.keys() &amp; Runid2.keys():
    result[key] = {}

    for k1, v1 in Runid1[key].items():
        if k1 in Runid2[key]:
            v2 = Runid2[key][k1]

            if v1 &lt; 10 and v2 &lt; 10 and abs(v1 - v2) &gt;= 4:
                result[key][k1] = [v1, v2]
</code></pre>
</div>
<span class="comment-copy">That seems like a homework problem and you haven't shown any attempt. Please include what you've tried so far and where specifically you're having problems.</span>
<span class="comment-copy">Hi- the task was not a homework. I am new to python and couldn't just think of a way to address it.</span>
<span class="comment-copy">thank you very much</span>
<span class="comment-copy">thank you very much for your solution.</span>
