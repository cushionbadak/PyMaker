<div class="post-text" itemprop="text">
<p>I'm looking for some pointers for the following task:
I want to add a Python console to an existing C/C++ program. One important requirement is that the user should be able to access our software through the interpreter. It should be possible to run whole scripts, but also to use the Python interpreter in interactive mode. We already have a Python module by which the user can access our software using sockets, just not integrated into our SW.</p>
<p>Is this possible without embedding and/or extending the Python interpreter? Preferable the user would be able to use whatever python interpreter is already installed. I need the Python interpreter in in interactive mode and then transfer data between the two processes. Is code.InteractiveInterpreter or code.InteractiveConsole (<a href="https://docs.python.org/3/library/code.html" rel="nofollow noreferrer">https://docs.python.org/3/library/code.html</a>) the way to go?</p>
<p>Edit: I'm not looking for 3rd-party libraries / tools. I know I can extend the interpreter to get the result.</p>
<p>Either way (extended or not) I'd have to transfer data between the processes. Which kind of inter-process communication would be suitable for this kind of task?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question correctly, implementing a Python console can be made simple with pybind11 and embedding the interpreter. Hello world example from <a href="https://pybind11.readthedocs.io/en/master/advanced/embedding.html" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>#include &lt;pybind11/embed.h&gt; // everything needed for embedding
namespace py = pybind11;

int main() {
    py::scoped_interpreter guard{}; // start the interpreter and keep it alive

    py::print("Hello, World!"); // use the Python API
}
</code></pre>
<p>Types can be converted between Python and C++ objects, and conveniently, the library provides automatic conversion from common standard library types, e.g. std::vector -&gt; list, std::map -&gt; dict, and python objects can be cast.</p>
</div>
<span class="comment-copy">It's too broad. Python interpreter allows use any OS object to communicate between processes, so those two processes shouldn't be related anyhow. From another point you can use boost.Python or just native Python API to create a process in C++, which will call python scripts or any other internal thing. Furthermore, you can take source code of Python console and add there whatever you want to add for any type of communication.</span>
<span class="comment-copy">Interprocess communication is specific to OS. I would suggest to use <i>zmq</i>.inproc sockets if you want a nice and strong multilanguage abstraction for it.</span>
<span class="comment-copy">@Arkady: Thank you for your comment. I should add I don't want to use 3rd party libraries - if not absolutely necessary. Anyway, my question is more about the "interactive python interpreter" and only secondarily about the communication between our software and the interpreter.</span>
<span class="comment-copy">pybind11 seems to be similar to "Boost.Python", a library helping you to embed / extend the python interpreter. My question is do I really need to embed and extend the python interpreter? Preferable the user would be able to use whatever python interpreter is already installed.</span>
<span class="comment-copy">You would target the Python interpreter you have already installed in your system, there is no need for a separate installation. Simply find_package(PythonLibs) in your cmake file. As others have mentioned, IPC with e.g. zmq is another possibility. If you stick with something like msgpack for data interchange, type conversion should also be pretty straightforward.</span>
<span class="comment-copy">This would still be for a embedded solution, and while useful for me, I'm looking for a non-embedded solution.</span>
