<div class="post-text" itemprop="text">
<p>I am trying to work with pylabels to create nametags for an upcoming event.  In one section of the code, there is this tid-bit:</p>
<pre><code>with open(os.path.join(base_path, "names.txt")) as names:
    sheet.add_labels(name.strip() for name in names)
</code></pre>
<p>where <code>sheet = labels.Sheet(specs, write_name, border=True)</code>.  So essentially, this will load each line of "names.txt" and call the function 'write_name', using specifications in 'specs', and add each name to unique labels.  I'm attempting to change this code to the following:</p>
<pre><code>with text_file[["Name"]] as names:
    sheet.add_labels(name.strip() for name in names)
</code></pre>
<p>But I get this error:</p>
<pre><code>Traceback (most recent call last):
  File "sticker.V.7.py", line 173, in &lt;module&gt;
    with text_file[["Name"]] as names:
AttributeError: __exit__
</code></pre>
<p>Can anyone help me understand what <strong>exit</strong> means in this context?  I do not understand from other submissions.</p>
<p>I am hoping to add this subsetting aspect so that I can add further details to the nametags.</p>
<p>I am using Python3.5</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Can anyone help me understand what <code>__exit__</code> means in this context? I do not understand from other submissions.  ... As <code>text_file</code> isn't a function, it should be exitable.</p>
</blockquote>
<p>When you use <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer"><code>with</code> statement context managers</a>, that object must define these two methods:</p>
<ul>
<li><code>__enter__</code></li>
<li><code>__exit__</code></li>
</ul>
<p>Whatever <code>text_file[["Name"]]</code> is (a Pandas DataFrame, it seems), it doesn't implement either of these methods.  As indicated by the traceback, it doesn't define <code>__enter__</code> at all, so execution stops right there and raises an exception.</p>
<p>I don't see a need to use a DataFrame as a context manager.  A typical use-case is when you want to ensure that something happens at the end of the <code>with</code> block, namely, closing a file stream.  (Like a <code>try</code>/<code>finally</code> block--you want to make sure <code>__exit__</code> gets called unconditionally.)  With a Pandas DataFrame, I'm not sure if there is any analogy that would necessitate have those two dunder methods.</p>
</div>
<span class="comment-copy">What is <code>text_file</code> and why <code>[["Name"]]</code>, obviously it is not something exitable and thus cannot be used with <code>with</code>.</span>
<span class="comment-copy">text_file is a dataframe made through pd.read_csv.  [['Name']] is a column of the text_file dataframe.  as text_file isn't a function, it should be exitable</span>
<span class="comment-copy">Thanks for the advice! ill try another method that includes an exit call.</span>
