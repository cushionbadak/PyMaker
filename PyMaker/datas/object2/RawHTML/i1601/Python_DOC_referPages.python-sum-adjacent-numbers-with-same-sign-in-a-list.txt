<div class="post-text" itemprop="text">
<p>I have to sum adjacent numbers in a list like this:</p>
<p><code>ls = [5, -2, -2, 2, -4, -2 ,-2, 7, 3, 1]</code></p>
<p>The output should be: <code>[5, -4, 2, -8, 11]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>:</p>
<pre><code>from itertools import groupby

ls = [5, -2, -2, 2, -4, -2 ,-2, 7, 3, 1]

[sum(g) for _, g in groupby(ls, key=lambda x: x &lt; 0)]
# [5, -4, 2, -8, 11]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.gropby</code>, grouping by less than 0:</p>
<pre><code>&gt;&gt;&gt; list(map(lambda x: sum(x[1]), itertools.groupby(ls, key=lambda x: x&lt;=0)))
[5, -4, 2, -8, 11]
</code></pre>
</div>
<span class="comment-copy">I have to find the fastest way possible to solve it</span>
<span class="comment-copy">Welcome to SO. Please provide a Minimal, Complete, and Verifiable example. <b>Show us the code for your latest attempt</b> and where you got stuck. and explain why the result is not what you expected.  Edit your question to include the code, please don't add it in a comment, as it will probably be unreadable. <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">I was gonna expand mine with the comprehension, but here it is! good answer!</span>
<span class="comment-copy">how much it is efficient ? btw ty</span>
<span class="comment-copy">@francescociao This is very efficient. Both groupby and and its groups are lazy iterators, no intermediate lists are created in memory. <code>sum</code> is implemented and optimized in C as well as the comprehension.</span>
<span class="comment-copy">thanks mate, you rescued me &lt;3</span>
<span class="comment-copy">how much it is efficient ? btw ty</span>
<span class="comment-copy">@francescociao, it is really efficient, as well as the other answer. You can use both, they can be even a bit better getting rid of the lambda functions ;)</span>
