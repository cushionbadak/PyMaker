<div class="post-text" itemprop="text">
<p>The team I work in has multiple projects, some in Java, some in PHP and some even in Python.</p>
<p>There has been a discussion about class aliasing.</p>
<p>Some quote Clean Code about gratuitous context and say that the namespace is enough to separate classes.</p>
<p><strong>Example</strong>: </p>
<p>For MVC you have a controller, a repository and a service and the following structure:</p>
<ul>
<li>Controllers/</li>
<li>Services/</li>
<li>Repositories/</li>
<li>Entities/</li>
</ul>
<p>In Java I would create 4 classes for :</p>
<ul>
<li><strong>User.java</strong> inside the Entities folder</li>
<li><strong>UserRepository.java</strong> inside the Repositories folder</li>
<li><strong>UserService.java</strong> inside the Services folder</li>
<li><strong>UserController.java</strong> inside the Controllers folder</li>
</ul>
<p>In PHP my colleagues argue that they should all be named 
<strong>User.php</strong> and class aliasing should be used to differentiate between them when used in the same context.</p>
<p>I looked and most languages do offer some form of aliasing:</p>
<ul>
<li>Scala ( <a href="https://www.oreilly.com/library/view/scala-cookbook/9781449340292/ch07s04.html" rel="nofollow noreferrer">https://www.oreilly.com/library/view/scala-cookbook/9781449340292/ch07s04.html</a> )</li>
<li>C/C++/C# ( <a href="https://en.cppreference.com/w/cpp/language/namespace_alias" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/language/namespace_alias</a> )</li>
<li>Python ( <a href="https://www.python.org/dev/peps/pep-0221/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0221/</a> )</li>
</ul>
<p>It is my understanding that class/namespace aliasing is used to either shorten class names or prevent conflict with other libraries.</p>
<p>Have I been brainwashed by Java to code this way, or is it a bad practice leading to hard to read code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Naming classes as a <code>Controller</code> or <code>Service</code> is a java convention that most of java developer follows. It is one of the many convention that we follow for good maintenance and readability of code. Nobody stops anyone for having same class name in different package. But  if you ask me, it would reduce readability for sure for guys like me and we won't make any friends by doing so. </p>
<p>It's like one should give <code>class/variable</code> name in <code>camelcase</code> in java classes. It's a coding convention, adopted by most Java programs. It makes reading code easier as you become use to a given standard but you don't have to follow it. It's a choice that we make</p>
</div>
<div class="post-text" itemprop="text">
<p>You should name your classes properly.</p>
<p>That's all there is to say.</p>
<p>Naming everything User doesn't make sense, it just follows some (to me) ill defined naming convention for Active Records.</p>
<p>The subject is quite complicated, though, especially because it relates to how people think OOP. And because PHP is far less restrictive than java (compilation, classes only, hard typing, only one entry point [even though that's more a apache thing]) and requires less learning, Php has been more practiced by people who don't know about the ins-and-outs of the SOLID principles, or general software quality principles. (DRY, refactoring, naming properly classes and variables ...)</p>
</div>
<span class="comment-copy">I know this question might be vague and the question might be closed. If you can point me to the correct source where to ask this, that would also be appreciated</span>
