<div class="post-text" itemprop="text">
<p>In Python 2.7 the following works without a problem:</p>
<pre><code>myrange = range(10,100,10)
myrange.append(200)
print(my range)
</code></pre>
<p>Output: [10,20,30,40,50,60,70,80,90,200]</p>
<p>Conversely, in Python 3.3.4 the same code snippet returns the error: <strong>'range' object has no attribute 'append'</strong></p>
<p>Please could someone explain the reason for this error in Python 3.3.4, and where possible, provide a solution?</p>
<p>The desired output: [10, 20, 30, 40, 50, 60, 70, 80, 90, 200].</p>
<p>Many thanks in advance,
mrj.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python2, <code>range</code> returns a list. </p>
<p>In Python3, <code>range</code> returns a <a href="http://docs.python.org/3/library/stdtypes.html#ranges">range object</a>. 
The range object does not have an append method. To fix, convert the range object to a list:</p>
<pre><code>&gt;&gt;&gt; myrange = list(range(10,100,10))
&gt;&gt;&gt; myrange.append(200)
&gt;&gt;&gt; myrange
[10, 20, 30, 40, 50, 60, 70, 80, 90, 200]
</code></pre>
<p>The range object is an iterator. It purposefully avoids forming a list of all the values since this requires more memory, and often people use <code>range</code> simply to keep track of a counter -- a usage which does not require holding the full list in memory at once.</p>
<p>From <a href="http://docs.python.org/3/library/stdtypes.html#ranges">the docs</a>:</p>
<blockquote>
<p>The advantage of the range type over a regular list or tuple is that a
  range object will always take the same (small) amount of memory, no
  matter the size of the range it represents (as it only stores the
  start, stop and step values, calculating individual items and
  subranges as needed).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Check <a href="https://stackoverflow.com/a/22437321/2334951">unutbu</a>'s answer to know why you can't append to a <code>range()</code>.</p>
<p>However, keep <code>range()</code>-s iterating approach by using <code>itertools.chain()</code> instead of forcing it to a list and appending to it then. It is faster and more efficient.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; c = chain(range(10,100,10), [200])
&gt;&gt;&gt; list(c)
&gt;&gt;&gt; [10, 20, 30, 40, 50, 60, 70, 80, 90, 200]
</code></pre>
<p>Note:
Here <code>list(c)</code> also forced the <code>chain</code> object and was used only for representation. Use the <code>chain</code> object in a <code>for</code> loop instead.</p>
</div>
<span class="comment-copy">A very clear and simple solution! Thank you for your assistance, time and expertise :)</span>
<span class="comment-copy">Thank you for the alternative approach. Definitely works, though the first answer provided a little more educational material for me :)</span>
<span class="comment-copy">Sure, I just wanted to point that it is recommended to stick to iterators as long as possible.</span>
