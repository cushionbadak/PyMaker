<div class="post-text" itemprop="text">
<p>I have a snippet of code which orders a dictionary alphabetically.
Is there a way to select the ith key in the ordered dictionary and return its corresponding value? i.e.</p>
<pre><code>import collections
initial = dict(a=1, b=2, c=2, d=1, e=3)
ordered_dict = collections.OrderedDict(sorted(initial.items(), key=lambda t: t[0]))
print(ordered_dict)

OrderedDict([('a', 1), ('b', 2), ('c', 2), ('d', 1), ('e', 3)])
</code></pre>
<p>I want to have some function along the vein of...</p>
<pre><code>select = int(input("Input dictionary index"))
#User inputs 2
#Program looks up the 2nd entry in ordered_dict (c in this case)
#And then returns the value of c (2 in this case)
</code></pre>
<p>How can this be achieved?
Thanks.</p>
<p>(Similar to <a href="https://stackoverflow.com/questions/10058140/accessing-items-in-a-ordereddict">Accessing Items In a ordereddict</a>, but I only want to output the value of the key-value pair.)</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2:</p>
<p>If you want to access the key:</p>
<pre><code>&gt;&gt;&gt; ordered_dict.keys()[2]
'c'
</code></pre>
<p>If want to access the value:</p>
<pre><code>&gt;&gt;&gt; ordered_dict.values()[2]
2
</code></pre>
<p>If you're using Python 3, you can convert the <code>KeysView</code> object returned by the <code>keys</code> method by wrapping it as a list:</p>
<pre><code>&gt;&gt;&gt; list(ordered_dict.keys())[2]
'c'
&gt;&gt;&gt; list(ordered_dict.values())[2]
2
</code></pre>
<p>Not the prettiest solution, but it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/itertools.html#itertools.islice"><code>itertools.islice</code></a> is efficient here, because we don't have to create any intermediate lists, for the sake of subscripting.</p>
<pre><code>from itertools import islice
print(next(islice(ordered_dict.items(), 2, None)))
</code></pre>
<p>If you want just the value, you can do</p>
<pre><code>print ordered_dict[next(islice(ordered_dict, 2, None))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you have to use an OrderedDict or do you just want a dict-like type that supports indexing? If the latter, then consider a sorted dict object. Some implementations of SortedDict (which orders pairs based on the key sort order) support fast n-th indexing. For example, the <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="noreferrer">sortedcontainers</a> project has a <a href="http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html" rel="noreferrer">SortedDict</a> type with random-access indexing.</p>
<p>In your case it would look something like:</p>
<pre><code>&gt;&gt;&gt; from sortedcontainers import SortedDict
&gt;&gt;&gt; sorted_dict = SortedDict(a=1, b=2, c=2, d=1, e=3)
&gt;&gt;&gt; print sorted_dict.iloc[2]
'c'
</code></pre>
<p>If you do a lot of lookups, this will be <strong>a lot</strong> faster than repeatedly iterating to the desired index.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't underestimate just a plain 'ole <a href="http://docs.python.org/3.4/tutorial/controlflow.html#for-statements" rel="nofollow">for</a> loop:</p>
<pre><code>from collections import OrderedDict

od=OrderedDict([('a', 1), ('b', 2), ('c', 2), ('d', 1), ('e', 3)])

def ith(od, tgt):
    for i, t in enumerate(od.items()):
        if i==tgt:
            print('element {}\'s key is "{}"'.format(i,t[0]))
            break
    else:
        print('element {} not found'.format(tgt)) 

ith(od, 2)
# element 2's key is "c"
ith(od, 20) 
# element 20 not found
</code></pre>
<p>The advantage here is that the loop will break as soon as the desired element is found and returns a sensible result if not found...</p>
<p>The disadvantage is that relative slices are not supported.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something along these lines (od is the ordered dict):   </p>
<pre><code>def get_idx(od, idx):
   from itertools import islice
   idx = (idx + len(od)) % len(od)
   t = islice(od.items(), idx, idx + 1)
   return next(t)

&gt;&gt;&gt;x

OrderedDict([('a', 2), ('b', 3), ('k', 23), ('t', 41), ('q', 23)])

&gt;&gt;&gt;get_idx(x, 1)
('b', 3)
&gt;&gt;&gt;get_idx(x, 2)
('k', 23)
&gt;&gt;&gt;get_idx(x, 4)
('q', 23)
&gt;&gt;&gt;get_idx(x, -1)
('q', 23)
&gt;&gt;&gt;get_idx(x, -2)
('t', 41)
</code></pre>
</div>
<span class="comment-copy">try <code>ordered_dict[ordered_dict.keys()[index]]</code></span>
<span class="comment-copy">@IonutHulub, I tried (without the user input bit) print(ordered_dict[ordered_dict.keys()[2]]) and received the error, TypeError: "KeysView" object does not support indexing.</span>
<span class="comment-copy"><code>lambda</code> is written with <code>b</code> before the <code>d</code>.</span>
<span class="comment-copy">@DanielLee My apologies, corrected.</span>
<span class="comment-copy">you could avoid sorting the whole <code>initial</code> dictionary if input is a small index by using <code>heapq</code>: <code>result = initial[heapq.nsmallest(select+1, initial)[-1]]</code></span>
<span class="comment-copy">Ahh, not quite what I want. Your method returns the key-value pair, but I only want the code to return the <i>value of the key</i></span>
<span class="comment-copy">@Pingk Please check the updated answer now.</span>
<span class="comment-copy">+1. <code>islice</code> is preferable but for a small dictionary <code>list(ordered_dict.values())[2]</code> might be faster i.e., don't assume what is faster until you've measured it</span>
<span class="comment-copy">@JFSebastian, Interesting, what makes islice preferable for small dictionaries? Just the logic behind the code or something else?</span>
<span class="comment-copy">@Pingk He says, <code>islice</code> is preferable but not for small dicts</span>
<span class="comment-copy">Thanks very much, and I may use this in the future, but the method I've logged as the correct answer does a very similar method to this. I'm curious though, will the dictionary stay ordered if I change the value of one of the k-v pairs, or will it re-arrange itself like the standard dictionary?</span>
<span class="comment-copy">Yes, it will automatically stay sorted by the keys. It'll be much faster than the accepted solution if your making edits to the dictionary and then indexing.</span>
<span class="comment-copy">Awesome, I'll probably use this next time then. I don't think I'll change the accepted answer, but I'll vote you up.</span>
