<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/12142133/how-to-get-first-element-in-a-list-of-tuples">How to get first element in a list of tuples?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>An SQL query gives me a list of tuples, like this:</p>
<pre><code>[(elt1, elt2), (elt1, elt2), (elt1, elt2), (elt1, elt2), (elt1, elt2), ...]
</code></pre>
<p>I'd like to have all the first elements of each tuple. Right now I use this:</p>
<pre><code>rows = cur.fetchall()
res_list = []
for row in rows:
    res_list += [row[0]]
</code></pre>
<p>But I think there might be a better syntax to do it. Do you know a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a>:</p>
<pre><code>res_list = [x[0] for x in rows]
</code></pre>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; rows = [(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; [x[0] for x in rows]
[1, 3, 5]
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Alternately, you could use unpacking instead of <code>x[0]</code>:</p>
<pre><code>res_list = [x for x,_ in rows]
</code></pre>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; lst = [(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; [x for x,_ in lst]
[1, 3, 5]
&gt;&gt;&gt;
</code></pre>
<p>Both methods practically do the same thing, so you can choose whichever you like.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use list comprehension by some reasons, you can use <a href="https://docs.python.org/2/library/functions.html#map">map</a> and <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter">operator.itemgetter</a>:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; rows = [(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; map(itemgetter(1), rows)
[2, 4, 6]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The functional way of achieving this is to unzip the list using:</p>
<pre><code>sample = [(2, 9), (2, 9), (8, 9), (10, 9), (23, 26), (1, 9), (43, 44)]
first,snd = zip(*sample)
print first,snd
(2, 2, 8, 10, 23, 1, 43) (9, 9, 9, 9, 26, 9, 44)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension:</p>
<pre><code>res_list = [i[0] for i in rows]
</code></pre>
<p>This should make the trick</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>res_list = [x[0] for x in rows]
</code></pre>
<p>c.f. <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>
<p>For a discussion on why to prefer comprehensions over higher-order functions such as <code>map</code>, go to <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="noreferrer">http://www.artima.com/weblogs/viewpost.jsp?thread=98196</a>.</p>
</div>
<span class="comment-copy">Thanks! I haven't found documentation on the syntax <code>x,_</code>. Do you know where I could find some?</span>
<span class="comment-copy">@Creak - <code>x,_</code> is just using tuple unpacking.  And you are right, the documentation on this is hard to come by.  I found this <a href="http://docs.python.org/release/1.5.1p1/tut/tuples.html" rel="nofollow noreferrer">link</a> and this <a href="http://www.developer.com/lang/other/article.php/630101/Learn-to-Program-using-Python-Unpacking-Tuples.htm#Introduction" rel="nofollow noreferrer">one</a> which should explain how it works.  Also, the <code>_</code> is just a normal variable.  I could have done <code>x,y</code> and got the same results.  However, I did not because it is a Python convention to use a <code>_</code> for variables that are only placeholders.</span>
<span class="comment-copy">Ok, I thought <code>_</code> was a special character to say "1 or more elements". That would have been excellent ;)</span>
<span class="comment-copy">The list comprehension you give will only work when the tuples have exactly two entries. In python3, you could do <code>[x for x, *the_rest in rows]</code>, where the <code>*</code> really is the special syntax for "the rest of the elements of the tuple". For a list comprehension that will work in python2, use <code>[iter(x).next() for x in rows]</code></span>
