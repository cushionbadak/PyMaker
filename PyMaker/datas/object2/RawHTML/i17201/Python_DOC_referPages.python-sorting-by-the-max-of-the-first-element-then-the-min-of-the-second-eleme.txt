<div class="post-text" itemprop="text">
<p>I was working on a geometry project in python and I came across an intriguing problem. Assume I have a list of Cartesian coordinates like this:</p>
<p><code>[[1, 0], [3, 0], [2, 1], [3.5, 2], [4, 3], [6, 1], [6.5, 0], [10, 2], [10, 5], [9, 3.5], [7, 3], [9, 7], [7, 8], [5, 7], [4, 5], [2, 8], [1, 7], [0, 5], [1, 3], [0, 2]]</code></p>
<p>What would be the best way to sort this list by descending y-value THEN increasing x-value if two coordinates exist with the same y-value? The output should be:</p>
<p><code>[[2, 8], [7, 8], [1, 7], [5, 7], [9, 7], [0, 5], [4, 5], [10, 5], [9, 3.5], [1, 3], [4, 3], [7, 3], [0, 2], [3.5, 2], [10, 2], [2, 1], [6, 1], [1, 0], [3, 0], [6.5, 0]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can supply a key function to <a href="http://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> to determine what value each item in your list should be mapped to for sorting. In your case, you can use a tuple of the negative Y-coordinate, and the X-coordinate to get your desired result:</p>
<pre><code>&gt;&gt;&gt; coordinates = [[1, 0], [3, 0], [2, 1], [3.5, 2], [4, 3], [6, 1], [6.5, 0], [10, 2], [10, 5], [9, 3.5], [7, 3], [9, 7], [7, 8], [5, 7], [4, 5], [2, 8], [1, 7], [0, 5], [1, 3], [0, 2]]
&gt;&gt;&gt; coordinates.sort(key=lambda x: (-x[1], x[0]))
&gt;&gt;&gt; coordinates
[[2, 8], [7, 8], [1, 7], [5, 7], [9, 7], [0, 5], [4, 5], [10, 5], [9, 3.5], [1, 3], [4, 3], [7, 3], [0, 2], [3.5, 2], [10, 2], [2, 1], [6, 1], [1, 0], [3, 0], [6.5, 0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Poke's answer is the right answer in most cases.</p>
<p>Just in case you are doing this on Python prior to Python 2.4 or if the comparison function is really expensive, you can use Decorate-Sort-Undecorate (DSU or the <a href="http://en.wikipedia.org/wiki/Schwartzian_transform" rel="nofollow">Schwartzian transform</a>) </p>
<pre><code>&gt;&gt;&gt; coord = [[1, 0], [3, 0], [2, 1], [3.5, 2], [4, 3], [6, 1], [6.5, 0], [10, 2], [10, 5], [
9, 3.5], [7, 3], [9, 7], [7, 8], [5, 7], [4, 5], [2, 8], [1, 7], [0, 5], [1, 3], [0, 2]]
&gt;&gt;&gt; decorated=[[(-y,x),x,y] for x,y in coord]
&gt;&gt;&gt; [[x,y] for t,x,y in sorted(decorated)]
[[2, 8], [7, 8], [1, 7], [5, 7], [9, 7], [0, 5], [4, 5], [10, 5], [9, 3.5], [1, 3], [4, 3], [7, 3], [0, 2], [3.5, 2], [10, 2], [2, 1], [6, 1], [1, 0], [3, 0], [6.5, 0]]
</code></pre>
<p>Or:</p>
<pre><code>&gt;&gt;&gt; [[x,y] for t,x,y in sorted([[(-y,x),x,y] for x,y in coord])]
[[2, 8], [7, 8], [1, 7], [5, 7], [9, 7], [0, 5], [4, 5], [10, 5], [9, 3.5], [1, 3], [4, 3], [7, 3], [0, 2], [3.5, 2], [10, 2], [2, 1], [6, 1], [1, 0], [3, 0], [6.5, 0]]
</code></pre>
<p>These techniques (and more) are in the Python <a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow">sorting HowTo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>sorted</code> and specifying the sorting criterion with a <code>lambda</code> function using a tuple:</p>
<pre><code>&gt;&gt;&gt; coord = [[1, 0], [3, 0], [2, 1], [3.5, 2], [4, 3], [6, 1], [6.5, 0], [10, 2], [10, 5], [9, 3.5], [7, 3], [9, 7], [7, 8], [5, 7], [4, 5], [2, 8], [1, 7], [0, 5], [1, 3], [0, 2]]
&gt;&gt;&gt; sorted(coord, key=lambda x: (-x[1], x[0]))
[[2, 8], [7, 8], [1, 7], [5, 7], [9, 7], [0, 5], [4, 5], [10, 5], [9, 3.5], [1, 3], [4, 3], [7, 3], [0, 2], [3.5, 2], [10, 2], [2, 1], [6, 1], [1, 0], [3, 0], [6.5, 0]]
</code></pre>
<p>The order in the lambda function tuple defines the order by which the criterion are considered.</p>
<blockquote>
<p>x[1] : sort by second element in ascending order</p>
<p>-x[1] : sort by second element in descending order </p>
<p>x[0] : sort by first element in ascending order</p>
</blockquote>
</div>
<span class="comment-copy"><i>“Python prior to Python 2.4”</i> – I just hope that’s nowhere the case…</span>
<span class="comment-copy">+1 for the tencity of presenting a pre-python 2.4 solution =)</span>
<span class="comment-copy">Huh, I've never heard of DSU sorting, thats a neat little method! Thanks for sharing!</span>
<span class="comment-copy">@poke: Lots of people don't update their Python for 10, 11 years! ;-)</span>
<span class="comment-copy">Mostly I just think it is a useful method for languages that do NOT have key functions (Perl, Lisp, etc)</span>
<span class="comment-copy">How is this different than @poke's answer?</span>
<span class="comment-copy"><code>sorted(x)</code> , <code>x.sort()</code> hmmmm, i wonder. i'm just slow in typing... hahahaa</span>
<span class="comment-copy">@dawg, <a href="http://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python" title="what is the difference between sortedlist vs list sort python">stackoverflow.com/questions/22442378/…</a></span>
