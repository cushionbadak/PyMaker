<div class="post-text" itemprop="text">
<p>When I input <code>"abc"</code> I would like to get <code>"bcd"</code> as output. </p>
<p>So I want <code>A</code> to be <code>B</code> and <code>B</code> to be <code>C</code> and so on upto <code>Z</code> which will be <code>A</code>. 
So how would I go about doing this I have not the slightest clue.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3.1/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>translate</code></a> to directly change a letter to a different letter:</p>
<pre><code>try:
    from string import makestrans
except ImportError:
    maketrans = str.maketrans

from string import ascii_lowercase

#old = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
#new = 'bcdefghijklmnopqrstuvwxyzaBCDEFGHIJKLMNOPQRSTUVWXYZA'

offset = 1

old_lower = ascii_lowercase
new_lower = old_lower[offset:] + old_lower[:offset]
old = old_lower + old_lower.upper()
new = new_lower + new_lower.upper()

# Create a translate table.
trans = maketrans(old, new)

# Translate your string using trans
print("abc".translate(trans))
# bcd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3.4/library/functions.html#ord" rel="nofollow"><code>ord</code></a> function to get the code point of the character and then increment it by 1, convert it back to the character with <a href="http://docs.python.org/3.4/library/functions.html#chr" rel="nofollow"><code>chr</code></a> function. Finally, join all the characters with <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a> function, like this</p>
<pre><code>data = "abc"
print("".join(chr(ord(char) + 1) for char in data))
# bcd
</code></pre>
<p>The special case of <code>z</code> can be handled like this</p>
<pre><code>print("".join(chr(ord(char) + 1) if char != 'z' else 'a' for char in data))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using reduce:</p>
<pre><code>astr = "abc"
print reduce(lambda r,x:r+chr(ord(x)+1),astr,"")
</code></pre>
<p>output:</p>
<pre><code>bcd
</code></pre>
<p>EDIT:</p>
<p>For corner case:</p>
<pre><code> print reduce(lambda r,x:r+chr(ord(x)+1) if x != 'z' else r+'a',astr,"")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>ord</code> function in python to get the codepoint of a character, and then <code>chr</code> to turn a codepoint back into a char. For ASCII characters, the codepoints of the letters are continuous and sequential in alphabetic order, so for instance <code>ord('a') + 1 == ord('b')</code>, etc. So you can do something like this (written our in long form for clarity, but it can easily be shortened with list comprehension):</p>
<pre><code>newstring = ""
for c in "abc":
    codepoint = ord(c)
    next_codepoint = codepoint + 1
    newstring += chr(codepoint)
</code></pre>
<p>That's the basic case, but you will also need to handle wrapping from <code>'z'</code> to <code>'a'</code>, presumably. You may need to do some error handling in case a char is outside of the valid range. You can do that like this:</p>
<pre><code>newstring = ""
for c in "abc":
    if c == 'z':
        newstring += 'a'
    elif c == 'Z':
        newstring += 'A'
    else:
        codepoint = ord(c)
        if (ord('a') &lt;= codepoint &lt;= ord('z')) or (ord('A') &lt;= codepoint &lt;= ord('Z')):
            next_codepoint = codepoint + 1
            newstring += chr(codepoint)
        else:
            raise ValueError("Character %r is outside of the valid range." % c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Edit: code below only works in Python 2, in Python 3 the module is named <code>str</code> and <code>print</code> is a function.</p>
<p>Use <code>maketrans</code>. Following is for letters a-z only, not A-Z, left as exercise:</p>
<pre><code>import string

lowercase_to = string.ascii_lowercase[1:] + string.ascii_lowercase[:1]  # bcdefg...xyza
translation = string.maketrans(string.ascii_lowercase, lowercase_to)

s = "abc"
print s.translate(translation)  # Prints "bcd"
</code></pre>
</div>
<span class="comment-copy">+1 This is the best answer.</span>
<span class="comment-copy">+1 It is always better not to execute custom code in Python for every symbol if there is a way to use a standard library code that is implemented in C.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/19690385/4279"><code>new = old[:1] + old[1:]</code> if only lowercase</a></span>
<span class="comment-copy">Thanks, didn't notice</span>
