<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5807047/efficient-way-to-take-the-minimum-maximum-n-values-and-indices-from-a-matrix-usi">Efficient way to take the minimum/maximum n values and indices from a matrix using Python and NumPy</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I need to find just the the smallest nth element in a  1D <code>numpy.array</code>.</p>
<p>For example:</p>
<pre><code>a = np.array([90,10,30,40,80,70,20,50,60,0])
</code></pre>
<p>I want to get 5th smallest element, so my desired output is <code>40</code>.</p>
<p>My current solution is this:</p>
<pre><code>result = np.max(np.partition(a, 5)[:5])
</code></pre>
<p>However, finding 5 smallest elements and then taking the largest one them seems little clumsy to me. Is there a better way to do it? Am I missing a single function that would achieve my goal?</p>
<p>There are questions with similar titles to this one, but I did not see anything that answered my question.</p>
<p><strong>Edit:</strong></p>
<p>I should've mentioned it originally, but performance is very important for me; therefore, <code>heapq</code> solution though nice would not work for me.</p>
<pre><code>import numpy as np
import heapq

def find_nth_smallest_old_way(a, n):
    return np.max(np.partition(a, n)[:n])

# Solution suggested by Jaime and HYRY    
def find_nth_smallest_proper_way(a, n):
    return np.partition(a, n-1)[n-1]

def find_nth_smallest_heapq(a, n):
    return heapq.nsmallest(n, a)[-1]
#    
n_iterations = 10000

a = np.arange(1000)
np.random.shuffle(a)

t1 = timeit('find_nth_smallest_old_way(a, 100)', 'from __main__ import find_nth_smallest_old_way, a', number = n_iterations)
print 'time taken using partition old_way: {}'.format(t1)    
t2 = timeit('find_nth_smallest_proper_way(a, 100)', 'from __main__ import find_nth_smallest_proper_way, a', number = n_iterations)
print 'time taken using partition proper way: {}'.format(t2) 
t3 = timeit('find_nth_smallest_heapq(a, 100)', 'from __main__ import find_nth_smallest_heapq, a', number = n_iterations)  
print 'time taken using heapq : {}'.format(t3)
</code></pre>
<p>Result:</p>
<pre><code>time taken using partition old_way: 0.255564928055
time taken using partition proper way: 0.129678010941
time taken using heapq : 7.81094002724
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unless I am missing something, what you want to do is:</p>
<pre><code>&gt;&gt;&gt; a = np.array([90,10,30,40,80,70,20,50,60,0])
&gt;&gt;&gt; np.partition(a, 4)[4]
40
</code></pre>
<p><code>np.partition(a, k)</code> will place the <code>k</code>-th smallest element of <code>a</code> at <code>a[k]</code>, smaller values in <code>a[:k]</code> and larger values in <code>a[k+1:]</code>. The only thing to be aware of is that, because of the 0 indexing, the fifth element is at index 4.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="nofollow"><code>heapq.nsmallest</code></a>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import heapq
&gt;&gt;&gt; 
&gt;&gt;&gt; a = np.array([90,10,30,40,80,70,20,50,60,0])
&gt;&gt;&gt; heapq.nsmallest(5, a)[-1]
40
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you don't need call <code>numpy.max()</code>:</p>
<pre><code>def nsmall(a, n):
    return np.partition(a, n)[n]
</code></pre>
</div>
<span class="comment-copy">Also, might be beneficial to check out <a href="http://docs.python.org/2/library/heapq.html" rel="nofollow noreferrer">docs.python.org/2/library/heapq.html</a></span>
<span class="comment-copy">@C.B. the above question is significantly different from mine; it asks for both min and max, and it is for 2D matrix</span>
<span class="comment-copy">How is this a duplicate? The title sounds similar, but the question itself is very different. Sometimes different questions lead to same answers, but here the answers are also very different. And there is no way an answer in that question is an answer to my question.</span>
<span class="comment-copy">Yeah, that's it. I was thinking about it wrong. I knew there was a better solution!</span>
<span class="comment-copy">It should be np.partition(a, 4)[3]</span>
<span class="comment-copy">@heroxbd: Nope.</span>
<span class="comment-copy">ok, the 5th element.</span>
<span class="comment-copy">Check your performance, though. I recently had a situation in which <code>heapq.nsmallest</code> looked perfect, but slicing <code>sorted</code> turned out to be about 25% faster. I believe the heap approach is faster for some data, but not for all. I don't know if there's anything special about numpy arrays that would affect that one way or the other.</span>
<span class="comment-copy">@PeterDeGlopper Well the sorting approach might be faster for smaller data sets, but for larger ones the heap method should be faster. How large was the data you're referring to?</span>
<span class="comment-copy">Not large - lists of about 100 3-tuples of integers. So probably well below the level at which the heap method wins.</span>
<span class="comment-copy">The solution that I have in my original post is O(n), since both <code>np.partition</code> and <code>np.max</code> are O(n).</span>
<span class="comment-copy">I've seen some instances where actual <code>heapify</code> plus n <code>heappop</code> operations is way faster than using <code>nsmallest</code> or slicing <code>sorted</code>.  Just to throw that out there.</span>
<span class="comment-copy">It should be np.partition(a, n)[n-1]</span>
