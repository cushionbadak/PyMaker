<div class="post-text" itemprop="text">
<p>Python 3.4.0 introduced <code>enum</code>, I've read the <a href="http://docs.python.org/3.4/library/enum.html" rel="noreferrer">doc</a> but still don't know the usage of it. From my perspective, enum is an extended <code>namedtuple</code> type, which may not be true. So these are what I want to know about enum:</p>
<ol>
<li>When and where to use enum?</li>
<li>Why do we need enum? what are the advatages?</li>
<li>What exactly is enum?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>1. When and where to use enums?</p>
</blockquote>
<ul>
<li>When you have a variable that takes one of a limited set of possible values.</li>
</ul>
<p>For example, the days of the week:</p>
<pre><code>class Weekday(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7
</code></pre>
<blockquote>
<p>2. Why do we need enum?  What are the advantages?</p>
</blockquote>
<ul>
<li><p>Enums are advantageous because they give a name to a constant, which makes code more readable; and because the individual members cannot be rebound, making Python Enums semi-constant (because the <code>Enum</code> itself could still be rebound).</p></li>
<li><p>Besides more readable code, debugging is also easier as you see a name along with the value, not just the value</p></li>
<li><p>Desired behavior can be added to Enums</p></li>
</ul>
<p>For example, as anyone who has worked with the <a href="http://docs.python.org/3/library/datetime.html#module-datetime" rel="noreferrer">datetime</a> module knows, <code>datetime</code> and <code>date</code> have two different represntations for the days of the week: 0-6 or 1-7.  Rather than keep track of that ourselves we can add a method to the <code>Weekday</code> enum to extract the day from the <code>datetime</code> or <code>date</code> instance and return the matching enum member:</p>
<pre><code>    @classmethod
    def from_date(cls, date):
        return cls(date.isoweekday())
</code></pre>
<blockquote>
<p>3. What exactly is Enum?</p>
</blockquote>
<ul>
<li><p>Enum is a <a href="http://docs.python.org/3/library/functions.html?highlight=type#type" rel="noreferrer">type</a>, whose members are named constants, that all belong to (or should) a logical group of values.  So far I have created <code>Enum</code>s for:</p>
<pre><code>- the days of the week
- the months of the year
- US Federal Holidays in a year
</code></pre></li>
</ul>
<p><code>FederalHoliday</code> is my most complex; it uses <a href="https://stackoverflow.com/a/19330461/208880">this recipe</a>, and has methods to return the actual date the holiday takes place on for the year given, the next business day if the day in question is a holiday (or the range of days skipped includes the holiday or weekends), and the complete set of dates for a year.  Here it is:</p>
<pre><code>class FederalHoliday(AutoEnum):
    NewYear = "First day of the year.", 'absolute', Month.JANUARY, 1
    MartinLutherKingJr = "Birth of Civil Rights leader.", 'relative', Month.JANUARY, Weekday.MONDAY, 3
    President = "Birth of George Washington", 'relative', Month.FEBRUARY, Weekday.MONDAY, 3
    Memorial = "Memory of fallen soldiers", 'relative', Month.MAY, Weekday.MONDAY, 5
    Independence = "Declaration of Independence", 'absolute', Month.JULY, 4
    Labor = "American Labor Movement", 'relative', Month.SEPTEMBER, Weekday.MONDAY, 1
    Columbus = "Americas discovered", 'relative', Month.OCTOBER, Weekday.MONDAY, 2
    Veterans = "Recognition of Armed Forces service", 'relative', Month.NOVEMBER, 11, 1
    Thanksgiving = "Day of Thanks", 'relative', Month.NOVEMBER, Weekday.THURSDAY, 4
    Christmas = "Birth of Jesus Christ", 'absolute', Month.DECEMBER, 25

    def __init__(self, doc, type, month, day, occurance=None):
        self.__doc__ = doc
        self.type = type
        self.month = month
        self.day = day
        self.occurance = occurance

    def date(self, year):
        "returns the observed date of the holiday for `year`"
        if self.type == 'absolute' or isinstance(self.day, int):
            holiday =  Date(year, self.month, self.day)
            if Weekday(holiday.isoweekday()) is Weekday.SUNDAY:
                holiday = holiday.replace(delta_day=1)
            return holiday
        days_in_month = days_per_month(year)
        target_end = self.occurance * 7 + 1
        if target_end &gt; days_in_month[self.month]:
            target_end = days_in_month[self.month]
        target_start = target_end - 7
        target_week = list(xrange(start=Date(year, self.month, target_start), step=one_day, count=7))
        for holiday in target_week:
            if Weekday(holiday.isoweekday()) is self.day:
                return holiday

    @classmethod
    def next_business_day(cls, date, days=1):
        """
        Return the next `days` business day from date.
        """
        holidays = cls.year(date.year)
        years = set([date.year])
        while days &gt; 0:
            date = date.replace(delta_day=1)
            if date.year not in years:
                holidays.extend(cls.year(date.year))
                years.add(date.year)
            if Weekday(date.isoweekday()) in (Weekday.SATURDAY, Weekday.SUNDAY) or date in holidays:
                continue
            days -= 1
        return date

    @classmethod
    def year(cls, year):
        """
        Return a list of the actual FederalHoliday dates for `year`.
        """
        holidays = []
        for fh in cls:
            holidays.append(fh.date(year))
        return holidays
</code></pre>
<hr/>
<p><strong>Notes</strong>:</p>
<ul>
<li><p><code>Date</code> is from <a href="https://pypi.python.org/pypi/dbf" rel="noreferrer">my dbf package</a></p></li>
<li><p>the enhanced <code>xrange</code> (supporting a range of dates) is also custom, but I don't think I have included it anywhere; I'll stuff it in my <code>dbf</code> package next time I tinker with it.</p></li>
<li><p>Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://legacy.python.org/dev/peps/pep-0435/" rel="nofollow">PEP 435 ("Adding an Enum type to the Python standard library")</a> behind the introduction of <code>Enum</code> in Python has a lot of <a href="http://legacy.python.org/dev/peps/pep-0435/#proposed-semantics-for-the-new-enumeration-type" rel="nofollow">examples</a> of how the authors intended it to be used.</p>
<p>More comments <a href="http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">Another excellent answer is:  <a href="http://stackoverflow.com/a/37601645/208880">stackoverflow.com/a/37601645/208880</a></span>
<span class="comment-copy">I've read those examples cause they are included in python3.4.0 documentation, but I think they just show me how rather than when/where/why.</span>
<span class="comment-copy">I think the PEP has answers for all your 3 questions. I agree that it's not very reasonable, but see more info <a href="http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">yeah PEP435 is helpful, thank you, I mean those examples.</span>
