<div class="post-text" itemprop="text">
<p>As in C/C++, we can print the memory content of a variable as below:</p>
<pre><code>double d = 234.5;
unsigned char *p = (unsigned char *)&amp;d;
size_t i;
for (i=0; i &lt; sizeof d; ++i)
    printf("%02x\n", p[i]);
</code></pre>
<p>Yes, I know we can use pickle.dump() to serialize a object, but it seems generated a lot redundant things..
How can we achieve this in python in a pure way?</p>
</div>
<div class="post-text" itemprop="text">
<p>The internal memory representation of a Python object cannot be reached from the Python code logical level and you'd need to write a C extension.</p>
<p>If you're designing your own serialization protocol then may be the <a href="http://docs.python.org/3/library/struct.html" rel="nofollow">struct</a> module is what you're looking for. It allows converting from Python values to binary data and back in the format you specify. For example</p>
<pre><code>import struct
print(list(struct.pack('d', 3.14)))
</code></pre>
<p>will display <code>[31, 133, 235, 81, 184, 30, 9, 64]</code> because those are the byte values for the double precision representation of 3.14.</p>
<p>NOTE: <code>struct.pack</code> returns a <code>bytes</code> object in Python 3.x but an <code>str</code> object in Python 2.x. To see the numeric code of the bytes in Python 2.x you need to use <code>print map(ord, struct.pack(...))</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can not do this in pure python. But you could write a Python extension module in C that does exactly what you ask for. But it would probably will not be very useful. You can read more about extension modules <a href="http://docs.python.org/2/extending/" rel="nofollow">here</a></p>
<p>I assume that by Python you mean C-Python, and not PyPy, Jython or IronPython.</p>
</div>
<span class="comment-copy">Why do you need this?</span>
<span class="comment-copy">I don't think is possible without writing a custom C extension. At least it would be quite hard, since there no such a thing as "get the bytes representation of an object in memory". You can do <code>bytes(something)</code> but the result wont be bytes representing the objects in memory (at least, normally). Besides the internal representation would be completely useless since it's undefined and contains implementation details such as reference counts etc.</span>
<span class="comment-copy">By the way <code>pickle</code> is actually a stack-based <i>programming language</i> that happens to be used to serialize python objects. I believe it is Turing-complete since it can do just about anything that python can do. This also explains why you shouldn't unpickle data you don't trust since you are executing arbitrary code.</span>
<span class="comment-copy">display ['\x1f', '\x85', '\xeb', 'Q', '\xb8', '\x1e', '\t', '@'] in python 2.7</span>
<span class="comment-copy">@bpceee: that using python 2, in Python 3 <code>struct.pack</code> returns a bytes object, not a string. To see the byte values in Python 2.x you need to use <code>map(ord, struct.pack(...))</code></span>
