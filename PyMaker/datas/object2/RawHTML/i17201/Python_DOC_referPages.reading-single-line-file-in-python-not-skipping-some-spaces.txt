<div class="post-text" itemprop="text">
<p>I'm trying to read files in Python that have all the same structure but quite an original one: it doesn't seem trivial to read it with the default <code>list</code> and parsing tools, though I'm sure it is possible.
So the structure is: <code>int</code> space <code>int</code> space <code>double</code> space a long long string that contains spaces</p>
<p>I need to store the two <code>int</code>s and the <code>float</code> (file header) apart, then I'd like to have the whole string as a monolithic bloc, because my data is encoded at the bit level in each one of the characters (I hope I'm explaining it clearly...).</p>
<p>Using naively the <code>.split()</code> method doesn't help me because of the spaces in the string, I've been thinking about "meshing" all the elements in <code>split()</code> after the first three, but I'd lose information if there were double spaces in the string.</p>
<p>In C++, I'd be using <code>&lt;&lt;</code> for the ints and double, then <code>.getbyte()</code> for the characters, are there equivalents in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can still use the .split() function. Since you know the format of the lines you can pass in the number of lines to be made.    </p>
<pre><code>str.split(str="", num)
</code></pre>
<p>Parameters<br/>
str -- This is any delimeter, by default it is space.<br/>
num -- this is number of splits to be made.<br/>
So in your case you should be able to do </p>
<pre><code>str.split(str='', 3)
</code></pre>
<p>Which should split up into:</p>
<ul>
<li>int </li>
<li>int</li>
<li>double</li>
<li>string</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>So the format for each line looks like this (I'm assuming that the string isn't separately escaped by quotes):</p>
<pre><code>"4 5 8.7 here is a really long string"
</code></pre>
<p>In general, for more sophisticated parsing, it's recommended that you use regular expressions.</p>
<pre><code>import re
[...]

for line in file:
    #let's say line is "4 5 8.7 here is a really long string"
    pat = r'([0-9]+)\s([0-9]+)\s([0-9\.]+)\s([\w\s\_\-]+)'
    match = re.search(pat, line)
    matches_by_group = match.groups() #Do something with this
</code></pre>
<p>This way you'll have each separate piece in a tuple for each line. You can then cast the double, int, etc. as necessary.</p>
</div>
<span class="comment-copy">Step 1: read the whole line. Step 2: user regular expressions to parse. Look here for examples of implementing regexes <a href="https://developers.google.com/edu/python/regular-expressions?csw=1" rel="nofollow noreferrer">developers.google.com/edu/python/regular-expressions?csw=1</a></span>
<span class="comment-copy">What about using the <code>maxsplit</code> argument for <a href="http://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a>?</span>
<span class="comment-copy">Thank you very much, indeed it is the right option ;)</span>
<span class="comment-copy">The number shouldn't correspond to number of lines. It should correspond to number of splits (i.e. <code>3</code>). The <a href="http://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">Python docs</a> say: <i>If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements).</i></span>
<span class="comment-copy">Glad to have been able to help</span>
