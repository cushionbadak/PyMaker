<div class="post-text" itemprop="text">
<p>I am having trouble using my classes that I've defined in a module. I've looked at <a href="https://stackoverflow.com/questions/14762531/import-class-defined-in-same-module-file">this stackoverlfow post</a>, and the answer seems to be "you don't need imports." This is definitely not the behavior I'm experiencing. I'm using Python 3.3. Here is my directory structure:</p>
<pre><code>root/
    __init__.py
    mlp/
        __init__.py
        mlp.py
        layers/
            __init__.py
            hidden_layer.py
            dropout_layer.py
</code></pre>
<p>My problem is this: the class defined in <code>dropout_layer.py</code> extends the class in <code>hidden_layer.py</code>, but when I try to import hidden_layer, I sometimes get an error depending on the directory I execute my code from. For instance, <code>from layers.hidden_layer import HiddenLayer</code> then I run my code if I execute it from <code>root/mlp</code>. This import does not work, however, if I execute my code from <code>root</code>. This is strange behavior to me. How can I get this working correctly? </p>
<p>My only non-empty <code>__init__.py</code> file is in <code>root/mlp/layers/</code>:</p>
<pre><code># root/mlp/layers/__init__.py
__all__ = ['hidden_layer', 'dropout_layer']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 you can prepend a <code>.</code> for an import relative to the location of the current module:</p>
<pre><code>from .hidden_layer import HiddenLayer
</code></pre>
</div>
<span class="comment-copy">If you execute from root, you would have to do from mlp.layers.hidden_layer import HiddenLayer</span>
<span class="comment-copy">It seems kind of silly to me that the imports are relative to where I execute the code from, especially since the classes are in the same module. Luckily, dmau has a good answer.</span>
<span class="comment-copy">@Max: A module is a file.  If your classes are in different files, they aren't in the same module.  It looks like your files here are in the same <i>package</i>.</span>
<span class="comment-copy">Cool, worked like a charm. It's strange to me that this isn't mentioned in <a href="http://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">docs.python.org/3/reference/import.html</a></span>
<span class="comment-copy">@Max: Those docs are for the internals of the import system.  The <code>import</code> statement itself is described at <a href="http://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow noreferrer">docs.python.org/3/reference/simple_stmts.html#import</a></span>
<span class="comment-copy">You can enable this in 2.6, too, with <code>from __future__ import absolute_import</code>.</span>
