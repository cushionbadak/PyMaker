<div class="post-text" itemprop="text">
<p>I have 100 files in  folder named 1.htm - 100.htm.
I run this code to extract some info from a file and place the extracted info in another file final.txt. Currently, I have to run the program manually for 100 files. I need to construct a loop which can run the program 100 times, reading each file once. (kindly explain in detail with exact edits I need to do in my code)</p>
<p>Below is the code for the file 6.htm:</p>
<pre><code>import glob
import BeautifulSoup
from BeautifulSoup import BeautifulSoup


fo = open("6.htm", "r")
bo = open("output.txt" ,"w")
f = open("final.txt","a+")

htmltext = fo.read()
soup = BeautifulSoup(htmltext)
#print len(urls)
table = soup.findAll('table')
rows = table[0].findAll('tr');
for tr in rows:
    cols = tr.findAll('td')
    for td in cols:
        text = str(td.find(text=True)) + ';;;'
        if(text!="&amp;nbsp;;;;"):
            bo.write(text);
            bo.write('\n');
fo.close()
bo.close()

b= open("output.txt", "r")

for j in range (1,5):
str=b.readline();
for j in range(1, 15):
str=b.readline();
c=str.split(";;;")
#print c[1]
if(c[0]=="APD ID:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Name/Class:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Source:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Sequence:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Length:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Net charge:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Hydrophobic residue%:"):
    f.write(c[1])
    f.write("#")
if(c[0]=="Boman Index:"):
    f.write(c[1])
    f.write("#")
f.write('\n');
b.close();
f.close();



f.close();
print "End"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
f = open("final.txt","a+")
for root, folders, files in os.walk('./path/to/html_files/'):
    for fileName in files:
        fo = open(os.path.abspath(root + '/' + fileName, "r")
        ...
</code></pre>
<p>And then the rest of your code goes there.<br/>
<br/></p>
<h1>Also consider (best practice)</h1>
<pre><code>with open(os.path.abspath(root + '/' + fileName, "r") as fo:
    ...
</code></pre>
<p>So you don't forget to close those file handles, because there is a limited amount of open file handles allowed in your OS, this will make sure you don't fill it by mistake.</p>
<p>Making your code look something like this:</p>
<pre><code>import os
with open("final.txt","a+") as f:
    for root, folders, files in os.walk('./path/to/html_files/'):
        for fileName in files:
            with open(os.path.abspath(root + '/' + fileName, "r") as fo:
                ...
</code></pre>
<p>Also <strong>NEVER</strong> replace global variable-names such as <code>str</code>:</p>
<pre><code>str=b.readline();
</code></pre>
<p>There's also no need for <code>;</code> at the end of your code-lines, this is Python.. we code in a comfy manner!</p>
<p>Last but not least..</p>
<pre><code>if(c[0]=="APD ID:"):
if(c[0]=="Name/Class:"):
if(c[0]=="Source:"):
if(c[0]=="Sequence:"):
if(c[0]=="Length:"):
if(c[0]=="Net charge:"):
if(c[0]=="Hydrophobic residue%:"):
if(c[0]=="Boman Index:"):
</code></pre>
<p>Should be:</p>
<pre><code>if(c[0]=="APD ID:"):
elif(c[0]=="Name/Class:"):
elif(c[0]=="Source:"):
elif(c[0]=="Sequence:"):
elif(c[0]=="Length:"):
elif(c[0]=="Net charge:"):
elif(c[0]=="Hydrophobic residue%:"):
elif(c[0]=="Boman Index:"):
</code></pre>
<p>Unless you modify <code>c</code> along the way ofcourse, which you don't.. So switch!</p>
<p>Shit i just keep finding more horrible things about this code (which you clearly have copy pasted from examples from across all galaxies...):</p>
<p>You can condense all the above <code>if</code>/<code>elif</code>/<code>else</code> into one if-block:</p>
<pre><code>if(c[0] in ("APD ID:", "Name/Class:", "Source:", "Sequence:", "Length:", "Net charge:", "Hydrophobic residue%:", "Boman Index:")):
    f.write(c[1])
    f.write("#")
</code></pre>
<p>And also, skip <code>(</code> ... <code>)</code> around your if blocks, again.. This is Python.. we program in a comfortable manner:</p>
<pre><code>if c[0] in ("APD ID:", "Name/Class:", "Source:", "Sequence:", "Length:", "Net charge:", "Hydrophobic residue%:", "Boman Index:"):
    f.write(c[1])
    f.write("#")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>perhaps some structure that looks like this:</p>
<pre><code># declare main files
bo = open("output.txt" ,"w")
f = open("final.txt","a+")

#loop over range ii = [1,100]
for ii in range(1,101):
    fo = open(str(ii) + ".htm", "r")
    # Run program like normal
    ...
    ...
    ...
    fo.close()
f.close()
bo.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>os.listdir lists all the files in a particular directory.</p>
<p>As @Torxed has pointed out, the best practice is to use with clause (so that file handles are closed).</p>
<p>You can look for .htm files in like this:</p>
<pre><code>import os

# Creates a list of 1-100.htm file names
filenames = map(lambda x: str(x) + ".htm", range(1,101))

for file in os.listdir("/mydir"):
    if (file in filenames):
        # Do your logic here.
</code></pre>
</div>
<span class="comment-copy">That's what <a href="http://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">docs.python.org/3/library/fileinput.html</a> is for.</span>
<span class="comment-copy">Also, <code>for j in range (1,5):</code> Is never used? Or at least you don't use <code>j</code> anywhere and the tab indentation is completely wrong in multiple places..</span>
<span class="comment-copy">This will pick up all the files in the ./path/to/html_files/ directory.  OP wanted to read only 1-100.htm files?</span>
<span class="comment-copy">@RishabhSagar probably, Calpratt beat me to it tho. Don't see the point of storing 100 html files in a directory where other files are located, and also this solution would work with other or random file-naming conventions as well.</span>
<span class="comment-copy">Nice code review! :)</span>
<span class="comment-copy">Traceback (most recent call last):   File "C:\Users\Manish\Dropbox\karabi\work files\new1.py", line 12, in &lt;module&gt;     fo = open(str(ii) + ".htm", "r") TypeError: 'str' object is not callable</span>
<span class="comment-copy">If you declare a variable named <code>str</code> you won't be able to call the <code>str()</code> function. That is because you now have a local variable with that name, that python will look at first. Try renaming your string variable <code>str</code> to something more meaningful.</span>
<span class="comment-copy">Thanks a lot. I did it.</span>
<span class="comment-copy">@user3455594 No problem man! Remember to mark my answer as correct then! :D</span>
