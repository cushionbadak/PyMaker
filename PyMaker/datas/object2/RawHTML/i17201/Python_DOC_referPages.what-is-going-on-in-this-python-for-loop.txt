<div class="post-text" itemprop="text">
<pre><code>records = [
('foo', 1, 2),
('bar', 'hello'),
('foo', 3, 4),
]

def do_foo(x, y):
    print('foo', x, y)

def do_bar(s):
    print('bar', s)

for tag, *args in records:
    if tag == 'foo':
        do_foo(*args)
    elif tag == 'bar':
        do_bar(*args)
</code></pre>
<p>I know you can use syntax like <code>for i, val in enumerate(a)</code>. To me, it looks like <code>tag, *args</code> is being used here to create a tuple, such that the code is effectively <code>for tuple in records</code>. But that is just an uneducated guess.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>records</code> is a list of tuples, which the <code>for</code> statement iterates over. On each iteration, <code>tag</code> is assigned the first element of the tuple (the strings <code>'foo'</code> and <code>'bar'</code>), and <code>*args</code> sets <code>args</code> to a tuple consisting of the rest of the tuple (e.g. <code>(1, 2)</code>). These are then spread as arguments when calling <code>do_foo</code> and <code>do_bar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for tag, *args in records:
</code></pre>
<p>means taken each element in the iterable <code>records</code>. That element will be iterable.</p>
<p>Put the first element of that element in <code>tag</code>, and put the rest in a tuple named <code>args</code>.</p>
<pre><code>do_foo(*args)
</code></pre>
<p>means pass of the members of <code>args</code> to <code>do_foo</code> as arguments.</p>
<p>So the list</p>
<pre><code>records = [
    ('foo', 1, 2),
    ('bar', 'hello'),
    ('foo', 3, 4),
]
</code></pre>
<p>causes</p>
<pre><code>foo(1, 2)
bar('hello')
foo(3, 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a feature available in Python 3+.</p>
<pre><code>a,*b=[1,2,3,4]
print(a)
&gt;&gt;&gt;1
print(b)
&gt;&gt;&gt;[2,3,4]
</code></pre>
<p>Similarly,</p>
<pre><code>a,*b,c=('foo',1,2,3,4)
print(a)
&gt;&gt;&gt;'foo'
print(b)
&gt;&gt;&gt;[1,2,3]
print(c)
&gt;&gt;&gt;4
</code></pre>
<p>The python interpreter creates a list of appropriate size for the variable beginning with <code>*</code>. I hope the purpose of <code>*args</code> in the above loop is now clear.</p>
</div>
<span class="comment-copy">I'll just note that <code>*args</code> as an assignment target in the loop (or indeed any assignment) is Python3-specific: this is a syntax error in Python 2.x.</span>
<span class="comment-copy">Are there any good resources on Python 3 where this exact behavior is discussed?</span>
<span class="comment-copy">The on line language and library references are the most definitive guides. <a href="http://docs.python.org/3/" rel="nofollow noreferrer">docs.python.org/3</a> (2.x is also on the same site)</span>
<span class="comment-copy">@ZackGao it is described in <a href="http://legacy.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">pep-3132</a>, you can also google for 'python extended tuple unpacking'</span>
