<div class="post-text" itemprop="text">
<p>In order to test some functionality I would like to create a <code>DataFrame</code> from a string. Let's say my test data looks like:</p>
<pre><code>TESTDATA="""col1;col2;col3
1;4.4;99
2;4.5;200
3;4.7;65
4;3.2;140
"""
</code></pre>
<p>What is the simplest way to read that data into a Pandas <code>DataFrame</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to do this is to use <a href="https://docs.python.org/2/library/io.html#io.StringIO" rel="noreferrer"><code>StringIO</code></a> and pass that to the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas.read_csv" rel="noreferrer"><code>pandas.read_csv</code></a> function. E.g:</p>
<pre><code>import sys
if sys.version_info[0] &lt; 3: 
    from StringIO import StringIO
else:
    from io import StringIO

import pandas as pd

TESTDATA = StringIO("""col1;col2;col3
    1;4.4;99
    2;4.5;200
    3;4.7;65
    4;3.2;140
    """)

df = pd.read_csv(TESTDATA, sep=";")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A traditional variable-width CSV is unreadable for storing data as a string variable. Especially for use inside a <code>.py</code> file, consider fixed-width pipe-separated data instead. Various IDEs and editors may have a plugin to format pipe-separated text into a neat table.</p>
<p>The following works for me. To use it, store it into a file, e.g. <code>pandas_util.py</code>. An example is included in the function's docstring. If you're using a version of Python older than 3.6, delete the type annotations from the function definition line.</p>
<pre><code>import re

import pandas as pd


def read_pipe_separated_str(str_input: str, **kwargs) -&gt; pd.DataFrame:
    """Read a Pandas object from a pipe-separated table contained within a string.

    Example:
        | int_score | ext_score | eligible |
        |           | 701       | True     |
        | 221.3     | 0         | False    |
        |           | 576       | True     |
        | 300       | 600       | True     |

    The leading and trailing pipes are optional, but if one is present, so must be the other.

    `kwargs` are passed to `read_csv`. They must not include `sep`.

    In PyCharm, the "Pipe Table Formatter" plugin has a "Format" feature that can be used to neatly format a table.
    """
    # Ref: https://stackoverflow.com/a/46471952/
    substitutions = [
        ('^ *', ''),  # Remove leading spaces
        (' *$', ''),  # Remove trailing spaces
        (r' *\| *', '|'),  # Remove spaces between columns
    ]
    if all(line.lstrip().startswith('|') and line.rstrip().endswith('|') for line in str_input.strip().split('\n')):
        substitutions.extend([
            (r'^\|', ''),  # Remove redundant leading delimiter
            (r'\|$', ''),  # Remove redundant trailing delimiter
        ])
    for pattern, replacement in substitutions:
        str_input = re.sub(pattern, replacement, str_input, flags=re.MULTILINE)
    return pd.read_csv(pd.compat.StringIO(str_input), sep='|', **kwargs)
</code></pre>
<h3>Non-working alternative:</h3>
<p>The code below doesn't work properly because it adds an empty column on both the left and right sides.</p>
<pre><code>df = pd.read_csv(pd.compat.StringIO(df_str), sep=r'\s*\|\s*', engine='python')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick and easy solution for interactive work is to copy-and-paste the text by loading the data from the clipboard.</p>
<p>Select the content of the string with your mouse:</p>
<p><a href="https://i.stack.imgur.com/9QLy9.png" rel="nofollow noreferrer"><img alt="Copy data for pasting into a Pandas dataframe" src="https://i.stack.imgur.com/9QLy9.png"/></a></p>
<p>In the Python shell use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_clipboard.html" rel="nofollow noreferrer"><code>read_clipboard()</code></a></p>
<pre><code>&gt;&gt;&gt; pd.read_clipboard()
  col1;col2;col3
0       1;4.4;99
1      2;4.5;200
2       3;4.7;65
3      4;3.2;140
</code></pre>
<p>Use the appropriate separator:</p>
<pre><code>&gt;&gt;&gt; pd.read_clipboard(sep=';')
   col1  col2  col3
0     1   4.4    99
1     2   4.5   200
2     3   4.7    65
3     4   3.2   140

&gt;&gt;&gt; df = pd.read_clipboard(sep=';') # save to dataframe
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Split Method</strong></p>
<pre><code>x = input_string
df = pd.DataFrame([x.split(';') for x in data.split('\n')])
print(df)
</code></pre>
</div>
<span class="comment-copy">python 3 docs: <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer">docs.python.org/3/library/io.html#io.StringIO</a></span>
<span class="comment-copy">Iff you need code that is compatible with both Python 2 and 3, you can optionally also use <code>from pandas.compat import StringIO</code>, noting that it's the same class as the one that comes with Python.</span>
<span class="comment-copy">FYI - <code>pd.read_table()</code> is an equivalent function, just slightly better nomenclature: <code>df = pd.read_table(TESTDATA, sep=";")</code>.</span>
<span class="comment-copy">@AntonvBR Noted that one could use <code>pandas.compat.StringIO</code>. That way we don't have to import <code>StringIO</code> separately. However the <code>pandas.compat</code> package is considered private according to <a href="http://pandas.pydata.org/pandas-docs/stable/api.html?highlight=compat" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/api.html?highlight=compat</a> so leaving the answer as is for now.</span>
<span class="comment-copy">Time to sort out which import: <a href="https://stackoverflow.com/questions/50283292/should-we-use-pandas-compat-stringio-or-python-2-3-stringio">Should we use pandas.compat.StringIO or Python 2/3 StringIO?</a></span>
