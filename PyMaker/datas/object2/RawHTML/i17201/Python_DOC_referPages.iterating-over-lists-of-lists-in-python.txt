<div class="post-text" itemprop="text">
<p>I have a list of lists:</p>
<pre><code>lst1 = [["(a)", "(b)", "(c)"],["(d)", "(e)", "(f)", "(g)"]]
</code></pre>
<p>I want to iterate over each element and perform some string operations on them for example:</p>
<pre><code>replace("(", "")
</code></pre>
<p>I tried iterating over the list using: </p>
<pre><code>for l1 in lst1:
   for i in l1:
       lst2.append(list(map(str.replace("(", ""), l1)))
</code></pre>
<p>I wanted the out result to be the same as original list of lists but without the parenthesis. Also, I am looking for a method in editing lists of lists and not really a specific solution to this question.</p>
<p>Thank you,</p>
</div>
<div class="post-text" itemprop="text">
<p>I just did what you did, i used the fact that each element of a list can be assigned a new (or updated) value:</p>
<pre><code>&gt;&gt;&gt; lst1 = [["(a)", "(b)", "(c)"],["(d)", "(e)", "(f)", "(g)"]]
&gt;&gt;&gt; for x in range(len(lst1)):
        for y in range(len(lst1[x])):
            lst1[x][y] = lst1[x][y].replace("(", "")
&gt;&gt;&gt; lst1
[['a)', 'b)', 'c)'], ['d)', 'e)', 'f)', 'g)']]
</code></pre>
<p><strong>EDIT</strong></p>
<p>This is how you do it with the "real problem" that you mentioned in the comment:</p>
<pre><code>a = [[(12.22, 12.122, 0.000)], [(1232.11, 123.1231, 0.000)]]
some_num = 10
for x in range(len(a)):
    b = list(a[x][0])
    for y in range(len(b)):
        b[y] *= some_num
    a[x] = tuple(b)
print(a)
</code></pre>
<p>OUTPUT:</p>
<pre><code>[(122.2, 121.22, 0.0), (12321.099999999999, 1231.231, 0.0)]
</code></pre>
<p>^ All elements have been multiplied by a number and the original format is kept</p>
<p>This is how it works:</p>
<p>So you have the initial list 'a' that has two sublists each with only ONE element (the tuple that contains the x,y,z coordinates). I go through list 'a' and make the tuples a list and set them equal to 'b' (so the fourth line has a value of [12.22, 12.122, 0.000] the first time around (and the next tuple (as a list) the next time around). </p>
<p>Then I go through each of the elements in 'b' (the tuple converted into a list) and multiply each element in that tuple by a number with the use of the increment operator (+=, -=, /=, *=). Once this loop is done, I set that same position in the master list 'a' equal to the tuple of the previously converted tuple. &lt; If this doesn't make sense, what I'm saying is that the initial tuples are converted into lists (then operated on), and then converter back to tuples (since you want it to end up with the same format as before).</p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong></p>
<p>Yes, you should use normal for-loops if you want to:</p>
<ol>
<li><p>Preform multiple operations on each item contained in each sub-list.</p></li>
<li><p>Keep both the main list as well as the sub-lists as the same objects.</p></li>
</ol>
<p>Below is a simple demonstration of how to do this:</p>
<pre><code>main = [["(a)", "(b)", "(c)"], ["(d)", "(e)", "(f)", "(g)"]]

print id(main)
print id(main[0])
print id(main[1])
print

for sub in main:
    for index,item in enumerate(sub):

        ### Preform operations ###
        item = item.replace("(", "")
        item = item.replace(")", "")
        item *= 2

        sub[index] = item  # Reassign the item

print main
print
print id(main)
print id(main[0])
print id(main[1])
</code></pre>
<p>Output:</p>
<pre><code>25321880
25321600
25276288

[['aa', 'bb', 'cc'], ['dd', 'ee', 'ff', 'gg']]

25321880
25321600
25276288
</code></pre>
<hr/>
<p>Use a <a href="http://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow">nested list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; lst1 = [["(a)", "(b)", "(c)"],["(d)", "(e)", "(f)", "(g)"]]
&gt;&gt;&gt; id(lst1)
35863808
&gt;&gt;&gt; lst1[:] = [[y.replace("(", "") for y in x] for x in lst1]
&gt;&gt;&gt; lst1
[['a)', 'b)', 'c)'], ['d)', 'e)', 'f)', 'g)']]
&gt;&gt;&gt; id(lst1)
35863808
&gt;&gt;&gt;
</code></pre>
<p>The <code>[:]</code> will keep the list object the same.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; lst1 = [["(a)", "(b)", "(c)"],["(d)", "(e)", "(f)", "(g)"]]
&gt;&gt;&gt; [[j.strip('()') for j in i] for i in lst1]
[['a', 'b', 'c'], ['d', 'e', 'f', 'g']]
&gt;&gt;&gt; [[j.lstrip('(') for j in i] for i in lst1]
[['a)', 'b)', 'c)'], ['d)', 'e)', 'f)', 'g)']]
</code></pre>
</div>
<span class="comment-copy">you could use <code>for L in lst1: for i, x in enumerate(L): L[i] = x.replace("(", "")</code> instead of <code>range()</code></span>
<span class="comment-copy">yes, you are correct, there are many ways to do this problem, i just answered it in his way of thinking. Personally, i would've done it the way @user3263488 did it</span>
<span class="comment-copy">On my previous comment, I meant the user @iCodez</span>
<span class="comment-copy">@Ol'Reliable this is working very well. Can you break it down step by step for me? I know this is asking a lot but i want to understand what is happening in every part of the code not just copy your solution. Thank you so much!</span>
<span class="comment-copy"><code>range(0, len(lst1))</code> is redundant, <code>range(len(lst1))</code> is enough</span>
<span class="comment-copy">yes, list comprehensions are useful for this if you just want to make a one liner. Although you are technically still using a nested for loop, my soln. is the correct answer based on how @user3263488 was thinking</span>
<span class="comment-copy">@Ol'Reliable - Well, I'll add a solution that uses normal for-loops.  The nested list comprehension one though should work fine in most cases.</span>
<span class="comment-copy">I like this approach. Now a real problem. I want to take a different list. one with XYZ coordinates like this: [[(12.22, 12.122, 0.000)], [(1232.11, 123.1231, 0.000)]]. Is there a way to nest a few operations? I want to strip it of parenthesis and commas then multiply each coordinate by a number and put it back together like it was. Any ideas?</span>
<span class="comment-copy">this is probably why i wanted to use a for loop since i can perform multiple operations in a row. right?</span>
<span class="comment-copy">what do you mean by "strip it of ... commas"? You still need commas for the elements</span>
