<div class="post-text" itemprop="text">
<p>I'm trying to decide which one to use when I need to acquire lines of input from STDIN, so I wonder how I need to choose them in different situations.</p>
<p>I found a previous post (<a href="https://codereview.stackexchange.com/questions/23981/how-to-optimize-this-simple-python-program">https://codereview.stackexchange.com/questions/23981/how-to-optimize-this-simple-python-program</a>) saying that:</p>
<blockquote>
<p>How can I optimize this code in terms of time and memory used? Note that I'm using different function to read the input, as sys.stdin.readline() is the fastest one when reading strings and input() when reading integers.</p>
</blockquote>
<p>Is that statement true ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The builtin <code>input</code> and <code>sys.stdin.readline</code> functions don't do exactly the same thing, and which one is faster may depend on the details of exactly what you're doing. As <a href="https://stackoverflow.com/users/3137499/aruisdante">aruisdante</a> commented, the difference is less in Python 3 than it was in Python 2, when the quote you provide was from, but there are still some differences.</p>
<p>The first difference is that <code>input</code> has an optional prompt parameter that will be displayed if the interpreter is running interactively. This leads to some overhead, even if the prompt is empty (the default). On the other hand, it may be faster than doing a <code>print</code> before each <code>readline</code> call, if you do want a prompt.</p>
<p>The next difference is that <code>input</code> strips off any newline from the end of the input. If you're going to strip that anyway, it may be faster to let <code>input</code> do it for you, rather than doing <code>sys.stdin.readline().strip()</code>.</p>
<p>A final difference is how the end of the input is indicated. <code>input</code> will raise an <code>EOFError</code> when you call it if there is no more input (stdin has been closed on the other end). <code>sys.stdin.readline</code> on the other hand will return an empty string at EOF, which you need to know to check for.</p>
<p>There's also a third option, using the file iteration protocol on <code>sys.stdin</code>. This is likely to be much like calling <code>readline</code>, but perhaps nicer logic to it.</p>
<p>I suspect that while differences in performance between your various options may exist, they're liky to be smaller than the time cost of simply reading the file from the disk (if it is large) and doing whatever you are doing with it. I suggest that you avoid the trap of premature optimization and just do what is most natural for your problem, and if the program is too slow (where "too slow" is very subjective), you do some profiling to see what is taking the most time. Don't put a whole lot of effort into deciding between the different ways of taking input unless it actually matters.</p>
</div>
<span class="comment-copy">This was probably true in <code>python 2.7</code> because <code>input</code> attempted to evaluate the input string as a python expression. There was probably an optimization that made reading <code>input() = 1</code> faster than <code>int(sys.stdin.readline())</code>. In <code>python 3.x</code>, <code>input()</code> has been turned into <code>raw_input()</code> from <code>python 2.7</code>, meaning it just returns the input as a string and does no evaluation, so it's likely exactly the same.</span>
<span class="comment-copy">there could be a difference in buffering mode while redirected that affects performance. <code>input()</code> may use <a href="http://www.gnu.org/software/readline/" rel="nofollow noreferrer"><code>readline(3)</code></a> if available (the man page says: <i>"BUGS: It's too big and too slow."</i>).</span>
<span class="comment-copy">@eryksun: <a href="http://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">the docs mention no such thing</a>. Suppose what you say is true for the current CPython version, what are you trying to say that relates to the question "which is faster sys.stdin.readline() or input()"?</span>
<span class="comment-copy">Seems like the third option (iterator) buffers the end. If you need it here and now, use the readline()</span>
