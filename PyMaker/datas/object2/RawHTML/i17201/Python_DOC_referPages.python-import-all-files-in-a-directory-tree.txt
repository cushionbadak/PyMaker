<div class="post-text" itemprop="text">
<p>I want to import all python files in a directory tree, i.e. if we have the following directory structure:</p>
<pre><code>tests/
tests/foo.py
tests/subtests/bar.py
</code></pre>
<p>(Imagine that the tree is of arbitrary depth).</p>
<p>I would like to do <code>import_all('tests')</code> and load <code>foo.py</code> and <code>bar.py</code>. Importing with the usual modules names (<code>tests.foo</code> and <code>tests.subtests.bar</code>) would be nice, but is not required.</p>
<p>My actual use case is that I have a whole bunch of code containing django forms; I want to identify which forms use a particular field class. My plan for the above code is to load all of my code, and then examine all loaded classes to find form classes.</p>
<p>What's a nice, simple way to go about this in python 2.7?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a rough and ready version using <code>os.walk</code>:</p>
<pre><code>import os
prefix = 'tests/unit'
for dirpath, dirnames, filenames in os.walk(prefix):
    trimmedmods = [f[:f.find('.py')] for f in filenames if not f.startswith('__') and f.find('.py') &gt; 0]
    for m in trimmedmods: 
        mod = dirpath.replace('/','.')+'.'+m
        print mod
        __import__(mod)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

my_dir = '/whatever/directory/'
files = [os.path.join(dirpath, f) for dirpath, dirnames, files in os.walk(my_dir) for f in files if f.endswith('.py')]
modules = [__import__(os.path.splitext(f)[0],globals(),locals(),[],-1) for f in files]
</code></pre>
</div>
<span class="comment-copy">Any reason not to use os.walk() <a href="http://www.tutorialspoint.com/python/os_walk.htm" rel="nofollow noreferrer">tutorialspoint.com/python/os_walk.htm</a></span>
<span class="comment-copy">@GaryWalker Not particularly, but os.walk is not a complete solution in itself.</span>
<span class="comment-copy"><a href="http://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer"><code>__import__</code></a> or better <a href="http://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>importlib</code></a> for Python 3.1+</span>
<span class="comment-copy">I guess I just assumed you would load modules dynamically. See <a href="http://stackoverflow.com/questions/769534/dynamic-loading-of-python-modules" title="dynamic loading of python modules">stackoverflow.com/questions/769534/â€¦</a> for an example. Not sure that this is necessarily a good idea -- depends up what you want to accomplish</span>
<span class="comment-copy">@poke try doing <code>__import__('tests/subtests/bar.py')</code> and get back to me.</span>
<span class="comment-copy">Unless I'm mistaken this won't import anything in subdirectories.</span>
<span class="comment-copy">no for sure, the os.walk could solve the tree issue like in your example, but what I wanted to show here is the usage of import which allow to play with fully qualified name ...</span>
<span class="comment-copy">it is more correct now</span>
