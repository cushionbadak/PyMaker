<div class="post-text" itemprop="text">
<p>My Python script is crashing. To debug it, I ran it in interactive mode <code>python -i example.py</code></p>
<pre><code>Traceback (most recent call last):
  File "example.py", line 5, in &lt;module&gt;
    main()
  File "example.py", line 3, in main
    message[20]
IndexError: string index out of range
</code></pre>
<p>At this point, I would like to inspect the variable <code>message</code>. I tried</p>
<pre><code>&gt;&gt;&gt; message
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'message' is not defined
</code></pre>
<p>Alas <code>message</code> is not in scope (though <code>main</code> is). That's frustrating. How can I inspect the variable? Is there a more useful version of <code>python -i</code> that keeps what's in scope at the crash (rather than the top level)?</p>
<hr/>
<p>Code used for <code>example.py</code> above. Needless to say, this is a simplification. </p>
<pre><code>def main():
    message = "hello world"
    message[20]

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To drop to a debugger <em>only if there is an exception</em> you could define a <a href="https://docs.python.org/2/library/sys.html#sys.excepthook" rel="nofollow">custom excepthook</a>:</p>
<pre><code>import sys
def excepthook(type_, value, tb):
    import traceback
    import pdb
    traceback.print_exception(type_, value, tb)
    pdb.post_mortem(tb)
sys.excepthook = excepthook

def main():
    message = "hello world"
    message[20]

main()
</code></pre>
<p>Running the script drops you into pdb and in the frame which raised the exception:</p>
<pre><code>% script.py
Traceback (most recent call last):
  File "/home/unutbu/pybin/script.py", line 16, in &lt;module&gt;
    main()
  File "/home/unutbu/pybin/script.py", line 14, in main
    message[20]
IndexError: string index out of range
&gt; /home/unutbu/pybin/script.py(14)main()
-&gt; message[20]
(Pdb) p message
'hello world'
(Pdb) p message[20]
*** IndexError: IndexError('string index out of range',)
(Pdb) p len(message)
11
</code></pre>
<p>If defining the excepthook seems like too much code, you could tuck it away in a
utility module, such as utils_debug.py:</p>
<pre><code>import sys
def enable_pdb():
    def excepthook(type_, value, tb):
        import traceback
        import pdb
        traceback.print_exception(type_, value, tb)
        pdb.post_mortem(tb)
    sys.excepthook = excepthook
</code></pre>
<p>and then you would only need to add</p>
<pre><code>import utils_debug as UDBG
UDBG.enable_pdb()
</code></pre>
<p>to your <code>script.py</code>.</p>
<hr/>
<p>Or, if you are using <a href="http://ipython.org" rel="nofollow">IPython</a>, you could use the <a href="http://ipython.org/ipython-doc/2/interactive/reference.html#post-mortem-debugging" rel="nofollow">%pdb magic function</a> (which drops you into <code>ipdb</code> when there is an exception). </p>
<hr/>
<p>It is unclear why inspecting  <code>size</code> at the pdb prompt is giving you a NameError. (A runnable example would be very useful.) You might try using <a href="https://docs.python.org/2/library/pdb.html#debugger-commands" rel="nofollow"><code>bt</code> (backtrace)</a> to inspect the frame stack. If <code>size</code> is defined in a different frame than the one <code>pdb</code> is currently in, you might be able use <a href="https://docs.python.org/2/library/pdb.html#debugger-commands" rel="nofollow"><code>u</code> (up)</a> to go up to the frame where <code>size</code> is defined.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the Python docs <a href="https://docs.python.org/3.4/library/pdb.html">https://docs.python.org/3.4/library/pdb.html</a></p>
<blockquote>
<p><code>pdb.py</code> can also be invoked as a script to debug other scripts. For example: <code>python -m pdb myscript.py</code>. When invoked as a script, pdb will automatically enter post-mortem debugging if the program being debugged exits abnormally. </p>
</blockquote>
<p>This isn't entirely accurate. It actually enters debugging at the first line. </p>
<pre><code>$ python -m pdb example.py
&gt; example.py(1)&lt;module&gt;()
-&gt; def main():
</code></pre>
<p>However if you type <code>c</code> it will then continue to the crash</p>
<pre><code>(Pdb) c
Traceback (most recent call last):
  File "C:\Python34\lib\pdb.py", line 1661, in main
    pdb._runscript(mainpyfile)
  File "C:\Python34\lib\pdb.py", line 1542, in _runscript
    self.run(statement)
  File "C:\Python34\lib\bdb.py", line 431, in run
    exec(cmd, globals, locals)
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "example.py", line 1, in &lt;module&gt;
    def main():
  File "example.py", line 3, in main
    message[20]
IndexError: string index out of range
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
&gt; example.py(3)main()
</code></pre>
<p>At this point you can type <code>message</code> to inspect the variable.</p>
<pre><code>-&gt; message[20]
(Pdb) message
'hello world'
</code></pre>
<p>Wahey!</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple alternative is to use <a href="https://docs.python.org/3/library/cgitb.html" rel="nofollow">cgitb</a> module.</p>
<pre><code>import cgitb; cgitb.enable(format='text')


def main():
    message = "hello world"
    message[20]

main()
</code></pre>
<p>Now the traceback itself prints the value of the message.</p>
<pre><code>A problem occurred in a Python script.  Here is the sequence of
function calls leading up to the error, in the order they occurred.

 /home/anand/projects/python/ptb/tes.py in &lt;module&gt;()
    4 def main():
    5     message = "hello world"
    6     message[20]
    7 
    8 main()
main = &lt;function main&gt;

 /home/anand/projects/python/ptb/tes.py in main()
    4 def main():
    5     message = "hello world"
    6     message[20]
    7 
    8 main()
message = 'hello world'
IndexError: string index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use some of the <a href="http://blog.ionelmc.ro/2013/06/05/python-debugging-tools/" rel="nofollow">Python debuggers</a> as mentioned at the other answer or give a try to my <a href="https://github.com/miso-belica/diagnostics" rel="nofollow">diagnostics</a> library that stores more <a href="http://miso-belica.github.io/diagnostics/log-example.html" rel="nofollow">detailed traceback</a> for you as HTML file :) Just create directory named <code>log</code> next to the <code>cheaters.py</code> file and enable exception hook by lines below:</p>
<pre><code>from diagnostics import exception_hook
exception_hook.enable()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually use the code module for this type of thing.  Catch the exception as early as you can and dump everything into an interactive console right there.</p>
<pre><code>try:
   #something that might throw an error
except Exception as e:
    import code
    l={}
    l['global_vars']=(globals()
    l['local_vars']=locals()
    code.InteractiveConsole(locals=l).interact()
</code></pre>
<p>This will start a python REPL inside the exception handler, the raised exception will be in local_vars['e'], and you'll have access to the scope where the try block was called.  If the exception is being raised inside some other library, you can modify the other library's code with this exception handler, use the PYTHONPATH environment variable to point python at the modified version of the library, and leave the original in place.</p>
</div>
<div class="post-text" itemprop="text">
<p>I highly recommend both ipython and ipdb for these sorts of situations.</p>
<p>From within the ipython shell, you type</p>
<pre><code>run example.py
</code></pre>
<p>When the unhandled exception returns you to the ipython shell, you type</p>
<pre><code>%debug
</code></pre>
<p>This will put you in ipdb, at the exact line of code that throws the unhandled exception. You can then inspect the variables simply by evaluating them, just as you would in a normal python shell.</p>
<p>My answer is similar to Colonel Panic's answer that was already accepted. The main advantage here is ipython and ipdb. I prefer these tools for a variety of reasons, the most prominent is that they enable tab completion of variable names. Once you become used to tab completion, it's hard to live without it, because it allows you to work so much faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>use , pdb for debugging each line </p>
<pre><code>import pdb; pdb.set_trace()
</code></pre>
<p>this will give you break after each line and you can track your code </p>
<pre><code>def main():
    import pdb; pdb.set_trace()
    message = "hello world"
    message[20]

main()
</code></pre>
<p>when main() will be call this function will start working and you can track message , you can debug it </p>
<p>your terminal will look like it</p>
<pre><code>&gt; /home/admin/dxservices/example.py(3)main()
-&gt; message = "hello world"
(Pdb) 
&gt; /home/admin/dxservices/example.py(4)main()
-&gt; message[20]
(Pdb) n
 IndexError: 'string index out of range'  
 &gt; /home/admin/dxservices/example.py(4)main()
-&gt; message[20]
</code></pre>
</div>
<span class="comment-copy">You probably want <a href="http://docs.python.org/2.7/library/pdb.html" rel="nofollow noreferrer">pdb</a></span>
<span class="comment-copy">Python has locals function which might be helpful.</span>
<span class="comment-copy">@ColonelPanic You that there is a Python debugger built into IDLE which you can use to step over all variable declarations local or global while seeing the errors and exceptions?</span>
<span class="comment-copy">Don't forget to mention pdb++. To install it: pip install pdbpp. It's waaay better than the normal pdb :)</span>
<span class="comment-copy">This assumes I know where the error is going to happen. I just want to run the script, and <i>only if</i> there's a Traceback, inspect the variables.</span>
<span class="comment-copy">In this case check pm() and post_mortem() functions, they allow you to inspect variables after a failure.</span>
