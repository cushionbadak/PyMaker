<div class="post-text" itemprop="text">
<p>Here is a 7x7 matrix:</p>
<pre class="lang-none prettyprint-override"><code>11  21  31  41  51  61  71
12  22  32  42  52  62  72
13  23  33  43  53  63  73
14  24  34  44  54  64  74
15  25  35  45  55  65  75
16  26  36  46  56  66  76
17  27  37  47  57  67  77
</code></pre>
<p>The numbers <code>11, 21, 33</code> â€¦ are the values of the positions.
If a radius, the number of row and the number of column are given, how to find the neighbors?</p>
<p>For example, function <code>neighbors(radius = 1, rowNumber = 3, columnNumber = 3)</code> should return a matrix:</p>
<pre class="lang-none prettyprint-override"><code>22  32  42
23  33  43
24  34  44
</code></pre>
<p><code>function neighbors(radius = 2, rowNumber = 3, columnNumber = 3)</code> should return a matrix:</p>
<pre class="lang-none prettyprint-override"><code>11  21  31  41  51
12  22  32  42  52
13  23  33  43  53
14  24  34  44  54
15  25  35  45  55
</code></pre>
<p>When the neighbor is out of boundary, its value should be 0.
For example, <code>function neighbors(radius = 2, rowNumber = 1, columnNumber = 1)</code> should return a matrix</p>
<pre class="lang-none prettyprint-override"><code>0   0   0   0   0
0   0   0   0   0
0   0   11  21  31
0   0   12  22  32
0   0   13  23  33
</code></pre>
<p>I've been thing about this problem for 3 days, but I still can't develop a solution for it.</p>
</div>
<div class="post-text" itemprop="text">
<p>It might be hard in other languages but in Python this is quite easy. Here is a function that can do what you asked for:</p>
<pre><code>def neighbors(radius, rowNumber, columnNumber):
     return [[a[i][j] if  i &gt;= 0 and i &lt; len(a) j &gt;= 0 and j &lt; len(a[0]) else 0
                for j in range(columnNumber-1-radius, columnNumber+radius)]
                    for i in range(rowNumber-1-radius, rowNumber+radius)]
</code></pre>
<p>Here is a 2D list:</p>
<pre><code> a = [[ 11,  21,  31,  41,  51,  61,  71],
      [ 12,  22,  32,  42,  52,  62,  72],
      [ 13,  23,  33,  43,  53,  63,  73],
      [ 14,  24,  34,  44,  54,  64,  74],
      [ 15,  25,  35,  45,  55,  65,  75],
      [ 16,  26,  36,  46,  56,  66,  76],
      [ 17,  27,  37,  47,  57,  67,  77]]
</code></pre>
<p>See <a href="https://docs.python.org/3/howto/functional.html#generator-expressions-and-list-comprehensions" rel="nofollow noreferrer">List comprehensions</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>My original solution was not correct, @Gnijuohz's is correct.  The following is exactly @Gnijuohz's solution except that the function takes a matrix (<code>list</code> of <code>list</code>s) as the first argument and the list comprehension has been replaced by nested <code>for</code> loops.</p>
<pre><code>def neighbors(mat, row, col, radius=1):

    rows, cols = len(mat), len(mat[0])
    out = []

    for i in xrange(row - radius - 1, row + radius):
        row = []
        for j in xrange(col - radius - 1, col + radius):

            if 0 &lt;= i &lt; rows and 0 &lt;= j &lt; cols:
                row.append(mat[i][j])
            else:
                row.append(0)

        out.append(row)

    return out
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like to use a bounds checking function when doing operations on 2d arrays.  This code doesn't do exactly what you want (It starts from the upper left corner), but it should be enough to boost you along.</p>
<pre><code>matrix = [
[11, 21, 31, 41, 51, 61, 71],
[12, 22, 32, 42, 52, 62, 72],
[13, 23, 33, 43, 53, 63, 73],
[14, 24, 34, 44, 54, 64, 74],
[15, 25, 35, 45, 55, 65, 75],
[16, 26, 36, 46, 56, 66, 76],
[17, 27, 37, 47, 57, 67, 77] ]

def in_bounds(matrix, row, col):
    if row &lt; 0 or col &lt; 0:
        return False
    if row &gt; len(matrix)-1 or col &gt; len(matrix)-1:
        return False
    return True

def neighbors(matrix, radius, rowNumber, colNumber):
    for row in range(radius):
        for col in range(radius):
            if in_bounds(matrix, rowNumber+row, colNumber+col):
                print str(matrix[rowNumber+row][colNumber+col]) + " ",
        print ""

neighbors(matrix, 2, 1, 1)
</code></pre>
</div>
<span class="comment-copy">what have you tried? is your matrix a <code>numpy.matrix</code> or a <code>list</code> or file content?</span>
<span class="comment-copy">I'm trying to use a 2d array to solve it, but finding problem when dealing with the position whose neighbors are out of boundary.</span>
<span class="comment-copy">I tired to pass to a 3d array to this function, but it shows "too many values to unpack, what is the reason? Say, now I change the value of the first row and the first column from 11 to [1, 2, 3]. I think it should work.</span>
<span class="comment-copy">The reason is this line <code>rows, cols = mat.shape</code>; it's expecting that <code>mat.shape</code> contains two values (i.e. <code>mat</code> is a two dimensional array).</span>
<span class="comment-copy">I tested neighbors(mat, 1, 2, 1), it returns an array with shape (3, 5). It is not correct.</span>
<span class="comment-copy">You're right!  I've corrected it, but please accept @Gnijuohz's answer.</span>
