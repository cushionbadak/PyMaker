<div class="post-text" itemprop="text">
<p>I have written code like this : </p>
<pre><code>def choice(states):
    states = list(states)
    rnd = random.random()
    for state, p in states:
        rnd -= p
        if rnd &lt;= 0:
            return state
</code></pre>
<p>And I need to  create some tests :</p>
<pre><code>import unittest
class Tests(unittest.TestCase):
    def test_choice(self):
        assertEquals(choice(states),something_equl)
</code></pre>
<p>How am I supposed to inject my own random number into test? to get deterministic results?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.voidspace.org.uk/python/mock/" rel="noreferrer">Mock</a> the <code>random.random()</code> function, example:</p>
<pre><code>import random
import unittest
import mock


def choice(states):
    states = list(states)
    rnd = random.random()
    for state, p in states:
        rnd -= p
        if rnd &lt;= 0:
            return state


class Tests(unittest.TestCase):
    @mock.patch('random.random')
    def test_first_state_fires(self, random_call):
        random_call.return_value = 1
        self.assertEquals(choice([(1, 1)]), 1)

    @mock.patch('random.random')
    def test_returns_none(self, random_call):
        random_call.return_value = 2
        self.assertIsNone(choice([(1, 1)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code> library</a> to patch out the <code>random()</code> function. The library is part of Python 3.3 and up, you can install it separately as <a href="https://pypi.python.org/pypi/mock" rel="nofollow"><code>mock</code></a> for older versions:</p>
<pre><code>try:
    from unittest import mock
except ImportError:
    import mock

class Tests(unittest.TestCase):
    @mock.patch('random.random')
    def test_choice(self, mock_random):
        mock_random.return_value = 0.42
        assertEquals(choice(states),something_equl)
</code></pre>
</div>
<span class="comment-copy">What exactly are you trying to do?</span>
<span class="comment-copy">you could have <code>rnd</code> passed in but defaulting to <code>None</code>. Then in your function only generate <code>rnd</code> if it is <code>None</code>.</span>
<span class="comment-copy">When you call your function you can do something like this random.randrange(0000,9999)</span>
<span class="comment-copy">Have you considered using e.g. <a href="http://docs.python.org/2/library/random.html#random.seed" rel="nofollow noreferrer"><code>random.seed(0)</code></a> to reset to a known state?</span>
<span class="comment-copy">The description of the question should make clear that it is about <i>not</i> getting random data, but to get something deterministic... as it is, it's misleading (and I found it on the search for a simple way to get random data for tests</span>
