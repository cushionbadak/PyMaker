<div class="post-text" itemprop="text">
<p>I a trying to send and receive binary data in python(v3). The way I am attempting to do it is at the client end, I manually create a string of bytes and then send it through a socket to the server. On the server side, I receive the data and manually access individual bits to resolve the message.</p>
<p>This is how the client looks:</p>
<pre><code>remoteIP = "164.107.112.72"
remotePort = 34562
remoteStruct = remoteIP.split('.', 4)
remoteIPBytes = ((int)(remoteStruct[0])).to_bytes(1, byteorder='little') + ((int)(remoteStruct[1])).to_bytes(1, byteorder='little') + ((int)(remoteStruct[2])).to_bytes(1, byteorder='little') + ((int)(remoteStruct[3])).to_bytes(1, byteorder='little')

headerStruct = remoteIPBytes + remotePort.to_bytes(2, byteorder='little')
sequenceNum = 0
size = #filesize

data = headerStruct + sequenceNum.to_bytes(1, byteorder='little') + (1).to_bytes(1,byteorder='little') + size.to_bytes(4, byteorder='little')
#data is then sent to server
</code></pre>
<p>this is how the server handles the data:</p>
<pre><code>serversock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)   # UDP Datagram
host = '164.107.112.70'
serversock.bind((host, localPort))

seqNum = 0

#get size
size = 0
var = serversock.recvfrom(12)
seqNum = int.from_bytes((str(var))[6], byteorder='little')
</code></pre>
<p>In that last line of code, I get an error saying that (str(var)) is being treated as a unicode string rather than a binary one. However, if I don't cast as a string, I get an access out of bounds error.</p>
<p>Can someone explain to me what the correct way to send and receive binary data in python is? I have tried using struct.pack and unpack before/after sending data, but I always get errors during the unpacking, even though the format strings are identical</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>(int)(remoteStruct[0])</code></p>
</blockquote>
<p>This looks a lot like some C code.  Python doesn't have type casts like C.</p>
<p><code>int</code> refers to an object.  The way you use it is by calling it - like it's a function.</p>
<p>Instead write something like <code>int(remoteStruct[0])</code>.  What you wrote works because the extra parenthesis are totally redundant and don't change the meaning.  This isn't just a syntactic difference, though.  It's a basic difference in the type systems of the two languages.</p>
<p>This has nothing to do with your question, though.</p>
<pre><code>IPBytes = ((int)(remoteStruct[0])).to_bytes(1, byteorder='little') + ((int)(remoteStruct[1])).to_bytes(1, byteorder='little') + ((int)(remoteStruct[2])).to_bytes(1, byteorder='little') + ((int)(remoteStruct[3])).to_bytes(1, byteorder='little')
</code></pre>
<p>This is an <em>incredibly</em> verbose way to pack an IPv4 address into four bytes.  Try this instead:</p>
<pre><code>import socket
print socket.inet_pton(socket.AF_INET, "1.2.3.4")
</code></pre>
<p>Though this is also not directly related to your question.</p>
<p>The source of your <code>IndexError</code> problem (I'm guessing that's the exception you encounter, you said "access out of bounds error" which isn't something that actually exists in Python's built-in types - don't paraphrase errors, quote them verbatim) is very likely somewhere in the vicinity of:</p>
<pre><code>var = serversock.recvfrom(12)
</code></pre>
<p>Notice the return value of <a href="http://docs.python.org/3/library/socket.html#socket.socket.recvfrom" rel="nofollow">recvfrom</a>: <em>The return value is a pair (bytes, address)</em>.</p>
<p>If you try to index into this object at <code>6</code> then you'll definitely get an <code>IndexError</code> raised, yes.</p>
<p>Using <code>str</code> to get a unicode string representation of this pair won't really help though - although it might prevent the indexing operation from failing because the resulting unicode string will probably be long enough. :)  You'll be getting garbage, though.</p>
<p>Instead, try indexing into the bytes that you read instead:</p>
<pre><code>data, addr = serversock.recvfrom(12)

if len(data) &gt; 6:
    seqNum = ord(data[6])
</code></pre>
<p>Notice you really do need to be careful about length checking here.  Just because you passed <code>12</code> to <code>recvfrom</code> doesn't mean it returns 12 bytes.  It means it returns <em>up to</em> 12 bytes.  You don't want your program to explode with an unhandled exception the first time someone sends you a short datagram.</p>
</div>
