<div class="post-text" itemprop="text">
<p>I'm trying to create a decorator class that counts how many times a function is called, but I'm getting an error message that says:</p>
<pre><code>    "TypeError: __exit__() takes exactly 1 argument (4 given)"
</code></pre>
<p>and I really don't know how I'm giving it four arguments.  My code looks like this:</p>
<pre><code>class fcount2(object):
    __instances = {}
    def __init__(self, f):
        self.__f = f
        self.__numcalls = 0
        fcount2.__instances[f] = self

    def __call__(self, *args, **kwargs):
        self.__numcalls += 1
        return self.__f(*args, **kwargs)

    def __enter__(self):
        return self

    def __exit__(self):
        return self

    @staticmethod
    def count(f):
        return fcount2.__instances[self.__f].__numcalls


@fcount2
def f(n):
    return n+2

for n in range(5):
    print f(n)   
print 'f count =',f.count

def foo(n):
    return n*n

with fcount2(foo) as g:
    print g(1)
    print g(2)
print 'g count =',g.count
print 'f count =',f.count

with fcount2(f) as g:
    print g(1)
    print g(2)
print 'g count =',g.count
print 'f count =',f.count

with f:
    print f(1)
    print g(2)
print 'g count =',g.count
print 'f count =',f.count
</code></pre>
<p>Are there some other parameters I should (or shouldn't) be passing into the def <strong>exit</strong> function?  Any tips or ideas would be appreciated.</p>
<p>As an aside, my line of code that says "print 'f count =',f.count" appears to be outputting the memory address rather than the value, but that's a whole different problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>__exit__()</code> method should accept information about exceptions that come up in the <code>with:</code> block. See <a href="http://docs.python.org/3/reference/datamodel.html#object.__exit__" rel="noreferrer">here</a>.</p>
<p>The following modification of your code works:</p>
<pre><code>def __exit__(self, exc_type, exc_value, tb):
    if exc_type is not None:
        traceback.print_exception(exc_type, exc_value, tb)
        # return False # uncomment to pass exception through

    return True
</code></pre>
<p>Then you can try raising an exception in one of your <code>with:</code> blocks and it'll be caught in <code>__exit__()</code>.</p>
</div>
<span class="comment-copy">What behavior do you want the context manager to have?  in other words, decorators and context managers are 2 very different things that serve different purposes... e.g. why are you trying to make a context manager here?</span>
<span class="comment-copy">I was trying to keep a separate counter for the number of times the "with" called the function and the total number of times the function was called overall.</span>
<span class="comment-copy">Isn't the error message backwards? Shouldn't it be <code>__exit__() takes exactly 4 arguments (1 given)</code>?</span>
<span class="comment-copy"><code>__exit__()</code> <i>should</i> take 4 arguments, but as it was defined in the question, the method only takes 1 argument (<code>self</code>)</span>
<span class="comment-copy">You might want to use <code>traceback.print_exception(exc_type, exc_value, tb)</code> if you actually want to see the traceback (instead of <code>print</code>). See <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer">the docs</a> for other options.</span>
<span class="comment-copy">@kristina funny enough I was just searching for exactly that line of code yesterday. I will update my answer accordingly so I have it ready for the next time I need it :)</span>
