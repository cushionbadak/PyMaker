<div class="post-text" itemprop="text">
<p>I have a nested loop to create all combinations in a set of conjugated verbs. The aim to to get all possible combinations of verb, person and tense, e.g. <code>[['to be', 'first person singular', 'future'],['to be', 'second person singular', 'future'], ...]</code>. </p>
<pre><code>for v in verbs:
    for p in persons:
        for t in tenses:
            return [v, p, t]
</code></pre>
<p>Is there a way of reducing the nesting, perhaps using <code>itertools</code>?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for v, p, t in itertools.product(verbs, persons, tenses):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> for this task:</p>
<blockquote>
<p>Cartesian product of input iterables. Equivalent to nested for-loops in a generator expression. For example, product(A, B) returns the same as ((x,y) for x in A for y in B).</p>
</blockquote>
<pre><code>a = [1,2,3]
b = [4,5,6]
c = [7,8,9]
import itertools
for p in itertools.product(a,b,c):
    print(p)
</code></pre>
<p>The alternative would be a list comprehension expression:</p>
<pre><code>for p in [(x,y,z) for x in a for y in b for z in c]:
    print(p)
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/15037175/4279">Equivalent Nested Loop Structure with Itertools</a></span>
