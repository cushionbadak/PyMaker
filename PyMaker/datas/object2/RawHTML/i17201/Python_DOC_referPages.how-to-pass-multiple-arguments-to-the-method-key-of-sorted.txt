<div class="post-text" itemprop="text">
<p>On a website, I am trying to sort a list of shop by their relative position of the user. Let me explain.</p>
<p>A shop looks something like this:</p>
<pre class="lang-py prettyprint-override"><code>class Shop(models.Model):
    latitude = models.DecimalField(max_digits=9, decimal_places=6)
    longitude = models.DecimalField(max_digits=9, decimal_places=6)
</code></pre>
<p>I get the position of the user in the session.</p>
<pre class="lang-py prettyprint-override"><code>request.session['user_latitude']
request.session['user_longitude']
</code></pre>
<p>So now I got a list of shop and I want to sort them. So I tried this:</p>
<pre class="lang-py prettyprint-override"><code>def distance_of_the_shop(shop):
    # compute the distance between the shop and the user and return it
    return computed_distance

sorted(shop_list, key=distance_of_the_shop)
</code></pre>
<p>The question is pretty simple, how to pass more than one argument to the method <code>distance_of_the_shop</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just wrap the call in a lambda:</p>
<pre><code>ulong, ulat = request.session['user_latitude'], request.session['user_longitude']
sorted(shop_list, key=lambda shop: distance_of_the_shop(shop, ulong, ulat))
</code></pre>
<p>and add two more arguments to the <code>distance_of_the_shop()</code> function to receive the longitude and latitude.</p>
<p>The <code>sorted()</code> function calls the <code>key</code> for each value in <code>shop_list</code>, but nothing says the callable cannot itself call other functions. A <code>lambda</code> is the easiest way to create a new wrapper function that does just that.</p>
<p>You could also use a <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial()</code> object</a>, provided the longitude and latitude values can be passed in as keyword arguments, or accepts those two values as the first two positional arguments. Treating them as keyword arguments is probably best, even if they are given a position (no default value), you can use their names as keyword arguments in the <code>partial()</code>.</p>
<p>Assuming the definition is:</p>
<pre><code>def distance_of_the_shop(shop, long, lat):
    # ...
</code></pre>
<p>then use</p>
<pre><code>sorted(shop_list, key=partial(distance_of_the_shop, long=ulong, lat=ulat))
</code></pre>
<p>and <code>sorted()</code> will pass each <code>shop</code> to the <code>partial()</code>, which in turn calls <code>distance_of_the_shop(shop, long=ulong, lat=ulat)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is hard to comprehend because you never define a <code>distance</code> function, and the function you do provide, <code>distance_of_the_shop</code>, actually takes a single argument.</p>
<p>If I understand correctly, you would like <code>distance_of_the_shop</code> to receive the current user and the shop being compared. To achieve that, use a <code>lambda</code>:</p>
<pre><code>shop_list.sort(key=lambda shop: distance_of_the_shop(user, shop))
</code></pre>
<p>Also note that it doesn't make sense to call <code>sorted</code> without assigning its value to some variable or container. If you want to sort a list in-place, use its <code>sort</code> method, as shown above.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, we need a distance function (this one calculates great-circle distances):</p>
<pre><code>from math import radians, cos, sin, asin, sqrt

def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # from stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points#4913653
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula 
    dlon = lon2 - lon1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 

    # 6367 km is the radius of the Earth
    km = 6367 * c
    return km
</code></pre>
<p>then we define a distance-function per user:</p>
<pre><code>def dist_from_user(user):
    # This is kind of funky, because the `user` parameter is
    #  not used, we simply assume that user is the current session-holder.
    # It would make more sense if we actually had more than
    #  one user to choose between.
    lat = float(request.session['user_latitude'])
    lon = float(request.session['user_longitude'])

    def shop_dist(shop):
        s_lat = float(shop.latitude)
        s_lon = float(shop.longitude)
        return haversine(lon, lat, s_lon, s_lat)
    return shop_dist
</code></pre>
<p>and call it like</p>
<pre><code>shop_list.sort(key=dist_from_user(user))
</code></pre>
</div>
<span class="comment-copy">Do you mean, "how do I pass the user's location to <code>distance_of_the_shop</code> as well" ?</span>
<span class="comment-copy">Yes, that is it</span>
<span class="comment-copy">Great solution, very pythonic, thanks :)</span>
<span class="comment-copy">My bad, there is only one function <code>distance_of_the_shop</code></span>
<span class="comment-copy">@Thom It is still defined to receive a single argument, though?</span>
