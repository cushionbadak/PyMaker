<div class="post-text" itemprop="text">
<p>i created a test c dll, which export one function i would like to expose to python bindings. I used the latest version fo SWIG for that. After successful compilation, SWIG leaves me with a x.py and a x.dll file.</p>
<p>Now i am supposed to "import" the "package". However, no matter where i copy those files, when i type "import x" in python i get "ImportError: No module named 'x'".</p>
<p>So how do i load such a custom created package in python?</p>
<p>I am running windows 7 x64, with python 3.3 and latest SWIG.</p>
<p>thanks</p>
<p>edit: we are getting somewhere! I did some path trickery, now the module is found, but:</p>
<pre><code>      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File ".\_pt1.py", line 28, in &lt;module&gt;
        _pt1 = swig_import_helper()
      File ".\_pt1.py", line 24, in swig_import_helper
        _mod = imp.load_module('_pt1', fp, pathname, description)
      File "C:\Python33\lib\imp.py", line 180, in load_module
        return load_source(name, filename, file)
      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File ".\_pt1.py", line 28, in &lt;module&gt;
        _pt1 = swig_import_helper()
      File ".\_pt1.py", line 24, in swig_import_helper
        _mod = imp.load_module('_pt1', fp, pathname, description)
      File "C:\Python33\lib\imp.py", line 180, in load_module
        return load_source(name, filename, file)
      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File ".\_pt1.py", line 28, in &lt;module&gt;
        _pt1 = swig_import_helper()
      File ".\_pt1.py", line 24, in swig_import_helper
        _mod = imp.load_module('_pt1', fp, pathname, description)
      File "C:\Python33\lib\imp.py", line 180, in load_module
        return load_source(name, filename, file)
      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File ".\_pt1.py", line 28, in &lt;module&gt;
        _pt1 = swig_import_helper()
      File ".\_pt1.py", line 24, in swig_import_helper
        _mod = imp.load_module('_pt1', fp, pathname, description)
      File "C:\Python33\lib\imp.py", line 180, in load_module
        return load_source(name, filename, file)
      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File ".\_pt1.py", line 28, in &lt;module&gt;
        _pt1 = swig_import_helper()
      File ".\_pt1.py", line 24, in swig_import_helper
        _mod = imp.load_module('_pt1', fp, pathname, description)
      File "C:\Python33\lib\imp.py", line 180, in load_module
        return load_source(name, filename, file)
      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File ".\_pt1.py", line 28, in &lt;module&gt;
        _pt1 = swig_import_helper()
      File ".\_pt1.py", line 24, in swig_import_helper
        _mod = imp.load_module('_pt1', fp, pathname, description)
      File "C:\Python33\lib\imp.py", line 180, in load_module
        return load_source(name, filename, file)
      File "C:\Python33\lib\imp.py", line 119, in load_source
        _LoadSourceCompatibility(name, pathname, file).load_module(name)
      File "&lt;frozen importlib._bootstrap&gt;", line 584, in _check_name_wrapper
      File "&lt;frozen importlib._bootstrap&gt;", line 1022, in load_module
      File "&lt;frozen importlib._bootstrap&gt;", line 1003, in load_module
      File "&lt;frozen importlib._bootstrap&gt;", line 560, in module_for_loader_wrapper
      File "&lt;frozen importlib._bootstrap&gt;", line 853, in _load_module
      File "&lt;frozen importlib._bootstrap&gt;", line 954, in get_code
      File "C:\Python33\lib\imp.py", line 106, in get_data
        return super().get_data(path)
      File "&lt;frozen importlib._bootstrap&gt;", line 1032, in get_data
    RuntimeError: maximum recursion depth exceeded while calling a Python object
</code></pre>
<p>where pt1 is my test module.</p>
<p>edit2:</p>
<p>I have uploaded all the files here: (40kb) rghost.net/53170317</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have foo.py and x.py and _x.dll, try putting them all in the same folder. Then, python.exe foo.py (where foo.py is module that imports x) from that folder. Post what happens in your question. </p>
<p>Update: just noticed the <code>.\_pt1.py</code> import. Can you find where that module is and see if it contains an <code>import x</code> or other suspicious looking code that could cause recursion.</p>
</div>
<span class="comment-copy">See <a href="http://swig.org/Doc3.0/Python.html#Python_nn6" rel="nofollow noreferrer">using distutils</a> (SWIG 3.0 docs). Also read <a href="http://docs.python.org/3/distutils" rel="nofollow noreferrer">Distributing Python Modules</a> and the <a href="http://packaging.python.org" rel="nofollow noreferrer">Python Packaging User Gudie</a>.</span>
<span class="comment-copy">Please indicate where you have put the files and tried, and how you ran python</span>
<span class="comment-copy">thanks, that helped. I added the leading underscore "_" to the files. Now they are found, but it fails with a recursion bug. I pasted the log into the first post.</span>
<span class="comment-copy">thanks for your reply, i am getting increasingly desperate. :(  When i do what you describe, i get the exact same import-recursion error i already appended to my question.   I have uploaded all the files here: (40kb)   <a href="http://rghost.net/53170317" rel="nofollow noreferrer">rghost.net/53170317</a></span>
