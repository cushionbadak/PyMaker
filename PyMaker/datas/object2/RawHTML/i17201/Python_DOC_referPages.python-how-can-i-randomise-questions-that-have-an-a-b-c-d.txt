<div class="post-text" itemprop="text">
<p>My aim is to have it so it can randomise questions. </p>
<p>For example, the test starts and the first question could be question 8. The word <code>Question</code> is only a comment at a moment. </p>
<p>I want it to look like this:</p>
<pre><code>What does OSI stand for?

A- Open Systematic Information
B- Open Systems Interconnect
C- Organised Stairway Interweb
D- Open Safe Internet
</code></pre>
<p>Here is the code:</p>
<pre><code>#Intro

name=input("Hello, what is your name? ")
print()
print ("Hello "+ name)
print()

valid = False
while not valid:
    ready=input("Are you ready to begin the test? (Please enter YES/NO)")
    print()

    if ready.lower() =="yes":
        print ("Excellent. Welcome to the Networking Principles test. ")
        valid = True
    elif ready.lower() =="no":
        print ("Okay, tell me when your ready. ")
    else:
        print ("Please asnwer yes or no")

count=0


if ready.lower()=="yes":
    print()
    print("Please answer each answer with A,B,C or D only. The test will now begin..."
    )


#Question 1
    print()
    print('What does OSI stand for?')
    print()
    print("A- Open Systematic Information")
    print("B- Open Systems Interconnect")
    print("C- Organised Stairway Interweb")
    print("D- Open Safe Internet")
    answer = input()

    if answer.lower() =="b":
        print ("Correct, Well Done")
        count = count + 1
    else:
        print ("Wrong Answer. The asnwer was B, OSI stands for Open Systems Interconnect")


#Question 2
    print()
    print("What is the fourth Layer of the OSI Model?")
    print()
    print("A- Transport Layer")
    print("B- Teleport Layer")
    print("C- Telecommunications Layer")
    print("D- Topology Layer")
    answer = input()

    if answer.lower() =="a":
        print ("Correct, Well Done")
        count = count + 1
    else:
        print ("Wrong Answer. Layer 4 is the Transport Layer")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could put answers in a list and call <a href="http://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow"><code>random.shuffle()</code></a> on it:</p>
<pre><code>import random

answers = [
    "Open Systematic Information",
    "Open Systems Interconnect",
    "Organised Stairway Interweb",
    "Open Safe Internet",
]
random.shuffle(answers)

for letter, answer in zip("ABCD", answers):
    print("{}- {}".format(letter, answer))
</code></pre>
<p>Each time you run it, it may produce different output e.g.:</p>
<pre><code>A- Organised Stairway Interweb
B- Open Systematic Information
C- Open Safe Internet
D- Open Systems Interconnect
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could hold all of your questions in a list of dictionaries:</p>
<pre><code>questions = [{'question': 'What does OSI stand for?',
              'correct': ['Open Systems Interconnect'],
              'incorrect': ['Open Systematic Information', 
                            'Organised Stairway Interweb',
                            'Open Safe Internet']},
             {'question': "What is the fourth Layer of the OSI Model?",
              'correct': ['Transport Layer'],
              'incorrect': ['Teleport Layer', 
                            'Telecommunications Layer', 
                            'Topology Layer']}, 
             ...]
</code></pre>
<p>Now you can give the user a given number of randomly-selected questions each time:</p>
<pre><code>import random
import string

to_answer = random.sample(questions, number_of_questions)
</code></pre>
<p>And then ask the question:</p>
<pre><code>for q_num, question in enumerate(to_answer, 1):
    print("Question {0}: {1}".format(q_num, question['question']))
</code></pre>
<p>and present the answers in a random order, storing each against the corresponding key (<code>a</code>, <code>b</code>, <code>c</code>, etc.) in <code>answer_key</code>:</p>
<pre><code>    answers = question['incorrect'] + question['correct']
    random.shuffle(answers)
    answer_key = {}
    for answer, key in zip(answers, string.ascii_lowercase):
        print("{0}: {1}".format(key, answer))
        answer_key[key] = answer
</code></pre>
<p>Take the user's input:</p>
<pre><code>    while True:
        user_answer = input().lower()
        if user_answer not in answer_key:
            print("Not a valid answer")
        else:
            break
</code></pre>
<p>And finally check whether they're correct and report back:</p>
<pre><code>    correct = question['correct']
    if answer_key[user_answer] in correct:
        print("Correct!")
    else:
        s = "Incorrect; the correct answer{0}:"
        print(s.format(" was" if len(correct) == 1 else "s were"))
        for answer in correct:
            print(answer)
</code></pre>
<p>This supports the possibility of multiple correct answers for a single question, and hard-codes as little as possible so the whole thing is configured by <code>questions</code>. That reduces repetition of code, and makes it easier to find bugs later on.</p>
<p>Example output (for <code>number_of_questions = 1</code> and <code>questions</code> as shown above):</p>
<pre><code>Question 1: What does OSI stand for?
a: Open Systematic Information
b: Open Safe Internet
c: Organised Stairway Interweb
d: Open Systems Interconnect
e
Not a valid answer
b
Incorrect; the correct answer was:
Open Systems Interconnect
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do simple one pulling information from files like so,</p>
<pre><code>while count &lt; 10:
wordnum = random.randint(0, len(questionsfile)-1)
print 'What is:  ', answersfile[wordnum], ''
options = [random.randint(0, len(F2c)-1),
    random.randint(0, len(answersfile)-1),random.randint(0, len(answersfile)-1)]
options[random.randint(0, 2)] = wordnum
print '1 -', answersfile[options[0]],
print '2 -', answersfile[options[1]],
print '3 -', answersfile[options[2]],
print '4 -', answersfile[options[3]]
answer = input('\nYou  choose number ?: ')
if options[answer-1] == wordnum:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Name <code>QuestionX</code>.
Then choose one from or shuffle these <code>QuestionX</code> randomly.</p>
<p>For example:</p>
<pre><code>import random
def Question1():
    print('Q1:What does OSI stand for?')
    answer = raw_input()
    print(answer)

def Question2():
    print("Q2:What is the fourth Layer of the OSI Model?")
    answer = raw_input()
    print(answer)

Questions = [Question1, Question2]

#Solution 1
q = random.choice(Questions)
q()

#Solution 2
for q in random.sample(Questions, len(Questions)):
    q()

#Solution 3
random.shuffle(Questions)
for q in Questions:
    q()
</code></pre>
<p>If you want to shuffle choices in the question.
You can do same above.</p>
<pre><code>def Question1():
    print('What does OSI stand for?')
    def A(): print("A- Open Systematic Information")
    def B(): print("B- Open Systems Interconnect")
    def C(): print("C- Organised Stairway Interweb")
    def D(): print("D- Open Safe Internet")
    choices = [A, B, C, D]
    random.shuffle(choices)
    for c in choices:
        c()

Question1()
</code></pre>
<p>Output:</p>
<pre><code>What does OSI stand for?
B- Open Systems Interconnect
D- Open Safe Internet
C- Organised Stairway Interweb
A- Open Systematic Information
</code></pre>
<p>As you can see in the output, it seems you shouldn't hard-code the name of choices. You should add A,B,C,D after shuffling.</p>
</div>
<span class="comment-copy">Push all quesrions to a list and if it has been chosen ranfomly, remove it from the list</span>
<span class="comment-copy">Okay good, Liking the random shuffle. But how would I then randomise the questions?</span>
<span class="comment-copy">random.shuffle() randomizes the questions. Try to run it</span>
<span class="comment-copy">Okay whilst your feedback Is good, how would I add the answers? Like what would be the example input for the example output you just gave.</span>
<span class="comment-copy">...the input is at the start of the question. It is a list of dictionaries, one for each question: <code>[{'question': questiontext, 'correct': correctanswerlist, 'incorrect': incorrectanswerlist}, ...]</code></span>
<span class="comment-copy">Im afraid I do not understand. Especially this part=   "Incorrect" : incorrectanswerlist  Do you wish me to style it like this= 'incorrect': Open Systems Interconnect.</span>
<span class="comment-copy">No, it should be a list of the answers that are not correct, <code>'incorrect': ['Open Systematic Information', ...]</code>, then the answers are in the list <code>'correct': ['Open Systems Interconnect']</code>. This is literally the first part of my answer, please look at the example there.</span>
<span class="comment-copy">There is also this function in python as well to randomize your questions without having the answers repeat in the answer option, the function is random.samlple.</span>
<span class="comment-copy">This will mean repeating the same code multiple times for each <code>Question</code> function, introducing plenty of sources of error and making maintenance more difficult, and, as you point out in your answer, also shuffles the answer letters.</span>
