<div class="post-text" itemprop="text">
<p>What are the advantages of using list over string in subprocess methods? The ones I understand so far:</p>
<ul>
<li>Security if input comes from external sources</li>
<li>Portability over different operating systems</li>
</ul>
<p>Are there any others?</p>
<p>In my particular case, I'm using subprocess library to run tests on a software. Input does not come from external source. Tests are run only on Linux. Therefore, I see no benefit of lists over strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>On POSIX, list and string arguments have different meaning and are used in different contexts.</p>
<p>You use a string argument and <code>shell=True</code> to run a shell command e.g.:</p>
<pre><code>from subprocess import check_output

output = check_output("dmesg | grep hda", shell=True)
</code></pre>
<p>A list argument is used to run a command without the shell e.g.:</p>
<pre><code>from subprocess import check_call

check_call(["ls", "-l"])
</code></pre>
<p>One exception is that <code>call("ls")</code> is equivalent to <code>call(["ls"])</code> (a command with no arguments).</p>
<p>You should use a list argument with <code>shell=False</code> (default) except in those cases when you <em>need</em> the shell so the string argument is used.</p>
<p>It is almost always an error to use a list argument and <code>shell=True</code> (the arguments are interpreted as arguments to the shell itself instead of the command in this case). Don't use it.</p>
<p>If your question: what are the advantages of <code>shell=False</code> and hence the list argument over a string argument:</p>
<ul>
<li>you don't need to escape the arguments, no shell interpolation such as word splitting, parameter expansion, command substitution occurs: what you see is what you get
<ul>
<li>support for arguments with spaces</li>
<li>support for arguments with special characters such as quotes, dollar sign, etc</li>
</ul></li>
<li>it is clear where arguments boundaries are. They are explicitely separated.</li>
<li>it is clear what program is executed: it is the first item in the list</li>
<li>an argument that is populated from an untrusted source won't be able to execute arbitrary commands</li>
<li>why run a superfluous shell process unless you need it </li>
</ul>
<p>Sometimes, it might be more convenient/readable to specify an argument as a string in the source code; <code>shlex.split()</code> could be used to convert it to a list:</p>
<pre><code>import shlex
from subprocess import check_call

cmd = shlex.split('/bin/vikings -input eggs.txt -output "spam spam.txt" '
                  '''-cmd "echo '$MONEY'"''')
check_call(cmd)
</code></pre>
<p>See <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow">the docs</a>.</p>
<hr/>
<p>On Windows, the arguments are interpreted differently. The native format is a string and the passed list is converted to a string using <code>subprocess.list2cmdline()</code> function that may not work for all Windows programs. <code>shell=True</code> is only necessary to run builtin shell commands.</p>
<p>If <code>list2cmdline()</code> creates a correct command line for your executable (different programs may use different rules for interpreting the command line) then a list argument could be used for portability and to avoid escaping separate arguments manually.</p>
</div>
<span class="comment-copy">Do you mean, why pass a list as the <code>args</code> parameter to <a href="http://docs.python.org/3/library/subprocess.html?highlight=popen#subprocess.Popen" rel="nofollow noreferrer"><code>Popen</code></a>, instead of a string? The documentation discusses how the input is treated differently depending on its type.</span>
<span class="comment-copy">Do you mean instead of using <code>shell=True</code>?  If you use that, you <i>should</i> use a string for cross platform compatibility.  Otherwise, use a list with <code>shell=False</code>.  It avoids the overhead of spawning a shell when you don't need it, but still allows you to pass commandline arguments.</span>
<span class="comment-copy">So using shell=False and parameter list as input is faster than using shell=True and string as input? So that is an additional benefit.</span>
<span class="comment-copy">I suppose I can shlex.split(cmd) instead of having to create the list by myself. I'll do that.</span>
