<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; num = int('0241034812')
&gt;&gt;&gt; print(num)
241034812
&gt;&gt;&gt; 
</code></pre>
<p>In the above code, I'm setting the variable <code>num</code> to <code>0241034812</code>; however, when I print the variable it deletes the first zero.</p>
<p>Why is this happening?</p>
</div>
<div class="post-text" itemprop="text">
<p>Integers are stored/displayed as a "normal" number, not the string value. If you want to display the number prefixed with zeroes you can do that when displaying the variable.</p>
<p>You can use the following syntax to add leading zeros to an integer:</p>
<pre><code>print "%010d" % (241034812,)
</code></pre>
<p>The example above will display the integer 241034812 with 10 digits as <code>0241034812</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I'm setting the variable 'num' to '0241034812'</p>
</blockquote>
<p>No, you're setting it to 241,034,812: an integer value, about two hundred forty million. If you want to set it to <code>'0241034812'</code>, you should use a string rather than an integer. That is, you should drop the call to <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; num = '0241034812'
&gt;&gt;&gt; print(num)
0241034812
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You wanted to print your integer to a specific zero-padded width, use string formatting. The <a href="http://docs.python.org/3/library/functions.html#format" rel="nofollow"><code>format()</code> function</a>, for example:</p>
<pre><code>&gt;&gt;&gt; num = 241034812
&gt;&gt;&gt; print(format(num, '010d'))
0241034812
</code></pre>
<p>or print the original string from which you parsed the integer in the first place.</p>
<p>Integers do not store a 'print width' or any number of leading 0 digits.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're storing some number in a format where a leading zero would be useful/significant (maybe a barcode, ISBN, or the like), you can re-add them when converting back into a string using <code>.format</code></p>
<pre><code>&gt;&gt;&gt; num = int('0241034812')
&gt;&gt;&gt; print('{:010d}'.format(num))
0241034812
</code></pre>
<p>Briefly, the first 0 in the format spec means to add leading zeros if not present to fill 10 (the 10) characters.</p>
</div>
<span class="comment-copy">What would you expect? <code>241034812</code> and <code>0241034812</code> are the same number and they have the same internal representation</span>
<span class="comment-copy">If you want to keep the zero, you have to store it as a string, not as an int. But you'll need to convert to int to actually do arithmetic.</span>
<span class="comment-copy">Python integers have <i>no</i> facility to store 'leading zeros', because it makes little sense to do so. Leading zeros have no meaning for numeric values.</span>
<span class="comment-copy">If the leading zeroes are significant, I would argue that you do not have a number. A number is a quantity. You wouldn't try to add two ISBNs, or phone numbers. Instead, you have a string, even if it's a string made up only of digits.</span>
