<div class="post-text" itemprop="text">
<p>I am new to Python and I came across a code sample using NLTK as below (in IDLE):</p>
<pre><code>&gt;&gt;&gt; letters = nltk.FreqDist('ageqwst')
&gt;&gt;&gt; words = nltk.corpus.words.words()
&gt;&gt;&gt; [word for word in words if nltk.FreqDist(word) &lt;= letters]
</code></pre>
<p>and the output generated showed words that can be made with characters in <code>letters</code>.</p>
<p>I am wondering how <code>nltk.FreqDist(word) &lt;= letters</code> part works. </p>
<p>I looked up <a href="http://nltk.googlecode.com/svn/trunk/doc/api/nltk.probability.FreqDist-class.html" rel="nofollow">NLTK documentation on FreqDist</a> and could not find a satisfying answer. I found out <code>type(letters)</code> returns an object of <code>nltk.probability.FreqDist</code> class and I would like to know how this object comparison works in Python.</p>
<p>Does Python also have an overridable method like JAVA's <code>compareTo</code>?</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://nltk.googlecode.com/svn/trunk/doc/api/nltk.probability-pysrc.html#L84" rel="nofollow"><code>FreqDist.__init__(samples)</code></a> constructor creates a <code>dict</code> where,</p>
<ul>
<li>key = sample</li>
<li>value = count (frequency) of the sample</li>
</ul>
<p>So in your case:</p>
<pre><code>nltk.FreqDist('ageqwst')
&lt;FreqDist: 'a': 1, 'e': 1, 'g': 1, 'q': 1, 's': 1, 't': 1, 'w': 1&gt;
</code></pre>
<p>Then in your <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> statement,</p>
<pre><code>[word for word in words if nltk.FreqDist(word) &lt;= letters]
</code></pre>
<p>it's doing the same thing for each of the words in the corpus so it now has two <code>FreqDist</code> <em>dictionaries</em> it can compare with your <code>if</code> clause. Given the operator <code>&lt;=</code>, it is looking for words that have a frequency less than/equal to (duh) those in the sample, <code>letters</code>. The important thing to note here is the <strong>less than</strong> piece. This allows it <em>skip</em> letters in words that our sample does not contain.</p>
<p>So if we change the operator to be explicit,</p>
<pre><code>[word for word in words if nltk.FreqDist(word) == letters]
</code></pre>
<p>it would return an empty list since there are no words in the provided corpus that have a singular occurrence of any of the samples, 'ageqwst'.</p>
<p>Take this statement for example:</p>
<pre><code>words = nltk.corpus.words.words()
foo = nltk.FreqDist('foo')

print [word for word in words if nltk.FreqDist(word) &lt;= foo]
&gt;&gt;&gt; ['f', 'foo', 'o', 'of', 'of']
</code></pre>
<p>No surprises here and we also see that out original sample ('foo') appears in the list as well so if we change our operator to be explicit,</p>
<pre><code>print [word for word in words if nltk.FreqDist(word) == foo]
&gt;&gt;&gt; ['foo']
</code></pre>
<p>we get a list of the only word that has the exact same sample distribution as ours.</p>
<p>One final example:</p>
<pre><code>words = nltk.corpus.words.words()
bar = nltk.FreqDist('bar')

print [word for word in words if nltk.FreqDist(word) &lt;= bar]
&gt;&gt;&gt; ['a', 'ar', 'b', 'ba', 'bar', 'bra', 'r', 'ra', 'rab', 'a']
</code></pre>
<p>We still see our sample ('bar') appears in the list, <strong>however</strong>, there are two other words with the same sample distribution as ours so if we,</p>
<pre><code>print [word for word in words if nltk.FreqDist(word) == bar]
&gt;&gt;&gt; ['bar', 'bra', 'rab']
</code></pre>
<p>we still get our original sample ('bar') plus two other iterations of the sample, 'bra' and 'rab'. This highlights the fact the order of the sample is irrelevant which is consistent with the behavior of python <a href="http://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow">mapping types</a>.</p>
<p>I would highly recommend you read through the <a href="http://www.nltk.org/book/" rel="nofollow">NLTK Book</a>. Yes it's long and yes it's dry at times but it goes into a lot of the theory and methodology on the different modules. So based on the level of intrigue in your question, I think you would find it insightful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically we get a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a> with each individual character as the key and the count (frequency) of that particular letter in the word as the value. So if we have:</p>
<pre><code>fdist = nltk.FreqDist('abcdefg')
</code></pre>
<p>We'll get:</p>
<pre><code>FreqDist({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1,'f': 1, 'g': 1})
</code></pre>
<p>So, every letter appears only once. Next if we use:</p>
<pre><code>wordlist = nltk.corpus.words.words()
</code></pre>
<p>We will get the whole words corpus to compare with our sample fdist dictionary. Now if write this <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehension</a>:</p>
<pre><code>[w for w in wordlist if nltk.FreqDist(w) &lt;= fdist]
</code></pre>
<p>We will get a whole bunch of words with different combinations of letters that are present in our string 'abcdefg' <strong>with each letter appearing not more than its frequency as given in the dictionary fdist</strong>. The output is of the form:</p>
<pre><code>['a','abed','ace','ad','ade','ae','age','aged','b','ba','bac','bad','bade',...]
</code></pre>
</div>
<span class="comment-copy">I think the second part of your question is answered by <a href="http://www.rafekettler.com/magicmethods.html#comparisons" rel="nofollow noreferrer">rafekettler.com/magicmethods.html#comparisons</a></span>
