<div class="post-text" itemprop="text">
<p>I have a list of lists, so a two dimensional array. I'm trying to use <code>in</code> to figure out if a string is in these arrays. So instead of doing <code>if word in wordlist:</code>, I'm using:</p>
<pre><code>for i in range(len(wordlist)):
   if word in wordlist[i]:
      wordlist[i][2] += 1 #this accounts for the frequency of a word in a file
if (i + 1 == len(wordlist) and word !=wordlist[len(wordlist)-1]):
   wordlist.append([word,linenum,1])
</code></pre>
<p>Is there a more graceful way of doing this?</p>
<p>Edit:
Sample <code>wordlist</code>:</p>
<p><code>[['civilizati', 1, 1], ['of', 1, 1], ['science', 2, 1], ['is', 2, 1], ['knowledge', 3, 1], ['is', 3, 1]]</code></p>
<p>Edit edit:</p>
<p>I think I wasn't clear in my question. If I were using a 1d list, I could do something like this:</p>
<pre><code>if(word in wordlist1d):
   print("It's here")
else:
   wordlist1d.append(word)
</code></pre>
<p>This is much more graceful than my <code>for</code> loop monstrosity. However, since wordlist is not 1d, the statement word in wordlist never returns true, even if word is in a sublist of wordlist. I'm wondering if there is a more graceful way of doing that than using that <code>for</code> loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest doing a loop with an <code>else</code> clause:</p>
<pre><code>for sublist in wordlist:
    if word == sublist[0]:  # compare directly with the relevant part of the sublist
        sublist[2] += 1
        break  # we only will match at most once, so break after finding one
else:    # this clause is run if no break was hit
    wordlist.append([word, linenum, 1])
</code></pre>
<p>A more efficient approach might be to use a dictionary mapping from words to <code>lineno, count</code> sublists. Searching a dictionary is <code>O(1)</code>, rather than <code>O(n)</code> to search your list of lists. In order to make the code work for words that are not found, you can use the <code>setdefault</code> method:</p>
<pre><code>d = {}
for word, lineno in document:
    d.setdefault(word, [lineno, 0])[1] += 1 # works whether or not word was in d before
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using an index pointer and using it to iterate over the list, just iterate over the list directly:</p>
<pre><code>for item in wordlist:
    if word in item:
        ....
</code></pre>
<p>Just to prove they're identical:</p>
<pre><code>In [2]: for item in wordlist:
   ...:     print item
   ...:
['civilizati', 1, 1]
['of', 1, 1]
['science', 2, 1]
['is', 2, 1]
['knowledge', 3, 1]
['is', 3, 1]

In [3]: for i in range(len(wordlist)):
   ...:     print wordlist[i]
   ...:
['civilizati', 1, 1]
['of', 1, 1]
['science', 2, 1]
['is', 2, 1]
['knowledge', 3, 1]
['is', 3, 1]
</code></pre>
<p>What you want - now that you've provided your data format - is</p>
<pre><code>for item in wordlist:
    if word == item[0]:
        item[2] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You would be better off using a <code>dict</code> with the words as keys, and <code>[linenum, count]</code> pairs as values.  Your entire function becomes simply:</p>
<pre><code>wordlist.setdefault(word, [linenum, 0])[1] += 1
</code></pre>
<p>If you have to turn this into a list, you can do:</p>
<pre><code>[[k] + v for k, v in wordlist.items()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for word counts in file, you can do:</p>
<pre><code>from collections import Counter
wordlist = Counter(myfile.read().split())
</code></pre>
<p>If you want to get all words in the file, you can do:</p>
<pre><code>wordlist.keys()
</code></pre>
<p>if you want to get count of partical word:</p>
<pre><code>wordlist['myword']
</code></pre>
</div>
<span class="comment-copy">Are you getting the strings which have your string as a substring? Please explain what exactly you are trying to do.</span>
<span class="comment-copy">It might help if you post a small example of your wordlist.</span>
<span class="comment-copy">Your inner lists appear to be <code>word, line, count</code> triples, so probably <code>in</code> is not needed to test (you only want to test against the <code>word</code> part).</span>
<span class="comment-copy">@Blckknght I guess using in would add to the order of the problem, wouldn't it.</span>
<span class="comment-copy">Is this legal? This is exactly what I'm looking for</span>
<span class="comment-copy">@JFA: Is what legal? The <code>else</code>? That's legal, though it may confuse folks who are more used to other languages that don't have <code>else</code> clauses on their loops. <a href="http://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">Check out the docs</a>.</span>
<span class="comment-copy">+1 That certainly is graceful.  And clean.  And pretty fast.  And easy to understand.  And is the intended way to do it :-)</span>
<span class="comment-copy">Actually, this is not compatible with the <code>if</code>statement, which depends on the output of i.</span>
<span class="comment-copy">No, it is <i>exactly</i> equivalent to your code. See above.</span>
<span class="comment-copy">@MatthewTrevor Maybe I'm mistaken then. Where is the second <code>if</code> statement in your code? I want to find out if the word is in the list, or if I have to add it. It seems like you're saying my <code>for</code> loop and your <code>for</code> loop are identical, which is true. However, after your <code>for</code> loop, there is no second case which plans for the eventuality that I have to add words to the list.</span>
<span class="comment-copy">I don't think it's doing what you think it is. What you had was effectively <code>if (True and word != last_word_in_wordList)</code>.</span>
<span class="comment-copy">You might be right. I was reading that if I change values in a dict though, it might not update correctly? This was in the pydoc. Any idea what this means?</span>
<span class="comment-copy">You can't change the keys, but you can change the values</span>
