<div class="post-text" itemprop="text">
<p>In Matlab, when you want to get a subset of values within a vector given some value conditioning, you do the following :</p>
<pre><code>negative_values = vec(vec&lt;0)
positive_values = vec(vec&gt;0)
</code></pre>
<p>I am currently using a home made function to do that in Python, but this is a bit heavy. Is there a more elegant way to proceed or a standard feature I am not aware of ? I want to be able to <strong>concisely</strong> do something like</p>
<pre><code>negative_values = val.index(val&lt;0)
positive_values = val.index(val&gt;0)
</code></pre>
<p>but obviously this won't work with <code>list.index()</code> since it is not supposed to get an expression as argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension as a filter like this</p>
<pre><code>numbers = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

negatives = [number for number in numbers if number &lt; 0]
print negatives
# [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]

positives = [number for number in numbers if number &gt;= 0]
print positives
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Alternatively, you can use the <a href="http://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> function, like this</p>
<pre><code>negatives = filter(lambda number: number &lt;  0, numbers)
positives = filter(lambda number: number &gt;= 0, numbers)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use that syntax with <code>numpy</code>:</p>
<pre><code>import numpy

a = numpy.arange(10)
--&gt; a = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

a[a &gt; 5]
--&gt; array([6, 7, 8, 9])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>numpy</code>, which is designed as an alternative of matlab:</p>
<pre><code>In [1]: import numpy as np

In [2]: a = np.arange(-5, 5)

In [3]: a
Out[3]: array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])

In [4]: a[a&gt;0]
Out[4]: array([1, 2, 3, 4])

In [5]: np.where(a&gt;0)  #used to find the indices where the condition matches
Out[5]: (array([6, 7, 8, 9]),)

In [6]: np.where(a%2==0)
Out[6]: (array([1, 3, 5, 7, 9]),)
</code></pre>
</div>
<span class="comment-copy">Lambda expressions. <code>positive_values=filter(lambda x:x&gt;0, vec)</code>. The only cleaner this gets is with numpy or changing languages. It's one of the things I wish vanilla Python had.</span>
<span class="comment-copy">This answer is nice because it only makes use of standard functions. However I think using <code>numpy</code> -- mentioned in other answers -- can be more convenient if I don't have any space or time constraint. Which happens to be the case.</span>
