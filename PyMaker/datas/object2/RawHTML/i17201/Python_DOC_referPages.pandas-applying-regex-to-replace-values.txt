<div class="post-text" itemprop="text">
<p>I have read some pricing data into a pandas dataframe the values appear as:</p>
<pre><code>$40,000*
$40000 conditions attached
</code></pre>
<p>I want to strip it down to just the numeric values.
I know I can loop through and apply regex </p>
<pre><code>[0-9]+
</code></pre>
<p>to each field then join the resulting list back together but is there a not loopy way?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could remove all the non-digits using <code>re.sub()</code>:</p>
<pre><code>value = re.sub(r"[^0-9]+", "", value)
</code></pre>
<p><a href="http://regex101.com/r/yS7lG7">regex101 demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#vectorized-string-methods" rel="noreferrer"><code>Series.str.replace</code></a>:</p>
<pre><code>import pandas as pd

df = pd.DataFrame(['$40,000*','$40000 conditions attached'], columns=['P'])
print(df)
#                             P
# 0                    $40,000*
# 1  $40000 conditions attached

df['P'] = df['P'].str.replace(r'\D+', '').astype('int')
print(df)
</code></pre>
<p>yields</p>
<pre><code>       P
0  40000
1  40000
</code></pre>
<p>since <code>\D</code> matches any <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="noreferrer">non-decimal digit</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use pandas' replace method; also you may want to keep the thousands separator ',' and the decimal place separator '.'</p>
<pre><code>import pandas as pd

df = pd.DataFrame(['$40,000.32*','$40000 conditions attached'], columns=['pricing'])
df['pricing'].replace(to_replace="\$([0-9,\.]+).*", value=r"\1", regex=True, inplace=True)
print(df)
pricing
0  40,000.32
1      40000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need regex for this. This should work:</p>
<p><code>df['col'] = df['col'].astype(str).convert_objects(convert_numeric=True)</code></p>
</div>
<span class="comment-copy"><code>\D+</code> will be the smallest :-P</span>
<span class="comment-copy">whats the best way to apply it to the column in the dataframe? so I have df['pricing'] do I just loop row by row?</span>
<span class="comment-copy">@KillerSnail I don't have much experience with pandas, but I think that you should be able to use it like this: <code>df['pricing'] = re.sub(r"[^0-9]+", "", df['pricing'])</code>.</span>
<span class="comment-copy">ok I think I got it for pandas use: df['Pricing'].replace(to_replace='[^0-9]+', value='',inplace==True,regex=True) the .replace method uses re.sub</span>
<span class="comment-copy">caution - stripping all non digit symbols would remove negative sign decimal point, and join together unrelated numbers, e.g. "$8.99 but $2 off with coupon" becomes "8992", "$5.99" becomes "499", "$5" becomes "5".</span>
<span class="comment-copy">Just the answer I was looking for.  Thanks!!</span>
