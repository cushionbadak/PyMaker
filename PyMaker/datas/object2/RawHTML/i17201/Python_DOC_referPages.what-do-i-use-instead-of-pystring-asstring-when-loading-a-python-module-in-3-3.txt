<div class="post-text" itemprop="text">
<p>I am trying to load a function from python in one of my c++ programs using this function</p>
<pre><code>char * pyFunction(void)
{
    char *my_result = 0;
    PyObject *module = 0;
    PyObject *result = 0;
    PyObject *module_dict = 0;
    PyObject *func = 0;
    PyObject *pArgs = 0;

    module = PyImport_ImportModule("testPython");
    if (module == 0)
    {
        PyErr_Print();
        printf("Couldn't find python module");
    }
    module_dict = PyModule_GetDict(module); 
    func = PyDict_GetItemString(module_dict, "helloWorld"); 

    result = PyEval_CallObject(func, NULL); 
    //my_result = PyString_AsString(result); 
    my_result = strdup(my_result);
    return my_result;
}
</code></pre>
<p>What should I use instead of PyString_AsString?</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on the returned type from your <code>helloWorld()</code> function, it
could vary so it's best to check it.</p>
<p>To handle a returned <code>str</code> (Python 2 <code>unicode</code>), then you will need to
encode it. The encoding will depend on your use case but I'm going to
use UTF-8:</p>
<pre><code>if (PyUnicode_Check(result)) {
    PyObject * temp_bytes = PyUnicode_AsEncodedString(result, "UTF-8", "strict"); // Owned reference
    if (temp_bytes != NULL) {
        my_result = PyBytes_AS_STRING(temp_bytes); // Borrowed pointer
        my_result = strdup(my_result);
        Py_DECREF(temp_bytes);
    } else {
        // TODO: Handle encoding error.
    }
}
</code></pre>
<p>To handle a returned <code>bytes</code> (Python 2 <code>str</code>), then you can get the
string directly:</p>
<pre><code>if (PyBytes_Check(result)) {
    my_result = PyBytes_AS_STRING(result); // Borrowed pointer
    my_result = strdup(my_result);
}
</code></pre>
<p>Also, if you receive a non-string object, you can convert it
using <a href="http://docs.python.org/3/c-api/object.html#c.PyObject_Repr" rel="nofollow noreferrer">PyObject_Repr()</a>, <a href="http://docs.python.org/3/c-api/object.html#c.PyObject_ASCII" rel="nofollow noreferrer">PyObject_ASCII()</a>, <a href="http://docs.python.org/3/c-api/object.html#c.PyObject_Str" rel="nofollow noreferrer">PyObject_Str()</a>, or <a href="http://docs.python.org/3/c-api/object.html#c.PyObject_Bytes" rel="nofollow noreferrer">PyObject_Bytes()</a>.</p>
<p>So in the end you probably want something like:</p>
<pre><code>if (PyUnicode_Check(result)) {
    // Convert string to bytes.
    // strdup() bytes into my_result.
} else if (PyBytes_Check(result)) {
    // strdup() bytes into my_result.
} else {
    // Convert into your favorite string representation.
    // Convert string to bytes if it is not already.
    // strdup() bytes into my_result.
}
</code></pre>
</div>
<span class="comment-copy">Probably <a href="http://docs.python.org/3.3/c-api/bytes.html#PyBytes_AsString" rel="nofollow noreferrer"><code>PyBytes_AsString</code></a>. If that's a unicode string then you should first decide which encoding do you want to use and then encode it with <a href="http://docs.python.org/3.3/c-api/unicode.html#PyUnicode_Encode" rel="nofollow noreferrer"><code>PyUnicode_Encode</code></a></span>
<span class="comment-copy">You should also use <a href="http://docs.python.org/3/c-api/object.html?highlight=pyobject_call#c.PyObject_CallObject" rel="nofollow noreferrer"><code>PyObject_CallObject(func, NULL)</code></a> instead of <code>PyEval_CallObject()</code>.</span>
<span class="comment-copy">Here is my python function: def helloWorld():     returnData =  "Hello"     return returnData</span>
<span class="comment-copy">@bbdude95 If that's the case, then the type of <code>result</code> will be a <code>str</code> (<code>PyUnicode</code>) so it's safe to use just that example. But in a real world scenario, it would be best to allow for different types.</span>
<span class="comment-copy">I see some problems. There are quotes around the resultant string and also <code>\n</code> is converted to <code>\\n</code>.</span>
<span class="comment-copy">@ar2015 That's what <code>PyObject_Repr()</code> does (<code>repr()</code> on the Python side). You likely want <code>PyObject_Str()</code> or <code>PyObject_Bytes()</code>.</span>
<span class="comment-copy">@ar2015 Yes, doing the same conversion but using a different function such as <code>PyObject_Str()</code> (since this conversion gives you unicode, you'll have to encode it to bytes first as seen in my first example).</span>
