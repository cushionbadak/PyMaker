<div class="post-text" itemprop="text">
<p>So basically I have a program which can create a users username and password in a document and search for the password used with the username that is input by the person using the program.</p>
<p>For example:
The programs asks me to input a username I enter: '13'.
Under 13 in the text document is 'sadfsdfsdf'.
I want the program to skip to below the 'Username: 13' and read and print 'Password: sadfsdfsdf'.</p>
<p>note that I have multiple usernames and passwords In the .txt file</p>
<p>u = 'Username: '</p>
<p>Thanks in advance!</p>
<pre><code>def SearchRecordProgram():
    while True:
                    user_search = input("Please enter the username you wish to see the password for: ")
                    full_user = u + user_search
                    if full_user in open('User_Details.txt').read():
                            print(" ")
                            print ("Username found in our records")
                            print(" ")
                            print(full_user)
                            break
                    else:
                            print("Username entered does not match our records")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you want to open a file, you should almost always use the <a href="https://stackoverflow.com/questions/1369526/what-is-the-python-keyword-with-used-for"><code>with</code></a> statement:</p>
<pre><code>with open('User_Details.txt') as read_file:
    # Do reading etc. with `read_file` variable
</code></pre>
<p>This will ensure that any errors are being handled correctly and the file is not left open.</p>
<p>Now that the file is open, we need to loop through each line until we find one that matches our username. I hope you know how <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer"><code>for</code> loop</a> works:</p>
<pre><code>username = 'Username: 13'  # Get this however you want
with open('User_Details.txt') as read_file:
    for line in read_file:
        line = line.strip()  # Removes any unnecessary whitespace characters
        if line == username:
            # We found the user! Next line is password
</code></pre>
<p>And we need to get the next line which contains the password. There are many ways to get the next line, but one simple way is to use the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> function which simply gets us the next element from an iterable (the next line from a file in this case):</p>
<pre><code>username = 'Username: 13'
with open('User_Details.txt') as read_file:
    for line in read_file:
        line = line.strip()
        if line == username:
            password = next(read_file)
            break  # Ends the for loop, no need to go through more lines
</code></pre>
<p>Now you have a password and an username, and you can do whatever you want with them. It's often a good idea to have the inputs and outputs outside of your program's logic, so don't print the password right inside the <code>for</code> loop, but instead just receive it there and then do the printing outside.</p>
<p>You might even wanna turn the whole search logic into a function:</p>
<pre><code>def find_next_line(file_handle, line):
    """Finds the next line from a file."""
    for l in file_handle:
        l = l.strip()
        if l == line:
            return next(file_handle)


def main():
    username = input("Please enter the username you wish to see the password for: ")
    username = 'Username: ' + username
    with open('User_Details.txt') as read_file:
        password = find_next_line(read_file, username)
    password = password[len('Password: '):]
    print("Password '{0}' found for username '{1}'".format(password, username))

if __name__ == '__main__':
    main()
</code></pre>
<p>Finally, it's absolutely insane to store <em>anything</em> in this format (not to mention password security stuff, but I get you're just learning stuff), why not do something like:</p>
<pre><code>username:password
markus:MarkusIsHappy123
BOB:BOB'S PASSWORD
</code></pre>
<p>This could then easily be converted into a dict:</p>
<pre><code>with open('User_Details.txt') as read_file:
    user_details = dict(line.strip().split(':') for line in read_file)
</code></pre>
<p>And now to get a password for an username, you'd do:</p>
<pre><code>username = input('Username: ')
if username in user_details:
    print('Password:', user_details[username])
else:
    print('Unknown user')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, imagining your file is like so:</p>
<pre><code>Username : 13
Password : sadfsdfsdf
Username : 15
Password : Lalalala
</code></pre>
<p>You can parse it (with regular expressions) like so:</p>
<pre><code>import re  #  regular expression module
regex = re.compile("Username :(.*)\nPassword :(.*)")

# read text from file
with open(filePath,'r') as f:
    text = f.read() 

u_pass = regex.findall(text)
# [(' 13', ' sadfsdfsdf'), (' 15', ' Lalalala')]

user_dict = {u:password for u,password in u_pass}
#  {' 13': ' sadfsdfsdf', ' 15': ' Lalalala'}
</code></pre>
<p>Now you can get the password of someone by asking for the password of that user :</p>
<pre><code># given username and password_input

if username in user_dict and user_dict[username] == password_input:
# if username exists and password okay
    print "Authentication succeeded."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe not the pretties, but something like this will work: </p>
<pre><code>with open(users_file, "r") as f:
    lines = f.read()

def get_password(user_id):
    entries = iter(lines.splitlines())
    for entry in entries:
        if(entry.startswith("{}:{}".format(prefix, user_id))):
            return next(entries)

print "Password:", get_password("13")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def SearchRecordProgram():
    while True:
        user_search = input("Please enter the username &gt; ")

        file = open('User_Details.txt')
        usernames = file.readlines()  # Read file into list
        file.close()

        if user_search in usernames: # Username exists
            print ('Found Username')
            password = usernames[usernames.index(user_search)+1]
            print ('Password is: ' + password)   

            break  # Exit loop

         else:  # Username doesn't exist
             print("Username entered does not match our records")
</code></pre>
<p>Note that this will not work if a password happens to be a username, e.g:</p>
<pre><code>user1
password1
user2
user3  # This is the password for user3
user3
password3
</code></pre>
<p>If you search for "user3" this code will output "user3" as the password for "user3" because it finds the first instance of "user3" (line 4) and then looks to the next line (line 5), which is the next username.</p>
<p>Even worse, if "user3" is the last line in the file, it will end with an error because there are no more lines. You could add a check that the index of the found username is even (i.e. index 0, 2, 4, 8) with this code:</p>
<pre><code>if not usernames.index(user_search) % 2:  # Checks the remainder after / by 2.
                                          # If it's 0 then it's an even index.
    password = usernames[usernames.index(user_search)+1]
    print ('Password is: ' + password)   
</code></pre>
<p>but there isn't much you can do if this happens.</p>
<p>However, you could manipulate the file of usernames to only have usernames like this:</p>
<pre><code>lst = [0, 1, 2, 3, 4, 5, 6, 7]
print (lst[0::2])
</code></pre>
<p>which prints</p>
<pre><code>[0, 2, 4, 6]
</code></pre>
<p>So the code could be changed to this:</p>
<pre><code>def SearchRecordProgram():
    while True:
        user_search = input("Please enter the username &gt; ")

        usernames = open('User_Details.txt').readlines()  # Read file into list

        if user_search in usernames[0::2]: # Username exists
            print ('Found Username')
            password = usernames[1::2][usernames[0::2]].index(user_search)]
            print ('Password is: ' + password)   

            break  # Exit loop

         else:  # Username doesn't exist
             print("Username entered does not match our records")
</code></pre>
<p>Here is a breakdown</p>
<pre><code>password = usernames[1::2]  # Gets the odd items (passwords)
                          [  # Get index item. The index returned from searching
                             # the usernames will be the same as the index needed
                             # for the password, as looking at just the odd items:
                             # [0, 2, 4, 6]
                             # [1, 3, 5, 7] - even has the same index as next odd.
                           usernames[0::2] # Gets even items (usernames)
                                          ].index(user_search)]
                                          # Only searches the usernames. This
                                          # means passwords being the same is not
                                          # an issue - it doesn't search them
</code></pre>
</div>
<span class="comment-copy">Please say this is an exercise not for something that will be used properly?</span>
<span class="comment-copy">No im just trying to get to grips with python</span>
<span class="comment-copy">Okay, phew! Not the way to store passwords if you're doing it professionally btw :P</span>
<span class="comment-copy">where does the variable<code>u</code> come from?</span>
<span class="comment-copy">also, please tell me you do not want to reload the whole file on every search (without closing it BTW)</span>
<span class="comment-copy">Could you put this into one code block please, note that security isnt an issue with this project</span>
<span class="comment-copy">ok no problem thank you very much for the help</span>
<span class="comment-copy">@NodeMN So you're asking me if I can do the whole program for you? I can help, but SO is not a code writing service. Besides, I already did write you the code, you should be able to do the rest...</span>
<span class="comment-copy">@NodeMN Is there something in particular that you didn't understand?</span>
<span class="comment-copy">No its just knowing what order to put it in. Im new at python.</span>
<span class="comment-copy">This leaves the file open and stores the whole file into memory (which probably isn't an issue, but could easily be avoided regardless).</span>
<span class="comment-copy">@MarkusMeskanen since updated, thanks.</span>
