<div class="post-text" itemprop="text">
<p>There appears to be two different ways to convert a string to bytes, as seen in the answers to <a href="https://stackoverflow.com/questions/5471158/typeerror-str-does-not-support-the-buffer-interface">TypeError: 'str' does not support the buffer interface</a></p>
<p>Which of these methods would be better or more Pythonic? Or is it just a matter of personal preference?</p>
<pre><code>b = bytes(mystring, 'utf-8')

b = mystring.encode('utf-8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the docs for <code>bytes</code>, it points you to <a href="https://docs.python.org/3/library/functions.html#func-bytearray" rel="noreferrer"><code>bytearray</code></a>:</p>
<blockquote>
<p>bytearray([source[, encoding[, errors]]])</p>
<p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.</p>
<p>The optional source parameter can be used to initialize the array in a few different ways:</p>
<p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().</strong></p>
<p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.</strong></p>
<p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.</strong></p>
<p><strong>If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.</strong></p>
<p><strong>Without an argument, an array of size 0 is created.</strong></p>
</blockquote>
<p>So <code>bytes</code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense. </p>
<p>For  encoding a string, I think that <code>some_string.encode(encoding)</code> is more Pythonic than using the constructor, because it is the most self documenting -- "take this string and encode it with this encoding" is clearer than <code>bytes(some_string, encoding)</code> -- there is no explicit verb when you use the constructor.</p>
<p><strong>Edit:</strong> I checked the Python source. If you pass a unicode string to <code>bytes</code> using CPython, it calls <a href="http://hg.python.org/cpython/file/5a12416890c0/Objects/unicodeobject.c#l2328" rel="noreferrer">PyUnicode_AsEncodedString</a>, which is the implementation of <code>encode</code>; so you're just skipping a level of indirection if you call <code>encode</code> yourself.</p>
<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)</code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)</code> and symmetry is nice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its easier than it is thought:</p>
<pre><code>my_str = "hello world"
my_str_as_bytes = str.encode(my_str)
type(my_str_as_bytes) # ensure it is byte representation
my_decoded_str = my_str_as_bytes.decode()
type(my_decoded_str) # ensure it is string representation
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <em>absolutely</em> best way is neither of the 2, but the 3rd. The first parameter to <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="noreferrer"><code>encode</code></a> <em>defaults to</em> <code>'utf-8'</code> ever since Python 3.0. Thus the best way is </p>
<pre><code>b = mystring.encode()
</code></pre>
<p>This will also be faster, because the default argument results not in the string <code>"utf-8"</code> in the C code, but <em><code>NULL</code></em>, which is <em>much</em> faster to check!</p>
<p>Here be some timings:</p>
<pre><code>In [1]: %timeit -r 10 'abc'.encode('utf-8')
The slowest run took 38.07 times longer than the fastest. 
This could mean that an intermediate result is being cached.
10000000 loops, best of 10: 183 ns per loop

In [2]: %timeit -r 10 'abc'.encode()
The slowest run took 27.34 times longer than the fastest. 
This could mean that an intermediate result is being cached.
10000000 loops, best of 10: 137 ns per loop
</code></pre>
<p>Despite the warning the times were very stable after repeated runs - the deviation was just ~2 per cent.</p>
<hr/>
<p>Using <code>encode()</code> without an argument is not Python 2 compatible, as in Python 2 the default character encoding is <em>ASCII</em>.</p>
<pre><code>&gt;&gt;&gt; 'äöä'.encode()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply convert string to bytes using:</p>
<p><code>a_string.encode()</code></p>
<p>and you can simply convert bytes to string using:</p>
<p><code>some_bytes.decode()</code></p>
<p><code>bytes.decode</code> and <code>str.encode</code> have <code>encoding='utf-8'</code> as default value.</p>
<p>The following functions (taken from <a href="https://rads.stackoverflow.com/amzn/click/com/0134034287" rel="nofollow noreferrer">Effective Python</a>) might be useful to convert <code>str</code> to <code>bytes</code> and <code>bytes</code> to <code>str</code>:</p>
<pre><code>def to_bytes(bytes_or_str):
    if isinstance(bytes_or_str, str):
        value = bytes_or_str.encode() # uses 'utf-8' for encoding
    else:
        value = bytes_or_str
    return value # Instance of bytes


def to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes):
        value = bytes_or_str.decode() # uses 'utf-8' for encoding
    else:
        value = bytes_or_str
    return value # Instance of str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>so_string = 'stackoverflow'
so_bytes = so_string.encode( )
</code></pre>
</div>
<span class="comment-copy">Use encode/decode is more common, and perhaps clearer.</span>
<span class="comment-copy">@LennartRegebro I dismiss. Even if it's more common, reading "bytes()" i know what its doing, while encode() don't make me feel it is encoding to bytes.</span>
<span class="comment-copy">@erm3nda Which is a good reason to use it until it <i>does</i> feel like that, then you are one step closer to Unicode zen.</span>
<span class="comment-copy">@LennartRegebro I feel good enough to just use <code>bytes(item, "utf8")</code>, as explicit is better than implicit, so... <code>str.encode( )</code> defaults silently to bytes, making you more Unicode-zen but less Explicit-Zen. Also "common" is not a term that i like to follow. Also, <code>bytes(item, "utf8")</code>, is more like the <code>str()</code>, and <code>b"string"</code> notations. My apologies if i am so noob to understand your reasons. Thank you.</span>
<span class="comment-copy">@erm3nda if you read the accepted answer you can see that <code>encode()</code> doesn't call <code>bytes()</code>, it's the other way around. Of course that's not immediately obvious which is why I asked the question.</span>
<span class="comment-copy">+1 for having a good argument and quotes from the python docs. Also <code>unicode_string.encode(encoding)</code> matches nicely with <code>bytearray.decode(encoding)</code> when you want your string back.</span>
<span class="comment-copy"><code>bytearray</code> is used when you need a mutable object. You don't need it for simple <code>str</code>↔<code>bytes</code> conversions.</span>
<span class="comment-copy">@EugeneHomyakov This has nothing to do with <code>bytearray</code> except that the docs for <code>bytes</code> don't give details, they just say "this is an immutable version of <code>bytearray</code>" so I have to quote from there.</span>
<span class="comment-copy">Just a cautionary note from <i>Python in a Nutshell</i> about <code>bytes</code>: Avoid using the bytes type as a function with an integer argument. In v2 this returns the integer converted to a (byte)string because bytes is an alias for str, while in v3 it returns a bytestring containing the given number of null characters. So, for example, instead of the v3 expression bytes(6), use the equivalent b'\x00'*6, which seamlessly works the same way in each version.</span>
<span class="comment-copy">He knows how to do it, he's just asking which way is better. Please re-read the question.</span>
<span class="comment-copy">FYI: str.decode(bytes) didn't work for me (Python 3.3.3 said "type object 'str' has no attribute 'decode'") I used bytes.decode() instead</span>
<span class="comment-copy">@Mike: use <code>obj.method()</code> syntax instead of <code>cls.method(obj)</code> syntax i.e., use <code>bytestring = unicode_text.encode(encoding)</code> and <code>unicode_text = bytestring.decode(encoding)</code>.</span>
<span class="comment-copy"><code>str.encode(my_str)</code> really should be <code>my_str.encode()</code>...</span>
<span class="comment-copy">... i.e. you're needlessly making an unbound method, and then calling it passing the <code>self</code> as the first argument</span>
<span class="comment-copy">There's only a sizable difference here because (a) the string is pure ASCII, meaning the internal storage is already the UTF-8 version, so looking up the codec is almost the only cost involved at all, and (b) the string is tiny, so even if you did have to encode, it wouldn't make much difference. Try it with, say, <code>'\u00012345'*10000</code>. Both take 28.8us on my laptop; the extra 50ns is presumably lost in the rounding error. Of course this is a pretty extreme example—but <code>'abc'</code> is just as extreme in the opposite direction.</span>
<span class="comment-copy">@abarnert true, but even then, there is no reason pass the argument as a string.</span>
<span class="comment-copy">If you read the whole question again you'll see that this doesn't really answer it.</span>
<span class="comment-copy">Although this code may help to solve the problem, it doesn't explain <i>why</i> and/or <i>how</i> it answers the question. Providing this additional context  would significantly improve its long-term value. Please <a href="https://stackoverflow.com/posts/43236536/edit">edit</a> your answer to add explanation, including what limitations and assumptions apply.</span>
<span class="comment-copy">As explained at <a href="https://blog.startifact.com/posts/older/what-is-pythonic.html" rel="nofollow noreferrer">blog.startifact.com/posts/older/what-is-pythonic.html</a>, "Pythonic" code is brief and uses standard language idioms; because the code I present in the example is the simplest and most direct way of accomplishing the task, as working coder that's what I'd like to see. My traditional assumption for stack overflow <b>had been</b> that participants are working programmers helping each other solve problems, rather than nit picking about stupid stuff. Lesson learned.</span>
<span class="comment-copy">I think stackoverflow has grow so much then ... :-) it's unvaluable resource for learning. Even if the main target are programmers... u was SOO lazy on your reply. You even wrote more on your explanation comment than on the answer itself :-)</span>
<span class="comment-copy">One day when the internet becomes sentient and starts coding itself it will learn from S.O. Even with amazing semantic understanding and natural language processing it still won't be able to learn from answers like this. Maybe that's a good thing.</span>
