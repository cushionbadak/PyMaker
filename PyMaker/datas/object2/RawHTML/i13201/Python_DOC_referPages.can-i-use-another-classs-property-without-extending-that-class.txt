<div class="post-text" itemprop="text">
<h2>Breif:</h2>
<p>I have two classes that contain some pairs of identical property blocks.
These classes share a common ancestor, but also have siblings that do not 
need these properties.</p>
<p>I would like to not duplicate the property code blocks.</p>
<h2>If I were using Getters:</h2>
<p>With Getter's my approach would be to call the authoritative method in another class:</p>
<pre><code># in ConcreteFooz.baz_per_bar:
def baz_per_bar(self):
    return ConcreteFoo.baz_per_bar(self)
</code></pre>
<h2>But I'm not using getters ,</h2>
<p>As @properties seem far more suitable for my needs. 
When I tried:</p>
<pre><code># in ConcreteFooz.baz_per_bar:
def baz_per_bar(self):
    return ConcreteFoo.baz_per_bar(self)
</code></pre>
<p>I get back:</p>
<pre><code>*** TypeError: 'property' object is not callable
</code></pre>
<p>So;</p>
<h1>Can I use another class's property without extending that class?</h1>
<hr/>
<h3>Example Code</h3>
<p>So that we refere to things commonly:</p>
<pre><code>import itertools

class MyBaseClass(object):
    pass

class ConcreteFoo(MyBaseClass):
    @property
    def baz_per_bar(self):
        """Returns as dict of {baz: list bar}"""
        # do baz lookup
        # do bar lookup
        # associcate and return
        return my_baz_per_bar

    @property
    def baz_chain(self):
        """Flattens baz_per_bar into baz's"""
        return itertools.chain(*self._baz_chain.values())

class ConcreteFooz(MyBaseClass):
    @property
    def baz_per_bar(self):
        """Returns as dict of {baz: list bar}"""
        # do baz lookup
        # do bar lookup
        # associcate and return
        return my_baz_per_bar

    @property
    def baz_chain(self):
        """Flattens baz_per_bar into baz's"""
        return itertools.chain(*self._baz_chain.values())

class ConcreteJaz(MyBaseClass):
    pass
    # Does not need property lookup
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use another class's property without extending that class. Consider this program:</p>
<pre><code>import itertools

class MyBaseClass(object):
    pass

class ConcreteFoo(MyBaseClass):
    def __init__(self):
        self.my_baz_per_bar = { 'A' : ['apple', 'aardvark'] }

    @property
    def baz_per_bar(self):
        """Returns as dict of {baz: list bar}"""
        # do baz lookup
        # do bar lookup
        # associcate and return
        return self.my_baz_per_bar

    @property
    def baz_chain(self):
        """Flattens baz_per_bar into baz's"""
        return itertools.chain(*self._baz_chain.values())

class ConcreteFooz(MyBaseClass):
    def __init__(self):
        self.my_baz_per_bar = { 'Z' : ['zero', 'zebra'] }

    baz_per_bar = ConcreteFoo.baz_per_bar
    baz_chain = ConcreteFoo.baz_chain

class ConcreteJaz(MyBaseClass):
    pass
    # Does not need property lookup

print ConcreteFoo().baz_per_bar
print ConcreteFooz().baz_per_bar
</code></pre>
<p>Alternatively, consider this fragment:</p>
<pre><code>    @property
    def baz_per_bar(self):
        return ConcreteFoo.baz_per_bar.fget(self)
</code></pre>
<p>Note that I <em>did</em> modify <code>ConcreteFoo</code> from your example, but only to fix the <code>NameError</code> in it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not quite sure. Does mixin will suit your need?</p>
<pre><code>import itertools

class MyBaseClass(object):
    pass

class BazMixin():
    @property
    def baz_per_bar(self):
        """Returns as dict of {baz: list bar}"""
        # do baz lookup
        # do bar lookup
        # associcate and return
        return my_baz_per_bar

    @property
    def baz_chain(self):
        """Flattens baz_per_bar into baz's"""
        return itertools.chain(*self._baz_chain.values())


class ConcreteFoo(MyBaseClass, BazMixin):
    pass

class ConcreteFooz(MyBaseClass, BazMixin):
    pass

class ConcreteJaz(MyBaseClass):
    pass
    # Does not need property lookup
</code></pre>
</div>
<span class="comment-copy">I'm not clear why <code>ConcreteJaz</code> doesn't just use the normal inheritance from <code>MyBaseClass</code></span>
<span class="comment-copy">@ChadS. I ask this question because I was surprised to find something in python that I couldn't do. Eg, Use a property in more than one context. And I want to know if this is truly a limitation or not. There are clearly other ways to skin this cat, Its a very simple problem to solve with inheritance.</span>
<span class="comment-copy">But I don't even understand what you're trying to accomplish here. You can't just slap the @ syntax onto a method and have it know what you want it to do. That's not <a href="https://docs.python.org/3/whatsnew/2.4.html?highlight=decorator#pep-318-decorators-for-functions-and-methods" rel="nofollow noreferrer">how decorators work..</a></span>
<span class="comment-copy">@ChadS. in the small snippets I was using @ to refer to the snippet's parent, probably a poor choice, I've updated them to just be comments.</span>
<span class="comment-copy">I don't wish to accept an alternate solution, as I'm not asking for an alternate solution. If I wasn't interested in the exact question asked, i would have worked around this using known working patterns, like Mixins. <a href="http://stackoverflow.com/questions/33310592/can-i-use-another-classs-property-without-extending-that-class?noredirect=1#comment54420950_33310592">see this comment</a></span>
<span class="comment-copy">@ThorSummoner if you had to reference a comment you made, then you probably didn't write the question particularly accurately and didn't bother to fix it. There's no reason to be snippy about your lack of clarity.</span>
