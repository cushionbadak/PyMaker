<div class="post-text" itemprop="text">
<p>Hello i am not very familiar with programming and found Stackoverflow while researching my task. I want to do natural language processing on a .csv file that looks like this and has about 15.000 rows</p>
<pre><code>    ID | Title        | Body
    ----------------------------------------
    1  | Who is Jack? | Jack is a teacher... 
    2  | Who is Sam?  | Sam is a dog.... 
    3  | Who is Sarah?| Sarah is a doctor...
    4  | Who is Amy?  | Amy is a wrestler... 
</code></pre>
<p>I want to read the .csv file and do some basic NLP operations and write the results back in a new or in the same file. After some research python and nltk seams to be the technologies i need. (i hope thats right). After tokenizing i want my .csv file to look like this</p>
<pre><code>    ID | Title                 | Body
    -----------------------------------------------------------
    1  | "Who" "is" "Jack" "?" | "Jack" "is" "a" "teacher"... 
    2  | "Who" "is" "Sam" "?"  | "Sam" "is" "a" "dog".... 
    3  | "Who" "is" "Sarah" "?"| "Sarah" "is" "a" "doctor"...
    4  | "Who" "is" "Amy" "?"  | "Amy" "is" "a" "wrestler"... 
</code></pre>
<p>What i have achieved after a day of research and putting pieces together looks like this</p>
<pre><code>    ID | Title                 | Body
    ----------------------------------------------------------
    1  | "Who" "is" "Jack" "?" | "Jack" "is" "a" "teacher"... 
    2  | "Who" "is" "Sam" "?"  | "Jack" "is" "a" "teacher"...
    3  | "Who" "is" "Sarah" "?"| "Jack" "is" "a" "teacher"...
    4  | "Who" "is" "Amy" "?"  | "Jack" "is" "a" "teacher"... 
</code></pre>
<p>My first idea was to read a specific cell in the .csv ,do an operation and write it back to the same cell. And than somehow do that automatically on all rows. Obviously i managed to read a cell and tokenize it. But i could not manage to write it back in that specific cell. And i am far away from "do that automatically to all rows". I would appreciate some help if possible.</p>
<p>My code:</p>
<pre><code>    import csv
    from nltk.tokenize import word_tokenize 

    ############Read CSV File######################
    ########## ID , Title, Body#################### 

    line_number = 1 #line to read (need some kind of loop here)
    column_number = 2 # column to read (need some kind of loop here)
    with open('test10in.csv', 'rb') as f:
        reader = csv.reader(f)
        reader = list(reader)
        text = reader[line_number][column_number] 


        stringtext = ''.join(text) #tokenizing just work on strings 
        tokenizedtext = (word_tokenize(stringtext))
        print(tokenizedtext)

    #############Write back in same cell in new CSV File######

    with open('test11out.csv', 'wb') as g:
        writer = csv.writer(g)
        for row in reader:
            row[2] = tokenizedtext
            writer.writerow(row)
</code></pre>
<p>I hope i asked the question correctly and someone can help me out. </p>
</div>
<div class="post-text" itemprop="text">
<p>The pandas library will make all of this much easier.</p>
<p>pd.read_csv() will handle the input much more easily, and you can apply the same function to a column using pd.DataFrame.apply()</p>
<p>Here's a quick example of how the key parts you'll want work. In the .applymap() method, you can replace my lambda function with word_tokenize() to apply that across all elements instead.</p>
<pre><code>In [58]: import pandas as pd

In [59]: pd.read_csv("test.csv")
Out[59]:
                     0                          1
0  wrestler Amy dog is         teacher dog dog is
1      is wrestler ? ?  Sarah doctor teacher Jack
2        a ? Sam Sarah           is dog Sam Sarah
3       Amy a a doctor             Amy a Amy Jack

In [60]: df = pd.read_csv("test.csv")

In [61]: df.applymap(lambda x: x.split())
Out[61]:
                          0                               1
0  [wrestler, Amy, dog, is]         [teacher, dog, dog, is]
1      [is, wrestler, ?, ?]  [Sarah, doctor, teacher, Jack]
2        [a, ?, Sam, Sarah]           [is, dog, Sam, Sarah]
3       [Amy, a, a, doctor]             [Amy, a, Amy, Jack]
</code></pre>
<p>Also see: <a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#row-or-column-wise-function-application" rel="nofollow">http://pandas.pydata.org/pandas-docs/stable/basics.html#row-or-column-wise-function-application</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You first need to parse your file and then process (tokenize, etc.) each field separately.</p>
<p>If our file really looks like your sample, I wouldn't call it a CSV. You <em>could</em> parse it with the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module, which is specifically for reading all sorts of CSV files: Add <code>delimiter="|"</code> to the arguments of <code>csv.reader()</code>, to separate your rows into cells. (And don't open the file in binary mode.)  But your file is easy enough to parse directly:</p>
<pre><code>with open('test10in.csv', encoding="utf-8") as fp:  # Or whatever encoding is right
    content = fp.read()
    lines = content.splitlines()
    allrows = [ [ fld.strip() for fld in line.split("|") ] for line in lines ]

    # Headers and data:
    headers = allrows[0]
    rows = allrows[2:]
</code></pre>
<p>You can then use <code>nltk.word_tokenize()</code> to tokenize each field of <code>rows</code>, and go on from there.</p>
</div>
<span class="comment-copy">A database would be much easier, or using a format such as json or xml for the tagged corpus. This will make it easier if you get into pos-tagging or other markers also</span>
<span class="comment-copy">I don't see that the storage format has anything to do with pos-tagging. The data needs to be read and parsed, then pos-tagging of the cells is exactly the same.</span>
<span class="comment-copy">thx for the fast answer. i will try this out and let you know my results :)</span>
<span class="comment-copy">Pandas helped me to read and and write a .csv and do some operations on it. Still having some other issues but i guess i have to open a new question for that.</span>
<span class="comment-copy">my visualization for the table was not good i think, it is a comma seperated table, but i guess it will work the same. Thx for your answer to, i will try that out. Very kind people here. Have to stick around here more often :)</span>
<span class="comment-copy">@sim, PLEASE take this lesson to heart: Giving inaccurate information in your question wastes everyone's time. You need the <code>csv</code> module if your data fields contain instances of the field separator (comma in your case, I guess), because then there will be quoting involved. You need the correct format specifications for <code>csv.reader( )</code>. If you're already doing that, I've no idea what you actually wanted to know with your question. Your code seems like you don't know how to loop over rows and columns-- but to do what?</span>
<span class="comment-copy">i am sorry for the misunderstanding, but as i mentioned above i am not used to programming.  i will try to be more specific from now on.</span>
