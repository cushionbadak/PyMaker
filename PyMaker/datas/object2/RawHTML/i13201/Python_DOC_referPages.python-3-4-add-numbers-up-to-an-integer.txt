<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10882645/is-there-a-faster-way-to-sum-up-an-arithmetic-sequence-of-numbers-in-python">Is there a faster way to sum up an arithmetic sequence of numbers in Python?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>What I need to do is create a function where a previously entered input (in this case y) gets all the numbers up to it added up. </p>
<p>Or, as my teacher put it: </p>
<p>It should then find the sum of all the numbers starting at 1 up to the number typed in.</p>
<p>For example, if I type in a 10 the function should return 55.<br/>
Because: </p>
<pre><code>1+2+3+4+5+6+7+8+9+10 = 55
</code></pre>
<p>If I type in a 12 the function should return 78.<br/>
Because:</p>
<pre><code>1+2+3+4+5+6+7+8+9+10+11+12 = 78
</code></pre>
<p>Here is what I have tried so far:</p>
<pre><code>if y == 1: 
    return y 
elif y &lt;= 1 and y &lt;= 999999999: 
    print(sum(y))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>About your code:</p>
<pre><code>if y == 1: 
    return y 
elif y &lt;= 1 and y &lt;= 999999999: 
    print(sum(y))
</code></pre>
<p>First, why are you using <code>return</code> in <code>if</code> part but using <code>print()</code> in <code>elif</code> part?</p>
<p>Then, simply do something like this:</p>
<pre><code>def function_name(number):
    return sum(range(1, number+1))
</code></pre>
<hr/>
<p><strong>Demo:</strong></p>
<p>For example, the number is <code>10</code>:</p>
<pre><code>print(function_name(10))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>55
</code></pre>
<hr/>
<p><code>range()</code> will give a generator like <code>1, 2, 3...8, 9, 10</code> here. And <code>sum()</code> can do something like <code>1 + 2 + 3...8 + 9 + 10</code> that you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks like an assignment, so it's better that you try it for yourself instead of getting a complete answer from the internet.</p>
<p>However I can point you in the right direction.</p>
<p>In your code:</p>
<pre><code>elif y &lt;= 1 and y &lt;= 999999999: 
print(sum(y))
</code></pre>
<p>Ask yourself if the first line makes sense. If y is smaller than one, than surely it is also smaller than 9999....
Try to think of the correct operator here.</p>
<p>What you're looking to do (assuming this is an assignment to learn loops) is a simple loop that starts at 1, and ends at y, in which you have an addition.</p>
</div>
<div class="post-text" itemprop="text">
<p>you need to know about range:</p>
<blockquote>
<p>range(start, stop[, step])</p>
<p>This is a versatile function to create lists containing arithmetic progressions. It is most often used in for loops. The arguments must be plain integers. If the step argument is omitted, it defaults to 1. If the start argument is omitted, it defaults to 0. The full form returns a list of plain integers [start, start + step, start + 2 * step, ...]. If step is positive, the last element is the largest start + i * step less than stop; if step is negative, the last element is the smallest start + i * step greater than stop. step must not be zero (or else ValueError is raised).</p>
</blockquote>
<pre><code>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; range(1,10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; range(1,10, 2)
[1, 3, 5, 7, 9]
</code></pre>
<blockquote>
<p>sum(iterable[, start])</p>
<p>Sums start and the items of an iterable from left to right and returns the total. start defaults to 0. The iterableâ€˜s items are normally numbers, and the start value is not allowed to be a string.</p>
</blockquote>
<pre><code>def my_sum(n):
    return sum(range(n))
</code></pre>
</div>
<span class="comment-copy">have you tried anything???</span>
<span class="comment-copy">I tried using range, but that doesn't work, and I think it needs an if statement, but I'm not sure how to write it. What I have now is:  def sum(y):     if y == 1:         return y     elif y &lt;= 1 and y &lt;= 999999999:         print( sum(y)</span>
<span class="comment-copy">The purpose of SO is not that you should post problems that you haven't even tried to solve yourself. I can hardly see where you can go wrong if you if you make any affort to solve it. If you got stuck somewhere, please point that out by showing what you've tried and where you got stuck.</span>
<span class="comment-copy">This isn't the place to learn basic python. A better place to start is the python tutorial: <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a></span>
<span class="comment-copy">If you had paid attention in school you would remember that there is a simple formula for this.</span>
<span class="comment-copy">Oh. I knew how to do that part, and I knew it would work, so I didn't want to have to replace it later. And I was going to replace the prints with returns later, but to test it I was going to use print.</span>
<span class="comment-copy">That is...really helpful. Thank you. I wouldn't have even known that existed if you hadn't pointed it out.</span>
<span class="comment-copy">There's no advantage to using a <code>lambda</code> over a standard definition here, including simplicity. It just replaces <code>def</code> with <code>lambda</code> and has an implied <code>return</code>.</span>
<span class="comment-copy">@TigerhawkT3 Yes, and I think that will confused OP. So that's why I didn't put it in my answer ;)</span>
<span class="comment-copy">But it's not simpler at all. There's literally no benefit to it here.</span>
<span class="comment-copy">Thanks for making this clear.</span>
<span class="comment-copy">For a cut-and-paste answer to a low-quality question? Your guess is as good as mine...</span>
