<div class="post-text" itemprop="text">
<p>I am working on a Python script to compare two files. Therefore I have chosen to work with <code>grep</code> as an external program, launching the following two commands:</p>
<pre><code>grep -Fvf content1.txt content2.txt
grep -Fvf content2.txt content1.txt
</code></pre>
<p>From the results of those commands gives me the differences, I can extract the amount of differences by counting the amount of lines.</p>
<p>In order to execute this in a Python script, I have embedded those <code>grep</code> commands in <code>subprocess.Popen()</code> functions:</p>
<pre><code>try:
    output1, errors1 = subprocess.Popen(
        ["c:\\cygwin\\bin\\grep", "-Fvf", "content1.txt", "content2.txt"],
        shell=True, stdout=PIPE, stderr=PIPE).communicate()

    output2, errors2 = subprocess.Popen(
        ["c:\\cygwin\\bin\\grep", "-Fvf", "content2.txt", "content1.txt"],
        shell=True, stdout=PIPE, stderr=PIPE).communicate()

    if (len(output1) + len(output2) + len(errors1) + len(errors2) &gt; 0):
        print("Result : there are differences:")

        if (len(output1) + len(output2) &gt; 0):
            print("  Output differences : ")
            print(output1)
            # print (str(str(output1).count('\n'))); (*)
            print(output2)
            # print (str(str(output2).count('\n'))); (*)
            if (len(errors1) + len(errors2) &gt; 0):
                print("  Errors : ")
                print(errors1)
                print(errors2)
            else:
                print("Result : both are equal")

except Exception as ex:
    print("Result : Exception during comparison:")
    print(ex)
    raise
</code></pre>
<p>I have put the two problematic lines in comment (the ones who end with <code>(*)</code>). </p>
<p>As you can see the problem is the following:</p>
<ul>
<li><p>When I launch the command in a command prompt, the result which I get is a bunch of strings. By counting the amount of those strings I can get the result that I want (e.g. using a <code>wc -l</code>).</p></li>
<li><p>When I launch the command in a Python script, the result which I get (<code>output1</code> and <code>output2</code>) are bytes instead of strings. </p>
<p>I had hoped that a simple typecast to a string would give me the opportunity to count for the number of newline characters and hence, count the number of differences, but this would have been too easy.</p></li>
</ul>
<p>I have tried using the <code>wc -l</code> but pipes inside of <code>subprocess.Popen()</code> seem not to be a good idea.</p>
<p>How I can handle the <code>output1</code> and <code>output2</code> results in order to search for the number of differences?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm guessing you're using python 3.x (you don't specify 2.7 vs 3.x but in 2.7, <code>subprocess.communicate()</code> returns a tuple of two strings-or-None values, while in 3.x it returns a tuple of two bytes-or-None values, and you said specifically "bytes"):</p>
<pre><code>$ python3
...
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; proc = subprocess.Popen(['ls'], stdout=subprocess.PIPE)
&gt;&gt;&gt; res = proc.communicate()[0]
&gt;&gt;&gt; type(res)
&lt;class 'bytes'&gt;
&gt;&gt;&gt; 
</code></pre>
<p>vs:</p>
<pre><code>$ python2
...
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; proc = subprocess.Popen(['ls'], stdout=subprocess.PIPE)
&gt;&gt;&gt; res = proc.communicate()[0]
&gt;&gt;&gt; type(res)
&lt;type 'str'&gt;
&gt;&gt;&gt; 
</code></pre>
<p>This is because python3 uses Unicode for all its strings (instead of trying to use strings for both byte-sequences and "stringy" things).</p>
<p>There are two obvious ways to deal with this.</p>
<ul>
<li><p>Work with the bytes as bytes:</p>
<pre><code>&gt;&gt;&gt; res.count(b'\n')
382
&gt;&gt;&gt; print(res.splitlines())[0])
b'COPYING'
</code></pre>
<p>(This method also works in Python 2.7, the b'\n' is just '\n'.)</p></li>
<li><p>Convert the input to Unicode.  I'm not very up on Python3 and am not sure of the Best Way to do this, but this seems pretty good:</p>
<pre><code>&gt;&gt;&gt; stringy = res.decode('utf-8') # or whatever encoding your system uses
&gt;&gt;&gt; print(type(stringy), stringy.splitlines()[0])
&lt;class 'str'&gt; COPYING
</code></pre></li>
</ul>
<p>Or, you can have Python convert the piped output to Unicode strings by setting <code>universal_newlines=True</code>; see <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">the documentation</a>.</p>
<p>Or, of course, you can use Python 2 :-) (I still do for various compatibility reasons)</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't call <code>str()</code> on bytes. It is almost always an error.</p>
<p>To enable text mode, pass <code>universal_newlines=True</code> to <code>subprocess.Popen()</code>.</p>
<p>Or you could work with bytes directly e.g., use <code>.count(b'\n')</code> instead of <code>.count('\n')</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you pipe it to the unix tool <code>diff</code> : </p>
<pre><code>diff &lt;(grep "^@" myfile1) &lt;(grep "^@" myfile2)
</code></pre>
<p>You can call this in your <code>popen</code> command.</p>
</div>
<span class="comment-copy">I see you're using cygwin, you might want to try adding <code>universal_newlines=True</code> to the subprocess.Popen calls.</span>
<span class="comment-copy">Have you a special reason for using external grep instead of the <code>difflib</code> module from standard library?</span>
<span class="comment-copy">Hello Serge, I am a newbie in Python, and I was not aware of the <code>difflib</code> module, I had already tried Â´filecmp` but I was not satisfied. I'll have a closer look at <code>difflib</code> now. Thanks for your proposal.</span>
<span class="comment-copy">unrelated: you could use <code>r'c:\cygwin\bin\grep.exe'</code> (raw string literal) for Windows paths. Drop <code>shell=True</code> and pass the full path to <code>grep.exe</code> (including the file extension).</span>
<span class="comment-copy">Have you considered <code>comm  -3 &lt;(sort file1) &lt;(sort file2)</code>?</span>
<span class="comment-copy">Thank you for solving my problem: I am using Python 3 indeed, and using following command has solved my problem: <code>print (str(output1.count(b'\n')));</code>  (mind b"\n" instead of "\n")</span>
<span class="comment-copy"><code>splitlines(ord(b'\n'))</code> is misleading. The argument is a boolean <code>keepends</code> i.e., you want <code>splitlines(True)</code> instead. Also, it is easy to write code that works the same on Python 2 and 3 here e.g., <code>.count(b'\n')</code> works on both Python 2.7 and Python 3 or pass <code>universal_newlines=True</code> to enable text mode.</span>
<span class="comment-copy">@J.F.Sebastian: ah, as I said I'm not very up on Python 3.  Will update answer.</span>
<span class="comment-copy">is there any reason to downvote?</span>
<span class="comment-copy">I have no idea who downvoted, but I counter-balanced it.</span>
<span class="comment-copy">I am working on a Windows 7 environment, where I have a "C:\Cygwin" directory, containing the "grep" tool. However I don't seem to have a "diff" tool there.</span>
<span class="comment-copy">install it from setup.exe then. diff is an essential tool in cygwin.</span>
<span class="comment-copy">@Dominique Maybe add these to your question is a good idea :)</span>
