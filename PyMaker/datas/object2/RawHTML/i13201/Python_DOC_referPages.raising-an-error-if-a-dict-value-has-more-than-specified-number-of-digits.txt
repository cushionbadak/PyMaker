<div class="post-text" itemprop="text">
<p>I'm trying to raise an error if a value in a dict has greater than e.g. 6 digits (would be useful to test for a particular number of decimal places too).</p>
<p>e.g. for the dict below (and say number digits = 6)</p>
<pre><code>example_dict = {'dict_id': 12345,
                 'key1': 10501.04999999999999999262}
for key, value in tariff_detail.items():
    if value == type(float) and (test for number of digits):
        raise ValueError("DictID: {}, Key Missing: {}".format(example_dict['dict_id'],key))
</code></pre>
<p>(Note if I stick the above example in ipython and do example_dict.values() it pops out [10501.05]  - Is there in built rounding or is this just for display?)</p>
<p>What's the best way to test for the number of digits and raise an error on fail?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple approach is to convert the value to a string then count its length:</p>
<pre><code>if len(str(value)) &gt; 6 :
</code></pre>
</div>
<span class="comment-copy">Floating point values are <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="nofollow noreferrer">stored in base 2</a>.  They don't have decimal digits as such.  Maybe you wanted <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> instead?</span>
<span class="comment-copy">Do you know <a href="http://floating-point-gui.de/" rel="nofollow noreferrer">floating-point-gui.de</a> and the classic <code>0.1+0.2 = 0.30000000000000004</code>?</span>
<span class="comment-copy">10501.05 has no exact floating point representation, while 12345 have one.  perharps another representation (price in cents for exemple) will be a better approach.</span>
<span class="comment-copy">I did think of that one - doesn't feel too pythonic though- is there a better way as I'm sure this is a common problem?</span>
<span class="comment-copy">@Yunti Part of the problem is distinguishing between meaningful digits and digits. You might consider using the <code>round</code> function or the <code>decimal</code> module.</span>
<span class="comment-copy">If you need decimal digits (after «.») you can <code>split('.')</code> number by <code>dot</code> then count second element <code>len(str(value).split('.')[1])</code></span>
