<div class="post-text" itemprop="text">
<p>Here's what I'm doing to rescale a tuple of ints to another tuple of ints. Is there a better way?</p>
<pre><code>size_tup = tuple([int(round(s*shrink)) for s in size])
</code></pre>
<p>I need this for an image resize with the <code>Image</code> module, as that requires a <code>tuple</code> of <code>ints</code>. So for example, if I want to resize an image by 50% I would do</p>
<pre><code>size = .5     
size_tup = tuple([int(round(s*shrink)) for s in size])   
im = im.resize(size_tup, Image.ANTIALIAS)
</code></pre>
<p>So I'm only working with a tuple of length 2. I'm mostly concerned with simplicity of the code as the above seems like overkill.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your code, you are creating a list and then converting it to a tuple. Use the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">map</a> function to delay evaluation of of the list (in python3) instead.</p>
<pre><code>size_tup = tuple(
            map(int, #this function calls int on each element
                map(round, #this function calls round on each element
                    map(lambda x : x * shrink, #this function multplies each element by shrink
                        size))))
</code></pre>
<p>Based  on the comment, you can do this too (remove <code>[]</code>):</p>
<pre><code>tuple(int(round(s*shrink)) for s in size)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think something similar to this would help you.</p>
<pre><code>map(lambda x: x * n, tuple)
</code></pre>
<p>As per definition of the map function:</p>
<blockquote>
<p><code>map(function, iterable, ...)</code>
  Apply function to every item of iterable and return a list of the results</p>
</blockquote>
</div>
<span class="comment-copy">This question would be much better with some example data and desired output</span>
<span class="comment-copy">@bebop I added more details per your comment.</span>
<span class="comment-copy">thanks for the suggestion, but I am not sure this is any simpler than what I propose above. I think I can replace my brackers with a generator expression in any case, no? That will eliminate the creation of the list, but I'm only working with a small list anyway.</span>
<span class="comment-copy">see the edit. I don't quite understand what you mean by "simpler". You generally use map function to apply something to all elements in a given iterable.</span>
<span class="comment-copy">I'll upvote for the last suggestion, using a generator expression rather than a list comprehension inside the <code>tuple</code> call. Python doesn't really need <code>map</code>, though it can be nice when you have exactly one pre-written function to apply. If you're chaining map calls together or using a <code>lambda</code> function you probably shouldn't bother.</span>
