<div class="post-text" itemprop="text">
<p>I would like to process the csv data of a table instead of writing it to a file. How can I redirect psycopg2 <a href="http://initd.org/psycopg/docs/cursor.html#cursor.copy_expert" rel="nofollow"><code>copy_expert()</code></a> into a variable, somewhat like this:</p>
<pre><code>var1 = cur.copy_expert("COPY test TO STDOUT WITH CSV HEADER", sys.stdout)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can temporarily redirect sys.stdout to a string in Python 3.4.</p>
<p><strong>contextlib.redirect_stdout(new_target)</strong></p>
<blockquote>
<p>Context manager for temporarily redirecting sys.stdout to another file
  or file-like object.</p>
<p>This tool adds flexibility to existing functions or classes whose
  output is hardwired to stdout.</p>
<p>For example, the output of help() normally is sent to sys.stdout. You
  can capture that output in a string by redirecting the output to a
  io.StringIO object:</p>
<pre><code>f = io.StringIO() 
with redirect_stdout(f):
    help(pow) 
s = f.getvalue()
</code></pre>
</blockquote>
<p><a href="https://docs.python.org/3.4/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow">https://docs.python.org/3.4/library/contextlib.html#contextlib.redirect_stdout</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of redirecting <code>sys.stdout</code> to a variable, it's easier to replace <code>sys.stdout</code> directly:</p>
<pre><code>text_stream = io.StringIO()
cur.copy_expert("COPY test TO STDOUT WITH CSV HEADER", text_stream)
var1 = text_stream.getvalue()
</code></pre>
<p>This works because <code>io.StringIO</code> returns a <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">file object</a>, which <code>copy_expert</code> expects for the second argument.</p>
</div>
