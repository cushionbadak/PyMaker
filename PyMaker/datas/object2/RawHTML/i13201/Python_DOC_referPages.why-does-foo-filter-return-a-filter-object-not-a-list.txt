<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/12319025/filters-in-python3">Filters in Python3 [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Working in Python IDLE 3.5.0 shell. From my understanding of the builtin "filter" function it returns either a list, tuple, or string, depending on what you pass into it. So, why does the first assignment below work, but not the second (the '&gt;&gt;&gt;'s are just the interactive Python prompts)  </p>
<pre><code>&gt;&gt;&gt; def greetings():
    return "hello"

&gt;&gt;&gt; hesaid = greetings()
&gt;&gt;&gt; print(hesaid)
hello
&gt;&gt;&gt; 
&gt;&gt;&gt; shesaid = filter(greetings(), ["hello", "goodbye"])
&gt;&gt;&gt; print(shesaid)
&lt;filter object at 0x02B8E410&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the python documentation for <code>filter(function, iterable)</code> (from <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer">here</a>):</p>
<blockquote>
<p>Construct an iterator from those elements of <em>iterable</em> for which <em>function</em> returns true.</p>
</blockquote>
<p>So the get a list back you have to use:</p>
<pre><code>shesaid = list(filter(greetings(), ["hello", "goodbye"]))
</code></pre>
<p>But this probably isn't what you wanted, because it tries to call the result of <code>greetings()</code>, which is "hello", on the values of your input list, and this won't work. Here also the iterator type comes into play, because the results aren't generated until you use them (for example by calling <code>list()</code> on it). So at first you won't get an error, but when you try to do something with <code>shesaid</code> it will stop working:</p>
<pre><code>&gt;&gt;&gt; print(list(shesaid))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</code></pre>
<hr/>
<p>If you want to check which elements in your list are equal to "hello" you have to use something like this:</p>
<pre><code>shesaid = list(filter(lambda x: x == "hello", ["hello", "goodbye"]))
</code></pre>
<p>(I put your function into a lambda, see Randy C's answer for a "normal" function)</p>
</div>
<div class="post-text" itemprop="text">
<p>filter expects to get a function and something that it can iterate over. The function should return True or False for each element in the iterable. In your particular example, what you're looking to do is something like the following:</p>
<pre><code>In [47]: def greetings(x):
   ....:     return x == "hello"
   ....:

In [48]: filter(greetings, ["hello", "goodbye"])
Out[48]: ['hello']
</code></pre>
<p>Note that in Python 3, it may be necessary to use <code>list(filter(greetings, ["hello", "goodbye"]))</code> to get this same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please see this sample implementation of <code>filter</code> to understand how it works in Python 3:</p>
<pre><code>def my_filter(function, iterable):
    """my_filter(function or None, iterable) --&gt; filter object

    Return an iterator yielding those items of iterable for which function(item)
    is true. If function is None, return the items that are true."""
    if function is None:
        return (item for item in iterable if item)
    return (item for item in iterable if function(item))
</code></pre>
<p>The following is an example of how you might use <code>filter</code> or <code>my_filter</code> generators:</p>
<pre><code>&gt;&gt;&gt; greetings = {'hello'}
&gt;&gt;&gt; spoken = my_filter(greetings.__contains__, ('hello', 'goodbye'))
&gt;&gt;&gt; print('\n'.join(spoken))
hello
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation</p>
<blockquote>
<p>Note that <code>filter(function, iterable)</code> is equivalent to <code>[item for item in iterable if function(item)]</code></p>
</blockquote>
<p>In python3, rather than returning a list; filter, map return an iterable. Your attempt should work on python2 but not in python3 </p>
<p>Clearly, you are getting a filter object, make it a list.</p>
<pre><code>shesaid = list(filter(greetings(), ["hello", "goodbye"]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>the reason why it returns <code>&lt; filter object &gt;</code> is that, filter is class instead of built-in function.</p>
<p><code>help(filter)</code> you will get following:
Help on class filter in module builtins:</p>
<pre><code>class filter(object)
 |  filter(function or None, iterable) --&gt; filter object
 |  
 |  Return an iterator yielding those items of iterable for which function(item)
 |  is true. If function is None, return the items that are true.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
</code></pre>
</div>
<span class="comment-copy">On my machine, <code>help(filter)</code> says that it returns an iterator, not a list or tuple or string. You may be looking at documentation for an older version of Python. In any case, your <code>filter</code> expression would not work even in older versions, because the first argument to <code>filter</code> must be a callable and the value returned by <code>greetings()</code> is not a callable.</span>
<span class="comment-copy">I was using an old tutorial, which didn't state version of Python. Thank you Kevin.... though I don't understand (just starting out here :-)... what you mean here: "because the first argument to filter must be a callable and the value returned by greetings() is not a callable."</span>
<span class="comment-copy">you've got me teaching myself next what callables are.. have found some topics both in the forum and elsewhere. Thanks again! (Tried to edit previous comment but StackOverflow didn't permit...</span>
<span class="comment-copy">"Not allowed"? It's certainly allowed -- you were able to store the return value (no exception was raised); that value just wasn't what you expected it to be. The original title here was somewhat misleading.</span>
<span class="comment-copy">Note that because of the <code>()</code>, the first <code>shesaid</code> line <i>doesn't</i> call <code>greetings</code> on the values of your input list -- it tries to call the value that <code>greetings()</code> returns on that.   So it tries to call <code>"hello"</code> (the string) as if it were a function.</span>
<span class="comment-copy">Thanks DSM, - yep, your comment confirms the exact understanding that TobiMarg's response gave me of what's going on. Clear... once one gets it! :-)</span>
<span class="comment-copy">@DSM Thanks! That was an important mistake. I fixed it now.</span>
