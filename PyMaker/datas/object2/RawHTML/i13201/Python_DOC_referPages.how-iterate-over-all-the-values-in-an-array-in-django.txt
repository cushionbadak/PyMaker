<div class="post-text" itemprop="text">
<p>I have an array of names in python, which I would like to display using Django templates. I know that tags can be used that support for loops, but they have a unique syntax which I am unfamiliar with.</p>
<p>Also I do not want to use instance.0, instance.1 and so on. I need to be scalable for any size array</p>
<p>Django Template code</p>
<pre><code>(:,

{% for name  in instance  %}
       {{instance}}         
{%endfor%}

 My name is {{my_name}}.
(:,
</code></pre>
<p>Python code</p>
<pre><code>from django.template import Template, Context
from django.conf import settings

settings.configure()


t=Template(The above section)
dtype={'names': ['name','offset'],
       'formats':['U20,U20']
       }

instance = np.zeros(5,dtype='U20')
instance[0]=('John')
instance[1]=('Tim')
instance[2]=('Sarah')

name="adrian"


c=Context({"instance":instance, "my_name":name})
print(t.render(c))
</code></pre>
<p>Current output</p>
<p>(:,</p>
<pre><code>                [&amp;#39;John&amp;#39; &amp;#39;Tim&amp;#39; &amp;#39;Sarah&amp;#39; &amp;#39;&amp;#39; &amp;#39;&amp;#39;]


                [&amp;#39;John&amp;#39; &amp;#39;Tim&amp;#39; &amp;#39;Sarah&amp;#39; &amp;#39;&amp;#39; &amp;#39;&amp;#39;]


                [&amp;#39;John&amp;#39; &amp;#39;Tim&amp;#39; &amp;#39;Sarah&amp;#39; &amp;#39;&amp;#39; &amp;#39;&amp;#39;]


                [&amp;#39;John&amp;#39; &amp;#39;Tim&amp;#39; &amp;#39;Sarah&amp;#39; &amp;#39;&amp;#39; &amp;#39;&amp;#39;]


                [&amp;#39;John&amp;#39; &amp;#39;Tim&amp;#39; &amp;#39;Sarah&amp;#39; &amp;#39;&amp;#39; &amp;#39;&amp;#39;]


       My name is adrian.
       ).
</code></pre>
<p>Desired output</p>
<pre><code>(:,
        i=0

               [John]


               [Tim]


               [Sarah]




       My name is adrian.
       ).
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are outputting the queryset/iterable, i.e. <code>instance</code>.</p>
<p>Instead, you need to output each element of it, which is <code>name</code>, as you correctly state in the <code>for</code> loop.</p>
<p>The syntax of the <code>for</code> is the same as python's (see if <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow">this helps</a>)</p>
<p>so just replace</p>
<pre><code>{{instance}}
</code></pre>
<p>with</p>
<pre><code>{{name}}
</code></pre>
<p>in the template and you should get the desired output</p>
<p>That means the template should be</p>
<pre><code>(:,

{% for name  in instance  %}
       {{name}}
{% endfor %}

 My name is {{my_name}}.
(:,
</code></pre>
<p>By the way, I can see the queryset has five elements (the same line was repeated five times because the loop ran on five elements), but the last two lack a name since only John, Tim and Sarah appear.</p>
</div>
<span class="comment-copy">instead of <code>{{instance}}</code>, output <code>{{name}}</code></span>
<span class="comment-copy">Thank you! Now I have a new use case. How can I have  a for loop print out values from 2 different arrays? Like { for name in instance}      {{name}} {{Last_name}}</span>
<span class="comment-copy">to iterate over two different sequences pairing the elements form each, you can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>. e.g. <code>{% for name, last_name in zip(arr1, arr2) %}</code> <code>{{ name }}</code> <code>{{ last_name }}</code> <code>{% endfor %}</code></span>
<span class="comment-copy">I don't think it's possible to access zip from within the for loop.All computations have to be done outside the template. Also I think this is my question asked in a better way.   <a href="http://stackoverflow.com/questions/33286510/displaying-2-values-in-a-record-array-using-django-template-for-loop" title="displaying 2 values in a record array using django template for loop">stackoverflow.com/questions/33286510/â€¦</a></span>
<span class="comment-copy">ok, then combine the arrays beforehand</span>
<span class="comment-copy">Ok, but then how do I use the Context() method with the combined arrays?</span>
