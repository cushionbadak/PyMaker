<div class="post-text" itemprop="text">
<p>I'm studying python and getting on with it now. I've been working this random word generator and I'm looking to modify it so that it picks characters by their ascii codes as ranges from lists.</p>
<pre><code>import random
wordLen=random.randint(7,14)
charList=[]
asciiList=list(range(48,57))+list(range(65,90))+list(range(97,122))
for a in range(wordLen):
    ASCIIcode=random.choice(asciiList)
    charList.append(chr(ASCIIcode))
print(''.join(charList))
</code></pre>
<p>Here you can see there's one list called asciiList where I've defined digits, lowercase and uppercase.</p>
<p>Now I've separated this into three lists for a second version of the program:</p>
<pre><code>length = random.randint(7, 14)

set1 = list(range(65,90))            # A-Z   
set2 = list(range(48,57))            # 0-9
set3 = list(range(97,122))           # a-z
build = [set1] + [set2] + [set3]
</code></pre>
<p>I am having trouble trying to get the program to ensure that the ultimate word generated (as per my complete program) to have at least one uppercase, one lowercase and one digit. I understand it'd be along the lines of this (I've used different variable names here as I wrote this in a new program):</p>
<pre><code>while len(word) &lt; length:                   # keep appending until the set length of 7-14 characters has been reached
choice = random.choice(build[index])
</code></pre>
<p>IE. Until program reaches the length defmined, pick at random from one of the three sets but ensure the program picks it at least once, but I'm struggling with the last step. Does anyone have a potential suggestion for a while loop for the program? Suggestions appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random

from string import ascii_uppercase, ascii_lowercase, ascii_letters, digits

pool = ascii_letters + digits
wordLen=random.randint(7,14)
answer = random.sample(pool, wordLen)

while True:
    if not any(char.isupper() for char in answer):
        answer[random.randrange(len(answer))] = random.choice(ascii_uppercase)
        continue

    if not any(char.islower() for char in answer):
        answer[random.randrange(len(answer))] = random.choice(ascii_lowercase)
        continue

    if not any(char.isdigit() for char in answer):
        answer[random.randrange(len(answer))] = random.choice(digits)
        continue

    break

answer = ''.join(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may pick one char from each required set and then fill the remaining chars from the full set. After that just shuffle the remaining string.</p>
<pre><code>chars = [random.choice(s) for s in [set1, set2, set3]] +\
        [random.choice(build) for _ in range(length - 3)]
random.shuffle(chars)

chars = ''.join(map(chr, chars))
</code></pre>
<p>PS: Your definition of <code>build</code> might be possibly wrong. Try this:</p>
<pre><code>build = set1 + set2 + set3
</code></pre>
<p>For this code to work.</p>
<p>Also, you may use the <a href="https://docs.python.org/3/library/string.html" rel="nofollow"><code>string</code></a> module to provide your sets</p>
<hr/>
<p>PS 2: If you are doing something as a password generator, you may want to use <code>random = random.SystemRandom()</code> before calling the functions in the module, for security reasons. Using a non determinist random number generator might avoid attacks that may reproduce your number generator and predict following passwords you generate.</p>
</div>
<span class="comment-copy">Im so glad more people know about the <code>string</code> module. So much cleaner!</span>
<span class="comment-copy">Got it! so you don't rreally use different lists? Just making sure that if there isn't X char type then add that type? How does the rest of answer get filled up with the remaining characters then once each of the 3 types is added? Thanks!</span>
<span class="comment-copy">Those three if-statements check for your character types. If that type is not represented in the list, a random element is changed to include that character</span>
<span class="comment-copy">This might not work at all unless you run on a loop... If, by chance, you have <code>'aaaaaa'</code> and transform into <code>'aaaaAa'</code> and then into <code>'aaaa3a'</code>, you are still missing one char class... Overall, this approach is too verbose and error prone. Just generate the correct content for once</span>
<span class="comment-copy">@JBernardo: I was just thinking that, about the incorrectness. There! That should fix it</span>
<span class="comment-copy">Got it! seems like the logic I need to be using but think I'm getting confused by the variable build because I can't seem to integrate this into my coding successfully. I can't seem to show you my code here because when I paste it it doesnt format properly (new to stack). How can I show my now re-worked example?</span>
<span class="comment-copy">@MariuszAndrzejewski You seem to want to validate if your generated string is valid, but I believe knowing how to generate the string correctly will help you even more.</span>
