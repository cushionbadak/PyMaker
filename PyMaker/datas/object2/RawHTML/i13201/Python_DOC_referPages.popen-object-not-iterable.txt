<div class="post-text" itemprop="text">
<p>I am trying to fetch some Ids into a list via the subprocess command. Below is my code:</p>
<pre><code>list1=[]
list2=[]
list1 = subprocess.Popen("pgrep -u root",stdout=subprocess.PIPE, shell = True)
for i in list1:
    file1 = open(os.path.join('/proc',i,'status')).readlines()
    for line in file1:
        if line.startswith("Mem: "):
             id = int(line.split()[5])
        if line.startswith("Cpu: "):
             toC = int(line.split()[8])
list2 = (id,toC)
for k in list2:
    self.text.insert(INSERT,k[0])
    self.text.insert(INSERT,k[1])
</code></pre>
<p>The error that i get is: 'Popen'object not iterable.
I am creating a list and fetching the IDs into a list and then for every ID in the list, I am trying to get the mem and cpu information. this information is again input into another empty list(list2). I am iterating over list2 to display these information. Where am I going wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the result of the call you'll need to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">communicate</a> with the 
subprocess object</p>
<pre><code>proc = subprocess.Popen(['pgrep', '-u', 'root'], stdout=subprocess.PIPE)
text = proc.communicate()[0].decode('utf-8')

for i in text.splitlines():
    ...
</code></pre>
<p>The <code>Popen</code> object is not the output of the process, it is an object that represents the running subprocess.</p>
<p>Also avoid <code>shell=True</code> if you can as it is widely considered a security concern, and you don't need it here.</p>
</div>
<div class="post-text" itemprop="text">
<p>For this scenario (where you're only reading <code>stdout</code> and <code>stdin</code>/<code>stderr</code> are untouched), you probably don't want <code>.communicate</code> or <code>.run</code>. It's easier to process the lines as they're produced, which those APIs don't do (they buffer everything into memory before returning).</p>
<p>To process the output line by line, just change:</p>
<pre><code>for i in list1:
</code></pre>
<p>to:</p>
<pre><code>for i in list1.stdout:
</code></pre>
<p>In addition, you've got a problem with types on Python 3; to fix that (and avoid the problems with <code>shell=True</code>) change the <code>Popen</code> line to:</p>
<pre><code>list1 = subprocess.Popen(['pgrep', '-u', 'root'], stdout=subprocess.PIPE, universal_newlines=True)
</code></pre>
<p>where <code>universal_newlines=True</code> makes reads from <code>list1.stdout</code> return <code>str</code>, not <code>bytes</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>subprocess.Popen</code> yields a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow">Popen object</a>.  It does not give you a list and it does not give you something you can iterate over, because the <code>Popen</code> object is not iterable.</p>
<p>It is easier to use a higher level function from the same library to get the output as a string, then parse this and loop accordingly.  In Python 3.5, you can simply call <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow"><code>subprocess.run</code></a>:</p>
<pre><code>res = subprocess.run(["pgrep", "-u", "root"], stdout=subprocess.PIPE)
</code></pre>
<p>which will give you a <code>CompletedProcess</code> object from where you can inspect the output.</p>
<p>In Python 3.4 or earlier, you can instead use <a href="https://docs.python.org/3.4/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>check_output</code></a>.</p>
</div>
<span class="comment-copy">a portable way to get the processes info is to <a href="https://github.com/giampaolo/psutil#summary" rel="nofollow noreferrer">use <code>psutil</code> module</a>.</span>
<span class="comment-copy">I get this error: TypeError("Can't mix strings and bytes in path components.") when i try to iterate it your way..</span>
<span class="comment-copy">@dee yes that is a different issue but I've updated the line to decode</span>
<span class="comment-copy">Why does it say, "No such file or directory  pgrep -u root". When i try to print, it just works fine though.</span>
<span class="comment-copy">what do you mean by "when I try to <b>print</b> it"? Also what line is that error coming from?</span>
<span class="comment-copy">@ RyanHaining : When i use a print statement like : print(list2.communicate()) it works fine i.e it prints all the PIDs handled by this user (root, in my case) .  The error is from line 1 (filenotfound error from subprocess.py)</span>
<span class="comment-copy">Note: If you're piping two of the standard handles independently, you cannot safely read/write any of them without the use of <code>select</code>/<code>selectors</code> primitives or threads; it's only because you're using exactly one standard handle that deadlock on full pipes isn't an issue.</span>
<span class="comment-copy">I am using python 3.4 and it says : Attribute Error: Module object has no attribute run.</span>
<span class="comment-copy">@Dee <code>subprocess.run</code> is new in Python 3.5.  See edit.</span>
