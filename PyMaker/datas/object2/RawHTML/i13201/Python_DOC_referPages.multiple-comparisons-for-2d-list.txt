<div class="post-text" itemprop="text">
<p>I have 2D lists of the form:</p>
<pre><code>xyPositions = [[474, 318], [543, 432], [633, 328], [548, 514]]
</code></pre>
<p>Sometimes there are 4 (as here), 8, 10, 12 or 16 pairs of xy coordinates in these lists.</p>
<p>The following little function I've written will test whether two sets of x y coordinates overlap, e,g., <code>dotOverlap( [55, 99], [399, 88] )</code></p>
<p>However, I'm somewhat embarrassed to say I cannot think of an easy way to test all possible cases of overlap (i.e., pairwise comparisons):</p>
<pre><code>#    #
1 to 2
1 to 3
1 to 4
2 to 3
2 to 4
3 to 4
</code></pre>
<p>How might I programmatically go about doing this?</p>
<hr/>
<pre><code>from math import sqrt
ClearanceRadius = 7     # pixels
def dotOverlap(p1, p2):

    x1 = p1[0]
    y1 = p1[1]
    x2 = p2[0]
    y2 = p2[1]

    overLapTest = None

    d = sqrt( (y2 - y1)**2 + (x2 - x1)**2 )

    if ClearanceRadius*2 &lt; d:
        overLapTest = False
    elif ClearanceRadius*2 &gt; d:
        overLapTest = True

    return(overLapTest)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations</code></a> to generate all the combinations and you can unpack the combinations over your function, one by one, like this</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; xyPositions = [[474, 318], [543, 432], [633, 328], [548, 514]]
&gt;&gt;&gt; [dotOverlap(*items) for items in combinations(xyPositions, r=2)]
[False, False, False, False, False, False]
</code></pre>
</div>
