<div class="post-text" itemprop="text">
<p>I have written a script where I need a unique random number every time I run that script. Just for explaination: suppose that I want my script 5 times. Now I want number generated in all times should be unique? </p>
<p>I have found a lot of infomation about random number uniqueness but those are for one time only. 
If you think it is not possible then is there any alternative way etc.?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>uuid</code> to generate RFC 4122 UUIDs (Universally Unique IDentifiers). For example <a href="https://docs.python.org/3/library/uuid.html#uuid.uuid4" rel="nofollow"><code>uuid4</code></a> generates a random UUID:</p>
<pre><code>In [1]: import uuid

In [2]: u = uuid.uuid4()

In [3]: u
Out[3]: UUID('deb1064a-e885-4ebc-9afc-f5291120edf8')
</code></pre>
<p>To get the number, access the <a href="https://docs.python.org/3/library/uuid.html#uuid.UUID.int" rel="nofollow"><code>int</code> attribute</a> of <code>uuid.UUID</code> objects:</p>
<pre><code>In [4]: u.int
Out[4]: 242844464987419882393579831900689854160
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unique and random are contradictory. For anything that's genuinely random there is a (small, maybe infinitessimal) chance of repetition.</p>
<p>If you want something less unwieldy (but less universally unique) than UUIDs you can roll your own combination of a random number (with a small chance of repetition) and a number derived from the time (for example the Unix epoch, which won't ever repeat for a single instance if the script is run less often than once per second).</p>
<p>If the random number is used as part of (say) a filename you can generate a name and then check whether the file already exists. If it does, then  reject the random number as already used, and generate another one. Or if you really need to, you could store all random numbers already used somewhere. Load them before each run, add the new number and save after each run.</p>
<p>Finally there are pseudo-"random" generators of the form X(n+1) = (X(n)*a + b) mod M. These are hopeless for security / cryptography because given a few members of the sequence, you can discover the algorithm and predict all future numbers. However, if that predictability is unimportant, then with appropriate constants you can guarantee no repeats until all M members of the sequence have been generated. The numbers are not at all random, but they may appear random to a casual observer.</p>
</div>
<span class="comment-copy">If it is <i>truly</i> random there would be an infinitesimally small possibility that they aren't unique, no? Re-running the script seems to parallel sampling with replacement</span>
<span class="comment-copy">Suppose I have a range that I will maximum use this script 1 million time. So in this case random number should be with in this range so that it can be stored properly</span>
<span class="comment-copy">just store in a file the numbers you have previously generated, and each time you run the script check whether that number is already in that file or not.</span>
<span class="comment-copy">That's what I am using but is not a good solution that if somehow that file is overwritten extra etc?</span>
<span class="comment-copy">@Shafiq then use a database if you feel more comfortable. But you really don't have any more choices. If you want a random number, due to its randomness nature, you are going to get repeated numbers and your only way to track them down is storing them in a file. There is no other solution for your problem.</span>
<span class="comment-copy">Suppose I have a range that I will maximum use this script 1 million time. So in this case random number should be with in this range so that it can be stored properly</span>
<span class="comment-copy">What do you mean by "can be stored properly"? @Shafiq</span>
<span class="comment-copy">it simple means that number should be unique.</span>
<span class="comment-copy">@Shafiq well did you read about what UUID is? It <i>will</i> be unique.</span>
<span class="comment-copy">Yes it is but I do not want too large number as I need its range 1 million. Should I use modulo?</span>
