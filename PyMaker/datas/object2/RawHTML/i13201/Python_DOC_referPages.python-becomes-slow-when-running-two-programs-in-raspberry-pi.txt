<div class="post-text" itemprop="text">
<p>When running two programs that use python gpio pins on the Raspberry Pi, one becomes slower.
One is a magnetic sensor, and the other is a temperature and humidity sensor. The latter is the one that slows down. Rather than printing the temperature every 2 seconds, it prints every 5 to 10 seconds. If it comes in the magnetic sensor operation runs faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like your problem isn't the Python, but the IO gap. Even if you are using different pins, the GPIO from the Raspberry uses the same bus to handle all the pins, so one process need to wait the other uses to than have it's time.</p>
<p>You could handle this problems with come solutions, but all then probably will be something similar to unite the programs.</p>
<p><strong>basic ideia:</strong> Mix both the programs in just one. Singular process/thread to rule all the reads.</p>
<p><strong>improved ideia:</strong> Divide your code into three process. Two of then will just read/write a array and use that value as it was from GPIO. One of that process will be your main process and will a <a href="https://pypi.python.org/pypi/SharedArray" rel="nofollow">SharedArray</a> to handle the GPIO data. Keeping in mind that read from RAM is much better/faster than read from GPIO, so just use the Array to update the status from IO. You could use one array to set the new values and another to store the actual values.</p>
<p>Some time ago i used some <a href="https://docs.python.org/3/howto/sockets.html" rel="nofollow">Sockets</a>  to broadcast some IO data over some threads and could get a updated data (picture from camera) and share it with the threads with a gap of 100ms, just avoiding the IO gap. So you could get a similar result using the <a href="https://docs.python.org/3/library/socketserver.html" rel="nofollow">SocketServer</a> lib with some <a href="https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow">workers</a> to spread the info.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of running the programs at the same time, try running them one after another. Obviously the Raspberry Pi has hardware limitations due to it's size and cost. What I would suggest is to have only one program to run at a time. You could put them in a basic loop where you run program 1, then run program 2, then go back to the beginning of the loop. </p>
</div>
