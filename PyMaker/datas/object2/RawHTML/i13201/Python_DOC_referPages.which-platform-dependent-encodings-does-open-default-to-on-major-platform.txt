<div class="post-text" itemprop="text">
<p>According to the manual, the default input and output encoding of <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open()</code></a> is "platform dependent", and <a href="https://stackoverflow.com/q/27452317/699305"><em>usually</em></a> given by <code>locale.getpreferredencoding()</code>. But what exactly (or approximately) are these platform-dependent defaults? </p>
<p><strong>Edit:</strong> A useful answer might be in the form of a list of configurations (presumably a combination of OS and some language/localization settings) and the resulting default encoding.</p>
<p>I'm not expecting a complete reference, but I would like to know what to expect, and what factors to look into, when one of my students stumbles on code that I can run without incident (my box defaults to <code>utf-8</code>). Ideally I can say in advance "If your system is set up like X, you should do Y".</p>
<p>I've looked at <a href="https://hg.python.org/cpython/file/d1bf37def4fd/Lib/locale.py#l506" rel="nofollow noreferrer">the source</a> of <code>getpreferredencoding()</code> and I can see that a number of environment variables are checked, but I don't have a menagerie of different machines to test by hand-- and I don't know what factors going into the setting of all these environment variables. My students are from a variety of nationalities (but mostly Dutch), and use PCs, Macs, and Chromebooks. Is anyone here able to offer an overview of what I can expect?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think on Windows it would be the current <em>code page</em>, often labelled as ANSI. That's the codec you get on Windows if you specify the name <code>'mbcs'</code>.</p>
<p>However <strong>for most practical purposes you should assume the text files will just have some random encoding.</strong> I don't think it's useful to dig into the details of <code>locale.getpreferredencoding()</code>. If I'm not mistaken, you can override that default in your script anyway.</p>
<p>I don't know what you're going to do with those text but if you're going to get files in all those different encodings, know there <a href="https://en.wikipedia.org/wiki/Bush_hid_the_facts" rel="nofollow">is</a> no <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/04/17/2158334.aspx" rel="nofollow">reliable</a> way of finding out that encoding.</p>
<p>If you want to inspect those files one by one by trial-and-error then go ahead, but I would just avoid the problem by telling the students to submit in a set encoding, eg. UTF-8. It's easy enough to open files using <code>open(blabla, 'w', encoding='utf-8')</code>.</p>
</div>
<span class="comment-copy"><i>"on code that I can run"</i> -- if it is a Python source code then tell your students to use the <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">encoding declaration</a>: <code># -*- coding: utf-8 -*-</code> if their source code uses non-ascii literals (utf-8 is the default in Python 3 and therefore the encoding declaration is optional there).</span>
<span class="comment-copy">Nope, this is about code that reads files with <code>open()</code> without specifying an encoding, as the question says.</span>
<span class="comment-copy">if you don't know the character encoding then read files using binary mode <code>'rb'</code>. Otherwise you can only guess the encoding (<code>chardet</code> module).</span>
<span class="comment-copy">@JF, I know how to deal with files and their encodings. Please read the question, and don't explain the world to me. We've been coming across each other on this site for years, usually in Python questions.</span>
<span class="comment-copy">@alexis On Windows I think it's the system code page <a href="https://msdn.microsoft.com/en-us/goglobal/bb964654.aspx" rel="nofollow noreferrer">(list)</a>. Given a text file in one of these encodings, it's hard to tell what codec was used. You should expect it to be <i>random</i> and <a href="https://en.wikipedia.org/wiki/Bush_hid_the_facts" rel="nofollow noreferrer"><i>impossible to guess</i></a>.</span>
<span class="comment-copy">Windows uses heuristics to infer the encoding, but Python uses a "default" that is independent of file contents. I am not (and the question is not) after any sort of content-based inference.</span>
<span class="comment-copy">What I'm going to do with this information is, I want to be able to say "under X conditions you can expect UTF-8 to be the encoding, but if your computer is like Y then you will get something else." Portability aside, the encoding parameter is optional so we should know when it needs to be used. It bugs me that I have to teach this stuff and don't know what my students can expect. (It was simple enough when the default was ascii-- why couldn't it become "utf8" for everyone?)</span>
<span class="comment-copy">Also, I <i>think</i> it's the system codepage too, but I'm not sure that's always the case; and as I mention in the question, it might be that not even <code>getpreferredencoding()</code> is always obeyed. So I was hoping for something based on references, or on extensive experience.</span>
<span class="comment-copy">@alexis you almost always need to use the <code>encoding</code> parameter when opening a text file with non-ASCII characters. As for the default, “It's platform-dependent and you can't rely on it having a certain value” is a good enough explanation.</span>
<span class="comment-copy">This boils down to "your question doesn't need answering". Even if you're right (and you might be :-)), I'd still prefer to know the answer...</span>
