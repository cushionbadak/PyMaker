<div class="post-text" itemprop="text">
<p>I want to create a dictionary where the keys are regular expressions:</p>
<pre><code>d = {'a.*': some_value1, 'b.*': some_value2}
</code></pre>
<p>Then, when I look into the dictionary:</p>
<pre><code>d['apple']
</code></pre>
<p>I want apple <code>'apple'</code> to be matched against the keys which are regular expressions. If there is a complete match with a key/regular-expression then the corresponding value should be returned.</p>
<p>For example <code>'apple'</code> matches with the regular expression <code>'a.*'</code> completely, and so, <code>some_value1</code> should be returned.</p>
<p>Of course, all of this assumes that the regular expression keys do not conflict (i.e. two keys should not both match the same string exactly). Let's say I can manually take care of this requirement when building my keys.</p>
<p>Is this possible in Python? If so, it would be quite an elegant and powerful construct!</p>
</div>
<div class="post-text" itemprop="text">
<p>Python dictionaries are implemented as <a href="https://en.wikipedia.org/wiki/Hash_table" rel="noreferrer">hash tables</a> - which means any <code>mydict[myvalue]</code> lookup is very fast by internally hashing <code>myvalue</code>.  Using regular expressions as keys will cancel this functionality.  Instead of using a dictionary, you should use a simple list or tuple where each item is a tuple in the format: <code>(pattern/compiled regular expression, value)</code> and scan them until a regular expression passes.  This will also give you the ability to play with the order of regular expressions (from specific to general, for example):</p>
<pre><code>import re

LOOKUPS  = [
    ('a.*', 'a'),
    ('b.*', 'b'),
]

def lookup(s, lookups):
    for pattern, value in lookups:
        if re.search(pattern, s):
            return value
    return None

print(lookup("apple", LOOKUPS))
</code></pre>
<p>See also Django's <a href="https://docs.djangoproject.com/en/1.8/topics/http/urls/#example" rel="noreferrer">url resolver</a> for a (very) advanced implementation of your idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>re.compile</code>d pattern object as a dictionary key:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile('a.*')
&gt;&gt;&gt; d = {regex: 'foo'}
&gt;&gt;&gt; d[re.compile('a.*')]
'foo'
</code></pre>
<p>Note that recompiling the same regex gives you an equal key (the same object, in fact: <code>re.compile('a.*') is d.keys()[0]</code>), so you can get back whatever you stored against it. </p>
<p>However:</p>
<ul>
<li>As pointed out in the comments, <em>multiple regular expressions can match the same string</em>; </li>
<li>Dictionaries aren't ordered, so you might get a different matching regex first each time you run the program; and </li>
<li>There's no <code>O(1)</code> way to ask a dictionary <code>{regex: result, ...}</code> for a <code>result</code> value given a string that might match one or more <code>regex</code> keys. </li>
</ul>
<p>It's therefore difficult to see what utility you'd find for this.</p>
<hr/>
<p>If you <em>can</em> come up with a way to ensure that no two keys can match the same string, you could create a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping" rel="nofollow"><code>MutableMapping</code></a> subclass that applies this check when you add new keys and implements <code>__getitem__</code> to scan through the key-value pairs and return the first value where the argument matches the key regex. Again, though, this would be <code>O(n)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure. Just look them up as normal and check for matches.</p>
<pre><code>import re

def find_matches(d, item):
    for k in d:
        if re.match(k, item):
            return d[k]

d = {'a.*': 'a match', 'b.*': 'b match'}
for item in ['apple', 'beer']:
    print(find_matches(d, item))
</code></pre>
<p>Result:</p>
<pre><code>a match
b match
</code></pre>
<p>Note that <code>re.match</code> only produces a match if the expression is found at the <em>beginning</em> of the string. Use <code>re.search</code> if it's okay for the expression to be anywhere in the string.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Possible solution:</strong></p>
<pre><code>import re


class RegexDict(dict):

    def __init__(self):
        super(RegexDict, self).__init__()

    def __getitem__(self, item):
        for k, v in self.iteritems():
            if re.match(k, item):
                return v
        raise KeyError


if __name__ == '__main__':
    d = RegexDict()

    d[r'a.*'] = 'Informed a key that starts with a'
    d[r'b.*'] = 'Informed a key that starts with b'
    d[r'\w+'] = 'Informed alphanumeric as key'
    d[r'\d+'] = 'Informed numbers as key'
    d[r'\s+'] = 'Informed spaces as key'

    print d['  ']
    print d['apple']
    print d['bee']
    print d['123']
    print d['word']
    print d['word1']
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Informed spaces as key
Informed a key that starts with a
Informed a key that starts with b
Informed numbers as key
Informed alphanumeric as key
Informed alphanumeric as key
</code></pre>
</div>
<span class="comment-copy"><i>"If so, it would be quite an elegant/powerful construct!"</i> - No, it wouldn't be, because you can write an unlimited number of regular expressions that match the same string. You are not asking the right question. Please explain what problem you are trying to solve.</span>
<span class="comment-copy">You want two incompatible things.  A program can't determine if a regex matches a string without at least looking at both the regex and the string.  Given a <i>set</i> of regular expressions (the keys) and a string, the only way to know which regex(es) match that string is to try every single regex.  But the performance of a dictionary is based entirely on its ability to find the matching key <i>without</i> having to iterate through all the keys.  So even if you could avoid all ambiguity in your keys, the performance would still be no better than a list of key-value pairs.</span>
