<div class="post-text" itemprop="text">
<p>I need to replace '|' into tab so that I can analyze my human annotation genomic data (200+mb). I'm a research assistant learning how to analyze/manipulate sequencing data in the easiest/simplest way so that I can replicate this on more data.  </p>
<p>Here how my data looks like. There are ~400,000 lines of this type of data in one file.</p>
<pre><code>       ANN=C|downstream_gene_variant|MODIFIER|OR4G4P|ENSG00000268020|transcript|ENST00000606857|unprocessed_pseudogene||n.*1414T&gt;C|||||1414|,C|intron_variant|MODIFIER|OR4G4P|ENSG00000268020|transcript|ENST00000594647|unprocessed_pseudogene|1/1|n.20-104T&gt;C||||||;DP=11;SS=1;VT=SNP
</code></pre>
<p>I tried to use this code to replace '|' into '\t' for several lines.</p>
<pre><code>import csv
infile = 'Book2.xlsx'
with open(infile , 'r') as inf: 
    for line in inf:    
        w =csv.writer(inf, delimiter = '\t')
        print w
</code></pre>
<p>All I'm getting is this :</p>
<pre><code>&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
&lt;_csv.writer object at 0x7f8beebaafc8&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using regular expression.
Example for one line:</p>
<pre><code>a = "ANN=C|downstream_gene_variant|MODIFIER|OR4G4P|ENSG00000268020|transcript|ENST00000606857|unprocessed_pseudogene||n.*1414T&gt;C|||||1414|,C|intron_variant|MODIFIER|OR4G4P|ENSG00000268020|transcript|ENST00000594647|unprocessed_pseudogene|1/1|n.20-104T&gt;C||||||;DP=11;SS=1;VT=SNP"


import re
regex= re.compile(r'\|')
regex.sub("\t",a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>print w</code> is just printing the brand new <code>csv.writer</code> object you created (and you probably don't mean to be creating a new writer on every loop). If you want to write to it, use <a href="https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow" rel="nofollow">the actual <code>writerow</code> method</a>. There is a lot of <a href="https://docs.python.org/3/library/csv.html#examples" rel="nofollow">example code on the <code>csv</code> docs page for reading and writing</a>, you just need to combine them (and use an alternate dialect for each).</p>
<p>You're not actually using a <code>csv.reader</code>, and even if you were, your input file is <code>.xlsx</code>, which is not CSV, pipe delimited, or anything else, it's a much more complex data format (Office XML, and it's a zip file, so it looks like binary gibberish when read directly) that <code>csv</code> can't read.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your filename indicates excel, but for now I will assume you actually have a tsv (Tab Seperated) file and not an Excel file.  If so</p>
<pre><code>infile = 'Book2.tsv'
of = 'Book2.csv'
with open(infile , 'r') as inf: 
    for line in inf:
         of.write(line.replace('|',','))
of.close()
</code></pre>
<p>Of course if it is Excel that's different try xlrd Udacity has some nice lessons in "Data Wrangling with MongoDB"  </p>
</div>
<span class="comment-copy">The <code>csv</code> module cannot read and write Excel format <code>.xlsx</code> files, only  text file containing Character Separated Value. There are a number of third party modules for Python that allow processing Excel files so you will need to use one (although in theory you could write your own). Secondly, even if <code>csv</code> did support the format, your code is creating a new <code>csv.writer</code> <i>class instance</i> for every line of the input file it reads, which is why you're getting the output shown.</span>
<span class="comment-copy">works perfectly !</span>
