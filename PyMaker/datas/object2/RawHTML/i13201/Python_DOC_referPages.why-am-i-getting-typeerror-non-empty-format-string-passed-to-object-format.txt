<div class="post-text" itemprop="text">
<p>I hit this TypeError exception recently, which I found very difficult to debug. I eventually reduced it to this small test case:</p>
<pre><code>&gt;&gt;&gt; "{:20}".format(b"hi")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: non-empty format string passed to object.__format__
</code></pre>
<p>This is very non-obvious, to me anyway. The workaround for my code was to decode the byte string into unicode:</p>
<pre><code> &gt;&gt;&gt; "{:20}".format(b"hi".decode("ascii"))
 'hi                  '
</code></pre>
<p>What is the meaning of this exception? Is there a way it can be made more clear?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>bytes</code> objects do not have a <code>__format__</code> method of their own, so the default from <code>object</code> is used:</p>
<pre><code>&gt;&gt;&gt; bytes.__format__ is object.__format__
True
&gt;&gt;&gt; '{:20}'.format(object())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: non-empty format string passed to object.__format__
</code></pre>
<p>It just means that you cannot use anything other than straight up, unformatted unaligned formatting on these. Explicitly convert to a string object (as you did by decoding <code>bytes</code> to <code>str</code>) to get <a href="https://docs.python.org/3/library/string.html#formatspec">format spec support</a>.</p>
<p>You can make the conversion explicit by using the <code>!s</code> string conversion:</p>
<pre><code>&gt;&gt;&gt; '{!s:20s}'.format(b"Hi")
"b'Hi'               "
&gt;&gt;&gt; '{!s:20s}'.format(object())
'&lt;object object at 0x1100b9080&gt;'
</code></pre>
<p><code>object.__format__</code> explicitly rejects format strings to avoid implicit string conversions, specifically because formatting instructions are type specific.</p>
</div>
<div class="post-text" itemprop="text">
<p>This also happens when trying to format <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; '{:.0f}'.format(None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: non-empty format string passed to object.__format__
</code></pre>
<p>That took a moment to work out (in my case, when <code>None</code> was being returned by an instance variable)!</p>
</div>
<span class="comment-copy">Probably worth noting: this only became a <code>TypeError</code> in Python 3.4+, and it affects anything that inherits from <code>object</code> without defining <code>__format__</code> along the way (e.g. <code>None</code>; <code>class T(object): pass</code>, etc.).</span>
<span class="comment-copy">For background information see <a href="https://bugs.python.org/issue7994" rel="nofollow noreferrer">bugs.python.org/issue7994</a></span>
<span class="comment-copy">I had this problem too, finally found out that a variable that should have contained a float, actually contained <code>None</code>. Thus <code>'{0:.4f}'.format(bla)</code> caused this exception</span>
<span class="comment-copy">makes sense, thanks! I wish the error were more intuitive though!</span>
<span class="comment-copy">Curiously, it works for <code>"{}".format(None)</code></span>
<span class="comment-copy">see hear for a brief explanation <a href="http://stackoverflow.com/a/29613927/1607448">stackoverflow.com/a/29613927/1607448</a></span>
