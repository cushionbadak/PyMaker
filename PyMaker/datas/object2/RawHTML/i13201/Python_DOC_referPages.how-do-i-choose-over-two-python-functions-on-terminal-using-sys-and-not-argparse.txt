<div class="post-text" itemprop="text">
<p>I've two functions, and I want to choose function <code>message()</code> or function <code>number()</code> on a <code>UNIX</code> terminal.</p>
<p>This example I define the function will be used inside <code>if __name__ == "__main__":</code>:</p>
<pre><code>import sys

def message(m=sys.argv[2]):
    print(" {} ".format(m))


if __name__ == "__main__":
    message()
</code></pre>
<p>At terminal <em>Inputting</em>:</p>
<pre><code>$python test.py python!
</code></pre>
<p><em>Outupts</em>:</p>
<pre><code>python!
</code></pre>
<p>Then when I've two functions and call just one of them:</p>
<pre><code>import sys

def message(m=sys.argv[1]):
    print(" {} ".format(m))

def number(n=sys.argv[1]):
    print(" {} ".format(n+2))

if __name__ == "__main__":
    #code that should be here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The canonical (and, in my view, correct) way to do this is to create a mapping of argument values to functions, which is simple to implement, efficient and easily scalable:</p>
<pre><code>import sys

def message(m):
    print(" {} ".format(m))

def number(n):
    print(" {} ".format(int(n) + 2))  # you can't add integers to strings...

FUNCTIONS = {
    'message': message, 
    'number': number
}

if __name__ == "__main__":
    FUNCTIONS[sys.argv[1]](*sys.argv[2:])
</code></pre>
<p>Note the use of <code>*</code> to pass the rest of the arguments to the function - see <a href="https://stackoverflow.com/q/36901/3001761">What does ** (double star) and * (star) do for parameters?</a>. This has removed the requirement for <code>sys.argv</code> to have a third value to create the functions, which could be a problem if you decide to reuse those functions elsewhere.</p>
<p>This will raise a <code>KeyError</code> if the user enters an invalid function name; you can handle this and give them a more specific error message if you like (either with <code>sys.argv[1] in FUNCTIONS</code>, which will be more efficient than checking in a list, or using <code>try</code> and <code>except</code>).</p>
<p>If you want a more complex CLI, with e.g. flags and specific value types, you should use something like <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> or <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer"><code>click</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You definitively asked the wrong question. Your question is "how do arguments work on Python", and for working with arguments you have two options I'm aware of:</p>
<ul>
<li>Using sys.argv: you need to write something like <code>if "message" in
sys.argv</code></li>
<li>Using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a> which is a far better solution</li>
</ul>
</div>
<span class="comment-copy">Do you mean <i>"how can I implement a command line interface"</i>? Have you considered doing some research?</span>
<span class="comment-copy">@jonrsharpe he wants implement <code>message or number</code> based on the input from user</span>
<span class="comment-copy">Then go and Google for that. <code>argparse</code> is a good start.</span>
<span class="comment-copy">its a example... ofc they do the same, i want to choose one or another</span>
<span class="comment-copy">an easy way would be to use <code>dictionary and sys.argv </code> @AndreL</span>
<span class="comment-copy">can the down voters  please comment why ?</span>
<span class="comment-copy">@VigneshKalai if they wanted to comment, they would have</span>
<span class="comment-copy">I commented just for future reference if someone wants to point the mistake and I would not be using <code>*sys.argv[2:]</code> it causes error for this sample if more than two arguments are passed through command line</span>
<span class="comment-copy"><code>number() takes exactly 1 argument (3 given) when this is given python test.py message 1 2 3</code></span>
<span class="comment-copy">@VigneshKalai yes, because the additional parameters <i>aren't supported</i>. In my view, getting a clear exception is better than silently ignoring subsequent parameters.</span>
<span class="comment-copy">Could you outline <i>how</i> you would use <code>argparse</code> for this?</span>
<span class="comment-copy">@jonrsharpe there are multiple usage examples that I'll not write here, as they are in the documentation.</span>
<span class="comment-copy">That is <a href="http://meta.stackexchange.com/questions/225370/your-answer-is-in-another-castle-when-is-an-answer-not-an-answer">not very useful</a>.</span>
<span class="comment-copy">so dumping the documentation is a useful example?</span>
<span class="comment-copy">I'm not saying you should just "<i>[dump] the documentation"</i> - I'm asking you to provide a minimal example that shows <i>how</i> you could solve the OP's problem with <code>argparse</code>, rather than effectively just saying <i>"go and read the <code>argparse</code> docs"</i>, which is a comment at best.</span>
