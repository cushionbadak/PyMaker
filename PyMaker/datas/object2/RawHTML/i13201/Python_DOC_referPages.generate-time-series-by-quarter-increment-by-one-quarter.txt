<div class="post-text" itemprop="text">
<p>I looked through the <code>arrow</code> and python docs, doesn't seem to be anything that incrementally steps by quarter. For example, the following code incrementally gives you the month, given a starting month up until now. Looking thru the <code>arrow</code> docs, month end is convenient. anything out there that does quarterly?</p>
<pre><code>import arrow
from datetime import datetime
a=arrow.Arrow.span_range('month', datetime(2012,7,1,0,0),datetime.now() )

for i in a:
    print i[1].floor('day').datetime.strftime("%Y-%m-%d")
</code></pre>
<p>I'm looking for a solution that steps by quarter up to now</p>
<p>input: <code>14Q3</code></p>
<p>output: </p>
<pre><code>14Q3
14Q4
15Q1
15Q2
15Q3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get the current quarter, use: <a href="https://stackoverflow.com/q/1406131/4279"><code>(month - 1) // 3 + 1</code></a>. To generate quarters in the given range:   </p>
<pre><code>from datetime import date

def generate_quarters(start, end):
    while start &lt; end: #NOTE: not including *end*
        yield start
        start = start.increment()

start = Quarter.from_string('14Q3')
end = Quarter.from_date(date.today())
print("\n".join(map(str, generate_quarters(start, end))))
</code></pre>
<p>where <code>Quarter</code> is a simple <code>namedtuple</code> subclass:</p>
<pre><code>from collections import namedtuple

class Quarter(namedtuple('Quarter', 'year quarter')):
    __slots__ = ()

    @classmethod
    def from_string(cls, text):
        """Convert 'NQM' into Quarter(year=2000+N, quarter=M)."""
        year, quarter = map(int, text.split('Q'))
        return cls(year + 2000, quarter)

    @classmethod
    def from_date(cls, date):
        """Create Quarter from datetime.date instance."""
        return cls(date.year, (date.month - 1) // 3 + 1)

    def increment(self):
        """Return the next quarter."""
        if self.quarter &lt; 4:
            return self.__class__(self.year, self.quarter + 1)
        else:
            assert self.quarter == 4
            return self.__class__(self.year + 1, 1)

    def __str__(self):
        """Convert to "NQM" text representation."""
        return "{year}Q{quarter}".format(year=self.year-2000, quarter=self.quarter)
</code></pre>
<h3>Output</h3>
<pre><code>14Q3
14Q4
15Q1
15Q2
15Q3
</code></pre>
<p>The current quarter (<code>15Q4</code>) is not included.</p>
</div>
<div class="post-text" itemprop="text">
<p>not pretty but works</p>
<pre><code>import arrow
from datetime import datetime
a=arrow.Arrow.span_range('month', datetime(2012,7,1,0,0),datetime.now() )

for i in a:
    print i[1].floor('day').datetime.strftime("%Y-%m-%d")

b=[(x[1].date().month-1)//3 for x in a]
c=[]
for i in range(0,len(b),3):
    c.append(str(a[i][1].year)[2:]+"Q"+str(b[i]))
</code></pre>
</div>
<span class="comment-copy">What date would a quarter resolve to? The start, middle or end of the applicable quarter?</span>
<span class="comment-copy">Couldn't you just step up three months at a time?</span>
<span class="comment-copy">@ brandaemon, i guess i could, then use regex to covert? the month ends? there is no convention for quarters in <code>datetime</code> right?</span>
<span class="comment-copy">A text search "quarter" on the docs for <a href="https://docs.python.org/2/library/datetime.html" rel="nofollow noreferrer">2</a> and <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">3</a> yielded nothing.  Looks like you'll have to hand-code this one.  By the way, I didn't get a notification because of the space between @ and my username.</span>
<span class="comment-copy">Arrow supports 'quarter' timeframe, so you could save on quarter calculations</span>
