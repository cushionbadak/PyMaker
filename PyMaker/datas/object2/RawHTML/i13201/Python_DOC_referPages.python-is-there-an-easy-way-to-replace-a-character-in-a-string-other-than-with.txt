<div class="post-text" itemprop="text">
<p>For one of my assignments I have to replace a token character with another character of my choosing, in a string. Oh, but replace() is not an option</p>
<p>I'm new to this, so please don't tear me apart too hard :)</p>
<pre><code>def myReplace(content,token,new):
content = list(content)
newContent = []
newContent = list(newContent)
for item in content:
    if item == token:
        item = ''
        newContent[item].append[new]
return newContent
</code></pre>
<p>With the above, the intention is to check if every letter in the string matches the token character, and if it does, it is replaced with a new letter.</p>
<p>I have no idea what I need to add to this, or what I'm doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Find the character with index().
Concatenate the front, new char, and back.</p>
<pre><code>pos = str.index(old_char)
newStr = str[:pos] + new_char + str[pos+1:]
</code></pre>
<p>If you have more than one occurrence of old_char, you can iterate until they're all done, or put this into a function and recur on the back part of the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, since strings are iterable you can do this:</p>
<pre><code>def my_replace(original, old, new):
    return "".join(x if not x == old else new for x in original)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; my_replace("reutsharabani", "r", "7")
'7eutsha7abani'
</code></pre>
<p><strong>Explanation:</strong> This uses a <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a> to emit the new character whenever the old character is encountered, and uses <code>str.join</code> to join that expression with no separator (actually, empty string separator).</p>
<p><strong>Side note:</strong> You can't actually mutate strings, that is why all solutions must construct a new string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could iterate through each character and substitute your token character. You could do this by building a string:</p>
<pre><code>token = "$"
repl = "!"
s = "Hello, world$"

new_s = ""

for ch in s: 
    if ch == token:
        new_s += repl
    else:
        new_s += ch
</code></pre>
<p>Or using a generator with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a></p>
<pre><code>def replacech(s, token, repl):
    for ch in s:
        if ch == token:
            yield repl
        else:
            yield ch

s = "Hello, World$"
new_s = ''.join(replacech(s, "$", "!"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def repl(st,token,new):
    ind = st.index(token)
    st = st[:ind] + new +st[ind + len(new):]
    return st

print(repl("anaconda","co","bo"))

anabonda
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using regular expressions:</p>
<pre><code>import re

token = '-'
str = 'foo-bar'
new_str = re.sub(token, '', str)
</code></pre>
<p>This results in:</p>
<pre><code>boobar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One-liner if you know of translate() and string.maketrans()</p>
<pre><code>def myReplace(content, token, new):
    # Note: assumes token and new are single-character strings
    return content.translate(string.maketrans(token, new))
</code></pre>
</div>
