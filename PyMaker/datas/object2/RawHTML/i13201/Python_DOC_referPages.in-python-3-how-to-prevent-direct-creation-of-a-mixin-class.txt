<div class="post-text" itemprop="text">
<p>In Python 3, I want to write a class that should only be used as a mixin. Is there any way to prevent direct creation of it?</p>
<p>Here's a simple concrete example:</p>
<pre><code>class EqMixin:
    def __eq__(self, other):
        return type(self) == type(other) and self.__dict__ == other.__dict__
    def __hash__(self):
        return hash(tuple(sorted(self.__dict__.items())))
</code></pre>
<p>However, I want to allow</p>
<pre><code>class Bar(EqMixin):
    ...
</code></pre>
<p>without allowing</p>
<pre><code>foo = EqMixin()
</code></pre>
<p>How to do that?</p>
<p>Note: I can't just raise an exception in the <code>__init__</code> of EqMixin, because the <code>__init__</code> might be called by Bar's <code>__init__</code>.</p>
<p>Note: I don't want an abstract base class (or at least, I don't want to put any abstract methods into my mixin).</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this would do:</p>
<pre><code>&gt;&gt;&gt; class MustBeMixed(object):
...     def __init__(self):
...         if self.__class__ == MustBeMixed:
...             raise TypeError

&gt;&gt;&gt; MustBeMixed()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in __init__
TypeError
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; class Defuse(MustBeMixed):
...     def __init__(self):
...         super().__init__()
&lt;__main__.Defuse object at 0x1099f8990&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you want to create an <a href="https://www.python.org/dev/peps/pep-3119/" rel="nofollow">abstract base class</a>. Perhaps use the <a href="https://docs.python.org/3/library/abc.html#module-abc" rel="nofollow"><code>abc</code></a> module? As long as at least one abstract method on the class has not been overridden, the class cannot be instantiated.</p>
</div>
<span class="comment-copy">Do you think there's any way to improve your question?</span>
<span class="comment-copy">@PeterWood Improve in what way? Is it not clear enough what I'm asking?</span>
<span class="comment-copy">No, can you give an example, what you've tried, why it doesn't work.</span>
<span class="comment-copy">why bother?  presumably an <code>EqMixin</code> object is not useful by itself, so why would anyone make one in the first place?  or, if it <i>were</i> useful by itself, what would be the harm in allowing it?</span>
<span class="comment-copy">You could, but in my opinion doing this is sort of un-Pythonic, in the sense that "we're all consenting adults here". Naming your class <code>EqMixin</code> should be sufficient warning that it is not to be instantiated, but if you still feel that's not enough, just write as much in the documentation. If a user of your library <i>still</i> instantiates your mixin class, then he or she is responsible for whatever bad things happen. The advantage of this approach is that your code is kept clean and uncluttered, and if someone who really knows what he/she is doing wants to instantiate the mixin, they can.</span>
<span class="comment-copy">Yea seems good enough. I should have thought of that.</span>
<span class="comment-copy">I'm not making an abstract base class (or at least, I don't want to put any abstract methods into my mixin class). I edited my question with a simple concrete example, as further explanation.</span>
