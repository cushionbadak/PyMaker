<div class="post-text" itemprop="text">
<p>Many languages support <a href="https://en.wikipedia.org/wiki/Ad_hoc_polymorphism" rel="nofollow">ad-hoc polymorphism</a> (a.k.a. function overloading) out of the box. However, it seems that Python opted out of it. Still, I can imagine there might be a trick or a library that is able to pull it off in Python. Does anyone know of such a tool?</p>
<p>For example, in Haskell one might use this to generate test data for different types:</p>
<pre><code>-- In some testing library:
class Randomizable a where
   genRandom :: a

-- Overload for different types
instance Randomizable String where genRandom = ...
instance Randomizable Int    where genRandom = ...
instance Randomizable Bool   where genRandom = ...


-- In some client project, we might have a custom type:
instance Randomizable VeryCustomType where genRandom = ...
</code></pre>
<p>The beauty of this is that I can extend <code>genRandom</code> for my own custom types without touching the testing library.</p>
<p>How would you achieve something like this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>A Python function cannot be automatically specialised based on static compile-time typing. Therefore its result can only depend on its arguments received at run-time and on the global (or local) environment, unless the function itself is modifiable in-place and can carry some state.</p>
<p>Your generic function <code>genRandom</code> takes no arguments besides the typing information.  Thus in Python it should at least receive the type as an argument.  Since built-in classes cannot be modified, the generic function (instance) implementation for such classes should be somehow supplied through the global environment or included into the function itself.</p>
<p>I've found out that since Python 3.4, there is <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>@functools.singledispatch</code></a> decorator.  However, it works only for functions which receive a type instance (object) as the first argument, so it is not clear how it could be applied in your example.  I am also a bit confused by its <a href="https://www.python.org/dev/peps/pep-0443/#rationale-and-goals" rel="nofollow noreferrer">rationale</a>:</p>
<blockquote>
<p>In addition, it is currently a common anti-pattern for Python code to inspect the types of received arguments, in order to decide what to do with the objects.</p>
</blockquote>
<p>I understand that <em>anti-pattern</em> is a jargon term for a pattern which is considered undesirable (and does not at all mean the absence of a pattern).  The rationale thus claims that inspecting types of arguments is undesirable, and this claim is used to justify introducing a tool that will simplify ... dispatching on the type of an argument.  (Incidentally, note that according to <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 20</a>, "Explicit is better than implicit.")</p>
<p>The <a href="https://www.python.org/dev/peps/pep-0443/#alternative-approaches" rel="nofollow noreferrer">"Alternative approaches"</a> section of <a href="https://www.python.org/dev/peps/pep-0443" rel="nofollow noreferrer">PEP 443 "Single-dispatch generic functions"</a> however seems worth reading.  There are several references to possible solutions, including one to <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=101605" rel="nofollow noreferrer">"Five-minute Multimethods in Python"</a> article by Guido van Rossum from 2005.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is not a strongly typed language, so it really doesn't matter if yo have an instance of Randomizable or an instance of some other class which has the same methods.</p>
<p>One way to get the appearance of what you want could be this:</p>
<pre><code>types_ = {}
def registerType ( dtype , cls ) :
    types_[dtype] = cls
def RandomizableT ( dtype ) :
    return types_[dtype]
</code></pre>
<p>Firstly, yes, I did define a function with a capital letter, but it's meant to act more like a class. For example:</p>
<pre><code>registerType ( int , TheLibrary.Randomizable )
registerType ( str , MyLibrary.MyStringRandomizable )
</code></pre>
<p>Then, later:</p>
<pre><code>type = ... # get whatever type you want to randomize
randomizer = RandomizableT(type) ()
print randomizer.getRandom()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does this count for ad hock polymorphism?</p>
<pre><code>class A:
    def __init__(self):
        pass

    def aFunc(self):
        print "In A"

class B:
    def __init__(self):
        pass

    def aFunc(self):
        print "In B"

f = A()
f.aFunc()
f = B()
f.aFunc()
</code></pre>
<p>output</p>
<pre><code>In A
In B
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another version of polymorphism</p>
<pre><code>from module import aName
</code></pre>
<p>If two modules use the same interface, you could import either one and use it in your code. 
One example of this is <code>from xml.etree.ElementTree import XMLParser</code></p>
</div>
<span class="comment-copy">Provide an example of what you have in mind or how it would help you.</span>
<span class="comment-copy">I added an example. Hopefully that will earn your vote back.</span>
<span class="comment-copy">Python doesn't have strongly typed parameters to methods. Just have a single method that checks the type of the input and reacts accordingly. Same effect, no?</span>
<span class="comment-copy">@RobertB If you do that, then your cases are "closed" and you must modify the original method to add new types. That's what I'm trying to avoid and the main benefit of ad-hoc polymorphism.</span>
<span class="comment-copy">You really need to include examples of how you intend to USE whatever it is you want. Saying "Haskell can do this:" doesn't help because the syntaxes are different. What is it exactly that you want to do?</span>
<span class="comment-copy">I recently discovered singledispatch as well and you're right that it is the only "blessed" solution to this that I can find. Thank you for documenting it here!</span>
<span class="comment-copy">@ElliotCameron, I am glad that my answer was to the point, but i may later add more thoughts on "ad-hoc polymorphism" in Python.  The "blessed solution" looks hackish to me, in contradiction with its stated rationale, and inconsistent with the established approach.  Note that, <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=101605" rel="nofollow noreferrer">according</a> to Guido van Rossum, multimethods (generic functions) are not very OO.  It is not clear to me how the use of <code>singledispatch</code> decorator is better or different from multiple <code>elif</code>.</span>
<span class="comment-copy">I believe that the pure and proper way to have ad-hoc polymorphism in Python is to use duck typing, or, what amounts to the same, <a href="https://python-intro.readthedocs.io/en/latest/polymorphism.html#protocols" rel="nofollow noreferrer">protocols</a>.  This requires however that the developer of the generic function be able to modify the definitions of the classes for which the generic function is to be implemented.  This poses an obvious problem for built-in classes.  Subclassing built-in classes may work in some cases.  If not, any kind of a hack can do the job...</span>
<span class="comment-copy">The benefit over <code>if/elif</code> is that libraries can be extended without being modified. There is another way to do it, though. Instead of dispatching on type, libraries could ask that you provide the dispatch function yourself. This would be an argument, say, to a class that lets the application choose how to dispatch and optionally use the library-provided defaults. The problem with this is that it only works "post instantiation". For code that runs at import time, this gets trickier and using type-based dispatch can make that simpler.</span>
<span class="comment-copy">This is exactly what I need. It allows the original testing library to generate random data for my custom type without having to modify the library.</span>
<span class="comment-copy">That's just dynamic typing.</span>
<span class="comment-copy">You could write two objects with a method call draw, which would draw the object. One object will draw a circle, the other a square. This is a very common object oriented example. My dynamic typing example is one way of implemented in python which is not available in c++. Doesn't handle subtypes.</span>
<span class="comment-copy">In your example, I must know about both <code>A</code> and <code>B</code> in order to use them. The idea behind my example code is that the user of <code>genRandom</code> does not need to know about the type that it's dealing with. This means that a library can call it and <code>genRandom</code> data for a type that the library does not know about.</span>
<span class="comment-copy">I think i've understood the real problem with this code: it is not that the user of <code>genRandom</code> needs to know about <code>A</code> and <code>B</code> (i do not see why he would need it), but that to implement the instances of the generic function for <code>A</code> and <code>B</code>, one needs to have access to the source code of <code>A</code> and <code>B</code> and be able to modify it.</span>
