<div class="post-text" itemprop="text">
<p>What is the "optimal" way to list all class methods of a given class using <code>inspect</code>? It works if I use the <code>inspect.isfunction</code> as predicate in <code>getmembers</code> like so</p>
<pre><code>class MyClass(object):
    def __init(self, a=1):
        pass
    def somemethod(self, b=1):
        pass

inspect.getmembers(MyClass, predicate=inspect.isfunction)
</code></pre>
<p>returns</p>
<pre><code>[('_MyClass__init', &lt;function __main__.MyClass.__init&gt;),
 ('somemethod', &lt;function __main__.MyClass.somemethod&gt;)]
</code></pre>
<p>But isn't it supposed to work via <code>ismethod</code>?</p>
<pre><code> inspect.getmembers(MyClass, predicate=inspect.ismethod)
</code></pre>
<p>which returns an empty list in this case. Would be nice if someone could clarify what's going on. I was running this in Python 3.5.</p>
</div>
<div class="post-text" itemprop="text">
<p>As described in the documentation, <a href="https://docs.python.org/3/library/inspect.html#inspect.ismethod" rel="noreferrer"><code>inspect.ismethod</code></a> will show bound methods. This means you have to create an instance of the class if you want to inspect its methods. Since you are trying to inspect methods on the un-instantiated class you are getting an empty list.</p>
<p>If you do:</p>
<pre><code>x = MyClass()
inspect.getmembers(x, predicate=inspect.ismethod)
</code></pre>
<p>you would get the methods.</p>
</div>
<span class="comment-copy">Simply overlooked this part, thanks.</span>
