<div class="post-text" itemprop="text">
<p>my code needs to ask the user for 3 numbers. if the numbers are over <code>100</code> or under <code>1</code>, tell them <code>"no way, try a different number"</code>
My problem is: I can't figure out how to define my variable <code>prompt</code>, and am getting the below <code>stacktrace</code> when I run my code.</p>
<p>Code:</p>
<pre><code>def get_int(prompt, minval, maxval):
    """gets a value for an input. if its too small or large gives error"""
    n= int(input("Choose a number between 1 and 100: "))
    maxval= n &gt; 100
    minval= n&lt; 1
    prompt = n

    int_choice.append(n)
    return None


int_choice=[]# list for adding inputs

for i in range (3):
    get_int(prompt, minval, maxval)

    if n== minval or n== maxval:
        print("no way, try a diffrent number")
    int_choice.append(n)
    print("you chose: ", int_choice) 
</code></pre>
<p>Stacktrace:</p>
<pre><code>&gt;line 18, in &lt;module&gt;  
get_int(prompt, minval, maxval)  
NameError: name 'prompt' is not defined
 is the error message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is how I would approach the get_int function:</p>
<pre><code>def get_int(prompt, minval, maxval):
    '''Prompt for integer value between minval and maxval, inclusive.
    Repeat until user provides a valid integer in range.
    '''
    while 1:
        n = int(input(prompt))
        if (n &lt; minval):
            print("value too small")
            print("value must be at least {0}".format(minval))
        elif (n &gt; maxval):
            print("value too large")
            print("value must be not more than {0}".format(maxval))
        else:
            print("value accepted")
            return n
    pass
    # TODO: raise a ValueError or a RuntimeError exception 
    # if user does not provide valid input within a preset number tries

if __name__ == "__main__":
    # Example: test the get_int function
    # Requires user interaction.
    # Expect out-of-range values 0, 101, -5, etc. should be rejected.
    # Expect range limit values 1 and 100 shoudl be accepted.
    # Expect in-range values like 50 or 75 should be accepted.
    minval = 1
    maxval = 100
    test1 = get_int("Choose a number between {0} and {1}: ".format(
        minval,maxval), minval, maxval)
    print("get_int returned {0}".format(test1))
</code></pre>
<p>Inside function <code>get_int</code>, the <code>prompt</code>, <code>minval</code>, and <code>maxval</code> arguments are already defined because they are in the argument list. The <code>prompt</code> argument is passed to the <code>input()</code> function, and then the <code>minval</code> and <code>maxval</code> limits are used for range checking within an infinite while loop. The function returns a valid number within the range. If the user enters an integer that's out of range, we ask them again until they give an acceptable input. So the caller is guaranteed to get an integer within the specified range.</p>
<p>This isn't ideal design, because what if the user doesn't want to enter a number, but they want to "navigate back"... so that's outside the scope of this approach. But there is a more advanced programming technique called exception handling (read up on <code>try</code> / <code>catch</code> / <code>throw</code> for examples) <a href="https://docs.python.org/2.0/ref/try.html" rel="nofollow">7.4. The try statement</a>.</p>
<p>Outside the function, where <code>get_int</code> is invoked, the <code>minval</code> and <code>maxval</code> are defined as global variables in the main module namespace. For testing I just ran in interactive mode, accepting a single value. Tested on python 2.7 and python 3.2.</p>
<p>If you've never seen the <code>"xxxxx {0} xxxx".format(value)</code> string formatting expression before, that's described in the python help files section <a href="https://docs.python.org/3/library/string.html#string-formatting" rel="nofollow">6.1.2. String Formatting</a> and <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow">6.1.3.2. Format examples</a>.</p>
</div>
<span class="comment-copy">before you call get_int, define prompt as promt = "" (right before get_int(prompt, minval, maxval) in the for loop)</span>
<span class="comment-copy">What value do you want <code>prompt</code> to have?  What do you intend your code to do?</span>
<span class="comment-copy">not just prompt value is broken, all script is using get_int vars outside it</span>
<span class="comment-copy">He wants to compare <code>minval= n&lt; 1</code>  when <code>minval</code> is a <code>bool</code> with <code>if n== minval or n== maxval:</code> is a <code>int</code>?</span>
<span class="comment-copy">As written, function <code>get_int</code> gets three arguments (<code>prompt, minval, maxval</code>) but then discards the argument values, returns nothing, and doesn't even change any global variables. "Prompt" means the message that requests user input. So inside get_int, you want to use <code>input(prompt)</code>, and invoke the function with <code>get_int("Choose a number between {0} and {1}: ".format(minval,maxval), minval, maxval)</code>. Before that, you need to assign values to minval and maxval.</span>
