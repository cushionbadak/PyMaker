<div class="post-text" itemprop="text">
<p>Using IDLE Python 3.4.3. This is a script that gives the user a small quiz, then calculates how many the got right. I'm having an invalid syntax error in a comment before my script runs. Here is the whole code around the comment. The specific comment is under the line <code>score = decimal.Decimal(score)</code>:</p>
<pre><code>score = amountright/7*100 """this takes the amount of questions the user got right, divides it by 7 (the total number of questions), then multiplies it by 100 to get a percentage correct and stores it in the variable score"""
import decimal """this will import a function to round off the final percentage to a whole number instead of an unnecessarily long decimal"""
score = decimal.Decimal(score)
"""this redefines the score variable as some sort of roundable decimal. the round() function in the line below will still function without this line, but it would print an unneeded .0 before the %"""
print ("You got " + str(amountright) + " out of 7 right, or " + str(round(score,0)) + "%.")
"""the round() function works by rounding the first argument to n places in the second argument"""
</code></pre>
<p>I run this, get the invalid syntax error, then it highlights the s and c in the word <code>score</code> red. using ' makes no difference in this. However, when I run the code like this:</p>
<pre><code>"""
This redefines the score variable as some sort of roundable decimal. the round() function in the line
below will still function without this line, but it would print an unneeded .0 before the %
"""
</code></pre>
<p>It still gives a syntax error, but this time only highlights the s in <code>score</code> red. 
repr added by unutbu's request:</p>
<pre><code>print ("Here is a quiz!\n") #starting prompt

useranswer = input("Question 1: What is 4+|6x1|? ")
#this is where the user enters their answer to the question

#the following 2 variables on lines 7 and 9 only need to be defined once
rightanswerresult = "Correct! Next question:\n" #tells the user they are correct
invalidanswerresult = "This is not a number. This is counted as a wrong answer.\n"
"""if the user does not answer with a number, this string will print telling them so and the question will
be counted wrong"""

amountright = 0 #this number increases every time the user answers a question correctly

if useranswer.isdigit(): #if the user's answer is a number, the code below runs
    if useranswer == "10":
    #this checks if the user's answer and the correct answer are the same, then runs the code below if they are"""
        print (rightanswerresult) #this prints the variable rightanswerresult described on line 7
        amountright += 1 #this will add the value one to the variable amountright described on line 13
    else: #if the user's answer and the correct answer are not the same, the code below runs
        print ("Wrong, it was 10. Next question:\n") #tells the user they were wrong
else: #if the user's answer is NOT a number, this runs
    print (invalidanswerresult) #this prints the varible invalidanswerresult described in line 9
#this pattern is repeated 5 more times. an altered process is used for the True/False question (#7)
useranswer = input("Question 2: What is (15/3) x 12? ")
if useranswer.isdigit():
    if useranswer == "60":
        print (rightanswerresult)
        amountright += 1
    else:
        print ("Wrong, it was 60. Next question:\n")
else:
    print (invalidanswerresult)

useranswer = input("Question 3: What is 20+24/12? ")
if useranswer.isdigit():
    if useranswer == "22":
        print (rightanswerresult)
        amountright += 1
    else:
        print ("Wrong, it was 22. Next question:\n")
else:
    print (invalidanswerresult)

useranswer = input("Question 4: Solve for x: 2x-1=5 ")
if useranswer.isdigit():
    if useranswer == "3":
        print (rightanswerresult)
        amountright += 1
    else:
        print ("Wrong, it was 3. Next question:\n")
else:
    print (invalidanswerresult)

useranswer = input("Question 5: What is the square root of 256? ")
if useranswer.isdigit():
    if useranswer == "16":
        print (rightanswerresult)
        amountright += 1
    else:
        print ("Wrong, it was 16. Next question:\n")
else:
    print (invalidanswerresult)

useranswer = input("Question 6: What is 7x7+7/7-7? ")
if useranswer.isdigit():
    if useranswer == "1":
        print (rightanswerresult)
        amountright += 1
    else:
        print ("Wrong, it was 1. Next question:\n")
else:
    print (invalidanswerresult)
#the question below appears different because it is True/False and the last question
useranswer = input("Question 7: True or False: |3|=98/2 ").lower() #as before, the user is asked a question
if useranswer == "false": #checks if user's answer is false, and runs code below if it is
    print ("You're right! Your results are below:\n") #this tells the user they are correct then shows them their final score
    amountright += 1 #as before, this will add the value one to the variable amountright described on line 8
if useranswer == "true": #checks if user's answer is true, and runs code below if it is
    print ("Actually, its false. Your results are below:\n") #this tells the user they are wrong then shows them their final score
elif useranswer != "false" and useranswer != "true": #if the user's answer is not true or false, this code runs
    print ("It seem you didn't enter true or false. Maybe you made a spelling error? Anyways, your results are below:\n")
    """tells user their answer is invalid then shows final score"""
#all questions have been completed. below is the final score calculation
score = amountright/7*100 """this takes the amount of questions the user got right, divides it by 7
(the total number of questions), then multiplies it by 100 to get a percentage correct and stores
it in the variable score"""
import decimal """this will import a function to round off the final percentage to a whole number
instead of an unnecessarily long decimal"""
score = decimal.Decimal(score)
"""this redefines the score variable as some sort of roundable decimal. the round() function in the line
below will still function without this line, but it would print an unneeded .0 before the %"""
print ("You got " + str(amountright) + " out of 7 right, or " + str(round(score,0)) + "%.")
"""the round() function works by rounding the first argument to n places in the second argument"""
</code></pre>
<p>Is there an error with the comment?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>#</code> is used to indicate the start of a <a href="https://docs.python.org/3/tutorial/introduction.html#an-informal-introduction-to-python" rel="nofollow noreferrer">comment</a>. Triple quotes are used to indicate the start and end of <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">multiline strings</a>. Although strings are not comments, sometimes <a href="https://stackoverflow.com/a/7696966/190597">multiline strings can be used as multiline comments</a>. </p>
<p>However, the placement of the string still has to abide by <a href="https://docs.python.org/3/reference/simple_stmts.html#simple-statements" rel="nofollow noreferrer">Python syntax rules</a>.</p>
<pre><code>score = amountright/7*100 """this takes the amount..."""
</code></pre>
<p>raises a SyntaxError because the string follows an expression which is not a string. <code>amountright/7*100 """this takes the amount..."""</code> is roughly equivalent to </p>
<pre><code>&gt;&gt;&gt; 1 "foo"
SyntaxError: invalid syntax
</code></pre>
<p>Python does not know how to evaluate a number followed by a string. Even if it could be evaluated, the value would be <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assigned to <code>score</code></a>. The multiline string would not be interpreted as a comment. For the multiline string to act as a comment it must be on a line by itself:</p>
<pre><code>score = amountright/7*100 
"""this takes the amount of questions the user got right, divides it by 7
(the total number of questions), then multiplies it by 100 to get a percentage correct and stores it in the variable score"""

import decimal 
"""this will import a function to round off the final percentage to a whole number
instead of an unnecessarily long decimal"""
</code></pre>
<p>or, use the more commonly used comment syntax:</p>
<pre><code>score = amountright/7*100 
# this takes the amount of questions the user got right, divides it by 7 (the
# total number of questions), then multiplies it by 100 to get a percentage
# correct and stores it in the variable score
</code></pre>
<p>Putting a <code>#</code> in front of every line might seem like a pain, but a good text
editor for programming in Python should have a way for you to select a region of text and
press a button or key combination to insert the <code>#</code> signs for you. If your
editor does not have this feature, <a href="https://wiki.python.org/moin/PythonEditors" rel="nofollow noreferrer">find one that
does</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar problem:
Sometimes IDLE points you in the wrong direction and says "invalid syntax" when there is a wrong character at the wrong place, e.g.</p>
<pre><code>print(f"value of counter = {counter}")
</code></pre>
<p>works well let's say in line 50, but</p>
<pre><code>print(f"value of counter = {counter]}")
</code></pre>
<p>produces the message "invalid syntax" pointing to a irrelevant comment in line 1</p>
<p>It took me some time to find the typo "]" in the formatted string.
So always check your braces!</p>
</div>
<span class="comment-copy">I'm not able to reproduce this.</span>
<span class="comment-copy">There might be some hidden (unprintable?) character in the file. It might help to save the script to a file, say <code>script.py</code>, then open the file: <code>f = open('script.py', 'rb')</code> and look at the <i>repr</i> of the contents: <code>print(repr(f.read()))</code>. We might be able to help you more if you post the <code>repr</code>.</span>
<span class="comment-copy">Are you sure that this error is about the comment? What's your code? Or try delete these comment then run your code?</span>
<span class="comment-copy">I can't reproduce this either...</span>
<span class="comment-copy">@MorganThrapp me either. works fine in a new file</span>
<span class="comment-copy">I tried putting the comment in 2 lines with <code>#</code>s. still getting a syntax error, but no highlighted portion, and idle places the cursor between the i and m in the word decimal. Is idle just... bad?</span>
<span class="comment-copy">Ok don't ask me how why but after changing all my other """ comments to # too the script ran fine</span>
<span class="comment-copy">@dioretsa: IDLE compiles Python code with the builtin compile function.  The compile function raises SyntaxErrors.  The only thing IDLE editor does differently from interactive console python is to mark the location indicated in the attributes of the SyntaxError with the cursor (and red highlight) in the line instead of a caret (shift 6) on the line underneath.</span>
