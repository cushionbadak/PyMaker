<div class="post-text" itemprop="text">
<p>What I need to do is read <strong>x</strong> amount of accounts from a file based on the amount of lines and make <strong>x</strong> amount of individual sockets that I can manipulate as much as I like (send messages to IRC and anything else)</p>
<p>How I'm going about it as of now:</p>
<pre><code>lines=tuple(open('accts.txt', 'r'))
for line in lines:
    data=line.split(' ',1)
    a=threading.Thread(target=Spawn,args=(data[0].replace('\n',''),data[1].replace('\n','')))
    a.start()

#s.send wont work here because it doesn't exist in this context
</code></pre>
<p>I tried to use threads but it seems threads don't allow you to access them from outside of the thread itself from what I understand</p>
<p>Must support a <code>while True:</code> in a thread but I can live w/o it if its not posible</p>
<p>Here is the Spawn function that was being created by the thread:</p>
<pre><code>def Spawn(nick,password):
    Active=True

    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect(('irc.boats.gov',6667))
    s.send('PASS '+password+'\r\n')
    s.send('NICK '+nick+'\r\n')
    s.send('JOIN '+channel+'\r\n')

    while True:
        buf=s.recv(1024)
        if('PRIVMSG' in buf):
            sender=buf.split('!',1)[0].split(':')
            message=buf.split(':',2)[2].replace('\n','')
            if(sender[1]==owner):
                if(sender[1]==owner):
                    if(message.strip()=='!stop'):
                        Active=False
                        print '('+nick+')'+' has been disabled'
                    else:
                        if(message.strip()=='!start'):
                            Active=True
                            print '('+nick+')'+' has been enabled'
                        else:
                            if(Active):
                                print 'sent'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to create multiple connections you can do it like this:</p>
<pre><code>from socket import *
SERVER       = ('irc.boats.gov',6667)  # Server address


# Open up connections
connections = []
with open('accts.txt', 'r') as f:
    for line in f:
        s = socket(AF_INET,SOCK_STREAM)
        s.connect(SERVER)
        connections.append(s)
        s.send('PASS '+password+'\r\n')
        s.send('NICK '+nick+'\r\n')
        s.send('JOIN '+channel+'\r\n')
</code></pre>
<p>Then you can do whatever you want with them with <a href="https://docs.python.org/3/library/select.html" rel="nofollow"><code>select</code></a> module for example. Threads won't help much here and can even degrade performance. You could also try Twisted, as suggested or use multiple processes.</p>
<p><a href="http://www.dabeaz.com/coroutines/" rel="nofollow">Here is a nice related read</a> from David Beazley on concurrency, I adapted the code from it.</p>
</div>
<span class="comment-copy">How many sockets are you planning to open at the same time? If they could become thousands we could exceed the practical limit for the number of threads.</span>
<span class="comment-copy">How about twisted instead?</span>
<span class="comment-copy">@olivecoder only 20-30 if even that</span>
<span class="comment-copy">Do you have an example with select? It seems confusing</span>
<span class="comment-copy"><a href="http://www.dabeaz.com/coroutines/blaster.py" rel="nofollow noreferrer">This one</a> uses <a href="https://docs.python.org/3/library/select.html#select.select" rel="nofollow noreferrer">select.select</a></span>
