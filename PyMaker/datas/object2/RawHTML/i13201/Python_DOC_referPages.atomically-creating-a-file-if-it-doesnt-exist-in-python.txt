<div class="post-text" itemprop="text">
<p>I am looking for an atomic version of the following:</p>
<pre class="lang-py prettyprint-override"><code>import os

def tryMakeFile(filename):
    try:
        with open(filename) as _:
            return False
    except FileNotFoundError:
        with open(filename, mode='a') as _:
            return True
</code></pre>
<p>(Please don't comment on stylistic issues here - I know this code is bad in many ways, but it suffices to illustrate my question.)</p>
<p>In other words, I'm looking for a way to check if a file exists, and create it if it doesn't, in Python, in such a way that I know which happened. But done in such a way that there isn't a race condition between multiple processes (in my given example code, two processes could both think they created the file, if the second process ran while the first was suspended between the first and second open calls).</p>
<p>Or, to put it another way, I am looking for a Python equivalent of Java's <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createFile%28java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...%29" rel="noreferrer">Files.createFile</a> call.</p>
<p>Edit: note that when I say "Python" I mean "portable Python". Saying "use this library* (*this library is only available on Windows, or not on Windows, or only on the second Tuesday after a blue moon)" isn't what I'm looking for. I'm looking for something that is explicitly atomic, part of the standard library and/or builtins, and it's available on common platforms.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/os.html#os.open" rel="noreferrer">os.open</a> with <code>os.O_CREAT | os.O_EXCL</code> <a href="https://docs.python.org/2/library/os.html#open-flag-constants" rel="noreferrer">flags</a> which will fail if the file exists, they are according to the docs <em>available on Unix and Windows</em> but I am not sure if atomic file creation exists on windows or not:</p>
<pre><code>os.open("filename", os.O_CREAT | os.O_EXCL)
</code></pre>
<p>From the linux <a href="http://linux.die.net/man/3/open" rel="noreferrer">open man page</a>:</p>
<blockquote>
<p>O_EXCL
  If O_CREAT and O_EXCL are set, open() shall fail if the file exists. The check for the existence of the file and the creation of the file if it does not exist shall be atomic with respect to other threads executing open() naming the same filename in the same directory with O_EXCL and O_CREAT set. If O_EXCL and O_CREAT are set, and path names a symbolic link, open() shall fail and set errno to [EEXIST], regardless of the contents of the symbolic link. If O_EXCL is set and O_CREAT is not set, the result is undefined.</p>
</blockquote>
<p>Not sure what you want to do if the file exists but you just need to catch a <code>FileExistsError</code> when the file does already exist:</p>
<pre><code>import os

def try_make_file(filename):
    try:
        os.open(filename,  os.O_CREAT | os.O_EXCL)
        return True
    except FileExistsError:
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have Python 3.3 or better, you could use the 'x' mode with <a href="http://docs.python.org/3/library/functions.html#open" rel="noreferrer"><code>open()</code></a>:</p>
<blockquote>
<p>'x'   open for exclusive creation, failing if the file already exists</p>
</blockquote>
<pre><code>def tryMakeFile(filename):
    try:
        with open(filename, "x") as _:
            return False
    except FileExistsError:
        return True
</code></pre>
</div>
<span class="comment-copy">what about <a href="https://pypi.python.org/pypi/lockfile" rel="nofollow noreferrer">pypi.python.org/pypi/lockfile</a> ?</span>
<span class="comment-copy">That library relies on <code>os.mkdir</code> being atomic, which I don't see as being documented anywhere.</span>
<span class="comment-copy">fcntl.lockf ? fcntl.flock ?</span>
<span class="comment-copy">Not portable, as far as I know. I'd love to be wrong, though.</span>
<span class="comment-copy">flock is posix, you should have it on pretty much everything but windows. for Windows API, LockFile and LockFileEx syscalls i think (haven't checked).</span>
<span class="comment-copy">When it says other threads, is that only within the same process, or does that extend to other processes as well?</span>
<span class="comment-copy">It includes other processes in linux, I cannot speak for windows as I never use it, using O_EXCL  is used to avoid race conditions in lock files etc...</span>
<span class="comment-copy">That mentions nothing about atomicity, however.</span>
<span class="comment-copy">@TLW: It seems to be a shortcoming of the documentation. The 'exclusive creation' semantics does imply atomicity. See also <a href="http://stackoverflow.com/a/29295749/244297">stackoverflow.com/a/29295749/244297</a></span>
<span class="comment-copy">That link does not explain anything beyond a restating of the documentation.</span>
