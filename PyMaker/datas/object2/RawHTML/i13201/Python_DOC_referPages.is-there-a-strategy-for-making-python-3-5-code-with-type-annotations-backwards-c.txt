<div class="post-text" itemprop="text">
<p>I want to support new Python features in my open-source libraries. Python's new type-hinting makes it easier for users to use my software.</p>
<p>But it comes with a snag - it relies on a library called <code>typing</code> for some of the more interesting type annotations. That library doesn't exist in Python &lt; 3.5. </p>
<p>Normally I'd handle that using a compatibility library (e.g. <code>six</code>), however there's no support for the <code>typing</code> module in <code>six</code> yet. </p>
<p>Another acceptable solution might be something like a <code>3to2</code> converter which can strip away the unsupported features. Unfortunately I've not yet seen a 3.5 to 3.(x&lt;5) converter. </p>
<p>It seems that the only alternative available right now would be to wrap all my typedef imports into try-blocks and provide a fake typedef for the older versions of the language. That's ugly and not really the way I want to take my project.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Type hinting in Python 3.5 consists of two parts:</p>
<ul>
<li>A library of type hinting objects, called <a href="https://docs.python.org/3/library/typing.html" rel="nofollow"><code>typing</code></a></li>
<li>The annotation syntax</li>
</ul>
<p>Both can be used in earlier Python versions, or can be made to work where the annotation syntax is not yet supported.</p>
<p>The module has been <a href="https://pypi.python.org/pypi/typing" rel="nofollow">backported to Python 3.2 and newer</a>. Annotations have been supported by all Python 3 versions, right from 3.0 onwards, see <a href="https://www.python.org/dev/peps/pep-3107" rel="nofollow">PEP 3107</a>. That means type-hinted code can work for all widely-used Python 3 distributions.</p>
<p>For Python 2.x, you can use <a href="https://www.python.org/dev/peps/pep-0484/#stub-files" rel="nofollow">stub files</a> instead; these are not actually executed and only the static analysis tool needs to be able to parse these. You'd still 'import' the <code>typing</code> module for these, but the module is never actually loaded, nor does it need to be installed for stub files. Stub files have the <code>.pyi</code> extension and live next to their <code>.py</code> counterparts, but include the full annotation, but no function bodies (you shoud use the <code>...</code> ellipsis literal instead).</p>
<p>You could look at the <a href="https://github.com/python/mypy/wiki/Creating-Stubs-For-Python-Modules" rel="nofollow">Mypy stub specifications</a> for how this'll work in practice; the Python type hinting PEP was largely inspired by tools like Mypy.</p>
</div>
<span class="comment-copy">Google doesn't turn up any such library, but there <i>is</i> a <code>typing</code> module. Is that what you're talking about? Because <a href="https://pypi.python.org/pypi/typing" rel="nofollow noreferrer">there's a version of that for Python &lt;3.5</a>.</span>
<span class="comment-copy">sorry, you are right - are you suggesting just add it as a install-time dependency for python &lt; 3.5</span>
<span class="comment-copy">That, or you'll have to decide between not using <code>typing</code> or not supporting Python &lt;3.5.</span>
<span class="comment-copy">Well, that's the premise of the question: I want to use the new features and I want to make it support older versions. Using a backport is an acceptable solution because I can selectivly install it.</span>
<span class="comment-copy"><a href="https://github.com/python/mypy/wiki/Creating-Stubs-For-Python-Modules" rel="nofollow noreferrer">github.com/python/mypy/wiki/Creating-Stubs-For-Python-Modules</a> Correct link to mypy's document page.</span>
<span class="comment-copy">@yegle: thanks for the heads-up, the wiki moved from the website to the github project.</span>
