<div class="post-text" itemprop="text">
<p>I have data grabbed to Python that is in table form:</p>
<pre><code>Name  Sport   Score  
John  Golf    100
Jill  Rugby   55
John  Hockey  100
Bob   Golf    45
</code></pre>
<p>How can I format this table in Python that would make it easy to sort or group items. For example, if I wanted to see all the names of people that played Golf or all of the people that scored 100 on any sport. Or all of the data for just John.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>pandas</code>' <code>DataFrame</code> will be the way to go:</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jill', 'John', 'Bob'], 
                   'Sport' : ['Golf', 'Rugby', 'Hockey', 'Golf'],
                   'Score': [100, 50, 100, 45]}) 

# the names of people that played Golf

df[df['Sport'] == 'Golf']['Name'].unique()
&gt;&gt; ['John' 'Bob']

# all of the people that scored 100 on any sport.

df[df['Score'] == 100]['Name'].unique()
&gt;&gt; ['John']

# all of the data for just John.
df[df['Name'] == 'John']
&gt;&gt;    Name  Score   Sport
   0  John    100    Golf
   2  John    100  Hockey
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> and <code>filter</code> with <code>namedtuple</code>s and <code>lambda</code>s can be used for this task.</p>
<pre class="lang-py prettyprint-override"><code>from collections import namedtuple

# Create a named tuple to store the rows
Row = namedtuple('Row', ('name', 'sport', 'score'))

data = '''Name  Sport   Score  
          John  Golf    100
          Jill  Rugby   55
          John  Hockey  100
          Bob   Golf    45'''

# Read the data, skip the first line
lines = data.splitlines()[1:]
rows = []
for line in lines:
    name, sport, score = line.strip().split()
    rows.append(Row(name, sport, int(score)))

# People that played Golf
golf_filter = lambda row: row.sport == 'Golf'
golf_players = filter(golf_filter, rows)

# People that scored 100 on any sport
score_filter = lambda row: row.score == 100
scorers = filter(score_filter, rows)

# People named John
john_filter = lambda row: row.name == 'John'
john_data = filter(john_filter, rows)

# If you want a specific column than you can map the data
# Names of golf players
get_name = lambda row: row.name
golf_players_names = map(get_name, golf_players)
</code></pre>
<p>Results:</p>
<pre><code>&gt;&gt;&gt; golf_players
[Row(name='John', sport='Golf', score=100),
 Row(name='Bob', sport='Golf', score=45)]

&gt;&gt;&gt; john_data
[Row(name='John', sport='Golf', score=100),
 Row(name='John', sport='Hockey', score=100)]

&gt;&gt;&gt; scorers
[Row(name='John', sport='Golf', score=100),
 Row(name='John', sport='Hockey', score=100)]

&gt;&gt;&gt; golf_players_names
['John', 'Bob']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this one?</p>
<pre><code>yourDS={"name":["John","Jill","John","Bob"],
    "sport":["Golf","Rugby","Hockey","Golf"],
    "score":[100,55,100,45]
}
</code></pre>
<p>This should hold the relation of each entry as list are ordered.</p>
<p>To avoid the effect of duplicate element in a list, first make a new <code>set</code> from the list.</p>
<p>For your expected query, you can do something like that.</p>
<pre><code>for index,value in enumerate(yourDS["score"]):
    if value=="x":
        print yourDS["name"][index] 
</code></pre>
<p>It's better to use a <code>list</code> to store the result and make it a <code>set</code>, to avoid some cases for example, if a man has score of <code>x</code> in two different games.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create list of lists. each row will be a list inside a list.</p>
<pre><code>lst1=[['John','Golf',100],['Jill','Rugby',55],['John','Hockey',100],['Bob','Golf',45]]
lst100=[]
for lst in lst1:
    if lst[2]==100:
        lst100.append(lst)
print lst100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to <em>retrieve information</em> based on your data, I'd go with SQL.  It's well-suited to answering questions like these:</p>
<blockquote>
<p>...to see all the names of people that played Golf...</p>
<p>...all of the people that scored 100 on any sport...</p>
<p>...all of the data for just John.</p>
</blockquote>
<p>The most popular database language these days is SQL, and as it happens Python actually has built-in support for it through the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow"><code>sqlite3</code> module</a>.</p>
<p>SQL, while not a monumental task to learn, is beyond the scope of this answer.  To learn that, I'd recommend checking out <a href="https://www.codecademy.com/en/courses/learn-sql" rel="nofollow">Codecademy</a>, <a href="https://www.codeschool.com/" rel="nofollow">Code School</a>, or <a href="http://sqlzoo.net/" rel="nofollow">SQLZOO</a> (they're all interactive).</p>
<p>Or, if you just want to read it in and write it out without caring about what it actually means, consider using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a>, which is also built-in.</p>
</div>
<span class="comment-copy">Please clarify; is your problem <i>storing</i> this data, or <i>printing</i> this data?</span>
<span class="comment-copy">ordered dictionary or named tuple may serve your purpose</span>
<span class="comment-copy">@JesseTG The data will be stored and then written to excel</span>
<span class="comment-copy">@AhsanulHaque Everyone says that dictionaries are inherently unordered?</span>
<span class="comment-copy">Is there a reason why you do not use pandas ?</span>
<span class="comment-copy">But how would I "query" it, for example, how would I get all of the people that have score x</span>
<span class="comment-copy">@Prof, see the updated answer</span>
<span class="comment-copy">Yes I thought this all sounds perfect for SQL but as I want to develop this code for users that may not have SQL installed (may even push this as .exe with dependancies bundled in) how would that affect things?</span>
<span class="comment-copy">Actually, <code>sqlite3</code> is bundled with python, so it's already there.  Part of the standard library.</span>
