<div class="post-text" itemprop="text">
<p>I have a list like this, where the first number in string of each element is exactly the index of each element:</p>
<pre><code>list = [" ","1- make your choice", "2- put something and make", "3- make something happens", "4- giulio took his choice so make","5- make your choice", "6- put something and make", "7- make something happens", "8- giulio took his choice so make","9- make your choice", "10- put something and make", "11- make something happens", "12- giulio took his choice so make"]
</code></pre>
<p>I want to return for each word in element list the index of "element of list" where(the word) is located:</p>
<pre><code>for x in list:
    ....
</code></pre>
<p>I mean this something like this:</p>
<pre><code>position_of_word_in_all_elements_list = set("make": 1,2,3,4,5,6,7,8,9,10,11,12)    

position_of_word_in_all_elements_list = set("your": 1,5,9)

position_of_word_in_all_elements_list = set("giulio":4,8,12)
</code></pre>
<p>any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will find occurrences for all strings in the input, even such as "1-" etc. But filtering the records you do not like from the result should not be a big deal really:</p>
<pre><code># find the set of all words (sequences separated by a space) in input
s = set(" ".join(list).split(" "))

# for each word go through input and add index to the 
# list if word is in the element. output list into a dict with
# the word as a key
res = dict((key, [ i for i, value in enumerate(list) if key in value.split(" ")]) for key in s)
</code></pre>
<blockquote>
<p>{'': [0], 'and': [2, 6, 10], '8-': [8], '11-': [11], '6-': [6], 'something': [2, 3, 6, 7, 10, 11], 'your': [1, 5, 9], 'happens': [3, 7, 11], 'giulio': [4, 8, 12], 'make': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], '4-': [4], '2-': [2], 'his': [4, 8, 12], '9-': [9], '10-': [10], '7-': [7], '12-': [12], 'took': [4, 8, 12], 'put': [2, 6, 10], 'choice': [1, 4, 5, 8, 9, 12], '5-': [5], 'so': [4, 8, 12], '3-': [3], '1-': [1]}</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>First of all rename your list to not interfere with Python builtin stuff
so</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; li = [" ","1- make your choice", "2- put something and make", "3- make something happens", "4- giulio took his choice so make","5- make your choice", "6- put something and make", "7- make something happens", "8- giulio took his choice so make","9- make your choice", "10- put something and make", "11- make something happens", "12- giulio took his choice so make"]`
&gt;&gt;&gt; dd = defaultdict(list)
&gt;&gt;&gt; for l in li:
        try: # this is ugly hack to skip the " " value
            index,words = l.split('-')
        except ValueError:
            continue
        word_list = words.strip().split()
        for word in word_list:
            dd[word].append(index)
&gt;&gt;&gt; dd['make']
['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']
</code></pre>
<p>what defaultdict does:
it works like normal dictionary as long as the key (word in our case) is present in the dictionary. If the key doesnt exist, it creates it with its value corresponding to, in our case empty list, as specified when you declare it <code>dd = defaultdict(list)</code>. I am not the best explainer so I suggest reading on defauldict elsewhere if it is not clear :) </p>
</div>
<div class="post-text" itemprop="text">
<p>@Oleg wrote a great nerdy solution. I came up with the following simple method for this problem.</p>
<pre><code>def findIndex(st, lis):
    positions = []
    j = 0
    for x in lis:
        if st in x: 
            positions.append(j)
            j += 1
    return positions
</code></pre>
<blockquote>
<p>$&gt;&gt;&gt; findIndex('your', list)</p>
<p>[1, 5, 9]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I need to use the number on string to take the ID, and for this i have the solution... but as you remember i have to get all ID for each word in element.</p>
<pre><code>lst = [" ","1- make your choice", "2- put something and make", "3- make something happens", 
"4- giulio took his choice so make","5- make your choice", "6- put something and make", 
"7- make something happens", "8- giulio took his choice so make","9- make your choice", 
"10- put something and make", "11- make something happens", "12- giulio took his choice so make"]

diczio = {} 
abc = " ".join(lst).split(" ")

for x in lst:
    element = x

    for t in abc:
        if len(element) &gt; 0:
            if t in element:
                xs = element.find("-")
                aw = element[0:xs]
                aw = int(aw)
                wer = set()
                wer.add(aw)
                diczio[t] = [wer]
print diczio
</code></pre>
<p>The problem is that I got only one ID of all words and I put them in 1 set( i mean wer = set() ) but i need all ID of words:</p>
<p>1 - for example, for the word 'your'i get only ID of last post where the word is located: </p>
<pre><code>'your': [set(['9'])]
</code></pre>
<p>but i need:  </p>
<pre><code>'your': [set([1,5,9])]
</code></pre>
<p>2- the ID 9 is a string in set and i need it in int, but i get an error if I try to put aw in int: </p>
<pre><code>aw = int(aw)
</code></pre>
<p>error</p>
<pre><code>ValueError: invalid literal for int() with base 10: ''
</code></pre>
<p>any suggestions?</p>
</div>
<span class="comment-copy">Check out <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a>..</span>
<span class="comment-copy">I'd have a solution, but this site assumes you try to come up with one first!</span>
<span class="comment-copy"><code>collections.Counter</code> will not help here, but <code>collections.defaultdict</code> will.</span>
<span class="comment-copy">Also check out defaultdict. Use it to create a list for each word and append the index.</span>
<span class="comment-copy">@AlexHall - yeah, I was changing my comment when I reread the question!</span>
<span class="comment-copy">Thanks :) But are dict and list comprehensions nerdy? IMHO they are the power of python, aren't they?</span>
<span class="comment-copy">Of course they are the true power of python. (Infact I +1'd u for that sol. ;') ). But I thought this kid might need simpler solution.</span>
