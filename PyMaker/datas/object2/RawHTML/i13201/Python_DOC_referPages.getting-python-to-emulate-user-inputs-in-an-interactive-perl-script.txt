<div class="post-text" itemprop="text">
<p>I'm new to programming and have been wrestling this problem for a while now...</p>
<p>I'm writing a Python script to automate an interactive command-line based Perl script so that it may run on every file in a specified directory.  I can get the program to boot with <code>subprocess.call</code> and <code>subprocess.Popen</code>, but from there I either open the program and it sits there waiting in the shell for a user input, or I open it an infinite amount of times.  I need the Perl script to open once per file, accept user inputs (with something similar to "enter" being pressed after each input, of course, and a command including the name of the file, which should be <code>str(files)</code> in the example code below), begin the Perl script's calculations with a user input of <code>"4"</code>, and then have it close.</p>
<p>I know this is possible, but I've tried 1000 different approaches to no avail.  Could someone give me an "explain it like I'm 5" as to how I can get this Python and Perl script talking to each other as if a user was inputting commands?</p>
<p>Here's what I have so far:</p>
<pre><code>for files in os.listdir("In_Files"):
    print "Performing calculations on " + str(files) + " ..."
    os.chdir("/home/MTS/Dropbox/dir/In_Filess")
    subprocess.Popen("run_command.command -f a", shell=True) #this boots up the Perl script
    time.sleep(3) #waits for the script to open...
    Popen.communicate(input="1") #user inputs begin here
    Popen.wait(0) #am I trying to set a return value here so that the inputs may proceed once the previous one has been accepted?
    Popen.communicate(input=str(files)) #this is where the name of the file the Perl script is working on is entered
    Popen.wait(0)
    Popen.communicate(input="4")
    Popen.wait(0)
</code></pre>
<p>I keep reading a lot about stdin pipes but don't quite understand them.  Are they used for this problem or should another approach be used?  Also, I've already looked at Pexpect but that doesn't seem to be working.</p>
<p>Your help is immensely appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>To run a command for each file from a given directory:</p>
<pre><code>#!/usr/bin/env python
import os
from subprocess import Popen, PIPE

working_dir = b"/home/MTS/Dropbox/dir/In_Files"
for filename in os.listdir(working_dir):
    print("Performing calculations on {filename!r}...".format(**vars()))
    p = Popen(["run_command.command", "-f", "a"], cwd=working_dir, stdin=PIPE)
    p.communicate(input=b"\n".join([b"1", filename, b"4"]))
    if p.returncode != 0: # non-zero exit status may indicate failure
        raise Error
</code></pre>
<p>See <a href="https://stackoverflow.com/a/33164176/4279">@skmrx's answer</a>  for the explanation of why your current code fails.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pipes are one way for multiple processes to communicate and are widely used for that. A pipe is a pair of file descriptors with one opened for writing and the other for reading. If data is written to the former, reading from the latter will return back the same data.</p>
<p>Popen can create pipes for the standard input (stdin), standard output (stdout) and standard error (stderr) file descriptors of the process it executes - but you have to explicitly ask for it. This way, you can write something to the <code>stdin</code> pipe which will be passed on to the <code>stdin</code> of the child. Similarly, if you want to read the output of the child process, you can read from the <code>stdout</code> pipe. This serves your purpose well and hence your approach is correct.</p>
<p>Now let's see your code:</p>
<pre><code>subprocess.Popen("run_command.command -f a", shell=True)
</code></pre>
<p>This will execute the command, but won't create the pipes to allow communication with the child process. If you look at the <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow">documentation</a>, it says that you need to explicitly ask it to create pipes through keyword arguments such as <code>stdin=subprocess.PIPE</code>. </p>
<pre><code>time.sleep(3)
</code></pre>
<p>Generally, scripts that take input line-by-line don't care about when they receive input. So you should be able to safely remove this.</p>
<pre><code>Popen.communicate(input="1")
</code></pre>
<p>Look at the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">documentation</a> again:</p>
<blockquote>
<p>Popen.communicate(input=None, timeout=None)</p>
<p>Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. </p>
</blockquote>
<p>You can call <code>communicate()</code> only once and you must pass in all the input as one string and it returns the data printed by the child process once it terminates. This also means that the calls to <code>wait()</code> are unncessary. Note that <code>communicate()</code> returns the a tuple with contents of what the child printed to <code>stdout</code> and <code>stderr</code>. You may need these.</p>
</div>
<span class="comment-copy">When I want to do this sort of thing, I do it with a pipe at the shell level.</span>
<span class="comment-copy">Do you want to just send data to the child process or do you also want to read from it?</span>
<span class="comment-copy">You do realize that the Perl program may realize it isn't attached to a tty and expect a different format right? It may just be easier to edit the Perl program</span>
<span class="comment-copy">I've figured it out thanks to the suggestions posted here.  Turns out (as I expected) that I didn't fully understand how to send communications to the Perl program.</span>
