<div class="post-text" itemprop="text">
<p>What is the best way to avoid enormous CPU usage when writing <code>while True</code> loops which could do nothing in some circumstances? It seems like <code>time.sleep(0)</code> hurt CPU:</p>
<pre><code>import time

msg = []

# in main thread I will add messages to msg list sometimes
msg.append('some_msg')

# in some other thread I will parse them like this:
while True:
  for msg in msgs:
    # do some operations
  time.sleep(0) # hurt CPU in case of len(msg) == 0
</code></pre>
<p>Yeah, I can use <code>time.sleep(1)</code> instead of it but is it really the most correct way to do it in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Its just a classical producer consumer problem, and you must be seeking a better implementation than you did.</p>
<p>In your case if you are using a positive value for <code>sleep</code> then you have already done saving CPU for other processes to also use it since high CPU usage is good (see Note at the bottom for clarity).</p>
<p>If you are looking for optimization and better performance then you need to tweak your code specific to your application needs, here are two suggestions.</p>
<ol>
<li><p>You might use signaling in threads (also call inter-thread communication) using <a href="https://docs.python.org/2/library/threading.html#condition-objects" rel="nofollow">wait and notify</a> calls if you can convert <code>msg</code> to a thread-safe queue; this way you can overcome arbitrary waiting.</p></li>
<li><p>If your processing on the <code>msg</code> items (that you perform in <code>for</code> loop) is IO hungry then you can try splitting in independent threads or you can upgrade your code to do <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">async</a> processing.</p></li>
</ol>
<p>Note: If you have a high CPU usage then it means you are best using your computing resources, but it can lead to deprived reliability down the line and starvation of resources for other process which might be bad hence try putting priority on your threads/process as per your needs are.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using the wrong datatype. Lists are not made for inter-thread communication. Use queues. The <code>get</code>-method is blocking.</p>
</div>
<span class="comment-copy">Why are you doing this?</span>
<span class="comment-copy"><code>time.sleep(0)</code> makes no sense here as it doesn't do anything useful, it just calls a whole bunch of platform-dependent code (thus, wasting resources) and that's all.</span>
<span class="comment-copy">The specified link doesn't contain any real answer to this question, please reopen my question</span>
<span class="comment-copy">The reason to call sleep() in this context is to allow other threads to run while your message loop waits for a message.  You should set the sleep time to a value you can live with.  If your app needs to respond to a message within one tenth of a second, the use sleep(0.05) and release the cpu to other processes while waiting for a msg to arrive.</span>
<span class="comment-copy">The 'correct' way to do this depends on what/how your <code>msgs</code> variable is actually added to/deleted from. When you have 'processed' a message, is it discarded? You need to provide more information on your specific problem before we can help you.</span>
<span class="comment-copy">Polling with sleep is almost always wrong and in this case a virtual certainty. Since the code consumes nothing and the OP is explicitly refusing to clarify, there is no valid answer. That's what you get with bad questions. (Â±0).</span>
<span class="comment-copy">@msw yes polling with sleep is brutal way but its simple and lot of people use it, this why I have suggested to use event loop and thread-safe queue.</span>
<span class="comment-copy">@msw further as it has been mentioned its a non-blocking calls thats being used then using <code>event-loop</code> is not giving to give any better throughput it will just prevent starvation, my best bet would be to use <code>wait</code> and <code>notify</code> so that when <code>msgs</code> ends up CPU can do something better.</span>
<span class="comment-copy">Agreed. I'll read this answer as "if the OP had asked better, this is a good exposition of asynchronous methods".</span>
