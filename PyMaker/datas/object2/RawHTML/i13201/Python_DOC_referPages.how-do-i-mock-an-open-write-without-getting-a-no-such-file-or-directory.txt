<div class="post-text" itemprop="text">
<p>I've based my solution on:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1289894/how-do-i-mock-an-open-used-in-a-with-statement-using-the-mock-framework-in-pyth">How do I mock an open used in a with statement (using the Mock framework in Python)?</a>,  </li>
<li><a href="https://stackoverflow.com/questions/31705057/attributeerror-module-main-from-does-not-have-the-attribute-open">AttributeError: &lt;module '__main__' from [..] does not have the attribute 'open'</a>, </li>
<li><a href="http://www.voidspace.org.uk/python/mock/helpers.html#mock.mock_open" rel="nofollow noreferrer">http://www.voidspace.org.uk/python/mock/helpers.html#mock.mock_open</a></li>
</ul>
<p>I have a class, which I can instantiate, which writes to a file. I'm trying to test it, but I'm having problems mocking <code>open()</code>. I'm using the following as the smallest piece of code, which can </p>
<pre><code>import os
import unittest
from unittest.mock import mock_open, patch

__author__ = 'drews'


class MockPathExists(object):
    def __init__(self, return_value):
        self.received_args = None
        self.return_value = return_value

    def __call__(self, *args, **kwargs):
        self.received_args = args
        return self.return_value


class WriteData:
    def __init__(self, dir, name='World'):
        self.name = name
        self.dir = dir

    def dump(self):
        if os.path.exists(self.dir):
            with open('{0}/output.text'.format(self.dir), 'w+') as fp:
                fp.write('Hello, {0}!'.format(self.name))


class TestListWindowsPasswords(unittest.TestCase):
    def setUp(self):
        self._orig_pathexists = os.path.exists
        os.path.exists = MockPathExists(True)

    def test_dump(self):
        m = mock_open()
        with patch.object(WriteData, 'open', m, create=True):
            data_writer = WriteData(
                dir='/my/path/not/exists',
                name='Foo'
            )
            data_writer.dump()

        self.assertEqual(os.path.exists.received_args[0], '/my/path/not/exists/output.text')
        m.assert_called_once_with('/my/path/not/exists/output.text', 'w+')
        handle = m()
        handle.write.assert_called_once_with('Hello, Foo!')



    def tearDown(self):
        os.path.exists = self._orig_pathexists
</code></pre>
<p>When I run this, I get the following error:</p>
<pre><code>Error
Traceback (most recent call last):
  File "/Users/drews/Development/tool/tests/test_mockopen.py", line 41, in test_dump
    data_writer.dump()
  File "/Users/drews/Development/tool/tests/test_mockopen.py", line 25, in dump
    with open('{0}/output.text'.format(self.dir), 'w+') as fp:
FileNotFoundError: [Errno 2] No such file or directory: '/my/path/not/exists/output.text'
</code></pre>
<p>How can I mock open(), so that it just returns a file_pointer, and doesn't try to interact with the file system at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>Mock <code>builtins.open</code> (or <code>module.open</code>, <code>module</code> = the module name that contains <code>WriteData</code>) with the <a href="https://docs.python.org/3/library/unittest.mock.html#mock-open" rel="noreferrer"><code>mock_open</code></a>:</p>
<pre><code>import builtins

class TestListWindowsPasswords(unittest.TestCase):
    def setUp(self):
        self._orig_pathexists = os.path.exists
        os.path.exists = MockPathExists(True)

    def test_dump(self):
        m = mock_open()
        with patch('builtins.open', unittest.mock.mock_open()) as m:
            data_writer = WriteData(
                dir='/my/path/not/exists',
                name='Foo'
            )
            data_writer.dump()

        self.assertEqual(os.path.exists.received_args[0], '/my/path/not/exists')  # fixed
        m.assert_called_once_with('/my/path/not/exists/output.text', 'w+')
        handle = m()
        handle.write.assert_called_once_with('Hello, Foo!')
</code></pre>
</div>
<span class="comment-copy">My problem was not using 'builtins.open'. Thanks!</span>
