<div class="post-text" itemprop="text">
<p>How do I pythonicly do:</p>
<pre><code>var = 7.0
var_is_good = isinstance(var, classinfo1) or isinstance(var, classinfo2) or isinstance(var, classinfo3) or ... or  isinstance(var, classinfoN)
</code></pre>
<p>It seems silly I can't just pass in a list of classinfo's:</p>
<pre><code>var_is_good = isinstanceofany( var, [classinfo1, classinfo2, ... , classinfoN] )
</code></pre>
<p>So what is the <code>isinstanceofany</code> function?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>isinstance()</code> takes a <em>tuple</em> of classes for the second argument. It'll return true if the first argument is an instance of <em>any</em> of the types in that sequence:</p>
<pre><code>isinstance(var, (classinfo1, classinfo2, classinfo3))
</code></pre>
<p>In other words, <code>isinstance()</code> <strong>already</strong> offers this functionality, out of the box.</p>
<p>From the <a href="https://docs.python.org/2/library/functions.html#isinstance"><code>isinstance()</code> documentation</a>:</p>
<blockquote>
<p>If <em>classinfo</em> is neither a class object nor a type object, <strong>it may be a tuple of class or type objects, or may recursively contain other such tuples (other sequence types are not accepted).</strong></p>
</blockquote>
<p>Emphasis mine; note the recursive nature; <code>(classinfo1, (classinfo2, classinfo3))</code> is also a valid option.</p>
</div>
<div class="post-text" itemprop="text">
<p>You were pretty close with the title of your question already. You could use <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow"><code>any</code></a> and a list:</p>
<pre><code>var = 7.0
var_is_good = any([isinstance(var, classinfo1),
                   isinstance(var, classinfo2),
                   isinstance(var, classinfo3), ...
                   isinstance(var, classinfoN)])
</code></pre>
<p>But looking in the docs of <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow"><code>isinstance</code></a> reveals:</p>
<blockquote>
<p>Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual) subclass thereof. If object is not an object of the given type, the function always returns false. If classinfo is not a class (type object), <strong>it may be a tuple of type objects</strong>, or may recursively contain other such tuples (other sequence types are not accepted). If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised.</p>
</blockquote>
<p>This means the better way to do it is</p>
<pre><code>var = 7.0
var_is_good = isinstance(var, (classinfo1,
                               classinfo2,
                               classinfo3,
                               ...,
                               classinfoN))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will solve your problem:</p>
<pre><code>valid_instance_types = &lt;tuple of types you want to allow&gt;
var_is_good = isinstance(var, valid_instance_types)
</code></pre>
<p>Based on the <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow">documentation</a> there are a lot of ways you can pass values of types in to <code>isinstance</code>.</p>
<p>You might also look into <a href="https://pypi.python.org/pypi/voluptuous" rel="nofollow">voluptuous</a> if you're trying to do a more complicated validation of which this is just a part.</p>
</div>
<div class="post-text" itemprop="text">
<p>You generally shouldn't be using <code>isinstance</code>, but what you're wanting to do can be accomplished with the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow">any()</a> builtin function. </p>
<pre><code>var_is_good = any(isinstance(var, t) for t in [type1, type2, type3])
</code></pre>
</div>
<span class="comment-copy">If it adds like a number, subtracts like a number, multiplies like a number...why do you need to know if it's a number?  See <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">duck typing</a> for more details.</span>
<span class="comment-copy">My particular use case is having a function which returns a (function which returns (either a <code>number</code> OR it returns a sympy expression) ). I want to check that the function I generated does what its supposed to do when I pass it around to other functions.</span>
<span class="comment-copy">Why doesn't your function return something homogeneous?  That's what the smell is here; you can get fast and loose with duck typing, but you should be consistent in what you return.</span>
<span class="comment-copy">I guess I could always return a sympy expression which sometimes evaluates to a number, and sometimes has variables left inside it.</span>
<span class="comment-copy">That's what I'm thinking that you want to do here; instead of returning multiple different types, return the one type and if need be, reduce it to a number instead.</span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">Repeating <code>isinstance</code> with only the <code>classinfo</code> changing doesn't seem very Pythonic to me.</span>
<span class="comment-copy">Try  <code>var.__class__</code>. Is that what you want? @Makoto: I agree. Not Pythonic  at all!</span>
<span class="comment-copy">@Makoto Yup. But that was something D Adams could probably have easily found by searching the docs for "any". I've expanded my answer to the better version ... but obviously Martijn Pieters was faster ... once again.</span>
<span class="comment-copy"><code>any()</code> with a list is.. pointless. Use a generator expression if you must use <code>any()</code>, then at least you get the benefit of the early exit.</span>
<span class="comment-copy">This is overkill; <code>isinstance()</code> offers the functionality out of the box without using <code>any()</code>.</span>
<span class="comment-copy">@MartijnPieters I didn't realize that isinstance can take multiple types, but I feel like the answer is still a good one because the question can be taken more broadly to be "How do I check if any of the return values from a particular function with different params is true"</span>
