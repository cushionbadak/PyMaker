<div class="post-text" itemprop="text">
<p>I am trying to get my output data to look like this:</p>
<pre><code>-------------------------------------------------------
            Grade Report for Programs 
-------------------------------------------------------
Jacobson, Mark      19.0 &lt;--- 20,17,20
Snurd, Mortimur     16.5 &lt;--- 20,19,18,17,16,15,14,13
Luxemburg, Rosa     15.0 &lt;--- 18,15,20,10,12
Atanasoff, John     20.0 &lt;--- 20,20,20,20,20,20,20
Hopper, Grace       20.0 &lt;--- 20,20,20,20,20,20
-------------------------------------------------------
</code></pre>
<p>But I don't know how to deal with the varying name length. My output currently looks like this.</p>
<hr/>
<pre><code>            Grade Report for Programs 
-------------------------------------------------------
Jacobson, Mark   19.0 &lt;--- 20,17,20
Snurd, Mortimur   16.5 &lt;--- 20,19,18,17,16,15,14,13
Luxemburg, Rosa   15.0 &lt;--- 18,15,20,10,12
Atanasoff, John   20.0 &lt;--- 20,20,20,20,20,20,20
Hopper, Grace   20.0 &lt;--- 20,20,20,20,20,20
-------------------------------------------------------
</code></pre>
<p>The program I have written is to take an input file of grade scores and collect the data and neatly print out the average.</p>
<p>The input file looks something like this:</p>
<pre><code>Mark Jacobson,20,17,20
Mortimur Snurd,20,19,18,17,16,15,14,13
Rosa Luxemburg,18,15,20,10,12
John Atanasoff,20,20,20,20,20,20,20
Grace Hopper,20,20,20,20,20,20
</code></pre>
<p>And here is my code that collects the name and scores, and prints out the data with last name, first name, average score, then the actual scores that resulted to the average.</p>
<pre><code>file = input("Enter filename: ")

grade_file = open(file, 'r')

print()

print('---------------------------------------------------------')
print('\t\tGrade Report for Programs')
print('---------------------------------------------------------')

for text in grade_file:
    end_of_name = text.find(',')
    name_seperated = text.find(' ')

    first_name = text[0:name_seperated]
    last_name = text[name_seperated+1:end_of_name]

    name_last_first = last_name + "," + " " + first_name

    grades = text[end_of_name+1:]

    start = 0
    index = 0
    sum_n = 0
    average= 0
    score = 0
    count = 0

    while index &lt; len(grades):
        if grades[index] == ',':
            score = int(grades[start:index])
            count += 1
            sum_n = score + sum_n
            start = index + 1
        index += 1

    count += 1       

    score = int(grades[start:index])
    sum_n = score + sum_n
    average = sum_n / count



    print(name_last_first, " ", average, "&lt;---", grades)


print('---------------------------------------------------------')


grade_file.close()
</code></pre>
<p>I just need to figure out how to have even spaces so it makes an even row and column like the first output. Help is greatly appreciated! Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I find it simpler to use Python's builtin C-style formatting:</p>
<pre><code>&gt;&gt;&gt; print("%-30s %4.1f" % ("Jacobson, Mark", 19.0))
Jacobson, Mark                 19.0
&gt;&gt;&gt; 
</code></pre>
<p>Note that a negative field width indicates that the field is to be left-justified.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use string formatting with field width specifiers:</p>
<pre><code>print('{:20s} {:4.1f} &lt;--- {}'.format(name_last_first, average, grades))
</code></pre>
<p>This uses the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a> with the <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow"><em>Format String Syntax</em></a> to slot values into a template.</p>
<p>The first slot formats strings into a field 20 characters wide, the second slots floating point numbers into a field 4 characters wide, using 1 digit after the decimal point (leaving 1 for the decimal point itself plus 2 digits before the point).</p>
<p>If I were you, I'd also look at the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a> to read your data, rather than use string manipulations. You'll get list objects with separate values for each column:</p>
<pre><code>import csv

print('---------------------------------------------------------')
print('\t\tGrade Report for Programs')
print('---------------------------------------------------------')

with open(file, 'r', newline='') as grade_file:
    reader = csv.reader(grade_file)
    for row in reader:
        name = row[0]
        name = ' '.join(map(str.strip, reversed(name.split(',')))
        grades = [int(g) for g in row[1:])
        average = sum(grades) / len(grades)            
        print('{:20s} {:4.1f} &lt;--- {}'.format(name, average, ','.join(grades)))

print('---------------------------------------------------------')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer I find easiest is just using some basic string arithmetic. </p>
<p>For example, say for want the aligned a variable 20 spaces ahead of left-alignment, in your case the "average" variable, you could simply do this </p>
<pre><code>print(name_last_first + (' ' * (20-len(name_last_first))) + average
       + "&lt;----" + grades)
</code></pre>
<p>It's just a bit lengthier, but the code is easier to interpret in my opinion.</p>
<p>(Note: this method only works with mono spaced fonts! But most Python output is defaulted to a MS font :-) )</p>
</div>
<span class="comment-copy">Awesome, works perfectly python 2.7</span>
<span class="comment-copy">Thanks for the quick and well described feedback! This did exactly what I wanted it to! As for the csv module, I will definitely look into that! It is just that this was for a class assignment and to help us grasp what we have covered in class, the teacher likes us to use things we have already learned! We were also trying to figure out a way to read our own csv code without using the csv module! But Thank you so much for the explanation!</span>
