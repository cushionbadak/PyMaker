<div class="post-text" itemprop="text">
<p>First things first, I've looked around and found this:</p>
<p><a href="https://stackoverflow.com/questions/8445447/in-python-how-to-convert-a-hex-ascii-string-to-raw-internal-binary-string">In python, how to convert a hex ascii string to raw internal binary string?</a></p>
<p><a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer">https://docs.python.org/3/library/base64.html</a></p>
<p>Which is nice, but seems to involve converting hexadecimal to a binary representation. And base64 doesn't seem to support what I want, or am I being silly?</p>
<p>What I have is code from Matlab that outputs data in the form of 16 bit signed binary. But it should be saved as a raw binary, and not .m. So I've pushed it to a .txt file. And thus it lives its life as ASCII, which is nice and all but I need it as a pure .bin.</p>
<p>I've tried being lazy about this and searched for tools to simply let me copy and paste my data over to a dummyfile. But for whatever reason I've failed that.</p>
<p>So fine fine, I could write a python code that opens up the data and chunks the data into 16bit blocks some logic code and write it as it's ACII implementation, then do a (<a href="https://docs.python.org/2/library/binascii.html" rel="nofollow noreferrer">https://docs.python.org/2/library/binascii.html</a>) conversion and write to the file?</p>
<p>This seems horribly cludgy (probably because it is). How can I get about this in a more elegant, or more preferably, lazy manner?</p>
<p>===</p>
<p>Short version: I have data like 0000111001000011 (signed 16) in ASCII encoding, I want that to be 0000111001000011 in raw bin. Me dumb, need help.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you want to write 16-bit binary raw from Matlab?</p>
<p>Just use the 'fwrite' command in matlab, e.g. </p>
<pre><code>fid=fopen('mybinaryfile.bin','wb')
fwrite(fid,data,'uint16')
fclose(fid)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use int(string,base) with your input string and base 2 for binary data.</p>
<pre><code>a = int('0000111001000011',2)
</code></pre>
<p>where <code>a</code> will be <code>3651</code></p>
<p>now you can write it to a file using the <a href="https://docs.python.org/3.1/library/struct.html" rel="nofollow">python struct</a></p>
<pre><code>import struct   
outString = struct.pack('i',a) # i for signed int 16bit, 
                               # for others check the documentation

f = open('outfile','w')
f.write(outString)
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the fwrite pointers. (OK, something that actually works this time)
<em>ed. nop, it doesn't do a raw binary write. It's some formatting going on...</em></p>
<p>Beware! Python and bytes likes to do formatting that will differ when using file.write(list_of_bytes). That caused me headaches trying to get around that before going back to the bitstring library and basically solving it in half a minute. <em>sighs</em></p>
<p>The below code does what I want:</p>
<pre><code>##Importing my needed tools
import bitstring

##Open the file with the data
data = open('Path\\data.txt');

##Read from the file
buffer = data.read();

##Convert the data to the proper format for transering
bin_list = bitstring.BitArray(bin = str(buffer));
b_array = bin_list.bin

##Create a c switch equivalent function of sorts, because of hex 
def cswitch(x):
    if ((x == '1') or (x == '2') or (x == '3') or (x == '4') or (x == '5') or (x == '6') or (x == '7') or (x == '8') or (x == '9') or (x == '0') or (x == 'a') or (x == 'b') or (x == 'c') or (x == 'd') or (x == 'e') or (x == 'f')):
    x = {'1':'01', '2':'02', '3':'03', '4':'04', '5':'05', '6':'06', '7':'07', '8':'08', '9':'09', '0':'00', 'a':'0a', 'b':'0b', 'c':'0c', 'd':'0d', 'e':'0e', 'f':'0f'}[x];
        return x;
    else:
        return x;

#Create a "hexifier" function
def hexifier(x):
    x = bytes.fromhex( cswitch((hex ( int( x[:8],2) ) )[2:]) )
    return x;

##Init shenanigans
b2_array = bitstring.BitArray(hexifier(b_array));
b_array = b_array[8:];

##Prepare to write to mem in byte chunks by building a hex array
for i in range (0, 2**13-1):    
    #Format the data in byte sized chunks
    b2_array.append(hexifier(b_array));
    b_array = b_array[8:];

## Write to a file, using the format .write() likes
with open('path\\binary_data.bin', 'br+') as f:
        f.write(b2_array.bytes);

##Close the files   
data.close();   
f.close();
</code></pre>
</div>
<span class="comment-copy">Perhaps you could show some code you've written to solve the problem?</span>
<span class="comment-copy">You need to be more precise with your terms. When you say "ASCII" do you mean a 16 character string?</span>
<span class="comment-copy">Converting binary to ASCII: <a href="http://stackoverflow.com/questions/10411085/converting-integer-to-binary-in-python" title="converting integer to binary in python">stackoverflow.com/questions/10411085/â€¦</a>. Converting ASCII to binary: <code>int(s, 2)</code>. Converting unsigned 16 bit to signed: <code>x if x &lt; 0x8000 else x-0x10000</code>.</span>
<span class="comment-copy">If you want it in raw binary, why save it out as ascii in the first place? Matlab can write to binary - use <code>fwrite</code> and specify precision.</span>
<span class="comment-copy">That is a very nice pointer, and one that is usefull (see code below). But it doesn't help push the binary data in its raw format to a .bin file. :)</span>
<span class="comment-copy">edited the answer, so you see how you can write it as binary data to a file</span>
<span class="comment-copy">As far as I know, fwrite with the 'b' option in Matlab does no formatting at all, but writes the raw bytes out, which can be easily confirmed, by e.g. loading the data back in with python. Not sure why you would want to run all that extra code?</span>
<span class="comment-copy">The end reason is esoteric. I've got an embedded environment where I want to use a table. Due to legacy and what not,</span>
<span class="comment-copy">(Because the b option didn't occur to me, is the real reason of course)</span>
