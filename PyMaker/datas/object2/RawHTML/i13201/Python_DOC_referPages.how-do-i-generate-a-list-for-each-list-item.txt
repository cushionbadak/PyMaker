<div class="post-text" itemprop="text">
<pre><code>names = ['apple', 'banana', 'orange']
prices1 = ['0.40', '1.20', '0.35']
prices2 = ['0.43', '1.21', '0.34']
</code></pre>
<p>How do I generate a list for each name and append a price(s) into that list</p>
<p>eg.</p>
<pre><code>fruits = [['apple', ['0.40', '0.43']],
          ['banana', ['1.20', '1.21']], 
          ['orange', ['0.35', '0.34']]]
</code></pre>
<p>This is what I've been trying to use:</p>
<pre><code>x = 0
n = len(names)
fruits = [[] for name in names]
for i in prices:
    for x in range(0, n-1):
        x += 1
        fruits[x].append(prices[x])
</code></pre>
<p><strong>Edit</strong></p>
<p>I want to be able to manipulate – add/remove prices from - the generated lists like </p>
<p><code>print[apple]</code> </p>
<p><code>['0.40', '0.43']</code></p>
<p>or <code>apple.append(prices3[x])</code></p>
<p><code>['0.40', '0.43', 'x']</code></p>
<p>Thanks so much for helping, I'm still learning</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit - using dictionaries:</strong> </p>
<p>Now that you have specified how you would like to manipulate your data, I'd <em>strongly</em> recommend to switch to using a <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow">dictionary</a> instead of lists. Because of how the association of keys and values work, dictionaries will allow you to access a specific item by a more descriptive value than a numeric index, like a list does. Your new code would look something like this:</p>
<pre><code>&gt;&gt;&gt; names = ['apple', 'banana', 'orange']
&gt;&gt;&gt; prices1 = ['0.40', '1.20', '0.35']
&gt;&gt;&gt; prices2 = ['0.43', '1.21', '0.34']
&gt;&gt;&gt; 
&gt;&gt;&gt; fruits = {}     # fruits is now a dictionary, which is indicated by the curly braces
&gt;&gt;&gt; for i in range(len(names)):
...     fruits[ names[i] ] = [ prices1[i], prices2[i] ]
... 
&gt;&gt;&gt; print(fruits)
{'orange': ['0.35', '0.34'], 'apple': ['0.40', '0.43'], 'banana': ['1.20', '1.21']}
</code></pre>
<p>And if you ever need to check up on the prices of a specific fruit you could always use:</p>
<pre><code>&gt;&gt;&gt; print( fruits['apple'] )
['0.40', '0.43']
</code></pre>
<p>likewise, in order to add a new price you only need to type:</p>
<pre><code>&gt;&gt;&gt; fruits['banana'].append('1.80')
&gt;&gt;&gt; print( fruits['banana'] )
['1.20', '1.21', '1.80']
</code></pre>
<p>And to remove a price:</p>
<pre><code>&gt;&gt;&gt; fruits['orange'].remove('0.34')
&gt;&gt;&gt; print( fruits['orange'] )
['0.35']
</code></pre>
<p>To insert an entirely new item to the dictionary, simply use the <code>=</code> operator to attribute to the new key:</p>
<pre><code>&gt;&gt;&gt; fruits['durian'] = ['2.25', '2.33']
&gt;&gt;&gt; print( fruits )
{'orange': ['0.35'], 'durian': ['2.25', '2.33'], 'apple': ['0.40', '0.43'], 'banana': ['1.20', '1.21', '1.80']}
</code></pre>
<p>And to remove an item, simply call the <code>pop</code> method:</p>
<pre><code>&gt;&gt;&gt; fruits.pop('apple')
['0.40', '0.43']
&gt;&gt;&gt; print( fruits )
{'orange': ['0.35'], 'durian': ['2.25', '2.33'], 'banana': ['1.20', '1.21', '1.80']}
</code></pre>
<p>This way you will have a much clearer on what you're manipulating at any given time than by trying to juggle around obscure list indices.</p>
<p>If you must use lists, however, please refer to my old answer below.</p>
<hr/>
<p><strong>Old answer:</strong></p>
<p>Assuming the two lists of prices used were supposed to be assigned to two different variables, a solution would be to iterate over the lists like so:</p>
<pre><code>&gt;&gt;&gt; names = ['apple', 'banana', 'orange']
&gt;&gt;&gt; prices1 = ['0.40', '1.20', '0.35']
&gt;&gt;&gt; prices2 = ['0.43', '1.21', '0.34']
&gt;&gt;&gt;
&gt;&gt;&gt; fruits = []
&gt;&gt;&gt; for i in range(len(names)):
...     fruits.append( [ names[i], [prices1[i], prices2[i]] ] )
...
&gt;&gt;&gt; fruits
[['apple', ['0.40', '0.43']], ['banana', ['1.20', '1.21']], ['orange', ['0.35', '0.34']]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> twice:</p>
<pre><code>names = ['apple', 'banana', 'orange']
prices1 = ['0.40', '1.20', '0.35']
prices2 = ['0.43', '1.21', '0.34']
fruits = list(zip(names, zip(prices1, prices2)))
</code></pre>
<p>In python3, <code>zip</code> is a generator, thus we use <code>fruits = list(...)</code> to turn the generator into a list.</p>
</div>
<span class="comment-copy"><code>fruits</code> does not show a valid Python structure.</span>
<span class="comment-copy">(Continuing from what @IgnacioVazquez-Abrams says): Not as written, anyway. You're missing a few commas.</span>
<span class="comment-copy">You're overwriting <code>prices</code>.</span>
<span class="comment-copy">Thanks so much! Just quickly, I'm still a bit confused about this: If I only use one set of prices,  <code>for i in range(len(names)): ...     fruits += [ names[i], [prices1[i]] ]</code> and then want to add into fruits the prices2 list. I tried: <code>for i in range(len(companies)):         fruits.append[prices2]</code> But this is just adding the set to the end. <code>['apple', ['0.40'], 'banana', ['1.20'], 'orange', ['0.35'] '0.43','1.21', '0.34']</code></span>
<span class="comment-copy">Like.. why does this work as I intended <code>fruits[1].append(prices2[0])</code> but <code>fruits[2].append(prices2[1])</code> returns this error <code>AttributeError: 'str' object has no attribute 'append'</code></span>
<span class="comment-copy">So I figured out that, fruits[0] = apple, fruits[1] = '0.40'. Is there a way to reference apple[] inside fruits?</span>
<span class="comment-copy">@jfox Sorry, I reread your question and see I misinterpreted how you wanted the output organized. In my solution, fruits is a list in which even elements were the names of fruits, and odd elements were lists of prices for the elements just before it. The append error you were running into is a consequence of that inconsistency, I apologize (fruits[1] was a list, while fruits[2] was a string, which cannot be appended to). It now works as intended, with each item being a list containing both the fruit name and the list of prices for that fruit.</span>
<span class="comment-copy">@jfox I have added what I believe to be a better solution to your question in my answer: using dictionaries. This will make your code far clearer, and solve all your issues in terms of adding/removing prices/items. Hope it helps.</span>
<span class="comment-copy">That seems pretty simple and I think does what I need, how do I then access the prices? – to add to or empty. If I do print(fruits[1]) I get ['apple', ('0.40','0.43')]</span>
