<div class="post-text" itemprop="text">
<p>I am trying to create a program that asks the user for three words and prints 'True' if the words are entered in dictionary order. E.G:</p>
<pre><code>Enter first word: chicken

Enter second word: fish

Enter third word: zebra

True
</code></pre>
<p>Here is my code so far:</p>
<pre><code>first = (input('Enter first word: '))
second = (input('Enter second word: '))
third = (input('Enter third word: '))
s = ['a','b','c','d','e','f','g','h',
     'i','j','k','l','m','n','o','p',
     'q','r','s','t','u','v','w','x',
     'y','z','A','B','C','D','E','F',
     'G','H','I','J','K','L','M','N',
     'O','P','Q','R','S','T','U','V',
     'W','Z','Y','Z']
if s.find(first[0]) &gt; s.find(second[0]) and s.find(second[0]) &gt;                                  s.find(third[0]):
    print(True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you work on a list of arbitrary length, I believe using <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow" title="sorted()"><code>sorted()</code></a> as other answers indicate is good for small lists (with small strings) , when it comes to larger lists and larger strings and cases (and cases where the list can be randomly ordered), a faster way would be to use <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow" title="all()"><code>all()</code></a> built-in function and a generator expression (This should be faster than the <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow" title="sorted()"><code>sorted()</code></a> approach). Example -</p>
<pre><code>#Assuming list is called lst
print(all(lst[i].lower() &lt; lst[i+1].lower() for i in range(len(lst)-1)))
</code></pre>
<p>Please note, above would end up calling <a href="https://docs.python.org/2/library/stdtypes.html#str.lower" rel="nofollow" title="str.lower()"><code>str.lower()</code></a> on every string (except for first and last) twice. Unless your strings are very large, this should be fine. </p>
<p>If your strings are really very large compared to the length of the list, you can create another temporary list before doing the <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow" title="all()"><code>all()</code></a> that stores all the strings in lowercase. And then run same logic on that list.</p>
<p>You can create your list (by taking inputs from the user) using a list comprehension, Example -</p>
<pre><code>lst = [input("Enter word {}:".format(i)) for i in range(3)] #Change 3 to the number of elements you want to take input from user.
</code></pre>
<hr/>
<p>Timing results of the above method vs <code>sorted()</code> (modified code of <code>sorted()</code> to work case-insensitively) -</p>
<pre><code>In [5]: lst = ['{:0&gt;7}'.format(i) for i in range(1000000)]

In [6]: lst == sorted(lst,key=str.lower)
Out[6]: True

In [7]: %timeit lst == sorted(lst,key=str.lower)
1 loops, best of 3: 204 ms per loop

In [8]: %timeit all(lst[i].lower() &lt; lst[i+1].lower() for i in range(len(lst)-1))
1 loops, best of 3: 439 ms per loop

In [11]: lst = ['{:0&gt;7}'.format(random.randint(1,10000)) for i in range(1000000)]

In [12]: %timeit lst == sorted(lst,key=str.lower)
1 loops, best of 3: 1.08 s per loop

In [13]: %timeit all(lst[i].lower() &lt; lst[i+1].lower() for i in range(len(lst)-1))
The slowest run took 6.20 times longer than the fastest. This could mean that an intermediate result is being cached
100000 loops, best of 3: 2.89 Âµs per loop
</code></pre>
<p>Result -</p>
<p>For cases that should return <code>True</code> (that is already sorted lists) the using <code>sorted()</code> is quite faster than <code>all()</code> , since <code>sorted()</code> works well for mostly-sorted lists.</p>
<p>For cases that are random, <code>all()</code> works better than <code>sorted()</code> because of the short-circuiting nature of the <code>all()</code> (it would short-circuit when it sees the first <code>False</code> ).</p>
<p>Also, there is the fact that <code>sorted()</code> would create a temporary (sorted list) in memory (for comparison), whereas <code>all()</code> would not require that (and this fact does attribute to the timings we see above).</p>
<hr/>
<p>Earlier answer that directly (and only applies to this question) you can simply directly compare the strings as such, you do not need another string/list for alphabets. Example -</p>
<pre><code>first = (input('Enter first word: '))
second = (input('Enter second word: '))
third = (input('Enter third word: '))
if first &lt;= second &lt;= third:
    print(True)
</code></pre>
<p>Or if you want to compare only the first characters (though I highly doubt that) -</p>
<pre><code>if first[0] &lt;= second[0] &lt;= third[0]:
    print(True)
</code></pre>
<hr/>
<p>To compare the strings case-insensitively, you can convert all the string to lowercase, before comparison. Example -</p>
<pre><code>if first.lower() &lt;= second.lower() &lt;= third.lower():
    print(True)
</code></pre>
<p>Or the simpler -</p>
<pre><code>print(first.lower() &lt;= second.lower() &lt;= third.lower())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, lists do not have the <code>find</code> method. Though you don't even <em>have</em> to use lists. The <code>&lt;=</code> (as well as <code>&gt;=</code>) operator compare sequences lexicographically. In addition, Python supports chained comparisons. Here's how I'd write it:</p>
<pre><code>first = input('Enter first word: ')
second = input('Enter second word: ')
third = input('Enter third word: ')
print(first &lt;= second &lt;= third)
</code></pre>
<p>If there're more than 3 words, you'd gather them into a list, sort it and compare it against the source list. Example:</p>
<pre><code>words = input('Enter words (separated by whitespace): ').split()
print(sorted(words) == words) # True if sorted() didn't re-order anything
</code></pre>
<p>Both of these approaches will work reasonably well for small number of words. If the number of words is big, you should consider using a short-circuiting solution using the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow">built-in <code>all</code> function</a> and a generator expression:</p>
<pre><code>prev_it, cur_it = iter(words), iter(words)
# Consume first element
next(cur_it)
# Pairwise iteration
print(all(prev &lt;= cur for prev, cur in zip(prev_it, cur_it)))
</code></pre>
<p>which is an efficient generalization of the first solution.</p>
<hr/>
<p>If you want to perform case-insensitive comparison, use <a href="https://docs.python.org/3/library/stdtypes.html#str.lower" rel="nofollow" title="str.lower()"><code>str.lower</code></a> (or <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow"><code>str.casefold</code></a>, in Python 3.3+).</p>
<p>Example for the first code snippet:</p>
<pre><code>print(first.lower() &lt;= second.lower() &lt;= third.lower())
</code></pre>
<p>Example for the list-based approaches:</p>
<pre><code>words = [s.lower() for s in input('Enter words (separated by whitespace): ').split()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Store the words in a <a href="https://docs.python.org/2/tutorial/datastructures.html#more-on-lists" rel="nofollow" title="More on Lists"><code>list</code></a> and then check it with <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow" title="sorted()"><code>sorted()</code></a>. You can make it ignore case by specifying a key that looks at the lowercase version of each word for comparison:</p>
<pre><code>words = input("Enter three words, separated by spaces: ").split()
print(words == sorted(words, key=str.lower))
</code></pre>
</div>
<span class="comment-copy">Do you mean alphabetical order?</span>
<span class="comment-copy">Tip: <code>string</code> module has a variable called <code>ascii_letters</code>.</span>
<span class="comment-copy">This should be moved to <a href="https://codereview.stackexchange.com">Code Review</a>.</span>
<span class="comment-copy">@curiousdannii - This should not be moved to CR, because it's not working code.</span>
<span class="comment-copy">@Tiger Oh yeah.</span>
<span class="comment-copy">The first example is perfect for what I am looking for, but is there any way to make it so that if one of those words starts with a capital letter it won't affect the impact of it being true or false?</span>
<span class="comment-copy">Added an example for that, convert all strings to same case, and compare. That way the case would not matter.</span>
<span class="comment-copy">Thank you very much.</span>
<span class="comment-copy">It already looks bloated with just three strings. You didn't even put them into a list. This answer is full of poor programming habits, which I will most certainly downvote.</span>
<span class="comment-copy">@TigerhawkT3 If its still worthy of a downvote, you should also indicate what poor programming habit is in the answer.</span>
