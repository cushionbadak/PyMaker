<div class="post-text" itemprop="text">
<p>I have been experimenting with Python socket servers and such. I came across an idea and I am having a hard time implementing it. I want the server side to be able to enter different commands, for starting and stopping the server, and performing various other tasks. My problem is, when I start having a lot of commands, my program ends up looking like spaghetti:</p>
<pre><code>if command == "start":
    print("Starting server")
    time.sleep(1)
    listener_thread.start()
elif command == "stop":
    print("Stopping server...")
    time.sleep(1)
    listener_thread.stop()
elif command in ["q", "quit"]:
    print("Quitting server...")
    time.sleep(1)
    for t in connections:
        t.stop()
    listener_thread.stop()
    exit()
else:
    print("Invalid command")
</code></pre>
<p>One of my friends who has been programming for a while said I should try and use a dictionary to store a function reference for each command. I created a dictionary like this:</p>
<pre><code>commands = {
    "start": cmd_start, # This would be a reference to cmd_start()
    "stop": cmd_stop, # Same here and so forth
    "quit": cmd_quit
}
</code></pre>
<p>And I would call these commands like this:</p>
<pre><code>while True:
    command = input("enter a command: ")
    if command in commands:
        commands[command]()
</code></pre>
<p>The problem with this method is that sometimes I want a command with multiple arguments and sometimes I don't. I want to be able to have different commands with varying arguments, specify their required arguments, and check to make sure the command is a valid command with all the required arguments. I am new to programming, and I have tried thinking of a clean way to implement this. I found nothing useful on google so hopefully someone can assist me. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you know the commands' structure this is a task of parsing and it is up to the format. Other than that you can send variable length arguments <a href="https://stackoverflow.com/questions/3394835/args-and-kwargs">using the star operator <code>*</code></a> (you can also send keyword arguments using <code>**</code> but I'd start with this).</p>
<p>Here is a simple example:</p>
<pre><code>command = input("enter a command: ")
arguments = input("enter arguments separated by a single space: ").split()
if command in commands:
    commands[command](*arguments)
</code></pre>
<p>Note than this will send all arguments as a string. This is a basic demonstration:</p>
<pre><code>&gt;&gt;&gt; def func_with_three_params(a, b, c):
...     print a, b, c
... 
&gt;&gt;&gt; three_args = "1 2 3".split()
&gt;&gt;&gt; func_with_three_params(*three_args)
1 2 3
</code></pre>
<p>As mentioned in the comments to your question this is a very common task and libraries do exist to parse various common formats. One which is often used (I use it as well) is <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple working example that is close to the poster's original source code:</p>
<pre><code>tokens = input("$ ").split()

command, arguments = tokens[0], tokens[1:]

def start_handler(start_line, end_line):
    print("Starting from {} to {}".format(start_line, end_line))

commands = {
  "start": start_handler    
}

commands[command](*arguments)
</code></pre>
<p>You could enter a command like: <code>start 1 20</code> and it would pass 1 and 20 to the start handler. Example output:</p>
<pre><code>$  start 1 20
Starting from 1 to 20
</code></pre>
</div>
<span class="comment-copy">I think your idea of a commands map is good, the thing you want to do is make the argument to each command a variable list of arguments and parse the user's input. Then call the command and pass it all the extra arguments the user typed.</span>
<span class="comment-copy">Try reading about the *args and **kwargs parameters.</span>
<span class="comment-copy">Lookup the first word of the input in your dict. Then use args, kwargs as per the 2 above suggestion and pass words[1:] to the command and let it figure out what to do.  I'd draft in argparse module for commands with params.</span>
<span class="comment-copy">Look up the <code>click</code> library, or the <code>argparse</code> module.</span>
<span class="comment-copy">Here is what I came up with: <a href="http://pastebin.com/Kqc5gky4" rel="nofollow noreferrer">pastebin.com/Kqc5gky4</a></span>
<span class="comment-copy">I was under the impression that argparse was for passing in commands at runtime, and not while the script was running. Anyways, I tried what you and others said about reading up on *args and **kwargs. Here is what I came up with: <a href="http://pastebin.com/Kqc5gky4" rel="nofollow noreferrer">pastebin.com/Kqc5gky4</a> - Does it look pythonic enough? Any recommendations?</span>
<span class="comment-copy">It's the common use, yeah - but there may be a way of hooking arguments into it dynamically. Probably using <code>parse_args</code>. About your code - try the code review site.</span>
<span class="comment-copy">Thanks. Heres what I came up with: <a href="http://pastebin.com/Kqc5gky4" rel="nofollow noreferrer">pastebin.com/Kqc5gky4</a></span>
<span class="comment-copy">I like the way you split the arguments and command up using a tuple. It makes the code more readable. I'll definitely tweak my program using that.</span>
