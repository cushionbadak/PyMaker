<div class="post-text" itemprop="text">
<p>I am trying to read a <code>.csv</code> file and add values for the corresponding month.
For example, if my file has 3 years of data and I want to find the sum of the values that correspond to january in those 3 years.</p>
<p>File example:</p>
<pre><code>jan2000,4.5
feb2000,9 
jan2001,9.0 
feb2001,8.9
</code></pre>
<p>and so on.. </p>
<p>I know how to open the file and convert the file into a <code>list</code> using <code>split</code> and <code>strip</code>.</p>
<p>I do not understand how to append specific elements to a list because my data has almost 50 years and its a dumb idea to go for if statements.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv  # let's let the csv module handle the details of reading a csv file
import collections  # we'll need a defaultdict to track all the data

# open the file we want to read from and the file we want to write to
with open("path/to/input") as infile, open("path/to/output", 'w') as fout:
    outfile = csv.writer(fout, delimiter=',')  # let the csv library handle csv.writer handle the details of writing the actual data to the file
    months = collections.defaultdict(int)  # keep track of the input data
    for month, val in csv.reader(infile, delimiter=','):
        val = float(val)
        month = month[:3]  # we don't need the year
        months[month] += val  # add to the running total
    for month in 'jan feb mar apr may jun jul aug sep oct nov dec'.split():  # we need a list of all the months in proper order
        outfile.writerow([month, months[month])  # get the value from the data we've been tracking
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>open</code>, <code>strip</code> and <code>split</code> functions are acceptable for reading CSV files is arguably it would be more straightforward to use a <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">module like this</a>.</p>
<p>Reading CSV then becomes:</p>
<pre><code>import csv
with open('fiftyyears.csv', newline='') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        do_something(row)
</code></pre>
<p>I'm not sure what is dumb about using if statements, but the date format you list as an example is a bit odd. Also, 10 lines of real data would have been more useful to help answer your question.</p>
<p>There are lots of ways to solve your month correlation requirement. A basic approach would be something like:</p>
<pre><code>import csv

class MonthCorrelator(object):
    def __init__(self, month):
        self.month = month

    def process(self, row):
        # code goes here to say "if the row's month is my month then..."

    def finish(self):
        # code goes here to print the result

processor = MonthCorrelator('jan2000') # or, better, use datetime

with open('fiftyyears.csv', newline='') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        processor.process(row)

processor.finish()
</code></pre>
<p>...which would work but may be more code than you need.</p>
<p>If all you want to do is</p>
<ul>
<li>read data</li>
<li>filter certain rows</li>
<li>on those rows do a sum</li>
</ul>
<p>then look into iterators, <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow">predicates for a filter</a>, and the <a href="https://docs.python.org/2/library/functions.html#sum" rel="nofollow">built-in sum function</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do all the heavy lifting yourself, without taking much help from the standard library:</p>
<pre><code>with open("path/to/input") as infile, open("path/to/output", 'w') as outfile:
    months = {}
    for line in infile:
        month, val = line.strip().split(',')
        val = float(val)
        month = month[:3]
        if month not in months:
            months[month] = 0
        months[month] += val
    for month in 'jan feb mar apr may jun jul aug sep oct nov dec'.split():
        outfile.write(','.join([month, str(months[month])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no other way to find the elements you need other than scanning each one for "jan"</p>
<p>Computers are really fast and this is an operation with O(n) complexity (not that complex). I think your answer would look something like this assuming you parse the CSV file into a List of Months and values</p>
<pre><code>isJan = False
sum = 0.0
for item in monthList:
    if isJan:
        sum += float(item)
    if "jan" in item:
        isJan = True
    else:
        isJan = False
print sum
</code></pre>
</div>
<span class="comment-copy">Do you need to start somewhere in the middle?</span>
<span class="comment-copy">By dumb i meant i have 50 years of data and there are 12 months in a year adding upto almost 600 if statements considering one for each month of a specific year</span>
<span class="comment-copy">600 rows ... is trivial. 50Gb of CSV is more interesting, and even then still fine. I think, though, that you mean something more sensible than doing 'if' statements on each of 12 months, which is fair. I thought you were seeking a particular month, but I think you mean correlate all months listed. Either way, iterators and filters will be good for your problem.</span>
<span class="comment-copy">I still do not understand how do i append the corresponding value of the month to a list. For example, for 3 years jan will have 3 different values.  Now how to append only those values to a list and exclude other months while iteration. Thank you so much for the help</span>
<span class="comment-copy">Since you want the totals, you don't need to track the actual values - simply use a running sum for each month, which you can track in a dictionary. So I've created a dictionary called <code>months</code> in which the keys are the names of the months, and the values are the total for the corresponding month (key)</span>
