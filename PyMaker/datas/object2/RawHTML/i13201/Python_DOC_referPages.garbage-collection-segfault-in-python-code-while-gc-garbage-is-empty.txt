<div class="post-text" itemprop="text">
<p>The following code works fine and prints out an <strong>empty list</strong> (on <code>python3.4</code>):</p>
<pre><code>import gc
# code interfacing with C and cython
print(gc.garbage, flush=True)
</code></pre>
<p>Appending this line to the very end makes it segfault:</p>
<pre><code>gc.collect()
</code></pre>
<p>It seems like it is pure luck that the automatic collection does not happen on its own (it took me some time to get reproducible error). The collection is not ran at "end of program" either because I am running this interactively.</p>
<p>Some googling led me to believe that some of the C/Cython code is creating/destroying objects without telling python that those objects are already removed from memory. Then python tries to remove them and crashes.</p>
<p>How can I find what those objects are? I thought that they would be in <code>gc.garbage</code> before the crash inducing <code>gc.collect()</code>?</p>
<p>Or are my assumptions completely incorrect?</p>
<p>Prepending an <code>gc.set_debug(gc.DEBUG_STATS | gc.DEBUG_LEAK)</code> to this code leads to a python exception instead of a segfault.</p>
<pre><code>---&gt; print(gc.garbage, flush=True)
     gc.collect()
...
ReferenceError: weakly-referenced object no longer exists
</code></pre>
<p>Edit: changed/simplified after comments from one of the answers</p>
</div>
<div class="post-text" itemprop="text">
<p>You're probably misunderstanding both <code>gc.garbage</code> and <code>gc.disable()</code>. <code>gc.disable()</code> turns off the cyclic garbage collector, leaving only reference-counting memory management active. There isn't some separate "garbage detector" that keeps detecting cyclic trash even when the garbage collector is turned off; garbage detection is the garbage collector's job.</p>
<p>Also, <code>gc.garbage</code> is only populated with specific kinds of weird garbage the GC couldn't clear. Most garbage never ends up there.</p>
<p>As for how you'd go about debugging this, I'm not familiar with the tools you'd use. Generic tools like <a href="http://valgrind.org/" rel="nofollow">Valgrind</a> would probably be useful, and GC flags like <a href="https://docs.python.org/3/library/gc.html#gc.DEBUG_LEAK" rel="nofollow"><code>gc.DEBUG_LEAK</code></a> might help.</p>
</div>
<span class="comment-copy">I disagree. Non-cyclic garbage is collected even when <code>gc.dissable()</code> is invoked. What <code>gc.dissable()</code> does is to stop the garbage collector from collecting cyclic structures. Am I wrong about that? Also, I am already using <code>gc.DEBUG_LEAK</code> - this should ensure that "normal" garbage goes to the <code>gc.garbage</code> list. Finally, the problem persist (<code>gc.garbage</code> crashes) even if I do not disable the <code>gc</code> with <code>gc.disable()</code>.</span>
<span class="comment-copy">@Krastanov: Reference counting is still active, but the cyclic garbage detection and collection is completely disabled.</span>
