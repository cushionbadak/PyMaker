<div class="post-text" itemprop="text">
<p>I have to create a grammar <code>nltk</code> for a <code>list</code> in <code>python</code>. I have this grammar for a text: </p>
<pre><code>grammar1 = nltk.CFG.fromstring("""
    S -&gt; NP VP
    VP -&gt; V NP | V NP PP
    PP -&gt; P NP
    V -&gt; "saw" | "ate" | "walked"
    NP -&gt; "John" | "Mary" | "Bob" | Det N | Det N PP
    Det -&gt; "a" | "an" | "the" | "my"
    N -&gt; "man" | "dog" | "cat" | "telescope" | "kitchen"
    P -&gt; "in" | "on" | "by" | "with"
    """)

sent = "the cat ate a telescope in the kitchen".split()
rd_parser = nltk.RecursiveDescentParser(grammar1)

for tree in rd_parser.parse(sent):
    print(tree)
</code></pre>
<p>Now, how can I do the same for a <code>list</code>? I need to test legal and illegal <code>list</code> with a basic grammar. I didn't find any intel about a <code>nltk</code> and lists and I don't really understand how can I do that...</p>
</div>
<div class="post-text" itemprop="text">
<p>Notice that the following code line already creates a list (of strings).</p>
<pre><code>sent = "the cat ate a telescope in the kitchen".split()
</code></pre>
<p>You have also created a recursive descent parser for your grammar using the following line.  Note that you only need to do this once.</p>
<pre><code>rd_parser = nltk.RecursiveDescentParser(grammar1)
</code></pre>
<p>Now, if you want to test a different list of tokens, simply do something like this:</p>
<pre><code>L = ["John", "walked", "the", "dog"]
result = rd_parser.parse(L)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a parser that can be applied to lists of tokens. You have a collection of test materials in different formats. Quoting from your <a href="https://stackoverflow.com/questions/33237305/grammar-nltk-for-list-in-python#comment54308906_33243868">comment</a>: "empty list, list with one token, list with several tokens, list with numbers, tuple, and dictionnary." </p>
<p>The parser can handle "sequences" of strings, which in your case means a list or tuple whose elements are strings (and each string is a word). The parser cannot handle anything else; if your code has to deal with other types, write python code to check their type before the parser sees them. </p>
<p>You'll be interested in the built-in functions <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance()</code></a> (preferred) and <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code></a>. E.g.,</p>
<pre><code>if (isinstance(sent, (tuple, list)) and all(isinstance(w, str) for w in sent)):
    # A tuple or list of strings; try to parse it.
    trees = rd_parser.parse(sent)
</code></pre>
</div>
<span class="comment-copy">Could you explain what is the question in more details?</span>
<span class="comment-copy">Is that really what the OP required?</span>
<span class="comment-copy">Possibly not. I agree that more clarification would be helpful.</span>
<span class="comment-copy">yeah maybe i wasn't clear enough. I need to create a grammar in order to analyze a list with legal and illegal cases. The legals ones are: empty list, list with one token, list with several tokens, list with numbers, tuple, and dictionnary. I don't really understand how to do this... It works for a list of strings, but not with all the others cases.</span>
<span class="comment-copy">So what are the illegal cases?</span>
