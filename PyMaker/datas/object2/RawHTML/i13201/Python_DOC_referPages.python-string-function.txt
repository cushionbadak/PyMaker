<div class="post-text" itemprop="text">
<p>Looking to put together a simple python function that checks the following</p>
<p>Given two strings, return True if either of the strings appears at the very end of the other string,
ignoring upper/lower case differences (in other words, the computation should not be "case
sensitive").</p>
<pre><code>end_other('Hiabc', 'abc') → True
end_other('AbC', 'HiaBc') → True
end_other('abc', 'abXabc') → True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try with</p>
<pre><code>def end_other(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()
    return s1.endswith(s2) or s2.endswith(s1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex</p>
<pre><code>def end_other(s1,s2):
    return bool(re.search(s1+'$',s2,re.I)) or bool(re.search(s2+'$',s1,re.I))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or if you need to "create" your own function:</p>
<pre><code>def check(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    check = True

    # If string 1 is bigger then string 2:
    if( len(str1) &gt; len(str2) ):
        # For each character of string 2
        for i in range(len(str2)):
            # Compare the character i of string 2 with the character at the end of string 1, keeping the order
            if str2[i] != str1[-(len(str2)-i)]:
            check = False

    # If string 2 is bigger then string 1:
    else:
        # For each character of string 1
        for i in range(len(str1)):
            # Compare the character i of string 1 with the character at the end of string 2, keeping the order
            if str1[i] != str2[-(len(str1)-i)]:
                check = False
    return check
</code></pre>
<p>So, basically, if <code>string1 = "ABCD"</code> and <code>string2 = "CD"</code>, it will check character <code>0</code> of <code>string2</code> with <code>2</code> of <code>string1</code> and <code>1</code> of <code>string2</code> with <code>3</code> of <code>string1</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another approach using zip, which avoids having to do multiple passes of <code>endswith()</code>, <code>re.search()</code> or slicing. It iterates the 2 strings in reverse and returns True if all the letters are equal up to the exhaustion of one of the strings:</p>
<pre><code>def end_other(s1, s2):
    return all(a == b for a, b in zip(reversed(s1.lower()), reversed(s2.lower())))
</code></pre>
<p>In Python2 you can use <code>itertools.izip()</code> for a marginal space improvement:</p>
<pre><code>&gt;&gt;&gt; end_other('Hiabc', 'abc')
True
&gt;&gt;&gt; end_other('AbC', 'HiaBc')
True
&gt;&gt;&gt; end_other('abc', 'abXabc')
True
&gt;&gt;&gt; end_other('cbc', 'abXabc')
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use slicing.</p>
<pre><code>&gt;&gt;&gt; s1 = "Hiabc"
&gt;&gt;&gt; s2 = "abc"
&gt;&gt;&gt; l = len(s2)
&gt;&gt;&gt; s2 == s1[-l:]
True
&gt;&gt;&gt; s2 = "aBc"
&gt;&gt;&gt; s2 == s1[-l:]
False
</code></pre>
<p>You can read more about string and slicing <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow">here</a>.</p>
<p>Slicing means to get part of the string based on passed <code>index</code>. General construction look like this: <code>string[starting_index:ending_index]</code>.</p>
<p>Let's take a look at this:</p>
<p><code>string1 = "doggy"
string1[0:1] -&gt; "d"
string1[0:2] -&gt; "do"
string1[0:] = string[:] = "doggy" (from zero to end)</code></p>
<p>You can also pass index lesser than 0:</p>
<p><code>string1[-1:] (from -1 to end) -&gt; "y"</code>
So in the code above calling <code>s1[-l:]</code> means starting position is the length of <code>s2</code> sentece. In this case <code>s1[-l:] = 'abc' = s1[-3:]</code>. Because lenght of <code>s2</code> is 3. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use OOP if you want, subclassing <code>str</code> and writing an appropriate method:</p>
<pre><code>&gt;&gt;&gt; class String(str):
...     def isend(self, other):
...             self = self.lower()
...             other = other.lower()
...             return self.endswith(other) or other.endswith(self)
...
&gt;&gt;&gt; a = String('HiAbC')
&gt;&gt;&gt; b = String('Bc')
&gt;&gt;&gt; a.isend(b)
True
&gt;&gt;&gt; b.isend(a)
True
&gt;&gt;&gt; c = String('Hello')
&gt;&gt;&gt; d = String('el')
&gt;&gt;&gt; c.isend(d)
False
&gt;&gt;&gt; d.isend(c)
False
</code></pre>
</div>
<span class="comment-copy">nice use of <code>or</code></span>
<span class="comment-copy">thanks. on the right track now . I understand that people might think i am just looking for the answer but im really not. im new to this and there is no point in spending all day staring at the screen when you guys can help me learn the same thing in a few minutes. i will then use what you have given me for future work.</span>
<span class="comment-copy">the function above still returns true even if i add a string that should return false ? i have added print end_other ('nononono,nonon') and i still get true</span>
<span class="comment-copy">ahem.. check your quotes. I think you want <code>end_other('nononono','nonon')</code>, which returns False, as expected</span>
<span class="comment-copy">:-)  Thanks a mill. Learned loads from this</span>
<span class="comment-copy">does it work both ways?</span>
<span class="comment-copy">oops sorry fixed :)</span>
<span class="comment-copy">netiquette contemplates citing previous answers, if repeated in yours</span>
<span class="comment-copy">Just edited it, I started writing the answer before any other so haven't seen it @Pynchia</span>
<span class="comment-copy">can you explan this code please ? I dont understand the if statements and the syntax there</span>
<span class="comment-copy">this also gives true for everything , even if it should return false</span>
<span class="comment-copy">Commented and explained @johndoe12345. Please show me a case where it returns true and should return false..</span>
<span class="comment-copy">the slicing method above implies that s1 will always be Hiabc, what if it wasnt ? str.endswith sounds better ? how can i make str1 the value of the first string and str2 the value of the second one, ? i cant hard code these cos they are different in each line .</span>
<span class="comment-copy">@johndoe12345 My answer shows you path you should follow. You should go ask google how to <code>def</code>ine functions in python and try to solve rest of the problem by yourself.</span>
<span class="comment-copy">can you explan this code here please ?</span>
<span class="comment-copy">I have edited my post.</span>
