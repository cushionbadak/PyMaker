<div class="post-text" itemprop="text">
<p>When outputting a list of objects how can you return an <strong>int</strong> type representation for the objects?</p>
<p>I've tried this:</p>
<pre><code>class Passport(object):
    def __init__(self, my_id):
        self.id = my_id

    def __repr__(self):
        return int(self.id)



list_of_objects = [
Passport(19181),
Passport(29191),
Passport(39191)
]

if id in list_of_objects:
    print("true")
</code></pre>
<p>Where list_of_objects is a list of <code>Passport</code> instances. But this gives an error <code>__repr__ returned non-string (type int)</code>.</p>
<p>I could solve this problem using a string for both, but I'm wondering if type int is possible?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code></a> is <em>required</em> to return a <strong>string</strong> representation of the object. Returning a different type is not a valid implementation of <code>__repr__</code>.</p>
<p>If you want a way to return some number, then add a custom method that does that.</p>
<p>Btw., note that implementing <code>__repr__</code> is not a way to make <code>id in list_of_objects</code> work. For that to work, you should implement <code>__hash__</code> and <code>__eq__</code>. But at that point, you should really think about if you want <code>5 == Passport(5)</code> to be true; probably not. So you should change the way your check works by explicitely looking at the <code>id</code> property instead.</p>
<p>Instead of <code>if id in list_of_objects</code>, you could do the following:</p>
<pre><code>if any(lambda x: x.id == id, list_of_objects):
    print('true')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could check a parallel list of the object ids instead.</p>
<pre><code>if any(id == pp.id for pp in list_of_objects):
    print("true")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__repr__</code> must return a <code>str</code> as you have seen.</p>
<p>The proper way to do what you are asking is:</p>
<pre><code>list_of_object_ids = [p.id for p in (Passport(19181), Passport(29191), Passport(39191))]
if id in list_of_objects:
    print("true")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Passport(object):
    def __init__(self, my_id):
        # It is recommended to call int here also in order to prevent
        # construction of invalid objects.
        self.id = int(my_id)

    def __int__(self):
        return int(self.id)

list_of_objects = [
Passport(19181),
Passport(29191),
Passport(39191)
]

list_of_ints = [int(passport) for passport in list_of_objects]

if id in list_of_ints:
    print("true")
</code></pre>
</div>
<span class="comment-copy"><code>__repr__()</code> needs to return a string, what is wrong with <code>return str(self.id)</code> ?</span>
<span class="comment-copy">Can you give an example of what you are looking for?</span>
<span class="comment-copy">Yes I could use something like <code>__hash__</code> but I want the actual list representation to be a set of numbers i.e. <code>if id in list_of_objects.__hash__:</code></span>
<span class="comment-copy">Thatâ€™s just not how it works.</span>
<span class="comment-copy">Does that mean I would need to create another loop ? i.e. remove <code>__repr__</code> then loop again.</span>
<span class="comment-copy">return it as string, and cast it later?</span>
<span class="comment-copy">just make a get_id() method? <code>def get_id(): return self.id</code></span>
<span class="comment-copy">Oh, of course. Thanks for the edit, @Dan D.</span>
