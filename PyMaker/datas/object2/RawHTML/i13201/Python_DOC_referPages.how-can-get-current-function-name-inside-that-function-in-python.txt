<div class="post-text" itemprop="text">
<p>For my logging purpose i want to log all the names of functions where my code is going</p>
<p>Does not matter who is calling the function , i want the the function name in which i declare this line</p>
<pre><code>import inspect

def whoami():
    return inspect.stack()[1][3]

def foo():
    print(whoami())
</code></pre>
<p>currently it prints <code>foo</code> , i want to print  <code>whoami</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You probably want <a href="https://docs.python.org/3/library/inspect.html#inspect.getframeinfo" rel="noreferrer"><code>inspect.getframeinfo(frame).function</code></a>:</p>
<pre><code>import inspect

def whoami(): 
    frame = inspect.currentframe()
    return inspect.getframeinfo(frame).function

def foo():
    print(whoami())

foo()
</code></pre>
<p>prints</p>
<pre><code>whoami
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>For my logging purpose i want to log all the names of functions where my code is going</p>
</blockquote>
<p>Have you considered decorators?</p>
<pre><code>import functools
def logme(f):
    @functools.wraps(f)
    def wrapped(*args, **kwargs):
        print(f.__name__)
        return f(*args, **kwargs)
    return wrapped


@logme
def myfunction();
    print("Doing some stuff")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually, Eric's answer points the way if this is about <em>logging</em>:</p>
<blockquote>
<p>For my logging purpose i want to log all the names of functions where my code is going</p>
</blockquote>
<p>You can adjust the formatter to log the <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" rel="noreferrer">function name</a>:</p>
<pre><code>import logging               

def whoami():
    logging.info("Now I'm there")

def foo():
    logging.info("I'm here")
    whoami()
    logging.info("I'm back here again")

logging.basicConfig(
    format="%(asctime)-15s [%(levelname)s] %(funcName)s: %(message)s",
    level=logging.INFO)
foo()
</code></pre>
<p>prints </p>
<pre><code>2015-10-16 16:29:34,227 [INFO] foo: I'm here
2015-10-16 16:29:34,227 [INFO] whoami: Now I'm there
2015-10-16 16:29:34,227 [INFO] foo: I'm back here again
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>f_code.co_name</code> member of the stack frame returned by <code>sys._getframe()</code>.</p>
<pre><code>sys._getframe(0).f_code.co_name
</code></pre>
<p>For example, in a <code>whoami()</code> function,</p>
<pre><code>import sys

def whoami(): 
    return sys._getframe(1).f_code.co_name

def func1():
    print(whoami())

func1()  # prints 'func1'
</code></pre>
</div>
<span class="comment-copy">Do you want to call and execute the function, or just call the name? Because you're doing the latter now, without parentheses after <code>whoami</code> in the last line.</span>
<span class="comment-copy">"currently it prints <code>foo</code>": your current sample code prints nothing, or at least it won't print <code>foo</code>. Please edit it and provide a valid example.</span>
<span class="comment-copy">inspect.stack()[0][3] ?</span>
<span class="comment-copy">You probably meant to do: <code>print(whoami())</code> . Further, @hero is correct, you should access <code>inspect.stack()[0][3]</code> to get the name</span>
<span class="comment-copy">This worked for me: <code>return inspect.getouterframes(inspect.currentframe())[1].function</code></span>
<span class="comment-copy">Thanks Eric , i will try that. Is there any way to apply that decorator to all function of class</span>
<span class="comment-copy">@JohnKaff: Yes, you can apply decorators to classes too. You'll want that decorator to iterate over all methods of the class object, and wrap them in this decorator.</span>
<span class="comment-copy">thanks , that was cool. any way to get args</span>
<span class="comment-copy">@JohnKaff: I think you've got a case of the X/Y problem here, and should probably ask a new question about how best to log invocations of functions (with arguments, class methods, etc) in python</span>
