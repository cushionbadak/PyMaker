<div class="post-text" itemprop="text">
<p>In Python 3.4+, we can do</p>
<pre><code>class Foo(abc.ABC):
    ...
</code></pre>
<p>or we can do</p>
<pre><code>class Foo(metaclass=abc.ABCMeta):
    ...
</code></pre>
<p>Are there any differences between the two that I should be aware of?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>abc.ABC</code> basically just an extra layer over <code>metaclass=abc.ABCMeta</code>. i.e <code>abc.ABC</code> implicitly defines the metaclass for us.</p>
<p>(Source: <a href="https://hg.python.org/cpython/file/3.4/Lib/abc.py#l234" rel="noreferrer">https://hg.python.org/cpython/file/3.4/Lib/abc.py#l234</a>)</p>
<pre><code>class ABC(metaclass=ABCMeta):
    """Helper class that provides a standard way to create an ABC using
    inheritance.
    """
    pass
</code></pre>
<p>The only difference is that in the former case you need a simple inheritance and in the latter you need to specify the metaclass.</p>
<p>From <a href="https://docs.python.org/3/whatsnew/3.4.html#abc" rel="noreferrer">What's new in Python 3.4</a>(emphasis mine):</p>
<blockquote>
<p>New class <code>ABC</code> has <code>ABCMeta</code> as its meta class. Using <code>ABC</code> as a base
  class has essentially the same effect as specifying
  <code>metaclass=abc.ABCMeta</code>, <strong>but is simpler to type and easier to read</strong>.</p>
</blockquote>
<hr/>
<p><strong>Related issue:</strong> <a href="https://bugs.python.org/issue16049" rel="noreferrer">Create abstract base classes by inheritance rather than a direct invocation of <code>__metaclass__</code></a></p>
</div>
<span class="comment-copy">@walrus--I believe the differences aren't new to Python3.X. Class creates instances and metaclass creates classes. When you invoke Class it uses an implicit metaclass 'type' for that class, you just don't know it. I would think that most of the time you aren't going to need to use a metaclass, though I get that in our heads it always seems like a good idea to leverage something by using  a metaclass.</span>
