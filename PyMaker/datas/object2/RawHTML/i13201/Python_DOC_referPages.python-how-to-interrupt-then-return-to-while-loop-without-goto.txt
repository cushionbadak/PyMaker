<div class="post-text" itemprop="text">
<p>I'm running a simple PID control program in python. Basically an infinite while loop, which reads from sensors then calculates the appropriate control signal, as well as outputs diagnostic info to the terminal. </p>
<p>However, sometimes while watching the diagnostic info, I'd like to change the PID coefficients - which are essentially some constants used by the loop - by breaking from the loop, accepting user input, then returning to the very same loop. I'd like to do this an arbitrary number of times.</p>
<p>With 'goto' this would be simple and easy and just what I want. Can someone give me some python pseudo-code to do this? I can't really think of how to do it. I can interrupt the loop with a CTRL+C exception handler, but then I can't get back to the main loop. </p>
<p>There must be some very simple way to do this but I can't think of it. Thoughts?
Snippets from my code:</p>
<pre><code>while True:
        t0 = get_temp_deg_c(thermocouple1)
        print "Hose Temperature = " + str(t0) + " deg C"

        t1 = get_temp_deg_c(thermocouple2)
        print "Valve Temperature = " + str(t1) + " deg C"

        # write temps to file
        fi.write(str(t0))
        fi.write(" " + str(t1) + "\n")

        error = setpoint - t0

        print "Setpoint = " + str(setpoint) + " deg C"
        print "Error = " + str(error) + " deg C"

        percent_error = error/setpoint*100
        print "Percent error = " + str(percent_error) + " %"

        duty_out = p.GenOut(percent_error)
        print "PID controller duty output: " + str(duty_out) + " %"
        # clamp the output
        if(duty_out) &gt; 100:
            duty_out = 100
        if(duty_out &lt; 0):
            duty_out = 0

        PWM.set_duty_cycle(PWM_pin, duty_out)

        # do we need to increment the setpoint?
        if( (setpoint - setpoint_precision) ... # omitted logic here

        # Here we return to the top
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As long as you're okay with restarting "from the top" after each interrupt (as opposed to returning to the exact point in the loop when the signal was raised, which is a much harder problem):</p>
<pre><code>while True:
    try:
        controller.main_loop()
    except KeyboardInterrupt:
        controller.set_coefficients()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you don't want a separate thread for IO, generators may be used to preserve the state of your loop across KeyboardInterrupts.</p>
<pre><code>some_parameter = 1

def do_pid_stuff():
    while True:
        sensor_data1 = 'data'
        sensor_data2 = 'data'
        sensor_data3 = 'data'
        yield 'based on sensor_data1 ' * some_parameter
        yield 'based on sensor_data2 ' * some_parameter
        yield 'based on sensor_data3 ' * some_parameter


stuff = do_pid_stuff()
while True:
    try:
        for control_signal in stuff:
            print(control_signal)
    except KeyboardInterrupt:
        some_parameter = int(input())
</code></pre>
<p>So the main loop will continue with new parameters from the last executed <code>yield</code>. This however would require to rewrite your loop. Probably, it should be splitted into a generator that will give you sensor data and into a function that will actually do stuff based on the sensor values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You already have a few ways to interact with your loop, I'd like to point out another one: <code>select()</code>. Using <code>select()</code>, you can wait for either user input. If you add a timeout, you can then break into the normal loop if no user input is available and interact with your hardware there.</p>
<p>Notes:</p>
<ul>
<li>Here's the documentation for <a href="https://docs.python.org/3/library/select.htmlselect" rel="nofollow">select</a> , but consider the warning on top and look at the <a href="https://docs.python.org/3/library/selectors.html" rel="nofollow">selectors</a> module instead.</li>
<li>This solution, like the one using a keyboard interrupt, will stop interacting with the hardware while parameters are being changed. If that isn't acceptable, using a background thread is necessary.</li>
<li>Using <code>select()</code> is more generally applicable, you could also wait for network traffic.</li>
<li>Your hardware will not be serviced as often as possible but with a fixed pause in between. On the upside, you also don't use a full CPU then.</li>
</ul>
</div>
<span class="comment-copy">Are you able modify the code to run the main loop in a thread?</span>
<span class="comment-copy">Maybe threading the while loop would do the work, but I am not sure about whether threading allows outside thread references.  Would you give us an actual code example?</span>
<span class="comment-copy">You can build in interactive shell of sort that will let users poke at variables inside your program while the pid loop runs in a thread, <a href="http://stackoverflow.com/questions/32899275/python-script-hanging-when-running-in-the-background/32899461#32899461">an example that will let you also throw the whole thing into the background</a></span>
<span class="comment-copy">Basically it seems like you want to poll the keyboard's input buffer? This answer mentions some ways of doing it. <a href="http://stackoverflow.com/questions/292095/polling-the-keyboard-in-python" title="polling the keyboard in python">stackoverflow.com/questions/292095/â€¦</a></span>
<span class="comment-copy">Hi all, added a code snippet that contains the essentials.</span>
