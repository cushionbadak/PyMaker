<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question is an exact duplicate of:</p>
<ul>
<li>
<a dir="ltr" href="/questions/55189024/saving-photos-to-csv-file">Saving photos to csv file</a>
</li>
</ul>
</div>
<p>photos I should send for analysis (using python script). The results then need to be saved in a file (preferably csv) in which one column will be the emotion that has been recognized by people (i.e. file name) and the other emotion recognized by Face API.napr. in case of a photo in folder j, joy4 it will look like this: j / joy4 joy happiness (since the system recognized happiness, see appendix) file will have as many lines as there are photos   </p>
<p>Emotions from the photos are displayed on the command line and I need them to be saved directly in theEmotions from the photos are displayed on the command line and I need them to be saved directly in the csv file csv file.</p>
<p>0</p>
<p>I have a set of images and corresponding information I would like to store in a csv file like this:</p>
<pre><code>file_info 1 | file_info2       | image
some info   |  other info      | 121 127 ...a lot of number ... 130 128 
</code></pre>
<p>This is just one example row, but there would be as many rows as I have images.</p>
<pre><code>import requests
    import os
    import time
    import pprint
    #import csv


    BASE_URL = 'https://westcentralus.api.cognitive.microsoft.com/face/v1.0'
    headers = {
        'Ocp-Apim-Subscription-Key': 'cccf20b44cb9445a8a4239ce324acfed',
        'Content-Type': 'application/octet-stream'
    }
    parameters = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,emotion'
    }

    def post_image(img_data):
        response = requests.post(BASE_URL, params=parameters,
                                 headers=headers, data=img_data)
        try:
            return response.json()
        except:
            return None



    img_path = 'C:\\Users\\Pifko\\Desktop\\bakalarka\\ffmpeg-20181107-0c6d4e7-win64-static\\ffmpeg-20181107-0c6d4e7-win64-static\\bin\\all'
    print("pritn")
    files = os.listdir(img_path)

    for file in files:
        file = os.path.join(img_path,file)
        img_data = open(file, 'rb').read()
        pprint.pformat(post_image(img_data))
        time.sleep(3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are u looking for something like this ...?</p>
<pre><code>import csv, os

def get_path(yourpath):
    return os.path.abspath(yourpath)

with open('new_test.csv', 'wb') as fp:
    # adding a header
    fw = csv.DictWriter(
        fp,
        fieldnames = [
            'filename',
            'path',
            '....'
        ]
    )
    fw.writeheader()

    myfile = raw_input('your file here: ')
    base = os.path.basename(myfile)
    file, extns = os.path.splitext(base)
    data = file + ',' + get_path(myfile)

    for line in data:
        fp.write(line)
</code></pre>
<p>this will help for single line inputs...</p>
</div>
<span class="comment-copy">Just a mention, you shouldn't be publicy posting API keys if there is any chance it could be abused.</span>
<span class="comment-copy">I  have a set of images and corresponding information I would like to store in a csv file like this:  file_info 1 | file_info2       | image some info   |  other info      | 121 127 ...a lot of number ... 130 128                                                                                                                                        This is just one example row, but there would be as many rows as I have images.</span>
<span class="comment-copy">you may write a separate function that will either return a key-pair Dict/List of 2 separate entities that holds one for ur headers &amp; other for content rows. &amp; pass it to <code>csv.DictWriter(fp, fieldnames=data.keys())</code> and <code>for line in data.values(): fp.write(line)</code>  eg:     def my_func(self, **kwargs):         ...         #ur logic here         ...         data = {             'key-1': 'values-1',             'key-2': 'values-2',             'key-3': 'values-3',         } return data  <a href="https://pythontips.com/2013/08/04/args-and-kwargs-in-python-explained/" rel="nofollow noreferrer">use of *args and **kwargs</a></span>
