<div class="post-text" itemprop="text">
<p>First code fragment:</p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = 7
&gt;&gt;&gt; a, b = b, a
&gt;&gt;&gt; a == 7
True
&gt;&gt;&gt; b == 5
True
</code></pre>
<p>Second code fragment:</p>
<pre><code>&gt;&gt;&gt; def swap(first_obj, second_obj):
...     second_obj[:], first_obj[:] = first_obj, second_obj
...
&gt;&gt;&gt; first = [1, 2, 3]
&gt;&gt;&gt; second = [4, 5, 6]
&gt;&gt;&gt; first_content = first[:]
&gt;&gt;&gt; second_content = second[:]
&gt;&gt;&gt; swap(first, second)
&gt;&gt;&gt; print(first, second_content, first == second_content)
[1, 2, 3] [4, 5, 6] False
&gt;&gt;&gt; second, first_content, second == first_content)
[1, 2, 3] [1, 2, 3] True
</code></pre>
<p>My task is to write a function that swaps the values of two variables. But it can't return any values. I know that I can add third variable, but I want to find out what's wrong with the second code fragment.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are replacing the contents of the list objects directly, not swapping variables. Because the contents of <code>second_obj</code> are replaced first, then <code>second_obj</code> is used to replace the contents of <code>first_obj</code>, you end up with the contents of the <code>first_obj</code> list in both lists.</p>
<p>Lets give the list objects reference ids to distinguish them. The variable names <code>first_obj</code> and <code>second_obj</code> are references themselves, to two lists:</p>
<ol>
<li><code>first_obj</code> references id <code>{L1}</code>, value <code>[1, 2, 3]</code></li>
<li><code>second_obj</code> references id <code>{L2}</code>, value <code>[4, 5, 6]</code></li>
</ol>
<p>What happens next is this:</p>
<ul>
<li>The two lists are pushed on the stack in order, with <code>{L2}</code> ending up top.</li>
<li>The top two entries on the stack are swapped, so now the top of the stack contains first <code>{L1}</code> then <code>{L2}</code>.</li>
<li>The top of the stack is assigned to <code>second_obj[:]</code>, which replaces all values <em>in the list <code>second_obj</code> references</em>.  The values contained in <code>{L1}</code> are copied over to <code>{L2}</code>. <code>{L2}</code> now is <code>[1, 2, 3]</code>. The top of the stack is removed.</li>
<li>The top of the stack is assigned to <code>first_obj[:]</code>, which replaces all values <em>in the list <code>first_obj</code> references</em>.  The values contained in <code>{L2}</code> are copied over to <code>{L1}</code>. <code>{L1}</code> now is <code>[1, 2, 3]</code>. The top of the stack is removed.</li>
</ul>
<p>You can make the swap work by creating a copy of <code>second_obj</code> first:</p>
<pre><code>second_obj[:], first_obj[:] = first_obj, second_obj[:]
</code></pre>
</div>
