<div class="post-text" itemprop="text">
<p>In the Python <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">documentation</a>, it's said that after an object was created, it has <code>identity, type</code> and <code>value</code>. Once it was created, identity and type can't be changed.</p>
<p>Only if identity, type and value are the same, the <code>is</code> operator returns <code>True</code>. The operator <code>==</code> compares the object's value. </p>
<ul>
<li><p>Then what is the object's attribute?</p></li>
<li><p>What is the link between object and attribute?</p></li>
</ul>
<p>The following is my assumption: The object's attribute actually is referenced between objects. It represents the objects's relationship. An object's attribute is another object. It is more like a 'C' language pointer. </p>
<p>Is this correct?</p>
</div>
<div class="post-text" itemprop="text">
<p>First you need to udnerstand the concept of variables and objects.</p>
<p>In Python, when you do <code>x = 42</code> for example you are doing 2 things.</p>
<ol>
<li>Creating an object whose value is 42 and whose type is <code>int</code> and storing it in memory (there is a shortcut for small ints in CPython but lets consider it behaves the same for small ints that it would do for any type).</li>
<li>Referencing that object with variable <code>x</code>.</li>
</ol>
<p><a href="https://i.stack.imgur.com/s3E7l.png" rel="nofollow noreferrer"><img alt="Python variable" src="https://i.stack.imgur.com/s3E7l.png"/></a>
<em>Source: <a href="https://www.python-course.eu/images/python_variable_1.png" rel="nofollow noreferrer">https://www.python-course.eu/images/python_variable_1.png</a></em></p>
<p>So the object would have an identity, that would be a numerical id that references that object and only that object (in CPython that number is the memory address but this is implementation specific), a type, that in our case would be <code>int</code>, and a value, in our case 42.</p>
<p>The identity and the type will never change, and the value will depend on the object type itself. Mutable objects such as <code>list</code>s and <code>dict</code>s allow their values to be changed without having to create another object with the new value, while <code>int</code>s, <code>str</code>s and <code>tuple</code>s do not allow their values to change, you would be creating another object in another memory location with the new value.</p>
<p>The attributes of any object are the different info they store depending on their types. In our case an <code>int</code> only stores an Integer, but there could be more complex types that store more info. For example an object representing a connection to an HTTP server would probably have attributes that store the IP address and port, or a class connecting to a DB would need the user and the password. Those would be attributes. I will use a custom created class representing an animal as an example.</p>
<pre><code>class Animal:
    def __init__(self, legs, height):
        self.legs = legs
        self.height = height

dog = Animal(4, 0.5)
horse = Animal(4, 2)
spider = Animal(8, 0.01)

print("The height of a dog is "+str(dog.height)+" meters and has "+str(dog.legs)+" legs.")
</code></pre>
<p>In this example we would have 3 objects of type <code>Animal</code>, each with its own id and two attributes, the number of legs and the height in meters, the value would be the set of all its attributes. We also have 3 variables (<code>dog</code>, <code>horse</code> &amp; <code>spider</code>) referencing/pointing to those objects. We are then printing into the console:</p>
<pre><code>The height of a dog is 0.5 meters and has 4 legs.
</code></pre>
<p>The <code>str()</code> functions inside the <code>print()</code> function returns other objects of type <code>str</code> with values <code>"0.5"</code> and <code>"4"</code> so that we can concatenate all the <code>str</code>s with the <code>+</code> operators.</p>
</div>
<div class="post-text" itemprop="text">
<p>For custom (non-builtin) classes, "value" of the object is all values of attributes taken together, roughly (or, alternately speaking, the value of the object's attribute dictionary, available as <code>obj.__dict__</code>). How exactly attributes hold values (whether it's a a primitive value itself, or a reference to another object) is an implementation detail and ultimately unimportant. For built-in classes, the text continues to define values of each. Note that "value" here is an abstract concept, used to describe Python's behaviour, and is not actually something that explicitly exists in Python itself.</p>
<p>The operator <code>==</code> just calls <code>__eq__</code> method; it is intended to compare the object values, but it is not obligated to do so.</p>
</div>
<span class="comment-copy">It would help if you had linked the Document that you are referencing from. There are good and bad resources about a language - and many mediocre ones. Please add your source. You don't describe what this reference of yours sais about attributes, only what it tells about <code>identity, type</code> and <code>value</code>. You might be mangling "class attributes" which would be called (fields, members, variables, properties,...) of the class in other language contexts.</span>
<span class="comment-copy">this is the link <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">Not really, let me try to sum up that link.</span>
<span class="comment-copy">I understand,the value is the set of its attributes</span>
<span class="comment-copy">@yuyang1992 That's right</span>
<span class="comment-copy">what you say means object's value is the collection of attributes'value?</span>
