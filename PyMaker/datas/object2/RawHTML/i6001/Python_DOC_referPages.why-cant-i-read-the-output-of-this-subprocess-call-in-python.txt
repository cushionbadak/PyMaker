<div class="post-text" itemprop="text">
<p>I want to make a subprocess call to get the directory structure of a folder called ORIG.</p>
<p>Here's my code:</p>
<pre><code>import os
from subprocess import call
# copy the directory structure of ORIG into file

f = open("outputFile.txt","r+b")
call(['find', './ORIG', '-type', 'd'], stdout=f)

a = f.read()
print(a)
</code></pre>
<p>The <em>call</em> command is working, as I see the contents of the file <em>outputFile.txt</em> when I open it:</p>
<pre><code>./ORIG
./ORIG/child_one
./ORIG/child_one/grandchild_one
./ORIG/child_two
</code></pre>
<p>But why can't I read this/print the output?</p>
<p>According to Luke.py's suggestion, I tried the following also:</p>
<pre><code>import os
import re
from subprocess import call, PIPE

# copy the directory structure of ORIG into file
# make directory structure from ORIG file in FINAL folder

process = call(['find', './ORIG', '-type', 'd'], stdout=PIPE, stderr=PIPE)
stdout, stderr = process.communicate()

if stderr:
    print stderr
else:
    print stdout
</code></pre>
<p>This gives me the outut:</p>
<pre><code>Traceback (most recent call last):
  File "feeder.py", line 9, in &lt;module&gt;
    stdout, stderr = process.communicate()
AttributeError: 'int' object has no attribute 'communicate'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try Popen- </p>
<p>You'll need to import PIPE from subprocess.</p>
<pre><code>process = subprocess.Popen(['find', './ORIG', '-type', 'd'], stdout=PIPE, stderr=PIPE)
stdout, stderr = process.communicate()

if stderr:
    print stderr
else:
    print stdout
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First: There is no need to call external programs. If you want to get the subdirectories of some path, there's the python function <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a>. You could use that and check each entry with <code>os.path.isdir</code>, or e.g. use <code>os.fwalk</code> and just use the directories.</p>
<p>If you really want to call an external program and get its stdout, usually the high level function <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> is the right choice.
You can get the stdout with:</p>
<pre><code>subprocess.run(command, stdout=subprocess.PIPE).stdout
</code></pre>
<p>Without the need for a temporary file or low level functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to close and reopen the file in between writing and reading, you can use the seek command to read the file from the beginning.</p>
<pre><code>import os
from subprocess import call
# copy the directory structure of ORIG into file

f = open("outputFile.txt","r+b")
call(['find', './ORIG', '-type', 'd'], stdout=f)

# move back to the beginning of the file
f.seek(0, 0)

a = f.read()
print(a)
</code></pre>
</div>
<span class="comment-copy">I tried your suggestion and it gave me an error -- I updated my question.</span>
<span class="comment-copy">try to use subprocess.Popen instead - edited answer</span>
<span class="comment-copy">That did the trick, thanks.  If you could explain why Python can't read the txt file that I successfully write with my original code, that would be helpful too.</span>
<span class="comment-copy">call returns an int. not the output</span>
<span class="comment-copy">what is the read error?</span>
<span class="comment-copy">Good Stuff - I only used subprocess as the user was asking specifically</span>
