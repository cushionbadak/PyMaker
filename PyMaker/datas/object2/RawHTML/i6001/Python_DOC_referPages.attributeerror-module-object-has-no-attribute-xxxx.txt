<div class="post-text" itemprop="text">
<p>In the current working directory:</p>
<p>The package <code>foo</code> contains the module <code>bar.py</code>, along with an empty <code>__init__.py</code> file.</p>
<p>For argument's sake, the module <code>bar.py</code> contains the following  code:</p>
<pre><code>def print_message():
    print 'The function print_message() prints this message'

print 'The module \"bar\" prints \"bar\"'
</code></pre>
<p><strong>Expected behaviour</strong> upon <code>import foo</code>:</p>
<ol>
<li><code>foo.bar</code> to print <code>The module "bar" prints "bar"</code></li>
<li><code>foo.bar.print_message()</code> to print <code>The function print_message() prints this message</code></li>
</ol>
<p><strong>Instead</strong>, I struggle with the import of the <code>bar.py</code> module:</p>
<ul>
<li><p>On one hand, using <code>from foo import bar</code> then allows to call
<code>bar.print_message()</code></p></li>
<li><p>On the other hand, if I <code>import foo</code>, then <code>foo.bar</code> yields the
error in the title: <code>AttributeError: 'module' object has no attribute 'bar'</code>(and so does <code>foo.bar.print_message()</code>)</p></li>
</ul>
<p>All the best rated questions on SO I've skimmed through so far, with regards to <code>AttributeError</code>, feature an answer related to something within the module, not the import itself. Also, Kernel is restarted between each attempt.</p>
<p><strong>Question:</strong> Not a blocking point as such but it bugs me down not to understand that behaviour. I'm rather inexperienced, so what fondamental concept am I missing here? 
Thank you, </p>
</div>
<div class="post-text" itemprop="text">
<p>When you import foo, you just imported the package, not any of the modules, so when you called bar, it looked in the <strong>init</strong>.py file for bar, and that file doesn't have bar in it. If you don't import bar into the modules global namespace, it has no idea what bar is, which is why you got an error. </p>
<pre><code>import foo
print(dir(foo)) # ['__builtins__', ...,'__spec__', 'print_message']
from foo import bar
print(dir(foo)) # ['__builtins__',..., 'bar', 'print_message']
</code></pre>
<p>You could add <code>from . import bar</code> to the <strong>init</strong>.py file. This would make foo aware of bar when it runs the <strong>init</strong>.py file on import.
<a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a> has some information about modules and packages, and there's some really good info in this post here <a href="https://stackoverflow.com/questions/9048518/importing-packages-in-python">Importing packages in Python</a></p>
</div>
<span class="comment-copy">Very clear , thanks for the links.</span>
