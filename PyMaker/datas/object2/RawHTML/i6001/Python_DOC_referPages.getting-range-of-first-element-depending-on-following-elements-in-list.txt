<div class="post-text" itemprop="text">
<p>I am struggling with the following. Basically I have a list: </p>
<pre><code>dolist = [(1280, ['A1'], ['A2']), (1278, ['A1'], ['A2']), (1276, ['A1'], ['A2']), (1274, ['B1'], ['B2']), (1272, ['A1'], ['A2']), (1270, [], ['A2'])]
</code></pre>
<p>Now I want to have lists sorted sorted by element 2 and 3.</p>
<pre><code>uniqdo = [ (['A1'],['A2']), (['B1'],['B2']),([],['A2']) ]
dorange = [ "1280-1276,1272","1274","1270" ]
</code></pre>
<p>I have tried to do with straightforward comparisons but the code becomes very long with several tests and looks a bit messy. There must be library functions which can do this reasonable quick.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> could help you:</p>
<pre><code>&gt;&gt;&gt; dolist = [ (1280,['A1'],['A2']),(1278,['A1'],['A2']),(1276,['A1'],['A2']),(1274,['B1'],['B2']),(1272,['A1'],['A2']) ]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [[v, [i for i,*_ in g]] for v, g in groupby(dolist, key= lambda l: (l[1][0], l[2][0]))]
[[('A1', 'A2'), [1280, 1278, 1276]], [('B1', 'B2'), [1274]], [('A1', 'A2'), [1272]]]
</code></pre>
<p>It shouldn't be hard to convert the above data structure to the one you want.</p>
<p>Here's a start. You cannot leave any list as input because a Python list cannot be used as a dict key. So <code>get_value</code> returns <code>None</code> instead of an empty list:</p>
<pre><code>from itertools import groupby

dolist = [(1280, ['A1'], ['A2']), (1278, ['A1'], ['A2']), (1276, ['A1'], ['A2']), (1274, ['B1'], ['B2']), (1272, ['A1'], ['A2']), (1270, [], ['A2'])]
ranges = {}


def get_value(l):
    if l:
        return l[0]
    else:
        return None


def get_values(t):
    return (get_value(t[1]), get_value(t[2]))

for v, g in groupby(dolist, get_values):
    ids = [str(t[0]) for t in g]
    if len(ids) &gt; 1:
        range_str = ids[0] + '-' + ids[-1]
    else:
        range_str = ids[0]
    ranges.setdefault(v, []).append(range_str)

print(ranges)
# {('A1', 'A2'): ['1280-1276', '1272'], ('B1', 'B2'): ['1274'], (None, 'A2'): ['1270']}
</code></pre>
</div>
<span class="comment-copy">if <code>1278</code> was absorbed, why not specify a range as <code>1280-1272</code> ? Besides, if we do sorting, it seems reasonable to specify it as <code>1272-1280</code></span>
<span class="comment-copy">@RomanPerekhrest: Possibly because 1274 is inside <code>1280-1272</code> but hasn't the same values.</span>
<span class="comment-copy">and how should look the range if there would be <code>(1279,['B1'],['B2'])</code> instead of <code>(1274,['B1'],['B2'])</code> ?</span>
<span class="comment-copy">@RomanPerekhrest: Ask OP ;) I don't know if the column is sorted in descending order.</span>
<span class="comment-copy">@EricDuminil, removed your nickname from my last comment, now it's a common comment</span>
<span class="comment-copy">Thanks. I could not get my head around doing the keys. It works great fro the example. But alas, I should have included in the example that sometimes there can be empty list in a tuple. Somehow this makes it go for loop go wrong.</span>
<span class="comment-copy">@Cnoobplusplus: See update.</span>
