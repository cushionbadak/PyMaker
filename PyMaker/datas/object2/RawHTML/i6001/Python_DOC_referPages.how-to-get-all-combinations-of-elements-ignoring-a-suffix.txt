<div class="post-text" itemprop="text">
<p>Let's say I have four elements like this </p>
<pre><code>test = ['A', 'B', 'C', 'D']
</code></pre>
<p>Then I can easily get all combinations consisting of three elements like this</p>
<pre><code>import itertools as it
list(it.combinations(test, 3))
</code></pre>
<p>which gives</p>
<pre><code> [('A', 'B', 'C'), ('A', 'B', 'D'), ('A', 'C', 'D'), ('B', 'C', 'D')]
</code></pre>
<p>However, now I have also several suffixes, e.g.</p>
<pre><code>suff = ['x', 'y']
</code></pre>
<p>which I want to take into consideration. My <strong>desired outcome</strong> looks like this</p>
<pre><code>[('A__x', 'B__x', 'C__x'),
 ('A__x', 'B__x', 'C__y'),
 ('A__x', 'B__x', 'D__x'),
 ('A__x', 'B__x', 'D__y'),
 ('A__x', 'B__y', 'C__x'),
 ('A__x', 'B__y', 'C__y'),
 ('A__x', 'B__y', 'D__x'),
 ('A__x', 'B__y', 'D__y'),
 ('A__x', 'C__x', 'D__x'),
 ('A__x', 'C__x', 'D__y'),
 ('A__x', 'C__y', 'D__x'),
 ('A__x', 'C__y', 'D__y'),
 ('A__y', 'B__x', 'C__x'),
 ('A__y', 'B__x', 'C__y'),
 ('A__y', 'B__x', 'D__x'),
 ('A__y', 'B__x', 'D__y'),
 ('A__y', 'B__y', 'C__x'),
 ('A__y', 'B__y', 'C__y'),
 ('A__y', 'B__y', 'D__x'),
 ('A__y', 'B__y', 'D__y'),
 ('A__y', 'C__x', 'D__x'),
 ('A__y', 'C__x', 'D__y'),
 ('A__y', 'C__y', 'D__x'),
 ('A__y', 'C__y', 'D__y'),
 ('B__x', 'C__x', 'D__x'),
 ('B__x', 'C__x', 'D__y'),
 ('B__x', 'C__y', 'D__x'),
 ('B__x', 'C__y', 'D__y'),
 ('B__y', 'C__x', 'D__x'),
 ('B__y', 'C__x', 'D__y'),
 ('B__y', 'C__y', 'D__x'),
 ('B__y', 'C__y', 'D__y')]
</code></pre>
<p>So I want to find all combinations of three for both suffixes but without a duplicate in everything in front of this suffix (e.g. I don't want <code>('A__x', 'A__y', 'C__x')</code> as there would be two <code>A</code>).</p>
<p>I currently implement this as follows:</p>
<pre><code>import itertools as it

def filter_elements(some_elements, connector):

    # get all elements in front of the connector
    all_elements = [eli.split(connector)[0] for eli in some_elements]

    # return True if all elements are unique
    return len(all_elements) == len(set(all_elements))

test = ['A', 'B', 'C', 'D']

suff = ['x', 'y']

connector = '__'

test_suff = ["{}{}{}".format(eli, connector, si) for eli in test for si in suff]

all_combinations = list(it.combinations(test_suff, 3))

desired_combinations = [combi for combi in all_combinations if filter_elements(combi, connector)]
</code></pre>
<p>which gives me the desired output.</p>
<p>Clearly, this should not only work for four elements and 2 suffixes but for arbitrary combinations. Is there a more straightforward way of achieving this which avoids the creation of <code>all_combinations</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that you only need <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>it.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; list(it.product('xy', repeat=3))
[('x', 'x', 'x'),
 ('x', 'x', 'y'),
 ('x', 'y', 'x'),
 ('x', 'y', 'y'),
 ('y', 'x', 'x'),
 ('y', 'x', 'y'),
 ('y', 'y', 'x'),
 ('y', 'y', 'y')]
</code></pre>
<p>So if you want the 32 tuples listed above:</p>
<pre><code>list(it.product(it.combinations(test, 3), it.product(suff,repeat=3)))
</code></pre>
<p>It returns:</p>
<pre><code>[(('A', 'B', 'C'), ('x', 'x', 'x')),
 (('A', 'B', 'C'), ('x', 'x', 'y')),
 (('A', 'B', 'C'), ('x', 'y', 'x')),
 (('A', 'B', 'C'), ('x', 'y', 'y')),
 (('A', 'B', 'C'), ('y', 'x', 'x')),
 (('A', 'B', 'C'), ('y', 'x', 'y')),
 (('A', 'B', 'C'), ('y', 'y', 'x')),
 (('A', 'B', 'C'), ('y', 'y', 'y')),
 (('A', 'B', 'D'), ('x', 'x', 'x')),
 (('A', 'B', 'D'), ('x', 'x', 'y')),
 (('A', 'B', 'D'), ('x', 'y', 'x')),
 (('A', 'B', 'D'), ('x', 'y', 'y')),
 (('A', 'B', 'D'), ('y', 'x', 'x')),
 (('A', 'B', 'D'), ('y', 'x', 'y')),
 (('A', 'B', 'D'), ('y', 'y', 'x')),
 (('A', 'B', 'D'), ('y', 'y', 'y')),
 (('A', 'C', 'D'), ('x', 'x', 'x')),
 (('A', 'C', 'D'), ('x', 'x', 'y')),
 (('A', 'C', 'D'), ('x', 'y', 'x')),
 (('A', 'C', 'D'), ('x', 'y', 'y')),
 (('A', 'C', 'D'), ('y', 'x', 'x')),
 (('A', 'C', 'D'), ('y', 'x', 'y')),
 (('A', 'C', 'D'), ('y', 'y', 'x')),
 (('A', 'C', 'D'), ('y', 'y', 'y')),
 (('B', 'C', 'D'), ('x', 'x', 'x')),
 (('B', 'C', 'D'), ('x', 'x', 'y')),
 (('B', 'C', 'D'), ('x', 'y', 'x')),
 (('B', 'C', 'D'), ('x', 'y', 'y')),
 (('B', 'C', 'D'), ('y', 'x', 'x')),
 (('B', 'C', 'D'), ('y', 'x', 'y')),
 (('B', 'C', 'D'), ('y', 'y', 'x')),
 (('B', 'C', 'D'), ('y', 'y', 'y'))]
</code></pre>
<p>In order to get the desired format, you need to use <a href="https://docs.python.org/3.4/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a>:</p>
<pre><code>[tuple('__'.join(ls) for ls in zip(*t)) for t in it.product(it.combinations(test, 3), it.product(suff,repeat=3))]
</code></pre>
<p>It returns:</p>
<pre><code>[('A__x', 'B__x', 'C__x'),
 ('A__x', 'B__x', 'C__y'),
 ('A__x', 'B__y', 'C__x'),
 ('A__x', 'B__y', 'C__y'),
 ('A__y', 'B__x', 'C__x'),
 ('A__y', 'B__x', 'C__y'),
 ('A__y', 'B__y', 'C__x'),
 ('A__y', 'B__y', 'C__y'),
 ('A__x', 'B__x', 'D__x'),
 ('A__x', 'B__x', 'D__y'),
 ('A__x', 'B__y', 'D__x'),
 ('A__x', 'B__y', 'D__y'),
 ('A__y', 'B__x', 'D__x'),
 ('A__y', 'B__x', 'D__y'),
 ('A__y', 'B__y', 'D__x'),
 ('A__y', 'B__y', 'D__y'),
 ('A__x', 'C__x', 'D__x'),
 ('A__x', 'C__x', 'D__y'),
 ('A__x', 'C__y', 'D__x'),
 ('A__x', 'C__y', 'D__y'),
 ('A__y', 'C__x', 'D__x'),
 ('A__y', 'C__x', 'D__y'),
 ('A__y', 'C__y', 'D__x'),
 ('A__y', 'C__y', 'D__y'),
 ('B__x', 'C__x', 'D__x'),
 ('B__x', 'C__x', 'D__y'),
 ('B__x', 'C__y', 'D__x'),
 ('B__x', 'C__y', 'D__y'),
 ('B__y', 'C__x', 'D__x'),
 ('B__y', 'C__x', 'D__y'),
 ('B__y', 'C__y', 'D__x'),
 ('B__y', 'C__y', 'D__y')]
</code></pre>
</div>
