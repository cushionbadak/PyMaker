<div class="post-text" itemprop="text">
<p>Is there a difference between using <code>os.getlogin()</code> and <code>os.environ</code> for getting the current user's username on Linux?</p>
<p>At different times I've seen someone recommend looking at the environment variables <code>$USER</code> or <code>$LOGNAME</code>, and other times <code>os.getlogin()</code> was recommended.</p>
<p>So I'm curious: is one preferred, or are there situations where you would use one over the other, or are they simply two ways of doing the same thing?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Update: use <a href="https://docs.python.org/3/library/getpass.html#getpass.getuser" rel="nofollow noreferrer"><code>getpass.getuser()</code></a></h2>
<p><code>getpass.getuser()</code> conveniently searches through the various user environment variables to get the username.  This avoids the issues with <code>os.getlogin()</code> enumerated below.</p>
<p>If you're worried about people modifying the environment variables, then use <code>pwd.getpwuid(os.getuid())[0]</code>.</p>
<p>From the <a href="https://docs.python.org/3/library/getpass.html#getpass.getuser" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>This function checks the environment variables <code>LOGNAME</code>, <code>USER</code>, <code>LNAME</code> and <code>USERNAME</code>, in order, and returns the value of the first one which is set to a non-empty string. If none are set, the login name from the password database is returned on systems which support the pwd module, otherwise, an exception is raised.</p>
<p>In general, this function should be preferred over <code>os.getlogin()</code>.</p>
</blockquote>
<p>From the <a href="https://docs.python.org/3/library/os.html#os.getlogin" rel="nofollow noreferrer">Python docs</a> for <code>os.getlogin()</code>:</p>
<blockquote>
<p>For most purposes, it is more useful to use <code>getpass.getuser()</code> since the latter checks the environment variables <code>LOGNAME</code> or <code>USERNAME</code> to find out who the user is, and falls back to <code>pwd.getpwuid(os.getuid())[0]</code> to get the login name of the current real user id.</p>
</blockquote>
<h2>Old Answer: Problems with <code>os.getlogin()</code></h2>
<h3>TL;DR</h3>
<p><code>os.getlogin()</code> can throw errors when run in certain situations.  Using the <code>LOGNAME</code>, <code>USER</code>, <code>USERNAME</code>, etc. environment variables (after checking that they exist) is the safer option.  If you're really worried about people changing the environment variables, then you can pull the username from the current process ID using <code>pwd.getpwuid(os.getuid())[0]</code>.</p>
<h3>Longer explaination</h3>
<p>One issue with <code>os.getlogin()</code> is that you can`t run it without a controlling terminal.  <a href="https://docs.python.org/3/library/os.html#os.getlogin" rel="nofollow noreferrer">From the docs</a>:</p>
<blockquote>
<p>os.getlogin()</p>
<p>Return the name of the user logged in on the controlling terminal of the process. For most purposes, it is more useful to use the environment variables LOGNAME or USERNAME to find out who the user is, or pwd.getpwuid(os.getuid())[0] to get the login name of the current real user id.</p>
</blockquote>
<p>If you try to call <code>os.getlogin()</code> without a controlling terminal, you will get</p>
<pre><code>OSError: [Errno 25] Inappropriate ioctl for device
</code></pre>
<p>So using the <code>LOGNAME</code>, <code>USER</code>, <code>USERNAME</code>, etc. environment variables is safer than <code>os.getlogin()</code>.  If you're really worried about people changing the environment variables, then you can use <code>pwd.getpwuid(os.getuid())[0]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.environ['USER']</code> can lie, with no security controls at all, <code>os.getlogin</code> doesn't have that problem.</p>
<p>If you're using the ID check for security purposes of any kind, don't rely on the environment.</p>
<p>Example, running as user <code>lowpriv</code>, checking the environment would tell you you're root when run like so in <code>bash</code>:</p>
<pre><code>USER=root myscript.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess in UNIX based systems it really just comes down to personal preference. I'd use <code>os.getlogin()</code> if I plan to write the code for other platforms such as windows. Moreover, enviroment variables and easier be manipulated. so it's more secure to use it in cases where security is a priority.</p>
</div>
<span class="comment-copy">Thank you for the detailed answer!!</span>
<span class="comment-copy">Should it be <code>USER=root python myscript.py</code>?</span>
<span class="comment-copy">@Akavall: If the script has the execute bit set and has a shebang line (e.g. <code>#!/usr/bin/env python</code>), you don't need to explicitly run <code>python</code>, the script shebang would handle it for you (you might need to provide a relative path if the directory containing <code>myscript.py</code> isn't in your <code>PATH</code>). I usually assume "main" Python scripts are set up with shebangs and the execute bit just for brevity, but sure, <code>USER=root python myscript.py</code> also works.</span>
<span class="comment-copy">@ShadowRanger: Your answer is valid, but you should still recommend using <code>getpass.getuser()</code> or <code>pwd.getpwuid(os.getuid())[0]</code>. Regarding your answer to Akavall, it is true on UNIX/Linux, not on Windows.</span>
<span class="comment-copy">A normal user can always use <code>LD_PRELOAD</code> to trick an application into seeing things differently, so the point about security is a bit moot. In the end, it's what the user can do that mater, not the way it is done.</span>
