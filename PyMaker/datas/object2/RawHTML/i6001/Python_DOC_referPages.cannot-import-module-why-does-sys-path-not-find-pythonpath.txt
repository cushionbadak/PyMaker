<div class="post-text" itemprop="text">
<p>I am running Python 3.6.1 on a Windows 7 machine. I have some scripts in <code>H:\Myname\Python\myscripts</code>.</p>
<p>I have created the user variable PYTHONPATH and set it to the folder above. I do not have admin rights so I can create a user variable only.</p>
<p>In that folder, I have a myscripts.py file with some functions.</p>
<p>If I try to access it running <code>import myscripts</code> from a file stored elsewhere, it doesn't work: I get a <code>ModuleNotFoundError</code></p>
<p>If I print sys.path, the folder I have set in PYTHONPATH is not there.</p>
<p>Why? What am I doing wrong? Isn't sys.path supposed to show PYTHONPATH?
Does the fact that H is a network drive have anything to do with it?</p>
<p>I can't seem to find anything on the web for this problem in relation to Windows (but lots for Unix systems). </p>
</div>
<div class="post-text" itemprop="text">
<p>A common way to fix this quickly is to use<br/>
<code>sys.path.append("path/to/module")</code><br/>
Be careful with <code>'\\'</code> if you are using Windows.</p>
<p>Not exactly answering your question but this could fix the problem. </p>
</div>
<div class="post-text" itemprop="text">
<p>It is likely that there is a <code>._pth</code> file overriding the default behavior of <code>sys.path</code>. Remove or rename the <code>python._pth</code> (or <code>python36._pth</code>) file.</p>
<p>There was a <code>python37._pth</code> file included in my download of the <a href="https://www.python.org/downloads/windows/" rel="nofollow noreferrer">Windows embedded zip file</a> that caused <code>sys.path</code> to not include <code>PYTHONPATH</code>.</p>
<blockquote>
<p>To completely override sys.path, create a ._pth file with the same
  name as the DLL (python37._pth) or the executable (python._pth) and
  specify one line for each path to add to sys.path. The file based on
  the DLL name overrides the one based on the executable, which allows
  paths to be restricted for any program loading the runtime if desired.</p>
<p>When the file exists, all registry and environment variables are
  ignored, isolated mode is enabled, and site is not imported unless one
  line in the file specifies import site.</p>
</blockquote>
<p><a href="https://docs.python.org/3/using/windows.html#finding-modules" rel="nofollow noreferrer">Using Python on Windows - Finding Modules</a></p>
</div>
<span class="comment-copy">It works if I run sys.path.append('H:\Myname\Python\myscripts') - but I still do not understand why sys.path does not recognise PYTHONPATH</span>
<span class="comment-copy">Check whether you misspelled <i>PYTHONPATH</i>, or have <b>-E</b> as an argument to <i>python</i>. Also I  don't know how you're launching <i>python</i>, but if you do it from a <i>cmd</i>, make sure to start a new instance <b>after</b> setting the var.</span>
<span class="comment-copy">If you've set the <code>PYTHONPATH</code> value using the GUI environment variable editor or setx.exe, without also setting it in the current CMD shell via built-in <code>set</code>, then you'll need to start a new instance of CMD from Explorer. Generally only Explorer updates its environment in response to a <code>WM_SETTINGCHANGE</code> "Environment" message. CMD doesn't even have a window to get this message (the console window doesn't belong to CMD or any other console application; it's attached to it).</span>
