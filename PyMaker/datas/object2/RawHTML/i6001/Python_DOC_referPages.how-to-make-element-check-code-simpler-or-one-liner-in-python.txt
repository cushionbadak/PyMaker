<div class="post-text" itemprop="text">
<p>I wanna make simple condition to check whether element 'a' in A and element 'b' in B has a some characteristic. </p>
<p>the below code operates well, it looks dirty, so, I wanna make it simpler, or one-liner. are there any way to do that?</p>
<pre><code>    def check_direction(A, B):
        for a in A:
            for b in B:
                if c_matrix.loc()[a][b]!="-&gt;":
                    return False
        return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ignoring the possible pandas or numpy angles that <code>c_matrix.loc()</code> suggests might be available, you can use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> to get the exact same functionality:</p>
<pre><code>return all(c_matrix.loc()[a][b] == "-&gt;" for a in A for b in B)
</code></pre>
<p><code>all()</code> short-circuits; as soon as a <code>c_matrix.loc()[a][b] == "-&gt;"</code> fails, <code>False</code> is returned. <code>True</code> is only produced if <em>all</em> tests pass.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here I follow a different approach from <a href="https://stackoverflow.com/users/100297/martijn-pieters">Martijn</a>'s one, he postulated that Numpy/Pandas are not relevant for the answer, I proceed with the understanding that everything is a Numpy array...</p>
<p>First, for demonstrational purposes, we create a matrix of strings, among them the one we don't want in your sample</p>
<pre><code>In [37]: toks = ['--', '-+', '+-', '-|', '|-', '-&gt;', '&lt;-']
In [38]: matrix = np.array([[toks[np.random.randint(7)] for j in range(5)] for i in range(4)])
In [39]: matrix
Out[39]: 
array([['|-', '--', '&lt;-', '-|', '-|'],
       ['|-', '&lt;-', '--', '+-', '--'],
       ['|-', '-+', '-+', '&lt;-', '-+'],
       ['&lt;-', '-&gt;', '-&gt;', '-|', '--']],
      dtype='&lt;U2')
</code></pre>
<p>next, two vector of indices</p>
<pre><code>In [40]: A, B = np.array([2,3]), np.array([0,1,4])
</code></pre>
<p>and the correct broadcasting rule to apply them to indexing <code>matrix</code></p>
<pre><code>In [41]: matrix[A[:,None],B]
Out[41]: 
array([['|-', '-+', '-+'],
       ['&lt;-', '-&gt;', '--']],
      dtype='&lt;U2')
</code></pre>
<p>and eventually, similar to what was suggested in comments and proposed in other answers</p>
<pre><code>In [42]: np.all(matrix[A[:,None],B] == '-&gt;')
Out[42]: False
</code></pre>
<p>I would like to stress the <code>matrix[A[:,None],B]</code> line, that could be commented like this "Look ma', no loops" ;-)</p>
<hr/>
<p>In terms of a function definition (more general than yours)</p>
<pre><code>def(m, a, b, tok):
    return np.all(m[np.array(a)[:,None], np.array(b)] == tok)
</code></pre>
<p>note that the function is resilient w/r receiving in <code>a</code> and <code>b</code> sequences that are not Numpy arrays.</p>
</div>
<span class="comment-copy">You might want to check out the <code>any</code> or <code>all</code> functions together with generator expressions. Something like <code>all(c_matrix.loc()[a][b] == '-&gt;' for a in A for b in B)</code> could work.</span>
<span class="comment-copy">Since <code>c_matrix.loc()</code> is just a label-based indexer, have you tried <i>just testing if <code>-&gt;</code> is present in your frame</i>?</span>
<span class="comment-copy">Try something like <code>all(c_matrix.loc()[a][b]=="-&gt;" for a in A for b in B)</code></span>
<span class="comment-copy">Otherwise, use <code>return all(c_matrix.loc()[a][b] == "-&gt;" for a in A for b in B)</code>, which produces <code>True</code> <i>only</i> if all tests pass, and <code>False</code> for the first case where the value is not equal to <code>-&gt;</code>.</span>
<span class="comment-copy">Ok, now that 3 different people have suggested the same thing, this seems to be the solution :)</span>
<span class="comment-copy">He didn't say they weren't relevant.  He said ignoring the "possible angles".  That means he is acknowledging there are other relevant answers though he's not going to go into them.</span>
