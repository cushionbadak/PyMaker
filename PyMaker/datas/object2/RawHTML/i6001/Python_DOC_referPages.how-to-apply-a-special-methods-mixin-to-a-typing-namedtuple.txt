<div class="post-text" itemprop="text">
<p>I love the <code>typing.NamedTuple</code> in Python 3.6. But there's often the case where the <code>namedtuple</code> contains a non-hashable attribute and I want to use it as a <code>dict</code> key or <code>set</code> member. If it makes sense that a <code>namedtuple</code> class uses object identity (<code>id()</code> for <code>__eq__</code> and <code>__hash__</code>) then adding those methods to the class works fine.</p>
<p>However, I now have this pattern in my code in several places and I want to get rid of the boilerplate <code>__eq__</code> and <code>__hash__</code> method definitions. I know <code>namedtuple</code>'s are not regular classes and I haven't been able to figure out how to get this working.</p>
<p>Here's what I've tried:</p>
<pre><code>from typing import NamedTuple

class ObjectIdentityMixin:
    def __eq__(self, other):
        return self is other

    def __hash__(self):
        return id(self)

class TestMixinFirst(ObjectIdentityMixin, NamedTuple):
    a: int

print(TestMixinFirst(1) == TestMixinFirst(1))  # Prints True, so not using my __eq__

class TestMixinSecond(NamedTuple, ObjectIdentityMixin):
    b: int

print(TestMixinSecond(2) == TestMixinSecond(2))  # Prints True as well

class ObjectIdentityNamedTuple(NamedTuple):
    def __eq__(self, other):
        return self is other

    def __hash__(self):
        return id(self)

class TestSuperclass(ObjectIdentityNamedTuple):
    c: int

TestSuperclass(3)    
"""
Traceback (most recent call last):
  File "test.py", line 30, in &lt;module&gt;
    TestSuperclass(3)
TypeError: __new__() takes 1 positional argument but 2 were given
"""
</code></pre>
<p>Is there a way I don't have to repeat these methods in each <code>NamedTuple</code> that I need 'object identity' in?</p>
</div>
<div class="post-text" itemprop="text">
<p>The magic source of <code>NamedTuple</code> class syntax is its <a href="https://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow noreferrer">metaclass</a> <code>NamedTupleMeta</code>, <a href="https://github.com/python/cpython/blob/v3.6.3/Lib/typing.py#L2131" rel="nofollow noreferrer">behind the scene</a>, <code>NamedTupleMeta.__new__</code> created a new class for you, instead of a typical one, but a class created by <code>collections.namedtuple()</code>.</p>
<p>The problem is, when <code>NamedTupleMeta</code> creating new class object, it ignored bases classes, you could check MRO of <code>TestMixinFirst</code>, there is no <code>ObjectIdentityMixin</code>:</p>
<pre><code>&gt;&gt;&gt; print(TestMixinFirst.mro())
[&lt;class '__main__.TestMixinFirst'&gt;, &lt;class 'tuple'&gt;, &lt;class 'object'&gt;]
</code></pre>
<p>you could extend it to take care of base classes:</p>
<pre><code>import typing


class NamedTupleMetaEx(typing.NamedTupleMeta):

    def __new__(cls, typename, bases, ns):
        cls_obj = super().__new__(cls, typename+'_nm_base', bases, ns)
        bases = bases + (cls_obj,)
        return type(typename, bases, {})


class TestMixin(ObjectIdentityMixin, metaclass=NamedTupleMetaEx):
    a: int
    b: int = 10


t1 = TestMixin(1, 2)
t2 = TestMixin(1, 2)
t3 = TestMixin(1)

assert hash(t1) != hash(t2)
assert not (t1 == t2)
assert t3.b == 10
</code></pre>
</div>
<span class="comment-copy">How is the__init__() method of your class ObjectIdentityNamedTupl?</span>
<span class="comment-copy">@DamianLattenero I've edited my question to show a full code example. There is no <code>__init__</code>. I've tried adding <code>__new__</code> but <code>NamedTuple</code>s don't allow that.</span>
<span class="comment-copy">It looks like PEP 557 coming in Python 3.7 might solve all of this.</span>
<span class="comment-copy">Great work. I was about to mark this answer correct but then came across a really subtle and damn confusing bug in it. If one of the fields has a default value then the value TestMixin is initialized with is used everywhere except when accessing the field by name. In your example, if you change the declaration of <code>b</code> to: <code>b: int = 0</code> then: <code>str(t1)</code> returns <code>TestMixin(a=1, b=2)</code>: correct; <code>t1[1]</code> returns 2: correct; <code>t.b</code> returns <code>0</code>: fail.</span>
<span class="comment-copy">@DamonMaria interesting, will look into it later.</span>
<span class="comment-copy">@DamonMaria check updated code, <code>ns</code> has already attached to the base class created by <code>namedtuple()</code>, should not be overridden.</span>
<span class="comment-copy">Thanks @georgexsh, just tried it and now all my tests are passing. Thank you.</span>
<span class="comment-copy">@DamonMaria very glad that I helped, in fact, I have spent many hours on this.</span>
