<div class="post-text" itemprop="text">
<p>I have a string that goes <code>"Quisque pretium magna ac aliquet interdum. Mauris posuere, risus non mollis placerat, diam ligula commodo justo, ac aliquet velit ante a ipsum."</code> stored in a variable <code>T</code> and I have a variable <code>L</code> which is set to <code>30</code>.</p>
<p>I am trying to write a loop that will print the string out, but in such a way that only <code>L</code> amount of characters (30 in this case) can fit on the line. If there is a word which goes over the limit (As in, it starts on character 28 and ends on 32), then I am trying to store the index at which point the <em>last space</em> was (The index of the most recent <code>" "</code>) in a variable called <code>s</code>. This is what I have, but I'm not sure where to go from here:</p>
<pre><code>finalstr = ""
reg = re.compile('[a-z]')
for i in range(0, L):
    if T[i] &gt;= L and reg.search(T[i]):
        finalstr += "\n"
    else:
        finalstr += T[i]

return finalstr
</code></pre>
<p>What I want to get is:</p>
<pre><code>Quisque pretium magna ac
aliquet interdum. Mauris
prosuere, risus non
mollis placerat, diam
ligula commodo justo, ac
aliquet velit ante a 
ipsum.
</code></pre>
<p>However, this is the traceback I get, what am I doing wrong?</p>
<pre><code>Traceback (most recent call last):
File "problem.py", line 146, in &lt;module&gt;
print wrap(T, L)
File "problem.py", line 122, in wrap
if T[i] &gt;= L and reg.search(T[i]):
IndexError: list index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since knowing where to break your line depends on how long a word is, you won't be able to do this by treating <code>T</code> as just a sequence of characters unless you want to backtrack (what if you're halfway through a word and you run out of space?).</p>
<p>I would instead split up <code>T</code> into a list of words and then just run through them:</p>
<pre><code>lines = []
line = ''

for word in T.split(' '):
    if len(word) + len(line) &lt;= L:
        # we can add the word onto the end of the current line
    else:
        # the word flows past the end of the current line, start a new one
</code></pre>
<p>Note that your expected output doesn't wrap on column 30, it looks to wrap on column 25. Otherwise, line 3 would be 26 characters long and contain:</p>
<pre><code>prosuere, risus non mollis
</code></pre>
<p>An alternative solution would be to find the breaking point by using the limit arguments to <code>str.rfind</code> and just iteratively breaking down <code>text</code> using that:</p>
<pre><code>while T:
    # If T is already short, we don't have to worry about breaking it up
    if len(T) &lt;= L:
        line = T
        T = ''
    else:
        # Find the rightmost space in the T that occurs before column L
        furthest_space = T.rindex(' ', 0, L)

        # Now you can figure out the next line from the position of the
        # furthest space and cut that part off of your T
        ...

    print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that the best approach is to split the sentence into a list and use it to count characters. I do not know if I understood correctly the <code>s</code> variable. I stored the white spaces after each last word of each line.</p>
<pre><code>T = "Quisque pretium magna ac aliquet interdum. Mauris posuere, risus non mollis placerat, diam ligula commodo justo, ac aliquet velit ante a ipsum."
L = 30

listofwords = T.split()

totalchars = 0
sentence = []
s=[]
for word in listofwords:
    if totalchars+len(word)+1 &lt; L:
        totalchars+=len(word)+1
        sentence.append(word)
    elif totalchars+len(word)+1 ==L:
        totalchars+=len(word)+1
        sentence.append(word)
        print(' '.join(sentence))
        sentence = [word]
        totalchars = len(word)
    elif totalchars+len(word)+1 &gt; L:
        s.append(totalchars+1)
        print(' '.join(sentence))
        sentence = [word]
        totalchars = len(word)
print(' '.join(sentence))
print(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My example will probably need to be hardened in case of exceptions or weird input values, but I think you can accomplish this with something like the following steps:</p>
<ol>
<li>Cut the string off at 30 characters</li>
<li>If needed, split the string on the last whitespace.</li>
</ol>
<p>Maybe something like this:</p>
<pre><code>input = "Quisque pretium magna ac aliquet interdum. Mauris posuere, risus non mollis placerat, diam ligula commodo justo, ac aliquet velit ante a ipsum."
final_string = ''
cut_length = 30
while input:
    temp = input[:cut_length]
    if input[cut_length] != ' ':
        temp = temp.split(" ", 1)[0]
    final_str += temp + "\n"
    input = input.replace(temp, '', 1)
print(final_str)
</code></pre>
</div>
<span class="comment-copy"><code>T[i] &gt;= L</code> doesn't make sense. If <code>T</code> is a string and you're using Python 2, it will always evaluate to <code>True</code>. Otherwise, you would get an error. What is the exact value of <code>T</code>?</span>
<span class="comment-copy">@Blender, <code>T</code> is a string that contains <code>"Quisque pretium magna ac aliquet interdum. Mauris posuere, risus non mollis placerat, diam ligula commodo justo, ac aliquet velit ante a ipsum."</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Catch the error</a> and in the except suite inspect/print <code>i</code> and <code>T</code>.  It should help you figure out what is wrong.</span>
<span class="comment-copy">Is that last line meant to be part of the code-block?</span>
<span class="comment-copy">Yes, sorry, had to fix some formatting</span>
<span class="comment-copy">With the formatting fixed from my previous edit, mind explaining the reason for the downvote?</span>
<span class="comment-copy">I didn't downvote at all! In fact I'm still a little confused, what are you doing with <code>l</code>? You've just said "Do something"</span>
<span class="comment-copy">Ah, my apologies. Not sure where the downvote came from and was hoping for an explanation. Anyway, L was based on me thinking you needed the final length of each segment (which may be 30, but may be less). Rereading your question, it's clearer that you just wanted to be able to configure the length at which the "cut" happens. I've changed the variable name accordingly.</span>
