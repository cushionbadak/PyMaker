<div class="post-text" itemprop="text">
<p>Well, let me introduce the problem first.</p>
<p>I've got some data via POST/GET requests. The data were UTF-8 encoded string. Little did I know that, and converted it just by <code>str()</code> method. And now I have full database of "nonsense data" and couldn't find a way back.</p>
<h1>Example code:</h1>
<p><strong>unicode_str</strong> - this is the string I should obtain</p>
<p><strong>encoded_str</strong> - this is the string I got with POST/GET requests - <strong>initial data</strong></p>
<p><strong>bad_str</strong> - the data I have in the Database at the moment and I need to get unicode from.</p>
<p>So apparently I know how to convert:
<strong>unicode_str</strong> =(<code>encode</code>)=&gt; <strong>encoded_str</strong> =(<code>str</code>)=&gt; <strong>bad_str</strong></p>
<p>But I couldn't come up with solution back:
<strong>bad_str</strong> =(<code>???</code>)=&gt; <strong>encoded_str</strong> =(<code>decode</code>)=&gt; <strong>unicode_str</strong></p>
<pre><code>In [1]: unicode_str = 'Příliš žluťoučký kůň úpěl ďábelské ódy'

In [2]: unicode_str
Out[2]: 'Příliš žluťoučký kůň úpěl ďábelské ódy'

In [3]: encoded_str = unicode_str.encode("UTF-8")

In [4]: encoded_str
Out[4]: b'P\xc5\x99\xc3\xadli\xc5\xa1 \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88 \xc3\xbap\xc4\x9bl \xc4\x8f\xc3\xa1belsk\xc3\xa9 \xc3\xb3dy'

In [5]: bad_str = str(encoded_str)

In [6]: bad_str
Out[6]: "b'P\\xc5\\x99\\xc3\\xadli\\xc5\\xa1 \\xc5\\xbelu\\xc5\\xa5ou\\xc4\\x8dk\\xc3\\xbd k\\xc5\\xaf\\xc5\\x88 \\xc3\\xbap\\xc4\\x9bl \\xc4\\x8f\\xc3\\xa1belsk\\xc3\\xa9 \\xc3\\xb3dy'"

In [7]: new_encoded_str = some_magical_function_here(bad_str) ???
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You turned a bytes object to a string, which is just a representation of the bytes object. You can obtain the original bytes object by using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a> (credits to Mark Tolonen for the suggestion), then a simple <code>decode()</code> will do the job.</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(bad_str).decode('utf-8')
'Příliš žluťoučký kůň úpěl ďábelské ódy'
</code></pre>
<p>Since you were the one who generated the strings, using <code>eval()</code> would be safe, but why not be safer?</p>
</div>
<div class="post-text" itemprop="text">
<p>Please do not use eval, instead:</p>
<pre><code>import codecs
s = 'žluťoučký'
x = str(s.encode('utf-8'))

# strip quotes
x = x[2:-1]

# unescape
x = codecs.escape_decode(x)[0].decode('utf-8')

# profit
x == s
</code></pre>
</div>
<span class="comment-copy">well, I had <code>eval</code> also in mind, but since I don't know what data is there and there is a lot of data, I was hoping I could evade this - thus not mentioning it. But thanks :)</span>
<span class="comment-copy">@darkless It doesn't matter what the strings you saved look like. As long as you followed the procedure of get utf-8 string -&gt; encode it to a bytes object -&gt; turn <b>this</b> to a string and store to your database, you guarantee those strings to be harmless bytes objects.</span>
<span class="comment-copy">True, I didn't realized that every stored string is "b'...' " which eval should interpret as b'...' :) Thanks for the remark!</span>
<span class="comment-copy"><code>ast.literal_eval</code> does the same thing without the security risk of <code>eval</code>.</span>
<span class="comment-copy">@darkless I just want to draw your attention to the fact that there is a safer version of <code>eval()</code> which also fits your requirements.</span>
<span class="comment-copy">Thanks for non-eval version, I was missing <code>escape_decode</code> to turn double-slashes to single-slashes. I can't find docs to the method though: <a href="https://docs.python.org/3.5/library/codecs.html" rel="nofollow noreferrer">docs.python.org/3.5/library/codecs.html</a></span>
