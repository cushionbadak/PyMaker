<div class="post-text" itemprop="text">
<p>I want to create a GUI module that I can import in my main program without having to import tkinter there, letting just the module handle everything. Here's how I imagine that it might work:
</p>
<blockquote>
<p>main.py</p>
</blockquote>
<pre class="lang-py prettyprint-override"><code>import gui as g

def update():
    #Update the GUI with new Data from this main program

GUI = g.gui()
gui.after(1000, update)
gui.mainloop()
</code></pre>
<blockquote>
<p>gui.py</p>
</blockquote>
<pre class="lang-py prettyprint-override"><code>import tkinter as tk

class viewer(tk.Frame):
    #Some variables
    def __init__(self, parent):
        tk.Frame.__init(self, parent)
        self.parent = parent
        self.initialize(400, 100)
    def initialize(self, width, height):
        #Initialize some widgets, place them on grid, etc
    def start(self):
        #Do some other stuff, make a main window, configurations, etc
        print('Started!')
</code></pre>
<p>Edit: "Don't ask for opinion"
How do I make this work?</p>
<pre class="lang-py prettyprint-override"><code>import tkinter as tk
import gui as g

root = tk.Tk()
GUI = g.gui(root)
GUI.after(1000, update)
GUI.mainloop()
</code></pre>
<p>The above is what I don't want.</p>
</div>
<div class="post-text" itemprop="text">
<p>I used a workaround that seemed plausible to me:</p>
<blockquote>
<p>main.py</p>
</blockquote>
<pre><code>import gui
GUI = gui.start()
GUI.after(1000, update)
GUI.mainloop()
</code></pre>
<blockquote>
<p>gui.py</p>
</blockquote>
<pre><code>import tkinter as tk
def start():
   root = tk.Tk()
   run = viewer(root) # &lt;- The class provided above
   return run
</code></pre>
</div>
<span class="comment-copy">You're asking for opinions, which are off topic here.</span>
<span class="comment-copy">BTW: modules <a href="https://docs.python.org/3/library/turtle.html" rel="nofollow noreferrer">turtle</a>, <a href="http://mcsp.wartburg.edu/zelle/python/" rel="nofollow noreferrer">graphics.py</a> and <a href="http://easygui.sourceforge.net" rel="nofollow noreferrer">EasyGui</a> use <code>tkinter</code> and you don't have to import <code>tkinter</code> - so you can see how it works.</span>
<span class="comment-copy">The above examples were fine, though too complicated for my level of understanding. I fixed it though via simple method inside the gui module which starts the gui and returns said object</span>
<span class="comment-copy">you solution is short but for me it looks strange. To hide it I would put <code>root = Tk()</code> directly in <code>viewer.__init__</code>. The same with <code>root.mainloop()</code> and <code>root.update()</code> and then I could run it as <code>gui.viewer(update)</code>. Or maybe I would create <code>class Viewer(tk.Tk)</code></span>
<span class="comment-copy">It's that way because my code is longer than what I provided. For example I declare in the Viewer class 'self.parent = parent' and said <i>parent</i> is provided as <i>root</i>. Then I have methods which hide the main window which require to address root and I found the best way to do this is by using 'self.parent'</span>
<span class="comment-copy">the most important that your solution suits you :) Good luck.</span>
<span class="comment-copy">Heh, thanks. I know it's not perfect, but when running on deadlines not everything has to be perfect as long as it works and not produces any bugs.</span>
