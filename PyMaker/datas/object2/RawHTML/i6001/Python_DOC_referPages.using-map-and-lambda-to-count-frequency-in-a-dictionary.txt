<div class="post-text" itemprop="text">
<p>So the task is rather simple. Read in a string and store each character and its frequency in a dictionary then return the dictionary. I did it rather easily with a for loop.</p>
<pre><code>def getInputFreq():
    txt = input('Enter a string value: ')
    d = dict()
    for c in txt:
           d[c] = d.get(c,0) + 1
    return d
</code></pre>
<p>The issue is that I need to rewrite this statement using a map and lambda. 
I've tried a few things, early attempts returned empty dictionaries ( code has been lost in the attempts ). </p>
<p>My latest attempt was ( in place of the for loop in above )</p>
<pre><code> d = map((lambda x: (d.get(x,0)+1)),txt)
</code></pre>
<p>which returns a map object address.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, in python 3, you have to force list iteration on <code>map</code></p>
<p>Then, your approach won't work, you'll get all ones or zeroes, because the expression doesn't accumulate the counts.</p>
<p>You could use <code>str.count</code> in a lambda, and map the tuples to a dictionary, that works:</p>
<pre><code>txt = "hello"

d = dict(map(lambda x : (x, txt.count(x)), set(txt)))
</code></pre>
<p>result:</p>
<pre><code>{'e': 1, 'l': 2, 'h': 1, 'o': 1}
</code></pre>
<p><strong>But once again, <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> is the preferred way to do that.</strong></p>
</div>
<span class="comment-copy">Why the <code>map</code> and <code>lambda</code> constraint, I assume it's for school?</span>
<span class="comment-copy">ok, try <code>d = list(map((lambda x: (d.get(x,0)+1)),txt))</code>. But that won't work</span>
<span class="comment-copy">Why not use <code>collections.Counter()</code>?</span>
<span class="comment-copy">Yea, this is part of a bigger project but the map and lambda constraint was thrown in there.</span>
<span class="comment-copy">â€“1 for arbitrary restrictions</span>
<span class="comment-copy">counting duplicate letters only once can also be achieved by casting to  <code>set</code> first. Like: <code>d = dict(map(lambda x : (x, txt.count(x)), set(txt)))</code></span>
<span class="comment-copy">Even if the input contains no duplicate letters, this is still inefficient. <code>.count</code> is O(N), and you're calling it N times, for a total of O(N^2). By comparison, <code>Counter</code> is O(N). But still, this is a fairly concise way to satisfy OP's strange requirements, so +1.</span>
<span class="comment-copy">how about <code>list(map(lambda x: x, [])) or dict(Counter('hello'))</code>, meeting the requirements to use map and lambda ;)</span>
<span class="comment-copy">@Chris_Rands That's hustling.. xD</span>
<span class="comment-copy">@Ev.Kounis thanks. of course!</span>
