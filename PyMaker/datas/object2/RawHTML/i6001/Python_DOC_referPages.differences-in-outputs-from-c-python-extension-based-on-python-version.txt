<div class="post-text" itemprop="text">
<p>I've recently come across the need for identifying which device (device name) is associated to which source input (device index) for OpenCV's <a href="https://docs.opencv.org/3.3.1/d8/dfe/classcv_1_1VideoCapture.html#a5d5f5dacb77bbebdcbfb341e3d4355c1" rel="nofollow noreferrer">VideoCapture()</a> for my project.</p>
<p>Since I'm using OpenCV's Python port (v3.3.0.10 according to PyCharm), there are various backend functionalities that, based on my research endeavors, are apparently not available to my manipulation from Python.</p>
<p>Being on Windows 10 Home 64-bit, and using Python 3.6.3, I came across this <a href="http://www.codepool.biz/multiple-camera-opencv-python-windows.html" rel="nofollow noreferrer">handy work</a> done by Xiao Ling which creates a dedicated Python2 extension for exactly my needs. After rustling with the <a href="https://github.com/yushulx/python-capture-device-list/blob/master/device.cpp" rel="nofollow noreferrer" title="original device.cpp">C++ file</a> using Python3's <a href="https://docs.python.org/3/howto/cporting.html#module-initialization-and-state" rel="nofollow noreferrer">documentation</a> to make it <a href="https://github.com/RyanChinSang/ECNG3020-ORSS4SCVI/blob/master/BETA/TestCode/OpenCV/device_list/device.cpp" rel="nofollow noreferrer" title="edited device.cpp">Python3 compatible</a>, it compiled successfully. I then ran a test and it worked to my expectation.</p>
<p>Out of sheer curiosity, and having Python 2.7.14 on-hand <em>(Note: OpenCV  v3.3.0.10 is also installed for my Python2 - according to PyCharm)</em>, I went ahead and compiled the same C++ extension for Python2, using the same <a href="https://github.com/RyanChinSang/ECNG3020-ORSS4SCVI/blob/master/BETA/TestCode/OpenCV/device_list/setup.py" rel="nofollow noreferrer">setup.py</a>. It compiled successfully, then, I ran the same <a href="https://github.com/RyanChinSang/ECNG3020-ORSS4SCVI/blob/master/BETA/TestCode/OpenCV/device_list/test.py" rel="nofollow noreferrer">test.py</a> ...but got different results.</p>
<p>The results for when I run test.py for Python 3 is (correctly) as follows:</p>
<p><em>Note: I stopped the code during runtime while it waited for user input.</em></p>
<pre><code>OpenCV version: 3.3.0
0: DroidCam Source 3
1: Integrated Webcam
Select a camera (0 to 1):
Process finished with exit code 1
</code></pre>
<p>And, the  results for Python2... also "correct":</p>
<pre><code>OpenCV version: 3.3.0
0: DroidCam Source 3
1: Integrated Webcam
2: DroidCam Source 1
3: DroidCam Source 2
4: DroidCam Source Mini (240p)
Select a camera (0 to 4): 
Process finished with exit code 1
</code></pre>
<p>My camera setup on my laptop is as follows:</p>
<ol>
<li>My laptop's integrated camera</li>
<li>My cellphone (Huawei P9) using <a href="https://play.google.com/store/apps/details?id=com.dev47apps.droidcamx&amp;hl=en" rel="nofollow noreferrer">DroidCamX (v6.4.8)</a>.</li>
</ol>
<p><em>Note: DroidCamX has a desktop application that works in conjunction with the Android DroidCamX app.</em></p>
<p><em>Note2: I am using DroidCamX over a (physical/wired) USB connection.</em></p>
<p>I am infact, only using 2 physical cameras - (expected) device indexes <code>0</code> and <code>1</code> - which makes the output of the Python3 completely correct and therefore works as intended. However, using Python2, when I access device indexes <code>2-4</code>, all return a "correct" video feed from my phone - including index <code>4</code> which specifies a 240p video feed.</p>
<p>Hence, my question; Why is the output from Python2 and Python3 different? Why is Python2 showing 3 other available video feeds (which all seem to be "correct")?</p>
<p><em>Note: "correct" is in reference to using the correct physical device, in the correct mode, despite being incorrect with respect to the number of physical cameras.</em></p>
<p><em>Note2: All code is linked to this question using hyperlinks in an attempt to minimize the length of this question.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>DroidCam Source 1, 2, and Mini (240p) are DirectShow video source filters. I assume python 3 either does not support DirectShow, or its use is somehow disabled by default.
Source 3 and the integrated webcam use full blown kernel drivers.</p>
</div>
