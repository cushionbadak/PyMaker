<div class="post-text" itemprop="text">
<p>I'm not sure exactly how to describe this problem, so apologies if the title was insufficient.</p>
<p>I'm trying to make a piece of code that will put all possible tick-tack-toe boards (0 is blank, 1 is X, 2 is O) into a 2d array (list of lists). I've successfully found a way to do this:</p>
<pre><code>import math

boxes = []

for m in range (0, 19683):
    boxes.append([m%3, int(math.floor((m%9)/3))])

print(boxes)
</code></pre>
<p>And it works. But instead of typing out the next seven list items, I thought it would be easier to iterate over them like so:</p>
<pre><code>boxes = []

for m in range (0, 19683):
    boxes.append([])

    for s in range (0,9):
        boxes[m].append(int(math.floor((m%(3**(m+1)))/(3**m))))

print(boxes)
</code></pre>
<p>and it just gave me a big array of zeros! I have no idea why changing it to iteration would do this; I tried with both ** and pow(). DOes anyone know what the problem is?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at your code, I think in your second example you could have meant:</p>
<pre><code>boxes[m].append(int(math.floor((m%(3**(s+1)))/(3**s))))
</code></pre>
<p>Also, you can utilise <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> to achieve the same kind of outcome:</p>
<pre><code>boxes = list(product([0, 1, 2], repeat=9))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's look at that inner expression:</p>
<pre><code>math.floor(m%(3**(m+1)))/(3**m)
</code></pre>
<p>The numerator is simply <code>m</code>: you take it modulus <code>3^(m+1)</code>, which will be larger than <code>m</code>.  The next step is then <code>m / (3**m)</code> -- taken as an integer, this is 0.</p>
<p>In short, your algebra is off.</p>
<p>I recommend that you use <code>itertools.product</code> to get the output you want.</p>
</div>
