<div class="post-text" itemprop="text">
<p>Using python socket I am receiving value as a string and want to store the value in SQLite DB as dictionary key to column and values as a row.</p>
<p>So for that purpose, I am not able to convert the string to dictionary -</p>
<pre><code>ReceivedValue = [{'Value1': 'OutPut00', 'Value2': 'OutPut01', 'Value3': '2253.23'},{'Value1': 'NA', 'Value3': 'NA'}]
</code></pre>
<p>ReceivedValue always returns <code>str type</code> instead <code>list</code> and stopping me to process further to add in SQLite DB.</p>
<p>How can I convert this received value to a Dictionary or list of dictionaries?</p>
<p><strong>Json Approach EDIT:1</strong> - Attached the required screenshot for Json Error
<a href="https://i.stack.imgur.com/kXGPq.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/kXGPq.jpg"/></a> </p>
<p><strong>eval Approach EDIT:2</strong> - </p>
<pre><code>def process(ReceivedValue):
     print ReceivedValue
     finVal = ast.literal_eval(ReceivedValue)
     print finVal
     print type(finVal)
</code></pre>
<p>OutPut -</p>
<pre><code>"[{'APACHE_MODJK': '1.2.41', 'PROCESSOR_MODEL': ' Intel(R) Xeon(R) CPU E5-2680 0 @ 2.70GHz', 'APACHE_HOME': '/opt/www/apache/2.4.17', 'OS_KERNEL': '2.6.32-573.26.1.el6.x86_64', 'APACHE_SSO': 'YES', 'TOMCAT_VER': 'NA', 'ENV': 'PROD', 'APACHE': 'RUNNING', 'JBOSS_HOME': '/opt/www/jboss/4.3/jboss-as', 'APACHE_VIP': 'NA', 'CPU': 2, 'OS_VER': 'Red Hat Enterprise Linux Server release 6.7 (Santiago)', 'TOMCAT_DB': 'NA', 'SAN': 'NA', 'JBOSS_DB': 'p377', 'MEMORY': 4, 'JBOSS_VER': '4.3.0.GA_CP02', 'JDK_VER': '1.6.0_18', 'APACHE_VER': '2.4.17', 'MACHINE_TYPE': 'VMware Virtual Platform'}]"
[{'APACHE_MODJK': '1.2.41', 'PROCESSOR_MODEL': ' Intel(R) Xeon(R) CPU E5-2680 0 @ 2.70GHz', 'APACHE_HOME': '/opt/www/apache/2.4.17', 'OS_KERNEL': '2.6.32-573.26.1.el6.x86_64', 'APACHE_SSO': 'YES', 'TOMCAT_VER': 'NA', 'ENV': 'PROD', 'APACHE': 'RUNNING', 'JBOSS_HOME': '/opt/www/jboss/4.3/jboss-as', 'APACHE_VIP': 'NA', 'CPU': 2, 'OS_VER': 'Red Hat Enterprise Linux Server release 6.7 (Santiago)', 'TOMCAT_DB': 'NA', 'SAN': 'NA', 'MEMORY': 4, 'JBOSS_VER': '4.3.0.GA_CP02', 'JDK_VER': '1.6.0_18', 'APACHE_VER': '2.4.17', 'MACHINE_TYPE': 'VMware Virtual Platform'}]
&lt;type 'str'&gt;
</code></pre>
<p><strong>WORKING SOLUTION</strong>: Just Removed the double quotes from the RecievedValue to evaluate it across <code>eval()</code> or <code>ast.literal_eval()</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming ReceivedValue is a string like below (your example did not have the quotes around it making it a list of dictionaries) you can use eval(ReceivedValue) to convert it.  </p>
<p>[Standard Disclaimer applies] Note that there are security implications to using eval - do you trust the source of the string you are about to evaluate?  Evaluating malicious string could cause it to execute code on your system. <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html</a></p>
<pre><code>&gt;&gt;&gt; ReceivedValue = "[{'Value1': 'OutPut00', 'Value2': 'OutPut01', 'Value3': '2253.23'},{'Value1': 'NA', 'Value3': 'NA'}]"
&gt;&gt;&gt; 
&gt;&gt;&gt; my_list = eval(ReceivedValue)
&gt;&gt;&gt;
&gt;&gt;&gt; my_list
[{'Value1': 'OutPut00', 'Value2': 'OutPut01', 'Value3': '2253.23'}, {'Value1': 'NA', 'Value3': 'NA'}]
&gt;&gt;&gt;
&gt;&gt;&gt; my_list[0]
{'Value1': 'OutPut00', 'Value2': 'OutPut01', 'Value3': '2253.23'}
&gt;&gt;&gt;
&gt;&gt;&gt; my_list[1]
{'Value1': 'NA', 'Value3': 'NA'}
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use json module to convert it to dict, that would be easiest I guess.</p>
<pre><code>import json
your_dict = json.loads([{'Value1': 'OutPut00', 'Value2': 'OutPut01', 'Value3': '2253.23'},{'Value1': 'NA', 'Value3': 'NA'}])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When working with sockets you have to serialize and deserialize information if you want to send anything besides bytes or strings across a socket. This can be accomplished in multiple ways. One such popular way is using the <code>Pickle</code> library <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">https://docs.python.org/3/library/pickle.html</a> which allows you to serialize and deserialize information such as dictionaries and objects. This can be accomplished with the <code>dump</code> and <code>load</code> functions. Just call <code>serialized_dict = pickle.dump(dict)</code> before sending the information in the socket and <code>deserialized_dict = pickle.load(buffer_bytes)</code> to deserialize it on the other end.</p>
<p>However it is known that the pickle function is not secure against erroneous or maliciously constructed data. And it is not advised to use pickling for data that you do not construct yourself such as user input. Another way to handle serializing is to pack and unpack buffers on your own using the struct object in python <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html</a>. This is a slightly more complex approach. Here is a synopsis I can elaborate on if need be. You would need to pack each key and value pair into a buffer/bytearray and then send it through the socket, once received you would need to unpack each key and value pair then construct your dictionary again on the other side. Things you would need to make sure you keep track of are the size of each element in the buffer and how many items(key/value pairs) are in the buffer</p>
</div>
<span class="comment-copy">you could throw the string into the <code>eval</code> function, but that's a potential security issue</span>
<span class="comment-copy">no need for <code>eval</code>, <code>ast.literal_eval</code> does the job and is safe.</span>
<span class="comment-copy">Thanks, @Gred Mueller for the response and I see <code>eval</code> and <code>ast.literal_eval</code> are working when I try code line by line from console but when I use them in script they always return type <code>str</code>, I have updated the eval approach in question as well</span>
<span class="comment-copy">So finally I got the code working by removing the double quote from the ReceivedValue -- Thanks, but I am using <code>ast.literal_eval()</code>.</span>
<span class="comment-copy">earlier I tried but resulted in "ValueError: No JSON object could be decoded"</span>
<span class="comment-copy">Paste s screenshot of your received value and it's type() here ?</span>
<span class="comment-copy">Updated the screenshot in question update - RecievedValue is populated from the socket as string.</span>
<span class="comment-copy">Thanks for the response, although I tried to pickle.dump the final list from the client but ended with EOF error at server receiver end, and because everything is working as expected except storing data in SQLite, I don't want to manipulate client or server-side script. If I could convert received string into a dictionary then it would be easy to process all into SQLite.</span>
<span class="comment-copy">Thanks for your lead, Now I am serializing data packets using <code>struct</code> to pack and unpack with the reference you gave  <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">link</a> it was really helpful and better way to handle data between server and client socket.</span>
