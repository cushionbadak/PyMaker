<div class="post-text" itemprop="text">
<p>I am reading python official documentation word by word.</p>
<p>In the 3.3. Special method names <a href="https://docs.python.org/3/reference/datamodel.html#basic-customization" rel="nofollow noreferrer">3.3.1. Basic customization</a></p>
<p>It does specify 16 special methods under <code>object</code> basic customization, I collect them as following:</p>
<pre><code>In [47]: bc =['__new__', '__init__', '__del__', '__repr__', '__str__', '__bytes__', 
'__format__', '__eq__', '__le__', '__lt__', '__eq__', 
'__ne__', '__ge__', '__gt__', '__hash__', '__bool__']
In [48]: len(bc)
Out[48]: 16
</code></pre>
<p>The problem is that there's three of them are not <code>object</code>'s valid attributes</p>
<pre><code>In [50]: for attr in bc:
    ...:     if hasattr(object,attr):
    ...:         pass
    ...:     else:
    ...:         print(attr)
    ...:
__del__
__bytes__
__bool__
</code></pre>
<p>Object is a base for all classes. <a href="https://docs.python.org/3/library/functions.html?highlight=object#object" rel="nofollow noreferrer">2. Built-in Functions â€” Python 3.6.3 documentation</a></p>
<p>It has no recursive base classes.</p>
<p>Where are methods of <code>__del__</code>, <code>__bytes__</code>,<code>__bool__</code> defined for class 'object'?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Where are methods of <code>__del__</code>, <code>__bytes__</code>, <code>__bool__</code> defined for class 'object'?</p>
</blockquote>
<p>They aren't defined on <code>object</code>. These are special methods you can implement yourself on classes.</p>
<p>The misunderstanding probably happened because the documentation says <code>object.__bool__</code>, but the <code>object.</code> there just means that it's a method on the object (in the sense of "instance") <strong>if implemented</strong>. 
Likewise the later examples on that documentation page list it also shows special methods for metaclasses with <code>class.__subclasscheck__</code>. That doesn't mean that it's always implemented, more like <strong>if implemented it's available on the class</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__del__</code> absolutely must not exist for <code>object</code> - its very presence in a class changes how the garbage collector treats its instances, so having this method on <code>object</code> would make it impossible for any class to not have it.</p>
<p><code>__bool__</code> is only needed if you want to override the default behavior of treating objects as truthy in a boolean context.  <code>object</code> has no need to override that behavior.</p>
<p>I'm not sure what's up with <code>__bytes__</code>, I think it defaults to <code>__str__</code> if not present (or something similar).</p>
</div>
