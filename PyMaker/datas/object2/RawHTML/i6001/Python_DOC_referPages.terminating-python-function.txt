<div class="post-text" itemprop="text">
<p>I have a function like:</p>
<pre><code>function foo(a,b,c):
    if a==1:
        do something
    elif a==2:
        do something
    else:
        exit abnormally #1

    return v1,v2,..
</code></pre>
<p>If I want to exit this function at <code>#1</code> in the code, what is the recommended way? I want to raise some exception, print error message, return to the calling function and stop the program.  <code>sys.exit(0)</code> will exit, but is it the recommended way? </p>
</div>
<div class="post-text" itemprop="text">
<p>It depends. 
If you want to raise an Expection, then raise it in the method.
If you don't handle it, the program will crash. That is usually not a good way to stop the program and should not be the case, when the Exception is predictable.
If you handle it (with try/catch) then you should
a) do something, so that the program can continue nonetheless
b) notify the user that something went wrong and cannot be handled and exit</p>
<p>Usually if you use sys.exit(x) when something went wrong, then x is bigger than 0</p>
<p>Return is the default if nothing went wrong and the method/function simply finished</p>
<p>sys.exit(0) is used to terminate the program
e.g. if you have a particular button (or key combination etc.) that, when pressed, should stop the application </p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that sys.exit(0) will exit the program, not return to the calling function. As Jean-Francois says, I believe you want to raise an exception. If you want the calling function to handle that exception (i.e. for your program not to end) then surround the call to Foo with try - except logic.</p>
</div>
<span class="comment-copy">raising an exception is better, you can pass a message along. exiting you can only pass an exit code.</span>
<span class="comment-copy">If you want to generate an exception, just <a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer"><code>raise</code></a> it. Python will take care of the rest.</span>
<span class="comment-copy">Technically, <code>sys.exit</code> raises a <code>SystemExit</code> exception, which, among other things, is a big reason to never use a bare <code>except</code> clause.</span>
<span class="comment-copy">@chepner is right. Here's what the Python docs say: sys.exit([arg]) Exit from Python. This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.             I still stand by the idea of using try-except logic (limited to trap for the raised exception), though.</span>
