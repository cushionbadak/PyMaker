<div class="post-text" itemprop="text">
<p>What is the most pythonic way to do:</p>
<pre><code>"hello"[myIndices]
</code></pre>
<p>where if myIndices were <code>range(1,3)</code> it would just return me "el". </p>
<p>I'm happy to use numpy or other packages. I can do something similar in R but can't seem to get the same to work in python. Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Slice objects can be assigned a name using the builtin <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a>:</p>
<blockquote>
<p><code>class slice(start, stop[, step])</code> </p>
<p>Return a slice object representing the set of indices specified by <code>range(start, stop, step)</code>.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; my_indices = slice(1, 3)
&gt;&gt;&gt; "hello"[my_indices]
'el'
</code></pre>
<p>Literal slices are actually translated to slice objects behind the scenes. And these are different from <code>range</code> objects in that they are not iterable. They only encapsulate the logic with which a sequence should be sliced:</p>
<pre><code>class D(object):
    def __getitem__(self, x):
        return x

print(D()[1])
# 1              
print(D()[1:3])
# slice(1, 3, None)
</code></pre>
</div>
<span class="comment-copy">Perfect. Exactly what I needed. Can you give me some more intuition around "slice"? What does it do exactly that's different from range?</span>
<span class="comment-copy">@user1357015 Answer updated.</span>
