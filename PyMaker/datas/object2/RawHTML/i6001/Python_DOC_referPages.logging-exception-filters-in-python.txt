<div class="post-text" itemprop="text">
<p>I want to exclude some specific exceptions that are not critical from logging to <a href="https://docs.sentry.io/clients/python/integrations/logging/" rel="nofollow noreferrer">sentry</a> using <a href="https://github.com/getsentry/raven-python" rel="nofollow noreferrer">raven</a> handler.</p>
<p>However, I couldn't find out any way to config the filters for those handlers.</p>
<p>The similar logging feature in Java is <a href="https://logging.apache.org/log4j/2.0/manual/filters.html" rel="nofollow noreferrer">https://logging.apache.org/log4j/2.0/manual/filters.html</a></p>
<p>I want to do something like this</p>
<pre><code>import logging
...

LOGGING = {
    'loggers' = {
       'django': {
        'handlers': ['sentry', 'console'],
        'filters': {
          'exclude': [ObjectDoesNotExist, ]
        },
        'level': 'ERROR',
       }
     }
}
</code></pre>
<p>Do <code>logging</code> package support that? If no, would you mind telling me the best way to achieve that?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for @georgexsh advice, I finally end up with this solution.</p>
<pre><code># config.log_filter.py
from logging import Filter
from django.core.exceptions import ObjectDoesNotExist

DEFAULT_EXCLUDE_EXCEPTIONS = [ObjectDoesNotExist, ]


class ExceptionFilter(Filter):
    def __init__(self, exclude_exceptions=DEFAULT_EXCLUDE_EXCEPTIONS, **kwargs):
      super(ExceptionFilter, self).__init__(**kwargs)
      self.EXCLUDE_EXCEPTIONS = exclude_exceptions

    def filter(self, record):
        if record.exc_info:
            etype, _, _ = record.exc_info
            for excluded_exception in self.EXCLUDE_EXCEPTIONS:
                if issubclass(etype, excluded_exception):
                    return False
        return True


# settings.common.py
...
LOGGING = {
    ...
    'filters': {
        'exception_filter': {
            '()': 'config.log_filter.ExceptionFilter'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['exception_filter']
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        ...
     }
}
logging.config.dictConfig(LOGGING)
</code></pre>
<p>Hope it helps someone those encounter the same problem</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have built-in exception type based logging filter, you have to write one:</p>
<pre><code>class MyFilter(object):  
    def filter(self, record):
        if record.exc_info:
            etype, _, _ = record.exc_info
            for excluded_exc in [ObjectDoesNotExist,]:
                if issubclass(etype, excluded_exc):
                    return False
        return True
</code></pre>
<p>then add to logging config, note the special "<code>()</code>" here, it is <a href="https://docs.python.org/3/library/logging.config.html#logging-config-dict-userdef" rel="nofollow noreferrer">the flag of user-defined object</a>:</p>
<pre><code>'filters': {
    'myfilter': {'()': 'MyFilter'},
},
</code></pre>
</div>
<span class="comment-copy">glad that I helped</span>
<span class="comment-copy">What is this line good for: logging.config.dictConfig(LOGGING) ?</span>
<span class="comment-copy">@mogoh it's for dynamic config when you want to override some configuration by code - <a href="https://docs.python.org/2/library/logging.config.html" rel="nofollow noreferrer">docs.python.org/2/library/logging.config.html</a></span>
