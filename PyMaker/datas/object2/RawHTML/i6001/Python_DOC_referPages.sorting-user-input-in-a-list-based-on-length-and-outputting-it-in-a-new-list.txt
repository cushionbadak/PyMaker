<div class="post-text" itemprop="text">
<p>I have this code here: which takes user input and adds it to a list until they input to stop. At that point, it sorts the list items based on length.</p>
<p>What I am trying to do is put each word the user enters into a list of words with the same length. Like 2-letter words are put into one list, 3-letter words are put into another list.</p>
<p>When complete, I'm trying to return a list containing all of the individual word lists that were created.</p>
<pre><code>def wordsList():
    stop = "stop"
    sentence = []
    while True:
        word = input("Enter a word: ")
        if word == stop: # exit the loop
            break
        sentence.append(word)
        sentence.sort(key=len)
    print(sentence)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict

def words_dict_by_length():
    stop = "stop"
    words = defaultdict(list)
    while True:
        word = input("Enter a word: ")
        if word == stop: # exit the loop
            break
        words[len(word)].append(word)
    return words
</code></pre>
<p>This uses a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> to group the words by their lengths.  </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What I am trying to do is put each word the user enters into a list of words with the same length. Like 2-letter words are put into one list, 3-letter words are put into another list.</p>
</blockquote>
<p>The structure that is good for keeping a list of objects for each of many values is a dictionary. You probably want a dictionary that looks like</p>
<pre><code>{
    2: ['hi', 'yo'],
    3: ['mom', 'dog'],
    5: ['hello'],
    4: ['then', 'than'],
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>itertools.groupby</code> in your print statement although using <code>collections.defaultdict</code> would be more elegant here.</p>
<pre><code>from itertools import groupby
def wordsList():
    stop = "stop"
    sentence = []
    while True:
        word = input("Enter a word: ")
        if word == stop: # exit the loop
            break
        sentence.append(word)
        sentence.sort(key=len)
    print([list(g) for _,g in groupby(sentence, lambda x:len(x))])
</code></pre>
</div>
<span class="comment-copy">Is this homework?</span>
<span class="comment-copy">Use the <code>list.sort</code> method described in the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">documentation</a>. You can also use the <code>sorted()</code> function which is documented <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@MikeGray I notice you sort each time you put a word into your list. Generally, this isn't the approach you would take if you wanted to achieve a sorted list, as it can be pointlessly expensive. You would, for code like the code you posted, just sort once at the end. (I do realize this isn't the actual thing you want to do, but I wanted to note that.)</span>
<span class="comment-copy">If you use a <code>set</code> rather than <code>list</code> you get unique words. Note: you'd need to <code>.add(word)</code> rather than <code>.append(word)</code></span>
