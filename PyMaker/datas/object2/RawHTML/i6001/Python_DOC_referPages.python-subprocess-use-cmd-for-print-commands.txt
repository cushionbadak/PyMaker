<div class="post-text" itemprop="text">
<p>I have a python code that should execute another code in some other file.</p>
<p>For reasons I don't have the time to explain now I need to use the <code>subprocess</code>-module or something similar. My fuction should use any window in which the <code>print</code>- commands in my second file should give their output. Here are my files:</p>
<p>maincode.py:</p>
<pre><code>#import subprocess

def startFileInNewProcess(filename):
    proc = subprocess.Popen(["python", filename], shell=True)

startFileInNewProcess("mysecondfile.py")
</code></pre>
<p>mysecondfile.py:</p>
<pre><code>import os
print os.getcwd()
</code></pre>
<p>As far as I undestood some articles on SO, the parameter <code>shell=True</code> should create a new window with the output of the <code>mysecondfile.py</code>. This does not happen! Can anybody explain why and please give improvement proposals...</p>
</div>
<div class="post-text" itemprop="text">
<p>The argument <code>shell=True</code> will only execute the command in a shell, in the default shell in your system <code>/bin/sh</code>. To start a new terminal window, you need to specify the terminal:</p>
<p><code>subprocess.Popen(["xterm", "python"])</code></p>
<p>The above line opens a new xterm terminal window and executes <code>python</code> command in it. </p>
</div>
<div class="post-text" itemprop="text">
<p>on windows you can open a new cmd window and execute the code on that</p>
<pre><code>from subprocess import Popen
from subprocess import Popen, CREATE_NEW_CONSOLE

def startFileInNewProcess(filename):
    terminal='cmd'
    command='Python'
    command=terminal +' '+ '/K' +' '+command+' '+filename
    #/K keeps the command prompt open when execution takes place
    #CREATE_NEW_CONSOLE opens a new console
    proc = subprocess.Popen(command,creationflags=CREATE_NEW_CONSOLE)
</code></pre>
</div>
<span class="comment-copy">I'm on a debian system, more detailed: Raspbian</span>
<span class="comment-copy">No, <code>shell=True</code> doesn't create a new window. It just means that the specified command will be executed through the shell. See <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">No, <code>shell=True</code> causes the first argument to be converted to a string and used as an argument to <code>sh -c</code>. You don't want <code>shell=True</code> if you are passing a list.</span>
<span class="comment-copy">Here are some other helpful links, related questions <a href="https://stackoverflow.com/questions/19308415/execute-terminal-command-from-python-in-new-terminal-window">link</a>, <a href="https://stackoverflow.com/questions/15899798/subprocess-popen-in-different-console">link</a></span>
<span class="comment-copy">I applie your proposal to my code and got this presuming that <code>filename</code> is executable: <code>subprocess.Popen(["xterm", "./"+filename])</code> This does not wait until I pressed enter or something similar, but codes the window immediately afer end of the program...</span>
<span class="comment-copy">As I mentioned above, I'm on linux, but thanks for the proposal.</span>
