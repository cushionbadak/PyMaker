<div class="post-text" itemprop="text">
<p>We are building a library, and part of that is a module that provides different database interfaces on different systems.</p>
<pre><code>class DbInterface1(object):
    """Uses MySQLdb, and is useful on system A."""
    def __init__():
        pass

class DbInterface2(object):
    """Uses SQLAlchemy, and is useful on system B."""
    def __init__():
        pass
</code></pre>
<p>We'd like to skip imports that aren't used. For instance, on a system that has <code>MySQLdb</code>, we will use <code>DbInterface1</code> and should not require <code>SQLAlchemy</code> to be installed. That is, on system A, we would use it like this:</p>
<pre><code>from ourlibrary.dbinterfaces import DbInterface1

...
</code></pre>
<p>Obviously, this will not work:</p>
<pre><code>import MySQLdb
import sqlalchemy

class DbInterface1(object):
    """Uses MySQLdb, and is useful on system A."""
    def __init__():
        pass

class DbInterface2(object):
    """Uses SQLAlchemy, and is useful on system B."""
    def __init__():
        pass
</code></pre>
<p>We assumed that moving the imports into the classes that use them would work, since the library client won't import something it's not using, but it still has failed dependencies.</p>
<pre><code>class DbInterface1(object):
    """Uses MySQLdb, and is useful on system A."""
    import MySQLdb

    def __init__():
        pass

class DbInterface2(object):
    """Uses SQLAlchemy, and is useful on system B."""
    import sqlalchemy

    def __init__():
        pass
</code></pre>
<p>What is the correct way to do this? Is it even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you wrap your imports in a try-except block?  </p>
<pre><code>try:
    import MySQLdb
except ImportError:
    pass
try:
    import sqlalchemy
except ImportError:
    pass
</code></pre>
<p>This should allow to run your script even if neither module is installed.  </p>
<p>You can modify the above method to track if the imported modules exist in order to verify if a class can be used on a certain system.   </p>
<pre><code>try:
    import MySQLdb
except ImportError:
    module_MySQLdb = False
else:
    module_MySQLdb = True
</code></pre>
<p>Then you could store that information in a class variable and check it before instantiating the class.  </p>
<pre><code>class DbInterface1(object):
    """Uses MySQLdb, and is useful on system A."""
    is_avaliable = module_MySQLdb
    def __init__(self):
        pass

if DbInterface1.is_avaliable:
    dbm = DbInterface1()
</code></pre>
<p>Or you could use a dictionary (eg <code>avaliable_modules = {'MySQLdb':module_MySQLdb}</code>) and import it along with your class.  </p>
<pre><code>from ourlibrary.dbinterfaces import DbInterface1, avaliable_modules

if avaliable_modules['MySQLdb']:
    dbm = DbInterface1()
</code></pre>
</div>
<span class="comment-copy">Try moving the <code>import</code> into the <code>__init__()</code> so that the import is not done until an instance of the class is created.  If that is not sufficient, then here are more tools: <a href="https://docs.python.org/3/library/modules.html" rel="nofollow noreferrer">docs.python.org/3/library/modules.html</a></span>
<span class="comment-copy">@gammazero This works if we add the imports for every function that uses them (ideally we could make that only <code>__init__()</code>, but it is not right now). We were able to use <code>importlib.util.find_spec()</code> to check for the module's existence before import, but that will give an unexpected result if a module is missing from a system on which it should be installed (that is, if system A is missing <code>MySQLdb</code>, for some reason). So you gave us two working options :-D, but neither is ideal.</span>
<span class="comment-copy">As using <code>find_spec()</code>, that hides the errors if the module is not installed on a system where it is expected and is therefore less than ideal.</span>
<span class="comment-copy">Yes, but you could use a variable to store the information (a bit 'hacky', i know). I updated my post to give an example.</span>
