<div class="post-text" itemprop="text">
<p>I need to use AWS IoT MQTT service. I am doing some experimenting with <a href="https://github.com/aws/aws-iot-device-sdk-python" rel="nofollow noreferrer">https://github.com/aws/aws-iot-device-sdk-python</a> currently.</p>
<p>My application will be using websockets to communicate with another service, and then publish / subscribe to MQTT topics to forward / receive messages. </p>
<p>Is it likely that this library will be blocking code execution? I still try to get my head around asyncio, and not sure what things I should be looking out for. How do I know if it will cause problems? </p>
<p>I believe I will only need to use <a href="https://github.com/aws/aws-iot-device-sdk-python/blob/333ffdb00588a7bcd80b21d352d6f4f44597c9a5/AWSIoTPythonSDK/MQTTLib.py#L34" rel="nofollow noreferrer">AWSIoTMQTTClient</a> from above library .</p>
<p>This is an extract from the working code I have:</p>
<pre><code>class AWSIoTClient:

    def __init__():
        ...
        self.client = AWSIoTMQTTClient(...)

    def subscribe(self, callback):
        self.client.subscribe(f'{self.TOPIC}/subscribe/', 0, callback)

    def publish(self, message):
        self.client.publish(self.TOPIC, message, 0)


class MyWSProtocol(WebSocketClientProtocol):

    def set_aws_client(self, client: AWSIoTClient):
        client.subscribe(self.customCallback)
        self.client = client

    def customCallback(self, client, userdata, message):
        # This will be called when we send message from AWS
        if message.payload:
            message = json.loads(message.payload.decode('utf-8').replace("'", '"'))
            message['id'] = self.next_id()
            self.sendMessage(json.dumps(message).encode('utf-8'))

    def onMessage(self, payload, isBinary):
        message = json.loads(payload)

        # This will forward message to AWS
        self.client.publish(str(payload))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is it likely that this library will be blocking code execution?</p>
<p>How do I know if it will cause problems?</p>
</blockquote>
<p>You should not allow to having long-running blocking (synchronous) code inside any of your coroutines. It'll lead to blocking your global event loop and further blocking all of your coroutines everywhere.</p>
<pre><code>async def main():
    await asyncio.sleep(3)  # async sleeping, it's ok

    time.sleep(3)           # synchronous sleeping, this freezes event loop 
                            # and all coroutines for 3 seconds, 
                            # you should avoid it!

    await asyncio.sleep(3)  # async sleeping, it's ok
</code></pre>
<p>If you need to run blocking code inside coroutine you should do it in executor (<a href="https://stackoverflow.com/a/33399896/1113207">read here</a> about it).</p>
<p>You should keep it in mind when you writing coroutines, but usually asyncio will warn you about this error if you'll enable <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.set_debug" rel="nofollow noreferrer">debug mode</a>:</p>
<pre><code>import asyncio
import time


async def main():
    await asyncio.sleep(3)
    time.sleep(3)
    await asyncio.sleep(3)


loop = asyncio.get_event_loop()
loop.set_debug(True)  # debug mode
try:
    loop.run_until_complete(main())
finally:
    loop.run_until_complete(loop.shutdown_asyncgens())
    loop.close()
</code></pre>
<p>You'll see warning:</p>
<pre><code>Executing &lt;Handle &lt;TaskWakeupMethWrapper object at 0x000002063C2521F8&gt;(&lt;Future finis...events.py:275&gt;) created at C:\Users\gmn\AppData\Local\Programs\Python\Python36\Lib\asyncio\futures.py:348&gt; took 3.000 seconds
</code></pre>
</div>
<span class="comment-copy">Will add the debug statement see if something comes up. Thank you</span>
<span class="comment-copy">Hm, no errors from debug. Will keep looking, I guess I need to understand how the SDK works from its source.</span>
