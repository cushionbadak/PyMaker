<div class="post-text" itemprop="text">
<p>I have a setup.py file like this (not in pwd, not in Python path, a random file somewhere):</p>
<pre><code>import ext_modules

config = {
    'name': 'mesos.executor',
    'version': '1.4.1',
    'description': 'Mesos native executor driver implementation',
    'author': 'Apache Mesos',
    'author_email': 'dev@mesos.apache.org',
    'url': 'http://pypi.python.org/pypi/mesos.executor',
    'namespace_packages': [ 'mesos' ],
    'packages': [ 'mesos', 'mesos.executor' ],
    'package_dir': { '': 'src' },
    'install_requires': [ 'mesos.interface == 1.4.1' ],
    'license': 'Apache 2.0',
    'keywords': 'mesos',
    'classifiers': [ ],
    'ext_modules': [ ext_modules.executor_module ]
}

from setuptools import setup
setup(**config)
</code></pre>
<p>And from an external (Python) script I'd like to import config["install_requires"]. I'm looking for the most minimalist way of doing this as it's intended to be run from other scripts that might even not be Python.</p>
<p>A Python one-liner would be awesome.</p>
</div>
<div class="post-text" itemprop="text">
<p>Aside from importing python module from an arbitrary path, you also need to avoid execute <code>setup()</code>, one method is filtering through AST:</p>
<pre><code>import ast, _ast

def filter_setup_st(node):
    if isinstance(node, _ast.Expr) and isinstance(node.value, _ast.Call):
        if node.value.func.id == 'setup':
            return False
    return True

with open('/path/to/example_setup.py') as f:
    c = f.read()   
tree = ast.parse(c)
tree.body = [n for n in tree.body if filter_setup_st(n)]

ns = {}
exec(compile(tree, '__string__', 'exec'), {}, ns)

assert ns['config']['install_requires'] == ['mesos.interface == 1.4.1']
</code></pre>
<p>another method is a bit tricky, to nullify <code>setuptools.setup</code> temporarily:</p>
<pre><code>import setuptools
ori_setup = setuptools.setup
setuptools.setup = lambda *a, **k: 0

ns = {}
exec(compile(c, '__string__', 'exec'), {}, ns)
assert ns['config']['install_requires'] == ['mesos.interface == 1.4.1']

setuptools.setup = ori_setup
</code></pre>
<hr/>
<p>Update:</p>
<p>In case you also want <a href="https://stackoverflow.com/questions/5122465/can-i-fake-a-package-or-at-least-a-module-in-python-for-testing-purposes">bypass import</a> of <code>ext_modules</code>:</p>
<pre><code>import sys

class fake_ext_module():

    executor_module = 'spam'

sys.modules['ext_modules'] = fake_ext_module
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the doc : <a href="https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly" rel="nofollow noreferrer">https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly</a></p>
<p>In your case:</p>
<pre><code>import importlib
setup_file = "path/to/setup.py"
spec = importlib.util.spec_from_file_location("setup", setup_file)
setup = importlib.util.module_from_spec(spec)
spec.loader.exec_module(setup)
# And now access it
print(setup.config["install_requires"])
</code></pre>
</div>
<span class="comment-copy">Does this not do what you need: <code>from setup import config; config['install_requires']</code> ?</span>
<span class="comment-copy">Really like the hacky second method that actually kinda works. However, one of the setup.py tries to import an external module which fails because I'm not loading from the expected folder. Do you think I can also "nullify" import ?</span>
<span class="comment-copy">@AdamC. yes, you could, updated post.</span>
<span class="comment-copy">Yes, sorry, it works :-)</span>
<span class="comment-copy">I'm pretty sure I'll have issue with the setup() method being called when importing the file</span>
<span class="comment-copy">I understand, but a work around would be to encapsulate the command:  <code>def do_setup():     from setuptools import setup     setup(**config)</code> And then <code>if __name__ == "__main__": do_setup()</code></span>
