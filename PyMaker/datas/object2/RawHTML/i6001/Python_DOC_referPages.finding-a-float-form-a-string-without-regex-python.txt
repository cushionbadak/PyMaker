<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4730949/how-do-i-do-simple-user-input-in-python">How do I do simple user input in python? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/20449427/how-can-i-read-inputs-as-numbers">How can I read inputs as numbers?</a>
<span class="question-originals-answer-count">
                    19 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to take an input from a "raw_input" function and make it into 3 floats and then sum them up.</p>
<pre><code>user_input = "1.23+2.25+3.25"
</code></pre>
<p>is it possible to take the 3 numbers and add them to a list of floats that look like this or something similar?</p>
<pre><code>float_lst = [1.23,2.25,3.25]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I only go by your requirement, not the list, you can eval. Trivial code example below</p>
<pre><code>a = raw_input()
print eval(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes.</p>
<pre><code>float_lst = [float(i) for i in user_input.split("+")]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the split function and then cast the elements to float.</p>
<pre><code>user_input = "1.23+2.25+3.25"
lst = user_input.split("+")
lst = [float(i) for i in lst]
</code></pre>
<p>Now you have a list of float so you can do </p>
<pre><code>result = sum(lst)
</code></pre>
<p>And you will have the result</p>
</div>
<span class="comment-copy">If you are 100% sure its always in that form, you can simply use <code>.split("+")</code> to get a list and then <code>map</code> to convert to floats.</span>
<span class="comment-copy">Right. Is the only non-digit, non-dot character that can appear a <code>"+"</code>?</span>
<span class="comment-copy">yes this is the only format it can show up as</span>
<span class="comment-copy">Nice solution, but it is usually not a good idea to eval user input. If you don't "trust" the input you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval</a> to safely evaluate input.</span>
<span class="comment-copy">Thats true. Mea culpa.</span>
