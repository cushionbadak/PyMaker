<div class="post-text" itemprop="text">
<pre><code>os.system(sys.executable+" "+sys.prefix+"/bin/"+arg)
</code></pre>
<p>This is part of the pip console app that comes with qpython for android</p>
</div>
<div class="post-text" itemprop="text">
<p>A better way might be to use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> and <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer"><code>os.path.join</code></a>:</p>
<pre><code>from subprocess import run
from os.path import join
from sys import executable, prefix
run([executable, join(prefix, 'bin', arg)])
</code></pre>
<p>The interface is much cleaner and more robust. It also offers much more control over how the process is called.</p>
<p>Notice that you can use a list for the arguments instead of artificially concatenating them. This makes life much easier if the path contains a space.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is more pythonic but still needs something.</p>
<pre><code>def modcmd(arg):
    exe = sys.executable + ' '
    prefix = sys.prefix + '/bin/'
    cmd = exe + prefix + arg
    os.system('clear')
    os.system(cmd)
</code></pre>
</div>
<span class="comment-copy"><code>os.system("".join([sys.executable, " ", sys.prefix, "/bin/", arg]))</code> ?</span>
<span class="comment-copy">Why clear? That's extra functionality.</span>
<span class="comment-copy">This function is ran in a REPL. I like to clear the screen before displaying the output of the next command.</span>
<span class="comment-copy">I don't think this is more Pythonic: you are still using the same function and constructing paths using string concatenation.</span>
<span class="comment-copy">The documentation for <code>os.system</code> itself recommends using the <code>subprocess</code> module instead.</span>
<span class="comment-copy">It's more pythonic because it's prettyer.</span>
