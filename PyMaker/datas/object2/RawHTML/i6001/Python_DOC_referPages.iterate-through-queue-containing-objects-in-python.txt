<div class="post-text" itemprop="text">
<p>I'm new to python and just discovered a strange error when trying to iterate through a queue. </p>
<p>Here's a code snippet:</p>
<pre><code>frontier = q.PriorityQueue()

    for goal in goals:
        portals = findPortals(maze)
        comb_value = heuristic(startX, startY, goal[0], goal[1])
        frontier.put_nowait((comb_value, heuristic(startX, startY, goal[0], goal[1]), 0, startX, startY, startX, startY))

        for portal in portals:
            heur = portalHeuristic(maze, startX, startY, goal[0], goal[1])
            frontier.put_nowait((heur, heur, 0, startX, startY, startX, startY))

    for elem in list(frontier):
        print(elem)
</code></pre>
<p>When trying to print out the elements it says <code>TypeError: 'PriorityQueue' object is not iterable</code>. Can I fix this somehow? I tried to find some solutions on here, but I didn't really find anything I understood...</p>
</div>
<div class="post-text" itemprop="text">
<p><code>PriorityQueue</code> doesn't support the internal functions that make for-loop syntax work for the data structure (such as <code>__iter__</code> and <code>next</code>).</p>
<p>Instead, you can use a <code>while</code> loop that checks if the Queue is empty with the <code>empty</code> function, and if not empty, calls <code>get</code> or <code>get_nowait</code> as needed to remove and return items from the queue as they are ready.</p>
<p>Because it requires special knowledge on the part of the caller to know the meaning of consuming the next item from the queue, it would be inconvenient to support for-loop iteration. What would a for-loop do for a queue? Always assume it should consume with <code>get_nowait</code> immediately after successfully consuming the current item? Then it might throw an exception if the queue doesn't have any items immediately ready for return. Should it always use <code>get</code> and block forever waiting for each item? Then the for-loop syntax would be disguising possible complications, waiting forever.</p>
<p>Rather than choosing one of these options as a default looping behavior, which may result in unexpected behavior for lots of queue use cases, the standard library implementation puts the burden on the caller to do something, like the while-loop I mentioned, to explicitly describe how to "get" each item of the queue.</p>
<p>(Note: I am assuming that this <code>PriorityQueue</code> library / implementation is the <a href="https://docs.python.org/3/library/queue.html#queue.PriorityQueue" rel="nofollow noreferrer">same as from the standard library <code>queue</code> module</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can</p>
<pre><code>for elem in frontier.queue:
        print(elem)
</code></pre>
<p>of course this breaks information hiding, I checked the implementation code to see that, but maybe the atribute is named <code>self.queue</code> and not <code>self._queue</code> for a reason like this.</p>
</div>
<span class="comment-copy">Sounds like you don't fully understands what a priority queue does. It's usually a heap, not a linked list, which means it's unordered except the top element.</span>
<span class="comment-copy">Are you using this <a href="https://docs.python.org/3/library/queue.html#queue.PriorityQueue" rel="nofollow noreferrer">PriorityQueue</a>?</span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/questions/21157739/iterating-through-queue-with-for-loop-instead-of-while-loop" title="iterating through queue with for loop instead of while loop">stackoverflow.com/questions/21157739/â€¦</a></span>
<span class="comment-copy">Thank you very much for the explanation and the solution to my problem! :)</span>
