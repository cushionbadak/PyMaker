<div class="post-text" itemprop="text">
<p>I have two lists. And I want to join them like this:</p>
<pre><code>[1, 2, 3], [1, 2, 3] =&gt; [1, 1, 2, 2, 3, 3]
[1], [2, 3] =&gt; [1, 2]
[], [1, 2, 3] =&gt; []
[4, 5, 6, 7], [1] =&gt; [4, 1]
</code></pre>
<p>Is there simple way to do it without <code>itertools?</code> It seems that I figured out how to do it :</p>
<pre><code>new_list = first_list+second_list
new_list[::2] = first_list
new_list[1::2] = second_list
return new_list
</code></pre>
<p>But it only works with the lists of same length</p>
</div>
<div class="post-text" itemprop="text">
<p>use <code>zip</code> with your list of lists (you can have as many sub-lists as you want) passed as arguments using <code>*</code> unpacking and flatten the items (<code>zip</code> stops at the shortest list):</p>
<pre><code>s = [1, 2, 3], [1, 2, 3]

result = [y for x in zip(*s) for y in x]
</code></pre>
<p>which amounts to (for those not used to parameter unpacking):</p>
<pre><code>first_list = [1, 2, 3]
second_list = [1, 2, 3]
result = [y for x in zip(first_list,second_list) for y in x]
</code></pre>
<p>result:</p>
<pre><code>[1, 1, 2, 2, 3, 3]
</code></pre>
<p>with <code>s = [1], [2, 3]</code> you get <code>[1,2]</code> as expected</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> with a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [x for row in zip([1, 2, 3], [1, 2, 3]) for x in row]
[1, 1, 2, 2, 3, 3]
&gt;&gt;&gt; [x for row in zip([1], [2, 3]) for x in row]
[1, 2]
&gt;&gt;&gt; [x for row in zip([], [1, 2, 3]) for x in row]
[]
&gt;&gt;&gt; [x for row in zip([4, 5, 6, 7], [1]) for x in row]
[4, 1]
</code></pre>
<p>If you want to get every element from the longest list, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; [x for row in zip_longest([4, 5, 6, 7], [1]) for x in row]
[4, 1, 5, None, 6, None, 7, None]
</code></pre>
<p>It adds <code>None</code> elements to the shortest list.</p>
</div>
<div class="post-text" itemprop="text">
<p>This function works for these cases mentioned and beyond!</p>
<pre><code>def joo(l1,l2):
    l = []
    for i in range(min(len(l1), len(l2))):
        l.append(l1[i])
        l.append(l2[i])
    return l
l = joo(l1, l2)
</code></pre>
<p>Thanks to Adirio for suggestions!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use zip:</p>
<pre><code>def zip_lists(list1, list2):
    return [a for b in zip(list1, list2) for a in b]

print(zip_lists([1, 2, 3], [1, 2, 3]))  # =&gt; [1, 1, 2, 2, 3, 3]
print(zip_lists([1], [2, 3]))  # =&gt; [1, 2]
print(zip_lists([], [1, 2, 3]))  # =&gt; []
print(zip_lists([4, 5, 6, 7], [1]))  # =&gt; [4, 1]
</code></pre>
</div>
<span class="comment-copy">use <code>zip</code> it's exactly done for that.</span>
<span class="comment-copy">Could you explain please, what this * operator means?</span>
<span class="comment-copy">it is unpacking for lists and pass as arguments.</span>
<span class="comment-copy">I would suggest to keep the same format of input and output he suggested, <code>first_list</code>, <code>second_list</code> and <code>new_list</code> as that helps to make the code easier to understand for newbies.</span>
<span class="comment-copy">@Adirio thanks for the edit (I rejected it but updated my answer to provide both approaches, cos you're right)</span>
<span class="comment-copy">No problem, your answer is still yours</span>
<span class="comment-copy">I suggested some changes that improve your script by not using globals and removing a <code>if</code> that was not needed if you first calculate the min.</span>
<span class="comment-copy">@Adirio thanks! it should be min of len of l1 and l2 right</span>
<span class="comment-copy">Yes, I saw it after editing so did it in two steps</span>
<span class="comment-copy">And you could read the previous answers ;) BTW, there's no need to convert an iterable (zip) to a list if you want to iterate one it.</span>
