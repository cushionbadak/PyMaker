<div class="post-text" itemprop="text">
<p>When defining a class in Python 2.7, you feed in variables to an init() function, then assign these to instance variables using e.g <code>self.x</code></p>
<pre><code>class NewClass(object): 
  def __init__(self, x, y):      
    self.x = x                    
    self.y = y
</code></pre>
<p>If using a large number of variables, is there a way to simplify this process i.e. not have to explicitly define each instance variable?</p>
<p>Or is there a good reason why they are explicitly defined?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><strong><code>collections.namedtuple</code></strong></a> is useful if you want something immutable:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; NewClass = namedtuple('NewClass', 'x y')
&gt;&gt;&gt; obj = NewClass(x=10, y=14)

&gt;&gt;&gt; obj
NewClass(x=10, y=14)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>__dict__</code>:</p>
<pre><code>class NewClass:
    def __init__(self, *args):
        self.headers = ["var{}".format(i+1) for i in range(len(args))]#optional, can use an list of variable names you are expecting
        for a, b in zip(self.headers, args):
            self.__dict__[a] = b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class NewClass(object): 
  def __init__(self, **kwargs):
    self.validate(kwargs) # optional      
    self.__dict__.update(kwargs)
</code></pre>
<p>but the whole idea is kind of smelly</p>
<p>you could additionally have a static set with admissible  <code>kwargs</code> keys and <code>validate</code> would check if passed <code>kwargs</code> contain a subset of that set</p>
</div>
<span class="comment-copy">Sure, but you probably should define them all explicitely anyway. Furthermore, if you are really getting a bunch of variables where this becomes a pain, it's probably time to ask yourself "should this data just go in a container?"</span>
<span class="comment-copy">That looks pretty simple to me. Anything you might change would only complicate things.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><b><code>collections.namedtuple</code></b></a> is possibly the class @quamrana means, although it's part of the standard library, not a built-in.</span>
<span class="comment-copy">If this were python 3, then <code>SimpleNamespace</code> <a href="https://docs.python.org/3.6/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer">docs.python.org/3.6/library/types.html#types.SimpleNamespace</a> would be enough. Else look up Alex Martelli's Bunch Class <a href="http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named/" rel="nofollow noreferrer">code.activestate.com/recipes/â€¦</a></span>
<span class="comment-copy">That is more concise but I would dispute that it is simpler.</span>
<span class="comment-copy"><b>very</b> smelly.</span>
