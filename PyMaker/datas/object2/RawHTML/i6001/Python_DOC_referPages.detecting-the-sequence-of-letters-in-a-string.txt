<div class="post-text" itemprop="text">
<p>I've made a hasher. It works and it's really simple. I made one for fun and I thought that the code is way too long. It's over 1000 lines long and it's so simple. I just want to shorten it down.
Here's how I did the code:</p>
<pre><code>wordorg = raw_input("Enter a word here: ")

## Checking if what you typed is correct
if len(wordorg) &lt;= 10 and len(wordorg) &gt; 1 and wordorg.isalpha():
  ## Comparison (JESUS THIS IS A LONG PIECE OF CODE)
  print "Your original word was: " + wordorg
  word = wordorg.lower()
  if len(word) &gt;= 1:
    if word[0] == "a":
        one = a
    if word[0] == "b":
        one = b
    if word[0] == "c":
</code></pre>
<p>Bla bla bla, you get the idea, it goes like that. When it reaches Z</p>
<pre><code>    if word[0] == "z":
      one = z
    if len(word) &gt;= 2:
      if word[1] == "a":
</code></pre>
<p>And it goes on. My question is, how can I shorten my code?</p>
<p>EDIT:
The integers a, b, c are defined like this:</p>
<pre><code>a = 2
b = 3
c = 5
</code></pre>
<p>and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a dict to split your line count by 26:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; translate = {l:i for i,l in enumerate(string.ascii_lowercase, 1)}
&gt;&gt;&gt; translate
{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
</code></pre>
<p>Now, all you need is a dict lookup instead of 26 <code>if</code>s:</p>
<pre><code>&gt;&gt;&gt; word='something'
&gt;&gt;&gt; translate[word[0]]
19
&gt;&gt;&gt; translate[word[1]]
15
</code></pre>
<p>You could replace the <code>1</code>, <code>2</code>, ... values with the ones defined as <code>a</code>, <code>b</code>, ... in your code.</p>
<p>If you want to do it for every letter, simply use a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [translate[letter] for letter in word]
[19, 15, 13, 5, 20, 8, 9, 14, 7]
</code></pre>
<p>You now have a list of integers, ready for further processing!</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know where you go exactly from the code snippet you gave but I suggest to start from:</p>
<pre><code>[1+ord(chr)-ord('a') for chr in wordorg]
</code></pre>
<p><code>ord</code> is a function returning the ascii code of a character (a=97, b=98, etc.). So <code>1+ord(chr)-ord('a')</code> will return 1 for 'a', 2 for 'b', etc.</p>
<p>It seems more interesting not to use a dictionary in your hash function, since a dictionary itself is a hash table.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this does what you're looking for. What I did is build a loop that runs over your word, so it can compare letter by letter. The second loop goes over the letters of the alphabet and if your word letter has a match, this is stored in the array results. This array counts the occurrences of each letter. If you want you can replace the print statement with writing to a file. There is also no need to restrict your code to run on short words anymore.</p>
<pre><code>import string

alphabet = string.ascii_lowercase
results = [0] * len(alphabet) # array to count occurrences of letters
wordorg = raw_input("Input word here: ")

print alphabet
if wordorg.isalpha():

    for i in range(len(wordorg)):
            for j in range(len(alphabet)):
                if (wordorg[i].find(alphabet[j])!=-1):
                    results[j] += 1

        # print results



    for i in range(len(alphabet)):
        if (results[i]&gt;0):
            print "There are %d occurrences of the letter %s" %(results[i], alphabet[i])
</code></pre>
</div>
<span class="comment-copy">How are <code>a, b, c, ...</code> variables defined?</span>
<span class="comment-copy">I don't understand, what you exactly want to achieve, but you may want to split the word into a list and cycle through this list instead. <a href="https://stackoverflow.com/questions/113655/is-there-a-function-in-python-to-split-a-word-into-a-list#113662" title="is there a function in python to split a word into a list%23113662">stackoverflow.com/questions/113655/â€¦</a></span>
<span class="comment-copy">@Piinthesky: A Python string can be used as a list of characters, without converting anything. <code>'abcdef'[2:5] # 'cde'</code></span>
<span class="comment-copy">Yup. Thought about it only after I sent my comment that one could also write <code>for char in wordorg</code> avoiding any conversion.</span>
<span class="comment-copy">You make a good point.</span>
<span class="comment-copy">It looks like you implemented an inefficient <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a></span>
