<div class="post-text" itemprop="text">
<p>I was going through generator in python and I got understood the advantage of generators.</p>
<p>Consider the example</p>
<pre><code>mygenerator = (x*x for x in range(3))
</code></pre>
<p>case A:</p>
<pre><code>for i in mygenerator:   
    print i
</code></pre>
<p>Say in the above example, instead of for loop, I used</p>
<p>case B:</p>
<pre><code>next(mygenerator)
</code></pre>
<p>Are case A and case B the same in terms of complexity?</p>
<p>I mean if I am using a <code>for</code> loop like  in case A, will I get benefit of generator? Or do I always have to use <code>next()</code> for better benefits?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <code>next()</code> is <em>not an equivalent</em>. <code>next()</code> produces the next value in the iterator, it is not a drop-in replacement for <code>for</code> using a loop.</p>
<p>You'd have to use a <code>while True</code> loop:</p>
<pre><code>while True:
    try:
        i = next(mygenerator)
    except StopIteration:
        break
</code></pre>
<p>This is <em>slower</em>, because this involves repeated <code>next</code> name resolutions. It is otherwise not more efficient.</p>
<p><code>for</code> uses <code>iter()</code> on the generator (which will return <code>self</code>), and then internally calls the same method <code>next()</code> would call, the <code>__next__()</code> method on the iterator.</p>
<p>Ultimately, you can test if something is more efficient (performant), with the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code> module</a>:</p>
<pre><code> &gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; while_loop = '''\
... while True:
...     try:
...         i = next(g)
...     except StopIteration:
...         break
...
... '''
&gt;&gt;&gt; timeit('for i in g: pass', 'g = (x*x for x in range(1000000))')
0.15362663206178695
&gt;&gt;&gt; timeit(while_loop, 'g = (x*x for x in range(1000000))')
0.568918940029107
</code></pre>
<p>So for a generator producing 1 million items, the <code>for</code> loop is almost 4 times faster.</p>
<p>The advantages of generator functions and generator expressions are <em>memory efficiency</em>, and in many cases, code clarity. <code>for</code> and <code>next()</code> are two very different use-cases to get values from your generators, use what you need for the problem at hand.</p>
</div>
<span class="comment-copy"><code>next()</code> makes <b>one</b> step at a time. You'd have to compare the <code>for</code> with <code>while True</code> loop. It's slower, because you ultimately access the same results but with separate <code>next()</code> global lookups and calls.</span>
<span class="comment-copy">yeah, yeah! I am aware of the fact. What i was trying to confirm  was if i use while(True)  and use next() inside while as you said AND the case A i mentioned in question are same in internal implementation?</span>
<span class="comment-copy">@syam: <code>for</code> uses <code>iter()</code> on the object, then calls the moral equivalent of <code>next()</code> on that. But all this happens in C code, so is far more efficient.</span>
