<div class="post-text" itemprop="text">
<p>I've recently constructed a piece of python code which finds the least commonly repeated number in a list! Here is my code...</p>
<p>from collections import Counter</p>
<pre><code>def least_common():

from collections import Counter

List = [1,1,1,0,0,3,3,2]

CountList = Counter(List)

Mincount = min(CountList.values())

least_common = next(n for n in reversed(List) if CountList[n] == Mincount)

print (least_common)
</code></pre>
<p>least_common()</p>
<p>However as you can clearly see, this uses a list to call the numbers which will be compared. 
I'm now trying to get it to do the same task, but instead of using a built in list, I want it to use an argument of integers. </p>
<p>For example </p>
<pre><code>def the_least_common(integers)

--------code with argument which will find lowest repeated number---------

   print the_least_common([1,1,1,0,0,3,3,2])
</code></pre>
<p>LEAST COMMON BEING 2</p>
<p>Is any of the code which I've already created reusable for what I now need to create? Apologies if this is a stupid question or comes across as really simple as I'm a little stuck</p>
<p>Any advice is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using <code>Counter</code>, there's a builtin method - <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>most_common</code></a> - that returns a sorted list of elements and their counts, starting with the most common first. You can query the last element of this list.</p>
<pre><code>In [418]: Counter([1,1,1,0,0,3,3,2]).most_common()[-1]
Out[418]: (2, 1)
</code></pre>
<p>Your function would look something like this:</p>
<pre><code>def least_common(data):
    return Counter(data).most_common()[-1][0]
</code></pre>
<hr/>
<p>If your data can have multiple integers with the same least count, and your function needs to return every one of them, you can iterate over <code>most_common</code>:</p>
<pre><code>def least_common(data):
    c = Counter(data).most_common()[::-1]
    yield c[0][0]

    for x, y in c[1:]:
        if x != c[0][1]:
            break
        yield y
</code></pre>
</div>
<span class="comment-copy">Please format your code.</span>
<span class="comment-copy">Sorry @Shadow Code now formatted</span>
<span class="comment-copy">I know the OP didn't specify this, but strictly speaking, there could be more than one least common element.</span>
<span class="comment-copy">@ekhumoro Fair point. Will edit in a fix for that now.</span>
<span class="comment-copy">@Os9008 So what's the problem here?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Sorry I  didn't manage to finish my comment. My def needs to be def the_least_common(integers) and call print the_least_common([1,1,1,0,0,3,3,2]) for the specification of the program unfortunately. Thanks for the tip anyway</span>
<span class="comment-copy">@Os9008 in what way is my answer different from your "specification" besides the missing "the" in the function name?</span>
