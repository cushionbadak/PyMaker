<div class="post-text" itemprop="text">
<p>I want to take input from a file by default.
For example:</p>
<pre><code>num=input()
</code></pre>
<p>This statement should take input from a file instead of waiting for key hits. I do not want to do it by redirecting standard input to a file, I want it by default. Simply, keyboard is default device for input, so instead of keyboard I want a file to give input.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can attach your file to the standard input on the OS level like this:</p>
<pre><code>python script.py &lt;input.txt
</code></pre>
<p>To the script, it will seem like whenever <code>input()</code> is invoked, the user types the next line from the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple workaround. </p>
<pre><code>def file_input(filename):
    with open(filename, 'r') as f:
        for line in f:
            yield line
_input_iterator = file_input('input.txt')

def input_():               # replace input
    return _input_iterator.next()
</code></pre>
<p>You may avoid the global variable by wrapping it with class or make it a module.</p>
<hr/>
<p>I don't like this but it is possible. To really replace the stdin (haven't tryied it on windows)</p>
<pre><code>import sys
sys.stdin = file('input.txt', 'r')
input_line = input()
</code></pre>
<p>For UNIX model, <code>stdin</code> is just a file. When you use utilities like <code>pipe</code> you would modify/redirect <code>stdin</code> of child processes. It feels more comfortable if <code>stdin</code> of a process is modified in parent's scope (e.g. a terminal). Otherwise it doesn't seem like 'std' anymore.</p>
</div>
<span class="comment-copy"><code>input</code> is, by definition, for reading from standard input. If you don't want to connect your file to standard input, you don't want to use <code>input</code>. Try the <code>fileinput</code>  module.</span>
<span class="comment-copy">You can't use <code>input</code> to read in a file.</span>
<span class="comment-copy">If you don't want to use the <code>fileinput</code> module for some reason, try reassigning it manually with a <code>sys.stdin = open("path to file")</code> then afterwards the <code>input()</code> function will read characters from that file.</span>
<span class="comment-copy">actually i am running python script from java. if i am running without redirecting input from a file its working fine:                                     Process p = Runtime.getRuntime().exec( "python add.py");                                       but as i am using the method you suggested its not working.                   Process p = Runtime.getRuntime().exec( "python add.py &lt; input.txt");    its getting paused not nothing else.</span>
<span class="comment-copy">Suggest that you (and the OP) take a look at the <code>fileinput</code> <a href="https://docs.python.org/3/library/fileinput.html#module-fileinput" rel="nofollow noreferrer">documention</a>.</span>
<span class="comment-copy"><code>fileinput</code> is more reasonable indeed! Maybe the asker is stuck with global name <code>input</code>.</span>
