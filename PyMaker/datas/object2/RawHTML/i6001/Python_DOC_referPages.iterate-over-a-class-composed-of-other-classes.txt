<div class="post-text" itemprop="text">
<p>I have a structure representing some data in a following way:</p>
<pre><code>class GenericDataHolder(object):
    def __init__(self):
        self.xxx=[] 
        self.yyy=[]

class A(object):
    def __init__(self):
        self.a1=GenericDataHolder()
        self.a2=GenericDataHolder()

class B(object):
    def __init__(self):
        self.b1=GenericDataHolder()
        self.b2=GenericDataHolder()
        self.b3=A()
</code></pre>
<p>I would like to iterate over <code>class B</code> elements so that i will be able to access all nested objects like below:</p>
<pre><code>b=B()
for i in b:
    print i.xxx
    print i.yyy
</code></pre>
<p>I have read that there are a few possible solutions to solve this:</p>
<ul>
<li>using metaclass  </li>
<li>implementing iterator protocol   </li>
<li>using itertools</li>
</ul>
<p>This is all fine on basic examples, but I couldn't find any solution to the problem I am facing directly - having class which's elements are composed of other classes.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>for</code> uses the (internal equivalent of the) <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code> function</a> on the object to get an iterator. Implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code> method</a> to produce one:</p>
<pre><code>class B(object):
    def __init__(self):
        self.b1 = GenericDataHolder()
        self.b2 = GenericDataHolder()
        self.b3 = A()

    def __iter__(self):
        yield self.b1
        yield self.b2
        yield from iter(self.b3)  # use `for sub in self.b3: yield sub` in Python 2
</code></pre>
<p>I used a <em>generator function</em> to produce an iterator; when <code>__iter__</code> is called a generator object is created that then produces <code>b1</code> and <code>b2</code> in order.</p>
<p>The (Python 3) <code>yield from</code> syntax then delegates to all such values in <code>b3</code>, which also needs to implement the protocol:</p>
<pre><code>class A(object):
    def __init__(self):
        self.a1 = GenericDataHolder()
        self.a2 = GenericDataHolder()

    def __iter__(self):
        yield self.a1
        yield self.a2
</code></pre>
<p>Alternatively, <code>B.__iter__</code> could just reach into <code>self.b3</code> and <code>yield self.b3.a1</code> and <code>self.b3.a2</code>, and not delegate.</p>
</div>
<span class="comment-copy">What you seem to be looking for is the <code>dir()</code> builtin which provides a list of the object's methods and attributes. You can then sort through them, for instance <code>not attr.startswith('_')</code> and <code>not callable(getattr(obj, attr))</code></span>
<span class="comment-copy">@immortal you probably should just use the <code>__dict__</code> attribute, and use <code>vars</code> to access it in that case instead of <code>dir</code></span>
<span class="comment-copy">In your example though, <code>b</code> doesn't have <code>xxx</code> and <code>yyy</code> properties; it has <code>b1</code> and <code>b2</code>, <i>each</i> of which has those properties. So what is the exact behaviour you want?</span>
<span class="comment-copy">@juanpa.arrivillaga I don't think <code>vars</code> will give you much of an advantage here, but it's also an eligible solution</span>
<span class="comment-copy">@immortal well, you wouldn't have to check <code>attr.startswith('_')</code> nor <code>callable(attr)</code>, since <code>vars</code> returns the underlying instance <code>__dict__</code>, which only contains the instance variables</span>
<span class="comment-copy">Important to note <code>yield from</code> is Python 3 syntax</span>
<span class="comment-copy">@immortal: which is the gold standard right now; I've added a comment to show what to use in Python 2.</span>
<span class="comment-copy">It might be gold standard, but all of the real-world applications I've worked with were and are written and maintained in Python 2, which is unlikely to change for a while.</span>
<span class="comment-copy">@immortal: my experience is different; at Facebook we are aggressively replacing Python 2 code with Python 3 (and all new code must be in Python 3).</span>
<span class="comment-copy">@immortal: Python 2 is reaching EOL in under 3 years, there is still time to not get left behind!</span>
