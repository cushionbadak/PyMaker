<div class="post-text" itemprop="text">
<p>If a value for one of the keys in my dictionary does satisfies a condition, I want to break out of the loop and set a property to <code>True</code>.</p>
<p>what I'm doing so far is:</p>
<pre><code>fooBar = False
for key, value in my_dict.items():
    if (condition):
        fooBar = True
</code></pre>
<p>Do I need to use a for loop and iterate through all items in the dictionary, or can I use a while loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to continue iterating over the entire dictionary - you could just <code>break</code> out of the loop:</p>
<pre><code>fooBar = False
for key, value in my_dict.items():
    if (condition):
        fooBar = True
        break # Here! 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic variant would be to use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>:</p>
<pre><code>any(condition for k, v in my_dict.items())
</code></pre>
<p>As an example, if you want to check if there's any pair of <code>(key, value)</code> with a sum larger than 10:</p>
<pre><code>&gt;&gt;&gt; my_dict = {1: 4, 5: 6}
&gt;&gt;&gt; any(k + v &gt; 10 for k, v in my_dict.items())
True
&gt;&gt;&gt; any(k + v &gt; 100 for k, v in my_dict.items())
False
</code></pre>
<p>As mentioned in the documentation, <code>any</code> is equivalent to:</p>
<pre><code>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</code></pre>
<p>which very much looks like your code written as a function.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the case of linear search like this, looping &amp; breaking with a a flag set is a classical technique. Reserve <code>while</code> to cases where you cannot predict when the loop is going to end at all. </p>
<p>However, a more pythonic method than setting a flag (like we'd have to do in Java or C) would be to use <code>else</code> for the <code>for</code> loop. </p>
<pre><code>for key, value in my_dict.items():
    if condition:
        break
else:
   # here we know that the loop went to the end without a break
</code></pre>
<p>just my 2 cents, though: iterating on a dictionary should be done without break to process all items. a potential <code>break</code> means that there's a linear search somewhere that could be faster if the data was organized better (for instance with values stored as keys to other dictionaries depending on what you're looking for so lookup is faster)</p>
</div>
<span class="comment-copy">How would a while loop know when to end? Why wouldn't you just break out of the for loop? If you have a boolean flag then why wouldn't you just use the else clause instead?</span>
<span class="comment-copy">Try using a <code>break</code> after <code>fooBar = True</code></span>
<span class="comment-copy">Sure you can use a <code>while</code> loop, <i>every for loop can be written as a while loop if you really have to for some reson</i> but I don't see any advantages over your for loop.</span>
<span class="comment-copy">There may be better ways to do this. If the condition depends on the key as well as the value you may be able to use set methods to select a subset of the items so that you don't need to loop over them all until the condition is true. This is efficient because <code>.keys()</code> returns a set-like View, and if the values are of a suitable type then the <code>.items()</code> View is also set-like.</span>
<span class="comment-copy">@PM2Ring that is true in python 3 only. But who uses python 2 in 2017 ? :) I agree that iterating on a dict should be done without break to process all items. a potential <code>break</code> means that there's a linear search somewhere that could be faster if the data was organized better.</span>
<span class="comment-copy">good remark. It doesn't apply to a complex processing though.</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre: Why not? <code>any(complex_processing(k, v) for k, v in my_dict.items())</code></span>
<span class="comment-copy">I mean some code with auxiliary variables, cumulative stuff... not very good in a function since you'd have to use globals (note: I upvoted your answer)</span>
