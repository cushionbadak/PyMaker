<div class="post-text" itemprop="text">
<p>I have a simple function that is supposed to run down the diagonal of an array and turn all the values to 0.</p>
<pre><code>def diagonal_zeros(dataset):
    zero = dataset[:]
    length = len(zero)
    for i in range(length):
        zero[i, i] = 0
    return zero
</code></pre>
<p>When I run this function on an array, it outputs the new, correct 'zero' array, but it also goes back and overwrites the original 'dataset.' I had thought that the line <code>zero = dataset[:]</code> would have prevented this. </p>
<p>I do not, however, get the same behavior with this function:</p>
<pre><code>def seperate_conditions(dataset, first, last):
    dataset = dataset[first:last, :]
    return dataset
</code></pre>
<p>Which leaves the first dataset unchanged. I've been reading StackOverflow answers to related questions, but I cannot for the life of me figure this out. I'm working on a scientific analysis pipeline so I really want to be able to refer back to the matrices at every step.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Arguments in python are passed by <strong>assignment</strong> (thanks to @juanpa.arrivillaga for the correction) and not by value. This means that generally the function does not recieve a copy of the argument, but a "pointer" to the argument itself. If you alter the object referenced by the argument in the function, you are modifying the same object outside. <a href="https://www.python-course.eu/python3_passing_arguments.php" rel="nofollow noreferrer">Here's a page with some more information</a>.</p>
<p>A possibility is to use the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">copy module</a> inside your function, to create a copy of the dataset.</p>
<p>As an example, for your code:</p>
<pre><code>import copy
myDataset = [[1,2,3],[2,3,4],[3,4,5]]

def diagonal_zeros(dataset):
    zero = copy.deepcopy(dataset)
    length = len(zero)
    for i in range(length):
        zero[i][i] = 0
    return zero

result = diagonal_zeros(myDataset)
print(result)     #[[0, 2, 3], [2, 0, 4], [3, 4, 0]]
print(myDataset)  #[[1, 2, 3], [2, 3, 4], [3, 4, 5]]
</code></pre>
<p><a href="https://jeffknupp.com/blog/2013/02/14/drastically-improve-your-python-understanding-pythons-execution-model/" rel="nofollow noreferrer">This article</a> helped me a lot with this concept.</p>
</div>
<span class="comment-copy">You are using <code>numpy</code>, I presume. <code>numpy</code> slicing returns a view, not a copy.</span>
<span class="comment-copy">@juanpa.arrivillaga you are right, I edited the comment for clarity.</span>
