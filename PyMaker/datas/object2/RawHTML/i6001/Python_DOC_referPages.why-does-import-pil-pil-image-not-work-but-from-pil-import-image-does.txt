<div class="post-text" itemprop="text">
<p>In a python interpreter:</p>
<pre><code>&gt;&gt;&gt; import PIL
&gt;&gt;&gt; PIL.Image
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'Image'
&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; PIL.Image
&lt;module 'PIL.Image' from '/usr/lib/python2.7/site-packages/PIL/Image.pyc'&gt;
</code></pre>
<p>Why do I have to make the import as "from PIL import Image"? I'm interested in both "what is the underlying working in python imports that makes this behaviour possible?" and "Why was the PIL package designed to work like this?"</p>
<p>Also, I really like to keep a clean namespace when programming. If I want to use <code>PIL.Image</code> in my code, should I import like this:</p>
<pre><code>&gt;&gt;&gt; import PIL
&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; del Image
</code></pre>
<p>or is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could import <code>PIL.Image</code>:</p>
<pre><code>import PIL.Image
PIL.Image.open('my_pic.jpg')
</code></pre>
<p>I think that Pillow is structured this way because of the history of the package. The original package <code>PIL</code> allowed you to do <code>import Image</code>. Pillow, the fork of PIL which supports Python 3, moved <code>Image</code> to the <code>PIL</code> namespace. The suggested import <code>from PIL import Image</code> makes it easy to switch from PIL to Pillow. See the <a href="http://pillow.readthedocs.io/en/4.3.x/porting.html#porting" rel="nofollow noreferrer">porting docs</a> for more info.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>PIL.Image</code> is a submodule of <code>PIL</code> and so won't be automatically imported with,</p>
<pre><code>import PIL
</code></pre>
<p>since Python doesn't recursively import submodules.</p>
<p><a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">5.4.2. Submodules</a> in the Python Language Reference may help to understand the behaviour of importing submodules.</p>
<blockquote>
<p>When a submodule is loaded using any mechanism, ... a binding is placed in the parent module’s namespace to the submodule object.</p>
</blockquote>
<p>So although after importing and loading a submodule,</p>
<pre><code>import PIL
from PIL import Image
</code></pre>
<p>you are able to access it via <code>PIL.Image</code>, this does not mean <code>PIL.Image</code> is loaded when importing the <code>PIL</code> module.</p>
<hr/>
<p>Also, I couldn't find this explicitly stated anywhere but from what I've tested, it seems to be that when you import a submodule either like:</p>
<pre><code>import package.submodule
</code></pre>
<p>or:</p>
<pre><code>from package import submodule
</code></pre>
<p>The parent package is also loaded in the process.</p>
</div>
<span class="comment-copy">Bécause Image is a  module</span>
<span class="comment-copy">@VasilisG. Using unqualified names will make for <i>less</i> clean code, and is highly unlikely to make a speed difference.</span>
