<div class="post-text" itemprop="text">
<p>I have a list of words like the following:</p>
<p><code>[w1, w2, w3, w4]</code> (N words).</p>
<p>What i want to get is combinations starting from left:</p>
<pre><code>w1, w1w2, w1w2w3, w1w2w3w4, w2, w2w3, w2w3w4, w3, w3w4, w4
</code></pre>
<p>is there a pythonic way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested comprehension</p>
<pre><code>l = ['1', '2', '3', '4']
[''.join(l[x:y]) for x in range(len(l)) for y in range(x + 1, len(l) + 1)]
# ['1', '12', '123', '1234', '2', '23', '234', '3', '34', '4']
</code></pre>
<p>or you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> to shorten it</p>
<pre><code>from itertools import combinations
[''.join(l[x:y]) for x, y in combinations(range(len(l) + 1), 2)]
# or to get lists:
[l[x:y] for x, y in combinations(range(len(l) + 1), 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another way...</p>
<pre><code>l1 = ['w1', 'w2', 'w3', 'w4']
str = ''
i=0

while i &lt; len(l1):
    str=''
    for j in range(i,len(l1)):
        str+= l1[j]
        print(str)
    i+=1
</code></pre>
<p>Output</p>
<pre><code>w1
w1w2
w1w2w3
w1w2w3w4
w2
w2w3
w2w3w4
w3
w3w4
w4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can also be done in a straightforward manner using two (nested) for loops:</p>
<pre><code>words = ['w1', 'w2', 'w3', 'w4']
for i in range(len(words)):
    for j in range(i, len(words)):
        print("".join(words[i:j+1])) # take all the words between i and j and concatenate them
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>w1
w1w2
w1w2w3
w1w2w3w4
w2
w2w3
w2w3w4
w3
w3w4
w4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.accumulate" rel="nofollow noreferrer"><strong><code>itertools.accumulate()</code></strong></a> approach:</p>
<pre><code>import itertools

l = ['w1', 'w2', 'w3', 'w4']
result = [s for i in range(len(l)) for s in itertools.accumulate(l[i:], lambda t,w: t + w)]

print(result)
</code></pre>
<p>The output:</p>
<pre><code>['w1', 'w1w2', 'w1w2w3', 'w1w2w3w4', 'w2', 'w2w3', 'w2w3w4', 'w3', 'w3w4', 'w4']
</code></pre>
</div>
<span class="comment-copy">Did you <i>try</i> anything?</span>
<span class="comment-copy">So <code>w1w3</code> is not among you desired output?</span>
<span class="comment-copy">what ive tried consists of two loops. i'm looking for a better and faster way when the list is huge</span>
<span class="comment-copy">@schwobaseggl thats right. thats something i dont want</span>
<span class="comment-copy">can this be converted to list of lists using combinations? : <code>[['w1', 'w1w2', 'w1w2w3', 'w1w2w3w4'],[ 'w2', 'w2w3', 'w2w3w4'], ['w3', 'w3w4'], ['w4']]</code></span>
<span class="comment-copy">@AbhishekThakur You can do  <code>[[''.join(l[x:y]) for y in range(x + 1, len(l) + 1)] for x in range(len(l))]</code></span>
<span class="comment-copy">Misses out w2, I'm afraid.</span>
<span class="comment-copy">@BillBell updated, thanks!</span>
