<div class="post-text" itemprop="text">
<p>I have run across a few examples of Python code that looks something like this:</p>
<pre><code>class GiveNext :

    list = ''

    def __init__(self, list) :
        GiveNext.list = list

    def giveNext(self, i) :
        retval = GiveNext.list[i]
        return retval



class GiveABCs(GiveNext):

    i = -1

    def _init__(self, list) :
        GiveNext.__init__(self, list)

    def giveNext(self):
        GiveABCs.i += 1
        return GiveNext.giveNext(self, GiveABCs.i)


class Give123s(GiveNext):

    i = -1

    def _init__(self, list) :
        GiveNext.__init__(self, list)

    def giveNext(self):
        Give123s.i += 1
        return GiveNext.giveNext(self, Give123s.i)


for i in range(3):
    print(GiveABCs('ABCDEFG').giveNext())
    print(Give123s('12345').giveNext())
</code></pre>
<p>the output is:   A 1 B 2 C 3</p>
<p>If I were more clever, I could figure out how to put the string literals inside the constructor...but that is not crucial right now.</p>
<p>My question is on the use of classes this way.  Yes, an instance of the class gets created each time that that the call within the print() gets made.  Yet the i's are 'permanent' in each class.  </p>
<p>This strikes me as less of an object-oriented approach, and more of a way of using classes to accomplish encapsulation and/or a functional programming paradigm, since the instances are entirely transitory.  In other words, an instance of the class is never instantiated for its own purposes; it is there only to allow access to the class-wide methods and variables within to do their thing, and then it is tossed away.  In many cases, it seems like the class mechanism is used in a back-handed way, in order to leverage inheritance and name resolution/spacing: an instance of the class is never really required to be built or used, conceptually.</p>
<p>Is this standard Python form?</p>
<p>Bonus question: how would I put the string literals inside each class declaration?  Right now, even if I change the _init__ for GiveABCs to</p>
<pre><code>GiveNext.__init__(self, 'wxyz')
</code></pre>
<p>it completely ignores the 'wxyz' literal, and uses the 'ABCDEF' one - even though it is never mentioned...</p>
</div>
<div class="post-text" itemprop="text">
<p>Please don't learn Python with this code. As mentioned by others, this code goes against many Python principles.</p>
<p>One example: <code>list</code> is a Python builtin type. Don't overwrite it, especially not with a string instance!</p>
<p>The code also mixes class and instance variables and doesn't use <code>super()</code> in subclasses.</p>
<p>This code tries to simulate an iterator. So simply use an <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iterator</code></a>:</p>
<pre><code>give_abcs = iter('ABCDEFG')
give_123s = iter('12345')

for _ in range(3):
    print(next(give_abcs))
    print(next(give_123s))

# A
# 1
# B
# 2
# C
# 3
</code></pre>
<p>If you really want to fix the above code, you could use:</p>
<pre><code>class GiveNext :
    def __init__(self, iterable) :
        self.i = - 1
        self.iterable = iterable

    def giveNext(self) :
        self.i += 1
        return self.iterable[self.i]

giveABCs = GiveNext('ABCDEFG')
give123s = GiveNext('12345')

for _ in range(3):
    print(giveABCs.giveNext())
    print(give123s.giveNext())
</code></pre>
<p>It outputs:</p>
<pre><code>A
1
B
2
C
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code in the OP is an incredible amount of crap. Not only it is long, unreadable, misuses OO features, and does not use Python features at all (an iterator being a standard Python feature). Here is a suggestion for a more Pythonist approach:</p>
<pre><code>giveABCs = iter('ABCDEFG')
give123s = iter('12345')
for i in range(3):
    print(next(giveABCs))
    print(next(give123s))
</code></pre>
<p>About your bonus question: I guess you are modifing the <code>_init__()</code> method of GiveABCs and Give123s. It is normal that whatever code you put in there has no effect, because the Python constructor is <code>__init__()</code> (with 2 leading underscores, not 1). So The constructor from <code>GiveNext</code> is not overloaded.</p>
</div>
<span class="comment-copy">This is not standard Python code. This code is atrocious.</span>
<span class="comment-copy">"<i>I have run across [...]</i>" Where? I certainly haven't seen this. What exactly are you trying to accomplish with this? Any answer we give to the question as it currently is risks being quite misleading.</span>
<span class="comment-copy">I wouldn't consider this either typical of Python, or a form of encapsulation, and least of all, functional.</span>
<span class="comment-copy">FYI, I edited my answer with an answer to your bonus question.</span>
<span class="comment-copy">Jeez, you people are harsh.  I take all your points, but I was just trying to boil down the essence of what I have seen so as not to have too much code.  I would never write code like that, because it is such a mess...and yes, I did not call super, etc.  What I was trying to abstract is given exactly in this question I have re-posted, though I have seen other places with idioms like this that aren't entirely intuitive: <a href="https://stackoverflow.com/questions/47419164/why-do-frameworks-like-restful-django-use-class-wide-variables-like-they-do" title="why do frameworks like restful django use class wide variables like they do">stackoverflow.com/questions/47419164/â€¦</a></span>
<span class="comment-copy">"list is an already defined Python keyword" =&gt; nope, it's a builtin type. If it was a keyword you'd get a SyntaxError trying to use it as an indentifier.</span>
<span class="comment-copy">@brunodesthuilliers: Thanks a lot, I was googling the exact term.</span>
<span class="comment-copy"><code>for a, n in zip('ABCDEFG', '12345')[:3]:</code>...</span>
<span class="comment-copy">@Elazar: Not in Python3.</span>
<span class="comment-copy">Well then: <code>islice(zip('ABCDEFG', '12345'), 3):</code></span>
<span class="comment-copy">@Elazar: sure that works, but <i>shorter</i> does not always means <i>more readable</i></span>
<span class="comment-copy">The point is not being shorter, but avoiding calling next, and being more certain about the iterator usage. In my mind, a call to <code>next</code> is a warning sign. It should be avoided when the pattern of usage is straight-forward (as in this example).</span>
