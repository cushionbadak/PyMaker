<div class="post-text" itemprop="text">
<p>I have a code which look like this:</p>
<pre><code>import asyncio
from typing import List

def some_callback(result):
    print(result)

async def b() -&gt; List[int]:
    return [1, 2, 3]

async def a() -&gt; None:
    search = asyncio.ensure_future(b())
    search.add_done_callback( some_callback)
    await search

loop = asyncio.get_event_loop()
loop.run_until_complete(a())
loop.close()
</code></pre>
<p>I am trying to add type annotations to the <code>some_callback</code> function, but I can't fully understand hoe to annotate the <code>result</code> variable. Should it be <code>Coroutine</code>? Or maybe <code>Awaitable</code>?</p>
<p>When I am using the <code>reveal_type</code> of <code>mypy</code>, the output about the <code>result</code> variable is <code>Any</code>.</p>
<p>The output of this program is:</p>
<pre><code>&lt;Task finished coro=&lt;b() done, defined at ____.py:7&gt; result=[1, 2, 3]&gt;
</code></pre>
<p>How should I document this function properly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually you can get basic annotation for some variable with just printing it's type:</p>
<pre><code>def some_callback(result):
    print(type(result))
</code></pre>
<p>While it'll show some inner <code>&lt;class '_asyncio.Task'&gt;</code> type, looks like we can treat it as regular <code>asyncio.Task</code>:</p>
<pre><code>def some_callback(result):
    print(type(result) is asyncio.Task)  # True
</code></pre>
<p>But as you noted we can also use more abstract type then <code>Task</code> like <code>Awaitable</code> since <code>Task</code> is (subclass of) <code>Awaitable</code>:</p>
<pre><code>print(issubclass(asyncio.Task, typing.Awaitable))  # True
</code></pre>
<p>Our choice narrowed down now to <code>Task</code> or one of its parent classes like <code>Awaitable</code> (including most extreme case - <code>Any</code> which is parent class for any class and which mypy've proposed to you).</p>
<p><code>add_done_callback</code> is <code>Future</code>'s <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.add_done_callback" rel="nofollow noreferrer">method</a> and according to documentation will receive future object as it's parameter. It won't be any kind of <code>Awaitable</code> (like coroutine), but only <code>Future</code> or some of it's subclasses like <code>Task</code>.</p>
<p>When it comes to choosing type annotation, it makes sense to be most abstract about what your function can accept as an argument (working properly) and most concrete about what it can return. So choosing between <code>Future</code> and <code>Task</code> I would prefer <code>Future</code> (assuming you aren't going to use <code>Task</code> specific only attrs). According to this logic, final answer is:</p>
<pre><code>def some_callback(result: asyncio.Future):
    print(result)
</code></pre>
<p>It all sounds a bit complecated and time consuming, but once you get an idea you'll be able to choose annotations much faster.</p>
</div>
