<div class="post-text" itemprop="text">
<p>Could you help me, please ?</p>
<p>I need to convert :</p>
<ul>
<li>one row with multiple columns from several files</li>
</ul>
<p>TO </p>
<ul>
<li>one file</li>
</ul>
<p>WHERE </p>
<ul>
<li>the number of columns equals to the number of files</li>
<li>and the number of rows equals to the number of columns from input files.</li>
</ul>
<p><strong>Input Files</strong></p>
<p>File 1 :
32676;;90;5;22;...;4</p>
<p>File 2 :
255;35;88;17;;...;151</p>
<p>File 3 :
551;86;442;;78;...;20</p>
<p><strong>Output file</strong></p>
<p>32676;255;551</p>
<p>;35;86</p>
<p>90;88;442</p>
<p>5;17;</p>
<p>22;;78</p>
<p>...;...;...</p>
<p>4;151;20</p>
<p>Thanks a lot for your help !</p>
<pre><code>My code :

path = 'D:\Users\mim\Desktop\SI\Test_cvs'
pathglobalcsv = 'D:\Users\mim\Desktop\SI'

#create a new file
globalfile = open(os.path.join(pathglobalcsv, 'global.csv'), 'w+')

#write filenames like column names
files = os.listdir(path)
globalfile.write(';'.join(files))
globalfile.write('\n')

#get all values
for filename in glob.glob(os.path.join(path, '*.csv')):
    csvfile = open(filename, 'r')
    textcsv = csv.reader(csvfile, delimiter=';')
    globalfile.write(zip(*textcsv))

I have an error : 

Traceback (most recent call last):
  File "C:\Users\mim\eclipse-workspace\test\csv_global.py", line 86, in &lt;module&gt;
    globalfile.write(zip(*textcsv))
TypeError: expected a string or other character buffer object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found one solution...</p>
<pre><code>globalfile = open(os.path.join(pathglobalcsv, 'global.csv'), 'wb')    
for filename in glob.glob(os.path.join(path, '*.csv')):
        csvfile = open(filename, 'r')
        with csvfile :
            textcsv = csv.reader(csvfile, delimiter=';')
            for row in textcsv:
                textlist = zip(list(row))
                column = pd.DataFrame(textlist)
                column.to_csv(globalfile, sep=';', header=False, index=False)
</code></pre>
<p>But actually the result is :</p>
<p>32676</p>
<p>90</p>
<p>5</p>
<p>22</p>
<p>...</p>
<p>4</p>
<p>255</p>
<p>35</p>
<p>88</p>
<p>17</p>
<p>...</p>
<p>151</p>
<p>How to start write values from the second file after 32676 ?
Thanks a lot !</p>
<p>---<strong>* . *</strong>---</p>
<p>[CORRECT ANSWER] :</p>
<pre><code>import csv
import glob
import os
import pandas as pd

path = 'D:\Users\mim\Desktop\SI\Test'
pathglobalcsv = 'D:\Users\mim\Desktop\SI'

#create a new file
globalfile = open(os.path.join(pathglobalcsv, 'global.csv'), 'w')

#write filenames like column names
files = os.listdir(path)
header = map(lambda files: files.replace(';', '\;'), files)

#write values from all files to one common csv file
outputfile = os.path.join(pathglobalcsv, 'global.csv')
outputcsv = open(outputfile, 'r')
outputtext = csv.reader(outputcsv)
listrow = list(outputtext)
outputDF = pd.DataFrame(listrow)

for filename in glob.glob(os.path.join(path, '*.csv')):
    csvfile = open(filename, 'r')
    with csvfile :
        textcsv = csv.reader(csvfile, delimiter=';')
        for row in textcsv:
            list_ = zip(list(row))
            column = pd.DataFrame(list_)
            outputDF = pd.concat([outputDF, column], axis=1)
outputDF.to_csv(globalfile, sep=';', header=header, index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>a bit of hints for how to use zip to merge data as well as transpose lists.
it sounds like how to transpose a csv is you actual question. The answer to how to transpose a csv is to get it into a list of list (via for example the csv module) and then transpose that and write back to file (if wanted).</p>
<pre><code>row1 = [1,2,3]

row2 = ['a', 'b', 'c']

list(zip(row1, row2))
Out[45]: [(1, 'a'), (2, 'b'), (3, 'c')]

z = list(zip(row1, row2))

list(zip(*z))
Out[47]: [(1, 2, 3), ('a', 'b', 'c')]

y = list(zip(*z))

y
Out[49]: [(1, 2, 3), ('a', 'b', 'c')]

list(zip(*y))
Out[50]: [(1, 'a'), (2, 'b'), (3, 'c')]
</code></pre>
<p>or if you have numpy or pandas installed, both of those will do the job in max 3 lines of code with the workflow read_file/transpose_matrix/write_transposed_to_file</p>
<p>So based on your code, I would read all files put them in memory and then do the transposed writing. I think if you change this portion it will do it (I did not test it myself).</p>
<pre><code>#write filenames like column names
files = os.listdir(path)
#globalfile.write(';'.join(files))
#globalfile.write('\n')

file_rows = [files] # adjusted so that its a list in list

#get all values
for filename in glob.glob(os.path.join(path, '*.csv')):
    tmp_rows = []
    with open(filename, 'r') as csvfile:
        textcsv = csv.reader(csvfile, delimiter=';')
        for row in textcsv:
            tmp_rows += [row] # adjusted for list in lists
    file_rows += tmp_rows
with open('transposed.csv') as f:
    gf = csv.writer(f)
    gf.writerows(zip(*file_rows))
</code></pre>
<p>You will get funny results if you don't strictly have 1 row per original file.</p>
<p>Update:
I made a small example that does work.</p>
<pre><code>files = list('abcd')
file_rows = [files]
for filename in [range(i, i+4) for i in range(0, 12, 4)]:
    tmp_rows = []
    fake_csv = [list(filename)]
    for row in fake_csv:
        tmp_rows += [row] # change to [row, row] to see what happens
                          # in case of multiple rows in original csv
    file_rows += tmp_rows
transposed = list(zip(*file_rows))
print(transposed)
</code></pre>
<p>after doing that test code I adjusted original code a bit to make it list in lists, that's the only thing. So if you after that change still get funny results it is now because you don't have uniform input data, in that case you need to decide how to deal with that. zip for example will silently only output the length of the shortest list for all original rows. To fix that you need to codewise add to so that all lists have the same length as the longest row.</p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> and <a href="https://docs.python.org/3.4/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>.</span>
<span class="comment-copy">whichever way you choose to go, make an attempt by yourself based on the hints you now have, if you have problems post that code in your original question and you will get help from someone.</span>
<span class="comment-copy">I added my code... unfortunately, I have an error.</span>
<span class="comment-copy">see updated answer</span>
<span class="comment-copy">I still have the same error ;-(</span>
<span class="comment-copy">you are now stacking the "rows", same as your original question. You have an answer in my last edit. Transpose only makes sense in this context if you have a matrix, i.e. you have to have all original rows in memory in one variable and then transpose that variable before writing to the new csv. In your original question you want to put all different csv's on the same row, that does not make a matrix, you have to put every csv in it's own row so you make a matrix and then do the transpose/write. Try some prints of what you have in your variables, that should guide you in the right direction.</span>
