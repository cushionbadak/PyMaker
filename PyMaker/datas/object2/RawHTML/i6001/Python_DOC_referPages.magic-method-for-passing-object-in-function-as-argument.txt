<div class="post-text" itemprop="text">
<p>Is there any magic method that will invoke when I pass object as argument of function?</p>
<pre><code>class Test:
    def __init__(self, a, b):
         self.a = a
         self.b = b
    def __???__(self):
         return (self.a, self.b)

test = Test(0, 1)

some_function(test) # I'd like to pass parameters (0, 1) here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, arguments to functions are not treated special in any way. It's just another assignment (to the parameter names of the function).</p>
<p>If you need to treat <code>a</code> and <code>b</code> as separate arguments, make <code>Test</code> a <em>sequence</em>, then pass it in with the <code>*sequence</code> call syntax to expand the sequence to separate arguments. You can make it a sequence by making it an <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">iterator type</a>:</p>
<pre><code>class Test:
    def __init__(self, a, b):
         self.a = a
         self.b = b
    def __iter__(self):
         return iter((self.a, self.b))

test = Test(0, 1)
some_function(*test)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def some_function(a, b):
...     print(f'a = {a!r}\nb = {b!r}')
...
&gt;&gt;&gt; test = Test(0, 1)
&gt;&gt;&gt; some_function(*test)
a = 0
b = 1
</code></pre>
</div>
<span class="comment-copy">No, there isnâ€™t. That would be super confusing. You can implement <code>__iter__</code> and call <code>some_function(*test)</code>, though.</span>
<span class="comment-copy">There is no magic in Python. You may want to see Ruby for magic.</span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/a/8601389/4014959">this answer</a> by Python core dev Raymond Hettinger.</span>
<span class="comment-copy">@ElisByberi Methods like <code>__len__</code>, <code>__add__</code> and <code>__repr__</code> are commonly referred to as "magic methods"</span>
<span class="comment-copy">@PM2Ring Of course they call them magic. They use them to do tricks! I am still with "Explicit is better than implicit."</span>
<span class="comment-copy">Nice example of <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498 f-strings</a> also.</span>
<span class="comment-copy">I'm under the impression that f-string have to evaluate to a value.  Two questions, is some_function passing the value of self.a or is it actually passing the pointer and then it gets looked up at the print statement?  If a value will ultimately be passed to the f-string, what  is the advantage of using !r here?</span>
<span class="comment-copy">@Rookie: yes, <code>f</code> strings specify expressions whose results are interpolated. The <code>str.format()</code> equivalent is <code>'a = {!r}\nb = {!r}'.format(a, b)</code>. <code>a</code> and <code>b</code> are just <i>local variables</i> in the <code>some_function()</code> function. You could give them different names if that helps your understanding better.</span>
