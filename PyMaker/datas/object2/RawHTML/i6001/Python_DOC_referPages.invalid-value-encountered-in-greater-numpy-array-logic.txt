<div class="post-text" itemprop="text">
<p>The question "Why do I get an invalid value ..." has been discussed a few times already. Here is another variant which I don't quite understand yet - this is why I am opening this thread:</p>
<p>(1) in </p>
<pre><code>y = np.nan
(~np.isnan(y)) &amp; (y &gt; 5.)
</code></pre>
<p>I get the correct result and no error is thrown.</p>
<p>(2) However, in</p>
<pre><code>y = np.array([np.isnan, 6.])
(~np.isnan(y)) &amp; (y &gt; 5.)
</code></pre>
<p>the "Invalid value encountered in greater" warning is shown.</p>
<p>This means that the short-circuiting (<a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">Python reference</a>) in the boolean and expression does not work if this expression is used with numpy arrays.</p>
<p>Digging a bit on stackoverflow (e.g. <a href="https://stackoverflow.com/questions/33384529/difference-between-numpy-logical-and-and">ref</a> ) and elsewhere it seems that under the hood the array expression is written as</p>
<pre><code>np.logical_and.reduce([~np.isnan(y), y&gt;5.])
</code></pre>
<p>This means that both expressions are first evaluated for all elements before they are combined (indeed, this produces the same warning). Could someone please confirm that this is what is happening? And does anyone have asolution for this problem other than looping over all array elements? </p>
<p>The context I am using this expression in is to set additional values in an array to nan if they exceed a threshold, i.e. the actual code has something like</p>
<pre><code>y[(~np.isnan(y)) &amp; (y &gt; 5.)] = np.nan
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can do it, with some boolean indexing to avoid the <code>nan</code> and a <code>where</code> statement</p>
<pre><code>y[np.isfinite(y)] = np.where(y[np.isfinite(y)] &gt; 5, np.nan, y[np.isfinite(y)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OK: seems I have found a solution myself:</p>
<pre><code>array_and = np.frompyfunc(lambda x: (~np.isnan(x)) &amp; (x &gt; 5.), 1, 1)
array_and(y)
</code></pre>
<p>appears to work. Reference: [<a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.frompyfunc.html#numpy.frompyfunc" rel="nofollow noreferrer">1</a>]</p>
</div>
<span class="comment-copy">Is <code>y = np.array([np.isnan, 6.])</code> supposed to be <code>y = np.array([np.nan, 6.])</code>?</span>
<span class="comment-copy">Scalar python &amp; short circuits.  Numpy &amp; does not.</span>
<span class="comment-copy"><code>frompyfunc</code> is still an iterative approach, but tends have a 2x speed improvement over a more explicit Python loop.  Not a big gain, but useful when fancier numpy methods are hard to construct or understand.</span>
