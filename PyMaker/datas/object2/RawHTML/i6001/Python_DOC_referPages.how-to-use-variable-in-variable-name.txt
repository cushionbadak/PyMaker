<div class="post-text" itemprop="text">
<p>I have a class Character with attributes:</p>
<pre><code>class Character():
    def __init__(self):
        self.level_10_skill = 'aaa'
        self.level_20_skill = 'bbb'
        self.level_30_skill = 'ccc'

player_level = '20'


print(Character.level_int(player_level)_skill) # Not Working
</code></pre>
<p>How can I call variable play_level in the attributes of Character? The code I write is not working. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of that, try using a dictionary:</p>
<pre><code>class Character():
    def __init__(self):
        self.skillbylevel = { 
            10: 'aaa',
            20: 'bbb',
            30: 'ccc' 
        }

player_level = 20

hero = Character()
print(hero.skillbylevel[player_level])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> should do this for you. It allows you to build a string, and fetch the attribute off the object with that name.</p>
<pre><code>attribute_name = level_int(player_level) + "_skill"
print(getattr(Character, attribute_name))
</code></pre>
<p>If <code>attribute_name</code> is not the name of an attribute on your class, then it will raise <code>AttributeError</code> just like it would if you called <code>Character.not_an_attribute</code>, so behaviorally it's identical.</p>
<p>You can also override the default behaviour of rasining an exception by giving <code>getattr</code> a third argument;</p>
<pre><code>getattr(Character, attribute_name, "No skill this level")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While you can set up your class that way, I think an easier, more readable way would be something like this:</p>
<pre><code>#! /usr/bin/env python

class Character():
  def __init__(self, level):
    self.skill_level = level
    self.skills = {
      10: 'aaa',
      20: 'bbb',
      30: 'ccc'
    }

  def set_skill_level(self, skill_level):
    self.skill_level = skill_level

  def get_skill_level(self):
    return "You are currently at skill level {0}".format(self.skill_level)

  def get_skill(self):
    return "Your skill is {0}".format(self.skills[self.skill_level])

if __name__ == "__main__":
  my_character = Character(20)
  print(my_character.get_skill_level())
  print(my_character.get_skill())
</code></pre>
<p>Here, you are storing the relevant instance variables, the skill level and what skill pertains to that level, and providing class methods to interact with this data.  I think using a dictionary to define the skills at each level is cleaner than defining a different instance variable for each skill because it offers you the flexibility of passing the skill list in as an argument to the class, or reading it from an external source, such as a database, file, etc.</p>
</div>
<span class="comment-copy">I think you need to create level property as dict.</span>
<span class="comment-copy">Thanks for the reply!</span>
<span class="comment-copy">Thank you for the reply!</span>
<span class="comment-copy">Thank you for the reply!</span>
<span class="comment-copy">You're welcome.</span>
