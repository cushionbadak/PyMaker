<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/423379/using-global-variables-in-a-function">Using global variables in a function</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<pre><code>todolist = []

def add_item(item):
    todolist =  todolist + [item]

def main():

    add_item(1)

    print(todolist)


if __name__ == '__main__':
    main()
</code></pre>
<p>I am trying to make a function called add_item() which works like append() and I am not allowed to use any built in functions. I keep getting an UnboundLocalError. How would I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Even if you fix the local variable issue, your code doesn't behave like list.append. append operates by stateful side effect, mutating the list it was run on; your code created a new list and assigned a name. The only way I can think of to mutate a list that way without using a named method is a <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">slice assignment</a>:</p>
<pre><code>def myappend(intolist, newitem):
    intolist[len(intolist):] = [newitem]
</code></pre>
<p>But this obviously uses the <code>len</code> built in function, and the assignment is translated into a <a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer">setitem</a> call. It's possible to avoid using len, by using implicit bool and getitem calls. But the calls are still there; basically, only a program that performs no operations can run without calling built in functions. </p>
</div>
<div class="post-text" itemprop="text">
<p>Because the statement <code>todolist =  todolist + [item]</code>, which is an assignment statement that creates a local variable <code>todolist</code> hides the global variable with the same name. So you have to specify that the variable is in global scope using the keyword <a href="https://www.python-course.eu/python3_global_vs_local_variables.php" rel="nofollow noreferrer"><code>global</code></a>. </p>
<pre><code>def add_item(item):
    global todolist
    todolist =  todolist + [item]
</code></pre>
<p>When you use <code>append()</code>,</p>
<pre><code> todolist.append(item)
</code></pre>
<p>there is no assignment operation, hence no variable is created and the variable in the global scope is used.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check the code below:</p>
<pre><code>todolist = []

def add_item(item):
    global todolist
    todolist = todolist + [item]

def main():
    add_item(1)
    print(todolist)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Your constraints are weird. All operators including object creation are effectively built in functions, and Python is an imperative language to the degree that even <code>def</code> is an executable statement. <code>global</code> is a rare exception in that it's a declarative directive for the compiler.</span>
<span class="comment-copy">Hey I just made a function call size() that returns the size of the list instead of using len, and thanks very much.</span>
<span class="comment-copy">Is there any other was of doing it, without using global? The program must be completely imperative.</span>
<span class="comment-copy">@blazing use <code>append()</code> instead of <code>+</code>.</span>
<span class="comment-copy">That would make it not completely imperative though, because append calls from the List class.</span>
<span class="comment-copy">@blazing other way is, you could pass the list <code>todolist</code> as an argument to the function.</span>
<span class="comment-copy">The list.append method is <a href="https://en.wikipedia.org/wiki/Imperative_programming" rel="nofollow noreferrer">imperative</a>. OO, imperative and procedural are all coexisting <a href="https://en.wikipedia.org/wiki/Programming_paradigm" rel="nofollow noreferrer">programming paradigms</a>.</span>
<span class="comment-copy">You don't need the global statement if you use append.</span>
<span class="comment-copy">oh.. my bad. thanks for correcting.</span>
<span class="comment-copy">This uses append and the question says trying to make a function that works like append.</span>
