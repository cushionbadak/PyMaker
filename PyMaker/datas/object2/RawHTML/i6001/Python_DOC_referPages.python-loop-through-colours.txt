<div class="post-text" itemprop="text">
<h2>PYTHON HELP</h2>
<p>I've got a series of patches drawn in a grid entered by the user but want them to loop through a series of colours which are also typed by the user. 
i.e. the user enters 'blue, green, yellow' and the patches should follow that loop through each row at a time i.e if the grid is 4x4 i want the fill to be as shown below</p>
<pre><code>    1      2      3     4
1 blue   green  yellow blue
2 green  yellow blue   green
3 yellow blue   green  yellow
4 blue   green  yellow blue


def drawPatch(win, x, y, colours):
    for i in range(100, 0, -10):
        rectangle = Rectangle(Point(x + i, y + (100 - i)), Point(x, (y+100)))
        if (i % 20) == 0:
            rectangle.setFill("white")
        else:
            rectangle.setFill(colours)
        rectangle.setOutline("")
        rectangle.draw(win)
    # win.getMouse()
    # win.close()
# drawPatch(win=GraphWin("drawPatch", 100, 100), colour="red", x=0, y=0)


def drawPatchwork():

    width = int(input("Enter width: "))
    height = int(input("Enter height: "))
    colours = input("Enter your four colours: ")
    win = GraphWin("Draw Patch", width * 100, height * 100)
    for y in range(0, height * 100, 100):
        for x in range(0, width * 100, 100):
            drawPatch(win, x, y, colours)
    win.getMouse()
    win.close()

drawPatchwork()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the algorithm of <code>itertools.cycle</code> to cycle through any number of colors:</p>
<pre><code>from graphics import *

def cycle(iterable):
    """
    Python equivalent of C definition of cycle(), from
    https://docs.python.org/3/library/itertools.html#itertools.cycle
    """

    saved = []

    for element in iterable:
        yield element
        saved.append(element)

    while saved:
        for element in saved:
            yield element

def drawPatch(win, x, y, colour):
    for i in range(100, 0, -10):
        rectangle = Rectangle(Point(x + i, y + (100 - i)), Point(x, y + 100))
        if (i % 20) == 0:
            rectangle.setFill('white')
        else:
            rectangle.setFill(colour)
        rectangle.setOutline("")  # no outline
        rectangle.draw(win)

def drawPatchwork():

    width = int(input("Enter width: "))
    height = int(input("Enter height: "))
    colours = cycle(map(str.strip, input("Enter your colours: ").split(',')))

    win = GraphWin("Draw Patch", width * 100, height * 100)

    for y in range(0, height * 100, 100):
        for x in range(0, width * 100, 100):
            drawPatch(win, x, y, next(colours))

    win.getMouse()
    win.close()

drawPatchwork()
</code></pre>
<p><strong>USAGE</strong></p>
<pre><code>% python3 test.py
Enter width: 4
Enter height: 4
Enter your colours: blue, green, yellow
</code></pre>
<p><strong>OUTPUT</strong></p>
<p><a href="https://i.stack.imgur.com/FFDV7.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/FFDV7.png"/></a></p>
</div>
<span class="comment-copy">Please indent your code properly</span>
<span class="comment-copy">Code should now be properly indented</span>
<span class="comment-copy">Thanks but I forgot to mention that I am trying to use only the graphics file for this. Thanks anyway!</span>
<span class="comment-copy">@Mark.k, replaced library implementation of cycle() with local one.</span>
