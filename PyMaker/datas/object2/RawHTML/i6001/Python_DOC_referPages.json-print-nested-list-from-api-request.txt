<div class="post-text" itemprop="text">
<p>I'm querying an API that interfaces to MariaDB and this is how I get the data back.</p>
<pre><code>{'TestTable': {'columns': ['Name', 'Id'], 'records': [['Jack', 1], ['Jill', 2]]}}
</code></pre>
<p>What I'm trying to achieve is to print the columns before the records like so:</p>
<pre class="lang-none prettyprint-override"><code>Name: Jack
Id: 1
Name: Jill
Id: 2
</code></pre>
<p>I tried to take the data and put the columns and records into different lists and then my idea was to use an if to match the indexes and if match to print the to the format above, but it was the wrong index.  Unfortuantely after trying to get it to work after about 5 different ways and 3 hours, I realized I had absolutely no idea what I was doing:</p>
<pre><code>jsonData = json.loads(reqGet.text)
columns = jsonData['TestTable']['columns']
records = jsonData['TestTable']['records']

for idx, val in enumerate(records):
    print(idx, val)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>0 ['Jack', 1]
1 ['Jill', 2]
</code></pre>
<p>Any thoughts besides "Have you considered digging ditches?", would be great.   </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d={'TestTable': {'columns': ['Name', 'Id'], 'records': [['Jack', 1], ['Jill', 2]]}}

for record in d['TestTable']['records']:
    for col_name, value in zip(d['TestTable']['columns'], record):
        print('{}: {}'.format(col_name, value))
</code></pre>
<p>will print out</p>
<pre><code>Name: Jack
Id: 1
Name: Jill
Id: 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using your own code:</p>
<pre><code>jsonData = json.loads(reqGet.text)
columns = jsonData['TestTable']['columns']
records = jsonData['TestTable']['records']
</code></pre>
<p>And just changing a little bit your <code>for</code> loop to iterate through then using the same indexes:</p>
<pre><code>for i in range(len(records)):
    data = records[i] # e.g. when i=0, data = ["Jack", 1] 
    for j in range(len(columns)):
        print(col[j], data[j])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could read it to a pandas dataframe:</p>
<pre><code>import pandas as pd

d = {'TestTable': {'columns': ['Name', 'Id'], 'records': [['Jack', 1], ['Jill', 2]]}}

df = pd.DataFrame(data=d['TestTable']['records'],columns=d['TestTable']['columns'])
</code></pre>
<p>df looks like this:</p>
<pre><code>  Name  Id
0  Jack   1
1  Jill   2
</code></pre>
<p>Print it looping through the rows and joining index with value:</p>
<pre><code>for idx,row in df.iterrows():
    for item in zip(row.index,row.values):
        print(': '.join([str(i) for i in item]))
</code></pre>
<p>Result:</p>
<pre><code>Name: Jack
Id: 1
Name: Jill
Id: 2
</code></pre>
</div>
<span class="comment-copy">Can you explain that or point me to docs?  I believe it, but I dont get it.</span>
<span class="comment-copy">Sure, which bit is confusing?  <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is a built in function that "pairs up" elements from multiple lists by index.  <code>str.format</code> has kind of <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">confusing docs</a>, but <a href="https://pyformat.info/" rel="nofollow noreferrer">this site</a> has some good examples.</span>
<span class="comment-copy">I just read the zip() function doc and it's getting clearer, but yeah, it's still fuzzy.  I think I just need to play with it until it makes sense.  Just a stretch for a noob, that's all.  Thanks a bunch!  Really appreciated.</span>
<span class="comment-copy">So you are using len to match indexes?</span>
<span class="comment-copy">I assumed both columns and records[j] have the same <code>length</code>. E.g. I assumed it is impossible for columns to be <code>["Name", "Id"]</code> and records to be <code>["John", 1, "some third value"]</code></span>
<span class="comment-copy">Thanks you for the clarification.</span>
<span class="comment-copy">Anton, what the advantage of this?  Or is it just a different approach?</span>
<span class="comment-copy">@sloppytypist different approach. Pandas is the go to library in Python when dealing with tables.</span>
<span class="comment-copy">Great.  I'll take a look at the docs.  Thanks</span>
