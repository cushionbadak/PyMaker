<div class="post-text" itemprop="text">
<p>I am using ElementTree to parse XML files.</p>
<p>I was using Python 3.6, but now I have to shift my code to a machine having only Python 2.6. I made some of the necessary changes in syntax, but I am stuck at <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter" rel="nofollow noreferrer"><code>ET.iter()</code></a>, which does not exist in Python 2.6, and which I was using with no arguments to recursively parse an <code>ElementTree</code> object.</p>
<p>I tried to change <code>iter()</code> to <a href="https://docs.python.org/2.6/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findall" rel="nofollow noreferrer"><code>findall()</code></a>, but that asks for a parameter specifying a match to filter elements by. I also tried simply doing</p>
<pre><code>for child in element:
    # ... etc.
</code></pre>
<p>… but that only returns the children at the first level under <code>element</code>, not all of its descendants (which is what I need).</p>
<p>How can I recursively get all the elements in Python 2.6?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter" rel="nofollow noreferrer"><code>ET.iter()</code></a> was introduced in Python 2.7, to replace <a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.getiterator" rel="nofollow noreferrer"><code>ET.getiterator()</code></a> … which, although deprecated since then, remains <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.getiterator" rel="nofollow noreferrer">available</a> up to and including the current Python 3.x release.</p>
<p>In many cases, <code>ET.getiterator()</code> can be used as a drop-in replacement for <code>ET.iter()</code> if Python 2.6 compatibility is required.</p>
<p><strong>However:</strong> it's important to note that, although they're often interchangeable in practice, these methods are <strong><em>not</em></strong> the same: <code>ET.iter()</code> returns an iterator, while <code>ET.getiterator()</code> returns a list:</p>
<pre><code>&gt;&gt;&gt; tree.getiterator()
[&lt;Element 'root' at 0x...&gt;, &lt;Element 'sub1' at 0x...&gt;, &lt;Element 'sub2' at 0x...&gt;]
&gt;&gt;&gt; tree.iter()
&lt;_elementtree._element_iterator object at 0x...&gt;
</code></pre>
<p>… with all of the potential implications for performance and functionality that this difference implies.</p>
</div>
