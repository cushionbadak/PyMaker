<div class="post-text" itemprop="text">
<p>Im trying to find out a way to which value occurs the most often in a list of lists. I tried using Counter and that gives me the counts for each different occurence. I would like a solution that was not using Counter since i am unfamiliar with it but if someone can help with it im not opposed. </p>
<pre><code>def get_uncommon_colors(self):
    uncommon_colors_list=[]
    colors=['black','red','white','blue']
    for newCard in self.cardlist:
        newCard.rarity.split()
        if newCard.rarity=="Mythic Rare":
            if newCard.get_colors!="None":
                uncommon_colors_list.append(newCard.get_colors())
        else:
            continue
        #test=(Counter(x for sublist in uncommon_colors_list for x in sublist))
    return(uncommon_)
</code></pre>
<p>List of lists of colors:</p>
<pre><code>[['White'],
 ['Blue'],
 ['Blue'],
 ['Black'],
 ['Red'],
 ['Red'],
 ['Green'],
 ['Green'],
 ['Red', 'Green'],
 ['White', 'Green'],
 ['Black', 'Red'],
 ['White', 'Blue'],
 ['Blue', 'Black'],
 ['White', 'Blue'],
 ['Blue', 'Red', 'Green']]
</code></pre>
<p>Using Counter</p>
<pre><code>Counter({'Black': 3, 'Blue': 6, 'Green': 5, 'Red': 5, 'White': 4})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get the most frequent colour use the <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>most_common()</code></a> method of the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>. The first item is the most common:</p>
<pre><code>from collections import Counter

list_of_lists = [['White'], ['Blue'], ['Blue'], ['Black'], ['Red'], ['Red'], ['Green'], ['Green'], ['Red', 'Green'], ['White', 'Green'], ['Black', 'Red'], ['White', 'Blue'], ['Blue', 'Black'], ['White', 'Blue'], ['Blue', 'Red', 'Green']]

&gt;&gt;&gt; Counter(colour for sublist in list_of_lists for colour in sublist).most_common(1)
[('Blue', 6)]
</code></pre>
<p>If you wanted to do this yourself you could use a dictionary:</p>
<pre><code>d = {}

for sublist in list_of_lists:
    for colour in sublist:
        d[colour] = d.get(colour, 0) + 1

&gt;&gt;&gt; max(d.items(), key=lambda t: t[1])
('Blue', 6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use dictionaries:</p>
<pre><code>l = [['White'],
 ['Blue'],
 ['Blue'],
 ['Black'],
 ['Red'],
 ['Red'],
 ['Green'],
 ['Green'],
 ['Red', 'Green'],
 ['White', 'Green'],
 ['Black', 'Red'],
 ['White', 'Blue'],
 ['Blue', 'Black'],
 ['White', 'Blue'],
 ['Blue', 'Red', 'Green']]

d = {}
for i in l:
    for j in i:
        if d.get(j):
            d[j] += 1
        else:
            d[j] = 1           

print(d)
{'Black': 3, 'Green': 5, 'Red': 5, 'Blue': 6, 'White': 4}
</code></pre>
<p>To get max color and count:</p>
<pre><code>print(max(d, key=d.get),d[max(d, key=d.get)])
Blue 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would first flatten the list of lists, like this:</p>
<pre><code>flattened_color_list = [item for sub_list in color_list for item in sub_list]
</code></pre>
<p>Then iterate through the list using a dictionary comprehension to create your frequency dictionary, like this: </p>
<pre><code>frequency = {}
{item: 1 if item not in frequency and not frequency.update({item: 1}) else frequency[item] + 1 if not frequency.update({item: frequency[item] + 1}) else 1 for item in flattened_color_list}
</code></pre>
<p>Then get the largest value out of the dictionary, like this:</p>
<pre><code>max(frequency.iterkeys(), key=(lambda key: frequency[key]))
</code></pre>
<p>Also, the nested if statement probably doesn't need to exist in your code.  In the first if statement, you're ensuring that newCard.rarity is equal to "Mythic Rare," so the second if statement would always return true, since newCard.rarity would always be "not equal" to "None" at that point.  You could get rid of the second if statement and your code would work the same.</p>
<pre><code>def get_uncommon_colors(self):
    uncommon_colors_list=[]
    colors=['black','red','white','blue']
    for newCard in self.cardlist:
        newCard.rarity.split()
        if newCard.rarity=="Mythic Rare":
            if newCard.rarity!="None":
                uncommon_colors_list.append(newCard.get_colors())
        else:
            continue
        #test=(Counter(x for sublist in uncommon_colors_list for x in sublist))
    return(uncommon_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also just use a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> to collect the counts:</p>
<pre><code>from collections import defaultdict
from operator import itemgetter

def count_occurences(lst):

    # flatten the list, many ways to do this
    all_colors = [color for sublist in lst for color in sublist]

    freq = defaultdict(int)

    for color in all_colors:
        freq[color] += 1

    return freq
</code></pre>
<p>Which yields:</p>
<pre><code>&gt;&gt;&gt; occurences = count_occurences(nested_colours)
&gt;&gt;&gt; print(occurences)
defaultdict(&lt;class 'int'&gt;, {'Black': 3, 'Blue': 6, 'White': 4, 'Red': 5, 'Green': 5})
</code></pre>
<p>Then get the max with simply <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a>:</p>
<pre><code>&gt;&gt;&gt; print(max(occurences.items(), key = itemgetter(1)))
('Blue', 6)
</code></pre>
</div>
<span class="comment-copy">Don't be shy, you will love Counter.</span>
<span class="comment-copy">Im interested to see how it works. I mean it was able to pull out the counts by color. Just need to display the max only</span>
<span class="comment-copy">I need help now with a NoneType not iterable error</span>
<span class="comment-copy">It works whenever I use Mythic Rare but not when i use Uncommon</span>
<span class="comment-copy">I used this approach and when I ran it, it have be NoneType not iterable? any thoughts?</span>
<span class="comment-copy">Didnt mean to use the second if statement, it is supposed to be if newCard.get_colors!="None"</span>
