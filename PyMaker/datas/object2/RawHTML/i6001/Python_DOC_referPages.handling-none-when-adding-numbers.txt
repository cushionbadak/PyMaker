<div class="post-text" itemprop="text">
<p>I would like to perform addition of 2 integers, which can also be None, with the following results:</p>
<pre><code>add(None, None) = None
add(None, b) = b
add(a, None) = a
add(a, b) = a + b
</code></pre>
<p>What is the most pythonic, concise expression for this?
So far I have:</p>
<pre><code>def add1(a, b):
    if a is None:
        return b
    elif b is None:
        return a
    else:
        return a + b
</code></pre>
<p>or</p>
<pre><code>def add2(a, b):
    try:
        return a + b
    except TypeError:
        return a if a is not None else b
</code></pre>
<p>Is there any shorter way to achieve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is reasonably compact and can handle different numbers of terms:</p>
<pre><code>def None_sum(*args):
    args = [a for a in args if not a is None]
    return sum(args) if args else None 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>With boolean logic:</h1>
<p>Here's a Pythonic method, using lazy <code>or</code>:</p>
<pre><code>def add(a, b):
    return (a or 0) + (b or 0)
</code></pre>
<h1>With filter</h1>
<p>For an arbitrary number of summands, you could use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>:</p>
<pre><code>def add(*p):
    return sum(filter(None, p))

print(add(3))
# 3
print(add(3, 5))
# 8
print(add(3, 5, 7))
# 15
print(add(3, None))
# 3
print(add(None))
# 0
print(add(None, 0))
# 0
</code></pre>
<h1>With an exception</h1>
<p>Note that the previous implementations will return <code>0</code> for <code>add(None, None)</code>. This is the expected mathematical result of an <a href="https://en.wikipedia.org/wiki/Empty_sum" rel="nofollow noreferrer">empty sum</a>.</p>
<p>Returning <code>None</code> is suprising and might lead to <code>TypeError</code>s when you use the output of <code>add</code>.</p>
<p>One way to achieve the desired behaviour when users don't input any valid summand is to throw an exception:</p>
<pre><code>def add(*p):
    summands = list(filter(None, p))
    if not summands:
        raise ValueError("There should be at least one defined value.")
    return sum(summands)

print(add(3))
# 3
print(add(3, 5))
# 8
print(add(3, 5, 7))
# 15
print(add(3, None))
# 3
print(add(None, 0))
# 0
print(add(0))
# 0
print(add(None))
# ValueError: There should be at least one defined value
print(add())
# ValueError: There should be at least one defined value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>def add(a,b):
    a = 0 if not a else a
    b = 0 if not b else b
    return a+b
</code></pre>
</div>
<span class="comment-copy">Both of the numbers can be either <code>int</code> or <code>None</code>. Also after this change it will incorrectly return None for (0, None)</span>
<span class="comment-copy">I believe that this is the general answer, well suited for this kind of problem. So I second this.</span>
<span class="comment-copy">I know it can be written this way when add(None, None) is expected to be 0, but it's not what I wanted.</span>
<span class="comment-copy">@michailgames: Just curious, why do you need it?</span>
<span class="comment-copy">I need to present the sum of numbers provided by users (which may be filled or not), if at least one of them is given, and act differently when none of them is provided yet (this is different case than 0).</span>
<span class="comment-copy">@michailgames: I'd say that you should throw an exception in that case.</span>
<span class="comment-copy">Generally, I agree with throwing an exception. But sometimes (e.g. when you need to process lots of data first, and then generate some sort of summary from it) interrupting a flow via exception is not an option.</span>
<span class="comment-copy">This does not satisfy add(None, None) = None</span>
