<div class="post-text" itemprop="text">
<p>I can see that <code>INCLUDE</code> path is <a href="https://docs.python.org/3/library/sysconfig.html#installation-paths" rel="nofollow noreferrer"><code>sysconfig.get_path('include')</code></a>.</p>
<p>But I don't see any similar value for <code>LIB</code>.</p>
<p>NumPy <a href="https://github.com/numpy/numpy/blob/master/numpy/core/setup.py#L70" rel="nofollow noreferrer">outright hardcodes it</a> as <code>os.path.join(sys.prefix, "libs")</code> in Windows and <code>get_config_var('LIBDIR')</code> (not documented and missing in Windows) otherwise.</p>
<p>Is there a more supported way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since it's not a part of any official spec/doc, and, <a href="https://stackoverflow.com/questions/47423246/get-pythons-lib-path/48360354#48360354">as shown by another</a> answer,  there are cases when none of appropriate variables from <code>sysconfig</code>/<code>distutils.sysconfig</code> <code>.get_config_var()</code> are set,</p>
<p>the only way to reliably get it in all cases, <em>exactly</em> as a build would (e.g. even for a Python in the sourcetree) is to delegate to the reference implementation.</p>
<p>In <code>distutils</code>, the logic that sets the library path for a compiler <a href="https://github.com/python/cpython/blob/master/Lib/distutils/command/build_ext.py#L175" rel="nofollow noreferrer">is located in <code>distutils.commands.build_ext.finalize_options()</code></a>. So, this code would get it with no side effects on the build:</p>
<pre><code>import distutils.command.build_ext    #imports distutils.core, too
d = distutils.core.Distribution()
b = distutils.command.build_ext.build_ext(d)  #or `d.get_command_class('build_ext')(d)',
                                              # then it's enough to import distutils.core
b.finalize_options()
print b.library_dirs
</code></pre>
<p>Note that:</p>
<ul>
<li>Not all locations in the resulting list necessarily exist.</li>
<li>If your <code>setup.py</code> is <code>setuptools</code>-based, use <code>setuptools.Distribution</code> and <code>setuptools.command.build_ext</code> instead, correspondingly.</li>
<li>If you pass any values to <code>setup()</code> that affect the result, you must pass them to <code>Distribution</code> here, too.</li>
</ul>
<p>Since there are no guarantees that the set of the additional values you need to pass will stay the same, or that the next maintainer won't switch to another builder<sup>1</sup>; and the value is only needed when building an extension,</p>
<ul>
<li>it seems like <em>you aren't really supposed to get this value independently at all</em>:

<ul>
<li>If you're using another build facility, you should rather subclass <code>build_ext</code> and get the value from the base method during the build.</li>
</ul></li>
</ul>
<hr/>
<p><sup>1</sup><sub>Okay, I concede this particular one is a rather remote possibility</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Below is the (rather long) <a href="https://github.com/scikit-build/scikit-build/blob/master/skbuild/cmaker.py#L272" rel="nofollow noreferrer">subroutine in <code>skbuild.cmaker</code></a> that locates <code>libpythonxx.so</code>/<code>pythonxx.lib</code> for the running Python. In CMake, 350-line <a href="https://github.com/Kitware/CMake/blob/master/Modules/FindPythonLibs.cmake" rel="nofollow noreferrer"><code>Modules/FindPythonLibs.cmake</code></a> is dedicated to this task.</p>
<p>The part of the former that gets just the directory is much simpler though:</p>
<pre><code>libdir = dustutils.sysconfig.get_config_var('LIBDIR')
if sysconfig.get_config_var('MULTIARCH'):
    masd = sysconfig.get_config_var('multiarchsubdir')
    if masd:
        if masd.startswith(os.sep):
            masd = masd[len(os.sep):]
        libdir = os.path.join(libdir, masd)

if libdir is None:
    libdir = os.path.abspath(os.path.join(
        sysconfig.get_config_var('LIBDEST'), "..", "libs"))
</code></pre>
<hr/>
<pre><code>def get_python_library(python_version):
    """Get path to the python library associated with the current python
    interpreter."""
    # determine direct path to libpython
    python_library = sysconfig.get_config_var('LIBRARY')

    # if static (or nonexistent), try to find a suitable dynamic libpython
    if (python_library is None or
            os.path.splitext(python_library)[1][-2:] == '.a'):

        candidate_lib_prefixes = ['', 'lib']

        candidate_extensions = ['.lib', '.so', '.a']
        if sysconfig.get_config_var('WITH_DYLD'):
            candidate_extensions.insert(0, '.dylib')

        candidate_versions = [python_version]
        if python_version:
            candidate_versions.append('')
            candidate_versions.insert(
                0, "".join(python_version.split(".")[:2]))

        abiflags = getattr(sys, 'abiflags', '')
        candidate_abiflags = [abiflags]
        if abiflags:
            candidate_abiflags.append('')

        # Ensure the value injected by virtualenv is
        # returned on windows.
        # Because calling `sysconfig.get_config_var('multiarchsubdir')`
        # returns an empty string on Linux, `du_sysconfig` is only used to
        # get the value of `LIBDIR`.
        libdir = du_sysconfig.get_config_var('LIBDIR')
        if sysconfig.get_config_var('MULTIARCH'):
            masd = sysconfig.get_config_var('multiarchsubdir')
            if masd:
                if masd.startswith(os.sep):
                    masd = masd[len(os.sep):]
                libdir = os.path.join(libdir, masd)

        if libdir is None:
            libdir = os.path.abspath(os.path.join(
                sysconfig.get_config_var('LIBDEST'), "..", "libs"))

        candidates = (
            os.path.join(
                libdir,
                ''.join((pre, 'python', ver, abi, ext))
            )
            for (pre, ext, ver, abi) in itertools.product(
                candidate_lib_prefixes,
                candidate_extensions,
                candidate_versions,
                candidate_abiflags
            )
        )

        for candidate in candidates:
            if os.path.exists(candidate):
                # we found a (likely alternate) libpython
                python_library = candidate
                break

    # TODO(opadron): what happens if we don't find a libpython?

    return python_library
</code></pre>
</div>
