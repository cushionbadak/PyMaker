<div class="post-text" itemprop="text">
<p>I am trying to send a value over serial port. I am unsure how to convert it into the correct format. I tried bin() for binary and format() but it didn't work. </p>
<pre><code>result = 2
ser.open()
ser.write(b'1')
time.sleep(3)

ser.write(result)                 # wrong format
ser.write("{0:b}".format(result)) # TypeError: unicode strings
                                  # are not supported, please
                                  # encode to bytes: '10'
</code></pre>
<p>The first write operation sends '1' as binary string. Now I want the variable to be send as binary string as well.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>write()</code> requires a bytes object.</p>
<pre><code>&gt;&gt;&gt; help(serial.Serial.write)
Help on function write in module serial.serialwin32:

write(self, data)
    Output the given byte string over the serial port.
</code></pre>
<p>To convert an integer to bytes, call <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>int.to_bytes()</code></a>.</p>
<pre><code>&gt;&gt;&gt; result = 2
&gt;&gt;&gt; b = result.to_bytes(4, 'little')
&gt;&gt;&gt; b
b'\x02\x00\x00\x00'
&gt;&gt;&gt; # to convert back to an integer
&gt;&gt;&gt; int.from_bytes(b, 'little')
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like this :</p>
<pre><code>import binascii

def write(num):
    pack = binascii.unlexlify("%04X"%num)
    ser.write(pack)
</code></pre>
<blockquote>
<p>Important point: Which number system used on device (8,16,32,64 bit) ?</p>
<p>8 Bit = 1 Byte(0-255) </p>
<p>16Bit = 2 Byte(0-65535) </p>
<p>32Bit = 4 Byte(like upside)(0-4294967295) </p>
<p>All ranges are <code>UNSIGNED</code>(look up), but <code>float</code>
  got extra definition !</p>
</blockquote>
<p>You can't type binary <code>1</code> value with keyboard :</p>
<p><code>binascii.unlexlify("%01X"%1)</code> so equal to <code>\x01</code> (of course you can use <code>struct</code> package)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>write()</code> method accepts a string parameter. You can convert <code>result</code> to string with <code>str()</code> builtin function like this.</p>
<p><code>result = str(result)</code></p>
<h1><strong>Python 2:</strong></h1>
<pre><code>result = 2
ser.open()
ser.write(b'1')
time.sleep(3)

ser.write(str(result))
</code></pre>
<h1><strong>Python 3:</strong></h1>
<p>You have to encode string in bytes.</p>
<pre><code>result = 2
ser.open()
ser.write(b'1')
time.sleep(3)

ser.write(str(result).encode('utf-8'))
</code></pre>
</div>
<span class="comment-copy">It is called bytes string. <code>write()</code> method accept a bytes string parameter, not a binary representation string parameter. Posting module you are using would help a lot but forget about it.</span>
<span class="comment-copy">In Python 3 strings are different to bytes. OP's code strongly implies he's only Python 3.</span>
<span class="comment-copy">@Reti43 I do not understand you. In Python 3, string is Unicode by default. OP wants just to write string representation of variable. OP does not want to pack integer in bytes, he wants to write it as string.</span>
<span class="comment-copy">Read the error properly. The function does <b>not</b> accept a string object, but a bytes object. <code>TypeError: unicode strings are not supported, please encode to bytes: '10'</code></span>
<span class="comment-copy">@Reti43 1. OP do not imply he is using Python 3. It may be Python 2 too with <code>from future import unicode</code>. 2. It does not make sense to convert <code>result</code> to string representation of bits in bytes. 3. I will update answer for Python 3 too.</span>
<span class="comment-copy">Regardless of whether he's using Python 3, or unicode in Python 2, whch I'll grand you, the underlying point was that you were suggesting a solution with strings when the function (regardless of Python version) explicitly disliked. At least you've addressed that now, so your answer is good. While it's only a minor detail, your answer is somewhat unorthodox because it converts a number into a string and converts that to bytes. An integer with 5 digits will end up having 5 bytes. It's just more direct to translate a number straight to its bytes representation, but that's nitpicking.</span>
