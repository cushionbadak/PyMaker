<div class="post-text" itemprop="text">
<p>I am a beginner of Python and would like to do some word filtering (extracting only items in 'keyword' list that exist in 'whitelist').</p>
<p>Here is my code so far:</p>
<pre><code>whitelist = ['Cat', 'Dog', 'Cow']
keyword = ['Cat, Cow, Horse', 'Bird, Whale, Dog', 'Pig, Chicken', 'Tiger, Cat']
keyword_filter = []

for word in whitelist:
    for i in range(len(keyword)):
        if word in keyword[i]:
            keyword_filter.append(word)
        else: pass
</code></pre>
<p>I want to remove every word except for 'Cat', 'Dog', and 'Cow' (which are in the 
'whitelist') so that the result ('keyword_filter' list) will look like this:</p>
<pre><code>['Cat, Cow', 'Dog', '', 'Cat']
</code></pre>
<p>However, I got the result something like this:</p>
<pre><code>['Cat', 'Cat', 'Dog', 'Cow']
</code></pre>
<p>I would sincerely appreciate if you can give some advice.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to split the strings in the list and check if word in the split is contained in the whitelist. Then <strong>rejoin</strong> all words in the whitelist after filtering:</p>
<pre><code>whitelist = {'Cat', 'Dog', 'Cow'}
filtered = []
for words in keyword:
    filtered.append(', '.join(w for w in words.split(', ') if w in whitelist))

print(filtered)
# ['Cat, Cow', 'Dog', '', 'Cat']
</code></pre>
<p>Better to make <code>whitelist</code> a set to improve the performance for lookup of each word.</p>
<p>You could also use <code>re.findall</code> to <strong>find all</strong> parts of each word matching strings contained in the whitelist, and then <strong>rejoin</strong> after finding the matches:</p>
<pre><code>import re

pattern = re.compile(',?\s?Cat|,?\s?Dog|,?\s?Cow')
filtered = [''.join(pattern.findall(words))) for words in keyword]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this.. </p>
<pre><code>whitelist = ['Cat', 'Dog', 'Cow']
keyword = ['Cat, Cow, Horse', 'Bird, Whale, Dog', 'Pig, Chicken', 'Tiger, Cat']
keyword_filter = []

for word in keyword:
    whitelistedWords = []
    for w in word.split(', '):
        if w in whitelist:
            whitelistedWords.append(w)
            #print whitelistedWords
    keyword_filter.append( ', '.join(whitelistedWords) )

print keyword_filter
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple list comprehension:</p>
<pre><code>whitelist = ['Cat', 'Dog', 'Cow']
keyword = ['Cat, Cow, Horse', 'Bird, Whale, Dog', 'Pig, Chicken', 'Tiger, Cat']
keyword_filter = [', '.join(w for w in k.split(', ') if w in whitelist) for k in keyword]

print(keyword_filter)
</code></pre>
<p>The output:</p>
<pre><code>['Cat, Cow', 'Dog', '', 'Cat']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to preserve the order of your keyword list, you'll want to have that as the outermost loop.</p>
<p><code>for phrase in keyword:</code></p>
<p>Now you need to split up the phrase into its actual words and determine if those words are in the whitelist. Then you need to put the words back together. You can do this in one line.</p>
<pre><code>   filtered = ", ".join(word in phrase.split(", ") if word in whitelist)
</code></pre>
<p>Breakdown: <a href="https://www.tutorialspoint.com/python/string_split.htm" rel="nofollow noreferrer"><code>phrase.split(", ")</code></a> gives you a list of strings that were separated by ", " in the original string -- i.e. the words you care about. <code>word in ... if word in whitelist</code> is a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. It will return a list of each word in <code>...</code>, in this case <code>phrase.split</code>, that meets the condition <code>word in whitelist</code>. Finally, <a href="https://www.tutorialspoint.com/python/string_join.htm" rel="nofollow noreferrer"><code>", ".join(...)</code></a> gives you a string made up of every element in the list <code>...</code> connected by ", ".</p>
<p>Lastly, you need to put the newly filtered string into your list of filtered strings.</p>
<pre><code>   keyword_filter.append(filtered)
</code></pre>
<p>As a sidenote, I agree with others that you should use a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a> for your collection of whitelisted words. It has much faster lookup time. However, for a miniscule list of words like this example you won't notice a performance difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use regex:</p>
<pre><code>import re

whitelist = ['Cat', 'Dog', 'Cow']
keyword = ['Cat, Cow, Horse', 'Bird, Whale, Dog', 'Pig, Chicken', 'Tiger, Cat']
keyword_filter = []

for words in keyword:
    match = re.findall('(' + r'|'.join(whitelist) + ')[,\s]*', words)
    keyword_filter.append(', '.join(match))
print(keyword_filter)
</code></pre>
</div>
<span class="comment-copy">Yes I need the result  ['Cat, Cow', 'Dog', '', 'Cat'] in order. Sorry for not mentioning it.</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre  That won't work. The words are strings separated by commas :)</span>
<span class="comment-copy">Thank you a lot. I really appreciate your help. Thank you all others as well. You guys are the best!</span>
