<div class="post-text" itemprop="text">
<p>I have noticed that <code>argparse</code> uses a rather "mystic" way of creating the variables in the parser. I know that the names of the variables are usually easy to <a href="https://docs.python.org/3/library/argparse.html#dest" rel="nofollow noreferrer">infer</a>:
it's the stripped version of long or short option (without the <code>--</code> or <code>-</code> respectively).</p>
<p>Also all hyphens (<code>-</code>) becomes underscores (<code>_</code>) to become legal variable names.</p>
<p>But that leaves me with a question about conflicting cases (I know it's an extreme case but the inferring part it's a bit mysterious to me). For example the program:</p>
<pre><code>import argparse
parser = argparse.ArgumentParser(description="A simple test about var names")
parser.add_argument("--max-value", type=int, help="the maximum value", metavar="Maximum-value")
parser.add_argument("-m", "--max_value", action="store_true", help="Whether to the use maximum value", dest="max1")
args = parser.parse_args()
print("max_value {}".format(args.max1))
print("max-value {}".format(args.max_value))
</code></pre>
<p>uses apparently two very similar options (<code>--max-value</code> and <code>--max_value</code>) which lead to the same inferred variable <code>max_value</code>. If either of the options was missing the variable would be <code>max_value</code> without ambiguity.</p>
<p>But when both are present, apparently <code>--max_value</code> gets the trophy variable <code>max_value</code> and the second one (<code>--max-value</code>) gets what? I haven't been able to find what's the second variable. </p>
<p>So, to access it I must define a variable explicitly with <code>dest</code> option? How do I get list of the names of variables available? The funny thing is that if I use <code>dest=</code> for the <code>--max_value</code> option then <code>--max-value</code> gets the expected variable <code>max_value</code> while <code>--max_value</code> gets the non inferred one (in my case <code>max1</code>)!</p>
<p>I know also that <a href="https://docs.python.org/3/library/argparse.html#metavar" rel="nofollow noreferrer">metavar</a> has nothing to do with the actual variable name but only affects the display in help.</p>
<p>Edit:</p>
<p>Adding some information from the @Martijn Pieters answer:</p>
<p>If I am getting it write if no <code>dest</code> is applied the parser follows the general rule which states that an implicit <code>dest</code> is applied. The same in my case <code>dest="max_value"</code>.</p>
<p>So, </p>
<pre><code>parser.add_argument("--max-value", type=int, help="the maximum value")
</code></pre>
<p>is exactly the same as:</p>
<pre><code>parser.add_argument("--max-value", type=int, help="the maximum value", dest="max_value")
</code></pre>
<p>internally.</p>
<p>But, then the following code snippets should produce different results which it does not:</p>
<pre><code># parserv1.py
import argparse
parser = argparse.ArgumentParser(description="A simple test about var names")
parser.add_argument("-m", "--max_value", action="store_true", help="Whether to the use maximum value", dest="max_value")
parser.add_argument("--max-value", type=int, help="the maximum value", metavar="Maximum-value", dest="max_value")
args = parser.parse_args()
print("max-value {}".format(args.max_value))

&gt;&gt;&gt;python parserv1.py -m --max-value 3
</code></pre>
<blockquote>
<p>max-value 3</p>
</blockquote>
<pre><code># parserv2.py
import argparse
parser = argparse.ArgumentParser(description="A simple test about var names")
parser.add_argument("--max-value", type=int, help="the maximum value", metavar="Maximum-value", dest="max_value")
parser.add_argument("-m", "--max_value", action="store_true", help="Whether to the use maximum value", dest="max_value")
args = parser.parse_args()
print("max-value {}".format(args.max_value))

&gt;&gt;&gt;python parserv1.py -m --max-value 3
</code></pre>
<blockquote>
<p>max-value 3</p>
</blockquote>
<p>Both just print the value of <code>max_value</code> as <code>int</code> independently of the order they are declared.</p>
<p>So, <code>int</code> option have higher precedence than binary (i.e. flags)? Are option types important in these cases?</p>
<p>P.S. 
I am using python 3.6.3 and since it might be a version issue I wanted to mention it.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no conflict here; for both <code>--max-value</code> and <code>--max_value</code>, the library simply generates the <em>exact same destination name</em>. Multiple options writing to the same <code>dest</code> destination name is perfectly valid; the last option used on the command line wins in that case:</p>
<pre><code>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument("--option1", dest="foo")
_StoreAction(option_strings=['--option1'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.add_argument("--option2", dest="foo")
_StoreAction(option_strings=['--option2'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args(['--option2', 'bar', '--option1', 'baz'])
Namespace(foo='baz')
</code></pre>
<p>Here <code>--option1 baz</code> wins because <code>--option1</code> was used last on the command line.</p>
<p>Note that any defaults are applied before command-line parsing; the <em>first</em> registered option default value wins. Then the command-line is parsed and if only <em>one</em> of the options is used, then naturally the action associated with that option wins.</p>
<p>It is up to you to pick non-conflicting destination names. Not picking option strings that are easy to confuse is also a good idea.</p>
<p>If you were looking for a formal set of rules on what <code>dest</code> name is generated for a given optional argument, see the <a href="https://docs.python.org/3/library/argparse.html#dest" rel="nofollow noreferrer"><code>dest</code> option documenation</a>:</p>
<blockquote>
<p>For optional argument actions, the value of <code>dest</code> is normally inferred from the option strings. <code>ArgumentParser</code> generates the value of dest by taking the first long option string and stripping away the initial <code>--</code> string. If no long option strings were supplied, <code>dest</code> will be derived from the first short option string by stripping the initial <code>-</code> character. Any internal <code>-</code> characters will be converted to <code>_</code> characters to make sure the string is a valid attribute name.</p>
</blockquote>
<hr/>
<p>Multiple options all writing to the same <code>dest</code> destination name is useful for supporting old, deprecated names for a given option:</p>
<pre><code>parser.add_argument('-n', '--new', dest='new', help="New hotness option")
# old name for the new hotness option, now deprecated but still supported
# argparse.SUPPRESS ensures it is no longer listed in the help output
parser.add_argument('-o', '--old', dest='new', help=argparse.SUPPRESS)
</code></pre>
<p>So using <code>-o</code> or <code>--old</code> on the command line has the exact same effect as using <code>-n</code> or <code>--new</code>; the same destination name is set on the namespace.</p>
</div>
<span class="comment-copy">I would appreciate also to get a reason for downvoting also</span>
<span class="comment-copy"><code>python parserv1.py</code> (without args) gives different results (default) depending on the order in which the Actions are defined.</span>
<span class="comment-copy">Yeah, indeed. It seem that the first defined gets the variable in that case.</span>
<span class="comment-copy">Additional info: If the arguments have default values, but none is specified, the first wins (even if its default value is None).</span>
<span class="comment-copy">@YSelf: indeed; the search for a default for a given <code>dest</code> stops at the first matching action, in order of registration.</span>
<span class="comment-copy">So, how does this answer my question of how is the conflict resolved? What's the second variable name in that case?</span>
<span class="comment-copy">@Eypros: I state at the top of my answer: <i>The library simply generates the exact same destination name</i></span>
<span class="comment-copy">@Eypros: ugh. The code is rather complex, and I was tired and misread. Defaults are applied in registration order (first action wins), command-line options are applied in the order they are listed on the command line (last option on the command-line wins).</span>
