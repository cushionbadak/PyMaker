<div class="post-text" itemprop="text">
<p>I have to compare two directories with .xyz files in them. One directory has original files (names xa02-1-1-1-1, xa02-1-1-1-2 etc.). I process all these files (molecules) and each file gives rise to 3 new files whose file names just have -1, -2, -3 added at the end. (e.g., <em>xa02-1-1-1-1</em> would give rise to <em>xa02-1-1-1-1-1</em>, <em>xa02-1-1-1-1-2</em>, and <em>xa02-1-1-1-1-3</em>). During this operation some files just produce two new files and don't produce the 3rd or some produce just one new file and some even do not produce any output. I want to compare first folder with the new one seeing which files have not generated 3 new files. Basically I want t list of the files in the first folder which did not give rise to 3 new files.
I did not find how to do it with Python so I printed all the filenames using bash without the extensions. Now I have two text files with all the filenames and I compare those two text files. I am trying to remove the last -1, -2, -3 from the new list and see if an item in original file is present in the new list less than 3 times. The code still gives me count 1 for all the files.
Can anyone please guide me on that how to do it efficiently using Python. I need this for my PhD research as doing this manually takes days just to compare two folders because of lots of files (molecules) in them.
Here is the code I wrote:</p>
<pre><code># Define the lists which contain the filenames to compare
originals = "orig-files.txt"
next_step_filenames = "new-files.txt"

def read_input_file(input_filename):
    f = open(input_filename, 'r')
    fr = f.readlines()
    f.close()
    return fr
# Read the files with filenames and without extensions
original_files = read_input_file(originals)  
next_step_files = read_input_file(next_step_filenames) 

original_files_trimmed = []  # Removing the last \n from every line
for a in original_files:
    original_files_trimmed.append(a[:-1])

next_step_files_trimmed = []  # A list with the last -1, -2, -3 removed
for i in next_step_files:
    next_step_files_trimmed.append(i[:-3])

Final_list = [] # List for Files who generate &lt;3 files 
for m in original_files_trimmed:
    for n in next_step_files_trimmed:
        count = 0
        if m in n:
            count =+ 1
            if count &lt; 3:
                Final_list.append(m)

for b in Final_list:
    print(b)
</code></pre>
<p>And here are the files with names in them.
<strong>orig-files.txt</strong></p>
<pre><code>xa02-1-1-1-1
xa02-1-1-1-2
xa02-1-1-2-3
xa02-1-3-3-3
xa06-3-1-2-1
xa07-1-2-1-1
</code></pre>
<p><strong>new-files.txt</strong></p>
<pre><code>xa02-1-1-1-1-1
xa02-1-1-1-1-2
xa02-1-1-1-1-3
xa02-1-1-1-2-1
xa02-1-1-1-2-2
xa02-1-1-1-2-3
xa02-1-1-2-3-1
xa02-1-3-3-3-1
xa02-1-3-3-3-2
xa06-3-1-2-1-1
xa06-3-1-2-1-2
xa06-3-1-2-1-3
</code></pre>
<p>You can see in the files that <em>xa02-1-1-2-3</em> and <em>xa02-1-3-3-3</em> generate 1 and 2 files, respectively while <em>xa07-1-2-1-1</em> did not generate any output file. I want the output to look like this:</p>
<pre><code>xa02-1-1-2-3   1
xa02-1-3-3-3   2
xa07-1-2-1-1   0
</code></pre>
<p>Please help me here. I would be highly thankful for any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>Counter</code> to count occurrence of filename having trimmed away the last 2 characters.
The resulting counter object can be used to filter <code>original_files_trimmed</code> where items don't count up to 3.</p>
<h3>Example:</h3>
<pre><code>from collections import Counter

original_files_trimmed = [
  'xa02-1-1-1-1',
  'xa02-1-1-1-2',
  'xa02-1-1-2-3',
  'xa02-1-3-3-3',
  'xa06-3-1-2-1',
  'xa07-1-2-1-1',
]
next_step_files_trimmed = [
  'xa02-1-1-1-1-1',
  'xa02-1-1-1-1-2',
  'xa02-1-1-1-1-3',
  'xa02-1-1-1-2-1',
  'xa02-1-1-1-2-2',
  'xa02-1-1-1-2-3',
  'xa02-1-1-2-3-1',
  'xa02-1-3-3-3-1',
  'xa02-1-3-3-3-2',
  'xa06-3-1-2-1-1',
  'xa06-3-1-2-1-2',
  'xa06-3-1-2-1-3'
]

# These next few lines diff original_files_trimmed and 
# next_step_files_trimmed using the defined rules
next_step_files_without_num = (n[:-2] for n in next_step_files_trimmed) ## trim last 2 chars    
next_step_files_without_num_cnt = Counter(next_step_files_without_num)
final_list = [
   m for m in original_files_trimmed 
   if next_step_files_without_num_cnt[m] &lt; 3
]

print(final_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one implementation:</p>
<pre><code>def updateHash(d, key):
    if key not in d.keys():
        d[key] = 3
    else:
        d[key] -= 1

originals = "orig-files.txt"
next_step_filenames = "new-files.txt"

originals_list = []
with open(originals, 'r') as f:
    originals_list = f.read().splitlines()

next_step_list = []
with open(next_step_filenames, 'r') as f:
    next_step_list = f.read().splitlines()

expected_list = []
d = {}
for orig in originals_list:
    if orig + '-1' not in next_step_list:
        updateHash(d, orig)
    if orig + '-2' not in next_step_list:
        updateHash(d, orig)
    if orig + '-3' not in next_step_list:
        updateHash(d, orig)

print d
</code></pre>
</div>
<span class="comment-copy">And to get the file names without hard coding them or putting them in a file first, you can use <a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer"><code>os.listdir()</code></a> or <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer"><code>glob.glob()</code></a>.</span>
<span class="comment-copy">Yeah, <code>os.listdir</code> is a better way to go if looking one-level in the directory.</span>
<span class="comment-copy">Thank you so much @Oluwafemi Sule and @Blurp. Real quick help. Appreciate it. I'll use <code>os.listdir()</code> which is way more convenient than the method I used.</span>
<span class="comment-copy">Thanks @Nish for your kind help. Can I please ask you to explain little this <code>updateHash</code> function as I could not completely get it. And also can I print it in column form at the end rather than printing in one row?</span>
