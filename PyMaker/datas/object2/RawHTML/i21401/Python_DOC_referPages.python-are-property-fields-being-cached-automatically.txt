<div class="post-text" itemprop="text">
<p>My question is are the following two pieces of code run the same by the interpreter:</p>
<pre><code>class A(object):
  def __init__(self):
     self.__x = None

  @property
  def x(self):
     if not self.__x:
        self.__x = ... #some complicated action
     return self.__x
</code></pre>
<p>and the much simpler:</p>
<pre><code>class A(object):
  @property
  def x(self):
      return ... #some complicated action
</code></pre>
<p>I.e., is the interpreter smart enough to cache the property <code>x</code>?</p>
<p>My assumption is that <code>x</code> does not change - finding it is <em>hard</em>, but once you find it once there is no reason to find it again. </p>
</div>
<div class="post-text" itemprop="text">
<p>No, the getter will be called every time you access the property.</p>
</div>
<div class="post-text" itemprop="text">
<p>No you need to add a <a href="http://wiki.python.org/moin/PythonDecoratorLibrary">memoize</a> decorator:</p>
<pre><code>class memoized(object):
   """Decorator that caches a function's return value each time it is called.
   If called later with the same arguments, the cached value is returned, and
   not re-evaluated.
   """
   def __init__(self, func):
      self.func = func
      self.cache = {}
   def __call__(self, *args):
      try:
         return self.cache[args]
      except KeyError:
         value = self.func(*args)
         self.cache[args] = value
         return value
      except TypeError:
         # uncachable -- for instance, passing a list as an argument.
         # Better to not cache than to blow up entirely.
         return self.func(*args)
   def __repr__(self):
      """Return the function's docstring."""
      return self.func.__doc__
   def __get__(self, obj, objtype):
      """Support instance methods."""
      return functools.partial(self.__call__, obj)

@memoized
def fibonacci(n):
   "Return the nth fibonacci number."
   if n in (0, 1):
      return n
   return fibonacci(n-1) + fibonacci(n-2)

print fibonacci(12)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Properties do not automatically cache their return values. The getter (and setters) are intended to be called each time the property is accessed. </p>
<p>However, <a href="https://stackoverflow.com/users/168352/denis-otkidach">Denis Otkidach</a> has written a wonderful cached attribute decorator (published in <a href="http://shop.oreilly.com/product/9780596007973.do" rel="noreferrer">the Python Cookbook, 2nd edition</a> and also originally on <a href="http://code.activestate.com/recipes/276643-caching-and-aliasing-with-descriptors/" rel="noreferrer">ActiveState</a> under the <a href="https://en.wikipedia.org/wiki/Python_Software_Foundation_License" rel="noreferrer">PSF license</a>) for just this purpose:</p>
<pre><code>class cache(object):    
    '''Computes attribute value and caches it in the instance.
    Python Cookbook (Denis Otkidach) https://stackoverflow.com/users/168352/denis-otkidach
    This decorator allows you to create a property which can be computed once and
    accessed many times. Sort of like memoization.

    '''
    def __init__(self, method, name=None):
        # record the unbound-method and the name
        self.method = method
        self.name = name or method.__name__
        self.__doc__ = method.__doc__
    def __get__(self, inst, cls):
        # self: &lt;__main__.cache object at 0xb781340c&gt;
        # inst: &lt;__main__.Foo object at 0xb781348c&gt;
        # cls: &lt;class '__main__.Foo'&gt;       
        if inst is None:
            # instance attribute accessed on class, return self
            # You get here if you write `Foo.bar`
            return self
        # compute, cache and return the instance's attribute value
        result = self.method(inst)
        # setattr redefines the instance's attribute so this doesn't get called again
        setattr(inst, self.name, result)
        return result
</code></pre>
<p>Here is an example demonstrating its use:</p>
<pre><code>def demo_cache():
    class Foo(object):
        @cache
        def bar(self):
            print 'Calculating self.bar'  
            return 42
    foo=Foo()
    print(foo.bar)
    # Calculating self.bar
    # 42
    print(foo.bar)    
    # 42
    foo.bar=1
    print(foo.bar)
    # 1
    print(Foo.bar)
    # __get__ called with inst = None
    # &lt;__main__.cache object at 0xb7709b4c&gt;

    # Deleting `foo.bar` from `foo.__dict__` re-exposes the property defined in `Foo`.
    # Thus, calling `foo.bar` again recalculates the value again.
    del foo.bar
    print(foo.bar)
    # Calculating self.bar
    # 42

demo_cache()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.2 onwards offers a built-in decorator that you can use to create a LRU cache:</p>
<p><a href="https://docs.python.org/dev/library/functools.html#functools.lru_cache" rel="noreferrer"><code>@functools.lru_cache(maxsize=128, typed=False)</code></a></p>
<p>Alternatively, if you're using Flask / Werkzeug, there's the <a href="http://werkzeug.pocoo.org/docs/0.11/utils/#werkzeug.utils.cached_property" rel="noreferrer"><code>@cached_property</code></a> decorator.</p>
<p>For Django, try <code>from django.utils.functional import cached_property</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The decorator from Denis Otkidach mentioned in @unutbu's answer was published in O'Reilly's Python Cookbook. Unfortunately O'Reilly doesn't specify any license for code examples â€“ just as informal permission to reuse the code.</p>
<p>If you need a cached property decorator with a liberal license, you can use <a href="http://code.activestate.com/recipes/users/4167995/" rel="nofollow">Ken Seehof</a>'s <code>@cached_property</code> from <a href="http://code.activestate.com/recipes/576563-cached-property/" rel="nofollow">ActiveState code recipes</a>. It's explicitly published under the <a href="http://code.activestate.com/recipes/tags/meta%3alicense=mit/" rel="nofollow">MIT license</a>.</p>
<pre><code>def cached_property(f):
    """returns a cached property that is calculated by function f"""
    def get(self):
        try:
            return self._property_cache[f]
        except AttributeError:
            self._property_cache = {}
            x = self._property_cache[f] = f(self)
            return x
        except KeyError:
            x = self._property_cache[f] = f(self)
            return x

    return property(get)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've had to look it up, since I had this same question.</p>
<p>The <a href="https://docs.python.org/3.8/library/functools.html#functools.cached_property" rel="nofollow noreferrer">functools package</a> from the standard library will be getting a cached_property decorator as well. Unfortunately, it's only available from Python 3.8 (as of time of this post, it's 3.8a0). The alternative to waiting is to use a custom one, such as <a href="https://github.com/pydanny/cached-property" rel="nofollow noreferrer">this one as mentioned by 0xc0de</a>) or Django's, for now, then switch later:</p>
<pre><code>from django.utils.functional import cached_property
# from functools import cached_property # Only 3.8+ :(
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note: Adding for the sake of completeness of available options.</p>
<p>No, <code>property</code> is not cached by default. However there are several options to get that behaviour, I would like to add one more to that:</p>
<p><a href="https://github.com/pydanny/cached-property" rel="nofollow noreferrer">https://github.com/pydanny/cached-property</a></p>
</div>
<span class="comment-copy">memoize decorator is probably overkill for a simple python property.</span>
<span class="comment-copy">Also note that meanwhile, there's the <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache(maxsize=128, typed=False)</code></a> decorator (which also permits a <code>maxsize=None</code> parameter)</span>
<span class="comment-copy">Also available in Django <code>from django.utils.functional import cached_property</code></span>
<span class="comment-copy">Additionally, if you are working on a Django project you can import <code>@cached_property</code> from <code>django.utils.functional</code>.</span>
