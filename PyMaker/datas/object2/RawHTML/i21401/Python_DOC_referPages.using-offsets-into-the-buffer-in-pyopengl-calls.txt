<div class="post-text" itemprop="text">
<p>In OpenGL the <em><code>indices</code></em> parameter for <a href="http://pyopengl.sourceforge.net/documentation/manual/glDrawElements.3G.html" rel="nofollow"><code>glDrawElements</code></a> has two different meanings, depending on if you are using <code>GL_ELEMENT_ARRAY_BUFFER</code> or not.</p>
<p>If you have a VBO bound, then it is the offset to start in that buffer, rather than the buffer itself.</p>
<p>When using PyOpenGL, how can you specify the offset to start at in a <code>glDrawElements</code> call?  How can you specify multiple start offsets in a <code>glMultiDrawElements</code> call?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the following examples a list of 6 indices is used, which may form a quad which consists of 2 triangle primitives.</p>
<pre class="lang-py prettyprint-override"><code>indices = [0, 1, 2, 0, 2, 3]
</code></pre>
<p>Since the data which is passed to the OpenGL functions has to consist of fixed size units in a coherent buffer, the list of values has to be stored to an array of floats.
Coherent array buffers can be created either by <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> library or <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.array.html" rel="nofollow noreferrer"><code>numpy.array</code></a> library.<br/>
The type of the array elements has to match value type enumerator constant, which is set, at the call of <code>glDrawElements</code> or <code>glMultiDrawElements</code>:</p>
<pre class="lang-none prettyprint-override"><code>ctypes.c_ubyte   /  numpy.uint8     &lt;-&gt;    GL_UNSIGNED_BYTE
ctypes.c_ushort  /  numpy.uint16    &lt;-&gt;    GL_UNSIGNED_SHORT
ctypes.c_uint    /  numpy.uint32    &lt;-&gt;    GL_UNSIGNED_INT
</code></pre>
<p>Using <code>ctypes</code>:</p>
<pre class="lang-py prettyprint-override"><code>import ctypes

indexArray = (ctypes.c_uint * 6)(*indices)
</code></pre>
<p>Using <code>numpy</code>:</p>
<pre class="lang-py prettyprint-override"><code>import numpy

indexArray = numpy.array(indices, dtype=numpy.uint32)
</code></pre>
<p>For using an index buffer and <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDrawElements.xhtml" rel="nofollow noreferrer"><code>glDrawElements</code></a> there are different opportunities.</p>
<p>Using <a href="https://www.khronos.org/opengl/wiki/Legacy_OpenGL" rel="nofollow noreferrer">Legacy OpenGL</a> (<a href="https://www.khronos.org/opengl/wiki/OpenGL_Context" rel="nofollow noreferrer">compatibility profile xontext</a>), the buffer can be directly passed to <code>glDrawElements</code>. The pointer to the array data is passed to the function.</p>
<pre class="lang-py prettyprint-override"><code>glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, indexArray)
</code></pre>
<p>If named element array buffer object is stated in the vertex array object, then the last parameter of <code>glDrawElements</code> is treated as a byte offset into the buffer object's data store.</p>
<pre class="lang-py prettyprint-override"><code>glBindVertexArray(vao)

glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo)
glBufferData(GL_ELEMENT_ARRAY_BUFFER, indexArray, GL_STATIC_DRAW)
</code></pre>
<p>If the indices should be drawn, starting at the 1st element of the buffer, then the last parameter can be <code>None</code>, which is equivalent to <code>ctypes.c_void_p(0)</code>: </p>
<pre class="lang-py prettyprint-override"><code>glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, None)
</code></pre>
<p>If the drawing should not start with the first index, then the byte offset of the start index has to be calculated. e.g. <code>3*4</code> sets the start to the 3 index, for a buffer of type <code>GL_UNSIGNED_INT</code>:</p>
<pre class="lang-py prettyprint-override"><code>glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, ctypes.c_void_p(3 * 4))
</code></pre>
<p>The use of <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glMultiDrawElements.xhtml" rel="nofollow noreferrer"><code>glMultiDrawElements</code></a> is very similar.</p>
<p>Using a <a href="https://www.khronos.org/opengl/wiki/OpenGL_Context" rel="nofollow noreferrer">compatibility profile xontext</a>, the buffer pointers can be directly passed to the OpenGL function.</p>
<p>To arrays of indices have to be generated:</p>
<p>Using <code>ctypes</code>:</p>
<pre class="lang-py prettyprint-override"><code>indexArray1 = (ctypes.c_uint * 3)(0, 1, 2)
indexArray2 = (ctypes.c_uint * 3)(0, 2, 3)
</code></pre>
<p>Using <code>numpy</code>:</p>
<pre class="lang-py prettyprint-override"><code>indexArray1 = numpy.array([0, 1, 2], dtype=numpy.uint32)
indexArray2 = numpy.array([0, 2, 3], dtype=numpy.uint32)
</code></pre>
<p>The pointers to the buffers have to be arranged to an array of pointers:</p>
<p>Using <code>ctypes</code> the pointer to the index data arrays is get by <a href="https://docs.python.org/3/library/ctypes.html#ctypes.addressof" rel="nofollow noreferrer"><code>ctypes.addressof()</code></a>:</p>
<pre class="lang-py prettyprint-override"><code>indexPtr = (ctypes.c_void_p * 2)(ctypes.addressof(indexArray1),ctypes.addressof(indexArray2))
</code></pre>
<p>Using <code>numpy</code> the pointer to the index data arrays is get by <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.ctypes.html" rel="nofollow noreferrer"><code>numpy.ndarray.ctypes</code></a>:</p>
<pre class="lang-py prettyprint-override"><code>indexPtr = numpy.array([indexArray1.ctypes.data, indexArray2.ctypes.data], dtype=numpy.intp)
</code></pre>
<p>This array of pointer can be passed to the OpenGL function:</p>
<pre class="lang-py prettyprint-override"><code>counts   = [3, 3]
glMultiDrawElements(GL_TRIANGLES, counts, GL_UNSIGNED_INT, indexPtr, 2)
</code></pre>
<p>If a vertex array object with an named element array buffer is used,</p>
<pre class="lang-py prettyprint-override"><code>glBindVertexArray(vao)
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo)
</code></pre>
<p>then the index parameter is treated as an array of byte offsets. In the following an array with 2 offset is passed to the function. 0 identifies the 1st index in the array and 3*4 the 3rd index.</p>
<p>Using <code>ctypes</code>:</p>
<pre class="lang-py prettyprint-override"><code>indexPtr = (ctypes.c_void_p * 2)(0, 3 * 4)
counts   = [3, 3]
glMultiDrawElements(GL_TRIANGLES, counts, GL_UNSIGNED_INT, indexPtr, 2)
</code></pre>
<p>Using <code>numpy</code>:</p>
<pre class="lang-py prettyprint-override"><code>indexPtr = np.array([0, 3*4], dtype=numpy.intp)
counts   = [3, 3]
glMultiDrawElements(GL_TRIANGLES, counts, GL_UNSIGNED_INT, indexPtr, 2)
</code></pre>
</div>
<span class="comment-copy">By the way, <code>GL_INDEX_ARRAY</code> has a completely different meaning (per vertex color indices). What you mean is <code>GL_ELEMENT_ARRAY_BUFFER</code></span>
<span class="comment-copy">yeah I make that typo a thousand times</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/11132716/how-to-specify-buffer-offset-with-pyopengl" title="how to specify buffer offset with pyopengl">stackoverflow.com/questions/11132716/â€¦</a></span>
