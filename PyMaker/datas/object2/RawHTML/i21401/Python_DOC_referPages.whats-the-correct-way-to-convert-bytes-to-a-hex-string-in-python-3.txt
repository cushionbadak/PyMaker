<div class="post-text" itemprop="text">
<p>What's the correct way to convert bytes to a hex string in Python 3?</p>
<p>I see claims of a <code>bytes.hex</code> method, <code>bytes.decode</code> codecs, and have tried <a href="http://docs.python.org/py3k/library/functions.html#hex" rel="noreferrer">other</a> possible functions of least astonishment without avail. I just want my bytes as hex!</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.5 this is finally no longer awkward:</p>
<pre><code>&gt;&gt;&gt; b'\xde\xad\xbe\xef'.hex()
'deadbeef'
</code></pre>
<p>and reverse:</p>
<pre><code>&gt;&gt;&gt; bytes.fromhex('deadbeef')
b'\xde\xad\xbe\xef'
</code></pre>
<p>works also with the mutable <code>bytearray</code> type.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>binascii</code> module:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify('foo'.encode('utf8'))
b'666f6f'
&gt;&gt;&gt; binascii.unhexlify(_).decode('utf8')
'foo'
</code></pre>
<p>See this answer:
<a href="https://stackoverflow.com/questions/2340319/python-3-1-1-string-to-hex/2340358#2340358">Python 3.1.1 string to hex</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Python has bytes-to-bytes <a href="http://docs.python.org/dev/library/codecs.html#binary-transforms">standard codecs</a> that perform convenient transformations like quoted-printable (fits into 7bits ascii), base64 (fits into alphanumerics), hex escaping, gzip and bz2 compression.  In Python 2, you could do:</p>
<pre><code>b'foo'.encode('hex')
</code></pre>
<p>In Python 3, <code>str.encode</code> / <code>bytes.decode</code> are strictly for bytes&lt;-&gt;str conversions. Instead, you can do this, which works across Python 2 and Python 3 (<em>s/encode/decode/g</em> for the inverse):</p>
<pre><code>import codecs
codecs.getencoder('hex')(b'foo')[0]
</code></pre>
<p>Starting with Python 3.4, there is a less awkward option:</p>
<pre><code>codecs.encode(b'foo', 'hex')
</code></pre>
<p>These misc codecs are also accessible inside their own modules (base64, zlib, bz2, uu, quopri, binascii); the API is less consistent, but for compression codecs it offers more control.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import codecs
codecs.getencoder('hex_codec')(b'foo')[0]
</code></pre>
<p>works in Python 3.3 (so "hex_codec" instead of "hex").</p>
</div>
<div class="post-text" itemprop="text">
<p>The method <code>binascii.hexlify()</code> will convert <code>bytes</code> to a <code>bytes</code> representing the ascii hex string. That means that each byte in the input will get converted to two ascii characters. If you want a true <code>str</code> out then you can <code>.decode("ascii")</code> the result. </p>
<p>I included an snippet that illustrates it. </p>
<pre><code>import binascii

with open("addressbook.bin", "rb") as f: # or any binary file like '/bin/ls'
    in_bytes = f.read()
    print(in_bytes) # b'\n\x16\n\x04'
    hex_bytes = binascii.hexlify(in_bytes) 
    print(hex_bytes) # b'0a160a04' which is twice as long as in_bytes
    hex_str = hex_bytes.decode("ascii")
    print(hex_str) # 0a160a04
</code></pre>
<p>from the hex string <code>"0a160a04"</code> to can come back to the <code>bytes</code> with <code>binascii.unhexlify("0a160a04")</code> which gives back <code>b'\n\x16\n\x04'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>OK, the following answer is slightly beyond-scope if you only care about Python 3, but this question is the first Google hit even if you don't specify the Python version, so here's a way that works on both Python 2 <em>and</em> Python 3.</p>
<p>I'm also interpreting the question to be about converting bytes to the <code>str</code> type: that is, bytes-y on Python 2, and Unicode-y on Python 3.</p>
<p>Given that, the best approach I know is:</p>
<pre><code>import six

bytes_to_hex_str = lambda b: ' '.join('%02x' % i for i in six.iterbytes(b))
</code></pre>
<p>The following assertion will be true for either Python 2 or Python 3, assuming you haven't activated the <code>unicode_literals</code> future in Python 2:</p>
<pre><code>assert bytes_to_hex_str(b'jkl') == '6a 6b 6c'
</code></pre>
<p>(Or you can use <code>''.join()</code> to omit the space between the bytes, etc.)</p>
</div>
<div class="post-text" itemprop="text">
<p>it can been used the format specifier <code>%x02</code> that format and output a hex value. For example:</p>
<pre><code>&gt;&gt;&gt; foo = b"tC\xfc}\x05i\x8d\x86\x05\xa5\xb4\xd3]Vd\x9cZ\x92~'6"
&gt;&gt;&gt; res = ""
&gt;&gt;&gt; for b in foo:
...     res += "%02x" % b
... 
&gt;&gt;&gt; print(res)
7443fc7d05698d8605a5b4d35d56649c5a927e2736
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to convert b'\x61' to 97 or '0x61', you can try this:</p>
<pre><code>[python3.5]
&gt;&gt;&gt;from struct import *
&gt;&gt;&gt;temp=unpack('B',b'\x61')[0] ## convert bytes to unsigned int
97
&gt;&gt;&gt;hex(temp) ##convert int to string which is hexadecimal expression
'0x61'
</code></pre>
<p>Reference:<a href="https://docs.python.org/3.5/library/struct.html" rel="nofollow noreferrer">https://docs.python.org/3.5/library/struct.html</a></p>
</div>
<span class="comment-copy">"without avail"?  What <b>specific</b> problems or errors are you getting?  Please show code and errors.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/2340319/python-3-1-1-string-to-hex" title="python 3 1 1 string to hex">stackoverflow.com/questions/2340319/python-3-1-1-string-to-hex</a></span>
<span class="comment-copy">Reference: <a href="https://docs.python.org/3/library/stdtypes.html#bytes.hex" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#bytes.hex</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#bytes.fromhex" rel="nofollow noreferrer"><code>bytes.fromhex()</code></a> is also available on Python 3.0+ (not just 3.5+). <code>bytes.hex()</code> is only on Python 3.5+.</span>
<span class="comment-copy">This is good. Mind boggling is that you can convert hex to bytes using bytes.fromhex(hex_str), but you cannot convert bytes to hex using bytes.tohex() - what is the rational in this?</span>
<span class="comment-copy">I guess the relationship between bytes and hex isn't a property of either (which doesn't answer why fromhex is there). Seems like it wasn't just an oversight but something that was argued over: <a href="http://bugs.python.org/issue3532#msg70950" rel="nofollow noreferrer">bugs.python.org/issue3532#msg70950</a>. Q: Would it hurt to have the tohex method of the bytes object to perform this task as well? A: IMO, yes, it would. It complicates the code, and draws the focus away from the proper approach to data conversion (namely, functions - not methods).</span>
<span class="comment-copy">Does this really answer the question? It doesn't return a hex <code>str</code> but a <code>bytes</code>. I know that the OP seems happy with the answer but won't be better to expand this answer to include <code>.decode("ascii")</code> also to convert it to a "string"</span>
<span class="comment-copy">I was thinking that many people land on this question/answer looking for a way to printout a <code>bytes</code>. If you <code>print(b'666f6f')</code> you get the <code>b</code> in the printout. If you <code>.decode("ascii")</code> then you don't. Just thinking on how those that actually had a <code>bytes</code> (true binary with items &gt; 128 , not an ascii string) an wanted to printout it.</span>
<span class="comment-copy">@nagylzs: there is <code>.hex()</code> method in Python 3.5+</span>
<span class="comment-copy">using python 3.3: <code>LookupError: unknown encoding: hex</code></span>
<span class="comment-copy">@JanusTroelsen: try <a href="http://stackoverflow.com/a/22465079/4279">'hex_codec'</a>. Or just use <code>binascii.hexlify(b'foo')</code> directly</span>
<span class="comment-copy">Perhaps interestingly, in Python 3.4 "hex" or "hex_codec" works fine.</span>
