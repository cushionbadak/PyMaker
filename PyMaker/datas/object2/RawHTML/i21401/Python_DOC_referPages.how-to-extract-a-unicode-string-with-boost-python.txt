<div class="post-text" itemprop="text">
<p>It seems that the code will crash when I do <code>extract&lt;const char*&gt;("a unicode string")</code> </p>
<p>Anyone know how to solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This compiles and works for me, <strong>with your example string</strong> and using Python 2.x:</p>
<pre><code>void process_unicode(boost::python::object u) {
  using namespace boost::python;
  const char* value = extract&lt;const char*&gt;(str(u).encode("utf-8"));
  std::cout &lt;&lt; "The string value is '"&lt;&lt; value &lt;&lt; "'" &lt;&lt; std::endl;
}
</code></pre>
<p>You can write <a href="http://misspent.wordpress.com/2009/09/27/how-to-write-boost-python-converters/" rel="nofollow">a specific from-python converter</a>, if you wish to auto-convert <code>PyUnicode</code> (@Python2.x) to <code>const wchar_t*</code> or to a type from <a href="http://userguide.icu-project.org/strings" rel="nofollow">ICU</a> (that seems to be the common recommendation for dealing with Unicode on C++).</p>
<p>If you want full support to unicode characters which are not in the ASCII range (for example, accented characters such as <code>á</code>, <code>ç</code> or <code>ï</code>, you <em>will need</em> to write the from-python converter. Note this will have to be done separately for Python 2.x and 3.x, if you wish to support both. For Python 3.x, the <a href="http://docs.python.org/3/howto/cporting.html" rel="nofollow">PyUnicode type was deprecated</a> and now the string type works as <code>PyUnicode</code> used to for Python 2.x. <strike>Nothing that a couple of <code>#if PY_VERSION_HEX &gt;= 0x03000000</code> cannot handle</strike>.</p>
<p><strong>[edit]</strong></p>
<p>The above comment was wrong. Note that, since Python 3.x treats unicode strings as normal strings, <code>boost::python</code> will wrap that into <code>boost::python::str</code> objects. I have not verified how those are handled w.r.t. unicode translation in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried   </p>
<pre><code>extract&lt;std::string&gt;("a unicode string").c_str() 
</code></pre>
<p>or </p>
<pre><code>extract&lt;wchar_t*&gt;(...)
</code></pre>
</div>
<span class="comment-copy">Don't have a definitive answer, but <a href="http://mail.python.org/pipermail/cplusplus-sig/2009-July/014720.html" rel="nofollow noreferrer">here</a> and <a href="http://mail.python.org/pipermail/cplusplus-sig/2009-July/014664.html" rel="nofollow noreferrer">here</a> I found some references that might be of interest to you</span>
<span class="comment-copy">Is this the error you are getting? "TypeError: No registered converter was able to extract a C++ pointer to type char from this Python object of type unicode." Could you give example code and/or give a idea of what you are trying to do?</span>
<span class="comment-copy">Can you clarify the question? It is really not clear. What is the argument you give to extract? Is it a literal string? A boost::python::object?</span>
<span class="comment-copy">You are supposed to accept the correct answer to your questions.</span>
