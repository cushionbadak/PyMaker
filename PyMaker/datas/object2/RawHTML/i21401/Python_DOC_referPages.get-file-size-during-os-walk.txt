<div class="post-text" itemprop="text">
<p>I am using <code>os.walk</code> to compare two folders, and see if they contain the exact same files.  However, this only checks the file names.  I want to ensure the file sizes are the same, and if they're different report back.  Can you get the file size from <code>os.walk</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The same way you get file size without using <code>os.walk</code>, with <code>os.stat</code>. You just need to remember to join with the root:</p>
<pre><code>for root, dirs, files in os.walk(some_directory):
    for fn in files:
        path = os.path.join(root, fn)
        size = os.stat(path).st_size # in bytes

        # ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>os.path.getsize(path) can give you the filesize of the file, but having two files the same size does not always mean they are identical. You could read the content of the file and have an MD5 or Hash of it to compare against.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have said: you can get the size with <code>stat</code>. However for doing comparisons between dirs you can use <a href="http://docs.python.org/library/filecmp.html" rel="nofollow">dircmp</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>FYI, there is <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">a more efficient solution</a> in Python 3:</p>
<pre><code>import os

with os.scandir(rootdir) as it:
    for entry in it:
        if entry.is_file():
            filepath = entry.path # absolute path
            filesize = entry.stat().st_size
</code></pre>
<p>See <a href="https://docs.python.org/3/library/os.html#os.DirEntry" rel="nofollow noreferrer">os.DirEntry</a> for more details about the variable <code>entry</code>. </p>
<p>Note that the above is <strong>not</strong> recursive (subfolders will not be explored). In order to get an <code>os.walk</code>-like behaviour, you might want to use something like:</p>
<pre><code>from collections import namedtuple

_wrap_entry = namedtuple( 'DirEntryWrapper', 'name path islink size' )
def scantree( rootdir, follow_links=False, reldir='' ):
    visited = set()
    rootdir = normpath(rootdir)
    with os.scandir(rootdir) as it:
        for entry in it:
            if entry.is_dir():
                if not entry.is_symlink() or follow_links:
                    absdir = realpath(entry.path)
                    if absdir in visited: 
                        continue 
                    else: 
                        visited.add(absdir)
                    yield from scantree( entry.path, follow_links, pathjoin(reldir,entry.name) )
            else:
                yield _wrap_entry( 
                    pathjoin(reldir,entry.name), 
                    entry.path, 
                    entry.is_symlink(),
                    entry.stat().st_size )
</code></pre>
<p>and use it as</p>
<pre><code>for entry in scantree(rootdir, follow_links=False):
    filepath = entry.path 
    filesize = entry.size
</code></pre>
</div>
<span class="comment-copy">Note that file size equality doesn't guarantee that the files are the same; you may want to use the difflib module or compute a checksum.  (Alas, the python site isn't responding for me at the moment, so I can't provide URL's.)  That said, for file sizes see this previous question:  <a href="http://stackoverflow.com/questions/2104080/how-to-check-file-size-in-python" title="how to check file size in python">stackoverflow.com/questions/2104080/â€¦</a></span>
<span class="comment-copy">File size not equal is a pretty good guarantee that the files are not identical, however.</span>
<span class="comment-copy">If you're not worried about people intentionally faking that the file is the same, there are checksum algorithms much faster than MD5. Looking at the last modified time of the file is also a good way to confirm identically sized files are the same if you don't want to have to open the file.</span>
