<div class="post-text" itemprop="text">
<p>Does a Python equivalent to the Ruby <code>||=</code> operator ("set the variable if the variable is not set") exist?</p>
<p>Example in Ruby :</p>
<pre><code> variable_not_set ||= 'bla bla'
 variable_not_set == 'bla bla'

 variable_set = 'pi pi'
 variable_set ||= 'bla bla'
 variable_set == 'pi pi'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, the replacement is:</p>
<pre><code>try:
   v
except NameError:
   v = 'bla bla'
</code></pre>
<p>However, wanting to use this construct is a sign of overly complicated code flow. Usually, you'd do the following:</p>
<pre><code>try:
   v = complicated()
except ComplicatedError: # complicated failed
   v = 'fallback value'
</code></pre>
<p>and never be unsure whether <code>v</code> is set or not. If it's one of many options that can either be set or not, use a dictionary and its <a href="http://docs.python.org/library/stdtypes.html#dict.get" rel="noreferrer"><code>get</code></a> method which allows a default value.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised no one offered this answer. It's not as "built-in" as Ruby's <code>||=</code> but it's basically equivalent and still a one-liner:</p>
<pre><code>foo = foo if 'foo' in locals() else 'default'
</code></pre>
<p>Of course, <a href="https://docs.python.org/3/library/functions.html#locals" rel="noreferrer"><code>locals()</code></a> is just a dictionary, so you can do:</p>
<pre><code>foo = locals().get('foo', 'default')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use </p>
<pre><code>x = 'default' if not x else x
</code></pre>
<p>Much shorter than all of your alternatives suggested here, and straight to the point. Read, "set x to 'default' if x is not set otherwise keep it as x." If you need <code>None</code>, <code>0</code>, <code>False</code>, or <code>""</code> to be valid values however, you will need to change this behavior, for instance: </p>
<pre><code>valid_vals = ("", 0, False) # We want None to be the only un-set value

x = 'default' if not x and x not in valid_vals else x
</code></pre>
<p>This sort of thing is also just begging to be turned into a function you can use everywhere easily: </p>
<pre><code>setval_if = lambda val: 'default' if not val and val not in valid_vals else val
</code></pre>
<p>at which point, you can use it as:</p>
<pre><code>&gt;&gt;&gt; x = None # To set it to something not valid
&gt;&gt;&gt; x = setval_if(x) # Using our special function is short and sweet now!
&gt;&gt;&gt; print x # Let's check to make sure our None valued variable actually got set
'default'
</code></pre>
<p>Finally, if you are really missing your Ruby infix notation, you could overload <code>||=|</code> (or something similar) by following this guy's hack: <a href="http://code.activestate.com/recipes/384122-infix-operators/">http://code.activestate.com/recipes/384122-infix-operators/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>No, not knowing which variables are defined is a bug, not a feature in Python. </p>
<p>Use dicts instead:</p>
<pre><code>d = {}
d.setdefault('key', 1)
d['key'] == 1

d['key'] = 2
d.setdefault('key', 1)
d['key'] == 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(can't comment or I would just do that) I believe the suggestion to check locals above is not quite right.  It should be:</p>
<pre><code>foo = foo if 'foo' in locals() or 'foo' in globals() else 'default'
</code></pre>
<p>to be correct in all contexts.  </p>
<p>However, despite its upvotes, I don't think even that is a good analog to the Ruby operator.  Since the Ruby operator allows more than just a simple name on the left:</p>
<pre><code>foo[12] ||= something
foo.bar ||= something
</code></pre>
<p>The exception method is probably closest analog.</p>
</div>
<div class="post-text" itemprop="text">
<p>I usually do this the following way:</p>
<pre><code>def set_if_not_exists(obj,attr,value):
 if not hasattr(obj,attr): setattr(obj,attr,value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is conditional assignment in Python 2.5 and later - the syntax is not very obvious hence it's easy to miss. Here's how you do it:</p>
<pre><code>x = true_value if condition else false_value
</code></pre>
<p>For further reference, check out the <a href="http://docs.python.org/release/2.5/whatsnew/pep-308.html" rel="nofollow">Python 2.5 docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are looking for, if you are looking for something in a dictionary, is the <code>setdefault</code> method:</p>
<pre><code>(Pdb) we=dict()
(Pdb) we.setdefault('e',14)
14
(Pdb) we['e']
14
(Pdb) we['r']="p"
(Pdb) we.setdefault('r','jeff')
'p'
(Pdb) we['r']
'p'
(Pdb) we[e]
*** NameError: name 'e' is not defined
(Pdb) we['e']
14
(Pdb) we['q2']
</code></pre>
<p>*** KeyError: 'q2'
    (Pdb)</p>
<p>The important thing to note in my example is that the <code>setdefault</code> method changes the dictionary if and only if the key that the <code>setdefault</code> method refers to is not present.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure I understand the question properly here ... Trying to "read" the value of an "undefined" variable name will trigger a <code>NameError</code>. (see <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#python-has-names" rel="nofollow">here, that Python has "names"</a>, not variables...).</p>
<p>== EDIT ==</p>
<p><strong>As pointed out in the comments by delnan, the code below is not robust and will break in numerous situations ...</strong></p>
<p>Nevertheless, if your variable "exists", but has some sort of dummy value, like <code>None</code>, the following would work :</p>
<pre><code>&gt;&gt;&gt; my_possibly_None_value = None
&gt;&gt;&gt; myval = my_possibly_None_value or 5
&gt;&gt;&gt; myval
5
&gt;&gt;&gt; my_possibly_None_value = 12
&gt;&gt;&gt; myval = my_possibly_None_value or 5
&gt;&gt;&gt; myval
12
&gt;&gt;&gt; 
</code></pre>
<p>(see <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#testing-for-truth-values" rel="nofollow">this paragraph about Truth Values</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no nonsense like that. 
Something we have not missed in Python for 20 years.</p>
</div>
<span class="comment-copy">It doesn't set it if it's not set - it sets it if its current value is false (<code>false</code> or <code>nil</code>). Granted, this distinction is more important in languages that e.g. treat 0 and "" as false, but still</span>
<span class="comment-copy">what is the use case for this ruby operator?</span>
<span class="comment-copy">The way to do it would be to use a try except NameError as indicated by phihag, butthis does not make myuch sense in Python as stated by everyone here. In Ruby it is more usefull due to the way people do pass arbitrary code blocks to be run inside a function. The target function than might need to set a variable that was not initialized in the foreign block it executed. There are no such cases in Python.</span>
<span class="comment-copy">No, you <a href="http://docs.python.org/howto/doanddont.html#except" rel="nofollow noreferrer">don't use <code>except:</code></a>.</span>
<span class="comment-copy">@delnan I didn't want to make specific assumptions about the nature of <code>complicated()</code>. Added it.</span>
<span class="comment-copy">You sure?  @emish offers a much simpler solution.</span>
<span class="comment-copy">Your first example doesn't work:  &gt;&gt;&gt; x = 'default' if not x else x Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; NameError: name 'x' is not defined</span>
<span class="comment-copy">This is an incorrect answer, and will fail if x does not exist. Since the question asks for a way to test for existance, this solution will not work.</span>
<span class="comment-copy">This answer solved the problem "conditional assignment". set a variable if it was not set. of course, everything on the right must be defined, else you will get an error (I just took it as a pseudo-code).  <code>x = "value1" if True else "value2"</code>.  in general.  <code>x = 'value1' if condition else 'value2'</code></span>
<span class="comment-copy">Or write code that always defined all variables.</span>
<span class="comment-copy">This is not what is being asked for.</span>
<span class="comment-copy">This breaks as soon as the value might be 0, "", an empty string, or anything else that's "falsy". Explicitly check whether it <code>is None</code>.</span>
<span class="comment-copy">Oh yes, you are right, I hadn't thought of that. Thanks for the hint !  I have actually never had the need to do this "or" thing, and I thought it was a valid answer to the question ... but the question itself does not seem to be relevqnt to Python anyway ...</span>
<span class="comment-copy"><code>if x is None: x = default</code> is nonsense?</span>
<span class="comment-copy">@delnan That's not what's asked here. Not being sure whether <code>x</code> is set at all (no matter the value) could be called nonsense programming.</span>
<span class="comment-copy">I'm not a Ruby expert, but it seems to me <code>nil</code> is also used like <code>None</code> in Python, namely as a "no data" placeholder. (Of course, that's not all there is.)</span>
