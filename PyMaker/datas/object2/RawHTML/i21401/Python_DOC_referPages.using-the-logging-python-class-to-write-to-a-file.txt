<div class="post-text" itemprop="text">
<p>How can I use the logging class in python to write to a file? Every time I try to use it, it just prints out the message.</p>
</div>
<div class="post-text" itemprop="text">
<p>An example of using <code>logging.basicConfig</code> rather than <code>logging.fileHandler()</code></p>
<pre><code>logging.basicConfig(filename=logname,
                            filemode='a',
                            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.DEBUG)

logging.info("Running Urban Planning")

self.logger = logging.getLogger('urbanGUI')
</code></pre>
<p><strong>In order, the five parts do the following:</strong> </p>
<ol>
<li>set the output file (<code>filename=logname</code>)</li>
<li>set it to append rather than overwrite (<code>filemode='a'</code>)</li>
<li>determine the format of the output message (<code>format=...</code>)</li>
<li>determine the format of the output time (<code>datefmt='%H:%M:%S'</code>)</li>
<li>and determine the minimum message level it will accept (<code>level=logging.DEBUG</code>).</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Taken from the "<a href="http://docs.python.org/howto/logging-cookbook.html#logging-cookbook" rel="noreferrer">logging cookbook</a>":</p>
<pre><code># create logger with 'spam_application'
logger = logging.getLogger('spam_application')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
logger.addHandler(fh)
</code></pre>
<p>And you're good to go.</p>
<p>P.S. Make sure to read the <a href="http://docs.python.org/howto/logging.html" rel="noreferrer">logging HOWTO</a> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer to use a configuration file. It allows me to switch logging levels, locations, etc without changing code when I go from development to release. I simply package a different config file with the same name, and with the same defined loggers.</p>
<pre><code>import logging.config
if __name__ == '__main__':
    # Configure the logger
    # loggerConfigFileName: The name and path of your configuration file
    logging.config.fileConfig(path.normpath(loggerConfigFileName))

    # Create the logger
    # Admin_Client: The name of a logger defined in the config file
    mylogger = logging.getLogger('Admin_Client')

    msg='Bite Me'
    myLogger.debug(msg)
    myLogger.info(msg)
    myLogger.warn(msg)
    myLogger.error(msg)
    myLogger.critical(msg)

    # Shut down the logger
    logging.shutdown()
</code></pre>
<p>Here is my code for the log config file</p>
<pre><code>#These are the loggers that are available from the code
#Each logger requires a handler, but can have more than one
[loggers]
keys=root,Admin_Client


#Each handler requires a single formatter
[handlers]
keys=fileHandler, consoleHandler


[formatters]
keys=logFormatter, consoleFormatter


[logger_root]
level=DEBUG
handlers=fileHandler


[logger_Admin_Client]
level=DEBUG
handlers=fileHandler, consoleHandler
qualname=Admin_Client
#propagate=0 Does not pass messages to ancestor loggers(root)
propagate=0


# Do not use a console logger when running scripts from a bat file without a console
# because it hangs!
[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout,)# The comma is correct, because the parser is looking for args


[handler_fileHandler]
class=FileHandler
level=DEBUG
formatter=logFormatter
# This causes a new file to be created for each script
# Change time.strftime("%Y%m%d%H%M%S") to time.strftime("%Y%m%d")
# And only one log per day will be created. All messages will be amended to it.
args=("D:\\Logs\\PyLogs\\" + time.strftime("%Y%m%d%H%M%S")+'.log', 'a')


[formatter_logFormatter]
#name is the name of the logger root or Admin_Client
#levelname is the log message level debug, warn, ect 
#lineno is the line number from where the call to log is made
#04d is simple formatting to ensure there are four numeric places with leading zeros
#4s would work as well, but would simply pad the string with leading spaces, right justify
#-4s would work as well, but would simply pad the string with trailing spaces, left justify
#filename is the file name from where the call to log is made
#funcName is the method name from where the call to log is made
#format=%(asctime)s | %(lineno)d | %(message)s
#format=%(asctime)s | %(name)s | %(levelname)s | %(message)s
#format=%(asctime)s | %(name)s | %(module)s-%(lineno) | %(levelname)s | %(message)s
#format=%(asctime)s | %(name)s | %(module)s-%(lineno)04d | %(levelname)s | %(message)s
#format=%(asctime)s | %(name)s | %(module)s-%(lineno)4s | %(levelname)-8s | %(message)s

format=%(asctime)s | %(levelname)-8s | %(lineno)04d | %(message)s


#Use a separate formatter for the console if you want
[formatter_consoleFormatter]
format=%(asctime)s | %(levelname)-8s | %(filename)s-%(funcName)s-%(lineno)04d | %(message)s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/logging.html#logging.basicConfig" rel="noreferrer">http://docs.python.org/library/logging.html#logging.basicConfig</a></p>
<pre><code>logging.basicConfig(filename='/path/to/your/log', level=....)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/logging.handlers.html#filehandler" rel="nofollow">http://docs.python.org/library/logging.handlers.html#filehandler</a></p>
<blockquote>
<p>The <code>FileHandler</code> class, located in the core <code>logging</code> package, sends logging output to a disk file.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
import logging

from util import reducer_logfile
logging.basicConfig(filename=reducer_logfile, format='%(message)s',
                    level=logging.INFO, filemode='w')
</code></pre>
</div>
<span class="comment-copy">Can the filename be a hdfs location? If yes, how?</span>
<span class="comment-copy">is it possible to set file path</span>
<span class="comment-copy">I could not get this to work for logger.info.</span>
<span class="comment-copy">To answer your first question, feel free to look at the title of the question I asked. I have gone over the link you provided and it was helpful. I have copied the code you gave me and was I wrong to assume I would be able to use logger.info("message") and logger.warning("message") successfully? I was able to write to the file using logger.warning, however logger.info does not seem to write to the file.</span>
<span class="comment-copy">Try removing the setLevel call. Reading the handler <a href="http://docs.python.org/library/logging.html#logging.Handler.setLevel" rel="nofollow noreferrer">docs</a> it looks like all messages are processed by default.</span>
<span class="comment-copy">I can write out to file only using <code>logger.warning("message")</code>, cannot use <code>logger.info("message")</code> nor <code>logger.debug("message")</code>. That's a bit annoying.</span>
<span class="comment-copy">The code example @EliBendersky has written is missing 1 step if you want to write info / debug msgs. The logger itself needs its own log level to be configured to accept that level of logging messages e.g. <code>logger.setLevel(logging.DEBUG)</code>. Loggers can be configured with multiple handlers; the level configured in the logger determines which severity level log messages to send to each of its handlers, &amp; the levels set in the handlers determine which levels the handler will process. Note that those wanting to print info messages only need to set this to <code>INFO</code> in both the logger and the handler.</span>
<span class="comment-copy">Naming the file with a date requires double <code>%%</code> in Python 3. e.g. <code>time.strftime("%%Y%%m%%D")</code></span>
<span class="comment-copy">This saves the logs in the file, that's good. What if together with this, I would like it to log the outputs on the terminal too?</span>
<span class="comment-copy">The official <code>logging</code> module documentation allows for this. You can even choose what logs go into the terminal and which ones go into a file, and many more interesting applications. <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-multiple-destinations" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a></span>
<span class="comment-copy">+1 For a complete example, see the "basic tutorial": <a href="http://docs.python.org/howto/logging.html#logging-to-a-file" rel="nofollow noreferrer">docs.python.org/howto/logging.html#logging-to-a-file</a></span>
<span class="comment-copy">I like how there are several different types of <code>FileHandler</code>s for various situations, too. (<code>WatchedFileHandler</code>, <code>RotatingFileHandler</code>, etc.)</span>
