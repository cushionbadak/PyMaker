<div class="post-text" itemprop="text">
<p>I have a list of strings like this:</p>
<pre><code>X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]
</code></pre>
<p>What is the shortest way of sorting X using values from Y to get the following output?</p>
<pre><code>["a", "d", "h", "b", "c", "e", "i", "f", "g"]
</code></pre>
<p>The order of the elements having the same "key" does not matter. I can resort to the use of <code>for</code> constructs but I am curious if there is a shorter way. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Shortest Code</strong></p>
<pre><code>[x for _,x in sorted(zip(Y,X))]
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

Z = [x for _,x in sorted(zip(Y,X))]
print(Z)  # ["a", "d", "h", "b", "c", "e", "i", "f", "g"]
</code></pre>
<hr/>
<p><strong>Generally Speaking</strong></p>
<pre><code>[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]
</code></pre>
<p><strong>Explained:</strong></p>
<ol>
<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> the two <code>list</code>s.</li>
<li>create a new, sorted <code>list</code> based on the <code>zip</code> using <a href="https://www.programiz.com/python-programming/methods/built-in/sorted" rel="noreferrer"><code>sorted()</code></a>.</li>
<li>using a list comprehension <em>extract</em> the first elements of each pair from the sorted, zipped <code>list</code>.</li>
</ol>
<p><em>For more information on how to set\use the <code>key</code> parameter as well as the <code>sorted</code> function in general, take a look at <a href="http://pythoncentral.io/how-to-sort-a-list-tuple-or-object-with-sorted-in-python/" rel="noreferrer">this</a>.</em></p>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>Zip the two lists together, sort it, then take the parts you want:</p>
<pre><code>&gt;&gt;&gt; yx = zip(Y, X)
&gt;&gt;&gt; yx
[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]
&gt;&gt;&gt; yx.sort()
&gt;&gt;&gt; yx
[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]
&gt;&gt;&gt; x_sorted = [x for y, x in yx]
&gt;&gt;&gt; x_sorted
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']
</code></pre>
<p>Combine these together to get:</p>
<pre><code>[x for y, x in sorted(zip(Y, X))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also, if you don't mind using numpy arrays (or in fact already are dealing with numpy arrays...), here is another nice solution:</p>
<pre><code>people = ['Jim', 'Pam', 'Micheal', 'Dwight']
ages = [27, 25, 4, 9]

import numpy
people = numpy.array(people)
ages = numpy.array(ages)
inds = ages.argsort()
sortedPeople = people[inds]
</code></pre>
<p>I found it here:
<a href="http://scienceoss.com/sort-one-list-by-another-list/">http://scienceoss.com/sort-one-list-by-another-list/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The most obvious solution to me is to use the <code>key</code> keyword arg.</p>
<pre><code>&gt;&gt;&gt; X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
&gt;&gt;&gt; Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]
&gt;&gt;&gt; keydict = dict(zip(X, Y))
&gt;&gt;&gt; X.sort(key=keydict.get)
&gt;&gt;&gt; X
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']
</code></pre>
<p>Note that you can shorten this to a one-liner if you care to:</p>
<pre><code>&gt;&gt;&gt; X.sort(key=dict(zip(X, Y)).get)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like having a list of sorted indices. That way, I can sort any list in the same order as the source list. Once you have a list of sorted indices, a simple list comprehension will do the trick:</p>
<pre><code>    X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
    Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

    sorted_y_idx_list = sorted(range(len(Y)),key=lambda x:Y[x])
    Xs = [X[i] for i in sorted_y_idx_list ]

    print( "Xs:", Xs )
    # prints: Xs: ["a", "d", "h", "b", "c", "e", "i", "f", "g"]
</code></pre>
<p>Note that the sorted index list can also be gotten using numpy argsort().</p>
</div>
<div class="post-text" itemprop="text">
<p>Another alternative, combining several of the answers.</p>
<pre><code>zip(*sorted(zip(Y,X)))[1]
</code></pre>
<p>In order to work for python3:</p>
<pre><code>list(zip(*sorted(zip(B,A))))[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>zip, sort by the second column, return the first column.</p>
<pre><code>zip(*sorted(zip(X,Y), key=operator.itemgetter(1)))[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.sort_together" rel="nofollow noreferrer"><code>more_itertools</code></a> has a tool for sorting iterables in parallel:</p>
<pre><code>from more_itertools import sort_together

sort_together([Y, X])[1]
# ('a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I actually came here looking to sort a list by a list where the values matched.</p>
<pre><code>list_a = ['foo', 'bar', 'baz']
list_b = ['baz', 'bar', 'foo']
sorted(list_b, key=lambda x: list_a.index(x))
# ['foo', 'bar', 'baz']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick one-liner.</p>
<pre><code>list_a = [5,4,3,2,1]
list_b = [1,1.5,1.75,2,3,3.5,3.75,4,5]
</code></pre>
<p>Say you want list a to match list b.</p>
<pre><code>orderedList =  sorted(list_a, key=lambda x: list_b.index(x))
</code></pre>
<p>This is helpful when needing to order a smaller list to values in larger. Assuming that the larger list contains all values in the smaller list, it can be done.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a <code>pandas Series</code>, using the primary list as <code>data</code> and the other list as <code>index</code>, and then just sort by the index:</p>
<pre><code>import pandas as pd
pd.Series(data=X,index=Y).sort_index().tolist()
</code></pre>
<p>output:</p>
<pre><code>['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have created a more general function, that sorts more than two lists based on another one, inspired by @Whatang's answer.</p>
<pre><code>def parallel_sort(*lists):
    """
    Sorts the given lists, based on the first one.
    :param lists: lists to be sorted

    :return: a tuple containing the sorted lists
    """

    # Create the initially empty lists to later store the sorted items
    sorted_lists = tuple([] for _ in range(len(lists)))

    # Unpack the lists, sort them, zip them and iterate over them
    for t in sorted(zip(*lists)):
        # list items are now sorted based on the first list
        for i, item in enumerate(t):    # for each item...
            sorted_lists[i].append(item)  # ...store it in the appropriate list

    return sorted_lists
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is Whatangs answer if you want to get both sorted lists (python3).</p>
<pre><code>X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

Zx, Zy = zip(*[(x, y) for x, y in sorted(zip(Y, X))])

print(list(Zx))  # [0, 0, 0, 1, 1, 1, 1, 2, 2]
print(list(Zy))  # ['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']
</code></pre>
<p>Just remember Zx and Zy are tuples.
I am also wandering if there is a better way to do that.</p>
<p><strong>Warning:</strong> If you run it with empty lists it crashes.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ['a','b','c','d','e','f','g','h','i']
list2 = [0,1,1,0,1,2,2,0,1]

output=[]
cur_loclist = []
</code></pre>
<p>To get unique values present in <code>list2</code></p>
<pre><code>list_set = set(list2)
</code></pre>
<p>To find the loc of the index in <code>list2</code> </p>
<pre><code>list_str = ''.join(str(s) for s in list2)
</code></pre>
<p>Location of index in <code>list2</code> is tracked using <code>cur_loclist</code></p>
<p>[0, 3, 7, 1, 2, 4, 8, 5, 6]</p>
<pre><code>for i in list_set:
cur_loc = list_str.find(str(i))

while cur_loc &gt;= 0:
    cur_loclist.append(cur_loc)
    cur_loc = list_str.find(str(i),cur_loc+1)

print(cur_loclist)

for i in range(0,len(cur_loclist)):
output.append(list1[cur_loclist[i]])
print(output)
</code></pre>
</div>
<span class="comment-copy">@FrancisAvila, the question you have linked has been asked around 8 months after this one. You can put the duplicate comment there instead of here.</span>
<span class="comment-copy">The answer of riza might be useful when plotting data, since zip(*sorted(zip(X, Y), key=lambda pair: pair[0])) returns both the sorted X and Y sorted with values of X.</span>
<span class="comment-copy">@Alex If you were, be sure to ban the <code>strip()</code> method, as in <code>Alex.strip(clothes)</code>.</span>
<span class="comment-copy">This is correct, but I'll add the note that if you're trying to sort multiple arrays by the same array, this won't neccessarily work as expected, since the key that is being used to sort is (y,x), not just y. You should instead use [x for (y,x) in sorted(zip(Y,X), key=lambda pair: pair[0])]</span>
<span class="comment-copy">good solution! But it should be: The list is ordered regarding the first element of the pairs, and the comprehension extracts the 'second' element of the pairs.</span>
<span class="comment-copy">This is fine if <code>X</code> is a list of <code>str</code>, but be careful if there is a possibility that <code>&lt;</code> is not defined for some pairs of items in <code>X</code>, eg - if some of them were <code>None</code></span>
<span class="comment-copy">When we try to use sort over a zip object, <code>AttributeError: 'zip' object has no attribute 'sort'</code> is what I am getting as of now.</span>
<span class="comment-copy">You are using Python 3.  In Python 2, zip produced a list.  Now it produces an iterable object.  <code>sorted(zip(...))</code> should still work, or:  <code>them = list(zip(...)); them.sort()</code></span>
<span class="comment-copy">For bigger arrays / vectors, this solution with numpy is beneficial!</span>
<span class="comment-copy">If they are already numpy arrays, then it's simply <code>sortedArray1= array1[array2.argsort()]</code>.  And this also makes it easy to sort multiple lists by a particular column of a 2D array: e.g. <code>sortedArray1= array1[array2[:,2].argsort()]</code> to sort array1 (which may have multiple columns) by the values in the third column of array2.</span>
<span class="comment-copy">Does this require that the values in X are unqiue?</span>
<span class="comment-copy">Note: the key=operator.itemgetter(1) solves the duplicate issue</span>
<span class="comment-copy">Not exactly the answer of the question but also what I was looking for</span>
<span class="comment-copy">This does not solve the OP’s question.  Did you try it with the sample lists <code>X</code> and <code>Y</code>?</span>
