<div class="post-text" itemprop="text">
<p>Let's take:</p>
<pre><code>l = [[1,2,3],[4,5,6],[7,8,9]]
</code></pre>
<p>The result I'm looking for is</p>
<pre><code>r = [[1,4,7],[2,5,8],[3,6,9]]
</code></pre>
<p>and not</p>
<pre><code>r = [(1,4,7),(2,5,8),(3,6,9)]
</code></pre>
<p>Much appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>How about</p>
<pre><code>map(list, zip(*l))
--&gt; [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre>
<p>For python 3.x users can use</p>
<pre><code>list(map(list, zip(*l)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do it is with the NumPy transpose. For a list, a:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.array(a).T.tolist()
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre>
<p>Or another one without zip:</p>
<pre><code>&gt;&gt;&gt; map(list,map(None,*a))
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Equivalently to Jena's solution:</p>
<pre><code>&gt;&gt;&gt; l=[[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; [list(i) for i in zip(*l)]
... [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just for fun, valid rectangles and assuming that m[0] exists</p>
<pre><code>&gt;&gt;&gt; m = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; [[row[i] for row in m] for i in range(len(m[0]))]
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>These methods all work in Python 2 or 3. And they work on "ragged" rectangular 2D lists. That is, the inner lists don't need to have the same lengths.</p>
<h2>the setup</h2>
<pre><code>import itertools
import six

list_list = [[1,2,3], [4,5,6, 6.1, 6.2, 6.3], [7,8,9]]
</code></pre>
<h2>method 1</h2>
<pre><code>&gt;&gt;&gt; map(list, six.moves.zip_longest(*list_list, fillvalue='-'))
[[1, 4, 7], [2, 5, 8], [3, 6, 9], ['-', 6.1, '-'], ['-', 6.2, '-'], ['-', 6.3, '-']]
</code></pre>
<p><code>six.moves.zip_longest()</code> becomes</p>
<ul>
<li><a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>itertools.izip_longest()</code></a> in Python 2</li>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a> in Python 3</li>
</ul>
<p>The default fillvalue is <code>None</code>. Thanks to @jena's <a href="https://stackoverflow.com/a/6473724/673991">answer</a>, where <code>map()</code> is changing the inner tuples to lists. Here it's turning iterators into lists. Thanks to @Oregano's and @badp's <a href="https://stackoverflow.com/a/6473724/673991">comments</a>.  </p>
<h2>method 2</h2>
<pre><code>&gt;&gt;&gt; [list(row) for row in six.moves.zip_longest(*list_list, fillvalue='-')]
[[1, 4, 7], [2, 5, 8], [3, 6, 9], ['-', 6.1, '-'], ['-', 6.2, '-'], ['-', 6.3, '-']]
</code></pre>
<p>The <a href="https://stackoverflow.com/a/6473742/673991">@inspectorG4dget alternative</a>.</p>
<h2>method 3</h2>
<pre><code>&gt;&gt;&gt; map(list, map(None, *list_list))
[[1, 4, 7], [2, 5, 8], [3, 6, 9], [None, 6.1, None], [None, 6.2, None], [None, 6.3, None]]
</code></pre>
<p>This extraordinarily compact <a href="https://stackoverflow.com/a/6473727/673991">@SiggyF second alternative</a> works with ragged 2D lists, unlike his first code which uses numpy transpose and passes through ragged lists. But None has to be the fill value. (No, the None passed to the inner map() is not the fill value. It means there's no function to pass the rows through.)</p>
</div>
<div class="post-text" itemprop="text">
<h1>Three options to choose from:</h1>
<h3>1. Map with Zip</h3>
<pre><code>solution1 = map(list, zip(*l))
</code></pre>
<h3>2. List Comprehension</h3>
<pre><code>solution2 = [list(i) for i in zip(*l)]
</code></pre>
<h3>3. For Loop Appending</h3>
<pre><code>solution3 = []
for i in zip(*l):
    solution3.append((list(i)))
</code></pre>
<h3>And to view the results:</h3>
<pre><code>print(*solution1)
print(*solution2)
print(*solution3)

# [1, 4, 7], [2, 5, 8], [3, 6, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe not the most elegant solution, but here's a solution using nested while loops:</p>
<pre><code>def transpose(lst):
    newlist = []
    i = 0
    while i &lt; len(lst):
        j = 0
        colvec = []
        while j &lt; len(lst):
            colvec.append(lst[j][i])
            j = j + 1
        newlist.append(colvec)
        i = i + 1
    return newlist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np
r = list(map(list, np.transpose(l)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution for transposing a list of lists that is not necessarily square:</p>
<pre><code>maxCol = len(l[0])
for row in l:
    rowLength = len(row)
    if rowLength &gt; maxCol:
        maxCol = rowLength
lTrans = []
for colIndex in range(maxCol):
    lTrans.append([])
    for row in l:
        if colIndex &lt; len(row):
            lTrans[colIndex].append(row[colIndex])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>    #Import functions from library
    from numpy import size, array
    #Transpose a 2D list
    def transpose_list_2d(list_in_mat):
        list_out_mat = []
        array_in_mat = array(list_in_mat)
        array_out_mat = array_in_mat.T
        nb_lines = size(array_out_mat, 0)
        for i_line_out in range(0, nb_lines):
            array_out_line = array_out_mat[i_line_out]
            list_out_line = list(array_out_line)
            list_out_mat.append(list_out_line)
        return list_out_mat
</code></pre>
</div>
<span class="comment-copy">Beware: if <code>l</code> is not evenly sized (say, some rows are shorter than others), <code>zip</code> will <i>not</i> compensate for it and instead chop away rows from the output. So <code>l=[[1,2],[3,4],[5]]</code> gives you <code>[[1,3,5]]</code>.</span>
<span class="comment-copy">The <code>itertools</code> function <code>zip_longest()</code> works with uneven lists. See <a href="https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">DOCS</a></span>
<span class="comment-copy">An explanation in answer would be nice :)</span>
<span class="comment-copy">I think even <code>list(zip(*l))</code> works correctly in Python 3.</span>
<span class="comment-copy">@Stefano It works (as does <code>zip(*l)</code> in Python 2), but you get a list of tuples, not a list of lists. Of course, <code>list(list(it))</code> is always the same thing as <code>list(it)</code>.</span>
<span class="comment-copy">Love your second one -- I didn't realize <code>map</code> could do that. Here's a slight refinement that doesn't require 2 calls, though: <code>map(lambda *a: list(a), *l)</code></span>
<span class="comment-copy">Shouldnt this be a better answer as it takes care of uneven lists?</span>
<span class="comment-copy"><code>map(None, ...)</code> doesn't seem to work for Py3. The generator is created but <code>next()</code> raises an error immediately: <code>TypeError: 'NoneType' object is not callable</code>.</span>
<span class="comment-copy">As list comprehension is now preferred to <code>map()</code>, this solution is the one which is the most in the Python spirit...</span>
<span class="comment-copy">I am not sure that a list comprehension is preferred to <code>map()</code> in this case, since the applied function (<code>list</code>) is very simple. This case is almost the <i>raison d'Ãªtre</i> of <code>map()</code>, since this is almost the only case where it shines.</span>
<span class="comment-copy">Half and half, creative.</span>
<span class="comment-copy">this is what I was looking for and couldn't get my head around. Still @jena's solution is really short</span>
<span class="comment-copy">Yeah, it took a few tires to get this right. Okay, many tries.</span>
<span class="comment-copy">Still isn't quite right -- this only happens to work when the dimensions are square! It should be: <code>[[j[i] for j in l] for i in range(len(l[0]))]</code>. Of course, you have to be sure that list <code>l</code> is not empty.</span>
<span class="comment-copy">@LeeD still doesn't work for me on jena's example l=[[1,2],[3,4],[5]]</span>
<span class="comment-copy">@hobs That was badp's example, responding to jena. However, I'm not sure it makes sense to me. IMO, transposition implies a rectangular matrix -- when represented as a list of lists, that means all the internal lists must be the same length. What result would you want as the "transposition" of this example?</span>
<span class="comment-copy">Best and most comprehensive answer for ragged 2D lists!</span>
<span class="comment-copy">What do you mean?</span>
