<div class="post-text" itemprop="text">
<p>I want to install <a href="http://pypi.python.org/pypi/pip" rel="noreferrer">pip</a>. It should support Python 3, but it requires setuptools, which is available only for Python 2.</p>
<p>How can I install pip with Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>edit: Manual installation and use of <code>setuptools</code> is not the standard process anymore.</p>
<h2>If you're running Python 2.7.9+ or Python 3.4+</h2>
<p>Congrats, you <em>should</em> already have <code>pip</code> installed. If you do not, read onward.</p>
<h2>If you're running a Unix-like System</h2>
<p>You can usually install the package for <code>pip</code> through your package manager if your version of Python is older than 2.7.9 or 3.4, or if your system did not include it for whatever reason.</p>
<p>Instructions for some of the more common distros follow.</p>
<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 2.x</h3>
<p>Run the following command from a terminal:</p>
<pre><code>sudo apt-get install python-pip 
</code></pre>
<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 3.x</h3>
<p>Run the following command from a terminal:</p>
<pre><code>sudo apt-get install python3-pip
</code></pre>
<strong>Note:</strong>
<p>On a fresh Debian/Ubuntu install, the package may not be found until you do:</p>
<pre><code>sudo apt-get update
</code></pre>
<h3>Installing <code>pip</code> on CentOS 7 for Python 2.x</h3>
<p>On CentOS 7, you have to install setup tools first, and then use that to install <code>pip</code>, as there is no direct package for it.</p>
<pre><code>sudo yum install python-setuptools
sudo easy_install pip
</code></pre>
<h3>Installing <code>pip</code> on CentOS 7 for Python 3.x</h3>
<p>Assuming you installed Python 3.4 <a href="https://fedoraproject.org/wiki/EPEL" rel="noreferrer">from EPEL</a>, you can install Python 3's setup tools and use it to install <code>pip</code>.</p>
<pre><code># First command requires you to have enabled EPEL for CentOS7
sudo yum install python34-setuptools
sudo easy_install pip
</code></pre>
<h3>If your Unix/Linux distro doesn't have it in package repos</h3>
<p>Install using the manual way detailed below.</p>
<h2>The manual way</h2>
<p>If you want to do it the manual way, the now-recommended method is to install using the <code>get-pip.py</code> script from <a href="https://pip.pypa.io/en/stable/installing.html" rel="noreferrer"><code>pip</code>'s installation instructions</a>.</p>
<blockquote>
<p>Install pip</p>
<p>To install pip, securely download <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer"><code>get-pip.py</code></a></p>
<p>Then run the following (which may require administrator access):</p>
<pre><code>python get-pip.py 
</code></pre>
<p>If <code>setuptools</code> is not already installed, <code>get-pip.py</code> will install setuptools for you.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I was able to install pip for python 3 on Ubuntu just by running <code>sudo apt-get install python3-pip</code>. </p>
</div>
<div class="post-text" itemprop="text">
<h2>Python 3.4+ and Python 2.7.9+</h2>
<p>Good news! <a href="https://docs.python.org/3/whatsnew/3.4.html" rel="noreferrer">Python 3.4</a> (released March 2014) ships with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Nodejs, Haskell, Perl, Go--almost every other contemporary language with a majority open-source community. Thank you Python.</p>
<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this at <a href="https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719">Does Python have a package/module management system?</a></p>
<p>Alas for everyone using an earlier Python. Manual instructions follow.</p>
<h2>Python ≤ 2.7.8 and Python ≤ 3.3</h2>
<p>Follow my detailed instructions at  <a href="https://stackoverflow.com/a/12476379/284795">https://stackoverflow.com/a/12476379/284795</a> . Essentially</p>
<h3>Official instructions</h3>
<p>Per <a href="https://pip.pypa.io/en/stable/installing.html" rel="noreferrer">https://pip.pypa.io/en/stable/installing.html</a></p>
<p>Download <a href="https://raw.github.com/pypa/pip/master/contrib/get-pip.py" rel="noreferrer"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt.</p>
<pre><code>python get-pip.py
</code></pre>
<p>You possibly need an administrator command prompt to do this. Follow <a href="http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx" rel="noreferrer">http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx</a></p>
<p>For me, this installed Pip at <code>C:\Python27\Scripts\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (eg.  <code>C:\Python27\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>
<pre><code>pip install httpie
</code></pre>
<p>There you go (hopefully)! </p>
</div>
<div class="post-text" itemprop="text">
<p>For Ubuntu 12.04 or older, </p>
<pre><code>sudo apt-get install python3-pip
</code></pre>
<p>won't work. Instead, use:</p>
<pre><code>sudo apt-get install python3-setuptools ca-certificates
sudo easy_install3 pip
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Update 2015-01-20:</h2>
<p>As per <a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a> the current way is:</p>
<pre><code>wget https://bootstrap.pypa.io/get-pip.py
python get-pip.py
</code></pre>
<p>I think that should work for any version</p>
<hr/>
<h2>Original Answer:</h2>
<pre><code>wget http://python-distribute.org/distribute_setup.py
python distribute_setup.py
easy_install pip
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you're using python 3.4+</p>
<p>just type:</p>
<pre><code>python3 -m pip
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>python3 -m ensurepip
</code></pre>
<p>I'm not sure when exactly this was introduced, but it's installed pip3 for me when it didn't already exist.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Single Python in system</strong></p>
<p>To install packages in Python always follow these steps:</p>
<ol>
<li>If the package is for <code>python 2.x</code>: <code>sudo python -m pip install [package]</code></li>
<li>If the package is for <code>python 3.x</code>: <code>sudo python3 -m pip install [package]</code></li>
</ol>
<p>Note: This is assuming no alias is set for <code>python</code></p>
<p>Through this method, there will be no confusion regarding which python version is receiving the package.</p>
<p><strong>Multiple Pythons</strong></p>
<p>Say you have <code>python3 ↔ python3.6</code> and <code>python3.7 ↔ python3.7</code></p>
<ol>
<li>To install for <strong><em>python3.6</em></strong>: <code>sudo python3 -m pip install [package]</code></li>
<li>To instal for <strong><em>python3.7</em></strong>: <code>sudo python3.7 -m pip install [package]</code></li>
</ol>
<p>This is essentially the same method as shown previously.</p>
<p><strong>Note 1</strong></p>
<p>How to find which python, your <code>python3</code> command spawns:</p>
<pre><code>ganesh@Ganesh:~$ python3 # Type in terminal
Python 3.6.6 (default, Sep 12 2018, 18:26:19) # Your python3 version
[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<p>Notice <em>python 3.6.6</em> in the second line. </p>
<p><strong>Note 2</strong></p>
<p>Change what <code>python3</code> or <code>python</code> points to:  <a href="https://askubuntu.com/questions/320996/how-to-make-python-program-command-execute-python-3">https://askubuntu.com/questions/320996/how-to-make-python-program-command-execute-python-3</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Older version of Homebrew</h2>
<p>If you are on macOS, use <code>homebrew</code>.</p>
<pre><code>brew install python3 # this installs python only
brew postinstall python3 # this command installs pip
</code></pre>
<p>Also note that you should check the console if the install finished successfully. Sometimes it doesn't (e.g. an error due to ownership), but people simply overlook the log.</p>
<hr/>
<h2>UPDATED - Homebrew version after 1.5</h2>
<p>According to <a href="https://brew.sh/2018/01/19/homebrew-1.5.0/" rel="nofollow noreferrer">the official Homebrew page</a>:</p>
<blockquote>
<p>On 1st March 2018 the python formula will be upgraded to Python 3.x and a python@2 formula will be added for installing Python 2.7 (although this will be keg-only so neither python nor python2 will be added to the PATH by default without a manual brew link --force). We will maintain python2, python3 and python@3 aliases.</p>
</blockquote>
<p>So to install Python 3, run the following command:</p>
<pre><code>brew install python3
</code></pre>
<p>Then, the <code>pip</code> is installed automatically, and you can install any package by <code>pip install &lt;package&gt;</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use several different versions of python try using <code>virtualenv</code> <a href="http://www.virtualenv.org/en/latest/virtualenv.html#installation" rel="nofollow">http://www.virtualenv.org/en/latest/virtualenv.html#installation</a></p>
<p><strong>With the advantage of <code>pip</code> for each local environment.</strong></p>
<p>Then install a local environment in the current directory by:</p>
<pre><code>virtualenv -p /usr/local/bin/python3.3 ENV --verbose
</code></pre>
<p><em>Note that you specify the path to a python binary you have installed on your system.</em></p>
<p>Then there are now an local pythonenvironment in that folder. <code>./ENV</code></p>
<p>Now there should be <code>./ENV/pip-3.3</code></p>
<p>use 
<code>./ENV/pip-3.3 freeze</code> to list the local installed libraries.</p>
<p>use <code>./ENV/pip-3.3 install packagename</code> to install at the local environment.</p>
<p>use <code>./ENV/python3.3 pythonfile.py</code> to run your python script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my way to solve this problem at ubuntu 12.04:</p>
<pre><code>sudo apt-get install build-essential libncursesw5-dev libssl-dev libgdbm-dev libc6-dev libsqlite3-dev tk-dev
</code></pre>
<p>Then install the python3 from source code:</p>
<pre><code>wget https://www.python.org/ftp/python/3.4.0/Python-3.4.0.tar.xz
tar xvf Python-3.4.0.tar.xz
cd Python-3.4.0
./configure
make
make test
sudo make install
</code></pre>
<p>When you finished installing all of them, pip3 will get installed automatically.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what I did on OS X Mavericks to get this to work.</p>
<p>Firstly, have <a href="http://brew.sh/" rel="nofollow">brew</a> installed</p>
<p>Install python 3.4</p>
<pre><code>brew install python3
</code></pre>
<p>Then I get the latest version of distribute:</p>
<pre><code>wget https://pypi.python.org/packages/source/d/distribute/distribute-0.7.3.zip#md5=c6c59594a7b180af57af8a0cc0cf5b4a

unzip distribute-0.7.3.zip
cd distribute-0.7.3
sudo setup.py install
sudo easy_install-3.4 pip
sudo pip3.4 install virtualenv
sudo pip3.4 install virtualenvwrapper

mkvirtualenv py3 

python --version
Python 3.4.1
</code></pre>
<p>I hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>For python3 try this:</p>
<pre><code>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | python
</code></pre>
<p>The good thing is that It will also detect what version of python you have (even if it's an environment of python in your custom location).
After this you can proceed normally with (for example)</p>
<pre><code>pip install numpy
</code></pre>
<p>source:
<a href="https://pypi.python.org/pypi/setuptools/1.1.6#upgrading-from-setuptools-0-6" rel="nofollow">https://pypi.python.org/pypi/setuptools/1.1.6#upgrading-from-setuptools-0-6</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are in a highly restricted computer env (such as myself) without root access or ability to install packages...  </p>
<p>I had never setup a fresh/standalone/raw/non-root instance of Python+virtualenv before this post.  I had do quite a bit of Googling to make this work.</p>
<ol>
<li>Decide if you are using python (python2) or python3 and set your PATH correctly.  (I am strictly a python3 user.)  All commands below can substitute <code>python3</code> for <code>python</code> if you are python2 user.</li>
<li><code>wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-x.y.z.tar.gz</code></li>
<li><code>tar -xzvf virtualenv-x.y.z.tar.gz</code></li>
<li><code>python3 virtualenv-x.y.z/virtualenv.py --python $(which python3) /path/to/new/virtualenv</code></li>
<li><code>source /path/to/new/virtualenv/bin/activate</code>
<ul>
<li>Assumes you are using a Bourne-compatible shell, e.g., bash</li>
<li>Brilliantly, this <code>virtualenv</code> package includes a standalone version of <code>pip</code> and <code>setuptools</code> that are auto-magically installed into each new virtualenv.  This solves the chicken and egg problem.</li>
<li>You may want to create an alias (or update your ~/.bashrc, etc.) for this final command to activate the python virtualenv during each login.  It can be a pain to remember all these paths and commands.</li>
</ul></li>
<li>Check your version of python now: <code>which python3</code> should give: <code>/path/to/new/virtualenv/bin/python3</code></li>
<li>Check <code>pip</code> is also available in the virtualenv via <code>which pip</code>... should give: <code>/path/to/new/virtualenv/bin/pip</code></li>
</ol>
<p>Then... pip, pip, pip!</p>
<p>Final tip to newbie Pythoneers: You don't think you need virtualenv when you start, but you will be happy to have it later.  Helps with "what if" installation / upgrade scenarios for open source / shared packages.</p>
<p>Ref: <a href="https://virtualenv.pypa.io/en/latest/installation.html" rel="nofollow">https://virtualenv.pypa.io/en/latest/installation.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>What’s New In Python 3.4</strong></p>
<p>pip should always be available</p>
<p>By default, the commands pipX and pipX.Y will be installed on all platforms (where X.Y stands for the version of the Python installation), along with the pip Python package and its dependencies.</p>
<p><a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-453" rel="nofollow">https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-453</a></p>
<p>so if you have python 3.4 installed, you can just: <code>sudo pip3 install xxx</code></p>
</div>
<div class="post-text" itemprop="text">
<p>To install pip, securely download <a href="https://bootstrap.pypa.io/get-pip.py" rel="nofollow noreferrer">get-pip.py</a>.</p>
<p>Then run the following:</p>
<pre><code>python get-pip.py
</code></pre>
<blockquote>
<p>Be cautious if you're using a Python install that's managed by your
  operating system or another package manager. get-pip.py does not
  coordinate with those tools, and may leave your system in an
  inconsistent state.</p>
</blockquote>
<p>Refer: <a href="https://pip.pypa.io/en/stable/installing/" rel="nofollow noreferrer">PIP Installation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>And for <strong>Windows 8.1/10 OS Users</strong> just <strong>open</strong> cmd (command prompt) </p>
<p>write this : <code>C:\Users\%USERNAME%\AppData\Local\Programs\Python\Python36-32\Scripts</code></p>
<p>then </p>
<p>just write this : <code>pip3 install</code> {name of package}</p>
<p><strong>Hint:</strong> the location of folder <code>Python36-32</code> may get different for new python 3.x versions </p>
</div>
<div class="post-text" itemprop="text">
<p>If your Linux distro came with Python already installed, you should be able to install PIP using your system’s package manager. This is preferable since system-installed versions of Python do not play nicely with the get-pip.py script used on Windows and Mac.</p>
<p>Advanced Package Tool (Python 2.x)</p>
<pre><code>sudo apt-get install python-pip
</code></pre>
<p>Advanced Package Tool (Python 3.x)</p>
<pre><code>sudo apt-get install python3-pip
</code></pre>
<p>pacman Package Manager (Python 2.x)</p>
<pre><code>sudo pacman -S python2-pip
</code></pre>
<p>pacman Package Manager (Python 3.x)</p>
<pre><code>sudo pacman -S python-pip
</code></pre>
<p>Yum Package Manager (Python 2.x)</p>
<pre><code>sudo yum upgrade python-setuptools
sudo yum install python-pip python-wheel
</code></pre>
<p>Yum Package Manager (Python 3.x)</p>
<pre><code>sudo yum install python3 python3-wheel
</code></pre>
<p>Dandified Yum (Python 2.x)</p>
<pre><code>sudo dnf upgrade python-setuptools
sudo dnf install python-pip python-wheel
</code></pre>
<p>Dandified Yum (Python 3.x)</p>
<pre><code>sudo dnf install python3 python3-wheel
</code></pre>
<p>Zypper Package Manager (Python 2.x)</p>
<pre><code>sudo zypper install python-pip python-setuptools python-wheel
</code></pre>
<p>Zypper Package Manager (Python 3.x)</p>
<pre><code>sudo zypper install python3-pip python3-setuptools python3-wheel
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below video is how I did in cygwin:</p>
<p><a href="https://asciinema.org/a/hSu4kmJ6wb7b2UiuvxiXqtgGK" rel="nofollow noreferrer">https://asciinema.org/a/hSu4kmJ6wb7b2UiuvxiXqtgGK</a></p>
<p>There is weirdness in python's <code>pip</code>, <code>pip2</code>, <code>pip3</code> craziness. In crazy situations like these, it is imperative that there is less talking or explanations, but instead demonstrate things out. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>pip</code> is installed together when you install Python. You can use
<code>sudo pip install (module)</code>
or
<code>python3 -m pip install (module)</code>.</p>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/a/12946537/4279">easy way to install distribute/pip/virtualenv</a>. It supports  Python 3 too.</span>
<span class="comment-copy">@deamon: you may want to reconsider the accepted answer as <code>distribute</code> is deprecated and  <a href="http://stackoverflow.com/a/17517654/903011">another answer</a> solves the problem.</span>
<span class="comment-copy">Imho this is best than the accepted answer : <a href="https://stackoverflow.com/questions/17443354/install-numpy-on-python3-3-install-pip-for-python3/33964956#33964956" title="install numpy on python3 3 install pip for python3">stackoverflow.com/questions/17443354/…</a></span>
<span class="comment-copy">It's worth noting that the distribute install script has a <code>--user</code> flag that will install distribute just for the current user.</span>
<span class="comment-copy">@TylerCrompton - <code>easy_install pip</code>.</span>
<span class="comment-copy">distribute has since been superseded by [setup_tools] (<a href="https://pypi.python.org/pypi/setuptools" rel="nofollow noreferrer">pypi.python.org/pypi/setuptools</a>).</span>
<span class="comment-copy">From <a href="https://pythonhosted.org/distribute/" rel="nofollow noreferrer">pythonhosted.org/distribute</a>: "Distribute is a deprecated fork of the Setuptools project.". It is abandoned and not being maintained anymore.</span>
<span class="comment-copy">Pip's website says that it already comes with Python 3.4+ if you downloaded from python.org. However, when I type pip on terminal, I get command not found. So I decided to go through the python3's install docs again, where it mentions that python and pip should be accessed using the commands python3 and pip3 instead. This is not obvious from the documentation on either site.</span>
<span class="comment-copy">Then use <code>pip-3.2 install</code> (replace 3.2 with your version) to install the packages - also see <a href="http://stackoverflow.com/questions/10763440/how-to-install-python3-version-of-package-via-pip" title="how to install python3 version of package via pip">stackoverflow.com/questions/10763440/…</a></span>
<span class="comment-copy"><code>Unable to locate package python3-pip</code>. Has it been renamed?</span>
<span class="comment-copy">Are you using Ubuntu 12.04 LTS? It's not available there.</span>
<span class="comment-copy">+1 Confirmed working on ubuntu 13.04 after <code>sudo apt-get install -y python3.3</code> and using <code>type pip3</code></span>
<span class="comment-copy">seems to be just pip3 now</span>
<span class="comment-copy">+1 great answer.  what is a piece of cake on ubuntu was a world of pain on windows, the .exe installers made it all better.</span>
<span class="comment-copy">Pip will be shipped with Python 3.4 <a href="http://legacy.python.org/dev/peps/pep-0453/" rel="nofollow noreferrer">legacy.python.org/dev/peps/pep-0453</a></span>
<span class="comment-copy">After python get-pip.py, I also make a symlink from pip3 in /Library/Frameworks/Python.framework/Versions/3.3/bin (for example) to my system PATH, to make pip3 available on command line.</span>
<span class="comment-copy">By default, the commands pipX and pipX.Y will be installed on all platforms (where X.Y stands for the version of the Python installation), along with the pip Python package and its dependencies.</span>
<span class="comment-copy">I just installed python 3.4.1 from scratch on windows 8. Where is pip? How can i start it?</span>
<span class="comment-copy">worked on Debian (Jessie)</span>
<span class="comment-copy">worked on ubuntu 12.04 .. thnx.. :)</span>
<span class="comment-copy">@Duc Pharm Second answer worked on Ubuntu 16.10</span>
<span class="comment-copy">I think I've read about easy_install being depreciated due to insecure connections.  I'd read up before using easy_install.</span>
<span class="comment-copy">Thanks, worked for me on Python 3.3.4</span>
<span class="comment-copy">wget: unable to resolve host address ‘python-distribute.org’</span>
<span class="comment-copy">wget <a href="https://bootstrap.pypa.io/get-pip.py" rel="nofollow noreferrer">bootstrap.pypa.io/get-pip.py</a> &amp;&amp; python get-pip.py  This works for me and upgrades pip3</span>
<span class="comment-copy">Works for me thanks</span>
<span class="comment-copy">On CentOS:6 docker image:  python3 -m pip /usr/bin/python3: No module named pip</span>
<span class="comment-copy">Thank you, this command pointed my mistake: I built python 3.5 without libssl-dev package, so PIP was not built</span>
<span class="comment-copy">This also worked on cygwin! First update: <code>pip2 install --upgrade pip</code> and <code>apt-cyg install python3</code>. Then what you wrote and you've got <code>pip3</code>.</span>
<span class="comment-copy">This worked fantastically!</span>
<span class="comment-copy">Of all these methods, this is the only way I managed to get pip to install for python3.5 when I have both 3.4 and 3.5 on the system.</span>
<span class="comment-copy">ImportError: No module named 'pip' after I did all these for python3.4.1 from source off the original python website! <code>Python 3.4.1 (default, Aug  4 2016, 16:56:02) [GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin</code></span>
<span class="comment-copy">This helped until the <code>mkvirtualenv py3</code> line - on OS X El Capitan, i get a <code>command not found</code> error.  Also, to actually use python 3 after using brew to install it, i have to run <code>python3</code> rather than just <code>python</code> which still maps to python 2.7.   are there different steps for El Capitan?</span>
<span class="comment-copy">@hamx0r you would run python3 or you could symlink it:</span>
<span class="comment-copy">pip3 was not installed when I installed Python 3.4, I had to follow instructions here to get it.</span>
