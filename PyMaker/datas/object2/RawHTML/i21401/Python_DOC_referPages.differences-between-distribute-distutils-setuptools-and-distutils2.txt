<div class="post-text" itemprop="text">
<h2>The Situation</h2>
<p>I’m trying to port an open-source library to Python 3.  (<a href="http://sympy.org/">SymPy</a>, if anyone is wondering.) </p>
<p>So, I need to run <code>2to3</code> automatically when building for Python 3. To do that, I need to use <code>distribute</code>. Therefore, I need to port the current system, which (according to the doctest) is <code>distutils</code>. </p>
<p><br/></p>
<h2>The Problem</h2>
<p>Unfortunately, I’m not sure what’s the difference between these modules—<code>distutils</code>, <code>distribute</code>, <code>setuptools</code>. The documentation is sketchy as best, as they all seem to be a fork of one another, intended to be compatible in most circumstances (but actually, not all)…and so on, and so forth. </p>
<p><br/></p>
<h2>The Question</h2>
<p><strong>Could someone explain the differences?</strong> What am I supposed to use?  What is the most modern solution? (As an aside, I’d also appreciate some guide on porting to <code>Distribute</code>, but that’s a tad beyond the scope of the question…)</p>
</div>
<div class="post-text" itemprop="text">
<p>As of January 2017, all of the other answers to this question are at least two years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.</p>
<p>The <a href="https://packaging.python.org/" rel="noreferrer">Python Packaging User Guide</a> is worth a read. Every page has a "last reviewed" date displayed, so you can check the recency of the manual, and it's quite comprehensive. The fact that it's hosted on a subdomain of python.org of the Python Software Foundation just adds credence to it. The <a href="https://packaging.python.org/key_projects/" rel="noreferrer">Project Summaries</a> page is especially relevant here.</p>
<h2>Summary of tools:</h2>
<p>Here's a summary of the Python packaging landscape in January 2017:</p>
<h3>Supported tools:</h3>
<ul>
<li><p><strong>Distutils</strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3.0 to 3.6). It is useful for simple Python distributions, but lacks features. It introduces the <code>distutils</code> Python package that can be imported in your <code>setup.py</code> script.</p>
<ul>
<li><sub><a href="https://docs.python.org/3/library/distutils.html" rel="noreferrer">Official docs</a> | <a href="https://packaging.python.org/key_projects/#distutils" rel="noreferrer"><code>distutils</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p><strong>Setuptools</strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called <code>easy_install</code>. It also introduced the <code>setuptools</code> Python package that can be imported in your <code>setup.py</code> script, and the <code>pkg_resources</code> Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the <code>distutils</code> Python package. It should work well with <code>pip</code>. <a href="https://github.com/pypa/setuptools/releases" rel="noreferrer">It sees regular releases.</a></p>
<ul>
<li><sub><a href="https://setuptools.readthedocs.io/en/latest/" rel="noreferrer">Official docs</a> | <a href="https://pypi.python.org/pypi/setuptools" rel="noreferrer">Pypi page</a> | <a href="https://github.com/pypa/setuptools" rel="noreferrer">GitHub repo</a> | <a href="https://packaging.python.org/key_projects/#setuptools" rel="noreferrer"><code>setuptools</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p><strong>scikit-build</strong> is an improved build system generator that internally uses CMake to build compiled Python extensions. Because scikit-build isn't based on distutils, it doesn't really have any of its limitations. When ninja-build is present, scikit-build can compile large projects over three times faster than the alternatives. It should work well with <code>pip</code>. <a href="https://github.com/scikit-build/scikit-build/releases" rel="noreferrer">It sees regular releases.</a></p>
<ul>
<li><sub><a href="http://scikit-build.readthedocs.io/en/latest/" rel="noreferrer">Official docs</a> | <a href="https://pypi.org/project/scikit-build/" rel="noreferrer">Pypi page</a> | <a href="https://github.com/scikit-build/scikit-build" rel="noreferrer">GitHub repo</a></sub></li>
</ul></li>
</ul>
<h3>Deprecated/abandoned tools:</h3>
<ul>
<li><p><strong>Distribute</strong> was a fork of Setuptools. It shared the same namespace, so if you had Distribute installed, <code>import setuptools</code> would actually import the package distributed with Distribute. <strong><em>Distribute was merged back into Setuptools 0.7</em></strong>, so you don't need to use Distribute any more. In fact, the version on Pypi is just a compatibility layer that installs Setuptools.</p></li>
<li><p><strong>Distutils2</strong> was an attempt to take the best of Distutils, Setuptools and Distribute and become the standard tool included in Python's standard library. The idea was that Distutils2 would be distributed for old Python versions, and that Distutils2 would be renamed to <code>packaging</code> for Python 3.3, which would include it in its standard library. These plans did not go as intended, however, and currently, <strong><em>Distutils2 is an abandoned project</em></strong>. The latest release was in March 2012, and its Pypi home page has finally been updated to reflect its death.</p></li>
</ul>
<h3>Alpha software:</h3>
<ul>
<li><p><strong>Distlib</strong> is a tool that aims to implement a subset of the previous tools' functionality, but only functionality that is very well-defined in accepted PEPs. It is one of the tools of the PyPA (Python Package Authority), and it should hopefully be included eventually in the Python standard library someday. <strong><em>It is still considered alpha software, so end-users beware.</em></strong></p>
<ul>
<li><sub><a href="http://pythonhosted.org/distlib/" rel="noreferrer">Official docs</a> | <a href="https://pypi.python.org/pypi/distlib" rel="noreferrer">Pypi page</a> | <a href="https://bitbucket.org/vinay.sajip/distlib" rel="noreferrer">Bitbucket repo</a> | <a href="https://packaging.python.org/key_projects/#distlib" rel="noreferrer"><code>distlib</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p>There are <a href="https://packaging.python.org/key_projects/" rel="noreferrer">a couple more tools</a> (eg: Bento), but I won't mention them as they are too obscure or niche or early or undeveloped for this answer post, or else they're not direct alternatives.</p></li>
</ul>
<h2>Recommendation:</h2>
<p>So in conclusion, out of all these options, <strong>I would recommend Setuptools</strong>, unless your requirements are very basic and you only need Distutils. Setuptools works very well with Virtualenv and Pip, tools that I highly recommend. Virtualenv and Pip could both be considered official, as they're part of PyPA, and Python 3 now ships <a href="https://docs.python.org/3/library/ensurepip.html" rel="noreferrer"><code>ensurepip</code></a> (which helps you install <code>pip</code> on some systems).</p>
<p>If you're looking into Virtualenv, you might be interested in this question: <a href="https://stackoverflow.com/q/41573587/247696">What is the difference between <code>venv</code>, <code>pyvenv</code>, <code>pyenv</code>, <code>virtualenv</code>, <code>virtualenvwrapper</code>, etc?</a>. (Yes, I know, I groan with you.)</p>
<p>As a side-note, I recommend using Virtualenv 1.10 or higher, as it is the first release that recognises the Setuptools/Distribute merger, for both Python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>I’m a distutils maintainer and distutils2/packaging contributor.  I did a talk about Python packaging at ConFoo 2011 and these days I’m writing an extended version of it.  It’s not published yet, so here are excerpts that should help define things.</p>
<ul>
<li><p><strong>Distutils</strong> is the standard tool used for packaging.  It works rather well for simple needs, but is limited and not trivial to extend.</p></li>
<li><p><strong>Setuptools</strong> is a project born from the desire to fill missing distutils functionality and explore new directions.  In some subcommunities, it’s a <em>de facto</em> standard.  It uses monkey-patching and magic that is frowned upon by Python core developers.</p></li>
<li><p><strong>Distribute</strong> is a fork of Setuptools that was started by developers feeling that its development pace was too slow and that it was not possible to evolve it.  Its development was considerably slowed when distutils2 was started by the same group. 2013-August update: distribute is merged back into setuptools and discontinued.</p></li>
<li><p><strong>Distutils2</strong> is a new distutils library, started as a fork of the distutils codebase, with good ideas taken from setup tools (of which some were thoroughly discussed in PEPs), and a basic installer inspired by pip.  <s>The actual name you use to import Distutils2 is <code>packaging</code> in the Python 3.3+ standard library, or <code>distutils2</code> in 2.4+ and 3.1–3.2. (A backport will be available soon.)</s> Distutils2 did not make the Python 3.3 release, and it was put on hold.</p></li>
</ul>
<p>More info:</p>
<ul>
<li><a href="http://tarekziade.wordpress.com/2010/03/03/the-fate-of-distutils-pycon-summit-packaging-sprint-detailed-report/" rel="noreferrer">The fate of Distutils – Pycon Summit + Packaging Sprint detailed report</a></li>
<li><a href="http://wokslog.wordpress.com/2011/06/04/distutils-diff/" rel="noreferrer">A Quick Diff between Distutils and Distutils2</a></li>
</ul>
<p>I hope to finish my guide soon, it will contain more info about each library’s strong and weak points and a transition guide.</p>
</div>
<div class="post-text" itemprop="text">
<p>NOTE: Answer deprecated, Distribute now obsolete.</p>
<p>Yep, you got it. :-o I think at this time the preferred package is <a href="http://pypi.python.org/pypi/distribute" rel="nofollow noreferrer">Distribute</a>, which is a fork of setuptools, which are an extension of distutils (the original packaging system). Setuptools was not being maintained so is was forked and renamed, however when installed it uses the package name of setuptools! I think most Python developers now use Distribute, and I can say for sure that I do.</p>
</div>
<div class="post-text" itemprop="text">
<p>Many people complained here about the lack of clear community guidance on this issue.</p>
<p>Currently this looks like the best authoritative source on tools recommendations:
<a href="https://packaging.python.org/en/latest/current.html#tool-recommendations" rel="noreferrer">https://packaging.python.org/en/latest/current.html#tool-recommendations</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I realize that I have replied to your secondary question without addressing unquestioned assumptions in your original problem:</p>
<blockquote>
<p>I'm trying to port an open-source library (SymPy, if anyone is wondering) to Python 3. To
  do this, I need to run 2to3 automatically when building for Python 3.</p>
</blockquote>
<p>You <em>may</em>, not <em>need</em>.  Other strategies are described at <a href="http://docs.python.org/dev/howto/pyporting" rel="nofollow">http://docs.python.org/dev/howto/pyporting</a></p>
<blockquote>
<p>To do that, I need to use distribute,</p>
</blockquote>
<p>You <em>may</em> :)  distutils supports build-time 2to3 conversion for code (not docstrings), in a different manner that distribute’s: <a href="http://docs.python.org/dev/howto/pyporting#during-installation" rel="nofollow">http://docs.python.org/dev/howto/pyporting#during-installation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Updating this question in late 2014 where fortunately the Python packaging chaos has been greatly cleaned up by Continuum's "<a href="http://conda.pydata.org/docs/" rel="nofollow">conda</a>" package manager.  </p>
<p>In particular, conda quickly enables the creation of conda "<a href="http://conda.pydata.org/docs/intro.html" rel="nofollow">environments</a>". You can configure your environments with different versions of Python. For example:</p>
<p><code>conda create -n py34 python=3.4 anaconda</code></p>
<p><code>conda create -n py26 python=2.6 anaconda</code></p>
<p>will create two ("py34" or "py26") Python environments with different versions of Python.</p>
<p>Afterwards you can invoke the environment with the specific version of Python with:</p>
<p><code>source activate &lt;env name&gt;</code></p>
<p>This feature seems especially useful in your case where you are having to deal with different version of Python.</p>
<p>Moreover, conda has the following features:</p>
<ul>
<li>Python agnostic</li>
<li>Cross platform</li>
<li>No admin privileges required</li>
<li>Smart dependency management (by way of a SAT solver)</li>
<li>Nicely deals with C, Fortran and system level libraries that you may have to link against</li>
</ul>
<p>That last point is especially important if you are in the scientific computing arena.</p>
</div>
<div class="post-text" itemprop="text">
<p>This subject seems to still be in flux. As of 10-31-2013 the "Python Packaging User Guide" <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/current.html" rel="nofollow noreferrer">Quick Recommendations</a> defines "what toolset is currently recommended". It used to link to "The Future of Python Packaging" which is now, 1/20/2019, 5+ years later, a dead link. :)</p>
</div>
<span class="comment-copy">How confusing? I am come to python from a Java/C++ background. In those situations, distribution is very straight forward. With python, I a, completely confused regarding all these distribution systems.</span>
<span class="comment-copy">I agree, Python packaging/installation has way too many alternatives with no clear guidance from the community.</span>
<span class="comment-copy">I just wanted to link this related info on pip not supporting binary distributions <a href="http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere" rel="nofollow noreferrer">lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere</a></span>
<span class="comment-copy">@makeramen: See <a href="http://mail.python.org/pipermail/python-dev/2012-June/120430.html" rel="nofollow noreferrer">this thread on the mailing list</a>.</span>
<span class="comment-copy">And is not looking any better: <code>'Distribute' is a now deprecated fork of the 'Setuptools' project.</code> @ PyPI Distribute page.</span>
<span class="comment-copy">@KurzedMetal, according to the SetupTools folks, setuptools 0.7 will subsume both distribute and the old setuptools restoring order to the universe. So things actually are set to improve considerably!</span>
<span class="comment-copy">The <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/index.html" rel="nofollow noreferrer">Python Packaging User Guide</a> will have the most up-to-date info on state of python packaging. It was noted by Nick Coughlan at the <a href="https://www.youtube.com/watch?v=ePFWp3oSfyU" rel="nofollow noreferrer">2013 PyCon</a>.</span>
<span class="comment-copy">@Flimm The last edit is quite a while ago. Is Bento mature by now?</span>
<span class="comment-copy">No.  distutils2 takes some good ideas from setuptools/distribute, after standardization (PEPs) or not (for example, I mentor a GSoC student who’s adding a develop command and automatic scripts generation), but it won’t ever be a drop-in replacement: there are some parts we don’t want (eggs, VCS integration, etc.).  OTOH, distutils2 has some things that setuptools/distribute have not.  To ease transition, I think the distribute developers maybe will use distutils2 to support new standards and tools; I also think I remember the setuptools developer saying that he wants to support new standards.</span>
<span class="comment-copy">Where does ez_setup fall in all this? Also are there any updates to the status of distutils2?</span>
<span class="comment-copy">@ÉricAraujo Sorry to hear about the delay.  I really hope it’s ready in time for 3.4!  I <b>love</b> Python, but the packaging has always made me bang my head against the wall.  (In other news, how is your guide coming?  If it’s finished, could you link it in your answer above?)</span>
<span class="comment-copy">@AlexisHuet This kind of comment would be better if it would contain the link to the <a href="http://stackoverflow.com/a/14753678/131120">comment below</a> (which you can get from the <code>share</code> button).</span>
<span class="comment-copy">you should perhaps update the answer to mention that <code>distribute</code> was recently merged back in <code>setuptools</code>. The fact that much of the information out-there is out-dated adds to the confusion</span>
<span class="comment-copy">For the record, I accepted this answer because it told me the situation now (And the is fork of is extension of relation that the picture in the other answer just doesn't mention). And somewhere along the road I also learned that the documentation itself isn't usually sure what it's trying to say.</span>
<span class="comment-copy">@VPeric, Indeed, the documentation reflects the fact that this aspect of python is in a state of flux/ a mess.</span>
<span class="comment-copy">Thanks, though we've already decided to solve the problem by writing our script to handle the conversion. And yeah, I knew there were other options than using 2to3, but SymPy is a complex codebase (around 200k+ lines last time I checked) and using 2to3 was the only realistic strategy. Thanks again, in any case!</span>
<span class="comment-copy">The second link, "The Future of Python Packaging" was made in 2013. That  future is now; no wonder the link is dead.</span>
