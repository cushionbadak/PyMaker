<div class="post-text" itemprop="text">
<p>I have something like this:</p>
<pre><code>extensionsToCheck = ['.pdf', '.doc', '.xls']

for extension in extensionsToCheck:
    if extension in url_string:
        print(url_string)
</code></pre>
<p>I am wondering what would be the more elegant way to do this in python (without using the for loop)? I was thinking of something like this (like from c/c++), but it didn't work:</p>
<pre><code>if ('.pdf' or '.doc' or '.xls') in url_string:
    print(url_string)
</code></pre>
<p><em>Edit: I'm kinda forced to explain how is this different from the question below which is marked as potential duplicate (so it doesn't get closed I guess).</em> </p>
<p><em>The difference is, I wanted to check if a string is part of some list of strings whereas the other question is checking whether a string from a list of strings is a substring of another string. Similar, but not quite the same thing and semantics matter when you're looking for an answer online imho. These two questions are actually looking to solve the opposite problem of one another. The solution for both turns out to be the same though.</em> </p>
</div>
<div class="post-text" itemprop="text">
<p>Use a generator together with <code>any</code>, which short-circuits on the first True:</p>
<pre><code>if any(ext in url_string for ext in extensionsToCheck):
    print(url_string)
</code></pre>
<p><strong>EDIT:</strong> I see this answer has been accepted by OP. Though my solution may be "good enough" solution to his particular problem, and is a good general way to check if any strings in a list are found in another string, keep in mind that this is all that this solution does. <strong>It does not care WHERE the string is found e.g. in the ending of the string</strong>. If this is important, as is often the case with urls, you should look to the answer of @Wladimir Palant, or you risk getting false positives.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>extensionsToCheck = ('.pdf', '.doc', '.xls')

'test.doc'.endswith(extensionsToCheck)   # returns True

'test.jpg'.endswith(extensionsToCheck)   # returns False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is better to parse the URL properly - this way you can handle <code>http://.../file.doc?foo</code> and <code>http://.../foo.doc/file.exe</code> correctly.</p>
<pre><code>from urlparse import urlparse
import os
path = urlparse(url_string).path
ext = os.path.splitext(path)[1]
if ext in extensionsToCheck:
  print(url_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check if it matches this regex:</p>
<pre><code>'(\.pdf$|\.doc$|\.xls$)'
</code></pre>
<p>Note: if you extensions are not at the end of the url, remove the <code>$</code> characters, but it does weaken it slightly</p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehensions if you want a single line solution. The following code returns a list containing the url_string when it has the extensions .doc, .pdf and .xls or returns empty list when it doesn't contain the extension. </p>
<pre><code>print [url_string for extension in extensionsToCheck if(extension in url_string)]
</code></pre>
<p>NOTE: This is only to check if it contains or not and is not useful when one wants to extract the exact word matching the extensions. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is a variant of the list comprehension answer given by @psun.</p>
<p>By switching the output value, you can actually extract the matching pattern from the list comprehension (something not possible with the <code>any()</code> approach by @Lauritz-v-Thaulow)</p>
<pre><code>extensionsToCheck = ['.pdf', '.doc', '.xls']
url_string = 'http://.../foo.doc'

print [extension for extension in extensionsToCheck if(extension in url_string)]
</code></pre>
<blockquote>
<p>['.doc']`</p>
</blockquote>
<p>You can furthermore insert a regular expression if you want to collect additional information once the matched pattern is known (this could be useful when the list of allowed patterns is too long to write into a single regex pattern)</p>
<pre><code>print [re.search(r'(\w+)'+extension, url_string).group(0) for extension in extensionsToCheck if(extension in url_string)]
</code></pre>
<blockquote>
<p><code>['foo.doc']</code></p>
</blockquote>
</div>
<span class="comment-copy">use a list comprehension</span>
<span class="comment-copy">@AndreasJung There was a box. You thought outside of it.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/3389574/check-if-multiple-strings-exist-in-another-string">Check if multiple strings exist in another string</a></span>
<span class="comment-copy">this was exactly what I was looking for. in my case it does not matter where in the string is the extension. thanks</span>
<span class="comment-copy">Great suggestion. Using this example, this is how I check if any of the arguments matche the well known help flags: any([x.lower() in ['-?','-h','--help', '/h'] for x in sys.argv[1:]])</span>
<span class="comment-copy">@AXE-Labs using list comprehensions inside <code>any</code> will negate some of the possible gains that short circuiting provides, because the whole list will have to be built in every case. If you use the expression without square brackets (<code>any(x.lower() in ['-?','-h','--help', '/h'] for x in sys.argv[1:])</code>), the <code>x.lower() in [...]</code> part will only be evaluated until a True value is found.</span>
<span class="comment-copy">And if I want to know what ext is when any() returns True?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#any</a></span>
<span class="comment-copy">this one is clever - I didn't know tuples could do that!, but it only works when your substring is anchored to one end of the string.</span>
<span class="comment-copy">Way cool. I just wish there was something like "contains" rather than just startswith or endswith</span>
<span class="comment-copy">@BrDaHa you can use 'in' for contains . if 'string' in list:</span>
<span class="comment-copy">@ShekharSamanta sure, but that doesnâ€™t solve the problem of checking if one of multiple things is in a string, which is that the original question was about.</span>
<span class="comment-copy">Yes in that case we can use : if any(element in string.split('any delmiter') for element in list) &amp; for string if any(element in string for element in list)</span>
<span class="comment-copy">It's a URL, what if it has a query string?</span>
<span class="comment-copy">import re                                            re.search(pattern, your_string)</span>
<span class="comment-copy">while this answer works for the specified case, it isn't scalable or generic. you'd need a long regex for every pattern you want to match.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how it answers the question would significantly improve its long-term value. Please <a href="https://stackoverflow.com/posts/36846999/edit">edit</a> your answer to add some explanation.</span>
<span class="comment-copy">This is more readable than <code>any</code> solution, it's one of the best possible solutions for that question in my opinion.</span>
<span class="comment-copy">This one is superior to the <code>any()</code> solution in my opinion because it can be altered to return the specific matching value as well, like so: <code>print [extension for extension in extensionsToCheck if(extension in url_string)]</code> (see my answer for additional details and how to extract the matching <i>word</i> as well as the pattern from the url_string)</span>
