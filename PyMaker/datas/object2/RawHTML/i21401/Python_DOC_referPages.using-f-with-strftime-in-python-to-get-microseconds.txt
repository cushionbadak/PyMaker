<div class="post-text" itemprop="text">
<p>I'm trying to use strftime() to microsecond precision, which seems possible using %f (as stated <a href="http://docs.python.org/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">here</a>). However when I try the following code:</p>
<pre><code>import time
import strftime from time

print strftime("%H:%M:%S.%f")
</code></pre>
<p>...I get the hour, the minutes and the seconds, but %f prints as %f, with no sign of the microseconds. I'm running Python 2.6.5 on Ubuntu, so it should be fine and %f should be supported (it's supported for 2.6 and above, as far as I know.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use datetime's strftime function to get this. The problem is that time's strftime accepts a timetuple that does not carry microsecond information.</p>
<pre><code>from datetime import datetime
datetime.now().strftime("%H:%M:%S.%f")
</code></pre>
<p>Should do the trick!</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking at the wrong documentation. The <code>time</code> module <a href="http://docs.python.org/2/library/time.html#time.strftime" rel="noreferrer">has different documentation</a>. </p>
<p>You can use the <code>datetime</code> module <a href="http://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="noreferrer"><code>strftime</code></a> like this:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt;
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; now.strftime("%H:%M:%S.%f")
'12:19:40.948000'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do the work</p>
<pre><code>import datetime
datetime.datetime.now().strftime("%H:%M:%S.%f")
</code></pre>
<p>It will print </p>
<p><code>HH:MM:SS.microseconds</code> like this e.g <code>14:38:19.425961</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also get microsecond precision from the <code>time</code> module using its <code>time()</code> function.<br/>
(<code>time.time()</code> returns the time in seconds since epoch. Its fractional part is the time in microseconds, which is what you want.)</p>
<pre><code>&gt;&gt;&gt; from time import time
&gt;&gt;&gt; time()
... 1310554308.287459   # the fractional part is what you want.


# comparision with strftime -
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from time import time
&gt;&gt;&gt; datetime.now().strftime("%f"), time()
... ('287389', 1310554310.287459)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With python <code>time</code> module you can't get microseconds with <code>%f</code>.</p>
<p>For those who still want to go with <code>time</code> module only, here is a workaround:</p>
<pre><code>now = time.time()
mlsec = repr(now).split('.')[1][:3]
print time.strftime("%Y-%m-%d %H:%M:%S.{} %Z".format(mlsec), time.localtime(now))
</code></pre>
<p>You should get something like <strong>2017-01-16 16:42:34.625 EET</strong> (yes, I use miliseconds as it's fairly enough).</p>
<p>To brake the code into details, paste below code into python console:</p>
<pre><code>import time
# get current timestamp
now = time.time()
# debug now
now
print now
type(now)
# debug strf time
struct_now = time.localtime(now)
print struct_now
type(struct_now)
# print nicely formatted date
print time.strftime("%Y-%m-%d %H:%M:%S %Z", struct_now)
# get miliseconds
mlsec = repr(now).split('.')[1][:3]
print mlsec
# get your required timestamp string
timestamp = time.strftime("%Y-%m-%d %H:%M:%S.{} %Z".format(mlsec), struct_now)
print timestamp
</code></pre>
<p>For clarification purposes, I also paste my python 2.7.12 result here:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; # get current timestamp
... now = time.time()
&gt;&gt;&gt; # debug now
... now
1484578293.519106
&gt;&gt;&gt; print now
1484578293.52
&gt;&gt;&gt; type(now)
&lt;type 'float'&gt;
&gt;&gt;&gt; # debug strf time
... struct_now = time.localtime(now)
&gt;&gt;&gt; print struct_now
time.struct_time(tm_year=2017, tm_mon=1, tm_mday=16, tm_hour=16, tm_min=51, tm_sec=33, tm_wday=0, tm_yday=16, tm_isdst=0)
&gt;&gt;&gt; type(struct_now)
&lt;type 'time.struct_time'&gt;
&gt;&gt;&gt; # print nicely formatted date
... print time.strftime("%Y-%m-%d %H:%M:%S %Z", struct_now)
2017-01-16 16:51:33 EET
&gt;&gt;&gt; # get miliseconds
... mlsec = repr(now).split('.')[1][:3]
&gt;&gt;&gt; print mlsec
519
&gt;&gt;&gt; # get your required timestamp string
... timestamp = time.strftime("%Y-%m-%d %H:%M:%S.{} %Z".format(mlsec), struct_now)
&gt;&gt;&gt; print timestamp
2017-01-16 16:51:33.519 EET
&gt;&gt;&gt;
</code></pre>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>When the "%f" for micro seconds isn't working please use the following method</p>
<pre><code>import datetime

def getTimeStamp():
    dt = datetime.datetime.now()
    return dt.strftime("%Y%j%H%M%S") + str(dt.microsecond)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want an integer, try this code:</p>
<pre><code>import datetime
print(datetime.datetime.now().strftime("%s%f")[:13])
</code></pre>
<p>Output:</p>
<pre><code>1545474382803
</code></pre>
</div>
<span class="comment-copy">Not if you want to use <code>%z</code></span>
<span class="comment-copy">@Vallentin pretty sure it's the opposite! <code>datetime</code> <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">supports the <code>%z</code> directive</a> while <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="nofollow noreferrer">time doesn't appear to</a>.</span>
<span class="comment-copy">now look at Python 3 instead ;)</span>
<span class="comment-copy">Both support <code>%z</code> in Python 3 :-) <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">here's datetime</a> and then <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer">time</a></span>
<span class="comment-copy">note the <code>from datetime import datetime</code>.  If you just do <code>import datetime</code> you will have to use <code>datetime.datetime.now().strftime("%H:%M:%S.%f")</code></span>
<span class="comment-copy">Here's the link to the datetime module's documentation: <a href="http://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">docs.python.org/2/library/…</a></span>
<span class="comment-copy">Thanks for the post. Why is there a datetime and time module?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/7479777/difference-between-datetime-vs-time-modules" title="difference between datetime vs time modules">stackoverflow.com/questions/7479777/…</a></span>
<span class="comment-copy">Excellent. Thanks for all your help. I've managed to get things working, though found an odd bug that means microseconds don't appear when running the script as sudo on a particular cset, but do if I log in as sudo before trying to run it on a particular cset. Odd.</span>
<span class="comment-copy">Your example tells me you type code quite fast. :)</span>
<span class="comment-copy">This won't work if the dt.microsecond has less than 6 digits.</span>
<span class="comment-copy">This was the only solution that actually worked for me.  In Jython on Windows %f seems to always print a literal %f.   I wanted milliseconds so used str(dt.microsecond)[0:3]</span>
<span class="comment-copy">str(dt.microsecond)[0:3] might produce a wrong result (e.g. 300 microseconds are 0.300 milleseconds, but it will print 300!)</span>
<span class="comment-copy">"%03d"%int(dt.microsecond/1000) -&gt; this prints the millseconds and not microseconds</span>
