<div class="post-text" itemprop="text">
<p>I've met a question about list comprehension.</p>
<pre><code>num1 = [5,10,15]
num2 = [i**2 if i == 10 else i-5 if i &lt; 7 else i+5 for i in num1]
</code></pre>
<p>why <code>num2</code> is <code>num2 = [0,100,20]</code>?
How does the result get?</p>
</div>
<div class="post-text" itemprop="text">
<p>Read it as:</p>
<pre><code>num2 = [i**2 if i == 10
        else i-5 if i &lt; 7
        else i+5

        for i in num1]
</code></pre>
<ul>
<li>5 is not equal to 10, but it is less than 7, so it yields 5 - 5 (i.e. 0)</li>
<li>10 is equal to 10, so it yields 10 ** 2 (i.e. 100)</li>
<li>15 is not equal to 10, not equal to 7, thus we use the default case, so it yields 15 + 5 (i.e. 20)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This list comprehension is exactly equivalent to:</p>
<pre><code>num2 = []
for i in num1:
    if i == 10:
        num2.append(i**2)
    else:
        if i &lt; 7:
            num2.append(i-5)
        else:
            num2.append(i+5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>num2 = [i**2 if i == 10 else i-5 if i &lt; 7 else i+5 for i in num1]

is same as:

num2 = [None] * len(num1)
index = 0
for i in num1:
    if i == 10:
        num2[index] = i**2
    elif i &lt; 7:
        num2[index] = i-5
    else:
        num2[index] = i+5
    index += 1
</code></pre>
</div>
<span class="comment-copy">It's easy to understand as answers below. But why do you need to write list comprehension like this way? I don't think list comprehension should be use here.</span>
<span class="comment-copy">Thanks,bro.You are very nice.</span>
<span class="comment-copy">Except you can't assign to <code>num2[i]</code>: <code>i</code> is the value from <code>num1</code>, not the index. Also you can't assign to any index in an empty list. You would use <code>append</code>.</span>
<span class="comment-copy">@khelwood Try this now</span>
<span class="comment-copy">Yes, I can see you've adjusted it to avoid the errors, ending up with code that is only unnecessariliy complicated.</span>
<span class="comment-copy">It is not unnecessarily complicated. Infact, an experienced programmer would appreciate this approach. When you call append and the allocated space is used, it will create a new space and move all items making the operation costly. I would say it is just another efficient way of solving same problem and not an unnecessarily complicated solution.</span>
<span class="comment-copy">It is unnecessarily complicated enough that you got it wrong twice before you came up with a version that worked.</span>
