<div class="post-text" itemprop="text">
<p>I have 2 data frames. First dataframe has numbers as index. Second dataframe has datetime as index. The slice operator (:) behaves differently on these dataframes.</p>
<p>Case 1</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'A':[1,2,3]}, index=[0,1,2])
&gt;&gt;&gt; df
   A
0  1
1  2
2  3
&gt;&gt;&gt; df [0:2]
   A
0  1
1  2
</code></pre>
<p>Case 2 </p>
<pre><code>&gt;&gt;&gt; a = dt.datetime(2000,1,1)
&gt;&gt;&gt; b = dt.datetime(2000,1,2)
&gt;&gt;&gt; c = dt.datetime(2000,1,3)
&gt;&gt;&gt; df = pd.DataFrame({'A':[1,2,3]}, index = [a,b,c])
&gt;&gt;&gt; df
            A
2000-01-01  1
2000-01-02  2
2000-01-03  3
&gt;&gt;&gt; df[a:b]
            A
2000-01-01  1
2000-01-02  2
</code></pre>
<p>Why does the final row gets excluded in case 1 but not in case 2?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dont use it, better is use <code>loc</code> for consistency:</p>
<pre><code>df = pd.DataFrame({'A':[1,2,3]}, index=[0,1,2])

print (df.loc[0:2])
   A
0  1
1  2
2  3

a = datetime.datetime(2000,1,1)
b = datetime.datetime(2000,1,2)
c = datetime.datetime(2000,1,3)
df = pd.DataFrame({'A':[1,2,3]}, index = [a,b,c])

print (df.loc[a:b])
            A
2000-01-01  1
2000-01-02  2
</code></pre>
<p>Reason, why last row is omitted is possible find in <a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#slicing-ranges" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>With DataFrame, slicing inside of [] slices the rows. This is provided largely as a convenience since it is such a common operation.</p>
</blockquote>
<pre><code>print (df[0:2])
   A
0  1
1  2
</code></pre>
<p>For selecting by datetimes <a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#exact-indexing" rel="nofollow noreferrer">exact indexing</a> is used :</p>
<blockquote>
<p>... In contrast, indexing with Timestamp or datetime objects is exact, because the objects have exact meaning. These also follow <strong>the semantics of including both endpoints</strong>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Okay to understand this first let's run an experiment</p>
<pre><code>import pandas as pd
import datetime as dt
a = dt.datetime(2000,1,1)
b = dt.datetime(2000,1,2)
c = dt.datetime(2000,1,3)
df = pd.DataFrame({'A':[4,5,6]}, index=[a,b,c])
</code></pre>
<p>Now let's use </p>
<p><code>df2[0:2]</code></p>
<p>Which gives us</p>
<pre><code>            A
2000-01-01  1
2000-01-02  2
</code></pre>
<p>Now this behavior is consistent through python and list slicing, but if you use
<code>df[a:c]</code></p>
<p>You get</p>
<pre><code>    A
2000-01-01  1
2000-01-02  2
2000-01-03  3
</code></pre>
<p>this is because <code>df[a:c]</code> overrides the default list slicing method as indexes do not correspond to integers, and in the function written in Pandas which also includes the last element, so if your indexes were integers, pandas defaults to inbuilt slicing, whereas if they are not integers, this effect is observed, as already mentioned in the answer by jezrael, it is better to use <code>loc</code>, as that has more consistency across the board.</p>
</div>
<span class="comment-copy">Maybe just use <b>.loc</b> and <b>.iloc</b> for name and index slicing respectively instead?</span>
