<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5595425/what-is-the-best-way-to-compare-floats-for-almost-equality-in-python">What is the best way to compare floats for almost-equality in Python?</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>When comparing whether two float in Python, I see code always like this to compare for a small value epsilon, wondering what is the best practices to select the right epsilon value? And what is the scene behind it? Thanks.</p>
<pre><code>epsilon = 0.000001
abs(a - b)&lt;epsilon
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer is quite complex since you need to know how single or double precision floats are saved (<a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format" rel="nofollow">Wikipedia</a>), as a rule of thumb you can use <a href="https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics" rel="nofollow">this Table on Wikipedia</a> as reference for choosing epsilon. But there might be some exceptions specially if you don't exactly know if it is float32 or float64 (or for Linux/Mac there are also float96 and float128 around).</p>
<p>But I guess best practise would be to use some predefined function like <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_almost_equal.html" rel="nofollow">numpy_assert_array_almost_equal</a> (numpy required).</p>
<p>I guess everyone is handling it somehow different and as long as you can trust your results every method has its pros and cons. And always keep in mind that floats can go totally haywire with the wrong kind of arithmetic operations. i.e. where small differences of big values are being calculated. And in the end the value of epsilon depends on which precision <em>you</em> need and that should be tested there.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is an assert function in <code>numpy</code> for this purpose, which uses seven decimal precision by default.</p>
<pre><code>from numpy.testing import assert_almost_equal

a = 0.000000001
b = 0.0000000001

&gt;&gt;&gt; assert_almost_equal(a, b)
# Nothing returned.

b = 1
&gt;&gt;&gt; assert_almost_equal(a, b)
AssertionError: 
Arrays are not almost equal to 7 decimals
 ACTUAL: 1e-09
 DESIRED: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you are looking for the best epsilon ever, to get best comparison you could use python's sys epsilon <a href="https://docs.python.org/3/library/sys.html#sys.float_info" rel="nofollow">using</a>: </p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.float_info.epsilon
2.220446049250313e-16
</code></pre>
<p>but if you are more looking to have this epsilon dynamically based on your a and b I would suggest go for: </p>
<pre><code>abs(f1-f2) &lt; tol*max(abs(f1),abs(f2))
</code></pre>
<p>or </p>
<pre><code>abs(a-b) &lt;= max( rel_tol * max(abs(a), abs(b)), abs_tol )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>what is the best practices to select the right epsilon value? </p>
</blockquote>
<p>It depends on the requirements of the application.</p>
<p>If it is planning a Earth-bound trajectory for reentry of a spacecraft I am in, I would choose a very small value, like <code>epsilon = (a+b) * 1e-15</code>.</p>
<p>If it is projecting the U.S. federal deficit (which inherently has great uncertainties), a much larger epsilon is likely suitable:  <code>epsilon = (a+b) * 0.002</code>.</p>
</div>
<span class="comment-copy">in python 3.5 this was added: <a href="https://docs.python.org/3.5/library/math.html#math.isclose" rel="nofollow noreferrer">docs.python.org/3.5/library/math.html#math.isclose</a> . according to the doc it returns more or less: <code>abs(a-b) &lt;= max( rel_tol * max(abs(a), abs(b)), abs_tol )</code></span>
<span class="comment-copy">Are you looking to get the smallest epsilon, or you think you would rather to change your epsilon dynamically based on your a and b?</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/6837007/comparing-float-double-values-using-operator" title="comparing float double values using operator">stackoverflow.com/questions/6837007/…</a> for one way to do it. The question was for Java, but the answer is universal.</span>
<span class="comment-copy">Python only has one floating point type <code>float</code>, and on every implementation I'm familiar with it's 64 bit IEEE.</span>
<span class="comment-copy">The precision boundary selected for Python 3.5 is in an answer I left at the other question. I gave you sufficient information to make an informed decision if you feel differently.</span>
<span class="comment-copy">Thanks MSeifert, I read through this document (<a href="https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics" rel="nofollow noreferrer">en.wikipedia.org/wiki/…</a>) and really very informative. I am confused by one thing, in the table, there are two columns called "Machine epsilon", wondering what are their differences?</span>
<span class="comment-copy">@LinMa The difference is how you want to define it: The first one is just the second one divided by two. So the first one is propably the one you want because you compare the <i>absolute</i> of the difference of two floats. I guess the first one is like a <code>+/-</code> error and the second is more like the absolute error on any float. But I'm not exactly sure about that.</span>
<span class="comment-copy">@LinMa  Unfortunatly there is not easy way to determine such a epsilon. Because comparing the quality of a result has another epsilon as the initial values. Just suposse you have a variable <code>A</code> with floating point error <code>epsilon1</code>. If you look at the error of <code>B</code> which is <code>A+A</code> it's floating point error is now <code>2*epsilon</code>. For adding that might be reconstrubtable but suppose you use <code>A+B*C/D**E % math.exp(F)</code> what will be the error of this result?</span>
<span class="comment-copy">Maybe I am wrong but try <code>a=0</code> then try <code>for i in range(1000): a+=0.1</code> and <code>print(a-100)</code> then again the <code>for loop</code> and <code>print(a-200)</code> you can try this again and again and at least on my computer the difference is getting bigger.</span>
<span class="comment-copy">It proves that you cannot define an universial <code>epsilon</code> for arbitary float comparisons because you may or may not know how the float was processed.</span>
<span class="comment-copy">Hi Alexander, very neat, but how to choose the value of decimal in your practices?</span>
<span class="comment-copy">It is very subjective and entirely depends on what you're working on.  A question like that is a programming question, per se, and isn't really suitable for SO in my opinion.</span>
<span class="comment-copy">** NOT a programming question</span>
<span class="comment-copy">Thanks Alexander, I think Python should have its own precision boundary for float and why not just use it as epsilon? Thanks.</span>
<span class="comment-copy">Thanks user 12321, a bit lost, what is the benefit of dynamically using epsilon? An example is appreciated.</span>
<span class="comment-copy">Thanks wallyk for the samples, and I agree with you different precision is for different cases. My question is more about from Python internal representation, what is the precision boundary it could be. As your example showed, in some cases, you can use 1e-15, but how do I know if Python internally could have such precision for floats or doubles? Your insights are appreciated. Thanks.</span>
