<div class="post-text" itemprop="text">
<p>It is clear to me that <code>None</code> is used to signify the lack of a value. But since everything must have an underlying value during implementation, I'm looking to see what value has been used in order to signify the absence of a value, regarding <code>CPython</code>.</p>
<p>I understand, based on the <a href="https://docs.python.org/3/c-api/none.html#c.Py_None" rel="nofollow noreferrer">documentation</a>, that <code>NoneObject</code> is a singleton. Since my <code>c</code> skills are rusty, my best, amateur guess, would be that the value of <code>None</code> would be the pointer to the memory allocated for the <code>Py_None</code> object; since it is a singleton this would guarantee uniqueness. Or is it assigned to <code>c</code>'s <code>NULL</code> which has a value of <code>0x0000</code> based on the second answer in <a href="https://softwareengineering.stackexchange.com/questions/147713/where-are-null-values-stored-or-are-they-stored-at-all">this question</a>?</p>
<p>Additionally, the documentation also points out:</p>
<blockquote>
<p>Note that the PyTypeObject for None is not directly exposed in the Python/C API.</p>
</blockquote>
<p>Which I'm guessing means you cannot find it searching through source. (Which I did, not knowing where to look, for <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects/object.c" rel="nofollow noreferrer"><code>object.c</code></a> naively believing I could understand anything) </p>
<p>But I'm not certain about my opinion on this so I asked.</p>
<p>What is the <code>c</code> level value for the <code>Py_None</code> object in <code>CPython</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Py_None</code> is a macro definition in <code>Include/object.h</code>. It is a an alias for <code>_Py_NoneStruct</code> in <code>object.c</code> which is a static (as in storage) global variable of <code>PyObject</code> type (which is a struct). It is assigned in Python terms to be of <code>NoneType</code> (defined right above it in <code>object.c</code> and only used once for <code>_Py_NoneStruct</code>).</p>
<p>So it's not NULL or any other special value in C, it's a singleton <code>PyObject</code> instance of <code>_PyNone_Type</code>. As for the <code>_PyNone_Type</code> <code>PyTypeObject</code> not being exposed, I suppose they refer to the <code>static</code> keyword (i.e. internal linkage) which means that the <code>PyTypeObject</code> is only accessible within <code>object.c</code> and is only used once for the definition of <code>PyNone</code>.</p>
<p>Just to add to this a bit, whenever the documentation says that <code>PyNone</code> has no type, it should not be taken literally. It has a special kind of type, <code>NoneType</code>, which you can still access through the <code>None</code> singleton but you can't create new instances or do any other thing you can do with a normal type. There seems to be a hard-coded limitation for not creating new instances, and although I can't find exactly where it's defined in the CPython source you can see its effect when trying to create a new instance:</p>
<pre><code>&gt;&gt;&gt; type(None)
&lt;type 'NoneType'&gt;
&gt;&gt;&gt; type(None)()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot create 'NoneType' instances
</code></pre>
<p>EDIT: It seems that the error is thrown from <code>typeobject.c</code> when the <code>tp_new</code> field is NULL. Surprisingly though <code>_PyNone_Type</code> seems to be defined with a non-NULL <code>tp_new</code> (points to the static <code>none_new</code> in <code>object.c</code>). It might be set to NULL afterwards at some point, but it's just an implementation detail and doesn't really make a difference for the scope of your question.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Py_None</code> is <code>Py_None</code>, and must be increfed and returned from a function during normal operation if no other value is to be returned. <code>NULL</code> is only returned if an exception is to be signaled to the VM, with the actual exception object <a href="https://docs.python.org/2/c-api/exceptions.html" rel="nofollow">created/assigned separately</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Py_None</code> is the value of the address of the <code>_Py_NoneStruct</code> struct definition.</p>
<p>See <a href="https://hg.python.org/releasing/2.7.9/file/753a8f457ddc/Include/object.h#l841" rel="nofollow">the code</a>:</p>
<pre><code>/*
_Py_NoneStruct is an object of undefined type which can be used in contexts
where NULL (nil) is not suitable (since NULL often means 'error').

Don't forget to apply Py_INCREF() when returning this value!!!
*/
PyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */
#define Py_None (&amp;_Py_NoneStruct)
</code></pre>
</div>
<span class="comment-copy"><code>Py_None</code> <i>is</i> the value.</span>
<span class="comment-copy"><code>Py_None</code> is a pointer. You can get the memory address it points to using <code>id(None)</code></span>
<span class="comment-copy">So for <code>Py_None</code> it's <code>value == identity</code> ?</span>
<span class="comment-copy">With regard to your final sentence, I think the reason that no new instances of the <code>NoneType</code> type can be created (and the error is raised instead) is because a <code>tp_new</code> space in the type struct has been intentionally left out. The error is raised in <a href="https://github.com/python/cpython/blob/0d2e50ea6ac5fa6e7df32dbd4bbbf6da5bcdfdc4/Objects/typeobject.c#l890" rel="nofollow noreferrer">this function</a></span>
<span class="comment-copy">That's what I figured, @ajcr although it seems to be actually non-NULL (<a href="https://github.com/python/cpython/blob/HEAD/Objects/object.c#L1466" rel="nofollow noreferrer">here</a>). It must be set to NULL at some point because there doesn't seem to be another way for this error to be raised.</span>
<span class="comment-copy">I'm still not getting this.  <code>Py_None</code> is <code>Py_None</code> is equally as confusing as what I'm trying to ask. From what I understand, <code>Py_None</code> must be a <code>c</code> level struct, or a similar <code>c</code> value. What is the <code>c</code> value of <code>Py_None</code> would probably be a better question.</span>
<span class="comment-copy"><a href="https://hg.python.org/releasing/2.7.9/file/753a8f457ddc/Include/object.h#l841" rel="nofollow noreferrer">hg.python.org/releasing/2.7.9/file/753a8f457ddc/Include/â€¦</a></span>
