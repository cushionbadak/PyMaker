<div class="post-text" itemprop="text">
<p>Im trying to achieve next effect:</p>
<p>I have two counters, one should be "Current" counter that should count from 1 to 123, while there should be also counter named "Total" on bottom of console that should display total count for example 234.</p>
<p><strong>This is my code:</strong></p>
<pre><code>import sys
import time

n = 0
for _ in range(0, 5):
    i = 1
    for _ in range(0, 123):
        sys.stdout.write("\r    " + "Current: %d" % i)
        sys.stdout.flush()
        i = i + 1
        n = n + 1
        time.sleep(0.01)

    print('')
    sys.stdout.write("\rTotal: %d" % n)
    time.sleep(0.5)
</code></pre>
<p>It is almost what i want, except that "Total" line is overwritten every time when inner for loop is performed. SO there should be always displayed only one "Total" line with total number of loops.</p>
<p>Is this possible to do in Python and how?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want two lines, you can make use of the <code>CPL</code> (Cursor Previous Line) <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow">ANSI escape code</a> to move the cursor to the beginning of the previous line.</p>
<pre><code>import sys
import time
import colorama

print('')
total = 0
for _ in range(0, 5):
    current = 1
    sys.stdout.write("\033[F")
    for _ in range(0, 123):
        sys.stdout.write("\rCurrent: %03d" % current)
        sys.stdout.flush()
        current += 1
        total += 1
        time.sleep(0.01)

    sys.stdout.write("\nTotal: %d" % total)
    sys.stdout.flush()
    time.sleep(0.5)
</code></pre>
<p>Note that on Windows you have to import the <a href="https://pypi.python.org/pypi/colorama" rel="nofollow"><code>colorama</code> module</a> first.</p>
</div>
<div class="post-text" itemprop="text">
<p>The console writing is only happening on a single line and hence it will clear the 'total'.</p>
<p>One way is to always print the 'Total' along with the 'Current' on the next line.</p>
<pre><code>for _ in range(0, 123):
    i = i + 1
    sys.stdout.write("\r    " + "Current: %d" % i)
    n = n + 1
    sys.stdout.write("\rTotal: %d" % n)

    sys.stdout.flush()
</code></pre>
<p>Or, have a separate rendering loop (on another thread) which prints these global variables (current and total) continuously. It will have its own refresh rate.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solved after playing with curses as suggested by @Joost</p>
<p><strong>Final code:</strong></p>
<pre><code>import time
import curses

stdscr = curses.initscr()

n = 0
b = 0
for _ in range(0, 5):
    i = 1
    for _ in range(0, 123):
        stdscr.addstr(b, 0, "Current: %d" % i)
        i = i + 1
        n = n + 1
        time.sleep(0.01)
        stdscr.addstr(b+1, 0, "Total: %d" % n)
        stdscr.refresh()
    b = b + 1
</code></pre>
</div>
<span class="comment-copy">This sounds like you're building a more complex console GUI than simple io. Have you seen <a href="https://docs.python.org/3/library/curses.html" rel="nofollow noreferrer">docs.python.org/3/library/curses.html</a>?</span>
<span class="comment-copy">Putting everything in one line would be a lot easier...</span>
<span class="comment-copy">@Joost No, but i will check it out.</span>
<span class="comment-copy">@swenzel thats not what i want</span>
<span class="comment-copy">@RhymeGuy got that. I just wanted to point out that sometimes the alternative, despite being less attractive, might be worth considering if it saves you a lot of time and a headache ;)</span>
<span class="comment-copy">This works same as my example, and thats not what i want :)</span>
<span class="comment-copy">@RhymeGuy Are you saying that the <code>Total</code> line gets overwritten? Works fine for me. Are you using the <code>colorama</code> module?</span>
<span class="comment-copy">Yes, im using colorama module. Total is line gets overwritten.</span>
<span class="comment-copy">@RhymeGuy What OS/Terminal are you using?</span>
<span class="comment-copy">Windows 7 with PyCharm console</span>
<span class="comment-copy">Thats not what im trying to achieve.</span>
