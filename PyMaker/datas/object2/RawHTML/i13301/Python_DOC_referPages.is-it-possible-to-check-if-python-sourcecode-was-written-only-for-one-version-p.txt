<div class="post-text" itemprop="text">
<p>I make some source code analysis and need to know if the source code was written only for one version (python 2 or python 3). Ideally without starting the script with both runtimes and check if it raises an exception. I dont want to check which runtimes are installed like <a href="https://stackoverflow.com/questions/30320265/find-out-python-version-from-source-code-or-heroku">here</a>.</p>
<p>Maybe I am looking for some sort of linter, which tests for typical python 2 code like </p>
<blockquote>
<p>print "hello"</p>
</blockquote>
<p>instead of </p>
<blockquote>
<p>print("hello")</p>
</blockquote>
<p>This is my problem I read a file like this for example:</p>
<pre><code>for i in range(10):
    print(True) if (i % 2 == 1) else print(False)
</code></pre>
<p>which works fine under python 3 and raises an error for python2</p>
<pre><code>print(True) if (i % 2 == 1) else print(False)
                                         ^
SyntaxError: invalid syntax
</code></pre>
<p>Maybe with the <a href="https://docs.python.org/2/library/compiler.html#module-compiler" rel="nofollow">compiler</a> but it is marked as deprecated</p>
<p>Any thoughts for solving this problem or any known linter which tells me if the code is python 2 or 3 ? Or is running the file with both runtimes my only option?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot reliably detect that code was written for Python 3 only.</p>
<p>If code uses <code>print</code> as a <em>statement</em> you can be certain it will only work on Python 2. Similarly, code using <code>except Exception, target:</code> is only going to run on Python 2.</p>
<p>But it is possible to write <em>polyglot</em> Python code; code that'll run on both Python 2 and 3, by using <a href="https://docs.python.org/2/reference/simple_stmts.html#future" rel="nofollow"><code>from __future__</code> statements</a>; <code>from __future__ import print_function</code> will let you use the <code>print()</code> function on Python 2, for example.</p>
<p>Your best bet is to go through the <a href="https://docs.python.org/3/whatsnew/3.0.html#common-stumbling-blocks" rel="nofollow">major Python 3 syntax changes</a>, and create a series of <em>heuristics</em> to make an educated guess about the Python version.</p>
<p>The Python-Future project has a <a href="http://python-future.org/compatible_idioms.html" rel="nofollow">helpful cheatsheet</a> that probably is of help here too.</p>
</div>
<span class="comment-copy">Some code is written to work on <i>both</i>. If there is a <code>from __future__ import print_function</code> at the top, <code>print()</code> will work on both versions.</span>
<span class="comment-copy">Does <code>from __future__ import print_function</code> work on Python 3 itself?</span>
<span class="comment-copy">@lilezek: it will, that's the whole point of the technique.</span>
<span class="comment-copy">okay i will change the title only for one version</span>
<span class="comment-copy">No worries, you just need to <code>magic_num = f.read(4).encode("hex")</code> then compare it to a dict of magic numbers mapped to versions</span>
