<div class="post-text" itemprop="text">
<p>I have a csv file with data like this:</p>
<pre><code>Name Value Value2 Value3 Rating
ddf  34      45    46     ok
ddf  67      23    11     ok
ghd  23      11    78     bad
ghd  56      33    78     bad
.....
</code></pre>
<p>WHat I want to do is loop through my csv and add together the rows that have the same name, the string at the end of each row wil always remain the same for that name so there is no fear of it changing. How would I go about changing it to this in python?</p>
<pre><code>Name Value Value2 Value3 Rating
ddf  101     68    57     ok
ghd  79      44    156    bad
</code></pre>
<p>EDIT:</p>
<p>In my code, the first thing I did was sort the list into order so the same names would be near each other, then I tried to use a for loop to add the numbered lines together by checking if the name value is the same on the first column. It's a very ugly way of doing it and I am at my wits end.</p>
<pre><code>sortedList = csv.reader(open("keywordReport.csv"))

editedFile = open("output.csv",'w')
 wr = csv.writer(editedFile, delimiter = ',')

 name = ""

 sortedList = sorted(sortedList, key=operator.itemgetter(0), reverse=True)

 newKeyword = ["","","","","",""]

for row in sortedList:   
            if row[0] != name:
                wr.writerow(newKeyword)
                name = row[0]
            else:
                newKeyword[0] = row[0] #Name
                newKeyword[1] = str(float(newKeyword[1]) + float(row[1]))
                newKeyword[2] = str(float(newKeyword[2]) + float(row[2]))
                newKeyword[3] = str(float(newKeyword[3]) + float(row[3]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The pandas way is very simple:</p>
<pre><code>import pandas as pd

aframe = pd.read_csv('thefile.csv')

Out[19]:
Name    Value   Value2  Value3  Rating
0   ddf 34  45  46  ok
1   ddf 67  23  11  ok
2   ghd 23  11  78  bad
3   ghd 56  33  78  bad

r = aframe.groupby(['Name','Rating'],as_index=False).sum()

Out[40]:
Name    Rating  Value   Value2  Value3
0   ddf ok  101 68  57
1   ghd bad 79  44  156
</code></pre>
<p>If you need to do further analysis and statistics Pandas will take you a long way with little effort. For the use case here is like using a hammer to kill a fly, but I wanted to provide this alternative.</p>
</div>
<div class="post-text" itemprop="text">
<p>file.csv</p>
<pre><code>Name,Value,Value2,Value3,Rating
ddf,34,45,46,ok
ddf,67,23,11,ok
ghd,23,11,78,bad
ghd,56,33,78,bad
</code></pre>
<p>code</p>
<pre><code>import csv

def map_csv_rows(f):
    c = [x for x in csv.reader(f)]
    return [dict(zip(c[0], map(lambda p: int(p) if p.isdigit() else p, x))) for x in c[1:]]

my_csv = map_csv_rows(open('file.csv', 'rb'))

output = {}
for row in my_csv:
    output.setdefault(row.get('Name'), {'Name': row.get('Name'), 'Value': 0,'Value2': 0, 'Value3': 0, 'Rating': row.get('Rating')})
    for val in ['Value', 'Value2', 'Value3']:
        output[row.get('Name')][val] = output[row.get('Name')][val] + row.get(val)

with open('out.csv', 'wb') as f:
    fieldnames = ['Name', 'Value', 'Value2', 'Value3', 'Rating']
    writer = csv.DictWriter(f, fieldnames = fieldnames)
    writer.writeheader()
    for out in output.values():
        writer.writerow(out)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>for comparison purposes, equivalent <code>awk</code> program</p>
<pre><code>$ awk -v OFS="\t" '
     NR==1{$1=$1;print;next} 
          {k=$1;a[k]+=$2;b[k]+=$3;c[k]+=$4;d[k]=$5} 
       END{for(i in a) print i,a[i],b[i],c[i],d[i]}' input
</code></pre>
<p>will print</p>
<pre><code>Name    Value   Value2  Value3  Rating
ddf     101     68      57      ok
ghd     79      44      156     bad
</code></pre>
<p>if it's a csv input and you want csv output, need to add <code>-F,</code> argument and change to <code>OFS=,</code></p>
</div>
<span class="comment-copy">If you haven't yet tried anything yet, you could start here: <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">Import into sqlite, do a select query in it, you will be done in 2 minutes with almost zero effort</span>
<span class="comment-copy">I do not have a database setup in sqllite, is it possible to load the csv file into memory and run an SQL command on it there?</span>
<span class="comment-copy">This almost works for me but I am getting errors in which some cells are being 'fused' together. I.e. Names as well as some values. Thought it was a formatting problem but I've been playing with it for the past hour with no luck. Its happening to both strings and integers.</span>
<span class="comment-copy">The sample up above is part of a 10,000 line file. Would the amount of data be an issue?</span>
<span class="comment-copy">Sorry for the repetition but I think the problem is some number cells are being seen as string somehow?</span>
<span class="comment-copy">Try the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.convert_objects.html" rel="nofollow noreferrer">convert_objects</a> function. This <a href="http://stackoverflow.com/questions/32955421/coercing-date-columns-in-pandas-with-null-values/32956138#32956138">post</a> has an example. The parameter <code>convert_numeric</code>is <code>False</code> by default.</span>
<span class="comment-copy">That did the trick! Thanks!</span>
