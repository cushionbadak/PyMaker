<div class="post-text" itemprop="text">
<p>Below is the snippet that is giving me 'Memory Error' when the counter reaches to about 53009525. I am running this on Ubuntu Virtual Machine with 12GB of memory. </p>
<pre><code>from collections import defaultdict
from collections import OrderedDict
import math
import numpy as np
import operator
import time
from itertools import product

class State():
   def __init__(self, field1, field2, field3, field4, field5, field6):
       self.lat = field1
       self.lon = field2
       self.alt = field3
       self.temp = field4
       self.ws = field5
       self.wd = field6
...
trans = defaultdict(dict)
freq = {}
...
matrix_col = {}
matrix_col = OrderedDict(sorted(freq.items(), key=lambda t: t[0].lat,    reverse=True))

trans_mat = []
counter = 0 
for u1, u2 in product(matrix_col, matrix_col):
    print counter, time.ctime()
    if (u1 in trans) and (u2 in trans[u1]):
        trans_mat.append([trans[u1][u2]*1.0])
    else:
        trans_mat.append([[0.0001]])
    counter += 1

trans_mat = np.asarray(trans_mat)
trans_mat = np.reshape(trans_mat, (10734, 10734))
print trans_mat
</code></pre>
<p>Both <strong>freq</strong> and <strong>trans</strong> store a type "State". Ant help is appreciated. Here is the error:
...</p>
<pre><code>53009525 Mon Oct 12 18:11:16 2015
Traceback (most recent call last):
  File "hmm_freq.py", line 295, in &lt;module&gt;
     trans_mat.append([[0.0001]])
MemoryError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks as though on each iteration you are appending a Python float inside two nested lists to <code>trans_mat</code>. You can check the size of each element using <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow"><code>sys.getsizeof</code></a>:</p>
<pre><code>import sys

# each of the two nested lists is 80 bytes
print(sys.getsizeof([]))
# 80

# a Python float object is 24 bytes
print(sys.getsizeof(0.0001))
# 24
</code></pre>
<p>On each iteration you are appending 2 * 80 + 24 = 184 bytes to <code>trans_mat</code>. After 53009525 iterations you will have appended 9753752600 bytes or 9.75GB.</p>
<p>A very simple way to make this much more memory-efficient would be to store the results directly to a numpy array rather than in nested lists:</p>
<pre><code>trans_mat = np.empty(10734 * 10734, np.double)
counter = 0
for u1, u2 in product(matrix_col, matrix_col):
    print counter, time.ctime()
    if (u1 in trans) and (u2 in trans[u1]):

        # you may need to check that this line yields a float
        # (it's hard for me to tell exactly what `trans` is from your code snippet)
        trans_mat[counter] = trans[u1][u2]*1.0

    else:
        trans_mat[counter] = 0.0001
    counter += 1
</code></pre>
<p>For reference:</p>
<pre><code># the size of the Python container is 80 bytes
print(sys.getsizeof(trans_mat))
# 80

# the size of the array buffer is 921750048 bytes or 921 MB
print(trans_mat.nbytes)
# 921750048
</code></pre>
</div>
<span class="comment-copy">Put your data in np.float16 type, it will allow you more memory</span>
