<div class="post-text" itemprop="text">
<p>Yep! I know you cannot understand by the title. <br/>
Take for example the below code.<br/></p>
<pre><code>class Room(object):
    def __init__(self):
        self.numbers = []
        self.identify = None #for now?
    def getRoom(self):
        #here I need to implement so that, 
        # self.identify is current indent this class is called!
        return self.identify
room = defualtdict(Room)
print room['Train'].getRoom()
print room['Hospital'].getRoom()
</code></pre>
<p>Excepted output.</p>
<pre><code>#&gt;&gt;Train
#&gt;&gt;Hospital
</code></pre>
<p>Any such feature supported in defaultdict, so that I can do that?
Once the class of room 'something' is called, inside the class, I need a code so that, self.room is 'something' which is called!</p>
</div>
<div class="post-text" itemprop="text">
<p>The default factory of <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a> (any callable) does not accept arguments.</p>
<blockquote>
<p>If <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict.default_factory" rel="nofollow"><em>default_factory</em></a> is not <em>None</em>, it is called without arguments to
  provide a default value for the given key, this value is inserted in
  the dictionary for the key, and returned.</p>
</blockquote>
<p>In other words, <code>defaultdict</code> does not pass any information to the <code>default_factory</code>.</p>
<p>Subclass <code>defaultdict</code> to customize the default <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict.__missing__" rel="nofollow"><code>__missing__</code></a> hook to call the <code>default_factory</code> (<code>Room</code> class constructor) with missing key as a parameter:</p>
<pre><code>from collections import defaultdict

class mydefaultdict(defaultdict):
    def __missing__(self, key):
        self[key] = new = self.default_factory(key)
        return new
</code></pre>
<p>The constructor of <code>Room</code> will then look like</p>
<pre><code>class Room(object):
    def __init__(self, identity):
        self.numbers = []
        self.identify = identity
</code></pre>
<p>You'll need to use <code>mydefaultdict</code> instead of <code>defaultdict</code> from now on. Example:</p>
<pre><code>room = mydefaultdict(Room)
print(room['Train'].getRoom()) # Train 
print(room['Hospital'].getRoom()) # Hospital
</code></pre>
<p>While this works, I suggest you to re-think the way you store/access data.</p>
</div>
<span class="comment-copy">You will need to inherit from defaultdict, why don't you want to instantiate instances normally, why is a dict necessary?</span>
<span class="comment-copy">@PadraicCunningham: If you see the above code, you can easily catch why I need to use a Dict for that class!</span>
<span class="comment-copy">I understand from your code why but there are much simpler ways to do it.</span>
<span class="comment-copy">Actually Am creating a Heavy server, Which supports rooms for users in a large core. So, I cannot always adapt the usability of <code>__getitem__</code> That may have chances of reducing the performance. And, This will be the simplest way of implementing :).</span>
