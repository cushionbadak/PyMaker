<div class="post-text" itemprop="text">
<pre><code>#First
x = 9
y = x
x = 18
print(y)

#Second
S = {1,3,4,5,6}
T = S
T.remove(5)
print(S)
</code></pre>
<p>First : The result is 9 <br/>
Second : The result is {1,3,4,6}</p>
<p>At the first, the y is not changed by x's change.
At the second, the S is changed by T's change.
I wanna know the reason.
Thank you in advance! =)   </p>
</div>
<div class="post-text" itemprop="text">
<p>This is a very common question. For Python, it's helpful to read <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow">this section of the language reference</a>.</p>
<p>In short, in Python, you have names bound to objects.</p>
<p>In your first example you bind to the name <code>x</code> the object whose value is the integer 9. Then you bind to <code>y</code> that same object. Next you bind to <code>x</code> the object whose value is the integer 18. The object bound to <code>y</code> is still the one with the value 9, so 9 is printed.</p>
<p>In your second example, you bind a set object to <code>S</code>. Then you bind <em>that same object</em> to <code>T</code>. The code <code>T.remove(5)</code> <em>mutates the object bound to T, which is the same object bound to S</em>. That is why when you inspect <code>S</code>, you see the change that made through <code>T</code>, because the names <code>S</code> and <code>T</code> were bound to exactly the same object.</p>
<p>In pictures:</p>
<pre><code>x = 9

    x -----------&gt; 9

y = x

    x -----------&gt; 9
                   ^
                   |
    y -------------+

x = 18

    x -----------&gt; 18

    y ------------&gt; 9
</code></pre>
<p>See <code>y</code> did not change. Why not? Because I bound <code>x</code> to a new object. But I did not change what <code>y</code> was bound to. Now let's look at the second example</p>
<pre><code>S = {1, 3, 4, 5, 6}

    S -----------&gt; 1 3 4 5 6

T = S

    S -----------&gt; 1 3 4 5 6
                   ^
                   |
    T -------------+

T.remove(5)

    S -----------&gt; 1 3 4 6
                   ^
                   |
    T -------------+
</code></pre>
<p>The object bound to <code>S</code> changes. Note I did not say that <code>S</code> changed! I never changed the bindings; <code>S</code> and <code>T</code> still point to the same object. It is very important to understand the difference between the names and the objects bound to them.</p>
<p>Also note, I did not say the word "variable." :)</p>
</div>
<div class="post-text" itemprop="text">
<p>you start with <code>x</code> as an reference to object with the value 9, then <code>y</code> as a reference to the same object as <code>x</code>. after you assign <code>x</code> to a new object with the value 18, <code>x</code> now refers to a different object but <code>y</code> still refers to the same object with the value 9.</p>
</div>
<span class="comment-copy">Reut is correct.  If you want to demonstrate the difference between mutable and immutable objects, you need to modify x rather than completely reassign it.  Your comment hints that you understand this, so what is your question?</span>
