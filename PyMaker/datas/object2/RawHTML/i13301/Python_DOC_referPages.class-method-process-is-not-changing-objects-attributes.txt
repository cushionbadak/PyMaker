<div class="post-text" itemprop="text">
<p>It's my second day in Python, I found it's a really cool language and I want to try different things in it.</p>
<p>Is it possible to call an object and create a daemon of that object's method which would change the objects attributes?</p>
<pre><code>from multiprocessing import Process
import time


class Foo(object):

    def __init__(self):
        self.number = 1
        # this attribute...

    def loop(self):
        while 1:
            print self.number
            # ...is changed here
            self.number += 1
            time.sleep(1)


if __name__ == '__main__':

    f = Foo()
    p = Process(target=f.loop)
    p.deamon = True # this makes it work in the background

    p.start()

    # proceed with the main loop...
    while 1:
        time.sleep(1)
        print f.number * 10
</code></pre>
<p>The result:</p>
<pre><code>1
10
2
10
3
10
4
10
...
</code></pre>
<p>Why doesn't <code>f.loop()</code> change the <code>self.number</code> of <code>f</code>? They are both part of the same class <code>Foo()</code>.</p>
<p>What can I change to receive this output:</p>
<pre><code>1
10
2
20
3
30
4
40
...
</code></pre>
<p><strong>/edit 1:</strong></p>
<p>I tried this, with the same result (why?):</p>
<pre><code>class Foo(Process):

    def __init__(self):
        super(Foo, self).__init__()
        self.daemon = True # is daemon
        self.number = 1
        self._target = self.loop # on start() it will run loop()

    def loop(self):
        while 1:
            print self.number
            self.number += 1
            time.sleep(1)


if __name__ == '__main__':

    f = Foo() # is now Process

    f.start() # runs f.loop()
    while 1:
        time.sleep(1)
        print f.number * 10
</code></pre>
<p>Same output as before.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using <code>multiprocessing</code>. The short (and somewhat simplified) answer is that processes to do not share memory by default. Try using <a href="https://docs.python.org/3/library/threading.html" rel="nofollow"><code>threading</code></a> instead.</p>
<p>If you're hell bent on experimenting with shared memory and processes then look at <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow">sharing state</a> in the documentation on multiprocessing.</p>
<p>Also <code>daemon</code> doesn't do what you think it does. If a process creates children then it will attempt to kill all it's daemonic children when it exits. All Processes will work in the background, you just need to start them.</p>
</div>
<span class="comment-copy">Sharing state is not recommended :/ Also, I heard threading can ruin some data or something, if you're not careful. I didn't explore deeper.</span>
<span class="comment-copy">I must've misread the documentation on <code>deamon</code>. My bad. I will try using <code>threading</code> instead. Thank you :)</span>
<span class="comment-copy">The code you provide already shares state. If someone has tried to dissuade you, a learner, from using threading, then it is the same reason as avoiding shared state. Use <code>threading.Lock</code> to share state properly.</span>
<span class="comment-copy">I will try to remember it when programming threaded apps. Thanks</span>
