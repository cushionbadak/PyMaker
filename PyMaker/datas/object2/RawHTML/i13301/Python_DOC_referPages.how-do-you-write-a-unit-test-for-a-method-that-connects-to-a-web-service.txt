<div class="post-text" itemprop="text">
<p>I'm using <code>py.test</code> to create unit tests for my application, but I am stuck with a problem.</p>
<p>I create automated web software, so a lot of my methods connect to external servers. I don't want to do this within the test, instead I would rather store the HTML source and test against that.</p>
<p>The question is how do I do this? For example where do I store the test data? Is there anything within <code>py.test</code> that can aid in storing/testing offline data?</p>
</div>
<div class="post-text" itemprop="text">
<p>The general solution is to use <em>mocking</em>; replacing the library that calls out to the web service and replacing it with something that acts like that library but returns test versions of normal results.</p>
<p>Use the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code> library</a> to do the mocking; it comes with Python 3.3 and up, or is available as a <a href="https://pypi.python.org/pypi/mock" rel="nofollow">backport for older Python releases</a>.</p>
<p>Just add a new package to your <code>tests</code> package (where all your unittests are stored) that handles the 'fixtures', the test data to be produced for certain arguments.</p>
</div>
<span class="comment-copy">If I have a method that parses a string from Javascript, for example <code>parse_ajax_token(html_source)</code> how would I include the source in the test? Or, would I have to have the mock return only enough of the HTML to extract the token from the string? I.e <code>"&lt;script&gt;var a = "Some dummy string"; var ajax_token = '9834832407325-2';&lt;/script&gt;"</code>? The method returns the ajax_token.</span>
<span class="comment-copy">Ah, wait. I think I have to have the mock method return just a valid <code>ajax_token</code> right?</span>
<span class="comment-copy">@BugHunterUK: exactly; you can test if the right HTML was passed in, if that is an important part of your unit-under-test, but your mock can just return a test token value regardless. You are not testing the <code>parse_ajax_token()</code> function, otherwise you'd not have mocked it.</span>
<span class="comment-copy">@BugHunterUK: focus your test on the one unit; a function, class or module. Everything that unit uses, you mock out and have it return whatever is needed to exercise the unit. You can then test how your unit works if given different return values.</span>
