<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6475314/python-for-in-loop-preceded-by-a-variable">Python for-in loop preceded by a variable</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I wrote this expression </p>
<pre><code>[0 for j in range(4)]
</code></pre>
<p>and python accepted it as definition of list, but when i wrote this expression:</p>
<pre><code>0 for j in range(4)
</code></pre>
<p>it raises an error.</p>
<p>what is mechanism of that and from which language does it origin? is it from functional programming ie. LISP? What is equivalent in Java or C?</p>
<p>EDIT: the difference from answered question is that there is not left part of equitation, just right part </p>
<pre><code>[code]
</code></pre>
<p>Also I was interested in origin of list comprehension and equivalents in other programming languages.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>[0 for j in range(4)]</code> is a <a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Comprehensions.html" rel="nofollow">list comprehension</a>.  This is perfectly valid Python syntax.</p>
<p>The other expression isn't an expression at all.</p>
</div>
<span class="comment-copy">The idea is taken from Haskell.</span>
<span class="comment-copy">Note that you can create a <i>generator expression</i> with parentheses: <code>(0 for j in range(4))</code>.</span>
<span class="comment-copy">And the PEP that defined the syntax: <a href="https://www.python.org/dev/peps/pep-0202/" rel="nofollow noreferrer">python.org/dev/peps/pep-0202</a></span>
<span class="comment-copy">@AshwiniChaudhary: I'm not sure that the Python developers took it from Haskell directly. The concept and name existed in NPL already, see <a href="https://en.wikipedia.org/wiki/List_comprehension" rel="nofollow noreferrer">en.wikipedia.org/wiki/List_comprehension</a></span>
<span class="comment-copy">@MartijnPieters <a href="https://docs.python.org/3/whatsnew/2.0.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/3/whatsnew/2.0.html#list-comprehensions</a> Though it's hard to say Greg Ewing was thinking of Haskell when he added the related patches.</span>
