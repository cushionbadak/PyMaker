<div class="post-text" itemprop="text">
<p>Currently, I want to find the correct data structure to meet the following requirement.</p>
<p>There are multiple arrays with disordered element, for example,</p>
<p><code>[1, 2], [2, 1], [3, 2, 2], [2], [2, 1, 3], [2, 2, 3]</code></p>
<p>After processing those data, the result is,</p>
<p><code>[1, 2], [2, 2, 3], [2], [1, 2, 3]</code></p>
<p>With sorted element in each array and filter the duplicate arrays.</p>
<p>Here are my thoughts:</p>
<ul>
<li><p>Data structure <code>Set(Arrays)</code>? - Failed. It seems there is only one array in the build-in <code>set</code></p>
<p><code>set([])</code></p></li>
<li><p>Data structure <code>Array(Sets)</code>? - Failed. However, there is no duplicate element in the build-in <code>set</code>. <strong>I want to know whether there is one data structure like <a href="http://www.cplusplus.com/reference/set/multiset/"><code>multiset</code></a> in C++ within Python?</strong></p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Transform your list to tuple(thus can be a item of set), then back to list.</p>
<pre><code>&gt;&gt;&gt; [list(i) for i in set([tuple(sorted(i)) for i in a])]
[[1, 2], [2], [2, 2, 3], [1, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst = [[1, 2], [2, 1], [3, 2, 2], [2], [2, 1, 3], [2, 2, 3]]
map(list, set(map(tuple, map(sorted, lst)))
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2], [2], [2, 2, 3], [1, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>[list(i) for i in set(map(tuple, a))]
</code></pre>
<p><strong>EDIT:</strong>
Assuming that <code>list</code> is already sorted. Thanks to @PM2RING to remind me.
If not, then add this line above</p>
<pre><code>a = [sorted(i) for i in a]
</code></pre>
<p>Thanks again to @PM2RING: one liner</p>
<pre><code>[list(i) for i in set(map(tuple, (sorted(i) for i in a)))]
</code></pre>
<p><a href="http://ideone.com/h6sUMx" rel="nofollow">Demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Some of the solutions currently here are destroying ordering.  I'm not sure if that's important to you or not, but here is a version which preserves original ordering:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; A = [[1, 2], [2, 1], [3, 2, 2], [2], [2, 1, 3], [2, 2, 3]]
&gt;&gt;&gt; [list(k) for k in OrderedDict.fromkeys(tuple(sorted(a)) for a in A)]
[[1, 2], [2, 2, 3], [2], [1, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No Python, doesn't have a built-in multiset; the closest equivalent in the standard modules is <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a>, which is a type of dictionary. A Counter <em>may</em> be suitable for your needs, but it's hard to tell without more context.</p>
<p><br/></p>
<p>Note that sets do <em>not</em> preserve order of addition. If you need to preserve the initial ordering of the lists, you can do what you want like this:</p>
<pre><code>data = [[1, 2], [2, 1], [3, 2, 2], [2], [2, 1, 3], [2, 2, 3]]

a = set()
outlist = []
for s in data:
    t = tuple(sorted(s))
    if t not in a:
        a.add(t)
        outlist.append(list(t))

print(outlist)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[[1, 2], [2, 2, 3], [2], [1, 2, 3]]
</code></pre>
<p>If the number of input lists is fairly small you don't need the set (and the list&lt;-&gt;tuple conversions), just test membership in <code>outlist</code>. However, that's not efficient for larger input lists since it performs a linear search on the list.</p>
</div>
<span class="comment-copy">BTW, those look like normal Python lists, not Python <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">arrays</a>s; the popular 3rd-party package Numpy also provides <a href="http://docs.scipy.org/doc/numpy/user/basics.creation.html" rel="nofollow noreferrer">array</a> types.</span>
<span class="comment-copy">map(list,set(tuple(sorted(i)) for i in a)), if a is the input</span>
<span class="comment-copy">@Vineesh: Please don't put answers into comments.</span>
<span class="comment-copy">@PM 2 Ring: ok :)</span>
<span class="comment-copy">A <code>collections.Counter</code> is python's multiset.  It's even mention in the <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">I don't know, kids these days, and their fancy schmancy functional programming. :)</span>
<span class="comment-copy">LOL! I know that Guido would strongly object :-)</span>
<span class="comment-copy">normally I hate map, but this is a nice one!</span>
<span class="comment-copy">Dunno, I think you need some more <code>map</code> calls :-P.</span>
<span class="comment-copy">Check my answer for a more efficient de-dupe without that linear search</span>
