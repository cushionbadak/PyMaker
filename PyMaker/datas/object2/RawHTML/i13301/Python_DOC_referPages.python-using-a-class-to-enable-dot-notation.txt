<div class="post-text" itemprop="text">
<p>Working on a class that has sub properties.  Is the below code a good practice / Pythonic?  If not, have any suggestion?</p>
<p><strong>GOAL</strong></p>
<pre><code>exp = ExCls()
prop1 = exp.subprop.prop1
exp.print_prop2()
## prop1 = 1
## prints 2
</code></pre>
<p><strong>EXAMPLE CODE</strong></p>
<pre><code>class ExCls():
   class subprop:
      prop1 = 1
      prop2 = 2
   def print_prop2(self):
      print self.subprop.prop2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In most of the common higher level languages, dot notation is used to indicate namespace.  The same is true for Python.  Take the following useless class for example:</p>
<pre><code>&gt;&gt;&gt; class UselessClass(object):
...     @property
...     def and_on(self):
...         return self
...     def forever(self):
...         return "I can see into forever"
&gt;&gt;&gt; this_goes_on = UselessClass()
&gt;&gt;&gt; this_goes_on.and_on.and_on.and_on.and_on.and_on.forever()
'I can see into forever'
</code></pre>
<p>All it's doing is returning itself (an instantiated object of type UselessClass), which has access to all of it's own properties.</p>
<p>The only issue with your code is, as GingerPlusPlus pointed out, you're making <code>subprop</code> shared between all instances of <code>ExCls</code>. This may be desired, but (based on the question), also may not be.  Here's an instance of why this is bad:</p>
<pre><code>&gt;&gt;&gt; test1 = ExCls()
&gt;&gt;&gt; test2 = ExCls()
&gt;&gt;&gt; test1.subprop.prop1
1
&gt;&gt;&gt; test2.subprop.prop1 = 2
&gt;&gt;&gt; test1.subprop.prop1
2
</code></pre>
<p>As you can see, this isn't generally the behaviour you'd expect.  Instead, what you may be looking to do is:</p>
<pre><code>class ExCls(object):
    def __init__(self):
        class subprop:
            prop1 = 1
            prop2 = 2
        self.subprop = subprop()

    def print_prop2(self):
        print(self.subprop.prop2)
</code></pre>
<p>Overall, I'd highly recommend going back and reading up on Python's Classes, and how they work.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would advice using the right tool for the job â€“ if I'd want my <code>subprop</code> to only contain some data, I'd use <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow"><code>types.SimpleNamespace</code></a>:</p>
<pre><code>from types import SimpleNamespace

class Useless:
    def __init__(self):
        self.subprop = SimpleNamespace(prop1=1, prop2=2)
</code></pre>
<p>or, it's close-enough immutable sibling, <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>collections.namedtuple</code></a>:</p>
<pre><code>from collections import namedtuple

class Useless:
    Subprop = namedtuple('Subprop', 'prop1, prop2')
    def __init__(self):
        # two lines below does the same, choose more readable one
        self.subprop = Subprop(1, 2)
        self.subprop = Subprop(prop1=1, prop=2)
</code></pre>
<p>If I'd want it to also contain some methods, I'd use simple, custom object:</p>
<pre><code>class Useless:
    class Subprop:
        def __init__(self, prop1, prop2):
            self.prop1 = prop1
            self.prop2 = prop2
        def sum(self):
            return self.prop1 + self.prop2
    def __init__(self):
        # two lines below does the same, choose more readable one
        self.subprop = Subprop(1, 2)
        self.subprop = Subprop(prop1=1, prop2=2)
</code></pre>
</div>
<span class="comment-copy">Note that <code>subprop</code> is shared between all instances of <code>ExCls</code>, is this intentional?</span>
<span class="comment-copy">You should read through the <a href="https://docs.python.org/3/tutorial/classes.html#classes" rel="nofollow noreferrer">Tutorial</a> a couple of times then have a look at the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> built-in <i>function</i> and maybe look through the <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer">Descriptor How To Guide</a>.</span>
<span class="comment-copy">@GingerPlusPlus, I had overlooked that fact when building.  Thank you.</span>
<span class="comment-copy">@wwii, thanks for the <b>property</b> reference.  This will be helpful  : )</span>
<span class="comment-copy">Thank you @Rejected I have been enlighten.</span>
<span class="comment-copy">Very interesting @GingerPlusPlus...  Thank you for this input as well!  : )</span>
