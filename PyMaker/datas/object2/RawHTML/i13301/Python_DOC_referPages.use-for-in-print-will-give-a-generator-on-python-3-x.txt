<div class="post-text" itemprop="text">
<p>Why and how does it works? For example I'm writing a list comprehension like this:</p>
<pre><code>&gt;&gt;&gt; a = (10, 30, 20)
&gt;&gt;&gt; print([q for q in a])
[10, 30, 20]
</code></pre>
<p>At now, if I remove the <code>[]</code>, this will also work, but:</p>
<pre><code>&gt;&gt;&gt; a = (10, 30, 20)
&gt;&gt;&gt; print(q for q in a)
&lt;generator object &lt;genexpr&gt; at 0x7fe527d1dca8&gt;
</code></pre>
<p>Does Python make a generator here? And if I do this without <code>print()</code>:</p>
<pre><code>&gt;&gt;&gt; a = (10, 30, 20)
&gt;&gt;&gt; b = q for q in a

File "&lt;input&gt;", line 1
  b = q for q in a
          ^
SyntaxError: invalid syntax
</code></pre>
<p>I'm thinking about because <code>(q for q in a)</code> will make a generator, but that's impossible, however I'm not using two pair of <code>()</code> like:</p>
<pre><code>&gt;&gt;&gt; a = (10, 30, 20)
&gt;&gt;&gt; print((q for q in a)) # here is two pair of `()`
&lt;generator object &lt;genexpr&gt; at 0x7fe527d1dca8&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Does Python make a generator here?</p>
</blockquote>
<p>Yes. Quoting official documentation of <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">Generator expressions</a>,</p>
<blockquote>
<p>The parentheses can be omitted on calls with only one argument.</p>
</blockquote>
<hr/>
<p>Note that this is the only exception from the actual syntax</p>
<pre class="lang-none prettyprint-override"><code>generator_expression ::=  "(" expression comp_for ")"
</code></pre>
<p>So, when you did</p>
<pre><code>b = q for q in a
</code></pre>
<p>Python was not able to parse it, as it is not a valid Python expression. That is why you were getting a <code>SyntaxError</code>.</p>
<hr/>
<p>If you actually wanted to print all the elements from the generator expression, you can unpack the result of it to the <code>print</code> function, as suggested by Blckknght, like this</p>
<pre><code>&gt;&gt;&gt; a = (10, 30, 20)
&gt;&gt;&gt; print(*(q for q in a))
10 30 20
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, print is a function.</p>
<p>Normally, when you try to create a generator expression and store it in a variable (or in some other places), you need to enclose it in <code>()</code> . Example -</p>
<pre><code>b = (q for q in a)
</code></pre>
<p>But if you are passing a generator expression to a function as a psotional argument, <strong>and it is the only argument</strong> , then you do not need the enclosing <code>()</code> .</p>
<p>It is explained in the <a href="https://www.python.org/dev/peps/pep-0289/#id16" rel="nofollow">PEP 0289 -</a></p>
<blockquote>
<p>if a function call has a single positional argument, it can be a generator expression without extra parentheses, but in all other cases you have to parenthesize it.</p>
</blockquote>
<p>Or <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow">the documentation</a> (As also given by the other answer) -</p>
<blockquote>
<p>The parentheses can be omitted on calls with only one argument.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The parentheses aren't what make a generator, just like they aren't what make a <code>tuple</code>. Something like <code>return 2,3</code> will <code>return</code> the <code>tuple</code> of <code>(2, 3)</code>:</p>
<pre><code>&gt;&gt;&gt; def f():
...     return 2,3
...
&gt;&gt;&gt; f()
(2, 3)
&gt;&gt;&gt; type(f())
&lt;class 'tuple'&gt;
</code></pre>
<p>You can make a <code>tuple</code> with a single character with just the comma:</p>
<pre><code>&gt;&gt;&gt; 2,
(2,)
&gt;&gt;&gt; a = 2,
&gt;&gt;&gt; type(a)
&lt;class 'tuple'&gt;
</code></pre>
<p>You only need the parentheses when they provide disambiguation for the syntax, such as <code>[(a,b) for a,b in zip([1,2], [1,2])]</code>.</p>
<pre><code>&gt;&gt;&gt; [a,b for a,b in zip([1,2], [1,2])]
  File "&lt;stdin&gt;", line 1
    [a,b for a,b in zip([1,2], [1,2])]
           ^
SyntaxError: invalid syntax
&gt;&gt;&gt; [(a,b) for a,b in zip([1,2], [1,2])]
[(1, 1), (2, 2)]
</code></pre>
<p>Regarding the <code>print()</code> call, if you include the parentheses you can then use the <code>*</code> operator to unpack the generator:</p>
<pre><code>&gt;&gt;&gt; a = (10, 30, 20)
&gt;&gt;&gt; print([q for q in a])
[10, 30, 20]
&gt;&gt;&gt; print(q for q in a)
&lt;generator object &lt;genexpr&gt; at 0x0000000003B84B88&gt;
&gt;&gt;&gt; print(*(q for q in a))
10 30 20
&gt;&gt;&gt; print(*(q for q in a if q&lt;25))
10 20
&gt;&gt;&gt; print(*a)
10 30 20
</code></pre>
<p>This occasionally saves some typing.</p>
</div>
<span class="comment-copy">If you want to print the items, rather than the generator object that yields them, try <code>print(*(q for q in a))</code>. The <code>*</code> unpacks the items as arguments to the function. (Though, for this particular generator you could just do <code>print(*a)</code> and be done with it.)</span>
<span class="comment-copy">It works exactly the same as any other function , sum,  max, min ....</span>
