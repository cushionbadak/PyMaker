<div class="post-text" itemprop="text">
<p>Given the following dictionary:</p>
<pre><code>dct = {'a':3, 'b':3,'c':5,'d':3}
</code></pre>
<p>How can I apply these values to a list such as:</p>
<pre><code>lst = ['c', 'd', 'a', 'b', 'd']
</code></pre>
<p>in order to get something like:</p>
<pre><code>lstval = [5, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a>:</p>
<pre><code>&gt;&gt;&gt; map(dct.get, lst)
[5, 3, 3, 3, 3]
</code></pre>
<p>Using a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; [dct[k] for k in lst]
[5, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension for this:</p>
<pre><code>lstval = [ dct.get(k, your_fav_default) for k in lst ]
</code></pre>
<p>I personally propose using list comprehensions over built-in <code>map</code> because it looks familiar to all Python programmers, is easier to parse and extend in case a custom default value is required.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate keys from your list using <code>map</code> function:</p>
<pre><code>lstval = list(map(dct.get, lst))
</code></pre>
<p>Or if you prefer list comprehension:</p>
<pre><code>lstval = [dct[key] for key in lst]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lstval = [d[x] for x in lst]
</code></pre>
<p>Don't name your dictionary <code>dict</code>. <code>dict</code> is the name of the type.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do not use a <code>dict</code> as variable name, as it was built in.</p>
<pre><code>&gt;&gt;&gt; d = {'a':3, 'b':3,'c':5,'d':3}
&gt;&gt;&gt; lst = ['c', 'd', 'a', 'b', 'd']
&gt;&gt;&gt; map(lambda x:d.get(x, None), lst)
[5, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use a list comprehension:</p>
<pre><code>listval = [dict.get(key, 0) for key in lst]
</code></pre>
<p>The <code>.get(key, 0)</code> part is used to return a default value (in this case 0) if no element with this key exists in <code>dict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In documentation of Python 3:</p>
<ul>
<li><code>dict.items()</code> "Return a new view of the dictionary’s items ((key, value)
pairs)" <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#dict.items</a> </li>
<li>"<code>zip()</code> in conjunction with the * operator can be used to unzip a
list" <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">https://docs.python.org/3/library/functions.html#zip</a></li>
</ul>
<p>So, <code>zip(*d.items())</code> give your result.</p>
<pre><code>d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}

print(d.items())        # [('a', 1), ('c', 3), ('b', 2), ('d', 4)] in Python 2
                        # dict_items([('a', 1), ('c', 3), ('b', 2), ('d', 4)]) in Python 3

print(zip(*d.items()))  # [('a', 1), ('c', 3), ('b', 2), ('d', 4)] in Python 2
                        # &lt;zip object at 0x7f1f8713ed40&gt; in Python 3

k, v = zip(*d.items())
print(k)                # ('a', 'c', 'b', 'd')
print(v)                # (1, 3, 2, 4)
</code></pre>
</div>
<span class="comment-copy">What happens if the value in the list is not present in the dictionary?</span>
<span class="comment-copy">So you want <i>get</i> these keys into a list(use <code>list(dict.keys())</code>), or you have a list like that already? And by the way, don't use <code>dict</code> as a variable name.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/18453566/python-dictionary-get-list-of-values-for-list-of-keys">Python dictionary: Get list of values for list of keys</a></span>
<span class="comment-copy">In case you are wondering about the reason behind all these unexplained downvotes, your question was linked from meta: <a href="http://meta.stackoverflow.com/questions/308731/failing-first-post-review-trivial-question-with-no-research-had-15" title="failing first post review trivial question with no research had 15">meta.stackoverflow.com/questions/308731/…</a></span>
<span class="comment-copy">This seems like the best one using map, you don't need lambda for this.</span>
<span class="comment-copy"><code>map</code> one will get messy when a non-None default is required...</span>
<span class="comment-copy">It's worth noting that in python 3.x you need to type <code>list(map(dct.get, lst))</code> to get actual results back, otherwise you'll get an iterator object.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.0/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">Why use list-comp over <code>map</code>?</a> <i>Particularly tricky is map() invoked for the side effects of the function; the correct transformation is to use a regular for loop (since creating a list would just be wasteful).</i> :)</span>
<span class="comment-copy">@Oleg: That's why I have <code>dct.get(k, your_fav_default)</code> in place. If values are missing it should give back the <code>your_fav_default</code></span>
<span class="comment-copy">@Oleg The code is iterating over elements of <code>lst</code> not keys in the dictionary. So there could be something in <code>lst</code> and no corresponding key in the dict (even when this wouldn't make much sense) and we need to handle that case.</span>
