<div class="post-text" itemprop="text">
<p>propably this question was asked before but I found nothing about it so far.</p>
<p>Suppose I have some code in a file called test.py (that was a result from my question yesterday <a href="https://stackoverflow.com/questions/32903967/wrapping-np-arrays-pow-method">Wrapping np.arrays __pow__ method</a>)</p>
<pre><code>import numpy as np
from functools import wraps, reduce

#Create a subclass of np.ndarray to speed up the power operation
class MyArray(np.ndarray):
  def __pow__(self, other):
    return reduce(lambda x,y: x*y, [self for _ in range(other)])

#Create a wrapper so that arrays are created using my Class instead of the old one.    
def change_ndarray(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    return func(*args, **kwargs).view(MyArray)
  return wrapper    

np.array = change_ndarray(np.array)
</code></pre>
<p>So far it worked great in my file every array was produced using the wrapped np.array. But then to compare the speed gain I was confused:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; %timeit np.linspace(10,1000,1000000)**3
10 loops, best of 3: 154 ms per loop
&gt;&gt;&gt; import test
&gt;&gt;&gt; %timeit np.linspace(10,1000,1000000)**3
10 loops, best of 3: 40.6 ms per loop
</code></pre>
<p>How come the linspace now works with the wrapped ndarray instead of the old one? How does it come that <code>np.linspace</code> now calls <code>t.np.array</code>? I thought that was another namespace and what does linspace have to do with np.array?</p>
<p>As a note I read through <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a> but that's really tough reading and so maybe I have missed it in there. I would be happy if anyone could give me a push in the right direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <em>test.py</em>, <code>np.array = change_ndarray(np.array)</code> reassigns the <code>array</code> variable in the <code>numpy</code> module that you aliased as <code>np</code>. All code using <code>numpy.array</code> now use the new thing you put in it. Actions such as <code>from numpy import *</code> create new variables in the local module, but <code>import numpy as np</code> only gives you a reference to the module itself.</p>
<p>Consider how python variables work. Namespaces are python <em>dicts</em> that store key (variable name) / value (the object referenced by the variable) pairs. Namespaces are associated with things like methods and functions (local variables), classes (class variables) and modules (module global variables). When you use a variable, python pokes about in several namespace <em>dicts</em> looking for the name and returns its object. <code>np.array</code> means lookup a variable called <code>np</code>, get its namespace <em>dict</em> and then look <code>array</code> up there. In your case, <code>np</code> is the <em>numpy</em> module and <code>array</code> is a vvariable there. </p>
</div>
<span class="comment-copy">Ok, that might explain it. I was confused because np.linspace imported <code>from .numeric import array</code> what would be, like you said, another variable that stores the array module while being unaffected by my general wrapper. Actually changing my <code>test.py</code> to <code>from numpy import array</code> and only wrapping <code>array</code> worked as expected. But why did linspace import my wrapped array? Ok your edit actually explained it. Thanks!</span>
<span class="comment-copy">@MSeifert - It didn't. You imported <i>numpy</i> so your module and <i>numpy</i> are both resident. You reassigned <code>numpy.array</code> to your wrapper class. That means that the <i>array</i> variable in the <i>numpy</i> namespace dict references your wrapper and not the original class. All code looking up "array" in the <i>numpy</i> namespace will see your wrapper - and that includes code in <i>numpy</i> itself. Unless you are trying to change the behavior of <i>numpy</i> itself, you should not reassign its variables.</span>
<span class="comment-copy">So if I only want to wrap it in the <code>test.py</code> and don't want to change numpys array behaviour somewhere else I have to change it to <code>from numpy import array</code> and change the wrapper to <code>array = change_ndarray(array)</code>?</span>
<span class="comment-copy">@MSeifert - no, all you need is <code>array = change_ndarray(np.array)</code>, you don't need to change how you import <i>numpy</i>. <i>np.array</i> will continue to be the original <i>numpy</i> class and <code>array</code> will be your wrapper class.</span>
