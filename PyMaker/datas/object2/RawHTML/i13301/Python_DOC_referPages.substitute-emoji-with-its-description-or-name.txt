<div class="post-text" itemprop="text">
<p>I'm working on getting a subset of emojis from a text retrieved form an API. What I'd like to do is substitute each emoji for its description or name. </p>
<p>I'm working on Python 3.4 and my current approach is accesing the unicode's name with unicodedata like this:</p>
<pre><code>nname = unicodedata.name(my_unicode)
</code></pre>
<p>And I'm substituting with re.sub:</p>
<pre><code>re.sub('[\U0001F602-\U0001F64F]', 'new string', str(orig_string))
</code></pre>
<p>I've tried re.search and then accessing matches and replacing strings (don't work with regex) but haven't been able to solve this. </p>
<p>Is there a way of getting a callback for each substitution that re.sub does? Any other route is also appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a callback function to <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a>: From the documentation:</p>
<blockquote>
<p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p>
<p>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged. repl can be a string <strong>or a function</strong>; [...] If repl is a function, it is called for every non-overlapping occurrence of pattern. <strong>The function takes a single match object argument, and returns the replacement string</strong>.</p>
</blockquote>
<p>So just use <code>unicodedata.name</code> as the callback:</p>
<pre><code>&gt;&gt;&gt; my_text ="\U0001F602  and all of this \U0001F605"
&gt;&gt;&gt; re.sub('[\U0001F602-\U0001F64F]', lambda m: unicodedata.name(m.group()), my_text)
'FACE WITH TEARS OF JOY  and all of this SMILING FACE WITH OPEN MOUTH AND COLD SWEAT'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass in a function as the <em>repl</em> parameter of <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub()</code></a></p>
<p>It is passed the match object and returns what you want to spit out:</p>
<pre><code>input = 'I am \U0001F604 and not \U0001F613'
re.sub('[\U0001F602-\U0001F64F]', lambda y: unicodedata.name(y.group(0)), input)
# Outputs:
# 'I am SMILING FACE WITH OPEN MOUTH AND SMILING EYES and not FACE WITH COLD SWEAT'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No so clean, but works:</p>
<pre><code>import unicodedata

my_text ="\U0001F602  and all of this \U0001F605"

for char in range(ord("\U0001F602"),ord("\U0001F64F")):
    my_text=my_text.replace(chr(char),unicodedata.name(chr(char),"NOTHING")) 

print(my_text)
</code></pre>
<p>result : FACE WITH TEARS OF JOY  and all of this SMILING FACE WITH OPEN MOUTH AND COLD SWEAT</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5+, there is <code>namereplace</code> error handler. You could use it to convert several emoticons at once:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; my_text ="\U0001F601, \U0001F602, ♥ and all of this \U0001F605"
&gt;&gt;&gt; re.sub('[\U0001F601-\U0001F64F]+',
...        lambda m: m.group().encode('ascii', 'namereplace').decode(), my_text)
'\\N{GRINNING FACE WITH SMILING EYES}, \\N{FACE WITH TEARS OF JOY}, ♥ and all of this \\N{SMILING FACE WITH OPEN MOUTH AND COLD SWEAT}'
</code></pre>
<p>There are <a href="http://www.unicode.org/reports/tr51/index.html#Identification" rel="nofollow">more Unicode characters that are emoji than the regex pattern indicates</a> e.g., <a href="http://emojitracker.com/" rel="nofollow">♥ (U+2665 BLACK HEART SUIT)</a>.</p>
</div>
<span class="comment-copy">why don't you use replace? "\U0001F602  and other text".replace("\U0001F602","smile") ?</span>
<span class="comment-copy">What about using <code>re.U</code> flag? <code>re.sub('[\U0001F602-\U0001F64F]', 'new string', str(orig_string),re.U)</code></span>
<span class="comment-copy">Both @lemonhead and tobias_k answers worked great and where a very elegant and efficient approach. Really appreciate it. Accepting this answer because of the additional on screen documentation which might prove a faster reference for other members.</span>
<span class="comment-copy">Thanks, I'll keep that in mind for 3.5 migration. I also agree there are a lot more emojis than the regex pattern indicates. So for people interested in the regex pattern be advised this is just a subset.</span>
