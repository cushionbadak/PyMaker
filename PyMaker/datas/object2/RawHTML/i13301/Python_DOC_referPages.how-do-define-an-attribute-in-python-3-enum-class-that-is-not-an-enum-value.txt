<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17911188/is-it-possible-to-define-a-class-constant-inside-an-enum">Is it possible to define a class constant inside an Enum?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>How to define an attribute in a Python 3 enum class that is NOT an enum value?</p>
<pre><code>class Color(Enum):
    red = 0
    blue = 1
    violet = 2
    foo = 'this is a regular attribute'
    bar = 55  # this is also a regular attribute
</code></pre>
<p>But this seems to fail for me. It seems that Color tries to include foo and bar as part of its enum values.</p>
<p>EDIT:
Lest you think I'm not using Enum in a way that's intended... For example, take the official Python documentation's example enum class Planet (docs.python.org/3/library/enum.html#planet). Note that they define the gravitational constant G within the surface_gravity() method. But this is weird code. A normal programmer would say, set that constant G once, outside the function. But if I try to move G out (but not to global scope, just class scope), then I run into the issue I'm asking about here.</p>
</div>
<div class="post-text" itemprop="text">
<p>When building an <code>enum.Enum</code> class, <strong>all</strong> regular attributes become members of the enumeration. A different type of value does not make a difference.</p>
<p>By regular attributes I mean all objects that are not descriptors (like functions are) and excluded names (using single underscore names, see the <a href="https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations" rel="nofollow"><em>Allowed members and attributes of enumerations</em> section</a>).</p>
<p>If you need additional attributes on the final <code>enum.Enum</code> object, add attributes <em>afterwards</em>:</p>
<pre><code>class Color(Enum):
    red = 0
    blue = 1
    violet = 2

Color.foo = 'this is a regular attribute'
Color.bar = 55
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class Color(Enum):
...     red = 0
...     blue = 1
...     violet = 2
... 
&gt;&gt;&gt; Color.foo = 'this is a regular attribute'
&gt;&gt;&gt; Color.bar = 55
&gt;&gt;&gt; Color.foo
'this is a regular attribute'
&gt;&gt;&gt; Color.bar
55
&gt;&gt;&gt; Color.red
&lt;Color.red: 0&gt;
&gt;&gt;&gt; list(Color)
[&lt;Color.red: 0&gt;, &lt;Color.blue: 1&gt;, &lt;Color.violet: 2&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The point of the <code>Enum</code> type is to define enum values, so non-enum values are theoretically out of scope for this type. For constants, you should consider moving them out of the type anyway: They are likely not directly related to the enum values (but rather some logic that builds on those), and also should be a mutable property of the type. Usually, you would just create a constant at module level.</p>
<p>If you really need something on the type, then you could add it as a class method:</p>
<pre><code>class Color(Enum):
    red = 0
    blue = 1
    violet = 2
    bar = 55

    @classmethod
    def foo (cls):
        return 'this is a not really an attribute…'
</code></pre>
<p>And using the <code>classproperty</code> descriptor from <a href="https://stackoverflow.com/a/5191224/216074">this answer</a>, you can also turn this into a property at class level which you can access as if it was a normal attribute:</p>
<pre><code>class Color(enum.Enum):
    red = 0
    blue = 1
    violet = 2
    bar = 55

    @classproperty
    def foo (cls):
        return 'this is a almost a real attribute'
</code></pre>
<pre><code>&gt;&gt;&gt; Color.foo
'this is a almost a real attribute'
&gt;&gt;&gt; list(Color)
[&lt;Color.red: 0&gt;, &lt;Color.blue: 1&gt;, &lt;Color.violet: 2&gt;, &lt;Color.bar: 55&gt;]
</code></pre>
</div>
<span class="comment-copy">Why do you need this? You can't do it like that, no.</span>
<span class="comment-copy">There is no built-in facility that regards some attributes as enums and others as 'regular'. There is no difference between <code>foo</code> and <code>bar</code> in your enum as far as Python is concerned. Just because you used a different type object for the value makes no difference.</span>
<span class="comment-copy">Well, because one of the reasons for the existence of these fancy Enum classes is that they can be regular classes, you know, with methods and such, and eventually, I get to a point where I need a class-level constant!</span>
<span class="comment-copy">@EthanFurman I don’t really understand why you feel the need to go to a <i>closed</i> question 5 months after closing it, linking explicitly to <i>your</i> answer again (which is also the accepted answer on the close target), <i>and downvoting</i> the two answers to this closed question when those answers may be a bit complicated but nevertheless both provide a <i>working</i> solution for the problem. Are you that overconfident that <i>your</i> solution is the <i>only</i> acceptable solution for this requirement?</span>
<span class="comment-copy">@poke: I'm reviewing all the [enums] [python] answers, and up/down-voting where appropriate.  I don't agree with your characterization of the <code>Enum</code> data type in this instance (you have up-votes from me in other instances).  Had somebody else written my solution I would have acted the same to these answers/comments.</span>
<span class="comment-copy">The <code>Enum</code> metaclass does support @eng's use-case via the descriptor protocol (in other words, Python supports it, I didn't have to do anything extra).</span>
<span class="comment-copy">@EthanFurman: yes you did, you had to create a descriptor, which in my book is certainly doing something extra. Which is a nice and clever trick, but that doesn't make my technically incorrect. Was my answer really that unhelpful to deserve a downvote?</span>
<span class="comment-copy">Ah, I meant I didn't have to do anything extra when creating the metaclass to support this use-case.  Due to the ugly hack of assigning attributes after class creation and the wrong information in the comments, I downvoted.  My hope was that an overall -1 score would warn future seekers not to use these answers.</span>
<span class="comment-copy">@EthanFurman: We can easily clean up the comments; just flag those you think should go. They are not part of the answer. You mention assigning attributes after class creation as a solution in your own answer.</span>
<span class="comment-copy">Yes, I did mention assigning attributes after class creation in my answer; I also mentioned why it is not a good solution.</span>
<span class="comment-copy">@EthanFurman well, yes. Work days can become quite busy very quickly. I don’t remember the context of that quote any more, and it’s really difficult to know what I was thinking <i>5</i> months later… but I guess what I was trying to say is that when you have a member out in the open on the type object, the public interface just begs to access and modify it. That’s not really a good idea for constants. Constants should be somewhere safe, or at least clearly marked as constants.</span>
<span class="comment-copy">Ah, that makes sense.  Thanks.</span>
