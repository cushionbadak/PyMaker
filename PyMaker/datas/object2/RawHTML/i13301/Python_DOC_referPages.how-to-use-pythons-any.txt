<div class="post-text" itemprop="text">
<p>I feel very confused about some code like this[not written by me]:</p>
<pre><code>version = any(func1(), func2()) # wrong, should be any([func1(), func2()])

def func1():
   if something:
       return 1
   else:
       return None

def func2():
    if something:
       return 2
    else:
       return 3
</code></pre>
<p><code>version</code> must be a num. when <code>[func1(), func2()]</code> is <code>[1, None]</code>, should  return 1, when is <code>[None, 2]</code>, should return 2, when <code>[1, 2]</code>, should return 1.</p>
<p>so I think it's wrong to use <code>any()</code> in this code, because <code>any()</code> just return <code>True</code> or <code>False</code>. If I rewirte this logic using another way, I can not find a graceful way as a pythoner.</p>
<p>I want to know whether <code>any()</code> can achieve the logic, if not, how to achieve it gracefully?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use <code>or</code> here.</p>
<pre><code>version = func1() or func2()
</code></pre>
<p>Make sure the functions are defined before trying to call them.</p>
<p>This works because <code>or</code> returns the first True-like value or the last value (if no value is True-like) . And 'None' is considered False-like in Boolean context.</p>
</div>
<div class="post-text" itemprop="text">
<p>@AnandSKumar's answer is optimal. But just to give you some information on any if you are interested:</p>
<p>Take this example: </p>
<pre><code>&gt;&gt;&gt; def foo():
...  return 2
...
&gt;&gt;&gt; def boo():
...  return 3
...
&gt;&gt;&gt; def doo():
...  return 4
...
&gt;&gt;&gt; f = [foo, boo, doo]
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; any(i() &lt; 3 for i in f)
True
</code></pre>
<p>Ultimately what is happening inside the any is, iterate over the array of methods j, and indicate whether each item is less than 3, what the "any" will do in this case is return "ANY" condition that matches that. So even if you find one that is False, it will still return True. </p>
<p>There is another similar method to this called "all", that will ensure that ALL conditions are met based on your condition you are checking. Here is the example: </p>
<pre><code>&gt;&gt;&gt; all(i() &lt; 3 for i in f)
False
</code></pre>
<p>So, as you can see, because one condition failed, it will return False.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the arbitrary length case (where explicitly chaining <code>or</code> doesn't make sense), you can make a version of <code>any</code> that returns the first truthy value or a given value when all results are falsy with:</p>
<pre><code># If on Py2, you'll want to do this to get shortcircuiting behavior
from future_builtins import filter

result = next(filter(None, iterable_to_check), False)  # False can be replaced with a chosen default
</code></pre>
<p>The <code>filter</code> only produces "truthy" values, and the two arg <code>next</code> gets the first "truthy" value, or the default value if <code>filter</code> finds no "truthy" values.</p>
<p>If the <code>iterable_to_check</code> is a non-empty <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow"><code>Sequence</code></a> (rather than merely <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable" rel="nofollow"><code>Iterable</code></a>), you can exactly match the behavior of chained <code>or</code>s (the "falsy" result is the last value, not a specific value like <code>False</code> or <code>None</code>) with:</p>
<pre><code>result = next(filter(None, sequence_to_check), sequence_to_check[-1])
</code></pre>
<p>to use the final element ("truthy" or "falsy") as the result when all elements were "falsy".</p>
<p>To be clear, if the set of things to test is fixed and smallish, explicit <code>or</code> per Anand's answer is the better way to go.</p>
</div>
<span class="comment-copy">Are you asking about what scenario to use <code>any()</code>, or how to simplify this piece of code?</span>
<span class="comment-copy">@NayukiMinase I want to know whether <code>any()</code> can achieve the logic, if not, how to achieve it gracefully?</span>
<span class="comment-copy">This is a good way, thanks.</span>
