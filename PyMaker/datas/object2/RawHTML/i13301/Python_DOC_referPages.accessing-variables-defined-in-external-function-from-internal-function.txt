<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7935966/python-overwriting-variables-in-nested-functions">Python overwriting variables in nested functions</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Suppose I have the following function that returns a function:</p>
<pre><code>def make_square_matrix_creator(dim):

    mat = np.zeros([dim, dim])

    def square_matrix_creator(value):
        mat += value
        return mat
    return square_matrix_creator
</code></pre>
<p>Now, this code doesn't work, because the internal function can't access <code>mat</code>. </p>
<pre><code>f = make_square_matrix_creator(4)

f(3)

UnboundLocalError: local variable 'mat' referenced before assignment
</code></pre>
<p>I know there are a few ways to get around this; I can make <code>mat</code> global:</p>
<pre><code>def make_square_matrix_creator(dim):

    global mat
    mat = np.zeros([dim, dim])

    def square_matrix_creator(value):
        global mat
        mat += value
        return mat
    return square_matrix_creator
</code></pre>
<p>It works, but this has all of the problems associated with making global objects within functions</p>
<p>I can pass mat as a default argument to the internal function;</p>
<pre><code>def make_square_matrix_creator(dim):

    mat = np.zeros([dim, dim])

    def square_matrix_creator(value, mat=mat):
        mat += value
        return mat
    return square_matrix_creator
</code></pre>
<p>But when I try this out in my real-world example, I run into problems with mutable defaults. Are there other options for giving an internal function access to objects created in its parent function?</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.7, you can use <code>[:]</code> to indicate in-place mutation in the nested function. Example -</p>
<pre><code>def make_square_matrix_creator(dim):
    mat = np.zeros([dim, dim])
    def square_matrix_creator(value):
        mat[:] = mat + value
        return mat
    return square_matrix_creator
</code></pre>
<p>I tested this in Python 3.4 (Sadly, I don't have a Python 2.7 with numpy to test it out , I tested in Python 2.7 with normal lists and it works for normal lists) . Demo -</p>
<pre><code>In [50]: def make_square_matrix_creator(dim):
   ....:         mat = np.zeros([dim, dim])
   ....:         def square_matrix_creator(value):
   ....:                 mat[:] = mat + value
   ....:                 return mat
   ....:         return square_matrix_creator
   ....:

In [53]: f = make_square_matrix_creator(4)

In [54]: f(3)
Out[54]:
array([[ 3.,  3.,  3.,  3.],
       [ 3.,  3.,  3.,  3.],
       [ 3.,  3.,  3.,  3.],
       [ 3.,  3.,  3.,  3.]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try creating an alias.</p>
<pre><code># This class is a minimally working shim for the numpy object
# because I don't want to import the full numpy package.
class K(object):
    def __init__(self, other):
        self.v = other

    def __iadd__(self, other):
        self.v += other

def outer(x):
    mat = K(x)
    def inner(y):
        alias = mat   # Create alias to mutable object.  alias is now modifiable
        alias += 1    # Modify alias to work around Python 2.x limitation.
        return mat
    return inner

&gt;&gt;&gt; f = outer(5)
&gt;&gt;&gt; res = f(1)
&gt;&gt;&gt; res
&lt;__main__.K at 0x102acb1d0&gt;
&gt;&gt;&gt; res.v
6
&gt;&gt;&gt; f(1)
&lt;__main__.K at 0x102acb1d0&gt;
&gt;&gt;&gt; res.v
7
</code></pre>
</div>
<span class="comment-copy">use <code>nonlocal</code> ..</span>
<span class="comment-copy">If you are using Python 3.x, you can look into <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="nofollow noreferrer">nonlocal</a> statement.</span>
<span class="comment-copy">I am using python 2.7 - I'll edit my question</span>
<span class="comment-copy"><a href="http://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python/" rel="nofollow noreferrer">eli.thegreenplace.net/2011/05/15/â€¦</a></span>
