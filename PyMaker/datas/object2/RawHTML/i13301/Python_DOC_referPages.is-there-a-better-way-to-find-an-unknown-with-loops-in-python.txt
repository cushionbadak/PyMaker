<div class="post-text" itemprop="text">
<p>I am trying to "discover" what the <code>UNKNOWN</code> variable's value was when the <code>hash_res</code> was generated.</p>
<p>The only information that was given to me was that the following lines were used: </p>
<pre><code>random.seed(UNKNOWN+hash(CONST_VAR))
hash_res = random.randint(1&lt;&lt;32, 1&lt;&lt;40)
</code></pre>
<p>Plus the value of <code>CONST_VAR</code> is a given which is <code>113092</code>.
The value of <code>RESULT_VAR</code> is also a given which is <code>75284812356</code>.</p>
<p>So far this is what I've came up with but I am not sure if this is the right way or of there is a faster, better way.</p>
<pre><code>import random
from hashlib import md5

UNKNOWN = 0
CONST_VAR = 113092
RESULT_VAR = 75284812356
hash_res = 0

while hash_res != RESULT_VAR:
    UNKNOWN = UNKNOWN+1
    random.seed(UNKNOWN+hash(CONST_VAR))
    hash_res = random.randint(1&lt;&lt;32, 1&lt;&lt;40)

print UNKNOWN
</code></pre>
<p>Basically I am looping the given hashing lines then for every iteration, I'd increment the value of the <code>UNKNOWN</code> until the value of <code>hash_res</code> matches the <code>RESULT_VAR</code>. Then print out the value of the <code>UNKNOWN</code> when the loop terminates (a.k.a. <code>hash_res</code> has matched <code>RESULT_VAR</code>)</p>
<p>It's a brute force approach and my question is, is there a better way?</p>
<p><strong>NOTE</strong>
I am a c# developer, trying to learn something new :)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>It's a brute force approach and my question is, is there a better way?</p>
</blockquote>
<p>By all practical means for someone who is not a mathematical security/cryptography researcher, no.</p>
<p>The specification of a "hash" function is simply that it's a function that is nearly impossible to invert, i.e. brute forcing is the fastest way of reversing it.</p>
<p>There's a lot of tricks (rainbow tables, doing the math on a graphic card processor, or even a specialized chip etc) that make things faster, but aside from understanding the few weaknesses in MD5 and implementing this very close to the metal (read: probably C/C++, not python), there's nothing you can do.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>It's a brute force approach and my question is, is there a better way?</p>
</blockquote>
<p>You can try to improve your brute force, by reducing the number of operation that you do at each loop cycle.</p>
<p>For instance, you can store <code>hash(CONST_VAR)</code>, <code>1&lt;&lt;32</code> and <code>1&lt;&lt;40</code> in variables.</p>
<p>You could also look at the source (as @tobias_k suggested), to find a quicker way to check if you have the right <code>UNKNOWN</code> (for instance using <a href="https://docs.python.org/3/library/random.html?highlight=random.seed#random.seed" rel="nofollow"><code>random.getstate()</code></a> might be faster than <code>random.randint(1&lt;&lt;32, 1&lt;&lt;40)</code>)</p>
<p>I advise you to do some tests with a known <code>UNKOWN</code> to find the fastest algorithm.</p>
<hr/>
<p><strong>Edit</strong></p>
<p>maybe you could try to use parallelism with multiple thread looking for the value at the same time (with 4 threads, the first looks for 4*n, the second for 4*n+1, and so on)</p>
</div>
<div class="post-text" itemprop="text">
<p>As per @tobias_k's suggestion to look at the source, I think this question boils down to, solving UNKNOWN in:</p>
<pre><code>a = UNKNOWN+113092
a, x = divmod(a, 30268)
a, y = divmod(a, 30306)
a, z = divmod(a, 30322)
x, y, z = int(x)+1, int(y)+1, int(z)+1
x = (171 * x) % 30269
y = (172 * y) % 30307
z = (170 * z) % 30323
random = (x/30269.0 + y/30307.0 + z/30323.0) % 1.0

4294967296 + int(random * 2361183241434822606848) == 75284812356
</code></pre>
<p>Unfortunately you lose information every step of this algorithm which makes it almost impossible to reverse engineer.</p>
</div>
<span class="comment-copy">Trying to hack a Casino? :D</span>
<span class="comment-copy">Nope! How I wish that was true @thefourtheye! This is an exercise given to me by a friend who uses python. I'm just trying to learn.</span>
<span class="comment-copy">Maybe you can also use multi-threading (I just edited my answer)</span>
