<div class="post-text" itemprop="text">
<p>I have an xml file, with some data that I am extracting and placing in a numpy record array. I print the array and I see the data is in the correct location. I am wondering how I can take that information in my numpy record array and place it in a table. Also I am getting the letter b when I print my record, how do I fix that?</p>
<p>Xml data</p>
<pre><code>&lt;instance name="uart-0" module="uart_16550" offset="000014"/&gt;
&lt;instance name="uart-1"  offset="000020" module="uart_16650"/&gt;
</code></pre>
<p>Code in python</p>
<pre><code>inst_rec=np.zeros(5,dtype=[('name','a20'),('module','a20'),('offset','a5')])

for node in xml_file.iter():
    if node.tag=="instance":
        attribute=node.attrib.get('name')
        inst_rec[i]=  (node.attrib.get('name'),node.attrib.get('module'),node.attrib.get('offset'))
        i=i+1

for x in range (0,5):
    print(inst_rec[x])
</code></pre>
<p>Output</p>
<pre><code>(b'uart-0', b'uart_16550', b'00001')

(b'uart-1', b'uart_16650', b'00002')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using Python3, which uses unicode strings.  It displays byte strings with the <code>b</code>.  The xml file may also be bytes, for example, <code>encoding='UTF-8'</code>.</p>
<p>You can get rid of the <code>b</code>, by passing the strings through <code>decode()</code> before printing.</p>
<p>More on writing <code>csv</code> files in Py3
<a href="https://stackoverflow.com/questions/32660815/numpy-recarray-writes-byte-literals-tags-to-my-csv-file">Numpy recarray writes byte literals tags to my csv file?</a></p>
<p>In my tests, I can simplify the display by making the <code>inst_rec</code> array use unicode strings (<code>'U20'</code>)</p>
<pre><code>import numpy as np
import xml.etree.ElementTree as ET

tree = ET.parse('test.xml')
root = tree.getroot()

# inst_rec=np.zeros(2,dtype=[('name','a20'),('module','a20'),('offset','a5')])
inst_rec = np.zeros(2,dtype=[('name','U20'),('module','U20'),('offset','U5')])

i = 0
for node in root.iter():
    if node.tag=="instance":
        attribute=node.attrib.get('name')
        rec =  (node.attrib.get('name'),node.attrib.get('module'),node.attrib.get('offset'))
        inst_rec[i] = rec
        # no need to decode
        i=i+1

# simple print of the array
print(inst_rec)

# row by row print
for x in range(inst_rec.shape[0]):
    print(inst_rec[x])

# formatted row by row print
for rec in inst_rec:
    print('%20s,%20s, %5s'%tuple(rec))

# write a csv file
np.savetxt('test.out', inst_rec, fmt=['%20s','%20s','%5s'], delimiter=',')
</code></pre>
<p>producing</p>
<pre><code>[('uart-0', 'uart_16550', '00001') ('uart-1', 'uart_16650', '00002')]

('uart-0', 'uart_16550', '00001')
('uart-1', 'uart_16650', '00002')

          uart-0,          uart_16550, 00001
          uart-1,          uart_16650, 00002
</code></pre>
<p>and</p>
<pre><code>1703:~/mypy$ cat test.out
          uart-0,          uart_16550,00001
          uart-1,          uart_16650,00002
</code></pre>
<hr/>
<p>As ASCII table display</p>
<pre><code># formatted row by row print
print('----------------------------------------')
for rec in inst_rec:
    print('| %20s | %20s | %5s |'%tuple(rec))
    print('---------------------------------------')
</code></pre>
<p>If you want anything fancier you need to specify the display tool - html, rich text, etc.</p>
<hr/>
<p>with the added package <code>prettyprint</code>:</p>
<pre><code>import prettytable
pp = prettytable.PrettyTable()
pp.field_names = inst_rec.dtype.names
for rec in inst_rec:
    pp.add_row(rec)
print(pp)
</code></pre>
<p>produces</p>
<pre><code>+--------+------------+--------+
|  name  |   module   | offset |
+--------+------------+--------+
| uart-0 | uart_16550 | 00001  |
| uart-1 | uart_16650 | 00002  |
+--------+------------+--------+
</code></pre>
<p>In Python3 I am still using the unicode dtype.  <code>prettyprint</code> will display the <code>b</code> if the any of the strings are byte.</p>
</div>
<div class="post-text" itemprop="text">
<p>To avoid printing <code>b'xxx'</code>, try this:</p>
<pre><code>print (', '.join(y.decode() for y in inst_rec[x]))
</code></pre>
</div>
<span class="comment-copy">What soft of "table"? A 2-D numpy array? An HTML <code>&lt;table&gt;</code> element? An Excel spreadsheet?</span>
<span class="comment-copy">what do you mean by table? do you mean database?  If so, which database? From there you can probably search 'how to insert into MYDB'.</span>
<span class="comment-copy">you may want to look at the <code>tabulate</code> module. that is if you literally mean a table. The module is able to handle dict, lists, numpy arrays and other structured data, then format them for HTML, markdown, latex, and plain text viewing. <a href="https://pypi.python.org/pypi/tabulate" rel="nofollow noreferrer">tabulate</a></span>
<span class="comment-copy">Hi thank you so much! Great answer, but is there any way to display the data with an actual table in python?</span>
<span class="comment-copy">Actual table?  With pretty lines dividing cells?</span>
<span class="comment-copy">Yes, the cells do not have to be movable or anything fancy as in excel. Just would like to display the information in a table.</span>
<span class="comment-copy">do you mean like my edit?</span>
<span class="comment-copy">Yes, however I just found a way to print it using PrettyTable, however if I leave it with a unicode dtype there is an error. The pretty table does work if I change the dtype to a string but then the b shows up again. Any suggestions?</span>
<span class="comment-copy">This answer is right, but some details are missing: @user3757208 you're facing <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer">bytestrings</a> and with suggested <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">.decode()</a> method you got rid of that b'' notation, because it's not a bytestring any more.</span>
