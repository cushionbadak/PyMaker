<div class="post-text" itemprop="text">
<p>Why in the following function it returns only the last item?</p>
<pre><code>def lem(file):
    lem = ''
    for line in file:
        lem = line.split()[1]
    return lem

print(lem(file))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you only returned one thing (<code>lem</code> is being recreated each time). If you want to return more than one thing, either concatenate the strings, return a list, or make it a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow">generator function</a>:</p>
<pre><code># Concatenating
def lem(file):
    lem = []
    for line in file:
        lem.append(line.split()[1])
    return ''.join(lem)
    # Returning a list is the same, just omit the ''.join()
# To use when using ''.join, just print the return value
print(lem(file))
# To use when returning a list, loop (as in the generator case below), or print the list itself as in the ''.join case and it will print the list's repr

# Generator
def lem(file):
    for line in file:
        yield line.split()[1]
# To use the generator, either loop and print:
for x in lem(file):
    print(x)
# Or splat the result generator to print if you're using Py3's print
# function (or using from __future__ import print_function on Py2)
print(*lem(file)) # Separates outputs with spaces; sep="\n" to put them on separate lines, sep="" to print them back-to-back, etc.
# Or to print (or assign) them all at once as a single string:
print(''.join(lem(file))) # Change '' to whatever string you want to put between all the outputs
</code></pre>
<p>In the generator case, you need to loop over the outputs (implicitly as in splatting with <code>*</code> or combining with <code>''.join</code>, or explicitly with a <code>for</code> loop), printing the generator returned directly is mostly useless (it's going to be the <code>repr</code> of a general purpose <code>generator</code>, something like <code>&lt;generator object lem at 0xdeadbeef&gt;</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>On each iteration you reassign the value of <code>lem</code>.
You need to save it to list (for example) before each iteration.</p>
<pre><code>def lem(myfile):
    res = []
    for line in myfile:
        res.append(line.split()[1])
    return ' '.join(res) # joining to string

print(lem(myfile))
</code></pre>
<p>And stop using built-in names such as <code>file</code>.</p>
</div>
<span class="comment-copy">Because you always change value of lem variable. Change lem to list and append results of line spliting.</span>
<span class="comment-copy">If you wanted only the last item, how would you implement it differently?</span>
<span class="comment-copy">@PeterWood I think his title was misleading.</span>
<span class="comment-copy">I wwant them in as strings not a list</span>
<span class="comment-copy">@gino: it's a single <i>value</i>, it cannot be string<b>s</b></span>
<span class="comment-copy">And how can it be if i want all the iems?</span>
<span class="comment-copy">In what format?</span>
