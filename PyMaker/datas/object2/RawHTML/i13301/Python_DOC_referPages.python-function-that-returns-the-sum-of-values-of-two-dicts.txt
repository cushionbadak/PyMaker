<div class="post-text" itemprop="text">
<p>What <code>function</code> should I make that takes a country identifier from the dictionaries below and returns the sum the values of two dictonaries with unequal length. Also, the dicts should be weighed differently (find info below). In case one of the dicts has no info on a specific country (e.g. dict y does not have any info about the USA), then only one value should be used (e.g. dict x does have info about the USA, thus the output of the function should be 12.1).  For example:</p>
<p>Dictionary one:</p>
<p><code>x = {'USA':12.1, 'AUS':11.2, 'IND':10.3}</code></p>
<p>Dictionary two:</p>
<p><code>y = {'AUS': 9.4, 'IND': 8.3}</code></p>
<p>Summing up the criteria for the <code>function</code>:</p>
<ul>
<li>Input = a country identifier</li>
<li>Output = sum of the values that belong to a country</li>
<li>The values from each dict should have a different weight when calculating the sum. Dict Y gets weight 0.8. Dict X gets weight 0.2.</li>
<li>The Function should be iterable as it will be  used in another function that sees into two -given- huge dictionaries.</li>
</ul>
<p>I tried the following code, but it doesn't work:</p>
<p><code>def sum_dict_values(key):
    temp1 = (d.get(key, 0) for d in (x))
    temp2 = (d.get(key, 0) for d in (y))
    return sum(0.8*temp1, 0.2*temp2)</code></p>
<p>When running</p>
<p><code>sum_dict_values("USA")</code></p>
<p>I get the error:</p>
<p><code>TypeError: unsupported operand type(s) for *: 'float' and 'generator'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sum</code> to get the sum, and <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>get</code></a> to get a value from a dictionary or a default value if that value is not present.</p>
<pre><code>&gt;&gt;&gt; x = {'USA':12.1, 'AUS':11.2, 'IND':10.3}
&gt;&gt;&gt; y = {'AUS': 9.4, 'IND': 8.3}
&gt;&gt;&gt; sum(d.get("USA", 0) for d in (x, y))
12.1
&gt;&gt;&gt; sum(d.get("AUS", 0) for d in (x, y))
20.600000000000001
</code></pre>
<p>To put this in a <em>function</em> (sorry, I thought this would be obvious):</p>
<pre><code>def sum_dict_values(key, dict1, dict2):
    return sum(d.get(key),0) for d in (dict1, dict2))
</code></pre>
<p>Or make it a var-args function, so you can pass any number of dictionaries:</p>
<pre><code>def sum_dict_values(key, *dictionaries):
    return sum(d.get(key, 0) for d in dictionaries)
</code></pre>
<p>Both versions can be called like this: <code>sum_dict_values("AUS", x, y)</code></p>
<hr/>
<p>Concerning your updated question: The problem is that <code>temp1 = (d.get(key, 0) for d in (x))</code> is a generator (trying to call <code>get</code> on <em>the keys</em> from the dictionary), and you can not multiply a generator with a float. You do not need those generators at all, just call <code>x.get</code> and <code>y.get</code> directly. Also, if you always have just those two dicts, you do not need <code>sum</code> but can just use <code>+</code>:</p>
<pre><code>def sum_dict_values(key):
    return 0.8 * x.get(key, 0) + 0.2 * y.get(key, 0)
</code></pre>
<p>That's fine if you want to use that function with just those two dictionaries, and those exact weights, but you can also make it more general, like this, for an arbitrary number of dictionaries and according weights:</p>
<pre><code>def sum_dict_values(key, dictionaries, weights):
    return sum(w * d.get(key, 0) for d, w in zip(dictionaries, weights))
</code></pre>
<p>And use it like this: <code>sum_dict_values("USA", [x, y], [0.8, 0.2]))</code></p>
</div>
<span class="comment-copy">Don't really understand how I could use this as a function on two (other) huge dictionaries of which I don't know which countries are not represented in one of the dictionaries. You code works on these two specific dicts, but Im searching for a function that I can run on two other dicts. Thanks.</span>
<span class="comment-copy">@TjeerdTim the dict <code>.get</code> method allows you to return a default value for a key which doesn't exist in the dictionary.  The keys which do exist are essentially irrelevant to your problem. You use the <code>.get</code> method to handle the keys which <i>don't</i> exist.</span>
<span class="comment-copy">@DavidZemens ok, thanks, will try the function!</span>
<span class="comment-copy">@DavidZemens. Would you also happen to know how to work with different weights for both dicts in this function? The values of dict1 should be weighted 0.2 and the values of dict2 should be weighted 0.8. So the sum should be <code>0.2 * value of dict1 + 0.8 value of dict2</code>.</span>
<span class="comment-copy">@TjeerdTim See my updated answer.</span>
