<div class="post-text" itemprop="text">
<p>Consider the following minimal program:</p>
<pre><code>#!/usr/bin/env python3

import time
from multiprocessing import Process

def mp_test():
    time.sleep(3)
    print('mp_test')

print('start')
p = Process(target=mp_test)
p.run()
print('end')
</code></pre>
<p>According to my understanding of the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow">documentation for the <code>multiprocessing</code> module</a>, this code should execute <code>mp_test()</code> in a separate process, which means that it should execute in parallel with the main process. Therefore, I expect the following output:</p>
<pre><code>start
end
mp_test
</code></pre>
<p>However, the actual output I get is this:</p>
<pre><code>start
mp_test
end
</code></pre>
<p>Why is this? What changes do I need to make to get the result I'm expecting?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation:</p>
<blockquote>
<p>In multiprocessing, processes are spawned by creating a Process object and then calling its start() method.</p>
</blockquote>
<p>So it seems you should call <code>p.start()</code>, which will in turn call <code>p.run()</code> in a separate thread, which should give the result you want.</p>
<p>Calling <code>p.run()</code> directly skips the whole multi-threaded bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>p.start()</code> instead of <code>p.run()</code>.</p>
</div>
<span class="comment-copy"><code>p.run()</code> is a blocking call</span>
<span class="comment-copy">try using "import os print 'process id:', os.getpid()" to see if you are really getting 2 threads, and if so, check for blocking calls</span>
<span class="comment-copy">Thanks. Somehow I failed to glean that from the documentation.</span>
<span class="comment-copy">Wait. You don't need both p.start() and p.run() do you? Just p.start() I thought. Also, since it will run in a different process, you may not see the output. If you want to run in as a thread, then <code>from multiprocessing.dummy import Process</code> will run it as a separate thread. Then you should see the output since it should share the same stdout.</span>
