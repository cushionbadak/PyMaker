<div class="post-text" itemprop="text">
<p>If I compare two variables using <code>==</code>, does Python compare the identities, and, if they're not the same, then compare the values?</p>
<p>For example, I have two strings which point to the same string object:</p>
<pre><code>&gt;&gt;&gt; a = 'a sequence of chars'
&gt;&gt;&gt; b = a
</code></pre>
<p>Does this compare the values, or just the ids?:</p>
<pre><code>&gt;&gt;&gt; b == a
True
</code></pre>
<p>It would make sense to compare identity first, and I guess that is the case, but I haven't yet found anything in the documentation to support this. The closest I've got is <a href="https://docs.python.org/2/reference/datamodel.html#object.__eq__" rel="nofollow">this</a>:</p>
<blockquote>
<p><code>x==y</code> calls <code>x.__eq__(y)</code></p>
</blockquote>
<p>which doesn't tell me whether anything is done before calling <code>x.__eq__(y)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For user-defined class instances, <code>is</code> is used as a fallback - where the default <code>__eq__</code> isn't overridden, <code>a == b</code> is evaluated as <code>a is b</code>. This ensures that the comparison will always have a result (except in the <code>NotImplemented</code> case, where comparison is explicitly forbidden).</p>
<p>This is (somewhat obliquely - good spot <a href="https://stackoverflow.com/users/279627/sven-marnach">Sven Marnach</a>) referred to in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">data model documentation</a> (emphasis mine):</p>
<blockquote>
<p>User-defined classes have <code>__eq__()</code> and <code>__hash__()</code> methods by
  default; with them, <strong>all objects compare unequal (except with
  themselves)</strong> and <code>x.__hash__()</code> returns an appropriate value such
  that <code>x == y</code> implies both that <code>x is y</code> and <code>hash(x) == hash(y)</code>.</p>
</blockquote>
<hr/>
<p>You can demonstrate it as follows:</p>
<pre><code>&gt;&gt;&gt; class Unequal(object):
    def __eq__(self, other):
        return False


&gt;&gt;&gt; ue = Unequal()
&gt;&gt;&gt; ue is ue
True
&gt;&gt;&gt; ue == ue
False
</code></pre>
<p>so <code>__eq__</code> must be called before <code>id</code>, but:</p>
<pre><code>&gt;&gt;&gt; class NoEqual(object):
    pass

&gt;&gt;&gt; ne = NoEqual()
&gt;&gt;&gt; ne is ne
True
&gt;&gt;&gt; ne == ne
True
</code></pre>
<p>so <code>id</code> must be invoked where <code>__eq__</code> isn't defined.</p>
<hr/>
<p>You can see this <a href="https://hg.python.org/cpython/file/tip/Objects/object.c#l679" rel="nofollow noreferrer">in the CPython implementation</a>, which notes:</p>
<pre class="lang-c prettyprint-override"><code>/* If neither object implements it, provide a sensible default
   for == and !=, but raise an exception for ordering. */
</code></pre>
<p>The <em>"sensible default"</em> implemented is a C-level equality comparison of the pointers <code>v</code> and <code>w</code>, which will return whether or not they point to the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the answer by @jonrsharpe: <em>if</em> the objects being compared implement <code>__eq__</code>, it would be <em>wrong</em> for Python to check for identity first. </p>
<p>Look at the following example:</p>
<pre><code>&gt;&gt;&gt; x = float('nan')
&gt;&gt;&gt; x is x 
True
&gt;&gt;&gt; x == x
False
</code></pre>
<p>NaN is a specific thing that should never compare equal to itself; however, even in this case <code>x is x</code> should return <code>True</code>, because of the semantics of <code>is</code>. </p>
</div>
<span class="comment-copy">Python <i>falls back</i> to equality - if <code>__eq__</code> isn't defined, <code>a == b</code> is evaluated as <code>a is b</code>, to ensure that the comparison always has a result.</span>
<span class="comment-copy">@jonrsharpe that's what I expected. Is it documented anywhere?</span>
<span class="comment-copy">@jonrsharpe Actually, no that isn't what I expected. If <code>__eq__</code> is defined will it not check <code>id</code> first?</span>
<span class="comment-copy">So, if we are implementing <code>__eq__</code>, and it makes sense, should we first check <code>id</code>?</span>
<span class="comment-copy">@PeterWood you could do that, yes - where the comparison is complex, it would certainly be more efficient</span>
<span class="comment-copy">Nice find in the code.</span>
<span class="comment-copy">@jonrsharpe The Cpython line explains that!</span>
<span class="comment-copy">Falling back to object identity for user-defined classes isn't a CPython implementation detail.  It's part of the language specification, but documented in <a href="https://docs.python.org/2/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">a slightly unexpected place</a>.</span>
<span class="comment-copy">Well, yeah, NaN is kind of an exception.  There are many cases where Python actually <i>does</i> assume that object identity implies equality.  These cases often result in unexpected behaviour for <code>float('nan')</code>, like using <a href="http://stackoverflow.com/questions/6441857/nans-as-key-in-dictionaries">NaN as a dictionary key</a> or checking <code>float('nan') in list_of_floats</code> (the latter will only yield <code>True</code> if the exact <code>float('nan')</code> object you are checking for is in the list, not any NaN).  So arguing that it would be "wrong" for Python to check for identity first seems a bit off.</span>
