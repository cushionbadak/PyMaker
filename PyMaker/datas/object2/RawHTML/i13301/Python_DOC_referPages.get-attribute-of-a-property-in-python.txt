<div class="post-text" itemprop="text">
<p>I have a decorator which simply caches return values (called <code>@cached</code> in my example) and I wish to use it in conjunction with <code>@property</code>. This works just fine normally. The problem I am facing occurs when I try and use an <code>expire</code> attribute added by <code>@cached</code>.</p>
<pre><code>def cached(f):
    cache = [None]

    def inner(*args, **kwargs):
        if cache[0]:
            cache[0] = f(*args, **kwargs)
        return cache[0]

    def expire():
        cache[0] = None

    inner.expire = expire
    return inner

class Example(object):
    @property
    @cached
    def something_expensive(self):
        print("expensive")
        return "hello"


e = Example()
e.something_expensive
e.something_expensive.expire()
</code></pre>
<p>How am I able to get access to the expire function? added to the function after its replaced by <code>@property</code>. I understand <strong>why</strong> this doesn't work I am interested in a way of working around that problem.</p>
<p>Some restrictions:</p>
<ul>
<li>I cannot change the <code>@cached</code> decorator its in a library I don't control</li>
<li>I would really rather not remove <code>@property</code> because I want to expire in my unit tests and they make my code much nicer to use.</li>
</ul>
<p>One solution that I think is rather bad is (because In reality I have a lot of properties that I want to do this for):</p>
<pre><code>class Example(object):
    @cached
    def _something_expensive(self):
        return "hello"

    @property
    def something_expensive(self):
        return self._something_expensive()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can access it using the class dictionary:</p>
<pre><code>type(e).__dict__['something_expensive'].fget.expire()
</code></pre>
<p>In general <code>e.something_expensive</code> is equivalent to:</p>
<pre><code>type(e).__dict__['something_expensive'].__get__(e, type(e))
</code></pre>
<p>For more details read up: <a href="https://docs.python.org/2/howto/descriptor.html" rel="nofollow">Descriptor HowTo Guide</a></p>
<p>Note that inside the <code>expiry</code> function you're not setting <code>cache</code> from the outer function <code>cached</code> function as <code>None</code>, you're simply creating a new local variable. You may want to do something like this:</p>
<pre><code>def expire():
    del cache[:]
    cache.append(None)
</code></pre>
<p>In Python 3 it's even easier to update <code>cache</code> using the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="nofollow"><code>nonlocal</code></a> keyword.</p>
</div>
<span class="comment-copy">Thanks a lot, I appreciate the help. The cache = None is a typo ill fix that</span>
