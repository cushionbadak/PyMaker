<div class="post-text" itemprop="text">
<p>I've got a script that basically aggregates students' code files into one file for plagiarism detection. It walks through a tree of files, copying all file contents into one file.</p>
<p>I've run the script on the exact same files on my Mac and my PC. On my PC, it works fine. On my Mac, it encounters 27 UnicodeDecodeErrors (probably 0.1% of all files I'm testing).</p>
<p>What could cause a UnicodeDecodeError on a Mac, but not on a PC?</p>
<p>If relevant, the code is:</p>
<pre><code>originalFile = open(originalFilename, "r")
newFile = open(newFilename, "a")
newFile.write(originalFile.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Figure out what encoding was used when saving that file. A safe bet is loading the file as <code>'utf-8'</code>. If that succeeds then it's likely to be the correct encoding.</p>
<pre><code># try utf-8. If this fails, all bets are off.
open(originalFilename, "r", encoding="utf-8")
</code></pre>
<p>Now, if students are sending you these files, it's likely they just use the default encoding on their system. It is not possible to reliably guess the encoding. If they were using an 8-bit codec, like one of the ISO-8859 character sets, it will be almost impossible to guess which one was used. What to do then depends on what kind of files you're processing.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is incorrect to read Python source files using <code>open(originalFilename, "r")</code> on Python 3. <code>open()</code> uses <code>locale.getpreferredencoding(False)</code> by default. A Python source may use a different character encoding; in the best case, it may cause <code>UnicodeDecodeError</code> -- usually, you just get a <a href="http://www.hanselman.com/blog/WhyTheAskObamaTweetWasGarbledOnScreenKnowYourUTF8UnicodeASCIIAndANSIDecodingMrPresident.aspx" rel="nofollow">mojibake</a> silently.</p>
<p>To read Python source taking into account the encoding declaration (<code># -*- coding: ...</code>), use <a href="https://docs.python.org/3/library/tokenize.html#tokenize.detect_encoding" rel="nofollow"><code>tokenize.open(filename)</code></a>. If it fails; the input is not valid Python 3 source code.</p>
<blockquote>
<p>What could cause a UnicodeDecodeError on a Mac, but not on a PC?</p>
</blockquote>
<p><code>locale.getpreferredencoding(False)</code> is likely to be utf-8  on Mac. utf-8 doesn't accept arbitrary sequence of bytes as utf-8 encoded text. PC is likely to use a 8-bit character encoding that corrupts the input and produces a mojibake silently instead of raising an error due to a mismatched character encoding.</p>
<p>To read a text file, you should know its character encoding. If you don't know the character encoding then either read the file as a sequence of bytes (<code>'rb'</code> mode) or you could try to <em>guess</em> the encoding using <code>chardet</code> Python module (it would be only a guess but it might be good enough depending on your task).</p>
</div>
<span class="comment-copy">Python version? Can we see one of those files which fails on Mac?</span>
<span class="comment-copy">You may read <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">docs.python.org/3/howto/unicode.html</a> for the basic reason why you could get an <code>UnicodeDecodeError</code></span>
<span class="comment-copy">@cdonts Python 3.4. Unfortunately can't share the files (student privacy), though I might be able to find the exact characters it's failing on in one place but not the other...</span>
<span class="comment-copy">@cdonts Python 3.4. Unfortunately can't share the files (student privacy), though I might be able to find the exact characters it's failing on in one place but not the other...</span>
<span class="comment-copy">That would be useful!</span>
<span class="comment-copy">If OP doesn't know the encoding then <code>'iso-8859-1'</code> would be incorrect. <code>'iso-8859-1'</code> doesn't raise an error for <i>any</i> byte sequence e.g., if your input is utf-8 encoded <b><code>'œ'</code></b> character then <code>'iso-8859-1'</code> produce <b><code>'Å'</code></b>  mojibake silently.</span>
<span class="comment-copy">@J.F.Sebastian Yes, that's a problem with any <code>ISO-8859-*</code> codec. The safest bet is explicitly using the ASCII codec, so you consistently get an error. I'll add some clarification.</span>
<span class="comment-copy">I'm not just trying to read Python source code files, though. I'm trying to read any plaintext file.</span>
