<div class="post-text" itemprop="text">
<p>I have two lists of integers A and B, same length. List A is an unordered list integers, while list B is an ordered (in ascending order) list of integers with duplicates.</p>
<p>A and B are created such that pairwise no couples A[i],B[i] are identical.</p>
<p>My goal is the create a dictionary with key values taken from A, with  values from B that pairwise match with A[i], i.e.,</p>
<pre><code>myDict = {}

for i in A:
    myDict[i] = []

for i in range(len(A)):
    targetA = A[i]
    targetB = B[i]
    if targetA in myDict.keys():
        myDict[targetA].append(targetB)
</code></pre>
<p>For very large datasets, this is taking an extremely long time. Is there another way to come up with the same dictionary in the end, possibly by exploiting the sorted structure of B?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a> which should be simpler and faster:</p>
<pre><code>from collections import defaultdict

A = [6, 6, 3, 2, 5, 2, 3]
B = [1, 2, 3, 3, 4, 6, 7]

purchase_dict = defaultdict(list)
for key, value in zip(A, B):
     purchase_dict[key].append(value)
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow">docs</a>:</p>
<blockquote>
<p>When each key is encountered for the first time, it is not already in the mapping; so an entry is automatically created using the <code>default_factory</code> function which returns an empty list. The <code>list.append()</code> operation then attaches the value to the new list. When keys are encountered again, the look-up proceeds normally (returning the list for that key) and the <code>list.append()</code> operation adds another value to the list. This technique is simpler and faster than an equivalent technique using <code>dict.setdefault()</code>.</p>
</blockquote>
<p>What you get:</p>
<pre><code>&gt;&gt;&gt; purchase_dict
defaultdict(&lt;class 'list'&gt;, {2: [3, 6], 3: [3, 7], 5: [4], 6: [1, 2]})
&gt;&gt;&gt; purchase_dict[2]
[3, 6]
</code></pre>
</div>
<span class="comment-copy"><a href="http://www.tutorialspoint.com/python/dictionary_update.htm" rel="nofollow noreferrer">tutorialspoint.com/python/dictionary_update.htm</a></span>
<span class="comment-copy">Is purchaseDict supposed to be myDict?</span>
<span class="comment-copy">@Darcinon oops, yes, fixed</span>
<span class="comment-copy">I'm guessing myDict is initialized with arrays because A can have duplicates?</span>
<span class="comment-copy">It's initialized with arrays so that I can easily append items from B. A will have duplicates but if the initialization comes across that it will just reinitialize it's value to an empty array.</span>
<span class="comment-copy">Instead of pairs = [(a, b) for a, b in zip(A, B)], why don't you just use zip(A, B)?</span>
<span class="comment-copy">This solution is immensely faster. Thank you for your help.</span>
<span class="comment-copy">i.e. for key, value in zip(A, B): ...</span>
