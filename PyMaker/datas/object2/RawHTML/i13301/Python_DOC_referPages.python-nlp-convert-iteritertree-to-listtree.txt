<div class="post-text" itemprop="text">
<p>I have a parser function which returns <code>iter(iter(tree))</code>. </p>
<pre><code>parsedSentence = parser.raw_parse_sents([sentence],False)  
</code></pre>
<p>How can I convert the parsedSentence type to list(tree)  and access 1st element of that list. </p>
<p><em>I've already tried <code>list(parser.raw_parse_sents([sentence],False))</code> but it's not converting the result to list.</em> </p>
<p><strong>Edited:</strong> </p>
<pre><code>s1 = parsedSentence[0]
t1 = Tree.convert(s1)
positions = t1.treepositions()
</code></pre>
<p>Here it throws an error:</p>
<pre><code>'listiterator' object has no attribute 'treepositions'
</code></pre>
<p>Thank You.</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't make any difference that how many time you used <code>iter</code> on an iterable object you can simply convert it to list by calling <code>list</code> function. </p>
<pre><code>&gt;&gt;&gt; l =[6, 3, 5, 1, 4, 2]
&gt;&gt;&gt; list(iter(iter(iter(iter(l)))))
[6, 3, 5, 1, 4, 2]
</code></pre>
<p>But if you just want to get the fist item you don't need to use <code>list</code> function you can simply use <code>next</code> method on an iterator or <code>next()</code> built-in function (in python 3.X you can just use built-in function <code>next()</code>) to get the forst item :</p>
<pre><code>&gt;&gt;&gt; iter(iter(l)).next()
6
&gt;&gt;&gt; iter(iter(iter(l))).next()
6
&gt;&gt;&gt; iter(iter(iter(iter(l)))).next()
6
</code></pre>
<p>Now about your problem if you didn't get a <code>list</code> after calling <code>list</code> after calling it surely it's not an iterator it would be another object type that you need to get its items based on how its  <a href="https://docs.python.org/3/reference/datamodel.html#object.%5F%5Fgetitem%5F%5F" rel="nofollow"><code>__getitem__</code></a> method has been implemented.</p>
<p>Based on your edit <code>t1</code> is a list iterator object and doesn't has attribute <code>treepositions</code> you can loop over it's items and then call those <code>treepositions</code> attribute:</p>
<pre><code>s1 = parsedSentence[0]
t1 = Tree.convert(s1)
positions = [item.treepositions() for item in t1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finally, Issue was resolved by changing </p>
<pre><code>parser.raw_parse_sents([sentence],False)  
</code></pre>
<p>to </p>
<pre><code>parser.raw_parse(sentence)  
</code></pre>
<p>Thanks to everyone who contributed their time.  </p>
</div>
<span class="comment-copy">If you are not getting a list, what else are you getting?</span>
<span class="comment-copy">It is still considering the result as Iterator, say listiterator</span>
<span class="comment-copy">Note that in Python 3, the <code>next</code> method on iterator objects is renamed to <code>__next__</code>. A better way of getting at in either version is to use the builtin <code>next</code> function: <code>next(iterator)</code></span>
<span class="comment-copy">@Blckknght Indeed, fixed, thanks for improvement!</span>
<span class="comment-copy">Hi, thanks for the response. I have an idea that list(iter) would convert it into list. But I still get the same error : 'listiterator' object has no attribute 'treepositions'</span>
<span class="comment-copy">Did you have tried to use the attribute <code>treepositions</code> on result?</span>
<span class="comment-copy">Updated my question. pl. check it</span>
<span class="comment-copy">That's a nice try!</span>
<span class="comment-copy">Yup. Thank You.</span>
