<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33114074/python-check-string-contains-all-characters">python check string contains all characters</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a 170 000 list of words and I am writing an algorithms using a graph for each word to see the longest word chain possible;</p>
<p>Word chain being a list of words where the i-th word is the (i âˆ’ 1)st word with one extra character and the other characters are arranged in any manner</p>
<p>A -&gt; AN -&gt; CAN -&gt; CANE</p>
<p>Right now I have all the words listed alphabetically like CAT = ACT</p>
<p>and I say add an edge when String 2 contains string 1, plus one other character</p>
<p>However in the case of </p>
<p>A-&gt; AT -&gt; ACT</p>
<p>the edge between AT and ACT isn't drawn because the C split the A and the T and my if statement only works if "AT" was found.</p>
<p>How do I tell python to search a string so that the order of the characters do not matter?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a set of the two strings:</p>
<pre><code>set1 = set(string1)
set2 = set(string2)
</code></pre>
<p>And then see if <code>string1</code> contains everything that's in <code>string2</code></p>
<pre><code>set1.issubset(set2) # =&gt; returns True if set2 contains everything from set1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and convert both strings into it (it would count the letters in the string) , and then you can compare that for equality. Example -</p>
<pre><code>s1 = 'ACT'
s2 = 'CAT'
from collections import Counter
if Counter(s1) == Counter(s2):
    #Do stuff
</code></pre>
<p>Demo -</p>
<pre><code>&gt;&gt;&gt; s1 = 'ACT'
&gt;&gt;&gt; s2 = 'CAT'
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(s1) == Counter(s2)
True
</code></pre>
<hr/>
<p>If you want to check if one string is contained in the other without caring about order, you can use <code>any()</code> built-in function as below -</p>
<pre><code>s1 = 'AXCT'
s2 = 'CAT'
A = Counter(s1)
B = Counter(s2)
if not any(count &gt; A.get(b, 0) for b,count in B):
    #Do stuff.
</code></pre>
<p>Or you can also do the following (as indicated by <a href="https://stackoverflow.com/questions/33115405/in-python-how-do-i-check-a-string-to-see-if-any-combinations-of-another-string/33115430#comment54045518_33115430">@Kevin in the comments</a>) -</p>
<pre><code>s1 = 'AXCT'
s2 = 'CAT'
A = Counter(s1)
B = Counter(s2)
if (B &amp; A) == B:
    #Do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>str1 = 'A'
str2 = 'T'
searchstring = 'ACT'

if str1 in searchstring and str2 in searchstring:
    print('it matched')


# bigger example

str1 = 'AT'
searchstring = 'ACT'
matches = [a for a in str1 if a in searchstring]
if len(matches) == len(searchstring):
    print('it matched')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can turn the longer string into a regular expression and then match it. A simple way is to make all the characters optional, having first checked that the target string is one character longer:</p>
<pre><code>def can_reach(frm, to):
  if len(to) != len(frm) + 1: return False
  if not re.fullmatch(re.sub(r'(.)', r'\1?', to), frm): return False
  return True
</code></pre>
<p>If you don't have Python 3.4, then use an explicit <code>$</code> anchor:</p>
<pre><code>def can_reach(frm, to):
  if len(to) != len(frm) + 1: return False
  if not re.match(re.sub(r'(.)', r'\1?', to) + '$', frm): return False
  return True
</code></pre>
</div>
<span class="comment-copy">Do you care about duplicates characters in the string? Like example when comparing caat and act.</span>
<span class="comment-copy">You can try sorting the letters alphabetically.</span>
<span class="comment-copy">If order does not matter at all, use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a> instead of a string.  You can then take multiset intersections.</span>
<span class="comment-copy">i love that i use sets all day in python and never thought to set a string.  nice.</span>
<span class="comment-copy">Please note this would match <code>CAAT</code> to <code>ACT</code> , not sure if they should be matched or not.</span>
<span class="comment-copy">I suggested this exact approach in the OP's previous duplicate question, and was correctly informed that it will not work.</span>
<span class="comment-copy">May also want to demonstrate how to check for subsets using <code>&amp;</code> (i.e. <code>A &amp; B == A</code>).</span>
<span class="comment-copy">Funny, it works for me.  Try <code>Counter('ACT') &amp; Counter('ACTE') == Counter('ACT')</code>; I get True in 3.4.3.</span>
<span class="comment-copy">@Kevin Oh yes, <code>A</code> being the subset.</span>
<span class="comment-copy">Would like the downvoter to explain what is wrong with the answer, only that way I can fix the answer.</span>
<span class="comment-copy">What version of Python?</span>
<span class="comment-copy">Constructing <code>matches</code> is quadratic in string length, assuming both strings have similar lengths.  The other answers are more performant.</span>
<span class="comment-copy">not gonna get any argument from me.</span>
