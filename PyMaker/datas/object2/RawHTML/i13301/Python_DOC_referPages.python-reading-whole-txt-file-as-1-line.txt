<div class="post-text" itemprop="text">
<p>If I have a txt file and it contains something like this:</p>
<pre><code>AGCGTTGATAGTGCAGCCATTGCAAAACTTCACCCTA
AGCGTTGATAGTGCAGCCATTGCAAAACTTCACCCTA
AAGAAACGAGTATCAGTAGGATGCAGACGGTTGATTG   
</code></pre>
<p>But there are "\n" between lines.<br/>
And now if I want to make triplets out of them. Then is there a way to read the whole txt file as a line so it wouldn't give me:  </p>
<pre><code>'CAA', 'TGC', '\nAG', 'CGT', 'TGA', 'TAG', 'TGC', 'AGC',   
</code></pre>
<p>I uploaded my whole code I have at the moment because none of the given answers seemed to help.<br/>
That's the code I'm using to split the whole string into triplets:</p>
<pre><code>fob = open("Exercise.txt", "r")
def read_from_file(filename): 
    raw_txt = filename.read()
    triplets = [raw_txt[i:i+3] for i in range(0, len(raw_txt), 3)]
read_from_file(fob)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>raw_txt = ''.join(line.rstrip('\n') for line in f.readlines())
</code></pre>
<p>Or as <a href="https://stackoverflow.com/users/4014959/pm-2ring">@PM 2Ring</a> suggested:</p>
<pre><code>raw_txt = ''.join(f.read().splitlines())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to call readlines, just iterate over the file obejct rstripping each line:</p>
<pre><code>with open("test.txt") as f:
    line = "".join([line.rstrip() for line in f])
</code></pre>
<p>Or combine it with <code>map</code>:</p>
<pre><code>with open("test.txt") as f:
    line = "".join(list(map(str.rstrip,f)))
</code></pre>
<p><code>rstrip</code> will also take care of whatever your line endings are, there is no need to pass any arguments.</p>
<p>If you want the slices just call <code>iter</code> on the joined string and zip:</p>
<pre><code>line = iter("".join(list(map(str.rstrip, f))))
for sli in zip(line, line, line):
     print("".join(sli))
</code></pre>
<p>If you have data that was not a multiple of 3 and you did not want to lose it, you could use itertools.zip_longets:</p>
<pre><code>from itertools import zip_longest
with open("test.txt") as f:
    line = iter("".join(list(map(str.rstrip, f))))
    for sli in zip_longest(line,line,line, fillvalue=""):
        print("".join(sli))
</code></pre>
<p>On your sample input both will output:</p>
<pre><code>AGC
GTT
GAT
AGT
GCA
GCC
ATT
GCA
AAA
CTT
CAC
CCT
AAG
CGT
TGA
TAG
TGC
AGC
CAT
TGC
AAA
ACT
TCA
CCC
TAA
AGA
AAC
GAG
TAT
CAG
TAG
GAT
GCA
GAC
GGT
TGA
TTG
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just read the whole file and remove new lines:</p>
<pre><code>with open('file') as f:
    text = f.read().replace('\n', '')
    triplets = [text[i:i+3] for i in range(0, len(text), 3)]
</code></pre>
<p>You could also avoid reading the whole file into the memory and read from it iteratively while selecting triplets. You could even make this very lazy by using generator functions and function composition (this makes it very functional):</p>
<pre><code>def getCharacters (fileName):
    with open(fileName) as f:
        for line in f:
            yield from line.rstrip()

def getTriplets (source):
    it = [iter(source)] * 3
    for triplet in zip(*it):
        yield ''.join(triplet)

# and get a list of triplets
triplets = list(getTriplets(getCharacters('file'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I dont know whether I have solved the question,
but do test my code.</p>
<p>I have just modified your code.</p>
<p>As you mentioned in some comments you want to strip newlines in the middle of the file.</p>
<p>So for this I didn't stripped it but I replaced '\n' with '', using</p>
<pre><code>rtxt = raw_txt.replace('\n', '')
</code></pre>
<p>here is the code :</p>
<pre><code>fob = open("Exercise.txt", "r")
def read_from_file(filename): 
    raw_txt = filename.read()
    rtxt = raw_txt.replace('\n', '')
    triplets = [rtxt[i:i+3] for i in range(0, len(rtxt), 3)]
    print triplets
read_from_file(fob)
</code></pre>
<p>The Output in the triplets list :</p>
<pre><code>['AGC', 'GTT', 'GAT', 'AGT', 'GCA', 'GCC', 'ATT', 'GCA', 'AAA', 'CTT', 'CAC', 'CCT', 'AAG', 'CGT', 'TGA', 'TAG', 'TGC', 'AGC', 'CAT', 'TGC', 'AAA', 'ACT', 'TCA', 'CCC', 'TAA', 'AGA', 'AAC', 'GAG', 'TAT', 'CAG', 'TAG', 'GAT', 'GCA', 'GAC', 'GGT', 'TGA', 'TTG']
</code></pre>
</div>
<span class="comment-copy">What's symbol count for every line?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/10711116/strip-spaces-tabs-newlines-python">Strip spaces/tabs/newlines - python</a></span>
<span class="comment-copy">I'm not quite sure what you are asking for</span>
<span class="comment-copy">Your example contains lines of length 37. Is this intended?</span>
<span class="comment-copy">Nope, I added this randomly actually it has 210</span>
<span class="comment-copy">If you could <i>guarantee</i> that the file ends in a newline you could just do <code>''.join([line[:-1] for line in f.readlines()])</code>. OTOH, my preference is for <code>''.join(f.read().splitlines())</code>.</span>
<span class="comment-copy">Why iteration over file object is smarter?</span>
<span class="comment-copy">@Basilevs, because you are not keeping another copy of the file in memory for no reason <code>"".join([line.rstrip() for line in f.readline()])</code> will end up with three copies of the file in memory, the list comp, the join and the the readlines call.</span>
<span class="comment-copy">And of course, if you wish to decode those triplets to amino acids there's no need to build a list of them, you can do something like <code>for triplet in getTriplets(getCharacters('file')):</code> <code>aa = codon[triplet]</code>, where <code>codon</code> is a <code>dict</code> of amino acids indexed by triplet string.</span>
<span class="comment-copy">Can you explain the "def getTriplets"? What does the "iter" and zip(*) do</span>
<span class="comment-copy">@Donka That’s a <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">function definition</a>. <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">iter</a> creates an iterator from an iterable, and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> combines multiple iterables. Please read a tutorial if you really don’t know what functions are…</span>
<span class="comment-copy">Yeah, i did. Thank you alot for answering. It helped me out alot</span>
