<div class="post-text" itemprop="text">
<p>In some (mostly functional) languages you can do something like this:</p>
<pre><code>type row = list(datum)
</code></pre>
<p>or</p>
<pre><code>type row = [datum]
</code></pre>
<p>So that we can build things like this:</p>
<pre><code>type row = [datum]
type table = [row]
type database = [table]
</code></pre>
<p>Is there a way to do this in python? You could do it using classes, but python has quite some functional aspects so I was wondering if it could be done an easier way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is dynamically typed.  While ≈Åukasz R.'s answer is correct for type hinting purposes (which can in turn be used for static analysis and linting), strictly speaking, you do not <em>need</em> to do anything to make this work.  Just construct your lists like this and assign them to variables:</p>
<pre><code>foo_table = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
bar_table = ...
foo_database = [foo_table, bar_table, ...]
</code></pre>
<p>Type hints are genuinely useful, because they can help document how your code behaves, and they can be checked both statically and at runtime.  But there's nothing <em>forcing</em> you to do so if it is inconvenient.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.5 you may use <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">typing</a> module.</p>
<p>Quoting docs,
A type alias is defined by assigning the type to the alias:</p>
<pre><code>Vector = List[float]
</code></pre>
<p>To learn more about enforcing types in Python you may want to get familiar with PEPs: <a href="https://www.python.org/dev/peps/pep-0483/" rel="noreferrer">PEP483</a> and <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP484</a>.</p>
<p>Python historically was using duck-typing instead of strong typing and hadn't built-in way of enforcing types before 3.5 release. </p>
</div>
<div class="post-text" itemprop="text">
<p>How about something like <code>row = lambda datum: list(datum)</code>? No real type introspection support there, but it's a very simple way of "aliasing" types given Python's fondness for duck typing. And it's functional! Kinda.</p>
</div>
<span class="comment-copy">this is exactly what I was looking for, thanks!</span>
<span class="comment-copy">Note that type hints are intended for static analysis and for use by linters.  Type hints are not used for run-time type checking.  Nor are they used for optimization.  Also note that type hints are in their infancy.  Almost no code in Python has type hints and no analysis tools have been developed to deal with them (as far as I know).</span>
<span class="comment-copy">From the <a href="https://www.python.org/dev/peps/pep-0484/#non-goals" rel="nofollow noreferrer">Non-Goals section</a> of PEP484:  "While the proposed typing module will contain some building blocks for runtime type checking -- in particular the get_type_hints() function -- third party packages would have to be developed to implement specific runtime type checking functionality, for example using decorators or metaclasses. Using type hints for performance optimizations is left as an exercise for the reader."</span>
<span class="comment-copy">@StevenRumbalski: You're forgetting <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> (which is still in development, but arguably got this whole ball rolling to begin with).</span>
<span class="comment-copy">If you really want to do this kind of thing, just use <code>row = list</code>.  No need to complicate things.</span>
<span class="comment-copy">@Kevin That works for <code>row</code>, yeah, but not for <code>table</code> or <code>database</code>.</span>
<span class="comment-copy">Really?  What is the signature of <code>table()</code>?  How is it at all different from <code>list()</code>?</span>
<span class="comment-copy">@Kevin No different... if you don't mind your table not having a name. (Though that could be handled by using <code>database = dict</code>, I suppose.)</span>
