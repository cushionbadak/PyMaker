<div class="post-text" itemprop="text">
<p>I've got a script that runs on a infinite loop and adds things to a database and does things that I can't just stop halfway through so I can't just press ctrl+C and stop it.</p>
<p>I want to be able to somehow stop a while loop but let it finish it's last iteration before it stops.</p>
<p>Let me clarify:</p>
<p>my code looks something like this:</p>
<pre><code>while True:
    does something
    does more things
    does more things
</code></pre>
<p>I want to be able to interrupt the while loop at the end, or the beginning, but not between doing things because that would be bad.</p>
<p>and I don't want it to ask me after every iteration if i want to continue.</p>
<p>thanks for the great answers, i'm super grateful but my implementation doesn't seem to be working:</p>
<pre><code>def signal_handler(signal, frame):
        global interrupted
        interrupted = True

class Crawler():
    def __init__(self):
    # not relevent

    def crawl(self):
        interrupted = False
        signal.signal(signal.SIGINT, signal_handler)
        while True:
            doing things
            more things

            if interrupted:
                print("Exiting..")
                break
</code></pre>
<p>when I press ctr+c the program just keeps going ignoring me</p>
</div>
<div class="post-text" itemprop="text">
<p>What you need to do is catch the interrupt, set a flag saying you were interrupted but then continue working until it's time to check the flag (at the end of each loop). Because python's try-except construct will abandon the current run of the loop, you need to set up a proper signal handler; it'll handle the interrupt but then let python continue where it left off. Here's how:</p>
<pre><code>import signal

import time   # For the demo only

def signal_handler(signal, frame):
    global interrupted
    interrupted = True

signal.signal(signal.SIGINT, signal_handler)


interrupted = False
while True:
    print("Working hard...")
    time.sleep(3)
    print("All done!")

    if interrupted:
        print("Gotta go")
        break
</code></pre>
<p>Notes: </p>
<ol>
<li><p>Use this from the command line. In the IDLE console, it'll trample on IDLE's own interrupt handling.</p></li>
<li><p>A better solution would be to "block" KeyboardInterrupt for the duration of the loop, and unblock it when it's time to poll for interrupts. This is a feature of some Unix flavors but not all, hence python <a href="https://docs.python.org/3/library/signal.html#general-rules" rel="noreferrer">does not support it</a> (see the third "General rule")</p></li>
<li><p>The OP wants to do this inside a class. But the interrupt function is invoked by the signal handling system, with two arguments: The signal number and a pointer to the stack frame-- no place for a <code>self</code> argument giving access to the class object. Hence the simplest way to set a flag is to use a global variable. You can rig a pointer to the local context by using closures (i.e., define the signal handler dynamically in <code>__init__()</code>, but frankly I wouldn't bother unless a global is out of the question due to multi-threading or whatever.</p></li>
</ol>
<p><strong>Caveat:</strong> If your process is in the middle of a system call, handling an signal may interrupt the system call. So this may not be safe for all applications. Safer alternatives would be (a) Instead of relying on signals, use a non-blocking read at the end of each loop iteration (and type input instead of hitting ^C); (b) use threads or interprocess communication to isolate the worker from the signal handling; or (c) do the work of implementing real <a href="https://stackoverflow.com/a/13163980/699305">signal blocking</a>, if you are on an OS that has it. All of them are OS-dependent to some extent, so I'll leave it at that.</p>
</div>
<div class="post-text" itemprop="text">
<p>the below logic will help you do this,</p>
<pre><code>import signal
import sys
import time

run = True

def signal_handler(signal, frame):
    global run
    print "exiting"
    run = False

signal.signal(signal.SIGINT, signal_handler)
while run:
    print "hi"
    time.sleep(1)
    # do anything
    print "bye"
</code></pre>
<p>while running this, try pressing CTRL+C</p>
</div>
<div class="post-text" itemprop="text">
<p>I hope below code would help you:</p>
<pre><code>#!/bin/python

import sys
import time
import signal

def cb_sigint_handler(signum, stack):
    global is_interrupted
    print "SIGINT received"
    is_interrupted = True

if __name__ == "__main__":
    is_interrupted = False
    signal.signal(signal.SIGINT, cb_sigint_handler)
    while(1):
        # do stuff here 
        print "processing..."
        time.sleep(3)
        if is_interrupted:
            print "Exiting.."
            # do clean up
            sys.exit(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To clarify @praba230890's solution: The <code>interrupted</code> variable was not defined in the correct scope. It was defined in the <code>crawl</code> function and the handler could not reach it as a global variable, according to the definition of the handler at the root of the program.</p>
</div>
<span class="comment-copy">do you have any way to determine in your script that if the job has completed (last one)! If you do then use it in a condition and use a break statement</span>
<span class="comment-copy">The job in this case is a web crawler than can keep going indefinitely. I want to be able to tell it to stop crawling but not just interrupt it in the middle of a page for example.</span>
<span class="comment-copy"><i>let it finish it's last iteration before it stops</i>? How do you know if it has done the job or not?</span>
<span class="comment-copy">Hmm...could you add the important part of your script? This may help others understand what do you want :P</span>
<span class="comment-copy">The question is clear: Finish this iteration of the loop, then quit. And who thinks it's off-topic?</span>
<span class="comment-copy">Ok I think I understand, but my function is running in a class so do I need to define the signal_handler as a function of the class?</span>
<span class="comment-copy">Signal handlers are called outside the normal flow of control. You don't <i>need</i> to make it a class method, and I'm not sure if it'll even work. Looking in the <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">signal</a> documentation...</span>
<span class="comment-copy">Short answer: Just use a top-level function and a global variable. Unless you're multi-threaded etc., in which case life gets difficult...</span>
<span class="comment-copy">can you look at my edit? my implementation isn't working, I edited my post to include it now.</span>
<span class="comment-copy">Easy to spot: <code>crawl()</code> is setting, and then checking, a <i>local</i> variable <code>interrupted</code> :-) It needs to be global so the interrupt handler can get to it.</span>
