<div class="post-text" itemprop="text">
<p>Let's say I have the following string:</p>
<pre><code>a&lt;firstIndex&gt;b&lt;secondIndex&gt;c&lt;thirdIndex&gt;
</code></pre>
<p>And and I want to replace all occurances of <code>r'&lt;\w+Index&gt;'</code> with a number that corresponds to the number of the match. So given the above string, the return value would be:</p>
<pre><code>a1b2c3
</code></pre>
<p>I know there are lots of way to accomplish this in code (e.g. by writing a class with a counter that keeps track of the match index) but I'm wondering if this is possible through standard library functions alone.</p>
<p>I suppose, more specifically, I'm wondering if you can get this information from the <a href="https://docs.python.org/2/library/re.html#re.MatchObject" rel="nofollow"><code>MatchObject</code></a> object passed to the <a href="https://docs.python.org/2/library/re.html#re.subn" rel="nofollow"><code>repl</code></a> function used in <a href="https://docs.python.org/2/library/re.html#re.subn" rel="nofollow"><code>subn</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Read the docs for <a href="https://docs.python.org/3/library/re.html#re.sub"><code>re.sub</code></a>. <code>re.sub</code> (and <code>re.subn</code>) can take a function as the replacement parameter, not just a <code>str</code>. If you pass a function (really, any callable) as the <code>repl</code>, it is called for each match with the match object as the sole argument.</p>
<p>While the <code>match</code> object won't tell you how many matches have occurred, you can use the fact that it accepts any <code>callable</code> to make your own class that will track it for you. For example:</p>
<pre><code>class Replacer:  # On Py2, use class Replacer(object): to explicitly use new style classes
    def __init__(self):
        self.matchcnt = 0
    def __call__(self, matchobj):
        self.matchcnt += 1
        return matchobj.group(0) + str(self.matchcnt)
</code></pre>
<p>When you call <code>re.sub</code>/<code>re.subn</code>, you construct and pass <code>Replacer()</code> as the <code>repl</code>; that initializes a new object with a fresh <code>matchcnt</code>, and since it defines <code>__call__</code>, it acts like a function with state; each time it matches and replaces, the object state is incremented so it will use the next number on the subsequent replace. When the <code>sub</code> finishes, the object is disposed of, and creating another one for a subsequent <code>sub</code> restarts the count.</p>
</div>
<span class="comment-copy">It won't work for an arbitrary number of indices. It must be explicit in regex.</span>
<span class="comment-copy">Yes, I'm aware of this (I linked to it in my question), but it doesn't seem like the function, when called, is aware of what match number it is in the original string.</span>
<span class="comment-copy">That's where the fact that it can take an arbitrary callable (not just plain function) comes in. I'll add an example.</span>
<span class="comment-copy">@PhilipWalton: The edit cover your question? <code>re</code> doesn't provide it, but you can use Python's equivalent of C++ functors (objects that can carry state and act like functions) to get the same result.</span>
<span class="comment-copy">Can't recall if your original question specified that you know about using classes for this, but if it did, sorry I missed that. Short version: Nope, can't do it with built-ins entirely, but it's really easy to make a functor.</span>
<span class="comment-copy">Thanks @ShadowRanger, I figured I'd have to define a class to do this, but I didn't know about <code>__call__</code>, so that information was very helpful.</span>
