<div class="post-text" itemprop="text">
<p>Python can multiply strings like so:</p>
<pre><code>Python 3.4.3 (default, Mar 26 2015, 22:03:40)
[GCC 4.9.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; x = 'my new text is this long'
&gt;&gt;&gt; y = '#' * len(x)
&gt;&gt;&gt; y
'########################'
&gt;&gt;&gt;
</code></pre>
<p>Can Golang do the equivalent somehow?</p>
</div>
<div class="post-text" itemprop="text">
<p>It has a function instead of an operator, <a href="https://golang.org/pkg/strings/#Repeat" rel="noreferrer"><code>strings.Repeat</code></a>.  Here's a port of your Python example, which you can run <a href="https://play.golang.org/p/TODFy1BsTMq" rel="noreferrer">here</a>:</p>
<pre><code>package main

import (
    "fmt"
    "strings"
    "unicode/utf8"
)

func main() {
    x := "my new text is this long"
    y := strings.Repeat("#", utf8.RuneCountInString(x))
    fmt.Println(x)
    fmt.Println(y)
}
</code></pre>
<p>Note that I've used <a href="https://golang.org/pkg/unicode/utf8/#RuneCountInString" rel="noreferrer"><code>utf8.RuneCountInString(x)</code></a> instead of <a href="https://golang.org/pkg/builtin/#len" rel="noreferrer"><code>len(x)</code></a>; the former counts "runes" (Unicode code points), while the latter counts bytes. In the case of <code>"my new text is this long"</code>, the difference doesn't matter since all the characters are only one byte, but it's good to get into the habit of specifying what you mean:</p>
<pre><code>len("ā") //=&gt; 2
utf8.RuneCountInString("ā") //=&gt; 1
</code></pre>
<p>(In Python 2, <a href="https://docs.python.org/2/library/functions.html#len" rel="noreferrer"><code>len</code></a> counts bytes on plain strings and runes on Unicode strings (<code>u'...'</code>):</p>
<pre><code>&gt;&gt;&gt; len('ā') #=&gt; 2
&gt;&gt;&gt; len(u'ā') #=&gt; 1
</code></pre>
<p>In Python 3, plain strings <em>are</em> Unicode strings and <a href="https://docs.python.org/3/library/functions.html#len" rel="noreferrer"><code>len</code></a> counts runes; if you want to count bytes, you have to encode the string into a <a href="https://docs.python.org/3/library/functions.html#func-bytearray" rel="noreferrer"><code>bytearray</code></a> first:</p>
<pre><code>&gt;&gt;&gt; len('ā') #=&gt; 1
&gt;&gt;&gt; len(bytearray('ā', encoding='utf-8')) #=&gt; 2
</code></pre>
<p>In Go, there's only one kind of string. So you don't have to convert, but you do have to pick the function that matches the semantics you want.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it can, although not with an operator but with a function in the standard library.</p>
<p>It would be very easy with a simple loop, but the standard library provides you a highly optimized version of it: <a href="https://golang.org/pkg/strings/#Repeat" rel="noreferrer"><code>strings.Repeat()</code></a>.</p>
<p>Your example:</p>
<pre><code>x := "my new text is this long"
y := strings.Repeat("#", len(x))
fmt.Println(y)
</code></pre>
<p>Try it on the <a href="http://play.golang.org/p/_iF0P8aGyE" rel="noreferrer">Go Playground</a>.</p>
<p>Notes: <code>len(x)</code> is the "bytes" length (number of bytes) of the string (in UTF-8 encoding, this is how Go stores strings in memory). If you want the number of characters (runes), use <a href="https://golang.org/pkg/unicode/utf8/#RuneCountInString" rel="noreferrer"><code>utf8.RuneCountInString()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yup. The strings package has a <a href="https://golang.org/pkg/strings/#Repeat" rel="nofollow"><code>Repeat</code> function</a>.</p>
</div>
<span class="comment-copy">Bonus pts for rune-length vs. byte-length differentiation.</span>
