<div class="post-text" itemprop="text">
<p>I saw such a use of the modulo operator in a lambda function testing for primality. Can someone explain why the following statement will execute as long as i is greater than x if this isn't to my knowledge an actual boolean statement. It works with division as well if the numerator is greater than the denominator regardless if they are factors or not.</p>
<pre><code>if x % i:
    # Execute random foolishness
</code></pre>
<p>NOTE: I have only tried this in Python and Java so if this works in another language I apologize as it is probably not a language specific question. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python treats non-zero values as True, so <code>if x % i:</code> is the same as <code>if x % i != 0:</code>. It's just a quick way to test if <code>x</code> is evenly divisible by <code>i</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For digit objects python assumes every non-zero value as <code>True</code> and zero as False, thus the condition <code>if x % i:</code> will be True until <code>x</code> is not divisible by <code>i</code> , else it would be <code>False</code>.</p>
<pre><code>&gt;&gt;&gt; bool(-1)
True
&gt;&gt;&gt; bool(3)
True
&gt;&gt;&gt; bool(0)
False
</code></pre>
<p>There is also such criteria for other objects like lists or strings, if you have a empty list or string python will evaluate it as False and for other cases it would be True.</p>
<pre><code>&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool('')
False
&gt;&gt;&gt; bool('a')
True
&gt;&gt;&gt; bool([1])
True
&gt;&gt;&gt; bool([''])
True
</code></pre>
<p>Actually it's <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow"><em>Truth value testing</em></a> :</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:</p>
<ul>
<li><p>None</p></li>
<li><p>False</p></li>
<li><p>zero of any numeric type, for example, 0, 0.0, 0j.</p></li>
<li><p>any empty sequence, for example, '', (), [].</p></li>
<li><p>any empty mapping, for example, {}.</p></li>
</ul>
<p>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False. </p>
<p>All other values are considered true â€” so objects of many types are always true.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The statement is a condensed for form of:</p>
<pre><code>if x % i != 0
</code></pre>
<p>As long as the modulo is not zero, this <code>if</code> will execute. If a number is evenly divisible by <code>i</code>, it will not perform the <code>if</code> block.</p>
</div>
<span class="comment-copy">In Python, <code>if x % i:</code> is equivalent to <code>if bool(x % i):</code> or <code>if x % i != 0:</code>; see <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#truth-value-testing</a></span>
<span class="comment-copy">While it does work, this sort of thing has always struck me as too C-like to be genuinely Pythonic. Others, of course, might disagree.</span>
