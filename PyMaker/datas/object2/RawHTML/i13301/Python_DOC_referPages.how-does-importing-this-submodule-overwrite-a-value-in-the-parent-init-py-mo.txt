<div class="post-text" itemprop="text">
<p>I have a <a href="https://github.com/posita/testimport/tree/master/testimport" rel="nofollow">package with three files</a>:</p>
<pre><code>testimport
├── __init__.py
├── logging.py
└── util.py
</code></pre>
<p><code>__init__.py</code> contains:</p>
<pre><code>from __future__ import ( absolute_import, division, print_function, unicode_literals )
import logging # imports standard library module (because absolute_import is activated)
_logging_file = logging.__file__
from .util import testlog
if _logging_file != logging.__file__:
    # at this point, `logging` no longer points to the standard
    # library module, but the local logging module instead(!)
    raise AssertionError('`logging` overwritten; {!r} is not equal to {!r}'.format(_logging_file, logging.__file__))
LOGGER = logging.getLogger(__name__)
</code></pre>
<p><code>logging.py</code> contains:</p>
<pre><code>import sys
__all__ = ()
SILENT = -(sys.maxsize) - 1
</code></pre>
<p><code>util.py</code> contains:</p>
<pre><code>from __future__ import ( absolute_import, division, print_function, unicode_literals )
import logging # imports standard library module (because absolute_import is activated)
from .logging import SILENT # this is (perversely) where the importing module's `logging` gets overridden
__all__ = ( 'testlog' )
_LOGGER = logging.getLogger(__name__)
def testlog(log_lvl=SILENT):
    _LOGGER.log(log_lvl, 'Hello!')
</code></pre>
<p>The <code>AssertionError</code> is raised when <code>import</code>ing <code>testimport</code>:</p>
<pre><code>% python
Python 2.7.10 (default, Sep 24 2015, 10:13:45)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import testimport
&lt;function testlog at 0x10e86e1b8&gt;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "testimport/__init__.py", line ..., in &lt;module&gt;
    raise AssertionError('`logging` overwritten; {!r} is not equal to {!r}'.format(_logging_file, logging.__file__))
AssertionError: `logging` overwritten; '/.../lib/python2.7/logging/__init__.pyc' is not equal to 'testimport/logging.pyc'
</code></pre>
<p>Why on earth is that happening?</p>
<p>Test repo is <a href="https://github.com/posita/testimport" rel="nofollow">here</a>. Travis builds are <a href="https://travis-ci.org/posita/testimport" rel="nofollow">here</a>.</p>
<p>Update, when stepping through this with <a href="https://docs.python.org/2/library/pdb.html" rel="nofollow"><code>pdb</code></a>, it appears that the offending instruction is <code>from .logging import SILENT</code> in <code>util.py</code>, but I have no idea why. This is an abbreviated session from the repo version:</p>
<pre><code>% echo 'import testimport' &gt;|testme.py
% python -m pdb testme.py
(Pdb) s
--Call--
&gt; /.../testimport/testimport/__init__.py(1)&lt;module&gt;()
-&gt; from __future__ import (
(Pdb) b 12
Breakpoint 1 at /.../testimport/testimport/__init__.py:12
(Pdb) c
&gt; /.../testimport/testimport/__init__.py(12)&lt;module&gt;()
-&gt; from testimport.util import testlog
(Pdb) s
--Call--
&gt; /.../testimport/testimport/util.py(1)&lt;module&gt;()
-&gt; from __future__ import (
(Pdb) b 5
Breakpoint 2 at /.../testimport/testimport/util.py:5
(Pdb) c
&gt; /.../testimport/testimport/util.py(5)&lt;module&gt;()
-&gt; from .logging import SILENT
(Pdb) u
&gt; /.../testimport/testimport/__init__.py(12)&lt;module&gt;()
-&gt; from testimport.util import testlog
(Pdb) p logging
&lt;module 'logging' from '/.../lib/python2.7/logging/__init__.pyc'&gt;
(Pdb) d
&gt; /.../testimport/testimport/util.py(5)&lt;module&gt;()
-&gt; from .logging import SILENT
(Pdb) s
--Call--
&gt; /.../testimport/testimport/logging.py(1)&lt;module&gt;()
-&gt; from __future__ import (
(Pdb) b 6
Breakpoint 3 at /.../testimport/testimport/logging.py:6
(Pdb) c
&gt; /.../testimport/testimport/logging.py(6)&lt;module&gt;()
-&gt; SILENT = -(sys.maxsize) - 1
(Pdb) u
&gt; /.../testimport/testimport/util.py(5)&lt;module&gt;()
-&gt; from .logging import SILENT
(Pdb) u
&gt; /.../testimport/testimport/__init__.py(12)&lt;module&gt;()
-&gt; from testimport.util import testlog
(Pdb) p logging
&lt;module 'logging' from '/.../lib/python2.7/logging/__init__.pyc'&gt;
(Pdb) s
&gt; /.../testimport/testimport/util.py(7)&lt;module&gt;()
-&gt; 'testlog',
(Pdb) u
&gt; /.../testimport/testimport/__init__.py(12)&lt;module&gt;()
-&gt; from testimport.util import testlog
(Pdb) p logging
&lt;module 'testimport.logging' from 'testimport/logging.pyc'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After some more research, I understand the above to be the correct behavior. I am embarrassed to say that I did not see this before. It makes total sense once one understands what's happening. From <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow">the docs</a>:</p>
<blockquote>
<h3>Submodules</h3>
<p>When a submodule is loaded using any mechanism (e.g. <code>importlib</code> APIs, the <code>import</code> or <code>import-from</code> statements, or built-in <code>__import__()</code>) a binding is placed in the parent module’s namespace to the submodule object.</p>
<p>...</p>
<p>Given Python’s familiar name binding rules this might seem surprising, but it’s actually a fundamental feature of the import system.</p>
</blockquote>
<p>This explanation seems to have been absent before Python 3.4, but affects all versions of Python. See <a href="https://bugs.python.org/issue24029" rel="nofollow">Python issue #24029</a>.</p>
<p>In the example above, <code>testimport.logging</code> necessarily refers to the local module. Importing it (from anywhere) installs it in <code>testimport</code> (as should be expected). It should come as no surprise that this necessarily replaces any existing <code>logging</code> member of <code>testimport</code>.</p>
</div>
<span class="comment-copy">Can you print <i>logging_file and logging.__file_</i> ? Also, if you comment out from .util import testlog does <i>logging_file != logging.__file_</i> == True ?  I'm just guessing that util.py is invoking some funtion in logging (not testimport.logging) that is making a new <b>file</b> variable. So the old reference you got is no longer valid.</span>
<span class="comment-copy">@CalebMauer, the values for <code>_logging_file </code> and <code>logging.__file__</code> are printed in the last line of the interactive session in the OP. If I comment out <code>from .util import testlog</code>, then the <code>AssertionError</code> is not raised. However, if I do <code>from testlog.util import testlog</code>, I also get the <code>AssertionError</code> (so I'm pretty sure it isn't an artifact of the dot notation).</span>
<span class="comment-copy">Regarding the comment, "I'm just guessing that util.py is invoking some funtion in logging (not testimport.logging) that is making a new <b>file</b> variable," I'm not sure I understand what that means. Can you elaborate? I guess my question boils down to: How can <code>from .util import testlog</code> affect the module-scoped variables in the <i>importing</i> module without modifying them explicitly (you can see above that <code>util.py</code> does nothing explicit with its parent).</span>
<span class="comment-copy">I think that when util does from .logging import SILENT it is overwriting the double underscore file variable. I'm not sure why it would do that yet considering your absolute_import, so I'm not posting an answer yet. Just a guess.</span>
<span class="comment-copy">@CalebMauer, it's probably not overwriting the <code>__file__</code> attribute to <code>logging</code> in the parent module. It looks like it's replacing the entire module. Just before the <code>raise</code> statement in the OP, <code>dir(logging)</code> shows the local <code>logging</code> module's members, and none of the standard library <code>logging</code> ones: <code>['SILENT', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', 'absolute_import', 'division', 'print_function', 'sys', 'unicode_literals']</code>.</span>
