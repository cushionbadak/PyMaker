<div class="post-text" itemprop="text">
<p>I have been learning about ANN but the book I'm reading has examples in Python. The problem is that I have never written in Python and these lines of code are too hard for me to understand:</p>
<pre><code>sizes = [3,2,4]
self.weights = [np.random.randn(y, x) 
                    for x, y in zip(sizes[:-1], sizes[1:])]
</code></pre>
<p>I read some things about it and found out that the <code>randn()</code> function returns an array with <code>y</code> elements and <code>x</code> dimensions populated with random numbers between 0 and 1. <code>zip()</code> connects two arrays into one. <code>sizes[:-1]</code> returns the last element and <code>sizes[1:]</code> return the array without its first element.</p>
<p>But with all of this I still can't explain to myself what would this generate.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sizes[:-1]</code> will return the sublist <code>[3,2]</code> (that is, all the elements except the last one).</p>
<p><code>sizes[1:]</code> will return the sublist <code>[2,4]</code> (that is, all the elements except the first one). </p>
<p><code>zip([a,b], [c,d])</code> gives <code>[(a,c), (b,d)]</code>. </p>
<p>So zipping the two lists above gives you <code>[(3,2), (2,4)]</code></p>
<p>The construction of weights is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. Therefore this code is equivalent to</p>
<pre><code>weights = []

for x,y in [(3,2), (2,4)]:
       weights.append(np.random.randn(y, x))
</code></pre>
<p>So the final result would be the same as</p>
<pre><code>[ np.random.randn(2,3), 
  np.random.randn(4,2) ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's break this up into chunks:</p>
<hr/>
<pre><code>self.weights = [some junk]
</code></pre>
<p>is going to be a list comprehension.  Meaning, do the <code>some junk</code> stuff and you'll end up with a list of elements from that. Usually these look like so:</p>
<pre><code>self.weights = [some_func(x) for x in a_list]
</code></pre>
<p>This is the equivalent of:</p>
<pre><code>self.weights = []
for x in a_list:
    self.weights.append(some_func(x))
</code></pre>
<hr/>
<pre><code>zip(a, b)
</code></pre>
<p>Will piecewise combine the elements of <code>a</code> and <code>b</code> into tuple pairs:</p>
<pre><code>(a1, b1), (a2, b2), (a3, b3), ...
</code></pre>
<hr/>
<pre><code>for x, y in zip(a, b):
</code></pre>
<p>This iterates through that tuple pairs talked about above</p>
<hr/>
<pre><code>sizes[:-1]
</code></pre>
<p>This is stating to get all the elements of list <code>sizes</code> except the <strong>last</strong> item (<code>-1</code>).  </p>
<pre><code>sizes[1:]
</code></pre>
<p>This is stating to get the all the elements of list <code>sizes</code> except the <strong>first</strong> item.</p>
<hr/>
<p>So, finally piecing this all together you get:</p>
<pre><code>self.weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])] 
</code></pre>
<p>Which is a list comprehension iterating through the tuple pairs of first sizes from 2nd item to last and second from 1st item to next to last, create a random number based on those two parameters, then append to a list that is stored as <code>self.weights</code></p>
</div>
<div class="post-text" itemprop="text">
<p>a lot is going on here.</p>
<p>let's decompose that expression: as you said <code>zip</code> will create a list of tuples containing each element of <code>sizes</code> and it's successor (except for the last one)</p>
<p>The comprehension list <code>[ ... for x, y in zip(..)]</code> works as follows: the tuple is exploded in the variables <code>x</code> and <code>y</code> and those are passed onto <code>np.random.randn</code> to create a list of random matrices.</p>
<p>These matrices are characterized by having the first dimension (rows) long as specified by each element of <code>sizes</code> and the second dimension (columns) long as the following element.</p>
<p>Interestingly, the matrices have compatible dimensions to be multiplied to each other in that sequence, but I guess that this is not the purpose. The purpose of each matrix in the <code>weights</code> list is to specify the weights that are between fully connected layers of neurons. Good luck! Seems a fun project!</p>
<h2>Post Scriptum</h2>
<p>since you are a beginner: you can add the <code>import pdb; pdb.set_trace()</code> statement anywhere in your code to get a breakpoint. Then you can just copy and paste different parts of any expression to see what comes out.
For example:
<code>
ipdb&gt; print sizes
[3, 2, 4]
ipdb&gt; print sizes[:-1]
[3, 2]
ipdb&gt; print sizes[1:]
[2, 4]
ipdb&gt; print zip(sizes[:-1], sizes[1:])
[(3, 2), (2, 4)]
ipdb&gt; print [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]
[array([[ 0.25933943,  0.59855688,  0.49055744],
       [ 0.94602292, -0.8012292 ,  0.56352986]]), array([[ 0.81328847, -0.53234407],
       [-0.272656  , -1.24978881],
       [-1.2306653 ,  0.56038948],
       [ 1.15837792,  1.19408038]])]
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This code generates a list and assignes it to the self.weights attribute (this is maybe inside a class? That would explain the self). The second line is a list comprehension. It generates a list, applying the function randn to pairs of variables (x, y)</p>
</div>
<span class="comment-copy"><code>sizes[:-1]</code> returns the array up until (i.e. not including) its last element. <code>sizes[-1]</code> returns the last element of the array.</span>
<span class="comment-copy">Yeah I figured that out because of the other answers</span>
<span class="comment-copy">Thanks a lot for explaining. It turns out I was mistaken about what :-1 does and what zip does.</span>
<span class="comment-copy">@ChadSimmons: I've taken the freedom to add a few details to your answers, to make it more clear. Feel free to revert my edit if you don't like it.</span>
<span class="comment-copy">This answer is incorrect. <code>for x, y in [(3,2), (2,4)]</code> is not the same as <code>for x in [3,2]:\n\tfor y in [2,4]:</code>. The first uses tuple expansion to set x and y to 3 and 2 respectively for the first iteration of the loop, and 2 and 4 respectively for the second iteration. That means that there is a total of two iterations. The second (nested for-loops), has a total iteration count of 4. Additionally, you mistakenly computed <code>np.random.randn(x, y)</code> instead of <code>np.random.randn(y, x)</code>. Therefore, the output of this code should be <code>[np.random.randn(2, 3), np.random.randn(4, 2)]</code>.</span>
<span class="comment-copy">fixed the x, y transpose</span>
<span class="comment-copy">@ChadSimmons Your answer is still wrong. Try running your code and the OPs code, and compare the output. You: <code>[np.random.randn(2,3), np.random.randn(4,3), np.random.randn(2,2), np.random.randn(4,2)]</code>. OP: <code>[np.random.randn(2,3), np.random.randn(4,2)]</code>.</span>
<span class="comment-copy">Thanks for explaining. Yeah it's a fun project. A little too hard for me but I'm handling it for now. Also the numbers (3,2,4) were just for clearer explanation I chose them randomly.</span>
