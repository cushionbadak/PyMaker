<div class="post-text" itemprop="text">
<p>This <code>import</code> statement:</p>
<pre><code>from tkinter import *
</code></pre>
<p>does not import <code>tkinter.filedialog</code>. Why it doesn't?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>tkinter</code> is a package, when doing <code>from tkinter import *</code> , it would import all the names defined in the <code>__init__.py</code> for the <code>tkinter</code> package, as well as only modules and subpackages defined in the <code>__all__</code> in the <code>__init__.py</code> of <code>tkinter</code> package.</p>
<p>In my Python 3.4 , there is no <code>__all__</code> defined in <code>tkinter/__init__.py</code> , hence it does not import any modules (like <code>filedialog</code>) from within it.</p>
<p>This is explained in <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow">the documentation -</a></p>
<blockquote>
<p>The only solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a package’s <code>__init__.py</code> code defines a list named <code>__all__</code> , it is taken to be the list of module names that should be imported when from package import * is encountered.</p>
<p>If <code>__all__</code> is not defined, the statement from sound.effects import * does not import all submodules from the package sound.effects into the current namespace; it only ensures that the package sound.effects has been imported (possibly running any initialization code in <code>__init__.py</code>) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by <code>__init__.py</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Generally, the values imported from a <code>from &lt;package&gt; import *</code> depend on the values specified in the <code>__all__</code> list for the <code>__init__</code> file of that package.</p>
<p>Not being able to import <code>filedialog</code> means that it is not contained in the <code>__all__</code> list for the <code>tkinter</code> <code>__init__</code> file.</p>
<hr/>
<p>A quick way to evaluate whether a package 'exports' some submodules is to evaluate whether it has an <code>__all__</code> attribute after you <code>import</code> it. If it does, it will return the available submodules, if not an <code>Attribute Error</code> will be raised.</p>
<p>So for example, for a package like <code>scipy</code>:</p>
<pre><code>import scipy
print(scipy.__all__) # prints all contents.
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/44834/can-someone-explain-all-in-python" title="can someone explain all in python">stackoverflow.com/questions/44834/…</a></span>
<span class="comment-copy">This seems to contradict this highly rated <a href="http://stackoverflow.com/a/64130/2228746">answer</a>. <i>If the <b>all</b> above is commented out, this code will then execute to completion, as the default behaviour of import * is to import all symbols that do not begin with an underscore, from the given namespace.</i> <code>filedialog</code> does not begin with an underscore.</span>
<span class="comment-copy">They are talking about a single module, that is not true for packages (Like I emphasised, <code>tkinter</code> is a package, and it does not automatically import modules from within the package (if the <code>__all__</code> is not specified). As also very well explained in the documentation that I have linked in my answer.</span>
<span class="comment-copy">Packages are basically directories that can contain other packages/modules . Modules are single <code>.py</code> files. If you want to know more about packages, <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">this</a> would be a good starting place</span>
<span class="comment-copy">Not exactly sure for the down vote here.</span>
