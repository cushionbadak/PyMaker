<div class="post-text" itemprop="text">
<pre><code>my_list = [0, 219, 211, 212, 212]
</code></pre>
<p>I need to sum the items in this way:</p>
<p>item+item, (item+item)+item, (item+item+item)+Item...</p>
<p>0+219, (219)+211, (430)+212, (641)+212</p>
<p>To be clearer, this is the sum I need to get:</p>
<pre><code>new_list = [219, 430, 641, 853]
</code></pre>
<p>I think the solution might be a list comprehension, something like this would return just the sum of each item with the next though.</p>
<pre><code>[(x + y) for (x, y) in zip(my_list[:-1], my_list[1:])]
</code></pre>
<p>any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>... or something like this maybe</p>
<pre><code>b=0
b = [sum(a[:k]) for k in range(1+len(a))]
</code></pre>
<p>likely not overly efficient for large lists.</p>
<p>This test:</p>
<pre><code>a = [7, 11, 24, 38]

b=0
b = [sum(a[:k]) for k in range(1+len(a))]

print(a)
print(b)
</code></pre>
<p>gave:</p>
<pre><code>&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
[7, 11, 24, 38]
[0, 7, 18, 42, 80]
&gt;&gt;&gt; 
</code></pre>
<p>Or do what Martijn suggested and use itertools.</p>
<p>[As an aside - will the Python culture of 'go find a library to import' kill the art of coding?]</p>
</div>
<div class="post-text" itemprop="text">
<p>You could copy the <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate()</code> documentation description</a> from Python 3:</p>
<pre><code>import operator

def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    try:
        total = next(it)
    except StopIteration:
        return
    yield total
    for element in it:
        total = func(total, element)
        yield total
</code></pre>
<p>This will sum the values from the input list, producing a running total:</p>
<pre><code>&gt;&gt;&gt; my_list = [0, 219, 211, 212, 212]
&gt;&gt;&gt; list(accumulate(my_list))
[0, 219, 430, 642, 854]
</code></pre>
<p>You could tailor the pattern to your specific case, remove the <code>func</code> customisation point and ignore the first total:</p>
<pre><code>def accumulate(iterable):
    it = iter(iterable)
    try:
        total = next(it)
    except StopIteration:
        return
    for element in it:
        total += element
        yield total
</code></pre>
<p>Now it produces 3 values for 4 inputs:</p>
<pre><code>&gt;&gt;&gt; list(accumulate(my_list))
[219, 430, 642, 854]
</code></pre>
</div>
<span class="comment-copy">Where did <code>853</code> suddenly come from? Shouldn't it be <code>[219, 430, 642]</code>?</span>
<span class="comment-copy">641?? Explain the math.</span>
<span class="comment-copy">@AshwiniChaudhary: they added <code>211</code> twice.</span>
<span class="comment-copy">sorry I forgot to add the last item. I updated the question</span>
<span class="comment-copy">My answer doesn't use <code>itertools</code>, because this is Python 2 and not Python 3. My answer merely credits the Python 3 <code>itertools</code> <i>documentation</i> as the source for the function I proposed the OP use.</span>
<span class="comment-copy">Thanks this is exactly what I needed!                                                          b = [sum(a[:k]) for k in range(1+len(a))]</span>
