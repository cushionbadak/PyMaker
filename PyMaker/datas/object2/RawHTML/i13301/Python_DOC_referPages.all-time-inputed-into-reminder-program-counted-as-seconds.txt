<div class="post-text" itemprop="text">
<p>I'm having the problem that when running this program, no matter what, everything you input are counted as seconds rather than wahtever unit you actually chose.</p>
<pre><code>        __author__ = 'Exanimem'
# Homework Notifier Version 0.1.5 It works a bit better. Kind of.

import time
import threading
import webbrowser
import winsound
import ctypes
import sys
import math
import pyglet

# TO-DO
# NOTE: NOT LISTED IN ORDER OF PRIORITY
# Add months, years, decades, and centuries including system to detect what month, year, decade, and centry it is
# Add ability to remind at a specific time in a unit, like "4:50 in 1 day"
# Detect spelt out numbers as numbers
# Have that you press enter then answer
# Have message box be brought to front of the screen
# Have notifications still come when application closed
# Combine unit and digit function
# User Friendly UI?
# Allow users to input time like "4:30 PM EST"
# Autodetect timezone
# Recorded log to look back on past notifications?
# Configurable beep (with music)
# Restart function (Instead of stopping program at whatever point, have option to create new notification)
# Multiple notifications
# Test stop function further and improve
# Save notification's from last time opened

# KNOWN BUGS
# Everything counted as seconds
# Occasionally message box will not appear

HW = input("What homework should I remind you to do?")
# Enter your homework
remind = input("When would you like me to remind you of this?")
# Enter desired time

remind = float(remind)

unit = input("Will your unit be in seconds, minutes, hours, days, or weeks?")
# Enter correct unit

if unit == "seconds":
    remind*1

    if unit == "minutes":
        remind * 60

    if unit == "hours":
        remind * 3600

    if unit == "days":
        remind * 86400

    if unit == "weeks":
        remind * 604800

continuous = input("Would you like to have the notification be continuous?")

print(
    "You may now leave the application in the background. Closing the application and shutting down your computer will deactivate the notification you have planned.")

while continuous == "yes":

    time.sleep(remind)

    Freq = 2500  # Set Frequency To 2500 Hertz
    Dur = 1000  # Set Duration To 1000 ms == 1 second
    winsound.Beep(Freq, Dur)

    print("The message box has opened, but as another reminder your homework is")

    print(HW)

    ctypes.windll.user32.MessageBoxW(0, HW, "Homework!!!", 1)

    if input("To stop the loop and close the program, please type in 'stop'") == "stop":
        break

if continuous == "no":
    time.sleep(remind)

    Freq = 2500  # Set Frequency To 2500 Hertz
    Dur = 1000  # Set Duration To 1000 ms == 1 second
    winsound.Beep(Freq, Dur)

    print("The message box has opened, but as another reminder your homework is")

    print(HW)

    ctypes.windll.user32.MessageBoxW(0, HW, "Homework!!!", 1)
</code></pre>
<p>I first thought the problem was the indentation on the first if, but if it is intended at all, the program ceases to work. I've tried figuring this out for awhile but I can't for the life of me. Help?</p>
</div>
<div class="post-text" itemprop="text">
<h3>You should use what you calculate</h3>
<p>Even though you are doing the correct calculation(s), you never update the value of <code>remind</code> — which means that you are effectively calculating something that you then toss away.</p>
<p><sub><strong>Example</strong></sub></p>
<pre><code>remind *  3600 # will simply calculate and discard the value
</code></pre>
<pre><code>remind *= 3600 # remind = remind * 3600
</code></pre>
<hr/>
<h3>The code is confusing—indentation matter!</h3>
<p>The indentation level of the <code>if</code>s after <code>if unit == "seconds"</code> looks like they will only be evaluated if <code>unit</code> is equal to  <code>"seconds"</code>. This might not be an issue if the whitespace in your code is actually written so that the interpret doesn't read your code that way, <strong>but</strong> it looks weird and is very error-prone.</p>
<p><sub><strong>Example</strong></sub></p>
<pre><code>if unit == "seconds":
    remind*1

    if unit == "minutes": # this will only execute if "unit == "seconds"
        remind * 60
</code></pre>
<pre><code>if unit == "seconds":
  remind *= 1

if unit == "minutes":
  remind *= 60
</code></pre>
<hr/>
<h3>How to fix the problems</h3>
<p>At every point where you are currently doing the <em>"calculate and discard"</em>-dance, update the code so that you actually store the calculated value—making it available for future use.</p>
<p>Also fix the indentation level so that it no longer looks like you are using nested if-conditionals.</p>
<pre><code>if unit == "seconds":
  remind *= 1 # useless

if unit == "minutes":
  remind *= 60

if unit == "hours":
  remind *= 3600

if unit == "days":
  remind *= 86400

if unit == "weeks":
  remind *= 604800
</code></pre>
<blockquote>
<p><sub><strong>Note:</strong> Another point worth raising is that <code>unit</code> could never match more than one of those if-statements, you are better of using <em>if-elif-statements</em>. More information about if-statements can be found <a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements" rel="nofollow">here</a></sub></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As already pointed out, you are not actually updating <code>remind</code> and your if's should not be indented inside the first but a simpler approach to your overall logic would be to use a dict mapping seconds, hours etc.. to the appropriate values:</p>
<pre><code>mapping = {"seconds":60,"hours":3600,"days":86400,"weeks":604800}
unit = input("Will your unit be in seconds, minutes, hours, days, or weeks?")

# do lookup on mapping and increment remind
remind *= mapping.get(unit,1)
</code></pre>
<p>All the logic of your if statements are combined in <code>remind *= mapping.get(unit,1)</code>, it will pull the appropriate value from the dict or return 1 if the user enters something invalid leaving remind as is.</p>
<p>You may want to actually use a while loop and validate that the user enters some valid input, something like.</p>
<pre><code>mapping = {"seconds":60,"hours":3600,"days":86400,"weeks":604800}
while True:
    unit = input("Will your unit be in seconds, minutes, hours, days, or weeks?")
    if unit in mapping:     
       remind *= mapping[unit]
       break
    print("Invalid option")
</code></pre>
<p>If you were using the if logic then use <code>if/elif</code>, a unit cannot be five different things at once, if's are always evaluated but elif's are only evaluated if the previous if or elif evaluated to False:</p>
<pre><code>if unit == "seconds":
  remind *= 1 # useless

elif unit == "minutes":
  remind *= 60

elif unit == "hours":
  remind *= 3600

elif unit == "days":
  remind *= 86400

elif unit == "weeks":
  remind *= 604800
</code></pre>
<p>But again that logic does not handle when a user enters no valid input.</p>
</div>
<span class="comment-copy">You have two issues. One, you're not assigning <code>remind</code> to anything after you multiply it. Two, your indentation is wrong.</span>
<span class="comment-copy">instead of remind * x, i think youre looking for remind *= x</span>
<span class="comment-copy">I assigned remind to "time.sleep(remind)" and what part of my indentation is wrong?</span>
<span class="comment-copy">Didn't realize you were still adding it. Lemme check if it works.</span>
<span class="comment-copy">So far it works. Just to make sure i'm gonna test it a bit more but thank you!</span>
<span class="comment-copy">I was just testing everything again to make sure it works. Thank you so much for all the information your provided about how it works!</span>
<span class="comment-copy">Would it also work if I were to put an else statement at the end of the if/elif code for if there's invalid input?</span>
<span class="comment-copy">@Zombiex100, indeed it would but without  a loop to loop back to the start you would have no way of returning the code back to asking for input again, you could put the if's in a while as the example in my answer, increment and break if input is valid or else print a message and ask again</span>
<span class="comment-copy">The dict mapping will give you the exact  same logic as using a bunch of if/elifs, just  a more concise approach.</span>
<span class="comment-copy">I have <code>while True:     if unit == "seconds":         remind *= 1         break      elif unit == "minutes":         remind *= 60         break      elif unit == "hours":         remind *= 3600         break      elif unit == "days":         remind *= 86400         break      elif unit == "weeks":         remind *= 604800         break      else:         print("Invalid unit")</code> But it just repeats "Invalid unit" rather than the code itself</span>
<span class="comment-copy">Looks like that's it. Thank you!</span>
