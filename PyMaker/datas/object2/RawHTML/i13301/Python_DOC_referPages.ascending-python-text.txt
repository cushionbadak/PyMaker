<div class="post-text" itemprop="text">
<p>I have simple problem, i created game and in the end I append score to textfile. Now i have something like this in this file:</p>
<pre><code>John: 11
Mike: 5
John: 78
John: 3
Steve: 30
</code></pre>
<p>i want give user possibility to read top 3 scores. Now i created this:</p>
<pre><code>with open(r'C:/path/to/scores.txt', 'r') as f:
            for line in f:
                data = line.split()
                print '{0[0]:&lt;15}{0[1]:&lt;15}'.format(data)
</code></pre>
<p>I have this:</p>
<pre><code>John:       11             
Mike:       5             
John:       78            
John:       3             
Steve:      30 
</code></pre>
<p>It looks better but how can i show only three best results with place and highest first etc?</p>
<p>Something like that:</p>
<pre><code> 1.   John:       78 
 2.   Steve:      30 
 3.   John:       11   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can edit your code a little bit to store the scores in a list, then sort them using the <code>sorted</code> function. Then you can just take the first three scores of your sorted list.</p>
<pre><code>with open(r'doc.txt', 'r') as f:
            scores = []
            for line in f:
                data = line.split()
                scores.append(data)

            top3 = sorted(scores, key = lambda x: int(x[1]), reverse=True)[:3]

            for score in top3:
                print '{0[0]:&lt;15}{0[1]:&lt;15}'.format(score)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As in <a href="https://stackoverflow.com/questions/33000095/how-do-i-sort-data-highest-to-lowest-in-python-from-a-text-file/33000232#33000232">my answer to a very similar question</a>, the answer could be just used <code>sorted</code>; slicing the result to get only three top scores is trivial.</p>
<p>That said, you could also switch to using <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow"><code>heapq.nlargest</code></a> over <code>sorted</code> in this case; it takes a <code>key</code> function, just like <code>sorted</code>, and unlike <code>sorted</code>, it will only use memory to store the top X items (and has better theoretical performance when the set to extract from is large and the number of items to keep is small). Aside from not needing <code>reverse=True</code> (because choosing <code>nlargest</code> already does that), <code>heapq.nlargest</code> is a drop in replacement for <code>sorted</code> from that case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on what else you might want to do with the data I think <code>pandas</code> is a great option here.  You can load it into <code>pandas</code> like so:</p>
<pre><code>import pandas as pd
df = []
with open(r'C:/path/to/scores.txt', 'r') as f:
            for line in f:
                data = line.split()
                df.append({'Name': data[0], 'Score': data[1]})
df = pd.DataFrame(df)
</code></pre>
<p>Then you can sort by score and show the top three</p>
<pre><code>df.sort('Score', ascending=False)[:3]
</code></pre>
<p>I recommend reading all of the pandas <a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow">documentation</a> to see everything it can do</p>
<p><strong>EDIT:</strong> For easier reading you can do something like</p>
<pre><code>df = pd.read_table('C:/path/to/scores.txt')
</code></pre>
<p>But this would require you to put column headings in that file first</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open(r'C:/path/to/scores.txt', 'r') as f:
    scores = []
    for line in f:
        line = line.strip().split()
        scores.append((line[0], int(line[1]))

    sorted_scores = sorted(scores, key=lambda s: s[1], reverse=True)
    top_three = sorted_scores[:3]
</code></pre>
<p>This will read every line, strip extra whitespace, and split the line, then append it to the <code>scores</code> list. Once all scores have been added, the list gets sorted using the <code>key</code> of the 2nd item in the <code>(name, score)</code> tuple, in reverse, so that the scores run from high-to-low. Then the <code>top_three</code> slices the first 3 items from the sorted scores.</p>
</div>
<div class="post-text" itemprop="text">
<p>This would work, and depending on your coding style, you could certainly consolidate some of these lines.  For the sake of the example, I simply have the contents of your score file in a string:</p>
<pre><code>score_file_contents = """John: 11
Mike: 5
John: 78
John: 3
Steve: 30"""

scores = []
for line in score_file_contents.splitlines():  # Simulate reading your file
    name, score = line.split(':')  # Extract name and score
    score = int(score)  # Want score as an integer
    scores.append((score, name))  # Make my list

scores.sort(reverse=True)  # List of tuples sorts on first tuple element
for ranking in range(len(scores)):  # Iterate using an index
    if ranking &lt; 3:  # How many you want to show
        score = scores[ranking][0]  # Extract score
        name = scores[ranking][1]  # Extract name
        print("{}.  {:&lt;10} {:&lt;3}".format(ranking + 1, name + ":", score))
</code></pre>
<p>Result:</p>
<pre><code>1.  John:      78 
2.  Steve:     30 
3.  John:      11
</code></pre>
</div>
<span class="comment-copy">That procedure is called "sorting".</span>
<span class="comment-copy">Put that data in a dict with the score being the key. Then sort the dict by key value and print only the first 3 ones</span>
<span class="comment-copy">@Alexander: A dict would be inappropriate, since the "keys" (names) aren't unique. And it wouldn't gain you anything over sorting a <code>list</code> of <code>tuple</code> pairs anyway.</span>
<span class="comment-copy">When I say "similar", I really mean it. That other question is sorting the same sort of name/integer value pairs in lines read from a file, and you should really take a look at it for a starting point; the only difference is in trivial aspects of the formatting and whether you use <code>sorted</code> or <code>heapq.nlargest</code>.</span>
