<div class="post-text" itemprop="text">
<p>I found lot's of documentation about lists in Python. But I did not find an answer for the following case:</p>
<p>I have a list like this: <code>[False, False, False, VARIABLE, False, False]</code>.</p>
<p>Does exist a way in order to get the VARIABLE value (is an integer) without a for loop on each element and using list comprehension? A kind of "which", in order to say: Select items in the list WHICH are not False. </p>
<p>Important point, the VARIABLE will always be unique in the list. There is no possibility to have two VARIABLE in the list. </p>
<p><strong>EDIT</strong></p>
<p><strong>In my case, the solution given by @AChampion is the best one. Thank you for this tip. I had to get the value of VARIABLE, which is exactly what I have with your solution.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow"><code>reduce</code></a> (<a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce</code></a> in Python3) if the integer is non-zero</p>
<pre><code>&gt;&gt;&gt; x = [False, False, False, 10, False, False]
&gt;&gt;&gt; reduce(lambda i,j:i or j, x)
10
</code></pre>
<p>You can use a generator expression also here</p>
<pre><code>&gt;&gt;&gt; x = [False, False, False, 10, False, False]
&gt;&gt;&gt; (i for i in x if i!=False).next()
10
</code></pre>
<p>Also check the package <a href="https://pypi.python.org/pypi/first" rel="nofollow"><code>first</code></a></p>
<pre><code>&gt;&gt;&gt; from first import first
&gt;&gt;&gt; first([False, False, False, 10, False, False])
10
</code></pre>
</div>
<span class="comment-copy">List comprehensions are the most pythonic way I can think of, for this. Also, what if the <code>__bool__</code> of <code>VARIABLE</code> evaluates to <code>False</code>?</span>
<span class="comment-copy">List comprehensions also use <code>for</code> loops.</span>
<span class="comment-copy">list comprehensions != always most pythonic.  In fact some list comprehensions are not pythonic at all.</span>
<span class="comment-copy">False is equivalent to 0 so you can <code>sum(my_list)</code></span>
<span class="comment-copy">the name of the function you are looking for is : filter.</span>
<span class="comment-copy">reduce on <code>[False, 0, False]</code> returns <code>False</code> not 0 (<code>reduce</code> is in <code>functools</code> for python3)</span>
<span class="comment-copy">@AChampion Corrected the statement. Will add additional technique in a moment</span>
