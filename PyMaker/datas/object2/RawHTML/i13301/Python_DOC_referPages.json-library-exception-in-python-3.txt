<div class="post-text" itemprop="text">
<p>As the Python 2 API seems to be messed up - from file system functions I sometimes get unicode strings, sometimes standard strings - I am now attempting a transition from Python 2 to Python 3. But while doing so I run into problems regarding the <code>json</code> module.</p>
<p>I run a standard Ubuntu system with Python 3.4. When I try to use the JSON module I get the following error message:</p>
<pre><code>Traceback (most recent call last):
  File "./sysmon.py", line 227, in &lt;module&gt;
    jsonCfgObj = json.load(json_file, 'utf-8', strict = False)
  File "/usr/lib/python3.4/json/__init__.py", line 268, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/usr/lib/python3.4/json/__init__.py", line 331, in loads
    return cls(**kw).decode(s)
TypeError: 'str' object is not callable
</code></pre>
<p>At first glance this seems to be a bug in the JSON module of Python 3. Something I can hardly believe because I don't do anything which would be out of the ordinary: I just read a very very simple JSON configuration file.</p>
<p>Do you have any ideas how to deal with this error?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow"><code>json.load()</code> in Python 3</a> does not accept binary files and therefore the 2nd parameter <code>encoding</code> is removed.</p>
<p><code>'utf-8'</code> is interpreted as <code>cls</code> parameter here that is unrelated to the encoding that leads to the <code>TypeError</code> that you see. Drop <code>'utf-8'</code> from the <code>json.load()</code> call -- you should pass the encoding to the code that opens the file instead:</p>
<pre><code>import json

with open('text.json', encoding='utf-8') as file:
    data = json.load(file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The second argument of <code>json.load</code> in Python 2 was <code>encoding</code>, however in Python 3 the second argument is <code>cls</code> and it must be <code>None</code> (the default) or <code>JSONDecoder</code> subclass. The signature of <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow"><code>json.load</code></a> is now</p>
<pre><code>json.load(fp, cls=None, ...)
</code></pre>
<p>You need to remove <code>'utf-8'</code> from the list of arguments (pass it to the file opener instead).</p>
<hr/>
<p>OTOH <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow"><code>json.loads</code></a> <em>still</em> has the <code>encoding</code> argument, but it "is ignored and deprecated".</p>
</div>
<span class="comment-copy">What does your code look like? That would be helpful</span>
<span class="comment-copy">See the stack trace: "jsonCfgObj = json.load(json_file, 'utf-8', strict = False)" And if i remove the 'utf-8' everything works fine, as far as I can see. But then I get some other error right in the original code of the traceback module. I have much experience with other programming languages, so to me it seems to be a very strange behaviour not to get regular exceptions but errors within the original module code. Is this typical for python3? In python2 I never encountered such a thing. But that's something completely different.</span>
<span class="comment-copy">Thank you for your answer. FYI: It definitively does not seem to be "ignored", regardless of what the specification says, because otherwise I would not have encountered that error. But thanx, that solved the problem!</span>
<span class="comment-copy">@RegisMay it <i>is</i> ignored in <code>json.loads</code>, <code>json.load</code> simply does not allow the <code>encoding</code> argument. Also, if you feel that my answer helped you, you could <a href="http://meta.stackexchange.com/a/5235">accept my answer</a>.</span>
