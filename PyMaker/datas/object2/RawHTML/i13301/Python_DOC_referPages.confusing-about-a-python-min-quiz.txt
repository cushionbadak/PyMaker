<div class="post-text" itemprop="text">
<p>Just now I saw a quiz on <a href="https://github.com/cosmologicon/pywat/blob/master/quiz.md" rel="nofollow noreferrer">this page</a>:</p>
<pre><code>&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; min(x, y) == min(y, x)
False
</code></pre>
<p>The example answer is</p>
<pre><code>x, y = {0}, {1}
</code></pre>
<p>From the documentation I know that:</p>
<blockquote>
<p>min(iterable[, key=func]) -&gt; value<br/>
  min(a, b, c, ...[, key=func]) -&gt; value</p>
<p>With a single iterable argument, return its smallest item.<br/>
  With two or more arguments, return the smallest argument. </p>
</blockquote>
<p>But why is <code>min({0},{1})={0}</code> and <code>min({1},{0})={1}</code>?</p>
<p>I also tried a few others:</p>
<pre><code>min({0,2},1)   # 1
min(1,{0,2})   # 1
min({1},[2,3]) # [2,3]
min([2,3],1)   # 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>min</code> is implemented roughly like this:</p>
<pre><code>def min(*args):
    least = args[0]
    for arg in args:
        if arg &lt; least:
            least = arg
    return least
</code></pre>
<p>The way the comparison operators work for sets break one of the assumptions that this implicitly makes: that for every pair of objects, either they are equal, or <code>a &lt; b</code> or <code>b &lt; a</code>. Neither <code>{0}</code> nor <code>{1}</code> compare less than one another, so <code>min</code> gives you inconsistent answers.</p>
<p>The other results you see are because of the rules for how Python defines an order for mixed types. A <code>set</code> and an <code>int</code> aren't comparable - neither of those types defines a rule for comparing to the other. This leads Python 2 to apply a rule called "arbitrary but consistent order" - one of the types is chosen to be the "lower" type, and it will remain the lower type for the lifetime of the program. In practice, it will be the same across all code you run, because it is implemented by comparing the type names alphabetically - but in theory, that could change. </p>
<p>The "arbitrary but consistent order" rule has been dumped from Python 3, because the only effect it really had was to mask bugs. When there is no defined rule for finding an order, Python now tells you so:</p>
<pre><code>&gt;&gt;&gt; 1 &lt; {0}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: int() &lt; set()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, and <code>&gt;</code> check whether one set is a strict subset, subset, superset, or strict superset of another, respectively.</p>
<p><code>{0}</code> and <code>{1}</code> are <code>False</code> for all of these, so the result depends on the check order and operator.</p>
</div>
<div class="post-text" itemprop="text">
<p>The key point here is, the two sets are not subsets of each other, so both are <code>False</code> for <code>&lt;</code> even though they are not equal:</p>
<pre><code>&gt;&gt;&gt; {0} &lt; {1}
False
&gt;&gt;&gt; {0} &gt; {1}
False
&gt;&gt;&gt; {0} == {1}
False
</code></pre>
<p>So which one is smaller? The fact that sets don't provide <a href="https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings"><strong>strict weak ordering</strong></a> means there's no correct answer.</p>
</div>
<span class="comment-copy">Print out the variables, the {} is a set the [] is a list .. etc</span>
<span class="comment-copy">That example answer is wrong. (<a href="http://i.imgur.com/C9nYDTF.png" rel="nofollow noreferrer">i.imgur.com/C9nYDTF.png</a>)</span>
<span class="comment-copy">@C1sc0 I know. but why the result?</span>
<span class="comment-copy">I absolutely suck at coding so my apologies if I'm wrong, but I think it should be "if arg &lt; least" in your for loop, not the other way around. If not, you're basically running a max function instead (i think...).</span>
<span class="comment-copy">By the way, and I'm sure this could be a long answer so if you don't have time I'd really appreciate a reference to another post or article, but why are you passing your argument by reference, what are the advantages/disadvantages?</span>
<span class="comment-copy">@jeremy yes, that was indeed an error. As for passing by reference, that isn't what the <code>*</code> means - Python doesn't do pointers like C (<i>all</i> argument passing is more like a C++ reference, except that reassigning the name doesn't affect the original object - the docs call it <a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">pass by assignment</a>. The <code>*</code> is Python's way of doing varargs - it means you can call it as <code>min(1,2,3)</code>, etc, as many arguments as you like, and it will collect all them into a list called <code>args</code>.</span>
<span class="comment-copy">Ah...that's very interesting, thank you. Coming mostly from C (as you probably guessed) I thought those were pointers.</span>
<span class="comment-copy">for <code>1</code> and <code>{0,2}</code> why it's always 1?</span>
<span class="comment-copy">can you tell why <code>1</code> &lt;  <code>{0,2}</code> in python?</span>
<span class="comment-copy">In Python 2.x, different types of objects are compared by their type strings, which makes not much sense to me. In Python 3.x, <code>1 &lt; {0,2}</code> is illegal.</span>
<span class="comment-copy">@YuHao Yes, note that <code>1 &lt; {0,2}</code> will raise <code>TypeError: unorderable types: int() &lt; set()</code> in Python 3.x</span>
