<div class="post-text" itemprop="text">
<p>I would like to exec() a script with a custom <code>sys.path</code> for that script, and letting it import modules without caching those modules into the builtin <code>sys.modules</code>.</p>
<p>I dont want to pollute the current interpreter <code>sys.path</code> and <code>sys.modules</code>, because different scripts are going to be executed simultaneously in a multithreaded  environment.</p>
<p>So different scripts would be running simultaneously, with different paths each, importing different modules, but with possibly clashing names (thats why they need to run from different paths).</p>
<p>I thought that giving a different globals dictionary to each exec() would be enough, but the builtin sys module instance is actually shared among then.</p>
<p>Any ideas on how can I achieve that?</p>
<p><strong>Note</strong>: I dont require a full sandbox solution - my scripts are from a trusted source, I just would like to run them all concurrently.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/questions/33027183/how-to-exec-script-without-possibly-changing-the-builtin-sys-module#comment53883021_33027183" title="rufflewind">@Rufflewind</a> suggested in the comments, I ended up using the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer" title="multiprocessing">multiprocessing</a> library. Each script is actually started on its own <code>multiprocessing.Process</code> instance. This library spawns another python interpreter process for each object, and thus, allows me to use different paths and modules, without interfering with the main script. The progress of the child process is shared with the main process by a <code>multiprocessing.Queue</code> object. </p>
<p>Because I am using a logging handler to write log records to a file, I have also used <code>logging.handlers.QueueHandler</code> to send these log records, generated on the child process, back to the main process. These records are then retrieved using a <code>logging.handlers.QueueListener</code> object.</p>
<p>Well, it turned out to be quite simple, indeed. =) </p>
</div>
<span class="comment-copy">Might be easier to just spawn a new Python process and change <code>PYTHONPATH</code>.</span>
<span class="comment-copy">The problem with that approach is that I need to monitor the execution of the script by registering some callback functions.</span>
<span class="comment-copy">You could use <code>multiprocessing</code>.</span>
<span class="comment-copy">@Rufflewind That worked! Sorry for the late reply, I needed time to study the multiprocessing library and change my solution to use it. Well, If you would like to write this comment as an answer, I could mark it properly.</span>
<span class="comment-copy">@NCrawl: As Mikko suggested, you can answer the question yourself and show some of the code that you used to accomplish it. I won't really have anything substantial to add since mine was merely a suggestion.</span>
