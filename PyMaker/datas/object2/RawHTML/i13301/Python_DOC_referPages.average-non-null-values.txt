<div class="post-text" itemprop="text">
<p>I have the following query:</p>
<pre><code>&gt;&gt;&gt; ItemMaster.objects.all()[:3].values_list('rt_rating', 'imdb_rating')
[(None, None), (None, Decimal('6.3')), (Decimal('7.6'), Decimal('7.4'))]
</code></pre>
<p>What would be the best way to get the average of the above non-null values? For the above it would be <code>(6.3 + 7.6 + 7.4) / 3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can filter your result with a list comprehension, then use <code>sum</code> and <code>len</code> to calculate the average :</p>
<pre><code>&gt;&gt;&gt; li=[(None, None), (None, Decimal('6.3')), (Decimal('7.6'), 
&gt;&gt;&gt; nums=[j for tup in li for j in tup if j]
&gt;&gt;&gt; av=sum(nums)/len(nums)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it all in <code>python3</code> using <code>filter</code>, <code>chain</code> and <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow">statistics.mean</a>:</p>
<pre><code>from decimal import Decimal
from statistics import mean
from itertools import chain

l = [(None, None), (None, Decimal('6.3')), (Decimal('7.6'), Decimal('7.4'))]

print(mean(filter(None.__ne__,chain.from_iterable(l))))
7.1
</code></pre>
<p><code>None.__ne__</code> would mean you keep <code>Decimal('0')</code> which may or may not be what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can user <code>itertools.chain</code> to get all the non-Null items and then <code>filter</code> to remove the Null items --</p>
<pre><code>from itertools import chain

items = filter(None, list(chain(*ItemMaster.objects.all()[:3].values_list('rt_rating', 'imdb_rating'))))
==&gt; [Decimal('6.3'), Decimal('7.6'), Decimal('7.4')]
sum(items)/len(items)
==&gt; Decimal('7.1')
</code></pre>
</div>
<span class="comment-copy">Cool, yeah doing the same with my answer below, using <code>itertools.chain</code> instead of a list comprehension, which I find a bit easier to understand.</span>
<span class="comment-copy">@David542 Yep you can but since you need to filter the items while you are unpacking the tuples it'e better to use a list comprehension.</span>
<span class="comment-copy">I see -- that makes sense, kill two birds with one stone.</span>
