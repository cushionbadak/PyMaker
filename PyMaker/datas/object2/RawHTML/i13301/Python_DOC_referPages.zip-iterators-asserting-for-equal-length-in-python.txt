<div class="post-text" itemprop="text">
<p>I am looking for a nice way to <code>zip</code> several iterables raising an exception if the lengths of the iterables are not equal.</p>
<p>In the case where the iterables are lists or have a <code>len</code> method this solution is clean and easy:</p>
<pre><code>def zip_equal(it1, it2):
    if len(it1) != len(it2):
        raise ValueError("Lengths of iterables are different")
    return zip(it1, it2)
</code></pre>
<p>However, if <code>it1</code> and <code>it2</code> are generators, the previous function fails because the length is not defined <code>TypeError: object of type 'generator' has no len()</code>.</p>
<p>I imagine the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module offers a simple way to implement that, but so far I have not been able to find it. I have come up with this home-made solution:</p>
<pre><code>def zip_equal(it1, it2):
    exhausted = False
    while True:
        try:
            el1 = next(it1)
            if exhausted: # in a previous iteration it2 was exhausted but it1 still has elements
                raise ValueError("it1 and it2 have different lengths")
        except StopIteration:
            exhausted = True
            # it2 must be exhausted too.
        try:
            el2 = next(it2)
            # here it2 is not exhausted.
            if exhausted:  # it1 was exhausted =&gt; raise
                raise ValueError("it1 and it2 have different lengths")
        except StopIteration:
            # here it2 is exhausted
            if not exhausted:
                # but it1 was not exhausted =&gt; raise
                raise ValueError("it1 and it2 have different lengths")
            exhausted = True
        if not exhausted:
            yield (el1, el2)
        else:
            return
</code></pre>
<p>The solution can be tested with the following code:</p>
<pre><code>it1 = (x for x in ['a', 'b', 'c'])  # it1 has length 3
it2 = (x for x in [0, 1, 2, 3])     # it2 has length 4
list(zip_equal(it1, it2))           # len(it1) &lt; len(it2) =&gt; raise
it1 = (x for x in ['a', 'b', 'c'])  # it1 has length 3
it2 = (x for x in [0, 1, 2, 3])     # it2 has length 4
list(zip_equal(it2, it1))           # len(it2) &gt; len(it1) =&gt; raise
it1 = (x for x in ['a', 'b', 'c', 'd'])  # it1 has length 4
it2 = (x for x in [0, 1, 2, 3])          # it2 has length 4
list(zip_equal(it1, it2))                # like zip (or izip in python2)
</code></pre>
<p>Am I overlooking any alternative solution? Is there a simpler implementation of my <code>zip_equal</code> function?</p>
<p>PS: I wrote the question thinking in Python 3, but a Python 2 solution is also welcome.</p>
<p><strong>Update:</strong></p>
<p>While Martin Peters' <a href="https://stackoverflow.com/a/32954700/446149">answer</a> is simpler (and that is what I was looking for), if you need performance you may want to check cjerdonek's <a href="https://stackoverflow.com/a/40596355/446149">answer</a>, as it is faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>I can think of a simpler solution, use <code>itertools.zip_longest()</code> and raise an exception if the sentinel value used to pad out shorter iterables is present in the tuple produced:</p>
<pre><code>from itertools import zip_longest

def zip_equal(*iterables):
    sentinel = object()
    for combo in zip_longest(*iterables, fillvalue=sentinel):
        if sentinel in combo:
            raise ValueError('Iterables have different lengths')
        yield combo
</code></pre>
<p>Unfortunately, we can't use <code>zip()</code> with <code>yield from</code> to avoid a Python-code loop with a test each iteration; once the shortest iterator runs out, <code>zip()</code> would advance all preceding iterators and thus swallow the evidence if there is but one extra item in those.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an approach that doesn't require doing any extra checks with each loop of the iteration. This could be desirable especially for long iterables.</p>
<p>The idea is to pad each iterable with a "value" at the end that raises an exception when reached, and then do the needed verification only at the very end.  The approach uses <code>zip()</code> and <code>itertools.chain()</code>.</p>
<p>The code below was written for Python 3.5.</p>
<pre><code>import itertools

class ExhaustedError(Exception):
    def __init__(self, index):
        """The index is the 0-based index of the exhausted iterable."""
        self.index = index

def raising_iter(i):
    """Return an iterator that raises an ExhaustedError."""
    raise ExhaustedError(i)
    yield

def terminate_iter(i, iterable):
    """Return an iterator that raises an ExhaustedError at the end."""
    return itertools.chain(iterable, raising_iter(i))

def zip_equal(*iterables):
    iterators = [terminate_iter(*args) for args in enumerate(iterables)]
    try:
        yield from zip(*iterators)
    except ExhaustedError as exc:
        index = exc.index
        if index &gt; 0:
            raise RuntimeError('iterable {} exhausted first'.format(index)) from None
        # Check that all other iterators are also exhausted.
        for i, iterator in enumerate(iterators[1:], start=1):
            try:
                next(iterator)
            except ExhaustedError:
                pass
            else:
                raise RuntimeError('iterable {} is longer'.format(i)) from None
</code></pre>
<p>Below is what it looks like being used.</p>
<pre><code>&gt;&gt;&gt; list(zip_equal([1, 2], [3, 4], [5, 6]))
[(1, 3, 5), (2, 4, 6)]

&gt;&gt;&gt; list(zip_equal([1, 2], [3], [4]))
RuntimeError: iterable 1 exhausted first

&gt;&gt;&gt; list(zip_equal([1], [2, 3], [4]))
RuntimeError: iterable 1 is longer

&gt;&gt;&gt; list(zip_equal([1], [2], [3, 4]))
RuntimeError: iterable 2 is longer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I came up with a solution using sentinel iterable FYI:</p>
<pre><code>class _SentinelException(Exception):
    def __iter__(self):
        raise _SentinelException


def zip_equal(iterable1, iterable2):
    i1 = iter(itertools.chain(iterable1, _SentinelException()))
    i2 = iter(iterable2)
    try:
        while True:
            yield (next(i1), next(i2))
    except _SentinelException:  # i1 reaches end
        try:
            next(i2)  # check whether i2 reaches end
        except StopIteration:
            pass
        else:
            raise ValueError('the second iterable is longer than the first one')
    except StopIteration: # i2 reaches end, as next(i1) has already been called, i1's length is bigger than i2
        raise ValueError('the first iterable is longger the second one.')
</code></pre>
</div>
<span class="comment-copy">The <code>yield from</code> solution is very nice. Thx for that and for providing two different solutions.</span>
<span class="comment-copy">Thanks! By the way, in <code>zip_longest</code> the argument <code>fill_value</code> should be <code>fillvalue</code> ;-).</span>
<span class="comment-copy">@zeehio: Oops, corrected.</span>
<span class="comment-copy">One thing to add: To get the iterator: <code>it = [iter(it) for it in iterables]</code>.</span>
<span class="comment-copy">Oh one additional thing, the second solution doesn't work in one corner case: Assuming two iterators and the second one is shorter by one. Because zip already calls <code>__next__</code> on the first iterator both are exhausted even though the first one would be longer.</span>
<span class="comment-copy">i prefer this approach. it is a bit more complicated than the accepted answer, but it uses EAFP instead of LBYL and provides a nicer error message as well. bravo.</span>
<span class="comment-copy">I edited my question with a brief discussion that points to your answer when performance is an issue. Thanks for your solution!</span>
<span class="comment-copy">Thanks, @zeehio!</span>
<span class="comment-copy">What advantage does this solution offer with respect to the accepted solution?</span>
<span class="comment-copy">Just an alternative solution. For me, as I am from C++ world, I don't like the "if sentinel in combo" check for each yield. But as we are in python world, no one cares about performance.</span>
<span class="comment-copy">Thanks for the answer but if you were really concerned about performance you should have benchmarked it. Your solution is 80% slower. Here is a benchmark: <a href="https://gist.github.com/zeehio/cdf7d881cc7f612b2c853fbd3a18ccbe" rel="nofollow noreferrer">gist.github.com/zeehio/cdf7d881cc7f612b2c853fbd3a18ccbe</a></span>
<span class="comment-copy">Thank you for your kind benchmark. Sorry for the misleading. Yes, it is slower, I should think out earlier, as izip_longest is native.</span>
<span class="comment-copy">Sorry if I was harsh in my reply. Thanks to your answer we compared the performances. We found that the accepted answer is faster than the other solutions. We now also have a quick way to benchmark any future solution. We know more now than one week ago. :-)</span>
