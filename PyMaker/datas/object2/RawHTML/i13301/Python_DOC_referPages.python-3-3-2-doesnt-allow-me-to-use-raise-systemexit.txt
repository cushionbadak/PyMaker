<div class="post-text" itemprop="text">
<pre><code>name = input('name? ')
if len(name) == 0:
    print('error.\n')                            
    raise SystemExit
</code></pre>
<p>I receive an error when using python 3.3.2 (which is the version is school sadly) but it works fine on other versions e.g. 2.7.10 and 3.5</p>
<p>This is the error</p>
<p><img alt="This is the image of the error." src="https://i.stack.imgur.com/6Tuyv.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the screenshot I can see Python prompt at the bottom:</p>
<p><a href="https://i.stack.imgur.com/dBkb8.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dBkb8.png"/></a></p>
<p>This means the script is run in an interactive session (IDLE on Windows I guess). I haven't found any documentation, but other users have discovered that raising <code>SystemExit</code> in an interactive session does print the traceback.</p>
<p>So you should check and ensure that you are not launching the script in an interactive session.</p>
<p><strong>Old answer:</strong></p>
<p>Looks like it's a bug (or a particularity) in Python 3.3.2. According to this <a href="http://clalance.blogspot.md/2011/01/exiting-python-program.html" rel="nofollow noreferrer">blog post</a>:</p>
<blockquote>
<p>If nothing catches the exception, then the python interpreter catches
  it at the end, does not print a stack trace, and then calls exit.</p>
</blockquote>
<p>I tried to <code>raise SystemExit('asd')</code> and the program just printed <code>asd</code>, so looks like it's true.</p>
<p>Either upgrade Python or try <code>os._exit(1)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this is what you want, but if you wanna exit use this:</p>
<pre><code>import sys
name = raw_input('name? ')
if len(name) == 0:
    print('error.\n')
    sys.exit()         
</code></pre>
<p>This exits the interpreter by raising SystemExit.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you use <code>sys.exit()</code>?</p>
<blockquote>
<p>sys.exit([arg])</p>
<p>Exit from Python. This is implemented by raising the <strong>SystemExit</strong> exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strike>You probably have an handler set for excepthook:</strike></p>
<p><a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow">https://docs.python.org/3/library/sys.html#sys.excepthook</a></p>
<p>You should be able to reset it by doing </p>
<p><code>sys.excepthook = sys.__excepthook__</code> </p></div>
<span class="comment-copy">What do you expect it to do? By 'works fine', what do you mean?</span>
<span class="comment-copy">What does 'it works fine on other versions' mean?</span>
<span class="comment-copy">bsically, it should print the error and then gracefully exit the program but instead it displays an error.</span>
<span class="comment-copy">You should really raise an instance, not a type, thus you better <code>raise SystemExit()</code></span>
<span class="comment-copy">@qarma ultimately he's raising an instance: <a href="https://docs.python.org/3.3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">docs.python.org/3.3/reference/â€¦</a>  "If it is a class, the exception instance will be obtained when needed by instantiating the class with no arguments"</span>
<span class="comment-copy">why does the 'os._exit()' need an arguement like '1' in this case.</span>
<span class="comment-copy">@Billy <code>1</code> is the process <a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow noreferrer">exit</a> <a href="https://docs.python.org/2/library/os.html#os._exit" rel="nofollow noreferrer">code</a> See <a href="http://stackoverflow.com/questions/1101957/are-there-any-standard-exit-status-codes-in-linux">also</a>.</span>
<span class="comment-copy">This is just wrong/ignoring the question, you should reproduce Billy's problem rather than giving nonsense advice like "upgrade Python"</span>
<span class="comment-copy">@berdario Have you reproduced? I guess you have a better solution. Let us see it.</span>
<span class="comment-copy">@berdario I have reread my answer and seems logical. If the author used the same command to launch his script in all environments, then it's this Python version's particularity. Then nothing can be done about it, except using workarounds. Your answer is not much better, having guesses, though I haven't downvoted it. Do you think being arrogant helps you in life?</span>
<span class="comment-copy">i have also tried import sys and sys.exit() and that also returned an error.</span>
<span class="comment-copy">Could I use 'BaseException' as an alternative for 'raise SystemExit?'</span>
<span class="comment-copy">No, why would you want to do that? Rather, add to the question the command that you use to invoke your script</span>
