<div class="post-text" itemprop="text">
<p>I want to create the following module and object structure:</p>
<pre class="lang-none prettyprint-override"><code>main_module
|
`--sub_module
   |
   +--ObjectOne
   |
   `--sub_sub_module
      |
      `--ObjectTwo
</code></pre>
<p>When I only had <code>main_module.sub_module</code> everything worked as it should, as I created an empty <code>__init__.py</code> inside the <code>main_module</code> folder (since <code>main_module</code> does not have any objects at the moment), and I placed <code>sub_module.so</code> next to it.</p>
<p>However, when I tried to create two separate c modules to make <code>main_module.sub_module.sub_sub_module</code> work (that is <code>sub_module.so</code> and <code>sub_sub_module.so</code>) and then I added two <code>__init__.py</code>s which both of them imported their extension modules relative to them, then I got into <code>ImportError</code>s (as wrappers around the <code>undefined symbol</code> error "raised" from the shared libraries), because <code>sub_sub_module</code> needs a few of the C-level definitions from <code>sub_module</code>. Which makes me think, it would be way more easier, to create a single shared library which somehow creates "virtual" modules inside it, instead of the unnecessary library linking..</p>
<p>So my question is: Is it possible? If so, how? Or, is there a better way to achieve what I'm looking for?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I got your problem now. For a long and detailed answer you should read <a href="https://docs.python.org/3/extending/extending.html#providing-a-c-api-for-an-extension-module" rel="nofollow">Providing a C API for an Extension Module</a>.</p>
<blockquote>
<p>Portability therefore requires <strong>not to make any assumptions about symbol visibility</strong>. This means that all symbols in extension modules should be declared static, except for the module’s initialization function, in order to avoid name clashes with other extension modules [...]. And it means that symbols that should be accessible from other extension modules <strong>must be exported in a different way</strong>.</p>
</blockquote>
<p>To achieve this you should use <a href="https://docs.python.org/3/c-api/capsule.html" rel="nofollow">Capsules</a>. For these every function you want to use in another module should be stored inside a <code>void*</code> <em>array</em>. Then you create a capsule with <code>PyCapsule_New(void*, const char*, PyCapsule_Destructor)</code> using the <em>array</em> as first argument. This object must be added to your <em>sub_module</em>. Then you can call <code>PyCapsule_Import(const char*, int)</code> in your <em>sub_sub_module</em> to import the <em>array</em> and access the functions you need.</p>
</div>
<span class="comment-copy">Could you elaborate a little on how you implemented all this; or better post some code?</span>
<span class="comment-copy">@tynn it is quite large to post the whole thing here, but here is the repo: <a href="https://github.com/kitchenbudapest/hackathon/tree/master/fw/wrappers/python" rel="nofollow noreferrer">github.com/kitchenbudapest/hackathon/tree/master/fw/wrappers/…</a> -- if you go a few folders up, in <code>kb</code> there is the C library I'm wrapping, and the link I provided is the python wrapper part only</span>
<span class="comment-copy"><b><i>um.. why the -1?</i></b></span>
<span class="comment-copy">I'm already familiar with <code>Capsule</code>s -- as You can see, I use them for the <code>enum</code> values (PIN indices). However I've never thought of using them like you have suggested.. My other solution -- which I think can be better than the one you have provided -- is to create 3 shared libraries: 1) for common-data, 2) for sub_module, 3) for sub_sub_module =&gt; in this case there is no "Python overhead" where it is not necessary. IMHO <code>Capsule</code>s are there to make opaque C-level data passing <i>by the user</i> -- but here, the data is not necessarily used by the user directly. (+1 for the effort though!)</span>
<span class="comment-copy">@PeterVaro it's from the official documentation. I was just paraphrasing. In my understanding <code>Capsule</code>s should always be used instead of exporting symbols and python overhead is quite insignificant since you're only importing it once. But if it's not python related data and functions I might also link to a "pure" C library instead.</span>
