<div class="post-text" itemprop="text">
<p>I have tried multiple methods in doing this but none of them seem to work
The answer comes up alphabetically instead</p>
<pre><code>f=open("class2.txt", "r")
scores=myfile.readlines()
print(sorted(scores))
f.close()

['Anne,   3\n', 'Dave,   10', 'Jack,   4\n', 'Lucy,   8\n']
</code></pre>
<p>Also is there any way to get rid of the "/n" when it goes to the shell?</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the inputs and outputs, I'm guessing you're trying to sort the input names by the associated values. To sort numerically, you can either parse all the values pairs, or use a <code>key</code> function with <code>sorted</code> that does it for you (without storing the result anywhere). For example:</p>
<pre><code># This could be a lambda function, but I'm splitting it out for clarity
def getlinevalue(line):
    intpart = line.split()[-1]  # Get the last whitespace separated group (assumed to be legal integer)
    return int(intpart)  # Convert to int, which will sort numerically

with open("classt2.txt") as f:
    stripnewlines = (line.rstrip() for line in f)
    # reverse=True needed to sort highest to lowest; natural sort for int is lowest to highest
    print(sorted(stripnewlines, reverse=True, key=getlinevalue))
    # If the goal is to print one pair per line, replace the print above with:
    for x in sorted(stripnewlines, reverse=True, key=getlinevalue):
        print(x)
    # Or as a one liner (require Py3, or from __future__ import print_function on Py2):
    print(*sorted(stripnewlines, reverse=True, key=getlinevalue), sep="\n")
</code></pre>
<p>The output from <code>print(sorted(stripnewlines, reverse=True, key=getlinevalue))</code> would be (modulo some whitespace; the screenshot makes it hard to tell how much whitespace is after the comma, so I'm just using a single space):</p>
<pre><code>['Dave, 10', 'Lucy, 8', 'Jack, 4', 'Anne, 3']
</code></pre>
<p>which is what you seem to want.</p>
<p>Explanation of code as requested in the comments:</p>
<ol>
<li>In <code>getlinevalue</code>, we're splitting the provided string on whitespace (<a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split</code></a> does this when not given an argument), then taking the last value from the split with <code>[-1]</code> (indexing with negative numbers starts from the end). So something like <code>'Dave,    10'</code> is stored to <code>intpart</code> as <code>'10'</code>. Then we convert the string <code>'10'</code> to its integer value with <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int()</code></a> and return it</li>
<li><code>with open("classt2.txt") as f:</code> opens the file for read and assigns the result to <code>f</code>; when the indented <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow"><code>with</code> block</a> finishes, the file is closed for you (even if the block exits due to exceptions or returning from a function)</li>
<li><code>stripnewlines = (line.rstrip() for line in f)</code> Creates a <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow">generator expression</a> (sort of like a lazily evaluated <a href="https://docs.python.org/3/glossary.html#term-list-comprehension" rel="nofollow">list comprehension</a> that can only be iterated once) that reads a line at a time and uses <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow"><code>str.rstrip()</code></a> to remove all trailing whitespace (e.g. the new line; you could use <code>str.rstrip("\r\n")</code> to only remove the newline, not trailing tabs or spaces, but the <code>key</code> function would need to be tweaked). We could use a list comprehension instead of a generator expression, but since <code>sorted</code> will create the <code>list</code> for us anyway, we're being lazy to avoid having both the sorted and unsorted list stored at the same time (alternatively, a list comprehension could be followed by a <code>.sort(...)</code> call on the result, which would also avoid keeping two lists in memory, but <code>.sort(...)</code> doesn't return anything, so we'd have more lines of code).</li>
<li><code>sorted(stripnewlines, reverse=True, key=getlinevalue)</code> is just like the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> you used in your attempt except it sorts each (<code>rstrip</code>-ed) line based on the result of calling <code>getlinevalue</code> on it (it only calls the <code>key</code> function once per value, which is why <code>key</code> is superior to <code>cmp</code>; <code>cmp</code> would have to convert each value <code>log(n)</code> times during the sort, on average, or <code>n log(n)</code> conversions total; <code>key</code> converts each value once, and performs a total of <code>n</code> conversions). So it sorts <code>'Dave, 10'</code> relative to <code>'Anne, 3'</code> by comparing the result of calling <code>getlinevalue('Dave, 10')</code> (<code>10</code>) to <code>getlinevalue('Anne, 3')</code> (<code>3</code>). Since numbers sort in ascending order (lowest to highest) normally (so <code>3</code> would sort before <code>10</code>) and you want descending order (highest to lowest) we also pass <code>reverse=True</code> to reverse the "natural" sort of the integers.</li>
<li>The final one-liner uses the "splat" operator (<code>*</code>) to convert the list resulting from the <code>sorted</code> call to <a href="https://docs.python.org/3/glossary.html#term-argument" rel="nofollow">sequential positional arguments</a> to <code>print</code>; for Python 3's <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code> function</a> (or the <code>print</code> function you get in Python 2 with <code>from __future__ import print_function</code> that replaces the normal <code>print</code> statement of Py2), each argument is printed, with <code>sep</code> printed between each argument (defaults to a single space, <code>' '</code>), and when all arguments are printed, follows it up with the value of <code>end</code> (defaults to a new line, <code>"\n"</code>). So that would let you print the input lines from highest to lowest on separate output lines rather than printing the representation of the sorted list on a single line.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>To sort numerically by grade:</p>
<pre><code>&gt;&gt;&gt; sorted((line.split() for line in open('classt2.txt')), key=lambda x: int(x[1]))
[['Anne,', '3'], ['Jack,', '4'], ['Lucy,', '8'], ['Dave,', '10']]
</code></pre>
<h3>How it works</h3>
<p>The above code has two parts.  The first reads the file and splits the lines:</p>
<pre><code>&gt;&gt;&gt; [line.split() for line in open('class')]
[['Anne,', '3'], ['Dave,', '10'], ['Jack,', '4'], ['Lucy,', '8']]
</code></pre>
<p>These lines are unsorted.</p>
<p>The next step is to sort the lines.  This is done with <code>sorted</code> with the <code>key</code> option:</p>
<pre><code>sorted(..., key=lambda x: int(x[1]))
</code></pre>
<p>The key, <code>lambda x: int(x[1])</code>, takes the second element of the list, <code>x[1]</code>, and converts it to an integer.  In other words, <code>sorted</code> sorts by the integer value of the grade.</p>
<h3>Sorting in descending order</h3>
<p>The above sorts in ascending order.  To sort in descending order, we can add the <code>reverse=True</code> option:</p>
<pre><code>&gt;&gt;&gt; sorted((line.split() for line in open('classt2.txt')), key=lambda x: int(x[1]), reverse=True)
[['Dave,', '10'], ['Lucy,', '8'], ['Jack,', '4'], ['Anne,', '3']]
</code></pre>
<h3>Sorting while keeping the original whitespace</h3>
<p>Sorting grades in ascending order:</p>
<pre><code>&gt;&gt;&gt; sorted(open('classt2.txt'), key=lambda x: int(x.split()[1]))
['Anne,   3\n', 'Jack,   4\n', 'Lucy,   8\n', 'Dave,  10\n']
</code></pre>
<p>To print that out nicely:</p>
<pre><code>&gt;&gt;&gt; print(''.join(sorted(open('classt2.txt'), key=lambda x: int(x.split()[1]))))
Anne,   3
Jack,   4
Lucy,   8
Dave,  10
</code></pre>
</div>
<span class="comment-copy">what is myfile... shouldn't it be f.readlines()?</span>
<span class="comment-copy">What did you try? I see no attempt from you to split the rows into columns.</span>
<span class="comment-copy">agreed, <code>f</code> seems to open and close but nothing is done with it</span>
<span class="comment-copy"><code>print sorted[i.rstrip() for i in scores]</code></span>
<span class="comment-copy">@Kay, i dont think thats what is trying to be achieved.</span>
<span class="comment-copy">Thank you this worked perfectly, but could you explain it a bit? A lot of these functions are new to me. (it was 3 spaces )</span>
<span class="comment-copy">Will do, give me a moment and I'll edit the answer.</span>
<span class="comment-copy">@someone: Done, and I just added links for all the functions/methods/concepts used to the Python documentation. That cover all the bases?</span>
<span class="comment-copy">Again, thank you for explaining it, it really helped me a lot :)</span>
<span class="comment-copy">Basically what I was suggesting, though it's slightly destructive (it loses information on the whitespace between the name and the value; you could re<code>join</code>, but it would be with a fixed amount of whitespace, not the amount in the original lines. The original data seems to have more than one space, possibly varying between strings, thus my attempt to preserve the original string intact.</span>
<span class="comment-copy">@ShadowRanger That is even simpler to do.  See the section that I just added to the end of the answer.</span>
<span class="comment-copy">Yar. And now it's the same behavior as mine as a one-liner. :-)  I agree that in my own code I'd use a <code>lambda</code>; I split out my function so the pieces were easier to understand in isolation; that said, I'd never completely one-line this, because I'm religious about <i>always</i> using <code>with</code> statements to manage resources (e.g. files) simply because relying on the interpreter cleanup is a great way to have problems when you end up writing code on non-reference counting Python interpreters like PyPy, Jython and IronPython, or to lose data when writing files where an exception skips the <code>close</code> call.</span>
