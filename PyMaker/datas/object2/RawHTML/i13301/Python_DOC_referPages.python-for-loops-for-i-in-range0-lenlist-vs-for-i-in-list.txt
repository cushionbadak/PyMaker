<div class="post-text" itemprop="text">
<p>This is a really simple python mechanics question. Why can't I just say for i in range original_list instead of for i in range(0, len(original_list)). Do people usually use range over the former? Thanks!</p>
<pre><code># "If I give you an array with negative and positive numbers (i.e. {3,2,-3,6,4,-7}) and asked you to sort it so that the negative numbers appeared first but you didn't change the relative order of the remaining numbers, how would you do it? (i.e. the final result would be {-3,-7,3,2,6,4}).

original_list = [3, 2, -3, 6, 4, -7]
pos_list = []
neg_list = []

for i in range(0, len(original_list)):
    if original_list[i] &lt; 0:
        neg_list.append(original_list[i])
    else:
        pos_list.append(original_list[i])

print neg_list + pos_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your case, since you don't need to use the index of the items in the list, you can just iterate over it using <code>for in</code>:</p>
<pre><code>&gt;&gt;&gt; for item in original_list:
...     if item &lt; 0:
...         ...
</code></pre>
<p>If you want to iterate over the <em>indexes</em> of items in your list, use <code>for in range(..)</code>:</p>
<pre><code>&gt;&gt;&gt; for i in range(len(original_list)):
...     if original_list[i] &lt; 0:
...         ...
</code></pre>
<p>Alternatively, you might also want to use <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a> if you need both item and index in loop's body:</p>
<pre><code>&gt;&gt;&gt; for i, item in enumerate(original_list):
...    if item &lt; 0:
...        ...
</code></pre>
<p>By this way, you also eliminate the use of <code>original_list[i]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The construction <code>range(len(my_sequence))</code> is usually not considered idiomatic Python. It focuses your code on lower level mechanics than what we usually try to write, and this makes it harder to read. Because of this, using <code>range</code> here is mostly seen as a holder from people used to coding in lower level languages like C.</p>
<p>See, for example, Raymond Hettinger's talk <a href="https://www.youtube.com/watch?v=OSGv2VnC0go" rel="nofollow noreferrer">Transforming Code into Beautiful Idiomatic Python</a> - one of the first things he recommends is exactly changing <code>for i in range(len(sequence))</code> into <code>for item in sequence</code> where ever it appears; he then goes on to mention <code>enumerate</code> and <code>zip</code> to cover situations where you might otherwise be tempted to revert to using <code>range</code>. He also mentions that the idiomatic way is faster. Aside from Python builtin types being (unsurprisingly) optimised to run idiomatic constructs quickly, it isn't hard to see why this could be true of certain other data structures - for example, a linked list can have much faster sequential than random access, meaning that loops relying on <code>my_linked_list[i]</code> could become a quadratic time operation rather than a linear one.</p>
<p>You can see similar advice from time to time if you follow the [python] tag over at <a href="https://codereview.stackexchange.com/questions/tagged/python">codereview.SE</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use range to iterate over a list of values. Do <code>for item in list</code>. If you need the index use enumerate.</p>
<pre><code>for index, value in enumerate(original_list):
    print index
    print value
</code></pre>
<p>Or</p>
<pre><code>for item in original_list:
    if item &lt; 0:
        neg_list.append(item)
    else:
        pos_list.append(item)
</code></pre>
<p>You were probably getting the exception using <code>for item in original_list:</code> because you were trying to do <code>neg_list.append(original_list[item])</code> which would could lead to something like <code>original_list[-3]</code> or <code>original_list[6]</code> which would be out of range.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you open up your interpreter and do the following:</p>
<p><code>help(range)</code></p>
<p>You will get this: </p>
<pre><code>Help on built-in function range in module __builtin__:

range(...)
    range(stop) -&gt; list of integers
    range(start, stop[, step]) -&gt; list of integers

    Return a list containing an arithmetic progression of integers.
    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
    When step is given, it specifies the increment (or decrement).
    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
    These are exactly the valid indices for a list of 4 elements.
</code></pre>
<p>As you can see from the description, it is the way the range works. It takes a starting position, and then a stopping position, and then an optional step to go up by x each time. </p>
<p><em>edit</em></p>
<p>To answer based off of your comment, the reason why you are getting an index out of range, is because when you do this: </p>
<pre><code>for i in arr:
    print(arr[i])
</code></pre>
<p>That won't work, because <code>for i in arr</code> will give you the <strong>values</strong> of each item in the array. So, what you are doing then is actually putting in a value in to arr as if it is the index. But it is not. </p>
<p>When you do this: </p>
<p><code>for i in range(0, len(arr))</code></p>
<p>What is happening here is you are getting an incremental value that is based on the size of the array, so that way you can use that value as an index to your list. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst=[1,2,3,4]

for i in range(lst):
    print lst[i]
</code></pre>
<p>You can't do that. Because:</p>
<blockquote>
<p>TypeError: range() integer end argument expected, got list.</p>
</blockquote>
<p>What you can do is:</p>
<pre><code> for i in range(len(lst)): #i is the index here
     print lst[i]
</code></pre>
<p>Output:
    1
    2
    3
    4</p>
<p>Or,</p>
<pre><code> for i in lst: #i is the value here
     print i
</code></pre>
<p>Output:</p>
<pre><code>1
2
3
4
</code></pre>
<p>Actually, <code>range</code> is not idiomatic python. You can avoid it. If you need index, you can use <code>enumerate</code> like below:</p>
<pre><code> for i,j in enumerate(lst): #i is the index and j is the value here
 print i,j
</code></pre>
<p>Hope it is clear to you now.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a recipe for partitioning in the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><strong><code>itertools</code></strong> documentation</a>:</p>
<pre><code>def partition(pred, iterable):
    'Use a predicate to partition entries into false entries and true entries'
    # partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
</code></pre>
<p>You can use it like:</p>
<pre><code>positives, negatives = partition(lambda value: value &lt; 0, originals)
</code></pre>
</div>
<span class="comment-copy">Which one is most efficient? Is it situation by situation? Should I make sure to only use enumerate if I actually need both?</span>
<span class="comment-copy">The standard is <code>for item in original_list</code>.</span>
<span class="comment-copy">It throws me an out of range exception if I try to run it with for item in list... Do you know why?</span>
<span class="comment-copy">see most recent edit.</span>
<span class="comment-copy">So, just double checking... <a href="http://puu.sh/kxR7Y/69a2c9924b.png" rel="nofollow noreferrer">puu.sh/kxR7Y/69a2c9924b.png</a>, so use method 1 if I only need values and use enumerate/method 3 if I need indices as well?</span>
<span class="comment-copy">I understand how range works. What I'm wondering is why running the code with for i in original_list doesn't do the same thing at range(0,len(original_list). If I do the former, it throws me an out of range exception.</span>
<span class="comment-copy"><a href="http://puu.sh/kxR7Y/69a2c9924b.png" rel="nofollow noreferrer">puu.sh/kxR7Y/69a2c9924b.png</a>, so use method 1 if I only need values and use enumerate/method 3 if I need indices as well?</span>
<span class="comment-copy">@IntrepidDiamond   If you want to access <code>index</code> through <code>range()</code>, use method 1. If index isn't needed, use method2. If you want <code>index</code> without using <code>range</code>, use method 3</span>
