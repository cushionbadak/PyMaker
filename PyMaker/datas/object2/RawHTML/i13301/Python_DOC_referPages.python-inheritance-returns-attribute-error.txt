<div class="post-text" itemprop="text">
<p>Just starting out Python, i'm a fan of Derek Banas and have been following a tutorial and I'm stuck with a bit of code.</p>
<pre><code>class Dog(Animal):
    __owner = ""

    def __init__(self, name, height, weight, sound, owner):
        self.__owner = owner
        super(Dog, self).__init__(name, height, weight, sound)

    def set_owner(self, owner):
        self.__owner = owner

    def get_owner(self):
        return self.__owner

    def get_type(self):
        print("Dog")

    def tostring(self):
        return "{} is {} cm tall and {} kilograms and say {} His owner is {}".format(self.__name,
                                                                                     self.__height,
                                                                                     self.__weight,
                                                                                     self.__sound,
                                                                                     self.__owner)

    def multiple_sounds(self, how_many=None):
        if how_many is None:
            print(self.get_sound())
        else:
            print(self.get_sound() * how_many)

spot = Dog("Spot", 53, 27, "Ruff", "Seb")

print(spot.tostring())
</code></pre>
<p>And i'm receiving the following error:</p>
<pre><code>Traceback (most recent call last):
  File "G:/JetBrains/PyCharm Community Edition 4.5.4/PyCharm Projects/Testing 123/testing objects.py", line 87, in &lt;module&gt;
    print(spot.tostring())
  File "G:/JetBrains/PyCharm Community Edition 4.5.4/PyCharm Projects/Testing 123/testing objects.py", line 73, in tostring
    return "{} is {} cm tall and {} kilograms and say {} His owner is {}".format(self.__name,
AttributeError: 'Dog' object has no attribute '_Dog__name'
</code></pre>
<p>As I've previously transferred from programming with vb, the indentation for the format of the 'tostring' method baffles me a little bit. I even tried putting it all into one line and it still doesn't recognize the inherited attribute '__name' from the class Animal.</p>
<p>Help would be appreciated.</p>
<p>Edit:</p>
<p>It might be worth mentioning that i'm using Pycharm to write all this in.</p>
<p>Also here's the Animal class</p>
<pre><code>class Animal:
    __name = ""
    __height = 0
    __weight = 0
    __sound = 0

    def __init__(self, name, height, weight, sound):
        self.__name = name
        self.__height = height
        self.__weight = weight
        self.__sound = sound

    def set_name(self, name):
        self.__name = name

    def set_height(self, height):
        self.__height = height

    def set_weight(self, weight):
        self.__weight = weight

    def set_sound(self, sound):
        self.__sound = sound

    def get_name(self):
        return self.__name

    def get_height(self):
        return self.__height

    def get_weight(self):
        return self.__weight

    def get_sound(self):
        return self.__sound

    def get_type(self):
        print("Animal")

    def tostring(self):
        return "{} is {} cm tall and {} kilograms and say {}".format(self.__name,
                                                                     self.__height,
                                                                     self.__weight,
                                                                     self.__sound)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>Animal</code> class is using <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow"><em>Name Mangling</em></a>. From <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">documentation</a> -</p>
<blockquote>
<p>Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called <em>name mangling</em>. <strong>Any identifier of the form <code>__spam</code></strong> (at least two leading underscores, at most one trailing underscore) <strong>is textually replaced with <code>_classname__spam</code></strong>, where classname is the current class name with leading underscore(s) stripped.</p>
</blockquote>
<p>(Emphasis mine)</p>
<p>Hence , after your <code>Animal</code> class got defined any name such as <code>__name</code> would have changed to <code>_Animal__name</code> , etc. You would also need to access them alike that in your <code>Dog</code> class.</p>
<p>But I don't think you actually need to use <em>Name Mangling</em> , you should avoid using the two leading underscores, if you didn't mean for <em>Name Mangling</em> to happen.</p>
</div>
<div class="post-text" itemprop="text">
<p>Change your function code </p>
<p><strong>from</strong> </p>
<pre><code>def toString(self):
        return "{} is {} cm tall and {} kilograms and say {} and the owner is {}".format(
        self.__name,
        self.__height,
        self.__weight,
        self.__sound,
        self.__owner)
</code></pre>
<p><strong>to</strong> </p>
<pre><code>def toString(self):
        return "{} is {} cm tall and {} kilograms and say {} and the owner is {}".format(
        self.get_name(),
        self.get_height(),
        self.get_weight(),
        self.get_sound(),
        self.get_owner())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The child class itself doesn't have the attribute, use this instead.</p>
<pre><code>return super(Dog, self).toString() + "His owner is {}".format(self.__owner)
</code></pre>
</div>
<span class="comment-copy">Since name is set in the super, we would probably need to see the <code>Animal</code> code. As an aside, creating a <code>tostring()</code> method is rather un-pythonic, as you would want to look at overriding the <code>__str__</code> and <code>__repr__</code> magic methods.</span>
<span class="comment-copy">That's true, wasn't sure if it was necessary if what I said was that the attribute it was trying to find already exists in the super its inheriting, but I'll add the Animal class code to the original post.</span>
<span class="comment-copy">If you've got this from a tutorial, you should get another one <i>straight away</i>. This is totally un-Pythonic code.</span>
<span class="comment-copy">In short: use a single trailing underscore, not double.</span>
<span class="comment-copy">Thanks, this seems to have worked. Is name mangling something that has been introduced within the last year? I ask this because inside the tutorial I was looking at they did not have any problems with using 2 underscores for their attributes.</span>
<span class="comment-copy">Hi @Simon Neubauer, could you please add some more explanation to your answer?</span>
