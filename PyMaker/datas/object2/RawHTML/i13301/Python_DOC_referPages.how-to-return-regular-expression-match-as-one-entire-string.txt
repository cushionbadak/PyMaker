<div class="post-text" itemprop="text">
<p>I want to match phone numbers, and return the entire phone number but only the digits.  Here's an example:</p>
<pre><code>(555)-555-5555
555.555.5555
</code></pre>
<p>But I want to use regular expressions to return only:</p>
<pre><code>5555555555
</code></pre>
<p>But, for some reason I can't get the digits to be returned:</p>
<pre><code>import re
phone_number='(555)-555-5555'

regex = re.compile('[0-9]')
r = regex.search(phone_number)
regex.match(phone_number)
print r.groups()
</code></pre>
<p>But for some reason it just prints an empty tuple?  What is the obvious thing I am missing here?  Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're getting empty result because you <strong>don't</strong> have any capturing groups, refer to the <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow">documentation</a> for details. </p>
<p>You should change it to <code>group()</code> instead, now you'll get the first digit as a match. But this is <strong>not</strong> what you want because the engine stops when it encounter a non digit character and return the match until there.</p>
<p>You can simply <em>remove</em> all non-numeric characters:</p>
<pre><code>re.sub('[^0-9]', '', '(555)-555-5555')
</code></pre>
<p>The range 0-9 is negated, so the regex matches anything that's <em>not</em> a digit, then it replaces it with the empty string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it without as regular expression using <code>str.join</code> and <code>str.isdigit</code>:</p>
<pre><code>s = "(555)-555-5555"

print("".join([ch for ch in s if ch.isdigit()]))
5555555555
</code></pre>
<p>If you printed <code>r.group()</code> you would get some output but using search is not the correct way to find all the matches, search would return the first match and since you are only looking for a single digit it would return 5, even with <code>'[0-9]+')</code> to match one or more you would still only get the first group of consecutive digits i.e <code>555</code> in the string above. Using <code>"".join(r.findall(s))</code> would get the digits but that can obviously be done with <code>str.digit</code>.</p>
<p>If you knew the potential non-digit chars then <code>str.translate</code> would be the best approach:</p>
<pre><code>s = "(555)-555-5555"

print(s.translate(None,"()-."))
5555555555
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is here:   </p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "(555)-555-5555"
&gt;&gt;&gt; x = re.sub(r"\D+", r"", s)
&gt;&gt;&gt; x
'5555555555' 
</code></pre>
</div>
<span class="comment-copy"><code>compimle</code>? Post the actual code, don't type it here.</span>
<span class="comment-copy">A tutorial can be useful for you, e.g.: <a href="https://docs.python.org/2/howto/regex.html" rel="nofollow noreferrer">docs.python.org/2/howto/regex.html</a></span>
<span class="comment-copy">Hi ,  I've watched the tutorials and everything, but something still puzzles me:  I know that <code>^</code> means "beginning of line".  But how does it mean "not" in the context of <code>[^0-9]</code>?</span>
<span class="comment-copy">@Candic3 when placed at the beginning of a character class, it simply means "not", so <code>[^0123]</code> matches everything that's <b>not</b> 0,1,2 or 3. Note however that <code>[1^2]</code> matches 1, ^ or 2, that's because <code>^</code> was not placed at the beginning, so it looses its meaning.</span>
<span class="comment-copy">Great explanation, thanks.</span>
