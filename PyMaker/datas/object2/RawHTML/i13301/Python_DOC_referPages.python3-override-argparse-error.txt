<div class="post-text" itemprop="text">
<p>I'm creating a program as a assignment in my school, I'm all done with it except one thing. 
We have to make the program exit with different codes depending on how the execution went. In my program I'm processing options using "argparse" and when I use built-in functions like "version" I've managed to override the exit-code, but if I write a option that doesn't exist, then it won't work. It gives me the "unrecognized error"-message, and exits with code "0", I need it to exit with code 1. Is there anyway to do this? Been driving me nuts, have struggled with it for days now...</p>
<p>Thanks in advance!
/feeloor</p>
</div>
<div class="post-text" itemprop="text">
<p>Use sys.exit(returnCode) to exit with particular codes. Obviously on linux machines you need to no 8 bit right shift inorder to get the right return code. </p>
</div>
<div class="post-text" itemprop="text">
<p>To achieve something like this, inherit from <code>argparse.ArgumentParser</code> and reimplement the <code>exit</code> method (or perhaps the <code>error</code> method if you like).</p>
<p>For example:</p>
<pre><code>class Parser(argparse.ArgumentParser):
    # the default status on the parent class is 0, we're 
    # changing it to be 1 here ...
    def exit(self, status=1, message=None):
        return super().exit(status, message)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the Python argparse documentation</p>
<p><a href="https://docs.python.org/3/library/argparse.html#exiting-methods" rel="nofollow">https://docs.python.org/3/library/argparse.html#exiting-methods</a></p>
<pre><code>16.4.5.9. Exiting methods

ArgumentParser.exit(status=0, message=None)

    This method terminates the program, exiting with the specified status and, if given, it prints a message before that.

ArgumentParser.error(message)

    This method prints a usage message including the message to the standard error and terminates the program with a status code of 2.
</code></pre>
<p>They both get a <code>message</code>, and pass it on.  <code>error</code> adds <code>usage</code> and passes it on to <code>exit</code>.  You can customize both in a subclassed Parser.</p>
<p>There are also examples of error catching and redirection the unittest file, <code>test/test_argparse.py</code>.  </p>
<p>A problem with using a <code>try/except</code> wrapper is that the <code>error</code> information is written to <code>sys.stderr</code>, and not incorporated in the <code>sys.exc_info</code>.</p>
<pre><code>In [117]: try:
    parser.parse_args(['ug'])
except:
    print('execinfo:',sys.exc_info())
   .....:     
usage: ipython3 [-h] [--test TEST] [--bar TEST] test test
ipython3: error: the following arguments are required: test
execinfo: (&lt;class 'SystemExit'&gt;, SystemExit(2,), &lt;traceback object at 0xb31fb34c&gt;)
</code></pre>
<p>The exit number is available in the <code>exc_info</code>, but not the message.</p>
<p>One option is to redirect <code>sys.stderr</code> at the same time as I do that <code>try/except</code> block.</p>
<p>Here's an example of changing the <code>exit</code> method and wrapping the call in a try block:</p>
<pre><code>In [155]: 
def altexit(status, msg):
    print(status, msg)
    raise ValueError(msg)
   .....: 
In [156]: parser.exit=altexit

In [157]: 
try:                     
    parser.parse_args(['--ug','ug','ug'])
except ValueError:       
    msg = sys.exc_info()[1]
   .....:     
usage: ipython3 [-h] [--test TEST] [--bar TEST] test test
2 ipython3: error: unrecognized arguments: --ug

In [158]: msg
Out[158]: ValueError('ipython3: error: unrecognized arguments: --ug\n')
</code></pre>
<p><code>Python</code> lets me replace methods of existing objects.  I don't recommend this in production code, but it is convenient when trying ideas.  I capture the Error (my choice of ValueError is arbitrary), and save the message for later display or testing.</p>
<p>Generally the type of error (e.g. TypeError, ValueError, etc) is part of the public API, but the text of error is not.  It can be refined from one Python release to the next without much notification.  So you test for message details at your own risk.</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved the problem catching SystemExit and determining what error by simply testing and comparing. 
Thanks for all the help guys!</p>
</div>
<span class="comment-copy">Ye, that I know, the thing is how do I override the argparse errors? Because when a option is not recognized, it automatically exits with error code 0, I want to override that so I can change it to exit with code 1...</span>
<span class="comment-copy">use try except block to catch the error and depending on the exception exit with different codes...hint: use methods like sys.exc_info() in order to detect the type of exception..</span>
<span class="comment-copy">This is something I imagine I will need to do, but I need to actually see what the error is and depending on the error give exit code, because as I said, exit status "1" is for when options is wrongly entered, and "0" is when program exits successfully and "2" is when a "command" is wrong... Hope you understand how I mean, sorry if I'm a bit unclear..</span>
<span class="comment-copy">Then override some more methods on <code>ArgumentParser</code>, like <code>error</code> ... initiative and all that ...</span>
<span class="comment-copy">Ye that's what I want to do, but I can't seem to find their "name" or how to do it? I'm pretty new to python sorry..</span>
