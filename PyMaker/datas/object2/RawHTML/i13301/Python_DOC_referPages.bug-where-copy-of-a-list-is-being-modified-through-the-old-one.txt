<div class="post-text" itemprop="text">
<p>I was working with matrices in python, and after hours spent trying to debug a program, managed to trace the problem to essentially this code, where all non-zero entries of a matrix are uniformly increased.</p>
<pre><code>list2=[[1,2],[0,4]]
list1=list2
for row in list1:
    for i in range(0,len(row)):
        if row[i]!=0:
            row[i]=row[i]+10
print(list1) #returns [[11,12],[0,14]], as expected
print(list2) #returns [[11,12],[0,14]], want to return [[1,2],[0,4]]
</code></pre>
<p>There's something fundamental I'm missing here. I thought by declaring <code>list1=list2</code> a new list was created, which the rest of the code modified while keeping <code>list2</code> unaltered.</p>
<p>What's the problem, and how do I fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>This code:</p>
<pre><code>list2=[[1,2],[0,4]]
list1=list2
</code></pre>
<p>does <em>not</em> create a new list in <code>list1</code>, it simply binds the name <code>list1</code> to the same object as <code>list2</code>. Therefore any changes made to the list via name <code>list2</code> will also be visible via <code>list1</code>.</p>
<p>You could use the <a href="https://docs.python.org/2/library/copy.html#module-copy" rel="nofollow"><strong><code>copy</code></strong></a> module:</p>
<pre><code>import copy
list2 = [[1,2],[0,4]]
list1 = copy.deepcopy(list2)
</code></pre>
<p><code>list1</code> will now refer to a copy of <code>list2</code> and changes to the list will be reflected only via <code>list2</code>.</p>
<p>For lists containing more complicated objects such as other lists, <code>copy.deepcopy()</code> will make recursive copies of the nested objects.</p>
</div>
<div class="post-text" itemprop="text">
<h3>The Problem; You are not copying the actual list</h3>
<p>By doing <code>list1 = list2</code> you are merely copying the <em>handle</em> to the list that <code>list1</code> is referring to, in order to provide an actual copy you must say that this is what you want — explicitly.</p>
<p><sub><strong>Example</strong></sub></p>
<pre><code>a = [1,2,3];
b = a
c = list(a) # create a new list, copying the elements in `a`
d = a[:]    # equivalent to `list(a)` (with a slightly weird syntax)
</code></pre>
<pre><code>a[1] = 99
c[1] = 0
</code></pre>
<pre><code>print (a) # [1,99,3]
print (b) # [1,99,3]
print (c) # [1,0,3]
print (d) # [1,2,3]
</code></pre>
<hr/>
<h3>The Solution; Copying all the way down</h3>
<p>The problem you are experienced will show up in an additional place since you have <em>lists</em> within a <em>list</em>. In order to make a <em>deep</em> copy all at once it is recommended to use <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer">copy.deepcopy</a>, as in the below example.</p>
<pre><code>import copy
</code></pre>
<pre><code>list1 = copy.deepcopy (list2)
</code></pre>
<p><strong>Documentation</strong></p>
<ul>
<li><a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer"><strong>docs.python.org</strong> - 8.17. copy — Shallow and deep copy operations</a></li>
</ul>
<hr/>
<h3>Further reading</h3>
<ul>
<li><a href="https://stackoverflow.com/a/2612815/1090079"><strong>How to clone or copy a list in Python?</strong></a></li>
<li><a href="https://stackoverflow.com/questions/184643/what-is-the-best-way-to-copy-a-list"><strong>What is the best way to copy a list?</strong></a></li>
<li><a href="https://stackoverflow.com/q/17873384/1090079"><strong>Deep copy a list in Python</strong></a></li>
</ul>
</div>
<span class="comment-copy">from copy import deepcopy; list1=deepcopy(list2)</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/8056130/immutable-vs-mutable-types-python">Immutable vs mutable types - Python</a></span>
<span class="comment-copy">I just tried that change, but it still returns <code>[[11,12],[0,14]]</code> for both.</span>
<span class="comment-copy"><code>list1 = list2[:]</code> is a shallow copy</span>
<span class="comment-copy">@PaulBoddington: thanks, you caught me mid-update.</span>
<span class="comment-copy">Awesome, I would have never picked up on this. A whole course on python at uni, and not at any stage was this mentioned.</span>
