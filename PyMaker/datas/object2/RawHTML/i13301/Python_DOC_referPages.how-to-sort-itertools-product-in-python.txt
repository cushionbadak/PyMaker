<div class="post-text" itemprop="text">
<p>This is Product from itertools:     </p>
<pre><code>product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
</code></pre>
<p>But I wanna change to: --&gt; <code>Ax Bx Cx Dx Ay By Cy Dy</code>
How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Change the order of arguments and reverse tuples <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>product</code></a> yields. It'll probably be more efficient than sorting, since it doesn't need to build intermediate list.</p>
<pre><code>from itertools import product

def reorder_product(*a):
    for tup in product(*a[::-1]):
        yield tup[::-1]
</code></pre>
<p>Example:</p>
<pre><code>print(*[''.join(t) for t in reorder_product('ABCD', 'xy')])
# Output:
#     Ax Bx Cx Dx Ay By Cy Dy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll probably be most efficient if you swap the order of the product and then simply reverse each of the yielded items:</p>
<pre><code>def product_sorted_by_second(first, second):
    for item in itertools.product(second, first):
        yield item[::-1]
</code></pre>
<p>Of course, this is a horrible name for the function (since we aren't really sorting).</p>
<p>The advantage here is that you don't actually need to sort (which is an <code>O(NlogN)</code> processing step).  So this ends up being an <code>O(N)</code> algorithm  (where <code>N</code> is <code>len(first) * len(second)</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>not overly elegant but it works:</p>
<pre><code>for p in product( 'xy', 'ABCD'):
    print(''.join(reversed(p)))
</code></pre>
</div>
<span class="comment-copy">Thank you so much ^^~</span>
<span class="comment-copy">Thank you so much ^^~</span>
<span class="comment-copy">its work!!!! Thank you so much.</span>
