<div class="post-text" itemprop="text">
<p>Python 3.5's <code>os.scandir(path)</code> function returns lightweight DirEntry objects that are very helpful with information about files.  However, it only works for the immediate path handed to it.  Is there a way to wrap it in a recursive function so that it visits all subdirectories beneath the given path?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can scan recursively using <code>os.walk()</code>, or if you need <code>DirEntry</code> objects or more control, write a recursive function like <code>scantree()</code> below:</p>
<pre><code>try:
    from os import scandir
except ImportError:
    from scandir import scandir  # use scandir PyPI module on Python &lt; 3.5

def scantree(path):
    """Recursively yield DirEntry objects for given directory."""
    for entry in scandir(path):
        if entry.is_dir(follow_symlinks=False):
            yield from scantree(entry.path)  # see below for Python 2.x
        else:
            yield entry

if __name__ == '__main__':
    import sys
    for entry in scantree(sys.argv[1] if len(sys.argv) &gt; 1 else '.'):
        print(entry.path)
</code></pre>
<p>Notes:</p>
<ul>
<li>There are a few more examples in <a href="https://www.python.org/dev/peps/pep-0471/#examples" rel="noreferrer">PEP 471</a> and in the <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="noreferrer">os.scandir() docs</a>.</li>
<li>You can also add various logic in the for loop to skip directories or files starting with <code>'.'</code> and that kind of thing.</li>
<li>You typically want <code>follow_symlinks=false</code> on the <code>is_dir()</code> calls in recursive functions like this, to avoid symlink loops.</li>
<li><p>On Python 2.x, replace the <code>yield from</code> line with:</p>
<pre><code>for entry in scantree(entry.path):
    yield entry
</code></pre></li>
</ul>
</div>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3.5/library/os.html#os.walk" rel="nofollow noreferrer">os.walk()</a>. It may be a bit more heavy-handed than your looking for, but it should be more simple than creating your own solution.</span>
<span class="comment-copy">Given that <code>os.scandir</code> only exists in Python 3.5, the Python 2 fallback code probably isn't needed. :-) <b>Edit:</b> Ah, you wrote it to import the PyPI module if <code>os.scandir</code> didn't exist, and I'm guessing the PyPI module is available for 2.7?</span>
<span class="comment-copy">@ShadowRanger Well, true, but this way it'll work for Python &lt; 3.5 (including Python 2.x) using my <a href="https://pypi.python.org/pypi/scandir" rel="nofollow noreferrer">scandir</a> module. :-)</span>
<span class="comment-copy">@ShadowRanger I've added a code comment to clarify.</span>
<span class="comment-copy">you're the author of the backport! congrats it's a life saver</span>
