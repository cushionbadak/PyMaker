<div class="post-text" itemprop="text">
<p>As the title states, what is the difference between these two flags? It seems they both convert the value to a string using repr()?
Also, in this line of code: </p>
<pre><code>"{0!r:20}".format("Hello")  
</code></pre>
<p>What does the 0 in front of the !r do?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>%r</code> is not a valid placeholder in the <code>str.format()</code> formatting operations; it only works in <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting" rel="noreferrer">old-style <code>%</code> string formatting</a>. It indeed converts the object to a representation through the <code>repr()</code> function.</p>
<p>In <code>str.format()</code>, <code>!r</code> is the equivalent, but this also means that you can now use all the <a href="https://docs.python.org/2/library/string.html#formatspec" rel="noreferrer">format codes</a> for a string. Normally <code>str.format()</code> will call the <code>object.__format__()</code> method on the object itself, but by using <code>!r</code>, <code>repr(object).__format__()</code> is used instead.</p>
<p>There are also the <code>!s</code> and (in Python 3) <code>!a</code> converters; these apply the <code>str()</code> and <a href="https://docs.python.org/3/library/functions.html#ascii" rel="noreferrer"><code>ascii()</code></a> functions first.</p>
<p>The <code>0</code> in front indicates what argument to the <code>str.format()</code> method will be used to fill that slot; positional argument <code>0</code> is <code>"Hello"</code> in your case. You could use <em>named</em> arguments too, and pass in objects as keyword arguments:</p>
<pre><code>"{greeting!r:20}".format(greeting="Hello")  
</code></pre>
<p>Unless you are using Python 2.6, you can omit this as slots without indices or names are automatically numbered; the first <code>{}</code> is <code>0</code>, the second <code>{}</code> takes the second argument at index <code>1</code>, etc.</p>
</div>
<span class="comment-copy">The 0 means "use the 0th positional argument" - you only need it if you mean to use one of the position arguments more than once or if you need to support Python 2.6. <code>"{} {}"</code>.format(...)` gets automatically numbered so as to be treated as <code>"{0} {1}".format(...)</code> in Python 2.7 and 3.x.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format">Python string formatting: % vs. .format</a></span>
<span class="comment-copy">Thanks, can you clarify what you meant by "this also means that you can now use all the format codes for a string"?</span>
<span class="comment-copy">The codes after the <code>:</code> colon are passed to the <code>object.__format__()</code> method and are thus type specific. Floating point numbers accept different formatting codes from strings. Thus if the object  is a float, you'd use different formatting codes from when you add <code>!r</code>.</span>
