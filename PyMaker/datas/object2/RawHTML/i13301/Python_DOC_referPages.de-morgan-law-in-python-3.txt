<div class="post-text" itemprop="text">
<p>According to De Morgan law:</p>
<pre><code>¬(P ˄ Q) ↔ (¬P) ˅ (¬Q)
¬(P ˅ Q) ↔ (¬P) ˄ (¬Q)
</code></pre>
<p>In Python 3.5 when I run:</p>
<pre><code>A = True
B = True
x = not(A and B)==(not A) or (not B)
y = not(A or B)==(not A) and (not B)
print('x is :', x, '\ny is :' ,y)
</code></pre>
<p>This returns:</p>
<pre><code>x is : True 
y is : False
</code></pre>
<p>Question: why y is False?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try adding some parentheses -- <code>==</code> is higher precedence than <code>or</code>.</p>
<p>Here is the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow">precedence table</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>y = not(A or B)==((not A) and (not B))
</code></pre>
<p>It was evaluating </p>
<pre><code>not(A or B) == (not A)
</code></pre>
<p>first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Operator priority is tripping you up. In Python, the <code>==</code> operator has higher priority than <code>not</code>. The expression <code>not a == b</code> is read as <code>not (a == b)</code> rather than <code>(not a) == b</code>, because the former is usually more useful than the latter.</p>
<p>Therefore, your <code>y</code> should look like:</p>
<pre><code>y = (not(A or B)) == ((not A) and (not B))
</code></pre>
<p>And your <code>x</code> should look like:</p>
<pre><code>x = (not(A and B)) == ((not A) or (not B))
</code></pre>
<p>Then you'll get the right results. (Your <code>x</code> is also wrong, and is getting a <code>True</code> result for the wrong reasons: it's actually evaluating <code>(not ((A and B) == (not A)) or (not B)</code> which works out to <code>(not (True == False)) or False</code> which works out to <code>True or False</code>. But what you <strong>actually</strong> wanted was <code>(not (A and B)) == ((not A) or (not B))</code>, which works out to <code>(not True) == (False or False)</code>, which works out to <code>False == False</code>. As I said, your <code>x</code> is getting a <code>True</code> result for the wrong reasons.)</p>
</div>
