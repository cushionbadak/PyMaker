<div class="post-text" itemprop="text">
<p>In Python 2.7, I have two lists of integers:</p>
<pre><code>x = [1, 3, 2, 0, 2]
y = [1, 2, 2, 3, 1]
</code></pre>
<p>I want to create a third list which indicates whether each element in <code>x</code> and <code>y</code> is identical, to yield:</p>
<pre><code>z = [1, 0, 1, 0, 0]
</code></pre>
<p>How can I do this using list comprehension?</p>
<p>My attempt is:</p>
<pre><code>z = [i == j for i,j in ...]
</code></pre>
<p>But I don't know how to complete it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a></p>
<pre><code>z = [i == j for i,j in zip(x,y)]
</code></pre>
<p>But you better add <a href="https://docs.python.org/2/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> call to get your desired output</p>
<pre><code>&gt;&gt;&gt; z = [int(i == j) for i,j in zip(x,y)]
&gt;&gt;&gt; z
[1, 0, 1, 0, 0]
</code></pre>
<p>else you'll get a list like <code>[True, False, True, False, False]</code></p>
<hr/>
<p>As <a href="https://stackoverflow.com/users/3923281/ajcr">ajcr</a> mentions in a <a href="https://stackoverflow.com/questions/32996293/comparing-values-in-two-lists/32996311?noredirect=1#comment53817743_32996311">comment</a>, it is better to use   itertools.izip instead of zip if the lists are very long. This is because it returns an iterator instead of a list. This is mentioned in the <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer">documentation</a></p>
<blockquote>
<p>Like zip() except <em>that it returns an iterator</em> instead of a list.</p>
</blockquote>
<p>demo</p>
<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; z = [int(i == j) for i,j in izip(x,y)]
&gt;&gt;&gt; z
[1, 0, 1, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can change it a little bit and do:</p>
<pre><code>[x[i] == y[i] for i in xrange(len(x))]
</code></pre>
<p>If you use Python3 - change <code>xrange</code> to <code>range</code></p>
</div>
<div class="post-text" itemprop="text">
<p>While a list comprehension was specified in the question and the answers above are probably better, I thought I'd chime in with a recursive solution:</p>
<pre><code>def compare_lists(a, b, res=[]):
    if len(a) == len(b):
        if a == []:
            return res
        else:
            if a[0] == b[0]:
                res.append(1)
            else:
                res.append(0)
            return compare_lists(a[1:], b[1:])
    else:
        return "Lists are of different length."
</code></pre>
</div>
<span class="comment-copy">I think you'll get a list of booleans. If you like it to be 0,1, you'll probably need to do some casting</span>
<span class="comment-copy">@SomethingSomething Yes. you need to cast to an <code>int</code>. Look <a href="http://stackoverflow.com/a/32996311/4099593">here</a> :)</span>
<span class="comment-copy">A small footnote: if the lists are very long, it might be worth using <code>itertools.izip</code> instead of <code>zip</code> to avoid the construction of a long list of tuples. Python 3 does not have this issue, of course.</span>
<span class="comment-copy">@ajcr Perfect. I always forget that (Py3 problems). I will add a small note there. Thanks.</span>
<span class="comment-copy">So without using <code>itertools.izip</code> (or Python 3), it would run <code>zip(x,y)</code> for every element in <code>x</code> and <code>y</code>?</span>
<span class="comment-copy">@Karnivaurus In python3 <code>zip</code> returns an iterator by itself. You can read about it <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Just to also point out, the cast to int is not really necessary as python will treat <code>True</code> and <code>False</code> as <code>1</code> and <code>0</code> respectively if you try to do any math on them.</span>
<span class="comment-copy">This is valid, but the more pythonic solution is to use <code>zip</code>.</span>
<span class="comment-copy">The advantage of zip is that it handles lists of different length.</span>
