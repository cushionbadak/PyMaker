<div class="post-text" itemprop="text">
<p>What is <code>__init__.py</code> for in a Python source directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a part of a package. <a href="http://docs.python.org/tutorial/modules.html#packages" rel="noreferrer">Here's the documentation.</a></p>
<blockquote>
<p>The <code>__init__.py</code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as <code>string</code>, from unintentionally hiding valid modules that occur later (deeper) on the module search path. In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable, described later.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Files named <code>__init__.py</code> are used to mark directories on disk as Python package directories.
If you have the files</p>
<pre><code>mydir/spam/__init__.py
mydir/spam/module.py
</code></pre>
<p>and <code>mydir</code> is on your path, you can import the code in <code>module.py</code> as</p>
<pre><code>import spam.module
</code></pre>
<p>or </p>
<pre><code>from spam import module
</code></pre>
<p>If you remove the <code>__init__.py</code> file, Python will no longer look for submodules inside that directory, so attempts to import the module will fail.</p>
<p>The <code>__init__.py</code> file is usually empty, but can be used to export selected portions of the package under more convenient name, hold convenience functions, etc.
Given the example above, the contents of the init module can be accessed as </p>
<pre><code>import spam
</code></pre>
<p>based on <a href="http://effbot.org/pyfaq/what-is-init-py-used-for.htm" rel="noreferrer">this</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to labeling a directory as a Python package and defining <code>__all__</code>, <strong><code>__init__.py</code> allows you to define any variable at the package level.</strong> Doing so is often convenient if a package defines something that will be imported frequently, in an API-like fashion. This pattern promotes adherence to the Pythonic "flat is better than nested" philosophy.</p>
<h2>An example</h2>
<p>Here is an example from one of my projects, in which I frequently import a <code>sessionmaker</code> called <code>Session</code> to interact with my database. I wrote a "database" package with a few modules:</p>
<pre><code>database/
    __init__.py
    schema.py
    insertions.py
    queries.py
</code></pre>
<p>My <code>__init__.py</code> contains the following code:</p>
<pre><code>import os

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

engine = create_engine(os.environ['DATABASE_URL'])
Session = sessionmaker(bind=engine)
</code></pre>
<p>Since I define <code>Session</code> here, I can start a new session using the syntax below. This code would be the same executed from inside or outside of the "database" package directory.</p>
<pre><code>from database import Session
session = Session()
</code></pre>
<p>Of course, this is a small convenience -- the alternative would be to define <code>Session</code> in a new file like "create_session.py" in my database package, and start new sessions using:</p>
<pre><code>from database.create_session import Session
session = Session()
</code></pre>
<h2>Further reading</h2>
<p>There is a pretty interesting reddit thread covering appropriate uses of <code>__init__.py</code> here:</p>
<p><a href="http://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/">http://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/</a></p>
<p>The majority opinion seems to be that <code>__init__.py</code> files should be very thin to avoid violating the "explicit is better than implicit" philosophy.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are 2 main reasons for <code>__init__.py</code></p>
<ol>
<li><p>For convenience: the other users will not need to know your functions' exact location in your package hierarchy.</p>
<pre><code>your_package/
  __init__.py
  file1.py/
  file2.py/
    ...
  fileN.py

# in __init__.py
from file1 import *
from file2 import *
...
from fileN import *

# in file1.py
def add():
    pass
</code></pre>
<p>then others can call add() by </p>
<pre><code>from your_package import add
</code></pre>
<p>without knowing file1, like</p>
<pre><code>from your_package.file1 import add
</code></pre></li>
<li><p>If you want something to be initialized; for example, logging (which should be put in the top level):</p>
<pre><code>import logging.config
logging.config.dictConfig(Your_logging_config)
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__init__.py</code> file makes Python treat directories containing it as modules. </p>
<p>Furthermore, this is the first file to be loaded in a module, so you can use it to execute code that you want to run each time a module is loaded, or specify the submodules to be exported.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.3, <code>__init__.py</code> is no longer required to define directories as importable Python packages.</p>
<p>Check <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="noreferrer">PEP 420: Implicit Namespace Packages</a>:</p>
<blockquote>
<p>Native support for package directories that don’t require <code>__init__.py</code> marker files and can automatically span multiple path segments (inspired by various third party approaches to namespace packages, as described in <a href="https://www.python.org/dev/peps/pep-0420/" rel="noreferrer">PEP 420</a>)</p>
</blockquote>
<p>Here's the test:  </p>
<pre><code>$ mkdir -p /tmp/test_init
$ touch /tmp/test_init/module.py /tmp/test_init/__init__.py
$ tree -at /tmp/test_init
/tmp/test_init
├── module.py
└── __init__.py
$ python3

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp')
&gt;&gt;&gt; from test_init import module
&gt;&gt;&gt; import test_init.module

$ rm -f /tmp/test_init/__init__.py
$ tree -at /tmp/test_init
/tmp/test_init
└── module.py
$ python3

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp')
&gt;&gt;&gt; from test_init import module
&gt;&gt;&gt; import test_init.module
</code></pre>
<p>references:<br/>
<a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="noreferrer">https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages</a><br/>
<a href="https://www.python.org/dev/peps/pep-0420/" rel="noreferrer">https://www.python.org/dev/peps/pep-0420/</a><br/>
<a href="https://stackoverflow.com/questions/37139786/is-init-py-not-required-for-packages-in-python-3">Is __init__.py not required for packages in Python 3?</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python the definition of package is very simple. Like Java the hierarchical structure and the directory structure are the same. But you have to have <code>__init__.py</code> in a package. I will explain the <code>__init__.py</code> file with the example below:</p>
<pre><code>package_x/
|--  __init__.py
|--    subPackage_a/
|------  __init__.py
|------  module_m1.py
|--    subPackage_b/
|------  __init__.py
|------  module_n1.py
|------  module_n2.py
|------  module_n3.py
</code></pre>
<p><code>__init__.py</code> can be empty, as long as it exists. It indicates that the directory should be regarded as a package. Of course, <code>__init__.py</code> can also set the appropriate content.</p>
<p>If we add a function in module_n1:</p>
<pre><code>def function_X():
    print "function_X in module_n1"
    return
</code></pre>
<p>After running:</p>
<pre><code>&gt;&gt;&gt;from package_x.subPackage_b.module_n1 import function_X
&gt;&gt;&gt;function_X()

function_X in module_n1 
</code></pre>
<p>Then we followed the hierarchy package and called module_n1 the function. We can use <code>__init__.py</code> in subPackage_b like this:</p>
<pre><code>__all__ = ['module_n2', 'module_n3']
</code></pre>
<p>After running: </p>
<pre><code>&gt;&gt;&gt;from package_x.subPackage_b import * 
&gt;&gt;&gt;module_n1.function_X()

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named module_n1
</code></pre>
<p>Hence using * importing, module package is subject to <code>__init__.py</code> content.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__init__.py</code> will treat the directory it is in as a loadable module.</p>
<p>For people who prefer reading code, I put <a href="https://stackoverflow.com/users/2588818/two-bit-alchemist">Two-Bit Alchemist's</a> comment here.</p>
<pre><code>$ find /tmp/mydir/
/tmp/mydir/
/tmp/mydir//spam
/tmp/mydir//spam/__init__.py
/tmp/mydir//spam/module.py
$ cd ~
$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp/mydir')
&gt;&gt;&gt; from spam import module
&gt;&gt;&gt; module.myfun(3)
9
&gt;&gt;&gt; exit()
$ 
$ rm /tmp/mydir/spam/__init__.py*
$ 
$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp/mydir')
&gt;&gt;&gt; from spam import module
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named spam
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although Python works without an <code>__init__.py</code> file you should still include one.</p>
<p>It specifies a package should be treated as a module, so therefore include it (even if it is empty).</p>
<p><strong>There is also a case where you may actually use an <code>__init__.py</code> file:</strong> </p>
<p><em>Imagine you had the following file structure:</em></p>
<pre><code>main_methods 
    |- methods.py
</code></pre>
<p>And <code>methods.py</code> contained this:</p>
<pre><code>def foo():
    return 'foo'
</code></pre>
<p>To use <code>foo()</code> you would need one of the following:</p>
<pre><code>from main_methods.methods import foo # Call with foo()
from main_methods import methods # Call with methods.foo()
import main_methods.methods # Call with main_methods.methods.foo()
</code></pre>
<p>Maybe there you need (or want) to keep <code>methods.py</code> inside <code>main_methods</code> (runtimes/dependencies for example) but you only want to import <code>main_methods</code>.</p>
<hr/>
<p>If you changed the name of <code>methods.py</code> to <code>__init__.py</code> then you could use <code>foo()</code> by just importing <code>main_methods</code>:</p>
<pre><code>import main_methods
print(main_methods.foo()) # Prints 'foo'
</code></pre>
<p>This works because <code>__init__.py</code> is treated as part of the package.</p>
<hr/>
<p>Some Python packages actually do this.  An example is with <a href="https://docs.python.org/3/library/json.html" rel="noreferrer">JSON</a>, where running <code>import json</code> is actually importing <code>__init__.py</code> from the <code>json</code> package (<a href="https://github.com/python/cpython/tree/3.6/Lib/json" rel="noreferrer">see the package file structure here</a>):</p>
<blockquote>
<p><strong>Source code:</strong> <code>Lib/json/__init__.py</code></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It facilitates importing other python files. When you placed this file in a directory (say stuff)containing other py files, then you can do something like import stuff.other.</p>
<pre><code>root\
    stuff\
         other.py

    morestuff\
         another.py
</code></pre>
<p>Without this <code>__init__.py</code> inside the directory stuff, you couldn't import other.py, because Python doesn't know where the source code for stuff is and unable to recognize it as a package. </p>
</div>
<span class="comment-copy">According to comment below by @Rob_before_edits and <a href="https://stackoverflow.com/questions/37139786">this stackoverflow thread 37139786</a>, it seems that <b>init</b>.py is no longer needed for Python 3.3+.</span>
<span class="comment-copy">What does this mean: "this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path"?</span>
<span class="comment-copy">@CarlG Python searches a <a href="http://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">list of directories</a> to resolve names in, e.g., import statements. Because these can be any directory, and arbitrary ones can be added by the end user, the developers have to worry about directories that happen to share a name with a valid Python module, such as 'string' in the docs example. To alleviate this, it ignores directories which do not contain a file named _ _ init _ _.py (no spaces), even if it is blank.</span>
<span class="comment-copy">@CarlG Try this. Make a directory called 'datetime' and in it make two blank files, the init.py file (with underscores) and datetime.py. Now open an interpreter, import sys, and issue <code>sys.path.insert(0, '/path/to/datetime')</code>, replacing that path with the path to whatever directory you just made. Now try something like <code>from datetime import datetime;datetime.now()</code>. You should get an AttributeError (because it is importing your blank file now). If you were to repeat these steps without creating the blank init file, this would not happen. That's what it's intended to prevent.</span>
<span class="comment-copy">@DarekNędza You've got something set up incorrectly if you can't just open a Python interpreter and issue <code>from datetime import datetime</code> without error. That's good all the way back to version 2.3!</span>
<span class="comment-copy">@SWang: That’s incorrect: <code>builtins</code> lists built-in <i>functions</i> and <i>classes</i>, not built-in modules (cf. <a href="https://docs.python.org/3/tutorial/modules.html#the-dir-function" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#the-dir-function</a>). If you want to list built-in <i>modules</i>, do <code>import sys; print(sys.builtin_module_names)</code> (cf. <a href="https://docs.python.org/3/library/sys.html#sys.builtin_module_names" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.builtin_module_names</a>).</span>
<span class="comment-copy">Update:  The file <code>__init__.py</code> was required under Python 2.X and is still required under Python 2.7.12 (I tested it) but it is no longer required from (allegedly) Python 3.3 onwards, and is not required under Python 3.4.3 (I tested it).  See <a href="http://stackoverflow.com/questions/37139786/">stackoverflow.com/questions/37139786</a> for more details.</span>
<span class="comment-copy">Don't use it.  It is "namespace" package, not a regular package. namespace package is used for very rare use cases.  You may not need to know when use it.  Just use <code>__init__.py</code>.</span>
<span class="comment-copy"><code>engine</code>, <code>sessionmaker</code>, <code>create_engine</code>, and <code>os</code> can all also be imported from <code>database</code> now... seems like you've made a mess of that namespace.</span>
<span class="comment-copy">@ArtOfWarfare, you can use <code>__all__ = [...]</code> to limit what gets imported with <code>import *</code>. But aside from that, yes, you're left with a messy top-level namespace.</span>
<span class="comment-copy">oh, before reading your answer, I thought calling a function explicitly from its location is a good practice.</span>
<span class="comment-copy">It is "namespace" package.  Don't use it for regular package.</span>
<span class="comment-copy">I have the same structure in my project(python 3.4) but i'm not able to make another.py see other.py. How should i make the import? from root.stuff import other? It works in VSCode debug mode but not in command line. Any ideas?</span>
