<div class="post-text" itemprop="text">
<p>I have been asked to simulate rolling two fair dice with sides 1-6. So the possible outcomes are 2-12.</p>
<p>my code is as follows:</p>
<pre><code>def dice(n):
    x=random.randint(1,6)
    y=random.randint(1,6)
    for i in range(n):
        z=x+y
    return z
</code></pre>
<p>My problem is that this is only returning the outcome of rolling the dice 1 time, so the outcome is always 2-12. I want it to return the sum of rolling the dice (n) times. </p>
<p>Does anyone have any suggestions for me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Roll the dice <em>in the loop</em>:</p>
<pre><code>def dice(n):
    total = 0
    for i in range(n):
        total += random.randint(1, 6)
    return total
</code></pre>
<p>The <code>+=</code> augmented assignment operator basically comes down to the same thing as <code>total = total + random.randint(1, 6)</code> when summing integers (it is slightly more complicated than that, but that only matters for mutable objects like lists).</p>
<p>You could even use a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a> and the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum()</code> function</a>:</p>
<pre><code>def dice(n):
    return sum(random.randint(1, 6) for _ in range(n))
</code></pre>
<p>This basically does the same thing as the <code>for</code> loop in the first example; loop <code>n</code> times, summing up that many random numbers between 1 and 6 inclusive.</p>
<p>If instead of rolling <code>n</code> times, you need to produce <code>n</code> results of 2 dice rolls, you still need to roll in the loop, and you need to add the results to a list:</p>
<pre><code>def dice(n):
    rolls = []
    for i in range(n):
        two_dice = random.randint(1, 6) + random.randint(1, 6)
        rolls.append(two_dice)
    return rolls
</code></pre>
<p>This too can be written out more compactly, with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>def dice(n):
    return [random.randint(1, 6) + random.randint(1, 6) for _ in range(n)]
</code></pre>
<p>You could also use <code>random.choice()</code> from a list of generated sums; these are automatically weighted correctly; this basically pre-computes the 36 possible dice values (11 unique), each with equal probability:</p>
<pre><code>from itertools import product

two_dice_sums = [a + b for a, b in product(range(1, 7), repeat=2)]

def dice(n):
    return [random.choice(two_dice_sums) for _ in range(n)]
</code></pre>
<p>Either way, you'll get a list with <code>n</code> results:</p>
<pre><code>&gt;&gt;&gt; dice(5)
[10, 11, 6, 11, 4]
&gt;&gt;&gt; dice(10)
[3, 7, 10, 3, 6, 6, 6, 11, 9, 3]
</code></pre>
<p>You could pass the list to the <code>print()</code> function to have these printed on one line, or on separate lines:</p>
<pre><code>&gt;&gt;&gt; print(*dice(5))
3 7 8 6 4
&gt;&gt;&gt; print(*dice(5), sep='\n')
7
8
7
8
6
</code></pre>
</div>
<span class="comment-copy">okay, let me rephrase my original question, instead of returning the sum of the dice rolled (n) times, i need the sum of the 2 dice to be printed for each roll. so if the dice are being rolled (n=10) times then the function needs to return something like 10,8,9,7,4,10,12,6,3,5</span>
<span class="comment-copy">@A.Boland: <i>returned</i>, or <i>printed</i>? There is a big difference.</span>
