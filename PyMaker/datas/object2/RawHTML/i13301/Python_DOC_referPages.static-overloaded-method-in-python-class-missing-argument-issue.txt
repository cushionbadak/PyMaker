<div class="post-text" itemprop="text">
<p>I have a class <code>db</code> defined like so:</p>
<pre><code>class db:

    def __init_(self, idx, host, port, db_name, user, password):
        self.idx = idx
        ...

    def Connect(self):
        conn = db_engine.connect(host=self.host, ...)

    @staticmethod
    def Connect(idx):
        if idx == 1:
            d = db(1, "localhost", 80, ...)
            conn = d.Connect()
        return conn
</code></pre>
<p>So, as you can see, my class has two methods. Most importantly it has a static method <code>Connect</code> which internally tries to call a non-static method <code>Connect</code>. However, when I try to use my program, I get an error message:</p>
<blockquote>
<p>d.Connect()</p>
<p>TypeError: Connect() missing 1 required positional argument ...</p>
</blockquote>
<p>It seems like the static method tries to call itself, however I want to make it call another non-static method. So, what am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>redefined</em> the <code>Count</code> method. Python doesn't support overloading; you cannot define both a regular method and a static method. You <em>only</em> have the <code>staticmethod</code> version because it was defined last, it replaced the non-static version altogether.</p>
<p>If you need a method that alters its behaviour based on wether or not it is bound (static vs. a regular method) you have two options; either test the type of the <code>self</code> argument (it'll be an integer or an instance of the <code>db</code> class), or you'll have to build a custom <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor object</a> that can alter how your method is called based on the context; on an instance or on the class.</p>
<p>Testing the type of <code>self</code> looks like this:</p>
<pre><code>class db:
    def __init_(self, idx, host, port, db_name, user, password):
        self.idx = idx
        # ...

    def Connect(self_or_idx):
        if isinstance(self_or_idx, db):
            self = self_or_idx
            conn = db_engine.connect(host=self.host, ...)
            # ...
        else:
            idx = self_or_idx
            if idx == 1:
                d = db(1, "localhost", 80, ...)
                conn = d.Connect()
            return conn
</code></pre>
<p>If using a custom descriptor, you could build one that supports two different functions <a href="https://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work">like the <code>property</code> object does</a>:</p>
<pre><code>class static_or_instance_method(object):
    def __init__(self, instancemethod=None, staticmethod=None):
        self.method = instancemethod
        self.static = staticmethod

    def staticmethod(self, staticmethod):
        return type(self)(self.method, staticmethod)

    def instancemethod(self, instancemethod):
        return type(self)(instancemethod, self.static)

    def __get__(self, instance, cls=None):
        if instance is None:
            return self.static
        return self.method.__get__(instance, cls)
</code></pre>
<p>then use it like this:</p>
<pre><code>class db:
    def __init_(self, idx, host, port, db_name, user, password):
        self.idx = idx
        # ...

    @static_or_instance_method
    def Connect(self):
        conn = db_engine.connect(host=self.host, ...)
        # ...

    @Connect.staticmethod
    def Connect(idx):
        if idx == 1:
            d = db(1, "localhost", 80, ...)
            conn = d.Connect()
        return conn
</code></pre>
<p>Quick demo of the descriptor:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     @static_or_instance_method
...     def bar(self):
...         return 'Bound method of {}'.format(self)
...     @bar.staticmethod
...     def bar(arg):
...         return 'Static method, receiving argument {}'.format(arg)
... 
&gt;&gt;&gt; Foo().bar()
'Bound method of &lt;__main__.Foo object at 0x10b6cf588&gt;'
&gt;&gt;&gt; Foo.bar('spam')
'Static method, receiving argument spam'
</code></pre>
</div>
<span class="comment-copy">BTW. There is a small error. In <code>else</code> block <code>d</code> should be returned, not <code>conn</code></span>
<span class="comment-copy">@Jacobian: I based this directly on your own <code>staticmethod</code> code in your question. Besides, for the problem at hand (how to handle calling the method on the class or on an instance) it hardly matters what exactly is returned here. :-)</span>
