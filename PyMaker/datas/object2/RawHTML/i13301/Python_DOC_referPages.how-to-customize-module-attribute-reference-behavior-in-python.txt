<div class="post-text" itemprop="text">
<p>How can implement the equivalent of a <code>__getattr__</code> on a class, on a module?</p>
<h2>Example</h2>
<p>When calling a function that does not exist in a module's statically defined attributes, I wish to create an instance of a class in that module, and invoke the method on it with the same name as failed in the attribute lookup on the module.</p>
<pre><code>class A(object):
    def salutation(self, accusative):
        print "hello", accusative

# note this function is intentionally on the module, and not the class above
def __getattr__(mod, name):
    return getattr(A(), name)

if __name__ == "__main__":
    # i hope here to have my __getattr__ function above invoked, since
    # salutation does not exist in the current namespace
    salutation("world")
</code></pre>
<p>Which gives:</p>
<pre><code>matt@stanley:~/Desktop$ python getattrmod.py 
Traceback (most recent call last):
  File "getattrmod.py", line 9, in &lt;module&gt;
    salutation("world")
NameError: name 'salutation' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://mail.python.org/pipermail/python-dev/2009-May/089535.html" rel="noreferrer">A while ago, Guido declared that all special method lookups on
new-style classes bypass <code>__getattr__</code> and <code>__getattribute__</code></a>. Dunder methods had previously worked on modules - you could, for example, use a module as a context manager simply by defining <code>__enter__</code> and <code>__exit__</code>, before those tricks <a href="https://bugs.python.org/issue12022" rel="noreferrer">broke</a>.</p>
<p>Recently some historical features have made  a comeback, the module <code>__getattr__</code> among them, and so the existing hack (a module replacing itself with a class in <code>sys.modules</code> at import time) should be no longer necessary.</p>
<p>In Python 3.7+, you just use the one obvious way.  To customize attribute access on a module, define a <code>__getattr__</code> function at the module level which should accept one argument (name of attribute), and return the computed value or raise an <code>AttributeError</code>:</p>
<pre><code># my_module.py

def __getattr__(name: str) -&gt; Any:
    ...
</code></pre>
<p>This will also allow hooks into "from" imports, i.e. you can return dynamically generated objects for statements such as <code>from my_module import whatever</code>.</p>
<p>On a related note, along with the module getattr you may also define a <code>__dir__</code> function at module level to respond to <a href="https://docs.python.org/3/library/functions.html#dir" rel="noreferrer"><code>dir(my_module)</code></a>. See <a href="https://www.python.org/dev/peps/pep-0562/" rel="noreferrer">PEP 562</a> for details.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two basic problems you are running into here:</p>
<ol>
<li><code>__xxx__</code> methods are only looked up on the class</li>
<li><code>TypeError: can't set attributes of built-in/extension type 'module'</code></li>
</ol>
<p>(1) means any solution would have to also keep track of which module was being examined, otherwise <em>every</em> module would then have the instance-substitution behavior; and (2) means that (1) isn't even possible... at least not directly.</p>
<p>Fortunately, sys.modules is not picky about what goes there so a wrapper will work, but only for module access (i.e. <code>import somemodule; somemodule.salutation('world')</code>; for same-module access you pretty much have to yank the methods from the substitution class and add them to <code>globals()</code> eiher with a custom method on the class (I like using <code>.export()</code>) or with a generic function (such as those already listed as answers).  One thing to keep in mind: if the wrapper is creating a new instance each time, and the globals solution is not, you end up with subtly different behavior.  Oh, and you don't get to use both at the same time -- it's one or the other.</p>
<hr/>
<p><strong>Update</strong></p>
<p>From <a href="http://mail.python.org/pipermail/python-ideas/2012-May/014969.html" rel="nofollow noreferrer">Guido van Rossum</a>:</p>
<blockquote>
<p>There is actually a hack that is occasionally used and recommended: a
  module can define a class with the desired functionality, and then at
  the end, replace itself in sys.modules with an instance of that class
  (or with the class, if you insist, but that's generally less useful).
  E.g.:</p>
</blockquote>
<pre><code># module foo.py

import sys

class Foo:
    def funct1(self, &lt;args&gt;): &lt;code&gt;
    def funct2(self, &lt;args&gt;): &lt;code&gt;

sys.modules[__name__] = Foo()
</code></pre>
<blockquote>
<p>This works because the import machinery is actively enabling this
  hack, and as its final step pulls the actual module out of
  sys.modules, after loading it. (This is no accident. The hack was
  proposed long ago and we decided we liked enough to support it in the
  import machinery.)</p>
</blockquote>
<p>So the established way to accomplish what you want is to create a single class in your module, and as the last act of the module replace <code>sys.modules[__name__]</code> with an instance of your class -- and now you can play with <code>__getattr__</code>/<code>__setattr__</code>/<code>__getattribute__</code> as needed.</p>
<p>Note that if you use this functionality anything else in the module, such as globals, other functions, etc., will be lost when the <code>sys.modules</code> assignment is made -- so make sure everything needed is inside the replacement class.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a hack, but you can wrap the module with a class:</p>
<pre><code>class Wrapper(object):
  def __init__(self, wrapped):
    self.wrapped = wrapped
  def __getattr__(self, name):
    # Perform custom logic here
    try:
      return getattr(self.wrapped, name)
    except AttributeError:
      return 'default' # Some sensible default

sys.modules[__name__] = Wrapper(sys.modules[__name__])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We don't usually do it that way.  </p>
<p>What we do is this.</p>
<pre><code>class A(object):
....

# The implicit global instance
a= A()

def salutation( *arg, **kw ):
    a.salutation( *arg, **kw )
</code></pre>
<p>Why?  So that the implicit global instance is visible.</p>
<p>For examples, look at the <code>random</code> module, which creates an implicit global instance to slightly simplify the use cases where you want a "simple" random number generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Similar to what @Håvard S proposed, in a case where I needed to implement some magic on a module (like <code>__getattr__</code>), I would define a new class that inherits from <code>types.ModuleType</code> and put that in <code>sys.modules</code> (probably replacing the module where my custom <code>ModuleType</code> was defined).</p>
<p>See the main <a href="https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/__init__.py" rel="noreferrer"><code>__init__.py</code></a> file of <a href="http://werkzeug.pocoo.org/" rel="noreferrer">Werkzeug</a> for a fairly robust implementation of this.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is hackish, but...</p>
<pre><code>import types

class A(object):
    def salutation(self, accusative):
        print "hello", accusative

    def farewell(self, greeting, accusative):
         print greeting, accusative

def AddGlobalAttribute(classname, methodname):
    print "Adding " + classname + "." + methodname + "()"
    def genericFunction(*args):
        return globals()[classname]().__getattribute__(methodname)(*args)
    globals()[methodname] = genericFunction

# set up the global namespace

x = 0   # X and Y are here to add them implicitly to globals, so
y = 0   # globals does not change as we iterate over it.

toAdd = []

def isCallableMethod(classname, methodname):
    someclass = globals()[classname]()
    something = someclass.__getattribute__(methodname)
    return callable(something)


for x in globals():
    print "Looking at", x
    if isinstance(globals()[x], (types.ClassType, type)):
        print "Found Class:", x
        for y in dir(globals()[x]):
            if y.find("__") == -1: # hack to ignore default methods
                if isCallableMethod(x,y):
                    if y not in globals(): # don't override existing global names
                        toAdd.append((x,y))


for x in toAdd:
    AddGlobalAttribute(*x)


if __name__ == "__main__":
    salutation("world")
    farewell("goodbye", "world")
</code></pre>
<p>This works by iterating over the all the objects in the global namespace. If the item is a class, it iterates over the class attributes. If the attribute is callable it adds it to the global namespace as a function. </p>
<p>It ignore all attributes which contain "__".</p>
<p>I wouldn't use this in production code, but it should get you started.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's my own humble contribution -- a slight embellishment of @Håvard S's highly rated answer, but a bit more explicit (so it might be acceptable to @S.Lott, even though probably not good enough for the OP):</p>
<pre><code>import sys

class A(object):
    def salutation(self, accusative):
        print "hello", accusative

class Wrapper(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped

    def __getattr__(self, name):
        try:
            return getattr(self.wrapped, name)
        except AttributeError:
            return getattr(A(), name)

_globals = sys.modules[__name__] = Wrapper(sys.modules[__name__])

if __name__ == "__main__":
    _globals.salutation("world")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create your module file that has your classes. Import the module. Run <code>getattr</code> on the module you just imported. You can do a dynamic import using <code>__import__</code> and pull the module from sys.modules.</p>
<p>Here's your module <code>some_module.py</code>:</p>
<pre><code>class Foo(object):
    pass

class Bar(object):
    pass
</code></pre>
<p>And in another module:</p>
<pre><code>import some_module

Foo = getattr(some_module, 'Foo')
</code></pre>
<p>Doing this dynamically:</p>
<pre><code>import sys

__import__('some_module')
mod = sys.modules['some_module']
Foo = getattr(mod, 'Foo')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In some circumstances the <code>globals()</code> dictionary can suffice, for example you can instantiate a class by name from the global scope:</p>
<pre><code>from somemodule import * # imports SomeClass

someclass_instance = globals()['SomeClass']()
</code></pre>
</div>
<span class="comment-copy">I'll likely go with grieve's answer, as it works in all circumstances (albeit it's a bit messy and could be done better). Harvard S and S Lott have nice clean answers but they're not practical solutions.</span>
<span class="comment-copy">You aren't in your case even making an attribute access, so you are asking for two different things at once. So the major question is which one you want. Do you want <code>salutation</code> to exist in the global or local namespace (which is what the code above is trying to do) or do you want dynamic lookup of names when you make a dot access on a module? It's two different things.</span>
<span class="comment-copy">Interesting question, how did you come up with this?</span>
<span class="comment-copy">One of Python's mantras is "explicit is better than implicit". I think S.Lott's solution is the best under that reasoning.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1024455/autoload-in-python">Autoload in Python</a></span>
<span class="comment-copy">OP actually changed the accepted answer as time went on and the language got updated? Am I on the right site?</span>
<span class="comment-copy">Correct.  See the <a href="https://stackoverflow.com/posts/2447353/timeline">timeline</a>.</span>
<span class="comment-copy"><i>This works because the import machinery is actively enabling this hack, and as its final step pulls the actual module out of sys.modules, after loading it</i> Is it mentioned somewhere in the docs?</span>
<span class="comment-copy">Now I feel more at ease using this hack, considering it "semi-sanctioned" :)</span>
<span class="comment-copy">This is doing screwy things, like making <code>import sys</code> give <code>None</code> for <code>sys</code>. I'm guessing this hack isn't sanctioned in Python 2.</span>
<span class="comment-copy">@asmeurer: To understand the reason for that (and a solution) see  the question <a href="http://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name">Why is the value of __name__ changing after assignment to sys.modules[__name__]?</a>.</span>
<span class="comment-copy">@qarma:  I seem to recall some enhancements being talked about that would allow python modules to more directly participate in the class inheritance model, but even so this method still works and is supported.</span>
<span class="comment-copy">nice and dirty :D</span>
<span class="comment-copy">That may work but it's probably not a solution to the real problem of the author.</span>
<span class="comment-copy">"May work" and "probably not" isn't very helpful. It's a hack/trick, but it works, and solves the problem posed by the question.</span>
<span class="comment-copy">While this will work in <i>other</i> modules that import your module and access nonexistent attributes on it, it won't work for the actual code example here.  Accessing globals() does not go through sys.modules.</span>
<span class="comment-copy">Unfortunately this doesn't work for the current module, or likely for stuff accessed after an <code>import *</code>.</span>
<span class="comment-copy">If you're <i>really</i> ambitious, you could create the class, and iterate through all its methods and create a module-level function for each method.</span>
<span class="comment-copy">@Paul Fisher: Per the problem, the class already exists.  Exposing all methods of the class might not be a good idea.  Usually these exposed methods are "convenience" methods.  Not all are appropriate for the implicit global instance.</span>
<span class="comment-copy">I prefer Håvard S's answer to mine, as it appears much cleaner, but this directly answers the question as asked.</span>
<span class="comment-copy">This is a lot closer to what I eventually went with. It's a little messy, but works with globals() correctly within the same module.</span>
<span class="comment-copy">Seems to me like this answer isn't quite what was asked for which was "When calling a function that does not exist in a module's statically defined attributes" because it's doing it's work unconditionally and adding every possible class method. That could be fixed by using to a module wrapper that only does the <code>AddGlobalAttribute()</code> when there's a module level <code>AttributeError</code> -- kind of the reverse of @Håvard S's logic. If I have a chance I'll test this out and add my own hybrid answer even though the OP has accepted this answer already.</span>
<span class="comment-copy">Update to my previous comment. I now understand that it's very hard (impssoble?) to intercept <code>NameError</code> exceptions for the global (module) namespace -- which explains why this answer adds callables for every possiblity it finds to the current global namespace to cover every possible case ahead of time.</span>
<span class="comment-copy">You're answering a different question here.</span>
<span class="comment-copy">But this doesn't let you add <code>__getattr__</code> to the lookup?</span>
