<div class="post-text" itemprop="text">
<pre><code># Simple Bmi Calculator
# Weight (KG) / Height (M) then Answer / Height (m) = BMI


print("Hello, today we will calculate your Body Mass Index")

weight = input("How many kilo's do you weigh? ")  
weight = int  
height = input("What is your height in metres? ")  
height = int 
bmi = (weight / height / height)  
bmi = int

print("Thank you, your Body Mass Index is ")  
print(bmi)

input("\n\nPress the enter key to exit")
</code></pre>
<p>In the above it is likely that the height in metres will be entered as a float number (ie. 1.8) so having declared 'bmi = int' and 'height = int' will the end bmi still produce a float number if necessary? </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. If you add a floating point to an <code>int</code>, then the <code>int</code> is <em>promoted</em> to a floating point <em>before</em> the addition takes place.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, when you perform an operation with a float and an int that would return a float, Python will automatically handle returning a float.</p>
<p>For instance:</p>
<pre><code>&gt;&gt;&gt; my_int = 10000
&gt;&gt;&gt; my_float = 10000.10000
&gt;&gt;&gt; dis.dis('my_int + my_float')
  1           0 LOAD_NAME                0 (my_int)
              3 LOAD_NAME                1 (my_float)
              6 BINARY_ADD
              7 RETURN_VALUE
</code></pre>
<p>here we can see the bytecode instructions for adding an <code>int</code> and a <code>float</code>.</p>
<p>The <a href="https://docs.python.org/3/library/dis.html#opcode-BINARY_ADD" rel="nofollow"><code>BINARY_ADD</code></a> operation is what we're interested in digging into. </p>
<p>From the <a href="https://github.com/python/cpython/blob/3.4/Python/ceval.c#L1545-L1563" rel="nofollow">source of Python 3.4</a> we can see the following operation:</p>
<pre><code>    TARGET(BINARY_ADD) {
        PyObject *right = POP();
        PyObject *left = TOP();
        PyObject *sum;
        if (PyUnicode_CheckExact(left) &amp;&amp;
                 PyUnicode_CheckExact(right)) {
            sum = unicode_concatenate(left, right, f, next_instr);
            /* unicode_concatenate consumed the ref to v */
        }
        else {
            sum = PyNumber_Add(left, right);
            Py_DECREF(left);
        }
        Py_DECREF(right);
        SET_TOP(sum);
        if (sum == NULL)
            goto error;
        DISPATCH();
    }
</code></pre>
<p>And following <a href="https://github.com/python/cpython/blob/22f6e423198005843be05e82faa1218c2d3f37eb/Objects/abstract.c#L888-L901" rel="nofollow"><code>PyNumber_Add</code></a>: </p>
<pre><code>PyObject *
PyNumber_Add(PyObject *v, PyObject *w)
{
    PyObject *result = binary_op1(v, w, NB_SLOT(nb_add));
    if (result == Py_NotImplemented) {
        PySequenceMethods *m = v-&gt;ob_type-&gt;tp_as_sequence;
        Py_DECREF(result);
        if (m &amp;&amp; m-&gt;sq_concat) {
            return (*m-&gt;sq_concat)(v, w);
        }
        result = binop_type_error(v, w, "+");
    }
    return result;
}
</code></pre>
<p>To <a href="https://github.com/python/cpython/blob/3.4/Objects/abstract.c#L702-L737" rel="nofollow"><code>binary_op1</code></a> </p>
<pre><code>...
    if (v-&gt;ob_type-&gt;tp_as_number != NULL)
        slotv = NB_BINOP(v-&gt;ob_type-&gt;tp_as_number, op_slot);
...
</code></pre>
<p>at this point, we could continue tracking down those arguments passed to <a href="https://github.com/python/cpython/blob/3.4/Objects/abstract.c#L687-L688" rel="nofollow"><code>NB_BINOP</code></a> or hop over to the <a href="https://docs.python.org/3/c-api/typeobj.html#c.tp_as_number" rel="nofollow">documentation of the C-API</a>.</p>
<p>From here, we have a pretty good reason to believe this is what we're looking for:</p>
<blockquote>
<p>This function is used by PySequence_Concat() and has the same
  signature. It is also used by the + operator, after trying the numeric
  addition via the nb_add slot.</p>
</blockquote>
<p>We can then hop back in and look for our <code>nb_add</code> call, ending up at a <a href="https://github.com/python/cpython/blob/3.4/Objects/floatobject.c#L1787-L1788" rel="nofollow">float_as_number</a> variable.  Following that <a href="https://github.com/python/cpython/blob/3.4/Objects/floatobject.c#L494-L504" rel="nofollow"><code>float_add</code></a> will direct us to the following:</p>
<pre><code>static PyObject *
float_add(PyObject *v, PyObject *w)
{
    double a,b;
    CONVERT_TO_DOUBLE(v, a);
    CONVERT_TO_DOUBLE(w, b);
    PyFPE_START_PROTECT("add", return 0)
    a = a + b;
    PyFPE_END_PROTECT(a)
    return PyFloat_FromDouble(a);
}
</code></pre>
<p>where we can see that the passed arguments are passed to a <code>CONVERT_TO_DOUBLE</code> function.  From here, we can see the <a href="https://github.com/python/cpython/blob/3.4/Objects/floatobject.c#L235-L267" rel="nofollow">conversion if the value wasn't a float</a>:</p>
<pre><code>#define CONVERT_TO_DOUBLE(obj, dbl)                     \
    if (PyFloat_Check(obj))                             \
        dbl = PyFloat_AS_DOUBLE(obj);                   \
    else if (convert_to_double(&amp;(obj), &amp;(dbl)) &lt; 0)     \
        return obj;
</code></pre>
</div>
<span class="comment-copy">Why not just try it and see?</span>
<span class="comment-copy"><code>bmi = int</code> doesn't "force" bmi to forever be an integer or anything. It just points <code>bmi</code> at the int class, and doing it <i>after</i> your regular assignment will just make your code break. There's no way to permanently prescribe the type of a variable name.</span>
<span class="comment-copy">Thank you! ps. I couldn't try it as we do not have access to command line at work and the online interpreters I tried wouldn't run it!</span>
