<div class="post-text" itemprop="text">
<pre><code>def k_comp(n):
  n_new = 0
  if n == 0:
      n_new = 2
  if n == 1:
      n_new == 1
  if n &gt; 1:
      n_new = (k_comp(n-1) + k_comp(n-2))**2
  return n_new

def Kseq(start, stop, step):
""" (int,int,int) -&gt; list of integers
Kseq(0,6,1)---&gt;
[2, 1, 9, 100, 11881, 143544361]
Kseq(2,6,2)----&gt;
[9, 11881]


"""

  final_list = []
  append_this = 0
  for i in range (start,stop,step):
      append_this = k_comp(i)
      final_list.append(append_this)

  return final_list

print(Kseq(0,6,1))
</code></pre>
<p>Instead of the expected output it prints: [2, 0, 4, 16, 144, 16384]</p>
<p>The code is supposed to do this:
Input: This function is passed start (&gt;= 0), stop (&gt;start), and step (&gt;= 1) values that define a sequence of numbers.
    Output: This function returns a list of the corresponding K sequence.
The k sequence is k(n) = (k(n-1) + k(n-2))^2</p>
</div>
<div class="post-text" itemprop="text">
<p>You have mixed up assignment and equality in k_comp</p>
<p>You have:</p>
<pre><code>if n == 1:
   n_new == 1
</code></pre>
<p>You should have:</p>
<pre><code> if n == 1:
     n_new = 1
</code></pre>
<p>Single '=' means assign the value on the right to the variable on the left.</p>
<p>Double '==' means is the left value and the right value equal. In this case it will be going no it isn't equal therefore False. False is a valid python statement; it just won't be doing what you expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is with your second <code>if</code> condition in <code>k_comp()</code>, <code>==</code> is an equality test:</p>
<pre><code>if n == 1:
    n_new == 1
</code></pre>
<p>This leaves <code>n_new = 0</code>, so I assume you meant:</p>
<pre><code>if n == 1:
    n_new = 1
</code></pre>
<p>After making the change:</p>
<pre><code>In []:
Kseq(0, 6, 1)

Out[]:
[2, 1, 9, 100, 11881, 143544361]
</code></pre>
<p>Note: This is going to be very inefficient because it calculates <code>k_comp(k)</code> multiple times, you can just construct the sequence of <code>k</code>, e.g.:</p>
<pre><code>def k_seq():
    k = [2, 1]
    for _ in range(2, n):
        k.append((k[-1] + k[-2])**2)
    return k

def Kseq(start, stop, step):
    return k_seq(stop)[start::step]

In []
Kseq(0, 6, 1)

Out[]:
[2, 1, 9, 100, 11881, 143544361]

In []:
Kseq(2, 6, 2)

Out[]:
[9, 11881]
</code></pre>
<p>Difference in timing:</p>
<pre><code>In []:
%timeit Kseq_recursive(0, 10, 1)

Out[]:
75.8 µs ± 1.28 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)

In []:
%timeit Kseq_sequence(0, 10, 1)

Out[]:
4.39 µs ± 77.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<p>Or as a generator</p>
<pre><code>import itertools as it

def k_gen():
    kprime, k = 2, 1
    yield from (kprime, k)
    while True:
        kprime, k = k, (kprime + k)**2
        yield k

def Kseq(start, stop, step):
    return list(it.islice(k_gen(), start, stop, step))

In []:
Kseq(0, 6, 1)

Out[]:
[2, 1, 9, 100, 11881, 143544361]
</code></pre>
</div>
<span class="comment-copy">Please fix your indentation.</span>
<span class="comment-copy"><i>you</i> made the logic error, not your program :D</span>
<span class="comment-copy">AChampion It works now! Thank you so much!!</span>
