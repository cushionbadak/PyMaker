<div class="post-text" itemprop="text">
<p>I have written a simple python program:</p>
<pre><code>#!/usr/bin/env python3.5
import sys, itertools

sCharacters = '123'
for iCombinationLength in range(0, len(sCharacters)+1):
  for aCombination in itertools.combinations_with_replacement(sCharacters, iCombinationLength):
    print(''.join(aCombination))
</code></pre>
<p>This outputs the following:</p>
<pre><code>1
2
3
11
12
13
22
23
33
111
112
113
122
123
133
222
223
233
333
</code></pre>
<p>However for it to be all combinations of the numbers 1 2 and 3, it would need to include:</p>
<pre><code>311
312
313
321
322
323
331
332
333
</code></pre>
<p>And as you can see above, it does not.  I have seen other posts giving the  combinations_with_replacement function given as the solution to get all possible combinations of the characters passed in.  Yet this does not seem to be happening.  What am I doing wrong here, and how can I get all possible combinations of the characters in the characters variable?</p>
<p>Thanks for your time ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>"combinations" is an order-insensitive term; if you have <code>113</code>, then you don't need <code>131</code> or <code>311</code>, because all of them are the same "combination" (if the input sequence to <code>combinations_with_replacement</code> is unique, you could view the outputs as being all unique values after converting to <code>collections.Counter</code>; regardless of order, two <code>1</code>s and a <code>3</code> is just <code>collections.Counter({1: 2, 3:1})</code>).</p>
<p>If you want an order sensitive version of <code>combinations_with_replacement</code> (so <code>113</code>, <code>131</code> and <code>311</code> are all separate outputs), use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> with the <code>repeat</code> argument (<code>repeat</code> must be passed by keyword due to design of <code>product</code>, where it takes variable length positional arguments):</p>
<pre><code>sCharacters = '123'
for iCombinationLength in range(0, len(sCharacters)+1):
  for aCombination in itertools.product(sCharacters, repeat=iCombinationLength):
    print(''.join(aCombination))
</code></pre>
</div>
<span class="comment-copy">Perfect!! thanks for the solution, much appreciated.</span>
<span class="comment-copy">If you want to know more about what <code>itertools.product</code> is actually doing, read about <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow noreferrer">Cartesian products</a>.</span>
