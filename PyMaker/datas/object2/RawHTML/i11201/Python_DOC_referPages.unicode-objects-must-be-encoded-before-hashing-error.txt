<div class="post-text" itemprop="text">
<p>Questions dealing with similar issues: <a href="https://stackoverflow.com/questions/7585307/typeerror-unicode-objects-must-be-encoded-before-hashing">SO 1</a>, <a href="https://stackoverflow.com/questions/13265439/python-3-3-unicode-objects-must-be-encoded-before-hashing">SO 2</a>, <a href="https://stackoverflow.com/questions/37640868/python-3-4-error-unicode-objects-must-be-encoded-before-hashing">SO 3</a>.</p>
<p>I've tried their answers, encoding pretty much any string to <code>utf-8</code>, but <code>hmac</code> still tells me to encode my unicoe chars. The biggest problem is that I can't even identify the offending variable; print outputs tell me they're either <code>strings</code> or <code>bytes</code>; in the case of the former I attach <code>.encode()</code>, but that hasn't helped. </p>
<p>I'm trying to query the GDAX API and am also <a href="https://docs.gdax.com/?python#generating-an-api-key" rel="nofollow noreferrer">using the code as given on their API page</a>. Being written for Python2.7, I figured there might be issues with encoding and all, but this is just not making sense to me.</p>
<p>My code:</p>
<pre><code>class CoinbaseExchangeAuth(AuthBase):
    def __init__(self, api_key, secret_key, passphrase):
        self.api_key = api_key.encode()
        self.secret_key = secret_key.encode()
        self.passphrase = passphrase.encode()

    def __call__(self, request):
        timestamp = str(time.time())
        message = timestamp + request.method + request.path_url + (request.body or '')
        hmac_key = base64.b64decode(self.secret_key)
    #print(hmac_key, type(hmac_key))
    #print(message, type(message))
    signature = hmac.new(hmac_key, message, hashlib.sha256)

    signature_b64 = signature.digest().encode('base64').rstrip('\n')


    request.headers.update({
        'CB-ACCESS-SIGN': signature_b64,
        'CB-ACCESS-TIMESTAMP': timestamp,
        'CB-ACCESS-KEY': self.api_key,
        'CB-ACCESS-PASSPHRASE': self.passphrase,
        'Content-Type': 'application/json'
    })
    return request
</code></pre>
<p>The error:</p>
<pre><code>File "F:\git\knowhere\Private\bitex-crawler\gdax_client\gdaxex\api.py", line 47, in __call__
signature = hmac.new(hmac_key, message, hashlib.sha256)
File "C:\Users\nls\Anaconda3\lib\hmac.py", line 144, in new
return HMAC(key, msg, digestmod)
File "C:\Users\nls\Anaconda3\lib\hmac.py", line 84, in __init__
self.update(msg)
File "C:\Users\nls\Anaconda3\lib\hmac.py", line 93, in update
self.inner.update(msg)
TypeError: Unicode-objects must be encoded before hashing
</code></pre>
<p>When I type check the objects I feed to my <code>hmac.new()</code> call, it tells me I have a <code>str</code> object and a <code>bytes</code> object.</p>
<pre><code>print(type(hmac_key)) # &lt;bytes&gt;
print(type(message))  # &lt;str&gt;
</code></pre>
<p>Naturally, I thought I need to encode that sucker too:</p>
<pre><code>signature = hmac.new(hmac_key, message.encode(), hashlib.sha256)
</code></pre>
<p>which resulted in an error on this line:</p>
<pre><code>signature_b64 = signature.digest().encode('base64').rstrip('\n')
</code></pre>
<p>namely:</p>
<pre><code>File "F:/git/knowhere/Private/bitex-crawler/gdax_client/client.py",
[..]
File "F:\git\knowhere\Private\bitex-crawler\gdax_client\gdaxex\api.py", line 123, in _query
r = api_query(url, json=req, auth=auth)
File "C:\Users\nls\Anaconda3\lib\site-packages\requests\api.py", line 67, in get
return request('get', url, params=params, **kwargs)
File "C:\Users\nls\Anaconda3\lib\site-packages\requests\api.py", line 53, in request
return session.request(method=method, url=url, **kwargs)
File "C:\Users\nls\Anaconda3\lib\site-packages\requests\sessions.py", line 454, in request
prep = self.prepare_request(req)
File "C:\Users\nls\Anaconda3\lib\site-packages\requests\sessions.py", line 388, in prepare_request
hooks=merge_hooks(request.hooks, self.hooks),
File "C:\Users\nls\Anaconda3\lib\site-packages\requests\models.py", line 297, in prepare
self.prepare_auth(auth, url)
File "C:\Users\nls\Anaconda3\lib\site-packages\requests\models.py", line 490, in prepare_auth
r = auth(self)
File "F:\git\knowhere\Private\bitex-crawler\gdax_client\gdaxex\api.py", line 49, in __call__
signature_b64 = signature.digest().encode('base64').rstrip('\n')
AttributeError: 'bytes' object has no attribute 'encode'
</code></pre>
<p>..So I can't have unencoded unicode objects, but I cant have bytes later on either? How on earth do I fix this? Appreciating any help on this, because I'm profoundly confused.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/hashlib.html#module-hashlib" rel="nofollow">"Parameter msg can be of any type supported by hashlib."</a>.</p>
<p><a href="https://docs.python.org/3/library/hashlib.html#module-hashlib" rel="nofollow">"Note: Feeding string objects into  is not supported, as hashes work on bytes, not on characters."</a>.</p>
<p>Thus, your message must be of type <code>bytes</code>. Use <code>.encode()</code> on the message wich will give you the bytes object.</p>
<p>Note: This is only necessary for python 3!</p>
<p>To encode the digest to base64 use the <a href="https://docs.python.org/2/library/base64.html" rel="nofollow">base64 library</a>.</p>
<pre><code>import base64
signature_b64 = base64.b64encode(signature.digest())
</code></pre>
</div>
<span class="comment-copy">Looks like you are using python-2-only libraries with python 3. If there's no python 3 version, you have to port the third party code yourself (or switch to python 2.7) This guide should explain why you get these errors and how they can be solved. <a href="https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data" rel="nofollow noreferrer">docs.python.org/3/howto/pyporting.html#text-versus-binary-data</a></span>
<span class="comment-copy">Cheers, man! I didn't think of that!</span>
<span class="comment-copy">Did not see you already tried that. Editing....</span>
<span class="comment-copy">all good! I was code-blind, encoding with <code>base64</code> works fine now. I've been writing 6 of these conversions in the past two days, sometimes it's all a bit of an import blur.</span>
