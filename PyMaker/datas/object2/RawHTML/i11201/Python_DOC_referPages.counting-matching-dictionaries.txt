<div class="post-text" itemprop="text">
<p>I have a list containing dictionaries:</p>
<pre><code>[{'x': u'osgb32', 'y': u'osgb4000'},
 {'x': u'osgb4340', 'y': u'osgb4000'},
 {'x': u'osgb4020', 'y': u'osgb4000'},
 {'x': u'osgb32', 'y': u'osgb4000'},
 {'x': u'osgb32', 'y': u'osgb4000'}]
</code></pre>
<p>I wish to count the incidents of each dict and create a new field <code>count</code></p>
<p>The desired outcome looks like this:</p>
<pre><code>[{'x': u'osgb32', 'y': u'osgb4000', 'count': 3},
 {'x': u'osgb4340', 'y': u'osgb4000', 'count': 1},
 {'x': u'osgb4020', 'y': u'osgb4000', 'count': 1}]
</code></pre>
<p>I am unsure how to match <code>dict</code>s.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass your list of dicts as the data arg to <code>DataFrame</code> ctor:</p>
<pre><code>In [74]:
import pandas as pd
data = [{'x': u'osgb32', 'y': u'osgb4000'},
 {'x': u'osgb4340', 'y': u'osgb4000'},
 {'x': u'osgb4020', 'y': u'osgb4000'},
 {'x': u'osgb32', 'y': u'osgb4000'},
 {'x': u'osgb32', 'y': u'osgb4000'}]
df = pd.DataFrame(data)
df

Out[74]:
          x         y
0    osgb32  osgb4000
1  osgb4340  osgb4000
2  osgb4020  osgb4000
3    osgb32  osgb4000
4    osgb32  osgb4000
</code></pre>
<p>you can then <code>groubpy</code> on the cols and call <code>size</code> to get a count:</p>
<pre><code>In [76]:    
df.groupby(['x','y']).size()

Out[76]:
x         y       
osgb32    osgb4000    3
osgb4020  osgb4000    1
osgb4340  osgb4000    1
dtype: int64
</code></pre>
<p>and then call <code>to_dict</code>:</p>
<pre><code>In [77]:    
df.groupby(['x','y']).size().to_dict()

Out[77]:
{('osgb32', 'osgb4000'): 3,
 ('osgb4020', 'osgb4000'): 1,
 ('osgb4340', 'osgb4000'): 1}
</code></pre>
<p>You can wrap the above into a list:</p>
<pre><code>In [79]:
[df.groupby(['x','y']).size().to_dict()]

Out[79]:
[{('osgb32', 'osgb4000'): 3,
  ('osgb4020', 'osgb4000'): 1,
  ('osgb4340', 'osgb4000'): 1}]
</code></pre>
<p>You can <code>reset_index</code>, <code>rename</code> the column and pass arg <code>orient='records'</code>:</p>
<pre><code>In [94]:
df.groupby(['x','y']).size().reset_index().rename(columns={0:'count'}).to_dict(orient='records')

Out[94]:
[{'count': 3, 'x': 'osgb32', 'y': 'osgb4000'},
 {'count': 1, 'x': 'osgb4020', 'y': 'osgb4000'},
 {'count': 1, 'x': 'osgb4340', 'y': 'osgb4000'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a job for <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>. But first you have to convert your dicts to actual tuples, as dicts are not hashable and thus can not be used as keys in a <code>Counter</code> object:</p>
<pre><code>&gt;&gt;&gt; dicts = [{'x': u'osgb32', 'y': u'osgb4000'},
...          {'x': u'osgb4340', 'y': u'osgb4000'},
...          {'x': u'osgb4020', 'y': u'osgb4000'},
...          {'x': u'osgb32', 'y': u'osgb4000'},
...          {'x': u'osgb32', 'y': u'osgb4000'}]
&gt;&gt;&gt; collections.Counter(tuple(d.items()) for d in dicts)
Counter({(('y', u'osgb4000'), ('x', u'osgb32')): 3, 
         (('y', u'osgb4000'), ('x', u'osgb4020')): 1, 
         (('y', u'osgb4000'), ('x', u'osgb4340')): 1})
</code></pre>
<p>Then, you can turn those back into dicts with the added <code>"count"</code> key:</p>
<pre><code>&gt;&gt;&gt; c = collections.Counter(tuple(d.items()) for d in dicts)
&gt;&gt;&gt; [dict(list(k) + [("count", c[k])]) for k in c]
[{'count': 1, 'x': u'osgb4020', 'y': u'osgb4000'},
 {'count': 3, 'x': u'osgb32', 'y': u'osgb4000'},
 {'count': 1, 'x': u'osgb4340', 'y': u'osgb4000'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a> and <a href="https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset" rel="nofollow"><code>frozenset</code></a> for this:</p>
<pre><code>from collections import Counter

l = [{'x': u'osgb32', 'y': u'osgb4000'},
    {'x': u'osgb4340', 'y': u'osgb4000'},
    {'x': u'osgb4020', 'y': u'osgb4000'},
    {'x': u'osgb32', 'y': u'osgb4000'},
    {'x': u'osgb32', 'y': u'osgb4000'}]

c = Counter(frozenset(d.items()) for d in l)
[dict(k, count=v) for k, v in c.items()] # [{'y': u'osgb4000', 'x': u'osgb4340', 'count': 1}, {'y': u'osgb4000', 'x': u'osgb32', 'count': 3}, {'y': u'osgb4000', 'x': u'osgb4020', 'count': 1}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve that easily with  code below</p>
<pre><code>items = [{'x': u'osgb32', 'y': u'osgb4000'},
 {'x': u'osgb4340', 'y': u'osgb4000'},
 {'x': u'osgb4020', 'y': u'osgb4000'},
 {'x': u'osgb32', 'y': u'osgb4000'},
 {'x': u'osgb32', 'y': u'osgb4000'}]

result = {}
counted_items = []
for item in items:
    key = item['x'] + '_' + item['y']
    result[key] = result.get(key, 0) + 1

for key, value in result.iteritems():
    y, x = key.split('_')
    counted_items.append({'x': x, 'y': y, 'count': value})

print counted_items # [{'y': u'osgb32', 'x': u'osgb4000', 'count': 3}, {'y': u'osgb4340', 'x': u'osgb4000', 'count': 1}, {'y': u'osgb4020', 'x': u'osgb4000', 'count': 1}]
</code></pre>
<p>Another option is to use counter. There are plenty of answers of how to dial with <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a> :)</p>
<p><strong>Good Luck!</strong> </p>
</div>
<span class="comment-copy">Are you sure you have a list of <i>tuples</i>? Tuples look like this: <code>(item, item)</code>, while dictionaries look like this: <code>{key:value, key:value}</code>. So you have a list of dicts</span>
<span class="comment-copy">Maybe <a href="http://stackoverflow.com/questions/2600191/how-can-i-count-the-occurrences-of-a-list-item-in-python">this link</a> could help. Try using <code>collections.Counter</code></span>
<span class="comment-copy">@Levay <code>counter</code> is from 2.7 <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">docs.python.org/2/library/collections.html#collections.Counter</a></span>
<span class="comment-copy">Thanks @Leva7. That is helpful. I was misusing terminology</span>
<span class="comment-copy">@Hooting my bad, sorry</span>
<span class="comment-copy">you should mention that you are using pandas to do the work. Therefore your code is missing an import statement: <code>import pandas as pd</code></span>
<span class="comment-copy">@pwagner sure have updated, the question was originally tagged <code>pandas</code></span>
<span class="comment-copy">Thanks Ed. Is there a way to include the key in the output? desired outcome - <code>{'x': 'osgb32', 'y': 'osgb4000', 'count' : 3}</code></span>
<span class="comment-copy">Sure see updated answer</span>
<span class="comment-copy">Wouldn't you need to sort the tuples since nothing guarantees that two identical dicts return items in same order?</span>
<span class="comment-copy">@niemmi Hm, good point... but I think that if all those dicts have the same keys, they should come out in the same order. Using <code>frozenset</code> might indeed be better, though.</span>
