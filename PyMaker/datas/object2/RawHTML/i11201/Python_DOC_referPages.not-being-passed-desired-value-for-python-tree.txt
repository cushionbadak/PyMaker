<div class="post-text" itemprop="text">
<p>I couldn't find a python tree I could use to create a tree structure for chess openings, so I tried to write my own. To progress deeper into the tree I try to return a subroot when I add a new position, but it seems all the positions are getting added to the root, and I'm not being given a reference to the subroot like I expect, although I did check and root has a lot of grandchildren too.</p>
<pre><code>import chess.pgn

class Node(object):
    children = []
    score = None
    def __init__(self, fen):
        self.fen = fen  
    def add(self, fen):
        for c in self.children:
            if c.fen == (fen):
                print("working")
                return c
        self.children.append(Node(fen))
        return self.children[-1]

root = Node('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')
def createTree(fileName):
    pgn = open(fileName)
    game = chess.pgn.read_game(pgn)
    while(game):    
        next_move = game.variations[0]
        fen = next_move.board().fen()
        global root
        currentRoot = root.add(fen)

        while(not next_move.is_end() and next_move.board().fullmove_number &lt;= 5):
            next_move = next_move.variations[0]
            fen = next_move.board().fen()
            currentRoot = currentRoot.add(fen)
            print(currentRoot.children)
        game = chess.pgn.read_game(pgn)

file = r"C:\all.pgn"
createTree(file)
for n in root.children:
    print(n.fen)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code fails because you have misused <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow">class variables.</a></p>
<p>Basically, when you declare <code>children</code> outside of any function it is scoped at the class-level, and all <code>Node</code> objects share the same list. You want to define it within <code>__init__</code> as <code>self.children</code> such that it is scoped at the instance level.</p>
<pre><code>class Node:
    def __init__(self, fen):
        self.fen = fen
        self.score = None
        self.children = []
    ...
</code></pre>
</div>
<span class="comment-copy">Please provide a download link to the <code>chess.pgn</code> library you're using.</span>
<span class="comment-copy"><a href="https://pypi.python.org/pypi/python-chess" rel="nofollow noreferrer">pypi.python.org/pypi/python-chess</a></span>
<span class="comment-copy">That makes sense. Hope it fixes it!</span>
<span class="comment-copy">@Josh Remember, if the code worked for you, please choose it as the accepted answer. Thanks!</span>
<span class="comment-copy">It did fix it. And I was able to make some recursive methods to traverse it as well</span>
