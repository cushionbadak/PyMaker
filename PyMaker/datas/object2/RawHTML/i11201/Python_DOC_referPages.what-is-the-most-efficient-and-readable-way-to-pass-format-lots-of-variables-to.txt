<div class="post-text" itemprop="text">
<p>I have a couple "lengthy" lines like this one:</p>
<pre><code>content = "&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"&gt;\n  &lt;title&gt;{0} - {1}&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{3}/{2}.{4}\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- layout... --&gt;\n  &lt;script type\"text/javascript\" src=\"{5}/{2}.{6}\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n".format(settings["app.name"], ncc, name, settings["dir"]["static.style"], settings["lang.style"], settings["dir"]["static.script"], settings["lang.script"])
</code></pre>
<p>Just by looking at such a line it you can tell that it is quite large and that it is in some ways hard to read and / or understand.</p>
<p>Is there a more efficient and readable way to dynamically insert lots of values into large strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another option would be to do:</p>
<pre><code>content = (
    "&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  "
    "&lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"&gt;\n"
    "  &lt;title&gt;{0} - {1}&lt;/title&gt;\n  "
    "&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{3}/{2}.{4}\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n"
    "  &lt;!-- layout... --&gt;\n  "
    "&lt;script type\"text/javascript\" src=\"{5}/{2}.{6}\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"
).format(
    settings["app.name"], ncc, name, settings["dir"]["static.style"],
    settings["lang.style"], settings["dir"]["static.script"],
    settings["lang.script"]
)
</code></pre>
<p>Note that there is no <code>,</code> at the end of each line.</p>
<p>However the best way to generate HTML is probably via some templating framework, e.g. jinja, mako, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow">multiline string</a>:</p>
<pre><code>args = (settings["app.name"], ncc, name, settings["dir"]["static.style"], 
        settings["lang.style"], settings["dir"]["static.script"], 
        settings["lang.script"])

content = """\
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;title&gt;{0} - {1}&lt;/title&gt;
  &lt;link rel="stylesheet" type="text/css" href="{3}/{2}.{4}" /&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;!-- layout... --&gt;
  &lt;script type"text/javascript" src="{5}/{2}.{6}"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;""".format(args)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>by having the strings in a list and then doing a join as in <code>' '.join(list)</code>. This will be a lot faster than simple concatenation.  </p>
<p><code>list = ["The quick brown", "fox"]
result = " ".join(list)
</code>
Here is a <a href="https://stackoverflow.com/questions/3055477/how-slow-is-pythons-string-concatenation-vs-str-join">link</a> to see the difference is performance</p>
</div>
<span class="comment-copy">you should take a look at jinja2 or mako... they're not specifically designed for strings, but for creating dynamic html pages/reports.</span>
<span class="comment-copy">@Dot_Py thank you for the suggestion I will look into them.</span>
<span class="comment-copy">Thank you very much for the answer, I did not know you could do this. +1 I really appreciate the time and effort you put into it.</span>
<span class="comment-copy">plus1 for jinja2 / mako option</span>
<span class="comment-copy">Thank you very much for the answer, +1 I really appreciate the time and effort you put into it.</span>
<span class="comment-copy">Have you actually checked that it will be faster then raw string with <code>.format</code>? Cause it is <b>highly</b> unlikely.</span>
<span class="comment-copy">Check the link I provided. You can see how many concats per second each approach does</span>
<span class="comment-copy">Yes, the link you provided talks about <code>+</code> operator. That's absolutely not the case here. Please read questions carefuly next time.</span>
<span class="comment-copy">the answer over there provides a link where there are a couple of methods compared. However you have a point I do not know how .format fits in the comparison. That being said I cannot image it is very fast because of the extra work it has to do.</span>
<span class="comment-copy">Thank you very much for the answer, +1 I really appreciate the time and effort you put into it.</span>
