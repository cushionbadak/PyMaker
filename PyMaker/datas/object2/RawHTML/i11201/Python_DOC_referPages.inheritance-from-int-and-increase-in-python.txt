<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3238350/subclassing-int-in-python">Subclassing int in Python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I try to inherit from <code>int</code> and write the <code>increase()</code> function for it.</p>
<pre><code>import math


class Counter(int):

    def increase(self):
        self += 1
        # it should be less then 2**32
        maximum = math.pow(2, 32)
        if self &gt; maximum:
            self -= maximum



counter = Counter(10)
print counter
counter.increase()
print counter
counter.increase()
print counter
</code></pre>
<p>ouput:</p>
<pre><code>10
10
10
</code></pre>
<p>It doesn't work! Why and how to write the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not possible to do what you are trying to do here since integers are immutable in Python. Once they are created they cannot be changed.</p>
<p>From <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">Python Documentation</a></p>
<blockquote>
<p>The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. <strong>...</strong> <strong>An objectâ€™s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.</strong></p>
</blockquote>
<p>Depending on what you are going to use this for what you could do instead is the following:</p>
<pre><code>class Counter(object): # new style object definition.

    def __init__( self, num ):
        self.value = num
        # this is 32bit int max as well, same as pow(2,32) function.
        self.maximum = 0xFFFFFFFF 
    def increase(self):
        self.value += 1

        if self.value &gt; self.maximum:
            self.value -= self.maximum

    def __repr__( self ): # representation function.
        return str(self.value)

    def __str__( self ): # string function
        return str(self.value)

counter = Counter(10)
print counter
counter.increase()
print counter
counter.increase()
print counter
</code></pre>
</div>
<span class="comment-copy">Seems like a weird idea to inherit <code>int</code>. Why not just have an <code>int</code> attribute?</span>
<span class="comment-copy">Also it's a bad idea to compute <code>maximum</code> every time.</span>
