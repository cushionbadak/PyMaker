<div class="post-text" itemprop="text">
<p>How does <code>while</code> loop work in python when reading lines?</p>
<pre><code>state=True #can be set to {anyInterger,True,False}
while state:
    #do a task
    #if task done change state to exit loop
</code></pre>
<p>so depending on the <code>state</code> variable while loop is executed, and <code>type(state)</code> can be <strong>bool,int</strong></p>
<p>but to read lines from file using <code>while</code> as mentioned below</p>
<pre><code>f=open('test.txt','r')
line_data=[]
line=f.readline()
while line:
    line_data.append(line)
    line=f.readline()
f.close()
</code></pre>
<p>after reading all lines finally <code>line=''</code> but <code>type('')</code> is <strong>str</strong></p>
<p>So how did <code>while</code> loop terminate? </p>
<p><em>I knew this could be done better using <code>with</code> and <code>for</code> , reason for not using while loop for this purpose would be helpful</em> </p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few implicit boolean conversions in Python.<br/>
1) <code>bool(0)</code> evaluates to False, any other integers evaluate to <code>True</code><br/>
2) <code>bool('')</code>, <code>bool([])</code>, <code>bool({})</code> also evaluate to <code>False</code>. This is useful to test whether a container has any items in it (non-empty strings, lists, dicts etc. evaluate to <code>True</code>)</p>
<p>So in your case <code>readline</code> read the empty string, which got implicitly turned to <code>bool</code> and evaluated to <code>False</code>, therefore the loop has terminated</p>
</div>
<div class="post-text" itemprop="text">
<p>Whenever you use a variable as a condition to an <code>if</code> or a <code>while</code> loop it is evaluated as a boolean value. In Python an empty string is treated as <code>False</code>, therefore the <code>while</code> loop terminates.</p>
<blockquote>
<p>reason for not using while loop for this purpose would be helpful</p>
</blockquote>
<p>You should ask for a reason to <strong>use</strong> a <code>while</code> loop for this purpose.</p>
<p>Compare this:</p>
<pre><code>f = open('test.txt','r')
line_data = []
line = f.readline()
while line:
    line_data.append(line)
    line = f.readline()
f.close()
</code></pre>
<p>To that:</p>
<pre><code>with open('test.txt','r') as f:
     lines = f.readlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>f.readline()</code> is a generator object that returns <code>''</code> at the end of the file. But <code>''</code> has a falsy value:</p>
<pre><code>&gt;&gt;&gt; f.readline()
''
&gt;&gt;&gt; bool('')
False
</code></pre>
<p>Hence, when the <code>while</code> evaluates the line at EOF (End Of File), the value is the same as <code>False</code>.</p>
<p>The following values are considered <code>False</code> (see the <a href="https://docs.python.org/2.4/lib/truth.html" rel="nofollow">docs</a>):</p>
<blockquote>
<pre><code>None
False
zero of any numeric type, for example, 0, 0L, 0.0, 0j.
any empty sequence, for example, '', (), [].
any empty mapping, for example, {}.
instances of user-defined classes, if the class defines a __nonzero__() or __len__() method, when that method returns the integer zero or bool value False
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Empty string is treated as <strong>False</strong> in python. So, it won't enter the loop. FYI the better way of looping over the lines is </p>
<pre><code>line_data = []
for line in f.readlines():
    line_data.append(line)
</code></pre>
<p>You can even do like this also.</p>
<pre><code>with open('test.txt', 'r') as f:
    line_data = [line for line in f.readlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add:</p>
<pre><code>if len(line) &lt; 2:
    break
</code></pre>
<p>or alternatively:</p>
<pre><code>if line == "''":
    break
</code></pre>
</div>
<span class="comment-copy"><code>bool('') == False</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#truth-value-testing</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">reason for not using while loop....... <a href="https://wiki.python.org/moin/WhileLoop" rel="nofollow noreferrer">wiki.python.org/moin/WhileLoop</a></span>
<span class="comment-copy">Why do you remove the first line?</span>
<span class="comment-copy">@DavidCullen Because that's what OP's code does.</span>
<span class="comment-copy">The first call to <code>append</code> in the OP's code will append the first line.</span>
<span class="comment-copy">@DavidCullen Thanks, you are correct. Updated my answer.</span>
<span class="comment-copy">how is this reason to use while loop ... even by comparing number of lines , the code with <code>while</code> loop is longer than <code>with</code></span>
<span class="comment-copy"><code>f.readlines()</code> already returns a list. It is totally wasteful to create a list comprehension from it.</span>
<span class="comment-copy">Yes, it is. It just for his understanding purpose.</span>
<span class="comment-copy">And <code>readlines()</code> is just a waste of memory. <code>for line in f:</code> is enough.</span>
<span class="comment-copy">Your second example won't work. <code>"''" != ''</code></span>
