<div class="post-text" itemprop="text">
<p>For any class you can tell the (non-virtual) superclasses via the attribute <code>__mro__</code> and the (non-virtual) subclasses by calling <code>__subclasses__</code>.</p>
<p>For any ABC you can tell all virtual subclasses via the attribute <code>_abc_registry</code>.</p>
<p>Is there a way to tell all virtual superclasses of a class, i.e. all classes for which it is registered as virtual subclass?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>For any ABC you can tell all virtual subclasses via the attribute '_abc_registry'.</p>
</blockquote>
<p>No you can't. You can only find explicitly registered virtual subclasses that way. Anything handled by <code>__subclasshook__</code> won't show up in your check.</p>
<p>To do what you're trying to do, you'd have to go through every ABC ever defined in your Python session and call <code>isinstance</code>. While this is technically possible in CPython by traversing the type hierarchy with the <code>__subclasses__</code> method, it's probably a bad idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are asking if there is a way to find all classes that would be considered a subclass of a given ABC. Other than iterating through the global and local namespaces and testing them all, the answer is no, there is no way to do this. </p>
<p>By their very nature ABCs do not "know" about their child classes (any class could be a subclass of an ABC depending on what is returned by the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow"><code>__subclasshook__</code></a> method, i.e., if the subclass implements the right interface). If you find yourself wanting to do this, I would consider it to potentially be a symptom of bad design. It might be worth pondering over why it is, exactly, you find yourself wanting to do this. </p>
</div>
<span class="comment-copy">No, I do not think there is any way to do this other than by enumerating all classes that have ever been defined and checking if they are virtual subclasses.</span>
<span class="comment-copy">By "virtual superclass", do you mean abstract base class...? If so maybe edit so you're using consistent nomenclature.</span>
<span class="comment-copy">No, I do not mean ABCs in general, only those for which the class in question is registered as virtual subclass (and which therefore are not listed in <code>__mro__</code>.</span>
<span class="comment-copy">You're right, only explicitely registered classes are recorded in <code>_abc_registry</code>. But for my purpose this limitation is acceptable. I should have mentioned this.</span>
<span class="comment-copy">@MichaelAmrhein: You'd still have to go through every ABC ever to perform the check. Also, if you try to explicitly register a class that's already considered a subclass of the ABC for other reasons, it won't end up in the registry, so you can't even tell which classes have been explicitly registered.</span>
<span class="comment-copy">I'm writing a kind of registry for adapters (adapting an object providing an interface a to an interface b). For finding an adapter that can adapt a given object to a given interface, I need to know the interfaces the object provides. While that's simple for the ABCs the objects class inherits from, I'm looking for a way to find also the ABCs for which the objects class is registered as virtual subclass.</span>
<span class="comment-copy">I agree that iterating over the complete class hierarchy and testing each class is not a good idea. But for my purpose it would be acceptable to find only ABCs for which the objects class was explicitely registered as virtual subclass (ignoring those which would consider the objects class as subclass via <code>__subclasshook__</code>). So, the only idea I can come up with at the moment, is to write a custom metaclass derived from ABCMeta that records the ABC within the registered subclass.</span>
<span class="comment-copy">@MichaelAmrhein If that solution would work, could you also just subclass from the ABC helper class and override the <code>register</code> method so it records the registration somewhere? I try to avoid MCs as much as possible.</span>
<span class="comment-copy">Yes, that would work.</span>
<span class="comment-copy">To make it also work in Python 2, the import could be done like this:    <code>try:     from abc import ABC except ImportError:     from abc import ABCMeta     ABC = ABCMeta('ABC', (), {}) </code></span>
