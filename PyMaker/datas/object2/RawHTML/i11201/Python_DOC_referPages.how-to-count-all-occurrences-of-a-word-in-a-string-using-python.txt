<div class="post-text" itemprop="text">
<p>I'm trying to find the number of times 'bob' occurs in a string of characters like 'abdebobdfhbobob'.</p>
<p>My code (that I found through another stackoverflow question) is:</p>
<pre><code>s = 'abdebobdfhbobob'  
print 'The number of times bob occurs is: ' + str(s.count('bob'))
</code></pre>
<p>This code prints out: <strong>The number of times bob occurs is: 2</strong> which is not correct for what I need as the answer should be 3.</p>
<p>The issue is that this code does not count 'abdebobdfh<strong>bobob</strong>' as two different bobs, which is what I want.</p>
<p>How can I fix the code to count the bobob part of the string as two separate bobs?</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow">documentation</a>, <code>str.count()</code> return the number of non-overlapping occurrences of substring sub in the range <code>[start, end]</code>. You can use a <a href="http://www.regular-expressions.info/lookaround.html" rel="nofollow">positive lookahead</a> based regular expression in order to find the overlapped strings:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'abdebobdfhbobob'
&gt;&gt;&gt; len(re.findall(r'(?=bob)', s))
3
</code></pre>
<p>If you don't want to use regex you can use a generator expression within the <code>sum()</code> function that will iterate over the all sub-strings with length 3 and count the number of those that are equal to 'bob':</p>
<pre><code>&gt;&gt;&gt; sum(s[i:i+3] == 'bob' for i in range(len(s)-2))
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can just check all possible candidates:</p>
<pre><code>def count_substrings(sub, main):
    n = len(sub)
    return sum(sub == main[i : i+n] for i in range(len(main) - n + 1))

s = 'abdebobdfhbobob'
sub = 'bob'
print('The number of times %s occurs is: %d' % (sub, count_substrings(sub, s)))  # 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use regular expressions you can create all triplets from the string using <code>zip</code> and then use <code>list.count</code>:</p>
<pre><code>&gt;&gt;&gt; word = 'bob'
&gt;&gt;&gt; triplets = (''.join(k) for k in zip(*[s[i:] for i in range(len(word))]))
&gt;&gt;&gt; triplets.count(word)
3
</code></pre>
<p>The triplets are created by zipping these strings:</p>
<pre><code>     ▼     ▼ ▼
'abdebobdfhbobob'
'bdebobdfhbobob'
'debobdfhbobob'
     ▲     ▲ ▲
</code></pre>
<p>If you don't mind working with tuples:</p>
<pre><code>&gt;&gt;&gt; word = 'bob'
&gt;&gt;&gt; triplets = zip(*[s[i:] for i in range(len(word))])
&gt;&gt;&gt; triplets.count(tuple(word))
3
</code></pre>
<p><strong>Tip</strong>: If you're going to count other words as well, use a <code>collections.Counter</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>why do not you make it easy?</p>
<pre><code>bobc=0
for i in range (0,len(s)-2):
    if s[i:i+3]=='bob':
        bobc+=1
        i=+1
print('Number of bob:'+str(bobc))
</code></pre>
</div>
<span class="comment-copy">It is worth noticing that if the counter is intended to be <b>case insensitive</b>, <code>s</code> should be replaced by <code>s.lower()</code> in the solutions above.</span>
