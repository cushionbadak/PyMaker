<div class="post-text" itemprop="text">
<p>It's nice to be able to enter an object in the shell, and get something back, e.g.,</p>
<pre><code>&gt;&gt;&gt;foo
I am foo
</code></pre>
<p>Usually, using <code>print(foo)</code> in a module script will yield the same result, as in the case above (I'm using Python 3.5).  But often, with instances of complex classes, you can get wildly different outputs.</p>
<p>This raises the question, what exactly happens when you type an object name and hit enter in the interactive python shell? What built-in is called?</p>
<p><strong>Example:</strong></p>
<p><strong>In module:</strong> </p>
<pre><code>print(h5file)
</code></pre>
<p><strong>Output:</strong></p>
<blockquote>
<p>tutorial1.h5 (File) 'Test file' Last modif.: 'Wed Jun  8 21:18:10 2016' Object Tree:  / (RootGroup) 'Test file' /detector (Group) 'Detector information' /detector/readout (Table(0,)) 'Readout example'</p>
</blockquote>
<p><strong>Versus shell output</strong></p>
<blockquote>
<p>&gt;&gt;&gt;h5file File(filename=tutorial1.h5, title='Test file', mode='w',  root_uep='/', filters=Filters(complevel=0, shuffle=False, fletcher32=False, least_significant_digit=None)) / (RootGroup) 'Test file' /detector (Group) 'Detector information' /detector/readout (Table(0,)) 'Readout example'   description := {   "Country": UInt16Col(shape=(), dflt=0, pos=0),   "Geo": UInt16Col(shape=(), dflt=0, pos=1),   "HsCode": Int8Col(shape=(), dflt=0, pos=2),   "Month": UInt16Col(shape=(), dflt=0, pos=3),   "Quantity": UInt16Col(shape=(), dflt=0, pos=4),</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> implicitly applies <code>str()</code> to each printed item to obtain a string, while the shell implicitly applies <code>repr()</code> to obtain a string.  So it's the difference (if any) between an object's <code>__str__()</code> and <code>__repr__()</code> methods </p>
<pre><code>&gt;&gt;&gt; class A(object):
...    def __str__(self):
...        return "I'm friendly!"
...    def __repr__(self):
...        return "If different, I'm generally more verbose!"

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; print(a)
I'm friendly!
&gt;&gt;&gt; a
If different, I'm generally more verbose!
</code></pre>
<p>Note that I'm ignoring the possibility that the shell you use has overridden the default <code>sys.displayhook</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the REPL, it's <code>__repr__()</code> that's used to give you the representation of an object whereas <code>print</code> gives you the result of the <code>__str__()</code> function, as per the following transcript:</p>
<pre><code>pax&gt; python
Python 2.7.9 (default, Jun  1 2016, 16:07:34) 
[GCC 4.9.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class xyzzy:
...     def __repr__(self):
...         return "me"
...     def __str__(self):
...         return "other-me"
... 
&gt;&gt;&gt; plugh = xyzzy()
&gt;&gt;&gt; plugh
me
&gt;&gt;&gt; print plugh
other-me
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__repr__()</code> is the method called in this situation. It returns the "official" (canonical) representation of the object, as opposed to <code>__str__</code> which is typically less structured.</p>
<ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow">Official Python documentation on <strong>repr</strong></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Compare <code>repr</code> vs <code>str</code>:</p>
<pre><code>&gt;&gt;&gt; class A: pass
... 
&gt;&gt;&gt; A
&lt;class __main__.A at 0x101c609a8&gt;
&gt;&gt;&gt; A()
&lt;__main__.A instance at 0x101cea488&gt;
&gt;&gt;&gt; print A
__main__.A
&gt;&gt;&gt; repr(A)
'&lt;class __main__.A at 0x101c609a8&gt;'
&gt;&gt;&gt; str(A)
'__main__.A'
</code></pre>
<p>You can create your own custom <code>__str__</code> and <code>__repr__</code> if you wish:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...    def __repr__(self): return 'I am foo'
... 
&gt;&gt;&gt; Foo()
I am foo
</code></pre>
</div>
<span class="comment-copy">It is <code>repr</code> vs <code>str</code> of an object</span>
<span class="comment-copy">Great nuanced detail on this answer, thank you.</span>
<span class="comment-copy">@Hexatonic: Tim Peters knows more than a little about Python internals. :)</span>
<span class="comment-copy">So to have the same result as the REPL in a module, one would use print(repr(h5file)).  That works.  Thank you.</span>
<span class="comment-copy">@Hexatonic, yes, the <code>repr()</code> call gives you a string matching what you would get by just entering the object into the REPL. And, of course, <code>print()</code> calling <code>str()</code> on that string is basically a no-op, giving you the representation.</span>
<span class="comment-copy">@Hexatonic: FWIW, You can easily get the repr of an object when using the format function or method with <code>{!r}</code> instead of <code>{}</code> in your format string.</span>
