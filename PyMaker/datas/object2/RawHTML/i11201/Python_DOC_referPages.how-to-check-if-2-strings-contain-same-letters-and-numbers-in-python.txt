<div class="post-text" itemprop="text">
<p>I would like to check if two strings contain the same letters and numbers </p>
<p><strong>BUT</strong> Ignore special characters, such as <code>_</code></p>
<p>Example:</p>
<pre><code>word1 = "ABCD" , word2 = "ACDB"  =&gt; return True
word1 = "ABC1E_" , word2 = "AE1CB" =&gt; return True
word1 = "AB12" , word2 = "ABE2" =&gt; return False
word1 = "ABB" , word2 = "AB" =&gt; return True 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want to account for every alphanumeric character in each string being the same (not just the sets of characters), you could compare the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a>s after filtering characters. </p>
<pre><code>from collections import Counter
res = Counter(filter(str.isalnum, word1)) == Counter(filter(str.isalnum, word2))
</code></pre>
<p>If you just want to compare the sets of characters, (<em><sup><sup>i.e.</sup></sup> "AAB" and "AB" would return true</em>), you could use a similar approach with <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow"><code>set</code></a></p>
<pre><code>res = set(filter(str.isalnum, word1)) == set(filter(str.isalnum, word2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from string import ascii_letters, digits


def compare_alphanumeric_membership(first, second):
    for character in first:
        if character in ascii_letters + digits and character not in second:
            return False
    return True


word1 = 'ABCD'
word2 = 'ACDB'
assert compare_alphanumeric_membership(word1, word2)

word1 = 'ABC1E_'
word2 = 'AE1CB'
assert compare_alphanumeric_membership(word1, word2)

word1 = 'AB12'
word2 = 'ABE2'
assert not compare_alphanumeric_membership(word1, word2)

word1 = 'ABB'
word2 = 'AB'
assert compare_alphanumeric_membership(word1, word2)
</code></pre>
<p>Runs to specification listed in the question.</p>
<pre><code>Process finished with exit code 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following function will compare two strings.</p>
<pre><code>from string import ascii_letters, digits

def cmp_strings(str1, str2):
    return all([i in str2 for i in str1 if i in ascii_letters + digits])

print cmp_strings('ABCD', 'ACDB_')
print cmp_strings('ABCD_', 'ACDB')
print cmp_strings('AB12', 'ABE2')
print cmp_strings('ABC1E_', 'AE1CB')
</code></pre>
<p><strong>Output</strong></p>
<pre><code>True
True
False
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what about this?</p>
<pre><code>set(word2).issubet(set(word1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Edit: And edit in the question was made where only the contents are important, not the count of the numbers. So in order to get the correct result you should switch to a set. And simply make a list of the ignored characters</p>
<pre><code>ignored_chars = ['_']
s = set()
for letter in word:
    if letter in ignored_chars:
        continue
    s.add(letter)
</code></pre>
<p>And still compare the resulting sets. </p>
</div>
<span class="comment-copy">post ur attempts.</span>
<span class="comment-copy">What about "ABB" and "AB"?</span>
<span class="comment-copy"><code>set(re.sub(r'(?i)[\W_]', '', word1)) == set(re.sub(r'(?i)[\W_]', '', word2))</code></span>
<span class="comment-copy">But for the two words: ("ABC1E_", "AE1CB") your implementation will return False, altough he want's it to be True, since the underscore is an ignored character.</span>
<span class="comment-copy">So any other character except alphabets will be ignored ?</span>
<span class="comment-copy">Now this will work for all the available examples</span>
<span class="comment-copy">How would that ignore special characters?</span>
