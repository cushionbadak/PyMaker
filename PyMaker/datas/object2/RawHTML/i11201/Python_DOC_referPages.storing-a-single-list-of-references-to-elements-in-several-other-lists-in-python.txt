<div class="post-text" itemprop="text">
<p>I have several lists, let's say they look like:</p>
<pre><code>a = [0, 1, 2]
b = [3, 4, 5, 6]
</code></pre>
<p>And I want to have a list or similarly iterable data structure which stores all the elements in both a and b:</p>
<pre><code>c = [0, 1, 2, 3, 4, 5, 6]
</code></pre>
<p>changing any of these elements changes the corresponding element in the original list.</p>
<pre><code>c[0] = 10
a
[10, 1, 2]
</code></pre>
<p>Most resources I've found are concerned with doing the opposite - creating list copies with distinct IDs for the elements. Is there a simple solution?</p>
<p>EDIT - Ilja Everil√§ suggested itertools.chain which works nicely. Although it doesn't support mutation, I can use it to build new lists which fits my use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps something like this:</p>
<pre><code>class IndirectList():
    def __init__(self, *args):
        self.array = list()

        for subarray in range(len(args)):
            for element in range(len(args[subarray])):
                self.array.append((args[subarray], element))

    def __len__(self):
        return len(self.array)

    def __getitem__(self, key):
        if key not in range(len(self.array)):
            raise IndexError
        return (self.array[key][0])[self.array[key][1]]

    def __setitem__(self, key, value):
        if key not in range(len(self.array)):
            raise IndexError
        (self.array[key][0])[self.array[key][1]] = value
</code></pre>
<p><strong>USAGE</strong></p>
<pre><code>&gt;&gt;&gt; a = [0, 1, 2]
&gt;&gt;&gt; b = [3, 4, 5, 6]
&gt;&gt;&gt; c = IndirectList(a, b)
&gt;&gt;&gt; c
&lt;__main__.IndirectList object at 0x10187d9b0&gt;
&gt;&gt;&gt; list(c)
[0, 1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; c[4]
4
&gt;&gt;&gt; c[4] = 13
&gt;&gt;&gt; list(c)
[0, 1, 2, 3, 13, 5, 6]
&gt;&gt;&gt; a
[0, 1, 2]
&gt;&gt;&gt; b
[3, 13, 5, 6]
&gt;&gt;&gt; a[1] = -42
&gt;&gt;&gt; a
[0, -42, 2]
&gt;&gt;&gt; b
[3, 13, 5, 6]
&gt;&gt;&gt; list(c)
[0, -42, 2, 3, 13, 5, 6]
</code></pre>
<p>This class needs extending and optimizing but the basic idea is there.</p>
</div>
<span class="comment-copy">you could do <code>c = a + b</code></span>
<span class="comment-copy">tried that - doesn't work as desired. changing c will not change the a and b lists</span>
<span class="comment-copy">Use a <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>chain</code></a> when you need to iterate over the lists in sequence. It will not support subscriptions or mutating, though.</span>
