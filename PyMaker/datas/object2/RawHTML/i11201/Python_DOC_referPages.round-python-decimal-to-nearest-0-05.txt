<div class="post-text" itemprop="text">
<p>I'm trying to round money numbers in Decimal to the nearest 0.05. Right now, I'm doing this:</p>
<pre><code>def round_down(amount):
    amount *= 100
    amount = (amount - amount % 5) / Decimal(100)
    return Decimal(amount)

def round_up(amount):
    amount = int(math.ceil(float(100 * amount) / 5)) * 5 / Decimal(100)
    return Decimal(amount)
</code></pre>
<p>Is there any way I can do this more elegantly without dealing with floats using python Decimals (using quantize perhaps)?</p>
</div>
<div class="post-text" itemprop="text">
<p>With floats, simply use <code>round(x * 2, 1) / 2</code>. This doesn't give control over the rounding direction, though.</p>
<p>Using <code>Decimal.quantize</code> you also get complete control over the type and direction of rounding (Python 3.5.1):</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal, ROUND_UP

&gt;&gt;&gt; x = Decimal("3.426")
&gt;&gt;&gt; (x * 2).quantize(Decimal('.1'), rounding=ROUND_UP) / 2
Decimal('3.45')

&gt;&gt;&gt; x = Decimal("3.456")
&gt;&gt;&gt; (x * 2).quantize(Decimal('.1'), rounding=ROUND_UP) / 2
Decimal('3.5')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First note this problem (unexpected rounding down) only <strong><em>sometimes</em></strong> occurs when the digit immediately inferior (to the left of) the digit you're rounding to has a <code>5</code>.</p>
<p>i.e.</p>
<pre><code>&gt;&gt;&gt; round(1.0005,3)
1.0
&gt;&gt;&gt; round(2.0005,3)
2.001
&gt;&gt;&gt; round(3.0005,3)
3.001
&gt;&gt;&gt; round(4.0005,3)
4.0
&gt;&gt;&gt; round(1.005,2)
1.0
&gt;&gt;&gt; round(5.005,2)
5.0
&gt;&gt;&gt; round(6.005,2)
6.0
&gt;&gt;&gt; round(7.005,2)
7.0
&gt;&gt;&gt; round(3.005,2)
3.0
&gt;&gt;&gt; round(8.005,2)
8.01
</code></pre>
<p>But there's an easy solution, I've found that seems to always work, and which doesn't rely upon the <code>import</code> of additional libraries. The solution is to add a <code>1e-X</code> where <code>X</code> is the length of the number string you're trying to use <code>round</code> on plus <code>1</code>.</p>
<pre><code>&gt;&gt;&gt; round(0.075,2)

0.07

&gt;&gt;&gt; round(0.075+10**(-2*6),2)

0.08
</code></pre>
<p>Aha! So based on this we can make a handy wrapper function, which is standalone and does not need additional <code>import</code> calls...</p>
<pre><code>def roundTraditional(val,digits):
   return round(val+10**(-len(str(val))-1))
</code></pre>
<p>Basically this adds a value guaranteed to be smaller than the least given digit of the string you're trying to use <code>round</code> on. By adding that small quantity it preserve's <code>round</code>'s behavior in most cases, while now ensuring if the digit inferior to the one being rounded to is <code>5</code> it rounds up, and if it is <code>4</code> it rounds down.</p>
<p>The approach of using <code>10**(-len(val)-1)</code> was deliberate, as it the largest small number you can add to force the shift, while also ensuring that the value you add never changes the rounding even if the decimal <code>.</code> is missing.  I could use just <code>10**(-len(val))</code> with a condiditional <code>if (val&gt;1)</code> to subtract <code>1</code> more... but it's simpler to just always subtract the <code>1</code> as that won't change much the applicable range of decimal numbers this workaround can properly handle.  This approach will fail if your values reaches the limits of the type, this will fail, but for nearly the entire range of valid decimal values it should work.</p>
<p>You can also use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">decimal</a> library to accomplish this, but the wrapper I propose is simpler and may be preferred in some cases.</p>
<hr/>
<p><strong>Edit:</strong> Thanks <a href="https://stackoverflow.com/users/1405065/blckknght">Blckknght</a> for pointing out that the <code>5</code> fringe case occurs only for certain values <a href="https://stackoverflow.com/questions/31818050/python-2-7-round-number-to-nearest-integer/38239574?noredirect=1#comment63901388_38239574">here</a>.</p>
</div>
<span class="comment-copy">why not use the round in python?</span>
<span class="comment-copy">@SeekAddo. How would I round to the nearest 0.05? also I need to control rounding direction (ie I need both round up/round down).</span>
<span class="comment-copy">def round_num(amount):         print(round(amount,2)) round_num(23.045954) will give you 23.05, let me ask, how do you want the round down to be like @gurch101</span>
<span class="comment-copy">@SeekAddo I'm pretty sure the above two functions work as I would expect. Just looking for a more elegant solution.</span>
<span class="comment-copy">clever. Thanks!</span>
