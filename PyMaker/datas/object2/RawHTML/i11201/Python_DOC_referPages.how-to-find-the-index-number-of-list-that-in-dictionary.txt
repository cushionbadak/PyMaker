<div class="post-text" itemprop="text">
<p>The example list</p>
<pre><code>{
'date': array(['06/08/2016', '06/09/2016', '06/10/2016']),
'close': array([ 923.13,  914.25,  909.42])
}
</code></pre>
<p>I try to get the Date of close is 914.25 that is list['date'][2]
but i don't know how to get index 2 for close.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ideally, if you would do this kind of queries often, you should <em>restructure your data</em> to fit the use case better. For instance, have a dictionary where the keys are amounts and dates are values. Then, you would have quick <code>O(1)</code> lookups into the dictionary by key.</p>
<p>But, in this state of the problem, you can solve it with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> and <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next()</code></a>:</p>
<pre><code>&gt;&gt;&gt; d = {
... 'date': ['06/08/2016', '06/09/2016', '06/10/2016'],
... 'close': [ 923.13,  914.25,  909.42]
... }
&gt;&gt;&gt; a = 914.25
&gt;&gt;&gt; next(date for date, amount in zip(d['date'], d['close']) if amount == a)
'06/09/2016'
</code></pre>
<p>Note that if the amount would not be found, <code>next()</code> would fail with a <code>StopIteration</code> exception. You can either handle it, or you can provide a default beforehand:</p>
<pre><code>&gt;&gt;&gt; a = 10.00
&gt;&gt;&gt; next((date for date, amount in zip(d['date'], d['close']) if amount == a), 'Not Found')
'Not Found'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this :</p>
<pre><code>&gt;&gt;&gt; data = { 'date': ['06/08/2016', '06/09/2016', '06/10/2016'],'close': [ 923.13,  914.25,  909.42]}
&gt;&gt;&gt; data['date'][data['close'].index(914.25)]
'06/09/2016'
</code></pre>
<p>Thanks to <code>index()</code>, you are able to get the index of the required value (914.25 in this case).</p>
</div>
<div class="post-text" itemprop="text">
<p>Where is the example from? I don't think you can have an <code>array</code> of strings in Python.</p>
<p>Assuming that the Python data structure is:</p>
<pre><code>{
    'date': ['06/08/2016', '06/09/2016', '06/10/2016'],
    'close': [923.13,  914.25,  909.42]
}
</code></pre>
<p>and the indexes of <code>close</code> always matches the indexes of <code>date</code>, then:</p>
<pre><code>In [1]: d = {
   ...:     'date': ['06/08/2016', '06/09/2016', '06/10/2016'],
   ...:     'close': [923.13,  914.25,  909.42]
   ...: }
</code></pre>
<p>You find the index of 914.25:</p>
<pre><code>In [2]: d['close'].index(914.25)
Out[2]: 1
</code></pre>
<p>You find the corresponding date:</p>
<pre><code>In [3]: d['date'][1]
Out[4]: '06/09/2016'
</code></pre>
</div>
<span class="comment-copy">you may consider looking at <a href="http://stackoverflow.com/questions/5098046/numpy-equivalent-of-list-index">Numpy equivalent of list.index</a> for using the second part with your already existing structure.</span>
<span class="comment-copy">Thanks for wanting to add an answer. However we don't do this in questions here - if you want to add something different to the accepted answer below, feel free to add another answer. Please also don't add [solved] to titles here - I know it is popular elsewhere, but we use the tick mark to mark questions as resolved instead. Thanks!</span>
<span class="comment-copy">"Ideally, if you would do this kind of queries often, you should restructure your data to fit the use case better." - the best part of the answer!</span>
<span class="comment-copy">Thank you very much. @alecxe</span>
<span class="comment-copy">I love that part of his answer too. @SilentMonk</span>
