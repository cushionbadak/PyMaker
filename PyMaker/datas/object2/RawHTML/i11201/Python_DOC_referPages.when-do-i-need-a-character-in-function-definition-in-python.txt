<div class="post-text" itemprop="text">
<p>I have the two functions I defined as below,</p>
<pre><code>def sumit(func,*args):
    return func(*args)
def sumitt(*args):
    return sum(args)
sumit(sumitt,2,3,4)
</code></pre>
<p>I experimented a bit by changing the second line to <code>return func(args)</code> and I got an error. But why in the 4th line, it's <code>sum(args)</code> rather than <code>sum(*args)</code>? What caused this inconsistency?</p>
</div>
<div class="post-text" itemprop="text">
<p>To apply the function on each of its arguments, you need the <code>*</code> to <em>unpack</em> the arguments of the function. </p>
<p>So <code>func(*args)</code> is synomnymous to <code>func(arg1, arg2,...,argn)</code></p>
<p>Have a look at <em>unpacking</em> in action:</p>
<pre><code>&gt;&gt;&gt; first, second, third = (1, 2, 3)
&gt;&gt;&gt; first
1
&gt;&gt;&gt; second
2
&gt;&gt;&gt; third 
3
</code></pre>
<p>But with <code>sum</code>, the signature of the function requires that it take an <code>iterable</code>, therefore <code>sum(arg)</code> applies <code>sum</code> (a summation) directly on the tuple of arguments <code>arg</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the documentation <code>sum</code> is defined as - </p>
<pre><code>`sum(iterable[, start])` 
</code></pre>
<p>which means it is taking an iterable object, which will traverse the arguments itself. </p>
<p>So </p>
<pre><code>def sumit(func,*args):
    return func(*args)
def sumitt(*args):
    print (args)
    print (*args)
    return sum(args)
</code></pre>
<p>Out - </p>
<pre><code>      (1, 2, 3)
      1 2 3
</code></pre>
<p>Now as you can see <code>args</code> is a tuple whereas <code>*args</code> unwraps the elements... the tuple is what <code>sum</code> accepts where as your function is accepting a list which it is unpacking. What you could've done is</p>
<pre><code>def sumit(func,*args):
    return func(args)
def sumitt(args):
    print (args)
    print (*args)
    return sum(args)
</code></pre>
<p>Now you send the whole tuple to the function <code>sumitt</code> which you can unpack with <code>*args</code>..</p>
<pre><code>1 2 3
</code></pre>
<p>This is also work in the same way but now you can see what was happening..</p>
</div>
<div class="post-text" itemprop="text">
<p><code>*args</code> in a function signature accepts an arbitrary list of of arguments and makes it available in the function's scope in a variable named <code>args</code></p>
<p>for example</p>
<pre><code>def my_print(*args):
  """print all arguments passed in"""
  for arg in args:
    try:
      print(arg)
    except:
      print('argument not printable')

d = 'hello'
my_print('a', 1, 'b', d)
# outputs:
a
1
b
hello
</code></pre>
<p>putting a <code>*</code> in front of a list or tuple in a function call unpacks the list</p>
<pre><code>my_list = ['a', 1, 'b', d]

my_print(*my_list)
# produces the same output as above.
</code></pre>
<p>so, the first function you defined:</p>
<pre><code>def sumit(func,*args):
    return func(*args)
</code></pre>
<ul>
<li>accepts a callable as the first positional argument</li>
<li>accepts an arbitrary list of arguments for the 2nd argument on wards</li>
<li>make these arguments available in a list named <code>args</code></li>
<li>returns the callable with the list <code>args</code> unpacked</li>
</ul>
<p>In this function the 2nd line cannot be <code>return func(args)</code>, <em>unless the function passed accepts a list as the first positional parameter, and has no other required parameter</em></p>
<p>the function <code>sum</code> accepts a iterable (list or tuple) of numbers and adds them up.</p>
<p>you can call <code>sum</code> like this </p>
<pre><code>my_sum = sum([2, 3, 4])
</code></pre>
<p>but the <code>sumitt</code> function takes arguments and converts them to a list before passing it to the sum function</p>
<p>so, you can call <code>sumitt(2, 3, 4)</code> and it will return <code>sum([2, 3, 4])</code></p>
<p>Now, <code>sumitt</code> is further wrapped in <code>sumit</code>, so the function call </p>
<pre><code>sumit(sumitt,2,3,4)
</code></pre>
<p>calls <code>sumitt(2, 3, 4)</code>, which in turn calls <code>sum([2, 3, 4])</code></p>
<p>It is also possible to call the sum function through <code>sumit</code> like this:</p>
<pre><code>sumit(sum, [2, 3, 4])
</code></pre>
<p>The 2nd function <code>sumitt</code> changes the signature of the sum function. This is useful in cases where you'll be calling many different functions dynamically and you want their signatures to be the same. The first function lets you call an arbitrary function with arbitrarily passed parameters.</p>
<p>for example, if I defined a mean function like this:</p>
<pre><code>def mean(*args):
    return sum(args) / len(args)
</code></pre>
<p>Then, mean and sum have dissimilar signatures.</p>
<p>At another place in my code I had to call either the mean function or the sum function, I could write it like this:</p>
<pre><code>def sumitt(*args):
    return sum(args)

def apply_func(func, *args):
    return func(*args)

apply_func(sumitt, 2, 3, 4)
# returns 9

apply_func(mean, 2, 3, 4)
# returns 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your function is expecting individual arguments but you have a sequence (a list, for example), you must specify the character <code>*</code> so that the list gets expanded (unpacked) into the sequence (otherwise it would be treated as one parameter)</p>
<p>On the other hand, because the function <code>sum</code> (a built-in function python) expects the sequence (only one parameter) you must not expand it before calling it.</p>
<p>Imagine your <code>args</code> is:</p>
<pre><code>args = [1, 2, 3, 4]
</code></pre>
<p>By using <code>func(*args)</code>, when <code>func</code> is evaluated, it would be <code>func(1, 2, 3, 4)</code>.</p>
<p>However <code>sum(args)</code> would be evaluated as <code>func([1, 2, 3, 4])</code></p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> takes an iterable (e.g. <code>sum((1, 2, 3))</code>) not individual arguments (e.g. <code>sum(1, 2, 3)</code>). As <code>sumitt</code> has <code>*</code> in the definition, you need <code>*</code> when you call it - you could also remove both (<code>def sumitt(args):</code> and <code>return func(args)</code>), although this reduces the flexibility of <code>sumit</code>.</span>
<span class="comment-copy">I don't believe he fully understands <a href="http://hangar.runway7.net/python/packing-unpacking-arguments" rel="nofollow noreferrer">packing/unpacking.</a></span>
