<div class="post-text" itemprop="text">
<p>I have a list and a for loop such as these: </p>
<pre><code>mylist = ['foo','foo','foo','bar,'bar','hello']
for item in mylist:
    cp = mylist.count(item)
    print("You "+item+" are present in "+str(cp)+" copy(ies)")
</code></pre>
<p>Output:</p>
<pre><code>You foo are present in 3 copy(ies)
You foo are present in 3 copy(ies)
You foo are present in 3 copy(ies)
You bar are present in 2 copy(ies)
You bar are present in 2 copy(ies)
You dude are present in 1 copy(ies)
</code></pre>
<p><strong>Expected output:</strong></p>
<pre><code>You foo are present in 3 copy(ies)
You bar are present in 2 copy(ies)
You dude are present in 1 copy(ies)
</code></pre>
<p>The idea is thus to skip a variable number of iterations within the for loop, using something like this script (<strong>not working</strong>):</p>
<pre><code>for item in mylist:
    cp = mylist.count(item)
    print("You "+item+" are present in "+str(cp)+" copy(ies)")
    continue(cp)
</code></pre>
<p>The script would thus "jump" <code>cp</code> elements in the for loop at every round and start doing again what it is asked at the item <code>item + cp</code>.</p>
<p>I know that you can use <code>continue</code> to skip multiple iterations (such as in <a href="https://stackoverflow.com/questions/22295901/skip-multiple-iterations-in-loop-python">this post</a>) but I cannot figure out how to use <code>continue</code> to skip a <strong>variable number of iterations</strong>.</p>
<p>Thanks for your answer! :)</p>
<hr/>
<p>Edit: similar items are always next to each other.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <code>Counter</code>:</p>
<pre><code>from collections import Counter

mylist = ['foo','foo','foo','bar','bar','hello']
c = Counter(mylist)
for item, cp in c.items():
    print("You "+item+" are present in "+str(cp)+" copy(ies)")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use collections.Counter for your job:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(['foo', 'foo', 'bar'])
Counter({'foo': 2, 'bar': 1})
</code></pre>
<p>Thus,</p>
<pre><code>count_dict = Counter(mylist)
for item in count_dict:
    print("You "+item+" are present in "+str(count_dict[item[)+" copy(ies)")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do it this way</p>
<pre><code>mylist = ['foo','foo','foo','bar','bar','hello']
prev = None
for item in mylist:
    if item != prev:
        cp = mylist.count(item)
        print("You "+item+" are present in "+str(cp)+" copy(ies)")
        prev = item
</code></pre>
<p>hope  it may help !</p>
</div>
<div class="post-text" itemprop="text">
<p>Since the elements are consecutive, you could use a <code>groupby</code> which would group the consecutive strings, it is just a matter of summing the length of each group to get the count:</p>
<pre><code>from itertools import groupby
mylist = ['foo','foo','foo','bar','bar','hello']

for k,v in groupby(mylist):
    print("You {} are present in {} copy(ies)".format(k, sum(1 for _ in v)))
</code></pre>
<p>Output:</p>
<pre><code>You foo are present in 3 copy(ies)
You bar are present in 2 copy(ies)
You hello are present in 1 copy(ies)
</code></pre>
<p>The most efficient way to generally get counts would be to use the dictionary logic like a <em>Counter</em> provided in the other answers, if you want to keep order you could use an <em>OrderedDict</em> to do the counting:</p>
<pre><code>from collections import OrderedDict
mylist = ['foo','foo','foo','bar','bar','hello']
od = OrderedDict()
for ele in mylist:
    od.setdefault(ele, 0)
    od[ele] += 1

for tup in od.items():
    print("You {} are present in {} copy(ies)".format(*tup))
</code></pre>
<p>Which would output the same:</p>
<pre><code>You foo are present in 3 copy(ies)
You bar are present in 2 copy(ies)
You hello are present in 1 copy(ies)
</code></pre>
<p>Both the <em>groupby</em> and the <em>dict</em> logic are <code>O(n)</code>, using your <code>list.count</code> is quadratic.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the unique elements of a list using <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow"><code>set</code></a></p>
<pre><code>mylist = ['foo','foo','foo','bar','bar','hello']
uniq_list = set(my_list)
for item in uniq_list:
    cp = mylist.count(item)
    print("You "+item+" are present in "+str(cp)+" copy(ies)")
</code></pre>
<p>Output:</p>
<blockquote>
<p>You bar are present in 2 copy(ies) </p>
<p>You hello are present in 1 copy(ies) </p>
<p>You foo are present in 3 copy(ies)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = ['foo','foo','foo','bar','bar','hello']
last = None
for item in mylist:
    if item is last:
        continue

    last = item
    cp = mylist.count(item)
    print("You "+item+" are present in "+str(cp)+" copy(ies)")
</code></pre>
<p>This assumes that the list is ordered so that identical objects are next to each other.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sets.html" rel="nofollow">set</a> and <a href="http://www.tutorialspoint.com/python/list_count.htm" rel="nofollow">list counts</a> would do the trick:</p>
<pre><code>mylist = ['foo','foo','foo','bar','bar','hello']
for item in set(mylist):
    print("You "+item+" are present in "+str(mylist.count(item))+" copy(ies)")
</code></pre>
<p>output:</p>
<blockquote>
<pre><code>You foo are present in 3 copy(ies)
You bar are present in 2 copy(ies)
You hello are present in 1 copy(ies)
</code></pre>
</blockquote>
</div>
<span class="comment-copy">is this list always sorted/grouped e.g. same elements are always together?</span>
<span class="comment-copy">@Jerzyk yes indeed!</span>
<span class="comment-copy"><code>Counter</code> object has no attribute <code>iteritems</code></span>
<span class="comment-copy">@pythad this is python 2 not 3. Use <code>items()</code> in 3</span>
<span class="comment-copy">Updated answer to use <code>items</code> as that will work in both 2 and 3. Thanks for the comment.</span>
<span class="comment-copy">This is <code>O(n^2)</code> as opposed to <code>O(n)</code> using a Counter</span>
<span class="comment-copy">I am aware of that but the question was not to find the fastest solution but how to do it. In case the list gets really long, a different approach would make certainly make sense.</span>
<span class="comment-copy">this also creates a new <code>set</code> for every iteration.</span>
<span class="comment-copy">At the time of my comment this had two more votes than the Counter approach so for future readers it is worth pointing out</span>
<span class="comment-copy">@Padraic Cunningham: Your approach is certainly more flexible and faster, +1.</span>
