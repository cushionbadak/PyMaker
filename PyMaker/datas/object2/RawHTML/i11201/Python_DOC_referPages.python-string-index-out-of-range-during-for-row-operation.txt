<div class="post-text" itemprop="text">
<p>Hope you can help. I'm trying to iterate over a .csv file and delete rows where the first character of the first item is a #. 
Whilst my code does indeed delete the necessary rows, I'm being presented with a "string index out of range" error. </p>
<p>My code is as below:</p>
<pre><code>input=open("/home/stephen/Desktop/paths_output.csv", 'rb')
output=open("/home/stephen/Desktop/paths_output2.csv", "wb")
writer = csv.writer(output)
for row in csv.reader(input):
    if (row[0][0]) != '#':
        writer.writerow(row)
input.close()
output.close()
</code></pre>
<p>As far as I can tell, I have no empty rows that I'm trying to iterate over. </p>
</div>
<div class="post-text" itemprop="text">
<p>Check if the string is empty with <code>if row[0]</code> before trying to index:</p>
<pre><code>input=open("/home/stephen/Desktop/paths_output.csv", 'rb')
output=open("/home/stephen/Desktop/paths_output2.csv", "wb")
writer = csv.writer(output)
for row in csv.reader(input):
    if row[0] and row[0][0] != '#': # here
        writer.writerow(row)
input.close()
output.close()
</code></pre>
<p>Or simply use <code>if row[0].startswith('#')</code> as your condition</p>
</div>
<div class="post-text" itemprop="text">
<p>You are likely running into an empty string.</p>
<p>Perhaps try </p>
<p>`if row and row[0][0] != '#':</p>
</div>
<div class="post-text" itemprop="text">
<p>Then why don't you make sure you don't bump into any of those even if they exist by checking if the line is empty first like so:</p>
<pre><code>input=open("/home/stephen/Desktop/paths_output.csv", 'rb')
output=open("/home/stephen/Desktop/paths_output2.csv", "wb")
writer = csv.writer(output)
for row in csv.reader(input):
    if row:
        if (row[0][0]) != '#':
            writer.writerow(row)
    else:
        continue
input.close()
output.close()
</code></pre>
<p>Also when working with *.csv files it is good to have a look at them in a text editor to make sure the delimiters and end_of_line characters are like you think they are. The <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer" rel="nofollow">sniffer</a> is also a good read.</p>
<p>Cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not provide working code (imports included) and wrap as usual the physical resources in context managers?</p>
<p>Like so:</p>
<pre><code>#! /usr/bin/env python
"""Only strip those rows that start with hash (#)."""
import csv

IN_F_PATH = "/home/stephen/Desktop/paths_output.csv"
OUT_F_PATH = "/home/stephen/Desktop/paths_output2.csv"
with open(IN_F_PATH, 'rb') as i_f, open(OUT_F_PATH, "wb") as o_f:
    writer = csv.writer(o_f)
    for row in csv.reader(i_f):
        if row and row[0].startswith('#'):
            continue
        writer.writerow(row)
</code></pre>
<p>Some notes:</p>
<ol>
<li>The closing of the files is automated by leaving the context blocks, </li>
<li>the names are better chosen, as input is well a keyword ... </li>
<li>you may want to include empty lines, I only read you want to strip comment lines from the question, so detect these and continue. </li>
<li>it is row[0] that is the first columns string and that startswith # natively mapped to the best matching simple string "method".</li>
</ol>
<p>In case you also might want to strip empty lines, than one could use the following condition to <code>continue</code>instead:</p>
<pre><code>if not row or row and row[0].startswith('#'):
</code></pre>
<p>and you should be ready to go.
HTH</p>
<p>To answer a comment on the above code line that causes also the skipping of blank input "Lines". 
In Python we have left to right (lazy evaluation) and short circuit for boolean expressions so:</p>
<pre><code>&gt;&gt;&gt; row = ["#", "42"]
&gt;&gt;&gt; if not row or row and row[0].startswith("#"):
...     print "Empty or comment!"
... 
Empty or comment!
&gt;&gt;&gt; row = []
&gt;&gt;&gt; if not row or row and row[0].startswith("#"):
...     print "Empty or comment!"
... 
Empty or comment!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suspect that there are lines with an empty first cell, so <code>row[0][0]</code> tries to access the first character of the empty string.</p>
<p>You should try:</p>
<pre><code>for row in csv.reader(input):
    if not row[0].startswith('#'):
        writer.writerow(row)
</code></pre>
</div>
<span class="comment-copy">its not an empty row, its probably a empty string in row[0]. <code>print row</code> will help you debug. Note that you could also use <code>grep -E -v '^#' input.csv &gt; output.csv</code></span>
<span class="comment-copy">Usually providing a stacktrace reported while executing the code is helpful as a stripped down version of the input file ...</span>
<span class="comment-copy">Use <code>.startswith('#')</code> to check if a string starts with a hash.</span>
<span class="comment-copy">Thanks Moses! I quickly realised that my Python knowledge was nowhere near the level it should be to be asking questions like this, and expecting to understand the answers. I've spent the past week refactoring my work, and realised I can achieve what I wanted to achieve in Javascript, a language I'm much more comfortable with, if I adopt a certain graphing package.</span>
<span class="comment-copy">do you mind explaining the if not row or row? What's the point since they cannot be both False?</span>
<span class="comment-copy">Sure, easy - will adapt the answer. Hint: Left to right (lazy evaluation) and short-circuit ...</span>
<span class="comment-copy">this will not work if <code>row[0] == ""</code>. you probably meant <code>row[0].startswith</code>.</span>
<span class="comment-copy">Of course. Fixed.</span>
<span class="comment-copy">@PadraicCunningham Thanks for the friendly reminder</span>
