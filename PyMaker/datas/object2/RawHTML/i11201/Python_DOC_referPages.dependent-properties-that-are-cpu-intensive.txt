<div class="post-text" itemprop="text">
<p>I am very often confronted to this case and did not manage to discover a stable way to deal with it.</p>
<p>Suppose I have a class defined like that:</p>
<pre><code>class MyClass(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b

    @property
    def c(self):
       """This method performs some heavy computations based on a and b properties"""
        # Some heavy computations only with a and b attributes
        return c
</code></pre>
<p>Property <code>c</code> may be now be retrieved by:</p>
<pre><code>&gt;&gt;&gt; obj = MyClass(a, b)
&gt;&gt;&gt; print obj.c
</code></pre>
<p>However, every time I ask for <code>obj.c</code>, the heavy computations will be performed, resulting in a poor performance code as <code>c</code> results from heavy computations and it would preferably be calculated only while <code>a</code> or <code>b</code> is set or modified.</p>
<p>What would the better way to deal with this case ? I am thinking of creating a <code>c_update</code> method to use as a decorator for some <code>@a.setter</code> and <code>@b.setter</code> decorated methods but is that the better way ?</p>
<p>Regards,</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a small pypi package that fits well: <a href="https://pypi.python.org/pypi/cached-property/1.2.0" rel="nofollow">cached-property</a></p>
<pre><code>from cached_property import cached_property

class MyClass(object):
    def __init__(self):
        pass

    @cached_property
    def c(self):
        # Heavy computation based on self.a / self.b
        return ...

    @property
    def a(self):
        return self._a

    @a.setter
    def a(self, value):
        self._a = value
        del self.c

    @property
    def b(self):
        return self._b

    @b.setter
    def b(self, value):
        self._b = value
        del self.c
</code></pre>
<p>Of course you could also build an abstraction for the <code>a</code>/<code>b</code> properties on top of that, that utilizes <code>del self.c</code>.</p>
<p>One benefit of using <code>cached_property</code> is that you can easily make the cache thread-safe by changing it to <code>threaded_cached_property</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>But what if I have a lot of XX dependent properties that rely on a and b values. Do I have to write an update_XX method for each of them and add this method to init and to each a.setter and b.setter ? That seems to me quite verbose...</p>
</blockquote>
<p>You can have the <code>c</code> value (and any other number of dependent properties) updated everytime either <code>a</code> or <code>b</code> is mutated, I implemented an <code>update_properties()</code> method below:</p>
<pre><code>class MyClass(object):
    def __init__(self, a, b):
        self._a = a
        self._b = b

        self.update_properties()

    @property
    def a(self):
        return self.a

    @a.setter
    def a(self, value):
        self._a = value
        self.update_properties()

    @property
    def b(self):
        return self._b

    @b.setter
    def b(self, value):
        self._b = value
        self.update_properties()

    def update_properties(self):
        self.c = self._a + self._b
        self.d = self._a * self._b
        self.e = self._a - self._b
        # self.f = ...
        # ...
        # self.z = ...
        # Can go on as long as you want
</code></pre>
<blockquote>
<p>Do you think it would be possible to implement this machinery as some decorators in order to lighten the code </p>
</blockquote>
<p>The verbosity seems to be only on the side that tracks the <em>free variables</em> (e.g. here <code>a</code> and <code>b</code>), so if I had to support an arbitrary number of those, I would implement a <code>MyClass.set_value(name, value)</code></p>
<pre><code>def set_value(self, name, value):
    setattr(self, name, value)
    self.update_properties()
</code></pre>
<p>So the idea here is that our <code>set_value()</code> can work with an arbitrary number of attributes. And it's possible to call it from <code>__init__</code> if you use <code>**kwargs</code> to unpack the key-values passed to the constructor.</p>
<p>One requirement here, since we haven't set the free variables as <code>@property</code> we're required to use <code>obj.set_value('a', 42)</code> instead of <code>obj.a = 42</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'd simply store the actual value of <code>c</code> in a private attribute and check if this is not <code>None</code>. Set this to <code>None</code> when either <code>a</code> or <code>b</code> changes.</p>
<p>So the "proper" way of doing this using properties would be:</p>
<pre><code>class MyClass(object):
    def __init__(self, a, b):
        self._a = a
        self._b = b
        self._c = None

    @property
    def a(self):
        return self._a

    @a.setter
    def a(self, value):
        self._a = value
        self._c = None

    @property
    def b(self):
        return self._b

    @b.setter
    def a(self, value):
        self._b = value
        self._c = None

    @property
    def c(self):
        if self._c is None:
            self._c = # compute c here
        return self._c
</code></pre>
<p>If you want to avoid creating all these properties and setters you probably want to hijack the <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow"><code>__getattr__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__setattr__" rel="nofollow"><code>__setattr__</code></a> methods instead:</p>
<pre><code>class MyClass(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self._c = None

    def __getattr__(self, name):
        if name == 'c':
            if self._c is None:
                self._c = # compute c here
            return self._c
        raise AttributeError(name)

    def __setattr__(self, name, value):
        if name == 'c':
            raise TypeError('You cannot modify property c directly')
        super(MyClass, self).__setattr__(name, value)
        if name in ('a', 'b'):
            super(MyClass, self).__setattr__('_c', None)
</code></pre>
<p>Note that this last solution could be extended to like 10 attributes <code>a1</code>, ..., <code>a10</code> without having to define 10 properties and setters.</p>
<p>It's probably a bit less robust.</p>
</div>
<div class="post-text" itemprop="text">
<p>So based on your answers, I managed to build a new answer using a dict for dependent properties.</p>
<pre><code>class MyClass(object):
    def __init__(self, a, b):
        self._properties = dict()
        self._a = a
        self._b = b

    def _update_dependent_properties(self):
        # Do computations for c1, c2...
        self._properties['c1'] = # c1 value
        self._properties['c2'] = # c2 value
        # ...

    @property
    def a(self):
        return self._a
    @property
    def b(self):
        return self._b

    @a.setter
    def a(self, value):
        self._properties.clean()
        self._a = value

    @b.setter
    def b(self, value):
        self._properties.clean()
        self._b = value

    @property
    def c1(self):
        try:
            return self._properties['c1']
        except KeyError:
            _update_dependent_properties()
            return self._properties['c1']

    @property
    def c2(self):
        try:
            return self._properties['c2']
        except KeyError:
            _update_dependent_properties()
            return self._properties['c2']
</code></pre>
<p>This seem to do the trick but it is still quite verbose... and I have still to write a property for each of the dependent property I am expecting. However, it does force the calculation of <code>update_dependent_properties()</code> when either attribute <code>a</code> or <code>b</code> is modidied.</p>
<p>I wonder if it does not exist a module to do it. It seem that my problem sounds like memoize technique... and may a decorator lighten the code by systematizing the procedure ?</p>
</div>
<span class="comment-copy">Thanks, that's a good starting point but it seem from this nice module that the property must be already initialized in the class constructor __init__() what I would like to avoid as properties should be calculated only on request. However that decorator implementation is very near from what I would like to achieve so I am relying on it to make my own.</span>
<span class="comment-copy">@frongere, no, you do not need to initialize anything in <code>__init__</code>, I was merely following your initial example code. The only change is that <code>a</code> and <code>b</code> need to be properties (as opposed to naked attributes), so that you can invalidate the cache when it is set. Note that <code>cached_property</code> is <a href="https://github.com/pydanny/cached-property/blob/master/cached_property.py" rel="nofollow noreferrer">just 9 lines of code</a>, so you can easily build your own variant.</span>
<span class="comment-copy">Sorry for late reply !! I had to leave my computer for a few days. I did not read deep enough your code snippet :/ This is an elegant solution for not to have to manage directly internal properties. I played a bit with it and it works pretty good. However, it has become a bottleneck in my code as it forces too many hidden function calls while accessing properties frequently... So I now directly manage my properties into a dict that is property of my class... Thanks for the link nevertheless. May be usefull :)</span>
<span class="comment-copy">OK, so I have to implement a setter method for each attribute whose value modification changes that of c in order to trig the update_c method where the heavy computations are done. All right. But what if I have a lot of XX dependent properties that rely on a and b values. Do I have to write an update_XX method for each of them and add this method to <b>init</b> and to each a.setter and b.setter ? That seems to me quite verbose...</span>
<span class="comment-copy">Hi, do you think it would be possible to implement this machinery as some decorators in order to lighten the code ?</span>
