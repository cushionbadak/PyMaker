<div class="post-text" itemprop="text">
<p>I am making a rogue-like game and was wondering if there was a way to allow a player to drop an item by entering: <code>Drop [Item Name]</code></p>
<p><code>Drop</code> being the command and the item name being one located in your inventory, e.g. if I had a rock that I wanted to get rid of I would input: <code>Drop Rock</code>.</p>
<pre><code>CO = "Rock"

Inventory = {"Slot 1" : "Empty","Slot 2" : "Empty","Slot 3" : "Empty","Slot 4" : "Empty","Slot 5" : "Empty"}

def DROP():

    Slot_Number = int(input("\nInventory Slot to drop: "))
    Slot_Number = str(Slot_Number)
    Slot_Number = ("Slot " + Slot_Number)
    CO = Inventory[Slot_Number]
    Inventory[Slot_Number] = "Empty"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using numbered slots (rather than e.g. "bag", "pocket") a simpler approach would be to use a list for your inventory. You can index into a list, and find items in a list by value, easily.</p>
<p>I would also suggest you use <code>None</code> or at least an empty string <code>""</code> to represent the empty slot ( as these both equate to <code>False</code>:</p>
<pre><code>Inventory = ["","","","","","",""]
</code></pre>
<p>You can then adapt your function as follows:</p>
<pre><code>def DROP():
    Slot_Number = int(input("\nInventory Slot to drop: "))
    Inventory[Slot_Number] = ""
</code></pre>
<p>Note that because Python indexing is zero-based, if you want to allow the user to enter <code>1</code> for the first slot, rather than <code>0</code>, you will need to subtract one from the provided value.</p>
<pre><code>def DROP():
    Slot_Number = int(input("\nInventory Slot to drop: "))
    Inventory[Slot_Number-1] = ""
</code></pre>
<p>To print the inventory in a nice list you could use something like the following. The <code>i or "Empty"</code> cosntruction might be new to you:</p>
<pre><code>for n, i in enumerate(Inventory):
    print("%d - %s" % (n+1, i or "Empty"))
</code></pre>
<p>In <code>i or "Empty"</code> we make use of the <em>falsey</em> value of an empty string together with <code>or</code> shortcutting. If <code>i</code> is <code>True</code> the value in <code>i</code> will be shown, if it is <code>False</code> (e.g. empty string) the value after the <code>or</code> will be printed instead. An equivalent without this would be:</p>
<pre><code>for n, i in enumerate(Inventory):
    if i:
        print("%d - %s" % (n+1, i))    
    else:
        print("%d - Empty" % (n+1))    
</code></pre>
<p>Finally, an example of a <code>drop_by_name</code> function, where you use <code>.index()</code> to find the location of something in your list <code>Inventory</code> and remove it:</p>
<pre><code>def drop_by_name():
    item_name = input('\nEnter the name of the item to drop: ')
    if item_name in Inventory:
        Slot_Number = Inventory.index(item_name)
        Inventory[Slot_Number] = ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you might want to take a look at <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow">cmd</a>, which makes command handling much easier</p>
<p>you can create functions for each command, that are then being called</p>
</div>
<div class="post-text" itemprop="text">
<p>I took it one step further than @mfitzp and made it all one line of code so that <em>Drop Stick</em> will drop a stick. Here is the code I used:</p>
<pre><code>def DROP(CHOICE):

    global NV

    NV = CHOICE[5:]
    str(NV)

CHOICE = input("\nWhat do you want to do (type Help for list of commands): ")

if CHOICE.startswith("Drop ") or CHOICE.startswith("drop ") or CHOICE.startswith("DROP "):
    DROP(CHOICE)
    if NV in I:
            SN = I.index(NV)
            I[SN] = ""
    CO = NV
</code></pre>
</div>
<span class="comment-copy">Take a look at using <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">ArgParse</a> so that you can parse arguments passed via the command line. Once you have tried something, edit your question with what worked/didn't work and you'll be able to get more help.</span>
