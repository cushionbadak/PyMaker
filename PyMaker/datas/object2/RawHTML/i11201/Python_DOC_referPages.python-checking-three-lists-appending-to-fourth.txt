<div class="post-text" itemprop="text">
<p>I have 4 lists:</p>
<p>"criticallist" `</p>
<pre><code>[ade4c7059e17ab9e47d2aaec6cf04a9d, 882edee4cc71806190ca43993e8b2eb5, nekspzwjxhqroiu.com, htfbzqewll.org]`
</code></pre>
<p>"master" </p>
<pre><code>[4d7d1c89529bcfcbbbbf9d6a2ba42cb5, 9f26da4de1653f609e7b4bcaade63daa]
</code></pre>
<p>and then each function has separate lists of md5's - [Ex. 49f12a7b358c7f7cba005610210418aa]
"md5-ThreatExpert" and "md5-HybridAnalysis", both of inside their respective functions that I rename to "md5threat".</p>
<p>and then in each function I'm trying to compare "criticallist" and "master" against "md5threat".</p>
<p>Anything from "md5threat" that is NOT in either "criticallist" or "master" is added to "md5broinput".<br/>
AND 
if it's added to "md5broinput" it's also appended back to "master".</p>
<p>"md5broinput" is new every single day and I'll wipe "master" every week.  </p>
<pre><code>def md5threatexpertcritical():
    filename = open("md5-ThreatExpert-bro", 'w')   #input file for bro script gone through critical checks
    md5threat = "md5-ThreatExpert"  #latest md5's from MISP

    #create bromaster if doesn't exist
    if os.path.exists("bromasterlist"):
        pass
    else:
        f = file("bromasterlist", "w")
        f.close()

    master        = "bromasterlist"  #master bro list that we've already added to bro
    PATH          = "/opt/critical-stack/frameworks/intel"
    CRITICAL      = "master-public.bro.dat" 
    CRITICALSTACK = os.path.join(PATH, CRITICAL)
    criticallist  = "/home/money/Documents/hybrid/critical" 
    whitelist     = open(criticallist,'w')
    with open(CRITICALSTACK,'r') as CRITICALSTACK1:
        reader   = csv.reader(CRITICALSTACK1, delimiter='\t')
        CRITICAL = []
        for row in reader:
            CRITICAL.append(row[0])
    whitelist.write("\n".join(CRITICAL))  


    x=[]
    y=[]
    z=[]
    md5broinput=[]
    with open(criticallist, 'r') as critical:
        for line in critical:
            line = line.strip()
            x.append(line)  
        with open(master, 'r') as bromaster:
            for line in bromaster:
                line = line.strip()
                y.append(line)
            with open(md5threat, 'r') as md5threat:
                for line in md5threat:
                    line = line.strip()
                    z.append(line)
                for md5 in z:
                    if md5 in y:
                        print md5+" is in bromaster"
                        pass
                    elif md5 in x:
                        print md5+" is in critical"
                        pass
                    elif md5 not in x and y:                        
                        y.append(md5)
                        md5broinput.append(md5)
    filename.write("\n".join(md5broinput))
    filename.close()
    f=open(master,'a')
    f.write("\n".join(set(y)))
    f.write("\n")
    f.close()

def md5hybridanalysiscritical():
    filename      = open("md5-HybridAnalysis-bro", 'w+')   
    md5threat     = "md5-HybridAnalysis"  #latest md5's from MISP

    master        = "bromasterlist"  #master bro list that we've already added to bro
    PATH          = "/opt/critical-stack/frameworks/intel"
    CRITICAL      = "master-public.bro.dat" 
    CRITICALSTACK = os.path.join(PATH, CRITICAL)
    criticallist  = "/home/money/Documents/hybrid/critical" 

    x=[]
    y=[]
    z=[]
    md5broinput=[]
    with open(criticallist, 'r') as critical:
        for line in critical:
            line = line.strip()
            x.append(line)  
        with open(master, 'r') as bromaster:
            for line in bromaster:
                line = line.strip()
                y.append(line)
            with open(md5threat, 'r') as md5threat:
                for line in md5threat:
                    line = line.strip()
                    z.append(line)
                for md5 in z:
                    if md5 in y:
                        print md5+" is in bromaster"
                        pass
                    elif md5 in x:
                        print md5+" is in critical"
                        pass
                    elif md5 not in x and y:                        
                        y.append(md5)
                        md5broinput.append(md5)
    filename.write("\n".join(md5broinput))
    filename.close()
    f=open(master,'a')
    f.write("\n".join(set(y)))
    f.write("\n")
    f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this as refactor of your code. The code is using <code>"with"</code> as context when <code>list comprehension</code> is more pythonic.  Added @nbryans answer.. </p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>
<pre><code>filename  = open("md5-HybridAnalysis-bro", 'wb+') 
md5threat = open("md5-HybridAnalysis" , 'rb')  #

x = [line.strip() for line in  criticallist ]
y = [line.strip() for line in  master]
z = [line.strip() for line in  md5threat]
md5broinput = []

#print x[:6]
#print y[:6]
#print z[:6]

for md5 in z:
    if md5 in y:
        print md5+" is in bromaster"
    elif md5 in x:
        print md5+" is in critical"
    else:                       
        y.append(md5)
        md5broinput.append(md5)


filename.write("\n".join(md5broinput))
filename.close()
f=open(master,'a')
f.write("\n".join(y))
f.write("\n")
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand the question correctly, you want</p>
<pre><code>for md5 in z:
    if md5 in y:
        print md5+" is in bromaster"
        pass
</code></pre>
<p>As it's written now, you're saying it "is in bromaster" after you check that <code>if md5 not in y</code>, where <code>y</code> is master.</p>
</div>
<div class="post-text" itemprop="text">
<p>So the code says when md5 NOT in y, so it hit this if but not the else which appends.</p>
<p>Current code:</p>
<pre><code>        for md5 in z:
            if md5 not in y:
                print md5+" is in bromaster"
                pass
            elif md5 in x:
                print md5+" is in critical"
                pass
            else:                       
                y.append(md5)
                md5broinput.append(md5)
</code></pre>
<p>I think the code should say:</p>
<pre><code>        for md5 in z:
            if md5 in y:                 #&lt;--- This is the line changed
                print md5+" is in bromaster"
                pass
            elif md5 in x:
                print md5+" is in critical"
                pass
            else:                       
                y.append(md5)
                md5broinput.append(md5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest to clean up the code to not get lost in the many levels of info you want to compare with each other. One way is to not name the content from say criticallist into x (when retrieved as list) wait a second ...</p>
<p>What about this:</p>
<pre><code>#! /usr/bin/env python
from __future__ import print_function

md5threat = "md5-HybridAnalysis"
criticallist = "some_criticallist.txt"
master = "some_master.txt"
x_crit, y_mast, z_md5t = [], [], []
md5broinput = []
with open(criticallist, 'r') as critical:
    for line in critical:
        x_crit.append(line.strip())
    with open(master, 'r') as bromaster:
        for line in bromaster:
            y_mast.append(line.strip())
        with open(md5threat, 'r') as md5threat:
            for line in md5threat:
                z_md5t.append(line.strip())
            for a_md5 in z_md5t:
                if a_md5 in y_mast:
                    print(a_md5 + " is in bromaster")
                    pass
                elif a_md5 in x_crit:
                    print(a_md5 + " is in critical")
                    pass
                else:
                    y_mast.append(a_md5)
                    md5broinput.append(a_md5)

with open("md5-HybridAnalysis-bro", 'w+') as o_f:
    o_f.write("\n".join(md5broinput))

with open(master, 'a') as m_f:
    m_f.write("\n".join(y_mast) + '\n')
</code></pre>
<p>And then as @nbryans already spotted change:</p>
<pre><code>            for a_md5 in z_md5t:
                if a_md5 not in y_mast:
                    print(a_md5 + " is in bromaster")
                    pass
</code></pre>
<p>to:</p>
<pre><code>            for a_md5 in z_md5t:
                if a_md5 in y_mast:
                    print(a_md5 + " is in bromaster")
                    pass
</code></pre>
<p>I would prefer @merlins answer. If you want to further use the context managers and at the same time build full lists, then why not first load from files, leave the blocks one after the other, and than perform the analyitic matching loops - to have a serial collection phase and a focused combination algortihm with only the lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks @Merlin for you help its much appreciated and I'm reworking it with comprehension.  I gave you points where Icould just for that!</p>
<p>If you look at where I made my mistake I was checking the list y and then appending to it at the end within the loop so it was like an neverending loop -</p>
<p>I replaced - </p>
<pre><code>            for md5 in z:
                if md5 in y:
                    print md5+" is in bromaster"
                    pass
                elif md5 in x:
                    print md5+" is in critical"
                    pass
                elif md5 not in x and y:                        
                    y.append(md5)  #I got rid of this line and it works great. 
                    md5broinput.append(md5)
</code></pre>
<p>with - </p>
<pre><code>            for md5 in z:
                if md5 in y:
                    print md5+" is in bromaster"
                    pass
                elif md5 in x:
                    print md5+" is in critical"
                    pass
                elif md5 not in x and y:                        
                    md5broinput.append(md5)
</code></pre>
<p>I appreciate it guys I do hope at some point I'm on here helping rookie!</p>
</div>
<span class="comment-copy">the first sentence of your question sais you have four lists called "criticallist, master, md5threat, md5broinput", <b>Only one of these are a list in your code</b> the others lists are noted by the variables <code>x,y, z</code> which makes it much harder to understand after reading the descriptions about the <code>master</code> list and others.</span>
<span class="comment-copy">@Merline Love this one, since I know I need to move to comprehensions more but it gave me -- &lt;type 'set'&gt;     &lt;type 'set'&gt; m is in bromaster d is in critical h is in critical r is in bromaster e is in bromaster a is in bromaster t is in bromaster e is in bromaster r is in bromaster  s is in bromaster all the lists kind of look like this - 862a5c99d01a9ba9bd7b92b33d76ec39 aa101c5e81817f8d8cc95490c00b3591</span>
<span class="comment-copy">Hey @Merlin - unfortunately, they all look exactly like that either 882edee4cc71806190ca43993e8b2eb5 or nekspzwjxhqroiu.com. Either md5's or urls.</span>
<span class="comment-copy">Ah, it's a file with a list of md5's in it, that I'm not calling directly.  I didn't think that made a difference, it doesn't seem to but I'm not sure.</span>
<span class="comment-copy">sorry, I edited it to try and clear it up a little.  I really appreciate the help!</span>
<span class="comment-copy">Why are you showing edits that dont use the code from the answer above? I edited your code to  make it more readable.</span>
<span class="comment-copy">Check out  my refactor.</span>
<span class="comment-copy">Thanks @Merlin I first did not get it, but is better to give a correct code, instead of my display the refactored wrong code and then a replacement recipe. I often request that myself from people not showing easy to copy and paste code in questions, then I do it myself. Thanks again ;-)</span>
