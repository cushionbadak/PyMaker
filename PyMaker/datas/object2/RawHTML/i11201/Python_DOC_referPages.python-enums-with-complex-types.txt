<div class="post-text" itemprop="text">
<p>I'm new to Python and I'm wondering if I can build enums with complex structures, not just primitive types. For instance (in pseudo-code):</p>
<pre><code>Point::Enum
  x, y
  constructor ( x, y ) {
    ...
  }

  bottom_left = Point ( 0, 0 )
  top_left = Point ( 0, 100 )
  top_right = Point ( 100, 100 )
  bottom_right = Point ( 100, 0 )
</code></pre>
<p>So far, I could only find Python documentation that mentions enums with strings or ints. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want <code>Point</code> as a separate entity from the <code>Enum</code> that tracks the corners, then you need them to be separate:</p>
<pre><code>from enum import Enum

class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return 'Point(%r, %r)' % (self.x, self.y)

class Corner(Enum):
    BottomLeft = Point(0, 0)
    TopLeft = Point(0, 100)
    TopRight = Point(100, 100)
    BottmRight = Point(100, 0)
</code></pre>
<p>Doing it this way means that each <code>enum</code> contains a <code>Point</code> as its value, but is not a <code>Point</code> itself:</p>
<pre><code>&gt;&gt;&gt; Corner.BottomLeft
&lt;Corner.BottomLeft: Point(0, 0)&gt;
&gt;&gt;&gt; Corner.BottomLeft.value
Point(0, 0)
</code></pre>
<p>If you want the <code>enum</code> members to <em>be</em> a <code>Point</code>, then mix in the <code>Point</code> class:</p>
<pre><code>from enum import Enum

class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return 'Point(%r, %r)' % (self.x, self.y)

class Corner(Point, Enum):
    BottomLeft = 0, 0
    TopLeft = 0, 100
    TopRight = 100, 100
    BottmRight = 100, 0

&gt;&gt;&gt; Corner.TopLeft
&lt;Corner.TopLeft: (0, 0)&gt;
&gt;&gt;&gt; isinstance(Corner.TopLeft, Point)
True
&gt;&gt;&gt; Corner.TopLeft.value
(0, 100)
&gt;&gt;&gt; Corner.TopLeft.x
0
&gt;&gt;&gt; Corner.TopLeft.y
100
</code></pre>
<p>Finally, if all you need is for the <code>enum</code>s to have the <code>x</code> and <code>y</code> attributes:</p>
<pre><code>from aenum import Enum

class Corner(Enum):
    __init__ = 'x y'
    BottomLeft = 0, 0
    TopLeft = 0, 100
    TopRight = 100, 100
    BottmRight = 100, 0

&gt;&gt;&gt; Corner.TopLeft
&lt;Corner.TopLeft: (0, 100)&gt;
&gt;&gt;&gt; Corner.TopLeft.value
(0, 100)
&gt;&gt;&gt; Corner.TopLeft.x
0
&gt;&gt;&gt; Corner.TopLeft.y
100
</code></pre>
<p>Note that that last example is using the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a> package<sup>1</sup>.  You can accomplish the same thing with either <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code></a> or the stdlib <code>enum</code> by writing an <code>__init__</code> for the <code>Point</code> class.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can declare them as global variables like <code>BOTTOM_LEFT</code>, <code>TOP_LEFT</code>, <code>TOP_RIGHT</code>, <code>BOTTOM_RIGHT</code>.</p>
<p>As you might be aware unlike other languages (C++, Java) Python doesn't have, You just declare it and don't change it (Gentleman's game)</p>
<p>Yet Alex Martelli's <a href="http://code.activestate.com/recipes/65207-constants-in-python" rel="nofollow">recipe</a> can come handy to emulate const in Python</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Enum:
    bottom_left = Point(0, 0)
    top_left = Point(0, 100)
    top_right = Point(100, 100)
    bottom_right = Point(100, 0)
</code></pre>
</div>
<span class="comment-copy">There is no restriction on type, plus in Python strings and ints are 'complex types'.</span>
<span class="comment-copy">There are no primitive types in Python</span>
<span class="comment-copy">OK, there aren't, yet 1 or 'blah' are rather different than (0,0) :-)</span>
