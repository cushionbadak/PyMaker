<div class="post-text" itemprop="text">
<p>Situation: 
I'm new to python and currently trying to learn the ropes, I've attempted creating a linked list class to assist in getting a better understanding of the language and its structures. I know that the <code>__repr__</code> function is basically supposed to return the same thing as <code>__str__</code> but I'm unsure on what the actual difference is. </p>
<p>Here's my class so far: </p>
<pre><code>class LinkedList:
    class Node:
        def __init__(self, val, prior=None, next=None):
            self.val = val
            self.prior = prior
            self.next  = next

    def __init__(self):
        self.head = LinkedList.Node(None) 
        self.head.prior = self.head.next = self.head 
        self.length = 0

    def __str__(self):
        """Implements `str(self)`. Returns '[]' if the list is empty, else
        returns `str(x)` for all values `x` in this list, separated by commas
        and enclosed by square brackets. E.g., for a list containing values
        1, 2 and 3, returns '[1, 2, 3]'."""
        if len(self)==0:
            return '[]'
        else:
            return '[' +  ', '.join(str(x) for x in self) + ']'

    def __repr__(self):
        """Supports REPL inspection. (Same behavior as `str`.)"""
        return '[' +  ', '.join(str(x) for x in self) + ']'
</code></pre>
<p>When I test this code against the below code, I'll get an error basically saying the blank string '[]' isn't actually being returned when using the repr function. How could I edit this methods body to fix this issue? I've also tried <code>return str(self)</code> and I'm not sure why that won't work either.</p>
<pre><code>from unittest import TestCase
tc = TestCase()

lst = LinkedList()
tc.assertEqual('[]', str(lst))
tc.assertEqual('[]', repr(lst))

lst.append(1)
tc.assertEqual('[1]', str(lst))
tc.assertEqual('[1]', repr(lst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__repr__</code> function returns a string representation of a Python object that may be evaluated by the Python interpreter to instantiate another instance of the object. So if you had a list:</p>
<pre><code>x = ['foo', 'bar']
</code></pre>
<p>Its <code>__repr__</code> string would be:</p>
<pre><code>x_str = repr(x)
print(x_str)
&gt;&gt;&gt;&gt;
"['foo', 'bar']"
</code></pre>
<p>And you could do:</p>
<pre><code>x2 = eval(x_str)
print(type(x2))
&gt;&gt;&gt;&gt;
&lt;class 'list'&gt;
</code></pre>
<p>It's a way to get a string representation of a Python object that can be converted back into a new instance of said object.</p>
<p>Basically the difference between <code>__str__</code> and <code>__repr__</code> is that the former returns a string representation of the object meant to be read by a person and the latter returns a string representation of the object meant to be parsed by the Python interpreter. Be very careful with this!</p>
<p>In your example code, it appears that <code>__str__</code> and <code>__repr__</code> return the same string representation. That's fine. However, if you wanted, you could make your <code>__str__</code> return some prettier formatted version (for instance with carriage returns and no brackets), but <code>__repr__</code> should always return a string that could be parsed by the Python interpreter to reconstruct the object.</p>
</div>
<span class="comment-copy"><i>"I know that the <code>__repr__</code> function is basically supposed to return the same thing as <code>__str__</code>"</i> - I'm not sure how you know that, but that's not right, see the docs on <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a>.</span>
<span class="comment-copy">The code you've shown can't be run as written (you've left out the <code>__len__</code> and <code>__iter__</code> methods, at least), which makes troubleshooting it very difficult. While we appreciate a concise question, we need a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> that actually works!</span>
<span class="comment-copy">This is a great way to think about repr! I was wondering how I should structure my output and this answers it great. However, it should be noted that repr and eval should not be used as a serializer because there are instances where this is broken. But this is a great standard for creating repr's.</span>
