<div class="post-text" itemprop="text">
<p>I need to feed <em>local variable</em> from one <code>python</code> file to another, combine the variables there and Then get the other variables back into first file.</p>
<p>I looked at SO discussions for <code>cyclic dependency</code> and <code>combining local and global variables</code>, but it does not seem to solve my problem.</p>
<p>Here is skeleton example of what I am trying to accomplish.<br/>
Couple of <code>python</code> scripts generates reports. </p>
<p><strong>#report1.py</strong></p>
<pre><code>report_name = "daily_report1"
</code></pre>
<p><strong>#report2.py</strong></p>
<pre><code>report_name = "daily_report2"
</code></pre>
<p><code>report_name</code> is the variable for report name and needs to be sourced in <code>mysettings.py</code> that holds most of the environment variables and constants.</p>
<p><strong>#mysettings.py</strong></p>
<pre><code>save_location=  os.getcwd()+ "\\" + report_name + "\\"
report_file = report_name + "_" +  \ 
str(datetime.datetime.today().strftime('%m_%d_%Y')) + ".xlsx"
</code></pre>
<p>The code then queries a server and gets a <code>csv</code> file and converts to <code>xlsx</code> and modifies as per needs.</p>
<p>Back in repor?.py</p>
<p><strong>#report1.py</strong></p>
<pre><code>import mysettings.py

report_name = "daily_report1"

wb = openpyxl.load_workbook(report_file)

#Lots of other code

wb.save(save_location + report_file)
</code></pre>
<p><strong>#report2.py</strong></p>
<pre><code>import mysettings.py

report_name = "daily_report2"

wb = openpyxl.load_workbook(report_file)

#Lots of other code

wb.save(save_location + report_file)
</code></pre>
<p>Challenge is, How do I feed in <code>report_name</code> to <code>mysettings.py</code> and then get the combined variable back in report1.py and report2.py</p>
<p>Once its working, there will be other reports added, hence I wanted to get variables/settings streamlined.</p>
<p>I also wanted to declare as less variables as possible in all the <code>reports?.py</code> and instead manage them globally in <code>mysettings.py</code></p>
<p>Any thoughts input is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should <em>define</em> a function in mysettings.py and <em>execute</em> it in other files:</p>
<p>#mysettings.py</p>
<pre><code>def getsettings(report_name):
    save_location=  os.getcwd()+ "\\" + report_name + "\\"
    report_file = report_name + "_" +  \ 
    str(datetime.datetime.today().strftime('%m_%d_%Y')) + ".xlsx"
    return save_location, report_file
</code></pre>
<p>#report1.py</p>
<pre><code>import mysettings.py

report_name = "daily_report1"
save_location, report_file = mysettings.getsettings(report_name)
wb = openpyxl.load_workbook(report_file)

#Lots of other code
wb.save(save_location + report_file)
</code></pre>
<p>That way you do not need to use global variables across different scripts</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok the most strait forward way would be to execute the code in <code>mysettings.py</code> inside the report modules:</p>
<pre><code>report_name = "blah"

with open("mysettings.py","r") as common_code:
    exec(f.read(), globals()) #the globals() is actually implied if there is no second argument

print(report_file)
</code></pre>
<p>However passing several variables between modules is usually handled by an <code>environment</code> dictionary, so you could have your <code>mysettings.py</code> have a function like this:</p>
<pre><code>def generate_report_file(environ):
    report_name = environ["report_name"]
    environ["save_location"] =  os.getcwd()+ "\\" + report_name + "\\"
    environ["report_file"] = report_name + "_" +  \ 
             str(datetime.datetime.today().strftime('%m_%d_%Y')) + ".xlsx"
</code></pre>
<p>Then in the report files you can handle the environ dict manually:</p>
<pre><code>environ = {}
environ["report_name"] = "blah"

mysettings.generate_report_file(environ)

print(environ["report_file"])
</code></pre>
<p>Or take advantage of the fact that the global namespace is kept track of with a dictionary:</p>
<pre><code>report_name = "blah"

mysettings.generate_report_file(globals())

print(report_file)
</code></pre>
</div>
<span class="comment-copy">have you tried running any of your hypothetical scripts? <code>import mysettings.py</code> is invalid and <code>report_name</code> is not defined in the global scope of <code>mysettings</code> module.  None of your example files make any sense!</span>
<span class="comment-copy">Multiple modules do not share global namespaces, use a function to define <code>report_file</code> based on some <code>report_name</code> and then use it with <code>mysettings.generate_report_file(report_name)</code> in the other modules.</span>
<span class="comment-copy">@Tadhg, I cant share actual file/code as its related to work. It working fine except I have all the variables listed in <code>report1.py</code> , <code>report2.py</code> instead of <code>mysettings.py</code>. I cant figure out how to source <code>report_name</code> in <code>mysettings.py</code>. also I may have more reports and I would need to update changes everywhere, which is what I am trying to avoid. thanks for your reply.</span>
<span class="comment-copy">so you <i>want</i> to basically <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code>ute</a> the code from <code>mysettings.py</code> in the scope of the reports?</span>
<span class="comment-copy">Code will be executed in the <code>report.py</code> , <code>report2.py</code> since each report formats the data differently. I need to have all the needed variable in <code>mysettings.py</code> except which are report specific. Unfortunately, since the report name is prefix for <code>modified reports</code> and <code>report_folder</code>, I am having issues combining it with global names in another file (mysettings.py). Within same files <code>report</code>.py` is no problem.</span>
