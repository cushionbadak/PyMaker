<div class="post-text" itemprop="text">
<p>Using Python 3.4, I get <code>SyntaxError: invalid syntax</code> here:</p>
<pre><code>&gt;&gt;&gt; xlist = [1,2,3,4,5]
&gt;&gt;&gt; [yield(x) for x in xlist]
SyntaxError: invalid syntax
</code></pre>
<p>But this generates a generator object:</p>
<pre><code>&gt;&gt;&gt; [(yield(x)) for x in xlist]
&lt;generator object &lt;listcomp&gt; at 0x00000076CC8E5DB0&gt;
</code></pre>
<p>Are round brackets around yield required?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement" rel="nofollow noreferrer"><code>yield</code> keyword</a> can be used in two ways: As a statement, and as an expression.</p>
<p>The most common use is as a statement within generator functions, usually on its own line and all. It can be used like this:</p>
<pre><code>yield &lt;expr&gt;
yield from &lt;expr&gt;
</code></pre>
<p>The yield expression however can be used wherever expressions are allowed. However, they require a special syntax:</p>
<pre><code>(yield &lt;expr&gt;)
(yield from &lt;expr&gt;)
</code></pre>
<p>As you can see, the parentheses are part of the syntax to make <code>yield</code> work as an expression. So it’s syntactically not allowed to use the <code>yield</code> keyword as an expression without parentheses. That’s why you need to use parentheses in the list comprehension.</p>
<p>That being said, if you want to use list comprehension syntax to create a generator, you should use the generator expression syntax instead:</p>
<pre><code>(x for x in xlist)
</code></pre>
<p>Note the parentheses instead of the square brackets to turn this from a list comprehension into a generator expression.</p>
<hr/>
<p>Note that <a href="https://bugs.python.org/issue10544" rel="nofollow noreferrer">starting with Python 3.7</a>, <code>yield</code> expressions are deprecated within comprehensions and generator expressions (apart from within the iterable of the left-most <code>for</code> clause), to ensure that comprehensions are properly evaluated. Starting with Python 3.8, this will then cause a syntax error.</p>
<p>This makes the exact list comprehension in the question a deprecated usage:</p>
<pre><code>&gt;&gt;&gt; [(yield(x)) for x in xlist]
&lt;stdin&gt;:1: DeprecationWarning: 'yield' inside list comprehension
&lt;generator object &lt;listcomp&gt; at 0x000002E06BC1F1B0&gt;
</code></pre>
</div>
<span class="comment-copy">Its worth noting that the parentheses around <code>x</code> in your examples is not doing anything. <code>yield</code> is a keyword, not a function.</span>
<span class="comment-copy">Don't use <code>yield</code> in a comprehension. It does something crazy that's never what you want, and it should really be a syntax error.</span>
<span class="comment-copy">if you meant <code>(x for x in xlist)</code> literally then <code>iter(xlist)</code>  should be used instead.</span>
<span class="comment-copy">you probably want <code>yield from xlist</code></span>
