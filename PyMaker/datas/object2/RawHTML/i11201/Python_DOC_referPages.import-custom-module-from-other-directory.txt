<div class="post-text" itemprop="text">
<p>Let's say I have a custom module in:</p>
<pre><code>/basexx_yy/subdir1/subdir2/subdir3/subdir4/custom_module.py
</code></pre>
<p>And the script which needs to import <code>custom_module.py</code>is located at:</p>
<pre><code>/basexx_yy/subdir1/otherdir/script.py
</code></pre>
<p>The <code>basexx_yy</code> is a dir with a dynamic name, consider <code>xx</code> and <code>yy</code> to be time stamps, let's say for the sake of clarity that <code>xx</code> is day of the week (01 = Monday - 05 = Friday) and <code>yy</code> is week number (<code>subdir1</code> - <code>subdir4</code> are constant). So the full path to <code>custom_module.py</code> cannot be included as a static address. Since the subdirs are constant, I wrote the following code:</p>
<pre><code>import os
import sys
cwd = os.getcwd()
split = cwd.split('\\')
if 'subdir1' in split:
    parentdir = cwd.split('subdir1')
    sys.path.insert(0, os.path.join(parentdir[0], 'subdir1', 'subdir2', 'subdir3', 'subdir4'))
else:
    sys.exit("'subdir' dir not found! Run the script from within basedir.")

import custom_module
</code></pre>
<p>It does not, however, work. I'd appreciate some clarity as I cannot see why this doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not exactly clear from your question what your situation is, but here goes as it was <em>designed to be used</em>:</p>
<ul>
<li>A <em>package</em> contains a <code>setup.py</code> and can be installed using <code>pip</code>.</li>
<li>A <em>module</em> lives inside a package or a module and contains an <code>__init__.py</code>.</li>
</ul>
<p>Your package should have a structure like</p>
<pre><code>setup.py
basexx_yy/
          __init__.py
          something_else.py
          subdir1/
                  __init__.py
                  more_files.py
                  otherdir/
                           script.py
                  subdir2/
                          __init__.py
                          etc.py
                          subdir3/
                                  __init__.py
                                  pp.py
                                  subdir4/
                                          __init__.py
                                          custom_module.py
</code></pre>
<p><code>basexx_yy</code> being a package means it can be installed into your python library collection using</p>
<pre><code>pip install basexx_yy
</code></pre>
<p>or, while developing</p>
<pre><code>pip install -e basexx_yy
</code></pre>
<p>Afterwards any script (it may even be completely outside your package) can do</p>
<pre><code>import basexx_yy
</code></pre>
<p>and also deep import like</p>
<pre><code>import basexx_yy.subdir1.subdir2.subdir3.subdir4.custom_module as cm

cm.sqrt(4)
</code></pre>
<p>or, any file in your module tree (<code>otherdir</code> is missing <code>__init__.py</code> so it is outside the module tree and cannot do this) can do relative imports.</p>
<p>e.g. <code>custom_module.py</code> can do</p>
<pre><code>from . import custom_modules
from .. import pp
from ... import etc
from .... import more_files
from ..... import something_else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I agree with Nils Werner, that you most probably want to restructure your package(s).</p>
<p>Anyway, your code should work! Only problem is that you use</p>
<pre><code>split = cwd.split('\\')
</code></pre>
<p>instead of</p>
<pre><code>split = cwd.split(os.path.sep)
</code></pre>
</div>
<span class="comment-copy">Is the whole thing a package and are <code>subdir*</code> modules? If not, why not?</span>
<span class="comment-copy">Yes, <code>custom_module.py</code> is a custom made package that can be imported in Python (i have done it for scripts within the same dir as <code>custom_module</code>) <code>subdir*</code> are directories.</span>
<span class="comment-copy">I don't think we are <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">talking about the same thing</a>: <code>custom_module.py</code> being a package makes no sense. I would think <code>basexx_yy</code> is a package and all <code>subdir*</code> are modules (they contain an <code>__init__.py</code>).</span>
<span class="comment-copy">Oh, my apologies, none of the directories listed here are modules. (none contain an <code>__init__.py</code> file | There is also no <code>setup.py</code> present in the file structure. Do I need to add those files? Will it work then if I add an empty <code>__init__.py</code> inside every directory @NilsWerner</span>
<span class="comment-copy">You can import things if they are a package and inside your include path (<code>pip install</code>ed) or both are modules and inside the same module tree (<code>__init__.py</code> everywhere, even in <code>otherdir</code>).</span>
<span class="comment-copy">Do I still need to create modules if I am using <code>sys.path.insert</code>? I have used this command before without having to go through these steps. @NilsWerner</span>
<span class="comment-copy">The point is you shouldn't need to mess with <code>sys.path</code>. If you do you're already doing it wrong :-)</span>
<span class="comment-copy">Unfortunately, I cannot restructure the files because there are many other scripts which use <code>custom_module</code>. The amount of work for just this error would be a nightmare. I can, however, put this script i am writing in the same directory as <code>custom_module</code> but i'd rather not until I know it's the only viable option.</span>
<span class="comment-copy">Of course it's not the only viable option. Your example works! .... just not split by '\\' (unless you are on windows)</span>
