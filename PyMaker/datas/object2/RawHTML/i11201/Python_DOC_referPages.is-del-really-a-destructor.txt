<div class="post-text" itemprop="text">
<p>I do things mostly in C++, where the destructor method is really meant for destruction of an acquired resource. Recently I started with python (which is really a fun and fantastic), and I came to learn it has GC like java.
Thus, there is no heavy emphasis on object ownership (construction and destruction).</p>
<p>As far as I've learned, the  <code>__init__()</code> method makes more sense to me in python than it does for ruby too, but the <code>__del__()</code> method, do we really need to implement this built-in function in our class? Will my class lack something if I miss <code>__del__()</code>? The one scenario I could see <code>__del__()</code> useful is, if I want to log something when destroying an object. Is there anything other than this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/reference/datamodel.html#basic-customization" rel="nofollow noreferrer">Python 3 docs</a> the developers have now made clear that <em>destructor</em> is in fact not the appropriate name for the method <code>__del__</code>. </p>
<blockquote>
<p><code>object.__del__(self)</code></p>
<p>Called when the instance is about to be destroyed. This is also called a finalizer or (improperly) a destructor.</p>
</blockquote>
<p>Note that the <strong>OLD</strong> Python 3 docs used to suggest that 'destructor' <em>was</em> the proper name:</p>
<blockquote>
<p><code>object.__del__(self)</code></p>
<p><strike>Called when the instance is about to be destroyed. This is also called a destructor. If a base class has a <code>__del__()</code> method, the derived classâ€™s <code>__del__()</code> method, if any, must explicitly call it to ensure proper deletion of the base class part of the instance.</strike></p>
</blockquote>
<p>From <a href="https://stackoverflow.com/a/2433847/2681632">other answers</a> but also from the <a href="https://en.wikipedia.org/wiki/Destructor_(computer_programming)" rel="nofollow noreferrer">Wikipedia</a>:</p>
<blockquote>
<p>In a language with an automatic garbage collection mechanism, it would be difficult to deterministically ensure the invocation of a destructor, and hence these languages are generally considered unsuitable for RAII [Resource Acquisition Is Initialization]</p>
</blockquote>
<p><strike>So you should almost never be implementing <code>__del__</code>, but it gives you the opportunity to do so in some (rare?) use cases</strike></p>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers have already pointed out, you probably shouldn't implement <code>__del__</code> in Python. If you find yourself in the situation thinking you'd really need a destructor (for example if your class wraps a resource that needs to be explicitly closed) then the Pythonic way to go is using <a href="https://en.wikibooks.org/wiki/Python_Programming/Context_Managers" rel="noreferrer">context managers</a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is <strong>del</strong> really a destructor?</p>
</blockquote>
<p>No, <code>__del__</code> method is not a destructor, is just a normal method you can call whenever you want to perform any operation, but it is always called before the garbage collector destroys the object.
Think of it like a clean or last will method.</p>
</div>
<div class="post-text" itemprop="text">
<p>So uncommon it is that I have learned about it today (and I'm long ago into python).</p>
<p>Memory is deallocated, files closed, ... by the GC. But you could need to perform some task with effects outside of the class.</p>
<p>My use case is about implementing some sort of RAII regarding some temporal directories. I'd like it to be removed no matter what.</p>
<p>Instead of removing it after the processing (which, after some change, was no longer run) I've moved it to the <code>__del__</code> method, and it works as expected.</p>
<p>This is a very specific case, where we don't really care about when the method is called, as long as it's called before leaving the program. So, use with care.</p>
</div>
<span class="comment-copy">No. You should almost never implement <code>__del__</code>.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/2433847/2681632">stackoverflow.com/a/2433847/2681632</a></span>
<span class="comment-copy">You <i>almost never</i> want to implement <code>__del__</code>. Classes that provide a custom <code>__del__</code> have to be dealt with in a special way by the GC when dealing with cycles (because <code>__del__</code>must be called exactly once) and in some cases the GC will not be able to collect them [though from python3.4+ this has been improved quite a lot]. There are very few cases in which it is a good idea to implement it.</span>
<span class="comment-copy">If you're a beginner at python you should skip the <code>__del__</code> function until way later. It's really rarely needed.</span>
<span class="comment-copy">By the way, you may be interested in reading about <a href="https://docs.python.org/3/whatsnew/3.4.html#pep-442-safe-object-finalization" rel="nofollow noreferrer">PEP 442: Safe Object Finalization</a></span>
<span class="comment-copy">One usecase is to ensure that critical resource are cleaned up before the object is garbage-collected. I.e. in <code>__del__</code> check if resource is closed normally, and if not, do so and issue a warning.</span>
<span class="comment-copy">Given that <code>__del__</code> is <i>not</i> a C++-style destructor, and that RAII is more or less just what Python gives you automatically, the final conclusion about when you should implement <code>__del__</code> doesn't seem to follow from what came before.</span>
<span class="comment-copy">Context manager link was good, Does every object(including  user type)implement the context manager?</span>
<span class="comment-copy">@Explorer_N No, you'd need to do it yourself. And they as well don't have all the same sematics. But it is easily done.</span>
<span class="comment-copy">@Explorer_N: While you usually need to implement the functionality yourself for custom classes it is often very easy using the helpers from the <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer"><code>contextlib</code> module</a>.</span>
<span class="comment-copy">Will the call to <b>del</b> happen when it has to be happen or its like what we have as finalize() in java, I heard some referring finalize() call is unpredictable</span>
<span class="comment-copy">@Explorer_N, it will always be called by python interpreter when the object is about to be deleted.</span>
<span class="comment-copy">There is a <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">tempfile</a> module for that (<a href="https://docs.python.org/2/library/tempfile.html" rel="nofollow noreferrer">Python 2 version</a>, for old times sake).</span>
