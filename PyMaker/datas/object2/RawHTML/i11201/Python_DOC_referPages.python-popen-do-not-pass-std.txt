<div class="post-text" itemprop="text">
<p>I have a chain of three processes: Process A calls B to spawn C, then B dies. We can call B a "bridge" between two systems A and C. </p>
<p>I want to make sure that C DOES NOT inherit any file descriptors that A opens in order to prevent zombying, which I am currently observing (sometimes A calls B to kill C, and after this, I am seeing defunct C processes hanging around, but I don't know what the code in A looks like).</p>
<p>To make sure this issue isn't due to stdin/out/err being passed down, 
I am currently doing the following in <em>B</em></p>
<pre><code>def _close_fds(): #workaround carstens bug
    for fd in [0, 1, 2]:
        try:
            os.close(fd)
        except Exception:
            logger.info("File descriptor was not open")

...
_close_fds() #make sure there are no open file descriptors for the chile to enherit
pid = subprocess.Popen([_ROOT_PATH  + "something.py"]).pid
...
</code></pre>
<p>Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are starting process C from B, and you don't want it to inherit any file handles, use the following arguments in <code>subprocess.Popen</code>;</p>
<ol>
<li><code>close_fds=True</code></li>
<li>Set <code>stdin</code>, <code>stdout</code> and <code>stderr</code> to <code>subprocess.PIPE</code> or <code>subprocess.DEVNULL</code>.</li>
</ol>
<p>The first closes all file handles except <em>stdin</em>, <em>stdout</em> and <em>stderr</em>. The arguments listed under (2) take care of those.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>os</code> module provides a nice function, <a href="https://docs.python.org/3/library/os.html#os.closerange" rel="nofollow noreferrer"><code>os.closerange()</code></a>, that will do this for you in one call:</p>
<pre><code>os.closerange(0, 3)
</code></pre>
<p>If you're hunting after phantom open files, I would go a little higher just in case:</p>
<pre><code>os.closerange(0, 10)
</code></pre>
<p>To find out what you actually need to close, you can check <code>/proc/self/fd</code> for a list of the file descriptors that your process has open (if your OS supports it), and/or use the <code>open_files()</code> method from <a href="https://pythonhosted.org/psutil/#psutil.Process.open_files" rel="nofollow noreferrer">psutil</a>. See the answers to <a href="https://stackoverflow.com/q/2023608/699305">this question</a> for even more ideas.</p>
</div>
<span class="comment-copy">You're only closing stdin, stdout, and stderr. If any other file descriptors were open, they'll remain open but you're not finding them.</span>
