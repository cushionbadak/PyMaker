<div class="post-text" itemprop="text">
<p>I manually compiled <a href="https://github.com/OpenZWave/python-openzwave">python-openzwave</a> to work with <a href="https://github.com/OpenZWave/open-zwave">C++ library</a>.</p>
<p>I would like to use it as Kodi addon (OpenELEC running on Pi 3), so can not use standard installation.
I've compiled everything, downloaded missing <code>six</code> and <code>louie</code> libs, and now try to run <code>hello_world.py</code>. </p>
<p>My current dirs structure is the following:</p>
<pre><code>- root
  - bin
      - .lib
      - config
        Alarm.o
        ...
        libopenzwave.a
        libopenzwave.so
        libopenzwave.so.1.4
        ...
  - libopenzwave
      driver.pxd
      group.pxd
      ...
  - louie
      __init__.py
      dispatcher.py
      ...
  - openzwave
      __init__.py
      command.py
      ...
  six.py
  hello_world.py
</code></pre>
<p>But when I run hello_world.py, I get the following error - </p>
<pre><code>Traceback (most recent call last):
  File "hello_world.py", line 40, in &lt;module&gt; 
    from openzwave.controller import ZWaveController 
  File "/storage/.kodi/addons/service.multimedia.open-zwave/openzwave/controller.py", line 34, in &lt;module&gt; 
    from libopenzwave import PyStatDriver, PyControllerState 
ImportError: No module named libopenzwave
</code></pre>
<p>If I move <code>libopenzwave.a</code> and <code>libopenzwave.so</code> to root folder, then I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "hello_world.py", line 40, in &lt;module&gt; 
    from openzwave.controller import ZWaveController 
  File "/storage/.kodi/addons/service.multimedia.open-zwave/openzwave/controller.py", line 34, in &lt;module&gt; 
    from libopenzwave import PyStatDriver, PyControllerState 
ImportError: dynamic module does not define init function (initlibopenzwave)
</code></pre>
<p>What is wrong with my setup?</p>
</div>
<div class="post-text" itemprop="text">
<p>In general the steps required consist of calls to <code>make build</code> which handles building the <code>.cpp</code> files for openzwave and downloading all dependencies (including <code>Cython</code>); and <code>make install</code> which runs the <code>setup-api</code>, <code>setup-lib.py</code> (this setup script also creates the <code>C++</code> Python extention for openzwave), <code>setup-web.py</code> and <code>setup-manager.py</code>. </p>
<p>Since you cannot run <code>make install</code> as you specified and are instead using the archive they provide, the only other options for creating the python extention, after building the openzwave library with <code>make build</code>, is generating the <code>.so</code> files for it without installing to standard locations. </p>
<p>Building the <code>.so</code> for the cython extention in the same folder as the <code>Cython</code> scripts is done by running:</p>
<pre><code>python setup.py build_ext --inplace
</code></pre>
<p>This should create a shared library in <code>src-lib</code> named <code>libopenzwave.so</code> (it is different from the <code>libopenzwave.so</code> contained in the <code>bin/</code> directory) which contains all the functionality specified in the extention module. You could try adding that to the <code>libopenzwave</code> folder.</p>
<p>If you pass special compiler flags during <code>make build</code> for building the openzwave library you should specify the same ones when executing the <code>setup-lib.py</code> script. This can be done by specifying the <code>CFLAGS</code> before executing it (as specified <a href="https://stackoverflow.com/questions/6928110/how-may-i-override-the-compiler-gcc-flags-that-setup-py-uses-by-default"><strong>here</strong></a>) or else you might have issues like <code>error adding symbols: File in wrong format</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the description of the <code>python-openzwave</code>'s build from the question's perspective. Almost all the steps correspond to the root <code>Makefile</code>'s targets.</p>
<ul>
<li><strong>Prerequisites.</strong> There are several independent targets with little to no organization. Most use Debian-specific commands.

<ul>
<li>Cython <em>is not needed if building from an archive</em> (details below)</li>
</ul></li>
<li><strong>openzwave C++ library</strong> (<code>openzwave openzwave/.lib/</code> target).

<ul>
<li>Build logic: <code>openzwave/Makefile</code>, invoked without parameters (but with inherited environment).</li>
<li>Inputs: <code>openzwave/</code> subtree (includes <code>libhidapi</code> and <code>libtinyxml</code>, statically linked).</li>
<li>Outputs: <code>openzwave/.lib/libopenzwave.{a,so}</code></li>
<li>Accepts <code>PREFIX</code> as envvar (<code>/usr/local</code> by default)

<ul>
<li>The only effect that affects us is: <code>$(PREFIX)/etc/openzwave/</code> is assigned to a macro which adds a search location for config files (<code>Options.cpp</code>): <code>config/</code> -&gt; <code>/etc/openzwave/</code> -&gt; <code>&lt;custom location&gt;</code>.</li>
</ul></li>
</ul></li>
<li><strong>libopenzwave Python C extension module</strong> (<code>install-lib</code> target - yes, the stock <code>Makefile</code> cannot just build it; the target doesn't even have the dependency on the library).

<ul>
<li>Build logic: <code>setup-lib.py</code></li>
<li>Inputs: <code>src-lib/</code>, <code>openzwave/.lib/libopenzwave.a</code></li>
<li>Outputs: <code>build/&lt;...&gt;/libopenzwave.so</code> - yes, the same name as <code>openzwave</code>'s output, so avoid confusing them

<ul>
<li>By default, <strong><code>openzwave</code> is linked statically with the module</strong> so you don't need to include the former into a deployment</li>
<li>The module does, however, need the <code>config</code> folder from the library. It is included by the build script when making a package.</li>
</ul></li>
<li>Contrary to <a href="https://stackoverflow.com/a/37897891/648265">what Jim says</a>, <em>Cython is not needed to build from an archive,</em> the archive already includes the generated <code>.cpp</code>.</li>
<li>Now, the catch is: the module itself uses <code>pkg_resources</code> to locate its data. So you cannot just drop the <code>.so</code> and <code>config</code> into the currect directory and call it a day. You need to make <code>pkg_resources.get_distribution('libopenzwave')</code> succeed.

<ul>
<li><code>pkg_resources</code> <a href="http://galaxy.readthedocs.io/en/master/lib/pkg_resources.html#package-resource-api" rel="nofollow noreferrer">claims to support</a> <em>"normal filesystem packages, .egg files, and unpacked .egg files."</em></li>
<li>In particular, I was able to pull this off: make an <code>.egg</code> (<code>setup-lib.py bdist_egg</code>), unpack it into the current directory and rename <code>EGG-INFO</code> into <code>libopenzwave.egg-info</code> (like it is in <code>site-packages</code>). A <code>UserWarning</code> is issued if I don't specifically add the <code>.so</code>'s location into <code>PYTHON_PATH</code>/<code>sys.path</code> before importing the module.</li>
</ul></li>
</ul></li>
<li><strong><code>openzwave</code>,<code>pyozwman</code> and <code>pyozwweb</code> Python packages</strong> (<code>install</code>)

<ul>
<li>these are pure Python packages. The first one uses the C extension module, others use the first one.</li>
<li>Build logic: <code>setup-api.py</code>,<code>setup-manager.py</code>,<code>setup-web.py</code></li>
<li>Input: <code>src-*/</code></li>
<li>Output:  (pure Python)</li>
<li>They only use <code>pkg_resources.declare_namespace()</code> so you're gonna be fine with just the proper files/dirs on <code>sys.path</code> without any <code>.egg-info</code>'s</li>
</ul></li>
</ul>
</div>
<span class="comment-copy">Are you sure that your module has initialization info, as said here: <a href="https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function" rel="nofollow noreferrer">docs.python.org/3/extending/…</a> ?</span>
<span class="comment-copy">Manually compiled how exactly? Not finding <code>initlibopenzwave</code> is caused, if I am not mistaken, by the <code>Cython</code> files not being <code>cythonized</code> and compiled correctly (<code>Cython</code> takes care of creating the <code>init&lt;modulename&gt;</code> functions for you. Could you elaborate on the compilation process?</span>
<span class="comment-copy">@Jim, I've downloaded the source <a href="https://github.com/OpenZWave/python-openzwave/raw/master/archives/python-openzwave-0.3.1.tgz" rel="nofollow noreferrer">github.com/OpenZWave/python-openzwave/raw/master/archives/…</a>, unpacked it and run <code>make build</code>. This version doesn't require <code>Cython</code> in accordance with this discussion - <a href="https://groups.google.com/forum/#!topic/python-openzwave-discuss/Yrgf-Xg5XRk" rel="nofollow noreferrer">groups.google.com/forum/#!topic/python-openzwave-discuss/…</a>.</span>
<span class="comment-copy">@ShamilKMuhammed, that is not my module, but as I can see <code>libopenzwave.cpp</code> has <code>initlibopenzwave</code> function.</span>
<span class="comment-copy">The only case where I see the <code>.pyx</code> files getting built is during <code>setup-lib.py</code> which is run when <code>sudo make install</code> (or when <code>sudo make install-lib</code>) is executed. I just get a lovely segfault on <code>import</code> now.</span>
