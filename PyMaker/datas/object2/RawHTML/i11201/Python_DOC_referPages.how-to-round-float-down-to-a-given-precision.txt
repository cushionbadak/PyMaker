<div class="post-text" itemprop="text">
<p>I need a way to round a float to a given number of decimal places, but I want to always round down.</p>
<p>For example, instead of</p>
<pre><code>&gt;&gt;&gt; round(2.667, 2)
2.67
</code></pre>
<p>I would rather have</p>
<pre><code>&gt;&gt;&gt; round_down(2.667, 2)
2.66
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this should work for whatever number of digits you want to do:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; def round_down(num,digits):
        factor = 10.0 ** digits
        return math.floor(num * factor) / factor

&gt;&gt;&gt; round_down(2.667,2)
2.66
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You've got a friend in <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal.quantize" rel="nofollow noreferrer"><code>quantize</code></a> and <a href="https://docs.python.org/3/library/decimal.html#decimal.ROUND_FLOOR" rel="nofollow noreferrer"><code>ROUND_FLOOR</code></a> </p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal,ROUND_FLOOR
&gt;&gt;&gt; float(Decimal(str(2.667)).quantize(Decimal('.01'), rounding=ROUND_FLOOR))
2.66
&gt;&gt;&gt; float(Decimal(str(-2.667)).quantize(Decimal('.01'), rounding=ROUND_FLOOR))
-2.67
</code></pre>
<p>Note that you can use <a href="https://docs.python.org/3/library/decimal.html#decimal.ROUND_DOWN" rel="nofollow noreferrer"><code>ROUND_DOWN</code></a> for positive numbers. As interjay mentions <a href="https://stackoverflow.com/questions/37712306/how-to-round-float-down-to-a-given-precision#comment62898732_37712409">in a comment</a>, <code>ROUND_DOWN</code> <em>Rounds towards zero</em> and hence may return incorrect values for negative numbers. </p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal,ROUND_DOWN
&gt;&gt;&gt; Decimal(str(2.667)).quantize(Decimal('.01'), rounding=ROUND_DOWN)
Decimal('2.66')
&gt;&gt;&gt; float(Decimal(str(2.667)).quantize(Decimal('.01'), rounding=ROUND_DOWN))
2.66
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>math.floor</code> to "round down" to the nearest whole number. So to round to the 3rd decimal place, you can try <code>math.floor(1000*number) / 1000</code>.</p>
<p>In general, to "round down" a number <code>num</code> to precision <code>n</code>, you can try:</p>
<pre><code>from math import floor

def round_down(num, n):
    multiplier = pow(10,n)
    return floor(num * multiplier) / multiplier
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also play around this using strings</p>
<pre><code>def round_down(num, prec):
    if isinstance(num, float):
        s = str(num)
        return float(s[:s.find('.') + prec + 1])
    else:
        raise ValueError

round_down(2.6667, 2)
# 2.66
</code></pre>
<p>Patch the code with more checks like precision is not negative among others.</p>
</div>
<span class="comment-copy">This might work <code>int(2.667 * 100) / 100</code></span>
<span class="comment-copy">What result do you want for <code>round_down(-2.667, 2)</code>? (i.e., what should "down" mean for negative numbers?)</span>
<span class="comment-copy">just use <code>int</code> rather than <code>math.floor</code> to avoid import</span>
<span class="comment-copy"><code>int</code> doesn't always round down though, it instead rounds towards 0.  with <code>int</code>, <code>round_down(-2.667,2)</code> would give <code>-2.66</code>, whereas with <code>math.floor</code> it gives <code>-2.67</code> and</span>
<span class="comment-copy">I guess it depends on what OP means by round down but I would assume that rounding down in magnitude would be the expected functionality</span>
<span class="comment-copy">Note that <code>ROUND_DOWN</code> rounds towards zero, which is very misleading naming. <code>ROUND_FLOOR</code> will round toward -infinity.</span>
<span class="comment-copy">@interjay Ah Yes, In the case of negative numbers. I will add that.</span>
