<div class="post-text" itemprop="text">
<p>I am using <a href="https://docs.python.org/2/library/argparse.html#sub-commands" rel="nofollow">Argparse</a> to parse shell input to my Python function. </p>
<p>The tricky  part is that this script first reads in a file that partially determines what kind of arguments are available to Argparse (it's a JSON file containing criteria by which the user can specify what data to output). </p>
<p>But before these arguments are added to my parser, I would like to read in some arguments relating to the file reading itself. (e.g. whether to fix the formatting of the input file). Kinda like this:</p>
<pre><code>test.py (fix_formatting=True, **more arguments added later)
</code></pre>
<p>When I try to run <code>args = parser.parse_args()</code> twice, after the initial input and after adding more keys, things fall apart: Argparse quite predictably complains that some of the user input are <code>unrecognized arguments:</code>. I thought I might use <a href="https://docs.python.org/2/library/argparse.html#sub-commands" rel="nofollow">subparsers</a> to that end.</p>
<p>So I tried variations of (following the example in the <a href="https://docs.python.org/2/library/argparse.html#sub-commands" rel="nofollow">docs</a> as best as I could):</p>
<pre><code>def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')
    settingsparser = subparsers.add_parser('settings') #i want a subparser called 'settings'
    settingsparser.add_argument('--fix_formatting', action='store_true') #this subparser shall have a --fix_formatting
</code></pre>
<p>Then I try to parse only the "settings" part like so:</p>
<pre><code>    settings=parser.parse_args(['settings'])
</code></pre>
<p>This seems to work. But then I add my other keys and things break: </p>
<pre><code>    keys=['alpha','beta','gamma','delta']
    for key in keys:
        parser.add_argument("--"+key, type=str, help="X")
    args = parser.parse_args()
</code></pre>
<p>If I parse any input for any of the arguments from keys, Argparse complains that I make an <code>invalid choice: [...] (choose from 'settings')</code>. Now I don't understand why I have to choose from "settings"; the docs say that the parse</p>
<blockquote>
<p>will only contain attributes for the main parser and the subparser that was selected by the command line (and not any other subparsers)</p>
</blockquote>
<ul>
<li><p>what is my error of understanding here?</p></li>
<li><p>and if this is the wrong approach, how would one go about parsing one bit of input before another bit?</p></li>
</ul>
<p>Any help is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>parse_args</code> calls <code>parse_known_args</code>.  This returns the <code>args</code> namesparse along with a list of strings (from <code>sys.argv</code>) that it could not process (<code>extras</code>).  <code>parse_args</code> raises this error if this list is not empty.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#partial-parsing" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#partial-parsing</a></p>
<p>Thus <code>parse_known_args</code> is useful if you want to parse some of the input.</p>
<p><code>sys.argv</code> remains unchanged.  Subsequent calls to a parser (whether it was the original one or not) use that again, unless you pass the <code>extras</code>.</p>
<p>I don't think subparsers help you here.  They aren't meant for delayed or two stage parsing.  I'd suggest playing with the documentation examples for subparsers first.</p>
<hr/>
<p>To the main parser, the subparsers look like</p>
<pre><code>subparsers = parser.add_argument('cmd', choices=['select',...])
</code></pre>
<p>In other words, it adds a positional argument where the <code>choices</code> are the subparser names that you define.  That may help you see why it expects you to name <code>select</code>.  Positionals are normally required.</p>
<p>(there's an exception to this in recent versions, <a href="https://stackoverflow.com/a/22994500/901925">https://stackoverflow.com/a/22994500/901925</a>)</p>
</div>
<span class="comment-copy">thanks so much! i guess i totally mis-understood the concepts of subparsers as well as partial parsing. thanks for clarifying...</span>
