<div class="post-text" itemprop="text">
<p>When I call <code>yield from some_coroutine()</code> from with in a couroutine <code>foo</code>, is <code>some_coroutine</code> scheduled in the same even-loop as <code>foo</code> is currently running in? An example:</p>
<pre><code>async def foo():
    yield from asyncio.sleep(5)

loop = asyncio.get_event_loop() # this could also be a custom event loop
loop.run_until_completed(foo())
</code></pre>
<p>In this example, in which event-loop will <code>sleep</code> be scheduled? I'm especially interested in the case where <code>loop</code> is not the default event-loop.</p>
<p>The <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">documentation</a>, under <em>"Things a coroutine can do"</em> says:</p>
<blockquote>
<p><code>result = await coroutine</code> or <code>result = yield from coroutine</code> â€“ wait for
  another coroutine to produce a result (or raise an exception, which
  will be propagated). The <code>coroutine</code> expression must be a call to
  another coroutine.</p>
</blockquote>
<p>It is not clear to me in which loop the coroutine will be scheduled.</p>
</div>
<div class="post-text" itemprop="text">
<p>Citing docs of <a href="https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.AbstractEventLoopPolicy.get_event_loop" rel="nofollow"><code>get_event_loop</code></a> </p>
<blockquote>
<p>Get the event loop for the current context.</p>
</blockquote>
<p>Implementation of <a href="https://docs.python.org/3/library/asyncio-eventloops.html#event-loop-policies-and-the-default-policy" rel="nofollow">default loop</a> (<em>Event loop default policy</em> to be precise):</p>
<blockquote>
<p>The default policy defines context as the current thread, and manages an event loop per thread that interacts with asyncio.</p>
</blockquote>
<ul>
<li><p>An event loop runs in a thread and executes all callbacks and tasks in the same thread (<a href="https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading" rel="nofollow">docs</a>), </p></li>
<li><p><code>asyncio.get_event_loop</code> returns the same loop for the same thread,</p></li>
<li><p>if you do not explicitly schedule on/interact with different thread's loop, it will use default (<strong>*</strong>) loop</p></li>
</ul>
<p>In your example:</p>
<ol>
<li><p><code>get_event_loop</code> returns current thread's event loop,</p></li>
<li><p><code>foo</code> is scheduled on that loop with <code>run_until_completed</code></p></li>
<li><p>any further async calls (awaits/yield from) are scheduled on the same loop</p></li>
</ol>
<p>More info at <a href="https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading" rel="nofollow">Concurrency and multithreading</a>.</p>
<p>(<strong>*</strong>) The event loop you called <em>default</em> is actually a loop of current thread.</p>
</div>
<span class="comment-copy">Thank you very much, that clarifies it. I'm wondering though, since <i>explicit is better than implicit</i>, should explicitly passing the event loop be the preferred style?</span>
<span class="comment-copy">Should every function (e.g. file i/o) require a explicit thread passed (and dozen of other params)? keep the balance :)</span>
