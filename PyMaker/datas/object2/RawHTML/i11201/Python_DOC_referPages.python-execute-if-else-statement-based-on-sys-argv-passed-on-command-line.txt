<div class="post-text" itemprop="text">
<p>I am new to Python and the syntax is really throwing me off. I need to execute a script in which I'd like to execute a function based on the arguments passed on Command Line. Following is the pseudo code:</p>
<pre><code>import sys

...
Code
Authentication
Role Validation 
...

Arg[1]
Arg[2]
Arg[3]

if(Arg[3] !exist)
  execute Func1 with Arg[1] &amp; Arg[2]
else if 
  execute Func 2 with Arg[1], [2] &amp; [3]
</code></pre>
<p>Can someone guide me how to structure this in Python's world or if there is any other way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you must use <code>sys.argv</code>, it's just a normal Python <code>list</code>, you can use <code>len</code> on it to check how many arguments were passed (remember, the <code>0</code>th element is the program itself).</p>
<pre><code>if len(sys.argv) == 3:
    func1(*sys.argv[1:3])  # * unpacking removes repeated references to sys.argv
elif len(sys.argv) == 4:
    func2(*sys.argv[1:4])
</code></pre>
<p>I'd recommend looking at something like <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">the <code>argparse</code> module</a> though; it's more work to learn, but it means your scripts get <code>-h/--help</code> support automatically, which makes it much easier to use the script, without implementing a usage message separately, risking it getting out of sync.</p>
<p>Alternatively, if you are up for using third party packages, <a href="https://pypi.python.org/pypi/docopt" rel="nofollow"><code>docopt</code></a> is generally praised as an alternative to <code>argparse</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is what you are looking for. <code>sys.argv</code> is the list containing your command line arguments. <code>sys.argv[0]</code> is typically the command you ran, so you're interested in the ones after that.</p>
<pre><code>if len(sys.argv) == 4:
    execute Func 2 with sys.argv[1], sys.argv[2] &amp; sys.argv[3]
elif len(sys.argv) == 3:
    execute Func1 with sys.argv[1] &amp; sys.argv[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sys.html#sys.argv" rel="nofollow"><code>sys.argv</code></a> will get you the arguments the script was called with e. g. if you run your script like this:</p>
<pre><code>pytohn script.py arg1 arg2
</code></pre>
<p><code>sys.argv</code> will be:</p>
<pre><code>["script.py", "arg1", "arg2"]
</code></pre>
<p>Also the builtin <a href="https://docs.python.org/2/library/functions.html#len" rel="nofollow"><code>len</code></a> function will return the length of an array. So for the above example <code>len</code> should be <code>3</code>.</p>
<p>Knowing this you should be able to write your code.</p>
<p>If you struggle getting this to work here is a hint:</p>
<pre><code>import sys
arg = sys.argv

if len(arg) == 3:
    func1(arg[1], arg[2])

elif len(arg) == 4:
    func2(arg[1], arg[2], arg[3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest thing that does what you ask could looks at the length of the list given by <code>sys.argv</code></p>
<pre><code>import sys

def func1(a, b):
    print "func1", a, b

def func2(a, b, c):
    print "func2", a, b, c

if __name__ =='__main__':
    if len(sys.argv) == 3:
        func1(sys.argv[1], sys.argv[2])
    elif len(sys.argv) == 4:
        func2(sys.argv[1], sys.argv[2], sys.argv[3])
</code></pre>
<p>You seem to have noticed the first arg is the program itself.
Think about what should happen if the wrong number of arguments is passed. 
Have a look at the <code>argparse</code> <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">module</a></p>
</div>
<span class="comment-copy">Why do you try to do some tutorials first?</span>
<span class="comment-copy">Sounds like a model for ArgParse.. have a google!.. LMGTFY <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a></span>
<span class="comment-copy">Amending to @drum: I suggest to focus on <code>sys.argv</code>, <code>len(sys.argv) &lt; 4</code>, <code>def doing_this(a, b): ...</code>, <code>Ã¬f</code>, <code>elif</code>, in the tutorials eg. on python.org - and then come back if you hit a wall. Coders here will then love to help you prepare / find the next wall ;-)</span>
<span class="comment-copy">You should show the code you have actually written, whose syntax is confusing you. SO is not a code-writing service.</span>
<span class="comment-copy">use something like this to iterate through your command line arguments: for key,value in vars(args).iteritems():</span>
<span class="comment-copy">Thank you! This worked!</span>
