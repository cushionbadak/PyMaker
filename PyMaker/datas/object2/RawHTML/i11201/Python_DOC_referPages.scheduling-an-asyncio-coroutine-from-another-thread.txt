<div class="post-text" itemprop="text">
<p>I try to schedule an asyncio coroutine from another thread using <code>create_task()</code>. The problem is that the coroutine is not called, at least not in reasonable amount of time.</p>
<p>Is there are way to wake up the event loop or at least specify a shorter timeout?</p>
<pre><code>#!/usr/bin/python3

import asyncio, threading

event_loop = None

@asyncio.coroutine
def coroutine():
    print("coroutine called")

def scheduler():
    print("scheduling...")
    event_loop.create_task(coroutine())
    threading.Timer(2, scheduler).start()

def main():
    global event_loop

    threading.Timer(2, scheduler).start()

    event_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(event_loop)
    event_loop.run_forever()

main()
</code></pre>
<p>Output:</p>
<pre><code>scheduling...
scheduling...
scheduling...
scheduling...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation of <a href="https://docs.python.org/3/library/asyncio-task.html#task" rel="noreferrer">Task</a> "this class is not thread safe". So scheduling from another thread is not expected to work.</p>
<p>I found two solutions for this based on the answers and comments here.</p>
<ol>
<li><p>@wind85 answer: directly replacing the <code>create_task</code> line call with <code>asyncio.run_coroutine_threadsafe(coroutine(), event_loop)</code> call. Requires Python 3.5.1.</p></li>
<li><p>Use <code>call_soon_threadsafe</code> to schedule a callback, which then creates the task:</p>
<pre><code>def do_create_task():
    eventLoop.create_task(coroutine())

def scheduler():
    eventLoop.call_soon_threadsafe(do_create_task)
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Here we go this shuold work. It's a port. Try it out since I have the latest version, I can't really assure you it will work.</p>
<pre><code>#!/usr/bin/python3
import concurrent.futures 
import threading, asyncio
from asyncio import coroutines, futures

def run_coroutine_threadsafe_my(coro, loop):
    """Submit a coroutine object to a given event loop.
        Return a concurrent.futures.Future to access the result.
    """
    if not coroutines.iscoroutine(coro):
        raise TypeError('A coroutine object is required')
    future = concurrent.futures.Future()

    def callback():
        try:
            futures._chain_future(asyncio.ensure_future(coro, loop=loop), future)
        except Exception as exc:
            if future.set_running_or_notify_cancel():
                future.set_exception(exc)
            raise

    loop.call_soon_threadsafe(callback)
    return future




event_loop = None

@asyncio.coroutine
async def coro():
    print("coroutine called")

def scheduler():
    print("scheduling...")
    run_coroutine_threadsafe_my(coro(),event_loop)
    threading.Timer(2, scheduler).start()

def main():
    global event_loop

    threading.Timer(2, scheduler).start()

    event_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(event_loop)
    event_loop.run_forever()

main()
</code></pre>
</div>
<span class="comment-copy">Have you tried <code>event_loop.call_soon_threadsafe(coroutine)</code> instead of <code>event_loop.create_task(coroutine())</code>?</span>
<span class="comment-copy">@freakish thanks! Did not work straight away, but I've found a solution based on this</span>
<span class="comment-copy">yes but I didn't know he had a previous version.</span>
<span class="comment-copy">anyway which version are you using?</span>
<span class="comment-copy">Ahh, very interesting indeed. Good finding.</span>
<span class="comment-copy">I had a similar problem and <code>run_coroutine_threadsafe()</code> worked.</span>
<span class="comment-copy">Thanks! That definitely works. However, it required Python 3.5.1, which is not installed on most computers.</span>
<span class="comment-copy">I got <code>AttributeError: 'module' object has no attribute '_chain_future'</code> in Python 3.4.3 when running your updated code.</span>
<span class="comment-copy">@kfx <code>run_coroutine_threadsafe</code> is available since asyncio 3.4.4. You can update using <code>pip3 install -U git+https://github.com/python/asyncio.git</code></span>
