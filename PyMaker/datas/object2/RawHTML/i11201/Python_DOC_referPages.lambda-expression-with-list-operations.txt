<div class="post-text" itemprop="text">
<p>Shouldn't the below lambda expression return a list? Currently, it isn't.</p>
<pre><code> &gt;&gt;&gt; f=lambda l ,x:l.append(x) 
 &gt;&gt;&gt; print f([1],3)
 None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow"><code>append</code></a> is a side-effecting function; it appends a value to an existing list without returning a value (or None, depending on how you want to think of it).</p>
<p>Perhaps you want:</p>
<pre><code>lambda l, x: l + [x]
</code></pre>
<p>This creates a new list from the existing list with an element appended at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow"><code>list.append()</code></a> does not return a value but because the python list is a <a href="https://codehabitude.com/2013/12/24/python-objects-mutable-vs-immutable/" rel="nofollow">mutable object</a>, <code>3</code> will indeed be appended, it just doesn't get returned.</p>
<p>For example this will work:</p>
<pre><code>t = [1]
f(t, 3)
print(t)        # [1, 3]
</code></pre>
<p>If you do not want to modify <code>t</code> you can write</p>
<pre><code>f = lambda l, x: l + [x]

t = [1]

print(f(t, 3))  # [1, 3]
print(t)        # [1]
</code></pre>
<p>as the lambda will not modify the list <code>t</code> but just return a new list.</p>
</div>
<div class="post-text" itemprop="text">
<p>the function <code>append</code> returns <code>None</code> so your lambda returns <code>None</code>, too. Also the <code>append</code> changes the local variable <code>l</code> only </p>
</div>
<span class="comment-copy">Why? There is no <code>return</code> and <code>l.append</code> does not return a list.</span>
<span class="comment-copy">@LutzHorn: Lack of a <code>return</code> doesn't matter (<code>lambda</code>s return the result of the expression evaluated implicitly), but yeah, <code>list.append</code> returns <code>None</code> (the default return for functions that don't return something explicitly), which means it won't work as expected.</span>
<span class="comment-copy">But by default lambda is suppose to return a value explicitly right? List in this case</span>
<span class="comment-copy">There's nothing magical about a lambda, its value is the value of its body - <code>None</code> in this case.</span>
<span class="comment-copy">No, it implicitly returns returns statement result. Result of <code>list.append</code> is <code>None</code>, so it returns <code>None</code>.</span>
<span class="comment-copy">A function without a return value i.e. <code>def foo(): pass</code> or <code>def foo(): return</code> automatically returns None. f returns what append returns, which is <code>None</code></span>
<span class="comment-copy">It "doesn't return anything" is wrong. <b><code>None</code> is not nothing</b>. Use <code>print(type(None))</code>  to see what it is.</span>
