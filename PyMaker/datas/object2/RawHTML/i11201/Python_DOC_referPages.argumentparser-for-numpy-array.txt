<div class="post-text" itemprop="text">
<p>Is there a way to add an argument to ArgumentParser for an np.array instead of a list?
I know I can do something like this</p>
<pre><code>import argparse
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-foo', action='store', type=int, nargs='+')
args = parser.parse_args(['-foo', '1', '2'])
args.foo = np.array(args.foo)
</code></pre>
<p>But I would like to specify the complete description of the arguments before parsing.</p>
<p>Is there a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>To specify a slight change in how the <code>StoreAction</code> action handler works you would create a <a href="https://docs.python.org/3/library/argparse.html#argparse.Action" rel="nofollow noreferrer">subclass</a> of the handler with appropriate change (the docs have an example right <strong>above</strong> <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer">this section</a>)</p>
<pre><code>import argparse, numpy as np

class Store_as_array(argparse._StoreAction):
    def __call__(self, parser, namespace, values, option_string=None):
        values = np.array(values)
        return super().__call__(parser, namespace, values, option_string)

parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-foo', action=Store_as_array, type=int, nargs='+')
                                  # ^ specify as the action 
args = parser.parse_args(['-foo', '1', '2'])

assert isinstance(args.foo, np.ndarray)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As indicated in my comment, 'complete description before parsing' is unclear.</p>
<p>But it occurred to me that it is possible to create a 2d array with <code>argparse</code>.  I can use <code>nargs=3</code> to specify 3 columns, and <code>action='append'</code> to collect the input in multiple sublists.  And of course <code>type</code> specifies whether it int or float.</p>
<pre><code>In [27]: p=argparse.ArgumentParser()

In [28]: p.add_argument('-a',action='append',nargs='+',type=int)
Out[28]: _AppendAction(option_strings=['-a'], dest='a', nargs='+', const=None, default=None, type=&lt;class 'int'&gt;, choices=None, help=None, metavar=None)

In [29]: args=p.parse_args('-a 1 2 3 -a 4 5 6 -a 7 8 9'.split())

In [30]: args
Out[30]: Namespace(a=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])

In [31]: np.array(args.a)
Out[31]: 
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
</code></pre>
<p>It will complain if I don't have the right number of columns.  All it doesn't control is the number of rows; but I can easily check the shape of  the array after creation.</p>
<p>With this <code>append</code> it doesn't make sense to create the array in the <code>action</code>.  And even with the 1d input, there isn't much of an advantage to performing that <code>np.array</code> call during parsing.  Massaging (and testing) the <code>args</code> values after parsing is perfectly good practice.</p>
<p>It  would better, though to put the array values in a CSV file, and specify the name of that file via <code>argparse</code>.  <code>argparse</code> really isn't meant for input of a large number of values.  It's not a general purpose file parser.  The command line controls the behavior of your code.</p>
</div>
<span class="comment-copy">Where would you be specifying this <code>complete description</code>?  In the commandline, or in the <code>add_argument</code> setup?  Give a more detailed example.</span>
<span class="comment-copy">This is exactly what I was looking for. Thank you.</span>
<span class="comment-copy">I meant specify the description of the argument (type, default value and all) when adding the argument to the ArgumentParser as @Tadhg showed.</span>
