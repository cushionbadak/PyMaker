<div class="post-text" itemprop="text">
<p>I have a python3 script that calls other python3 scripts using <code>subprocess.Popen</code>. <br/>The first script creates a python object needed by the second script who will run a few times using the same object.</p>
<p>Right now it looks like this:</p>
<pre><code>for x in range(0,10):
    pid2 = subprocess.Popen([sys.executable, "try2.py"])
</code></pre>
<p>However I want to pass to the subprocess the python object created in the first script.
Is this possible? Or can I only pass string arguments?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Args is supposed to be either a string or a sequence of strings as per the <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow">documentation</a>. But if you do want to pass an object, you could perhaps serialize the object into JSON, then deserialize it back in your second script to retrieve the original object. You may then proceed with the second script's operations</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have a python3 script that calls other python3 scripts using subprocess.Popen</p>
</blockquote>
<p>ouch</p>
<blockquote>
<p>The first script creates a python object needed by the second script who will run a few times using the same object.</p>
</blockquote>
<p>ouch^2</p>
<blockquote>
<p>However I want to pass to the subprocess the python object created in the first script. Is this possible? Or can I only pass string arguments?</p>
</blockquote>
<p>You can only pass string arguments but you can serialize the object before passing it.</p>
<p>You mind sharing more about the problem you are trying to solve so we can come up with a well structured maintainable solution?</p>
<p>Just too demonstrate how easy it is in python to do even so twisted things :):</p>
<p>python3:</p>
<p>try1.py:</p>
<pre><code>import subprocess
import sys
import pickle
import base64


class X:
    def __init__(self):
        self.a = 2

a = X()
a.a = "foobar"

subprocess.call([sys.executable, "try2.py", base64.encodestring(pickle.dumps(a))])
</code></pre>
<p>try2.py:</p>
<pre><code>import sys
import pickle
import base64


class X:
    def __init__(self):
        self.a = 2

x = pickle.loads(base64.decodestring(bytes(sys.argv[1], "ascii")))
print(x.a)
</code></pre>
</div>
