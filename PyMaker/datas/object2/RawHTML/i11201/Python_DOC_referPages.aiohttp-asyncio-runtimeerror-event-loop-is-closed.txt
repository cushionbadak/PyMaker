<div class="post-text" itemprop="text">
<p>I have two scripts, scraper.py and db_control.py. In scraper.py I have something like this:</p>
<pre><code>...
def scrap(category, field, pages, search, use_proxy, proxy_file):
    ...
    loop = asyncio.get_event_loop()

    to_do = [ get_pages(url, params, conngen) for url in urls ]
    wait_coro = asyncio.wait(to_do)
    res, _ = loop.run_until_complete(wait_coro)
    ...
    loop.close()

    return [ x.result() for x in res ]

...
</code></pre>
<p>And in db_control.py:</p>
<pre><code>from scraper import scrap
...
while new &lt; 15:
    data = scrap(category, field, pages, search, use_proxy, proxy_file)
    ...
...
</code></pre>
<p>Theoretically, scrapper should be started unknown-times until enough of data have been obtained. But when <code>new</code> is not imidiatelly <code>&gt; 15</code> then this error occurs:</p>
<pre><code>  File "/usr/lib/python3.4/asyncio/base_events.py", line 293, in run_until_complete
self._check_closed()
  File "/usr/lib/python3.4/asyncio/base_events.py", line 265, in _check_closed
raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
</code></pre>
<p>But scripts works just fine if I run scrap() only once. So I guess there is some problem with recreating <code>loop = asyncio.get_event_loop()</code>, I have tried <a href="https://stackoverflow.com/questions/32598231/asyncio-runtimeerror-event-loop-is-closed">this</a> but nothing changed. How I can fix this? Of course those are just snippets of my code, if you think problem can be elsewhere, full code is available <a href="https://github.com/kongzii/korpi/tree/master/korpi/lib" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Methods <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_until_complete" rel="noreferrer"><code>run_until_complete</code></a>, <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_forever" rel="noreferrer"><code>run_forever</code></a>, <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="noreferrer"><code>run_in_executor</code></a>, <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.create_task" rel="noreferrer"><code>create_task</code></a>, <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.call_at" rel="noreferrer"><code>call_at</code></a> explicitly check 
the loop and throw exception if it's closed.</p>
<p>Quote from docs - <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.close" rel="noreferrer"><code>BaseEvenLoop.close</code></a>:</p>
<blockquote>
<p>This is idempotent and <strong>irreversible</strong></p>
</blockquote>
<hr/>
<p>Unless you have some(good) reasons, you might simply omit the close line:</p>
<pre><code>def scrap(category, field, pages, search, use_proxy, proxy_file):
    #...
    loop = asyncio.get_event_loop()

    to_do = [ get_pages(url, params, conngen) for url in urls ]
    wait_coro = asyncio.wait(to_do)
    res, _ = loop.run_until_complete(wait_coro)
    #...
    # loop.close()
    return [ x.result() for x in res ]
</code></pre>
<p>If you want to have each time a brand new loop, you have t create it manually and set as default:</p>
<pre><code>def scrap(category, field, pages, search, use_proxy, proxy_file):
    #...
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)    
    to_do = [ get_pages(url, params, conngen) for url in urls ]
    wait_coro = asyncio.wait(to_do)
    res, _ = loop.run_until_complete(wait_coro)
    #...
    return [ x.result() for x in res ]
</code></pre>
</div>
<span class="comment-copy">Thanks! Works like a charm now :)</span>
