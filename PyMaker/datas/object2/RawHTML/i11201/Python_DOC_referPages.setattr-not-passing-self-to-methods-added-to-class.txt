<div class="post-text" itemprop="text">
<p>In Python, is there a way to bind an unbound method without calling it?</p>
<p>I am writing a wxPython program, and for a certain class I decided it'd be nice to group the data of all of my buttons together as a class-level list of tuples, like so:</p>
<pre><code>class MyWidget(wx.Window):
    buttons = [("OK", OnOK),
               ("Cancel", OnCancel)]

    # ...

    def Setup(self):
        for text, handler in MyWidget.buttons:

            # This following line is the problem line.
            b = wx.Button(parent, label=text).Bind(wx.EVT_BUTTON, handler)
</code></pre>
<p>The problem is, since all of the values of <code>handler</code> are unbound methods, my program explodes in a spectacular blaze and I weep.</p>
<p>I was looking around online for a solution to what seems like should be a relatively straightforward, solvable problem. Unfortunately I couldn't find anything. Right now, I'm using <code>functools.partial</code> to work around this, but does anyone know if there's a clean-feeling, healthy, Pythonic way to bind an unbound method to an instance and continue passing it around without calling it?</p>
</div>
<div class="post-text" itemprop="text">
<p>All functions are also <em>descriptors</em>, so you can bind them by calling their <code>__get__</code> method:</p>
<pre><code>bound_handler = handler.__get__(self, MyWidget)
</code></pre>
<p>Here's R. Hettinger's excellent <a href="https://docs.python.org/2/howto/descriptor.html" rel="nofollow noreferrer">guide</a> to descriptors.</p>
<hr/>
<p>As a self-contained example pulled from <a href="https://stackoverflow.com/users/834176/keith-pinson">Keith's</a> <a href="https://stackoverflow.com/questions/1015307/python-bind-an-unbound-method#comment8431145_1015405">comment</a>:</p>
<pre><code>def bind(instance, func, as_name=None):
    """
    Bind the function *func* to *instance*, with either provided name *as_name*
    or the existing name of *func*. The provided *func* should accept the 
    instance as the first argument, i.e. "self".
    """
    if as_name is None:
        as_name = func.__name__
    bound_method = func.__get__(instance, instance.__class__)
    setattr(instance, as_name, bound_method)
    return bound_method

class Thing:
    def __init__(self, val):
        self.val = val

something = Thing(21)

def double(self):
    return 2 * self.val

bind(something, double)
something.double()  # returns 42
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done cleanly with <a href="http://docs.python.org/library/types.html#types.MethodType" rel="noreferrer">types.MethodType</a>. Example:</p>
<pre><code>import types

def f(self): print self

class C(object): pass

meth = types.MethodType(f, C(), C) # Bind f to an instance of C
print meth # prints &lt;bound method C.f of &lt;__main__.C object at 0x01255E90&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Creating a closure with self in it will not technically bind the function, but it is an alternative way of solving the same (or very similar) underlying problem. Here's a trivial example:</p>
<pre><code>self.method = (lambda self: lambda args: self.do(args))(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will bind <code>self</code> to <code>handler</code>:</p>
<pre><code>bound_handler = lambda *args, **kwargs: handler(self, *args, **kwargs)
</code></pre>
<p>This works by passing <code>self</code> as the first argument to the function. <code>object.function()</code> is just syntactic sugar for <code>function(object)</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Late to the party, but I came here with a similar question: I have a class method and an instance, and want to apply the instance to the method.  </p>
<p>At the risk of oversimplifying the OP's question, I ended up doing something less mysterious that may be useful to others who arrive here (caveat: I'm working in Python 3 -- YMMV).  </p>
<p>Consider this simple class:</p>
<pre><code>class Foo(object):

    def __init__(self, value):
        self._value = value

    def value(self):
        return self._value

    def set_value(self, value):
        self._value = value
</code></pre>
<p>Here's what you can do with it:</p>
<pre><code>&gt;&gt;&gt; meth = Foo.set_value   # the method
&gt;&gt;&gt; a = Foo(12)            # a is an instance with value 12
&gt;&gt;&gt; meth(a, 33)            # apply instance and method
&gt;&gt;&gt; a.value()              # voila - the method was called
33
</code></pre>
</div>
<span class="comment-copy">Define "unbound method"</span>
<span class="comment-copy">@Christopher - A method that isn't bound to the scope of the object it was sucked from, so you have to pass self explicitly.</span>
<span class="comment-copy">I particularly like "spectacular blaze and I weep."</span>
<span class="comment-copy">That's pretty cool. I like how you can omit the type and get back a "bound method ?.f" instead.</span>
<span class="comment-copy">I like this solution over the <code>MethodType</code> one, because it works the same in py3k, while <code>MethodType</code>'s arguments have been changed up a bit.</span>
<span class="comment-copy">And thus, a function to bind functions to class instances: <code>bind = lambda instance, func, asname: setattr(instance, asname, func.__get__(instance, instance.__class__))</code> Example: <code>class A: pass;</code> <code>a = A();</code> <code>bind(a, bind, 'bind')</code></span>
<span class="comment-copy">Huh, you learn something new every day. @Kazark In Python 3, at least, you can also skip supplying the type, as <code>__get__</code> will take that implicitly from the object parameter. I'm not even sure if supplying it does anything, as it makes no difference what type I supply as the second parameter regardless of what the first parameter is an instance of. So <code>bind = lambda instance, func, asname=None: setattr(instance, asname or func.__name__, func.__get__(instance))</code> should do the trick as well. (Though I'd prefer having <code>bind</code> usable as a decorator, personally, but that's a different matter.)</span>
<span class="comment-copy">Wow, never knew functions were descriptors. That's a very elegant design, methods are just plain functions in the class' <code>__dict__</code> and attribute access gives you unbound or bound methods through the normal descriptor protocol. I always assumed it was some sort of magic that happened during <code>type.__new__()</code></span>
<span class="comment-copy">+1 This is awesome, but there's no reference to it in the python docs at the URL you provided.</span>
<span class="comment-copy">+1, I prefer not to have calls to magic functions in my code (i.e. <code>__get__</code>). I don't know for which version of python this you tested this on, but on python 3.4, the <code>MethodType</code> function takes two arguments. The function and the instance. So this should be changed to <code>types.MethodType(f, C())</code>.</span>
<span class="comment-copy">Here it is! It's a good way to patch instance methods: <code>wgt.flush = types.MethodType(lambda self: None, wgt)</code></span>
<span class="comment-copy">It is actually mentioned in the docs, but in the descriptor page from the other answer: <a href="https://docs.python.org/3/howto/descriptor.html#functions-and-methods" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html#functions-and-methods</a></span>
<span class="comment-copy">Yes, this is about the same as my original fix, which was to use <code>functools.partial(handler, self)</code></span>
<span class="comment-copy">Yes, but this calls the method. The problem is I need to be able to pass the bound method as a callable object. I have the unbound method and the instance I'd like it to be bound to, but can't figure out how to put it all together without immediately calling it</span>
<span class="comment-copy">No it doesn't, it'll only call the method if you do bound_handler(). Defining a lambda does not call the lambda.</span>
<span class="comment-copy">You could actually use <code>functools.partial</code> instead of defining a lambda. It doesn't solve the exact problem, though. You're still dealing with a <code>function</code> instead of an <code>instancemethod</code>.</span>
<span class="comment-copy">@Alan: what's the difference between a <code>function</code> whose first argument you partial-ed and <code>instancemethod</code>; duck typing can't see the difference.</span>
<span class="comment-copy">@LieRyan the difference is that you're still not dealing with the fundamental type. <code>functools.partial</code> drops some metadata, e.g. <code>__module__</code>. (Also I wanna state for the record I cringe real hard when I look at my first comment on this answer.)  In fact in my question I mention I'm already using <code>functools.partial</code> but I felt like there had to be a "purer" way, since it's easy to get both unbound and bound methods.</span>
<span class="comment-copy">This doesn't solve my issue - which is that I wanted <code>meth</code> to be invokable without having to send it the <code>a</code> argument (which is why I initially used <code>functools.partial</code>) - but this is preferable if you don't need to pass the method around and can just invoke it on the spot.  Also this works the same way in Python 2 as it does in Python 3.</span>
<span class="comment-copy">Apologies for not reading your original requirements more carefully.  I am partial (pun intended) to the lambda-based approach given by @brian-brazil in <a href="https://stackoverflow.com/a/1015355/558639">stackoverflow.com/a/1015355/558639</a> -- it's about as pure as you can get.</span>
