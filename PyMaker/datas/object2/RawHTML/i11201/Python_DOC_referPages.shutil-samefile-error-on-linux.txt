<div class="post-text" itemprop="text">
<p>I have a python script that is giving me a hard time on Ubuntu 12.02 with Python 2.7.3.</p>
<p>PS: it runs without problems on Windows.</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import shutil

&gt;&gt;&gt; shutil.copy("/mnt/my_network_dive/somewhere/sample.xml", "/mnt/my_network_drive/COMPLETED/")
Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    File "/usr/lib/python2.7/shutil.py", line 117, in copy
        copyfile(src, dst)
    File "/usr/lib/python2.7/shutil.py", line 69, in copyfile
        raise Error("`%s` and `%s` are the same file" % (src, dst))
shutil.Error:    `/mnt/my_network_dive/somewhere/sample.xml` and `/mnt/my_network_drive/COMPLETED/sample.xml` are the same file
</code></pre>
<p>Checking some properties of the files:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; os.path.exists("/mnt/my_network_drive/somewhere/sample.xml")
True
&gt;&gt;&gt; os.path.exists("/mnt/my_network_drive/COMPLETED/sample.xml")
True
&gt;&gt;&gt; os.stat("/mnt/my_network_drive/somewhere/sample.xml")
posix.stat_result(st_mode=33272, st_ino=4913809333, st_dev=25L, st_nlink=1, st_uid=1000, st_gid=0, st_size=5447, st_atime=1465311674, st_mtime=1465311674, st_ctime=1465311685)
&gt;&gt;&gt; os.stat("/mnt/my_network_drive/COMPLETED/sample.xml")
posix.stat_result(st_mode=33272, st_ino=4913809333, st_dev=25L, st_nlink=1, st_uid=1000, st_gid=0, st_size=10, st_atime=1465317482, st_mtime=1465317482, st_ctime=1465317483)
&gt;&gt;&gt; os.path.islink("/mnt/my_network_drive/somewhere/sample.xml")
False
&gt;&gt;&gt; os.path.islink("/mnt/my_network_drive/COMPLETED/sample.xml")
False

&gt;&gt;&gt; shutil._samefile("/mnt/my_network_dive/somewhere/sample.xml", "/mnt/my_network_drive/COMPLETED/sample.xml")
False
</code></pre>
<p>As you see, calling <code>shutil._samefile</code> I get <code>False</code> but <code>shutil.copy</code> still raise the <code>samefile error</code>.</p>
<p>Am I forgetting something? Any other way to move or copy files with Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the two files are both hard links to the same file.  You can tell because they share the same inode number</p>
<pre><code>st_ino=4913809333
</code></pre>
<p>Windows users generally don't create hard links.  They are more common in linux environments, which is why you may have not encountered the problem until now.</p>
<p>It is odd that <code>samefile</code> returns <code>False</code>.  What OS are you using?  <code>shutil._samefile</code> is just a wrapper around <code>os.path.samefile</code> (on systems where that function exists).  What results do you get from <code>os.path.samefile</code>?  On posix systems, it just checks that the device and inode match (which they do in your case) and it should return <code>True</code></p>
<p><em>posixpath.py</em></p>
<pre><code>def samefile(f1, f2):
    s1 = os.stat(f1)
    s2 = os.stat(f2)
    return samestat(s1, s2)

def samestat(s1, s2):
    return s1.st_ino == s2.st_ino and s1.st_dev == s2.st_dev
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <strong>python 3</strong> in shutil.copy there's additional argument follow_symlinks=True
Look at this <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow">https://docs.python.org/3/library/shutil.html</a></p>
<blockquote>
<p>If follow_symlinks is false, and src is a symbolic link, dst will be created as a symbolic link. If follow_symlinks is true and src is a symbolic link, dst will be a copy of the file src refers to.</p>
</blockquote>
</div>
<span class="comment-copy">There's no need to copy them. They're two different directory entries pointing at the same file. Being the same file, there's no possible way their contents can differ.</span>
<span class="comment-copy">(Why <code>shutil._samefile</code> returns False is a different question, and perhaps something to file a bug over, but since <code>st_dev</code> and <code>st_ino</code> are identical, there's no question that it genuinely is the same content pointed to by both directory entries).</span>
<span class="comment-copy">@vmenezes The first argument of copy in the first box contains dive instread of drive, is it only typo?</span>
<span class="comment-copy">On Macintosh &amp; Unix <code>shutil._samefile()</code> uses <code>os.path.samefile(src, dst)</code> which is only available on those platforms to determine if two paths are the same. On other platforms like Windows, it just compares the two normalized absolute path strings â€” which is likely part of why the results differ.</span>
<span class="comment-copy">What type of mount is my_network_drive? NFS, CIFS or ??</span>
<span class="comment-copy">It's likely that one or both of the parent directories are symlinks to the same directory.</span>
<span class="comment-copy">@tdelaney But <code>samefile</code> should still return <code>True</code> in that case, right?</span>
<span class="comment-copy">Yes, I am as puzzled by that as you. As with a hard link, the dev and inode should be the same.</span>
<span class="comment-copy">Thanks for the exnplanation @BrendanAbel I'm using Ubuntu 12.02  I ended up doing a <code>os.system("cp --remove-destination file1 file2")</code> to workaround it.</span>
<span class="comment-copy">getting worse, there is another app that probably doesn't use context management well and sometimes it creates a new file on my <code>dest_folder</code> but dont save it and quit. When I try to copy from <code>src_folder</code> to <code>dest_folder</code> on another script with <code>shutil</code> I get the same errror, but if I go on shell <code>ls -la dest_folder</code> the folder is empty. Sounds crazy and probably I could blame the other script but <code>os.system("cp --remove-destination src_file destfile")</code> worked.</span>
<span class="comment-copy">Doesn't answer OP's question about Python 2.7.3.</span>
<span class="comment-copy">@martineau But maybe checking how it works in Python 3 could help determine if that's the problem. If yes, maybe he could look at the source of the newer version and copy this code.</span>
<span class="comment-copy">How do you know it's not a problem with using Python 3 as well?</span>
<span class="comment-copy">the problem was bigger then that, there was actually times that even when the dest_file didn't exist I was getting the same error(because another script using the file before crashed without closing the file, I could get out of python and run <code>ls -la</code> in the folder and there was no file in there but when copying it would break with <code>same file</code> error).My workaround was <code>os.system("cp --remove-destination src_file dest_file")</code>.</span>
<span class="comment-copy">vmenezes: Glad you found a work-around...but it sounds like you still don't know what causes the problem when you try to use Python.</span>
