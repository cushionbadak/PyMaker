<div class="post-text" itemprop="text">
<p>Python 3 seems to have some arbitrary limit to Decimal sizes that Python 2 does not. The following code works on Python 2:</p>
<pre><code>Decimal('1e+100000000000000000000')
</code></pre>
<p>But on Python 3 I get:</p>
<pre><code>decimal.InvalidOperation: [&lt;class 'decimal.InvalidOperation'&gt;]
</code></pre>
<p>Increasing the precision does not help. Why is this happening? Is there something I can do about it?</p>
</div>
<div class="post-text" itemprop="text">
<p>It would appear that <code>Decimal</code>s actually <em>can't</em> hold arbitrarily long numbers: </p>
<pre><code>&gt;&gt;&gt; d = Decimal('10') ** Decimal('100000000000000000000')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
decimal.Overflow: [&lt;class 'decimal.Overflow'&gt;]
</code></pre>
<p>Indeed, I never heard that arbitrarily long numbers was the point of <code>Decimal</code> - just proper rounding and decimals of arbitrary precision. If you want an arbitrarily long number, that's what longs are for, and in Python3 that's just what you've got.</p>
<pre><code>&gt;&gt;&gt; d = 10 ** 100000000000000000000
</code></pre>
<p>(Though it takes a long long while to compute this. My Mac book with I believe a core i5 <em>still</em> hasn't finished after a couple of minutes. Heck, even the string 1, followed by all those zeroes, is going to be really <em>really</em> big.)</p>
<p>For further kicks and grins, I discovered that you can <a href="https://docs.python.org/3/library/decimal.html#decimal.Overflow" rel="nofollow">configure the overflow value, apparently</a>, though you still can't get such a whopping big number:</p>
<pre><code>&gt;&gt;&gt; from decimal import getcontext
&gt;&gt;&gt; getcontext().Emax = 100000000000000000000
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: Python int too large to convert to C ssize_t
</code></pre>
</div>
<span class="comment-copy">It seems to be related to the precision of your OS.  In python2 you get Decimal('infinity') but python3 doesn't seem to allow 'infinity' in decimal.</span>
<span class="comment-copy">Sorry that I can't help but I have no error with python2 or python3. Could even write a much larger number.</span>
<span class="comment-copy">@gdlmx what are you basing that on? If it's related to the precision of my OS, why does it not happen on Python 2? Also, Decimal('Infinity') does work.</span>
<span class="comment-copy">Actually a <code>decimal.Overflow</code> could be expected rather than a <code>decimal.InvalidOperation</code>, what is always related to an <i>operation</i>. In your example, there is no operation at all.</span>
<span class="comment-copy">I am curious to know what <code>1e+100000000000000000000</code> is useful for :)</span>
<span class="comment-copy">It looks like Python 2 allows me to create such large numbers but refuses to operate on them due to the exponent being above Emax.</span>
<span class="comment-copy">In python 2, it is possible to specify an arbitrarily large <code>Emax</code>. The same behavior is True in Python 3 if you set <code>sys.modules['_decimal'] = None</code> before importing the <code>decimal</code> module.</span>
<span class="comment-copy">@ppperry very interesting. And also sounds like a terrible thing to do ;)</span>
