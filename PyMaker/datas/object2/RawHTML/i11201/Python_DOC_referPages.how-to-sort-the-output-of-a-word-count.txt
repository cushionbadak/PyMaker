<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/613183/how-do-i-sort-a-dictionary-by-value">How do I sort a dictionary by value?</a>
<span class="question-originals-answer-count">
                    42 answers
                </span>
</li>
</ul>
</div>
<p>So I have the code below to count the number of words in a text file.  I'd like to sort the output of this by words that appeared the greatest number of times to words that appeared the least number of times.  How can this be accomplished?    </p>
<pre><code>ally = open("alice.txt", "r")
wordcount={}
for word in ally.read().split():
    if word not in wordcount:
        wordcount[word] = 1

    else:
       wordcount[word] += 1

for k,v, in wordcount.items():
    print(k,v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a>. It will both shorten your code and get you the ordering that you want.</p>
<p>Quoting from the documentation:</p>
<blockquote>
<p>A Counter is a dict subclass for counting hashable objects. It is an
  unordered collection where elements are stored as dictionary keys and
  their counts are stored as dictionary values. Counts are allowed to be
  any integer value including zero or negative counts. The Counter class
  is similar to bags or multisets in other languages.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; c = Counter(['eggs', 'ham'])
&gt;&gt;&gt; c['bacon']                              # count of a missing element is zero
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can view the sorted dictionary using <code>operator.itemgetter()</code>:</p>
<pre><code>from operator import itemgetter

wordcount = {'test': 1, 'hello': 3, 'test2':0}

sortedWords = sorted(wordcount.items(), key=itemgetter(1), reverse = True)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; sortedWords
[('hello', 3), ('test', 1), ('test2', 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do it for you:-</p>
<pre><code>ally = open("alice.txt", "r")
wordcount={}
for word in ally.read().split():
    if word not in wordcount:
        wordcount[word] = 1
    else:
       wordcount[word] += 1

for k,v, in sorted(wordcount.items(), key=lambda words: words[1], reverse = True):
    print(k,v)
</code></pre>
</div>
