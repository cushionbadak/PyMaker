<div class="post-text" itemprop="text">
<p>I have a python program, and I want to get the path to the program from within the program, but INCLUDING the file name itself. The name of my file is PyWrapper.py. Right now I'm doing this:</p>
<pre><code>import sys,os
pathname = os.path.dirname(sys.argv[0])
fullpath = os.path.abspath(pathname)
print fullpath
</code></pre>
<p>The output is:</p>
<pre><code> /home/mrpickles/Desktop/HANSTUFF/securesdk/src/
</code></pre>
<p>This is the path to the directory in which my file is saved, but I would like it to output:</p>
<pre><code>/home/mrpickles/Desktop/HANSTUFF/securesk/src/PyWrapper.py/
</code></pre>
<p>Which is the path, including the filename itself. Is this possible? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print __file__
</code></pre>
<p>should work.  </p>
<p><code>__file__</code> returns the path of the executed file</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <code>__file__</code>. This gives you a filename where the code actually <strong>is</strong>.</p>
<p>Also, there's another option:</p>
<pre><code>import __main__ as main
print(main.__file__)
</code></pre>
<p>This gives you a filename of a script being <strong>run</strong> (similar to what your <code>argv</code> does).</p>
<p>The difference comes into play when the code is imported by another script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just in case you would like to find the absolute path for other files, not just the one you are currently running, in that same directory, a general approach could look like this:</p>
<pre><code>import sys,os

pathname = os.path.dirname(sys.argv[0])
fullpath = os.path.abspath(pathname)

for root, dirs, files in os.walk(fullpath):
    for name in files:
        name = str(name)
        name = os.path.realpath(os.path.join(root,name))
        print name
</code></pre>
<p>As others are mentioning, you could take advantage of the <code>__file__</code> attribute. You can use the <code>__file__</code> attribute to return several different paths relevant to the currently loaded Python module (copied from <a href="https://stackoverflow.com/a/9271479/5209610">another StackOverflow answer</a>):</p>
<blockquote>
<p>When a module is loaded in Python, <strong>file</strong> is set to its name. You can then use that with other functions to find the directory that the file is located in.</p>
</blockquote>
<pre><code># The parent directory of the directory where program resides.
print os.path.join(os.path.dirname(__file__), '..')

# The canonicalised (?) directory where the program resides.
print os.path.dirname(os.path.realpath(__file__))

# The absolute path of the directory where the program resides.
print os.path.abspath(os.path.dirname(__file__))
</code></pre>
<p>Remember to be wary of where the module you are loading came from. It could affect the contents of the <code>__file__</code> attribute (copied from <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python 3 Data model documentation</a>):</p>
<blockquote>
<p><code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file. The <code>__file__</code> attribute <strong>may be missing for certain types of modules</strong>, such as C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>try using <code>__file__</code>. as long as the module is ran from a file, i.e. not code in an editor, <code>__file__</code> will be the abs path to the module!</p>
<pre><code>print __file__
</code></pre>
<p>Or for command line.</p>
<pre><code>def get_my_name():
    if __name__ == '__main__':
        return os.path.abspath(os.path.join(os.curdir, __file__))
    else:
        return __file__.replace('.pyc', '.py')
</code></pre>
</div>
<span class="comment-copy">So what I'm trying to do is get the full pathname including the filename and pass it into another function as an argument. Could I set some variable as equal to <b>file</b>? Eg, fullpath = <b>file</b>?</span>
<span class="comment-copy">Also for some reason the formatting god rid of the two underscores before and after file in the previous comment</span>
<span class="comment-copy">yes. <code>fullpath=__file__</code></span>
<span class="comment-copy">the formatting problem is because two underscores usually stand for bold, unless you put them in a code wrapper.</span>
<span class="comment-copy">No it isn't.  If I run my script like this: <code>python foo.py</code>, <code>__file__</code> will just be <b>foo.py</b>.</span>
<span class="comment-copy">You are correct, didn't know the OP was considering running the program in such a primitive way... Updated origonal</span>
