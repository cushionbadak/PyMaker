<div class="post-text" itemprop="text">
<p>I'd like to count the number of leaf (i.e. only those keys that have no further child elements) nodes in a JSON structure.</p>
<p>I can't find anything obvious to do this, so have been trying to write a function, but am struggling to find one that works, without using a global variable.</p>
<p>This is what I have so far:</p>
<pre><code>def count_leafs(nested):
  is isinstance(nested, Mapping):
    for k, v in nested.items():
      if isinstance(v, Mapping):
        for i_k, i_v in count_leafs(v):
          yield i_k, i_v
      elif isinstance(v, MutableSequence):
        for i_k in v:
          for i_i_k, i_i_v in i_k.items():
            count_leafs(i_i_v)
      else:
        yield k, v
  elif isinstance(nested, MutableSequence):
    for k in nested:
      count_leafs(k)


for k,v in count_leafs(json):
 leaf_count += 1
</code></pre>
<p>Which doesn't really work as some non leaf nodes are counted, and it's not recursing all the way down into some structures. </p>
</div>
<div class="post-text" itemprop="text">
<p>In general, I prefer non-recursive solutions over recursive ones. My algorithm works like this:</p>
<ol>
<li>Initialize the queue and place the json object into it</li>
<li>Loop while the queue is not empty</li>
<li>Get one node from the queue

<ul>
<li>If it is a Mapping, add all the values to the queue for later processing</li>
<li>If it is a sequence or a set (be careful: strings are sequence, too--we need to test against it), we add all the elements to the queue for later processing</li>
<li>If the it is none of the above, count it</li>
</ul></li>
</ol>
<p>Here is the code:</p>
<pre><code>from collections import Mapping, Sequence, Set, deque

def count_leaves(nested):
    queue = deque([nested])
    count = 0
    while queue:
        node = queue.popleft()
        if isinstance(node, Mapping):
            queue.extend(node.values())
        elif isinstance(node, (Sequence, Set)) and not isinstance(node, basestring):
            queue.extend(node)
        else:
            count += 1

    return count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your pseudo-code is over-complicated and buggy. I would also suggest you write code that follows the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8 - Style Guide for Python Code</a> closely, for both yourself and others reading the code you write.</p>
<p>Anyway, as a test case, suppose you had some JSON data like this:</p>
<pre><code>json_data = {
    "glossary": {
        "title": "example glossary",
        "answer": 42,
        "boolean": True,
        "nada": None,
        "GlossDiv": {
            "GlossList": {
                "GlossEntry": {
                    "GlossDef": {
                        "GlossSeeAlso": [
                            "GML",
                            "XML"
                        ],
                        "para": "A meta-markup language, used to create markup "
                                "languages such as DocBook."
                    },
                    "GlossSee": "markup",
                    "Acronym": "SGML",
                    "GlossTerm": "Standard Generalized Markup Language",
                    "SortAs": "SGML",
                    "Abbrev": "ISO 8879:1986",
                    "ID": "SGML"
                }
            },
            "title": "S"
        }
    }
}
</code></pre>
<p>You can recursively count the leaves like this:</p>
<pre><code>from collections import Mapping, MutableSequence

def count_leaves(json_obj):

    def leaf_iterator(json_obj):
        if isinstance(json_obj, Mapping):
            for v in json_obj.values():
                for obj in leaf_iterator(v):
                    yield obj
        elif isinstance(json_obj, MutableSequence):
            for v in json_obj:
                for obj in leaf_iterator(v):
                    yield obj
        else:
            yield json_obj

    return sum(1 for leaf in leaf_iterator(json_obj))

leaf_count = count_leaves(json_data)
print('leaf count: {}'.format(leaf_count))  # -&gt; leaf_count: 14
</code></pre>
<p>I nested the <code>leaf_iterator()</code> generator inside the leaf counting function, but it could also be defined outside if it should it prove useful in a larger context. The code in it could be simplified even further in Python 3 by using a <a href="https://docs.python.org/3/reference/expressions.html#yieldexpr" rel="nofollow"><code>yield from</code><em><code>&lt;expression&gt;</code></em></a> which was introduced in Python version 3.3.</p>
</div>
<span class="comment-copy">Sorry... <b>how</b> is this off-topic ?</span>
<span class="comment-copy">Replaced basestring with str as on Python3, cheers Hai.</span>
<span class="comment-copy">Cool. I learned something new.</span>
<span class="comment-copy">In the return statement, I believe you mean <code>json_obj</code>, not <code>json_data</code></span>
<span class="comment-copy">@HaiVu: Yes, I did â€” fixed. Thank you. Good catch, although at that point they're always both the same thing, so it wasn't noticeable and didn't change the results (in the test code anyway).</span>
