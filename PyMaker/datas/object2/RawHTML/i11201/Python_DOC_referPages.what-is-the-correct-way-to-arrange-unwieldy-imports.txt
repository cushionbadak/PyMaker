<div class="post-text" itemprop="text">
<p>I'm fairly new to python and looking for the best (most preferred) way to handle imports in a project.</p>
<p>I've been given the task to cleanup a python project and noticed there are the same includes in many modules throughout the project.  Here is an example of what I am seeing.</p>
<p>File my_main_file.py</p>
<pre><code>import os
import sys
import inspect
...
import gvars
import Common
...
from Tkinter import Menu
from Tkinter import WORD
from Tkinter import END
from Tkinter import Text
...
import menus.config
</code></pre>
<p>File gvars.py (also calls Tkinter)</p>
<pre><code>from Tkinter import Text
from Tkinter import Tk
import Tkinter
</code></pre>
<p>File Common.py (also calls gvars and os)</p>
<pre><code>import gvars
import tkFileDialog
import os
</code></pre>
<p>From Menus/config.py (also calls Common, gvars and Tkinter)</p>
<pre><code>import Common
import gvars
import UIFunctions
import Tkinter

# Imports from Tk
from Tkinter import END
from Tkinter import Toplevel
from Tkinter import Button, Checkbutton
from Tkinter import Label
</code></pre>
<p>And on and on it goes...  As you can see this is a mess I inherited. I know there are issue here (like "import blah" followed by "from blah import yuck").  I'm just looking for the most pythonic way to handle this.</p>
<p>Do I only need the imports in my_main_file.py? I.e. will Common.py code be able to access os. methods if "import os" is removed from the module and i=is only in the main script.</p>
<p>Is it best to have imports that are only referenced in a module imported in that module even though they are the similar?  I.e. "from Tkinter import Text" in one module and "from Tkinter import END" in another.</p>
<p>Side question - which is better?</p>
<pre><code>import Tkinter
</code></pre>
<p>or</p>
<pre><code>from Tkinter import Menu
from Tkinter import WORD
from Tkinter import END
from Tkinter import Text
from Tkinter import Scrollbar
from Tkinter import Toplevel
from Tkinter import Button, Checkbutton
from Tkinter import Label
from Tkinter import Entry
from Tkinter import LEFT, RIGHT, TOP, BOTTOM
from Tkinter import DISABLED
from Tkinter import X, Y, BOTH
from Tkinter import VERTICAL, HORIZONTAL
from Tkinter import Listbox
from Tkinter import Frame, LabelFrame
from Tkinter import Entry
from Tkinter import N,S,E,W
from Tkinter import BROWSE, EXTENDED
from Tkinter import DISABLED, NORMAL
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow">the PEP8 styleguide</a> (one of the most authoritative sources on what is pythonic) using wildcard imports (<code>from ... import *</code>) should be avoided unless you are republishing an interface, which is not your intent.</p>
<p>My suggestion is to <code>import TKinter as tk</code> and refer to <code>tk.WORD</code> etc.</p>
<p>One of the reasons for doing this is that some of the constants and classes from <code>Tkinter</code> are fairly generically named - <code>N</code>, <code>Button</code>, etc.</p>
<p>By referring to <code>tk.N</code>, <code>tk.Button</code>, etc. it makes your intent in the code much clearer.</p>
</div>
<div class="post-text" itemprop="text">
<p>If one or two specific things are imported, then:</p>
<pre><code>from Tkinter import END, Toplevel, ...
</code></pre>
<p>If pretty much everything in that module is imported, then:</p>
<pre><code>from Tkinter import *
</code></pre>
<p>If more than a bunch of functions and classes are imported, then:</p>
<pre><code>import Tkinter
</code></pre>
<p>Or more pythonic:</p>
<pre><code>import Tkinter as tk 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if we can have common file to import all common modules. I think, for all of the files which you mentioned in question, you need to have separate imports. </p>
<p>About your side question, it is better to import specific function, method from class. You should import only those methods, functions which are being used in file. if you just do <code>import Tkinter</code>, then you have to use it like <code>Tkinter.Menu</code>, <code>Tkinter.WORD</code> etc in your code. Then it might be difficult to read if some library or module's functions have been used at lot of places in your file. So its better to import all required methods, functions from module and use them. You can import many functions from same library in one liner.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way I've solved this in the past is to have an <code>__init__.py</code> file in each folder where the sources exist, then all your imports can go in there</p>
<p>There are even better ways of organizing python files. For more information on how to organize modules, see the <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">official documentation</a></p>
<ul>
<li><a href="https://docs.python.org/3/index.html" rel="nofollow noreferrer">docs.python.org</a></li>
<li><a href="https://stackoverflow.com/questions/448271/what-is-init-py-for">stackoverflow</a></li>
</ul>
<p>Also checkout <a href="https://pypi.python.org/pypi/importanize" rel="nofollow noreferrer">importanize</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Agree that <strong>from Tkinter import *</strong> is best avoided.</p>
<p>One way I found to deal with long imports on any given module.  Not totally clean, but less wordy than the 1 per line repeats you have.</p>
<p>I would have done it with your TKinter import list, but I don't have it installed, so using <strong>sys</strong> instead.</p>
<pre><code>#opening a parenthesis allows for implicit line feeds
from sys import (  
    stderr, stdout, stdin, #could have more...
    #dont need this anymore
    # maxint,
    #maxsize,  #dont this need anymore either
    argv,
    )

print globals().keys()
</code></pre>
<p>output:</p>
<pre><code>['stdout', '__builtins__', '__file__', 'stdin', 'argv', '__package__', 'stderr', '__name__', '__doc__']
</code></pre>
</div>
<span class="comment-copy"><code>from Tkinter import *</code>. One of the exceptions that you normally should <i>not</i> <code>from ... import *</code>.</span>
<span class="comment-copy">Having the imports at the top of each file is not a problem. The problem is when you <i>don't</i>, and it becomes unclear where particular names have come from. That's why Python imports are structured this way; each file can be read on its own and you can see exactly what's in scope.</span>
<span class="comment-copy">@jasper: that is bad advice. PEP8 discourages wildcard imports, and tkinter shouldn't be one of the exceptions even though lots of tutorials do it.</span>
<span class="comment-copy">@jonrsharpe: sorry; autocomplete picked the wrong "J". Thanks for pointing that out.</span>
<span class="comment-copy">Remember to accept an answer if any of them solved your problem, or comment on them if they did not.</span>
<span class="comment-copy">PEP8 discourages wildcard imports.</span>
