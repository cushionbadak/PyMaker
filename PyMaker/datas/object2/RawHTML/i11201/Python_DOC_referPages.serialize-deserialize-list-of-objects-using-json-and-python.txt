<div class="post-text" itemprop="text">
<p>How do i serialize a list of objects(Person) to a json file and then read that json file back and deserialize them back into objects? I know how to write to a json file but i'm not clear on how to convert my objects to json properly.</p>
<p>Below is my simplified snippet of code. I have a list containing two people and i want to serialize them and save to a json file. Then deserialize them back to objects of type People.</p>
<p>Thanks for the help.</p>
<pre><code>import json

class Person(object):
    def __init__(self, name, nickname):
        self.name = name
        self.age = 0
        self.nickname = nickname

# create a few people
A = Person('John', 'Joker')
B = Person('Marisa', 'Snickerdoodle')

# add people to list
peeps = []
peeps.append(A)
peeps.append(B)

# dummy data saving to json for testing
data = {
   'name' : 'ACME',
   'shares' : 100,
   'price' : 542.23
}

with open('data.json', 'w') as outfile:
    json.dump(data, outfile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>json</code> module expects lists, dicts, strings, numbers, booleans, and None, not custom classes. You need to make a dictionary out of your <code>People</code> instance. A simple way to do this is with <code>vars(A)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot serialize custom classes using JSON. </p>
<p>You should use the <code>pickle</code> module instead. From the docs:</p>
<p><a href="https://docs.python.org/3/library/pickle.html#comparison-with-json" rel="nofollow">https://docs.python.org/3/library/pickle.html#comparison-with-json</a></p>
<blockquote>
<p>JSON, by default, can only represent a subset of the Python built-in
  types, <strong>and no custom classes</strong>;</p>
</blockquote>
<p>Emphasis mine. </p>
<p>Also, from <a href="http://www.json.org/" rel="nofollow">http://www.json.org/</a>:</p>
<blockquote>
<p>JSON is built on two structures:</p>
<ul>
<li>A collection of name/value pairs. In various languages, this is realized as an object, record, struct, <strong>dictionary</strong>, hash table, keyed
  list, or associative array.</li>
<li>An ordered list of values. In most languages, this is realized as an array, vector, <strong>list</strong>, or sequence.</li>
</ul>
</blockquote>
<p>Again, emphasis is mine. In python, you can serialize dictionaries or lists that contain values, where values can be:</p>
<blockquote>
<p>A value can be a string in double quotes, or a number, or true or
  false or null, or an object or an array. These structures can be
  nested.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>add to_dict method to your person class. try this</p>
<pre><code>In [2]: class Person(object):
   ...:         def __init__(self, name, nickname):
   ...:                 self.name = name
   ...:                 self.age = 0
   ...:                 self.nickname = nickname
   ...:         def to_dict(self):
   ...:             data = {}
   ...:             data['name'] = self.name
   ...:             data['age'] = self.age
   ...:             return data
   ...:         
peeps = []
peeps.append(A.to_dict())
peeps.append(B.to_dict())

In [9]: with open('data.json', 'w') as outfile:
   ...:     json.dump(peeps, outfile)

In [10]: !cat data.json
[{"age": 0, "name": "John"}, {"age": 0, "name": "Marisa"}]
</code></pre>
<p>Update:
To deserialize json to python object</p>
<pre><code>In [4]: with open('data.json', 'r') as infile:
   ....     data = json.loads(infile.read())
   ...:     
In [5]: A = Person(data[0]['name'], data[0]['nickname'])
</code></pre>
</div>
<span class="comment-copy">could you elaborate or show an example of how I could do this ?</span>
<span class="comment-copy">@JokerMartini Try <code>print(vars(A))</code> and see what happens.</span>
<span class="comment-copy">that works pretty well. If I do that, how can I read it back from json and convert to Person object ?</span>
<span class="comment-copy">@JokerMartini easiest way would be to add <code>age=0</code> to <code>Person.__init__</code> and then call <code>Person(**json.load(infile))</code>.</span>
<span class="comment-copy">is this suggest solution for serialization good practice or would it be more ideal going the route suggested by ravi.  I ask because I'm build an app which I don't want to start off in the wrong direction.</span>
<span class="comment-copy">thanks for the help . You show how to write peraon to json, how can  I read back from json file and convert to an object type Person.</span>
<span class="comment-copy">@JokerMartini Updated Answer.</span>
