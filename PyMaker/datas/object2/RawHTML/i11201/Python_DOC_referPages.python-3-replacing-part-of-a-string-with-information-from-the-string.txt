<div class="post-text" itemprop="text">
<p>I have a python project where I am essentially coding a custom language, and for it I need a function that can replace user entered strings with different data, for example random numbers (It's hard to explain what I want to do c:)</p>
<p>An example of this would be that the user types into the command line:</p>
<pre><code>j@dev-box$ file write hi.txt {RANDOM_INT[1, 20]}
</code></pre>
<p>and the function would  run like:</p>
<pre><code>parseOutput = parseFunction(userInputString) # userInputString = "file write hi.txt {RANDOM_INT[1,20]}
</code></pre>
<p>then parseOutput would equal <code>file write hi.txt 14</code> , with the random number in place of the {RANDOM_INT[x, x]} tag</p>
<p>I hope I made what I am looking for clear enough as it is difficult to explain.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, instead of using the Python template string (which are powerful but limited) I suggest you using <a href="http://jinja.pocoo.org/" rel="nofollow">Jinja2</a> templates.</p>
<p>This template engine is well-known for developing web applications.</p>
<p>To implement your custom language, you can use <strong>filters</strong>. Here is an example:</p>
<p>First import the required modules:</p>
<pre><code>import random

from jinja2.environment import Environment
</code></pre>
<p>Define a filter to calculate a random number, like this:</p>
<pre><code>def random_int(value, x, y):
    return "{0}".format(random.randint(x, y))
</code></pre>
<p><em>note: the <strong>value</strong> parameter is not used here.</em></p>
<p>Define a Jinja environment and add your custom filter:</p>
<pre><code>env = Environment()
env.filters["RANDOM_INT"] = random_int
</code></pre>
<p>You can then use it like this (you have to slightly change the user input to conform to Jinja template syntax):</p>
<pre><code>user_input = 'file write hi.txt {{ "" | RANDOM_INT(1, 10) }}'
template = env.from_string(user_input)
result = template.render()
</code></pre>
<p>The result:</p>
<pre><code>print(result)
# file write hi.txt 9
</code></pre>
<p>Avantages: Jinja can check the syntax and missing formats for you.</p>
<p><strong>EDIT: more examples</strong></p>
<p>You can change the environment configuration to use
single curly braces instead of double:</p>
<pre><code>env = Environment(variable_start_string="{", variable_end_string="}")
</code></pre>
<p>Instead of creating a custom filter, you can use builtin functions and filters.
Eg.: use the <code>range()</code> function with the <code>random</code>filter:</p>
<pre><code>user_input = 'file write hi.txt { range(10) | random }'
template = env.from_string(user_input)
result = template.render()
print(result)
</code></pre>
<p>finally, you can extend the global context with your own functions</p>
<pre><code>env = Environment(variable_start_string="{", variable_end_string="}")
env.globals["RANDOM_INT"] = random.randint

user_input = 'file write hi.txt { RANDOM_INT(1, 10) }'
template = env.from_string(user_input)
result = template.render()
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try to use <code>str.find</code> functionality from Python. <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow">Documentation</a></p>
<p>Example:</p>
<pre><code>def parseFunction(input):
     index = input.find('{') # or look for more i.e. find('{RANDOM_INT')
     return input[:index] + ' ' + randomInt # remember to add the space
</code></pre>
<p>You can generate the <code>randomInt</code> using <code>random.randInt</code> from the built-in library <code>random.py</code>. <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow">Documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you needed?</p>
<pre><code>import re
import random
def parseFunction(string):
    matches = re.match('.*\{r\[(\d+),(\d+)\]\}.*',string)
    rand = random.randint(int(matches.groups()[0]), int(matches.groups()[1]))
    result = re.sub('\{r\[(\d+),(\d+)\]\}',str(rand),string)
    return result
</code></pre>
</div>
<span class="comment-copy">Please could the downvoter explain why he/she gave my post a downvote? I would appreciate their help to improve my post :)</span>
<span class="comment-copy">Wow, this looks really powerful! Will have a proper tinker when I get home :)</span>
<span class="comment-copy">Thanks, solved my problem perfectly. Will upvote and try to add as accepted answer! Just a quick question though; my project is designed to run on python with no packages installed. I have extracted the jinja2 folder and packaged it with my project, and it works, but I am wondering if this is legal? Thanks, Jay. PS: If it isn't, then I didn't manage it :P</span>
<span class="comment-copy">Thanks,  but I was looking to grab the randInt parameters from the input :) . I'll have a tinker with this and see if I can adapt it</span>
<span class="comment-copy">This looks good (cant test it for a few hours though) but it seems to be for python 2?</span>
<span class="comment-copy">Hmm. Seems to return a nonetype error? Traceback (most recent call last):   File "&lt;pyshell#19&gt;", line 1, in &lt;module&gt;     parseFunction("hi {r[1, 2]}")   File "&lt;pyshell#18&gt;", line 3, in parseFunction     rand = random.randint(int(matches.groups()[0]), int(matches.groups()[1])) AttributeError: 'NoneType' object has no attribute 'groups'</span>
