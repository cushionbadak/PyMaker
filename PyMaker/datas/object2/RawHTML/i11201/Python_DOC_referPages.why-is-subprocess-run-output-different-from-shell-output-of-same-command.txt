<div class="post-text" itemprop="text">
<p>I am using <code>subprocess.run()</code> for some automated testing. Mostly to automate doing:</p>
<pre><code>dummy.exe &lt; file.txt &gt; foo.txt
diff file.txt foo.txt
</code></pre>
<p>If you execute the above redirection in a shell, the two files are always identical. But whenever <code>file.txt</code> is too long, the below Python code does not return the correct result.</p>
<p>This is the Python code:</p>
<pre class="lang-python3 prettyprint-override"><code>import subprocess
import sys


def main(argv):

    exe_path = r'dummy.exe'
    file_path = r'file.txt'

    with open(file_path, 'r') as test_file:
        stdin = test_file.read().strip()
        p = subprocess.run([exe_path], input=stdin, stdout=subprocess.PIPE, universal_newlines=True)
        out = p.stdout.strip()
        err = p.stderr
        if stdin == out:
            print('OK')
        else:
            print('failed: ' + out)

if __name__ == "__main__":
    main(sys.argv[1:])
</code></pre>
<p>Here is the C++ code in <code>dummy.cc</code>:</p>
<pre class="lang-c++ prettyprint-override"><code>#include &lt;iostream&gt;


int main()
{
    int size, count, a, b;
    std::cin &gt;&gt; size;
    std::cin &gt;&gt; count;

    std::cout &lt;&lt; size &lt;&lt; " " &lt;&lt; count &lt;&lt; std::endl;


    for (int i = 0; i &lt; count; ++i)
    {
        std::cin &gt;&gt; a &gt;&gt; b;
        std::cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; std::endl;
    }
}
</code></pre>
<p><code>file.txt</code> can be anything like this:</p>
<pre class="lang-none prettyprint-override"><code>1 100000
0 417
0 842
0 919
...
</code></pre>
<p>The second integer on the first line is the number of lines following, hence here <code>file.txt</code> will be 100,001 lines long. </p>
<p><strong>Question:</strong> Am I misusing subprocess.run() ?  </p>
<p><strong>Edit</strong></p>
<p>My exact Python code after comment (newlines,rb) is taken into account:</p>
<pre><code>import subprocess
import sys
import os


def main(argv):

    base_dir = os.path.dirname(__file__)
    exe_path = os.path.join(base_dir, 'dummy.exe')
    file_path = os.path.join(base_dir, 'infile.txt')
    out_path = os.path.join(base_dir, 'outfile.txt')

    with open(file_path, 'rb') as test_file:
        stdin = test_file.read().strip()
        p = subprocess.run([exe_path], input=stdin, stdout=subprocess.PIPE)
        out = p.stdout.strip()
        if stdin == out:
            print('OK')
        else:
            with open(out_path, "wb") as text_file:
                text_file.write(out)

if __name__ == "__main__":
    main(sys.argv[1:])
</code></pre>
<p>Here is the first diff:</p>
<p><a href="https://i.stack.imgur.com/Fk2IW.jpg" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Fk2IW.jpg"/></a></p>
<p>Here is the input file: <a href="https://drive.google.com/open?id=0B--mU_EsNUGTR3VKaktvQVNtLTQ" rel="noreferrer">https://drive.google.com/open?id=0B--mU_EsNUGTR3VKaktvQVNtLTQ</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To reproduce, the shell command:</p>
<pre><code>subprocess.run("dummy.exe &lt; file.txt &gt; foo.txt", shell=True, check=True)
</code></pre>
<p>without the shell in Python:</p>
<pre><code>with open('file.txt', 'rb', 0) as input_file, \
     open('foo.txt', 'wb', 0) as output_file:
    subprocess.run(["dummy.exe"], stdin=input_file, stdout=output_file, check=True)
</code></pre>
<p>It works with arbitrary large files.</p>
<p>You could use <code>subprocess.check_call()</code> in this case (available since Python 2), instead of <code>subprocess.run()</code> that is available only in Python 3.5+.</p>
<blockquote>
<p>Works very well thanks. But then why was the original failing ? Pipe buffer size as in Kevin Answer ?</p>
</blockquote>
<p>It has nothing to do with OS pipe buffers. The warning from the subprocess docs that @Kevin J. Chase cites is unrelated to <code>subprocess.run()</code>. You should care about OS pipe buffers only if you use <code>process = Popen()</code> and <em>manually</em> read()/write() via multiple pipe streams (<code>process.stdin/.stdout/.stderr</code>).</p>
<p>It turns out that the observed behavior is due to <a href="https://connect.microsoft.com/VisualStudio/feedback/details/1902345/regression-fread-on-a-pipe-drops-some-newlines" rel="nofollow noreferrer">Windows bug in the Universal CRT</a>. Here's the same issue that is reproduced without Python: <a href="https://stackoverflow.com/q/36781891/4279">Why would redirection work where piping fails?</a></p>
<p>As said in <a href="https://connect.microsoft.com/VisualStudio/feedback/details/1902345/regression-fread-on-a-pipe-drops-some-newlines" rel="nofollow noreferrer">the bug description</a>, to workaround it: </p>
<ul>
<li><em>"use a binary pipe and do text mode CRLF =&gt; LF translation manually on the reader side"</em> or use <code>ReadFile()</code>  directly instead of <code>std::cin</code></li>
<li>or wait for Windows 10 update this summer (where the bug should be fixed)</li>
<li>or use a different C++ compiler e.g., there is <a href="https://gist.github.com/zed/dd44ade13d313ceb8ba8e384ba1ff1ac" rel="nofollow noreferrer">no issue if you use <code>g++</code> on Windows</a></li>
</ul>
<p>The bug affects only text pipes i.e., the code that uses <code>&lt;&gt;</code> should be fine (<code>stdin=input_file, stdout=output_file</code> should still work or it is some other bug).</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll start with a disclaimer:  I don't have Python 3.5 (so I can't use the <code>run</code> function), and I wasn't able to reproduce your problem on Windows (Python 3.4.4) or Linux (3.1.6).  That said...</p>
<h1>Problems with <code>subprocess.PIPE</code> and Family</h1>
<p>The <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow"><code>subprocess.run</code></a> docs say that it's just a front-end for the old <code>subprocess.Popen</code>-and-<code>communicate()</code> technique.  The <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>subprocess.Popen.communicate</code></a> docs warn that:</p>
<blockquote>
<p>The data read is buffered in memory, so do not use this method if the data size is large or unlimited.</p>
</blockquote>
<p>This sure sounds like your problem.  Unfortunately, the docs don't say how much data is "large", nor <em>what</em> will happen after "too much" data is read.  Just "don't do that, then".</p>
<p>The docs for <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow"><code>subprocess.call</code></a> go into a little more detail (emphasis mine)...</p>
<blockquote>
<p>Do not use <code>stdout=PIPE</code> or <code>stderr=PIPE</code> with this function. The child process will block <strong>if it generates enough output to a pipe to fill up the OS pipe buffer</strong> as the pipes are not being read from.</p>
</blockquote>
<p>...as do the docs for <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait" rel="nofollow"><code>subprocess.Popen.wait</code></a>:</p>
<blockquote>
<p>This will deadlock when using <code>stdout=PIPE</code> or <code>stderr=PIPE</code> and the child process <strong>generates enough output to a pipe such that it blocks waiting for the OS pipe buffer</strong> to accept more data. Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>Popen.communicate()</code></a> when using pipes to avoid that.</p>
</blockquote>
<p>That sure sounds like <code>Popen.communicate</code> is the solution to this problem, but <code>communicate</code>'s own docs say "do not use this method if the data size is large" --- exactly the situation where the <code>wait</code> docs tell you <em>to</em> use <code>communicate</code>.  (Maybe it "avoid(s) that" by silently dropping data on the floor?)</p>
<p>Frustratingly, I don't see any way to use a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.PIPE" rel="nofollow"><code>subprocess.PIPE</code></a> safely, unless you're sure you can read from it faster than your child process writes to it.</p>
<p>On that note...</p>
<h1>Alternative:  <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile" rel="nofollow"><code>tempfile.TemporaryFile</code></a></h1>
<p>You're holding <em>all</em> your data in memory... twice, in fact.  That can't be efficient, especially if it's already in a file.</p>
<p>If you're allowed to use a temporary file, you can compare the two files very easily, one line at a time.  This avoids all the <code>subprocess.PIPE</code> mess, and it's much faster, because it only uses a little bit of RAM at a time.  (The IO from your subprocess might be faster, too, depending on how your operating system handles output redirection.)</p>
<p>Again, I can't test <code>run</code>, so here's a slightly older <code>Popen</code>-and-<code>communicate</code> solution (minus <code>main</code> and the rest of your setup):</p>
<pre class="lang-python3 prettyprint-override"><code>import io
import subprocess
import tempfile

def are_text_files_equal(file0, file1):
    '''
    Both files must be opened in "update" mode ('+' character), so
    they can be rewound to their beginnings.  Both files will be read
    until just past the first differing line, or to the end of the
    files if no differences were encountered.
    '''
    file0.seek(io.SEEK_SET)
    file1.seek(io.SEEK_SET)
    for line0, line1 in zip(file0, file1):
        if line0 != line1:
            return False
    # Both files were identical to this point.  See if either file
    # has more data.
    next0 = next(file0, '')
    next1 = next(file1, '')
    if next0 or next1:
        return False
    return True

def compare_subprocess_output(exe_path, input_path):
    with tempfile.TemporaryFile(mode='w+t', encoding='utf8') as temp_file:
        with open(input_path, 'r+t') as input_file:
            p = subprocess.Popen(
              [exe_path],
              stdin=input_file,
              stdout=temp_file,  # No more PIPE.
              stderr=subprocess.PIPE,  # &lt;sigh&gt;
              universal_newlines=True,
              )
            err = p.communicate()[1]  # No need to store output.
            # Compare input and output files...  This must be inside
            # the `with` block, or the TemporaryFile will close before
            # we can use it.
            if are_text_files_equal(temp_file, input_file):
                print('OK')
            else:
                print('Failed: ' + str(err))
    return
</code></pre>
<p>Unfortunately, since I can't reproduce your problem, even with a million-line input, I can't tell if this <em>works</em>.  If nothing else, it ought to give you wrong answers faster.</p>
<h2>Variant: Regular File</h2>
<p>If you want to keep the output of your test run in <code>foo.txt</code> (from your command-line example), then you would direct your subprocess' output to a normal file instead of a <code>TemporaryFile</code>.  This is the solution recommended in <a href="https://stackoverflow.com/questions/37751832/4116239">J.F. Sebastian's answer</a>.</p>
<p>I can't tell from your question if you <em>wanted</em> <code>foo.txt</code>, or if it was just a side-effect of the two step test-then-<code>diff</code> --- your command-line example saves test output to a file, while your Python script doesn't.  Saving the output would be handy if you ever want to investigate a test failure, but it requires coming up with a unique filename for each test you run, so they don't overwrite each other's output.</p>
</div>
<span class="comment-copy">You're probably not flushing a buffer correctly.</span>
<span class="comment-copy">what do you mean ? how shall I flush it ?</span>
<span class="comment-copy">@user2346536 you can use <code>sys.stdout.flush()</code> if it's a flushing issue (not sure if it is or not). How long is too long for this file?</span>
<span class="comment-copy">10000 lines is too long enough. Testing the flush...</span>
<span class="comment-copy">Flush did not work. The chosen answer explains why, since in any case, I had it all in memory before flush. But nice try, +1 anyway :)</span>
<span class="comment-copy">Works very well thanks. But then why was the original failing ? Pipe buffer size as in Kevin Answer ?</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> docs (which I'm trusting less each day) say, "The full function signature is largely the same as that of the <code>Popen</code> constructor [...] all the arguments to this function are passed through to that interface."  So any warnings found in <code>Popen</code> (including <code>communicate</code> and <code>wait</code>) must apply to <code>run</code>, including the "too much output in a <code>PIPE</code>" warning.  That said, the <code>subprocess</code> docs outright contradict themselves in places...</span>
<span class="comment-copy">@KevinJ.Chase: wrong. The warning (about OS pipe buffer) does not apply to <code>.run()</code> because it calls <code>.communicate()</code> method already. You did see <i>"Use Popen.communicate() when using pipes to avoid that."</i> in the docs.</span>
<span class="comment-copy">"You did see "Use Popen.communicate()..." in the docs." --- Yes, and I quoted it in my answer.  That's the direct contradiction I mentioned above...  The <code>wait</code> and <code>call</code> docs tell you to use <code>communicate</code> to "avoid" the problem of writing lots of data to a <code>PIPE</code>, while the <code>communicate</code> docs specifically tell you <i>not</i> to write lots of data to a <code>PIPE</code>.  One says "use this --- it solves the problem" while the other says "<i>don't</i> use this --- it can't handle that problem".  (I will write a separate question about this when I have a chance later tonight.)</span>
<span class="comment-copy">@KevinJ.Chase: again, as I said earlier "OS pipe buffer" issue is <i>different</i> from <i>"insufficient memory"</i> issue. <code>.communicate()</code> says that you shouldn't try to read data that doesn't fit in memory: it is trivial: it returns that data as a str/bytes object that have to be in memory in Python. "OS pipe buffer" is much smaller (as a rule) than the available memory and to avoid the issue you just have to consume the pipe if you use <code>stdout=PIPE</code> that is all. <code>call()</code>, .<code>wait()</code> do not consume the pipe and therefore you should not use PIPE with them. The docs do not contradict themselves here.</span>
<span class="comment-copy">@user2346536:  I fixed a bug in my <code>are_text_files_equal</code> function --- it could be fooled if two files of unequal length were identical until the shorter one ended.  It didn't verify that both files had reached their ends before returning <code>True</code>.</span>
<span class="comment-copy">@J.F.Sebastian:  I never said it did.  While user2346536 was redirecting the subprocess' <i>input</i> from a real file; it's output was still going to <code>subprocess.PIPE</code>, which the <code>communicate</code> / <code>run</code> docs specifically say not to do for "large or unlimited" outputs.  I presented the <code>TemporaryFile</code> as a way to avoid the problems with <code>PIPE</code>.  As a bonus, <code>TemporaryFile</code> avoids loading lots of data into memory (twice!) when that data is never used more than a line at a time.</span>
<span class="comment-copy">@J.F.Sebastian:  Maybe you're talking about my quoting the <code>Popen.wait</code> and <code>call</code> docs?  True, user23456536 never used those functions.  I quoted them because they're the only other place the <code>subprocess</code> module docs that address the idea of "too much" data stored in a <code>PIPE</code>.  They're the only place at all where the consequences are described.  They state that the problem is a permanently blocked child process, which <code>communicate</code> avoids by substituting some other, unspecified problem.  Its the closest these docs get to describing what the problem really <i>is</i>, let alone how to avoid it.</span>
<span class="comment-copy">@KevinJ.Chase: 1- the warning in the docs that you highlighted with bold formatting: <i>"if it generates enough output to a pipe to fill up the OS pipe buffer"</i> has nothing to do with <code>subprocess.run()</code>—it just doesn't apply—if you don't understand why then ask a separate SO question. 2- Also, the bug in OPs code is not due to the insufficient memory (that does apply in the general case to <code>subprocess.run()</code> but it doesn't matter in this case: the input/output does fit in memory). My guess the issue is the universal newlines mode.</span>
<span class="comment-copy">@user2346536:  If J.F. Sebastian's answer both reproduced your problem  <i>and</i> solved it, you should accept his answer instead.  (I still can't reproduce your problem, even using his method, on Windows or Linux.  I still have to use <code>subprocess.call</code> or <code>Popen</code> instead of <code>run</code> because I don't have Python 3.5, so maybe that's the difference.)</span>
