<div class="post-text" itemprop="text">
<p>Is there a variable explorer in Jupyter (IPython) like in Spyder? It is very uncomfortable having to print the list of variables all the time each time I run through the test code.</p>
<p>Has this feature been implemented yet? If so, how to enable it?</p>
</div>
<div class="post-text" itemprop="text">
<h1>UPDATE</h1>
<p>Scroll down to the section labeled update for a much less convoluted method.</p>
<h1>OLD ANSWER</h1>
<p>Here is a notebook on how to make your own <a href="https://github.com/ipython/ipywidgets/blob/master/docs/source/examples/Variable%20Inspector.ipynb" rel="noreferrer">Variable Inspector</a>. I think it was written back when jupyter notebook was called ipython notebook but it works on the latest version.</p>
<p>I'll post the code below just in case the link breaks.</p>
<pre><code>import ipywidgets as widgets # Loads the Widget framework.
from IPython.core.magics.namespace import NamespaceMagics # Used to query namespace.

# For this example, hide these names, just to avoid polluting the namespace further
get_ipython().user_ns_hidden['widgets'] = widgets
get_ipython().user_ns_hidden['NamespaceMagics'] = NamespaceMagics

class VariableInspectorWindow(object):
    instance = None

def __init__(self, ipython):
    """Public constructor."""
    if VariableInspectorWindow.instance is not None:
        raise Exception("""Only one instance of the Variable Inspector can exist at a 
            time.  Call close() on the active instance before creating a new instance.
            If you have lost the handle to the active instance, you can re-obtain it
            via `VariableInspectorWindow.instance`.""")

    VariableInspectorWindow.instance = self
    self.closed = False
    self.namespace = NamespaceMagics()
    self.namespace.shell = ipython.kernel.shell

    self._box = widgets.Box()
    self._box._dom_classes = ['inspector']
    self._box.background_color = '#fff'
    self._box.border_color = '#ccc'
    self._box.border_width = 1
    self._box.border_radius = 5

    self._modal_body = widgets.VBox()
    self._modal_body.overflow_y = 'scroll'

    self._modal_body_label = widgets.HTML(value = 'Not hooked')
    self._modal_body.children = [self._modal_body_label]

    self._box.children = [
        self._modal_body, 
    ]

    self._ipython = ipython
    self._ipython.events.register('post_run_cell', self._fill)

def close(self):
    """Close and remove hooks."""
    if not self.closed:
        self._ipython.events.unregister('post_run_cell', self._fill)
        self._box.close()
        self.closed = True
        VariableInspectorWindow.instance = None

def _fill(self):
    """Fill self with variable information."""
    values = self.namespace.who_ls()
    self._modal_body_label.value = '&lt;table class="table table-bordered table-striped"&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;' + \
        '&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;'.join(['{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}'.format(v, type(eval(v)).__name__, str(eval(v))) for v in values]) + \
        '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'

def _ipython_display_(self):
    """Called when display() or pyout is used to display the Variable 
    Inspector."""
    self._box._ipython_display_()
</code></pre>
<p>Run inline with the following:</p>
<pre><code>inspector = VariableInspectorWindow(get_ipython())
inspector
</code></pre>
<p>Make it a javascript pop out;</p>
<pre><code>%%javascript
$('div.inspector')
    .detach()
    .prependTo($('body'))
    .css({
        'z-index': 999, 
        position: 'fixed',
        'box-shadow': '5px 5px 12px -3px black',
        opacity: 0.9
    })
    .draggable();
</code></pre>
<h1>UPDATE</h1>
<p>Date: May 17 2017</p>
<p><a href="https://github.com/jfbercher" rel="noreferrer">@jfbercher</a> created a nbextension variable inspector. The source code can be seen here <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions" rel="noreferrer">jupyter_contrib_nbextensions</a>. For more information see the <a href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/varInspector/README.html?highlight=varinspector" rel="noreferrer">docs</a>.</p>
<h2>Install</h2>
<h3>User</h3>
<pre><code>pip install jupyter_contrib_nbextensions
jupyter contrib nbextension install --user
</code></pre>
<h3>Virtual environment</h3>
<pre><code>pip install jupyter_contrib_nbextensions
jupyter contrib nbextension install --sys-prefix
</code></pre>
<h2>Enable</h2>
<pre><code>jupyter nbextension enable varInspector/main
</code></pre>
<p>Here's a screen-shot; </p>
<p><a href="https://i.stack.imgur.com/Yi3Ds.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Yi3Ds.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>This might help you, though it's not exactly what Spyder offers and is much simpler:</p>
<p>To get a list of all currently defined variables, run <strong>who</strong> :</p>
<pre><code>In [1]: foo = 'bar'

In [2]: who
foo
</code></pre>
<p>For more detail, run <strong>whos</strong>:</p>
<pre><code>In [3]: whos
Variable   Type    Data/Info
----------------------------
foo        str     bar
</code></pre>
<p>For a complete list of built-in functions see <a href="https://ipython.org/ipython-doc/3/interactive/magics.html" rel="noreferrer">Magic Commands</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you use Jupyter Notebooks within <a href="https://jupyterlab.readthedocs.io/en/stable/" rel="noreferrer">Jupyter Lab</a> there has been a lot of discussion about implementing a variable explorer/inspector. You can follow the issue <a href="https://github.com/jupyterlab/jupyterlab/issues/443" rel="noreferrer">here</a></p>
<p>As of right now there is one Jupyter Lab extension in the works that implements a Spyder-like variable explorer. It is based on the notebook extension that James mentioned in his answer. You can find the lab extension (with installation instructions) here: <a href="https://github.com/lckr/jupyterlab-variableInspector" rel="noreferrer">https://github.com/lckr/jupyterlab-variableInspector</a></p>
<p><a href="https://i.stack.imgur.com/BJ8ix.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/BJ8ix.png"/></a></p>
</div>
<span class="comment-copy">Great stuff, would be nice if you posted a snapshot here of how it looks. I believe tht would help spread the adoption of you nice extension!</span>
<span class="comment-copy">@Oleg right on, I just added it. Also I just want to be clear I didn't write the extension someone else did. I'll try figure out who and post an attribution later.</span>
<span class="comment-copy">Following instructions after "Update May 17 2017" gives you an extra icon that looks like a gun sight (-:-) click on this and the Variable Explorer pops up.</span>
<span class="comment-copy">@Robino there is a little a button in the toolbar off to the right it looks like circle sort of click that if it's there.</span>
<span class="comment-copy">@Robino This extension <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions/blob/master/src/jupyter_contrib_nbextensions/nbextensions/varInspector/var_list.py#L25" rel="nofollow noreferrer">calls</a> <code>str(eval(obj_name))</code>, so if you are using custom class you can add property monitoring to <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">__str__</a> dunder method.  If it's not, you can wrap variable with second "Monitoring" class. If you want specifics, create a new question, because there is not enough characters left here for the exact code.</span>
<span class="comment-copy">exactly what I was lookin for</span>
