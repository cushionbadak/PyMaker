<div class="post-text" itemprop="text">
<p>I have been asked to define a function that sorts a list based on file extension..</p>
<p>I understand sorting, but I don't understand how to start the sort from the "." character.</p>
<p>I want the following result:</p>
<pre><code>&gt;&gt;&gt; extsort(['a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'x.c'])
['a.c', 'x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass key function as a parameter for <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a>:</p>
<pre><code>&gt;&gt;&gt; l = ['a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'x.c']
&gt;&gt;&gt; sorted(l, key=lambda x: splitext('.')[1])
['a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'x.c']
</code></pre>
<p>If you need the files to with same extension to be sorted by their name you can change key function to reverse the split result:</p>
<pre><code>&gt;&gt;&gt; l = ['x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'a.c']
&gt;&gt;&gt; sorted(l, key=lambda x: splitext(x)[::-1])
['a.c', 'x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a solution that works even if some of the files don't have extensions (and is somewhat more self-documenting), use <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow"><code>os.path.splitext</code></a> as part of <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a>'s <code>key</code> function. When there is no file extension, it will treat the extension as the empty string, <code>''</code>, sorting it before all other extensions:</p>
<pre><code>&gt;&gt;&gt; l = ['b.py', 'a.c', 'a.py', 'bar.txt', 'foo.txt', 'x.c', 'foo']
&gt;&gt;&gt; sorted(l, key=lambda x: os.path.splitext(x)[1])
['foo', 'a.c', 'x.c', 'b.py', 'a.py', 'bar.txt', 'foo.txt']
</code></pre>
<p>Note that <code>b.py</code> sorted before <code>a.py</code> here, because it appeared first in the input, and the sort only keyed on the file extension. To make it sort by extension, then full name, key on a tuple of the extension followed by the non-extension name (easily done by slicing <code>os.path.splitext</code>'s return value using <code>[::-1]</code> which reverses the order of the elements returned), so <code>a.py</code> precedes <code>b.py</code> regardless of where they appeared in the input:</p>
<pre><code>&gt;&gt;&gt; sorted(l, key=lambda x: os.path.splitext(x)[::-1])
['foo', 'a.c', 'x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']
</code></pre>
</div>
<span class="comment-copy">read up on the <code>key</code> parameter</span>
<span class="comment-copy">look at sort and supplying a lambda function that parses and reverses the file name and extension so starting with file.ext return ext.file in the lambda.  this works with the item from John Coleman.</span>
<span class="comment-copy">for <code>l = ['x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'a.c']</code>, i think your solution is not right. the output is <code>['x.c', 'a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']</code>, i think thr author want <code>['a.c', 'x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']</code>.</span>
<span class="comment-copy">ok I see but one question..What is the [1] specifying at the end of the lambda function?</span>
<span class="comment-copy">@BlackMamba Well, possibly.  The OP did not specify if the values <i>within</i> a given extension must be sorted.</span>
<span class="comment-copy">@BlackMamba How so? I got result <code>['x.c', 'a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']</code> where the files are sorted by extension. The question didn't specify on how the files with same extension should be sorted so they are treated the same.</span>
<span class="comment-copy">@niemmi If you want to satisfy all the haters, you could use <code>lambda x: (x.rsplit('.', 1)[1], x)</code></span>
