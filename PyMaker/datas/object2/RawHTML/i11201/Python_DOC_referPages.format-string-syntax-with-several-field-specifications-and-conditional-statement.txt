<div class="post-text" itemprop="text">
<p>I have a list <code>mylist = [1, 2, 3]</code> and a number <code>n</code> which I want to print in a specific way:</p>
<blockquote>
<p>{n} {book or books} read ok: {mylist elements one by one separated by commas)</p>
</blockquote>
<p>for example:</p>
<blockquote>
<p>1 book read ok: 1 , 2, 3</p>
<p>2 books read ok: 1 , 2, 3</p>
</blockquote>
<p>The decision of printing book or books depends on <code>n</code>, i.e. if n is 1 then print book, else print books. The code for achieving that is:</p>
<pre><code>print("{:s}", "book" if n == 1 else "books")
</code></pre>
<p>For printing the elements of the list the code is:</p>
<pre><code>print(*mylist, sep=' , ')
</code></pre>
<p>But, I am having problems trying to combine all of this into the desired output with including <code>.format</code> for displaying <code>n</code> as described above.</p>
<p>Here is what I have tried so far:   </p>
<pre><code>print("{0} {:s} read ok: {1}".format(n, *mylist, sep=' , '), "book" if n == 1 else "books")
</code></pre>
<p>which gives <code>ValueError: cannot switch from manual field specification to automatic field numbering</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Dissected call to <code>print()</code>:</p>
<pre><code>print(
    "{0} {:s} read ok: {1}".format(
        n,  # 1st argument to format
        *mylist,  # mylist unpacked as positional arguments to format
        sep=' , '  # a keyword argument to format
    ),  # Formatted string, the 1st argument to print
    "book" if n == 1 else "books"  # 2nd argument to print
)
</code></pre>
<p>The error is a result of mixing manual and automatic field specifications, as it very clearly states. Don't mix manual (<code>"{0}"</code> etc). with automatic (<code>"{}"</code>). In your string you have 0, automatic and 1. There's no sane way to decide which positional argument the automatic should be, and so the error is raised.</p>
<p>From <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>If the numerical arg_names in a format string are 0, 1, 2, ... in sequence, they can <strong>all be omitted (not just some)</strong></p>
</blockquote>
<p>A working print in this case could be:</p>
<pre><code>print("{} {} read ok: {}".format(
    n,
    "book" if n == 1 else "books",
    ', '.join(str(i) for i in mylist)
))
</code></pre>
<p>The format string is equal to:</p>
<pre><code>"{0} {1} read ok: {2}"
</code></pre>
</div>
<span class="comment-copy">And what don't you understand about that message? You have three placeholders, <code>{0}</code>, <code>{:s}</code> and <code>{1}</code>, and Python can't figure out what you expected to go where!</span>
<span class="comment-copy">@jonrsharpe Well, however on-point and informative the error message was, I did not know how to overcome it and achieve my goal. Hence, my question.</span>
<span class="comment-copy">Really appreciate the clear explanation and link.</span>
<span class="comment-copy">Quick follow-up: could you briefly explain why the <code>{:s}</code> is not needed? Confused how it did work previously in isolation with that <code>:s</code></span>
<span class="comment-copy">Depends on your isolated test. The part after the colon is the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">format specification</a>, e.g. in <code>"{:s}"</code> it is the <code>s</code>. <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer"><code>s</code> is the default presentation type for string types and may be omitted</a>. Hence it equals <code>"{}"</code> for string types. For integers the default presentation type is <code>d</code>, for example.</span>
