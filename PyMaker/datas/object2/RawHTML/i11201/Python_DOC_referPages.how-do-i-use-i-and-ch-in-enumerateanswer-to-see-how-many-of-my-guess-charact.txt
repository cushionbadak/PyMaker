<div class="post-text" itemprop="text">
<p>Specifically: We are to print out how many of the guess character are exactly right (correct character in the
correct position) and
and how many of the guess characters are correct values but are not in the correct
position.</p>
<p>Here's my code:</p>
<pre><code> key = input("Input your secret key (RYBGWO):")

print("You are playing Mastermind whose purpose is to guess the secret key.")
print("Six colors are to be inputed with no repeats (RYBGW0).")

Answer = input("Please enter your 4-letter guess (RYBGWO):")

Answer_count = 0

my_string = "RYBGWO"
history = ''

while Answer.upper() != key:
    ANSWER = Answer.upper()
    if  Answer.count("R") &gt; 1:
        Answer =  input("You can not have repeating characters, try again:")
        continue
    elif Answer.count("Y") &gt; 1:
         Answer =input("You can not have any repeating characters, try again:")
         continue
    elif Answer.count("B") &gt; 1:
        Answer = input("You can not have any repeating characters, try again:")
        continue
    elif Answer.count("G") &gt; 1:
        Answer = input("You can not have any repeating characters, try again:")
        continue
    elif Answer.count("W") &gt; 1:
        Answer = input("You can not have any repeating characters, try again:")
        continue
    elif Answer.count("O") &gt; 1:
        Answer = input("You can not have any repeating characters, try again:")
        continue
    elif not(Answer.isalpha()): 
        Answer = input("Error, guess must be letters only, try again: ")
        continue
    elif len(Answer) !=4:
        Answer=input("Your guess must contain 4 letters (rybgwo).Try again:")
        continue
    if 'R' and 'Y' and 'B' and 'G' and 'W' and 'O' not in Answer:
        Answer = input("ERROR: Only letters RYBGWO allowed. Try again:")
        continue


for i, ch in enumerate(Answer):
    correct_count = 0
    correct_position = 0
    wrong_position = 0
    i = 0
    if key[i] == Answer[i] and key[ch] == Answer[ch]:
        correct_count += 1
        correct_position +=1
        i = [len(Answer)-1]
        print("Correct color and position count:", correct_count)
    elif key[ch] == Answer[ch] and key[i] != Answer[i]:
        correct_count += 1
        wrong_position += 1
        i = [len(Answer)-1]
        print("Correct color, wrong position:", )


else:
        print("Congratulations! You won!")
        Answer_count = Answer_count + 1
        print("(",Answer_count,"of 8 guesses)")
        history += "\n" + Answer
        print("History:", history)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The line </p>
<pre><code>if key[i] == Answer[i] and key[ch] == Answer[ch]:
</code></pre>
<p>does not make all that much sense. Using <code>enumerate</code>, <code>i</code> is the position, that's fine, but <code>ch</code> is the character at that position. <code>key[ch]</code> does not make sense. Did you mean <code>key.count(ch)</code>? But even then there is no easy way to get the "correct value at incorrect position" part easily with <code>enumerate</code>. Consider the case of <code>"abcd"</code> and <code>"baca"</code>: Here, <code>a</code> has different count in both strings, and yet that should be <code>+1</code> for <code>correct_count</code></p>
<hr/>
<p>Instead, let me suggest this: For "correct value at correct position", just <code>zip</code> the two strings and compare the characters. The "correct value at incorrect position" case is a bit more difficult, but can be done by creating two <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a> objects and <code>&amp;</code>-ing those together.</p>
<pre><code>&gt;&gt;&gt; x = "abcd"    
&gt;&gt;&gt; y = "baca"
&gt;&gt;&gt; Counter(x) &amp; Counter(y)
Counter({'a': 1, 'c': 1, 'b': 1})
&gt;&gt;&gt; [a == b for a, b in zip(x, y)]
[False, False, True, False]
</code></pre>
<p>When calculating the totals, remember that the <code>correct_count</code> number includes the <code>correct_position</code> number, so you need to subtract those:</p>
<pre><code>&gt;&gt;&gt; correct_position = sum(a == b for a, b in zip(x, y))
&gt;&gt;&gt; correct_count = sum((Counter(x) &amp; Counter(y)).values()) - correct_position
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Down votes are coming because your criteria is not well defined, but I think that you are asking for a basic master-mind type problem. It is easy enough if you define your problem such that the hidden values do not repeat. If your hidden value, as I define it below can have repeating values than the problem gets more complex. It can be made to work - it just takes a bit more thought. </p>
<p>Anyway, here is a basic implementation that I've tested on my box.</p>
<pre><code>hidden = ["red", "blu", "grn", "ylw", "gold", "ora"]

def check_answer(answer):

    guess_num = 0
    correct_position = 0
    correct_location = 0

    for guess in answer:
        text = "value not found"

        if (len(hidden) &lt;= guess_num):
            break

        if guess == hidden[guess_num]:
            correct_position += 1          
            text = "correct value and position"       

        elif guess in hidden:
            correct_location += 1
            text = "correct value, wrong position"

        guess_num += 1

        print("guess {} = {} ; {}".format(guess_num, guess, text))

ans1=["red", "grn", "blu", "ylw"]
ans2=["red"]
check_answer(ans1)
</code></pre>
</div>
<span class="comment-copy">Could you clarify what exactly your question is, please?</span>
<span class="comment-copy">And what is the error?</span>
<span class="comment-copy">Oops. My question is how to do I use "i" and "ch" to find correct values from a guess into the right spot.</span>
<span class="comment-copy">you should edit your question</span>
<span class="comment-copy">How do I use "i, ch in enumerate(Answer)" to solve this?</span>
<span class="comment-copy">@python_person Why do you want to use <code>enumerate</code>? Sure, you could create a number of nested loops, but why not use the tools that Python provides for you?</span>
