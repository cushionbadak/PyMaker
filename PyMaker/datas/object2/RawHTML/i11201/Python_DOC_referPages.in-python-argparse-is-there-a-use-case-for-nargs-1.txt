<div class="post-text" itemprop="text">
<p>It seems as though it would always make more sense to use the default action of <code>store</code> without specifying <code>nargs</code> so the output is always as expected, instead of sometimes being a <code>list</code> and sometimes not. I'm just curious if I missed something..</p>
<p>example</p>
<pre><code>&gt;&gt;&gt; import argparse                                                                                                                     
&gt;&gt;&gt; parser = argparse.ArgumentParser()                                                                                                  
&gt;&gt;&gt; parser.add_argument('--foo')                                                                                                        
_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)                                                                                                                                      
&gt;&gt;&gt; parser.add_argument('--bar', nargs=1)                                                                                               
_StoreAction(option_strings=['--bar'], dest='bar', nargs=1, const=None, default=None, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args('--foo 1 --bar 1'.split())                                                                                        
Namespace(bar=['1'], foo='1')                                                                                                           
&gt;&gt;&gt; parser.parse_args('')                                                                                                               
Namespace(bar=None, foo=None)                                                                                                           
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both the default <code>nargs=None</code> and <code>nargs=1</code> expect one value, but <code>nargs=1</code> will put it in a list, e.g.</p>
<pre><code>Namespace(foo='test')
Namespace(foo=['test'])
</code></pre>
<p><code>nargs=3</code> will require 3 values, and put them in a list as well.  <code>*</code> and <code>+</code> also put the values in a list.</p>
<p>From the docs, under <code>nargs=N</code>:
<a href="https://docs.python.org/3/library/argparse.html#nargs" rel="noreferrer">https://docs.python.org/3/library/argparse.html#nargs</a></p>
<blockquote>
<p>Note that nargs=1 produces a list of one item. This is different from the default, in which the item is produced by itself.</p>
</blockquote>
<p><code>nargs=1</code> is just an instance of <code>nargs=n</code>.  It's not a special case.</p>
<p>For you, as an <code>argparse</code> user, you probably don't need to use <code>1</code>.  In fact to me it's a sign of a novice - unless there's a clear need for the list in the output.  I can imagine, for example, building a parser that programmatically sets <code>n</code> to some number, may be 3, maybe 5, maybe 1, and expects the result to always be a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>The case for nargs=1 for me is that I can use it with the "append" action, then if I want to use the option once, I get a list of one item, if I use it twice, I get a list of two items, etc.</p>
</div>
<span class="comment-copy">Maybe if you want to process generically all your args by turning them all into lists?</span>
<span class="comment-copy">The only time it isn't a list is when it's <code>None</code>.  If you want your arguments to be lists, it makes sense to use <code>nargs=1</code>.</span>
<span class="comment-copy">hmmm. but if you contrast it with <code>nargs='*'</code> which always returns a list <code>nargs=1</code> just seems extra work to manage.</span>
<span class="comment-copy">@tr3buchet <code>nargs='*'</code> accepts more than one value, so if you are expecting only one value for this parameter, you will have to sanity check yourself, whereas <code>nargs=1</code> ensures that you get only one value but still get it stored in a list.</span>
<span class="comment-copy">I totes see the difference between <code>'*'</code> and <code>1</code>, I just don't understand why you would want <code>nargs=1</code> to return a list of one, or None.</span>
<span class="comment-copy">I've read through the docs as well. I understand how it works and the differences between <code>*</code> <code>+</code> <code>?</code> <code>N</code>. The caveat that you've highlighted in tan there is the use case I am questioning. I guess I've grown accustomed to the general idea that a function should whenever possible return the same type (<code>list</code>, <code>dict</code>, <code>str</code>, etc). As an example, a function that always returns a <code>list</code> is easier to consume than one that returns a populated <code>list</code> or <code>None</code> because <code>None</code> breaks anything expecting an iterable which requires the user to have to check the output.</span>
<span class="comment-copy">"I can imagine, for example, building a parser that programmatically sets n to some number, may be 3, maybe 5, maybe 1, and expects the result to always be a list." There we go! that's what I was looking for. I have yet to need to generate a config parser dynamically and that makes perfect sense.</span>
<span class="comment-copy">Returning <code>None</code> is handy, because nothing that the user can type will produce it.  Therefore <code>if args.foo is None:</code> is a fool proof way of testing whether the user used <code>--foo</code> flag or not.  In any case choose what makes life easiest for you.</span>
