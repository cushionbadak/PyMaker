<div class="post-text" itemprop="text">
<p>After many researches on the web, on many different topics, I wasn't able to find the solution answering my problem. </p>
<p>I am developing a tool (with graphic interface) allowing to process python scripts from different projects. 
To not have any problem of dependences, I ask the user to target the project directory  as well as the script to process. </p>
<p>Thus to develop this tool I have in my IDE a project "benchmark_tool" which is the project integrating the GUI, and the project "test_project" which groups various testing scripts. Obviously, the final goal is the tool to be compiled and thus that the project "benchmark_tool" disappears from IDE. </p>
<p>Here is the IDE architecture:</p>
<pre><code>benchmark_tool (python project)
    __init__.py
    main.py

test_project (python project)
    __init__.py
    module1
        __init__.py
        test_script.py
    module2
        __init__.py
        imports.py
</code></pre>
<p>How it works: The main.py shall call test_script.py. 
test_script.py calls imports.py at the first beggining of the script. </p>
<p><strong>UPDATE</strong></p>
<p>I tried some modifications in my main code:</p>
<pre><code>import sys
import subprocess

subprocess.check_call([sys.executable, '-m', 'test_project.module1.test_script'], cwd='D:/project/python')
</code></pre>
<p>I got this error</p>
<pre><code>Traceback(most recent call last):
    File "C:/Python31/lib/runpy.py", line 110, in run module as main
        mod_name, loader, code, fname = _get_module_detail(mod_name)
    File "C:/Python31/lib/runpy.py", line 91, in get module details
        code = loader.get_code(mod_name)
    File "C:/Python31/lib/pkgutil.py", line 272, in get code
        self.code = compile(source, self.filename, 'exec')
    File "D:/project/python/test_project/module1/test_script.py", line 474


SyntaxError: invalid syntax
Traceback (most recent call last):
    File "D:/other_project/benchmark_tool/main.py", line 187, in read
        subprocess.check_call([sys.executable, '-m', 'module1.test_script.py'], cwd='D:/project/python/test_project')
    File "C:/Python31/lib/subprocess.py", line 446, in check call
        raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '['C:/Python31/python.exe', '-m', 'module1.test_script.py']' returned non-zero exit status 1
</code></pre>
<p><strong>Note</strong>
It works with <code>subprocess.Popen(['python','D:/project/python/test_project/module1/test_script.py])</code></p>
<p>What's the main difference between both methods ? I'll also have to pass arguments to test_scripts.py, which one is the best to use to communicate with a python script (input and output datas are exchanged) ? </p>
<p>Thanks by advance</p>
</div>
<div class="post-text" itemprop="text">
<p>There are 3 problems I see that you have to fix:</p>
<ol>
<li>In order to import from module2, you need to turn that directory into a package by placing an empty <code>*__init__.py</code> file in it</li>
<li>When executing <code>test_script.py</code>, you need the full path to the file, not just file name</li>
<li>Fixing up sys.path only work for your script. If you want to propagate that to <code>test_script.py</code>, set the <code>PYTHONPATH</code> environment variable</li>
</ol>
<p>Therefore, my solution is:</p>
<pre><code>import os
import sys
import subprocess

# Here is one way to determine test_project
# You might want to do it differently
script_dir = os.path.abspath(os.path.dirname(__file__))
test_project = os.path.normpath(os.path.join(script_dir, '..', 'test_project'))

python_path = '{}:{}'.format(os.environ.get('PYTHONPATH', ''), test_project)
python_path = python_path.lstrip(':')  # In case PYTHONPATH was not set

# Need to determine the full path to the script
script = os.path.join(test_project, 'module1', 'test_script.py')
proc = subprocess.Popen(['python', script], env=dict(PYTHONPATH=python_path))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To run an "external project script", install it e.g.: <code>pip install project</code> (run it in a virtualenv if you'd like) and then run the script as you would with any other executable:</p>
<pre><code>#!/usr/bin/env python
import subprocess

subprocess.check_call(['executable', 'arg 1', '2'])
</code></pre>
<p>If you don't want to install the project and it has no dependencies (or you assume they are already installed) then to run a script from a given path as a subprocess (assuming there is <code>module1/__init__.py</code> file):</p>
<pre><code>#!/usr/bin/env python
import subprocess
import sys

subprocess.check_call([sys.executable, '-m', 'module1.test_script'], 
                      cwd='/abs/path/to/test_project')
</code></pre>
<p>Using <code>-m</code> to run the script, avoids <a href="https://www.python.org/dev/peps/pep-0395/#traps-for-the-unwary" rel="nofollow">many import issues</a>.</p>
<p>The above assumes that <code>test_project</code> is not a Python package (no <code>test_project/__init__.py</code>). If <code>test_project</code> is itself a Python package then include it in the module name and start from the parent directory instead:</p>
<pre><code>subprocess.check_call([sys.executable, '-m', 'test_project.module1.test_script'], 
                      cwd='/abs/path/to')
</code></pre>
<p>You could pass the path to <code>test_project</code> directory as a command-line parameter (<code>sys.argv</code>) or read it from a config file (<code>configparser</code>,<code>json</code>). Avoid calculating it relative to the installation path of your parent script (if you have to then use <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.iter_modules" rel="nofollow"><code>pkgutil</code></a>, setuptools' <a href="https://setuptools.readthedocs.io/en/latest/pkg_resources.html#overview" rel="nofollow"><code>pkg_resources</code></a>, to get the data). To find a place to store user data, you could use <a href="https://pypi.python.org/pypi/appdirs" rel="nofollow"><code>appdirs</code> Python package</a>.</p>
</div>
<span class="comment-copy">on your update: Do you understand that <code>module1.test_script</code> and <code>module1/test_script.py</code> are different strings? Do not modify <code>PYTHONPATH</code>. Where do you see that I modify the pythonpath in my answer? please, read my answer carefully—do not add any other code. For clarity, update your question and specify whether module1 and module2 are top-level Python modules or whether they are submodules of <code>test_project</code> (i.e., whether <code>test_project</code> is a Python module or just a directory). Depending on the answer, use the appropriate code example from my answer which covers both cases.</span>
<span class="comment-copy">Sorry I did put <code>module1.test_script</code>but I didn't write it well (I can't copy/paste my code I have to write it). test_project is a python module not just a directory, and module1 and module2 are submodules of test_script. I removed the <code>PYTHONPATH</code>command but got the same error.</span>
<span class="comment-copy">Why do you have to write it? If you don't know how to copy-paste from the command line then learn (it is useful)—ask a separate question about your specific environment. I can't help you unless your provide the exact command. Again, <code>'module1.test_script.py'</code> is different from <code>'module1.test_script'</code>. If <code>test_project</code> is a Python module then use the second variant from my answer i.e.,  <code>subprocess.check_call([sys.executable, '-m', 'test_project.module1.test_script'], cwd=r'D:\project\python')</code>. Unrelated: you could use raw-string literals for Windows paths: with <code>r''</code> prefix.</span>
<span class="comment-copy">Actually my code is on a computer with a protected network so I can't get out anything from it. Ok I tried with all possible cases you've told me, and I got the same error message each time. See my updated post. Btw, it seems that <code>sys.path.append()</code>worked, I may have had an environment issue. J.F.Sebastian</span>
<span class="comment-copy"><code>SyntaxError</code> is not <code>ImportError</code>—congratulation, you've fixed the import issue. It doesn't mean there are no other problems in your code. Find computer where you can copy-paste. Create <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Why do you try to run <code>module1.test_script</code> instead of <code>test_project.module1.test_script</code>? If there is <code>test_project/__init__.py</code> then you should use <code>test_project.module1.test_script</code> name.</span>
<span class="comment-copy">1. I didn't mention it but I actually already have a init.py in my module2. 2. I also tried to put the full path but it didn't work anyway. 3.if i'm right, setting the PYTHONPATH environment variable is the same as <code>sys.path.append(test_project)</code> ? I tried your solution but it didn't work, I still have the same error @HaiVu</span>
<span class="comment-copy">For #2, does <b>didn't work</b> mean script not found, or not being able to import? For #3, <code>sys.path.append(...)</code> is not the same as setting up PYTHONPATH, I have tested and confirmed that in my script.</span>
<span class="comment-copy">There are at least two issues: 1- how does it install <code>test_project</code> dependencies? 2- it runs a script from <i>inside</i> a Python package directly (that you should not do). if a person can't configure PYTHONPATH by themselves then it would be hard to resolve <a href="https://www.python.org/dev/peps/pep-0395/#traps-for-the-unwary" rel="nofollow noreferrer">the import issues</a> that arise too. Unrelated: you could use <code>os.pathsep</code> and <a href="http://stackoverflow.com/a/22881871/4279"><code>get_script_dir()</code></a> (though fishing for files relative to your installation directory doesn't look nice—perhaps, <code>appdirs</code> may provide more appropriate paths).</span>
<span class="comment-copy">@HaiVu it means it was not able to import. @J.F.Sebastian the idea is that once you enter the project relative path, <code>PYTHONPATH</code>is automatically updated with that path. The tool shall be able to run any script in this path.   For instance, when you run a python script from the shell, there is no dependencies problem, all imports are managed to make this script work. Let's see my tool as a shell for python scripts</span>
<span class="comment-copy">I don't understand why do I have to install the project ?</span>
<span class="comment-copy">@v_lfr how do you expect  project's dependencies to appear on your computer?</span>
<span class="comment-copy">Actually I have 2 projects. One is going to be a compiled tool, which ask users to put other python project link with test scripts to execute. So i'm gonna have 1 compiled project with many python project which will already be on users computers. Corresponding project dependencies will be automatically add to <code>PYTHONPATH</code>when the user will put the project link. Hope I'm understandable.... @J.F.Sebastian</span>
<span class="comment-copy">@v_lfr: 1- don't put the info necessary to answer your question into the comments. Update your question instead. 2- I don't understand what "compiled project" means. What does it mean <i>"with many python project which will already be on users computers"</i>? Are you running the scripts remotely via ssh? What does it mean "project link"? If you use your own terminology; you have to provide examples or define the terms.  If you have to ask how to implement a <code>sys.path.append()</code>-based solution; you won't be able to debug the corresponding issues that arise. Use standard tools instead.</span>
<span class="comment-copy">A compiled project is a python project compiled into a .exe programm. It means that people will have several projects in their own python IDE. Let's say I have 3 (p1, p2, p3) projects on my python IDE, and I want to run p1 main script. I have to launch the tool, and put the relative path of either p1 project and main script. Then the tool shall run the main script without any import issues regarding to p1 project. that's why I tried to fix that with <code>PYTHONPATH</code>and <code>sys.path.append()</code>@J.F.Sebastian</span>
