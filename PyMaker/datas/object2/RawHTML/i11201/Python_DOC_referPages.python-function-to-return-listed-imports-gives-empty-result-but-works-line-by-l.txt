<div class="post-text" itemprop="text">
<p>Adapting code from</p>
<p><a href="https://stackoverflow.com/questions/4858100/how-to-list-imported-modules">How to list imported modules?</a></p>
<p>to look like</p>
<pre><code>def imports():
    import types

    Module = None
    Modules = list()

    for name, val in globals().items():
        if isinstance(val, types.ModuleType):
            Module = val.__name__
            Modules.append(Module)

    return Modules
</code></pre>
<p>and saved as imports.py. Intended to be activated in the form</p>
<pre><code>Modules = imports.imports()
</code></pre>
<p>Instead, returns an empty list <code>Modules</code>.</p>
<p>Have looked here</p>
<p><a href="https://docs.python.org/3.4/tutorial/classes.html#generators" rel="nofollow noreferrer">Python.org classes + generators</a></p>
<p>here</p>
<p><a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">Python.org Data structures: list comprehensions</a></p>
<p>and here</p>
<p><a href="https://stackoverflow.com/questions/9317025/python-return-list-from-function">Python return list from function</a></p>
<p>and not getting it.</p>
<p>When I run the function body line by line I get the desired result (a list of the imported modules stored in <code>Modules</code>). When it's run as a defined function it gives an empty list. Why is my returned list variable empty? I've also tried <code>yield</code> with the same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow"><code>globals()</code> function</a> returns the global namespace for the <em>module it is used in</em>. You are seeing the modules that are imported in your <code>imports</code> module, and there are 0 such imports. You can't use this function if you wanted to access the globals of the code that called your function.</p>
<p>You'd have to use the globals of the <em>calling frame</em> instead; in CPython you can do this with the <a href="https://docs.python.org/3/library/sys.html#sys._getframe" rel="nofollow"><code>sys._getframe()</code> function</a>, which returns a frame object; the <code>f_globals</code> attribute on that frame is the global namespace of the caller of your function:</p>
<pre><code>caller_frame = sys._getframe(1)
for name, val in caller_frame.f_globals.items():
</code></pre>
<p>Alternatively, have the caller pass in a namespace; that way you can list the modules used in <em>any</em> module:</p>
<pre><code>def imports(namespace=None):
    import types, sys

    if namespace is None:
        # default: caller globals
        namespace = sys._getframe(1).f_globals

    modules = []

    for name, val in namespace.items():
        if isinstance(val, types.ModuleType):
            module_name = val.__name__
            modules.append(module_name)

    return modules
</code></pre>
<p>The above version still uses <code>sys._getframe(1)</code> if you call the function without arguments. But you could use it on any dictionary now:</p>
<pre><code>import string
print(imports(vars(string)))
</code></pre>
<p>This uses the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars()</code> function</a> to grab the namespace dictionary of the <code>string</code> module, for example. This produces:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; imports(vars(string))
['re', '_string']
</code></pre>
</div>
<span class="comment-copy">You could write that as a list comprehension: <code>return [module.__name__ for module in globals().values() if isinstance(module, types.ModuleType)]</code></span>
<span class="comment-copy">Perhaps it would be better if the caller passed his <code>globals()</code></span>
<span class="comment-copy">@slezica: perhaps, I'll add that option.</span>
<span class="comment-copy">Thanks Martijn. The argument of sys.getframe is the depth below the call stack the frame object is desired- can you explain why this is '1' in your example? If '0' was used, this returns the frame at the top of the stack - what does this mean? I'm fairly new to Python.</span>
<span class="comment-copy">@Mike: each function call is added to the stack; the top is the <i>current</i> function, so <code>sys._getframe(0).f_globals</code> is the same dictionary as the return value of <code>globals()</code>. <code>1</code> is the next item on the stack, so the function that called this one. <code>2</code> is the one before, etc.</span>
