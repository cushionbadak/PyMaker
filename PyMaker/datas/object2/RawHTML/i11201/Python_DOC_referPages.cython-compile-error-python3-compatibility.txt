<div class="post-text" itemprop="text">
<p>I am running <code>Python 3.4.4 :: Anaconda 4.0.0 (x86_64)</code> on <code>OS X Yosemite</code>. My Cython's version is <code>0.23.4</code>. I'm trying to embed some very trivial Cython code <code>test.pyx</code> into C code <code>testcc.c</code>. The problem is, if I use <code>python2.7-config</code> then everything works well (Python 2.7 is the built-in version on OS X). However if I use <code>python3.4-config</code> the following errors raised:</p>
<pre><code>Undefined symbols for architecture x86_64:
  "_inittest", referenced from:
      _main in testcc-b22dcf.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
</code></pre>
<p>I have to use Python3 since all my other codes are written in it. Please help me solve this problem. </p>
<hr/>
<p>The following are my source files:</p>
<p><code>test.pyx</code>:</p>
<pre><code>cdef public void pythonAdd(int[] a):
    a[1] = 5
    a[0] = 4
</code></pre>
<p><code>testcc.c</code>:</p>
<pre><code>#include "Python.h"
#include "test.h"
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char **argv) {
    Py_Initialize();
    inittest();
    int a [2] = {0 , 0};
    pythonAdd(a);
    printf("fist: %d, second: %d", a[0], a[1]);
    Py_Finalize();
    return 0;
}
</code></pre>
<p>And Compiling those two files using following <code>setup.py</code>:</p>
<pre><code>from distutils.core import setup, Extension
from Cython.Build import cythonize

ext = Extension("testc", sources=["test.pyx"])

setup(name="testc", ext_modules=cythonize(ext))
</code></pre>
<p>The following is the command I compile those c files:</p>
<pre><code>ldflags:=$(shell $(python3.4-config) --ldflags)
cflags:=$(shell $(python3.4-config) --cflags)
python setup.py build_ext --inplace
cython test.pyx
gcc $(cflags) $(ldflags) test.c testcc.c -o cysvm.out
</code></pre>
<hr/>
<p>Update:</p>
<p>I changed the <code>inittest()</code> to <code>PyInit_test()</code> as Jim suggested. The code compiles successfully. However when I run <code>./cysvm.out</code> the following errors occured:</p>
<pre><code>./cysvm.out
Could not find platform independent libraries &lt;prefix&gt;
Could not find platform dependent libraries &lt;exec_prefix&gt;
Consider setting $PYTHONHOME to &lt;prefix&gt;[:&lt;exec_prefix&gt;]
Fatal Python error: Py_Initialize: unable to load the file system codec
ImportError: No module named 'encodings'

Current thread 0x00007fff772f5300 (most recent call first):
</code></pre>
<h2>Update</h2>
<p>I solved this by adding the following line before <code>Py_Initialize();</code> in my <code>c</code> code:</p>
<pre><code>Py_SetPythonHome(L"/PATH/to/python3");
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is probably due to the fact that in Python <code>3.x</code> initialization of modules is not performed by calling <code>init&lt;module_name&gt;</code> but rather with <code>PyInit_&lt;module_name&gt;</code> (See <a href="https://www.python.org/dev/peps/pep-3121/#specification" rel="nofollow"><strong><code>PEP 3121</code></strong></a>). So, if you are linking with Python <code>3.x</code> and executing via <code>3.x</code> you need to change the initialization call. </p>
<p>In short, changing the call that initializes the module from:</p>
<pre><code>inittest();
</code></pre>
<p>To:</p>
<pre><code>PyInit_test();
</code></pre>
<p>and recompiling, should do the trick. </p>
<hr/>
<p>As for your second problem, an alternate solution other than using <code>Py_SetPythonHome</code> is setting <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME" rel="nofollow"><strong><code>PYTHONHOME</code></strong></a> to the output of <code>python3.4-config --exec-prefix</code> (or <a href="https://docs.python.org/3/library/sys.html#sys.exec_prefix" rel="nofollow"><strong><code>sys.exec_prefix</code></strong></a>) prior to compilation.</p>
</div>
<span class="comment-copy">I'm pretty sure your second issue could again be solved with setting <code>PYTHONHOME</code> to the path obtained from <code>python3.4-config --exec-prefix</code></span>
<span class="comment-copy">Thank you very much for your answer! It did work for compiling. But when I run the output file some new errors occurred. Would you please see the update in my answer? Thanks!</span>
<span class="comment-copy">I've already solved that problem. Thank you all the same. However would you please provide me some documentation about embedding Cython into C? Most materials I found either incomplete or outdated.</span>
<span class="comment-copy">Hm, embedding is not the most common situation so <code>Cython</code> docs don't really focus on it much. In general, one book I have found that sheds a bit of light on it is <a href="https://www.packtpub.com/application-development/learning-cython-programming" rel="nofollow noreferrer">here</a>. Other than this, you mostly need to google around for other resourses like <a href="https://github.com/cython/cython/wiki/EmbeddingCython" rel="nofollow noreferrer">EmbeddingCython</a> from the Cython Wiki or the Embedding How to from the <a href="https://docs.python.org/3.6/extending/index.html" rel="nofollow noreferrer">Python Docs</a>.</span>
<span class="comment-copy">Those are very helpful. Thank you so much!</span>
