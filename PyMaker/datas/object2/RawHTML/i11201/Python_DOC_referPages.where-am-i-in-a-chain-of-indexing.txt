<div class="post-text" itemprop="text">
<p>If I have some code like this:</p>
<pre><code>x.y.z = 12
</code></pre>
<p>I can infer that the <code>z</code> member is being indexed from the call to <code>__setattr__</code>. However if I have something like this:</p>
<pre><code>foo = x.y.z # situation 1
bar = x.y.z.bar # situation 2
</code></pre>
<p>How can I determine which of the above situations I am in, if I care to do something special for <code>z</code> based on whether or not it is last in the chain of indexing? Is this kind of inference even possible in Python?</p>
<p>For more clarity let's assume I can change the implementation of all the objects being indexed, so using descriptors is wholly possible.</p>
<p>I worry that the answer to this question is "you can't do that" since <a href="https://stackoverflow.com/questions/11024646/is-it-possible-to-overload-python-assignment">it is impossible to override <code>=</code> like you can in C++.</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure how you define 'being last at chain of indexing'. You can still call more attributes on an object at any time. </p>
<p>But you can know when your object is being accessed as an attribute. As mentioned before, you can overload <code>__getattr__</code> and <code>__getattribute__</code>, but a more robust way would be with descriptors.</p>
<p>This can get you started: <a href="http://nbviewer.jupyter.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb" rel="nofollow">http://nbviewer.jupyter.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb</a></p>
<p>Alternatively, there's a more formal guide: <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">https://docs.python.org/3/howto/descriptor.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to do this with python overrides. The only way is to have a known member that means "the end." For example, if you wanted to know which member was being set in a long chain of indexes you'd need some kind of setter:</p>
<pre><code>x.y.z.set(some_value)
</code></pre>
</div>
<span class="comment-copy">you can overload <code>__get__</code> which will tell you when <code>something.z</code> is retrieved, and you can overload <code>__getattr__</code> (or <code>__getattribute__</code> if you need to override getting existing members) when getting a member of <code>z</code>, there is no special method for when it is the last one gotten though.</span>
<span class="comment-copy">Any way you can do it in python would mean that <code>foo.bar</code> would be the same as (or at least call the same magic methods) then <code>x.y.z.bar</code>, if you want to change what happens when just assigning to a variable then you are unfortunately out of luck.</span>
<span class="comment-copy">This answer basically starts the OP on what could be a wild goose chase since it isn't clear what the OP's intentions are and a descriptor may not suite their needs, this would be a much better answer if you showcased some if the functionalities of descriptors and how to could relate to this use case.</span>
<span class="comment-copy">I disagree. Original question is pretty vague, hard to tell what the OP even tries to achieve. But if the intention is to mess with the way objects use attributes, that's what descriptors are for.</span>
<span class="comment-copy">I haven't had a chance to try a descriptor implementation, but I believe that's the right road to go down.</span>
<span class="comment-copy">"hard to tell what the OP even tries to achieve." exactly why just giving them a pointer may lead to them putting a lot of effort into learning about descriptors and then finding out that it doesn't suite their needs, I agree that it is likely the solution but I invite you to show an example of how a descriptor could achieve something like this.</span>
