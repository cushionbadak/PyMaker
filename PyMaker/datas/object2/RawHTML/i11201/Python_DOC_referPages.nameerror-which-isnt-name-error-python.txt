<div class="post-text" itemprop="text">
<p>I'm getting weird NameError!
i have a bash script who checks CPU status, puts it inside file (linux, btw), then executes python script who's doing the math, then runs another script that checks which core in working too hard, creates a file with the core number (so I can later check if the right core is still working too hard) and then sends mail if its the first time the core reaches over 90%.</p>
<p>Now, here's the problem! when i'm running the "SendMail.py" script (will add it below) i'm getting NameError: global name 'smtplib' is not defined.
Yes, i've imported it. and when I run the script without the other script lunches it - everything works well and i'm getting my email!</p>
<p>so - here's my script... will be glad if anyone might help :)</p>
<p>Ofek.</p>
<pre><code>#!/usr/bin/python
import os
import smtplib
with open("/linux/sendmail",'r') as nas_file:
    success=nas_file.read()

print(success)
def send_mail(msg):
    fromaddr = 'XXXXX'
    toaddrs  = 'XXXXX'


    # Credentials (if needed)
    username = 'XXXXX'
    password = 'XXXXX'

    # The actual mail send
    server = smtplib.SMTP('smtp.gmail.com:587')
    server.starttls()
    server.login(username,password)
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()
    return
if True:
    send_mail(success)
</code></pre>
<p>Traceback:</p>
<pre><code>Traceback (most recent call last):
  File "cpu_check.py", line 51, in &lt;module&gt;
    scancores()
  File "cpu_check.py", line 35, in scancores
    execfile("SendMail.py")
  File "SendMail.py", line 25, in &lt;module&gt;
    send_mail(success)
  File "SendMail.py", line 18, in send_mail
    server = smtplib.SMTP('smtp.gmail.com:587')
NameError: global name 'smtplib' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It does not work for the same reason the following code:</p>
<pre><code>class Test:
  import math
  def fn():
    print(math.sin(1))
  fn() # NameError: name 'math' is not defined
</code></pre>
<p>From the <a href="https://docs.python.org/2/library/functions.html#execfile" rel="nofollow">documentation of execfile</a>:</p>
<blockquote>
<h3>execfile(filename[, globals[, locals]])</h3>
<p>...</p>
<p>The arguments are a file name and two optional dictionaries. The file
  is parsed and evaluated as a sequence of Python statements (similarly
  to a module) using the <em>globals</em> and <em>locals</em> dictionaries as global and
  local namespace. If provided, <em>locals</em> can be any mapping object.
  Remember that at module level, globals and locals are the same
  dictionary. If two separate objects are passed as <em>globals</em> and <em>locals</em>,
  the code will be executed as if it were embedded in a class
  definition.</p>
<p><em>Changed in version 2.4: formerly locals was required to be a
  dictionary.</em></p>
<p>If the <em>locals</em> dictionary is omitted it defaults to the <em>globals</em>
  dictionary. If both dictionaries are omitted, the expression is
  executed in the environment where <code>execfile()</code> is called. The return
  value is <code>None</code>.</p>
</blockquote>
<p>I assume you did not specify any additional parameters to execfile, so globals and locals default to the current execution environment, which basically behaves like the <code>Test</code> class above.</p>
<p>How to solve this? Don't use <code>execfile</code>. Use modules or <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow">subprocess.call</a> instead:</p>
<pre><code># SendMail.py

#!/usr/bin/python
import os
import smtplib

def send_mail(msg):
    ...

def run():
    with open("/linux/sendmail",'r') as nas_file:
        success=nas_file.read()
    print(success)
    send_mail(success)

if __name__ == "__main__":
    run()
</code></pre>
<h1> </h1>
<pre><code># cpu_check.py

import SendMail
...

SendMail.run() # instead of execfile("SendMail.py")
</code></pre>
</div>
<span class="comment-copy">Post the complete traceback.</span>
<span class="comment-copy">Traceback (most recent call last):   File "cpu_check.py", line 51, in &lt;module&gt;     scancores() File "cpu_check.py", line 35, in scancores     execfile("SendMail.py")   File "SendMail.py", line 25, in &lt;module&gt;     send_mail(success) File "SendMail.py", line 18, in send_mail     server = smtplib.SMTP('smtp.gmail.com:587') NameError: global name 'smtplib' is not defined</span>
<span class="comment-copy">So the error is raised by your other script, and you're not importing <code>smtplib</code> there, right?</span>
<span class="comment-copy">indeed. thank you :)  can you explain why it happens? I mean, i didn't used smtplib at the second file...</span>
<span class="comment-copy">Out of interest. Why are you using <code>execfile</code> to run the above code? You should really put all the code in functions so that you can just import it and call the functions when needed.</span>
