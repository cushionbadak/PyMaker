<div class="post-text" itemprop="text">
<p>I would like to modify the cell values of a dataframe column (Age) where currently it is blank and I would only do it if another column (Survived) has the value 0  for the corresponding row where it is blank for Age. If it is 1 in the Survived column but blank in Age column then I will keep it as null. </p>
<p>I tried to use <code>&amp;&amp;</code> operator but it didn't work. Here is my code:</p>
<pre class="lang-none prettyprint-override"><code>tdata.withColumn("Age",  when((tdata.Age == "" &amp;&amp; tdata.Survived == "0"), mean_age_0).otherwise(tdata.Age)).show()
</code></pre>
<p>Any suggestions how to handle that? Thanks.</p>
<p>Error Message:</p>
<pre><code>SyntaxError: invalid syntax
  File "&lt;ipython-input-33-3e691784411c&gt;", line 1
    tdata.withColumn("Age",  when((tdata.Age == "" &amp;&amp; tdata.Survived == "0"), mean_age_0).otherwise(tdata.Age)).show()
                                                    ^
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get <code>SyntaxError</code> error exception because Python has no <code>&amp;&amp;</code> operator. It has <code>and</code> and <code>&amp;</code> where the latter one is the correct choice to create   boolean expressions on <code>Column</code> (<code>|</code> for a logical disjunction and <code>~</code> for logical negation).</p>
<p>Condition you created is also invalid because it doesn't consider <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a>. <code>&amp;</code> in Python has a higher precedence than <code>==</code> so expression has to be parenthesized. </p>
<pre><code>(col("Age") == "") &amp; (col("Survived") == "0")
## Column&lt;b'((Age = ) AND (Survived = 0))'&gt;
</code></pre>
<p>On a side note <code>when</code> function is equivalent to <code>case</code> expression not <code>WHEN</code> clause. Still the same rules apply. Conjunction:</p>
<pre><code>df.where((col("foo") &gt; 0) &amp; (col("bar") &lt; 0))
</code></pre>
<p>Disjunction:</p>
<pre><code>df.where((col("foo") &gt; 0) | (col("bar") &lt; 0))
</code></pre>
<p>You can of course define conditions separately to avoid brackets:</p>
<pre><code>cond1 = col("Age") == "" 
cond2 = col("Survived") == "0"

cond1 &amp; cond2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it should works at least in pyspark 2.4</p>
<pre><code>tdata = tdata.withColumn("Age",  when((tdata.Age == "") &amp; (tdata.Survived == "0") , "NewValue").otherwise(tdata.Age))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It should be:</p>
<pre><code>$when(((tdata.Age == "" ) &amp; (tdata.Survived == "0")), mean_age_0)
</code></pre>
</div>
