<div class="post-text" itemprop="text">
<p>I've a really big json object that I want to dump into a pickle file. Is there a way to display a progress bar while using <code>pickle.dump</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The only way that I know of is to define getstate/setstate methods to return "sub objects" which can refresh the GUI when the get pickled/unpickled. For example, if your object is a list, you could use something like this: </p>
<pre><code>import pickle

class SubList:
    on_pickling = None

    def __init__(self, sublist):
        print('SubList', sublist)
        self.data = sublist

    def __getstate__(self):
        if SubList.on_pickling is not None:
            print('SubList pickle state fetch: calling sub callback')
            SubList.on_pickling()
        return self.data

    def __setstate__(self, obj):
        if SubList.on_pickling is not None:
            print('SubList pickle state restore: calling sub callback')
            SubList.on_pickling()
        self.data = obj


class ListSubPickler:
    def __init__(self, data: list):
        self.data = data

    def __getstate__(self):
        print('creating SubLists for pickling long list')
        num_chunks = 10
        span = int(len(self.data) / num_chunks)
        SubLists = [SubList(self.data[i:(i + span)]) for i in range(0, len(self.data), span)]
        return SubLists

    def __setstate__(self, subpickles):
        self.data = []
        print('restoring Pickleable(list)')
        for subpickle in subpickles:
            self.data.extend(subpickle.data)
        print('final', self.data)


def refresh():
    # do something: refresh GUI (for example, qApp.processEvents() for Qt), show progress, etc
    print('refreshed')
</code></pre>
<p>If you run the following in that script,</p>
<pre><code>data = list(range(100))  # your large data object
list_pickler = ListSubPickler(data)
SubList.on_pickling = refresh

print('\ndumping pickle of', list_pickler)
pickled = pickle.dumps(list_pickler)

print('\nloading from pickle')
new_list_pickler = pickle.loads(pickled)
assert new_list_pickler.data == data

print('\nloading from pickle, without on_pickling')
SubList.on_pickling = None
new_list_pickler = pickle.loads(pickled)
assert new_list_pickler.data == data
</code></pre>
<p>You will see that the refresh callback gets called 10 times. So if you have 2GB list to dump, and it takes 1 minute to dump, so you'd want roughly 60*10 = 600 GUI refreshes, you would then set your number of chunks to be 600. </p>
<p>Code is easily modified for a dict, numpy array, etc. </p>
</div>
<span class="comment-copy">It's almost instantaneous, Why would you like to have a progress bar ? is your file size exceeding 10MB ?</span>
<span class="comment-copy">Well, the size of the json that I'm trying to dump could be arbitrary.</span>
<span class="comment-copy">maybe you can use the len of the json string to, kind of, sort of, determine the size of the pickle and deduce the current progress.</span>
<span class="comment-copy">Thanks for the suggestions, but somehow, it feels like a hack. The original intent of the question was to expose any hidden functionality in the <code>cPickle</code> library.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/users/834066/sid">stackoverflow.com/users/834066/sid</a> Did you find any solution ? I am looking for a progress while doing pickle.load()</span>
