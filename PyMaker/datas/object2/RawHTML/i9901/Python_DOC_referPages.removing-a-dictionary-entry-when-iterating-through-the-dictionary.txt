<div class="post-text" itemprop="text">
<p>So I have a function setup to where it will run an SSH client to remote into a device, or attempt to do so. If it fails, it will try a secondary connection, remote in to activate the in-band IP, and then rerun the initial function in a recursive loop.</p>
<p>The problem I am having is after the connection to the secondary connection is successful and in-band IP is activated, the ssh connection attempt starts over. Unfortunately, the for loop goes to the beginning of the dictionary again, going through connections already previously connected to. I am trying to removing the dictionary entries after the connection is successful, but I can't do </p>
<pre><code>del Dict[entry]
</code></pre>
<p>because the entry is currently being used. I get a runtime error.</p>
<pre><code>RuntimeError: dictionary changed size during iteration
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could store your entries in a separate list and remove them afterwards</p>
<p>Pseudocode:</p>
<pre><code>successful_connections = []
for ...:
    [...]
    if successful:
        successful_connections.append(entry)

for successful_connection in successful_connections:
    del Dict[successful_connection]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use pop
For example 
d.pop('a',0)
Where a is the key which you want to delete and the key value pair will be removed feom the dictionary</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/stdtypes.html#dict.popitem" rel="nofollow noreferrer">popitem</a> with a while-loop:</p>
<pre><code>def fn(d):
    while d:
        k, v = d.popitem()
        if v &lt; 5:
            d[k] = v + 1
            fn(d)
        else:
            print((k, v))

&gt;&gt;&gt; x = dict(a=0, b=3, c=9, d=5, e=2)
&gt;&gt;&gt; fn(x)
('b', 5)
('c', 9)
('d', 5)
('e', 5)
('a', 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is what I did:</p>
<p>I was having an issue with pop and del raising errors, so I created a separate SSH function that used the current device IP in the loop. This way, I wasn't iterating through the loop multiple times. Here is the separate function:</p>
<pre><code>def backup_config_single(rootpass, device_ip, device, DeviceName):
  try:
      net_connect = ConnectHandler(device_type = device, ip = device_ip, username = usernamepre, password = passwordpre)
      output = net_connect.send_command('copy running-config scp://root@192.168.1.61/Documents/backups/%s.txt\n\n\n\n%s\n' % (DeviceName, rootpass))
      net_connect.disconnect()
      successful_connections.append(DeviceName)
  except:
      unsuccessful_connections.append(DeviceName)
</code></pre>
<p>rootpass is for the SCP server, device_ip is the switch/router IP, device is a parameter required for netmiko (SSH client I'm using), DeviceName is the current hash value in the dictionary.</p>
<p>Successful connections had to be declared from the bigger function with:</p>
<pre><code>global successful_connections
successful_connections = []
</code></pre>
<p>Same with unsuccessful connections. This would allow me to determine devices that couldn't connect afterward.</p>
</div>
