<div class="post-text" itemprop="text">
<p>In Python 2, there were two ways of getting input. <code>raw_input()</code> and <code>input()</code>, which was a wrapper around <code>eval(raw_input())</code>. In Python 3 however, <code>input()</code> replaced <code>raw_input()</code> and the old meaing of <code>input()</code> was deprecated. This is documented in <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">What's new in Python 3</a>:</p>
<blockquote>
<p>PEP 3111: <code>raw_input()</code> was renamed to <code>input()</code>. That is, the new <code>input()</code> function reads a line from <code>sys.stdin</code> and returns it with the trailing newline stripped. It raises <code>EOFError</code> if the input is terminated prematurely. To get the old behavior of <code>input()</code>, use <code>eval(input())</code>.</p>
</blockquote>
<p>But why exactly was <code>input()</code> around in Python 2 in the first place? What was the rationale for having user input that was evaluated as literal Python 2 code? This is what the <a href="https://docs.python.org/2/library/functions.html#input" rel="nofollow noreferrer">Python 2</a> documentation had to say:</p>
<blockquote>
<p>[<code>input()</code> is] Equivalent to <code>eval(raw_input(prompt))</code>.</p>
<p>This function does not catch user errors. If the input is not syntactically valid, a <code>SyntaxError</code> will be raised. Other exceptions may be raised if there is an error during evaluation.</p>
<p><strong>If the <code>readline</code> module was loaded, then <code>input()</code> will use it to provide elaborate line editing and history features</strong>.</p>
<p>Consider using the <code>raw_input()</code> function for general input from users.</p>
</blockquote>
<p>Notice the part in bold (which I emphasized). What exactly does this mean? <a href="https://docs.python.org/2/library/readline.html#example" rel="nofollow noreferrer">I looked over the documentation for the <code>readline</code> module</a> and found a few things. The only real relevant bit I found, however, was this:</p>
<blockquote>
<p>Settings made using this module affect the behavior of both the interpreter’s interactive prompt and the prompts offered by the <code>raw_input()</code> and <code>input()</code>built-in functions.</p>
</blockquote>
<p>Which doesn't really help explain why <code>input()</code> was created or needed in the first place, though.</p>
<p>Needless to say, using <code>eval(any_user_input())</code> is very dangerous security wise, can cause debugging difficulties, and, from what I've read, is slow. So why did they create <code>input()</code> in Python 2 in the first place? Were the developers unaware at the time of the downfalls of <code>input()</code>?</p>
<p><strong>References:</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/12168978/evalinput-in-python-2to3">Is using eval in Python a bad practice?</a></li>
<li><a href="https://stackoverflow.com/questions/1832940/is-using-eval-in-python-a-bad-practice">eval(input()) in python 2to3</a></li>
<li><a href="https://docs.python.org/3.0/whatsnew/3.0.html" rel="nofollow noreferrer">What’s New In Python 3.0</a></li>
<li><a href="https://docs.python.org/2/" rel="nofollow noreferrer">Python 2.7.12 documentation</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>First of all, probably the only person who can answer this question decisively is <a href="https://stackoverflow.com/users/818274/guido-van-rossum">the BDFL</a>.</p>
<p><code>input</code> can be useful in programs that are meant to be used by a  programmer, so that they can enter complex structures, like <code>{'foo': 42}</code>, or even expressions, but less so in programs intended to be used by an unskilled user.</p>
<p>From the SCM history we can see that both <code>input</code> and <code>raw_input</code> <a href="https://github.com/python/cpython/blob/badc12f65168c9a664ee07e6d10b57aaded4caee/Python/bltinmodule.c#L198" rel="nofollow noreferrer">were present in 1990; or pre-0.9</a>, when Python was in its infancy - back then <code>exec</code> was a function, and <code>int('42')</code> would have thrown an exception. Most notably, <code>eval</code> was already present as well, so one could have used <code>eval(raw_input())</code> even back then to get much of the same effect.</p>
<p>Back then there was no <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a> yet, and the "only one obvious way" wasn't as much a guiding principle, so this could have been an oversight.</p>
<p>And both <code>raw_input</code> and <code>input</code> remained. During the history of Python, the backwards-compatibility was a guiding principle, so <code>input</code> was unchanged until backwards-incompatible Python 3 was released.</p>
<hr/>
<p>As for the bolded part about <code>readline</code> module: if you import <code>readline</code>, then you can use arrow keys to move cursor keys around on the <code>input()</code> line, and configurable bindings; if <code>readline</code> is not imported in the program, then no such behaviour exists. </p>
<p>Again, this wouldn't have been the reason for <code>input</code> existing in the first place; back in 1990 Python didn't support such editing <em>at all</em>, regardless of whether <code>input</code> or <code>raw_input</code> was used.</p>
</div>
<div class="post-text" itemprop="text">
<p>For what it worths, <code>input</code> builtin was there in a first available Python version (0.9.1), it is from 1991. I can imagine Python 2.x had it for backwards compatibility with Python 1.x, and Python 1.x had it for backwards compatibility with 0.x. </p>
<p>Say no to 0.x -&gt; 1.x and 1.x -&gt; 2.x porting issues!</p>
</div>
<span class="comment-copy">IMHO, the main motivation was to enable direct input of Python-style data (numbers, lists, dicts).</span>
<span class="comment-copy"><a href="http://stackoverflow.com/users/818274/guido-van-rossum">This guy</a> here can clear any confusions about the design decisions :-)</span>
<span class="comment-copy">It was convenient, it was early, and people weren't thinking long and hard about the security concerns at the time. Same reason C had <code>gets</code>.</span>
<span class="comment-copy">So why was it in 0.9.1? This doesn't really clarify anything.</span>
<span class="comment-copy">The question was why is it in Python 2, I'm answering it.</span>
<span class="comment-copy">The question was pretty obviously "why <code>input()</code> was created or needed in the first place." Sometimes, technically correct is not the best kind of correct. Do you really think this answer will satisfy <i>anyone</i>? Honestly?</span>
<span class="comment-copy">I'm getting the impression that, the question being about an apparently useless function, you posted this as some kind of joke about things that people know are useless and yet publish anyway...</span>
<span class="comment-copy">Well, an obvious answer to "why input() was created in a first place" is that someone wanted to eval user input. This can be natural in early stages of development of a scripting language, maybe it was a poor man's REPL. People make bad decisions all the time; early versions of <i>everything</i> contain a lot of useless and incorrect stuff. IMHO the interesting part of a question is why it survived for so many years. So for me "why is it in Python 2" was more interesting than "why was it created in a first place".</span>
