<div class="post-text" itemprop="text">
<p>What is the point of python's <code>operator</code> module? There are many obviously redundant functions there and I don't understand why should one prefer to use these functions rather than other ways to do the same thing.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.truth(0)
False
&gt;&gt;&gt; bool(0)
False
</code></pre>
<p>seem to do exactly the same thing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its sometimes useful to be able to access the functionality of an operator but as a function. For example to add two numbers together you could do.</p>
<pre><code>&gt;&gt; print(1 + 2)
3
</code></pre>
<p>You could also do</p>
<pre><code>&gt;&gt; import operator
&gt;&gt; print(operator.add(1, 2))
3
</code></pre>
<p>A use case for the function approach could be you need to write a calculator function which returns an answer given a simple formula.</p>
<pre><code>import operator as _operator

operator_mapping = {
    '+': _operator.add,
    '-': _operator.sub,
    '*': _operator.mul,
    '/': _operator.truediv,
}

def calculate(formula):
    x, operator, y = formula.split(' ')

    # Convert x and y to floats so we can perform mathematical
    # operations on them.
    x, y = map(float, (x, y))

    return operator_mapping[operator](x, y)

print(calculate('1 + 2'))  # prints 3.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness and consistency. Because having all operators in one place lets you do dynamic lookups later on:</p>
<pre><code>getattr(operator, opname)(*arguments)
</code></pre>
<p>Omitting some operations because they are redundant would defeat that purpose. And because Python names are just references, it is cheap and easy to add a name to the <code>operator</code> module that is simply another reference.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given the existence of <a href="https://docs.python.org/2/library/functions.html#bool" rel="nofollow noreferrer"><code>bool</code></a>, it's hard to think of any use-case for <code>operator.truth</code> these days.  Note that <code>bool</code> was new in 2.2.1, and operator predates that, so it may only exist now for historical reasons.  There are also other useless functions in the operator module, such as <code>operator.abs</code> - which simply calls the built-in <code>abs</code>.  </p>
<p>The operator module is sometimes useful for functional programming.  For example, Python has a built-in <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function, but neglected to include an analogous <code>product</code> function.  This could be succintly implemented using operator's functional interface to multiplication:</p>
<pre><code>&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; from functools import reduce 
&gt;&gt;&gt; def product(sequence, start=1):
...     return reduce(mul, sequence, start)
... 
&gt;&gt;&gt; product([7, 2, 3])
42
</code></pre>
<p>It's true that there are other ways to implement this.  Arguably the procedural method, i.e. using a plain old for loop and accumulating with the <code>*</code> operator, is more pythonic.  </p>
<p>For users who, for whatever reason, choose not to use an imperative style, the operator module offers a more palatable implementation than using anonymous functions  </p>
<pre><code>&gt;&gt;&gt; timeit reduce(lambda x, y: x*y, range(1, 100))
10000 loops, best of 3: 24.3 µs per loop
&gt;&gt;&gt; timeit reduce(mul, range(1, 100))
100000 loops, best of 3: 14.9 µs per loop
</code></pre>
<p>Operator's <a href="https://github.com/python/cpython/blob/master/Modules/_operator.c" rel="nofollow noreferrer">C implementation</a> (if available) offers performance gains over the inferior <code>lambda</code> version.  The <code>itemgetter</code>, <code>attrgetter</code> and <code>methodcaller</code> functions provided in operator module also offer more readable and better performing options for the kind of simple tasks which are often handled by anonymous functions.</p>
</div>
<span class="comment-copy">Related:  <a href="http://stackoverflow.com/q/22387166/674039">stackoverflow.com/q/22387166/674039</a></span>
<span class="comment-copy">Not very convincing answer for me, because different operations take different numbers of arguments.</span>
<span class="comment-copy">@wim: I did pass in arguments dynamically here. You can trivially group string operators into groups by the number of operators they take too.</span>
<span class="comment-copy">Don't really understand the use-case and seems to violate "one obvious way to do it".  Are you aware of any project on github where the code actually used dynamic lookups on operator module like this?</span>
<span class="comment-copy">@wim: we could slog through <a href="https://searchcode.com/?q=getattr%28operator&amp;loc=0&amp;loc2=10000&amp;lan=19" rel="nofollow noreferrer">these results</a>. I can't narrow it down to an exact match, but I see <code>pandas</code> uses <code>getattr(operator, ...)</code> in their tests.</span>
<span class="comment-copy">@MartijnPieters What do you mean by doing dynamic lookups? Can you write an example?</span>
