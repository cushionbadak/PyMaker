<div class="post-text" itemprop="text">
<p><strong>First off, sorry for the wall of text. I try to explain the issue as much as I can.</strong></p>
<p>Hello, from the title you may think that I refer to a simple <code>if</code> statement and that may be true. I've done some questions today about this project and now I want to do something else. I'm doing a bot using the League of Legends Api. What the bot do is just print some stats from the current game of a given player. To those unfamiliar with the game, there are ranks. The rank is one of the stats that the bot prints to the chat where it is working on; those stats are from ranked games, unlike normal games, ranked games are the ones that count to these stats. Anyway; I'm getting the data as json and each time that a player is Unranked (not ranked player) I get a 404 from the request and I want to handle that 404 to print something else. Right now, this is the important part of the code:</p>
<pre><code>            ids_seen = set()
            for y in range(0, 10):
                num += 1
                i = r_match['participants'][num]
                e_name = i['summonerName']
                e_id = i['summonerId']
                team_id = i['teamId']
                champ = i['championId']

                r_team = requests.get("https://lan.api.pvp.net/api/lol/lan/v2.5/league/by-summoner/{}/"
                                      "entry?api_key=".format(e_id)).json()

                champ_r = requests.get("https://global.api.pvp.net/api/lol/static-data/lan/v1.2/champion?"
                                       "api_key=").json()

                x = r_team["{}".format(e_id)][0]
                e_tier = x['tier']
                e_div = x['entries'][0]['division']

                for key, value in champ_r['data'].items():
                    c_name = value['name']
                    c_id = value['id']

                    chat_say = """
{} - {} {} - Playing `#{}`""".format(e_name, e_tier, e_div, c_name)

                    if champ == c_id:
#                         if r_team['status']['status_code'] == 404:
#                             unranked_term = (e_name + " - " + "Unranked")
#                             unranked_say = """
# {} - Playing `#{}`""".format(unranked_term, c_name)
#                             yield from bot.send_message(message.channel, unranked_say)

                        # else:
                            if team_id == 100:
                                if not team_id in ids_seen:
                                    yield from bot.send_message(message.channel, "```---Blue team---```")
                                yield from bot.send_message(message.channel, chat_say)

                            elif team_id == 200:
#                                 if r_team['status']['status_code'] == 404:
#                                     unranked_term = (e_name + " - " + "Unranked")
#                                     unranked_say = """
# {} - Playing `#{}`""".format(unranked_term, c_name)
#                                     yield from bot.send_message(message.channel, unranked_say)

                                if not team_id in ids_seen:
                                    yield from bot.send_message(message.channel, "```--- Red team ---```")
                                yield from bot.send_message(message.channel, chat_say)

                ids_seen.add(team_id)

                yield from asyncio.sleep(1)
</code></pre>
<p>When I run this code the output is something like this:</p>
<pre><code>Player1 - Rank - Champion that is being played
Player2 - Rank - Champion that is being played
Player3 - Rank - Champion that is being played...
</code></pre>
<p>... and so on; but while that is happening if it finds an unranked player like I mentioned before it throws a <code>KeyError</code> because, well, it can't find any ranked data on the json. So; I commented out some lines which are the ones that I want to implement.</p>
<p>This:</p>
<pre><code>#                         if r_team['status']['status_code'] == 404:
#                             unranked_term = (e_name + " - " + "Unranked")
#                             unranked_say = """
# {} - Playing `#{}`""".format(unranked_term, c_name)
#                             yield from bot.send_message(message.channel, unranked_say)
</code></pre>
<p>I tried placing this exactly where it is and I was getting a <code>KeyError</code> again; if I place that right here:</p>
<pre><code>                    if team_id == 100:
                            # &lt;- Right here if I'm not wrong.
                        if not team_id in ids_seen:
                            yield from bot.send_message(message.channel, "```---Blue team---```")
                        yield from bot.send_message(message.channel, chat_say)
</code></pre>
<p>I get the players and the champions being played but the ranks of each one is displayed as Unranked; everyone is Unranked. The question is, how can I implement that to my code? I'm not sure if I'm in the right path on doing this.</p>
<p>I would like the output to be something like:</p>
<pre><code>Player1 - Rank - Champion # If it has ranked information
Player2 - Rank - Champion # Same
Player3 - Unranked - Champion # If the player is unranked
</code></pre>
<p>Everything is so I can run the bot properly because every time there is an unranked I get an error and I just can't avoid that (except for looking a match without an unranked player)</p>
<p>Thanks for any help! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try adding a <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer"><code>try except</code> block</a> at the exact place where you are getting a <code>KeyError</code>, this will try to get the value at that key, if it does not exist, it will catch the <code>exception</code> that it does not exist and you can handle this <code>exception</code> as you wish (in your case, unranked player)</p>
<p>for example - if this was your json or your dict</p>
<pre><code>jsonobj = {
   "players":[
      {
         "rank":"500",
         "name":"IAMRANKED"
      },
      {
         "name":"IAMNOTRANKED"
      }
   ]
}
</code></pre>
<p>then, if you surround it with a <code>try except</code> block like this: </p>
<pre><code># EXAMPLES
try:
    print(jsonobj['players'][0]['rank']) #SURROUND YOUR ASSIGNEMENT WITH A TRY CATCH BLOCK
    print("I have a rank") # WILL PRINT RANK EXISTS
except KeyError:
    print("I do not have a rank")

try:
    print(jsonobj['players'][1]['rank'])
    print("I have a rank")
except KeyError:
    print("I do not have a rank") # WILL PRINT RANK DOES NOT EXIST
</code></pre>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">Hi @fuhrerguxez if this or any answer has solved your question please consider <a href="http://meta.stackexchange.com/q/5234/179419">accepting it</a> by clicking the check-mark. This indicates to the wider community that you've found a solution and gives some reputation to both the answerer and yourself. There is no obligation to do this.</span>
<span class="comment-copy">Hello, indeed all I needed was a try ... except block, I had one but it was placed wrongly. After some tweaking here and there I got it working, thank you!</span>
