<div class="post-text" itemprop="text">
<p><strong>RESOLVED</strong></p>
<p>When an integer containing "0" or "4" is entered, this if-statement only returns the first in the statement. </p>
<p>For example, in the code below, if I enter "60", it will execute:</p>
<p>print "Nice, you're not greedy - you win!" exit(0)</p>
<p>NOT</p>
<p>dead("You greedy bastard!")</p>
<p>as I expected with how_much &gt;= 50.</p>
<p>Have tried a bunch of changes, but can't seem to get to execute as intended.   Anyone know what's going on here? </p>
<pre><code>def gold_room():
    print "This room is full of gold. How much do you take?"
    number_type = False

    while True:

        choice = raw_input("&gt; ")

        how_much = int(choice)

        if "0" in choice or "4" in choice and how_much &lt; 50:
            print "Nice, you're not greedy - you win!"
            exit(0)
        elif "0" in choice or "4" in choice and how_much &gt;= 50:
            dead("You greedy bastard!")
        else:
            print "Man, learn to type a number. Put a 0 or a 4 in your number."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have an order-of-operations issue.  The <code>and</code> operator binds more tightly than the <code>or</code> operator, so when you write:</p>
<pre><code>  if "0" in choice or "4" in choice and how_much &lt; 50:
</code></pre>
<p>You are actually getting:</p>
<pre><code>  if ("0" in choice) or ("4" in choice and how_much &lt; 50):
</code></pre>
<p>And hopefully, with those parentheses, it's obvious why entering <code>60</code> triggers the "Nice, you're not greedy - you win!" message (because it matches the <code>"0" in choice</code> coindition, and since that condition is true, the entire <code>or</code> statement is true).</p>
<p>Add parentheses to get what you want:</p>
<pre><code>  if ("0" in choice or "4" in choice) and how_much &lt; 50:
</code></pre>
<p>See <a href="http://www.informit.com/articles/article.aspx?p=459269&amp;seqNum=11" rel="nofollow noreferrer">this article</a> for details.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need some brackets in your conditionals to make sure they get evaluated the way you want, e.g:</p>
<pre><code>    if ("0" in choice or "4" in choice) and how_much &lt; 50:
</code></pre>
<p>You'll need something similar on the next condition too. </p>
</div>
<div class="post-text" itemprop="text">
<p>You should separate your conditions into logical groups. Besides, you have repeated condition <code>"0" in choice or "4" in choice</code>, use an optimized structure as shown below:</p>
<pre><code>if "0" in choice or "4" in choice:
    if how_much &lt; 50:
        print "Nice, you're not greedy - you win!"
        exit(0)
    elif how_much &gt;= 50:
        dead("You greedy bastard!")
else:
    print "Man, learn to type a number. Put a 0 or a 4 in your number."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because the and is executed before the or
<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#operator-precedence</a>
Some ()  in the correct places will fix this. </p>
<p>It'll be easier to test this too if you split the test in a different function </p>
</div>
<div class="post-text" itemprop="text">
<p>Python will do this:
choice = '60'
how_much = 60
if "0" in choice (Will return True) OR "4" in choice AND how_much &lt; 50 (This will return false but since you did that or it will continue with it)
You should do it like this instead :</p>
<pre><code>if ("0" in choice or "4" in choice) and how_much &lt; 50:
        print "Nice, you're not greedy - you win!"
        exit(0)
elif how_much &gt;= 50:
        dead("You greedy bastard!")
</code></pre>
<p>The parantheses will make it so only if it will return True it will then compare to see if the variable "how_much" is less then 50.
Before , it was checking if "0" is in choice OR if the 4 in choice and how_much is less then 50. The OR makes it so only one of the statements have to be True to continue on the next line of code (The AND makes it so the "4 in choice and how_much &lt; 50" will only return True or False wich will have to be compared to the "0 in choice")</p>
<p><strong>Sorry if it doesn't make a lot of sense but I'm sleepy</strong>
Hope you got the idea. </p>
</div>
<span class="comment-copy">Thanks, this explanation was very helpful!</span>
<span class="comment-copy">Thanks, that took care of it!</span>
<span class="comment-copy">Thanks - your grouping lens is very helpful!</span>
<span class="comment-copy">Thanks, Maarten!</span>
<span class="comment-copy">Thanks, that did it!</span>
