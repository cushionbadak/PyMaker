<div class="post-text" itemprop="text">
<p>I'm switching from R to Python for new machine learning project I'm doing.</p>
<p>I found one code architecture which seems ok (image below) but I have problems with with implementation if I want to keep my code DRY.</p>
<p><a href="https://i.stack.imgur.com/SWEBU.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/SWEBU.png"/></a></p>
<p>So basically I have a piece of code (functions) that I want to share across different modules (namely <code>data</code>, <code>features</code> and <code>model</code>s located under <code>src</code> module).
That code in this case contains functions for loading and saving the data.</p>
<p>The problem is that I cannot import functions from upper module (for example if I had <code>functions.py</code> directly under <code>src</code> folder)</p>
<p>I could add separate <code>functions.py</code> inside every module (<code>data</code>, <code>features</code>, <code>models</code>) but that would defeat the purpose of me trying to create well structured project.</p>
<p>I assume I'm not the only one with this issue.</p>
<p>How is this usually handled?</p>
<p>How do you create shared module that can be used by all most deeply nested modules? (I'd like to import the same module into <code>make_dataset.py</code>, <code>build_features.py</code>, <code>predict_model.py</code>, <code>train_model.py</code>)</p>
<p><strong>EDIT:</strong></p>
<p>I also forgot to mention I use virtualenv and global space should not be contaminated.</p>
<p><strong>SOLUTION:</strong></p>
<p>So what I ended up doing was I added the following code to my top package <code>__init__.py</code> file:
<code>
import sys, os
fullPathToProjectFolder = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, fullPathToProjectFolder)
print('__init__ project packege linked: ' + fullPathToProjectFolder)</code></p>
<p>So whenever you use anything from the main package or the subpackage it is automatically linked (because when you import main package then <code>__init__.py</code> file is automatically called). And every module can make it's imports relative to top package.</p>
<p>E.g: if <code>train_model.py</code> wants to import <code>build_features.py</code> it would do it like so:</p>
<p><code>from features import build_features</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add your project to your system path so that python can find the module. </p>
<p>This can be done within python:</p>
<pre><code>import sys
sys.path.insert(0, fullPathToProjectFolder)
</code></pre>
<p>Then you will be able to call your modules with</p>
<pre><code>import general_functions
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to make <code>__init__.py</code> file in your directory would you make as a module. So <code>functions.py</code> or whatever is in the folder that you can call with <code>import</code>. I hope it works <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#packages</a></p>
</div>
<span class="comment-copy">I also forgot to mention I use virtualenv and global space should not be contaminated. Does this work in that case?</span>
<span class="comment-copy">Yes. This effects the path only temporarily, it doesn't effect other running python programs and is deleted when you close your program.</span>
<span class="comment-copy">Correct, but if you place those two lines at the beginning of the file, then every time that program is run, you're good.</span>
<span class="comment-copy">Tested it out and it works. Thank you!</span>
