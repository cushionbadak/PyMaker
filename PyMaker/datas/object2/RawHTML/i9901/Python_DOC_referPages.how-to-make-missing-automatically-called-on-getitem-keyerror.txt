<div class="post-text" itemprop="text">
<p>I'm writing a class that emulates a mapping object.  It has the following functions.</p>
<pre><code>class MyClass(object):
    def __init__(self):
        self.vars = {}

    def __getitem__(self,key):
        return self.vars[key]

    def __missing__(self,key):
        return key
</code></pre>
<p>I would think that a call to <code>obj[missing_key]</code> would also call <code>__missing__</code>. But since I've overridden <code>__getitem__</code> I have to do this</p>
<pre><code>def __getitem__(self,key):
    try:
        return self.vars[key]
    except KeyError as e:
        return self.__missing__(key)
</code></pre>
<p>It seems that the <code>__missing__</code> hook is not wrapped into calls to <code>__getitem__</code> but instead built inside <code>__getitem__</code>.  This makes the <code>__missing__</code> hook only useful for classes that extend dict.  In my case it makes no sense and I should just implement the missing functionality inside the try/except.</p>
<p>Is there a way to make <code>__getitem__</code> automatically call <code>__missing__</code> on a <code>KeyError</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/reference/datamodel.html#object.__missing__" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p><code>object.__missing__(self, key)</code></p>
<blockquote>
<p>Called by <code>dict.__getitem__()</code> to implement <code>self[key]</code> for dict subclasses when key is not in the dictionary.</p>
</blockquote>
</blockquote>
<p>Basically, if you're not a <code>dict</code> subclass, or you are, but you overloaded <code>__getitem__</code> without delegating up the inheritance chain to <code>dict.__getitem__</code>, then <code>__missing__</code> means nothing, because nothing checks for it. <strong>You can't make it call <code>__missing__</code> implicitly unless you're a <code>dict</code> subclass.</strong></p>
<p>If you're writing your own mapping class, and you want it to do something like <code>__missing__</code>, you don't really need to have a <code>__missing__</code> at all, just put the handling code in your <code>__getitem__</code>:</p>
<pre><code>def __getitem__(self, key):
    try:
        return self.var[key]
    except KeyError:
        return key
</code></pre>
<p>That behaves the way you expected (note: It does not update <code>self.var</code>). You could use <code>dict.get</code> to shorten it to just:</p>
<pre><code>def __getitem__(self, key):
    return self.var.get(key, key)
</code></pre>
</div>
<span class="comment-copy">It looks like it's only applicable on subclasses of dict <code>If a subclass of dict defines a method __missing__</code></span>
<span class="comment-copy">You could just define a mixin class with the desired behavior for <code>__getitem__</code></span>
<span class="comment-copy"><code>__missing__</code> is not a general "what happens when <code>__getitem__</code> doesn't work" hook. It's specifically a thing that <code>dict.__getitem__</code> looks for, and implementing it only makes sense for <code>dict</code> subclasses.</span>
<span class="comment-copy">How do you think a hook for calling <code>__missing__</code> could be in calls to the method rather than with the method itself? So, yes, you'll have to implement it yourself in your class's custom <code>__getitem__</code>.</span>
