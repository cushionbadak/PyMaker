<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9490058/why-substring-slicing-index-out-of-range-works-in-python">Why substring slicing index out of range works in Python?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm working on a <a href="https://pypi.python.org/pypi/sparse_list" rel="nofollow noreferrer">sparse list implementation</a> and recently implemented assignment via a slice. This led me to discover some behaviour in Python's built-in <code>list</code> implementation that <a href="https://github.com/johnsyweb/python_sparse_list/pull/5#discussion_r87558205" rel="nofollow noreferrer">I find suprising</a>.</p>
<p>Given an empty <code>list</code> and an assignment via a slice:</p>
<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; l[100:] = ['foo']
</code></pre>
<p>I would have expected an <code>IndexError</code> from <code>list</code> here because the way this is implemented means that an item can't be retrieved from the specified index::</p>
<pre><code>&gt;&gt;&gt; l[100]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
<p><code>'foo'</code> cannot even be retrieved from the specified slice:</p>
<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; l[100:] = ['foo']
&gt;&gt;&gt; l[100:]
[]
</code></pre>
<p><code>l[100:] = ['foo']</code> <em>appends</em> to the <code>list</code> (that is, <code>l == ['foo']</code> after this assignment) and appears to have behaved this way since <a href="https://hg.python.org/cpython/annotate/fc6fcd7df4f7/Objects/listobject.c#l253" rel="nofollow noreferrer">the BDFL's initial version</a>. I can't find this functionality documented anywhere (*) but both CPython and PyPy behave this way.</p>
<p>Assigning by index raises an error:</p>
<pre><code>&gt;&gt;&gt; l[100] = 'bar'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
</code></pre>
<p>So why does assigning past the end of a <code>list</code> via a slice not raise an <code>IndexError</code> (or some other error, I guess)?</p>
<hr/>
<p>To clarify following the first two comments, <strong>this question is specifically about <em>assignment</em>, not retrieval</strong> (<em>cf.</em> <a href="https://stackoverflow.com/q/9490058/78845">Why substring slicing index out of range works in Python?</a>).</p>
<p>Giving into the temptation to guess and assigning <code>'foo'</code> to <code>l</code> <em>at index 0</em> when I had <em>explicitly</em> specified index 100 doesn't follow the usual Zen of Python.</p>
<p>Consider the case where the assignment happens far away from the initialisation and the index is a <em>variable</em>. The caller can no longer retrieve their data from the specified location.</p>
<p>Assigning to a slice <em>before</em> the end of a <code>list</code> behaves somewhat differently to the example above:</p>
<pre><code>&gt;&gt;&gt; l = [None, None, None, None]
&gt;&gt;&gt; l[3:] = ['bar']
&gt;&gt;&gt; l[3:]
['bar']
</code></pre>
<hr/>
<p>(*) This behaviour is <em>defined</em> in <a href="https://docs.python.org/2/library/stdtypes.html#index-22" rel="nofollow noreferrer">Note 4</a> of <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow noreferrer">5.6. Sequence Types</a> in the official documentation (thanks <a href="https://stackoverflow.com/q/40558529/78845#comment68356319_40558529">elethan</a>) but it's not <em>explained</em> why it would be considered desirable on assignment.</p>
<hr/>
<p><strong>Note:</strong> I understand how retrieval works and can see how it may be desirable to be consistent with this for assignment but am looking for a cited reason as to why assigning to a slice would behave in this way. <code>l[100:]</code> returning <code>[]</code> immediately after <code>l[100:] = ['foo']</code> but <code>l[3:]</code> returning <code>['bar']</code> after <code>l[3:] = ['bar']</code> is astonishing if you have no knowledge of <code>len(l)</code>, particularly if you're following Python's <a href="https://docs.python.org/2/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP idiom</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's see what is actually happening:</p>
<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; l[100:] = ['foo']
&gt;&gt;&gt; l[100:]
[]
&gt;&gt;&gt; l
['foo']
</code></pre>
<p>So the assignment was actually successful, and the item got placed into the list, as the first item.</p>
<p>Why this happens is because <code>100:</code> in indexing position is converted to a <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> object: <code>slice(100, None, None)</code>:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __getitem__(self, i):
...         return i
... 
&gt;&gt;&gt; Foo()[100:]
slice(100, None, None)
</code></pre>
<p>Now, the <code>slice</code> class has a method <code>indices</code> (I am not able to find its Python documentation online, though) that, when given a length of a sequence, will give <code>(start, stop, stride)</code> that is adjusted for the length of that sequence.</p>
<pre><code>&gt;&gt;&gt; slice(100, None, None).indices(0)
(0, 0, 1)
</code></pre>
<p>Thus when this slice is applied to a sequence of length 0, it behaves exactly like a slice <code>slice(0, 0, 1)</code> for slice <em>retrievals</em>, e.g. instead of <code>foo[100:]</code> throwing an error when <code>foo</code> is an empty sequence, it behaves as if <code>foo[0:0:1]</code> was requested - this will result on empty slice on retrieval.</p>
<p>Now the setter code should work correctly when <code>l[100:]</code> was used when l is a sequence that has <em>more than 100 elements</em>. To make it work there, the easiest is to <em>not</em> reinvent the wheel, and to just use the <code>indices</code> mechanism above. As a downside, it will now look a bit peculiar in edge cases, but slice assignments to slices that are "out of bounds" will be placed at the end of the current sequence instead. (However, it turns out that there is little code reuse in the CPython code; <a href="https://github.com/python/cpython/blob/cd120a70d39bb81d898b3ec88f08e79c64a01e79/Objects/listobject.c#L572" rel="nofollow noreferrer"><code>list_ass_slice</code></a> essentially duplicates all this index handling, <a href="https://docs.python.org/3/c-api/slice.html" rel="nofollow noreferrer">even though it would also be available via slice object C-API</a>).</p>
<p>Thus: <strong>if start index of a slice is greater than or equal to the length of a sequence, the resulting slice behaves as if it is a zero-width slice starting from the end of the the sequence</strong>. I.e.: if <code>a &gt;= len(l)</code>, <code>l[a:]</code> behaves like <code>l[len(l):len(l)]</code> on built-in types. This is true for each of assignment, retrieval and deletion.</p>
<p>The desirability of this is in that it doesn't need any <em>exceptions</em>. The <code>slice.indices</code> method doesn't need to handle any exceptions - for a sequence of length <code>l</code>, <code>slice.indices(l)</code> will always result in <code>(start, end, stride)</code> of indices that can be used for any of assignment, retrieval and deletion, and it is guaranteed that both <code>start</code> and <code>end</code> are <code>0 &lt;= v &lt;= len(l)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For indexing, an error <strong>must</strong> be raised if the given index is out-of-bounds, because there is no acceptable default value that could be returned. (It is not acceptable to return <code>None</code>, because <code>None</code> could be a valid element of the sequence).</p>
<p>By contrast, for slicing, raising an error is not necessary if any of the indexes are out-of-bounds, because it is acceptable to return an empty sequence as a default value. And it also desirable to do this, because it provides a consistent way refer to subsequences both between elements and beyond the ends of the sequence (thus allowing for insertions).</p>
<p>As stated in the <a href="http://docs.python.org/2/library/stdtypes.html#index-22" rel="nofollow noreferrer">Sequence Types Notes</a>, if the start or end value of a slice is greater than <code>len(seq)</code>, then <code>len(seq)</code> is used instead.</p>
<p>So given <code>a = [4, 5, 6]</code>, the expressions <code>a[3:]</code> and <code>a[100:]</code> both point to the empty subsequence following the last element in the list. However, after a slice assignment using these expressions, they may no longer refer to the same thing, since the length of the list may have been changed.</p>
<p>Thus, after the asignment <code>a[3:] = [7]</code>, the slice <code>a[3:]</code> will return <code>[7]</code>. But after the asignment <code>a[100:] = [8]</code>, the slice <code>a[100:]</code> will still return <code>[]</code>, because <code>len(a)</code> is still less than <code>100</code>. And given everything else stated above, this is exactly what one should expect if consistency between slice assignment and slice retrieval is to be maintained.</p>
</div>
<span class="comment-copy"><code>a = l[100:]</code> doesn't cause an a error, just <code>a == []</code>, It's a reasonable interpretation that given <code>100</code> is beyond the <code>end</code> it just returns the <code>end</code>. In fact all slices where <code>start &gt; stop</code> returns an empty list at <code>start</code> or <code>end</code> which ever is less.</span>
<span class="comment-copy">@Johnsyweb. An index refers to a specific element of a sequence, whereas a slice refers to a structural section of the sequence. In a list with three elements, the slice <code>[1:1]</code> refers to an empty section <i>between</i> elements. It does not refer to any specific, indexed element - and yet it is still possible to assign to it (effectively performing an insert operation).</span>
<span class="comment-copy">Note <b>4</b> of this section might help: <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow noreferrer">docs.python.org/2/library/…</a></span>
<span class="comment-copy">I agree that it is a little surprising, but it's consistent with "if the slice location is beyond the end of the list, extend the list". But <i>why</i> it's like this instead of (say) raising IndexError, I have no idea.</span>
<span class="comment-copy">The reasons for assignment to a slice not raising an exception are exactly the same as for accessing a slice without assignment.</span>
<span class="comment-copy">This perfectly explains <i>what</i> is happening. What I don't understand is <i>why</i> it's desirable behaviour to assign to the end of a list when a position beyond that has been specified.</span>
<span class="comment-copy">Thanks for the updated answer. Why are exceptions undesirable? Consistency between assignment, retrieval and deletion is certainly desirable.</span>
<span class="comment-copy">You raise some good points regarding default values and consistency.</span>
