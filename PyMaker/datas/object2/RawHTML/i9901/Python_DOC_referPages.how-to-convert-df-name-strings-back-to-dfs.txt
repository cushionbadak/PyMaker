<div class="post-text" itemprop="text">
<p>I have several dataframes, such as df1, df2 etc. then i made a list of the names of these df's like <code>lst = ['df1', 'df2']</code></p>
<p>Now, I want to use these df's in a function "my_func()" </p>
<pre><code>my_func(dataframe=df1) 

my_func(dataframe=df2)
</code></pre>
<p>...</p>
<p>How can i express the list of dataframes in a loop, so that i can call different df's in my_func? (the way below does't work, since I'm calling strings instead of df's...)</p>
<pre><code>for i in lst:
    my_func(dataframe=i)
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I would argue that storing the name of your data-sets as strings, and then try to pass the string as a argument is counter productive.</p>
<p>Instead, what I would do is create a dictionary with all your data-sets as values to string keys, and pass the dictionary objects into your function.</p>
<pre><code>my_frames = {'df1' : [1,2,3], 'df2' : [4,5,6]}

def my_func(dataframe):
    ... do work on dataframe ...

for df_name, df_obj in my_frames.items():
    print('Doing work on:', df_name)
    my_func(df_obj)
</code></pre>
<p>Another nifty thing with dictionaries and functions is that you can expand the dictionary as named parameters right off the bat.</p>
<pre><code>my_frames = {'temperature' : 25.5, 'wind' : 4.6}

def weather(temperature=None, wind=None):
    print('The temp is:', temperature, 'and the wind speed is:', wind)

weather(**my_frames)
</code></pre>
<p>But that's just a little side note.</p>
</div>
<div class="post-text" itemprop="text">
<p>So i figured out...Just need to use eval():</p>
<pre><code>for i in lst:
    my_func(dataframe=eval(i))
</code></pre>
</div>
<span class="comment-copy">You should look into <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionaries</a> instead. Where you'd do <code>data_frames = {'df1' : [], 'df2' : []}</code> and you could access and pass them straight into functions. You could even do <code>for df in data_frames.keys(): my_func(dataframe=my_dataframes[df])</code></span>
<span class="comment-copy">Indeed, no need to flood your global environment with many dfs. Contain all in one indexed object like dictionary.</span>
<span class="comment-copy">But in this case, i have all my dataframes ready made, and i don't want to do extra work to convert them...</span>
<span class="comment-copy">@GeorgeLiu You don't really need to convert them, dictionaries is more a place-holder/storage utility. You can add the lists as is by doing <code>my_frames = {'df1' : df1, 'df2' : df2}</code>. And also it would be wise to refactor your code so they end up in the dictionary right way.. Again no need to convert as much as store them differently. The end result can be the same and the build step can be the same, it's the "where do i put them" that's different perhaps.</span>
<span class="comment-copy">i see. so basically, you're saying a df can be a value in a dict, right?</span>
<span class="comment-copy">@GeorgeLiu Absolutely, that's the beauty of dictionaries.</span>
<span class="comment-copy">great, thanks @Torxed!</span>
<span class="comment-copy">Beware the shitstorm of comments because you used <code>eval()</code> without even describing the hazards of it. Don't do it, unless you can specify why you need to. <a href="http://stackoverflow.com/questions/1832940/is-using-eval-in-python-a-bad-practice">Is using eval in Python a bad practice?</a></span>
