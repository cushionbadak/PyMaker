<div class="post-text" itemprop="text">
<p>I've been reading about descriptors in the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><em>Descriptor HowTo Guide</em></a>, and I'm confused by this sentence:</p>
<blockquote>
<p>If an instanceâ€™s dictionary has an entry with the same name as a data descriptor, the data descriptor takes precedence.</p>
</blockquote>
<p>How can the dictionary contain two items (a normal entry and a data descriptor) with the same name?  Or are attributes that are descriptors not stored in <code>__dict__</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The data descriptor lives in the <em>class</em> namespace, while the instance attribute lives in the <em>instance</em> namespace (so <code>instance.__dict__</code>). These are two separate dictionaries, so there is no conflict here.  </p>
<p>So for any given attribute lookup for the name <code>foo</code> on an instance <code>bar</code>, Python also looks at it's class (<code>type(bar)</code>, named <code>C</code> below), in the following order:</p>
<ol>
<li><p><code>C.foo</code> is looked up. If it is a <em>data descriptor</em>, this is where the lookup ends. <code>C.foo.__get__(bar, C)</code> is returned. Otherwise, Python will store this result for step 3 (no point in looking this up twice).</p></li>
<li><p>If <code>C.foo</code> did not exist or is a regular attribute, then Python looks for <code>bar.__dict__['foo']</code>. If it exists, it is returned. Note that this part is never reached if <code>C.foo</code> is a data descriptor!</p></li>
<li><p>If <code>bar.__dict__['foo']</code> does not exist, but <code>C.foo</code> exists, then <code>C.foo</code> is used. If <code>C.foo</code> is a (non-data) descriptor, thet <code>C.foo.__get__(bar, C)</code> is returned.</p></li>
</ol>
<p>(Note that <code>C.foo</code> is really <code>C.__dict__['foo']</code>, but for simplicity sake I've ignored descriptor access on classes in the above).</p>
<p>Perhaps a concrete example helps; here are two descriptors, one is a data descriptor (there is a <code>__set__</code> method), and the other is <em>not</em> a data descriptor:</p>
<pre><code>&gt;&gt;&gt; class DataDesc(object):
...     def __get__(self, inst, type_):
...         print('Accessed the data descriptor')
...         return 'datadesc value'
...     def __set__(self, inst, value):
...         pass   # just here to make this a data descriptor
...
&gt;&gt;&gt; class OtherDesc(object):
...     def __get__(self, inst, type_):
...         print('Accessed the other, non-data descriptor')
...         return 'otherdesc value'
...
&gt;&gt;&gt; class C(object):
...     def __init__(self):
...         # set two instance attributes, direct access to not
...         # trigger descriptors
...         self.__dict__.update({
...             'datadesc': 'instance value for datadesc',
...             'otherdesc': 'instance value for otherdesc',
...         })
...     datadesc = DataDesc()
...     otherdesc = OtherDesc()
...
&gt;&gt;&gt; bar = C()
&gt;&gt;&gt; bar.otherdesc  # non-data descriptor, the instance wins
'instance value for otherdesc'
&gt;&gt;&gt; bar.datadesc  # data descriptor, the descriptor wins
Accessed the data descriptor
'datadesc value'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider following code snippet:</p>
<pre><code>class X:
    @property
    def x(self):
        return 2

x1 = X()
x1.__dict__['x'] = 1
print(x1.x)
</code></pre>
<p>This code prints 2, because data descriptor (defined on class) takes precedence over instance dictionary.</p>
</div>
<span class="comment-copy">OK, so data descriptors are in the class dictionary. The "Descriptor HowTo Guide" seems to suggest the instance dictionary is searched before the class dictionary though:  "For instance, a.x has a lookup chain starting with a.__dict__['x'], then type(a).__dict__['x'], and continuing through the base classes of type(a) excluding metaclasses. "</span>
<span class="comment-copy">@SirVisto the howto is simplifying there. If you took data descriptors out of the picture that order is perfectly correct. To introduce data descriptors at that point would needlessly complicate the story being told.</span>
<span class="comment-copy">Actually, the article does clarify this later on:  "The implementation works through a precedence chain that gives data descriptors priority over instance variables, instance variables priority over non-data descriptors, and assigns lowest priority to __getattr__() if provided."</span>
<span class="comment-copy">What is the rationale for this? I would intuitively expect an instance attribute to shadow a class attribute with the same name...</span>
<span class="comment-copy">@SirVisto: this enables the data descriptor to fully control access (so including setting and deleting). If the instance dict got precedence, then <code>del inst.foo</code> would <i>sometimes</i> reach the instance, <i>sometimes</i> the data descriptor. For setting, what should happen when you do <code>inst.foo = 'value'</code>, should it matter if there is an instance attribute already? Who is then responsible for handling the setting? By consistently <i>always</i> making the data descriptor responsible you resolve all those questions clearly and consistently.</span>
<span class="comment-copy">@SirVisto: another motivation is the ability to make sure that some class attributes can't be accidentally overridden in the instance. The <code>__class__</code> attribute for example, should never be set on the instance, because then you can no longer find the corresponding class, so <code>__class__</code> is a data descriptor on the class.</span>
