<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/24085680/why-do-backslashes-appear-twice">Why do backslashes appear twice?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I used os.join.path() to load image in a folder. But I found the function cannot give accurate path when it is used in defining another function in some cases. For example: </p>
<pre><code>def Myfuncion(something)
    desiredPath = os.path.join('myPath','apple.jpeg')
    #desiredPath = os.path.normpath(os.path.join('myPath','apple.jpeg')) 

    print desiredPath
    return
</code></pre>
<p>When I implement the function, the printed result of the path is:</p>
<pre><code> myPath\apple.jpeg
</code></pre>
<p>It is illegal for image loading. But os.path.join() works well in Pythonconsole.</p>
<p>How to make the path generated in such function definition have double backslashes? </p>
<p>Also, it is noted os.path.normpath also cannot work well sometimes. For example:</p>
<pre><code> os.path.normpath('myPath\apple')
</code></pre>
<p>It should give the result:</p>
<pre><code> myPath\\apple
</code></pre>
<p>But instead, it results in:</p>
<pre><code> 'myPath\x07pple'
</code></pre>
<p>How come??</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\a</code> is equivalent to <code>\x07</code>. (See escape sequence part in <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">String and bytes literals</a>.)</p>
<pre><code>&gt;&gt;&gt; '\a'
'\x07'
</code></pre>
<p>You need to escape <code>\</code> to mean backslash literally:   </p>
<pre><code>&gt;&gt;&gt; '\\a'
'\\a'
&gt;&gt;&gt; print('\\a')
\a
</code></pre>
<p>or, use raw string literal:</p>
<pre><code>&gt;&gt;&gt; r'\a'
'\\a'
&gt;&gt;&gt; print(r'\a')
\a
</code></pre>
</div>
<span class="comment-copy">You are aware that a string defined with double backslashes (that's called escaped) will show with only one backslash when printed? And that <code>'\x07'</code> is equivalent to <code>'\a'</code>?</span>
<span class="comment-copy">Yes! I use print only for debugging, since I found the image at the path is not loaded properly. I used Image.open() to load the image, and then saved it to another folder</span>
<span class="comment-copy">Please do independent research on how backslashes function in strings.</span>
<span class="comment-copy">@TigerhawkT3 I got it. Thank you!</span>
<span class="comment-copy">But the path with single backlishes is illegal for python to load an image.</span>
<span class="comment-copy">@jingweimo, My point is that <code>os.path.join('myPath','apple.jpeg') == 'myPath\\apple.jpeg'</code> (in other word, <code>os.path.join('myPath','apple.jpeg') == 'myPath\apple.jpeg'</code></span>
<span class="comment-copy">@jingweimo path with single backslash is legal but it makes problem when there are special chars like <code>\n</code>, <code>\t</code>, <code>\a</code>, <code>\u</code>, etc. So it is safer to use  \\ or / (even on Windows) or <code>os.path.join()</code></span>
<span class="comment-copy">@jingweimo, Please check escape sequence part of documentation. I provided the link to the documentation in the answer.</span>
<span class="comment-copy">Thanks! How to deal with that case of special chars?</span>
