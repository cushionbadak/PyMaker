<div class="post-text" itemprop="text">
<pre><code>def min_diff(arry_):
   max_ =0
   temp_ =0
   for i in arry_:
     nonlocal max_
     nonlocal temp_
     if i &gt; max_:
        nonlocal max_
        nonlocal temp_
        temp_ = max_
        max_ =i
   return max_-temp_
</code></pre>
<p>I want to use <code>max_</code> and <code>temp_</code> outside the loop but I am getting an error</p>
<pre><code>SyntaxError: no binding for nonlocal 'max_' found
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>nonlocal</code> can only applied in functions that have a <em>nested</em> scope. You only get a nested scope when you define your function inside of another function.</p>
<p>Python doesn't have block scopes; the <code>for</code> loop doesn't create a new scope, so you don't need to use <code>nonlocal</code> in a loop. Your variables are available throughout the rest of the function. Just drop the <code>nonlocal</code> statements altogether:</p>
<pre><code>def min_diff(arry_):
    max_ = 0
    temp_ = 0
    for i in arry_:
        if i &gt; max_:
            temp_ = max_
            max_ = i
    return max_ - temp_
</code></pre>
<p>In Python, only functions, class definitions and comprehensions (list, set, and dict comprehensions as well as generator expressions) get their own scope, and only functions can act as a parent scope for closures (nonlocal variables).</p>
<p>There is also a bug in your code; if you pass in a list where the first value is also the maximum value in the list, <code>temp_</code> is set to <code>0</code> and then never changes. You won't ever find the second-highest value in that case, because only for the very first <code>i</code> will <code>if i &gt; max_:</code> be true. You'd also need to test if <code>i</code> is greater than <code>temp_</code> in that case:</p>
<pre><code>def min_diff(arry_):
    max_ = 0
    temp_ = 0
    for i in arry_:
        if i &gt; max_:
            temp_ = max_
            max_ = i
        elif i &gt; temp_:
            temp_ = i
    return max_ - temp_
</code></pre>
<p>As a side note: you don't need to use trailing underscores in your local variables. Of all the local names used, only <code>max_</code> would potentially shadow the built-in <code>max()</code> function, but since you don't use that function at all, using <code>max_</code> instead of <code>max</code> in your function is not actually a requirement. I'd personally drop all the trailing <code>_</code> underscores from all the names in the function. I'd also use different names; perhaps <code>highest</code> and <code>secondhighest</code>.</p>
<p>Last but not least, you could just use the <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer"><code>heapq.nlargest()</code> function</a> to get those two largest values, efficiently:</p>
<pre><code>from heapq import nlargest

def min_diff(values):
    highest, secondhighest = nlargest(2, values)
    return highest - secondhighest
</code></pre>
<p>You may want to add some length checks there; if <code>len(values) &lt; 2</code> is true, what should happen instead?</p>
</div>
<span class="comment-copy">thanks @Martin Pieters</span>
<span class="comment-copy">but temp is not used locally in if after removing non local . so i am not getting the desired result</span>
<span class="comment-copy">@ShailabSingh: you may have other errors in your code, perhaps, but <code>nonlocal</code> is not needed. You didn't give us a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, and without sample input, expected output and actual output I can't help any further.</span>
<span class="comment-copy">@ShailabSingh: presumably you want to find the difference between the two highest numbers?</span>
<span class="comment-copy">@ShailabSingh: for <code>[5, 10, 9, 16]</code>, the function produces <code>6</code>, the difference between the two highest numbers 16 and 10. If that isn't what you wanted, you'll have to explain (<i>in your question</i>) what you expected the function to do instead.</span>
