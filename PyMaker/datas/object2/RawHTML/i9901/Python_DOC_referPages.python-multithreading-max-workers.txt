<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">documentation</a> of <code>ThreadPoolExecutor</code></p>
<blockquote>
<p>If <code>max_workers</code> is <code>None</code> or not given, it will default to the number of processors on the machine.</p>
</blockquote>
<p>If I don't set it a value like this</p>
<pre><code>ThreadPoolExecutor(max_workers=None)
</code></pre>
<p>is it bad for performance in case that my value is very low (2) ?
Will python already allocate all the CPU processes for None value vs allocate only 2 for value with a number?</p>
</div>
<div class="post-text" itemprop="text">
<p>To begin with, you seem to be quoting the wrong part of the documentation in your link, namely the one for processes, not threads. The <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">one for <code>concurrent.futures.ThreadPoolExecutor</code></a> states:</p>
<blockquote>
<p>Changed in version 3.5: If <code>max_workers</code> is <code>None</code> or not given, it will default to the number of processors on the machine, multiplied by 5, assuming that ThreadPoolExecutor is often used to overlap I/O instead of CPU work and the number of workers should be higher than the number of workers for ProcessPoolExecutor.</p>
</blockquote>
<hr/>
<p>Since you're using threads, not processes, the assumption is that your application is IO bound, not CPU bound, and that you're using this for <a href="https://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference">concurrency, not parallelism</a>. The more threads you use, the higher concurrency you'll achieve (up to a point), but the less CPU cycles you'll get (as there will be context switches). You have to instrument your application under typical workloads to see what works best for you. There is no universally optimal solution for this.</p>
</div>
<span class="comment-copy">I am using python 2.7 - what would it be in this case? what I meant to ask, if is matters if I put limit or not, in case that I want the max workers I need (e.g. I call 4 methods) in any case</span>
<span class="comment-copy">@Dejell First, note that you linked to Python 3.5 docs. In any case, my point is that you need to try different values to see what works for you. Neither you, nor the authors of the Python standard library, can guess in advance what will work best for your case. If performance is important to you, I wouldn't rely on the default implied number.</span>
<span class="comment-copy">Thanks. just what is this "default implied number" ? and maybe I am missing something - would python "allocate" memory for that default number, or only one I write execute.submit() ?</span>
