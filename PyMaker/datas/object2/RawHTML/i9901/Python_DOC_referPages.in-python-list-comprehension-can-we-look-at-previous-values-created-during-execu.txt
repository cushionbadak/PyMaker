<div class="post-text" itemprop="text">
<p>I have a dictionary and as I am creating it during list comprehension can I access the previous values created?</p>
<p>Example:</p>
<pre><code>h = {i:1+h[i-1] for i in range(1,100))}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit: I read <code>i:i + h[i-1]</code> instead of <code>i:1 + h[i-1]</code>.</strong> The latter is always equal to <code>i:i</code> except in the first case, when it is <code>1+None</code></p>
<p>This does what you want in a dictionary comprehension. Requires Python 3.2 or higher:</p>
<pre><code>from itertools import accumulate 
h = {i:v for i,v in enumerate(accumulate(range(100)))}
</code></pre>
<p>otherwise use this</p>
<pre><code>def accumulate(r):
    next_value = 0
    for i in r:
        next_value = next_value + i
        yield next_value
</code></pre>
</div>
<span class="comment-copy">No. And if you need that, a list comprehension is not the right tool as, per definition, it means the element are handled independently. Maybe have a look at itertools functions such as <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>accumulate()</code></a>.</span>
<span class="comment-copy">You call it "list comprehension" but you build dictionary. Unfortunately you cannot use it so. Since the variable h will point to the new dict object only when it has been created, you cannot access it before. You can do it with a for loop.</span>
<span class="comment-copy">What Python version?</span>
<span class="comment-copy">It's a dict comprehension. A list comprehension applies only to building lists.  I'd imagine a more general term of comprehension would be applicable.</span>
<span class="comment-copy">@277roshan No, it is called a dictionary comprehension. See for example, the <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">PEP</a>.</span>
<span class="comment-copy">Well, really the first case is undefined. <code>None</code> is reasonable, but it could be anything.</span>
