<div class="post-text" itemprop="text">
<p>For debugging my python code, I use the <code>ipdb</code> library, and use the <code>set_trace()</code> command to place a break point. Once the code reaches there, I get an interactive shell with <code>ipdb&gt;</code> prompt, that I can explore local variables with tab autocompletion.</p>
<p>In IPython (Jupyter) notebook, however, <code>ipdb.set_trace()</code> does not work. As suggested by this post:
<a href="https://stackoverflow.com/questions/35613249/using-ipdb-to-debug-python-code-in-one-cell-jupyter-or-ipython">using ipdb to debug python code in one cell (jupyter or Ipython)</a></p>
<p>I use the following alternative for interactive debugging:</p>
<pre><code>from IPython.core.debugger import Tracer
Tracer()() #this one triggers the debugger
</code></pre>
<p>This gives me the <code>ipdb&gt;</code> prompt, but the tab autocomplete is not available. Is there anyway to enable auto-complete for interactive debugging using ipython notebook? This is extremely useful, specially when you have a lot of variables with long names.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.7 you can use <a href="https://docs.python.org/3/library/functions.html#breakpoint" rel="nofollow noreferrer">breakpoint()</a> function</p>
<blockquote>
<p>This function drops you into the debugger at the call site.
  Specifically, it calls sys.breakpointhook(), passing args and kws
  straight through. By default, sys.breakpointhook() calls
  pdb.set_trace() expecting no arguments. In this case, it is purely a
  convenience function so you donâ€™t have to explicitly import pdb or
  type as much code to enter the debugger. However, sys.breakpointhook()
  can be set to some other function and breakpoint() will automatically
  call that, allowing you to drop into the debugger of choice.</p>
</blockquote>
</div>
<span class="comment-copy">No, unfortunately the way those input prompts work does not allow tab completion.</span>
