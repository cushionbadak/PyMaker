<div class="post-text" itemprop="text">
<p>In Django, you create models and can optionally specify a foreign key on a field</p>
<pre><code>class Man:
      ...

class Dog:
      ...
      owner = models.ForeignKey(Man, on_delete=models.SET_NULL)
</code></pre>
<p>You can then query each <code>Dog</code> for its respective owner or get all dogs for a <code>Man</code></p>
<pre><code>owner = some_dog.owner

all_dogs = some_man.dog_set.all()
</code></pre>
<p>If you want to not create a backward relation as specified by <a href="https://docs.djangoproject.com/en/1.10/ref/models/fields/#django.db.models.ForeignKey.related_name" rel="nofollow noreferrer">the docs</a>, you can do</p>
<pre><code>class Man:
      ...

class Dog:
      ...
      owner = models.ForeignKey(Man, on_delete=models.SET_NULL, related_name='+')
</code></pre>
<p>Now you no longer have access to <code>all_dogs = some_man.dog_set.all()</code>.</p>
<p>However, does this additional "building" of a backward relation add overhead?<br/>
If I just never ever used <code>all_dogs = some_man.dog_set.all()</code> would it matter whether or not<br/>
I had specified <code>related_name='+'</code> in <code>Dog</code>? Would it slow things down potentially?</p>
<p>And is this functionality purely implemented in application side Django, or would <code>related_name='+'</code> also change the database schema itself?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>However, does this additional "building" of a backward relation add overhead?</p>
</blockquote>
<p>No</p>
<blockquote>
<p>If I just never ever used all_dogs = some_man.dog_set.all() would it matter whether or not I had specified related_name='+' in Dog? Would it slow things down potentially?</p>
</blockquote>
<p>No, and no.</p>
<blockquote>
<p>And is this functionality purely implemented in application side Django, or would related_name='+' also change the database schema itself?</p>
</blockquote>
<p>It's implemented with Python <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptors</a>.  In the case of <code>ForeignKey</code>, that's a <a href="https://github.com/django/django/blob/3c447b108ac70757001171f7a4791f493880bf5b/django/db/models/fields/related_descriptors.py#L468" rel="nofollow noreferrer"><code>ReverseManyToOneDescriptor</code></a>.
There is no change in the database schema, and the presence or absence of a related name does not generate a migration.  </p>
<p>If you haven't disabled the relation, you should actually see the descriptor objects there as attributes on the model classes.  Something like this:</p>
<pre><code>&gt;&gt;&gt; Dog.owner
&lt;django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor at 0x105db25d0&gt;
&gt;&gt;&gt; Man.dog_set
&lt;django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor at 0x105db27d0&gt;
</code></pre>
<p>These are the objects which make Django's ORM magic work.  </p>
</div>
