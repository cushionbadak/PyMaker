<div class="post-text" itemprop="text">
<p>Within <code>n = range(1, n+1)</code> I have to randomly generate a list of <code>n * p</code> unique integers.</p>
<p>For instance if <code>n = 10</code> and <code>p = 0.3</code> then possible results can be:</p>
<pre><code>[2, 6, 9]
[1, 5, 7]
[3, 4, 8]
[3, 5, 6]
etc
</code></pre>
<p>The following Python code does the job perfectly:</p>
<pre><code>import random

n = 250000
p = 0.8
np = int(n * p)

result = []
for i in range(np):
    attempt = random.randint(1, n)
    if attempt not in result:
        result.append(attempt)
</code></pre>
<p>However, because it's Python, it can take long (like, more than one minute) for <code>np &gt; 200000</code>.</p>
<p>Can you see a more efficient version of the above solution, using <code>NumPy</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with this:</p>
<pre><code>result = random.sample(range(1,n+1),p*n)
</code></pre>
<p>Link to the <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">documentation of <code>random.sample</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>making <code>result</code> a set instead of a list will keep you from having to run through every item in the list at each iteration to check if the new item you are about to append already exists. Small improvement, but you should see a difference in performance.</p>
</div>
<span class="comment-copy">Create a dense representation of your range (np.arange(1, n+1)) and use np.random.choice() without replacement, or shuffle and take the first n values. These approaches are kind of a time-memory-tradeoff.</span>
<span class="comment-copy">@sascha, what is the point of putting answers in the comments?</span>
<span class="comment-copy">@user2699 Simple questions, simple answers. No time to add a complete high-quality-answer but ambitious enough not to give some rushed low-quality answer (e.g. one line of code without assumptions, benchmarks and co.). Therefore outlining an approach to help.</span>
<span class="comment-copy">I suspect it is slow because of the <code>in</code> on a list and the repeated calls to the random code, not general Python. @quantummind provides a cleaner, faster alternative.</span>
