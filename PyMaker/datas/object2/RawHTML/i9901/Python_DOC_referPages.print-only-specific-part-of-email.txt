<div class="post-text" itemprop="text">
<p>I have this code (below) that shows me all emails in my email account. It also shows the whole email, including all the metadata (which I dont want). Is there a way to just print the To, From, Subject and Message only? This is in Python as well.  Thanks.</p>
<p>Code:</p>
<pre><code>import getpass, imaplib
import os

email = raw_input('Email: ')
password = getpass.getpass()
M = imaplib.IMAP4_SSL("imap.gmail.com", 993)
print('Logging in as ' + email + '...')
M.login(email, password)
M.select()
typ, data = M.search(None, 'ALL')
for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    print ('Message %s\n%s\n' % (num, data[0][1]))
M.close()
M.logout()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>email.parser.Parser()</code> from standard module to parse mail and get headers </p>
<pre><code>from __future__ import print_function
import imaplib
import getpass
import os
from email.parser import Parser

email = raw_input('Email: ')
password = getpass.getpass()

print('Logging in as', email, '...')

M = imaplib.IMAP4_SSL("imap.gmail.com", 993)
M.login(email, password)

M.select()
typ, data = M.search(None, 'ALL')

for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    #print ('Message %s\n%s\n' % (num, data[0][1]))

    header = Parser().parsestr(data[0][1])
    print('From:', header['From'])
    print('To:', header['To'])
    print('Subject:', header['Subject'])

    print('Body:')
    for part in header.get_payload():
        print(part.as_string()[:150], '.....')

    #break # to test only first message

M.close()
M.logout()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For anyone else who wants to know, this is the working code:</p>
<pre><code>from __future__ import print_function
import imaplib
import getpass
import os
from email.parser import Parser

email = raw_input('Email: ')
password = getpass.getpass()

print('Logging in as', email, '...\n')

M = imaplib.IMAP4_SSL("imap.gmail.com", 993)
M.login(email, password)

M.select()
typ, data = M.search(None, 'ALL')

for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
##    To view whole email, uncomment next line
##    print ('Message %s\n%s\n' % (num, data[0][1]))

    header = Parser().parsestr(data[0][1])
    print('To:', header['Delivered-To'])
    print('From:', header['From'])
    print('Subject:', header['Subject'])

    print('Body:', header.get_payload(), '\n')

M.close()
M.logout()
</code></pre>
<p>Hope this helps :) Big thanks to @furas!</p>
</div>
<span class="comment-copy">Use Regular Expressions such as /To.*$/ and so on.</span>
<span class="comment-copy">standard module <code>email.parser</code> - see second example: <a href="https://docs.python.org/3/library/email-examples.html" rel="nofollow noreferrer">docs.python.org/3/library/email-examples.html</a></span>
<span class="comment-copy">@furas All I got back was 'None'.</span>
<span class="comment-copy">It strange, it works for me with GMail</span>
<span class="comment-copy">That works almost perfectly. The 'Body' didn't work. I got this back for it:  Traceback (most recent call last):   File "C:\Users\Ian\Desktop\reademail.py", line 62, in &lt;module&gt;     print(part.as_string()[:150], '.....') AttributeError: 'str' object has no attribute 'as_string'</span>
<span class="comment-copy">so try without <code>as_string()</code></span>
<span class="comment-copy">ok, now it's printing the body one character per line with '.....' after it. For example: T..... e..... s..... t..... with each one on a new line.</span>
<span class="comment-copy">so create own <code>print()</code> and play with arguments, etc. Your Python works different than mine so find documetation for you version. It is standard module so you can find it in official documentation on python.org</span>
<span class="comment-copy">Ok, got it. I'll post the entire code as the answer.</span>
<span class="comment-copy">Please, <a href="http://stackoverflow.com/help/someone-answers">accept the answer</a> instead of creating your own answer. Accepting is how questions are closed, and how you and the answerer get reputation. See <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">this page</a> on more details on how accepting works.</span>
<span class="comment-copy">@BurhanKhalid I would have but the code provided by furas didn't work for me. The one I posted did so therefore that's the answer.</span>
