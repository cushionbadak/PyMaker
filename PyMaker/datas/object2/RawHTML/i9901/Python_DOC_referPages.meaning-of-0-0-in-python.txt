<div class="post-text" itemprop="text">
<p>I'm looking at a 3rd party API and they have the following piece of code:</p>
<pre><code>def array_u16 (n): return array('H', '\0\0'*n)
</code></pre>
<p>I understand that <code>'\0'</code> means <code>NULL</code>, does <code>'\0\0'</code> have any special meaning or does it just mean 2 <code>NULL</code>s?</p>
</div>
<div class="post-text" itemprop="text">
<p>It just assures that two bytes are provided <code>n</code> times so the size of the array will be equal to <code>n</code>. If <code>'\0'</code> was provided, the resulting array would have a <code>size == n//2</code> (<a href="https://docs.python.org/3.6/library/array.html#module-array" rel="nofollow noreferrer">due to the type-code <code>'H'</code> requiring <code>2</code> bytes</a>); that is obviously counter intuitive:</p>
<pre><code>&gt;&gt;&gt; array('H', '\0' * 10)    # 5 elements
array('H', [0, 0, 0, 0, 0])
&gt;&gt;&gt; array('H', '\0\0' * 10)  # 10 elements
array('H', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</code></pre>
<p>Note that, in Python <code>3</code>, if you need the <em>same</em> snippet to work you <strong>must</strong> <a href="https://docs.python.org/3/library/array.html#array.array" rel="nofollow noreferrer">provide a <em><code>bytes</code> object</em></a> as the <code>initializer</code> argument to <code>array</code>:</p>
<pre><code>&gt;&gt;&gt; array('H', b'\0\0' * 10)   
array('H', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</code></pre>
<p>As you also can't provide a <code>u''</code> string in Python 2. Other than that, the behavior stays exactly the same.</p>
<p>So <code>'\0\0'</code> is for convenience reasons, nothing more. No semantics are attached to <code>'\0\0'</code>.</p>
<p><sub> No semantics are really attached to <code>'\0'</code> either (as they do in, for example, <code>C</code>) <code>'\0'</code> <em>is just another string in Python</em>.</sub></p>
<hr/>
<p>As a further example for this behavior, take the initialization of an array with a type-code of <code>'I'</code> for unsigned ints  with a minimum of <code>2</code> bytes but <code>4</code> on <code>64bit</code> builds of Python. </p>
<p>In the spirit of the snippet you've provided, you'd initialize the array by doing something like this:</p>
<pre><code>&gt;&gt;&gt; array('I', b'\0\0\0\0' * 10)
array('I', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</code></pre>
<p>Yes, four times the <code>b'\0'</code> string to get <code>10</code> elements.</p>
<hr/>
<p>As a <em>final</em> note -- <em>the following timings are performed on Python 3 but 2 is the same</em> -- you might be wondering why he used <code>'\0\0\' * n</code> instead of the more intuitive-looking <code>[0] * n</code> to initialize the array. Well, it's quite faster:</p>
<pre><code>n = 10000
%timeit array('I', [0]*n)
1000 loops, best of 3: 212 µs per loop

%timeit array('I', b'\0\0\0\0'* n)
100000 loops, best of 3: 6.36 µs per loop
</code></pre>
<p>Of course, you can do better (for type-codes other than <code>'b'</code>) by feeding a <code>bytearray</code> to <code>array</code>. One way to initialize <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow noreferrer">a <code>bytearray</code> is by providing an <code>int</code> as the number of items to initialize</a> with null bytes:</p>
<pre><code>%timeit array('I', bytearray(n))
1000000 loops, best of 3: 1.72 µs per loop
</code></pre>
<p>but, if I remember correctly, the <code>bytearray(int)</code> way of initializing a bytearray might get deprecated in <code>3.7+</code> :-).</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3.5/library/array.html" rel="nofollow noreferrer"><code>array</code></a> class accepts a format character (called a typecode) followed by an initializer. <code>H</code> means an unsigned short, with a minimum size of 2 bytes so, <code>'\0\0'</code> satisfies that. The <code>* n</code> part is to initialize the entire array to NULL bytes.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like this function returns an array made of 16-bits; thus <code>\0\0</code> probably stands for creating two bytes (which is 16 bits) of data. In other words, it returns n words of two bytes.</p>
</div>
