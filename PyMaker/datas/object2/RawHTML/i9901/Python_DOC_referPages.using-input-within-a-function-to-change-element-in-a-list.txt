<div class="post-text" itemprop="text">
<p>I'm struggling to make a tic tac toe game in python and didn't want to cheat, so I'm asking a very specific question here instead. My board is a list : </p>
<pre><code>lst = [1,2,3,4,5,6,7,8,9]
</code></pre>
<p>which I break up with the following function to make it look like a grid: </p>
<pre><code>def board():
    print (lst[:3])
    print (lst[3:6])
    print (lst[6:])
</code></pre>
<p>so that calling the function prints:</p>
<pre><code>[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
</code></pre>
<p>I then tried to take an input and use it to replace a number in the list with a string 'x': </p>
<pre><code> def move():
     move1=(input('Player 1: Type a number!'))
     for x in lst:
         if move1 == x:
            lst[x-1] = 'x'
            board()
</code></pre>
<p>This prints the string and provides a box for the input, but doesn't replace the number in the list with 'x'. I realize there must be something wrong with the function, so if anyone has the patience to explain it I would be very grateful.</p>
<p>Ok so now I want to turn the numbers in the board into strings because it looks better: 
    ['1', '2', '3']
    ['4', '5', '6']
    ['7', '8', '9']</p>
<p>And I came up with the following mess of code because I realised that if the for loop came across a string like 'x' and tried to turn it into an integer it might display an error: </p>
<pre><code>def move2():
    move2=int(input('Player 2: Type a number!'))
    for x in lst:
        if x != 'x' and x != 'o' and move2 == int(x):
            lst[move2-1] = 'o'
            board()
            move()
        elif x != 'x' and x != 'o' and move1 != int(x):
                print('Not that number!')
                board()
                move2()
</code></pre>
<p>Before the extra conditions (if x!= 'x', etc) it marked the 'x's but then displayed an error when it was time for the second player to input a number, (int is not callable), but now it doesn't do anything. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code> def move():
     move1=(input('Player 1: Type a number!'))
     if move1.isdigit(): #check if the input is numeric
        move1 = int(move1)
        for x in lst:
            if move1 == x: #now compares two ints, not str &amp; int
               lst[x-1] = 'x'
               board()
</code></pre>
<p>Which you could clean up:</p>
<pre><code> def move():
     move1=(input('Player 1: Type a number!'))
     if move1.isdigit() and int(move1) &lt; 10:
               lst[int(move1)-1] = 'x'
               board()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is because the items in your list are ints not strings and user input is a string. So you could do:</p>
<pre><code>try:
   move1=int(input('Player 1: Type a number!'))
catch ValueError:
   print("Error input is not a number!")
</code></pre>
<p><strong>EDIT:</strong> You could optionally use an if with move1.isDigit() instead of try/catch</p>
</div>
<span class="comment-copy">Where is <code>lst</code> defined in your function?</span>
<span class="comment-copy">You could replace that entire for loop by <code>lst[int(move1)-1)='x'</code></span>
<span class="comment-copy">You should cast your input to integer <code>move1=int(input('Player 1: Type a number!'))</code>. Because <code>if move1 == x:</code> is actuely <code>if 1 == '1':</code> which is False</span>
<span class="comment-copy">@EvgenyKuzmovich: This assumes it's Py3 code, if it's Py2 <code>input</code> <code>eval</code>s, so it would be <code>int</code> (if they enter an integer). Of course, if it's Py2 code, they should still follow your advice, just using <code>raw_input</code> instead of <code>input</code>, because allowing the user to enter <code>__import__('shutil').rmtree('/')</code> or the like is probably a bad idea. :-)</span>
<span class="comment-copy">leaf I thought that if lst was defined globally I could use it in the function. John Coleman that's very elegant(I'm guessing if the input is not in range python will display an error?). Evgeny thanks for the insight, I didn't even realize the input is a string. Thanks a lot guys!</span>
<span class="comment-copy"><code>try</code>/<code>catch</code> would generally be considered more Pythonic. You need the <code>int</code> conversion anyway (so it's simpler to just do it and see if it works), and Python generally encourages <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">the <code>EAFP</code> pattern</a>; the success case, being expected, can be assumed, with exceptions used for handling failures, rather than preceding every operation with a test. EAFP is also a more <i>correct</i> test: <code>' 123 '.isdigit()</code> (with leading and trailing space) is <code>False</code>, but <code>int</code>'s actual constructor happily ignores leading and trailing whitespace.</span>
<span class="comment-copy">good call, I didn't know about the .isDigit() function.</span>
<span class="comment-copy">Thanks ShadowRanger, I didn't know that</span>
<span class="comment-copy">I've just realised it makes more sense for the numbers of the board to be strings, such as '1','2','3','4','5', etc, because then the board stays aligned with the 'x's and 'o's. So I tried this:                                                         'def move():     move1=int(input('Player 1: Type a number!'))     for x in lst:         if move1 == int(x):             lst[int(x)-1] = 'x'             board()' but it doesn't seem to be working. Any hints would be much appreciated.</span>
