<div class="post-text" itemprop="text">
<p>If I have a nested dictionary I can get a key by indexing like so:</p>
<pre><code>&gt;&gt;&gt; d = {'a':{'b':'c'}}
&gt;&gt;&gt; d['a']['b']
'c'
</code></pre>
<p>Am I able to pass that indexing as a function parameter?</p>
<pre><code>def get_nested_value(d, path=['a']['b']):
    return d[path]
</code></pre>
<p>EDIT: I am aware my syntax is incorrect. It's a proxy for the correct syntax.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce</code></a> (or <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> in python 3), but that would also require you to pass in a list/tuple of your keys:</p>
<pre><code>&gt;&gt;&gt; def get_nested_value(d, path=('a', 'b')):
        return reduce(dict.get, path, d)

&gt;&gt;&gt; d = {'a': {'b': 'c'}}
&gt;&gt;&gt; get_nested_value(d)
'c'
&gt;&gt;&gt; 
</code></pre>
<p>(In your case <code>['a']['b']</code> doesn't work because <code>['a']</code> is a list, and <code>['a']['b']</code> is trying to look up the element at "<em>b</em>"th index of that list)</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm having the same problem, and I'm solving it with a recursive function:</p>
<pre><code>def access_path (lambda json, path): 
    if len(path) == 0:
        return json
    else 
        return access_path(json[path[0]], path[1:]))
</code></pre>
<p>This works for both a nested dict-of-dicts, and a list of dicts:</p>
<pre><code>test = {
    'a' : {
        'b' : 420
    },
    'c' : [
        {
            'id' : 'd1'
        },
        {
            'id' : 'd2'
        },
        {
            'id' : 'd3'
        },
    ]
}

print(access_path(test, ['a', 'b']))
print(access_path(test, ['c', 1, 'id']))
</code></pre>
<p>returns</p>
<pre><code>420
d2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not really, but by rewriting your function body a little bit, you can pass the keys as a tuple or other sequence:</p>
<pre><code>def get_nested_value(d, keys):
    for k in keys:
        d = d[k]
    return d

d = {'a':{'b':'c'}}
print get_nested_value(d, ("a", "b"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://github.com/akesterson/dpath-python" rel="nofollow noreferrer">https://github.com/akesterson/dpath-python</a>. </p>
<p>It makes traversing nested dictionaries a lot easier.</p>
<p>It will iterate out all of the conditions in the dictionary, so no special looping constructs required.</p>
</div>
<span class="comment-copy">No. You get <code>TypeError: list indices must be integers, not str</code>.</span>
<span class="comment-copy">You can however do, <code>path = ['a','b']</code> and do <code>d[path[0]][path[1]]</code></span>
<span class="comment-copy">Thanks, neat function. I wasn't aware of it before!</span>
