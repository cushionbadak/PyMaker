<div class="post-text" itemprop="text">
<p>As the question asks, why doesn't the below code work:</p>
<pre><code>while True:
      exec("break")
</code></pre>
<p>I am executing the above in pycharm via python 3.5.2 console.
I initially thought it was a context issue but after reading the documentation, I haven't come closer to understanding why this error ocurs.</p>
<pre><code>SyntaxError: 'break' outside loop
</code></pre>
<p>Thanks in advance :)</p>
<p><strong>EDIT:</strong> I understand that it works without exec() by the way, I'm curious why it won't work with exec (as my circumstances required it) - comprehensive answers welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>exec()</code> is ignorant to your surrounding while loop. So the only statement that <code>exec()</code> sees in your example is <code>break</code>. Instead of using <code>exec("break")</code>, simply use <code>break</code> as is.</p>
<p>The only access the <code>exec()</code> function has to its surrounding scope, is the <code>globals()</code> and <code>locals()</code> dictionaries. <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">The documentation for <code>exec()</code></a> provides some insight into how <code>exec()</code> works:</p>
<blockquote>
<p>This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). [1] If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section “File input” in the Reference Manual). Be aware that the return and yield statements may not be used outside of function definitions even within the context of code passed to the exec() function. The return value is None.</p>
<p>In all cases, if the optional parts are omitted, the code is executed in the current scope. If only globals is provided, it must be a dictionary, which will be used for both the global and the local variables. If globals and locals are given, they are used for the global and local variables, respectively. If provided, locals can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition.</p>
<p>If the globals dictionary does not contain a value for the key <strong>builtins</strong>, a reference to the dictionary of the built-in module builtins is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own <strong>builtins</strong> dictionary into globals before passing it to exec().</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <code>exec</code> statement runs a bit of code independently from the rest of your code.</p>
<p>Hence, the line:</p>
<pre><code>exec("break")
</code></pre>
<p>is tantamount to calling <code>break</code> out of nowhere, in a script where nothing else happens, and where no loop exists.</p>
<p>The right way to call the <code>break</code> statement is:</p>
<pre><code>while True:
    break
</code></pre>
<p><strong>EDIT</strong></p>
<p>The comment from Leaf made me think about it.</p>
<p>Actually, the <code>exec</code> statement does not run the code out of nowhere.</p>
<pre><code>&gt;&gt;&gt; i = 12
&gt;&gt;&gt; exec("print(i)")
12
</code></pre>
<p>A better answer, as far as I understand, is that <code>exec</code> runs a piece of code in the same <em>environment</em> as the original code, but independently from it.</p>
<p>This basically means that all the variables that exist at the moment <code>exec</code> is called can be used in the code called by <code>exec</code>. But the context is all new, so <code>return</code>, <code>break</code>, <code>continue</code> and other statements that need a context, will not work, unless the right context is created.</p>
<p>By the way, I kept the word "statement" when talking about <code>exec</code>, but it has become a function in Python3, the same way <code>print</code> did.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>exec()</code> is a function. Assuming for simplicity that a function call constitutes a statement of its own (just like in your example), it may end in one of the following ways:</p>
<ol>
<li><p>the function returns normally - in this case the next statement according to the control flow is executed;</p></li>
<li><p>an exception is raised/thrown from the function - in this case the matching <code>except</code> clause on the call stack (if any) is executed</p></li>
<li><p>the entire program is terminated due to an explicit call to exit() or equivalent - there is nothing to execute.</p></li>
</ol>
<p>Calling a <code>break</code> (as well as <code>return</code> or <code>yield</code>) from inside <code>exec()</code> would modify the program execution flow in a way that is incompatible with the described aspect of the function call semantics.</p>
<p>Note that <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">the documentation on <code>exec()</code></a> contains a special note on the use of <code>return</code> and <code>yield</code> inside <code>exec()</code>:</p>
<blockquote>
<p>Be aware that the <code>return</code> and <code>yield</code> statements may not be used outside
  of function definitions even within the context of code passed to the
  <code>exec()</code> function.</p>
</blockquote>
<p>A similar restriction applies to the <code>break</code> statement (with the difference that it may not be used outside <em>loops</em>), and I wonder why it was not included in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>exec</code> is a built in function ,</p>
<p>Python insists that <code>break</code> should happen inside the loop,not inside a <code>function</code></p>
<p>What is happening in your code is you are putting <code>break</code> inside a <code>function</code> which is <code>exec</code> you can't break out of a loop by executing a 
<code>break</code> within a function that's called inside the loop. </p>
<p><strong>For Ex</strong></p>
<pre><code>&gt;&gt;&gt; def func():
        break
SyntaxError: 'break' outside loop
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try break without exec():</p>
<pre><code>while True:
  break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>exec</code> function runs code inside a code and that means it runs out of nowhere! So, your while loop doesn't catch it. Your file is <code>&lt;stdin&gt;</code>. <code>exec</code> runs on another file called <code>&lt;string&gt;</code>. it doesn't recognize it where are you trying to break a loop where there is not a loop. So, your code is this:</p>
<pre><code>while True:
    exec("break")
</code></pre>
<p>It should be like this:</p>
<pre><code>while True:
    break
</code></pre>
</div>
<span class="comment-copy"><code>exec</code> is a function , <code>break</code> should be directly inside loop.</span>
<span class="comment-copy">So it is a context issue? is there a way to execute using exec in the current namespace/context?</span>
<span class="comment-copy">@Sighonide As far as I know, there is none. <code>exec()</code> can only access global variables, and not statements. May I ask why you need this though?</span>
<span class="comment-copy">Well that's unfortunate haha. I was going to use it to pass commands in string format to another process, that would manipulate a loop and other things in that process.</span>
<span class="comment-copy">@Sighonide Yes, I'm afraid so. If your still curious, <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">you can look over the official documentation for <code>exec()</code></a>, though.</span>
<span class="comment-copy">yeah that's what i read, thanks though :) i got excited when I saw a reference to local, but unfortunately wasn't what I wanted.</span>
<span class="comment-copy">@leaf Thanks for the thinking ;)</span>
<span class="comment-copy">.....Welcome ;)</span>
<span class="comment-copy">Yes , <code>break</code> also should be directly inside a loop, not inside function like <code>exec</code></span>
<span class="comment-copy">The OP says he needs to know the reason . Your answer is not explaining it.</span>
<span class="comment-copy">@leaf Well, I understand that he cannot comment but this is a very low quality answer .</span>
