<div class="post-text" itemprop="text">
<p>Using Openpyxl and python3.5, I tried getting the first row from an excel worksheet using a subscript but I an error. </p>
<pre><code># after getting filename
# after loading worksheet
# to get the first row of the worksheet
first_row = worksheet.rows[0]

# I get 
Traceback (most recent call last):
      File "&lt;pyshell#54&gt;", line 1, in &lt;module&gt;
      first_row = phc_th_sheet.rows[1]
TypeError: 'generator' object is not subscriptable
</code></pre>
<p>In relation to getting the first row, I've also tried 
     first_row = worksheet.(row=1)
     # and
     first_row = worksheet.rows[:1]</p>
<p>None worked. Any suggestions or is the feature not available in openpyxl?
I've been to the documentation at <a href="https://openpyxl.readthedocs.io/en/default/" rel="nofollow noreferrer">https://openpyxl.readthedocs.io/en/default/</a> but I found nothing helpful enough to index and select rows</p>
</div>
<div class="post-text" itemprop="text">
<p>I finally found the answer in the documentation:</p>
<pre><code>first_row = worksheet[1]
# worksheet[row_index_from_1]
</code></pre>
<p>This worked for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error <code>TypeError: 'generator' object is not subscriptable</code>. Means that you are trying to access by index a generator, which doesn't have one, because it creates the elements as you iterate through it.</p>
<p>You can solve it easily, cast it to a list to get the element you want:</p>
<pre><code>first_row = list(worksheet.rows)[0]
</code></pre>
<p>or iterate thought the rows:</p>
<pre><code>for row in worksheet.rows:
    foo(row)
</code></pre>
<p>This is because, even if both are iterables, lists and generators can behave quite differently, you can get it better explained here:</p>
<p><a href="https://wiki.python.org/moin/Generators" rel="noreferrer">https://wiki.python.org/moin/Generators</a></p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#iterator-types</a></p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range</a></p>
</div>
<span class="comment-copy">This is covered in the documentation.</span>
<span class="comment-copy">Yes, we converted <code>ws.rows</code> into a generator so that behaviour across different implementations would be consistent and also to encourage this syntax for ad-hoc queries. Programmatic access is best done using <code>ws.iter_rows()</code> and, where possible, <code>ws.iter_cols()</code>.</span>
<span class="comment-copy">This doesn't work any more.</span>
<span class="comment-copy">This is now worksheet.rows[1].  Going to update the answer.</span>
<span class="comment-copy">@CharlieClark after the <code>rows</code> variable is a generator, do we still have a way to access row by index now?</span>
<span class="comment-copy">@BenLiyanage: I've rolled back your edit. I suspect you were using an older version of <code>openpyxl</code>. <code>worksheet.rows</code> is a generator, so <code>worksheet.rows[1]</code> won't work.</span>
<span class="comment-copy">This is not a great answer.  It's better to just get the row directly, rather then explicitly converting the iterator to a list.</span>
<span class="comment-copy">Sure it is. However, as I usually manipulate excel spreadsheets with pandas and I'm not familiar with the internals of openpyxl, just tried to give an explanation of the error and how to get a workaround.</span>
<span class="comment-copy">@BenLiyanage the issue is you cant because the method is now a generator. the list method emulates accessing the row directly. Note that it pulls all the data into memory first. like DOM and StaX considerations, if you have a large dataset you'll want to iterate using the second example.</span>
<span class="comment-copy">Yup, I fixed the other answer.  =D  Happy bug hunting guys!</span>
<span class="comment-copy">I understand @ebt's explanation generators, but I still can't get how one could access to the n_th row with the "second example" presented in the answer.</span>
