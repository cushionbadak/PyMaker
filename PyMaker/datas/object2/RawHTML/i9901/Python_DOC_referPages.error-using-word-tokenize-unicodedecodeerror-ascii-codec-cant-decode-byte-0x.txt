<div class="post-text" itemprop="text">
<p>I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. </p>
<p>The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a <code>UnicodeEncodeError</code>. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error.</p>
<p>One of the sections of code that is causing problems is shown below:</p>
<pre><code>agent_telno = agent.find('div', 'agent_contact_number')
agent_telno = '' if agent_telno is None else agent_telno.contents[0]
p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
</code></pre>
<p>Here is a stack trace produced on SOME strings when the snippet above is run:</p>
<pre><code>Traceback (most recent call last):
  File "foobar.py", line 792, in &lt;module&gt;
    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)
</code></pre>
<p>I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English.</p>
<p>Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to read the Python <a href="https://docs.python.org/2.7/howto/unicode.html" rel="noreferrer">Unicode HOWTO</a>. This error is the <a href="https://docs.python.org/2.7/howto/unicode.html#the-unicode-type" rel="noreferrer">very first example</a>.</p>
<p>Basically, stop using <code>str</code> to convert from unicode to encoded text / bytes.</p>
<p>Instead, properly use <a href="http://docs.python.org/library/stdtypes.html#str.encode" rel="noreferrer"><code>.encode()</code></a> to encode the string:</p>
<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()
</code></pre>
<p>or work entirely in unicode.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a classic python unicode pain point! Consider the following:</p>
<pre><code>a = u'bats\u00E0'
print a
 =&gt; batsà
</code></pre>
<p>All good so far, but if we call str(a), let's see what happens:</p>
<pre><code>str(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe0' in position 4: ordinal not in range(128)
</code></pre>
<p>Oh dip, that's not gonna do anyone any good! To fix the error, encode the bytes explicitly with .encode and tell python what codec to use:</p>
<pre><code>a.encode('utf-8')
 =&gt; 'bats\xc3\xa0'
print a.encode('utf-8')
 =&gt; batsà
</code></pre>
<p>Voil\u00E0!</p>
<p>The issue is that when you call str(), python uses the default character encoding to try and encode the bytes you gave it, which in your case are sometimes representations of unicode characters. To fix the problem, you have to tell python how to deal with the string you give it by using .encode('whatever_unicode'). Most of the time, you should be fine using utf-8.</p>
<p>For an excellent exposition on this topic, see Ned Batchelder's PyCon talk here: <a href="http://nedbatchelder.com/text/unipain.html">http://nedbatchelder.com/text/unipain.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I found elegant work around for me to remove symbols and continue to keep string as string in follows:</p>
<pre><code>yourstring = yourstring.encode('ascii', 'ignore').decode('ascii')
</code></pre>
<p>It's important to notice that using the ignore option is <strong>dangerous</strong> because it silently drops any unicode(and internationalization) support from the code that uses it, as seen here (convert unicode):</p>
<pre><code>&gt;&gt;&gt; u'City: Malmö'.encode('ascii', 'ignore').decode('ascii')
'City: Malm'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>well i tried everything but it did not help, after googling around i figured the following and it helped.
python 2.7 is in use.</p>
<pre><code># encoding=utf8
import sys
reload(sys)
sys.setdefaultencoding('utf8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A subtle problem causing even print to fail is having your environment variables set wrong, eg. here LC_ALL set to "C".  In Debian they discourage setting it: <a href="https://wiki.debian.org/Locale" rel="noreferrer">Debian wiki on Locale</a></p>
<pre><code>$ echo $LANG
en_US.utf8
$ echo $LC_ALL 
C
$ python -c "print (u'voil\u00e0')"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe0' in position 4: ordinal not in range(128)
$ export LC_ALL='en_US.utf8'
$ python -c "print (u'voil\u00e0')"
voilà
$ unset LC_ALL
$ python -c "print (u'voil\u00e0')"
voilà
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've actually found that in most of my cases, just stripping out those characters is much simpler:</p>
<pre><code>s = mystring.decode('ascii', 'ignore')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me, what worked was:</p>
<pre><code>BeautifulSoup(html_text,from_encoding="utf-8")
</code></pre>
<p>Hope this helps someone.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this might solve,</p>
<pre><code># encoding=utf8
import sys
reload(sys)
sys.setdefaultencoding('utf8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add line below at the beginning of your script ( or as second line):</p>
<pre><code># -*- coding: utf-8 -*-
</code></pre>
<p>That's definition of python source code encoding. More info in <a href="https://www.python.org/dev/peps/pep-0263/" rel="noreferrer">PEP 263</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're trying to print a unicode character, but your terminal doesn't support it.</p>
<p>You can try installing <code>language-pack-en</code> package to fix that:</p>
<pre><code>sudo apt-get install language-pack-en
</code></pre>
<p>which provides English translation data updates for all supported packages (including Python). Install different language package if necessary (depending which characters you're trying to print).</p>
<p>On some Linux distributions it's required in order to make sure that the default English locales are set-up properly (so unicode characters can be handled by shell/terminal). Sometimes it's easier to install it, than configuring it manually.</p>
<p>Then when writing the code, make sure you use the right encoding in your code.</p>
<p>For example:</p>
<pre><code>open(foo, encoding='utf-8')
</code></pre>
<p>If you've still a problem, double check your system configuration, such as:</p>
<ul>
<li><p>Your locale file (<code>/etc/default/locale</code>), which should have e.g.</p>
<pre><code>LANG="en_US.UTF-8"
LC_ALL="en_US.UTF-8"
</code></pre>
<p>or:</p>
<pre><code>LC_ALL=C.UTF-8
LANG=C.UTF-8
</code></pre></li>
<li><p>Value of <code>LANG</code>/<a href="https://unix.stackexchange.com/a/3219/21471"><code>LC_CTYPE</code></a> in shell.</p></li>
<li><p>Check which locale your shell supports by:</p>
<pre><code>locale -a | grep "UTF-8"
</code></pre></li>
</ul>
<hr/>
<p>Demonstrating the problem and solution in fresh VM.</p>
<ol>
<li><p>Initialize and provision the VM (e.g. using <a href="https://www.vagrantup.com/" rel="nofollow noreferrer"><code>vagrant</code></a>):</p>
<pre><code>vagrant init ubuntu/trusty64; vagrant up; vagrant ssh
</code></pre>
<p><sup>See: <a href="https://atlas.hashicorp.com/ubuntu" rel="nofollow noreferrer">available Ubuntu boxes</a>.</sup>.</p></li>
<li><p>Printing unicode characters (such as trade mark sign like <code>™</code>): </p>
<pre><code>$ python -c 'print(u"\u2122");'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2122' in position 0: ordinal not in range(128)
</code></pre></li>
<li><p>Now installing <code>language-pack-en</code>:</p>
<pre><code>$ sudo apt-get -y install language-pack-en
The following extra packages will be installed:
  language-pack-en-base
Generating locales...
  en_GB.UTF-8... /usr/sbin/locale-gen: done
Generation complete.
</code></pre></li>
<li><p>Now problem should be solved:</p>
<pre><code>$ python -c 'print(u"\u2122");'
™
</code></pre></li>
<li><p>Otherwise, try the following command:</p>
<pre><code>$ LC_ALL=C.UTF-8 python -c 'print(u"\u2122");'
™
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Here's a rehashing of some other so-called "cop out" answers.  There are situations in which simply throwing away the troublesome characters/strings is a good solution, despite the protests voiced here.  </p>
<pre><code>def safeStr(obj):
    try: return str(obj)
    except UnicodeEncodeError:
        return obj.encode('ascii', 'ignore').decode('ascii')
    except: return ""
</code></pre>
<p>Testing it:</p>
<pre><code>if __name__ == '__main__': 
    print safeStr( 1 ) 
    print safeStr( "test" ) 
    print u'98\xb0'
    print safeStr( u'98\xb0' )
</code></pre>
<p>Results:</p>
<pre><code>1
test
98°
98
</code></pre>
<p>Suggestion: you might want to name this function to <code>toAscii</code> instead?  That's a matter of preference. </p>
</div>
<div class="post-text" itemprop="text">
<p>I always put the code below in the first two lines of the python files:</p>
<pre><code># -*- coding: utf-8 -*-
from __future__ import unicode_literals
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple helper functions found <a href="http://code.activestate.com/recipes/466341-guaranteed-conversion-to-unicode-or-byte-string/" rel="noreferrer">here</a>.</p>
<pre><code>def safe_unicode(obj, *args):
    """ return the unicode representation of obj """
    try:
        return unicode(obj, *args)
    except UnicodeDecodeError:
        # obj is byte string
        ascii_text = str(obj).encode('string_escape')
        return unicode(ascii_text)

def safe_str(obj):
    """ return the byte string representation of obj """
    try:
        return str(obj)
    except UnicodeEncodeError:
        # obj is unicode
        return unicode(obj).encode('unicode_escape')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In shell:</p>
<ol>
<li><p>Find supported UTF-8 locale by the following command:</p>
<pre><code>locale -a | grep "UTF-8"
</code></pre></li>
<li><p>Export it, before running the script, e.g.:</p>
<pre><code>export LC_ALL=$(locale -a | grep UTF-8)
</code></pre>
<p>or manually like:</p>
<pre><code>export LC_ALL=C.UTF-8
</code></pre></li>
<li><p>Test it by printing special character, e.g. <code>™</code>:</p>
<pre><code>python -c 'print(u"\u2122");'
</code></pre></li>
</ol>
<p>Above tested in Ubuntu.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just add to a variable encode('utf-8')</p>
<pre><code>agent_contact.encode('utf-8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just used the following:</p>
<pre><code>import unicodedata
message = unicodedata.normalize("NFKD", message)
</code></pre>
<p>Check what documentation says about it:</p>
<blockquote>
<p>unicodedata.normalize(form, unistr) Return the normal form form for
  the Unicode string unistr. Valid values for form are ‘NFC’, ‘NFKC’,
  ‘NFD’, and ‘NFKD’.</p>
<p>The Unicode standard defines various normalization forms of a Unicode
  string, based on the definition of canonical equivalence and
  compatibility equivalence. In Unicode, several characters can be
  expressed in various way. For example, the character U+00C7 (LATIN
  CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence
  U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA).</p>
<p>For each character, there are two normal forms: normal form C and
  normal form D. Normal form D (NFD) is also known as canonical
  decomposition, and translates each character into its decomposed form.
  Normal form C (NFC) first applies a canonical decomposition, then
  composes pre-combined characters again.</p>
<p>In addition to these two forms, there are two additional normal forms
  based on compatibility equivalence. In Unicode, certain characters are
  supported which normally would be unified with other characters. For
  example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049
  (LATIN CAPITAL LETTER I). However, it is supported in Unicode for
  compatibility with existing character sets (e.g. gb2312).</p>
<p>The normal form KD (NFKD) will apply the compatibility decomposition,
  i.e. replace all compatibility characters with their equivalents. The
  normal form KC (NFKC) first applies the compatibility decomposition,
  followed by the canonical composition.</p>
<p>Even if two unicode strings are normalized and look the same to a
  human reader, if one has combining characters and the other doesn’t,
  they may not compare equal.</p>
</blockquote>
<p>Solves it for me. Simple and easy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Below solution worked for me, Just added </p>
<blockquote>
<p>u "String"</p>
</blockquote>
<p>(representing the string as unicode) before my string.</p>
<pre><code>result_html = result.to_html(col_space=1, index=False, justify={'right'})

text = u"""
&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
Hello all, &lt;br&gt;
&lt;br&gt;
Here's weekly summary report.  Let me know if you have any questions. &lt;br&gt;
&lt;br&gt;
Data Summary &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
{0}
&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Data Team&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
""".format(result_html)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We struck this error when running <code>manage.py migrate</code> in Django with localized fixtures.</p>
<p>Our source contained the <code># -*- coding: utf-8 -*-</code> declaration, MySQL was correctly configured for utf8 and Ubuntu had the appropriate language pack and values in <code>/etc/default/locale</code>.</p>
<p>The issue was simply that the Django container (we use docker) was missing the <code>LANG</code> env var.</p>
<p>Setting <code>LANG</code> to <code>en_US.UTF-8</code> and restarting the container before re-running migrations fixed the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just had this problem, and Google led me here, so just to add to the general solutions here, this is what worked for me:</p>
<pre><code># 'value' contains the problematic data
unic = u''
unic += value
value = unic
</code></pre>
<p>I had this idea after reading <a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow">Ned's presentation</a>.</p>
<p>I don't claim to fully understand why this works, though. So if anyone can edit this answer or put in a comment to explain, I'll appreciate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have something like <code>packet_data = "This is data"</code> then do this on the next line, right after initializing <code>packet_data</code>:</p>
<pre><code>unic = u''
packet_data = unic
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please open terminal and fire the below command:</p>
<pre><code>export LC_ALL="en_US.UTF-8"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Update for python 3.0 and later. Try the following in the python editor:</p>
<pre><code>locale-gen en_US.UTF-8
export LANG=en_US.UTF-8 LANGUAGE=en_US.en
LC_ALL=en_US.UTF-8
</code></pre>
<p>This sets the system`s default locale encoding to the UTF-8 format.</p>
<p>More can be read <a href="https://www.python.org/dev/peps/pep-0538/" rel="nofollow noreferrer">here at PEP 538 -- Coercing the legacy C locale to a UTF-8 based locale</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Many answers here (@agf and @Andbdrew for example) have already addressed the most immediate aspects of the OP question.</p>
<p>However, I think there is one subtle but important aspect that has been largely ignored and that matters dearly for everyone who like me ended up here while trying to make sense of encodings in Python: <strong>Python 2 vs Python 3 management of character representation  is wildly different</strong>. I feel like a big chunk of confusion out there has to do with people reading about encodings in Python without being version aware. </p>
<p>I suggest anyone interested in understanding the root cause of OP problem to begin by reading <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="nofollow noreferrer">Spolsky's</a> introduction to character representations and Unicode and then move to <a href="https://pyvideo.org/pycon-us-2012/pragmatic-unicode-or-how-do-i-stop-the-pain.html" rel="nofollow noreferrer">Batchelder</a> on Unicode in Python 2 and Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had this issue trying to output Unicode characters to <code>stdout</code>, but with <code>sys.stdout.write</code>, rather than print (so that I could support output to a different file as well).</p>
<p><a href="https://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#Why%20can't%20Beautiful%20Soup%20print%20out%20the%20non-ASCII%20characters%20I%20gave%20it?" rel="nofollow noreferrer">From BeautifulSoup's own documentation</a>, I solved this with the codecs library:</p>
<pre><code>import sys
import codecs

def main(fIn, fOut):
    soup = BeautifulSoup(fIn)
    # Do processing, with data including non-ASCII characters
    fOut.write(unicode(soup))

if __name__ == '__main__':
    with (sys.stdin) as fIn: # Don't think we need codecs.getreader here
        with codecs.getwriter('utf-8')(sys.stdout) as fOut:
            main(fIn, fOut)
</code></pre>
</div>
<span class="comment-copy">If you're getting these errors as a user rather than as a developer, check <a href="https://serverfault.com/questions/54591/how-to-install-change-locale-on-debian" title="how to install change locale on debian">serverfault.com/questions/54591/…</a> and <a href="https://askubuntu.com/questions/599808/cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory" title="cannot set lc ctype to default locale no such file or directory">askubuntu.com/questions/599808/…</a></span>
<span class="comment-copy">I'll add this point don't use <a href="https://www.onlinegdb.com/online_python_interpreter" rel="nofollow noreferrer">onlinegdb.com/online_python_interpreter</a> for this stuff. Was using that interpreter to trial stuff out and it's not configured correctly for Unicode! Was always printing in a format 'B'\nnn''... when all I wanted was a guillemet! Tried on a VM and it worked immediately as expected using chr()</span>
<span class="comment-copy">agreed! a good rule of thumb I was taught is to use the "unicode sandwich" idea. Your script accepts bytes from the outside world, but all processing should be done in unicode. Only when you are ready to output your data should it be mushed back into bytes!</span>
<span class="comment-copy">In case someone else gets confused by this, I found a strange thing: my terminal uses utf-8, and when I <code>print</code> my utf-8 strings it works nicely. However when I pipe my programs output to a file, it throws a <code>UnicodeEncodeError</code>. In fact, when output is redirected (to a file or a pipe), I find that <code>sys.stdout.encoding</code> is <code>None</code>! Tacking on <code>.encode('utf-8')</code> solves the problem.</span>
<span class="comment-copy">@drevicko: use <code>PYTHONIOENCODING=utf-8</code> instead i.e., print Unicode strings and let the environment to set the expected encoding.</span>
<span class="comment-copy">@steinar: nothing is valid in every case. In general, a user shouldn't care that you use Python to implement your utility (the interface shouldn't change if you decide to reimplement it in another language for whatever reason) and therefore you should not expect that user even aware about python-specific envvars. It is bad UI to force user to specify character encoding; embed the character encoding in the report format if necessary. Note: no hardcoded encoding can be "sensible default" in the general case.</span>
<span class="comment-copy">This is bad and confusing advice. The reason people use str is because the object IS NOT already a string, so there's no <code>.encode()</code> method to call.</span>
<span class="comment-copy">Personal note:  When trying to type ".encode" don't accidentally type ".unicode" then wonder why nothing is working.</span>
<span class="comment-copy">Good advice. But what do you do instead when you were using str(x) to print objects that may or may not be strings? str(x) works if x is a number, date time, boolean, or normal string. Suddenly if its a unicode it stops working. Is there a way to get the same behaviour or do we now need to add an IF check to test if the object is string to use .encode, and str() otherwise?</span>
<span class="comment-copy">Same question could be asked with <code>None</code> value.</span>
<span class="comment-copy">You made my day! For utf-8, it's sufficient to do: <code>yourstring = yourstring.encode('utf-8', 'ignore').decode('utf-8')</code></span>
<span class="comment-copy">for me this did work but my case was different, i was saving file names and was having "/" in the name and the path didn't existed so I have to use .replace("/","") and thus saved mine script. while ignoring the ascii also works for 'utf-8' case also.</span>
<span class="comment-copy">@harrypotter0 for concatenating file paths correctly use <code>os.path.join()</code>, it's a very good habit when you start doing cross-platform programming. :)</span>
<span class="comment-copy">Don't do this. <a href="http://stackoverflow.com/questions/3828723/why-should-we-not-use-sys-setdefaultencodingutf-8-in-a-py-script" title="why should we not use sys setdefaultencodingutf 8 in a py script">stackoverflow.com/questions/3828723/…</a>, although when you have answers like this <a href="http://stackoverflow.com/a/31137935/2141635">stackoverflow.com/a/31137935/2141635</a> near the top of the results when you search for the error I can see why it may seem like a good idea.</span>
<span class="comment-copy">I tried almost all of the suggestions in this topic and really none worked for me. Finally I tried this one. And it's really THE ONLY one what worked simple and good.   If someone say  "Don't do this, then come with a simple Solution. Otherwise use this one. Because it's a good working copy and past solution.</span>
<span class="comment-copy">How could this be done in python3 ? Would be happy to know.</span>
<span class="comment-copy">After so much frustration this one worked. Thanks a bunch.</span>
<span class="comment-copy">I'd just add an <code>if sys.version_info.major &lt; 3:</code></span>
<span class="comment-copy">Got exactly same issue, so bad I didn't checked it before <a href="https://github.com/GoogleCloudPlatform/gsutil/issues/244" rel="nofollow noreferrer">reporting</a>. Thanks a lot. By the way, you can replace first two commands with <code>env|grep -E '(LC|LANG)'</code>.</span>
<span class="comment-copy">Just my two cents on wrong encoding issue. I frequently use <code>mc</code> in "subshell mode" (<code>Ctrl-O</code>) and I also forgot that I added the following alias to bash: <code>alias mc="LANG=en_EN.UTF-8 mc"</code>. So when I tried to run poorly-written scripts which rely on <code>ru_RU.UTF-8</code> internally, they just die. Tried lots of stuff from this thread before I discovered the real issue. :)</span>
<span class="comment-copy">"Perfectly" is not usually what it performs.  It throws away stuff which you should figure out how to deal with properly.</span>
<span class="comment-copy">just stripping out "those" (non-english) characters is not the solution since python must support all languages dont you think?</span>
<span class="comment-copy">Downvoted. This is not the correct solution at all. Learn how to work with Unicode: <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow noreferrer">joelonsoftware.com/articles/Unicode.html</a></span>
<span class="comment-copy">Look, the most judicious way to present this particular answer is in this way: recognizing that ascii confers a certain privilege on certain languages and users - this is the <i>escape hatch</i> that may be exploited for those users who may be hacking a cursory, first pass, script together potentially for preliminary work before full unicode support is implemented.</span>
<span class="comment-copy">If I'm writing a script that just needs to print english text to stdout in an internal company application, I just want the problem to go away. Whatever works.</span>
<span class="comment-copy">Why should we <code>reload(sys)</code>?</span>
<span class="comment-copy">without <code>reload(sys)</code>, it throws <code>AttributeError: 'module' object has no attribute 'setdefaultencoding'</code>. More info at <a href="https://docs.python.org/3/library/imp.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy"><code>NameError: name 'reload' is not defined</code></span>
<span class="comment-copy">This does not solve the problem when processed text loaded from external file contains utf-8 encodings. This helps only for literals written in the given python script itself and is just a clue for python interpreter, but has no impact on text processing.</span>
<span class="comment-copy">What has <code>language-pack-en</code> got to do with Python or this question? AFAIK, it may provide language translations to messages but has nothing to do with encoding</span>
<span class="comment-copy">On some Linux distributions it's required in order to make sure that the default English locales are set-up properly, especially when running Python script on the Terminal. It worked for me at one point. See: <a href="http://unix.stackexchange.com/q/3218/21471">character encoding</a></span>
<span class="comment-copy">Ah, ok. You mean if you want to use a non-English locale? I guess the user will also have to edit <code>/etc/locale.gen</code> to ensure their locale is built before using it?</span>
<span class="comment-copy">@AlastairMcCormack Commented out <code>LANG</code> from <code>/etc/default/locale</code> (as <code>/etc/locale.gen</code> does't exist) and ran <code>locale-gen</code>, but it didn't help. I'm not sure what <code>language-pack-en</code> exactly does, as I didn't find much documentation and listing the content of it doesn't help much.</span>
<span class="comment-copy">it is unlikely that there are no utf-8 locales on a desktop system already i.e., it is likely that you don't need to install anything, just configure <code>LANG</code>/ <code>LC_CTYPE</code>/ <code>LC_ALL</code> instead (e.g., <code>LANG=C.UTF-8</code>).</span>
<span class="comment-copy">To get the escaped bytestring (to convert arbitrary Unicode string to bytes using ascii encoding), you could use <code>backslashreplace</code> error handler: <code>u'\xa0'.encode('ascii', 'backslashreplace')</code>. Though you should avoid such representation and configure your environment to accept non-ascii characters instead -- it is 2016!</span>
<span class="comment-copy">Happy New Year @J.F.Sebastian. I just got frustrated with the Python-Unicode issue and then finally got this solution which was working. I didn't knew about this. Anyways thanks for the tip.</span>
<span class="comment-copy">worked for me. Thanks.</span>
<span class="comment-copy">What is the <code>type</code> of value? before and after this? I think why that works is that by doing a <code>unic += value</code> which is the same as <code>unic = unic + value</code> you are adding a string and a unicode, where python then assumes unicode for the resultant <code>unic</code> i.e. the more precise type (think about when you do this <code>a = float(1) + int(1)</code>, <code>a</code> becomes a float) and then <code>value = unic</code> points <code>value</code> to the new <code>unic</code> object which happens to be unicode.</span>
