<div class="post-text" itemprop="text">
<p>I want to append the output from a python code into a text file. Above is my python code and i loop it for every 2 hour</p>
<pre><code>if response == 0:
print(hostname, "is up")

if option == 1:
   print(option, "is the option')
   print('this is option number 1')
elif option == 2:
   print(option, "is the option')
   print('this is option number 2')
else:
   print(option, "is the other option')
   print('this is the result of other option')
</code></pre>
<p>i notice that i need the following code to append the result to a text file. </p>
<pre><code>with open("test.txt", "a") as myfile:
myfile.write("appended text")
</code></pre>
<p>How can i record every output to a text file and include time stamp to it? for example</p>
<pre><code>09:10  192.168.0.1 is up
09:10  1 is the option
09:11  this is option number 1
11:15  192.168.0.1 is up
11:10  1 is the option
11:11  this is option number 1
13:10  192.168.0.1 is up
13:10  3 is the other option
13:11  this is the result of other option
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python does have a logging library that you can make use of, but if you would prefer to make your own then you could take the following approach. </p>
<p>Here there are two functions, <code>write_log()</code> which takes the parameters you are using and creates some log entries. This function then calls <code>write_logline()</code> to write each part to both the screen (optional) and also to your file with a timestamp included:</p>
<pre><code>from datetime import datetime

def write_logline(logfile, text):
    now = datetime.strftime(datetime.now(), '%H:%M')
    log_text = '{}  {}\n'.format(now, text)
    print(log_text, end='')     # also display log info, comment out if not needed
    logfile.write(log_text)


def write_log(response, hostname, option):

    with open("test.txt", "a") as logfile:
        if response == 0:
            write_logline(logfile, '{} is up'.format(hostname))

        if option == 1:
           write_logline(logfile, '{} is the option'.format(option))
           write_logline(logfile, 'this is option number 1')
        elif option == 2:
           write_logline(logfile, '{} is the option'.format(option))
           write_logline(logfile, 'this is option number 2')
        else:
           write_logline(logfile, '{} is the other option'.format(option))
           write_logline(logfile, 'this is the result of other option')

write_log(0, '192.168.0.1', 1)   
write_log(0, '192.168.0.1', 1)   
write_log(0, '192.168.0.1', 3)   
</code></pre>
<p>As an alternative, you could consider writing your logging functions as a Python class. This saves you having to keep track of the file handle, and allows you to make use of Python's <code>with</code> statement:</p>
<pre><code>class LogTimestamp:

    def __init__(self, log_filename):
        self.log_filehandle = open(log_filename, 'a')

    def __enter__(self):
        return self

    def __exit__(self, *args):
        self.log_filehandle.close()               

    def write_logline(self, text):
        now = datetime.strftime(datetime.now(), '%H:%M')
        log_text = '{}  {}\n'.format(now, text)
        print(log_text, end='')     # also display log info, comment out if not needed
        self.log_filehandle.write(log_text)

    def write(self, response, hostname, option):
        if response == 0:
            self.write_logline('{} is up'.format(hostname))

        if option == 1:
           self.write_logline('{} is the option'.format(option))
           self.write_logline('this is option number 1')
        elif option == 2:
           self.write_logline('{} is the option'.format(option))
           self.write_logline('this is option number 2')
        else:
           self.write_logline('{} is the other option'.format(option))
           self.write_logline('this is the result of other option')


# Write 3 entries to the log

with LogTimestamp('test.txt') as log:
    log.write(0, '192.168.0.1', 1)   
    log.write(0, '192.168.0.1', 2)   
    log.write(0, '192.168.0.1', 3)   
</code></pre>
<p>Both versions would give you an output file looking like:</p>
<pre><code>09:51  192.168.0.1 is up
09:51  1 is the option
09:51  this is option number 1
09:51  192.168.0.1 is up
09:51  2 is the option
09:51  this is option number 2
09:51  192.168.0.1 is up
09:51  3 is the other option
09:51  this is the result of other option
</code></pre>
</div>
<span class="comment-copy">If you'll be doing this often, it's worth your while to learn and use <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">Python logging</a>.</span>
