<div class="post-text" itemprop="text">
<p>say a = [[1, 1, 1, 6], [0, 2, -1, 3], [4, 0, 10, 42]] and I want to transpose it to a = [[1,0,4], [1,2,0], [1,-1,10], [6,3,42]] using loops in python. The current code that I have is:</p>
<pre><code>def transpose(a):
    s = []
    for row in range(len(a)):
        for col in range(len(a)):
            s = s + [a[col][row]]
return s
</code></pre>
<p>But this gives me the output of:</p>
<pre><code>[1, 0, 4, 1, 2, 0, 1, -1, 10]
</code></pre>
<p>Instead of this:</p>
<pre><code>[[1,0,4], [1,2,0], [1,-1,10], [6,3,42]]
</code></pre>
<p>Can anyone help me? I'm still new at this stuff and don't understand why it doesn't work. Thanks so much!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution that is based on your code:</p>
<pre><code>def transpose(a):
    s = []
    # We need to assume that each inner list has the same size for this to work
    size = len(a[0])
    for col in range(size):
        inner = []
        for row in range(len(a)):
            inner.append(a[row][col])
        s.append(inner)
    return s
</code></pre>
<p>If you define an inner list for the inner loop, your output is this:</p>
<pre><code>[[1, 0, 4], [1, 2, 0], [1, -1, 10], [6, 3, 42]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a></p>
<pre><code>&gt;&gt;&gt; a = [[1, 1, 1, 6], [0, 2, -1, 3], [4, 0, 10, 42]]
&gt;&gt;&gt; [list(x) for x in zip(*a)]
[[1, 0, 4], [1, 2, 0], [1, -1, 10], [6, 3, 42]]
</code></pre>
<p><code>zip(*a)</code> unpacks the three sub-lists in <code>a</code> and combines them element by element. Meaning, the first elements of the each of the three sub-lists are combined together, the second elements are combined together and so on. But <code>zip()</code> returns tuples instead of lists like you want in your output. Like this:</p>
<pre><code>&gt;&gt;&gt; zip(*a)
[(1, 0, 4), (1, 2, 0), (1, -1, 10), (6, 3, 42)]
</code></pre>
<p><code>[list(x) for x in zip(*a)]</code> converts each of the tuples to lists giving the output the way you need it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for a solution without any fancy function. You may achieve it using <em>list comprehension</em> as:</p>
<pre><code>&gt;&gt;&gt; a = [[1, 1, 1, 6], [0, 2, -1, 3], [4, 0, 10, 42]]
&gt;&gt;&gt; sublist_size = len(a[0])
&gt;&gt;&gt; [[item[i] for item in a] for i in range(sublist_size)]
[[1, 0, 4], [1, 2, 0], [1, -1, 10], [6, 3, 42]]
</code></pre>
<p>However, simplest way is by using <code>zip()</code>:</p>
<pre><code>&gt;&gt;&gt; list(zip(*a))  # for Python 3, OR, just zip(*a) in Python 2 
[(1, 0, 4), (1, 2, 0), (1, -1, 10), (6, 3, 42)]
</code></pre>
</div>
<span class="comment-copy">Instead of inner.append and s.append, inner = inner + [a[row][col]] and s = s + [inner] works the same way! Thank you!!</span>
<span class="comment-copy">I wouldn't say that it works <i>exactly</i> the same way - you might want to have a look at <a href="https://stackoverflow.com/questions/2022031/python-append-vs-operator-on-lists-why-do-these-give-different-results/2022044#2022044">this</a> helpful answer that explains the differences.</span>
<span class="comment-copy">@Catury: It does not work the same way. When you do <code>list = list + [l]</code>, it creates a new list  with the value of <code>list</code> and <code>l</code>, and assign new list to <code>list</code>. where as <code>list.append(l)</code> appends <code>l</code> to existing <code>list</code> list</span>
<span class="comment-copy">I know that's one way to do it, but is there another way to do this using for loops or while loops?</span>
<span class="comment-copy">The other answer addresses your question. You are seeing one list in your output because you aren't creating a list in the inner loop.</span>
<span class="comment-copy">Slightly shorter   b = [[i[j] for i in a] for j in range(len(a)+1)]</span>
<span class="comment-copy">@JackTheCrab: It is not necessary that sublist's length will be 1 more that the list's length (even though in this example). So <code>range(len(a[0]))</code> should be used instead of <code>range(len(a) + 1)</code>. By nesting the two steps and shortening the variable name to decrease one line of code; It is not good practice. Shorter is not always good. If bigger (to very little extent) code is more readable, go for bigger ;)</span>
<span class="comment-copy">You're right, thanks for pointing it out. Definetely agree on readability as well;)</span>
