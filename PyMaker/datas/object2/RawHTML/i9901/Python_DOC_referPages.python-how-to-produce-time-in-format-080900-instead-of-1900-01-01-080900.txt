<div class="post-text" itemprop="text">
<p>this adds 30 minutes to the time such as 07:39</p>
<pre><code>HOUR_ON = datetime.time(int(array_on[0]), int(array_on[1]))
HOUR_ON = str(HOUR_ON)
a = datetime.datetime.strptime(HOUR_ON,'%H:%M:%S')
HOUR_ON = a + datetime.timedelta(0,1800) # 1800 (30 mins) open door 30 mins later
</code></pre>
<p>but gives me "1900-01-01 08:09:00". How do I get it to give "08:09:00"</p>
<p>The important thing for me is the format - the code works and adds 30 minutes (as has been pointed out) I want to remove "1900-01-01" from this and leave only 08:09:00. I can't get strptime to work to do this. HOUR_ON will print 07:39 before I use</p>
<pre><code>HOUR_ON = str(HOUR_ON)
</code></pre>
<p>when I have finished though I want "08:09:00". thanks</p>
<p>Addition</p>
<p>if update the code to</p>
<pre><code>HOUR_ON = datetime.time(int(array_on[0]), int(array_on[1]))
HOUR_ON = str(HOUR_ON)
a = datetime.datetime.strptime(HOUR_ON,'%H:%M:%S')
HOUR_ON = a + datetime.timedelta(0,1800) # 1800 (30 mins) open door 30 mins later
HOUR_ON.strftime('%H:%m:%S')
print HOUR_ON
</code></pre>
<p>I still get 1900-01-01 08:09:00</p>
</div>
<div class="post-text" itemprop="text">
<p>This code is tested on both python 2 and python 3:</p>
<pre><code>import datetime

#define the input time string
input_time_string = '23:39:00'
time_format_string = '%H:%M:%S'
print('input time string = {time}'.format(time=input_time_string))

#define a magic number that will be used by timedelta
seconds_in_30_minutes = 1800

#create a datetime object initialized to the time provided by the input time
#string defined above
datetime_obj = datetime.datetime.strptime(input_time_string, time_format_string)

#add 1800 seconds to the datetime object
datetime_obj_plus_30_minutes = datetime_obj + datetime.timedelta(0, seconds_in_30_minutes)

#format the datetime object as a string containing only the time
output_time_string = datetime_obj_plus_30_minutes.strftime(time_format_string)

#print the time string
print('output time string = {time}'.format(time=output_time_string))
</code></pre>
<p>The above code prints the following to standard output showing that it works even when the next day is fewer than 30 minutes after the input time:</p>
<pre><code>input time string = 23:39:00
output time string = 00:09:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>works fine for me. I do not see any issues with your code. May be re-check the HOUR_ON variable</p>
<pre><code>&gt;&gt;&gt; HOUR_ON = str("08:09:00")
&gt;&gt;&gt; a = datetime.datetime.strptime(HOUR_ON,'%H:%M:%S')
&gt;&gt;&gt; HOUR_ON = a + datetime.timedelta(0,1800)
&gt;&gt;&gt; print HOUR_ON
1900-01-01 08:39:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand this correctly, after I included answer from Seth, I then split the time and joined it together again as an int to get my answer with 30 minutes added in the format I needed - thanks everybody (even the -'s)</p>
<pre><code># add 30 mins to opening time
HOUR_ON = datetime.time(int(array_on[0]), int(array_on[1]))
HOUR_ONstr = str(HOUR_ON)
a = datetime.datetime.strptime(HOUR_ONstr,'%H:%M:%S')
HOUR_ON30 = a + datetime.timedelta(0,1800) # 1800 (30 mins) open door 30 mins later
HOUR_ONHMS = HOUR_ON30.strftime('%H:%M:%S')
array_on = HOUR_ONHMS.split(":")

# open and close times are set here
HOUR_ON = datetime.time(int(array_on[0]), int(array_on[1]))
</code></pre>
</div>
<span class="comment-copy">no I don't see a duplicate - my code adds 30mins or 1800, don't think that matters - perhaps my title is badly worded but I am not asking how to add 30 minutes</span>
<span class="comment-copy"><code>HOUR_ON.strftime('%H:%m:%S')</code> formats your datetime object as the string that you seek. See <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer">docs.python.org/3/library/time.html#time.strftime</a>. Note that your question is using <code>strptime</code> not <code>strftime</code>.</span>
<span class="comment-copy">@SethDifley, I have added as suggested and updated my question - it sounds like what I want but I still get the same result</span>
<span class="comment-copy">@tamus the code in your question used, but did not define, <code>array_on</code>. Even if <code>array_on</code> had been defined, the definition of <code>HOUR_ON</code> results in a runtime error because <code>datetime.time</code> takes exactly one argument, not two. My answer below walks through how to use the datetime library to convert a time string into a time-shifted string. If my answer below is useful, please mark accordingly.</span>
<span class="comment-copy">thanks for your time on this and reading to see that I wasn't needing to add minutes  - sorry I can't give you more than tick as the minuses here have brought my rep down. Your code works and helped me to get the answer - I needed to add two more lines to get all working as shown below</span>
<span class="comment-copy">thanks but my code works - I am trying to format the output or take away the date - yes I don't understand python datetime and time fully</span>
