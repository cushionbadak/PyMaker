<div class="post-text" itemprop="text">
<p>I am doing some natural language processing with Python (2.7.9) and NLTK (3.2.1). The way I am currently doing things, <em>every time I run my program</em> I do part-of-speech tagging on a large corpus.</p>
<p>The resulting tagged corpus looks like a larger version of this:</p>
<pre><code>[('a', 'DT'), ('better', 'JJR'), ('widower', 'JJR'), ('than', 'IN'),
('my', 'PRP$'), ('father', 'NN'), ('.', '.'), ('Aunt', 'NNP'),
('Sybil', 'NNP'), ('had', 'VBD'), ('pink-rimmed', 'JJ'), ('azure',
'JJ'), ('eyes', 'NNS'), ('and', 'CC'), ('a', 'DT'), ('waxen', 'JJ'),
('complexion', 'NN'), ('.', '.'), ('She', 'PRP'), ('wrote', 'VBD'),
('poetry', 'NN'), ('.', '.'), ('She', 'PRP'), ('was', 'VBD'),
('poetically', 'RB'), ('superstitious', 'JJ')]
</code></pre>
<p>Ideally, I would just save this list to a file and then read the file into a variable every time I run my program. Saving the list to a file is very easy:</p>
<pre><code>POScorpus = pos_tag(words)

#I convert this to a string so I can write it to a file.

POScorpus_string = str(POScorpus)

#I then write it to a file.

f = open('C:\Desktop\POScorpus.txt', 'w')

f.write(POScorpus_string)

f.close()
</code></pre>
<p>The problem is that when I go to read the file into a variable, the <code>read()</code> function only reads the file as a stringâ€”not as a list.</p>
<p>My question is simple: <strong><em>How can I read the file as a list rather than as a string?</em></strong> I imagine this is relatively simple, but I could not find any information about how to do it.</p>
<p>(Apologies if this is off-topic or a dupe.)</p>
</div>
<div class="post-text" itemprop="text">
<p>A string can be transformed into a list using the <code>eval()</code> function. That said, this is not the most efficient and memory-friendly solution to the problem.</p>
<p>A better option is to use Python's <code>pickle</code> or <code>cPickle</code> module. "Pickling" refers to the process of saving a Python object (for example, a list or dictionary) as a byte stream which can then be quickly unloaded into variables later, without loss or deformation of its object type. Pickling is also known as "serialization" and "marshalling".</p>
<p>Here is an example:</p>
<pre><code>#HOW TO PICKLE THE POS-TAGGED CORPUS

#Pickling involves saving a Python object as a file (without first converting
#it to a string).

#Let's pickle TaggedCorpus so we can use it efficiently later:

import cPickle                                 #imports fast pickle module (written in C)

f = open('C:\Desktop\TaggedCorpus.p', 'w')     #creates pickle file f
cPickle.dump(TaggedCorpus, f)                  #dumps data of TaggedCorpus object to f
f.close()

#To unpickle the object, simply load the file into a variable:

f = open('C:\Desktop\TaggedCorpus.p', 'r')     #opens the pickle file as read
TaggedCorpus = cPickle.load(f)                 #loads the content of f as TaggedCorpus
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can cast a string into a set using <code>eval(your_string)</code>.</p>
</div>
<span class="comment-copy">You might want to look at <a href="https://docs.python.org/2/library/pickle.html" rel="nofollow noreferrer">python object serialization</a></span>
<span class="comment-copy">Thanks! eval() did it for now, but I'll look into that link @Bahrom. I'd delete this question but it's already been answered...</span>
<span class="comment-copy">Thanks! It worked.</span>
<span class="comment-copy">Bad advice. The user should use pickle instead: <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html</a></span>
