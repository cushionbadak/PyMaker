<div class="post-text" itemprop="text">
<p>I am trying to construct a dispatch the following way:</p>
<pre><code>def run_nn(type=None):
    print type, 'nn'
    return

def run_svm(type=None):
    print type, 'svm'
    return


action = {'nn' : run_nn( type=None),
          'svm' : run_svm(type=None),}
</code></pre>
<p>I want the function to be executed <em>only</em> when called with something like:</p>
<pre><code> action.get('nn',type='foo')
</code></pre>
<p>With expectation it to print: </p>
<pre><code>foo nn
</code></pre>
<p>But it breaks giving:</p>
<pre><code>TypeError: get() takes no keyword arguments
</code></pre>
<p>What's the right way to do it?</p>
<p>Furthermore, two functions <code>run_nn()</code> and <code>run_svm()</code> were executed without even being called. I don't want that. How can I avoid it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're calling the functions while building the dictionary. You should instead put the function objects in the dict without calling them. And afterwards, <code>get</code> the appropriate function from the dict and call it with the keyword argument.</p>
<p>What you want is:</p>
<pre><code>action = {'nn' : run_nn,
          'svm' : run_svm,}
...
action.get('nn')(type='foo') # get function object from dict and then call it.
</code></pre>
<p>I'll suggest you use <code>action['nn']</code> over <code>action.get('nn')</code> since you're not specifying any default <em>callable</em> in the <code>get</code> method; the <code>get</code> method returns <code>None</code> when you don't specify one. A <code>KeyError</code> is much more intuitive than a <code>TypeError</code> <em>NoneType object is not callable</em> in this scenario.</p>
<p>On another note, you can drop those <code>return</code> statements as you aren't actually returning anything. Your function will still <em>return</em> without them.</p>
<p>BTW, I have the feeling your function(s) want to change behavior depending on <code>type</code> (although your <code>type</code> is counter-intuitive as it is always a string). In any case, you may have a look at <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledispatch</code></a>. That'll transform your function(s) into a <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer">single-dispatch generic function</a> with the possibility to create several overloaded implementations.</p>
<p>Finally, although <code>type</code> does make for a good argument name, you will run into problems when you need to use the builtin <code>type</code> in your function.</p>
</div>
