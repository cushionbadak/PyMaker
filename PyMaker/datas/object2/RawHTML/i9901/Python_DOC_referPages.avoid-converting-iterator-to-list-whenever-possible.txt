<div class="post-text" itemprop="text">
<p>Suppose I have a function taking one parameter, an <em>iterable</em>, as input, and I want to iterate more than once on the iterable.</p>
<p>If I write it like this:</p>
<pre><code>def a_function(an_iterable):
    for x in an_iterable:
       print(x)
    for x in an_iterable:
       print(x)
</code></pre>
<p>the second loop <em>may</em> be executed or not.</p>
<ul>
<li>it is executed if the iterable is a <code>list</code>, <code>set</code>, <code>dict</code>, which are not iterator/generator functions, or <code>range</code> which rearms itself</li>
<li>not for a custom generator function or a file object (obtained with <code>f=open("file")</code>). (the reuse of a file iterator is the subject of many questions here at SO)</li>
</ul>
<p>Of course, I could do this to avoid creating an unnecessary <code>list</code> if not needed:</p>
<pre><code>def a_function(an_iterable):
    if any(lambda x : type(an_iterable==x) for x in (range,list,set,dict))):
        # use as-is
        pass
    else:
         an_iterable = list(an_iterable)

    for x in an_iterable:
       print(x)
    for x in an_iterable:
       print(x)
</code></pre>
<p>that would work for a lot of common cases, but not the general case.</p>
<p><strong>Is there a clean way to detect if I can iterate many times on my iterable object?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3.5/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>collections.abc.Sequence</code></a> class to see if the iterable is actually a sequence:</p>
<pre><code>&gt;&gt;&gt; from collections.abc import Sequence
&gt;&gt;&gt; isinstance([1,2,3], Sequence)
True
&gt;&gt;&gt; isinstance((1,2,3), Sequence)
True
&gt;&gt;&gt; isinstance(range(10), Sequence)
True
&gt;&gt;&gt; isinstance(iter((1,2,3)), Sequence)
False
</code></pre>
<p>This wont work for sets:</p>
<pre><code>&gt;&gt;&gt; isinstance({1,2,3}, Sequence)
False
</code></pre>
<p>If you want to include sets and mappings use the <a href="https://docs.python.org/3.5/library/collections.abc.html#collections.abc.Set" rel="nofollow noreferrer"><code>collections.abs.Set</code></a> and <a href="https://docs.python.org/3.5/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer"><code>collections.abc.Mapping</code></a>:</p>
<pre><code>&gt;&gt;&gt; isinstance({1,2,3}, (Sequence, Set, Mapping))
True
</code></pre>
<p>You may want to create an helper function that converts an iterable to a sequence if needed:</p>
<pre><code>def sequencify(iterable):
    if isinstance(iterable, (Sequence, Set, Mapping)):
        return iterable
    return list(iterable)
</code></pre>
<p>And now you can just do:</p>
<pre><code>def a_function(iterable):
    iterable = sequencify(iterable)

    for x in iterable:
        print(x)
    for x in iterable:
        print(x)
</code></pre>
<hr/>
<p>A simpler alternative is to check that <code>iterable</code> argument does <em>not</em> have a <code>__next__</code> method:</p>
<pre><code>&gt;&gt;&gt; hasattr([1,2,3], '__next__')
False
&gt;&gt;&gt; hasattr(iter([1,2,3]), '__next__')
True
</code></pre>
<p>This works because well-implemented containers are only iterables and not iterator themselves, so they only have an <code>__iter__</code> method that returns an iterator which has the <code>__next__</code> method that advances the iteration.</p>
<p>This would lead to:</p>
<pre><code>def sequencify(iterable):
    if not hasattr(iterable, '__next__'):
        return iterable
    return list(iterable)
</code></pre>
<hr/>
<p>The final alternative is the simplest: document the argument as a <em>sequence</em> and <strong>not</strong> an <em>iterable</em> and let the user be responsible for providing the correct type.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could check whether the object has a <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" rel="nofollow noreferrer"><code>__next__()</code></a> method (Python 3), or a <a href="https://docs.python.org/2/library/stdtypes.html#iterator.next" rel="nofollow noreferrer"><code>next()</code></a> method (Python 2). If it does then you might assume that it implements the iterator protocol and its values will therefore not be reusable.</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3, 4]
&gt;&gt;&gt; it = iter(l)
&gt;&gt;&gt; hasattr(l, '__next__')
False
&gt;&gt;&gt; hasattr(it, '__next__')
True
</code></pre>
<p>If there is a <code>__next__</code> attribute you should then check that it is callable:</p>
<pre><code>&gt;&gt;&gt; hasattr(l, '__next__') and callable(l.__next__)
False
&gt;&gt;&gt; hasattr(it, '__next__') and callable(it.__next__)
True
</code></pre>
</div>
<span class="comment-copy">another precision: what if I create a function using <code>yield</code> ? It has no <code>__next__</code> but isn't "rearmable". Isn't it a special case? could we just check it with <code>hasattr(it,"__code__")</code></span>
<span class="comment-copy">@Jean-Fran√ßoisFabre check if it is <code>callable</code>? The issue is that you do not know the parameters to call it...</span>
<span class="comment-copy">of course! cannot happen then. Thanks.</span>
