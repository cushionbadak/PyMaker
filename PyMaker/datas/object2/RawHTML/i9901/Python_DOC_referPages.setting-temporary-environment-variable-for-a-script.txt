<div class="post-text" itemprop="text">
<p>I am currently learning about unix and I have a question about setting temporary environment path. I have the following script in C,</p>
<pre><code>///home/jason/Public/TestTempEnv.c
putenv("PATH=$PATH:/home/jason/Public/:/home/jason/Private/");
system("register");
</code></pre>
<p>From my understanding, it will search for 'register' in all the paths defined in $PATH starting from first defined path, left to right.</p>
<p>However, if I have a python script that does the following,</p>
<pre><code>import os
os.system("export PATH=/home/lucy/:$PATH &amp;&amp; /home/jason/Public/TestTempEnv")
</code></pre>
<p>The python script sets temporary path and then calling the <code>TestTempEnv.c</code> script, will the final path inside <code>TestTempEnv.c</code> have the <code>/home/lucy/</code> path added before it executes <code>register</code>? </p>
<p>Just to add that I have compiled the C script using the command,<code>gcc TestTempEnv.c -o TestTempEnv</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use execve and precise the env var: 
int execve(const char *fichier, char *const argv[], <strong>char *const envp[]</strong>); 
see the man</p>
</div>
<span class="comment-copy">Indirect answer: You can use the strace command to see what your process does, including which directories it uses to locate stuff.</span>
<span class="comment-copy">what is your question? Both constructs work even if the python version is not the most pythonic and neither are very portable.</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre, I would like to know if I the final path inside the C file will have <code>/home/lucy</code> added before it executes <code>register</code></span>
<span class="comment-copy">@Park Taecyeon If that is all: The answer is "Yes.".</span>
<span class="comment-copy">But still, you should consider using <a href="https://docs.python.org/3/library/subprocess.html#older-high-level-api" rel="nofollow noreferrer"><code>subprocess.call</code></a> instead. It's portable, it allows precise control of the environment, and it avoids spawning a shell process.</span>
