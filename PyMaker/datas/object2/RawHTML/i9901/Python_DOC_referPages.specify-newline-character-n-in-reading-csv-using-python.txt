<div class="post-text" itemprop="text">
<p>I want to read a csv file with each line dictated by a newline character ('\n') using Python 3. This is my code: </p>
<pre><code>import csv
with open(input_data.csv, newline ='\n') as f:
        csvread = csv.reader(f)
        batch_data = [line for line in csvread]
</code></pre>
<p>This above code gave error: </p>
<pre><code>batch_data = [line for line in csvread].
_csv.Error: new-line character seen in unquoted field - do you need to open the file in universal-newline mode?
</code></pre>
<p>Reading these posts: <a href="https://stackoverflow.com/questions/17315635/csv-new-line-character-seen-in-unquoted-field-error">CSV new-line character seen in unquoted field error</a>, also tried these alternatives that I could think about: </p>
<pre><code>with open(input_data.csv, 'rU', newline ='\n') as f:
        csvread = csv.reader(f)
        batch_data = [line for line in csvread]


with open(input_data.csv, 'rU', newline ="\n") as f:
        csvread = csv.reader(f)
        batch_data = [line for line in csvread]
</code></pre>
<p>No luck of geting this correct yet. Any suggestions?</p>
<p>I am also reading the <a href="https://docs.python.org/3/library/csv.html#id3" rel="nofollow noreferrer">documentation about newline</a>ï¼š if newline='' is not specified, newlines embedded inside quoted fields will not be interpreted correctly, and on platforms that use \r\n line on write an extra \r will be added. It should always be safe to specify newline='', since the csv module does its own (universal) newline handling.</p>
<p>So my understanding of this newline method is: </p>
<p>1) it is a necessity, </p>
<p>2) does it indicate the input file would be split into lines by empty space character? </p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>newline=''</code> is correct in all <code>csv</code> cases, and failing to specify it is an error in many cases. The docs recommend it for the very reason you're encountering.</p></li>
<li><p><code>newline=''</code> doesn't mean "empty space" is used for splitting; it's specifically <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">documented on the <code>open</code> function</a>:</p></li>
</ol>
<blockquote>
<p>If <code>[newline]</code> is '', universal newlines mode is enabled, but line endings are returned to the caller untranslated.</p>
</blockquote>
<p>So with <code>newline=''</code> all original <code>\r</code> and <code>\n</code> characters are returned unchanged. Normally, in universal newlines mode, any newline like sequence (<code>\r</code>, <code>\n</code>, or <code>\r\n</code>) is converted to <code>\n</code> in the input. But you don't want this for CSV input, because CSV dialects are often quite picky about what constitutes a newline (Excel dialect requires <code>\r\n</code> only).</p>
<p>Your code should be:</p>
<pre><code>import csv
with open('input_data.csv', newline='') as f:
    csvread = csv.reader(f)
    batch_data = list(csvread)
</code></pre>
<p>If that doesn't work, you need to look at your CSV dialect and make sure you're initializing <code>csv.reader</code> correctly.</p>
</div>
<span class="comment-copy">try to open the file in binary mode <code>open("filename.csv", 'rb')</code></span>
<span class="comment-copy">I've seen this happen when you have lone CR's (\r) in the file. Try to split the lines and strip whitespace.</span>
<span class="comment-copy">You're supposed to pass <code>newline=''</code> in Python 3 and let the <code>csv</code> module handle the newlines.</span>
<span class="comment-copy">@thebjorn: That's only valid on Python 2.</span>
<span class="comment-copy">thanks so much for pointing me to the right documentation of open function.       Just to confirm I understand you correctly, if the input file is using '\n', the code you recommended would read and split each row properly, right?</span>
<span class="comment-copy">I was repetitively asking for confirmation, b/c the input file is too big to open as a csv (I can't eyeball see it). The only info that know about it is "\n" separate each row. I don't know to to verify my code was doing the right row separation by comparing the real csv file and the code read in file.</span>
<span class="comment-copy">@enaJ: Yes. It doesn't matter what line ending convention the input file uses when you use <code>newline=''</code>, it will treat <i>any</i> possible line ending as being the end of the line and return the data from that line (including the unconverted characters representing the end of the line). The <code>csv</code> module will recognize endings that don't match the CSV dialect and combine lines as needed to match the dialect chosen (and combine lines when the newline occurs inside a quoted field, so an embedded newline in a field doesn't turn it into multiple records on read).</span>
<span class="comment-copy">thanks again for your great help and patience!! Let me ask one more question on this front: how if 'newline ='' " ' is used for all input cases, how does it differentiate a input file use '/n' as new line deliminator and another file use ', "?</span>
<span class="comment-copy">@enaJ: What format are you using where records (as opposed to fields) are separated by commas? That question doesn't even make sense. For the record, <code>csv</code> is documented to ignore the value of <code>lineterminator</code> for readers and just treat either <code>\r</code> or <code>\n</code> as a line terminator; you can't use non-newline-y characters to separate records on read.</span>
