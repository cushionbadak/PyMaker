<div class="post-text" itemprop="text">
<p>I’m reading <em>Think Python: How to Think Like a Computer Scientist</em>. The author uses <strong>“invoke”</strong> with methods and <strong>“call”</strong> with functions. </p>
<p>Is it a convention? And, if so, why is this distinction made? Why are functions said to be <strong>called</strong>, but methods are said to be <strong>invoked</strong>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not really, maybe it is <em>easier</em> for new readers to make an explicit distinction in order to understand that their invocation is slightly different. At least that why I suspect the author might have chosen different wording for each. </p>
<p>There doesn't seem to be a convention that dictates this in the Reference Manual for the Python language. What I seem them doing is choosing <em>invoke</em> when the call made to a function is <em>implicit</em> and not explicit. </p>
<p>For example, in the Callables section of <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">the Standard Type Hierarchy</a> you see:</p>
<blockquote>
<p>[..] When an instance method object is <strong>called</strong>, the underlying function (<code>__func__</code>) is called, inserting the class instance (<code>__self__</code>) in front of the argument list. [...]</p>
</blockquote>
<p><sup>(Emphasis mine) Explicit call</sup></p>
<p>Further down in <a href="https://docs.python.org/3/reference/datamodel.html#basic-customization" rel="nofollow noreferrer">Basic Customization</a> and specifically <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer">for <code>__new__</code></a> you can see:</p>
<blockquote>
<p><strong>Called</strong> to create a new instance of class <code>cls. __new__()</code> is a static method [...]</p>
</blockquote>
<p><sup>(Emphasis mine) Explicit call</sup></p>
<p>While just a couple of sentences later you'll see how <em>invoked</em> is used because <code>__new__</code> implicitly calls <code>__init__</code>:</p>
<blockquote>
<p>If <code>__new__()</code> does not return an instance of <code>cls</code>, then the new instance’s <code>__init__()</code> method will not be <strong>invoked</strong>.</p>
</blockquote>
<p><sup>(Emphasis mine) Implicitly called</sup></p>
<p>So no, no convention seems to be used, at least by the creators of the language. Simple is better than complex, I guess :-).</p>
</div>
<div class="post-text" itemprop="text">
<p>One good source for this would be <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow noreferrer">the Python documentation</a>. A simple text search through the section on Classes reveals the word <strong>"call"</strong> being used many times in reference to "calling methods", and the word <strong>"invoke"</strong> being used only once.</p>
<p>In my experience, the same is true: I regularly hear "call" used in reference to methods and functions, while I rarely hear "invoke" for either. However, I assume this is mainly a matter of personal preference and/or context (is the setting informal?, academic?, etc.).</p>
<p>You will also see <a href="https://docs.python.org/2/c-api/sys.html?highlight=invoke#process-control" rel="nofollow noreferrer">places in the documentation</a> where the word "invoke" is used in refernce to functions:</p>
<blockquote>
<p>void <strong>Py_FatalError</strong>(const char *message) </p>
<p>Print a fatal error message
  and kill the process. No cleanup is performed. <strong>This function should
  only be invoked</strong> when a condition is detected that would make it
  dangerous to continue using the Python interpreter; e.g., when the
  object administration appears to be corrupted. On Unix, the standard C
  library function abort() is called which will attempt to produce a
  core file.</p>
</blockquote>
<p>And from <a href="https://docs.python.org/2/c-api/refcounting.html?highlight=invoke#c.Py_DECREF" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>void <strong>Py_DECREF</strong>(PyObject *o) </p>
<p>Decrement the reference count for object o. The object must not be NULL; if you aren’t sure that it isn’t NULL,
  use Py_XDECREF(). If the reference count reaches zero, the object’s
  type’s deallocation <strong>function (which must not be NULL) is invoked</strong>.</p>
</blockquote>
<p>Although both these references are from the Python C API, so that may be significant.</p>
<h1>To summerize:</h1>
<p>I think it is safe to use either "invoke" or "call" in the context of functions or methods without sounding either like a noob or a showoff.</p>
<p>Note that <strong>I speak only of Python</strong>, and what I know from my own experience. I cannot speak to the difference between these terms in other languages.</p>
</div>
<span class="comment-copy">Related, possible duplicate (in a C# context): <a href="http://stackoverflow.com/q/18505422/464709">What's the difference between “call” and “invoke”?</a></span>
<span class="comment-copy">In my experience with Python, I would say it is much more common to say/hear "call" for both methods and functions, and I have rarely heard "invoke" used for either. However, my training in Python is fairly informal, and you might have different conventions in different fields.</span>
<span class="comment-copy">I've always differentiated that first order functions are always called. Methods of a class are invoked <i>on the class</i></span>
<span class="comment-copy">@cricket_007 interesting. Do recall at all how you picked up that convention? I am wondering if this came from the people/sources you learned from, habits from learning other languages etc..</span>
<span class="comment-copy">@elethan Mostly just my language preference. Not sure if I really picked up anywhere in particular. In functional programming, it's really interchangeable. Say either one, and most people understand, probably.</span>
<span class="comment-copy">I should add that in Python, every call (except built-in data types, perhaps) includes attribute lookups, so there isn't even a distinction at implementation level.</span>
