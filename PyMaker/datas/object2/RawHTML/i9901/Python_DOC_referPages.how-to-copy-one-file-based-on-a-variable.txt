<div class="post-text" itemprop="text">
<p>I am building a python script to basically edit lots of files by means of searching and replacing words in the file.</p>
<p>There is an original file named: <code>C:\python 3.5/remedy line 1.ahk</code></p>
<p>There is a file containing the words I want to replace (search words) in the original document and a text file that has the list of the new words that I would like to be placed into the final document.</p>
<p>The script then runs and works perfect. The final document is then created and named based on a line in the final text file (code begins on line 72). A way so I can tell what the final product is by looking at it. This file is originally named <code>output = open("C:\python 3.5\output.ahk", 'w')</code> and later in the script it is renamed based on line 37 in the script.  All that works fine. </p>
<p>So the seemingly simple part left that I can't seem to figure out is how to take this one file and move it to a directory where it belongs. That directory is created based on the same line in that the file gets its name from (code starts on line 82). How do I simply move my file into a directory that has been created by the script, i.e. based on a variable (code starts on line 84 for this) so the name of the file is based on a variable. </p>
<pre><code>    import shutil
    #below is where your modified file sits, before we move it into it's own     directory named dst, based on a variable #mainnewdir 
    srcdir = r'C:\python 3.5/'+(justfilename)
    dst = (mainnewdir)+(justfilename)
    shutil.copyfile(src, dst)
</code></pre>
<ol>
<li>Why does it format it with extra <code>\</code> in the code?</li>
<li>Why does it seem to not give me a error if I use a <code>/</code> vs. a <code>\</code> slash? </li>
</ol>
<p>Here is the entire code, like I said only the last part of moving the file does not work: </p>
<pre><code>    import os
    import linecache
    import sys
    import string
    import re

    ## information/replacingvalues.txt this is the text of the values you         want in your final document
    #information = open("C:\python 3.5\replacingvalues.txt", 'r')
    information = open("C:\python 3.5/replacingvalues.txt", 'r')
    # information = open("C:\Program Files (x86)\Python35-        32\Scripts\Text_Find_and_Replace\information/replacingvalues.txt",

    # Text_Find_and_Replace\Result/output.txt This is the dir and the sum or         final document


    # output = open("C:\python 3.5\output.ahk", 'w')
    createblank = open ("C:\python 3.5/output.ahk", 'w')
    createblank.close()
    output = open("C:\python 3.5\output.ahk", 'w')
    # field = open("C:\Program Files (x86)\Python35-        32\Scripts\Text_Find_and_Replace\Field/values.txt"
    # Field is the file or words you will be replacing
    field = open("C:\python 3.5/values.txt", 'r')


    # modified code for autohot key
    # Text_Find_and_Replace\Test/remedy line 1.ahk is the original doc you want modified
    with open("C:\python 3.5/remedy line 1.ahk", 'r') as myfile:
    inline = myfile.read()
    ## remedy line 1.ahk

    informations = []
    fields = []
    dictionary = {}
    i = 0

    for line in information:
        informations.append(line.splitlines())

    for lines in field:
        fields.append(lines.split())
        i = i + 1;

    if (len(fields) != len(informations)):
        print("replacing values and values have different numbers")
        exit();
    else:
        for i in range(0, i):
            rightvalue = str(informations[i])
            rightvalue = rightvalue.strip('[]')
            rightvalue = rightvalue[1:-1]

            leftvalue = str(fields[i])
            leftvalue = leftvalue.strip('[]')
            leftvalue = leftvalue.strip("'")

            dictionary[leftvalue] = rightvalue

            robj = re.compile('|'.join(dictionary.keys()))
            result = robj.sub(lambda m: dictionary[m.group(0)], inline)

       output.write(result)
        information.close;
        output.close;
        field.close;
        output.close()

    import os
    import linecache
    linecache.clearcache()
    newfilename= linecache.getline("C:\python 3.5/remedy line 1.txt",37)
    filename = ("C:\python 3.5/output.ahk")
    os.rename(filename, newfilename.strip())
    #os.rename(filename, newfilename.strip()+".ahk")
    linecache.clearcache()


    ############## below will create a new directory based on the the word         or words in line 37 of the txt file.

    newdirname= linecache.getline("C:\python 3.5/remedy line 1.txt",37)
    #newpath = r'C:\pythontest\automadedir'
    #below removes the /n ie new line raw assci
    justfilename = (newdirname).strip()
    #below removes the .txt from the rest of the justfilename..
    autocreateddir = (justfilename).strip(".txt")
    # below is an example of combining a string and a variable
    # below makes the variable up that will be the name of the new directory         based on reading line 37 of a text file above

    mainnewdir= r'C:\pythontest\automadedir/'+(autocreateddir)
    if not os.path.exists(mainnewdir):
        os.makedirs(mainnewdir)

        linecache.clearcache()
    # ####################################################
    #below is where your modified file sits, before we move it into it's own         directory named dst, based on a variable #mainnewdir
    srcdir = r'C:\python 3.5/'+(justfilename)
    dst = (mainnewdir)+(justfilename)
    shutil.copyfile(src, dst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>backslashes do not have a mind of their own.</p>
<p>When you paste windows paths as-is and they contain <code>\n</code>, <code>r</code>, <code>\b</code>, <code>\x</code>, <code>\v</code>, <code>\U</code> (python 3), (refer to <a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">table here</a> for all of them), you're just using escape sequences without noticing it.</p>
<p>When the escape sequence doesn't exist (ex <code>\p</code>) it works. But when it's known the filenames are often invalid. Which explains the apparent randomness of the issue.</p>
<p>To be able to safely paste windows paths without changing/escaping them, just use the <em>raw</em> prefix:</p>
<pre><code>my_file = r"C:\temp\foo.txt"
</code></pre>
<p>so the backslashes won't be interpreted. One exception though: if string ends with backslash you still have to double it.</p>
</div>
<span class="comment-copy">You have asked two questions here, one about backslash representation and one about copying a file, both of which could be answered by some pretty basic research. Also note that this is not a forum, and therefore much of your content was not appropriate; see <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">I suggest you also make use of the <a href="https://docs.python.org/3/library/os.path.html?highlight=os.path.join#os.path.join" rel="nofollow noreferrer"><code>os.path.join()</code></a> function for building filenames.</span>
