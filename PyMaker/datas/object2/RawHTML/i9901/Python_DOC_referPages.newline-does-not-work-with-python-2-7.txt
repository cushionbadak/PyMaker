<div class="post-text" itemprop="text">
<p>So I wrote a python script that formats a text file so I can import into my SQL. I am using python 3.5 and my code works perfectly. </p>
<p>However, When I try to run my code in python 2.7, it does not work and it throws this error. ( I have to use 2.7) I did not know this till after.</p>
<pre><code>TypeError: 'newline' is an invalid keyword argument for this function.
</code></pre>
<p>Is there a way around this, if I don't use newline, it skips rows in my data and it shows as a blank row.</p>
<p>Here is my code:</p>
<pre><code>import csv
import os


my_file_name = os.path.abspath('NVG.txt')
cleaned_file = "cleanNVG.csv"
BulkImport_file = 'BulkImport.txt'
remove_words = ['INAC-EIM','-INAC','TO-INAC','TO_INAC','SHIP_TO-inac','SHIP_TOINAC']


with open(my_file_name, 'r', newline='') as infile, open(cleaned_file, 'w',newline='') as outfile:
    writer = csv.writer(outfile)
    cr =  csv.reader(infile, delimiter='|')
    writer.writerow(next(cr)[:25])
    for line in (r[0:25] for r in cr):

        if not any(remove_word in element for element in line for remove_word in remove_words):
         line[11]= line[11][:5]

         writer.writerow(line)
infile.close()
outfile.close()

with open(cleaned_file, 'r') as fin, open(BulkImport_file, 'w') as fout:
        reader = csv.DictReader(fin)
        writer = csv.DictWriter(fout, reader.fieldnames, delimiter='|')
        writer.writeheader()
        writer.writerows(reader)
</code></pre>
<p>How can I modify my code so it's compatible with python 2.7. Thanks so much!</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer: use <code>io.open</code> which has the same signature as python 3's <code>open</code>.</p>
<p>The <code>csv</code> module handles line ending for you so that it can deal with line endings different than local file system encodings. For instance, a dialect may want to write <code>\r\n</code> line endings even on linux. In python 2, the solution was to open files in binary mode.</p>
<p>In python 3, things are different. Files opened in binary mode return <code>bytes</code> objects that need decoding to become unicode string objects. You can open in text mode, but that does two things - decoding and newline translation. So the <code>newline</code> keyword was invented. It lets you open in text mode for decoding but leaves the newline terminator in the string.</p>
<p>This functionality is also available in the <code>io.open</code> function available on both python 2 and 3. You can use that function to get what you want. Notice that you also need to make some sort of a decoding decision. By default its whatever <code>sys.getfilesystemencoding()</code> returns. You may need to make a decision about how you are encoding your csv files in the first place and use that encoding in your files.</p>
</div>
<span class="comment-copy">There is no <code>newline</code> argument in python 2.7 <code>open</code> function</span>
<span class="comment-copy">Is there an argument similar to newline for python 2.7?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">Python 3.5 Open function doc</a></span>
<span class="comment-copy">What character delineates a line/row in your file?</span>
<span class="comment-copy">I'm not sure why you need <code>newline=''</code>. It puts the object in universal newline mode and returns the newline characters unchanged. So, for instance, <code>\r\n</code> remains. But the csv reader strips the newline so its not really needed. If you open the file in <code>"rU"</code> mode, you get universal newlines but they are translated to <code>\n</code>. But who cares, the csv reader is okay with that. Try opening in <code>"rU"</code> mode.</span>
<span class="comment-copy">.. sixth paragraph in <a href="https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data" rel="nofollow noreferrer">Text versus Binary data</a> of the Porting Python 2 to 3 HOWTO</span>
