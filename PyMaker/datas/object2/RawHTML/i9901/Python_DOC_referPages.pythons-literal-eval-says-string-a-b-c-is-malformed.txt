<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval</code></a> documentation states:</p>
<blockquote>
<p>Safely evaluate an expression node or a <strong>Unicode</strong> or Latin-1 encoded string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: <strong>strings</strong>, numbers, <strong>tuples</strong>, lists, dicts, booleans, and None.</p>
</blockquote>
<p>I want to parse a unicode string representing a tuple. Why do I get <code>ValueError: malformed string</code> for the following inputs?</p>
<pre><code>print literal_eval(unicode('abc')) 
print literal_eval(unicode('c,d,e'))
</code></pre>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.5/ast.py", line 84, in literal_eval
    return _convert(node_or_string)
  File "/usr/lib/python3.5/ast.py", line 55, in _convert
    return tuple(map(_convert, node.elts))
  File "/usr/lib/python3.5/ast.py", line 83, in _convert
    raise ValueError('malformed node or string: ' + repr(node))
ValueError: malformed node or string: &lt;_ast.Name object at 0x7f1da47e7860&gt;
</code></pre>
<p>However, this example does work:</p>
<pre><code>print literal_eval(unicode('1,2,3'))
(1, 2, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>literal_eval</code> only parses <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">literals</a>.  Your string is a tuple of variable names (<code>abc</code>, <code>c</code>, <code>d</code>, <code>e</code>).  Instead, you want either a tuple of strings or a string with commas.  Either one requires two levels of quotes.</p>
<pre><code># string
print(literal_eval("'abc'"))
'abc'
print(literal_eval("'c,d,e'"))
'c,d,e'

# tuple of strings
print(literal_eval("'c','d','e'"))
('c', 'd', 'e')
</code></pre>
<p>Your last example is a tuple of ints, which are all literals, so it parses successfully.</p>
</div>
