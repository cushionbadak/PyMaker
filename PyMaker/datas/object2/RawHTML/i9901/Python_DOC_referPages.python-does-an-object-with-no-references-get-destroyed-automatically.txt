<div class="post-text" itemprop="text">
<p>When are objects garbage collected in python? When is the memory released and does the collection impact performance? Can one opt out or tune the gc algorithm and if so how?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an excerpt from the <a href="http://docs.python.org/reference/datamodel.html" rel="nofollow noreferrer">language reference</a></p>
<blockquote>
<p>Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. <strong>An implementation is allowed to postpone garbage collection or omit it altogether</strong> â€” it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable. </p>
<p><strong>CPython implementation detail</strong>: CPython currently uses a reference-counting scheme with (optional) delayed detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not guaranteed to collect garbage containing circular references. See the documentation of the gc module for information on controlling the collection of cyclic garbage. Other implementations act differently and CPython may change. Do not depend on immediate finalization of objects when they become unreachable (ex: always close files).</p>
</blockquote>
<p>EDIT: About postponing garbage collection .... the <a href="http://docs.python.org/library/gc.html" rel="nofollow noreferrer"><code>gc</code></a> module allows you to interact with the garbage collector, and disable it if you want to and change collection frequency etc. But I have not used it myself. Also, cycles that contain any objects with <code>__del__</code> methods <a href="https://docs.python.org/3/library/gc.html#gc.garbage" rel="nofollow noreferrer">are not collected</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>When are objects garbage collected in python?</strong></p>
<p>There is a lot of detail in the source code for CPython: <a href="http://svn.python.org/view/python/trunk/Modules/gcmodule.c?revision=81029&amp;view=markup" rel="noreferrer">http://svn.python.org/view/python/trunk/Modules/gcmodule.c?revision=81029&amp;view=markup</a></p>
<p>Any time a reference count drops to zero, the object is immediately removed.</p>
<blockquote>
<p>293            /* Python's cyclic gc should never see an incoming refcount</p>
<p>294             * of 0:  if something decref'ed to 0, it should have been</p>
<p>295             * deallocated immediately at that time.</p>
</blockquote>
<p>A full collection is triggered when the number of new objects is greater than 25% of the number of existing objects. </p>
<blockquote>
<p>87       In addition to the various configurable thresholds, we only trigger a</p>
<p>88       full collection if the ratio</p>
<p>89        long_lived_pending / long_lived_total</p>
<p>90       is above a given value (hardwired to 25%).</p>
</blockquote>
<p><strong>When is the memory released?</strong></p>
<p>I was only able to fish out this information.</p>
<blockquote>
<p>781   /* Clear all free lists</p>
<p>782    * All free lists are cleared during the collection of the highest
  generation.</p>
<p>783    * Allocated items in the free list may keep a pymalloc arena
  occupied.</p>
<p>784    * Clearing the free lists may give back memory to the OS earlier.</p>
<p>785    */</p>
</blockquote>
<p>According to this, Python may be keeping your object in a free list for recycling even if you drop its refcount to zero. I am unable to explicitly find when the free call is made to give memory back to the operating system, but I imagine that this is done whenever a collection is made and the object is not being kept in a free list.</p>
<p><strong>Does the collection impact performance?</strong></p>
<p>Any non-trivial garbage collector I have heard of requires both CPU and memory to operate. Therefore, yes, there is always an impact on performance. You'll have to experiment and get to know your garbage collector.</p>
<p>Programs that require real time responsiveness I have run into issues with, since garbage collectors don't grant me control over when they run or for how long they do. Some peculiar cases can cause excessive memory use as well, an example being Python's knack for keeping free lists.</p>
</div>
<span class="comment-copy">Nice, although quite fauge. Any idea how you emit or postpone gc?</span>
<span class="comment-copy">This is a different question Matt Alcock and the answer is available.</span>
<span class="comment-copy">Often high performance systems will want to emit gc to guarentte consistent performance imagine a flight control system timing out for a bit whilst it did garbage collection?</span>
<span class="comment-copy">@MattAlcock Added details about <code>gc</code> module in the post.</span>
<span class="comment-copy">@MattAlcock: Often high performance systems do not use <b>any</b> dynamic memory allocation of any kind.  When I made radars and sonars, the data structures were strictly statically allocated.  The very idea of using any dynamic memory allocation in a high performance system seems contradictory.  Turning off garbage collection in Python is traditionally done by writing performance-critical code in C and calling that from Python.</span>
<span class="comment-copy">Link is expired</span>
