<div class="post-text" itemprop="text">
<p>i really dont how to phrase this properly so I apologise in advance. 
So lets say i have 2, 1D arrays</p>
<pre><code>array1 = [2000, 2100, 2800]
array2 =[20, 80, 40]
</code></pre>
<p>Now how do i convert them into an 2d array in python like shown below</p>
<pre><code>2dArray = [[2000, 20], [2100, 80], [2800, 40]]
</code></pre>
<p>So 2 id arrays to look like the one above in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple NumPy solution - <code>np.array([...]).T</code>:</p>
<pre><code>In [6]: np.array([a1, a2]).T
Out[6]:
array([[2000,   20],
       [2100,   80],
       [2800,   40]])
</code></pre>
<p>Another NumPy solution, which uses <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html" rel="nofollow noreferrer">vstack()</a> method:</p>
<pre><code>In [142]: np.vstack((array1, array2)).T
Out[142]:
array([[2000,   20],
       [2100,   80],
       [2800,   40]])
</code></pre>
<p>or using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html" rel="nofollow noreferrer">np.column_stack()</a>:</p>
<pre><code>In [144]: np.column_stack([array1, array2])
Out[144]:
array([[2000,   20],
       [2100,   80],
       [2800,   40]])
</code></pre>
<p>Another "slow" solution would be to use built-in <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> function?</p>
<pre><code>In [131]: np.array(list(zip(array1, array2)))
Out[131]:
array([[2000,   20],
       [2100,   80],
       [2800,   40]])
</code></pre>
<p>Explanation:</p>
<pre><code>In [132]: list(zip(array1, array2))
Out[132]: [(2000, 20), (2100, 80), (2800, 40)]
</code></pre>
<p><strong>Timing</strong> for two 1M elements arrays:</p>
<pre><code>In [145]: a1 = np.random.randint(0, 10**6, 10**6)

In [146]: a2 = np.random.randint(0, 10**6, 10**6)

In [147]: a1.shape
Out[147]: (1000000,)

In [148]: a2.shape
Out[148]: (1000000,)

In [149]: %timeit np.array(list(zip(a1, a2)))
1 loop, best of 3: 1.78 s per loop

In [150]: %timeit np.vstack((a1, a2)).T
100 loops, best of 3: 6.4 ms per loop

In [151]: %timeit np.column_stack([a1, a2])
100 loops, best of 3: 7.62 ms per loop

In [14]: %timeit np.array([a1, a2]).T
100 loops, best of 3: 6.36 ms per loop     # &lt;--- WINNER!
</code></pre>
</div>
<span class="comment-copy">yes thank you so much, please can explain it a little bit thank you</span>
<span class="comment-copy">Thank you soo much! God Bless</span>
<span class="comment-copy">@SamuelVarghese, you are welcome :)</span>
<span class="comment-copy">@MaxU interestingly - I get the opposite... <code>%timeit np.vstack((a1, a2)).T</code> -&gt; <code>100000 loops, best of 3: 14.4 µs per loop</code> and <code>%timeit np.column_stack([a1, a2])</code> -&gt; <code>100000 loops, best of 3: 11.4 µs per loop</code>...</span>
<span class="comment-copy">@Eric, thank you! I've added it to the answer.</span>
