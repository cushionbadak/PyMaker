<div class="post-text" itemprop="text">
<p>In a python project, how do I setup a project-wide "data" folder, accessible from every module? I don't have a single entry point in my program, so I cannot do something like global (dataFolderPath). I would like for every module to know where the data folder is (without hardcoding the path in every module!), so it can load and write the data it needs. I'm using python 3.5 on a mac. </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not python specific, but if you want to share a config globally among your programs you could set up a environment variable like MYPROJECT_DATA_PATH and all your scripts check this variable before loading the data. Or you could write a config file which all your programs know the location. Or both, a environment variable with the path of the config file, where you can fine-tune it for your needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should rather make a module that acts as a data provider. Only this module should be interested in where your data is. </p>
<p>Your current approach is wrong. Whenever you decide to change the location or format of your data you will have to change every module that uses this data.</p>
<p>//Edit:
After creating  a module there you can get it's location with:</p>
<pre><code>import data_module
import os

path = os.path.dirname(data_module.__file__)
</code></pre>
<p>Now you have a absolute path to some project subdir. From here you can point to any other dir in your project using relative path.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get data installed relative to your Python module, you could use <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.get_data" rel="nofollow noreferrer"><code>pkgutil.get_data()</code></a> or setuptools' <a href="https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api" rel="nofollow noreferrer"><code>pkg_resources.resource_string()</code></a>. This works even if your <a href="https://stackoverflow.com/q/5355694/4279">module is packaged as a zip archive</a>.</p>
<p>To find out an appropriate place to put user data, you could <a href="https://pypi.python.org/pypi/appdirs" rel="nofollow noreferrer">use <code>appdirs</code> module for portability</a>:</p>
<pre><code>import appdirs   # $ pip install appdirs

user_data_dir = appdirs.user_data_dir("App name", "Author")
</code></pre>
<p>To avoid duplicating the logic of where to put data in a way that is optimal for your specific application, you could create an object that will be responsible for it. You could import it directly (in simple cases) e.g., <code>from custom_app import config</code> or build it during an initialization and set it as an attribute of your application object <code>app.config</code> or as a global function <code>custom_app.get_config()</code> if there is none.  </p>
<p>To get data path, ask the <code>config</code> object: <code>config.get_data_dir()</code> where <code>config</code> may return values derived from  config files (e.g., <code>~/.config/custom_app/config.yml</code>), environment variables (<code>CUSTOM_APP_DATA_DIR</code>), command-line options with/without the help of <code>pkgutil</code>/<code>pkg_resources</code>/<code>appdirs</code> modules.</p>
<p>It is not the only way to get the config info but it should be a good start that works in many cases.</p>
</div>
<span class="comment-copy">Hi guys! Why the downvote? :-)</span>
<span class="comment-copy">This data folder is a python module or just a collection of files with data?</span>
<span class="comment-copy">@rod085 It's just a collection of files with data (even though this data may be instances of python object saved with pickle.dump)</span>
<span class="comment-copy">Uhm, this is interesting, even though I was hoping not to mess with the environment variables for something this trivial..</span>
<span class="comment-copy">But there are different types of data, and some modules have to load some data and some have to write some data, and so on. Having a single module with all of that seems a little confusing. The data are different in types also; if I change the format of some data, I only need to change the module that deals with that type of data. But still I want all the data in a single folder (or in subfolder of a single folder) for clarity. Don't you agree?</span>
<span class="comment-copy">@Ant: check my updated answer</span>
<span class="comment-copy">Thank you for the answer; I was aware of this possibility, but I discarded it because I would need to hardcode the relative path in each module (i.e. If I change the module location, or the data folder location inside the project structure, i would need to manually modify each file).</span>
<span class="comment-copy">@Ant: I mean rather having a one module that you are able to import from every other place</span>
<span class="comment-copy">I didn't get your last comment, sorry! Could you clarify? :)</span>
