<div class="post-text" itemprop="text">
<p>I am familiar with how the split() function works if you implement it like this:</p>
<pre><code>def sayHello():
    name = input("whats youÂ´re name?:" )
    print("hello", name) 
</code></pre>
<p>In this case the input function only wants one input from user.
But what actually happens in this case?</p>
<pre><code>def test():
    str1, str2 = input().split()
    print(str1, str2) 
</code></pre>
<p>The syntax: </p>
<pre><code>a, b = input()
</code></pre>
<p>Is this a way to ask the user for 2 inputs at the same time or when would you use this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is only working with a string of length 2.</p>
<p>Just try such things in ipython:</p>
<pre><code>In [9]: a, b = input()
"hallo"
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-9-3765097c12c0&gt; in &lt;module&gt;()
----&gt; 1 a, b = input()

ValueError: too many values to unpack

In [10]: a, b = input()
"ha"

In [11]: a
Out[11]: 'h'

In [12]: b
Out[12]: 'a'

In [13]: a, b = input()
"a"
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-13-3765097c12c0&gt; in &lt;module&gt;()
----&gt; 1 a, b = input()

ValueError: need more than 1 value to unpack
</code></pre>
<p>So no, this not a correct way to ask for 2 inputs.</p>
</div>
<div class="post-text" itemprop="text">
<p>This does different things on Python 2 and Python 3.</p>
<p>Python 3's <code>input()</code> is Python 2's <code>raw_input()</code>, and will always return a string.</p>
<p>When you do a tuple unpacking as in <code>a, b, = (1, 2)</code>, the amount of elements on the right must match the amount of names on the left.  If they don't, you'll get a <code>ValueError</code>.  As strings are iterable, <code>a, b = input()</code> will work, if the user enters a two character long string.  Any other string will crash your program.</p>
<p>To ask your user for more than one input at once, clearly define the format in the prompt, e.g., <code>inp = input('Please input your first and last name, separated by a comma:  ')</code>, then parse the input afterwards:  <code>first_name, last_name = inp.split(',')</code>.</p>
<p>Note that this will still crash your program if they enter an incorrect string, with more or less than one comma, but that's reasonably simple to check for, notify the user, and try again.</p>
<p>On Python 2, <code>input()</code> attempts to coerce the value to a natural Python value, so if the user inputs <code>[1, 2]</code>, <code>input()</code> will return a Python list.  This is a bad thing, as you will still need to validate and sanitise the user data yourself, and you may have wanted <code>"[1, 2]"</code> instead.</p>
</div>
<span class="comment-copy">This is a special case of assignment described in the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">reference</a> ('If the target list is a comma-separated list of targets...') and commonly referred to as <a href="https://en.wikibooks.org/wiki/Python_Programming/Tuples#Packing_and_Unpacking" rel="nofollow noreferrer">unpacking</a>.</span>
<span class="comment-copy">thank for your help! but when I try this                                                               c, d = input() in the console and then enter 2 3 or 2, 3 it reads Valuerror too many values to unpack. why is this ?</span>
<span class="comment-copy">Assuming you're on Python 3, it's because entering <code>2, 3</code> causes <code>input()</code> to return <code>"2, 3"</code>, which is a string, an iterable, of length 4.  <code>c, d = "2, 3"</code> sets <code>c = "2"</code>, <code>d = "3"</code>, then runs out of variables, but still has some string left to consume.  What you'll want to do is <code>c, d = input().split(',')</code> or <code>inp = input()</code> then <code>c, d = inp.split(',')</code> if that makes more sense to you.</span>
