<div class="post-text" itemprop="text">
<p>I was examining a code written in python but I got confused with the following line.</p>
<pre><code>return ( reduce(lambda x, y: x + y[0],myList, 0)/len(Actions), )
</code></pre>
<p>This code takes x and y as an input sums x and y's first element. After that  I think it reduces myList to the value of x+y[0] . How can I accomplish this with using list comprehension instead of using lambda.</p>
</div>
<div class="post-text" itemprop="text">
<p>The part that corresponds well to a list comprehension is what the reducing function does with its second argument <code>y</code>:</p>
<pre><code>tmp = [ y[0] for y in myList ]
</code></pre>
<p>The reducing function then combines this list one element at a time with the "accumulator" <code>x</code>:</p>
<pre><code>x = 0  # The third argument to reduce
tmp = [ y[0] for y in myList ]
for y in tmp:
    x += y
</code></pre>
<p>or more simply</p>
<pre><code>x = 0
for y in myList:
    x += y[0]
</code></pre>
<p>or, as you have probably recognized by now</p>
<pre><code>sum(y[0] for y in myList)
</code></pre>
</div>
<span class="comment-copy">Did you read the documentation on what <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a> does?</span>
<span class="comment-copy"><code>reduce</code> uses your <code>lambda</code> and repeat it on all elements from <code>myList</code> - every time it reduce two elements into one element.</span>
<span class="comment-copy">Yes and I already explained what reduce does. What I need is converting this to a list comprehension. I come from a java background so I am not familiar with this terms.</span>
<span class="comment-copy"><code>reduce(lambda x, y: x + y[0],myList, 0)</code> ==  <code>sum(y[0] for y in myList)</code> or other <code>sum( [y[0] for y in myList] )</code></span>
<span class="comment-copy">This is correct, I upvoted it but the [ symbol before y[0] is wrong I think.</span>
<span class="comment-copy">I understood the code you and furas wrote but I still have a little problem in understanding  what 0 means in myList,0. Also there is a  /lengthOfList in there. So my new list should be defined by myList = sum(y[0] for y in myList) and my return value should be  myList / len(Actions). Am I correct?</span>
<span class="comment-copy">Exactly right. Regarding the 0, it's just the value passed as the <code>x</code> argument the first time the function is called. Without a third argument, the function is called on the first two list items first, then on the previous result and the next list element on successive calls. Put another way, <code>reduce(f, lst) == reduce(f, lst[1:], lst[0])</code>. (Note this means that without a third argument, the list cannot be empty; <code>reduce</code> raises a <code>TypeError</code> in that case.)</span>
<span class="comment-copy">It seems my comment to you had one mistake. Since there is a ,[] at the end of the line I should return  [myList/lenActions(), []). I accept your answer</span>
