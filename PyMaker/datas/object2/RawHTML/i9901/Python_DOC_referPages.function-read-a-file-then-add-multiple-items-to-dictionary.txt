<div class="post-text" itemprop="text">
<p>Trying create a function to read a file and add additional multiple items to it into an organized dictionary then return it without changing the original dictionary. Not sure if I'm doing it correctly with the multiple items and values.</p>
<p>Returns:</p>
<pre><code>{'Leonardo da Vinci': [("Portrait of Isabella d'Este", 1499, 63.0, 46.0, 'chalk', 'France'), ('The Last Supper', 1495, 460.0, 880.0, 'tempera', 'Italy')], 'Pablo Picasso': [('Guernica', 1937, 349.0, 776.0, 'oil paint', 'Spain')]}
</code></pre>
<p>Example file:</p>
<pre><code>file1='''"Artist","Title","Year","Total Height","Total Width","Media","Country"
"Pablo Picasso","Guernica","1937","349.0","776.0","oil paint","Spain"
"Leonardo da Vinci","The Last Supper","1495","460.0","880.0","tempera","Italy"'''
</code></pre>
<p>Code I have so far:</p>
<pre><code>def add_work (db,artist,title,year,height,width,media,country):
db = {}
    with open(filename) as f:
    for line in f:
        (title, year, height, width, media, country) = line.split()
        db[int(artist)] = (title, year, height, width, media, country)
        for i in d.keys():
            if i == artist #If artist in dictionary, then add it to item.
                db[i].extend
            elif i == title #If it has the same title as in the database, its a duplicate so return none.
                return None
add_work(d1,"Leonardo   da  Vinci","Portrait of Isabella d'Este", 1499, 63.0,46.0, "chalk", "France")
</code></pre>
<p>Restrictions:</p>
<ol>
<li><p>Asciibetical order:  Is sorted in ASCII
collated order rather than alphabetical order.</p></li>
<li><p>No imports/collections/modules. Just basic built in functions, loops, and dict methods.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>As we discussed in the comments, your main problem is figuring out where to place the new painting in the list of an artist's paintings based on it's title.</p>
<p><strong>It appears to me, that this is some kind of a homework question, since there is no reason for these constraints in a real world setting. Because of that I'm not going to give you the full solution, but point you in the right direction (at least I'll try to).</strong></p>
<p>Your algorithm should look something like this:</p>
<ol>
<li><p>Get a dictionary with the name of the artist as the key and a list of his paintings as values. Each painting consists of <code>title</code>, <code>year</code>, <code>height</code>, <code>width</code>, <code>media</code> and <code>country</code>.</p></li>
<li><p>Given a new set of <code>artist</code>, <code>title</code>, <code>year</code>, <code>height</code>, <code>width</code>, <code>media</code> and <code>country</code> you retrieve the list of that artists work.</p></li>
<li><p>Now your problem is to find out where to add the new painting (if it doesn't already exist).</p></li>
<li><p>You loop through all paintings in the aforementioned list. For each entry you check if the <code>title</code> of the new work should be inserted before the current <code>title</code> using the <code>compare_to</code>-function below. If yes (<code>-1</code>) you insert it. If the result is <code>0</code> it is already in the list and you return the dictionary. If the result is <code>1</code> you move on to the next item of the list. If there are no more items you append it to the end.</p></li>
</ol>
<p>This is the <code>compare_to</code> function:</p>
<pre><code>def compare_to(string_1, string_2):
    """
    This functions returns -1 if string_1 should be inserted before string_2,
    0 if the strings are the same (in which case it doesn't matter - or this
    shouldn't happen) and 1 if string_1 is supposed to be inserted after
    string_2.
    """
    abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    if string_1 == string_2:
        return 0

    for i in range(min(len(string_1), len(string_2))):
        if abc.index(string_1[i]) &lt; abc.index(string_2[i]):
            return -1

    # The strings are not the same, the shorter one should come first
    if len(string_2) &gt; len(string_1):
        return -1

    return 1
</code></pre>
<p>I don't know how you'd like to handle numbers in the comparison, feel free to add them to the <code>abc</code> variable.</p>
</div>
<span class="comment-copy">What is the difference between "ASCII collated order" and "alphabetical order"? Do you mean all upper-case letters come before all lower-case letters? Or does this relate to the non-alphabetic characters? Or both?</span>
<span class="comment-copy">Yes @RoryDaulton all upper-case letters come before all lower-case letters. Doesn't relate to non-alphabetic characters</span>
<span class="comment-copy">I don't really get what you're trying to do, but <code>db[int(artist)] = ...</code> should raise a <code>ValueError</code>, since the artists name won't be an integer - please try to clarify what it is that you're trying to do. Are you reading data from a csv-File and correlating all the painting of an artist as elements in a list?</span>
<span class="comment-copy">Reading from a CSV-file and creating a dictionary of all the artists and their works with title, year, height, width, media, country. And the function I'm testing adds an additional work of an artist into the dictionary and sorts it into the correct location (Adding another Leonardo da Vinci work).</span>
<span class="comment-copy">So your key problem is figuring out, where to insert the new painting in the list of a painter's paintings based on it's title? Please edit your question and add this.</span>
<span class="comment-copy">Thanks for the detailed explanation. I have a question, this applies to any key position so can I decide to accept the dictionary and a country (for example) name so that it builds/returns a new dictionary with all works from dictionary whose country matches the given country argument?</span>
<span class="comment-copy">You're welcome. Yes, this is possible, you can loop through all keys of your dict and filter the values of the list with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. This is however another question and nothing I can explain to you in a comment ;-)</span>
<span class="comment-copy">No problem, I managed to make it work out in the end.</span>
<span class="comment-copy">Do you mind sharing what this problem is about? I just saw two similar questions (see linked) - just out of curiosity.</span>
