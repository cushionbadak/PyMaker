<div class="post-text" itemprop="text">
<p>I've written a function that currently reads a file correctly but there are a couple of problems. It needs to be returned as a dictionary where the keys are artist names and the values are lists of tuples (not sure about this but that appears to be what its asking)</p>
<p>The main problem I'm having is that I need to somehow skip the first line of the file and I'm not sure if I'm returning it as a dictionary. Here is an example of one of the files:</p>
<pre><code>"Artist","Title","Year","Total  Height","Total  Width","Media","Country"
"Pablo Picasso","Guernica","1937","349.0","776.0","oil  paint","Spain"
"Vincent van Gogh","Cafe Terrace at Night","1888","81.0","65.5","oil paint","Netherlands"
"Leonardo da Vinci","Mona Lisa","1503","76.8","53.0","oil paint","France"
"Vincent van Gogh","Self-Portrait with Bandaged Ear","1889","51.0","45.0","oil paint","USA"
"Leonardo da Vinci","Portrait of Isabella d'Este","1499","63.0","46.0","chalk","France"                
"Leonardo da Vinci","The Last Supper","1495","460.0","880.0","tempera","Italy"
</code></pre>
<p>So I need to read an input file and convert it into a dictionary that looks like this:</p>
<pre><code>sample_dict = {
        "Pablo Picasso":    [("Guernica", 1937, 349.0,  776.0, "oil paint", "Spain")],
        "Leonardo da Vinci": [("Mona Lisa", 1503, 76.8, 53.0, "oil paint", "France"),
                             ("Portrait of Isabella d'Este", 1499, 63.0, 46.0, "chalk", "France"),
                             ("The Last Supper", 1495, 460.0, 880.0, "tempera", "Italy")],
        "Vincent van Gogh": [("Cafe Terrace at Night", 1888, 81.0, 65.5, "oil paint", "Netherlands"),
                             ("Self-Portrait with Bandaged Ear",1889, 51.0, 45.0, "oil paint", "USA")]
      }
</code></pre>
<p>The main problem I'm having is skipping the first line that says "Artist","Title", etc. and only returning the lines after the first line. I'm also not sure if my current code is returning this as a dictionary. Here's what I have so far</p>
<pre><code>def convertLines(lines):
    head = lines[0]
    del lines[0]
    infoDict = {}
    for line in lines: #Going through everything but the first line
        infoDict[line.split(",")[0]] = [tuple(line.split(",")[1:])]
    return infoDict

def read_file(filename):
    thefile = open(filename, "r")
    lines = []
    for i in thefile:
        lines.append(i)
    thefile.close()
    mydict = convertLines(read_file(filename))
    return lines
</code></pre>
<p>Would just a couple small changes to my code return the correct result or would I need to approach this differently? It does appear that my current code reads the full file but how would I skip the first line and possibly return in dict representation if it isnt already? Thanks for any help</p>
</div>
<div class="post-text" itemprop="text">
<p>First thing we do is delete the first line of the list. </p>
<p>Then we run a function to do exactly as you say, make a dictionary with list of tuples as values. </p>
<p>You can keep the function you have and run this operation on the lines variable. </p>
<p>Alright run the following code and you should be good</p>
<pre><code>def convertLines(lines):
    head = lines[0]
    del lines[0]
    infoDict = {}
    for line in lines: #Going through everything but the first line
        infoDict[line.split(",")[0]] = [tuple(line.split(",")[1:])]
    return infoDict

def read_file(filename):
    thefile = open(filename, "r")
    lines = []
    for i in thefile:
        lines.append(i)
    thefile.close()
    return lines

mydict = convertLines(read_file(filename))
print(mydict)
#Do what you want with mydict below this line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should try this. I found it very simple</p>
<pre><code>import csv
from collections import defaultdict

d_dict = defaultdict(list)
with open('file.txt') as f:
    reader = csv.reader(f)
    reader.next()
    for i in list(reader):
        d_dict[i[0]].append(tuple(i[1:]))

print dict(d_dict)
</code></pre>
<p>Output :</p>
<pre><code>{
  'Vincent van Gogh': [
    ('Cafe Terrace at Night', '1888', '81.0', '65.5', 'oil paint', 'Netherlands'),
    ('Self-Portrait with Bandaged Ear', '1889', '51.0', '45.0', 'oil paint', 'USA')
  ],
  'Pablo Picasso': [
    ('Guernica', '1937', '349.0', '776.0', 'oil  paint', 'Spain')
  ],
  'Leonardo da Vinci': [
    ('Mona Lisa', '1503', '76.8', '53.0', 'oil paint', 'France'),
    ("Portrait of Isabella d'Este", '1499', '63.0', '46.0', 'chalk', 'France'),
    ('The Last Supper', '1495', '460.0', '880.0', 'tempera', 'Italy')
  ]
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> module provides helpful tools for processing CSV files. The following should do:</p>
<pre><code>import csv
from collections import defaultdict

def read_file(filename):
    with open(filename, 'r') as f:
        reader = csv.DictReader(f, delimiter=',')
        result_dict = defaultdict(list)
        fields = ("Title", "Year", "Total  Height", "Total  Width", "Media", "Country")
        for row in reader:
            result_dict[row['Artist']].append(
                tuple(row[field] for field in fields)
            )
    return dict(result_dict)
</code></pre>
<p>The <code>DictReader</code> uses the fields in the first line of the file as field names. It then return an iterable over the rows in the file which are yielded as <code>dicts</code> with the field names as keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>A better way of doing is :</p>
<pre><code>    with open('filename','r,') as file: # Make a file object
        items = []
        _ = file.readline()  # This will read the first line and store it in _  
                             # a variable of no use. 
        for line in file:    # Next we start the for loop to read all other  
                             # data
            item.append(line)
</code></pre>
<p>Once this code is executed the with-statement will close the file-object. So no need to do a f.close()</p>
</div>
<span class="comment-copy">This gives me a type error 'str' object doesnt support item deletion should I convert it to int?</span>
<span class="comment-copy">What are you passing into the function?</span>
<span class="comment-copy">csv files I believe I can read all of them using with open(filename, 'r') as f: I'll try adding that to your code</span>
<span class="comment-copy">When you run the function you have, you get an array of lines returned. Do something like <code>mydict = convertLines(read_file(filename))</code> and it should work</span>
<span class="comment-copy">Sorry this is so difficult but now its saying RecursionError: maximum recursion depth exceeded. I updated my code above to show how I'm running the code</span>
<span class="comment-copy">For some reason I'm getting an invalid syntax error for print dict(d_dict)</span>
<span class="comment-copy">what is 'print d_dict' giving?</span>
<span class="comment-copy">It isn't printing anything because of the syntax error</span>
<span class="comment-copy">Sorry I just realized you were asking to try it with print d_dict one second</span>
<span class="comment-copy">I posted my output above with the code i presented.</span>
<span class="comment-copy">What could "Diff is x characters long. Set self.maxDiff to None to see it." mean? I guess I will see how to set it to None. It's definitely reading each file correctly which is why I put x characters long it is a different amount for each file</span>
<span class="comment-copy">Are you running unittests with this code?</span>
<span class="comment-copy">I believe I'm running unittests when I run the file I do python testerp.py functions.py. When I set maxdiff to none in the unittest it shows that characters such as +, -, - show up and there appears to be a ton of spaces and extra lines in the output</span>
<span class="comment-copy">OK, that problem appears to be beyond the scope of this thread.</span>
<span class="comment-copy">Another way it it to a readline on the the 'the file' and then start the loop.</span>
<span class="comment-copy">Thanks for the advice for some reason I'm getting the error '_io.TextIOWrapper' object is not subscriptable</span>
<span class="comment-copy">Do you know why this could be giving the error 'builtin_function_or_method' object is not subscriptable? This function is definitely more difficult then I thought to program</span>
<span class="comment-copy">Indeed you cannot call a file object .. like a general list. So f[1:] does not work.  I've updated the code above. The first file.readline() advances the file  object to the next line. So line number 2. Then you can start the for-loop to read the rest of the file.</span>
