<div class="post-text" itemprop="text">
<p>How do I format a date and time timestamp???</p>
<p>Here is some sample data, "data1.csv":</p>
<pre><code>Mary,11/13/16 10:38
John,11/14/16 12:53
Paul,11/13/16 14:45
Ringo,11/13/16 12:17
George,11/14/16 10:15
</code></pre>
<p>I'd like to create a file with three columns.
The first column is the name.
The second column is just the date 'mm/dd/yy'.
The third column is only the time 'HH:MM', in military time.</p>
<p>Here's the code I'm working with and would like to keep.</p>
<pre><code>def process_data(raw_data):
    with open(raw_data) as inputs:
        for line in inputs:
            name, time = line.strip().split(",")
            mylist = list()
            mylist.append(name)
            mylist.append(time)    #As 'mm/dd/yy'
            mylist.append(time)    #As 'HH:MM'
            print ",".join(mylist)

if __name__ == "__main__":
    process_data("data1.csv")
</code></pre>
<p>Also, the correct way to save this to a csv file would help my sanity.<br/>
The final file should have:</p>
<pre><code>Mary,11/13/16,10:38
John,11/14/16,12:53
Paul,11/13/16,14:45
Ringo,11/13/16,12:17
George,11/14/16,10:15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you really want to do is replace the space with a comma, then the simplest method, as noted in the comments, would be</p>
<pre><code>line.strip().replace('', ',')
</code></pre>
<p>You could use Python's built-in <code>datetime</code> package to convert each string to a datetime object.  Then you can extract the parts you want when writing them to your new file.  </p>
<pre><code>import datetime.datetime as dt

name, time_string = line.strip().split(',')
time_object = dt.strptime(time_string, '%m/%d/%y %H:%M')
date = time_object.strftime('%m/%d/%y')
time = time_object.strftime('%H:%M')
</code></pre>
<p>This would give you the flexibility to easily change the formatting if you so desire.  </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>$ cat input
Mary,11/13/16 10:38
John,11/14/16 12:53
Paul,11/13/16 14:45
Ringo,11/13/16 12:17
George,11/14/16 10:15

$ cat time_.py
import csv
with open("input") as reader, open("output.csv", "w") as writer:
    writer = csv.writer(writer, delimiter=",", quoting=csv.QUOTE_NONE)
    for line in reader.readlines():
        name, time = line.strip().split(",")
        day, clock = time.split()
        writer.writerow((name, day, clock))

$ python time_.py

$ cat output
Mary,11/13/16,10:38
John,11/14/16,12:53
Paul,11/13/16,14:45
Ringo,11/13/16,12:17
George,11/14/16,10:15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this will do the job.</p>
<pre><code>from datetime import datetime
import tablib

DATE_FORMAT = '%m/%d/%y'
TIME_FORMAT = '%H:%M'

data = [
    ('Mary', '11/13/16 10:38'),
    ('John', '11/14/16 12:53'),
    ('Paul', '11/13/16 14:45'),
    ('Ringo', '11/13/16 12:17'),
    ('George', '11/14/16 10:15'),
]

results = tablib.Dataset()

for item in data:
    name, datetime_string = item
    _datetime = datetime.strptime(datetime_string, '{} {}'.format(DATE_FORMAT, TIME_FORMAT))
    date = _datetime.strftime(DATE_FORMAT)
    time = _datetime.strftime(TIME_FORMAT)

    results.append((name, date, time))

print(results.csv)
</code></pre>
</div>
<span class="comment-copy">Why don't you just do <code>line.replace(' ', ',')</code>?</span>
<span class="comment-copy">I hope you've heard about the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a>. It can help if e.g. you have a name with a comma in it.</span>
<span class="comment-copy">@user3030010 - The data is not accurate, I'm trying to manipulate 12-15 columns of data, several columns deal with time, to simply replace " " with "," is useless.</span>
<span class="comment-copy">Ok... well, I tried this for days and couldn't stop the errors. But this got it.</span>
