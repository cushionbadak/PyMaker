<div class="post-text" itemprop="text">
<p>I've found some really strange behavior in Python. 
One of my students made some kind of mistake trying to find elements which belong to two lists, he wrote: </p>
<pre><code>list1 and list2
</code></pre>
<p>The strange behavior is that no error is fired by Python 3!
<code>list1 and list2</code> actually has got a value which is <code>list2</code>.</p>
<p>Is there any known reason for this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>and</code> simply evaluates the truthness of the two values provided. 
If the first is <code>True</code> (see <code>bool(list1)</code>) the second is evaluated and returned. If the first argument is <code>False</code> (e.g <code>[] and list2</code>) its value is returned immediately.</p>
<p>In the <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">documentation on Boolean Operations</a> the rationale for this behavior is stated clearly:</p>
<blockquote>
<p>Note that neither <code>and</code> nor <code>or</code> restrict the value and type they return to <code>False</code> and <code>True</code>, but rather <em>return the last evaluated argument</em>. This is sometimes useful, e.g., if <code>s</code> is a string that should be replaced by a default value if it is empty, the expression <code>s or 'foo'</code> yields the desired value. </p>
</blockquote>
<p><sup>(Emphasis mine)</sup></p>
<p>Note that this behavior <em>isn't found</em> with <code>not</code> which, instead, returns a <code>True</code>/<code>False</code> value based on the argument provided.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well , if they both have values then the "if list1 and list2:" should return True and it will continue to the next line in the code.
Python3 considers True if a variable is different then None or 0.
Example:</p>
<pre><code>a = 1
if a: #This will be True since a is different then None or 0
    print("Works")
&gt;&gt;&gt; Works

b = 0
if b:
    print("Works")
&gt;&gt;&gt;
This one returned nothing because b is 0 wich means that the "if b" will return False.
</code></pre>
<p>Also , it will return True on lists if the list has atleast 1 element in it.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you ask <code>list1 and list2</code>, python calls the <code>__bool__</code> on <code>list1</code> and <code>list2</code>. Since <code>[]</code> evaluates to <code>False</code>, and a non-empty list evaluates to <code>True</code>, <code>and</code> looks at <code>list1</code> and <code>list2</code> in turn until it finds an empty list (or it looks at all the lists, if an empty list is never found).</p>
<p>Finally, the <code>and</code> expression evaluates to either that empty list that makes the <code>and</code> fail, or the last list in the comparison. This is why you get <code>list2</code> back as the value.</p>
<p>Interestingly, you can use this behavior to your advantage to set default values:</p>
<pre><code>def func(arg=None):
    arg = arg or [5]  # now, [5] is the default value of arg
</code></pre>
<p>This is practically the same as doing:</p>
<pre><code>def func(arg=None):
    if arg is None:
        arg = [5]
</code></pre>
</div>
<span class="comment-copy">Thanks a lot. This is exactly what I didn't understand.</span>
<span class="comment-copy">You're welcome @Coulombeau. Always peek in the Python Docs for behaviors like this, it usually is hidden somewhere in there :-)</span>
