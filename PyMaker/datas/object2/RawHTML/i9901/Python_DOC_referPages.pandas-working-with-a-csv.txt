<div class="post-text" itemprop="text">
<p>I am very new to Python. I am using Pandas to edit a csv file and I have found a function that does the job. I was wondering if anyone could tell me how to modify the function as to not update the last 2 columns on the spreadsheet, which are named (ty Daniel Himmelstein) 'Start_X', and 'Start_Y'. I need it to leave blank spaces, they will be filled in with new data later. Thank you,</p>
<p>example of the starting spreadsheet:</p>
<pre><code>AK      MINE    VET                                     X       Y
1016649 0       90;59,180;26,270;39,0;9,270;20,0;17,    482547  1710874
</code></pre>
<p>example of how it needs to be formated:</p>
<pre><code>AK      MINE    VET   VET_2     X       Y
1016649 0       90    59        482547  1710874
1016649 0      180    26
1016649 0      270    39 
1016649 0        0     9 
1016649 0      270    20
1016649 0        0    17
</code></pre>
<p>Here is the code:</p>
<pre><code>def tidy_split(df, column, sep='|', keep=False):
    """
    Split the values of a column and expand so the new DataFrame has one split
    value per row. Filters rows where the column is missing.

    Params
    ------
    df : pandas.DataFrame
        dataframe with the column to split and expand
    column : str
        the column to split and expand
    sep : str
        the string used to split the column's values
    keep : bool
        whether to retain the presplit value as it's own row

    Returns
    -------
    pandas.DataFrame
        Returns a dataframe with the same columns as `df`.
    """
    indexes = list()
    new_values = list()
    df = df.dropna(subset=[column])
    for i, presplit in enumerate(df[column].astype(str)):
        values = presplit.split(sep)
        if keep and len(values) &gt; 1:
            indexes.append(i)
            new_values.append(presplit)
        for value in values:
            indexes.append(i)
            new_values.append(value)
    new_df = df.iloc[indexes, :].copy()
    new_df[column] = new_values
    return new_df
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This sort of thing might be better handled with the <a href="https://docs.python.org/3.5/library/csv.html" rel="nofollow noreferrer">csv</a> module. Pandas is great for analyzing and manipulating data, but in this case I would properly format the file before loading into a DataFrame.</p>
<p>You could do,</p>
<pre><code>import csv

# Where the new data will be stored
data = []

# Open up the csv file
with open('file.csv', 'r') as f:
    # Go through each row
    for i, row in enumerate(csv.reader(f)):
        if i == 0:
            continue
        # Break up the row based on the columns
        ak, mine, *vet, x, y = row

        # Get VET and VET_2
        v12 = [v.split(';') for v in vet]

        # Create new rows with split values of `vet`
        for j, (v1, v2) in enumerate(v12):
            if j == 0:
                new = [ak, mine, v1, v2, x, y]
            else:
                new = [ak, mine, v1, v2, None, None] # Leave blank spaces after first value

            data.append(new)

# Write out to a new csv file
with open('new_file.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    # Write header
    writer.writerow(['AK', 'MINE', 'VET', 'VET_2', 'X', 'Y'])
    # Write data
    writer.writerows(data)
</code></pre>
<p>Using this input <code>file.csv</code>:</p>
<pre><code>AK,MINE,VET,,,,,,X,Y
1016649,0,90;59,180;26,270;39,0;9,270;20,0;17,482547,1710874
</code></pre>
<p>I get the following output <code>new_file.csv</code>:</p>
<pre><code>AK,MINE,VET,VET_2,X,Y
1016649,0,90,59,482547,1710874
1016649,0,180,26,,
1016649,0,270,39,,
1016649,0,0,9,,
1016649,0,270,20,,
1016649,0,0,17,,
</code></pre>
<p>After your csv file is formatted 'correctly', loading into pandas will be much easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>The method you're looking for is <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html" rel="nofollow noreferrer">DataFrame.stack()</a>, which changes the shape of the DataFrame from having all the "vets" in one row to each "vet" in a separate row.</p>
<p>Once you have the right shape, you can continue on to splitting the data further. This should get you started:</p>
<pre><code>s = df.VET.str.split(",").apply(pd.Series).stack()
s.index = s.index.droplevel(-1)
s = s.apply(lambda x: pd.Series(x.split(";"))).dropna()
result = df.drop("VET", axis=1).join(s)
</code></pre>
</div>
<span class="comment-copy">Is there some reason you aren't using the <code>csv</code> module?  It's really the one stop shop for manipulating csv files in python. <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">@PatrickHaugh I have edited my question to add an example of my spreadsheet. I could not find an example in the help files or cook book that aided in formatting the spreadsheet into the new arrangement. I need to explode one cell in a column to many. I tried asking a question on here and my question was given a negative number and no one helped after several days, so I was left to my own accord and this is what I was able to find. I would be very grateful I you had a better way to achieve this goal.</span>
<span class="comment-copy">I am getting a TypeError: expected at least 1 arguments, got 0 for the line "writer = csv.writer()" and it is generating a blank csv titled new_file, what can I do to fix this?</span>
<span class="comment-copy">Try it out now. Before I didn't see the <code>,</code> between the <code>;</code> in your example spreadsheet.</span>
<span class="comment-copy">Minor edits again.</span>
<span class="comment-copy">thank you for working with me. I am getting error ValueError: need more than 1 value to unpack, for line: 'for i, (v1, v2) in enumerate(v12):' I tried changing a few things but I do not have the skill set to properly debug the code.</span>
<span class="comment-copy">No problem - I think the header/first row in the csv file needed to be skipped, just updated.</span>
