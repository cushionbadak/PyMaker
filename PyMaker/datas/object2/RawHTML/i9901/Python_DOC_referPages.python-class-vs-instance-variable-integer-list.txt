<div class="post-text" itemprop="text">
<p>I'm trying to learn the difference between class variables and <strong>init</strong> ones. I understand the class variables are usually static and can change. </p>
<p>I would like to know why when you print the Variable Accounts after it had been changed by the instance of Sam it has changed for David.</p>
<p>HOWEVER, whenever you update the balance for Sam, it does not change for David. Thank you.    </p>
<pre><code>class BankAccount:
    Balance = 0
    Accounts = []

Sam = BankAccount()
David = BankAccount()

print("Sam's Balance", Sam.Balance)
print("David's Balance", David.Balance)
print("")
print("Sam's Accounts", Sam.Accounts)
print("David's Accounts", David.Accounts)


Sam.Balance = 1000
Sam.Accounts.append("Sam's Personal Checking")

print("Sam's Balance", Sam.Balance)
print("David's Balance", David.Balance)
print("")
print("Sam's Accounts", Sam.Accounts)
print("David's Accounts", David.Accounts)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To illustrate the answers given:  you can check to see if objects are the same thing using <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">id()</a> or the <a href="https://docs.python.org/3/reference/expressions.html#is-not" rel="nofollow noreferrer">is</a> operator.</p>
<pre><code>&gt;&gt;&gt; class BankAccount:
    Balance = 0
    Accounts = []


&gt;&gt;&gt; a = BankAccount()
&gt;&gt;&gt; b = BankAccount()
&gt;&gt;&gt; id(BankAccount.Balance), id(a.Balance), id(b.Balance)
(507102960, 507102960, 507102960)
&gt;&gt;&gt; BankAccount.Balance is a.Balance is b.Balance
True
&gt;&gt;&gt; BankAccount.Accounts is a.Accounts is b.Accounts
True
&gt;&gt;&gt; b.Balance = 2
&gt;&gt;&gt; id(BankAccount.Balance), id(a.Balance), id(b.Balance)
(507102960, 507102960, 507103024)
&gt;&gt;&gt; BankAccount.Balance is a.Balance is b.Balance
False
&gt;&gt;&gt; a.Accounts.append(2)
&gt;&gt;&gt; BankAccount.Accounts is a.Accounts is b.Accounts
True
&gt;&gt;&gt;
</code></pre>
<p><a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">Naming and Binding</a> is a good read.
And the <a href="https://docs.python.org/3/tutorial/classes.html#classes" rel="nofollow noreferrer">Classes section of the Tutorial</a> may provide insight.</p>
</div>
<div class="post-text" itemprop="text">
<p>Whenever you assign an attribute to an instance, it becomes an instance variable (not shared by any other instance), even if it was a class variable before.  This is what happened in the case of <code>Sam.Balance = 1000</code>.  However, <code>Sam.Accounts.append("Sam's Personal Checking")</code> is an entirely different situation - you did not assign anything, the Accounts list is exactly the same object as it was before, still a class variable.  You simply made a change to the contents of that list, which is visible no matter how you retrieve the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Integer in Python is not mutable, so when <code>Sam.Balance = 1000</code>, this will add instance variable <code>Balance</code> to instance <code>Sam</code>, not change the class variable.</p>
</div>
<span class="comment-copy">You are binding a new variable <code>Sam.Balance</code> that hides the <code>BankAccount.Balance</code> vs. <code>append()</code>ing to the existing list. Even with <code>Sam.Balance += 1000</code> would still hide <code>BankAccount.Balance</code> because <code>int</code>s are not mutable.</span>
<span class="comment-copy">With <code>Sam.Balance=1000</code> you are creating new instance variable.</span>
<span class="comment-copy">When I added a print function within the class to print The global Variable Balance and self.Balance they were the same though? I'm a bit confused about that part.</span>
<span class="comment-copy">Thank you so much this is a wonderful example, haha it's quite difficult for me to wrap my head around the full difference. I've been trying to read a lot about the difference between knit and class Variable. @wwii</span>
<span class="comment-copy">class BankAccount: 	    Balance = 0 	    def PrintSelf(self): 	    	try: 		    	print(self.Balance) 	    	except: 	    		print("I have nit found myself yet") 	    	print(Balance) 	         Sam = BankAccount()     Sam.Balance = 1000          Sam.PrintSelf()</span>
<span class="comment-copy">I'm on my iPad so return is automatically making me do that. Why in this code above does Balance == 1000 if it does not change the class variable? Thank you guys so much for the help!! @whbb</span>
