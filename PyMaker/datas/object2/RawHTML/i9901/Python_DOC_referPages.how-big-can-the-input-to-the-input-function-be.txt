<div class="post-text" itemprop="text">
<p>How large can the input I supply to the <code>input()</code> function be? </p>
<p>Unfortunately, there was no easy way to test it. After using a lot of copy-pasting I couldn't get <code>input</code> to fail on any input I supplied. (and I eventually gave up)</p>
<p>The <a href="https://docs.python.org/3/library/functions.html#input" rel="noreferrer">documentation</a> for the <code>input</code> function doesn't mention anything regarding this:</p>
<blockquote>
<p>If the <code>prompt</code> argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, <code>EOFError</code> is raised. </p>
</blockquote>
<p>So, I'm guessing there is no limit? Does anyone know if there is and, if so, how much is it? </p>
</div>
<div class="post-text" itemprop="text">
<p>Of course there is, it can't be limitless*. The key sentence from the documentation that I believe needs highlighting is:</p>
<blockquote>
<p>[...] The function then reads a line from input, <strong>converts it to a string</strong> (stripping a trailing newline) [...]</p>
</blockquote>
<p><sub>(emphasis mine)</sub></p>
<p>Since it converts the input you supply into a <em>Python</em> <code>str</code> object it  essentially translates to: "Its size <strong>has</strong> to be less than or equal to the largest string Python can create".</p>
<p>The reason why no explicit size is given is probably because this is an implementation detail. Enforcing a maximum size to all other implementations of Python wouldn't make much sense. </p>
<p>*In CPython, at least, the largest size of a string is bounded by how big its <em>index</em> is allowed to be (see <a href="https://www.python.org/dev/peps/pep-0353/" rel="nofollow noreferrer">PEP 353</a>). That is, how big the number in the brackets <code>[]</code> is allowed to be when you try and index it: </p>
<pre><code>&gt;&gt;&gt; s = ''
&gt;&gt;&gt; s[2 ** 63]

IndexErrorTraceback (most recent call last)
&lt;ipython-input-10-75e9ac36da20&gt; in &lt;module&gt;()
----&gt; 1 s[2 ** 63]

IndexError: cannot fit 'int' into an index-sized integer
</code></pre>
<p><sub>(try the previous with <code>2 ** 63 - 1</code>, that's the positive acceptable limit, <code>-2 ** 63</code> is the negative limit.)</sub></p>
<p>For indices, it isn't Python numbers that are internally used; instead, it is a <code>Py_ssize_t</code> which is a signed 32/64 bit int on 32/64 bit machines respectively. So, that's the hard limit from what it seems.</p>
<p><sup>(as the error message states, int and <em>intex-sized integer</em> are two different things)</sup></p>
<p>It also seems like <a href="https://github.com/python/cpython/blob/9ba33eec31596514a060964a9ff593e732807c13/Python/bltinmodule.c#L1958" rel="nofollow noreferrer"><code>input()</code> explicitly checks</a> if the input supplied is larger than <code>PY_SSIZE_T_MAX</code> (the maximum size of <code>Py_ssize_t</code>) before converting:</p>
<pre><code>if (len &gt; PY_SSIZE_T_MAX) {
    PyErr_SetString(PyExc_OverflowError,
                    "input: input too long");
    result = NULL;
}
</code></pre>
<p>Then it converts the input to a Python <code>str</code> with <code>PyUnicode_Decode</code>.</p>
<hr/>
<p>To put that in perspective for you; if the average book is <code>500.000</code> characters long and the <a href="http://booksearch.blogspot.gr/2010/08/books-of-world-stand-up-and-be-counted.html" rel="nofollow noreferrer">estimation</a> for the total number of books is around 130 million, you could theoretically <code>input</code> around:</p>
<pre><code>&gt;&gt;&gt; ((2 ** 63) - 1) // 500000 * 130000000
141898
</code></pre>
<p>times those characters; it would probably take you some time, though :-) (and you'd be limited by available memory first!)</p>
</div>
<div class="post-text" itemprop="text">
<p>We can find the answer experimentally quite easily. Make two files:</p>
<p><code>make_lines.py</code>:</p>
<pre><code>num_lines = 34

if __name__ == '__main__':
    for i in range(num_lines):
        print('a' * (2 ** i))
</code></pre>
<p><code>read_input.py</code>:</p>
<pre><code>from make_lines import num_lines

for i in range(num_lines):
    print(len(input()))
</code></pre>
<p>Then run this command in Linux or OSX (I don't know the Windows equivalent):</p>
<pre><code>python make_lines.py | python3 read_input.py
</code></pre>
<p>On my computer it manages to finish but struggles by the end, slowing down other processes significantly. The last thing it prints is <code>8589934592</code>, i.e. 8 GiB. You can find out the value for yourself according to your definition of what's acceptable in terms of time and memory limits.</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/1739913/5647260">stackoverflow.com/q/1739913/5647260</a></span>
<span class="comment-copy">"<i>after using a lot of copy-pasting</i>" have you tried <a href="http://stackoverflow.com/a/15680903/1013719">redirecting stdin</a>?</span>
<span class="comment-copy">I hadn't @RyanHaining thanks for that!</span>
<span class="comment-copy"><a href="https://en.wiktionary.org/wiki/how_long_is_a_piece_of_string" rel="nofollow noreferrer">How long is a [piece of] string?</a></span>
<span class="comment-copy">I tried this in an interactive session (linux xterm) and got very odd reactions (after pasting some 30k characters using the middle mouse button), looks like a very slow print of the string (1 line per second). Probably not Python's problem here but slowdown in readline/xterm or do you have another idea what's causing this?</span>
<span class="comment-copy">I agree with you, doesn't make sense for it to be Pythons fault. I really doubt interactive sessions where built to smoothly handle a 30k character dump but then again I haven't looked into those @mkiever</span>
<span class="comment-copy">I guess this actually breaks some part of the interactive session. It's still printing and can't be stopped with Ctrl-c, had to be killed. I'll need to check this in more detail one of these days.</span>
<span class="comment-copy">That number is still too large to make any sense to me. If every character of the book would contain the entire google index, then you'd have about 2-4 books.</span>
