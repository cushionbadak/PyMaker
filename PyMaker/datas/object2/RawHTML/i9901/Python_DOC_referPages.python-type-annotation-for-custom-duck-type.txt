<div class="post-text" itemprop="text">
<p>Python's <code>typing</code> module defines a number of duck types, e.g., <code>typing.SupportsAbs</code> to represent any type that implements the <code>__abs__</code> special method.</p>
<p>Is it possible to define custom duck types in a way such that I can use them as valid type annotations?</p>
<p>For example, I would like to be able to annotate that an argument should be a duck-type equivalent of a <code>threading.Lock</code>, i.e., any object that implements <code>acquire</code> and <code>release</code> methods. Ideally, I could annotate such an argument as <code>SupportsAcquireAndRequire</code> or <code>DuckLock</code>, rather than <code>object</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define an <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abstract base class (ABC)</a> to specify the interface:</p>
<pre><code>from abc import ABCMeta, abstractmethod

class SupportsAcquireAndRequire(metaclass=ABCMeta):
    @abstractmethod
    def acquire(self):
        pass

    @abstractmethod
    def release(self):
        pass

    @classmethod
    def __subclasshook__(cls, C):
        for method in ('release', 'acquire'):
            for B in C.__mro__:
                if method in B.__dict__:
                    if B.__dict__[method] is None:
                        return NotImplemented
                    break
            else:
                return NotImplemented
        return True
</code></pre>
<p>This is basically how the protocols (like <code>typing.SupportsAbs</code>) are implemented, albeit without directly using <code>ABCMeta</code>.</p>
<p>By giving the ABC a <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__" rel="nofollow noreferrer"><code>__subclasshook__</code> method</a>, you can use it in <code>isinstance()</code> and <code>issubclass()</code> tests, which is more than good enough for tools like <a href="http://mypy.readthedocs.io/en/latest/class_basics.html?highlight=abc#abstract-base-classes-and-multiple-inheritance" rel="nofollow noreferrer"><code>mypy</code></a>:</p>
<pre><code>&gt;&gt;&gt; from threading import Lock
&gt;&gt;&gt; isinstance(Lock(), SupportsAcquireAndRequire)
True
</code></pre>
</div>
<span class="comment-copy">Have you looked at how they're defined? You could do something similar pretty easily.</span>
<span class="comment-copy">Indeed, <code>SupportsAbs</code> is only a few lines of code inheriting from the private <code>typing._Protocol</code>. Is there a way to do this that doesn't involve using private API?</span>
<span class="comment-copy">Looks like this is about the best we can do for now -- this is actually still an open issue for <code>typing</code>: <a href="https://github.com/python/typing/issues/11" rel="nofollow noreferrer">github.com/python/typing/issues/11</a></span>
<span class="comment-copy">@shoyer: yes, which is why the mypy documentation I linked to mentions that more explicit support for duck-typing is still forthcoming. Until then, ABCMeta is the way to go.</span>
