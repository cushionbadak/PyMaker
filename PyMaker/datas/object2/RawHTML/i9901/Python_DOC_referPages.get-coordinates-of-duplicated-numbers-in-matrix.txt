<div class="post-text" itemprop="text">
<p>I need ideas, this is not a homework .......</p>
<p>I have the following matrix, how i can obtain the coordinates of duplicates numbers,</p>
<p><a href="http://image.prntscr.com/image/24ef1e12db9542f9b171170aaefa5751.png" rel="nofollow noreferrer">imagen http://image.prntscr.com/image/24ef1e12db9542f9b171170aaefa5751.png</a></p>
<p>duplicates [ [ [0,0],[1,0],[2,0],[0,1],[0,2],[1,2],[1,3],[2,2] ], [ [0,3], [0,4] , ........ ]</p>
<p>momentary code:</p>
<pre><code>n = [ [1,1,1,3,3],[1,2,1,1,2],[1,2,1,3,3] ]

coordinates = [[-1,0],[0,1],[1,0],[0,-1]]
i = 0
while i &lt; len(n):
    j = 0
    fila = []
    while j &lt; len(n[0]):
        for coordinate in coordinates:
            X = i + coordinate[0]
            Y = j + coordinate[1]
            if X &gt;= 0 and X &lt; len(n) and Y &gt;= 0 and Y &lt; len(n[0]):
                # I tried with two for in here but its not efficient
        j+=1
    i+=1
</code></pre>
<p>Thanks</p>
<p>EDIT:</p>
<p>expected output:</p>
<p>Groups 1, separated 2, separated 3 and only 2</p>
<p>duplicates [ [ [0,0],[1,0],[2,0],[0,1],[0,2],[1,2],[1,3],[2,2] ], [ [0,3], [0,4] ], [ [1,1],[2,1] ] , [ [1,4] ], [ [2,3], [2,4] ]</p>
</div>
<div class="post-text" itemprop="text">
<p>Not extremely efficient, as the test array is used in a logical comparison check multiple times, but most loops are pushed to the C-level.
At the same time, it demonstrates a few interesting methods you could explore if you have similar functionality to perform.</p>
<pre><code>import scipy.ndimage as nd    
import numpy as np

n = np.array([ [1,1,1,3,3],[1,2,1,1,2],[1,2,1,3,3] ], dtype=np.int)

def print_coord(val, pos, shape):
    print("{}: {}".format(val[0], list(zip(*np.unravel_index(pos, dims=shape)))))
    return 0

for val in np.unique(n):
    labelled_array, num_features = nd.label(n == val)
    nd.labeled_comprehension(n, labelled_array, [1,2,3], 
        lambda v, p: print_coord(v, p, shape=n.shape), float, 0, True)
</code></pre>
<p>Output:</p>
<pre><code>1: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (1, 3), (2, 0), (2, 2)]
2: [(1, 1), (2, 1)]
2: [(1, 4)]
3: [(0, 3), (0, 4)]
3: [(2, 3), (2, 4)]
</code></pre>
<p>You could of course append the results to a list, when you are not interested in keeping the label that matched that list of coordinates.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to an output you provided to your example, I came up with the following solution:</p>
<pre><code>import sys

def findMax(n, m, mat):
    max = -sys.maxint - 1
    for i in xrange(n):
        for j in xrange(m):
            if mat[i][j] &gt; max:
                max = mat[i][j]
    return max


def doIt(mat):
    n, m = len(mat), len(mat[0])
    max_val = findMax(n, m, mat)
    memo = [None] * (max_val + 1)
    for i in xrange(n):
        for j in xrange(m):
            if memo[mat[i][j]] is None:
                memo[mat[i][j]] = [(i, j)]
            else:
                memo[mat[i][j]].append((i, j))
    return {i: item for i, item in enumerate(memo) if item is not None and len(item) &gt; 1}

if __name__ == '__main__':
    n = [ [1,1,1,3,3],[1,2,1,1,2],[1,2,1,3,3] ]
    print doIt(n)
</code></pre>
<p><code>memo</code> is a list where index indicate a potential duplicate number and corresponding value is the list of coordinates. Originally <code>memo</code> is initialized with <code>None</code> of length <code>max</code> found by traversing input matrix (O(N^2)). Key observation - If there are more than one pair of coordinates for specific number in <code>memo</code>, then we found a duplicate. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a non-Numpy solution. It uses <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to separate the coordinates into lists that have the that share the same value in <code>n</code>, then it separate those into sublists consisting of neighbours.</p>
<pre><code>from itertools import product, groupby

n = [
    [1, 1, 1, 3, 3],
    [1, 2, 1, 1, 2],
    [1, 2, 1, 3, 3],
]

# Return a value from `n` given a coordinate tuple
def keyfunc(t):
    y, x = t
    return n[y][x]

# Make a list of coordinate tuples. 
# This code assumes that all rows in `n` have the same length
a = list(product(range(len(n)), range(len(n[0]))))

# Sort coordinates by the corresponding value in `n`
a.sort(key=keyfunc)

#Split the sorted coordinates into lists that share the same value...
groups = []
for k, g in groupby(a, key=keyfunc):
    # ... and separate those into sublists consisting of neighbours
    # We must turn g into a proper list
    sublists = []
    for t in list(g):
        y, x = t
        neighbours = [(y-1, x), (y+1, x), (y, x-1), (y, x+1)]
        # Search for a sublist that contains a neighbour of `t`
        for lst in sublists:
            if any(u in lst for u in neighbours):
                lst.append(t)
                break
        else:
            # No sublist of neighbours found, start a new one
            sublists.append([t])
    groups.append((k, sublists))

for row in groups:
    print(row)
</code></pre>
<p><strong>output</strong></p>
<pre><code>(1, [[(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (1, 3), (2, 0), (2, 2)]])
(2, [[(1, 1), (2, 1)], [(1, 4)]])
(3, [[(0, 3), (0, 4)], [(2, 3), (2, 4)]])
</code></pre>
</div>
<span class="comment-copy">Your drawing seems to indicate that spatially unconnected values belong to the same group, but your code does not because you are using a structuring element whereby you check for neighboring connectivity (with a square connectivity equal to one, in other words "a plus-type" of connectivity). What is your expected output from the array you have given as <code>n</code>?</span>
<span class="comment-copy">Is the range of values in the matrix limited? If not, what is the range? Also, what about all those <code>1</code>s, aren't they duplicates, too?</span>
<span class="comment-copy">@martineau max matrix 10 x 10</span>
<span class="comment-copy">@PM2Ring I edited this, thanks</span>
<span class="comment-copy">Thanks you very much</span>
<span class="comment-copy">Wow! I <i>really</i> need to learn more Numpy. :)</span>
