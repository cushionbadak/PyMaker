<div class="post-text" itemprop="text">
<p>I'm currently stuck on a question where I need to check for every instance of the letter <code>"a"</code> in <code>string1</code> and replace it with a <code>substring</code>.</p>
<p>For example lets say that the <code>substring</code> is <code>"dragon"</code>, if the original <code>string1</code> was <code>"apple"</code>, I would need to return <code>"dragonpple"</code>. </p>
<p>So far I have my attempts are:</p>
<pre><code>def (string1, substring):

     new_string= " "

     for letter in string1:
           if letter ! = "a": 
              new_string.append(letter)
           elif letter = "a":
               a = substring  
</code></pre>
<p>I dont really know how to structure this but this was my general thought process. I'm not sure how to remove the letter <code>"a"</code> and replace it with the <code>substring</code> without breaking up the string itself. </p>
<p>Also I can't use indexes or the <code>.remove</code> method. Would appreciate the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a number of issues here; let's break them down without altering your original code too much:</p>
<ul>
<li><p>You function definition <em>lacks a name</em>, define it with a name properly. For example:</p>
<pre><code>def replace_a(string_a, substring): ...
</code></pre>
<p><sub>I'm guessing this might be a copy-paste omission.</sub></p></li>
<li><code>if letter ! = "a":</code> is a <code>SyntaxError</code>, <code>! =</code> doesn't get interpreted as <code>!=</code> (but as two separate operators <code>!</code> and <code>=</code>), unfortunately, that needs fixing too.</li>
<li><code>elif letter = "a":</code> is another <code>SyntaxError</code>; <em>assignment statements</em> should not be confused with equality checks, that is <code>=</code> is not similar to using <code>==</code>.</li>
<li><code>new_string.append(letter)</code> is a <code>TypeError</code>; the method <code>append</code> isn't defined for strings, strings are <em>immutable</em> and appending is a method that mutates the object. <code>append</code> is available on <code>list</code>s.</li>
<li><code>a = substring</code> isn't doing much :-(. You assign to <code>a</code> and then simply don't use it.</li>
<li>FInally, you <em>don't return anything</em>. Even if your function created the string correctly, you can't get it back because your don't use the <code>return</code> statement.</li>
</ul>
<p>One approach you could consider is to use a list of character strings and mutate that; lists are mutable so mutate to your hearts desire. Then, you <code>join</code> the list in the end and return a string out of all the characters inside it:</p>
<pre><code>def replace_a(string1, substring):
    new_string= []
    for letter in string1:
        if letter != "a": 
            new_string.append(letter)
        elif letter == "a":
            new_string.append(substring)
     return "".join(new_string)
</code></pre>
<p>This yields your wanted result. </p>
<p>If you can't use a <code>list</code>, mutate it and then <code>join</code> you could resort to incrementally building a new string:</p>
<pre><code>def replace(string1, substring):

     new_string= ""

     for letter in string1:
           if letter != "a": 
              new_string += letter
           elif letter == "a":
               new_string += substring
     return new_string
</code></pre>
<p>This again behaves like the previous <code>list</code> based function but relies on <code>+=</code> which creates new strings by joining the old value in <code>new_string</code> with the <code>letter</code> or the <code>substring</code> based on the condition.</p>
<hr/>
<p>Of course, <code>.replace</code> on strings would do the trick as the comment by @yper suggests but that beats the point of explaining how your attempt didn't achieve what you were after.</p>
<p>You were close but missing a couple of basic things, I'd advice you take a look at the <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">Python Tutorial</a>. :-)</p>
</div>
<span class="comment-copy">How about doing <code>string1.replace("a", substring)</code>?</span>
<span class="comment-copy">Hey, thanks for the help! Although I have a few remaining questions. I am pretty sure I am not allowed to use the "join" function that you have here as part of my code since I have not learned it yet. Is there a way to have the code so that it ends with "return new_string or string1?"</span>
<span class="comment-copy">Fair enough @Jessica. I've update my answer to include a solution that doesn't involve lists at all. Hope it helped you out :-)</span>
<span class="comment-copy">I know you didn't mean functional in this sense, but saying "A functional approach is to use a list of character strings and mutate..." is making my head twitch.  +1 for the good explanation.</span>
<span class="comment-copy">@juanpa.arrivillaga yup, maybe not the best choice of words there :-) Promptly fixed it up.</span>
