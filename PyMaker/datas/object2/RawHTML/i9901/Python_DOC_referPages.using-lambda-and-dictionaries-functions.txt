<div class="post-text" itemprop="text">
<p>I wrote this function:</p>
<pre><code>def make_upper(words):
    for word in words:
        ind = words.index(word)
        words[ind] = word.upper()   
</code></pre>
<p>I also wrote a function that counts the frequency of occurrences of each letter:</p>
<pre><code> def letter_cnt(word,freq):
    for let in word:
        if let == 'A': freq[0]+=1
        elif let == 'B': freq[1]+=1
        elif let == 'C': freq[2]+=1
        elif let == 'D': freq[3]+=1
        elif let == 'E': freq[4]+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Counting letter frequency would be much more efficient with a dictionary, yes. Note that you are manually lining up each letter with a number ("A" with 0, et cetera). Wouldn't it be easier if we could have a data type that directly associated a letter with the number of times it occurs, without adding an extra set of numbers in between?</p>
<p>Consider the code:</p>
<pre><code>freq = {"A":0, "B":0, "C":0, "D":0, ... ..., "Z":0}
for letter in text:
     freq[letter] += 1
</code></pre>
<p>This dictionary is used to count frequencies much more efficiently than your current code does. You just add one to an entry for a given letter each time you see it.</p>
<hr/>
<p>I will also mention that you can count frequencies effectively with certain libraries. If you are interested in analyzing frequencies, look into collections.Counter() and possibly the collections.Counter.most_common() method.</p>
<p>Whether or not you decide to just use collections.Counter(), I would attempt to learn why dictionaries are useful in this context.</p>
<hr/>
<p>One final note: I personally found typing out the values for the "freq" dictionary to be tedious. If you want you could construct an empty dictionary of alphabet letters on-the-fly with this code:</p>
<pre><code>alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
freq = {letter:0 for letter in alphabet}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to convert <strong>strings in the list to upper case using <code>lambda</code></strong>, you may use it with <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> as:</p>
<pre><code>&gt;&gt;&gt; words = ["Hello", "World"]
&gt;&gt;&gt; map(lambda word: word.upper(), words)  # In Python 2
['HELLO', 'WORLD']                         

# In Python 3, use it as: list(map(...))
</code></pre>
<p>As per the <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code> document</a>:</p>
<blockquote>
<p><strong>map(function, iterable, ...)</strong></p>
<p>Apply function to every item of iterable and return a list of the results.</p>
</blockquote>
<hr/>
<p>For <strong>finding the frequency of each character in word</strong>, you may use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a> (sub class <code>dict</code> type) as:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter

&gt;&gt;&gt; my_word = "hello world"
&gt;&gt;&gt; c = Counter(my_word)
# where c holds dictionary as: 
# {'l': 3, 
#  'o': 2, 
#  ' ': 1, 
#  'e': 1, 
#  'd': 1, 
#  'h': 1, 
#  'r': 1, 
#  'w': 1}
</code></pre>
<p>As per <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code> Document</a>:</p>
<blockquote>
<p>A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>for the letter counting, don't reinvent the wheel <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a></p>
<blockquote>
<p>A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>def punc_remove(words):</p>
<pre><code>for word in words:
    if word.isalnum() == False:
        charl = []
        for char in word: 
            if char.isalnum()==True:
                charl.append(char)
        ind = words.index(word)
        delimeter = ""
        words[ind] = delimeter.join(charl)
</code></pre>
<p>def letter_cnt_dic(word,freq_d):
    for let in word:
        freq_d[let] += 1</p>
<p>import string
def letter_freq(fname):
    fhand = open(fname)
    freqs = dict()
    alpha = list(string.uppercase[:26])
    for let in alpha: freqs[let] = freqs.get(let,0) </p>
<pre><code>for line in fhand:
    line = line.rstrip() 
    words = line.split() 
    punc_remove(words)
    #map(lambda word: word.upper(),words)
    words = [word.upper() for word in words]  
    for word in words:
        letter_cnt_dic(word,freqs)

fhand.close()

return freqs.values()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read the docs about the <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a> and the <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">List Comprehensions</a> or run this as a small demo:</p>
<pre><code>from collections import Counter


words = ["acdefg","abcdefg","abcdfg"]
#list comprehension no need for lambda or map
new_words = [word.upper() for word in words] 
print(new_words)

# Lets create a dict and a counter
letters = {}
letters_counter = Counter()

for word in words:
   # The counter count and add the deltas.
   letters_counter += Counter(word)
   # We can do it to 
   for letter in word:
       letters[letter] = letters.get(letter,0) + 1

print(letters_counter)  
print(letters)  
</code></pre>
</div>
<span class="comment-copy">what do you mean?</span>
<span class="comment-copy">that's what I did:    import string alpha = list(string.uppercase[:26]) freq_d = dict() for let in alpha: freq_d[let] = freq_d.get(let,0)</span>
<span class="comment-copy">did you check the link I posted?</span>
<span class="comment-copy">At the time I posted it I was on my mobile phone, so copy-pasting stuff was not too easy, and by the time I could, @anonymous had already elaborated in <a href="http://stackoverflow.com/a/40516580/1562285">his answer</a>. Next time I will elaborate more</span>
