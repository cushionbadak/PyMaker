<div class="post-text" itemprop="text">
<p>Situation: I have some custom Exception classes in my library, which is used by users in their code. For some reason, I want to rename one of the exceptions and deprecate the old one.</p>
<p>Keeping the old exception as an alias is not difficult:</p>
<pre><code>class MyNewError(ValueError):
    pass

MyOldError = MyNewError
</code></pre>
<p>But eventually I would like to remove the old error name for my library, and therefore I want users who use this custom exception in downstream code to be notified with a DeprecationWarning that this error will be removed.</p>
<p>But I want to raise the DeprecationWarning in the following usecase (say that my library containing the custom exceptions is called <code>mypackage</code>):</p>
<pre><code># downstream user code
import mypackage

...

try:
    ....
except mypackage.MyOldError:
    ....
</code></pre>
<p><strong>So I want to raise the warning when the user tries to <em>catch</em> the error, not only when the user would <em>raise</em> the error.</strong></p>
<p>Is it possible to do this in some way? (as the user is not calling a function here in which I can raise a deprecation warning)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can apply the hack/trick from <a href="https://stackoverflow.com/a/2447383/6394138">this answer</a>, converting your module into a class and intercepting the <code>__getattr__()</code> operation:</p>
<p><strong>mypackage/__init__.py</strong>:</p>
<pre><code>import sys
import warnings

class MyNewError(ValueError):
    pass

MyOldError = MyNewError

def foo():
    print('mypackage.foo(): raising MyNewError')
    raise MyNewError()

class Wrapper(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped

    def __getattr__(self, name):
        if name == 'MyOldError':
            warnings.warn('MyOldError is deprecated, use MyNewError')

        return getattr(self.wrapped, name)

sys.modules[__name__] = Wrapper(sys.modules[__name__])
</code></pre>
<p><strong>test.py</strong>:</p>
<pre><code>import mypackage

try:
    mypackage.foo()
except mypackage.MyOldError:
    print('Caught mypackage.MyOldError')
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>$ python test.py 
mypackage.foo(): raising MyNewError
mypackage/__init__.py:18: UserWarning: MyOldError is deprecated, use MyNewError
  warnings.warn('MyOldError is deprecated, please use MyNewError')
Caught mypackage.MyOldError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's certainly possible to raise an exception within an exception, but if the user isn't expecting it, it could cause issues.  Assuming that was just a misstep in your post, and you don't have a <code>DeprecationWarning</code> exception you want to raise, you can do the following:</p>
<pre><code>class MyOldError(MyNewError):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        deprecation_warning('Deprecated, please use MyNewError')

&gt;&gt;&gt; raise MyOldError
Deprecated, please use MyNewError
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
__main__.MyOldError
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">I don't think you can - you presumably don't want to raise a warning every time someone imports <code>mypackage</code>, and I don't think there's a sensible way to override <code>__getitem__</code> at the module level (see e.g. <a href="http://stackoverflow.com/q/10438894/3001761">stackoverflow.com/q/10438894/3001761</a> - it's awkward).</span>
<span class="comment-copy">Thanks! This works for raising an error, but I would also like to show a deprecation warning in case someone tries to <i>catch</i> the error (see the example use case in my question)</span>
<span class="comment-copy">Aah I see what you mean.  It would be possible to do this with <a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks" rel="nofollow noreferrer">metaclasses and magic methods</a>, but I'm not certain how useful that would be.  I'll think on an elegant solution in the meantime, but no promises.  Someone might beat me to it, too.</span>
