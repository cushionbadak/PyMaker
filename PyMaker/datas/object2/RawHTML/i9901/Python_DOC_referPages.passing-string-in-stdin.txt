<div class="post-text" itemprop="text">
<p>I want to create an AVD (Android Virtual Device) through command line in python. For that, I need to pass a string <code>n</code> to the stdin. I have tried the following </p>
<pre><code>emulator_create = str(subprocess.check_output([android,'create', 'avd', '-n', emulator_name, '-t', target_id, '-b', abi],stdin=PIPE))
emulator_create.communicate("n")
</code></pre>
<p>but it raises the following error</p>
<pre><code>raise CalledProcessError(retcode, cmd, output=output)
subprocess.CalledProcessError: Command '['/home/fahim/Android/Sdk/tools/android', 'create', 'avd', '-n', 'samsung_1', '-t', '5', '-b', 'android-tv/x86']' returned non-zero exit status 1

Process finished with exit code 1
</code></pre>
<p>What can I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's something not working with your example. <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output()</code></a> returns the output from the child process you want to execute, <strong>not</strong> a handle to this process. In other words you get a string object (or maybe a bytes object) which you cannot use to manipulate the child process.</p>
<p>Probably what happens is that your script, using <code>subprocess.check_output()</code>, will execute the child process and wait until it is finished before continuing. But since you are never able to communicate with it, it will finish with a non-zero return value which will raise the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError" rel="nofollow noreferrer"><code>subprocess.CalledProcessError</code></a></p>
<hr/>
<p>Now, using <a href="https://en.wikipedia.org/wiki/Grep" rel="nofollow noreferrer"><code>grep</code></a> as an example of a command that waits on the standard input to execute something (since I don't have an Android Virtual Device creator installed) you could do this:</p>
<pre><code>#!/usr/bin/env python2.7
import subprocess

external_command = ['/bin/grep', 'StackOverflow']
input_to_send = '''Almost every body uses Facebook
You can also say that about Google
But you can find an answer on StackOverflow
Even if you're an old programmer
'''

child_process = subprocess.Popen(args=external_command, 
                      stdin=subprocess.PIPE, 
                      stdout=subprocess.PIPE,
                      universal_newlines=True)
stdout_from_child, stderr_from_child = child_process.communicate(input_to_send)
print "Output from child process:", stdout_from_child
child_process.wait()
</code></pre>
<p>It will print "Output from child process: But you can find an answer on StackOverflow", which is the output from <code>grep</code>.</p>
<p>In this example, I have </p>
<ol>
<li>Used the class <a href="https://docs.python.org/2.7/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> to create an handle to the child process

<ul>
<li>Setting arguments <code>stdin</code> and <code>stdout</code> with the value <code>subprocess.PIPE</code> to enables us to communicate later on with this process.</li>
</ul></li>
<li>Used its <a href="https://docs.python.org/2.7/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer"><code>.communicate()</code></a> method to send a string to its standard input. In the same step, I retrieved its standard output and standard error output.</li>
<li>Printed the standard output retrieved in the last step (just so to show that it is actually working)</li>
<li>Waited that this child process is finished </li>
</ol>
<p>In Python 3.5, it's even simpler:</p>
<pre><code>#!/usr/bin/env python3.5
import subprocess

external_command = ['/bin/grep', 'StackOverflow']
input_to_send = '''Almost every body uses Facebook
You can also say that about Google
But you can find an answer on StackOverflow
Even if you're an old programmer
'''

completed_process_result = subprocess.run(args=external_command, 
                                          input=input_to_send,
                                          stdout=subprocess.PIPE,
                                          universal_newlines=True)
print("Output from child process:", completed_process_result.stdout)
</code></pre>
<p>In this example, I have:</p>
<ul>
<li>Used the module function <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a> to execute the command.  

<ul>
<li>The <code>input</code> argument is the string we send to the standard input of the child process</li>
<li>The return value is used later on to retreive the output of the child process</li>
</ul></li>
</ul>
<p>Now you have to adapt this code to your situation.</p>
</div>
<span class="comment-copy">You should catch the error and check the <code>output</code> attribute of the exception.</span>
