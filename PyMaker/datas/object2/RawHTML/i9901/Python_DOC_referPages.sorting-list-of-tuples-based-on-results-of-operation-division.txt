<div class="post-text" itemprop="text">
<p>Ok - been struggling on this for awhile. I've just started learning Python so very new at this. </p>
<p>I have a list of tuples that needs to be sorted by the ratio of the value in each tuple.</p>
<p>Input:</p>
<pre><code>L = [(1,3), (1,7), (4,8)]
</code></pre>
<p>Returns a sorted list:</p>
<pre><code>L = [(1,7), (1,3), (4,8)]
</code></pre>
<p>It needs to be sorted using sort and and a custom key. I've seen people use itemgetter and I can't get that version to work either.</p>
<p>My attempt so far:</p>
<pre><code>sorted(L, key = lambda x: [(i[0]/float(i[1])) for i in x])
</code></pre>
<p>I've been using this as a guide:
<a href="https://stackoverflow.com/questions/3121979/how-to-sort-list-tuple-of-lists-tuples">How to sort (list/tuple) of lists/tuples?</a></p>
<p>It seems using itemgetter is the fastest but I can't get that to work either...</p>
</div>
<div class="post-text" itemprop="text">
<p>You were very close. You didn't need the for loop in your <code>lambda</code> function.</p>
<pre><code>&gt;&gt;&gt; L = [(1,3), (1,7), (4,8)]
&gt;&gt;&gt; sorted(L, key=lambda i: i[0]/float(i[1])) # no need for the for loop
[(1, 7), (1, 3), (4, 8)]
&gt;&gt;&gt; 
</code></pre>
<p>You can also make use of <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator.itemgetter()</code></a> like so:</p>
<pre><code>&gt;&gt;&gt; L = [(1,3), (1,7), (4,8)]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; ig = itemgetter(0), itemgetter(1)
&gt;&gt;&gt; sorted(L, key= lambda i: ig[0](i)/float(ig[1](i)))
[(1, 7), (1, 3), (4, 8)]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy"><code>key = lambda x: (x[0]/float(x[1]))</code></span>
<span class="comment-copy">BTW, if you're using Python 2 you can get Python 3 style division by putting <code>from __future__ import division</code> at the top of your imports (unless you're using a <i>very</i> ancient version of Python 2). And then you don't need that <code>float</code> conversion call. If you want floor division you should always use <code>//</code>, even if you don't use that import, since it's better to be explicit about what you're doing.</span>
<span class="comment-copy">That's...really depressing how close it was. Just spent several hours trying all different ways. Do you know how to do it via the itemgetter method (supposedly that's fastest?)?</span>
<span class="comment-copy">There's little benefit to using <code>itemgetter</code> like that, since the two <code>itemgetter</code> calls are performed <i>every</i> time the lambda is called. It'd be better to do the  <code>itemgetter</code> calls outside the lambda. Eg, <code>ig0, ig1 = itemgetter(0), itemgetter(1)</code> <code>sorted(L, key= lambda i: ig0(i)/ig1(i))</code>. But then you might as well just index into the tuple. :)</span>
<span class="comment-copy">@PM2Ring Yout took the words right out of my mouth. That's just what I was about to write up :) But I had neglected the fact of calling <code>itemgetter ()</code> outside of the lambda. I'll update that.</span>
