<div class="post-text" itemprop="text">
<p>Currently prints range values to terminal. I need to export these values to a csv file. "print S[t-1], I[t-1], R[t-1]" are the values...</p>
<pre><code>import matplotlib.pyplot as plt
import numpy
beta = 0.24
gamma = 0.142857
Tstart = 0
Tend = 151
r = 0
s = (306.8 * 10**6)
i = (22 * 10**6)

def compute_next_day(t,R,I,S):
    R[t] = gamma * I[t - 1] + R[t - 1]
    I[t] = (beta * I[t-1] * S[t-1] / (r+i+s)) - gamma * I[t-1] + I[t-1]
    S[t] = - (beta * I[t-1] * S[t-1] / (r+i+s)) + S[t-1]
    print S[t-1], I[t-1], R[t-1]


def compute_entire_period(Tstart, Tend, R, I, S):
    R[Tstart] = r
    I[Tstart] = i
    S[Tstart] = s
    for t in range(Tstart + 1, Tend):
        compute_next_day(t, R, I, S)


R = range(Tstart, Tend)
I = range(Tstart, Tend)
S = range(Tstart, Tend)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to save data in a CSV, use the dsv library:</p>
<pre><code>import csv

beta = 0.24
gamma = 0.142857
Tstart = 0
Tend = 151
r = 0
s = (306.8 * 10 ** 6)
i = (22 * 10 ** 6)


def compute_next_day(t, R, I, S):
    R[t] = gamma * I[t - 1] + R[t - 1]
    I[t] = (beta * I[t - 1] * S[t - 1] / (r + i + s)) - gamma * I[t - 1] + I[t - 1]
    S[t] = - (beta * I[t - 1] * S[t - 1] / (r + i + s)) + S[t - 1]
    return [S[t-1], I[t-1], R[t-1]]


def compute_entire_period(Tstart, Tend, R, I, S):
    R[Tstart] = r
    I[Tstart] = i
    S[Tstart] = s
    with open('mydata.csv', 'w') as mycsvfile:
        writer = csv.writer(mycsvfile)
        for t in range(Tstart + 1, Tend):
            writer.writerow(compute_next_day(t, R, I, S))


R = range(Tstart, Tend)
I = range(Tstart, Tend)
S = range(Tstart, Tend)

compute_entire_period(Tstart, Tend, R, I, S)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this should work:</p>
<pre><code>def compute_next_day(t,R,I,S,):
    ...
    return S[t-1], I[t-1], R[t-1] # return values instead of printing to terminal

with open('path_to_file.csv','w') as f:
    for ... : # your choice of loop
        vals = compute_next_day(...) # compute your values
        f.write(','.join(vals) + '\n') # dump your values separated with ','
</code></pre>
</div>
<span class="comment-copy">numpy may have function to write in CSV files or in text files where you can use comma like in CSV file.</span>
<span class="comment-copy"><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html" rel="nofollow noreferrer">numpy.savetxt()</a> - use <code>delimiter=','</code></span>
<span class="comment-copy">or use standard module <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a></span>
<span class="comment-copy">The docs are your friend - docs.python.org/3/library/csv.html</span>
<span class="comment-copy">Why the <code>numpy</code> tag?</span>
