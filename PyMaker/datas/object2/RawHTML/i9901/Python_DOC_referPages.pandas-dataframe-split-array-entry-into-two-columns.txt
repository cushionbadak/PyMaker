<div class="post-text" itemprop="text">
<p>I have a data frame that looks like this:</p>
<pre><code>       reviewerID        asin    reviewerName helpful  unixReviewTime  \
0  A1N4O8VOJZTDVB  B004A9SDD8  Annette Yancey  [1, 1]      1383350400   
</code></pre>
<p>I'd like to split the 'helpful' column into two different columns with names 'helpful_numerator' and 'helpful denominator and I can't figure it out.</p>
<p>Any help would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to unzip <code>helpful</code> into separate columns:</p>
<pre><code>df['helpful_numerator'], df['helpful_denominator'] = zip(*df['helpful'])
</code></pre>
<p><strong>Edit</strong></p>
<p>As mentioned by @MaxU in the comments, if you want to drop the <code>helpful</code> column from your DataFrame, use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pop.html" rel="nofollow noreferrer"><code>pop</code></a> when selecting the column in <code>zip</code>:</p>
<pre><code>df['helpful_numerator'], df['helpful_denominator'] = zip(*df.pop('helpful'))
</code></pre>
<p><strong>Timings</strong></p>
<p>Using the following setup to create a larger sample DataFrame and functions to time against:</p>
<pre><code>df = pd.DataFrame({'A': list('abc'), 'B': [[0,1],[2,3],[4,5]]})
df = pd.concat([df]*10**5, ignore_index=True)

def root(df):
    df['C'], df['D'] = zip(*df['B'])
    return df

def maxu(df):
    return df.join(pd.DataFrame(df.pop('B').tolist(), columns=['C', 'D']))

def flyingmeatball(df):
    df['C'] = df['B'].apply(lambda x: x[0])
    df['D'] = df['B'].apply(lambda x: x[1])
    return df

def psidom(df):
    df['C'] = df.B.str[0]
    df['D'] = df.B.str[1]
    return df
</code></pre>
<p>I get the following timings:</p>
<pre><code>%timeit root(df.copy())
10 loops, best of 3: 70.6 ms per loop

%timeit maxu(df.copy())
10 loops, best of 3: 151 ms per loop

%timeit flyingmeatball(df.copy())
1 loop, best of 3: 223 ms per loop

%timeit psidom(df.copy())
1 loop, best of 3: 283 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <code>helpful</code> is a column of lists, you can use <code>str</code> to access the element in the list:</p>
<pre><code>df['helpful_numerator'] = df.helpful.str[0]    
df['helpful_denominator'] = df.helpful.str[1]
df
</code></pre>
<p><a href="https://i.stack.imgur.com/dbgna.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dbgna.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>yet another solution:</p>
<pre><code>In [74]: df
Out[74]:
       reviewerID        asin    reviewerName  unixReviewTime helpful
0  A1N4O8VOJZTDVB  B004A9SDD8  Annette Yancey      1383350400  [1, 1]

In [75]: df.join(pd.DataFrame(df.pop('helpful').tolist(),
                              columns=['helpful_numerator','helpful_denominator']))
Out[75]:
       reviewerID        asin    reviewerName  unixReviewTime  helpful_numerator  helpful_denominator
0  A1N4O8VOJZTDVB  B004A9SDD8  Annette Yancey      1383350400                  1                    1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that the column contains a list, you can use .apply</p>
<pre><code>df['helpful_numerator'] = df['helpful'].apply(lambda x: x[0])
df['helpful_denominator'] = df['helpful'].apply(lambda x: x[1])
</code></pre>
</div>
<span class="comment-copy">Very nice solution!</span>
<span class="comment-copy">Nice I like this!</span>
<span class="comment-copy">What does the '*' do in this solution?</span>
<span class="comment-copy">i'd change: <code>zip(*df['helpful'])</code> --&gt; <code>zip(*df.pop('helpful'))</code> if OP doesn't need original <code>helpful</code> column after splitting</span>
<span class="comment-copy">@Boud: I just did some quick timings, and <code>zip</code> appears to be faster.  I'll add the timings shortly.</span>
