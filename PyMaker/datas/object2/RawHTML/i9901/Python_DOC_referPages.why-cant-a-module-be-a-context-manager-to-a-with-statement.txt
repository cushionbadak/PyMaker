<div class="post-text" itemprop="text">
<p>Suppose we have the following <code>mod.py</code>:</p>
<pre><code>def __enter__():
    print("__enter__&lt;")

def __exit__(*exc):
    print("__exit__&lt; {0}".format(exc))

class cls:
    def __enter__(self):
        print("cls.__enter__&lt;")

    def __exit__(self, *exc):
        print("cls.__exit__&lt; {0}".format(exc))
</code></pre>
<p>and the following use of it:</p>
<pre><code>import mod

with mod:
    pass
</code></pre>
<p>I get an error:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "./test.py", line 3, in &lt;module&gt;
    with mod:
AttributeError: __exit__
</code></pre>
<p>According to the documentation the documentation the <code>with</code> statement should execute as follows (I believe it fails at step 2 and therefore truncate the list):</p>
<blockquote>
<ol>
<li>The context expression (the expression given in the <em>with_item</em>) is evaluated to obtain a context manager.</li>
<li>The context manager’s <code>__exit__()</code> is loaded for later use.</li>
<li>The context manager’s <code>__enter__()</code> method is invoked.</li>
<li>etc...</li>
</ol>
</blockquote>
<p>As I've understood it there is no reason why <code>__exit__</code> could not be found. Is there something I've missed that makes a module not able to work as a context manager?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__exit__</code> is a <em>special method</em>, so Python looks it up on the <em>type</em>. The <code>module</code> type has no such method, which is why this fails.</p>
<p>See the <a href="https://docs.python.org/3/reference/datamodel.html#special-lookup" rel="nofollow noreferrer"><em>Special method lookup</em> section</a> of the Python datamodel documentation:</p>
<blockquote>
<p>For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary. </p>
</blockquote>
<p>Note that this applies to all special methods. For example, if you added a <code>__str__</code> or <code>__repr__</code> function to a module it'll not be called when printing the module, either.</p>
<p>Python does this to make sure type objects are hashable and representable too; if Python <em>didn't</em> do this then trying to put a class object into a dictionary would fail when a <code>__hash__</code> method was defined for that class (as that method would expect an instance to be passed in for <code>self</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do it easily for the reasons stated in @Martijn Pieters <a href="https://stackoverflow.com/a/40606015/355230">answer</a>. However with a little extra work it <em>is</em> possible, because the values in <code>sys.modules</code> don't have to be instances of the built-in module class, they can be instances of your own custom class with the special methods a context manager requires. </p>
<p>Here's applying that to what you want to do. Given the following <code>mod.py</code>:</p>
<pre><code>import sys

class MyModule(object):
    def __enter__(self):
        print("__enter__&lt;")

    def __exit__(self, *exc):
        print("__exit__&gt; {0}".format(exc))

# replace entry in sys.modules for this module with an instance of MyModule
_ref = sys.modules[__name__]
sys.modules[__name__] = MyModule()
</code></pre>
<p>And the following use of it:</p>
<pre><code>import mod

with mod:
    print('running within context')
</code></pre>
<p>Will produces this output:</p>
<pre class="lang-none prettyprint-override"><code>__enter__&lt;
running within context
__exit__&gt; (None, None, None)
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name">this</a> question for information about why the <code>_ref</code> is needed.</p>
</div>
<span class="comment-copy">at which point you have to ask yourself <i>why would you need to even do this</i>?</span>
<span class="comment-copy">@Martijn: Replacing a module with an instance of a custom class is occasionally useful because it allows doing things that are impossible to do with a regular module object—like controlling attribute access—however I tend to agree that doing it so the module can be used as a context manager might be bit of a stretch.</span>
<span class="comment-copy">Yes, I know there are use-cases, I'm just not sure that this is one of them.</span>
<span class="comment-copy">@Martijn:  Just answering the OP's question—while simultaneously trying to avoid passing judgement without additional information regarding their motives.</span>
<span class="comment-copy">I am nowhere near the quality of pythonista as Martijn - but this does just seem wrong to me as well. All is does is make the import line a bit shorter, but introduces 'magic' which can easily be lost.</span>
