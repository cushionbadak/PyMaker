<div class="post-text" itemprop="text">
<p>I have a list of words and their meanings:</p>
<pre><code>wm = ['mendacious',
 'dishonest',
 'mendicant',
 'beggar',
 'meretricious',
 'gaudy; specious; falsely attractive',
 'mesmerize',
 'to hypnotize',
 'metamorphosis',
 'change; transformation']
</code></pre>
<p>Every word is followed by its meaning. So <code>mendacious</code> means <code>dishonest</code>, <code>mendicant</code> means <code>beggar</code> and so on. Words which have multiple meanings have their meanings separated by a <code>;</code>. For example 'meretricious' has meanings <code>gaudy; specious; falsely attractive</code>. </p>
<p>What I want to do is to combine word-meaning pairs such that that my final list is this:</p>
<pre><code>['mendacious : dishonest','mendicant : beggar','meretricious : gaudy; specious; falsely attractive','mesmerize : to hypnotize', 'metamorphosis : change; transformation']
</code></pre>
<p>How can I do this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterator over the list in pairs, and there's a simple idiom to do this by <code>zip</code>ing up 2 of the same <code>iter</code>:</p>
<pre><code>&gt;&gt;&gt; i = iter(wm)
&gt;&gt;&gt; [' : '.join(s) for s in zip(i, i)]
['mendacious : dishonest',
 'mendicant : beggar',
 'meretricious : gaudy; specious; falsely attractive',
 'mesmerize : to hypnotize',
 'metamorphosis : change; transformation']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A pythonic way of doing it:</p>
<pre><code>res = ["%s : %s" % (wm[i], wm[i+1]) for i in range(0, len(wm), 2)]
print(res)

['mendacious : dishonest','mendicant : beggar','meretricious : gaudy; specious; falsely attractive','mesmerize : to hypnotize', 'metamorphosis : change; transformation']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply create a list of tuples using this code:</p>
<pre><code>tl = zip(wm[0::2], wm[1::2])
</code></pre>
<p>This list will look like the following list:</p>
<pre><code>[('mendacious', 'dishonest'), ('mendicant', 'beggar'), ('meretricious', 'gaudy; specious; falsely attractive'), ('mesmerize', 'to hypnotize'), ('metamorphosis', 'change; transformation')]
</code></pre>
<p>Then you can iterate through this list and concatenate each tuple.</p>
<h3>#1</h3>
<pre><code>output = map(lambda t: t[0] + ':' + t[1], tl)
</code></pre>
<h3>#2</h3>
<pre><code>output = [':'.join(t) for t in tl]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My answer is very similar to AChampion's:</p>
<pre><code>wm = [
    'mendacious',
    'dishonest',
    'mendicant',
    'beggar',
    'meretricious',
    'gaudy; specious; falsely attractive',
    'mesmerize',
    'to hypnotize',
    'metamorphosis',
    'change; transformation'
]

a = list(map(' : '.join, zip(*[iter(wm)] * 2)))
print(a)
</code></pre>
<p>This code may be a bit mysterious, so I'll try to explain what's going on.</p>
<p><a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter(wm)</code></a> creates an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a> object from <code>wm</code>.  As the docs say, this is</p>
<blockquote>
<p>an object representing a stream of data. Repeated calls to the
  iteratorâ€™s <code>__next__()</code> method (or passing it to the built-in function
  <code>next()</code>) return successive items in the stream.</p>
</blockquote>
<p>We then duplicate the iterator and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> it. This lets us iterate over the items from the pair of iterators in parallel. But we don't actually have two separate iterators: we have two references to the one iterator object, so what we get is successive pairs of the items in <code>wm</code>. FWIW, this technique is discussed in <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>.</p>
<p>We use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> to call the <code>' : '.join</code> method on each tuple of strings yielded by <code>zip</code>. Finally, we use <code>list</code> to convert the iterable returned by <code>map</code> into a list (in Python 2 this step isn't needed since the Python 2 <code>map</code> returns a list).</p>
<hr/>
<p>We can use this same technique to produce a dictionary instead of a list. A dictionary is a more useful structure for this data.</p>
<pre><code>d = {k: v for k, v in zip(*[iter(wm)] * 2)}
print(d)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'metamorphosis': 'change; transformation', 'mendicant': 'beggar', 'mendacious': 'dishonest', 'mesmerize': 'to hypnotize', 'meretricious': 'gaudy; specious; falsely attractive'}
</code></pre>
<p>And we can split the <code>v</code> strings into lists, which makes it easier to get at the individual words:</p>
<pre><code>d = {k: v.split('; ') for k, v in zip(*[iter(wm)] * 2)}
print(d)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'mendacious': ['dishonest'], 'mesmerize': ['to hypnotize'], 'meretricious': ['gaudy', 'specious', 'falsely attractive'], 'metamorphosis': ['change', 'transformation'], 'mendicant': ['beggar']}
</code></pre>
</div>
<span class="comment-copy">Simply run over even indices in <code>for</code> loop.</span>
<span class="comment-copy">Have you tried: <code>dict(zip(wm[1:], wm))</code> ?</span>
<span class="comment-copy">@JonClements I don't think this does what the OP is looking for. Though a <code>dict</code> is probably a better structure for the OP (perhaps not in reverse) - <code>i = iter(wm); dict(zip(i, i))</code></span>
<span class="comment-copy">@AChampion yes... it almost looks like the OP wants a dict (without knowing it), however if they want strings, then fine...</span>
<span class="comment-copy">You don't need to explicitly declare another variable as an <code>iter</code> here - you can use <code>[' : '.join(s) for s in [iter(wm)] * 2]</code> instead</span>
<span class="comment-copy">@JonClements Yours doesn't work.</span>
<span class="comment-copy">@JonClements Yes, you can get away without defining <code>i</code> (yours is missing the <code>zip</code>) but I find it can be harder for new folks to follow as it uses a bit more magic <code>[' : '.join(s) for s in zip(*[iter(wm)]*2)]</code>. The principle is the same, using the same iterator twice to step through the list 2 at a time.</span>
<span class="comment-copy">Yeah - sorry missed the <code>*</code> :p</span>
<span class="comment-copy">@JonClements And <code>zip()</code> :p</span>
