<div class="post-text" itemprop="text">
<h3>Python Version</h3>
<p>Python 3.5.2</p>
<h3>Issue</h3>
<p>I notice this issue when I tried to call the C DLL using ctypes, the C function is something like:</p>
<pre><code>MEASURE_API int InitTester(char *ipAddress)
</code></pre>
<p>So I need to pass an IP address string (for example, 192.168.100.100) from Python to ctypes, according to <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes doc</a> of Python 3.5, I tried both <a href="https://docs.python.org/3/library/ctypes.html#ctypes.c_wchar_p" rel="nofollow noreferrer">c_wchar_p</a> and c_char_p, but none of them working, I got error code retrun from c dll side. I had some other function call to this dll passing c_int, c_void_p, c_bool and other data types which are all ok. Traced back and found that the c_wchar_p and c_char_p return results behaves different from what it should be based on ctypes doc. From the ctypes doc of Python 3.5:</p>
<pre><code>&gt;&gt;&gt; c_wchar_p("Hello, World")
c_wchar_p('Hello, World')
</code></pre>
<p>It return the ctypes string.
But my results of execute the same cmd in Python console:</p>
<pre><code>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; c_wchar_p("Hello, World")
c_wchar_p(1374004842736)
&gt;&gt;&gt; c_wchar_p("Hello, World")
c_wchar_p(1374004841680)
&gt;&gt;&gt; c_wchar_p("Hello, World")
c_wchar_p(1374004842736)
</code></pre>
<p>So seems like the orignial string part becomes memory address maybe. Digged in more, and found out if it is Python 2.x(default encoding is ASCII), then the return shows the string like the Python 3.5 ctypes doc shows. But in Python 3.x(default encoding is UTF-8), it always return numbers, behave differnt from the doc. Checked on multiple PCs. And understood the part that, we can use .value to return the original string. But it could not pass to the C function which has to be a ctype.</p>
<h3>Question</h3>
<ul>
<li>Can anyone provide a explaination about this about behavior ctypes?</li>
<li>and how to resolve this, so that I could get the same behave like ctype doc in Python3.5 and then make the call c dll work?</li>
</ul>
<p>Thanks a lot in advance~</p>
</div>
<div class="post-text" itemprop="text">
<p>I am more than certain now that you should be using <a href="https://docs.python.org/3/library/ctypes.html#ctypes.create_string_buffer" rel="nofollow noreferrer"><code>create_string_buffer</code></a> instead of <code>c_char_p</code> for passing the string to your <code>C</code> function; the non-<code>const</code> signature indicates a mutation and that requires a character buffer as stated in the docs:</p>
<blockquote>
<p>You should be careful, however, <em>not to pass them to functions expecting pointers to mutable memory.</em> If you need mutable memory blocks, ctypes has a <code>create_string_buffer()</code> function which creates these in various ways. The current memory block contents can be accessed (or changed) with the raw property; if you want to access it as <code>NUL</code> terminated string, use the value property.</p>
</blockquote>
<p><sub>(emphasis mine)</sub></p>
<p>So in essence, <code>create_string_buffer(b'192.168.100.100')</code>. </p>
<p>Aside from that, it just seems that the documentation might indeed be off on this. The implementation of <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Lib/ctypes/__init__.py#L254" rel="nofollow noreferrer"><code>__repr__</code> for <code>c_char_p</code> and <code>c_wchar_p</code></a> returns their name and, after a pointer to their memory buffer has been created, the <code>.value</code> that <code>c_void_p</code> pointer.</p>
</div>
<span class="comment-copy">What is the error? Have you tried using <a href="https://docs.python.org/3/library/ctypes.html#ctypes.create_string_buffer" rel="nofollow noreferrer"><code>create_string_buffer</code></a>? The fact that it's a non <code>const</code> arg suggest you need to pass something allowed to mutate which is what <code>create_string_buffer</code> seems to do.</span>
<span class="comment-copy">Thanks for quick reply, Jim. The tester is in lab, I will try it out and provide update when I get in office tomorrow~</span>
<span class="comment-copy">Hi Jim, I tried both create_string_buffer() and create_unicode_buffer(), but  still got the error message returned when calling c function. The error msg is _Unable to connect to server! error status = -1 b'Unknown error condition.' _. I think I will content the tester vendor for details, thank you for your help~</span>
<span class="comment-copy">@AlexWang, it helps if you include relevant information from the library documentation (for the DLL, not Python / ctypes) instead of having others depend on your interpretation. Maybe the library doesn't want a dotted quad IP address? I doubt it actually cares that it's a mutable buffer; C programmers are often lazy about using <code>const</code>, but being careful in this regard doesn't hurt.</span>
<span class="comment-copy">@eryksun, the C function itself only returns <i>Unable to connect to server! error status = -1, b'Unknown error condition.'</i> in console, and for more details, I will need to talk to vendor for more info about this function. Will get back and update. Thank you~</span>
