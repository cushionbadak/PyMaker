<div class="post-text" itemprop="text">
<p>When passing a list as an argument in function, why is the following list not changed?</p>
<pre><code>def foo(*x):
    y=sorted(x)
    print(y)

a=[3,2,1]
</code></pre>
<p>The function is returning <code>[[3, 2, 1]]</code>, not <code>[[1,2,3]]</code>. Why is this happening? Is this something to do with call by value?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why creating another function?
You can just do this</p>
<pre><code>&gt;&gt;&gt; a = [3,2,1]
&gt;&gt;&gt; sorted(a)
[1, 2, 3]
</code></pre>
<p>However if you want to create another function. You have to call it.</p>
<pre><code>def foo(x):
    y=sorted(x)
    return y
a = [3,2,1]
print(foo(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As Blue Monday says, there's no need to create a new function for this, you should just call the <code>sorted</code> function. However, here are a couple of other ways to fix your code.</p>
<pre><code>a = [3, 2, 1]

def foo1(*x):
    y = sorted(*x)
    print(x, y)
    return y

print(foo1(a))

def foo2(*x):
    y = sorted(x)
    print(x, y)
    return y

print(foo2(*a))
print(foo2(5, 4, 7, 6))
</code></pre>
<p><strong>output</strong></p>
<pre><code>([3, 2, 1],) [1, 2, 3]
[1, 2, 3]
(3, 2, 1) [1, 2, 3]
[1, 2, 3]
(5, 4, 7, 6) [4, 5, 6, 7]
[4, 5, 6, 7]
</code></pre>
<p>Note that <code>foo2</code> expects us to pass in the items to sort as individual arguments. We can pass it a list (or tuple) by using the <code>*</code> "splat" operator in the function call. See <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a> in the official Python tutorial.</p>
</div>
<div class="post-text" itemprop="text">
<p>because the argument of your function is specified as *a, which is like saying your argument is a tuple of undefined dimension</p>
<p>when you try to sort a tuple with a nested list, the value will not change</p>
<p>infact as result you got a list of list (you got [[3, 2, 1]] not [3, 2, 1])</p>
<p>if you try this, it will work</p>
<pre><code>def foo(*x): 
    y=sorted(x[0]) 
    print(y)
</code></pre>
</div>
<span class="comment-copy">How are you calling the function exactly? Are you expecting <code>a</code> to change by simply calling <code>foo</code>? Furthermore, a question for you, what do you think the asterisk in your function definition means with respect to Python?</span>
<span class="comment-copy">1. That title is useless. 2. The formatting is broken, and the example makes no sense. 3. Because <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a>, <b>as documented</b> returns a new list, it doesn't sort the old one (use <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort</code></a>, which returns <code>None</code>, to sort in-place).</span>
<span class="comment-copy"><code>def foo(*x):</code> what do you think the asterisk is doing in respect to <code>x</code>?</span>
<span class="comment-copy">Your function is <b>not</b> returning <code>[[3, 2, 1]]</code>. It's <i>printing</i> <code>[[3, 2, 1]]</code> and returning <code>None</code>. You're sorting a single element tuple, which happens to contain a 3 element list; that inner list is not affected.</span>
<span class="comment-copy">What do you actually want <code>foo</code> to return? Do you want <code>[1, 2, 3]</code> or <code>[[1, 2, 3]]</code>?</span>
<span class="comment-copy">Thank you . I understand now :)</span>
<span class="comment-copy">You could also note that <code>sorted()</code> returns a list regardless of what type of data structure is passed in.</span>
<span class="comment-copy">Thank you . I understand now :)</span>
