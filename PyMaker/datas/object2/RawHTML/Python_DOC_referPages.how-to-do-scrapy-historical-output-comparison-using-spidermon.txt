<div class="post-text" itemprop="text">
<p>So Scrapinghub is releasing a new feature for Scrapy quality insurance. It says it has historical comparison features where it can detect if the current scrape quantity is only below 50% of the previous scrape, which is suspicious. But, how can I apply it?</p>
</div>
<div class="post-text" itemprop="text">
<p>To compare the current scraped items with a previous run you first need to store the stats of the previous run somewhere.</p>
<p>Take the <a href="https://github.com/scrapinghub/spidermon/tree/master/examples/tutorial/tutorial" rel="nofollow noreferrer">Spidermon example project</a> on Github, specially the <a href="https://github.com/scrapinghub/spidermon/blob/master/examples/tutorial/tutorial/monitors.py" rel="nofollow noreferrer"><code>monitors.py</code></a> file.
It has two monitors defined, <code>ItemCountMonitor</code> and <code>ItemValidationMonitor</code>, the former checks if the spider scrapped less than 1000 items, if so it will <a href="https://github.com/scrapinghub/spidermon/blob/master/examples/tutorial/tutorial/monitors.py#L38" rel="nofollow noreferrer">send a message on Slack</a>. The latter checks if the item schema was validated correctly and if not it will also send a message on Slack.</p>
<p>So now to your question.</p>
<p>If you want to detect if the current scrape extracted 50% less items than the previous scrape you should store the scape stats in some place or even store the scraped items, let's say you store the scraped items on a directory <code>/home/user/scraped_items/%(date)s.json</code>, where %(date)s is the date where your spider ran (eg: 2019-01-01).
To simplify let's say you run the spider everyday and there is one file per day.</p>
<p>Then you can write a monitor like this:</p>
<pre><code>import json
from datetime import datetime, timedelta

@monitors.name("Item count dropped")
class ItemCountDroppedMonitor(Monitor):
    @monitors.name("Item count dropped since previous run")
    def test_item_count_dropped(self):
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        last_day_item_path = f'/home/user/scraped_items/{yesterday}.json'
        minimum_threshold = 0.5  # 50%
        items_extracted_now = getattr(self.data.stats, "item_scraped_count", 0)
        items_extracted_last_run = json.loads(open(last_day_item_path).read())
        items_extracted_last_run = len(items_extracted_last_run)
        diff = items_extracted_last_run - items_extracted_now
        self.assertFalse(
            diff &gt;= (items_extracted_last_run * minimum_threshold),
            msg="Extracted less items than expected"
        )
</code></pre>
</div>
