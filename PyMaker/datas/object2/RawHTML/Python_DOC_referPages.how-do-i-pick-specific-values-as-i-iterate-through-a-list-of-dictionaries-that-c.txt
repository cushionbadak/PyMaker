<div class="post-text" itemprop="text">
<p>I'm trying to grab specific values as I iterate through a list of dictionaries that contain nested dictionaries and lists.</p>
<p>This is roughly what my imported json data looks like(simplified). It's a list of dictionaries with nested dictionaries and nested lists.</p>
<pre><code># What a single dictionary looks like prettified

[{ 'a':'1',
'b':'2',
'c':'3',
'd':{ 'ab':'12',
      'cd':'34',
      'ef':'56'},
'e':['test', 'list'],
'f':'etc...'
}]

# What the list of dictionaries looks like

dict_list = [{ 'a':'1', 'b':'2', 'c':'3', 'd':{ 'ab':'12','cd':'34', 'ef':'56'}, 'e':['test', 'list'], 'f':'etc...'}, { 'a':'2', 'b':'3', 'c':'4', 'd':{ 'ab':'23','cd':'45', 'ef':'67'}, 'e':['test2', 'list2'], 'f':'etcx2...'},{},........,{}]
</code></pre>
<p>This is the code I originally had which only iterates through the list of dictionaries. </p>
<pre><code>for dic in dict_list:
    for val in dic.values():
        if not isinstance(val, dict):
            print(val)
        else:    
            for val2 in val.values():
                print (val2)
</code></pre>
<p>The print statements in my original code above were there to simply show me what was being pulled from the list of dictionaries. What I wanted to be able to do is declare which values I am looking to grab from the top level and second level dictionaries and lists. </p>
<p>Here is what I am looking for as output as an example.</p>
<p>The value of the first key for each top level dictionary in the list.</p>
<pre><code>top_level_dict_key1 = ['1','2']
</code></pre>
<p>All the values for the level 2 dictionaries.</p>
<pre><code>level2_dic = ['12', '34', '56', '23', '45', '67']
</code></pre>
<p>Or specific values. In this case the value for the first key in each nested dictionary</p>
<pre><code>level2_dict = ['12', '23']
</code></pre>
<p>value for the second key in the nested list</p>
<pre><code>level2_list = ['test', 'test2']
</code></pre>
<p>Hopefully this is clear. I'll do my best to clarify if you need me too.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a specific implementation of Python 3.6 <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6/39980744">dictionaries happen to be ordered</a>, but it is not good to rely on this behavior. It's meaningless to ask about the "first element" of something unless it's ordered, so the first step is to <a href="https://stackoverflow.com/questions/6921699/can-i-get-json-to-load-into-an-ordereddict">read the JSON into an <code>OrderedDict</code></a>.</p>
<p>Then it's just a matter of careful bookkeeping. e.g.</p>
<pre><code>import json                                                                     
from collections import OrderedDict                                             

dict_list = '[{ "a":"1", "b":"2", "c":"3", "d":{ "ab":"12","cd":"34", "ef":"56"}, "e":["test", "list"], "f":"etc..."}, { "a":"2", "b":"3", "c":"4", "d":{ "ab":"23"    ,"cd":"45", "ef":"67"}, "e":["test2", "list2"], "f":"etcx2..."}]'

dict_list = json.loads(dict_list, object_pairs_hook=OrderedDict)    
top_level_dict_key1 = []
level2_dic = []
level2_dict = []
level2_list = []
for dictionary in dict_list:
    top_level_dict_key1.append(list(dictionary.values())[0])
    for value in dictionary.values():
        if isinstance(value, OrderedDict):
            level2_dic.extend(list(value.values()))
            level2_dict.append(list(value.values())[0])
        elif isinstance(value, list):
            level2_list.append(value[0])

print(top_level_dict_key1)
print(level2_dic)
print(level2_dict)
print(level2_list)
</code></pre>
<p>Output:</p>
<pre><code>['1', '2']
['12', '34', '56', '23', '45', '67']
['12', '23']
['test', 'test2']
</code></pre>
<p>(This is probably not the most idiomatic Python 3 code. I'll edit in something better when I'm less tired.)</p>
</div>
<span class="comment-copy">What version of Python? Before 3.7, dictionaries aren't guaranteed to have any particular order.</span>
<span class="comment-copy">(Btw, good questions should be able to stand on their own. If you can edit it to make sense without referencing your previous question, it makes it that much easier for anyone trying to help you.)</span>
<span class="comment-copy">Currently Python 3.6 but I could run an environment using 3.7 for this part of my project. The rest of the project is going to be deep learning so 3.7 is probably not a good idea for that.</span>
<span class="comment-copy">@JETM What I posted was pretty much all there was to my other question. I went back and edited this one a little bit but there isn't much in the wayof new information. Is there anything I am missing you need clarification on? I'd be glad to oblige.</span>
<span class="comment-copy">The references to your previous question are confusing. I can't see a clear question. Can you just remove all reference to having had this question before?</span>
<span class="comment-copy">While my sample data appears to be ordered the actual data is not and for this project it doesn't necessarily matter since there really isn't an order to the data but I see what you are saying.</span>
<span class="comment-copy">Just gave the code a try but I'm getting a <code>TypeError: 'dict_values' object does not support indexing</code> error. Is this a Python 3.6 issue?</span>
<span class="comment-copy">@MixedBeans Ah, my bad. I tested in 2.7. You'll have to cast the <code>.values()</code> to a list before you can index into them. Or see <a href="https://stackoverflow.com/a/3097896/2201041">this</a> answer to avoid creating a list you don't need.</span>
<span class="comment-copy">Thank. I gave this code a try and realized I forgot to use OrderedDict. I tried to implement it but I would get an error. <code>TypeError: 'object_pairs_hook' is an invalid keyword argument for this function</code>. Here is how I was loading the json prior. <code>with open('test.json', 'r') as f:     json_text = f.read()  dict_list = json.loads(json_text)</code> I tried dropping the with open and went with <code>dict_list = json.load(open('test.json'))</code> and that seems to load fine but when I add <code>object_pairs_hook=OrderedDict</code> as an argument to json.load, as I've seen in other examples, I get the TypeError</span>
<span class="comment-copy">@MixedBeans Er... double-check that you're passing it to <code>json.load</code> instead of <code>open</code>/spelling it correctly? I just double-checked the <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow noreferrer">docs</a>, and it's definitely in there.</span>
