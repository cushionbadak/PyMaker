<div class="post-text" itemprop="text">
<p>I have training features and test features arrays that are two columns each, while the training labels and testing labels are 3 columns each. After prediction of the two column test label I'm returned a three column array. Trying to perform <code>evaluate()</code> raises the exception <code>ValueError: Error when checking input: expected dense_30_input to have shape (2,) but got array with shape (3,)</code>. I do not understand because I want it to evaluate an array of shape 3? Below is the code:</p>
<pre><code>import keras
from keras.models import Sequential
from keras.layers import Dense

# Define the model
ann = Sequential()
ann.add(Dense(50, input_dim=2, activation='relu'))
ann.add(Dense(100, activation='relu'))
ann.add(Dense(50, activation='relu'))
ann.add(Dense(3, activation='softmax'))
ann.compile(loss="mean_squared_error", optimizer='adam', metrics = ['accuracy'])

ann.fit(train_features, train_labels, batch_size = 1, epochs = 500)

# making predictions
predictions = ann.predict(test_features)
score = ann.evaluate(test_labels, predictions, batch_size=128)
</code></pre>
<p>This is what the data looks like:</p>
<pre><code>train_features:
[[0.7545026  0.79279279]
 [0.46078708 0.05405405]
 [0.41855151 0.38738739]
 [0.74803041 0.28828829]
 [1.         0.        ]
 [0.03371062 0.51351351]
 [0.63705531 0.6036036 ]
 [0.55073228 1.        ]
 [0.18877317 0.12612613]
 [0.0903093  0.51351351]
 [0.         0.9009009 ]
 [0.64266119 0.95495495]
 [0.23438608 0.12612613]
 [0.13543883 0.24324324]]

test_features:
[[0.28072092 0.00900901]
 [0.17869765 0.66666667]
 [0.8620313  0.1981982 ]
 [0.34786594 0.03603604]]

train_labels
[[1.         0.5        1.        ]
 [0.         0.5        0.66666667]
 [0.         0.         1.        ]
 [1.         1.         0.66666667]
 [1.         1.         1.        ]
 [1.         0.         0.        ]
 [0.         1.         0.66666667]
 [1.         0.5        0.66666667]
 [1.         0.         1.        ]
 [0.         0.5        0.        ]
 [0.         0.         0.        ]
 [0.         0.5        1.        ]
 [1.         1.         0.        ]
 [1.         0.5        0.        ]]

test_labels
[[0.         0.         0.66666667]
 [0.         1.         0.        ]
 [0.         1.         1.        ]
 [1.         0.         0.66666667]]

predictions
[[0.07219139 0.9239723  0.00383623]
 [0.11950634 0.53162473 0.3488689 ]
 [0.5265181  0.35849473 0.1149871 ]
 [0.01260971 0.9338486  0.05354166]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you to have a look at the <a href="https://keras.io/models/model/#evaluate" rel="nofollow noreferrer">documentation</a> of the <code>evaluate</code> method.</p>
<pre><code>ann.evaluate(test_features, test_labels)
</code></pre>
<p>Is the way to go.</p>
<p>It will directly use the model to make predictions, that's why it asks you for an input of <code>shape (2,)</code> which is the shape of your input.</p>
<p>In order to make everything clear, the problem is not about the number of examples in training/testing , they can be different, the problem is about the dimension of the examples. Your model requires 2 dimensional inputs , and the first argument of the evaluate method should be an array of test data and not the true labels nor the predicted output for this test data.</p>
</div>
<span class="comment-copy">Ahh, I see, I didn't realize the first argument was for features, not labeled data or predictions. I will try this shortly when I get home. I guess it just evaluated the model on test features and labels even though it "has the answers" there already?   What is the proper method to use to check "test labels" against the predicted ones, which is what I was originally trying to do</span>
<span class="comment-copy">"has the answers" because you asked for them with the 'predict' method. What is the proper method , I'll say that in Keras it's to use evaluate and to pass the test features. Otherwise you can have a look at the metrics in the scikit learn library.</span>
