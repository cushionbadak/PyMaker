<div class="post-text" itemprop="text">
<p>I am trying to create a function that auto creates buttons.  This i have done easily, but how do i create these buttons in a loop that have a special name for when a button is clicked the function knows what button is clicked and can change the TEST of that buttons?
I've put thus far</p>
<pre><code>from tkinter import Tk, Label, Button
import random as rdn

x_user = 'X'
o_user = 'O'

window = Tk()
window.resizable(False, False)

def button_pressed():
    Button = 'Test'

for rows in range(3):
    button_number = 1
    for colums in range(3):
        Button (window, text='-', width='5', height='5', command=button_pressed) .grid(row=rows, column=colums)
        button_number += 1

window.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would say this is the limitation of tkinter that when the button is pressed, the function it executes will give you no clue what caused it.</p>
<p>However, in Python, you can generate a function on the fly to work around such limitation. My example is as follows:</p>
<pre><code>def sayit(s):
    def f():
        print("Button %s is pressed" % s)
    return f

for rows in range(3):
    button_number = 1
    for colums in range(3):
        Button (window, text='-', width='5', height='5', command=sayit(button_number)) .grid(row=rows, column=colums)
        button_number += 1
</code></pre>
<p>The <code>sayit()</code> function accepts one parameter and returns a function which takes no argument. When I create a button, I assign this generated-on-the-fly function as the command.</p>
<p>If you want to make this a tic-tac-toe game, you need also to have something to hold all button text and associate with your button number (e.g., a list) so that you can reset the text of each button when clicked. Like below:</p>
<pre><code>from tkinter import Tk, Label, Button, StringVar
import random as rdn

x_user = 'X'
o_user = 'O'
who = 'X'

window = Tk()
window.resizable(False, False)

def click(n):
    def f():
        global who
        buttons[n].set(who)
        who = 'O' if who == 'X' else 'X'
    return f

buttons = []
button_number = 0
for rows in range(3):
    for colums in range(3):
        s = StringVar()
        s.set("-")
        buttons.append(s)
        Button(window, textvariable=s, width='5', height='5', command=click(button_number)).grid(row=rows, column=colums)
        button_number += 1

window.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simple way is to redefine the function <code>button_pressed()</code> to accept a parameter which is the button that is clicked.  Then set the <code>command</code> option of the button to a <code>lambda</code> function in which the <code>button_pressed()</code> is called with the button itself as the function parameter.  Below is a sample code:</p>
<pre><code>from tkinter import *

window = Tk()
window.resizable(False, False)

marks = ['X', 'O']
colors = ['red', 'green']
player = 0

def button_pressed(btn):
    global player
    # change the button text and make it not clickable
    btn.config(text=marks[player], disabledforeground=colors[player], state='disabled')
    player = 1 - player # change player

for row in range(3):
    for col in range(3):
        btn = Button(window, text='', font=('', 24, 'bold'), width=3)
        btn.config(command=lambda b=btn: button_pressed(b))
        btn.grid(row=row, column=col)

window.mainloop()
</code></pre>
</div>
