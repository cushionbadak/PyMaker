<div class="post-text" itemprop="text">
<p>i am just starting with python (python3) because i read its good for the euler project since it can handle very big numbers.</p>
<p>now i am struggling with a quite simple problem of converting float to int. Why don't i get the same result for this:</p>
<pre><code>num =  6008514751432349174082765599289028910605977570

print('num     {0} '.format(int(num)))

num = num / 2
print('num /2  {0} '.format(int(num)))

num = num * 2
print('num *2  {0} '.format(int(num)))
</code></pre>
<p>output for this is: </p>
<pre><code>num     6008514751432349174082765599289028910605977570 
num /2  3004257375716174771611310192874715313222975488 
num *2  6008514751432349543222620385749430626445950976 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using float division, which cannot handle large numbers with as much precision, after which you are flooring the result by casting it back to an <code>int()</code>.</p>
<p>Don't do that, that causes data loss. Use <a href="http://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow">integer (floor) division with <code>//</code></a> instead:</p>
<pre><code>&gt;&gt;&gt; 6008514751432349174082765599289028910605977570 // 2 * 2
6008514751432349174082765599289028910605977570
</code></pre>
<p>This still can lead to rounding errors of course, if the input value is not divisible by 2 without flooring:</p>
<pre><code>&gt;&gt;&gt; 6008514751432349174082765599289028910605977571 // 2 * 2
6008514751432349174082765599289028910605977570
</code></pre>
<p>but floating point values are limited in precision based on your exact CPU support; see <a href="http://docs.python.org/3/library/sys.html#sys.float_info" rel="nofollow"><code>sys.float_info</code></a> to see what exact limitations your platform imposes on float numbers.</p>
<p>On my Mac, <code>sys.float_info.dig</code> tells me my platform supports 15 digits of precision, but you are dividing a 46-digit integer number. This means that you throw away the bottom <em>30</em> digits from your large integer when using float division:</p>
<pre><code>&gt;&gt;&gt; len(str(int(6008514751432349174082765599289028910605977570 / 2) - (6008514751432349174082765599289028910605977570 // 2)))
30
</code></pre>
<p>That is a <em>lot</em> of precision loss there. :-)</p>
</div>
<span class="comment-copy">ah, perfect. thanks</span>
<span class="comment-copy">@MartijnPieters when does someone use <code>//</code> instead of <code>/</code>?</span>
<span class="comment-copy">@dustin: when you want to apply integer division (so the result being an <code>int</code>) instead of a floating point value.</span>
<span class="comment-copy">@dustin: When you are working with integer values with more digits than the number of digits your platform can support (see <code>sys.float_info.dig</code>) then you'll see precision loss when you use float division.</span>
