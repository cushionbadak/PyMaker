<div class="post-text" itemprop="text">
<p>I am writing a Django app which will fetch all images of particular URL and save them in the database.</p>
<p>But I am not getting on how to use ImageField in Django.</p>
<p>Settings.py</p>
<pre><code>MEDIA_ROOT = os.path.join(PWD, "../downloads/")

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://example.com/media/", "htp://media.example.com/"
MEDIA_URL = '/downloads/'
</code></pre>
<p>models.py</p>
<pre><code>class images_data(models.Model):
        image_id =models.IntegerField()
        source_id = models.IntegerField()
        image=models.ImageField(upload_to='images',null=True, blank=True)
        text_ind=models.NullBooleanField()
        prob=models.FloatField()
</code></pre>
<p>download_img.py</p>
<pre><code>def spider(site):
        PWD = os.path.dirname(os.path.realpath(__file__ ))
        #site="http://en.wikipedia.org/wiki/Pune"
        hdr= {'User-Agent': 'Mozilla/5.0'}
        outfolder=os.path.join(PWD, "../downloads")
        #outfolder="/home/mayank/Desktop/dreamport/downloads"
        print "MAYANK:"+outfolder
        req = urllib2.Request(site,headers=hdr)
        page = urllib2.urlopen(req)
        soup =bs(page)
        tag_image=soup.findAll("img")
        count=1;
        for image in tag_image:
                print "Image: %(src)s" % image
                filename = image["src"].split("/")[-1]
                outpath = os.path.join(outfolder, filename)
                urlretrieve('http:'+image["src"], outpath)
                im = img(image_id=count,source_id=1,image=outpath,text_ind=None,prob=0)
                im.save()
                count=count+1
</code></pre>
<p>I am calling download_imgs.py inside one view like</p>
<pre><code>        if form.is_valid():
                url = form.cleaned_data['url']
                spider(url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#imagefield" rel="noreferrer">Django Documentation</a> is always good place to start</p>
<pre><code>class ModelWithImage(models.Model):
    image = models.ImageField(
        upload_to='images',
    )
</code></pre>
<p><strong>UPDATED</strong></p>
<p>So this script works.</p>
<ul>
<li>Loop over images to download</li>
<li>Download image</li>
<li>Save to temp file</li>
<li>Apply to model</li>
<li>Save model</li>
</ul>
<p>.</p>
<pre><code>import requests
import tempfile

from django.core import files

# List of images to download
image_urls = [
    'http://i.thegrindstone.com/wp-content/uploads/2013/01/how-to-get-awesome-back.jpg',
]

for image_url in image_urls:
    # Steam the image from the url
    request = requests.get(image_url, stream=True)

    # Was the request OK?
    if request.status_code != requests.codes.ok:
        # Nope, error handling, skip file etc etc etc
        continue

    # Get the filename from the url, used for saving later
    file_name = image_url.split('/')[-1]

    # Create a temporary file
    lf = tempfile.NamedTemporaryFile()

    # Read the streamed image in sections
    for block in request.iter_content(1024 * 8):

        # If no more file then stop
        if not block:
            break

        # Write image block to temporary file
        lf.write(block)

    # Create the model you want to save the image to
    image = Image()

    # Save the temporary image to the model#
    # This saves the model so be sure that is it valid
    image.image.save(file_name, files.File(lf))
</code></pre>
<p>Some reference links:</p>
<ol>
<li><a href="http://docs.python-requests.org/en/latest/" rel="noreferrer">requests</a> - "HTTP for Humans", I prefer this to urllib2</li>
<li><a href="http://docs.python.org/2/library/tempfile.html" rel="noreferrer">tempfile</a> - Save temporay file and not to disk</li>
<li>Django filefield <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.fields.files.FieldFile.save" rel="noreferrer">save</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>If you want to save downloaded images without saving them to disk first (without using <code>NamedTemporaryFile</code> etc) then there's an easy way to do that.</p>
<p>This will be slightly quicker than downloading the file and writing it to disk as it is all done in memory. Note that this example is written for Python 3 - the process is similar in Python 2 but slightly different.</p>
<pre><code>from django.core import files
from io import BytesIO
import requests

url = "https://example.com/image.jpg"
resp = requests.get(url)
if resp.status_code != requests.codes.ok:
    #  Error handling here

fp = BytesIO()
fp.write(resp.content)
file_name = url.split("/")[-1]  # There's probably a better way of doing this but this is just a quick example
your_model.image_field.save(file_name, files.File(fp))
</code></pre>
<p>Where <code>your_model</code> is an instance of the model you'd like to save to and <code>.image_field</code> is the name of the <code>ImageField</code>.</p>
<p>See the documentation for <a href="https://docs.python.org/3/library/io.html" rel="noreferrer">io</a> for more info.</p>
</div>
<div class="post-text" itemprop="text">
<p>As an example of what I think you're asking:</p>
<p><strong>In forms.py:</strong></p>
<pre><code>imgfile = forms.ImageField(label = 'Choose your image', help_text = 'The image should be cool.')
</code></pre>
<p><strong>In models.py:</strong></p>
<pre><code>imgfile =   models.ImageField(upload_to='images/%m/%d')
</code></pre>
<p>So there will be a POST request from the user (when the user completes the form).  That request will contain basically a dictionary of data.  The dictionary holds the submitted files.  To focus the request on the file from the field (in our case, an ImageField), you would use:</p>
<pre><code>request.FILES['imgfield']
</code></pre>
<p>You would use that when you construct the model object (instantiating your model class):</p>
<pre><code>newPic = ImageModel(imgfile = request.FILES['imgfile'])
</code></pre>
<p>To save that the simple way, you'd just use the save() method bestowed upon your object (because Django is that awesome):</p>
<pre><code>if form.is_valid():
    newPic = Pic(imgfile = request.FILES['imgfile'])
    newPic.save()
</code></pre>
<p>Your image will be stored, by default, to the directory you indicate for MEDIA_ROOT in settings.py.</p>
<p><strong>Accessing the image in the template:</strong></p>
<pre><code>&lt;img src="{{ MEDIA_URL }}{{ image.imgfile.name }}"&gt;&lt;/img&gt;
</code></pre>
<p>The urls can be tricky, but here's a basic example of a simple url pattern to call the stored images:</p>
<pre><code>urlpatterns += patterns('',
        url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {
            'document_root': settings.MEDIA_ROOT,
        }),
   )
</code></pre>
<p>I hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try doing it this way instead of assigning path to the image...        </p>
<pre><code>    import urllib2
    from django.core.files.temp import NamedTemporaryFile
    def handle_upload_url_file(url):
        img_temp = NamedTemporaryFile()
        opener = urllib2.build_opener()
        opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20120427 Firefox/15.0a1')]
        img_temp.write(opener.open(url).read())
        img_temp.flush()
        return img_temp
</code></pre>
<p>use the above function like this..</p>
<pre><code>    new_image = images_data()
    #rest of the data in new_image and then do this.
    new_image.image.save(slug_filename,File(handle_upload_url_file(url)))
    #here slug_filename is just filename that you want to save the file with.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar to @boltsfrombluesky's answer above you can do this in Python 3 without any external dependencies like so:</p>
<pre><code>from os.path import basename
import urllib.request
from urllib.parse import urlparse
import tempfile

from django.core.files.base import File

def handle_upload_url_file(url, obj):
    img_temp = tempfile.NamedTemporaryFile(delete=True)
    req = urllib.request.Request(
        url, data=None,
        headers={
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'
        }
    )
    with urllib.request.urlopen(req) as response:
        img_temp.write(response.read())
    img_temp.flush()
    filename = basename(urlparse(url).path)
    result = obj.image.save(filename, File(img_temp))
    img_temp.close()
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def qrcodesave(request): 
    import urllib2;   
    url ="http://chart.apis.google.com/chart?cht=qr&amp;chs=300x300&amp;chl=s&amp;chld=H|0"; 
    opener = urllib2.urlopen(url);  
    mimetype = "application/octet-stream"
    response = HttpResponse(opener.read(), mimetype=mimetype)
    response["Content-Disposition"]= "attachment; filename=aktel.png"
    return response 
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ImageField" rel="nofollow noreferrer">docs.djangoproject.com/en/dev/ref/models/fields/â€¦</a></span>
<span class="comment-copy">Do you want to save the images as blobs in the db  or the image paths</span>
<span class="comment-copy">@mossplix - Either way... But if i save images as path then I also want images on my server</span>
<span class="comment-copy">@PauloBu - I read that document many times.But not getting on how to proceed</span>
<span class="comment-copy">How are you fetching the images?</span>
<span class="comment-copy">I did this Even changed MEDIA_ROOT path accordingly.. Now what?</span>
<span class="comment-copy">OK, so is the problem getting the image into the DB or accessing it after?</span>
<span class="comment-copy">Not able to get image to DB with image on my server</span>
<span class="comment-copy">Show us more code. The <code>view</code> where you try to fetch the images, the <code>model</code> definition and maybe <code>settings.py</code></span>
<span class="comment-copy">I know this isn't an acceptable comment, but this helped me tons! Thank you, @rockingskier</span>
<span class="comment-copy">I don't want to involve forms in middle because I am not asking user to input the image.Can you please tell me bug in code which I pasted in question ?</span>
<span class="comment-copy">You claimed you don't know how to use ImageField, so I guided you on that.  You didn't really specify what you're trying to do exactly, and your code is vague.  If you're trying to save the image in a special way, you'll have to modify save().</span>
<span class="comment-copy">sorry for vauge code...what  i want is this..i am asking user to enter one url...i will extract all images of this url and then  i have to save these extracted urls along with some other information in db...</span>
<span class="comment-copy">hope this my requirement is clear now...</span>
<span class="comment-copy">What you've done there is describe how to force the user's browser to download the image. OP wants to save the image to an <code>ImageField</code> in his database.</span>
