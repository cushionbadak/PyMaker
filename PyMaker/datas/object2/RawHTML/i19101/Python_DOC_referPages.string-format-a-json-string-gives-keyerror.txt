<div class="post-text" itemprop="text">
<p>Why does this code give a <code>KeyError</code>?</p>
<pre><code>output_format = """
{ 
    "File": "{filename}", 
    "Success": {success}, 
    "ErrorMessage": "{error_msg}", 
    "LogIdentifier": "{log_identifier}" 
}
"""

print output_format.format(filename='My_file_name',
                           success=True,
                           error_msg='',
                           log_identifier='123')
</code></pre>
<p>Error message:</p>
<pre><code>KeyError: ' "File"'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to double the outer braces; otherwise Python thinks <code>{ "File"..</code> is a reference too:</p>
<pre><code>output_format = '{{ "File": "{filename}", "Success": {success}, "ErrorMessage": "{error_msg}", "LogIdentifier": "{log_identifier}" }}'
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; print output_format.format(filename='My_file_name',
...                            success=True,
...                            error_msg='',
...                            log_identifier='123')
{ "File": "My_file_name", "Success": True, "ErrorMessage": "", "LogIdentifier": "123" }
</code></pre>
<p>If, indicentally, you are producing JSON output, you'd be better off using the <a href="http://docs.python.org/2/library/json.html"><code>json</code> module</a>:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps(dict(File='My_file_name',
...                            Success=True,
...                            ErrorMessage='',
...                            LogIdentifier='123'))
{"LogIdentifier": "123", "ErrorMessage": "", "Success": true, "File": "My_file_name"}
</code></pre>
<p>Note the <em>lowercase</em> <code>true</code> in the output, as required by the JSON standard.</p>
</div>
<div class="post-text" itemprop="text">
<p>To extend on <a href="https://stackoverflow.com/users/100297/martijn-pieters">Martijn Pieters</a>  answer and comment:</p>
<ol>
<li><p>According to MArtijn' comment, escaping the {..} pairs that are not placeholders is they way to go with nested dictionaries. I haven't succeded in doing that, so I suggest the following method.</p></li>
<li><p>For nested dictionaries I tried doubling up on any { and } of the nested dictionaries.</p></li>
</ol>
<blockquote>
<p>a='{{"names":{{"a":"{name}"}}}}' </p>
<p>a.format(name=123) output:</p>
<p>output: '{"names":{"a":"123"}}'</p>
</blockquote>
<p>But this makes using format to change values inside a json string, a over-complex method, so I use a twist on the format command.
I replace ${param_name} in a json string. For example:</p>
<p>My predefined JSON looks like this:</p>
<pre><code>   my_json_dict = {
        'parameter': [
            {
                'name': 'product',
                'value': '${product}'
            },
            {
                'name': 'suites',
                'value': '${suites}'
            },
            {
                'name': 'markers',
                'value': '${markers}'
            }
        ]
    }
</code></pre>
<p>I provide this dictionary as values to replace instead of the parameters</p>
<pre><code>    parameters = {
        'product': 'spam',
        'suites': 'ham',
        'markers': 'eggs'
    }
</code></pre>
<p>And use this code to do the replacment</p>
<pre><code>json_str = json.dumps(my_json_dict)
for parameter_name, parameter_value in parameters.iteritems():
        parameter_name = '${'+parameter_name+'}'
        json_str = json_str.replace(parameter_name, parameter_value)

json_dict = json.loads(json_str)
</code></pre>
</div>
<span class="comment-copy">If I could give this answer 10 upvotes I would. Thanks</span>
<span class="comment-copy">I'll add this comment as an answer for clarity. Note that for nested dictionaries you need to double up on any { and } of the nested dictionaries.</span>
<span class="comment-copy">@RaamEE: you need to escape <b>all</b> <code>{..}</code> pairs that are not placeholders.</span>
<span class="comment-copy">Maybe <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">string.Template</a> might help.</span>
