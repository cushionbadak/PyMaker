<div class="post-text" itemprop="text">
<p>I want to make the function which find for string in the array and then replace the corres[ponding element from the dictionary. so far i have tried this but i am not able to figure out few things like</p>
<ol>
<li>How can escape special characters</li>
<li>I can i replace with match found. i tried <code>\1</code> but it didn't work</li>
</ol>
<p>dsds</p>
<pre><code>def myfunc(h):
        myarray = {
                "#":"\\#",
                "$":"\\$",
                "%":"\\%",
                "&amp;":"\\&amp;",
                "~":"\\~{}",
                "_":"\\_",
                "^":"\\^{}",
                "\\":"\\textbackslash{}",
                "{":"\\{",
                "}":"\\}"                
                    }
        pattern = "[#\$\%\&amp;\~\_\^\\\\\{\}]"
        pattern_obj = re.compile(pattern, re.MULTILINE)
        new = re.sub(pattern_obj,myarray[\1],h)

        return new
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for re.sub callbacks:</p>
<pre><code>def myfunc(h):
    rules = {
            "#":r"\#",
            "$":r"\$",
            "%":r"\%",
            "&amp;":r"\&amp;",
            "~":r"\~{}",
            "_":r"\_",
            "^":r"\^{}",
            "\\":r"\textbackslash{}",
            "{":r"\{",
            "}":r"\}"                
    }
    pattern = '[%s]' % re.escape(''.join(rules.keys()))
    new = re.sub(pattern, lambda m: rules[m.group()], h)
    return new
</code></pre>
<p>This way you avoid 1) loops, 2) replacing already processed content.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try to use re.sub inside a loop that iterates over myarray.items(). However, you'll have to do backslash first since otherwise that might replace things incorrectly. You also need to make sure that "{" and "}" happen first, so that you don't mix up the matching. Since dictionaries are unordered I suggest you use list of tuples instead:</p>
<pre><code>def myfunc(h):
    myarray = [
            ("\\","\\textbackslash")
            ("{","\\{"),
            ("}","\\}"),
            ("#","\\#"),
            ("$","\\$"),
            ("%","\\%"),
            ("&amp;","\\&amp;"),
            ("~","\\~{}"),
            ("_","\\_"),
            ("^","\\^{}")]

    for (val, replacement) in myarray:
        h = re.sub(val, replacement, h)
    h = re.sub("\\textbackslash", "\\textbackslash{}", h)

    return h
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>I'd suggest you to use raw literal syntax (<code>r""</code>) for better readability of the code.</li>
<li>For the case of your array you may want just to use <a href="http://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow"><code>str.replace</code></a> function instead of <code>re.sub</code>.</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def myfunc(h):
    myarray = [
            ("\\", r"\textbackslash"),
            ("{", r"\{"),
            ("}", r"\}"),
            ("#", r"\#"),
            ("$", r"\$"),
            ("%", r"\%"),
            ("&amp;", r"\&amp;"),
            ("~", r"\~{}"),
            ("_", r"\_"),
            ("^", r"\^{}")]

    for (val, replacement) in myarray:
        h = h.replace(val, replacement)
    h = h.replace(r"\textbackslash", r"\textbackslash{}", h)

    return h
</code></pre>
<p>The code is a modification of @tigger's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>to escape metacharacters, use raw string and backslashes</p>
<pre><code>r"regexp with a \* in it"
</code></pre>
</div>
<span class="comment-copy">thanks buddy , i was looking for that type of solution</span>
<span class="comment-copy">i am not able to figure out what will be input parameter to lambda , and how will that gets passed</span>
<span class="comment-copy">@user196264097: the parameter is a Match object (<a href="http://docs.python.org/dev/library/re.html#re.sub" rel="nofollow noreferrer">docs.python.org/dev/library/re.html#re.sub</a>)</span>
<span class="comment-copy">thanks man , i wonder you guys read  every line of the documentation. i have usually gone through the docs but not line by line. I am usually stuck where i skip the lines :)</span>
<span class="comment-copy">I feel that <code>h.replace(val, replacement)</code> could be faster than <code>re.sub(val, replacement, h)</code> and will fit our question's case.</span>
<span class="comment-copy">yes, I am not too familiar with the performance differences, but I think yours is more readable.</span>
<span class="comment-copy">Thanks. Just was curious: yes, <code>str.replace</code> is faster than <code>re.sub</code>. 6.7x faster according to tests on my PC :)</span>
