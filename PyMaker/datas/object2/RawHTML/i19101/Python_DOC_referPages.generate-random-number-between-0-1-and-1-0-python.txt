<div class="post-text" itemprop="text">
<p>I'm trying to generate a random number between 0.1 and 1.0.
We can't use <code>rand.randint</code> because it returns integers.
We have also tried <code>random.uniform(0.1,1.0)</code>, but it returns a value &gt;= 0.1 and &lt; 1.0, we can't use this, because our search includes also 1.0.</p>
<p>Does somebody else have an idea for this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>How "accurate" do you want your random numbers? If you're happy with, say, 10 decimal digits, you can just round <code>random.uniform(0.1, 1.0)</code> to 10 digits. That way you will include both <code>0.1</code> and <code>1.0</code>:</p>
<pre><code>round(random.uniform(0.1, 1.0), 10)
</code></pre>
<p>To be precise, <code>0.1</code> and <code>1.0</code> will have only half of the probability compared to any other number in between and, of course, you loose all random numbers that differ only after 10 digits.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://hg.python.org/cpython/file/49459216d35b/Lib/random.py#l327" rel="nofollow noreferrer"><code>Random.uniform()</code></a>
is just:</p>
<pre><code>def uniform(self, a, b):
    "Get a random number in the range [a, b) or [a, b] depending on rounding."
    return a + (b-a) * self.random()
</code></pre>
<p>where <code>self.random()</code> returns a random number in the range <code>[0.0, 1.0)</code>.</p>
<p>Python (as well as many other languages) uses <a href="https://en.wikipedia.org/wiki/Floating_point" rel="nofollow noreferrer">floating
point</a> to represent real
numbers. <a href="http://docs.python.org/dev/tutorial/floatingpoint.html" rel="nofollow noreferrer">How <code>0.1</code> is represented is described in detail in the
docs</a>:</p>
<pre><code>from __future__ import division

BPF = 53 # assume IEEE 754 double-precision binary floating-point format
N = BPF + 3
assert 0.1 == 7205759403792794 / 2 ** N
</code></pre>
<p>It allows to find a random number in <code>[0.1, 1]</code> (inclusive) using
<code>randint()</code> without losing precision:</p>
<pre><code>n, m = 7205759403792794, 2 ** N
f = randint(n, m) / m
</code></pre>
<p><code>randint(n, m)</code> returns a random integer in <code>[n, m]</code> (inclusive)
therefore the above method can potentially return <em>all</em> floating points
numbers in <code>[0.1, 1]</code>.</p>
<p>An alternative is to find the smallest <code>x</code> such that <code>x &gt; 1</code> and use:</p>
<pre><code>f = uniform(.1, x)
while f &gt; 1:
    f = uniform(.1, x)
</code></pre>
<p><code>x</code> should be the smallest value to avoid losing precision and to
reduce number of calls to <code>uniform()</code> e.g.:</p>
<pre><code>import sys
# from itertools import count

# decimal.Decimal(1).next_plus() analog
# x = next(x for i in count(1) for x in [(2**BPF + i) / 2**BPF] if x &gt; 1)
x = 1 + sys.float_info.epsilon
</code></pre>
<p>Both solutions preserve uniformness of the random distribution (<a href="https://stackoverflow.com/questions/1194882/how-to-generate-random-number-in-bash#comment40737683_1195035">no skew</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a=.1
&gt;&gt;&gt; b=np.nextafter(1,2)
&gt;&gt;&gt; print(b)
1.0000000000000002
&gt;&gt;&gt; [a+(b-a)*random.random() for i in range(10)]
</code></pre>
<p>or, use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html" rel="nofollow noreferrer">numpy's uniform</a>:</p>
<pre><code>np.random.uniform(low=0.1, high=np.nextafter(1,2), size=1)
</code></pre>
<p><a href="https://stackoverflow.com/a/6163157/298607">nextafter</a> will produce the platform specific next representable floating pointing number towards a direction. Using numpy's random.uniform is advantageous because it is unambiguous that it does not include the upper bound. </p>
<hr/>
<p><strong><em>Edit</em></strong> </p>
<p>It does appear that Mark Dickinson's comments is correct: <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html" rel="nofollow noreferrer">Numpy's documentation</a> is incorrect regarding the upper bound to random.uniform being inclusive or not. </p>
<p>The Numpy documentation states <code>All values generated will be less than high.</code></p>
<p>This is easily disproved:</p>
<pre><code>&gt;&gt;&gt; low=1.0
&gt;&gt;&gt; high=1.0+2**-49
&gt;&gt;&gt; a=np.random.uniform(low=low, high=high, size=10000)
&gt;&gt;&gt; len(np.where(a==high)[0])
640
</code></pre>
<p>Nor is the result uniform over this limited range:</p>
<pre><code>&gt;&gt;&gt; for e in sorted(set(a)):
...    print('{:.16e}: {}'.format(e,len(np.where(a==e)[0])))
... 
1.0000000000000000e+00: 652
1.0000000000000002e+00: 1215
1.0000000000000004e+00: 1249
1.0000000000000007e+00: 1288
1.0000000000000009e+00: 1245
1.0000000000000011e+00: 1241
1.0000000000000013e+00: 1228
1.0000000000000016e+00: 1242
1.0000000000000018e+00: 640
</code></pre>
<p>However, combining  J.F. Sebastian and Mark Dickinson's comments, I think this works:</p>
<pre><code>import numpy as np
import random 

def rand_range(low=0,high=1,size=1):
    a=np.nextafter(low,float('-inf'))
    b=np.nextafter(high,float('inf'))
    def r():
        def rn(): 
            return a+(b-a)*random.random()

        _rtr=rn()
        while  _rtr &gt; high:
            _rtr=rn()
        if _rtr&lt;low: 
            _rtr=low
        return _rtr     
    return [r() for i in range(size)]
</code></pre>
<p>If run with the minimal spread of values in Mark's comment such that there are very few discrete floating point values:</p>
<pre><code>l,h=1,1+2**-48
s=10000
rands=rand_range(l,h,s)    
se=sorted(set(rands))
if len(se)&lt;25:
    for i,e in enumerate(se,1):
        c=rands.count(e)
        note=''
        if e==l: note='low value end point'
        if e==h: note='high value end point'
        print ('{:&gt;2} {:.16e} {:,}, {:.4%} {}'.format(i, e, c, c/s,note))
</code></pre>
<p>It produces the desired uniform distribution inclusive of end points:</p>
<pre><code> 1 1.0000000000000000e+00 589, 5.8900% low value end point
 2 1.0000000000000002e+00 544, 5.4400% 
 3 1.0000000000000004e+00 612, 6.1200% 
 4 1.0000000000000007e+00 569, 5.6900% 
 5 1.0000000000000009e+00 593, 5.9300% 
 6 1.0000000000000011e+00 580, 5.8000% 
 7 1.0000000000000013e+00 565, 5.6500% 
 8 1.0000000000000016e+00 584, 5.8400% 
 9 1.0000000000000018e+00 603, 6.0300% 
10 1.0000000000000020e+00 589, 5.8900% 
11 1.0000000000000022e+00 597, 5.9700% 
12 1.0000000000000024e+00 591, 5.9100% 
13 1.0000000000000027e+00 572, 5.7200% 
14 1.0000000000000029e+00 619, 6.1900% 
15 1.0000000000000031e+00 593, 5.9300% 
16 1.0000000000000033e+00 592, 5.9200% 
17 1.0000000000000036e+00 608, 6.0800% high value end point
</code></pre>
<p>On the values requested by the OP, it also produces a uniform distribution:</p>
<pre><code>import matplotlib.pyplot as plt

l,h=.1,1  
s=10000
bin_count=20
rands=rand_range(l,h,s)  
count, bins, ignored = plt.hist(np.array(rands),bin_count)   
plt.plot(bins, np.ones_like(bins)*s/bin_count, linewidth=2, color='r')
plt.show()   
</code></pre>
<p>Output</p>
<p><img alt="uniform " src="https://i.stack.imgur.com/kl8ZJ.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>With the information you've given (including comments thus far), I still fail to see how the university is going to test your program such that it will make a difference if 1.0 appears or not.  (I mean, if you're required to generate <em>random</em> floats, how can they require that <em>any</em> particular value appears?)</p>
<p>OK, so putting the craziness of your requirements aside:</p>
<p>The fact that the lower bound for your random floats is higher than 0 gives you a disturbingly elegant way to use <code>random.random</code>, which guarantees return values in the interval [0.0, 1.0):  Simply keep calling <code>random.random</code>, throwing away any values less than 0.1, except 0.0.  If you actually get 0.0, return 1.0 instead.</p>
<p>So something like</p>
<pre><code>from random import random

def myRandom():
    while True:
        r = random()
        if r &gt;= 0.1:
            return r
        if r == 0.0:
            return 1.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use random.randint simply by doing this trick:</p>
<pre><code>&gt;&gt;&gt; float(random.randint(1000,10000)) / 10000
0.4362
</code></pre>
<p>if you want more decimals, just change the interval to:</p>
<p>(1000,10000) 4 digits
(10000,100000) 5 digits
etc</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you unable to use <code>random.random()</code>? This gives a number between 0.0 and 1.0, though you could easily set up a way to get around this.</p>
<pre><code>import random
def randomForMe():
    number = random.random()
    number = round(number, 1)
    if (number == 0):
        number = 0.1
</code></pre>
<p>This code would give you a number that is between 0.1 and 1.0, inclusive (0.1 and 1.0 are both possible solutions). Hope this helps.</p>
<p>*I assumed you only wanted numbers to the tenths place. If you want it different, where I typed <code>round(number, 1)</code> change <code>1</code> to <code>2</code> for hundredths, <code>3</code> for thousandths, and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard way would be <code>random.random() * 0.9 + 0.1</code> (<code>random.uniform()</code> internally does just this).  This will return numbers between 0.1 and 1.0 without the upper border.</p>
<p>But wait!  0.1 (aka ¹/₁₀) has no clear binary representation (as ⅓ in decimal)!  So You won't get a true 0.1 anyway, simply because the computer cannot represent it internally.  Sorry ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the Python 3.0 <a href="http://docs.python.org/3.0/library/random.html" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>random.<strong>uniform</strong>(a, b) Return a random floating point number N such that a &lt;= N &lt;= b for a &lt;= b and b &lt;= N &lt;= a for b &lt; a.</p>
</blockquote>
<p>Thus, <code>random.uniform()</code> does, in fact, include the upper limit, at least on Python 3.0.</p>
<p>EDIT: As pointed out by @Blender, the documentation for Python 3.0 seems to be inconsistent with the source code on this point.</p>
<p>EDIT 2: As pointed out by @MarkDickinson, I had unintentionally linked to the Python 3.0 documentation instead of the latest Python 3 documentation <a href="http://docs.python.org/3/library/random.html" rel="nofollow">here</a> which reads as follows:</p>
<blockquote>
<p>random.<strong>uniform</strong>(a, b)  Return a random floating point number N such
  that a &lt;= N &lt;= b for a &lt;= b and b &lt;= N &lt;= a for b &lt; a. </p>
<p>The end-point
  value b may or may not be included in the range depending on
  floating-point rounding in the equation a + (b-a) * random().</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Try 
    random.randint(1, 10)/100.0</p>
</div>
<div class="post-text" itemprop="text">
<p>In numpy, you can do the following:</p>
<pre><code>import numpy
numpy.random.uniform(0.1, numpy.nextafter(1, 2))
</code></pre>
</div>
<span class="comment-copy">According to the <a href="http://docs.python.org/2/library/random.html#random.uniform" rel="nofollow noreferrer">docs</a>, random.uniform will "Return a random floating point number N such that <code>a &lt;= N &lt;= b</code> for <code>a &lt;= b</code>" which would indicate that it will return a number &lt;=1.0.  Did you find other documentation that refutes this?</span>
<span class="comment-copy">The chance of getting exactly 1.0 is virtually 0 anyway...</span>
<span class="comment-copy">If <code>random.uniform(0.1, 1)</code> returns <code>1.0</code>, I claim it's more likely to be a sign that something's gone wrong than that it's working.</span>
<span class="comment-copy">@SethMMorton: We looked at the examples of basic usage: random.uniform(1, 10)  # Random float x, 1.0 &lt;= x &lt; 10.0.</span>
<span class="comment-copy">I'm struggling to think of a case where this potential inability to return 1.0 in this case would have practical importance, given the extreme unlikelihood of returning that value even if it was possible to return it. If there is a circumstance where it would be important, I would be interested to learn about it.</span>
<span class="comment-copy">+1: This is a great answer</span>
<span class="comment-copy">The first suggestion doesn't work, thanks to rounding:  given <code>a = 0.1</code>, <code>b = 1+2**-52</code>, and <code>rand_max = 1-2**-53</code> (the largest value that <code>random</code> can actually produce), then <code>a + (b - a) * rand_max</code> turns out to be greater than 1.0.</span>
<span class="comment-copy">And I'm afraid that numpy's documentation is incorrect here:  if you look at the underlying code, it's doing exactly the same as Python is, and it is indeed possible for <code>np.random.uniform</code> to return the upper bound for some values of low and high.  For an extreme example, try <code>np.random.uniform(low = 1.0, high = 1.0 + 2**-52, size=100)</code>, and note that about half of the output values are equal to <code>high</code>.</span>
<span class="comment-copy">you might need a <a href="http://stackoverflow.com/a/16301559/4279"><code>while</code>-loop as in my answer</a> to avoid generating values larger than <code>b</code>.</span>
<span class="comment-copy">@MarkDickinson: As usual -- you are completely correct. I will rework this answer</span>
<span class="comment-copy">Much improved answer!  (Some would even say more informative than necessary, but I enjoyed the detail. :)</span>
<span class="comment-copy">+1: it doesn't skew the random distribution and provides the same precision for floating point values as random(). btw, you can test boundary values by mocking random.Random to provide special values (it is enough to override .random, .getrandbits). Failing tests and solutions that use os.urandom, ssl.RAND_bytes, etc could be checked by hand. The general randomness can be checked by existing tests (as a black box).</span>
<span class="comment-copy">The resulting distribution isn't uniform any more, though.</span>
<span class="comment-copy">Why round the number at all? The question did not mention that this was desired. If it was, the problem would be trivially solved with randint and a division by 10.</span>
<span class="comment-copy">@svk I rounded the numbers because all the numbers he had used in the question were up to one decimal place. It can be left out, and in that case, he can just use <code>random.random()</code>, I guess.</span>
<span class="comment-copy">This is identical to what <code>random.uniform(0.1, 1.0)</code> does.  <code>without both borders</code> is inaccurate:  <code>random.random()</code> <i>can</i> return <code>0.0</code>, but cannot return <code>1.0</code>.</span>
<span class="comment-copy">You're right, Mark.  Thanks for the correction, I will include this in the text.</span>
<span class="comment-copy">It seems like the Python 3 documentation is different from the Python 2. The source, however, is identical and both include the same comment: <code>"Get a random number in the range [a, b) or [a, b] depending on rounding."</code></span>
<span class="comment-copy">Well, the Python 3 <i>docs</i> are different; doesn't necessarily mean the behavior is different.  I recall a discussion some while back (sorry, don't remember when exactly and don't have any links) whether to include this caveat.  It may well be that the consensus was that no use case really justified a guarantee that the end-point value ever be returned (more or less along the lines of @ExP's comment).  That is, if your application <i>depends on</i> the end-point appearing, then perhaps you've modeled the problem wrong, or misunderstand (pseudo)random numbers.</span>
<span class="comment-copy">@Simon: That's a link to the 3.0 docs;  try <a href="http://docs.python.org/3/library/random.html" rel="nofollow noreferrer">docs.python.org/3/library/random.html</a> for a more up-to-date version.</span>
<span class="comment-copy">@MarkDickinson: Oy, how did I miss that. I guess so many people consider 3.1 the first (acceptable) version in the Python 3 series that it just didn't occur to me that anyone would link <i>specifically</i> to 3.0. Good catch.</span>
<span class="comment-copy">@MarkDickinson: Thanks for the clarification. Good spotting. I've amended my answer but I haven't deleted it because awareness of this point seems like it might be useful.</span>
<span class="comment-copy"><code>TypeError: random_sample() takes at most 1 positional argument (2 given)</code>. I suspect you meant <code>random.uniform</code>. Note that <code>numpy.random.uniform</code> <i>can</i> return the upper limit. (E.g., try <code>numpy.random.uniform(1.0, 1.0+2**-52)</code> a few times to see this.)</span>
<span class="comment-copy">Fixed. Thanks. Hm, In documentation it says it cannot. Is this a known fact about upper bound? Should this be reported as a bug?</span>
<span class="comment-copy">possibly, yes. <a href="https://github.com/numpy/numpy/issues/10803" rel="nofollow noreferrer">github.com/numpy/numpy/issues/10803</a></span>
