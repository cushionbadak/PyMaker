<div class="post-text" itemprop="text">
<p>I need to create two classes for a program that takes in input variable for a book, title, author, number of pages and looks to see if it's checked out and then adds books to a dictionary in the following format <code>dictionary[title] = author</code>. Then I need to print al of my information in a main function in this format: ""title author pages checkedOut." I basically need to print out the return value of my <code>__str__()</code> function in my classes. Here is my code:</p>
<pre><code>class Book:
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages
        self.checkedOut = False

    def checked_Out(self):
        print(self.checkedOut)
        return self.checkedOut

    def change_value_of_checkedOut(self):
        if self.checkedOut == False:
            self.checkedOut = True
            print("Switched from False to True.")
        elif self.checkedOut == True:
            self.checkedOut = False
            print("Switched from True to False.")

    def return_pages(self):
        print(self.pages)
        return self.pages

    def return_title(self):
        print(self.title)
        return self.title

    def __str__(self):
        return ("Title: " + self.title + "Author: " + self.author +
                "Pages: " + self.pages + "Checked Out Status: " +
                self.checkedOut)

class Library:
    def __init__(self):
        self.collection = {}

    def addExistingBook(self, book):
        self.collection[book.title] = book.author

    def addNewBook(self, title, author, pages):
        new_book = Book(title, author, pages)
        self.collection[title] = new_book.author

    def change_checked_out_status(self, title):
        if title in self.collection:
            title.change_value_of_checkedOut()
        else:
            print("This book is not in the collection.")

    def __str__(self):
        for myBook in self.collection[myBook]:
            self.collection[myBook]
            self.collection[myBook] = self.author

            # I want to print this return value in my main
        return ("Title: " + self.title + "Author: " + self.author
                + "Pages: " + self.pages + "Checked Out Status: " + self.checkedOut)

def main():
    title = str(input("Enter the title of the book. "))
    author = str(input("Enter the author of the book. "))
    pages = int(input("Enter the number of pages in the book. "))
    myBook = Book(title, author, pages)
    myLib = Library()
    myLib.addExistingBook(myBook)
    myLib2 = Library()
    myLib3 = myLib2.__str__()
    print(myLib3)

main()
</code></pre>
<p>It seems like something is wrong with the for loop in my <code>__str__(self)</code> function in the class Library (the idea is that I want the loop to iterate over ever book in the collection) but I'm not sure what the problem is. Here is the error message that I get:</p>
<pre><code>Enter the title of the book. A Tale of Two Cities
Enter the author of the book. Charles Dickens
Enter the number of pages in the book. 434
Traceback (most recent call last):
  File "C:\Python33\Class Programs\lab8.py", line 71, in &lt;module&gt;
    main()
  File "C:\Python33\Class Programs\lab8.py", line 68, in main
    myLib3 = myLib2.__str__()
  File "C:\Python33\Class Programs\lab8.py", line 54, in __str__
    for myBook in self.collection[myBook]:
UnboundLocalError: local variable 'myBook' referenced before assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looping over the keys of a dictionary, you should <em>not</em> try to pass in a key in the loop statement:</p>
<pre><code>def __str__(self):
    for myBook in self.collection:
</code></pre>
<p>It is unclear what you are trying to do with that loop. You are then accessing <code>self.collection[myBook]</code> without doing anything with the return value, then you are <em>replacing</em> the value with <code>self.author</code> (which doesn't exist on <code>self</code>, that is still the library), then you return something completely different as the <code>__str__()</code> result.</p>
<p>I <em>think</em> you want to create a list of your library books here:</p>
<pre><code>def __str__(self):
    return ', '.join('{} - {}'.format(title, author) for title, author in self.collection.items())
</code></pre>
<p>Now you return a comma-separated list of all titles and authors in your collection.</p>
<p>There are 3 things going on there:</p>
<ul>
<li>Using a generator expression, we loop over the dictionary <a href="http://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow"><code>.items()</code> method</a>; this generates <code>(key, value)</code> pairs for everything in the dictionary.</li>
<li>Each key and value is passed to the <a href="http://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a>, using the string as a template to put a <code>-</code> dash between the title and author pairs stored in your <code>self.collection</code> dictionary.</li>
<li>The whole loop is passed to the <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code> method</a>; this method takes all the strings from the sequence given to it and concatenates them together with <code>', '</code> commas between them.</li>
</ul>
<p>Next, you are creating an <em>empty</em> library, then print the output of the <code>__str__()</code> method; there is no need to call that explicitly, <code>print()</code> does that for you. Do not create a new library, just print the one you already have:</p>
<pre><code>myLib = Library()
myLib.addExistingBook(myBook)
print(myLib)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you want to change</p>
<pre><code>def __str__(self):
        for myBook in self.collection[myBook]:
            self.collection[myBook]
            self.collection[myBook] = self.author
</code></pre>
<p>to </p>
<pre><code>def __str__(self):
        for myBook in self.collection.keys():
            self.collection[myBook]
            self.collection[myBook] = self.author
</code></pre>
</div>
<span class="comment-copy">When I change it to what you suggested and run the program, after I put in my input variables, the program just returns None. Like this:  Enter the title of the book. A Tale of Two Cities Enter the author of the book. Charles Dickens Enter the number of pages in the book. 434 None</span>
<span class="comment-copy">Got it! Thanks. But can you explain briefly what the return statement you suggested for me means? I've never seen that before.</span>
<span class="comment-copy"><a href="http://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow noreferrer">".".join(iteratable)</a> joins the iteratable with the string.  For info on <code>.format</code> see the cookbook <a href="http://mkaz.com/solog/python-string-format" rel="nofollow noreferrer">mkaz.com/solog/python-string-format</a></span>
<span class="comment-copy">@IvanLesiv: Added a more detailed explanation with links to method documentation.</span>
<span class="comment-copy">Python dictionaries do not have a uppercase <code>.Keys()</code> method.</span>
<span class="comment-copy">Thanks, fixed it.</span>
<span class="comment-copy">Next, see <a href="http://stackoverflow.com/questions/16202493/how-do-i-get-the-return-value-of-my-str-function-to-print-in-my-main/16202538?noredirect=1#comment23168034_16202559">my comment on another answer here</a>; you don't actually <i>need</i> to use <code>.keys()</code>. And as per <a href="http://stackoverflow.com/a/16202535/100297">my answer</a>, the rest of the code makes no sense, especially in context of the <code>__str__</code> method.</span>
