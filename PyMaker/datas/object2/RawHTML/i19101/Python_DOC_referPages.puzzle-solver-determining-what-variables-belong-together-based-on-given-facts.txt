<div class="post-text" itemprop="text">
<p>Before I say anything else - the problem may look lengthy but it's actually just 1 problem in the core, that kind of gets repeated.  I'm trying to create a "puzzle solver" that has to do with probability.  This is a model where the person solving the problem has to do it without computer help, but I want to be able to have a script, where I can just change the variables for different conditions.  We use this test for potential employees and we have to come up with the answers.  It's pretty tedious, so I was hoping someone could give me a hand trying to do it in Python? I'm still learning Python but because I see how easily everyone can "manipulate" it to give them what they need I was hoping to learn how to do that, so I don't have to do this over and over again by hand.</p>
<p>Here's an example of the test -</p>
<p>Given facts:</p>
<ol>
<li>There are 5 houses in a row, numbered from left to right as 1, 2, 3, 4, 5.</li>
<li>Each house is painted a different color: Red, Orange, Yellow, Green, or Blue.</li>
<li>Each house is owned by a different person: Ann, Bob, Carl, Dorothy, or Ed.</li>
<li>Each house has a different number of windows: one, two, three, four, five</li>
<li>Each house was built in a different year: 1970, 1980, 1990, 2000, or 2010.</li>
<li>Each person knows a different language: Spanish, French, Latin, German, Italian.</li>
</ol>
<p>Then we give them the constraints:</p>
<ol>
<li>Bob lives in the yellow house.</li>
<li>Ann knows Latin.</li>
<li>There are 5 windows on the orange house.</li>
<li>Dorothy lives in a house with 2 windows.</li>
<li>The orange house is immediately to the right of the green house.</li>
<li>The German speaker lives in the house built in 2000.</li>
<li>The red house was built in 1970.</li>
<li>The middle house has 3 windows.</li>
<li>Carl lives in the first house.</li>
<li>The house built in 1980 is next to the house of the Italian speaker.</li>
<li>The house built in 1970 is next to the house where the French speaker lives.</li>
<li>The house built in 1990 has 1 window.</li>
<li>Ed lives in a house built in 2010.</li>
<li>Carl lives next to the blue house.</li>
</ol>
<p>The potential employee has to figure out:</p>
<p>for each house numbered 1 to 5, who lives there, what color is the house, how many windows it has, when was it built and what language does the occupant speak.
And that is exactly what I want to put into Python!</p>
<p>I gave it a go and here's my reasoning behind it:</p>
<pre><code>def permutations(x):
    outlist = []
    for a in x:
        for b in x:
            if b == a:
                continue
            for c in x:
                if c == b or c == a:
                    continue
                for d in x:
                    if d == a or d == b or d == c:
                        continue
                    for e in x:
                        if e == a or e==b or e==c or e==d:
                            continue
                        outlist.append([a,b,c,d,e])
    return outlist
</code></pre>
<p>The "checks" in the loop are so that the loop continues if an entry would be repeated, so that the inner loops don’t have to execute unless the early loops are valid - saves time!</p>
<p>Given a list x of five elements, this function returns a list of lists, each of which is a permutation of the original five elements where no one element is equal to another.
So, if the list input is x = [1,2,3,4,5], the returned output is a list of possible permutations of this:</p>
<pre><code>Outlist = [[1,2,3,4,5],[1,2,3,5,4],[1,2,4,3,5],[1,2,4,5,3], ...]
</code></pre>
<p>which will have 5! = 120 elements.</p>
<p>So, I know how it works in theory but writing it down in Python proved to much for me to "translate".</p>
<p>I assigned the name variables (Ann,Bob,Carl,Dorothy,Ed) one of these permutations (say [1,2,5,4,3]), which means that Ann lives in house 1, Bob lives in house 2, Carol lives in house 5, Dorothy lives in house 4, Ed lives in house 3.</p>
<p>Similarly, I know you can assign to the color variables (Red,Orange,Yellow,Green,Blue) another of these permutations (say [5,4,3,1,2]) which means that house 5 is red, house 4 is orange, house 3 is yellow, house 1 is green and house 2 is blue.</p>
<p>You can assign the same or another permutation to the number of windows (one,two,three,four,five), the year the house was built (Seven,Eight,Nine,Zero,Ten) and the language spoken.  </p>
<p>And this is where I get really lost because I'm having a hard time understanding how the same numbers can be reused - don't they get written over in such cases?</p>
<p>First things first though - it's better (more time efficient) if we first check whether the clues are true for this assignment. If not, the person taking the test can go to another assignment!</p>
<p>Coding-wise this is how I imagined it but my limited knowledge of Python didn't really help me write "proper code":</p>
<pre><code>a) check if Bob lives in the yellow house, by Bob == Yellow 
</code></pre>
<p>(that is, the house number assigned to Bob is the same as the house number assigned to Yellow.
    b) check if the house built in 1970 is next to the house where the French speaker lives, do absolute value calculation -&gt; </p>
<pre><code>abs(Seven – French) == 1
</code></pre>
<p>Meaning the house numbers assigned to Seven and French differ by only 1.  </p>
<p>Further on I know there are additional checks and all of the them must be passed as True for the five permutation assignments to be the solution of the puzzle.</p>
<p>Then I made an assignment of the permutation to the variables using a loop:</p>
<pre><code>for a in outlist:
    (Ann,Bob,Carl,Dorothy,Ed) = a
</code></pre>
<p>It will assign Ann the value a[0], Bob the value a[1], Carol the value a[2], Dorothy the value a[3] and Ed the value a[4], and because we loop through all permutations in outlist, where outlist is the output of the function, a list of permutation lists.</p>
<p>Another problem - making a list of lists... showing to be a bit of a struggle.</p>
<p>I know I have to write five nested loops of assignment to the variables of interest.  To verify whether the assignment satisfies the clues I thought about checking a subset of the clues incrementally in each loop once I'd have a partial assignment, so then I wouldn’t enumerate the inner loop unless the subset of clues is satisfied.  Again, it gives the program to run faster and be more effective.</p>
<p>Here's an attempt at the first loop, which is (for instance) over names. I know Carl must live in house 1, and the other loops don't get executed if this is not true! On paper, you have to keep repeating the process until Carl == 1!</p>
<p>Attempt at writing code:</p>
<pre><code>for a in outlist:
(Ann,Bob,Carl,Dorothy,Ed) = a
if Carl != 1:
    continue
for b in outlist:
    (Red,Orange,Yellow,Green,Blue) = b
    if ...  
</code></pre>
<p>With this code, the inner four loops only execute when Carl == 1. 
I have to continue I know, but the overlap of variables is a problem here too.</p>
<p>AND FINALLY - I was advised to "time the function" by using the time module </p>
<pre><code>time.time().  
</code></pre>
<p>I know the current time reported back in a Mac (so mine) is in microseconds, and this is written according to that. Not sure HOW to get the right code tho.</p>
<pre><code>import time
start = time.time()
#CODE
end = time.time()
print('Running Time: {} msecs'.format((end - start)*0.001))
</code></pre>
<p>Thank you for getting to the end of this!  I find it very overwhelming and don't know where to start but I would sure love to have something like this doing all my permutations for me!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations()</code></a> to generate permutations:</p>
<pre><code>from itertools import permutations

for colors in permutations(range(5)):
    # colors is permuted combination of 5 integers between 0 and 4, inclusive.
</code></pre>
<p>This uses numbers from 0 to 4 as that comes more natural to Python, but the principle is the same; if you want you can use <code>range(1, 6)</code> instead to generate permutations of integers 1 through to 5, inclusive.</p>
<p>Now nest your permutation loops. The outer loop is for the colour choices; each number representing the colour for that house. Test the constraints, eliminate all that don't fit (any combo that has orange not next to green doesn't fit). Where the constraints fit, loop over permutations for the owner, eliminate those that don't fit, loop over window counts for those that do, etc. </p>
<p>Use one function to test constraints, allowing for missing aspects, to keep testing simple. </p>
<p>You'll find that you can eliminate most combos very quickly very early. </p>
</div>
<span class="comment-copy">that's a good tool to have, but I'm able to calculate permutations by myself on paper.  How do I work with the constraints I have?</span>
