<div class="post-text" itemprop="text">
<p>I have tried googling this with no success, but I am trying to read in a file and find the length of each string. Each string is a set of numbers (i.e. 012345). I use the len() function and it works but it is adding 1 more to every line except the last line. I am assuming it is counting the eol/return character. How do I fix this? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can strip the whitespace:</p>
<pre><code>len(line.strip())
</code></pre>
<p>Example:</p>
<pre><code>$ echo 'One
Two' | python -c 'for line in __import__("sys").stdin: print(len(line))'
4
4
$ echo 'One
Two' | python -c 'for line in __import__("sys").stdin: print(len(line.strip()))'
3
3
</code></pre>
<p><a href="http://docs.python.org/3/library/stdtypes.html#str.strip"><code>str.strip</code> docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could trim the whitespace off each line that you read. You can use the strip (strips extra whitespace off both left and right sides), or rstrip function (strips off whitespace from the right hand side) for this.</p>
<pre><code>"My file line.\n".rstrip()
</code></pre>
<p>The rstrip() function can also take in arguments, if you want to strip, say, only newline characters.</p>
<pre><code>"My file line.\n".rstrip('\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using Python's string replace function? It would go something like this:</p>
<pre><code>len(yourString.replace('\n', ''));
</code></pre>
</div>
<span class="comment-copy">What are you using to read in the file? <code>for line in file</code>? <code>file.readlines()</code>? <code>file.read()</code>?</span>
<span class="comment-copy">Yes, it looks like it is counting <code>\n</code>.</span>
<span class="comment-copy">Important detail to note, the newline character <code>\n</code> at the end of a line is considered whitespace. If that's all you want to remove, you can use <code>line.rstrip('\n')</code>.</span>
<span class="comment-copy">@MarkRansom which to my surprise is 2.5 times less efficient, as a simple timeit on <code>'Hello\n'</code> shows :)</span>
<span class="comment-copy">I doubt stripping new lines is ever going to become a bottleneck</span>
<span class="comment-copy">@jamylak Sure :) But I thought there had to be some justification for writing longer code (provided it's functionally equivalent in the context, which it in fact isn't).</span>
<span class="comment-copy">Well maybe we are interpreting someone's code written in <a href="http://en.wikipedia.org/wiki/Whitespace_(programming_language)" rel="nofollow noreferrer">whitespace</a>...</span>
<span class="comment-copy">Note that some OS use <code>\r\n</code> as newline.</span>
<span class="comment-copy">...but on those systems (i.e. Windows) you'd only see both characters if you explicitly open the file in binary mode, right?</span>
<span class="comment-copy">… or if you opened it in text mode without universal newlines (and the newlines were inconsistent or for some other reason the heuristics guessed Unix instead of Windows)…</span>
<span class="comment-copy">Also, even though you <i>can</i> do this… why would you? If you want to strip newlines off the end of a line, why replace newlines throughout the line? It's less explicit about its meaning (and the common justifications for violating Python idioms don't apply here, since it's more verbose, probably slower, etc. as well).</span>
