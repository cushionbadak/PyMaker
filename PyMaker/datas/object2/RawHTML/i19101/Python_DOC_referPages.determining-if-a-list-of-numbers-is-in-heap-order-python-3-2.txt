<div class="post-text" itemprop="text">
<p>I just discovered heap (in real life and in Python) and now I'm trying to determine if a certain list of random numbers is in heap order.<br/>
Problem is I'm not sure myself if I actually understand "heap" in practice even though I believe the definition provided makes sense.</p>
<p>I found some practice problems that should help you write heap psuedo code.
This is the problem and below it is my attempt at solving it:</p>
<p>Write a function that checks whether a list of numbers is a heap or not: </p>
<p>Given a list, it returns True if the numbers are in a heap order, and False if the numbers are not and have the programme return and print the answer.</p>
<p>Example:</p>
<ul>
<li>returns True:
the following list is in heap order: [0,1, 10, 2, 3, 11, 12, 4, 5, 19, 15]</li>
<li>returns False
the following list is not in heap order: [0, 1, 10, 2, 15, 11, 12, 4, 5, 19, 3]</li>
</ul>
<p>Then there were 2 lists with a bunch of random numbers from 1 - 100 thrown in there, and some repeat. </p>
<pre><code>    def heap_or(A):
      n = len(A)
      for i in range(n):
        start = (len(A) - 2) / 2
        while start &gt;= 0:
          siftDown(A, start, len(A) - 1)
          start -= 1:
             return 'True'
        else:
             return 'False'

    def siftDown(A, start, end):
    root = start
    while root * 2 + 1 &lt;= end:
        number = root * 2 + 1
        if number + 1 &lt;= end and A[number] &lt; A[number + 1]:
            number += 1
        if number &lt;= end and A[root] &lt; A[number]:
            A[root], A[number] = A[number], A[root]
            root = number
        else:
            return

     print 
</code></pre>
<p>Can somebody please give me a hand?  Because I'm not really sure if I'm defining heap correctly the code is giving me a hard time as well!</p>
</div>
<div class="post-text" itemprop="text">
<p>The heap property (for a max heap) is that each node should be greater than or equal to its parent.  The parent of element <code>i</code> in a binary heap stored in an array is element <code>(i - 1) // 2</code>:</p>
<pre><code>def is_heap(A):
    return all(A[i] &gt;= A[(i - 1) // 2] for i in range(1, len(A)))
</code></pre>
<p>Obviously because the heap is stored in array we don't need to check the shape.</p>
</div>
<span class="comment-copy">We can give you a hand but you should include your implementation of <code>siftDown</code> as well</span>
<span class="comment-copy">@jamylak I'm almost positive it's not correct because I was trying to model my after someone else's heap ordering for min/max but I'll add it to my original post anyways now!</span>
<span class="comment-copy">@jamylak - so do you think you'll be able to help me out now?</span>
<span class="comment-copy">And here I though a heap was a tree-structure.</span>
<span class="comment-copy">related: <a href="http://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer"><code>heapq</code> module</a></span>
<span class="comment-copy">Hi, thanks for the reply.  I'm not looking for the max heap tho - does it matter?  So, say I have one of the above mentioned lists, or any other one, how would I address that?          <code>A = [1,2,4,5,3,2,5,2]         def is_heap(A):           return all(A[i] &gt;= A[(i - 1) // 2] for i in range(1, len(A)))</code>  And more importantly, how would I get it to show me the answer, True or False? Thanks again!</span>
<span class="comment-copy">@user2227808 you must have <i>some</i> comparison function in mind; if that's <code>&gt;=</code> then you have a max heap.  If you really want a string as the result, just use <code>str</code>.</span>
<span class="comment-copy">Sorry for not being clearer! I think I'm just confused as to where I should I put my print function so the Python interpreter tells me if it's True or False.  I tried putting it before return all and adding an extra pair of parentheses but that returned an "invalid synthax".</span>
<span class="comment-copy">Never mind, figured it out, silly question!  Thanks again for helping out!</span>
