<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists">How to make a flat list out of list of lists?</a>
<span class="question-originals-answer-count">
                    38 answers
                </span>
</li>
</ul>
</div>
<p>This is python syntax related question... Is there <em>more elegant</em> and <em>more pythonic</em> way of doing this:</p>
<pre><code>&gt;&gt;&gt; test = [[1,2], [3,4,5], [1,2,3,4,5,6]]
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for i in test: result += i
&gt;&gt;&gt; result
[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]
</code></pre>
<p>Join multiple list (stored inside another list) to one long list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a> classmethod:</p>
<pre><code>from itertools import chain

result = list(chain.from_iterable(test))
</code></pre>
<p>If all you need to do is iterate over the chained lists, then don't materialize it to a <code>list()</code>, just loop:</p>
<pre><code>for elem in chain.from_iterable(test):
    print(elem, end=' ')   # prints 1 2 3 4 5 1 2 3 4 5 6
</code></pre>
<p>You can also use parameter unpacking, directly on <a href="http://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain</code></a>:</p>
<pre><code>for elem in chain(*test):
</code></pre>
<p>But do this only with a smaller list.</p>
</div>
<span class="comment-copy">@AshwiniChaudhary you're right it's a duplicate, didn't occur to me to use word <code>flat</code> when searching for similar questions.</span>
<span class="comment-copy">There is no inherent harm to posting a duplicate, don't worry. Sometimes it's laziness on the poster's part, but in some cases it's a case of different wording, that's why duplicated don't disappear, and instead remain open as 'pointers' to the duplicated question, which means those search terms now point to an answer.</span>
<span class="comment-copy">Do you?  I think <code>from_iterable</code> is not necessary or useful in this case.</span>
<span class="comment-copy">@A.R.S.: In this case <code>*test</code> will do.</span>
<span class="comment-copy"><code>from_iterable()</code> makes far more sense here. Why use <code>*</code> unpacking when <code>from_iterable()</code> is designed to do the job? On a small list, there is no difference, but on a larger one, it could make a big difference.</span>
<span class="comment-copy">@Lattyware: Hrm, yes, with a big list it'll use a copy, you have a point ther.</span>
<span class="comment-copy">Yeah. It's not the end of the world, but it makes a lot more sense to just always use <code>chain.from_iterable()</code> over <code>*</code> unpacking - there is no real downside (slightly less nice syntax, but not horrific), and a potential gain. It also means the code is more flexible if it happens to take a generator or a large list tomorrow, which is always a possibility with a dynamic language like Python.</span>
