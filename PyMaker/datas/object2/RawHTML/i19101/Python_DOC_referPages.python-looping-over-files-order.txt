<div class="post-text" itemprop="text">
<p>Does anyone know how Python arranges files when looping over them?
I need to loop over some files in a folder in a fixed order (preferably alphanumerically according to the filenames), but Python seems to loop over them in a rather random order.
So far I am using this code:</p>
<pre><code>filelist = glob.glob(os.path.join(path, 'FV/*.txt'))
for infile in filelist: 
  #do some fancy stuff
  print str(infile)
</code></pre>
<p>and the filenames are printed in an order not really obvious to me.</p>
<p>Is there any simple way to predefine a certain order for that loop?
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I can see in the docs, <a href="http://docs.python.org/3.3/library/glob.html" rel="noreferrer"><code>glob.glob()</code></a> has no defined order. Given this, the easiest way to be sure is to sort the list returned to you:</p>
<pre><code>filelist = glob.glob(os.path.join(path, 'FV/*.txt'))
for infile in sorted(filelist): 
  #do some fancy stuff
  print str(infile)
</code></pre>
<p>This will just sort as strings - which gives the simple fixed order you were looking for. If you need a specific order, then <a href="http://docs.python.org/3/library/functions.html#sorted" rel="noreferrer"><code>sorted()</code></a> takes <code>key</code> as a keyword argument, which is a function that gives sort order. See the documentation (linked previously) for more.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
for root, dirs, files in os.walk(os.path.join(path, 'FV/'), topdown=True):
  print root
  print files.sort(reverse=True)
</code></pre>
<p>It's an alternative..
(considering that <code>glob.glob()</code> takes no parameter for ordering items, i just presented an alternative to <code>glob.glob()</code> which is, <code>walk()</code>.. It takes parameters that could be useful and I think that the downvotes are unfair but hey everyone's entitled to their opinion -.-)</p>
</div>
<span class="comment-copy">just for the sake of completeness: If you just want to iterate through files os.listdir often suffices (... not in your case, because you want to expand *.txt).</span>
<span class="comment-copy">Beat me to it.  Alphanumeric is the default sorting for strings, correct? +1</span>
<span class="comment-copy">@BlackVegetable Yeah, it'll just be a simple sort - obviously, you could define a <code>key</code> function to sort however you wanted.</span>
<span class="comment-copy">Perhaps you could edit your answer to include that information as well as a note about <code>reverse</code>?</span>
<span class="comment-copy">@BlackVegetable I added a short note, it shouldn't be hard to find more on <code>sorted()</code> if the OP needs it from here.</span>
<span class="comment-copy">great, thanks a lot!</span>
<span class="comment-copy">-1, This isn't equivalent. <code>walk()</code> gives all files, and goes into subdirectories.</span>
<span class="comment-copy">break if you don't like to go into subdirectories. <code>walk()</code> gives you control, it doesn't do things that you don't explicitly don't want it to do.</span>
<span class="comment-copy">It's rather silly to use <code>walk</code> when you don't want to recurse into subdirectories. And there's no guarantee that <code>walk</code> gives you files in alphabetical order as you claim.</span>
<span class="comment-copy">Again, <code>walk()</code> will give you programatical way of parsing objects based on their type and (again) what you descide to do. <code>glob.glob()</code> will just spit in your face a list of everything of the folder you gave it. for instance, <code>glob.glob('C:\Documents and Settings\myuser\Desktop\*')</code> will give you a unsorted, undefined list of stuff.. It's at least IMO not best practice to parse a "ls /path/" when there's a way to actually grab items by type.</span>
<span class="comment-copy">Your code isn't even correct because <code>walk</code> takes a directory name and not a wildcard.</span>
