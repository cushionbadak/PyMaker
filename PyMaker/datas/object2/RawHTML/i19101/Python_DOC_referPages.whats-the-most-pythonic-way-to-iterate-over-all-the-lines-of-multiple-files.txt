<div class="post-text" itemprop="text">
<p>I want to treat many files as if they were all one file.  What's the proper pythonic way to take [filenames] =&gt; [file objects] =&gt; [lines] with generators/not reading an entire file into memory?</p>
<p>We all know the proper way to open a file:</p>
<pre><code>with open("auth.log", "rb") as f:
    print sum(f.readlines())
</code></pre>
<p>And we know the correct way to link several iterators/generators into one long one:</p>
<pre><code>&gt;&gt;&gt; list(itertools.chain(range(3), range(3)))
[0, 1, 2, 0, 1, 2]
</code></pre>
<p>but how do I link multiple files together and preserve the context managers?</p>
<pre><code>with open("auth.log", "rb") as f0:
    with open("auth.log.1", "rb") as f1:
        for line in itertools.chain(f0, f1):
            do_stuff_with(line)

    # f1 is now closed
# f0 is now closed
# gross
</code></pre>
<p>I could ignore the context managers and do something like this, but it doesn't feel right:</p>
<pre><code>files = itertools.chain(*(open(f, "rb") for f in file_names))
for line in files:
    do_stuff_with(line)
</code></pre>
<p>Or is this kind of what <a href="http://www.python.org/dev/peps/pep-3156/">Async IO - PEP 3156</a> is for and I'll just have to wait for the elegant syntax later?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's always <a href="http://docs.python.org/2/library/fileinput.html#fileinput.input"><code>fileinput</code></a>.</p>
<pre><code>for line in fileinput.input(filenames):
    ...
</code></pre>
<p>Reading the <a href="http://hg.python.org/cpython/file/2.7/Lib/fileinput.py#l184">source</a> however, it appears that <code>fileinput.FileInput</code> can't be used as a context manager<sup>1</sup>.  To fix that, you could use <a href="http://docs.python.org/2/library/contextlib.html#contextlib.closing"><code>contextlib.closing</code></a> since <code>FileInput</code> instances have a sanely implemented <code>close</code> method:</p>
<pre><code>from contextlib import closing
with closing(fileinput.input(filenames)) as line_iter:
    for line in line_iter:
        ...
</code></pre>
<hr/>
<p>An alternative with the context manager, is to write a simple function looping over the files and yielding lines as you go:</p>
<pre><code>def fileinput(files):
    for f in files:
        with open(f,'r') as fin:
            for line in fin:
                yield line
</code></pre>
<p>No real need for <code>itertools.chain</code> here IMHO ... The magic here is in the <code>yield</code> statement which is used to transform an ordinary function into a fantastically lazy generator.</p>
<hr/>
<p><sup>1</sup>As an aside, starting with python3.2, <code>fileinput.FileInput</code> <em>is</em> implemented as a context manager which does exactly what we did before with <code>contextlib</code>.  Now our example becomes:</p>
<pre><code># Python 3.2+ version
with fileinput.input(filenames) as line_iter:
    for line in line_iter:
        ...
</code></pre>
<p>although the other example will work on python3.2+ as well.</p>
</div>
<span class="comment-copy">Also note that <code>files = itertools.chain(*(open(f, "rb") for f in file_names))</code> is definitely not good in this context.  unpacking the tuple causes all of your files to be opened before you actually enter the <code>chain</code> constructor.  You're better off with <code>itertools.chain.from_iterable(open(fname,'r') for fname in filenames))</code> -- In fact, this is a classic reason why the <code>from_iterable</code> classmethod needs to exist in the first place :).</span>
<span class="comment-copy">@mgilson had no idea <code>from_iterable</code> was a thing! I'm glad my usecase is a textbook example for why it's useful. I was trying to figure out how to properly get the lazy evaluation to work without nested for loops.  Thanks!</span>
<span class="comment-copy">Note that even the <code>from_iterable</code> doesn't guarantee that all of your files are closed when you're done iterating over it because you never know when <code>__del__</code> will actually run (though I'm pretty sure that they will be in Cpython)...</span>
<span class="comment-copy">There is <a href="http://docs.python.org/3.4/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a> that allows to treat multiple context managers as one (it is not needed in your case but might be useful in related cases).</span>
<span class="comment-copy">+1, I never knew about <code>fileinput</code>.</span>
<span class="comment-copy">@Blender -- It's a decent module that doesn't get used too much since it's functionality can be replaced by <code>chain.from_iterable</code>.  <code>itertools</code> and <code>collections</code> are the more well known tools people reach for 90% of the time.  I'm a little disappointed that it isn't implemented as a context manager though (It's not even a new-style class).  It seems like it would be a pretty simple addition, but forunately, it's easy enough to wrap with contextlib.</span>
<span class="comment-copy">As of Python 3.2, <code>fileinput</code> can be used as a context manager (<a href="http://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">docs.python.org/3/library/fileinput.html</a>.</span>
<span class="comment-copy">@NedDeily -- Added it.</span>
<span class="comment-copy">@Conrad.Dean -- Reasonable enough.  It is worth pointing out that <code>fileinput</code> takes an optional argument <code>openhook</code> which gets called instead of <code>open</code>.  So you would just need to delegate the opening of the files to an <code>openhook</code> function.</span>
