<div class="post-text" itemprop="text">
<p>I wan to turn this two lines of code into one. </p>
<pre><code>for n in exceptions:
    my_dict[n] += 1
</code></pre>
<p>It's bothering me that a small statement to increment a dictionary takes two lines. I'm sure this problem has bothered someone too.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for n in exceptions: my_dict[n] += 1
</code></pre>
<p>...but there is <em>nothing wrong</em> in the fact that the statement takes two lines. There are some python <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">coding guidelines (PEP8)</a> and they strongly encourage core readability. By putting those statements into a single line you lower the readability.</p>
<p>From <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>:</p>
<blockquote>
<p>While sometimes it's okay to put an if/for/while with a small body on
  the same line, never do this for multi-clause statements. Also avoid
  folding such long lines!</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_dict.update({n: my_dict[n] + 1 for n in exceptions})
</code></pre>
<p>This essentially uses <a href="http://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow">dict.update</a> to update the dictionary with values from another dictionary. And that other dictionary is built using a dictionary comprehension. Unfortunately, to get the <code>my_dict[n] += 1</code> effect, we have to read the value explicitely again in the expression.</p>
<p>But I would argue <strong>a lot</strong> if it would be better than using a <strong>simple</strong> and <strong>clear</strong> for-loop for this.</p>
<p>On the other hand, as you seem to be just counting exceptions, you might want to consider using a <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a> for your dictionary. Itâ€™s essentially an improved dictionary (meaning that you can use it just like a normal dictionary) but it comes with a few features that makes it perfect when counting things. For example, you could simplify above statement to just this:</p>
<pre><code>my_dict.update({n: 1 for n in exceptions})
</code></pre>
<p>Or as you are just adding <code>1</code> for each, you can just pass the iterable <code>exceptions</code> directly:</p>
<pre><code>my_dict.update(exceptions)
</code></pre>
<p>This would also have the benefit that  exceptions which do not exist in <code>my_dict</code> yet, are automatically initialized. To create a Counter from your existing dictionary, you can just pass the original dictionary to the Counter constructor:</p>
<pre><code>from collections import Counter
my_dict = Counter(my_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="http://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a>:</p>
<pre><code>import collections
my_dict = collections.Counter(exceptions)
</code></pre>
<p>or, if <code>my_dict</code> is already defined to be a <code>dict</code>,</p>
<pre><code>my_dict = collections.Counter(my_dict)
my_dict.update(exceptions)
</code></pre>
</div>
<span class="comment-copy">It is a really nice question, of how to make an operation to all the elements in a data structure in python. I would rewrite it</span>
<span class="comment-copy">Why does it bother you to use two lines?</span>
<span class="comment-copy">@0x90 like this? <code>map(lambda n: d.update({n: d[n] +1}), exceptions)</code></span>
<span class="comment-copy"><i>"I would argue a lot if it would be better than using a simple and clear for loop."</i> - make that bold :)</span>
<span class="comment-copy">I agree with you both. I'll condense the for loop into one line.</span>
