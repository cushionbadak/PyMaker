<div class="post-text" itemprop="text">
<p>I have already converted user input of DNA code <code>(A,T,G,C)</code> into RNA code<code>(A,U,G,C)</code>. This was fairly easy</p>
<pre><code>RNA_Code=DNA_Code.replace('T','U')
</code></pre>
<p>Now the next thing I need to do is convert the RNA_Code into it's compliment strand. This means I need to replace A with U, U with A, G with C and C with G, but all simultaneously.</p>
<p>if I say</p>
<pre><code>RNA_Code.replace('A','U')
RNA_Code.replace('U','A')
</code></pre>
<p>it converts all the As into Us then all the Us into As but I am left with all As for both.</p>
<p>I need it to take something like <code>AUUUGCGGCAAA</code> and convert it to <code>UAAACGCCGUUU</code>.</p>
<p>Any ideas on how to get this done?(3.3)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a translation table:</p>
<pre><code>RNA_compliment = {
    ord('A'): 'U', ord('U'): 'A',
    ord('G'): 'C', ord('C'): 'G'}

RNA_Code.translate(RNA_compliment)
</code></pre>
<p>The <a href="http://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate()</code> method</a> takes a mapping from codepoint (a number) to replacement character. The <a href="http://docs.python.org/3/library/functions.html#ord" rel="noreferrer"><code>ord()</code> function</a> gives us a codepoint for a given character, making it easy to build your map.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; RNA_compliment = {ord('A'): 'U', ord('U'): 'A', ord('G'): 'C', ord('C'): 'G'}
&gt;&gt;&gt; 'AUUUGCGGCAAA'.translate(RNA_compliment)
'UAAACGCCGUUU'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a mapping dictionary:</p>
<pre><code>In [1]: dic={"A":"U","U":"A","G":"C","C":"G"}

In [2]: strs="AUUUGCGGCAAA"

In [3]: "".join(dic[x] for x in strs)
Out[3]: 'UAAACGCCGUUU'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're not already using it, I suggest trying out <a href="http://www.biopython.org" rel="nofollow">Biopython</a>. It has all sorts of functions for dealing with biological data, including a pretty cool <a href="http://biopython.org/wiki/Seq" rel="nofollow"><code>Seq</code></a> object. There is a <a href="http://biopython.org/wiki/Seq#Complement_and_reverse_complement" rel="nofollow"><code>reverse_complement()</code></a> function that does exactly what you're trying to do, and a bunch more that you might not even have thought of yet. Check it out, it's a real time-saver.</p>
<pre><code>&gt;&gt;&gt; from Bio.Seq import Seq
&gt;&gt;&gt; from Bio.Alphabet import generic_dna
&gt;&gt;&gt; my_dna = Seq("AGTACACTGGT", generic_dna)
&gt;&gt;&gt; my_dna
Seq('AGTACACTGGT', DNAAlphabet())
&gt;&gt;&gt; my_dna.complement()
Seq('TCATGTGACCA', DNAAlphabet())
&gt;&gt;&gt; my_dna.reverse_complement()
Seq('ACCAGTGTACT', DNAAlphabet())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have a simple solution:</p>
<pre><code># get the sequence from the user:

dna_seq = input("Please enter your sequence here: ")

# make a for loop to read the seq one nucleotide at a time and add each one in a new variable

compliment = ""

for n in dna_seq:

    if n == "A":
        compliment = compliment + "T"
    elif n == "T":
        compliment = compliment + "A"
    elif n == "G":
        compliment = compliment + "C"
    elif n == "C":
        compliment = compliment + "G"

print(compliment)
</code></pre>
</div>
<span class="comment-copy">Use translate <a href="http://pymotw.com/2/string/#functions" rel="nofollow noreferrer">pymotw.com/2/string/#functions</a>.</span>
<span class="comment-copy">Drat, beat me to it.  (I see you've used the link already!)</span>
<span class="comment-copy">@BlackVegetable: Slightly different link, this is Python 3, but yes.</span>
<span class="comment-copy">Don't forget about <a href="http://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a></span>
