<div class="post-text" itemprop="text">
<p>I would like to pack all the data in a list into a single buffer to send over a UDP socket.  The list is relatively long, so indexing each element in the list is tedious.  This is what I have so far:</p>
<pre><code>NumElements = len(data)
buf = struct.pack('d'*NumElements,data[0],data[1],data[2],data[3],data[4])
</code></pre>
<p>But I would like to do something more pythonic that doesn't require I change the call if I added more elements to the list... something like:</p>
<pre><code>NumElements = len(data)
buf = struct.pack('d'*NumElements,data)  # Returns error
</code></pre>
<p>Is there a good way of doing this??</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use the <code>*args</code> calling syntax.</p>
<p>Instead of this:</p>
<pre><code>buf = struct.pack('d'*NumElements,data)  # Returns error
</code></pre>
<p>… do this:</p>
<pre><code>buf = struct.pack('d'*NumElements, *data) # Works
</code></pre>
<p>See <a href="http://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists">Unpacking Argument Lists</a> in the tutorial. (But really, read all of section 4.7, not just 4.7.4, or you won't know what "The reverse situation…" is referring to…) Briefly:</p>
<blockquote>
<p>… when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments… write the function call with the *-operator to unpack the arguments out of a list or tuple…</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The format string for <code>struct.pack(...)</code> and <code>struct.unpack(...)</code> allows to pass number(representing count) in front of type, with meaning how many times is the specific type expected to be present in the serialised data:</p>
<p>Simple case</p>
<pre><code>data = [1.2, 3.4, 5.6]
struct.pack('3d', data[0], data[1], data[2])
struct.pack('3d', *[1.2, 3.4, 5.6])
</code></pre>
<p>or more generally:</p>
<pre><code>data = [1.0, 1.234, 1.9, 3.14, 6.002, 7.4, 9.2]
struct.pack('{}d'.format(len(data)), *data)
</code></pre>
</div>
<span class="comment-copy">Ah that's just what I needed! Thank you!</span>
<span class="comment-copy"><code>'d' * NumElements</code> isn't very good practice, it could end up making a very large string, only to have to waste time parsing, only to free afterwards. Instead include the number directly in the string: <code>buf = struct.pack("{0:d}d".format(NumElements), *data)</code></span>
<span class="comment-copy">@ideasman42: Good point. But with a huge number of values, unpacking them into 500000 arguments might be as much of a problem as passing 'd'*500000, so you might want to test that against <code>b''.join(struct.pack('d', elem) for elem in data)</code>, or consider using something like <code>array</code> or <code>ctypes</code> instead of <code>struct</code>.</span>
<span class="comment-copy">@abarnert, of course if performance is a priority... its worth looking into alternatives as you suggest, even so, when an API is provided that exposes a convenient &amp; fast way to handle data. I'm not sure why you'd use the slower option. The example you give using <code>b''.join</code> is the slowest method by far, See benchmark <a href="https://gist.github.com/ideasman42/662dd741f31eaf33b006" rel="nofollow noreferrer">gist.github.com/ideasman42/662dd741f31eaf33b006</a>  Also, since this is an answer to a question for someone learning the API, its worth using good-practices.</span>
<span class="comment-copy">@ideasman42: My point isn't that <code>b''.join(…)</code> is going to be the fastest, it's that you shouldn't try to guess the fastest in advance; you should look at all of the reasonable options (with the same algorithmic complexity) and test them to see which really <i>is</i> fastest. Also, you really want to test with <code>timeit</code>, not a loop over <code>time.time</code>; read the docs on the module for why.</span>
