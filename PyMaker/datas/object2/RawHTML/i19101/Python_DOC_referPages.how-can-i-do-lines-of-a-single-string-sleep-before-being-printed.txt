<div class="post-text" itemprop="text">
<p>I'm developing a interactive fiction game and up to now I do lines sleep just like this:</p>
<pre><code>def pn(n): print(n); time.sleep(2)  #print narrative


n1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer"
n2 = "quis purus eu lorem lobortis aliquam. Nunc imperdiet orci ac"
n3 = "justo lacinia fringilla."


pn(n1); pn(n2); pn(n3)
</code></pre>
<p>I would like to make a single string like:</p>
<pre><code>nX = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
quis purus eu lorem lobortis aliquam. Nunc imperdiet orci ac
justo lacinia fringilla."""
</code></pre>
<p>And sleep two seconds each line, is there a way to do that? I've searched over Python 3.3 documentation and couldn't find anything helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd need to split the text into lines to print. If you already have newlines in the text, split with <a href="http://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow"><code>str.splitlines()</code></a>:</p>
<pre><code>for line in nX.splitlines():
    pn(line)
</code></pre>
<p><code>.splitlines()</code> splits text on line separators, which can vary depending on platform.</p>
<p>Otherwise you'll need to find the points where to split the text into sentences. Using a regular expression would give you the most bang for the buck:</p>
<pre><code>import re

sentence_end = re.compile(r'(?&lt;=[.?!])\s+')

for sentence in sentence_end.split(nX):
   pn(sentence)
</code></pre>
<p>This uses a look-behind assertion to make sure that the text is split on whitespace that is preceded by end-of-sentence punctuation (<code>.</code>, <code>?</code> or <code>!</code>).</p>
<p>Splitting on sentences otherwise ignores newlines:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; sentence_end = re.compile(r'(?&lt;=[.?!])\s+')
&gt;&gt;&gt; sentence_end.split(nX)
['Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Integer\nquis purus eu lorem lobortis aliquam.', 'Nunc imperdiet orci ac\njusto lacinia fringilla.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just turn your string into many strings, iterate over them and add some delay in each iteration.</p>
<pre><code>&gt;&gt;&gt; nX = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
... quis purus eu lorem lobortis aliquam. Nunc imperdiet orci ac
... justo lacinia fringilla."""
</code></pre>
<pre><code>&gt;&gt;&gt; nX.splitlines()
</code></pre>
<pre><code>['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer', 'quis purus eu lorem lobortis aliquam. Nunc imperdiet orci ac', 'justo lacinia fringilla.']
</code></pre>
<pre><code>&gt;&gt;&gt; for line in nX.splitlines():
...     print(line)
...     time.sleep(2)
... 
</code></pre>
<pre>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
<i>pause</i>
quis purus eu lorem lobortis aliquam. Nunc imperdiet orci ac
<i>pause</i>
justo lacinia fringilla.
<i>pause</i>
</pre>
</div>
<span class="comment-copy">What do you mean by lines in your last example? Split it into sentences you mean? Or do you have embedded newlines in the string (after <code>Integer</code> and <code>ac</code>)?</span>
<span class="comment-copy">Personally, I'd find it really frustrating to play an IF game which sleeps for two seconds between printing each line. If you're looking to do an Infocom-esque game, take a look at <a href="http://en.wikipedia.org/wiki/Inform" rel="nofollow noreferrer">Inform</a> - it's much simpler than writing all this from scratch.</span>
<span class="comment-copy">@Aya Thanks for the suggestion, I'll take a look.</span>
<span class="comment-copy">Perfect answer using my own defined function, it will be accepted.</span>
<span class="comment-copy">Worked like a charm.</span>
