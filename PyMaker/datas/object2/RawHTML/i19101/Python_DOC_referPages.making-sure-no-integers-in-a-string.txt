<div class="post-text" itemprop="text">
<p>I have a simple question. I'm just wanting to know how I would have my program read the "input()" and see if there are integers or any kind of number in the string, and if so then print out a message saying so. Pretty much I just want to know how I would make sure that no one enters in a number for their name. Thanks!</p>
<pre><code>yn = None
while yn != "y":
    print("What is your name?")
    name = input()
    print("Oh, so your name is {0}? Cool!".format(name))
    print("Now how old are you?")
    age = input()
    print("So your name is {0} and you're {1} years old?".format(name, age))
    print("y/n?")
    yn = input()
    if yn == "y":
        break
    if yn == "n":
        print("Then here, try again!")
print("Cool!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>str.isdigit()</code> method</a> on strings, together with the <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code> function</a>:</p>
<pre><code>if any(c.isdigit() for c in name):
    # there is a digit in the name
</code></pre>
<p><code>.isdigit()</code> returns <code>True</code> for any string that consists only of digits. This includes any Unicode character that is marked as a numeric digit or numeric decimal.</p>
<p><code>any()</code> loops over the sequence you pass in and returns <code>True</code> as soon as it finds the first element that is <code>True</code>, and <code>False</code> if all elements are <code>False</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; any(c.isdigit() for c in 'Martijn Pieters')
False
&gt;&gt;&gt; any(c.isdigit() for c in 'The answer is 42')
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>see if there are integers or any kind of number in the string</em></p>
<pre><code>any(c.isdigit() for c in name)
</code></pre>
<p>returns <code>True</code> for strings such as "123", "123.45", "abc123".</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on the strings, regular expressions might actually be faster:</p>
<pre><code>import re

s1 = "This is me"
s2 = "this is me 2"
s3 = "3 this is me"

regex = re.compile(r'\d')
import timeit
def has_int_any(s):
    return any(x.isdigit() for x in s)

def has_int_regex(s,regex=re.compile(r'\d')):
    return regex.search(s)

print bool(has_int_any(s1)) == bool(has_int_regex(s1))
print bool(has_int_any(s2)) == bool(has_int_regex(s2))
print bool(has_int_any(s3)) == bool(has_int_regex(s3))


for x in ('s1','s2','s3'):
    print x,"any",timeit.timeit('has_int_any(%s)'%x,'from __main__ import has_int_any,%s'%x)
    print x,"regex",timeit.timeit('has_int_regex(%s)'%x,'from __main__ import has_int_regex,%s'%x)
</code></pre>
<p>My results are:</p>
<pre><code>True
True
True
s1 any 1.98735809326
s1 regex 0.603290081024
s2 any 2.30554199219
s2 regex 0.774269104004
s3 any 0.958808898926
s3 regex 0.656207084656
</code></pre>
<p>(Note that the regular expression engine wins even in the case specifically designed for <code>any</code> to be fastest).  however, with longer strings, I'm willing to bet that <code>any</code> will eventually be faster.</p>
</div>
<span class="comment-copy">Wouldn't I have to incorporate that along with a while statement? Such as "while name != True", etc?</span>
<span class="comment-copy">@Xiam: No, you don't have to use a <code>while</code> statement. The <code>for .. in ..</code> statement inside of the <code>any()</code> function is called a generator expression, and stands on it's own.</span>
<span class="comment-copy">Well I would like to add in a loop that makes it so the person can't continue through the program without entering in a valid name (I probably should of explained that). And that <b>would</b> include having a <code>while</code> loop, yes?</span>
<span class="comment-copy">@Xiam: Sure, then you can use a <code>while</code> statement too. :-)</span>
<span class="comment-copy">Thank you very much!</span>
