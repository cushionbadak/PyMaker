<div class="post-text" itemprop="text">
<p>I'm attempting to combine a few PDF files into a single PDF file using Python. I've tried both PyPDF and PyPDF2 - on some files, they both throw this same error:</p>
<p>PdfReadError: EOF marker not found</p>
<p>Here's my code (page_files) is a list of PDF file paths to combine:</p>
<pre><code># use pypdf to combine pdf pages
output = PdfFileWriter()
for pf in page_files:
    filestream = file(pf, "rb")
    pdf = PdfFileReader(filestream)            
    for num in range(pdf.getNumPages()):
        output.addPage(pdf.getPage(num))            

# write final file
outputStream = file(pdf_full_path, "wb")
output.write(outputStream)
outputStream.close()
</code></pre>
<p>I've read a few StackOverflow threads on the topic, but none contain a solution that works. If you've successfully combined PDF files using Python, I'd love to hear how. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Is there is still someone looking for merging a "list" of pdfs: </p>
<p>Note:
Using glob to get the correct filelist. &lt;- this will really safe your day ^^ </p>
<p>Check this out: <a href="https://docs.python.org/3/library/glob.html#module-glob" rel="nofollow noreferrer">glob module reference</a></p>
<pre><code>from PyPDF2 import PdfFileMerger, PdfFileReader, PdfFileWriter
import os
import glob

class MergeAllPDF:
    def __init__(self):
        self.mergelist = []

    def create(self, filepath, outpath, outfilename):
        self.outfilname = outfilename
        self.filepath = filepath
        self.outpath = outpath
        self.pdfs = glob.glob(self.filepath)
        self.myrange = len(self.pdfs)

        for _ in range(self.myrange):
            if self.pdfs:
                self.mergelist.append(self.pdfs.pop(0))
        self.merge()

    def merge(self):
        if self.mergelist:
            self.merger = PdfFileMerger()
            for pdf in self.mergelist:
                self.merger.append(open(pdf, 'rb'))  
            self.merger.write(self.outpath + "%s.pdf" % (self.outfilname))
            self.merger.close()
            self.mergelist = []
        else:
            print("mergelist is empty please check your input path")

# example how to use
#update your path here:


inpath = r"C:\Users\Fabian\Desktop\mergeallpdfs\scan\*.pdf" #here are your single page pdfs stored
outpath = r"C:\Users\Fabian\Desktop\mergeallpdfs\output\\" #here your merged pdf will be stored

b = MergeAllPDF()
b.create(inpath, outpath, "mergedpdf")
</code></pre>
</div>
<span class="comment-copy">Do you have a stack trace telling which line of code is causing the <code>PdfReadError</code> to be raised? Also, are you sure the PDF files you're trying to combine are properly formatted? Can Adobe/Acrobat Reader read them OK?</span>
<span class="comment-copy">@martineau Good thinking - the PDF files were being generated by Docraptor, which in turn uses PrinceXML, which was throwing an htmlEntities error, causing the unexpected EOF in PyPDF for those documents.</span>
<span class="comment-copy">That's good news sort of I guess. Sounds like it might be a good idea to strengthen the error handling in your script to handle bad input files as gracefully as possible.</span>
<span class="comment-copy">Slightly unrelated comment - posting here because it's an early link on search engines: One gets the same error if one forgets to open the reading file stream in binary mode. So if you get the error and are a new user to PyPDF, ensure you're opening the input file with <code>'rb'</code> for "read binary".</span>
<span class="comment-copy">Thanks cfi, that helped me find a paren in the wrong place!</span>
