<div class="post-text" itemprop="text">
<p>If i have a list of numbers <code>[4,2,5,1,3]</code>
I want to sort it first by some function <code>f</code> and then for numbers with the same value of <code>f</code> i want it to be sorted by the magnitude of the number.</p>
<p>This code does not seem to be working.</p>
<pre><code>list5 = sorted(list5)
list5 = sorted(list5, key = lambda vertex: degree(vertex)) 
</code></pre>
<p>Secondary sorting first: list5 is sorted based on magnitude.
Primary sorting next: list5 is sorted based on some function of the numbers.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Sort it by a (firstkey, secondkey) tuple:</p>
<pre><code>sorted(list5, key=lambda vertex: (degree(vertex), vertex))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the Python 3 docs on <a href="https://docs.python.org/3/howto/sorting.html#sortinghowto" rel="nofollow">sorting</a></p>
<pre><code>from operator import itemgetter, attrgetter
student_objects = [
    Student('john', 'A', 15),
    Student('jane', 'B', 12),
    Student('dave', 'B', 10),
]
student_tuples = [
    ('john', 'A', 15),
    ('jane', 'B', 12),
    ('dave', 'B', 10),
]

#The operator module functions allow multiple levels of sorting. For example, to sort by grade then by age:

sorted(student_tuples, key=itemgetter(1,2))
sorted(student_objects, key=attrgetter('grade', 'age'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On a phone, but youcan sort by tuple.</p>
<pre><code>sorted(list5, lambda x: (degree(x),x))
</code></pre>
<p>Don't forget the reverse flag if you need it.</p>
</div>
<span class="comment-copy">btw you can just do <code>key=degree</code>, here the <code>lambda</code> is redundant</span>
<span class="comment-copy">When you say it "does not seem to be working", what do you observe?</span>
<span class="comment-copy">To do ascending on one and descending on the other, two calls: list5.sort(key=lambda vertex: vertext, reverse=True) list5.sort(key=lambda vertex: degree(vertext))</span>
<span class="comment-copy">I see why this is a very readable solution, is a very efficient solution also exists? Without coding it yourself, i.e. not computing the second value when unnecessary.</span>
