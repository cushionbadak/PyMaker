<div class="post-text" itemprop="text">
<p>If I run the code:</p>
<pre><code>connection = manager.connect("I2Cx")
</code></pre>
<p>The program crashes and reports a KeyError because I2Cx doesn't exist (it should be I2C).</p>
<p>But if I do:</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except Exception, e:
    print e
</code></pre>
<p>It doesn't print anything for e. I would like to be able to print the exception that was thrown. If I try the same thing with a divide by zero operation it is caught and reported properly in both cases. What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's raising a KeyError with no message, then it won't print anything. If you do...</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except Exception as e:
    print repr(e)
</code></pre>
<p>...you'll at least get the exception class name.</p>
<p>A better alternative is to use multiple <code>except</code> blocks, and only 'catch' the exceptions you intend to handle...</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except KeyError as e:
    print 'I got a KeyError - reason "%s"' % str(e)
except IndexError as e:
    print 'I got an IndexError - reason "%s"' % str(e)
</code></pre>
<p>There are valid reasons to catch all exceptions, but you should almost always re-raise them if you do...</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except KeyError as e:
    print 'I got a KeyError - reason "%s"' % str(e)
except:
    print 'I got another exception, but I should re-raise'
    raise
</code></pre>
<p>...because you probably don't want to handle <code>KeyboardInterrupt</code> if the user presses CTRL-C, nor <code>SystemExit</code> if the <code>try</code>-block calls <code>sys.exit()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am using Python 3.6 and using a comma between Exception and e does not work. I need to use the following syntax (just for anyone wondering)</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except KeyError as e:
    print(e.message)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should consult the documentation of whatever library is throwing the exception, to see how to get an error message out of its exceptions.</p>
<p>Alternatively, a good way to debug this kind of thing is to say:</p>
<pre><code>except Exception, e:
    print dir(e)
</code></pre>
<p>to see what properties <code>e</code> has - you'll probably find it has a <code>message</code> property or similar.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also try to use <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>get()</code></a>, for example:</p>
<pre><code>connection = manager.connect.get("I2Cx")
</code></pre>
<p>which won't raise a <code>KeyError</code> in case the key doesn't exist.</p>
<p>You may also use second argument to specify the default value, if the key is not present.</p>
</div>
<div class="post-text" itemprop="text">
<p>I dont think python has a catch :)</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except Exception, e:
    print e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to handle error just <code>NoneType</code> and use <code>get()</code>
e.g.:</p>
<pre><code>manager.connect.get("")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try print(e.message) this should be able to print your exception.</p>
<pre><code>try:
    connection = manager.connect("I2Cx")
except Exception, e:
    print(e.message)
</code></pre>
</div>
<span class="comment-copy">Side note: Unless you need pre-2.5 compatibility, you should write <code>except Exception as e:</code> instead of <code>except Exception, e:</code>.</span>
<span class="comment-copy">I think his problem was more the <code>catch</code> part than the actual printing ... but yeah this solves that problem also</span>
<span class="comment-copy">@JoranBeasley The <code>catch</code> is more likely a typo, since the OP would've gotten a different error had that been in the real code.</span>
<span class="comment-copy">+1. But <code>KeyboardInterrupt</code> and <code>SystemExit</code> aren't subclasses of <code>Exception</code>, so your last sentence is misleading.</span>
<span class="comment-copy">@abarnert Actually it's the "catch all exceptions" which is misleading, so I've changed <code>except Exception, e:</code>, to <code>except:</code>. Looks like you have to consult <code>sys.exc_info()</code> to get the exception in a bare <code>except:</code> clause, so it's probably simpler to omit it.</span>
<span class="comment-copy">Here's <a href="http://hg.python.org/cpython/file/2.7/Lib/asyncore.py#l84" rel="nofollow noreferrer">one example</a> in the stdlib. I tend to use it most often when third-party library foo-0.88 raised a <code>ValueError</code>, but 0.89 raises a <code>TypeError</code> or a <code>foo.FooError</code>. (The alternatives are two copy-pasted <code>except</code> blocks, or an <code>except Exception as e:</code> with <code>if isinstance(e, (ValueError, TypeError)): raise</code>, or requiring foo-0.89 or later for no good reasonâ€¦)</span>
