<div class="post-text" itemprop="text">
<p>I want to take an arbitrary number of paths that represent nested tar archives, and perform an operation on the innermost archive. The trouble is, the nesting can be arbitrary, so the number of context managers I need is also arbitrary.</p>
<p>Take, for example:</p>
<pre><code>ARCHIVE_PATH = "path/to/archive.tar"

INNER_PATHS = (
    "nested/within/archive/one.tar",
    "nested/within/archive/two.tar",
    # Arbitary number of these
)

def list_inner_contents(archive_path, inner_paths):
    with TarFile(archive_path) as tf1:
        with TarFile(fileobj=tf1.extractfile(inner_paths[0])) as tf2:
            with TarFile(fileobj=tf2.extractfile(inner_paths[1])) as tf3:
                # ...arbitary level of these!
                return tfX.getnames()

contents = list_inner_contents(ARCHIVE_PATH, INNER_PATHS))
</code></pre>
<p>I can't use the <code>with</code> statement's <a href="http://docs.python.org/2.7/reference/compound_stmts.html#with" rel="noreferrer">nesting syntax</a> because there could be any number of levels to nest. I can't use <a href="http://docs.python.org/2.7/library/contextlib.html#contextlib.nested" rel="noreferrer"><code>contextlib.nested</code></a> because the docs say right there:</p>
<blockquote>
<p>...using <code>nested()</code> to open two files is a programming error as the first file will not be closed promptly if an exception is thrown when opening the second file.</p>
</blockquote>
<p>Is there a way to use language constructs to do this, or do I need to manually manage my own stack of open file objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>For this case you may use recursion. It feels to be most natural for the case (of course if there's no special treatment in Python yet):</p>
<pre><code>ARCHIVE_PATH = "path/to/archive.tar"

INNER_PATHS = [
    "nested/within/archive/one.tar",
    "nested/within/archive/two.tar",
    # Arbitary number of these
]

def list_inner_contents(archive_path, inner_paths):
    def rec(tf, rest_paths):
        if not rest_paths:
            return tf.getnames()

        with TarFile(fileobj=tf.extractfile(rest_paths[0])) as tf2:
            return rec(tf2, rest_paths[1:])

    with TarFile(archive_path) as tf:
        try:
            return rec(tf, inner_paths)
        except RuntimeError:
            # We come here in case the inner_paths list is too long
            # and we go too deeply in the recursion
            return None
</code></pre>
</div>
<span class="comment-copy">In 3.3, you could use <a href="http://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a>.</span>
<span class="comment-copy">@delnan - I have <b>one</b> dependency that's keeping me from using Python 3 :/</span>
<span class="comment-copy">@delnan Nice! I didn't know that this was added in python3.3. Seems a really clean solution.</span>
<span class="comment-copy">@delnan, great hint! Otherwise, check out my older question: <a href="http://stackoverflow.com/questions/9148965/nest-an-iterator-of-python-context-managers-in-with" title="nest an iterator of python context managers in with">stackoverflow.com/questions/9148965/â€¦</a></span>
<span class="comment-copy">This seems the only simple solution. One could write a custom context manager that manually calls the <code>__enter__</code> and <code>__exit__</code> methods, but then it becomes really hard to deal with the exceptions to make it behave how it is expected.</span>
