<div class="post-text" itemprop="text">
<p>Consider the following Python 3 code:</p>
<pre><code>a = [-1,-1,-1]
i = 0
</code></pre>
<p>And now consider the following two versions of a simultaneous assignment over both a and i:</p>
<p>Assignment version 1:</p>
<pre><code>a[i],i = i,i+1
</code></pre>
<p>Assignment version 2:</p>
<pre><code>i,a[i] = i+1,i
</code></pre>
<p>I would expect these two versions of simultaneous assignments to be semantically equivalent. However, if you check the values of a and i after each one of the simultaneous assignments, you get different states:</p>
<p>Output for <code>print(a,i)</code> after assignment version 1:</p>
<pre><code>[0, -1, -1] 1
</code></pre>
<p>Output for <code>print(a,i)</code> after assignment version 2:</p>
<pre><code>[-1, 0, -1] 1
</code></pre>
<p>I am not an expert on Python's semantics, but this behaviour seems weird. I would expect both assignments to behave as assignment version 1. Moreover, if you check the following link, one would expect both assignment versions to lead to the same state:</p>
<p><a href="http://books.google.com/books?id=aJQILlLxRmAC&amp;pg=PA36&amp;lpg=PA36&amp;dq=python%20simultaneous%20assignment&amp;source=bl&amp;ots=Cz9MCJYb1J&amp;sig=vG_ZhffOwiOJgejxK8uih-SlmDk&amp;hl=en&amp;sa=X&amp;ei=f1WIUcXVFfa44AOB04HwAQ&amp;ved=0CDIQ6AEwAA#v=onepage&amp;q=python%20simultaneous%20assignment&amp;f=false" rel="noreferrer">Link to book excerpt in Google Books</a></p>
<p>Is there something I am missing regarding Python semantics for simultaneous assignments? </p>
<p><em>Note</em>: This weird behaviour does not seem to be reproducible, for instance, when the variable <code>a</code> has integer type; it seems to require <code>a</code> to be of type list (maybe this is the case for any mutable type?).</p>
</div>
<div class="post-text" itemprop="text">
<p>In this case:</p>
<pre><code>i, a[i] = i + 1, i
</code></pre>
<p>The righthand side evaluates to a tuple (1, 0). This tuple is then unpacked to <code>i</code> and then <code>a[i]</code>. <code>a[i]</code> is evaluated <em>during</em> the unpacking, not before, so corresponds to <code>a[1]</code>.</p>
<p>Since the righthand side is evaluated before any unpacking takes place, referring to <code>a[i]</code> on the righthand side would always be <code>a[0]</code> regardless of the final value of <code>i</code></p>
<p>Here is another useless fun example for you to work out</p>
<pre><code>&gt;&gt;&gt; a = [0,0,0,0]
&gt;&gt;&gt; i, a[i], i, a[i] = range(4)
&gt;&gt;&gt; a
[1, 0, 3, 0]
</code></pre>
</div>
<span class="comment-copy">Thank you gnibbler, I see the technical point you raise about the evaluation to tuples; from that point of view all makes perfect sense. However, I am still at a loss from a semantics viewpoint since then the <i>simultaneous</i> assignment semantics is then not very simultaneous. Since I am new to Python, I would take my chances and ask if there is an official document with a formal/semi-formal definition of the assignment semantics for Python. Are you aware of any such a document?</span>
<span class="comment-copy">@hquilo: "simultaneous assignment" doesn't even appear in the Python documentation. <code>a, b = 1, 2</code> is just shorthand for <code>(a, b) = (1, 2)</code>, which is called sequence unpacking.</span>
<span class="comment-copy">Thank you both @gnibler and @Blender; your answers make things clear.</span>
<span class="comment-copy">Just to add a reference to the documentation (<a href="https://docs.python.org/3/reference/simple_stmts.html" rel="nofollow noreferrer">docs.python.org/3/reference/simple_stmts.html</a>): "Although the definition of assignment implies that overlaps between the left-hand side and the right-hand side are ‘simultaneous’ (for example <code>a, b = b, a</code> swaps two variables), overlaps <i>within</i> the collection of assigned-to variables occur left-to-right, sometimes resulting in confusion."</span>
