<div class="post-text" itemprop="text">
<p>Please consider the below algorithm:    </p>
<pre><code>  for(j1 = n upto 0)
     for(j2 = n-j1 upto 0)
       for(j3 = n-j1-j2 upto 0)
        .
         .
           for (jmax = n -j1 - j2 - j_(max-1))
            {
             count++;
             product.append(j1 * j2 ... jmax); // just an example
            }
</code></pre>
<p>As you can see, some relevant points about the algo snippet above:   </p>
<ol>
<li>I have listed an algorithm with a variable number of for loops.    </li>
<li>The result that i calculate at each innermost loop is appended to a list. This list will grow to dimension of 'count'.        </li>
</ol>
<p>Is this problem a suitable candidate for recursion? If yes, i am really not sure how to break the problem up. I am trying to code this up in python, and i do not expect any code from you guys. Just some pointers or examples in the right direction. Thank you.    </p>
<p>Here is an initial try for a sample case <a href="http://pastebin.com/PiLNTWED" rel="nofollow">http://pastebin.com/PiLNTWED</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your algorithm is finding all the <code>m</code>-tuples (<code>m</code> being the <code>max</code> subscript of <code>j</code> from your pseudocode) of non-negative integers that add up to <code>n</code> or less. In Python, the most natural way of expressing that would be with a recursive generator:</p>
<pre><code>def gen_tuples(m, n):
    if m == 0:
        yield ()
    else:
        for x in range(n, -1, -1):
            for sub_result in gen_tuples(m-1, n-x):
                yield (x,)+sub_result
</code></pre>
<p>Example output:</p>
<pre><code>&gt;&gt;&gt; for x, y, z in gen_sums(3, 3):
    print(x, y, z)

3 0 0
2 1 0
2 0 1
2 0 0
1 2 0
1 1 1
1 1 0
1 0 2
1 0 1
1 0 0
0 3 0
0 2 1
0 2 0
0 1 2
0 1 1
0 1 0
0 0 3
0 0 2
0 0 1
0 0 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also consider using permutations, combinations or product from the <em>itertools</em> module.
If you want all the possible combinations of i, j, k, ... (i.e. nested for loops)
you can use:</p>
<pre><code>for p in product(range(n), repeat=depth):
    j1, j2, j3, ... = p # the same as nested for loops
    # do stuff here
</code></pre>
<p>But beware, the number of iterations in the loop grows exponentially!</p>
</div>
<div class="post-text" itemprop="text">
<p>the toy example will translate into a kind of tail recursion so, personally, i wouldn't expect  a recursive version to be more insightful for code review and maintenance.</p>
<p>however, to get acquainted to the principle, attempt to factor out the invariant parts / common terms from the individual loop and try to identify a pattern (and best prove it afterwards!). you should be able to fix a signature of the recursive procedure to be written. flesh it out with the parts inherent to the loop body/ies (and don't forget the termination condition).</p>
</div>
<div class="post-text" itemprop="text">
<p>Typically, if you want to transform <code>for</code> loops into recursive calls, you will need to replace the <code>for</code> statements with <code>if</code> statements. For nested loops, you will transform these into function calls.</p>
<p>For practice, start with a dumb translation of the code that works and then attempt to see where you can optimize later.</p>
<p>To give you an idea to try to apply to your situation, I would translate something like this:</p>
<pre><code>results = []
for i in range(n):
    results.append(do_stuff(i, n))
</code></pre>
<p>to something like this:</p>
<pre><code>results = []

def loop(n, results, i=0):
    if i &gt;= n:
        return results
    results.append(do_stuff(i, n))
    i += 1
    loop(n, results, i)
</code></pre>
<p>there are different ways to handle returning the results list, but you can adapt to your needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>-- As a response to the excellent listing by Blckgnht -- Consider here the case of n = 2 and max = 3    </p>
<pre><code>def simpletest():    

    '''
    I am going to just test the algo listing with assumption
    degree n = 2
    max = dim(m_p(n-1)) = 3, 
    so j1 j2 and upto j3 are required for every entry into m_p(degree2)
    Lets just print j1,j2,j3 to verify if the function
    works in other general version where the number of for loops is not known
    '''
    n = 2
    count = 0
    for j1 in range(n, -1, -1):
        for j2 in range(n -j1, -1, -1):
            j3 = (n-(j1+j2)) 
            count = count + 1
            print 'To calculate m_p(%d)[%d], j1,j2,j3 = ' %(n,count), j1, j2, j3

    assert(count==6)        # just a checkpoint. See P.169 for a proof
    print 'No. of entries =', count    
</code></pre>
<p>The output of this code (and it is correct).   </p>
<pre><code>    In [54]: %run _myCode/Python/invariant_hack.py
To calculate m_p(2)[1], j1,j2,j3 =  2 0 0
To calculate m_p(2)[2], j1,j2,j3 =  1 1 0
To calculate m_p(2)[3], j1,j2,j3 =  1 0 1
To calculate m_p(2)[4], j1,j2,j3 =  0 2 0
To calculate m_p(2)[5], j1,j2,j3 =  0 1 1
To calculate m_p(2)[6], j1,j2,j3 =  0 0 2
No. of entries = 6
</code></pre>
</div>
<span class="comment-copy">It seems like having a function that does one loop and then calls itself to do the the inner loops would be the most straightforward.</span>
<span class="comment-copy"><a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a></span>
<span class="comment-copy">thanks for the example, although i need something different. To see the contrast and be more explicative, An output of my code and output as an answer below.</span>
<span class="comment-copy">@MhAcKNI: Oh, you want the tuples to add up to exactly <code>n</code>, rather than <code>n</code> or less. That was actually what I implemented first, before editing to match the loop you have in your question. To get what you want, modify the base case of my code to be <code>if m == 1: yield (n,)</code></span>
<span class="comment-copy">the number of iterations wont be a constraint. i m trying to solve this. will post updates soon.</span>
<span class="comment-copy">Here is a simple case when i know the depth <a href="http://pastebin.com/PiLNTWED" rel="nofollow noreferrer">simple example code</a>. Now i m not sure how i could translate that into itertools when i dont know the depth.</span>
<span class="comment-copy">The thing is that i do not know 'n'. Second, the loop variable for ith loop depends upon the previous (i-1)th loop and so on.</span>
