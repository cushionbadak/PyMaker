<div class="post-text" itemprop="text">
<p>I have a string representation of binary integers and I need bytes having the exact bit structure, to send over the sockets.</p>
<p>For e.g. if I have a string of length 16 : <code>0000111100001010</code> then I need 2 bytes of same bit structure. In this case, the first byte should have an int value of <code>15</code> and the second one as <code>10</code>. It doesn't matter if they can be printed in <code>ascii</code> format or not. How do I get it ?</p>
<p>I tried the following method which creates bytes in the form of <code>0xf0xa</code>. But this is of size 6 bytes instead of 2.</p>
<pre><code>def getByte(s):
  if(len(s) != 8):
    return
  b = b'0'
  for c in s:
    b = (int(b) | int(c)) &amp; 0x0000ff #This makes b an integer
    b = b &lt;&lt; 1
  b = b &gt;&gt; 1 #because of 1 extra shift
  b = hex(b).encode('utf-8') #how else can I get back to byte from int?

  return(b) 
</code></pre>
<p>This method takes a string of length 8 and intends to give a byte of the same internal bit structure, but fails. (I need something similar to <code>strtol</code> in <code>C</code>.)</p>
<p>Any help, please ?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, if you have the bit string as a literal value, just make it a base-2 int literal, instead of a string literal:</p>
<pre><code>value = 0b0000111100001010
</code></pre>
<hr/>
<p>If you have non-literal bit strings, and all you need to do is parse them into integers, then, as martineau says in a comment, the built-in <a href="http://docs.python.org/3/library/functions.html#int" rel="noreferrer"><code>int</code></a> constructor is all you need, as martineau says, because it takes a <code>base</code> as an optional second argument:</p>
<pre><code>value = int('0000111100001010', 2)
</code></pre>
<hr/>
<p>If you need to do anything fancy with bit strings, you'll probably want to use a third-party module like <a href="https://pypi.python.org/pypi/bitarray/" rel="noreferrer"><code>bitarray</code></a> or <a href="https://pypi.python.org/pypi/bitstring/" rel="noreferrer"><code>bitstring</code></a>, which let you create objects that can be treated as strings of 1s and 0s, sequences of booleans, integers, etc.:</p>
<pre><code>value = bitstring.BitArray(bin='0000111100001010')
</code></pre>
<hr/>
<p>Once you have an integer, you can pack it into 2 bytes with <a href="http://docs.python.org/3/library/struct.html" rel="noreferrer"><code>struct</code></a>, as martineau also explained in a comment:</p>
<pre><code>my_bytes = struct.pack('!H', value)
</code></pre>
<p>The <code>!</code> means "network-endian". If you want little-endian or native-endian (or big-endian, which is of course the same as network-endian, but might be a more meaningful way to describe some contexts), see <a href="http://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="noreferrer">Byte Order, Size, and Alignment</a>. The <code>H</code> means to pack it as an C <code>unsigned short</code>â€”that is, two bytes.</p>
<hr/>
<p>But if you're using a third-party module, it probably has something simpler. For example, if you have a <code>bitstring.BitArray</code> from the previous example:</p>
<pre><code>my_bytes = value.tobytes()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to convert binary string data like the one you have is to use the built-in <code>int()</code> function and tell it the number is in base 2 binary instead of the default base 10 decimal format:</p>
<pre><code>int('0000111100001010', 2)
</code></pre>
<p>This will return a an integer value. To convert that into a string of bytes you can use the <code>pack()</code> function in the <code>struct</code> mode and tell it the data argument it a <code>short</code> (2-byte) unsigned integer by using a format string of <code>'H'</code>:</p>
<pre><code>struct.pack('!H', int('0000111100001010', 2))
</code></pre>
<p>Since you want to send this over a network socket, I also added a <code>'!'</code> prefix, which indicates that the bytes returned should be in "network" or big-endian byte-order rather than the native format of your computer (which might be different).</p>
<p>Note the string returned for the example will be <code>'\x0f\n'</code>. The <code>'\n'</code> at the end is because the byte value <code>0x0a</code> happens to be an ASCII newline character so Python represents them that way when it displays the <code>repr()</code> of a string that contains one (which is what the Python interactive console does after every expression automatically).</p>
</div>
<span class="comment-copy"><code>int('0000111100001010', 2)</code>. You can verify the value returned with <code>hex(int('0000111100001010', 2))</code>.</span>
<span class="comment-copy">I need bytes. Not int.</span>
<span class="comment-copy"><code>struct.pack('!H', int('0000111100001010', 2))</code></span>
<span class="comment-copy">That gives <code>b'\n\x0f'</code>. Somehow the lower byte is missing!</span>
<span class="comment-copy"><code>'\n'</code> <i>is</i> <code>0x0a</code>. Regardless what you really want is <code>'\x0f\n'</code> which is big-endian or network byte order (as in my updated <code>struct.pack</code> comment above).</span>
<span class="comment-copy">Thanks for the explanation. I had used other libraries as bitstring. But at present 3rd party libraries can't be used for some reason.</span>
<span class="comment-copy">@gaganbm: What do you mean "at present 3rd party libraries can't be used for some reason"? Do you get an error from <code>pip</code> when you try to install them, an error from <code>python</code> when you try to <code>import</code> them, an error from your boss/professor/whatever when you mention them in a meeting? If so, please post the full traceback from your boss so we can debug him. :)</span>
<span class="comment-copy">@abarnet Oh, I meant to say I do not have the rights to install stuff in the systems I am using. More of an administrative pain :)</span>
<span class="comment-copy">@gaganbm: You might want to consider using <a href="http://www.python.org/dev/peps/pep-0370/" rel="nofollow noreferrer">user site-packages</a> and/or <a href="http://docs.python.org/3/library/venv.html" rel="nofollow noreferrer"><code>venv</code></a>/<a href="http://www.virtualenv.org/" rel="nofollow noreferrer"><code>virtualenv</code></a> and/or some kind of <code>cx_freeze</code>/<code>py2exe</code>/<code>py2app</code>-style packaged distribution to get around that problem. (In fact, in many scenarios, that's a good idea even if you <i>do</i> have root/admin rights on all of the target machines.)</span>
<span class="comment-copy">@abarnert: You don't need to install bitstring at all - it's all in one .py file so an alternative is to just download it and store it in the same directory to your main program.</span>
