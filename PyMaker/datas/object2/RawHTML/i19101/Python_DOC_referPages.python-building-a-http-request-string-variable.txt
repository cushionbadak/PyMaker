<div class="post-text" itemprop="text">
<p>I am trying to build the HTTP request string in the variable "full_req".  Here is how a HTTP request looks:</p>
<pre><code>GET /images/logo/ HTTP/1.1
Host: www.google.com
Connection: close
</code></pre>
<p>I already wrote python code so if I enter a url, "<a href="http://www.google.com/images/logo/googlelogo.png" rel="nofollow">http://www.google.com/images/logo/googlelogo.png</a>", it will split the url into 3 parts.  Below are the variables that I used:</p>
<ul>
<li><code>host</code> (contains <code>www.google.com</code>)</li>
<li><code>path</code> (contains <code>/images/logo/</code>)</li>
<li><code>file</code> (contains <code>googlelogo.png</code>)</li>
<li><code>port</code> (Its showing <code>None</code> but I think its suppose to say <code>80</code>)</li>
</ul>
<p>How do I assign HTTP request string to <strong>full_req</strong> variable so if I print this variable, it contains all three lines?</p>
<pre><code>print(full_req)
</code></pre>
<p>tried string concatenation but it didn't work.  I used this resource: <a href="http://www.skymind.com/~ocrow/python_string/" rel="nofollow">http://www.skymind.com/~ocrow/python_string/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use string formatting:</p>
<pre><code>request = 'GET {path} HTTP 1.1\r\nHost: {host}\r\nConnection: Close\r\n\r\n'.format(path=path, host=host)
</code></pre>
<p>This uses the modern <a href="http://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a>, but you could use <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow">classic string operations</a> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>. . String format or simple concatenation should do it.</p>
<p>. . There are many options and it depends on versions. In Python2 it is common to use <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow"><code>%</code> operator syntax</a>, but in Python3 you mainly use the <a href="http://docs.python.org/2/library/string.html#string.Formatter.format" rel="nofollow"><code>.format</code> method on string objects</a>.</p>
<p>. . You can still use the simplest form of concatenation with the <code>+</code> operator, with something like this:</p>
<pre><code>full_req = 'GET ' + path + ' HTTP/1.1\r\n' \
           'HOST: ' + host + '\r\n' + \
           'Connection: close'
</code></pre>
<p>. . Note that it won't request the file (as per your example you are requesting the parent folder, not the file itself) and if you plan to download the file rather than just experiment with HTTP protocol, there are built-in modules to do that (check <a href="http://docs.python.org/2/library/urllib.html#urllib.urlretrieve" rel="nofollow"><code>urllib.retrieve</code></a>).</p>
<p>. . The port number (usually 80 for HTTP) would be used when opening the connection (in a socket), but your example doesn't seem to do that part of the request as well.</p>
<p>. Amplexos.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>def request(host, path, file):
    return '''GET %s%s HTTP/1.1\r
Host: %s\r
Connection: close''' % (path, file, host)
</code></pre>
<p>As far as I am aware, the port isn't included in the actual HTTP request. The key here is the use of the <code>%</code> <a href="http://docs.python.org/release/2.5.2/lib/typesseq-strings.html" rel="nofollow">string formatting operator</a>.</p>
</div>
<span class="comment-copy">what is your goal? if'youre just trying to make a request, you should better use <a href="http://docs.python.org/2/library/urllib2" rel="nofollow noreferrer">urllib2</a>/<a href="http://docs.python.org/3/library/urllib.request.html" rel="nofollow noreferrer">urllib</a> or <a href="http://docs.python-requests.org" rel="nofollow noreferrer">requests</a>...</span>
<span class="comment-copy">Did you know Python comes with a <a href="http://docs.python.org/2/library/urlparse.html" rel="nofollow noreferrer"><code>urlparse</code> module</a>?</span>
<span class="comment-copy">Its missing HTTP 1.1 but works..  Thanks</span>
<span class="comment-copy">Note that string concatenation is more cumbersome than string formatting. Otherwise, good points.</span>
<span class="comment-copy">I am actually trying to display an image on screen.  Why do I need save a file?</span>
<span class="comment-copy">You don't have to save the file to disk; the named libraries can still help you achieve what you want.</span>
<span class="comment-copy">It is nice the clear out that your file can use the "\n"-only (linux style) line-breaks, but <a href="http://stackoverflow.com/questions/5757290/http-header-line-break-style">RFC2616 defines the "right" line break as "\r\n"</a>, so it's better to set the breaks manually.</span>
<span class="comment-copy">@DiegoNunes: Thanks for the link, I actually had no idea! I'll modify the answer.</span>
<span class="comment-copy">Its not storing the HTTP request in a variable tho</span>
<span class="comment-copy">To store the result in a variable, use <code>req = request(host, path, file)</code> after you've defined the function. Alternatively, just write <code>req = '''GET %s%s HTTP/1.1\r</code>, etc.</span>
