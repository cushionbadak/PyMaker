<div class="post-text" itemprop="text">
<p>I have a Python script that uses Beautiful Soup to extract the text from HTML files in a directory. However, I'm having trouble getting the encoding to work properly. At first I though there may be a problem with the HTML files themselves. However, when I view the source of an HTML file in Notepad.exe, I for instance see this: <code>Vi er her for deg, og du må gjerne ta kontakt med oss på 815 32 000 eller på Facebook om du har noen spørsmål.</code></p>
<p>However, when I view the same HTML file in Internet Explorer, I see this: <code>Vi er her for deg, og du mÃ¥ gjerne ta kontakt med oss pÃ¥ 815 32 000 eller pÃ¥ Facebook om du har noen spÃ¸rsmÃ¥l.</code></p>
<p>And, the Internet Explorer text is the same text that my Python script appends into my text file. So, obviously the encoding is detectable, and it's no surprise that IE doesn't understand it, but I can't seem to figure out why Python can't handle it. The encoding should be latin-1, which I thought wouldn't be a problem. Here's the code I have:</p>
<pre><code>import os
import glob
from bs4 import BeautifulSoup

path = "c:\\users\\me\\downloads\\"

for infile in glob.glob(os.path.join(path, "*.html")):
    markup = (infile)
    soup = BeautifulSoup(open(markup, "r").read())
    with open("example.txt", "a") as myfile:
        myfile.write(soup.get_text())
        myfile.close()
</code></pre>
<p>Being as that seems to break the encoding, I thought I could pass latin-1 encoding, like so:</p>
<pre><code>soup = BeautifulSoup(open(markup, "r").read())
soup = soup.prettify("latin-1")
</code></pre>
<p>But that gives me the error:</p>
<pre><code>Traceback (most recent call last):
  File "bsoup.py", line 12, in &lt;module&gt;
    myfile.write(soup.get_text())
AttributeError: 'bytes' object has no attribute 'get_text'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>.prettify()</code> already returns bytes, so you just write that directly to the file, but you have to open that file in <em>binary</em> mode (note the <code>'ab'</code> mode used below):</p>
<pre><code>soup = BeautifulSoup(open(markup, "r").read())
with open("example.txt", "ab") as myfile:
    myfile.write(soup.prettify('latin-1'))
</code></pre>
<p>There is no need to call <code>myfile.close()</code>; the <code>with</code> statement already takes care of that.</p>
<p>To save only the text, open the file in text mode (<code>'a'</code>) and specify the encoding to use on save:</p>
<pre><code>soup = BeautifulSoup(open(markup, "r").read())
with open("example.txt", "a", encoding='latin-1') as myfile:
    myfile.write(soup.get_text())
</code></pre>
<p>Now Python will automatically encode the unicode text to latin-1 for you.</p>
<p>When you see something like <code>Ã¥</code> instead of <code>å</code>, then you are interpreting UTF-8 bytes as Latin-1.</p>
<p>You may want to read up on Python and Unicode:</p>
<ul>
<li><p><a href="http://joelonsoftware.com/articles/Unicode.html" rel="nofollow">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a> by Joel Spolsky</p></li>
<li><p>The <a href="http://docs.python.org/3/howto/unicode.html" rel="nofollow">Python Unicode HOWTO</a></p></li>
<li><p><a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow">Pragmatic Unicode</a> by Ned Batchelder</p></li>
</ul>
</div>
<span class="comment-copy">Ah, with this option, though, the HTML is maintained in the output file. I thought calling get_text() was the method for getting only the text?</span>
<span class="comment-copy">@ZacBrown: Updated.</span>
<span class="comment-copy">Thanks @Martijn. I'm unsure what's wrong, but I changed my code to be exactly like your second example and my example.txt file is still displaying the incorrect characters. If it helps, I'm on Windows 7, using an American PC.</span>
<span class="comment-copy">Also, I'm using Beautiful Soup 4</span>
<span class="comment-copy">@ZacBrown: I'm using BS4 as well, and that doesn't matter here. Your issue is with other programs not using the correct encoding when <i>opening</i> the file.</span>
