<div class="post-text" itemprop="text">
<p>I see it used in sorting, but what do the individual components of this line of code actually mean?</p>
<pre><code>key=lambda x: x[1]
</code></pre>
<p>What's <code>lambda</code>, what is <code>x:</code>, why <code>[1]</code> in <code>x[1]</code> etc...</p>
<p><strong>Examples</strong></p>
<pre><code>max(gs_clf.grid_scores_, key=lambda x: x[1])

sort(mylist, key=lambda x: x[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>lambda</code> effectively creates an inline function.  For example, you can rewrite this example:</p>
<pre><code>max(gs_clf.grid_scores_, key=lambda x: x[1])
</code></pre>
<p>Using a named function:</p>
<pre><code>def element_1(x):
    return x[1]

max(gs_clf.grid_scores_, key=element_1)
</code></pre>
<p>In this case, <code>max()</code> will return the element in that array whose second element (<code>x[1]</code>) is larger than all of the other elements' second elements.  Another way of phrasing it is as the function call implies: return the max element, using <code>x[1]</code> as the <em>key</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>lambda</code> signifies an <a href="http://en.wikipedia.org/wiki/Anonymous_function#Python" rel="noreferrer"><em>anonymous function</em></a>. In this case, this function takes the single argument <code>x</code> and returns <code>x[1]</code> (i.e. the item at index 1 in <code>x</code>). </p>
<p>Now, <code>sort(mylist, key=lambda x: x[1])</code> sorts <code>mylist</code> based on the value of <code>key</code> as applied to each element of the list. Similarly, <code>max(gs_clf.grid_scores_, key=lambda x: x[1])</code> returns the maximum value of <code>gs_clf.grid_scores_</code> with respect to whatever is returned by <code>key</code> for each element. </p>
<p>I should also point out that this particular function is already included in one of the libraries: <a href="http://docs.python.org/2/library/operator.html" rel="noreferrer"><code>operator</code></a>. Specifically, <code>operator.itemgetter(1)</code> is equivalent to your <code>key</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>distances.sort(key=lambda x: x[1])
</code></pre>
<p>This is the function.
And here x is the list, in which we are adding <code>x[1]</code> i.e 2nd element of list to the sort function. So, basically we are adding every list's 2nd element (i.e x[1]) to the sort function.
I hope you understand this.</p>
</div>
<div class="post-text" itemprop="text">
<p>From a reference for Python 3.7 (<a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/sorting.html</a>), The key is a parameter of <code>list.sort()</code> and <code>sorted()</code>. The first built-in function modifies a list in place while the latter accepts and return iterable.</p>
<p>The key parameter can be defined as a function to be called on each element of list/iterable before comparison and sort, respectively. In this case, the inline function <code>lambda x: x[1]</code> is defined as a value of the key parameter. The lambda function takes input x return x[1] which is the second element of x. </p>
<p>Supposed</p>
<pre><code>mylist = [[7, 8], [1, 2, 3], [2, 5, 6]]
# list(map(lambda x: x[1], mylist)) returns [8, 2 ,5]

mylistSort = sorted(mylist, key = lambda x: x[1])
# will sort the nested list based on the result of the lambda function 
</code></pre>
<p>Can you guess what the result? mylistSort is then [[1,2,3], [2,5,6], [7,8]] from the sorted sequence of [8,2,5] which is [2,5,8]. </p>
<p>The <code>max()</code> in your example is applied to just get the max value from the outcome of the sort function. </p>
<p>I hope this post is helpful.</p>
</div>
<span class="comment-copy">Ehi! That's my answer to a different question asked about 1h ago! :D</span>
