<div class="post-text" itemprop="text">
<p>I am trying to implement an algorithm in Python to generate all Permutations of a list. But I In my for loop I wish to keep the original prefix and rest lists intact, and therefore I am trying to make a copy of those lists using newprefix and newrest, however on printing the variable rest at each iteration, I see that even the variable rest is getting modified! How can I make a shallow copy of the list in Python? Or is there another issue with my attempted logic?</p>
<pre><code>def perm(prefix, rest):
    if len(rest) == 0:
        print prefix 
    for i in range(len(rest)):
        #prints in the for loop are just for debugging
        print "rest:", rest
        print "i=", i
        newprefix = prefix
        newprefix.append(rest[i])
        newrest = rest
        newrest.pop(i)
        print "old pre : ", prefix
        print "newpre=", newprefix
        print "newrest=", newrest
        perm(newprefix, newrest)


perm([], ['a','b','c'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To make a shallow copy, you can slice the list:</p>
<pre><code>newprefix = prefix[:]
</code></pre>
<p>Or pass it into the <code>list</code> constructor:</p>
<pre><code>newprefix = list(prefix)
</code></pre>
<p>Also, I think you can simplify your code a little:</p>
<pre><code>def perm(prefix, rest):
    print prefix, rest

    for i in range(len(rest)):
        perm(prefix + [rest[i]], rest[:i] + rest[i + 1:])

perm([], ['a','b','c'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import copy

a = [somestuff]
b = copy.copy(a) # Shallow copy here.
c = copy.deepcopy(a) # Deep copy here.
</code></pre>
<p>The copy module is worth knowing about.
<a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">https://docs.python.org/3/library/copy.html</a></p>
<p>(Python 2) <a href="http://docs.python.org/2/library/copy.html" rel="nofollow noreferrer">http://docs.python.org/2/library/copy.html</a></p>
</div>
<span class="comment-copy">Unless this is for your own enrichment, you probably should use itertools.permutations().</span>
<span class="comment-copy">Your first one (slicing) is my preferred way of accomplishing this.  I just thought I'd let them know about the copy module as well.  +1</span>
<span class="comment-copy">@Blender Thanks the simplified code looks so much better!</span>
<span class="comment-copy">Just wondering - isn't the slice operation non-declarative? Isn't it best to clearly declare what you're doing? <code>copied_list = original_list[:]</code> doesn't declare that a copy is occurring, whereas <code>copied_list = copy.copy(original_list)</code> is highly declarative.</span>
<span class="comment-copy">Thanks. Copy module could be real handy!</span>
