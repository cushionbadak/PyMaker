<div class="post-text" itemprop="text">
<p>I am looking at this tutorial in twisted python.
<a href="https://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py" rel="nofollow noreferrer">https://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py</a></p>
<pre><code>def get_poetry(host, port, callback):
    """
    Download a poem from the given host and port and invoke

      callback(poem)

    when the poem is complete.
    """
    from twisted.internet import reactor
    factory = PoetryClientFactory(callback)#I am interested in checking the instances alive here
    reactor.connectTCP(host, port, factory)


def poetry_main():
addresses = parse_args()

from twisted.internet import reactor

poems = []

def got_poem(poem):
    poems.append(poem)
    if len(poems) == len(addresses):
        reactor.stop()

for address in addresses:
    host, port = address
    get_poetry(host, port, got_poem)

reactor.run()

for poem in poems:
    print poem


if __name__ == '__main__':
    poetry_main()
</code></pre>
<p>I have never really debugged python before.</p>
<p>I wanted to see which classes's instances are alive before the reactor.stop fires.</p>
<p>I was checking this <a href="https://stackoverflow.com/questions/328851/printing-all-instances-of-a-class">Printing all instances of a class</a></p>
<p>with this code</p>
<pre><code>import gc
for obj in gc.get_objects():
</code></pre>
<p>How can I selectively view the top most information and then further inherited data and so on?</p>
<p>From a twisted point of view, I want see which factory instances are currently active and how is it related to the protocols</p>
</div>
<div class="post-text" itemprop="text">
<p>But, if you really just want to poke things to get a feel for how to debug Python, check out 'dir(obj)', which will list all the properties and methods of an object.</p>
<pre><code>class Blah(object):
    pass

b = Blah()

for x in dir(b):
    try:
        print getattr(b,x,False)
    except Exception, e:
        print x,e
</code></pre>
<p>Will yield:</p>
<pre><code>&lt;class '__main__.Blah'&gt;
&lt;method-wrapper '__delattr__' of Blah object at 0x1028ba490&gt;
{}
None
&lt;built-in method __format__ of Blah object at 0x1028ba490&gt;
&lt;method-wrapper '__getattribute__' of Blah object at 0x1028ba490&gt;
&lt;method-wrapper '__hash__' of Blah object at 0x1028ba490&gt;
&lt;method-wrapper '__init__' of Blah object at 0x1028ba490&gt;
__main__
&lt;built-in method __new__ of type object at 0x10276a4e0&gt;
&lt;built-in method __reduce__ of Blah object at 0x1028ba490&gt;
&lt;built-in method __reduce_ex__ of Blah object at 0x1028ba490&gt;
&lt;method-wrapper '__repr__' of Blah object at 0x1028ba490&gt;
&lt;method-wrapper '__setattr__' of Blah object at 0x1028ba490&gt;
&lt;built-in method __sizeof__ of Blah object at 0x1028ba490&gt;
&lt;method-wrapper '__str__' of Blah object at 0x1028ba490&gt;
&lt;built-in method __subclasshook__ of type object at 0x7fd522c6e490&gt;
</code></pre>
<p>Now, your mileage may vary with stuff like objc - since it's a thin Python wrapper around making shared library calls. They won't have docstrings, or in some cases respond to 'dir' if function lookup is lazy-lookup against shared libraries. But, you never know.</p>
<p>Most of the time when it came to the objc stuff, I just dug around in their source code to figure out how they did things when the normal methods of digging up dirt didn't work.</p>
<p>Speaking of normal methods:</p>
<p>A neat feature with Twisted, you can also serve a telnet or SSH accessible interactive Python shell that can actually poke and prod things 'live'.  <a href="http://twistedmatrix.com/trac/wiki/TwistedConch" rel="nofollow noreferrer">Check here for details on TwistedConch</a>.</p>
<p><em>Or..</em></p>
<p>Another trick is to add a '<strong>del</strong>(self)', function to your objects that prints something out as the object gets cleaned up by the garbage collector (when it's deleted / out of scope)</p>
<p><em>Or..</em></p>
<p>You could also play with <a href="http://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">pdb</a>, or if you like ncurses <a href="https://pypi.python.org/pypi/pudb" rel="nofollow noreferrer">pudb</a> is awesome. Check out this question for a couple nifty tricks for using pdb. <a href="https://stackoverflow.com/questions/242485/starting-python-debugger-automatically-on-error">starting-python-debugger-automatically-on-error</a></p>
<p>And, if worse comes to worse - you can always use help(object). </p>
<p>Those are pretty much the debugging methods that get me through the day. If anyone else has some clever ideas don't be shy.</p>
</div>
<span class="comment-copy">thanks...How can I list all the current factories and its protocols associated with a reactor?</span>
<span class="comment-copy">Unsure about backtracking whats registered with the reactor - in that cases I'd strongly suggest setting up TwistedConch so you can just SSH into an interactive Python CLI running inside your app. You can run 'dir()', by itself to see the top level 'global' objects - and start drilling down from there.</span>
