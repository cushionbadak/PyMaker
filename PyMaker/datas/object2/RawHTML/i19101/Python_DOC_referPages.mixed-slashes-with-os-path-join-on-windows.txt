<div class="post-text" itemprop="text">
<p>I tend to use only forward slashes for paths ('/') and python is happy with it also on windows.
In the description of os.path.join it says that is the correct way if you want to go cross-platform. But when I use it I get mixed slashes:</p>
<pre><code>import os

a = 'c:/'
b = 'myFirstDirectory/'
c = 'mySecondDirectory'
d = 'myThirdDirectory'
e = 'myExecutable.exe'


print os.path.join(a, b, c, d, e)

# Result:
c:/myFirstDirectory/mySecondDirectory\myThirdDirectory\myExecutable.exe
</code></pre>
<p>Is this correct? Should I check and correct it afterward or there is a better way?</p>
<p>Thanks</p>
<p>EDIT:
I also get mixed slashes when asking for paths</p>
<pre><code>import sys
for item in sys.path:
    print item

# Result:
C:\Program Files\Autodesk\Maya2013.5\bin
C:\Program Files\Autodesk\Maya2013.5\mentalray\scripts\AETemplates
C:\Program Files\Autodesk\Maya2013.5\Python
C:\Program Files\Autodesk\Maya2013.5\Python\lib\site-packages
C:\Program Files\Autodesk\Maya2013.5\bin\python26.zip\lib-tk
C:/Users/nookie/Documents/maya/2013.5-x64/prefs/scripts
C:/Users/nookie/Documents/maya/2013.5-x64/scripts
C:/Users/nookie/Documents/maya/scripts
C:\Program Files\Nuke7.0v4\lib\site-packages
C:\Program Files\Nuke7.0v4/plugins/modules
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are now providing some of the slashes yourself and letting <a href="http://docs.python.org/2/library/os.path.html" rel="noreferrer"><code>os.path.join</code></a> pick others. It's better to let python pick all of them or provide them all yourself. Python uses backslashes for the latter part of the path, because backslashes are the default on Windows.</p>
<pre><code>import os

a = 'c:' # removed slash
b = 'myFirstDirectory' # removed slash
c = 'mySecondDirectory'
d = 'myThirdDirectory'
e = 'myExecutable.exe'

print os.path.join(a + os.sep, b, c, d, e)
</code></pre>
<p>I haven't tested this, but I hope this helps.  It's more common to have a base path and only having to join one other element, mostly files. </p>
<p>By the way; you can use <a href="http://docs.python.org/2/library/os.html" rel="noreferrer"><code>os.sep</code></a> for those moments you want to have the best separator for the operating system python is running on. </p>
<p><strong>Edit:</strong> as dash-tom-bang states, apparently for Windows you do need to include a separator for the root of the path. Otherwise you create a relative path instead of an absolute one.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>.replace()</code> after <code>path.join()</code> to ensure the slashes are correct:</p>
<pre><code># .replace() all backslashes with forwardslashes
print os.path.join(a, b, c, d, e).replace("\\","/")
</code></pre>
<p>This gives the output:</p>
<pre><code>c:/myFirstDirectory/mySecondDirectory/myThirdDirectory/myExecutable.exe
</code></pre>
<p>As @sharpcloud suggested, it would be better to remove the slashes from your input strings, however this is an alternative.</p>
</div>
<div class="post-text" itemprop="text">
<p>try using abspath (using python 3)</p>
<pre><code>import os

a = 'c:/'
b = 'myFirstDirectory/'
c = 'mySecondDirectory'
d = 'myThirdDirectory'
e = 'myExecutable.exe'


print(os.path.abspath(os.path.join(a, b, c, d, e)))
</code></pre>
<p>OUTPUT:</p>
<p>c:\myFirstDirectory\mySecondDirectory\myThirdDirectory\myExecutable.exe</p>
<p>Process finished with exit code 0</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT based on comment:</strong> <code>path = os.path.normpath(path)</code></p>
<p>My previous answer lacks the capability of handling escape characters and thus <strong>should not be used</strong>:</p>
<ul>
<li>First, convert the path to an array of folders and file name.</li>
<li><p>Second, glue them back together using the correct symbol.</p>
<pre><code>import os   
path = 'c:\www\app\my/folder/file.php'
# split the path to parts by either slash symbol:
path = re.compile(r"[\/]").split(path)
# join the path using the correct slash symbol:
path = os.path.join(*path)
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>os</code> adds slashes for you and makes sure not to duplicate slashes so omit them in your strings</p>
<pre><code>import os

# Don't add your own slashes
a = 'C:'
b = 'myFirstDirectory' 
c = 'mySecondDirectory'
d = 'myThirdDirectory'
e = 'myExecutable.exe'

print os.path.join(a, b, c, d, e)
C:\myFirstDirectory\mySecondDirectory\myThirdDirectory\myExecutable.exe
</code></pre>
<p><strong>Additional:</strong></p>
<p>I'm unsure as to why you have mixed slashes in your sys path (have you used a linux os to add some folders?) but try checking </p>
<p><code>print os.path.isdir(os.path.join('C:','Users','nookie'))</code>.</p>
<p>If this is <code>True</code> then <code>os</code> works for your mixed slashes. </p>
<p>Either way, I would avoid hard-coding directory names into your program.  Your <code>sys.path</code> for loop is a safe way to pull out these directories.  You can then use some string methods, or regex to pick the desired folder.</p>
</div>
<div class="post-text" itemprop="text">
<p>If for any reason you need to provide the paths yourself and you have using anything above python 3.4 you can use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a></p>
<pre><code>from pathlib import Path, PurePosixPath

a = PurePosixPath('c:/')
b = PurePosixPath('myFirstDirectory/')
c = 'mySecondDirectory'
d = 'myThirdDirectory'
e = 'myExecutable.exe'

print(a / b / c / d / e)

# Result
c:/myFirstDirectory/mySecondDirectory/myThirdDirectory/myExecutable.exe
</code></pre>
<p>I used this when I needed a user to provide the location of an assets directory and my code was looking up using windows path strings</p>
<pre><code>In [1]: from pathlib import Path, PureWindowsPath
In [2]: USER_ASSETS_DIR = Path('/asset/dir') # user provides this form environment variable
In [3]: SPECIFIC_ASSET = PureWindowsPath('some\\asset')
In [4]: USER_ASSETS_DIR / SPECIFIC_ASSET

Out[4]: PosixPath('/asset/dir/some/asset')
</code></pre>
</div>
<span class="comment-copy"><code>os</code> is clever and works out which slashes you need for your OS.  To use it correctly, don't put slashes in your strings a,b,c,d and e - os will add them.</span>
<span class="comment-copy">I see, but what if I get mixed slashes when asking for a path? (I have updated the first post with an example)</span>
<span class="comment-copy">you can use <code>os.path.normpath(mixed_slashes_path)</code> and get the slashes normalized. Oh and I'm guessing you're doing this inside of Maya; it does things very much UNIX-like, hence the slashes in there in the paths that it's adding for you.</span>
<span class="comment-copy">Thanks for your answer but what if I get slashes in one string (when having two or more folders)? I have updated the first post with some paths I get from sys.path</span>
<span class="comment-copy">It depends on where that path is coming from. But most of the time, you should already have those slashes in the correct format. That is, if you get the path through Python.  If you have some external source you do not control and that source provides forward slashes instead of backward slashes; you might want to fix that up first.</span>
<span class="comment-copy">So I should check the string afterwards and make sure that the format is correct?</span>
<span class="comment-copy">No I would check your external input (the input you apparently do not control the format of) <b>before</b> putting it in <code>os.path.join</code>. This way you make sure that <code>os.path.join</code> does not make bad decisions based on possibly bad input.</span>
<span class="comment-copy">Splitting out the root directory and re-joining will not yield the correct result; the root of <code>C:</code> needs to be specified. See <a href="http://stackoverflow.com/questions/2422798/">stackoverflow.com/questions/2422798</a>.</span>
<span class="comment-copy">Would it be better to just import posixpath instead of os.path and then do <code>posixpath.join(a, b, c, d, e)</code> which will always give you forward slashes.</span>
<span class="comment-copy">@semicolon, isn't posixpath the same as importing os.path? In any case, on my windows machine <code>posixpath.join()</code> still returns mixed slashes.</span>
<span class="comment-copy">If you look <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">here</a>, os.path will import one of posixpath, ntpath, macpath or os2emxpath based on your os. I am surprised you still get mixed slashes with posixpath. I just tested it on a windows machine and <code>os.path.join('foo', 'bar')</code> gave me <code>'a\\b'</code> and <code>posixpath.join('foo', 'bar')</code> gave me <code>'a/b'</code>.</span>
<span class="comment-copy">I should have clarified that <code>os.path.join()</code> (and the module it imports) does not replace slashes within the strings it is joining, which may lead to mixed slashes (as is happening in the question).</span>
<span class="comment-copy">That is true, but it seemed as though the only existing slashes within the strings it was joining were forward slashes, and as posixpath also uses forward slashes you would not get any mixed slashes using posixpath in the OP's scenario.</span>
<span class="comment-copy"><code>os.path.abspath()</code> calls <code>os.path.normpath()</code> first. You can achieve the same here, just call <code>os.path.normpath()</code>.</span>
<span class="comment-copy">Note that if your string happen to use ` \ ` to escape spaces inside folders, this method will break. For example <code>"/usr/my\ files"</code> will translate to <code>"usr","my"," files"</code> instead of <code>"usr","my files"</code></span>
<span class="comment-copy">Don't re-invent the wheel. Just use <code>os.path.normpath()</code>.</span>
<span class="comment-copy">os.path.isdir(os.path.join('C:','Users','nookie')) returns False. I didn't use any Linux Os to add my folders, those came just from software installation!</span>
<span class="comment-copy">What version of Python are you using, @ejrb? Because on mine, I don't get the first slash. (I see <code>C:myFirstDirectory\mySecondDirectory...</code>)</span>
