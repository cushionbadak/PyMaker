<div class="post-text" itemprop="text">
<p>I am having a hard time figuring out the purpose some code that I've come across. </p>
<p>The code has a class <code>Foo</code>, which has an <code>__init__</code> method that takes multiple arguments. From what I've learned of Python so far, by calling <code>Foo('bar')</code>, it will pass this string as a parameter to <code>__init__</code> (which I think is supposed to be the equivalent of a constructor). </p>
<p>But the issue I am having is that the code I am looking at is calling <code>Foo.__init__('bar')</code> directly. What is the purpose of this? I almost feel that I am missing some other purpose behind <code>__init__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__init__()</code> method gets called for you when you instantiate a class.  However, the <code>__init__()</code> method in a parent class doesn't get called automatically, so need you to call it directly if you want to extend its functionality:</p>
<pre><code>class A:

     def __init__(self, x):
          self.x = x

class B(A):

     def __init__(self, x, y):
          A.__init__(self, x)
          self.y = y
</code></pre>
<p>Note, the above call can also be written using <a href="http://docs.python.org/3/library/functions.html#super" rel="noreferrer"><em>super</em></a>:</p>
<pre><code>class B(A):

     def __init__(self, x, y):
          super().__init__(x)
          self.y = y
</code></pre>
<p>The <em>purpose</em> of the <code>__init__()</code> method is to initialize the class.  It is usually responsible for populating the instance variables.  Because of this, you want to have <code>__init__()</code> get called for all classes in the class hierarchy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python allows you to call the constructor (<code>__init__</code>) directly. By calling <code>Foo.__init__(obj, 'bar')</code>, you're doing an initialization/reinitialization of <code>obj</code></p>
<p>See this code:</p>
<pre><code>class Foo:
    def __init__(self, s):
        self.s = s

f = Foo('abc')
print(f.s) # prints 'abc'
Foo.__init__(f, 'def')
print(f.s) # prints 'def'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes - when inheriting class invokes <code>__init__()</code> of the parent class. AFAIK, this is the only valid case of calling <code>__init__()</code> explicitly. </p>
</div>
<span class="comment-copy">Oh dear. Please don't call <code>__init__</code> to perform reinitialization in any sane system...</span>
<span class="comment-copy">I agree. Sorry if my explanation is bad. Right now I just wanted to show what <code>__init__</code> does. Not where it should be called.</span>
<span class="comment-copy">Saying "<code>__init__</code> is not really a constructor, it's rather an initializer" is not helpful. It's something someone wrote in a book once that has become repeated all over the internet, despite the fact that it makes no sense and just confuses people who already know what a constructor is who are learning Python. <code>__init__</code> exactly corresponds to constructors from other languages, and the official Python documentation even refers to it as one! If you could call a constructor on an existing object in any other OO language, this is exactly what it would do.</span>
<span class="comment-copy">I founded the first answer of this topic that resumes well what I want to tell: <a href="http://stackoverflow.com/questions/6578487/init-as-a-constructor">stackoverflow.com/questions/6578487/init-as-a-constructor</a>. Also <code>__init__</code> doesn't "exactly corresponds to constructors from other languages", since you can't write what I wrote above in other languages (AFAIK in c, c++, Java). What I wanted to say is that <code>__init__</code> doesn't create a new object, as in other languages, and I think it's useful to know that to understand metaclasses. However I know <code>__init__</code> shouldn't be called for that purpose as I said in my previous comment.</span>
<span class="comment-copy">@segfolt Java and C++ constructors don't create new objects either. By the time the constructor is invoked, the object is already created (I don't ever recall writing something like <code>this = malloc(...)</code> in a constructor; do you?). The purpose of a <code>__init__</code> is to operate <b>on</b> a "blank" object to initialise the data contained within it, and it's invoked automatically by the object-creation machinery when you call <code>SomeClass(...)</code> <i>after</i> the object is created but before the <code>SomeClass(...)</code> expression returns its value to the caller. Sounds exactly like a Java/C++ constructor to me...</span>
