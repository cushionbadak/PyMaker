<div class="post-text" itemprop="text">
<p>My question is simple. Lets assume you have string in python like this <code>Foo '" \ Bar</code>.</p>
<p>What is the <strong>correct way</strong> to convert it to <em>valid python expression</em> like <code>'Foo \'" \\ Bar'</code> (so you just simply can copy&amp;paste it to python interpreter and it'll work)?</p>
<p>I thought of <code>'"{}"'.format(some replace magic)</code>, but there's gotta be better solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow"><code>unicode_escape</code> codec</a>; this produces a <code>bytes</code> instance:</p>
<pre><code>&gt;&gt;&gt; example = 'Foo \'" \\ Bar'
&gt;&gt;&gt; print(example)
Foo '" \ Bar
&gt;&gt;&gt; print(example.encode('unicode_escape'))
b'Foo \'" \\\\ Bar'
&gt;&gt;&gt; example.encode('unicode_escape')
b'Foo \'" \\\\ Bar'
</code></pre>
<p><code>unicode_escape</code> <em>expliticly</em> produces valid python string literals:</p>
<blockquote>
<p>Produce a string that is suitable as Unicode literal in Python source code</p>
</blockquote>
<p>To go back to Unicode, simply decode from ASCII:</p>
<pre><code>&gt;&gt;&gt; print(example.encode('unicode_escape').decode('ascii'))
Foo '" \\ Bar
&gt;&gt;&gt; example.encode('unicode_escape').decode('ascii')
'Foo \'" \\\\ Bar'
</code></pre>
<p>Alternatively, use <a href="http://docs.python.org/3/library/functions.html#repr" rel="nofollow"><code>repr()</code></a>:</p>
<pre><code>&gt;&gt;&gt; repr(example)
'\'Foo \\\'" \\\\ Bar\''
&gt;&gt;&gt; print(repr(example))
'Foo \'" \\ Bar'
</code></pre>
<blockquote>
<p>Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to <code>eval()</code>, otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.</p>
</blockquote>
<p>The output of <code>repr()</code> of a string can be pasted straight back into a Python interpreter without additional formatting.</p>
<p>Note that <code>repr()</code> and <code>unicode_escape</code> only escape quotes <em>when absolutely necessary</em>. Only when <em>both</em> styles of quoting, single and double, are present does one of these get escaped:</p>
<pre><code>&gt;&gt;&gt; print(repr('\''))
"'"
&gt;&gt;&gt; print(repr('\"'))
'"'
&gt;&gt;&gt; print(repr('\'"'))
'\'"'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thatâ€™s exactly what <code>repr</code> is meant to do:</p>
<pre><code>&gt;&gt;&gt; x = '''Foo '" \ Bar'''
&gt;&gt;&gt; repr(x)
'\'Foo \\\'" \\\\ Bar\''
&gt;&gt;&gt; print(repr(x))
'Foo \'" \\ Bar'
</code></pre>
</div>
<span class="comment-copy">Instead of replacing stuff or encoding you can also use raw strings with triple quotes: <code>'r"""%s"""' % your_string</code>. That should be enough most of the time ;)</span>
<span class="comment-copy">I need to work with the string, not actually print it, so I can't rely on how <code>print</code> works.</span>
<span class="comment-copy">@Vyktor: The <code>prints()</code> are just there to demonstrate the output. <code>unicode_escape</code> produces <i>valid python literals</i>.</span>
<span class="comment-copy">Hm, <code>unicode_escape</code> doesn't seem to escape <code>"'</code>: <code>print('"\'\\'.encode('unicode_escape').decode('utf-8'))</code> will result into <code>"'\\ </code>. So I'd still need to use <code>'"' + result.replace('"', '\\"') + '"'</code> wouldn't I?</span>
<span class="comment-copy">@Vyktor: It doesn't have to. You do not need to escape a single quote inside a double-quoted string.</span>
<span class="comment-copy">The problem is the inner string contains sql with single quotes, double quotes, so it should handle any special character inside. I've added <code>'"</code> to question to make that more explicit.</span>
<span class="comment-copy">Unfortunately Martijn Pieters beat you few seconds to it. But this is right answer :)</span>
<span class="comment-copy">@Vyktor Yeah, he does that a lot ;D</span>
