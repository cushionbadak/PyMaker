<div class="post-text" itemprop="text">
<p>I'm trying to work with the <code>ast</code> class in Python. I want to get all Function calls and their corresponding arguments. </p>
<p>How can I Implement that? The official Documentation on python.org is really vague.</p>
<p>I also tried implementing <code>visit_Name</code> and <code>visit_Call</code>, but that gives me more than the names of the Call. It would be nice if there were some documentation which attributes which nodes possesses. For example, id for Name-nodes and func for Call-nodes.  </p>
</div>
<div class="post-text" itemprop="text">
<p>I know of no other documentation, but a lot can be learned by studying examples, such as <a href="https://stackoverflow.com/a/1515403/190597">this one</a>, by Alex Martelli. You could start by modifying it just slightly, this way:</p>
<pre><code>import ast

class FuncVisit(ast.NodeVisitor):
    def __init__(self):
        self.calls = []
        self.names = []
    def generic_visit(self, node):
        # Uncomment this to see the names of visited nodes
        # print(type(node).__name__)
        ast.NodeVisitor.generic_visit(self, node)
    def visit_Name(self, node):
        self.names.append(node.id)
    def visit_Call(self, node):
        self.names = []
        ast.NodeVisitor.generic_visit(self, node)
        self.calls.append(self.names)
        self.names = []        
    def visit_keyword(self, node):
        self.names.append(node.arg)

tree = ast.parse('''\
x = foo(a, b)
x += 1
bar(c=2)''')
v = FuncVisit()
v.visit(tree)
print(v.calls)
</code></pre>
<p>yields</p>
<pre><code>[['foo', 'a', 'b'], ['bar', 'c']]
</code></pre>
</div>
<span class="comment-copy">The <a href="http://docs.python.org/3/library/ast.html#abstract-grammar" rel="nofollow noreferrer">Abstract Grammar</a> is auto-generated from the Python source code and is as good as it gets, I'm afraid.</span>
<span class="comment-copy">Note that functions are not the only things that are callable. Classes are callable, types are callable, instances with a <code>__call__</code> method are callable. Since you cannot introspect the type of the item being called, you'll indeed get to see more than just functions being called.</span>
<span class="comment-copy">Note that the after a while of looking at the abstract grammer, it starts to become easier to understand what is going on in all of that (and what the attributes are of the various ast node types).</span>
<span class="comment-copy">Check this out: <a href="http://greentreesnakes.readthedocs.org/en/latest/" rel="nofollow noreferrer">greentreesnakes.readthedocs.org/en/latest</a></span>
<span class="comment-copy">What is the purpose of defining <code>generic_visit</code> on the <code>Visit</code> class?</span>
<span class="comment-copy">Also, why are you not visiting <code>Load</code> nodes (or any of their children)?</span>
<span class="comment-copy">@mgilson: Those are vestigial organs left over from other code :) Thanks for pointing out the mistake! (<code>generic_visit</code> can be very useful for debugging, however, so I'm leaving that code in there with a print statement to show how it could be used.)</span>
<span class="comment-copy">Yeah, generic_visit can be super useful for various things.  But having the implementation just call the parent class's method isn't very useful (unless you put other information in there to help OP in the form of comments, etc).  I'm happy with this now.</span>
