<div class="post-text" itemprop="text">
<p>Lets say I have:</p>
<pre><code>a = r''' Example
This is a very annoying string
that takes up multiple lines
and h@s a// kind{s} of stupid symbols in it
ok String'''
</code></pre>
<p>I need a way to do a replace(or just delete) and text in between "This" and "ok" so that when I call it, a now equals:</p>
<pre><code>a = "Example String"
</code></pre>
<p>I can't find any wildcards that seem to work.  Any help is much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need <a href="http://docs.python.org/3/library/re.html"><code>Regular Expression</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('\nThis.*?ok','',a, flags=re.DOTALL)
' Example String'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The DOTALL flag is the key. Ordinarily, the '.' character doesn't match newlines, so you don't match across lines in a string. If you set the DOTALL flag, re will match '.*' across as many lines as it needs to.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=re.sub('This.*ok','',a,flags=re.DOTALL)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want first and last words:</p>
<pre><code>re.sub(r'^\s*(\w+).*?(\w+)$', r'\1 \2', a, flags=re.DOTALL)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another method is to use string splits:</p>
<pre><code>def replaceTextBetween(delimeterA, delimterB, contents, innerContent):
    contentsPrefix = contents.split(delimeterA)[0]
    contentsSuffix = contents.split(delimterB)[1]

    return contentsPrefix + delimeterA + innerContent + delimterB + contentsSuffix
</code></pre>
<p>Limitations:</p>
<ul>
<li>Does not check if the delimiters exist</li>
<li>Assumes that there are no duplicate delimiters</li>
</ul>
</div>
<span class="comment-copy">Some elaboration on what is happening would have helped more.</span>
