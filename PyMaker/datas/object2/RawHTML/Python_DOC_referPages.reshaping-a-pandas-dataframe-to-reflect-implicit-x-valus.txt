<div class="post-text" itemprop="text">
<p>how can I reshape a dataframe where a subset of the columns are y-values for certain x-values? </p>
<pre><code>df_record = pd.DataFrame({
    'date' : ['2019-03-17', '2019-03-17', '2019-03-17', '2019-03-17'],
    'id' : ['a', 'a', 'b', 'b'],
    'meta' : ['A', 'B', 'A', 'B'],
    'y11' : [0.1, 0.2, 0.3, 0.4],
    'y12' : [1, 2, 3, 4],
    'y21' : [10, 20, 30, 40],
    'y22' : [100, 200, 300, 400],
    })
</code></pre>
<p>In this example, y12, y12, y21 and y22 correspond to e.g. [10,20,100,200].
I can add this to each row:</p>
<pre><code>xs = [10,20,100,200]
df_ = pd.DataFrame()
for i in range(len(df_record)):
    xs_ = pd.Series(xs, name=i)
    df_ = pd.concat([df_, xs_], axis=1)
df_['xs'] =  [ 'x%i'%i for i in xs ]    
pd_ = pd.concat([df_record, df_.set_index('xs').T], axis=1)
</code></pre>
<p>Which prints:</p>
<pre><code>         date id meta  y11  y12  y21  y22  x10  x20  x100  x200
0  2019-03-17  a    A  0.1    1   10  100   10   20   100   200
1  2019-03-17  a    B  0.2    2   20  200   10   20   100   200
2  2019-03-17  b    A  0.3    3   30  300   10   20   100   200
3  2019-03-17  b    B  0.4    4   40  400   10   20   100   200
</code></pre>
<p>But now I'm lost. I'm pretty sure that something like <code>df_.pivot()</code> should help me to reflect the structure, i.e. the xs are an index level like <code>['date', 'id', 'meta', 'xs']</code>.</p>
<p>Thanks in advance!</p>
<p>PS. How can I post the results of the above commands from a Jupyter NB?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create new <code>DataFrame</code> with specified index and columns values and <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html" rel="nofollow noreferrer"><code>DataFrame.join</code></a> to original:</p>
<pre><code>xs = [10,20,100,200]
cols = [f'x{x}' for x in xs]
df = df_record.join(pd.DataFrame([xs], index=df_record.index, columns=cols))
print (df)
         date id meta  y11  y12  y21  y22  x10  x20  x100  x200
0  2019-03-17  a    A  0.1    1   10  100   10   20   100   200
1  2019-03-17  a    B  0.2    2   20  200   10   20   100   200
2  2019-03-17  b    A  0.3    3   30  300   10   20   100   200
3  2019-03-17  b    B  0.4    4   40  400   10   20   100   200
</code></pre>
<p>And then reshape by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.melt.html" rel="nofollow noreferrer"><code>DataFrame.melt</code></a>:</p>
<pre><code>df1 = df.melt(['id', 'date', 'meta'], value_name='xs')
print (df1.head())
  id        date meta variable   xs
0  a  2019-03-17    A      y11  0.1
1  a  2019-03-17    B      y11  0.2
2  b  2019-03-17    A      y11  0.3
3  b  2019-03-17    B      y11  0.4
4  a  2019-03-17    A      y12  1.0
</code></pre>
<p>If need remove column <code>variable</code>:</p>
<pre><code>df1 = df1.drop('variable',axis=1)
print (df1.head())
  id        date meta   xs
0  a  2019-03-17    A  0.1
1  a  2019-03-17    B  0.2
2  b  2019-03-17    A  0.3
3  b  2019-03-17    B  0.4
4  a  2019-03-17    A  1.0
</code></pre>
<p>EDIT:</p>
<p>For specify columns is possible use:</p>
<pre><code>df - pd.melt(df_concat, 
             id_vars=['id', 'date', 'meta'], 
             value_vars=['y11', 'y12', 'y21', 'y22'], 
             var_name='ys',
             value_name='xs')
</code></pre>
</div>
<span class="comment-copy">That looks like exactly what I was looking for! I'll try tomorrow with real data and get back, if not. Thanks a lot!</span>
