<div class="post-text" itemprop="text">
<p>I am writing some program using python and the z3py module.<br/>
What I am trying to do is the following: I extract a constraint of an if or a while statement from a function which is located in some other file. Additionally I extract the used variables in the statement as well as their types.<br/>
As I do not want to parse the constraint by hand into a z3py friendly form, I tried to use evaluate to do this for me. Therefore I used the tip of the following page: <a href="https://stackoverflow.com/questions/10805839/z3-with-string-expressions">Z3 with string expressions</a><br/>
Now the problem is: I do not know how the variables in the constraint are called. But it seems as I have to name the handle of each variable like the actual variable. Otherwise evaluate won't find it. My code looks like this:  </p>
<pre><code>solver = Solver()
# Look up the constraint:
branch = bd.getBranchNum(0)
constr = branch.code
# Create handle for each variable, depending on its type:
for k in mapper.getVariables():
    var = mapper.getVariables()[k]
    if k in constr:
        if var.type == "intNum":
            Int(k)
        else:
            Real(k)
# Evaluate constraint, insert the result and solve it:
f = eval(constr)
solver.insert(f)
solve(f)
</code></pre>
<p>As you can see I saved the variables and constraints in classes. When executing this code I get the following error:</p>
<pre><code>NameError: name 'real_x' is not defined
</code></pre>
<p>If I do not use the looping over the variables, but instead the following code, everything works fine:</p>
<pre><code>solver = Solver()
branch = bd.getBranchNum(0)
constr = branch.code
print(constr)
real_x = Real('real_x')
int_y = Int('int_y')
f = eval(constr)
print(f)
solver.insert(f)
solve(f)
</code></pre>
<p>The problem is: I do not know, that the variables are called "real_x" or "int_y". Furthermore I do not know how many variables there are used, which means I have to use some dynamic thing like a loop.  </p>
<p>Now my question is: Is there a way around this? What can I do to tell python that the handles already exist, but have a different name? Or is my approach completely wrong and I have to do something totally different?</p>
</div>
<div class="post-text" itemprop="text">
<p>This kind of thing is almost always a bad idea (see <a href="http://stupidpythonideas.blogspot.com/2013/05/why-evalexec-is-bad.html" rel="nofollow">Why eval/exec is bad</a> for more details), but "almost always" isn't "always", and it looks like you're using a library that was specifically designed to be used this way, in which case you've found one of the exceptions.</p>
<p>And at first glance, it seems like you've <em>also</em> hit one of the rare exceptions to the <a href="http://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html" rel="nofollow">Keep data out of your variable names</a> guideline (also see <a href="http://stupidpythonideas.blogspot.com/2013/05/why-you-dont-want-to-dynamically-create.html" rel="nofollow">Why you don't want to dynamically create variables</a>). But you haven't.</p>
<p>The only reason you need these variables like <code>real_x</code> to exist is so that <code>eval</code> can see them, right? But the <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow"><code>eval</code></a> function already knows how to look for variables in a dictionary instead of in your global namespace. And it looks like what you're getting back from <code>mapper.getVariables()</code> is a dictionary.</p>
<p>So, skip that whole messy loop, and just do this:</p>
<pre><code>variables = mapper.getVariables()
f = eval(constr, globals=variables)
</code></pre>
<p>(In earlier versions of Python, <code>globals</code> is a positional-only argument, so just drop the <code>globals=</code> if you get an error about that.)</p>
<p>As the documentation explains, this gives the <code>eval</code> function access to your actual variables, plus the ones the <code>mapper</code> wants to generate, and it can do all kinds of unsafe things. If you want to prevent unsafe things, do this:</p>
<pre><code>variables = dict(mapper.getVariables())
variables['__builtins__'] = {}
f = eval(constr, globals=variables)
</code></pre>
</div>
<span class="comment-copy">Just calling <code>Real(k)</code> when <code>k == 'real_x'</code> is obviously not creating a variable named <code>real_x</code> for you. Were you expecting it to?</span>
<span class="comment-copy">The for loop was just something to test. What I actually do is: Saving the variable in as a class instance. That means: I save the name, the current value, all used values and the handle which I create. I thought it would be enough to create the handle and have it saved somewhere. I was not aware python needs the input like that.</span>
<span class="comment-copy">Thank you very much. The thing about the globals was exactly the thing I was looking for. Everything works fine now.</span>
