<div class="post-text" itemprop="text">
<pre><code>names = {'bob':3, 'jack':1,'suzy':0,'amy':5}

def only_child(d:dict)-&gt;dict:
'''if the value(# of siblings) for the key(the person) == 0, change the value to True, 
otherwise leave the dictionary entry as is.'''

    return {name:True for name in d if d[name] == 0}
</code></pre>
<p>this only gives me <code>{'suzy': True}</code></p>
<p>I tried this:</p>
<pre><code>return {name:True for name in d if d[name] == 0 else name:d[name]}
</code></pre>
<p>but I get a <code>SyntaxError</code>.</p>
<p>is there a way that i could write this function in a single line of code(like i've been trying to do)? i like to keep them as short and concise as possible.
the solution should look like</p>
<pre><code>names = {'bob':3, 'jack':1,'suzy':True,'amy':5} 
</code></pre>
<p>any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are filtering out the non-zero items, see the below:</p>
<pre><code>def only_child(d:dict)-&gt;dict:
    return {name: True if num == 0 else num for name, num in d.items() }
</code></pre>
<p>and <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">this construct</a> is called a <code>conditional expression</code>, or the <code>ternary operator</code>.</p>
<p>You can achieve the same result without creating a new dictionary, in-place:</p>
<pre><code>def only_child(d:dict)-&gt;dict:
    for name, num in d.items():
        if num == 0: d[name] = True
    return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand what you are asking:</p>
<pre><code>&gt;&gt;&gt; names = {'bob':3, 'jack':1,'suzy':0,'amy':5}
&gt;&gt;&gt; {k:(v==0 or v) for k,v in names.items()}
{'amy': 5, 'bob': 3, 'jack': 1, 'suzy': True}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR: You should have the conditional as part of the value expression, not the dict comprehension</strong></p>
<p>If you put the test in the condition, then the result of the comprehension will be restricted.  If you want to change the value the test should be in the value expression instead. You can use a ternary for that.</p>
<pre><code>{k:True if names[k]==0 else names[k] for k in names}
</code></pre>
</div>
<span class="comment-copy">What's your question?</span>
<span class="comment-copy">thanks! i was trying to copy the syntax from this example that somebody gave me:      return (i-1 if i &gt;= 1 else i) and i didn't quite understand why it wasn't working.</span>
