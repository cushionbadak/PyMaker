<div class="post-text" itemprop="text">
<p>In Mathematica, I can do this</p>
<pre><code>10+10 // Sqrt
</code></pre>
<p>that returns square root of 20. I'm trying to hack python to do the same. Like this:</p>
<pre><code>10+10 // crazy.sqrt
</code></pre>
<p>How? Overriding operators in <code>crazy</code> class. But it's postfix. And according to this 
<a href="http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods" rel="nofollow">http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods</a></p>
<p>When I try to override any operator it's alwyas <code>self &lt;operator&gt; other</code> so in mentioned case I would have to do it for classes like int,string and ton of other - bad.</p>
<p>Is there a way around this? I would like to swap the order and redefine operator in <code>other</code>  class. (edit for clarification: <code>other</code>  is passed as argument to <code>self</code> class like this: self.__ operator __(...,other))</p>
</div>
<div class="post-text" itemprop="text">
<p>maybe </p>
<pre><code>class WeirdMath:
    def __init__(self,v):
        self.val = v
    def __floordiv__(self,other): #this tells us to apply whatever function to our value
        return other(self.val)

import math
print WeirdMath(10+10) // math.sqrt
print WeirdMath(["a","b","c"]) // " .. ".join
</code></pre>
<p>what might serve your needs is <a href="http://clarete.li/forbiddenfruit/" rel="nofollow">forbiddenfruit</a>  (<code>$ easy_install forbiddenfruit</code>)</p>
<pre><code>from forbiddenfruit import curse
def apply(self,method):
    return method(self)

curse(object,"apply",apply)
def cubed(n):
   return n**3
(10 + 10).apply(math.sqrt).apply(cubed)
"a big yellow house".apply(str.split).apply(" != ".join)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can hack this into Python (see <a href="http://stupidpythonideas.blogspot.com/2015/06/hacking-python-without-hacking-python.html" rel="nofollow">"Hacking Python without Hacking Python"</a>) or into IPython (see <a href="http://ipython.org/ipython-doc/1/config/inputtransforms.html#ast-transformations" rel="nofollow">"Custom Input Transformations"</a>).</p>
<p>To allow <code>10 + 10 ?? func</code>, you need <code>??</code> to be a low-precedence operator. But all of Python's low-precedence operators are either important (like <code>and</code>) or have meaning for ints (like <code>|</code>).
(See <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow">Operator Precedence</a>)</p>
<p>Options:</p>
<ol>
<li>Hack it in as <code>|</code>, which would look like a <a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)" rel="nofollow">pipe</a>. This would be an Abstract Syntax Tree (AST) hack, and can possibly break an imported library that uses <code>|</code>.</li>
<li>Hack in a new operator (but don't use <code>//</code>, because that's important). You need to hack this in at the string level, before the AST.</li>
</ol>
<hr/>
<p>For you, it might be enough to take advantage of Python's and IPython's various commands, and skip the bothersome hacking altogether.</p>
<p>First, instead of using <code>sqrt</code>, you can use Python's power operator.</p>
<pre><code>(10+10) ** 0.5
</code></pre>
<p>Next, in Python/IPython, the underscore "<code>_</code>" represents "the last result". You can type this:</p>
<pre><code>&gt;&gt;&gt; 10 + 10
20
&gt;&gt;&gt; sqrt(_)
4.47213595499958
</code></pre>
<p>(IPython also allows <code>_14</code> or <code>Out[14]</code> to mean "the result of the 14th input", and <code>__</code> and <code>___</code> to mean "second-to-last result" and "third-to-last result", respectively.)</p>
<p>Finally, with IPython, you can use functions without parentheses or commas if the line begins with a slash. (Enter <code>?</code> in IPython to see more information about this, or go <a href="http://ipython.org/ipython-doc/dev/interactive/reference.html#automatic-parentheses-and-quotes" rel="nofollow">here</a>.)</p>
<pre><code>In [6]: 10 + 10
Out[6]: 20

In [7]: /sqrt _
Out[7]: 4.47213595499958
</code></pre>
</div>
<span class="comment-copy">what ? I dont understand what you are trying to do <code>math.sqrt(20)</code> ...</span>
<span class="comment-copy">I'm trying to add qick'n'dirty way to call functions like in mathematica that's just soo good.  I may have just found solution in  __coerce__() possibility. But I'm still interested in my question</span>
<span class="comment-copy">why would you rather do <code>10 + 10 // sqrt</code> instead of <code>sqrt(10+10)</code>? I dont understand what is appealing about it ...</span>
<span class="comment-copy">It sounds weird at first, but it's very useful in Mathematica when you experiment (similar to ipython). You can stack functions without needing to worry about brackets</span>
<span class="comment-copy">The more I use Mathematica, the harder it is (especially in a REPL environment like ipython) to live without @, //, /@, @@, etc.</span>
<span class="comment-copy">I don't want to add anything before <code>10+10</code> expression (that's the idea.)</span>
<span class="comment-copy">@Bruno314 see editted answer</span>
