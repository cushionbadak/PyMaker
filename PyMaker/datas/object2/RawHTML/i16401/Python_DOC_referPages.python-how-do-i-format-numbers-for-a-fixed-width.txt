<div class="post-text" itemprop="text">
<p>let's say </p>
<pre><code>numbers = [ 0.7653, 10.2, 100.2325, 500.9874 ]
</code></pre>
<p>I'd like to output the numbers with a fixed width by varying the number of decimal places to get an output like this:</p>
<pre><code>0.7653
10.200
100.23
500.98
</code></pre>
<p>is there an easy way to do this?  I've been trying with various <code>%f</code> and <code>%d</code> configurations with no luck.</p>
</div>
<div class="post-text" itemprop="text">
<p>Combining two <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format</code></a> / <a href="https://docs.python.org/3/library/functions.html#format" rel="noreferrer"><code>format</code></a> calls:</p>
<pre><code>numbers = [ 0.7653, 10.2, 100.2325, 500.9874 ]
&gt;&gt;&gt; for n in numbers:
...     print('{:.6s}'.format('{:0.4f}'.format(n)))
...     #  OR format(format(n, '0.4f'), '.6s')
...
0.7653
10.200
100.23
500.98
</code></pre>
<p>or <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="noreferrer"><code>%</code> operators</a>:</p>
<pre><code>&gt;&gt;&gt; for n in numbers:
...     print('%.6s' % ('%.4f' % n))
...
0.7653
10.200
100.23
500.98
</code></pre>
<p>Alternatively, you can use <a href="https://docs.python.org/3/reference/expressions.html#slicings" rel="noreferrer">slicing</a>:</p>
<pre><code>&gt;&gt;&gt; for n in numbers:
...     print(('%.4f' % n)[:6])
...
0.7653
10.200
100.23
500.98
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, there is no out-of-box solution for this problem. Moreover, the solution with string slicing does not adequately handles rounding as well as overflows.</p>
<p>Therefore, it seems that one has to write an own function like this:</p>
<pre><code>def to_fixed_width(n, max_width, allow_overflow = True, do_round = True):
    if do_round:
        for i in range(max_width - 2, -1, -1):
            str0 = '{:.{}f}'.format(n, i)
            if len(str0) &lt;= max_width:
                break
    else:
        str0 = '{:.42f}'.format(n)
        int_part_len = str0.index('.')
        if int_part_len &lt;= max_width - 2:
            str0 = str0[:max_width]
        else:
            str0 = str0[:int_part_len]
    if (not allow_overflow) and (len(str0) &gt; max_width):
        raise OverflowError("Impossible to represent in fixed-width non-scientific format")
    return str0
</code></pre>
<p>The resulting behavior:</p>
<pre><code>&gt;&gt;&gt; to_fixed_width(0.7653, 6)
'0.7653'
&gt;&gt;&gt; to_fixed_width(10.2, 6)
'10.200'
&gt;&gt;&gt; to_fixed_width(100.2325, 6)
'100.23'
&gt;&gt;&gt; to_fixed_width(500.9874, 6)
'500.99'
&gt;&gt;&gt; to_fixed_width(500.9874, 6, do_round = False)
'500.98'
</code></pre>
<p>More examples:</p>
<pre><code>&gt;&gt;&gt; to_fixed_width(-0.3, 6)
'-0.300'
&gt;&gt;&gt; to_fixed_width(0.000001, 6)
'0.0000'
&gt;&gt;&gt; to_fixed_width(999.99, 6)
'999.99'
&gt;&gt;&gt; to_fixed_width(999.999, 6)
'1000.0'
&gt;&gt;&gt; to_fixed_width(1000.4499, 6)
'1000.4'
&gt;&gt;&gt; to_fixed_width(1000.4499, 6, do_round = False)
'1000.4'
&gt;&gt;&gt; to_fixed_width(12345.6, 6)
'12346'
&gt;&gt;&gt; to_fixed_width(1234567, 6)
'1234567'
&gt;&gt;&gt; to_fixed_width(1234567, 6, allow_overflow = False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 15, in to_fixed_width
OverflowError: Impossible to represent in fixed-width non-scientific format
&gt;&gt;&gt; to_fixed_width(float('nan'), 6)
'nan'
</code></pre>
</div>
<span class="comment-copy">Shouldn't the last one round to 500.99?</span>
<span class="comment-copy">Thanks! exactly what I needed.</span>
<span class="comment-copy">wow thats actually really awesome</span>
<span class="comment-copy">Note that these solutions don't round the final decimal.</span>
