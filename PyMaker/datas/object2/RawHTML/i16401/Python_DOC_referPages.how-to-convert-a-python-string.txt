<div class="post-text" itemprop="text">
<p>How would I convert this string</p>
<pre><code>'\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '
</code></pre>
<p>into</p>
<pre><code>'\n    this is a docstring for\n    the main function.\n    a,\n    b,\n    c\n    '
</code></pre>
<p>keeping in mind I would also like to do this for '\t' and all other escaped characters.
The code for the reverse way is</p>
<pre><code>def fix_string(s):
    """ takes the string and replaces any `\n` with `\\n` so that the read file will be recognized """
    # escape chars = \t , \b , \n , \r , \f , \' , \" , \\
    new_s = ''
    for i in s:
            if i == '\t':
                    new_s += '\\t'
            elif i == '\b':
                    new_s += '\\b'
            elif i == '\n':
                    new_s += '\\n'
            elif i == '\r':
                    new_s += '\\r'
            elif i == '\f':
                    new_s += '\\f'
            elif i == '\'':
                    new_s += "\\'"
            elif i == '\"':
                    new_s += '\\"'
            else:
                    new_s += i
    return new_s
</code></pre>
<p>would I possibly need to look at the actual numeric values for the characters and check the next character say if I find a ('\',92) character followed by a ('n',110)? </p>
</div>
<div class="post-text" itemprop="text">
<p>Don't reinvent the wheel here. Python has your back. Besides, handling escape syntax <em>correctly</em>, is harder than it looks.</p>
<h2>The correct way to handle this</h2>
<p>In Python 2, use the str-to-str <a href="https://docs.python.org/2/library/codecs.html#id6" rel="nofollow"><code>string_escape</code> codec</a>:</p>
<pre><code>string.decode('string_escape')
</code></pre>
<p>This interprets any Python-recognized string escape sequences for you, including <code>\n</code> and <code>\t</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; string = '\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '
&gt;&gt;&gt; string.decode('string_escape')
'\n    this is a docstring for\n    the main function.\n    a,\n    b,\n    c\n    '
&gt;&gt;&gt; print string.decode('string_escape')

    this is a docstring for
    the main function.
    a,
    b,
    c

&gt;&gt;&gt; '\\t\\n\\r\\xa0\\040'.decode('string_escape')
'\t\n\r\xa0 '
</code></pre>
<p>In Python 3, you'd have to use the <a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="nofollow"><code>codecs.decode()</code></a> and the <code>unicode_escape</code> codec:</p>
<pre><code>codecs.decode(string, 'unicode_escape')
</code></pre>
<p>as there is no <code>str.decode()</code> method and this is not a str -&gt; bytes conversion.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; string = '\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '
&gt;&gt;&gt; codecs.decode(string, 'unicode_escape')
'\n    this is a docstring for\n    the main function.\n    a,\n    b,\n    c\n    '
&gt;&gt;&gt; print(codecs.decode(string, 'unicode_escape'))

    this is a docstring for
    the main function.
    a,
    b,
    c

&gt;&gt;&gt; codecs.decode('\\t\\n\\r\\xa0\\040', 'unicode_escape')
'\t\n\r\xa0 '
</code></pre>
<h2>Why straightforward <code>str.replace()</code> won't cut it</h2>
<p>You <em>could</em> try to do this yourself with <code>str.replace()</code>, but then you also need to implement proper escape parsing; take <code>\\\\n</code> for example; this is <code>\\n</code>, escaped. If you naively apply <code>str.replace()</code> in sequence, you end up with <code>\n</code> or <code>\\\n</code> instead:</p>
<pre><code>&gt;&gt;&gt; '\\\\n'.decode('string_escape')
'\\n'
&gt;&gt;&gt; '\\\\n'.replace('\\n', '\n').replace('\\\\', '\\')
'\\\n'
&gt;&gt;&gt; '\\\\n'.replace('\\\\', '\\').replace('\\n', '\n')
'\n'
</code></pre>
<p>The <code>\\</code> pair should be replaced by just one <code>\</code> characters, leaving the <code>n</code> uninterpreted. But the replace option either will end up replacing the trailing <code>\</code> together with the <code>n</code> with a newline character, <em>or</em> you end up with <code>\\</code> replaced by <code>\</code>, and then the <code>\</code> and the <code>n</code> are replaced by a newline. Either way, you end up with the wrong output.</p>
<h2>The slow way to handle this, manually</h2>
<p>You'll have to process the characters one by one instead, pulling in more characters as needed:</p>
<pre><code>_map = {
    '\\\\': '\\',
    "\\'": "'",
    '\\"': '"',
    '\\a': '\a',
    '\\b': '\b',
    '\\f': '\f',
    '\\n': '\n',
    '\\r': '\r',
    '\\t': '\t',
}

def unescape_string(s):
    output = []
    i = 0
    while i &lt; len(s):
        c = s[i]
        i += 1
        if c != '\\':
            output.append(c)
            continue
        c += s[i]
        i += 1
        if c in _map:
            output.append(_map[c])
            continue
        if c == '\\x' and i &lt; len(s) - 2:  # hex escape
            point = int(s[i] + s[i + 1], 16)
            i += 2
            output.append(chr(point))
            continue
        if c == '\\0':  # octal escape
            while len(c) &lt; 4 and i &lt; len(s) and s[i].isdigit():
                c += s[i]
                i += 1
            point = int(c[1:], 8)
            output.append(chr(point))
    return ''.join(output)
</code></pre>
<p>This now can handle the <code>\xhh</code> and the standard 1-letter escapes, but not the <code>\0..</code> octal escape sequences, or <code>\uhhhh</code> Unicode code points, or <code>\N{name}</code> unicode name references, nor does it handle malformed escapes in quite the same way as Python would.</p>
<p>But it <em>does</em> handle the escaped escape properly:</p>
<pre><code>&gt;&gt;&gt; unescape_string(string)
'\n    this is a docstring for\n    the main function.\n    a,\n    b,\n    c\n    '
&gt;&gt;&gt; unescape_string('\\\\n')
'\\n'
</code></pre>
<p>Do know this is <em>far slower</em> than using the built-in codec.</p>
</div>
<div class="post-text" itemprop="text">
<p>the simplest solution to this is just to use a str.replace() call</p>
<pre><code>s = '\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '
s1 = s.replace('\\n','\n')
s1
</code></pre>
<p>output</p>
<pre><code>'\n    this is a docstring for\n    the main function.\n    a,\n    b,\n    c\n    '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def convert_text(text):
    return text.replace("\\n","\n").replace("\\t","\t")


text = '\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '
print convert_text(text)
</code></pre>
<p>output:</p>
<pre><code>    this is a docstring for
    the main function.
    a,
    b,
    c
</code></pre>
</div>
<span class="comment-copy">Do you have the order of the two strings backwards?</span>
<span class="comment-copy">consider using <code>str.replace</code>.</span>
<span class="comment-copy">@TheSoundDefense - no. I am just giving an example of how I would do this the reverse way.</span>
<span class="comment-copy">Does your string <i>actually</i> contain the three characters <code>'\\n'</code>? Or is it appearing in some escaped form?</span>
<span class="comment-copy">@hughdbrown, that throws an error</span>
<span class="comment-copy">Not my downvote, but its probably because the argument for <code>string.decode()</code> is wrong</span>
<span class="comment-copy">@wnnmaw: right, a typo, corrected.</span>
<span class="comment-copy">I'd say it's also over engineered and removes the ability for the asker to learn the fundamentals of something like a "string replace".</span>
<span class="comment-copy">@EugeneK: How is this overengineered? The codec exists <i>for just this purpose</i>.</span>
<span class="comment-copy">@EugeneK: There, added the proper manual way too. Not using <code>str.replace()</code> however.</span>
<span class="comment-copy">Is that the actual output? Because that makes it look like your solution didn't actually work. (they should be on separate lines)</span>
<span class="comment-copy">@wnnmaw - oops!</span>
