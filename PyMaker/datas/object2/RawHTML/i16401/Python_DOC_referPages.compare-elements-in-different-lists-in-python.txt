<div class="post-text" itemprop="text">
<p>So I have a question about how to compare elements in different lists in python. </p>
<p>I have lists like this:</p>
<pre><code>[element1, element2, element3, element4, ... ]
[element1, element2, element3, element4, ... ]
[element1, element2, element3, element4, ... ]
[element1, element2, element3, element4, ... ]
</code></pre>
<p>So what I want is to compare element2 in each list, if element2 are the same, I want to keep only one list which contains the largest element 3 (assume element 3 is integer). So in the end the element2 in all lists are unique.</p>
<p>I'm new in Python, appreciate your patients!</p>
</div>
<div class="post-text" itemprop="text">
<p>It may not be the most elegent but this works:</p>
<pre><code>from collections import defaultdict

a = [1,2,3,4,5]
b = [2,2,5,5,3]
c = [5,2,8,1,1]
d = [1,1,1,1,1]
e = [5,1,2,3,4]
f = [1,1,5,5,5]

all_lists = [a,b,c,d,e,f]

dictionary = defaultdict(list)
for l in all_lists:
    dictionary[l[1]].append(l)

sorted_dict = {key:sorted(l, key=lambda x:x[2], reverse=True)[0] for key,l in dictionary.items()}
</code></pre>
<p>Hope this helps!</p>
<p>edit: Useless line</p>
</div>
<div class="post-text" itemprop="text">
<p>Check if all second element are equal:</p>
<pre><code>l1 = [1,2,7,4]
l2 = [1,2,4,5]
l3 = [3,2,6,5]

print len(set(zip(l1,l2,l3)[1])) == 1  # zip all lists and check all elements are equal using a set
True
</code></pre>
<p><code>zip(l1,l2,l3)</code> looks like <code>[(1, 1, 3), (2, 2, 2), (6, 4, 6), (6, 5, 5)]</code> where    <code>zip(l1,l2,l3)[1] = (2, 2, 2)</code>, as set values are unique if the len is  &gt; 1 then we don't have all common second elements.</p>
<p>Get list with largest third element:</p>
<pre><code>print max(l1,l2,l3,key=lambda x : x[2]) # get list with greatest third element value
[1, 2, 7, 4]
</code></pre>
<p>If you have a tie for the biggest third element you can go to the fourth:</p>
<pre><code>l1 = [1,2,6,6]
l2 = [1,2,4,5]
l3 = [3,2,6,5]

print max(l1,l2,l3,key=lambda x : ((x[2]),x[3]))
[1, 2, 6, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First it groups the list by key value.  Then finds largest element based on another key</p>
<pre><code>**Fixed To allow for unsorted lists/non consecutive groups**

def uniqueGroupBy(iterable,key = lambda x:x):
"grabs the groups of the iterable as a dictionary with list elements"
groups = {}
for each in iterable:
    dictKey = key(each)
    if groups.get(dictKey): groups[dictKey].append(each)
    else: groups[dictKey] = [each]
return groups


def cmpElementsByKey(a):
l = []
for k, g in uniqueGroupBy(a,key=lambda x:x[1]).iteritems(): #groups by the unique key which is your second item in the list
    l.append(max(g,key=lambda x:x[2]))    #chooses the list with the largest element 3
return l
</code></pre>
</div>
<span class="comment-copy">What have you tried? Group the lists by element 2 (e.g. using a dictionary) and then pick the one with max element 3 from each group.</span>
<span class="comment-copy">a list of lists or individual lists? Do you want to group all the lists with a single common second element or any two or more that have the same second element?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> only works when the elements are already in sorted order (or at least all the element belonging to one group are next to each other).</span>
<span class="comment-copy">You are right, I don't think you can group nonConsecutives using a generator, so I used a dictionary to do a complete groupby then applied to the other function</span>
