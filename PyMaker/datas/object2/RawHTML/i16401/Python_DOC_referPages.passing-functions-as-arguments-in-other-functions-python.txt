<div class="post-text" itemprop="text">
<p>I have these functions, and I'm getting errors, with the do_twice functions, but I'm having problems debugging it</p>
<pre><code>#!/usr/bin/python
#functins exercise 3.4

def do_twice(f):
    f()
    f()

def do_four(f):
    do_twice(f)
    do_twice(f)

def print_twice(str):
    print str + 'one' 
    print str + 'two'


str = 'spam'
do_four(print_twice(str))
</code></pre>
<p>debugger errors</p>
<pre><code>:!python 'workspace/python/functions3.4.py'
spamone
spamtwo
Traceback (most recent call last):
  File "workspace/python/functions3.4.py", line 18, in &lt;module&gt;
    do_four(print_twice(str))
  File "workspace/python/functions3.4.py", line 9, in do_four
    do_twice(f)
  File "workspace/python/functions3.4.py", line 5, in do_twice
    f()
TypeError: 'NoneType' object is not callable

shell returned 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The line <code>do_four(print_twice(str))</code> evaluates the expression in the brackets first before passing it. Since print_twice doesn't return anything, <code>None</code> is assumed, and that gets passed.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that the expression <code>print_twice(str)</code> is evaluated by calling <code>print_twice</code> with <code>str</code> and getting the result that you returned,* and that result is what you're passing as the argument to <code>do_four</code>.</p>
<p>What you need to pass to <code>do_four</code> is a function that, when called, calls <code>print_twice(str)</code>.</p>
<p>You can build such a function manually:</p>
<pre><code>def print_twice_str():
    print_twice(str)
do_four(print_twice_str)
</code></pre>
<p>Or you can do the same thing inline:</p>
<pre><code>do_four(lambda: print_twice(str))
</code></pre>
<p>Or you can use the higher-order function <a href="https://docs.python.org/3/library/functools.html#functools.partial"><code>partial</code></a> to do it for you:</p>
<pre><code>from functools import partial
do_four(partial(print_twice, str))
</code></pre>
<p>The documentation for <code>partial</code> has a pretty nice explanation:</p>
<blockquote>
<p>The <code>partial()</code> is used for partial function application which “freezes” some portion of a function’s arguments and/or keywords resulting in a new object with a simplified signature. For example, <code>partial()</code> can be used to create a callable that behaves like the <code>int()</code> function where the <em>base</em> argument defaults to two: [snip] <code>basetwo = partial(int, base=2)</code></p>
</blockquote>
<hr/>
<p><sub>* If you're thinking "But I didn't return anything, so where does that <code>None</code> come from?": Every function always returns a value in Python. If you don't tell it what to return, it returns <code>None</code>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Right now <code>print_twice</code> is returning <code>None</code> which is what ends up being passed to <code>do_four</code> as a parameter. In other words, you are passing the result of the function call instead of the function call itself.</p>
<p>Instead you want to wrap that function call in a lamda function like this:</p>
<pre><code>do_four(lambda: print_twice(str))
</code></pre>
<p>This will pass the actual function call as a parameter instead of calling the function and passing its result.</p>
</div>
<span class="comment-copy">As a side note, it's a bad idea to call a variable <code>str</code>; that's the name of one of the most important built-in types in Python, and the function you use to get the friendly representation of any object, so you don't want to hide it.</span>
<span class="comment-copy">oh, yes... now I see it. instead of passing the function I'm just getting its return back.. in other words, to get something from my function call I would have to add a return statement in my print_twice functions</span>
<span class="comment-copy">Or pass the function and the argument through, which is what partial (below) effectively does.</span>
