<div class="post-text" itemprop="text">
<p>How can I check is some package is installed in my system (linux or even better if it could works in other OSs), is there any python module or script that could do it?</p>
<p>I can not find anything about.</p>
<p>Edit: I mean OS specific package (like could be .deb)</p>
</div>
<div class="post-text" itemprop="text">
<p>To find out whether you've installed a .deb, .rpm, etc. package, you need to use the appropriate tools for your packaging system.</p>
<p>APT has a Python wrapper named <code>python-apt</code> in Debian, or just <a href="https://pypi.python.org/pypi/apt/0.7.8" rel="nofollow"><code>apt</code></a> at PyPI. </p>
<p>RPM has a whole slew of Python tools—in fact, most of Redhat's installer ecosystem is built on Python, and you should already have the <code>rpm</code> module installed. Read <a href="http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-rpm-programming-python.html" rel="nofollow">Programming RPM with Python</a> (or, better, search for a newer version…) before looking for a high-level wrapper, so you understand what you're actually doing; it's only a couple lines of code even with the low-level interface.</p>
<p>As far as I know, nobody has wrapped these up in a universal tool for every packaging format and database that any linux distro has ever used (and, even if they had, that wouldn't do you much good on linux systems that don't use a packaging system). But if you just want to handle a handful of popular systems, <code>python-apt</code> and either Redhat's own tools or search PyPI for RPM, and that will cover almost everything you care about.</p>
<p>Alternatively, <a href="http://www.freedesktop.org/wiki/Software/pkg-config/" rel="nofollow"><code>pkg-config</code></a> is the closest thing to a universal notion of "packages installed on this system". Every linux system will have it (and most other non-Windows systems), but not every package registers with pkg-config. Still, if this is what you're looking for, <a href="https://pypi.python.org/pypi/pkgconfig/1.1.0" rel="nofollow"><code>pkgconfig</code></a> is the Python answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The word "package" has a half-dozen similar but incompatible meanings, but the fact that you said "package or module" implies you specifically want to know about Python packages and modules, as in the things you can <code>import</code>.</p>
<p>In which case, the way to test it is to <code>import</code> them.</p>
<p>Manually, do this:</p>
<pre><code>$ python
&gt;&gt;&gt; import foo
ImportError: No module named foo
</code></pre>
<p>Well, <code>foo</code> isn't installed.</p>
<p>Programmatically:</p>
<pre><code>try:
    import foo
except ImportError:
    # do whatever you wanted if foo is missing
</code></pre>
<p>Note that this doesn't actually tell you <code>foo</code> is missing, just that it couldn't be imported. In a simple "test whether you have this" script, that's generally what you want to actually check for. But what if you really want to check "is installed (even if broken)"?</p>
<p>In recent Python (I think 3.4+), the <code>ImportError</code> will have additional information in it that you can access—<code>name</code> for the name you were trying to import, <code>path</code> if it was found, etc. However, this is one of those cases where EAFP may not be better than LBYL. You can use <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow"><code>importlib</code></a> to search for the module without trying to import it, like this:</p>
<pre><code>spec = importlib.util.find_spec('foo')
</code></pre>
<p>What if you're using an older Python? There are similar features going back to 3.2, but not quite as nice, and if you're using 2.7, there's really nothing worth using, because the import machinery wasn't exposed very well.</p>
<p>For that case (and many, many other cool things related to package installation), use <a href="https://pypi.python.org/pypi/setuptools" rel="nofollow"><code>setuptools</code></a>—which isn't in the stdlib, but a huge number of third-party packages depend on it (until recently it was the cornerstone of Python package installation, even if unofficially):</p>
<pre><code>pkg_resources.get_distribution('foo')
</code></pre>
<p>However, that looks for a <code>distutils</code>/<code>setuptools</code>/PyPI package, not a Python module or package. There's a lot of overlap there, but they're not exactly the same thing. For a simple example, when you <code>pip install more-itertools</code>, you get the <code>more-itertools</code> PyPI package, which installs the <code>more_itertools</code> Python package into your site-packages.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11210104/check-if-a-program-exists-from-a-python-script">Check if a program exists from a python script</a></span>
<span class="comment-copy">Take a look at <a href="http://apt.alioth.debian.org/python-apt-doc/" rel="nofollow noreferrer">python apt package/module</a></span>
<span class="comment-copy">When you say <i>"package"</i>, do you mean a packaged Python module, or an OS-specific package (like *.rpm or *.deb)?</span>
<span class="comment-copy">@LukasGraf: I think he means neither, but rather a Python package (as in a directory with <code>__init__.py</code> and some submodules or subpackages, loosely speaking).</span>
<span class="comment-copy">One more possible meaning, of course, is the <code>pkgconfig</code> notion of packages, which is the only thing that could make this make sense as a sort-of-linux-specific but not distro-specific question… but I'm willing to bet that's not what he's asking.</span>
<span class="comment-copy">To check for availability of Python modules, <code>pkg_resources.get_distribution('foo')</code> and catching <code>DistributionNotFound</code> should be used - catching <code>ImportError</code>s <a href="http://do3.cc/blog/2010/08/20/do-not-catch-import-errors,-use-pkg_resources/" rel="nofollow noreferrer">may hide circular dependencies</a>.</span>
<span class="comment-copy">@LukasGraf: <code>import</code> can have other problems too, but for quick&amp;dirty checking, it tells you whether you can import the module or not (a simple test script isn't going to have circular dependencies—unless, of course, the module itself does, in which case you can't import it, so that's the right answer). <code>pkg_resources</code> is part of <code>setuptools</code>, and one of those "fancier things" I already mentioned, but maybe I should expand it in the answer.</span>
<span class="comment-copy">I agree, it's a more advanced detail - hence still +1 ;-) But it is the proper API, and it does answer the exact question the OP asked: Is module XY installed? If it is usuable is a sligtly different question, and one might want to let that error surface.</span>
<span class="comment-copy">@LukasGraf: Well, it's the proper API for packages installed by <code>setuptools</code>; it's a hacky-and-not-official-but-thoroughly-reliable API for packages installed in any other way (except <code>distribute</code> or native 3.4+ <code>pip</code>). But, more importantly, it's the API for <code>distutils</code> packages, not for modules and packages. Except in the case where a <code>distutils</code> package contains exactly one module or package with the same name as itself, you're getting the wrong answer.</span>
<span class="comment-copy">Yes, my phrasing <i>"availability of Python modules"</i> was incorrect - I should have said "setuptools based distributions". So if you're interested in the <code>ImageOps</code> module you obviously would need to check for the <code>PIL</code> distribution (or <code>Pillow</code> for that matter).</span>
