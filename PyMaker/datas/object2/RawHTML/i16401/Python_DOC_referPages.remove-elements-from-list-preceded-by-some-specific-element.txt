<div class="post-text" itemprop="text">
<p>Lets say we have a list <code>[Y, X, 4, Y, 3, X, 2, X]</code></p>
<p>I want to be able to remove all elements that are immediately preceded by an X and also remove the X's themselves. So the result should look like <code>[Y, Y, 3]</code>. What would be the pythonic way of doing this?</p>
<p>I came up with something like the following, but I feel that it is very clunky and not clean. Is there a better way of doing this?</p>
<pre><code>list = [Y, X, 4, Y, 3, X, 2, X]
is_preceded = False
result = []
for i in list:
    if i == 'X':
         is_preceded = True
    elif is_preceded == True:
         is_preceded = False
    else:
         result.append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> and <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; lst = ['Y', 'X', 4, 'Y', 3, 'X', 2, 'X']
&gt;&gt;&gt; [a for a, b in zip(lst, [''] + lst) if b != 'X' and a != 'X']
['Y', 'Y', 3]

# a: current item
# b: previous item
</code></pre>
<p>BTW, don't use <code>list</code> as a variable naem. It shadows builtin type/function <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow"><code>list</code></a>.</p>
<hr/>
<p>If you use Python 2.x, <code>zip</code> will return a new list. If you don't want it use <code>itertools.izip</code>.</p>
<p>In addition to that if you don't want to create temporary list (<code>[''] + lst</code>), you can use <code>itertools.chain([''], lst)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend processing the list backwards with list comprehension, like this</p>
<pre><code>l = ['Y', 'X', 4, 'Y', 3, 'X', 2, 'X']
rs = [l[i] for i in range(len(l) - 1, 0, -1) if l[i - 1] != 'X' and l[i] != 'X']

if l[0] != 'X':
    rs.append(l[0])

print rs[::-1]
# ['Y', 'Y', 3]
</code></pre>
</div>
<span class="comment-copy">Nice, the zip idea is super clever! Also, thanks for the heads up about not using "list" as a variable name.</span>
