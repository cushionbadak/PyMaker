<div class="post-text" itemprop="text">
<p>I have a class object in python. I want to send that object values through TCP.</p>
<p>I know if it is C++ I can send it like following..</p>
<pre><code>class Abc
{
    int x;
    float y;
    string x;
};

Abc Obj;
char* data = new char[sizeof(Abc)];
memcpy(data, &amp;obj, sizeof(Abc));
tcpsender.send(data);    // may be incorrect syntax
</code></pre>
<p>Thus the data will be sent to destination as bytes.</p>
<p>now i have to do this in Python.</p>
<p>what is the alternative part of these two lines.</p>
<pre><code>/*
char* data = new char[sizeof(Abc)];
memcpy(data, &amp;obj, sizeof(Abc));
*/
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not the equivalent of C <code>memcpy</code>, but if your requirement is to send an object through TCP and reconstruct if at the other side, <code>pickle</code> module is for you.</p>
<p>Is is targetted as storing objects in sequential files or strings and retrieving them, including across different architectures.</p>
<p>Edit : example from <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">The Python Standard Library</a> manual for Python 3.4 :</p>
<p><em>For the simplest code, use the dump() and load() functions.</em></p>
<pre><code>import pickle

# An arbitrary collection of objects supported by pickle.
data = {
    'a': [1, 2.0, 3, 4+6j],
    'b': ("character string", b"byte string"),
    'c': set([None, True, False])
}

with open('data.pickle', 'wb') as f:
    # Pickle the 'data' dictionary using the highest protocol available.
    pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
</code></pre>
<p><em>The following example reads the resulting pickled data.</em></p>
<pre><code>import pickle

with open('data.pickle', 'rb') as f:
    # The protocol version used is detected automatically, so we do not
    # have to specify it.
    data = pickle.load(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>struct</code> package can do this for you.</p>
<pre><code>import struct

fmt = 'if10p'
data = struct.pack(fmt, 42, 1.234, 'hello')
print struct.unpack(fmt, data)
</code></pre>
<p>You have to specify the maximum length of the string (here 10). Your C++ version doesn't work because the raw bytes of a string will contain a pointer rather than the characters inside the sting.</p>
</div>
<span class="comment-copy">What Python code do you currently have?</span>
<span class="comment-copy">Are you writing the code for both ends or do you actually have to conform to an existing protocol?</span>
<span class="comment-copy">You can't serialize a string in C++ using memcpy like this since a string needs to keep the actual characters in a separate buffer and so the receiver will get data including bytes of a pointer which they can't use.</span>
<span class="comment-copy">There are several issues with your question. The C++ code would not work. It does not seem very clear that you understand what memcpy is exactly doing. The question should be reformulated in something like "How to send structured data over TCP in Python" or closed</span>
<span class="comment-copy">This beeing said you should read this <a href="http://pymotw.com/2/socket/binary.html" rel="nofollow noreferrer">pymotw.com/2/socket/binary.html</a></span>
<span class="comment-copy">Can u give some samples of pickle</span>
<span class="comment-copy">@Ankur I've updated my post, but <b>you</b> should read documentation if you want to use Python</span>
<span class="comment-copy">I know there is a pack function to do that, but it is not suitable for any object type, i guess it's only for string</span>
