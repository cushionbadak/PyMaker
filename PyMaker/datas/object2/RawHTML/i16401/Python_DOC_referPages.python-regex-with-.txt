<div class="post-text" itemprop="text">
<p>I'm trying to split a string containing Swedish characters with re.split, but I can't get the code to work.</p>
<pre><code>wordsre = re.compile(r"[\WåäöÅÄÖ]+")
mytext = "hej. och gå! Med en #katt som leker 9 liv!"
newtext = wordsre.split(mytext)
</code></pre>
<p>The output is:</p>
<pre><code>['hej', 'och', 'g', 'Med', 'en', 'katt', 'som', 'leker', '9', 'liv', '']  
</code></pre>
<p>EDIT: The third word is supposed to be "gå". The Swedish character "å" is missing.</p>
<p>I'm on Mac OS X Mavericks, using Python 3.4 and "locale" in Terminal (Bash) outputs:</p>
<pre><code>LANG="sv_SE.UTF-8"
LC_COLLATE="sv_SE.UTF-8"
LC_CTYPE="sv_SE.UTF-8"
LC_MESSAGES="sv_SE.UTF-8"
LC_MONETARY="sv_SE.UTF-8"
LC_NUMERIC="sv_SE.UTF-8"
LC_TIME="sv_SE.UTF-8"
LC_ALL=
</code></pre>
<p>I've found this thread on Ubuntu Forum, but I can't see why it's not working for me although the locale is correct. </p>
<p><a href="http://ubuntuforums.org/showthread.php?t=1534940" rel="nofollow" title="Python regex problem (åäö) - swedish spec chars">http://ubuntuforums.org/showthread.php?t=1534940</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Small Typo: use <code>\w</code>, not <code>\W</code></h2>
<p>This will work:</p>
<pre><code>[\wåäöÅÄÖ]+
</code></pre>
<p>In Python:</p>
<pre><code>print(re.findall(r"[\wåäöÅÄÖ]+","hej. och gå! Med en #katt som leker 9 liv!"))
</code></pre>
<p>Output:</p>
<pre><code>['hej', 'och', 'gå', 'Med', 'en', 'katt', 'som', 'leker', '9', 'liv']
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li><code>\W</code> matches chars that are not letters, digits or underscores, which is the opposite of what we want to match the words</li>
<li>In Python 2, <code>\w</code> matches an ASCII letter, digit or underscore (unless, as @MartijnPieters points out, you use the <code>re.UNICODE</code> option)</li>
<li>In Python 3, <code>\w</code> matches a unicode letter, ideogram, digit or underscore, (unless, as @MartijnPieters points out, you use the <code>re.ASCII</code> option) so the accented letters are unneeded (<code>\w+</code> is enough)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You are <em>including</em> <code>å</code> in the characters to split on. It appears you have misunderstood what the split <em>does</em>.</p>
<p><code>re.split()</code> will split the words on anything that matches the characters class; in your case that means anything <code>\W</code> matches (anything that is <strong>not</strong> a letter, a number or <code>_</code>), and you added the characters <code>åÅäÄöÖ</code> to that set.</p>
<p><strong>Omit</strong> those characters if you don't want them to be split on:</p>
<pre><code>wordsre = re.compile(r"\W+")
</code></pre>
<p>In a Unicode regular expression, they are not part of the <code>\W</code> character set to begin with.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; mytext = "hej. och gå! Med en #katt som leker 9 liv!"
&gt;&gt;&gt; wordsre = re.compile(r"\W+")
&gt;&gt;&gt; wordsre.split(mytext)
['hej', 'och', 'gå', 'Med', 'en', 'katt', 'som', 'leker', '9', 'liv', '']
</code></pre>
<p>As <code>\w</code> is the inverse of <code>\W</code>, you can also use <code>re.findall()</code> instead of <code>re.split()</code>, using the <code>\w</code> pattern to extract the words rather than remove the non-word characters:</p>
<pre><code>&gt;&gt;&gt; re.findall(r'\w+', mytext)
['hej', 'och', 'gå', 'Med', 'en', 'katt', 'som', 'leker', '9', 'liv']
</code></pre>
<p>with the added advantage that there now is no trailing empty string left.</p>
<p>Again, when using a Unicode pattern, <em>all</em> letters are included, the character set is not limited to just the ASCII letter characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Get the matched group from index 1</p>
<pre><code>([^\s]+)
</code></pre>
<p><a href="http://regex101.com/r/nO7jF9/9" rel="nofollow">Live DEMO</a></p>
<p>OR try</p>
<pre><code>(\S+)
</code></pre>
<p><a href="http://regex101.com/r/nO7jF9/10" rel="nofollow">Live DEMO</a></p>
<p>As per you expected output use below regex that excludes spaces, dot, hash and explanatory sign.</p>
<pre><code>([^\s\.#!]+)
</code></pre>
<p><a href="http://regex101.com/r/nO7jF9/12" rel="nofollow">Live DEMO</a></p>
<hr/>
<p>sample code:</p>
<pre><code>import re
p = re.compile(ur'([^\s]+)')
test_str = u"hej. och gå! Med en #katt som leker 9 liv!"

re.findall(p, test_str)
</code></pre>
</div>
<span class="comment-copy">The output is exactly what I'd expect. What exactly did you expect to happen instead?</span>
<span class="comment-copy">I expected it to say: ['hej', 'och', 'gå', 'Med', 'en', 'katt', 'som', 'leker', '9', 'liv', ''] - sorry for not a very good example text. Missing the "å".</span>
<span class="comment-copy">Then <i>don't include <code>å</code> in the split expression</i>! Any character in your <code>[...]</code> character class is split on, the <code>å</code> is included in that.</span>
<span class="comment-copy">What is it you are trying to achieve here? Why are you including those characters in the character class to split on in the first place?</span>
<span class="comment-copy">You're right. I've misunderstood the docs <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a>: "\W - When the LOCALE and UNICODE flags are not specified, matches any non-alphanumeric character; this is equivalent to the set [^a-zA-Z0-9_]. I thought it wouldn't catch åäöÅÄÖ but it did.</span>
<span class="comment-copy">FYI, added code to retrieve the words.</span>
<span class="comment-copy">The characters <code>åäöÅÄÖ</code> are <i>already included</i> in <code>\w</code>. There is no need to list them. The OP was <i>splitting</i> however, not using <code>re.findall()</code>, so <i>just</i> <code>\W+</code> works.</span>
<span class="comment-copy">@MartijnPieters Good point—true for Python 3, untrue for Python 2. Mattias tagged the question Python 3, so the short version will work. Adding it to the explanation.</span>
<span class="comment-copy">Thank you Mattias, glad it helped. :)</span>
<span class="comment-copy">In Python 2, the same applies if you use a Unicode string for the pattern or set <code>re.UNICODE</code> explicitly.</span>
