<div class="post-text" itemprop="text">
<p>I have a tab-delimited txt file like this:</p>
<pre><code>A   B   aaaKP
C   D   bbbZ
E   F   cccLL
</code></pre>
<p>This is tab-delimited.</p>
<p>If</p>
<pre><code>phrase = aaa or bbb
column = 3
</code></pre>
<p>then I would like only those rows whose 3rd column starts with aaa or bbb</p>
<p>The output will be</p>
<pre><code>A   B   aaaKP
C   D   bbbZ
</code></pre>
<p>I have a code for the case where there is only one phrase.</p>
<pre><code>phrase, column = 'aaa', 3
fn = lambda l : len(l) &gt;= column and len(l[column-1]) &gt;= len(phrase) and phrase == l[column-1][:len(phrase)]
fp = open('output.txt', 'w')
fp.write(''.join(row for row in open('input.txt') if fn(row.split('\t'))))
fp.close()
</code></pre>
<p>But if there are multiple phrases.. I tried</p>
<pre><code>phrase, column = {'aaa','bbb'}, 3
</code></pre>
<p>but it didn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>In general case you can use regular expressions with branches for quick matching and searching:</p>
<pre><code>import re

phrases = [ 'aaa', 'bbb' ]
column = 3

pattern = re.compile('|'.join(re.escape(i) for i in phrases))
column -= 1

with open('input.txt') as inf, open('output.txt', 'w') as outf:
    for line in inf:
        row = line.split('\t')
        if pattern.match(row[column]):
            outf.write(line)
</code></pre>
<p>The code builds a regular expression from all the possible phrases, using <code>re.escape</code> to escape special characters. The resulting expression in this case is <code>aaa|bbb</code>. <code>pattern.match</code> matches the beginning of the string against the pattern (the match must start from the first character).</p>
<p>However if you <strong>must only match the beginning of string against fixed phrases</strong>, then do note that <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow"><code>startswith</code></a> accepts a tuple, and this is the fastest code:</p>
<pre><code> phrases = [ 'aaa', 'bbb' ]
 column = 3

 phrase_tuple = tuple(phrases)
 column -= 1

 with open('input.txt') as inf, open('output.txt', 'w') as outf:
     for line in inf:
         row = line.split('\t')
         if row[column].startswith(phrase_tuple):
             outf.write(line)
</code></pre>
<p>Also it demonstrates the use of context managers for opening the file, opens the <code>input.txt</code> before <code>output.txt</code> so that if the former does not exist, the latter does not get created. And finally shows that this looks nicest without any generators and lambdas.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use python's re module for this,</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; data = """A   B   aaaKP
... C   D   bbbZ
... E   F   cccLL"""
&gt;&gt;&gt; m = re.findall(r'^(?=\S+\s+\S+\s+(?:aaa|bbb)).*$', data, re.M)
&gt;&gt;&gt; for i in m:
...     print i
... 
A   B   aaaKP
C   D   bbbZ
</code></pre>
<p>Positive lookahead is used to check whether the line contains particular string. The above regex checks for the lines in which the third column starts with <code>aaa</code> or <code>bbb</code> . If yes, then the corresponding lines will be printed.</p>
<p>You could try this regex code also,</p>
<pre><code>&gt;&gt;&gt; s = """A    B       aaaKP
... C   D       bbbZ
... E   F       cccLL
... """
&gt;&gt;&gt; m = re.findall(r'^(?=\S+\t\S+\t(?:aaa|bbb)).*$', s, re.M)
&gt;&gt;&gt; for i in m:
...     print i
... 
A   B   aaaKP
C   D   bbbZ
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Solution:</strong></p>
<pre><code>#!/usr/bin/env python


import csv
from pprint import pprint


def read_phrases(filename, phrases):
    with open(filename, "r") as fd:
        reader = csv.reader(fd, delimiter="\t")
        for row in reader:
            if any((row[2].startswith(phrase) for phrase in phrases)):
                yield row


pprint(list(read_phrases("foo.txt", ["aaa"])))
pprint(list(read_phrases("foo.txt", ["aaa", "bbb"])))
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>$ python foo.py
[['A', 'B', 'aaaKP']]
[['A', 'B', 'aaaKP'], ['C', 'D', 'bbbZ']]
</code></pre>
</div>
<span class="comment-copy">@Antti_Haapala Thank you! The first method works. However, the second method yields an error message "list object has no attribute startswith"</span>
<span class="comment-copy">Fixed, <code>row</code> -&gt; <code>row[column]</code> forgotten to change in code.</span>
<span class="comment-copy">@Antii_Haapala Thank you so much!:)</span>
<span class="comment-copy">@Avinash_Raj Thank you! But this does not seem to import input.txt and then save the output like as in output.txt. How should it be edited for that purpose?</span>
