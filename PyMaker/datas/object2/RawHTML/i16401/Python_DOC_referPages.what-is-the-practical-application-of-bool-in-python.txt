<div class="post-text" itemprop="text">
<p>When it is being used in everyday coding? I am learning Python using <a href="http://openbookproject.net/thinkcs/python/english2e/" rel="nofollow noreferrer">this tutorial</a>. What am I referring to is described <a href="http://openbookproject.net/thinkcs/python/english2e/ch04.html" rel="nofollow noreferrer">here</a> (middle of the page), but I can't get it. I understand the principles of using True and False, but I don't get when (or do) we actually use the <code>bool()</code> function in practice while writing our code. It would help me if you give the everyday, practical example of <code>bool()</code> in code.</p>
</div>
<div class="post-text" itemprop="text">
<p>It lets you convert any Python value to a boolean value.</p>
<p>Sometimes you want to store either <code>True</code> or <code>False</code> depending on another Python object. Instead of:</p>
<pre><code>if python_object:
    result = True
else:
    result = False
</code></pre>
<p>you simply do:</p>
<pre><code>result = bool(python_object)
</code></pre>
<p><em>How</em> Python objects are converted to a boolean value, all depends on their <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="noreferrer">truth value</a>. Generally speaking, <code>None</code>, numeric 0 and empty containers (empty list, dictionary, set, tuple, string, etc.) are all <code>False</code>, the rest is <code>True</code>.</p>
<p>You use it whenever you need an explicit boolean value. Say you are building an object tree, and you want to include a method that returns <code>True</code> if there are children in the tree:</p>
<pre><code>class Tree(object):
    def __init__(self, children):
        self.children

    def has_children(self):
        return bool(self.children)
</code></pre>
<p>Now <code>Tree().has_children()</code> will return <code>True</code> when <code>self.children</code> is not empty, <code>False</code> otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>To understand what bool() does we need to first understand the concept of a boolean.</p>
<p>A boolean variable is represented by either a 0 or 1 in binary in most programming languages. A 1 represents a "True" and a 0 represents a "False"</p>
<p>The number 1 is different from a boolean value of True in some respects. For example, take the following code:</p>
<pre><code>&gt;&gt;&gt; 1 is True
False
</code></pre>
<p>Notice that 1 is different than True according to Python. However:</p>
<pre><code>&gt;&gt;&gt; bool(1) is True
True
</code></pre>
<p>When we use the bool() function here, we convert 1 to a boolean. This conversion is called "casting". Casting 1 to boolean returns the value of "True".</p>
<p>Most objects can be cast to a boolean value. From my experience, you should expect every standard object to evaluate to True unless it is 0, None, False or an empty iterable (for example: "", [], or {}). So as an example:</p>
<pre><code>&gt;&gt;&gt; bool({})
False
&gt;&gt;&gt; bool({"":False})
True
&gt;&gt;&gt; bool(None)
False
&gt;&gt;&gt; bool("")
False
&gt;&gt;&gt; bool("hello")
True
&gt;&gt;&gt; bool(500)
True
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(False)
False
</code></pre>
<p>Lastly, a boolean prints as either "True" or "False"</p>
<pre><code>&gt;&gt;&gt; print bool(1)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>bool</code> exposes the fact that Python allows for boolean conversions to things that you wouldn't typically consider to be True or False.</p>
<p>An example of this is lists. If <code>len(my_list)</code> would be greater than 0, it also treats this as <code>True</code>. If it has no length -- if <code>len()</code> would return 0 -- it is <code>False</code>. This lets you write code like this:</p>
<pre><code>def check_list_for_values(my_list, value):
    return [x for x in my_list if x == value]

your_list = [5, 6, 7, 8, 9, 5, 3, 4, 8]
if check_list_for_values(3, your_list):
    print "got a match"
</code></pre>
<p>If <code>check_list_for_values</code> returns a list that has length greater than 0, then it prints "got a match" because it evaluates to <code>True</code>. If there is no length to the list that would be returned...</p>
<pre><code>your_list = [5, 6, 7, 8, 9, 5, 3, 4, 8]
if check_list_for_values('elephant', your_list):
    print "got a match"
</code></pre>
<p>Then there will be nothing printed, because it evaluates to <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Converts a value to a boolean.</p>
</div>
<span class="comment-copy">Check the docs. <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#bool</a></span>
<span class="comment-copy">It lets you convert any Python value to a boolean value. What part about this is unclear?</span>
<span class="comment-copy">Thanks to <code>bool</code> you can do stuff like <code>if some_list:</code> instead of <code>if len(some_list) &gt; 0:</code> or <code>if foo</code> instead of <code>if foo != None:</code> where it is used implicitly according to <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">there rules</a></span>
<span class="comment-copy">I have already, but I still don't get it. Can you give me an example?</span>
<span class="comment-copy">@MuhamedHuseinbašić Personally, I can't remenber ever using it. It is more used internally, in conditions and such where a boolean is expected, calling an objects <code>__bool__</code> magic method.</span>
<span class="comment-copy">you quote the doc, but you don't link it. moreover, you omit the part where the doc explains what <code>convert (...) to a boolean</code> means and is done. I don't understand the purpose of this answer.</span>
