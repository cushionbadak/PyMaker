<div class="post-text" itemprop="text">
<p>I have a cherrypy server running on my windows box. It handles requests for opening files in their default editors. (requests just contain filepath)</p>
<p>When two users are logged in to same Windows server (using RDC), for an open file request issued by second user, the cherrypy opens the file in first users desktop (since cherrypy server was started by the first user)</p>
<p>Is there a workaround for this? Can I accompany the user information with the os.startfile() call so that the file opens in the second users desktop?</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is: Not easily.</p>
<p>As the docs for <a href="https://docs.python.org/3/library/os.html#os.startfile" rel="nofollow"><code>os.startfile</code></a> imply, it's just calling <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85).aspx" rel="nofollow"><code>ShellExecute</code></a>, which has no such functionality.</p>
<p>What you <em>can</em> do pretty easily is just have each user fire up his own copy of the web server, under his own account, on whatever session he wants. Sure, it means you'll all have to use different port numbers (or get assigned random port numbers at login which you'll then have to display in some way), but that's not so terrible.</p>
<hr/>
<p>First, you're going to need to talk directly to the Win32 API (ideally via <code>pywin32</code>, but if you really want to use <code>ctypes</code> you can).</p>
<p>Next, a user might be connected to your web server but not connected to the RDC server—or, worse, might have three different RDC sessions. So, what does "the second user's desktop" actually mean? If it's acceptable to pick one arbitrarily, and to fail if there are none, that's a reasonable answer. This part is pretty easy: you use the <a href="http://msdn.microsoft.com/en-us/library/aa383464(v=vs.85).aspx" rel="nofollow">Windows Terminal Server API</a> (now part of Remote Desktop Services, but most of the functions still start with WTS) to enumerate the sessions and find the first one whose <code>WTS_SESSION_INFO_1</code> matches your user.</p>
<p>Now, you just need to get an access token or impersonation token for that user within that session so you can call <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682429(v=vs.85).aspx" rel="nofollow"><code>CreateProcessAsUser</code></a> or <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682434(v=vs.85).aspx" rel="nofollow"><code>CreateProcessWithToken</code></a>. (You can't use <code>CreateProcessWithLogon</code>, because that won't be in their RDS session, it'll be in a new session for that user, but connected to your RDS session, which is doubly useless.)</p>
<p>So, how do you get one of those things? Here's where you have the choice between a massive security hole if you're not very careful and don't really know what you're doing, or a different massive security hole if you're not very careful and don't really know what you're doing.</p>
<p>If you don't care about your terminal server box getting hacked, you can run your server (or, hopefully, a minimal helper tool that your server talks to) as <code>LocalSystem</code>, and call <a href="http://msdn.microsoft.com/en-us/library/aa383840(v=vs.85).aspx" rel="nofollow"><code>WTSQueryUserToken</code></a>. This one is actually really easy, and just by reading this sentence your computer is now part of someone's spam botnet.</p>
<p>If you don't care about your users' accounts getting hacked, you can instead pass their credentials through your web server so you can logon and <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx" rel="nofollow"><code>ImpersonateLoggedOnUser</code></a> to get a user token. There are ways to do that without passing the password in plaintext over the web, but that won't matter. Because the next step is to create a new session connected to the user's existing session, and to do that from outside, you need his username and password even though you're already logged in as him. Anyway, having done that, you just run the app inside the new session, and he sees it in his existing session, and everyone lives happily ever after, especially the guy who just checked that your friend uses the same password for PayPal that he does for your server and ran up $17000 worth of charges.</p>
<p>If this hasn't scared you off, create some virtual machines on a LAN that isn't connected to the internet and start playing with this stuff—it's a lot of fun, and you'll learn a lot, and ideally you'll be able to write something that does what you want and ultimately convince yourself sufficiently that you're not leaking tokens anywhere that you're ready to deploy it.</p>
</div>
<span class="comment-copy">First, what you need is not just user information, but <i>session</i> information. A user may have no current RDC session, or 3 different ones; how do you decide which one to open it in?</span>
<span class="comment-copy">I am sending requests from a browser javascript. I do not have access to 'Windows Terminal Server API'</span>
<span class="comment-copy">@Vink: Obviously the JavaScript code doesn't have access to the WTS API, but it doesn't have access to <code>os.startfile</code> either, so I was assuming you were asking how to make your <code>cherrypy</code> <i>server</i> do the work on their behalf. And that server of course has access to anything you want to give it.</span>
