<div class="post-text" itemprop="text">
<p>How can I check if a dictionary (actually dictionary-like object) has all of a given set of <strong>keys</strong> (plural)?</p>
<p>So far, I have used:</p>
<pre><code>d = { 'a': 1, 'b': 2, 'c': 3 }
keys = ('a', 'b')

def has_keys(d, keys):
    for key in keys:
        if not key in d:
            return False
    return True
</code></pre>
<p>Is there a more elegant and Pythonic way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the builtin function <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow" title="all"><code>all()</code></a></p>
<pre><code>&gt;&gt;&gt; d = { 'a': 1, 'b': 2, 'c': 3 }
&gt;&gt;&gt; keys = ('a', 'b')
&gt;&gt;&gt; all(elem in d for elem in keys)
True
&gt;&gt;&gt; keys = ('a', 'b', 'd')
&gt;&gt;&gt; all(elem in d for elem in keys)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may also try like this:</p>
<pre><code>&gt;&gt;&gt; names = {
        'a' : 11,
        'b'  : 10,
        'c' : 14,
        'd': 7
}
&gt;&gt;&gt; keys = ('a', 'b')
&gt;&gt;&gt; set(keys).issubset(names)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just use keyword "in"
ex:
d = { 'a': 1, 'b': 2, 'c': 3 }
if 'd' in d:
    print 'yes'
else:
    print 'no'</p>
</div>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">Looks cool. Do you know how performant this method is? Also, what do you call the list-comprehension type thing in the argument to <code>all</code> -- I've never seen the syntax before.</span>
<span class="comment-copy">That is a generator expression. It generates the elements as they are requested and <code>all</code> short circuits and returns the value as soon as it is known.</span>
<span class="comment-copy">So, the first time it sees a <code>False</code> value i.e. the key is not in <code>d</code>, it short circuits and returns <code>False</code>, pretty much like your function does. The implementation of <code>all</code> is given on the Doc page I referenced.</span>
<span class="comment-copy">Nifty and precise.</span>
<span class="comment-copy">According to <code>timeit</code>, this is the fastest method so far by ~2x. And more expressive IMO as well.</span>
<span class="comment-copy">@rvighne:- Yes thats true!</span>
<span class="comment-copy">@rvighne: Can you post your results? I am not seeing much difference in the timings. This way is faster, but not by a factor of 2.</span>
<span class="comment-copy">@SukritKalra Sorry for bad formatting: <code>python3 -m timeit "{'a', 'b'}.issubset({ 'a': 1, 'b': 2, 'c': 4 })" 1000000 loops, best of 3: 0.754 usec per loop python3 -m timeit "all(elem in { 'a': 1, 'b': 2, 'c': 4 } for elem in {'a', 'b'})" 1000000 loops, best of 3: 1.54 usec per loop</code></span>
<span class="comment-copy">Okay. So, if you increase the number of elements in the dictionary and the number of keys that you want to search for, there is not much difference in time when the keys are a subset of the keys in the dictionary. If they are not and the key that is not present in the dictionary is at the end of the tuple, then my version is a lot slower and if the key is at the start, then my version is a lot faster. Guess that's a tradeoff you need to make according to your data.</span>
<span class="comment-copy">I want to test for <i>multiple</i> keys. This only tests for <i>one</i>.</span>
