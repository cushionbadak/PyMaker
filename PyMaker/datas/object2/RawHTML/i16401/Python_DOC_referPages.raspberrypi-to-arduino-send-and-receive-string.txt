<div class="post-text" itemprop="text">
<p>This is the code I am currently using to send and receive int values from a RaspberryPi to an Arduino using i2C. It works fine for values 0-255, but because of the 1 byte limit, anything larger fails.<br/>
To circumvent this, I'd like to send and receive string values instead, and then convert back to int if necessary.<br/>
What changes would I need to make in the following?<br/>
Here is my RPi Python code</p>
<pre><code>import smbus
import time
# for RPI version 1, use "bus = smbus.SMBus(0)"
bus = smbus.SMBus(1)

# This is the address we setup in the Arduino Program
address = 0x04

def writeNumber(value):
    bus.write_byte(address, value)
    # bus.write_byte_data(address, 0, value)
    return -1

def readNumber():
    number = bus.read_byte(address)
    # number = bus.read_byte_data(address, 1)
    return number

while True:
    try:
        var = int(raw_input("Enter 1 - 9: "))
    except ValueError:
        print "Could you at least give me an actual number?"
        continue

    writeNumber(var)
    print "RPI: Hi Arduino, I sent you ", var
    # sleep one second
    #time.sleep(1)

    number = readNumber()
    print "Arduino: Hey RPI, I received a digit ", number
    print
</code></pre>
<p>And here is my Arduino code </p>
<pre><code>#include &lt;Wire.h&gt;

#define SLAVE_ADDRESS 0x04
int number = 0;
int state = 0;

void setup() {
    pinMode(13, OUTPUT);
    Serial.begin(9600);         // start serial for output
    // initialize i2c as slave
    Wire.begin(SLAVE_ADDRESS);

    // define callbacks for i2c communication
    Wire.onReceive(receiveData);
    Wire.onRequest(sendData);

    Serial.println("Ready!");
}

void loop() {
    delay(100);
}

// callback for received data
void receiveData(int byteCount){

    while(Wire.available()) {
        number = Wire.read();
        if (Wire.available() &gt; 1)  // at least 2 bytes
        {
          number = Wire.read() * 256 + Wire.read();
        }
        Serial.print("data received: ");
        Serial.println(number);
        //sendData();
        if (number == 1){

            if (state == 0){
                digitalWrite(13, HIGH); // set the LED on
                state = 1;
            }
            else{
                digitalWrite(13, LOW); // set the LED off
                state = 0;
            }
         }
     }
}

// callback for sending data
void sendData(){
    Wire.write(number);
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check the following Link:</p>
<p>[<a href="http://www.i2c-bus.org/][1]" rel="nofollow">http://www.i2c-bus.org/][1]</a></p>
<p>When I was sending data back and forward using I2C I was converting the string characters to bytearrays and viceversa.  So since you are always sending bytes.  It will always work since you are sending numbers between 0-255.</p>
<p>Not sure this helps but at least may give you an idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>This problem essentially has two parts: splitting an integer into its bytes and reassembling an integer from bytes. These parts must be replicated on both the Pi and Arduino. I'll address the Pi side first, in Python:</p>
<p>Splitting an integer:</p>
<pre><code>def writeNumber(value):

    # assuming we have an arbitrary size integer passed in value
    for character in str(val): # convert into a string and iterate over it
        bus.write_byte(address, ord(character)) # send each char's ASCII encoding

    return -1
</code></pre>
<p>Reassembling an integer from bytes:</p>
<pre><code>def readNumber():

    # I'm not familiar with the SMbus library, so you'll have to figure out how to
    # tell if any more bytes are available and when a transmission of integer bytes
    # is complete. For now, I'll use the boolean variable "bytes_available" to mean
    # "we are still transmitting a single value, one byte at a time"

    byte_list = []
    while bytes_available:
        # build list of bytes in an integer - assuming bytes are sent in the same
        # order they would be written. Ex: integer '123' is sent as '1', '2', '3'
        byte_list.append(bus.read_byte(address))

    # now recombine the list of bytes into a single string, then convert back into int
    number = int("".join([chr(byte) for byte in byte_list]))
    return number
</code></pre>
<p>Arduino Side, in C</p>
<p>Split an Integer:</p>
<pre class="lang-c prettyprint-override"><code>void sendData(){
    int i = 0;
    String outString = String(number); /* convert integer to string */
    int len = outString.length()+1     /* obtain length of string w/ terminator */
    char ascii_num[len];               /* create character array */

    outString.toCharArray(ascii_num, len); /* copy string to character array */

    for (i=0; i&lt;len); ++i){
        Wire.write(ascii_num[i]);
    }
}
</code></pre>
<p>Reassembling a received Integer:
Note: I'm having some trouble understanding what your other code in this routine is doing, so I'm going to reduce it to just assembling the integer.</p>
<pre class="lang-c prettyprint-override"><code>void receiveData(int byteCount){
    int inChar;
    String inString = "";

    /* As with the Python receive routine, it will be up to you to identify the
       terminating condition for this loop - "bytes_available" means the same thing
       as before */

    while(bytes_available){ 
        inChar = Wire.read();
        inString += char(inChar);
    }

    number = inString.toInt();
}
</code></pre>
<p>I don't have the materials on hand to test this, so it's possible I've gotten the byte order flipped in one routine or another. If you find stuff coming in or out backwards, the easiest place to fix it is in the Python script by using the built-in function <a href="https://docs.python.org/2/library/functions.html#reversed" rel="nofollow">reversed()</a> on the strings or lists.</p>
<p>References (I used some code from the Arduino Examples):<br/>
<a href="http://arduino.cc/en/Reference/StringObject" rel="nofollow">Arduino String objects</a><br/>
<a href="http://arduino.cc/en/Reference/StringConstructor" rel="nofollow">Arduino String Constructors</a><br/>
Python Built-ins <a href="https://docs.python.org/2/library/functions.html#chr" rel="nofollow">chr()</a> and <a href="https://docs.python.org/2/library/functions.html#ord" rel="nofollow">ord()</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could convert the number to a string of digits like you said. But you could also send the raw bytes.</p>
<h2>String of digits</h2>
<p><strong>Advantages</strong></p>
<ul>
<li>Number can have infinite digits. Note that when Arduino reads the number as a string, it is infinite, but you can't convert it all to integer if it overflows the 16-bit range (or 32-bit for Due).</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Variable size, thus requiring more effort in reading.</li>
<li>Waste of bytes, because each decimal digit would be a byte, plus the null-terminator totalizing <code>(digits + 1)</code> size.</li>
<li>Having to use decimal arithmetic (which really is only useful for human counting), note that a "number to string" operation also uses decimal arithmetic.</li>
<li>You can't send/receive negative numbers (unless you send the minus signal, wasting more time and bytes).</li>
</ul>
<h2>Raw bytes</h2>
<p><strong>Advantages</strong></p>
<ul>
<li>Number of bytes sent for each integer is always 4.</li>
<li>You can send/receive negative numbers.</li>
<li>The bitwise arithmetic in C++ for extracting each byte from the number is really fast.</li>
<li>Python already has the <code>struct</code> library which packs/unpacks each byte in a number to a string to send/receive, so you don't need to do the arithmetic like in C++.</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Number has a limited range (signed 32-bit integer in our case, which ranges from <code>-2147483648</code> to <code>2147483647</code>). But it doesn't matter because no Arduino can handle more than 32-bit anyways.</li>
</ul>
<p>So I would use the raw bytes method, which I can provide some untested functions here:</p>
<pre class="lang-py prettyprint-override"><code>import struct

# '&lt;i' stands for litle-endian signed integer

def writeNumber(value):
  strout = struct.pack('&lt;i', value)
  for i in range(4):
    bus.write_byte(address, strout[i])
  return -1

def readNumber():
  strin = ""
  for _ in range(4):
    strin += bus.read_byte(address)
  return struct.unpack('&lt;i', strin)[0]
</code></pre>
<p>And the Arduino part:</p>
<pre class="lang-cpp prettyprint-override"><code>void receiveData(int byteCount)
{
    // Check if we have a 32-bit number (4 bytes) in queue
    while(Wire.available() &gt;= 4)
    {
        number = 0;
        for(int i = 0; i &lt; 32; i += 8)
        {
            // This is merging the bytes into a single integer
            number |= ((int)Wire.read() &lt;&lt; i);
        }

        Serial.print("data received: ");
        Serial.println(number);

        // ...
    }
}

void sendData()
{
    for(int i = 0; i &lt; 32; i += 8)
    {
        // This is extracting each byte from the number
        Wire.write((number &gt;&gt; i) &amp; 0xFF);
    }
}
</code></pre>
<p>I don't have any experience with I2C, but if its queue is a FIFO, then the code should work.</p>
</div>
<span class="comment-copy">Sorry for the (perhaps) unrelated question but why not directly using the serial instead? Are you forced to use i2c?</span>
<span class="comment-copy">yes but I need to send int values LARGER than 255.</span>
<span class="comment-copy">If you are using 'unicode' which it is 2 bytes or more.  You are going to have to shift the values of either the first element or second element.  Or Them and you will get the 16 bit equivalent.  I will add to the question a quick example.</span>
<span class="comment-copy">Actually.  I did a quick search and you should be able to use the following python module to do some of the conversions:  <a href="https://docs.python.org/3/library/binascii.html" rel="nofollow noreferrer">Convert between binary and ASCII</a></span>
