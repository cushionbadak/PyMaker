<div class="post-text" itemprop="text">
<p>I am becoming more and more convinced that the business of file encodings is made as confusing as possible on purpose. I have a problem with reading a file in <code>utf-8</code> encoding that contains  just one line:</p>
<pre><code>“blabla this is some text”
</code></pre>
<p>(note that the quotation marks are some <em>fancy</em> version of the standard quotation marks).</p>
<p>Now, I run this piece of <code>Python</code> code on it:</p>
<pre><code>import fileinput
def charinput(paths):
    with open(paths) as fi:
        for line in fi:
            for char in line:
                yield char
i = charinput('path/to/file.txt')
for item in i:
    print(item)
</code></pre>
<p>with two results:
If i run my python code from command prompt, the result is some strange characters, followed by an error mesage:</p>
<pre><code>ď
»
ż
â
Traceback (most recent call last):
  File "krneki.py", line 11, in &lt;module&gt;
    print(item)
  File "C:\Python34\lib\encodings\cp852.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_map)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u20ac' in position
0: character maps to &lt;undefined&gt;
</code></pre>
<p>I get the idea that the problem comes from the fact that Python tries to read a "wrongly" encoded document, but is there a way to order <code>fileinput.input</code> to read <code>utf-8</code>?</p>
<hr/>
<p>EDIT: Some really weird stuff is happening and I have <strong>NO</strong> idea how any of it works. After saving the same file as before in <code>notepad++</code>, the python code now runs within IDLE and results in the following output (newlines removed):</p>
<pre><code>ď»żâ€śblabla this is some textâ€ť
</code></pre>
<p>while I can get the command prompt to not crash if I first input <code>chcp 65001</code>. Running the file then results in</p>
<pre><code>ÄÂ»Å¼Ã¢â‚¬Å›blabla this is some text Ã¢â‚¬Å¥
</code></pre>
<p>Any ideas? This is a horrible mess, if you ask me, but it is vital I understand it...</p>
</div>
<div class="post-text" itemprop="text">
<h2>Encoding</h2>
<p>Every file is encoded. The byte 0x4C is interpreted as latin capital letter L according to the ASCII encoding, but as less-than sign ('&lt;') according to the EBCDIC encoding. <em>There Ain't No Such Thing As Plain Text.</em></p>
<p>There are single byte character sets like ASCII that use a single byte to encode each symbol, there are double byte character sets like KS X 1001 that use two bytes to encode each symbol, and there are encodings like the popular UTF-8 that use a variable number of bytes per symbol.</p>
<p>UTF-8 has become the most popular encoding for new applications, so I'll give some examples: The <a href="http://www.fileformat.info/info/unicode/char/41/index.htm" rel="noreferrer">Latin Capital Letter A</a> is stored as a single byte: <code>0x41</code>. The <a href="http://www.fileformat.info/info/unicode/char/201c/index.htm" rel="noreferrer">Left Double Quotation Mark</a> (“) is stored as three bytes: <code>0xE2 0x80 0x9C</code>. The emoji <a href="http://www.fileformat.info/info/unicode/char/1F4A9/index.htm" rel="noreferrer">Pile of Poo</a> is stored as four bytes: <code>0xF0 0x9F 0x92 0xA9</code>.</p>
<p>Any program that reads a file and has to interpret the bytes as symbols has to know (or to guess) which encoding was used.</p>
<p>If you are not familiar with Unicode or UTF-8 you might want to read <a href="http://www.joelonsoftware.com/articles/unicode.html" rel="noreferrer">http://www.joelonsoftware.com/articles/unicode.html</a></p>
<h2>Reading Files in Python 3</h2>
<p>Python 3's builtin function <code>open()</code> has an optional keywords argument <code>encoding</code> to support different encodings. To open a UTF-8 encoded file you can write <code>open(filename, encoding="utf-8")</code> and Python will take care of the decoding.</p>
<p>Also, the <code>fileinput</code> module supports encodings via the <code>openhook</code> keyword argument: <code>fileinput.input(filename, openhook=fileinput.hook_encoded("utf-8"))</code>.</p>
<p>If you are not familiar with Python and Unicode or UTF-8 you should read <a href="http://docs.python.org/3/howto/unicode.html" rel="noreferrer">http://docs.python.org/3/howto/unicode.html</a>
I also found some nice tricks in <a href="http://www.chirayuk.com/snippets/python/unicode" rel="noreferrer">http://www.chirayuk.com/snippets/python/unicode</a></p>
<h2>Reading Strings in Python 2</h2>
<p>In Python 2 <code>open()</code> does not know about encodings. Instead you can use the <code>codecs</code> module to specify which encoding should be used: <code>codecs.open(filename, encoding="utf-8")</code></p>
<p>The best source for Python2/Unicode enlightment is <a href="http://docs.python.org/2/howto/unicode.html" rel="noreferrer">http://docs.python.org/2/howto/unicode.html</a></p>
</div>
<span class="comment-copy">Tried changing the code page setting?</span>
<span class="comment-copy">@PadraicCunningham What do you mean by that?</span>
<span class="comment-copy">You are running this from a windows shell?</span>
<span class="comment-copy">@PadraicCunningham From a windows 7 command prompt, yes.</span>
<span class="comment-copy">Not an exact duplicate, but the answer <a href="http://stackoverflow.com/a/11544596/3218018">stackoverflow.com/a/11544596/3218018</a> will be helpfull</span>
