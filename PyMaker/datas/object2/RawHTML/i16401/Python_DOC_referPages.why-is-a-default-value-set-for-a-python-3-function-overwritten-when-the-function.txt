<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1132941/least-astonishment-and-the-mutable-default-argument">“Least Astonishment” and the Mutable Default Argument</a>
<span class="question-originals-answer-count">
                    32 answers
                </span>
</li>
</ul>
</div>
<p>Can someone explain me why, when I call this function multiple times, L is never set to empty by default? But instead the result of any following call is L appended to all results of preceding calls?</p>
<p>The function separates the data into blocks of 7 days, starting with the last date ([::-1]),
calculates the mean of each 7 days and appends the result as a value to
a list. Ignores incomplete blocks</p>
<p>The default value for data is a list of dates in ordinal format.</p>
<pre><code>def separate(data = [i for i in w][::-1],L = []):
    print("separate has been called, data is %s and L is %s" % (data, L))

    if len(data)&lt;7:
        return L

    total = 0
    dates = 0

    for value in data[:7]:
        if w[value] != "None":
            total += float(w[value])
            dates += 1
    L.append(total / dates)

    return separate(data[7:], L)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Taken from the <a href="https://docs.python.org/3/tutorial/controlflow.html?highlight=default#default-argument-values" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes.</p>
<p>[...]</p>
<p>If you don’t want the default to be shared between subsequent calls, you can write the function like this instead:</p>
<pre><code>def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L
</code></pre>
</blockquote>
</div>
<span class="comment-copy">I thought it has something to do with append changing the list value directly, but the definition of L should be only in the function's scope, right?</span>
<span class="comment-copy">What is <code>w</code>?  Is something changing it?</span>
<span class="comment-copy">w is a variable pointing to a section in a config file which holds dates. The default data value is a list comprehension of all of these data reversed. But the value of data remains constant, it's the L that seems to keep it's value.</span>
<span class="comment-copy">Thanks, now I feel a bit stupid. Probably the fact that one of the default values remained constant was what irritated me.</span>
<span class="comment-copy">How should I implement this in a recursive function? Checking for L to be [] would be impossible since L is supposed to hold values during the recursion...</span>
<span class="comment-copy">This example checks if <code>L</code> is <code>None</code>, which is much easier. And in your example, you supply an actual parameter for <code>L</code> so the default value doesn't matter anymore.</span>
<span class="comment-copy">Understand. Basically I will have to use this workaround every time I use mutable default values.... In this case, it would probably also work if I used a tuple instead of a list, right? If anyone else is having the same question, this link also helped and explained it in detail: <a href="http://effbot.org/zone/default-values.htm" rel="nofollow noreferrer">effbot.org/zone/default-values.htm</a></span>
