<div class="post-text" itemprop="text">
<p>First, I know there are a LOT of posts on dictionary sorting but I couldn't find one that was exactly for my case - and I am just not understanding the sorted(...lambda) stuff - so here goes.</p>
<p>Using Python 3.x I have a dictionary like this:</p>
<pre><code>dictUsers[Name] = namedTuple(age, address, email, etc...)
</code></pre>
<p>So as an example my dictionary looks like</p>
<pre><code>[John]="29, 121 bla, some@la.com"
[Jack]="32, 122 ble, some@la.com"
[Rudy]="42, 123 blj, some@la.com"
</code></pre>
<p>And right now for printing I do the following (where response is a dictionary):</p>
<pre><code>for keys, values in response.items():
    print("Name= " + keys)
    print ("   Age= " + values.age)
    print ("   Address= " + values.address)
    print ("   Phone Number= " + values.phone)
</code></pre>
<p>And when the user asks to print out the database of users I want it to print in alphabetical order based on the "name" which is used as the KEY.</p>
<p>I got everything to work - but it isn't sorted - and before starting to sort it manually I thought maybe there was a built-in way to do it ...</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>simple algorithm to sort dictonary keys in alphabetical order, First sort the keys using <code>sorted</code></p>
<pre><code>sortednames=sorted(dictUsers.keys(), key=lambda x:x.lower())
</code></pre>
<p>for each key name retreive the values from the dict</p>
<pre><code>for i in sortednames:
   values=dictUsers[i]
   print("Name= " + i)
   print ("   Age= " + values.age)
   print ("   Address= " + values.address)
   print ("   Phone Number= " + values.phone)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to reiterate @hughdbrown's comment in a separate answer, because I missed it at first and believe it to be the true answer to this question:</p>
<p>You have a dictionary you want to sort alphabetically, say <code>dictio</code>:</p>
<p><code>dictio = {'Beta': 2, 'alpha': 1}</code></p>
<p><a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">sorted()</a> will alphabetically sort the keys for you into a list, given that you convert all keys to lowercase (otherwise uppercase entries will be sorted first, then all lowercase):</p>
<p><code>sortedkeys = sorted(dictio, key=str.lower)</code></p>
<p>By calling the original dictionary again using that list of sorted keys you then can output it alphabetically:</p>
<pre><code>for i in sortedkeys:
    print dictio[i]
</code></pre>
</div>
<span class="comment-copy">r u getting this from database?</span>
<span class="comment-copy">Text file that is being used as a DB</span>
<span class="comment-copy">instead of text file you can use sqlite?so that you can do it in dblevel</span>
<span class="comment-copy">Stuck using a text file sadly ... requirements ...</span>
<span class="comment-copy">odd ... didn't make a difference (output is still un-sorted)</span>
<span class="comment-copy">This is what the debugger shows me for the "sortednames" variable created: list: ['Ahmad', 'John', 'Katya', 'a']. Clearly 'a' should be the first not last right ...</span>
<span class="comment-copy">It doesn't like the work "key" in your sortednames line (Encountered "key" at line 57, column 40. Was expecting one of...)</span>
<span class="comment-copy">And ... I added the comma - and now I get TypeError: descriptor 'lower' of 'str' object needs an argument</span>
<span class="comment-copy">There is no need to say <code>.keys()</code>. And the preferred approach is <code>key=string.lower</code>, I believe, not making a new function with lambda: <code>&gt;&gt;&gt; a = {'a': 1, 'B': 2} &gt;&gt;&gt; print sorted(a) ['B', 'a'] &gt;&gt;&gt; import string &gt;&gt;&gt; print sorted(a, key=string.lower) ['a', 'B']</code></span>
