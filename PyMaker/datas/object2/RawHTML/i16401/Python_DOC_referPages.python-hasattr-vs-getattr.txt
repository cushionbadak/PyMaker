<div class="post-text" itemprop="text">
<p>I have been reading lately some <a href="https://twitter.com/raymondh/status/492554332764520448">tweets</a> and the <a href="https://docs.python.org/3/library/functions.html#hasattr">python documentation</a> about hasattr and it says:</p>
<blockquote>
<p>hasattr(object, name)</p>
<blockquote>
<p>The arguments are an object and a string. The result is True if the string is the name of &gt;&gt; one of the object’s attributes, False if not. <strong>(This is implemented by calling 
    getattr(object, name) and seeing whether it raises an AttributeError or not.)</strong></p>
</blockquote>
</blockquote>
<p>There is a motto in Python that says that is <strong>Easier to ask for forgiveness than permission</strong> where I usually agree.</p>
<p>I tried to do a performance test in this case with a really simple python code:</p>
<pre><code>import timeit
definition="""\
class A(object):
    a = 1
a = A()
"""

stm="""\
hasattr(a, 'a')
"""
print timeit.timeit(stmt=stm, setup=definition, number=10000000)

stm="""\
getattr(a, 'a')
"""
print timeit.timeit(stmt=stm, setup=definition, number=10000000)
</code></pre>
<p>With the results:</p>
<pre><code>$ python test.py
hasattr(a, 'a')
1.26515984535

getattr(a, 'a')
1.32518696785
</code></pre>
<p>I´ve tried also what happens if the attribute doesn´t exists and the differences between getattr and hasattr are bigger. So what I´ve seen so far is that getattr is slower than hasattr, but in the documentation it says that it calls getattr.</p>
<p>I´ve searched the CPython implementation of <a href="https://github.com/python/cpython/blob/5366181f7b45de12b055cbf009ea05f0f00d4c57/Python/bltinmodule.c#L957">hasattr</a> and <a href="https://github.com/python/cpython/blob/5366181f7b45de12b055cbf009ea05f0f00d4c57/Python/bltinmodule.c#L908">getattr</a> and it seems that both call the next function:</p>
<pre><code>v = PyObject_GetAttr(v, name);
</code></pre>
<p>but there is more boilerplate in getattr than in hasattr that probably makes it slower.</p>
<p>Does anyone knows why in the documentation we say that hasattr calls getattr and we seem to encourage the users to use getattr instead of hasattr when it really isn´t due to performance? Is just because it is more pythonic?</p>
<p>Maybe I am doing something wrong in my test :)</p>
<p>Thanks,</p>
<p>Raúl</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation does not encourage, the documentation just states the obvious. The <code>hasattr</code> is implemented as such, and throwing an <code>AttributeError</code> from a property getter can make it look like the attribute does not exist. This is an important detail, and that is why it is explicitly stated in the documentation. Consider for example this code:</p>
<pre><code>class Spam(object):
    sausages = False

    @property
    def eggs(self):
        if self.sausages:
            return 42
        raise AttributeError("No eggs without sausages")

    @property
    def invalid(self):
        return self.foobar


spam = Spam()
print(hasattr(Spam, 'eggs'))

print(hasattr(spam, 'eggs'))

spam.sausages = True
print(hasattr(spam, 'eggs'))

print(hasattr(spam, 'invalid'))
</code></pre>
<p>The result is</p>
<pre><code>True
False
True
False
</code></pre>
<p>That is the <code>Spam</code> class has a property descriptor for <code>eggs</code>, but since the getter raises <code>AttributeError</code> if <code>not self.sausages</code>, then the instance of that class does not "<code>hasattr</code>" <code>eggs</code>.</p>
<p>Other than that, use <code>hasattr</code> only when you <strong>don't need the value</strong>; if you need the value, use <code>getattr</code> with 2 arguments and catch the exception, or 3 arguments, the third being a sensible default value.</p>
<p>The results using <code>getattr()</code> (2.7.9):</p>
<pre><code>&gt;&gt;&gt; spam = Spam()
&gt;&gt;&gt; print(getattr(Spam, 'eggs'))
&lt;property object at 0x01E2A570&gt;
&gt;&gt;&gt; print(getattr(spam, 'eggs'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 7, in eggs
AttributeError: No eggs without sausages
&gt;&gt;&gt; spam.sausages = True
&gt;&gt;&gt; print(getattr(spam, 'eggs'))
42
&gt;&gt;&gt; print(getattr(spam, 'invalid'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 10, in invalid
AttributeError: 'Spam' object has no attribute 'invalid'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Seems that <code>hasattr</code> has a problem with swallowing exceptions (at least <a href="https://twitter.com/Yhg1s/status/492895232078258177" rel="nofollow">in Python 2.7</a>), so probably is better to stay away from it until it's fixed.</p>
<p>Take, for instance, <a href="https://community.plone.org/t/is-hasattr-really-harmful/957/2?u=hvelarde" rel="nofollow">the following code</a>:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; class Foo(object):
...     @property
...     def my_attr(self):
...         raise ValueError('nope, nope, nope')
...
&gt;&gt;&gt; bar = Foo()
&gt;&gt;&gt; bar.my_attr
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in my_attr
ValueError: nope, nope, nope
&gt;&gt;&gt; hasattr(Foo, 'my_attr')
True
&gt;&gt;&gt; hasattr(bar, 'my_attr')
False
&gt;&gt;&gt; getattr(bar, 'my_attr', None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in my_attr
ValueError: nope, nope, nope
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">The difference here isn't performance.  You're talking about like 5 nanoseconds.  You lose thousands of times that by just using Python.  The difference here is which one is correct for what you need to do.</span>
<span class="comment-copy">The performance difference was not the point. I didn´t understood why the comment in the documentation stating that it was implemented calling getattr was there.</span>
<span class="comment-copy">Maybe at one point it did call <code>getattr</code>, and now it doesn't, but no one updated the docs...?  Frankly, though, that's the kind of statement that doesn't belong in API documentation anyway.  The docs should explain what happens, not how it happens, unless the "how" is an essential part of the "what".</span>
