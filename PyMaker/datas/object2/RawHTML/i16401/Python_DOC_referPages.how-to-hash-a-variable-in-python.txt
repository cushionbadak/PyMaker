<div class="post-text" itemprop="text">
<p>This example works fine <a href="https://docs.python.org/3.3/library/hashlib.html" rel="noreferrer">example</a>:</p>
<pre><code>import hashlib
m = hashlib.md5()
m.update(b"Nobody inspects")
r= m.digest()
print(r)
</code></pre>
<p>Now, I want to do the same thing but with a variable: <code>var= "hash me this text, please"</code>. How could I do it following the same logic of the example ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/hashlib.html#hashlib.hash.update" rel="noreferrer"><code>hash.update()</code> method</a> requires <em>bytes</em>, always.</p>
<p>Encode unicode text to bytes first; what you encode <em>to</em> is a application decision, but if all you want to do is fingerprint text for then UTF-8 is a great choice:</p>
<pre><code>m.update(var.encode('utf8')) 
</code></pre>
<p>The exception you get when you don't is quite clear however:</p>
<pre><code>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.md5().update('foo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Unicode-objects must be encoded before hashing
</code></pre>
<p>If you are getting the hash of a <em>file</em>, open the file in binary mode instead:</p>
<pre><code>from functools import partial

hash = hashlib.md5()
with open(filename, 'rb') as binfile:
    for chunk in iter(binfile, partial(binfile.read, 2048)):
        hash.update(chunk)
print hash.hexdigest()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this. Hope it helps.
The variable var has to be utf-8 encoded. If you type in a string i.e. "Donald Duck", the var variable will be b'Donald Duck'. You can then hash the string with hexdigest()</p>
<pre><code>#!/usr/bin/python3
import hashlib
var = input('Input string: ').encode('utf-8')
hashed_var = hashlib.md5(var).hexdigest()
print(hashed_var)
</code></pre>
</div>
<span class="comment-copy">Have you tried <code>m.update(var)</code>?</span>
<span class="comment-copy">@tobias_k: that'll give an error; that's not a bytes value.</span>
<span class="comment-copy">For future reference: not everyone knows that <code>hash.update()</code> needs bytes and that therefor your problem was that you got an exception when you tried to use a <code>str</code> value instead. Next time <i>include that exception</i> in your question.</span>
<span class="comment-copy">Thought so (sounded much too easy) but when I tried it worked and I got the same hashcode... tested on Python 2.7, though, not on 3</span>
<span class="comment-copy">@tobias_k: But that is a crucial difference; Python 3 is built on a clear distinction between Unicode and bytes from the ground up.</span>
<span class="comment-copy">I followed the link you gave me and read about <code>digest()</code> method: can it receive a very long phrase ? I mean, if my variable above is the content of a text file (which is the case already), and my text file contains a lot of text, will <code>digest()</code> accept such a big file content ?</span>
<span class="comment-copy">@begueradj: yes, it can take anything that fits in Python. If you are reading a text file, you can call <code>.digest()</code> multiple times, each time with a next chunk. Loop over the file to get lines, pass each line to <code>.digest()</code>, and when the file is done get the digest.</span>
<span class="comment-copy">@begueradj: or you can open the file in <i>binary</i> mode and you will not have to encode again.</span>
