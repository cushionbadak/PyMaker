<div class="post-text" itemprop="text">
<p>Say I have 2 functions. I want func2 to return func1 UNLESS func1 returns None, in which case func2 returns something else. There are two ways that I could do this, but they both feel slightly wrong.</p>
<p>I could say:</p>
<pre><code>def func1(n):
    if (condition):
        return foo

def func2(n):
    if func1(n) is not None:
        return func1(n)
    else:
        return something_else
</code></pre>
<p>But this feels wrong because I have to call func1(n) twice (and func1(n) is a larger computation). To get around that, I could say:</p>
<pre><code>def func1(n):
    if (condition):
        return foo

def func2(n):
    foo = func1(n)
    if foo is not None:
        return foo
    else:
        return something_else
</code></pre>
<p>but this feels wrong because I don't think I should have to assign a new variable that will never get used again, just to check if func1 returned None.</p>
<p>Is there an easier way to do this where I don't have to call func1 twice and I don't have to create a new variable? If this <em>is</em> the only way, which of the two would you recommend? I currently have it using the second way (Where I set foo to what func1 returned, than return foo unless foo == None)</p>
<p>Also, keep in mind that in my real code, I call several different functions, and I want to return the first one that is not None, this is just a simpler version of code that gets the question across.</p>
</div>
<div class="post-text" itemprop="text">
<p>Giving a name to the result of calling func1 is relatively cheap, so I'd do that, but write the function like this:</p>
<pre><code>def func2(n):
    ret = func1(n)
    return ret if ret is not None else something_else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>None</code> evaluates to <code>False</code>, you could do:</p>
<pre><code>def func2(n):
    return func1(n) or something_else
</code></pre>
<p>It should be noted however that this will cause <code>func2</code> to return <code>something_else</code> if <code>func1(n)</code> returns anything falsey (<code>0</code>, <code>[]</code>, etc.)</p>
<hr/>
<p>For many functions, you could use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a> and some <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expressions</a>:</p>
<pre><code>def myfunc(n):
    vals = (f(n) for f in (func1, func2, func3...))
    return next((v for v in vals if v is not None), something_else)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You definitely don't want to call <code>func1</code> twice - as well as being inefficient, <code>func1</code> may have side effects or produce a slightly different answer depending on the state at the time.</p>
<p>Also, there is no need for the <code>else</code> after a <code>return</code> as the <code>return</code> exited the function.</p>
<p>A revised version of your second option would be:</p>
<pre><code>def func1(n):
    if condition:
        return foo

def func2(n):
    foo = func1(n)
    if foo is None:
        return something_else
    return foo
</code></pre>
<p>Note that this works even if 'func1' returns a falsey value.</p>
<p>Alternatively, noting the content of <code>func1</code>, could you do:</p>
<pre><code>def func1(n):
    return foo

def func2(n):
    foo = func1(n)
    if condition:
        return foo
    return something_else
</code></pre>
<p>It depends on what the real content of <code>func1</code> actually is.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a completely different take from my previous answer, based on your comment to iCodez:</p>
<pre><code>def func1(n):
    return ham

def func2(n):
    return jam

def func3(n):
    return spam

def mainfunc(n):
    for f in (func1, func2, func3):
        foo = f(n)
        if foo is not None:
            return foo
</code></pre>
</div>
<span class="comment-copy">You should use <code>is</code> and <code>is not</code> instead of <code>==</code> and <code>!=</code>, for singletons like <code>None</code>. So say the docs. <a href="http://stackoverflow.com/questions/2209755/python-operation-vs-is-not" title="python operation vs is not">stackoverflow.com/questions/2209755/python-operation-vs-is-not</a></span>
<span class="comment-copy">Please don't use <code>== True</code>; <code>if condition:</code> is enough and less prone to errors (as comparisons chain, you're likely to produce the wrong expression if you added other comparisons).</span>
<span class="comment-copy">Also, if you're checking against a type use <code>isinstance</code></span>
<span class="comment-copy">Okay, keep in mind that this is not exactly my code, but simpler code I made to show what I was trying to do.</span>
<span class="comment-copy">I like this - very readable <i>and</i> concise.</span>
<span class="comment-copy">If you need to return something falsey from <code>func1(n)</code>, do <code>ret = func1(n); return ret if ret is not None else something_else</code></span>
<span class="comment-copy">Hm, maybe I should have specified this in the question, but I have many different functions, and I want to return the first one that isn't None. I guess I could do <code>return func1(n) or func2(n) or func3(n) or something_else</code></span>
<span class="comment-copy">I am aware that the else is unnecessary. Also, your revision is basically what my code is now, I am just wondering if it's absolutely needed to create a variable foo. Also, the content of func1 is far too complicated to add the <code>condition</code> into func2, especially seeing as how the condition of func1 calls other functions, and returns the first of <i>those</i> functions that doesn't return None.</span>
<span class="comment-copy">I can't think of any way to avoid creating the variable foo if the restrictions of iCodez's answer are a problem.</span>
