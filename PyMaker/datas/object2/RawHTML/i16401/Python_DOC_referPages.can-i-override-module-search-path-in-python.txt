<div class="post-text" itemprop="text">
<p>To understand the python module search path, I was trying to create a module by a name which is already available in the standard library. I have created a file 'math.py' in my current folder and it has a function definition 'factorial' which takes one argument. Now I want that when I import math module and invoke 'factorial' function, then my function is invoked and not the standard library one. All documents say that the search path held in 'sys.path' defines the order of search and it gives highest priority to the current directory.</p>
<p>But when I run my code I find that my math module is not getting loaded and my factorial function is not called. Python continues to load and execute the standard library definitions.</p>
<p>Where am I going wrong</p>
<p>Here is the file mymain.py</p>
<pre><code>print "running...............&gt;&gt;"
import math
print math.factorial(5)
</code></pre>
<p>This is the file math.py (in the same directory as mymain.py)</p>
<pre><code>print "math loaded"
def factorial(i) :
    return i+10
</code></pre>
<p>And now I execute the command 'python mymain.py'</p>
</div>
<div class="post-text" itemprop="text">
<p>I used this technique to mask / override functionality in a .pyc file from a library. I used the following statement;</p>
<pre><code>sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
</code></pre>
<p>Which allowed the module resolution mechanism to find the module in the parent folder before the one in the library. The modules that I did not override are subsequently found in the library location.</p>
<p>This statement must be after <code>import os</code> but before all the library module import statements.</p>
</div>
<span class="comment-copy">This is quite surprising considering the documentation on <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">sys.path</a> and <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">the order of searching for modules</a>. Can you provide a code example?</span>
<span class="comment-copy">I have edited my question to contain the code sample</span>
<span class="comment-copy">I think the search path applies only to non-builtin modules, but I'm not sure. Why do you want to overwrite a builtin Python module anyway? That sounds like it's just asking for trouble.</span>
<span class="comment-copy">No I was just trying to verify the statements related to search path. I am a trainer and during trainings, people do come up with such queries more out of curiosity. So I am also eager to know where am I making a wrong interpretation</span>
<span class="comment-copy">Works here - the way you described your setup, the custom math module shadows the standard library one.</span>
