<div class="post-text" itemprop="text">
<p>When I try to create this</p>
<pre><code>self.cmds = {
             'help' : self.cmdsHelp,
             'write-start' : self.startWriter,
             'write' : self.writeTo,
             'read-start' : self.startReader,
             'read' : self.readFrom
            }
</code></pre>
<p>with the built-in <code>dict()</code> function... i.e.</p>
<pre><code>self.cmds = dict(
                 help = self.cmdsHelp,
                 write-start = self.startWriter,
                 write = self.writeTo,
                 read-start = self.startReader,
                 read = self.readFrom
                )
</code></pre>
<p>... I get this error:</p>
<pre><code>    write-start = self.startWriter,
                            ^
SyntaxError: keyword can't be an expression
</code></pre>
<p>The dictionary with the curly brackets (<code>{}</code>) -- whatever special name that is -- works, but I cannot fathom why the "newer version" (the <code>dict()</code> form) does not work. Is there something that I am missing, or do you just have to use the curly braces?</p>
<h3>For clarity:</h3>
<p>Each value in the dictionary is a function (and yes I did remove <code>self.</code>, and I also tried to do both <code>self.function()</code> and <code>function()</code> so that when I called it I didn't have to do <code>self.cmds[&lt;input&gt;]()</code> but could rather do <code>self.cmds[&lt;input&gt;]</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Keyword arguments <strong>must</strong> be <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow">valid python identifiers</a>. You cannot use <code>-</code> in valid identifiers (you are trying to subtract two identifiers instead). <code>dict()</code> is just a callable, and keyword arguments passed to it are no exception.</p>
<p>Use the <code>{}</code> literal dict syntax instead:</p>
<pre><code>self.cmds = {
    'help': self.cmdsHelp,
    'write-start': self.startWriter,
    'write': self.writeTo,
    'read-start': self.startReader,
    'read': self.readFrom,
}
</code></pre>
<p>because then you can use any valid immutable &amp; hashable value as keys.</p>
<p>Alternatively, use valid identifiers; replace <code>-</code> with <code>_</code>, a character that <em>is</em> allowed in indentifiers:</p>
<pre><code>self.cmds = dict(
    help=self.cmdsHelp,
    write_start=self.startWriter,
    write=self.writeTo,
    read_start=self.startReader,
    read=self.readFrom,
)
</code></pre>
<p>Any other alternatives get ugly real fast; you could use the dict literal syntax to produce a <code>**kwargs</code> double-splat keyword argument mapping:</p>
<pre><code>self.cmds = dict(
    help=self.cmdsHelp,
    write=self.writeTo,
    read=self.readFrom,
    **{
        'read-start': self.startReader,
        'write-start': self.startWriter,
    }
)
</code></pre>
<p>but that's not any more readable, is it.</p>
<p>You can set those peskey non-identifier keys after the fact:</p>
<pre><code>self.cmds = dict(
    help=self.cmdsHelp,
    write=self.writeTo,
    read=self.readFrom,
)
self.cmds['read-start'] = self.startReader
self.cmds['write-start'] = self.startWriter
</code></pre>
<p>but that's more ugly still.</p>
<p>Note that dictionary displays (the <a href="https://docs.python.org/2/reference/expressions.html#dictionary-displays" rel="nofollow">official term for the syntax</a>) are <em>faster</em> for the interpreter to process than are <code>dict()</code> calls, as fewer bytecode instructions are used to build one and no function call is involved.</p>
</div>
<span class="comment-copy">While <code>dict(keyword=value)</code> may be "newer", you're still talking about Python 2.3, which is pretty ancient. And what makes you think it's in any way better? It compiles to larger code, and be slower, and, worse of all, it's more limited (as you've seen here). If it makes your code more readable somewhere, sure, use it, but there is no reason to avoid dict displays.</span>
<span class="comment-copy">Oh, the thing with the curly braces is officially called a <a href="https://docs.python.org/3/reference/expressions.html#dict" rel="nofollow noreferrer">"dictionary display"</a>, but as of 2.7 and 3.0 a dict comprehension is <i>also</i> called a dictionary display, which can be confusing, so a lot of people still say "dictionary literal" (the name in early 2.x) in place of "dictionary display that isn't a comprehension" or "dictionary display with comma-separated key-datum pairs" or whatever.</span>
<span class="comment-copy">I think you forgot some colons.</span>
<span class="comment-copy">@jwodder: already fixed.</span>
<span class="comment-copy">So, There isn't a way to do it with <code>dict()</code>, then?</span>
<span class="comment-copy">... if I want to use the <code>-</code>?</span>
<span class="comment-copy">@Dylan: Well, sure, there's a way to do it with <code>dict</code>: just pass it an iterable of key-value tuples instead of passing it a bunch of keyword arguments. But that's going to look a lot uglier than just writing a dict literal, so I'm not sure why you'd want toâ€¦</span>
