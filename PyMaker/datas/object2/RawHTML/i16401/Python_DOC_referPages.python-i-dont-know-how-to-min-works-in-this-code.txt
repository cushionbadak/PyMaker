<div class="post-text" itemprop="text">
<p>My teacher gave me this code:</p>
<pre><code>def n_o_c(Q,v):  
    M=[None]*(Q+1)  
    m={}  
    M[0]=0  
    for q in xrange(1,Q+1):  
        M[q]=min(M[q-a]+1 for a in v if q-a&gt;=0)    
    return M[Q],m  

print n_o_c(18,[1,2,5])  
</code></pre>
<p>1st I explain the script, It's a supposed coin machine and I have to know how much coins I need for pay Q quantity having v coins(we have to do less coins as posible IE for 18 3x5 coin 1x2 coin and 1x1 coin)</p>
<p>I dont understand what does that M[q] line, I've tried to print M and the result I had was every number from 1 to 18 how many coins it needs to do that number. 
M=[0,1,1,2,2,3,2,2,3,3,2,3,3,4,4,3,4,4,5]
q=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]</p>
<p>Can someone explain me how that min works?</p>
<p>I've already done it (I know its not the good way to solve the exercise but I dont know a better way for). Solved:</p>
<pre><code>def n_o_c(Q,v):  
    M=[None]*(Q+1)  
    m={}  
    M[0]=0  
    for q in xrange(1,Q+1):  
        M[q]=min(M[q-a]+1 for a in v if q-a&gt;=0)
    monedas=0
    total=Q
    m=[] # did this to change dictionary to array
    while(monedas&lt;M[Q]):
        for a in v[::-1]:
            if total-a &gt;= 0:
                total = total-a
                monedas = monedas +1
                m.append(a)
                break #I forget this break
    return M[Q],m  

print n_o_c(18,[1,2,5])  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow"><code>min</code></a> function is the easy part:</p>
<blockquote>
<p>Return the smallest item in an iterable</p>
</blockquote>
<p>The tricky bit is, what's with that iterable?</p>
<pre><code>M[q]=min(M[q-a]+1 for a in v if q-a&gt;=0)    
</code></pre>
<p>That <code>(M[q-a]+1 for a in v if q-a&gt;=0)</code> is called a generator expression; more generally, it's a type of comprehension.</p>
<p>Start at <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List Comprehensions</a> in the official tutorial to learn how comprehensions in general work, then <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">Iterators</a> and the following two sections (Generators and Generator Expressions) to learn how generator expressions are different.*</p>
<p>But I can summarize it here, at least enough to get you started.</p>
<p>First, a list comprehension:</p>
<pre><code>[M[q-a]+1 for a in v if q-a&gt;=0]
</code></pre>
<p>What this means is that you want to build a list, exactly as if you'd unrolled it into a loop like this:</p>
<pre><code>value = []
for a in v:
    if q-a&gt;=0:
        value.append(M[q-a]+1)
M[q] = min(value)
</code></pre>
<p>Or, more intuitively, try reading it aloud: a list of every <code>M[q-a]+1</code> for each <code>a</code> in <code>v</code> if <code>q-a&gt;=0</code> makes sense as an English sentence, and means exactly the same thing as the Python. (If you have a math background, you might want to think of it in terms of set displays instead, but I'll assume you don't.)</p>
<p>A generator expression does the same thing, except that instead of building a list, it creates the values on demand as you iterate over it. You can think of this as sort of a magic list that doesn't waste memory or time for now. To spell it in Python, just turn the square brackets <code>[]</code> into parentheses <code>()</code> (which you can leave off in this case, because there are already parentheses from the <code>min</code> call). To read it aloud, just leave of the "a list of" part.</p>
<hr/>
<p><sub>* And once you get that, if you want to learn more, take a look at the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a> module, read <a href="http://www.dabeaz.com/generators-uk/" rel="nofollow">Generator Tricks for System Programmers</a> by David Beazley and google for Greg Ewing's presentations on generators.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Why is m not being used in your teacher's code ? </p>
<p>Here is a solution:
Sort the v list and divide by it by each dimension to get num coins and continue with change remaining.</p>
<pre><code>def n_o_c(Q,v):   
   m = {}

   for dimension in sorted(v, reverse= True):
       num_coins = int(Q/dimension)
       ## if Q is not divisible by the dimension, go to the next dimension
       if num_coins != 0:
       ## if Q is divisible, store num_coins in the dictionary
          m[dimension] = num_coins
       ## Get change remaining by modulo function and store it as remaining Q that needs to be broken down
       Q = Q % dimension
   return m

print n_o_c(18,[1,2,5])
</code></pre>
<p>Should print:
{1: 1, 2: 1, 5: 3}</p>
</div>
<span class="comment-copy">what are <code>(5, [5, 2, 1, 5, 2, 1])</code> in the result?</span>
<span class="comment-copy">solved, i forgot to put break for "for"</span>
<span class="comment-copy">so it was not working? Why did you say you had already done it?</span>
<span class="comment-copy">now its working check it</span>
<span class="comment-copy">I know, but you said in your question it was already solved so that was slightly confusing</span>
<span class="comment-copy">Thanks a lot, i have much to learn and read I understand it better but i'm going to read that links you have me too.  <i>hugs</i></span>
