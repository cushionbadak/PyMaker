<div class="post-text" itemprop="text">
<p>The <code>unittest.expectedFailure</code> decorator seems to have changed behaviour between Python 3.3 and 3.4 but I could not find any documentation about that change.
The issue is that the following leads to a test failure with Python 3.4.1 but does not with Python 2.7 or 3.3 (all on a debian system):</p>
<pre><code>import unittest

@unittest.expectedFailure
class TestA(unittest.TestCase):
    def test_me(self):
        raise Exception('no')

unittest.main()
</code></pre>
<p>Note that this is just a short example script demonstrating the issue. In the actual test suite I have I can't simply check for an exception but rely on expectedFailure to make certain tests pass under certain circumstances.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>It was a regression bug</strong> <a href="https://bugs.python.org/issue21112" rel="nofollow noreferrer">#21112: Python 3.4 regression: unittest.expectedFailure no longer works on TestCase subclasses</a> in Python <strong>3.4.0 to 3.4.3</strong>, because unittest has been hard refactored in 3.4, fixed in 3.4.4 (v3.4.4rc1 by commit <a href="https://github.com/python/cpython/commit/ed599b7c84ee" rel="nofollow noreferrer">ed599b7</a>)</p>
</div>
<span class="comment-copy">FYI, applying the decorator on a test method works.</span>
<span class="comment-copy">Documentations in all three versions explicitly speak about marking a "test" with this decorator, not a test case. Seems that you've been relying on some undocumented accidental bug/feature. Also, failing is not the same as raising an exception. Refer to this question: <a href="http://stackoverflow.com/questions/8493450/expectedfailure-is-being-counted-as-an-error-instead-of-as-passed" title="expectedfailure is being counted as an error instead of as passed">stackoverflow.com/questions/8493450/…</a></span>
<span class="comment-copy">@BaroszKP: <a href="https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures" rel="nofollow noreferrer">docs.python.org/3/library/…</a> explicitly mentions skipping whole classes and lists <code>expectedFailure</code> with the other decorators for skipping. The code I'm testing (currently) throws an exception at C++ level which is passed down via boost and I consider this a failure.</span>
<span class="comment-copy">@ozbob No, only skipping is mentioned in the context of whole test cases. The only part about <code>expectedFailure</code>: "In addition, it supports marking <b>a test</b> as a “expected failure,” ..." (emphasis mine). Further code examples also show only <code>skip</code> in test case  and test context, and <code>expectedFailure</code> only in a single test context.</span>
<span class="comment-copy">@ozbob No, on that page it says: "...and even whole classes of tests" for description of skipping. Also code examples with <code>skip</code> decorators cover test classes, not only test methods (see the third yellow block). I also don't see a particular reason for this difference, yet that's what the docs say.</span>
