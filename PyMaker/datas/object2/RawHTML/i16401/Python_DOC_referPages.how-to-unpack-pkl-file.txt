<div class="post-text" itemprop="text">
<p>I have a pkl file from MNIST dataset, which consists of handwritten digit images.</p>
<p>I'd like to take a look at each of those digit images, so I need to unpack the pkl file, except I can't find out how.</p>
<p>Is there a way to unpack/unzip pkl file?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Generally</h2>
<p>Your <code>pkl</code> file is, in fact, a serialized <code>pickle</code> file, which means it has been dumped using Python's <a href="https://docs.python.org/3/library/pickle.html" rel="noreferrer"><code>pickle</code></a> module.</p>
<p>To un-pickle the data you can:</p>
<pre><code>import pickle


with open('serialized.pkl', 'rb') as f:
    data = pickle.load(f)
</code></pre>
<h2>For the MNIST data set</h2>
<p>Note <code>gzip</code> is only needed if the file is compressed:</p>
<pre><code>import gzip
import pickle


with gzip.open('mnist.pkl.gz', 'rb') as f:
    train_set, valid_set, test_set = pickle.load(f)
</code></pre>
<p>Where each set can be further divided (i.e. for the training set):</p>
<pre><code>train_x, train_y = train_set
</code></pre>
<p>Those would be the inputs (digits) and outputs (labels) of your sets.</p>
<p>If you want to display the digits:</p>
<pre><code>import matplotlib.cm as cm
import matplotlib.pyplot as plt


plt.imshow(train_x[0].reshape((28, 28)), cmap=cm.Greys_r)
plt.show()
</code></pre>
<p><img alt="mnist_digit" src="https://i.stack.imgur.com/c4JXq.png"/></p>
<p>The other alternative would be to look at the original data:</p>
<p><a href="http://yann.lecun.com/exdb/mnist/" rel="noreferrer">http://yann.lecun.com/exdb/mnist/</a></p>
<p>But that will be harder, as you'll need to create a program to read the binary data in those files. So I recommend you to use Python, and load the data with <code>pickle</code>. As you've seen, it's very easy. ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Handy one-liner</strong></p>
<pre><code>pkl() (
  python -c 'import pickle,sys;d=pickle.load(open(sys.argv[1],"rb"));print(d)' "$1"
)
pkl my.pkl
</code></pre>
<p>Will print <code>__str__</code> for the pickled object.</p>
<p>The generic problem of visualizing an object is of course undefined, so if <code>__str__</code> is not enough, you will need a custom script.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case you want to work with the original MNIST files, here is how you can deserialize them. </p>
<p>If you haven't downloaded the files yet, do that first by running the following in the terminal:</p>
<pre><code>wget http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
wget http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
wget http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
wget http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
</code></pre>
<p>Then save the following as <code>deserialize.py</code> and run it.</p>
<pre><code>import numpy as np
import gzip

IMG_DIM = 28

def decode_image_file(fname):
    result = []
    n_bytes_per_img = IMG_DIM*IMG_DIM

    with gzip.open(fname, 'rb') as f:
        bytes_ = f.read()
        data = bytes_[16:]

        if len(data) % n_bytes_per_img != 0:
            raise Exception('Something wrong with the file')

        result = np.frombuffer(data, dtype=np.uint8).reshape(
            len(bytes_)//n_bytes_per_img, n_bytes_per_img)

    return result

def decode_label_file(fname):
    result = []

    with gzip.open(fname, 'rb') as f:
        bytes_ = f.read()
        data = bytes_[8:]

        result = np.frombuffer(data, dtype=np.uint8)

    return result

train_images = decode_image_file('train-images-idx3-ubyte.gz')
train_labels = decode_label_file('train-labels-idx1-ubyte.gz')

test_images = decode_image_file('t10k-images-idx3-ubyte.gz')
test_labels = decode_label_file('t10k-labels-idx1-ubyte.gz')
</code></pre>
<p>The script doesn't normalize the pixel values like in the pickled file. To do that, all you have to do is</p>
<pre><code>train_images = train_images/255
test_images = test_images/255
</code></pre>
</div>
<span class="comment-copy">Is there also a way to make a pkl file out of the image files that I have?</span>
<span class="comment-copy">Could be plain-old pickled, right?  As opposed to cPickled?  I'm not sure about the MNIST dataset, but for <code>pkl</code> files in general, <code>pickle.load</code> works for unpacking -- though I guess it performs less well than <code>cPickle.load</code>.  For <code>pkl</code> files on the smaller side, the performance difference is not noticeable.</span>
