<div class="post-text" itemprop="text">
<p>Trying to specify my capture group, but it keeps capturing way too much.</p>
<p>Line:</p>
<pre><code>"This is something of [Interest: stuff]. blah blah blah"
</code></pre>
<p>Regex:</p>
<pre><code>patt = re.compile('\[Interest:(.){1,100}\]')
</code></pre>
<p>What is output:</p>
<pre><code>[Interest: stuff]
</code></pre>
<p>What I want output:</p>
<pre><code>stuff
</code></pre>
<p>How can I output just what I want to capture, and not the entire pattern?</p>
<p>I've also tried this:</p>
<pre><code>re.compile(r'\[Interest:(?P&lt;interest&gt;.+)\]')
</code></pre>
<p>That outputs:</p>
<pre><code>stuff]. blah blah blah
</code></pre>
<p>I feel like im pretty close. Just need to figure out how to stop the output once regex hits the ]</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>.</code> character matches everything except for newlines, including <code>]</code>.  So, <code>(.){1,100}</code> is telling Python to get everything it can up to <code>100</code> characters long.  This includes the end of the string.</p>
<p>Instead, I would use this pattern:</p>
<pre><code>\[Interest:\s([^\]]*)\]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = "This is something of [Interest: stuff]. blah blah blah"
&gt;&gt;&gt; re.search("\[Interest:\s([^\]]*)\]", string).group(1)
'stuff'
&gt;&gt;&gt;
</code></pre>
<p>Below is an explanation of what it matches:</p>
<pre><code>\[         # [
Interest:  # Interest:
\s         # A space
(          # The start of a capture group
[^\]]*     # Zero or more characters that are not ]
)          # The close of the capture group
\]         # ]
</code></pre>
<p>For more information, see <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">Regular Expression Syntax</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Get the matched group from index 1 using lazy way.</p>
<pre><code>\[Interest: (.*?)\]
</code></pre>
<p><a href="http://regex101.com/r/sR4oP7/1" rel="nofollow">DEMO</a></p>
<p>sample code:</p>
<pre><code>import re
p = re.compile(ur'\[Interest: (.*?)\]', re.IGNORECASE)
test_str = u"This is something of [Interest: stuff]. blah blah blah"

re.match(p, test_str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>one issue with you regex: <code>\[Interest:(.){1,100}\]</code> ,   is that <code>(.){1,100}</code> will <strong>allow 1 to 100</strong> of <code>.</code> BUT it'll <strong>capture just one <code>.</code></strong>, the last <code>.</code>, because the <code>(</code> <code>)</code> are enclosing only <code>.</code> (which refers to a single char). therefore the <em>captured group</em> will contain the <code>f</code> of <code>stuff</code>.</p>
<p>instead, <code>\[Interest: (.{1,100})\]</code> will return <code>stuff</code>.</p>
<p>as for the output being <code>[Interest: stuff]</code>.. that is a grouping issue.<br/>
Try <code>iCodez</code>'s code <a href="http://www.compileonline.com/execute_python_online.php" rel="nofollow">HERE</a>:  </p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = "This is something of [Interest: stuff]. blah blah blah"
&gt;&gt;&gt; re.search("\[Interest:\s([^\]]*?)\]", string).group(1)
</code></pre>
<p>it prints <code>stuff</code>.  </p>
<p>replace <code>.group(1)</code> with <code>.group(0)</code> and it prints <code>[Interest: stuff]</code>.</p>
</div>
<span class="comment-copy">Side note, <code>\[Interest:(.{1,100}?)\]</code> or <code>\[Interest:([^\]]{1,100})\]</code> are probably better alternatives..I don't have any knowledge of accessing capture groups in Python.</span>
<span class="comment-copy">Thats perfect. Thank you for the answer and the explanation!</span>
<span class="comment-copy">Err the 'most important' part is actually irrelevant if you use a negated class and is instead impeding the processing time of the regex. You should either use a lazy quantifier on a wildcard that matches everything, or a greedy quantifier on a negated class in such instances.</span>
<span class="comment-copy">+1 for nice explanation @Sugitime you said it's perfect but it looks like you forgot to click the checkmark. :)</span>
<span class="comment-copy">Yup your right. iCodez answered so fast, I had to wait 6 minutes to click the checkbox and I guess it slipped my mind. Thank you for the reminder, and thanks again iCodez for the answer!</span>
