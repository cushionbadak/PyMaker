<div class="post-text" itemprop="text">
<p>I'm writing a program that parses 10 websites, locates data files, saves the files, and then parses them to make data that can be readily used in the NumPy library. There are <strong>tons</strong> of errors this file encounters through bad links, poorly formed XML, missing entries, and other things I've yet to categorize. I initially made this program to handle errors like this:</p>
<pre><code>try:
    do_stuff()
except:
    pass
</code></pre>
<p>But now I want to log errors:</p>
<pre><code>try:
    do_stuff()
except Exception, err:
    print Exception, err
</code></pre>
<p>Note this is printing to a log file for later review. This usually prints very useless data. What I want is to print the exact same lines printed when the error triggers without the try-except intercepting the exception, but I don't want it to halt my program since it is nested in a series of for loops that I would like to see to completion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some other answer have already pointed out the <a href="http://docs.python.org/3/library/traceback.html">traceback</a> module.</p>
<p>Please notice that with <code>print_exc</code>, in some corner cases, you will not obtain what you would expect. In Python 2.x:</p>
<pre><code>import traceback

try:
    raise TypeError("Oups!")
except Exception, err:
    try:
        raise TypeError("Again !?!")
    except:
        pass

    traceback.print_exc()
</code></pre>
<p>...will display the traceback of the <em>last</em> exception:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "e.py", line 7, in &lt;module&gt;
    raise TypeError("Again !?!")
TypeError: Again !?!
</code></pre>
<p><strong>If you really need to access the original <em>traceback</em></strong> one solution is to cache the <em>exception infos</em> as returned from <a href="https://docs.python.org/2/library/sys.html#sys.exc_info"><code>exc_info</code></a> in a local variable and display it using <a href="https://docs.python.org/2/library/traceback.html#traceback.print_exception"><code>print_exception</code></a>:</p>
<pre><code>import traceback
import sys

try:
    raise TypeError("Oups!")
except Exception, err:
    try:
        exc_info = sys.exc_info()

        # do you usefull stuff here
        # (potentially raising an exception)
        try:
            raise TypeError("Again !?!")
        except:
            pass
        # end of useful stuff


    finally:
        # Display the *original* exception
        traceback.print_exception(*exc_info)
        del exc_info
</code></pre>
<p>Producing:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "t.py", line 6, in &lt;module&gt;
    raise TypeError("Oups!")
TypeError: Oups!
</code></pre>
<p>Few pitfalls with this though:</p>
<ul>
<li><p>From the doc of <a href="https://docs.python.org/2/library/sys.html#sys.exc_info"><code>sys_info</code></a>:</p>
<blockquote>
<p>Assigning the traceback return value to a local variable in a function that is handling an exception will cause a <strong>circular reference</strong>. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. [...] <strong>If you do need the traceback, make sure to delete it after use</strong> (best done with a try ... finally statement)</p>
</blockquote></li>
<li><p>but, from the same doc:</p>
<blockquote>
<p><strong>Beginning with Python 2.2, such cycles are automatically reclaimed</strong> when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.</p>
</blockquote></li>
</ul>
<hr/>
<p>On the other hand, by allowing you to access the traceback <em>associated with</em> an exception, Python 3 produce a less surprising result:</p>
<pre><code>import traceback

try:
    raise TypeError("Oups!")
except Exception as err:
    try:
        raise TypeError("Again !?!")
    except:
        pass

    traceback.print_tb(err.__traceback__)
</code></pre>
<p>... will display:</p>
<pre class="lang-none prettyprint-override"><code>  File "e3.py", line 4, in &lt;module&gt;
    raise TypeError("Oups!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/traceback.html#traceback.format_exc" rel="noreferrer"><code>traceback.format_exc()</code></a> or <a href="http://docs.python.org/3/library/sys.html#sys.exc_info" rel="noreferrer"><code>sys.exc_info()</code></a> will yield more info if that's what you want.</p>
<pre><code>import traceback
import sys

try:
    do_stuff()
except Exception:
    print(traceback.format_exc())
    # or
    print(sys.exc_info()[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're debugging and just want to see the current stack trace, you can simply call:</p>
<p><a href="https://docs.python.org/3/library/traceback.html#traceback.print_stack"><code>traceback.print_stack()</code></a></p>
<p>There's no need to manually raise an exception just to catch it again.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>How to print the full traceback without halting the program?</h1>
</blockquote>
<p>When you don't want to halt your program on an error, you need to handle that error with a try/except:</p>
<pre><code>try:
    do_something_that_might_error()
except Exception as error:
    handle_the_error(error)
</code></pre>
<p>To extract the full traceback, we'll use the <code>traceback</code> module from the standard library:</p>
<pre><code>import traceback
</code></pre>
<p>And to create a decently complicated stacktrace to demonstrate that we get the full stacktrace:</p>
<pre><code>def raise_error():
    raise RuntimeError('something bad happened!')

def do_something_that_might_error():
    raise_error()
</code></pre>
<h1>Printing</h1>
<p>To <em>print</em> the full traceback, use the <code>traceback.print_exc</code> method:</p>
<pre><code>try:
    do_something_that_might_error()
except Exception as error:
    traceback.print_exc()
</code></pre>
<p>Which prints:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in do_something_that_might_error
  File "&lt;stdin&gt;", line 2, in raise_error
RuntimeError: something bad happened!
</code></pre>
<h1>Better than printing, logging:</h1>
<p>However, a best practice is to have a logger set up for your module. It will know the name of the module and be able to change levels (among other attributes, such as handlers)</p>
<pre><code>import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
</code></pre>
<p>In which case, you'll want the <code>logger.exception</code> function instead:</p>
<pre><code>try:
    do_something_that_might_error()
except Exception as error:
    logger.exception(error)
</code></pre>
<p>Which logs:</p>
<pre><code>ERROR:__main__:something bad happened!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in do_something_that_might_error
  File "&lt;stdin&gt;", line 2, in raise_error
RuntimeError: something bad happened!
</code></pre>
<p>Or perhaps you just want the string, in which case, you'll want the <code>traceback.format_exc</code> function instead:</p>
<pre><code>try:
    do_something_that_might_error()
except Exception as error:
    logger.debug(traceback.format_exc())
</code></pre>
<p>Which logs:</p>
<pre><code>DEBUG:__main__:Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in do_something_that_might_error
  File "&lt;stdin&gt;", line 2, in raise_error
RuntimeError: something bad happened!
</code></pre>
<h1>Conclusion</h1>
<p>And for all three options, we see we get the same output as when we have an error:</p>
<pre><code>&gt;&gt;&gt; do_something_that_might_error()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in do_something_that_might_error
  File "&lt;stdin&gt;", line 2, in raise_error
RuntimeError: something bad happened!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to @Aaron Hall's answer, if you are logging, but don't want to use <code>logging.exception()</code> (since it logs at the ERROR level), you can use a lower level and pass <code>exc_info=True</code>. e.g.</p>
<pre><code>try:
    do_something_that_might_error()
except Exception:
    logger.info('General exception noted.', exc_info=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will need to put the try/except inside the most innerloop where the error may occur, i.e.</p>
<pre><code>for i in something:
    for j in somethingelse:
        for k in whatever:
            try:
                something_complex(i, j, k)
            except Exception, e:
                print e
        try:
            something_less_complex(i, j)
        except Exception, e:
            print e
</code></pre>
<p>... and so on</p>
<p>In other words, you will need to wrap statements that may fail in try/except as specific as possible, in the most inner-loop as possible.   </p>
</div>
<div class="post-text" itemprop="text">
<p>To get the <em>precise</em> stack trace, as a string, that <em>would</em> have been raised if no try/except were there to step over it, simply place this in the except block that catches the offending exception.</p>
<pre><code>desired_trace = traceback.format_exc(sys.exc_info())
</code></pre>
<p>Here's how to use it (assuming <code>flaky_func</code> is defined, and <code>log</code> calls your favorite logging system): </p>
<pre><code>import traceback
import sys

try:
    flaky_func()
except KeyboardInterrupt:
    raise
except Exception:
    desired_trace = traceback.format_exc(sys.exc_info())
    log(desired_trace)
</code></pre>
<p>It's a good idea to catch and re-raise <code>KeyboardInterrupt</code>s, so that you can still kill the program using Ctrl-C.  Logging is outside the scope of the question, but a good option is <a href="https://docs.python.org/2/library/logging.html">logging</a>.  Documentation for the <a href="https://docs.python.org/2/library/sys.html">sys</a> and <a href="https://docs.python.org/2/library/traceback.html">traceback</a> modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, don't use <code>print</code>s for logging, there is stable, proven and well-thought stdlib's module to do that: <a href="https://docs.python.org/3/library/logging.html" rel="noreferrer"><code>logging</code></a>. You definitely <em>should</em> use it instead.</p>
<p>Second, don't be tempted to do <em>mess</em> with unrelated tools when there is native and simple approach. Here is it:</p>
<pre><code>log = logging.getLogger(__name__)

try:
    call_code_that_fails()
except MyError:
    log.exception('Any extra info you want to see in your logs')
</code></pre>
<p>That's it. You are done now.</p>
<h1>Explanation for anyone who is interested in how things go under the hood</h1>
<p>What <code>log.exception</code> doing is actually just call to <code>log.error</code> (that is, log event with level <code>ERROR</code>) <em>and</em> print traceback then.</p>
<h2>Why it is better?</h2>
<p>Well, here is some considerations:</p>
<ul>
<li>it is just <em>right</em>;</li>
<li>it is straightforward;</li>
<li>it is simple.</li>
</ul>
<h2>Why nobody shouldn't use <code>treceback</code> nor call logger with <code>exc_info=True</code> nor get him/her hands dirty with <code>sys.exc_info</code>?</h2>
<p>Well, because! They are all exist for different purposes. For example, <code>traceback.print_exc</code>'s output is a little bit different from tracebacks produced by interpreter itself. If you going to use it, you will confuse anyone who will be banging him head with your logs.</p>
<p>Passing <code>exc_info=True</code> to log calls is just inappropriate. <em>But</em>, it is useful when you catching recoverable errors and want to log them (using, e.g <code>INFO</code> level) with tracebacks as well, because <code>log.exception</code> produces logs of only one level - <code>ERROR</code>.</p>
<p>And you definitely should avoid messing with <code>sys.exc_info</code> as much as you can. It is just not public interface, it is internal one - you <em>can</em> use it if you definitely know what you are doing. It is not intended just for printing exceptions.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want the <a href="http://docs.python.org/library/traceback.html" rel="nofollow noreferrer">traceback</a> module. It will let you print stack dumps like Python normally does. In particular, the <a href="http://docs.python.org/library/traceback.html#traceback.print_last" rel="nofollow noreferrer">print_last</a> function will print the last exception and a stack trace.</p>
</div>
<div class="post-text" itemprop="text">
<p>A remark about <a href="https://stackoverflow.com/a/3702847">this answer</a>'s comments: <code>print(traceback.format_exc())</code> does a better job for me than <code>traceback.print_exc()</code>. With the latter, the <code>hello</code> is sometimes strangely "mixed" with the traceback text, like if both want to write to stdout or stderr at the same time, producing weird output (at least when building from inside a text editor and viewing the output in the "Build results" panel).</p>
<blockquote>
<p>Traceback (most recent call last):<br/>
   File "C:\Users\User\Desktop\test.py", line 7, in <br/>
<strong>hell</strong>    do_stuff()<br/>
    File "C:\Users\User\Desktop\test.py", line 4, in do_stuff<br/>
      1/0<br/>
  ZeroDivisionError: integer division or modulo by zero<br/>
<strong>o</strong><br/>
  [Finished in 0.1s]  </p>
</blockquote>
<p>So I use:</p>
<pre><code>import traceback, sys

def do_stuff():
    1/0

try:
    do_stuff()
except Exception:
    print(traceback.format_exc())
    print('hello')
</code></pre>
</div>
<span class="comment-copy">The traceback module does exactly that - raise and catch an exception.</span>
<span class="comment-copy">Output goes to STDERR by default BTW. Wasn't appearing in my logs because it was being redirected somewhere else.</span>
<span class="comment-copy">as said above and for me too, <code>traceback.print_exc()</code> returns only the last call : how do you succeed to return several level of the stack (and possibly all levele s?)</span>
<span class="comment-copy">@geekobi I'm not sure what you're asking here. I demonstrate that we get the traceback up to the entry point of the program/interpreter. What are you not clear on?</span>
<span class="comment-copy">What @geekobi is saying is if you catch and re-raise, traceback.print_exc() will just return the re-raise stack, not the original stack.</span>
<span class="comment-copy">@fizloki how are you "reraising"? Are you doing a bare <code>raise</code> or exception chaining, or are you hiding the original traceback? see <a href="https://stackoverflow.com/questions/2052390/manually-raising-throwing-an-exception-in-python" title="manually raising throwing an exception in python">stackoverflow.com/questions/2052390/…</a></span>
<span class="comment-copy">This doesn't work in Python 3 and needs to be changed to <code>desired_trace = traceback.format_exc()</code>. Passing <code>sys.exc_info()</code> as the argument was never the correct  thing to do, but gets silently ignored in Python 2—but not in Python 3 (3.6.4 anyway).</span>
<span class="comment-copy"><code>KeyboardInterrupt</code> is not derived (directly or indirectly) from <code>Exception</code>.  (Both are derived from <code>BaseException</code>.)  This means <code>except Exception:</code> will never catch a <code>KeyboardInterrupt</code>, and thus the <code>except KeyboardInterrupt: raise</code> is completely unnecessary.</span>
<span class="comment-copy">I recommend this one over others, it is more stable and well structured more than some random prints</span>
