<div class="post-text" itemprop="text">
<p>What would be an efficient algorithm to do the following:
given a list, we have to output all combinations of elements up to a length n. Let's say x = ['a','b','c','d','e'] and n = 2. The output should be:</p>
<pre><code>[['a'], ['b'], ['c'], ['d'], ['e'], ['a', 'b'], ['a', 'c'], ['a', 'd'], ['a', 'e'], ['b', 'c'], ['b', 'd'], ['b', 'e'], ['c', 'd'], ['c', 'e'], ['d', 'e']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="noreferrer"><code>itertools.combinations</code></a> and iterate for increasing lengths:</p>
<pre><code>from itertools import combinations

x = ['a','b','c','d','e']
c = []
n = 2

for i in range(n):
    c.extend(combinations(x, i + 1))

print(c)
</code></pre>
<p>or, using a list comprehension:</p>
<pre><code>from itertools import combinations

x = ['a','b','c','d','e']
n = 2
c = [comb for i in range(n) for comb in combinations(x, i + 1)]
print(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Code:</h3>
<pre><code>x = ['a', 'b', 'c', 'd', 'e']
result = []

for length in range(1,3):
    result.extend(itertools.combinations(x, length))

print result
</code></pre>
<h3>Output:</h3>
<pre><code>[('a',), ('b',), ('c',), ('d',), ('e',), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('b', 'c'), ('b', 'd'), ('b', 'e'), ('c', 'd'), ('c', 'e'), ('d', 'e')]
</code></pre>
<h3>Documentation:</h3>
<ul>
<li><a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations()</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combnations</code></a>:</p>
<pre><code>&gt;&gt;&gt; x = ['a','b','c','d','e']
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [list(comb) for i in range(1, n+1) for comb in itertools.combinations(x, i)]
[['a'], ['b'], ['c'], ['d'], ['e'],
 ['a', 'b'], ['a', 'c'], ['a', 'd'], ['a', 'e'],
 ['b', 'c'], ['b', 'd'], ['b', 'e'],
 ['c', 'd'], ['c', 'e'], ['d', 'e']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're looking for an algorithm and not a tool... this gives all possible unique combinations.</p>
<pre><code>x = ['a','b','c','d','e']
n = 2

outList = []
for i in range(0,len(x)):
    outEleList = []
    outEleList.append(x[i])
    outList.append(outEleList)
    for c in range(i,len(x)):
        out = []
        out.append(x[i])
        out.append(x[c])
        outList.append(out)

print outList
</code></pre>
</div>
<span class="comment-copy">can you use a library or do you have to write your own method?</span>
