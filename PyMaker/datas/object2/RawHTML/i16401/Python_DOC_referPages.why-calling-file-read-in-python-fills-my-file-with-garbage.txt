<div class="post-text" itemprop="text">
<p>Running this:</p>
<pre><code>import os

if __name__ == '__main__':
    exclude = os.path.join(
        r"C:\Dropbox\eclipse_workspaces\python\sync\.git", "info", "exclude")
    with open(exclude, 'w+') as excl:  # 'w' will truncate
        # print excl.read() # empty
        # excl.readall() # AttributeError: 'file' object has no attribute
        # 'readall' -- this also I do not understand
        excl.write('This will be written as expected if I comment the
         line below')
        print "Garbage\n\n", excl.read()
    # if I do not comment the line however, the file contains all the garbage
    # excl.read() just printed (edit: in addition to the line I wrote)
</code></pre>
<p>results in filling my file with garbage - why ? Also why readall is not resolved ?</p>
<p>Python 2.7.3</p>
<p>Latest iteration:</p>
<pre><code>#!/usr/bin/env python2
import os

if __name__ == '__main__':
    exclude = os.path.join(r"C:\Users\MrD","exclude")
    with open(exclude,'w+') as excl:
        excl.write('This will be written if I comment the line below')
        print "Garbage\n\n",excl.read()
    # now the file contains all the garbage
    raw_input('Lol &gt;')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have hit a pecularity in the way I/O is implemented <em>at the C level</em>. When you opened the file in <code>+</code> mode (write and read in your case), then you <em>must</em> issue a flush or seek before 'switching' modes, otherwise the behaviour is undefined. In this case, you added uninitialised memory to the file.</p>
<p>There is a report for this in the Python issue tracker: <a href="http://bugs.python.org/issue1394612" rel="noreferrer">http://bugs.python.org/issue1394612</a></p>
<p>The work-around is to seek back to start if you wanted to read back what you have written:</p>
<pre><code>with open(exclude,'w+') as excl:
    excl.write('This will be written if I comment the line below')
    excl.seek(0)
    print "No more garbage\n\n", excl.read()
</code></pre>
<p>You could use a flush too:</p>
<pre><code>with open(exclude,'w+') as excl:
    excl.write('This will be written if I comment the line below')
    excl.flush()
    print "No more garbage, eof so empty:\n\n", excl.read()
</code></pre>
</div>
<span class="comment-copy">Why do you expect there to be a <code>.readall()</code> method?</span>
<span class="comment-copy">Can you show us the 'garbage' you are seeing? Because your file pointer is at the end of the file, and <code>excl.read()</code> returns an empty string at that point.</span>
<span class="comment-copy">@MartijnPieters: Pycharm resolves it</span>
<span class="comment-copy">No idea where PyCharm is getting that from, but there is no such method on <a href="https://docs.python.org/2/library/stdtypes.html#file-objects" rel="nofollow noreferrer">Python file objects</a>.</span>
<span class="comment-copy">Right, PyCharm is getting confused with the <a href="https://docs.python.org/3/library/io.html#io.RawIOBase.readall" rel="nofollow noreferrer">Python 3 <code>io.RawIOBase</code> type</a>.</span>
<span class="comment-copy">Ahaha add to this that I am a python newbie and you can imagine the depths of my wonder</span>
<span class="comment-copy">And I just wanted a debug print ahahaha - nice</span>
<span class="comment-copy">Btw the memory was initialized - when this first occured I was seeing the very file I was running in the garbage + the .git/config - I thought I was losing it :D</span>
<span class="comment-copy">@Mr_and_Mrs_D: the initialised memory could easily contain data from a file buffer that is no longer used. :-)</span>
