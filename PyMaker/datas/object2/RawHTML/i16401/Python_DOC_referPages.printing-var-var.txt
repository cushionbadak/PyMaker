<div class="post-text" itemprop="text">
<p>I'm trying to write a function that helps me with debugging. Instead of inserting several print statements every now and then, I'd like to insert a one-liner debug statement. And what I'd expect to accomplish is that such function can be reused: I'd like to use it in several functions, in order to print different sets of variables.</p>
<p>In particular what I want to do is this:</p>
<pre><code>def _debugFunction(var_list):
    global debug_flag
    if debug_flag:
        print 'START DEBUGGING:'
        &lt; magic code &gt;
        print 'END DEBUGGING'

def foo_function(n):
    x = 1
    y = 2
    z = 'string'
    debugFunction([x, y, z])
    return x + y
</code></pre>
<p>So that when I set <code>debug_flag = True</code> and call foo, the output is:</p>
<pre><code>START DEBUGGING:
x = 1
y = 2
z = 'string'
END DEBUGGING
3
</code></pre>
<p>And then, if I set <code>debug_flag = False</code> and call foo, the output is:</p>
<pre><code>3
</code></pre>
<p>In order to do that, I need to get, on runtime, the names of the variables I'm passing to <code>debugFunction()</code> as arguments, and print it along with their values.</p>
<p>I've searched through other posts and unable to find a direct answer.</p>
<p><a href="https://stackoverflow.com/questions/2553354/how-to-get-a-variable-name-as-a-string-in-python">How to get a variable name as a string in Python?</a></p>
<p><a href="https://stackoverflow.com/questions/932818/retrieving-a-variables-name-in-python-at-runtime">retrieving a variable's name in python at runtime?</a></p>
<p>From what I can actually understand, people are told to use the logging module. I've looked at it and tried to implement as much as a tiny piece of it, but I'm unable to log anything yet (will not surrender, though).</p>
<p>I've also read that people get pointed to <code>__dict()__</code>, <code>vars()</code>, or <code>dir()</code>, but just can't understand how to use them. Moreover: if I try to apply them to my variables I only get errors, or meaningless (to me ;) outputs.</p>
<p>Is there a way to do this? Is this TOO bad practice? If that's the case: what would be good practice?</p>
<p>PS: Perhaps there's no point in wasting efforts trying to implement this, but rather spend that time understanding how to properly use the logging module.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I've also read that people get pointed to <strong>dict()</strong>, vars(), or dir(), but just can't understand how to use them. </p>
</blockquote>
<p>Have you tried looking at the docs for these function? For example, <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars</code></a>:</p>
<blockquote>
<p>… Without an argument, vars() acts like locals(). Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored.</p>
</blockquote>
<p>OK, so what does <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals</code></a> do? Look at the docs: it gives you a dictionary that maps each local name in your function to its value. So, if you don't want to pass both names and values, pass the <code>locals()</code> dictionary, and the names:</p>
<pre><code>def foo_function(n):
    x = 1
    y = 2
    z = 'string'
    debugFunction(locals(), ['x', 'y', 'z'])
    return x + y

def _debugFunction(localdict, var_list):
    global debug_flag
    if debug_flag:
        print 'START DEBUGGING:'
        for name in var_list:
            print('{}: {}'.format(name, localdict[name]))
        print 'END DEBUGGING'
</code></pre>
<p>That's it. Except I might change the interface a little to either use <code>*var_list</code> or, even simpler, a string that I can <code>split</code>, and, to make it simpler to use in simple cases, default to printing <em>all</em> the locals:</p>
<pre><code>def _debugFunction(localdict, var_list=''):
    var_list = var_list.split()
    if not var_list:
        var_list = localdict.keys()
</code></pre>
<p>Now you can do this:</p>
<pre><code>_debugFunction(locals(), 'x y z')
</code></pre>
<p>Or just:</p>
<pre><code>_debugFunction(locals())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want is <em>almost</em> possible, for CPython only… but a really, really bad idea. Here's the code:</p>
<pre><code>def _debugFunction(values):
    caller = sys._getframe(1)
    revlocals = {value: key for key, value in caller.f_locals.items()}
    for value in values:
        print('{}: {}'.format(revlocals[value], value))
</code></pre>
<p>The first problem here is that it only handles locals, not globals. That's easy to fix with, e.g., <code>ChainMap</code> or just <code>dict.update</code>.</p>
<p>The second problem is that if you pass it a value that isn't bound any name (like, say, <code>_debugFunction([2])</code>, it's going to raise an exception. You can fix that with, e.g., <code>revlocals.get(value, '&lt;constant&gt;')</code>.</p>
<p>The third problem is that if you pass a value that's bound to two or more names, it's going to pick one arbitrarily. So this code is going to print 'x: 0' twice:</p>
<pre><code>x = y = 0
_debugFunction([x, y])
</code></pre>
<p>You can even fix that one by looking into the frame's <code>f_code</code> and <code>f_lasti</code> to find the bytecode it was executing when it called your function, from which you can tell where each argument came from—e.g., if the first argument came from a <code>LOAD_FAST 1</code>, then the name is <code>f.f_code.co_varnames[1]</code>. (Alternatively, you can decompile it to an AST, which may be easier to process, but that requires third-party code.) This is even hackier—it relies on the fact that the CPython compiler never optimizes the argument passing in function calls in any way—which is <em>almost</em> always true, although I think there are two edge cases where it's not in Python 3.4. I'll leave the code, and discovering and working around those edge cases, as an exercise for the reader.</p>
<p>Of course turning it around and passing the names and using the frame hack just to get the values associated with those names is a lot simpler. Still a bad idea, and still hacky, but no so much that I think I should refuse to show the code:</p>
<pre><code>def _debugFunction(names):
    f = sys._getframe(1)
    values = collections.ChainMap(f.f_locals, f.f_globals)
    for name in names.split():
        print('{}: {}'.format(name, values.get(name, '&lt;undefined&gt;')))

a = 0
def test(b):
    b = c = 1
    d = 'abc'
    _debugFunction('a b c d e')
</code></pre>
</div>
<span class="comment-copy">What is <code>&lt; magic code &gt;</code>?</span>
<span class="comment-copy">when calling debug function with list or arguments, they rare alredy resolved, so i htink you can't get variable names back at this point. you should change your api to provide pairs [['x',x],['y'],y],...] then caller is responsible to give variable names.</span>
<span class="comment-copy">You should simply use a debugger like PyCharm or pdb if you'd like to step through your code. There might be a way to do what you're asking, but it'd be very complex and probably less effective than traditional debugging methods.</span>
<span class="comment-copy">Actually, you <i>could</i> pass just the names or the values and access the other one with some ugly frame hacking, at least for CPython. But you shouldn't.</span>
<span class="comment-copy">@abelinux: <code>pdb</code> is built into Python; PyCharm is one of many IDEs that, among other cool features, wraps up debugging in a way that makes it more user-friendly.</span>
<span class="comment-copy">Thanks abarnert! Indeed, I had looked at the docs, but really couldn't understand them. And when tried vars(foobar), couldn't figure out the output... But your answer is EXACTLY what I was looking for. Again, thanks!</span>
<span class="comment-copy">@abelinux: <code>vars(foobar)</code> returns the members of <code>foobar</code>, which isn't what you want. It also only works if <code>foobar</code> is of a type that uses <code>__dict__</code> to store its members (to deal with that, try <code>inspect.getmembers(foobar)</code>), but you didn't want <code>foobar</code>'s members anyway.</span>
<span class="comment-copy">OK, now I'm confused... I thought your previous answer actually "did the trick", and pretty easily (i.e.: once you gave me the answer;), by the way. Now, this version, I assume it ends up printing the same (from looking at the proposed print ''.format() statement, but seems WAY MORE complicated... Is this kind-of-hacky workaround necessary? What's wrong with your previous answer?</span>
<span class="comment-copy">@abelinux: The only thing wrong with my previous answer is that it doesn't answer exactly the question you asked: you have to pass the locals explicitly, and you have to pass the variables by name rather than by value. I think it's a much <i>better</i> answer than this one, as long as you're happy with those changes, but I wanted to show that it's not quite impossible to do what you literally asked for.</span>
<span class="comment-copy">@abelinux: Also, the very fact that it's so much more complicated for so little benefit should serve as an answer to anyone who comes along later and says "but I don't want to pass <code>locals()</code>, can't I do that automatically?" or "but I want to pass <code>x, y, z</code>, not <code>'x', 'y', 'z'</code>".</span>
