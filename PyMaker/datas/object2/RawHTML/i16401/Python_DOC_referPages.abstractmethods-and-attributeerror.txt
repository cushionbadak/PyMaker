<div class="post-text" itemprop="text">
<p>I was playing with the <code>dir()</code> builtin function when I noticed this:</p>
<pre><code>&gt;&gt;&gt; dir(type)
['__abstractmethods__', '__base__', '__bases__', '__basicsize__', '__call__', '__class__', '__delattr__', '__dict__', '__dictoffset__', '__dir__', '__doc__', '__eq__', '__flags__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__instancecheck__', '__itemsize__', '__le__', '__lt__', '__module__', '__mro__', '__name__', '__ne__', '__new__', '__prepare__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasscheck__', '__subclasses__', '__subclasshook__', '__text_signature__', '__weakrefoffset__', 'mro']
&gt;&gt;&gt; type.__abstractmethods__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: __abstractmethods__
&gt;&gt;&gt; list.__abstractmethods__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: __abstractmethods__
</code></pre>
<p>I don't understand, it appears in the list, why am I getting such error?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__abstractmethods__</code> is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptor</a> to support <a href="https://docs.python.org/3/library/abc.html" rel="nofollow">Abstract Base Classes</a>; it wraps a <em>slot</em> that is empty by default (so the descriptor raises an attribute error). Most of all, it is an implementation detail of how CPython handles abstract methods.</p>
<p>The attribute is used to track what methods are abstract, so that instances can be blocked from being created if they don't provide concrete implementations:</p>
<pre><code>&gt;&gt;&gt; import abc
&gt;&gt;&gt; class FooABC(metaclass=abc.ABCMeta):
...     @abc.abstractmethod
...     def bar(self):
...         pass
... 
&gt;&gt;&gt; FooABC.__abstractmethods__
frozenset({'bar'})
&gt;&gt;&gt; class Foo(FooABC): pass
... 
&gt;&gt;&gt; Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class Foo with abstract methods bar
</code></pre>
<p>The <code>abc.ABCMeta</code> implementation sets the <code>__abstractmethods__</code> attribute, and <code>type()</code> uses it to check for any abstract methods that should have been implemented but are not.</p>
</div>
<span class="comment-copy">Wasn't it more consistent if <code>__abstractmethods__</code> returned empty frozenset by default?</span>
<span class="comment-copy">Why would an internal implementation detail have to do that? Why waste the memory on a <code>frozenset()</code> for something only a small number of classes use?</span>
<span class="comment-copy">It might be more consistent if <code>dir</code> didn't return the name of something that would result in an <code>AttributeError</code> if accessed, but <code>dir</code> is documented as not necessarily being consistent.</span>
