<div class="post-text" itemprop="text">
<p>I have some questions about the ideas that brought to make some choices in the creation of Python.</p>
<p>First of all the 2 builtin methods <code>sorted()</code> and <code>reversed()</code>, why does the former return a list instead the latter returns a iterator? Why making this difference?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sorted()</code> and <code>reversed()</code> do entirely different things.</p>
<p><code>reversed()</code> can give you the reverse of a sequence very efficiently. Types like <code>list</code>, <code>str</code> and <code>range</code> implement a <a href="https://docs.python.org/3/reference/datamodel.html#object.__reversed__" rel="nofollow"><code>__reversed__</code> method</a> that is used to give access to the same sequence in reverse (simply translating indices to count from the end instead of the start); if not implemented the <code>__getitem__</code> and <code>__len__</code> methods are used and <code>reversed()</code> does the transformation itself.</p>
<p>Important here is that the <em>relative order</em> of the elements doesn't change, only the direction in which you iterate over it is different. In that respect <code>reversed()</code> is the inverse of <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow"><code>iter()</code></a>, but only for types that have a fixed length.</p>
<p>Sorting on the other hand always <strong>has</strong> to build a new list as the relative order of the elements has to be altered. You are no longer just getting elements one by one without having to know what other elements are in the sequence.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to sort a list, we need to get all of the elements and put them in the right order. So whatever kind of iterable is passed to <code>sorted</code> will be converted into a list. Once the list is already created, there's no advantage to returning an iterator.</p>
<p><code>reversed</code> is different; if you pass it a list, there's no need for it to create a new list that's back to front, it is more efficient to return a generator that will access elements from the original list on demand.</p>
<p>Note that <code>reversed</code> doesn't do any sorting on the values in a sequence, it reverses the order in which the elements appear.</p>
</div>
<span class="comment-copy"><code>reversed()</code> is not related to <code>sorted()</code>, and returning an iterator is <i>far more efficient</i>, but <code>sorted()</code> cannot do this.</span>
<span class="comment-copy">You have asked 2 different questions in one post. Don't do that; your <code>.get()</code> question is a duplicate, for example.</span>
<span class="comment-copy">then why could they make <code>sorted()</code> return an iterator too?</span>
<span class="comment-copy">Because to sort you need to first have a <i>sequence</i>; e.g. be able to reach all elements.</span>
<span class="comment-copy">For reversed it is different. It just iterated the original list in reversed order. Complexity to find the next element is just O(1), not O(n).</span>
<span class="comment-copy">I understand, one question, maybe stupid, wasn't it better to return an <i>iterable</i> instead of directly return a list?</span>
<span class="comment-copy">@antox: what would that achieve? The list has already been created. Lists are iterables too. If you need an <i>iterator</i>, then call <code>iter()</code> on the <code>sorted()</code> output.</span>
