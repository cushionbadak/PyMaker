<div class="post-text" itemprop="text">
<p>Could someone, please, explain in plain English what exactly and why is going on in this little snippet:</p>
<pre><code>def foo():
    print "You are calling a function via a variable"

var='foo'
fun_var = globals()[var]

print fun_var # it says `&lt;function list&gt;`
print type(fun_var) # it says `&lt;type 'function'&gt;`

fun_var() # it actually prints out "You are calling a function via a variable"
</code></pre>
<p>I understand that via some magic <code>globals()</code> takes the value of <code>var</code> and creates a function with the same name as the value. I also do understand that this may be quite a nice workaround if we don't know the value of <code>var</code> (e.g., it may be set by a user) and we have some functions, one of which we'd like to call depending on that value (e.g. according to the user's preferences).</p>
<p>However, the whole process still looks to me a bit like miracle :). What exactly globals() does here? Where do these powers are coming from? :)</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually...</p>
<p>Here you make a function called 'foo' which prints a string</p>
<pre><code>def foo():
    print "You are calling a function via a variable"
</code></pre>
<p>Here you assign the string 'foo' to a variable 'var'</p>
<pre><code>var='foo'
</code></pre>
<p>The globals() return a dict of global definitions which you can access trough a key, in this case 'foo' returning to fun_var the address of the foo function</p>
<pre><code>fun_var = globals()[var]
</code></pre>
<p>Then you can see foo function attributes</p>
<pre><code>print fun_var # it says `&lt;function list&gt;`
print type(fun_var) # it says `&lt;type 'function'&gt;`
</code></pre>
<p>Then you call foo function putting ()</p>
<pre><code>fun_var() # it actually prints out "You are calling a function via a variable"
</code></pre>
<p>This is the same as:</p>
<pre><code>def foo():
   print('Hello')

fun_var = foo
fun_var()  # Prints 'Hello'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not really that magical. <code>globals()</code> is a dictionary containing all global variable and function declarations, in the style of <code>{ key: value }</code>, where the name of the function or variable is the <code>key</code>, and the actual function or variable value is the <code>value</code>. Whenever you have a dictionary, you can ask for the value of a key with <code>dict["key"]</code>. So when you ask for the value of the thing that has key (read: name) <code>foo</code>, you get back the function named <code>foo</code>, as that's what the name is bound to in <code>globals()</code>.</p>
<p>That said, only mess with <code>globals()</code> if you absolutely have to. Messing with Python builtins is a dangerous game.</p>
</div>
<div class="post-text" itemprop="text">
<p>globals() returns a dictionary of all the objects in your global namespace.</p>
<p><code>globals()['key']</code> gives you the object mapped to the key in the dictionary.</p>
<p>You are passing in the key for function <code>foo</code> and the dictionary gives you back a reference to the function, which you are then binding to a variable.</p>
<p>No magic involved.</p>
</div>
<div class="post-text" itemprop="text">
<p>globals() is a dictionary of all the globally accessible objects. You're accessing your function by passing its name as the key to that dictionary.</p>
</div>
<span class="comment-copy">The documentation about the <a href="https://docs.python.org/3/library/functions.html?highlight=globals#globals" rel="nofollow noreferrer">globals</a> function may be useful to you.</span>
<span class="comment-copy">It's not a miracle, nor is it a good idea. I'd forget you ever learned about <code>globals()</code>, lest you decide to use it for something in the future.</span>
<span class="comment-copy">@Kevin, I've actually see that one skinny line :). Still don't get the mechanism.</span>
<span class="comment-copy">@Wooble, Then, again, why?</span>
<span class="comment-copy">For one, because its use can make code very hard to read and debug.</span>
