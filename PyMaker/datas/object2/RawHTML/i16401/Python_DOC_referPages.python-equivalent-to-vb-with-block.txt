<div class="post-text" itemprop="text">
<p>VB (and C99 and C#, actually) have a way to set multiple attributes on one object with a contracted syntax where you don't have to repeat the object name before "." . Is there a way to do this in Python without having to loop over a dictionary, calling <code>setattr</code> on each item?</p>
<p>Something like</p>
<pre><code>obj.update_attr(
   'attr1': 'foo',
   'attr2': 'bar'
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, keep in mind that you're really not saving much spaceâ€”and you could save a lot more space, and make your style more Pythonic, by just temporarily binding the object to a shorter name:</p>
<pre><code>_ = obj
_.attr1 = 'foo'
_.attr2 = 'bar'
</code></pre>
<p>Compare that to VB-ish syntax:</p>
<pre><code>vbwith obj:
    .attr1 = 'foo'
    .attr2 = 'bar'
</code></pre>
<p>You're really only typing and reading one extra character per line. Is that too much of a burden?</p>
<p>This wouldn't work in languages with C-style variables with value-copying semantics, because you'd just be setting attributes on a copy of <code>obj</code>. But in Python, <code>a = b</code> makes <code>a</code> into another name for the value that <code>b</code> names, it doesn't copy anything. (If you're coming from a C background, it may help to think of this as <code>_ = &amp;obj</code> followed by a bunch of lines starting <code>_-&gt;</code>.)</p>
<hr/>
<p>If you really want to do this, the safest way is to write <code>update_attr</code> as a loop around <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow"><code>setattr</code></a>:</p>
<pre><code>def update_attrs(obj, **attrs):
    for attr, value in attrs.items():
        setattr(obj, attr, value)

update_attr(obj,
    attr1='foo',
    attr2='bar'
)
</code></pre>
<hr/>
<p>The reason you want to use <code>setattr</code> rather than modifying the object's <code>__dict__</code> or <code>vars()</code> is that not all attributes are stored in the object's <code>__dict__</code>. They may be stored in <code>__slots__</code>, or <code>@property</code> descriptors on the class, or get-set methods on a C extension object, or some custom thing provided by the metaclass. So, modifying the <code>__dict__</code> may fail in some cases, or may appear to work but do nothing, or, worst of all, do the wrong thing in a way that's very hard to tell (like hiding a property instead of setting it). <code>setattr</code> is guaranteed to work whenever direct access would work, and to fail whenever direct access would fail.</p>
<hr/>
<p>While much of the Python community thinks actual VB-style <code>with</code> syntax is a bad thing (although I can't find the link to Guido's blog post about it), your more explicit syntax seems readable and not at all misleading to me, so if you really want to use this function, go ahead. But again, I don't think there's much need.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Let's write a function!</h2>
<pre><code>def update_attr(obj, **kw):
    for key, value in kw.iteritems():
        setattr(obj, key, value)
</code></pre>
<h2>Let's use the function!</h2>
<pre><code>class X:
    pass

x = X()

update_attr(x, blue=3, red=5)
update_attr(x, **{'yellow': 6})

print vars(x)
</code></pre>
<h2>The output!</h2>
<pre><code>{'blue': 3, 'yellow': 6, 'red': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your objective is just to avoid repetition and you are working with your own objects, you could use a <a href="https://en.wikipedia.org/wiki/Fluent_interface" rel="nofollow">fluent interface</a> like this:</p>
<pre><code>obj.set_attr1('foo')
   .set_attr2('bar')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps this is unpythonic but VB-style With blocks can help make the program structure clearer.  This is useful when setting up hierarchical structures, such as GUI layouts.</p>
<p>The "quick, dirty and perhaps unpythonic" way to do this is:</p>
<pre><code>for x in [my_object_with_a_long_name]:
    x.my_method()
    x.another_method()
    ...
</code></pre>
</div>
<span class="comment-copy"><code>obj.__dict__.update({'attr1': 'foo', 'attr2': 'bar'})</code></span>
<span class="comment-copy">Please add that as an answer - I think it's just what I need</span>
<span class="comment-copy">Note that some objects won't have <code>__dict__</code> though...</span>
<span class="comment-copy">Keep in mind that the solution provided by vaultah will not always work. As Jon Clements mentioned, some objects don't have a <code>obj.__dict__</code>. Another issue is that the object you are working with might rely on <code>__setattr__</code> for its functionality, and if you update <code>obj.__dict__</code> directly then you are bypassing that functionality (libraries like SQLAlchemy come to mind).</span>
<span class="comment-copy">Or, for those who don't like the dunder:  <code>vars(obj).update(dct)</code>, but for the reasons that others have already mentioned, I would avoid this idiom unless you actually know the object that you're working with pretty well (e.g. inside a class method where you're adding attributes to <code>self</code>)</span>
<span class="comment-copy">The only objection I see to using <code>_</code> here is that code would behave differently when run at the console, where <code>_</code> is assigned the result of the last command.</span>
<span class="comment-copy">@CharlesDuffy: Well, I have a second objection: if you're using <code>gettext</code> for l10n and doing the common trick of assigning the gettext wrapper to <code>_</code>, this will break your code. :) Anyway, <code>_</code> is the idiomatic way to say "I need a variable and I don't care what it's called" as long as neither of those issues is relevant, but you're right that it's worth pointing that "as long as" part, so +1.</span>
<span class="comment-copy">The example is a little weird; creating class attributes and overriding them with instance attributes isn't exactly a common use case.</span>
<span class="comment-copy">@abarnert: Yeah. More or less resolved.</span>
<span class="comment-copy">Yes, and I was going to suggest adding an <code>__init__</code> method, but your resolution is obviously a lot shorter and simpler.</span>
<span class="comment-copy">This is very un-Pythonic, and almost certainly a bad idea. But probably less so than a VB-style <code>with</code> statement.</span>
<span class="comment-copy">@abarnert You couldn't be more right.</span>
<span class="comment-copy">It's always hard to answer these "I want to do something un-Pythonic" questions. Is suggesting something much less Pythonic, but still not really common or idiomatic, a good idea? Hell if I know. That's why I usually end up writing 3 pages worth of alternatives and caveats for each one. :)</span>
