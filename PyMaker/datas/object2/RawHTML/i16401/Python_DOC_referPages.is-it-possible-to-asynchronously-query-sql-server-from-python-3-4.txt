<div class="post-text" itemprop="text">
<p>Is it possible to perform asynchronous queries against Microsoft SQL Server from Python (3.4), i.e. in the context of an <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a> event loop?</p>
<p>The following is a skeleton asyncio program, where the (async) SQL query should be fitted into the <code>do_it</code> function:</p>
<pre><code>import asyncio
import contextlib


@asyncio.coroutine
def do_it():
    # TODO: Make an asynchronous MS SQL query, but how??
    fut = asyncio.Future()
    fut.set_result(None)
    return fut


with contextlib.closing(asyncio.SelectorEventLoop()) as loop:
    asyncio.set_event_loop(loop)
    loop.run_until_complete(do_it())

print('Finished')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For now there is only PostgreSQL native asyncio support via aiopg library.</p>
<p>But you can run synchronous calls to MSSQL by <code>loop.run_in_executor()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The one option I have found so far is the commercial product <a href="http://www.egenix.com/products/python/mxODBCConnect" rel="nofollow">mxODBC Connect</a>, which unfortunately costs several hundred dollars. By providing a proxy server to SQL Server, it is able to support asynchronous calls. Supposedly the async support is implemented via <a href="http://www.gevent.org/" rel="nofollow">gevent</a>, so I don't know how well it'll fit into asyncio. From Python's <a href="https://wiki.python.org/moin/ODBC" rel="nofollow">ODBC wiki</a>, mxODBC is the only product listed with async support.</p>
</div>
<div class="post-text" itemprop="text">
<p>I hate a "don't do that" answers, but <a href="http://techspot.zzzeek.org/2015/02/15/asynchronous-python-and-databases/" rel="nofollow">the article by Mike Bayer, the creator of SQLAlchemy</a> makes me think exactly exactly that: </p>
<p>"<em>when it comes to stereotypical database logic, there are no advantages to using it versus a traditional threaded approach, and you can likely expect a small to moderate <strong>decrease</strong> in performance, not an <strong>increase</strong></em></p></div>
<span class="comment-copy">Thanks, I'm aware of the threaded executor option. However, I see that for instance mxODBC <a href="https://wiki.python.org/moin/ODBC" rel="nofollow noreferrer">supports async</a>, so I was hoping I could fit such a component with async support into the asyncio framework.</span>
<span class="comment-copy">I wrote aiopg as asyncio wrapper for psycopg2. If you need for asyncio-compatible wrapper for mxODBC you perhaps should to create it yourself (or wait for somebody to get this work implemented).</span>
<span class="comment-copy">No, I mean, I don't <i>need</i> an asyncio wrapper. I really just need to know how I may asynchronously query SQL Server, if it is possible at all. The only option I've found so far in this regard is mxODBC Connect, which acts as a proxy server to SQL Server. Unfortunately, Connect is quite costly.</span>
<span class="comment-copy">Sometimes the hit to performance is acceptable when the code can be written in a much clearer and simpler way using CPython's asyncio.</span>
<span class="comment-copy">I agree that asynchronous code is about the only way to write a clear parallel code in Python, because of GIL.</span>
