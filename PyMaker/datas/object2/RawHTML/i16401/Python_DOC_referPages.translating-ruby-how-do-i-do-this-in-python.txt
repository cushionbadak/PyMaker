<div class="post-text" itemprop="text">
<p>I want to find a particular element in a list like this:</p>
<pre><code>my_list.find { |e| e == 'find this' }
</code></pre>
<p>I know in Python I can do:</p>
<pre><code>[e for e in my_list if e == 'find this']
</code></pre>
<p>But this returns a list as opposed to the element I want.</p>
<p>I know how I can do this by iterating through the list, but I want to know if there's a more concise way of doing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find the <em>first</em> matching element with a generator expression and <code>next()</code>:</p>
<pre><code>match = next((e for e in my_list if e == 'find this'), None)
</code></pre>
<p>This sets <code>match</code> to <code>None</code> if no elements matched.</p>
<p>Because a generator expression is used, only enough elements in <code>my_list</code> are inspected to find the first match, after which the search is stopped.</p>
<p>The sample search you gave is rather pointless, of course, as you are basically using simple equality. For more complex attribute searches it makes more sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow">list.index</a>, which</p>
<blockquote>
<p>returns the index in the list of the first item whose value is x. It is an error if there is no such item.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; l = ["1", "se", "uz", "tz", "find this", "that"]
&gt;&gt;&gt; l.index("find this") 
4

&gt;&gt;&gt; l[l.index("find this")]
'find this'

&gt;&gt;&gt; l[l.index("find that")]
...
ValueError: 'find that' is not in list
</code></pre>
<p>If all your app does is searching for <em>exact</em> keys, you could also use a dictionary (called <a href="http://www.ruby-doc.org/core-2.1.2/Hash.html" rel="nofollow">Hash</a> in Ruby, I guess) instead - to reduce lookup times from O(n) to amortized O(1).</p>
</div>
<span class="comment-copy">You mean you want to find the <i>first matching element</i>?</span>
<span class="comment-copy">In your simplified case, the result would be the same as <code>'find this' if 'find this' in my_list else None</code>, as you are using equality here.</span>
<span class="comment-copy">Are you actually using <code>#find_index</code> ?</span>
<span class="comment-copy">It's not necessary to say "Edit:" or notate that something changed. Stack Overflow keeps an edit history so we can see how things have changed if necessary.</span>
<span class="comment-copy">I suspect the OP meant <code>find_index</code> in which case @miku's answer is correct :)</span>
<span class="comment-copy">@JonClements: maybe, maybe not. We'll see!</span>
<span class="comment-copy">Mind you, have remembered depending on the Ruby version, there's the <code>Enumerable</code> interface so <code>.find</code> would correlate with this answer (using the default parameter to return <code>None</code> is similar to the <code>nil</code> result Ruby returns from <code>.find</code>) :p</span>
<span class="comment-copy">Indeed, this is equal to <a href="http://ruby-doc.org/core-2.1.2/Enumerable.html#method-i-find" rel="nofollow noreferrer">Ruby's Enumerable#find</a>. It yields the first matching element or <code>nil</code>, not the index.</span>
<span class="comment-copy">@DaniÃ«lKnippers: then <code>next()</code> with a generator expression and a default does exactly that.</span>
<span class="comment-copy">We just call it a hash in Ruby. It's called many things in different languages.</span>
<span class="comment-copy">Just corrected it this moment, after skimming the Ruby docs, but thanks for noticing.</span>
