<div class="post-text" itemprop="text">
<p>So I started using python very recently. I am doing a small project involving classes. I for the most part have the conventions down like using self... etc.  What I haven't figured out quite yet is the name mangling which may be related to my question. </p>
<p>Here is some code that forms a class to create a turn object that i can intilize in the beginning of a battle and allows me to switch turns periodically. (the game is going to be a pokemon battle simulator)</p>
<pre><code>class turn:

    TURNS = ("player","computer")
    curr=0

    def __init__(self): 
        self.currentTurn=turn.TURNS[turn.curr]

    def getTurn(self):
        return turn.TURNS[turn.curr]

    def switch(self):
        if turn.curr == 0: 
            turn.curr = 1 
        else:   
            turn.curr = 0

        if turn.curr==0: 
            print "It's your move! \n"

        self.currentTurn=TURNS[turn.curr]
</code></pre>
<p>So my question is this: </p>
<p>Is there any feature of python that would allow me to omit the class name when referring to the class vairables. I feel like it should know to look within the class definition for those variables but it doesn't. Also, If I want to use a helper method within the same class, i seem to have to prefix that with self. </p>
<p>Is there anyway around this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can reference the current class with <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow"><code>type(self)</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#instance.__class__" rel="nofollow"><code>self.__class__</code></a>. Take into account that that value changes as a class is subclassed.</p>
<p>So:</p>
<pre><code>class turn(object):
    def __init__(self): 
        cls = type(self)
        self.currentTurn = cls.TURNS[cls.curr]

    def getTurn(self):
        cls = type(self)
        return cls.TURNS[cls.curr]

    def switch(self):
        cls = type(self)
        cls.curr = 1 - cls.curr

        if cls.curr == 0: 
            print "It's your move! \n"

        self.currentTurn = cls.TURNS[cls.curr]
</code></pre>
<p>but if you were to subclass <code>turns</code>, then <em>setting</em> <code>cls.curr</code> will be done on the subclass, not the <code>turn</code> parent class when you call <code>subclass().switch()</code>.</p>
<p>You can also use the <code>self.__class__</code> attribute, but using a built-in function lets you keep the code more readable.</p>
<p>However, note that as long as there are no instance attributes with the same names, you can refer to your class attributes <em>on <code>self</code> as well</em>; the following works too:</p>
<pre><code>class turn(object):
    def __init__(self): 
        self.currentTurn = self.TURNS[self.curr]

    def getTurn(self):
        return self.TURNS[self.curr]

    def switch(self):
        cls = type(self)
        cls.curr = 1 - cls.curr

        if self.curr == 0: 
            print "It's your move! \n"

        self.currentTurn = self.TURNS[self.curr]
</code></pre>
<p><em>Setting</em> class attributes still requires that you do so directly on the class, not <code>self</code>, however.</p>
</div>
<span class="comment-copy">Martjin, I was in the midst of editing when you fixed the errors for me, thank you. The SO editor put those stars in for me when I tried to make all the instances of "turn." bold</span>
<span class="comment-copy">"Explicit is better than implicit."  Live with Python's dogmas like this one.  What might appear as a nice feature to you might be a lot of trouble for the next developer trying to understand your code.</span>
<span class="comment-copy">@user3756732: There is no support for formatting in a code block; outside a codeblock <code>**</code> makes things bold.</span>
<span class="comment-copy">By "subclassing" you mean if I were to put another class definition within that class?</span>
<span class="comment-copy">@user3756732: you can create a derived class, that reuses everything in <code>turn</code>, adding on to it, or replacing functionality. <code>class subclass(turn): pass</code> is a useless subclass that just inherited everything without adding.</span>
<span class="comment-copy">@user3756732: see <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow noreferrer"><i>Inheritance</i> in the Python toturial</a>.</span>
<span class="comment-copy">@user3756732: Btw, I am making the assumption that you are using Python 3 here; in Python 2, make sure you inherit from <code>object</code> (new-style classes), otherwise <code>type(self)</code> won't work.</span>
<span class="comment-copy">Thanks this was helpful, and I know about inheritance, that idea just didn't register in my head at the moment, it seemed to obvious lol. Thanks for editing to make more clear</span>
