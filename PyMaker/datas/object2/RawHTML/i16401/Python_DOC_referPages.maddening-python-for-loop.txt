<div class="post-text" itemprop="text">
<p>I am writing a simple checkers program. I am trying to get a nice ASCII output of the game state. Here is the function I am trying to use:</p>
<pre><code> def function(self):
     board =  [["+", " - "]*8 + ["+", "\n"], \
               ["|", "   "]*8 + ["|", "\n"]]*8 + \
              [["+", " - "]*8 + ["+", "\n"]]

     i = 0
     for row in self.state:
         j = 0
         for cell in row:
             if cell == WHITE:
                 board[2*i+1][2*j+1] = ' w '
             elif cell == WHITE_KING:
                 board[2*i+1][2*j+1] = ' W '
             elif cell == BLACK:
                 board[2*i+1][2*j+1] = ' b '
             elif cell == BLACK_KING:
                 board[2*i+1][2*j+1] = ' B '
             j += 1
         i += 1

     return board
</code></pre>
<p>(outside the class definition):</p>
<pre><code>EMPTY, WHITE, WHITE_KING, BLACK, BLACK_KING = range(5)
</code></pre>
<p>I cannot see what is wrong with it, yet here is what is happening.</p>
<pre><code>&gt;&gt;&gt; B = CheckerBoard()
&gt;&gt;&gt; B.state
[[3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]]
&gt;&gt;&gt; print("".join(map(lambda x: "".join(x), B.function())))
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
| w | w | w | w | w | w | w | w |
+ - + - + - + - + - + - + - + - +
</code></pre>
<p>The desired output is</p>
<pre><code>+ - + - + - + - + - + - + - + - +
| b |   | b |   | b |   | b |   |
+ - + - + - + - + - + - + - + - +
|   | b |   | b |   | b |   | b |
+ - + - + - + - + - + - + - + - +
| b |   | b |   | b |   | b |   |
+ - + - + - + - + - + - + - + - +
|   |   |   |   |   |   |   |   |
+ - + - + - + - + - + - + - + - +
|   |   |   |   |   |   |   |   |
+ - + - + - + - + - + - + - + - +
| w |   | w |   | w |   | w |   |
+ - + - + - + - + - + - + - + - +
|   | w |   | w |   | w |   | w |
+ - + - + - + - + - + - + - + - +
| w |   | w |   | w |   | w |   |
+ - + - + - + - + - + - + - + - +
</code></pre>
<p><strong>EDIT</strong>: For those who get stuck in a similar place, here is the working solution:</p>
<pre><code>def function(self):
     board =  [x for list in
               [[[a for subl in [["+", " - "] for _ in range(8)] for a in subl] + ["+", "\n"], \
                [a for subl in [["|", "   "] for _ in range(8)] for a in subl] + ["|", "\n"]] \
                 for _ in range(8)] for x in list] + \
              [[a for subl in [["+", " - "] for _ in range(8)] for a in subl] + ["+", "\n"]]

     i = 0
     for row in self.state:
         j = 0
         for cell in row:
             if cell == WHITE:
                 board[2*i+1][2*j+1] = ' w '
             elif cell == WHITE_KING:
                 board[2*i+1][2*j+1] = ' W '
             elif cell == BLACK:
                 board[2*i+1][2*j+1] = ' b '
             elif cell == BLACK_KING:
                 board[2*i+1][2*j+1] = ' B '
             j += 1
         i += 1

     return board
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A common mistake. <code>list*N</code> does a shallow copy, e.g. in <code>x = …; l = [x]*4</code> the <code>l</code> is the same as <code>l = [x,x,x,x]</code>. Now if <code>x</code> is a list, then you edit the references in multiple places.</p>
<p>See <a href="https://docs.python.org/3/faq/programming.html#how-do-i-create-a-multidimensional-list" rel="nofollow">How do I create a multidimensional list?</a> in the official Python FAQ for more details. But the short version is: instead of <code>[x]*4</code>, write <code>[x for _ in range(4)]</code>, and you'll get four separate copies of <code>x</code> instead of four references to the same <code>x</code>.</p>
</div>
<span class="comment-copy">What's your expected output? Include that for clarity..</span>
<span class="comment-copy">More importantly, what's the <i>input</i>? Are you sure that <code>self.state</code> isn't all <code>WHITE</code> cells, because of a bug in the code you haven't shown us? Also, can you provide an <a href="http://stackoverflow.com/help/mcve">MCVE</a> instead of a code fragment that can't be run or debugged on its own?</span>
<span class="comment-copy">Does the *8 expressions in that board declaration create 8 distinct copies of the lists inside, or 8 references to the same lists?</span>
<span class="comment-copy">@LasseV.Karlsen: 8 references to the same list. Which is <i>probably</i> the problem—but only if the last row actually is supposed to be all <code>w</code> values; otherwise, the problem is most likely caused by doing something similar in constructing <code>self.state</code> in the first place (although he'd still have to fix this problem after fixing that one anyway).</span>
<span class="comment-copy">@LasseV.Karlsen: Wait, I didn't read his code carefully enough; it's not <i>just</i> that he's creating 8 references to the same list, it's that the list itself has 8 references to the same sub-list, so he only needs one <code>w</code> value, not a whole row of them, to get this result.</span>
<span class="comment-copy">This answer doesn't explain how to fix it (e.g., use <code>[x for _ in range(4)]</code> instead of <code>[x]*4</code>). But it probably does identify his problem.</span>
