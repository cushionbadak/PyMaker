<div class="post-text" itemprop="text">
<p>Using Python 3's function annotations, it is possible to specify the type of items contained within a homogeneous list (or other collection) for the purpose of type hinting in PyCharm and other IDEs?</p>
<p>A pseudo-python code example for a list of int:</p>
<pre><code>def my_func(l:list&lt;int&gt;):
    pass
</code></pre>
<p><br/><br/>
I know it's possible using Docstring...</p>
<pre><code>def my_func(l):
    """
    :type l: list[int]
    """
    pass
</code></pre>
<p>... but I prefer the annotation style if it's possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Answering my own question; the TLDR answer is <strike>No</strike> <strong>Yes</strong>. </p>
<p><strong>Update 2</strong></p>
<p>In September 2015, Python 3.5 was released with support for Type Hints and includes a <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">new <em>typing</em> module</a>. This allows for the specification of types contained within collections. As of November 2015, JetBrains PyCharm 5.0 fully supports Python 3.5 to include Type Hints as illustrated below.</p>
<p><a href="https://i.stack.imgur.com/KHn4f.jpg" rel="noreferrer"><img alt="PyCharm 5.0 Code Completion using Type Hints" src="https://i.stack.imgur.com/KHn4f.jpg"/></a></p>
<p><strong>Update 1</strong> </p>
<p>As of May 2015, <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP0484 (Type Hints)</a> has been formally accepted. The draft implementation is also available at <a href="https://github.com/ambv/typehinting" rel="noreferrer">github under ambv/typehinting</a>.</p>
<p><strong>Original Answer</strong></p>
<p>As of Aug 2014, I have confirmed that it is not possible to use Python 3 type annotations to specify types within collections (ex: a list of strings).</p>
<p>The use of formatted docstrings such as reStructuredText or Sphinx are viable alternatives and supported by various IDEs.</p>
<p>It also appears that Guido is mulling over the idea of extending type annotations in the spirit of mypy: <a href="http://mail.python.org/pipermail/python-ideas/2014-August/028618.html" rel="noreferrer">http://mail.python.org/pipermail/python-ideas/2014-August/028618.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Now that Python 3.5 is officially out, there is the Type Hints supporting module - <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code></a> and the relevant <a href="https://docs.python.org/3/library/typing.html#generics" rel="noreferrer"><code>List</code></a> "type" for the generic containers.</p>
<p>In other words, now you can do:</p>
<pre><code>from typing import List

def my_func(l: List[int]):
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With support from the BDFL, it's almost certain now that python (probably 3.5) will provide a standardized syntax for type hints via function annotations.</p>
<p><a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow">https://www.python.org/dev/peps/pep-0484/</a></p>
<p>As referenced in the PEP, there is an experimental type-checker (kind of like pylint, but for types) called mypy that already uses this standard, and doesn't require any new syntax. </p>
<p><a href="http://mypy-lang.org/" rel="nofollow">http://mypy-lang.org/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Type comments have been added since <a href="https://www.python.org/dev/peps/pep-0484/#type-comments" rel="nofollow noreferrer">PEP 484</a></p>
<pre><code>active_monitors = [] # type: List[Monitor]
</code></pre>
<p>This is currently working for me on PyCharm with Python 3.6.4</p>
<p><a href="https://i.stack.imgur.com/J38BN.png" rel="nofollow noreferrer">Example Picture in Pycharm</a></p>
</div>
<span class="comment-copy">Have you tried using the same format in the function annotations? What happened?</span>
<span class="comment-copy">@jonrsharpe It should raise an error because <code>type object is not subscriptable</code> when defining the function. Obviously you can use a string: <code>def my_func(L: 'list[int]')</code> but I don't know whether PyCharm will parse it as it parses the docstrings...</span>
<span class="comment-copy">@Bakuriu yes, I meant <code>'list[int]'</code>, apologies if that wasn't clear.</span>
<span class="comment-copy">It doesn't appear that PyCharm will parse it like it does docstrings.</span>
<span class="comment-copy">Update: It appears that type hinting to include support for generic types has made its way to PEP484 <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">python.org/dev/peps/pep-0484</a></span>
