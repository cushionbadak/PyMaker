<div class="post-text" itemprop="text">
<p>My question is inspired by a comment on the <a href="https://stackoverflow.com/questions/2359253/solving-embarassingly-parallel-problems-using-python-multiprocessing">solving embarassingly parallel problem with multiprocessing</a> post.</p>
<p>I am asking about the general case where python multiprocessing is used to (1) read data from file, (2) manipulate data, (3) write results to file. In the case I describe, data that is read from file is passed to a queue A in (1) and fetched from this queue A in (2). (2) also passes results to a separate queue B and (3) fetches results from this queue B to write them to file.</p>
<p>When (1) is done, it passes a STOP signal* to queue A so (2) knows queue A is empty. (2) then terminates and passes a STOP signal to queue B so (3) knows queue B is empty and terminates when it has used up the results queue.  </p>
<p>So is there any need to call the multiprocessing <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.join" rel="nofollow noreferrer">.join() method</a> on (1) and (2)? I would have thought that (2) will not finish until (1) finishes and sends a STOP signal? For (3) it makes sense to wait as any subsequent instructions might else proceed without (3).</p>
<p>But maybe calling the .join() method costs nothing and can be used just to avoid having to think about it?</p>
<hr/>
<p>*actually, the STOP signal consists of a sequence of N stop signals where N is equivalent to the number of processes running in (2).</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join" rel="nofollow">docs</a>, it is safe to call <code>join</code> multiple times - this suggests that if <code>p</code> has already stopped, <code>p.join()</code> will return immediately. This means that if you expect <code>p</code> to have already stopped by this time, the cost of joining it should be negligible. If <code>p</code> <em>hasn't</em> stopped (as you say you expect the writer process might not have), there is a potential cost to joining it depending on what your main process needs to do. If it does any user interaction, it will appear hung. If that is a problem, you might consider this type of pattern:</p>
<pre><code>while p.is_alive():
   iterate_mainloop()
   p.join(small_timeout)
</code></pre>
<p>But if that process doesn't do user interaction, joining the others should be fine. That seems to be the most likely situation here - if you can afford to be blocked waiting for a disk read, you should also be fine waiting for another process to complete (modulo any defensive timeouts in case it misbehaves).</p>
</div>
<span class="comment-copy">Thanks for pointing that out - I had seen <code>join</code> can be called multiple times but not made the connection.</span>
