<div class="post-text" itemprop="text">
<p>I am trying to determine the median and mode from a list of numbers in "numbers.txt" file. 
I am EXTREMELY new to python and have ZERO coding experience. </p>
<p>This is what I have so far calculating mean, sum, count, max, and min but I have no idea where to go from here. </p>
<pre><code>number_file_name = 'numbers.txt'
number_sum = 0
number_count = 0
number_average = 0
number_maximum = 0
number_minimum = 0
number_range = 0

do_calculation = True
while(do_calculation):

    while (True):
        try:
            # Get the name of a file
            number_file_name = input('Enter a filename. Be sure to include .txt after the file name: ')
            random_number_count = 0

            print('')

            random_number_file = open(number_file_name, "r")
            print ('File Name: ', number_file_name, ':', sep='')

            print('')

            numbers = random_number_file.readlines()
            random_number_file.close
        except:
            print('An error occured trying to read', random_number_file)
        else:
            break

    try: 
        number_file = open(number_file_name, "r")

        is_first_number = True

        for number in number_file:
            number = int(number)  # convert the read string to an int

            if (is_first_number):
                number_maximum = number
                number_minimum = number
                is_first_number = False

            number_sum += number
            number_count += 1
            if (number &gt; number_maximum):
                number_maximum = number
            if (number &lt; number_minimum):
                number_minimum = number

        number_average = number_sum / number_count
        number_range = number_maximum - number_minimum

        index = 0
        listnumbers = 0
        while index &lt; len(numbers):
            numbers[index] = int(numbers[index])
            index += 1


        number_file.close()
    except Exception as err:
        print ('An error occurred reading', number_file_name)
        print ('The error is', err)
    else:
        print ('Sum: ', number_sum)
        print ('Count:', number_count)
        print ('Average:', number_average)
        print ('Maximum:', number_maximum)
        print ('Minimum:', number_minimum)
        print ('Range:', number_range)
        print ('Median:', median)

    another_calculation = input("Do you want to enter in another file name? (y/n): ")
    if(another_calculation !="y"):
        do_calculation = False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find the <a href="http://en.wikipedia.org/wiki/Median" rel="nofollow">median</a> and <a href="http://en.wikipedia.org/wiki/Mode_%28statistics%29" rel="nofollow">mode</a> of the numbers, you need to keep track of the actual numbers you've encountered so far. You can either create a <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow">list</a> holding all the numbers, or a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">dictionary</a> mapping numbers to how often you've seen those. For now, let's create a (sorted) list from those numbers:</p>
<pre><code>with open("numbers.txt") as f:
    numbers = []
    for line in f:
        numbers.append(int(line))
    numbers.sort()
</code></pre>
<p>Or shorter: <code>numbers = sorted(map(int, f))</code></p>
<p>Now, you can use all sorts of <a href="https://docs.python.org/3/library/functions.html" rel="nofollow">builtin functions</a> to calculate count, sum, min and max</p>
<pre><code>count = len(numbers)
max_num = max(numbers)
min_num = min(numbers)
sum_of_nums = sum(numbers)
</code></pre>
<p>Calculating the mode and median can also be done very quickly using the list of numbers:</p>
<pre><code>median = numbers[len(numbers)//2]
mode = max(numbers, key=lambda n: numbers.count(n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe there is a reason for it but why are you avoiding using the python libraries? Numpy and scipy should have everything you are looking for such a task. </p>
<p>Have a look at <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html" rel="nofollow">numpy.genfromtxt()</a> , <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html" rel="nofollow">numpy.mean()</a> and <a href="http://docs.scipy.org/doc/scipy-0.7.x/reference/generated/scipy.stats.mode.html" rel="nofollow">scipy.stats.mode()</a>. </p>
</div>
<span class="comment-copy">Actually, calculating the median is a bit more complicated if count is even, but I'll leave this as an excercise to the interested reader... ;-)</span>
<span class="comment-copy">Thank you so much. I will look into this and see what happens! Making a list and sorting the list makes so much sense.</span>
<span class="comment-copy">This is exactly what I was looking for. And I understand the reasoning behind all of it. Thank you so much for teaching me that (:</span>
<span class="comment-copy"><code>why are you avoiding using the python libraries?</code> Probably because he is just learning to program. Doing it yourself is much more instructive than figuring out the right library function to call.</span>
<span class="comment-copy">Yes this is an introductory course and I have not learned numpy or any of that. They want to see you actually code.</span>
<span class="comment-copy">Ahh sorry. This is a bit of a different question than I had thought. One day you should have a look at all the wonderful packages python has to offer.</span>
