<div class="post-text" itemprop="text">
<p>I am using Python 3.3.1 on Windows 7.</p>
<p>I can execute my python script with this command from the command line</p>
<pre><code>C:\Users\gyorulmaz\workspace\Test_Automation\Source&gt;python TestAutomation.py
</code></pre>
<p>however if I try launching python from a different location</p>
<pre><code>C:\python C:\Users\gyorulmaz\workspace\Test_Automation\Source\TestAutomation.py
</code></pre>
<p>I get an error message</p>
<pre><code>File "C:\Python33\lib\configparser.py", line 1136, in _unify_values
raise NoSectionError(section) configparser.NoSectionError: No section: 'automation'
</code></pre>
<p>I am guessing I need to configure something with my python environment.</p>
<p>Help on this would be much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although it's impossible to be sure when you don't show us any code, most likely the problem is that the script is trying to open a file in the same directory as the script (or in a subdirectory or other relative path).</p>
<p>For example:</p>
<pre><code>f = open('spam.txt')
</code></pre>
<p>That's not a file in the same directory as the script, that's a file in the current working directory. So, unless the current working directory happens to be the directory the script is in, you will get a <code>FileNotFoundError</code>.</p>
<p>In your case, you're using <code>configparser</code>, which will treat a <code>FileNotFoundError</code> the same as an empty file, so it will successfully import an empty config—but then as soon as you ask for the <code>'automation'</code> section, there will obviously be no such section, so you'll get a <code>NoSectionError</code> instead.</p>
<hr/>
<p>Normally, you're going to want to <em>install</em> a script somewhere, and install whatever data files it needs somewhere as well, rather than running them out of the development directory. Python has all kinds of ways to do that, but you're going to have to read a tutorial about packaging things up in Python (I think <a href="http://guide.python-distribute.org/" rel="nofollow noreferrer">Hitchhiker's Guide to Packaging</a> is still the recommended starting point, but that may be out of date, so don't quote me on it…) before I could even begin to explain how to package up data files.</p>
<p>But here, we're talking about config files. Normally, these just go to some fixed path relative to the user's home directory. So, for a quick&amp;dirty solution, you could just pick some such home-relative path and hardcode it into your app. Or, to get even quicker and dirtier, if this is just a hacky script for your own use, just hardcode the absolute pathname.</p>
<hr/>
<p>If you really, really want to use a script-relative path, and don't want to hardcode it:</p>
<pre><code>scriptdir = os.path.dirname(sys.argv[0])
configpath = os.path.join(scriptdir, 'my.cfg')
</code></pre>
<p>Unfortunately, <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv[0]</code></a> is not guaranteed to be an absolute pathname, or even a pathname at all; it's allowed to be just the filename. In Python 3.4, you can solve this by using <code>__file__</code> instead, but you're using 3.3, and that has other problems. (See <a href="https://stackoverflow.com/questions/1296501/python-find-path-to-file-being-run">this question</a> for details.) And what if someone puts your script inside a zip archive and runs it out of the archive (which Python can do for you)? There is no perfect answer here, but the code above is probably what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you running <strong>C:\python</strong> executable --OR running <strong>python</strong> at <strong>c:\</strong> location?</p>
<p>Seems like you are not. You're running a file <em>c:\python</em> (which doesn't exist). If you'll run it from C:\, then you would have pasted it like <em>C:\&gt;python</em> .... or never asked this ?.</p>
<p>Do this:<br/>
1. cd to C:\<br/>
2. Now you'll see C:&gt; as prompt in DOS/Windows<br/>
3. Run the following and it should work.<br/>
<strong>python C:\Users\gyorulmaz\workspace\Test_Automation\Source\TestAutomation.py</strong> <br/></p>
<p>Your screen will show it like:<br/>
<strong>C:\&gt;python C:\Users\gyorulmaz\workspace\Test_Automation\Source\TestAutomation.py</strong> <br/></p>
<p>OR
if you did a typo, then you can seek help from <a href="https://stackoverflow.com/questions/1296501/python-find-path-to-file-being-run">Python - Find Path to File Being Run</a></p>
</div>
<span class="comment-copy">What's in <code>TestAutomation.py</code>? It looks like it's trying to read a config file in the current working directory, which you're changing. You may want to change the script to look for this file relative to the path of the script itself.</span>
<span class="comment-copy">Are you running C:\python or running python at c:\ location. Seems like you are not. you're running a file c:\python (which doesn't exist) as if you'll run it from C:\, then it'll look like C:\&gt;python ....</span>
<span class="comment-copy">@ArunSangal: The fact that his script is clearly starting up, with Python 3.3, and getting at least far enough to construct a <code>configparser.ConfigParser</code> object, implies that isn't the problem here.</span>
<span class="comment-copy">Thanks for the answers. The problem had to do with not finding the location of one of the configuration files I was using within my script. Something similar in nature to f = open('spam.txt')..</span>
