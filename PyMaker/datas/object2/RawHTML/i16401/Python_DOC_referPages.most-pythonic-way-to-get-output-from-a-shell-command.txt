<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4760215/running-shell-command-and-capturing-the-output">Running shell command and capturing the output</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I'm writing my first python program and I want to run a shell command and get the output. I want to do it in the cleanest possible / most pythonic way. This is what I've got atm.
Note: I also want to raise an Exception when there went something worng with execution of the shell command.</p>
<pre><code>def lsCommand():
    process = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out , err = process.communicate()
    returnc = process.returncode
    if returnc != 0:
        raise Exception(err)
    else:
        return out
</code></pre>
<p>What I discovered, is that when I remove the line <strong>out , err = process.communicate()</strong>, and replace it with time.sleep(4) (&lt;= the ls command doesn't take 4 seconds to complete), The returncode is None, which means that it the subprocess isn't fnished yet. How is this possible? Does the <strong>out , err = process.communicate()</strong> do an implicit wait() methode call?</p>
<pre><code>def lsCommand():
    process = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    time.sleep(4)
    returnc = process.returncode
    if returnc != 0:
        print returnc
        raise Exception(err)
    else:
        return out
</code></pre>
<p>EDIT: I'm using python 2.7</p>
<p>I want to do a longer command <strong>sudo find  "/media/usb0"  -type f -name "*.JPG" | wc -l</strong>, but i'm not sure how to call it with Popen, can anyone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>communicate</code> implies <code>wait</code>; it reads the process' <code>stdout</code> and <code>stderr</code> until they are closed.</p>
<p>In the second example you <code>PIPE</code> the output of the <code>ls</code>; the child process <code>ls</code> is blocked writing to <code>stdout</code> and <code>stderr</code> until you read from the pipe - thus it would not completed within 4 seconds, or even 4 years until these descriptors are read. However, as polling the descriptors manually is prone to errors, the <code>Popen</code> class has the <code>communicate</code> method to avoid the pitfalls.</p>
<hr/>
<p>For a very pythonic way to easily get the output of a command, see <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow">Popen.check_output</a> available since Python 3.1, and 2.7, though it does not raise an exception with the contents of <code>stderr</code> on failure. Your first example is good if you need the exception to contain the contents of stderr as a message.</p>
<hr/>
<p>To call the full pipeline in Python, you can use the <code>shell=True</code> with the full pipeline as a command.</p>
<pre><code>pipeline = subprocess.Popen(
    'sudo find "/media/usb0" -type f -name "*.JPG" | wc -l',
    shell=True,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE
)
</code></pre>
<p>However, you can also use <code>Popen</code>s to <a href="https://docs.python.org/2/library/subprocess.html#replacing-shell-pipeline" rel="nofollow">make the pipeline</a>:</p>
<pre><code>find = subprocess.Popen(
    ['sudo', 'find', '/media/usb0', '-type', 'f', '-name', '*.JPG'],
    stdout=subprocess.PIPE
)
wc = subprocess.Popen(
    ['wc', '-l'],
    stdin=find.stdout,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE
)
find.stdout.close()
wc.communicate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It will not call <code>time.sleep</code>, it will wait till the command complete its execution, it might be 4 second or more.</p>
<p>When you call <code>process.communicate()</code> it will actual make call to command and set the values in <code>process.returncode</code>.</p>
<p>If you will not call <code>process.communicate()</code> then default value of <code>process.returncode</code> is <code>None</code> and what its return when you replace <code>process.communicate()</code> with <code>time.sleep(4)</code>.</p>
<p><a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.returncode" rel="nofollow">Popen.returncode</a></p>
<p>The child return code, set by poll() and wait() (<strong>and indirectly by communicate()</strong>). A None value indicates that the process hasnâ€™t terminated yet.</p>
<p>A negative value -N indicates that the child was terminated by signal N (Unix only).</p>
</div>
<span class="comment-copy">I'm using python 2.7, should have said that. Sorry. I will edit my question</span>
<span class="comment-copy">I've read about thet check_output, I tried to use it but it didn't work, will try it again. Thanks. Do you happen to know how to use it with a longer command like the sudo find ... in my first post?</span>
<span class="comment-copy">Is this more pythonic, if I don't care about err message?: def lsCommand():   process = subprocess.check_output(['ls','-l'])   return process</span>
<span class="comment-copy">As I understand, the find example you gave at the end of the post, can't be done with the check_output methode because you're using stdout=subprocess.PIPE and this can cause deadlocks according to the documentation. Am I right?</span>
<span class="comment-copy">ah, you <code>wc.communicate()</code></span>
<span class="comment-copy">Thank you, very helpful.</span>
<span class="comment-copy">If its solve your problem, select it as answer</span>
<span class="comment-copy">it partially solves the question, but I'm still wondering if this is the cleanest code to write on python 2.7 to get the output from a shell command. Or are there any cleaner ways?</span>
