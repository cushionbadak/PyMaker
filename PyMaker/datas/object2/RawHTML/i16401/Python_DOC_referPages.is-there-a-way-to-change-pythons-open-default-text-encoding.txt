<div class="post-text" itemprop="text">
<p>Can I change default <a href="https://docs.python.org/3/library/functions.html#open" rel="noreferrer"><code>open()</code></a> <sup>(<a href="https://docs.python.org/2.7/library/io.html#io.open" rel="noreferrer"><code>io.open()</code> in 2.7</a>)</sup> text encoding in a cross-platform way?</p>
<p>So that I didn't need to specify each time <code>open(...,encoding='utf-8')</code>.</p>
<blockquote>
<p>In text mode, if <em>encoding</em> is not specified the encoding used is platform dependent: <code>locale.getpreferredencoding(False)</code> is called to get the current locale encoding.</p>
</blockquote>
<p>Though documentation doesn't specify how to <em>set</em> preferred encoding. The function is in <code>locale</code> module, so I need to change locale? Is there any reliable cross-platform way to set UTF-8 locale? Will it affect anything else other than the default text file encoding?</p>
<p>Or locale changes are dangerous (can break something), and I should stick to custom wrapper such as:</p>
<pre><code>def uopen(*args, **kwargs):
    return open(*args, encoding='UTF-8', **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't change the locale or preferred encoding because; </p>
<ul>
<li>it may affect other parts of your code (or the libraries you're using); and</li>
<li>it wont be clear that your code depends on <code>open</code> using a specific encoding.</li>
</ul>
<p>Instead, use a simple wrapper:</p>
<pre><code>from functools import partial
open_utf8 = partial(open, encoding='UTF-8')
</code></pre>
<p>This has two other advantages:</p>
<ul>
<li>You can specify defaults for all keyword arguments (should you need to).</li>
<li>You can override the defaults when calling the function.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>you can set the encoding ... but its really hacky</p>
<pre><code>import sys
sys.getdefaultencoding() #should print your default encoding
sys.setdefaultencoding("utf8") #error ... no setdefaultencoding ... but...
reload(sys)
sys.setdefaultencoding("utf8")  #now it succeeds ...
</code></pre>
<p>I would instead do</p>
<p><strong>main_script.py</strong></p>
<pre><code>import __builtin__
old_open = open
def uopen(*args, **kwargs):
    return open(*args, encoding='UTF-8', **kwargs)
__builtin__.open = uopen
</code></pre>
<p>then anywhere you call <code>open</code> it will use the utf8 encoding ... however it may give you errors if you explicitly add an encoding</p>
<p>or just explicitly pass the encoding any time you open a file , or use your wrapper ...</p>
<p>pythons general philosophy is explicit is better than implicit, which implies the "right" solution is to explicitly declare your encoding when opening a file ...</p>
</div>
<div class="post-text" itemprop="text">
<p>I would not change anything in <code>locale</code>, as it could have a lot of side effects in other parts of your system. <code>open</code> is a system level function call, so its settings can have effects outside of that, or at a minimum other Python programs that use the same Python installation. Your wrapper looks appropriate, is very clean and portable, and looks to be the correct solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really need to change the default encoding, you can replace the built-in <code>open</code> function.</p>
<pre><code>original_open = __builtins__.open
def uopen(*args, **kwargs):
    if "b" not in (args[1] if len(args) &gt;= 2 else kwargs.get("mode", "")):
        kwargs.setdefault("encoding", "UTF-8")
    return original_open(*args, **kwargs)
__builtins__.open = uopen
</code></pre>
<p>I wrote and tested this snipped after I found <a href="https://mail.python.org/pipermail/python-list/2010-April/573829.html" rel="nofollow noreferrer">this mails</a> about replacing <code>print</code> on a mailing list.</p>
</div>
<span class="comment-copy">That's the right way to wrap functions. +1</span>
<span class="comment-copy">I've tried <code>locale.setlocale()</code> and it didn't change the default encoding on Windows. Even to a different non-Unicode one. So I decided to inspect CPython's source code and found out that <code>getpreferredencoding</code> <a href="https://github.com/python/cpython/blob/f7eae0adfcd4c50034281b2c69f461b43b68db84/Modules/_localemodule.c#L304" rel="nofollow noreferrer">uses</a> <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd318070(v=vs.85).aspx" rel="nofollow noreferrer">GetACP</a> WinAPI function, it "retrieves the current Windows ANSI code page identifier".</span>
<span class="comment-copy">There is no mechanism in Python to override this behavior except to use version-dependent hacks like the one suggested by Joran in the other answer and those found in the answers to <a href="https://stackoverflow.com/questions/31469707/changing-the-locale-preferred-encoding-in-python-3-in-windows">this question</a>. From what I've read, there is also no mechanism to set this encoding to UTF-8 in Windows outside of Python. Therefore, given the fact that there is no way to set this preference without resorting to hacks, I agree that changing this may be unreliable. Answer accepted.</span>
<span class="comment-copy">Hack with default encoding works only on Python 2.</span>
<span class="comment-copy">I'm not sure if it's safe to just overwrite the function in <code>builtins</code> as that also modifies the function in already imported modules and some libraries may rely on the default value. Still, it may come in handy in some cases. Thanks, +1</span>
