<div class="post-text" itemprop="text">
<p>I'm using this code to calculate hash value for a file: </p>
<pre><code>m = hashlib.md5()
with open("calculator.pdf", 'rb') as fh:
    while True:
        data = fh.read(8192)
        if not data:
            break
        m.update(data)
    hash_value = m.hexdigest()

    print  hash_value
</code></pre>
<p>when I tried it on a folder "folder"I got </p>
<pre><code>IOError: [Errno 13] Permission denied: folder
</code></pre>
<p>How could I calculate the hash value for a folder ?</p>
</div>
<div class="post-text" itemprop="text">
<p>This <a href="http://code.activestate.com/recipes/576973-getting-the-sha-1-or-md5-hash-of-a-directory/" rel="nofollow noreferrer">Recipe</a> provides a nice function to do what you are asking. I've modified it to use the MD5 hash, instead of the SHA1, as your original question asks</p>
<pre><code>def GetHashofDirs(directory, verbose=0):
  import hashlib, os
  SHAhash = hashlib.md5()
  if not os.path.exists (directory):
    return -1

  try:
    for root, dirs, files in os.walk(directory):
      for names in files:
        if verbose == 1:
          print 'Hashing', names
        filepath = os.path.join(root,names)
        try:
          f1 = open(filepath, 'rb')
        except:
          # You can't open the file for some reason
          f1.close()
          continue

        while 1:
          # Read file in as little chunks
          buf = f1.read(4096)
          if not buf : break
          SHAhash.update(hashlib.md5(buf).hexdigest())
        f1.close()

  except:
    import traceback
    # Print the stack traceback
    traceback.print_exc()
    return -2

  return SHAhash.hexdigest()
</code></pre>
<p>You can use it like this:</p>
<pre><code>print GetHashofDirs('folder_to_hash', 1)
</code></pre>
<p>The output looks like this, as it hashes each file:</p>
<pre class="lang-none prettyprint-override"><code>...
Hashing file1.cache
Hashing text.txt
Hashing library.dll
Hashing vsfile.pdb
Hashing prog.cs
5be45c5a67810b53146eaddcae08a809
</code></pre>
<p>The returned value from this function call comes back as the hash. In this case, <code>5be45c5a67810b53146eaddcae08a809</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use checksumdir python package available for calculating checksum/hash of directory. It's available at <a href="https://pypi.python.org/pypi/checksumdir/1.0.5">https://pypi.python.org/pypi/checksumdir/1.0.5</a></p>
<p><strong><em>Usage :</em></strong></p>
<pre><code>import checksumdir
hash = checksumdir.dirhash("c:\\temp")
print hash
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not a fan of how the recipe referenced in the answer was written. I have a much simpler version that I'm using:</p>
<pre><code>import hashlib
import os


def hash_directory(path):
    digest = hashlib.sha1()

    for root, dirs, files in os.walk(path):
        for names in files:
            file_path = os.path.join(root, names)

            # Hash the path and add to the digest to account for empty files/directories
            digest.update(hashlib.sha1(file_path[len(path):].encode()).digest())

            # Per @pt12lol - if the goal is uniqueness over repeatability, this is an alternative method using 'hash'
            # digest.update(str(hash(file_path[len(path):])).encode())

            if os.path.isfile(file_path):
                with open(file_path, 'rb') as f_obj:
                    while True:
                        buf = f_obj.read(1024 * 1024)
                        if not buf:
                            break
                        digest.update(buf)

    return digest.hexdigest()
</code></pre>
<p>I found exceptions were usually being thrown whenever something like an <code>alias</code> was encountered (shows up in the <code>os.walk()</code>, but you can't directly open it). The <code>os.path.isfile()</code> check takes care of those issues.</p>
<p>If there were to be an actual file within a directory I'm attempting to hash and it couldn't be opened, skipping that file and continuing is not a good solution. That affects the outcome of the hash. Better to kill the hash attempt altogether. Here, the <code>try</code> statement would be wrapped around the call to my <code>hash_directory()</code> function.</p>
<pre><code>&gt;&gt;&gt; try:
...   print(hash_directory('/tmp'))
... except:
...   print('Failed!')
... 
e2a075b113239c8a25c7e1e43f21e8f2f6762094
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I keep seeing this code propagated through various forums.</p>
<p>The <a href="/a/24937710">ActiveState recipe answer</a> works but, as Antonio pointed out, it is not guaranteed to be repeatable across filesystems, due to not being able to present the files in the same order (try it).  One fix is to change</p>
<pre class="lang-python prettyprint-override"><code>for root, dirs, files in os.walk(directory):
  for names in files:
</code></pre>
<p>to</p>
<pre class="lang-python prettyprint-override"><code>for root, dirs, files in os.walk(directory):
  for names in sorted(files): 
</code></pre>
<p>(Yes I'm being lazy here.  This sorts the filenames only and not the directories.  The same principle applies)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an implementation that uses pathlib.Path instead of relying on os.walk. It sorts the directory contents before iterating so it should be repeatable on multiple platforms. It also updates the hash with the names of files/directories, so adding empty files and directories will change the hash.</p>
<p>Version with type annotations (Python 3.6 or above):</p>
<pre><code>import hashlib
from _hashlib import HASH as Hash
from pathlib import Path
from typing import Union


def md5_update_from_file(filename: Union[str, Path], hash: Hash) -&gt; Hash:
    assert Path(filename).is_file()
    with open(str(filename), "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash.update(chunk)
    return hash


def md5_file(filename: Union[str, Path]) -&gt; str:
    return str(md5_update_from_file(filename, hashlib.md5()).hexdigest())


def md5_update_from_dir(directory: Union[str, Path], hash: Hash) -&gt; Hash:
    assert Path(directory).is_dir()
    for path in sorted(Path(directory).iterdir()):
        hash.update(path.name.encode())
        if path.is_file():
            hash = md5_update_from_file(path, hash)
        elif path.is_dir():
            hash = md5_update_from_dir(path, hash)
    return hash


def md5_dir(directory: Union[str, Path]) -&gt; str:
    return str(md5_update_from_dir(directory, hashlib.md5()).hexdigest())
</code></pre>
<p>Without type annotations:</p>
<pre><code>import hashlib
from pathlib import Path


def md5_update_from_file(filename, hash):
    assert Path(filename).is_file()
    with open(str(filename), "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash.update(chunk)
    return hash


def md5_file(filename):
    return md5_update_from_file(filename, hashlib.md5()).hexdigest()


def md5_update_from_dir(directory, hash):
    assert Path(directory).is_dir()
    for path in sorted(Path(directory).iterdir()):
        hash.update(path.name.encode())
        if path.is_file():
            hash = md5_update_from_file(path, hash)
        elif path.is_dir():
            hash = md5_update_from_dir(path, hash)
    return hash


def md5_dir(directory):
    return md5_update_from_dir(directory, hashlib.md5()).hexdigest()
</code></pre>
<p>Condensed version if you only need to hash directories:</p>
<pre><code>def md5_update_from_dir(directory, hash):
    assert Path(directory).is_dir()
    for path in sorted(Path(directory).iterdir()):
        hash.update(path.name.encode())
        if path.is_file():
            with open(path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash.update(chunk)
        elif path.is_dir():
            hash = md5_update_from_dir(path, hash)
    return hash


def md5_dir(directory):
    return md5_update_from_dir(directory, hashlib.md5()).hexdigest()
</code></pre>
<p>Usage: <code>md5_hash = md5_dir("/some/directory")</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I have optimized further on Andy's response.</p>
<p>The following is a python3 rather than python2 implementation. It uses SHA1, handles some cases where encoding is needed, is linted, and includes some doctrings.</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""dir_hash: Return SHA1 hash of a directory.
- Copyright (c) 2009 Stephen Akiki, 2018 Joe Flack
- MIT License (http://www.opensource.org/licenses/mit-license.php)
- http://akiscode.com/articles/sha-1directoryhash.shtml
"""
import hashlib
import os


def update_hash(running_hash, filepath, encoding=''):
    """Update running SHA1 hash, factoring in hash of given file.

    Side Effects:
        running_hash.update()
    """
    if encoding:
        file = open(filepath, 'r', encoding=encoding)
        for line in file:
            hashed_line = hashlib.sha1(line.encode(encoding))
            hex_digest = hashed_line.hexdigest().encode(encoding)
            running_hash.update(hex_digest)
        file.close()
    else:
        file = open(filepath, 'rb')
        while True:
            # Read file in as little chunks.
            buffer = file.read(4096)
            if not buffer:
                break
            running_hash.update(hashlib.sha1(buffer).hexdigest())
        file.close()


def dir_hash(directory, verbose=False):
    """Return SHA1 hash of a directory.

    Args:
        directory (string): Path to a directory.
        verbose (bool): If True, prints progress updates.

    Raises:
        FileNotFoundError: If directory provided does not exist.

    Returns:
        string: SHA1 hash hexdigest of a directory.
    """
    sha_hash = hashlib.sha1()

    if not os.path.exists(directory):
        raise FileNotFoundError

    for root, dirs, files in os.walk(directory):
        for names in files:
            if verbose:
                print('Hashing', names)
            filepath = os.path.join(root, names)
            try:
                update_hash(running_hash=sha_hash,
                            filepath=filepath)
            except TypeError:
                update_hash(running_hash=sha_hash,
                            filepath=filepath,
                            encoding='utf-8')

    return sha_hash.hexdigest()
</code></pre>
</div>
<span class="comment-copy">For what purpose? Unique identification? Use the full folder path or inode. To identify its contents? Then iterate through its full contents and hash that.</span>
<span class="comment-copy">You must calculate the hash value of all its files and the files of its subfolders.</span>
<span class="comment-copy">Konrad's correct in that there's lots of ambiguity in the question.  Another possibility he hasn't listed is hashing the directory entry meta-data, which could be used for a quick/rough check whether content has changed.  BTW, some OSes do let you "open" a directory much as if it was a text file and the code above for files would already "work" for whatever metadata the directory "file" stream produced.  As is, the question deserves to be closed unless the need or aim is clarified.</span>
<span class="comment-copy">There's <a href="https://gist.github.com/techtonik/5175896" rel="nofollow noreferrer">this gist</a> with an imo cleaner code. There's also a designated package <a href="https://pypi.python.org/pypi/checksumdir" rel="nofollow noreferrer">checksumdir</a> and <a href="https://pypi.python.org/pypi/dirtools" rel="nofollow noreferrer">dirtools</a> that has hashing-capabilities.</span>
<span class="comment-copy">What is intented for the <code>import traceback</code> ?</span>
<span class="comment-copy">@begueradj, In this case, <a href="https://docs.python.org/2/library/traceback.html#traceback.print_exc" rel="nofollow noreferrer">traceback</a>, is used to print the stacktrace if an error occurs while hashing</span>
<span class="comment-copy">Just ignoring a file you couldn't open doesn't sound as at the correct approach to me. Furthermore, <a href="http://stackoverflow.com/a/18282401/2436175">you cannot guarantee</a> e.g. on different filesystems that os.walk will navigate the files in the same order.</span>
<span class="comment-copy">Is this recursive?</span>
<span class="comment-copy">@TheQuantumPhysicist yes it is because <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">os.walk</a> is.</span>
<span class="comment-copy">Note: <code>checksumdir</code> is not tested (even when claiming to be stable). Using it is (arguably) <i>less</i> trustworthy than using the recipe, that at least forces you to read the recipe.</span>
<span class="comment-copy">Good stuff, but note this hash won't change if you add empty file or directory.</span>
<span class="comment-copy">I added <code>digest.update(str(hash(file_path[len(path):])).encode())</code> for each <code>file_path</code> and <code>dir_path</code>. Hash ensures that this hash will be dependent on <code>PYTHONHASHSEED</code>, so faking this hash calculation will be really difficult.</span>
<span class="comment-copy">@pt12lol  I really like that idea - I hadn't considered that possibility - but I think using <code>hash</code> isn't the right solution. The result for the function will be different between Python 2 and Python 3 (I just tried this on my Mac).   What about using <code>hashlib</code> again?   <code>python digest.update(hashlib.sha1(file_path.encode()).digest()) </code></span>
<span class="comment-copy">No wonder that this hash differs between Python 2 and 3, because Python 3 introduces variable <code>PYTHONHASHSEED</code> that differs between every single Python run and <code>hash</code> relies on it. I suppose you are asserting directory hash with hardcoded value and <code>digest</code> is definitely better in this case. To be honest I don't have my code dependent on hardcoded values so I didn't care about it, only cared about uniqueness. In my case <code>hash</code> is even safer than <code>digest</code>.</span>
<span class="comment-copy">Is there any particular reason for choosing 1024*1024 as the buffer size?</span>
