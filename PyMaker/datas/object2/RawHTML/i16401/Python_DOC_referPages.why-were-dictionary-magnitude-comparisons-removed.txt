<div class="post-text" itemprop="text">
<p>Just curious, nothing more. Why were dictionary magnitude comparisons (<code>&gt; &lt; &gt;= &lt;=</code>) removed in Python3? What's the reason that brought to delete them?</p>
<p>For example: <code>dictA &gt; dictB</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Arbitrary comparison ordering was removed from Python 3, see <a href="https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="nofollow"><em>Ordering Comparisons</em> in the <em>What's New in Python 3.0</em> documentation</a>.</p>
<p>There is no meaningful natural ordering between dictionaries. Python 2 only pretended there was to play nice with sorting mixed lists, but this only led to enormous confusion.</p>
<p>Take comparing strings with integers for example; integers are <em>always smaller</em> than strings in Python:</p>
<pre><code>&gt;&gt;&gt; 10 &lt; "10"
True
</code></pre>
<p>Many a beginner will try to compare strings with integers anyway; it is natural to use <code>number = raw_input('Pick a number! ')</code> and then try to compare this with an integer; and sometimes this will <em>look</em> like it is working! In Python 3 this is now an error.</p>
<p>The same applies to the majority of objects; unless they explicitly define comparison methods (<code>__lt__</code>, <code>__gt__</code>, etc.) the types are not orderable. This includes dictionaries.</p>
</div>
<span class="comment-copy">What are <i>dictionary magnitude comparisons</i>?</span>
<span class="comment-copy">I'm guessing it's something like <code>if dict_a &gt; dict_b:</code>, which runs in Python 2, but gives <code>TypeError: unorderable types</code> in Python 3.</span>
<span class="comment-copy">You could try searching the relevant commit history, which is public.  It may contain a rationale, a link to a PEP, or a reference to a mailing list discussion.</span>
<span class="comment-copy">You mean the <a href="https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="nofollow noreferrer">simplification of ordering comparisons</a>? That's been done in Python 3.0.</span>
<span class="comment-copy">If so, then this is closely related to <a href="http://stackoverflow.com/q/2214194">Is everything greater than None?</a> and other such posts.</span>
<span class="comment-copy">According to "Learning Python" by Mark Lutz: "magnitude comparisons for dictionaries are removed in Python 3.X because they incur too much overhead when equality is desired". So I don't get, were they removed for meaningful reason or performance reason?</span>
<span class="comment-copy">@antox: The Python 2 comparison code was rather arbitrary; there is no natural order for dictionaries. I don't agree with Lutz's assertion as to why this was removed.</span>
<span class="comment-copy">I don't know if it can help but it continues saying: "...when eqaulity is desired (equality uses an optimized scheme in 3.X that doesn't literally compare sorted key/value lists)"</span>
<span class="comment-copy">@antox: The <a href="http://hg.python.org/cpython/file/bf1b0afe419b/Objects/dictobject.c#l2130" rel="nofollow noreferrer">Python 3 version of <code>dict_equal()</code></a> is essentially no different from the <a href="http://hg.python.org/cpython/file/5549075d6223/Objects/dictobject.c#l1840" rel="nofollow noreferrer">version in Python 2</a>; it is only the <code>dict_compare</code> implementation in Python 2 that is really different here (and absent in Py 3).</span>
