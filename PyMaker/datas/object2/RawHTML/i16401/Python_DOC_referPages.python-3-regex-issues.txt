<div class="post-text" itemprop="text">
<p>So I have an issue with matching a regex string in Python.  I've tested it on <a href="http://regex101.com/" rel="nofollow">http://regex101.com/</a> and it works fine.  However, when I try to do it in my code, it gives me a malformed regex expression error</p>
<p>The regular expression is: "[^\\]\]PW\[".  What I intend it to do is that I want it to find me the string ]PW[, so long as it doesn't start with a backslash immediately preceding it.
Here's the code:</p>
<pre><code>import sys,re
fileList = []
if len(sys.argv) == (0 or 1):
    fileList = ['tester.sgf']
else:
    fileList = str(sys.argv)
for sgfName in fileList:
    print(sgfName)
    currentSGF = open(sgfName,'r').read()
    currentSGF = currentSGF.replace("\r","") #clean the string
    currentSGF = currentSGF.replace("\n","")
for iterations in re.finditer("[^\\]\]PW\[",currentSGF): #here's the issue
    print(iterations.start(0), iterations.end(0), iterations.group())
</code></pre>
<p>And the error I get is:</p>
<pre><code>Traceback (most recent call last):
File "C:\Users\Josh\Desktop\New folder\sgflib1.0\test2.py", line 15, in &lt;module&gt;
for iterations in re.finditer("[^\\]\]PW\[",currentSGF):
File "C:\Python33\lib\re.py", line 210, in finditer
  return _compile(pattern, flags).finditer(string)
File "C:\Python33\lib\re.py", line 281, in _compile
  p = sre_compile.compile(pattern, flags)
File "C:\Python33\lib\sre_compile.py", line 491, in compile
  p = sre_parse.parse(p, flags)
File "C:\Python33\lib\sre_parse.py", line 747, in parse
  p = _parse_sub(source, pattern, 0)
File "C:\Python33\lib\sre_parse.py", line 359, in _parse_sub
  itemsappend(_parse(source, state))
File "C:\Python33\lib\sre_parse.py", line 485, in _parse
  raise error("unexpected end of regular expression")
sre_constants.error: unexpected end of regular expression
</code></pre>
<p>Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use a <em>raw string literal</em> or double all escapes:</p>
<pre><code>re.finditer(r"[^\\]\]PW\[", currentSGF)
</code></pre>
<p>or</p>
<pre><code>re.finditer("[^\\\\]\\]PW\\[", currentSGF)
</code></pre>
<p>Otherwise each escape sequence is first interpreted by Python as part of the literal string value interpretation. <code>re.finditer</code> sees the value <code>'[^\]]PW[</code> otherwise, as <code>\]</code> and <code>\[</code> have no special meaning.</p>
<p>See <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow"><em>The Backslash Plague</em></a> in he Python regex HOWTO.</p>
</div>
