<div class="post-text" itemprop="text">
<p>I've done an extensive search for the answer but can't figure out how to properly search for the answer to the meaning of the following line of code:</p>
<pre><code>rating, created = Vote.objects.get(**kwargs), False
</code></pre>
<p>I saw it in <a href="https://github.com/dcramer/django-ratings" rel="nofollow">django-ratings</a>. It is in the file, fields.py on line 179.  Is it standard Python language?  Could you explain what it means?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, that line is standard Python.  It utilizes a feature known as <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">"iterable unpacking"</a> (also known as "mutiple assignment", "sequence unpacking", or just plain "unpacking").</p>
<p>The code on the right of the <code>=</code> sign is simply a tuple.  It is no different than doing:</p>
<pre><code>rating, created = (Vote.objects.get(**kwargs), False)
</code></pre>
<p>When Python encounters a line such as the above, it unpacks this tuple into the names on the left of the <code>=</code> sign (<code>rating</code> and <code>created</code> in this case).  Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; a, b = 'a', 'b'
&gt;&gt;&gt; a
'a'
&gt;&gt;&gt; b
'b'
&gt;&gt;&gt;
</code></pre>
<p>So, in the example line you posted, <code>rating</code> is assigned to <code>Vote.objects.get(**kwargs)</code> and <code>created</code> is assigned to <code>False</code>.  You could achieve the same by doing:</p>
<pre><code>rating = Vote.objects.get(**kwargs)
created = False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is called "multiple assignment".  It's a way of assigning multiple values to multiple names in one line.</p>
<p>This statement:</p>
<pre><code>rating, created = Vote.objects.get(**kwargs), False
</code></pre>
<p>Is just a shortened version of these statements:</p>
<pre><code>rating = Vote.objects.get(**kwargs)
created = False
</code></pre>
</div>
<span class="comment-copy">It is called simultaneous assignment, or multiple assignment.  It is a shortened way of assigning the result of <code>Vote.objects.get(**kwargs)</code> to the name <code>rating</code>, and <code>False</code> to the name <code>created</code>.  Is that what you were confused about?</span>
<span class="comment-copy">Explanation of ** syntax; First imagine that *list, expands each item in the list to constituent items, **dict does the same thing for a dict, except each item is a (k,v) pair. ex. a=(1,2,3). f(*a) = f(1,2,3). d={'b': 2}, f(**d) = f(b=2).</span>
<span class="comment-copy">Well, the documentation calls it "multiple assignment" in tutorial, but it is not any different from any other case of iterable unpacking. Namely, the number of args on left and right side for example are matched only at run time.</span>
<span class="comment-copy">Shorter maybe, but takes longer to run and longer to read</span>
<span class="comment-copy">Does it really take longer to run?  Why would anyone write multiple assignment rather than separated into 2 lines of code.  An obvious advantage is that it's easier to read for beginners.  And if multiple assignment is slower to run, what do you suppose is the reason to use it?</span>
