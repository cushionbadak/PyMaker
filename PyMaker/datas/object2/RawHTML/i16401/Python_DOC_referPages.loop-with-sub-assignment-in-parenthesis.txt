<div class="post-text" itemprop="text">
<p>Is there a way to do this in Python? (I know you can do it Java.)</p>
<pre><code>#PSEUDO CODE!!
while (inp = input()) != 'quit'
    print(inp)
</code></pre>
<p>E.g. In java the above pseudo code translates to:</p>
<pre><code>BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
try {
    String inp;
    while (!(inp = reader.readLine()).equals("quit")) {
        System.out.println(inp);
    }
} catch (IOException io) {
    System.out.println(io.toString());
}
</code></pre>
<hr/>
<p>EDIT:</p>
<p>... answered... but is this the only way?</p>
<pre><code>while True:
    inp = input()
    if inp == 'quit':
        break
    print(inp)
print('eof')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong></p>
<p>In this particular case, you could use a for-loop and <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a>:</p>
<pre><code>for inp in iter(input, 'quit'):
    print(inp)
</code></pre>
<p><code>iter(input, 'quit')</code> will keep calling the <code>input</code> function and assigning its return value to <code>inp</code> as long as this value does not equal <code>'quit'</code>.</p>
<hr/>
<p>No, you cannot perform inline assignments in Python.  The <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">grammar</a> simply doesn't allow it (remember that assignments are statements in Python).</p>
<p>You can however do something like this:</p>
<pre><code>while True:            # Loop continuously
    inp = input()      # Get the input
    if inp == 'quit':  # If it equals 'quit'...
        break          # ...then break the loop
    print(inp)         # Otherwise, continue with the loop
</code></pre>
<p>It is roughly equivalent to what you wanted to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define inp before your loop and reassign inside the while:</p>
<pre><code>inp = None
while inp  != 'quit':
    print(inp)
    inp = input()
</code></pre>
<p>If you want to quit before entering the while loop set <code>inp = input()</code> initially.</p>
<pre><code>inp = input()
while inp  != 'quit':
    print(inp)
    inp = input()
</code></pre>
</div>
<span class="comment-copy">@PadriacCunningham Good optimization (I was almost there). But it still prints "quit" which is different from OP behaviour.</span>
<span class="comment-copy">@JanVlcinsky, you can set the initial value to input which will quit before entering the while loop.</span>
