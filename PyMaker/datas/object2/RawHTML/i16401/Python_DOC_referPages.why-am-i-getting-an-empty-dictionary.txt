<div class="post-text" itemprop="text">
<p>I am learning python from an introductory Python textbook and I am stuck on the following problem: </p>
<p>You will implement function index() that takes as input the name of a text file and a list of words. For every word in the list, your function will find the lines in the text file where the word occurs and print the corresponding line numbers. </p>
<p>Ex: </p>
<pre><code> &gt;&gt;&gt;&gt; index('raven.txt', ['raven', 'mortal', 'dying', 'ghost', 'ghastly', 'evil', 'demon'])

 ghost     9 
 dying     9 
 demon     122
 evil      99, 106
 ghastly   82
 mortal    30 
 raven     44, 53, 55, 64, 78, 97, 104, 111, 118, 120
</code></pre>
<p>Here is my attempt at the problem: </p>
<pre><code>def index(filename, lst):
    infile = open(filename, 'r')
    lines =  infile.readlines()
    lst = []
    dic = {}
    for line in lines:
        words = line.split()
        lst. append(words)
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if lst[i][j] in lst:
                dic[lst[i][j]] = i 
    return dic
</code></pre>
<p>When I run the function, I get back an empty dictionary. I do not understand why I am getting an empty dictionary. So what is wrong with my function? Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>You are overwriting the value of <code>lst</code>. You use it as both a parameter to a function (in which case it is a list of strings) and as the list of words in the file (in which case it's a list of list of strings). When you do:</p>
<pre><code>if lst[i][j] in lst
</code></pre>
<p>The comparison always returns <code>False</code> because <code>lst[i][j]</code> is a <code>str</code>, but <code>lst</code> contains only lists of strings, not strings themselves. This means that the assignment to the <code>dic</code> is never executed and you get an empty <code>dict</code> as result.</p>
<p>To avoid this you should use a different name for the list in which you store the words, for example:</p>
<pre><code>In [4]: !echo 'a b c\nd e f' &gt; test.txt

In [5]: def index(filename, lst):
   ...:     infile = open(filename, 'r')
   ...:     lines =  infile.readlines()
   ...:     words = []
   ...:     dic = {}
   ...:     for line in lines:
   ...:         line_words = line.split()
   ...:         words.append(line_words)
   ...:     for i in range(len(words)):
   ...:         for j in range(len(words[i])):
   ...:             if words[i][j] in lst:
   ...:                 dic[words[i][j]] = i 
   ...:     return dic
   ...: 

In [6]: index('test.txt', ['a', 'b', 'c'])
Out[6]: {'a': 0, 'c': 0, 'b': 0}
</code></pre>
<hr/>
<p>There are also a lot of things you can change.</p>
<p>When you want to iterate a list you don't have to explicitly use indexes. If you need the index you can use <code>enumerate</code>:</p>
<pre><code>    for i, line_words in enumerate(words):
        for word in line_words:
            if word in lst: dict[word] = i
</code></pre>
<p>You can also iterate directly on a file (refer to <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow">Reading and Writing Files</a> section of the python tutorial for a bit more information):</p>
<pre><code># use the with statement to make sure that the file gets closed
with open('test.txt') as infile:
    for i, line in enumerate(infile):
        print('Line {}: {}'.format(i, line))
</code></pre>
<p>In fact I don't see why would you first build that <code>words</code> list of list. Just itertate on the file directly while building the dictionary:</p>
<pre><code>def index(filename, lst):
    with open(filename, 'r') as infile:
        dic = {}
        for i, line in enumerate(infile):
            for word in line.split():
                if word in lst:
                    dic[word] = i 
    return dic
</code></pre>
<hr/>
<p>Your <code>dic</code> values should be lists, since more than one line can contain the same word. As it stands your <code>dic</code> would only store the last line where a word is found:</p>
<pre><code>from collections import defaultdict

def index(filename, words):
    # make faster the in check afterwards
    words = frozenset(words)  
    with open(filename) as infile:
        dic = defaultdict(list)
        for i, line in enumerate(infile):
            for word in line.split():
                if word in words:
                    dic[word].append(i)
    return dic
</code></pre>
<p>If you don't want to use the <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a> you can replace <code>dic = defaultdict(list)</code> with <code>dic = {}</code> and then change the:</p>
<pre><code>dic[word].append(i)
</code></pre>
<p>With:</p>
<pre><code>if word in dic:
    dic[word] = [i]
else:
    dic[word].append(i)
</code></pre>
<p>Or, alternatively, you can use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>dict.setdefault</code></a>:</p>
<pre><code>dic.setdefault(word, []).append(i)
</code></pre>
<p>although this last way is a bit slower than the original code.</p>
<p>Note that all these solutions have the property that if a word isn't found in the file it will not appear in the result at all. However you may want it in the result, with an emty list as value. In such a case it's simpler the <code>dict</code> with empty lists before starting to loop, such as in:</p>
<pre><code>dic = {word : [] for word in words}
for i, line in enumerate(infile):
    for word in line.split():
        if word in words:
            dic[word].append(i)
</code></pre>
<p>Refer to the documentation about <a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List Comprehensions</a> and <a href="https://docs.python.org/3.4/tutorial/datastructures.html#dictionaries" rel="nofollow">Dictionaries</a> to understand the first line.</p>
<p>You can also iterate over <code>words</code> instead of the line, like this:</p>
<pre><code>dic = {word : [] for word in words}
for i, line in enumerate(infile):
    for word in words:
        if word in line.split():
            dic[word].append(i)
</code></pre>
<p>Note however that this is going to be slower because:</p>
<ul>
<li><code>line.split()</code> returns a list, so <code>word in line.split()</code> will have to scan all the list.</li>
<li>You are repeating the computation of <code>line.split()</code>.</li>
</ul>
<p>You can try to solve these two problems doing:</p>
<pre><code>dic = {word : [] for word in words}
for i, line in enumerate(infile):
    line_words = frozenset(line.split())
    for word in words:
        if word in line_words:
            dic[word].append(i)
</code></pre>
<p>Note that here we are iterating once over <code>line.split()</code> to build the set and also over <code>words</code>. Depending on the sizes of the two sets this may be slower or faster than the original version (iteratinv over <code>line.split()</code>).</p>
<p>However at this point it's probably faster to intersect the sets:</p>
<pre><code>dic = {word : [] for word in words}
for i, line in enumerate(infile):
    line_words = frozenset(line.split())
    for word in words &amp; line_words:  # &amp; stands for set intersection
        dic[word].append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>def index(filename, lst):
    dic = {w:[] for w in lst}
    for n,line in enumerate( open(filename,'r') ):
        for word in lst:
            if word in line.split(' '):
                dic[word].append(n+1)
    return dic
</code></pre>
<p>There are some features of the language introduced here that you should be aware of because they will make life a lot easier in the long run.</p>
<p>The first is a dictionary comprehension.  It basically initializes a dictionary using the words in <code>lst</code> as keys and an empty list <code>[]</code> as the value for each key.</p>
<p>Next the <code>enumerate</code> command.  This allows us to iterate over the items in a sequence but also gives us the index of those items.  In this case, because we passed a file object to <code>enumerate</code> it will loop over the lines.  For each iteration, <code>n</code> will be the 0-based index of the line and <code>line</code> will be the line itself.  Next we iterate over the words in <code>lst</code>.</p>
<p>Notice that we don't need any indices here.  Python encourages looping over objects in sequences rather than looping over indices and then accessing the objects in a sequence based on index (for example discourages doing <code>for i in range(len(lst)): do something with lst[i])</code>.</p>
<p>Finally, the <code>in</code> operator is a very straightforward way to test membership for many types of objects and the syntax is very intuitive.  In this case, we are asking is the current word from <code>lst</code> in the current <code>line</code>.</p>
<p>Note that we use <code>line.split(' ')</code> to get a list of the words in the line.  If we don't do this, <code>'the' in 'there was a ghost'</code> would return <code>True</code> as <code>the</code> is a substring of one of the words.</p>
<p>On the other hand <code>'the' in ['there', 'was', 'a', 'ghost']</code> would return <code>False</code>.  If the conditional returns <code>True</code>, we append it to the list associated to the key in our dictionary. </p>
<p>That might be a lot to chew on, but these concepts make problems like this more straight forward. </p>
</div>
<div class="post-text" itemprop="text">
<p>First, your function param with the words is named <code>lst</code> and also the list where you put all the words in the file is also named <code>lst</code>, so you are not saving the words passed to your functions, because on line 4 you're redeclaring the list.</p>
<p>Second, You are iterating over each line in the file (the first <code>for</code>), and getting the words in that line. After that <code>lst</code> has all the words in the entire file. So in the <code>for i ...</code> you are iterating over all the words readed from the file, there's no need to use the third <code>for j</code> where you are iterating over each character in every word.</p>
<p>In resume, in that <code>if</code> you are saying "<em>If this single character is in the lists of words ...</em>" wich is not, so the dict will be never filled up.</p>
<pre><code>for i in range(len(lst)):
  if words[i] in lst:
    dic[words[i]] = dic[words[i]] + i  # To count repetitions
</code></pre>
<p>You need to rethink the problem, even my answer will fail because the word in the dict will not exist giving an error, but you get the point. Good luck!</p>
</div>
<span class="comment-copy">You are reassign <code>[]</code> to given parameter <code>lst</code> in line <code>lst = []</code>. This is just a typo.</span>
<span class="comment-copy">To be quite honest, the logic is quite wrong in multiple ways. I'd recommend that you first revisit the algorithm you're trying to implement.</span>
<span class="comment-copy">Thanks a lot for the detailed response. Looking back on the problem, I forgot that I had lst as an input for the function. So, I am kinda of embarrassed for asking such a simple question. Nonetheless, thank you for your response. I learned a lot from it.</span>
