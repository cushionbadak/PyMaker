<div class="post-text" itemprop="text">
<p>If I know the key name, how can I find the list index when data is structured like this?</p>
<pre><code>foo = [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}]
</code></pre>
<p>For example, given the string <code>'key2'</code>, what is its index in the list above?</p>
<p>My current code:</p>
<pre><code>for i in xrange(len(foo)):
    if foo[i].keys()[0] == 'key1':
        print i
</code></pre>
<p>I'm curious however if there is some slick technique that does not require an explicit loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a>, <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a>, and a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a>:</p>
<pre><code>&gt;&gt;&gt; foo = [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}]
&gt;&gt;&gt; next((i for i,d in enumerate(foo) if 'key1' in d), None)
0
&gt;&gt;&gt; next((i for i,d in enumerate(foo) if 'key2' in d), None)
1
&gt;&gt;&gt; next((i for i,d in enumerate(foo) if 'key3' in d), None)
2
&gt;&gt;&gt; next((i for i,d in enumerate(foo) if 'key4' in d), None)
&gt;&gt;&gt;
</code></pre>
<p>Note that you can also replace <code>None</code> with any default value:</p>
<pre><code>&gt;&gt;&gt; next((i for i,d in enumerate(foo) if 'key4' in d), 'not found')
'not found'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Also, I would like to mention that doing:</p>
<pre><code>if foo[i].keys()[0] == 'key1':
</code></pre>
<p>will not always work if the dictionaries have more than one item.  This is because a dictionary's keys are naturally unordered:</p>
<pre><code>&gt;&gt;&gt; d = {'abc':1, 'xyz':2}
&gt;&gt;&gt; d.keys()
['xyz', 'abc']
&gt;&gt;&gt;
</code></pre>
<p>In addition, there is no need to call the <code>keys</code> method of a dictionary to search its keys because you have the <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow"><code>in</code> operator</a>:</p>
<pre><code>&gt;&gt;&gt; 'abc' in d
True
&gt;&gt;&gt; 'def' in d
False
&gt;&gt;&gt;
</code></pre>
<p>This solution is also a lot more efficient because it avoids creating an unnecessary list.</p>
</div>
<span class="comment-copy">Have you tried anything at all?</span>
<span class="comment-copy"><code>foo.keys().index('key1')</code></span>
<span class="comment-copy">@Josh <code>foo</code> is a list.</span>
<span class="comment-copy">@undefinedisnotafunction now why on earth would he do that? I apologize, I didn't realize we weren't dealing with a dictionary.</span>
<span class="comment-copy">@bholben - I moved your comment into your question so that it is more visible.</span>
<span class="comment-copy">I think you should now also explain what's wrong with using <code>if foo[i].keys()[0] == 'key1'</code>. :)</span>
<span class="comment-copy">Generators are new to me.  This looks like a great opportunity for me to embrace them.  Thanks for the help!</span>
<span class="comment-copy">@undefinedisnotafunction - Better? :)</span>
<span class="comment-copy">@iCodez +1 Surely!</span>
