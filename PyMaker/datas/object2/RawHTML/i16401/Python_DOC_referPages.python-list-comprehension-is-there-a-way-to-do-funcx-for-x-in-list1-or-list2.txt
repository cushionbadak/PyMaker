<div class="post-text" itemprop="text">
<p>Or  [func(x) for x in list1 and list2] (for some function <code>func</code>), without having to create a new list that happens to be the union or intersection of the two lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain</code></a> to join the two lists without creating a new one:</p>
<pre><code>from itertools import chain
lst = [x for x in chain(list1, list2)]
</code></pre>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list1 = [1, 2, 3]
&gt;&gt;&gt; list2 = [4, 5, 6]
&gt;&gt;&gt; [x for x in chain(list1, list2)]
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; list(chain(list1, list2))  # Equivalent
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

[x for x in itertools.chain(list1,list2)]
</code></pre>
<p>Note that this will add duplicates, so it's neither a union nor an intersection. If you want a true union/intersection:</p>
<pre><code>set.union(map(set, [list1,list2])) # cast to list if you need
# union
set.intersection(map(set, [list1,list2])) # cast to list if you need
# intersection
</code></pre>
<p>From your edit:</p>
<pre><code>def func(x):
    pass
    # do something useful

for element in list1:
    if element in list2:
        func(element)
# Or, but less readably imo
# # for element in filter(lambda x: x in list2, list1):
# #     func(element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain()</code></a>.</p>
<pre><code>[... in itertools.chain(list1, list2)]
</code></pre>
</div>
<span class="comment-copy">You're using a list comprehension so you're going to end up with a new list. If you just want the union of the two lists, you can just do <code>list1.extend(list2)</code>. This will modify <code>list1</code> without creating a new list.</span>
<span class="comment-copy">I guess I simplified the example too much. My bad, I edited to fix that. I'm doing something with x (let's say pairing it up with another value). so it is not just that I am creating a new list that happens to be  union/intersection of list1 and list2.</span>
<span class="comment-copy">@beetea: this might create duplicates.</span>
<span class="comment-copy">Both of these ways create new lists/sets. Right? It is not just checking if x is in list1 or list2. It is creating a third list and iterating over it.</span>
<span class="comment-copy">If that's all you want, try <code>filter(lambda x: x in list2, list1)</code></span>
<span class="comment-copy">@AnasElghafari check my edit</span>
<span class="comment-copy">of course this can be done in a for-loop (and actually only the intersection is straightforward. union is tricky). My question is whether Python's list comprehension offers a way to do this, without needing to create a new data structure. Python list comprehension seems quite powerful, but I haven't been able to do this task in it.</span>
<span class="comment-copy">@AnasElghafari <code>[func(x) for x in set.union(map(set, [list1,list2]))]</code> is the best you'll get for a union. For an intersection you can do <code>[func(x) for x in list1 if x in list2]</code></span>
