<div class="post-text" itemprop="text">
<p>The standard Python function <a href="https://docs.python.org/3/library/socket.html#socket.socketpair" rel="nofollow">socket.socketpair</a> is unfortunately not available on Windows (as of Python 3.4.1), how can I write a replacement that works on both Unix and Windows?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import socket
import errno


def create_sock_pair(port=0):
    """Create socket pair.

    If socket.socketpair isn't available, we emulate it.
    """
    # See if socketpair() is available.
    have_socketpair = hasattr(socket, 'socketpair')
    if have_socketpair:
        client_sock, srv_sock = socket.socketpair()
        return client_sock, srv_sock

    # Create a non-blocking temporary server socket
    temp_srv_sock = socket.socket()
    temp_srv_sock.setblocking(False)
    temp_srv_sock.bind(('', port))
    port = temp_srv_sock.getsockname()[1]
    temp_srv_sock.listen(1)

    # Create non-blocking client socket
    client_sock = socket.socket()
    client_sock.setblocking(False)
    try:
        client_sock.connect(('localhost', port))
    except socket.error as err:
        # EWOULDBLOCK is not an error, as the socket is non-blocking
        if err.errno != errno.EWOULDBLOCK:
            raise

    # Use select to wait for connect() to succeed.
    import select
    timeout = 1
    readable = select.select([temp_srv_sock], [], [], timeout)[0]
    if temp_srv_sock not in readable:
        raise Exception('Client socket not connected in {} second(s)'.format(timeout))
    srv_sock, _ = temp_srv_sock.accept()

    return client_sock, srv_sock
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.5 includes Windows support for <code>socket.socketpair()</code>. For Python 2.7+, you can use the <a href="https://pypi.python.org/pypi/backports.socketpair" rel="nofollow"><code>backports.socketpair</code> package</a> (which I authored) on PyPi:</p>
<pre><code>import socket
import backports.socketpair

s1, s2 = socket.socketpair()
</code></pre>
</div>
<span class="comment-copy">I'd use <code>errno.EWOULDBLOCK</code> rather than the number 10035.</span>
<span class="comment-copy">@RossRidge Thanks.</span>
<span class="comment-copy">Would +1 more than once if I could because both the knowledge that this problem went away starting with Python 3.5, and that there is a PyPi package to polyfill it on versions which didn't have it, answers the actual root problem that undoubtedly drives just about everyone to this question.</span>
