<div class="post-text" itemprop="text">
<p>Lets say that I have a list </p>
<pre><code>list = ['this','is','just','a','test']
</code></pre>
<p>how can I have a user do a wildcard search?</p>
<p>Search Word: 'th_s'</p>
<p>Would return 'this'</p>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are probably the easiest solution to this problem:</p>
<pre><code>import re
regex = re.compile('th.s')
l = ['this', 'is', 'just', 'a', 'test']
matches = [string for string in l if re.match(regex, string)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/fnmatch.html" rel="noreferrer"><code>fnmatch</code></a>:</p>
<pre><code>import fnmatch
lst = ['this','is','just','a','test']
filtered = fnmatch.filter(lst, 'th?s')
</code></pre>
<p>If you want to allow <code>_</code> as a wildcard, just <a href="http://docs.python.org/library/stdtypes.html#str.replace" rel="noreferrer">replace</a> all underscores with <code>'?'</code> (for one character) or <code>*</code> (for multiple characters).</p>
<p>If you want your users to use even more powerful filtering options, consider allowing them to use <a href="http://docs.python.org/library/re.html" rel="noreferrer">regular expressions</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try the <a href="https://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer">fnmatch</a> module, it's got a shell-like wildcard syntax</p>
<p>or can use <a href="http://www.tutorialspoint.com/python/python_reg_expressions.htm" rel="nofollow noreferrer">regular expressions</a></p>
<p>import re</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean any specific syntax for wildcards? Usually <code>*</code> stands for "one or many" characters and <code>?</code> stands for one.</p>
<p>The simplest way probably is to translate a wildcard expression into a regular expression, then use that for filtering the results.</p>
</div>
<div class="post-text" itemprop="text">
<p>Same idea as Yuushi in using regular expressions, but this uses the findall method within the re library instead of a list comprehension:</p>
<pre><code>import re
regex = re.compile('th.s')
l = ['this', 'is', 'just', 'a', 'test']
matches = re.findall(regex, string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Easy method is try <code>os.system</code>:</p>
<pre><code>import os
text = 'this is text'
os.system("echo %s | grep 't*'" % text)
</code></pre>
</div>
<span class="comment-copy">This shouldn't be accepted answer (regex doesn't process wildcard matches) - e.g. I'm looking for pure wildcard solution (given by @phihag) and I'm already familiar with regex</span>
<span class="comment-copy">how does regex not process wildcard matches??</span>
<span class="comment-copy">Cool :) But I understand that is it tuned to match paths, won't it act funny if slashes are present? Also, does it support the <code>**</code> wildcard? (e-&gt; I've checked the docs- it doesn't treat slashes differently and so the <code>**</code> wildcard isn't even necessary here).</span>
<span class="comment-copy">Shouldn't it be <code>th?s</code> ?</span>
<span class="comment-copy">@JBernardo Updated the answer.</span>
<span class="comment-copy">The <code>fnmatch</code> module has a function to translate wildcard matches into regular expressions: <a href="https://docs.python.org/2/library/fnmatch.html#fnmatch.translate" rel="nofollow noreferrer"><b><code>fnmatch.translate</code></b></a></span>
<span class="comment-copy">you still need to get string from an array somehow.</span>
<span class="comment-copy">So... what happens if I put text = "die | rm -rf /" ?</span>
<span class="comment-copy">Two problems. First, you shouldn't need to shell out to perform a function that python does well. Second, not all OSes have grep.</span>
