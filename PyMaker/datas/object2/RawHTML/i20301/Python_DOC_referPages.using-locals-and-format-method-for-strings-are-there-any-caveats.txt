<div class="post-text" itemprop="text">
<p>Are there any disadvantages, caveats or bad practice warnings about using the following pattern?</p>
<pre><code>def buildString(user, name = 'john', age=22):
    userId = user.getUserId()
    return "Name: {name}, age: {age}, userid:{userId}".format(**locals())
</code></pre>
<p>I had a very repetitive string generation code to write and was tempted to use this, but something about using <code>locals()</code> makes me uncomfortable. Is there any danger of unexpected behavior in this?</p>
<p>Edit: context</p>
<p>I found myself constantly writing stuff like:</p>
<pre><code>"{name} {age} {userId} {etc}...".format(name=name, age=age, userId=userId, etc=etc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is now an official way to do this, as of Python 3.6.0: <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">formatted string literals</a>.</p>
<p>It works like this:</p>
<pre><code>f'normal string text {local_variable_name}'
</code></pre>
<p>E.g. instead of these:  </p>
<pre><code>"hello %(name)s you are %(age)s years old" % locals()
"hello {name}s you are {age}s years old".format(**locals())
"hello {name}s you are {age}s years old".format(name=name, age=age)
</code></pre>
<p>just do this:  </p>
<pre><code>f"hello {name}s you are {age}s years old"
</code></pre>
<p>Here's the official example:</p>
<pre><code>&gt;&gt;&gt; name = "Fred"
&gt;&gt;&gt; f"He said his name is {name}."
'He said his name is Fred.'
&gt;&gt;&gt; width = 10
&gt;&gt;&gt; precision = 4
&gt;&gt;&gt; value = decimal.Decimal("12.34567")
&gt;&gt;&gt; f"result: {value:{width}.{precision}}"  # nested fields
'result:      12.35'
</code></pre>
<p>Reference:</p>
<ul>
<li><a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">Python 3.6 What's New</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0498" rel="noreferrer">PEP 498</a></li>
<li><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">Lexical analysis description</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If the format string is not user-supplied, this usage is okay.  </p>
<p><code>format</code> is preferred over using the old <code>%</code> for string substitution.<br/>
<a href="http://docs.python.org/library/functions.html#locals" rel="noreferrer"><code>locals</code></a> is built-in to Python and its behavior will be reliable.  </p>
<p>I think <code>locals</code> does exactly what you need.<br/>
Just don't modify the dictionary from locals and I would say you have a pretty good solution.</p>
<p>If the format string is user-supplied, you are susceptible to injection attacks of all sorts of badness.</p>
</div>
<div class="post-text" itemprop="text">
<p>I do this sort of thing regularly. The only problem I've had is that <a href="https://bugs.launchpad.net/pyflakes/+bug/872503" rel="noreferrer">PyFlakes will complain about unused variables</a> when I  do it.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Pre Python 3.6 answer</h2>
<p>This is very old, but if you find yourself using <code>.format</code> the one caveat I have encountered with passing in <code>**locals</code> is that if you don't have that variable defined anywhere, it will break. Explicitly stating what variables are passed in will avoid this in most modern IDEs.</p>
<pre><code>foo = "bar"
"{foo} and {baz} are pair programming".format(**locals())
&lt;exception occurs&gt;
</code></pre>
</div>
<span class="comment-copy">I don't see anything horribly wrong with it ...</span>
<span class="comment-copy">Nice trick indeed!</span>
<span class="comment-copy">Closely related to <a href="http://stackoverflow.com/q/1550479/125507">stackoverflow.com/q/1550479/125507</a></span>
<span class="comment-copy">Shouldn't there be a caveat that the string never be <b>user-supplied</b>?  That could open up access to the contents of every local variable.</span>
<span class="comment-copy">Straight shooting @BobStein-VisiBone, I have updated my answer.</span>
<span class="comment-copy">There appears to be a very small performance overhead using locals() rather than just the variables you need, since you have an extra function call and you're constructing a larger dictionary. It's probably negligible for most applications though: I'm seeing differences of about 2% in a quick test case.</span>
<span class="comment-copy">Not if you apply <a href="https://github.com/kevinw/pyflakes/commit/1e36a5331100a1ddfb8899fd20359844aca4492c" rel="nofollow noreferrer">github.com/kevinw/pyflakes/commit/â€¦</a></span>
<span class="comment-copy">Use this: f"{foo} and {baz} are pair programming" And you will get a NameError. But in this case the IDE can detect it. The original solution should be avoided. Just use everywhere f-strings and enforce the use of Python 3.6+ Additionally you'll get syntax for asyncio for free.</span>
