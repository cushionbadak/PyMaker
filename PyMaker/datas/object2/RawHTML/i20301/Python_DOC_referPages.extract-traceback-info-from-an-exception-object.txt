<div class="post-text" itemprop="text">
<p>Given an Exception object (of unknown origin) is there way to obtain its traceback? I have code like this:</p>
<pre><code>def stuff():
   try:
       .....
       return useful
   except Exception as e:
       return e

result = stuff()
if isinstance(result, Exception):
    result.traceback &lt;-- How?
</code></pre>
<p>How can I extract the traceback from the Exception object once I have it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to this question depends on the version of Python you're using.</p>
<h3>In Python 3</h3>
<p>It's simple: exceptions come equipped with a <code>__traceback__</code> attribute that contains the traceback. This attribute is also writable, and can be conveniently set using the <code>with_traceback</code> method of exceptions: </p>
<pre><code>raise Exception("foo occurred").with_traceback(tracebackobj)
</code></pre>
<p>These features are minimally described as part of the <a href="https://docs.python.org/3/reference/simple_stmts.html?highlight=__cause__#the-raise-statement" rel="noreferrer"><code>raise</code></a> documentation.</p>
<p>All credit for this part of the answer should go to Vyctor, who <a href="https://stackoverflow.com/a/14564261/577088">first posted this information</a>. I'm including it here only because this answer is stuck at the top, and Python 3 is becoming more common.</p>
<h3>In Python 2</h3>
<p>It's annoyingly complex. The trouble with tracebacks is that they have references to stack frames, and stack frames have references to the tracebacks that have references to stack frames <a href="https://www.python.org/dev/peps/pep-0344/#open-issue-garbage-collection" rel="noreferrer">that have references to...</a> you get the idea. This causes problems for the garbage collector. (Thanks to <a href="https://stackoverflow.com/a/11417308/577088">ecatmur</a> for first pointing this out.)</p>
<p>The nice way of solving this would be to surgically <a href="https://www.python.org/dev/peps/pep-3110/#semantic-changes" rel="noreferrer">break the cycle</a> after leaving the <code>except</code> clause, which is what Python 3 does. The Python 2 solution is much uglier: you are provided with an ad-hoc function,<a href="http://docs.python.org/library/sys.html#sys.exc_info" rel="noreferrer"><code>sys.exc_info()</code></a>, which <em>only works inside the</em> <code>except</code> <em>clause</em>. It returns a tuple containing the exception, the exception type, and the traceback for whatever exception is currently being handled. </p>
<p>So if you are inside the <code>except</code> clause, you can use the output of <code>sys.exc_info()</code> along with the <a href="http://docs.python.org/library/traceback.html" rel="noreferrer"><code>traceback</code></a> module to do various useful things:</p>
<pre><code>&gt;&gt;&gt; import sys, traceback
&gt;&gt;&gt; def raise_exception():
...     try:
...         raise Exception
...     except Exception:
...         ex_type, ex, tb = sys.exc_info()
...         traceback.print_tb(tb)
...     finally:
...         del tb
... 
&gt;&gt;&gt; raise_exception()
  File "&lt;stdin&gt;", line 3, in raise_exception
</code></pre>
<p>But as your edit indicates, you're trying to get the traceback that <em>would</em> have been printed if your exception had not been handled, after it has <em>already</em> been handled. That's a much harder question. Unfortunately, <code>sys.exc_info</code> returns <code>(None, None, None)</code> when no exception is being handled. Other related <code>sys</code> attributes don't help either. <code>sys.exc_traceback</code> is deprecated and undefined when no exception is being handled; <code>sys.last_traceback</code> seems perfect, but it appears only to be defined during interactive sessions.</p>
<p>If you can control how the exception is raised, you might be able to use <a href="http://docs.python.org/library/inspect.html" rel="noreferrer"><code>inspect</code></a> and a <a href="http://docs.python.org/tutorial/errors.html#user-defined-exceptions" rel="noreferrer">custom exception</a> to store some of the information. But I'm not entirely sure how that would work.</p>
<p>To tell the truth, catching and returning an exception is kind of an unusual thing to do. This might be a sign that you need to refactor anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <a href="http://www.python.org/dev/peps/pep-3109/" rel="noreferrer">Python 3.0<sup>[PEP 3109]</sup></a> the built in class <a href="http://docs.python.org/3.2/tutorial/errors.html#exceptions" rel="noreferrer"><code>Exception</code></a> has a <code>__traceback__</code> attribute which contains a <code>traceback object</code> (with Python 3.2.3):</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; try:
...     raise Exception()
... except Exception as e:
...     tb = e.__traceback__
...
&gt;&gt;&gt; tb
&lt;traceback object at 0x00000000022A9208&gt;
</code></pre>
<p>The problem is that after <a href="https://www.google.com/search?hl=en&amp;e=UTF-8&amp;q=python%20exception%20__traceback__" rel="noreferrer">Googling <code>__traceback__</code></a> for a while I found only few articles but none of them describes whether or why you should (not) use <code>__traceback__</code>.</p>
<p>However, the <a href="http://docs.python.org/3/reference/simple_stmts.html?highlight=__cause__#the-raise-statement" rel="noreferrer">Python 3 documentation for <code>raise</code></a> says that:</p>
<blockquote>
<p>A traceback object is normally created automatically when an exception is raised and attached to it as the <code>__traceback__</code> attribute, which is writable.</p>
</blockquote>
<p>So I assume it's meant to be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>A way to get traceback as a string from an exception object in Python 3:</p>
<pre><code>import traceback

# `e` is an exception object that you get from somewhere
traceback_str = ''.join(traceback.format_tb(e.__traceback__))
</code></pre>
<p><code>traceback.format_tb(...)</code> returns a list of strings. <code>''.join(...)</code> joins them together. For more reference, please visit: <a href="https://docs.python.org/3/library/traceback.html#traceback.format_exc" rel="noreferrer">https://docs.python.org/3/library/traceback.html#traceback.format_exc</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There's a very good reason the traceback is not stored in the exception; because the traceback holds references to its stack's locals, this would result in a circular reference and (temporary) memory leak until the circular GC kicks in.  (This is why you should <a href="http://docs.python.org/dev/library/sys.html#sys.exc_info" rel="nofollow">never store the traceback in a local variable</a>.)</p>
<p>About the only thing I can think of would be for you to monkeypatch <code>stuff</code>'s globals so that when it thinks it's catching <code>Exception</code> it's actually catching a specialised type and the exception propagates to you as the caller:</p>
<pre><code>module_containing_stuff.Exception = type("BogusException", (Exception,), {})
try:
    stuff()
except Exception:
    import sys
    print sys.exc_info()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an aside, if you want to actually get the full traceback as you would see it printed to your terminal, you want this:</p>
<pre><code>&gt;&gt;&gt; try:
...     print(1/0)
... except Exception as e:
...     exc = e
...
&gt;&gt;&gt; exc
ZeroDivisionError('division by zero')
&gt;&gt;&gt; tb_str = traceback.format_exception(etype=type(exc), value=exc, tb=exc.__traceback__)
&gt;&gt;&gt; tb_str
['Traceback (most recent call last):\n', '  File "&lt;stdin&gt;", line 2, in &lt;module&gt;\n', 'ZeroDivisionError: division by zero\n']
&gt;&gt;&gt; print("".join(tb_str))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
ZeroDivisionError: division by zero
</code></pre>
<p>If you use <code>format_tb</code> as above answers suggest you'll get less information:</p>
<pre><code>&gt;&gt;&gt; tb_str = "".join(traceback.format_tb(exc.__traceback__))
&gt;&gt;&gt; print("".join(tb_str))
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
</code></pre>
</div>
<span class="comment-copy">I agree that returning exceptions is somehow unconventional, but see <a href="http://stackoverflow.com/q/11366892/989121">my other question</a> for some rationale behind this.</span>
<span class="comment-copy">@thg435, ok, this is making more sense then. Consider my above solution using <code>sys.exc_info</code> in conjunction with the <a href="http://stackoverflow.com/a/11419139/577088">callback approach</a> I suggest on your other question.</span>
<span class="comment-copy">Yes, it is meant to be used. From <a href="https://docs.python.org/3.5/whatsnew/3.0.html" rel="nofollow noreferrer">Whatâ€™s New In Python 3.0</a>  "PEP 3134: Exception objects now store their traceback as the <b>traceback</b> attribute. This means that an exception object now contains all the information pertaining to an exception, and there are fewer reasons to use sys.exc_info() (though the latter is not removed)."</span>
<span class="comment-copy">I don't really understand why this answer is so hesitant and equivocal. It's a documented property; why would it <i>not</i> be "meant to be used"?</span>
<span class="comment-copy">@MarkAmery Possibly the <code>__</code> in the name indicating that it's an implementation detail, not a public property?</span>
<span class="comment-copy">@Basic that's not what it indicates here. Conventionally in Python <code>__foo</code> is a private method but <code>__foo__</code> (with trailing underscores too) is a "magic" method (and not private).</span>
<span class="comment-copy">FYI, the <code>__traceback__</code> attribute is 100% safe to use however you like, with no GC implications. It's hard to tell that from the documentation, but ecatmur found <a href="https://stackoverflow.com/questions/11414894/extract-traceback-info-from-an-exception-object/11415140#comment19173332_11417308">hard evidence</a>.</span>
<span class="comment-copy">This is wrong.  Python 3 does put the traceback object in the exception, as <code>e.__traceback__</code>.</span>
<span class="comment-copy">@GlennMaynard Python 3 resolves the issue by deleting the exception target on exiting the <code>except</code> block, per <a href="http://www.python.org/dev/peps/pep-3110/#semantic-changes" rel="nofollow noreferrer">PEP 3110</a>.</span>
