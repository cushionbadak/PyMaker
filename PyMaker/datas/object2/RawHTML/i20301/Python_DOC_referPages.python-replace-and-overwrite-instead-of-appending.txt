<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>import re
#open the xml file for reading:
file = open('path/test.xml','r+')
#convert to string:
data = file.read()
file.write(re.sub(r"&lt;string&gt;ABC&lt;/string&gt;(\s+)&lt;string&gt;(.*)&lt;/string&gt;",r"&lt;xyz&gt;ABC&lt;/xyz&gt;\1&lt;xyz&gt;\2&lt;/xyz&gt;",data))
file.close()
</code></pre>
<p>where I'd like to replace the old content that's in the file with the new content. However, when I execute my code, the file "test.xml" is appended, i.e. I have the old content follwed by the new "replaced" content. What can I do in order to delete the old stuff and only keep the new?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use truncate if you want to do in place replace: <a href="https://docs.python.org/3/library/os.html?highlight=truncate#os.truncate" rel="noreferrer">https://docs.python.org/3/library/os.html?highlight=truncate#os.truncate</a>
Or you use <code>open(myfile, 'w')</code>. This will delete the old file an create a new one.</p>
<p>AFAIK truncate does not change the inode, but open(..., 'w') will create a new inode. But in most cases this does not matter. ... I tested it now. Both open(..., 'w') and truncate() don't change the inode number of the file. (Tested twice: Once with Ubuntu 12.04 NFS and once with ext4).</p>
<p>By the way, this is not really related to Python. The interpreter calls the corresponding low level API. The method <code>truncate()</code> works the same in the C programming language: See <a href="http://man7.org/linux/man-pages/man2/truncate.2.html" rel="noreferrer">http://man7.org/linux/man-pages/man2/truncate.2.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>truncate()</code>, the solution could be</p>
<pre><code>import re
#open the xml file for reading:
with open('path/test.xml','r+') as f:
    #convert to string:
    data = f.read()
    f.seek(0)
    f.write(re.sub(r"&lt;string&gt;ABC&lt;/string&gt;(\s+)&lt;string&gt;(.*)&lt;/string&gt;",r"&lt;xyz&gt;ABC&lt;/xyz&gt;\1&lt;xyz&gt;\2&lt;/xyz&gt;",data))
    f.truncate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>file='path/test.xml' 
with open(file, 'w') as filetowrite:
    filetowrite.write('new content')
    filetowrite.close()
</code></pre>
<p>Open the file in 'w' mode , you will be able to replace its current text save the file with new contents.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os#must import this library
if os.path.exists('TwitterDB.csv'):
        os.remove('TwitterDB.csv') #this deletes the file
else:
        print("The file does not exist")#add this to prevent errors
</code></pre>
<p>I had a similar problem, and instead of overwriting my existing file using the different 'modes', I just deleted the file before using it again, so that it would be as if I was appending to a new file on each run of my code. </p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/2424000/read-and-overwrite-a-file-in-python" title="read and overwrite a file in python">stackoverflow.com/questions/2424000/â€¦</a></span>
<span class="comment-copy">When you say <i>"replace the old content that's in the file with the new content"</i>, you need to read in and transform the current contents <code>data = file.read()</code>. You don't mean "blindly overwrite it without needing to read it first".</span>
<span class="comment-copy"><code>close()</code> is not needed. With block already does that on <code>__exit__</code> of file object. Also, you replicated the written answer.</span>
