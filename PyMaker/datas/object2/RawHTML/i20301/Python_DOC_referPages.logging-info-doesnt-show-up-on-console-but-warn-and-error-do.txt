<div class="post-text" itemprop="text">
<p>When I log an event with <code>logging.info</code>, it doesn't appear in the Python terminal.</p>
<pre><code>import logging
logging.info('I am info')  # no output
</code></pre>
<p>In contrast, events logged with <code>logging.warn</code> do appear in the terminal.</p>
<pre><code>import logging
logging.warn('I am warning')  # outputs "I am warning"
</code></pre>
<p>Is there a environment level change I can to make <code>logging.info</code> print to the console? I want to avoid making changes in each Python file.</p>
</div>
<div class="post-text" itemprop="text">
<p>The root logger always defaults to WARNING level. Try calling</p>
<pre><code>logging.getLogger().setLevel(logging.INFO)
</code></pre>
<p>and you should be fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like @ztyx said that default logger level is WARNING. You have to set it to a lower level</p>
<p>You can do it by using <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="noreferrer">logging.basicConfig</a> and setting <a href="https://docs.python.org/3/library/logging.html#logging-levels" rel="noreferrer">logger level</a>:</p>
<pre><code>logging.basicConfig(level=logging.DEBUG)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The above solutions didn't work for me, but the code <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">here</a> did:</p>
<pre><code># set up logging to file
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                    datefmt='%m-%d %H:%M',
                    filename='/temp/myapp.log',
                    filemode='w')
# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)
# add the handler to the root logger
logging.getLogger('').addHandler(console)
</code></pre>
<p>(I omitted parts of the code for the sake of readability)</p>
</div>
<span class="comment-copy">this works well, but I think I will have to change it in every python file I have right? there is no global setting for LOGGING</span>
<span class="comment-copy">No, you only need to call it once. The logger is built as a hierarchy with and all logging boils down to a <i>root logger</i>. By not specifying any argument to <code>getLogger()</code>, it is returning you the root logger. As long as you don't modify the other loggers you only need to modify the root logger.</span>
<span class="comment-copy">cool, thanks for the information</span>
<span class="comment-copy">Do you know why logging.basicConfig(level=logging.INFO) doesn't work? I can't see it clearly on the documentation.</span>
<span class="comment-copy">@P1h3r1e3d13 If you only have a single root logger that's likely best-practises, yes.</span>
<span class="comment-copy">This is the only thing that worked for me. I had a line with <code>logging.error("Connection timed out!")</code> and even with the <code>level=logging.DEBUG</code> in the <code>basicConfig()</code>, it wouldn't print to console. Adding the handler did, thanks so much!!</span>
