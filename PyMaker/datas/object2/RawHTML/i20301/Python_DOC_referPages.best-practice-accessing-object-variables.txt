<div class="post-text" itemprop="text">
<p>I've been making a lot of classes an Python recently and I usually just access instance variables like this:</p>
<pre><code>object.variable_name
</code></pre>
<p>But often I see that objects from other modules will make wrapper methods to access variables like this:</p>
<pre><code>object.getVariable()
</code></pre>
<p>What are the advantages/disadvantages to these different approaches and is there a generally accepted best practice (even if there are exceptions)?</p>
</div>
<div class="post-text" itemprop="text">
<p>The main advantages of "getters" (the <code>getVariable</code> form) in my modest opinion is that it's much easier to add functionality or evolve your objects without changing the signatures.</p>
<p>For instance, let's say that my object changes from implementing some functionality to encapsulating another object and providing the same functionality via Proxy Pattern (composition). If I'm using getters to access the properties, it doesn't matter where that property is being fetched from, and no change whatsoever is visible to the "clients" using your code.</p>
<p>I use getters and such methods especially when my code is being reused (as a library for instance), by others. I'm much less picky when my code is self-contained.</p>
<p>In Java this is almost a requirement, you should never access your object fields directly. In Python it's perfectly legitimate to do so, but you may take in consideration the possible benefits of encapsulation that I mentioned. Still keep in mind that direct access is <strong>not</strong> considered bad form in Python, on the contrary.</p>
</div>
<div class="post-text" itemprop="text">
<p>There should never be any need in Python to use a method call just to get an attribute. The people who have written this are probably ex-Java programmers, where that is idiomatic. </p>
<p>In Python, it's considered proper to access the attribute directly.
If it turns out that you need some code to run when accessing the attribute, for instance to calculate it dynamically, you should use the <code>@property</code> decorator.</p>
</div>
<div class="post-text" itemprop="text">
<p>making getVariable() and setVariable() methods is called enncapsulation.
There are many advantages to this practice and it is the preffered style in object-oriented programming.</p>
<p>By accessing your variables through methods you can add another layer of "error checking/handling" by making sure the value you are trying to set/get is correct.</p>
<p>The setter method is also used for other tasks like notifying listeners that the variable have changed.</p>
<p>At least in java/c#/c++ and so on.</p>
</div>
<span class="comment-copy">In Python, you don't have to change the API when you go from a simple attribute to a getter/setter (use the @property decorator instad). In other languages (Java, C++) this is a valid argument. Still some people may argue that it is bad style, not explicit enough / unexpected behaviour to do work on attribute access.</span>
<span class="comment-copy">I'll agree with Daniel that defining getters like you would in Java is not pythonic.</span>
<span class="comment-copy">@jonathan topf -- no, not that one, this one! :-)</span>
<span class="comment-copy">Yours is indeed the pythonic answer to this question. My answer is a bit more generic. You sir, have my upvote.</span>
<span class="comment-copy">The problem with direct access as well a getter/setter properties is that it becomes the objects API and often exposes its the inner workings of its current implementation. If these are unlikely to change or there aren't very many clients, that fine, but otherwise, it's considered by many to be a poor object-oriented programming practice. IMHO properties are often just a crutch which are added later to make things still work as the code starts to evolve, as is often the case.</span>
<span class="comment-copy">@martineau In the Python view, if it is conceptually a member variable then it should look like one (<a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer"><i>"Readability counts."</i></a>). As most getters and setters do nothing beyond getting or setting, a plain variable is not only clearer but also simpler (<a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer"><i>"Simple is better than complex."</i></a>). If you really need to intervene (e.g. enforce constraints), <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> allows it. Long story cut short: <b>Do not use <code>getX()</code> or <code>setX()</code> functions in Python.</b></span>
<span class="comment-copy">@Lutz: I wasn't advocating the use of getter/setter methods...nor properties, for that matter. The main problem with the former, and direct access, is that they don't provide much or any <a href="https://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29" rel="nofollow noreferrer">encapsulation</a> of the component and are therefore relatively fragile.</span>
