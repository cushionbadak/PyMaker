<div class="post-text" itemprop="text">
<p>What is the easiest way to check to see if a list or dict exists in python ?</p>
<p>Im using the following but this isn't working:</p>
<pre><code>if len(list) == 0:
    print "Im not here"
</code></pre>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>For the lists:</p>
<pre><code>if a_list:
    print "I'm not here"
</code></pre>
<p>The same is for the dicts:</p>
<pre><code>if a_dict:
    print "I'm not here"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a try/except block:</p>
<pre><code>try:
    #work with list
except NameError:
    print "list isn't defined"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you try to reference a non-existing variable the interpreter raises <a href="http://docs.python.org/library/exceptions.html#exceptions.NameError" rel="nofollow"><code>NameError</code></a>.  It's not safe, however, to rely on the existence of a variable in your code (you'd better initialize it to None or something).  Sometimes I used this:</p>
<pre><code>try:
    mylist
    print "I'm here"
except NameError:
    print "I'm not here"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're able to name it - it obviously "exists" - I assume you mean to check that it's "non-empty"... The most pythonic method is to use <code>if varname:</code>. Note, this won't work on generators/iterables to check if they <em>will</em> return data as the result will always be <code>True</code>.</p>
<p>If you just want to use a certain index/key, then just try and use it:</p>
<pre><code>try:
    print someobj[5]
except (KeyError, IndexError) as e: # For dict, list|tuple
    print 'could not get it'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Examples:</p>
<pre><code>mylist=[1,2,3]
'mylist' in locals().keys()
</code></pre>
<p>Or use this:</p>
<pre><code>mylist in locals().values()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple console test:</p>
<pre><code>&gt;&gt;&gt; if len(b) == 0: print "Ups!"
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'b' is not defined
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; try:
...     len(b)
... except Exception as e:
...     print e
... 
name 'b' is not defined
</code></pre>
<p>Examples show how to check if a list has elements:</p>
<pre><code>alist = [1,2,3]
if alist: print "I'm here!"

Output: I'm here!
</code></pre>
<p>Otherwise:</p>
<pre><code>alist = []
if not alist: print "Somebody here?"

Output: Somebody here?
</code></pre>
<hr/>
<p>If you need to check existence/nonexistence of a list/tuple maybe this can be of help:</p>
<pre><code>from types import ListType, TupleType
a_list = [1,2,3,4]
a_tuple = (1,2,3,4)

# for an existing/nonexisting list
# "a_list" in globals() check if "a_list" is defined (not undefined :p)

if "a_list" in globals() and type(a_list) is ListType: 
    print "I'm a list, therefore I am an existing list! :)"

# for an existing/nonexisting tuple
if "a_tuple" in globals() and type(a_tuple) is TupleType: 
    print "I'm a tuple, therefore I am an existing tuple! :)"
</code></pre>
<p>If we need to avoid of <strong><em>in globals()</em></strong> maybe we can use this:</p>
<pre><code>from types import ListType, TupleType
try:
    # for an existing/nonexisting list
    if type(ima_list) is ListType: 
        print "I'm a list, therefore I am an existing list! :)"

    # for an existing/nonexisting tuple
    if type(ima_tuple) is TupleType: 
        print "I'm a tuple, therefore I am an existing tuple! :)"
except Exception, e:
    print "%s" % e

Output:
    name 'ima_list' is not defined
    ---
    name 'ima_tuple' is not defined
</code></pre>
<p><strong>Bibliography:</strong> 
8.15. types — Names for built-in types — Python v2.7.3 documentation  <a href="https://docs.python.org/3/library/types.html" rel="nofollow noreferrer">https://docs.python.org/3/library/types.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Check (1) variable <b>exist</b> and (2) check it is <b>list</b></p>
<pre><code>try:
    if type(myList) is list:
        print "myList is list"
    else:
        print "myList is not a list"
except:
    print "myList not exist"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = set([1, 2, 3, 4])
if 3 in s:
    print("The number 3 is in the list.")
else:
    print("The number 3 is NOT in the list.")
</code></pre>
<p>You can find more about it here: <a href="https://docs.quantifiedcode.com/python-anti-patterns/performance/using_key_in_list_to_check_if_key_is_contained_in_a_list.html" rel="nofollow noreferrer">https://docs.quantifiedcode.com/python-anti-patterns/performance/using_key_in_list_to_check_if_key_is_contained_in_a_list.html</a></p>
</div>
<span class="comment-copy">What do you mean by "exits"?</span>
<span class="comment-copy">If there is no object that you've created named <code>list</code> in scope, this code will be trying to obtain the length of the built in <code>list</code> type. This will result in exception <code>TypeError</code>.</span>
<span class="comment-copy"><code>list</code> and <code>dict</code> are built in types. This code will always succeed, i.e. the conditions in the <code>if</code> statements.</span>
<span class="comment-copy">@mhawke, a_list = list(), bool(a_list) -&gt; False, same for a_dict, and "if statement" is False insensitive. If a_list, a_dict not defined, then we'll have a wonderful and amazing Exception! :)</span>
<span class="comment-copy">@VitalieGhelbert please see the question's revision history - the question has been edited after my comment was made.</span>
<span class="comment-copy">@mhawke, ok, tx u. :)</span>
<span class="comment-copy">WHAT? You mean <code>if not a_list: print "I am not here"</code>??</span>
<span class="comment-copy">I'd go with this unless the OP clarify his question.</span>
<span class="comment-copy">Note that // is integer division. Use # for comments</span>
<span class="comment-copy">Or more simply: <code>if index in list</code></span>
<span class="comment-copy">@nicolas If you just wanted to perform a membership test then that's fine, but otherwise I was just pointing out EAFP over LBYL</span>
