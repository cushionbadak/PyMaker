<div class="post-text" itemprop="text">
<pre><code>def CardsAssignment():
      Cards+=1
      print (Cards)
      return break      

while True:
      CardsAssignment()
</code></pre>
<p>Yes, I know that I cannot <code>return break</code>. But how can I break a while loop by the def function? Or my concept is wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>No it cannot. Do something like:</p>
<pre><code>def CardsAssignment():
  Cards+=1
  print (Cards)
  if want_to_break_while_loop:
    return False      
  else:
    return True

while True:
  if not CardsAssignment():
    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very <em>Pythonic</em> way to do it would be to use exceptions with something like the following:</p>
<pre><code>class StopAssignments(Exception): pass  # Custom Exception subclass.

def CardsAssignment():
    global Cards  # Declare since it's not a local variable and is assigned.

    Cards += 1
    print(Cards)
    if time_to_quit:
        raise StopAssignments

Cards = 0
time_to_quit = False

while True:
    try:
        CardsAssignment()
    except StopAssignments:
        break
</code></pre>
<p>Another, less common approach would be to use a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer"><code>generator</code></a> function which will return <code>True</code> indicating that it's time to quit calling <code>next()</code> on it:</p>
<pre><code>def CardsAssignment():
    global Cards  # Declare since it's not a local variable and is assigned.

    while True:
        Cards += 1
        print(Cards)
        yield not time_to_quit

Cards = 0
time_to_quit = False
cr = CardsAssignment()  # Get generator iterator object.
next(cr)  # Prime it.

while next(cr):
    if Cards == 4:
        time_to_quit = True  # Allow one more iteration.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could have <code>CardsAssignment</code> return <code>True</code> (to continue) or <code>False</code> (to stop) and then have </p>
<pre><code>if not CardsAssignment():
    break
</code></pre>
<p>or indeed just loop</p>
<pre><code>while CardsAssignment():
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use a <code>for</code> loop instead of a <code>while</code>, you can cause it to break early by <code>raise</code>ing <code>StopIteration</code> - this is the usual signal for a <code>for</code> loop to finish, and as an exception, it can be nested inside functions as deep as you need and will propagate outward until it is caught. This means you need something to iterate over - and so, you probably want to change your function into a generator:</p>
<pre><code>def cards_assignment():
     cards += 1
     yield cards

for card in cards_assignment():
    print(card)
</code></pre>
<p>, in which case instead of doing <code>raise StopIteration</code>, you would just <code>return</code> from the generator and the loop will finish. However, note that this (as well as options having the function return a flag that you test in the loop condition) is subtly different to using <code>break</code> - if you use an <code>else</code> clause on your loop, <code>return</code>ing from a generator will trigger it, whereas <code>break</code> in the loop body won't.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def CardsAssignment():
      Cards+=1
      print (Cards)
      if (break_it):
          return False      
      else:
          return True      

while CardsAssignment():
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would be tempted to just re-factor similar to:</p>
<pre><code>def somefunc():
    from random import randint
    while True:
        r = randint(1, 100)
        if r != 42:
            yield r
</code></pre>
<p>And then you can do things such as:</p>
<pre><code>for cnt, something in enumerate(somefunc(), start=1):
    print 'Loop {} is {}'.format(cnt, something)
</code></pre>
<p>This allows a possible meaningful value to be returned from <code>somefunc()</code> instead of using it as a "do I break" flag.</p>
<p>This will also allow the following construct:</p>
<pre><code>sf = somefunc()
for something in sf:
    if some_condition(something):
        break

# other bits of program

for something in sf: # resume...
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in 3.5, 3.6 you can </p>
<pre><code>return "break"
</code></pre>
</div>
<span class="comment-copy">When do you want to break?</span>
<span class="comment-copy">Why not put the loop into the method? I fear your example is too contrived.</span>
<span class="comment-copy">Or possibly just <code>while CardsAssignment():</code> depending on what is actually going on.</span>
<span class="comment-copy">@veredesmarald: right, if this is compatible with other things that might happen in the loop, that's also possible.</span>
<span class="comment-copy">Thank you, steffen, Andrew Jaffe, Jon Clements and Tisho</span>
