<div class="post-text" itemprop="text">
<p>I am currently using argparse like this:</p>
<pre><code>import argparse
from argparse import ArgumentParser

parser = ArgumentParser(description="ikjMatrix multiplication")
parser.add_argument("-i", dest="filename", required=True,
    help="input file with two matrices", metavar="FILE")
args = parser.parse_args()

A, B = read(args.filename)
C = ikjMatrixProduct(A, B)
printMatrix(C)
</code></pre>
<p>Now I would like to note, that the argument of <code>-i</code> should be a readable file. How can I do that?</p>
<p>I've tried adding <code>type=open</code>, <code>type=argparse.FileType('r')</code> and they worked, but if the file is not valid, I would like to get an error message. How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's pretty easy actually.  You just need to write a function which checks if the file is valid and writes an error otherwise.  Use that function with the <code>type</code> option.  Note that you could get more fancy and create a custom action by subclassing <code>argparse.Action</code>, but I don't think that is necessary here.  In my example, I return an open file handle (see below):</p>
<pre><code>#!/usr/bin/env python

from argparse import ArgumentParser
import os.path


def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("The file %s does not exist!" % arg)
    else:
        return open(arg, 'r')  # return an open file handle


parser = ArgumentParser(description="ikjMatrix multiplication")
parser.add_argument("-i", dest="filename", required=True,
                    help="input file with two matrices", metavar="FILE",
                    type=lambda x: is_valid_file(parser, x))
args = parser.parse_args()

A, B = read(args.filename)
C = ikjMatrixProduct(A, B)
printMatrix(C)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A way to do this in Python 3.4 is to use the <a href="https://docs.python.org/3/library/argparse.html#argparse.FileType"><code>argparse.FileType</code></a> class. Make sure to close the input stream when you are finished. This is also useful because you can use the pseudo-argument <code>'-'</code> for STDIN/STDOUT. From the documentation:</p>
<blockquote>
<p>FileType objects understand the pseudo-argument <code>'-'</code> and automatically convert this into <code>sys.stdin</code> for readable <a href="https://docs.python.org/3/library/argparse.html#argparse.FileType"><code>FileType</code></a> objects and <code>sys.stdout</code> for writable <a href="https://docs.python.org/3/library/argparse.html#argparse.FileType"><code>FileType</code></a> objects </p>
</blockquote>
<p>Example:</p>
<pre><code>#!/usr/bin/env python3

import argparse

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--infile', type=argparse.FileType('r', encoding='UTF-8'), 
                      required=True)
  args = parser.parse_args()
  print(args)
  args.infile.close()
</code></pre>
<p>And then when ran...</p>
<ul>
<li><p>Without argument:</p>
<pre><code>$ ./stack_overflow.py
usage: stack_overflow.py [-h] --infile INFILE
stack_overflow.py: error: the following arguments are required: --infile
</code></pre></li>
<li><p>With nonexistent file:</p>
<pre><code>$ ./stack_overflow.py --infile notme
usage: stack_overflow.py [-h] --infile INFILE
stack_overflow.py: error: argument --infile: can't open 'notme': [Errno 2] No such file or directory: 'notme'
</code></pre></li>
<li><p>With an existing file:</p>
<pre><code>$ ./stack_overflow.py --infile ./stack_overflow.py
Namespace(infile=&lt;_io.TextIOWrapper name='./stack_overflow.py' mode='r' encoding='UTF-8'&gt;)
</code></pre></li>
<li><p>Using <code>'-'</code> for STDIN:</p>
<pre><code>$ echo 'hello' | ./stack_overflow.py --infile -
Namespace(infile=&lt;_io.TextIOWrapper name='&lt;stdin&gt;' mode='r' encoding='UTF-8'&gt;)
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I have just found this one:</p>
<pre><code>def extant_file(x):
    """
    'Type' for argparse - checks that file exists but does not open.
    """
    if not os.path.exists(x):
        # Argparse uses the ArgumentTypeError to give a rejection message like:
        # error: argument input: x does not exist
        raise argparse.ArgumentTypeError("{0} does not exist".format(x))
    return x

if __name__ == "__main__":
    import argparse, sys, os
    from argparse import ArgumentParser

    parser = ArgumentParser(description="ikjMatrix multiplication")
    parser.add_argument("-i", "--input",
        dest="filename", required=True, type=extant_file,
        help="input file with two matrices", metavar="FILE")
    args = parser.parse_args()

    A, B = read(args.filename)
    C = ikjMatrixProduct(A, B)
    printMatrix(C, args.output)
</code></pre>
<p>Source: <a href="http://fhcrc.github.com/nestly/_modules/nestly/scripts/nestrun.html" rel="noreferrer">fhcrc.github.com</a></p>
</div>
<span class="comment-copy">@moose -- One other comment.  <code>os.path.isfile</code> might be more appropriate than <code>os.path.exists</code> (depending on whether you want to accept directories too)</span>
<span class="comment-copy">Actually it is considered better practice to try and open the file with a try-except block, than to check for existence</span>
<span class="comment-copy">@jarondl is right. This should be changed to use a <code>try: ... except IOError</code> to avoid potential race conditions. For most cases it won't matter but this has bitten me recently.</span>
<span class="comment-copy">Raising <code>argparse.ArgumentTypeError</code> makes code more concise.(as noted in moose's answer)</span>
<span class="comment-copy">You dont have to <code>try</code> opening the file because <code>open</code> will handle all of the error cases by itself. Then you might catch that in the <code>except</code> clause, but I think you don't need it for that case.</span>
<span class="comment-copy"><code>argparse.FileType</code> is also available in Python 2.7.</span>
<span class="comment-copy">What happens if there are multiple usages of <code>argparse.FileType</code> for different input parameters, and they are all using <code>-</code>?</span>
