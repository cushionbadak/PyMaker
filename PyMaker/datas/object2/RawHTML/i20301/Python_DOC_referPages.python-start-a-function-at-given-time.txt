<div class="post-text" itemprop="text">
<p>How can I run a function in <em>Python</em>, at a given time?</p>
<p>For example:</p>
<pre><code>run_it_at(func, '2012-07-17 15:50:00')
</code></pre>
<p>and it will run the function <code>func</code> at 2012-07-17 15:50:00.</p>
<p>I tried the <a href="http://docs.python.org/library/sched.html#scheduler-objects" rel="noreferrer">sched.scheduler</a>, but it didn't start my function.</p>
<pre><code>import time as time_module
scheduler = sched.scheduler(time_module.time, time_module.sleep)
t = time_module.strptime('2012-07-17 15:50:00', '%Y-%m-%d %H:%M:%S')
t = time_module.mktime(t)
scheduler_e = scheduler.enterabs(t, 1, self.update, ())
</code></pre>
<p>What can I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>Reading the docs from <a href="http://docs.python.org/py3k/library/sched.html" rel="noreferrer">http://docs.python.org/py3k/library/sched.html</a>:</p>
<p>Going from that we need to work out a delay (in seconds)...</p>
<pre><code>from datetime import datetime
now = datetime.now()
</code></pre>
<p>Then use <code>datetime.strptime</code> to parse '2012-07-17 15:50:00' (I'll leave the format string to you)</p>
<pre><code># I'm just creating a datetime in 3 hours... (you'd use output from above)
from datetime import timedelta
run_at = now + timedelta(hours=3)
delay = (run_at - now).total_seconds()
</code></pre>
<p>You can then use <code>delay</code> to pass into a  <code>threading.Timer</code> instance, eg:</p>
<pre><code>threading.Timer(delay, self.update).start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the Advanced Python Scheduler, APScheduler: <a href="http://packages.python.org/APScheduler/index.html">http://packages.python.org/APScheduler/index.html</a></p>
<p>They have an example for just this usecase:
<a href="http://packages.python.org/APScheduler/dateschedule.html">http://packages.python.org/APScheduler/dateschedule.html</a></p>
<pre><code>from datetime import date
from apscheduler.scheduler import Scheduler

# Start the scheduler
sched = Scheduler()
sched.start()

# Define the function that is to be executed
def my_job(text):
    print text

# The job will be executed on November 6th, 2009
exec_date = date(2009, 11, 6)

# Store the job in a variable in case we want to cancel it
job = sched.add_date_job(my_job, exec_date, ['text'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an update to stephenbez' answer for version 3.5 of APScheduler using Python 2.7:</p>
<pre><code>import os, time
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta


def tick(text):
    print(text + '! The time is: %s' % datetime.now())


scheduler = BackgroundScheduler()
dd = datetime.now() + timedelta(seconds=3)
scheduler.add_job(tick, 'date',run_date=dd, args=['TICK'])

dd = datetime.now() + timedelta(seconds=6)
scheduler.add_job(tick, 'date',run_date=dd, kwargs={'text':'TOCK'})

scheduler.start()
print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

try:
    # This is here to simulate application activity (which keeps the main thread alive).
    while True:
        time.sleep(2)
except (KeyboardInterrupt, SystemExit):
    # Not strictly necessary if daemonic mode is enabled but should be done if possible
    scheduler.shutdown()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Might be worth installing this library: <a href="https://pypi.python.org/pypi/schedule" rel="noreferrer">https://pypi.python.org/pypi/schedule</a>, basically helps do everything you just described. Here's an example:</p>
<pre><code>import schedule
import time

def job():
    print("I'm working...")

schedule.every(10).minutes.do(job)
schedule.every().hour.do(job)
schedule.every().day.at("10:30").do(job)
schedule.every().monday.do(job)
schedule.every().wednesday.at("13:15").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ran into the same issue: I could not get absolute time events registered with <code>sched.enterabs</code> to be recognized by <code>sched.run</code>.  <code>sched.enter</code> worked for me if I calculated a <code>delay</code>, but is awkward to use since I want jobs to run at specific times of day in particular time zones.</p>
<p>In my case, I found that the issue was that the default <code>timefunc</code> in the <code>sched.scheduler</code> initializer is not <code>time.time</code> (as in the <a href="https://docs.python.org/3.4/library/sched.html" rel="nofollow">example</a>), but rather is <code>time.monotonic</code>.  <code>time.monotonic</code> does not make any sense for "absolute" time schedules as, from the <a href="https://docs.python.org/3/library/time.html#time.monotonic" rel="nofollow">docs</a>, "The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid."</p>
<p>The solution for me was to initialize the scheduler as</p>
<p><code>scheduler = sched.scheduler(time.time, time.sleep)</code></p>
<p>It is unclear whether your time_module.time is actually time.time or time.monotonic, but it works fine when I initialize it properly.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>dateSTR = datetime.datetime.now().strftime("%H:%M:%S" )
if dateSTR == ("20:32:10"):
   #do function
    print(dateSTR)
else:
    # do something useful till this time
    time.sleep(1)
    pass
</code></pre>
<p>Just looking for a Time of Day / Date event trigger:
as long as the date "string" is tied to an updated "time" string, it works as a simple TOD function. You can extend the string out to a date and time.</p>
<p>whether its lexicographical ordering or chronological order comparison,
as long as the string represents a point in time, the string will too.</p>
<p>someone kindly offered this link:</p>
<p><a href="https://stackoverflow.com/questions/4806911/string-comparison-technique-used-by-python">String Comparison Technique Used by Python</a></p>
</div>
<span class="comment-copy">What operating system? You'll likely need to run it with a program external to python, such as cron on unix.</span>
<span class="comment-copy">Why not?  What delay did you set for <code>enter</code> (assuming that is what you tried)?</span>
<span class="comment-copy">How did you try to use <code>sched.scheduler</code>?</span>
<span class="comment-copy">i used <code>sched.scheduler</code> because i googled it :)</span>
<span class="comment-copy">Did you call <code>scheduler.run()</code> ?</span>
<span class="comment-copy">The datetime arithmetics on local time may fail if the utc offset of the local timezone has changed between <code>now</code> and <code>run_at</code> e.g., around DST transitions. Convert the local time to UTC or POSIX timestamp to perform  the calculations. See <a href="http://stackoverflow.com/a/26313848/4279">Find if 24 hrs have passed between datetimes - Python</a>.</span>
<span class="comment-copy">You can use <code>total_seconds</code> directly on <code>timedelta</code>: <code>datetime.timedelta(hours=3).total_seconds()</code></span>
<span class="comment-copy">does not work on python 3</span>
<span class="comment-copy">You should edit his answer.</span>
<span class="comment-copy">@Doezer but then the answer would not contribute to his earned reputation</span>
<span class="comment-copy">I searched for a special solution and this will change a lot of my applications now. I didn't know it exists. Thanks a lot, Daniel!</span>
