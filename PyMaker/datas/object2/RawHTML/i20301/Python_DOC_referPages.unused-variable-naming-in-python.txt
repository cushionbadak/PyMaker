<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/5477134/how-can-i-get-around-declaring-an-unused-variable-in-a-for-loop">How can I get around declaring an unused variable in a for loop?</a> </p>
</blockquote>
<p>In Python what is the best practice for naming a variable that is not going to be used? This is an odd question sure, but for my specific case I have a tuple of (key, value) where I am only interested in the value. A basic demo of my use case:</p>
<pre><code>some_stuff = [("key", "value"), ("key2", "value")]
for _, value in some_stuff:
    pass  # TODO: do something really important with value
</code></pre>
<p>I've noticed in Eclipse that naming a variable _ or with an _ prefix (e.g. _k) will not show an unused variable warning and removing the _ prefix causes the warning to be raised, but this may just be an oddity/"feature" in Eclipse rather than Python best practice..</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this is a Eclipse thing or not, but I generally use <code>'_'</code> to denote values I don't care about (i.e., return values in tuples, or index values in <code>for</code>-loops).</p>
<p>Of course you can always resort to old stand-bys like naming variables <code>dummy</code> or <code>ignore</code>.</p>
<p>I'm not sure if <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a> mentions anything about this, might be worth peeking into.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a Python coding convention, yes.  Best practice is to use <code>_</code> where you don't care about the value being set, for example when <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">unpacking values from a tuple</a>. Sometimes, however, needing this is a sign you may be doing something else in a non-Pythonic way.</p>
<p><code>_</code> as a prefix is used to indicate "private" methods and variables, like Phil Cooper said.  Use this to indicate that these methods are not part of any public contract other modules can or should rely on.</p>
<p>Some references:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/5893163/underscore-in-python">What is the purpose of the single underscore "_" variable in Python?</a></li>
<li><a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer">Underscores as function prefixes</a></li>
<li><a href="https://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python">What is the meaning of a single- and a double-underscore before an object name?</a></li>
<li><a href="https://stackoverflow.com/questions/3443043/why-does-python-use-two-underscores-for-certain-things">Why does python use two underscores for certain things?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Let's start with...</p>
<pre><code>&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
...
Readability counts.
Special cases aren't special enough to break the rules.
</code></pre>
<p>I recommend to choose the approach that is not questionable. It usually means something that is self-explainable, simple and understandable. If you insist on expressing the <em>not used</em>, what about the name <code>unused</code> or <code>dummy</code>? </p>
<p>Should the <code>_</code> be more <em>invisible</em>, hidden or even the candidate for to be overlooked, if possible?</p>
<p>For Perl users, the <code>_</code> means something else than <em>unused</em>. Even though you may not care about the Perl users, what would the <code>_</code> mean for you if you never met it before?</p>
</div>
<div class="post-text" itemprop="text">
<p>You pretty much got it with the <code>_1</code>:</p>
<ul>
<li>one leading underscore means, yes, this exists, and you can look at it, but another method or property is what you should use instead; consult the docs.</li>
<li>two leading underscores means, danger!  Do not touch or you will seriously break the state and stability of things.  Please stay away; if you mess with it, it's all your own fault if something goes wrong. </li>
</ul>
<p><em>Note:</em> Using <code>__</code> is more than just a naming convention as it causes <a href="http://python.robasworld.com/private-member-name-mangling/" rel="nofollow noreferrer">name mangling</a>. This renames the variable to <code>_ClassName__var</code>. That makes the variable/method harder to use outside of the class. It's primarily done to avoid accidental overrides of methods in parent classes by inherited classes.</p>
</div>
<span class="comment-copy">I personally would use the <code>for key, value in some_stuff:</code> also in the case when the <code>key</code> is not to be used. It can be used in future, anyway. The variable should tell what it contains. The variable should not say <i>I am not expected to be used</i>.</span>
<span class="comment-copy">yeah I had a quick glance at PEP-8 but couldn't see a mention of this topic in there.</span>
<span class="comment-copy">@TomHennigan  I also took a look, esp at this part, <a href="http://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">naming conventions</a>, but didn't see anything either.</span>
<span class="comment-copy">keep in mind python uses '_' as a magic variable in the shell ... it is also common for strings to be translated be marked as <code>_("some string")</code></span>
<span class="comment-copy">@Levon see here :<a href="http://docs.python.org/library/gettext.html" rel="nofollow noreferrer">docs.python.org/library/gettext.html</a>  @dimo414 you are correct for translations however teh python shell uses it to store last value eg <code>&gt;&gt;&gt;5+3\n&gt;&gt;&gt;print _</code> would print 8</span>
<span class="comment-copy">all that said as long as you are not using the shell or translations using '_' for an ignore_me type variable is very common and absolutely ok (and even if you are using translations you can map it to something else ,_ is just convention)</span>
<span class="comment-copy">Actually, only one of the usages of <code>_</code> means <i>unused</i> variable. Another used explanation is <i>the last used value</i> in some construct, or the implicit name of a variable with the result of the last operation. So, the opinions differ, and then it should not be generally uses for the purpose.</span>
<span class="comment-copy">In the interactive Python shell <code>_</code> is available for convenience as the last used value.  In Python scripts, <a href="http://stackoverflow.com/questions/5995572/python-underscore-variable">this is not the case</a>.  It cannot be relied on to provide that functionality in all cases, but it can, and by convention is, used to clearly denote "I do not care about the current value of this variable" throughout Python.</span>
<span class="comment-copy">that's an interesting way of putting it, and I would tend to agree. I guess at least when someone new to python comes to your code and reads through they don't jump on google looking for the special meaning of _ in python if the variable is just called key.</span>
<span class="comment-copy">you're right though, I have no great cares for Perl users.</span>
<span class="comment-copy">is the __ common for local variables (e.g. in a function or loop) or just instance variables where you want to mangle the name for semi-privateness? I don't think I've seen that used anywhere other than instance vars.</span>
<span class="comment-copy">No. It is not typically used for local variables as  the __ is meant to denote something special.  varibables in functions, loops etc will be garbage collected when the function returns so no need to worry.  Better to give meaningful names without the _ modifiers/flag</span>
<span class="comment-copy">-1. <code>__</code> prefix is for name mangling. Using it for anything else is not good practice for python. <code>_</code> prefix means "please don't touch this" - the convention is that if you rely on such attributes outside of the class, you risk things breaking.</span>
<span class="comment-copy">@Daenyth -1...really. I thought that's what I already said.  Sometimes I aint' such a good talker though.</span>
<span class="comment-copy">The current text implies that it can/should be used for OOP "private"-ness, which is a common mistake. It's used to avoid name conflicts and tie the variable to one specific class name.</span>
