<div class="post-text" itemprop="text">
<p>I am trying to allow resizing for this app, I put the RESIZABLE flag, but when I try to resize, it messes up! Try my code.</p>
<p>It is a grid program, when the window resizes I want the grid to also resize/shrink. </p>
<pre><code>import pygame,math
from pygame.locals import *
# Define some colors
black    = (   0,   0,   0)
white    = ( 255, 255, 255)
green    = (   0, 255,   0)
red      = ( 255,   0,   0)

# This sets the width and height of each grid location
width=50
height=20
size=[500,500]
# This sets the margin between each cell
margin=1


# Initialize pygame
pygame.init()

# Set the height and width of the screen

screen=pygame.display.set_mode(size,RESIZABLE)

# Set title of screen
pygame.display.set_caption("My Game")

#Loop until the user clicks the close button.
done=False

# Used to manage how fast the screen updates
clock=pygame.time.Clock()

# -------- Main Program Loop -----------
while done==False:
    for event in pygame.event.get(): # User did something
        if event.type == pygame.QUIT: # If user clicked close
            done=True # Flag that we are done so we exit this loop
        if event.type == pygame.MOUSEBUTTONDOWN:
            height+=10

    # Set the screen background
    screen.fill(black)

    # Draw the grid
    for row in range(int(math.ceil(size[1]/height))+1):
        for column in range(int(math.ceil(size[0]/width))+1):
            color = white
            pygame.draw.rect(screen,color,[(margin+width)*column+margin,(margin+height)*row+margin,width,height])

    # Limit to 20 frames per second
    clock.tick(20)

    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()
# Be IDLE friendly. If you forget this line, the program will 'hang'
# on exit.
pygame.quit ()
</code></pre>
<p>Please tell me whats wrong, thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not updating your width, height, or size when the window changes.</p>
<p>From the docs: <a href="http://www.pygame.org/docs/ref/display.html">http://www.pygame.org/docs/ref/display.html</a></p>
<blockquote>
<p>If the display is set with the pygame.RESIZABLE flag,
  pygame.VIDEORESIZE events will be sent when the user adjusts the
  window dimensions.</p>
</blockquote>
<p>You can get the new <code>size, w, h</code> from the event <code>VIDEORESIZE</code> <a href="http://www.pygame.org/docs/ref/event.html">http://www.pygame.org/docs/ref/event.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The answer for this problem (allow the Pygame window and the surface inside it to resize) is simply to recreate the resizable window with an updated size, when the user changes its dimensions (done on <a href="https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode" rel="nofollow noreferrer" title="If the display is set with the pygame.RESIZABLE flag, pygame.VIDEORESIZE events will be sent when the user adjusts the window dimensions."><code>pygame.VIDEORESIZE</code></a> events).</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; import pygame
&gt;&gt;&gt; pygame.display.set_mode.__doc__
'set_mode(resolution=(0,0), flags=0, depth=0) -&gt; Surface\nInitialize a window or screen for display'
&gt;&gt;&gt; 
</code></pre>
<p>This <em>removes all previous content</em> on the window surface, so below<br/>
there's a process to continue with the current window content.</p>
<p><strong>Some example code:</strong>
</p>
<pre><code>import pygame, sys

pygame.init()
# Create the window, saving it to a variable.
surface = pygame.display.set_mode((350, 250), pygame.RESIZABLE)
pygame.display.set_caption("Example resizable window")

while True:
    surface.fill((255,255,255))

    # Draw a red rectangle that resizes with the window.
    pygame.draw.rect(surface, (200,0,0), (surface.get_width()/3,
      surface.get_height()/3, surface.get_width()/3,
      surface.get_height()/3))

    pygame.display.update()
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
                sys.exit()

        if event.type == pygame.VIDEORESIZE:
            # There's some code to add back window content here.
            surface = pygame.display.set_mode((event.w, event.h),
                                              pygame.RESIZABLE)
</code></pre>
<p><strong>How to continue with the current window content:</strong><br/>
Here's some steps to add back the previous window content:</p>
<ol>
<li>make a second variable, set to the value of the old window surface variable.</li>
<li>create the new window, storing it as the old variable.</li>
<li>draw the second surface onto the first one (old variable) - use the <a href="http://pygame.org/docs/ref/surface.html#pygame.Surface.blit" rel="nofollow noreferrer" title="Official Pygame documentation page">blit</a> function.</li>
<li>use this variable and delete the new variable (optional, use <a href="https://docs.python.org/3/tutorial/datastructures.html#the-del-statement" rel="nofollow noreferrer" title="Official Python documentation page"><code>del</code></a>) to not use extra memory.</li>
</ol>
<p>Some example code for the above steps (replaces <code>pygame.VIDEORESIZE</code> event <code>if</code> statement):
</p>
<pre><code>        if event.type == pygame.VIDEORESIZE:
            old_surface_saved = surface
            surface = pygame.display.set_mode((event.w, event.h),
                                              pygame.RESIZABLE)
            # On the next line, if only part of the window
            # needs to be copied, there's some other options.
            surface.blit(old_surface_saved, (0,0))
            del old_surface_saved
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple Hello World window that is resizable, plus I was playing around with classes.<br/>
Broken down into two files, one for defining the colour constants.</p>
<pre><code>import pygame, sys
from pygame.locals import *
from colors import *


# Data Definition
class helloWorld:
    '''Create a resizable hello world window'''
    def __init__(self):
        pygame.init()
        self.width = 300
        self.height = 300
        DISPLAYSURF = pygame.display.set_mode((self.width,self.height), RESIZABLE)
        DISPLAYSURF.fill(WHITE)

    def run(self):
        while True:
            for event in pygame.event.get():
                if event.type == QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == VIDEORESIZE:
                    self.CreateWindow(event.w,event.h)
            pygame.display.update()

    def CreateWindow(self,width,height):
        '''Updates the window width and height '''
        pygame.display.set_caption("Press ESC to quit")
        DISPLAYSURF = pygame.display.set_mode((width,height),RESIZABLE)
        DISPLAYSURF.fill(WHITE)


if __name__ == '__main__':
    helloWorld().run()
</code></pre>
<p>colors.py:</p>
<pre><code>BLACK  = (0, 0,0)
WHITE  = (255, 255, 255)
RED    = (255, 0, 0)
YELLOW = (255, 255, 0)
BLUE   = (0,0,255)

GREEN = (0,255,0)
</code></pre>
</div>
<span class="comment-copy">When I run the example above after first second window stops correctly draw resized rectangle in the center.</span>
<span class="comment-copy">I found <a href="https://github.com/pygame/pygame/issues/201" rel="nofollow noreferrer">this</a> open pygame bug. Shortly: sending VIDEORESIZE event works with resizing by moving edges, but fails after trying to move corners.</span>
<span class="comment-copy">Code works, but you should really read PEP 8 style guidelines. Youre breaing a lot of conventions with names such as <code>CreateWindow</code> that is not a class, <code>helloWorld</code>that <i>is</i>, and <code>DISPLAYSURF</code> that is not a constant. Also, avoid spamming <code>from ... import *</code> everywhere, specially since you're not using them (you're prefixing all <code>pygame</code> calls anyway)</span>
