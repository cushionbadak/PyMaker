<div class="post-text" itemprop="text">
<p>I'm trying to follow <a href="http://www.python.org/dev/peps/pep-0328/" rel="noreferrer">PEP 328</a>, with the following directory structure:</p>
<pre><code>pkg/
  __init__.py
  components/
    core.py
    __init__.py
  tests/
    core_test.py
    __init__.py
</code></pre>
<p>In <code>core_test.py</code> I have the following import statement</p>
<pre><code>from ..components.core import GameLoopEvents
</code></pre>
<p>However, when I run, I get the following error:</p>
<pre><code>tests$ python core_test.py 
Traceback (most recent call last):
  File "core_test.py", line 3, in &lt;module&gt;
    from ..components.core import GameLoopEvents
ValueError: Attempted relative import in non-package
</code></pre>
<p>Searching around I found "<a href="https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py">relative path not working even with __init__.py</a>" and "<a href="https://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder/6098238#6098238">Import a module from a relative path</a>" but they didn't help.</p>
<p>Is there anything I'm missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. You're not using it as a package.</p>
<pre><code>python -m pkg.tests.core_test
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To elaborate on <a href="https://stackoverflow.com/a/11536794/5337834">Ignacio Vazquez-Abrams's</a> answer:</p>
<p>The Python import mechanism works relative to the <code>__name__</code> of the current file.  When you execute a file directly, it doesn't have its usual name, but has <code>"__main__"</code> as its name instead.  So relative imports don't work.</p>
<p>You can, as Igancio suggested, execute it using the <code>-m</code> option.  If you have a part of your package that is meant to be run as a script, you can also use the <code>__package__</code> attribute to tell that file what name it's supposed to have in the package hierarchy. </p>
<p>See <a href="http://www.python.org/dev/peps/pep-0366/" rel="noreferrer">http://www.python.org/dev/peps/pep-0366/</a> for details.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>import components.core</code> directly if you append the current directory to <code>sys.path</code>:</p>
<pre><code>if __name__ == '__main__' and __package__ is None:
    from os import sys, path
    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It depends on how you want to launch your script.</p>
<p>If you want to <a href="https://docs.python.org/3/using/cmdline.html">launch your UnitTest from the command line</a> in a classic way, that is:</p>
<pre><code>python tests/core_test.py
</code></pre>
<p>Then, since in this case <em>'components'</em> and <em>'tests'</em> are siblings folders, you can import the relative module either using the <em>insert</em> or the <em>append</em> method of the <em><a href="https://docs.python.org/2/library/sys.html#sys.path">sys.path</a></em> module.
Something like:</p>
<pre><code>import sys
from os import path
sys.path.append( path.dirname( path.dirname( path.abspath(__file__) ) ) )
from components.core import GameLoopEvents
</code></pre>
<p>Otherwise, you can <a href="https://docs.python.org/2/using/cmdline.html#cmdoption-m">launch your script with the '-m' argument</a> (note that in this case, we are talking about a package, and thus you must not give the <em>'.py'</em> extension), that is:</p>
<pre><code>python -m pkg.tests.core_test
</code></pre>
<p>In such a case, you can simply use the relative import as you were doing:</p>
<pre><code>from ..components.core import GameLoopEvents
</code></pre>
<p>You can finally mix the two approaches, so that your script will work no matter how it is called.
For example:</p>
<pre><code>if __name__ == '__main__':
    if __package__ is None:
        import sys
        from os import path
        sys.path.append( path.dirname( path.dirname( path.abspath(__file__) ) ) )
        from components.core import GameLoopEvents
    else:
        from ..components.core import GameLoopEvents
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>In core_test.py, do the following:</strong></p>
<pre><code>import sys
sys.path.append('../components')
from core import GameLoopEvents
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your use case is for running tests, and it seams that it is, then you can do the following. Instead of running your test script as <code>python core_test.py</code> use a testing framework such as <code>pytest</code>. Then on the command line you can enter</p>
<pre><code>$$ py.test
</code></pre>
<p>That will run the tests in your directory. This gets around the issue of <code>__name__</code> being <code>__main__</code> that was pointed out by @BrenBarn. Next, put an empty <code>__init__.py</code> file into your test directory, this will make the test directory part of your package. Then you will be able to do</p>
<pre><code>from ..components.core import GameLoopEvents
</code></pre>
<p>However, if you run your test script as a main program then things will fail once again. So just use the test runner. Maybe this also works with other test runners such as <code>nosetests</code> but i haven't checked it. Hope this helps.  </p>
</div>
<div class="post-text" itemprop="text">
<p>My quick-fix is to add the directory to the path:</p>
<pre><code>import sys
sys.path.insert(0, '../components/')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Old thread. I found out that adding an <code>__all__= ['submodule', ...]</code> to the 
<strong>__init__.py</strong> file and then using the <code>from &lt;CURRENT_MODULE&gt; import *</code> in the target works fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>from pkg.components.core import GameLoopEvents</code>, for example I use pycharm, the below is my project structure image, I just import from the root package, then it works:</p>
<p><a href="https://i.stack.imgur.com/O8dKL.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/O8dKL.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>If someone is looking for a workaround, I stumbled upon one.  Here's a bit of context.  I wanted to test out one of the methods I've in a file.  When I run it from within </p>
<pre><code>if __name__ == "__main__":
</code></pre>
<p>it always complained of the relative imports.  I tried to apply the above solutions, but failed to work, since there were many nested files, each with multiple imports.</p>
<p>Here's what I did.  I just created a launcher, an external program that would import necessary methods and call them.  Though, not a great solution, it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>import components
from components import *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/questions/11536764/how-to-fix-attempted-relative-import-in-non-package-even-with-init-py/27876800#27876800">Paolo</a> said, we have 2 invocation methods:</p>
<pre><code>1) python -m tests.core_test
2) python tests/core_test.py
</code></pre>
<p>One difference between them is sys.path[0] string. Since <a href="https://docs.python.org/3.6/library/sys.html" rel="nofollow noreferrer">the interpret will search sys.path when doing import</a>, we can do with <code>tests/core_test.py</code>:</p>
<pre><code>if __name__ == '__main__':
    import sys
    from pathlib import Path
    sys.path.insert(0, str(Path(__file__).resolve().parent.parent))
    from components import core
    &lt;other stuff&gt;
</code></pre>
<p>And more after this, we can run core_test.py with other methods:</p>
<pre><code>cd tests
python core_test.py
python -m core_test
...
</code></pre>
<p>Note, py36 tested only.</p>
</div>
<span class="comment-copy">I was also very confused by the various ways of structuring <code>unittest</code> projects, so I wrote this <a href="https://github.com/cod3monk3y/PyImports" rel="nofollow noreferrer">fairly exhaustive sample project</a> that covers deep nesting of modules, relative and absolute imports (where the work and don't), and relative and absolute referencing from within a package, as well as single, double, and package-level import of classes. Helped clear things <i>right up</i> for me!</span>
<span class="comment-copy">I could not get your tests to work. Keep getting <code>no module named myimports.foo</code> when I run them.</span>
<span class="comment-copy">@Blairg23 I'm guessing the intended invocation is to <code>cd</code> into <code>PyImports</code>, and run <code>python -m unittest tests.test_abs</code>, for example.</span>
<span class="comment-copy">Python is about my 20th language, and I must say it is the <b>worst</b> I've come across in handling imports. I have never seen so much confusion about this topic in any other language.</span>
<span class="comment-copy">I agree with Gene.  I wish there was a mechanism for debugging the importing process that was a little more helpful.  In my case, I have two files in the same directory.  I am trying to import one file into the other file.  If I have an <b>init</b>.py file in that directory, I get a ValueError: Attempted relative import in non-package error.  If I remove the <b>init</b>.py file, then I get an error no module named 'NAME' error.</span>
<span class="comment-copy">A gotcha: Note that there is no '.py' at the end!</span>
<span class="comment-copy">I'm not either of the downvoters, but I feel this could use <i>quite a bit</i> more detail, given the popularity of this question and answer. Noting stuff like from what directory to execute the above shell command, the fact that you need <code>__init__.py</code>s all the way down, and the <code>__package__</code>-modifying trickery (described below by BrenBarn) needed to allow these imports for executable scripts (e.g. when using a shebang and doing <code>./my_script.py</code> at the Unix shell) would all be useful. This whole issue was quite tricky for me to figure out or find concise and understandable documentation on.</span>
<span class="comment-copy">Note: you need to be outside of the directory <code>pkg</code> at the point where you call this line from the CLI. Then, it should work as expected. If you are inside <code>pkg</code> and you call <code>python -m tests.core_test</code>, it will not work. At least it didn't for me.</span>
<span class="comment-copy">Seriously, can you explain whats going on in your answer?</span>
<span class="comment-copy">@MarkAmery Almost lost my mind trying to grok how all this works, relative imports within a project with subdirectories with py files that have <code>__init__.py</code> files yet you keep getting the <code>ValueError: Attempted relative import in non-package</code> error. I would pay really good money for someone, somewhere, to finally explain in plain English how all of this works.</span>
<span class="comment-copy">Took a while for me to realize you can't run <code>python -m core_test</code> from within the <code>tests</code> subdirectory - it has to be from the parent, or you have to add the parent to the path.</span>
<span class="comment-copy">@DannyStaple: Not exactly.  You can use <code>__package__</code> to ensure executable script files can relatively import other modules from within the same package.  There's no way to relatively import from "the whole system".  I'm not even sure why you'd want to do this.</span>
<span class="comment-copy">I mean if the <code>__package__</code> symbol is set to "parent.child" then you'd be able to import "parent.other_child". Perhaps I didn't phrase it so well.</span>
<span class="comment-copy">@DannyStaple: Well, how it works is described in the linked documentation.  If you have a script <code>script.py</code> in package <code>pack.subpack</code>, then setting it's <code>__package__</code> to <code>pack.subpack</code> will let you do <code>from ..module import something</code> to import something from <code>pack.module</code>.  Note that, as the documentation says, you still have to have the top-level package on the system path.  This is already the way things work for imported modules.  The only thing <code>__package__</code> does is let you use that behavior for directly-executed scripts as well.</span>
<span class="comment-copy">I use <code>__package__</code> in the script which is executed directly but Unfortunately, I get the the following error: "Parent module 'xxx' not loaded, cannot perform relative import"</span>
<span class="comment-copy"><code>sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))</code> this will also work</span>
<span class="comment-copy"><code>from os import sys</code> looks like cheating :)</span>
<span class="comment-copy">@ajay And yours is better because of what?</span>
<span class="comment-copy">@flyingsheep: Agreed, I'd just use a regular <code>import sys, os.path as path</code>.</span>
<span class="comment-copy">FYI, to use this in an ipython notebook, I adapted this answer to: <code>import os; os.sys.path.append(os.path.dirname(os.path.abspath('.')))</code>. Then a straight <code>import components.core</code> works for me, importing from the notebook's parent directory as desired.</span>
<span class="comment-copy">what shall i do if i am trying to use the pdb for debugging? since you use <code>python -m pdb myscript.py</code> to launch the debugging session.</span>
<span class="comment-copy">@dannynjust -- That's a good question since you can't have 2 main modules.  Generally when debugging, I prefer to drop into the debugger manually at the first point where I want to start debugging.  You can do that by inserting a <code>import pdb; pdb.set_trace()</code> into the code (inline).</span>
<span class="comment-copy">Is it better to use <code>insert</code> instead of <code>append</code>? That is, <code>sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</code></span>
<span class="comment-copy">Using insert is a better match for the relative import semantics, where local package names take precedence over installed packages. Especially for tests, you usually want to test the local version, not the installed one (unless your test infrastructure installs the code under test, in which case relative imports are unneeded and you won't have this problem).</span>
<span class="comment-copy">This is so useful! Thanks!</span>
<span class="comment-copy">Your approach wont work in all cases because '../' part is resolved from directory from which you run your script(core_test.py). With your approach you are forced to cd to 'tests' before running the core_test.py scritp.</span>
