<div class="post-text" itemprop="text">
<p>I am not sure why we need <code>finally</code> in <code>try...except...finally</code> statements. In my opinion, this code block</p>
<pre><code>try:
    run_code1()
except TypeError:
    run_code2()
other_code()
</code></pre>
<p>is the same with this one using <code>finally</code>:</p>
<pre><code>try:
    run_code1()
except TypeError:
    run_code2()
finally:
    other_code()
</code></pre>
<p>Am I missing something?</p>
</div>
<div class="post-text" itemprop="text">
<p>It makes a difference if you return early:</p>
<pre><code>try:
    run_code1()
except TypeError:
    run_code2()
    return None   # The finally block is run before the method returns
finally:
    other_code()
</code></pre>
<p>Compare to this:</p>
<pre><code>try:
    run_code1()
except TypeError:
    run_code2()
    return None   

other_code()  # This doesn't get run if there's an exception.
</code></pre>
<p>Other situations that can cause differences:</p>
<ul>
<li>If an exception is thrown inside the except block.</li>
<li>If an exception is thrown in <code>run_code1()</code> but it's not a <code>TypeError</code>.</li>
<li>Other control flow statements such as <code>continue</code> and <code>break</code> statements.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>finally</code> to make sure files or resources are closed or released regardless of whether an exception occurs, <em>even if you don't catch the exception.</em> (Or if you don't catch that <em>specific</em> exception.)</p>
<pre><code>myfile = open("test.txt", "w")

try:
    myfile.write("the Answer is: ")
    myfile.write(42)   # raises TypeError, which will be propagated to caller
finally:
    myfile.close()     # will be executed before TypeError is propagated
</code></pre>
<p>In this example you'd be better off using the <code>with</code> statement, but this kind of structure can be used for other kinds of resources.</p>
<p>A few years later, I wrote <a href="http://www.engyrus.com/2015/03/spt-4-there-is-no-try.html" rel="noreferrer">a blog post</a> about an abuse of <code>finally</code> that readers may find amusing.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are not equivalent. Finally code is run no matter what else happens. It is useful for cleanup code that has to run.</p>
</div>
<div class="post-text" itemprop="text">
<p>To add to the other answers above, the <code>finally</code> clause executes no matter what whereas the <code>else</code> clause executes only if an exception was not raised.</p>
<p><strong><em>For example, writing to a file with no exceptions will output the following:</em></strong></p>
<pre><code>file = open('test.txt', 'w')

try:
    file.write("Testing.")
    print("Writing to file.")
except IOError:
    print("Could not write to file.")
else:
    print("Write successful.")
finally:
    file.close()
    print("File closed.")
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>Writing to file.
Write successful.
File closed.
</code></pre>
<p><strong><em>If there is an exception, the code will output the following, (note that a deliberate error is caused by keeping the file read-only.</em></strong></p>
<pre><code>file = open('test.txt', 'r')

try:
    file.write("Testing.")
    print("Writing to file.")
except IOError:
    print("Could not write to file.")
else:
    print("Write successful.")
finally:
    file.close()
    print("File closed.")
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>Could not write to file.
File closed.
</code></pre>
<p>We can see that the <code>finally</code> clause executes regardless of an exception. Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code blocks are not equivalent.  The <code>finally</code> clause will also be run if <code>run_code1()</code> throws an exception other than <code>TypeError</code>, or if <code>run_code2()</code> throws an exception, while <code>other_code()</code> in the first version wouldn't be run in these cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your first example, what happens if <code>run_code1()</code> raises an exception that is not <code>TypeError</code>? ... <code>other_code()</code> will not be executed.</p>
<p>Compare that with the <code>finally:</code> version: <code>other_code()</code> is guaranteed to be executed regardless of any exception being raised.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>finally</code> is for defining <strong>"clean up actions"</strong>. The <code>finally</code> clause is executed in any event before leaving the <code>try</code> statement, whether an exception (even if you do not handle it) has occurred or not. </p>
<p>I second @Byers's example.</p>
</div>
<div class="post-text" itemprop="text">
<p>Finally can also be used when you want to run "optional" code before running the code for your main work and that optional code may fail for various reasons.</p>
<p>In the following example, we don't know precisely what kind of exceptions <code>store_some_debug_info</code> might throw.</p>
<p>We could run:</p>
<pre><code>try:
  store_some_debug_info()
except Exception:
  pass
do_something_really_important() 
</code></pre>
<p>But, most linters will complain about catching too vague of an exception.  Also, since we're choosing to just <code>pass</code> for errors, the <code>except</code> block doesn't really add value.</p>
<pre><code>try:
  store_some_debug_info()
finally:
  do_something_really_important()     
</code></pre>
<p>The above code has the same effect as the 1st block of code but is more concise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perfect example is as below:</p>
<pre><code>try:
    #x = Hello + 20
    x = 10 + 20 
except:
    print 'I am in except block'
    x = 20 + 30
else:
    print 'I am in else block'
    x += 1
finally:
    print 'Finally x = %s' %(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As explained in the <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" rel="nofollow noreferrer">documentation</a>, the <code>finally</code> clause is intended to define clean-up actions that must be executed <strong>under all circumstances</strong>.</p>
<blockquote>
<p>If <code>finally</code> is present, it specifies a ‘cleanup’ handler. The <code>try</code>
  clause is executed, including any <code>except</code> and <code>else</code> clauses. If an
  exception occurs in any of the clauses and is not handled, the
  exception is temporarily saved. The <code>finally</code> clause is executed. If
  there is a saved exception it is re-raised at the end of the <code>finally</code>
  clause. </p>
</blockquote>
<p>An example:</p>
<pre><code>&gt;&gt;&gt; def divide(x, y):
...     try:
...         result = x / y
...     except ZeroDivisionError:
...         print("division by zero!")
...     else:
...         print("result is", result)
...     finally:
...         print("executing finally clause")
...
&gt;&gt;&gt; divide(2, 1)
result is 2.0
executing finally clause
&gt;&gt;&gt; divide(2, 0)
division by zero!
executing finally clause
&gt;&gt;&gt; divide("2", "1")
executing finally clause
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'
</code></pre>
<p>As you can see, the <code>finally</code> clause is executed in any event. The <code>TypeError</code> raised by dividing two strings is not handled by the <code>except</code> clause and therefore re-raised after the <code>finally</code> clause has been executed.</p>
<p>In real world applications, the finally clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using delphi professionally for some years taught me to safeguard my cleanup routines using finally. Delphi pretty much enforces the use of finally to clean up any resources created before the try block, lest you cause a memory leak. This is also how Java, Python and Ruby works.</p>
<pre><code>resource = create_resource
try:
  use resource
finally:
  resource.cleanup
</code></pre>
<p>and resource will be cleaned up regardless of what you do between try and finally. Also, it won't be cleaned up if execution never reaches the <code>try</code> block. (i.e. <code>create_resource</code> itself throws an exception) It makes your code "exception safe".</p>
<p>As to why you actually need a finally block, not all languages do. In C++ where you have automatically called destructors which enforce cleanup when an exception unrolls the stack. I think this is a step up in the direction of cleaner code compared to try...finally languages.</p>
<pre><code>{    
  type object1;
  smart_pointer&lt;type&gt; object1(new type());
} // destructors are automagically called here in LIFO order so no finally required.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A try block has just one mandatory clause: The try statement.
The except, else and finally clauses are optional and based on user preference.</p>
<p>finally: 
Before Python leaves the try statement, it will run the code in the finally block under any conditions, even if it's ending the program. E.g., if Python ran into an error while running code in the except or else block, the finally block will still be executed before stopping the program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Run these Python3 codes to watch the need of finally:</p>
<p>CASE1:</p>
<pre><code>count = 0
while True:
    count += 1
    if count &gt; 3:
        break
    else:
        try:
            x = int(input("Enter your lock number here: "))

            if x == 586:
                print("Your lock has unlocked :)")

                break
            else:
                print("Try again!!")

                continue

        except:
            print("Invalid entry!!")
        finally:
            print("Your Attempts: {}".format(count))
</code></pre>
<p>CASE2:</p>
<pre><code>count = 0

while True:
    count += 1
    if count &gt; 3:
        break
    else:
        try:
            x = int(input("Enter your lock number here: "))

            if x == 586:
                print("Your lock has unlocked :)")

                break
            else:
                print("Try again!!")

                continue

        except:
            print("Invalid entry!!")

        print("Your Attempts: {}".format(count))
</code></pre>
<p>Try the following inputs each time:</p>
<ol>
<li>random integers</li>
<li>correct code which is 586(Try this and you will get your answer)</li>
<li>random strings</li>
</ol>
<p>** At a very early stage of learning Python.</p>
</div>
<span class="comment-copy">try:     #x = Hello + 20     x = 10 + 20  except:     print 'I am in except block'     x = 20 + 30 else:     print 'I am in else block'     x += 1 finally:     print 'Finally x = %s' %(x)</span>
<span class="comment-copy">What if there is an exception in <code>finally</code> code?</span>
<span class="comment-copy">It would be an uncaught exception as a normal exception not wrapped in a try - except block @HrvojeT</span>
<span class="comment-copy"><code>Finally code is run no matter what else happens</code>... unless there's an infinite loop. Or a powercut. Or <code>os._exit()</code>. Or...</span>
<span class="comment-copy">… a segfault. Or <code>SIGABRT</code>.</span>
<span class="comment-copy">@Mark Actually, sys.exit throws a normal exception. But yes, anything that causes the process to terminate immediately will mean that nothing else executes.</span>
<span class="comment-copy">@Antimony: Thanks. Changed to <code>os._exit</code>.</span>
<span class="comment-copy">@Stephen For one thing, finally code runs even if you return from the try block. In that case, you won't hit the except clause.</span>
<span class="comment-copy">This would've worked even if you didn't use the "finally" clause which doesn't answer the question since OP wants to know the difference, a good example would've been causing a different error than IOError, to show that the finally clause block is executed before the exception is propagated to the caller.</span>
<span class="comment-copy">This is wrong. The except statement is mandatory.</span>
