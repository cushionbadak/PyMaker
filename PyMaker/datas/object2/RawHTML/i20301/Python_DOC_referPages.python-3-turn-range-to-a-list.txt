<div class="post-text" itemprop="text">
<p>I'm trying to make a list with numbers <code>1-1000</code> in it. Obviously this would be annoying to write/read, so I'm attempting to make a list with a range in it. In Python 2 it seems that:</p>
<pre><code>some_list = range(1,1000)
</code></pre>
<p>would have worked, but in Python 3 the range is similar to the <code>xrange</code> of Python 2?</p>
<p>Can anyone provide some insight into this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just construct a list from the range object:</p>
<pre><code>my_list = list(range(1, 1001))
</code></pre>
<p>This is how you do it with generators in python2.x as well.  Typically speaking, you probably don't need a list though since you can come by the value of <code>my_list[i]</code> more efficiently (<code>i + 1</code>), and if you just need to iterate over it, you can just fall back on <code>range</code>.</p>
<p>Also note that on python2.x, <code>xrange</code> is still indexable<sup>1</sup>.  This means that <code>range</code> on python3.x also has the same property<sup>2</sup></p>
<p><sup><sup>1</sup><code>print xrange(30)[12]</code> works for python2.x</sup></p>
<p><sup><sup>2</sup>The analogous statement to <sup>1</sup> in python3.x is <code>print(range(30)[12])</code> and that works also.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>in Python 3.x, the <code>range()</code> function got its own type. so in this case you must use iterator</p>
<p><code>list(range(1000))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In Pythons &lt;= 3.4 you can, as others suggested, use <code>list(range(10))</code> in order to make a list out of a range (In general, any iterable).</p>
<p>Another alternative, introduced in Python <code>3.5</code> with its unpacking generalizations, is by using <code>*</code> in a list literal <code>[]</code>:</p>
<pre><code>&gt;&gt;&gt; r = range(10)
&gt;&gt;&gt; l = [*r]
&gt;&gt;&gt; print(l)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Though this is equivalent to <code>list(r)</code>, it's literal syntax and the fact that no function call is involved does let it execute faster. It's also less characters, if you need to code golf :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>You really shouldn't need to use the numbers 1-1000 in a list. But if for some reason you really do need these numbers, then you could do:</p>
<pre><code>[i for i in range(1, 1001)]
</code></pre>
<p>List Comprehension in a nutshell:</p>
<p>The above list comprehension translates to:</p>
<pre><code>nums = []
for i in range(1, 1001):
    nums.append(i)
</code></pre>
<p>This is just the list comprehension syntax, though from 2.x. I know that this will work in python 3, but am not sure if there is an upgraded syntax as well</p>
<p>Range starts inclusive of the first parameter; but ends Up To, <strong>Not Including</strong> the second Parameter (when supplied 2 parameters; if the first parameter is left off, it'll start at '0')  </p>
<pre><code>range(start, end+1)
[start, start+1, .., end]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason why Python3 lacks a function for directly getting a ranged list is because the original Python3 designer was quite novice in Python2. He only considered the use of range() function in a for loop, thus, the list should never need to be expanded. In fact, very often we do need to use the range() function to produce a list and pass into a function.</p>
<p>Therefore, in this case, Python3 is less convenient as compared to Python2 because:</p>
<ul>
<li>In Python2, we have xrange() and range(); </li>
<li>In Python3, we have range() and list(range())</li>
</ul>
<p>Nonetheless, you can still use list expansion in this way:</p>
<pre><code>[*range(N)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually, if you want 1-1000 (inclusive), use the <code>range(...)</code> function with parameters 1 and 1001: <code>range(1, 1001)</code>, because the <code>range(start, end)</code> function goes from start to (end-1), inclusive.</p>
</div>
<div class="post-text" itemprop="text">
<p>In fact, this is a retro-gradation of Python3 as compared to Python2. Certainly, Python2 which uses range() and xrange() is more convenient than Python3 which uses list(range()) and range() respectively. The reason is because the original designer of Python3 is not very experienced, they only considered the use of the range function by many beginners to iterate over a large number of elements where it is both memory and CPU inefficient; but they neglected the use of the range function to produce a number list. Now, it is too late for them to change back already.</p>
<p>If I was to be the designer of Python3, I will:</p>
<ol>
<li>use irange to return a sequence iterator</li>
<li>use lrange to return a sequence list</li>
<li>use range to return either a sequence iterator (if the number of elements is large, e.g., range(9999999) or a sequence list (if the number of elements is small, e.g., range(10))</li>
</ol>
<p>That should be optimal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer">Range</a> in Python 3.</p>
<p>Here is a example function that return in between numbers from two numbers</p>
<pre><code>def get_between_numbers(a, b):
    """
    This function will return in between numbers from two numbers.
    :param a:
    :param b:
    :return:
    """
    x = []
    if b &lt; a:
        x.extend(range(b, a))
        x.append(a)
    else:
        x.extend(range(a, b))
        x.append(b)

    return x
</code></pre>
<blockquote>
<p>Result</p>
</blockquote>
<pre><code>print(get_between_numbers(5, 9))
print(get_between_numbers(9, 5))

[5, 6, 7, 8, 9]  
[5, 6, 7, 8, 9]
</code></pre>
</div>
<span class="comment-copy">also, <code>some_list[i] == i+1</code>, so you probably don't really need a list anyway.</span>
<span class="comment-copy">@RikPoggi. for example, one might need to supply a list for a plotting function.  Sometimes a range will suffice, but a range cannot be concatenated (is immutable), so if you need to add a default starting value to all lists being plotted, that on needs to be turned into a list also.</span>
<span class="comment-copy">This is definitely the way to go, but a nitpick: this isn't really a "cast"</span>
<span class="comment-copy">I would say "construct" or "build" (or possibly "materialise")- as you're not "converting" (as such) a generator to a list, you're creating a new list object from a data source which happens to be a generator... (but s'pose just splitting hairs and not 100% sure what I favour anyway)</span>
<span class="comment-copy">My +1 for "construct" as it is consistent with other OO languages. The <code>list(arg)</code> is understood in other languages as calling a constructor of the <code>list</code> class. Actually, it is also the Python case. The debates whether the object is filled during the construction (as in the C++ case) or only during the first automatically called method (as in the Python <code>__init__()</code> method) cannot change the basic abstract idea. My view is that <i>the list constructor takes the iterator and fills the list with the returned values</i>.</span>
<span class="comment-copy">Why does it give an error in jupyter notebook and working fine in shell? Error: <code>'range' object is not callable</code></span>
<span class="comment-copy">my guess is that you named something else <code>range</code> at one point ...</span>
<span class="comment-copy">"in this case you must use iterator"? What the heck is that supposed to mean?</span>
<span class="comment-copy">To be clear, you can still one-line it: <code>[*range(10)]</code> works just fine for when you don't need the <code>range</code> for any purpose but initializing the <code>list</code>. Side-note: My favorite(okay, not really) part of the unpacking generalizations is that empty <code>set</code>s now have a literal syntax, <code>{*()}</code>, or as I call it, the one-eyed monkey operator. ;-)</span>
<span class="comment-copy">@ShadowRanger that's how I originally thought about writing it. I decided to be a bit more verbose in order to not confuse new Python users :-)</span>
<span class="comment-copy">Why comprehension? Just: <code>list(range(1000))</code></span>
<span class="comment-copy">Thanks! Would you mind explaining why it's i for i in... instead of simply for i in?</span>
<span class="comment-copy">I haven't worked with python3. So I'm not fully certain about how it works. I know comprehensions will work, but wasn't 100% on the casting. But if casting works, then you're right and your way is more pythonic.</span>
<span class="comment-copy">@inspectorG4dget: It's not "casting", it's calling the <a href="http://docs.python.org/library/functions.html#list" rel="nofollow noreferrer"><code>list()</code> constructor with an iterable</a>. The <code>list()</code> constructor knows how to create a new list when given any iterable object.</span>
<span class="comment-copy">@inspectorG4dget: <code>list(range(1000))</code> will work in python3 just like <code>list(xrange(1000))</code> in python2</span>
