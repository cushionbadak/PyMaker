<div class="post-text" itemprop="text">
<p>I've written a script that uses two thread pools of ten threads each to pull in data from an API. The thread pool implements <a href="http://code.activestate.com/recipes/577187-python-thread-pool/" rel="noreferrer">this code on ActiveState</a>.  Each thread pool is monitoring a Redis database via <a href="http://redis-py.readthedocs.org/en/latest/index.html#redis.StrictRedis.pubsub" rel="noreferrer">PubSub</a> for new entries.  When a new entry is published, python passes the data to a function that uses python's <a href="http://docs.python.org/library/subprocess.html#popen-constructor" rel="noreferrer">Subprocess.POpen</a> to execute a PHP shell to do the actual work of calling the API.</p>
<p>This system of launching PHP shells is necessary for functionality with my PHP web app, so launching PHP shells with Python can't be avoided.</p>
<p>This script will only be running on Linux servers.</p>
<p><del>How do I control the <a href="http://en.wikipedia.org/wiki/Nice_(Unix)" rel="noreferrer">niceness</a> (scheduling priority) of the application's threads?</del></p>
<p><em>Edit:</em></p>
<p>It seems controlling scheduling priority for individual threads in Python isn't possible.  Is there a python solution, or at the very least a UNIX command I can run along with my script, to control the priority?</p>
<p><em>Edit 2:</em></p>
<p>Well I didn't end up finding a python way to handle it.  I'm just running my script with nice now like this:</p>
<pre><code>nice -n 19 python MyScript.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe that threading priority is not controllable in python due to how they are implemented using a global interpreter lock (GIL). Having said that, even if you could give one thread more CPU processing priority, the python implementation that hands around the GIL would not be aware of this as it handed around the GIL. If you were able to increase niceness in a single thread in your pool (say it is doing a more important job) you would need to use your own implementation of locks to give the higher priority thread access to the GIL more often.</p>
<p>A google search returns this article which I believe is similar to what you are asking</p>
<p>Explains why it doesnt work
<a href="http://www.velocityreviews.com/forums/t329441-threading-priority.html" rel="noreferrer">http://www.velocityreviews.com/forums/t329441-threading-priority.html</a></p>
<p>Explains the workaround I was suggesting
<a href="http://bytes.com/topic/python/answers/645966-setting-thread-priorities" rel="noreferrer">http://bytes.com/topic/python/answers/645966-setting-thread-priorities</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I know, a lot of time has passed, but I recently came across this question, and I thought it would be useful to add another option.</p>
<p>Have a look at <a href="https://github.com/rfk/threading2" rel="nofollow">threading2</a>, which is a <strong>drop-in</strong> replacement and extension for the default <em>threading</em> module, with support – sort of – for <strong>priority</strong> and affinity.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was wondering if <a href="https://stackoverflow.com/a/2470061" title="Use the preexec_fn on subprocess">this answer at another related question</a> might be useful in this scenario? (<a href="https://stackoverflow.com/a/2470061" title="Use the preexec_fn on subprocess">link</a>)</p>
<p>As you are already using <a href="http://docs.python.org/library/subprocess.html#popen-constructor" rel="nofollow noreferrer" title="Subprocess.POpen Constructor">Subprocess.POpen</a> to launch your PHP script, it strikes me that you can use "preexec_fn" and either a predefined function, or a lambda function <em>(as demonstrated in the above linked answer)</em> to set the nice level of each launched PHP thread?</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't work, but I tried: </p>
<ol>
<li>getting the parent pid and priority</li>
<li>launching threads using concurrent.futures.ThreadPoolExecutor</li>
<li>using ctypes to get the (linux) thread id from within the thread(works)</li>
<li>using the tid with os.setpriority(os.PRIO_PROCESS,tid,parent_priority+1)</li>
<li>calling pool.shutdown() from the parent.</li>
</ol>
<p>Even with liberal sprinkling of os.sched_yield(), the child threads never actually run past the setpriority().</p>
<p>Reading man pages, it seems threads don't have the capability to change (even their) scheduling priority; you have to do something with "capabilities" to give the thread the "CAP_SYS_NICE" capability. Running the process with root permissions didn't help either; child threads still don't run.</p>
</div>
<div class="post-text" itemprop="text">
<p>The python <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading-docs</a> mention explicitly that there is no support for setting thread-priorities:</p>
<blockquote>
<p>The design of this module is loosely based on Java’s threading model. However, where Java makes locks and condition variables basic behavior of every object, they are separate objects in Python. Python’s Thread class supports a subset of the behavior of Java’s Thread class; <strong>currently, there are no priorities</strong>, no thread groups, and threads cannot be destroyed, stopped, suspended, resumed, or interrupted. The static methods of Java’s Thread class, when implemented, are mapped to module-level functions.</p>
</blockquote>
</div>
<span class="comment-copy">Thanks for the answer!  I've rephrased the question now asking how I can set the schedule priority for the application as a whole instead of the individual.  That should still satisfy my needs.  I've upvoted your response and will choose you as the best answer if I don't get any other responses.</span>
<span class="comment-copy">It's now unmaintained, there's a link that leads to <a href="https://rfk.id.au/blog/entry/archiving-open-source-projects/" rel="nofollow noreferrer">rfk.id.au/blog/entry/archiving-open-source-projects</a> :(</span>
