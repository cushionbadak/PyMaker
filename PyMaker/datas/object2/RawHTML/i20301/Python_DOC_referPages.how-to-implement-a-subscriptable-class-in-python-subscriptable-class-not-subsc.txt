<div class="post-text" itemprop="text">
<p>To implement a subscriptable object is easy, just implement <code>__getitem__</code> in this object's class definition.<br/>
But now I want to implement a subscriptable class. For example, I want to implement this code:</p>
<pre><code>class Fruit(object):
    Apple = 0
    Pear = 1
    Banana = 2
    #________________________________ 
    #/ Some other definitions,         \
    #\ make class 'Fruit' subscriptable. /
    # -------------------------------- 
    #        \   ^__^
    #         \  (oo)\_______
    #            (__)\       )\/\
    #                ||----w |
    #                ||     ||

print Fruit['Apple'], Fruit['Banana']
#Output: 0 2
</code></pre>
<p>I know <code>getattr</code> can do the same thing, but I feel subscript accessing is more elegant.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems to work by changing the metaclass. For Python 2:</p>
<pre><code>class GetAttr(type):
    def __getitem__(cls, x):
        return getattr(cls, x)

class Fruit(object):
    __metaclass__ = GetAttr

    Apple = 0
    Pear = 1
    Banana = 2

print Fruit['Apple'], Fruit['Banana']
# output: 0 2
</code></pre>
<hr/>
<p>On Python 3, you should use <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Enum</a> directly:</p>
<pre><code>import enum

class Fruit(enum.Enum):
    Apple = 0
    Pear = 1
    Banana = 2

print(Fruit['Apple'], Fruit['Banana'])
# Output: Fruit.Apple, Fruit.Banana
print(Fruit['Apple'].value, Fruit['Banana'].value)
# Output: 0 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add something like this to your class:</p>
<pre><code>class Fruit(object):
     def __init__(self):
         self.Fruits = {"Apple": 0, "Pear": 1, "Banana": 2}
     def __getitem__(self, item):
         return self.Fruits[item]
</code></pre>
</div>
<span class="comment-copy">I have no answer for you, but I would like to know why? To me it looks like a regular Hash:      &gt;&gt;&gt; Fruit = {'Banana': 0, 'Apple': 1}     &gt;&gt;&gt; print Fruit['Banana']     0</span>
<span class="comment-copy">@Pengman I also want to implement 'Fruit' as a enum type. <code>if sth == Fruit.Apple: doSomething()</code>.</span>
<span class="comment-copy">I like the cow.</span>
<span class="comment-copy">@thg435 You can use a tool named 'cowsay' to generate it.</span>
<span class="comment-copy">And one more plus for cowsay.</span>
<span class="comment-copy">Thanks for your answer. Let me add some explanation: Class is also object in Python. The type of 'class object' is define by <code>__metaclass__</code>, default to <code>type</code>. So if you need a subscriptable class, just implement <code>__getitem__</code> in its <code>__metaclass__</code>. For more information about <code>__metaclass__</code>, read <a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python?answertab=votes#tab-top">this post</a>.</span>
<span class="comment-copy">Note that <a href="http://mikewatkins.ca/2008/11/29/python-2-and-3-metaclasses/" rel="nofollow noreferrer">metaclasses are done differently in python 3</a>.</span>
<span class="comment-copy">@Darthfett The link fails now</span>
<span class="comment-copy">@AbhiP Try the <a href="http://web.archive.org/web/20140424195834/http://mikewatkins.ca/2008/11/29/python-2-and-3-metaclasses/" rel="nofollow noreferrer">webarchive version</a>, or <a href="http://www.pythoncentral.io/how-metaclasses-work-technically-in-python-2-and-3/" rel="nofollow noreferrer">this useful link</a> which shows the same code for both python 2 and 3 metaclasses.  Looks like Mike Watkins has temporarily taken down his article.</span>
