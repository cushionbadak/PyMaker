<div class="post-text" itemprop="text">
<p>Just for fun and because it was really easy, I've written a short program to generate <a href="http://math.wikia.com/wiki/Grafting_number" rel="noreferrer">Grafting numbers</a>, but because of floating point precision issues it's not finding some of the larger examples.</p>
<pre><code>def isGrafting(a):
  for i in xrange(1, int(ceil(log10(a))) + 2):
    if a == floor((sqrt(a) * 10**(i-1)) % 10**int(ceil(log10(a)))):
      return 1

a = 0
while(1):
  if (isGrafting(a)):
    print "%d %.15f" % (a, sqrt(a))
  a += 1
</code></pre>
<p>This code misses at least one known Grafting number. <code>9999999998 =&gt; 99999.99998999999999949999999994999999999374999999912...</code>  It seems to drop extra precision after multiplying by <code>10**5</code>.</p>
<pre><code>&gt;&gt;&gt; a = 9999999998
&gt;&gt;&gt; sqrt(a)
99999.99999
&gt;&gt;&gt; a == floor((sqrt(a) * 10**(5)) % 10**int(ceil(log10(a))))
False
&gt;&gt;&gt; floor((sqrt(a) * 10**(5)) % 10**int(ceil(log10(a))))
9999999999.0
&gt;&gt;&gt; print "%.15f" % sqrt(a)
99999.999989999996615
&gt;&gt;&gt; print "%.15f" % (sqrt(a) * 10**5)
9999999999.000000000000000
</code></pre>
<p>So I wrote a short C++ program to see if it was my CPU truncating the floating point number or python somehow.</p>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cmath&gt;
#include &lt;stdint.h&gt;

int main()
{
  uint64_t a = 9999999998;
  printf("%ld %.15f %.15f %.15f %.15f\n", a, sqrt((double)a), sqrt((double)a)*1e4, sqrt((double)a)*1e5, sqrt((double)a)*1e6);
  a = 999999999998;
  printf("%ld %.15f %.15f %.15f %.15f\n", a, sqrt((double)a), sqrt((double)a)*1e5, sqrt((double)a)*1e6, sqrt((double)a)*1e7);
  a = 99999999999998;
  printf("%ld %.15f %.15f %.15f %.15f\n", a, sqrt((double)a), sqrt((double)a)*1e6, sqrt((double)a)*1e7, sqrt((double)a)*1e8);
  return 0;
}
</code></pre>
<p>Which outputs:</p>
<pre><code>9999999998 99999.999989999996615 999999999.899999976158142 9999999999.000000000000000 99999999990.000000000000000
999999999998 999999.999998999992386 99999999999.899993896484375 999999999999.000000000000000 9999999999990.000000000000000
99999999999998 9999999.999999899417162 9999999999999.900390625000000 99999999999999.000000000000000 999999999999990.000000000000000
</code></pre>
<p>So it looks like I'm running up hard against the limits of floating point precision and the CPU is chopping off the remaining bits because it thinks that the remaining difference is floating point error.  Is there a way to work around this under Python?  Or do I need to move to C and use GMP or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the standard library, the <a href="http://docs.python.org/library/decimal.html#module-decimal" rel="noreferrer"><code>decimal</code></a> module may be what you're looking for. Also, I have found <a href="http://mpmath.org/" rel="noreferrer">mpmath</a> to be quite helpful. The <a href="http://mpmath.org/doc/current/basics.html" rel="noreferrer">documentation</a> has many great examples as well (unfortunately my office computer does not have <code>mpmath</code> installed; otherwise I would verify a few examples and post them).</p>
<p>One caveat about the <a href="http://docs.python.org/library/decimal.html#decimal-objects" rel="noreferrer"><code>decimal</code></a> module, though. The module contains several in-built functions for simple mathematical operations (e.g. <code>sqrt</code>), but the results from these functions may not always match the corresponding function in <code>math</code> or other modules at higher precisions (although they may be more accurate). For example, </p>
<pre><code>from decimal import *
import math

getcontext().prec = 30
num = Decimal(1) / Decimal(7)

print("   math.sqrt: {0}".format(Decimal(math.sqrt(num))))
print("decimal.sqrt: {0}".format(num.sqrt()))
</code></pre>
<p>In Python 3.2.3, this outputs the first two lines</p>
<pre><code>   math.sqrt: 0.37796447300922719758631274089566431939601898193359375
decimal.sqrt: 0.377964473009227227214516536234
actual value: 0.3779644730092272272145165362341800608157513118689214
</code></pre>
<p>which as stated, isn't exactly what you would expect, and you can see that the higher the precision, the less the results match. Note that the <code>decimal</code> module does have more accuracy in this example, since it more closely matches the <a href="http://www.wolframalpha.com/input/?i=sqrt%281%2F7%29" rel="noreferrer">actual value</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>For this particular problem, <code>decimal</code> is a great way to go, because it stores the decimal digits as tuples! </p>
<pre><code>&gt;&gt;&gt; a = decimal.Decimal(9999999998)
&gt;&gt;&gt; a.as_tuple()
DecimalTuple(sign=0, digits=(9, 9, 9, 9, 9, 9, 9, 9, 9, 8), exponent=0)
</code></pre>
<p>Since you're looking for a property that is most naturally expressed in decimal notation, it's a bit silly to use a binary representation. The wikipedia page you linked to didn't indicate how many "non-grafting digits" may appear before the "grafting digits" begin, so this lets you specify:</p>
<pre><code>&gt;&gt;&gt; def isGrafting(dec, max_offset=5):
...     dec_digits = dec.as_tuple().digits
...     sqrt_digits = dec.sqrt().as_tuple().digits
...     windows = [sqrt_digits[o:o + len(dec_digits)] for o in range(max_offset)]
...     return dec_digits in windows
... 
&gt;&gt;&gt; isGrafting(decimal.Decimal(9999999998))
True
&gt;&gt;&gt; isGrafting(decimal.Decimal(77))
True
</code></pre>
<p>I think there's a good chance the result of <code>Decimal.sqrt()</code> will be more accurate, at least for this, than the result of <code>math.sqrt()</code> because of the conversion between binary representation and decimal representation. Consider the following, for example: </p>
<pre><code>&gt;&gt;&gt; num = decimal.Decimal(1) / decimal.Decimal(7)
&gt;&gt;&gt; decimal.Decimal(math.sqrt(num) ** 2) * 7
Decimal('0.9999999999999997501998194593')
&gt;&gt;&gt; decimal.Decimal(num.sqrt() ** 2) * 7
Decimal('1.000000000000000000000000000')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try with <a href="http://docs.python.org/library/decimal.html#module-decimal">Decimal</a> instead of floatingpoint.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has no built-in arbitrary-precision floats, but there are 3rd-party Python packages that use GMP:  <a href="http://pypi.python.org/pypi/gmpy/1.15" rel="nofollow noreferrer">gmpy</a> and <a href="http://pypi.python.org/pypi/PyGMP/0.9p2" rel="nofollow noreferrer">PyGMP</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>use <code>decimal</code>, (here is a clearer example):</p>
<pre><code>&gt;&gt;&gt; 2.3-2.2
0.09999999999999964
&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('2.3')-Decimal('2.2')
Decimal('0.1')
&gt;&gt;&gt; float(Decimal('2.3')-Decimal('2.2'))
0.1
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">to perform the exact arithmetic on rational numbers, <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer"><code>fractions</code> module</a> could be used.</span>
<span class="comment-copy">+1 for <code>mpmath</code>. The problem with using Decimal numbers is that you can't do much in the way of math functions on Decimal objects, so if you're just playing around it's pretty limiting.</span>
<span class="comment-copy">Just to be clear -- I'm pretty sure that in your test of <code>math.sqrt</code> vs. <code>Decimal.sqrt()</code>, the result produced by <code>math.sqrt</code> is <i>less</i> correct, because of binary-to-decimal conversion. Consider the output of <code>decimal.Decimal(math.sqrt(num) ** 2) * 7</code> vs. the output of <code>decimal.Decimal(num.sqrt() ** 2) * 7</code>.</span>
<span class="comment-copy">Considering that the actual value of sqrt(1/7) is <code>0.377964473009227227214516536234180060815751311868921454338333494171581260461469089680056126639220515802...</code> it seems that the decimal sqrt function is more accurate.</span>
<span class="comment-copy">Rather than <code>Decimal(math.sqrt(num))</code>, you simply want <code>num.sqrt()</code>.  <code>Decimal(math.sqrt(num))</code> builds a Decimal object from a low-precision math function, rather than doing a high-precision sqrt.</span>
<span class="comment-copy">@senderle No worries, my example is different. Plus it gives me an excuse to link to Wolfram Alpha!</span>
