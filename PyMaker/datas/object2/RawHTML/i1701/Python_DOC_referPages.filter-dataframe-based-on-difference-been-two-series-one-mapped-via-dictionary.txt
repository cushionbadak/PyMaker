<div class="post-text" itemprop="text">
<p>I have my dictionary</p>
<pre><code>d = {'A':1, 'B':2, 'C':3}
</code></pre>
<p>and my dataframe</p>
<pre><code>df =pd.DataFrame({
"col1": ["A", "B", "C"],
"col2": [1, 2, 3],
"col3": [2, 1, 4] })
</code></pre>
<p>I search to compare each value in df with the correspondant value in the dictionary. If it matches the value is kept, otherwise the value is drop.</p>
<p>I try </p>
<pre><code>m = df['col2'] &gt;= d[df['col1']]
df.where(m, df, other = "")
</code></pre>
<p>But it get this error code for m: TypeError: 'Series' objects are mutable, thus they cannot be hashed... </p>
<p>Thank you for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a new column for comparison using apply</p>
<pre><code>df[‘dict_col’] = df[‘col1’].apply(lambda k: d[k])

m = df[‘dict_col’] &gt;= df[‘col2’]

df[‘col2’] = df[‘col2’].where(m, df, other = "")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html" rel="nofollow noreferrer"><code>pd.Series.map</code></a> with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html" rel="nofollow noreferrer"><code>loc</code></a> and Boolean indexing:</p>
<pre><code>df = df.loc[df['col2'] &gt;= df['col1'].map(d)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hint is there in error message itself.</p>
<blockquote>
<p>TypeError: 'Series' objects are mutable, thus they cannot be hashed.</p>
</blockquote>
<p><code>df['col1']</code> is a <a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Series.html" rel="nofollow noreferrer"><code>Series</code></a> object, which is a mutable object.</p>
<p>Mutable objects cannot be hashed and hence cannot be used as a dictionary key. From <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>... <strong>dictionaries are indexed by keys, which can be any immutable type</strong>; strings and numbers can always be keys...</p>
</blockquote>
<p>You are using <code>Series</code> object as dictionary key. <em>One</em> way to rewrite <code>d[df['col1']]</code> is:</p>
<pre><code>[d[x] for x in df['col1']]
</code></pre>
</div>
<span class="comment-copy">Post your error</span>
<span class="comment-copy">TypeError: 'Series' objects are mutable, thus they cannot be hashed</span>
<span class="comment-copy">Yep. Apply should fix that</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/29700552/series-objects-are-mutable-and-cannot-be-hashed-error">"Series objects are mutable and cannot be hashed" error</a></span>
<span class="comment-copy">thanks ! But the whole row is erased, not just the value.</span>
<span class="comment-copy">Updated to replace those values with ‘’</span>
<span class="comment-copy">But the whole row is erased, not just the value.</span>
<span class="comment-copy">@Billy, Nope, that means either the data is wrong or you are applying the logic incorrectly.</span>
<span class="comment-copy">ok, i search what i apply wrongly</span>
<span class="comment-copy">i do not understand</span>
<span class="comment-copy">thanks, it's clear, I have understood my mistake (and reread the documentation). But the result of my condition is still applying to the whole row. I do not get why.</span>
