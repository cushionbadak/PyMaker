<div class="post-text" itemprop="text">
<p>So how to the title description?</p>
<p>So the list:</p>
<pre><code>l=[1,2,3,4,5,6,7,8]
</code></pre>
<p>Desired output:</p>
<pre><code>[1234,5678]
</code></pre>
<p>So merge the every four packs of elements!</p>
<p>I am thinking about a list comprehension, but it's not a working well (it is, it's below my question)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the elements from slicing index of the range, we can do that because of the <code>step</code> argument (last one), that make that sequence into an integer (number).</p>
<p><em>Note: i am ordering them by rank, so (best on top, and worst at bottom)</em></p>
<blockquote>
<p><strong>Option 1:</strong> <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>list comprehension</code></a>:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; [int(''.join(map(str,l[i:i+4]))) for i in range(0,len(l),4)]
[1234, 5678]
&gt;&gt;&gt;
</code></pre>
<blockquote>
<p><strong>Option 2:</strong> <a href="http://book.pythontips.com/en/latest/map_filter.html" rel="nofollow noreferrer"><code>map</code></a>:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; list(map(lambda i: int(''.join(map(str,l[i:i+4]))),range(0,len(l),4)))
[1234, 5678]
&gt;&gt;&gt;  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assume the length of <code>l</code> is the multiple of 4 and each element of <code>l</code> is an integer (1 to 9)</p>
<p>Here is another option without using string.</p>
<pre><code>[1000*l[4*i]+100*l[4*i+1]+10*l[4*i+2]+l[4*i+3] for i in range(len(l)//4)]
</code></pre>
</div>
<span class="comment-copy">Note: Option 1 is the better option, both on readability and performance; any time a <code>map</code> would require the use of <code>lambda</code> that the equivalent listcomp/genexpr can inline, the <code>map</code> will be slower. The use of <code>map</code> in option 1 is fine (because <code>str</code> is an existing function implemented in C which couldn't be avoided in an equivalent listcomp anyway).</span>
<span class="comment-copy">@ShadowRanger Yes sir, That's how i order them  :-), i know that :D</span>
<span class="comment-copy">Ouch, Little unreadable, and inefficient..., but thanks for it.</span>
<span class="comment-copy">Note: <code>range(len(l)/4)</code> should be <code>range(len(l)//4)</code>, use <code>//</code> not <code>/</code>.</span>
