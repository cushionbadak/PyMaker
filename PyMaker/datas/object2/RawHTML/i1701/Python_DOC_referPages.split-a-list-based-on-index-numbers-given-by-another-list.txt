<div class="post-text" itemprop="text">
<p>Sorry I'm a beginner and looking for some help dealing with some data..</p>
<p>So I have two lists:</p>
<p>One describes all participants scores in a game
The other contains the number of times each participant played the game</p>
<pre><code>scores=['win', 'draw', 'lose', 'lose', 'win', 'win']
trials=[2,3,1]
</code></pre>
<p>which means there were 3 participants, the first played two times and obtained 'win' and 'draw' etc.</p>
<p>How can I split the scores list so it becomes a nested list with each participants scores as a list? As I want to find a person's average score..</p>
<p>e.g. <code>splitscores=[['win','draw']['lose','lose','win']['win]]</code></p>
<p>I've managed to get the first trial by doing:</p>
<pre><code>trial1=[]
for item in scores:
    trial1.append(scores[:trials[0]])
print(trial1)
</code></pre>
<p>but no clue to get the others by making a loop
Can anyone help? Or is there a better way for me to find a person's average score?</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are good. You can also do it with a simple <code>for</code> loop if you find that clearer:</p>
<pre><code>scores = ['win', 'draw', 'lose', 'lose', 'win', 'win']
trials = [2, 3, 1]
trial1 = []
# This variable holds the first index of the next sublist
idx = 0
for n in trials:
    trial1.append(scores[idx:idx + n])
    # The next sublist starts where the previous one ended
    idx += n
print(trial1)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>[['win', 'draw'], ['lose', 'lose', 'win'], ['win']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate</code></a> to sum your <code>trials</code> list cumulatively. Then use a list comprehension with slicing:</p>
<pre><code>from itertools import accumulate

scores = ['win', 'draw', 'lose', 'lose', 'win', 'win']
trials = [2,3,1]

idx = [0] + list(accumulate(trials))
res = [scores[start:end] for start, end in zip(idx, idx[1:])]

[['win', 'draw'], ['lose', 'lose', 'win'], ['win']]
</code></pre>
<p>For a truly lazy solution, you can use the <code>itertools</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>pairwise</code> recipe</a>:</p>
<pre><code>from itertools import accumulate, tee

def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

idx = accumulate([0] + trials)
res = [scores[start:end] for start, end in pairwise(idx)]

[['win', 'draw'], ['lose', 'lose', 'win'], ['win']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can call <a href="https://docs.python.org/3.3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> by converting <code>scores</code> to a list iterator with <a href="https://docs.python.org/3.3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code></a>:</p>
<pre><code>&gt;&gt;&gt; scores=['win', 'draw', 'lose', 'lose', 'win', 'win']
&gt;&gt;&gt; trials=[2,3,1]
&gt;&gt;&gt; scores = iter(scores)
&gt;&gt;&gt; [[next(scores) for i in range(j)] for j in trials]
[['win', 'draw'], ['lose', 'lose', 'win'], ['win']]
</code></pre>
</div>
