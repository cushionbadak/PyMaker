<div class="post-text" itemprop="text">
<p>I'm new to python, but skilled on java. Now I'm facing a annoying question when training on python3.5, I have such a src structure:  </p>
<pre><code>/project-root  
--main.py  
--ModelImpl.py #subclass of BaseModel  
--ActionImpl.py #subclass of BaseAction  
--/base  
----BaseModel.py #base class of all  
----BaseAction.py #subclass of BaseModel  
----modulescript.py
</code></pre>
<p>in main.py:  </p>
<pre><code>from ModelImpl import ModelImpl
from ActionImpl import ActionImpl
modelImpl = ModelImpl()
actionImpl = ActionImpl()
</code></pre>
<p>in modulescript.py:  </p>
<pre><code>from BaseAction import BaseAction
baseAction = BaseAction() 
</code></pre>
<p>in BaseModel.py:</p>
<pre><code>class BaseModel: 
  def __init__(self):
    print("BaseModel")
</code></pre>
<p>in BaseAction.py:</p>
<pre><code>from .BaseModel import BaseModel
class BaseAction(BaseModel):
  def __init__(self):
    super().__init__()
    print("BaseAction")
</code></pre>
<p>in ModelImpl.py:</p>
<pre><code>from base.BaseModel import BaseModel
class ModelImpl(BaseModel):
  def __init__(self):
    super().__init__()
    print("ModelImpl")
</code></pre>
<p>in ActionImpl.py:</p>
<pre><code>from base.BaseAction import BaseAction
class ActionImpl(BaseAction):
  def __init__(self):
    super().__init__()
    print("ActionImpl")
</code></pre>
<p>Now when I input python3 main.py in terminal, I got printed result:  </p>
<pre><code>BaseModel   
ModelImpl   
BaseModel   
BaseAction   
ActionImpl
</code></pre>
<p>but if I input python3 module function.py, I got error:  </p>
<blockquote>
<p>Traceback (most recent call last):</p>
<p>File "modulescript.py", line 1, in (module) from BaseAction import BaseAction </p>
<p>File "/home/jerry/projects/test/python/base/BaseAction.py", line 1, in (module) from .BaseModel import BaseModel SystemError: Parent module '' not loaded, cannot perform relative import</p>
</blockquote>
<p>I found that It's cause by import statement in BaseAction.py:  </p>
<pre><code>from .BaseModel import BaseModel 
</code></pre>
<p>If I change to <code>from BaseModel import BaseModel</code>, the modulescript.py runs ok, but the main.py will got a error:  </p>
<blockquote>
<p>File "main.py", line 225, in (module) from ActionImpl import ActionImpl</p>
<p>File "/home/jerry/projects/test/python/ActionImpl.py", line 1, in (module) from base.BaseAction import BaseAction</p>
<p>File "/home/jerry/projects/test/python/base/BaseAction.py", line 1, in (module) from BaseModel import BaseModel</p>
<p>ImportError: No module named 'BaseModel'</p>
</blockquote>
<p>Oops. annoying!
In java, you can import any Class from any where if you provide the right path of the class like <code>import com.domain.MyClass;</code></p>
<p>so, what's the right way to import in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is Python, not Java, you group modules related to eachother in a single package, which is a folder.</p>
<p>To be able to import from a package, you must do a few things first.</p>
<ol>
<li><p>Create <code>__init__.py</code> in your package to let interpreter know that it's a package. If there's no such file in a folder, it won't even budge whether you want to import from there or not, it's not a package to it and that's all.</p></li>
<li><p>Additionally, if you want (and you should when you're creating a package for others to use) import classes functions and etc in your <code>__init__.py</code> to allow to import them from the package itself directly.</p></li>
</ol>
<p>I made a simple example:</p>
<p><code>project tree</code>:</p>
<pre><code>/root
  test.py
  /examplepkg
    __init__.py
    somemodule.py
</code></pre>
<p>EDIT: if you want examplepkg to have a "nested" package, as in, package it depends on in some way, you create another folder, and put another <code>__init__.py</code> in it and do the same thing, then in <code>__init__.py</code> of examplepkg you can further "export" it for the top level modules to see. How you do it is up to you, just be consistent.</p>
<p><code>somemodule.py</code>:</p>
<pre><code>class SomeClass:
    def __init__(self):
        print("New Instance of SomeClass!")
</code></pre>
<p><code>__init__.py</code>:</p>
<pre><code>from .somemodule import SomeClass # you could see it as exporting
</code></pre>
<p><code>test.py</code>:</p>
<pre><code>from examplepkg import SomeClass


SomeClass()
</code></pre>
<p>For more information, <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">read this</a>.</p>
</div>
<span class="comment-copy">You should note, your module-structure isn't very pythonic. Normally, you don't just make a single module per-class, but group related classes into modules. But that isn't really relevant to the question...</span>
<span class="comment-copy">try changing it to <code>from base.BaseModel import BaseModel</code></span>
<span class="comment-copy">Thx for your patient answer. Today I tried create a new python project using eclipse, and the import statement in BaseAction.py is "from base.BaseModel import BaseModel". When using eclipse built-in run as Python Run function, both the main.py and moudlescript.py runs ok. But when I change to command line tool , it still gives the error. After checking project's properties. I found that there's a PYTHONPATH defined, which is workspace-relative</span>
