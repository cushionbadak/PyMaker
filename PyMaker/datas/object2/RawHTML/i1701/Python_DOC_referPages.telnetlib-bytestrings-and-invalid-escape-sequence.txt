<div class="post-text" itemprop="text">
<p>I'm using <code>telnetlib.expect()</code> to interface with a device that responds in bytestrings, apparently. Unless I use bytestrings in the regex passed to <code>expect()</code> (either precompiled, or literals), an exception is generated: <code>TypeError: cannot use a string pattern on a bytes-like object</code>. However, <code>pycodestyle</code> complains this is <code>W605 invalid escape sequence '\d'</code>, and further reading makes me think this will become a Python syntax error in the future.</p>
<p>In summary:</p>
<pre><code>telnetlib.expect([b'\d']) # OK, but W065
telnetlib.expect(['\d'] # TypeError
telnetlib.expect([r'\d'] # TypeError
</code></pre>
<p>Is there a way through this, or is pycodestyle simply wrong?</p>
<p>(BTW, can't seem to suppress the W065 in pycodestyle, other than suppressing all warnings.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Bytestring literals use <code>\</code> as an escape character the same way string literals do. So similar to them you have to either use a raw bytestring literal <code>rb'\d'</code> or use double backslash <code>b'\\d'</code>.</p>
<p>From <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals</a></p>
<blockquote>
<p>In plain English: Both types of literals can be enclosed in matching
  single quotes (<code>'</code>) or double quotes (<code>"</code>). They can also be enclosed in
  matching groups of three single or double quotes (these are generally
  referred to as triple-quoted strings). The backslash (<code>\</code>) character is
  used to escape characters that otherwise have a special meaning, such
  as newline, backslash itself, or the quote character.</p>
</blockquote>
</div>
