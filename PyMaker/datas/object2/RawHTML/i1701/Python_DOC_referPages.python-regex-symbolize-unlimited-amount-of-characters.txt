<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9770860/using-regex-to-match-any-character-except">Using regex to match any character except =</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to figure out how to represent the following regex in python:</p>
<p>Find the first occurence of 
<code>{any character that isn't a letter}'{unlimited amount of any character including '}'{any character that isn't a letter}</code></p>
<p>For example:</p>
<pre class="lang-none prettyprint-override"><code>She said 'Hello There!'.
`he Looked. 'I've been sick' and then...`
</code></pre>
<p>My question is how do I implement the middle part? How do I represent an unlimited amount of characters until the pattern in the end is found (`_)? </p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few different ways you can represent an indefinite number of characters:</p>
<ul>
<li><code>*</code>: zero or more of the preceding character (greedy)</li>
<li><code>+</code>: one or more of the preceding character (greedy)</li>
<li><code>*?</code>: zero or more of the preceding character (non-greedy)</li>
<li><code>+?</code>: one or more of the preceding character (non-greedy)</li>
</ul>
<p>"Greedy" means that as many characters as possible will be matched. "Non-greedy" means that as few characters as possible will be matched. (For more explanation on greedy and non-greedy, see <a href="https://stackoverflow.com/questions/2301285/what-do-lazy-and-greedy-mean-in-the-context-of-regular-expressions">this answer</a>.)</p>
<p>In your case, it sounds like you want to match one or more characters, and for the match to be non-greedy, so you need <code>+?</code>.</p>
<p>In Python code:</p>
<pre><code>import re
my_regex = re.compile(r"\W'[^']+?'\W")
my_regex.search("She said 'Hello There!'.")
</code></pre>
<p>This regex won't match your second example, <code>'I've been sick' and then...</code>, as there is no non-word character before the first <code>'</code>.</p>
</div>
<span class="comment-copy">Your second example doesn't match the pattern you've given.</span>
<span class="comment-copy">How so? it shouldn't detect the ' unless there's a non-letter afterwards, so the I've wouldn't end the pattern</span>
<span class="comment-copy">Hi Tom, welcome to stackoverflow. Did you have a look at the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">python re module documentation</a>? Do you need an unlimited amount or an unlimited amount bigger than zero? Do you want to match as many or as few characters as possible?</span>
<span class="comment-copy">Yes I have, However I can't figure out how to implement it because of cases like the second one. How do I make it match patterns like ` 'I've been sick' and then...` There's a ' in the middle of the pattern that shouldn't prevent it from detecting the correct pattern.</span>
<span class="comment-copy">Your pattern starts by matching a non-letter followed by <code>'</code>. In your second example there are three <code>'</code>, but none of them has a non-letter in front of it.</span>
<span class="comment-copy">Why do you think it's one or more characters? "Unlimited amount" sounds like it would include 0.</span>
<span class="comment-copy">Your regex doesn't match <code>4'-'4</code>.</span>
<span class="comment-copy">@melpomene I was guessing that it was one or more characters based on the examples in the question. It doesn't sound like Tom wants to match empty quotes. Not sure what you're getting at with <code>4'-'4</code>. Why should the regex match that?</span>
<span class="comment-copy">Because it's a non-letter, followed by <code>'</code>, followed by something that's not <code>'</code>, followed by <code>'</code>, followed by a non-letter.</span>
<span class="comment-copy">The last example would have a whitespace before it's first ': ` 'I've been sick' she said` I think my pattern to begin with wasn't correct, It shouldn't disallow ' in between the two main ' s.</span>
