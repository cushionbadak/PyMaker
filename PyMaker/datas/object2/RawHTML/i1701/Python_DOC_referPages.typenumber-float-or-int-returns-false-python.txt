<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15112125/how-to-test-multiple-variables-against-a-value">How to test multiple variables against a value?</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>I'm checking if the argument of a function is a float or an int with this line and it keeps return false, can anyone explain why this happens?</p>
<pre><code>def distance_from_zero(number):
    if type(number) == (int or float):
        return abs(number)
    else:
        return "Nope"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>This is the shortest, most pythonic way.</em></strong></p>
<p>Use <code>isinstance</code>:</p>
<pre><code>if isinstance(number, (int, float)):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the spirit of <a href="https://docs.python.org/3/glossary.html?highlight=eafp#term-eafp" rel="nofollow noreferrer">Easier to ask for forgiveness than permission</a> you could use an exception instead of explicit type checking, like</p>
<pre><code>def distance_from_zero(number):
    try:
        return abs(number)
    except TypeError:
        return 'Nope'


for x in [1, 1.1, 'a']:
    print(x, distance_from_zero(x))

1 1
1.1 1.1
a Nope
</code></pre>
<p>IMO this is often clearer and more foolproof.</p>
</div>
<span class="comment-copy">You must write it as <code>if type(number) == int or type(number) == float</code>. Shorter forms are also possible.</span>
<span class="comment-copy">@XiaoyuLu No, not really</span>
<span class="comment-copy">@XiaoyuLu If the value is an <code>int</code>, it evaluates to <code>True</code>. Otherwise, it evaluates to <code>float</code>, which is truthy. As a result, the function will <i>always</i> return <code>abs(number)</code>, regardless of its type.</span>
<span class="comment-copy">Type sniffing aside, returning a string from a function that ostensibly returns a distance is a bad idea. Raise an exception instead.</span>
<span class="comment-copy">@chepner thanks for the explanation. I was confused in the first place. I appreciate it.</span>
<span class="comment-copy">Most pythonic is not doing type-checking at all.  For example, the answer from <a href="https://stackoverflow.com/a/53233554/674039">Matthias</a> also works, without any extra code necessary, for complex numbers and fractions.</span>
<span class="comment-copy">@wim - The op is checking for int or float. What kind of scenario would merit not using <code>isinstance</code>?</span>
<span class="comment-copy">I'm saying what the OP is doing is not Pythonic in the first place. Duck-typing is better.</span>
<span class="comment-copy">Returning a string when the caller is likely expecting a number if anything but foolproof.</span>
<span class="comment-copy">@chepner  True, but not really fair to neg them on that because it was from the question.  And without it, this may as well be <code>distance_from_zero = abs</code>  :)</span>
<span class="comment-copy">@wim @chepner I agree and wouldn't return <code>'Nope'</code> if this were my code :)</span>
<span class="comment-copy">It <i>should</i> just be <code>distance_from_zero = abs</code> :)</span>
