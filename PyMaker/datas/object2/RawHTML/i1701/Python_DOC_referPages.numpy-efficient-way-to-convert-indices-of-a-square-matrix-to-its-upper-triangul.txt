<div class="post-text" itemprop="text">
<p>Question: given a tuple of index, return its order in upper triangular indices. Here is an example:</p>
<p>Suppose we have a square matrix A of shape (3, 3).</p>
<p>A has 6 upper triangular indices, namely, (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2).</p>
<p>Now I know an element at index (1, 2), which is a index belongs to the upper triangular part of A. I would like to return 4 (which means it is the 5th element in all upper triangular indices.)</p>
<p>Any ideas on how to do that in general?</p>
<p>Best,
Zhihao </p>
</div>
<div class="post-text" itemprop="text">
<p>One can write down the explicit formula:</p>
<pre><code>def utr_idx(N, i, j):
    return (2*N+1-i)*i//2 + j-i
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; N = 127
&gt;&gt;&gt; X = np.transpose(np.triu_indices(N))
&gt;&gt;&gt; utr_idx(N, *X[2123])
2123
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For an <em>n×n</em> matrix, the <em>(i, j)</em>-th item of the upper triangle is the <em>i×(2×n-i+1)/2+j-i</em>-th element of the matrix.</p>
<p>We can also do the math in reverse and obtain the <em>(i, j)</em> element for the <em>k</em>-th element with:</p>
<p><em>i = ⌊(-√((2n+1)<sup>2</sup>-8k)+2n+1)/2⌋</em> and <em>j = k+i-i×(2×n-i+1)/2</em></p>
<p>So for example:</p>
<pre><code>from math import floor, sqrt

def coor_to_idx(n, i, j):
    return i*(2*n-i+1)//2+j-i

def idx_to_coor(n, k):
    i = floor((-sqrt((2*n+1)*(2*n+1)-8*k)+2*n+1)/2)
    j = k + i - i*(2*n-i+1)//2
    return i, j
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; [idx_to_coor(4, i) for i in range(10)]
[(0, 0), (0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]
&gt;&gt;&gt; [coor_to_idx(4, i, j) for i in range(4) for j in range(i, 4)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Given the numbers are not huge (well if these are huge, calculations are no longer done in constant time), we can thus calculate the <em>k</em>-th coordinate in <em>O(1)</em>, for example:</p>
<pre><code>&gt;&gt;&gt; idx_to_coor(1234567, 123456789)
(100, 5139)
</code></pre>
<p>which is equivalent to obtaining it through enumeration:</p>
<pre><code>&gt;&gt;&gt; next(islice(((i, j) for i in range(1234567) for j in range(i, 1234567)), 123456789, None))
(100, 5139)
</code></pre>
<p>Here converting indices to a coordinate can also have, for large numbers, some rounding errors due to floating point imprecision.</p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC, you can get the indexes using <code>itertools</code> combinations <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer">with replacement</a> </p>
<pre><code>&gt;&gt;&gt; ind = tuple(itertools.combinations_with_replacement(range(3),2))
((0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2))
</code></pre>
<p>To retrieve the index, just use <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>index</code></a> method </p>
<pre><code>&gt;&gt;&gt; ind.index((1,2))
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.triu_indices.html#numpy.triu_indices" rel="nofollow noreferrer">np.triu_indices</a> and a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>:</p>
<pre><code>import numpy as np

iu1 = np.triu_indices(3)
table = {(i, j): c for c, (i, j) in enumerate(zip(*iu1))}
print(table[(1, 2)])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar to @DanielMesejo, you can use <code>np.triu_indices</code> with either <code>argwhere</code> or <code>nonzero</code>:</p>
<pre><code>my_index = (1,2)

&gt;&gt;&gt; np.nonzero((np.stack(np.triu_indices(3), axis=1) == my_index).all(1))
(array([4]),)
&gt;&gt;&gt; np.argwhere((np.stack(np.triu_indices(3), axis=1) == my_index).all(1))
array([[4]])
</code></pre>
<p>Explanation:</p>
<p><code>np.stack(np.triu_indices(3), axis=1)</code> gives you the indices of your upper triangle in order:</p>
<pre><code>array([[0, 0],
       [0, 1],
       [0, 2],
       [1, 1],
       [1, 2],
       [2, 2]])
</code></pre>
<p>So all you have to do is find where it matches <code>[1,2]</code> (which you can do with the <code>==</code> operator and <code>all</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Constructing upper indices would be costly. We can directly get the corresponding index like so -</p>
<pre><code>def triu_index(N, x, y):
    # Get index corresponding to (x,y) in upper triangular list
    idx = np.r_[0,np.arange(N,1,-1).cumsum()]
    return idx[x]+y-x
</code></pre>
<p>Sample run -</p>
<pre><code>In [271]: triu_index(N=3, x=1, y=2)
Out[271]: 4
</code></pre>
</div>
<span class="comment-copy">More general, if I have a list of indices, do we have a function to convert them to triu indices together [return a list/array of converted results]?</span>
<span class="comment-copy">I just realized it lol</span>
