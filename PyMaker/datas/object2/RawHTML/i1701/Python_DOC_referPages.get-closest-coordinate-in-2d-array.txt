<div class="post-text" itemprop="text">
<pre><code>coordinates = [(-225.0, -299.5), (-150.0, 75.5), (0.0, 0.0), (225.0, 300.5)]

xy = (-222.4, -204.5)
</code></pre>
<p>What is the best way so that a given value xy can be compared to a 2D list of coordinates, and return the index number of the closest coordinate?</p>
<p>In this example, xy would be compared to the coordinates list and thus return the closest coordinate (-225.0, -299.5) or, more ideally, the index number 0.</p>
<p>I've tried researching for a method with itertools or numpy, but couldn't seem to understand how to get the result I want in my example.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.7/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> with a proper <code>key</code> function. Sth along the following lines for instance:</p>
<pre><code>coordinates = [(-225.0, -299.5), (-150.0, 75.5), (0.0, 0.0), (225.0, 300.5)]
xy = (-222.4, -204.5)

dist = lambda x, y: (x[0]-y[0])**2 + (x[1]-y[1])**2
min(coordinates, key=lambda co: dist(co, xy))
# (-225.0, -299.5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your question is equivalent to : How do I sort a Python list using a custom method to define the sorting key. This can be done in raw python without using external libraries.</p>
<p>When using the <code>sorted()</code> function of python you can pass a lambda to the <code>key</code> argument to get the sort done on a specific key.</p>
<p>From there you just have to define the key as your own distance calculation method (here using the distances between the points):</p>
<pre><code>from math import *
coordinates = [(-225.0, -299.5), (-150.0, 75.5), (0.0, 0.0), (225.0, 300.5)]
xy = (-222.4, -204.5)
results = sorted(coordinates, key= lambda v: sqrt(pow((v[0] - xy[0]), 2) + pow((v[1] - xy[1]), 2)))
# Output : [(-225.0, -299.5), (-150.0, 75.5), (0.0, 0.0), (225.0, 300.5)]
</code></pre>
<p>From there you can just take the first element of the list if you want the closer point, etc. If you still want to external module I think you can use some third parties function such as <code>from scipy.spatial import distance</code> as the key parameter of the sort.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply create a function that iterates through the list of coordinates and keep the index of the one in which the distance between two points is the smallest (using the Pythagorean theorem).</p>
<p>However, if you need something fast given by an external module rather than writing your own, I am not aware of libraries I already used that already have that function, so I'm not helpful here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using scipy.spatial.KDTree:</p>
<pre><code>from scipy import spatial
import numpy as np
coordinates = [(-225.0, -299.5), (-150.0, 75.5), (0.0, 0.0), (225.0, 300.5)]
x = [(-222.4, -204.5)]
distance,index = spatial.KDTree(coordinates).query(x)
print(distance)
print(index)
</code></pre>
<p>The kd-tree method is O(N*log(N)) and is much faster than Brute Force method that takes O(N**2) time for large enough N.</p>
</div>
<span class="comment-copy">I would suggest using <a href="https://docs.python.org/3/library/math.html#math.hypot" rel="nofollow noreferrer"><code>math.hypot()</code></a> instead—it's probably faster.</span>
<span class="comment-copy">@martineau I don't quite see how the distance from the origin helps in this general distance case.</span>
<span class="comment-copy"><code>min(coordinates, key=lambda p: math.hypot(p[0]-xy[0], p[1]-xy[1]))</code></span>
<span class="comment-copy">@martineau So you are adding an extra function call and still doing calculations in pure Python? Not too convincing....</span>
<span class="comment-copy">Timing the execution is the only definitive way to tell. Doing so, I found that for larger numbers of points, your way is about 19% slower than using <code>hypot()</code> with Python 3.7.1. Here's the <a href="https://pastebin.com/fP4Zh6WC" rel="nofollow noreferrer">benchmark</a> used to determine this (results are at the very end).</span>
<span class="comment-copy">Sorting a list with a custom key function involves quite a bit more processing than simply finding the list element that produces the minimum when passed to that functiont—so, no, the question isn't equivalent to that. If it were, I would suggest using the <code>math.hypot()</code> function because it's faster that the way you're doing it. See this <a href="https://stackoverflow.com/questions/53257607/get-closest-coordinate-in-2d-array/53257770#comment93421254_53257770">comment</a> about that.</span>
<span class="comment-copy">I thought about this, but wouldn't the Pythagorean theorem not work if I have negative and positive coordinates in my list? e.g. if coordinates = [(-255.0,-255.0), (255.0,255.0)] -&gt; it wouldn't know which coordinate is closer?</span>
<span class="comment-copy">@Ben There is no issue with negative coordinates, Pythagoras will still take good care of the correct distance. You just have to decide on a tie breaker if in deed, two sets of coordinates havce the same distance.</span>
<span class="comment-copy">If you have negative and positive coordinates it will surely work, the formula doesn't care if you have positive or negative coordinates. <a href="https://en.wikipedia.org/wiki/Pythagorean_theorem#Euclidean_distance_in_various_coordinate_systems" rel="nofollow noreferrer">link</a>  If the distance from a specific point from two other points is the same, it will take the index of the first point that appears on the list.</span>
