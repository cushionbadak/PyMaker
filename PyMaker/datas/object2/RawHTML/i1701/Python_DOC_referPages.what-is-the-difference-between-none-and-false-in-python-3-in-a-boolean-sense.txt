<div class="post-text" itemprop="text">
<p>Sometimes python seems to treat them as the same whereas other times it returns False when False is used but returns nothing with None. It seems to behave very differently to null in other languages.</p>
<p>Some specific examples are:</p>
<p>True and None returns nothing
False and None returns False</p>
</div>
<div class="post-text" itemprop="text">
<p>Different values in Python can be described as being "truthy" or "falsy", even if they aren't <code>Boolean</code> values, which means they are interpreted as <code>True</code> or <code>False</code> in a situation that expects a <code>Boolean</code> value (such as an <code>if</code> condition). As defined in the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">documentation</a>, every value in Python, regardless of type, is interpreted as being <code>True</code> <em>except</em> for the following values (which are interpreted as <code>False</code>):</p>
<ul>
<li>Constants defined to be false: <code>None</code> and <code>False</code>.</li>
<li>Zero of any numeric type: <code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code> </li>
<li>Empty sequences and collections: <code>''</code>, <code>()</code>, <code>[]</code>, <code>{}</code>, <code>set()</code>, <code>range(0)</code></li>
</ul>
<p>To your specific situation, using the <code>if</code> situation, the following statement:</p>
<pre><code>if None:
    # some code here
</code></pre>
<p>would be functionally identical to:</p>
<pre><code>if False:
    # some code here
</code></pre>
<p>This is because, as shown in the list above, the value <code>None</code> is automatically converted to <code>False</code> for the purposes of the <code>if</code> condition. This is something referred to as "syntactic sugar", which is a feature of the language that exists to make the developer's life easier.</p>
<p>However, just because <code>None</code> is <em>interpreted</em> as <code>False</code> in this particular scenario, that doesn't mean the two values are equal to each other. This is because <code>False</code> is meant to be part of the True/False pair indicating binary concepts like "yes/no", "on/off", etc. <code>None</code>, on the other hand, represents the concept of <em>nothing</em>. Variables with a value of <code>None</code> means they have no value at all. To compare it to <code>False</code> in the form of a metaphor, <code>False</code> would be like answering somebody by saying "No", where <code>None</code> would be like not answering them at all. </p>
<p>As a more programming-oriented example, see the following code snippet:</p>
<pre><code>if None == False:
    # code in here would not execute because None is not equal to False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>None</code> is a singleton and <code>False</code> is a boolean.</p>
<p>In python <strong>both behave the same way in a boolean context.</strong></p>
<p><strong>Example 1</strong>:</p>
<pre><code>if False:
    print("false")

if None:
    print("false")
</code></pre>
<p><strong>None of the <code>if</code> statements prints anything.</strong></p>
<hr/>
<p><strong>However, as I said, there are not the <code>same</code>.</strong></p>
<p><strong>Example 2</strong>:</p>
<pre><code>False == None
#False
</code></pre>
</div>
<span class="comment-copy">Could you give some examples of this behaviour? It might help explain things</span>
<span class="comment-copy">In a boolean sense, both are False.</span>
<span class="comment-copy"><code>None</code> is a singleton. <code>False</code> is a boolean, which in Python is an int. Both are falsey. What are you unsure about?</span>
<span class="comment-copy">See also: <a href="https://stackoverflow.com/q/39983695/6779307">What is Truthy and Falsy in python? How is it different from True and False?</a></span>
<span class="comment-copy">@khelwood <code>False</code> is also a singleton.</span>
