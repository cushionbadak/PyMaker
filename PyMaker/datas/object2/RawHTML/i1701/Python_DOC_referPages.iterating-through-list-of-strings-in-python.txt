<div class="post-text" itemprop="text">
<p>I am trying to wrap my head around why the top code works and the bottom code does not. They are both for loops, just written differently, that appear to do the same thing but the second one fails with 'int object is not iterable'.  Maybe I am missing something obvious here</p>
<h1>this works</h1>
<pre><code>def longestWord(words):
    return max(len(s) for s in words)


x = longestWord(['these', 'are', 'some', 'strings'])

print(x)
</code></pre>
<h1>this does not work</h1>
<pre><code>def longestWord(words):
    for s in words:
        return max(len(s))

x = longestWord(['these', 'are', 'some', 'strings'])

print(x)

TypeError: 'int' object is not iterable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Problem with the second approach</h1>
<p>This makes sense, since here if you call this with, for example <code>longestWord(['these', 'are', 'some', 'strings'])</code>, then in the first iteration <code>s</code> will be <code>'these'</code>.</p>
<p>Now if we call <code>max(len(s))</code> that thus means that Python will first evaluate <code>len(s)</code> which is <code>len('these')</code> and thus <code>5</code>, and then we call <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max(..)</code></a>, on <code>5</code>. But <code>5</code> is <em>not</em> an <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a> (a list, generator, or any "collection" of values). Calculating the "<em>maximum of 5</em>" is strange, so hence the error.</p>
<p>Even if Python would allow to, for one non-iterable, just return that element, it would still not work, since that means that it would return the length of the <em>first</em> element.</p>
<h1>Why the first approach works</h1>
<p>In the first implementation:</p>
<pre><code>def longestWord(words):
    return max(<b>len(s) for s in words</b>)</code></pre>
<p>you construct an iterable: <code>(len(s) for s in words)</code> is not a <code>for</code> loop, it is a generator that, when you iterate over it, will yield the lengths of the <code>words</code>. The thus <code>max(..)</code> takes as first (and only) argument an iterable of <code>int</code>egers. This means that the <code>max(..)</code> function will iterate over this iterable, and keep track of the maximum. When the generator is "exhausted", it returns the maximum object it has seen.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def longestWord(words):
    for s in words:
        return max(len(s))
</code></pre>
<p>Firstly, you are returning as soon as you get the first word in your list of words. </p>
<p>Secondly, <code>len()</code> gives you an integer of how long the thing you call it on is. So, doing <code>max(len(whatever))</code> you'd be getting the max of a single number, which is why you get the error you do. </p>
<p>The reason this works in your first example:</p>
<p><code>max(len(s) for s in words)</code></p>
<p>is because <code>len(s) for s in words</code> is giving you an iterable, from which you can get the max element. </p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>max()</code> works on an iterable or two numbers, if you check the definition of the max() method. And when you do like <code>max(len(s))</code> its not a iterable object nor arguments are two integers, its just an integer value. 
Check out the link for info on max() : </p>
<p><a href="https://www.programiz.com/python-programming/methods/built-in/max" rel="nofollow noreferrer">https://www.programiz.com/python-programming/methods/built-in/max</a></p>
<pre><code>max(iterable, *iterables[,key, default])
max(arg1, arg2, *args[, key])
</code></pre>
</div>
<span class="comment-copy">Here you give <code>max(..)</code> <i>one</i> element, how is it supposed to return the maximum of 3? Furthermore even if that would simply be <code>3</code>, then it would thus return immediately after the <i>first</i> iteration.</span>
<span class="comment-copy">Thank you @Willem Van Onsem, this helps, especially this piece "Now if we call max(len(s)) that thus means that Python will first evaluate len(s) which is len('these') and thus 5, and then we call max(..), on 5. But 5 is not an iterable (a list, generator, or any "collection" of values). Calculating the "maximum of 5" is strange, so hence the error"...I have seen this error a lot in the past and now it finally clicked with me why.  Removing the max in the 2nd example, clearly shows just a single integer, hence the issue.  Thanks</span>
<span class="comment-copy">Thank you @Colin that makes perfect sense, just like Willem's description below</span>
<span class="comment-copy">Thank you @Sanchit!</span>
