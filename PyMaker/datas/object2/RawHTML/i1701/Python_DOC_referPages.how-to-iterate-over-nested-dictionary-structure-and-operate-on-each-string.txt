<div class="post-text" itemprop="text">
<p>I have a dictionary that may contain any arbitrary order of strings, lists of strings or nested dictionaries that ultimate terminate in strings. I would like to iterate over this dictionary and perform an action on each string.</p>
<p><a href="https://stackoverflow.com/questions/8335096/iterate-over-nested-dictionary">This</a> question is close to what I'm looking for but I was unsuccessful in applying that solution to my own.</p>
<p>I need to apply the function <code>os.path.expanduser()</code> to each string in the following dictionary:</p>
<pre><code>x = dict(
    dir = dict(
        wd = '~/Desktop/WD',
        pymodule = [
            '~/Documents/PythonModule',
            '/Users/Username/Documents/PythonModule2'
        ],
        album = '~/Desktop/Album'
    ),
    file = dict(
        XML = '~/Downloads/data.xml',
        CSV = '~/Downloads/data.csv'
    )
)
</code></pre>
<p>Ideally I would like to define a class that when called on a normal dictionary, will apply <code>os.path.expanduser()</code> on each string element of that dictionary.</p>
<pre><code>class MyDict:
    def __init__(d):
        self.d = d
        # some operation to apply os.path.expanduser() on each string element of 'd'
</code></pre>
<p>How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be easily done with a recursive function. Let's have a look at an example implementation. Here we will map all the strings in the given container to a given function, we will also use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a> and <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Dictionary Comprehensions</a> to mimic the original nested structure. In addition, <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">isinstance</a> built in function is used to check the type of a given parameter:</p>
<pre><code>def convert(func, d):
  if (isinstance(d, str)):
    return func(d)
  elif (isinstance(d, dict)):
    return {key : convert(func, d[key]) for key in d}
  elif (isinstance(d, list)):
    return [convert(func, val) for val in d]
</code></pre>
<p>Applies <code>func</code> to every string in the container. Test it with your example dictionary and <a href="https://docs.python.org/3.7/library/os.path.html#os.path.expanduser" rel="nofollow noreferrer">os.path.expanduser</a>:</p>
<pre><code>x = dict(
    dir = dict(
        wd = '~/Desktop/WD',
        pymodule = [
            '~/Documents/PythonModule',
            '/Users/Username/Documents/PythonModule2'
        ],
        album = '~/Desktop/Album'
    ),
    file = dict(
        XML = '~/Downloads/data.xml',
        CSV = '~/Downloads/data.csv'
    )
)


import os
x = convert(os.path.expanduser, x)
print(x)
</code></pre>
<p>And sure enough you get the desired output:</p>
<pre><code>{'dir': {'wd': '/home/runner/Desktop/WD', 'pymodule': ['/home/runner/Documents/PythonModule', '/Users/Username/Documents/PythonModule2'], 'album': '/home/runner/Desktop/Album'}, 'file': {'XML': '/home/runner/Downloads/data.xml', 'CSV': '/home/runner/Downloads/data.csv'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a function that takes a nested structure <code>x</code> as input, and return a similarly nested structure where all strings have been expanded:</p>
<pre><code>def expand(x):
    if isinstance(x, str):
        return os.path.expanduser(x)
    if isinstance(x, dict):
        return { key : expand(x[key]) for key in x }
    if isinstance(x, list):
        return [ expand(elem) for elem in x ]
    return x
</code></pre>
<p>So e.g. calling it with</p>
<pre><code>expand({1: '~/Hello', 2: ['~/World', '~/foo']})
</code></pre>
<p>will return</p>
<pre><code>{1: '/home/hkoehler/Hello', 2: ['/home/hkoehler/World', '/home/hkoehler/foo']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a function that will do it:</p>
<pre><code>import json
import os

x = dict(
    dir = dict(
        wd = '~/Desktop/WD',
        pymodule = [
            '~/Documents/PythonModule',
            '/Users/Username/Documents/PythonModule2'
        ],
        album = '~/Desktop/Album'
    ),
    file = dict(
        XML = '~/Downloads/data.xml',
        CSV = '~/Downloads/data.csv'
    )
)

def func(d):
    for key, value in d.items():
        if isinstance(value, dict):
            func(value)
        elif isinstance(value, str):
            d[key] = os.path.expanduser(value)
        elif isinstance(value, list):
            for i, element in enumerate(value):
                if isinstance(element, str):
                    value[i] = os.path.expanduser(element)

func(x)
print(json.dumps(x, indent=4))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>{
    "dir": {
        "wd": "C:\\Users\\martineau/Desktop/WD",
        "pymodule": [
            "C:\\Users\\martineau/Documents/PythonModule",
            "/Users/Username/Documents/PythonModule2"
        ],
        "album": "C:\\Users\\martineau/Desktop/Album"
    },
    "file": {
        "XML": "C:\\Users\\martineau/Downloads/data.xml",
        "CSV": "C:\\Users\\martineau/Downloads/data.csv"
    }
}
</code></pre>
</div>
<span class="comment-copy">Great answer, and extra thank you for generalizing the <code>convert()</code> function to accept any input function, not just <code>os.path.expanduser()</code></span>
<span class="comment-copy">While this might answer the authors question, it lacks some explaining words and/or links to documentation. Raw code snippets are not very helpful without some phrases around them. You may also find <a href="https://stackoverflow.com/help/how-to-answer">how to write a good answer</a> very helpful. Please edit your answer.</span>
<span class="comment-copy">@schwobaseggl good call, fixed.</span>
<span class="comment-copy">This is a fantastic answer that addresses all of my concerns in the original question. It works on a dictionary of arbitrary depth and that was exactly my idea. Thanks!</span>
<span class="comment-copy">That won't replace strings nested deep within lists. E.g. <code>[ [ '~/foo' ] ]</code>.</span>
<span class="comment-copy">@HenningKoehler: So? There's nothing like that in the OP's data structure.</span>
