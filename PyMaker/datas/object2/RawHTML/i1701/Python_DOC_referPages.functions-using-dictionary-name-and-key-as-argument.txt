<div class="post-text" itemprop="text">
<pre><code>qualifier_2 = {'KKR' : {'Chris Lynn': 4, 
                      'Sunil Narine': 10, 
                      'Gautam Gambhir (c)': 12, 
                      'Robin Uthappa (wk)': 1, 
                      'Ishank Jaggi': 28, 
                      'Colin Grandhomme': 0,
                      'Suryakumar Yadav': 31,
                      'Piyush Chawla': 2,
                      'Nathan Coulter-Nile': 6,
                      'Umesh Yadav': 2,
                      'Ankit Rajpoot': 4,
                      'Extra runs': 7,
                      'Total batted': 10},
                'MI': {'Lendl Simmons': 3,
                      'Parthiv Patel (wk)': 14,
                      'Ambati Rayudu': 6,
                      'Rohit Sharma (c)': 26,
                      'Krunal Pandya': 45,
                      'Kieron Pollard': 9,
                      'Extra runs': 8,
                      'Total batted': 6}}
</code></pre>
<p>I want to write a function that takes dictionary and team as an argument and returns the total runs
i.e <code>Dictionary -&gt; qualifier_2 and Team -&gt; KKR/MI</code></p>
<pre><code>def total_runs(x,y):
    if x == 'qualifier_2' and y == 'KKR':
        c = sum(qualifier_2['KKR'].values())
    return c
total_runs(qualifier_2,KKR) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>In [1805]: def total_runs(dict_name, dict_key):
      ...:     for k,v  in dict_name.items():
      ...:         if k == dict_key:
      ...:             print(sum(v.values()))
      ...:             

In [1809]: total_runs(qualifier_2, 'MI')
117
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't a function, But a way to aggregate all scores at once.<br/>
Run through the dictionary and sum the values as you go. </p>
<pre><code>final_dict = {}
for team, scores in qualifier_2.items():
    final_dict[team] = 0 # initialize score to 0
    for player, score in scores.items():
        final_dict[team] += score # accumulate score as you loop

print(final_dict)
</code></pre>
<p>Outputs:</p>
<pre><code>{'KKR': 117, 'MI': 117}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>dict.values()</code> to get a list of the numbers, then pass it through <code>sum</code> to get the total:</p>
<pre><code>qualifier_2 = {'KKR' : {'Chris Lynn': 4, 
                      'Sunil Narine': 10, 
                      'Gautam Gambhir (c)': 12, 
                      'Robin Uthappa (wk)': 1, 
                      'Ishank Jaggi': 28, 
                      'Colin Grandhomme': 0,
                      'Suryakumar Yadav': 31,
                      'Piyush Chawla': 2,
                      'Nathan Coulter-Nile': 6,
                      'Umesh Yadav': 2,
                      'Ankit Rajpoot': 4,
                      'Extra runs': 7,
                      'Total batted': 10},
                'MI': {'Lendl Simmons': 3,
                      'Parthiv Patel (wk)': 14,
                      'Ambati Rayudu': 6,
                      'Rohit Sharma (c)': 26,
                      'Krunal Pandya': 45,
                      'Kieron Pollard': 9,
                      'Extra runs': 8,
                      'Total batted': 6}}

def total_runs(team):
    # If team is not found in the data, return 0.
    if team not in qualifier_2:
        return 0

    # Otherwise, find the team and return a sum of their values.
    return sum(qualifier_2[team].values())

print total_runs("KKR") # Output: 117
print total_runs("MI") # Output: 117
</code></pre>
<p>You can even simplify it as a one liner, though it might be less readable:</p>
<pre><code>def total_runs(team):
    return sum((qualifier_2.get(team) or {}).values())

print total_runs("KKR") # Output: 117
print total_runs("MI") # Output: 117
print total_runs("FOOBAR") # Output: 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You call your function with the name of the dictionary</p>
<pre><code>total_runs(qualifier_2,KKR)
</code></pre>
<p>Then you try to compare that to a string</p>
<pre><code>    if x == 'qualifier_2' and ........ :
</code></pre>
<p><a href="https://docs.python.org/3/reference/expressions.html#is-not" rel="nofollow noreferrer">Identity comparisons</a>: If you really want/need to ensure that it is the specific dictionary, change it to </p>
<pre><code>    if x is qualifier_2 and y == 'KKR':
</code></pre>
<p>In a function, you want to use the name of the parameters used in the definition.  <em>Inside</em> your function (inside the function's scope) the dictionary you passed as the first argument has been assigned to <code>x</code> and the <em>key</em> you passed as the second argument was assigned to <code>y</code>.</p>
<pre><code>        c = sum(x[y].values())
</code></pre>
<hr/>
<pre><code>def total_runs(x,y):
    if x is qualifier_2 and y == 'KKR':
        c = sum(x[y].values())
    return c
</code></pre>
<p>Your dictionary keys are strings so you need to paa a string for that argument</p>
<pre><code>total_runs(qualifier_2,'KKR') 
</code></pre>
<hr/>
<p>Functions are used to make a process more generic so that process can be reused with different arguments/values passed to it's parameters.  While there may be some reasons to check for specific parameter values (maybe for debugging), usually it defeats the purpose of a function.</p>
<p>You could have written it like this:</p>
<pre><code>def total_runs(x,y):
    c = sum(x[y].values())
    return c
</code></pre>
<p>or</p>
<pre><code>def total_runs(x,y):
    return sum(x[y].values())
</code></pre>
</div>
<span class="comment-copy">You need to attempt at your problem first, Then if you're stuck you can post your question here.</span>
<span class="comment-copy">def total_runs(x,y):     if x == 'qualifier_2' and y == 'KKR':         c = sum(qualifier_2['KKR'].values())     return c  total_runs(qualifier_2,KKR)</span>
<span class="comment-copy">Add it to the question.</span>
<span class="comment-copy">I'm a beginner to coding and I tried the above</span>
