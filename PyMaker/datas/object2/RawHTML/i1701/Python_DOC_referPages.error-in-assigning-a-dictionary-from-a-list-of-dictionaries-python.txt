<div class="post-text" itemprop="text">
<p>I am working with list of dictionaries and I have an object like that:</p>
<pre><code>table_settings = [
        {'table_name': 't1' , 'reindex': True, 'partition_deletion': False },
        {'table_name': 't2' , 'reindex': False, 'partition_deletion': True },
        {'table_name': 't3' ,'reindex': False, 'partition_deletion': True },
        {'table_name': 't4', 'reindex': False, 'partition_deletion': True }
    ]
</code></pre>
<p>The table_name is entered through command line. I want to assign that element of the table_settings which is matching with the table_name entered.
For example, if someone entered table_name as  't3', then the value in the table_conf should be <code>{'table_name': 't3' ,'reindex': False, 'partition_deletion': True }</code></p>
<p>If someone enters a value which is not in list , say 't5', then the value of table_conf should be 'None'.</p>
<p>I am trying this code:</p>
<pre><code>import sys
table_name = sys.argv[1]
table_conf = settings for settings in table_settings if settings['table_name'] == table_name
</code></pre>
<p>But this is giving me syntax error.
Any help would be highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to use a list comprehension:</p>
<pre><code>import sys
table_name = sys.argv[1]

for settings in table_settings:
    if settings['table_name'] == table_name:
        table_conf = settings
        break
else:
    table_conf = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use a list comprehension, which looks like what you're trying to write, you want something like this:</p>
<pre><code>import sys
table_name = sys.argv[1]

try:
    table_conf = [s for s in table_settings if s['table_name'] == table_name][0]
    print(table_conf)
except IndexError:
    # perhaps you want to do something different here, like return a default
    print("Table not found!")
</code></pre>
<p>So, add brackets to make this a list comprehension, return only the 0th element of the list, and add an exception to deal with the case that the table is not found (i.e. the list you generated is empty and has no element 0).</p>
</div>
<span class="comment-copy">Yes, you are right. But I was looking for something compact like list comprehension.</span>
<span class="comment-copy">@BhawandeepSingla Well, if the result is not a list, then it goes without saying that a <i>list</i> comprehension might not be the best solution? Compact doesn't always mean better... <a href="https://stackoverflow.com/a/8068348/1578604">example</a></span>
<span class="comment-copy">Also this form provides a short circuit mechanism which allows the loop to be exited as soon as a match is found, whereas in a list comprehension, such a thing is not possible and it will always loop through each element, thereby potentially impeding performance.</span>
<span class="comment-copy">Thanks for highlighting it.</span>
<span class="comment-copy">@BhawandeepSingla What do you mean? In Python, <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer"><code>for</code> loops can have an <code>else</code> block</a>. "A <code>break</code> statement executed in the first suite terminates the loop without executing the <code>else</code> clauseâ€™s suite. A <code>continue</code> statement executed in the first suite skips the rest of the suite and continues with the next item, or with the <code>else</code> clause if there is no next item."</span>
