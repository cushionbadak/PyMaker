<div class="post-text" itemprop="text">
<p>I have a big text file and I want to make a new file from the 1st file but with some changes. Here is a small example of my 1st file's contents:</p>
<pre><code>chr1    transcript  1314046 1314412 +   RP5-890O3.3
chr1    transcript  1321091 1326476 -   CCNL2
chr1    transcript  1334902 1336467 +   RP4-758J18.2
</code></pre>
<p>I want to change the <code>3rd</code> and <code>4th columns</code>. In fact in new file:</p>
<pre><code>the 3rd column = (4th column of 1st file) - 30
the 4th column = (4th column of 1st file) + 10
</code></pre>
<p>Expected output:</p>
<pre><code>chr1    transcript  1314382 1314422 +   RP5-890O3.3
chr1    transcript  1326446 1326486 -   CCNL2
chr1    transcript  1336437 1336477 +   RP4-758J18.2
</code></pre>
<p>I am trying to do that in Python and wrote the following code but it does not return what I want. Do you know how to fix it?</p>
<pre><code>file = open('myfile.txt', 'rb')
new = []
for line in file:
    col3 = line[3]-30
    col4 = line[3]+10
    new.append(col3\tcol4)

with open('outfile.txt', "w") as f:
        for item in new:
            f.write("%s\n" % item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will do it:</p>
<pre><code>with open('myfile.txt') as f, open('outfile.txt', 'w') as w:
    data = f.readlines()
    result = []
    for line in data:
        line = line.split()
        line[2] = str(int(line[3]) - 30)
        line[3] = str(int(line[3]) + 10)
        result.append(line)
    for r in result:
        w.write('\t'.join(r) + '\n')
</code></pre>
<p>To successfully add <code>int</code> to value you need to convert it to an <code>int</code>, but also convert the resulting value into <code>str</code> to avoid errors when writing to <code>outfile</code>.
Resulting file looks like this:</p>
<pre><code>chr1    transcript  1314382 1314422 +   RP5-890O3.3
chr1    transcript  1326446 1326486 -   CCNL2
chr1    transcript  1336437 1336477 +   RP4-758J18.2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use a pattern that can be applied to editing some data line-by-line you can do as follows:</p>
<pre><code>with open(...) as input, open(..., 'w') as output:
    output.write(''.join(mutate(line) for line in input))
</code></pre>
<p>Of course the <code>mutate</code> definitions will depend on the particular task at hand, in your case</p>
<pre><code>def mutate(line):
    l = line.split()
    l[2] = int(l[2])-30
    l[3] = int(l[3])+10
    return ' '.join(str(item) for item in l)
</code></pre>
<p>Note that I don't strip the newline at the end of each string, neither in the function neither in the implicit loop that is calling it, so to properly join the lines we use the null string <code>''</code>.</p>
<p>Note also that, in case of a large input file, the file is lazily read until the output buffer is full (use the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open</code></a> <code>buffering=...</code> opt arg to change the buffer size iff you know what you're doing) so that this is particularly efficient memory wise.</p>
</div>
<span class="comment-copy">Well, <code>line[n]</code> is a string to begin with. You'll get errors.</span>
