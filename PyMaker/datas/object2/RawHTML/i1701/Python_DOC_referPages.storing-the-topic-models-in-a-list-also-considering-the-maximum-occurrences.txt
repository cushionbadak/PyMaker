<div class="post-text" itemprop="text">
<p>I am performing topic modelling and using functions to get the top keywords in the topic models as shown below.</p>
<pre><code>def getTopKWords(self, K):

    results  = []
    """
    returns top K discriminative words for topic t
    ie words v for which p(v|t) is maximum
    """
    index = []
    key_terms = []



    pseudocounts = np.copy(self.n_vt)
    normalizer = np.sum(pseudocounts, (0))
    pseudocounts /= normalizer[np.newaxis, :]
    for t in range(self.numTopics):
        topWordIndices = pseudocounts[:, t].argsort()[-1:-(K+1):-1]
        vocab = self.vectorizer.get_feature_names()
        print (t, [vocab[i] for i in topWordIndices])
   ## Code for storing the values in a single list
   return results
</code></pre>
<p>The above functions gives me the code as shown in the fig</p>
<pre><code>0 ['computer', 'laptop', 'mac', 'use', 'bought', 'like', 'warranty', 'screen', 'way', 'just']
1 ['laptop', 'computer', 'use', 'just', 'like', 'time', 'great', 'windows', 'macbook', 'months']
2 ['computer', 'great', 'laptop', 'mac', 'buy', 'just', 'macbook', 'use', 'pro', 'windows']
3 ['laptop', 'computer', 'great', 'time', 'battery', 'use', 'apple', 'love', 'just', 'work']
</code></pre>
<p>It results from the 4 time the loop runs and print index and all keywords in each vocab.</p>
<p>Now, I want to return a single list from the function which returns me the following output.</p>
<pre><code>return   [keyword1, keyword2, keyword3, keyword4]
</code></pre>
<p>where, keyword1/2/3/4 are the words which were occuring the most in vocab lists with index 0, 1,2,3 in output.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collection.Counter</a>:</p>
<pre><code>from collections import Counter

a = ['computer', 'laptop', 'mac', 'use', 'bought', 'like', 
     'warranty', 'screen', 'way', 'just']
b = ['laptop', 'computer', 'use', 'just', 'like', 'time', 
     'great', 'windows', 'macbook', 'months']
c = ['computer', 'great', 'laptop', 'mac', 'buy', 'just', 
     'macbook', 'use', 'pro', 'windows']
d = ['laptop', 'computer', 'great', 'time', 'battery', 'use', 
     'apple', 'love', 'just', 'work']

def get_most_common(*kwargs):
    """Accepts iterables, feeds all into Counter and returns the Counter instance"""
    c = Counter()
    for k in kwargs:
        c.update(k)
    return c

# get the most common ones 
mc = get_most_common(a,b,c,d).most_common()

# print top 4 keys
top4 = [k for k,v in mc[0:4]]
print (top4)
</code></pre>
<p>Output: </p>
<pre><code>['computer', 'laptop', 'use', 'just']
</code></pre>
<hr/>
<pre><code> some_results = [] # store stuff
</code></pre>
<blockquote>
<pre><code>for t in range(self.numTopics):
    topWordIndices = pseudocounts[:, t].argsort()[-1:-(K+1):-1]
    vocab = self.vectorizer.get_feature_names()
    print (t, [vocab[i] for i in topWordIndices])
</code></pre>
</blockquote>
<pre><code>      some_results.append( [vocab[i] for i in topWordIndices] )

  mc = get_most_common(*some_results).most_common()
  return [k for k,v in mc[0:4]] 
</code></pre>
</div>
<span class="comment-copy">@ShivamPanchal what? It is one fuction that you provide your lists - <code>.most_common()</code> is explained in the documentation of Counter - read it. <code>top4</code> is just list slicing of the <code>(key,count)</code> tuples provided by <code>most_common()</code>. Your code above uses list slicing - so thats nothing new to you - is it?</span>
<span class="comment-copy">I am trying to use it in my code, but not working, can you add it in my code, It will be great</span>
<span class="comment-copy">really sorry, but I got this. TypeError: unhashable type: 'slice'</span>
<span class="comment-copy">@ShivamPanchal  forgot a .most_common()</span>
