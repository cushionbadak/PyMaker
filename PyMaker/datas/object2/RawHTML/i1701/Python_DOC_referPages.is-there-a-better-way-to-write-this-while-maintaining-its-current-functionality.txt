<div class="post-text" itemprop="text">
<p>Is there a better way to write this while maintaining its current functionality? (checking balances, updating, subtracting, etc...)
If so, where would I begin? I saw a code briefly in class that was for a similar questions and it looked more streamlined.</p>
<pre><code>class Account:

    # constructor
    def __init__(self, name, account_number, balance):
        self.name = name
        self.account_number = account_number
        self.balance = balance

    # returns string representation of object
    def __str__(self):
        return "Account Name: {0}\nAccount Number: {1}\nAccount Balance: ${2:.2f}" \
               .format(self.name, self.account_number, self.balance)

    # add given amount to balance
    def deposit(self, amount):
        self.balance += amount

    # subtract amount and fee from balance
    def withdraw(self, amount, fee):
        self.balance = self.balance - amount - fee

if __name__ == '__main__':
    # make 3 objects
    acct1 = Account('Guy Mann', 90453889, 100)
    acct2 = Account('Donald Duck', 83504837, 100)
    acct3 = Account('Joe Smith', 74773321, 100)

    # print
    print(acct1)
    print(acct2)
    print(acct3)

    # deposit and print
    acct1.deposit(25.85)
    acct2.deposit(75.50)
    acct3.deposit(50)
    print(acct1)
    print(acct2)
    print(acct3)

    # withdraw and print
    acct1.withdraw(25.85, 2.50)
    acct2.withdraw(75.50, 1.50)
    acct3.withdraw(50, 2)
    print(acct1)
    print(acct2)
    print(acct3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is always room for improvement - although SO is not quite the right place - you might <a href="https://codereview.stackexchange.com/help/on-topic">check the rules of engagement</a> in <a href="http://codereview.stackexchange.com">http://codereview.stackexchange.com</a> and ask there. Read rules first, post later or it gets downvoted/closed fast. On SO we mostly fix broken code. </p>
<hr/>
<p>Your code has some flaws - especialy on the "trust user input" side - so some improvements:</p>
<ul>
<li>if on python 3.6 use string literal interpolation  </li>
<li>guard against malicious users that withdraw negative numbers - also protect your clients from depositing negative numbers</li>
<li>streamline the testing by using lists (<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY-principle</a>) and loops</li>
<li>bind your data to your unique account identifier - f.e. the accountnumber and use dicts to assigns each transaction to the correct account instead of relying on "order" or smth alike. In real live each transaction also has unique identifiers for <em>what bank to use</em> and <em>which account to use</em>.</li>
</ul>
<hr/>
<p>Reads:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">Error handling</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Datastructures</a> - f.e. <code>list</code>, <code>dict</code>, <code>set/frozenset</code> for starters</li>
<li><a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">string interpolation PEP 498</a></li>
</ul>
<hr/>
<pre><code>class Account:

    # constructor
    def __init__(self, name, account_number, balance):
        self.name = name
        self.account_number = account_number
        self.balance = balance

    # returns string representation of object
    def __str__(self):
        return f"Account Name: {self.name}\n" + \
               f"Account Number: {self.account_number}\n" + \
               f"Account Balance: ${self.balance:.2f}\n" 

    # add given amount to balance
    def deposit(self, amount):
        if amount &lt;= 0:
            raise ValueError("Unable to deposit negative or zero amounts\n")
        self.balance += amount
        return str(self) 

    # subtract amount and fee from balance
    def withdraw(self, amount, fee):
        if amount &lt;= 0:
            raise ValueError("Unable to withdraw negative or zero amounts\n")
        self.balance = self.balance - amount - fee
        return str(self)  
</code></pre>
<p>Some usage:</p>
<pre><code>accounts = {90453889:Account('Guy Mann', 90453889, 100), 
            83504837:Account('Donald Duck', 83504837, 100),
            74773321:Account('Joe Smith', 74773321, 100)}

# explicitly assign each transaction to the account by accountNr
deposits = [(90453889, 25.85), (83504837, 75.50), (74773321, 50), 
            (90453889, -25085), (0,80)]

withdrawls= [(90453889, (25.85, 2.50)), (83504837, (75.50, 1.50)), 
             (83504837, (-1050, -1.50)),
             (74773321, (50, 2)),(123456789, (50, 2))]

# use exception handling for illict usage of accounts
for number,money in deposits:
    try:
        print( accounts.get(number).deposit(money))
    except AttributeError: 
        print (f"Unknown account: {number}")
    except ValueError as ve:
        print (ve)

for number,(money,fee) in withdrawls:
    try:
        print( accounts.get(number).withdraw(money,fee))
    except AttributeError:
        print (f"Unknown account: {number}")
    except ValueError as ve:
        print (ve)                        
</code></pre>
<p>Output:</p>
<pre><code>Account Name: Guy Mann
Account Number: 90453889
Account Balance: $125.85

Account Name: Donald Duck
Account Number: 83504837
Account Balance: $175.50

Account Name: Joe Smith
Account Number: 74773321
Account Balance: $150.00

Unable to deposit negative or zero amounts

Unknown account: 0
Account Name: Guy Mann
Account Number: 90453889
Account Balance: $97.50

Account Name: Donald Duck
Account Number: 83504837
Account Balance: $98.50

Unable to withdraw negative or zero amounts

Account Name: Joe Smith
Account Number: 74773321
Account Balance: $98.00
</code></pre>
</div>
<span class="comment-copy">It's not clear what you want help on. Can you elaborate?</span>
<span class="comment-copy">I suppose my question is: Is there a better way to write this while maintaining its current functionality? (checking balances, updating, subtracting, etc...)</span>
<span class="comment-copy">If your code works without errors, <a href="https://codereview.stackexchange.com">Code Review</a> might be a better place to ask.</span>
<span class="comment-copy">I will explore that site, thank you for taking the time to comment.</span>
<span class="comment-copy">I appreciate the feedback and resources. Thank you.</span>
