<div class="post-text" itemprop="text">
<p>I recently picked up Python and I am alternating between this <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">tutorial</a> and a book called <a href="https://automatetheboringstuff.com" rel="nofollow noreferrer">Automate The Boring Stuff With Python</a>. </p>
<p>I find the book quite easy to understand and the exercises are fun.
There is one in particular that I just solved but honestly, I am not satisfied with my answer.</p>
<p>In the question, one is given a grid as follows:</p>
<pre><code>grid = [['.', '.', '.', '.', '.', '.'],
        ['.', '0', '0', '.', '.', '.'],
        ['0', '0', '0', '0', '.', '.'],
        ['0', '0', '0', '0', '0', '.'],
        ['.', '0', '0', '0', '0', '0'],
        ['0', '0', '0', '0', '0', '.'],
        ['0', '0', '0', '0', '.', '.'],
        ['.', '0', '0', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.']]
</code></pre>
<p>Using loops only, one is then required to produce the following output:</p>
<pre><code>..00.00..
.0000000.
.0000000.
..00000..
...000...
....0....
</code></pre>
<p>My solution (which works) to this problem is as follows:</p>
<pre><code>for y in range(0,len(grid[0])):
    for x in range(0, len(grid)):
        print(grid[x][y], end='')

    print()
</code></pre>
<p>My problem is the <strong>grid[0]</strong>. I have tried to generalize the code to accommodate scenarios in which the lists within <strong>grid</strong> are of different values, but failed.</p>
<p>My question, therefore, is how can I retrieve the <code>len</code> of <strong>grid[0]</strong> in general variable terms?</p>
<p>In other words, how can I retrieve the length of a list within a list?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't actually need to retrieve length.</p>
<p>You can do it in one line without knowing dimensions:</p>
<pre><code>print('\n'.join(map(lambda x: ''.join(x), zip(*grid))))
</code></pre>
<p>Step by step:</p>
<ol>
<li><code>zip(*grid)</code> will transpose your 2-d array</li>
</ol>
<pre>
&gt;&gt;&gt; list(zip(*grid))
[('.', '.', '0', '0', '.', '0', '0', '.', '.'),
 ('.', '0', '0', '0', '0', '0', '0', '0', '.'),
 ('.', '0', '0', '0', '0', '0', '0', '0', '.'),
 ('.', '.', '0', '0', '0', '0', '0', '.', '.'),
 ('.', '.', '.', '0', '0', '0', '.', '.', '.'),
 ('.', '.', '.', '.', '0', '.', '.', '.', '.')]
</pre>
<ol start="2">
<li><code>map(lambda x: ''.join(x), zip(*grid))</code> will join every line</li>
</ol>
<pre>
&gt;&gt;&gt; list(map(lambda x: ''.join(x), zip(*grid)))
['..00.00..', '.0000000.', '.0000000.', '..00000..', '...000...', '....0....']
</pre>
<ol start="3">
<li>And finally <code>'\n'.join</code> joins with separator as new line</li>
</ol>
<pre>
&gt;&gt;&gt; print('\n'.join(map(lambda x: ''.join(x), zip(*grid))))
..00.00..
.0000000.
.0000000.
..00000..
...000...
....0....
</pre>
<p><strong>Note</strong>: we could also omit 3rd step by <code>print</code>ing with <code>sep='\n</code>, however in Python3:
<a href="https://stackoverflow.com/questions/40015439/why-does-map-return-a-map-object-instead-of-a-list-in-python-3/40015480#40015480">Why does map return a map object instead of a list in Python 3?</a> and we would need to convert it to <code>list</code> before printing it. Like so:</p>
<pre>
print(list(map(lambda x: ''.join(x), zip(*grid))), sep='\n')
</pre>
</div>
<div class="post-text" itemprop="text">
<p>For example taking the longes of all the content list:</p>
<pre><code>&gt;&gt;&gt; grid = [['.', '.', '.', '.', '.', '.'],
...         ['.', '0', '0', '.', '.', '.'],
...         ['0', '0', '0', '0', '.', '.'],
...         ['0', '0', '0', '0', '0', '.'],
...         ['.', '0', '0', '0', '0', '0'],
...         ['0', '0', '0', '0', '0', '.'],
...         ['0', '0', '0', '0', '.', '.'],
...         ['.', '0', '0', '.', '.', '.'],
...         ['.', '.', '.', '.', '.', '.']]
&gt;&gt;&gt; 
&gt;&gt;&gt; max(map(len, grid))
6
</code></pre>
<p>BTW, a pythonic way of solving that (without loops) would look like this <code>list(zip(*grid))</code>:</p>
<pre><code>&gt;&gt;&gt; for l in zip(*grid):
...     print("".join(l))
... 
..00.00..
.0000000.
.0000000.
..00000..
...000...
....0....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you look at your desired <em>output</em>, you'll observe that <code>final</code> matrix is <code>transpose</code> of your given list.</p>
<p>The <code>transpose</code> of a matrix could be found by using <code>numpy</code> <em>transpose</em> function.</p>
<p>You could use a <em>list comprehension</em> in combination with <code>join</code> method in order to achieve what you want.</p>
<pre><code>import numpy as np
transpose = np.array(grid).transpose()
print('\n'.join([''.join(row) for row in transpose]))
</code></pre>
<p>Output</p>
<pre><code>..00.00..
.0000000.
.0000000.
..00000..
...000...
....0....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really must get the length of a list in a list, just use <code>len(grid[index])</code>:</p>
<pre><code>for i in range(len(grid)):
    for j in range(len(grid[i])):
        print(mylist[i][j], end='')
    print()
</code></pre>
<p>However, it is easier to to iterate over the elements of the list than to get the indexes of the list. For example, instead of the above solution, use</p>
<pre><code>for row in mylist:
    for element in row:
         print(element, end='')
    print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way of doing this is to start by transposing the grid, then just loop over the elements of each row</p>
<pre><code> grid = [['.', '.', '.', '.', '.', '.'],
         ['.', '0', '0', '.', '.', '.'],
         ['0', '0', '0', '0', '.', '.'],
         ['0', '0', '0', '0', '0', '.'],
         ['.', '0', '0', '0', '0', '0'],
         ['0', '0', '0', '0', '0', '.'],
         ['0', '0', '0', '0', '.', '.'],
         ['.', '0', '0', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.']]
  grid2=zip(*grid)
 # print(grid2)
  for row in grid2:
     for el in row:
         print(el, end='')
     print('\n')
</code></pre>
</div>
<span class="comment-copy">So, do you want a nice solution with <code>zip</code> or are we stuck to only <code>for</code> and <code>print</code> here? :)</span>
<span class="comment-copy">Kind of confusing what exactly you are asking, but just do <code>len(grid(row_number))</code></span>
<span class="comment-copy">@Tomothy32 that's exactly what I did. But how would I loop through list values of varying length? Let's imagine that I do not know their lengths either.</span>
<span class="comment-copy">@timgeb Thanks. The book is yet to introduce zip so just for/while and print.</span>
<span class="comment-copy">Do you want something like <code>for sublist in grid: len(sublist)</code>?</span>
<span class="comment-copy">Very interesting, thank you for sharing! At the time of writing this comment, I have not read about zip yet so implementation is based on loops and print alone but it is one to look out for, for sure!</span>
<span class="comment-copy">You don't need to convert your <code>zip</code> object into <code>list</code> since you iterating over it.</span>
<span class="comment-copy">I have heard of numpy but I am yet to use it. I will keep this mind, thank you very much.</span>
<span class="comment-copy">@Mexen, you're welcome. Don't forget to vote answers in order to help other people.</span>
<span class="comment-copy">You don't actually need to convert <code>grid2</code> into a <code>list</code>, since you can iterate over it.</span>
<span class="comment-copy">Very true, editing</span>
