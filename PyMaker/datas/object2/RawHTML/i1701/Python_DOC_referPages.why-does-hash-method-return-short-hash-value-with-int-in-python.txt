<div class="post-text" itemprop="text">
<p>When <code>hash()</code> method is called in Python 3, I noticed that it doesn't return a long-length integer when taking in <code>int</code> data type but with <code>string</code> type.</p>
<p>Is this supposed to work this way? If that actually is the case, for the <code>int</code> type to have a short hash value, won't it cause collision since it's too short?</p>
<pre><code>for i in [i for i in range(5)]:
    print(hash(i))

print(hash("abc"))
</code></pre>
<p>The Result:</p>
<pre><code>0
1
2
3
4
4714025963994714141
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In CPython, default Python interpreter implementation, built-in <code>hash</code> is done in <a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Python/pyhash.c" rel="nofollow noreferrer">this way</a>:</p>
<blockquote>
<p>For numeric types, the hash of a number x is based on the reduction
     of x modulo the prime P = 2**_PyHASH_BITS - 1.  It's designed so that
     hash(x) == hash(y) whenever x and y are numerically equal, even if
     x and y have different types</p>
</blockquote>
<p><code>_PyHASH_BITS</code> is <code>61</code> (64-bit systems) or <code>31</code> (32-bit systems)(defined <a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Include/pyhash.h" rel="nofollow noreferrer">here</a>)</p>
<p>So on 64-bit system built-in <code>hash</code> looks like this function:</p>
<pre><code>def hash(number):
    return number % (2 ** 61 - 1)
</code></pre>
<p>That's why for small ints you got the same values, while for example <code>hash(2305843009213693950)</code> returns <code>2305843009213693950</code> and <code>hash(2305843009213693951)</code> returns <code>0</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The only purpose of the <code>hash</code> function is to produce an integer value that can be used to insert an object into a dict. The only thing <code>hash</code> guarantees is that if <code>a == b</code>, then <code>hash(a) == hash(b)</code>. For a user-defined class <code>Foo</code>, it is the user's responsibility to ensure that <code>Foo.__eq__</code> and <code>Foo.__hash__</code> enforce this guarantee.</p>
<p>Anything else is implementation-dependent, and you shouldn't read anything into the value of <code>hash(x)</code> for any value <code>x</code>. Specifically, <code>hash(a) == hash(b)</code> is allowed for <code>a != b</code>, and <code>hash(x) == x</code> is not required for any particular <code>x</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use hashlib module:</p>
<pre><code>&gt;&gt;&gt; import hashlib()
&gt;&gt;&gt; m.update(b'abc')
&gt;&gt;&gt; m.hexdigest()
</code></pre>
</div>
<span class="comment-copy">What <code>hash</code> does is implementation-dependent; don't make any assumptions about what it returns.</span>
<span class="comment-copy">Collisions are inevitable; larger tables reduce collisions, but waste more space.</span>
<span class="comment-copy">just to clarify: <code>hash</code> is not a cryptographic hash. if you are interested in those use <a href="https://docs.python.org/3/library/hashlib.html?highlight=hashlib" rel="nofollow noreferrer"><code>hashlib</code></a>. the built-in <a href="https://docs.python.org/3/library/functions.html?highlight=hash#hash" rel="nofollow noreferrer"><code>hash</code></a> is just about unique identifiers.</span>
<span class="comment-copy">The purpose of this value is to distribute keys into dictionary buckets -- it's not intended to be used for purposes that require longer output or stronger guarantees; given its primary use case, the main design goal is speed (since every lookup requires calculating the hash for the key).</span>
<span class="comment-copy">BTW, code formatting should be used, for, well, <i>code</i>. <code>a long-length integer</code> isn't code, it's English prose; likewise for <code>short hash value</code>. If you want to emphasize prose, italics are usually the right choice. See <a href="https://meta.stackexchange.com/questions/155904/highlighting-technical-words">Highlighting technical words?</a> on <a href="https://meta.stackexchange.com">Meta Stack Exchange</a>.</span>
