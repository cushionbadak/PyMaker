<div class="post-text" itemprop="text">
<p>Im trying to understand the need for a cursor() and connection close() functions within a python script when you are trying to connect to a SQL database.</p>
<p>I currently have the following code and it works fine:</p>
<pre><code>con = pyodbc.connect("Driver={SQL Server Native Client 11.0};"
                 "Server=servername;"
                 "Database=table;"
                 "Trusted_Connection=yes;")  # type: object

sql = """select top 1000 * from Bill.dbo.Table"""
df = pd.read_sql_query(sql, con)
print(df)
</code></pre>
<p>However, some are using the following which I am not sure why:</p>
<pre><code>cursor = conn.cursor()
conn.close
</code></pre>
<p>In addition to this question, is there a more efficient way of writing the code ive inserted up there ? thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>When you create a connection or a cursor, there are resources that are created and represented by that cursor. If you don't close them, then those resources could stay around longer than necessary and potentially leak. It's good hygiene.</p>
<p>As for efficiency, python has <code>with</code> blocks that work with context managers to make this easier. At the end of a with block the <code>__exit__</code> method is called which usually defers to <code>close</code> (though for the pyodbc connection object it doesn't).</p>
<pre><code>with conn.cursor() as cursor:
    #do things with cursor
</code></pre>
</div>
<span class="comment-copy">With statements aren't context managers per se, see: <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#context-managers</a></span>
