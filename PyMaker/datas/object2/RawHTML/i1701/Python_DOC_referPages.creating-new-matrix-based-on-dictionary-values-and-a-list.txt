<div class="post-text" itemprop="text">
<p>The following is a simplified example:</p>
<pre><code>val = [10,23,45,31,78,43,1,67,82]

indx = [1,4,5,8]
indx2 = [3,6,7]
indx3 = [0,2]

samp = {}
samp[0] = indx
samp[1] = indx2
samp[2] = indx3
</code></pre>
<p>Say I have a dictionary (samp) that has two groups: Group 0 and Group 1.
The dictionary has indicies for values in the vector val.</p>
<p>I want to pull out all of the values in val based on the given group in the dictionary by creating a 8 X 2 matrix,
Where i have the group and the value in two columns in order by index so it looks like this:</p>
<pre><code>val  group
10   2
23   0
45   2
31   0
87   0
43   1
1    1
67   0
82   1
</code></pre>
<p>How do I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to get this</p>
<pre><code>[(j, next(k for k,v in samp.items() if i in v)) for i,j in enumerate(val)]
</code></pre>
<p>Output:</p>
<pre><code>[(10, 2),
 (23, 0),
 (45, 2),
 (31, 1),
 (78, 0),
 (43, 0),
 (1, 1),
 (67, 1),
 (82, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution without using pandas that outputs a (8,2) numpy matrix:</p>
<pre><code>val = [10,23,45,31,78,43,1,67,82]

indx = [1,4,5,8]
indx2 = [3,6,7]
indx3 = [0,2]

indices = [indx, indx2, indx3]

def get_group(x):
    for i,indx_arr in enumerate(indices):
        if x in indx_arr:
            return i

pairs = [(v,get_group(i)) for i,v in enumerate(val)]
np.asarray(pairs)

array([[10,  2],
   [23,  0],
   [45,  2],
   [31,  1],
   [78,  0],
   [43,  0],
   [ 1,  1],
   [67,  1],
   [82,  0]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dictionary comprehension</code></a> to reverse the key, value pairs in dictionary and then use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>df = pd.DataFrame(val,columns=['val'])
d = {value1:key  for key,value in samp.items() for value1 in value}
df['group'] = df.index.map(d)

print(df)
   val  group
0   10      2
1   23      0
2   45      2
3   31      1
4   78      0
5   43      0
6    1      1
7   67      1
</code></pre>
<hr/>
<pre><code>print(d)
{1: 0, 4: 0, 5: 0, 8: 0, 3: 1, 6: 1, 7: 1, 0: 2, 2: 2}
</code></pre>
<p>What if the values are numpy arrays:</p>
<pre><code>indx = np.array([1,4,5,8])
indx2 = np.array([3,6,7])
indx3 = np.array([0,2])

samp = {}
samp[0] = indx
samp[1] = indx2
samp[2] = indx3

print(samp)
{0: array([1, 4, 5, 8]), 1: array([3, 6, 7]), 2: array([0, 2])}

d = {value1:key  for key,value in samp.items() for value1 in value}

print(d)
{1: 0, 4: 0, 5: 0, 8: 0, 3: 1, 6: 1, 7: 1, 0: 2, 2: 2}
</code></pre>
</div>
<span class="comment-copy">Thanks @Sandeep.  What if the values in the dictonaries are numpy arrays?   I noticed that .items() is not supported for np.arrays</span>
<span class="comment-copy">@Sheila It would work even if the values are numpy arrays check the update.</span>
