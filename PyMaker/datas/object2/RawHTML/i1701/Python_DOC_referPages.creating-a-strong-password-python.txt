<div class="post-text" itemprop="text">
<p>Need to create a function that validates my password strength having trouble with the third question.</p>
<ol>
<li>Both entered passwords are identical.</li>
<li>The password is &gt;= 8 characters in length.</li>
</ol>
<p>3.If the first and last characters of the password are alphabetic then the first character of the password must be a different alphabetic letter to the last character of the password regardless of case.  e.g 1st char is A so last char cannot be A or a.</p>
<pre><code>def validate_password(first_pwd, second_pwd):
    #Checks if password are same
    if first_pwd == second_pwd:
        #Checks if password is greater or equal to 8 characters
        if len(first_pwd) &gt;= 8:
            #Checks if last and first character are alphabetic 
            if first_pwd[0].islower() and first_pwd[-1].isupper() or first_pwd[0].isupper() and first_pwd[-1].islower():
                return True
            else:
                return False


print(validate_password("Abcd1234","Abcd1234"))
</code></pre>
<p>How do i ignore the digits at the end of the password and look at the nearest alphabetic letter which would be the d.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might try to solve it with a regex. This checks if the first occurrence of a letter equals (case-insensitively) the last occurrence of a letter.</p>
<p>You have to adapt the regex or the if clause if you really just want to check the first char of the string or the last one.<br/>
You also can do an extra check to see if the last char in the pwd equals the last letter in the list <em>chars</em> below.</p>
<pre><code>import re

def validate_password(first_pwd, second_pwd):
# Checks if password are same
if first_pwd == second_pwd:
    # Checks if password is greater or equal to 8 characters
    if len(first_pwd) &gt;= 8:
        # get only the letters of the password
        chars = re.findall(r'[A-Za-z]', first_pwd)
        # compare first and last occurrence of letters in pwd
        if chars[0].islower() and chars[-1].isupper() or chars[0].isupper() and chars[-1].islower():
            return True
        else:
            return False


print(validate_password("Abcd1234","Abcd1234"))
</code></pre>
<p>I also think, it might be enough only to check</p>
<pre><code>if chars[0].upper() == chars[-1].upper(): # optional if needed: and first_pwd[-1].upper() == chars[-1].upper()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not an expert, but as someone who tries to continually improve at python it's recommended to write out the words instead of using abbreviations.</p>
<p>also you rother functions to verify the password strength are being checked only if the password was the same as the previous, so make sure you take length greater than 8 out of the first check</p>
<p>Things worth looking at would be:</p>
<p>islower, isalpha <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow noreferrer">HERE</a></p>
<p>with lower() <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">HERE</a></p>
<p>and I recommend youtubing regex because it's a tough concept imo</p>
<pre><code>import re

def validate_password(first_password, second_password):
    if first_password == second_password:
        # Cannot be the previous password
        return False

    letters = "".join(re.findall("[a-zA-Z]+", first_password))
    first_letter = letters[0]
    last_letter = letters[-1]
    if len(first_password) &gt;= 8:
        if first_letter.lower() == last_letter.lower():
            # First character can't be the same as last character
            return False
        else:
            # Every test passed
            return True
    else:
        # password too short
        return False

print(validate_password("Abcd1234","Abcd1234"))
</code></pre>
</div>
<span class="comment-copy">While this question has <i>technically</i> been answered... a far better approach would be to use an established library like <a href="https://github.com/dwolfhub/zxcvbn-python" rel="nofollow noreferrer">zxcvbn-python</a> if you want to actually check password strength. What you have here is extremely arbitrary and will allow such excellent passwords as <code>'aaaaaaab'</code>, <code>'password'</code>, <code>'11111111'</code>, and <code>'username'</code>.</span>
<span class="comment-copy">@mikuszefski You're attributing arguments to me that I did not make. All I did was point out how comically bad <i>this</i> specific idea of password strength is; unless you disagree with <i>that</i>, I don't think you and I have any disagreement.</span>
<span class="comment-copy">there are other attributes such as There are no more than 2 vowels in the password and The password has at least 1 alphabetic character in upper case and 1 alphabetic character in lower case. I just didn't feel the need to post them because they have been solved I was just having trouble with Question 3.</span>
<span class="comment-copy">@kungphu true! Basically, my comment holds for the OP then. Cheers.</span>
