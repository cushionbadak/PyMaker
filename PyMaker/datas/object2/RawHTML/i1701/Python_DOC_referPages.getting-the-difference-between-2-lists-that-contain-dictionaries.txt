<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/36798629/finding-difference-between-two-list-of-dictionary-in-python">Finding difference between two list of dictionary in Python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/3462143/get-difference-between-two-lists">Get difference between two lists</a>
<span class="question-originals-answer-count">
                    26 answers
                </span>
</li>
</ul>
</div>
<pre><code>list1 = [{'key1': 'item1'}, {'key2': 'item2'}]
list2 = [{'key1': 'item1'}, {'key2': 'item2'}, {'key3': 'item3'}]
</code></pre>
<p>Is there a way to get the difference between those two lists?</p>
<p>Basically, I need a scaleable way to get the differences between 2 lists that contain dictionaries. So I'm trying to compare those lists, and just get a return of <code>{'key3': 'item3'}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a list comprehension:</p>
<pre><code>list1 = [{'key1': 'item1'}, {'key2': 'item2'}]
list2 = [{'key1': 'item1'}, {'key2': 'item2'}, {'key3': 'item3'}]

print([x for x in list2 if x not in list1])
</code></pre>
<p>Which will give <code>[{'key3': 'item3'}]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set()</code> with a comprehension like this example:</p>
<pre><code>def get_diff(elm1, elm2):
    a = set((m, n) for k in elm1 for m, n in k.items())
    b = set((m, n) for k in elm2 for m, n in k.items())
    if len(b) &gt; len(a):
        return dict(b - a)
    return dict(a - b)


list1 = [{'key1': 'item1'}, {'key2': 'item2'}]
list2 = [{'key1': 'item1'}, {'key2': 'item2'}, {'key3': 'item3'}]
get_diff(list1, list2)
</code></pre>
<p>Output:</p>
<pre><code>{'key3': 'item3'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>in_list1_not_in_list2 = [i for i in list1 if i not in list2]
in_list2_not_in_list1 = [i for i in list2 if i not in list1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since dictionaries are not hashable there isn't an easy way to hash, but since we have one key and one val per dictionary, we can build our own key! So you can do something like this:</p>
<pre><code>list1_set = set()

for dictionary in list1:
    key = dictionary.keys()[0]
    vals = dictionary.values()[0]
    custom_key = '{}|{}'.format(key,vals)
    list1_set.add(custom_key)

differences = []
for dictionary in list2:
    key = dictionary.keys()[0]
    vals = dictionary.values()[0]
    custom_key = '{}|{}'.format(key,vals)

    if custom_key not in list1_set:
        differences.append(dictionary)

print differences
</code></pre>
<p>output:</p>
<pre><code>[{'key3': 'item3'}]
</code></pre>
<p>Not this solution is much more scalable then simply iterating through the first list because of the constant lookup ability.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also try using <code>set.symmetric_difference()</code> to get the difference between the sets both ways:</p>
<pre><code>list1 = [{'key1': 'item1'}, {'key2': 'item2'}]
list2 = [{'key1': 'item1'}, {'key2': 'item2'}, {'key3': 'item3'}]

set1 = set(tuple(x.items())[0] for x in list1)
set2 = set(tuple(x.items())[0] for x in list2)

print([dict(list(set1.symmetric_difference(set2)))])
# [{'key3': 'item3'}]

print([dict(list(set2.symmetric_difference(set1)))])
# [{'key3': 'item3'}]
</code></pre>
<p>Another way would be to use <a href="https://docs.python.org/3/library/itertools.html#itertools.filterfalse" rel="nofollow noreferrer"><code>itertools.filterfalse()</code></a>:</p>
<pre><code>from itertools import filterfalse

diff1 = list(filterfalse(lambda d: d in list2, list1))
diff2 = list(filterfalse(lambda d: d in list1, list2))

print(diff1 + diff2)
# [{'key3': 'item3'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can inform the dictionary how to hash itself and then you could use <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a></p>
<pre><code>import json

class HashableDict(dict):   
    def __hash__(self):
        # convert the dictionary to something hashable - in this case a str
        return hash(json.dumps(self)) 
</code></pre>
<p>then you can do</p>
<pre><code>hashable_list1 = map(HashableDict, list1)
hashable_list2 = map(HashableDict, list2)
set(hashable_list2).difference(hashable_list1)
</code></pre>
<p><code>difference</code> gives you the elements in lists2 that are not in list1.</p>
<p>If you wanted all the difference, so all the items that are not in both lists, do:</p>
<pre><code>set(hashable_list2).symmetric_difference(hashable_list1)
</code></pre>
<p>Note this will not work for all dictionaries (e.g., dictionaries containing objects the <code>json.dumps</code> cannot work with) unless you handle those explicitly too with a custom <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder" rel="nofollow noreferrer">JSONEncoder</a></p>
</div>
<span class="comment-copy">^ not necessarily a duplicate since the elements here are dictionaries which are not readily hashable using a set</span>
<span class="comment-copy">Do you really only have dictionaries with one key/value, or is that just for demonstration? Because it would probably make a lot more sense to just have one dictionary <code>{key1: item1, key2: item2, ...}</code> rather than a list.</span>
<span class="comment-copy">"Is there a way to get the difference between those two lists?" â€“ You do it by writing a program which does that. If you have a problem with your program, carefully read the documentation of all the methods, classes, modules, and libraries you are using, write tests for your programs, trace the execution with pen and paper, single-step it in a debugger, then sleep on it, start again from the beginning, sleep on it again, and <i>then and only then</i> narrow your problem down to a concise, focused, simple, short, reproducible <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> and ask a specific, focused, narrow question on <a href="https://stackoverflow.com">Stack Overflow</a>.</span>
