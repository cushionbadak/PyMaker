<div class="post-text" itemprop="text">
<p>So this is what I came up with. I define one function to compute the maximum element in a list which works while the second function <code>myreduce</code> doesn't.</p>
<p>I don't understand why my logic is flawed. I'm new to programming. Help?</p>
<pre><code>def maxoflist(l):       #function to compute the maximum element in a list
    maxi=l[0]
    for i in l:
        if i&gt;maxi:
            maxi=i
    return maxi

def myreduce(myfunc,mylist): #this is where I'm trying to mimic the 
    res=[]                   #reduce function
    for i in mylist:
        res.append(myfunc(i))          
    return res
l=[1,2,3]
print(list(myreduce(maxoflist,l)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You didn't implement the reduce function. Your <code>myreduce()</code> function instead implements the <a href="https://en.wikipedia.org/wiki/Map_(higher-order_function)" rel="nofollow noreferrer"><em>map</em> higher-order function</a>, producing a sequence of <code>myfunc()</code> results for the inputs in <code>mylist</code>. When mapping, the function used should take a single input, and each input is processed independently, and the resulting sequence of outputs are given in the same order as the inputs that produced them.</p>
<p>The <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer">higher-order <em>reduce</em> operation</a> would produce a <em>single output</em>. Reducing means you iteratively take the output from the <em>preceding</em> reduce operation, and together with the next input value, the function is called to produce the next output. So the function takes <em>two</em> inputs for the reduce operation to work correctly. For the first step, where there is no preceding output, you would either start with a fixed starting value, or just take <em>two</em> inputs from the input list. With each step producing new output, the previous output is discarded. You end up with a single output at the end.</p>
<p>Using reduce to produce the maximum for <code>[1, 2, 3]</code> can start with two inputs, and a simple function that determines the maximum of those two inputs. The procedure then takes the following steps:</p>
<ul>
<li>Take the first input, 1, as the starting 'output' value. If there are no further inputs, this would be the final result.</li>
<li>Use the initial output, 1 from the previous step, and the next input value, 2, and call the function with both. The maximum of 1 and 2 is 2, so that's what the function produces as the first output result.</li>
<li>Use 2 from the previous operation, and the next input, 3 to call the function again. The maximum of 2 and 3 is 3, so that's what the function produces as the new output.</li>
<li>There are no more inputs, the output is 3.</li>
</ul>
<p>Your reduce implementation would have to do the same:</p>
<ul>
<li>start with a given starting value for the 'output', or take the first value from the input list.</li>
<li>for each value in the (remainder of the) input list, call the function with the last output and the value, and the return value replaces the output.</li>
<li>When all values have been processed, return the output.</li>
</ul>
<p>Python 3 has implemented this as <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a>, the documentation actually comes with a pure-python implementation you could copy directly.</p>
</div>
<span class="comment-copy">Do you understand what the <code>reduce()</code> function does? Your <code>myreduce()</code> function does not do what <code>reduce()</code> does.</span>
<span class="comment-copy">You could just use the builtin <code>max</code> function.</span>
<span class="comment-copy">You have instead implemented the <code>map()</code> function here, see <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map</a></span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.reduce</a> for code comparison.</span>
<span class="comment-copy">@ShrenikRaj: have you read the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce()</code> function documentation</a>? Or were you looking for the <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer">formal definition of the higher-order function</a>?</span>
<span class="comment-copy">Thanks a ton! This was incredibly helpful!</span>
<span class="comment-copy">Glad to have been of help! Feel free to <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accept my answer</a> if you feel it was useful to you. :-)</span>
