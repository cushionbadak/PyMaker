<div class="post-text" itemprop="text">
<p>Goals: to Initialize an array with pre-defined size with a random number. 
I have try this way and working:</p>
<pre><code>xa = np.empty(100)
xa[0] = random.random()
for i in range(1,100):
    xa[i] = xa[i-1] + random.random()
</code></pre>
<p>My question: Is there any better way to do it? maybe without the for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that you are using numpy the code in your question is equivalent to:</p>
<pre><code>import numpy as np
np.random.seed(42)

xa = np.cumsum(np.random.random(100))
print(xa[:5])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[0.37454012 1.32525443 2.05724837 2.65590685 2.81192549]
</code></pre>
<p>But if what you want if something that returns a range (like the one from the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range</a> function), but with a random step you could do something like this:</p>
<pre><code>xa = np.cumsum(np.random.randint(100, size=(100,)))
print(xa[:5])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[ 62 157 208 303 306]
</code></pre>
<p>Note that in both cases only the first 5 numbers are printed. Also in both cases the step is positive.</p>
<p><strong>Further</strong></p>
<ol>
<li>Documentation on <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.cumsum.html" rel="nofollow noreferrer">cumsum</a>, <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.randint.html" rel="nofollow noreferrer">randint</a> and <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.random.html" rel="nofollow noreferrer">random</a>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You also can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> function:</p>
<pre><code>from itertools import accumulate
import numpy as np
import random

xa = np.empty(100)
xa[0] = random.random()

xa = list(accumulate(xa, lambda x, y: x + random.random()))
</code></pre>
<p>I am not quite sure that this is what you need, but it computes every element with <code>prev + random.random()</code> like you wrote in your question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple one-liner</p>
<pre><code>import random 
xa = random.sample(range(1, 101), 100)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use this better than your code</p>
<pre><code>import random
xa = [None] * 100
xa[0] = random.random()
for i in xrange(1, 100):
        xa[i] = xa[i-1] + random.random()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension:</p>
<pre><code>import random
n = 100   # your array size
xa = [random.random() for _ in range(n)]
</code></pre>
<p>Again as mentioned, <code>np.empty(100)</code> would already give you a fully random array of the size.  What is the issue with <code>np.empty()</code>?</p>
</div>
<span class="comment-copy">it looks good to me.</span>
<span class="comment-copy">When you create <code>np.empty(100)</code> it's already all random though...? I'm not sure I follow your question. Did you just want each subsequent element to be larger than the previous?</span>
<span class="comment-copy"><code>cumsum</code> on a random array of steps?</span>
<span class="comment-copy">is it an array of 100 random numbers? or does it have any specific conditions?</span>
<span class="comment-copy">To elaborate on @hpaulj comment: <code>xa = np.cumsum(np.random.rand(100))</code></span>
<span class="comment-copy">Great answer.  Works well. Thank you.</span>
<span class="comment-copy">That's great answer. Don't forget to assign the result to <code>xa</code> ;)</span>
<span class="comment-copy">I believe random.random() returns a float between 0 and 1. So this wont return the same as the OP.</span>
<span class="comment-copy">this is the output what I got     [86, 15, 91, 75, 65, 46, 81, 45, 94, 3, 61, 28, 96, 29, 5, 100, 62, 89, 20, 92, 32, 76, 55, 87, 84, 27, 6, 11, 80, 95, 90, 67, 9, 41, 59, 48, 54, 42, 79, 52, 24, 93, 1, 19, 18, 13, 50, 71, 49, 97, 12, 78, 25, 66, 47, 38, 40, 33, 68, 26, 53, 8, 16, 43, 21, 70, 72, 56, 7, 63, 37, 58, 51, 34, 14, 69, 64, 83, 73, 4, 85, 2, 77, 31, 30, 82, 35, 44, 98, 17, 99, 74, 88, 36, 10, 60, 22, 23, 39, 57]</span>
<span class="comment-copy">The output of the OP does not return integers</span>
<span class="comment-copy">Thanks for the answer, but not quite what I was after.  This just returns a list of random numbers, not the cumulative sum of random numbers I was after.  Also worth mentioning that np.empty(100)isn't actually random, but garbage (whatever information was at the memory addresses assigned to the array), which I believe is different.</span>
