<div class="post-text" itemprop="text">
<p>When trying to add new element to my <code>cells</code> class object list, I noted that all list values are the last value of added item. I use append to add new items. How can I get the correct answer?</p>
<pre><code>class cells:
  x=0
</code></pre>
<hr/>
<pre><code>from cells import cells
a=[]

a.append(hucre)
a[0].x=10

a.append(hucre)
a[1].x=20

a.append(hucre)
a[2].x=30

print(a[0].x) #30 where must give me 10
print(a[1].x) #30 where must give me 20
print(a[2].x) #30 where must give me 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because in your class you defined x within the class's body, not it's <code>__init__</code> method. That makes it a class variable, one and the same for all instances of the class, as per <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">the documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should create new instaces of class <code>cells</code>, not changing <code>cells</code>'s class <code>cells.x</code> attribute.</p>
<p>So you should define <code>__init__</code> method for class <code>cells</code> (more info about <code>__init__</code>: <a href="https://python-3-patterns-idioms-test.readthedocs.io/en/latest/InitializationAndCleanup.html" rel="nofollow noreferrer">link</a>, <a href="https://micropyramid.com/blog/understand-self-and-__init__-method-in-python-class/" rel="nofollow noreferrer">link</a>):</p>
<pre><code>class cells:
    def __init__(self, x=None):  # default value of x is None
        self.x = x


hucre = cells()  # instantiating new cells object
print(hucre.x)

Out: 
None
</code></pre>
<p>Appending values to the list: </p>
<pre><code>a = []   
a.append(hucre)
a[0].x = 10
print(a[0].x)

Out: 
10
</code></pre>
<p>Create new object, otherwise you'll change first object:</p>
<pre><code>hucre = cells(20)
a.append(hucre) # here .x is 20 already so you need no assignment 
print(a[1].x)

Out: 
20
</code></pre>
<p>...and so on. You could append objects instantiated inside parens:</p>
<pre><code>a.append(cells(30))
print(a[2].x)

Out: 
30
</code></pre>
</div>
<span class="comment-copy">What is <code>hucre</code>?</span>
<span class="comment-copy"><code>"i use append to add new items"</code> no, you are adding the same object over and over, no wonder that if you change it once, all instances change. And please specify what <code>hucre</code> is, or even better, provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">Plus it looks as if <code>x</code> is a class variable, not an instance variable, you should look up the difference.</span>
<span class="comment-copy">You can use the <code>type(cls_name, bases, namespace)</code> to create classes dynamically. Where name, bases, namespace are string, tuple, dict respectively.</span>
<span class="comment-copy">"hucre" is same class name "cells", i wrong writes it.</span>
<span class="comment-copy">Thanks very much it solves</span>
<span class="comment-copy">thank u dear for details understand</span>
