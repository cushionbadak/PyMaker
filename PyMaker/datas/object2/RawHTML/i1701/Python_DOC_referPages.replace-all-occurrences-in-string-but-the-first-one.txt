<div class="post-text" itemprop="text">
<p>Given the string:</p>
<blockquote>
<p>X did something. X found it to be good, and so X went home.</p>
</blockquote>
<p>I would like to replace all occurrences of <code>X</code> but the first one, with Y, such that the output string would look like:</p>
<blockquote>
<p>X did something. Y found it to be good, and so Y went home.</p>
</blockquote>
<p>I tried many regex patterns (based on <a href="https://vi.stackexchange.com/questions/10905/substitution-how-to-ignore-the-nth-first-occurrences-of-a-pattern">https://vi.stackexchange.com/questions/10905/substitution-how-to-ignore-the-nth-first-occurrences-of-a-pattern</a>) but failed to implement this with Python</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="noreferrer"><code>str.partition</code></a> splits a string into the part before a delimiter, the delimiter itself, and the part after, or the string and two empty strings if the delimiter doesnâ€™t exist. What that comes down to is:</p>
<pre><code>s = 'X did something. X found it to be good, and so X went home.'
before, first, after = s.partition('X')
result = before + first + after.replace('X', 'Y')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cold use the fact that <a href="https://docs.python.org/3/library/re.html#re.sub" rel="noreferrer">re.sub</a> uses a function:</p>
<pre><code>import re


def repl(match, count=[0]):
    x, = count
    count[0] += 1
    if x &gt; 0:
        return 'Y'
    return 'X'


print(re.sub('X', repl, 'X did something. X found it to be good, and so X went home.'))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>X did something. Y found it to be good, and so Y went home.
</code></pre>
<p>The idea is to use a function that keeps the count of seen <code>X</code> and then replace it when the count if above 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another Option is to find the first one and only after replace all <code>X</code> occurrences.</p>
<p>Finally, concat the beginning to the start of the sentence </p>
<pre><code>st = 'X did something. X found it to be good, and so X went home.'
first_found = st.find('X')
print (st[:first_found + 1] + st[first_found + 1:].replace('X', 'Y'))
# X did something. Y found it to be good, and so Y went home.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a low tech solution without regex. :)</p>
<pre><code>&gt;&gt;&gt; s = 'X did something. X found it to be good, and so X went home'
&gt;&gt;&gt; s = s.replace('X', 'Y').replace('Y', 'X', 1)
&gt;&gt;&gt; s
&gt;&gt;&gt; 'X did something. Y found it to be good, and so Y went home'
</code></pre>
<p>Solution if <code>'Y'</code> can exist in the original string:</p>
<pre><code>def replace_tail(s, target, replacement):
    try:
        pos = s.index(target)
    except ValueError:
        return s
    pos += len(target)
    head = s[:pos]
    tail = s[pos:]
    return head + tail.replace(target, replacement)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; s = 'Today YYY and XXX did something. XXX found it to be good, and so XXX went home without YYY.'
&gt;&gt;&gt; replace_tail(s, 'XXX', 'YYY')
&gt;&gt;&gt; 'Today YYY and XXX did something. YYY found it to be good, and so YYY went home without YYY.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Apply iteratively the regex after finding the first match over the remaining of the string. Or just using <code>replace</code> if it is possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can use <em>slicing</em> to produce two string: first one up to (and including) the first element, and the next slice that contains the rest. We can then apply the replace part on that part, and merge these back:</p>
<pre><code>def replace_but_first(text, search, replace):
    try:
        idx = text.index(search) + len(search)
        return text[:idx] + text[idx:].replace(search, replace)
    except ValueError:  # we did not found a single match
        return text
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; replace_but_first('X did something. X found it to be good, and so X went home.', 'X', 'Y')
'X did something. Y found it to be good, and so Y went home.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are still interested in using regular expression operations, you can use <a href="https://docs.python.org/2/library/re.html#re.finditer" rel="nofollow noreferrer"><code>re.finditer()</code></a>. This returns an iterator yielding <code>MatchObject</code> instances of each match case found. Casting the iterator to a list allows you to index into the <code>MatchObject</code> instances. In the function below, <code>[1:]</code> indicates to skip the first match.</p>
<pre><code>def replace_rest(my_string, replacement):

    for match in list(re.finditer(r'(X)', my_string))[1:]:
        my_string = my_string[0:match.start()] + replacement + my_string[match.end():]

    return my_string
</code></pre>
<p>Run:</p>
<pre><code>&gt;&gt;&gt; my_string = "Person X did something. X found it to be good, and so Y went home."
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; replace_rest(my_string, "Y")
'Person X did something. Y found it to be good, and so Y went home.'
</code></pre>
<p><strong>Side Note</strong>: This can also useful for ignoring any n^th occurrence of a pattern.</p>
</div>
<span class="comment-copy">Gonna run in to trouble if a Y already existed before the X.</span>
<span class="comment-copy">@Ry- correct! Amit, can you clarify if this can happen? I might have to increase the tech level a bit.</span>
<span class="comment-copy">Nice catch, In my use case, this can never happen. I like all of the proposed solutions, but this one is most elegant.</span>
<span class="comment-copy">@Amit in any case, I added a function that works in both scenarios.</span>
<span class="comment-copy">@Ry-: sorry I was confused between <code>index</code> and <code>find</code>.</span>
<span class="comment-copy"><code>.find()</code> strilcty speaking will work as well, although this is a bit ugly, and we save some cycles by not doing a second iteration over the string.</span>
