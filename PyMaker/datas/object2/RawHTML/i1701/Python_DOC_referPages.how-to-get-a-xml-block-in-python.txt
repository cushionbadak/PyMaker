<div class="post-text" itemprop="text">
<p>I need to rearrange / combine XML files to a new target file.</p>
<p>My data has the following form</p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Level1&gt;
  &lt;Level2&gt;
    &lt;Level3&gt;
      &lt;ID&gt;1&lt;/ID&gt;
      &lt;Name&gt;String1&lt;/Name&gt;
      &lt;Attribute&gt;123&lt;/Attribute&gt;
    &lt;/Level3&gt;
    &lt;Level3&gt;
      &lt;ID&gt;2&lt;/ID&gt;
      &lt;Name&gt;String2&lt;/Name&gt;
      &lt;Attribute&gt;456&lt;/Attribute&gt;
    &lt;/Level3&gt;
    &lt;Level3&gt;
      &lt;ID&gt;3&lt;/ID&gt;
      &lt;Name&gt;String3&lt;/Name&gt;
      &lt;Attribute&gt;789&lt;/Attribute&gt;
    &lt;/Level3&gt;
  &lt;/Level2&gt;
&lt;/Level1&gt;
</code></pre>
<p>I'm looking for a python command to get a block of Level3 via the ID, for example</p>
<p>getBlock(2) should deliver</p>
<pre><code>&lt;Level3&gt;
  &lt;ID&gt;2&lt;/ID&gt;
  &lt;Name&gt;String2&lt;/Name&gt;
  &lt;Attribute&gt;456&lt;/Attribute&gt;
&lt;/Level3&gt;
</code></pre>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another example of using ElementTree, but without doing all of the unnecessary for loops. The testing of the <code>ID</code> value can be done in a simple <a href="https://www.w3.org/TR/xpath-10/#predicates" rel="nofollow noreferrer">XPath predicate</a>.</p>
<p><strong>Example</strong> (super basic with no error checking)</p>
<pre class="lang-py prettyprint-override"><code>import xml.etree.ElementTree as ET

xml = """&lt;Level1&gt;
  &lt;Level2&gt;
    &lt;Level3&gt;
      &lt;ID&gt;1&lt;/ID&gt;
      &lt;Name&gt;String1&lt;/Name&gt;
      &lt;Attribute&gt;123&lt;/Attribute&gt;
    &lt;/Level3&gt;
    &lt;Level3&gt;
      &lt;ID&gt;2&lt;/ID&gt;
      &lt;Name&gt;String2&lt;/Name&gt;
      &lt;Attribute&gt;456&lt;/Attribute&gt;
    &lt;/Level3&gt;
    &lt;Level3&gt;
      &lt;ID&gt;3&lt;/ID&gt;
      &lt;Name&gt;String3&lt;/Name&gt;
      &lt;Attribute&gt;789&lt;/Attribute&gt;
    &lt;/Level3&gt;
  &lt;/Level2&gt;
&lt;/Level1&gt;"""

tree = ET.fromstring(xml)

def getBlock(xml_tree, id):
    return xml_tree.find(f".//Level3[ID='{id}']")

print(ET.tostring(getBlock(tree, "2"), encoding="unicode"))
</code></pre>
<p>this will print:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;Level3&gt;
  &lt;ID&gt;2&lt;/ID&gt;
  &lt;Name&gt;String2&lt;/Name&gt;
  &lt;Attribute&gt;456&lt;/Attribute&gt;
&lt;/Level3&gt;
</code></pre>
<p>If you'd like to use more complicated XPath, I'd recommend <a href="https://lxml.de/" rel="nofollow noreferrer"><code>lxml</code></a> since <a href="https://docs.python.org/3.7/library/xml.etree.elementtree.html#xpath-support" rel="nofollow noreferrer">ElementTree's XPath support is limited</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use Python's XML library to do this. The following is a code snippet to show one way of obtaining an XML block based on its children's value. </p>
<pre><code>import xml.etree.ElementTree as ET

# Parse XML file, creates ElementTree object
tree = ET.parse("&lt;XML_FILEPATH_HERE&gt;")
root = tree.getroot()

# Get &lt;Level3&gt; nodes with specific id within XML ElementTree object
def getBlock(root, id_value):
    for lvl_3 in root.findall('.//Level3'):
        if id_value == lvl_3.find('ID').text:
            print(ET.tostring(lvl_3).decode())
</code></pre>
<p>You can check out the python XML library document for more information.
<a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">https://docs.python.org/3/library/xml.etree.elementtree.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3.7/library/xml.etree.elementtree.html" rel="nofollow noreferrer">xml.etree.ElementTree</a> package can do that for you.  </p>
<p>Import your data from either string or file</p>
<pre><code>Level1 = ET.fromstring(myXml) 
</code></pre>
<p>And you'll have a tree in the form of a list of lists.</p>
<p>Iterating, selecting or filtering over these lists becomes easy.  This iterates across a list of all Level3 elements:</p>
<pre><code>Level1 = ET.fromstring(myXml)

for Level3 in Level1.findall('.//Level3'):
    for child in Level3:
        print (child.tag, child.text)
</code></pre>
</div>
<span class="comment-copy">Thanks also to you - that is what I will use. I had a look at the documentation before, but could not manage it.</span>
<span class="comment-copy">Thank you very much.</span>
<span class="comment-copy">Thank you - what an elegant solution this is as well</span>
