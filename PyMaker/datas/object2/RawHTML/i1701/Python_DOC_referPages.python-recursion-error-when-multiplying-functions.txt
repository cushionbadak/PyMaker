<div class="post-text" itemprop="text">
<p>I'm using python 3 and trying to multiply functions within a for loop. I wrote a simple example code to demonstrate my problem. What I want this code to do was to start with the funciton x^2, then multiply it by x^2 in first loop, to get x^4. Then multiply x^4 again with x^2 to get x^6 e.t.c.</p>
<pre><code>fun = lambda x: x**2

function = lambda x: x**2
for i in range(2):
    function = lambda x: function(x) * fun(x)

print(function(2))
</code></pre>
<p>But the code comes out with a Recursion error. I have no idea how this is causing a recursion though? Any help will be much appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>The assignment in your loop is equivalent to:</p>
<pre><code>def function(x):
    return function(x) * fun(x)
</code></pre>
<p>Which is a recursive function without a stop condition. Your initial definition of <code>function</code> is shadowed, due to <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">python's binding rules</a>:</p>
<blockquote>
<p>The following constructs bind names: formal parameters to functions,
  import statements, class and function definitions (these bind the
  class or function name in the defining block)</p>
</blockquote>
<p>You can trace it and verify such behaviour using <code>python3 -m trace --trace script.py</code> :</p>
<pre><code>--- modulename: script, funcname: &lt;lambda&gt;
script.py(6):     function = lambda x: function(x) * fun(x)
--- modulename: script, funcname: &lt;lambda&gt;
script.py(6):     function = lambda x: function(x) * fun(x)

# Repeated until a RecursionError is thrown
</code></pre>
<p>You can instead bind your function as an argument of the lambda:</p>
<pre><code>fun = lambda x: x**2
function = lambda x: x**2
for i in range(2):
    function = lambda x, y=function: y(x) * fun(x)

print(function(2))
</code></pre>
<p>Which will produce the following trace:</p>
<pre><code>--- modulename: script, funcname: &lt;module&gt;
script.py(3): fun = lambda x: x**2
script.py(4): function = lambda x: x**2
script.py(5): for i in range(2):
script.py(6):     function = lambda x, y=function: y(x) * fun(x)
script.py(5): for i in range(2):
script.py(6):     function = lambda x, y=function: y(x) * fun(x)
script.py(5): for i in range(2):
script.py(8): print(function(2))
--- modulename: script, funcname: &lt;lambda&gt;
script.py(6):     function = lambda x, y=function: y(x) * fun(x)
--- modulename: script, funcname: &lt;lambda&gt;
script.py(6):     function = lambda x, y=function: y(x) * fun(x)
--- modulename: script, funcname: &lt;lambda&gt;
script.py(4): function = lambda x: x**2
--- modulename: script, funcname: &lt;lambda&gt;
script.py(3): fun = lambda x: x**2
--- modulename: script, funcname: &lt;lambda&gt;
script.py(3): fun = lambda x: x**2
64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I never found a solution to this, but did find a workaround. Rather than trying to multiply it straight away, I wrote a function to do the multiplication. This seems to works so I'll just use this instead.</p>
<pre><code>def multiplyFun(fun1,fun2):
    fun = lambda x: fun1(x) * fun2(x)
    return fun


fun = lambda x: x**2

function = lambda x: x**2
for i in range(5):
    print(i)
    function = multiplyFun(function,fun)

print(function(2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternate syntax: rather than pass a second argument to the <code>lambda</code>, you can use a nested <code>lambda</code> where the outer one is evaulated to return the inner one:</p>
<pre><code>squared = lambda x: x**2
function = lambda x: x**2

for i in range(2):
    function = (lambda f: lambda x: f(x) * squared(x))(function)

print(function(2))
</code></pre>
<p>Just seems more generic solution (language-wise) than a defaulted argument.</p>
</div>
<span class="comment-copy">Oh haha I just wrote this workout myself, crazy timing. Thank you for the explanation though!</span>
