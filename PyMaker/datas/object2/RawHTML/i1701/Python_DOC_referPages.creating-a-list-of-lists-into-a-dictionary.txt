<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9858096/creating-a-dictionary-with-list-of-lists-in-python">Creating a dictionary with list of lists in Python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to find a code that transforms a list of lists into a dictionary. Lets say I have a list that is </p>
<pre><code>list_one = [['id1', 'id2', id3', 'id4', 'id5'],
            ['1', 'Cat', '400', 'Fur', '50'],
            ['2', 'Dog', '500', 'Smelly', '60']]
</code></pre>
<p>The dictionary should have keys to number each list in dictionaries in this format</p>
<pre><code>new_dict = {1.0: {'id1': 1,
                 'id2': 'Cat',
                 'id3': 400,
                 'id4': 'Fur',
                 'id5': 50},
            2.0: {'id1': 2,
                  'id2': 'Dog',
                  'id3': 500,
                  'id4': 'Smelly'
                  'id5': 60}
</code></pre>
<p>Can such a conversion be done in list comprehension or through a for loop? </p>
</div>
<div class="post-text" itemprop="text">
<p>a simple dict-comprehension using enumerate:</p>
<pre><code>list_one = [['id1', 'id2', 'id3', 'id4', 'id5'],
            ['1', 'Cat', '400', 'Fur', '50'],
            ['2', 'Dog', '500', 'Smelly', '60']]

new_dict = {float(i): dict(zip(list_one[0], items)) 
            for i, items in enumerate(list_one[1:], start=1)}

print(new_dict)
</code></pre>
<p>results in</p>
<pre><code>{1.0: {'id1': '1', 'id2': 'Cat', 'id3': '400', 'id4': 'Fur', 'id5': '50'}, 
 2.0: {'id1': '2', 'id2': 'Dog', 'id3': '500', 'id4': 'Smelly', 'id5': '60'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your use case, the keys are the first list in your list, and the objects are the rest. You can zip them together and create that dictionary like so:</p>
<pre><code>ks, objs = list_one[0], list_one[1:]

myobjects = {i: dict(zip(ks, l)) for i,l in enumerate(objs)}
</code></pre>
<p><code>zip</code> will take the element-by-element pairs and create tuples like <code>(x, y)</code> and <code>dict</code> will make <code>{x: y}</code> from that tuple. The docs can be found <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are okay with third party library pandas</p>
<pre><code>import pandas as pd
{float(k):v for k,v in enumerate(pd.DataFrame(list_one[1:],columns=list_one[0]).to_dict('records'),1)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following should do the trick:</p>
<pre><code>&gt;&gt;&gt; new_dict = {float(i): {list_one[0][j]:val for j,val in enumerate(list_one[i])} for i in range(1,len(list_one))}
&gt;&gt;&gt; new_dict
 {1.0: {'id1': '1', 'id2': 'Cat', 'id3': '400', 'id4': 'Fur', 'id5': '50'},
 2.0: {'id1': '2', 'id2': 'Dog', 'id3': '500', 'id4': 'Smelly', 'id5': '60'}}
</code></pre>
</div>
<span class="comment-copy">Seems very simple, so why not try implementing it yourself instead of spending potentially more time looking for ready-made code online?</span>
<span class="comment-copy">in our target dict, why are the keys <code>1.0 ,2.0</code> etc. Why decimals? what is the physical significance?</span>
<span class="comment-copy"><a href="http://idownvotedbecau.se/noattempt/" rel="nofollow noreferrer">idownvotedbecau.se/noattempt</a></span>
<span class="comment-copy">To @Srini 's point, storing the keys as <code>floats</code> incurs extra overhead for no particular reason. Just store as <code>int</code>, it is smaller (from a data perspective) and makes it a bit easier to look up</span>
<span class="comment-copy">op said nothing about using pandas</span>
<span class="comment-copy">@Srini to be fair: the OP said nothing against using pandas....</span>
<span class="comment-copy">@hiroprotagonist true. But the original version of the answer did not make it clear that pandas was being used either. I just wanted to highlight that too :)</span>
