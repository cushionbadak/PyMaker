<div class="post-text" itemprop="text">
<p>I'm trying to understand the necessity to delete everything from the array in the last string.</p>
<p>The task is: 
Find the link at position 18 (the first name is 1). Follow that link. Repeat this process 7 times. The answer is the last name that you retrieve.</p>
<pre><code>    #Position / count - 3 variant
import urllib.request, urllib.parse, urllib.error
from bs4 import BeautifulSoup
import ssl
# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

taglist=list()
url=input("Enter URL: ")
count=int(input("Enter count:"))
position=int(input("Enter position:"))
for i in range(count):
    html = urllib.request.urlopen(url, context=ctx).read()
    soup = BeautifulSoup(html, 'html.parser')
    tags=soup('a')
    for tag in tags:
        taglist.append(tag)
    url = taglist[position-1].get('href', None)
    del taglist[:]
print ("Retrieving:",url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although that isn't the way I would do it, this is so you start with a new <code>taglist</code> every time. In this line:</p>
<pre><code>for tag in tags:
    taglist.append(tag)
</code></pre>
<p>you append to the <code>taglist</code>. If you delete the content of the list, you will start fresh each iteration of the outer for loop.</p>
<p>The function would act differently when you index into the <code>taglist</code> if you had all the tags in there from the previous iterations. The key lines to look at for this are:</p>
<pre><code>position=int(input("Enter position:"))
</code></pre>
<p>and </p>
<pre><code>url = taglist[position-1].get('href', None)
</code></pre>
<p>If you didn't reset the <code>taglist</code>, <code>position-1</code> would correspond to a different element.</p>
<hr/>
<p>I'm not sure I would say what you did is <em>wrong</em>, but without actually knowing about the site you are using this for, I would be inclined to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. The second way seems more Pythonic to me, and I also think it's more efficient.</p>
<pre><code># Instead of this
tags=soup('a')
for tag in tags:
    taglist.append(tag)
url = taglist[position-1].get('href', None)
del taglist[:]

# I would use this:
taglist = [tag for tag in soup('a')]
url = taglist[position-1].get('href', None)
</code></pre>
</div>
<span class="comment-copy">Thank you, got it. How would you do this?</span>
<span class="comment-copy">@MariaLavrovskaya See addition in answer</span>
