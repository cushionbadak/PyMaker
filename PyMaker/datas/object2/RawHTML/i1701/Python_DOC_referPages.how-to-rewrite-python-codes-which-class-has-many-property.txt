<div class="post-text" itemprop="text">
<p>I have write my class with many <code>@property</code> inside, and <em>Python Cookbook</em> suggest this is bad code. I decided to rewrite my code to remove those <code>@property</code>, here is example in <em>Python Cookbook</em> shows how to rewrite class without using <code>@property</code> and still have <code>setter, getter</code>.  </p>
<pre><code>class Integer(object):
    def __init__(self, name):
        self.name = name

    def __get__(self, instance, owner):
        if instance is None:
            return self
        else:
            return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if not isinstance(value, int):
            raise TypeError('int expected')
        instance.__dict__[self.name] = value

    def __delete__(self, instance):
        del instance.__dict__[self.name]

class Point(object):
    x = Integer('x')
    y = Integer('y')

    def __init__(self, x, y):
        self.x = x
        self.y = y
</code></pre>
<p>Here I show my code <strong>before</strong> rewrite.<br/>
<strong>In brief</strong>, my code will format text in MS-Word by using <code>python-docx</code> library, so you can see I need to apply text format(bold, italic...) by code like <code>self._run.bold = value</code> while setting <code>self._bold</code> by <code>self._bold = value</code> . This means I need <strong>more than</strong> just set the attribute value compare to <em>Python Cookbook</em> example.</p>
<pre><code>class CellParagraph(object):
    def __init__(self, cell, text=None):
    self._cell = cell
    self._style = 'Default Paragraph Font'
    self._paragraph = self._cell.paragraphs[0]
    self._run = self._paragraph.add_run(text, style=self._style)
    self._font_name = None
    self._bold = False
    self._italic = False
    ...many of them...

    @property
    def bold(self):
        return self._bold

    @bold.setter
    def bold(self, value):
        self._run.bold = value
        self._bold = value

    @property
    def italic(self):
        return self._italic

    @italic.setter
    def italic(self, value):
        self._run.italic = value
        self._italic = value

    ...many of them...
</code></pre>
<p>Here is my code <strong>after</strong> rewrite. You can see I have to write <code>refresh</code> method to apply those format to MS-Word, I have to use <code>refresh()</code> every time I set some text format.<br/>
My question:<strong>How to rewrite code like my case to <em>Python Cookbook</em> example style?</strong><br/>
Any discussion will be appreciate.</p>
<pre><code>class AddAttrb(object):
    def __init__(self, name, Etype=None):
        self.name = name
        self.Etype = Etype

    def __get__(self, instance, owner):
        if instance is None:
            return self
        else:
            return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if self.Etype:
            if not isinstance(value, self.Etype):
                raise TypeError('Need to be type: {}.'.format(self.Etype))
        instance.__dict__[self.name] = value

    def __delete__(self, instance):
        del instance.__dict__[self.name]


class CellParagraph(object):


    bold = AddAttrb('bold', bool)
    italic = AddAttrb('italic', bool)
    underline = AddAttrb('underline', bool)
    ...many more...

    def __init__(self, cell, text=None, style='Default Paragraph Font', font=None, bold=False, italic=False, underline=False,
             font_color=None, size=0, alignment='center'):
        self._paragraph = self._cell.paragraphs[0]
        self._run = self._paragraph.add_run(text, style=self.style)
        self.font = font
        self.bold = bold
        self.italic = italic
        ...many more...

    def refresh(self):
        self._run.bold = self.bold
        self._run.italic = self.italic
        self._run.underline = self.underline
        ...many more...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to both set the <code>_property</code> itself, and the <code>_run._property</code>,</p>
<h1>Edit:</h1>
<blockquote>
<p>I noticed a bug, and the state of the <code>TextProperty</code> was shared
  between the different paragraphs. So the value needs to be set on the
  <code>CellParagraph</code> instead of the <code>TextProperty</code></p>
<p>Using the <code>setattr(instance, f"_{self.name}", value)</code> and variations
  dynamically generates the <code>_bold</code> attribute on the paragraph. So take
  care not to use any of these yourself</p>
</blockquote>
<p>You can use the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">Descriptor</a> pattern used in the cookbook using <code>setattr</code> to change the value on the <code>CellParagraph._run</code></p>
<pre><code>class TextProperty(object):
    def __init__(self, name, property_type=None):
        self.name = name
        self.property_type = property_type

    def __get__(self, instance, owner):
        return getattr(instance, f"_{self.name}")

    def __set__(self, instance, value):
        if self.property_type is not None and not isinstance(
            value, self.property_type
        ):
            raise TypeError(f"{self.name} needs to be of type: {self.property_type}.")
        print(f"setting {self.name} to {value}")
        setattr(instance, f"_{self.name}", value)
        setattr(instance._run, self.name, value)

    def __delete__(self, instance):
        del instance.__dict__[self.name]
        delattr(instance, f"_{self.name}")
        delattr(instance._run, self.name)

    def __repr__(self):
        return "TextProperty("\
                    f"name={self.name}, "\
                    f"value={self.value}, "\
                    f"property_type={self.property_type}"\
                ")"
</code></pre>
<p>Then I used a dummy <code>Run</code> class, to act as the <code>paragraph._run</code> attribute</p>
<pre><code>class Run:
    def __init__(self):
        self.bold = None
        self.italic = None

    def __repr__(self):
        return f"Run(bold={self.bold}, italic={self.italic})"
</code></pre>
<p>you can use this like this in your <code>CellParagraph</code> class (simplified):</p>
<pre><code>class CellParagraph(object):
    bold = TextProperty("bold", bool)
    italic = TextProperty("italic")

    def __init__(self, bold=False, italic=False):
        self._run = Run()
        self.bold = bold
        self.italic = italic

    def __repr__(self):
        return f"CellParagraph(bold={self.bold}, italic={self.italic})"
</code></pre>
<p>then create some paragraphs to test this behaviour:</p>
<pre><code>paragraph_1 = CellParagraph()
paragraph_2 = CellParagraph(italic=True)
</code></pre>
<blockquote>
<pre><code>setting bold to False
setting italic to False
setting bold to False
setting italic to True
</code></pre>
</blockquote>
<pre><code>(paragraph_1, paragraph_1._run), (paragraph_2, paragraph_2._run)
</code></pre>
<blockquote>
<pre><code>((CellParagraph(bold=False, italic=False), Run(bold=False, italic=False)),
 (CellParagraph(bold=False, italic=True), Run(bold=False, italic=True)))
</code></pre>
</blockquote>
<pre><code>paragraph_1.bold = True
paragraph_1, paragraph_1._run
</code></pre>
<blockquote>
<pre><code>setting bold to True

(CellParagraph(bold=True, italic=False), Run(bold=True, italic=False))
</code></pre>
</blockquote>
<pre><code>paragraph_1.italic = 'abc'
paragraph_1.bold = 'abc'
</code></pre>
<blockquote>
<pre><code>setting italic to abc
TypeError: bold needs to be of type: &lt;class 'bool'&gt;.
</code></pre>
</blockquote>
<p>If you have a lot of attributes that need to be changed both on the paragraph and on the <code>paragraph._run</code>, then using this pattern can save some boilerplate, but it is less explicit that using the <code>@property</code>s</p>
</div>
<span class="comment-copy">What specific reason does the Cookbook cite for <code>@property</code> being badâ€¦?</span>
<span class="comment-copy">Take a look at <a href="https://softwareengineering.stackexchange.com/a/314986">this</a>. This seems like a good use of <code>@property</code> to me, too.</span>
<span class="comment-copy">If you're going to post Python code, you should probably indent it in a way that makes sense.</span>
<span class="comment-copy">@khelwood indent correctly now, thanks.</span>
<span class="comment-copy">@deceze I am using Chinese version of <i>Python Cookbook</i> , My translation of the reasons: Too many repeated codes, easy to cause errors, not looks good.</span>
<span class="comment-copy">Thanks, I learn a lot from your code.</span>
