<div class="post-text" itemprop="text">
<p>We are having a python script which automates the batch processing of time-series image data downloaded from the internet. The current script requires all data to be downloaded before execution. This consumes more time. We want to modify the script by writing a scheduler which will call the script whenever a single data is completely downloaded. How to find that a file has been downloaded completely using python? </p>
</div>
<div class="post-text" itemprop="text">
<p>If you download the file with Python, then you can just do the image processing operation after the file download operation finishes. An example using <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer">requests</a>:</p>
<pre><code>import requests
import mymodule # The module containing your custom image-processing function

for img in ("foo.png", "bar.png", "baz.png"):
    response = requests.get("http://www.example.com/" + img)
    image_bytes = response.content
    mymodule.process_image(image_bytes)
</code></pre>
<p>However, with the sequential approach above you will be spending a lot of time waiting for responses from the remote server. To make this faster, you can download and process multiple files at once using <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">aysncio</a> and <a href="https://aiohttp.readthedocs.io/en/stable/index.html" rel="nofollow noreferrer">aiohttp</a>. There's a good introduction to downloading files this way in Pawe≈Ç Miech's blog post <a href="https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html" rel="nofollow noreferrer">Making 1 million requests with python-aiohttp</a>. The code you need will look something like the example at the bottom of that blog post (the one with the semaphore).</p>
</div>
<span class="comment-copy">Welcome to Stackoverflow. Could you show us what you've done so far? Any specific problems/errors you've come across?</span>
<span class="comment-copy">The normal way to do this is to download the file with a temporary, sentinel extension, e.g. <code>image.png.download</code> and then rename to <code>image.png</code> when it is complete. That way you can identify downloads that are in progress, complete, or stalled.</span>
