<div class="post-text" itemprop="text">
<p>I'm experimenting with type annotations in Python. Most cases are pretty clear, except for those functions that take another function as parameter.</p>
<p>Consider the following example:</p>
<pre><code>from __future__ import annotations

def func_a(p:int) -&gt; int:
    return p*5

def func_b(func) -&gt; int: # How annotate this?
    return func(3)

if __name__ == "__main__":
    print(func_b(func_a))
</code></pre>
<p>The output simply prints <code>15</code>.</p>
<p>How should I annotate the <code>func</code> parameter in <code>func_b( )</code>?</p>
<p>Â <br/>
<b>ANSWER</b><br/>
Thank you @Alex for providing the answer. The <code>typing</code> module offers the <code>Callable</code> annotation (see: <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow noreferrer">python docs</a>). For my example, that gives:</p>
<pre><code>from __future__ import annotations
from typing import Callable

def func_a(p:int) -&gt; int:
    return p*5

def func_b(func: Callable[[int], int]) -&gt; int:
    return func(3)

if __name__ == "__main__":
    print(func_b(func_a))
</code></pre>
<p>As you can see, the <code>Callable</code> annotation gets also annotated itself, following this scheme:</p>
<pre><code>Callable[[Arg1Type, Arg2Type], ReturnType]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>typing</code> module for <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow noreferrer"><code>Callable</code></a> annotations.</p>
<p>The <code>Callable</code> annotation is supplied a list of argument types and a return type:</p>
<pre><code>from typing import Callable

def func_b(func: Callable[[int], int]) -&gt; int:
    return func(3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shouldn't it just be <code>function</code>?</p>
<pre><code>&gt;&gt;&gt; type(func_a)
function
</code></pre>
</div>
<span class="comment-copy"><code>from typing import Callable</code></span>
<span class="comment-copy">Is that the standard way to annotate "function objects"?</span>
<span class="comment-copy">Yes from the docs: Callable can be used for "Frameworks expecting callback functions of specific signatures"</span>
<span class="comment-copy">Thanks, I was just searching the docs. Came back to post exactly this.</span>
<span class="comment-copy">Thank you @Alex. I get it now: <code>Callable[[Arg1Type, Arg2Type, ... ], ReturnType]</code></span>
<span class="comment-copy">Maybe, I don't know. @Sebastian Loehner suggested to use <code>Callable</code>. You suggest <code>function</code>. Who is right?</span>
<span class="comment-copy">see Alex's answer: <a href="https://stackoverflow.com/a/53227734/4350517">stackoverflow.com/a/53227734/4350517</a></span>
