<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/8905864/url-encoding-in-python">URL encoding in python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I want to represent all characters in a string as in this 
<a href="https://www.degraeve.com/reference/urlencoding.php" rel="nofollow noreferrer">table</a>.</p>
<p>But when I do</p>
<pre><code>raw = 'æøå'
encoded = raw.encode('cp1252')
print(encoded)
</code></pre>
<p>I get</p>
<pre><code>&gt;&gt;&gt; b'\xe6\xf8\xe5'
</code></pre>
<p>What I want is </p>
<pre><code>&gt;&gt;&gt; %E6%F8%E5
</code></pre>
<p>as a string for use in a URL.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to "quote" your string using urllib tools.</p>
<pre><code>import urllib.parse

raw = 'æøå'
print(urllib.parse.quote(raw, encoding='cp1252'))
# returns "%E6%F8%E5"
</code></pre>
</div>
<span class="comment-copy">There's no such thing. 1252 is the Latin codepage. <i>URLs</i> though have their <i>own</i> encoding, unrelated to codepages. You are asking how to URL-encode that string.</span>
<span class="comment-copy">@PanagiotisKanavos: Latin-1 is a different standard. CP-1252 differs from that standard, don't equate the two. You are completely right about this not being CP1252 encoded output, of course.</span>
<span class="comment-copy">@MartijnPieters yes, I know but I'm tired of writing an entire article to describe encodings in comments for the Nth time. The OP is still asking the wrong thing, confusing character codepages for URL encoding</span>
<span class="comment-copy">@PanagiotisKanavos: absolutely. And <code>urllib.parse.quote()</code> takes care of encoding for you.</span>
<span class="comment-copy">You do not need to encode separately. <code>urlib.parse.quote()</code> takes an encoding argument directly.</span>
<span class="comment-copy">Use <code>urllib.parse.quote(raw, encoding='cp1252')</code>, skip the <code>raw.encode()</code> call altogether.</span>
<span class="comment-copy">@MartijnPieters Thanks for the information, I just discovered this. Answer updated</span>
<span class="comment-copy">Sometimes you do need to handle <code>bytes</code>, at which point I'd recommend you use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_from_bytes" rel="nofollow noreferrer"><code>urllib.parse.quote_from_bytes()</code></a>, to be explicit about what is being done. Also, the OP probably wants to use <code>quote_plus()</code>, not <code>quote()</code>, as the vast majority of these want the <a href="https://en.wikipedia.org/wiki/Percent-encoding#The_application/x-www-form-urlencoded_type" rel="nofollow noreferrer"><code>application/x-www-form-urlencoded</code> content type variant</a>.</span>
