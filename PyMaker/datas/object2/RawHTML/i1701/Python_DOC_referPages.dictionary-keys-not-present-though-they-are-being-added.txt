<div class="post-text" itemprop="text">
<p>This is my code :</p>
<pre><code>class member:

    def __init__(self, name):
        self.name = name

    def get_name(self, name):
        self.name = name

    def __str__(self):
        return self.name

class create_graph:

    def __init__(self):
        self.some_dict = dict()

    def add(self, name):
        if name is None:
            raise TypeError
        print(name not in self.some_dict)
        if name not in self.some_dict:
            self.some_dict[name] = []
        else:
            print(str(name) + "is already present")

    def link(self, p1, p2):
        if p1 in self.some_dict:
            self.some_dict[p1].append(p2)
        else:
            self.some_dict[p1] = [p2]

some_graph = create_graph()

list_person = ['abc', 'xyz', 'mno', 'pqr']

for person in list_person:
    some_graph.add(member(person))

print(len(some_graph.some_dict))

for i in range(len(list_person)-1):
    some_graph.link(i,i+1)

print(len(some_graph.some_dict))
</code></pre>
<p>I am not able to find the error in this code. 
When the add function is called, I get the True message indicating it is added. The first print statement prints that the number of keys are 4 but after adding the links, it says the keys are 7. 
I want to have just 4 even after adding the link.</p>
<p>Thanks for the help !</p>
</div>
<div class="post-text" itemprop="text">
<p>Print out the dictionary in question.</p>
<pre><code>print(some_graph.some_dict)
</code></pre>
<p>produces </p>
<pre><code>{&lt;__main__.member object at 0x7fe8326abe80&gt;: [], &lt;__main__.member object at 0x7fe8326abeb8&gt;: [], &lt;__main__.member object at 0x7fe8326abe48&gt;: [], &lt;__main__.member object at 0x7fe8326abef0&gt;: []}
</code></pre>
<p>The keys of this dictionary are instances of the class <code>member</code>, not the strings in the list <code>list_person</code>.</p>
<p>I you did:</p>
<pre><code>persons_in_graph_dict = {k.name for k in some_graph.some_dict}
for person in list_person:
    print(person)
    print(person in persons_in_graph_dict)
    print()
</code></pre>
<p>You would get:</p>
<pre><code>abc
True

xyz
True

mno
True

pqr
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can fix the problem by adding a <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a> method to your <code>CreateGraph</code> class that expects a <em>string</em> argument called <code>name</code>. How to do this and then use it shown in the code below.</p>
<p><strong>Note:</strong> I have changed all your class names to the CapitalizedWords-style  to conform to the PEP8 coding guidelines (in its <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">Naming Conventions</a> section).</p>
<pre><code>class Member:
    def __init__(self, name):
        self.name = name

    def get_name(self, name):
        self.name = name

    def __str__(self):
        return self.name


class CreateGraph:
    def __init__(self):
        self.some_dict = dict()

    def add(self, name):
        if name is None:
            raise TypeError

        if name not in self.some_dict:
            self.some_dict[name] = Member(name)
        else:
            print("{} is already present".format(name))

    def __contains__(self, name):  # &lt;-- METHOD ADDED.
        return name in self.some_dict


some_graph = CreateGraph()

list_person = ['abc', 'xyz', 'mno', 'pqr']

for person in list_person:
    some_graph.add(person)

print("checking these names in list_person:", list_person)
for person in list_person:
    if person in some_graph:
        print("Present")
    else:
        print("Not present")
</code></pre>
<p>Here's the output:</p>
<pre class="lang-none prettyprint-override"><code>checking these names in list_person: ['abc', 'xyz', 'mno', 'pqr']
Present
Present
Present
Present
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are storing instances as key. call <code>name()</code>to get the name
try testing like below</p>
<pre><code>for i in some_graph.some_dict:
    print ((i.name) in list_person)
</code></pre>
</div>
<span class="comment-copy">hint: try printing <code>some_graph.some_dict</code></span>
<span class="comment-copy">You are storing instances of class <code>member</code> in <code>some_dict</code>, but you are then trying to look up strings (names) in that dict. <code>member("bob")</code> is not the same as <code>"bob"</code>, and furthermore <code>member("bob") != member("bob")</code>; they will be different instances with the same name.</span>
<span class="comment-copy">@mad_ I tried testing that. It does give me the correct result. {pqr: [], xyz: [], abc: [], mno: []}. But, my error still remains.</span>
