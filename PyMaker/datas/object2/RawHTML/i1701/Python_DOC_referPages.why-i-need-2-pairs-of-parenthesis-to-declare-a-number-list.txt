<div class="post-text" itemprop="text">
<p>maybe seems dum but I know that if I want to declare a list I can do it this way:</p>
<pre><code>list1 = list("Hello")
</code></pre>
<p>But why I need 2 sets of parenthesis to declare it for numbers:</p>
<pre><code>list2 = list((2,3,4,5))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">docs state</a>:</p>
<pre><code>list()  Convert an iterable (tuple, string, set, dictionary) to a list.
</code></pre>
<p>The function <code>list</code> only takes a <strong>single</strong> iterable argument; <code>list(1,2,3,4)</code> would be a <code>TypeError</code>. Since a string is an iterable in python, it is a correct function call. In order to use your integers you need to convert them to some form of iterable. </p>
<p>By writing <code>list2 = list((2,3,4,5))</code> you convert the integers to a tuple, which is iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.7/library/functions.html#func-list" rel="nofollow noreferrer">list()</a> constructs a list from an Iterable. In your examples, a string is an iterable (a sequence of chars as people have pointed out), and a <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuple</a> is also an iterable (using the round brackets).</p>
<p>In your example you're passing a tuple to the <code>list()</code> function.</p>
<p>You can skip using the in-built <code>list()</code> function and create a list directly using square brackets:</p>
<pre><code>mylist = [1,2,3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the first case, you are calling list() on a str which implicitly can covert to a sequence of chars. If you look closely, for the ints, you are calling list() on a tuple of ints. </p>
<p>Not sure if you are exploring, but the most direct way to do this is list2 = [2,3,4,5] </p>
</div>
<span class="comment-copy">You are making as list from a tuple. You could just use: <code>[2,3,4,5]</code></span>
<span class="comment-copy">because "Hello" is already a list of characters. 2345 is an integer.</span>
<span class="comment-copy">You need 0 parentheses if you use brackets: <code>list3 = [1,2,3,4]</code></span>
<span class="comment-copy"><code>t= 2,3,4,5; list(t)</code> works though, which i know can be counter-intuative for some- the semantics to allow tuples based on commas alone, but not in certain situations where it leads to ambiguity</span>
<span class="comment-copy">The semantics don't just <i>allow</i> commas alone; the commas are what <i>define</i> the tuple. The parentheses are just there to disambiguate different uses of commas. <code>f(2,3,4)</code> is a function call with three arguments, while <code>f((2,3), 4)</code> is a call with a tuple argument and a second integer argument. <code>t = 2,3,4,5</code> and <code>t = (2,3,4,5)</code> are equivalent, because there's no confusion over what the commas on the RHS of the first assignment could mean.</span>
<span class="comment-copy">more accurately, without the extra <code>(...)</code> OP is passing <i>multiple</i> parameters to a function that takes a <i>single</i> iterable parameter.</span>
<span class="comment-copy">You can declare a list as <code>[1, 2, 3, 4]</code> or <code>list([1, 2, 3, 4])</code> but that is redundant.</span>
<span class="comment-copy">If you want to learn more about iterables you can read this <a href="https://wiki.python.org/moin/Iterator" rel="nofollow noreferrer">wiki.python.org/moin/Iterator</a></span>
<span class="comment-copy">The main point to understand is that <code>list</code> does not take a variable number of arguments, with each argument treated as a separate element for the new list.</span>
<span class="comment-copy">"since numbers are not iterable but strings are"-- not really relevant for this case, but would be relevant if they did <code>list(1)</code></span>
