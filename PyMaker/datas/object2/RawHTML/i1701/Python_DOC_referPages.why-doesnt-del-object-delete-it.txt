<div class="post-text" itemprop="text">
<p>The code below creates a "tee" object that tees stdout to a file as well as the terminal.</p>
<p>If do <code>del t</code> as below when I'm done tee-ing, the object doesn't get deleted and the <code>__del__()</code> member doesn't get called (so the tee-ing continues):</p>
<pre><code>t = tee("foo.txt")
print("bar")
del t
</code></pre>
<p>But if I call <code>__del__()</code> directly, things work fine:</p>
<pre><code>t = tee("foo.txt")
print("bar")
t.__del__()
</code></pre>
<p>Why doesn't the <code>del</code> work? What's the right way to do this?</p>
<pre><code>class tee():
    def __init__(self, filepath):
        self.old_stdout = sys.stdout
        self.old_stderr = sys.stderr
        self.name = filepath

        sys.stdout = self
        sys.stderr = self

    def write(self, text):
        self.old_stdout.write(text)
        with open(self.name, 'a',  encoding="utf-8") as f:
           f.write(text)

    def flush(self):
        pass

    def __del__(self):
        sys.stdout = self.old_stdout
        sys.stdout = self.old_stderr
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Note <code>del x</code> doesn’t directly call <code>x.__del__()</code> — the former decrements the reference count for x by one, and the latter is only called when x’s reference count reaches zero.
  <br/><sub>Taken from the <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer">data model</a> section of the Python 3 documentation.</sub></p>
</blockquote>
<p>You've referenced the class inside the constructor:</p>
<pre><code>sys.stdout = self
sys.stderr = self
</code></pre>
<p>The reference will remain and as a result the object will stay <em>“alive”</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you’re actually looking for is the <a href="https://docs.python.org/2.5/whatsnew/pep-343.html" rel="nofollow noreferrer">with-statement</a> that is used for a specific context. You open the file, do something with it and close it again.</p>
<pre><code>with tree(“foo.txt) as t:
    t.write(“bar”)
</code></pre>
<p>This will call the exit method in the end.</p>
<pre><code>class tee():
    def __init__(self, filepath):
        self.old_stdout = sys.stdout
        self.old_stderr = sys.stderr
        self.name = filepath

        sys.stdout = self
        sys.stderr = self

    def write(self, text):
        self.old_stdout.write(text)
        with open(self.name, 'a',  encoding="utf-8") as f:
           f.write(text)

    def flush(self):
        pass

    def __exit__(self):
        sys.stdout = self.old_stdout
        sys.stdout = self.old_stderr
</code></pre>
<p>Actually your class is doing the same thing with the file handler in the write method. </p>
<p><strong>For the delete method:</strong> As the others already mentioned, the delete statement will just decrement the reference counter. Once the number of references has reached zero, the object will be garbage collected and the delete method will be invoked. But this won’t happen in your case since the object is still referenced by the standard output.</p>
</div>
<span class="comment-copy"><code>del</code> only unbinds the variable name, it does not guarantee that the object gets destroyed immediately, as stated in the docs: <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__del__</a></span>
<span class="comment-copy">But in the code above there's only one reference to 't'. So the refcount should reach zero at 'del t'. No?</span>
<span class="comment-copy">@nerdfever.com I assume GC takes care of calling <code>x.__del__</code> once there are no references exist to it.</span>
<span class="comment-copy">@nerdfever.com the gc doesn't run after every line or check every variable all the time, that would be too "expensive". It just does its thing every now and then, and has a hierarchy of variables to check reference counts for.</span>
<span class="comment-copy">@nerdfever.com: You seem to have forgotten about the two references you stored in <code>sys.stdout</code> and <code>sys.stderr</code>.</span>
<span class="comment-copy">@user2357112 Make than an answer and I'll accept it. (Thanks.)</span>
