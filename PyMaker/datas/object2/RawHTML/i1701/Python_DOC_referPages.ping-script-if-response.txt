<div class="post-text" itemprop="text">
<p>I am just trying to put together a simple server up/down script as I have just started to learn python.</p>
<p>Below is the script... but I can't get it to output the Server Down section of code. the <code>if response == 0</code> I'm guessing is picking up the "Destination Unreachable" response and is making a false positive.</p>
<p>what can I do to get around this?</p>
<pre><code># Server up/down Script

import os

hostname1 = input (" Please Enter IP Address: ")

response = os.system("echo ping -a -c 1 " + hostname1)

#and then check the response...
if response == 0: # This will check the host repeatedly
    print (hostname1, '\033[1;32m [ **SERVER ALIVE** ] \033[1;m')
    # As long as the server is up it will print the UP response in green text
else:
    print(hostname1, '[ **SERVER DOWN** ]')
print( 30 * "-")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>response = os.system("echo ping -a -c 1 " + hostname1)
</code></pre>
<p>The system command you are executing is just an <a href="http://www.linfo.org/echo.html" rel="nofollow noreferrer"><code>echo</code></a>, which will just print "<code>ping -a -c 1 &lt;hostname&gt;</code>" to stdout, and then return 0. It does not really do any pinging. You can test it by running the system commands directly on a terminal and checking the return value:</p>
<pre><code>$ echo ping -a -c 1 8.8.8.8 
ping -a -c 1 8.8.8.8
$ echo $?  # returns 0
$ echo ping -a -c 1 &lt;some.invalid.ip&gt; 
&lt;some.invalid.ip&gt;
$ echo $?  # still returns 0
</code></pre>
<p>You should remove <code>echo</code> and just do:</p>
<pre><code>response = os.system("ping -a -c 1 " + hostname1)
</code></pre>
<p>Which should return the correct result:</p>
<pre><code># VALID IP

&gt;&gt;&gt; response = os.system("ping -a -c 1 8.8.8.8")
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=119 time=5.80 ms

--- 8.8.8.8 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 5.803/5.803/5.803/0.000 ms
&gt;&gt;&gt; print(response)
0

# INVALID IP

&gt;&gt;&gt; response = os.system("ping -a -c 1 5.5.5.5")
PING 5.5.5.5 (5.5.5.5) 56(84) bytes of data.

--- 5.5.5.5 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

&gt;&gt;&gt; print(response)
256
</code></pre>
<p>For system calls, I recommend to use the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> package instead, which includes <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> function that can print the command output and then return an object containing the command's return code.</p>
<pre><code># VALID IP

&gt;&gt;&gt; response = subprocess.run(["ping", "-c", "1", "8.8.8.8"])
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=119 time=5.19 ms

--- 8.8.8.8 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 5.194/5.194/5.194/0.000 ms
&gt;&gt;&gt; response.returncode
0

# INVALID IP

&gt;&gt;&gt; response = subprocess.run(["ping", "-c", "1", "5.5.5.5"])
PING 5.5.5.5 (5.5.5.5) 56(84) bytes of data.

--- 5.5.5.5 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

&gt;&gt;&gt; response.returncode
1
</code></pre>
<p>If you wanted to hide the output of the <code>ping</code> command, you can pass <code>subprocess.PIPE</code> to <code>stdout</code> of <code>subprocess.run</code>:</p>
<pre><code>&gt;&gt;&gt; response = subprocess.run(["ping", "-c", "1", "5.5.5.5"], stdout=subprocess.PIPE)
&gt;&gt;&gt; response.returncode
1
</code></pre>
<p>The recommendation to use <code>subprocess</code> is noted in the <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer"><code>os.system</code> doc</a>:</p>
<blockquote>
<p>The <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">subprocess</a> module provides more powerful facilities for spawning
  new processes and retrieving their results; using that module is
  preferable to using this function. See the <a href="https://docs.python.org/3/library/subprocess.html#subprocess-replacements" rel="nofollow noreferrer">Replacing Older Functions
  with the subprocess Module</a> section in the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">subprocess</a> documentation for
  some helpful recipes</p>
</blockquote>
</div>
<span class="comment-copy">You're running <code>echo ping ...</code> in the shell, rather than <code>ping ...</code>, so the command is just going to print <code>"ping ..."</code> and exit with code 0.</span>
<span class="comment-copy">Also as a general note on best-practices, one should use the techniques <a href="https://stackoverflow.com/questions/35817/how-to-escape-os-system-calls">here</a> to ensure a script isn't vulnerable to injection (in case someone enters <code>;rm -rf $HOME</code> as the hostname).</span>
<span class="comment-copy">Thank you for the help... ill pull echo out, I was just trying to get it to show the Print statement instead of all the ping replies</span>
<span class="comment-copy">Thank you for the help.... I knew it would be something simple I'd done wrong</span>
<span class="comment-copy">@AlanWolfe It happens :) I saw your latest comment ("<i>I was just trying to get it to show the Print statement instead of all the ping replies</i>"), and I added info to my answer on how to make <code>subprocess.run</code> quiet.</span>
<span class="comment-copy">Magic.... :) Thank you, I'm a little busy today, but ill give it a try later</span>
