<div class="post-text" itemprop="text">
<p>I need to find mean of an array which is like: <code>[('a', 5), ('b', 2), ('a', 4), ('b', 6)]</code></p>
<p>Result should be like; <code>[('a', 4.5), ('b', 4)]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Raw solution without additional libraries could look like this:</p>
<pre><code>def mean(l):
    result = {}
    for key, value in l:
        if key not in result:
            result[key] = []
        result[key].append(value)

    return [(k, sum(v)/len(v)) for k, v in result.items()]

lst = [('a', 5), ('b', 2), ('a', 4), ('b', 6)]
m = mean(lst)

print(m)
# [('a', 4.5), ('b', 4.0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can put all your tuples in a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a>, using the first value to group them into a list and then calculate the mean:</p>
<pre><code>from collections import defaultdict

d = defaultdict(list)

for key,value in [('a', 5), ('b', 2), ('a', 4), ('b', 6)]:
    d[key].append(value)

mean = []

for k,values in d.items():
    # mean.append((k,sum(values)/float(len(values)))) #python 2
    mean.append((k,sum(values)/len(values)))

print(mean) # [('a', 4.5), ('b', 4.0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can use pandas for this:</p>
<pre><code>import pandas as pd

pd.DataFrame(data).groupby(0)[1].mean().to_dict()
</code></pre>
<p>this will give us:</p>
<pre><code>&gt;&gt;&gt; pd.DataFrame(data).groupby(0)[1].mean().to_dict()
{'a': 4.5, 'b': 4.0}
</code></pre>
<p>or we can convert this to a list of 2-tuples with:</p>
<pre><code>list(pd.DataFrame(data).groupby(0)[1].mean().to_dict().items())
</code></pre>
<p>which gives:</p>
<pre><code>&gt;&gt;&gt; list(pd.DataFrame(data).groupby(0)[1].mean().to_dict().items())
[('a', 4.5), ('b', 4.0)]
</code></pre>
<p>The above is thus more a "<em>declarative</em>" approach: we specify <em>what</em> we want, not much <em>how</em> we want to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can collect the numbers with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a>, then apply <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean()</code></a> on each group of numbers:</p>
<pre><code>from statistics import mean
from collections import defaultdict

lst = [('a', 5), ('b', 2), ('a', 4), ('b', 6)]

d = defaultdict(list)
for k, v in lst:
    d[k].append(v)

means = [(k, mean(v)) for k, v in d.items()]

print(means)
# [('a', 4.5), ('b', 4)]
</code></pre>
<p>You can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> to group the tuples:</p>
<pre><code>from statistics import mean
from itertools import groupby
from operator import itemgetter

lst = [("a", 5), ("b", 2), ("a", 4), ("b", 6)]

means = [
    (k, mean(map(itemgetter(1), g)))
    for k, g in groupby(sorted(lst, key=itemgetter(0)), key=itemgetter(0))
]

print(means)
[('a', 4.5), ('b', 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you wish, you can also try the below reusable code (without using any external libraries).</p>
<pre><code>&gt;&gt;&gt; def get_mean(l):
...     d = {}
...     for k, v in l:
...         if k in d:
...             d[k].append(v)
...         else:
...             d[k] = [v]
...     result = [(k, sum(d[k])/len(d[k])) for k in d]
...     return result
...
&gt;&gt;&gt; l = [('a', 5), ('b', 2), ('a', 4), ('b', 6)]
&gt;&gt;&gt; new_l = get_mean(l)
&gt;&gt;&gt; new_l
[('a', 4.5), ('b', 4.0)]
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Hi thanks for the answer I'm giving it a try but I wonder if <b>d = deafultdict(list)</b> shouldn't be <b>d = deafultdict(lst)</b> ?</span>
<span class="comment-copy">@bukowski: no, <code>defaultdict</code> takes a callable that constructs elements in case it is missing. We do not want to insert the data by default.</span>
<span class="comment-copy">Grouping with <code>setdefault()</code> would be cleaner IMO. You avoid the if/else that way.</span>
