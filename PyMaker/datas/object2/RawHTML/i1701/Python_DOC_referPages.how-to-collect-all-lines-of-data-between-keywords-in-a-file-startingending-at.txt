<div class="post-text" itemprop="text">
<p>I am trying to collect specific information from very large log files but cannot figure out how to get the behavior I need. </p>
<p>For reference, an example log is sort of like this:</p>
<blockquote>
<pre><code>garbage I don't need - garbage I don't need
timestamp - date - server info - 'keyword 1' - data
more data more data more data more data
more data more data more data more data
more data more data 'keyword 2' - last bit of data
garbage I don't need - garbage I don't need
</code></pre>
</blockquote>
<p>What I need is to find 'keyword 1', grab the whole line keyword 1 is on (back to timestamp) and all subsequent lines until (and including) the whole line that 'keyword 2' is on (through the last bit of data). </p>
<p>So far I have tried a few things. I cannot get decent results with re methods (findall, match, search etc.); I cannot figure out how to grab the data before the match (even with a look behind) but more importantly, I cannot figure out how to have the capture stop at a phrase and not just a single character.</p>
<pre><code>for match in re.findall('keyword1[keyword2]+|', showall.read()):
</code></pre>
<p>I also tried something like this:</p>
<pre><code>start_capture = False
for current_line in fileName:
    if 'keyword1' in current_line:
        start_capture = True
    if start_capture:
        new_list.append(current_line)
    if 'keyword2' in current_line:
        return(new_list)
</code></pre>
<p>No matter what I tried, this returned an empty list</p>
<p>Finally,I tried something like this:</p>
<pre><code>def takewhile_plus_next(predicate, xs):
for x in xs:
    if not predicate(x):
        break
    yield x
yield x
with lastdb as f:
    lines = map(str.rstrip, f)
    skipped = dropwhile(lambda line: 'Warning: fatal assert' not in line, lines)
    lines_to_keep = takewhile_plus_next(lambda line: 'uptime:' not in line, skipped)
</code></pre>
<p>This last one took everything from keyword 1 to the EOF which includes almost 100,000 lines of garbage data.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex if you specify <a href="https://docs.python.org/3/library/re.html#re.DOTALL" rel="nofollow noreferrer"><code>re.dotall</code></a> and use lazy anythings .*? to match start and end:</p>
<pre><code>import re

regex = r"\n.*?(keyword 1).*?(keyword 2).*?$"

test_str = ("garbage I don't need - garbage I don't need\n"
    "timestamp - date - server info - 'keyword 1' - data\n"
    "more data more data more data more data\n"
    "more data more data more data more data\n"
    "more data more data 'keyword 2' - last bit of data\n"
    "garbage I don't need - garbage I don't need")

matches = re.finditer(regex, test_str, re.DOTALL | re.MULTILINE)

for matchNum, match in enumerate(matches):
    matchNum = matchNum + 1

    print (match.group()) # your match is the whole group
</code></pre>
<p>Output:</p>
<pre><code>timestamp - date - server info - 'keyword 1' - data 
more data more data more data more data
more data more data more data more data
more data more data 'keyword 2' - last bit of data
</code></pre>
<p>You might need to <code>strip('\n')</code> from it ...</p>
<p>You can view it here: <a href="https://regex101.com/r/HWIALZ/1" rel="nofollow noreferrer">https://regex101.com/r/HWIALZ/1</a> - it also holds the explanation of the patter. The short of it:</p>
<pre><code>\n        newline 
   .*?    as few as possible anythings
   (keyword 1)   literal text - the () are not needed only if you want the group
   .*?    as few as possible anythings
   (keyword 2)   literal text - again () are not needed 
   .*?    as few as possible anythings
$         end of line
</code></pre>
<p>I included the () for clarity - you do not evaluate groups, you you remove them.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following is fast for any size of file. It extracts from a 250M log file of nearly 2 million lines in 3 seconds. The extracted portion was at the end of the file.</p>
<p>I would not recommend using <code>list</code>, regexes or other in-memory techniques if there is a chance your files won't fit in available memory.</p>
<p>Test text file <code>startstop_text</code>:</p>
<pre><code>line 1 this should not appear in output
line 2 keyword1
line 3 appears in output
line 4 keyword2
line 5 this should not appear in output
</code></pre>
<p>Code:</p>
<pre><code>from itertools import dropwhile


def keepuntil(contains_end_keyword, lines):
    for line in lines:
        yield line
        if contains_end_keyword(line):
            break


with open('startstop_text', 'r') as f:
    from_start_line = dropwhile(lambda line: 'keyword1' not in line, f)
    extracted = keepuntil(lambda line: 'keyword2' in line, from_start_line)
    for line in extracted:
        print(line.rstrip())


&gt;&gt;&gt; python startstop.py
line 2 keyword1
line 3 appears in output
line 4 keyword2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>None of the other responses worked but I was able to figure it out using regex. </p>
<pre><code>for match in re.findall(".*keyword1[\s\S]*?keyword2:[\s\S]*?keyword3.*", log_file.read()):
</code></pre>
</div>
<span class="comment-copy">Look, you tried checking if line contains <code>keyword1</code>, but your data has <code>keyword 1</code>. Try <a href="https://ideone.com/H06qsD" rel="nofollow noreferrer">this parsing code</a>.</span>
<span class="comment-copy">@WiktorStribi≈ºew that isn't my literal code, in my actual code I have definite matching terms</span>
<span class="comment-copy">So, what is the problem? If these are regexps, use <code>if re.search(rx, line)</code> instead of <code>if 'keyword' in line</code>.</span>
<span class="comment-copy">First example doesn't initialise <code>new_list</code> as a list. Check indentation in the second example.</span>
<span class="comment-copy">@Nick these are just excerpts of the relevant code. In my real code new_list is initialized and remains empty after the block of code runs. the indentation of the second is a matter of text formatting. I didn't realize it got messed up like that on the copy/paste. Again, it is proper in my real code. I appreciate you trying to give feedback though.</span>
<span class="comment-copy">I am getting this error:</span>
<span class="comment-copy">sorry - I messed up the last edit  -I substituted filename for test_str    matches = re.finditer(regex, filename, re.DOTALL | re.MULTILINE)   File "C:\Program Files\Python36\lib\re.py", line 229, in finditer     return _compile(pattern, flags).finditer(string) TypeError: expected string or bytes-like object</span>
<span class="comment-copy">@Toenailsmcgee using <code>with open(filename,"r") as f: re.finditer(regex,f.read(), .. flags ...)</code> should do it, unless your files are so big that they don't fit into memory</span>
<span class="comment-copy">@Patrick Artner why <code>\n</code> not <code>^</code> at start of regex?</span>
<span class="comment-copy">@Nick does not work - try it. it would still match but from the start of the first line instead of from the closest \n</span>
<span class="comment-copy">Hey @Toenailsmcgee the above solution is not complete code. That makes it less helpful than it could be.</span>
<span class="comment-copy">My solution works fine for me in Python 2.7 and 3.6, on small and large files, with the extracted lines in initial, final or middle position. If there's a problem with it please let me know what error or what faulty output you're getting. Did you want to find multiple instances of <code>keyword1</code> and <code>keyword2</code> and extract all? If so, my solution doesn't work-- but that isn't what you asked for.</span>
