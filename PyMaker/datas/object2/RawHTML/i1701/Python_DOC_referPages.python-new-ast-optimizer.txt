<div class="post-text" itemprop="text">
<p>from python 3.7 <a href="https://docs.python.org/3/whatsnew/3.7.html#optimizations" rel="nofollow noreferrer">what's new</a></p>
<blockquote>
<p>Constant folding has been moved from the peephole optimizer to the new AST optimizer, which is able perform optimizations more consistently</p>
</blockquote>
<p>what optimizations is this new AST optimizer able to perform and how is it different from the peephole optimizer ?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you read the associated <a href="https://bugs.python.org/issue11549" rel="nofollow noreferrer">bug</a> <a href="https://bugs.python.org/issue29469" rel="nofollow noreferrer">reports</a>, they contain most of the details. Most of it is pretty dry stuff that doesn't really matter to most code, which is why they don't include the details in "What's New".</p>
<p>Examples where it matters are usually strange cases that are rarely encountered, but that the peephole optimizer (which couldn't do higher level evaluation, just simple byte code rewrites in place) couldn't handle, e.g. on Python 3.6:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('if True: pass')  # Recognizes simple case and omits whole block
  1           0 LOAD_CONST               0 (None)
              2 RETURN_VALUE
&gt;&gt;&gt; dis.dis('if True and 1: pass')  # Can't recognize more complex case
  1           0 LOAD_CONST               0 (True)
              2 POP_JUMP_IF_FALSE        8
              4 LOAD_CONST               1 (1)
              6 POP_JUMP_IF_FALSE        8
        &gt;&gt;    8 LOAD_CONST               2 (None)
             10 RETURN_VALUE
</code></pre>
<p>whereas on 3.7:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('if True: pass')  # Recognizes simple case and omits whole block
  1           0 LOAD_CONST               0 (None)
              2 RETURN_VALUE
&gt;&gt;&gt; dis.dis('if True and 1: pass')  # Handles more complex case too
  1           0 LOAD_CONST               0 (None)
              2 RETURN_VALUE
</code></pre>
</div>
<span class="comment-copy">well that's not interesting, can/will it do more optimizations such as function's inlining or loop unrolling ?, function inlining will be a major addition.</span>
<span class="comment-copy">@AmjadHD: Nope. CPython does not and will not (in the foreseeable future) be doing any aggressive optimizations of that sort. Like I said, there is a reason this didn't get top billing in the new release; it's basically just ensuring the really basic optimizations it applied are applied more consistently.</span>
