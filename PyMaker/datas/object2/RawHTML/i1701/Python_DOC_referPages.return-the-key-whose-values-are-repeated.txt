<div class="post-text" itemprop="text">
<p>I have dictionary whose values of the keys are lists. each list may contain some values repeated more than once like this </p>
<pre><code>{'VSS': ['A2', 'A3', 'A1'], 'X_P1_1': ['A2', 'A1'], 'X_P2': ['A3', 'A2'], 'X_P1_3': ['A2', 'A1'], 'VDD': ['A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'B', 'A3'], 'X': ['B', 'A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'B', 'A1']}
</code></pre>
<p>I want to do loop that takes the keys whose values have frequencies more than 1 
for example: </p>
<pre><code>VDD: ['A3':8]
X : ['A1':8, 'B':2]
</code></pre>
<p>how this can be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

# count values in lists, only including counts greater than 1
c = {k: {val: count for val, count in Counter(v).items() if count &gt; 1} \
     for k, v in d.items()}

# isolate only keys where Counter value is non-empty
res = {k: v for k, v in c.items() if v}

{'VDD': {'A3': 8},
 'X': {'B': 2, 'A1': 8}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a>:</p>
<pre><code>from collections import Counter

data = {'VSS': ['A2', 'A3', 'A1'], 'X_P1_1': ['A2', 'A1'], 'X_P2': ['A3', 'A2'], 'X_P1_3': ['A2', 'A1'], 'VDD': ['A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'B', 'A3'], 'X': ['B', 'A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'B', 'A1']}


result = {key : { e: count for e, count in Counter(values).items() if count &gt; 1}  for key, values in data.items() if any(value &gt; 1 for value in Counter(values).values())}

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'VDD': {'A3': 8}, 'X': {'B': 2, 'A1': 8}}
</code></pre>
<p>Or if you prefer the values as a list of tuples:</p>
<pre><code>from collections import Counter

data = {'VSS': ['A2', 'A3', 'A1'], 'X_P1_1': ['A2', 'A1'], 'X_P2': ['A3', 'A2'], 'X_P1_3': ['A2', 'A1'],
        'VDD': ['A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'B', 'A3'],
        'X': ['B', 'A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'B', 'A1']}

result = {key: [(element, count) for element, count in counts.items() if count &gt; 1] for key, counts in map(lambda x: (x[0], Counter(x[1])), data.items()) if
          any(count &gt; 1 for count in counts.values())}
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'VDD': [('A3', 8)], 'X': [('A1', 8), ('B', 2)]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first step is to reverse the mapping.</p>
<pre><code>valuekeydict = {}
for k, vs in orig_dict.items():
    for v in vs:
        valuekeydict.setdefault(v, []).append(v)
</code></pre>
<p>Then grab a set of all values where len &gt; 1</p>
<pre><code>result = {v for vs in valuekeydict.values() for v in vs if len(vs) &gt; 1}
</code></pre>
</div>
<span class="comment-copy">would you accept pandas?</span>
<span class="comment-copy">@W-B what is pandas?</span>
<span class="comment-copy">Line continuation isn't needed inside a parenthesised expression ;-)</span>
<span class="comment-copy">@coldspeed, Yep I know :). But I find it more readable.. I can see myself seeing <code>}</code> at the end of one line and thinking the comprehension ends there!</span>
