<div class="post-text" itemprop="text">
<p>I have a function defined in class</p>
<pre><code>class X:

    def __init__(self, logger, tableDataLoader, dataCleanser, timeSeriesFunctions):
        self.logger = logger
        self.tableDataLoader = tableDataLoader
        self.dataCleanser = dataCleanser
        self.timeSeriesFunctions = timeSeriesFunctions

    def preProcess(self, inputLocForTrain, inputLocForTest, outputLoc, region, gl):

        # Do Something
</code></pre>
<p>I am trying to call this function preProcess through a multiprocessing class which is defined like this</p>
<pre><code>class ProcessManager:

    def __init__(self, spark, logger):
        self.spark = spark
        self.logger = logger

    def applyMultiProcessExecution(self, func_arguments, targetFunction, iterableList):

        self.logger.info("Function Arguments : {}".format(func_arguments))
        jobs = []
        for x in iterableList:
            try:
                p = Process(target=targetFunction, args=(x,), kwargs=func_arguments)
                jobs.append(p)
                p.start()
            except:
                raise RuntimeError("Unable to create process for GL : {}".format(x))

        for job in jobs:
            job.join()
</code></pre>
<p>Now I am calling my ProcessManager like this </p>
<pre><code>processManager = ProcessManager(spark=spark, logger=logger)
dataFetcherFactory = DataFetcherFactory(logger)
dataFetcher = dataFetcherFactory.getDataFetcher(pipelineType=pipelineType)
dataCleanser = DataCleanser(logger)
timeSeriesFunctions = TimeSeriesFunctions(logger)
tableDataLoader = TableDataLoader(logger=logger, dataFetcher=dataFetcher, dataCleanser=dataCleanser,
                         timeSeriesFunctions=timeSeriesFunctions)
preProcessDataForPCAModel = X(logger=logger,
                                                          tableDataLoader=tableDataLoader,
                                                          dataCleanser=dataCleanser,
                                                          timeSeriesFunctions=timeSeriesFunctions)
arguments = {FeatureConstants.INPUT_LOCATION_FOR_TRAIN: inputLocForTrain,
                 FeatureConstants.INPUT_LOCATION_FOR_TEST: inputLocForTest,
                 FeatureConstants.OUTPUT_LOCATION: outputLoc,
                 REGION: region}

processManager.applyMultiProcessExecution(func_arguments=arguments,
                              targetFunction=preProcessDataForPCAModel.preProcess,
                              iterableList=[504])
</code></pre>
<p>This returns me error : 
Process Process-1:</p>
<pre><code>Traceback (most recent call last):
  File "/usr/lib64/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/usr/lib64/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
TypeError: preProcess() got multiple values for keyword argument 'inputLocForTrain'
</code></pre>
<p>I went through several stackoverflow posts where people suggest that it is due to self parameter present as a part of class. I am unable to understand how can i resolve my problem, since I need my constructor arguments present as a part of self in order to do my computation.</p>
<p>Can anyone please let me know how can i resolve this ? </p>
</div>
<div class="post-text" itemprop="text">
<p>try change:</p>
<pre><code>def preProcess(self, inputLocForTrain, inputLocForTest, outputLoc, region, gl):
</code></pre>
<p>to:</p>
<pre><code>def preProcess(self, gl, inputLocForTrain, inputLocForTest, outputLoc, region):
</code></pre>
<p><a href="https://docs.python.org/3/glossary.html#term-argument" rel="nofollow noreferrer">positional argument should appear at the beginning</a>.</p>
</div>
<span class="comment-copy">Same error, I changed  the way you suggested</span>
<span class="comment-copy">@WhiteShadows you could use <code>def preProcess(self, *args, **kwargs): print(args, kwargs)</code> to see actual arguments.</span>
