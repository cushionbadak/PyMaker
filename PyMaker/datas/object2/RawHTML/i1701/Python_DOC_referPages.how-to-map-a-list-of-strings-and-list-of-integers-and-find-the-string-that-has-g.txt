<div class="post-text" itemprop="text">
<p>I have been troubles by this. I have two lists</p>
<pre><code>lista = ["a", "b", "c", "d"]
listb = [80, 90, 70, 60]
</code></pre>
<p>I want to map it so 
"a" has a value of 80
"b" has a value of 90
"c" has a value of 70 and
"d" has a value of 60
Then, I want to print the string that has the largest value and the second largest value.</p>
<p>Is there any way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<h3><code>max</code> for highest value only</h3>
<p>For your result, you don't <em>need</em> an explicit mapping, e.g. via a dictionary. You can calculate the <em>index</em> of the highest value and then apply this to your key list:</p>
<pre><code>lista = ["a", "b", "c", "d"]
listb = [80, 90, 70, 60]

# a couple of alternatives to extract index with maximum value
idx = max(range(len(listb)), key=lambda x: listb[x])  # 1
idx, _ = max(enumerate(listb), key=lambda x: x[1])    # 1

maxkey = lista[idx]  # 'b'
</code></pre>
<h3><code>heapq</code> for highest <em>n</em> values</h3>
<p>If you want to the highest <em>n</em> values, a full sort is not necessary. You can use <code>heapq.nlargest</code>:</p>
<pre><code>from heapq import nlargest
from operator import itemgetter

n = 2

# a couple of alternatives to extract index with n highest values
idx = nlargest(n, range(len(listb)), key=lambda x: listb[x])      # [1, 0]
idx, _ = zip(*nlargest(n, enumerate(listb), key=lambda x: x[1]))  # (1, 0)

maxkeys = itemgetter(*idx)(lista)  # ('b', 'a')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like</p>
<pre><code>print(lista[listb.index(max(listb))])
</code></pre>
<p>It finds the maximum numbers index of <code>listb</code>, then gets the item of that same index in <code>lista</code>.</p>
<p>This should work, however I recommend using python dicts in the future for this kind of thing.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>keys = ['a', 'b', 'c', 'd']
values = [80, 90, 70, 60]
dictionary = dict(zip(keys, values))
print(dictionary)
{'a': 80, 'b': 90, 'c': 70, 'd': 60}
</code></pre>
<p>I guess you could try using operator.itemgetter:</p>
<pre><code>import operator
max(dictionary.iteritems(), key=operator.itemgetter(1))[0]
</code></pre>
<p>Tell me if this worked</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>keys = ['a', 'b', 'c', 'd']
values = [80, 90, 70, 60]
print keys[values.index(max(values))]
</code></pre>
</div>
<span class="comment-copy">You asked for the largest and the second largest value but you accepted an answer that gives you <i>only</i> the largest value.   If this is your intention, maximum respect.  Otherwise, there are answers that address <i>exactly</i> your question.</span>
<span class="comment-copy">@gboffi, The confusion for my answer arose (partly) because of the very specific question in the title. I have updated (via <code>heapq</code>) to address top <i>n</i> answers (similar to yours but using <code>itemgetter</code>).</span>
<span class="comment-copy">@jpp My answer is now useless â†’ remove.</span>
<span class="comment-copy">Thanks but I want to know what is enumerate and how to use lambda. It ran perfectly.</span>
<span class="comment-copy">@Ragent, See <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> and <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer"><code>lambda</code></a>.</span>
<span class="comment-copy">To note, you're iterating <code>listb</code> twice in this solution, which isn't strictly necessary. You can extract the index while you look for the <code>max</code> via a single iteration, e.g. via <code>range</code> or <code>enumerate</code>.</span>
<span class="comment-copy">A full sort is will be inefficient here, especially for large inputs.</span>
<span class="comment-copy">you are correct, after thinking it through I changed my answer to a more efficient solution</span>
<span class="comment-copy">which is exactly the same solution as @Qwerty proposed (I didn't see ir before editing my answer, sorry)</span>
