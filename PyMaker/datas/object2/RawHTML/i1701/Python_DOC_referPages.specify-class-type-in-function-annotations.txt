<div class="post-text" itemprop="text">
<p>So I have a function that takes a class as a parameter (not a class instance!).</p>
<p>How can I specify this in the function annotation</p>
<p>What I mean is:</p>
<pre><code>def add(a: int, b: int):
</code></pre>
<p>But I can't do this:</p>
<pre><code>def my_func(cls: class):
</code></pre>
<p>Since class is a reserved word for class definition. How can I solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>cls: type</code>.</p>
<p>Just like every integer is an instance of <code>int</code>, every class is an instance of <code>type</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class Foo: pass
&gt;&gt;&gt; 
&gt;&gt;&gt; isinstance(Foo, type)
&gt;&gt;&gt; True
&gt;&gt;&gt; isinstance(Foo(), type)
&gt;&gt;&gt; False
</code></pre>
<p>You can also use <code>Type</code> from the <code>typing</code> module, which, as per the docs, is</p>
<blockquote>
<p>A special construct usable to annotate class objects.</p>
</blockquote>
<p>Using <code>typing.Type</code> is more flexible than <code>cls:type</code>.</p>
<p>For example, if you wanted to hint that the argument can be any class object, you simply use <code>cls:Type</code>. </p>
<p>If the argument should be any class object that is a subclass of the class <code>Foo</code> (or <code>Foo</code> itself), you can write <code>cls: Type[Foo]</code>.</p>
<p><a href="https://docs.python.org/3/library/typing.html#typing.Type" rel="nofollow noreferrer">Read the docs for more info</a>.</p>
<p>Responding to the comments:</p>
<blockquote>
<p>it's like in your example. Class object is an instance of type, but class instance isn't. So that's why it complains: going <code>func(Person)</code> is alright but <code>func(Person('Steve', 22))</code> is not.</p>
</blockquote>
<p>In the second case, you are doing what you explicitly said you don't want to do: pass an <em>instance</em> of <code>Person</code>, not the class <code>Person</code>. So your IDE rightfully complains if you annotated <code>type</code> or <code>Type</code>.</p>
</div>
<span class="comment-copy">well I've thought of it, I just don't like the fact that PyCharm says 'expected type 'type' got 'class' instead</span>
<span class="comment-copy">@Desiigner does it complain with <code>from typing import Type</code> and then <code>cls:Type</code>?</span>
<span class="comment-copy">If you're going to annotate as a type of <code>type</code> though - you might as well not bother... <code>int</code>/<code>list</code>/<code>dict</code> are all true for <code>isinstance(obj, type)</code>...</span>
<span class="comment-copy">@JonClements right, but not <i>instances</i> of <code>int</code>/<code>list</code>/<code>dict</code> (as you know). I think OP just wants to make sure that the argument is a class. <code>isinstance(int(), type)</code> -&gt; <code>False</code>.</span>
<span class="comment-copy">@timgeb I guess my whole idea is weird. It's fine if I say my_function(Foo) but then I'm not able to set any attributes to this class because it becomes my_function(Foo(attrs)). Though your answer is the right one.</span>
