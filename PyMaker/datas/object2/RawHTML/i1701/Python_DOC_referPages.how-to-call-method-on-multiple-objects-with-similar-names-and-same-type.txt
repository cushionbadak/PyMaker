<div class="post-text" itemprop="text">
<p>How might I go about simplifying this code, preferably putting it into a loop or one line?</p>
<pre><code>object1.callMethod()  
object2.callMethod()  
object3.callMethod()  

difObject1.callDifMethod()  
difObject2.callDifMethod()  
difObject3.callDifMethod()  
</code></pre>
<p>I know that I can put the objects in a list and iterate through that, however, that would still require two separate loops and two separate lists. Is there any way that I can make a singular list of [1,2,3] and use that to distinguish between the three different objects of each type, since the numbers are in the object names as well?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>getattr(object, method_name)()
</code></pre>
<p>If all of the method and object names are generally semantic, you can use <code>getattr</code> to reference the method based on a string variable, and then call it with ().</p>
<pre><code>objects = [object1, object2, object3]
for object in objects:
    getattr(object, method_name)()
</code></pre>
<p>If you want to run the objects/method in parallel, use <code>zip</code>.</p>
<pre><code>objects = [object1, object2, object3]
methods = ['method1name', 'method2name', 'method3name']
for object, method in zip(objects, methods):
    getattr(object, method)()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a dictionary approach:</p>
<pre><code>methods = {cls1.method1: [cls1_obj1, cls1_obj2, cls1_obj3],
           cls1.method2: [cls1_obj4, cls1_obj5, cls1_obj6],
           cls2.method1: [cls2_obj1, cls2_obj2}

for method, objs in methods.items():
    for obj in objs:
        method(obj)
</code></pre>
<p>This assumes you are using an instance method though.  For a static/class method you'll need to adjust the object being passed for the method.</p>
<p>I'm not sure there's anything elegant that doesn't involve predefining multiples (or combinations) of <code>lists</code> and <code>dicts</code> and loop over it, since you would need to be explicit in which object runs which methods, a definition is required either way.</p>
<hr/>
<p>Ideally, if you have multiple similar objects of the same class, you might opt to instantiate them in a list from the get go:</p>
<pre><code># Instead of this
object1 = Foo(1)
object2 = Foo(2)
object3 = Foo(3)
...

# do this
foos = [Foo(i) for i in range(3)]

# Or this
bars = {name: Bar(name) for name in list_of_names}
</code></pre>
<p>Then it becomes trivial to manipulate them in group:</p>
<pre><code>for foo in foos:
    foo.foo_method()

for bar in bars.values():
    bar.bar_method()
</code></pre>
<p>While still easy to reference the object on its own:</p>
<pre><code>foo[index].foo_method()
bar[key].bar_method()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>eval</code> function:</p>
<pre><code>&gt;&gt;&gt; for i in range(1,4):
&gt;&gt;&gt;     eval("object%d" % i).callMethod()
&gt;&gt;&gt;     eval("difObject%d" % i).callDifMethod()
</code></pre>
</div>
<span class="comment-copy">There are ways to do the kind of thing you're asking about but could you show real code for these classes/functions? That will help inform useful answers.</span>
<span class="comment-copy">This is the only style of simplification that I'm looking for -- if this is doable, that is all I need. If I were to put all the code for these classes and functions here, it would be hundreds of lines.</span>
<span class="comment-copy">You may also be interested in <a href="https://docs.python.org/3/library/operator.html#operator.methodcaller" rel="nofollow noreferrer"><code>operator.methodcaller</code></a></span>
