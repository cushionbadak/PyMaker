<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/37350971/tkinter-entry-not-showing-the-current-value-of-textvariable">Tkinter Entry not showing the current value of textvariable</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I'm working with the <code>tkinter</code> module for the first time and I found the <code>textvariable</code> argument when creating labels/buttons and what not.
It only ever updates the first time. I've twisted the method of retrieving the command ever which way but nothing seems to be working. I've hit a brick wall.</p>
<pre><code>from tkinter import *

x = 1
y = 1
z = 0

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        textVar = StringVar()
        self.button = Button(
            frame, textvariable=textVar, command=textVar.set(str(fibonacci()))
        )
        self.button.pack()

def fibonacci():
    global x, y, z
    z = x
    x = x + y
    y = z
    return x

root = Tk()
app = App(root)
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at this statement fragment:</p>
<pre><code>self.button = Button(..., command=textVar.set(str(fibonacci()))
</code></pre>
<p>It is functionally equivalent to this:</p>
<pre><code>result = textVar.set(str(fibonacci()))
self.button = Button(..., command=result)
</code></pre>
<p>See the problem? You are calling <code>textVar.set(...)</code> <em>immediately</em>, and using the result of that as the value for the <code>command</code> attribute. <code>textVar.set(...)</code> returns <code>None</code>, so you're effective doing <code>command=None</code>. </p>
<p>Don't try to put code into the <code>command</code> argument. Instead, create a proper function and make that the value of the <code>command</code> attribute. That will make your code easier to understand, easier to maintain, and easier to debug.</p>
<p>Example:</p>
<pre><code>def __init__(self, master):
    ...
    self.button = Button(..., command=self.do_something)
    ...
</code></pre>
<p>The second problem that you have is that you're using a local variable to store the result of <code>StringVar()</code>. That means it will get deleted by the garbage collector once the function has finished running.</p>
<p>To fix this, assign the attribute to an instance variable:</p>
<pre><code>def __init(self, master):
    ...
    self.textVar = StringVar()
    self.button = Button(..., command=self.do_something)
    ...

def do_something()
    self.textVar.set(str(fibonacci()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's several problems with your code. First you need to make <code>textVar</code> a instance attribute so it remains in existence even after the <code>__init__()</code> method returns. In your code it's a local variable that will go away when it returns.</p>
<p>Secondly, the <code>command</code> option for <code>Button</code> should be set to a function to call later when it's clicked, but your code is calling it once while creating the widget itself. You can fix that by using a <a href="https://docs.python.org/3/howto/functional.html#small-functions-and-the-lambda-expression" rel="nofollow noreferrer"><code>lambda</code></a> expression to define an "anonymous" function that calls the desired function whenever <em>it's</em> called.</p>
<pre><code>x = 1
y = 1
z = 0

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        self.textVar = StringVar()  # Make an instance attribute.
        self.textVar.set(x)  # Set to show initial value of x.
        self.button = Button(frame, textvariable=self.textVar,
                             command=lambda: self.textVar.set(fibonacci()))
        self.button.pack()


def fibonacci():
    global x, y, z
    z = x
    x = x + y
    y = z
    return x

root = Tk()
app = App(root)
root.mainloop()
</code></pre>
<hr/>
<p>You <em>could</em> do the same thing without using <code>lambda</code> as shown in the code below. <strong>Note</strong> the use of <code>command=self.button_click_callback</code> which just specifies the function's name but doesn't actually call it at the point like using <code>command=self.button_click_callback()</code> would. In addition, since <code>button_click_callback</code> was defined as a class method, it will automatically get a <code>self</code> argument passed to (unlike the function defined in-line via the <code>lamba</code> expression).</p>
<p>Anyway, as you can see, it takes a few more lines of code to do things this way.</p>
<pre><code>from tkinter import *

x = 1
y = 1
z = 0

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        self.textVar = StringVar()  # Define as a instance attribute.
        self.textVar.set(x)  # Set to show initial value of x.
        self.button = Button(frame, textvariable=self.textVar,
                             command=self.button_click_callback)
        self.button.pack()

    def button_click_callback(self):
        """ Called whenever button is clicked. """
        self.textVar.set(fibonacci())

def fibonacci():
    global x, y, z
    z = x
    x = x + y
    y = z
    return x

root = Tk()
app = App(root)
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally gave up with textvariable on windows PC with anaconda environment (use of Spyder): I have too many levels and nesting and things gets anywhere lost.. especially due to "callback" situation with the command and lambda use. looks like others were confused with textvariable too (recommendation is there not to use it.. <a href="https://stackoverflow.com/questions/37350971/python-tkinter-entry-not-showing-the-current-value-of-textvariable">Tkinter Entry not showing the current value of textvariable</a> )
Like you, I was using textvariable initialized with .set('is it there?') in an <strong>init</strong> part, and re-used later in an entry, dont show the text 'is it there'. Sorry for not having a clear solution, but it looks like the life can go on without this textvariable.</p>
<p>the best summary link I could find till now is there <a href="https://stackoverflow.com/questions/6920302/how-to-pass-arguments-to-a-button-command-in-tkinter">How to pass arguments to a Button command in Tkinter?</a>  . everything is there: lambda explained, callback explained a bit, textvariable not updated in the called function due to callback situation, use global variables for making changes in parameter etc.</p>
</div>
<span class="comment-copy">The keyword argument <code>command</code> takes a function, whereas you're passing <i>an instance</i> of the function.  Define a function that updates <code>textVar</code> and assign the function without parentheses to <code>command</code>.</span>
<span class="comment-copy">It seems there is a massive difference between <code>command=self.update()</code> and <code>command=self.update</code>... Is this the difference between a function's reference and attempting to call it? I'm not sure of the proper way to phrase it.</span>
<span class="comment-copy">@Xevion: yes, that is the difference. Though, <code>self.update()</code> doesnâ€™t <i>attempt</i> to call it, it actually calls it.</span>
<span class="comment-copy">I don't understand Lambda very much in Python. I did a bunch of practice problems in Java but I'm having trouble figuring how just typing <code>lambda: </code> in front of that completely changes my problem. Also, yes, I do get how the local variable / garbage collection works. I'll keep that in mind.</span>
<span class="comment-copy">@Xevion: Using <code>lambda</code> is often useful for writing <code>tkinter</code> programs so I suggest to keep trying to understand the concept which basically allows you to create short usually one-line functions that return the results of evaluationg the expression they contain without having to write one using the usual <code>def myfunction():</code> multi-statement format. Using them is not required however. Regardless, if my answer solves your problem, please consider accepting it. See <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
