<div class="post-text" itemprop="text">
<p>I want to compact my code as much as possible.
Why isn't the following allowed in Python?</p>
<pre><code>string = input()
if string.isnumeric: pass
else: if string == 'tesr': print('test') else: print('stop')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this particular case, the problem is that Python uses indentation to determine block inclusion.  Look up the "dangling else" problem.  Some languages use braces or other "visible" punctuation; Python uses white space at the start of a new line.  Without those new lines, you don't have a legal <code>if</code> in all cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">grammar</a>, you're looking for </p>
<pre><code>if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
</code></pre>
<p>(I rearranged these).  So an <code>if</code> statement has a <code>suite</code>, which is the part that is executed if the <code>test</code> is truthy.  A <code>suite</code> is either a single simple statement, or an indented block of simple statements. </p>
<p>A simple statement is one small statement with an optional semicolon or many small statements separated by semicolons.  <em>All</em> simple statements end with a newline.</p>
<p>If you're looking for a reason in the design sense, I can only speculate.  This probably made writing the grammar much simpler, and the designers would probably see limiting code like that in your example a benefit.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, you can have multiple if statements in one line. For example your code </p>
<pre><code>string = input()
if string.isnumeric: pass
else: if string == 'tesr': print('test') else: print('stop')
</code></pre>
<p>Can be written like so as one liner.</p>
<pre><code>if not string.isnumeric(): print('test') if (string == 'tesr') else print('stop')
</code></pre>
<p>or in case you prefer</p>
<pre><code>None if string.isnumeric() else print('test') if (string == 'tesr') else print('stop')
</code></pre>
<p>However I agree with @timgeb in the comments - it is readability that counts!</p>
<p><strong>EDIT</strong></p>
<p>Since your edit your question from "Why can't I write the following code as a one-liner" to "I want to compact my code as much as possible. Why isn't the following allowed in Python?" ... Well because indents are important for python, so what would you suppose the following code would do:</p>
<pre><code>if x == 1: print(1) if x == 3: print(2) else: print(3)
</code></pre>
<p>? One could think that this code is either representing</p>
<pre><code>if x == 1: print(1)
if x == 3: print(2)
else: print(3)
</code></pre>
<p>or</p>
<pre><code>if x == 1:
    print(1)
    if x == 3: print(2)
else: print(3)
</code></pre>
<p>So what do you expect? This would be chaos because no one would know anymore how something gets parsed.</p>
</div>
<span class="comment-copy">Because readability counts, I guess.</span>
<span class="comment-copy">Compact yes, but that does not mean writing everything on a single line... Code is frequently written once, and read/slightly modified multiple times.</span>
<span class="comment-copy">Why do you want that? Which problem do you want to solve with this?</span>
<span class="comment-copy">You can write your specific use case with the conditional operator <code>print('test') if string == 'tesr' else print('stop')</code> but it's kind of bad style and might not be generally applicable.</span>
<span class="comment-copy">Because python was designed not to allow you to do that with compound, conditional statements. Note, you can do horrendous, single-line conditional <i>expressions</i>, but you <i>shouldn't do that</i></span>
