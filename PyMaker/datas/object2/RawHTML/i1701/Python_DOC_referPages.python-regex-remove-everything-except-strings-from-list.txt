<div class="post-text" itemprop="text">
<p>I have string:</p>
<pre><code>bdv. mot. g. vns. kilm.
</code></pre>
<p>And knowing list of strings like </p>
<pre><code>important_strings_lst=['bdv.', 'dktv.', 'mot. g.', 'vyr. g.']
</code></pre>
<p>I want to get <code>regex</code> selection like:</p>
<pre><code>bdv. mot. g.
</code></pre>
<p>I joined list and tried: <a href="https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch05s04.html" rel="nofollow noreferrer">idea from here</a></p>
<pre><code>regex = re.compile(r'\b(?!bdv.|dktv.|mot. g.|vyr. g.)\w+', re.UNICODE)
regex.sub("", 'bdv. mot. g. vns. kilm.')
</code></pre>
<p>Got</p>
<pre><code>'bdv. mot. . . .'
</code></pre>
<p>Changing places in regex with <code>\s</code> also didn't work out. How to do it?</p>
<p>I could use something like <code>[x for x in important_strings_lst if x in my_string]</code> but I need good performance as this will be used with million rows of pandas dataframe with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html" rel="nofollow noreferrer">str.replace</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>.</code> character has special meaning in regular expressions. You can use <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> to make a string "safe" for use in a regular expression.</p>
<pre><code>&gt;&gt;&gt; import re
... important_strings=['bdv.', 'dktv.', 'mot. g.', 'vyr. g.']
... regex = re.compile('|'.join(re.escape(s) for s in important_strings))
... regex.findall('bdv. mot. g. vns. kilm.')
['bdv.', 'mot. g.']
</code></pre>
<p>Pandas has its own <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.findall.html#pandas.Series.str.findall" rel="nofollow noreferrer"><code>findall</code></a> which should work like <code>re.findall</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe split string</p>
<pre><code>    bdv. mot. g. vns. kilm.
</code></pre>
<p>using your list and remove from oryginal string what left after spliting.</p>
</div>
<span class="comment-copy">@perreal,  your comment above is not clear, can your pls make it clear.</span>
<span class="comment-copy">Pandas series indeed has <code>str.findall</code> method. And <code>re.escape</code> removes dots. What is left is list instead of string. But may I get out with this.</span>
<span class="comment-copy"><code>.str.findall('|'.join(re.escape(s) for s in important_strings)).str.join(' ')</code></span>
<span class="comment-copy">You can benchmark to test if findall is faster than your original negative lookahead. I try to avoid using lookaround assertions in my regular expressions because they are often hard to read/understand and in some cases they can be very slow, if the regex engine is forced to do a lot of backtracking.</span>
