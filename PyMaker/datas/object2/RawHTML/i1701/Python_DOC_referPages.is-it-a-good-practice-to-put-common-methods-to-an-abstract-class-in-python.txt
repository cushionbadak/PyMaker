<div class="post-text" itemprop="text">
<p>I'm using the <a href="https://docs.python.org/3/library/abc.html" rel="noreferrer"><code>abc</code></a> module to define an interface that subclasses must support. There're also some common methods that are present in all subclasses. Is it ok to put them in the abstract class or should that only contain abstract methods (i.e. decorated with <code>@abc.abstractmethod</code>) ?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL; DR;</strong> Yes, it is OK for an abstract class to have non-abstract methods.</p>
<p>Typically what we call <em>an abstract class</em> is just a class that cannot be instantiated.</p>
<p>On the other hand what we call <em>an interface</em> is a class which has only method declarations but no implementations. In particular its an abstract class because it doesn't have a constructor.</p>
<p>Of course in Python there are no real interfaces: every method has to have a body. But we can somewhat emulate interfaces via <code>raise NotImplementedError()</code>.</p>
<p>Anyway interfaces form a subset of abstract classes. This obviously suggests that there are abstract classes that are not interfaces. This is exactly the case you are describing. Yes, abstract class may contain implemented, non-abstract methods. And it is not a bad practice. This is especially useful when a given method does not depend on concrete implementation.</p>
<hr/>
<p>For example consider an interface for a generic parser (I'm thinking about <code>json.load</code> and <code>json.loads</code>):</p>
<pre><code>class ILoader(ABC):
    @abstractmethod
    def load(self, stream):
        raise NotImplementedError()
</code></pre>
<p>It's completely OK to give <code>loads</code> method which accepts a string instead of stream with a default implementation:</p>
<pre><code>class AbstractLoader(ABC):
    @abstractmethod
    def load(self, stream):
        raise NotImplementedError()

    def loads(self, text):
        stream = io.StringIO(text)
        return self.load(stream)
</code></pre>
<p>although I would use <code>Abstract</code> prefix instead of <code>I</code>. ;)</p>
</div>
<span class="comment-copy">Usually the difference between an interface and an abstract class is that interface does not have fields and does not have any methods implemented. Both concepts are useful depending on context. In Python there is no clear distinction though. But there's nothing wrong with implementing methods in an abstract class.</span>
<span class="comment-copy">Is there a certain benefit to do this instead of using <code>raise NotImplementedError</code>?</span>
<span class="comment-copy">@RockyLi Yes, a class that inherits from an abstract class <b>has to</b> implement all of its abstract methods.</span>
<span class="comment-copy">It's trivial to circumvent that requirement (<code>abc</code> is a library, not a language feature), but it still serves as good documentation and a first line of defense against simply forgetting to implement the abstract methods.</span>
<span class="comment-copy">Also, putting common methods that all subclasses should have access to in the base class is standard OO practice, unrelated to whether the base class is abstract or not</span>
