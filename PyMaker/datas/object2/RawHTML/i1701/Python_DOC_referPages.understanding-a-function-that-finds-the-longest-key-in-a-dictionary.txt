<div class="post-text" itemprop="text">
<p>The <code>find_longest</code> method in the following <code>dict</code> class finds the longest key value inside the dictionary.</p>
<pre><code>class LongestKey(dict):
    def find_longest(self):
        longest = None
        for key in self:
            if not longest or len(key) &gt; len(longest):
                longest = key
        print(key)

a = LongestKey()
a["hi"] = 1
a["hello"] = 2
a["hey there"] = 3
a["greetings sir"] = 4

a.find_longest()
</code></pre>
<p>The code is working, but I am having a very hard time undertanding the logic behind the if not or statement. I originally used</p>
<pre><code>if len(key) &gt; len(longest):
</code></pre>
<p>instead of</p>
<pre><code>if not longest or len(key) &gt; len(longest):
</code></pre>
<p>but it produces the error: <code>TypeError: object of type 'NoneType' has no len()</code>. Why is this? Thank you very much for enlightening me on this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why you need <code>if not longest</code> check is because first time the loop is run, <code>longest</code> is <code>None</code> and you can't do <code>len(None)</code>. So you do <code>if not longest</code> check and only if  this is <code>False</code>, the second condition  is checked. 
<hr/>
This additional check can be avoided in this case by initialising <code>longest</code> to <code>-1</code> instead of <code>None</code> and comparing <code>len(key)</code> with <code>longest</code> (not <code>len(longest)</code>).</p>
<p>Something like this:</p>
<pre><code>class LongestKey(dict):    
    def find_longest(self):
        longest = -1  
        for key in self:
            if len(key) &gt; longest:
                longest = len(key)
                longest_key = key
        print(longest_key)   # &lt;-- print longest key not just key.
</code></pre>
<p><strong>Note</strong>: Your code prints only the last key which might not be the longest key every time. In <code>if</code>, you need to update longest key along with <code>longest</code> value as shown.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you declare the variable <code>longest</code> and assign it to <code>None</code> </p>
<pre><code>def find_longest(self):
    longest = None  
</code></pre>
<p><code>NoneType</code> doesn't have <code>len()</code>. So it lead to this statement:</p>
<pre><code>if not longest or len(key) &gt; len(longest):
...
</code></pre>
<p>It checks whether <code>longest</code> has been updated or not</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because you are checking the length of <code>longest</code> which is set to <code>None</code>. Hence the error.</p>
<p>Example,</p>
<pre><code>x = None
print(len(x))

# output
TypeError: object of type 'NoneType' has no len()
</code></pre>
<p>The reason you don't get the error is because <code>if not longest</code> is executed while the second condition <code>len(key) &gt; len(longest)</code> is not even executed because first is matched already. On top of that, the reason it works is the value of <code>longest</code> changes on second iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are doing:</p>
<pre><code>longest=None
</code></pre>
<p>You are making sure that the object <em>longest</em> have '<em>no value</em>' or '<em>empty value</em>'. In Python we don't need to declare variables first, so there are no really <em>empty</em> variables in Python. Setting a variable to <em>None</em> is then not the same thing as setting it to a default empty value; None is a value too, albeit one that is often used to signal <em>emptyness</em>. 
So how can you count the length of an object if its empty? That's the logic being used here, <em>longest</em> doesn't have any value at all so it throws an error:</p>
<pre><code>TypeError: object of type 'NoneType' has no len()
</code></pre>
<p>And when you are using:</p>
<pre><code>if not longest or len(key) &gt; len(longest):
</code></pre>
<p>You are making sure that the object <em>longest</em> doesn't have the value <em>None</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's to prevent an error from occurring during the first iteration of the <code>for</code> loop.</p>
<p>The <code>not longest</code> part of the logical expression is evaluated first and if it's <code>True</code> then the remainder of the expression—the <code>or len(key) &gt; len(longest)</code> portion—won't be evaluated and the value of the whole expression will also be <code>True</code>. </p>
<p>This is needed because initially <code>longest</code> got set to <code>None</code>, and writing the logical expression that way prevents the <code>len(longest)</code> part of the second half from being evaluated and a <code>TypeError</code> occurring because <code>longest</code> has no length yet.</p>
</div>
<span class="comment-copy">potentially worth having <code>longest</code> be initially set to <code>-1</code> as strings could have a <code>len</code> of <code>0</code></span>
<span class="comment-copy">@aydow, missed that. Thank you.</span>
<span class="comment-copy"><b>and only if this is False, the second condition is checked.</b> I had no idea. I was assuming the <b>or</b> in the check meant either one could be true independently and the loop would still run. Thanks!</span>
<span class="comment-copy">I didn't realize the code I posted wasn't actually finding the longest key. Thank you for your example which seems much more clear to me now</span>
<span class="comment-copy">This is the easiest to understand answer I've received on stack exchange. I didn't know that logical expression that precedes the or is or isn't evaluated dependent on the first expression being True or False. Awesome, thank you.</span>
<span class="comment-copy">Sean: That's good to hear, thanks. This is called "short-circuiting" and is mentioned in the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">Boolean Operations</a> section of the documentation (see the Notes at the end). Also please see <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">Thank you for the resource. I will be studying up on it today!</span>
