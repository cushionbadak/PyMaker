<div class="post-text" itemprop="text">
<p>What is the status of the <code>matrix</code> class in NumPy?</p>
<p>I keep being told that I should use the <code>ndarray</code> class instead. Is it worth/safe using the <code>matrix</code> class in new code I write? I don't understand why I should use <code>ndarray</code>s instead.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>tl; dr:</strong> the <code>numpy.matrix</code> class is getting deprecated. There are some high-profile libraries that depend on the class as a dependency (the largest one being <code>scipy.sparse</code>) which hinders proper short-term deprecation of the class, but users are strongly encouraged to use the <code>ndarray</code> class (usually created using the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html" rel="noreferrer"><code>numpy.array</code></a> convenience function) instead. With the introduction of the <code>@</code> operator for matrix multiplication a lot of the relative advantages of matrices have been removed.</p>
<h3>Why (not) the matrix class?</h3>
<p><code>numpy.matrix</code> is a subclass of <code>numpy.ndarray</code>. It was originally meant for convenient use in computations involving linear algebra, but there are both limitations and surprising differences in how they behave compared to instances of the more general array class. Examples for fundamental differences in behaviour:</p>
<ul>
<li>Shapes: arrays can have an arbitrary number of dimensions ranging from 0 to infinity (or 32). Matrices are always two-dimensional. Oddly enough, while a matrix can't be <em>created</em> with more dimensions, it's possible to inject singleton dimensions into a matrix to end up with technically a multidimensional matrix: <code>np.matrix(np.random.rand(2,3))[None,...,None].shape == (1,2,3,1)</code> (not that this is of any practical importance).</li>
<li>Indexing: indexing arrays can give you arrays of any size depending on <a href="https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html" rel="noreferrer">how you are indexing it</a>. Indexing expressions on matrices will always give you a matrix. This means that both <code>arr[:,0]</code> and <code>arr[0,:]</code> for a 2d array gives you a 1d <code>ndarray</code>, while <code>mat[:,0]</code> has shape <code>(N,1)</code> and <code>mat[0,:]</code> has shape <code>(1,M)</code> in case of a <code>matrix</code>.</li>
<li>Arithmetic operations: the main reason for using matrices in the old days was that arithmetic operations (in particular, multiplication and power) on matrices performs matrix operations (matrix multiplication and matrix power). The same for arrays results in elementwise multiplication and power. Consequently <code>mat1 * mat2</code> is valid if <code>mat1.shape[1] == mat2.shape[0]</code>, but <code>arr1 * arr2</code> is valid if <code>arr1.shape == arr2.shape</code> (and of course the result means something completely different). Also, surprisingly, <code>mat1 / mat2</code> performs <em>elementwise</em> division of two matrices. This behaviour is probably inherited from <code>ndarray</code> but makes no sense for matrices, especially in light of the meaning of <code>*</code>.</li>
<li>Special attributes: matrices have <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html" rel="noreferrer">a few handy attributes</a> in addition to what arrays have: <code>mat.A</code> and <code>mat.A1</code> are array views with the same value as <code>np.array(mat)</code> and <code>np.array(mat).ravel()</code>, respectively. <code>mat.T</code> and <code>mat.H</code> are the transpose and conjugate transpose (adjoint) of the matrix; <code>arr.T</code> is the only such attribute that exists for the <code>ndarray</code> class. Finally, <code>mat.I</code> is the inverse matrix of <code>mat</code>.</li>
</ul>
<p>It's easy enough writing code that works either for ndarrays or for matrices. But when there's a chance that the two classes have to interact in code, things start to become difficult. In particular, a lot of code <em>could</em> work naturally for subclasses of <code>ndarray</code>, but <code>matrix</code> is an ill-behaved subclass that can easily break code that tries to rely on duck typing. Consider the following example using arrays and matrices of shape <code>(3,4)</code>:</p>
<pre><code>import numpy as np

shape = (3, 4)
arr = np.arange(np.prod(shape)).reshape(shape) # ndarray
mat = np.matrix(arr) # same data in a matrix
print((arr + mat).shape)           # (3, 4), makes sense
print((arr[0,:] + mat[0,:]).shape) # (1, 4), makes sense
print((arr[:,0] + mat[:,0]).shape) # (3, 3), surprising
</code></pre>
<p>Adding slices of the two objects is catastrophically different depending on the dimension along which we slice. Addition on both matrices and arrays happens elementwise when the shapes are the same. The first two cases in the above are intuitive: we add two arrays (matrices), then we add two rows from each. The last case is really surprising: we probably meant to add two columns and ended up with a matrix. The reason of course is that <code>arr[:,0]</code> has shape <code>(3,)</code> which is compatible with shape <code>(1,3)</code>, but <code>mat[:.0]</code> has shape <code>(3,1)</code>. The two are <a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" rel="noreferrer">broadcast</a> together to shape <code>(3,3)</code>.</p>
<p>Finally, the largest advantage of the matrix class (i.e. the possibility to concisely formulate complicated matrix expressions involving a lot of matrix products) was removed when <a href="https://www.python.org/dev/peps/pep-0465" rel="noreferrer">the <code>@</code> matmul operator was introduced in python 3.5</a>, first implemented <a href="https://docs.scipy.org/doc/numpy-1.10.1/release.html#support-for-the-operator-in-python-3-5" rel="noreferrer">in numpy 1.10</a>. Compare the computation of a simple quadratic form:</p>
<pre><code>v = np.random.rand(3); v_row = np.matrix(v)
arr = np.random.rand(3,3); mat = np.matrix(arr)

print(v.dot(arr.dot(v))) # pre-matmul style
# 0.713447037658556, yours will vary
print(v_row * mat * v_row.T) # pre-matmul matrix style
# [[0.71344704]]
print(v @ arr @ v) # matmul style
# 0.713447037658556
</code></pre>
<p>Looking at the above it's clear why the matrix class was widely preferred for working with linear algebra: the infix <code>*</code> operator made the expressions much less verbose and much easier to read. However, we get the same readability with the <code>@</code> operator using modern python and numpy. Furthermore, note that the matrix case gives us a matrix of shape <code>(1,1)</code> which should technically be a scalar. This also implies that we can't multiply a column vector with this "scalar": <code>(v_row * mat * v_row.T) * v_row.T</code> in the above example raises an error because matrices with shape <code>(1,1)</code> and <code>(3,1)</code> can't be multiplied in this order.</p>
<p>For completeness' sake it should be noted that while the matmul operator fixes the most common scenario in which ndarrays are suboptimal compared to matrices, there are still a few shortcomings in handling linear algebra elegantly using ndarrays (although people still tend to believe that overall it's preferable to stick to the latter). One such example is matrix power: <code>mat ** 3</code> is the proper third matrix power of a matrix (whereas it's the elementwise cube of an ndarray). Unfortunately <code>numpy.linalg.matrix_power</code> is quite more verbose. Furthermore, in-place matrix multiplication only works fine for the matrix class. In contrast, while both <a href="https://www.python.org/dev/peps/pep-0465/#specification" rel="noreferrer">PEP 465</a> and the <a href="https://docs.python.org/3/reference/grammar.html#full-grammar-specification" rel="noreferrer">python grammar</a> allow <code>@=</code> as an augmented assignment with matmul, this is not implemented for ndarrays as of numpy 1.15.</p>
<h3>Deprecation history</h3>
<p>Considering the above complications concerning the <code>matrix</code> class there have been recurring discussions of its possible deprecation for a long time. The introduction of the <code>@</code> infix operator which was a huge prerequisite for this process <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-465-a-dedicated-infix-operator-for-matrix-multiplication" rel="noreferrer">happened in September 2015</a>. Unfortunately the advantages of the matrix class in earlier days meant that its use spread wide. There are libraries that depend on the matrix class (one of the most important dependent is <a href="https://docs.scipy.org/doc/scipy/reference/sparse.html" rel="noreferrer"><code>scipy.sparse</code></a> which uses both <code>numpy.matrix</code> semantics and often returns matrices when densifying), so fully deprecating them has always been problematic.</p>
<p>Already in <a href="https://mail.python.org/pipermail/numpy-discussion/2009-December/047543.html" rel="noreferrer">a numpy mailing list thread from 2009</a> I found remarks such as</p>
<blockquote>
<p>numpy was designed for general purpose computational needs, not any one 
  branch of math. nd-arrays are very useful for lots of things. In 
  contrast, Matlab, for instance, was originally designed to be an easy 
  front-end to linear algebra package. Personally, when I used Matlab, I 
  found that very awkward -- I was usually writing 100s of lines of code 
  that had nothing to do with linear algebra, for every few lines that 
  actually did matrix math. So I much prefer numpy's way -- the linear 
  algebra lines of code are longer an more awkward, but the rest is much 
  better.</p>
<p>The Matrix class is the exception to this: is was written to provide a 
  natural way to express linear algebra. However, things get a bit tricky 
  when you mix matrices and arrays, and even when sticking with matrices 
  there are confusions and limitations -- how do you express a row vs a 
  column vector? what do you get when you iterate over a matrix? etc.</p>
<p>There has been a bunch of discussion about these issues, a lot of good 
  ideas, a little bit of consensus about how to improve it, but no one 
  with the skill to do it has enough motivation to do it.</p>
</blockquote>
<p>These reflect the benefits and difficulties arising from the matrix class. The earliest suggestion for deprecation I could find is <a href="https://mail.python.org/pipermail/scipy-user/2008-May/016734.html" rel="noreferrer">from 2008</a>, although partly motivated by unintuitive behaviour that has changed since (in particular, slicing and iterating over a matrix will result in (row) matrices as one would most likely expect). The suggestion showed both that this is a highly controversial subject and that infix operators for matrix multiplication are crucial.</p>
<p>The next mention I could find <a href="https://mail.python.org/pipermail/numpy-discussion/2014-February/068828.html" rel="noreferrer">is from 2014</a> which turned out to be a <em>very</em> fruitful thread. The ensuing discussion raises the question of handling numpy subclasses in general, <a href="https://www.numpy.org/neps/nep-0022-ndarray-duck-typing-overview.html" rel="noreferrer">which general theme is still very much on the table</a>. There is also <a href="https://mail.python.org/pipermail/numpy-discussion/2014-February/068862.html" rel="noreferrer">strong criticism</a>:</p>
<blockquote>
<p>What sparked this discussion (on Github) is that it is not possible to
  write duck-typed code that works correctly for:</p>
<ul>
<li>ndarrays</li>
<li>matrices</li>
<li>scipy.sparse sparse matrixes</li>
</ul>
<p>The semantics of all three are different; scipy.sparse is somewhere
  between matrices and ndarrays with some things working randomly like
  matrices and others not.</p>
<p>With some hyberbole added, one could say that from the developer point
  of view, np.matrix is doing and has already done evil just by existing,
  by messing up the unstated rules of ndarray semantics in Python.</p>
</blockquote>
<p>followed by a lot of valuable discussion of the possible futures for matrices. Even with no <code>@</code> operator at the time there is a lot of thought given to the deprecation of the matrix class and how it might affect users downstream. As far as I can tell this discussion has directly led to the inception of PEP 465 introducing matmul.</p>
<p><a href="https://mail.python.org/pipermail/numpy-discussion/2015-February/072236.html" rel="noreferrer">In early 2015</a>:</p>
<blockquote>
<p>In my opinion, a "fixed" version of np.matrix should (1) not be a
  np.ndarray subclass and (2) exist in a third party library not numpy itself.</p>
<p>I don't think it's really feasible to fix np.matrix in its current state as
  an ndarray subclass, but even a fixed matrix class doesn't really belong in
  numpy itself, which has too long release cycles and compatibility
  guarantees for experimentation -- not to mention that the mere existence of
  the matrix class in numpy leads new users astray.</p>
</blockquote>
<p>Once the <code>@</code> operator had been available for a while <a href="https://mail.python.org/pipermail/numpy-discussion/2017-January/076290.html" rel="noreferrer">the discussion of deprecation surfaced again</a>, <a href="https://mail.python.org/pipermail/numpy-discussion/2017-January/076316.html" rel="noreferrer">reraising the topic</a> about the relationship of matrix deprecation and <code>scipy.sparse</code>.</p>
<p>Eventually, <a href="https://mail.python.org/pipermail/numpy-discussion/2017-November/077450.html" rel="noreferrer">first action to deprecate <code>numpy.matrix</code> was taken in late November 2017</a>. Regarding dependents of the class:</p>
<blockquote>
<blockquote>
<p>How would the community handle the scipy.sparse matrix subclasses?  These
    are still in common use.</p>
</blockquote>
<p>They're not going anywhere for quite a while (until the sparse ndarrays
  materialize at least). Hence np.matrix needs to be moved, not deleted.</p>
</blockquote>
<p>(<a href="https://mail.python.org/pipermail/numpy-discussion/2017-November/077458.html" rel="noreferrer">source</a>) and</p>
<blockquote>
<p>while I want to get rid of np.matrix as much as
  anyone, doing that anytime soon would be <em>really</em> disruptive.</p>
<ul>
<li><p>There are tons of little scripts out there written by people who
  didn't know better; we do want them to learn not to use np.matrix but
  breaking all their scripts is a painful way to do that</p></li>
<li><p>There are major projects like scikit-learn that simply have no
  alternative to using np.matrix, because of scipy.sparse.</p></li>
</ul>
<p>So I think the way forward is something like:</p>
<ul>
<li><p>Now or whenever someone gets together a PR: issue a
  PendingDeprecationWarning in np.matrix.__init__ (unless it kills
  performance for scikit-learn and friends), and put a big warning box
  at the top of the docs. The idea here is to not actually break
  anyone's code, but start to get out the message that we definitely
  don't think anyone should use this if they have any alternative.</p></li>
<li><p>After there's an alternative to scipy.sparse: ramp up the warnings,
  possibly all the way to FutureWarning so that existing scripts don't
  break but they do get noisy warnings</p></li>
<li><p>Eventually, if we think it will reduce maintenance costs: split it
  into a subpackage</p></li>
</ul>
</blockquote>
<p>(<a href="https://mail.python.org/pipermail/numpy-discussion/2017-November/077468.html" rel="noreferrer">source</a>).</p>
<h2>Status quo</h2>
<p>As of May 2018 (numpy 1.15, relevant <a href="https://github.com/numpy/numpy/pull/10142" rel="noreferrer">pull request</a> and <a href="https://github.com/numpy/numpy/commit/6721890e86291b53fb8dcbee6809891c348ae98e" rel="noreferrer">commit</a>) the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html" rel="noreferrer">matrix class docstring</a> contains the following note:</p>
<blockquote>
<p>It is no longer recommended to use this class, even for linear algebra. Instead use regular arrays. The class may be removed in the future.</p>
</blockquote>
<p>And at the same time a <code>PendingDeprecationWarning</code> has been added to <code>matrix.__new__</code>. Unfortunately, <a href="https://docs.python.org/3/library/warnings.html#default-warning-filter" rel="noreferrer">deprecation warnings are (almost always) silenced by default</a>, so most end-users of numpy will not see this strong hint.</p>
<p>Finally, <a href="https://www.numpy.org/neps/roadmap.html#functionality-outside-core" rel="noreferrer">the numpy roadmap</a> as of November 2018 mentions multiple related topics as one of the "<em>tasks and features [the numpy community] will be investing resources in</em>":</p>
<blockquote>
<p>Some things inside NumPy do not actually match the Scope of NumPy.</p>
<ul>
<li>A backend system for numpy.fft (so that e.g. fft-mkl doesn’t need to monkeypatch numpy)</li>
<li>Rewrite masked arrays to not be a ndarray subclass – maybe in a separate project?</li>
<li>MaskedArray as a duck-array type, and/or</li>
<li>dtypes that support missing values</li>
<li>Write a strategy on how to deal with overlap between numpy and scipy for linalg and fft (and implement it).</li>
<li>Deprecate np.matrix</li>
</ul>
</blockquote>
<p>It's likely that this state will stay as long as larger libraries/many users (and in particular <code>scipy.sparse</code>) rely on the matrix class. However, there's <a href="https://github.com/scipy/scipy/issues/8162" rel="noreferrer">ongoing discussion</a> to move <code>scipy.sparse</code> to depend on something else, such as <a href="https://github.com/pydata/sparse" rel="noreferrer"><code>pydata/sparse</code></a>. Irrespective of the developments of the deprecation process users should use the <code>ndarray</code> class in new code and preferably port older code if possible. Eventually the matrix class will probably end up in a separate package to remove some of the burdens caused by its existence in its current form.</p>
</div>
<span class="comment-copy">I don't see <code>scipy.sparse</code> as depending on <code>np.matrix</code>.  Yes it is, as implemented restricted to 2d, and its use of operators is model on the <code>np</code> version.  But none of the sparse formats is a subclass of <code>np.matrix</code>.  And the converter to <code>np.matrix</code>,  <code>sparse.todense</code> is actually implemented as <code>np.asmatrix(M.toarray())</code>.</span>
<span class="comment-copy">Originally <code>sparse</code> was created for linear algebra, with <code>csr</code> and <code>csc</code> being central, and other formats serving as creation tools.  It was modeled on the MATLAB code, which as far as I can tell is limited to <code>csc</code> format.  However <code>sparse</code> is getting more use in machine learning and big data uses.  <code>sklearn</code> has a set of its own sparse utilities.  I don't know if those other uses benefit from nd sparse arrays or not.  Perhaps tangentially <code>pandas</code> has its own version(s) of sparsity (series and dataframe).</span>
<span class="comment-copy">Row and column sums of sparse matrices do return dense matrices. I'd have to check the implementation but I doubt if that's a deep dependency.</span>
<span class="comment-copy">As someone who's more on the application side of using <code>numpy</code> - thank goodness.  Between parsing code and chasing errors based on conflating <code>ndarray</code> and <code>matrix</code>, and trying to do higher-dimensionality tensor algebra with a language that often seems to assume that 2D <code>matrix</code> is "good enough," this bifurcation has been a huge headache since I started using <code>numpy</code>.  A big thanks to those doing the difficult coding I know must be going on in the background to get this done.</span>
<span class="comment-copy">I particularly like that infinity = 32</span>
