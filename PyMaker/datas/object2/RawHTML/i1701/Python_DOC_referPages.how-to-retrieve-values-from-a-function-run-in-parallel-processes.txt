<div class="post-text" itemprop="text">
<p>The Multiprocessing module is quite confusing for python beginners specially for those who have just migrated from MATLAB and are made lazy with its parallel computing toolbox. I have the following function which takes ~80 Secs to run and I want to shorten this time by using Multiprocessing module of Python. </p>
<pre><code>from time import time

xmax   = 100000000

start = time()
for x in range(xmax):
    y = ((x+5)**2+x-40)
    if y &lt;= 0xf+1:
        print('Condition met at: ', y, x)
end  = time()
tt   = end-start #total time
print('Each iteration took: ', tt/xmax)
print('Total time:          ', tt)
</code></pre>
<p>This outputs as expected:</p>
<pre><code>Condition met at:  -15 0
Condition met at:  -3 1
Condition met at:  11 2
Each iteration took:  8.667453265190124e-07
Total time:           86.67453265190125
</code></pre>
<p>As any iteration of the loop is not dependent on others, I tried to adopt this <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">Server Process</a> from the official documentation to scan chunks of the range in separate processes. And finally I came up with vartec's answer to <a href="https://stackoverflow.com/questions/10415028/how-can-i-recover-the-return-value-of-a-function-passed-to-multiprocessing-proce">this question</a> and could prepare the following code. I also updated the code based on Darkonaut's response to the current question. </p>
<pre><code>from time import time 
import multiprocessing as mp

def chunker (rng, t): # this functions makes t chunks out of rng
    L  = rng[1] - rng[0]
    Lr = L % t
    Lm = L // t
    h  = rng[0]-1
    chunks = []
    for i in range(0, t):
        c  = [h+1, h + Lm]
        h += Lm
        chunks.append(c)
    chunks[t-1][1] += Lr + 1
    return chunks

def worker(lock, xrange, return_dict):
    '''worker function'''
    for x in range(xrange[0], xrange[1]):
        y = ((x+5)**2+x-40)
        if y &lt;= 0xf+1:
            print('Condition met at: ', y, x)
            return_dict['x'].append(x)
            return_dict['y'].append(y)
            with lock:                
                list_x = return_dict['x']
                list_y = return_dict['y']
                list_x.append(x)
                list_y.append(y)
                return_dict['x'] = list_x
                return_dict['y'] = list_y

if __name__ == '__main__':
    start = time()
    manager = mp.Manager()
    return_dict = manager.dict()
    lock = manager.Lock()
    return_dict['x']=manager.list()
    return_dict['y']=manager.list()
    xmax = 100000000
    nw = mp.cpu_count()
    workers = list(range(0, nw))
    chunks = chunker([0, xmax], nw)
    jobs = []
    for i in workers:
        p = mp.Process(target=worker, args=(lock, chunks[i],return_dict))
        jobs.append(p)
        p.start()

    for proc in jobs:
        proc.join()
    end = time()
    tt   = end-start #total time
    print('Each iteration took: ', tt/xmax)
    print('Total time:          ', tt)
    print(return_dict['x'])
    print(return_dict['y'])
</code></pre>
<p>which considerably reduces the run time to ~17 Secs. But, my shared variable cannot retrieve any values. Please help me find out which part of the code is going wrong.</p>
<p>the output I get is:</p>
<pre><code>Each iteration took:  1.7742713451385497e-07
Total time:           17.742713451385498
[]
[]
</code></pre>
<p>from which I expect:</p>
<pre><code>Each iteration took:  1.7742713451385497e-07
Total time:           17.742713451385498
[0, 1, 2]
[-15, -3, 11]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue in your example is that modifications to standard mutable structures within <code>Manager.dict</code> will not be propagated. I'm first showing you how to fix it with manager, just to show you better options afterwards.</p>
<p><code>multiprocessing.Manager</code> is a bit heavy since it uses a separate Process just for the <code>Manager</code> and working on a shared object needs using locks for data consistency. If you run this on one machine, there are better options with <code>multiprocessing.Pool</code>, in case you don't have to run customized <code>Process</code> classes and if you have to, <code>multiprocessing.Process</code> together with <code>multiprocessing.Queue</code> would be the common way of doing it.</p>
<p>The quoting parts are from the multiprocessing <a href="https://docs.python.org/3.7/library/multiprocessing.html#managers" rel="nofollow noreferrer">docs.</a></p>
<hr/>
<p><strong>Manager</strong></p>
<blockquote>
<p>If standard (non-proxy) list or dict objects are contained in a referent, modifications to those mutable values will not be propagated through the manager because the proxy has no way of knowing when the values contained within are modified. However, storing a value in a container proxy (which triggers a <strong>setitem</strong> on the proxy object) does propagate through the manager and so to effectively modify such an item, one could re-assign the modified value to the container proxy...</p>
</blockquote>
<p>In your case this would look like:</p>
<pre><code>def worker(xrange, return_dict, lock):
    """worker function"""
    for x in range(xrange[0], xrange[1]):
        y = ((x+5)**2+x-40)
        if y &lt;= 0xf+1:
            print('Condition met at: ', y, x)
            with lock:
                list_x = return_dict['x']
                list_y = return_dict['y']
                list_x.append(x)
                list_y.append(y)
                return_dict['x'] = list_x
                return_dict['y'] = list_y
</code></pre>
<p>The <code>lock</code> here would be a <code>manager.Lock</code> instance you have to pass along as argument since the whole (now) locked operation is not by itself atomic. (<a href="https://stackoverflow.com/a/52453247/9059420">Here</a>
is an easier example with <code>Manager</code> using Lock)</p>
<blockquote>
<p>This approach is perhaps less convenient than employing nested Proxy Objects for most use cases but also demonstrates a level of control over the synchronization.</p>
</blockquote>
<p>Since Python 3.6 proxy objects are nestable:</p>
<blockquote>
<p>Changed in version 3.6: Shared objects are capable of being nested. For example, a shared container object such as a shared list can contain other shared objects which will all be managed and synchronized by the SyncManager.</p>
</blockquote>
<p>Since Python 3.6 you can fill your <code>manager.dict</code> before starting multiprocessing with <code>manager.list</code> as values and then append directly in the worker without having to reassign.</p>
<pre><code>return_dict['x'] = manager.list()
return_dict['y'] = manager.list()
</code></pre>
<p>EDIT:</p>
<p>Here is the full example with <code>Manager</code>:</p>
<pre><code>import time
import multiprocessing as mp
from multiprocessing import Manager, Process
from contextlib import contextmanager
# mp_util.py from first link in code-snippet for "Pool"
# section below
from mp_utils import calc_batch_sizes, build_batch_ranges

# def context_timer ... see code snippet in "Pool" section below

def worker(batch_range, return_dict, lock):
    """worker function"""
    for x in batch_range:
        y = ((x+5)**2+x-40)
        if y &lt;= 0xf+1:
            print('Condition met at: ', y, x)
            with lock:
                return_dict['x'].append(x)
                return_dict['y'].append(y)


if __name__ == '__main__':

    N_WORKERS = mp.cpu_count()
    X_MAX = 100000000

    batch_sizes = calc_batch_sizes(X_MAX, n_workers=N_WORKERS)
    batch_ranges = build_batch_ranges(batch_sizes)
    print(batch_ranges)

    with Manager() as manager:
        lock = manager.Lock()
        return_dict = manager.dict()
        return_dict['x'] = manager.list()
        return_dict['y'] = manager.list()

        tasks = [(batch_range, return_dict, lock)
                 for batch_range in batch_ranges]

        with context_timer():

            pool = [Process(target=worker, args=args)
                    for args in tasks]

            for p in pool:
                p.start()
            for p in pool:
                p.join()

        # Create standard container with data from manager before exiting
        # the manager.
        result = {k: list(v) for k, v in return_dict.items()}

    print(result)
</code></pre>
<hr/>
<p><strong>Pool</strong></p>
<p>Most often a <code>multiprocessing.Pool</code> will just do it. You have an additional challenge in your example since you want to distribute iteration over a range.
Your <code>chunker</code> function doesn't manage to divide the range even so every process has about the same work to do:</p>
<pre><code>chunker((0, 21), 4)
# Out: [[0, 4], [5, 9], [10, 14], [15, 21]]  # 4, 4, 4, 6!
</code></pre>
<p>For the code below please grab the code snippet for <code>mp_utils.py</code> from my answer <a href="https://stackoverflow.com/a/52637805/9059420">here</a>, it provides two functions to chunk ranges as even as possible.</p>
<p>With <code>multiprocessing.Pool</code> your <code>worker</code> function just has to return the result and <code>Pool</code> will take care of transporting the result back over internal queues back to the parent process. The <code>result</code> will be a list, so you will have to rearange your result again in a way you want it to have. Your example could then look like this:</p>
<pre><code>import time
import multiprocessing as mp
from multiprocessing import Pool
from contextlib import contextmanager
from itertools import chain

from mp_utils import calc_batch_sizes, build_batch_ranges

@contextmanager
def context_timer():
    start_time = time.perf_counter()
    yield
    end_time = time.perf_counter()
    total_time   = end_time-start_time
    print(f'\nEach iteration took: {total_time / X_MAX:.4f} s')
    print(f'Total time:          {total_time:.4f} s\n')


def worker(batch_range):
    """worker function"""
    result = []
    for x in batch_range:
        y = ((x+5)**2+x-40)
        if y &lt;= 0xf+1:
            print('Condition met at: ', y, x)
            result.append((x, y))
    return result


if __name__ == '__main__':

    N_WORKERS = mp.cpu_count()
    X_MAX = 100000000

    batch_sizes = calc_batch_sizes(X_MAX, n_workers=N_WORKERS)
    batch_ranges = build_batch_ranges(batch_sizes)
    print(batch_ranges)

    with context_timer():
        with Pool(N_WORKERS) as pool:
            results = pool.map(worker, iterable=batch_ranges)

    print(f'results: {results}')
    x, y = zip(*chain.from_iterable(results))  # filter and sort results
    print(f'results sorted: x: {x}, y: {y}')
</code></pre>
<p>Example Output:</p>
<pre><code>[range(0, 12500000), range(12500000, 25000000), range(25000000, 37500000), 
range(37500000, 50000000), range(50000000, 62500000), range(62500000, 75000000), range(75000000, 87500000), range(87500000, 100000000)]
Condition met at:  -15 0
Condition met at:  -3 1
Condition met at:  11 2

Each iteration took: 0.0000 s
Total time:          8.2408 s

results: [[(0, -15), (1, -3), (2, 11)], [], [], [], [], [], [], []]
results sorted: x: (0, 1, 2), y: (-15, -3, 11)

Process finished with exit code 0
</code></pre>
<p>If you had multiple arguments for your <code>worker</code> you would build a "tasks"-list with argument-tuples and exchange <code>pool.map(...)</code> with <code>pool.starmap(...iterable=tasks)</code>. See docs for further details on that.</p>
<hr/>
<p><strong>Process &amp; Queue</strong></p>
<p>If you can't use <code>multiprocessing.Pool</code> for some reason, you have to take 
care of inter-process communication (IPC) yourself, by passing a 
<code>multiprocessing.Queue</code> as argument to your worker-functions in the child-
processes and letting them enqueue their results to be send back to the 
parent. </p>
<p>You will also have to build your Pool-like structure so you can iterate over it to start and join the processes and you have to <code>get()</code> the results back from the queue. More about <code>Queue.get</code> usage I've written up <a href="https://stackoverflow.com/a/53132779/9059420">here</a>.</p>
<p>A solution with this approach could look like this:</p>
<pre><code>def worker(result_queue, batch_range):
    """worker function"""
    result = []
    for x in batch_range:
        y = ((x+5)**2+x-40)
        if y &lt;= 0xf+1:
            print('Condition met at: ', y, x)
            result.append((x, y))
    result_queue.put(result)  # &lt;--


if __name__ == '__main__':

    N_WORKERS = mp.cpu_count()
    X_MAX = 100000000

    result_queue = mp.Queue()  # &lt;--
    batch_sizes = calc_batch_sizes(X_MAX, n_workers=N_WORKERS)
    batch_ranges = build_batch_ranges(batch_sizes)
    print(batch_ranges)

    with context_timer():

        pool = [Process(target=worker, args=(result_queue, batch_range))
                for batch_range in batch_ranges]

        for p in pool:
            p.start()

        results = [result_queue.get() for _ in batch_ranges]

        for p in pool:
            p.join()

    print(f'results: {results}')
    x, y = zip(*chain.from_iterable(results))  # filter and sort results
    print(f'results sorted: x: {x}, y: {y}')
</code></pre>
</div>
<span class="comment-copy">To share data, you can use : - in memory database liek redis or memcache, or a pipe/socket, or get the return value of your process perhapse</span>
<span class="comment-copy">Or check that, does it help ? <a href="https://stackoverflow.com/questions/35157367/how-to-share-data-between-python-processes" title="how to share data between python processes">stackoverflow.com/questions/35157367/…</a></span>
<span class="comment-copy">I am surprised with such a comprehensive answer. Thank you so much indeed. I still cannot make it with <code>Manager()</code> so I updated the question with few lines of code added as you recommend. Anyways, The <code>Multiprocessing.Pool()</code> approach seems interesting. But before taking one of these approaches, I would like to know which one is better for further development of heavier tasks? For example, I am aiming to run a loop project which normally takes 10 days to run as a single process. I want to run that loop over a cluster of 4 PCs connected through a LAN and benefit all CPU cores that they have.</span>
<span class="comment-copy">@Pouya Jamali Please see my edit. Referring to your dropped answer: It's not that you get an exception when you don't use a lock, you just can end up with loss of data when multiple processes happen to read the list at the same time, change it and append it back. The last process out of this group will then override all changes the other processes have made because at the time he read the list, it wasn't updatet with the results from the other processes. In your example just one processes has results to append, so you will never observe it with <i>this</i> data.</span>
<span class="comment-copy">@Pouya Jamali Within the StdLib you would have to use <code>Manager</code> if you need to share data over multiple machines. But you probably should look into <a href="https://dask.org/" rel="nofollow noreferrer">dask</a> for working with a cluster.</span>
<span class="comment-copy">Even with this latest edit I still cannot get the 3 pairs back. Only one pair is returned which is <code>[0] [-15]</code>. What does <i>contextmanager</i> do here?</span>
<span class="comment-copy">Now it is working. Sorry, I was persisting to use my own <i>chunker</i> function. I cannot understand why does it make sense!</span>
