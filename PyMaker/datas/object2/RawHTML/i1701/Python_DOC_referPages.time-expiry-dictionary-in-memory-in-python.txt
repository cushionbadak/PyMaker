<div class="post-text" itemprop="text">
<p>I was just wondering how one might efficiently implement a time expiry dictionary in memory in Python such that key-value pairs expire after a specified time interval.</p>
</div>
<div class="post-text" itemprop="text">
<p>The design pattern to typically do this is not via a dictionary, but via a function or method decorator. The dictionary is managed behind the scenes by the cache.</p>
<p>This answer uses the <a href="https://cachetools.readthedocs.io/en/latest/#cachetools.func.ttl_cache" rel="nofollow noreferrer"><code>ttl_cache</code></a> decorator in <a href="https://pypi.org/project/cachetools" rel="nofollow noreferrer"><code>cachetools==3.1.0</code></a> with Python 3.7. It works a lot like <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a>, but with a <a href="https://en.wikipedia.org/wiki/Time_to_live" rel="nofollow noreferrer">time to live</a>. As for its implementation logic, consider its <a href="https://github.com/tkem/cachetools" rel="nofollow noreferrer">source code</a>.</p>
<pre><code>import cachetools.func

@cachetools.func.ttl_cache(maxsize=128, ttl=10 * 60)
def target(key):
    return get_expensively_computed_value(key)
</code></pre>
<p>If however you insist on using a dictionary, <code>cachetools</code> also has <a href="https://cachetools.readthedocs.io/en/latest/#cachetools.TTLCache" rel="nofollow noreferrer"><code>TTLCache</code></a>.</p>
<pre><code>import cachetools

ttl_cache = cachetools.TTLCache(maxsize=128, ttl=10 * 60)
</code></pre>
</div>
<span class="comment-copy">Do you have a example of what a expiry hash table is? Have your implemented this in another language?</span>
<span class="comment-copy">Nope...I was just wondering what a feasible logic might be</span>
<span class="comment-copy">What happens when they "expire"?</span>
<span class="comment-copy">You may want to check out <a href="https://github.com/tkem/cachetools" rel="nofollow noreferrer">cachetools</a> which has a TTL cache that seems to do what your describing.</span>
