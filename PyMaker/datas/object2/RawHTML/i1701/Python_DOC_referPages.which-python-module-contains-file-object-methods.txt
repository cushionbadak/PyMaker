<div class="post-text" itemprop="text">
<p>While it is simple to search by using <code>help</code> for most methods that have a clear <code>help(module.method)</code> arrangement, for example <code>help(list.extend)</code>, I cannot work out how to look up the method <code>.readline()</code> in python's inbuilt help function.</p>
<p>Which module does <code>.readline</code> belong to? How would I search in <code>help</code> for <code>.readline</code> and related methods?</p>
<p>Furthermore is there any way I can use the interpreter to find out which module a method belongs to in future?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't try to find the module. Make an instance of the class you want, then call help on the method of that instance, and it will find the correct help info for you. Example:</p>
<pre><code>&gt;&gt;&gt; f = open('pathtosomefile')
&gt;&gt;&gt; help(f.readline)
Help on built-in function readline:

readline(size=-1, /) method of _io.TextIOWrapper instance
    Read until newline or EOF.

    Returns an empty string if EOF is hit immediately.
</code></pre>
<p>In my case (Python 3.7.1), it's defined on the type <code>_io.TextIOWrapper</code> (exposed publicly as <code>io.TextIOWrapper</code>, but <code>help</code> doesn't know that), but memorizing that sort of thing isn't very helpful. Knowing how to figure it out by introspecting the specific thing you care about is much more broadly applicable. In this particular case, it's extra important not to try guessing, because the <code>open</code> function can return a few different classes, each with different methods, depending on the arguments provided, including <code>io.BufferedReader</code>, <code>io.BufferedWriter</code>, <code>io.BufferedRandom</code>, and <code>io.FileIO</code>, each with their own version of the <code>readline</code> method (though they all share a similar interface for consistency's sake).</p>
</div>
<div class="post-text" itemprop="text">
<p>From the text of <code>help(open)</code>:</p>
<pre><code>open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.
</code></pre>
<p>See also the section of <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">python's <code>io</code> module documentation on the class hierarchy.</a></p>
<p>So you're looking at <code>TextIOWrapper</code>, <code>BufferedReader</code>, <code>BufferedWriter</code>, or <code>BufferedRandom</code>. These all have their own sets of class hierarchies, but suffice it to say that they share the <code>IOBase</code> superclass at some point - that's where the functions <code>readline()</code> and <code>readlines()</code> are declared. Of course, each subclass implements these functions differently for its particular mode - if you do</p>
<pre><code>help(_io.TextIOWrapper.readline)
</code></pre>
<p>you should get the documentation you're looking for.</p>
<hr/>
<p>In particular, you're having trouble accessing the documentation for whichever version of <code>readline</code> you need, because you can't be bothered to figure out which class it is. You can actually call <code>help</code> on an <em>object</em> as well. If you're working with a particular file object, then you can spin up a terminal, instantiate it, and then just pass it to <code>help()</code> and it'll show you whatever interface is closest to the surface. Example:</p>
<pre><code>x = open('some_file.txt', 'r')
help(x.readline)
</code></pre>
</div>
<span class="comment-copy">That function can exist in any number of modules (or classes). That's the whole point of modules: they provide a namespace in which things can exist. The one you want documentation on depends on your own specific needs. What are you trying to call <code>.readline()</code> <i>on</i>?</span>
<span class="comment-copy">Probably  you want  io.TextIOWrapper.readline</span>
<span class="comment-copy">As mentioned by @wim, the <code>type</code> of a regular call to <code>open('myfile.txt')</code> is an instance of that class</span>
<span class="comment-copy">Side-note: <code>list.extend</code> is not an example of <code>module.method</code>. <code>list</code> is a built-in type, not a module. Also, technically, almost everything found on a module directly is a <i>function</i>, not a <i>method</i> ("methods" are functions defined on classes and therefore accessible through class instances; top-level functions on a module aren't usually part of a class).</span>
