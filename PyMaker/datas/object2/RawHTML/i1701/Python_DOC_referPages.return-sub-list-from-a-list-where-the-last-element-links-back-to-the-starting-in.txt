<div class="post-text" itemprop="text">
<p>How can you return a sub list from a list returning 3 consecutive elements where the last element links back to the first given any index into the list?</p>
<p>For example, given index <code>3</code> for <code>list = [1,2,3,4,5]</code>, would return <code>[4,5,1]</code>. Or given index <code>4</code> with list = <code>[1,2,3,4,5]</code>, would return <code>[5,1,2]</code>.</p>
<p>Options I have:</p>
<pre><code>1. return list[index:] + list[:index+3]
2. return list[index:index+3] + list[:len(list)-index]
3. return list[index+3:] + list[:len(list)-index]
4. return list[index:index+3] + list[:max(0 , -1*(len(list)-index-3))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Typical use case for the <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">modulo operator <code>%</code></a>:</p>
<pre><code>lst = [1,2,3,4,5]  # do not shadow built-in 'list'

i = 3
[lst[x % len(lst)] for x in range(i, i+3)]
# [4, 5, 1]

i = 4
[lst[x % len(lst)] for x in range(i, i+3)]
# [5, 1, 2]
</code></pre>
<p>From your given options, the last one (4.) is the one that yields the same results:</p>
<pre><code>lst[i:i+3] + lst[:max(0 , -1*(len(lst)-i-3))]
</code></pre>
<p>This you can easily confirm by simply trying it out ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">cycle</a>, from the documentation:</p>
<blockquote>
<p>Make an iterator returning elements from the iterable and saving a
  copy of each. When the iterable is exhausted, return elements from the
  saved copy.</p>
</blockquote>
<p><strong>Code:</strong></p>
<pre><code>from itertools import cycle, islice

lst = [1, 2, 3, 4, 5]


def get(l, index, length=3):
    return list(islice(cycle(l), index, index + length))


print(get(lst, 3))
print(get(lst, 4))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[4, 5, 1]
[5, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like:</p>
<pre><code>def return_consecutive(a, index, n=3):
    while index &gt; len(a):
        index -= len(a)
    a.extend(a)
    return a [index:index + n]

return_consecutive(a, 3)
[4, 5, 1]
return_consecutive(a, 4)
[5, 1, 2]
return_consecutive(a, 6)
[2, 3, 4]
</code></pre>
<p>This also works for values greater than the length of the list</p>
</div>
<div class="post-text" itemprop="text">
<p>Im suggesting one method but this involves generating a list twice the size of your current list</p>
<pre><code>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; def roundlist(l,index,value):
...     return (l+l)[index:index+value]
... 
&gt;&gt;&gt; roundlist(l,3,3)
[4, 5, 1]
&gt;&gt;&gt; roundlist(l,4,3)
[5, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can easily be achieved using <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.roll.html" rel="nofollow noreferrer">np.roll</a>:</p>
<pre><code>lst = [1,2,3,4,5]

def roll_n(x, index, length=3):
    return np.roll(x,-index)[:length].tolist()

roll_n(lst,3)
[4, 5, 1]

roll_n(lst,4)
[5, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are other ways. For example, you can use <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> via <a href="https://docs.python.org/3/library/collections.html#collections.deque.rotate" rel="nofollow noreferrer"><code>deque.rotate</code></a> and then use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a>:</p>
<pre><code>from collections import deque
from itertools import islice

L = [1,2,3,4,5]
k, n = -3, 3

dq = deque(L)
dq.rotate(k)
res = list(islice(dq, 0, n))

[4, 5, 1]
</code></pre>
</div>
<span class="comment-copy">If you already have the answers, then what is it that you want to know?</span>
<span class="comment-copy">I don't have the answer. I have options out of these one is true.</span>
<span class="comment-copy">@MayankPorwal It is totally reasonable to ask which way is best or is there a better way</span>
<span class="comment-copy">@Chris_Rands Thanks. Can you plz help me on this that which one will be best suited option?</span>
<span class="comment-copy">@AlbinPaul, I don't work for udemy. If a question is poorly worded or written, this is independent of an external udemy course. They are not related.</span>
<span class="comment-copy">Thanks for the help. I want to know that out of given option which one is best suited one?</span>
<span class="comment-copy">The last one is the correct one. Amended my answer.</span>
