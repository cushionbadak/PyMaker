<div class="post-text" itemprop="text">
<p>I have defined a recursive function <code>delete()</code> that takes in two parameters:</p>
<ul>
<li>lst : of type <code>list</code></li>
<li>to_delete : a value that needs to be removed from the list</li>
</ul>
<p>However, I have used the function <code>del()</code>, one that we haven't learned yet. So I am wondering whether there is a simpler way to output the same solution without the use of the function <code>del()</code></p>
<p>This is my code: </p>
<pre><code>def delete(lst, to_delete):
    """
    parameters : lst of type list
                 to_delete : represents a value one wants to delete from the list
    returns : another list with the same elements minus the ones one asks to delete
    """
    if not lst:
        return []
    else:
        if lst[0] == to_delete:
            del lst[0]
            return delete(lst[1:], to_delete)
        return [lst[0]] + delete(lst[1:], to_delete)

print(delete([1,2,3,4,5,5,6,5,7,5], 5))
</code></pre>
<p>Output:</p>
<pre><code>&gt; [1,2,3,4,6]       #where is 7 ?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>7 is missing, because you return <code>delete(lst[1:], to_delete)</code> even when you just <code>del</code>eted <code>lst[0]</code>: You should use <code>delete(lst[0:], to_delete)</code> here.</li>
<li>The alternative is <em>not</em> to <code>del</code> the 0th element and <em>just</em> return <code>delete(lst[1:], to_delete)</code>.</li>
<li>Instead of doing this recursively, you can also just use a list comprehension:</li>
</ul>
<p>.</p>
<pre><code>def delete(lst, to_delete):
    return [element for element in lst if element != to_delete]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Using Recursion</h3>
<p>Even with recursion, you don't need to use <code>del</code>:</p>
<pre><code>def delete(lst, to_delete):
    """
    parameters : lst of type list
                to_delete : represents a value one wants to delete from the list
    returns : another list with the same elements minus the ones one asks to delete
    """
    if not lst:
        return []
    if lst[0] == to_delete:
        return delete(lst[1:], to_delete)
    return [lst[0]] + delete(lst[1:], to_delete)
</code></pre>
<p>As you can see, you are repeating yourself a bit (<code>delete(lst[1:], to_delete)</code> is used twice), so you can shorten this to:</p>
<pre><code>def delete(lst, to_delete):
    """
    parameters : lst of type list
                to_delete : represents a value one wants to delete from the list
    returns : another list with the same elements minus the ones one asks to delete
    """
    if not lst:
        return []
    start = [] if lst[0] == to_delete else [lst[0]]
    return start + delete(lst[1:], to_delete)
</code></pre>
<p>I don't know about its performance though.</p>
<h3>No Recursion</h3>
<p>If you don't need to use recursion, you can use list comprehensions for much less code:</p>
<pre><code>def delete(lst, to_delete):
    return [x for x in lst if x != to_delete]
</code></pre>
<p>In case you don't know list comprehensions well, this is logically equivalent to the following:</p>
<pre><code>def delete(lst, to_delete):
    res = []
    for x in lst:
        if x != to_delete:
            res.append(x)
    return res
</code></pre>
<p><strong>EDIT:</strong> I missed it, but the reason you don't see <code>7</code> in the output is, that <code>del lst[0]</code> already removes the first value from the list and so, you are missing the "new" first value of the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be interested in recursion. Recursion is a functional heritage and so I will give you a glimpse of a functional perspective on the problem. Below, <code>delete</code> is a specialization of <code>filter</code>, which is a specialization of <code>reduce</code>, a simple recursive form -</p>
<pre><code>def reduce (f, state = None, xs = [], i = 0):
  if i &gt;= len (xs):
    return state
  else:
    return reduce \
      ( f
      , f (state, xs[i], i)
      , xs
      , i + 1
      )

def filter (f, xs = []):
  return reduce \
    ( lambda acc, x, i:
        acc + [x] if f (x) else acc
    , []
    , xs
    )

def delete (q, xs = []):
  return filter \
    ( lambda x: q != x
    , xs
    )

print (delete (5, [ 1, 2, 5, 3, 5, 5, 2, 3, 1, 5, 1 ]))
# [1, 2, 3, 2, 3, 1, 1]

print (delete ('x', 'abxcdxefxghxi'))
# ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
</code></pre>
<p>Functional style is not the idiomatic style of Python. Those wishing to explore functional style in Python are not completely ignored however. You can find <code>reduce</code> and <code>filter</code> (among many other useful functions) tucked away in Python's <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools</a> module.</p>
<p>The definitions of <code>reduce</code> and <code>filter</code> here are my own. If you use <code>functools</code>, you'll want to read up on specific behaviors more closely.</p>
</div>
<div class="post-text" itemprop="text">
<p>It would be much simpler to <strong>recreate</strong> your list without the unwanted items:</p>
<pre><code>def delete(lst, to_delete):
    return [x for x in lst if x!=to_delete]

print(delete([1,2,3,4,5,5,6,5,7,5], 5))
# [1,2,3,4,6,7]
</code></pre>
<hr/>
<p>Correcting your code (but leaving recursion out of it) would look like this:</p>
<pre><code>def delete(lst, to_delete):
    """
    parameters : lst of type list
                 to_delete : represents a value one wants to delete from the list
    returns : another list with the same elements minus the ones one asks to delete
    """
    if not lst:
        return []
    else:
        res = []
        for item in lst:
            if item == to_delete:
                continue
            else:
                res.append(item)
        return res
</code></pre>
<p>which has the same result.</p>
<hr/>
<p>Finally, the <strong>recursive</strong> option which I highly discourage for this application is the following:</p>
<pre><code>def delete(lst, to_delete, res=[]):
    """
    parameters : lst of type list
                 to_delete : represents a value one wants to delete from the list
    returns : another list with the same elements minus the ones one asks to delete
    """
    if not lst:
        return res
    else:
        item = lst[0]
        if item != to_delete:
            res.append(item)
        return delete(lst[1:], to_delete, res=res)
</code></pre>
</div>
<span class="comment-copy">Is recursion mandatory?</span>
<span class="comment-copy">of utter importance :)</span>
<span class="comment-copy">The only answer here that respects OP's use of recursion and explained why it failed :)</span>
