<div class="post-text" itemprop="text">
<p>I want to extract significant digit of 7 from <code>XX=0.0007</code></p>
<p>The code is as follows</p>
<pre><code>XX=0.0007
enX1=XX//10**np.floor(np.log10(XX));
</code></pre>
<p>But <code>XX</code> becomes <code>6</code>not <code>7</code>. Can anyone help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>In some sense, you were lucky to start out with the value <code>0.0007</code>. As it turns out, that value is one of the (many!) decimal values that cannot be represented <em>exactly</em> in a floating point format.</p>
<p>A floating point number gets usually stored in the common <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">IEEE-754 format</a> as powers of 2. Just like a whole number such as 175 is stored as the sum of bits with increasing powers-of-two values (165 = 128 + 32 + 4 + 1), fractions are stored as a sum of 1/power-of-two numbers. That means that a value of 1/2, 1/4, and 1/65536 can be stored exactly (and sums thereof, such as 3/4), but your <code>0.0007</code> can <em>not</em>. Its closest value is actually 0.0000699999999999999992887633748495. ("Closest" in the sense that adding just one more one-bit at the end will make it slightly <em>larger</em> than 0.0007, and the difference is ever so slightly larger than this lower one.)</p>
<p>In your calculation, you use the double divide slash <code>//</code>, which instructs Python to do an integer division and <em>discard</em> the fractional part. So while the intermediate calculation is correct and you get something like <code>6.99999...</code>, this gets <em>truncated</em> and you end up with <code>6</code>.</p>
<p>If you use a <em>single</em> slash, the result will keep its (exact!) decimals but Python will <em>represent</em> it as <code>7.0000</code>, give or take a few zeroes. By default, Python displays only a small number of decimals.</p>
<p>Note that this still "is" not the exact value <code>7</code>. The calculation starts out with an imprecise number, and although there may be some intermediate rounding here and there, there is only a small chance you end up with a <em>precise</em> integer. Again, not for all decimals, but for a large number of them. Other fractional values may be stored fractionally <em>larger</em> than the value you enter – <code>0.0004</code>, for example<sup>a</sup> – but the underlying 'problem' of accuracy is also present there. It's just not as visible as with yours.</p>
<p>If you want a nearest integer result, use a single divide slash for the exact calculation, followed by <code>round</code> to force the number to the nearest integer anyway.</p>
<p><sup>a</sup> To be precise, as somewhere about 0.000400000000000000019168694409544. After your routine, Python will <em>display</em> it as <code>4</code> but internally it's still just a bit larger than that.</p>
</div>
<span class="comment-copy">what if <code>xx = 0.00054</code></span>
<span class="comment-copy">Don't use a double slash.</span>
<span class="comment-copy">You are such a good buy!!! Thank you very much!!!</span>
<span class="comment-copy">@김민재: if this answered your question, consider <i>accepting</i> it. See <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a> in the <a href="https://stackoverflow.com/help">Help center</a>.</span>
