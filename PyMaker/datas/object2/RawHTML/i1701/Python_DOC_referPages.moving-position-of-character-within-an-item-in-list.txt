<div class="post-text" itemprop="text">
<p>If i had a list e.g. </p>
<pre><code>['Hello', 'what', 'is', 'your', 'name'] 
</code></pre>
<p>what method lets you move the position of a character within the item itself and store it. So <code>'Hello'</code> could be changed to <code>'elloH'</code> by moving first character to the end and the same applied to rest of the items. </p>
</div>
<div class="post-text" itemprop="text">
<p>just rebuild the list and generate new strings with slicing &amp; addition:</p>
<pre><code>lst = ['Hello', 'what', 'is', 'your', 'name']

result = [x[1:]+x[0] if x else "" for x in lst]
</code></pre>
<p>result:</p>
<pre><code>['elloH', 'hatw', 'si', 'oury', 'amen']
</code></pre>
<p>(note the ternary expression which allows robustness to empty strings, since int the case of empty strings <code>x[0]</code> would raise an <code>IndexError</code>. Without a ternary expression, we could use <code>[x[1:]+x[0:1] for x in lst]</code> which does the same thing)</p>
</div>
<div class="post-text" itemprop="text">
<p>Check the below code :</p>
<pre><code>mylist = ['Hello', 'what', 'is', 'your', 'name']

mylist = [(mylist[i][1:] + mylist[i][0:1]) for i in range(0,len(mylist))]

print(mylist)
</code></pre>
<p>Output : </p>
<pre><code>['elloH', 'hatw', 'si', 'oury', 'amen']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://python-reference.readthedocs.io/en/latest/docs/brackets/slicing.html" rel="nofollow noreferrer">slicing</a> and indexing:</p>
<pre><code>def shift(s):
    return s[1:] + s[0]

data = ['Hello', 'what', 'is', 'your', 'name']

result = [shift(s) for s in data]

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['elloH', 'hatw', 'si', 'oury', 'amen']
</code></pre>
<p>The statement <code>result = [shift(s) for s in data]</code> is known as a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, is the <em>equivalent</em> of the following:</p>
<pre><code>result = []
for s in data:
    result.append(shift(s))
</code></pre>
<p>Finally another alternative is to use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map</a>:</p>
<pre><code>result = list(map(shift, data))
</code></pre>
<p>The function map applies shift to each element of data, but it returns (in Python 3) an iterable so you need to convert it to list.</p>
</div>
<span class="comment-copy">string slicing in list comprehension maybe</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/48607319/rotating-strings-in-python" title="rotating strings in python">stackoverflow.com/questions/48607319/rotating-strings-in-python</a></span>
<span class="comment-copy">Why not iterate over the list directly without <code>range</code>?</span>
<span class="comment-copy">the <code>[0:1]</code> part is (maybe unwillingly) protecting against empty strings, but the part with <code>range</code> and indices is very unpythonic</span>
<span class="comment-copy">@bereal Iterating over the list will also do. Thanks for the suggestion.</span>
