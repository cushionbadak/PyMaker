<div class="post-text" itemprop="text">
<p>I have a DateFrame with a DateTimeIndex, i.e.</p>
<pre><code>import pandas as pd
dates = pd.date_range('2018-04-01', periods=96, freq='15T', tz='Australia/Sydney', name='timestamp')
df = dates.to_frame(index=False)
df.set_index(dates.name, inplace=True)
</code></pre>
<p>I want to create a column with an 0/1 indicator column which is 1 during summer time and 0 during winter, but I cannot find the relevant dst / is_dst attribute, i.e. I want something like</p>
<pre><code>df['is_dst'] = df.index.is_dst()
</code></pre>
<p>can anyone advise that the correct method / property is. Or Do I need to covert to a different 'datetime' class?</p>
<p>I need something general - i.e. work for any timezone including say 'Australia/Brisbane' which doesn't have daylight savings. I'd prefer not to have to parse out the timezone offset and try and determine if it's summer / winter.</p>
</div>
<div class="post-text" itemprop="text">
<p>It have in <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Timestamp.dst.html" rel="nofollow noreferrer"><code>pandas</code></a> </p>
<pre><code>df.index.map(lambda x : x.dst())
</code></pre>
<p>After a small change can yield the Boolean </p>
<pre><code>df.index.map(lambda x : int(x.dst().total_seconds()!=0))
Out[104]: 
Int64Index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0],
           dtype='int64', name='timestamp')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm guessing that Wen's method may be a bit faster, but heres a way of working with the underlying Python <code>datetime</code> objects with the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timetuple" rel="nofollow noreferrer"><code>isdst</code> attribute from <code>datetime.timetuple</code></a>:</p>
<pre><code>&gt;&gt;&gt; is_dst = [x.timetuple().tm_isdst for x in df.index.to_pydatetime()]
&gt;&gt;&gt; pd.Series(is_dst).head()
0    1
1    1
2    1
3    1
4    1
dtype: int64
&gt;&gt;&gt; pd.Series(is_dst).tail()
91    0
92    0
93    0
94    0
95    0
dtype: int64
</code></pre>
<p>Example for a single value:</p>
<p><code>.timetuple()</code> returns a <code>time.struct_time</code>; </p>
<blockquote>
<p>The tm_isdst flag of the result is set according to the dst() method: tzinfo is None or dst() returns None, tm_isdst is set to -1; else if dst() returns a non-zero value, tm_isdst is set to 1; else tm_isdst is set to 0.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; df.index[0].to_pydatetime().timetuple()
time.struct_time(tm_year=2018, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=1)
</code></pre>
<p>The constructor will simply <a href="https://github.com/python/cpython/blob/88cbea4c6ff4987ce31f4fe6f73c2d04a3d37829/Lib/datetime.py#L1661" rel="nofollow noreferrer">check</a> if the date's <code>.dst()</code> attribute is None, nonzero, or some nonzero value:</p>
<pre><code>    def timetuple(self):
        "Return local time tuple compatible with time.localtime()."
        dst = self.dst()
        if dst is None:
            dst = -1
        elif dst:
            dst = 1
        else:
            dst = 0
</code></pre>
</div>
<span class="comment-copy">Maybe this can help your case: <a href="https://stackoverflow.com/questions/44124436/python-datetime-to-season" title="python datetime to season">stackoverflow.com/questions/44124436/python-datetime-to-season</a></span>
<span class="comment-copy">Thanks @SanchitKumar, that's useful although I prefer the accepted answer as it gives me the datetime information. The answer you link assumes summer / winter transition is start / end of month</span>
<span class="comment-copy">It has the method in pandas :-)</span>
