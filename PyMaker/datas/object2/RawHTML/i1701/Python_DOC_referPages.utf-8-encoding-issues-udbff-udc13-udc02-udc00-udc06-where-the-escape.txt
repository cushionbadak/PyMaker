<div class="post-text" itemprop="text">
<p>Having issues with encoding (\udbff, \udc13, \udc02, \udc00,  \udc06). I've tried looking at this online and tried the following</p>
<pre><code> print('\udc13'.encode('utf8','surrogateescape'))
</code></pre>
<p>This results in the following error:</p>
<blockquote>
<p>UnicodeEncodeError: 'utf-8' codec can't encode character '\udc13' in position 0: surrogates not allowed</p>
</blockquote>
<p>Any suggestions on how I can avoid this range. I keep finding new ones so escaping each one with regex doesn't seem like a sustainable solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had to escape the full range <code>u"([\udc00-\udc69])|"</code> to get ride of it in the end. I guess I should probably expand it to udcff or something to make it more complete!</p>
</div>
<span class="comment-copy">Can't you use <code>'ignore'</code> or <code>'replace'</code>? <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer">docs</a>. I mean if you think of escaping things, using replace or some other feature might be better?</span>
<span class="comment-copy">@Torxed I tried that. Doesn't seem to have any effect.</span>
<span class="comment-copy"><code>'\udc13'.encode('utf8','backslashreplace')</code> for instance, should keep the character <i>as-is</i> and simply escape it with an additional backslash. You're telling me, that doesn't work?</span>
<span class="comment-copy">well I apply it to all values in a column. It works if I run it as a standalone example on the terminal. I apply it to the column the following way(cdf here is the column):   <code>cDF.apply(lambda x: x.encode(encoding="utf-8",errors='backslashreplace'))</code></span>
<span class="comment-copy">Surrogates range from U+D800 to U+DFFF.  U+D800 to U+DBFF are "high" surrogates and U+DC00 to U+DFFF are "low" surrogates.  They are used to encode Unicode codepoints above U+FFFF in UTF-16.  They should normally only appear as a pair of of them in high/low order in UTF-16-<i>encoded</i> data.  Why do you have them in your Unicode strings?</span>
<span class="comment-copy">good question! I've never come across surrogates before! I am just trying to clean up some really messy data from third party sources and they have that in their strings. Is the -1 because of the editing? :/ why is this question a bad question?</span>
<span class="comment-copy">I don’t know. I guess this answer doesn’t completely answer the question. It looks like you use a regular expression but the code isn’t complete or explained. The question doesn’t have an <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. The real problem might be how the data was read in the first place.</span>
