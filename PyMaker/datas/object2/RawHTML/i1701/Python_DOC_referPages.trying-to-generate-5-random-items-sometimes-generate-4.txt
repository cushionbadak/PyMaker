<div class="post-text" itemprop="text">
<pre><code>import random

twoDimMap = [["H", "-", "-", "-", "-", "-"], ["-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-"], ["-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-"], ["-", "-", "-", "-", "-", "-"]]

items = 0

while items &lt;= 4:
    test = random.randrange(0, 3)
    if test == 0:
        twoDimMap[random.randrange(0, 5)][random.randrange(0, 5)] = "S"
    if test == 1:
        twoDimMap[random.randrange(0, 5)][random.randrange(0, 5)] = "R"
    if test == 2:
        twoDimMap[random.randrange(0, 5)][random.randrange(0, 5)] = "*"
    #  I couldn't think of an easier way to do this
    if twoDimMap[0][0] != "H":
        twoDimMap[0][0] = "H"
        items -= 1
    items += 1

print(twoDimMap)
</code></pre>
<p>Title explains it all pretty much (even though I know it isn't too descriptive :/), I am trying to make a game where the hero starts on the map at position [0],[0]. I can't work out why the hell I'm sometimes generating fewer items than other times.</p>
<p>Edit: Thanks for all of your feedback, and sorry for wasting your time with my stupid mistake :/. I'm going to blame it on the lack of coffee.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're only checking if the player is overwritten, not if the objects are, you should first get the random coordinates and then check if something's there.</p>
<pre><code>while items &lt;= 4:
    test = random.randrange(0,3)
    x = random.randrange(0, 5)
    y = random.randrange(0, 5)
    if twoDimMap[x][y] == '-':
        if test == 0:
            twoDimMap[x][y] = "S"
        if test ==1:
            twoDimMap[x][y] = "R"
        if test == 2:
            twoDimMap[x][y] = "*"
        items += 1
</code></pre>
<p>a more compact solution as suggested in the comments is</p>
<pre><code>while items &lt;= 4:
    x = random.randrange(0, 5)
    y = random.randrange(0, 5)
    if twoDimMap[x][y] == '-':
        twoDimMap[x][y] = random.choice('SR*')
        items += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since the problem space is so small, it's probably not a terrible idea to just generate three of them that are <em>guaranteed</em> unique.</p>
<pre><code>valid_locations = (tup for tup in itertools.product(range(5), repeat=2) if tup != (0, 0))
items = ["S", "R", "*"]
choices = [(random.choice(items), loc) for loc in random.sample(valid_locations, 3)]

for item, (x, y) in choices:
    twoDimMap[y][x] = item
</code></pre>
<p><code>random.sample(collection, n)</code> guarantees <code>n</code> non-duplicated random results from <code>collection</code>. <code>random.choice(collection)</code> gives you a random element from <code>collection</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes <code>randrange(0, 5)</code> returns the same thing several times, thus some point is reassigned.</p>
<p>This could be solved by generating the coordinates together with the type and only executing the rest of the loop if that point is currently unoccupied. This would also eliminate the need for a separate (0,0) test-case.</p>
</div>
<div class="post-text" itemprop="text">
<p>To avoid overwriting previously placed items, you can use <code>random.sample</code>, which will pick random items from the input sample without replacement.</p>
<p>There are several other convenient <a href="https://docs.python.org/3/library/random.html#functions-for-sequences" rel="nofollow noreferrer">functions for sequences</a> in the <code>random</code> module.</p>
<p>I've rewritten your code and turned it into a function that can generate rectangular maps of any size and number and type of items. </p>
<pre><code>import random

def make_map(width, height, number_of_items, items='SR*'):
    """Create a map with the Hero in top left corner
       and random items spread around"""
    # build an empty map using a nested list comprehension
    game_map = [['-' for x in range(width)] for y in range(height)]
    # place the hero at coordinates 0, 0
    game_map[0][0] = 'H'
    # possible item positions, excluding 0, where the hero is.
    positions = range(1, width * height)
    # loop over n random choices from the available positions
    for pos in random.sample(positions, number_of_items):
        # convert pos to x, y coordinates using modular arithmetic
        x, y = pos % width, pos // width  
        # select a random item to and place it at coordinates x, y
        game_map[y][x] = random.choice(items)

    return game_map

# generate a map. You can change the input arguments to vary size and items
game_map = make_map(6, 6, 5)
# convert the nested list to one string and print
print('\n'.join(''.join(line) for line in game_map))
</code></pre>
<p>We use modular arithmetic to convert the position value which is a number in the range 1 to 36 into x,y coordinates on a 6Ã—6 grid. This is a very common and useful operation in computer graphics.</p>
<pre><code>x, y = pos % width, pos // width  
</code></pre>
<p>This is such a common operation that python has a built-in function you can use for this exact thing.</p>
<pre><code>y, x = divmod(pos, width)
</code></pre>
<p>I will not explain all of the code, but I encourage you to read through the answers and try to understand how every line works. You can learn a lot from reading other people's solutions to the same problem as you have solved yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Less items are generated because there are times where the same coordinates are generated again. One way to avoid this is to check if the location already has an item before assigning it. This way, you will solve the issue of replacing your hero too. </p>
<pre><code>import random

twoDimMap = [["H","-","-","-","-","-"],["-","-","-","-","-","-"],["-","-","-","-","-","-"],["-","-","-","-","-","-"],["-","-","-","-","-","-"],["-","-","-","-","-","-"]]

items = 0
item_list = ['S', 'R', '*']

while items &lt;= 4:
    x = random.randrange(0,5)
    y = random.randrange(0,5)

    if twoDimMap[x][y] == '-':
        twoDimMap[x][y] = item_list[random.randrange(0,3)]
        items += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your map isn't too big, you could use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code></a> to  <a href="https://stackoverflow.com/questions/22229796/choose-at-random-from-combinations">Choose at random from combinations</a>.</p>
<p></p>
<pre><code>twoDimMap = [list(line) for line in """\
H-----
------
------
------
------
------""".split("\n")]

width, height = len(twoDimMap[0]), len(twoDimMap)

allLocations = [(x, y) for x in range(width) for y in range(height) if (x, y) != (0, 0)]

for x, y in random.sample(allLocations, 5):
    case = random.randrange(3)
    twoDimMap[y][x] = "SR*"[case]
</code></pre>
</div>
<span class="comment-copy">What do you mean by "generating fewer items than other times"?</span>
<span class="comment-copy">I need to place 5 items in the list twoDimMap, an example of an instance wherein fewer items were placed is this: [['H', '-', 'S', '-', '-', '-'], ['-', '-', '-', '-', '-', '-'], ['<i>', '-', '-', '-', '</i>', '-'], ['-', '-', '-', '-', '-', '-'], ['S', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-']]</span>
<span class="comment-copy">Do not try to explain more in a comment. You can always <a href="https://stackoverflow.com/posts/53254564/edit">edit</a> your post, you know.</span>
<span class="comment-copy">This is probably caused by randomly getting the same x, y coordinates more than once.</span>
<span class="comment-copy">I bet you <i>generate</i> 5 but one overwrites an earlier. So test if the contents of your new item are <code>-</code> first.</span>
<span class="comment-copy">Or unless something else is going to happen with those <code>if</code>s... you can do <code>twoDimMap[x][y] = random.choice('SR*')</code>. Also, instead of the while, do <code>for items in range(5)</code>... then you can't forget to increment the counter.</span>
<span class="comment-copy">the only problem I saw with changing the <code>while</code> with a <code>for</code> loop is that there would be less objects in the end if you get the same <code>x</code> and <code>y</code>, so the <code>for</code> solution would also require a <code>while</code> inside to generate unrepeated coordinates.</span>
<span class="comment-copy">Ahh... good point... Can still simplify the <code>if</code>s though... maybe just make <code>test = random.choice('SR*')</code> and then assign <code>test</code> inside the single if</span>
<span class="comment-copy">added in the response, thanks</span>
<span class="comment-copy">I was thinking similarly but you don't need <code>itertools.product</code> here... I think you should be able to jump straight to: <code>choices = ((random.choice(items), divmod(pos, 5)) for pos in random.sample(range(1, 25), 5))</code>...</span>
<span class="comment-copy">@JonClements true, and great work avoiding the <code>(0, 0)</code> with that, but it's obviously a bit more of a logical leap to see that.</span>
<span class="comment-copy">Yeah... and if the H isn't going to be the first or last - it's doesn't work... but...</span>
<span class="comment-copy">@JonClements but it's <i>super</i> neat :D</span>
<span class="comment-copy">While this answer is good, giving a way to solve it would be preferable.</span>
<span class="comment-copy">Argh, of course. How did I forget about that :/</span>
