<div class="post-text" itemprop="text">
<p>I am doing a calculation on permutations of things from a generator created by itertools. I have a piece of code in this form (this is a dummy example):</p>
<pre><code>import itertools
import pandas as pd

combos = itertools.permutations('abcdefghi',2)
results = []
i=0

for combo in combos:
    i+=1 #this line is actually other stuff that's expensive
    results.append([combo[0]+'-'+combo[1],i])

rdf = pd.DataFrame(results, columns=['combo','value'])
</code></pre>
<p>Except in the real code, </p>
<ul>
<li>there are several hundred thousand permutations</li>
<li>instead of <code>i+=1</code> I am opening files and getting results of <code>clf.predict</code> where <code>clf</code> is a classifier trained in scikit-learn</li>
<li>in place of <code>i</code> I'm storing a value from that prediction</li>
</ul>
<p>I think the <code>combo[0]+'-'+combo[1]</code> is trivial though.</p>
<p>This takes too long. What should I do to make it faster? Such as:</p>
<p>1) writing better code (maybe I should initialize <code>results</code> with the proper length instead of using <code>append</code> but how much will that help? and what's the best way to do that when I don't know the length before iterating through <code>combs</code>?)</p>
<p>2) initializing a pandas dataframe instead of a list and using <code>apply</code>?</p>
<p>3) using <a href="https://pandas.pydata.org/pandas-docs/stable/enhancingperf.html" rel="nofollow noreferrer">cython</a> in pandas? Total newbie to this.</p>
<p>4) <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">parallelizing</a>? I think I probably need to do this, but again, total newbie, and I don't know whether it's better to do it within a list or a pandas dataframe. I understand I would need to iterate over the generator and initialize some kind of container <a href="https://stackoverflow.com/questions/7972295/python-generator-unpack-entire-generator-in-parallel">before parallelizing</a>.</p>
<p>Which combination of these options would be best and how can I put it together?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>append</code> operation in pandas and <code>for</code> loop are slow. This code avoids using it.</p>
<pre><code>import itertools
import pandas as pd

combos = itertools.permutations('abcdefghi',2)
combo_values = [('-'.join(x[1]), x[0]) for x in enumerate(combos, 1)]

rdf = pd.DataFrame({'combos': [x[0] for x in combo_values],
                    'value': [x[1] for x in combo_values]})
</code></pre>
<p>You can do this for each file and dataframe that you have then use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer">pd.concat</a> to quickly generate results thereafter. You can also add the enumeration of the permutations afterward if you want.</p>
</div>
<span class="comment-copy"><code>rdf = pd.DataFrame(itertools.permutations('abcdefghi',2), columns=['combo','value'])</code> best I can think of.</span>
<span class="comment-copy">Actually, that doesn't join the strings. I suspect that's the bottleneck. <code>i</code> is superfluous, you could use <code>enumerate</code></span>
<span class="comment-copy">No that's the thing, the i+=1 is just a dummy example. In reality, what's there is very expensive. In place of i+=1, I'm opening files from the names in the permutation, reading them in as dataframes, running clf.predict from a classifier trained in sci-kit learn and storing a value from the prediction. That can't really change so I need to make everything else faster and/or parallelize</span>
<span class="comment-copy">@roganjosh I edited the question to try to make this clearer</span>
<span class="comment-copy">"maybe I should initialize results with the proper length instead of using append but how much will that help?" No help at all.</span>
<span class="comment-copy">They don't <code>append</code> to a dataframe.... The dataframe constructor is called after the list is complete.</span>
<span class="comment-copy">They don't use <code>.append</code> on the data-frame. You are still using a "for loop", it's just a list comprehension now. While this might be marginally faster, it isn't really a solution, since almost certainly, the bottleneck is not actually building the list.</span>
<span class="comment-copy">@kevins_1 yes, but it offers no significant advantage. If anything, yours is slower because of the way you are initializing your data-frame, but all of this is pretty irrelevant.</span>
<span class="comment-copy">The advantage is not significant at all. In any event, you haven't even bothered to profile it. What does this have to do with <code>.apply</code>? You seem to be thoroughly confused. What in that link do you think is relevant to your answer?</span>
<span class="comment-copy">Where does the OP call <i>apply</i>? Whatever you've taken away from that article, I'm pretty sure you've got some concepts confused.</span>
