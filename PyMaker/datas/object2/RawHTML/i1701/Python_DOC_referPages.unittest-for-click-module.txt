<div class="post-text" itemprop="text">
<p>I wrote a simple command line utility that accepts a text file and searches for a given word in it using the click module.</p>
<p><strong>sfind.py</strong></p>
<pre><code>import click
@click.command()
@click.option('--name', prompt='Word or string')
@click.option('--filename', default='file.txt', prompt='file name')
@click.option('--param', default=1, prompt="Use 1 for save line and 2 for word, default: ")
def find(name, filename, param):
    """Simple program that find  word or string at text file and put it in new"""
    try:
        with open(filename) as f, open('result.txt', 'w') as f2:
            count = 0
            for line in f:
                if name in line:
                    if param == 1:
                        f2.write(line + '\n')
                    elif param == 2:
                        f2.write(name + '\n')
                    count += 1
            print("Find: {} sample".format(count))
            return count
    except FileNotFoundError:
        print('WARNING! ' + 'File: ' + filename + ' not found')


if __name__ == '__main__':
    find()
</code></pre>
<p>Now I need to write a test using unittest (using unittest is required).</p>
<p><strong>test_sfind.py</strong></p>
<pre><code>import unittest
import sfind

class SfindTest(unittest.TestCase):
    def test_sfind(self):
        self.assertEqual(sfind.find(), 4)


if __name__ == '__main__' :
    unittest.main()
</code></pre>
<p>When I run the test:</p>
<pre><code>python -m unittest test_sfind.py
</code></pre>
<p>I get an error</p>
<blockquote>
<p>click.exceptions.UsageError: Got unexpected extra argument (test_sfind.py)</p>
</blockquote>
<p>How can I test this click command?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can not simply call a click command and then expect it to return.  The decorators applied to make a click command considerably change the behavior of the function.  Fortunately the click frameworks provides for this through the <a href="http://click.palletsprojects.com/en/7.x/testing/" rel="nofollow noreferrer"><code>CliRunner</code></a> class.</p>
<p>Your command can be tested via unittest with something like this:</p>
<pre><code>import unittest
import sfind
from click.testing import CliRunner

class TestSfind(unittest.TestCase):

    def test_sfind(self):

        runner = CliRunner()
        result = runner.invoke(
            sfind.find, '--name url --filename good'.split(), input='2')
        self.assertEqual(0, result.exit_code)
        self.assertIn('Find: 3 sample', result.output)
</code></pre>
</div>
<span class="comment-copy">You have to <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock</a> <code>sys.argv</code> for the test.</span>
<span class="comment-copy">Is it possible using only true unittest without the use any other libraries?</span>
<span class="comment-copy">I think the correct way to run it is <code>python -m unittest test_sfind.SfindTest</code></span>
<span class="comment-copy">I tried this method but the exact same error</span>
<span class="comment-copy">Ah ok...but you're not passing any argument to your <code>find()</code> function, whereas it takes 3...</span>
<span class="comment-copy">I try this, unexpected extra argument error disappeared. But result -     <code>self.assertEqual(0, result.exit_code) AssertionError: 0 != 1</code></span>
<span class="comment-copy">That means your code under test had an error.  Inspect the <code>result</code> for the error message.</span>
<span class="comment-copy">What should I replace this code with:` --name url --filename good'.split()` ?</span>
<span class="comment-copy">That is what is passed in.  Basically that is what would normally be in the list <code>sys.argv</code>.  So what do you want to send in to test your program?  Put it there.</span>
<span class="comment-copy">Then I added print(result) before self.assert I saw an error in the console <code>&lt;Result TypeError("find() got multiple values for argument 'name'",)&gt;</code></span>
