<div class="post-text" itemprop="text">
<p>I am trying to convert a string to a list.</p>
<pre><code>stringvalue = '[54.0, country, state]'
</code></pre>
<p>I came across many answers but all of them the strings will have quotes like this</p>
<pre><code>[54.0, 'country', 'state']
</code></pre>
<p>So my idea is I want a list like this</p>
<pre><code>[54.0, country, state]
</code></pre>
<p>Basically, the country and state are variables which will get resolved in the program.</p>
<p>After looking around I came across an answer which removes the quotes(') around the string using this</p>
<pre><code>class MyStr(str):
    """ Special string subclass to override the default representation method
        which puts single quotes around the result.
    """
    def __repr__(self):
        return super(MyStr, self).__repr__().strip("'")

MyStr(stringvalue)
</code></pre>
<p>This resulted in output that looks like list (without the quotes)</p>
<pre><code>[54.0, country, state]
</code></pre>
<p>But the type is <code>__main__.MyStr</code>.- not list what I am looking</p>
<p>Any thoughts on how to approach this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Start by extracting the fields:</p>
<pre><code>import re
fields = re.findall(r"(?:([^,\s]+)\s*,?\s*)+?", stringvalue[1:-1])
#['54.0', 'country', 'state']
</code></pre>
<p>Get a reference to the dictionary of the local variables:</p>
<pre><code>country = 'USA'
state = 'MA'
variables = vars()
</code></pre>
<p>Lookup the fields in the dictionary. If they are there, fetch their values. If not, treat them as numbers:</p>
<pre><code>[variables[x] if x in variables else float(x) for x in fields]
#[54.0, 'USA', 'MA']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this one.</p>
<pre><code>mystr = 'random'
mylist = []
for char in mystr:
    mylist += char

print(mylist)
</code></pre>
</div>
<span class="comment-copy">Do you know the values of country and state variables?</span>
<span class="comment-copy"><code>eval(stringvalue)</code> will work as long as <code>country</code> and <code>state</code> are already defined, or <code>eval(stringvalue, locals=dict(country='US', state='GA'))</code></span>
<span class="comment-copy">So <code>country</code> and <code>state</code> are <i>placeholdersâ€½</i> Then you want a simple substring replacement, or you want to write a mini parser for your mini expression language which can evaluate custom keywords like this.</span>
<span class="comment-copy">@deceze yes country and state are like placeholders.</span>
<span class="comment-copy">@martineau Sorry, you're absolutely correct. I should have said: <code>eval(stringvalue, {}, dict(country='US', state='GA'))</code>. See <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><b><code>eval</code></b></a>. I've never understood why some functions don't have keyword arguments when it seems obvious they should.</span>
<span class="comment-copy">Welcome to Stack Overflow! It's good practice on Stack Overflow to add an explanation as to why your solution should work. For more information read <a href="//stackoverflow.com/help/how-to-answer">How To Answer</a>.</span>
