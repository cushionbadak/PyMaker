<div class="post-text" itemprop="text">
<p>From what I understand, the <code>buffer_size</code> argument to <code>io.BufferedReader</code> is supposed to control the read buffer size passed to the underlying reader.</p>
<p>However, I'm not seeing that behavior. Instead, when I <code>reader.read()</code> the entire file, <code>io.DEFAULT_BUFFER_SIZE</code> is used and <code>buffer_size</code> is ignored. When I <code>reader.read(length)</code>, <code>length</code> is used as buffer size, and the <code>buffer_size</code> argument is again ignored.</p>
<p>Minimal example:</p>
<pre><code>import io

class MyReader(io.RawIOBase):

    def __init__(self, length):
        self.length = length
        self.position = 0

    def readinto(self, b):
        print('read buffer length: %d' % len(b))
        length = min(len(b), self.length - self.position)
        self.position += length
        b[:length] = 'a' * length
        return length

    def readable(self):
        return True

    def seekable(self):
        return False


print('# read entire file')
reader = io.BufferedReader(MyReader(20000), buffer_size=100)
print('output length: %d' % len(reader.read()))

print('\n# read part of file file')
reader = io.BufferedReader(MyReader(20000), buffer_size=100)
print('output length: %d' % len(reader.read(10000)))

print('\n# read beyond end of file file')
reader = io.BufferedReader(MyReader(20000), buffer_size=100)
print 'output length: %d' % len(reader.read(30000))
</code></pre>
<p>Outputs:</p>
<pre><code># read entire file
read buffer length: 8192
read buffer length: 8192
read buffer length: 8192
read buffer length: 8192
read buffer length: 8192
output length: 20000

# read part of file file
read buffer length: 10000
output length: 10000

# read beyond end of file file
read buffer length: 30000
read buffer length: 10000
output length: 20000
</code></pre>
<p>Am I misunderstanding how the BufferedReader is supposed to work?</p>
</div>
<div class="post-text" itemprop="text">
<p>The point of <code>BufferedIOReader</code> is to keep an internal buffer, and you set the size of that buffer. That buffer is used to satisfy <em>smaller</em> reads, to avoid many read calls on a slower I/O device.</p>
<p>The buffer does not try to limit the size of reads, however!</p>
<p>From the <a href="https://docs.python.org/3/library/io.html#io.BufferedReader" rel="nofollow noreferrer"><code>io.BufferedIOReader</code> documentation</a>:</p>
<blockquote>
<p>When reading data from this object, a larger amount of data may be requested from the underlying raw stream, and kept in an internal buffer. The buffered data can then be returned directly on subsequent reads.</p>
</blockquote>
<p>The object inherits from <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase" rel="nofollow noreferrer"><code>io.BufferedIOBase</code></a>, which states:</p>
<blockquote>
<p>The main difference with <code>RawIOBase</code> is that methods <code>read()</code>, <code>readinto()</code> and <code>write()</code> will try (respectively) to read as much input as requested or to consume all given output, at the expense of making perhaps more than one system call.</p>
</blockquote>
<p>Because you called <code>.read()</code> on the object, larger blocks are read from the wrapped object to read all data to the end. The internal buffer that the <code>BufferedIOReader()</code> instance holds doesn't come into play here, you asked for all the data after all.</p>
<p>The buffer would come into play if you read in smaller blocks:</p>
<pre><code>&gt;&gt;&gt; reader = io.BufferedReader(MyReader(2048), buffer_size=512)
&gt;&gt;&gt; __ = reader.read(42)  # initial read, fill buffer
read buffer length: 512
&gt;&gt;&gt; __ = reader.read(123)  # within the buffer, no read to underlying file needed
&gt;&gt;&gt; __ = reader.read(456)  # deplete buffer, another read needed to re-fill
read buffer length: 512
&gt;&gt;&gt; __ = reader.read(123)  # within the buffer, no read to underlying file needed
&gt;&gt;&gt; __ = reader.read()     # read until end, uses larger blocks to read from wrapped file
read buffer length: 8192
read buffer length: 8192
read buffer length: 8192
</code></pre>
</div>
