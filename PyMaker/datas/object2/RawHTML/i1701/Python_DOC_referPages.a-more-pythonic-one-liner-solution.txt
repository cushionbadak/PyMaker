<div class="post-text" itemprop="text">
<p>I am looking for a more Pythonic one-liner to split and flatten lists. The original list looks like this:</p>
<pre><code>negative_list = [['apple strudel', 'apple, orange, pear ice cream']]
</code></pre>
<p>With the above un-processed list, I need to transform it to the following processed list:</p>
<pre><code>negative_list = ['apple strudel', 'apple', 'orange', 'pear ice cream']
</code></pre>
<p>You will notice that 'apple', 'orange', 'pear ice cream' have been split into individual items in the transformed list.</p>
<p>I wrote the following:</p>
<pre><code>negative_list = []
negatives = []
negative_list = [['apple strudel', 'apple, orange, pear ice cream']]
negative_list = [item for sublist in negative_list for item in sublist]
for i in negative_list: 
    if ',' not in i: negatives.append(i.strip())
    else:
        for element in i.split(','): negatives.append(element.strip())
print(negative_list)
print(negatives)
</code></pre>
<p>I tried writing a Pythonic one-liner without declaring so many variables, but with little success. Could someone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this solution, although this is not recommended for production code:</p>
<pre><code>negative_list = [['apple strudel', 'apple, orange, pear ice cream']]

negative_list = sum([elem.split(", ") for elem in negative_list[0]],[])
print(negative_list)
</code></pre>
<p>Output:</p>
<pre><code>['apple strudel', 'apple', 'orange', 'pear ice cream']
</code></pre>
<p>Another way is to use a nested <code>for</code> loop with <code>list-comprehension</code>:</p>
<pre><code>negative_list = [elem.strip() for item in negative_list[0] for elem in item.split(", ")]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> with a generator expression:</p>
<pre><code>from itertools import chain

negative_list = [['apple strudel', 'apple, orange, pear ice cream']]

print(list(chain.from_iterable(x.split(', ') for x in negative_list[0])))
# ['apple strudel', 'apple', 'orange', 'pear ice cream']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this one resolves the problem</p>
<pre><code>x = [['apple strudel', 'apple, orange, pear ice cream'], ["test", "test1, test2, test3"]]

def flatten(x):
    return sum([(x.split(", ")) for x in sum(x, [])], [])

print(flatten(x))
</code></pre>
</div>
<span class="comment-copy">"one-liner" != Pythonic</span>
<span class="comment-copy">Thank you for that, but what do you mean by 'production code'?</span>
<span class="comment-copy">In case you want to ship your program for others to use it. To commercially publish it.</span>
<span class="comment-copy">Do you say that because it is too difficult to understand? It is clever but I certainly find it difficult to understand!</span>
<span class="comment-copy">This may be asking too much - but could you explain the 'negative_list[0]' bit? How do you manage to access all elements of the list by calling the very first element alone?</span>
<span class="comment-copy">sum to flatten lists is an anti-pattern</span>
<span class="comment-copy">This. No reason to check if comma is in the string, as split will return a list of length zero when it doesnâ€™t.</span>
<span class="comment-copy">sum to flatten lists is an anti-pattern</span>
<span class="comment-copy">But I think this is the only way to flatten this in one line as asked in the question</span>
