<div class="post-text" itemprop="text">
<p>Suppose I have normal sync function that gets called a lot in my async application. Does it make any difference if I simply define it as an async function so I can await it, but I don't change its code at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't make a (semantic) difference, a coroutine that doesn't <code>await</code> is still a perfectly valid coroutine that can itself be awaited, passed to <code>asyncio.run</code>, <code>asyncio.create_task</code>, <code>asyncio.gather</code>, and so on.</p>
<p>You might want to add a comment to make it clear to the <em>reader</em> that the function doesn't actually contain any blocking code.</p>
<p>For example, the following code:</p>
<pre><code>while some_condition:
    await coroutine_without_await()
</code></pre>
<p>This code blocks the event loop for as long as the <code>while</code> loop lasts, regardless of the presence of an <code>await</code>.</p>
</div>
<span class="comment-copy">If your function doesn't contain any async code, it usually makes no sense to make this function async. Just leave it regular. As long at it doesn't take much time to execute (and through that doesn't block event loop) just call function regularly in async code. Otherwise use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#executing-code-in-thread-or-process-pools" rel="nofollow noreferrer">executor</a> to avoid blocking event loop. <a href="https://stackoverflow.com/a/33399896/1113207">More detailed answer</a>.</span>
