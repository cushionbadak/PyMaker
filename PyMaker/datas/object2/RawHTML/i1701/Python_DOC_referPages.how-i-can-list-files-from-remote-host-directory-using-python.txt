<div class="post-text" itemprop="text">
<p>I need get the list of files from a <strong>remote host directory</strong>, running the code in my local machine.</p>
<p>Is something like <code>os.listdir()</code> at <strong>remote host machine</strong>, NOT is <code>os.lisdir()</code> in the local machine that runs the python code. </p>
<p>In bash this command works
<code>ssh user@host "find /remote/path/ -name "pattern*" -mmin -15" &gt; /local/path/last_files.txt</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your best option for running commands on a remote machine is via ssh with <a href="https://github.com/paramiko/paramiko" rel="nofollow noreferrer">paramiko</a>. </p>
<p>A couple of examples of how to use the library and issue a command to the remote system:</p>
<pre><code>import base64
import paramiko

# Let's assign an RSA SSH key to the 'key' variable
key = paramiko.RSAKey(data=base64.b64decode(b'AAA...'))

# And create a client instance.
client = paramiko.SSHClient()

# Create an object to store our key  
host_keys = client.get_host_keys()
# Add our key to 'host_keys'
host_keys.add('ssh.example.com', 'ssh-rsa', key)

# Connect to our client; you will need 
# to know/use for the remote account:
#
#   IP/Hostname of target
#   A username 
#   A password
client.connect('IP_HOSTNAME', username='THE_USER', password='THE_PASSWORD')

# Assign our input, output and error variables to
# to a command we will be issuing to the remote 
# system 
stdin, stdout, stderr = client.exec_command(
    'find /path/data/ -name "pattern*" -mmin -15'
)

# We iterate over stdout
for line in stdout:
    print('... ' + line.strip('\n'))

# And finally we close the connection to our client
client.close()
</code></pre>
<p>As pointed out by the OP, if we already have a known hosts file locally we can do things slightly different:</p>
<pre><code>import base64
import paramiko

# And create a client instance.
client = paramiko.SSHClient()

# Create a 'host_keys' object and load
# our local known hosts  
host_keys = client.load_system_host_keys()

# Connect to our client; you will need 
# to know/use for the remote account:
#
#   IP/Hostname of target
#   A username 
#   A password
client.connect('IP_HOSTNAME', username='THE_USER', password='THE_PASSWORD')

# Assign our input, output and error variables to
# to a command we will be issuing to the remote 
# system 
stdin, stdout, stderr = client.exec_command(
    'find /path/data/ -name "pattern*" -mmin -15'
)

# We iterate over stdout
for line in stdout:
    print('... ' + line.strip('\n'))

# And finally we close the connection to our client
client.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the os library and:</p>
<pre><code>myfilelist = os.listdir()
</code></pre>
<p>or you could loop through the filelist as below:</p>
<pre><code>for file in os.listdir():
    //do things here
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/filesys.html" rel="nofollow noreferrer">docs.python.org/3/library/filesys.html</a></span>
<span class="comment-copy">Sounds like you want <code>os.listdir()</code>.</span>
<span class="comment-copy">Is like <code>os.listdir()</code> but in a host machine, not in the local machine that runs the code</span>
<span class="comment-copy">If my answer helped please mark as accepted so others will know they can use this information. Thanks</span>
<span class="comment-copy">Thanks. This worked for me. Just needed to change the rsa keys. I ended up using the local known hosts using <code>client.load_system_host_keys()</code> because it was easier in my case since i had them loaded in my environment.</span>
<span class="comment-copy">Cool glad to help, cheers for the feedback.</span>
<span class="comment-copy">This works for the local machine that runs the code, but I need list the files from a host machine.</span>
<span class="comment-copy">Thanks - my apologies I misunderstood. +1 on Jack Herer's answer</span>
