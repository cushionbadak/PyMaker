<div class="post-text" itemprop="text">
<p>I have a list of list of dictionaries and I want to find the common dictionaries between the two list.</p>
<p>Eg:</p>
<pre><code>dict_list = [[{'1' : 1,'2' : 2, '3' :3}, {'6' : 6,'5' : 5, '4' : 4}],  
             [{'1' : 1,'2' : 2, '3' :3}, {'7' : 7,'8' : 8, '9' : 9}]]
</code></pre>
<p>The result should be <code>[{'1' : 1,'2' : 2, '3' :3}]</code> </p>
<p>I tried using set intersections but dictionaries are unhashable in python. </p>
<p>How to solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>A <em>list comprehension</em> could work here:</p>
<pre><code>&gt;&gt;&gt; [x for x in dict_list[0] if x in dict_list[1]]
[{'1': 1, '2': 2, '3': 3}]
</code></pre>
<p>But this is not a very general solution, since it assumes only two nested lists are exististent. </p>
<p>A more general solution would be to count the occurences with <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a>, and storing the dictionary <code>items()</code> with hashable/immutable types such as <a href="https://docs.python.org/3/library/functions.html#func-frozenset" rel="nofollow noreferrer"><code>frozenset()</code></a> or <a href="https://docs.python.org/3/library/functions.html#func-tuple" rel="nofollow noreferrer"><code>tuple()</code></a>. Then all you need to do is filter the occurences that count <em>more</em> than 1.</p>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; [dict(k) for k, v in Counter(frozenset(x.items()) for x in chain.from_iterable(dict_list)).items() if v &gt; 1]
[{'1': 1, '2': 2, '3': 3}]
</code></pre>
<p>Which is very similar to the approach <a href="https://stackoverflow.com/questions/53298540/how-to-find-common-occurrences-of-dictionary-in-a-list-of-list-of-dictionaries/53298618#comment93477994_53298540">@Chris_Rands</a> posted in the comments. </p>
</div>
<span class="comment-copy"><code>[dict(k) for k,v in  Counter(tuple(x.items()) for x in  chain.from_iterable(dict_list)).items() if v &gt; 1] </code></span>
<span class="comment-copy">@Chris_Rands I didn't see your solution at all when I posted mine. Do you want me to remove it?</span>
<span class="comment-copy">@RoadRunner no don't remove it, people do have the same idea sometimes, thanks for asking though :)</span>
<span class="comment-copy">after converting a list of dict to list of tuple, he can use set.intersection too, I guess</span>
<span class="comment-copy">The main point here is that even though dictionaries are not hashable they are comparable. <a href="https://stackoverflow.com/questions/4527942/comparing-two-dictionaries-in-python">More about comparing dictionaries in python</a>.</span>
