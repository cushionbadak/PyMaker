<div class="post-text" itemprop="text">
<p>I have a tiny web-server written in Python 3 using <a href="https://docs.python.org/3/library/http.server.html" rel="nofollow noreferrer">http.server</a> which calls the function <code>translate()</code> in method <code>do_GET()</code> like this:</p>
<pre><code>class httpd(BaseHTTPRequestHandler):
    def do_GET(self):
        self.wfile.write(bytes(f'{translate(var[0])}', 'utf-8'))
</code></pre>
<p>Now in this <code>translate()</code> function I have several conditional statements and <code>try</code> and <code>except</code> blocks roughly like this:</p>
<pre><code>def translate(param):
    try:
        # do something
    except SomeError as some_err:
        print("Error: " % some_err)
        return ""

    if True:
        try:
            # do something
        except SomeOtherError as some_other_err:
            print("Error: " % some_other_err)
            return ""
        except SomeThirdError as some_third_err:
            print("Third error: " % some_third_err)
            return ""
    else:
        # additional try and except blocks which print an error and
        # return an empty string
</code></pre>
<p>The code above is simplified, but in principle I return an empty string if an exception happens and thus my web server returns nothing to client if an exception happens.</p>
<p>Is there a more manageable way to handle this? Specifically, I'm looking to:</p>
<ul>
<li>Avoid catching each error via a separate <code>except</code> section, while still supporting an error message dependent on error type.</li>
<li>Avoid writing multiple <code>try</code> / <code>except</code> statements, often nested, within my function.</li>
</ul>
<hr/>
<p><strong>Note:</strong> This is a copy of <a href="https://stackoverflow.com/questions/52901075/pythonic-way-to-handle-exceptions-in-functions">this now deleted question</a>. The solution from that post is included below, but other answers are welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if having nested <code>try</code> blocks is absolutely necessary in your logic, but I'd try a single <code>try</code> block with a custom <code>Exception</code> class. Something like this: </p>
<pre><code>class MyException(Exception):
    """Generic error message."""
    def __str__(self):
        return self.__doc__

class SomeError(MyException):
    """SomeError message."""
    pass

class SomeOtherError(MyException):
    """SomeOtherError message."""
    pass

class SomeThirdError(MyException):
    """SomeThirdError message."""
    pass



def translate(param):
    try:
        # do something
        ...
        if cond1:
            raise SomeError()
        ...
        if cond2:
            raise SomeOtherError()
        ...
        if cond3:
            raise SomeThirdError()
        ...

    except MyException as err:
        print(err)
        return ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer"><code>contextmanager</code></a>? To alleviate your concern about custom error messages, you can feed a dictionary mapping error classes to messages of your choice.</p>
<p>Since different operations require different errors to be handled, you can use multiple <code>with</code> statements, feeding different errors as arguments each time.</p>
<p>Here's a contrived example:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def error_handling(msg, *exceptions):
    try:
        yield
    except exceptions as my_error:
        print(msg[my_error.__class__], my_error)
        return ''

def do_stuff(d, key, index):

    custom_msg = {IndexError: 'You have an Index Error!',
                  KeyError: 'You have a Key Error!'}

    with error_handling(custom_msg, IndexError, KeyError):
        return d[key][index]

# example prints "You have an Index Error! list index out of range"; then returns ''
do_stuff({'a': [0, 1, 2]}, 'a', 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about to define a function that has a dictionary contained the whole errors and responses. in this case you can catch an exception one time and send it to a handler   </p>
<p>UPDATE :   </p>
<pre><code>def handle (e) :

exp = {'IOError' : 'NO such a file in dir ...! ' ,
       'KeyboardInterrupt' : 'Exiting ... (Keyboard interruption)',
       'IndexError' : ' a sequence subscript is out of range' ,
       'NameError' : 'a local or global name is not found'}

for key , value in exp.items() :
    if e == key :
        print (value) #or do whatever you want

def test() :
    try :
        f = open('no-file' , 'r')
    except Exception as e :
        handle (type(e).__name__)


if __name__ == "__main__" :
    test()
</code></pre>
</div>
<span class="comment-copy">This is a <i>very broad</i> question. Exception handling is very specific to the use cases involved, and it could well be that your actual application could avoid a bunch of exceptions altogether if restructured. But with the overly generic <code>Something..Error</code> exceptions here with <code>do something</code> code there is only very broad advice we can give. Context managers could help, but are not a general fits-all solution. Catching a base exception is another. Using <code>except (Exc1, Exc2, Exc3)</code> then dispatching from there in the exception handler is a 3rd. These all have different characterstics.</span>
<span class="comment-copy">But writing all that down is going to require something approaching publishable book status, so I've closed this as Too Broad.</span>
<span class="comment-copy">@jpp If you raise any subclassed exception you will output the proper message given that you have <code>return self.__doc__</code> in the <code>__str__</code> method of base class, that's the way sub-classes and inheritance works. I've update the example just to be clear.</span>
<span class="comment-copy">Probably goes without saying, but the <code>...</code> bit is relevant here, it would be helpful if you can fill them in with a trivial example users can run.</span>
<span class="comment-copy">you're right, I hope this helps.</span>
