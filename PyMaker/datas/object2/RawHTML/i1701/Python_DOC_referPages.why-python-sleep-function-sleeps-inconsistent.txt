<div class="post-text" itemprop="text">
<pre><code>import time
from time import sleep
from datetime import datetime

while True: 
    print datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    sleep(1)
</code></pre>
<p>It gives output</p>
<pre><code>2018-09-23 16:14:42
2018-09-23 16:14:43
2018-09-23 16:14:44
2018-09-23 16:14:45
2018-09-23 16:14:46
2018-09-23 16:14:47
2018-09-23 16:14:48
2018-09-23 16:14:49
2018-09-23 16:14:50
2018-09-23 16:14:51
2018-09-23 16:14:53
2018-09-23 16:14:54
2018-09-23 16:14:55
2018-09-23 16:14:56
</code></pre>
<p>Skipped 52 second row</p>
</div>
<div class="post-text" itemprop="text">
<p>Three reasons: <code>time.sleep()</code> is <em>not precise</em>, your computer is switching between any number of processes, all the time, and executing the rest of your code (looking up the <code>datetime.now</code> reference, calling the <code>now()</code> method, looking up the <code>strftime</code> attribute, and calling the <code>strftime()</code> method with a string argument, and printing the result of that last call) take a bit of time to execute too.</p>
<p>See the <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="nofollow noreferrer"><code>time.sleep()</code> function documentation</a>:</p>
<blockquote>
<p>The actual suspension time may be less than that requested because any caught signal will terminate the <code>sleep()</code> following execution of that signalâ€™s catching routine. Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system.</p>
</blockquote>
<p>There will be variations in the exact amount of time passed between the <code>datetime.now()</code> calls. </p>
<p>So your 1 second sleep can take a fraction longer than a second, and printing out the time each iteration takes another fraction. So sometimes that means you jump from the last microseconds of one second to the first microseconds of 2nd second after that, and the time display seems to have skipped a second.</p>
<p>The following script prints when you'd see a 'jump' of 2 seconds:</p>
<pre><code>last = datetime.now()
while True:
    sleep(1)
    t = datetime.now()
    s_delta = t.second - last.second
    if t.second &lt; last.second:  # delta to next minute
        s_delta += 60
    if s_delta &gt; 1:
        print('Time delta &gt; 1s: {:.6f}'.format((t - last).total_seconds()))
    last = t
</code></pre>
<p>The loop has to do more work, so it'll probably print more often.</p>
<p>For me, on Python 2.7, after some a few minutes running time, this outputs:</p>
<pre><code>Time delta &gt; 1s: 1.001061
</code></pre>
<p>so the <em>display</em> may have jumped 2 seconds, but the actual time difference between those steps was about 1 second, 1 millisecond, and 61 microseconds.</p>
</div>
<span class="comment-copy">What do you mean by <i>"inconsistent"</i>?</span>
<span class="comment-copy">sleep(1) will sleep one second</span>
<span class="comment-copy">According to <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="nofollow noreferrer">the documentation</a> it could be shorter <i>or</i> longer than the requested time. Just like for <i>all</i> timers. On a non-realtime system getting a very precise timer is impossible.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1133857/how-accurate-is-pythons-time-sleep">How accurate is python's time.sleep()?</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1133857/how-accurate-is-pythons-time-sleep">How accurate is python's time.sleep()?</a></span>
