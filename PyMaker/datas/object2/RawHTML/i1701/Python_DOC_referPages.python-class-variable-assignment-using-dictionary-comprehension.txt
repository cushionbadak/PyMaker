<div class="post-text" itemprop="text">
<p>During a class definition, a class variable defined as a dictionary is used in the construction of a second dictionary class variable, a subset pared down from the first, like this:</p>
<pre><code>class C(object):
    ALL_ITEMS = dict(a='A', b='B', c='C', d='D', e='E')
    SUBSET_X = {k: v for k, v in ALL_ITEMS.items() if k in ('a', 'b', 'd')}  # (this works)
    SUBSET_Y = {k: ALL_ITEMS[k] for k in ('a', 'b', 'd')}  # (this fails)
</code></pre>
<p>Pretty simple stuff, but the net effect of executing this code is quite surprising to me.  My first approach was the code on line 4, but I had to resort to the solution on line 3 instead.  There is something subtle about dictionary comprehension scoping rules that I'm clearly failing to grasp.</p>
<p>Specifically, the error raised in the failing case is:</p>
<pre><code>File "goofy.py", line 4, in &lt;dictcomp&gt;
   SUBSET_Y = {k: ALL_ITEMS.get(k) for k in ('a', 'b', 'd')}
NameError: name 'ALL_ITEMS' is not defined
</code></pre>
<p>The nature of this error is baffling to me for a few different reasons:</p>
<ol>
<li>The assignment to <code>SUBSET_Y</code> is a well-formed dictionary comprehension, and references a symbol which should be in-scope and accessible.</li>
<li>In the succeeding case (the assignment to <code>SUBSET_X</code>), which is also a dictionary comprehension, the symbol <code>ALL_ITEMS</code> is perfectly well-defined and accessible.  Thus, the fact that the raised exception is a <code>NameError</code> in the failing case seems manifestly wrong.  (Or misleading, at best.)</li>
<li>Why would the scoping rules differ for <code>items()</code> vs. <code>__getitem__</code> or <code>get()</code>?  (The same exception occurs replacing <code>ALL_ITEMS[k]</code> with <code>ALL_ITEMS.get(k)</code> in the failure case.)</li>
</ol>
<p>(Even as a Python developer for over a decade, I've never run into this failure before, which either means I've been lucky or have lived a sheltered existence  :^)</p>
<p>The same failure occurs in various 3.6.x CPython versions as well as 2.7.x versions.</p>
<p>EDIT: No, this is not a duplicate of a previous question.  That pertained to list comprehensions, and even if one were to project the same explanation to dictionary comprehensions, it doesn't explain the difference between the two cases I cited.  And also, it is not a Python 3-only phenomenon.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is one minor detail that explains why the first-version works but the second version fails. The reason the second version fails is the same reason that is given in <a href="https://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition">this question</a>, namely, all comprehension constructs (in Python 3, in Python 2, list-comprehensions were implemented differently) create a function scope where all of the local name-bindings occur. However, names in a class scope are not accessible to functions defined inside the class scope. This is why you have to use either <code>self.MY_CLASS_VAR</code> or <code>MyClass.MY_CLASS_VAR</code> to access a class variable from a method. </p>
<p>The reason your first case does happen to work is subtle. According to the <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">language reference</a></p>
<blockquote>
<p>The comprehension consists of a single expression followed by at least
  one for clause and zero or more for or if clauses. In this case, the
  elements of the new container are those that would be produced by
  considering each of the for or if clauses a block, nesting from left
  to right, and evaluating the expression to produce an element each
  time the innermost block is reached.</p>
<p>However, <strong>aside from the iterable expression in the leftmost for
  clause, the comprehension is executed in a separate implicitly nested
  scope.</strong> This ensures that names assigned to in the target list don’t
  “leak” into the enclosing scope.</p>
<p><strong>The iterable expression in the leftmost for clause is evaluated
  directly in the enclosing scope and then passed as an argument to the
  implictly nested scope.</strong></p>
</blockquote>
<p>So, in the first case, <code>ALL_ITEMS.items()</code> is in the left-most for-clause, so it is <em>evaluated directly in the enclosing scope</em>, in this case, the class scope, so it happily finds the <code>ALL_ITEMS</code> name.</p>
</div>
<span class="comment-copy">I don't see ALL_KEYS anywhere in your code. Is the error referencing ALL_ITEMS?</span>
<span class="comment-copy">So a few things, 1) of course, a fully-qualified name (e.g., <code>MyClass.MY_CLASS_VAR</code>) is not accessible in expressions assigning class variables <i>inside the class definition</i>, which I doubt you intended to suggest. Also, 2) the same workaround applies equally to Python 2 as in Python 3, so this doesn't appear to be a Python 3-ism as has been alluded to.  And finally, 3) yes, your explanation holds water vis-a-vis the spec, but man, is this ever a subtle trip-wire for the unsuspecting!</span>
<span class="comment-copy">@trenchant 1) yes, MyClass won't be available during class definition time because it doesn't exist, and the class scope only exists during the definition. 2) for list-comprehensions, this would apply only in Python 3, because in Python 2 they had an implementation that didn't create a class scope but instead had a "leaky" scope. Dict and set comprehension never suffered from this, and in Python 3, list comprehension were re-implemented to work like set and dict comprehension-constructs already did 3) yeah it's subtle. I just avoid comprehension-constructs inside class scopes.</span>
