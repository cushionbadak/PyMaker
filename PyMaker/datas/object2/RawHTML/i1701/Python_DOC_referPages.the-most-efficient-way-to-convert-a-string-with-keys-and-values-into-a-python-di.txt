<div class="post-text" itemprop="text">
<p>How do I convert a string</p>
<pre><code>{"key"=&gt;"Number of Contents in Sales Package", "value"=&gt;"Pack of 3"}
</code></pre>
<p>into a dictionary like </p>
<pre><code>{'Number of Contents in Sales Package':'Pack of 3'}?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <code>re</code> with an example with more than 1 key-value pair</p>
<pre><code>import re

s = """{"key"=&gt;"Number of Contents in Sales Package", "value"=&gt;"Pack of 3"}, 
    {"key"=&gt;"Number of Contents in Sales Package 2", "value"=&gt;"Pack of 5"}"""

pattern = re.compile(r'''{"key"=&gt;"(?P&lt;key&gt;.*?)", "value"=&gt;"(?P&lt;value&gt;.*?)"}''')
dict(pattern.findall(s))
</code></pre>
<blockquote>
<pre><code>{'Number of Contents in Sales Package': 'Pack of 3',
 'Number of Contents in Sales Package 2': 'Pack of 5'}
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="noreferrer"><code>str.replace</code></a> and then <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval</code></a> to convert your string to a dictionary, then restructure:</p>
<pre><code>from ast import literal_eval

x = '{"key"=&gt;"Number of Contents in Sales Package", "value"=&gt;"Pack of 3"}'

d = literal_eval(x.replace('=&gt;', ':'))
d = {d['key']: d['value']}

print(d)

{'Number of Contents in Sales Package': 'Pack of 3'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do:</p>
<pre><code>result = dict([k_v.replace('"', '').split('=&gt;')
               for k_v in string[1:-1].split(', ')])
</code></pre>
<p>This would require your data to be in the form:</p>
<pre><code>'{key1=&gt;value1, key2=&gt;value2}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an approach that splits and cleans up the string a bit and then uses dict comprehension with <code>zip()</code> on slices of odd and even list elements (keys are even, values are odd) to generate the output you are looking for (and will work on strings that contain multiple key value pairs but not very well if your strings contain nested dicts, lists, etc).</p>
<p>That said, the answer from <a href="https://stackoverflow.com/users/9209546/jpp">@jpp</a> is really clever.</p>
<pre><code>text = '{"key"=&gt;"Number of Contents in Sales Package", "value"=&gt;"Pack of 3"}'

items = [t.split('=&gt;')[1].replace('"', '') for t in text[1:-1].split(',')]
result = {k: v for k, v in zip(items[::2], items[1::2])}

print(result)
# OUTPUT
# {'Number of Contents in Sales Package': 'Pack of 3'}
</code></pre>
</div>
<span class="comment-copy">Does your actual string contain multiple key and value pairs or just the one?</span>
<span class="comment-copy">thanks, this works great</span>
<span class="comment-copy">thank you, this is a good alternative to regex</span>
<span class="comment-copy">This doesn't work for me, it gives <code>{'"key"': '"Number of Contents in Sales Package"', '"value"': '"Pack of 3"'}</code></span>
<span class="comment-copy">Ah I see what you mean. Does your actual string contain multiple key and value pairs in it?</span>
<span class="comment-copy">I'm not sure, better ask OP, seems not from the example.</span>
<span class="comment-copy">My bad; I thought you were the OP!</span>
