<div class="post-text" itemprop="text">
<p>I am trying to write a class, for text manipulation. The idea is class will support basic text preprocessing, but if someone wants to write a very complex preprocessing function, they should be able to use the base class and override it. I tried the following way, even though I can somehow make it to work, I don't think that is the correct way to do it. </p>
<pre><code>class TextPreprocessor:
    def __init__(self, corpus):
        """Text Preprocessor base class.

            corpus: a list of sentences

        """
        self.corpus      = corpus
        self.word_tokens = [self.preprocess(sentence) for sentence in corpus]

    def preprocess(self,sentence):
        """
        strip each sentence , lowercase it and split by space # sentence.strip().lower().split()

        """

        return sentence.strip().lower().split()

    def preprocess_transform(self,sentence):

        return self.preprocess(sentence)
</code></pre>
<p>Now, if I want to write a new preprocessing function, which is the best way to do it. I tried following,</p>
<pre><code>class SubPreprocess(TextPreprocessor):
    def __init__(self, corpus):
        #### dummy preprocess function
        def preprocess(self, sentence):
            return sentence.strip().split() + ['HELLOOOOOOOOOOLLLL']
        super.__init__(corpus)
</code></pre>
<p>It is not working. What I want basically, is the preprocess function ( modified ), should be able to override the one in base class <code>TextPreprocessor</code>, so that when that <code>__init__</code> is called, <code>self.word_tokens</code>, should be based on the new preprocessing function </p>
</div>
<div class="post-text" itemprop="text">
<p>The following will do:</p>
<pre><code>class SubPreprocess(TextPreprocessor):
    def preprocess(self, sentence):
        return sentence.strip().split() + ['HELLOOOOOOOOOOLLLL']
</code></pre>
<p>If you now call the constructor of <code>SubPreprocess</code>, the new <code>preprocess</code> method will be used:</p>
<pre><code>proc = SubPreprocess(some_corpus)  
# looks up any methods in the mro of SubPreprocess
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class SubPreprocess(TextPreprocessor):
    def __init__(self, corpus):
        #this is how you initialise the superclass
        super(SubPreprocess, self).__init__(corpus)

    # the overridden function should be within the scope of the class, not under the initializer
    def preprocess(self, sentence):
        return sentence.strip().split() + ['HELLOOOOOOOOOOLLLL']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to inject behavior, just use a function:</p>
<pre><code>class TheAlgorithm:
  def __init__(self, preprocess):
     self.preprocess = preprocess
  def process(self, corpus):
     after_a = self.part_a(corpus)
     preprocessed = self.preprocess(after_a)
     return self.part_b(preprocessed)
</code></pre>
<p>Use very simply:</p>
<pre><code>p = TheAlgorithm(lambda c: c.strip().split() + 'helllol')
p.process('the corpus')
</code></pre>
<p>Actually, if all your class does is store some functions, you can go full-functional programming:</p>
<pre><code>def processor(preprocess):
   def algorithm(corpus):
      return part_b( preprocess(corpus) )

p = processor(lambda c: "-".join(c.split(",")))
assert "a-b-c" == p("a,b,c")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try to change the  : super.<strong>init</strong>(corpus)
to super().<strong>init</strong>(corpus)</p>
</div>
<span class="comment-copy">Why are you newtingthe function in <code>__init__</code>?</span>
<span class="comment-copy">interesting, I didn't realise that doing it like this also inherits the <b>init</b> function</span>
<span class="comment-copy">@Karl Otherwise, inheritence would be rather useless. You only override the methods that need to change. When these are called by other methods, the <a href="https://docs.python.org/3/glossary.html#term-method-resolution-order" rel="nofollow noreferrer">mro</a> of <code>self.__class__</code> determines the lookup order.</span>
<span class="comment-copy">I did the same thing, and it didn't work. But, now when I looked at my code, I realized that, after creating <code>SubPreprocess</code> class, I was calling <code>TextPreprocessor</code> , unknowingly. This is the best way. Thanks. Upvoted. :-)</span>
<span class="comment-copy">@Karl - This is preferred because, someone who is interested in using the base class, but only wants to change <code>preprocess</code> function, he/she should be kept away from additional complexities. That's all.</span>
<span class="comment-copy">@schwobaseggl, yeah that's clear. Somehow it just never occurred to me that this applies to <code>__init__</code> as well. In almost every example I saw for how inheritance was handled in Python, the subclass always had its own constructor and the superclass was explicitly called from there. Nice to learn something neat on a Friday afternoon</span>
