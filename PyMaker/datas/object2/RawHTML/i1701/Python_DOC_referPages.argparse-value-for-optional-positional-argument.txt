<div class="post-text" itemprop="text">
<p>I am trying to create an argparse optional argument that may -OR- may not have an associated input value. I want the following behavior:<br/>
 1. argument not specified, value=None<br/>
 2. argument specified with a value, value=user_input<br/>
 3. argument specified without a value, value=derived from a positional value</p>
<p>The first 2 are easy. It's the third one I can't figure out. I found 2 posts that do something similar:<br/>
<a href="https://stackoverflow.com/questions/17270629">python argparse optional positional argument with detectable switch</a><br/>
This one sets the default value to a constant for an optional argument without a value.<br/>
<a href="https://stackoverflow.com/questions/4480075">Argparse optional positional arguments?</a><br/>
This topic is close, but not quite what I need either (he derives the default value from a system call):<br/>
I want mine to be a determined from an positional value.</p>
<p>Simple example code I created:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('input')
parser.add_argument('-c', '--csv', nargs='?')
parser.add_argument('-p', '--pnf', nargs='?')
</code></pre>
<p>When I set the input and print:  </p>
<pre><code>args = parser.parse_args('my.h5 -c my_file.csv --pnf'.split())
print ('Input = %s' % args.input)
print ('CSV file = %s' % args.csv)
print ('PNF file = %s' % args.pnf)
</code></pre>
<p>I get:  </p>
<pre><code>Input = my.h5
CSV file = my_file.csv
PNF file = None
</code></pre>
<p>If I modify my input to: </p>
<pre><code>args = parser.parse_args('my.h5 -c'.split())
</code></pre>
<p>The resulting output is:  </p>
<pre><code>Input = my.h5
CSV file = None
PNF file = None
</code></pre>
<p>When <code>Value = None</code>, I can't tell if the optional argument was not defined, or was defined but without a value. In the second case, I want to derive the CSV File name from the positional argument (in this example the derived name would be <code>my.csv</code>). I want to do the same when --pnf is defined (where default PNF would be <code>my.pnf</code> for above). Is there a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I can't tell if the optional argument was not defined, or was defined but without a value</p>
</blockquote>
<p>If you create your parser <a href="https://docs.python.org/3/library/argparse.html#argument-default" rel="nofollow noreferrer">like this</a>:</p>
<pre><code>parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
</code></pre>
<p>Now it is  possible to distinguish between the three cases.  </p>
<ul>
<li>If <code>-c val</code> was passed, it will be present in <code>args</code> with value <code>"val"</code>. </li>
<li>If <code>-c</code> was passed without value, it will be present in <code>args</code> with value <code>None</code>. </li>
<li>If <code>-c</code> was omitted entirely, it won't be present in <code>args</code>.</li>
</ul>
<p>The same goes for <code>-p</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Making use of the <code>const</code> parameter:</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('input')
parser.add_argument('-c', '--csv', nargs='?', const='foobar')
parser.add_argument('-p', '--pnf', nargs='?', const='foobar')

args = parser.parse_args()
print(args)

if args.csv and args.csv=='foobar':
    args.csv = args.input

args.pnf = args.input if (args.pnf and args.pnf=='foobar') else args.pnf

print(args)
</code></pre>
<p>Your two sample inputs:</p>
<pre><code>0933:~/mypy$ python3 stack53228663.py my.h5 -c my_file.csv --pnf
Namespace(csv='my_file.csv', input='my.h5', pnf='foobar')
Namespace(csv='my_file.csv', input='my.h5', pnf='my.h5')

0933:~/mypy$ python3 stack53228663.py my.h5 -c
Namespace(csv='foobar', input='my.h5', pnf=None)
Namespace(csv='my.h5', input='my.h5', pnf=None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness (and future reference), I am posting the modified code required to get arguments when using <code>argument_default=argparse.SUPPRESS</code>. See below:</p>
<pre><code>parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
parser.add_argument('input')
parser.add_argument('-c', '--csv', nargs='?')
parser.add_argument('-p', '--pnf', nargs='?')
args = parser.parse_args('my.h5 -c my_file --pnf'.split())
for d_key, d_val in vars(args).items() :
  print (d_key, d_val)
</code></pre>
<p>Results in this output:</p>
<pre><code>input my.h5
csv my_file
pnf None
</code></pre>
<p>For the second set of inputs</p>
<pre><code>args = parser.parse_args('my.h5 -c'.split())
print(vars(args))
for d_key, d_val in vars(args).items() :
  print (d_key, d_val)
</code></pre>
<p>Output looks like this:</p>
<pre><code>input my.h5
csv None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This shows the logic I implemented using <code>default=False, const=True</code>, based on earlier comments from @hpaulj.</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('input')
parser.add_argument('-c', '--csv', nargs='?', default=False, const=True)
parser.add_argument('-p', '--pnf', nargs='?', default=False, const=True)
args = parser.parse_args('my.h5 -c'.split())
print(vars(args))
HDF5_FILE = args.input
if isinstance(args.csv, str) :
  CSV_FILE = args.csv
elif args.csv :
  CSV_FILE=HDF5_FILE[:-3] + '_v3_stress.csv'
else :
  CSV_FILE = ''
# repeat above logic for args.pnf
print ('input=', HDF5_FILE, ',  csv=', CSV_FILE, ' pnf=', PNF_FILE )
</code></pre>
<p>Resulting output looks like this:</p>
<pre><code>{'input': 'my.h5', 'csv': True, 'pnf': False}
hdf5= my.h5 ,  csv= my_v3_stress.csv  pnf= 
</code></pre>
<p>Modified 'parse_args()' and resulting output:</p>
<pre><code>args = parser.parse_args('my.h5 -c my_file.csv -p'.split())
</code></pre>
<p>Gives:</p>
<pre><code>{'input': 'my.h5', 'csv': 'my_file.csv', 'pnf': True}
hdf5= my.h5 ,  csv= my_file.csv  pnf= my_v3_stress.nrf
</code></pre>
<p>If I had a lot of variables to check, I would move the <code>if/elif/else</code> logic to a <code>def</code> that returns the desired value.</p>
</div>
<span class="comment-copy">Use <code>const='foobar'</code> as described in the link. After parsing conditionally replace 'foobar' with <code>args.input</code>.</span>
<span class="comment-copy">Thanks, works like a champ (with a small change to get the arguments and values) I saw that in the python.org docs, but couldn't decipher how it worked. Thanks!</span>
<span class="comment-copy">Thanks hpaulj, that's another approach. Not sure which is more "pythonic". Personally, I like <code>argparse.SUPPRESS</code> b/c it's more readable (to me).</span>
<span class="comment-copy">You can also set this default in the <code>add_argument</code> command: <code>default=argparse.SUPPRESS</code>.  In my version, <code>default</code> is <code>None</code>.  And your 'const' is effectively <code>None</code>.  Which is easier to test for, a <code>None</code> value or a missing attribute or key?  Just as long as you are clear about the alternatives it really doesn't matter which you use.</span>
<span class="comment-copy">"Which is easier: test a value or test for a missing key"?   Yes, exactly, either way I'm writing some code to test and set the value.  :-) In a perfect world, I'd like an action that combines action='store' and action='store_true'. When the optional argument is not entered, it's returned as 'False'. When it's entered without a value, it's returned as 'True'. And, when entered with a value, it's returned with that value -- or maybe returned as a tuple with: (argname, True/False, value).</span>
<span class="comment-copy">That's easy - <code>nargs='?', default=False, const=True</code>.  <code>store_true</code> is just <code>store_const</code> with those default and const values (and <code>nargs=0</code>).</span>
<span class="comment-copy">Yeah, I like that one. Didn't realize I could use <code>default=</code> and <code>const=</code> together. Good to know! Test logic is very clean and readable. You should post as an answer so I can +1. Thanks!</span>
