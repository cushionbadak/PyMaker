<div class="post-text" itemprop="text">
<p>I'm trying to rotate a matrix counter clockwise by 90 degrees. 
For example, if: </p>
<pre><code>m = [[1,2,3],
     [2,3,3],
     [5,4,3]]
</code></pre>
<p>then the result should be </p>
<pre><code>m = [[3,3,3],
     [2,3,4],
     [1,2,5]]
</code></pre>
<p>So far, I found: </p>
<pre><code>rez = [[m[j][i] for j in range(len(m))] for i in range(len(m[0]))]
    for row in rez:
        print(row)
</code></pre>
<p>This gives me </p>
<pre><code>[1, 2, 5]
[2, 3, 4]
[3, 3, 3]
</code></pre>
<p>This is close, but the rows would need to be reverses. Does anyone know a simple way to rotate this matrix counter clockwise by 90 degrees?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do the following:</p>
<pre><code>m = [[1, 2, 3],
     [2, 3, 3],
     [5, 4, 3]]

result = list(map(list, zip(*m)))[::-1]

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[3, 3, 3],
 [2, 3, 4],
 [1, 2, 5]]
</code></pre>
<p>With <code>map(list, zip(*m))</code> you create an iterable of the columns, and with the expression <code>list(...)[::-1]</code> you convert that iterable into a list and reverse it.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you here basically do is map a matrix <em>A</em> to a matrix <em>B</em> such that:</p>
<p><em>B<sub>i j</sub>=A<sub>j i</sub></em></p>
<p>In case you <em>rotate</em> elements, that means that if you rotate an <em>n√óm</em>-matrix, then that means that:</p>
<p><em>B<sub>i j</sub>=A<sub>j n-i</sub></em></p>
<p>So we can calculate this as:</p>
<pre><code>rez = [[m[j][<b>ni</b>] for j in range(len(m))] for <b>ni</b> in <b>range(len(m[0])-1, -1, -1)</b>]</code></pre>
<p>which is thus the transpose, but than "reversed". Using indices is however typically <em>not</em> how you do such processing in Python, since now it works only for items that are subscriptable, so I advice you to look for a more elegant solution.</p>
<p>But that being said, numpy offers a <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.rot90.html" rel="nofollow noreferrer"><strong><code>numpy.rot90</code></strong></a> function to rotate matrices:</p>
<pre><code>&gt;&gt;&gt; np.rot90(m)
array([[3, 3, 3],
       [2, 3, 4],
       [1, 2, 5]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other option is to use <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.rotate.html" rel="nofollow noreferrer">scipy.ndimage.rotate</a></p>
<blockquote>
<p>Rotate an array.</p>
<p>The array is rotated in the plane defined by the two axes given by the
  axes parameter using spline interpolation of the requested order.</p>
</blockquote>
<pre><code>import numpy as np
from  scipy import ndimage

m = np.matrix([[1,2,3],
               [2,3,3],
               [5,4,3]])

ndimage.rotate(m, 90.0) #angle as float.
</code></pre>
<blockquote>
<pre><code>Out: 
array([[3, 3, 3],
       [2, 3, 4],
       [1, 2, 5]])
</code></pre>
</blockquote>
<hr/>
<blockquote>
<p>Same result you can get by using the <code>zip()</code> function to transpose rows and columns of a <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">5.1.4. Nested List</a> then reverse the nested list with <code>[::-1]</code> + put in a <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.matrix.html" rel="nofollow noreferrer">np.matrix</a> :</p>
</blockquote>
<pre><code>matrix = [[1, 2, 3],
          [2, 3, 3],
          [5, 4, 3]]

np.matrix(list(zip(*matrix)))[::-1]
</code></pre>
<blockquote>
<pre><code>Out: 
matrix([[3, 3, 3],
        [2, 3, 4],
        [1, 2, 5]])
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Here you do not <i>rotate</i>, you <i>transpose</i>.</span>
<span class="comment-copy">You can here use <code>numpy</code> with <code>np.rot90(m)</code>.</span>
<span class="comment-copy"><code>list(zip(*m))[::-1]</code></span>
