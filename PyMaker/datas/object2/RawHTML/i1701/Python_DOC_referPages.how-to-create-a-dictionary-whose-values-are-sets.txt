<div class="post-text" itemprop="text">
<p>I'm working on an exercise that requires me to build two dictionaries, one whose keys are country names, and the values are the GDP. This part works fine.</p>
<p>The second dictionary is where I'm lost, as the keys are supposed to be the letters A‚ÄêZ and the values are sets of country names. I tried using a for loop, which I've commented on below, where the issue lies.</p>
<p>If the user enters a string with only one letter (like A), the program should print all the countries that begin with that letter. When you run the program, however, it only prints out one country for each letter.</p>
<p>The text file contains 228 lines. ie:</p>
<pre><code>1:Qatar:98900

2:Liechtenstein:89400

3:Luxembourg:80600

4:Bermuda:69900

5:Singapore:59700

6:Jersey:57000

etc.
</code></pre>
<p>And here's my code.</p>
<pre><code>initials = []
countries=[]
incomes=[]

dictionary={}
dictionary_2={}

keywordFile = open("raw.txt", "r")

for line in keywordFile:
    line = line.upper()
    line = line.strip("\n")
    line = line.split(":")  
    initials.append(line[1][0])  # first letter of second element
    countries.append(line[1])  
    incomes.append(line[2])

for i in range(0,len(countries)):
    dictionary[countries[i]] = incomes[i]
</code></pre>
<p>this for loop should spit out 248 values (one for each country), where the key is the initial and the value is the country name. However, it only spits out 26 values (one country for each letter in the alphabet)</p>
<pre><code>for i in range(0,len(countries)):
    dictionary_2[initials[i]] = countries[i]
    print(dictionary_2)

while True:
    inputS = str(input('Enter an initial or a country name.'))

    if inputS in dictionary:
        value = dictionary.get(inputS, "")
        print("The per capita income of {} is {}.".format((inputS.title()), value ))

    elif inputS in dictionary_2:
        value = dictionary_2.get(inputS)
        print("The countries that begin with the letter {} are: {}.".format(inputS, (value.title())))

    elif inputS.lower() in "quit":
        break

    else:
        print("Does not exit.")

print("End of session.")
</code></pre>
<p>I'd appreciate any input leading me in the right direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>defaultdict</code> to make sure each value of your initials dict is a set, and then use the <code>add</code> method. If you just use <code>=</code> you'll be overwriting the initial keys value each time, <code>defaultdict</code> is an easier way of using an expression like:</p>
<pre><code>if initial in dict:
    dict[initial].add(country)
else:
    dict[initial] = {country}
</code></pre>
<p>See the full working example below, and also note that i'm using <code>enumerate</code> instead of <code>range(0,len(countries))</code>, which i'd also recommend:</p>
<pre><code>#!/usr/bin/env python3
from collections import defaultdict

initials, countries, incomes = [],[],[]

dict1 = {}
dict2 = defaultdict(set)

keywordFile = """
1:Qatar:98900

2:Liechtenstein:89400

3:Luxembourg:80600

4:Bermuda:69900

5:Singapore:59700

6:Jersey:57000
""".split("\n\n")

for line in keywordFile:
    line = line.upper().strip("\n").split(":")
    initials.append(line[1][0])
    countries.append(line[1])
    incomes.append(line[2])

for i,country in enumerate(countries):
    dict1[country] = incomes[i]
    dict2[initials[i]].add(country)

print(dict2["L"])
</code></pre>
<p>Result:</p>
<pre><code>{'LUXEMBOURG', 'LIECHTENSTEIN'}
</code></pre>
<p>see: <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html#collections.defaultdict</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The values for <code>dictionary2</code> should be such that they can contain a list of countries. One option is to use a list as the values in your dictionary. In your code, you are overwriting the values for each key whenever a new country with the same initial is to be added as the value.</p>
<p>Moreover, you can use the <code>setdefault</code> method of the <code>dictionary</code> type. This code:</p>
<pre><code>dictionary2 = {}
for country in countries:
    dictionary2.setdefault(country[0], []).append(country)
</code></pre>
<p>should be enough to create the second dictionary elegantly.</p>
<p><code>setdefault</code>, either returns the value for the key (in this case the key is set to the first letter of the country name) if it already exists, or inserts a new key (again, the first letter of the country) into the dictionary with a value that is an empty set <code>[]</code>. </p>
<h3>edit</h3>
<p>if you want your values to be set (for faster lookup/membership test), you can use the following lines:</p>
<pre><code>dictionary2 = {}
for country in countries:
    dictionary2.setdefault(country[0], set()).add(country)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://repl.it/@telamonian/pythondictswithlistvalues" rel="nofollow noreferrer">Here's a link to a live functioning version of the OP's code online.</a></p>
<p>The keys in Python <code>dict</code> objects are unique. There can only ever be one <code>'L'</code> key a single <code>dict</code>. What happens in your code is that first the key/value pair <code>'L':'Liechtenstein'</code> is inserted into <code>dictionary_2</code>. However, in a subsequent iteration of the <code>for</code> loop, <code>'L':'Liechtenstein'</code> is overwritten by <code>'L':Luxembourg</code>. This kind of overwriting is sometimes referred to as "clobbering".</p>
<h1>Fix</h1>
<p>One way to get the result that you seem to be after would be to rewrite that <code>for</code> loop:</p>
<pre><code>for i in range(0,len(countries)):
    dictionary_2[initials[i]] = dictionary_2.get(initials[i], set()) | {countries[i]}
    print(dictionary_2)
</code></pre>
<p>Also, you have to rewrite the related <code>elif</code> statement beneath that:</p>
<pre><code>elif inputS in dictionary_2:
    titles = ', '.join([v.title() for v in dictionary_2[inputS]])
    print("The countries that begin with the letter {} are: {}.".format(inputS, titles))
</code></pre>
<h1>Explanation</h1>
<p>Here's a complete explanation of the <code>dictionary_2[initials[i]] = dictionary_2.get(initials[i], set()) | {countries[i]}</code> line above:</p>
<ul>
<li><p><code>dictionary_2.get(initials[i], set())</code></p>
<ul>
<li>If <code>initials[i]</code> is a key in <code>dictionary_2</code>, this will return the associated value. If <code>initials[i]</code> is not in the dictionary, it will return the empty set <code>set()</code> instead.</li>
</ul></li>
<li><p><code>{countries[i]}</code></p>
<ul>
<li>This creates a new set with a single member in it, <code>countries[i]</code>.</li>
</ul></li>
<li><code>dictionary_2.get(initials[i], set()) | {countries[i]}</code>
<ul>
<li>The <code>|</code> operator adds all of the members of two sets together and returns the result.</li>
</ul></li>
<li><code>dictionary_2[initials[i]] = ...</code>
<ul>
<li>The right hand side of the line either creates a new set, or adds to an existing one. This bit of code assigns that newly created/expanded set back to <code>dictionary_2</code>.</li>
</ul></li>
</ul>
<h1>Notes</h1>
<p>The above code sets the values of <code>dictionary_2</code> as sets. If you want to use list values, use this version of the <code>for</code> loop instead:</p>
<pre><code>for i in range(0,len(countries)):
    dictionary_2[initials[i]] = dictionary_2.get(initials[i], []) + [countries[i]]
    print(dictionary_2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're very close to what you're looking for, You could populate your dictionaries respectively while looping over the contents of the file <code>raw.txt</code> that you're reading. You can also read the contents of the file first and then perform the necessary operations to populate the dictionaries. You could achieve your requirement with nice oneliners in python using dict comprehensions and <code>groupby</code>. Here's an example:</p>
<pre><code>country_per_capita_dict = {}
letter_countries_dict = {}
keywordFile = [line.strip() for line in open('raw.txt' ,'r').readlines()]
</code></pre>
<p>You now have a list of all lines in the <code>keywordFile</code> as follows:</p>
<pre><code>['1:Qatar:98900', '2:Liechtenstein:89400', '3:Luxembourg:80600', '4:Bermuda:69900', '5:Singapore:59700', '6:Jersey:57000', '7:Libya:1000', '8:Sri Lanka:5000']
</code></pre>
<p>As you loop over the items, you can <code>split(':')</code> and use the <code>[1]</code> and <code>[2]</code> index values as required.</p>
<p>You could use dictionary comprehension as follows:</p>
<pre><code>country_per_capita_dict = {entry.split(':')[1] : entry.split(':')[2] for entry in keywordFile}
</code></pre>
<p>Which results in:</p>
<pre><code>{'Qatar': '98900', 'Libya': '1000', 'Singapore': '59700', 'Luxembourg': '80600', 'Liechtenstein': '89400', 'Bermuda': '69900', 'Jersey': '57000'}
</code></pre>
<p>Similarly using <code>groupby</code> from <code>itertools</code> you can obtain:</p>
<pre><code>from itertools import groupby
country_list = country_per_capita_dict.keys()
country_list.sort()
letter_countries_dict = {k: list(g) for k,g in groupby(country_list, key=lambda x:x[0]) }
</code></pre>
<p>Which results in the required dictionary of <code>initial : [list of countries]</code></p>
<pre><code>{'Q': ['Qatar'], 'S': ['Singapore'], 'B': ['Bermuda'], 'L': ['Luxembourg', 'Liechtenstein'], 'J': ['Jersey']}
</code></pre>
<p>A complete example is as follows:</p>
<pre><code>from itertools import groupby

country_per_capita_dict = {}
letter_countries_dict = {}
keywordFile = [line.strip() for line in open('raw.txt' ,'r').readlines()]

country_per_capita_dict = {entry.split(':')[1] : entry.split(':')[2] for entry in keywordFile}
country_list = country_per_capita_dict.keys()
country_list.sort()
letter_countries_dict = {k: list(g) for k,g in groupby(country_list, key=lambda x:x[0]) }

print (country_per_capita_dict)
print (letter_countries_dict)
</code></pre>
<h3>Explanation:</h3>
<p>The line:</p>
<pre><code>country_per_capita_dict = {entry.split(':')[1] : entry.split(':')[2] for entry in keywordFile}
</code></pre>
<p>loops over the following list
<code>['1:Qatar:98900', '2:Liechtenstein:89400', '3:Luxembourg:80600', '4:Bermuda:69900', '5:Singapore:59700', '6:Jersey:57000', '7:Libya:1000', '8:Sri Lanka:5000']</code> and splits each entry in the list by <code>:</code></p>
<p>It then takes the value at index <code>[1]</code> and <code>[2]</code> which are the country names and the per capita value and makes them into a dictionary.</p>
<pre><code>country_list = country_per_capita_dict.keys()
country_list.sort()
</code></pre>
<p>This line, extracts the name of all the countries from the dictionary created before into a list and sorts them alphabetically for <code>groupby</code> to work correctly.</p>
<pre><code>letter_countries_dict = {k: list(g) for k,g in groupby(country_list, key=lambda x:x[0]) }
</code></pre>
<p>This lambda expression takes the input as the list of countries and groups together the names of countries where each <code>x</code> starts with <code>x[0]</code> into <code>list(g)</code>.</p>
</div>
<span class="comment-copy">The <code>setdefault</code> is fine, but <code>defaultdict</code> is the preferred approach.</span>
<span class="comment-copy"><code>groupby</code> only works like you describe if the the data is sorted (in this case, alphabetically). Otherwise, <code>groupby</code> will split the data into a separate group every time the return value of <code>key</code> changes, regardless of whether two groups share that same <code>key</code> value. You should definitely add a sort operation somewhere in your code. Preferably after you do <code>country_list = country_per_capita_dict.keys()</code>, since dicts aren't ordered in versions of Python earlier than 3.6</span>
<span class="comment-copy">Thanks @tel, Good catch! I made the necessary edits.</span>
