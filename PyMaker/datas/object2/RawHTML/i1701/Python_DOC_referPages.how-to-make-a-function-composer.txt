<div class="post-text" itemprop="text">
<p>I am trying to make a function that rounds other functions for my university degree . For example I would like to call the <code>round_sqrt = round(sqrt)</code>
and when i call the <code>round_sqrt(5)</code> it has to shows me <code>2</code> instead of <code>2.23606797749979</code>. What I am trying is this:</p>
<pre><code>def rounding(funct):
    return round(funct)
</code></pre>
<p>but this doesn't work.</p>
<p>EDIT: The function should have only one parameter. For example
the start of the function should be </p>
<pre><code>def rounding(func):
</code></pre>
<p>so in this function the <code>funct</code> function needs to be rounded. 
so when I call <code>rounding(abs)(3.2)</code> it shows me <code>3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your specific example, you can write</p>
<pre><code>def round_sqrt(x):
    return round(sqrt(x))
</code></pre>
<p><a href="https://stackoverflow.com/a/53194540/1126841">Alex's answer</a> generalizes this; he defines a function that <em>creates</em> <code>round_sqrt</code> for you. If the function is already defined, you just pass it as an argument to <code>rounder</code>:</p>
<pre><code>round_sqrt = rounder(sqrt)
</code></pre>
<p>Of course, you don't need to define <code>round_sqrt</code> if you don't want to. <code>rounder(sqrt)(3.2)</code> can be called directly, although it's far more efficient to safe the return value of <code>rounder</code> if you expect to use it multiple times, rather than redefining it each time.</p>
<p>Otherwise, the decorator syntax is just short for (using Alex's example)</p>
<pre><code>def adder(x, y):
    return x + y

adder = rounder(adder)
</code></pre>
<hr/>
<p>As I said in my comment, this is an example of implementing composition. Mathematically, composition is simple, because mathematical functions always take a single argument and return a single argument. As such, the composition of two functions <code>f</code> and <code>g</code> could always be defined simply as</p>
<pre><code>def compose(f, g):
    def h(x):   # The name doesn't matter
        return f(g(x))
    return h
</code></pre>
<p>Then</p>
<pre><code>round_sqrt = compose(round, sqrt)
</code></pre>
<p>(Ignoring all sorts of practical concerns around the implementation, Python could in theory even provide a Unicode operator <code>∘</code> for functions: <code>round_sqrt = round ∘ sort</code>. Explaining <em>why</em> this won't happen is beyond the scope of this answer.)</p>
<p>In Python, though, functions are far more complicated. They can take multiple arguments, they can accept arbitrary numbers of arguments and arbitrary keyword arguments, and while each technically returns a single value, that value can be a tuple which is thought of as multiple values or a <code>dict</code>. As a result, there may be many ways you might expect to pass the return value of <code>g</code> to a function <code>f</code>, more than can easily be accommodated in a simple <code>compose</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should check out closures:</p>
<pre><code>def rounder(func):
    def inner(*args, **kwargs):
        return round(func(*args, **kwargs))
    return inner
</code></pre>
<p>Then you can decorate functions using the <code>@</code> character:</p>
<pre><code>@rounder
def adder(x, y):
    return x + y

print(adder(1.1, 2.2))
</code></pre>
<p>outputs <code>3</code></p>
<p>Supplementary:</p>
<ol>
<li>You can use <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="noreferrer"><code>functools.wraps</code></a> in your closure so you don't lose information (e.g. docstring, function name) about the original function.</li>
<li>There are a bunch of resources for learning about closures (e.g. <a href="https://www.geeksforgeeks.org/python-closures/" rel="noreferrer">1</a>, <a href="https://www.programiz.com/python-programming/closure" rel="noreferrer">2</a>) and decorators (e.g. <a href="https://realpython.com/primer-on-python-decorators/" rel="noreferrer">1</a>, <a href="https://www.thecodeship.com/patterns/guide-to-python-function-decorators/" rel="noreferrer">2</a>) that you can find by Googling those terms.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Function composition isn't supported natively in Python. You can use a decorator as per <a href="https://stackoverflow.com/a/53194540/9209546">@Alex's solution</a>. You can define a new function explicitly as per <a href="https://stackoverflow.com/a/53194655/9209546">@chepner's solution</a>.</p>
<p>Or you can use a 3rd party library. For example, via <a href="https://toolz.readthedocs.io/en/latest/api.html#toolz.functoolz.compose" rel="noreferrer"><code>toolz.compose</code></a>:</p>
<pre><code>from toolz import compose

def adder(x, y):
    return x + y

round_adder = compose(round, adder)

round_adder(1.1, 2.2)  # 3
</code></pre>
</div>
<span class="comment-copy">You are looking for function composition. Mathematically, <code>h = f ∘ g</code> is defined as <code>h(x) = f(g(x))</code>. While it would be nice if Python a composition operator were available in Python, practical concerns require you to define the composed function yourself.</span>
<span class="comment-copy">playing with composition is one of the reasons I quickly fell in love with (then hated, then fell in love with, then hated, then...) Haskell.</span>
<span class="comment-copy">Haskell is easy because everything fits into a theoretically sound mathematical framework. Haskell is hard because we are aren't use to conforming to said framework. :)</span>
<span class="comment-copy">You can either leave the question to help other people or delete it, but please don't just remove all the content.</span>
<span class="comment-copy">@AdamSmith Sounds like you were composing <code>hate . love . hate . love</code></span>
<span class="comment-copy">Shouldn't <code>return f(g(z))</code> be <code>return f(g(x))</code>?</span>
<span class="comment-copy">Yeah, I don't know where <code>z</code> came from.</span>
<span class="comment-copy">Wouldn't it be cleaner to use a lambda inside <code>compose</code>?</span>
<span class="comment-copy">I find <code>def</code> to be clearer when it's possible to use it.</span>
<span class="comment-copy">Hey look, a decorator!</span>
<span class="comment-copy">I cant understand anything. The answer should be more easier I think</span>
<span class="comment-copy">@phpkubrick what? It's 3 lines of code and a function header? How much more simple would you like it? You mentioned you're in university -- you can understand this.</span>
<span class="comment-copy">I cant understand the *args, **kwargs</span>
<span class="comment-copy">@phpkubrick I guess that's the next bit of research you should do then, because they're used <i>all over the place</i> in Python and are incredibly useful. <a href="https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters" title="what does double star asterisk and star asterisk do for parameters">stackoverflow.com/questions/36901/…</a></span>
