<div class="post-text" itemprop="text">
<p>I would like to inquire about something rather simple which is about lambda parameters.</p>
<p>I understand how the function of lambda works but when it comes to this I got confused with which is which parameters.</p>
<p>Example:</p>
<pre><code>from functools import reduce

# Simple example so that I could understand based on the explanation from experts
# here. You could modify as however you wish to explain it.
product = reduce(lambda x, y: x + y, [1,2,3,4])
</code></pre>
<p>Here is a shorter version to compare it:</p>
<pre><code>product = 0
for x in [1,2,3,4]:
    product = product + x
print(product)
</code></pre>
<p>Now, my question is <code>x</code> is the variable for the list or <code>y</code> is the variable for the list in the first example for lambda? And what is the default value for either <code>x</code> or <code>y</code> (judging either one of it belongs to product? since I did not initiate the initial value for it for the "lambda example" and only the second example I initialized.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>map()</code> in python takes in a list, and returns a list where each element has been modified according to some function.  You seem to want to take a list as input and get a number as a result, in which case neither <code>map()</code> nor lambda functions are particularly helpful, and a simple <code>for</code> loop is probably the best way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>With:</p>
<pre><code>product = reduce(lambda x, y: x + y, [1, 2, 3, 4])
</code></pre>
<p>each time the lambda function is called, the <code>x</code> argument is the running total (or <em>accumulated</em> value) and <code>y</code> will be successive elements of the iterable <code>[1, 2, 3, 4]</code>. </p>
<p>Since you didn't specify the optional <em>initializer</em> parameter, the value of <code>x</code> will be set to the first element of the iterable (<code>1</code> in this case) and the first call to the <code>lambda</code> with start with the <em>second</em> element of the iterableâ€”otherwise <code>x</code> would have been the value passed as the initializer and the first call would have passed the first argument of the iterable as the <code>y</code> parameter the first time.</p>
</div>
<span class="comment-copy">Note that <code>product = map(lambda x, y: x + y, [1,2,3,4])</code> does an error when trying to convert to list.</span>
<span class="comment-copy">You appear to have confused <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> with <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a>.  Also, you appear to have confused product with sum.</span>
<span class="comment-copy">sorry, I wrote the wrong code. I was suppose to use reduce and I have changed it</span>
<span class="comment-copy">The product can be a name for product price and not only to product which use for *</span>
<span class="comment-copy">Yes, I actually refer to an example from this <a href="https://www.geeksforgeeks.org/reduce-in-python/" rel="nofollow noreferrer">geeksforgeeks.org/reduce-in-python</a>.</span>
<span class="comment-copy">Ah, I typed this before your edit.  x and y are initially set to the first and second elements in your list, and at each step x is replaced by the result of the previous operation, and y is replaced with the next element in the list: <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.reduce</a></span>
