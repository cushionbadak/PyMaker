<div class="post-text" itemprop="text">
<p>I am trying to make a code that compares the second element of each tuple and extract the tuples that contain duplicates of the second element.</p>
<p>For example, if I have</p>
<pre><code>List = [(0, 2), (1, 0), (2, 1), (3, 2)]

duplicate_tuples = [(0, 2), (3, 2)]  # desired output
</code></pre>
<p>I just cannot figure out how to designate the second element in my for iteration</p>
<pre><code>for i in List: # would iterate each tuple
    if i[1] of i in List is duplicate...
</code></pre>
<p>Lack of pythonic grammar is frustrating. How should I approach this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a chance for more duplicates, So <code>groupby</code> is a better option.</p>
<pre><code>In [6]: from itertools import groupby
In [7]: for g,l in groupby(sorted(lst,key=lambda x:x[1]),key=lambda x:x[1]):
   ...:     temp = list(l)
   ...:     if len(temp) &gt; 1:
   ...:         print g,temp
   ...:   
2 [(0, 2), (3, 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can collect your tuples in a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a>, then report the lists that have more than one duplicate:</p>
<pre><code>from collections import defaultdict

lst = [(0, 2), (1, 0), (2, 1), (3, 2), (2, 0)]

dups = defaultdict(list)
for fst, snd in lst:
   dups[snd].append((fst, snd))

print([v for k, v in dups.items() if len(v) &gt; 1])
# [[(0, 2), (3, 2)], [(1, 0), (2, 0)]]
</code></pre>
<p>Or keep the duplicates in a dictionary for easy lookups:</p>
<pre><code>print({k: v for k, v in dups.items() if len(v) &gt; 1})
# {2: [(0, 2), (3, 2)], 0: [(1, 0), (2, 0)]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Working in numpy arrays would be efficient instead of list/tuples.</p>
<pre><code>import numpy as np
a = np.array([(0, 2), (1, 0), (2, 1), (3, 2),(3,0)])

unique_vals,inverse_indices,counts=np.unique(a[:,1],return_inverse=True,return_counts=True)
</code></pre>
<p>Based on the <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.unique.html" rel="nofollow noreferrer">unique function</a> output, we can generate the duplicates list    </p>
<pre><code>duplicates=[(i,a[inverse_indices==i]) for i  in unique_vals[np.where(counts&gt;1)[0]]]
</code></pre>
<p>Output:</p>
<pre><code>[(0, array([[1, 0],[3, 0]])),
 (2, array([[0, 2],[3, 2]]))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another approach, using numpy:</p>
<pre><code>duplicate_list = []

foo = np.array([(0,2), (1,0), (2,1), (3,2), (3,0), (1,2)])

for i in range(len(np.unique(foo[:,1]))):
    if np.sum(foo[:,1] == i) &gt; 1:
        duplicate_list.append(foo[foo[:,1] == i].tolist())

print(duplicate_list)
</code></pre>
<p>Output:</p>
<pre><code>[[[1, 0], [3, 0]], [[0, 2], [3, 2], [1, 2]]]
</code></pre>
<p>With np.unique(foo[:,1]) we get the unique elements of the second element in a tuple, and then we append it to a list if the count is greater than 1 or duplicate is present, which returns 2 lists as we have 2 occurrences (0 and 2).
If you have a specific number say (2) then we can avoid the loop.</p>
<p>E.g.</p>
<pre><code>bla = np.array([(0, 2), (1, 0), (2, 1), (3, 2)])
duplicate = []

if np.sum(bla[:,1] == 2) &gt; 1:
    duplicate = bla[bla[:,1] == 2].tolist()

print(duplicate)
</code></pre>
<p>Output:</p>
<pre><code>[[0, 2], [3, 2]]
</code></pre>
</div>
<span class="comment-copy">Lack of pythonic grammar is fixed by reading tutorials.</span>
<span class="comment-copy">What happens if more duplicates occur? Like if the list is <code>[(0, 2), (1, 0), (2, 1), (3, 2), (2, 0)]</code>? Then duplicates would be <code>[(0, 2), (3, 2)]</code> and <code>[(1, 0), (2, 0)]</code>. I'm assuming you want to report all duplicates.</span>
<span class="comment-copy">@RoadRunner Indeed. My goal is to report all the duplicates.</span>
<span class="comment-copy">@Julien I have it open, but I have hard time utilizing index position in loops</span>
<span class="comment-copy">Don't use the keywords for variable names 'List'</span>
<span class="comment-copy">@AILearning <code>List</code> is not a reserved keyword in Python. <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer"><code>list</code></a> is. Although its probably better to call is something like <code>lst</code> instead.</span>
<span class="comment-copy">True. Some other name would be better.</span>
<span class="comment-copy">@V Anon, if your problem is resolved, please accept the answer.</span>
