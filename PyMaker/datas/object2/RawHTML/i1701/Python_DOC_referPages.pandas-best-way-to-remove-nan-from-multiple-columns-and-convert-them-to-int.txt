<div class="post-text" itemprop="text">
<p>Suppose I have below CSV data:</p>
<pre><code>col1,col2,col3,label
,1,2,label1
3,,4,label2
5,6,7,label3
</code></pre>
<p>What is the best way to read this data and convert col1 &amp; col2 which would be float to int.</p>
<p>I am able to use <a href="https://stackoverflow.com/questions/50484145/filling-nan-and-converting-to-int-pandas">this</a> and convert my filtered dataframe which only has the numeric columns (col1,col2,col3). How can I modify the main dataframe itself ignoring the label column which is string?</p>
<p>On a related note, I could also use below command. Any idea how I could run it in a loop so that variable name col%d is dynamically generated, since I have 32 columns.</p>
<pre><code>filter_df.col1 = filter_df.col1.fillna(0).astype(int)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.select_dtypes.html" rel="noreferrer"><code>select_dtypes</code></a> with <code>np.number</code>:</p>
<pre><code>print (filter_df)
   col1  col2  col3   label
0   NaN   1.0     2     NaN
1   3.0   NaN     4  label2
2   5.0   6.0     7  label3

cols = filter_df.select_dtypes(np.number).columns
filter_df[cols] = filter_df[cols].fillna(0).astype(int)

print (filter_df)
   col1  col2  col3   label
0     0     1     2     NaN
1     3     0     4  label2
2     5     6     7  label3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>fillna</code> with <code>downcast='infer'</code>.</p>
<pre><code>m = df.dtypes == np.number
df.loc[:, m] = df.loc[:, m].fillna(0, downcast='infer')
print(df)
   col1  col2  col3   label
0     0     1     2     NaN
1     3     0     4  label2
2     5     6     7  label3
</code></pre>
</div>
<span class="comment-copy">To iterate over the 32 columns you could use this approach getattr builtin <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#getattr</a></span>
<span class="comment-copy">Note to readers: <code>select_dtypes</code> will return a new DataFrame and select the  columns from there.</span>
<span class="comment-copy">@coldspeed - sure, what is problem with it?</span>
<span class="comment-copy">No problem, just mentioned to readers who feel memory efficiency is important :)</span>
