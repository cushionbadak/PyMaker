<div class="post-text" itemprop="text">
<p>I'm trying to make a game and I'm trying to beautifully split the main program into more files. I tried to put all the images in another file, but when I run the main program it shows an error that says that the lists that I'm using don't exist, but actually they are in the other file that I imported. I'm going to leave my GitHub link here so you can understand better what I'm saying.</p>
<p><a href="https://github.com/20nicolas/game.git" rel="nofollow noreferrer">https://github.com/20nicolas/game.git</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Note how you're importing <code>images123</code> which then imports from <code>final_game</code>. This isn't a great pattern, as it leads to circular imports. While circular imports <em>can</em> work, they could result in issues at various points.</p>
<p>As it stands, your problem has less to do with the importing and more to do with how you went about writing your code. You want your image sizes to be based off of your <strong>player</strong> object (which is why you need <code>final_game.man</code> in order to run <code>images123</code>), so it would make more sense to have that as part of the <strong>player</strong> object's initialization. Eventually you may want to remove it further using subclasses, but for now I simply would suggest adding a method to handle it. This would also get most of the image variables out of the global space, which will help you in the long run.</p>
<p>For example:</p>
<pre><code>class Player():
    def __init__(self, [etc]):
        [...]
        self.formatsprites()

    def formatsprites(self):
        self.idle = [py.transform.scale(img,(self.width,self.length)) for img in image123.idle]
        self.run_right = [py.transform.scale(img,(man.width,man.length)) for img in image123.run_right]
        [...]
</code></pre>
<p>From there you would adjust the code to refer to <code>self.idle</code> (or whatever it may be) instead of simply <code>idle</code> and remove <code>import final_game</code> and other relevant lines from <code>images123</code>. You may also decide (since <code>Player</code> now has more in it) that you want to move <code>player</code> and <code>bullets</code> off into another file like you did for images.</p>
<p>There are several other structural changes you could make to tighten up your code, but that's part of the learning curve and I'll leave the rest up to you. Congrats on getting so much done and good luck with the rest :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Change the import syntax in final_game.py to:</p>
<pre><code>from images123 import *
</code></pre>
<p>This will import all variables, functions, classes, objects etc. from images123.py to final_game.py, provided that it is in the same directory.</p>
</div>
<span class="comment-copy">I recommend reading some import tutorials (here's the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">official tutorial</a>).</span>
<span class="comment-copy">Ah, I missed that both modules import each other. I fully concur with you that it would be better to restructure the code.</span>
<span class="comment-copy">So, basically, I can't create new modules if in both the modules there are variables that influence each other. For example if I would make a module for the class player and a module for the main loop I couldn't because the main loop need the player x,y etc but also the player need the main loop for upload the x,y etc.</span>
<span class="comment-copy">At the risk of being pedantic: you <i>can</i>, it's just that you normally <i>shouldn't</i> and if you need all your code in one module it is typically an indication that your code isn't isolated enough.</span>
<span class="comment-copy">For your specific example, though, moving <code>player</code> out will not cause any problems as far as I can see. <code>man = player (100,430,100,100)</code> initializes the player class with an x and y value: these values are completely independent of the main loop at that point. When <code>man</code> checks these values in <code>draw</code> they do not refer back to any other part of the program. <code>screen</code>, which comes from the main loop, is passed into the function which means that <code>player</code> is not reaching out into <code>final_game</code> to retrieve it.</span>
<span class="comment-copy">You define <code>Bullet.draw</code> as <code>def draw(self,**win**)</code> which means that <code>draw</code> references the variable passed to it as <code>win</code> (instead of <code>screen</code> like you were expecting). I assume the problem should be solved by changing the definition to <code>def draw(self, screen)</code>. This is actually a good example of how your code was incorrect before, but you didn't realize it because you were just leaving code in the <code>global</code> scope. This same error would have arisen if you had left <code>Player</code> and <code>Bullet</code> in <code>final_game</code> and instead turned the main loop into its own function (which I would recommend anyway).</span>
<span class="comment-copy"><a href="https://softwareengineering.stackexchange.com/questions/345067/from-module-import-x-y-z-vs-from-module-import">Wildcard imports</a> should usually be avoided.</span>
