<div class="post-text" itemprop="text">
<p>Yesterday I posted a question about a grocery list and recieved a lot of help with it. I have encountered another problem with it. Here is my code: </p>
<pre><code>item = {}
while True:
    x = input('enter item: ')
    if x =='done':
         break
    y = float(input('enter price: '))

    item[x] = (y)

slist = {}
print('How much do you want of everything?')
while True:
    listitem = input("Item name: ")
    if listitem == 'done':
        break
    qty = float(input("How many: "))
    slist[listitem] = qty



total = 0
for key in item:
    value = item[key] * slist[key]
    total = total + value
print(total)   
</code></pre>
<p>The problem comes when you input an item for the first loop and then don't input it for the second one. For example, putting in: Milk, 5 - Eggs, 3 - Bread, 2, into the first loop and then only including Milk and Eggs for the second loop results in an error:</p>
<pre><code>Traceback (most recent call last):
   File "V:\Downloads\grocery list.py", line 24, in &lt;module&gt;
     value = item[key] * slist[key]
KeyError: 'Bread'
</code></pre>
<p>What can I do to prevent this from happening? </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of looping</p>
<pre><code>for key in item
</code></pre>
<p>you should be doing</p>
<pre><code>for key in slist
</code></pre>
<p>since <code>item</code> contains all items in the store and <code>slist</code> only the purchased items.
<code>slist</code> is a bad name by the way, it's a dictionary, not a list.</p>
<p>Demo with adjusted code:</p>
<pre><code>enter item: Milk
enter price: 5
enter item: Eggs
enter price: 3
enter item: Bread
enter price: 2
enter item: done
How much do you want of everything?
Item name: Milk
How many: 2
Item name: Eggs
How many: 1
Item name: done
13.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change:</p>
<pre><code>value = item[key] * slist[key]
</code></pre>
<p>to:</p>
<pre><code>value = item[key] * slist.get(key, 0)
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get</code> is used when you want to get a value if it exists, or get a default value otherwise</a>. That makes it so, if <code>slist</code> doesn't contain <code>key</code> (you didn't actually want that item), you treat it as having a count of 0 (if it does have the <code>key</code>, the default <code>0</code> is ignored).</p>
<p>Alternatively, flip your loop to loop over the shopping list (<code>for key in slist:</code>) rather than the inventory, and leave the calculation unchanged. In that case, you <em>want</em> the exception; if your shopping list contains an item that isn't in the store, you want the attempt to look up its price to fail.</p>
<p>Side-note: Not necessary for correctness, but if you're using both the key and the value, it's easier to iterate them both in parallel, rather than just iterating keys, and looking up the value later. It also lets you provide more useful names so the code self-documents. The loop could be changed to (for example):</p>
<pre><code>for listitem, wanted in slist.items():
    value = item[listitem] * wanted 
    total += value
</code></pre>
<p>avoiding repeated lookup and making the intent more clear.</p>
</div>
<span class="comment-copy">You are receiving this error because <code>Bread</code> is not a key in the <code>slist</code> dictionary...</span>
<span class="comment-copy"><code>slist</code> isn't terrible in this particular context, given it's presumably short for "shopping list". Calling it <code>slist</code> does tend to emphasize the wrong part of it though.</span>
<span class="comment-copy">@ShadowRanger well I said bad, not terrible. :)</span>
<span class="comment-copy">Thanks a lot, that saved me a couple points on the assignment. You guys are great!</span>
<span class="comment-copy">@JonathanLudwig no problem!</span>
<span class="comment-copy">Using <code>get</code> looks like coding around the bug to me. There's no reason to loop over every item in the store to compute the checkout price. I second flipping the loop.</span>
<span class="comment-copy">@timgeb: Yeah, I was explaining the minimalist change, but I agree that flipping which <code>dict</code> to loop over makes more sense (especially since, in a real world scenario, the unique items on a shopping list should be a tiny fraction of the total set of items available from the store).</span>
<span class="comment-copy">Thank you! I tried the other answer first and that worked for me but I did what you said too and that worked great! I appreciate your time!</span>
