<div class="post-text" itemprop="text">
<p>I have a coroutine that returns a list of pseudo-random bytes</p>
<pre><code>import asyncio
import random
import os

async def random_bytes():
    random.seed(a=1234)
    results = []
    for _ in range(0, 128):
        await asyncio.sleep(int(os.urandom(1)[0])/4096)
        results.append(random.getrandbits(8))
    return results

loop = asyncio.get_event_loop()
task_1 = loop.create_task(random_bytes())
print(loop.run_until_complete(task_1))
</code></pre>
<p>As expected, this list is always the same on every run, even though the time interval between each generation is different [based on some external entropy from <code>os.urandom</code>], the pseudo-random number generator is seeded with the same value.</p>
<p>Now, if I run two of these concurrently, creating two lists...</p>
<pre><code>loop = asyncio.get_event_loop()
task_1 = loop.create_task(random_bytes())
task_2 = loop.create_task(random_bytes())
print(loop.run_until_complete(asyncio.gather(task_1, task_2)))
</code></pre>
<p>...the lists are always different: the tasks basically interfere with each other, and are no longer deterministic.</p>
<p>How can I have two concurrent tasks of pseudo-random numbers generated, where each list of pseudo-random numbers is just as deterministic as though no other task were running?</p>
<p>[My use case: testing concurrent behaviour, using large amounts of pseudo-random numbers, generated at non-deterministic intervals, but would like the pseudo-random numbers themselves to be the same for each run of the test for each task]</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer"><code>random</code> module docs</a>:</p>
<blockquote>
<p>The functions supplied by this module are actually bound methods of a hidden instance of the random.Random class. You can instantiate your own instances of Random to get generators that donâ€™t share state.</p>
</blockquote>
<pre><code>async def random_bytes():
    generator = random.Random()
    generator.seed(1234)
    results = []
    for _ in range(0, 128):
        await asyncio.sleep(int(os.urandom(1)[0])/4096)
        results.append(generator.getrandbits(8))
    return results
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/random.html#random.getstate" rel="nofollow noreferrer"><code>random.getstate</code></a> and <a href="https://docs.python.org/3/library/random.html#random.setstate" rel="nofollow noreferrer"><code>random.setstate</code></a>, ensuring that between setting the state, generating the random number(s), and getting the state, you <em>don't</em> yield to another task.</p>
<pre><code>async def random_bytes():
    random.seed(a=1234)
    state = random.getstate()
    results = []
    for _ in range(0, 128):
        await asyncio.sleep(int(os.urandom(1)[0])/4096)
        random.setstate(state)
        results.append(random.getrandbits(8))
        state = random.getstate()
    return results
</code></pre>
</div>
