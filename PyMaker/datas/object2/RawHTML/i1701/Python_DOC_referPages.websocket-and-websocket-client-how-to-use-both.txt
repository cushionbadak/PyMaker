<div class="post-text" itemprop="text">
<p>I have some packages that rely on the python websocket package <a href="https://github.com/aaugustin/websockets" rel="nofollow noreferrer">https://github.com/aaugustin/websockets</a></p>
<p>Now I would like to install another package that depends on the websocket-client package
<a href="https://github.com/websocket-client/websocket-client" rel="nofollow noreferrer">https://github.com/websocket-client/websocket-client</a></p>
<p>Both packages are using the command </p>
<pre><code>from websockets import ...
</code></pre>
<p>So right now it doesn't work to use both. Is there any workaround for that kind of behavior? Except for forking one of the packages.</p>
<p>Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>A quick look at the github links you provided suggests that there should be no problem:</p>
<p>WebSockets is imported by</p>
<pre><code>import websockets
</code></pre>
<p>websocket-client is imported by</p>
<pre><code>import websocket
</code></pre>
<p>Notice that there is no "s" in the second case. That being said, if you are using them for different projects you should consider using dev environments like <code>virtualenv</code> or <code>conda</code> anyway.</p>
</div>
<span class="comment-copy">what do you mean by "it doesn't work "? you should provide any errors output</span>
<span class="comment-copy">you have two packages with the same import statement. So basically the error is that it doesn't find a class inside websockets that should be there. I already solved the issue forking websocket-client and renaming it. But still would like to know if there is some good practice for that kind of conflict.</span>
<span class="comment-copy">I see, somehow still had some trouble. Maybe there is a conflict with some other "websocket" package that is installed... So what do you do if both packages are imported in the same way? And you would like to use both of them</span>
<span class="comment-copy">As far as I know, Python doesn't allow two packages with the same name. If you still want to work with that you need to basically create your own importer: <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">PEP 302</a>, <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a></span>
