<div class="post-text" itemprop="text">
<p>I'm using the Python 3 CSV Reader to read some web-log files into a namedtuple.
I have no control over the log file structures, and there are varying types.</p>
<p>The delimiter is a space ( ), the problem is that some log file formats place a space in the timestamp, as Logfile 2 below. The CSV reader then reads the date/time stamp as two fields.</p>
<p>Logfile 1</p>
<pre><code>73 58 2993 [22/Jul/2016:06:51:06.299] 2[2] "GET /example HTTP/1.1"
13 58 224 [22/Jul/2016:06:51:06.399] 2[2] "GET /example HTTP/1.1"
</code></pre>
<p>Logfile 2</p>
<pre><code>13 58 224 [22/Jul/2016:06:51:06 +0000] 2[2] "GET /test HTTP/1.1"
153 38 224 [22/Jul/2016:06:51:07 +0000] 2[2] "GET /test HTTP/1.1"
</code></pre>
<p>The log files typically have the timestamp within square quotes, but I cannot find a way of handling them as "quotes". On top of that, square brackets are not always used as quotes within the logs either (see the [2] later in the logs).</p>
<p>I've read through the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">Python 3 CSV Reader documentation</a>, including about dialects, but there doesn't seem to be anything for handling enclosing square brackets.</p>
<p>How can I handle this situation automatically?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will do, you need to use a regex in place of sep.<br/>
This for example will parse NGinx log files into a <code>pandas.Dataframe</code>:</p>
<pre><code>import pandas as pd

df = pd.read_csv(log_file,
              sep=r'\s(?=(?:[^"]*"[^"]*")*[^"]*$)(?![^\[]*\])',
              engine='python',
              usecols=[0, 3, 4, 5, 6, 7, 8],
              names=['ip', 'time', 'request', 'status', 'size', 'referer', 'user_agent'],
              na_values='-',
              header=None
                )
</code></pre>
<p>Edit : </p>
<pre><code>line = '172.16.0.3 - - [25/Sep/2002:14:04:19 +0200] "GET / HTTP/1.1" 401 - "" "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.1) Gecko/20020827"'
regex = '([(\d\.)]+) - - \[(.*?)\] "(.*?)" (\d+) - "(.*?)" "(.*?)"'

import re
print re.match(regex, line).groups()
</code></pre>
<p>The output would be a tuple with 6 pieces of information</p>
<pre><code>('172.16.0.3', '25/Sep/2002:14:04:19 +0200', 'GET / HTTP/1.1', '401', '', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.1) Gecko/20020827')
</code></pre>
</div>
<span class="comment-copy">I'm guessing this requires the Pandas library. It's good to know it's possible this way, but I was hoping to do it with just the standard libraries.</span>
<span class="comment-copy">Added a version with just regex instead of having to add pandas</span>
