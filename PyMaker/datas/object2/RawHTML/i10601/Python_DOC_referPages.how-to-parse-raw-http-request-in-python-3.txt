<div class="post-text" itemprop="text">
<p>I am looking for a native way to parse an http request in Python 3.</p>
<p><a href="https://stackoverflow.com/questions/4685217/parse-raw-http-headers">This question</a> shows a way to do it in Python 2, but uses now deprecated modules, (and Python 2) and I am looking for a way to do it in Python 3.</p>
<p>I would mainly like to just figure out what resource is requested and parse the headers and from a simple request. (i.e):</p>
<pre><code>GET /index.html HTTP/1.1
Host: localhost
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en;q=0.8
</code></pre>
<p>Can someone show me a basic way to parse this request?</p>
</div>
<div class="post-text" itemprop="text">
<p>Each one of those field names should be delimited by carriage return then newline, and then the field name and value are delimited by a colon. So assuming you already have the response as a string, it <em>should</em> be as easy as:</p>
<pre><code>fields = resp.split("\r\n")
fields = fields[1:] #ignore the GET / HTTP/1.1
output = {}
for field in fields:
    key,value = field.split(':')#split each line by http field name and value
    output[key] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/email.message.html#email.message.Message" rel="nofollow noreferrer"><code>email.message.Message</code></a> class from the <a href="https://docs.python.org/3/library/email.html" rel="nofollow noreferrer"><code>email</code></a> module in the standard library. </p>
<p>By modifying the <a href="https://stackoverflow.com/a/4685559/16148">answer</a> from the question you linked, below is a Python3 example of parsing HTTP headers.</p>
<p>Suppose you wanted to create a dictionary containing all of your header fields:</p>
<pre><code>import email
import pprint
from io import StringIO

request_string = 'GET / HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language: en-US,en;q=0.8'

# pop the first line so we only process headers
_, headers = request_string.split('\r\n', 1)

# construct a message from the request string
message = email.message_from_file(StringIO(headers))

# construct a dictionary containing the headers
headers = dict(message.items())

# pretty-print the dictionary of headers
pprint.pprint(headers, width=160)
</code></pre>
<p>if you ran this at a python prompt, the result would look like:</p>
<pre><code>{'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
 'Accept-Encoding': 'gzip, deflate, sdch',
 'Accept-Language': 'en-US,en;q=0.8',
 'Cache-Control': 'max-age=0',
 'Connection': 'keep-alive',
 'Host': 'localhost',
 'Upgrade-Insecure-Requests': '1',
 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'}
</code></pre>
</div>
<span class="comment-copy">Your first sentence shows that you know you should just use a library (e.g. <code>urllib3</code>, <code>requests</code>). Then you say you're trying to do it in Python 3, and don't know how. Why don't you just use <code>requests</code>?</span>
<span class="comment-copy">@JonathonReinhart I am working in an environment that does not allow the use of third party libraries.</span>
<span class="comment-copy">urllib is not third party</span>
<span class="comment-copy">And it would appear this class in the standard library does what you want.  <a href="https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.MessageClass" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">@cricket_007 he does not mention <code>urllib</code>. He mentions <code>urllib3</code> which is third party.</span>
<span class="comment-copy">This is great - and yes, sorry my formatting of the original request was bad.  However, where do I get the resource here? (i.e. the actual resource being requested).  Since we <code>pop</code> it, how do I know what was actually requested?</span>
<span class="comment-copy">@Startec it would be in the first line, along with the request method and protocol version.</span>
<span class="comment-copy">So I would have to do some string splitting on the first line?</span>
<span class="comment-copy">yes, you could probably just split the first line on whitespace to grab the resource name.</span>
<span class="comment-copy">Thanks for your excellent answer. Could you describe what the <code>StringIO</code> call is doing here?</span>
