<div class="post-text" itemprop="text">
<p>I have a script that searches through config files and finds all matches of strings from another list as follows:</p>
<pre><code>dstn_dir = "C:/xxxxxx/foobar"
dst_list =[]
files = [fn for fn in os.listdir(dstn_dir)if fn.endswith('txt')]
dst_list = []
for file in files:
    parse = CiscoConfParse(dstn_dir+'/'+file)
    for sfarm in search_str:
        int_objs = parse.find_all_children(sfarm)
        if len(int_objs) &gt; 0:
            dst_list.append(["\n","#" *40,file + " " + sfarm,"#" *40])
            dst_list.append(int_objs)
</code></pre>
<p>I need to change this part of the code:</p>
<pre><code> for sfarm in search_str:
            int_objs = parse.find_all_children(sfarm)
</code></pre>
<p><code>search_str</code> is a list containing strings similar to <code>['xrout:55','old:23']</code> and many others.</p>
<p>So it will only find entries that end with the string from the list I am iterating through in <code>sfarm</code>.  My understanding is that this would require my to use <code>re</code> and match on something like <code>sfarm$</code> but Im not sure on how to do this as part of the loop.</p>
<p>Am I correct in saying that <code>sfarm</code> is an iterable?  If so I need to know how to regex on an iterable object in this context.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings in python are iterable, so <code>sfarm</code> is an iterable, but that has little meaning in this case. From reading what <a href="http://www.pennington.net/py/ciscoconfparse/api_CiscoConfParse.html#ciscoconfparse.CiscoConfParse.find_all_children" rel="nofollow"><code>CiscoConfParse.find_all_children()</code></a> does, it is apparent that your <code>sfarm</code> is the <code>linespec</code>, which is a regular expression string. You do not need to explicitly use the <code>re</code> module here; just pass <code>sfarm</code> concatenated with <code>'$'</code>:</p>
<pre><code>search_string = ['xrout:55','old:23']
...
for sfarm in search_str:
    int_objs = parse.find_all_children(sfarm + '$')  # one of many ways to concat
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please check this code. Used glob module to get all "*.txt" files in folder.</p>
<p>Please check here for more info on <a href="https://pymotw.com/2/glob/" rel="nofollow">glob module</a>.</p>
<pre><code>import glob
import re
dst_list = []
search_str = ['xrout:55','old:23']
for file_name in glob.glob(r'C:/Users/dinesh_pundkar\Desktop/*.txt'):
    with open(file_name,'r') as f:
        text = f.read()
        for sfarm in search_str:
            regex = re.compile('%s$'%sfarm)
            int_objs = regex.findall(text)
            if len(int_objs) &gt; 0:
                dst_list.append(["\n","#" *40,file_name + " " + sfarm,"#" *40])
                dst_list.append(int_objs)
print dst_list
</code></pre>
<p>Output:</p>
<pre><code> C:\Users\dinesh_pundkar\Desktop&gt;python a.py
[['\n', '########################################', 'C:/Users/dinesh_pundkar\\De
sktop\\out.txt old:23', '########################################'], ['old:23']]

C:\Users\dinesh_pundkar\Desktop&gt;
</code></pre>
</div>
<span class="comment-copy">You forgot to include the definition of <code>search_str</code>, so it's hard to say what <code>sfarm</code> is. In other words, see <a href="http://stackoverflow.com/help/mcve">"How to create a Minimal, Complete, and Verifiable example"</a>.</span>
<span class="comment-copy"><code>search_str</code> is the iterable and <code>sfarm</code> is a normal element (that may be iterable too) of your list on which you can use regex</span>
<span class="comment-copy">IIja Everila and me wants to know how search_str will populated and from where? More, it will be good if you can add sample data that can be search_str.</span>
<span class="comment-copy">if you only wants to check that a string ends with a substring, you do not need regular expression, the endswith method of string should be enough: <a href="https://docs.python.org/2/library/stdtypes.html?highlight=str.endswith#str.endswith" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">As @DineshPundkar pointed out you could simplify greatly your file handling with either the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a> module or if using python 3 <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob" rel="nofollow noreferrer">pathlib</a> module's globbing features.</span>
<span class="comment-copy">Thanks for the lesson and simple effective solution.  I have accepted this as the answer</span>
<span class="comment-copy">Marking this answer up as per suggestion to use glob, thanks</span>
