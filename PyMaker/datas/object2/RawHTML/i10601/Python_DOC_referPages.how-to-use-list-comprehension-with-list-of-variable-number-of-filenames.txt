<div class="post-text" itemprop="text">
<p>Given the list of filenames <code>filenames = [...]</code>.</p>
<p>Is it possibly rewrite the next list comprehension for I/O-safety: <code>[do_smth(open(filename, 'rb').read()) for filename in filenames]</code>? Using <code>with</code> statement, <code>.close</code> method or something else.</p>
<p>Another problem formulation: is it possibly to write I/O-safe list comprehension for the next code?</p>
<pre><code>results = []
for filename in filenames:
   with open(filename, 'rb') as file:
      results.append(do_smth(file.read()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can put the <code>with</code> statement/block to a function and call that in the list comprehension:</p>
<pre><code>def slurp_file(filename):
    with open(filename, 'rb') as f:
        return f.read()

results = [do_smth(slurp_file(f)) for f in filenames]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow"><code>ExitStack</code></a> introduced in Python 3.3 for this purpose:</p>
<pre><code>with ExitStack() as stack:
    files = [stack.enter_context(open(name, "rb")) for name in filenames]
    results = [do_smth(file.read()) for file in files]
</code></pre>
<p>Note that this opens all the files at once, which is not necessary for this use case, and might not be a good idea if you have a big number of files.</p>
</div>
<span class="comment-copy">The code you have is perfectly clear.  Don't try to put everything in a list comprehension just because you can.</span>
