<div class="post-text" itemprop="text">
<p>I search a text based data format which supports multiline strings.</p>
<p>JSON does not allow multiline strings:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(dict(text='first line\nsecond line'))
'{"text": "first line\\nsecond line"}'
</code></pre>
<p>My desired output:</p>
<pre><code>{"text": "first line
second line"}
</code></pre>
<p>This question is about input and output. The data format should be editable with a editor like vi, emacs or notepad.</p>
<p>I don't care if simple quotes <code>"</code> or tripple quotes (like in Python) <code>"""</code> get used.</p>
<p>Is there a easy for human beings readable textual data interchange format which supports this?</p>
<h1>Use case</h1>
<p>I want to edit data with multiline strings with <code>vi</code>. This is not fun, if the data is in json format.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you should consider <a href="http://yaml.org/"><code>YAML</code></a> format. It supports block notation which is <a href="http://www.yaml.org/spec/1.2/spec.html#id2760844">able to preserve newlines</a> like this</p>
<pre><code>data: |
   There once was a short man from Ealing
   Who got on a bus to Darjeeling
       It said on the door
       "Please don't spit on the floor"
   So he carefully spat on the ceiling
</code></pre>
<p>Also there is a lot of parsers for any kind of programming languages including python <em>(i.e <a href="http://pyyaml.org/wiki/PyYAMLDocumentation">pyYaml</a>)</em>.</p>
<p>Also there is a huge advantage that any valid <a href="http://yaml.org/spec/1.2/spec.html#id2759572">JSON is YAML</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Apropos of your comment:</p>
<blockquote>
<p>I want to use it for configuration. A lot of applications invent
  their own configuration language. I want to avoid this. But json and
  ConfigParser don't satisfy me. Json does not allow strings with
  newlines (only \n) and ConfigParser does not allow nested data
  structures. Next thing that I am missing: Validation (But this is a
  different topic).</p>
</blockquote>
<p>There're 3 main options you have <strong>ConfigParser</strong>, <strong>ConfigObj</strong>, or YAML (<a href="http://pyyaml.org/wiki/PyYAMLDocumentation" rel="nofollow noreferrer"><strong>PyYAML</strong></a>) - each with their particular pros and cons. All 3 are better then JSON for your use-case i.e. configuration file.</p>
<p>Now further, which one is better depends upon what exactly you want to store in your conf file. </p>
<hr/>
<p><strong>ConfigObj</strong> - For configuration and validation (your use-case):</p>
<p>ConfigObj is very simple to use then YAML (also the ConfigParser). Supports default values and types, and also includes validation (a huge plus over ConfigParser).</p>
<p><a href="http://www.voidspace.org.uk/python/articles/configobj.shtml" rel="nofollow noreferrer">An Introduction to ConfigObj</a></p>
<blockquote>
<p>When you perform validation, each of the members in your specification
  are checked and they undergo a process that converts the values into
  the specified type. Missing values that have defaults will be filled
  in, and validation returns either True to indicate success or a
  dictionary with members that failed validation. The individual checks
  and conversions are performed by functions, and adding your own check
  function is very easy.</p>
</blockquote>
<p><strong>P.S. Yes, it allows multiline values</strong>.</p>
<hr/>
<p>Helpful links:</p>
<p><a href="http://www.blog.pythonlibrary.org/2010/01/01/a-brief-configobj-tutorial/" rel="nofollow noreferrer">A Brief ConfigObj Tutorial</a></p>
<p><a href="http://configobj.readthedocs.io/en/latest/configobj.html" rel="nofollow noreferrer">ConfigObj 5 Introduction and Reference</a></p>
<hr/>
<p>There are solid SO answers available on the comparison <strong>YAML</strong> vs <strong>ConfigParser</strong> vs <strong>ConfigObj</strong>:</p>
<p><a href="https://stackoverflow.com/questions/3420250/whats-better-configobj-or-configparser">What's better, ConfigObj or ConfigParser?</a></p>
<p><a href="https://stackoverflow.com/questions/3444436/configobj-configparser-vs-using-yaml-for-python-settings-file">ConfigObj/ConfigParser vs. using YAML for Python settings file</a></p>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p><code>ini</code> format also supports multiline strings; configparser from Python stdlib can handle it. See <a href="https://docs.python.org/3/library/configparser.html#supported-ini-file-structure" rel="nofollow">https://docs.python.org/3/library/configparser.html#supported-ini-file-structure</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>XML with <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow">ElementTree</a> (standard library) or <a href="http://lxml.de/" rel="nofollow">lxml</a> if you are OK with the markup overhead:</p>
<p>Data</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;data&gt;
  &lt;string&gt;Lorem
Ipsum
Dolor
  &lt;/string&gt;
&lt;/data&gt;
</code></pre>
<p>Script</p>
<pre><code>import xml.etree.ElementTree
root = xml.etree.ElementTree.parse('data.xml').getroot()
for child in root:
  print(child.tag, child.attrib, child.text)
</code></pre>
<p>Output</p>
<pre><code>string {} Lorem
Ipsum
Dolor
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the files are only used by Python (overlooking the <em>interchange</em>), you could simply put your data in a python script file and import this as a module:</p>
<p>Data</p>
<pre><code>datum_1 = """ lorem
ipsum
dolor
"""
datum_list = [1, """two
liner"""]
datum_dict = {"key": None, "another": [None, 42.13]}
datum_tuple = ("anything", "goes")
</code></pre>
<p>Script</p>
<pre><code>from data import *
d = [e for e in locals() if not e.startswith("__")]
print( d )
for k in d:
  print( k, locals()[k] )
</code></pre>
<p>Output</p>
<pre><code>['datum_list', 'datum_1', 'datum_dict', 'datum_tuple']
datum_list [1, 'two\nliner']
datum_1  lorem
ipsum
dolor

datum_dict {'another': [None, 42.13], 'key': None}
datum_tuple ('anything', 'goes')
</code></pre>
<p><hr>
Update:</hr></p>
<p>Code with dictionary comprehension</p>
<pre><code>from data import *
d = {e:globals()[e] for e in globals() if not e.startswith("__")}
for k in d:
  print( k, d[k] )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 2, I actually think json can do what you need. You can dump and load json while decoding and encoding it with <code>string-escape</code>:</p>
<pre><code>import json

config_dict = {
    'text': 'first line\nsecond line',
}

config_str = json.dumps(config_dict).decode('string-escape')
print config_str

config_dict = json.loads(config_str.encode('string-escape'))
print config_dict
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>{"text": "first line
second line"}

{u'text': u'first line\nsecond line'}
</code></pre>
<p>So, you can use the decoded string to edit your JSON, newlines included, and when reading it, just encode with string-escape to get the dictionary back.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure whether I've understood your question correctly, but are you not asking for something like this?</p>
<pre><code>my_config = {
    "text": """first line
second line"""
}

print my_config
</code></pre>
</div>
<span class="comment-copy">can you elaborate the data format/purpose i.e. complex structures or some settings/conf file, etc.</span>
<span class="comment-copy">@NabeelAhmed I want to use it for configuration. A lot of applications invent their own configuration language. I want to avoid this. But json and ConfigParser don't satisfy me. Json does not allow strings with newlines (only \n) and ConfigParser does not allow nested data structures. Next thing that I am missing: Validation (But this is a different topic). Dear Nabeel, please leave a new comment if there is something missing.</span>
<span class="comment-copy">I think if you can replace dump result, then the result should be right. <code>data = json.dumps(dict(text='first line\nsecond line')) data = data.replace('\\n', '\n')  print(data)</code></span>
<span class="comment-copy">Upvoted for the limerick.</span>
<span class="comment-copy">What kind of data format is this? You show Python source. This was already the answer of user "handle".</span>
<span class="comment-copy">@guettli Oh, that's right, my point was exactly the same than "handle" user.</span>
