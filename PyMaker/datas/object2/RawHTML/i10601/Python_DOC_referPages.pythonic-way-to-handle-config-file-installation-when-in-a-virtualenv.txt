<div class="post-text" itemprop="text">
<p>Assuming I am installing a python application from setup.py, and doing so within a virtualenv.  Also, assuming that I have a need to provide the application sensitive configurations such as API keys / URIs.</p>
<p>My virtualenv might be in a path such as:</p>
<pre><code>/opt/appname/venv
</code></pre>
<p>I believe I want to be able to install a default config file for the user of the app to modify before successful execution.</p>
<p>A default example might be installed to:</p>
<pre><code>/etc/appname/config.sample
</code></pre>
<p>The problem is, if I am in a virtualenv, setup.py / setuptools really doesn't handle installing into a global path ( as far as I know ).</p>
<p>What would be the best pythonic way to handle this fairly common scenario?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the config file alters Virtual Environment Variables and that is why it must be modified before the launch of the virtual environment, then you can modify the <code>activate</code> bash script located in <code>./venv/bin</code> to accomplish this. So if you want to add a global path from a config file, then last line in <code>activate</code> could be:</p>
<pre><code>MY_GLOBAL_PATH=&lt;program that looks into config file and returns path&gt;
</code></pre>
<p>Then the virtual enviroment can be activated as it usual would:</p>
<pre><code>source ./venv/bin/activate
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using Python's <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">site-specific configuration</a> options? It seems to me like <code>.pth</code> files and a <code>sitecustomize.py</code> file might be helpful.<br/>
See also: <a href="https://stackoverflow.com/a/15209116/6051861">Accepted answer on "Using .pth files"</a>.</p>
<p>Giving more precise detail on what might be done is difficult without a more specific example of the sort of "global path" you mean - even though this is a general style question to some extent.</p>
</div>
<span class="comment-copy">Your question is a little vague. What global path are you talking about. A concrete example would be very useful. Please <a href="https://stackoverflow.com/posts/39007132/edit">edit</a> your question and provide this information.</span>
<span class="comment-copy">I don't think it's vague at all.  A concrete example is impossible as it's a question of pythonic style.</span>
<span class="comment-copy">Have you considered the options of alternative installation? <a href="https://docs.python.org/3/install/index.html#alternate-installation" rel="nofollow noreferrer">docs.python.org/3/install/index.html#alternate-installation</a></span>
<span class="comment-copy">as best as I can tell a post installation script is the best path forward for this, that is what I am doing.  I am using RPM for that.  Python packaging leaves much to be desired in core functionality.</span>
<span class="comment-copy">another option is using a packer on your python env.  i've also looked at cython style solutions but solving dependencies is pretty ugly.  =/  python is not really good at being packaged... still.</span>
<span class="comment-copy">does not solve the issue.</span>
<span class="comment-copy">I like to leave my python applications as naive about the filesystem (including config files) as possible and use environmental variables instead. I find this is a very clean paradigm when using virtual envs and using the method <code>os.getenv</code>. I accomplish this by using the 'VIRTUAL_ENV' variable created by pyvenv to find file inside by project directory or by having an additional bash variable script that contains the locations of config files outside my project dir. If you want to use less bash and more python you can use the <code>os</code> module to set and get environment variables.</span>
<span class="comment-copy">cfm's allow for the deployment of config files cleanly and in a centrally managed fashion.  particularly useful are utilities like encrypted databags / vaults for storying API keys dynamically / securely etc.  environment variables can be dangerous as there can be namespace conflicts more easily.  IMHO.</span>
