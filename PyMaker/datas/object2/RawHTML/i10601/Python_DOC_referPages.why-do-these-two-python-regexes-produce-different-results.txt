<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; re.match(r'"([^"]|(\\\"))*"', r'"I do not know what \"A\" is"').group(0)
'"I do not know what \\"'
&gt;&gt;&gt; re.match(r'"((\\\")|[^"])*"', r'"I do not know what \"A\" is"').group(0)
'"I do not know what \\"A\\" is"'
</code></pre>
<p>These two regexes are intended to be looking for quoted strings, with escaped quote sequences. The difference, unless I am missing something, is the order of the disjunction in the parentheses.</p>
<p>Why do they not both accept the entire string?</p>
</div>
<div class="post-text" itemprop="text">
<p>The order in alternation groups matters.</p>
<p>In the first regex the <code>[^"]</code> alternative is tried first for every character. It matches every single character up to (and including) the first <code>\</code>. On the next character (<code>"</code>) this alternative (<code>[^"]</code>) fails and the other one (<code>\\\"</code>) tried. The latter also fails since <code>"A</code> does not match <code>\\\"</code>. This stop the quantifier <code>*</code> from further matches.</p>
<p>In the second regex the <code>\\\"</code> alternative (parenthesis are redundant) tried first for every character and fails so the second alternative (<code>[^"]</code>) matches. But on at the first <code>\</code> the first alternative matches so the lookup pointer moves past <code>\"</code> to <code>A</code> and lookup goes on.</p>
<p>As a general rule of thumb, place the most narrow expression in alternation first.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you say is true, the order is different. And something else is different.<br/>
The first one <code>"([^"]|(\\\"))*"</code> will match an escape, making it<br/>
match <code>"asdf\"</code>sde" while the other one doesn't.  </p>
<p>Also if you have to handle escape quote, you have to handle escapes as well. So, neither one is valid.  </p>
<p>Here are two kind of standard ways to do this.<br/>
Both handle the escape.<br/>
You can extend this to single quotes as well.<br/>
<em>Use the Dot-All modifier <code>(?s)</code> if you want to span newlines.</em></p>
<p>Method 1. - alternation  </p>
<p><code>"(?:\\.|[^"\\]+)*"</code> </p>
<pre><code> " 
 (?:
      \\ .                 # Escape anything
   |                     # or,
      [^"\\]+              # Not escape not quote
 )*
 "
</code></pre>
<p>Method 2. - unrolled loop  </p>
<p><code>"[^"\\]*(?:\\.[^"\\]*)*"</code> </p>
<pre><code> " 
 [^"\\]*          # Optional not escape not quote
 (?:
      \\ .             # Escape anything
      [^"\\]*          # Optional not escape not quote
 )*
 "
</code></pre>
<p>Both do the same. Method 2 is three to five time faster than Method 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>The regex <code>r'(A|B)'</code> will test first try to match A, and only if that fails will it try to match B (<a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">docs</a>)</p>
<p>So the regex <code>([^"]|(\\\")</code> will first try to match a non-quote, and if that fails it will try to match an escaped quote mark.</p>
<p>So when the regex reaches <code>\"A\"</code> the first part part matches the <code>\</code> (it is not a quote. But then neither part matches <code>"</code>, so the match ends there. The backslash is gobbled by the <code>[^"]</code> so the second half of the expression is never used.</p>
<p>Turned around ((\\")|[^"]), when it reaches <code>\"A\"</code> will first try to match the <code>\"</code> (it works) then it will try to match <code>A</code> (it matches <code>[^"]</code> and so the match continues.</p>
</div>
<span class="comment-copy">I wonder if it's confused by the double grouping, namely, "(outer_group(inner_group))". As far as I'm aware, that doesn't quite work</span>
<span class="comment-copy">What you say is true, the order is different. And something else is different. The first one <code>"([^"]|(\\\"))*"</code> will match an escape, making it match <code>"asdf\"</code>sde" while the other one doesn't. Also if you have to handle escape quote, you have to handle escapes as well. So, neither one is valid.</span>
<span class="comment-copy">And added note that the engine will parse this part <code>\\\"</code> into an <i>escape</i> then a <i>quote</i>. So it only needs to be this <code>\\"</code> in it's literal string form.</span>
<span class="comment-copy">Another rule of thumb is that no two branches of an alternation should be able to match the same thing.  In other words, the character class should exclude the backslash as well as the quote: <code>"([^"\\]|(\\"))*"</code>.  This can have a dramatic effect on performance as well as correctness. (<a href="http://stackoverflow.com/questions/2407870/javascript-regex-hangs-using-v8">ref</a>)</span>
<span class="comment-copy">I was unaware regexes were executed this way, as I was thinking of them as greedy non-deterministic state machines. I think this is the best explanation of specifically why these two regexes produce different results.</span>
<span class="comment-copy">@KevinDolan - An fyi, regular expressions have always been processed left to right. The state machine is constructed in order as the regex is processed. An example is given regex <code>a|ab|abc</code> and target string <code>abc</code>, the <i>ab</i> and <i>abc</i> will never get matched. Keep that in mind when you write regex.</span>
