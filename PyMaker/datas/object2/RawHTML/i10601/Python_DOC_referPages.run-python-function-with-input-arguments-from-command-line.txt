<div class="post-text" itemprop="text">
<p>New to Python, used to use MATLAB.</p>
<p>My function convert.py is:</p>
<pre><code>def convert(a,b)
  factor = 2194.2
  return (a-b)*factor
</code></pre>
<p>How do I run it from the command line with input arguments 'a' and 'b' ?
I tried:</p>
<pre><code>python convert.py 32 46
</code></pre>
<p>But got an error.</p>
<p>I did try to find the answer online, found related things but not the answer:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/3987041/python-run-function-from-the-command-line">Python: Run function from the command line</a> (Stack Overflow)</li>
<li><a href="https://stackoverflow.com/questions/1009860/command-line-arguments-in-python">Command Line Arguments In Python</a>  (Stack Overflow)</li>
<li><a href="http://www.cyberciti.biz/faq/python-command-line-arguments-argv-example/" rel="nofollow noreferrer">http://www.cyberciti.biz/faq/python-command-line-arguments-argv-example/</a></li>
<li><a href="http://www.saltycrane.com/blog/2007/12/how-to-pass-command-line-arguments-to/" rel="nofollow noreferrer">http://www.saltycrane.com/blog/2007/12/how-to-pass-command-line-arguments-to/</a></li>
</ol>
<p>Also, where can I find the answer myself so that I can save this forum for more non-trivial questions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do:</p>
<pre><code>import sys
def convert(a,b):
    factor = 2194.2
    return (a-b)*factor
print(convert(int(sys.argv[1]), int(sys.argv[2])))
</code></pre>
<p>If that is all what should do the script, you dont have to define a function:</p>
<pre><code>import sys
factor = 2194.2
print((int(sys.argv[1]), int(sys.argv[2])*factor)
</code></pre>
<p>If you want change your file (nonetheless you have to add the colon after the function definiton), you could follow your first linked approach:</p>
<pre><code>python -c 'import convert, sys; print convert.convert(int(sys.argv[1]), int(sys.argv[2])'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There exists a Python module for this sort of thing called <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a>, which allows you to do really fancy things around command line flags. You don't really need that - you've just got two numbers on the command line. This can be handled really naively.</p>
<p>Python allows you direct access to the command line arguments via an array called <code>sys.argv</code> - you'll need to <code>import sys</code> first. The first element in this array is always the program name, but the second and third will be the numbers you pass in <code>i.e. sys.argv[1]</code> and <code>sys.argv[2]</code>. For a more complete example:</p>
<pre><code>if len(sys.argv) &lt; 3:
    print 'Didnt supply to numbers'
a = int(sys.argv[1])
b = int(sys.argv[2])
</code></pre>
<p>Of course you'll need some error checking around making sure they are actuall integers/floats. </p>
<p>A bit of extra reading around sys.argv if you're interested <a href="https://docs.python.org/2/library/sys.html#sys.argv" rel="nofollow">here</a></p>
<p>To be complete, we can give an argparse example as well:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='')
parser.add_argument('numbers', type=float, nargs=2,
                            help='Things to perform actions on')
args = parser.parse_args()

a = args.numbers[0]
b = args.numbers[1]

print a, b
</code></pre>
</div>
<span class="comment-copy">What error have you got?</span>
<span class="comment-copy">replace <code>a</code> and <code>b</code> with <code>sys.argv[1]</code> and <code>sys.argv[2]</code>, also checkout <code>argparse</code></span>
<span class="comment-copy">Check <a href="http://stackoverflow.com/documentation/python/1382/parsing-command-line-arguments#t=201608171014404401577">this document</a> out.</span>
<span class="comment-copy">Your added links should have helped!</span>
<span class="comment-copy">@petres: Which one in particular?</span>
