<div class="post-text" itemprop="text">
<p>I have the following two lists:</p>
<pre><code>l1 = [2, 3, 2]
l2 = [0, [0, 1], [0, 1, 0, [0, 1, [0, 0]]]]
</code></pre>
<p>How can I use the first list as a tree index, in order to append an item to the second list, like doing</p>
<pre><code>l2[2][3][2].append(0) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do this only if you know what you're doing:</p>
<pre><code>l1 = [2, 3, 2]
l2 = [0, [0, 1], [0, 1, 0, [0, 1, [0, 0]]]]

str1=repr(l1)
str1=str1.replace(', ','][') # str1=[2][3][2]
eval(repr(l2)+str1) # or var=exec(repr(l2)+str1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no standard way to do that, but this will work:</p>
<pre><code>from functools import reduce
from operator import getitem

def tree_index(tree, index):
    return reduce(getitem, index, tree)

tree_index(l2, l1).append(0)
</code></pre>
<p>As a bonus, the <code>tree_index</code> function also works for dictionaries and any other mappings. For example:</p>
<pre><code>&gt;&gt;&gt; adjs = {'apple': ['red', 'green'], 'swallow': ['african', 'european'] }
&gt;&gt;&gt; tree_index(adjs, ['apples', 0])
'red'
</code></pre>
<p>On the other hand, <code>tree_index</code> will not work for assignments. This will not work:</p>
<pre><code>tree_index(l2, [1,1]) = 33 # throws SyntaxError
</code></pre>
<p>In order to assign to tree indices you need another function or partial indexing:</p>
<pre><code>tree_index(l2, [1])[1] = 33
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work</p>
<pre><code>def tree_append(tree, index_list', val=None):
    for index in index_list:
        tree = tree[index]
    tree.append(val)

l1 = [2, 3, 2]
l2 = [0, [0, 1], [0, 1, 0, [0, 1, [0, 0]]]]

tree_append(l2, l1, val=0)

&gt;&gt; l2
[0, [0, 1], [0, 1, 0, [0, 1, [0, 0. 0]]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>reduce</code></a> function:</p>
<pre><code>In [1]: l1 = [2, 3, 2]

In [2]: l2 = [0, [0, 1], [0, 1, 0, [0, 1, [0, 0]]]]

In [3]: from functools import reduce

In [4]: reduce(lambda l, i: l[i], l1, l2)
Out[4]: [0, 0]

In [5]: l2[2][3][2]
Out[5]: [0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For some strange reason, I immediately thought of a recursive routine, but essentially it does does what Kostas is doing, I just find it easier to follow :</p>
<pre><code>def tree_appender(tree, location, thing):
    sub_tree_index = location.pop(0)
    if len(location) &gt; 0:
        tree_appender(tree[sub_tree_index], location, thing)
    else:
        tree[sub_tree_index].append(thing)
    return


&gt;&gt;&gt; l1 = [2, 3, 2]
&gt;&gt;&gt; l2 = [0, [0, 1], [0, 1, 0, [0, 1, [0, 0]]]]
&gt;&gt;&gt; python_file.tree_appender(l2, l1, "dave")
&gt;&gt;&gt; l2
[0, [0, 1], [0, 1, 0, [0, 1, [0, 0, 'dave']]]]
</code></pre>
<p>It will fail of course if l1 was [0] for example as l2[0] is an int not a list. You could test for that and turn whatever is about to have something appended to it into a list if that was likely to be desired.</p>
</div>
<span class="comment-copy">Though <code>exec</code> should be avoided in general cases, you can just try it, totally based on string operations (just replace comma by <code>']['</code> and concatenate to your command).</span>
<span class="comment-copy">Can you please give me an example of your suggestion? Thank you</span>
<span class="comment-copy">Yeah, sure, I posted an answer, but you should be aware that it fully depend on string and use feature known as reflective programming, which can potentially be dangerous, see <a href="http://stackoverflow.com/questions/1933451/why-should-exec-and-eval-be-avoided">this post on SO</a>.</span>
<span class="comment-copy">That is definitely going to backfire at some point. E.g. when someone uses a tuple as <code>l1</code>. Or a numpy array. Or just array.</span>
<span class="comment-copy">Sure, so that's dangerous as I've already warned OP.</span>
<span class="comment-copy">This is a very good solution, but YiFei's answer worked better for my situation</span>
