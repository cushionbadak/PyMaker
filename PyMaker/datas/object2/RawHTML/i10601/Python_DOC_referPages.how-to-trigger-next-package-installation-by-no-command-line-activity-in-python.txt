<div class="post-text" itemprop="text">
<p>I build installation wizard to application in Python. Recognising all commands included - requires, prior to running - installing of about 20 different packages (project uses different calculation types, like: SVM, FFT, 3D harmonics, K-nearest neighbours, and additional packages for utilising command line and for GUI).</p>
<p>All packages - are needed to be installed one-after-another, sequentially (one installation finishes, then I want to start next package installation). During installation - there are different print status indications, which are automatically printed by installation (not me). </p>
<p>Eventually - all command line prints stop, and this "lack of activity of CMD" - I want to become trigger to run (by my project) next command for installation of next Python package. I think I may somehow use "stdout" emptiness, or other system entity. Please tell how to implement it, or provide short example, or link to example. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The default state of most things in programming is to wait for a function/method/process to return before moving on. For example, if you use <a href="https://docs.python.org/3.5/library/subprocess.html#subprocess.run" rel="nofollow">subprocess.run()</a> to run each command involved in installing, it will wait for the process to return before doing the next thing. The same goes for most other ways of installing.</p>
<p>In general, unless you explicitly use some form of <a href="https://docs.python.org/3/library/concurrency.html" rel="nofollow">concurrency</a> (or something else that uses such, which will almost certainly say so in the documentation), it's going to wait.</p>
<p>So if your install commands are stored in variables <code>cmd1</code>, <code>cmd2</code>, etc, and none take any input once started:</p>
<pre><code># some code
subprocess.run(cmd1, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
subprocess.run(cmd2, stdout=subprocess.PIPE,  stderr=subprocess.PIPE, check=True)
# whatever follows that
</code></pre>
<p>will run <code>cmd1</code>, then run <code>cmd2</code> when <code>cmd1</code> finishes, putting the <code>stdout</code> output of each to the existing <code>stdout</code>, and raising a <code>CalledProcessError</code> and stopping if either one returns non-zero.</p>
<p>Note that if you were to watch <code>stdout</code> instead, the result would probably break if anything was slow - a long blank period without actually being done.</p>
</div>
