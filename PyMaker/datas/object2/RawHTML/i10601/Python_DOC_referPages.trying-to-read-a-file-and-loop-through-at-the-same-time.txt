<div class="post-text" itemprop="text">
<p>I'm pretty new to this so please move this topic if it's in the wrong place or something else. </p>
<p><strong>Problem:</strong> <em>(Quick note: This is all in Python)</em> I am trying to go through these 100 or so files, each with the same number of columns, and take certain columns of the input (the same ones for each file) and write them in a new file. However, these 100 files don't necessarily all have the same number of rows. In the code below, filec is in a loop and continues altering throughout the 100 files. I am trying to get these certain columns that I want by looking at the number of rows in each txt file and looping that many times then taking the numbers I want.</p>
<pre><code>    filec = open(string,'r').read().split(',')
    x = len(filec.readlines())
</code></pre>
<p>I realize the issue is that filec has become a list after using the split function and was originally a string when I used .read(). How would one go about finding the number of lines, so I can loop through the number of rows and get the positions in each row that I want?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it like this:</p>
<pre><code>filec = open (filename, 'r')
lines = filec.readlines ()

for line in lines:
    words = line.split(',')
    # Your code here
</code></pre>
<p>Excuse me if there are any errors, I'm doing this on mobile.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you are just looking for the count of rows, then how about this -</p>
<pre><code>t = tuple(open(filepath\filename.txt, 'r'))

print len(t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried to keep the code clear, it is very possible to do with fewer lines. take in a list of file names, give out a dictionary, mapping the filename to the column you wanted (as a list).</p>
<pre><code>def read_col_from_files(file_names, column_number):
    ret = {}
    for file_name in file_names:
        with open(file_name) as fp:
            column_for_file = []
            for line in fp:
                columns = line.split('\t')
                column_for_file.append(columns[column_number])
        ret[file_name] = column_for_file
    return ret
</code></pre>
<p>I have assumed you have tab delimited columns. Call it like this:</p>
<pre><code>data = read_col_from_files(["file_1.txt", "/tmp/file_t.txt"], 5)
</code></pre>
<p>Here is a sensible shortening of the code using a list comprehension</p>
<pre><code>def read_col_from_files(file_names, column_number):
    ret = {}
    for file_name in file_names:
        with open(file_name) as fp:
            ret[file_name] = [line.split('\t')[column_number] for line in fp]
    return ret
</code></pre>
<p>And here is how to do it on the command line:</p>
<pre><code>cat FILENAMES | awk '{print $3}'
</code></pre>
</div>
<span class="comment-copy">You don't need to know the number of lines. You can iterate directly with <code>for line open(string,'r').readlines():</code></span>
<span class="comment-copy">(Sorry I don't know how to write code as a comment). Perhaps I am misunderstanding your comment or I did not explain clearly, my bad...so basically after the two lines of code above, I said "for i in range(x) a = 20i + 8 b = 20i + 9 c = 20i+9" where filec[a], filec[b], filec[c] were the values in each row that I wanted. Sorry for being unable to write code well here, I am new :(</span>
<span class="comment-copy">@JulienBernu:  No need for the <a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow noreferrer"><code>readlines()</code></a>:  "Note that it's already possible to iterate on file objects using <code>for line in file: ...</code> without calling <code>file.readlines()</code>."  Combine with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate(opened_file, start=1)</code></a> for a count of lines processed.</span>
<span class="comment-copy">Oh thats another way...I didn't know you could go through lines like that. Thanks!</span>
<span class="comment-copy">I suggest <i>The Python Tutorial</i>, section <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">7.2.  Reading and Writing Files</a>, especially subsection <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">7.2.1. Methods of File Objects</a>.</span>
<span class="comment-copy">Thanks so much! I would upvote if I could but I have less than 15 reputation since I'm new :P</span>
<span class="comment-copy">You can upvote and it still counts. It just won't show up on the vote count.</span>
<span class="comment-copy">Oh I see, in that case I guess I did upvote :). Thanks anyway for the help</span>
<span class="comment-copy">@ArtificialIntelligence you could/should accept an answer if it works for you.</span>
<span class="comment-copy">Is this the required answer?</span>
<span class="comment-copy">Hi, pardon my ignorance, but what does tuple do? Are you saying to basically replace the first line of my code with your first line and use len(t) to denote the length?</span>
<span class="comment-copy">I don't know if tuple takes care of the fact that I need to split('). If it does, then please correct me! Thanks again.</span>
<span class="comment-copy">@ArtificialIntelligence: <code>tuple</code> is pretty much like a <code>list</code>, its just that its <code>immutable</code> (you can't modify a <code>tuple</code>). You can iterate through each item and use <code>split()</code>.</span>
