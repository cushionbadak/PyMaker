<div class="post-text" itemprop="text">
<p>The list can be deeper, or shallower, but say I have a list of depth 2 as follows:</p>
<pre><code>a = [['a','b'],['c','d'],['e','f']]
</code></pre>
<p>I want to write a function, <code>f(a)</code>, such that it would return the following new list:</p>
<pre><code>['acef', 'adef', 'bcef', 'bdef']
</code></pre>
<p>Essentially I am mimicking depth first search, where the lists are nodes. I want the function to work with depth=n, where n is any arbitrary integer. What is the most pythonic way to achieve this?</p>
<p>My recursive code is as follows:</p>
<pre><code>def f(elems):
    curr, *rest = elems

    if not rest:
        return ''.join(curr)

    ret = [''.join(x + f(rest)) for x in curr]
    return ret
</code></pre>
<p>How would I go about solving this iteratively? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow">itertools.product</a>:</p>
<pre><code>import itertools

def f(elems):
    *branches, leaves = elems
    for path in itertools.product(*branches):
        yield ''.join(itertools.chain(path, leaves))

a = [['a','b'],['c','d'],['e','f']]
print(list(f(a)))
</code></pre>
<p>This gives:</p>
<pre><code>['acef', 'adef', 'bcef', 'bdef']
</code></pre>
</div>
<span class="comment-copy">Your output isn't a valid Python data structure. Also, why does it look like the <code>['e', 'f']</code> list is getting special treatment? And are you using "depth" to refer to the length?</span>
<span class="comment-copy">That looks like all the combinations from the elements except the last and then concatenate the elements of the last. Not sure if what you're algorithm is is entirely clear. (But if it was, you probably would have the solution)</span>
<span class="comment-copy">@user2357112 oh I see what you mean. It's a modified DFS, so the last element always gets all of its elements concatenated regardless. Yes depth = length</span>
<span class="comment-copy">When I call <code>f(a)</code> I get <code>ValueError: need more than 0 values to unpack</code>. Can you check the function again?</span>
