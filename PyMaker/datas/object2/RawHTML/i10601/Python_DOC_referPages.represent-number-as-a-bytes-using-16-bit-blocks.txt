<div class="post-text" itemprop="text">
<p>I wish to convert a number like <code>683550</code> (0xA6E1E) to <code>b'\x1e\x6e\x0a\x00'</code>, where the number of bytes in the array is a multiple of 2 and where the len of the bytes object is only so long as it needs to be to represent the number.</p>
<p>This is as far as I got:</p>
<pre><code>"{0:0{1}x}".format(683550,8)
</code></pre>
<p>giving:</p>
<pre><code>'000a6e1e' 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>.tobytes</code>-method:</p>
<pre><code>num = 683550
bytes = num.to_bytes((num.bit_length()+15)//16*2, "little")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using python3:</p>
<pre class="lang-py prettyprint-override"><code>def encode_to_my_hex_format(num, bytes_group_len=2, byteorder='little'):
  """
  @param byteorder can take the values 'little' or 'big'
  """
  bytes_needed = abs(-len(bin(num)[2: ]) // 8)

  if bytes_needed % bytes_group_len:
    bytes_needed += bytes_group_len - bytes_needed % bytes_group_len

  num_in_bytes = num.to_bytes(bytes_needed, byteorder)
  encoded_num_in_bytes = b''

  for index in range(0, len(num_in_bytes), bytes_group_len):
    bytes_group = num_in_bytes[index: index + bytes_group_len]

    if byteorder == 'little':
      bytes_group = bytes_group[-1: -len(bytes_group) -1 : -1]

    encoded_num_in_bytes += bytes_group

  encoded_num = ''

  for byte in encoded_num_in_bytes:
    encoded_num += r'\x' + hex(byte)[2: ].zfill(2)

  return encoded_num

print(encode_to_my_hex_format(683550))
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/struct.html#format-strings" rel="nofollow noreferrer">docs.python.org/3/library/struct.html#format-strings</a></span>
<span class="comment-copy">What's up with the crazy byte order? That's not big-endian or little-endian.</span>
<span class="comment-copy">@user2357112 I'm sorry. The reason it was messed up was because I was using "hexdump -x" to view the bytes in the file. Without the -x it makes more sense.</span>
<span class="comment-copy">Outputting [hex(i) for i in t] for your answer gives ['0x1e', '0x6e', '0xa', '0x0']. I'm looking for  ['0x6e', '0x1e', '0x0','0xa']</span>
<span class="comment-copy">so you really want this mixed little-big-endian stuff. So see my updated answer.</span>
<span class="comment-copy">I'm sorry @Daniel, your original answer was indeed correct. I was using "hexdump -x" to view the file which was switching things around. I've edited my question with the correct bytes.</span>
<span class="comment-copy">so back again, again.</span>
<span class="comment-copy">You need to output bytes not a string.</span>
<span class="comment-copy">Then just return encoded_num_in_bytes instead of encoded_num in the function.</span>
