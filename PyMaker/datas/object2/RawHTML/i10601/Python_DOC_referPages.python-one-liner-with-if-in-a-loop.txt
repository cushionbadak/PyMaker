<div class="post-text" itemprop="text">
<p>I'm having a problem .</p>
<p>How can I write below one liner using function?</p>
<pre><code>def onlyPairs(string):
    for x in string:
        if int(x)%2:
            return False
    return True

print [string for string in map(str, myList) if onlyPairs(string) ]
</code></pre>
<p>I've been on it for hours, I feel I'm getting close but I can't see the solution involving only one line.</p>
<p>I'm trying to have a list of numbers with each figure of the number that is even.</p>
<p>For example if mylist is [1200,3520,2002,2006,1230] then the line should produce a new list with only [2002,2006] in it.</p>
</div>
<div class="post-text" itemprop="text">
<p>use sets:</p>
<pre><code>myList = [1200, 3520, 2002, 2006, 1230]
print [num for num in myList if not set(str(num)) - set('02468')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a generator expression with <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all()</code></a>:</p>
<pre><code>[item for item in myList if all(not int(x)%2 for x in str(item))]
</code></pre>
<p>But it seems that you want to check if all digits of a number are even. Which in that case converting the number to string is not a good idea. Instead you can use following function, which works with integers:</p>
<pre><code>def check_all_even(num):
  while num:
    n = num % 10
    num = num / 10
    if n % 2:
      return False
  return True
</code></pre>
<p>The filter your list with it:</p>
<pre><code>filter(check_all_even, myList)
</code></pre>
<p>Demo:</p>
<pre><code>lst = [1200, 3520, 2002, 2006, 1230]
print filter(check_all_even, lst) # In python 3.x print(list(filter(check_all_even, lst))) 
[2002, 2006]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a possible solution:</p>
<pre><code>myList = [1200, 3520, 2002, 2006, 1230]
print map(str, filter(lambda x: all([int(d) % 2 == 0 for d in str(x)]), myList))
</code></pre>
</div>
<span class="comment-copy">What are you trying to do? Create a list of strings (of 1 character length) of even numbers? In one line?</span>
<span class="comment-copy">Why do you care how big a function is? It'll be one line regardless when you call it. Saving 4 lines to create a less readable function is hardly worth it.</span>
<span class="comment-copy">I know and I'm totally aware of this, but the point is that I want to train doing one liners ,even if it's less readable. Our professor just loves one liners, and did last year exam with only one liners. So I wanna be prepared .</span>
<span class="comment-copy">Get a new professor. Seventh line of the Zen of Python: "Readability counts."</span>
<span class="comment-copy">I agree that readability counts (and the professor should point this out, too), but as a programming excercise, one-lines make sense, IMHO, as they require learning lots of builtins and such (like <code>all</code> in this case) and promote a functional programming style.</span>
<span class="comment-copy">Alternatively: <code>if not str(num).translate(None, '02468')</code></span>
<span class="comment-copy">Clearly you have understood the problem at hand (both first and second degrees), and your answer readily addresses that problem. That said, <i>explaining</i> the code in your answer would go a long way towards helping the questioner (and further readers) I believe. Also, upvotes would come.</span>
<span class="comment-copy">Thanks a lot . The all( ) function helped me a lot, I was trying to do something close to it , but didn't manage to.</span>
<span class="comment-copy">The list comprehension solution doesn't work.</span>
<span class="comment-copy">@StefanPochmann Yes, the <code>not</code> should be inside the <code>all()</code> function, I think at first I thought all the digits should be odd. Thanks for attention.</span>
<span class="comment-copy">It didn't do "all odd", either. It did "not all odd". Now it's "all not odd", and alternatively you could use "not any odd" (which should be slightly faster, since the <code>not</code> is only applied once per number, not once per digit).</span>
<span class="comment-copy">@tobias_k Because this answer was posted before the OP edited</span>
<span class="comment-copy">Ah, my bad. But now, this will produce a generator with Python 3. Might be better to use a list comprehension instead of map.</span>
