<div class="post-text" itemprop="text">
<p>I have a list which is like</p>
<pre><code>a=[{'time':3},{'time':4},{'time':5}]
</code></pre>
<p>I want to get the cumulative sum of the values in reversed order like this</p>
<pre><code>b=[{'exp':3,'cumsum':12},{'exp':4,'cumsum':9},{'exp':5,'cumsum':5}]
</code></pre>
<p>What is the most efficient way to get this ? I have read other answer where using <code>numpy</code> gives the solution like </p>
<pre><code>a=[1,2,3]
b=numpy.cumsum(a)
</code></pre>
<p>but I need to insert the cumsum in the dictionary as well</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=[{'time':3},{'time':4},{'time':5}]
b = []
cumsum = 0
for e in a[::-1]:
    cumsum += e['time']
    b.insert(0, {'exp':e['time'], 'cumsum':cumsum})
print(b)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[{'exp': 3, 'cumsum': 12}, {'exp': 4, 'cumsum': 9}, {'exp': 5, 'cumsum': 5}]
</code></pre>
<p><hr/>
So it turns out that inserting at the start of a list is <a href="https://stackoverflow.com/questions/7776938/python-insert-vs-append">slow</a> (O(n)). Instead, try a <code>deque</code> (O(1)):</p>
<pre><code>from collections import deque


a=[{'time':3},{'time':4},{'time':5}]
b = deque()
cumsum = 0
for e in a[::-1]:
    cumsum += e['time']
    b.appendleft({'exp':e['time'], 'cumsum':cumsum})
print(b)
print(list(b))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>deque([{'cumsum': 12, 'exp': 3}, {'cumsum': 9, 'exp': 4}, {'cumsum': 5, 'exp': 5}])
[{'cumsum': 12, 'exp': 3}, {'cumsum': 9, 'exp': 4}, {'cumsum': 5, 'exp': 5}]
</code></pre>
<p><hr/>
Here is a script to test the speed of each of the approaches ITT, as well as a chart with timing results:</p>
<p><a href="https://i.stack.imgur.com/ItblP.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ItblP.png"/></a></p>
<pre><code>from collections import deque
from copy import deepcopy
import numpy as np
import pandas as pd
from random import randint
from time import time


def Nehal_pandas(l):
    df = pd.DataFrame(l)
    df['cumsum'] = df.ix[::-1, 'time'].cumsum()[::-1]
    df.columns = ['exp', 'cumsum']
    return df.to_json(orient='records')


def Merlin_pandas(l):
    df           = pd.DataFrame(l).rename(columns={'time':'exp'})
    df["cumsum"] = df['exp'][::-1].cumsum()
    return df.to_dict(orient='records')


def RahulKP_numpy(l):
    cumsum_list = np.cumsum([i['time'] for i in l][::-1])[::-1]
    for i,j in zip(l,cumsum_list):
        i.update({'cumsum':j})


def Divakar_pandas(l):
    df = pd.DataFrame(l)
    df.columns = ['exp']
    df['cumsum'] = (df[::-1].cumsum())[::-1]
    return df.T.to_dict().values()


def cb_insert_0(l):
    b = []
    cumsum = 0
    for e in l[::-1]:
        cumsum += e['time']
        b.insert(0, {'exp':e['time'], 'cumsum':cumsum})
    return b


def cb_deque(l):
    b = deque()
    cumsum = 0
    for e in l[::-1]:
        cumsum += e['time']
        b.appendleft({'exp':e['time'], 'cumsum':cumsum})
    b = list(b)
    return b


def cb_deque_noconvert(l):
    b = deque()
    cumsum = 0
    for e in l[::-1]:
        cumsum += e['time']
        b.appendleft({'exp':e['time'], 'cumsum':cumsum})
    return b


def hpaulj_gen(l, var='value'):
    cum=0
    for i in l:
        j=i[var]
        cum += j
        yield {var:j, 'sum':cum}


def hpaulj_inplace(l, var='time'):
    cum = 0
    for i in l:
        cum += i[var]
        i['sum'] = cum


def test(number_of_lists, min_list_length, max_list_length):
    test_lists = []

    for _ in range(number_of_lists):
        test_list = []
        number_of_dicts = randint(min_list_length,max_list_length)
        for __ in range(number_of_dicts):
            random_value = randint(0,50)
            test_list.append({'time':random_value})
        test_lists.append(test_list)

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = list(hpaulj_gen(l[::-1], 'time'))[::-1]
    elapsed_time = time() - start_time
    print('hpaulj generator:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        hpaulj_inplace(l[::-1])
    elapsed_time = time() - start_time
    print('hpaulj in place:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = cb_insert_0(l)
    elapsed_time = time() - start_time
    print('craig insert list at 0:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = cb_deque(l)
    elapsed_time = time() - start_time
    print('craig deque:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = cb_deque_noconvert(l)
    elapsed_time = time() - start_time
    print('craig deque no convert:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        RahulKP_numpy(l) # l changed in place
    elapsed_time = time() - start_time
    print('Rahul K P numpy:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = Divakar_pandas(l)
    elapsed_time = time() - start_time
    print('Divakar pandas:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = Nehal_pandas(l)
    elapsed_time = time() - start_time
    print('Nehal pandas:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')

    lists = deepcopy(test_lists)
    start_time = time()
    for l in lists:
        res = Merlin_pandas(l)
    elapsed_time = time() - start_time
    print('Merlin pandas:'.ljust(25), '%.2f' % (number_of_lists / elapsed_time), 'lists per second')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A generator based solution:</p>
<pre><code>def foo(a, var='value'):
    cum=0
    for i in a:
        j=i[var]
        cum += j
        yield {var:j, 'sum':cum}

In [79]: a=[{'time':i} for i in range(5)]
In [80]: list(foo(a[::-1], var='time'))[::-1]
Out[80]: 
[{'sum': 10, 'time': 0},
 {'sum': 10, 'time': 1},
 {'sum': 9, 'time': 2},
 {'sum': 7, 'time': 3},
 {'sum': 4, 'time': 4}]
</code></pre>
<p>In quick time tests this is competitive with <code>cb_insert_0</code></p>
<p>The in-place version does even better:</p>
<pre><code>def foo2(a, var='time'):
    cum = 0
    for i in a:
        cum += i[var]
        i['sum'] = cum
foo2(a[::-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another approach using <code>pandas</code> -</p>
<pre><code>df = pd.DataFrame(a)
df.columns = ['exp']
df['cumsum'] = (df[::-1].cumsum())[::-1]
out = df.T.to_dict().values()
</code></pre>
<p>Sample input, output -</p>
<pre><code>In [396]: a
Out[396]: [{'time': 3}, {'time': 4}, {'time': 5}]

In [397]: out
Out[397]: [{'cumsum': 12, 'exp': 3}, {'cumsum': 9, 'exp': 4}, {'cumsum': 5, 'exp': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>a            = [{'time':3},{'time':4},{'time':5}]
df           = pd.DataFrame(a).rename(columns={'time':'exp'})
df["cumsum"] = df['exp'][::-1].cumsum()
df.to_dict(orient='records')
</code></pre>
<p>Dicts are not ordered.</p>
<pre><code> [{'cumsum': 12, 'exp': 3}, {'cumsum': 9, 'exp': 4}, {'cumsum': 5, 'exp': 5}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>cumsum_list = np.cumsum([i['time'] for i in a][::-1])[::-1]
for i,j in zip(a,cumsum_list):
     i.update({'cumsum':j})
</code></pre>
<p><strong>Result</strong></p>
<pre><code>[{'cumsum': 12, 'time': 3}, {'cumsum': 9, 'time': 4}, {'cumsum': 5, 'time': 5}]
</code></pre>
<p><strong>Efficiency</strong></p>
<p>Change into a function,</p>
<pre><code>In [49]: def convert_dict(a):
....:     cumsum_list = np.cumsum([i['time'] for i in a][::-1])[::-1]
....:     for i,j in zip(a,cumsum_list):
....:              i.update({'cumsum':j})
....:     return a
</code></pre>
<p>And then the result,</p>
<pre><code>In [51]: convert_dict(a)
Out[51]: [{'cumsum': 12, 'time': 3}, {'cumsum': 9, 'time': 4}, {'cumsum': 5, 'time': 5}]
</code></pre>
<p>Finally efficiency,</p>
<pre><code>In [52]: %timeit convert_dict(a)
The slowest run took 12.84 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 12.1 Âµs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>pandas</code>:</p>
<pre><code>In [4]: df = pd.DataFrame([{'time':3},{'time':4},{'time':5}])

In [5]: df
Out[5]: 
   time
0     3
1     4
2     5

In [6]: df['cumsum'] = df.ix[::-1, 'time'].cumsum()[::-1]

In [7]: df
Out[7]: 
   time  cumsum
0     3      12
1     4       9
2     5       5

In [8]: df.columns = ['exp', 'cumsum']

In [9]: df
Out[9]: 
   exp  cumsum
0    3      12
1    4       9
2    5       5

In [10]: df.to_json(orient='records')
Out[10]: '[{"exp":3,"cumsum":12},{"exp":4,"cumsum":9},{"exp":5,"cumsum":5}]'
</code></pre>
</div>
<span class="comment-copy">The most efficient way is using numpy, specially if the list is very large. Whether you need the cumsum into a dictionary depends on your application, and it might just come from bad <i>design</i>. Why don't you use <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a>? It seems to suit perfectly with your example.</span>
<span class="comment-copy">@ImanolLuengo, Thanks. My lists are not large but of varying lengths. The number of such list is a million</span>
<span class="comment-copy">Uset <a href="https://docs.python.org/3/library/timeit.html#module-timeit" rel="nofollow noreferrer">timeit</a> or <a href="https://docs.python.org/3/library/profile.html#the-python-profilers" rel="nofollow noreferrer">cProfile</a> to evaluate the solutions.  Let us know the results.  For solutions that convert the list to another object type, be sure to include that conversion in the timing.</span>
<span class="comment-copy">Thanks @craig, But is this the reasonably  efficient way ?. Because I have about a million lists like this</span>
<span class="comment-copy">Time the various approaches here and let us know :)</span>
<span class="comment-copy">For your effort +1, :) Nice work yar.</span>
<span class="comment-copy">Plus for the <i>in-place</i> version.</span>
<span class="comment-copy">adding to timings :)</span>
<span class="comment-copy">Winner! Winner!</span>
<span class="comment-copy">How fast is pandas in converting dict to df and back?  That must take a lot more time than the cumsum.</span>
<span class="comment-copy">@hpaulj No idea really! Would be nice to some timings I guess.</span>
