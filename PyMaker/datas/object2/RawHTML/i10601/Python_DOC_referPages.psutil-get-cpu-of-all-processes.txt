<div class="post-text" itemprop="text">
<p>Maybe I'm overlooking something, but I can't figure out how to get <code>current_process.cpu_percent(interval=0.1)</code> for all processes at once without iterating over them. Currently iteration will take <code>process_count * interval</code> seconds to finish. Is there a way around this?</p>
<p>So far I'm doing:</p>
<pre><code>#!/usr/bin/env python2
import psutil

cpu_count = psutil.cpu_count()

processes_info = []
for proc in psutil.process_iter():
    try:
        pinfo = proc.as_dict(attrs=['pid', 'username', 'memory_info', 'cpu_percent', 'name'])

        current_process = psutil.Process(pid=pinfo['pid'])

        pinfo["cpu_info"] = current_process.cpu_percent(interval=0.1)
        processes_info.append(pinfo)

    except psutil.NoSuchProcess:
        pass

print processes_info
</code></pre>
<p>As far as I understand it, I cannot include <code>cpu-percent</code> into the <code>attr</code>-list, since the help states</p>
<blockquote>
<p>When interval is 0.0 or None compares system CPU times elapsed since last call or module import, returning immediately. That means the first time this is called it will return a meaningless 0.0 value which you are supposed to ignore. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In order to calculate CPU% you necessarily have to wait.
You don't have to wait 0.1 secs <strong>for each process/iteration</strong> though. 
Instead, iterate over all processes, call cpu_percent() with interval=0,  ignore the return value then wait 0.1 secs (or more). 
The second time you iterate over all processes cpu_percent(interval=0) will return a meaningful value. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is a kind of measuring CPU time of each process, so, you cannot avoid <code>process_count * interval</code> seconds in a single Python interpreter process. Maybe, you could reduce the time by means of multiprocessing.</p>
<p><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">https://docs.python.org/3/library/multiprocessing.html</a></p>
</div>
<span class="comment-copy">It seems that this solution works like a parallel measurement. This solution reduces time from <code>process_count * interval</code>  to <code>interval</code>.</span>
