<div class="post-text" itemprop="text">
<p>Why does this piece of code work the way it does?</p>
<pre><code>x = 3
print(dir())   #output indicates that x is defined in the global scope
del (x)
print(dir())   #output indicates that x is not defined in the global scope
</code></pre>
<p>My understanding is that <code>del</code> is a keyword in Python, and what follows <code>del</code> should be a name. <code>(name)</code> is not a name. Why does the example seem to show that <code>del (name)</code> works the same as <code>del name</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The definition of the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-del-statement" rel="nofollow noreferrer"><code>del</code> statement</a> is:</p>
<pre><code>del_stmt ::=  "del" target_list
</code></pre>
<p>and from the definition of <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer"><code>target_list</code></a>:</p>
<pre><code>target_list ::=  target ("," target)* [","]
target      ::=  identifier
                 | "(" target_list ")"
                 | "[" [target_list] "]"
                 | ...
</code></pre>
<p>you can see that parentheses around the list of targets are allowed.</p>
<p>For example, if you define <code>x,y = 1,2</code>, all of these are allowed and have the same effect:</p>
<pre><code>del x,y
del (x,y)
del (x),[y]
del [x,(y)]
del ([x], (y))
</code></pre>
</div>
<span class="comment-copy">What follows <code>del</code> is not always a name; consider <code>del arr[n]</code> or <code>del obj.attr</code>.</span>
<span class="comment-copy">You can put parentheses around any expression, and the value is the same as the expression. E.g. <code>foo = x</code> or <code>foo = (x)</code> are the same thing.</span>
<span class="comment-copy"><code>del(name)</code> is interpreted as <code>del (name)</code>, and the parentheses are ignored. It's like doing <code>print('name')</code> in Python2.7, it is <i>interpreted</i> as <code>print ('name')</code>.</span>
<span class="comment-copy">You can <code>del</code> (almost?) anything you can assign to. You can assign to <code>(a, b)</code>, so you can <code>del (a, b)</code>. Similarly, you can assign to <code>(a)</code> (though it's probably a bad idea), so you can <code>del (a)</code> (though it's probably a bad idea). You can even assign <code>[] = any_empty_iterable</code> as a weird special case, so you can <code>del []</code> (which has no effect).</span>
<span class="comment-copy">@user2357112 You should post that as an answer.</span>
