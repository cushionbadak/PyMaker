<div class="post-text" itemprop="text">
<pre><code>array1D = ['book', 'aa', 'Ab', 'AB']
arrayMD = ['ss', 'book', 'fd', '2'], ['sw', 'd'], ['we', 'wr']
</code></pre>
<p>How could I check to see if any element in array1D exists in arrayMD?</p>
<p>So far I just know of the find() method and that seems to only work for one element search.</p>
<p>Edit: I'd like to get it's index from arrayMD as well</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>array1D = ['book', 'aa', 'Ab', 'AB']
arrayMD = [['ss', 'book', 'fd', '2'], ['sw', 'd'], ['we', 'wr']]

for word in array1D:
    for arrindex, subarr in enumerate(arrayMD):
        for wordindex, subword in enumerate(subarr):
            if word == subword:
                print(word, arrindex, wordindex)
                break
</code></pre>
<p><strong>Output:</strong>
('book', 0, 1)</p>
<p>It's not efficient as it's iterating through each element in each array but it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" rel="nofollow"><code>in</code></a>.</p>
<pre><code>for sublist in arrayMD:
    for index, element in enumerate(sublist):
        if element in array1D:
             # Do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are just wondering if the element is anywhere within the second 'array', then it is probably best to flatten it first which also has the advantage of being able to deal with arrays of any depth.  This is most easily done with <code>numpy</code> if you aren't sure how deep the lists will be.</p>
<pre><code>import numpy as np

arrayMD_flat = np.array(arrayMD).flatten()

for item in array1D:
    if item in arrayMD_flat:
        print('{0} was found!'.format(item))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def check(list_md, list_1d):
    def flatten(l, index=None):
        """
         this function will flatten list_md recursively
         getting only elements which where found 
         and return list of tuples
        """
        for i, el in enumerate(l):  # using enumerate to get index
            _index = [i] if index is None else index + [i]  # getting nested list's indexes
            if isinstance(el, collections.Iterable) and not isinstance(el, (str, bytes)):
                for sub in flatten(el, _index):
                    yield sub

            else:
                """
                returning (
                        &lt;element itself&gt;,
                        &lt;index of element&gt;
                    )
                """
                if el in list_1d:
                    yield el, _index


    return list(flatten(list_md))

# example
print(check([1, 2, [3, [4, 5, 6, [20]]]], [5, 20, 29]))

# your example
list_md_example = [['ss', 'book', 'fd', '2'], ['sw', 'd'], ['we', 'wr']]
list_1d_example = ['book', 'aa', 'Ab', 'AB']
print(
    check(
        list_md_example,
        list_1d_example
    )
)
</code></pre>
<p>output in first example will be 
<code>[(5, [2, 1, 1]), (20, [2, 1, 3, 0])]</code>
which means that number 5 was found and it's index is [2,1,1]</p>
<p>second example will output
<code>[('book', [0, 1])]</code> </p>
<p>if returned list is empty it's means elements from 1DArray weren't found in MDArray</p>
</div>
<span class="comment-copy">is arrayMD always 2d ?  or it can have  different dimensions?</span>
<span class="comment-copy">the dimensions vary a lot.</span>
<span class="comment-copy">Does this work for 3-dimensional matrices, or for those with even more dimensions? (Each dimension adds a layer to the lists.)</span>
<span class="comment-copy">This particular code does not, this works if <code>arrayMD</code> is a 2D list. Now the question is, do you want to find the index of an element in n-nested lists? Or flatten the entire list to get the index then? I can update my answer accordingly.</span>
<span class="comment-copy">The OP's comment says that the number of dimensions "vary a lot." So making your code work for any number of dimensions would improve your answer.</span>
