<div class="post-text" itemprop="text">
<p>I have a python module with lots of python scripts in, I want to read these scripts and check if a variable is set.</p>
<p>I'm currently reading the files line by line, but as the scripts i'm reading are in python i'm guessing there is a better way?</p>
<pre><code>for filename in glob.glob(os.path.join(my_path, '*.py')):
    with open(filename) as f:
        for line in f:
            if 'my_variable' in line:
                variable_exists = True
</code></pre>
<p><strong>Edit</strong></p>
<p>I have a directory which has lots of classes, some have variables which affect how the script runs.
e.g.</p>
<pre><code>class Script1():
    name = 'script1'
    countrys = ['US', 'UK', 'AU']

class Script2():
    name = 'script2'
    countrys = ['US', 'CA']
</code></pre>
<p>From this i want to achieve</p>
<pre><code>[
    {'name': 'script1', 'country': 'US'},
    {'name': 'script1', 'country': 'UK'},
    {'name': 'script1', 'country': 'AU'},
    {'name': 'script2', 'country': 'US'},
    {'name': 'script2', 'country': 'CA'}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a working example for your question:</p>
<pre><code>import glob
import inspect
import os
import sys
import importlib


def get_classes(module):
    def pred(c):
        if inspect.isclass(c) and hasattr(c, "countrys"):
            return True
        return False

    for value in inspect.getmembers(module, pred):
        yield value


def list_plugins(search_paths, my_path):
    output = set()

    for path in search_paths:
        sys_path = list(sys.path)
        sys.path.insert(0, path)

        for f in glob.glob(my_path):
            print f
            location, ext = os.path.splitext(f)
            mod_name = os.path.basename(location)

            mod = importlib.import_module(mod_name)
            print os.path.abspath(mod.__file__)
            for c in get_classes(mod):
                output.add(c)

        sys.path[:] = sys_path

    return output


if __name__ == "__main__":
    output = []

    for p in list_plugins(["test"], os.path.join("test","*.py")):
        name, plugin = p[0], p[1]

        for c in plugin.countrys:
            output.append({
                'name': name,
                'country': c
            })

    print output
</code></pre>
<p>Some comments, to make it work, create a folder in the same script's folder called <code>test</code> containing an empty <code>__init__.py</code> file and one (or more) python files with the classes you've mentioned in your question.</p>
<p>The important bits of the code are the usage of <a href="https://docs.python.org/2/library/importlib.html#importlib.import_module" rel="nofollow">import_module</a> and <a href="https://docs.python.org/2/library/inspect.html" rel="nofollow">inspect</a></p>
<p>It's a little example but it should be a good starting point for you. Hope it helps.</p>
</div>
<span class="comment-copy">You might be able to use <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a>, import the scripts one by one and check for the definedness of the variable. If that's too dirty, parse them with <code>ast.parse</code>, and check the whole tree recursively. Do you want to check whether it is possible the variable can be set in any part of the code? If this part is reachable? If it will be reached when being executed?</span>
<span class="comment-copy">It'd be interesting to know the reasoning here, because I suspect there's something that could be done either better or a different way to begin with, but what @L3viathan is suggesting with <code>importlib</code> is what I'd do, if what you're asking about is what I definitely needed to do.</span>
<span class="comment-copy">@kungphu I've added more of an example to the question. I hope this helps explain what i'm trying to achieve.</span>
<span class="comment-copy">The <code>name</code> and <code>country</code> items you use in your example are not variables, they are attributes. Is that what you really mean?</span>
<span class="comment-copy">@RoryDaulton Yes attributes. There is more I want to get from these files but just trying to simplify the example enough so i'd be able to solve the rest.</span>
<span class="comment-copy">Great thanks. Exactly what i was looking for.</span>
<span class="comment-copy">@lennard You're welcome :) , question was very interesting btw, +1.</span>
