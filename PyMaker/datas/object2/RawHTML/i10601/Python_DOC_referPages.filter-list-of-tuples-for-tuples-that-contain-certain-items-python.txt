<div class="post-text" itemprop="text">
<p>I have a list of tuples like so:</p>
<pre><code>a = [('1', '2', '5', '5', 'w', 'w', 'w', 'w'),
     ('1', '3', '5', '5', 'w', 'w', 'w', 'w'),
     ('1', '3', '4', '5', 'w', 'w', 'w', 'w'),
     ('1', '4', '4', '4', 'w', 'w', 'w', 'w'),
     ('1', '5', '5', '5', 'w', 'w', 'w', 'w')]
</code></pre>
<p>I want to be able to filter out the tuples that contain certain items. For example, I want to find all the tuples that contain <code>'5', '5', 'w', 'w', 'w', 'w'</code> specifically and place them in a list. </p>
<pre><code>filter_for = ['5', '5', 'w', 'w', 'w', 'w']
</code></pre>
<p>Expected result would be:</p>
<pre><code>result =  [('1', '2', '5', '5', 'w', 'w', 'w', 'w'),
           ('1', '3', '5', '5', 'w', 'w', 'w', 'w')]
</code></pre>
<p><code>filter_for</code> will have a varying length of 1 to 7 so I using <code>and</code> is not going to be ideal. </p>
<p>I've tried using</p>
<pre><code>[i for i in a if all(j in filtered_for for j in a)]
</code></pre>
<p>but that doesn't work.</p>
<p>EDIT: If <code>('1', '5', '5', '5', 'w', 'w', 'w', 'w')</code> was also in the list I wouldn't want that tuple to be found. I guess I didn't specify this as all working solutions below would return this tuple as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your requirements correctly, this should return the expected results. Here we convert the lists to strings, and use <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow"><code>in</code></a> to check for membership.</p>
<pre><code>&gt;&gt;&gt; a = [('1', '2', '5', '5', 'w', 'w', 'w', 'w'),
 ('1', '3', '5', '5', 'w', 'w', 'w', 'w'),
 ('1', '3', '4', '5', 'w', 'w', 'w', 'w'),
 ('1', '4', '4', '4', 'w', 'w', 'w', 'w')]
&gt;&gt;&gt; filter_for = ''.join(['5', '5', 'w', 'w', 'w', 'w'])
&gt;&gt;&gt; print [tup for tup in a if filter_for in ''.join(tup)]
[('1','2','5','5','w','w','w','w'), ('1','3','5','5','w','w','w','w')]
</code></pre>
<hr/>
<p>The below code has been updated to match <strong>exact</strong> sub-lists in the list of tuples. Instead of <em>pattern matching</em> like in the example above, we take a far different approach here. </p>
<p>We start off by finding the <code>head</code> and <code>tail</code> of the filter list. We then find the the indices of where the <code>head</code> and <code>tail</code> occur in <code>tup</code> (<em>we must reverse</em> <code>tup</code> <em>to find the</em> <code>tail_index</code><em>, as</em> <code>index</code> <em>returns only the <strong>first</strong> element matched</em>). Using our indices pair, we can then slice that sublist spanning the distance between <code>head</code> and <code>tail</code>. If this sublist <strong>matches</strong> the filter, then we know that <em>only</em> that range exists in the search tuple.</p>
<pre><code>def match_list(filter_list, l):
    results = []
    filter_for = tuple(filter_list)
    head = filter_for[0]
    tail = filter_for[-1]

    for tup in l:
        reverse_tup = tup[::-1]
        if head and tail in tup:
            try:
                head_index = tup.index(head)
                index_key = reverse_tup.index(tail)
                tail_index = -index_key if index_key else None
                if tup[head_index:tail_index] == filter_for:
                    results.append(tup)  # Prints out condition-satisfied tuples.
            except ValueError:
                continue
    return results
</code></pre>
<p><strong>Sample output</strong></p>
<pre><code> &gt;&gt;&gt; a = [('1', '2', '5', '5', 'w', 'w', 'w', 'w'),
 ('1', '3', '5', '5', 'w', 'w', 'w', 'w'),
 ('1', '3', '4', '5', 'w', 'w', 'w', 'w'),
 ('1', '4', '4', '4', 'w', 'w', 'w', 'w'),
 ('1', '5', '5', '5', 'w', 'w', 'w', 'w')]  # &lt;- Does not match!
 &gt;&gt;&gt; filter_for = ['5', '5', 'w', 'w', 'w', 'w']
 &gt;&gt;&gt; print match_list(filter_for, a)
 [('1','2','5','5','w','w','w','w'), ('1','3','5','5','w','w','w','w')]  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure If I get the point what you're trying. But I would do it as following:</p>
<pre><code>&gt;&gt;&gt;[i for i in a if "".join(filter_for) in "".join(i)]
[('1', '2', '5', '5', 'w', 'w', 'w', 'w'), ('1', '3', '5', '5', 'w', 'w', 'w', 'w')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Did you mean this</p>
<pre><code>[i for i in a if all([j in i for j in filter_for])]
</code></pre>
<p>instead of your line?</p>
<pre><code>[i for i in a if all(j in filter_for for j in a)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code seems to work, it tests every list by dividing them in several lists of the same length as <code>filter_for</code></p>
<p><strong>Edit</strong>: I tried to add some excluded patterns after your edit</p>
<pre><code>a = [('1', '2', '5', '5', 'w', 'w', 'w', 'w'),
     ('1', '3', '5', '5', 'w', 'w', 'w', 'w'),
     ('1', '3', '4', '5', 'w', 'w', 'w', 'w'),
     ('1', '4', '4', '4', 'w', 'w', 'w', 'w'),
     ('1', '5', '5', '5', 'w', 'w', 'w', 'w')]

filter_for = ['5', '5', 'w', 'w', 'w', 'w']
excluded = [('1', '5', '5', '5', 'w', 'w', 'w', 'w')]

# add a padding key to excluded patterns
for x in range(len(excluded)):
    value = excluded[x]
    excl = {'value': value}

    for i in range(len(value) - len(filter_for) + 1):
        if list(value[i:i+len(filter_for)]) == list(filter_for):
            excl['padding'] = (i, len(value) - i - len(filter_for))

    excluded[x] = excl


def isexcluded(lst, i):
    # check if the lst is excluded by one of the `excluded` lists
    for excl in excluded:
        start_padding, end_padding = excl['padding']

        # get start and end indexes
        start = max(i-start_padding, 0)
        end = min(i + len(excl['value']) + end_padding, len(lst))

        if list(lst[start:end]) == list(excl['value']):
            return True

    return False


def get_lists(lists, length, excluded):
    for lst in lists:
        # get all the 'sublist', parts of the list that are of the same
        # length as filter_for
        for i in range(len(lst)-length+1):
            tests = [list(lst[i:i+length]) == list(filter_for),
                     not isexcluded(lst, i)]

            if all(tests):
                yield lst

result = list(get_lists(a, len(filter_for), excluded))

print(result)  # python 2: print result
</code></pre>
</div>
<span class="comment-copy">1. What does <i>"doesn't seem to work"</i> mean, precisely? 2. If you want to match the correct <i>positions</i> of those elements, why not <code>zip</code> it?</span>
<span class="comment-copy">Are all elements of <code>a</code> and all elements of <code>filter_for</code> always 1-character strings?</span>
<span class="comment-copy">Your edit makes this question too subjective. Are you stating that if the head or tail of the sequence has <code>array[head - 1] == array[head]</code> or <code>array[tail] == array[tail + 1]</code> the filter should fail?</span>
<span class="comment-copy">@Robᵩ yes, all elements of a and all elements of filter_for are always 1 character strings</span>
<span class="comment-copy">Hmm, going to update my answer shortly.</span>
<span class="comment-copy">@hopla, I've made changes to handle your latest edit.</span>
<span class="comment-copy">Thank you @mrdomoboto !</span>
<span class="comment-copy">This works correctly if all of the elements are 1-character strings. It might not work in other cases.</span>
<span class="comment-copy">Sorry I do not understand what you mean. Can you explain it to me? It would work on that a = [('11', '22', '5', '5', 'w', 'w', 'w', 'w')] so what do you mean? Thanks</span>
<span class="comment-copy">1) The point is moot. OP has clarified that all input are 1-character strings. 2) Consider <code>a = [['12', '34']]; filter_for = ['2', '3']</code>. Your solution would find a match, even though it isn't present. 3) Consider <code>a = [['1', 4.75]]; filter_for = ['1']</code>. Your solution will raise an exception.</span>
<span class="comment-copy">@Robᵩ: Thank you!</span>
<span class="comment-copy">both should work <code>all(j in filter_for for j in a)</code> iterates over the generator <code>(j in filter_for for j in a)</code>. You don't need to add parens around the generator expression when it is the only argument of a function.</span>
