<div class="post-text" itemprop="text">
<p>I've recently learned about <code>unittest.monkey.patch</code> and its variants, and I'd like to use it to unit test for atomicity of a file read function. However, the patch doesn't seem to have any effect.</p>
<p>Here's my set-up. The method under scrutiny is roughly like so (abriged):</p>
<pre><code>#local_storage.py

def read(uri):
    with open(path, "rb") as file_handle:
        result = file_handle.read()
    return result
</code></pre>
<p>And the module that performs the unit tests (also abriged):</p>
<pre><code>#test/test_local_storage.py

import unittest.mock
import local_storage

def _read_while_writing(io_handle, size=-1):
    """ The patch function, to replace io.RawIOBase.read. """

    _write_something_to(TestLocalStorage._unsafe_target_file) #Appends "12".
    result = io_handle.read(size) #Should call the actual read.
    _write_something_to(TestLocalStorage._unsafe_target_file) #Appends "34".

class TestLocalStorage(unittest.TestCase):
    _unsafe_target_file = "test.txt"

    def test_read_atomicity(self):
        with open(self._unsafe_target_file, "wb") as unsafe_file_handle:
            unsafe_file_handle.write(b"Test")

        with unittest.mock.patch("io.RawIOBase.read", _read_while_writing): # &lt;--- This doesn't work!
            result = local_storage.read(TestLocalStorage._unsafe_target_file) #The actual test.
            self.assertIn(result, [b"Test", b"Test1234"], "Read is not atomic.")
</code></pre>
<p>This way, the patch should ensure that every time you try to read it, the file gets modified just before and just after the actual read, as if it happens concurrently, thus testing for atomicity of our read.</p>
<p>The unit test currently succeeds, but I've verified with print statements that the patch function doesn't actually get called, so the file never gets the additional writes (it just says "Test"). I've also modified the code as to be non-atomic on purpose.</p>
<p>So my question: <strong>How can I patch the <code>read</code> function of an IO handle inside the local_storage module?</strong> I've read elsewhere that people tend to replace the open() function to return something like a <code>StringIO</code>, but I don't see how that could fix this problem.</p>
<p>I need to support Python 3.4 and up.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've finally found a solution myself.</p>
<p>The problem is that <code>mock</code> can't mock any methods of objects that are written in C. One of these is the <code>RawIOBase</code> that I was encountering.</p>
<p>So indeed the solution was to mock <code>open</code> to return a wrapper around <code>RawIOBase</code>. I couldn't get <code>mock</code> to produce a wrapper for me, so I implemented it myself.</p>
<p>There is one pre-defined file that's considered "unsafe". The wrapper writes to this "unsafe" file every time any call is made to the wrapper. This allows for testing the atomicity of file writes, since it writes additional things to the unsafe file while writing. My implementation prevents this by writing to a temporary ("safe") file and then moving that file over the target file.</p>
<p>The wrapper has a special case for the <code>read</code> function, because to test atomicity properly it needs to write to the file <em>during</em> the read. So it reads first halfway through the file, then stops and writes something, and then reads on. This solution is now semi-hardcoded (in how far is halfway), but I'll find a way to improve that.</p>
<p>You can see my solution here: <a href="https://github.com/Ghostkeeper/Luna/blob/0e88841d19737fb1f4606917f86e3de9b5b9f29b/plugins/storage/localstorage/test/test_local_storage.py" rel="nofollow">https://github.com/Ghostkeeper/Luna/blob/0e88841d19737fb1f4606917f86e3de9b5b9f29b/plugins/storage/localstorage/test/test_local_storage.py</a></p>
</div>
<span class="comment-copy">Have you looked to see how to mock <code>open</code>? Read <a href="http://www.voidspace.org.uk/python/mock/helpers.html#mock-open" rel="nofollow noreferrer">this</a>. But, sometimes, yes I have also seen <code>StringIO</code> used as to not write directly to the filesystem.</span>
<span class="comment-copy">In Python 3, it's supported <a href="https://docs.python.org/3/library/unittest.mock.html#mock-open" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">I wrote a solution a little while ago that explains how to deal with context managers. The details around it aren't exactly related to what you are trying to do, but it explains the context manager nature and uses open. Hope it helps: <a href="http://stackoverflow.com/a/33652204/1832539">stackoverflow.com/a/33652204/1832539</a></span>
<span class="comment-copy">I had tried <code>mock_open</code> too, but it seems to always read from its <code>read_data</code> parameter, which is static. Since I need to simulate a concurrent write, and only to test.txt, it doesn't seem possible with <code>mock_open</code>.</span>
