<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5737196/is-there-an-expression-for-an-infinite-generator">Is there an expression for an infinite generator?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>Having started to learn code with C, I had always assumed that for-loops and while-loops where essentialy always equivalent (as in one could always reproduce the behaviour of one using only the other). But in python while going from a for-loop to a while-loop is always trivial, I could not find a way to achieve the reverse.</p>
<p><strong>Is there any way, in python, to reproduce the behaviour of a while-loop (infinite looping) using only for-loops ?</strong></p>
<p>Here is a solution that doesn't work (because of the recursion limit) using a recursive generator:</p>
<pre><code>def infinite_loopy():
    yield "All work and no play makes Jack a dull boy"
    for x in infinite_loopy():
        yield x

#here starts the supposedly infinite-loop
for x in infinite_loopy():
    print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this by writing a <a href="https://docs.python.org/2/library/stdtypes.html#iterator-types" rel="nofollow">non-<code>yield</code> iterator class</a>:</p>
<pre><code>class Infinite(object):
    def __iter__(self):
        return self

    def next(self): # For Python3, replace this with __next__
        return 1

# Loops forever
for i in Infinite():
    pass
</code></pre>
<p>(You can see it stalling on <a href="https://ideone.com/D9h8cd" rel="nofollow">ideone</a> if you have the patience - it's like watching paint dry).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the two-argument version of <a href="https://docs.python.org/3/library/functions.html#iter" rel="noreferrer"><code>iter</code></a> as follows:</p>
<pre><code>for _ in iter(int, 1):
    print('All your loops are belong to us!')
</code></pre>
<p>The 2-argument form of <code>iter</code> calls the first argument as a function with no arguments. If the returned value equals (<code>==</code>) the second argument, <code>StopIteration</code> is raised, otherwise the return value is yielded. <code>int()</code> called without arguments returns <code>0</code> which is of course not equal to <code>1</code> thus yielding 0 forever, and we have an infinite loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.repeat" rel="nofollow"><code>itertools.repeat</code></a>, <a href="https://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow"><code>count</code></a> or <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow"><code>cycle</code></a>:</p>
<pre><code>import itertools

for _ in itertools.repeat(None):
    # infinite loop

for _ in itertools.count():
    # infinite loop

for _ in itertools.cycle([None]):
    # infinite loop
</code></pre>
<p>All of these <em>can</em> be represented by functions using <code>while</code> loops, but the <code>itertools</code> module is implemented in <code>c</code> (in cPython), and makes no use of <code>while</code> loops in <a href="https://github.com/python/cpython/blob/master/Modules/itertoolsmodule.c#L4119" rel="nofollow">the source code</a>.  Similarly for <a href="https://bitbucket.org/jython/jython/src/7635c5999b8ed4d4c72ed211b116a972bb764368/src/org/python/modules/itertools/repeat.java?at=default&amp;fileviewer=file-view-default" rel="nofollow">jython (java)</a>, and even <a href="https://bitbucket.org/pypy/pypy/src/eaf0960e857d66716ef8f935221d76ece34c984d/pypy/module/itertools/interp_itertools.py?at=default&amp;fileviewer=file-view-default#interp_itertools.py-81" rel="nofollow">PyPy (python)</a>.  The same is true for <code>count</code> and <code>cycle</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.count()</code> in for loop.</p>
<pre><code>import itertools

def infinite_loopy():
    x = "All work and no play makes Jack a dull boy"
    for x in itertools.count():
        yield x

for i in infinite_loopy():
    print("All work and no play makes Jack a dull boy")
</code></pre>
<p>[Reference]
<a href="https://stackoverflow.com/questions/9884213/looping-from-1-to-infinity-in-python">Looping from 1 to infinity in Python</a></p>
</div>
<span class="comment-copy">@Aurora0001 It's not a duplicate of that question as I would like <b>no usage of while-loops</b></span>
<span class="comment-copy">The accepted answer of that question uses no while loops, so it's exactly what you want, yes? If not, why not?</span>
<span class="comment-copy">@Kevin My bad I only checked the question. But yeah that would count as a solution.</span>
<span class="comment-copy">Yeah somehow I missed the proposed duplicate and drafted an answer that was exactly identical with the accepted answer in that other question...</span>
<span class="comment-copy">@Antti Haapala Does this realy count as a duplicate ? I feel like they are two different questions that append to have common answers.</span>
<span class="comment-copy">this solution is simple and pleasant to the eyes, +1</span>
<span class="comment-copy">@Lost Many thanks!</span>
<span class="comment-copy">Python 2 only...</span>
<span class="comment-copy">@AnttiHaapala Thanks for the correct comment. For Python3, <code>next</code> should be replaced with <code>__next__</code> (updated in the question).</span>
<span class="comment-copy">It's still possible that they're internally implemented using a <code>while</code>, no? I think that's how the OP responded to Aurora's comment just under the question.</span>
<span class="comment-copy">The <a href="https://docs.python.org/2/library/itertools.html#itertools.repeat" rel="nofollow noreferrer">doc</a> for itertools.repeat indicate that it is roughly equivalent to a function containing a <code>while</code></span>
<span class="comment-copy">@jadsq The <a href="https://github.com/python/cpython/blob/master/Modules/itertoolsmodule.c#L4119" rel="nofollow noreferrer">source for <code>repeat</code></a> has no use of <code>while</code> whatsoever.</span>
<span class="comment-copy">@AmiTavory See edit</span>
<span class="comment-copy">@RoadieRich Oh, good answer, then (in a completely different direction).</span>
