<div class="post-text" itemprop="text">
<p>I have a function that gets some base information in my <code>views.py</code> file, and I'm trying to update the context of each page using it by having it return a dictionary. However, using <code>.update()</code> on the context dictionary in the <code>render()</code> function doesn't seem to work.</p>
<p>Here's what I'm doing:</p>
<pre><code>def getBaseInfo():
    allPages = list(Page.objects.all())
    primaryPages = allPages[:5]
    secondaryPages = allPages[5:]
    return {'p':primaryPages, 'p2':secondaryPages}

def index(request):
    return render(request, 'pages/index.html', {}.update(getBaseInfo()))
</code></pre>
<p>However, nothing is sent to my templates. Thanks in advance!</p>
<p>Edit: I'm using Python 2.7.11</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, if you wanted to use a base dictionary and add objects to that you should do so explicitly:</p>
<pre><code>def index(request):
    context = getBaseInfo()
    context.update({'otherkey': 'othervalue'})
    # or
    context['otherkey'] = 'othervalue'
    return(...)
</code></pre>
<p>However, there is no need to do this at all. Django already provides you a way of automatically providing shared context, and that is a <a href="https://docs.djangoproject.com/en/1.10/ref/templates/api/#subclassing-context-requestcontext" rel="nofollow">context processor</a>.</p>
<p>In fact your <code>getBaseInfo()</code> function is <em>already</em> almost a context processor - it just needs to accept the <code>request</code> parameter - so you just need to add it to the <code>context_processors</code> list in your TEMPLATES setting. Then <em>all</em> your templates will automatically get the values from that function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should do something like this: </p>
<pre><code>def index(request):
    allPages = list(Page.objects.all())
    primaryPages = allPages[:5]
    secondaryPages = allPages[5:]
    return render(request, 'pages/index.html', {'p':primaryPages, 'p2':secondaryPages})
</code></pre>
<p>Other option should be to make <code>getBaseInfo</code> a <code>@property</code> for reusability and DRY purposes, or make the view class based template view and define reusable code as mixin. I prefer the latter, but it's entirely matter of personal choice. </p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html?highlight=update#dict.update" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> Note the: "Return <code>None</code>" part. Python is not javascript, the update method does not return a dict and what you're doing makes no sense. Why don't you simply pass along the <code>getBaseInfo()</code> as context?</span>
<span class="comment-copy">@Wolph, I didn't know that .update() returns <code>None</code>! Thanks for that. I can't pass <code>getBaseInfo()</code> as context because my Django app uses Python 2, which doesn't allow for updating a dictionary by returning values within the dictionary (<code>{getBaseInfo()}</code> does not become <code>{'p':[], 'p2':[]}</code>, it 's just a dictionary that has a key without a value)</span>
<span class="comment-copy"><code>{getBaseInfo()}</code> does not become <code>{'p':[], 'p2':[]}</code> but <code>getBaseInfo()</code> does. <code>getBaseInfo()</code> already returns a dictionary so there is no need to convert it. It can be used as the context straight away</span>
<span class="comment-copy">And there is no difference between Python 2 and Python 3 here. <code>return render(request, 'pages/index.html', getBaseInfo())</code> works fine in both versions.</span>
<span class="comment-copy">@Wolph Right, but I have other views that I want to send other info with. For example, if I have a <code>shows</code> view where I want to add <code>'show':showObject</code> to the context, I can't do that if I exclusively pass <code>getBaseInfo()</code> as the context. I'm trying to make it so I can add whatever I want to the context, and then add <code>p</code> and <code>p2</code> in. Since I have many views where I want to pass <code>p</code> and <code>p2</code> through, I'd rather keep the code that loads them in <code>getBaseInfo()</code>. The most important part is being able to pass things in addition to getBaseInfo()</span>
<span class="comment-copy">Thanks for letting me know about context processors! I'm new to Django and still learning - this seems like exactly what I needed!</span>
