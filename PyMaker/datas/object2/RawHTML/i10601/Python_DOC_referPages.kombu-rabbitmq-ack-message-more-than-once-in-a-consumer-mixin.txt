<div class="post-text" itemprop="text">
<p>I have stumbled upon this problem while I was documenting Kombu for the new SO documentation project.</p>
<p>Consider the following Kombu code of a <a href="http://docs.celeryproject.org/projects/kombu/en/latest/reference/kombu.mixins.html" rel="nofollow noreferrer">Consumer Mixin</a>:</p>
<pre class="lang-python prettyprint-override"><code>from kombu import Connection, Queue
from kombu.mixins import ConsumerMixin
from kombu.exceptions import MessageStateError
import datetime

# Send a message to the 'test_queue' queue
with Connection('amqp://guest:guest@localhost:5672//') as conn:
    with conn.SimpleQueue(name='test_queue') as queue:
        queue.put('String message sent to the queue')


# Callback functions
def print_upper(body, message):
    print body.upper()
    message.ack()    

def print_lower(body, message):
    print body.lower()
    message.ack()


# Attach the callback function to a queue consumer 
class Worker(ConsumerMixin):
    def __init__(self, connection):
        self.connection = connection

    def get_consumers(self, Consumer, channel):
        return [
            Consumer(queues=Queue('test_queue'), callbacks=[print_even_characters, print_odd_characters]),
        ]

# Start the worker
with Connection('amqp://guest:guest@localhost:5672//') as conn:
    worker = Worker(conn)
    worker.run()
</code></pre>
<p>The code fails with:</p>
<pre><code>kombu.exceptions.MessageStateError: Message already acknowledged with state: ACK
</code></pre>
<p>Because the message was ACK-ed twice, on <code>print_even_characters()</code> and <code>print_odd_characters()</code>.</p>
<p>A simple solution that works would be ACK-ing only the last callback function, but it breaks modularity if I want to use the same functions on other queues or connections.</p>
<p><strong>How to ACK a queued Kombu message that is sent to more than one callback function?</strong></p>
</div>
<div class="post-text" itemprop="text">
<h1>Solutions</h1>
<h2>1 - Checking <code>message.acknowledged</code></h2>
<p>The <code>message.acknowledged</code> flag checks whether the message is already ACK-ed:</p>
<pre class="lang-python prettyprint-override"><code>def print_upper(body, message):
    print body.upper()
    if not message.acknowledged: 
        message.ack()


def print_lower(body, message):
    print body.lower()
    if not message.acknowledged: 
        message.ack()
</code></pre>
<p><strong>Pros</strong>: Readable, short.</p>
<p><strong>Cons</strong>: Breaks <a href="https://docs.python.org/3/glossary.html" rel="nofollow">Python EAFP idiom</a>.</p>
<h2>2 - Catching the exception</h2>
<pre class="lang-python prettyprint-override"><code>def print_upper(body, message):
    print body.upper()
    try:
        message.ack()
    except MessageStateError:
        pass


def print_lower(body, message):
    print body.lower()
    try:
        message.ack()
    except MessageStateError:
        pass
</code></pre>
<p><strong>Pros:</strong> Readable, Pythonic.</p>
<p><strong>Cons:</strong> A little long - 4 lines of boilerplate code per callback.</p>
<h2>3 - ACKing the last callback</h2>
<p>The documentation guarantees that the <a href="http://docs.celeryproject.org/projects/kombu/en/latest/userguide/consumers.html#reference" rel="nofollow">callbacks are called in order</a>. Therefore, we can simply <code>.ack()</code> only the last callback:</p>
<pre class="lang-python prettyprint-override"><code>def print_upper(body, message):
    print body.upper()


def print_lower(body, message):
    print body.lower()
    message.ack()
</code></pre>
<p><strong>Pros:</strong> Short, readable, no boilerplate code.</p>
<p><strong>Cons:</strong> Not modular: the callbacks can not be used by another queue, unless the last callback is always last. This implicit assumption can break the caller code.</p>
<p>This can be solved by moving the callback functions into the <code>Worker</code> class. We give up some modularity - these functions will not be called from outside - but gain safety and readability.</p>
<h1>Summary</h1>
<p>The difference between 1 and 2 is merely a matter of style.</p>
<p>Solution 3 should be picked if the order of execution matters, and whether a message should not be ACK-ed before it went through all the callbacks successfully.</p>
<p>1 or 2 should be picked if the message should always be ACK-ed, even if one or more callbacks failed.</p>
<p>Note that there are other possible designs; this answer refers to callback functions that reside outside the worker.</p>
</div>
