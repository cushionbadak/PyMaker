<div class="post-text" itemprop="text">
<p>So, I'm making a little Python 3 applet for madlibs. So far, I have it so that it reads a text file, pulls a random story from it, and splits that story into a list for search through it. That all works great. I have the stories formatted so that, where words are needed, it uses (noun), (adverb), (name), et cetera. However, I have some issues with replacing those strings. Here is an example:</p>
<pre><code>&gt;&gt;&gt; for i in range(0,len(poss)):
...  if '(' in poss[i]: poss[i] = input('{0}: '.format(poss[i].replace('(','').replace(')','')))
...
noun: monster
name.: Strange
name: Strange
adjective: yellow
noun!: eatery
place.
: Times Square
&gt;&gt;&gt; poss = ' '.join(poss)
&gt;&gt;&gt; print(poss)
                               Back to the Future

Marty was an innocent, young monster and made friends with the local scientist,
Doc Strange Doc Strange was a bit off, but he was one yellow genius. One day,
he told Marty that he had an invented a eatery Of course, Marty had to see it
in action. Late that night, they met at Times Square
</code></pre>
<p>It searches for the '(' character in each object, and then replaces the whole object with the word. It doesn't preserve the punctuation that might be involved. Also, you can see that the punctuation/newline characters are left over and shown when <code>input()</code> is called. How can I effectively replace just the substrings contained within the parenthesis?</p>
<p>For reference, here is the original text that was pulled from the file:</p>
<pre><code>                               Back to the Future

Marty was an innocent, young (noun) and made friends with the local scientist,
Doc (name). Doc (name) was a bit off, but he was one (adjective) genius. One day,
he told Marty that he had an invented a (noun)! Of course, Marty had to see it
in action. Late that night, they met at (place).
</code></pre>
<p>and my intended result is:</p>
<pre><code>                               Back to the Future

Marty was an innocent, young monster and made friends with the local scientist,
Doc Strange. Doc Strange was a bit off, but he was one yellow genius. One day,
he told Marty that he had an invented a eatery! Of course, Marty had to see it
in action. Late that night, they met at Times Square.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To address the problems with your approach I'd need to see the full code, but I have another suggestion.</p>
<p>You can actually use the regular expressions here, which allows making the substitution in a one-liner (almost).</p>
<pre><code>In [1]: import re

In [2]: story = '''                               Back to the Future
   ...: 
   ...: Marty was an innocent, young (noun) and made friends with the local scientist,
   ...: Doc (name). Doc (name) was a bit off, but he was one (adjective) genius. One day,
   ...: he told Marty that he had an invented a (noun)! Of course, Marty had to see it
   ...: in action. Late that night, they met at (place).'''

In [3]: def replace(match):
   ...:     return input('{}: '.format(match.group()))
   ...: 

In [4]: print(re.sub('\((noun|name|adjective|place)\)', replace, story))
(noun): monster
(name): Strange
(name): Strange
(adjective): yellow
(noun): eatery
(place): Times Square
                               Back to the Future

Marty was an innocent, young monster and made friends with the local scientist,
Doc Strange. Doc Strange was a bit off, but he was one yellow genius. One day,
he told Marty that he had an invented a eatery! Of course, Marty had to see it
in action. Late that night, they met at Times Square.
</code></pre>
<p><a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub()</code></a> accepts a callable as replacement, which we use to call <code>input()</code> with the prompt extracted from the match.</p>
<p><strong>Edit:</strong> to match any phrase in brackets, you can just change the pattern, e.g.:</p>
<pre><code>print(re.sub('\(([^()]*)\)', replace, story))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>text = """Marty was an innocent, young (noun) and made friends with the local scientist,
Doc (name). Doc (name) was a bit off, but he was one (adjective) genius. One day,
he told Marty that he had an invented a (noun)! Of course, Marty had to see it
in action. Late that night, they met at (place)."""


match = ['monster', 'Strange', 'Strange', 'yellow', 'eatery', 'Times Square']

splitted = text.split()

for i, item in enumerate(splitted):
    if '(' in item:
        matched = match.pop(0)
        if not item.endswith(')'):
            matched = '{}{}'.format(matched, item[:-1])
        splitted[i] = matched

print ' '.join(splitted)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okay, to solve my issue of only wanting to ask for each identical item once, I had to rewrite a little bit. I'm still using the regex provided by @Lex, so thanks to him for that. However, I am no longer using his <code>re.sub()</code> method.</p>
<pre><code>import re
l1 = re.findall('\(([^()]*)\)',story)
l2 = []
for i in l1:
 if i not in l2:
  l2.append(i)
for i in l2:
 substr = '({})'.format(i)
 word = input('{}: '.format(i))
 story = story.replace(substr,word)


print(story)
</code></pre>
<p>The <code>findall()</code> function finds all instances matching the regex of "between parenthesis" and builds an initial list. Then, I iterate through that list and put each unique token into a new list to eliminate duplicates. I iterate through the new list of tokens and replace each match with the prompted input. This is exactly what I had wanted for my applet as it eliminates duplicate prompts.</p>
</div>
<span class="comment-copy">You are using <code>noun</code> for two different purposes, so the most straightforward solution can't possibly work.</span>
<span class="comment-copy">@RadLexus view my answer for how I solved the issue. Seems pretty straight-forward there ;).</span>
<span class="comment-copy">This one is good! I would use it, but some of the madlibs I have written use abstract prompts such as (noun from line 1). See my solution for how I overcame this.</span>
<span class="comment-copy">@CasperTheFriendlyCode you can easily make it match any phrase in parentheses, see my edit.</span>
<span class="comment-copy">Which Python are you using for this? I'm attempting to run it as a .py file instead of through the interpreter using python 3.5.2 and it's just printing the original story.</span>
<span class="comment-copy">@CasperTheFriendlyCode I used a 3.5 interpreter to write the answer, too. But I don't see why it wouldn't work on other versions, either.</span>
<span class="comment-copy">Even running it through the interpreter is failing to call the input() function, just printing the unreplaced story. See <a href="http://pastebin.com/kjr449vc" rel="nofollow noreferrer">here</a></span>
