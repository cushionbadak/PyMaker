<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25996937/how-can-i-extract-keywords-from-a-python-format-string">How can I extract keywords from a Python format string?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>How can I retrieve the expected format key name from a string?</p>
<p>Lets say I have:</p>
<pre><code>"This string expects {expected}"
</code></pre>
<p>If I input the wrong key name python throws a KeyError showing the expected name.</p>
<pre><code>"This string expects {expected}".format(whoops="wrong key")
KeyError: 'expected'
</code></pre>
<p>Is there a way to test for this without regex or (ugh) purposely throwing the KeyError? I've looked over the string documentation but nothing jumped out at me.</p>
<p>Edit 1:</p>
<p>I do not want to suppress the error, nor do I want to silently fill it with None/empty string. I want to use the expected keyname to properly format the string.</p>
<p>I could rework it upstream by mapping the strings to the keyname in a dict, but was hoping to avoid that if there is a way to find this after the fact.</p>
<p>Regex would be a good solution, but at this point I am just curious more than anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/string.html#string.Formatter.parse" rel="nofollow"><code>Formatter.parse</code></a> like that:</p>
<pre><code>&gt;&gt;&gt; s="{a} {b} {c}"
&gt;&gt;&gt; list(string.Formatter.parse("",s))
[('', 'a', '', None), (' ', 'b', '', None), (' ', 'c', '', None)]
&gt;&gt;&gt; [t[1] for t in string.Formatter.parse("",s)]
['a', 'b', 'c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Listen, this is a very nice question,<br/>
and it made me busy for the last 5 minutes or so<br/></p>
<p>Here is a function I wrote to do the job.<br/>
No regex, but yes exceptions. Here it goes:</p>
<pre><code>def findKeys(s):
    keys = {}
    while True:
        try:
            s.format(**keys)
            return [*keys.keys()]
        except KeyError as e:
            k, = e.args
            keys[k] = ''
</code></pre>
<p>It returns a list of all the keys inside the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>To find the keyname you would need to wrap it in a <code>try</code>/<code>except</code> clause.</p>
<pre><code>try:
    my_string = "This string expects {expected}".format(whoops="wrong key")
except KeyError as e:
    print(e)  # the variable e is your keyname
</code></pre>
<p><strong>Edit</strong>: Another method could be to find the curly brackets within the string and use a slice to locate your keyname. The example below only finds the first instance of a keyname but could easily be modified to find additional keys.</p>
<pre><code>s = "This string expects {expected}"
key_name = s[s.find('{') + 1: s.find('}')]
</code></pre>
</div>
<span class="comment-copy">@CoDEmanX That asks about suppressing the error. I am asking how to find the keyname.</span>
<span class="comment-copy">So you don't know what the string looks like? In your example, it's right in front of your nose what the expected name is, so wondering what exactly you try to solve here.</span>
<span class="comment-copy">@CoDEmanX How else should I illustrate an example of a variable whose contents I won't know beforehand?</span>
<span class="comment-copy">Yes use string.Formatter, <a href="http://stackoverflow.com/a/30418220/2141635">stackoverflow.com/a/30418220/2141635</a></span>
<span class="comment-copy">Ohad's solution is definitely the way to go. I posted a code snippet over here nonetheless because it was quite fun to come up with this: <a href="http://stackoverflow.com/a/39153155/2044940">stackoverflow.com/a/39153155/2044940</a></span>
<span class="comment-copy">This is along the lines of what I was looking for. Thanks!</span>
<span class="comment-copy"><code>[t[1] for t in string.Formatter.parse("",s) if t[1]]</code> to filter out empty strings caused by unnamed placeholders.</span>
<span class="comment-copy">@CoDEmanX <b>If</b>  you want to filter them out. Some may wish to know there is an unnamed placeholder there.</span>
<span class="comment-copy">Good thinking! I did something similar, but without try/except: <a href="http://stackoverflow.com/a/39153155/2044940">stackoverflow.com/a/39153155/2044940</a></span>
<span class="comment-copy">I've considered that, but my question asks how to accomplish this without throwing the error.</span>
