<div class="post-text" itemprop="text">
<p>I'm trying to create a function that iterates through a string, finds characters that match to keys in a dictionary and replaces that character with the value in the dictionary for that key. However it currently only replaces first occurrence of a letter that is in the dictionary and stops there, where am I going wrong? </p>
<pre><code>d = {
'I':'1', 'R':'2', 'E':'3', 'A':'4', 'S':'5', 'G':'6', 'T':'7', 'B':'8', 'O':'0',
'l':'1', 'z':'2', 'e':'3', 'a':'4', 's':'5', 'b':'6', 't':'7', 'g':'9', 'o':'0',
}

def cypher(string):
    for i in string:
        if i in d:
            a = string.replace(i,d[i])
            return a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are prematurely ending your code with the call to <code>return</code> within the for loop. You can fix it by storing your new string outside of the loop, only returning once the loop is done:</p>
<pre><code>def cypher(string):
    a = string  # a new string to store the replaced string
    for i in string:
        if i in d:
            a = a.replace(i, d[i])
    return a
</code></pre>
<p>There is something wrong about the logic too, though. If you have a value in your dictionary that is also a key in the dictionary, the key may get replaced twice. For example, if you have <code>d = {'I': 'i', 'i': 'a'}</code>, and the input is <code>Ii</code>, your output would be <code>aa</code>.</p>
<p>Here's a much more concise implementation using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>join</code></a> that does not have this problem.</p>
<pre><code>def cypher(string):
    return ''.join(d.get(l, l) for l in string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your return statement is within the if statement, so if a character matches, your function replaces that single character and then returns.</p>
<p>If you want all of your characters replaced, let it iterate through all characters of the string by moving your return statement outside of the for loop.</p>
<pre><code>def cypher(string):
    result = string
    for i in string:
        if i in d:
            result = result.replace(i,d[i])
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One liner -&gt; <code>print ''.join(d[c] if c in d else c for c in s)</code></p>
<p><strong>Sample Output:</strong></p>
<pre><code>&gt;&gt;&gt; s = 'Hello World' 
&gt;&gt;&gt; d = {
'I':'1', 'R':'2', 'E':'3', 'A':'4', 'S':'5', 'G':'6', 'T':'7', 'B':'8', 'O':'0',
'l':'1', 'z':'2', 'e':'3', 'a':'4', 's':'5', 'b':'6', 't':'7', 'g':'9', 'o':'0',
}
&gt;&gt;&gt; print ''.join(d[c] if c in d else c for c in s)
H3110 W0r1d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As zachyee pointed out, your <code>return</code> statement is inside the loop.</p>
<p>You may want to take a look at <a href="https://docs.python.org/3.4/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate</code></a>, which does exactly what you want:</p>
<pre><code>def cypher(string):
    return string.translate(str.maketrans(d))
</code></pre>
<p>Note the use of <a href="https://docs.python.org/3.4/library/stdtypes.html#str.maketrans" rel="nofollow"><code>str.maketrans</code></a> that transforms your dict in something that <code>string.translate</code> can use. This method is however limited to mappings of single characters.</p>
</div>
<span class="comment-copy">This actually doesn't work with the given <code>d</code> since <code>translate</code> requires ordinals as key values: <a href="http://stackoverflow.com/questions/17020661/why-doesnt-str-translate-work-in-python-3" title="why doesnt str translate work in python 3">stackoverflow.com/questions/17020661/â€¦</a></span>
<span class="comment-copy">You're right. I edited the code by adding a call to <code>str.maketrans</code>.</span>
