<div class="post-text" itemprop="text">
<p>I have a python file that reads a file given by the user, processes it, and ask questions in flash card format. The program works fine with an english txt file but I encounter errors when trying to process a french file.</p>
<p>When I first encountered the error, I was using the windows command prompt window and running <code>python cards.py</code>. When inputting the french file, I immediately got a <code>UnicodeEncodeError</code>. After digging around, I found that it may have something to do with the fact I was using the cmd window. So I tried using IDLE. I didn't get any errors but I would get weird characters like <code>œ</code> and <code>Ã</code> and <code>®</code>.</p>
<p>Upon further research, I found some <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow">documentation</a> that instructs to use <code>encoding='insert encoding type'</code> in the <code>open(file)</code> part of my code. After running the program again in IDLE, it seemed to minimize the problem, but I would still get some weird characters. When running it in the cmd, it wouldn't break  IMMEDIATELY, but would eventually when it encountered an unknown character.</p>
<p>My question: what do I implement to ensure the program can handle ALL of the chaaracters in the file (given any language) and why does IDLE and the command prompt handle the file differently?</p>
<p>EDIT: I forgot to mention that I ended up using utf-8 which gave the results I described.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's common question.
Seems that you're using cmd which doesn't support unicode, so error occurs during <strong>translation of output</strong> to the encoding, which your cmd runs. And as unicode has a wider charset, than encoding used in cmd, it gives an error</p>
<p>IDLE is built ontop of tkinter's Text widget, which perfectly supports Python strings in unicode.</p>
<p>And, finally, when you specify a file you'd like to open, the <code>open</code> function assumes that it's in platform default (per <code>locale.getpreferredencoding()</code>). So if your file encoding differs, you should exactly mention it in keyword arg <code>encoding</code> to <code>open</code> func.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Windows console does not natively support Unicode (despite what people say about <code>chcp 65001</code>). It's designed to be backwards compatible so only supports 8bit character sets.</p>
<p>Use <a href="https://github.com/Drekin/win-unicode-console" rel="nofollow">win-unicode-console</a> instead. It talks to the cmd at a lower level, which allows <strong>all</strong> Unicode characters to be printed, and importantly, inputted.</p>
<p>The best way to enable it is in your <code>usercustomize</code> script, so that's enabled by default on your machine.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/492483/setting-the-correct-encoding-when-piping-stdout-in-python">Setting the correct encoding when piping stdout in Python</a></span>
<span class="comment-copy">Note that you can issue the command <code>chcp 65001</code> in the command prompt to switch to a Unicode (UTF-8) code page.</span>
<span class="comment-copy">You didn't mention if you are using python 2 or 3.. There are big differences between the two when it comes to unicode. In short, you may find it easier to use 3.</span>
<span class="comment-copy">@fzzylogic I didn't directly say, correct but I included the python-3.x tag. Thanks</span>
<span class="comment-copy">@Basic <code>chcp 65001</code> should only be considered a quick fix. It does not fully support utf-8 and does not allow Python to receive multibyte characters properly</span>
<span class="comment-copy">I don't suppose there's a way to be able to process any type of encoding? Or do you have to specify each one?</span>
<span class="comment-copy">@David thats how this New World Order of Unicode looks like. The real encoding could be only guessed if not known, as primer example -- the <code>chardet</code> lib. But some encodings have markers and you could tell exactly that's it</span>
<span class="comment-copy">@fzzylogic according to docs, <code>open</code> relies on platform's default encoding. In most cases it's utf-8, but not it all.</span>
<span class="comment-copy">@thodnev Tx for the correction. David, if it's possible in your case, you may find it easier to standardise with utf-8.</span>
<span class="comment-copy">@thodnev See my edit. I ended up using utf-8. I guess I won't be able to fully decode the file unless given the encoding type. As I said in the original post, even using utf-8 I still get weird characters</span>
