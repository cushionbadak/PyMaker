<div class="post-text" itemprop="text">
<p>I've been musing as to why the Python language's standard dict class doesn't support addition/subtraction operators such as '+' or '+=', e.g.</p>
<pre><code>&gt;&gt;&gt; foo = {'a': 1, 'b': 2}
&gt;&gt;&gt; bar = {'c': 3, 'd': 4}

&gt;&gt;&gt; foo + bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'dict' and 'dict'
</code></pre>
<p>My wishful thinking would be for the following result instead:</p>
<pre><code>&gt;&gt;&gt; foo + bar 
{'a': 1, 'b': 2, 'c': 3, 'd': 4}
</code></pre>
<p>Equally why doesn't <code>__radd__(self, other)</code> result in the same as <code>self.__update__(other)</code>?</p>
<pre><code>&gt;&gt;&gt; foo += bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +=: 'dict' and 'dict'    
</code></pre>
<p>Does anyone know the historic reasons for the default behaviour? </p>
<p>(I concede that it could be ambiguous which value should be used in scenarios where <code>foo</code> and <code>bar</code> have the same key but different key values)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Does anyone know the historic reasons for the default behaviour?</p>
</blockquote>
<p>Guido van Rossum commented that he liked <em>update()</em> better and thinks a <code>+</code> operator wouldn't read clearly in code.</p>
<p>FWIW, he did approve <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">PEP 448</a> which gives your another way to do it using star-unpacking generalizations:</p>
<pre><code>&gt;&gt;&gt; a = {'a': 1, 'b': 2}
&gt;&gt;&gt; b = {'c': 3, 'b': 4}
&gt;&gt;&gt; {**a, **b}
{'a': 1, 'b': 4, 'c': 3}
</code></pre>
<p>There are several reasons why <code>+</code> might not be a good idea.  Usually, we expect addition to be commutative, but dict addition would fail whenever there were overlapping keys with distinct values.   The "normal" use case is to update only dict in-place, but the usual semantics of <code>+</code> would copy the contents of both inputs to create a new dict (which is somewhat wasteful).</p>
<p>In addition, Python has <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer">collections.ChainMap</a> which replaces the expense of copying with a new expense of potentially having multiple lookups.</p>
</div>
<span class="comment-copy">I think your parenthetical concession is a pretty good answer to your question. <code>+</code> would be a misleading way to express an ambiguous oepration.</span>
<span class="comment-copy">Because the output would not have been trivial. What will happen if both dictionaries have the same key? An exception? the value will be taken from the first dictionary? maybe from the second? It's not clearly defined and therefore isn't implemented.</span>
<span class="comment-copy"><a href="http://bugs.python.org/issue6410" rel="nofollow noreferrer">See here</a></span>
<span class="comment-copy">"(I concede that it could be ambiguous which value should be used in scenarios where foo and bar have the same key but different key values)" You really are answering your own question.</span>
