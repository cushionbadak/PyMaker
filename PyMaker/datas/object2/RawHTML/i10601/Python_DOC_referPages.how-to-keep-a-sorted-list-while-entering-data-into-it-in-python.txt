<div class="post-text" itemprop="text">
<p>I have a list of lists which need to be sorted based on the length of the lists. What I am doing now is first inserting the lists into the main list and then sort the main list giving <code>key=len</code>. This steps will take a total time of <code>n + nlg(n)</code>. Is it possible to maintain a sorted list while entering the data into the main list? Can it be done using bisect (or is there any better way) and if so will it perform better than<code>n + nlg(n)</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on the data structure you are using:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Dynamic_array" rel="nofollow">Dynamic Array</a>
<ul>
<li>Finding the right index on a sorted array is <code>O(log n)</code> using a bisect</li>
<li>Inserting is <code>O(n)</code> as you have to shift everything</li>
<li>Total `O(n)</li>
</ul></li>
<li><a href="https://en.wikipedia.org/wiki/Linked_list" rel="nofollow">Linked List</a>
<ul>
<li>Finding the right index on a sorted linked list requires browsing the list until you get there. (<code>O(n)</code>)</li>
<li>Inserting is a simple operation, takes only <code>O(1)</code>.</li>
<li>Total <code>O(n)</code></li>
</ul></li>
<li><a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree" rel="nofollow">Self-balancing BST</a>
<ul>
<li>Inserting while maintaining the order and the balance is <code>O(log n)</code> <em>amortized</em></li>
<li>There are links to implementations in <a href="https://stackoverflow.com/questions/2298165/pythons-standard-library-is-there-a-module-for-balanced-binary-tree">this question</a></li>
</ul></li>
<li><a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow">Heap</a>. Not exactly what you ask, but inserting into a heap is <code>O(log n)</code> or <code>Theta(1)</code> depending on the implementation you use. <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow">heapq</a> in python is one implementation. You simple push items in your heap, and when you are done, you can get the sorted result in <code>O(n)</code>. Meanwhile you can access the root of the tree in <code>O(1)</code>, and the k smallest, sorted, in <code>O(k)</code>.</li>
</ul>
</div>
<span class="comment-copy">try <a href="http://www.grantjenks.com/docs/sortedcontainers/sortedlistwithkey.html" rel="nofollow noreferrer">sortedcontainers</a></span>
<span class="comment-copy">This <a href="http://code.activestate.com/recipes/577197-sortedcollection/" rel="nofollow noreferrer"><code>SortedCollection</code></a> reciple may be helpful (which uses <code>bisect</code>).</span>
