<div class="post-text" itemprop="text">
<p>I have some strings with numbers inside like '0.9999965341102361' and '3.465889763814134E-6'. I know how to convert them to a float value; however, when I do, they become 9.99996534e-01 and 3.46588976e-06. How can I preserve the full length of the number while still converting to a float? In other words, I don't want to have to round off the original number. Is there a way to do this - can I set the float length equal to 20 or something?</p>
<p>It's been a while since I actually took python in school, so I may be forgetting something rather obvious.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the decimal module:</p>
<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; 
&gt;&gt;&gt; a = decimal.Decimal('0.9999965341102361')
&gt;&gt;&gt; b = decimal.Decimal('3.465889763814134E-6')
&gt;&gt;&gt; a
Decimal('0.9999965341102361')
&gt;&gt;&gt; b
Decimal('0.000003465889763814134')
&gt;&gt;&gt; a*10
Decimal('9.9999653411023610')
&gt;&gt;&gt; b*10
Decimal('0.000034658897638141340')
&gt;&gt;&gt; print(a)
0.9999965341102361
&gt;&gt;&gt; print(b)
0.000003465889763814134
&gt;&gt;&gt; print('{:1.20e}'.format(b))
3.46588976381413400000e-6
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>decimal.Decimal objects in a numpy array</p>
<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = decimal.Decimal('0.9999965341102361')
&gt;&gt;&gt; y = decimal.Decimal('3.465889763814134E-6')
&gt;&gt;&gt; z = decimal.Decimal('1.23456789012345678901e-2')
&gt;&gt;&gt;
&gt;&gt;&gt; a = np.array((x, y, z))
&gt;&gt;&gt; a
array([Decimal('0.9999965341102361'), Decimal('0.000003465889763814134'),
       Decimal('0.0123456789012345678901')], dtype=object)
&gt;&gt;&gt;
&gt;&gt;&gt; b = np.float64((x,y,z))
&gt;&gt;&gt; b
array([  9.99996534e-01,   3.46588976e-06,   1.23456789e-02])
&gt;&gt;&gt; b[2], a[2]
&gt;&gt;&gt;
(0.012345678901234568, Decimal('0.0123456789012345678901'))
&gt;&gt;&gt;
&gt;&gt;&gt; a*2
array([Decimal('1.9999930682204722'), Decimal('0.000006931779527628268'),
       Decimal('0.0246913578024691357802')], dtype=object)
&gt;&gt;&gt; b*2
array([  1.99999307e+00,   6.93177953e-06,   2.46913578e-02])
&gt;&gt;&gt;
&gt;&gt;&gt; a*b

Traceback (most recent call last):
  File "&lt;pyshell#50&gt;", line 1, in &lt;module&gt;
    a*b
TypeError: unsupported operand type(s) for *: 'Decimal' and 'float'
&gt;&gt;&gt; 
</code></pre>
<p>Looks like a numpy array of type object will hold decimal.Decimal objects.  Depending on what you want to do they might work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't get better than your machine float, which is 64 bit or 32 bit. My linux laptop has 64 bit words, and the number is preserved:</p>
<pre><code>
In [6]: f = float('0.9999965341102361')

In [7]: f
Out[7]: 0.9999965341102361

In [8]: f2 = float('3.465889763814134E-6')

In [9]: f2
Out[9]: 3.465889763814134e-06
</code></pre>
</div>
<span class="comment-copy">These numbers don't get rounded for me on Python 3.5</span>
<span class="comment-copy">Python's <code>float</code> type stores 15 or 16 significant decimal digits. If you want more than that, check the <code>decimal</code> module which can handle arbitrarily many.</span>
<span class="comment-copy">Would a decimal format work in an array?</span>
<span class="comment-copy">@A.W. - What type of array are you asking about?  decimal.Decimal objects can be put in containers - like <a href="https://docs.python.org/3/faq/programming.html#how-do-you-make-an-array-in-python" rel="nofollow noreferrer">lists</a>.  You can put anything in a container/list/array .</span>
<span class="comment-copy">I'm using the NumPy array system.</span>
<span class="comment-copy">@A.W. - see edit</span>
<span class="comment-copy">This seems to work, thank you!</span>
