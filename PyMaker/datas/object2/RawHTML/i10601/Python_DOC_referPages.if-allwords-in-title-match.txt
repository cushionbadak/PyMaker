<div class="post-text" itemprop="text">
<p>Using python3, i have a list of words like:
<code>['foot', 'stool', 'carpet']</code> </p>
<p>these lists vary in length from 1-6 or so. i have thousands and thousands of strings to check, and it is required to make sure that all three words are present in a title. where:
<code>'carpet stand upon the stool of foot balls.'</code>
is a correct match, as all the words are present here, even though they are out of order.</p>
<p>ive wondered about this for a long time, and the only thing i could think of was some sort of iteration like:</p>
<pre><code>for word in list: if word in title: match!
</code></pre>
<p>but this give me results like <code>'carpet cleaner'</code> which is incorrect. i feel as though there is some sort of shortcut to do this, but i cant seem to figure it out without using excessive<code>list(), continue, break</code> or other methods/terminology that im not yet familiar with. etc etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all()</code></a>:</p>
<pre><code>words = ['foot', 'stool', 'carpet']
title = "carpet stand upon the stool of foot balls."

matches = all(word in title for word in words)
</code></pre>
<p>Or, inverse the logic with not <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code></a> and <code>not in</code>:</p>
<pre><code>matches = not any(word not in title for word in words)
</code></pre>
</div>
<span class="comment-copy">Would you want <code>recarpeted footstool</code> to match?</span>
<span class="comment-copy">You might want to split if substrings should not be matched.</span>
<span class="comment-copy">@PadraicCunningham. Also to avoid things like <code>recarpeted</code> from matching.</span>
<span class="comment-copy">Good points, thanks! Nltk's <i>word tokenizer</i> might be a bit better option to split into words and handle all the punctuation.</span>
<span class="comment-copy">Here's a simpler option that just strips the punctuation using vanilla Python: <a href="http://stackoverflow.com/a/17951315/2988730">stackoverflow.com/a/17951315/2988730</a></span>
