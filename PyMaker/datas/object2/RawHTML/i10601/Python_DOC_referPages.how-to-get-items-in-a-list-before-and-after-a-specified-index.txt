<div class="post-text" itemprop="text">
<p>Suppose I have the list <code>f=[1,2,3]</code> and index <code>i</code> -- I want to iterate over <code>f</code>, excluding <code>i</code>. Is there a way I can use <code>i</code> to split the list, something like <code>f[:i:]</code>, where I would be given a new list of <code>[1,3]</code> when ran with <code>i=1</code>?</p>
<p>Code I'm trying to fit this into:</p>
<pre><code># permutations, excluding self addition
# &lt;something here&gt; would be f excluding f[x]
f = [1,2,3]
r = [x + y for x in f for y in &lt;something here&gt;]

# Expected Output (notice absence of any f[i]+f[i])
[3, 4, 3, 5, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code></a> in order to have access to index at iteration time.</p>
<pre><code>[item for i, item in enumerate(f) if i != 3]
</code></pre>
<p>In this case you can escape the intended index or if you have a set of indices you can check the membership with <code>in</code>:</p>
<pre><code>[item for i, item in enumerate(f) if i not in {3, 4, 5}]
</code></pre>
<p>If you want to remove an item in a certain index you can use <code>del</code> statement:</p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; 
&gt;&gt;&gt; del l[3]
&gt;&gt;&gt; l
['a', 'b', 'c', 'e']
&gt;&gt;&gt; 
</code></pre>
<p>If you want to create a new list by removing that item and preserve teh main list you can use a simple slicing:</p>
<pre><code>&gt;&gt;&gt; new = l[:3] + l[4:]
&gt;&gt;&gt; new
['a', 'b', 'c', 'e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>iterate y over the index:</p>
<pre><code>f = [10,20,30,40,50,60]
r = [x + f[y] for x in f for y in range(len(f)) if f[y] != x]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably not the most elegant solution, but this might work:</p>
<pre><code>f = [1,2,3,4,5]

for i, x in enumerate(f):
    if i == 0:
        new_list = f[1:]
    elif i == len(f) -1:
        new_list = f[:-1]
    else:
        new_list = f[:i]+f[i+1:]
    print i, new_list
</code></pre>
<p>prints:</p>
<pre><code>0 [2, 3, 4, 5]
1 [1, 3, 4, 5]
2 [1, 2, 4, 5]
3 [1, 2, 3, 5]
4 [1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, it may seem scary but that's a one-liner that does the work:</p>
<pre><code>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain(*(i+array(l) for i,l in zip(reversed(f), itertools.combinations(f, len(f)-1)))))
[3, 4, 3, 5, 4, 5]
</code></pre>
<p>If you look at it slowly, it's not so complicated:</p>
<ol>
<li><p>The <code>itertools.combination</code> give all the possible options to the <code>len(f)-1</code> combination:</p>
<pre><code>&gt;&gt;&gt; list(itertools.combinations(f, len(f)-1))
[(1, 2), (1, 3), (2, 3)]
</code></pre></li>
<li><p>You wrap it with <code>zip</code> and <code>reversed(f)</code> so you can get each combination together with the missing value:</p>
<pre><code>&gt;&gt;&gt; [(i,l) for i,l in zip(reversed(f), itertools.combinations(f, len(f)-1))]
[(3, (1, 2)), (2, (1, 3)), (1, (2, 3))]
</code></pre></li>
<li><p>Then you convert <code>l</code> to a <code>numpy.array</code> so you can add the missing value:</p>
<pre><code>&gt;&gt;&gt; list((i+array(l) for i,l in zip(reversed(f), itertools.combinations(f, len(f)-1))))
[array([4, 5]), array([3, 5]), array([3, 4])]
</code></pre></li>
<li><p>And finaly you use <code>itertools.chain</code> to get the desired result.</p></li>
</ol>
</div>
<span class="comment-copy">Is <code>f = [10,20,30,40,50,60]; ind = 3; f_new = f[:ind]+f[ind+1:]; print(f_new);</code> what you mean by self-addition?</span>
<span class="comment-copy">I've updated my question for clarity</span>
<span class="comment-copy">@MrDuk... so, you're trying to loop through a list and on each iteration create a new list which excludes the current index? It's not very clear from your question what you are trying to achieve.</span>
<span class="comment-copy">Yes, that's exactly what I'm trying to do.</span>
<span class="comment-copy">Thanks, but the assignment of <code>i</code> in the question is just an example -- I want to split a list <code>f</code> into a new list, excluding <code>i</code>, every iteration</span>
<span class="comment-copy">@MrDuk Checkout the update.</span>
