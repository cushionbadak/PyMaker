<div class="post-text" itemprop="text">
<p>I have such a string:</p>
<pre><code>    &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
    &lt;tmx version="1.4"&gt;
    &lt;header creationdate="Mon Jan  4 11:56:26 2016"
              srclang="en"
              adminlang="en"
              o-tmf="unknown"
              segtype="sentence"
              creationtool="Uplug"
              creationtoolversion="unknown"
              datatype="PlainText" /&gt;
      &lt;body&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Ah, this is greasy.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Yemek çok yağlıymış.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;I want to eat kimchee.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Şimdi biraz kimchi yiyebilirim.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Is Chae Yoon's coordinator in here?&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Yune'nin stilisti, içeride misin?&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Excuse me, aren't you Chae Yoon's coordinator? Yes. Me?&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Sen Yune'nin stilisti değil misin?&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;-Chae Yoon is done singing.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;- Ben mi? - Yune şarkısını bitirdi.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
..............................................................................
</code></pre>
<p>I want to get the sentences between <code>&lt;seg&gt;...&lt;/seg&gt;</code> into a list like;</p>
<p><code>[['sentence1', 'sentence2'], ['sentence3', 'sentence4']]</code>.</p>
<p>How can I manage that?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to go with a pure regex approach, you can try <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow">regex.findall</a> to get all matches.</p>
<p>Although not a perfect approach, but something like </p>
<pre><code>import re
regex = r'&lt;tuv.*&lt;seg&gt;(.*)&lt;/seg&gt;.*\n.*&lt;seg&gt;(.*)&lt;/seg&gt;&lt;/tuv&gt;'

input_string = """
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
    &lt;tmx version="1.4"&gt;
    &lt;header creationdate="Mon Jan  4 11:56:26 2016"
              srclang="en"
              adminlang="en"
              o-tmf="unknown"
              segtype="sentence"
              creationtool="Uplug"
              creationtoolversion="unknown"
              datatype="PlainText" /&gt;
      &lt;body&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Ah, this is greasy.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Yemek çok yağlıymış.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;I want to eat kimchee.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Şimdi biraz kimchi yiyebilirim.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Is Chae Yoon's coordinator in here?&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Yune'nin stilisti, içeride misin?&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Excuse me, aren't you Chae Yoon's coordinator? Yes. Me?&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Sen Yune'nin stilisti değil misin?&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;-Chae Yoon is done singing.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;- Ben mi? - Yune şarkısını bitirdi.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
"""

def main():
    y = []
    for i_tuple in re.findall(regex, input_string):
        # just for the sake that you need a list, otherwise re.findall
        # already returns a list of tuples
        y.append(list(i_tuple))
    print(y)

if __name__ == '__main__':
    main()
</code></pre>
<p>Prints out the following on my end</p>
<pre><code>[['Ah, this is greasy.', 'Yemek çok yağlıymış.'], ['I want to eat kimchee.', 'Şimdi biraz kimchi yiyebilirim.'], ["Is Chae Yoon's coordinator in here?", "Yune'nin stilisti, içeride misin?"], ["Excuse me, aren't you Chae Yoon's coordinator? Yes. Me?", "Sen Yune'nin stilisti değil misin?"], ['-Chae Yoon is done singing.', '- Ben mi? - Yune şarkısını bitirdi.']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've quite enjoyed using <a href="https://www.crummy.com/software/BeautifulSoup/" rel="nofollow noreferrer">Beautifulsoup</a> for tasks like that in the past, although I've only been working with html. <a href="https://stackoverflow.com/questions/4071696/python-beautifulsoup-xml-parsing#4093940">It does however handle xml quite well also, apparently</a>.</p>
<p>Specifically, you're probably wanting to look at things like <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all" rel="nofollow noreferrer">.find_all</a>. The most important thing to realise if you want to hit the ground running with this (other than how really nice <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow noreferrer">the documentation</a> is) is that the return value of a find_all function is an object which you can call find_all on again - so you can do something like:</p>
<pre><code>soup = BeautifulSoup(text)
retval = []
tus = soup.find_all('tu')
for tu in tus:
    inner = []
    tuvs = tu.find_all('tuv')
    for tuv in tuvs:
        inner.append(tuv.contents[0].text)
    retval.append(inner)
</code></pre>
<p>The docstrings in this module are also quite good so dir(object) and help(object), help(object.function) etc are, as always, your friends here.</p>
<p>I'll admit that I've tried to parse html with regex in the (distant, but not distant enough that I don't still get bad dreams sometimes) past - as mentioned in the first answer <a href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags">here - it is a really bad idea</a>. I don't know whether using regex on xml is less likely to "exti​nguish the voices of mor​tal man from the sp​here" or not - but do you really want to take that risk?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another possible approach for finding the sentences could be</p>
<pre><code>s = """
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
    &lt;tmx version="1.4"&gt;
    &lt;header creationdate="Mon Jan  4 11:56:26 2016"
              srclang="en"
              adminlang="en"
              o-tmf="unknown"
              segtype="sentence"
              creationtool="Uplug"
              creationtoolversion="unknown"
              datatype="PlainText" /&gt;
      &lt;body&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Ah, this is greasy.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Yemek çok yağlıymış.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;I want to eat kimchee.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Şimdi biraz kimchi yiyebilirim.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Is Chae Yoon's coordinator in here?&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Yune'nin stilisti, içeride misin?&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;Excuse me, aren't you Chae Yoon's coordinator? Yes. Me?&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;Sen Yune'nin stilisti değil misin?&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
        &lt;tu&gt;
          &lt;tuv xml:lang="en"&gt;&lt;seg&gt;-Chae Yoon is done singing.&lt;/seg&gt;&lt;/tuv&gt;
          &lt;tuv xml:lang="tr"&gt;&lt;seg&gt;- Ben mi? - Yune şarkısını bitirdi.&lt;/seg&gt;&lt;/tuv&gt;
        &lt;/tu&gt;
"""

first = "&lt;seg&gt;"
last = "&lt;/seg&gt;"
while first in s:
  start = s.index( first ) + len( first )
  end = s.index( last, start )
  print(s[start:end])
  s = s[end:]
</code></pre>
<p>Returns: </p>
<pre><code>"Ah, this is greasy."
"Yemek çok yağlıymış."
"I want to eat kimchee."
"Şimdi biraz kimchi yiyebilirim."
"Is Chae Yoon's coordinator in here?"
"Yune'nin stilisti, içeride misin?"
"Excuse me, aren't you Chae Yoon's coordinator? Yes. Me?"
"Sen Yune'nin stilisti değil misin?"
"-Chae Yoon is done singing."
"- Ben mi? - Yune şarkısını bitirdi."
</code></pre>
</div>
<span class="comment-copy">Does the string has new lines as well or you just formatted the post above for readability ?</span>
<span class="comment-copy">yes Sait, the string has new lines.</span>
<span class="comment-copy">This is xml. Use an xml parser.</span>
<span class="comment-copy">this is actually a .tmx file. If it is possible to parse with xml, could you write some hint? Thanks :)</span>
<span class="comment-copy"><b>It is XML</b>. Look at it.</span>
<span class="comment-copy">LukeBowl, thank you for your answer. And it works! But there is another problem now. The file is around 5 GB. Is there any fast way to do the same? Thanks,</span>
<span class="comment-copy">@yusuf Python string search efficiency with splitting is discussed here <a href="http://stackoverflow.com/questions/6963236/python-string-search-efficiency" title="python string search efficiency">stackoverflow.com/questions/6963236/…</a>.  5GB is a relatively large file, and depending on the bottlenecks there might be different approaches</span>
