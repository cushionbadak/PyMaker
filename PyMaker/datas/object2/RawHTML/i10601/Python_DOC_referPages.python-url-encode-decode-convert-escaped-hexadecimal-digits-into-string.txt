<div class="post-text" itemprop="text">
<p>For example, if I have an encoded string as:</p>
<pre><code>url='locality=Norwood&amp;address=138+The+Parade&amp;region=SA&amp;country=AU&amp;name=Pav%C3%A9+cafe&amp;postalCode=5067'
</code></pre>
<p>The name parameter has the characters %C3%A9 which actually implies the character é.</p>
<p>Hence, I would like the output to be:</p>
<pre><code>new_url='locality=Norwood&amp;address=138+The+Parade&amp;region=SA&amp;country=AU&amp;name=Pavé+cafe&amp;postalCode=5067'
</code></pre>
<p>I tried the following steps on a <strong>Python terminal</strong>:</p>
<pre><code>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; url='locality=Norwood&amp;address=138+The+Parade&amp;region=SA&amp;country=AU&amp;name=Pav%C3%A9+cafe&amp;postalCode=5067'
&gt;&gt;&gt; new_url=urllib2.unquote(url).decode('utf8')
&gt;&gt;&gt; print new_url
locality=Norwood&amp;address=138+The+Parade&amp;region=SA&amp;country=AU&amp;name=Pavé+cafe&amp;postalCode=5067
&gt;&gt;&gt;
</code></pre>
<p>However, when I tried the same thing within a <strong>Python script</strong> and run as myscript.py, I am getting the following stack trace:</p>
<pre><code>UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 88: ordinal not in range(128)
</code></pre>
<p>I am using Python 2.6.6 and cannot switch to other versions due to work reasons. </p>
<p>How can I overcome this error? </p>
<p>Any help is greatly appreciated. Thanks in advance!</p>
<pre><code>######################################################
</code></pre>
<p><strong>EDIT</strong></p>
<p><strong>I realized that I am getting the above expected output.</strong> </p>
<p><strong>However</strong>, I would like to convert the parameters in the new_url into a dictionary as follows. While doing so, I am not able to retain the special character 'é' in my name parameter.</p>
<pre><code>print new_url
params_list = new_url.split("&amp;")
print(params_list)
params_dict={}
for p in params_list:
   temp = p.split("=")
   params_dict[temp[0]] = temp[1]
print(params_dict)
</code></pre>
<p><strong>Outputs:</strong></p>
<p><strong>new_url</strong></p>
<p>locality=Norwood&amp;address=138+The+Parade&amp;region=SA&amp;country=AU&amp;name=Pavé+cafe&amp;postalCode=5067</p>
<p><strong>params_list</strong></p>
<p>[u'locality=Norwood', u'address=138+The+Parade', u'region=SA', u'country=AU', u'name=Pav\xe9+cafe', u'postalCode=5067']</p>
<p><strong>params_dict</strong></p>
<p>{u'name': u'Pav\xe9+cafe', u'locality': u'Norwood', u'country': u'AU', u'region': u'SA', u'address': u'138+The+Parade', u'postalCode': u'5067'}</p>
<p>Basically ... the name is now 'Pav\xe9+cafe' as opposed to the required 'Pavé'.</p>
<p>How can I still retain the same special character in my params_dict?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is actually due to the difference between <code>__repr__</code> and <code>__str__</code>. When printing a unicode string, <code>__str__</code> is used and results in the <code>é</code> you see when printing <code>new_url</code>. However, when a list or dict is printed, <code>__repr__</code> is used, which uses <code>__repr__</code> for each object within lists and dicts. If you print the items separately, they print as you desire.</p>
<pre><code># -*- coding: utf-8 -*-
new_url = u'name=Pavé+cafe&amp;postalCode=5067'
print(new_url)  # name=Pavé+cafe&amp;postalCode=5067

params_list = [s for s in new_url.split("&amp;")]
print(params_list)  # [u'name=Pav\xe9+cafe', u'postalCode=5067']
print(params_list[0])  # name=Pavé+cafe
print(params_list[1])  # postalCode=5067

params_dict = {}
for p in params_list:
    temp = p.split("=")
    params_dict[temp[0]] = temp[1]
print(params_dict)  # {u'postalCode': u'5067', u'name': u'Pav\xe9+cafe'}
print(params_dict.values()[0])  # 5067
print(params_dict.values()[1])  # Pavé+cafe
</code></pre>
<p>One way to print the list and dict is to get their string representation, then decode them with<code>unicode-escape</code>:</p>
<pre><code>print(str(params_list).decode('unicode-escape'))  # [u'name=Pavé+cafe', u'postalCode=5067']
print(str(params_dict).decode('unicode-escape'))  # {u'postalCode': u'5067', u'name': u'Pavé+cafe'}
</code></pre>
<p><strong>Note</strong>: This is only an issue in Python 2. Python 3 prints the characters as you would expect. Also, you may want to look into <a href="https://docs.python.org/2.6/library/urlparse.html#urlparse.parse_qs" rel="nofollow"><code>urlparse</code></a> for parsing your URL instead of doing it manually.</p>
<pre><code>import urlparse
new_url = u'name=Pavé+cafe&amp;postalCode=5067'
print dict(urlparse.parse_qsl(new_url))  # {u'postalCode': u'5067', u'name': u'Pav\xe9 cafe'}
</code></pre>
</div>
<span class="comment-copy">I was unable to reproduce your error. Are you sure you're using the same code in both the terminal and the script?</span>
<span class="comment-copy">@machineyearning You are correct. Please check my edit for my actual problem.</span>
<span class="comment-copy">I think it'd also be useful to add that Python has functions to parse query strings already: <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">OP Is using Python 2.6, but I'll add the relevant library from there.</span>
<span class="comment-copy">@Karin Thank you for the info on <b>repr</b> and <b>str</b>. Instead of printing, ideally, I need to return the dictionary and save it into a file. I tried this - But the file still contains 'Pav\xe9+cafe' instead of 'Pavé+cafe'. And I don't really want to specify the dict values to be saved using params_dict.values()[0], params_dict.values()[1], etc. since I want to save the entire dictionary in a file...</span>
<span class="comment-copy">Updated answer to include a way to print out the list and dict in the desired format.</span>
