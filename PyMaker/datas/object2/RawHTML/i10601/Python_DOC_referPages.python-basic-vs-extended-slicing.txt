<div class="post-text" itemprop="text">
<p>When experimenting with slicing I noticed a strange behavior in Python 2.7:</p>
<pre><code>class A:
    def __getitem__(self, i):
        print repr(i)
a=A()
a[:] #Prints slice(0, 9223372036854775807, None)
a[::] #prints slice(None, None, None)
a[:,:] #prints (slice(None, None, None), slice(None, None, None))
</code></pre>
<p>When using a single colon in the brackets, the slice object has 0 as start and a huge integer as end. However, when I use more than a single colon, start and stop are None if not specified.</p>
<p>Is this behaviour guaranteed or implementation specific?</p>
<p>The <a href="https://docs.python.org/2/reference/datamodel.html#types">Documentation</a> says that the second and third case are extended slicing, while the first case is not. However, I couldn't find any clear explanation of the difference between basic and extended slicing.</p>
<p>Are there any other "special cases" which I should be aware of when I override <code>__getitem__</code> and want to accept extended slicing??</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2 <code>[:]</code> still calls <a href="https://docs.python.org/2/reference/datamodel.html#object.__getslice__" rel="nofollow"><code>__getslice__(self, i, j)</code></a> (deprecated) and this is documented to return a slice <code>slice(0, sys.maxsize, None)</code> when called with default parameters:</p>
<blockquote>
<p>Note that missing <code>i</code> or <code>j</code> in the slice expression are replaced by <strong>zero</strong> or <strong><code>sys.maxsize</code></strong>, ...</p>
</blockquote>
<p>(emphasis mine).
New style classes don't implement <code>__getslice__()</code> by default, so</p>
<blockquote>
<p>If no <code>__getslice__()</code> is found, a slice object is created instead, and passed to <code>__getitem__()</code> instead.</p>
</blockquote>
<p>Python 3 doesn't support <code>__getslice__()</code>, anymore, instead it <a href="https://docs.python.org/3/reference/datamodel.html#object.__length_hint__" rel="nofollow">constructs a <code>slice()</code></a> object for all of the above slice expressions. And <code>slice()</code> has <code>None</code> as default:</p>
<blockquote>
<p>Note: Slicing is done exclusively with the following three methods. A call like </p>
<p><code>a[1:2] = b</code></p>
<p>is translated to</p>
<p><code>a[slice(1, 2, None)] = b</code></p>
<p>and so forth. Missing slice items are always filled in with <code>None</code>.</p>
</blockquote>
</div>
<span class="comment-copy">With Python 2.7, I get <code>2147483647</code> (2^31-1), so the value is definitely system-specific. With Python 3, I get <code>None</code> in all cases.</span>
<span class="comment-copy">It also changes to <code>None</code> if you make <code>A</code> a new-style class.</span>
