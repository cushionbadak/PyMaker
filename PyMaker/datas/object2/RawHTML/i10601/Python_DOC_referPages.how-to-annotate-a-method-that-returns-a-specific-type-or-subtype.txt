<div class="post-text" itemprop="text">
<p>Please consider this snippet of python 3.5 code:</p>
<pre><code>class Foo:
    pass

class Bar(Foo):
   pass

class AbstractSomething: 

    def get_foobinator_type(self):  
        return Foo
</code></pre>
<p>I'd like to annotate (<a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow">using PEP-0484 annotations</a>) return value of <code>get_foobinator_type</code> method to say: "It returns a type, that is either a <code>Foo</code> or any subtype of it". </p>
<p>I din't find any sensible way to do it in Python. Here are approaches that are obviously wrong: </p>
<ul>
<li><p>Following: <code>def get_foobinator_type(self) -&gt; Foo</code> means that this method returns an <strong>instance</strong> of <code>Foo</code>. </p></li>
<li><p>Following: <code>def get_foobinator_type(self) -&gt; type</code> means that this method returns a type, but sadly, there is no information about that this is needs to be a subtype of <code>Foo</code>. </p></li>
</ul>
<p>In Java terms I'd like to have method with signature like: <code>Class&lt;Foo&gt; getFoobinatorType()</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I understand, you really cannot. You're looking for a way to indicate the return <em>type</em> of a <strong>class</strong>; to check based on what the type of the class is, i.e its metaclass. </p>
<p>The problem with that is that a metaclass doesn't help a type checker evaluate what the inheritance of an object might be, if it's of type <code>type</code> it's alright.</p>
<p>Apart from that, and, not being sure what type-checker you use, <code>mypy</code> for example <a href="https://github.com/python/mypy/wiki/Unsupported-Python-Features" rel="nofollow">doesn't have support yet</a> for custom metaclasses which you might use to group your objects in a more custom group. </p>
<p>The way I see it, you either don't annotate at all all, or, you change the implementation and annotate with <code>Foo</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lately (in Python <code>3.5.2</code>) a generic <code>Type</code> was introduced, so solution is: </p>
<pre><code>class AbstractSomething: 

    def get_foobinator_type(self) -&gt; typing.Type[Foo]:  
        return Bar
</code></pre>
<p>See: <a href="https://docs.python.org/3/library/typing.html#typing.Type" rel="nofollow noreferrer">python docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you need is TypeVar from the typing module.</p>
<pre><code>from typing import TypeVar

class Foo:
    pass

class Bar(Foo):
   pass

T = TypeVar('T', bound=Foo)

class AbstractSomething: 

    def get_foobinator_type(self) -&gt; T:  
        return Foo
</code></pre>
<p><a href="https://docs.python.org/3/library/typing.html#typing.TypeVar" rel="nofollow">From the documentation of typing</a>:</p>
<blockquote>
<p>Alternatively, a type variable may specify an upper bound using
  bound=. This means that an actual type substituted (explicitly
  or implicitly) for the type variable must be a subclass of the
  boundary type, see PEP 484</p>
</blockquote>
</div>
<span class="comment-copy">I strongly suspected that this is the case. I don't use static type checker, I use type hints mostly to document API's and to make code-completion better.</span>
