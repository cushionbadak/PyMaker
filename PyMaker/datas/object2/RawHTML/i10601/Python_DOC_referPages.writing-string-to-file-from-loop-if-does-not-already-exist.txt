<div class="post-text" itemprop="text">
<p>This has been asked and answered, and I've read lots of those posts... but for some reason my code isn't working.  Hopefully someone can help.</p>
<p>The code matches strings within a variable and then attempts to write those strings to a file if they don't already exist within that file.  </p>
<p>Code doesn't work.  Any help please?</p>
<pre><code>#this works
str_match = re.findall(r'(https?://[^\s]+)', input
if str_match:
    with open (datestamp+_"strings.txt", "a+") as text_file:
        for string in str_match:
            #THIS DOES NOT WORK -- WITH OR WITHOUT THE '\n'
            #WITH, ALWAYS SAYS IT EXISTS AND WRITES NOTHING
            if (string + '\n') in text_file:
                print "str exists"
            else:
                print "Doesn't exist"
                text_file.write(string + '\n')
</code></pre>
<p>Without it, it says the string doesn't exist and writes it to the file multiple times.</p>
<pre><code>if string in text_file:
                print "str exists"
            else:
                print "Doesn't exist"
                text_file.write(string + '\n')
</code></pre>
<p>If I look at the string that's written using vim, it looks like:  mystring$</p>
<p>(the $ is appended at the end of each string -- and no, adding <strong>+"$"</strong>  doesn't work)</p>
<p>Any help please?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that files don't (really) support membership tests with the <code>in</code> operator.</p>
<p>The reason why no error is thrown is because files are iterable and thus <code>x in file</code> evaluates to <code>any(x is e or x == e for e in file)</code> (<a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" rel="nofollow">docs</a>). This operation works only once, because after the first time the file has been exhausted and no more lines can be read (until you write new ones).</p>
<p>The solution to your problem is to read all the lines in the file into a list or set and use that for membership tests:</p>
<pre><code>all_lines= set(text_file)
...
if (string + '\n') in all_lines:
</code></pre>
<hr/>
<p>However, this does not explain why <code>if (string + '\n') in text_file:</code> always returns <code>True</code>. In fact it should always (after the first iteration) return <code>False</code>, and that's exactly what happens when I run your code on my machine. There's probably something writing to the file in other parts of your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Problem is you are iterating through the file once, and file is not rewound afterwards. File is only scanned once.</p>
<p>You have to read the data into a <code>set</code> first, then you can loop over the strings (and <code>set</code> is very performant because uses dichotomic search in O(log(N)))</p>
<p>Problem: if there are duplicates in <code>str_match</code>, it will be written more than once, so I added unicity with a <code>set</code></p>
<pre><code>if str_match:
    with open(datestamp+"_strings.txt", "r") as text_file: # read-only
        lines = set(map(str.rstrip,text_file)) # reads the file, removes \n and \r
    with open(datestamp+"_strings.txt", "a") as text_file: # append, write only
        for string in set(str_match):
            #THIS DOES NOT WORK -- WITH OR WITHOUT THE '\n'
            #WITH, ALWAYS SAYS IT EXISTS AND WRITES NOTHING
            if (string) in lines:
                print("str exists")
            else:
                print("Doesn't exist")
                text_file.write(string + '\n')
</code></pre>
<p>Notes:</p>
<ul>
<li>to preserve the order in the file, remove <code>set</code> in the <code>for string</code> loop, and add the string to <code>lines</code> when found.</li>
<li>first version with <code>\n</code> added would work OK on Linux, but on windows it would fail because of the <code>\r</code>. Now I <code>rstrip</code> the lines when I put them in the mini-database: no need to add <code>\n</code> when testing and is portable</li>
<li>the <code>string$</code> you saw in vim is explained: vim adds end-of-lines as <code>$</code> when showing the text. Mystery solved.</li>
</ul>
</div>
<span class="comment-copy">Have you tried using 'elif string in text_file' instead of 'if'?</span>
<span class="comment-copy">No, but I just tried it and the elif throws a syntax error.  Good thought tho.</span>
<span class="comment-copy">Basically its the:        if string in text_file:         that doesn't seem to work</span>
<span class="comment-copy"><code>text_file</code> is a file object :  <a href="https://docs.python.org/2/library/stdtypes.html#bltin-file-objects" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#bltin-file-objects</a> Please check the documentation before you try to perform fancy process, it doesn't work with your ways.</span>
<span class="comment-copy">What's wrong reading the whole data and do the comparison and then write it to another file?  Yes, it is possible to play the direct file content replacement stunt with tools such as <code>sed</code>/<code>awk</code>/etc. But most admin will just output changes to another file to avoid risk and improve code clarity.</span>
<span class="comment-copy">Even better <code>set</code> lookups are O(1)!</span>
<span class="comment-copy">You should also <code>lines.add(string + '\n')</code> in case of duplicates</span>
<span class="comment-copy">Explain O(1): I have made a performance comparison between list and set and it was really much much faster with 1 million elements. Besides, that's just a side point to improve the solution. About duplicates: can't happen because I use a <code>set</code> in my inner loop too: <code>str_match</code> does not have duplicates (thanks for your suggestions,  though, I admit I could not test the code)</span>
<span class="comment-copy"><code>set</code> is implemented as a hashtable. On average, lookups are constant time.</span>
<span class="comment-copy">ah yes. I missed the <code>set(str_match)</code>. That's ok assuming the order isn't important</span>
