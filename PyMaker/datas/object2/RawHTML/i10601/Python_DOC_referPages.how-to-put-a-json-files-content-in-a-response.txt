<div class="post-text" itemprop="text">
<p>I have a file on my computer that I'm trying to serve up as JSON from a django view.</p>
<pre><code>def serve(request):
    file = os.path.join(BASE_DIR, 'static', 'files', 'apple-app-site-association')
    response = HttpResponse(content=file)
    response['Content-Type'] = 'application/json'
</code></pre>
<p>What I get back is the path to the file when navigating to the URL</p>
<pre><code>/Users/myself/Developer/us/www/static/files/apple-app-site-association
</code></pre>
<p>What am I doing wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.path.join</code> returns a string, it's why you get a path in the content of the response. You need to read the file at that path first.</p>
<h1>For a static file</h1>
<p>If the file is static and on disk, you could just return it using the webserver and avoid using python and django at all. If the file needs authenticating to be downloaded, you could still handle that with django, and return a <a href="https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/" rel="nofollow noreferrer"><code>X-Sendfile</code> header</a> (this is dependant on the webserver).</p>
<p>Serving static files is a job for a webserver, Nginx and Apache are really good at this, while Python and Django are tools to handle application logic.</p>
<h1>Simplest way to read a file</h1>
<pre><code>def serve(request):
    path = os.path.join(BASE_DIR, 'static', 'files', 'apple-app-site-association')
    with open(path , 'r') as myfile:
        data=myfile.read()
    response = HttpResponse(content=data)
    response['Content-Type'] = 'application/json'
</code></pre>
<p>This is inspired by <a href="https://stackoverflow.com/a/8369345/1218980">How do I read a text file into a string variable in Python</a></p>
<h2>For a more advanced solution</h2>
<p>See <a href="https://stackoverflow.com/a/39001489/1218980">dhke's answer</a> on <code>StreamingHttpResponse</code>.</p>
<h1>Additional information</h1>
<ul>
<li><a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Reading and writing files</a></li>
<li><a href="https://docs.djangoproject.com/en/1.10/topics/files/" rel="nofollow noreferrer">Managing files with Django</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you feed <code>HttpResponse</code> a string a <code>content</code> you tell it to <a href="https://docs.djangoproject.com/en/1.10/ref/request-response/#id3" rel="nofollow">serve that string</a> as HTTP body:</p>
<blockquote>
<p><code>content</code> should be an iterator or a string. If itâ€™s an iterator, it should return strings, and those strings will be joined together to form the content of the response. If it is not an iterator or a string, it will be converted to a string when accessed.</p>
</blockquote>
<p>Since you seem to be using your static storage directory, you might as well use <code>staticfiles</code> to handle content:</p>
<pre><code>from django.contrib.staticfiles.storage import staticfiles_storage
from django.http.response import StreamingHttpResponse

file_path = os.path.join('files', 'apple-app-site-association')

response = StreamingHttpResponse(content=staticfiles_storage.open(file_path))
return response
</code></pre>
<p>As noted in <a href="https://stackoverflow.com/questions/39001230/simple-django-json-response/39001468#answer-39001468">@Emile Bergeron's answer</a>, for static files, this should already be overkill, since those are supposed to be accessible from outside, anyway. So a simple redirect to <code>static(file_path)</code> should do the trick, too (given your webserver is correctly configured).</p>
<p>To serve an arbitrary file:</p>
<pre><code>from django.contrib.staticfiles.storage import staticfiles_storage
from django.http.response import StreamingHttpResponse

file_path = ...

response = StreamingHttpResponse(content=open(file_path, 'rb'))
return response
</code></pre>
<p>Note that from Django 1.10 and on, the file handle will be closed automatically.</p>
<p>Also, if the file is accessible from your webserver, consider using <a href="https://pypi.python.org/pypi/django-sendfile" rel="nofollow"><code>django-sendfile</code></a>, so that the file's contents don't need to pass through Django at all.</p>
</div>
<span class="comment-copy"><code>os.path.join</code> returns a string (the path).</span>
<span class="comment-copy">@EmileBergeron then how do I get the contents of the file? I thought <code>content=file</code> would do that.</span>
<span class="comment-copy">You put a string inside the variable <code>file</code>, so <code>content=file</code> put the string as the content of the response. Search how to read a file with python.</span>
<span class="comment-copy"><code>static</code> is your static storage directory?</span>
<span class="comment-copy">If by the off chance you are trying to just serve a directory of files there's a reeeeally simple way to do it with python: go to the directory you're serving from and run <code>python -m SimpleHTTPServer &lt;port&gt;</code>... there are lots of limitations but if you have python installed it takes literally seconds. From a web browser you'll be able to navigate and download</span>
<span class="comment-copy">No need to serve the file from memory. File objects are iterable and <code>StreamingHttpResponse</code> takes care of the rest.</span>
<span class="comment-copy">@dhke if the file is static and on disk, python and django wouldn't be needed at all. Just a config in the webserver should be enough. But since OP doesn't know how to read a file, I just provided the simplest way to achieve that.</span>
<span class="comment-copy">Then OP will learn ;-). Nonetheless thanks for reminding me, that a simple redirect will probably do.</span>
<span class="comment-copy">@dhke I added a link to your answer for a more advanced solution.</span>
<span class="comment-copy">And why do you recommend using <code>StreamingHttpResponse</code> instead of <code>HttpResponse</code>?</span>
<span class="comment-copy">@qarthandso Depends on your use case. If you use  <code>StreamingHttpResponse</code> the file will be read from the filesystem chunk by chunk as it is written out to the client. From my experience, you might end up with the file in memory, if you use <code>HttpResponse</code> (e.g. ETag generation). For small files: Don't bother.</span>
<span class="comment-copy">@qarthandso with this answer and mine, you have everything you need to solve the problem at hand. You should consider upvoting and accepting one to mark the question as answered.</span>
