<div class="post-text" itemprop="text">
<p>I want to use my script like this:</p>
<pre><code>python test.py run
python test.py stop
</code></pre>
<p>and my code is like this:</p>
<pre><code>parser = argparse.ArgumentParser()
command_group = parser.add_mutually_exclusive_group(required=True)
command_group.add_argument('run', help='run it', action='store_true')
command_group.add_argument('stop', help='stop it', action='store_true')
</code></pre>
<p>when I execute it, an exception is raised:</p>
<pre><code>ValueError: mutually exclusive arguments must be optional
</code></pre>
<p>so I try to add <code>required=False</code> when I add each argument.Then I get another exception:</p>
<pre><code>TypeError: 'required' is an invalid argument for positionals
</code></pre>
<p>I'm confused. </p>
</div>
<div class="post-text" itemprop="text">
<p>A better way to do this is to add a single positional argument that can have two choices.  Since you want it to be optional, use <code>nargs='?'</code>, which means zero or one times:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('run', help='run or stop', nargs='?', choices=('run', 'stop'))
</code></pre>
<p>If <code>run</code> is given, the value will be <code>'run'</code>.  If <code>stop</code> is given, it will be <code>'stop'</code>.  If neither is given, it will be <code>None</code>.</p>
<hr/>
<p>If you really want to use a mutually-exclusive group, I'm not sure if you can do it exactly how you want.  You <em>can</em>, however, make them optional arguments by adding a hyphen:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
command_group = parser.add_mutually_exclusive_group()
command_group.add_argument('-run', help='run it', action='store_true')
command_group.add_argument('-stop', help='stop it', action='store_true')
</code></pre>
<p>Of course the problem with that is that the user also needs to provide the hyphen, but that's the sort of problem you can expect if you limit yourself like that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this with <code>nargs='?'</code></p>
<pre><code>parser = argparse.ArgumentParser()
command_group = parser.add_mutually_exclusive_group()
command_group.add_argument('run', help='run it', nargs='?')
command_group.add_argument('stop', help='stop it', nargs='?')
</code></pre>
<p>Which would allow you to call the program with</p>
<pre><code>python test.py run
</code></pre>
<p>or </p>
<pre><code>python test.py stop
</code></pre>
<p>but <strong>not</strong></p>
<pre><code>python test.py run stop
</code></pre>
</div>
<span class="comment-copy">Why use a mutex group instead of <a href="https://docs.python.org/3/library/argparse.html#choices" rel="nofollow noreferrer"><code>choices</code></a>?</span>
<span class="comment-copy">Thanks, it works. But how should I write the code if I really want to use a mutex group?</span>
<span class="comment-copy">@huron: I'm not sure you can.  See my edited answer.</span>
<span class="comment-copy">I see. Thank you!</span>
