<div class="post-text" itemprop="text">
<p>It looks simple, but I could not find a solution.</p>
<p>I display the problem below with the simplest example I could come up with.</p>
<p>(My classes are quiet more complex ;) )</p>
<p><strong>file A.py</strong></p>
<pre><code>import os, sys
import B
from B import *
class _A():
    def __init__(self,someVars):
        self.someVars = someVars
    def run(self):
        print self.someVars

someVars = 'jdoe'
B._B(someVars)
</code></pre>
<hr/>
<p><strong>file B.py don't match with import A</strong></p>
<pre><code>import A
from A import _A
class _B():
    def __init__(self,someVars):
        self.someVars = someVars
    def run(self):
        A._A(self.someVars)
</code></pre>
<p>with <code>import A</code> -&gt; callback : cannot find _A</p>
<p>It only works when I do -</p>
<pre><code>from A import * 
</code></pre>
<p>But and logically A functions are executed 2 times.</p>
<p>Thanks to all</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no need to first <code>import X</code>, then <code>from X import Y</code>. If you need Y (even if <code>Y</code> is <code>*</code>) do just <code>from X import Y</code>. This might be the cause of 2 times execution.</p>
<p>Also why have cyclic dependencies between modules <code>A -&gt; B, B -&gt; A</code>? Maybe they should be in one file then?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because of cyclic dependency you are facing the import error, you can continue your work as: </p>
<p><em>File A.py:</em></p>
<pre><code>import os, sys
#Below two import lines does cyclic dependency between file A and B which is wrong and will give import error, 
#commenting below two lines will resolve your import error
#import B 
#from B import * 
class _A():
    def __init__(self,someVars):
        self.someVars = someVars
    def run(self):
        print self.someVars

someVars = 'jdoe'
#B._B(someVars) #comment and respective logic should be moved in B file
</code></pre>
<p>Also, you should either use <code>import A</code> or <code>from A import _A</code> and if you use the later you should call the class directly as: <code>_A(self.someVars)</code> not as: <code>A._A(self.someVars)</code>, this calling convention will be used for former import style(<code>import A</code>), for better understanding of external use of classes and module, you can refer following link: <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow">https://docs.python.org/3/tutorial/modules.html</a></p>
</div>
<span class="comment-copy">Its because import A doesn't import underscored classes. You are calling <code>A._A</code> instead of <code>_A</code>, when you do <code>from A import _A</code> its allowing you to call <code>_A</code> directly. Never use <code>from A import *</code>, always either use <code>import A</code> or <code>from A import _A</code>. You don't need both either, one will do. <a href="http://stackoverflow.com/questions/551038/private-implementation-class-in-python">Underscored Class imports</a>. <a href="http://stackoverflow.com/questions/710551/import-module-or-from-module-import">Import vs. from import</a></span>
