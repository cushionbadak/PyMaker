<div class="post-text" itemprop="text">
<p>I want to generate or return an append-accumulated list from a given list (or iterator). For a list like <code>[1, 2, 3, 4]</code>, I would like to get, <code>[1]</code>, <code>[1, 2]</code>, <code>[1, 2, 3]</code> and <code>[1, 2, 3, 4]</code>. Like so:</p>
<pre><code>&gt;&gt;&gt; def my_accumulate(iterable):
...     grow = []
...     for each in iterable:
...         grow.append(each)
...         yield grow
...
&gt;&gt;&gt; for x in my_accumulate(some_list):
...     print x  # or something more useful
...
[1]
[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
</code></pre>
<p>This works but is there an operation I could use with <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a> to facilitate this? (I'm on Python2 but the pure-python implementation/equivalent has been provided in the docs.)</p>
<p>Another problem I have with <code>my_accumulate</code> is that it doesn't work well with <code>list()</code>, it outputs the entire <code>some_list</code> for each element in the list:</p>
<pre><code>&gt;&gt;&gt; my_accumulate(some_list)
&lt;generator object my_accumulate at 0x0000000002EC3A68&gt;
&gt;&gt;&gt; list(my_accumulate(some_list))
[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]
</code></pre>
<hr/>
<p>Option 1:</p>
<p>I wrote my own appending accumulator function to use with <code>itertools.accumulate</code> but considering the LoC and final useful-ness, it seems like a waste of effort, with <code>my_accumulate</code> being more useful, <em>(though may fail in case of empty iterables and consumes more memory since <code>grow</code> keeps growing)</em>:</p>
<pre><code>&gt;&gt;&gt; def app_acc(first, second):
...     if isinstance(first, list):
...        first.append(second)
...     else:
...        first = [first, second]
...     return first
...
&gt;&gt;&gt; for x in accumulate(some_list, app_acc):
...     print x
...
1
[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
&gt;&gt;&gt; list(accumulate(some_list, app_acc))  # same problem again with list
[1, [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]
</code></pre>
<p><em>(and the first returned elem is not a list, just a single item)</em></p>
<hr/>
<p>Option 2: Figured it would be easier to just do incremental slicing but using the ugly iterate over list length method:</p>
<pre><code>&gt;&gt;&gt; for i in xrange(len(some_list)):   # the ugly iterate over list length method
...   print some_list[:i+1]
...
[1]
[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to use <code>accumulate</code> is to make each item in the iterable a list with a single item and then the default function works as expected:</p>
<pre><code>from itertools import accumulate
acc = accumulate([el] for el in range(1, 5))
res = list(acc)
# [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]
</code></pre>
</div>
<span class="comment-copy">And you can remove parentheses around the generator expression for extra prettiness: <code>accumulate([el] for el in range(1, 5))</code></span>
<span class="comment-copy">@vaultah yup... I originally had that because I was using operator.add as the function argument and then realised it was redundant and just happened to have forgotten to remove 'em :p</span>
<span class="comment-copy">Yes, this is awesome because for lists <code>operator.add</code> (<code>+</code>) does <code>[1] + [2] = [1, 2]</code>, <code>[1, 2] + [3] = [1, 2, 3]</code> and so on. Thanks!</span>
<span class="comment-copy">@aneroid Because you return the reference to <code>grow</code> and <code>grow</code> is changed in every <code>yield</code> (<code>grow</code> will be <code>[1, 2, 3, 4]</code> finally).  You can change <code>yield grow</code> to <code>yield grow[:]</code> to get the expected result.</span>
<span class="comment-copy">@acw1668 Okay, that worked. Thanks. Forgot that since it's a reference to the list, what I'm getting in the final list is four references to the same list which has changed by the end  of the <code>yield</code>-ing loop.</span>
