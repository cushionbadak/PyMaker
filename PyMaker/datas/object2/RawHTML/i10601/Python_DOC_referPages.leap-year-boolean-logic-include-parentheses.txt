<div class="post-text" itemprop="text">
<p>Which is "more correct (logically)"? <em>Specific to Leap Year, not in general</em>.</p>
<ol>
<li><p>With Parentheses</p>
<pre><code>return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
</code></pre></li>
<li><p>Without</p>
<pre><code>return year % 4 == 0 and year % 100 != 0 or year % 400 == 0
</code></pre></li>
</ol>
<hr/>
<p><strong>Additional Info</strong></p>
<p><em>Parentheses change the order in which the booleans are evaluated (<code>and</code> goes before <code>or</code> w/o parenthesis).</em></p>
<p><em>Given that all larger numbers are divisible by smaller numbers in this problem, it returns the correct result either way but I'm still curious.</em></p>
<p>Observe the effects of parentheses:</p>
<ol>
<li><pre><code>False and True or True
#True

False and (True or True)
#False
</code></pre></li>
<li><pre><code>False and False or True
#True

False and (False or True)
#False
</code></pre></li>
</ol>
<p>Without parentheses, there are scenarios where even though <strong>year is not divisible by 4 (first bool) it still returns True</strong> (I know that's impossible in this problem)! <strong>Isn't being divisible by 4 a MUST and therefore it's more correct to include parenthesis?</strong> Anything else I should be paying attention to here? Can someone explain the theoretical logic of not/including parentheses?</p>
</div>
<div class="post-text" itemprop="text">
<p>The parens affect what order your booleans take. <code>and</code>s are grouped together and resolved before <code>or</code>s are, so:</p>
<pre><code>a and b or c
</code></pre>
<p>becomes:</p>
<pre><code>(a and b) or c
</code></pre>
<p>if either BOTH <code>a</code> and <code>b</code> are truthy, OR if <code>c</code> is truthy, we get <code>True</code>.</p>
<p>With the parentheses you get:</p>
<pre><code>a and (b or c)
</code></pre>
<p>Now you get <code>True</code> if both <code>a</code> is truthy and either <code>b</code> OR <code>c</code> is truthy.</p>
<hr/>
<p>As far as "correctness," as long as your code derives the correct result then "more correct" is only a matter of opinion. I would include parens where you feel like it makes the result more clear. For instance:</p>
<pre><code>if (a and b) or c:
</code></pre>
<p>is more clear than</p>
<pre><code>if a and b or c:
</code></pre>
<p>However it is NOT more clear (in my opinion) than:</p>
<pre><code>if some_long_identifier and some_other_long_identifier or \
   some_third_long_identifier_on_another_line:
</code></pre>
<p>Your guide when writing Python code should be <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>. PEP8 is quiet on when you should include stylistic parentheses (read: parens that follow the natural order of operations), so use your best judgement.</p>
<hr/>
<p>For leap years specifically, the logic is:</p>
<ol>
<li>If the year is evenly divisible by 4, go to step 2. ...</li>
<li>If the year is evenly divisible by 100, go to step 3. ...</li>
<li>If the year is evenly divisible by 400, go to step 4. ...</li>
<li>The year is a leap year (it has 366 days).</li>
<li>The year is not a leap year (it has 365 days).</li>
</ol>
<p>In other words: all years divisible by 4 are leap years, unless they're divisible by 100 and NOT divisible by 400, which translates to:</p>
<pre><code>return y % 4 == 0 and not (y % 100 == 0 and y % 400 != 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Include the parentheses. In English, the rule is:</p>
<ol>
<li>Year must be divisible by 4.</li>
<li>Year must not be visible by 100, unless it's divisible by 400.</li>
</ol>
<p>The version with parentheses matches this two-pronged rule best.</p>
<pre><code>return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
       ^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            (1)                          (2)
</code></pre>
<p>As it happens, removing the parentheses does not break the code, but it leads to an unnatural version of the rules:</p>
<ol>
<li>Year must be divisible by 4, but not by 100; or</li>
<li>Year must be divisible by 400.</li>
</ol>
<p>That's not the way I think of the leap year rule.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Which answer is "more correct" and why?</p>
</blockquote>
<p>It's not a matter of what is '<em>more correct</em>', rather; what logic do you wish to implement? Parenthesis' in <strong>boolean</strong> expressions change <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow">order of operations</a>. This allows you to force precedence in its execution.</p>
<pre><code>&gt;&gt;&gt; (True or True) and False  # or expression evaluates first.
False
&gt;&gt;&gt; True or True and False  # and evaluates first.
True
</code></pre>
<hr/>
<p>As for the logic in the leap year formula, the <a href="https://www.mathsisfun.com/leap-years.html" rel="nofollow"><strong>rules</strong></a> go as follows:</p>
<ol>
<li><p><em>Leap Years are any year that can be evenly divided by 4 (such as 2012, 2016, etc)</em></p></li>
<li><p><em>Except if it can be evenly divided by 100, then it isn't (such as 2100, 2200, etc)</em></p></li>
<li><p><em>Except if it can be evenly divided by 400, then it is (such as 2000, 2400)</em></p></li>
</ol>
<p>Thus the exception rules must take precedence, which is why the parenthesis around the <code>or</code> is necessary to adhere to the formula's rules. Other wise the two arguments to <code>and</code> would be evaluated first.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Which answer is "more correct" and why? (Specific to Leap Year Logic, not in general)</p>
<p>With Parentheses</p>
<p>return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)</p>
<p>Without</p>
<p>return year % 4 == 0 and year % 100 != 0 or year % 400 == 0</p>
</blockquote>
<p>Depends on your definition of "more correct". As you know, both return correct. </p>
<p>Now speculating the "more correctness" - if you are referring to performance benefits, I cannot think of any, considering the current smart compilers.</p>
<p>If you are discussing the human readability point of view, I would go with,</p>
<blockquote>
<p>return year % 4 == 0 and year % 100 != 0 or year % 400 == 0</p>
</blockquote>
<p>It naturally narrows down the scope, opposed to your other alternative, which seemed to include visually two disjoint elements.</p>
<p>I would suggest, include parentheses, but as below:</p>
<blockquote>
<p>return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As you noted, in operation, there is no difference, since the number being divisible by 400 implies that it is also divisible by 100, which implies that it is also divisible by 4.  Operationally, whether the parentheses have any effect depends on the lexical order (order of evaluation) of the language.  Most languages today follow the conventions of c, which means a specified precedence of operators, and left-to-right otherwise.  When in doubt, I always put parentheses for readability.</p>
<p>Stylistically, this sort of thing is hard to read when put in a long expression like that.  If it must be one expression, I would prefer to have the logical "sum of products" to the "product of sums"  So I would go</p>
<pre><code>return (year%400 == 0) or (year%100 != 0 and year%4 == 0)
</code></pre>
<p>Or even</p>
<pre><code>bool IsLeap = false;
if (year%4 == 0) IsLeap = true;
if (year%100 == 0) IsLeap = false;
if (year%400 == 0) IsLeap = true;

return IsLeap;
</code></pre>
<p>An optimizing compiler will make efficient code, anyway, and this sort of thing really helps poor humans like me to read it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Answer: <strong>Include Parentheses</strong></p>
<hr/>
<p><a href="https://stackoverflow.com/users/68587/john-kugelman">John Kugelman</a> explains why they are 2 separate logical tests as opposed to 3, -&gt; the last 2 should be grouped together:</p>
<ol>
<li>Year must be divisible by 4.</li>
<li>(2) Year must not be visible by 100, (3) unless it's divisible by 400.</li>
</ol>
<p>The version with parentheses matches this two-pronged rule best.</p>
<pre><code>return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
       ^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            (1)                          (2)
</code></pre>
<p>As it happens, removing the parentheses does not break the code, but it leads to an unnatural version of the rules:</p>
<ol>
<li>Year must be divisible by 4, but not by 100; or</li>
<li>Year must be divisible by 400.</li>
</ol>
<p>That's not the way I think of the leap year rule.</p>
<hr/>
<p>Inspired by <a href="https://stackoverflow.com/users/6320655/mrdomoboto">mrdomoboto</a>, 100/400 are the exception!:</p>
<p><em>Year must be divisible by 4</em>, 100 is an exception and 400 is an exception of the exception but they are still one exception in total (see above). This means that if year is not divisible by 4 then the whole thing must be False. The only way to ensure this is to put parens around the exception because <code>False and bool</code> will always return False.</p>
<p>See below examples of this from <a href="https://stackoverflow.com/users/4722345/jballin">JBallin</a></p>
<ol>
<li><pre><code>False and True or True
#True

False and (True or True)
#False
</code></pre></li>
<li><pre><code>False and False or True
#True

False and (False or True)
#False
</code></pre></li>
</ol>
<hr/>
<p><a href="https://stackoverflow.com/users/3058609/adam-smith">Adam Smith</a> translated the english into code:</p>
<p>All years divisible by 4 are leap years, unless they're divisible by 100 and NOT divisible by 400, which translates to:</p>
<pre><code>return y % 4 == 0 and not (y % 100 == 0 and y % 400 != 0)
</code></pre>
<p><a href="https://stackoverflow.com/users/4722345/jballin">JBallin</a> cited <a href="https://en.wikipedia.org/wiki/De_Morgan's_laws" rel="nofollow noreferrer">De Morgan's Laws</a>:</p>
<pre><code>not(a and b) = (not a or not b)
</code></pre>
<p>To convert above into the desired answer:</p>
<pre><code>#convert using "DML"
return y % 4 == 0 and (not y % 100 == 0 or not y % 400 != 0)
#remove "not"s by switching "==" and "!="
return y % 4 == 0 and (y % 100 != 0 or y % 400 == 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Here's the other difference: SPEED AND EFFICIENCY.</strong></p>
<p>Aside from order of evaluation (already mentioned in other answers)...</p>
<p>Let's simplify the original expression
<code>year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)</code> to this:</p>
<p><code>A and (B or C)</code></p>
<p>If <code>A</code> is false, there is no reason to test <code>B</code> or <code>C</code> because <code>and</code> requires BOTH sides to be <code>true</code>.</p>
<p><strong>SHORT-CIRCUIT OPERATORS</strong></p>
<p>Logical operators <code>and</code> and <code>or</code> have a "short-circuit" effect in many languages, including Python, where only the left side is evaluated (See <a href="https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not</a>):</p>
<ul>
<li><code>and</code> short-circuits when the left side is <code>false</code> (because the right side cannot make the result be <code>true</code>)</li>
<li><code>or</code> short-circuits when the left side is <code>true</code> (because the right side cannot make the result be <code>false</code>)</li>
</ul>
<p><strong>WITH PARENTHESIS:</strong></p>
<p><code>A and (B or C)</code></p>
<ul>
<li>When <code>A</code> is <code>false</code>, the right side <code>(B or C)</code> doesn't get evaluated, saving CPU resources.</li>
<li>When <code>A</code> is <code>true</code>, <code>B</code> gets evaluated, but <code>C</code> only gets evaluated if <code>B</code> is false.</li>
</ul>
<p><strong>WITHOUT PARENTHESIS:</strong></p>
<p><code>A and B or C</code></p>
<ul>
<li>When <code>A</code> is <code>false</code>, <code>B</code> doesn't get evaluated, but <code>C</code> gets (needlessly) evaluated.</li>
<li>When <code>A</code> is <code>true</code>, <code>B</code> gets evaluated. If <code>B</code> is <code>false</code>, <code>C</code> also gets evaluated.</li>
</ul>
<p><strong>CONCLUSION:</strong>
Without parenthesis, <code>C</code> (the <code>year % 400</code> test) gets needlessly evaluated when <code>A</code> is false (the <code>year % 4</code> test). This is 75% of the time that the CPU could stop at <code>A</code>, but continues to do more math needlessly.</p>
<p><strong>MOST-EFFICIENT EXPRESSION:</strong></p>
<p>Use this instead:
<code>((year &amp; 3) == 0 &amp;&amp; ((year % 25) != 0 || (year &amp; 15) == 0))</code></p>
<p>This expression replaces modulo (slow division) with bitwise-AND (fast!) in two cases.</p>
<p>More details at: <a href="https://stackoverflow.com/a/11595914/733805">https://stackoverflow.com/a/11595914/733805</a></p>
</div>
<span class="comment-copy">The parentheses change the evaluation order instead of the default left-to-right. So you must actually have your reason for changing the order before planting them</span>
<span class="comment-copy">Leaving a comment does not mean I downvoted.</span>
<span class="comment-copy">Already stated in "Additional Info", does not answer question: specifically asking about Leap Year problem, not in general</span>
<span class="comment-copy">@JBallin Then I think you should restate your question, since this exactly answers the question as-asked.</span>
<span class="comment-copy">Last line shows how I can separate (b or c) logically! Also - <a href="https://en.wikipedia.org/wiki/De_Morgan's_laws" rel="nofollow noreferrer">De Morgan's Laws</a>: not (a and b) = not a or not b</span>
<span class="comment-copy">@JBallin The conversation seems to be getting a bit pedantic. Correct code is the code that A) produces the correct output, B) does so within the performance benchmarks of its function, and C) creates the least amount of technical debt. Where you put the parens in this statement affect exactly none of these things, and De Morgan's Laws are mathematical proofs not a style guide for Python.</span>
<span class="comment-copy">This was a theoretical/logical question (vs. in practice). I cited DML because your last line coupled with DML was the logical bridge I was looking for - wanted to share for future readers!</span>
<span class="comment-copy">I stated this in "Additional Info"</span>
<span class="comment-copy">@JBallin Updated with more logic explanation.</span>
<span class="comment-copy">Are you saying: "(divisible by 4) AND (not exception)"?</span>
<span class="comment-copy">@JBallin So we know that the year has to be evenly divisible by 4, that is the first part of the expression. Then we know that if it isn't evenly divided by 100 then it can also be a leap year if rule 1 holds true. So we need rule 1 to hold true regardless, with either rule 2 and 3 evaluating to true in order for the entire expression to be true. Thus, the whole expression -&gt; (#1) and (not #2 or 3).</span>
<span class="comment-copy">The parenthesis allows python's short-circuit AND operator (<a href="https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">docs.python.org/2/library/…</a>) to save CPU time. The <code>y % 400</code> calculation doesn't happen if <code>y % 4</code> is false. Also, get rid of some module (division) math... Use this instead: <code>((year &amp; 3) == 0 &amp;&amp; ((year % 25) != 0 || (year &amp; 15) == 0))</code> <a href="https://stackoverflow.com/a/11595914/733805">stackoverflow.com/a/11595914/733805</a></span>
