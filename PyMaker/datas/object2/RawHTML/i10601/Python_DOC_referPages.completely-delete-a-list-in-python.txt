<div class="post-text" itemprop="text">
<p>I'm using python 2, and trying to <strong>delete two lists</strong>.
Here is the code:</p>
<pre><code>test_data1 = [img for img in glob.glob("/location/of/images/*png")]
test_data0 = [img for img in glob.glob("/location/of/other_images/*png")]
test_data = test_data1 + test_data0
</code></pre>
<p>Every list of images contains millions of file-names, so I would prefer to delete the unnecessary lists after I created the <code>test_data</code> list. Just for make the code "easier" for the computer to run.</p>
<p>How can I do it?</p>
<p>I found few different ways, but no any of them refereed to memory issues. I'm not sure if  <code>test_data1=[]</code> actually delete the list completely from the memory.</p>
<p>also I'm afraid that the <code>test_data = test_data1 + test_data0</code> line only combine the hashes of the lists, and when I'll delete the two lists, <code>test_data</code> also become empty.</p>
<p>So.. what is the right way?</p>
<p>Really appreciate your help!
Sorry if the English is bad, I'm not a native speaker :P</p>
<p>Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use list concatenation to remove the need for the intermediate lists</p>
<pre><code>test_data = []
test_data += [img for img in glob.glob("/location/of/images/*png")]
test_data += [img for img in glob.glob("/location/of/other_images/*png")]
</code></pre>
<p>Also I'm not sure what the overall design of your program is, but there is a preference in Python to use iterators/generators instead of lists for just this reason. The less you have to keep in memory at once the better. See if you can redesign your program to just iterate on the fly instead of building up this large list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/tutorial/datastructures.html#more-on-lists" rel="nofollow"><code>extend()</code></a>. This will instantiate a list and populate it with those items, and extend will append that list to <code>test_data</code>. This way, the only place in memory that the lists exist in will be in <code>test_data</code>. As opposed to multiple instances. Whether that will have any tangible effect on performance can only be determined with testing/profiling. </p>
<pre><code>test_data = []
test_data.extend([img for img in glob.glob("/location/of/images/*png")])
test_data.extend([img for img in glob.glob("/location/of/other_images/*png")])
</code></pre>
<p>or using <a href="https://docs.python.org/3/reference/simple_stmts.html#the-del-statement" rel="nofollow"><code>del</code></a>, to clear the binding for that variable (<em>the garbage collector will delete the unused value</em>).</p>
<pre><code>l = [1,2,3,4,5]
del l  # l cleared from memory. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The option of adding new data to array as in other answers works, but if you want to keep having two arrays and adding them, consider using garbage collector.</p>
<p>Python has a garbage collector, that will delete the objects when they are no longer in use (i.e. when the object is unreachable and is not referenced any more). For example, if you have the program:</p>
<pre><code>a = [1, 2, 3, 4]
a = []
#  Here data [1, 2, 3, 4] is unreachable (unreferenced)
....
</code></pre>
<p>The garbage collector may eventually delete the object [1, 2, 3, 4]. You are not guaranteed when though. It happens automatically and you do not have to do anything with it.</p>
<p>However, if you are concerned about memory resources, you can force garbage collector to delete unreferenced objects using <code>gs.collect()</code> (do not forget to <code>import gc</code>). For example:</p>
<pre><code>import gc

a = [1, 2, 3, 4]
a = []
gc.collect()
#  Here it is guaranteed that the memory previously occupied by [1, 2, 3, 4] is free
</code></pre>
<p>So your program will turn into</p>
<pre><code>import gc

test_data1 = [img for img in glob.glob("/location/of/images/*png")]
test_data0 = [img for img in glob.glob("/location/of/other_images/*png")]
test_data = test_data1 + test_data0

test_data1 = []
test_data0 = []

gc.collect()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In fact, each list store <strong>references to string</strong>, but not strings itself.</p>
<p>I'm pretty sure, the used memory is about 1M x 4 (for 32 bits architecture) or 1M x 8 (for 64 bits architecture).</p>
<p>I suggest you to do profiling, see <a href="https://stackoverflow.com/questions/110259/which-python-memory-profiler-is-recommended">Which Python memory profiler is recommended?</a>.</p>
<p>You can use <a href="https://docs.python.org/2/library/glob.html" rel="nofollow noreferrer">glob.iglob</a> to have iterators instead of lists and chain the list with <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow noreferrer">itertools.chain</a>, as bellow:</p>
<pre><code>import itertools
import glob

iter1 = glob.iglob("/location/of/images/*png")
iter2 = glob.iglob("/location/of/other_images/*png")

test_data = [name for name in itertools.chain(iter1, iter2)]
</code></pre>
</div>
<span class="comment-copy">to delete something simply use the <code>del</code> keyword</span>
<span class="comment-copy">look at <a href="http://stackoverflow.com/questions/1400608/how-to-empty-a-list-in-python" title="how to empty a list in python">stackoverflow.com/questions/1400608/â€¦</a></span>
<span class="comment-copy">like <code>del test_data0</code>. also if you delete the 2 original lists (e.g <code>tset_data0</code> and <code>test_data1</code>) the final one (<code>test_data</code>) will remain intact because it is a new list</span>
<span class="comment-copy">In particular, <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">itertools.chain</a> might prove useful in this specific example.</span>
<span class="comment-copy">You say "remove the need for the intermediate lists" but you're still doing exactly that, creating intermediate lists.</span>
<span class="comment-copy">It's not like <code>[img for img in glob.glob("/location/of/images/*png")]</code> is not a list though. In terms of memory usage it is not different from original code at all</span>
