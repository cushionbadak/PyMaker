<div class="post-text" itemprop="text">
<p>in latest Python 2.7.x:</p>
<ol>
<li><p>Given any member variable inside the definition of a class, is the member variable always at the class level in the sense that it is a single variable shared by all the instances of the class?</p></li>
<li><p>In the definition of a class, how can I specify </p>
<ul>
<li>which member variables in the definition of  a class belong to the class and thus shared by all the instances of the class, and </li>
<li>which belong to a particular instance of the class and not to another instance of the class?</li>
</ul></li>
<li><p>How can I refer to a member variable of a class?</p>
<p>How can I refer to a member variable of an instance of a class?</p></li>
<li><p>Do the answers to the above questions appear somewhere in the official python language reference <a href="https://docs.python.org/2/reference/" rel="nofollow">https://docs.python.org/2/reference/</a>?
I can't find them there.</p></li>
</ol>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to use the <a href="https://docs.python.org/2/tutorial/classes.html#class-and-instance-variables" rel="nofollow">terminology</a> "class variable" and "instance variable" here, as that's the usual language in python.  </p>
<pre><code>class Foo(object):

    var1 = "I'm a class variable"

    def __init__(self, var2):
        self.var2 = var2  # var2 is an instance variable
</code></pre>
<p>The only scoping rule you really need to know in python is the lookup order for names - "LEGB", for Local, Enclosing, Global and Builtin. </p>
<p>The class scoped variable <code>var1</code> still has to be looked up by "get attribute", you can only access that by <code>Foo.var1</code> or <code>self.var1</code>.  Of course, you can also access it elsewhere inside the class definition block, but that is just an example usage from the "Local" scope.  </p>
<p>When you see <code>self.var1</code>, you can't immediately know whether it is an instance or a class variable (nor, in fact, if the name is bound to an object at all!).  You only know that get attribute is tried on the object itself before it's tried on the class.  </p>
<p>Indeed, an instance variable can shadow a class variable of the same name:  </p>
<pre><code>&gt;&gt;&gt; f1 = Foo(var2='f1_2')
&gt;&gt;&gt; f2 = Foo(var2='f2_2')
&gt;&gt;&gt; f2.var1
"I'm a class variable"
&gt;&gt;&gt; f2.var1 = "Boom!"  # this shadows the class variable
&gt;&gt;&gt; f1.var1, Foo.var1, f2.var1  # but: the class variable still exists
("I'm a class variable", "I'm a class variable", 'Boom!')
&gt;&gt;&gt; del f2.var1  # restores the name resolution on the Foo object
&gt;&gt;&gt; f2.var1
"I'm a class variable"
</code></pre>
<p>To complicate matters, we can write fancy code which makes class variables behave more like instance variables; a notable example are "fields" of an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping" rel="nofollow">ORM</a>.  For example in <a href="https://www.djangoproject.com/" rel="nofollow">Django</a>, you may define an integer field on the <a href="https://docs.djangoproject.com/en/1.10/topics/db/models/" rel="nofollow">model</a> class - however when you lookup that name on an instance of the model, you get an actual integer returned (not an <code>IntegerField</code> object).  </p>
<p>If you're interested in this advanced usage of attribute access, read up on the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptor protocol</a>.  For mundane classes you can safely ignore those details, but it's worth knowing that the usual resolution of instance variables and then class variables has <em>lower precedence</em> than any descriptors that may have been defined on the class.  </p>
</div>
<span class="comment-copy">In general, you cannot tell. But t's also not relevant.</span>
<span class="comment-copy">You might be looking for <a href="https://docs.python.org/2/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">"9.3.5. Class and Instance Variables"</a>, which covers most of what you're asking.</span>
<span class="comment-copy">How can you tell in what context? Programmatically inspecting it? Looking at source code?</span>
<span class="comment-copy">@Two  alternatively to how to tell, how can I specify?</span>
<span class="comment-copy">@Tim Generally speaking you add instance variables in the <code>__init__</code> method and class variables at class scope. It's a lot more complicated than that but as long as you're defining inside a normal instance function, it's largely going to produce an instance variable.</span>
<span class="comment-copy">thanks. is it correct that a variable of a instance can be defined only within the function body of <code>_init(self,...)</code>?</span>
<span class="comment-copy">@Tim It might be easier to think of where you can and can't create a class variable, as that's a good deal more restricted. Instance variables can be created in loads of places. You might want to read up on some more complex stuff like <a href="http://nedbatchelder.com/blog/201306/explaining_descriptors.html" rel="nofollow noreferrer">descriptors</a> and <a href="https://jakevdp.github.io/blog/2012/12/01/a-primer-on-python-metaclasses/" rel="nofollow noreferrer">metaclasses</a>, because it will give you a lot better idea of the underlying machinery and how it normally gets used.</span>
<span class="comment-copy">@Tim No, that's not correct.  You can create them outside of <code>__init__</code> too.</span>
