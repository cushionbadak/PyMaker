<div class="post-text" itemprop="text">
<p>I have a long string of data streaming continuously, which is generated by my C# script. I would like to use it as an input to Python Machine Learning model. </p>
<p>What is the fastest &amp; easiest way to implement this transmission? </p>
<p>I have found some possible options:</p>
<ol>
<li>Use sockets.</li>
<li>Use http.</li>
<li>Write data to a file from C#, and read the file from Python</li>
<li><p>Data as an argument, while python is running as a process in C# or</p></li>
<li><p><em>Something different?</em></p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Provided that these processes run on the same machine, I think when handling big chunks of data between process <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow">memory mapping</a> is the way to go.</p>
<p>In other case TCP/UDP sockets is a good option since they don't have the overhead of the Application layer which, HTTP for example, has </p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest option 6 Use Database like sqlite.</p>
<p>With this option you gain:</p>
<ul>
<li>Both running OnLine</li>
<li>Python set flags to these records in database when they processed.</li>
<li>You can complete operation latter if python off, and continue processing data.</li>
<li>You can add results from python to the database.</li>
<li>you have a history in database you may need latter for post processing.</li>
</ul>
</div>
<span class="comment-copy">Assuming they are on the same host <a href="https://msdn.microsoft.com/en-us/library/dd997372(v=vs.110).aspx" rel="nofollow noreferrer">Memory Mapped Files</a> would be one way or having python consume your C# application as a COM client.</span>
<span class="comment-copy">C# &amp; Python both run on the same machine. Since, the data is a "long" (256 number) string, do you still consider [option 4] is the best &amp; fastest option?</span>
<span class="comment-copy">6. use database like SQLite</span>
<span class="comment-copy">The data is a string containing 256 numbers, memory mapping seems like a good option for much bigger data. It's just my impression, any thoughts?</span>
<span class="comment-copy">256 characters are aprox. 2KB so mmap might be an overkill. What is your C# process output rate?</span>
<span class="comment-copy">My sample rate is 400 Hz in C# script</span>
<span class="comment-copy">400*256 strings/sec? That is 0,8MBps of processing</span>
<span class="comment-copy">yes! somewhere around..what about using stdin/stdout?</span>
