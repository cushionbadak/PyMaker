<div class="post-text" itemprop="text">
<p>I am trying to take user input from main.py and then use that information to produce an output on runAnalytics. The problem that I am running into is that sometimes, the user input will produce a value of None (maybe null, I don't know) when the dividen_yield is not available and then my whole program will stop. It works flawlessly when there is a dividend-yield though.</p>
<p>main.py</p>
<pre><code>import runAnalytics
from tkinter import *
import os
import centerWindow

loadApplication = Tk()
loadApplication.title("Stock Analytics")
loadApplication.geometry("1080x720")

label1 = Label(loadApplication, text = "Ticker")
input1 = Entry(loadApplication)

loadAnalytics = Button(loadApplication, text = "Load Analytics", command=lambda: runAnalytics.run(input1))

centerWindow.center(loadApplication)


label1.pack()
input1.pack()
loadAnalytics.pack()

loadApplication.mainloop()
</code></pre>
<p>runAnalytics.py</p>
<pre><code>from yahoo_finance import Share
from tkinter import *
import os
import centerWindow

def run(input1):
    ticker = Share(input1.get())
    loadAnalytics = Tk()
    loadAnalytics.title("$" + "ticker" +  "Data")
    loadAnalytics.geometry("1080x720")
    centerWindow.center(loadAnalytics)

    ticker.refresh()

    if ticker.get_dividend_yield() is None:
        ticker.get_dividend_yield == 0

    share_price    = Label(loadAnalytics, text = "Share Price: " + ticker.get_price()).pack()
    prev_open      = Label(loadAnalytics, text = "Previous Open: " + ticker.get_open()).pack()
    prev_close     = Label(loadAnalytics, text = "Previous CLose: " + ticker.get_prev_close()).pack()
    dividend_yield = Label(loadAnalytics, text = "Dividend Yield: " + ticker.get_dividend_yield()).pack()
    year_low       = Label(loadAnalytics, text = "52 Week Low: " + ticker.get_year_low()).pack()
    year_high      = Label(loadAnalytics, text = "52 Week High: " + ticker.get_year_high()).pack()
    volume         = Label(loadAnalytics, text = "Volume: " + ticker.get_volume()).pack()

    loadAnalytics.mainloop()
</code></pre>
<p>[Error] </p>
<blockquote>
<p>Exception in Tkinter callback
          Traceback (most recent call last):
            File "C:\Users\MyName\AppData\Local\Programs\Python\Python35-32\lib\tkinter__init__.py", line 1550, in <strong>call</strong>
              return self.func(*args)
            File "C:\Users\MyName\Documents\Python Projects\DataAnalytics\main.py", line 13, in 
              loadAnalytics = Button(loadApplication, text = "Load Analytics", command=lambda: runAnalytics.run(input1))
            File "C:\Users\MyName\Documents\Python Projects\DataAnalytics\runAnalytics.py", line 21, in run
              dividend_yield = Label(loadAnalytics, text = "Dividend Yield: " + ticker.get_dividend_yield()).pack()
          TypeError: 'int' object is not callable</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I tried to execute your code and got a different error than you got:</p>
<pre><code>Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/tkinter/__init__.py", line 1533, in __call__
    return self.func(*args)
  File "./main.py", line 15, in &lt;lambda&gt;
    loadAnalytics = Button(loadApplication, text = "Load Analytics", command=lambda: runAnalytics.run(input1))
  File "/Users/Sven/temp/stackexchange/python/runAnalytics.py", line 22, in run
    dividend_yield = Label(loadAnalytics, text = "Dividend Yield: " + ticker.get_dividend_yield()).pack()
TypeError: Can't convert 'NoneType' object to str implicitly
</code></pre>
<p>So I was not able to reproduce the traceback you got, but I changed your <code>Label</code> declaration in the <code>runAnalytics.py</code> file using Python's <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">Format Specification Mini-Language</a> giving (<em>double line indentation for direct copy and paste of the snippet</em>):</p>
<pre><code>    share_price    = Label(loadAnalytics,text='Share Price: {}'.format(ticker.get_price())).pack()
    prev_open      = Label(loadAnalytics,text='Previous Open: {}'.format(ticker.get_open())).pack()
    prev_close     = Label(loadAnalytics,text='Previous CLose: {}'.format(ticker.get_prev_close())).pack()
    dividend_yield = Label(loadAnalytics,text='Dividend Yield: {}'.format(ticker.get_dividend_yield())).pack()
    year_low       = Label(loadAnalytics,text='52 Week Low: {}'.format(ticker.get_year_low())).pack()
    year_high      = Label(loadAnalytics,text='52 Week High: {}'.format(ticker.get_year_high())).pack()
    volume         = Label(loadAnalytics,text='Volume: {}'.format(ticker.get_volume())).pack()
</code></pre>
<p>This made the code runnable without any errors on my system since the <code>.format()</code> statement does all type conversions to the desired string output if necessary:</p>
<p><a href="https://i.stack.imgur.com/8C2H6.png" rel="nofollow noreferrer"><img alt="GUI working" src="https://i.stack.imgur.com/8C2H6.png"/></a></p>
<p>Note that there is a small typo in the Label's text which I did not fix (<code>CLose</code> should be <code>Close</code>)</p>
</div>
<span class="comment-copy">Thank you so much, that worked flawlessly. If you don't mind me asking, why did adding .format work? Is something compiling differently by doing that?</span>
<span class="comment-copy">Also, I ran it again but deleted the brackets "{}" and it executed but nothing appeared. Why are the brackets needed? Sorry, I am just curious.</span>
<span class="comment-copy">The brackets are placeholders for the variables to be filled into the string. You can also numerate or name those placeholders which is really nice when you pass more than a single variable into a string and things might become a bit messy (take a look at the docs). Unfortunately, I am not completely sure how the format mini-language is working under the hood. However, the formal specification can be found in <a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101</a></span>
