<div class="post-text" itemprop="text">
<p>I want to find the name of the car which has maximum mpg.  I want to print 'Toyota' which has maximum mpg.  I want to do this in a Pythonic way.  I don't like to use pandas.</p>
<p>Here is my code:</p>
<pre><code>dataset=[]
f= open('auto-mpg-data.csv')
csv_f=csv.reader(f)
for row in csv_f:
    dataset.append(row)

#reading column
mpg=[]
for row in dataset:
    mpg.append(float(row[0]))
a=max(mpg)

for a in dataset:
    print(carname)
</code></pre>
<p>This is my data:</p>
<p><img alt="This is my data" src="https://i.stack.imgur.com/cLpp7.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple of ways to improve your code:</p>
<ol>
<li>When you are working with files, it's always best to <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow"><code>close()</code></a> your file after working with it, or wrap your snippet of code in a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow"><code>with</code></a> block.  This closes your file automatically.</li>
<li>You are iterating multiple times through the lines in your file, which isn't necessary.  There are much more performant approaches to solve your problem.</li>
</ol>
<p>This code worked for me:</p>
<pre><code>import csv

with open('auto-mpg-data.csv','r') as f:
    csv_f = list(csv.reader(f))

    best_mpg = 0
    best_row = 0

    for i,j in enumerate(csv_f):
        if i == 0:
            continue

        best_mpg = max(best_mpg, float(j[0]))

        if best_mpg == float(j[0]):
            best_row = i

print (csv_f[best_row][3])

# Output:
# 'Toyota'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, every object that supports iteration, can be converted directly to a list using the <code>list</code> function. Hence instead of</p>
<pre><code>for row in csv_f:
    dataset.append(row)
</code></pre>
<p>you can do:</p>
<pre><code>dataset = list(csv_f)
</code></pre>
<p>Next, since <code>dataset</code> is a list of rows (each row is a list), you can use Python's <code>max</code> function to find the maximum row provided that the key to check against is the float value of the first number on each row, like so:</p>
<pre><code>max_row = max(dataset, key=lambda row: float(row[0]))    
</code></pre>
<p>max_row holds the row with maximum mpg</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplies way:</p>
<pre><code>with open('auto-mpg-data.csv') as fo:
   reader = csv.reader(fo)
   next(reader)  # skip the header
   biggest_row = max(reader, key=lambda row: float(row[0]))

print(biggest_row[3])  # or whatever the index is
</code></pre>
<p>Note that if your csv contains an incorrect data then this will fail so in order to make it fault-tolerant you would have to write a manual loop over <code>reader</code> instead of <code>max</code> and validate each <code>row</code> inside.</p>
<p>Also if you've already loaded the file then you can use <code>next</code> and <code>max</code> on lists as follows:</p>
<pre><code>reader = iter(dataset)
next(reader)  # skip the header
biggest_row = max(reader, key=lambda row: float(row[0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You mentioned that you don't like <code>pandas</code>, but, for completeness sake, here is how you could have used <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow"><code>pandas.read_csv()</code></a> to read the CSV file into a <em>dataframe</em> (which is quite <em>convenient when dealing with tabular data</em>) and then get the <code>carname</code> value for the maximum <code>mpg</code> value:</p>
<pre><code>import pandas as pd

df = pd.read_csv('cars.csv', delim_whitespace=True)
print(df.loc[df['mpg'].idxmax()]['carname'])
</code></pre>
<p>Prints <code>'Toyota'</code> for the provided sample CSV.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using for loop iterator...</p>
<pre><code>&gt;&gt;&gt; mpg = [12,34,40.5,6]
&gt;&gt;&gt; idx,maxMpg = 0,0
&gt;&gt;&gt; for n,v in enumerate(mpg):
...  if v&gt;maxMpg: idx,maxMpg = n,v
...
&gt;&gt;&gt; idx
2
&gt;&gt;&gt; maxMpg
40.5
&gt;&gt;&gt; carnames = ['ford','bmw','toyota','bugatti']
&gt;&gt;&gt; carnames[idx]
'toyota'
&gt;&gt;&gt;
</code></pre>
<p>Using list comprehensions:...</p>
<pre><code>&gt;&gt;&gt; maxMpg = max(mpg)
&gt;&gt;&gt; maxMpgId = [maxMpg == m for m in mpg]
&gt;&gt;&gt; maxMpgId
[False, False, True, False]
&gt;&gt;&gt; carname = [carnames[n] for n,m in enumerate(mpg) if maxMpg == m]
&gt;&gt;&gt; carname
['toyota']
</code></pre>
<p>Nasty one liner...</p>
<pre><code>carname = [carnames[n] for n,m in enumerate(mpg) if max(mpg) == m]
</code></pre>
</div>
<span class="comment-copy">OP clearly stated that he doesn't want to use pandas. Not to mention that installing pandas for such a simple task is truely an overkill.</span>
<span class="comment-copy">@freakish Python's PyPI rich database of third-party packages is one of the greatest things about the language. Not to mention having a dataframe being convenient to work with a tabular data such as in this case. If the OP does not want to use pandas, it is perfectly okay. But for others coming to this thread, this may be a good option. I'll add a note about that. Thanks for putting a comment, explicit is better than implicit :)</span>
