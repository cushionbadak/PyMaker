<div class="post-text" itemprop="text">
<p>I have an input value <code>val</code> and a list of functions to be applied in the order:</p>
<pre><code>funcs = [f1, f2, f3, ..., fn]
</code></pre>
<p>How to apply elegantly and not writing</p>
<pre><code>fn( ... (f3(f2(f1(val))) ... )
</code></pre>
<p>and also not using for loop:</p>
<pre><code>tmp = val
for f in funcs:
    tmp = f(tmp)
</code></pre>
<p>Thanks Martijn for the awesome answer. There's some reading I found: <a href="https://mathieularose.com/function-composition-in-python/" rel="noreferrer">https://mathieularose.com/function-composition-in-python/</a> .</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/functions.html#reduce" rel="noreferrer"><code>reduce()</code> function</a>:</p>
<pre><code># forward-compatible import
from functools import reduce

result = reduce(lambda res, f: f(res), funcs, val)
</code></pre>
<p><code>reduce()</code> applies the first argument, a callable, to each element taken from the second argument, plus the accumulated result so far (as <code>(result, element)</code>). The third argument is a starting value (the first element from <code>funcs</code> would be used otherwise).</p>
<p>In Python 3, the built-in function was moved to the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="noreferrer"><code>functools.reduce()</code> location</a>; for forward compatibility that same reference is available in Python 2.6 and up.</p>
<p>Other languages may call this <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)#Folds_in_various_languages" rel="noreferrer">folding</a>.</p>
<p>If you need <em>intermediate</em> results for each function too, use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate()</code></a> (only from Python 3.3 onwards for a version that takes a function argument):</p>
<pre><code>from itertools import accumulate, chain
running_results = accumulate(chain(val, funcs), lambda res, f: f(res))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>MartijnPieters answer is excellent. The only thing I would add is that this is called <a href="https://en.wikipedia.org/wiki/Function_composition" rel="nofollow noreferrer">function composition</a></p>
<p>Giving names to these generics means you can use them whenever the need arises</p>
<pre><code>from functools import reduce

def id(x):
  return x

def comp(f,g):
  return lambda x: f(g(x))

def compose(*fs):
  return reduce(comp, fs, id)

# usage
# compose(f1, f2, f3, ..., fn) (val)

print(compose (lambda x: x + 1, lambda x: x * 3, lambda x: x - 1) (10))
# = ((10 - 1) * 3) + 1
# = 28
</code></pre>
<p>Sometimes you want it to look nicer though -</p>
<pre><code>def seq (x): return lambda k: seq (k (x))

def fn1 (x): return x - 1
def fn2 (x): return x * 3
def fn3 (x): return x + 1

seq (10) (fn1) (fn2) (fn3) (print) # 28
         # 10    9    27    28
</code></pre>
<p>And sometimes you want more flexibility -</p>
<pre><code>from operator import add, mul, sub

def seq (x):
  return lambda k, *v: seq (k (x, *v))

seq (10) (sub, 1) (mul, 3) (add, 1) (print) # 28
          # 10       9        27       28

seq (1) (add, 2) (add, 3) (add, 4) (add, 5) (print) # 15
        # 1        3        6        10       15

sum = seq(0)
for x in range(10):
  sum = sum (add, x)
sum (print) # 45
</code></pre>
</div>
<span class="comment-copy">Perfect answer! I love OCaml's <code>List.fold_left</code> and in Python we have <code>functools.reduce()</code> :)</span>
<span class="comment-copy">@Viet: see the <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)#Folds_in_various_languages" rel="nofollow noreferrer">Wikipedia list of <i>fold</i> in various programming languages</a>.</span>
