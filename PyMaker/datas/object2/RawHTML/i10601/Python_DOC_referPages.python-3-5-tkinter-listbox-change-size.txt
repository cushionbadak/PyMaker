<div class="post-text" itemprop="text">
<p>Could anyone advise me what's wrong go with the following code? I try to build a tkinker.listbox with dimensions can be changed with .config command, yet failed. Instead, it produce the error of "AttributeError: 'MovListbox' object has no attribute 'tk'" The code is attached below for your reference. </p>
<p>Many thanks. </p>
<pre><code>import tkinter

def test():
    root = tkinter.Tk()

    list = ['  1','2','  3','4','5','  6','7','8','  9','10']
    a = MovListbox(root, list)
    a._setup_style(200, 200, EXTENDED)

class MovListbox(tkinter.Listbox):    

    def __init__(self, master=None, inputlist=None):
#        super(MovListbox, self).__init__()

        global NewsClassify_catList
        NewsClassify_catList = tkinter.Listbox(master)
        NewsClassify_catList.grid(row = 0 , column = 0, columnspan=2, sticky=N)    

        '''populate the news category onto the listbox'''
        for i in range (0, inputlist.__len__()):
            NewsClassify_catList.insert(END, inputlist[i])

        master.mainloop()

    def _setup_style(self, height=100, width=100, mode=EXTENDED):
        self.config(height=height, width=width, selectmode=mode)

if __name__ == '__main__':
    test()     
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've made a few modifications to your code; it's probably not exactly what you want, but you should find it helpful.</p>
<p>The Listbox width and height options are not pixel measurements; they specify dimensions in terms of characters, so <code>height=12</code> makes the Listbox 12 text lines high, and <code>width=40</code> makes the Listbox 40 characters wide.  </p>
<pre><code>import tkinter as tk

def test():
    root = tk.Tk()
    lst = ['  1', '2', '  3', '4', '5', '  6', '7', '8', '  9', '10']
    a = MovListbox(root, lst)
    a.grid(row=0, column=0, columnspan=2, sticky=tk.N)
    a.setup_style(12, 40, tk.EXTENDED)
    root.mainloop()

class MovListbox(tk.Listbox):
    def __init__(self, master=None, inputlist=None):
        super(MovListbox, self).__init__(master=master)

        # Populate the news category onto the listbox
        for item in inputlist:
            self.insert(tk.END, item)

    def setup_style(self, height=10, width=20, mode=tk.EXTENDED):
        self.config(height=height, width=width, selectmode=mode)

if __name__ == '__main__':
    test()
</code></pre>
<p>If you like, you can remove the <code>a.setup_style(12, 40, tk.EXTENDED)</code> call in <code>test()</code> and instead do</p>
<pre><code>self.setup_style(12, 40, tk.EXTENDED)
</code></pre>
<p>at the end of the <code>MovListbox.__init__()</code> method.</p>
<p>I've changed your <code>list</code> variable to <code>lst</code>. <code>list</code> is not a good choice for a variable name as that shadows the built-in <code>list</code> type, which can be confusing, and it can also lead to mysterious bugs.</p>
<hr/>
<p>The <code>super</code> built-in function is used to access methods of the parent class. From <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">the docs</a>:</p>
<blockquote>
<p><strong>super([type[, object-or-type]])</strong></p>
<p>Return a proxy object that delegates method calls to a parent or
  sibling class of type. This is useful for accessing inherited methods
  that have been overridden in a class. The search order is the same as that
  used by getattr() except that the type itself is skipped. </p>
</blockquote>
<p>Thus</p>
<pre><code>super(MovListbox, self).__init__(master=master)
</code></pre>
<p>says to call the <code>__init__</code> method of the parent class of the MovListbox class, in other words, the <code>tk.Listbox.__init__</code> method. We need to do this because MovListbox is derived from tk.Listbox and we need all the usual Listbox stuff to be set up for our MovListbox instance before we start doing extra stuff with it, like inserting the strings from <code>inputlist</code>.</p>
<p>If a derived class doesn't define its own <code>__init__</code> method then the  <code>__init__</code> method from the parent is called automatically when you create an instance of the derived class. But because we've defined an <code>__init__</code> method for MovListbox that new <code>__init__</code> gets called instead. So to get the usual Listbox initialization performed for MovListbox we need to manually call Listbox's <code>__init__</code>, and the customary way to do that gracefully is to use <code>super</code>. </p>
<p>Actually, in Python 3, that <code>super</code> call can be simplified:</p>
<pre><code>super().__init__(master)
</code></pre>
<p>The form I used earlier is necessary in Python 2. However, <code>super</code> only works on new-style classes (the only kind of class that Python 3 supports), but unfortunately Python 2 Tkinter uses the ancient old-style classes for its widgets, and calling <code>super</code> on such classes raises a <code>TypeError</code> exception. :( When working with old-style classes we have to do the call by explicitly specifying the parent class, like this:</p>
<pre><code>tk.Listbox.__init__(self, master)
</code></pre>
<p>That syntax is also valid in Python 3, but it's generally preferred to use <code>super</code> when it's available.</p>
</div>
<span class="comment-copy">I'm not really familiar with Tkinter, but I don't think you're supposed to use the <code>_setup_style</code> method. Attributes starting with an underscore aren't usually considered part of the public api. Also, do you realize that <code>a._setup_style</code> isn't reached until the window closes because you're doing <code>master.mainloop()</code> inside the <code>MovListBox</code> constructor?</span>
<span class="comment-copy">Thanks Rawing for comments. A good reminder of putting the mainloop outside. I have done that and also removed the underscore before the _setup_style (i.e., to setup_style). But the attribute error message still shows. I am wondering if the problem is about how to tell the computer to locate the Listbox to be config, i.e., self.config(height=height, width=width, selectmode=mode)) Anyone has ideas?</span>
<span class="comment-copy">Oops, I just realized that <code>_setup_style</code> is your own function, not a Tkinter one.</span>
<span class="comment-copy">I'm not quite sure what you're trying to do. Why are you creating another Listbox (NewsClassify_catList) inside your MovListbox? And why aren't you putting the MovListbox into your root window?</span>
<span class="comment-copy">@ PM 2Ring: Thanks for the comments. It's only a version simplified for asking question here. Actually the listbox is part of a bigger program. For simplicity, I put Listbox widget in another class for calling in the main syntax. As I am a newbie to Python, so I am also trying to write class structure. If there is any more simple way to write this in class structure and solve the problem of config. Please let me know.</span>
<span class="comment-copy">Thanks a lot. That's exactly what I am looking for. Seems like you solved the problem by adding "super(MovListbox, self).__init__(master=master)", which I don't know what it is. Could you explain that in more detail?</span>
<span class="comment-copy">@CL.L: I've added some more detail about <code>super</code>. If my answer has helped you, please consider <a href="http://meta.stackexchange.com/a/5235">accepting</a> it.</span>
<span class="comment-copy">cool, very detailed explanation. I understand now, thank you so much!</span>
