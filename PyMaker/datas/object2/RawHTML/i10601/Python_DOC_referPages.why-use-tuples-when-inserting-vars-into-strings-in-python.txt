<div class="post-text" itemprop="text">
<p>I feel like this would have been asked before, but could not find anything.</p>
<p>In python, if you want to insert a var into a string, there are (at least) two ways of doing so.</p>
<p>Using the <code>+</code> operator</p>
<pre><code>place = "Alaska"
adjective = "cold"
sentence = "I live in "+place+"! It's very "+adjective+"!"
# "I live in Alaska! It's very cold!"
</code></pre>
<p>And using a tuple</p>
<pre><code>place = "Houston"
adjective = "humid"
sentence = "I live in %s! It's very %s!" % (place, adjective)
# "I live in Houston! It's very humid!"
</code></pre>
<p>Why would one use the tuple method over using <code>+</code>? The tuple format seems a lot more obfuscated. Does it provide an advantage in some cases?</p>
<p>The only advantage I can think of is you don't have to cast types with the latter method, you can use <code>%s</code> to refer to <code>a</code>, where <code>a = 42</code>, and it will just print it as a string, as opposed to using <code>str(a)</code>. Still that hardly seems like a significant reason to sacrifice readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>string % (value, value, ..)</code> syntax is called a <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow"><em>string formatting operation</em></a>, and you can also apply a <em>dictionary</em>, it is not limited to just tuples. These days you'd actually want to use the newer <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a> as it expands on the offered functionality.</p>
<p>String formatting is about much more than just inserting strings in-between other strings. You'd use it because</p>
<ul>
<li><p>you can configure each interpolation, based on the type of object you are trying to insert into the string. You can configure how floating point numbers are formatted, how dates are formatted (with <code>str.format()</code>), etc.</p></li>
<li><p>you can adjust how the values are padded or aligned; you could create columns with values all neatly right-aligned in fixed-width columns, for example.</p></li>
<li><p>especially with <code>str.format()</code>, the various aspects you can control can either be hardcoded in the string template, or taken from additional variables (the older <code>%</code> string formatting operation only allows for field width and numeric precision can be made dynamic).</p></li>
<li><p>you can define and store the string templates independently, applying values you want to interpolate separately:</p>
<pre><code>template = 'Hello {name}! How do you find {country} today?'
result = template.format(**user_information)
</code></pre>
<p>What fields are available can be larger than what you actually use in the template.</p></li>
<li><p>it can be faster; each <code>+</code> string concatenation has to create a new string object. Add up enough <code>+</code> concatenations and you end up creating a lot of new string objects that are then discarded again. String formatting only has to create one final output string.</p></li>
<li><p>string formatting is actually far more readable than using concatenation, as well as being more maintainable. Try to use <code>+</code> or string formatting on a <em>multiline</em> string with half a dozen different values to be interpolated. Compare:</p>
<pre><code>result = '''\
Hello {firstname}!

I wanted to send you a brief message to inform you of your updated
scores:

    Enemies engaged: {enemies.count:&gt;{width}d}
    Enemies killed:  {enemies.killed:&gt;{width}d}
    Kill ratio:      {enemies.ratio:&gt;{width}.2%}
    Monthly score:   {scores.month_to_date:0{width}d}

Hope you are having a great time!

{additional_promotion}
'''.format(width=10, **email_info)
</code></pre>
<p>with</p>
<pre><code>result = '''\
Hello ''' + firstname + '''!

I wanted to send you a brief message to inform you of your updated
scores:

    Enemies engaged: ''' + str(email_info['enemies'].count).rjust(width) + '''
    Enemies killed:  ''' + str(email_info['enemies'].killed).rjust(width) + '''
    Kill ratio:      ''' + str(round(email_info['enemies'].ratio * 100, 2)).rjust(width - 1) + '''%
    Monthly score:   ''' + str(email_info['scores'].month_to_date).zfill(width) + '''

Hope you are having a great time!

''' + email_info['additional_promotion'] + '''
'''
</code></pre>
<p>Now imagine having to re-arrange the fields, add some extra text and a few new fields. Would you rather do that in the first or second example?</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>For a lot of reasons. One good reason is that not always you can or want to use separated strings, because they are already neatly arranged in a list or tuple:</p>
<pre><code>strings = ["one", "two", "three"]

print "{}, {} and {}".format(*strings)

&gt; one, two and three
</code></pre>
</div>
<span class="comment-copy">Because string formatting is far more powerful. Now insert floating point values and configure the precision. Or add variable-width alignments.</span>
<span class="comment-copy">Here is my favorite website on the subject: <a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></span>
<span class="comment-copy">See also <a href="http://stackoverflow.com/questions/376461/string-concatenation-vs-string-substitution-in-python" title="string concatenation vs string substitution in python">stackoverflow.com/questions/376461/â€¦</a></span>
<span class="comment-copy">Yes, you should also  note that using <code>%</code> is "the old way", there is a newer way: <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">docs.python.org/3/library/string.html#formatstrings</a></span>
<span class="comment-copy">You can also define the tuple somewhere else in the code and then you can have <code>"I live in %s! It's very %s!" % params</code>.</span>
<span class="comment-copy">I did not know about the new way of doing this that allowed you to insert a string using {}, that really does help with readability. Thanks a lot. I'm still a little confused as to the format being use there though. It looks like you are grabbing, the var <code>count</code> from the object <code>enemies</code>, but then what does the <code>**emailinfo</code> refer to?</span>
<span class="comment-copy">@BrianC: <code>emailinfo</code> is a dictionary; each key-value is passed into <code>str.format()</code> as a separate keyword argument. So <code>enemies</code> is one key in the dictionary. String formatting lets you access attributes or index lists or access keys in a mapping too; <code>.count</code> is an attribute on the <code>enemies</code> value here (so it's not a string, it's an object with attributes here).</span>
