<div class="post-text" itemprop="text">
<p>In Python 2.7, when defining a class, how can we define </p>
<ul>
<li><p>member functions at the level of class, i.e. its first argument is the class object, not an instance object of the class</p></li>
<li><p>member functions at the level of the class' instance objects, i.e. its first argument is an instance object of the class, not the class object.</p></li>
</ul>
<p>When using a given class, how can we tell if a member function is at the level of class or at the level of the class' instance objects?</p>
<p>For example, in the Python standard library, the <code>setUp()</code> from <code>TestCase</code> is called for each instance object of <code>TestCase</code>, i.e. at the level of instance objects, while 
class level fixtures are implemented in <code>TestSuite</code>. When the test suite encounters a test from a new class then <code>tearDownClass()</code> from the previous class (if there is one) is called, followed by <code>setUpClass()</code> from
the new class.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The @classmethod form is a function decorator – see the description of
  function definitions in Function definitions for details.</p>
<p>It can be called either on the class (such as C.f()) or on an instance
  (such as C().f()). The instance is ignored except for its class. If a
  class method is called for a derived class, the derived class object
  is passed as the implied first argument.</p>
<p>Class methods are different than C++ or Java static methods. If you
  want those, see staticmethod() in this section.</p>
<p>For more information on class methods, consult the documentation on
  the standard type hierarchy in The standard type hierarchy.</p>
</blockquote>
<p><a href="http://DOCUMENT" rel="nofollow">https://docs.python.org/2/library/functions.html#classmethod</a></p>
<pre><code>class A:
...    message = "class message"
... 
...    @classmethod
...    def classLevel(cls):
...       print(cls.message)
... 
...    def instanceLevel(self, msg):
...       self.message = msg
...       print(self.message)
&gt;&gt;&gt; a= A()
&gt;&gt;&gt; a.instanceLevel('123')
123
&gt;&gt;&gt; A.classLevel()
class message
&gt;&gt;&gt; a.classLevel()
class message
&gt;&gt;&gt; A.instanceLevel()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method instanceLevel() must be called with A instance as first argument (got nothing instead)


    A.__dict__
{'classLevel': &lt;classmethod object at 0x4E974BB0&gt;, '__module__': '__main__', 'instanceLevel': &lt;function instanceLevel at 0x550C8530&gt;, 'message': 'class message', '__doc__': None}
</code></pre>
</div>
<span class="comment-copy">are you looking for @classmethod ?</span>
<span class="comment-copy">Thanks. Maybe. Is <code>@classmethod</code> mentioned in some document at Python official website, when discussing classes and instance objects in general? I don't find <code>@classmethod</code> in the Python Language Reference, and the Python Tutorial.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#classmethod</a>.  They are also mentioned in the very last paragraphs of this section - <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> . ... also check out the <code>instance method</code> heading of that link.</span>
