<div class="post-text" itemprop="text">
<p>I am using Argparse on python to do a script on command line. I have this for my script:</p>
<pre><code>parser = argparse.ArgumentParser(prog = 'manageAdam')
parser.add_argument("-s", action='store_true', default=False, help='Shows configuration file')

parser.add_argument("d", type=str, help="device")
parser.add_argument("o", type=str, help="operation")
parser.add_argument("-v", "--value", type=int, nargs='*', help="value or list to send in the operation")
</code></pre>
<p>I am looking that if I call manageAdam -s it would work and don't ask for the positional arguments, something like the -h, which can be called without any other positional argument that is defined. Is it possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no built-in way to do this. You <em>might</em> be able to achieve something by writing some custom <a href="https://docs.python.org/3/library/argparse.html#argparse.Action" rel="nofollow"><code>Action</code></a> classes that keep track on the parser about their state, but I believe it will become quite messy and buggy.</p>
<p>I believe the best bet is to simply improve your UI. The <code>-s</code> is <strong>not</strong> an option. It's a separate command that completely alters how your script executes. In such cases you should use the <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers" rel="nofollow"><code>subparsers</code></a> functionality which allows to introduce sub-commands. This is a better interface then the one you thought, and is used by a lot of other tools (e.g. Git/mercurial).</p>
<p>In this case you'd have a <code>config</code> command to handle the configuration and a <code>run</code> (or how you want to call it) command to perform the operations on the device:</p>
<pre><code>subparsers = parser.add_subparsers(dest='command')
parser_config = subparsers.add_parser('config', help='Configuration')
parser_run = subparsers.add_parser('run', help='Execute operation on device')

parser_run.add_argument('d',  type=str, ...)
parser_run.add_argument('o',  type=str, ...)
parser_run.add_argument('-v', type=int, nargs='*', ...)

# later:

args = parser.parse_args()
if args.command == 'config':
    print('Configuration')
else:
    print('Run operation')
</code></pre>
<p>Used from the command line as:</p>
<pre><code>$ manageAdam config
# or
$ manageAdam run &lt;device&gt; &lt;operation&gt; &lt;values...&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there are no such way.</p>
<p>You can make all arguments optional and set default value to <code>None</code> then perform check that all of them aren't <code>None</code> otherwise raise <code>argparse.ArgumentError</code>, if <code>manageAdam</code> provided skip check for other arguments.</p>
</div>
<span class="comment-copy"><code>-h</code> has a special Action class, one that prints the help and then does a system exit.  That's how it blocks other parameters.  There isn't a clean way of just exiting the parser from a specific action.</span>
<span class="comment-copy">I am using this solution as I think that the subparsers builds my script in a more intuitive way. But just if anyone else needs other way of doing it, using the nargs='?' option makes the positional arguments not mandatory so then it can be done with further checking after parsing the args. Thanks for the help!</span>
