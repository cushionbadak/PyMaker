<div class="post-text" itemprop="text">
<p><strong>The Problem</strong></p>
<p>Imagine I am stood in an airport. Given a geographic coordinate pair, how can one efficiently determine which airport I am stood in?</p>
<p><strong>Inputs</strong></p>
<ul>
<li>A coordinate pair <code>(x,y)</code> representing the location I am stood at.</li>
<li>A set of coordinate pairs <code>[(a1,b1), (a2,b2)...]</code> where each coordinate pair represents one airport.</li>
</ul>
<p><strong>Desired Output</strong></p>
<p>A coordinate pair <code>(a,b)</code> from the set of airport coordinate pairs representing the closest airport to the point <code>(x,y)</code>.</p>
<p><strong>Inefficient Solution</strong></p>
<p>Here is my inefficient attempt at solving this problem. It is clearly linear in the length of the set of airports.</p>
<pre><code>shortest_distance = None
shortest_distance_coordinates = None

point = (50.776435, -0.146834)

for airport in airports:
    distance = compute_distance(point, airport)
    if distance &lt; shortest_distance or shortest_distance is None:
        shortest_distance = distance
        shortest_distance_coordinates = airport
</code></pre>
<p><strong>The Question</strong></p>
<p>How can this solution be improved? This might involve some way of pre-filtering the list of airports based on the coordinates of the location we are currently stood at, or sorting them in a certain order beforehand.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your coordinates are unsorted, your search can only be improved slightly assuming it is <code>(latitude,longitude)</code> by filtering on latitude first as for earth</p>
<blockquote>
<p>1 degree of latitude on the sphere is 111.2 km or 69 miles</p>
</blockquote>
<p>but that would not give a huge speedup.</p>
<p>If you sort the airports by latitude first then you can use a binary search for finding the first airport that <em>could</em> match (<code>airport_lat &gt;= point_lat-tolerance</code>) and then only compare up to the last one that <em>could</em> match (<code>airport_lat &lt;= point_lat+tolerance</code>) - but take care of 0 degrees equaling 360. While you cannot use that library directly, the sources of <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow">bisect</a> are a good start for implementing a binary search.</p>
<p>While technically this way the search is still O(n), you have much fewer actual distance calculations (depending on tolerance) and few latitude comparisons. So you will have a huge speedup.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from scipy import spatial
&gt;&gt;&gt; airports = [(10,10),(20,20),(30,30),(40,40)]
&gt;&gt;&gt; tree = spatial.KDTree(airports)
&gt;&gt;&gt; tree.query([(21,21)])
(array([ 1.41421356]), array([1]))
</code></pre>
<p>Where 1.41421356 is the distance between the queried point and the nearest neighbour and 1 is the index of the neighbour.</p>
<p>See: <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query" rel="noreferrer">http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query</a></p>
</div>
<div class="post-text" itemprop="text">
<p>From this <a href="https://codereview.stackexchange.com/questions/28207/finding-the-closest-point-to-a-list-of-points">SO question</a>:</p>
<pre><code>import numpy as np
def closest_node(node, nodes):
    nodes = np.asarray(nodes)
    deltas = nodes - node
    dist_2 = np.einsum('ij,ij-&gt;i', deltas, deltas)
    return np.argmin(dist_2)
</code></pre>
<p>where <code>node</code> is a tuple with two values (x, y) and <code>nodes</code> is an array of tuples with two values (<code>[(x_1, y_1), (x_2, y_2),]</code>)</p>
</div>
<span class="comment-copy">It can not be improved significantly without any additional knowledge of the problem (i.e. the fact that there is at least one airport within the same langtitude might've helped). To filter airports, you will still need to look at each one of them, so your complexity will stay O(n) (unless, of course, you are doing something terribly complex in <code>compute_distance()</code>, which I doubt since you are probably just doing Haversine distance)</span>
<span class="comment-copy">See <a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search" rel="nofollow noreferrer">en.wikipedia.org/wiki/Nearest_neighbor_search</a> for an overview of algorithms and data structures.</span>
<span class="comment-copy">@DmitryTorba Thanks for your comment. Is this necessarily true? What if we sort the list beforehand in a specific way?</span>
<span class="comment-copy">@NPE Thanks for the link, I will have a look to see if there's any stuff that can be applied here.</span>
<span class="comment-copy">Check out the answer to this problem using scipy.spatial.KDTree, a datastructure allowing you to search n-dimensional points in n logn.  <a href="http://stackoverflow.com/questions/10818546/finding-index-of-nearest-point-in-numpy-arrays-of-x-and-y-coordinates" title="finding index of nearest point in numpy arrays of x and y coordinates">stackoverflow.com/questions/10818546/â€¦</a></span>
<span class="comment-copy">This is the most promising answer so far. Implementation-wise, I am storing my airports in an SQL database. So I could perform the tolerance queries at the SQL level and then run the distance algorithm on the results.</span>
<span class="comment-copy">That would be the best as it ist much faster that way. (works best if you have an index on the latitude)</span>
<span class="comment-copy">This code doesn't make much sense here on it's own. It looks like it's trying to optimise the distance calculation. I'm looking for a way to whittle down the list of airports quickly, either by pre-sorting or pre-filtering. Hope this makes sense.</span>
<span class="comment-copy">You asked <i>How can this solution be improved?</i> and I answered with a piece of code that goes <i>better</i>. Then, if you want some filtering, it's <i>another kind</i> of improvement (or not), which doesn't make mine less. @Kieran</span>
<span class="comment-copy">I deliberately omitted the detail of <code>compute_distance</code> - we assume we have an efficient method of computing the distance :)</span>
<span class="comment-copy">@Kieran, all right. I will keep my answer here, just in case it is useful for other users.</span>
