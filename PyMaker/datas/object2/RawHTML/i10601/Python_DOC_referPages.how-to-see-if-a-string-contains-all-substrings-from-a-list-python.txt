<div class="post-text" itemprop="text">
<p>Here's the scenario:</p>
<p>I have a long list of time-stamped file names with characters before and after the time-stamp.</p>
<p>Something like this: <code>prefix_20160817_suffix</code></p>
<p>What I want is a list (which will ultimately be a subset of the original list) that contains file names with specific prefixes, suffixes, and parts of the timestamp. These specific strings are already given in a list. Note: <strong>this "contains" list might vary in size.</strong></p>
<p>For example: <code>['prefix1', '2016', 'suffix']</code> or <code>['201608', 'suffix']</code></p>
<p>How can I easily get a list of file names that contain <strong>every</strong> element in the "contains" array?</p>
<p>Here's some pseudo code to demonstrate what I want:</p>
<pre><code>for each fileName in the master list:
    if the fileName contains EVERY element in the "contains" array:
        add fileName to filtered list of filenames
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd compile the list into a <a href="https://docs.python.org/2/library/fnmatch.html" rel="nofollow"><code>fnmatch</code> pattern</a>:</p>
<pre><code>import fnmatch

pattern = '*'.join(contains)
filetered_filenames = fnmatch.filter(master_list, pattern)
</code></pre>
<p>This basically concatenates all strings in <code>contains</code> into a glob pattern with <code>*</code> wildcards in between. This assumes the order of <code>contains</code> is significant. Given that you are looking for prefixes, suffixes and (parts of) dates in between, that's not that much of a stretch.</p>
<p>It is important to note that if you run this on an OS that has a case-insensitive filesystem, that <code>fnmatch</code> matching is also case-insensitive. This is usually exactly what you'd want in that case.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for something like that (using list comprehension and <code>all()</code>:</p>
<pre><code>&gt;&gt;&gt; files = ["prefix_20160817_suffix", "some_other_file_with_suffix"]
&gt;&gt;&gt; contains = ['prefix', '2016', 'suffix']
&gt;&gt;&gt; [ f for f in files if all(c in f for c in contains) ]
['prefix_20160817_suffix']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work for you.</p>
<pre><code>filtered_list = []

for file_name in master_list:
    for element in contains_array:
        if element not in file_name:
            break
        filtered_list.append(file_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your pseudocode was not far from a usable implementation as you see:</p>
<pre><code>masterList=["prefix_20160817_suffix"]
containsArray=['prefix1', '2016', 'suffix']
filteredListOfFilenames=[]

for fileName in masterList:
    if all((element in fileName) for element in containsArray):
        filteredListOfFilenames.append(fileName)
</code></pre>
<p>I would suggest to have a deeper look into the really good <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow">official tutorial</a> - it contains many useful things.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>&gt;&gt;&gt; cond1=['prefix1', '2016', 'suffix']
&gt;&gt;&gt; cond2=['201608', 'suffix']
&gt;&gt;&gt; fn="prefix_20160817_suffix"
</code></pre>
<p>You can test the existence of each substring in the list of conditions with <code>in</code> and (in the interim example) a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [e in fn for e in cond1]
[False, True, True]
&gt;&gt;&gt; [e in fn for e in cond2]
[True, True]
</code></pre>
<p>That can then be used in a single <code>all</code> statement to test all the substrings:</p>
<pre><code>&gt;&gt;&gt; all(e in fn for e in cond1)
False
&gt;&gt;&gt; all(e in fn for e in cond2)
True
</code></pre>
<p>Then you can combine with <code>filter</code> (or use a list comprehension or a loop) to filter the list:</p>
<pre><code>&gt;&gt;&gt; fns=["prefix_20160817_suffix", "prefix1_20160817_suffix"]
&gt;&gt;&gt; filter(lambda fn: all(e in fn for e in cond1), fns)
['prefix1_20160817_suffix']
&gt;&gt;&gt; filter(lambda fn: all(e in fn for e in cond2), fns)
['prefix_20160817_suffix', 'prefix1_20160817_suffix']
</code></pre>
</div>
<span class="comment-copy"><code>filtered_list = [fn for fn in master_list if all(item in fn for item in contains_list)]</code></span>
<span class="comment-copy"><code>all(element in fileName for element in contains)</code>?</span>
<span class="comment-copy">Out of curiosity, why the downvote? What should I have done differently?</span>
<span class="comment-copy">Thanks, this is an awesome answer. I can get my "contains" array as a string with asterisks VIA user input so it is even smoother this way.</span>
<span class="comment-copy">@LukeH: if you are applying this to <code>os.lisdir()</code> output you may want to check out the <a href="https://docs.python.org/2/library/glob.html" rel="nofollow noreferrer"><code>glob</code> module</a> too  and skip having to calling <code>os.listdir()</code> yourself.</span>
