<div class="post-text" itemprop="text">
<p>I'm trying to use <a href="https://github.com/Bouke/django-two-factor-auth" rel="nofollow noreferrer">this library</a> to add two factor authentication to my project. I noticed that the module's has its own login view, that you can find right <a href="https://github.com/Bouke/django-two-factor-auth/blob/master/two_factor/views/core.py" rel="nofollow noreferrer">here</a>, see <code>class LoginView(IdempotentSessionWizardView):</code>.</p>
<p>The problem i'm having with this it's that i already have my own login view to handle an authentication form, so why would i use  the module's view? I would just need to add the 2FA part to my own view, instead of using another one, but unfortunately that module is not really clear on this part.</p>
<p>So the problem is: how do i integrate <strong>their</strong> login view into my own login view? How can i just add the 2fa part to my own one without using another login handler?</p>
<p>Any advice is welcome, here is my already existing login view:</p>
<pre><code>def login_request(request):


    if request.method == "POST":

        if result['success']:
            form = AuthenticationForm(request, data=request.POST)
            if form.is_valid():
                username = form.cleaned_data.get('username')
                password = form.cleaned_data.get('password')
                user = authenticate(username=username, password=password)


                if user is not None:
                    login(request, user)
                    messages.info(request, f"You are now logged in as {username}")
                    return redirect("main:homepage")
                else:
                    messages.error(request, "Invalid username or password")

            else:
                messages.error(request, "Invalid username or password")
</code></pre>
<p><strong>Edit</strong>: I've been suggested to use their own login view. Yes, it would be easier. But in the future i would like to add more stuff to the login, such as a captcha form or other fields. But that wouldn't be possible, since i would not be using my own view but the module's view. Is that right?</p>
</div>
<div class="post-text" itemprop="text">
<p>Converting the discussion from the comments here:</p>
<p>In general, you want to use the batteries-provided views provided by Django before rolling your own, and even before rolling your own from the beginning, you'd want to inherit from and extend the Django views such as <a href="https://github.com/django/django/blob/386d89ab55e620440d30590a8a104fe6d5eef830/django/contrib/auth/views.py#L38" rel="nofollow noreferrer">LoginView</a>.</p>
<p>The same principle applies to (well-architected) external libraries like the linked <code>django-two-factor-auth</code>.</p>
<p>At first, you'd just use the views included within, probably by directly <code>include()</code>ing the <a href="https://github.com/Bouke/django-two-factor-auth/blob/268c0d64b1aa912038e5c96ea688fbec17663a34/two_factor/urls.py" rel="nofollow noreferrer"><code>urls</code> module</a>.</p>
<p>Then, if you do need to customize something in those views, you'd inherit from that view, e.g.</p>
<pre class="lang-py prettyprint-override"><code>from two_factor.views import LoginView

class MyLoginView(LoginView):
    template_name = 'super_fancy_login_template.html'
    form_list = (
        ('auth', MyAwesomeAuthenticationForm),
        # ... the rest from the original here ...
    )
</code></pre>
<p>and hook it up in your <code>urls</code> <em>before</em> the library-provided view on the same path:</p>
<pre class="lang-py prettyprint-override"><code>from django.conf.urls import url
from my_awesome_app.views import MyLoginView

urlpatterns = [
    url(
        regex=r'^account/login/$',
        view=MyLoginView.as_view(),
        name='login',
    ),
    include(...),
]
</code></pre>
<p>and hey presto, you've replaced a view with your own.</p>
<p>Obviously, the more you replace pieces like this, the less you have any "warranty" (not that open-source software comes with a warranty at all ;) ) that things still work as they should.</p>
</div>
<span class="comment-copy">You don't need to write your own login view in the first place â€“ Django comes with <code>django.contrib.auth.views.LoginView</code>. I'd suggest just throwing your own login view away and using the 2FA library's login view.</span>
<span class="comment-copy">Hey! Take a look at the edit</span>
<span class="comment-copy">You would then inherit your custom <code>LoginView</code> from the library's <code>LoginView</code> and customize as required.</span>
<span class="comment-copy">How would i do that? By calling the module's login view on my own views.py file and adding the extra fields there?</span>
<span class="comment-copy">But what if i'd like to change a part of the form? For example i'd like it to ask the email field instead of the nickname field. How woud i "remove" something from the original form when i inherit it?</span>
<span class="comment-copy">Hey! Thanks again. Could you just clarify the last two lines? Because for the project that i'm building security will be an extremely important piece, so i need to focus on that one, since one day i could be handling sensitive data</span>
<span class="comment-copy">The point is that while external libraries are usually tested, the components you replace are not (unless you test them yourself). For this case, if you wanted to shoot yourself in the foot, you could replace AuthenticationForm with one that accepts any input, finds the first admin user and logs everyone in as them.</span>
<span class="comment-copy">Ok, i got it. Last question: i'm fairly new to django so i'm still learning about views etc. so i can't really judge yet, but in your opinion, is the LoginView offered by the 2FA module alright? I mean, is it generally a view that i can use once my project is live (in a long time)?</span>
<span class="comment-copy">Yes. It's a popular, battle-tested project.</span>
<span class="comment-copy">Awesome. Thank you!</span>
