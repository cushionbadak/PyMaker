<div class="post-text" itemprop="text">
<p>I am wondering what the practical reason there is for the observed behavior in python 2.7:</p>
<pre><code>import hashlib
hashlib.md5('foo') == hashlib.md5('foo')
</code></pre>
<p>Returns false.  But...</p>
<pre><code>import hashlib
hashlib.md5('foo').hexdigest() == hashlib.md5('foo').hexdigest()
</code></pre>
<p>Returns true.  I understand that the hexdigest/digest return the final string representations, but since the same data has been entered into the two hash objects directly, shouldn't they evaluate as equal to one another?  Wouldn't the <code>md5 HASH</code> object be aware of the internal identity when the magic <code>__eq__</code> methods are called?  For what reason would the objects themselves evaluate inequality?  Really just curious.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no equality comparison for <code>hashlib.md5</code> objects so, as they are different objects, the result is false.</p>
<p>The <code>.hexdigest</code> method generates a string (or byte string if you're on Python 3) and strings can be compared.</p>
<p>BTW:</p>
<pre><code>x = hashlib.md5('foo')
x == x # is True because it's the same object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason may be that using == to compare checksums is suject to timing attacks: <a href="https://groups.google.com/forum/?fromgroups=#!topic/keyczar-discuss/VXHsoJSLKhM" rel="nofollow noreferrer">https://groups.google.com/forum/?fromgroups=#!topic/keyczar-discuss/VXHsoJSLKhM</a> (credits to jwilkins in <a href="https://stackoverflow.com/a/14487254/821378">https://stackoverflow.com/a/14487254/821378</a>)</p>
<p>In a recent Python version, a function was added but I forgot if itâ€™s for all hashes or only HMAC: <a href="http://docs.python.org/3/library/hmac#hmac.compare_digest" rel="nofollow noreferrer">http://docs.python.org/3/library/hmac#hmac.compare_digest</a></p>
</div>
<span class="comment-copy">hashlib.md5('foo') is an object , compare with it's id</span>
<span class="comment-copy">As to <i>why</i> they didn't define <code>__eq__</code>... Well, the valid case for comparing two hash <i>objects</i> is when you want to compare their hash <i>strings</i>, which aren't computed until you call <code>hexdigest()</code>... So you may as well compare the digests directly.</span>
<span class="comment-copy">There is no support for comparing the internal intermediate state of hash objects with one another.  Sure, an <b>eq</b> method could be implemented that calls digest() on both behind the scenes to do that but it does not seem worth it.  If you want to compare if two things hash the same, finalize the hashes yourself with the digest or hexdigest methods to compare them.</span>
