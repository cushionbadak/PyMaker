<div class="post-text" itemprop="text">
<p>How can I generate the sequence of numbers "1,2,5,6,9,10......" and so until 100 in Python?
I even need the comma (',') included, but this is not the main problem.</p>
<p>The sequence: every number from 1..100, divisible by 4 with remainder 1 or 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every number from 1,2,5,6,9,10... is divisible by 4 with remainder 1 or 2.</p>
<pre><code>&gt;&gt;&gt; ','.join(str(i) for i in xrange(100) if i % 4 in (1,2))
'1,2,5,6,9,10,13,14,...'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; ','.join('{},{}'.format(i, i + 1) for i in range(1, 100, 4))
'1,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30,33,34,37,38,41,42,45,46,49,50,53,54,57,58,61,62,65,66,69,70,73,74,77,78,81,82,85,86,89,90,93,94,97,98'
</code></pre>
<p>That was a quick and quite dirty solution.</p>
<p>Now, for a solution that is suitable for different kinds of progression problems:</p>
<pre><code>def deltas():
    while True:
        yield 1
        yield 3
def numbers(start, deltas, max):
    i = start
    while i &lt;= max:
        yield i
        i += next(deltas)
print(','.join(str(i) for i in numbers(1, deltas(), 100)))
</code></pre>
<p>And here are similar ideas implemented using <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer">itertools</a>:</p>
<pre><code>from itertools import cycle, takewhile, accumulate, chain

def numbers(start, deltas, max):
    deltas = cycle(deltas)
    numbers = accumulate(chain([start], deltas))
    return takewhile(lambda x: x &lt;= max, numbers)

print(','.join(str(x) for x in numbers(1, [1, 3], 100)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Includes some guessing on the exact sequence you are expecting:</p>
<pre><code>&gt;&gt;&gt; l = list(range(1, 100, 4)) + list(range(2, 100, 4))
&gt;&gt;&gt; l.sort()
&gt;&gt;&gt; ','.join(map(str, l))
'1,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30,33,34,37,38,41,42,45,46,49,50,53,54,57,58,61,62,65,66,69,70,73,74,77,78,81,82,85,86,89,90,93,94,97,98'
</code></pre>
<p>As one-liner:</p>
<pre><code>&gt;&gt;&gt; ','.join(map(str, sorted(list(range(1, 100, 4))) + list(range(2, 100, 4))))
</code></pre>
<p><em>(btw. this is Python 3 compatible)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>using numpy and list comprehension you can do the</p>
<pre><code>import numpy as np
[num for num in np.arange(1,101) if (num%4 == 1 or num%4 == 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works by exploiting the % properties of the list rather than the increments.</p>
<pre><code>for num in range(1,100):
    if num % 4 == 1 or num % 4 ==2:
        n.append(num)
        continue
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming I've guessed the pattern correctly (alternating increments of 1 and 3), this should produce the desired result:</p>
<pre><code>def sequence():
    res = []
    diff = 1
    x = 1
    while x &lt;= 100:
        res.append(x)
        x += diff
        diff = 3 if diff == 1 else 1
    return ', '.join(res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your sequence alternates increments between 1 and 3</p>
<pre><code>numbers = [1]
while numbers[-1] &lt; 100:
    numbers.append(numbers[-1] + 1)
    numbers.append(numbers[-1] + 3)

print ', '.join(map(str, numbers))
</code></pre>
<p>This could be easier to modify if your sequence is different but I think poke or BlaXpirit are nicer answers than mine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Write a function that takes a number as an argument and prints the Fibonacci series till that number</p>
<pre><code>def Series(n):  
    a = 0  
    b = 1  
    print(a)  
    print(b)  
    S = 0  
    for i in range(0,n):  
        if S &lt;= n-1:  
            S = a + b  
            print(S)  
            a = b  
            b = S
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python 3.1 you can produce a list in a way</p>
<pre><code>     lst=list(range(100))
     for i in range(100)
        print (lst[i],',',end='')
</code></pre>
<p>In python 2.7 you can do it as </p>
<pre><code>     lst=range(100)
     for i in range(100)
        print lst[i]+',' 
</code></pre>
</div>
<span class="comment-copy">A Python 3 version is supplied by Oleh Prypin</span>
<span class="comment-copy">One liner, thanks! That's really nice! Initially I though something of this                                                                'odd = []' 'even = []' 'for c in range(0,100):'     'if c%2==0:'         'odd.append(c)'  'for c in range(0,100):'     'if c%2==1:'         'even.append(c)'  'for c in range(0, 50):'     'if c % 2 == 0:'         'print(even[c],end=",")'     'else:'         'print(odd[c],end=",")'                                             Yeah, I'm a newcomer. But I knew there must be better ways! Thanks guys!</span>
<span class="comment-copy">Further description of the final function would be greatly appreciated.</span>
<span class="comment-copy">Why are you iterating over a separate range object? You should just iterate over the list items.</span>
