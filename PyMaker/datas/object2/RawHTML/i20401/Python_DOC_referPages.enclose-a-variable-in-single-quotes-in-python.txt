<div class="post-text" itemprop="text">
<p>How do I enclose a variable within single quotations in python? It's probably very simple but I can't seem to get it! I need to url-encode the variable <code>term</code>. <code>Term</code> is entered in a form by a user and is passed to a function where it is url-encoded <code>term=urllib.quote(term)</code>. If the user entered "apple computer" as their term, after url-encoding it would be "apple%20comptuer". What I want to do is have the term surrounded by single-quotes before url encoding, so that it will be "'apple computer'" then after url-encoding "%23apple%20computer%23". I need to pass the term to a url and it won't work unless I use this syntax. Any suggestions?</p>
<p>Sample Code:</p>
<pre><code>import urllib2
import requests    

def encode():
        import urllib2
        query= avariable #The word this variable= is to be enclosed by single quotes
        query = urllib2.quote(query)
        return dict(query=query)

def results():

    bing = "https://api.datamarket.azure.com/Data.ashx/Bing/SearchWeb/Web?Query=%(query)s&amp;$top=50&amp;$format=json"
    API_KEY = 'akey'

    r = requests.get(bing % encode(), auth=('', API_KEY))
    return r.json
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are three ways:</p>
<ol>
<li><p>string concatenation</p>
<pre><code>term = urllib.quote("'" + term + "'")
</code></pre></li>
<li><p>old-style string formatting</p>
<pre><code>term = urllib.quote("'%s'" % (term,))
</code></pre></li>
<li><p>new-style string formatting</p>
<pre><code>term = urllib.quote("'{}'".format(term))
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can just use string interpolation:</p>
<pre><code>&gt;&gt;&gt; term = "foo"
&gt;&gt;&gt; "'%s'" % term
"'foo'"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def wrap_and_encode(x):
    return encode("'%s'" % x)
</code></pre>
<p>Should be what you are looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>What's wrong with adding the single quotes after it being url encoded? Or, just adding them before hand in you encode function above?</p>
</div>
<div class="post-text" itemprop="text">
<p>For those that are coming here while googling something like "python surround string" and are time conscientious <em>(or just looking for the "best" solution)</em>.</p>
<p>I was going to add in that there are now <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a> which for Python 3.6+ environments are way easier to use and from what I read they say they are faster.</p>
<pre><code>#f-string approach
term = urllib.parse.quote(f"'{term}'")
</code></pre>
<p>I decided to do a <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit</a> of each method of "surrounding" a string in python.</p>
<pre><code>import timeit

results = {}

results["concat"] = timeit.timeit("\"'\" + 'test' + \"'\"")
results["%s"] = timeit.timeit("\"'%s'\" % ('test',)")
results["format"] = timeit.timeit("\"'{}'\".format('test')")
results["f-string"] = timeit.timeit("f\"'{'test'}'\"") #must me using python 3.6+
results["join"] = timeit.timeit("'test'.join((\"'\", \"'\"))")

for n, t in sorted(results.items(), key = lambda nt: nt[1]):
    print(f"{n}, {t}")
</code></pre>
<p>Results:</p>
<pre><code>concat, 0.009532792959362268
f-string, 0.08994143106974661
join, 0.11005984898656607
%s, 0.15808712202124298
format, 0.2698059631511569
</code></pre>
<p><em>Oddly enough, I'm getting that concatenation is faster than f-string every time I run it, but you can copy and paste to see if your string/use works differently, there may also be a better way to put them into timeit than <code>\</code> escaping all the quotes so let me know</em></p>
</div>
<div class="post-text" itemprop="text">
<p>I just stumbled upon some code doing it this way: </p>
<pre><code>term = urllib.quote(term.join(("'", "'")))
</code></pre>
<p>(In this case <code>join()</code> uses <code>term</code> as a separator to combine all elements that were given in the iterable parameter into one string. Since there are only two elements, they are simply wrapped around one instance of <code>term</code>.)</p>
<p>Although it is quite readable, I would still consider it a hack and less readable than other options. Therefore, I recommend the use of string formatting as mentioned by others:</p>
<pre><code>term = urllib.quote("'{}'".format(term))
</code></pre>
</div>
<span class="comment-copy">Thank you for the comprehensive answer</span>
