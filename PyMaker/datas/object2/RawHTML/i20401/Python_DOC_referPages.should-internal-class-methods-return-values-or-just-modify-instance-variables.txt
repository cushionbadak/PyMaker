<div class="post-text" itemprop="text">
<p>I am creating a query builder class that will help in constructing a query for mongodb from URL params.  I have never done much object oriented programming, or designed classes for consumption by people other than myself, besides using basic language constructs and using django's built in Models.</p>
<p>So I have this <code>QueryBuilder</code> class</p>
<pre><code>class QueryHelper():
    """
    Help abstract out the problem of querying over vastly
    different dataschemas.
    """

    def __init__(self, collection_name, field_name, params_dict):
        self.query_dict = {}
        self.params_dict = params_dict
        db = connection.get_db()
        self.collection = db[collection_name]

    def _build_query(self):
        # check params dict and build a mongo query
        pass
</code></pre>
<p>Now in <code>_build_query</code> I will be checking the <code>params_dict</code> and populating <code>query_dict</code> so as to pass it to mongo's <code>find()</code> function.
In doing this I was just wondering if there was an absolute correct approach to as whether <code>_build_query</code> should return a dictionary or whether it should just modify <code>self.query_dict</code>.  Since it is an internal method I would assume it is OK to just modify <code>self.query_dict</code>.  Is there a right way (pythonic) way of approaching this? Is this just silly and not an important design decision? Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Returning a value is preferable as it allows you to keep all the attribute modifying in one place (<code>__init__</code>). Also, this makes it easier to extend the code later; suppose you want to override <code>_build_query</code> in a subclass, then the overriding method can just return a value, without needing to know which attribute to set. Here's an example:</p>
<pre><code>class QueryHelper(object):
    def __init__(self, param, text):
        self._param = param
        self._query = self._build_query(text)

    def _build_query(self, text):
        return text + " and ham!"

class RefinedQueryHelper(QueryHelper):
    def _build_query(self, text):
        # no need to know how the query object is going to be used
        q = super(RefinedQueryHelper, self)._build_query()
        return q.replace("ham", "spam")
</code></pre>
<p>vs. the "setter version":</p>
<pre><code>class QueryHelper(object):
    def __init__(self, param, text):
        self._param = param
        self._build_query(text)

    def _build_query(self, text):
        self._query = text + " and ham!"

class RefinedQueryHelper(QueryHelper):
    def _build_query(self, text):
        # what if we want to store the query in __query instead?
        # then we need to modify two classes...
        super(RefinedQueryHelper, self)._build_query()
        self._query = self._query.replace("ham", "spam")
</code></pre>
<p>If you do choose to set an attribute, you might want to call the method <code>_set_query</code> for clarity.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's perfectly fine to modify <code>self.query_dict</code> as the whole idea of object-oriented programming is that methods can modify an object's state. As long as an object is in a consistent state after a method has finished, you're fine. The fact that <code>_build_query</code> is an internal method does not matter. You can choose to call <code>_build_query</code> after in <code>__init__</code> to construct the query already when the object is created.</p>
<p>The decision mostly matters for testing purposes. Fur testing purposes, it's convenient to test each method individually without necessarily having to test the whole object's state. But that does not apply in this case because we're talking about an internal method so you alone decide when to call that method, not other objects or other code.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you return anything at all, I'd suggest <code>self</code>. Returning <code>self</code> from instance methods is convenient for method chaining, since each return value allows another method call on the same object:</p>
<pre><code>foo.add_thing(x).add_thing(y).set_goal(42).execute()
</code></pre>
<p>This is sometimes referred to as a "fluent" API.</p>
<p>However, while Python allows method chaining for immutable types such as <code>int</code> and <code>str</code>, it does not provide it for methods of mutable containers such as <code>list</code> and <code>set</code>—by design—so it is arguably not "Pythonic" to do it for your own mutable type. Still, lots of Python libraries do have "fluent" APIs.</p>
<p>A downside is that such an API can make debugging harder. Since you execute the whole statement or none of it, you can't easily see the object at intermediate points within the statement. Of course, I usually find <code>print</code> perfectly adequate for debugging Python code, so I'd just throw a <code>print</code> in any method whose return value I was interested in!</p>
</div>
<div class="post-text" itemprop="text">
<p>While it's common for methods of an object to directly modify its state, it can sometimes be advantageous for an object to be its own "client", and access themselves indirectly through (typically) private access methods. In Python you can do this easily by creating using the built-in <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property()</code></a> class/function.</p>
<p>Doing this provides better <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="nofollow noreferrer">encapsulation</a> and the benefits that follow from it (insulation from the implementation details being the major one). However doing so may be impractical because it would require too much additional code, and is often slower which might affect performance adversely an unacceptable amount — so trade-offs may often have to be/are made with respect to this ideal.</p>
</div>
<span class="comment-copy">I have 7 years context on this question and if anyone else is wondering the same, the best strategies that I've found closely parallel the thoughts written in: - <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" rel="nofollow noreferrer">blog.cleancoder.com/uncle-bob/2012/08/13/…</a> - <a href="https://www.yegor256.com/elegant-objects.html" rel="nofollow noreferrer">yegor256.com/elegant-objects.html</a> - <a href="https://leanpub.com/wewut" rel="nofollow noreferrer">leanpub.com/wewut</a></span>
<span class="comment-copy">You could also make <code>_build_query</code> a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> attribute and have effectively the best of both worlds.</span>
<span class="comment-copy"><code>.execute()</code> is unnecessary. You could trigger execution using <code>.all()</code>, <code>.first()</code>, <code>.one()</code>.</span>
<span class="comment-copy">Sure, that's good if you have more than one method that actually does something.</span>
