<div class="post-text" itemprop="text">
<p>How do you get Jenkins to execute python unittest cases?
Is it possible to JUnit style XML output from the builtin <code>unittest</code> package?</p>
</div>
<div class="post-text" itemprop="text">
<h1>sample tests:</h1>
<p>tests.py:</p>
<pre><code># tests.py

import random
try:
    import unittest2 as unittest
except ImportError:
    import unittest

class SimpleTest(unittest.TestCase):
    @unittest.skip("demonstrating skipping")
    def test_skipped(self):
        self.fail("shouldn't happen")

    def test_pass(self):
        self.assertEqual(10, 7 + 3)

    def test_fail(self):
        self.assertEqual(11, 7 + 3)
</code></pre>
<h1><a href="http://pytest.org/latest/usage.html#creating-junitxml-format-files">JUnit with pytest</a></h1>
<p>run the tests with:</p>
<pre><code>py.test --junitxml results.xml tests.py
</code></pre>
<p>results.xml:</p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;testsuite errors="0" failures="1" name="pytest" skips="1" tests="2" time="0.097"&gt;
    &lt;testcase classname="tests.SimpleTest" name="test_fail" time="0.000301837921143"&gt;
        &lt;failure message="test failure"&gt;self = &amp;lt;tests.SimpleTest testMethod=test_fail&amp;gt;

    def test_fail(self):
&amp;gt;       self.assertEqual(11, 7 + 3)
E       AssertionError: 11 != 10

tests.py:16: AssertionError&lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase classname="tests.SimpleTest" name="test_pass" time="0.000109910964966"/&gt;
    &lt;testcase classname="tests.SimpleTest" name="test_skipped" time="0.000164031982422"&gt;
        &lt;skipped message="demonstrating skipping" type="pytest.skip"&gt;/home/damien/test-env/lib/python2.6/site-packages/_pytest/unittest.py:119: Skipped: demonstrating skipping&lt;/skipped&gt;
    &lt;/testcase&gt;
&lt;/testsuite&gt;
</code></pre>
<h1><a href="http://nose.readthedocs.org/en/latest/plugins/xunit.html">JUnit with nose</a></h1>
<p>run the tests with:</p>
<pre><code>nosetests --with-xunit
</code></pre>
<p>nosetests.xml:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuite name="nosetests" tests="3" errors="0" failures="1" skip="1"&gt;
    &lt;testcase classname="tests.SimpleTest" name="test_fail" time="0.000"&gt;
        &lt;failure type="exceptions.AssertionError" message="11 != 10"&gt;
            &lt;![CDATA[Traceback (most recent call last):
File "/opt/python-2.6.1/lib/python2.6/site-packages/unittest2-0.5.1-py2.6.egg/unittest2/case.py", line 340, in run
testMethod()
File "/home/damien/tests.py", line 16, in test_fail
self.assertEqual(11, 7 + 3)
File "/opt/python-2.6.1/lib/python2.6/site-packages/unittest2-0.5.1-py2.6.egg/unittest2/case.py", line 521, in assertEqual
assertion_func(first, second, msg=msg)
File "/opt/python-2.6.1/lib/python2.6/site-packages/unittest2-0.5.1-py2.6.egg/unittest2/case.py", line 514, in _baseAssertEqual
raise self.failureException(msg)
AssertionError: 11 != 10
]]&gt;
        &lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase classname="tests.SimpleTest" name="test_pass" time="0.000"&gt;&lt;/testcase&gt;
    &lt;testcase classname="tests.SimpleTest" name="test_skipped" time="0.000"&gt;
        &lt;skipped type="nose.plugins.skip.SkipTest" message="demonstrating skipping"&gt;
            &lt;![CDATA[SkipTest: demonstrating skipping
]]&gt;
        &lt;/skipped&gt;
    &lt;/testcase&gt;
&lt;/testsuite&gt;
</code></pre>
<h1><a href="http://nose2.readthedocs.org/en/latest/plugins/junitxml.html">JUnit with nose2</a></h1>
<p>You would need to use the <code>nose2.plugins.junitxml</code> plugin. You can configure <code>nose2</code> with a config file like you would normally do, or with the <code>--plugin</code> command-line option.</p>
<p>run the tests with:</p>
<pre><code>nose2 --plugin nose2.plugins.junitxml --junit-xml tests
</code></pre>
<p>nose2-junit.xml:</p>
<pre><code>&lt;testsuite errors="0" failures="1" name="nose2-junit" skips="1" tests="3" time="0.001"&gt;
  &lt;testcase classname="tests.SimpleTest" name="test_fail" time="0.000126"&gt;
    &lt;failure message="test failure"&gt;Traceback (most recent call last):
  File "/Users/damien/Work/test2/tests.py", line 18, in test_fail
    self.assertEqual(11, 7 + 3)
AssertionError: 11 != 10
&lt;/failure&gt;
  &lt;/testcase&gt;
  &lt;testcase classname="tests.SimpleTest" name="test_pass" time="0.000095" /&gt;
  &lt;testcase classname="tests.SimpleTest" name="test_skipped" time="0.000058"&gt;
    &lt;skipped /&gt;
  &lt;/testcase&gt;
&lt;/testsuite&gt;
</code></pre>
<h1><a href="https://github.com/danielfm/unittest-xml-reporting">JUnit with unittest-xml-reporting</a></h1>
<p>Append the following to <code>tests.py</code></p>
<pre><code>if __name__ == '__main__':
    import xmlrunner
    unittest.main(testRunner=xmlrunner.XMLTestRunner(output='test-reports'))
</code></pre>
<p>run the tests with:</p>
<pre><code>python tests.py
</code></pre>
<p>test-reports/TEST-SimpleTest-20131001140629.xml:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;testsuite errors="1" failures="0" name="SimpleTest-20131001140629" tests="3" time="0.000"&gt;
    &lt;testcase classname="SimpleTest" name="test_pass" time="0.000"/&gt;
    &lt;testcase classname="SimpleTest" name="test_fail" time="0.000"&gt;
        &lt;error message="11 != 10" type="AssertionError"&gt;
&lt;![CDATA[Traceback (most recent call last):
  File "tests.py", line 16, in test_fail
    self.assertEqual(11, 7 + 3)
AssertionError: 11 != 10
]]&gt;     &lt;/error&gt;
    &lt;/testcase&gt;
    &lt;testcase classname="SimpleTest" name="test_skipped" time="0.000"&gt;
        &lt;skipped message="demonstrating skipping" type="skip"/&gt;
    &lt;/testcase&gt;
    &lt;system-out&gt;
&lt;![CDATA[]]&gt;    &lt;/system-out&gt;
    &lt;system-err&gt;
&lt;![CDATA[]]&gt;    &lt;/system-err&gt;
&lt;/testsuite&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would second using nose.  Basic XML reporting is now built in.  Just use the --with-xunit command line option and it will produce a nosetests.xml file.  For example:</p>
<blockquote>
<p>nosetests --with-xunit</p>
</blockquote>
<p>Then add a "Publish JUnit test result report" post build action, and fill in the "Test report XMLs" field with nosetests.xml (assuming that you ran nosetests in $WORKSPACE).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can install the <a href="http://pypi.python.org/pypi/unittest-xml-reporting">unittest-xml-reporting</a> package to add a test runner that generates XML to the built-in <code>unittest</code>. </p>
<p>We use <a href="http://pytest.org/">pytest</a>, which has XML output built in (it's a command line option). </p>
<p>Either way, executing the unit tests can be done by running a shell command. </p>
</div>
<div class="post-text" itemprop="text">
<p>I used nosetests. There are addons to output the XML for Jenkins</p>
</div>
<div class="post-text" itemprop="text">
<p>When using buildout we use <a href="https://pypi.python.org/pypi/collective.xmltestreport" rel="nofollow"><code>collective.xmltestreport</code></a> to produce JUnit-style XML output, perhaps it's <a href="https://github.com/collective/collective.xmltestreport" rel="nofollow">source code</a> or the module itself could be of help.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>python -m pytest --junit-xml=pytest_unit.xml source_directory/test/unit || true # tests may fail
</code></pre>
<p>Run this as shell from jenkins , you can get the report in pytest_unit.xml as artifact.</p>
</div>
<span class="comment-copy">All of the answers presume you want to initiate the test cases from the command-line. But if you want to run the tests programmatically, try this: <code>import nose ; nose.runmodule()  # aka  nose.run(defaultTest=__name__)</code></span>
<span class="comment-copy">IMHO the simple 'py.test --junitxml results.xml test.py' suggestion answers the question best. 'yum install pytest' to get py.test installed. Then you can run any unittest python script and get jUnit xml results</span>
<span class="comment-copy">@gaoithe that answers the jenkins part, but doesn't fulfill the requirement to use the builtin unittest module. In that project it was a given requirement.</span>
<span class="comment-copy">@erikb85 When I say "run any unittest python script" I mean a script which uses the unittest module.</span>
<span class="comment-copy">+1 for the simple 'py.test --junitxml results.xml test.py' suggestion. 'yum install pytest' to get py.test installed. Then you can run any unittest python script and get jUnit xml results.</span>
<span class="comment-copy">If you want to use <i>unittest-xml-reporting</i> and benefit from the <a href="https://docs.python.org/3/library/unittest.html#unittest-test-discovery" rel="nofollow noreferrer">Test Discovery feature</a>, you can put <code>unittest.main(module=None, testRunner=xmlrunner.XMLTestRunner(output='test-reports'))</code>.</span>
<span class="comment-copy">@RosbergLinhares why do you need <code>module=None</code> to use Test Discovery? It works exactly as described in the answer <code>unittest.main(testRunner=xmlrunner.XMLTestRunner(output='test-reports'))</code>.</span>
<span class="comment-copy">@RosbergLinhares, during test discovery, the modules are only imported but not executed. So, how is any of those solution supposed to work with discovery? I just tried it out, none of it works. Or am I missing something?</span>
