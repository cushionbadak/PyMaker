<div class="post-text" itemprop="text">
<p>I want to toggle between two values in Python, that is, between 0 and 1. </p>
<p>For example, when I run a function the first time, it yields the number 0. Next time, it yields 1. Third time it's back to zero, and so on.</p>
<p>Sorry if this doesn't make sense, but does anyone know a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.cycle()</code>:</p>
<pre><code>from itertools import cycle
myIterator = cycle(range(2))

myIterator.next()   # or next(myIterator) which works in Python 3.x. Yields 0
myIterator.next()   # or next(myIterator) which works in Python 3.x. Yields 1
# etc.
</code></pre>
<p>Note that if you need a more complicated cycle than <code>[0, 1]</code>, this solution becomes MUCH more attractive than the other ones posted here...</p>
<pre><code>from itertools import cycle
mySmallSquareIterator = cycle(i*i for i in range(10))
# Will yield 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 0, 1, 4, ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish that with a generator like this:</p>
<pre><code>&gt;&gt;&gt; def alternate():
...   while True:
...     yield 0
...     yield 1
...
&gt;&gt;&gt;
&gt;&gt;&gt; alternator = alternate()
&gt;&gt;&gt;
&gt;&gt;&gt; alternator.next()
0
&gt;&gt;&gt; alternator.next()
1
&gt;&gt;&gt; alternator.next()
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may find it useful to create a function alias like so:</p>
<pre><code>import itertools
myfunc = itertools.cycle([0,1]).next
</code></pre>
<p>then</p>
<pre><code>myfunc()    # -&gt; returns 0
myfunc()    # -&gt; returns 1
myfunc()    # -&gt; returns 0
myfunc()    # -&gt; returns 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use the mod (<code>%</code>) operator. </p>
<pre><code>count = 0  # initialize count once
</code></pre>
<p>then </p>
<pre><code>count = (count + 1) % 2
</code></pre>
<p>will toggle the value of count between 0 and 1 each time this statement is executed. The <em>advantage</em> of this approach is that you can cycle through a sequence of values (if needed) from <code>0 - (n-1)</code> where <code>n</code> is the value you use with your <code>%</code> operator. And this technique does not depend on any Python specific features/libraries.</p>
<p>e.g.,</p>
<pre><code>count = 0

for i in range(5):
     count = (count + 1) % 2
     print count
</code></pre>
<p>gives:</p>
<pre><code>1
0
1
0
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, True and False <em>are integers</em> (1 and 0 respectively).  You could use a boolean (True or False) and the not operator:</p>
<pre><code>var = not var
</code></pre>
<p>Of course, if you want to iterate between other numbers than 0 and 1, this trick becomes a little more difficult.</p>
<p>To pack this into an admittedly ugly function:</p>
<pre><code>def alternate():
    alternate.x=not alternate.x
    return alternate.x

alternate.x=True  #The first call to alternate will return False (0)

mylist=[5,3]
print(mylist[alternate()])  #5
print(mylist[alternate()])  #3
print(mylist[alternate()])  #5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import cycle

alternator = cycle((0,1))
next(alternator) # yields 0
next(alternator) # yields 1
next(alternator) # yields 0
next(alternator) # yields 1
#... forever
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>xor</code> works, and is a good visual way to toggle between two values.</p>
<pre><code>count = 1
count = count ^ 1 # count is now 0
count = count ^ 1 # count is now 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>var = 1
var = 1 - var
</code></pre>
<p>That's the official tricky way of doing it ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the tuple subscript trick:</p>
<pre><code>value = (1, 0)[value]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To toggle variable x between two arbitrary (integer) values,
e.g. a and b, use:</p>
<pre><code>    # start with either x == a or x == b
    x = (a + b) - x

    # case x == a:
    # x = (a + b) - a  ==&gt; x becomes b

    # case x == b:
    # x = (a + b) - b  ==&gt; x becomes a
</code></pre>
<p>Example:</p>
<p>Toggle between 3 and 5</p>
<pre><code>    x = 3
    x = 8 - x  (now x == 5)
    x = 8 - x  (now x == 3)
    x = 8 - x  (now x == 5)
</code></pre>
<p>This works even with strings (sort of).</p>
<pre><code>    YesNo = 'YesNo'
    answer = 'Yes'
    answer = YesNo.replace(answer,'')  (now answer == 'No')
    answer = YesNo.replace(answer,'')  (now answer == 'Yes')
    answer = YesNo.replace(answer,'')  (now answer == 'No')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using tuple subscripts is one good way to toggle between two values:</p>
<pre><code>toggle_val = 1

toggle_val = (1,0)[toggle_val]
</code></pre>
<p>If you wrapped a function around this, you would have a nice alternating switch.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple and general solution without using any built-in. Just keep the track of current element and print/return the other one then change the current element status.</p>
<pre><code>a, b = map(int, raw_input("Enter both number: ").split())
flag = input("Enter the first value: ")
length = input("Enter Number of iterations: ")
for i in range(length):
    print flag
    if flag == a:
        flag = b;     
    else:
        flag = a
</code></pre>
<p>Input:<br/>
3 8<br/>3<br/>5<br/>Output:<br/>3<br/>8<br/>3<br/>8<br/>3
<br/><br/><code>Means numbers to be toggled are 3 and 8
Second input, is the first value by which you want to start the sequence 
And last input indicates the number of times you want to generate</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If a variable is previously defined and you want it to toggle between two values, you may use the <strong>a if b else c</strong> form:</p>
<pre><code>variable = 'value1'
variable = 'value2' if variable=='value1' else 'value1'
</code></pre>
<p>In addition, it works on Python 2.5+ and 3.x</p>
<p><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#conditional-expressions</a></p>
</div>
<span class="comment-copy">Why not simply use <code>itertools.cycle(range(2))</code> directly?</span>
<span class="comment-copy">Because I always forget about <code>range</code> :-) Will edit shortly.</span>
<span class="comment-copy">No, what I mean is that <code>myIterator = itertools.cycle(range(2))</code> works by itself.  You don't need myFuncGenerator.</span>
<span class="comment-copy">...True. I guess I wanted to illustrate some other concepts. Will edit shortly.</span>
<span class="comment-copy">you should demonstrate a larger range, or a 'string', then cycle really starts looking good..</span>
<span class="comment-copy">This is far more generalizable than the other answers (not limited to 2 values, to 0 and 1, to consecutive values...).</span>
<span class="comment-copy">I like this answer too.</span>
<span class="comment-copy">-1 use itertools</span>
<span class="comment-copy"><code>itertools.cycle()</code> works with any iterable of known values. I don't see how either the <code>itertools</code> solution or this one can have its generator switch values at runtime, but I'm sure such a thing is not difficult.</span>
<span class="comment-copy">neat and flexible solution.</span>
<span class="comment-copy">+1 neat, didn't know I could do this with itertools</span>
<span class="comment-copy">+1 for the function alias idea. It's like the generator solution (most popular at time of writing) but without having to write out a function definition!</span>
<span class="comment-copy">xor is more efficient and functionally the same.</span>
<span class="comment-copy">Why not just <code>print i % 2</code> ?</span>
<span class="comment-copy">@Akavall OP wants to toggle between two values, not necessarily just print two values.</span>
<span class="comment-copy">@Levon, OK, I see. Thanks.</span>
<span class="comment-copy">Overly complicated... highly suggest looking into <code>itertools</code>.</span>
<span class="comment-copy">@PlatinumAzure : Itertools is a better option.  (in fact, I upvoted your solution).  The above is only to demonstrate a neat trick which can be useful in some circumstances -- the packing into a function part is not recommended.  (functions probably shouldn't save state, that's what classes are for...).  But the fact that True and False can be used to index arrays as 0 and 1 is neat (I think)</span>
<span class="comment-copy">If you really want to save state in a function, you can use <code>alternate.x</code> from within it (instead of using the default trick).. which I have to admit I've used once or twice.  (But only once or twice.)</span>
<span class="comment-copy">+1 for the fellow <code>itertools</code> stalwart :-)</span>
<span class="comment-copy">That will go from 1 to 0 to 0 to 0 to... (-1)</span>
<span class="comment-copy">fixed. thank you</span>
<span class="comment-copy">That's a neat trick, but it seems like using this to alternate among any values other than 0 and 1 would get ugly fast.</span>
<span class="comment-copy">True. This trick is mainly used as an alternative to the ternary operator, but happens to work just as well for the OP's specific case. Just thought I'd throw something different into the mix ;)</span>
