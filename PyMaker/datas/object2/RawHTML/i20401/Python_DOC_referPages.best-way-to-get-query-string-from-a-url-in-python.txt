<div class="post-text" itemprop="text">
<p>I need to get the query string from this URL <a href="https://stackoverflow.com/questions/ask?next=1&amp;value=3">https://stackoverflow.com/questions/ask?next=1&amp;value=3</a> and I don't want to use <a href="https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpRequest.META" rel="nofollow noreferrer">request.META</a>. I have figured out that there are two more ways to get the query string:</p>
<ol>
<li><p><strong>Using urlparse</strong>
urlparse.urlparse(url).query</p></li>
<li><p><strong>Using url encode</strong>
Use urlencode and pass the request.GET params dictionary into it to get the string representation.</p></li>
</ol>
<p>So which way is better? My colleagues prefer urlencode but have not provided a satisfying explanation. They claim that urlparse calls urlencode internally which is something I'm not sure about since urlencode lives in the urllib module.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make Query string using GET parameters like this</p>
<pre><code>request.GET.urlencode()
</code></pre>
<p>This does not include the <code>?</code> prefix, and it may not return the keys in the same order as in the original request.</p>
</div>
<div class="post-text" itemprop="text">
<p>Third option:</p>
<pre><code>&gt;&gt;&gt; from urlparse import urlparse, parse_qs
&gt;&gt;&gt; url = 'http://something.com?blah=1&amp;x=2'
&gt;&gt;&gt; urlparse(url).query
'blah=1&amp;x=2'
&gt;&gt;&gt; parse_qs(urlparse(url).query)
{'blah': ['1'], 'x': ['2']}
</code></pre>
<p>In Python 3+ this is available as:</p>
<pre><code>from urllib.parse import parse_qs
</code></pre>
<p><a href="https://docs.python.org/3/library/urllib.parse.html" rel="noreferrer">Documentation for urllib.parse</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer using</p>
<pre><code>request.META['QUERY_STRING']
</code></pre>
<p>From docs:</p>
<p><a href="https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.META" rel="noreferrer">https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.META</a></p>
<p>This does not include the <code>?</code> prefix.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can also use request.arg also</p>
<pre><code>if 'next' in request.arg and 'values' in request.arg:
    next = request.arg.get('next', '')
    value = request.arg.get('value', '')
</code></pre>
</div>
<span class="comment-copy">It's important to note that since QueryDict wraps an unordered dictionary, request.GET.urlencode() may not return keys in the same order that they appear in the original request URI.</span>
<span class="comment-copy">That's a fundamental of dictionaries actually. Additionally, most query strings should be considered unordered if they are keyed. If it is a true list it will be ordered.</span>
<span class="comment-copy">Okay, not quite sure why you'd want the query string and not have it processed, but using urlparse is the most readable and understandable way.</span>
<span class="comment-copy">This really helped me - I needed a Map (or some object) that held the params from a request URL!</span>
