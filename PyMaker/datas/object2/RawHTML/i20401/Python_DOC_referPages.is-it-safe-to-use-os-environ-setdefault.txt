<div class="post-text" itemprop="text">
<p>From my ipython shell, I see a method setdefault in os.environ but it is not documented. <a href="http://docs.python.org/library/os.html#os.environ">http://docs.python.org/library/os.html#os.environ</a>. Is it documented somewhere else?</p>
<pre><code>def setdefault(self, key, failobj=None):
    if key not in self:
        self[key] = failobj
    return self[key]
</code></pre>
<p>Can I use this function or write a wrapper for those lines?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/os.html#os.environ"><code>os.environ</code> documentation</a> does state it's a mapping:</p>
<blockquote>
<p>A mapping object representing the string environment.</p>
</blockquote>
<p>As such it behaves according to the python <a href="http://docs.python.org/library/stdtypes.html#mapping-types-dict">mapping documentation</a> of which <code>dict</code> is the standard implementation.</p>
<p><code>os.environ</code> therefor behaves just like the standard dict, it has all the same methods:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; len(os.environ)
36
&gt;&gt;&gt; 'USER' in os.environ
True
&gt;&gt;&gt; os.environ.fromkeys
&lt;bound method classobj.fromkeys of &lt;class os._Environ at 0x107096ce8&gt;&gt;
</code></pre>
<p>The <a href="http://docs.python.org/library/stdtypes.html#dict.setdefault"><code>.setdefault</code> method</a> is documented on the same page as the rest of the mapping methods, and you can use it just fine as is.</p>
</div>
<div class="post-text" itemprop="text">
<p>To clarify--- I had to think for a little while as to what this question and answer mean--- the Python.org docs on os.environ don't bother to mention all of the built-in methods for mapping types (such as os.environ which is basically a dictionary to which additional methods have been given). </p>
<p>Instead, they mainly mention the additional methods that they have given to an object in os, named environ and derived from type dict, beyond those that dict already has built in. From a book that I have on Python, the synopsis for any dictionary type is dict.setdefault(key, default=None), and the explanation is that it is similar to get() but it sets dict[key]=default if key is not already in dict. </p>
<p>default is perhaps not well chosen as a name here because it is easily confused with somevariablename= defaultvalue, the normal way of declaring default values in a function declaration. That is, whereas default=None certainly sets a default, it's not clear how setdefault in any sense essentially sets a default, as default may be given any value.</p>
</div>
<span class="comment-copy">There is a similar <code>dict.setdefault</code> method with the same functionality.</span>
<span class="comment-copy">Tagging along here. <code>setdefault</code> exists and is usable, but care should be taken about <i>where one expects</i> to get the default value. You may want to explicitly do something like <code>os.environ['foo'] = os.environ.get('foo', 'my_default')</code>. <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow noreferrer">Actually setting the key is guaranteed to use</a> <a href="https://docs.python.org/3/library/os.html#os.putenv" rel="nofollow noreferrer"><code>putenv</code> where available</a>; so the default is set for this <i>process</i> and any subprocesses it might spawn. (Whereas <code>setdefault</code> is Python-code-level affecting the behavior of the mapping/dict lookup.)</span>
<span class="comment-copy">@hangtwenty: <code>os.environ.setdefault(key, default)</code> is guaranteed to modify the dictionary exactly the same way as <code>os.environ[key] = os.environ.get(key, default)</code> would. That's because the <code>os._Environ</code> class which backs that dictionary <a href="https://github.com/python/cpython/blob/e6a4755e6793942b950c1595e0c34bd66a0ee13e/Lib/os.py#L707-L710" rel="nofollow noreferrer">explicitly ensures this</a>.</span>
<span class="comment-copy">thanks for that info, I guess I was confusing myself! (I had a script I was using where I thought I saw the behavior above but it must have been something else.)</span>
