<div class="post-text" itemprop="text">
<p>What Am I missing? I'm having a dict of dicts (which was created on the fly) like this:</p>
<pre><code>googlers = 3
goog_dict = {}
dict_within = {'score':[], 'surprise':''}
for i in xrange(googlers):
   name = "goog_%s" %i
   goog_dict[name] = dict_within 
</code></pre>
<p>Now I want to add some data:</p>
<pre><code>tot =[23,22,21] 
best_res = 8


for i in xrange(len(tot)):

   name = "goog_%s" %i
   print name
   rest = tot[i] - best_res
   if rest % 2 == 0:
      trip = [best_res, rest/2, rest/2]

   elif rest % 2 != 0:
      rest_odd = rest / 2
      fract_odd = rest - rest_odd
      trip = [best_res, rest_odd, fract_odd]

   if (max(trip) - min(trip)) == 2:
      surpr_state = True
   elif (max(trip) - min(trip)) &lt; 2:
      surpr_state = False

   goog_dict[name]['score'].append(trip)
   goog_dict[name]['surprise'] = surpr_state
</code></pre>
<p>I'd expect my output to be:</p>
<pre><code>{'goog_2': {'surprise': True, 'score': [8, 7, 8]}, 'goog_1':{'surprise': True, 'score':  [8, 7, 7]}, 'goog_0': {'surprise': True, 'score': [8, 6, 7]}}
</code></pre>
<p>But what I get is this:</p>
<pre><code>{'goog_2': {'surprise': True, 'score': [[8, 7, 8], [8, 7, 7], [8, 6, 7]]}, 'goog_1':{'surprise': True, 'score': [[8, 7, 8], [8, 7, 7], [8, 6, 7]]}, 'goog_0': {'surprise': True, 'score': [[8, 7, 8], [8, 7, 7], [8, 6, 7]]}}
</code></pre>
<p>So why is the list <code>trip</code> append to <strong>all</strong> dicts instead of only the one with the current <code>name</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT:</p>
<p>As i guessed. Each element of your goog_dict is the same element. Read a little about relations, as it might be really helpful.</p>
<p>Change your code into:</p>
<pre><code>goog_dict = {}
googlers = 3
for i in xrange(googlers):
   name = "goog_%s" %i
   dict_within = {'score':[], 'surprise':''}
   goog_dict[name] = dict_within 
</code></pre>
<p>And now it should be ok.</p>
<p>Also take a look at this example. That's exactly, what happened in your case.</p>
<pre><code>&gt;&gt;&gt; a = []
&gt;&gt;&gt; goog_dict = {}
&gt;&gt;&gt; goog_dict['1'] = a
&gt;&gt;&gt; goog_dict['2'] = a
&gt;&gt;&gt; goog_dict['3'] = a
&gt;&gt;&gt; goog_dict
{'1': [], '3': [], '2': []}
&gt;&gt;&gt; goog_dict['1'].append([1, 2, 3])
&gt;&gt;&gt; goog_dict
{'1': [[1, 2, 3]], '3': [[1, 2, 3]], '2': [[1, 2, 3]]}
</code></pre>
<p>This one is quite a common mistake.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>googlers = 3
goog_dict = {}
for i in xrange(googlers):
   name = "goog_%s" %i
   goog_dict[name] = {'score':[], 'surprise':''}
</code></pre>
<p>The value of <code>"score"</code> in the dict pointed to the <em>same list</em> everywhere, hence the effect you saw. Try to paste your dict-building code into <a href="http://people.csail.mit.edu/pgbovine/python/tutor.html#mode=edit" rel="nofollow">this python code visualizer</a> to see what happens.</p>
</div>
<span class="comment-copy">Please show actual output from actual code. <a href="http://sscce.org/" rel="nofollow noreferrer">sscce.org</a></span>
<span class="comment-copy">And in example values, prefer actual Python syntax instead of some approximation.</span>
<span class="comment-copy">Maybe I wasn't clear enough. I just want to append the list <code>trip</code>. But the mapping doesn't work like expected because all dicts within the dict are being appended every run of the loop(!). So calling <code>goog_dict[name]['score']</code> doesn't force to <b>only</b> update the <code>goog_dict[name]</code>.</span>
<span class="comment-copy">I get it. See also my comment to lazyr's answer. Won't make that mistake again I guess;-) One should never forget that everything in Python is an object...</span>
<span class="comment-copy">..or use <code>goog_dict[name] =  copy.deepcopy(dict_within)</code> <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer">docs.python.org/3/library/copy.html#copy.deepcopy</a></span>
<span class="comment-copy">Indeed, this is working fine. Now, as I think about it does make sense. But I guess you really have to know how the code works internally to consider this in advance. The code visualizer is a pretty cool tool, however. Thanks!</span>
