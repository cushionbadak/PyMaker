<div class="post-text" itemprop="text">
<p>I am currently using Beautiful Soup to parse an HTML file and calling <code>get_text()</code>, but it seems like I'm being left with a lot of \xa0 Unicode representing spaces. Is there an efficient way to remove all of them in Python 2.7, and change them into spaces? I guess the more generalized question would be, is there a way to remove Unicode formatting?</p>
<p>I tried using: <code>line = line.replace(u'\xa0',' ')</code>, as suggested by another thread, but that changed the \xa0's to u's, so now I have "u"s everywhere instead. ):</p>
<p>EDIT: The problem seems to be resolved by <code>str.replace(u'\xa0', ' ').encode('utf-8')</code>, but just doing <code>.encode('utf-8')</code> without <code>replace()</code> seems to cause it to spit out even weirder characters, \xc2 for instance. Can anyone explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>\xa0 is actually non-breaking space in Latin1 (ISO 8859-1), also chr(160). You should replace it with a space.</p>
<p><code>string = string.replace(u'\xa0', u' ')</code></p>
<p>When .encode('utf-8'), it will encode the unicode to utf-8, that means every unicode could be represented by 1 to 4 bytes. For this case, \xa0 is represented by 2 bytes \xc2\xa0. </p>
<p>Read up on <a href="http://docs.python.org/howto/unicode.html">http://docs.python.org/howto/unicode.html</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>There's many useful things in Python's <code>unicodedata</code> library. One of them is the <a href="https://docs.python.org/2/library/unicodedata.html#unicodedata.normalize" rel="noreferrer"><code>.normalize()</code></a> function.</p>
<p>Try:</p>
<pre><code>new_str = unicodedata.normalize("NFKD", unicode_str)
</code></pre>
<p>Replacing NFKD with any of the other methods listed in the link above if you don't get the results you're after.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using .strip() at the end of your line
<code>line.strip()</code> worked well for me</p>
</div>
<div class="post-text" itemprop="text">
<p>I ran into this same problem pulling some data from a sqlite3 database with python.  The above answers didn't work for me (not sure why), but this did: <code>line = line.decode('ascii', 'ignore')</code> However, my goal was deleting the \xa0s, rather than replacing them with spaces.</p>
<p>I got this from <a href="http://nedbatchelder.com/text/unipain.html" rel="noreferrer">this super-helpful unicode tutorial by Ned Batchelder.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>string.replace('\\xa0', ' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I end up here while googling for the problem with not printable character. I use MySQL <code>UTF-8</code> <code>general_ci</code> and deal with polish language. For problematic strings I have to procced as follows:</p>
<pre><code>text=text.replace('\xc2\xa0', ' ')
</code></pre>
<p>It is just fast workaround and you probablly should try something with right encoding setup.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this code</p>
<pre><code>import re
re.sub(r'[^\x00-\x7F]+','','paste your string here').decode('utf-8','ignore').strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After trying several methods, to summarize it, this is how I did it. Following are two ways of avoiding/removing \xa0 characters from parsed HTML string.</p>
<p>Assume we have our raw html as following:</p>
<pre><code>raw_html = '&lt;p&gt;Dear Parent, &lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 1rem;"&gt;This is a test message, &lt;/span&gt;&lt;span style="font-size: 1rem;"&gt;kindly ignore it. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 1rem;"&gt;Thanks&lt;/span&gt;&lt;/p&gt;'
</code></pre>
<p>So lets try to clean this HTML string:</p>
<pre><code>from bs4 import BeautifulSoup
raw_html = '&lt;p&gt;Dear Parent, &lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 1rem;"&gt;This is a test message, &lt;/span&gt;&lt;span style="font-size: 1rem;"&gt;kindly ignore it. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 1rem;"&gt;Thanks&lt;/span&gt;&lt;/p&gt;'
text_string = BeautifulSoup(raw_html, "lxml").text
print text_string
#u'Dear Parent,\xa0This is a test message,\xa0kindly ignore it.\xa0Thanks'
</code></pre>
<p>The above code produces these characters <strong>\xa0</strong> in the string. To remove them properly, we can use two ways. </p>
<p><strong>Method # 1 (Recommended):</strong>
The first one is BeautifulSoup's <strong>get_text</strong> method with <strong>strip argument as True</strong>
So our code becomes:</p>
<pre><code>clean_text = BeautifulSoup(raw_html, "lxml").get_text(strip=True)
print clean_text
# Dear Parent,This is a test message,kindly ignore it.Thanks
</code></pre>
<p><strong>Method # 2:</strong>
The other option is to use python's library unicodedata</p>
<pre><code>import unicodedata
text_string = BeautifulSoup(raw_html, "lxml").text
clean_text = unicodedata.normalize("NFKD",text_string)
print clean_text
# u'Dear Parent,This is a test message,kindly ignore it.Thanks'
</code></pre>
<p>I have also detailed these methods <a href="http://www.alirazabhayani.com/2018/01/python-html-to-text-for-sending-sms-sms.html" rel="noreferrer">on this blog</a> which you may want to refer.</p>
</div>
<div class="post-text" itemprop="text">
<p>0xA0 (Unicode) is 0xC2A0 in UTF-8. <code>.encode('utf8')</code> will just take your Unicode 0xA0 and replace with UTF-8's 0xC2A0. Hence the apparition of 0xC2s... Encoding is not replacing, as you've probably realized now.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Beautiful Soup, you can pass <code>get_text()</code> the strip parameter, which strips white space from the beginning and end of the text. This will remove <code>\xa0</code> or any other white space if it occurs at the start or end of the string. Beautiful Soup replaced an empty string with <code>\xa0</code> and this solved the problem for me.</p>
<pre><code>mytext = soup.get_text(strip=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generic version with the regular expression (It will remove all the control characters):</p>
<pre><code>import re
def remove_control_chart(s):
    return re.sub(r'\\x..', '', s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's the equivalent of a space character, so strip it</p>
<pre><code>print(string.strip()) # no more xa0
</code></pre>
</div>
<span class="comment-copy"><code>str.replace('\xa0',' ')</code>?</span>
<span class="comment-copy">tried that already, 'ascii' codec can't decode byte 0xa0 in position 0: ordinal not in range(128)</span>
<span class="comment-copy">embrace Unicode. Use <code>u''</code>s instead of <code>''</code>s. :-)</span>
<span class="comment-copy">tried using str.replace(u'\xa0', ' ') but got "u"s everywhere instead of \xa0s :/</span>
<span class="comment-copy">If the string is the unicode one, you have to use the <code>u' '</code> replacement, not the <code>' '</code>. Is the original string the unicode one?</span>
<span class="comment-copy">I don't know a huge amount about Unicode and character encodings.. but it seems like <a href="http://docs.python.org/2/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer">unicodedata.normalize</a> would be more appropriate than str.replace</span>
<span class="comment-copy">Yours is workable advice for strings, but note that all references to this string will also need to be replaced.  For example, if you have a program that opens files, and one of the files has a non-breaking space in its name, you will need to <i>rename</i> that file in addition to doing this replacement.</span>
<span class="comment-copy"><a href="http://codepoints.net/U+00a0" rel="nofollow noreferrer">U+00a0 is a non-breakable space Unicode character</a> that can be encoded as <code>b'\xa0'</code> byte in latin1 encoding, as two bytes <code>b'\xc2\xa0'</code> in utf-8 encoding. It can be represented as <code>&amp;nbsp;</code> in html.</span>
<span class="comment-copy">When I try this, I get <code>UnicodeDecodeError: 'ascii' codec can't decode byte 0xa0 in position 397: ordinal not in range(128)</code>.</span>
<span class="comment-copy">Was stuck in for 1hour and finally solved. Thanks a lot.</span>
<span class="comment-copy">this is brilliant. This should be the accepted answer.</span>
<span class="comment-copy">Totally agree. Easy, clear, short and to the point solution. Thumbs up.</span>
<span class="comment-copy">This did the trick. Had some HTML generated by... Microsoft Word with lots of weird unicode characters and this somehow cleaned them all.</span>
<span class="comment-copy">Not so sure, you may want <code>normalize('NFKD', '1º\xa0dia')</code> to return '1º dia' but it returns '1o dia'</span>
<span class="comment-copy">here is the <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer">docs about <code>unicodedata.normalize</code></a></span>
<span class="comment-copy">This does not work for me on Python 2.7</span>
<span class="comment-copy">You are now removing anything that isn't a ASCII character, you are probably masking your actual problem. Using <code>'ignore'</code> is like shoving through the shift stick even though you don't understand how the clutch works..</span>
<span class="comment-copy">@MartijnPieters The linked unicode tutorial is good, but you are completely correct - <code>str.encode(..., 'ignore')</code> is the Unicode-handling equivalent of <code>try: ... except: ...</code>. While it might hide the error message, it rarely solves the problem.</span>
<span class="comment-copy">for some purposes like dealing with EMAIL or URLS it seems perfect to use <code>.decode('ascii', 'ignore')</code></span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/11566398/4279">samwize's answer</a> didn't work for you because it works on <b>Unicode</b> strings. <code>line.decode()</code> in your answer suggests that your input is a <b>bytestring</b> (you should not call <code>.decode()</code> on a Unicode string (to enforce it, the method is removed in Python 3). I don't understand how it is possible to see <a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow noreferrer">the tutorial that you've linked in your answer</a> and miss the difference between bytes and Unicode (do not mix them).</span>
<span class="comment-copy">@RyanMartin: this replaces <b>four bytes</b>: <code>len(b'\\xa0') == 4</code> but <code>len(b'\xa0') == 1</code>. If possible; you should fix upstream that generates these escapes.</span>
<span class="comment-copy">this works if <code>text</code> is a bytestring that represents a text encoded using utf-8. If you are working with text; decode it to Unicode first (<code>.decode('utf-8')</code>) and encode it to a bytestring only at the very end (if API does not support Unicode directly e.g., <code>socket</code>). All intermediate operations on the text should be performed on Unicode.</span>
<span class="comment-copy">Thank you, Method 1 is what I was looking all after.</span>
<span class="comment-copy"><code>0xc2a0</code> is ambiguous (byte order). Use <code>b'\xc2\xa0'</code> bytes literal instead.</span>
<span class="comment-copy"><code>strip=True</code> works only if <code>&amp;nbsp;</code> is at the beginning or end of each bit of text. It won't remove the space if it is inbetween other characters in the text.</span>
