<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/579687/how-do-i-copy-a-string-to-the-clipboard-on-windows-using-python">How do I copy a string to the clipboard on Windows using Python?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I just need a python script that copies text to the clipboard.</p>
<p>After the script gets executed i need the output of the text to be pasted to another source.
Is it possible to write a python script that does this job?</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://pypi.org/project/pyperclip/" rel="noreferrer">Pyperclip</a>.  Example (taken from Pyperclip site):</p>
<pre><code>import pyperclip
pyperclip.copy('The text to be copied to the clipboard.')
spam = pyperclip.paste()
</code></pre>
<p>Also, see <a href="https://github.com/kennethreitz/xerox" rel="noreferrer">Xerox</a>.  But it appears to have more dependencies.</p>
</div>
<div class="post-text" itemprop="text">
<p>On mac i use this function.</p>
<pre><code>import os 
data = "hello world"
os.system("echo '%s' | pbcopy" % data)
</code></pre>
<p>It will copy "hello world" to the clipboard. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use Tkinter: </p>
<p><a href="https://stackoverflow.com/a/4203897/2804197">https://stackoverflow.com/a/4203897/2804197</a></p>
<pre><code>try:
    from Tkinter import Tk
except ImportError:
    from tkinter import Tk
r = Tk()
r.withdraw()
r.clipboard_clear()
r.clipboard_append('i can has clipboardz?')
r.update() # now it stays on the clipboard after the window is closed
r.destroy()
</code></pre>
<p>(Original author: <a href="https://stackoverflow.com/users/449571/atomizer">https://stackoverflow.com/users/449571/atomizer</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://coffeeghost.net/2010/10/09/pyperclip-a-cross-platform-clipboard-module-for-python/">Pyperclip</a> seems to be up to the task.</p>
</div>
<div class="post-text" itemprop="text">
<p>To use native Python directories, use:</p>
<pre><code>import subprocess

def copy2clip(txt):
    cmd='echo '+txt.strip()+'|clip'
    return subprocess.check_call(cmd, shell=True)
</code></pre>
<p>Then use:</p>
<pre><code>copy2clip('This is on my clipboard!')
</code></pre>
<p>to call the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the only way that worked for me using <code>Python 3.5.2</code> plus it's the easiest to implement w/ using the standard <code>PyData</code> suite</p>
<p>Shout out to <a href="https://stackoverflow.com/users/4502363/gadi-oron">https://stackoverflow.com/users/4502363/gadi-oron</a> for the answer (I copied it completely) from <a href="https://stackoverflow.com/questions/579687/how-do-i-copy-a-string-to-the-clipboard-on-windows-using-python">How do I copy a string to the clipboard on Windows using Python?</a></p>
<pre><code>import pandas as pd
df=pd.DataFrame(['Text to copy'])
df.to_clipboard(index=False,header=False)
</code></pre>
<p>I wrote a little wrapper for it that I put in my <code>ipython</code> profile &lt;3 </p>
</div>
<div class="post-text" itemprop="text">
<p>GTK3:</p>
<pre><code>#!/usr/bin/python3

from gi.repository import Gtk, Gdk


class Hello(Gtk.Window):

    def __init__(self):
        super(Hello, self).__init__()
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text("hello world", -1)
        Gtk.main_quit()


def main():
    Hello()
    Gtk.main()

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I try this clipboard 0.0.4 and it works well.</p>
<p><a href="https://pypi.python.org/pypi/clipboard/0.0.4" rel="nofollow">https://pypi.python.org/pypi/clipboard/0.0.4</a></p>
<pre><code>import clipboard
clipboard.copy("abc")  # now the clipboard content will be string "abc"
text = clipboard.paste()  # text will have the content of clipboard
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more answer to improve on:
<a href="https://stackoverflow.com/a/4203897/2804197">https://stackoverflow.com/a/4203897/2804197</a>
and <a href="https://stackoverflow.com/a/25476462/1338797">https://stackoverflow.com/a/25476462/1338797</a> (Tkinter).</p>
<p>Tkinter is nice, because it's either included with Python (Windows) or easy to install (Linux), and thus requires little dependencies for the end user.</p>
<p>Here I have a "full-blown" example, which copies the arguments or the standard input, to clipboard, and - when not on Windows - waits for the user to close the application:</p>
<pre><code>import sys

try:
    from Tkinter import Tk
except ImportError:
    # welcome to Python3
    from tkinter import Tk
    raw_input = input

r = Tk()
r.withdraw()
r.clipboard_clear()

if len(sys.argv) &lt; 2:
    data = sys.stdin.read()
else:
    data = ' '.join(sys.argv[1:])

r.clipboard_append(data)

if sys.platform != 'win32':
    if len(sys.argv) &gt; 1:
        raw_input('Data was copied into clipboard. Paste and press ENTER to exit...')
    else:
        # stdin already read; use GUI to exit
        print('Data was copied into clipboard. Paste, then close popup to exit...')
        r.deiconify()
        r.mainloop()
else:
    r.destroy()
</code></pre>
<p>This showcases:</p>
<ul>
<li>importing Tk across Py2 and Py3</li>
<li><code>raw_input</code> and <code>print()</code> compatibility</li>
<li>"unhiding" Tk root window when needed</li>
<li>waiting for exit on Linux in two different ways.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>PyQt5:</p>
<pre><code>from PyQt5.QtWidgets import QApplication
from PyQt5 import QtGui
from PyQt5.QtGui import QClipboard
import sys


def main():


    app=QApplication(sys.argv)
    cb = QApplication.clipboard()
    cb.clear(mode=cb.Clipboard )
    cb.setText("Copy to ClipBoard", mode=cb.Clipboard)
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an altered version of @Martin Thoma's answer for <strong>GTK3</strong>. I found that the original solution resulted in the process never ending and my terminal hung when I called the script. Changing the script to the following resolved the issue for me.</p>
<pre><code>#!/usr/bin/python3

from gi.repository import Gtk, Gdk
import sys
from time import sleep

class Hello(Gtk.Window):

    def __init__(self):
        super(Hello, self).__init__()

        clipboardText = sys.argv[1]
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text(clipboardText, -1)
        clipboard.store()


def main():
    Hello()



if __name__ == "__main__":
    main()
</code></pre>
<p>You will probably want to change what clipboardText gets assigned to, in this script it is assigned to the parameter that the script is called with.</p>
<p><strong>On a fresh ubuntu 16.04 installation, I found that I had to install the <code>python-gobject</code> package for it to work without a module import error.</strong></p>
</div>
<span class="comment-copy">This has been asked many times. Have you tried <a href="http://stackoverflow.com/search?q=python+windows+clipboard">searching for Python+Windows+clipboard?</a></span>
<span class="comment-copy">I tried it on my system, and .setcb doesn't work, but .copy does. I'm using pyperclip 1.5.4 on py 2.7. Just in case someone runs into the same problems - and @robert, I'd love to hear why this syntax works on your system but doesn't on mine.</span>
<span class="comment-copy">.copy seems to be the offical one. <a href="https://github.com/asweigart/pyperclip" rel="nofollow noreferrer">github.com/asweigart/pyperclip</a></span>
<span class="comment-copy">@VincentTjeng updated</span>
<span class="comment-copy">what if you want to copy a string, not literal text? Then what do you do?</span>
<span class="comment-copy">This example will break sooner or later; when used incorrectly it can lead to huge security leaks, executing any code that should be copied to the clipboard... There are so many better ways to pass data to stdin of a process than calling os.system("echo ...."), like the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module...</span>
<span class="comment-copy">This method removes ' characters from the text</span>
<span class="comment-copy">Windows user can the clip command instead of pbcopy.</span>
<span class="comment-copy">Does not working for me - clipboard have the same data, Python 3.5.2</span>
<span class="comment-copy">doesn't seem to work out of the box with python3</span>
<span class="comment-copy">Please note: if you're on Linux (or similar, X11-like), the clipboard owner process must be running for you to be able to paste the clipboard contents. Unless you have a clipboard manager (like Klipper or parcellite, there are dozens) - which makes the clipboard Windows-like (permanent).</span>
<span class="comment-copy">@ChaseRoberts - oh come on! You only need to fix the import to <code>from tkinter import Tk</code>. Please thank the authors of Python 3 for their 'cleanups'.</span>
<span class="comment-copy">@ TomaszGandor Thanks for the hint. I edited my answer to import tkinter on error.</span>
<span class="comment-copy">You miss one line in the original answer. You need to put 'r.update()' behind 'r.clipboard_append()'. Otherwise it doesn't work.</span>
<span class="comment-copy">CalledProcessError                        Traceback (most recent call last) &lt;ipython-input-91-c0c14042eb28&gt; in &lt;module&gt;()       4     cmd='echo '+txt.strip()+'|clip'       5     return subprocess.check_call(cmd, shell=True) ----&gt; 6 copy2clip('This is on my clipboard!')  &lt;ipython-input-91-c0c14042eb28&gt; in copy2clip(txt)       3 def copy2clip(txt):       4     cmd='echo '+txt.strip()+'|clip' ----&gt; 5     return subprocess.check_call(cmd, shell=True)  ...  CalledProcessError: Command 'echo This is on my clipboard!|clip' returned non-zero exit status 127</span>
<span class="comment-copy">this works, but on windows, <code>clip</code> is a windows only command (and sometimes it's not part of the system, you have to download &amp; install it manually on WinXP)</span>
<span class="comment-copy">Seems good but has an extra '\n'.</span>
<span class="comment-copy">This is for windows . Is there an option for ubuntu ?</span>
<span class="comment-copy">I did this with OSX</span>
<span class="comment-copy">For me, this left  the quotes at the start and end of the string, but deleting two characters wasn’t the end of the world</span>
<span class="comment-copy">A great code! <a href="https://github.com/terryyin/clipboard/blob/master/clipboard.py" rel="nofollow noreferrer">github.com/terryyin/clipboard/blob/master/clipboard.py</a></span>
<span class="comment-copy">Don't bother with this, it just uses <code>pyperclip</code>. Use that instead.</span>
<span class="comment-copy">This doesn't work on Ubuntu 14.04 LTS, please update your soluton for that immediately.</span>
<span class="comment-copy">@VickyDev - it was developed on Ubuntu 14.04 LTS, and it works. Try <code>sudo apt-get install python-tk</code>, BTW.</span>
<span class="comment-copy">If you are using <code>QApplication.clipboard()</code> you don't need to import <code>QClipboard</code>.</span>
