<div class="post-text" itemprop="text">
<pre><code>a = 132

b = [0, 10, 30, 60, 100, 150, 210, 280, 340, 480, 530]
</code></pre>
<p>I want to know that <code>a</code> should be in the 6th position in ordered list <code>b</code>.</p>
<p>What's the most pythonic way to do so?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/py3k/library/bisect.html">bisect</a>. It's not the most beautiful API, but it's exactly what you need.</p>
<p>You'll want to use <code>bisect.bisect</code>, which returns exactly what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/bisect.html" rel="noreferrer"><code>bisect</code></a> is a module in the Python Standard Library that is perfect for this task. The function <code>bisect</code> in the module <code>bisect</code> will give you the index of the insertion point for the value.</p>
<p>Let me give a code example for <code>bisect</code></p>
<pre><code>from bisect import bisect
a = 132
b = [0, 10, 30, 60, 100, 150, 210, 280, 340, 480, 530]
print(bisect(b, a))
</code></pre>
<p>The result will be <code>5</code> because the list is 0-based, so in fact it is the 6th position.</p>
<p>What you can do know is to use the result for an <code>insert</code>.</p>
<pre><code>index = bisect(b, a)
b.insert(index, a)
</code></pre>
<p>or without the intermediate variable</p>
<pre><code>b.insert(bisect(b, a), a)
</code></pre>
<p>Now <code>b</code> will be <code>[0, 10, 30, 60, 100, 132, 150, 210, 280, 340, 480, 530]</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>There is further concern with edge cases. For example, suppose you want to select the elements in the aforementioned <code>b</code> in the range of <code>(a, c)</code> and you pick them out using </p>
<pre><code>b[idx_a:idx_c]
</code></pre>
<p>then you need to think about the case where <code>a, c</code> are actually elements of <code>b</code>. Note that</p>
<pre><code>bisect.bisect(b, 10)
bisect.bisect(b, 11)
</code></pre>
<p>would both give index 2. Thus if <code>a=10</code> we need to lower the index by 1. Fortunately, there is a function <code>bisect.bisect_left</code> which does exactly this, i.e., in our example</p>
<pre><code>bisect.bisect_left(b, 10)
</code></pre>
<p>gives 1. </p>
<p>Overall, the left index should be computed using <code>bisect.bisect_left()</code> and the right index <code>bisect.bisect_right()</code> (which is the same as <code>bisect.bisect()</code>).</p>
</div>
<span class="comment-copy"><code>a</code> will actually be in the 6th position in <code>b</code>, not the 4th. And as @madjar noted, used the <code>bisect</code> module.  <code>bisect.bisect(b, a)</code> to get the position (or <code>bisect_[left|right]</code>) and for insertion <code>bisect.insort(b, a)</code> or <code>insort[left|right]</code>.</span>
<span class="comment-copy">related <a href="http://stackoverflow.com/questions/1109804/does-python-have-a-sorted-list" title="does python have a sorted list">stackoverflow.com/questions/1109804/â€¦</a></span>
<span class="comment-copy">Why is it "not the most beautiful API"?</span>
<span class="comment-copy">thanks! But @madjar answered first, so upvote for you!</span>
<span class="comment-copy">That's OK. I upvoted madjar. :-)</span>
