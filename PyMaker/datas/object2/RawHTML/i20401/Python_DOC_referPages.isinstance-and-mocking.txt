<div class="post-text" itemprop="text">
<pre><code>class HelloWorld(object):
    def say_it(self):
        return 'Hello I am Hello World'

def i_call_hello_world(hw_obj):
    print 'here... check type: %s' %type(HelloWorld)
    if isinstance(hw_obj, HelloWorld):
        print hw_obj.say_it()

from mock import patch, MagicMock
import unittest

class TestInstance(unittest.TestCase):
    @patch('__main__.HelloWorld', spec=HelloWorld)
    def test_mock(self,MK):
        print type(MK)
        MK.say_it.return_value = 'I am fake'
        v = i_call_hello_world(MK)
        print v

if __name__ == '__main__':
    c = HelloWorld()
    i_call_hello_world(c)
    print isinstance(c, HelloWorld)
    unittest.main()
</code></pre>
<p>Here is the traceback</p>
<pre><code>here... check type: &lt;type 'type'&gt;
Hello I am Hello World
True
&lt;class 'mock.MagicMock'&gt;
here... check type: &lt;class 'mock.MagicMock'&gt;
E
======================================================================
ERROR: test_mock (__main__.TestInstance)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/mock.py", line 1224, in patched
    return func(*args, **keywargs)
  File "t.py", line 18, in test_mock
    v = i_call_hello_world(MK)
  File "t.py", line 7, in i_call_hello_world
    if isinstance(hw_obj, HelloWorld):
TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types

----------------------------------------------------------------------
Ran 1 test in 0.002s
</code></pre>
<p>Q1. Why is this error thrown? They are <code>&lt;class type='MagicMock&gt;</code></p>
<p>Q2. How do I pause the mocking so that the first line will pass if the error is fixed?</p>
<p>From the <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.__class__" rel="noreferrer">doc</a></p>
<blockquote>
<p>Normally the <strong>class</strong> attribute of an object will return its type.
  For a mock object with a spec <strong>class</strong> returns the spec class
  instead. This allows mock objects to pass isinstance tests for the
  object they are replacing / masquerading as: </p>
</blockquote>
<pre><code>mock = Mock(spec=3)
isinstance(mock, int)
True
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>isinstance</code>, instead check for the existence of the <code>say_it</code> method. If the method exists, call it:</p>
<pre><code>if hasattr(hw_obj, 'say_it'):
    print hw_obj.say_it()
</code></pre>
<p>This is a better design anyway: relying on type information is much more brittle.</p>
</div>
<div class="post-text" itemprop="text">
<p>IMHO this is a good question and saying "<em>don't use <code>isinstance</code>, use duck typing instead</em>" is a bad answer. Duck typing is great, but not a silver bullet. Sometimes <code>isinstance</code> is necessary, even if it is not pythonic. For instance, if you work with some library or legacy code that isn't pythonic you must play with <code>isinstance</code>. It is just the real world and mock was designed to fit this kind of work.</p>
<p>In the code the big mistake is when you write:</p>
<pre><code>@patch('__main__.HelloWorld', spec=HelloWorld)
def test_mock(self,MK):
</code></pre>
<p>From <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="noreferrer"><code>patch</code> documentation</a> we read (emphasize is mine):</p>
<blockquote>
<p>Inside the body of the function or with statement, the target is patched with a new <strong>object</strong>.</p>
</blockquote>
<p>That means when you patch the <code>HelloWorld</code> <strong>class object</strong> the reference to <code>HelloWorld</code> will be replaced by a <code>MagicMock</code> object for the context of the <code>test_mock()</code> function. </p>
<p>Then, when <code>i_call_hello_world()</code> is executed in <code>if isinstance(hw_obj, HelloWorld):</code> <code>HelloWorld</code> is a <code>MagicMock()</code> object and not a class (as the error suggests).</p>
<p>That behavior is because as a side effect of patching a class reference the 2nd argument of <code>isinstance(hw_obj, HelloWorld)</code> becomes an object (a <code>MagicMock</code> instance). This is neither a <code>class</code> or a <code>type</code>. A simple experiment to understand this behavior is to modify <code>i_call_hello_world()</code> as follows:</p>
<pre><code>HelloWorld_cache = HelloWorld

def i_call_hello_world(hw_obj):
    print 'here... check type: %s' %type(HelloWorld_cache)
    if isinstance(hw_obj, HelloWorld_cache):
        print hw_obj.say_it()
</code></pre>
<p>The error will disappear because the original reference to <code>HelloWorld</code> class is saved in <code>HelloWorld_cache</code> when you load the module. When the patch is applied it will change just <code>HelloWorld</code> and not <code>HelloWorld_cache</code>.</p>
<p>Unfortunately, the previous experiment doesn't give us any way to play with cases like yours because you cannot change the library or legacy code to introduce a trick like this. Moreover, these are that kind of tricks that we would like to never see in our code.</p>
<p>The good news is that you can do something ,but you cannot just <code>patch</code> the <code>HelloWord</code> reference in the module where you have  <code>isinstace(o,HelloWord)</code> code to test. The best way depends on the real case that you must solve. In your example you can just create a <code>Mock</code> to use as <code>HelloWorld</code> object, use <code>spec</code> argument to dress it as <code>HelloWorld</code> instance and pass the <code>isinstance</code> test. This is exactly one of the aims for which <code>spec</code> is designed. Your test would be written like this:</p>
<pre><code>def test_mock(self):
    MK = MagicMock(spec=HelloWorld) #The hw_obj passed to i_call_hello_world
    print type(MK)
    MK.say_it.return_value = 'I am fake'
    v = i_call_hello_world(MK)
    print v
</code></pre>
<p>And the output of just unittest part is</p>
<pre><code>&lt;class 'mock.MagicMock'&gt;
here... check type: &lt;type 'type'&gt;
I am fake
None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Michele d'Amico provides the <a href="https://stackoverflow.com/a/26567750/1093087">correct answer</a> in my view and I strongly recommend reading it. But it took me a while a grok and, as I'm sure I'll be coming back to this question in the future, I thought a minimal code example would help clarify the solution and provide a quick reference:</p>
<pre><code>from mock import patch, mock

class Foo(object): pass

# Cache the Foo class so it will be available for isinstance assert.
FooCache = Foo

with patch('__main__.Foo', spec=Foo):
    foo = Foo()
    assert isinstance(foo, FooCache)
    assert isinstance(foo, mock.mock.NonCallableMagicMock)

    # This will cause error from question:
    # TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types
    assert isinstance(foo, Foo)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by being inherited from the <code>MagicMock</code> class and overriding the <code>__subclasscheck__</code> method:</p>
<pre><code>class BaseMagicMock(MagicMock):

    def __subclasscheck__(self, subclass):
        # I couldn't find another way to get the IDs
        self_id = re.search("id='(.+?)'", self.__repr__()).group(1)
        subclass_id = re.search("id='(.+?)'", subclass.__repr__()).group(1)
        return self_id == subclass_id
</code></pre>
<p>And then you can use this class with the <code>@patch</code> decorator:</p>
<pre><code>class FooBarTestCase(TestCase):
    ...

    @patch('app.services.ClassB', new_callable=BaseMagicMock)
    @patch('app.services.ClassA', new_callable=BaseMagicMock)
    def test_mock_for_issubclass_support(self, ClassAMock, ClassBMock):
        check_for_subclasses(ClassAMock)
</code></pre>
<p>That's it!</p>
<hr/>
<hr/>
<hr/>
<p>Remarks:</p>
<p>You <strong>MUST</strong> mock <strong>all</strong> classes which are compared using <code>issubclass</code>.</p>
<p>Example:</p>
<pre><code>def check_for_subclasses(class_1):
    if issubclass(class_1, ClassA): # it's mocked above using BaseMagicMock
        print("This is Class A")
    if issubclass(class_1, ClassB): # it's mocked above using BaseMagicMock
        print("This is Class B")
    if issubclass(class_1, ClassC): # it's not mocked with @patch
        print("This is Class C")
</code></pre>
<p><code>issubclass(class_1, ClassC)</code> will cause an error 
<code>{TypeError}issubclass() arg 1 must be a class</code> because <code>ClassC</code> contains a default <code>__issubclass__</code> method. And then we should handle the test like this:</p>
<pre><code>class FooBarTestCase(TestCase):
    ...

    @patch('app.services.ClassC', new_callable=BaseMagicMock)
    @patch('app.services.ClassB', new_callable=BaseMagicMock)
    @patch('app.services.ClassA', new_callable=BaseMagicMock)
    def test_mock_for_issubclass_support(self, ClassAMock, ClassBMock):
        check_for_subclasses(ClassAMock)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've been wrestling with this myself lately while writing some unit tests. One potential solution is to not actually try to mock out the entire HelloWorld class, but instead mock out the methods of the class that are called by the code you are testing. For example, something like this should work:</p>
<pre><code>class HelloWorld(object):
    def say_it(self):
        return 'Hello I am Hello World'

def i_call_hello_world(hw_obj):
    if isinstance(hw_obj, HelloWorld):
        return hw_obj.say_it()

from mock import patch, MagicMock
import unittest

class TestInstance(unittest.TestCase):
    @patch.object(HelloWorld, 'say_it')
    def test_mock(self, mocked_say_it):
        mocked_say_it.return_value = 'I am fake'
        v = i_call_hello_world(HelloWorld())
        self.assertEquals(v, 'I am fake')
</code></pre>
</div>
<span class="comment-copy">Now you know why the use of <code>isinstance</code> is discouraged.</span>
<span class="comment-copy">@MarkRansom Yes it is evil. But what is the best practice to ensure the interface we pass in is CORRECT? <code>hasattr</code> doesn't seem to solve the gap either. Two objects may have same method names and uses the wrong object will make the test pass, I think? I guess the question's focus has shifted! Ahh.</span>
<span class="comment-copy">Thanks Mark. I think the topic is shifted. But the problem with the error hasn't solved yet :( I will make a new post when I think of a more concrete question with respect to isinstance. Thanks!</span>
<span class="comment-copy">You're getting the error because <code>HelloWorld</code> (after patching) isn't a class or a type, but a <code>mock.MagicMock</code> instance. As the error says, the second argument must be a class, type, or tuple of classes or types. The <code>spec</code> thing you refer to us for the <i>first</i> argument. That's what you're showing in your last example (from the docs). Why, exactly, do you wish to check whether your <code>HelloWorld</code> instance is an instance of an emulated type (which is, I think, impossible)?</span>
<span class="comment-copy">"one of the many nice things about Python is that it allows "Duck Typing" where you don't care about the exact type of an object as long as it does what you want"  - until it doesn't.</span>
<span class="comment-copy">Thanks. But the first question would really be why is it throwing that error? And two, adopting this change, if two objs have the same method name, the test will pass, right?</span>
<span class="comment-copy">I don't know why the error is thrown.  It doesn't matter, soon you won't be using <code>isinstance</code> :)  And yes, now you can pass in any object that has the method, and behaves "properly", and the test will pass.</span>
<span class="comment-copy">Thanks. I will stop using isinstance after reading the major fallback. BUt still... if <code>MyMomKitchenObject</code> has <code>say_it</code> and programmer uses that as the input of the function... the test will still PASS, doesn't it? So how should I verify my unittest actually works? or how should I determine its correctness in my code? Just like integration test, two objs can have 99% same interface, and the system under test never uses that 1% different, and the test still passes, the system will "work without problem".</span>
<span class="comment-copy">Don't use <code>isinstance()</code> is not a solution for me: I try to mock datetime.datetime and it is used in external libraries. In my case <code>django</code> uses it.</span>
<span class="comment-copy">Downvote, suggesting to not use <code>isinstance</code> is a terrible answer. Do it right with Mock, much like this: <a href="http://stackoverflow.com/a/11283173/169153">stackoverflow.com/a/11283173/169153</a></span>
<span class="comment-copy">This statement is incorrect: "HelloWorld is a Mock() object and not a class (as the error suggested)." If you catch the original TypeError and debug, you'll see that executing <code>type(HelloWorld)</code> will also return a &lt;class 'mock.MagicMock'&gt;.</span>
<span class="comment-copy">@seanazlin I'll check it later. But why the error say that HelloWord is not a class or type? Anyway thanks for your feedback.</span>
<span class="comment-copy">@SeanAzlin Please type on your python console follow statements: <code>type(MagicMock())</code>, <code>type(MagicMock)</code>, <code>type(object())</code>, <code>type(object)</code>. After that I hope you'll understand that what I had wrote is correct. Anyway if your comment about I used to write <code>Mock</code> instead of <code>MagicMock</code>, I think that is wrong but not a very big issue ... It is just a detail that I will fix. Pay more attention when you use downvote. My answer is correct and it is the only one that cover the original question without say *Hey guy! Don't do that".</span>
<span class="comment-copy">I think I see your point. type(HelloWorld) returns classobj but type(MagicMock(spec=HelloWorld)) returns mock.MagicMock. When previously debugging in the context of @mock.patch, though, I was seeing <code>type(HelloWorld)</code> return <code>&lt;class 'mock.MagicMock'&gt;</code>, not <code>mock.MagicMock</code>. The OP was seeing the same thing. Your original solution as-written seems to imply that an output from type(object) of <code>&lt;class 'mock.MagicMock'&gt;</code> means that the object would be allowed as the 2nd arg of isinstance() when the OP already stated that it isn't. Am I still misunderstanding your solution?</span>
<span class="comment-copy">@SeanAzlin What I mean is that the output of <code>type(MagicMock())</code> (so the type of a <code>MegicMock</code> <b>object instance</b>) is exactly <code>&lt;class 'mock.MagicMock'&gt;</code>. Anyway, even it <i>seams</i> a class it is not a class but an object when you try to use it in isinstance. This ambiguity is removed in python 3 where isinstace take just <code>type</code> or tuple of <code>type</code>s. In python class and object concepts are really close... When you use <code>patch</code> you replace the original reference by a new object (<code>MagicMock</code> as default) event if it is a class... class are just functions that return an object.</span>
<span class="comment-copy">What about if you <b>need</b> mock the class because lot of internal methods cannot used in testing context? The question speaking about <i>Instance and Mocking</i> and not <i>Mocking a method</i> and where are the answers to Q1 and Q2 ? I don't downvote your answer like you did but maybe you need to pay more attention to questions before file answers. About your answer from a technical point of view why use <code>patch.object</code> you don't really need it. You can use <code>@patch('__main__.HelloWorld.say_it', return_value='I am fake')</code> that is more concise and simpler to read.</span>
<span class="comment-copy">@Micheled'Amico Fine points. What I'm proposing is only a potential solution (or maybe work-around is a better term) for some situations, such as when one is unit testing a function that uses isinstance() and that calls the method of a class that can't be mocked because of this issue. I think that work-around may be more appealing to some than previously suggested solutions. It worked for me in my situation.</span>
<span class="comment-copy">What you cannot do when you have <code>isinstance()</code> call is just patch the class, but you can use a mock for the object. BTW: pay attention when you use <code>patch.object</code>: use it only when you really need it or lot of time you will not understand why your patch doesn't work. (Consider to remove the downvote from my answer because your observation are wrong)</span>
<span class="comment-copy">Hey.... I know that if you click up arrow that not become 0 but 1. Anyway you had to do the wrong thing and you must fix it..... whatever it is</span>
