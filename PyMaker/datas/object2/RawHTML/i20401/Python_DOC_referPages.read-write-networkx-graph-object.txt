<div class="post-text" itemprop="text">
<p>I am trying to deal with a super-massive NetworkX Graph object with hundreds of millions of nodes. I'd like to be able to write it to file as to not consume all my computer memory. However, I need to constantly be searching across existing nodes, updating edges, etc.</p>
<p>Is there a good solution for this? I'm not sure how it would work with any of the file formats provided on <a href="http://networkx.lanl.gov/reference/readwrite.html">http://networkx.lanl.gov/reference/readwrite.html</a></p>
<p>The only solution i can think of is to store each node as a separate file with references to other nodes in the filesystem - that way, opening one node for examination doesn't overload the memory. Is there an existing filesystem for large amounts of data (e.g. PyTables) to do this without writing my own boilerplate code?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you've built this as a NetworkX graph, then it will already be in memory. For this large of a graph, my guess is you'll have to do something similar to what you suggested with separate files. But, instead of using separate files, I'd use a database to store each node with many-to-many connections between nodes. In other words you'd have a table of nodes, and a table of edges, then to query for the neighbors of a particular node you could just query for any edges that have that particular node on either end. This should be fast, though I'm not sure if you'll be able to take advantage of NetworkX's analysis functions without first building the whole network in memory. </p>
</div>
<div class="post-text" itemprop="text">
<p>First try <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a>; it's designed to serialize arbitrary objects.</p>
<p>An example of creating a <code>DiGraph</code> and serializing to a file:</p>
<pre><code>import pickle
import networkx as nx

dg = nx.DiGraph()
dg.add_edge('a','b')
dg.add_edge('a','c')
pickle.dump(dg, open('/tmp/graph.txt', 'w'))
</code></pre>
<p>An example of loading a <code>DiGraph</code> from a file:</p>
<pre><code>import pickle
import networkx as nx

dg = pickle.load(open('/tmp/graph.txt'))
print dg.edges()
</code></pre>
<p>Output:</p>
<pre><code>[('a', 'c'), ('a', 'b')]
</code></pre>
<p>If this isn't efficient enough, I would write your own routine to serialize:</p>
<ol>
<li>edges and</li>
<li>nodes (in case a node is incident to no edges).</li>
</ol>
<p>Note that using list comprehensions when possible may be much more efficient (instead of standard for loops). </p>
<p>If <em>this</em> is not efficient enough, I'd call a C++ routine from within Python:
<a href="http://docs.python.org/extending/extending.html" rel="nofollow noreferrer">http://docs.python.org/extending/extending.html</a></p>
</div>
<span class="comment-copy">Thanks Luis. Essentially I'm storing in a database. However, querying nodes to fetch neighbors is extremely expensive. I can only imagine what Google's servers are like...</span>
<span class="comment-copy">If the graph is already in RAM, then why would serializing it be a problem? (disk space is cheaper than RAM) Or does NetworkX have some sort of internal method that compresses the representation, and would balloon during serialization? I am curious.</span>
<span class="comment-copy">I think the question isn't focused on serializing as much as saving it in a structure that will allow efficient querying. That is where my suggestion for a database came from.</span>
<span class="comment-copy">+1 pickle is a great thing, never heard about that before, thanks!</span>
<span class="comment-copy">Pickle generates MASSIVE files for objects, and if this is already a large network, pickle is almost certainly not going to work. It is a great and underused package for many other reasons thouhg!</span>
<span class="comment-copy">@LuisZaman I know what you mean. In that case I'd manually serialize the edges and nodes (as described). But if the graph is already in RAM, I would be really surprised if pickle is so inflated that it would not fit on disk.</span>
<span class="comment-copy">First of all use cPickle it's much faster, second use <code>HIGHEST_PROTOCOL</code>. This will save it in more efficient binary format.</span>
<span class="comment-copy">@ericmjl good question: It will. One of the lines in the serialized file specifies the object type (for the example provided, the line says <code>(cnetworkx.classes.digraph</code>).</span>
