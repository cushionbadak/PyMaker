<div class="post-text" itemprop="text">
<p>I am trying to solve the following problem:</p>
<pre><code>A store sells large individual wooden letters for signs to put on houses. 
The letters are priced individually.
The total cost of letters in LOAN is 17 dollars.
The total cost of letters in SAM is 18 dollars.
The total cost of letters in ANNA is 20 dollars.
The total cost of letters in ROLLO is 21 dollars.
The total cost of letters in DAMAGES is 30 dollars.
The total cost of letters in SALMON is 33 dollars.

How much would the letters in the name GARDNER cost?
</code></pre>
<p>I am brute-forcing letters cost with the following python code, but it take hours and hours to converge, as their are 33^10 possible combinaisons to test. I use n=33 as it is the max cost of a name but indeed, n can be reduced to 15 or even 10, but without being sur it will converge.</p>
<pre><code>def func(letters):
    print letters
    if letters['L']+letters['O']+letters['A']+letters['N'] != 17:
        return False
    elif letters['S']+letters['A']+letters['M'] != 18:
        return False
    elif 2*letters['A']+2*letters['N'] != 20:
        return False
    elif letters['R']+2*letters['O']+2*letters['L'] != 21:
        return False
    elif letters['D']+2*letters['A']+letters['M']+letters['G']+letters['E']+letters['S'] != 30:
        return False
    elif letters['S']+letters['A']+letters['L']+letters['M']+letters['O']+letters['N'] != 33:
        return False
    return True

def run(letters, n, forbidden_letters):
    for letter in letters.keys():
        if letter not in forbidden_letters:
            for i in range(1, n):
                letters[letter] = i
                if not func(letters):
                    if letter not in forbidden_letters:
                        forbidden_letters+=letter
                    if run(letters, n, forbidden_letters):
                        return letters
                else:
                    return letters

LETTERS = {
    "L":1,
    "O":1,
    "A":1,
    "N":1,
    "S":1,
    "M":1,
    "R":1,
    "D":1,
    "G":1,
    "E":1,
}
n=33
print run(LETTERS, n, "")
</code></pre>
<p>Brute-forcing will work in the end, but it is so CPU extensive that it is surely not the best solution.</p>
<p>Does anyone have a better solution to solve this problem? Either by reducing the computation time, either by a good math approach.</p>
<p>Thanks all.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what is called a system of linear equations.  You can solve this by hand if you want, but you can also use a linear solver.  For example with sympy</p>
<pre><code>import sympy

l,o,a,n,s,m,r,d,g,e = sympy.symbols('l,o,a,n,s,m,r,d,g,e')

eq1 = l+o+a+n - 17
eq2 = s+a+m -18
eq3 = a+n+n+a -20
eq4 = r+o+l+l+o -21 
eq5 = d+a+m+a+g+e+s -30
eq6 = s+a+l+m+o+n- 33

sol, = sympy.linsolve([eq1,eq2,eq3,eq4,eq5,eq6],(l,o,a,n,s,m,r,d,g,e))
l,o,a,n,s,m,r,d,g,e = sol

print(g+a+r+d+n+e+r)
</code></pre>
<p>Linear equations can be solved very fast.  The complexity is O(n<sup>3</sup>), where n is the number of variables.  So for such a little problem as this it is near instant.  </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>L + O + A + N - 17 = 0
S + A + M - 18 = 0
2 * A  + 2 * N - 20 = 0
</code></pre>
<p>and so on.</p>
<p>Try to make a matrix like:</p>
<pre><code> L O A N S M R D G E val
[1 1 1 1 0 0 0 0 0 0 -17 | 0] LOAN
[0 0 1 0 1 1 0 0 0 0 -18 | 0] SAM
[0 0 2 2 0 0 0 0 0 0 -20 | 0] ANNA
...
[0 0 1 1 0 0 2 1 1 2 -x | 0] GARDENER
</code></pre>
<p>Now you can solve it using for example Gauss method. It'll take O(n^3) time complexity.</p>
</div>
<span class="comment-copy">its a linear equation.</span>
<span class="comment-copy">thanks, I though that 10 unknown variables and only 6 equations was not enough to solve it this way.</span>
<span class="comment-copy">admittedly some of the letters in gardner has weird prices, but it resolves to a number.</span>
<span class="comment-copy">it seems that some letters values are not resolved (such as 'o', 'm', 'g' or 'e' for eg.), but as they substract each other in 'gardner' name...</span>
<span class="comment-copy">yes, thats my observation too.</span>
<span class="comment-copy">thanks for your solution, it does solve the problem with 'gardner' name, but we don't have access to all individual letter values, anyway it is solved nicely, I don't know if their are other ways to have access to all values without brute-forcing</span>
