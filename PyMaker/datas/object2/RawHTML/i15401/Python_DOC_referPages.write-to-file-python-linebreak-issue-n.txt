<div class="post-text" itemprop="text">
<p>I have a problem where the function just overwrites the line thats already there in a .txt file. The function is supposed to write a highscore to a file when the game quits (I have made a snake game by following a youtube tutorial). I can't quite figure out why it won't start on a new line, can anyone please explain the logic behind it, and how I fix it? I read somewhere that instead of "w" in f.open(), I should type "rb" or something. Since I'm kinda new to this "writing-to-file" thingy, I find it difficult. </p>
<p>Also, I want to sort the highscores from highest to lowest in the file (in other words, sort finalScore from highest to lowest). I have no idea how I should go on and code that, so I'd appreicate some help. You see, I want to print out the current highscores to the console (in order to make a scoreboad)</p>
<p>Heres the code:</p>
<pre><code>import random
import time

name = "Andreas"
finalScore = random.randint(1,10)

def scoreToFile(finalScore):
    #Has to be generated here, since we need the exact current time
    currentTime = time.strftime("%c")
    print("Sucsessfully logged score (finalScore) to highscores.txt")
    f = open("highscores.txt", "w")
    #fileOutput = [(currentTime, ":", name, "-", finalScore)]
    fileOutput = [(finalScore, "-", name, currentTime)]
    for t in fileOutput:
        line = ' '.join(str(x) for x in t)
        f.write(line + "\n")
    f.close()

scoreToFile(finalScore)
</code></pre>
<p>Anyways, merry christmas my fellow python geeks! :D</p>
</div>
<div class="post-text" itemprop="text">
<p>Mode <code>w</code> overwrites an existing file; mode 'a' <strong>appends</strong> to it.  Also, the best way to handle a file is usually with the <code>with</code> statement, which ensures the closing on your behalf; so:</p>
<pre><code>fileOutput = [(finalScore, "-", name, currentTime)]
with open("highscores.txt", "a") as f:
    for t in fileOutput:
        line = ' '.join(str(x) for x in t)
        f.write(line + "\n")
</code></pre>
<p>For sorting, you need be able to extract the final score as a number from a line:</p>
<pre><code>def minus_score(line):
    return -int(line.split()[0])
</code></pre>
<p>then the total work will be done as:</p>
<pre><code>def sorted_by_score():
    with open("highscores.txt", "r") as f:
        result = list(f)
    return sorted(result, key=minus_score)
</code></pre>
<p>This will give you a list lines sorted in ascending order of score (the latter's the reason <code>score</code> is negating the number, though one might also choose to have it just return the number and reverse the sorting), for you to loop on and further process.</p>
<p>Added: so on the OP's request here's how the whole program might be (assuming the existence of a function that either plays a game and returns player name and final score, or else returns <code>None</code> when no more games are to be played and the program must exit).</p>
<pre><code>import time

def play_game():
    """ play a game and return name, finalscore;
        return None to mean no more games, program finished.
        THIS function you'd better code yourself!-)
    """

def scoreToFile(name, finalScore):
    """ Add a name and score to the high-scores file. """
    currentTime = time.strftime("%c")
    fileOutput = finalScore, "-", name, currentTime
    line = ' '.join(str(x) for x in fileOutput)
    with open("highscores.txt", "a") as f:
        f.write(line + "\n")

def minus_score(line):
    """ just for sorting purposes, not called directly. """
    return -int(line.split()[0])

def sorted_by_score():
    """ return list of score lines sorted in descending order of score. """
    with open("highscores.txt", "r") as f:
        return sorted(f, key=minus_score)

def main():
    while True:
        game_result = play_game()
        if game_result is None: break
        scoreToFile(*game_result)
    for line in sorted_by_score:
        print(line.strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>1) one option is to open the file in append mode.
replace:</p>
<pre><code>f = open("highscores.txt", "w")
</code></pre>
<p>with:</p>
<pre><code>f = open("highscores.txt", "a")
</code></pre>
<p>2) another option is to replace this block, </p>
<pre><code>f = open("highscores.txt", "w")
#fileOutput = [(currentTime, ":", name, "-", finalScore)]
fileOutput = [(finalScore, "-", name, currentTime)]
for t in fileOutput:
    line = ' '.join(str(x) for x in t)
    myfile.write(line + "\n")
f.close()
</code></pre>
<p>and use a with style</p>
<pre><code>with open("highscores.txt", "a") as myfile:
    #fileOutput = [(currentTime, ":", name, "-", finalScore)]
    fileOutput = [(finalScore, "-", name, currentTime)]
    for t in fileOutput:
        line = ' '.join(str(x) for x in t)
        myfile.write(line + "\n")
</code></pre>
<p>I prefer the second style as it is more safe and clean.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have mentioned, the problem is you're not opening the file in append mode, so it overwrites it every time rather than adding to it.</p>
<p>However, if you also want to keep the data in the file sorted, you do want to overwrite it each time, since the order of its contents will likely have been changed with the addition. To do that requires first reading it contents in, updating the data, and then writing it back out.</p>
<p>Here's a modified version of your function that does that. I also changed how the data in file is stored to what is known as <a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow"><em>Comma</em> (or <em>Character</em>) <em>Separated Values (CSV)</em></a> format, because Python includes a<a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow"><code>csv</code></a>module which makes it very easy to read, write, and do other things with such files.</p>
<pre><code>import csv
import random
import time

highscores_filename = "highscores.txt"
HighScoresFirst = True  # Determines sort order of data in file

def scoreToFile(name, finalScore):
    currentTime = time.strftime("%c")
    # Try reading scores from existing file.
    try:
        with open(highscores_filename, "r", newline='') as csvfile:
            highscores = [row for row in csv.reader(csvfile, delimiter='-')]
    except FileNotFoundError:
        highscores = []
    # Add this score to the end of the list.
    highscores.append([str(finalScore), name, currentTime])
    # Sort updated list by numeric score.
    highscores.sort(key=lambda item: int(item[0]), reverse=HighScoresFirst)
    # Create/rewrite highscores file from highscores list.
    with open(highscores_filename, "w", newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter='-')
        writer.writerows(highscores)
    print("successfully logged score (finalScore) to highscores.txt")

# Simulate using the function several times.
name = "Name"
for i in range(1, 4):
    finalScore = random.randint(1,10)
    scoreToFile(name + str(i), finalScore)
    time.sleep(random.randint(1,3))  # Pause so time values will vary.
</code></pre>
</div>
<span class="comment-copy">Do <code>f = open("highscores.txt", 'a')</code>. Note the <a href="http://stackoverflow.com/q/1466000/198633"><code>a</code> flag, which means "append" and not "overwrite"</a>.</span>
<span class="comment-copy">I don't quite understand... Where in the code should I call the functions, and is <code>line</code> in <code>minus_score</code> the same as in the scoreToFile function? Could you just paste the whole code in here? Thanks for a detailed answer anywyas! :)</span>
<span class="comment-copy">As to <b>when</b> you should call <code>sorted_by_score</code>: you only said "I want to sort the highscores" - so <b>when</b> you call it, is exactly when you want to get "the highscores" sorted (to loop on, printing some on the console, or whatever).  You never say <b>when</b> you want to sort them, and I can't read your mind, so I can't tell <b>when</b> to call <code>sorted_by_score</code> -- the two "whens" being one and the same -- be that immediately after <code>scoreToFile</code>, or at the end, or whenever.  You never call <code>minus_score</code> directly; the built-in <code>sorted</code> calls it <b>for</b> you to produce the sorting you desire.</span>
<span class="comment-copy">Oh, and, to clarify: I cannot "just paste the whole code in here" because of your specification's lack of clarity as to what should be done when (do you want to "print to console" after each new score is added, or, when your whole program is done, or, at what other time(s) -- I can't guess that!).</span>
<span class="comment-copy">Alright, here is what I want. Firstly, I have a snake game, and each time the game is over, the score is written to a file. Furthermore, I want to sort the scores, prefarably when the program is done, but I dont really know whats best. Before the program quits however, I want the result in "highscores.txt" to be printed out, sorted of course. Can't you tell me how you would have done it?</span>
<span class="comment-copy">Sure, coming up -- assuming the existence of a function that either plays a game and returns its score &amp;c, or returns None to say the game is over.</span>
<span class="comment-copy">Sweet! Thanks! Now I just need to figure out how to sort the scores :&lt;</span>
<span class="comment-copy">@AndreasAmundsen -- for sorting, see my answer...</span>
<span class="comment-copy">Thank you very much!</span>
