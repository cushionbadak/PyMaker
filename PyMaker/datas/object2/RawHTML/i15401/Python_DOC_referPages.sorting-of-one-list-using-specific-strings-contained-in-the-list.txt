<div class="post-text" itemprop="text">
<p>I have to sort my list of strings according to <strong>the months name</strong>:</p>
<pre><code>my_list = ['apple_april', 'banana_july', 'carrot_december', 'dog_january']
</code></pre>
<p>I have to <strong>sort by january, february, martch</strong>, .....</p>
<p>My trial:</p>
<pre><code>months = [m.split('_')[1] for m in my_list]

ans = [x for (y,x) in sorted(zip(months,my_list))]
</code></pre>
<p>But no success, how would you do it?</p>
<p>The expected answers is:</p>
<pre><code>['dog_january', 'apple_april', 'banana_july', 'carrot_december']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a>, <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> accept optional <code>key</code> parameter. Pass a key function that returns corresponding number to monthes.</p>
<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt;
&gt;&gt;&gt; months = {calendar.month_name[i].lower(): i for i in range(1, 12+1)}
&gt;&gt;&gt; my_list = ['apple_april', 'banana_july', 'carrot_december', 'dog_january']
&gt;&gt;&gt; sorted(my_list, key=lambda x: months[x.split('_')[1]])
['dog_january', 'apple_april', 'banana_july', 'carrot_december']
</code></pre>
<hr/>
<p><code>months</code> is mapping between month names and numbers using <a href="https://docs.python.org/3/library/calendar.html#calendar.month_name" rel="nofollow"><code>calendar.month_name</code></a>:</p>
<pre><code>&gt;&gt;&gt; months
{'april': 4, 'november': 11, 'june': 6, 'august': 8, 'december': 12, 'october': 10,
 'july': 7, 'march': 3, 'september':9, 'may': 5, 'january': 1, 'february': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make a dictionary of months and their corresponding position in the calendar:</p>
<pre><code>months = {'january': 1,
          'april': 4,
          'july': 7,
          'december': 12}
</code></pre>
<p>And then sort the list by looking up the month in the dictionary. First split each element of the list on the underscore (which gives a list such as <code>['dog', 'january']</code>) and then use <code>months.get</code> to look up the last element of this list in the dictionary:</p>
<pre><code>&gt;&gt;&gt; sorted(my_list, key=lambda x: months.get(x.split('_')[-1]))
['dog_january', 'apple_april', 'banana_july', 'carrot_december']
</code></pre>
<p><strong>Edit</strong>:</p>
<p>A lazier way if you have <code>dateutil</code> installed...</p>
<pre><code>&gt;&gt;&gt; import dateutil
&gt;&gt;&gt; sorted(my_list, key=lambda x: dateutil.parser.parse(x.split('_')[-1]))
['dog_january', 'apple_april', 'banana_july', 'carrot_december']
</code></pre>
<p>No need for a dictionary! <code>dateutil.parser.parse</code> parses the month string to a <code>datetime</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; my_list = ['apple_april', 'banana_july', 'carrot_december', 'dog_january']
&gt;&gt;&gt; sorted(my_list, key=lambda x: datetime.strptime(x.split('_')[1], '%B'))
['dog_january', 'apple_april', 'banana_july', 'carrot_december']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can sort your list based on <code>calendar.month_name</code> or <code>calendar.month_abbr</code> :</p>
<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; m=list(calendar.month_abbr)
&gt;&gt;&gt; l=[(i,x) for x in my_list for i,j in enumerate(m) if j==x.split('_')[1][:3]]
&gt;&gt;&gt; [i[1] for i in sorted(l,key= lambda x: x[0])]
['dog_january', 'apple_april', 'banana_july', 'carrot_december']
</code></pre>
</div>
<span class="comment-copy">You should be too lazy to write a dictionary of every month</span>
<span class="comment-copy">Added a lazier way.</span>
<span class="comment-copy">I like your lazier way, it's what I wanted the answer i just submitted to be like. I gave you a vote but stackoverflow doesn't want me to tell you</span>
<span class="comment-copy">Thanks - I think your answer is preferable to mine as it doesn't rely on the third-party <code>dateutil</code> (+1)</span>
<span class="comment-copy">But if one was working with <code>dateutil</code> one should use this so that's good to know. I was looking up to see if <code>strptime</code> can accept wildcard characters but it turns out you need <code>dateutil</code> for that</span>
