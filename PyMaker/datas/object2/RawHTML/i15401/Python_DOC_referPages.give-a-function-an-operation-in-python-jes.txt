<div class="post-text" itemprop="text">
<p>Why it's not possible to give a function , an operation in python ? I know that giving a parameter to a function mean turn the parameter to an actual parameter .
Here an example :</p>
<pre><code>def function(beta + 'aei') # beta = 'randomstring'
   print beta
</code></pre>
<p>I would not go for stupid but I have this doubt to be clarified .. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can perform any operations with the parameter inside the function.</p>
<pre><code>def function(beta):
    print beta + 'aei'
</code></pre>
<p>You can also modify the parameter inside the function:</p>
<pre><code>def function(beta):
    beta = beta + 'aei'
    print beta
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not possible because the lexer <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow">does not make an allowance for it</a>.</p>
<pre><code>funcdef        ::=  [decorators] "def" funcname "(" [parameter_list] ")" ["-&gt;" expression] ":" suite
decorators     ::=  decorator+
decorator      ::=  "@" dotted_name ["(" [parameter_list [","]] ")"] NEWLINE
dotted_name    ::=  identifier ("." identifier)*
parameter_list ::=  (defparameter ",")*
                    | "*" [parameter] ("," defparameter)* ["," "**" parameter]
                    | "**" parameter
                    | defparameter [","] )
parameter      ::=  identifier [":" expression]
defparameter   ::=  parameter ["=" expression]
funcname       ::=  identifier
</code></pre>
<p>Note that the <code>defparameter</code> is what you're looking at; it only takes a <code>parameter</code> and optionally a default assignment expression.  The <code>parameter</code> token is then only going to accept an <code>identifier</code>.</p>
<p>Besides, even if you were to express something like this (which is <em>closer</em>, but still invalid syntax):</p>
<pre><code>def function(beta=beta + 'aei'):
    print beta
</code></pre>
<p><code>beta</code> is undefined until you actually enter the method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not just implement the operation in the function statement?</p>
<pre><code>def function(beta) # beta = 'randomstring'
   print beta + 'aei'
</code></pre>
<p>If you want a default value for the <code>beta</code> parameter, you can do that too:</p>
<pre><code>def function(beta='randomstring')
   print beta + 'aei'
</code></pre>
</div>
<span class="comment-copy">What do you intend that to do?</span>
<span class="comment-copy">I'm ok with what you wrote here. I'm just asking if there is a reason for an error in doing ' def function(beta+'aei') '</span>
<span class="comment-copy">What do you mean by "the reason"? When you define a function, you specify the names for the parameters and possibly the default values. Any operations that need to performed with the values need to happen either inside the function or in the code that calls it.</span>
<span class="comment-copy">Ok and what with ' def function(beta='string') ' beta is defined like a global variable or local? As Platinum Azure said</span>
<span class="comment-copy">A function parameter is effectively a local variable of the function, no matter whether it has a default value or not.</span>
<span class="comment-copy">Ok got it, thank you man :)</span>
<span class="comment-copy">doing this ' def function(beta='randomstring') ' mean taking beta as a global var ? And my question is why I can't do ' def function(beta+'aei') . Is something wrong with mutable or immutable object in python or .. I don't know !</span>
<span class="comment-copy">No, <code>beta</code> is not global in that case. And what's wrong with the syntax is simply that the language's lexer does not allow it. That would be like English being expected to allow sentences with more than one independent clause (without the proper connector): yes you can string words together in that way, but it's not proper English. Same thing here: After a function is a list of parameter names, not statements.</span>
