<div class="post-text" itemprop="text">
<p>For this question, I am not interested in alternative pythonic methods, I am only interested in solving the Regex in my code. I can't figure out why it does not work.</p>
<p>Let's say I have the following string:</p>
<pre><code>hello.world
</code></pre>
<p>I want to get all characters, excluding all characters before the dot, except the first one before it. So, I am trying to extract the following substring:</p>
<pre><code>o.world
</code></pre>
<p>This is my code:</p>
<pre><code>re.sub('^.*[^.\..*]', '', string)
</code></pre>
<p>My Regex logic is broken down as follows, the first characters <code>^.*</code> which are not one character followed by a dot followed by any number of characters <code>[^.\..*]</code>, are removed.</p>
<p>However, the Regex doesn't work, can someone help me out? </p>
</div>
<div class="post-text" itemprop="text">
<p>Your current code is not working because your pattern is not matching what you think it is.  Putting <code>.*</code> in a character set does not mean "zero or more characters".  Instead, it means the characters <code>.</code> or <code>*</code> literally.  Also, <code>\.</code> is treated as <code>\</code> or <code>.</code>, not an escaped <code>.</code> (since <code>.</code> has no special meaning in a character set).</p>
<p>This means that your pattern is actually equivalent to:</p>
<pre><code>^.*[^\.*]
</code></pre>
<p>which matches:</p>
<pre><code>^       # The start of the string
.*      # Zero or more characters
[^\.*]  # A character that is not \, ., or *
</code></pre>
<hr/>
<p>To do what you want with <code>re.sub</code>, you can use:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('[^.]*(.\..*)', r'\1', 'hello.world')
'o.world'
&gt;&gt;&gt;
</code></pre>
<p>Below is an explanation of what the pattern does:</p>
<pre><code>[^.]*  # Matches zero or more characters that are not .
(      # Starts a capture group
.      # Matches any character (save a newline).
\.     # Matches a literal .
.*     # Matches zero or more characters
)      # Closes the capture group
</code></pre>
<p>The important part though is the capture group. Inside the replace string, <code>\1</code> will refer to whatever was matched by it, which in this case is the text that you want to keep. So, the code above can be seen as replacing all of the text with only that which we need.</p>
<hr/>
<p>That said, it seems like it would be better to just use <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow"><code>re.search</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search('[^.]*(.\..*)', 'hello.world').group(1)
'o.world'
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">why not use an alternative method when it is much simpler and a lot more efficient?</span>
<span class="comment-copy">I was just curious why my regex wasn't working, I thought I had it spot on...</span>
<span class="comment-copy">well FWIW <code>s[s.index(".")-1:]</code> is roughly  30 times faster</span>
<span class="comment-copy">aha, very true, thanks</span>
