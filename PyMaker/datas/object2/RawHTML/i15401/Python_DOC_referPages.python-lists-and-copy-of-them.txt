<div class="post-text" itemprop="text">
<p>I can not explain the following behaviour:</p>
<pre><code>l1 = [1, 2, 3, 4]
l1[:][0] = 888
print(l1) # [1, 2, 3, 4]
l1[:] = [9, 8, 7, 6]
print(l1) # [9, 8, 7, 6]
</code></pre>
<p>It seems to be that <code>l1[:][0]</code> refers to a copy, whereas <code>l1[:]</code> refers to the object itself.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>l1[:][0] = 888</code> first takes a slice of all the elements in <code>l1</code> (<code>l1[:]</code>), which (as per list semantics) returns a new list object containing all the objects in <code>l1</code> -- it's a shallow copy of <code>l1</code>.</p>
<p>It then replaces the first element of that copied list with the integer <code>888</code> (<code>[0] = 888</code>).</p>
<p>Then, the copied list is discarded because nothing is done with it.</p>
<p>Your second example <code>l1[:] = [9, 8, 7, 6]</code> <em>replaces</em> all the elements in <code>l1</code> with those in the list <code>[9, 8, 7, 6]</code>. It's a slice assignment.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is caused by python's feature that allows you to <em>assign a list to a slice of another list</em>, i.e.</p>
<pre><code>l1 = [1,2,3,4]
l1[:2] = [9, 8]
print(l1)
</code></pre>
<p>will set <code>l1</code>'s first two values to <code>9</code> and <code>8</code> respectively. Similarly,</p>
<pre><code>l1[:] = [9, 8, 7, 6]
</code></pre>
<p>assigns new values to all elements of <code>l1</code>.</p>
<hr/>
<p>More info about assignments in <a href="https://docs.python.org/2/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">the docs</a>.</p>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">List - Python tutorial</a>, especially assignment to slice.</span>
<span class="comment-copy">THanks for your answer. My point is that l1[:] seems to behave like a copy or like a reference to l1, depending on the fact I change a value or reassign the whole list.</span>
<span class="comment-copy">It always makes a copy of <code>l1</code>, except when it's the target of an assignment (your second example), in which case it simply replaces the entire contents of <code>l1</code>.</span>
