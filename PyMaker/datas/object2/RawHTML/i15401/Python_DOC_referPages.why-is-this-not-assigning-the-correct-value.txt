<div class="post-text" itemprop="text">
<p>I wanted to store the biggest fib number calculated so  far, but the variable biggest is not being assigned to correctly.</p>
<pre><code>cache = {}
biggest = 1
def fib(n):
  if n == 0:
    return 0
  if n == 1:
    return 1

  if not n in cache:
    cache[n] = fib(n-1) + fib(n-2)
    print "calculated %ith fib giving %i" %(n, cache[n])
    biggest = cache[n]

  return cache[n]
</code></pre>
<p>After doing fib(10), the cache looks good, but biggest is still 1. Sorry for the beginner question, but was hoping someone could enlighten me. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to declare the <code>biggest</code> as a global using <a href="https://docs.python.org/2/reference/simple_stmts.html#the-global-statement" rel="nofollow"><code>global</code> statement</a> (especially when there's an assignment to the variable). Otherwise, it is treated as a local variable.</p>
<pre><code>cache = {}
biggest = 1

def fib(n):
    global biggest  # &lt;-----
    ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you happen to be doing this in Python &gt;= 3.2 some day, you can also use <code>lru_cache</code></p>
<pre><code>from functools import lru_cache

@lru_cache()
def fibo(n):
    if n &lt;= 1:
        return 1
    return fibo(n-1) + fibo(n-2)
</code></pre>
<p><code>lru_cache</code> allows your to cache something <strong>exactly</strong> the way you're trying to do, but automatically, much faster, and without you having to do anything. Just using this decorator.</p>
<p><strong><a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow">Documentation here</a></strong>.</p>
</div>
<span class="comment-copy">And technically you're returning <b>biggest</b> after calling the <code>fib(n)</code> which makes <b>biggest</b> a little redundant.</span>
<span class="comment-copy">why the global? whereas OP already used <b>cache</b> within the same module, can also access <b>biggest</b>.</span>
<span class="comment-copy">@Anzel, <code>cache</code> is used as read-only. In other word, there's no assignment to <code>cache</code>; <code>cache</code> is considered global. While, There's a assignment to <code>biggest</code>; considered local (unless there's global statement)</span>
<span class="comment-copy">@Anzel, I updated the answer to mention about assignment to clarify. Thank you for your feedback.</span>
<span class="comment-copy">ah I see where this is coming from, I thought OP code didn't work. It works but trying to <code>print biggest</code> after calling the function. Apologized I didn't pay enough attention</span>
<span class="comment-copy">OP is using Python 2.x (using <code>print</code> as a statement). <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a> is available since Python 3.2.</span>
<span class="comment-copy">Oh god... Well. That's a problem.</span>
<span class="comment-copy">And, OP is not asking about memoization.</span>
<span class="comment-copy">True. Thanks for pointing it</span>
