<div class="post-text" itemprop="text">
<p>I am using Python's <code>unittest</code> module to test a script I am writing.</p>
<p>The script contains a loop like this:</p>
<pre><code>// my_script.py

def my_loopy_function():
    aggregate_value = 0
    for x in range(10):
        aggregate_value = aggregate_value + complicated_function(x)
    return aggregate_value

def complicated_function(x):
    a = do()
    b = something()
    c = complicated()
    return a + b + c
</code></pre>
<p>I have no problems using <code>unittest</code> to test <code>complicated_function</code>. But I would like to test <code>my_loopy_function</code> by overriding <code>complicated_function</code>.</p>
<p>I tried modifying my script so that <code>my_loopy_function</code> takes <code>complicated_function</code> as an optional parameter so that I can pass in a simple version from the test:</p>
<pre><code>// my_modified_script.py

def my_loopy_function(action_function=None):
    if action_function is not None:
        complicated_function = action_function
    aggregate_value = 0
    for x in range(10):
        aggregate_value = aggregate_value + complicated_function(x)
    return aggregate_value

def complicated_function(x):
    a = do()
    b = something()
    c = complicated()
    return a + b + c

// test_my_script.py

from myscript import my_loopy_function

class TestMyScript(unittest.TestCase):
    test_loopy_function(self):
        def simple_function():
            return 1
    self.assertEqual(10, my_loopy_function(action_function=simple_function))
</code></pre>
<p>It has not worked as I had hoped, are there any suggestions on how I should be doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the end I used Python's <code>mock</code>, which allows me to override <code>complicated_function</code> without having to adjust the original code in any way.</p>
<p>Here is the original script, and note that <code>complicated_function</code> is not passed in to <code>my_loopy_function</code> as an '<code>action_function</code>' parameter (which was what I tried in my earlier solutions):</p>
<pre><code>// my_script.py

def my_loopy_function():
    aggregate_value = 0
    for x in range(10):
        aggregate_value = aggregate_value + complicated_function(x)
    return aggregate_value

def complicated_function(x):
    a = do()
    b = something()
    c = complicated()
    return a + b + c
</code></pre>
<p>and here is the script I am using to test it:</p>
<pre><code>// test_my_script.py

import unittest
import mock
from my_script import my_loopy_function

class TestMyModule(unittest.TestCase):
    @mock.patch('my_script.complicated_function')
    def test_1(self, mocked):
        mocked.return_value = 1
        self.assertEqual(10, my_loopy_function())
</code></pre>
<p>This works just as I had wanted:</p>
<ol>
<li>I am able to substitute functions with a simpler version of themselves that I can more easily test,</li>
<li>I do not need to alter my original code in any way (such as I was trying -- which was effectively by passing in function pointers), the <code>mock</code> module gives me post-coding access to the innards.</li>
</ol>
<p>Thanks to austin for his suggestion to use <code>mock</code>.
BTW I am using Python 2.7 and therefore used the <code>pip</code>-installable <code>mock</code> from PyPI.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't try to override <code>complicated_function</code> with <code>action_function</code>, just use <code>complicated_function</code> as the default <code>action_function</code>:</p>
<pre><code>def my_loopy_function(action_function=complicated_function):
    aggregate_value = 0
    for x in range(10):
        aggregate_value = aggregate_value + action_function(x)
    return aggregate_value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your code, you shouldn't be able to overwrite <code>complicated_function</code> like that. If I try it, I get <code>UnboundLocalError: local variable 'complicated_function' referenced before assignment</code>.</p>
<p>But perhaps is the problem that in your actual code, you're referring to <code>complicated_function</code> in some other way (e.g. as a member of a module)? Then by overwriting it in your test, you're overwriting the actual <code>complicated_function</code>, so you won't be able to use it from other tests.</p>
<p>The correct way to do this is to overwrite the <em>local</em> variable with the global one, like so:</p>
<pre><code>def my_loopy_function(action_function=None):
  if action_function is None:
    action_function = complicated_function
  aggregate_value = 0
    for x in range(10):
      # Use action_function here instead of complicated_function
      aggregate_value = aggregate_value + action_function(x)
    return aggregate_value
</code></pre>
</div>
<span class="comment-copy">You can try using the <code>mock</code> package.  It's now part of Python 3. <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html</a></span>
<span class="comment-copy">How has it not worked as you hoped?</span>
<span class="comment-copy">Yes I did see some references to mock. I get the feeling it might be the right thing for me here -- I basically want to override selected functions that get called in my code so that my tests can test the behaviour of the calling code.</span>
<span class="comment-copy">@Daniel Pryden The problem that I am having is that I have a few tests running, and once I have overriden <code>complicated_function</code> with <code>simple_function</code> it stays pointing to <code>simple_function</code> even in a later test where I do not pass an '<code>action_function</code>'.</span>
<span class="comment-copy">Up vote for self answer. Welcome to the mock word ... You'll discover a very wonderful framework to help your unit testing.</span>
<span class="comment-copy">@Robert: Actually, I would call what you were doing before "mocking" as well. The difference is that here you're using the <code>mock</code> module to do the monkeypatching for you, and it's smart enough to reset the state after the SUT is complete.</span>
<span class="comment-copy">I think I considered that correctly: if I just run <code>my_loopy_function</code> and use the default value of <code>None</code> for <code>action_function</code>, the loop will use that module's <code>complicated_function</code>, which is fine. But if I run it from my test script then I am simply overriding the <code>complicated_function</code> to actually point to <code>simple_function</code>.</span>
<span class="comment-copy">I would leave the note, where the bug was. Now the code is, of course right, but it might be hard to spot why. At least one person didn't =).</span>
<span class="comment-copy">@Robert It will behave the same, you just over-complicated logic. And you never use anything else than complicated function in your loop. That is the problem.</span>
<span class="comment-copy">@Robert I'm not sure what you meant to say in your comment here. Regardless, the pattern I'm describing is extremely common, and works â€” why reinvent the wheel?</span>
<span class="comment-copy">@ThomasOrozco fair points, I will definitely have a re-think.</span>
<span class="comment-copy">Thank you Daniel. You are right that my overwriting means that later tests cannot use the original complicated_function. I am looking into mocking the complicated_function. I like the idea of being able to overwrite functions in my code so that I can test 'from the outside in' rather than 'from the unit out'.</span>
<span class="comment-copy">Robert: I don't understand what you mean by "from the outside in" here -- either way, you're injecting a mock/shim for testing purposes. (You're <i>already</i> mocking <code>complicated_function</code> by replacing the real implementation with a fake one.) The difference is that you're proposing doing this by mutating global state (the <code>complicated_function</code> function is a global object), and I'm proposing doing this by local logic in your <code>my_loopy_function</code> function. It's always best to avoid mutating global state if possible, as it leads to exactly these kinds of problems, which can be difficult to debug.</span>
