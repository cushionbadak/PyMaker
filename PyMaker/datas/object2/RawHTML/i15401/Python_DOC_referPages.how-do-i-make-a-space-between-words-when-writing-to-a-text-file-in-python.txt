<div class="post-text" itemprop="text">
<p>The following code writes to a text file</p>
<pre><code>if classno== '1':
    f = open("class1.txt", "a")
if classno== '2':
    f = open("class2.txt", "a")
if classno== '3':
    f = open("class3.txt", "a")
f.write(name) 
f.write(score)
f.close()
</code></pre>
<p>However, in the text file the name and score do not have space between them for example, how could I change "James14" in to "James 14"</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try </p>
<pre><code>f.write(name) 
f.write(' ') 
f.write(score)
</code></pre>
<p>Or</p>
<pre><code>f.write(name + ' ') 
f.write(score)
</code></pre>
<p>Or</p>
<pre><code>f.write(name ) 
f.write(' ' +score)
</code></pre>
<p>Or</p>
<pre><code>f.write("{} {}".format(name,score)) 
</code></pre>
<p>Or</p>
<pre><code>f.write("%s %s"%(name,score)) 
</code></pre>
<p>Or</p>
<pre><code>f.write(" ".join([name,score]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to write that space:</p>
<pre><code>f.write(name) 
f.write(' ') 
f.write(score)
</code></pre>
<p>or use string formatting:</p>
<pre><code>f.write('{} {}'.format(name, score))
</code></pre>
<p>If you are using Python 3, or used <code>from __future__ import print_function</code>, you could also use the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print()</code> function</a>, and have it add the space for you:</p>
<pre><code>print(name, score, file=f, end='')
</code></pre>
<p>I set <code>end</code> to an empty string, because otherwise you'll also get a newline character. Of course, you <em>may</em> actually <em>want</em> that newline character, if you are writing multiple names and scores to the file and each entry needs to be on its own line.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way would be to simply concatenate with a space character</p>
<pre><code>f.write(name + ' ' + score)
</code></pre>
<p>A more robust method (for if the formatting gets more involved) is to use the <code>format</code> method</p>
<pre><code>f.write('{} {}'.format(name, score))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Bhargav and Martjin's answers are good. There are many ways to do it. I'd like to add that the <code>.format</code> way seems to be a little better because you can potentially reuse the arguments and organize your code better.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should format a string. </p>
<pre><code>output = "%(Name)s %(Score)s" %{'Name': name, 'Score':score}
f.write(output)
f.close()
</code></pre>
<p>Basically, %(Name)s is a placeholder (denoted by the %) for a string (denoted by the s following the parentheses), which we will reference by "Name". Following our format string, which is wrapped in "", we have this weird thing:</p>
<p>%{'Name': name, 'Score':score}</p>
<p>This is a dictionary that provides replacements for the "Name" and "Score" placeholders.</p>
</div>
<span class="comment-copy">f.write(' ') inbetween them is 1 of many ways</span>
