<div class="post-text" itemprop="text">
<p>Lets assume I've got a following python list(this is only example):</p>
<pre><code>my_list = [{'user': 'Joe', 'score': 14},
           {'user': 'Foo', 'score': 12},
           {'user': 'May', 'score': 12},
           {'user': 'Kat', 'score': 12},
           {'user': 'Doe', 'score': 13}]
</code></pre>
<p>I need to sort this list in ascending order by score and descending order by a username.
Expected sort result:</p>
<pre><code>my_list = [{'user': 'May', 'score': 12},
           {'user': 'Kat', 'score': 12},
           {'user': 'Foo', 'score': 12},
           {'user': 'Doe', 'score': 13},
           {'user': 'Joe', 'score': 14}]
</code></pre>
<p>So, I could do something like this if I want everything to be in ascending order:</p>
<pre><code>my_list.sort(key=lambda x: (x['score'], x['user']))
</code></pre>
<p>For integers it is easy to solve this problem just adding <code>-</code> in front of it:</p>
<pre><code>my_list.sort(key=lambda x: (-x['score'], x['user']))
</code></pre>
<p>Unfortunately, strings can not be negative :-|</p>
<p>I need a generic solution that doesn't involve 'reverse=True'. Lambda function is dynamically generated based on a user config.</p>
<p>Thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your current solution will work fine if you set the <code>reverse</code> parameter of <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> to <code>True</code>:</p>
<pre><code>&gt;&gt;&gt; my_list = [{'user': 'Joe', 'score': 14},
...            {'user': 'Foo', 'score': 12},
...            {'user': 'May', 'score': 12},
...            {'user': 'Kat', 'score': 12},
...            {'user': 'Doe', 'score': 13}]
&gt;&gt;&gt; my_list.sort(key=lambda x: (-x['score'], x['user']), reverse=True)
&gt;&gt;&gt; pprint(my_list) # pprint makes the nice output
[{'score': 12, 'user': 'May'},
 {'score': 12, 'user': 'Kat'},
 {'score': 12, 'user': 'Foo'},
 {'score': 13, 'user': 'Doe'},
 {'score': 14, 'user': 'Joe'}]
&gt;&gt;&gt;
</code></pre>
<p>This will sort the list in reverse order.</p>
<hr/>
<p><strong>Edit:</strong></p>
<p>Since the names and scores have two different sort orders, you will need to use two separate sorts to achieve your desired output:</p>
<pre><code>&gt;&gt;&gt; my_list = [{'user': 'Joe', 'score': 14},
...            {'user': 'Foo', 'score': 12},
...            {'user': 'May', 'score': 12},
...            {'user': 'Kat', 'score': 12},
...            {'user': 'Doe', 'score': 13}]
&gt;&gt;&gt; my_list.sort(key=lambda x: x['user'], reverse=True)
&gt;&gt;&gt; my_list.sort(key=lambda x: x['score'])
&gt;&gt;&gt; pprint(my_list)
[{'score': 12, 'user': 'May'},
 {'score': 12, 'user': 'Kat'},
 {'score': 12, 'user': 'Foo'},
 {'score': 13, 'user': 'Doe'},
 {'score': 14, 'user': 'Joe'}]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The ord of a string can be negative:</p>
<pre><code>my_list.sort(key=lambda x: (x["score"],[-ord(x) for x in x["user"]])))


In [50]:  my_list.sort(key=lambda x: (x["score"],[-ord(x) for x in x["user"]]))

In [51]: my_list
Out[51]: 
[{'score': 12, 'user': 'May'},
 {'score': 12, 'user': 'Kat'},
 {'score': 12, 'user': 'Foo'},
 {'score': 13, 'user': 'Doe'},
 {'score': 14, 'user': 'Joe'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to add the <code>reverse=True</code> keyword for descending order.</p>
<pre><code>&gt;&gt;&gt; my_list.sort(key=lambda x: (-x['score'], x['user']),reverse=True)
&gt;&gt;&gt; my_list
[{'score': 12, 'user': 'May'}, {'score': 12, 'user': 'Kat'}, {'score': 12, 'user': 'Foo'}, {'score': 13, 'user': 'Doe'}, {'score': 14, 'user': 'Joe'}]
</code></pre>
</div>
<span class="comment-copy">possible duplicate: <a href="https://stackoverflow.com/q/1516249">stackoverflow.com/q/1516249</a></span>
<span class="comment-copy">It works only for this particular case just because you can play with the sign of the integer values. reverse=True affects a whole list order that is not acceptable. I need something that can affect an order of a specific column. Like in SQL: ORDER by score ASC, USER desc, last_name ASC.</span>
<span class="comment-copy">See my edit.  You'll need to use two sorts in that case (one for descending, the other for ascending).</span>
<span class="comment-copy">Haha! That definitely works! However, it is extremely slow :-|</span>
<span class="comment-copy">@VladBenya, considering you don't want to use reverse, it is pretty tricky to do what you want, you could do it on the first character <code>-ord(x["user"][0])</code> as a compromise</span>
<span class="comment-copy">This just a custom solution just for this example. I may have three or four fields that I need to sort on. Each of them may be descending as well as others ascending. All fields can be strings. I am looking for a generic solution.</span>
<span class="comment-copy">@VladBenya what you mean ? always when you use <code>reverse=True</code> <code>sort</code> function sort the iterable reverse !</span>
<span class="comment-copy">@VladBenya so for that aim you need to update your list , and couldn't just use <code>sort</code></span>
<span class="comment-copy">Just imagine that score is a user last name that is a string. I want to sort this list in ascending order by user name and descending order their last names together. reverse=True will not help here since it affect a final order of a whole list.</span>
