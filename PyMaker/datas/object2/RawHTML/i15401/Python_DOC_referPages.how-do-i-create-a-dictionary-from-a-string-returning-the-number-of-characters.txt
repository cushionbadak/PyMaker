<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1155617/count-the-number-occurrences-of-a-character-in-a-string">Count the number occurrences of a character in a string</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>I want a string such as <code>'ddxxx'</code> to be returned as <code>('d': 2, 'x': 3)</code>. So far I've attempted</p>
<pre><code>result = {}
for i in s:
    if i in s:
        result[i] += 1
    else:
        result[i] = 1
return result   
</code></pre>
<p>where <code>s</code> is the string, however I keep getting a <code>KeyError</code>. E.g. if I put <code>s</code> as <code>'hello'</code> the error returned is:</p>
<pre><code>result[i] += 1
KeyError: 'h'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with your second condition. <code>if i in s</code> is checking for the character in the string itself and not in the dictionary. It should instead be <code>if i in result.keys()</code> or as Neil <a href="https://stackoverflow.com/questions/27666249/how-do-i-create-a-dictionary-from-a-string-returning-the-number-of-chacacters/27666292?noredirect=1#comment43747524_27666292">mentioned</a> It can just be <code>if i in result</code></p>
<p>Example:</p>
<pre><code>def fun(s):
    result = {}
    for i in s:
        if i in result:
            result[i] += 1
        else:
            result[i] = 1
    return result   

print (fun('hello'))
</code></pre>
<p>This would print</p>
<pre><code>{'h': 1, 'e': 1, 'l': 2, 'o': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this easily by using <a href="https://docs.python.org/3/library/collections.html#collections.Counter"><code>collections.Counter</code></a>. Counter is a subtype of the standard dict that is made to count things. It will automatically make sure that indexes are created when you try to increment something that hasn’t been in the dictionary before, so you don’t need to check it yourself.</p>
<p>You can also pass any iterable to the constructor to make it automatically count the occurrences of the items in that iterable. Since a string is an iterable of characters, you can just pass your string to it, to count all characters:</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; s = 'ddxxx'
&gt;&gt;&gt; result = collections.Counter(s)
&gt;&gt;&gt; result
Counter({'x': 3, 'd': 2})
&gt;&gt;&gt; result['x']
3
&gt;&gt;&gt; result['d']
2
</code></pre>
<hr/>
<p>Of course, doing it the manual way is fine too, and your code almost works fine for that. Since you get a <code>KeyError</code>, you are trying to access a key in the dictionary that does not exist. This happens when you happen to come accross a new character that you haven’t counted before. You already tried to handle that with your <code>if i in s</code> check but you are checking the containment in the wrong thing. <code>s</code> is your string, and since you are iterating the character <code>i</code> of the string, <code>i in s</code> will always be true. What you want to check instead is whether <code>i</code> already exists as a key in the dictionary <code>result</code>. Because if it doesn’t you add it as a new key with a count of <code>1</code>:</p>
<pre><code>if i in result:
    result[i] += 1
else:
    result[i] = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>collections.Counter</code> is the sensible solution. But if you <em>do</em> want to reinvent the wheel, you can use the <code>dict.get()</code> method, which allows you to supply a default value for missing keys:</p>
<pre><code>s = 'hello'

result = {}
for c in s:
    result[c] = result.get(c, 0) + 1

print result
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'h': 1, 'e': 1, 'l': 2, 'o': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple way of doing this if you don't want to use <code>collections</code> module:</p>
<pre><code>&gt;&gt;&gt; st = 'ddxxx'
&gt;&gt;&gt; {i:st.count(i) for i in set(st)}
{'x': 3, 'd': 2}
</code></pre>
</div>
