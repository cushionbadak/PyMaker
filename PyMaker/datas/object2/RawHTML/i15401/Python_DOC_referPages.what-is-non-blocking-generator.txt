<div class="post-text" itemprop="text">
<p>This excerpt is from Python <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">doc</a>. It the doc string says the function is <code>non-blocking</code>(e.g.# non-blocking dict iterator), that is where I don't understand .</p>
<pre><code>def iter_except(func, exception, first=None):
    """ Call a function repeatedly until an exception is raised.

    Converts a call-until-exception interface to an iterator interface.
    Like builtins.iter(func, sentinel) but uses an exception instead
    of a sentinel to end the loop.

    Examples:
        iter_except(functools.partial(heappop, h), IndexError)   # priority queue iterator
        iter_except(d.popitem, KeyError)                         # non-blocking dict iterator
        iter_except(d.popleft, IndexError)                       # non-blocking deque iterator
        iter_except(q.get_nowait, Queue.Empty)                   # loop over a producer Queue
        iter_except(s.pop, KeyError)                             # non-blocking set iterator

    """
    try:
        if first is not None:
            yield first()            # For database APIs needing an initial cast to db.first()
        while 1:
            yield func()
    except exception:
        pass
</code></pre>
<p>It appears to me is just a <code>generator function</code> doing the same thing as <code>iter()</code>.</p>
<p>As far as I know, <code>non-blocking</code> means async or parallel computing, or when you get rid off the <code>lock</code> at multi-thread .
The snippet is in synchronous execution. What is <code>non-blocking</code> here meant?  </p>
</div>
<div class="post-text" itemprop="text">
<p>As I understand it - the <code>non-blocking</code> here is used as <code>not breaking the code execution when a specific error occurs</code>.</p>
<p>So these generators don't 'block' my code from running when the exception occurs.</p>
</div>
<span class="comment-copy">I suppose they mean that <code>d</code> can be changed during iteration by other code, so this function doesn't 'block' it. Using <code>iter</code> and changing underlaying container can cause unpredictable results.</span>
