<div class="post-text" itemprop="text">
<p>I simply want to extract the indices in two list where they equal some string.</p>
<p>Say:</p>
<pre><code>a = ['foo' for _ in range(5)]
a.extend(['bar' for _ in range(5)])  
print(a)
['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'bar']
b = ['foo' for _ in range(3)]
b.extend(['bar' for _ in range(7)])
print(b)
['foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']
</code></pre>
<p>Then I simply want all indices with 'foo' in list a and 'bar' in list b, which should be [3, 4] </p>
<pre><code>index = (a == 'foo') &amp; (b == 'bar')
</code></pre>
<p>does not work as it does with e.g numpy arrays. How do I make this work?
thanks a lot!! ðŸ˜Š </p>
</div>
<div class="post-text" itemprop="text">
<p>Iterate with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> function, filter out all the elements which are <code>foo</code> and get only their index, like this</p>
<pre><code>&gt;&gt;&gt; [index for index, item in enumerate(a) if item == "foo"]
[0, 1, 2, 3, 4]
</code></pre>
<hr/>
<p>After the edit, the question changed drastically. But this solution would work</p>
<pre><code>&gt;&gt;&gt; a = ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'bar']
&gt;&gt;&gt; b = ['foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']
&gt;&gt;&gt; [idx for idx, values in enumerate(zip(a, b)) if values == ("foo", "bar")]
[3, 4]
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/364621/python-get-position-in-list">Python - get position in list</a></span>
<span class="comment-copy">Ah, I see, this indeed works. ðŸ˜Š However, my implementation is unfortunately slightly more complicated. I actually have two different lists with the same length and I need to find the indices, where list a matches, say, 'foo' and list b matches 'bar'. I will update my question, but thanks so far!</span>
<span class="comment-copy">@HansSnah Please check the updated answer.</span>
<span class="comment-copy">Works flawlessly, thanks! Another way I discovered now was to convert the lists to numpy arrays. Then the indexing works as I initially thought it would.</span>
