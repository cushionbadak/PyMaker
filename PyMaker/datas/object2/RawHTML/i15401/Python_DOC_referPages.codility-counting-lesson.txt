<div class="post-text" itemprop="text">
<p>I'm studying Codility Counting Lesson (<a href="https://codility.com/media/train/2-CountingElements.pdf" rel="noreferrer">https://codility.com/media/train/2-CountingElements.pdf</a>) and I need help to understand the fastest solution.</p>
<p>I am wondering why the difference is divided by 2 in line 8 <code>d //= 2</code>? Shouldn't the difference be sufficient to find the elements that we can swap between the arrays?</p>
<p>The Problem: </p>
<blockquote>
<p>You are given an integer <code>m</code> (<code>1 &lt; m &lt; 1000000</code>) and two non-empty,
  zero-indexed arrays <code>A</code> and <code>B</code> of <code>n</code> integers, <code>a0</code>, <code>a1</code>, ... ,
  <code>an−1</code> and <code>b0</code>, <code>b1</code>, ... , <code>bn−1</code> respectively (<code>0 &lt; ai</code>, <code>bi &lt; m</code>).
  The goal is to check whether there is a swap operation which can be
  performed on these arrays in such a way that the sum of elements in
  array <code>A</code> equals the sum of elements in array <code>B</code> after the swap. By
  swap operation we mean picking one element from array <code>A</code> and one
  element from array <code>B</code> and exchanging them.</p>
</blockquote>
<p>The solution:</p>
<pre><code> def fast_solution(A, B, m):
   n = len(A)
   sum_a = sum(A)
   sum_b = sum(B)
   d = sum_b - sum_a
   if d % 2 == 1:
       return False
   d //= 2
   count = counting(A, m)
   for i in xrange(n):
       if 0 &lt;= B[i] - d and B[i] - d &lt;= m and count[B[i] - d] &gt; 0:
           return True
   return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A swap between <code>A[i</code>] and <code>B[j]</code> adds <code>B[j]-A[i]</code> to <code>sum(A)</code> and <strong>subtracts</strong> the same value from <code>sum(B)</code>; therefore it affects the difference of the sums by <strong>twice</strong> <code>B[j]-A[i]</code>.</p>
<p>As a consequence, it's correct to halve the original difference (after checking it's even -- if it's odd no swap will work!-) to form the target for a possible swap.</p>
<p>Note also that the <code>counting</code> function they provide is not optimal modern Python -- to avoid reinventing the specific wheel of "counting items", see <a href="https://docs.python.org/2/library/collections.html#collections.Counter">https://docs.python.org/2/library/collections.html#collections.Counter</a> for Python 2, or <a href="https://docs.python.org/3/library/collections.html#collections.Counter">https://docs.python.org/3/library/collections.html#collections.Counter</a> for Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let <code>Ea = a0 + a1 + .. + a(n-1)</code>. Let <code>Eb = b0 + b1 + .. + b(n-1)</code>. Then swapping element <code>ai</code> and <code>bj</code> would cause the following effects on those sums: <code>Ea - ai + bj</code>, <code>Eb + ai - bj</code>. According to the Problem description, then those sums should be equal, so <code>Ea - ai + bj = Eb + ai - bj</code> Let's designate  <code>d = bj - ai</code>. Then we have the following equality: <code>Ea + d = Eb - d</code> which gives us <code>2d = Eb - Ea</code> or <code>d = (Eb - Ea)/2</code>. For the case when (Eb - Ea) is odd please see the <a href="https://stackoverflow.com/questions/27581933/codility-counting-lesson/27581991?noredirect=1#comment44178834_27581991">comment</a> from Alex Martelli</p>
<p>The only thing left is to find such <code>bj</code> and <code>ai</code> so that <code>bj - ai = d</code>.</p>
</div>
<span class="comment-copy"><code>As a consequence, it's correct to halve the original difference (after checking it's even -- if it's odd no swap will work!-)</code> why exactly swap won't work if the difference is odd?</span>
<span class="comment-copy">@dhblah, if the difference between the sums of the two arrays of integer is odd, there is clearly <b>no</b> way to equalize the sums by swapping -- easy to prove that if the diff between the sums is odd so is the sum of the sums, so what would you "equalize" each sum to?  A fraction?  Can't be done, obviously!-)</span>
<span class="comment-copy"><code>easy to prove that if the diff between the sums is odd so is the sum of the sums</code> - yes I can prove that. But still how does it make it impossible?</span>
<span class="comment-copy">@dhblah, if <code>sum(A)+sum(B)</code> is odd, given that a swap can't change that sum of sums, to what value would you want to equalize the sums?  It would have to be an odd number divided by 2, e.g a non-integer fraction, but that can't happen since all items of A and B are integers.  Not a programming problem, just one of simple logic and arithmetic, so take it e.g to math.stackexchange.com if you still can't see it.</span>
<span class="comment-copy">What is the purpose of m?</span>
