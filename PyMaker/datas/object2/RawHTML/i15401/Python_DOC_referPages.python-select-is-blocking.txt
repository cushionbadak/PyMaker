<div class="post-text" itemprop="text">
<p>I have a server socket that listens for incoming connections and creates new sockets for each client. I have a while loop to keep the server responsible (being able to close it using a button when there are no connections incoming) and for that i use <code>.select</code> to check if there are any connections. The problem I'm having is that <code>.select</code> is blocking for some reason. It waits until there is a connection instead of checking for a connection and then moving on. </p>
<pre><code>    def serverstart(self):
      self.buttonswitch("1")
      self.host = self.intip
      self.port = 5000
      s = socket.socket(socket.AF_INET6)
      s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
      s.setblocking(0)
      s.bind((self.host, self.port))

      inputs = [ s ]

      s.listen(5)
      self.serverstatus = "1"
      while s:
            inputready, outputready, exceptready = select.select(inputs, [], [] )
            if inputready == inputs and self.serverstatus == "1":
                    print inputready
                    c, addr = s.accept()
                    ct = threading.Thread(target=self.client_thread, args=[c, addr])
                    ct.start()
            if self.serverstatus == "0":
                    break
      s.close()
      print "Closing socket"
      self.buttonswitch("0")
</code></pre>
<p>Edit:</p>
<p>Added timeout for a working non-blocking select solution</p>
<pre><code>            inputready, outputready, exceptready = select.select(inputs, [], [], 0.1 )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The fourth parameter to <code>select</code> is a timeout.  According to the docs:</p>
<blockquote>
<p>The optional <em>timeout</em> argument specifies a time-out as a floating point number in seconds. When the <em>timeout</em> argument is <strong>omitted the function blocks</strong> until at least one file descriptor is ready.</p>
</blockquote>
<p>If you're wanting to avoid the default behavior you should modify your call to include the optional parameter.  <code>select(inputs, [], [], 1)</code>, for example.</p>
<p><a href="https://docs.python.org/3/library/select.html?highlight=select#select.select" rel="nofollow">Python Select Docs</a></p>
</div>
<span class="comment-copy"><i>"close it using a button"</i> ... so this is part of a GUI? Does the GUI have its own method for handling sockets?</span>
<span class="comment-copy">Use <code>0</code> to poll without any wait.</span>
<span class="comment-copy">The solution you offered works, thank you. I actually tried it before with a 0 for timeout, but for some reason it didn't work correctly.</span>
