<div class="post-text" itemprop="text">
<p>If a have a string like <code>abcd</code> or <code>1234</code> etc. how can I print together, the first character, then the first two characters, then the first three etc. all together?</p>
<p>For example for a <code>string = 1234</code> I would like to print/return <code>1121231234</code> or <code>aababcabcd</code></p>
<p>I have this code so far:</p>
<pre><code>def string_splosion(str):
    i = 0
    while i &lt;= len(str):
        i += 1
        print(str[:i])
print(string_splosion('abcd'))
</code></pre>
<p>But it prints/returns it in separate lines. I could write it manually as <code>print(str[0:1], str[1:2] &lt;...&gt;)</code> but how do I make python do it as I don't know how long the string is going to be?</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't use <code>str</code> as a variable name, because it shadows the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=join#text-sequence-type-str" rel="nofollow">built-in <code>str</code> type</a>. You could join the sliced strings together in your loop:</p>
<pre><code>def string_splosion(string):
    i, result = 0, ''
    while i &lt; len(string): # &lt; instead of &lt;=
        i += 1
        result += string[:i]
    return result
</code></pre>
<p>It's possible to shorten your code a little using <a href="https://docs.python.org/3/library/stdtypes.html?highlight=join#str.join" rel="nofollow"><code>str.join</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html?highlight=range#range" rel="nofollow"><code>range</code></a>:</p>
<pre><code>def string_splosion(string):
    return ''.join(string[:i] for i in range(1, len(string) + 1))
</code></pre>
<p>or using <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a> (Python 3.2+):</p>
<pre><code>import itertools
def string_splosion(string):
    return ''.join(itertools.accumulate(string))
</code></pre>
<p><code>itertools.accumulate</code> approach appears to be 2 times faster than <code>str.join</code> one and about 1.5 times faster than the original loop-based solution:</p>
<pre><code>string_splosion_loop(abcdef): 2.3944241080715223
string_splosion_join_gen(abcdef): 2.757582983268288
string_splosion_join_lc(abcdef): 2.2879220573578865
string_splosion_itertools(abcdef): 1.1873638161591886
</code></pre>
<hr/>
<p>The code I used to time the functions is</p>
<pre><code>import itertools
from timeit import timeit

string = 'abcdef'

def string_splosion_loop():
    i, result = 0, ''
    while i &lt; len(string):
        i += 1
        result += string[:i]
    return result

def string_splosion_join_gen():
    return ''.join(string[:i] for i in range(1, len(string) + 1))

def string_splosion_join_lc():
    # str.join performs faster when the argument is a list
    return ''.join([string[:i] for i in range(1, len(string) + 1)])

def string_splosion_itertools():
    return ''.join(itertools.accumulate(string))

funcs = (string_splosion_loop, string_splosion_join_gen, 
         string_splosion_join_lc, string_splosion_itertools)

for f in funcs:
    print('{.__name__}({}): {}'.format(f, string, timeit(f)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use:</p>
<pre><code>"".join([s[:i] for i in range(len(s)+1)])
</code></pre>
<p>As @abc noted, don't use <code>str</code> as a variable name because it's one of the default type. see <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange</a></p>
<p>E.g.:</p>
<pre><code>&gt;&gt;&gt; s = "1234"
&gt;&gt;&gt; "".join([s[:i] for i in range(len(s)+1)])
'1121231234'
&gt;&gt;&gt; s = "abcd"
&gt;&gt;&gt; "".join([s[:i] for i in range(len(s)+1)])
'aababcabcd'
</code></pre>
<hr/>
<p><code>range(len(s)+1)</code> is because of slicing, see <a href="https://stackoverflow.com/questions/509211/explain-pythons-slice-notation">Explain Python's slice notation</a>:</p>
<pre><code>&gt;&gt;&gt; s = "1234"
&gt;&gt;&gt; len(s)
4
&gt;&gt;&gt; range(len(s))
[0, 1, 2, 3]
&gt;&gt;&gt; s[:3]
'123'
&gt;&gt;&gt; range(len(s)+1)
[0, 1, 2, 3, 4]
&gt;&gt;&gt; s[:4]
'1234'
</code></pre>
<p>Then: </p>
<pre><code>&gt;&gt;&gt; s[:0]
''
&gt;&gt;&gt; s[:1]
'1'
&gt;&gt;&gt; s[:2]
'12'
&gt;&gt;&gt; s[:3]
'123'
&gt;&gt;&gt; s[:4]
'1234'
</code></pre>
<p>Lastly, join <code>list([s[:1], s[:2], s[:3], s[:4]])</code> using <code>"".join(list)</code>, see <a href="https://docs.python.org/2/library/string.html#string.join" rel="nofollow noreferrer">https://docs.python.org/2/library/string.html#string.join</a>:</p>
<pre><code>&gt;&gt;&gt; list([s[:1], s[:2], s[:3], s[:4]])
['1', '12', '123', '1234']
&gt;&gt;&gt; x = list([s[:1], s[:2], s[:3], s[:4]])
&gt;&gt;&gt; "".join(x)
'1121231234'
&gt;&gt;&gt; "-".join(x)
'1-12-123-1234'
&gt;&gt;&gt; " ".join(x)
'1 12 123 1234'
</code></pre>
<p>To avoid extract iteration in loop, you can use <code>range(1,len(s)+1)</code> since <code>s[:0]</code> returns string of 0 length:</p>
<pre><code>&gt;&gt;&gt; s = "1234"
&gt;&gt;&gt; "".join([s[:i] for i in range(1,len(s)+1)])
'1121231234'
&gt;&gt;&gt; "".join([s[:i] for i in range(len(s)+1)])
'1121231234'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using python 3 you can use this to print without a newline:</p>
<pre><code>print(yourString, end="")
</code></pre>
<p>So your function could be:</p>
<pre><code>def string_splosion(str):
    for i in range(len(str)):
        print(str[:i], end="")
print(string_splosion('abcd'))
</code></pre>
</div>
<span class="comment-copy">You are right about the string name, but that's what is used in the exercises. I usually change it to x or something when working on it and then change it back ( working at codingbat). your second line: i, result = o, ''  I'm assuming the '' the same( i is 0, ''(the same)</span>
<span class="comment-copy"><code>itertools.accumulate</code> is great!!!</span>
<span class="comment-copy">It is possible (maybe it's also worthless...) to strip a cycle in the list comprehension (proposed solution no.2) using <code>range(1,len(string)+1)</code>.</span>
<span class="comment-copy">@gboffi I updated the answer</span>
<span class="comment-copy">@AL12 I'm not quite sure I understand, sorry. <code>i, result = 1, ''</code> assigns the empty string to the <code>result</code> variable and integer value 1 to <code>i</code> variable. This is called <i>sequence unpacking assignment</i>.</span>
<span class="comment-copy">in your code: "".join([s[:i] for i in range(len(s)+1)]) what does the "" at the beginning do?</span>
<span class="comment-copy">updated the answer, hope the examples on <code>str.join()</code> helps, IMHO, you should also go and take a look at the documentations when the answer goes "see ..."</span>
