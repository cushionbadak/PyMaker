<div class="post-text" itemprop="text">
<p>For example I have several thousand strings similar to:</p>
<pre><code>zz='/cars-for-sale/vehicledetails.xhtml?dealerId=54222147&amp;zip=90621&amp;endYear=2015&amp;location=Buena%2BPark%2BCA-90621&amp;startYear=1981&amp;dealerName=CarMax%2BBuena%2BPark&amp;numRecords=100&amp;searchRadius=10&amp;listingId=389520333&amp;Log=0'
</code></pre>
<p>I wish to truncate it such that</p>
<pre><code>zz='/cars-for-sale/vehicledetails.xhtml?&amp;listingId=389520333&amp;Log=0'
</code></pre>
<p>I have two ways to accomplish this</p>
<pre><code>zz.replace(zz[36:zz.strip('&amp;Log=0').rfind('&amp;')],'')
</code></pre>
<p>OR</p>
<pre><code>re.sub('dealer.+Radius=10','',zz)
</code></pre>
<p>From a "good engineering practices" standpoint, which one is preferable? Readability vs. Maintainability vs. Speed</p>
<p>I am using Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>This question is difficult to answer because it is opinion-based. <code>str.replace</code> is definitely faster. Using <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow">timeit</a> in <code>ipython</code> with Python 3.4.2:</p>
<pre><code>In []: %timeit zz.replace(zz[36:zz.strip('&amp;Log=0').rfind('&amp;')],'')
100000 loops, best of 3: 2.04 µs per loop

In []: %timeit re.sub('dealer.+Radius=10','',zz)
100000 loops, best of 3: 2.83 µs per loop
</code></pre>
<p>As <code>Padraic Cunningham</code> pointed out, the difference is even greater in Python 2:</p>
<pre><code>In []: %timeit zz.replace(zz[36:zz.strip('&amp;Log=0').rfind('&amp;')],'')
100000 loops, best of 3: 2 µs per loop

In []: %timeit re.sub('dealer.+Radius=10','',zz)
100000 loops, best of 3: 3.11 µs per loop
</code></pre>
<p>Which one is better depends on the program. Generally, for Python, readability is more important than speed (because the standard PEP 8 style is based on the <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow">notion</a> that code is read more than written). If speed is vital for the program, the faster option <code>str.replace</code> would be better. Otherwise, the more readable option <code>re.sub</code> would be better.</p>
<h3>EDIT</h3>
<p>As <code>Anony-Mousse</code> pointed out, using <code>re.compile</code> instead is both <em>faster</em> <strong>and</strong> <em>more readable</em> than both. (You added that you're using Python 2, but I'll put the Python 3 test first to reflect the order of my other tests above.)  </p>
<p>With Python 3:</p>
<pre><code>In []: z_match = re.compile('dealer.+Radius=10')
In []: %timeit z_match.sub('', zz)
1000000 loops, best of 3: 1.36 µs per loop
</code></pre>
<p>With Python 2:</p>
<pre><code>In []: z_match = re.compile('dealer.+Radius=10')
In []: %timeit z_match.sub('', zz)
100000 loops, best of 3: 1.68 µs per loop
</code></pre>
</div>
<span class="comment-copy">python2 replace takes <code>1.91 µs</code> vs <code>3.37 µs</code> for re, python 3 is <code>2.1µs</code> vs <code>2.4µs</code></span>
<span class="comment-copy">@PadraicCunningham I am using python2.7, sorry I did not include that. So I know that replace is faster than using regex, but if the replace manipulation is so complex-looking, is it still preferable?</span>
<span class="comment-copy">From a "good engineering practices" standpoint, I would probably use <code>urlparse.urlparse()</code> and <code>urlparse.parse_qs()</code>... It would be slower though.</span>
<span class="comment-copy">FWIW <code>spl = zz.rsplit("&amp;",2)(zz[:36] + "&amp;{}&amp;{}".format(spl[-2], spl[-1]))</code> takes <code>1.17 µs</code> and <code>spl = zz.rsplit("&amp;",2) (zz[:36] + "&amp;"+spl[-2]+"&amp;" + spl[-1])</code> takes <code>935 ns</code>, but any version would break quite easily.</span>
<span class="comment-copy">How about regexps precompiled with re.compile, if you want speed?</span>
<span class="comment-copy">You, sir, are a genius. Thanks.</span>
