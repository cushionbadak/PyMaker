<div class="post-text" itemprop="text">
<p>In a csv file, I'm trying to replace certain characters with other characters.</p>
<p>My current code is similar to this:</p>
<pre><code>import csv

set1 = set('abc')
set2 = set('def')
set3 = set('ghi')

with open(path, 'r') as input, open(path2, 'w') as output:
    reader = csv.reader(input)
    writer = csv.writer(output)

    for row in reader:
            newrow = row
            newrow = [''.join('x' if c in set1 else c for c in item) for item in newrow]
            newrow = [''.join('y' if c in set2 else c for c in item) for item in newrow]
            newrow = [''.join('z' if c in set3 else c for c in item) for item in newrow]

            writer.writerow(newrow)
</code></pre>
<p>In this example I am only using three generator expressions, but it could easily be more than that.</p>
<p>Does anyone know the right way to do this? My concern is that this structure might not be the fastest (and certainly doesn't look optimal).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate</code></a> might be appropriate; something along the lines of</p>
<pre><code>replacements = [
    ('abc', 'x'),
    ('def', 'y'),
    ('ghi', 'z'),
]

trans = str.maketrans({ k: v for l, v in replacements for k in l })
</code></pre>
<p>and</p>
<pre><code>new_row = [item.translate(trans) for item in row]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a loop and parameterise the varying parts:</p>
<pre><code>newrow = row
for v, s in (('x', set1), ('y', set2), ('z', set3)):
    newrow = [''.join(v if c in s else c for c in item) for item in newrow]
</code></pre>
<p>If you are replacing characters, don't use sets but a mapping:</p>
<pre><code>mapping = dict.fromkeys(set1, 'x')
mapping.update(dict.fromkeys(set2, 'y'))
mapping.update(dict.fromkeys(set3, 'z'))
for row in reader:
    newrow = [''.join(mapping.get(c, c) for c in item) for item in newrow]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is something that combines both answers in some way and works great (multiple times faster than the code in the question):</p>
<pre><code>replacements = [
('abc', 'x'),
('def', 'y'),
('ghi', 'z'),
]

mapping = {a: b for c, b in replacements for a in c}

for row in reader:
    newrow = [''.join(mapping.get(c, c) for c in item) for item in row]
    writer.writerow(newrow)
</code></pre>
</div>
<span class="comment-copy">@MartijnPieters: oops! I missed that. Sleepy eyes, I'm afraid</span>
<span class="comment-copy">Tried it again tonight and it works! This is the fastest to execute.</span>
<span class="comment-copy">Second part of the answer is what I was looking for (way faster to execute).</span>
<span class="comment-copy">You don’t have to use <code>dict()</code> on the dict. Anyways, sorry to ask, but is there a reason not to use a string translation table? It’s the same as Martijn Pieters’s answer, but specialized to strings.</span>
<span class="comment-copy">I have adjusted my answer accordingly and tried your solution again (see comment).</span>
