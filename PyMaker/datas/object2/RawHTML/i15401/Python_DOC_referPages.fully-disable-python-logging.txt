<div class="post-text" itemprop="text">
<p>In my code I use <code>logging.info(...</code> and before that I configure with <code>logging.basicConfig(filename=...</code>. Is it possible to keep the logging lines in the code without them doing anything?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT: it seems that <code>disabled</code> is not supposed to be meant for public use. Look at Maggyero's answer for alternative solutions.</strong></p>
<p>Just disable the log handler and it won't write to anything anymore.</p>
<pre><code>logging.getLogger().disabled = True
</code></pre>
<p>Do note that every logger can have handlers so there might be more.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Using the main API</h1>
<p>In the logging Python library, one can completely disable logging (for <em>all</em> levels) for a particular logger either by:</p>
<ul>
<li>adding to it a <code>logging.NullHandler()</code> handler (to avoid the <code>logging.lastResort</code> handler) and setting its <code>propagate</code> attribute to <code>False</code> (to avoid the handlers of the parent loggers), or by</li>
<li>adding to it a <code>lambda record: False</code> filter.</li>
</ul>
<p>Code sample:</p>
<pre><code>import logging

# 1st solution
logging.getLogger("foo").addHandler(logging.NullHandler())
logging.getLogger("foo").propagate = False

# 2nd solution
logging.getLogger("foo").addFilter(lambda record: False)
</code></pre>
<p><em>Warning.</em> — Contrary to the 1st solution, the 2nd solution does not disable logging from child loggers (for instance <code>logging.getLogger("foo.bar")</code>), so one should use it only to disable logging for a single logger.</p>
<p><em>Note.</em> — Setting the logger's <code>disabled</code> attribute to <code>True</code> is not a 3rd solution, as it is not part of the public API. See <a href="https://bugs.python.org/issue36318" rel="nofollow noreferrer">https://bugs.python.org/issue36318</a>. Code sample:</p>
<pre><code># NOT a 3rd solution
logging.getLogger("foo").disabled = True
</code></pre>
<h1>Using the config API</h1>
<p>Alternatively, one can get the same behaviour with the <code>logging.config.dictConfig</code> function. Code sample:</p>
<pre><code>import logging.config

# 1st solution
logging.config.dictConfig({
    "version": 1,
    "handlers": {
        "null": {
            "class": "logging.NullHandler"
        }
    },
    "loggers": {
        "foo": {
            "handlers": ["null"],
            "propagate": False
        }
    }
})

# 2nd solution
logging.config.dictConfig({
    "version": 1,
    "filters": {
        "all": {
            "()": lambda: (lambda record: False)
        }
    },
    "loggers": {
        "foo": {
            "filters": ["all"]
        }
    }
})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>logging.disable(logging.CRITICAL)
</code></pre>
<p>to <a href="https://docs.python.org/2/library/logging.html#logging.disable" rel="nofollow">disable all logging calls</a> which are at level CRITICAL or below. Effectively this disables all logging calls.</p>
<p>You can enable the logging for all loggers again (at their own logging levels) by doing:</p>
<pre><code>logging.disable(logging.NOTSET)
</code></pre>
</div>
<span class="comment-copy">Your 2nd solution disabling the logger is a good solution. However your 1st solution setting an empty list of handlers is wrong. Firstly because it is not thread safe (you should use the <code>removeHandler</code> method which uses a <code>threading.RLock()</code> instance to accomplish that). Secondly because the <code>logging.lastResort</code> handler will be used in the absence of handlers. Instead you should have added a <code>logging.NullHandler()</code> instance (to avoid the <code>logging.lastResort</code> handler) and set <code>propagate</code> to <code>False</code> to avoid log record propagation to parent loggers' handlers.</span>
<span class="comment-copy">The <code>lastResort</code> handler didn't exist in Python 2 (it was added in 3.2) so when writing this 5 years ago I wasn't aware of it ;) <a href="https://docs.python.org/3.2/library/logging.html#logging.lastResort" rel="nofollow noreferrer">docs.python.org/3.2/library/logging.html#logging.lastResort</a> As for thread safety, that's completely irrelevant here. Replacing a variable has no lock safety issues. I'll remove the first solution though, with the <code>lastResort</code> handler it's not a good solution anymore.</span>
<span class="comment-copy">Even if the <code>lastResort</code> handler did not exist, the message <a href="https://docs.python.org/3/howto/logging.html#what-happens-if-no-configuration-is-provided" rel="nofollow noreferrer">"No handlers could be found for logger X"</a> would be printed on <code>sys.stderr</code>, which is not what can be called "fully disabled logging".</span>
<span class="comment-copy">That's (for Python 2) only the case when <code>raiseExceptions</code> is set which is not recommended on production systems. So the message would have been swallowed by the system.</span>
<span class="comment-copy">Finally using the <code>disabled</code> attribute is not a good idea as it is actually not part of the public API (see <a href="https://bugs.python.org/issue36318" rel="nofollow noreferrer">my discussion</a> with Vinay Sajip, the author of the <code>logging</code> library). So the correct solution is to either use a <code>lambda record: False</code> filter or a <code>logging.NullHandler()</code> handler without propagation.</span>
<span class="comment-copy">It should be noted that the <code>filter()</code> method has one small caveat. It doesn't propagate like handlers and levels do: <a href="https://www.saltycrane.com/blog/2014/02/python-logging-filters-do-not-propagate-like-handlers-and-levels-do/" rel="nofollow noreferrer">saltycrane.com/blog/2014/02/…</a> So if you want to filter everything you need to walk through all handlers.</span>
<span class="comment-copy">Note that adding a <code>NullHandler()</code> will only work if there's no existing handler. Otherwise it's completely futile.</span>
<span class="comment-copy"><i>Levels</i> and <i>handlers</i> do not "propagate": logger's <i>effective level</i> is inherited from parent loggers' level if not specified, and <i>log records</i> propagate to handlers of parent loggers. But that is a good point: if you want to filter everything, you need to walk through, more precisely, all <i>child loggers</i> (if you attach filters to loggers, like here) or all <i>parent handlers</i> (if you attach filters to handlers, like in your blog example). I have updated my answer, thanks.</span>
<span class="comment-copy">Looks good now, +1</span>
