<div class="post-text" itemprop="text">
<p>I need to be able to call a bash command every few milliseconds and I am trying to use the sub-process to do so. I currently use:</p>
<pre><code>p = subprocess.Popen(command, universal_newlines=True, cwd=CurrentWorkingDirectory ,shell=True, stdout=subprocess.PIPE)
</code></pre>
<p>and have a timer firing the command at the times needed. </p>
<p>My question is, if I am calling these commands through the use of <code>subprocess.Popen</code>, will this be opening new terminals to run each command? I want to make sure I don't run into any memory usage issues as I will be calling thousands of these commands.</p>
<p>What is the best way to go about this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Whatever you do, there are probably better alternatives than starting a thousand of processes in a minute whether you run out of memory or not.</p>
<p>To run subprocesses sequentially, use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_call" rel="nofollow"><code>subprocess.check_call</code></a> instead of <code>subprocess.Popen</code>.</p>
<blockquote>
<p>will this be opening new terminals to run each command?</p>
</blockquote>
<p>No, unless the command itself starts a new terminal.</p>
</div>
<div class="post-text" itemprop="text">
<p>To answer your question about terminals opening, that won't happen unless the underlying bash script is explicitly launching terminal tabs or something. As to your question about memory usage, that will entirely depend on what underlying scripts you are calling and whether you're doing it in a sequential or concurrent manner. I guess a little clarification may help!</p>
</div>
<span class="comment-copy">have you ever actually run out of memory doing this?</span>
<span class="comment-copy">why would you be opening new terminals?</span>
<span class="comment-copy">I am not able to test this yet, but I will be running a driver program from each command. I am not sure if each subsequent call of "subprocess.Popen" will open a new terminal or not since it runs in the background... I am wondering if they will pile up or there is anything that while eventually backfire on me by doing this.</span>
<span class="comment-copy">@TWagner: If you run one command (not one every 60ms), does a new terminal open? What if you run two sequential commands? Can't this be easily tested?</span>
<span class="comment-copy">Whether you open a new terminal or not would depend entirely on what <code>command</code> is. If it's <code>xterm</code>, then, yes, you would be opening a new terminal. If it's <code>df</code>, it should just attach to your current terminal...</span>
<span class="comment-copy">Ok thank you, I will try check_call. Though will this wait for the command to complete? I need the program to continue while these externals programs are spawned...</span>
<span class="comment-copy">click the link. It leads to the documentation. Use a dedicated thread to spawn subprocesses to avoid blocking the rest of the program</span>
<span class="comment-copy">So I am just running a driver program that needs to be run via the terminal using [python3 'program' blah blah blah]....as the command...So it will be sequential calls of "subprocess.Popen" almost 17 a second and will do this for up to several minutes.  So every 60 ms my program will use subprocess.Popen(newCommand)</span>
<span class="comment-copy">If that's the case then it entirely depends on the CPU and memory usage of the driver processes you are kicking off. Python doesn't have its own memory limit that it imposes on programs, so if this ballons then it will go until it exhausts your system's limits</span>
<span class="comment-copy">Ok, so is there any way to send sequential commands to the same terminal window, which is running in the background? Or will these open terminals exit once they are finished with their program?</span>
<span class="comment-copy">From the comments above as well, I think that there is a confusion between "process" and "terminal." Terminal is the thing you physically enter commands into on the command line. Popen will start a new child program in a new process. It has nothing to do with terminal windows. Popen is a non-blocking call. If you want to do this sequentially, I suggest instead using <code>call</code> or <code>check_output</code>. More here: <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">docs.python.org/2/library/subprocess.html#subprocess.Popen</a></span>
