<div class="post-text" itemprop="text">
<p>Can I call a global function from a function that has the same name?</p>
<p>For example:</p>
<pre><code>def sorted(services):
    return {sorted}(services, key=lambda s: s.sortkey())
</code></pre>
<p>By <code>{sorted}</code> I mean the global sorted function.
Is there a way to do this?
I then want to call my function with the module name:  <code>service.sorted(services)</code></p>
<p>I want to use the same name, because it does the same thing as the global function, except that it adds a default argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's name-resolution scheme which sometimes is referred to as <code>LEGB</code> rule, implies that when you use an unqualified name inside a function, Python searches up to four scopes— <strong>First</strong> the local (L) scope, then the local scopes of any enclosing (E) <code>def</code>s and <code>lambda</code>s, then the global (G) scope, and finally the built-in (B) scope. (Note that it will stops the search as soon as it finds a match)</p>
<p>So when you use <code>sorted</code> inside the functions interpreter considers it as a <strong>Global</strong> name (your function name) so you will have a recursion function. if you want to access to built-in <code>sorted</code> you need to specify that for Python . by <code>__builtin__</code> module (<strong>in Python-2.x</strong> ) and <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code></a> in Python-3.x (This module provides direct access to all ‘built-in’ identifiers of Python)</p>
<hr/>
<p>python 2 :</p>
<pre><code>import __builtin__
def sorted(services):
    return __builtin__.sorted(services, key=lambda s: s.sortkey())
</code></pre>
<p>python 3 :</p>
<pre><code>import builtins
def sorted(services):
    return builtins.sorted(services, key=lambda s: s.sortkey())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Store the original function reference before define a new function with the same name.</p>
<pre><code>original_sorted = sorted

def sorted(services):
    return original_sorted(services, key=lambda s: s.sortkey())
</code></pre>
<p>For, builtin functions like <a href="https://docs.python.org/2/library/functions.html#sorted" rel="noreferrer"><code>sorted</code></a>, you can access the function using <a href="https://docs.python.org/2/library/__builtin__.html" rel="noreferrer"><code>__builtin__</code> module</a> (In Python 3.x, <a href="https://docs.python.org/3/library/builtins.html" rel="noreferrer"><code>builtins</code> module</a>):</p>
<pre><code>import __builtin__

def sorted(services):
    return __builtin__.sorted(services, key=lambda s: s.sortkey())
</code></pre>
<p>But, both which shadow builtin function is not recommended. Choose other name if possible.</p>
</div>
<span class="comment-copy">Can you just write the code you would want to be able to write, run it, and if it fails tell us what the error message is?</span>
<span class="comment-copy">Of course you can access <code>__builtins__.sorted</code>, but what you're doing sounds like a bad plan.</span>
<span class="comment-copy">Just don't name your function the same as a built-in. Problem solved.</span>
<span class="comment-copy">If that function is not within a class, it is itself a global. If it is within a class, calling <code>sorted</code> instead of <code>self.sorted</code> or <code>cls.sorted</code> would do the job already.</span>
<span class="comment-copy">You should add proper attribution when using content from external sources: <a href="http://users.atw.hu/learningpython/lpython2-chp-13-sect-1.html" rel="nofollow noreferrer">users.atw.hu/learningpython/lpython2-chp-13-sect-1.html</a></span>
<span class="comment-copy">@AshwiniChaudhary yes , you're right , but as i read this content about some month ago and didn't remember it well i just copied the fist part  and as i add some extra words in it , i though that there is no need to give the source . i other word i mean that i knew the main notion , there is no need to add reference , but any way i think you're right , thanks for reminding</span>
<span class="comment-copy"><a href="http://meta.stackexchange.com/questions/160071/what-to-do-when-plagiarism-is-discovered" title="what to do when plagiarism is discovered">meta.stackexchange.com/questions/160071/…</a></span>
<span class="comment-copy">builtins is exactly what I was looking for.  Whether this is a bad idea or not I will find out from experience.</span>
<span class="comment-copy">original_sorted doesn't work for me.  I am doing this inside a module in Python 3.x.  I get this error:  AttributeError: 'builtin_function_or_method' object has no attribute 'sorted'</span>
<span class="comment-copy">@user13097, Could you provide the source your run? What about <code>__builtin__</code> / <code>builtins</code> approache?</span>
<span class="comment-copy">@user13097, See the demo that use <code>original_sorted</code>: <a href="http://asciinema.org/a/15036" rel="nofollow noreferrer">asciinema.org/a/15036</a></span>
