<div class="post-text" itemprop="text">
<p>I want to know how you get the months by the giving day, week number and year. </p>
<p>For example if you have something like this </p>
<pre><code>def getmonth(day, week, year):
    # by day, week and year calculate the month
    print (month)

getmonth(28, 52, 2014)
# print 12

getmonth(13, 42, 2014)
# print 10

getmonth(6, 2, 2015)
# print 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://stackoverflow.com/questions/27675323/get-month-by-week-day-and-year/27675687#comment43765588_27675323">interjay's suggestion</a>:</p>
<pre><code>import datetime as DT

def getmonth(day, week, year):
    for month in range(1, 13):
        try:
            date = DT.datetime(year, month, day)
        except ValueError:
            continue
        iso_year, iso_weeknum, iso_weekday = date.isocalendar()
        if iso_weeknum == week:
            return date.month

print(getmonth(28, 52, 2014))
# 12

print(getmonth(13, 42, 2014))
# 10

print(getmonth(6, 2, 2015))
# 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with the <a href="https://pypi.python.org/pypi/isoweek/" rel="nofollow">isoweek</a> module, something like this for your first example:</p>
<pre><code>from isoweek import Week
w = Week(2014, 52)
candidates = [date for date in w.days() if date.day == 28]
assert len(candidates) == 1
date = candidates[0] # your answer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm using <a href="https://labix.org/python-dateutil" rel="nofollow">python-dateutil</a> when I need to implement some tricky date operations.</p>
<pre class="lang-py prettyprint-override"><code>from datetime import date
from dateutil.rrule import YEARLY, rrule

def get_month(day, week, year):
    rule = rrule(YEARLY, byweekno=week, bymonthday=day, dtstart=date(year, 1, 1))
    return rule[0].month
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import datetime, timedelta    
def getmonth(day, week, year):
    d = datetime.strptime('%s %s 1' % (week-1, year), '%W %Y %w')

    for i in range(0, 7):
        d2 = d + timedelta(days=i)
        if d2.day == day:
            return d2.month
</code></pre>
</div>
<span class="comment-copy">Check the <a href="http://docs.python.org/library/calendar.html#module-calendar" rel="nofollow noreferrer">Calendar</a> module once :)</span>
<span class="comment-copy">Why work from day/week/year ? Just work out the date and then use strftime() with %U or %W .      See : <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">Try the day in all 12 months and see which one matches the correct week number.</span>
<span class="comment-copy">note: <a href="https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar" rel="nofollow noreferrer">"iso week" has special meaning</a>. <code>datetime(2015, 1,1).isocalendar()</code> returns the expected <code>(2015, 1, 4)</code> but <code>datetime(2016, 1,1).isocalendar()</code> returns <code>(2015, 53, 5)</code> i.e., the 1st January 2016 is considered to be the <i>53th</i> iso week of the <i>previous</i> 2015 year.</span>
<span class="comment-copy">thanks a lot for the answer! Short and perfect! :)</span>
<span class="comment-copy">thanks a lot for the answer! I love that you all have giving me the same answer but in a different way!</span>
<span class="comment-copy">From the docs: "When used with the strptime() method, %U and %W are only used in calculations when the day of the week and the year are specified." It looks like OP is using day number in the month and not in the week.</span>
<span class="comment-copy">Yes, you have right.</span>
<span class="comment-copy">The day number in OP's examples has values like 28 and 13, so it can't be the day number in the week.</span>
<span class="comment-copy">I have edited my answer.</span>
<span class="comment-copy">@interjay, the day numbers I am using should be the ones in the week. I used <a href="http://www.epochconverter.com/date-and-time/weeknumbers-by-year.php" rel="nofollow noreferrer">link</a> to get the correct value! it is using ISO-8601 for calendars!</span>
