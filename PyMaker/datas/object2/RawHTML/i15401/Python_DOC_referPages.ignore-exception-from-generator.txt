<div class="post-text" itemprop="text">
<p>By using <code>os.walk()</code> to traverse the folder like this:</p>
<pre><code>for subdir, dirs, files in os.walk(path):
    do something...
</code></pre>
<p>There will throw a exception: <code>UnicodeDecodeError</code>, I want to ignore the exception and continue, and I tried this:</p>
<pre><code>try:
    for subdir, dirs, files in os.walk(path):
        do something...
except Exception, e:
    logging.exception(e)
    continue   # this continue is illegal
</code></pre>
<p>as the comment says, the <code>continue</code> in exception part is a syntax error. Is there a way to ignore the exception and continue to traverse?</p>
<p>The exception is thrown from <code>os.walk()</code>, so put the <code>try/except</code> within <code>for</code> can not catch the exception. The <code>os.walk()</code> will return a <em>python generator</em>, How to catch the exception within it?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update:</strong></p>
<p>I originally thought that the error was being raised by the <code>do something...</code> code.  Since it is actually being raised by <code>os.walk</code>, you will need to do something a little different:</p>
<pre><code>walker = os.walk(path)
while True:
    try:
        subdir, dirs, files = next(walker)
    except UnicodeDecodeError as e:
        logging.exception(e)
        continue
    except StopIteration:
        break

    do something...
</code></pre>
<p>Basically, this is taking advantage of the fact that <code>os.walk</code> returns a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow">generator object</a>.  This allows us to call <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a> on it and thereby have control over the iteration during each step.</p>
<p>The <code>subdir, dirs, files = next(walker)</code> line attempts to advance the iteration.  If a <code>UnicodeDecodeError</code> is raised, it is logged and we continue on to the next step.  If a <code>StopIteration</code> exception is raised, it means that we are done walking the directory tree.  So, we break the loop.</p>
<hr/>
<p>Since <code>continue</code> needs to be inside the loop, you will need to move the <code>try/except</code> block in there as well:</p>
<pre><code>for subdir, dirs, files in os.walk(path):
    try:
        do something...
    except Exception, e:
        logging.exception(e)
        continue   # this continue is *not* illegal
</code></pre>
<p>Also, doing:</p>
<pre><code>except Exception, e:
</code></pre>
<p>has been deprecated.  You should be using the <code>as</code> keyword in place of <code>,</code>:</p>
<pre><code>except Exception as e:
</code></pre>
<p>While you're at it, you should replace the generic <code>Exception</code> with the specific <code>UnicodeDecodeError</code>:</p>
<pre><code>except UnicodeDecodeError as e:
</code></pre>
<p>You should always try to catch the most specific exception that you can.  Otherwise, you run the risk of accidentally catching an exception that you did not mean to handle.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar situation while iterating over links using Beautiful Soup. This is the code I wrote for that:</p>
<pre><code>class suppressed_iterator:
    def __init__(self, wrapped_iter, skipped_exc = Exception):
        self.wrapped_iter = wrapped_iter
        self.skipped_exc  = skipped_exc

    def __next__(self):
        while True:
            try:
                return next(self.wrapped_iter)
            except StopIteration:
                raise
            except self.skipped_exc:
                pass

class suppressed_generator:
    def __init__(self, wrapped_obj, skipped_exc = Exception):
        self.wrapped_obj = wrapped_obj
        self.skipped_exc = skipped_exc

    def __iter__(self):
        return suppressed_iterator(iter(self.wrapped_obj), self.skipped_exc)
</code></pre>
<p>An example:</p>
<pre><code>class IHateThirteen:
    ''' Throws exception while iterating on value 13 '''

    def __init__(self, iterable):
        self.it = iter(iterable)

    def __iter__(self):
        return self

    def __next__(self):
        v = next(self.it)
        if v == 13:
            raise ValueError('I hate 13!')
        return v

# Outputs [10, 11, 12, 14, 15]
exception_at_thirteen = IHateThirteen([10, 11, 12, 13, 14, 15])
print(list(suppressed_generator(exception_at_thirteen)))

# Raises ValueError
exception_at_thirteen = IHateThirteen([10, 11, 12, 13, 14, 15])
print(list(exception_at_thirteen))
</code></pre>
<p>You can fix your code by using above code:</p>
<pre><code>for subdir, dirs, files in suppressed_generator(os.walk(path)):
    do something...
</code></pre>
<p>Above code can be extended more to have callbacks per skipped exception types if needed, but it may be more pythonic to use <a href="https://stackoverflow.com/a/27613629/7771076">iCodez's answer</a> in such a case.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for subdir, dirs, files in os.walk(path):
    try:
        do something...
    except Exception, e:
        logging.exception(e)
        continue   # this continue is illegal
</code></pre>
</div>
<span class="comment-copy">Also better to catch the specific UnicodeDecodeError rather than any general Exception "do something" might raise.</span>
<span class="comment-copy">The exception throw from <code>os.walk()</code>, not within the <code>for</code> loop, so the try/except do nothing with that exception.</span>
<span class="comment-copy">@coanor - See my edit.</span>
<span class="comment-copy">This does not answer anything, it only copies a piece of code from the original question.</span>
