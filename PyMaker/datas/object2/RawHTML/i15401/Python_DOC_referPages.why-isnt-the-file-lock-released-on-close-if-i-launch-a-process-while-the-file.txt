<div class="post-text" itemprop="text">
<p>If I open a file, acquire a lock, then close the file:</p>
<pre><code>import fcntl
file = open("some_file", "w")
fcntl.flock(file.fileno(), fcntl.LOCK_EX)
file.close()
</code></pre>
<p>The file lock is released immediately when the file is closed, which is what I would expect.</p>
<p>However, if I launch a background process while the file is locked:</p>
<pre><code>import fcntl
import subprocess
file = open("some_file", "w")
fcntl.flock(file.fileno(), fcntl.LOCK_EX)
subprocess.Popen(["python", "-c", "import time; time.sleep(10.0)"])
file.close()
</code></pre>
<p>The above code exits immediately, but the file lock is not released until the background process has finished. If I run the above code and then immediately run it a second time, the second instance blocks for ten seconds. Why isn't the lock released?</p>
<p>I know I can explicitly release the lock by calling flock() with LOCK_UN, but that's not what I'm asking. My question is, why does launching a background process prevent close() from releasing the file lock?</p>
</div>
<div class="post-text" itemprop="text">
<p>The child process inherits file descriptors from the parent. And the "locking" might be shared for the same file between different OS processes (that is the point of the locking).</p>
<p>You could specify <code>close_fds=True</code> to close the file in the child too. <code>close_fds=True</code> is the default on POSIX systems in Python 3.</p>
<p>Newly created file descriptors are non-inheritable by default since Python 3.4. See <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-446" rel="nofollow">PEP 446</a>.</p>
</div>
<span class="comment-copy">Because the lock is held by two processes -- the parent AND the child which inherited it -- and file locking uses "reference counting"-like semantics.</span>
