<div class="post-text" itemprop="text">
<p>Certain classes in the Python standard library (and more generally) make use of dynamic dispatch to call specialised methods in subclasses.</p>
<p>For example, the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow"><code>ast.NodeVisitor</code></a> class defines a <code>visit</code> method.
This method calls <code>visit_classname</code> methods where appropriate.
These methods are not defined on <code>ast.NodeVisitor</code> itself, but may be provided by interested subclasses.</p>
<p>In other words, subclasses override only the methods that they wish to handle, eg:</p>
<pre><code>class SpecialNodeVisitor(ast.NodeVisitor):
    def visit_FunctionDef(self, node):
        print(node)  # prints any node of type FunctionDef
</code></pre>
<p>Things get more complicated if <code>SpecialNodeVisitor</code> is itself subclassed.
<code>super()</code> may be used if <code>visit_FunctionDef</code> is overriden, but not in other cases, ie:</p>
<pre><code>class EvenMoreSpecialNodeVisitor(SpecialNodeVisitor):
    def visit_FunctionDef(self, node):
        super().visit_FunctionDef(node)  # works fine
        # ...

    def visit_Call(self, node):
        super().visit_Call(node)  # AttributeError
        # ...
</code></pre>
<p>Specifically, the second example causes <code>AttributeError: 'super' object has no attribute 'visit_Call'</code>.</p>
<hr/>
<p>The above behaviour makes sense: the parent class <em>doesn't</em> have the method in question.
However, it causes two problems:</p>
<ul>
<li>When writing the subclass, some dynamic methods need to call <code>super()</code>, but some don't.  This inconsistency makes it <em>really</em> easy to make mistakes.</li>
<li>If a new dynamic method is later added to the parent class, all of the subclasses have to be altered to call <code>super()</code>.  This breaks a really fundamental rule of object-oriented programming.</li>
</ul>
<p><strong>Ideally, all subclass methods should be able to make use of <code>super()</code>, with the call being a no-op if the method is not defined.
Is there a 'pythonic' way to achieve this?</strong></p>
<p>I am particularly after a solution which is transparent to the subclass (for example, I don't want to try/except on <code>AttributeError</code> in every single method, as this would be just as easy to forget, and is ugly as hell).</p>
<p>(It's worth noting that in many cases, and indeed in this particular example, it's not possible to simply define all the possible methods on the parent class, as doing so may have side effects.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot have what you want; the most readable method is to simply use <code>try..except</code> on that <code>AttributeError</code>:</p>
<pre><code>def visit_Call(self, node):
    try:
        super().visit_Call(node)
    except AttributeError:
        pass
</code></pre>
<p>The alternative would be for you to add aliases for <code>NodeVisitor.generic_visit</code> for every node type to <code>SpecialNodeVisitor</code>:</p>
<pre><code>import inspect

class SpecialNodeVisitor(ast.NodeVisitor):     
    def visit_FunctionDef(self, node):
        print(node)  # prints any node of type FunctionDef

_ast_nodes = inspect.getmembers(
    ast,
    lambda t: isinstance(t, type) and issubclass(t, ast.AST) and t is not ast.AST)
for name, node in _ast_nodes:
    name = 'visit_' + name
    if not hasattr(SpecialNodeVisitor, name):
        setattr(SpecialNodeVisitor, name, ast.NodeVisitor.generic_visit)
</code></pre>
<p>You could encapsulate that into a meta class if you want to. Since <code>super()</code> looks directly into the class <code>__dict__</code> namespaces you cannot simply define a <code>__getattr__</code> method on the meta class to do the lookup dynamically, unfortunately.</p>
</div>
<span class="comment-copy">A) add the no-op methods to the parent class B) encapsulate the try-except approach.</span>
<span class="comment-copy">What you describe here its just the normal behavior of the language. Looks very logic to me if there is no method in one of the parent classes to raise an attribute error on super().  How can you call something that doesn't exist?!   If you really want to do that add the no-op method on the parent classes.</span>
<span class="comment-copy">Dude, adding methods to classes during the runtime is just wrong. Why would you do that? It generates these kinds of problems. I'm sure it can be avoided. Maybe try to redesign your app.</span>
<span class="comment-copy">@andrefsp - The standard behaviour in frameworks which use this paradigm (eg Objective C) is for invalid messages to be ignored.  I understand that Python doesn't normally make use of this, but I didn't design the <code>ast</code> library.</span>
<span class="comment-copy">@freakish - No methods are being added to classes at runtime in the above examples.</span>
<span class="comment-copy">That's actually kind of brilliant.  I'd thought about using <code>inspect</code> to get all the possible methods, but it didn't even occur to me to alias them to <code>generic_visit</code>;  Thanks!</span>
