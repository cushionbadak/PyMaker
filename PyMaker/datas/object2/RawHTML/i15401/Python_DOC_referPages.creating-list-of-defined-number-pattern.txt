<div class="post-text" itemprop="text">
<p>I want to create a list that produces the output of:</p>
<p><code>[001,002,003,004,005]</code></p>
<p>and keeps going until <code>300</code>. Having the <code>0</code>'s in front of the digits is essential. I tried a method such as:</p>
<pre><code>a = []
for i in range(0,3):
    for j in range(0,10):
        for k in range(0,10):
            a.append(i j k)
</code></pre>
<p>However, for obvious reasons, the <code>append</code> function does not behave in the manner I would like. </p>
<p>Do people have any suggestions on how else I could do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot produce a list with <em>integers</em> that are presented with padding, no. You <em>can</em> produce <em>strings</em> with leading zeros:</p>
<pre><code>a = [format(i + 1, '03d') for i in range(300)]
</code></pre>
<p>The <a href="https://docs.python.org/2/library/functions.html#format" rel="nofollow"><code>format()</code> function</a> is used to format integers to a field width of 3 characters with leading zeros to pad out the length, encoded as <code>03d</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; [format(i + 1, '03d') for i in range(300)]
['001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052', '053', '054', '055', '056', '057', '058', '059', '060', '061', '062', '063', '064', '065', '066', '067', '068', '069', '070', '071', '072', '073', '074', '075', '076', '077', '078', '079', '080', '081', '082', '083', '084', '085', '086', '087', '088', '089', '090', '091', '092', '093', '094', '095', '096', '097', '098', '099', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could subclass <code>list</code> and overload its <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code> method</a> to call <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow"><code>str.zfill</code></a> on each number:</p>
<pre><code>class NumList(list):
    def __repr__(self):
        return '[' + ', '.join([str(x).zfill(3) for x in self]) + ']'
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class NumList(list):
...     def __repr__(self):
...         return '[' + ', '.join([str(x).zfill(3) for x in self]) + ']'
...
&gt;&gt;&gt; MyList([1, 2, 3, 4, 5])
[001, 002, 003, 004, 005]
&gt;&gt;&gt;
</code></pre>
<p>To make the exact list you want, do <code>NumList(range(300))</code>.</p>
<p>Note however that this does not make integers with leading zeros (as @MartijnPieters said, that is impossible).  The output is still a string. All this is doing is telling Python how to display those integers when they are outputed to the console.</p>
</div>
<span class="comment-copy">0 before means an octal number in python so you cannot have ints with leading zeros</span>
<span class="comment-copy">@PadraicCunningham: and even then it's just a literal syntax, and never used to <i>represent</i> the integer values produced.</span>
<span class="comment-copy">@MartijnPieters, yes, my main point is 011 is not going to be 11</span>
