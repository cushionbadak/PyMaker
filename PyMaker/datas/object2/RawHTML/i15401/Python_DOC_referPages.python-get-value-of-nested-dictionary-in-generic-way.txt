<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13238255/is-it-possible-to-turn-a-list-into-a-nested-dict-of-keys-without-recursion">Is it possible to turn a list into a nested dict of keys *without* recursion?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I'm making simple use case of my problem, here its is: </p>
<pre><code>dic =  {'a': 1, 'b': {'c': 2}}
</code></pre>
<p>Now i want to have a method which operates on this dictionary, fetch values based on the key.</p>
<pre><code>def get_value(dic, key):
     return dic[key]
</code></pre>
<p>At different places this generic method will be called to fetch the values.</p>
<p><code>get_value(dic, 'a')</code> will work.</p>
<p>Is it be possible to get the value <code>2 (dic['b']['c'])</code> in more generic way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using unbound method <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>dict.get</code></a> (or <code>dict.__getitem__</code>) and <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>reduce</code></a>:</p>
<pre><code>&gt;&gt;&gt; # from functools import reduce  # Python 3.x only
&gt;&gt;&gt; reduce(dict.get, ['b', 'c'], {'a': 1, 'b': {'c': 2}})
2

&gt;&gt;&gt; reduce(lambda d, key: d[key], ['b', 'c'], {'a': 1, 'b': {'c': 2}})
2
</code></pre>
<p><strong>UPDATE</strong></p>
<p>If you use <code>dict.get</code> and try to access non-existing key, it could hide <code>KeyError</code> by returning <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; reduce(dict.get, ['x', 'c'], OrderedDict({'a': 1, 'b': {'c': 2}}))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor 'get' requires a 'dict' object but received a 'NoneType'
</code></pre>
<p>To prevent that, use <code>dict.__getitem__</code>:</p>
<pre><code>&gt;&gt;&gt; reduce(dict.__getitem__, ['x', 'c'], OrderedDict({'a': 1, 'b': {'c': 2}}))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'x'
</code></pre>
</div>
<span class="comment-copy">You meant <code>dic['b']['c']</code>, not <code>dic['a']['b']</code>, right?</span>
