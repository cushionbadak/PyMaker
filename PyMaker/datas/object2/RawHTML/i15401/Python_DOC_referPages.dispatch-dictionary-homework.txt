<div class="post-text" itemprop="text">
<pre><code>def get_map_iterator(slist,gfunc=None):
index = 0
def Next():
    nonlocal index
    x = slist[index]
    index = index + 1
    return x
def has_more():
    if slist[index] != None :
        return True
    else:
        return False

dispatch = {
'Next': lambda: gfunc(Next()),
'has_more': has_more
}
return dispatch

it = get_map_iterator((1,3,6))
for i in range(i,6):
it['Next']()

it = get_map_iterator((1,3,6),lambda x:1/x) 
while it['has_more'](): 
it['next']() 
</code></pre>
<p>p.s
the results of of this code should be : </p>
<pre><code>1
3
6
no more items
no more items

1.0
0.33333
0.166666
</code></pre>
<p>How does the change to gfunc will affect this, i mean what will i will need to change in order for this to work if i do get a  func or i dont get  a func </p>
</div>
<div class="post-text" itemprop="text">
<p><code>get_map_iterator()</code> returns a function object (<code>dispatch</code>). You are trying to treat that object as if it was a dictionary.</p>
<p>You want to <em>call</em> it instead:</p>
<pre><code>while it('has_more'):
    it('Next')
</code></pre>
<p>Your <code>dispatch()</code> function does not itself return another function object, so you'd not call whatever <code>it()</code> returns.</p>
<p>Your <code>has_more</code> route then fails with:</p>
<pre><code>&gt;&gt;&gt; it('has_more')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 17, in dispatch
  File "&lt;stdin&gt;", line 9, in has_more
TypeError: next expected at least 1 arguments, got 0
</code></pre>
<p>presumably because you meant to use the <code>Next()</code> function you defined, not the built-in <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next()</code> function</a>.</p>
<p>However, even fixing that won't get you your output, because <code>slist[0] != slist[1]</code>.</p>
<p>It sounds as if you were trying to actually return a <em>dictionary</em>:</p>
<pre><code>dispatch = {
    'Next': lambda: gfunc(Next()),
    'has_more': has_more
}
return dispatch
</code></pre>
<p>This return value you <em>would</em> use like you did originally, by looking up the callable via a key, then calling it.</p>
</div>
<span class="comment-copy">Yes i have noticed that thank you, there is allso another problem.    'TypeError: 'bool' object is not callable'</span>
<span class="comment-copy">@Mike.G: remove the <code>()</code> at the end, you are not returning functions.</span>
<span class="comment-copy">yes i do need to use the dispatch dictionary.. i have just noticed that....</span>
<span class="comment-copy">TypeError: 'dict' object is not callable - now this error have droped by with the changes that you have told me to do</span>
<span class="comment-copy">@Mike.G: I did say you had to go back to your original code, so use <code>it['has_more']()</code> and <code>it['Next']()</code>.</span>
