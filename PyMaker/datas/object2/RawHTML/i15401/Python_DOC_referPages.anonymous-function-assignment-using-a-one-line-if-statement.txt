<div class="post-text" itemprop="text">
<p>When assigning a variable to an anonymous function using a one line if statement, the 'else' case does not behave as expected. Instead of assigning the anonymous function listed after the 'else', a <em>different</em> anonymous function is assigned. This function returns the <em>expected</em> anonymous function. </p>
<pre><code>&gt;&gt; fn = lambda x: x if True else lambda x: x*x
&gt;&gt; fn(2)
2
&gt;&gt; fn = lambda x: x if False else lambda x: x*x
&gt;&gt; fn(2)
&lt;function &lt;lambda&gt; at 0x10086dc08&gt;
&gt;&gt; fn('foo')(2)
4
</code></pre>
<p>What seems to be happening is that <code>lambda x: x if False else lambda x: x*x</code> as a whole is returned as an anonymous function in the 'else' case. I was able to achieve the desired behavior by using the following:</p>
<pre><code>&gt;&gt; fn = (lambda x: x*x, lambda x: x)[True]
&gt;&gt; fn(2)
2
&gt;&gt; fn = (lambda x: x*x, lambda x: x)[False]
&gt;&gt; fn(2)
4
</code></pre>
<p>However, I would still like to get the bottom of this unusual behavior. Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>lambda</code> has a weaker binding than the conditional expression.  In fact, it has the least operator precedence in the language.  From the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">documentation</a><sup>1</sup>:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/MrvXx.png"/></p>
<p>So, this line:</p>
<pre><code>fn = lambda x: x if True else lambda x: x*x
</code></pre>
<p>is actually being interpreted by Python as:</p>
<pre><code>fn = lambda x: (x if True else lambda x: x*x)
</code></pre>
<p>To do what you want, you would need to add parenthesis:</p>
<pre><code>fn = (lambda x: x) if True else (lambda x: x*x)
</code></pre>
<hr/>
<p><sub><sup>1</sup>Note that the table is ordered from least to greatest.</sub></p>
</div>
