<div class="post-text" itemprop="text">
<p>While I'm familiar with both HTTP servers and event loops, I'm having some trouble grasping the inner workings of Python's <a href="https://docs.python.org/3/library/asyncio.html" rel="noreferrer">asyncio</a>.</p>
<p>As a learning exercise, I've been trying to write a minimal HTTP server (just echoing out the request method, URI, headers and body), without additional dependencies. I've looked into <a href="https://github.com/KeepSafe/aiohttp" rel="noreferrer">aiohttp</a> and <a href="https://github.com/gawel/aiowsgi" rel="noreferrer">aiowsgi</a> for reference, but having trouble understanding what's going on there - in part because the perceived complexity of protocols, transports etc. is a bit overwhelming. So I'm currently stuck because I don't quite know where to begin.</p>
<p>Is it naive to expect this to be just a few lines of code to establish the connection, consume the incoming text stream and send back another text stream?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can take a look on <a href="https://github.com/pfalcon/picoweb" rel="noreferrer">picoweb</a> as example of very simple (and very limited) HTTP server.</p>
<p>But, sure, when you'll try to implement full-feature web server you will get something like aiohttp -- HTTP is complex (even maybe complicated) standard.</p>
</div>
<span class="comment-copy">Thanks - that's quite close to what I was looking for. <code>start_server</code> in particular was the missing piece for me.</span>
<span class="comment-copy">Sure. Trivial examples are good for learning. But as co-author of <i>aiohttp</i> I guess to use <a href="http://aiohttp.readthedocs.org/en/v0.12.0/web.html" rel="nofollow noreferrer">aiohttp.web</a> for production code.</span>
