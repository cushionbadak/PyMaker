<div class="post-text" itemprop="text">
<p>I found <a href="http://www.secnetix.de/olli/Python/lambda_functions.hawk" rel="nofollow"><strong><em>this</em></strong></a> tutorial on using lambda within python. Upon attempting to do the 3rd example I've discovered the results are not the same as in the tutorial. I'm 99% sure my code is correct, but here it is nonetheless.</p>
<pre><code>my_list = [2,9,10,15,21,30,33,45]

my_new_list = filter(lambda x: x % 3 == 0, my_list)
print(my_new_list)
</code></pre>
<p>The result of this is:
    <code>&lt;filter object at 0x004F39F0&gt;</code></p>
<p>Things to keep in mind:</p>
<ul>
<li>I'm using Python 3.4.2</li>
<li>Using Python 2.7.2 work fine and returns <code>[9, 15, 21, 30, 33, 45]</code></li>
</ul>
<p>I understand that it simply doesn't work in Python 3.4+; I'm more curious as to why it doesn't work and also looking for an equal way of doing this, with or without lambda.</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference in output is caused by the fact that <code>filter</code> returns an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="noreferrer">iterator</a> in Python 3.x.  So, you need to manually call <code>list()</code> on it in order to get a list:</p>
<pre><code>&gt;&gt;&gt; my_list = [2,9,10,15,21,30,33,45]
&gt;&gt;&gt; filter(lambda x: x % 3 == 0, my_list)
&lt;filter object at 0x01ACAB50&gt;
&gt;&gt;&gt; list(filter(lambda x: x % 3 == 0, my_list))
[9, 15, 21, 30, 33, 45]
&gt;&gt;&gt;
</code></pre>
<p>The same goes for <code>map</code>, which was also changed in Python 3.x to return an iterator.  You can read about these changes here: <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="noreferrer">https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists</a></p>
<hr/>
<p>That said, <code>filter</code> and <code>map</code> are generally disliked by Python programmers.  Especially so if you need to use a <code>lambda</code> with them.  A better approach in this case (and pretty much all others) would be to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>:</p>
<pre><code>my_list = [2,9,10,15,21,30,33,45]

my_new_list = [x for x in my_list if x % 3 == 0]
print(my_new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's because in Python 3, the filter function returns an iterator. Use <code>list(my_new_list)</code> to get all the results. To be clear, it's not that <code>filter</code> "doesn't work", but that it's behavior is different in Python 3.x compared to 2.x.</p>
<p>See <a href="https://stackoverflow.com/questions/13638898/how-to-use-filter-map-and-reduce-in-python-3-3-0">How to use filter, map, and reduce in Python 3</a> for a previous answer.</p>
<p>The reasoning behind this is that if you have a large list, processing all the elements right away may not be desirable. The generator will produce results on demand, letting you save memory in the case that you only end up using part of the result (e.g. if iterating through the filtered list).</p>
</div>
<span class="comment-copy">Great answer! Thank you for explaining this. Also, thanks for showing me a preferred alternative.</span>
