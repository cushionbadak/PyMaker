<div class="post-text" itemprop="text">
<p>So, I've attempted to make a simple Base 10 to Base 16 converter (I realize this is Base 10 integer to a mock-Base 16 string). I'm fairly new to Python; I just started learning it this week (I have prior programming experience with C#, so I'm not lost on this).</p>
<pre><code>R1 = 0
R2 = 0
R3 = 0
R4 = 0
R5 = 0

number = int(raw_input("Enter a base 10 number (Smaller than 1048576): "))

def numberConvert(a=0):
  a = str(a)

  if (a == "10"):
    a = "a"
  elif (a == "11"):
    a = "b"
  elif (a == "12"):
    a = "c"
  elif (a == "13"):
    a = "d"
  elif (a == "14"):
    a = "e"
  elif (a == "15"):
    a = "f"
  else:
    a = a

#Dividing

Q1 = (number // 16)
R1 = (number % 16)

Q2 = (Q1 // 16)
R2 = (Q1 % 16)

Q3 = (Q2 // 16)
R3 = (Q2 % 16)

Q4 = (Q3 // 16)
R4 = (Q3 % 16)

Q5 = (Q4 // 16)
R5 = (Q4 % 16)

R1 = numberConvert(R1)
R2 = numberConvert(R2)
R3 = numberConvert(R3)
R4 = numberConvert(R4)
R5 = numberConvert(R5)

print R1 + R2 + R3 + R4 + R5
</code></pre>
<p>After running and inputting 1048575 (that's the highest it can go, so I'm expecting <strong>"fffff"</strong> as an output), it gives me:</p>
<pre><code>C:\PythonPrograms\Modules&gt;Decimal_to_Hex.py
Enter a base 10 number (Smaller than 1048576): 1048575
Traceback (most recent call last):
  File "C:\PythonPrograms\Modules\Decimal_to_Hex.py", line 50, in &lt;module&gt;
    print R1 + R2 + R3 + R4 + R5
TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'
</code></pre>
<p>After I ran some tests which mainly involved printing the <code>R1</code> to <code>R5</code> values at the beginning and the end of the function, I've come to the conclusion that the issue lies somewhere in the <code>R1 = numberConvert(R1)</code> section. At any time before that, the variables behave normally. Right at the start of the function, after being inputted, the<code>R</code> variables are numbers 0 through 15.</p>
<p>Right before function <code>numberConvert</code> finishes up, they are 0 through 9, or "a" through "f". However, if I were to print value <code>R1</code> immediately after <code>R1 = numberConvert(R1)</code>, it gives me <code>None</code> as an output.</p>
<p>From what I've read, this is essentially Python's null value. So, I've narrowed down the problem to the section where I'm running the function <code>numberConvert</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>All functions in Python return <code>None</code> by default unless you have a <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-return_stmt" rel="nofollow noreferrer">return-statement</a>.  So, if you want your <code>numberConvert</code> function to return a value other than <code>None</code>, you need to put one:</p>
<pre><code>def numberConvert(a=0):
  a = str(a)

  if (a == "10"):
    a = "a"
  elif (a == "11"):
    a = "b"
  elif (a == "12"):
    a = "c"
  elif (a == "13"):
    a = "d"
  elif (a == "14"):
    a = "e"
  elif (a == "15"):
    a = "f"
  else:
    a = a

  ########
  return a
  ########
</code></pre>
<hr/>
<p>Since you say you have C# experience, perhaps you thought that doing:</p>
<pre><code>R1 = numberConvert(R1)
</code></pre>
<p>would pass <code>R1</code> as a reference which would be modified inside <code>numberConvert</code> whenever you did:</p>
<pre><code>a = ...
</code></pre>
<p>This is incorrect though because <code>a</code> is treated as a local name that gets assigned the value of <code>R1</code>.  For more information on this, see <a href="https://stackoverflow.com/q/986006/2555451">How do I pass a variable by reference?</a></p>
<hr/>
<p>Also, there are a few things I'd like to mention about your <code>numberConvert</code> function:</p>
<ol>
<li><p>You do not need parenthesis with if-statements in Python.  In fact, most Python programmers consider them to be bad style. Instead, you should just do:</p>
<pre><code>if a == "10":
  a = "a"
elif a == "11":
  a = "b"
...
</code></pre></li>
<li><p>There is not really a reason to do:</p>
<pre><code>a = str(a)
</code></pre>
<p>since you can compare with integers directly:</p>
<pre><code>if a == 10:
  a = "a"
elif a == 11:
  a = "b"
</code></pre></li>
<li><p>If you want, you could use a <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">dictionary</a> to avoid all those if-statements:</p>
<pre><code>def numberConvert(a=0):
    return {"10":"a","11":"b","12":"c","13":"d","14":"e","15":"f"}.get(a, a)
</code></pre></li>
</ol>
</div>
<span class="comment-copy">Well you don't actually <i>return</i> anything from your function.</span>
<span class="comment-copy">And why are you converting to a string in the beginning? Why not compare with the <i>number</i> <code>15</code> (for example)? If you want to return a string, then do the string-conversion when returning the value.</span>
<span class="comment-copy">Ahh, I see now; I've just had a habit to use parenthesis as organization more than anything.</span>
