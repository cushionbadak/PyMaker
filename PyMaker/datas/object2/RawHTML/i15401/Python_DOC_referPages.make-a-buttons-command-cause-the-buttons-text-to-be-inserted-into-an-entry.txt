<div class="post-text" itemprop="text">
<p>I'm creating a series of buttons, each with different text. I  would like to, upon clicking a button, retrieve its corresponding text and insert that text into an Entry. The best I can get is this:</p>
<pre><code>#!/usr/bin/env python
import tkinter as tk
from random import randint

root= tk.Tk()
entry= tk.Entry(root)
def callback():
    entry.insert(0, data)

for i in range(20):
    data= str(randint(0,100))
    button = tk.Button(root, text = data, command=callback).pack()
entry.pack()
root.mainloop()
</code></pre>
<p>which causes the entry to be set as the last button's text.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should do two things:</p>
<ol>
<li><p>Make your <code>callback</code> function accept an argument that will be the button's text:</p>
<pre><code>def callback(text):
    entry.insert(0, text)
</code></pre></li>
<li><p>Assign each button's <code>command</code> option to a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-lambda_expr" rel="nofollow">lambda function</a> that sends this text to <code>callback</code>:</p>
<pre><code>command=lambda data=data: callback(data)
</code></pre></li>
</ol>
<p>Below is what the complete code will look like:</p>
<pre><code>import tkinter as tk
from random import randint

root= tk.Tk()
entry= tk.Entry(root)
def callback(text):
    entry.insert(0, text)

for i in range(20):
    data= str(randint(0,100))
    tk.Button(root, text=data, command=lambda data=data: callback(data)).pack()
entry.pack()
root.mainloop()
</code></pre>
</div>
<span class="comment-copy">Thanks! This really helps a lot! I've always ran into this site when googling programming issues and i couldn't find an answer to this one, so I figured I would make an account and am very pleased with the results.  I'll make sure to look more into what "lambda" does. I've seen it before, but never understood it.</span>
<span class="comment-copy">Happy to have been of help!  And the lambda is not anything special.  It is basically an in-line function.  You could get the same with <code>def func(data=data): callback(data)</code> and then <code>command=func</code>.  You need the <code>data=data</code> though in order to capture the value of <code>data</code> for each iteration.  See here for more information: <a href="http://stackoverflow.com/a/26942110/2555451">stackoverflow.com/a/26942110/2555451</a></span>
