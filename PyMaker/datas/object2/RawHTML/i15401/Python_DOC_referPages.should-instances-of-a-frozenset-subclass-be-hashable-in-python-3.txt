<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/2/library/stdtypes.html#frozenset" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html#frozenset</a>, in Python 2:</p>
<blockquote>
<p>The frozenset type is immutable and hashable -- its contents cannot be altered after is created; however, it can be used as a dictionary key or as an element of another set.</p>
</blockquote>
<p>However according to <a href="https://docs.python.org/3.4/library/stdtypes.html#frozenset" rel="nofollow noreferrer">https://docs.python.org/3.4/library/stdtypes.html#frozenset</a>, in Python 3 I can see no information indicating that a frozenset instance (or subclass) should be hashable, just the set/frozenset elements:</p>
<blockquote>
<p>Set elements, like dictionary keys, must be hashable.</p>
</blockquote>
<p>So, should the following code work for any Python 3 interpreter, or should the last line raise a <code>TypeError</code>?</p>
<pre><code># Code under test
class NewFrozenSet(frozenset):
    def __eq__(self, other):
        return True

    # Workaround: Uncomment this override
    # def __hash__(self):
    #     return hash(frozenset(self))

hash(frozenset())
hash(NewFrozenSet())
</code></pre>
<p>OSX Yosemite 10.10, system python2</p>
<pre><code>$ python
Python 2.7.6 (default, Sep  9 2014, 15:04:36)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class NewFrozenSet(frozenset):
...     def __eq__(self, other):
...         return True
...
&gt;&gt;&gt; hash(frozenset())
133156838395276
&gt;&gt;&gt; hash(NewFrozenSet())
133156838395276
</code></pre>
<p>OSX Yosemite 10.10, using homebrew <a href="http://brew.sh/" rel="nofollow noreferrer">http://brew.sh/</a></p>
<pre><code>$ brew install python3
$ python3
Python 3.4.2 (default, Jan  5 2015, 11:57:21)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class NewFrozenSet(frozenset):
...     def __eq__(self, other):
...         return True
...
&gt;&gt;&gt; hash(frozenset())
133156838395276
&gt;&gt;&gt; hash(NewFrozenSet())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'NewFrozenSet'
&gt;&gt;&gt;
</code></pre>
<p>Ubuntu 14.04.1 LTS (x86_64), system python3</p>
<pre><code>$ python3
Python 3.4.0 (default, Apr 11 2014, 13:05:11)
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class NewFrozenSet(frozenset):
...     def __eq__(self, other):
...         return True
...
&gt;&gt;&gt; hash(frozenset())
133156838395276
&gt;&gt;&gt; hash(NewFrozenSet())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'NewFrozenSet'
&gt;&gt;&gt;
</code></pre>
<p>TL;DR - Is this a regression in Python 3, or was it a deliberate design choice?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the definition of <a href="https://docs.python.org/3/glossary.html" rel="nofollow">hashable</a>:</p>
<blockquote>
<p>Hashable objects which compare equal must have the same hash value.</p>
</blockquote>
<p>You have now implemented a new <code>__eq__</code> method but not a new <code>__hash__</code> for <code>NewFrozenSet</code>. Python now can't assume that the above property holds (i.e., that the behaviour of <code>__eq__</code> and <code>__hash__</code> matches) so it can't assume the type is hashable. That's why you need to implement both <code>__eq__</code> and <code>__hash__</code> to make a type hashable (or don't implement either and use the methods from the parent class).</p>
<p>For example, if you leave out <code>__eq__</code> then <code>NewFrozenSet</code> does become hashable:</p>
<pre><code>class NewFrozenSet(frozenset):
    pass
</code></pre>
<p>If this is not correct in your <code>NewFrozenSet</code> then you need to implement both <code>__eq__</code> and <code>__hash__</code>.</p>
</div>
