<div class="post-text" itemprop="text">
<p>I have 500 text files in one directory.I have to find 500 most frequent words in all of the text files combined.How can I achieve that?</p>
<p>PS: I have searched a lot but could not find a solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>import os
from collections import Counter

c, directory = Counter(), 'path_to_your_directory'

for x in os.listdir(directory):
    fname = os.path.join(directory, x)
    if os.path.isfile(fname):
        with open(fname) as f:
            c += Counter(f.read().split())

for word, _ in c.most_common(500):
    print(word)
</code></pre>
<p>Of course, it will read every file found in that directory. If that's not the intended behavior, use <a href="https://docs.python.org/3/library/glob.html" rel="nofollow"><code>glob.glob</code> or <code>glob.iglob</code></a> with the required pattern instead of <code>os.listdir</code> (see Reut's comment to my answer).</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the most straightforward way I could think of using a dictionary for the count, with the key as the word ad the value for the count:</p>
<pre><code>import os
# word counts are stored in a dictionary
# for fast access and duplication prevention
count = {}
# your text files should be in this folder
DIR = "files"
# iterate over all files in the folder
for filename in os.listdir(DIR):
    with open(os.path.sep.join([DIR, filename]), 'r') as f:
        for line in f.readlines():
            # strip line separators from end of line
            line = line.strip()
            # once we have a line from the file, split it to words, and
            # add word to the scores (if it's new), or increase it's count
            for word in line.split():
                if word in count:
                    # existing
                    count[word] = count[word] + 1
                else:
                    # new
                    count[word] = 1
print sorted(count.items(), key=lambda x: x[1], reverse=True)[:500]
</code></pre>
<p>Using <a href="https://docs.python.org/2/library/collections.html#counter-objects" rel="nofollow">collections.Counter</a> (as Padraic suggested):</p>
<pre><code>import os
from collections import Counter

count = Counter()
DIR = "files"
for filename in os.listdir(DIR):
    with open(os.path.sep.join([DIR, filename]), 'r') as f:
        for line in f.readlines():
            line = line.strip()
            # count all words in line
            count.update(line.split())
print count.most_common(500)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a counter for each new word, and an array of words. Add each New word to the array. Compare each word In the text file(s) to the words in the array using "index of", increment the counter for the word. Or you could create one array, populate with every NEW
 word from the text files, use second element of the array as a counter. </p>
</div>
<div class="post-text" itemprop="text">
<p>We can use Counter method from collections module.</p>
<ol>
<li>Read only text files from target directory by <code>glob</code></li>
<li>Iterate all files from step 1 by <code>for loop</code>.</li>
<li>Open file in read mode by <code>with</code> statement and <code>read()</code> method of file object.</li>
<li>Split content of file by <code>split()</code> method of string and use <code>Counter</code> to create countable dictionary. Add add two counters together. <a href="https://docs.python.org/2/library/collections.html" rel="nofollow">https://docs.python.org/2/library/collections.html</a></li>
<li>Get most common word from the Counter by <code>most_common(3)</code> method.</li>
</ol>
<p>code:</p>
<pre><code>from glob import glob 
from  collections import Counter

p = "/home/vivek/Desktop/test/*.txt"
main_counter = Counter()

for i in glob(p):
    with open(i, "rb") as fp:
        main_counter += Counter(fp.read().split())

print "main_counter:-", main_counter
print "most common 3:-", main_counter.most_common(3)
</code></pre>
<p>output:-</p>
<pre><code>vivek@vivek:~/Desktop$ python 4.py 
main_counter:- Counter({'This': 3, 'try': 2, 'again.': 2, 'is': 2, 'can': 2, 'file': 2, 'you': 2, 'my': 2, '1': 1, 'this': 1, '2': 1})
most common 3:- [('This', 3), ('try', 2), ('again.', 2)]
</code></pre>
</div>
<span class="comment-copy">Have you considered counting? But seriously, where are you stuck?</span>
<span class="comment-copy">Where did you get so far?</span>
<span class="comment-copy">yes, I will try now. But you can try also. (vivke.igp is my skype id)</span>
<span class="comment-copy">I can do for a single file but how to combine results of all text files?</span>
<span class="comment-copy">just to create one counter dictionary of all dictionaries of each file. Check my solution which is similes to abc</span>
<span class="comment-copy">you can pass a number to most_common, you don't need to slice</span>
<span class="comment-copy">Does this handle line breaks?</span>
<span class="comment-copy">@ReutSharabani no, split() handles them</span>
<span class="comment-copy">Well played. Just one thing, maybe you should <code>glob</code> the files by extension/ specify folder to <code>os.listdir</code>... Otherwise the code itself will also be counted :)</span>
<span class="comment-copy">just use a Counter dict, also just iterate over the file object, no need to create a list unless you actually need it</span>
<span class="comment-copy">@PadraicCunningham , thanks, first time I get to use it.</span>
