<div class="post-text" itemprop="text">
<p>For Python 3, it turned out as a good practise for me, to hint data types for function parameters and return types. For example:</p>
<pre><code>def icecream_factory(taste: str='Banana') -&gt; Ice:
    ice = Ice(taste)
    ice.add_cream()
    return ice
</code></pre>
<p>This works perfectly for all simple data types and classes. But now I need to use this with a "function pointer":</p>
<pre><code>class NotificationRegister:

    def __init__(self):
        self.__function_list = list()
        """:type: list[?????]"""

    def register(self, function_pointer: ?????) -&gt; None:
        self.__function_list.append(function_pointer)

def callback():
    pass

notification_register = NotificationRegister()
notification_register.register(callback)
</code></pre>
<p>What must be put at the <code>?????</code> to make clear that a function pointer is required here? I tried <code>function</code>, because <code>type(callback)</code> is <code>&lt;class 'function'&gt;</code>, but the keyword <code>function</code> is not defined.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/types.html#types.FunctionType" rel="nofollow"><code>types.FunctionType</code></a> to represent a function:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.FunctionType
&lt;class 'function'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; def func():
...     pass
...
&gt;&gt;&gt; type(func)
&lt;class 'function'&gt;
&gt;&gt;&gt; isinstance(func, types.FunctionType)
True
&gt;&gt;&gt;
</code></pre>
<p>You could also use a string literal such as <code>'function'</code>, but it looks like you want an actual type object.</p>
</div>
<div class="post-text" itemprop="text">
<p>One approach may be to use <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Callable" rel="nofollow"><code>collections.abc.Callable</code></a>:</p>
<pre><code>&gt;&gt;&gt; import collections.abc
&gt;&gt;&gt; def f(): pass
&gt;&gt;&gt; isinstance(f, collections.abc.Callable)
True
</code></pre>
<p>This is intended for all objects that implement <code>__call__</code>. This is quite broad as it'll also be <code>True</code> for methods of instances or other objects that happen to implement <code>__call__</code>. But this may be what you intend - it depends on whether you only wish to accept functions or also other callable objects.</p>
</div>
<span class="comment-copy">Why not just a string - <code>function_pointer: "function"</code>?</span>
<span class="comment-copy">This seems to be a very good, straight forward and easy to remember approach. I'll go the way with the types package.</span>
