<div class="post-text" itemprop="text">
<p>I'm Python beginner can't get my head around. How do I change 
for example <code>a = [[1,2],[3,4],[5,6]]</code>
into <code>"12\n34\n56"</code> string format.</p>
<p>This is as far as i got but it goes into newline with each number.</p>
<pre><code>def change(a):
    c = ""
    for r in a:
        for b in r:
            c += str(b) + "\n"
    return c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/stdtypes.html#str.join"><code>str.join</code></a> with <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions">generator expression</a>:</p>
<pre><code>&gt;&gt;&gt; a = [[1,2], [3,4], [5,6]]
&gt;&gt;&gt; '\n'.join(''.join(map(str, xs)) for xs in a)
'12\n34\n56'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but it goes into newline with each number</p>
</blockquote>
<p>That’s because you add the newline after <em>each number</em> instead of after each sublist <code>r</code>. If you want that instead, you should append the newline there:</p>
<pre><code>c = ''
for r in a:
    for b in r:
        c += str(b)
    c += '\n'
return c
</code></pre>
<p>But note that appending to a string is very inefficient, as it ends up creating lots of intermediary strings. Usually, you would create a list instead to which you append your string parts, and then finally join that list to convert it to a single string:</p>
<pre><code>c = []
for r in a:
    for b in r:
        c.append(str(b))
    c.append('\n')
return ''.join(c)
</code></pre>
<p>And then, you can also use list expressions to make this shorter in multiple steps; first for the inner list:</p>
<pre><code>c = []
for r in a:
    c.extend([str(b) for b in r])
    c.append('\n')
return ''.join(c)
</code></pre>
<p>And you can join that list comprehension first:</p>
<pre><code>c = []
for r in a:
    c.append(''.join([str(b) for b in r]))
    c.append('\n')
return ''.join(c)
</code></pre>
<p>Then you can move the newline into the outer join, and make a new list comprehension for the outer list:</p>
<pre><code>c = [''.join([str(b) for b in r]) for r in a]
return '\n'.join(c)
</code></pre>
<p>And at that point, you can make it a one-liner too:</p>
<pre><code>return '\n'.join([''.join([str(b) for b in r]) for r in a])
</code></pre>
<p>As Padraic pointed out in the comments, joining on the newline character will also prevent the string from having a trailing <code>\n</code> which you would end up if you kept adding it in the loop. Otherwise, you could have used <code>str.rstrip('\n')</code> to get rid of it afterwards.</p>
</div>
<span class="comment-copy">Just curious, why do you <code>map(str, xs)</code> instead of just <code>str(xs)</code>? Isn't the latter cheaper?</span>
<span class="comment-copy">@Lawrence, <code>str(xs)</code> results in <code>'[1, 2]'</code>, while <code>''.join(map(str, [1, 2]))</code> gives you <code>12</code>.</span>
<span class="comment-copy">Right, I missed the fact that <code>xs</code> is in fact a list :)</span>
<span class="comment-copy">Tnx so much nice explanation! :)</span>
<span class="comment-copy">I'd go with the slightly more verbose version that uses list comprehensions: <code>'\n'.join([''.join([str(v) for v in u]) for u in a])</code>. The generator version looks neater, but the list comp has less overhead. And there's no advantage to passing a gen exp to <code>join</code> since it needs all the substrings before it starts work (otherwise there'd be no advantage in using <code>join()</code> over simple string concatenation).</span>
<span class="comment-copy">Your code actually gives the wrong result, I had an answer I deleted as you had answered first but you need to remove the last newline or keep a check on where you are and not add a newline if you are at the last grouping</span>
<span class="comment-copy">@PadraicCunningham: +1. Or just use the <code>join</code>-based approach, so you don't get the unwanted trailing <code>\n</code>. Alternatively, just use slicing to remove the trailing <code>\n</code> from the string... but that's a bit messy.</span>
<span class="comment-copy">@PadraicCunningham Very good point. I’ve added it as a note.</span>
