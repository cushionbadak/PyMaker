<div class="post-text" itemprop="text">
<p>How could i find the the set of tuples of string? </p>
<p>For example there is a list of <code>[('a', 'b'), ('b', 'a'), ('c','d')]</code></p>
<p>For me <code> ('a', 'b')</code> is same to <code>('b', 'a') </code>. Is there any function in 
python which can identify and remove one of them? </p>
</div>
<div class="post-text" itemprop="text">
<p>Just sort your tuples:</p>
<pre><code>unique = set(tuple(sorted(t)) for t in inputlist)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; inputlist = [('a', 'b'), ('b', 'a'), ('c','d')]
&gt;&gt;&gt; set(tuple(sorted(t)) for t in inputlist)
set([('a', 'b'), ('c', 'd')])
</code></pre>
<p>You could extend <a href="https://docs.python.org/2/library/collections.html#collections.MutableSet" rel="nofollow"><code>collections.MutableSet()</code></a> (<a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet" rel="nofollow"><code>collections.abc.MutableSet</code></a> in Python 3) to encapsulate that behaviour:</p>
<pre><code>try:
    # Python 3
    from collections.abc import MutableSet
except ImportError:
    # Python 2
    from collections import MutableSet

class SortingSet(MutableSet):
    def __init__(self, values):
        self._values = set()
        for v in values:
            self.add(v)

    def __repr__(self):
        return '&lt;{}({}) at {:x}&gt;'.format(
            type(self).__name__, list(self._values), id(self))

    def __contains__(self, value):
        return tuple(sorted(value)) in self._values

    def __iter__(self):
        return iter(self._values)

    def __len__(self):
        return len(self._values)

    def add(self, value):
        self._values.add(tuple(sorted(value)))

    def discard(self, value):
        self._values.discard(tuple(sorted(value)))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; inputlist = [('a', 'b'), ('b', 'a'), ('c','d')]
&gt;&gt;&gt; sset = SortingSet(inputlist)
&gt;&gt;&gt; sset
&lt;SortingSet([('a', 'b'), ('c', 'd')]) at 106b74c50&gt;
&gt;&gt;&gt; ('d', 'c') in sset
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>list_ = [('a', 'b'), ('b', 'a'), ('c','d')]

set_ = set(frozenset(tuple) for tuple in list_)

print(set_)
</code></pre>
<p>?  Tested on CPython 3.4.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answers so far do not preserve order at all, if that is important to you then use this:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; items = [('a', 'b'), ('b', 'a'), ('c','d')]
&gt;&gt;&gt; OrderedDict((frozenset(x), x) for x in items).values()
[('b', 'a'), ('c', 'd')]
</code></pre>
<p>This keeps the order and you said you could remove one of the duplicates (which it keeps the last)</p>
<p>Also the answers given so far also alter the elements:</p>
<pre><code>&gt;&gt;&gt; set(tuple(sorted(t)) for t in [('b', 'a'), ('c', 'd')])
set([('a', 'b'), ('c', 'd')])
&gt;&gt;&gt; set(frozenset(tuple) for tuple in [('b', 'a'), ('c', 'd')])
set([frozenset(['a', 'b']), frozenset(['c', 'd'])])
</code></pre>
<p>This will keep the elements the same</p>
<pre><code>&gt;&gt;&gt; OrderedDict((frozenset(x), x) for x in [('b', 'a'), ('c', 'd')]).values()
[('b', 'a'), ('c', 'd')]
</code></pre>
</div>
<span class="comment-copy">You haven't mentioned if order is important</span>
<span class="comment-copy">Please check with <code>OP</code> if your output is correct in this case: <code>&gt;&gt;&gt; set(tuple(sorted(t)) for t in [('b', 'a'), ('c', 'd')]) set([('a', 'b'), ('c', 'd')])</code></span>
