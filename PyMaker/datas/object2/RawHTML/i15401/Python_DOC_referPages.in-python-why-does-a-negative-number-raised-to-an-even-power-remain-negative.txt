<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/23759202/calculation-error-with-pow-operator">Calculation error with pow operator</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>In Python</p>
<pre><code>&gt;&gt;&gt; i = 3  
&gt;&gt;&gt; -i**4  
-81
</code></pre>
<p>Why is <code>-i**4</code> not evaluated as <code>(-i)**4</code>, but as <code>-(i**4)</code>? </p>
<p>I suppose one could argue that raising to a power takes precedence over (implicit) multiplication of <code>i</code> with minus one (i.e. you should read <code>-1*i**4</code>). 
But where I learned math, <code>-i**n</code> with <code>n</code> even and <code>i</code> positive, should come out positive.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>**</code> operator binds more tightly than the <code>-</code> operator does in Python. If you want to override that, you'd use parentheses, e.g. <code>(-i)**4</code>.</p>
<p><a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="noreferrer">https://docs.python.org/2/reference/expressions.html#operator-precedence</a>
<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">https://docs.python.org/3/reference/expressions.html#operator-precedence</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The power operator (<code>**</code>) has a higher precedence than the unary negation (<code>-</code>) operator. <code>-i**4</code> is evaluated as <code>-(i**4)</code> - i.e., you take 3 up to the power of four, which is 81, and then negate it, resulting in <code>-81</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the pow() function from math.</p>
<pre><code>import math
i = 3
math.pow(-i,4)
</code></pre>
<p>This will yield a positive value. </p>
<p>As stated here: <a href="https://stackoverflow.com/questions/20969773/exponentials-in-python-x-y-vs-math-powx-y">Exponentials in python x.**y vs math.pow(x, y)</a>, this option (or just build in pow()) would be ideal if you want to always produce a float.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to do (-i)**4 to get a positive result.</p>
<p>The *'s have higher priority than the '-'.</p>
<p>When in doubt, use parentheses. (or, as Amber suggested, refer to the language documentation)</p>
</div>
<span class="comment-copy">its about priority :)</span>
<span class="comment-copy">You answered your own question.  Exponentiation has higher priority than multiplication.  If you learned that -1**2 = 1 in a mathematical context, you learned wrong.  (It is true that some programming languages do this, but they are also wrong in that they don't maintain the mathematical convention.)</span>
<span class="comment-copy">it is apparent that the author is talking about a mathematical notation that does not use parentheses around the base number, and not about a specific language grammar. this is the notation that I learned as well. And in this notation, <code>-1^2</code> (using LaTex expression) is 1.</span>
<span class="comment-copy">I still would say that that is incorrect as mathematical notation (as do most sources I can find; see for instance <a href="http://en.wikipedia.org/wiki/Order_of_operations" rel="nofollow noreferrer">here</a> and <a href="http://mathforum.org/library/drmath/view/53194.html" rel="nofollow noreferrer">here</a>).  However, this is straying a bit from the question as it relates to Python; programming languages sadly don't always conform to established notational standards.</span>
<span class="comment-copy">@Brenbarn I'm happy to inform you that you are right and I was wrong. Thank you for the learning experience! This is the literal answer (translated by yours truly) from Wiskundeforum.nl (wiskunde is Dutch for Mathematics): "There is an essential difference between -a² = -1∙a² and (-a)² = -a∙-a = a², whereby -a² represents the opposite of a² and (-a)² represents the square of the opposite of a." So there.</span>
<span class="comment-copy">this is imho a bad implementation. if I write: -2 ** 2, I am stating the negative number to the power of 2, not the minus operator....</span>
<span class="comment-copy">This is somewhat overkill for something that could be handled via parentheses - <code>(-i)**4</code>.</span>
<span class="comment-copy">this might not necessarily be an overkill, it depends on the interpreter implementation, but the question is not about how to compute an exponent.</span>
