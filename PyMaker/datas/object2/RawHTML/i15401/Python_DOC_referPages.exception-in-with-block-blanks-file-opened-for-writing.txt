<div class="post-text" itemprop="text">
<p>This simple code</p>
<pre><code># This code will BLANK the file 'myfile'!
with open('myfile', 'w') as file:
    raise Exception()
</code></pre>
<p>rather than merely throwing an exception, <strong>deletes all data in "myfile",</strong> although no actual write operation is even attempted.</p>
<p>This is dangerous to say the least, and certainly not how other languages treat such situations.</p>
<p>How I can prevent this? Do I have to handle every possible exception in order to be certain that the target file will not be blanked by some unforeseen condition? Surely there must be a standard pattern to solve this problem. And, above all: What is happening here in the first place?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are opening a file for writing. It is <em>that simple action</em> that blanks the file, regardless of what else you do with it. From the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open()</code> function documentation</a>:</p>
<blockquote>
<p><code>'w'</code><br/>
  open for writing, <strong>truncating the file first</strong></p>
</blockquote>
<p>Emphasis mine. In essence, the file is empty because you didn't write anything to it, not because you opened it.</p>
<p>Postpone opening the file to a point where you actually have data to write if you don't want this to happen. Writing a list of strings to a file is not going to cause exceptions <em>at the Python level</em>.</p>
<p>Alternatively, write to a <em>new</em> file, and rename (move) it afterwards to replace the original. Renaming a file as left to the OS.</p>
</div>
<div class="post-text" itemprop="text">
<p>The statement <code>open('myfile', 'w')</code> <strong><em>will</em></strong> delete all the contents on execution i.e. truncate the file. </p>
<p>If you want to retain the lines you have to use <code>open('myfile', 'a')</code>. Here the <code>a</code> option is for <code>append</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Opening a file for writing erases the contents. Best way to avoid lost of data, not only in case of exceptions, also computer shutdown, etc. is to create a new temporary file and rename the file to the original name, when everything is done.</p>
<pre><code>yourfile = "myfile"
try:
    with tempfile.NamedTemporaryFile(dir=os.path.dirname(yourfile) or '.', delete=False) as output:
        do_something()
except Exception:
    handle_exception()
else:
    os.rename(output.name, yourfile)
</code></pre>
</div>
<span class="comment-copy">That is because "w" or "write" mode will by default truncate the file first. This is done during the time when "open(..)" happens.</span>
<span class="comment-copy">You are mistaken, every language I know will truncate a file by default when you open it for writing, regardless of how much (if any) you then write to it.</span>
<span class="comment-copy">This behavior has nothing to do with Python. It is the defined semantics of the <code>open</code> system call under POSIX/Unix/Linux, OS X and Windows. If you want to change this behavior in Python, you have to drop down to the OS level with <a href="http://linux.die.net/man/2/open" rel="nofollow noreferrer">os.open</a> specifically omitting the <code>O_TRUNC</code> constant from <i>mode</i>.</span>
<span class="comment-copy">And if I have data to write but an error occurs during writing?</span>
<span class="comment-copy">@user4395564: then you still have already emptied the file. If you ensured you have data ready to write then at least that exception won't be caused by your Python program; what is left is premature shutdown (of the program or the machine) or disk-related problems (no more disk space, etc.).</span>
<span class="comment-copy">But then the OP won't be <i>replacing</i> the information if no exception takes place.</span>
<span class="comment-copy">@MartijnPieters Isn't the question a little unclear as to what the OP wants to do after the <code>open</code> call.</span>
<span class="comment-copy">No, but appending is a very different kind of operation. Better to write to a new file and have the OS replace the old.</span>
<span class="comment-copy">@MartijnPieters Is my answer completely wrong then? Or should I just edit the append part?</span>
<span class="comment-copy">It is a different interpretation from mine; I think it is incorrect but I'm also not infallible. :-P</span>
