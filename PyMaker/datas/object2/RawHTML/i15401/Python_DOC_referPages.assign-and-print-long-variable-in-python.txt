<div class="post-text" itemprop="text">
<p>I am new to python.And one of my requirement is to deal with long values.The problem is i didnt know how to assign a long value.This question might be very silly.But im just now starting to learn the language.I have seen a blog and i tried something like this :</p>
<pre><code># Long program in Python
x=1
y = long(x)
print(type(y))
</code></pre>
<p>But i am getting an error like this:</p>
<pre><code>Traceback (most recent call last):                                
File "main.py", line 4, in &lt;module&gt;                             
y = long(x)                                                   
NameError: name 'long' is not defined 
</code></pre>
<p>Can anyone please help me in acheiving this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>long()</code> function is no longer supported by <a href="https://docs.python.org/3/howto/cporting.html#long-int-unification" rel="nofollow noreferrer">Python 3</a>. It only has one built-in integral type, named <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">int</a>; but it behaves mostly like the old <code>long</code> type. So you just need to use <code>int()</code> built-in function in python-3.x.</p>
<p>Also for more information here are the complete list of changes on <code>integer</code> type in python-3.x:</p>
<ul>
<li><p><a href="http://www.python.org/dev/peps/pep-0237" rel="nofollow noreferrer">PEP 0237</a>: Essentially, long renamed to int. That is, there is only one built-in integral type, named int; but it behaves mostly like the old long type.</p></li>
<li><p><a href="http://www.python.org/dev/peps/pep-0238" rel="nofollow noreferrer">PEP 0238</a>: An expression like <code>1/2</code> returns a float. Use <code>1//2</code> to get the truncating behavior. (The latter syntax has existed for years, at least since Python 2.2.)</p></li>
<li><p>The <code>sys.maxint</code> constant was removed, since there is no longer a limit to the value of integers. However, <code>sys.maxsize</code> can be used as an integer larger than any practical list or string index. It conforms to the implementation’s “natural” integer size and is typically the same as <code>sys.maxint</code> in previous releases on the same platform (assuming the same build options).</p></li>
<li><p>The <code>repr()</code> of a long integer doesn’t include the trailing <code>L</code> anymore, so code that unconditionally strips that character will chop off the last digit instead. (Use <code>str()</code> instead.)</p></li>
<li><p>Octal literals are no longer of the form <code>0720</code>; use <code>0o720</code> instead.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Forget about <code>long</code> vs. <code>int</code> or about <code>lL</code> suffixes. Python 2.7 will promote <code>int</code> to <code>long</code> if necessary. And all integers are "long" in Python 3 (the type is renamed to <code>int</code>).</p>
<p>Assume that integers have infinite precision in Python.</p>
<p>To assign and print large integer in Python, just assign and print it:</p>
<pre><code>x = 2**100
print(x) # -&gt; 1267650600228229401496703205376
</code></pre>
<p>It works on both Python 2 and 3. The result is the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quote from <a href="http://www.diveintopython3.net/native-datatypes.html#number-coercion" rel="nofollow">diveintopython3</a>:</p>
<blockquote>
<p>Python 2 had separate types for int and long. The int datatype was
  limited by sys.maxint, which varied by platform but was usually 2^32-1.
  Python 3 has just one integer type, which behaves mostly like the old
  long type from Python 2. See pep 237 for details.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python interpreter allocates memory based on the data type of variable. Therefore, by assigning different data types to variables, you can store integers, strings and longs.</p>
<pre><code>&gt;&gt;&gt; a = "Hello"
&gt;&gt;&gt; b = 123
&gt;&gt;&gt; c = 123.0
&gt;&gt;&gt; d = "a"
&gt;&gt;&gt; type(a)
&lt;type 'str'&gt;
&gt;&gt;&gt; type(c) 
&lt;type 'float'&gt;
</code></pre>
<p>For specific to long type, you can append "l" or "L" in the value, caps "L" is recommended. Python 
displays long integers with an uppercase L</p>
<pre><code>&gt;&gt;&gt; e = 1234L
&gt;&gt;&gt; type(e)
&lt;type 'long'&gt;
&gt;&gt;&gt; f=1234567891223341221 
&gt;&gt;&gt; f
1234567891223341221L
</code></pre>
<p>For variable "f", while displaying the value interpreter has appended "L" with value.</p>
<p>As mentioned by Kasra, in Python 2.x you can typecast variable type with long(), but this is no longer supported in Python 3. This is not required as Python interpreter usually takes care if value changes, until unless you want to do it explicitly </p>
<pre><code>&gt;&gt;&gt; b = 1234
&gt;&gt;&gt; type(b)
&lt;type 'int'&gt;
&gt;&gt;&gt; long(b)
1234L
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.7.13 it works.</p>
<pre><code>x=1
y = long(x)
type(y) 
&lt;type 'long'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you no need to define a variable as 'long' in python. Python will take care of it by default</p>
<p>Eg :</p>
<pre><code>&gt;&gt;&gt; x = 1243254675876586798

&gt;&gt;&gt; type(x)

&lt;type 'long'&gt;
</code></pre>
</div>
<span class="comment-copy">It seems Long is deprecated , it no longer works.</span>
<span class="comment-copy">hope this helps..  :)</span>
