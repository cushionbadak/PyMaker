<div class="post-text" itemprop="text">
<p>Consider the following code:</p>
<pre><code>args, varargs, varkw, defaults = inspect.getargspec(method)
if inspect.ismethod(method):
    args = args[1:]    # Skip 'self'
</code></pre>
<p>When running this on Python 2 and adding something with <em>self</em>, <em>self</em> is skipped (as mentioned in the comment). On Python 3, however I got trouble when using the code on <code>Class.method</code> (i.e. not <code>instance.method</code>). The problem is similar to <a href="https://stackoverflow.com/questions/8408910/detecting-bound-method-in-classes-not-instances-in-python-3">Detecting bound method in classes (not instances) in Python 3</a>, but non of the answers there works. Using <code>inspect.isroutine()</code> or  <code>inspect.isfunction()</code> breaks the code for non-methods (no self). Using <code>hasattr(method, '__self__')</code> doesn't work on <code>Class.method</code>.</p>
<p>I've written a small testscript for this:</p>
<pre><code>from __future__ import print_function
import inspect


def args_without_self(method):
    args, varargs, varkw, defaults = inspect.getargspec(method)
    if inspect.ismethod(method):
        args = args[1:]    # Skip 'self'
    return args


class Class(object):

    def method(self, a, b, c):
        pass

    @staticmethod
    def static(a, b, c):
        pass

    @classmethod
    def classmethod(cls, a, b, c):
        pass


def function(a, b, c):
    pass

instance = Class()

print(args_without_self(Class.method))
print(args_without_self(instance.method))
print(args_without_self(Class.static))
print(args_without_self(instance.static))
print(args_without_self(Class.classmethod))
print(args_without_self(instance.classmethod))
print(args_without_self(function))
</code></pre>
<p>The code works with both Python 2 and 3. However <code>args_without_self(Class.method)</code> also has <em>self</em> in Python 3 (and I would like to avoid that, but not break the others). Everythign should print <code>['a', 'b', 'c']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't, on Python 3, detect methods on the class, as they are <em>never bound</em>. They are <em>just regular functions</em>.</p>
<p>At most you can look at their <a href="https://docs.python.org/3/glossary.html#term-qualified-name" rel="noreferrer">qualified name</a> and <em>guess</em> if they might be methods, then see if the first argument is named <code>self</code>. Heuristics and guesses, in other words:</p>
<pre><code>if inspect.isfunction(method) and `.` in method.__qualname__ and args[0] == 'self':
    args = args[1:]    # Skip 'self'
</code></pre>
</div>
<span class="comment-copy">And hope nobody would name self differently :(</span>
<span class="comment-copy">@hroncok: or use <code>self</code> in a nested function, where it is not actually a method. But such are the limitations.</span>
