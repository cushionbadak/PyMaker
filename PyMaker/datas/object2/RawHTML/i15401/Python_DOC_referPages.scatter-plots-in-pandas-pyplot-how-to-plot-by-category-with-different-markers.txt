<div class="post-text" itemprop="text">
<p>Building on this earlier question: <a href="https://stackoverflow.com/questions/21654635/scatter-plots-in-pandas-pyplot-how-to-plot-by-category">Scatter plots in Pandas/Pyplot: How to plot by category</a>.  </p>
<p>The code below is the solution to that post and plots each group as a different color.  How would one also plot each group as different marker?  </p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
np.random.seed(1974)

# Generate Data
num = 20
x, y = np.random.random((2, num))
labels = np.random.choice(['a', 'b', 'c'], num)
df = pd.DataFrame(dict(x=x, y=y, label=labels))

groups = df.groupby('label')

# Plot
fig, ax = plt.subplots()
ax.margins(0.05) # Optional, just adds 5% padding to the autoscaling
for name, group in groups:
    ax.plot(group.x, group.y, marker='o', linestyle='', ms=12, label=name)
ax.legend()

plt.show()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While you iterate over your groups, you can iterate over a list of markers using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>. The code below will iterate over the <code>markers</code> list and assign each element, in turn, using <code>marker=marker</code> in the <code>ax.plot</code> line.</p>
<p>I've also added <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> which will cause the iteration to go to the beginning once the end is reached, this means that if you have more than 3 groups then it won't fail. If you had 4 groups then the markers would be <code>'x', 'o', '^', 'x'</code>, for example.</p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
np.random.seed(1974)

from itertools import cycle

# Generate Data
num = 20
x, y = np.random.random((2, num))
labels = np.random.choice(['a', 'b', 'c'], num)
df = pd.DataFrame(dict(x=x, y=y, label=labels))

groups = df.groupby('label')

markers = ['x', 'o', '^']

# Plot
fig, ax = plt.subplots()
ax.margins(0.05) # Optional, just adds 5% padding to the autoscaling
for (name, group), marker in zip(groups, cycle(markers)):
    ax.plot(group.x, group.y, marker=marker, linestyle='', ms=12, label=name)
ax.legend()

plt.show()
</code></pre>
<p><img alt="Example plot" src="https://i.stack.imgur.com/HAyBC.png"/></p>
</div>
<span class="comment-copy">Very cool, thank you!</span>
<span class="comment-copy">How do you remove the redundant column in the legend?</span>
<span class="comment-copy">@invictus <a href="https://stackoverflow.com/questions/6146778/matplotlib-legend-markers-only-once/6146871#6146871" title="matplotlib legend markers only once">stackoverflow.com/questions/6146778/â€¦</a> will probably help.</span>
<span class="comment-copy">Brilliant, cheers mate.</span>
