<div class="post-text" itemprop="text">
<p>Which is the best way to make a dictionary of lists? 
For instance, if I have lists <em>list1, list2</em> and want to make a dictionary <em>my_dict</em> like that:</p>
<pre><code>my_dict = ['list1': list1, 'list2': list2]
</code></pre>
<p>I've found <a href="https://stackoverflow.com/questions/960733/python-creating-a-dictionary-of-lists">this</a> example but the best answer is written in 2009. Maybe there are some new more laconic ways to do this?  </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use curly rather than square brackets, but otherwise this is probably as good as it gets:</p>
<pre><code>list1 = ['a', 'b', 'c']
list2 = [1, 2, 3, 4]
my_dict = {'list1': list1, 'list2': list2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a dictionary of lists, consider a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>.</p>
<p>A <strong>normal dictionary</strong> works fine, but it raises an error if a key is not found.  </p>
<pre><code>list1 = list("abcd")
list2 = [1, 2, 3, 4]


d = {"list1": list1, "list2": list2}
d["list3"]
# KeyError: 'list3'
</code></pre>
<p>This may be disruptive in some applications and may require additional exception handling.</p>
<p>The <strong><code>defaultdict</code></strong> behaves like a normal dict while adding some protection against errors.</p>
<pre><code>import collections as ct


dd = ct.defaultdict(list)
dd.update(d)
dd
# defaultdict(list, {'list1': ['a', 'b', 'c', 'd'], 'list2': [1, 2, 3, 4]})
</code></pre>
<p>Adding a missing key will call the default factory function, i.e. <code>list</code>.  Here instead of a error, we get an empty container:</p>
<pre><code>dd["list3"]
# []
</code></pre>
<p>This entry was added with an empty list.</p>
<pre><code>dd
# defaultdict(list,
#             {'list1': ['a', 'b', 'c', 'd'],
#              'list2': [1, 2, 3, 4],
#              'list3': []})
</code></pre>
<p>Convert a <code>defaultdict</code> to a regular dict by setting the default factory to <code>None</code></p>
<pre><code>dd.default_factory = None
dd
# defaultdict(None, {'list1': ['a', 'b', 'c', 'd'], 'list2': [1, 2, 3, 4]})
</code></pre>
<p>or by using the <code>dict()</code> builtin:</p>
<pre><code>dict(dd)
# {'list1': ['a', 'b', 'c', 'd'], 'list2': [1, 2, 3, 4]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to turn the variable name into a key, here is a <a href="https://stackoverflow.com/questions/2553354/how-to-get-a-variable-name-as-a-string-in-python">similar question</a>.</p>
<p>If you just want a dictionary of lists with a sequential key.</p>
<pre><code>def turn_to_dict(*args):
    return {i: v for i, v in enumerate(args)}

lst1 = [1, 2, 3, 4]
lst2 = [3, 4, 6, 7]
lst3 = [5, 8, 9]

v = turn_to_dict(lst1, lst2, lst3)

&gt;&gt;&gt; print(v)
{0: [1, 2, 3, 4], 1: [3, 4, 6, 7], 2: [5, 8, 9]} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this method, very succinct. Curly braces, not square brackets.</p>
<p>I think that's the shortest way around it.</p>
<pre><code>list1 = [5, 500, 543]
list2 = [4, 4, 4]

my_dict = {'list1':list1, 'list2': list2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>my_dict = dict([('list1', list1), ('list2', list2)])
</code></pre>
<p>Or, alternatively:</p>
<pre><code>my_dict = {'list1': list1, 'list2': list2}
</code></pre>
<p>The result will be the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the curly brace syntax to define the dictionary, and give each entry in your dictionary a key that corresponds to each value:</p>
<pre><code>list_a = [1,2,3,4,5]
list_b = [6,7,8,9,10]

my_dict = {'list1':list_a, 'list2':list_b}
</code></pre>
<p><a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">More in the python docs</a></p>
</div>
<span class="comment-copy">You need to use curly rather than square brackets, but otherwise this is probably as good as it gets.</span>
<span class="comment-copy">Plus one for laconic as a synonym for pythonic :-)</span>
<span class="comment-copy">don't use dict as a variable name</span>
<span class="comment-copy">ah yes, thanks.</span>
<span class="comment-copy">Why is your profile sad? :-(</span>
<span class="comment-copy">It's just the way my profile is :(</span>
<span class="comment-copy">Matchematics can do that to a person ;-/  Turn that fron upside down :-)</span>
<span class="comment-copy">It's exactly the opposite, Mawg. Don't read too much into it -- the emoji isn't for you.</span>
<span class="comment-copy">Gld to ehar it  :-) "Stand on head make smiel from frown - but rest of face now upside down"</span>
