<div class="post-text" itemprop="text">
<p>I would like to loop through list of lists in the dictionary and delete certain lists based on a value in the list being equal to <code>None</code>. My code is below. Rather than deleting the list that meets the condition, it's always deleting the first list.</p>
<p>My code:</p>
<pre><code>My_Table = {
    'Table1' : {'Results': [["pineapple", 5], ["cherry", 7], ["kumquat", None], ["plum", None]]},
    'Table2' : {'Results': [["Orange", 5], ["Apple", 7], ["Pear", None], ["cantelope", None]]},
}

for tbl, values in My_Table.viewitems():
      for item_values in values['Results']:
        if item_values[1] is not None:
            values['Results'].remove(item_values)
      print values['Results']
</code></pre>
<p>Output: </p>
<pre><code>[['Apple', 7], ['Pear', None], ['cantelope', None]]
[['cherry', 7], ['kumquat', None], ['plum', None]]
</code></pre>
<p>Desired Output:</p>
<pre><code>[['Orange', 5], ['Apple', 7]]
[['pineapple', 5], ['cherry', 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Never remove items from a sequence while iterating over it.  Doing so screws up Python's iteration protocol and often causes it to accidentally skip items.</p>
<p>Instead, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> and slice assignment:</p>
<pre><code>for tbl, values in My_Table.viewitems():
    values['Results'][:] = [x for x in values['Results'] if x[1] is not None]
    print values['Results']
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; My_Table = {
...     'Table1' : {'Results': [["pineapple", 5], ["cherry", 7], ["kumquat", None], ["plum", None]]},
...     'Table2' : {'Results': [["Orange", 5], ["Apple", 7], ["Pear", None], ["cantelope", None]]},
... }
&gt;&gt;&gt; for tbl, values in My_Table.viewitems():
...      values['Results'][:] = [x for x in values['Results'] if x[1] is not None]
...      print values['Results']
...
[['Orange', 5], ['Apple', 7]]
[['pineapple', 5], ['cherry', 7]]
&gt;&gt;&gt;
</code></pre>
<p>Unlike your current code, this will first build a new list which contains all of the items that we want to keep. Afterwards, it will transfer these items into the old list using slice assignment.</p>
<p>The <code>[:]</code> makes this an in-place operation.  Meaning, the <code>values['Results']</code> object is only modified, not replaced.  Had we done this instead:</p>
<pre><code>values['Results'] = [x for x in values['Results'] if x[1] is not None]
</code></pre>
<p>the code would still work, but the list would be replaced with the new one made from the comprehension.</p>
</div>
<span class="comment-copy">Could you please explain how reassigning with [:] works, and why that's correct? Thanks</span>
<span class="comment-copy">There, I added an explanation.</span>
<span class="comment-copy">@iCodez Actually list slice assignment converts the object on RHS <a href="https://hg.python.org/cpython/file/98ee845a139a/Objects/listobject.c#l646" rel="nofollow noreferrer">to a list</a> under the hood using <a href="https://docs.python.org/2/c-api/sequence.html#c.PySequence_Fast" rel="nofollow noreferrer"><code>PySequence_Fast</code></a>. i.e No laziness or memory advantage here.</span>
<span class="comment-copy">@iCodez Thank you, but I still don't get something - You say "the object is modified, not replaced". But OP didn't replace the list either, he only modified it by using the replace() function. I still don't quite get the difference, and why what you did was legal but what he did wasn't. By using [:] you create a new copy of the list in values['Results'], meaning you replace it... Is that correct?</span>
<span class="comment-copy">@thomas: You are correct that the OP's solution modified the list.  The difference is that he was modifying it while also iterating over it.  My solution however modifies the list <i>after</i> I iterate over it to get the values I want.  Also, <code>[:]</code> does not make a copy in this case.  It tells Python to use slice assignment.  <code>[:]</code> only makes a copy when it is on the left of the <code>=</code> (a.k.a part of an expression), as in <code>copy = mylist[:]</code>.</span>
