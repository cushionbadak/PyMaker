<div class="post-text" itemprop="text">
<p>Doc's are lacking an example...How do you use <code>bisect.insort_left)_</code> based on a key?</p>
<p>Trying to insert based on key.</p>
<pre><code>bisect.insort_left(data, ('brown', 7))
</code></pre>
<p>puts insert at <code>data[0]</code>.</p>
<p>From docs...</p>
<blockquote>
<p><code>bisect.insort_left(</code><em>a, x, lo=0, hi=len(a)</em><code>)</code> <br/><br/>
      Insert <em>x</em> in <em>a</em> in sorted order. This is equivalent to <code>a.insert(bisect.bisect_left(a, x, lo, hi), x)</code> assuming that <em>a</em> is already sorted. Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step.</p>
</blockquote>
<p>Sample usage:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
&gt;&gt;&gt; data.sort(key=lambda r: r[1])
&gt;&gt;&gt; keys = [r[1] for r in data]         # precomputed list of keys
&gt;&gt;&gt; data[bisect_left(keys, 0)]
('black', 0)
&gt;&gt;&gt; data[bisect_left(keys, 1)]
('blue', 1)
&gt;&gt;&gt; data[bisect_left(keys, 5)]
('red', 5)
&gt;&gt;&gt; data[bisect_left(keys, 8)]
('yellow', 8)
&gt;&gt;&gt;
</code></pre>
<p>I want to put <code>('brown', 7)</code> after <code>('red', 5)</code> on sorted list in <code>data</code> using <code>bisect.insort_left</code>. Right now <code>bisect.insort_left(data, ('brown', 7))</code> puts <code>('brown', 7)</code> at <code>data[0]</code>...because I am not using the keys to do insert...docs don't show to do inserts using the keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>This does essentially the same thing the <a href="http://code.activestate.com/recipes/577197-sortedcollection/" rel="nofollow noreferrer"><code>SortedCollection recipe</code></a> does that the <a href="https://docs.python.org/3/library/bisect.html#module-bisect" rel="nofollow noreferrer"><code>bisect</code> documentation</a> mentions in the <strong>See also:</strong> section at the end which supports a key-function.</p>
<p>What's being done is a separate sorted <code>keys</code> list is maintained in parallel with the sorted <code>data</code> list to improve performance (it's faster than creating the keys list before each insertion, but keeping it around and updating it isn't strictly required). The ActiveState recipe encapsulated this for you within a class, but in the code below they're just two separate independent lists being passed around (so it'd be easier for them to get out of sync than it would be if they were both held in an instance of the recipe's class).</p>
<pre><code>from bisect import bisect_left

def insert(seq, keys, item, keyfunc=lambda v: v):
    """Insert an item into a sorted list using a separate corresponding
       sorted keys list and a keyfunc() to extract the key from each item.

    Based on insert() method in SortedCollection recipe:
    http://code.activestate.com/recipes/577197-sortedcollection/
    """
    k = keyfunc(item)  # Get key.
    i = bisect_left(keys, k)  # Determine where to insert item.
    keys.insert(i, k)  # Insert key of item to keys list.
    seq.insert(i, item)  # Insert the item itself in the corresponding place.

# Initialize the sorted data and keys lists.
data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
data.sort(key=lambda r: r[1]) # Sort data by key value
keys = [r[1] for r in data]   # Initialize keys list
print(data)  # -&gt; [('black', 0), ('blue', 1), ('red', 5), ('yellow', 8)]

insert(data, keys, ('brown', 7), keyfunc=lambda x: x[1])
print(data)  # -&gt; [('black', 0), ('blue', 1), ('red', 5), ('brown', 7), ('yellow', 8)]
</code></pre>
<p><strong>Follow-on question:</strong><br/>
        Can <code>bisect.insort_left</code> be used?</p>
<p>No, you can't simply use the <code>bisect.insort_left()</code> function to do this because it wasn't written in a way that supports a key-function—instead it just compares the whole item passed to it to insert, <code>x</code>, with one of the whole items in the array in its <code>if a[mid] &lt; x:</code> statement. You can see what I mean by looking at the source for the <code>bisect</code> module in <a href="https://github.com/python/cpython/blob/3.6/Lib/bisect.py" rel="nofollow noreferrer"><code>Lib/bisect.py</code></a>.</p>
<p>Here's the relevant excerpt:</p>
<pre><code>def insort_left(a, x, lo=0, hi=None):
    """Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """

    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if a[mid] &lt; x: lo = mid+1
        else: hi = mid
    a.insert(lo, x)
</code></pre>
<p>You could modify the above to accept an optional key-function argument and use it:</p>
<pre><code>def my_insort_left(a, x, lo=0, hi=None, keyfunc=lambda v: v):
    x_key = keyfunc(x)  # Get and save value comparison value.
    . . .
        if keyfunc(a[mid]) &lt; x_key: # Compare key values.
            lo = mid+1
    . . .
</code></pre>
<p>...and call it like this:</p>
<pre><code>my_insort_left(data, ('brown', 7), keyfunc=lambda v: v[1])
</code></pre>
<p>Actually, if you're going to write a custom function, for the sake of more efficiency at the expense of unneeded generality, you could dispense with the adding of a generic key function argument and just hardcode everything to operate the way needed with the data format you have. This will avoid the overhead of multiple calls to a key-function when doing the insertions.</p>
<pre><code>def my_insort_left(a, x, lo=0, hi=None):
    x_key = x[1]   # Key on second element of each item in sequence.
    . . .
        if a[mid][1] &lt; x_key: lo = mid+1  # Compare second element to key.
    . . .
</code></pre>
<p>...called this way without passing keyfunc:</p>
<pre><code>my_insort_left(data, ('brown', 7))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your goal is to mantain a list <strong>sorted by key</strong>, performing usual operations like <strong>bisect insert</strong>, delete and update, I think <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow">sortedcontainers</a> should suit your needs as well, and you'll avoid O(n) inserts.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could wrap your iterable in a class that implements <code>__getitem__</code> and <code>__len__</code>. This allows you the opportunity to use a key with <code>bisect_left</code>. If you set up your class to take the iterable and a key function as arguments.</p>
<p>To extend this to be usable with <code>insort_left</code> it's required to implement the <code>insert</code> method. The problem here is that if you do that is that <code>insort_left</code> will try to insert your key argument into the list containing the objects of which the the key is a member. </p>
<p>An example is clearer</p>
<pre><code>from bisect import bisect_left, insort_left


class KeyWrapper:
    def __init__(self, iterable, key):
        self.it = iterable
        self.key = key

    def __getitem__(self, i):
        return self.key(self.it[i])

    def __len__(self):
        return len(self.it)

    def insert(self, index, item):
        print('asked to insert %s at index%d' % (item, index))
        self.it.insert(index, {"time":item})

timetable = [{"time": "0150"}, {"time": "0250"}, {"time": "0350"}, {"time": "0450"}, {"time": "0550"}, {"time": "0650"}, {"time": "0750"}]

bslindex = bisect_left(KeyWrapper(timetable, key=lambda t: t["time"]), "0359")

islindex = insort_left(KeyWrapper(timetable, key=lambda t: t["time"]), "0359")
</code></pre>
<p>See how in my <code>insert</code> method I had to make it specific to the timetable dictionary otherwise <code>insort_left</code> would try insert <code>"0359"</code> where it should insert <code>{"time": "0359"}</code>?</p>
<p>Ways round this could be to construct a dummy object for the comparison, inherit from <code>KeyWrapper</code> and override <code>insert</code> or pass some sort of factory function to create the object. None of these ways are particularly desirable from an idiomatic python point of view.</p>
<p>So the easiest way is to just use the <code>KeyWrapper</code> with <code>bisect_left</code>, which returns you the insert index and then do the insert yourself. You could easily wrap this in a dedicated function.</p>
<p>e.g.</p>
<pre><code>bslindex = bisect_left(KeyWrapper(timetable, key=lambda t: t["time"]), "0359")
timetable.insert(bslindex, {"time":"0359"})
</code></pre>
<p>In this case ensure you don't implement <code>insert</code>, so you will be immediately aware if you accidentally pass a <code>KeyWrapper</code> to a mutating function like <code>insort_left</code> which probably wouldn't do the right thing.</p>
<p>To use your example data</p>
<pre><code>from bisect import bisect_left


class KeyWrapper:
    def __init__(self, iterable, key):
        self.it = iterable
        self.key = key

    def __getitem__(self, i):
        return self.key(self.it[i])

    def __len__(self):
        return len(self.it)

data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
data.sort(key=lambda c: c[1])

newcol = ('brown', 7)

bslindex = bisect_left(KeyWrapper(data, key=lambda c: c[1]), newcol[1])
data.insert(bslindex, newcol)

print(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Add comparison methods to your class</strong></p>
<p>Sometimes this is the least painful way, especially if you already have a class and just want to sort by a key from it:</p>
<pre><code>#!/usr/bin/env python3

import bisect
import functools

@functools.total_ordering
class MyData:
    def __init__(self, color, number):
        self.color = color
        self.number = number
    def __lt__(self, other):
        return self.number &lt; other .number
    def __str__(self):
        return '{} {}'.format(self.color, self.number)

mydatas = [
    MyData('red', 5),
    MyData('blue', 1),
    MyData('yellow', 8),
    MyData('black', 0),
]
mydatas_sorted = []
for mydata in mydatas:
    bisect.insort(mydatas_sorted, mydata)
for mydata in mydatas_sorted:
    print(mydata)
</code></pre>
<p>Output:</p>
<pre><code>black 0
blue 1
red 5
yellow 8
</code></pre>
<p>See also: <a href="https://stackoverflow.com/questions/5824382/enabling-comparison-for-classes">"Enabling" comparison for classes</a></p>
<p>Tested in Python 3.5.2.</p>
</div>
<span class="comment-copy">What is your question?</span>
<span class="comment-copy">Be careful with this it's an O(N) operation, check if you really need it first. Have you considered <code>heapq</code> or just calling <code>list.sort</code> before printing if list isn't sorted</span>
<span class="comment-copy">Yes, heapq does not work well for remove a node mid tree. so, this may be best for me</span>
<span class="comment-copy">@Merlin What's the general problem you are solving?</span>
<span class="comment-copy">The docs suggest using the <a href="http://code.activestate.com/recipes/577197-sortedcollection/" rel="nofollow noreferrer"><code>SortedCollection</code> recipe</a> that has support for a key-function, which the <code>bisect</code> module doesn't support. The <code>insert()</code> method in the recipe's class looks like it might do what you want (given the scaffolding the class provides).</span>
<span class="comment-copy">THANKS, can bisect.insort_left be used?</span>
<span class="comment-copy">You could probably use it to insert the key of the new item into the <code>keys</code> list, but not the item itself into the <code>data</code> list (because it doesn't support a key-function and would use the whole item as the key, and since the item is a tuple it would sort by the string value in it first).</span>
<span class="comment-copy">Confused...How would insert into "data" list? Could you give example...</span>
<span class="comment-copy">Since <code>data</code> is a list, and lists are mutable sequences, you can insert items into them at arbitrary indexes using <a href="https://docs.python.org/2/library/stdtypes.html?highlight=sequence#mutable-sequence-types" rel="nofollow noreferrer"><code>data.insert(i, x)</code></a>. The code in the <code>insert()</code> function in my answer does this twice, once to insert the key value into the <code>keys</code> list, and again to also insert the whole item at the same relative position of the <code>data</code> list. Why are you so adamant about using <code>bisect.insort_left()</code> -- is using it a homework assignment or something?</span>
<span class="comment-copy">its not homework!!!  I just want to avoid sorting long lists containing tuples repeatedly, Hoping this method would work...</span>
<span class="comment-copy">Specific to this question: sortedcontainers.SortedList includes <a href="http://www.grantjenks.com/docs/sortedcontainers/sortedlistwithkey.html#sortedcontainers.SortedListWithKey.L.bisect_key" rel="nofollow noreferrer">bisect_key* methods</a></span>
<span class="comment-copy">This is excellent and didn't get the love it deserves. It's concise and much more efficient than any other alternative I've seen. If you know that <code>data</code> is already sorted in the correct order, there's no need to calculate the key for each element. The whole point of a binary search is to get <code>O(log n)</code> instead of <code>O(n)</code>. What's the point if you have to calculate the key for each element first?</span>
