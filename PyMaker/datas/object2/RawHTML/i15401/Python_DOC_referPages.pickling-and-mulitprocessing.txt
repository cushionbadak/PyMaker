<div class="post-text" itemprop="text">
<p>The multiprocessing module and pickling. </p>
<p>There seems to be some pickling going on whenever you need to use the multiprocessing module that I'd like to understand better. </p>
<p>Apparently, when items can't be pickled (for whatever reason), they can't be passed as arguments to a Process or Pool object in the multiprocessing module. Why is this? </p>
<p>Is there a complete list or description explaining when items can't be pickled?</p>
<p>Thanks to anyone that can help.</p>
</div>
<div class="post-text" itemprop="text">
<p>So <code>pickle</code> is very limited in what it can serialize.  The full list is pretty much given in the docs.. here:
<a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow">https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled</a>
and here:
<a href="https://docs.python.org/2/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow">https://docs.python.org/2/library/pickle.html#what-can-be-pickled-and-unpickled</a>.</p>
<p>It gets worse. Pickling doesn't really work in the interpreter, mainly because <code>pickle</code> primarily serializes by reference. It doesn't actually pickle the function or the class object, it serializes a string that is essentially their name:</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; import math
&gt;&gt;&gt; pickle.dumps(math.sin)
'cmath\nsin\np0\n.'
</code></pre>
<p>So, if you have built your function, class, or whatever in the interpreter, then you essentially can't pickle the object with <code>pickle</code>.  It looks for the <code>__main__</code> module, and <code>pickle</code> can't find <code>__main__</code>.  This is also why things fail to serialize with <code>multiprocessing</code> in the interpreter.</p>
<p>However, there is a good solution.  You could use a better serializer (like <code>dill</code>), and a fork of <code>multiprocessing</code> that leverages a better serializer.</p>
<pre><code>&gt;&gt;&gt; import dill
&gt;&gt;&gt; from pathos.multiprocessing import ProcessingPool as Pool
&gt;&gt;&gt; p = Pool()
&gt;&gt;&gt; 
&gt;&gt;&gt; def squared(x):
...   return x**2
... 
&gt;&gt;&gt; dill.dumps(squared)
'\x80\x02cdill.dill\n_create_function\nq\x00(cdill.dill\n_unmarshal\nq\x01Ufc\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00\x00d\x01\x00\x13S(\x02\x00\x00\x00Ni\x02\x00\x00\x00(\x00\x00\x00\x00(\x01\x00\x00\x00t\x01\x00\x00\x00x(\x00\x00\x00\x00(\x00\x00\x00\x00s\x07\x00\x00\x00&lt;stdin&gt;t\x07\x00\x00\x00squared\x01\x00\x00\x00s\x02\x00\x00\x00\x00\x01q\x02\x85q\x03Rq\x04c__builtin__\n__main__\nU\x07squaredq\x05NN}q\x06tq\x07Rq\x08.'
&gt;&gt;&gt; 
&gt;&gt;&gt; p.map(squared, range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&gt;&gt;&gt; 
</code></pre>
<p>There's a decent list of sorts for what can serialize and what can't here:
<a href="https://github.com/uqfoundation/dill/blob/master/dill/_objects.py" rel="nofollow">https://github.com/uqfoundation/dill/blob/master/dill/_objects.py</a>
-- it's not comprehensive, but most things can be serialized with <code>dill</code>.</p>
<p>Get <code>pathos</code> and <code>dill</code> here: <a href="https://github.com/uqfoundation" rel="nofollow">https://github.com/uqfoundation</a></p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/1816958/cant-pickle-type-instancemethod-when-using-pythons-multiprocessing-pool-ma?rq=1" title="cant pickle type instancemethod when using pythons multiprocessing pool ma">stackoverflow.com/questions/1816958/â€¦</a></span>
