<div class="post-text" itemprop="text">
<p>I try to run one example from the book "Python Essential Reference" involving observer pattern, but there is a problem with attribute. When the AccountObserver executes <code>__del__</code> the error raises - Object has no attribute 'observers'. I don't know what wrong is with the code, so any help would be very appreciate. </p>
<pre><code>class Account(object):
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance
        self.observers = set()
    def __del__(self):
        for ob in self.observers:
            ob.close()
        del self.observers
    def register(self, observer):
        self.observers.add(observer)
    def unregister(self, observer):
        self.observers.remove(observer)  
    def notify(self):
        for ob in self.observers:
            ob.update()     
    def withdraw(self, amt):
        self.balance -= amt
        self.notify()


class AccountObserver(object):
    def __init__(self, theaccount):
        self.theaccount = theaccount
        self.theaccount.register(self)

    def __del__(self):
        self.theaccount.unregister(self)
        del self.theaccount

    def update(self):
        print("Balance is %0.2f" % self.theaccount.balance)

    def close(self):
        print("Account no longer in use")


a = Account("Ketty", 200000)
a_mama = AccountObserver(a)
a_tata = AccountObserver(a)
a.unregister(a_mama)
a.withdraw(10)
</code></pre>
<p>And the output:</p>
<pre><code>Balance is 199990.00
Account no longer in use
Exception ignored in: &lt;bound method AccountObserver.__del__ of &lt;__main__.AccountObserver object at 0x024BF9F0&gt;&gt;
Traceback (most recent call last):
  File "F:\Projects\TestP\src\main.py", line 28, in __del__
  File "F:\Projects\TestP\src\main.py", line 13, in unregister
AttributeError: 'Account' object has no attribute 'observers'
Exception ignored in: &lt;bound method AccountObserver.__del__ of &lt;__main__.AccountObserver object at 0x024BFEB0&gt;&gt;
Traceback (most recent call last):
  File "F:\Projects\TestP\src\main.py", line 28, in __del__
  File "F:\Projects\TestP\src\main.py", line 13, in unregister
AttributeError: 'Account' object has no attribute 'observers'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python cleans out the module when the interpreter exits. At that point all instances and classes are deleted, and that means that <code>Account.__del__</code> can run <strong>before</strong> <code>AccountObserver.__del__</code>. The order in which the classes are cleared depends on the global namespace dictionary order, which is random thanks to the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow">random hash seed</a> used. <code>Account.__del__</code> deletes <code>self.observers</code> so any later call to <code>account.unregister()</code> will raise an <code>AttributeError</code>.</p>
<p>Your code relies on the classes and attributes all still being there when the module exits. That means you can get both <code>KeyError</code> errors (as <code>a_mama</code> was already unregistered), or <code>AttributeError</code> as the <code>self.observers</code> attribute is already cleared (because <code>Account.__del__</code> cleared it).</p>
<p>There is a big fat warning in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow"><code>object.__del__</code> documentation</a>:</p>
<blockquote>
<p><strong>Warning</strong>: Due to the precarious circumstances under which <code>__del__()</code> methods are invoked, exceptions that occur during their execution are ignored, and a warning is printed to <code>sys.stderr</code> instead. Also, when <code>__del__()</code> is invoked in response to a module being deleted (e.g., when execution of the program is done), other globals referenced by the <code>__del__()</code> method may already have been deleted or in the process of being torn down (e.g. the import machinery shutting down). For this reason, <code>__del__()</code> methods should do the absolute minimum needed to maintain external invariants. Starting with version 1.5, Python guarantees that globals whose name begins with a single underscore are deleted from their module before other globals are deleted; if no other references to such globals exist, this may help in assuring that imported modules are still available at the time when the <code>__del__()</code> method is called.</p>
</blockquote>
<p>The work-around is to make your <code>__del__</code> method more robust in the face of such exceptions:</p>
<pre><code>def unregister(self, observer):
    try:
        self.observers.remove(observer)  
    except (KeyError, AttributeError):
        # no such observer, or the observers set has already been cleared
</code></pre>
</div>
<span class="comment-copy">are you using <code>python 3</code>?</span>
<span class="comment-copy">py 2.7.. I cannot reproduce it</span>
<span class="comment-copy">@MartijnPieters I can using python3.4, <code>AttributeError: 'Account' object has no attribute 'observers'</code></span>
<span class="comment-copy">@PadraicCunningham: I ran this in a 3.4 shell. Will try with a separate file now.</span>
<span class="comment-copy">@PadraicCunningham: ah, reproduced, due to the clearing order.</span>
<span class="comment-copy">what is the difference between python 2 and python 3?</span>
<span class="comment-copy">@PadraicCunningham: Python 3 uses a random hash seed by default, so dictionary order is even less predictable. It can happen in Python 2 as well, but dictionary order is more stable so you don't see it happen here unless you run Python with the <code>-R</code> switch.</span>
<span class="comment-copy">ah I see, thanks.</span>
<span class="comment-copy">Thank you very much for prompt response and explenation.</span>
