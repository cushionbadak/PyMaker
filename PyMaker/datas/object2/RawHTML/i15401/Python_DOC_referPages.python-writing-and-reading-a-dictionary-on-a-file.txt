<div class="post-text" itemprop="text">
<p>i'm trying to write a dictionary to a .txt file, and then read it from that same file again.</p>
<p>This is what i've got so far:</p>
<pre><code>book = {'key1':'1','key2':'2'}

pfile = open("testfile.txt", "w+")
pfile.write("%s" % book)
pfile.close()

k1 = book['key1']
k2 = book['key2']

print(k1)
print(k2)

rfile = open("testfile.txt", "r")
rbook = rfile.read()

k1 = rbook['key1']
k2 = rbook['key2']

print(k1)
print(k2)
</code></pre>
<p>But when i try to run the .py it will return:</p>
<pre><code>1
2
Traceback (most recent call last):   File "sotest.py", line 16, in &lt;module&gt;
    k1b = rbook['key1']
TypeError: string indices must be integers, not str
</code></pre>
<p>I'm on a Mac by the way.</p>
<p>As i said, i want it to write the dictionary to the file, and then read the dictionary from that same file and print it again.</p>
<p>Could someone tell me what i'm doing wrong? Maybe give me an example of how i could make this code work?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you read the dictionary from file the result is <code>string</code> and you cant tread with as a dictionary ! you can use <code>ast.literal_eval</code> to convert it to dictionary :</p>
<pre><code>&gt;&gt;&gt; ast.literal_eval("{'key1':'1','key2':'2'}")
{'key2': '2', 'key1': '1'}
</code></pre>
<p>but as a more efficient way you can use <a href="https://docs.python.org/2/library/shelve.html" rel="nofollow"><code>shelf</code></a> module :</p>
<blockquote>
<p>A “shelf” is a persistent, dictionary-like object. The difference with “dbm” databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python objects — anything that the pickle module can handle. This includes most class instances, recursive data types, and objects containing lots of shared sub-objects. The keys are ordinary strings.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3.4/library/pickle.html" rel="nofollow">the pickle library</a> so you write (e.g.):</p>
<pre><code>import pickle
pfile = open('filename.txt','wb')#binary mode for using pickle
pickle.dump(mydict, pfile)
pfile.close()
</code></pre>
<p>Or even if you want to do it more 'pythonic':</p>
<pre><code>import pickle
with open('filename.txt','wb') as pfile:
    pickle.dump(mydict,pfile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>pickle</code> can have a possible security issue, whereby Python code can be ran upon loading the pickle. If a malicious user has replaced your pickle file with some malicious code then you're in trouble.</p>
<p>I would suggest using Javascript Object Notation, or JSON, for writing your dictionary to a file. Python has a builtin <a href="https://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code></a> module which can provide loading and dumping data. The code below is a toy example which does this with a dictionary.</p>
<pre><code>import json

d = {'a':1, 'b':[0,1,2,3]}

# j is now a string containing the data from d in the json format.
j = json.dumps(d)

with open('my_data.json', 'w') as f:
    f.write(j)
</code></pre>
<p>You will now have a file <code>my_data.json</code> which contains your data. If you wish to re-read this in later you can use the below code:</p>
<pre><code>with open('my_data.json', 'r') as f:
    new_d = json.loads(f.read())
</code></pre>
<p>After which, <code>d</code> and <code>new_d</code> will contain the same information.</p>
<pre><code>print(d)
print(new_d)
# {'a': 1, 'b': [0, 1, 2, 3]}
# {'a': 1, 'b': [0, 1, 2, 3]}
</code></pre>
</div>
<span class="comment-copy">You're not using <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow noreferrer">shelve</a>.</span>
<span class="comment-copy">Or even <a href="https://docs.python.org/2/library/pickle.html" rel="nofollow noreferrer">pickle</a>.</span>
<span class="comment-copy">Ow, ok, i indeed read something about those two, could you give me an example on how to use one of these in my code? @abc</span>
<span class="comment-copy">Thank you! I'll have a closer look at shelves! @Kasra</span>
<span class="comment-copy">@Viva you're welcome ! ;)</span>
<span class="comment-copy">Ok, i'll have a look at JSON as well. Thanks!</span>
