<div class="post-text" itemprop="text">
<p>I am looking to group similar items in a list based on the first three characters in the string.  For example:</p>
<pre><code>test = ['abc_1_2', 'abc_2_2', 'hij_1_1', 'xyz_1_2', 'xyz_2_2']
</code></pre>
<p>How can I group the above list items into groups based on the first grouping of letters (e.g. <code>'abc'</code>)? The following is the intended output:</p>
<pre><code>output = {1: ('abc_1_2', 'abc_2_2'), 2: ('hij_1_1',), 3: ('xyz_1_2', 'xyz_2_2')}
</code></pre>
<p>or </p>
<pre><code>output = [['abc_1_2', 'abc_2_2'], ['hij_1_1'], ['xyz_1_2', 'xyz_2_2']]
</code></pre>
<hr/>
<p>I have tried using <code>itertools.groupby</code> to accomplish this without success:</p>
<pre><code>&gt;&gt;&gt; import os, itertools
&gt;&gt;&gt; test = ['abc_1_2', 'abc_2_2', 'hij_1_1', 'xyz_1_2', 'xyz_2_2']
&gt;&gt;&gt; [list(g) for k.split("_")[0], g in itertools.groupby(test)]
[['abc_1_2'], ['abc_2_2'], ['hij_1_1'], ['xyz_1_2'], ['xyz_2_2']]
</code></pre>
<hr/>
<p>I have looked at the following posts without success:</p>
<p><a href="https://stackoverflow.com/questions/5370294/how-to-merge-similar-items-in-a-list">How to merge similar items in a list</a>.  The example groups similar items (e.g. <code>'house'</code> and <code>'Hose'</code>) using an approach that is overly complicated for my example.</p>
<p><a href="https://stackoverflow.com/questions/7025581/how-can-i-group-equivalent-items-together-in-a-python-list">How can I group equivalent items together in a Python list?</a>.  This is where I found the idea for the list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>.split("_")[0]</code> part should be inside a single-argument function that you pass as the second argument to <code>itertools.groupby</code>.</p>
<pre><code>&gt;&gt;&gt; import os, itertools
&gt;&gt;&gt; test = ['abc_1_2', 'abc_2_2', 'hij_1_1', 'xyz_1_2', 'xyz_2_2']
&gt;&gt;&gt; [list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]
[['abc_1_2', 'abc_2_2'], ['hij_1_1'], ['xyz_1_2', 'xyz_2_2']]
&gt;&gt;&gt;
</code></pre>
<p>Having it in the <code>for ...</code> part does nothing since the result is immediately discarded.</p>
<hr/>
<p>Also, it would be slightly more efficient to use <a href="https://docs.python.org/3/library/stdtypes.html#str.partition"><code>str.partition</code></a> when you only want a single split:</p>
<pre><code>[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit("'hij_1_1'.split('_')")
1.3149855638076913
&gt;&gt;&gt; timeit("'hij_1_1'.partition('_')")
0.7576401470019234
&gt;&gt;&gt;
</code></pre>
<p>This isn't a major concern as both methods are pretty fast on small strings, but I figured I'd mention it.</p>
</div>
<span class="comment-copy">Thanks, this works great.  I recently found that it is a good practice to make sure the input list is sorted e.g. <code>test = sorted(['abc_1_2', 'abc_2_2', 'hij_1_1', 'xyz_1_2', 'xyz_2_2'])</code>.  Otherwise, if the input list is not sorted,  <code>itertools.groupby</code> will not work as expected.</span>
<span class="comment-copy">Yes, sorting the list first is a good practice when using <code>itertools.groupby</code>.  This is because <code>groupby</code> only captures runs of similar values.  Meaning, it can miss some if the list is not sorted.  I didn't bother mentioning this in my post though because the main focus was on how to use <code>groupby</code> and also your list was already sorted.</span>
