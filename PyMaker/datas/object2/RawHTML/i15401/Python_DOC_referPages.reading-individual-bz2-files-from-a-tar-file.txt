<div class="post-text" itemprop="text">
<p>I'm trying to read many bz2 files within a tar file, a file has the following structure:</p>
<pre><code>2013-01.tar
  01\01\00\X.json.bz2\X.json
  01\01\02\X.json.bz2\X.json
</code></pre>
<p>I'm able to get the filenames as follows:</p>
<pre><code>import tarfile
tar = tarfile.open(filepath, 'r')
tar_members_names = [filename for filename in tar.getnames()]
# Side question: How would I only return files and no directories?
</code></pre>
<p>Which returns a list of the .bz2 files. Now I'm trying to extract them (temporarily) using:</p>
<pre><code>inner_filename = tar_members_names[0]
t_extract = tar.extractfile(inner_filename)
</code></pre>
<p>The following code to extract the json file returns an error, however. How would I go about retrieving the JSON files line by line?</p>
<pre><code>import bz2
txt = bz2.BZ2File(t_extract)
TypeError: coercing to Unicode: need string or buffer, ExFileObject found
txt = bz2.decompress(t_extract)
TypeError: must be convertible to a buffer, not ExFileObject
</code></pre>
<p>I've been unable to figure out how to return a buffer from the tar file instead of the current ExFileObject (how to convert it to a buffer?), any suggestions are greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>BZ2File</code> expects a file <em>name</em> as first argument and you pass a file <em>object</em> (i.e. an object which has the same API as what Python returns for <code>open()</code>).</p>
<p>To do what you want, you'll have to read all the bytes from <code>t_extract</code> yourself and call <code>bz2.decompress(data)</code> or use <code>BZ2Decompressor</code> to stream the data through it.</p>
</div>
<span class="comment-copy">like the error says, you're passing an ExFileObject, not a string or TarInfo object like "extractfile" expects.</span>
<span class="comment-copy">Thanks for the answer, it clears up what is going wrong. Could you provide a hint as to where I could find how to do this? Would I first have to save the extracted file to disk and read it from there?</span>
<span class="comment-copy">That depends a bit on the file size. If it's small, you can read all of it into a buffer (<code>data = t_extract.read()</code>) and decompress with one call to <code>bz2.decompress(data)</code>. Otherwise, you have to use a temporary file and stream the data through <code>BZ2Decompressor</code></span>
<span class="comment-copy">Thanks for the clarification. They're reasonably small, so the buffer should work.</span>
<span class="comment-copy">I had one last question. When reading data = t_extract.read(), what kind of object am I retrieving? Printing type(t_extract.read()) actually prints the entire contents of the file (a buffer?). I've been able to iterate over it utilizing txt = bz2.decompress(data) &amp; 'for line in txt.split('\n')', but it seems like a hack more than how I should do it. Any thoughts?</span>
<span class="comment-copy"><code>read()</code> returns the file's content. The built-in Python 2.x methods will return a <code>str</code> object. See <a href="https://docs.python.org/2/library/stdtypes.html#bltin-file-objects" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#bltin-file-objects</a> Python 3 is more complex: <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-file-object</a></span>
