<div class="post-text" itemprop="text">
<p>How would I accomplish the following?</p>
<pre><code>&gt;&gt;&gt; x={'NON_EPISODIC_MOVIE': 11}
&gt;&gt;&gt; for k,v in x.items():
...     k=v
... 
&gt;&gt;&gt; NON_EPISODIC_MOVIE
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'NON_EPISODIC_MOVIE' is not defined
</code></pre>
<p>Basically, I want to be able to convert a dictionary mapping into the following:</p>
<pre><code>NON_EPISODIC_MOVIE = 11
...other items...

if content_type == NON_EPISODIC_MOVIE:
    # do something
</code></pre>
<p>How would this be accomplished from a dict?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dynamically setting variables is a truly terrible idea in more ways than I can count, but Python gives you enough rope to shoot yourself in the foot!  At an interactive interpreter prompt it may be less horrible than anywhere else...</p>
<pre><code>&gt;&gt;&gt; x={'NON_EPISODIC_MOVIE': 11}
&gt;&gt;&gt; vars().update(x)
&gt;&gt;&gt; NON_EPISODIC_MOVIE
11
</code></pre>
<p>Works in both Python 2 and Python 3 interactive interpreters.</p>
<p>A better approach is to keep each bunch of such names-with-values within a class, which acts as its namespace.  See <a href="http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named/" rel="nofollow">http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named/</a> -- oldie, but goldie, if I say so myself:-).  Just say, e.g</p>
<pre><code>&gt;&gt;&gt; movies = Bunch(**x)
</code></pre>
<p>and the global variables will be intact but <code>movies.NON_EPISODIC_MOVIE</code> will be <code>11</code> with zero risk of "namespace pollution" (the big problem with dynamically setting global variables)...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x={'NON_EPISODIC_MOVIE': 11}
&gt;&gt;&gt; g = globals()
&gt;&gt;&gt; for k, v in x.items():
...  g[k] = v
...
&gt;&gt;&gt; NON_EPISODIC_MOVIE
11
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Dynamic variables are almost certainly the wrong approach.  What's wrong with doing <code>if content_type == x['NON_EPISODIC_MOVIE']:</code>?</span>
<span class="comment-copy">What is an integer mapping? It looks like you are trying to make constants...</span>
<span class="comment-copy">@mattm I'm not sure what the correct term would be for this but setting a name for an integer so it can be more easily recognized (aliasing) ? For example: <code>MATTM_USER_ID = 3161282</code></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/8028708/dynamically-set-local-variable-in-python">Dynamically set local variable in Python</a></span>
<span class="comment-copy">@David542. Do you mean an <a href="https://docs.python.org/3/library/enum.html#module-enum" rel="nofollow noreferrer">enum</a>?</span>
<span class="comment-copy">Why would it be such a bad idea if the variable names are super-specific and would never be overwritten? For example, I have a list of 'content types' that I use through the application. So having access to <code>CONTENT_TYPE_SHORT_FILM</code> is much more readable than doing anything else. Or am I wrong here?</span>
<span class="comment-copy">@David542 - Accidentally overwriting the names is just one of the problems.  They also pollute the global namespace.  Plus, it's hard to work with them as a whole.  I mean, with the dictionary, you can get its length, add and remove items easily, print it, iterate over it, etc.  Dynamic names however are just names.</span>
<span class="comment-copy">A far superior approach is to keep each logical group of such constants in a class -- see e.g <a href="http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named/" rel="nofollow noreferrer">code.activestate.com/recipes/â€¦</a> ... oldie but goldie, if I say so myself:-).  This will avoid just about every problem connected with making such constants into global variables!  <code>import this</code> at a Python interpreter prompt -- each line is a gem of wisdom, but this is about the last, subtlest one...: "Namespaces are one honking great idea -- let's do more of those!".  Keep bunches of name in a namespace: you'll live happier and saner!-)</span>
