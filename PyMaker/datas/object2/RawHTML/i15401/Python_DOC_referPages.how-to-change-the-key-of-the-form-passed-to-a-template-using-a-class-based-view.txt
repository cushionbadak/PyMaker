<div class="post-text" itemprop="text">
<p>I have a template that references a form like {{ registeredteamform.team_name }}, but Django's generic class based views pass forms using the key 'form'.  Rather than changing the form name in my template (I'm dealing with a multi-form situation) I'd like to change they <em>key</em> of the form passed to the template.</p>
<p>I tried extending the <code>render_to_response</code> method like so</p>
<pre><code>def render_to_response(self, context, **response_kwargs):
        response_kwargs['registeredteamform'] = context['form']
        return super().render_to_response(self, context, **response_kwargs)
</code></pre>
<p>but this raises the error <code>render_to_response() takes 2 positional arguments but 3 were given</code>.  So, how can I change the form key and is render_to_response the appropriate place to do this?  (I'm subclassing the <code>CreateView</code>),</p>
</div>
<div class="post-text" itemprop="text">
<p>The error you are getting is because of the way you are using super. The <code>self</code> goes in the <code>super()</code> for Python 2.7, and you don't need to pass the self at all for Python 3.</p>
<p><a href="https://docs.python.org/2/library/functions.html#super" rel="nofollow">Python 2.7:</a></p>
<p><code>return super(MyClassView, self).render_to_response(context, **response_kwargs)</code></p>
<p><a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">Python 3:</a></p>
<p><code>return super().render_to_response(context, **response_kwargs)</code></p>
<p>If you dig into the <code>CreateView</code> you will see that it is in the <code>get()</code> that form actually gets assigned to the <code>form</code> key.</p>
<pre><code>def get(self, request, *args, **kwargs):
    """
    Handles GET requests and instantiates a blank version of the form.
    """
    form_class = self.get_form_class()
    form = self.get_form(form_class)
    return self.render_to_response(self.get_context_data(form=form))
</code></pre>
<p>You could add in the key the way you are now, but the <code>form</code> key will still be getting assigned too.</p>
<p>I might suggest overriding the <code>get()</code>.</p>
<pre><code>def get(self, request, *args, **kwargs):
    self.object = None
    form_class = self.get_form_class()
    form = self.get_form(form_class)
    return self.render_to_response(self.get_context_data(registeredteamform =form))
</code></pre>
</div>
<span class="comment-copy">Actually, OP appears to be using Python 3, where <code>super()</code> with no arguments is correct. But you are right that <code>self</code> should not be used in the arguments to <code>render_to_response</code>.</span>
