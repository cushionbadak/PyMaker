<div class="post-text" itemprop="text">
<p>I'm trying to make my WSGI server implementation compatible with both Python 2 and Python 3. I had this code:</p>
<pre><code>def start_response(status, response_headers, exc_info = None):
    if exc_info:
        try:
            if headers_sent:
                # Re-raise original exception if headers sent.
                raise exc_info[0], exc_info[1], exc_info[2]
        finally:
            # Avoid dangling circular ref.
            exc_info = None
    elif headers_set:
        raise AssertionError("Headers already set!")

    headers_set[:] = [status, response_headers]
    return write
</code></pre>
<p>...with the relevant part being:</p>
<pre><code># Re-raise original exception if headers sent.
raise exc_info[0], exc_info[1], exc_info[2]
</code></pre>
<p>Python 3 doesn't support that syntax anymore so it must be translated to:</p>
<pre><code>raise exc_info[0].with_traceback(exc_info[1], exc_info[2])
</code></pre>
<p>Problem: the Python 2 syntax generates a parse error in Python 3. How do I write code that can be parsed by both Python 2 and Python 3? I've tried the following, but that doesn't work:</p>
<pre><code>if sys.version_info[0] &gt;= 3:
    raise exc_info[0].with_traceback(exc_info[1], exc_info[2])
else:
    eval("raise exc_info[0], exc_info[1], exc_info[2]; 1", None, { 'exc_info': exc_info })
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something creative.</p>
<p>Have a check at the start of your code - your constructor or whatever, check what version of python you are using, since your normal version checker is not working, try this instead:</p>
<pre><code>try:
  eval('a python 3 expression') # something that only works in python3+
  python_version = 3
except:
  python_version = 2
</code></pre>
<p>Then the rest of your code can easily just reference this to know what to use.</p>
<p>As for the parse errors, you can use exec in a function, like so:</p>
<pre><code>def what_to_run():
    if python_version = 3:
        return 'raise exc_info[0].with_traceback(exc_info[1], exc_info[2])'
    else:
        return 'raise exc_info[0], exc_info[1], exc_info[2]'
</code></pre>
<p>In your function you would write this:</p>
<pre><code>def start_response(status, response_headers, exc_info = None):
    if exc_info:
        try:
            if headers_sent:
                # Re-raise original exception if headers sent.
                exec(what_to_run())
        finally:
            # Avoid dangling circular ref.
            exc_info = None
    elif headers_set:
        raise AssertionError("Headers already set!")

    headers_set[:] = [status, response_headers]
    return write
</code></pre>
<p>A bit messy, untested, but it <em>should</em> work, at least you understand the idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you use <a href="http://packages.python.org/six/" rel="noreferrer"><code>six</code></a>? It exists to solve this very problem.</p>
<pre><code>import six, sys
six.reraise(*sys.exc_info())
</code></pre>
<p>See: <a href="https://pythonhosted.org/six/index.html#six.reraise" rel="noreferrer">https://pythonhosted.org/six/index.html#six.reraise</a></p>
</div>
<span class="comment-copy">That does not make much sense to me.. Can you put your <code>start_response</code> function in some context, maybe show an example where you would call it?</span>
<span class="comment-copy">whats wrong with the classic <code>try/except</code>?</span>
<span class="comment-copy">@poke and @inbar rose: <code>start_response</code> is part of the WSGI spec. See PEP-333. WSGI apps call start_response when they, well, want to start a response. If <code>exc_info</code> is given then that is the WSGI app's signal that the app code encountered an exception, and the WSGI server should do something with it such as printing an error. In my case I want to raise the error if headers have already been sent out. See <a href="http://www.python.org/dev/peps/pep-0333/#the-start-response-callable" rel="nofollow noreferrer">python.org/dev/peps/pep-0333/#the-start-response-callable</a></span>
<span class="comment-copy">Quick clarification, you state that the Python 3 syntax generates a parse error in python 2 -- It seems to me that it should be the other way around.  The python 2 syntax generates a parse error in python 3 ...</span>
<span class="comment-copy">Have seen this? <a href="http://docs.python.org/3/howto/pyporting.html#use-same-source" rel="nofollow noreferrer">docs.python.org/3/howto/pyporting.html#use-same-source</a></span>
<span class="comment-copy">Checking for Python is not the problem. The problem is that Python 3-compatible code generates a <i>parse error</i> on Python 2 and vice versa. I can't just put both versions in an if-else or try-except block like I usually do.</span>
<span class="comment-copy">@Hongli -- I'm pretty sure <code>eval</code> doesn't work since <code>raise</code> is a <i>statement</i>, not an expression.  If you changed it to <code>exec</code> it might work though...</span>
<span class="comment-copy">@InbarRose -- But there's still the problem with using <code>eval</code> on a statement when <code>eval</code> requires an <i>expression</i></span>
<span class="comment-copy">Yes, exec() instead of eval() worked, thank you.</span>
<span class="comment-copy">Don't do this. Use <code>six</code> instead, as the other answer suggests.</span>
<span class="comment-copy">didn't see it in six docs! great answer!</span>
