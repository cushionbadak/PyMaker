<div class="post-text" itemprop="text">
<p>I would like to test the example of the use of the nonlocal statement specified in the answer on <a href="https://stackoverflow.com/questions/1261875/python-nonlocal-statement">this</a> question:</p>
<pre><code>def outer():
   x = 1
   def inner():
       nonlocal x
       x = 2
       print("inner:", x)
   inner()
   print("outer:", x)
</code></pre>
<p>but when I try to load this code, I always get a syntax error:</p>
<pre><code>Traceback (most recent call last):


File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "t.py", line 4
    nonlocal x
             ^
SyntaxError: invalid syntax
</code></pre>
<p>Does anybody know what I am doing wrong here (I get the syntax error for every example that I use, containing <code>nonlocal</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>nonlocal</code> only works in Python 3; it is a <a href="http://docs.python.org/3/reference/simple_stmts.html#nonlocal">new addition to the language</a>.</p>
<p>In Python 2 it'll raise a syntax error; python sees <code>nonlocal</code> as part of an expression instead of a statement.</p>
<p>This specific example works just fine when you actually use the correct Python version:</p>
<pre><code>$ python3.3
Python 3.3.0 (default, Sep 29 2012, 08:16:08) 
[GCC 4.2.1 Compatible Apple Clang 3.1 (tags/Apple/clang-318.0.58)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def outer():
...    x = 1
...    def inner():
...        nonlocal x
...        x = 2
...        print("inner:", x)
...    inner()
...    print("outer:", x)
... 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Names listed in a nonlocal statement must not collide with pre-existing bindings in the local scope.</p>
</blockquote>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow">https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement</a></p>
<p><pre><code><code>def outer():
    x = 1
    def inner():
        nonlocal x
        y = 2
        x = y
        print("inner: ", x)
    inner()
    print("outer: ", x)</code></code></pre></p></div>
<span class="comment-copy">python version?</span>
