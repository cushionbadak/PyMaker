<div class="post-text" itemprop="text">
<p>I'm working on a program that asks the user to pick one of two caves to enter. User may pick either cave 1 or cave 2. That number is compared to the answer (generated by random.randint (1,2)). If the user's choice is equal to the answer, he wins; else, he loses. The issue is that the program never branches to the win condition. No matter what choice user makes, he always loses. I've tried debugging but I cannot see the variable comparison values between caveAnswer and caveChoice.</p>
<pre><code>def gameCore (name):
    print ('You stand before the entrances of two caves.')
    print ('Choose a cave, either cave 1 or cave 2.')
    print ( )


    caveAnswer = random.randint (1,2)
    caveChoice = input ('Enter either 1 or 2. ')


    if caveAnswer == caveChoice:  [# I suspect the problem occurs at this comparison]
        print ('You enter the black mouth of the cave and...')
        time.sleep (1)
        print ( )
        print ('You find a hill of shining gold coins!')
        playAgain (name)

    else:
        print ('You enter the black mouth of the cave and...')
        time.sleep(1)
        print ( ) 
        print ('A wave of yellow-orange fire envelopes you. You\'re toast.')
        playAgain (name)
</code></pre>
<p>Thank you for your help.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>caveChoice = int(input ('Enter either 1 or 2. '))
</code></pre>
<p>You should also make it so that it'll try again if it's not an int.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should convert the input to an int:</p>
<pre><code>caveChoice = int(input('Enter either 1 or 2. '))
</code></pre>
<p>But if you don't want the program to crash upon an input of, say, <code>'foo'</code>, then you need a <code>try-except</code> block, itself inside a <code>while</code> loop, so you can try again.</p>
<pre><code>while True:
    try:
        caveChoice = int(input('Enter either 1 or 2. '))
        break
    except ValueError:
        print('Try again.')
</code></pre>
<p>Also, you might want to check if the input is actually <code>1</code> or <code>2</code>.</p>
<pre><code>while True:
    try:
        caveChoice = int(input('Enter either 1 or 2. '))
        if caveChoice not in (1, 2):
            raise ValueError
        break
    except ValueError:
        print('Invalid input. Try again.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried your program ant it definitely works. To test it, just print out <code>caveAnswer</code> before entering your input <code>caveChoice</code>. If your have an error, then not in this function.</p>
<pre><code>import random,time
def gameCore (name):
    print ('You stand before the entrances of two caves.')
    print ('Choose a cave, either cave 1 or cave 2.')
    print ( )


    caveAnswer = random.randint (1,2)
    print caveAnswer
    caveChoice = input ('Enter either 1 or 2. ')

    if caveAnswer == caveChoice:  
        print 'You enter the black mouth of the cave and - answer=%d - your answer=%d' % (caveAnswer, caveChoice)
        time.sleep (1)
        print ( )
        print 'You find a hill of shining gold coins!'
        # playAgain (name) 

    else:  
        print ('You enter the black mouth of the cave and - answer=%d - your answer=%d')% (caveAnswer, caveChoice)
        time.sleep(1)
        print ( ) 
        print ('A wave of yellow-orange fire envelopes you. You\'re toast.')
        # playAgain (name)

gameCore('Test')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try converting to int.</p>
<p>caveChoice = input ('Enter either 1 or 2. ')</p>
</div>
<span class="comment-copy">Yay. Now, <i>confirm</i> the assumption in the REPL: <code>1 == "1"</code>. So, <i>what</i> could be done to make both sides "of a compatible type"? (See <a href="http://docs.python.org/release/2.5.2/ref/comparisons.html" rel="nofollow noreferrer">5.9 Comparisons</a> as well:  "Otherwise [if not numbers], objects of different types [..] compare unequal.")</span>
<span class="comment-copy">as a further hint. Try <code>print( (type(caveAnswer), type(caveChoice)) )</code></span>
<span class="comment-copy">Arg, old link in my previous comment (I blame google "feeling lucky"). Current for 2.x is <a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="nofollow noreferrer">docs.python.org/2/reference/expressions.html#not-in</a> (this version has nicer formatting and also discusses protocol behavior)</span>
<span class="comment-copy">@pst: It's pretty clear the OP is using 3.x—otherwise, <code>input</code> would have returned the number <code>1</code>, not the string <code>"1"</code>, and he wouldn't have had this problem in the first place. (Also, <code>print ( )</code> would print "()" instead of a blank line, etc.) So, if you're going to update the link, you probably should give the <a href="http://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow noreferrer">3.x version</a>.</span>
<span class="comment-copy">@Fluxcapacitor: A few minor notes. First, you usually don't want to escape apostrophes and quotes like that; you can use, e.g., <code>"A wave of yellow-orange fire envelopes you. You're toast."</code>Second, don't put blank spaces between function names and parentheses, or inside them—doing so with <code>print</code> is likely part of the reason that many of the answerers didn't realize you were using Python 3.</span>
<span class="comment-copy">this solved my problem - thanks</span>
<span class="comment-copy">This is the "make it so that it'll try again if it's not an int" I was talking about.</span>
<span class="comment-copy">Yes definitely! I mean just copy paste it and run it two or three times..</span>
<span class="comment-copy">I think Python 2 supports int/string comparisons, but Python 3 doesn't. The OP's problem is in Python 3 because <code>print</code> is a function.</span>
<span class="comment-copy">@Volatility <code>1 == "1"</code> is false in Python 2.x <i>and</i> Python 3.x</span>
<span class="comment-copy">I've run it 10 times but it never branches to gold coins. I'm stumped. My logic looks solid. There's some rule w/python I'm overlooking.</span>
<span class="comment-copy">Oh yeah, that is right.You guys are mixing up <code>input</code> and <code>raw_input</code>. I don't know why my answer worked though, and his original question didn't work.</span>
<span class="comment-copy">This doesn't do what you say. In fact, it's identical to the OP's existing code, so it doesn't really do <i>anything</i> useful.</span>
