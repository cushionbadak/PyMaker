<div class="post-text" itemprop="text">
<p>I'm working on a server (implemented in Python) client (implemented in C) application.
I want to unpack raw bytes received from a C client using struct module at server side (Python). </p>
<p>My C structure (from C client):</p>
<pre><code>typedef struct lokesh{
    int command;

     union 
     {
        struct{
            int data[100];
            int ttl[100];
        };

        struct{
            char config[256];

        };   
     };
} mystructdata;
</code></pre>
<p>Unpacking at server side (Python):-</p>
<pre><code>import struct

data,address=socket.recvfrom(1024)
result=struct.unpack('&lt;i 2048s',data)
print(result[0])
</code></pre>
<p>But I'm getting an error :-</p>
<pre><code>struct.error: unpack require object of size 2052  
</code></pre>
<p>I think problem is in my unpack method's format string <code>'&lt;i 2048s'</code> argument.</p>
<p>Edit :- </p>
<blockquote>
<p>now, i have replaced format string <code>'&lt;i 2048s'</code> with format string
  <code>'&lt;i 256s'</code></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Lokesh, I'm not a python expert, but it looks to me like you're telling python's <strong>struct</strong> that you have:</p>
<ul>
<li>a little-endian integer, followed by</li>
<li>2048 char[]</li>
</ul>
<p>(based on <a href="http://docs.python.org/2/library/struct.html#format-characters" rel="nofollow">http://docs.python.org/2/library/struct.html#format-characters</a>)</p>
<p>Looking at your C struct definition, that's not what you have at all.  You have:</p>
<ul>
<li>an integer, followed by one of:
<ul>
<li>two integer arrays of 100 elements each</li>
<li>one char array of 256 elements</li>
</ul></li>
</ul>
<p>Now, without looking at the C code which pushes the struct onto the wire, it's difficult to know about the endianness of integers (network byte order is big-endian).  But that aside, your data specification to <strong>struct</strong> looks wrong.</p>
<p>I'm guessing that the interpretation of the union in the C struct will depend on the contents of <strong>command</strong>.  As such, it seems like you'll need to examine <strong>command</strong> first off, then come up with an appropriate format string for <strong>struct</strong> based on that.  Note that in the data/ttl case you may trip over struct padding issues since it's possible that the compiler on the client side may decide to insert some padding between the <strong>data</strong> and <strong>ttl</strong> arrays in order to satisfy alignment requirements, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems:</p>
<ul>
<li><p><a href="http://docs.python.org/3/library/socket.html#socket.socket.recvfrom" rel="nofollow"><code>.recvfrom()</code></a> returns a tuple of <code>(data, address)</code>, you need to pass just the data to <code>struct.unpack()</code>.</p></li>
<li><p>You are reading only up to 1024 bytes from the socket, but the unpack format wants 2052 bytes. Read from the socket until you have received enough data first.</p></li>
</ul>
</div>
<span class="comment-copy">Why wasn't any kind of (at least semi-) standardized communication format appropriate for your problem? There is Google's Protocol Buffers for one - that is quite efficient, and has libraries for a lot of languages...</span>
<span class="comment-copy">my control is at server side only.. i.e unpacking/decoding  and can't do anything at client side.</span>
<span class="comment-copy">sir, i think you are right that command contents will decide union struct selection. but, i want to know i'm using correct format string expressions.... if(command==union_1_selection) then : format_string= '&lt;i ii' else if (command==union_2_selection) then : format_string='&lt;i 256s'</span>
<span class="comment-copy">..i solved my above problem, actually problem was with my formating string argument of unpack method, i replaced it with :---&gt; <code>struct.unpack("&lt;i 800s",data)</code> , since union size will be:- 2( 100x4) = 800s</span>
<span class="comment-copy">sir yes, i have corrected 1st point now. but on specifying 2052 bytes i'm getting error :--&gt; struct.error: unpack require object of size 2056</span>
<span class="comment-copy">@LokeshKumar: I did not say that your struct pattern should be adjusted. A <code>i</code> integer is 4 bytes, and you want 2048 characters, each 1 byte. Total size 2052 bytes, so you need to pass <code>unpack</code> 2052 <code>data</code> bytes.</span>
