<div class="post-text" itemprop="text">
<p>If I define a class <code>a</code> and a method <code>b</code>like this: (In Python2.7)</p>
<pre><code>class a:
    def b():
        print("hello")
</code></pre>
<p>I can call this method neither by</p>
<pre><code> a.b()
</code></pre>
<p>nor:</p>
<pre><code>a_instance = a(); a_instance.b()
</code></pre>
<p>My questions are: </p>
<p>(1) Is there a way to call b?</p>
<p>(2) Is there any situation that this usage is meanful? </p>
<p>(3) I think b is neither a <code>static method</code> nor a <code>instance method</code>. Is <code>b</code> a <code>class method</code>? If not, what should be named to <code>b</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>or <a href="http://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer"><code>classmethod</code></a> decorator which takes class object as first instance.</p>
<blockquote>
<p>Is there a way to call b?</p>
</blockquote>
<p>Yes you could either make it a static method or an instance method and call it accordingly.  Below i make it a static method so you can call it on any instance or directly on the class object <code>a</code></p>
<pre><code>class a:
    @classmethod
    def b(cls):
        print("hello")

a.b() #'hello'
</code></pre>
<blockquote>
<p>Is there any situation that this usage is meanful?</p>
</blockquote>
<p>What usage? static methods? yes there is, and it depends on your architecture.  classmethods can be used as factory functions? returning new instances of classes.</p>
<blockquote>
<p>I think b is neither a static method nor a instance method. Is b a class method? If not, what should be named to b?</p>
</blockquote>
<p>i, too, don't think it is either.  I believe it is just a function defined inside of a class body</p>
<p>I was confused about defining a function inside of a class and asked a similar question <a href="https://stackoverflow.com/questions/11600716/assigning-class-variable-dynamic-value-from-inside-a-classs">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>b</code> is a static method. Just add the <code>@staticmethod</code> decorator.</p>
<pre><code>class a:
    @staticmethod
    def b():
        print("hello")
</code></pre>
<p>Also, you shouldn't really do this, but if you wanted to call <code>b()</code> without changing the class, you could do <code>a().b.__func__()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just in case this isn't obvious:</p>
<pre><code>class a:
   def b(self):   # a normal "instance method" -- note "self"
       print("hello")

aa = a()   #  an instance

aa.b()     # call with no parameters
</code></pre>
<p>Here, <code>b</code> has no parameters because <code>self</code> is implied when called on an instance of the class.</p>
</div>
<span class="comment-copy">Why should a.b() work? Do you know what a class <i>instance</i> is? Otherwise learn about static methods.</span>
<span class="comment-copy">What's the connection to Ruby?</span>
<span class="comment-copy">No connection to Ruby, OP is confused.</span>
<span class="comment-copy">I almost feel like downvoting for <code>a().b.__func__()</code> please don't suggest stuff like this.</span>
<span class="comment-copy">I'm not suggesting it. I'm just explaining that it's possible. In fact, I explicitly said you <i>shouldn't</i> do it.</span>
