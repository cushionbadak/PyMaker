<div class="post-text" itemprop="text">
<p>I have the following list</p>
<pre><code>a = [[a1, b1, c1, [d1, e1, f1],
     [a2, b2, c2, [d2, e2, f2],
     [a3, b3, c3, [d3, e3, f3]]
</code></pre>
<p>How can I make this into a list of named tuples such that</p>
<pre><code>a[0].val1
&gt;&gt;&gt; a1
a[1].val2
&gt;&gt;&gt; b2
a[0].box
&gt;&gt;&gt; [d1, e1, f1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code> class factory</a> to create a named tuple class:</p>
<pre><code>mynamedtuple = collections.namedtuple('mynamedtuple', ('val1', 'val2', 'val3', 'box'))

somenamedtuple = mynamedtuple('a1', 'a2', 'a3', ['d1', 'e1', 'f1'])
somenamedtuple.box  # returns ['d1', 'e1', 'f1']
</code></pre>
<p>You can convert your existing list using a list comprehension:</p>
<pre><code>a = [mynamedtuple(*el) for el in a]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="http://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow">namedtuple</a> availalbe in collection module.</p>
<p>You can use and create the namedtuple which will be ref by name instead of index of tuple.</p>
</div>
<span class="comment-copy">So I would have to go through each item in my list? How do I flatten each "row" in the list, such that the result would be of the format you describe after <code>mynamedtuple</code>?</span>
<span class="comment-copy">@lejon: I've added an example piece of code that converts your existing lists into named tuples.</span>
<span class="comment-copy">As a side note; what does the <code>*</code> do?</span>
<span class="comment-copy">@lejon: Applies each element in <code>el</code> as a separate parameter when calling <code>mynamedtuple()</code>. if <code>el</code> is <code>[1, 2, 3]</code>, calling <code>mynamedtuple(*el)</code> is like calling it as <code>mynamedtuple(1, 2, 3)</code>.</span>
<span class="comment-copy">@NathanBasanese: named tuples work just like regular tuples: they are immutable. If one of the values referenced is mutable, then yes, you can still mutate that value. Everything in Python is a reference, nothing is ever stored by value.</span>
