<div class="post-text" itemprop="text">
<p>For example, I got a tuple</p>
<pre><code>a = ('chicken', 1, 'lemon', 'watermelon', 'camel')
</code></pre>
<p>I want to build a new tuple <code>b</code> from <code>a</code> but change a little bit</p>
<pre><code>d = {0: 'apple', 1: 'banana', 2: 'lemon', 3: 'watermelon'}

b = (a[0], d[a[1]], a[2], a[3], a[4])
</code></pre>
<p>another way to do it </p>
<pre><code>b = list(a)
b[1] = d[b[1]]
b = tuple(b)
</code></pre>
<p>All of them work, but look silly.</p>
<p>Is there another elegant way to do this job? or are there some skills to modify the original tuple?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit inefficient in comparison to yours because it does a check on every item, but the general idea is that it looks at each item in your <code>a</code>, checks for a matching key in <code>d</code> and if it finds one, returns the value at that key. If no key is found, the original item is returned:</p>
<pre><code>In [1]: a = ('chicken',1,'lemon','watermelon','camel')

In [2]: d = {0:'apple',1:'banana',2:'lemon',3:'watermelon'}

In [3]: b = tuple(d.get(x, x) for x in a)

In [4]: b
Out[4]: ('chicken', 'banana', 'lemon', 'watermelon', 'camel')

In [5]: type(b)
Out[5]: &lt;type 'tuple'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what you mean by "elegant", but if you want something more generic that just replaces elements in the 'a' tuple that have a key in 'd', you can use a <a href="http://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a> and do something like:</p>
<pre><code>&gt;&gt;&gt; a
('chicken', 1, 'lemon', 'watermelon', 'camel')
&gt;&gt;&gt; d
{0: 'apple', 1: 'banana', 2: 'lemon', 3: 'watermelon'}
&gt;&gt;&gt; tuple(d[x] if x in d else x for x in a)
('chicken', 'banana', 'lemon', 'watermelon', 'camel')
</code></pre>
<p>It constructs a new tuple, since tuples are immutable.</p>
</div>
<span class="comment-copy">If you intend to change the value often, try to use a list/dict, as tuples are immutable objects.</span>
