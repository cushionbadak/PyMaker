<div class="post-text" itemprop="text">
<p>This should be a very common question for developers who used "setup.py" to build installation packages and it should be asked before but I couldn't find the proper answer anywhere.</p>
<p>In setup.py</p>
<pre><code>from distutils.core import setup
setup(
    ....,
    ....,
    data_files=[('MyApp/CBV', ['myapp/data/CBV/training.cbv', 'myapp/data/CBV/test.cbv'])],
    ....,
    ....,
    )
</code></pre>
<p>Result of sudo python setup.py install</p>
<pre><code>running install
running build
running build_py
running build_scripts
running install_lib
running install_scripts
changing mode of /usr/local/bin/MyApp_trainer to 755
changing mode of /usr/local/bin/MyApp_reference_updater to 755
changing mode of /usr/local/bin/MyApp_predictor to 755
changing mode of /usr/local/bin/reference_updater to 755
running install_data
creating /usr/local/MyApp/CBV
copying MyApp/data/CBV/training.cbv -&gt; /usr/local/MyApp/CBV
copying MyApp/data/CBV/test.cbv -&gt; /usr/local/MyApp/CBV
running install_egg_info
Removing /usr/local/lib/python2.7/dist-packages/MyApp-0.1.0.egg-info
Writing /usr/local/lib/python2.7/dist-packages/MyApp-0.1.0.egg-info
</code></pre>
<p>From the observation using the result above, "/usr/local" is the "data_files" root directory. Other than hardcoding, are there any Python functions that can give me this "data_files" root directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, when installing a package as root, <em>relative</em> directory names in the <code>data_files</code> list are are resolved against either the value of <a href="http://docs.python.org/3/library/sys.html#sys.prefix" rel="nofollow noreferrer"><code>sys.prefix</code></a> (for pure-python libraries) or <a href="http://docs.python.org/3/library/sys.html#sys.exec_prefix" rel="nofollow noreferrer"><code>sys.exec_prefix</code></a> (for libraries with a compiled extension), so you can retrieve your files based on that. Qouting from the <a href="https://docs.python.org/3/distutils/setupscript.html#installing-additional-files" rel="nofollow noreferrer"><code>distutils</code> documentation</a>:</p>
<blockquote>
<p>If <em>directory</em> is a relative path, it is interpreted relative to the installation prefix (Python’s <code>sys.prefix</code> for pure-Python packages, <code>sys.exec_prefix</code> for packages that contain extension modules).</p>
</blockquote>
<p>So for your example, you'll find your files in <code>os.path.join(sys.prefix, 'MyApp', 'CBV')</code>.</p>
<p>However, you would be better off using the <code>setuptools</code> extension to <code>distutils</code> and use the <a href="https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api" rel="nofollow noreferrer"><code>pkg_resources</code> module Resource API</a> to load data files. It comes with <code>setuptools</code> for this very purpose. You do want your data files included in the package for that to work best. That means you would <em>not</em> use <code>data_files</code> but instead either set <code>include_package_files=True</code> or list file patterns with <code>package_files</code>, see <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files" rel="nofollow noreferrer"><em>Including data files</em></a> in the setuptools documentation.</p>
<p>You can then load such resource files straight from the package into a string with <code>resource_string()</code> for example:</p>
<pre><code>from pkg_resources import resource_string

foo_config = resource_string(__name__, 'foo.conf')
</code></pre>
</div>
<span class="comment-copy">Currently, I'm using "setup" from "distutils". It may take a while to test if your solution can help me :)</span>
<span class="comment-copy">@JessadaThutkawkorapin: Switching to <code>setuptools</code> is easy enough. :-) It's backwards compatible to <code>distutils</code>, and definitely recommendable!</span>
<span class="comment-copy">While I was looking for the difference between disutils and setuptools, I found <a href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-and-setuptools" title="differences between distribute distutils and setuptools">stackoverflow.com/questions/6344076/…</a>. From what I roughly read, it seems like the suggestion was going toward disutils2. Do you still recommend setuptools?</span>
<span class="comment-copy">I still recommend <code>distribute</code> (the <code>setuptools</code> fork). <code>distutils2</code> has yet to materialize. <code>distribute</code> is the current defacto standard for python package distribution.</span>
<span class="comment-copy">Done !!!, Thx for your solution</span>
