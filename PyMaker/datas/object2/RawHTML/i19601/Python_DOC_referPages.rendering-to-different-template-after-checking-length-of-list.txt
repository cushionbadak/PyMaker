<div class="post-text" itemprop="text">
<p>Pretty much a newbie when it comes to both Django and Python. Would appreciate some suggestions here. I did search for similar questions, but couldn't find one that solved my problem.</p>
<p>This is a view that I have written. The intended behaviour is to check the length of a list (districts list), and render to one template if there is only one object in that list, and to another if there are more than one. If there are no objects in the list, 404 is automatically raised.</p>
<pre><code>    @never_cache
def district_list(request, county_slug):
    districts_list = get_list_or_404(NeigbourhoodPostcodeDistrict, county__slug=county_slug)
    if districts_list.count() == 1:
        context = {
        'districts_list': districts_list,
        }
        return render_to_response('neighbourhood/neighbourhood.html',context,context_instance=RequestContext(request))
    else:
        context = {
            'districts_list': districts_list,
        }
        return render_to_response('neighbourhood/district-list.html',context,context_instance=RequestContext(request))
</code></pre>
<p>Any help would be much appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="http://docs.python.org/3/library/functions.html#len" rel="nofollow">the <code>len()</code> builtin</a>.</p>
<p>E.g:</p>
<pre><code>if len(districts_list) == 1:
    ...
</code></pre>
<p>The <a href="http://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow"><code>seq.count()</code></a> method counts the number of times an individual element occurs in the sequence, and requires one argument (the element to count).</p>
</div>
<span class="comment-copy">When reporting a problem, it helps to explain what went wrong.  Was an error raised, and if so exactly what was the error message?  (Copy-paste the full stack trace).  Or did it just do something you didn't expect?  (I think Lattyware has probably identified the fix you need, but it would be helpful to give this extra detail next time).</span>
<span class="comment-copy">Aha, yes, that makes sense. I'll remember this in the future.</span>
<span class="comment-copy">... And <code>list.count</code> is called as:  <code>myList.count(what)</code> (not <code>mylist.count()</code>)</span>
<span class="comment-copy">@mgilson Edited for clarity, among other things.</span>
<span class="comment-copy">Ah, that makes sense. The reason I was using count was because of this paragraph in the docs:   A count() call performs a SELECT COUNT(*) behind the scenes, so you should always use count() rather than loading all of the record into Python objects and calling len() on the result (unless you need to load the objects into memory anyway, in which case len() will be faster).</span>
<span class="comment-copy">@Ergusto Yes, ideally you should be doing this all using the model's <code>count()</code> method. At the moment, you are loading the rows in <code>get_list_or_404()</code>, then counting them, the docs are suggesting using count before doing this for speed - as you want to load them either way, there is no harm in loading first and calling <code>len()</code>.</span>
