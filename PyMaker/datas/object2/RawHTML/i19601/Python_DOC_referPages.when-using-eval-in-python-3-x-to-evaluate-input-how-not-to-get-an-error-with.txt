<div class="post-text" itemprop="text">
<p>I am learning Python 3.x. I want to write a function which evaluates inputted values and prints the result. If the string originally is inputted, the function should just print the string without evaluation.</p>
<pre><code>def eval_input():
    line=input("Something:")
    print(eval(line))

eval_input()
</code></pre>
<p>It works fine with integers and mathematical operations.
But when a string gets inputted, like "<code>fasdfasd</code>", it gets an error: "<code>name 'fasdfasd' is not defined</code>".
I understand why this error happens. Because "<code>fasdfasd</code>" is seen as a variable.
But I don't understand how to check whether a string was originally inputted?</p>
<p>How do I filler strings from the input before evaluating it? </p>
</div>
<div class="post-text" itemprop="text">
<p>First: It's rarely a good idea to rely on  <code>eval()</code>. </p>
<p>You could simply catch the <code>NameError</code> (and <code>SyntaxError</code> as well) and assume the input was a string:</p>
<pre><code>try:
    print(eval(line))
except (NameError, SyntaxError):
    print(line)
</code></pre>
<p>There may be other exceptions raised here, but next to avoid using <code>eval()</code> I also want to caution against using a blanket <code>except:</code> or <code>except Exception:</code> handler, those are generally also not good ideas.</p>
<p>A better technique would be to use <a href="http://docs.python.org/3/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval</code></a> instead:</p>
<pre><code>try:
    print(ast.literal_eval(line))
except ValueError:
    print(line)
</code></pre>
<p><code>literal_eval</code> only accept python literal values (so <code>'string'</code> or <code>123</code> or <code>('some', 'more', [1, 2, 4.5], 'complex structure')</code>) and will throw a <code>ValueError</code> if it cannot parse that input.</p>
<p>It does <em>not</em> suffer from the security problems that <code>eval()</code> suffers from, nor do you need to catch as many exceptions, only <code>ValueError</code> needs to be handled.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are taking user input, presumable you know what you are asking for and what type it should be. You need to write a verifier. You can do this textually with regular expressions, or more basically with "casts", or conversion functions.</p>
<p>For example, if you are looking for an integer number, use <code>int</code> to convert it, and check for errors.</p>
<pre><code>&gt;&gt;&gt; int("22")
22
&gt;&gt;&gt; int("asdf")
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'asdf'
&gt;&gt;&gt; 
</code></pre>
<p>Tell the user to enter a number. The <code>int</code> function will raise ValueError if it can't parse it, and only that , so you can easily tell that you got something other than a number.</p>
<pre><code>&gt;&gt;&gt; try: 
...     int("asdf")
... except ValueError:
...     print("Enter a number please")
...     
</code></pre>
<p>You can do the same with <code>float</code>. What you get from <code>input</code> is always a <code>str</code>, so if that's what you want just use that. </p>
</div>
<div class="post-text" itemprop="text">
<p>Okay, simply as an answer I'm going to put this</p>
<pre><code>try:
    print(eval(line))
except Exception as e:
    print "Something went wrong, namely: %s" % e
</code></pre>
<p>But you really don't want to use eval, its evil, nasty, leads to bugs and security risks, and is hard to develop, debug and use properly</p>
</div>
<span class="comment-copy">Why use eval :(</span>
<span class="comment-copy">As others have said, <code>eval()</code> is not a good idea here. Instead, parse the data manually.</span>
<span class="comment-copy">Surely this will still explode for <code>something like this</code> as a <code>Syntax Error</code> ?</span>
<span class="comment-copy">@JakobBowyer: there are probably more, but I am not going to advocate using a blanket except if I can avoid it. :-)</span>
<span class="comment-copy">Agreed but at least catching exceptions in respect to eval will be pretty broad</span>
<span class="comment-copy">@JakobBowyer: two bad ideas together, one precipitating the other. <i>humbug</i>.</span>
<span class="comment-copy">+1 for that then :)</span>
