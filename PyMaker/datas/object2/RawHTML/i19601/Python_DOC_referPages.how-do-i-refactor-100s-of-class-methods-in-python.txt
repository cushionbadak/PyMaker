<div class="post-text" itemprop="text">
<p>I am working on some legacy code (created by someone in love with spaghetti code) that has over 150 getters and over 150 setters. The getters look like this:</p>
<pre><code>def GetLoadFee(self):
    r_str = ""
    if len(self._LoadFee) &gt; 20:
        r_str = self._LoadFee[:20]
    else:
        r_str = self._LoadFee.strip()
    return r_str.strip()

def GetCurrency(self):
    r_str = ""
    if len(self._Currency) &gt; 3:
        r_str = self._Currency[:3]
    else:
        r_str = self._Currency.strip()
    return r_str.strip()
</code></pre>
<p>I would love to take the contents of each of these Getters and put them into a decorator /closure or some other method to make this code easier to maintain. The Setters are all one liners, so they're not as important. But they are basically all the same too. Any ideas to make this less painful?</p>
<p>NOTE: I still need the original Getter names as they are used in other programs as this nasty script is used in lots of other legacy code.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def make_generic_getter(name, maxlen):
    def getter(self):
        value = getattr(self, name)
        r_str = ""
        if len(value) &gt; maxlen:
            r_str = value[:maxlen]
        else:
            r_str = value.strip()
        return r_str.strip()
    return getter
</code></pre>
<p>Now, you can do this:</p>
<pre><code>class Foo(object):
    def __init__(self):
        self._Bar = 'abc'
        self._Baz = 'def'
    GetBar = make_generic_getter('_Bar', 5)
    GetBaz = make_generic_getter('_Baz', 2)
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.GetBar()
'abc'
&gt;&gt;&gt; f.GetBaz()
'de'
</code></pre>
<p>Clearly, there's also a lot of repetitive and unnecessary stuff in the original function. (And it would be much better to use PEP8-style names for your properties.) But obviously it's much easier to refactor first, then improve, than the other way around. (In other words, start here, but don't stop here.)</p>
<p>From the comments:</p>
<blockquote>
<p>How does the method maker get the "self" reference?</p>
</blockquote>
<p>The method maker doesn't actually get the <code>self</code> reference. There is no <code>self</code> reference to get at the time the method maker is being called. But there also is no <code>self</code> reference to get for a normal method at the time the class is being defined. In either case, you're just defining a function that takes <code>self</code> as its first parameter, and it somehow magically gets the appropriate <code>self</code> when you call it.</p>
<p>To really understand how this <em>actually</em> works, you need to know about descriptors. See <a href="http://docs.python.org/2/reference/datamodel.html#descriptors" rel="nofollow">Implementing Descriptors</a> and Invoking Descriptors (or the <a href="http://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow">3.3</a> version), read it over a few times, look at how the <code>@property</code> decorator is implemented, play around in the interactive interpreter, give up, go to sleep, and try again tomorrow, and it should all click. But it's easier if you learn the magic version first, so let's do that, using a simpler example:</p>
<pre><code>&gt;&gt;&gt; def func(self): pass
&gt;&gt;&gt; class C(object):
...     def meth(self): pass
...     fake1 = func
&gt;&gt;&gt; C.fake2 = func
&gt;&gt;&gt; func, C.meth, C.fake1, C.fake2
(&lt;function __main__.func&gt;, &lt;unbound method C.meth&gt;, &lt;unbound method C.func&gt;, &lt;unbound method C.func&gt;)
</code></pre>
<p>An unbound method is just a thing with an <code>im_class</code> holding its class, an <code>im_func</code> holding a normal function, and an <code>im_self</code> holding <code>None</code>. And when you do <code>fake1 = func</code> in the class definition, or <code>C.fake2 = func</code> after the fact, you don't actually end up with <code>func</code> itself as the value of <code>fake1</code> or <code>fake2</code>, but with an unbound method wrapped around <code>func</code>, its <code>im_class</code> pointing at <code>C</code>.</p>
<pre><code>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.meth, c.fake1
(&lt;bound method C.meth of &lt;__main__.C object at 0x111ebb0d0&gt;&gt;, &lt;bound method C.meth of &lt;__main__.C object at 0x111ebb0d0&gt;&gt;)
</code></pre>
<p>When you take an instance of a class, all of its unbound methods become bound methods. If you look at the bound methods' attributes, they're the same as the unbound methods, except that <code>im_self</code> is <code>c</code> instead of <code>None</code>. And when you call <code>c.fake1()</code>, that's how it worksâ€”Python sees that <code>c.fake1</code> is a bound method, so, in effect, it calls <code>c.fake1.im_func(c.fake1.im_self)</code>. And that's how <code>fake</code> gets its self parameter.</p>
<p>(This all becomes simpler in Python 3, because there's no such thing as unbound methods anymore, but I assume you care more about Python 2 given that you're dealing with a huge mess of legacy code.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't necessarily need to create getter/setter methods at class-creation time. You can also create callables as-needed:</p>
<pre><code>class MyClass(object):
    # get/set properties for this class: {'Name':length}
    __properties = {'LoadFee':20, 'Currency':3}

    def __init__(self):
        self._Currency = '01 34'
        self._LoadFee = 'lorem ipsum dolor sit amet consecuti'

    def __getattr__(self, name):
        basename = name[3:]
        attrname = '_'+basename
        if basename in self.__properties:
            if name.startswith('Get'):
                return lambda : getattr(self, attrname)[:self.__properties[basename]].strip()
            elif name.startswith('Set'):
                return lambda value: setattr(self, attrname, value)
        raise AttributeError(name)

m = MyClass()

print m.GetCurrency()
print m.GetLoadFee()
</code></pre>
<p>Although this approach is easy to understand and doesn't use any metaprogramming voodoo, it's slow and defeats introspection.</p>
<p>You can speed this up by "reifying" methods as you call them, i.e., attaching an <code>instancemethod</code> to the class as attributes on instances of the class are accessed.</p>
<pre><code># MethodType is not actually necessary because
# everything it does can be done with normal Python
# but it will make our dynamic methods look as "normal"
# and not-dynamic as possible to introspection
from types import MethodType

class MyClass(object):
    # get/set properties for this class: {'Name':length}
    __properties = {'LoadFee':20, 'Currency':3}

    def __init__(self, **args):
        props = self.__properties
        emptystr = ''
        for k in props:
            setattr(self, '_'+k, args.get(k, emptystr))

    def __getattr__(self, name):
        print '__getattr__(%s)' % name
        # we can cache accesses by "reifying" our getters/setters as they are accessed
        cls = self.__class__
        basename = name[3:]
        attrname = '_'+basename
        # nested lambdas are just for delayed evaluation
        # they cache property size lookup--assumes __properties is class-constant!
        def getsize():
            return cls.__properties[basename]
        methodfactories = {
            'Get': lambda size: lambda self: getattr(self, attrname)[:size].strip(),
            'Set': lambda size: lambda self, value: setattr(self, attrname, value),
        }
        try:
            print '  creating', name
            callable = methodfactories[name[:3]](getsize())
        except (KeyError, AttributeError) as e:
            raise AttributeError("'{}' object has no attribute '{}'".format(cls.__name__, name))
        callable.__name__ = name #cosmetics
        unboundmethod = MethodType(callable, None, cls)
        setattr(cls, name, unboundmethod) # add unbound method to the class
        # magically get bound method on the instance!
        # this works because MethodType creates a descriptor that
        # returns a bound callable in an instance context
        # and an unbound one in a class context
        return getattr(self, name) # not an infinite loop!
</code></pre>
<p>If you then run the following code:</p>
<pre><code>m = MyClass(Currency='01', LoadFee='lorem ipsum dolor sit')
n = MyClass(Currency='02', LoadFee='amet consecuti')
try:
    # AttributeError because it hasn't been used by an instance
    MyClass.GetCurrency 
except AttributeError, e:
    print ' 7:', e
print ' 8:', m.GetCurrency()
print ' 9:', MyClass.GetCurrency
print '10:', m.GetCurrency
print '11:', n.GetCurrency
print '12:', m.GetCurrency is n.GetCurrency
print '13:', n.GetCurrency()
print '14:', m.GetLoadFee()
print '15:', m.__dict__ # no per-instance callable!
</code></pre>
<p>You will get the following result:</p>
<pre><code> 7: type object 'MyClass' has no attribute 'GetCurrency'
 8: __getattr__(GetCurrency)
  creating GetCurrency
01
 9: &lt;unbound method MyClass.GetCurrency&gt;
10: &lt;bound method MyClass.GetCurrency of &lt;__main__.MyClass object at 0x106f87b90&gt;&gt;
11: &lt;bound method MyClass.GetCurrency of &lt;__main__.MyClass object at 0x106f87f10&gt;&gt;
12: False
13: 02
14: __getattr__(GetLoadFee)
  creating GetLoadFee
lorem ipsum dolor si
15: {'_Currency': '01', '_LoadFee': 'lorem ipsum dolor sit'}
</code></pre>
<p>Notice that <strong>getattr</strong> is only called the <em>first</em> time <em>any</em> instance accesses a special property. After that a bound method is returned from the <code>instancemethod</code> we dynamically created and attached to the instance's class. After the first access of an attribute, the classes and instances will be nearly indistinguishable from a method we created the "normal" way and will have exactly the same runtime speed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try something like this:</p>
<pre><code>def getter(attr, length):
    def wrapper(self):
        value = getattr(self, attr)
        return value[:length].strip()
    return wrapper

GetCurrency = getter("_Currency", 3)
</code></pre>
<p>Because you can't overshoot the end of a string when slicing, the length test is no longer necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>If there are literally hunderds of getters that share the same code; you could use metaclass to automate the getters creations:</p>
<pre><code>def length_limiting_getter(name, maxlen):
    g = lambda self: getattr(self, "_"+name)[:maxlen].strip()
    g.__name__ = name
    return g

def add_attrs(attr_maxlens):
    def meta(class_name, base_classes, attrs):
        attrs.update((name, length_limiting_getter(name, maxlen))
                     for name, maxlen in attr_maxlens.items())
        return type(class_name, base_classes, attrs)
    return meta

Meta = add_attrs({n: maxlen for n, maxlen in zip("a b c".split(),
                                                 [1, 10, 50])})
class ClassWithManyGetters(object): # On Python 3 use: `(metaclass=Meta)` syntax
    __metaclass__ = Meta
    def __init__(self):
        for name in "abc":
            setattr(self, "_" + name, "X"*20)

c = ClassWithManyGetters()
print(c.a())
print(c.b())
print(c.c())
</code></pre>
<h3>Output</h3>
<pre><code>X
XXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX
</code></pre>
<p>The output shows that the length limiting feature works.</p>
<p>See also:</p>
<p><a href="https://stackoverflow.com/questions/11921320/can-anyone-help-condense-this-python-code">Can anyone help condense this Python code?</a></p>
<p><a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">What is a metaclass in Python?</a></p>
</div>
<span class="comment-copy">Do they all look like this?</span>
<span class="comment-copy">All of the getters do, yes</span>
<span class="comment-copy">Do you actually want to edit the legacy code or do you want to patch the existing classes on the fly?</span>
<span class="comment-copy">Sadly yes. I had to add 17 new getters and setters to it and there's a possibility that we'll have to add more, so it's time to refactor it.</span>
<span class="comment-copy">This looks pretty cool. I'll test it out on Monday. Thanks!</span>
<span class="comment-copy">How does the method maker get the "self" reference? It works, but I don't understand that part of it.</span>
<span class="comment-copy">@MikeDriscoll: It's hard to explainâ€¦ but I'll try to edit the answer.</span>
<span class="comment-copy">Thanks! I wish I could upvote this answer twice!</span>
<span class="comment-copy">@abarnert, not trying to be hard (just want to make sure I understand), isn't output of f.GetBaz() should be 'de' (and not 'def' as written)?</span>
<span class="comment-copy">+1: For almost totally dynamic, but likely slower than actually creating them once in the class definition (or via a decorator).</span>
<span class="comment-copy">@martineau: It probably is slower, but I'd be willing to bet better than even money that it won't matter for the OP's code.</span>
<span class="comment-copy">@abarnert: Don't know if that's such a safe assumption to make about something that has "over 150 getters and over 150 setters" -- and, relatively speaking, based on the amount of code in the <code>__getattr__()</code> method, this approach has got to be much slower than regular class-creation-time properties. Dynamism is cool, but not always necessary or worth the overhead.</span>
<span class="comment-copy">@martineau: I wouldn't give 1000:1 odds or anything, but better than even money? Definitely. If the cost of getting and setting were at all important, they wouldn't have implemented things this way in the first place, or at least they would have cached the truncated-and-stripped version, or at least they wouldn't <code>strip</code> each string twice in a rowâ€¦</span>
<span class="comment-copy">@martineau I added a technique that creates instancemethods dynamically. It should run at exactly the same speed as a "normal" method after first access.</span>
