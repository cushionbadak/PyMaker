<div class="post-text" itemprop="text">
<p>Questions arise when I type in these expressions to Python 3.3.0</p>
<pre><code>-10 // 3  # -4
-10 % 3   #  2
10 // -3  # -4
10 % -3   # -2
-10 // -3 #  3
</code></pre>
<p>It appears as though it takes the approximate floating point (-3.33)? and rounds down either way in integer division but in the modulo operation it does something totally different. It seems like it returns the remainder +/-1 and only switches the sign depending on where the negative operand is. I am utterly confused, even after looking over other answers on this site! I hope someone can clearly explain this too me! The book says hint: recall this magic formula a = (a//b)(b)+(a%b) but that doesn't seem to clear the water for me at all. </p>
<p>-Thanks in advance!</p>
<p><strong>Edit:</strong> Those are just my personal assessments of what happens (above), I know, I'm completely off! </p>
</div>
<div class="post-text" itemprop="text">
<p>The integer division there is just taking the floor of the number obtained at the end.</p>
<pre><code>10/3  -&gt; floor(3.33)  -&gt;  3
-10/3 -&gt; floor(-3.33) -&gt; -4
</code></pre>
<p><strong><a href="http://python-history.blogspot.in/2010/08/why-pythons-integer-division-floors.html" rel="nofollow">(Why it floors)</a></strong></p>
<hr/>
<p>The modulo operation on the other hand is following the <strong><a href="http://en.wikipedia.org/wiki/Modulo_operation" rel="nofollow">mathematical definition</a></strong>.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Magic formula: <code>a = (a // b) * b + (a % b)</code></li>
<li><code>a: -10</code></li>
<li><code>b: 3</code></li>
<li><code>a // b: -4</code></li>
<li><p><code>a % b: 2</code></p>
<p>Substitute in magic formula: <code>-10 = -4 * 3 + 2 = -12 + 2 = -10</code></p></li>
<li><p><code>a: 10</code></p></li>
<li><code>b: -3</code></li>
<li><code>a // b:  -4</code></li>
<li><p><code>a % b: -2</code></p>
<p>In magic formula: <code>10 = -4 * -3 - 2 = 12 - 2 = 10</code></p></li>
</ul>
<p>So the magic formula seems to be correct.</p>
<p>If you define <code>a // b</code> as <code>floor(a / b)</code> (which it is), <code>a % b</code> should be <code>a - floor(a / b) * b</code>. Let's see:</p>
<ul>
<li><code>a: -10</code></li>
<li><code>b: 3</code></li>
<li><code>a % b = a - floor(a / b) * b = -10 - floor(-3.33) * 3 = -10 + 4 * 3 = 2</code></li>
</ul>
<p>Â </p>
<p>The fact that <code>a // b</code> is always floored is pretty easy to remember (please read Cthulhu's first link, it's an explanation by the creator of Python). For negative <code>a</code> in <code>a % b</code>.. try to imagine a table of numbers that starts at <code>0</code> and has <code>b</code> columns:</p>
<pre><code>b = 3:

0  1  2
3  4  5
6  7  8
9 10 11
...
</code></pre>
<p>If <code>a</code> is the number in a cell, <code>a % b</code> would be the column number:</p>
<pre><code>a         a % b
_______________
0  1  2   0 1 2
3  4  5   0 1 2
6  7  8   0 1 2
9 10 11   0 1 2
</code></pre>
<p>Now extend the table back in the negatives:</p>
<pre><code>   a          a % b
 __________________
-12 -11 -10   0 1 2
 -9  -8  -7   0 1 2
 -6  -5  -4   0 1 2
 -3  -2  -1   0 1 2
  0   1   2   0 1 2
  3   4   5   0 1 2
  6   7   8   0 1 2
  9  10  11   0 1 2
</code></pre>
<p><code>-10 % 3</code> would be <code>2</code>. Negative <code>a</code> in <code>a % b</code> would come up in these sorts of context. <code>a % b</code> with negative <code>b</code> doesn't come up much.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/functions.html#divmod" rel="nofollow">A simple rule:</a> for <code>a % b = c</code>, if <code>c</code> is not zero, then should have the same sign as <code>b</code>.</p>
<p>And apply the magic formula:</p>
<p><code>10 % -3 = -2</code> =&gt; <code>10 // -3 = (10 - (-2)) / (-3) = -4</code></p>
<p><code>-10 % 3 = 2</code> =&gt; <code>-10 // 3 = (-10 - 2) / 3 = -4</code></p>
<p><code>-10 % -3 = -1</code> =&gt; <code>-10 // -3 = (-10 - (-1)) / (-3) = 3</code></p>
</div>
<div class="post-text" itemprop="text">
<p>OK, so I did some digging and I think that the problem isn't Python, but rather the Modulo function. I'm basing this answer off of <a href="http://mathforum.org/library/drmath/view/52343.html" rel="nofollow">http://mathforum.org/library/drmath/view/52343.html</a></p>
<p>10 % 3 Uses the highest multiple of 3 that is LESS THAN 10. In this case, 9. 10 - 9 = 1</p>
<p>-10 % 3 does the same thing. It's still looking for a multiple of 3 that is LESS THAN -10. In this case, -12. (-10) - (-12) = 2</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3883004/negative-numbers-in-python">negative numbers in python</a></span>
<span class="comment-copy">Thanks for your response!</span>
<span class="comment-copy">Thanks! @Pavel do you have an experience when this would come into play? What would you recommend I try and remember for when these expressions arise? Always plug them into the magic formula?</span>
<span class="comment-copy">Extended my answer.</span>
<span class="comment-copy">okay, thanks for extending that for me! Unfortunately it didn't seem to clear it up for me :( I haven't had a math class since my second year in college so I apologize for my stupidity. It is unwise to just add one or subtract one to whatever the normal remainder would be? (depending of course on where the negative operand is in the equation)</span>
<span class="comment-copy">Quite unwise, e.g.: <code>50 % 13 = 11</code>, <code>-50 % 13 = 2</code> (you can just flip the sign of 11 or 2 in case of a -13 though). You have to mentally split the number line in <code>b</code>-sized blocks. Then <code>a % b</code> is the position of <code>a</code> in a block. Look at graphs on wikipedia. Ours is the floored division.</span>
<span class="comment-copy">okay, thanks for the heads up. I'll be looking into this more forsure</span>
<span class="comment-copy">Thanks! So whenever addressing these problems always plug them in to the formula? This is still such a puzzling to me</span>
<span class="comment-copy">@tlands_: Yes, See:<a href="http://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer"><code>divmod(x, y) == (x//y, x%y)</code></a></span>
