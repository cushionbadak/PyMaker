<div class="post-text" itemprop="text">
<p>Sorry, another python newbie question. I have a string:</p>
<pre><code>my_string = "&lt;p&gt;this is some \n fun&lt;/p&gt;And this is \n some more fun!"
</code></pre>
<p>I would like:</p>
<pre><code>my_string = "&lt;p&gt;this is some fun&lt;/p&gt;And this is \n some more fun!"
</code></pre>
<p>In other words, how do I get rid of '\n' <b>only</b> if it occurs inside an html tag?</p>
<p>I have:</p>
<pre><code>my_string = re.sub('&lt;(.*?)&gt;(.*?)\n(.*?)&lt;/(.*?)&gt;', 'replace with what???', my_string)
</code></pre>
<p>Which obviously won't work, but I'm stuck.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try using BeautifulSoup (<code>bs4</code>), this will allow you to parse XML tags and pages.</p>
<pre><code>&gt;&gt;&gt; import bs4
&gt;&gt;&gt; my_string = "&lt;p&gt;this is some \n fun&lt;/p&gt;And this is \n some more fun!"
&gt;&gt;&gt; soup = bs4.BeautifulSoup(my_string)
&gt;&gt;&gt; p = soup.p.contents[0].replace('\n ','')
&gt;&gt;&gt; print p
</code></pre>
<p>This will pull out the new line in the p tag.  If the content has more than one tag, <code>None</code> can be used as well as a for loop, then gathering the children (using the <code>tag.child</code> property).</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; tags = soup.find_all(None)
&gt;&gt;&gt; for tag in tags:
...    if tag.child is None:
...        tag.child.contents[0].replace('\n ', '')
...    else:
...        tag.contents[0].replace('\n ', '')
</code></pre>
<p>Though, this might not work exactly the way you want it (as web pages can vary), this code can be reproduced for your needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are a bad match for HTML.  Don't do it.  See <a href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags">RegEx match open tags except XHTML self-contained tags</a>.</p>
<p>Instead, use an HTML parser.  Python ships with <a href="http://docs.python.org/3/library/html.parser.html" rel="nofollow noreferrer">html.parser</a>, or you can use <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow noreferrer">Beautiful Soup</a> or <a href="http://code.google.com/p/html5lib/" rel="nofollow noreferrer">html5lib</a>.  All you have to do then is walk the tree and remove line breaks.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags">RegEx match open tags except XHTML self-contained tags</a></span>
<span class="comment-copy">don't try and parse XML or HTML with regex it won't work, use a dedicated parser then you can regex out the <code>\n</code> from the content and write it back out.</span>
<span class="comment-copy">Python regexes are not really powerful enough for this, unless you're willing to cut some corners. For example, if you'd be content with "remove a linebreak if the next HTML tag is a closing tag, and don't care about comments", then you might have a chance with regex.</span>
<span class="comment-copy">@JoachimIsaksson: I don't know how you concluded that this is a duplicate of this question.  It's not, because this question isn't explicitly about regular expressions, and it also expresses a specific problem about HTML processing that the asker wants addressed.  Please don't mark duplicates unless the question really is a duplicate.</span>
<span class="comment-copy">@JoachimIsaksson: maybe regex is not the way to go but your link doesn't answer my question: how to remove linebreaks inside HTML tags. I think you and some of the others got sidetracked by focusing not on the original question</span>
<span class="comment-copy">beautifulsoup is really what you want to do, especially if it's for arbitrary HTML documents (especially of arbitrary quality)</span>
<span class="comment-copy">@JonasWielicki: Well, it depends on where the documents are coming from.  I personally use html5lib when I'm using Python for authoring web content â€” the semantics of errors (and abbreviations) in HTML5 are more well-known than those in Beautiful Soup.</span>
