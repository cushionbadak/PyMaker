<div class="post-text" itemprop="text">
<p>I'm looking for a quick way to auto produce REST API docs from a Flask REST API I've written. Does anyone know of tools that can do this and how I would markup the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend you <a href="http://sphinx-doc.org/" rel="nofollow noreferrer">Sphinx</a>, you add your documentation as <code>__doc__</code> and the <code>autodoc</code> module of Sphinx will generate the docs for you (<a href="http://docs.python.org/3/" rel="nofollow noreferrer">docs.python.org</a> also uses Sphinx). The markup is <a href="http://docutils.sourceforge.net/docs/user/rst/quickref.html" rel="nofollow noreferrer">reStructuredText</a>, similiar to Markdown (if you prefer Markdown, you can use <a href="https://pdoc3.github.io/pdoc" rel="nofollow noreferrer">pdoc</a>).</p>
<p>e.g.:</p>
<pre><code>@app.route('/download/&lt;int:id&gt;')
def download_id(id):
    '''This downloads a certain image specified by *id*'''
    return ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I really like <a href="https://swagger.io/tools/swagger-ui" rel="nofollow noreferrer">Swagger</a> because it allows to generate an API documentation by just adding a few decorators and comments into your code. There is a <a href="https://github.com/rantav/flask-restful-swagger" rel="nofollow noreferrer">Flask Swagger</a> available.</p>
<pre><code>from flask import Flask
from flask.ext.restful import  Api
from flask_restful_swagger import swagger

app = Flask(__name__)
api = swagger.docs(Api(app), apiVersion='1', api_spec_url="/api/v1/spec")

class Unicorn(Resource):
"Describing unicorns"
@swagger.operation(
    notes='some really good notes'
)
def get(self, todo_id):
...
</code></pre>
<p>Then you can see your methods and notes in an html interface just by visiting /api/v1/spec (it serves needed static automatically). You can also just get all your API description in JSON and parse it otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a Flask extension: <a href="https://github.com/acoomans/flask-autodoc" rel="nofollow noreferrer">flask-autodoc</a> for auto documentation specially parsing endpoint route rule. You can add <code>doc</code> decorator to specify which APIs you want to doc: </p>
<pre><code>@app.route('/doc')
@auto.doc()
def documentation():
    '''
    return API documentation page
    '''
    return auto.html()

@app.route('/')
@auto.doc()
def welcome():
    '''
    Welcome API
    '''
    commit_hash = subprocess.check_output(["git", "rev-parse", "HEAD"])
    commit_msg = subprocess.check_output(["git", "log", "-1", "--format=%s"])
    date_time = subprocess.check_output(["git", "log", "-1", "--format=%cd"])
    return "Welcome to VM Service Server. &lt;br/&gt;" \
           "The last commit: %s&lt;br/&gt;Date: %s, &lt;br&gt;Hash: %s" % \
           (commit_msg, date_time, commit_hash), 200
</code></pre>
<p>The simple html documentation page is like this: </p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/vlQu8.png"/></p>
</div>
<span class="comment-copy">There's even a Sphinx module called sphinxcontrib.autohttp.flask (<a href="http://pythonhosted.org/sphinxcontrib-httpdomain/#module-sphinxcontrib.autohttp.flask" rel="nofollow noreferrer">pythonhosted.org/sphinxcontrib-httpdomain/â€¦</a>).</span>
<span class="comment-copy">Swagger link broken. <a href="https://swagger.io/tools/swagger-ui/" rel="nofollow noreferrer">swagger.io/tools/swagger-ui</a></span>
<span class="comment-copy">I realize it is kind of an opinion, but I would warn people away from flask-autodoc. The extension is really incomplete. It starts off great, and it sets up the way you would expect, but the end result is lackluster. Most people will abandon it for sphinx and will have wasted a few hours on flask-autodoc.</span>
<span class="comment-copy">If only I'd seen this 30 minutes ago...    +1</span>
<span class="comment-copy">Could you elaborate why flask-autodoc is incomplete? I took a quick look at the documentation for it, and I liked it a lot more than e.g., Flask-RESTplus.</span>
<span class="comment-copy">@imolit flask-autodoc fail when working with blueprints</span>
