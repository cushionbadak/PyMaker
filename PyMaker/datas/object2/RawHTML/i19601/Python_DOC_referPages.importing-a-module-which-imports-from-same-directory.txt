<div class="post-text" itemprop="text">
<p>Suppose I have a project set up as follows:</p>
<pre><code>myproject/
  setup.py
  myproject/
    __init__.py
    module1/
      __init__.py
      a.py
      b.py
      test/
        __init__.py
        test.py
</code></pre>
<p>In <code>a.py</code> I have:</p>
<pre><code>from b import Something
</code></pre>
<p>In <code>test.py</code> I have:</p>
<pre><code>from myproject.module1 import a
</code></pre>
<p>When I run <code>test.py</code> I get a <code>ImportError</code> because <code>b</code> cannot be found - since test.py is in a different directory.</p>
<p>I know I can fix this in <code>a.py</code> by writing <code>from myproject.module1.b import Something</code>, but this seems far too verbose to do throughout the project.</p>
<p>Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>from myproject.module1.b import Something</code> is the best way to do it. It may be a little verbose, but it is explicit which is generally a desirable quality in Pythonic code.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use</p>
<pre><code>from .b import Something
</code></pre>
<p>Since that's relative, it should always work.</p>
<p>See <a href="http://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow">http://docs.python.org/3/tutorial/modules.html#intra-package-references</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can try <a href="http://docs.python.org/2/tutorial/modules.html#intra-package-references" rel="nofollow">relative imports</a> in <code>a.py</code>, e.g.</p>
<pre><code>from .b import Something
</code></pre>
<p>But this may not be a complete solution to your problem. As with any modules that <code>import</code> modules/packages in a higher level of the directory structure, you have to be careful how you run it. Specifically, running a module as <code>python submodule.py</code> implicitly sets the module's <code>__name__</code> variable to <code>"__main__"</code>. Since imports (relative and absolute alike) depend on that <code>__name__</code> and the <code>PYTHONPATH</code>, running a submodule directly may make imports behave differently (or break, as in your case). </p>
<p>Try running your <code>tests.py</code> as </p>
<pre><code>python myproject/module1/test/test.py
</code></pre>
<p><em>from the top level of the package</em> instead of running it directly. </p>
</div>
<span class="comment-copy">Do you need a <code>__init__.py</code> in myproject as well? Is this path in the <code>PYTHONPATH</code>?</span>
<span class="comment-copy">@Alex Yes, edited (apologies). The <code>myproject</code> that is the parent of <code>module1</code> is on the PYTHONPATH</span>
<span class="comment-copy">While both Freaky Dug and @Evert are correct, this is the better solution based on the <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8 style guide</a>: "Relative imports for intra-package imports are highly discouraged. Always use the absolute package path for all imports"</span>
<span class="comment-copy">I'm aware of that, but it seems like a hacky fix. Also, PEP8: "Relative imports for intra-package imports are highly discouraged."</span>
