<div class="post-text" itemprop="text">
<p>I am trying to replace some content in a file with the current working directory using <code>python 3.3</code>. I have:</p>
<pre><code>def ReplaceInFile(filename, replaceRegEx, replaceWithRegEx):
    ''' Open a file and use a re.sub to replace content within it in place '''
    with fileinput.input(filename, inplace=True) as f:
        for line in f:
            line = re.sub(replaceRegEx, replaceWithRegEx, line)
            #sys.stdout.write (line)
            print(line, end='')
</code></pre>
<p>and I am using it like so:</p>
<pre><code>ReplaceInFile(r'Path\To\File.iss', r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + os.getcwd())
</code></pre>
<p>Unfortunately for me, my path is C:\Tkbt\Launch, so the substitution that I get is:</p>
<pre><code>#define RootDir C:  kbt\Launch
</code></pre>
<p>i.e. it's interpreting <code>\t</code> as tab. </p>
<p>So it looks to me like I need to tell python to double escape everything from <code>os.getcwd()</code>. I thought maybe <code>.decode('unicode_escape')</code> might be the answer but it is not. Can anybody help me out?</p>
<p>I'm hoping there's a solution that isn't "find replace each <code>'\'</code> with <code>'\\'</code>".</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to resort to <code>.replace('\\', '\\\\')</code> I am afraid, that's the <em>only</em> option you have to make this work.</p>
<ul>
<li><p>Using encoding to <code>unicode_escape</code> then decode again from ASCII would have been nice, if it worked:</p>
<pre><code>replacepattern = r'\g&lt;1&gt;' + os.getcwd().encode('unicode_escape').decode('ascii')
</code></pre>
<p>This does the right thing with paths:</p>
<pre><code>&gt;&gt;&gt; print(re.sub(r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + r'C:\Path\to\File.iss'.encode('unicode_escape').decode('ascii'), '#define Root
#define RootDir C:\Path\to\File.iss
</code></pre>
<p>but not with existing non-ASCII characters because <code>re.sub()</code> does not process <code>\u</code> or <code>\x</code> escapes.</p></li>
<li><p>Don't use <a href="http://docs.python.org/3/library/re.html#re.escape" rel="nofollow"><code>re.escape()</code></a> to escape special characters in a string, that escapes a little too much:</p>
<pre><code>&gt;&gt;&gt; print(re.sub(r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + re.escape(r'C:\Path\To\File.iss'), '#define RootDir foo/bar/baz'))
#define RootDir C\:\Path\To\File\.iss
</code></pre>
<p>note the <code>\:</code> there.</p></li>
</ul>
<p>Only <code>.replace()</code> results in a working replacement pattern, including non-ASCII characters:</p>
<pre><code>&gt;&gt;&gt; print(re.sub(r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + 'C:\\Path\\To\\File-with-non-
ASCII-\xef.iss'.replace('\\', '\\\\'), '#define Root
#define RootDir C:\Path\To\File-with-non-ASCII-Ã¯.iss
</code></pre>
</div>
<span class="comment-copy">It's more than just os.getcwd() - it's any path. re.escape() also doesn't work because it escapes the ':' - C\:\Tkbt\Launch</span>
<span class="comment-copy">Can't you use <code>/</code> instead of \ ?</span>
<span class="comment-copy">@fp: <code>os.getcwd()</code> returns paths with backslashes. This is not about path literals.</span>
<span class="comment-copy">Urgle; <code>re.sub()</code> promises to interpret all escape codes, but <code>\xab</code> and <code>\uabcd</code> are not interpreted.</span>
<span class="comment-copy">Okay, let's call that the final version...</span>
<span class="comment-copy">Darn. But at least it works.</span>
