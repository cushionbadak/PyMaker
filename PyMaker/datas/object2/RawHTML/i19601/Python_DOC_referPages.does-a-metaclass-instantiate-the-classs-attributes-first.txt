<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/a/6581949/339681">this answer</a> to "what is a metaclass?" I got this:</p>
<blockquote>
<p>You write class Foo(object) first, but the class object Foo is not created in memory yet.</p>
<p>Python will look for <strong>metaclass</strong> in the class definition. If it finds it, it will use it to create the object class Foo. If it doesn't, it will use type to create the class.</p>
</blockquote>
<p>Having tested it, it seems that the attributes of the class are instantiated before the constructor of the class is run. What am I misunderstanding?</p>
<p>Test code:</p>
<pre><code>class meta(type):

    def __init__(cls, name, bases, dic):
        type.__init__(cls, name, bases, dic)

        print hasattr(cls, "a")
        cls.a = "1"


class A(object):
    a = "a"
    __metaclass__ = meta


class B(object):
    __metaclass__ = meta


class C(object):
    __metaclass__ = meta
    a = "a"


print A.a
print B.a
print C.a
</code></pre>
<p>Output:</p>
<pre><code>True
False
True
1
1
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The class body is run before the class is constructed, yes.</p>
<p>The body of the class provides a temporary namespace, and all local names in that namespace are given as a dictionary to construct the class object, together with the base classes and a name for the class.</p>
<p>You can do this with the <code>type()</code> constructor too:</p>
<pre><code>&gt;&gt;&gt; Foo = type('Foo', (), {'a': 1})
&gt;&gt;&gt; Foo.a
1
</code></pre>
<p>The class body is basically executed as a function, with the local namespace of that function being used to create the class attributes, the 3rd argument to <code>type()</code> above.</p>
<p>In python 3 you have a little more influence on that process with the <a href="http://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace" rel="nofollow"><code>__prepare__</code> hook</a> on a metaclass. <code>__prepare__</code> should be a class method that returns a initial namespace for the class body; use it to inject extra names into the generated class body <em>before</em> the class body is executed:</p>
<pre><code>class MyMeta(type):
   @classmethod
   def __prepare__(mcl, name, bases):
       return {'a': 1}
</code></pre>
</div>
