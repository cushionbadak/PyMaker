<div class="post-text" itemprop="text">
<p>In Python 3.2 (and other versions), the <a href="http://docs.python.org/3.2/library/os.html#os.open" rel="nofollow noreferrer">documentation for os.open</a> states:</p>
<blockquote>
<p>This function is intended for low-level I/O. For normal usage, use the built-in function open(), which returns a file object with read() and write() methods (and many more). To wrap a file descriptor in a file object, use fdopen().</p>
</blockquote>
<p>And <a href="http://docs.python.org/3.2/library/os.html#os.fdopen" rel="nofollow noreferrer">for fdopen()</a>:</p>
<blockquote>
<p>Return an open file object connected to the file descriptor fd. This is an alias of open() and accepts the same arguments. The only difference is that the first argument of fdopen() must always be an integer.</p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/7219511/whats-the-difference-between-io-open-and-os-open-on-python/7219537#comment8678465_7219535">This comment</a> in a question on the difference between <code>io.open</code> and <code>os.open</code> (<em>this difference is entirely clear to me, I always use <code>io.open</code>, never <code>os.open</code></em>) asks: <em>why would anyone choose Python for low-level I/O?</em>, but doesn't really get an answer.</p>
<p>My question is very similar to the comment-question: <em>In Python, what is the use case of low-level I/O through <code>os.open</code>, <code>os.fdopen</code>, <code>os.close</code>, <code>os.read</code>, etc.?</em> I used to think it was needed to deamonise a process, but <a href="http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/" rel="nofollow noreferrer">I'm not so sure anymore</a>. Is there any task that can <em>only</em> be performed using low-level I/O, and not with the higher-level wrappers?</p>
</div>
<div class="post-text" itemprop="text">
<p>Major Differences:</p>
<ul>
<li>Low level access to files is unbuffered</li>
<li>Low level access is not portable</li>
<li>Low level allows more fine grained control, e.g. whether to block or not to block upon read</li>
</ul>
<p>Use cases for low level io:</p>
<ul>
<li>The file is a block device</li>
<li>The file is a socket</li>
<li>The file is a tty</li>
<li>...</li>
</ul>
<p>In all these cases you might wish to have that more fine grained control (over buffering and blocking behavior). </p>
<p>You probably never will need the low level functions for regular files. I think most of the time the use case will be some device driver stuff. However, this would better be done in C. But I can see the use case for python as well, e.g. for fast prototyping of device drivers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use it when I need to use <a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/open.html" rel="nofollow"><code>O_CREAT | O_EXCL</code></a> to atomically create a file, failing if the file exists.  You can't check for file existence then create the file if your test found that it does not exist, because that will create a race condition where the file could be created in the interim period between your check and creation.</p>
<p>Briefly looking at <a href="http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/" rel="nofollow">the link you provided</a>, I do believe pidfile creation has a race condition.</p>
<p>In Python 3.3, there is <a href="http://docs.python.org/3/library/functions.html#open" rel="nofollow">a new <code>'x'</code> mode</a> added to <code>open()</code> that seems to do this.  I haven't tried it, though.</p>
</div>
<span class="comment-copy">My guess is that the higher level wrappers use these functions.  At very least the <code>tempfile</code> module uses most of these on python 2.7.3...</span>
<span class="comment-copy">@mgilson Then my question is, why can't tempfile use the higher-level ones?</span>
