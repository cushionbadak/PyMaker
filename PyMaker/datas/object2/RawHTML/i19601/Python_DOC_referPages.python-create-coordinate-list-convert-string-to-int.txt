<div class="post-text" itemprop="text">
<p>I want to import several coordinates (could add up to 20.000) from an text file. 
These coordinates need to be added into a list, looking like the follwing:</p>
<pre><code>coords = [[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2]]
</code></pre>
<p>However when i want to import the coordinates i got the follwing error:</p>
<pre><code>invalid literal for int() with base 10
</code></pre>
<p>I can't figure out how to import the coordinates correctly. 
Does anyone has any suggestions why this does not work?
I think there's some problem with creating the integers.
I use the following script:</p>
<pre><code>Bronbestand = open("D:\\Documents\\SkyDrive\\afstuderen\\99 EEM - Abaqus 6.11.2\\scripting\\testuitlezen4.txt", "r")
headerLine = Bronbestand.readline()
valueList = headerLine.split(",")

xValueIndex = valueList.index("x")
#xValueIndex = int(xValueIndex)
yValueIndex = valueList.index("y")
#yValueIndex = int(yValueIndex)

coordList = []

for line in Bronbestand.readlines():
    segmentedLine = line.split(",")
    coordList.extend([segmentedLine[xValueIndex], segmentedLine[yValueIndex]])

coordList = [x.strip(' ') for x in coordList]
coordList = [x.strip('\n') for x in coordList]

coordList2 = []
#CoordList3 = [map(int, x) for x in coordList]

for i in coordList:
    coordList2 = [coordList[int(i)], coordList[int(i)]]

print "coordList = ", coordList
print "coordList2 = ", coordList2
#print "coordList3 = ", coordList3
</code></pre>
<p>The coordinates needed to be imported are looking like (this is "Bronbestand" in the script):</p>
<pre><code>id,x,y,
      1,  -1.24344945,   4.84291601
      2,  -2.40876842,   4.38153362
      3,  -3.42273545,    3.6448431
      4,  -4.22163963,   2.67913389
      5,   -4.7552824,   1.54508495
      6,  -4.99013376, -0.313952595
      7,   -4.7552824,  -1.54508495
      8,  -4.22163963,  -2.67913389
      9,  -3.42273545,   -3.6448431
</code></pre>
<p>Thus the script should result in:</p>
<pre><code>[[-1.24344945, 4.84291601],[-2.40876842, 4.38153362],[-3.42273545, 3.6448431],[-4.22163963, 2.67913389],[-4.7552824, 1.54508495],[-4.99013376,-0.313952595],[-4.7552824, -1.54508495],[-4.22163963, -2.67913389],[-3.42273545, -3.6448431]]
</code></pre>
<p>I also tried importing the coordinates with the native python csv parser but this didn't work either.</p>
<p>Thank you all in advance for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/14303941/722121">Other answers</a> have said why your script fails, however, there is another issue here - you are massively reinventing the wheel.</p>
<p>This whole thing can be done in a couple of lines using <a href="http://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">the <code>csv</code> module</a> and a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>import csv

with open("test.csv") as file:
    data = csv.reader(file)
    next(data)
    print([[float(x) for x in line[1:]] for line in data])
</code></pre>
<p>Gives us:</p>
<pre><code>[[-1.24344945, 4.84291601], [-2.40876842, 4.38153362], [-3.42273545, 3.6448431], [-4.22163963, 2.67913389], [-4.7552824, 1.54508495], [-4.99013376, -0.313952595], [-4.7552824, -1.54508495], [-4.22163963, -2.67913389], [-3.42273545, -3.6448431]]
</code></pre>
<p>We open the file, make a <code>csv.reader()</code> to parse the csv file, skip the header row, then make a list of the numbers parsed as floats, ignoring the first column.</p>
<p>As pointed out in the comments, as you are dealing with a lot of data, you may wish to iterate over the data lazily. While making a list is good to test the output, in general, you probably want a generator rather than a list. E.g:</p>
<pre><code>([float(x) for x in line[1:]] for line in data)
</code></pre>
<p>Note that the file will need to remain open while you utilize this generator (remain inside the <code>with</code> block).</p>
</div>
<div class="post-text" itemprop="text">
<p>Your numbers are not integers so the conversion to int fails.</p>
<p>Try using float(i) instead of int(i) to convert into floating point numbers instead.</p>
<pre><code>&gt;&gt;&gt; int('1.5')

Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    int('1.5')
ValueError: invalid literal for int() with base 10: '1.5'
&gt;&gt;&gt; float('1.5')
1.5
</code></pre>
</div>
<span class="comment-copy">Why are you trying to manually parse the file when the <code>csv</code> module exists?</span>
<span class="comment-copy">Please don't use backslashes. You can <i>always</i> use forward slashes in path names. Or you could use a <code>r'....'</code> string where you do not have escape backslashes (unless they are at the very end of the string)</span>
<span class="comment-copy">this would be my solution, only i would make it a function which yields the items as a generator, rather than printing it. also i would not use <code>float</code> because of its inacuracy when dealing with exact points and mathematics, instead use <a href="http://docs.python.org/2/library/decimal.html" rel="nofollow noreferrer">decimal</a></span>
<span class="comment-copy">@InbarRose Of course the list comprehension can be trivially changed to a generator expression, depending on the use case (for printing, the list comprehension makes the output clear). As to <code>float</code> vs <code>decimal</code>, it entirely depends on the use case. In most cases, <code>decimal</code> is probably overkill.</span>
<span class="comment-copy">Python floats are actually doubles, so it's 8 decimal places isn't beyond them.</span>
<span class="comment-copy">I'm not sure why you are insisting <code>decimal</code> is necessary here. It's slower, and unless that precision is proven to be needed, why use it? It just adds more code for no real benefit.</span>
<span class="comment-copy">@InbarRose: Unless you <i>require</i> control over the precision of floating point calculations for your application, <code>decimal</code> is overkill. <code>float()</code> is faster, simpler and for most cases, exactly what you need.</span>
<span class="comment-copy">+1, This is a good explanation of why the original code fails.</span>
