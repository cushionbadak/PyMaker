<div class="post-text" itemprop="text">
<p>I'm trying to create a function in my script that zips the contents of a given source directory (<code>src</code>) to a zip file (<code>dst</code>). For example, <code>zip('/path/to/dir', '/path/to/file.zip')</code>, where <code>/path/to/dir</code> is a directory, and <code>/path/to/file.zip</code> doesn't exist yet. I <strong>do not</strong> want to zip the directory itself, this makes all the difference in my case. I want to zip the files (and subdirs) in the directory. This is what I'm trying:</p>
<pre><code>def zip(src, dst):
    zf = zipfile.ZipFile("%s.zip" % (dst), "w")
    for dirname, subdirs, files in os.walk(src):
        zf.write(dirname)
        for filename in files:
            zf.write(os.path.join(dirname, filename))
    zf.close()
</code></pre>
<p>This creates a zip that is essentially <code>/</code>. For example, if I zipped <code>/path/to/dir</code>, extracting the zip creates a directory with "path" in it, with "to" in that directory, etc.</p>
<p>Does anyone have a function that doesn't cause this problem?</p>
<p>I can't stress this enough, it <strong>needs</strong> to zip the files in the directory, not the directoy itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/2/library/zipfile#zipfile.ZipFile.write"><code>zipfile.write()</code></a> method takes an optional <code>arcname</code> argument
that specifies what the name of the file should be inside the zipfile.</p>
<p>You can use this to strip off the path to <code>src</code> at the beginning. Here I
use <a href="http://docs.python.org/2/library/os.path.html#os.path.abspath"><code>os.path.abspath()</code></a> to make sure that both <code>src</code> and the
filename returned by <code>os.walk()</code> have a common prefix.</p>
<pre><code>#!/usr/bin/env python2.7

import os
import zipfile

def zip(src, dst):
    zf = zipfile.ZipFile("%s.zip" % (dst), "w", zipfile.ZIP_DEFLATED)
    abs_src = os.path.abspath(src)
    for dirname, subdirs, files in os.walk(src):
        for filename in files:
            absname = os.path.abspath(os.path.join(dirname, filename))
            arcname = absname[len(abs_src) + 1:]
            print 'zipping %s as %s' % (os.path.join(dirname, filename),
                                        arcname)
            zf.write(absname, arcname)
    zf.close()

zip("src", "dst")
</code></pre>
<p>With a directory structure like this:</p>
<pre><code>src
└── a
    ├── b
    │   └── bar
    └── foo
</code></pre>
<p>The script prints:</p>
<pre><code>zipping src/a/foo as a/foo
zipping src/a/b/bar as a/b/bar
</code></pre>
<p>And the contents of the resulting zip file are:</p>
<pre><code>Archive:  dst.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
        0  01-28-13 11:36   a/foo
        0  01-28-13 11:36   a/b/bar
 --------                   -------
        0                   2 files
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.write" rel="nofollow"><code>arcname</code> parameter</a> to control the name/path in the zip file.</p>
<p>For example, for a zip file that contains only files, no directories:</p>
<pre><code>zf.write(os.path.join(dirname, filename), arcname=filename)
</code></pre>
<p>Or to invent a new directory inside the zip file:</p>
<pre><code>zf.write(os.path.join(dirname, filename), arcname=os.path.join("my_zip_dir", filename))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From what I can tell you are close.  You could use <code>dirname</code> and <code>basename</code> to make sure you are grabbing the right path name:</p>
<pre><code>&gt;&gt;&gt; os.path.dirname("/path/to/dst")
'/path/to'
&gt;&gt;&gt; os.path.basename("/path/to/dst")
'dst'
</code></pre>
<p>Then using <code>chdir</code> you can make sure you are in the parent so the paths are relative.</p>
<pre><code>def zip(src, dst):
    parent = os.path.dirname(dst)
    folder = os.path.basename(dst)

    os.chdir(parent):
    for dirname, subdirs, filenames in os.walk(folder):
        ...
</code></pre>
<p>This creates:</p>
<pre><code>dst/a.txt
dst/b
dst/b/c.txt
...etc...
</code></pre>
<p>If do not want to include the name "dst" you can just do <code>os.chdir(dst)</code> and then <code>os.walk('.')</code>.</p>
<p>Hope that helps.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1855095/how-to-create-a-zip-archive-of-a-directory">How to create a zip archive of a directory</a></span>
<span class="comment-copy">Looks promising (EDIT: works perfectly), but is there any reason to import <code>os</code> and <code>os.path</code>?</span>
<span class="comment-copy">Yes—<code>os</code> for <code>os.walk()</code>, and <code>os.path</code> for <code>os.path.abspath()</code> and <code>os.path.join()</code>.</span>
<span class="comment-copy">@tkbx: <code>from os import path</code> puts <code>path</code> at the top level, so you can do <code>path.join</code> instead of <code>os.path.join</code>. This is usually not what you want to do (especially since everyone always has a variable named <code>path</code> somewhere in their code).</span>
<span class="comment-copy">@tkbx: No, you can't <code>import sys.argv</code> unless <code>argv</code> is a sub-module under <code>sys</code>. But <code>argv</code> isn't a module, it's just a <code>list</code>. But when you <code>import sys</code>—which is the normal thing you do most of the time—you then do <code>script, vars = sys.argv</code>. (Although really, you wouldn't write <i>that</i> very often, either, because you'll get a <code>ValueError</code> if there are 0 or 2 command-line arguments.)</span>
<span class="comment-copy">This function works fine, but it will not add empty folder into the zip file, which in most case is the expected behavior. In another word, any sub-folder without a file in it will be ignored.</span>
<span class="comment-copy">Please note that <code>zip</code> is also a builtin function with very different purpose: <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#zip</a></span>
