<div class="post-text" itemprop="text">
<p>I am wondering if you can lend me a hand in this issue please.</p>
<p>I have the following code to represent all possible combination of range of numbers:</p>
<pre><code>import itertools
lst = [1, 2, 3]
combs = []
for i in xrange(1, len(lst)+1):
   els = [list(x) for x in itertools.combinations(lst, i)]
   combs.extend(els)
</code></pre>
<p>The thing is it represent the output in form of </p>
<pre><code>[[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
</code></pre>
<p>It would be great benefit for me to represent each combination on a separate text files. Each text file represent each number in the combination in a single line. As (1,2), 1 to be in the first line and 2 to be in the seconds line without any commas.</p>
<p>I would deeply appreciate your kindness in helping me.</p>
<h2>Edit</h2>
<p>Thanks million guys for your help. Do appreciate it.</p>
<p>I still have a small issue to solve here please.</p>
<p>For Poke solution, which is great, there is a small problem (my mistake of illustrating this)</p>
<p>the output of the file would be:</p>
<pre><code>[[1], [2], [3]]
[[1, 2], [1, 3], [2, 3]]
[[1, 2, 3]]
</code></pre>
<p>The thing is I need to use the code for LARGE number of combinations (6-39).</p>
<p>Can you help me with this? Even if editing the provided code itself?</p>
<p>Million thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is completely separate from actually generating the combinations. What you want is just a special way to output your data. And you could have done that easily using standard file writing stuff:</p>
<pre><code>&gt;&gt;&gt; combinations = [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
&gt;&gt;&gt; for i, combination in enumerate(combinations):
        with open(r'C:\Users\poke\Desktop\foobar\{0}.txt'.format(i), 'w+') as f:
            for value in combination:
                f.write(str(value) + '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

def savecomb(a, basename):
    k = 0
    for n in range(1, len(a) + 1):
        for c in itertools.combinations(a, n):
            k += 1
            f = open("{}{}.txt".format(basename, k), "wt")
            for i in c:
                f.write("{}\n".format(i))
            f.close()
</code></pre>
<p>There is another solution, using powerset, which is not defined in itertools, but described <a href="http://docs.python.org/3/library/itertools.html" rel="nofollow">here</a> (look for <em>powerset</em> in the page):</p>
<pre><code>def powerset(iterable):
    s = list(iterable)
    return itertools.chain.from_iterable(itertools.combinations(s, r) for r in range(len(s)+1))

def savecomb(a, basename):
    for k, c in enumerate(powerset(a)):
        with open("{}{}.txt".format(basename, k), "wt") as f:
            for i in c:
                f.write("{}\n".format(i))
</code></pre>
<p>This works because taking combinations of all sizes is exactly the same thing as taking all subsets of your list. There will be an empty file, which accounts for the empty subset.</p>
<p>Also, bear in mind that there are 2^n subsets, where n is the size of the list, so for even not too large n, there will be many files. In such situation, even if disk space is large enough, there may be a problem with the filesystem which won't <em>like</em> having too many files in a directory. So it may be wise to put them in different directories (which needs adapting the code slightly), or better, to resort to another approach.</p>
</div>
<span class="comment-copy">Please do not provide an answer to your question with further information, but edit your question instead. I have added the new information to the question, and flagged your answer for deletion.</span>
<span class="comment-copy">So, do you actually want to have multiple files, or just a single file with all combinations with all one-element combinations on line 1, all 2-element combinations on line 2, ...?</span>
<span class="comment-copy">Since i may have a huge number of combinations. It would be better to assign combinations variable to take the whole combinations from a file.  For the output, it would be as posted earlier. So, your code is the one but i we can assign the combinations variable from a file. Thanks!</span>
<span class="comment-copy">What do you intend to do with these files ? If there is a huge number of them, there may be a better approach to your problem.</span>
<span class="comment-copy">@arbautjc OK. What I need to achieve is I need to find all possible combinations for range [6-39]. Then, for each combination should be written in a separate file. each file has combination numbers in separate lines (as elaborated earlier). These files and the numbers need to be accessed by a program that I designed. Please help me in this. Thanks!</span>
<span class="comment-copy">Your code assumes all combinations are stored in memory, which could be avoided. Sadly, itertools.combinat([1,2,3]), without the second parameter, does not generate all of them.</span>
<span class="comment-copy">hi poke, would you please check the above post by me. Thanks!</span>
<span class="comment-copy">@arbautjc My code also assumes that OP is using Windows, has a user named <code>poke</code> and that a folder called <code>foobar</code> exists on the desktop. My code is an example; OP has shown that he is capable to generate the combinations and the question was how to write the files in the desired way.</span>
<span class="comment-copy">@poke I didn't mean to offense you. Since there may be many combinations, and disk space is likely to be much larger than memory space, it seemed wise to mention.</span>
<span class="comment-copy">@arbautjc Don’t worry, no offense taken; it’s just that I don’t always want to throw out perfect solutions so that people actually can’t just copy it 1:1 and don’t have to think about it themselves :)</span>
<span class="comment-copy">Thanks arbautjc. would you mind illustrate basename ?</span>
<span class="comment-copy">savecomb([1,2,3], "bob") will save 7 combinations in bob1.txt, bob2.txt ... bob7.txt</span>
