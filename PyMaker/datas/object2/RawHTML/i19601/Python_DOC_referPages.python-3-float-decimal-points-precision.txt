<div class="post-text" itemprop="text">
<p>I am reading a text file with floating point numbers, all with either 1 or 2 decimal points. I am using <code>float()</code> to convert a line into a float, and raising a <code>ValueError</code> if that fails. I am storing all floats in a list. When printing it out, I'd like to print it out as a 2 decimal places floating point.</p>
<p>Assume I have a text file with the numbers -3,65, 9,17, 1. I read each one, and once I convert them to float and append them to a list. Now in Python 2, calling <code>float(-3.65)</code> returns <code>-3.65</code>. In Python 3 however, <code>float(-3.65) returns</code>-3.6499999999999999` which loses its precision.</p>
<p>I want to print the list of floats, <code>[-3.6499999999999999, 9.1699999999999999, 1.0]</code> with 2 decimal points only. Doing something along the lines of <code>'%.1f' % round(n, 1)</code> would return a string. How can I return a list of all two decimal points of floats, and not strings? So far, I rounded it using <code>[round(num, 2) for num in list]</code> but would need to set the decimal points / precision instead of <code>round()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In a word, you can't.</p>
<p><code>3.65</code> cannot be represented exactly as a <code>float</code>. The number that you're getting is the nearest number to <code>3.65</code> that has an exact <code>float</code> representation.</p>
<p>The difference between (older?) Python 2 and 3 is purely due to the default formatting.</p>
<p>I am seeing the following both in Python 2.7.3 and 3.3.0:</p>
<pre><code>In [1]: 3.65
Out[1]: 3.65

In [2]: '%.20f' % 3.65
Out[2]: '3.64999999999999991118'
</code></pre>
<p>For an exact decimal datatype, see <a href="http://docs.python.org/2/library/decimal.html" rel="noreferrer"><code>decimal.Decimal</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple way to do this is by using the round buit-in.  </p>
<p><code>round(2.6463636263,2)</code> would be displayed as <code>2.65</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The comments state the objective is to <em>print to 2 decimal places</em>. </p>
<p>There's a simple answer for Python 3:</p>
<pre><code>&gt;&gt;&gt; num=3.65
&gt;&gt;&gt; "The number is {:.2f}".format(num)
'The number is 3.65'
</code></pre>
<p>or equivalently with f-strings (Python 3.6+):</p>
<pre><code>&gt;&gt;&gt; num = 3.65
&gt;&gt;&gt; f"The number is {num:.2f}"
'The number is 3.65'
</code></pre>
<p>As always, the float value is an approximation:</p>
<pre><code>&gt;&gt;&gt; "{}".format(f)
'3.65'
&gt;&gt;&gt; "{:.10f}".format(f)
'3.6500000000'
&gt;&gt;&gt; "{:.20f}".format(f)
'3.64999999999999991118'
</code></pre>
<p>I think most use cases will want to work with floats and then only <em>print</em> to a specific precision.</p>
<p>Those that want the <em>numbers themselves</em> to be stored to exactly 2 decimal digits of precision, I suggest use the <a href="https://docs.python.org/3/library/decimal.html" rel="noreferrer">decimal</a> type. <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="noreferrer">More reading on floating point precision</a> for those that are interested.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>num = input("Please input your number: ")

num = float("%0.2f" % (num))

print(num)
</code></pre>
<p>I believe this is a lot simpler. For 1 decimal place use <code>%0.1f</code>. For 2 decimal places use <code>%0.2f</code> and so on.</p>
<p>Or, if you want to reduce it all to 2 lines:</p>
<pre><code>num = float("%0.2f" % (float(input("Please input your number: "))))
print(num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to understand through this below function using python3</p>
<pre><code>def floating_decimals(f_val, dec):
    prc = "{:."+str(dec)+"f}" #first cast decimal as str
    print(prc) #str format output is {:.3f}
    return prc.format(f_val)


print(floating_decimals(50.54187236456456564, 3))
</code></pre>
<p><strong>Output is : 50.542</strong></p>
<p>Hope this helps you!</p>
</div>
<span class="comment-copy">In python 2, <code>float(-3.65)</code> is <code>-3.6499999999999999</code> too.. This is <i>normal</i>. <code>float</code> is by it's very nature not 100 precise.</span>
<span class="comment-copy">Not in mine: <code>Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34)                                                                     │ [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin                                                                         │ Type "help", "copyright", "credits" or "license" for more information.                                                        │ &gt;&gt;&gt; float(-3.65)                                                                                                              │ -3.65</code></span>
<span class="comment-copy">Also, let me point out I know that <code>float</code> is not precise and I know the reasoning behind this. I'm looking an answer that will show how to print it out in 2 decimal points in Python 3. Thanks</span>
<span class="comment-copy">Basically, you just can't really do this because of the way float point works. I suggest you consider using the <code>Decimal</code> class in the <code>decimal</code> module.</span>
<span class="comment-copy">That is just the representation of Python rounding it to at most 16 positions behind the decimal.</span>
<span class="comment-copy">So there is no way to limit the number of decimal points as an number type? To print 3.65, I would require to print it out as a string?</span>
<span class="comment-copy">@Darksky One can <i>only</i> print strings. Sometimes the conversion isn't as explicit: but it is always done.</span>
<span class="comment-copy">Yes, so how would I represent <code>3.64999999999999991118</code> as <code>3.65</code> or anything that's 2 decimal points, without it being a string? Any other type than float that I can use?</span>
<span class="comment-copy">@Darksky: <a href="http://docs.python.org/2/library/decimal.html" rel="nofollow noreferrer">docs.python.org/2/library/decimal.html</a></span>
<span class="comment-copy">Use <code>Decimal</code> in the <code>decimal</code> module instead of float point.</span>
<span class="comment-copy">Though be aware of the note from the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">documentation on <code>round()</code></a> that <code>round()</code> can give surprising results when given float values.  The example mentioned there: "<code>round(2.675, 2)</code> gives <code>2.67</code> instead of the expected <code>2.68</code>."</span>
<span class="comment-copy">This is the right (and best) answer for Py3.</span>
<span class="comment-copy">Hadn't seen the update with f-strings. Honestly not sure if I'm a fan but it's good to know!</span>
<span class="comment-copy">The OP didn't need a variable to define precision - it was set at 2 places. But for variable precision, you don't need to use the arcane string addition <code>prc = "{:."+str(dec)+"f}"</code>.  Instead, embed the precision: <code>print("The number is {:.{}f}".format(f_val, dec))</code>.  The same but with f-strings: <code>print(f"The number is {f_val:.{dec}f}")</code>.</span>
<span class="comment-copy">This was a perfect solution for me</span>
