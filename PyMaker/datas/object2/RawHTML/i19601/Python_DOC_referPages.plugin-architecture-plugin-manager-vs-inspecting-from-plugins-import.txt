<div class="post-text" itemprop="text">
<p>I'm currently writing an application which allows the user to extend it via a 'plugin' type architecture.  They can write additional python classes based on a BaseClass object I provide, and these are loaded against various application signals.  The exact number and names of the classes loaded as plugins is unknown before the application is started, but are only loaded once at startup.</p>
<p>During my research into the best way to tackle this I've come up with two common solutions.</p>
<p><strong>Option 1 - Roll your own using imp, pkgutil, etc.</strong><br/>
See for instance, <a href="https://stackoverflow.com/questions/2267984/dynamic-class-loading-in-python-2-6-runtimewarning-parent-module-plugins-not">this answer</a> or <a href="https://stackoverflow.com/questions/301134/dynamic-module-import-in-python">this one</a>.</p>
<p><strong>Option 2 - Use a plugin manager library</strong><br/>
Randomly picking a couple</p>
<ul>
<li><a href="https://github.com/ironfroggy/straight.plugin" rel="nofollow noreferrer">straight.plugin</a></li>
<li><a href="http://yapsy.sourceforge.net/" rel="nofollow noreferrer">yapsy</a></li>
<li><a href="http://martyalchin.com/2008/jan/10/simple-plugin-framework/" rel="nofollow noreferrer">this approach</a></li>
</ul>
<p>My question is - on the proviso that the application must be restarted in order to load new plugins - is there any benefit of the above methods over something inspired from <a href="https://stackoverflow.com/questions/1796180/python-get-list-of-all-classes-within-current-module">this SO answer</a> and <a href="https://stackoverflow.com/a/8093671/233608">this one</a> such as:</p>
<pre><code>import inspect
import sys
import my_plugins

def predicate(c):
    # filter to classes
    return inspect.isclass(c)

def load_plugins():
    for name, obj in inspect.getmembers(sys.modules['my_plugins'], predicate):
        obj.register_signals()
</code></pre>
<p>Are there any disadvantages to this approach compared to the ones above? (other than all the plugins must be in the same file) Thanks!</p>
<p><strong>EDIT</strong><br/>
Comments request further information... the only additional thing I can think to add is that the plugins use the <a href="http://discorporate.us/projects/Blinker/" rel="nofollow noreferrer">blinker</a> library to provide signals that they subscribe to.  Each plugin may subscribe to different signals of different types and hence must have its own specific "register" method.  </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://martyalchin.com/2008/jan/10/simple-plugin-framework/" rel="nofollow noreferrer">metaclass approach</a> is useful for this issue in Python &lt; 3.6 (see @quasoft's answer for Python 3.6+).  It is very simple and acts automatically on any imported module.  In addition, complex logic can be applied to plugin registration with very little effort.  It requires:</p>
<p>The <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">metaclass</a> approach works like the following:</p>
<p>1) A custom <code>PluginMount</code> metaclass is defined which maintains a list of all plugins</p>
<p>2) A <code>Plugin</code> class is defined which sets <code>PluginMount</code> as its metaclass</p>
<p>3) When an object deriving from <code>Plugin</code> - for instance <code>MyPlugin</code> is imported, it triggers the <code>__init__</code> method on the metaclass.  This registers the plugin and performs any application specific logic and event subscription.</p>
<p>Alternatively if you put the <code>PluginMount.__init__</code> logic in <code>PluginMount.__new__</code> it is called whenver a new instance of a <code>Plugin</code> derived class is created.</p>
<pre><code>class PluginMount(type):
    """
    A plugin mount point derived from:
        http://martyalchin.com/2008/jan/10/simple-plugin-framework/
    Acts as a metaclass which creates anything inheriting from Plugin
    """

    def __init__(cls, name, bases, attrs):
        """Called when a Plugin derived class is imported"""

        if not hasattr(cls, 'plugins'):
            # Called when the metaclass is first instantiated
            cls.plugins = []
        else:
            # Called when a plugin class is imported
            cls.register_plugin(cls)

    def register_plugin(cls, plugin):
        """Add the plugin to the plugin list and perform any registration logic"""

        # create a plugin instance and store it
        # optionally you could just store the plugin class and lazily instantiate
        instance = plugin()

        # save the plugin reference
        cls.plugins.append(instance)

        # apply plugin logic - in this case connect the plugin to blinker signals
        # this must be defined in the derived class
        instance.register_signals()
</code></pre>
<p>Then a base plugin class which looks like:</p>
<pre><code>class Plugin(object):
    """A plugin which must provide a register_signals() method"""
    __metaclass__ = PluginMount
</code></pre>
<p>Finally, an actual plugin class would look like the following:</p>
<pre><code>class MyPlugin(Plugin):
    def register_signals(self):
        print "Class created and registering signals"

    def other_plugin_stuff(self):
        print "I can do other plugin stuff"
</code></pre>
<p>Plugins can be accessed from any python module that has imported <code>Plugin</code>:</p>
<pre><code>for plugin in Plugin.plugins:
    plugin.other_plugin_stuff()
</code></pre>
<p>See <a href="https://gist.github.com/will-hart/5899567" rel="nofollow noreferrer">the full working example</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Since <a href="https://docs.python.org/3/whatsnew/3.6.html" rel="noreferrer">Python 3.6</a> a new class method <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="noreferrer"><code>__init_subclass__</code></a> is added, that is called on a base class, whenever a new subclass is created.</p>
<p>This method can further simplify the solution offered by will-hart above, by removing the metaclass.</p>
<p>The <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="noreferrer"><code>__init_subclass__</code></a> method was introduced with <a href="https://www.python.org/dev/peps/pep-0487/" rel="noreferrer">PEP 487: Simpler customization of class creation</a>. The PEP comes with a minimal example for a plugin architecture:</p>
<blockquote>
<p>It is now possible to customize subclass creation without using a
  metaclass. The new <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="noreferrer"><code>__init_subclass__</code></a> classmethod will be called on
  the base class whenever a new subclass is created:</p>
<pre><code>class PluginBase:
    subclasses = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.subclasses.append(cls)

class Plugin1(PluginBase):
    pass

class Plugin2(PluginBase):
    pass
</code></pre>
</blockquote>
<p>The PEP example above stores references to the classes in the <code>Plugin.plugins</code> field.</p>
<p>If you want to store instances of the plugin classes, you can use a structure like this:</p>
<pre><code>class Plugin:
    """Base class for all plugins. Singleton instances of subclasses are created automatically and stored in Plugin.plugins class field."""
    plugins = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.plugins.append(cls())

class MyPlugin1(Plugin):
    def __init__(self):
        print("MyPlugin1 instance created")

    def do_work(self):
        print("Do something")

class MyPlugin2(Plugin):
    def __init__(self):
        print("MyPlugin2 instance created")

    def do_work(self):
        print("Do something else")

for plugin in Plugin.plugins:
    plugin.do_work()
</code></pre>
<p>which outputs:</p>
<pre><code>MyPlugin1 instance created
MyPlugin2 instance created
Do something
Do something else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The approach from will-hart was the most useful one to me! 
For i needed more control I wrapped the Plugin Base class in a function like:</p>
<pre><code>def get_plugin_base(name='Plugin',
                       cls=object,
                       metaclass=PluginMount):

    def iter_func(self):
        for mod in self._models:
            yield mod

    bases = not isinstance(cls, tuple) and (cls,) or cls

    class_dict = dict(
        _models=None,
        session=None
    )

    class_dict['__iter__'] = iter_func

    return metaclass(name, bases, class_dict)
</code></pre>
<p>and then:</p>
<pre><code>from plugin import get_plugin_base
Plugin = get_plugin_base()
</code></pre>
<p>This allows to add additional baseclasses or switching to another metaclass.</p>
</div>
<span class="comment-copy">If you are using the <a href="http://martyalchin.com/2008/jan/10/simple-plugin-framework/" rel="nofollow noreferrer">this approach</a> then you don't need the <code>load_plugins</code> and <code>predicate</code> functions. And is the one I would suggest.</span>
<span class="comment-copy">Thanks - yes, I did see that article... it is a good approach.  However as each plugin will have a different registration function, I would presumably need to loop over the plugins anyway and call register separately? This seems considerably more complicated than the above?</span>
<span class="comment-copy">You need to explain a bit more of what you exactly want. If you use the idea from the article your <code>Base</code> class will have a class attribute that contains all the <code>Plugins</code> registered.</span>
