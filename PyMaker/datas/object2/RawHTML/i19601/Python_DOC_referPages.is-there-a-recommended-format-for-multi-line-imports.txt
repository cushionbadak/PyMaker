<div class="post-text" itemprop="text">
<p>I have read there are three ways for coding multi-line imports in python</p>
<p>With slashes:</p>
<pre><code>from Tkinter import Tk, Frame, Button, Entry, Canvas, Text, \
    LEFT, DISABLED, NORMAL, RIDGE, END
</code></pre>
<p>Duplicating senteces:</p>
<pre><code>from Tkinter import Tk, Frame, Button, Entry, Canvas, Text
from Tkinter import LEFT, DISABLED, NORMAL, RIDGE, END
</code></pre>
<p>With parenthesis:</p>
<pre><code>from Tkinter import (Tk, Frame, Button, Entry, Canvas, Text,
    LEFT, DISABLED, NORMAL, RIDGE, END)
</code></pre>
<p>Is there a recomended format or a more elegant way for this statements?</p>
</div>
<div class="post-text" itemprop="text">
<p>Personally I go with parentheses when importing more than one component and sort them alphabetically. Like so:</p>
<pre><code>from Tkinter import (
    Button,
    Canvas,
    DISABLED,
    END,
    Entry,
    Frame,
    LEFT,
    NORMAL,
    RIDGE,
    Text,
    Tk,
)
</code></pre>
<p>This has the added advantage of easily seeing what components have been added / removed in each commit or PR.</p>
<p>Overall though it's a personal preference and I would advise you to go with whatever looks best to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your examples seem to stem from <a href="http://www.python.org/dev/peps/pep-0328/" rel="noreferrer">PEP 328</a>. There, the parenthesis-notation is proposed for exactly this problem, so probably I'd choose this one.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would go with the parenthesis notation from the <a href="https://www.python.org/dev/peps/pep-0328/#rationale-for-parentheses" rel="nofollow noreferrer">PEP328</a> with newlines added before and after parentheses:</p>
<pre><code>from Tkinter import (
    Tk, Frame, Button, Entry, Canvas, Text, 
    LEFT, DISABLED, NORMAL, RIDGE, END
)
</code></pre>
<p>This is the format which <a href="https://github.com/django/django/blob/master/django/test/__init__.py" rel="nofollow noreferrer">Django</a> uses:</p>
<pre><code>from django.test.client import Client, RequestFactory
from django.test.testcases import (
    LiveServerTestCase, SimpleTestCase, TestCase, TransactionTestCase,
    skipIfDBFeature, skipUnlessAnyDBFeature, skipUnlessDBFeature,
)
from django.test.utils import (
    ignore_warnings, modify_settings, override_settings,
    override_system_checks, tag,
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually with Tkinter, it is okay to just use <code>from Tkinter import *</code> as the module will only export names that are clearly widgets.</p>
<p><a href="http://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow">PEP 8</a> does not list any conventions for such a case, so I guess it is up to you to decide what is the best option. It is all about readability, so choose whatever makes it clear that you are importing stuff from a single module.</p>
<p>As all those names are made available in your scope, I personally think that options 2 is the most clearest as you can see the imported names the best. You then could even split it up more to maybe group those names together that belong with each other. In your example I might put <code>Tk</code>, <code>Frame</code> and <code>Canvas</code> separately as they group widgets together, while having <code>Button</code> and <code>Text</code> separately as they are smaller components in a view.</p>
</div>
<span class="comment-copy">with so many imports, why not just <code>from Tkinter import *</code> ?</span>
<span class="comment-copy">This is an example. Te real statement is <code>from data.forms import AddressEmbeddedField, PhoneEmbeddedField, MailEmbeddedField, \ 	WebEmbeddedField</code> but don't want to import all the rest of embedded fields in data.forms</span>
<span class="comment-copy">Many reasons. E.g., you might overwrite many variables you aren't aware of. Do you know all names imported by <code>from Tkinter import *</code>? I'm not. And IDEs won't know if these names (maybe), thus they aren't able to tell if you entered an invalid name.</span>
<span class="comment-copy">@InbarRose It's a bad habbit, look at <a href="https://stackoverflow.com/questions/3615125/should-wildcard-import-be-avoided" title="should wildcard import be avoided">stackoverflow.com/questions/3615125/…</a></span>
<span class="comment-copy">I think the important thing is to be consistent (at least, within a given project). That will make it easy for somebody reading the code to find what's being imported without too much difficulty.</span>
<span class="comment-copy">isort can be used to automatically format multi-line imports in different styles, see <a href="https://github.com/timothycrosley/isort#multi-line-output-modes" rel="nofollow noreferrer">github.com/timothycrosley/isort#multi-line-output-modes</a></span>
<span class="comment-copy">There are no newlines added after/before the parenthesis in PEP 328?</span>
<span class="comment-copy">@GandalfSaxe PEP 328 was about semantics (adding a new feature to the language), not about formatting.</span>
<span class="comment-copy">I don't quite understand then. You quote PEP 328 as having parenthesis for multi-line imports, but they have none? "I would go with the parenthesis notation from the PEP328 with newlines added before and after parentheses:"</span>
<span class="comment-copy">PEP 328 added parenthesis notation to the language. Parenthesis notation is the ability to import multiple modules like this: <code>from foo import (bar, baz)</code>. PEP 328 says nothing about formatting.</span>
<span class="comment-copy">Ah ok, I see what you mean now :)</span>
<span class="comment-copy">Never is OK to use from X import *</span>
<span class="comment-copy">@ToloPalmer Usually that is true, but for Tkinter this is generally okay, as you only import widgets; it’s even listed that way <a href="https://docs.python.org/3/library/tkinter.html#tkinter-modules" rel="nofollow noreferrer">in the library reference</a>. And if you list the import as the first one, you should be especially safe from any conflicts.</span>
<span class="comment-copy">For reference, the problem with <code>from X import *</code> even for packages that use <code>__all__</code> properly is that static code analyzers like <code>pyflakes</code> can't detect undefined names if there is any <code>import *</code> since it has to assume that any undefined names was maybe imported by the <code>*</code>.</span>
