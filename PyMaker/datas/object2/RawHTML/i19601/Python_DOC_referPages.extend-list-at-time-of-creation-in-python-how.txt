<div class="post-text" itemprop="text">
<p>Here is the sample dict one</p>
<pre><code>one = {'a': 1,'b': 3}
</code></pre>
<p>and the second dict is </p>
<pre><code>second = {'x': 45,'y': 45}
</code></pre>
<p>here is the key container(of type <code>list</code>)</p>
<pre><code>key_con = one.keys()
key_con = key_con.extend(second.keys())
</code></pre>
<p>and all work good.
But i try to shorten the code
like this</p>
<pre><code>key_con = one.keys().extend(second.keys())
</code></pre>
<p>now, <code>key_con</code> is <code>NoneType</code> 
i want to make this key container in one line code.
how to achieve it?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>key_con = one.keys() + second.keys()
</code></pre>
<p><code>extend</code> modifies the list in-place and doesn't return anything. Are you sure your first snippet works?</p>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/a/14399044/722121">the other answer by Pavel Anossov</a> answered the question you explicitly asked, I would still argue that it's not the best solution to the problem at hand. Dictionaries are unordered, and can't have duplicate keys, so using a list to store the keys is inherently misleading and a bad idea.</p>
<p>Instead, it is a much better idea to store this data in a set - sets don't have order, and can't contain duplicates, and so fill this role much more effectively.</p>
<p>In Python 3.x, <a href="http://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer"><code>dict.keys()</code></a> gives <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">a set-like dictionary view</a>, so this would be best done with:</p>
<pre><code>key_con = one.keys() | two.keys()
</code></pre>
<p>We use the <code>|</code> (binary or) operator, which, on sets and set-like objects, signals a <a href="http://docs.python.org/3.2/library/stdtypes.html#set.union" rel="nofollow noreferrer">union</a> (all elements in one set <em>or</em> the other).</p>
<p>In 2.7, the same behaviour can be obtained with <a href="http://docs.python.org/2.7/library/stdtypes.html#dict.viewkeys" rel="nofollow noreferrer"><code>dict.viewkeys()</code></a>:</p>
<pre><code>key_con = one.viewkeys() | two.viewkeys()
</code></pre>
<p>In older versions, then we can use <a href="http://docs.python.org/2.6/library/stdtypes.html#dict.iterkeys" rel="nofollow noreferrer"><code>dict.iterkeys()</code></a> with <a href="http://docs.python.org/2.6/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set()</code></a>:</p>
<pre><code>key_con = set(one.iterkeys()) | set(two.iterkeys())
</code></pre>
</div>
<span class="comment-copy">yes, i have tried and tested that one.</span>
<span class="comment-copy">@lokeshjain2008 <a href="https://gist.github.com/4564328" rel="nofollow noreferrer">gist.github.com/4564328</a> is just copying and pasting the code you gave above.</span>
<span class="comment-copy">Thanks man, simple one. Shame on me.</span>
<span class="comment-copy">@ThomasK How did this happen? This means that i am not alone with these questions.</span>
<span class="comment-copy">Still why <code>key_con = one.keys().extend(second.keys())</code> didn't work and first one worked.</span>
