<div class="post-text" itemprop="text">
<p>When using nose 1.2.1 with Python 3.3.0, I sometimes get an error message similar to the following one</p>
<pre><code>======================================================================
FAIL: maxdiff2.test_equal
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.3/site-packages/nose/case.py", line 198, in runTest
    self.test(*self.arg)
  File "/Users/loic/cmrsj/Calculus_II/scrap/maxdiff2.py", line 32, in test_equal
    assert_equal(str1, str2)
AssertionError: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a
diam lectus.\n [truncated]... != 'Suspendisse lectus leo, consectetur in tempor sit
amet, placerat quis neque.\nE [truncated]...
Diff is 1780 characters long. Set self.maxDiff to None to see it.

----------------------------------------------------------------------
Ran 1 test in 0.064s

FAILED (failures=1)
</code></pre>
<p>In many situations, to figure out what the error really is, I need to see the full diff output.  However, I have no idea of how to set that <code>self.maxDiff</code>.  Googling for nose and maxDiff does not help.  With the same version of nose on Python 2.7.1 the full diff is printed to screen.</p>
<p>Here is a simple script that generates the error above when run with <code>nosetests-3.3</code>:</p>
<pre><code>from nose.tools import assert_equal

def test_equal():
    str1 = """\
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus.
Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec
consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero
egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem
lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida
lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor.
Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim
sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in
urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam
pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris
vitae nisi at sem facilisis semper ac in est."""

    str2 = """\
Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque.
Etiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis
nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut
justo vel sapien venenatis tincidunt. Phasellus eget dolor sit amet ipsum
dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus
convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut
augue nunc, sodales ut euismod non, adipiscing vitae orci. Mauris ut placerat
justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices
egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam
urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper
urna."""

    assert_equal(str1, str2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem in Python 3 (from reading the other answers here) and using <code>im_class</code> did not work. The snippet below works in Python 3 (cf. <a href="https://stackoverflow.com/questions/4679592/how-to-find-instance-of-a-bound-method-in-python">How to find instance of a bound method in Python?</a>):</p>
<pre><code>assert_equal.__self__.maxDiff = None
</code></pre>
<p>As @Louis commented, the convenience functions <em>are</em> bound methods on a <code>Dummy</code> instance. They all seem to be on the same instance, so changing this for e.g. <code>assert_equal</code> will change it for <code>assert_dict_equal</code> et cetera. From the <a href="http://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">Python docs</a>, <code>__self__</code> is available from Python 2.6 and forward.</p>
</div>
<div class="post-text" itemprop="text">
<p>You set <code>maxDiff</code> to <code>None</code>.</p>
<p>But you will have to actually use a <a href="http://docs.python.org/2/library/unittest.html#unittest.TestCase.maxDiff" rel="noreferrer"><code>unittest.TestCase</code></a> for your tests for that to work. This should work.</p>
<pre><code>class MyTest(unittest.TestCase):

    maxDiff = None

    def test_diff(self):
          &lt;your test here&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works in python 2.7:</p>
<pre><code>    from unittest import TestCase
    TestCase.maxDiff = None
</code></pre>
<p>It'll set the default maxDiff for all TestCase instances, including the one that assert_equals and friends are attached to.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here you have it (what google told me):</p>
<pre><code># http://pdf2djvu.googlecode.com/hg/tests/common.py
try:
    from nose.tools import assert_multi_line_equal
except ImportError:
    assert_multi_line_equal = assert_equal
else:
    assert_multi_line_equal.im_class.maxDiff = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python 2.7.3, nose 1.3.0, doing the following is working for me:</p>
<pre><code>assert_equal.im_class.maxDiff = None
assert_equal(huge_thing, other_huge_thing)
</code></pre>
</div>
<span class="comment-copy">I tried that and it does not solve the problem.  Other variants also do not work (putting <code>self.maxDiff = None</code> in <code>__init__</code> or in <code>setUp</code>.  Could that be an incompatibility between nose and unittest?</span>
<span class="comment-copy">Some more details: I wrapped the test function in a <code>unittest.TestCase</code> class and I replaced nose's <code>assert_equal</code> with <code>self.assertEqual</code>.  Then, setting <code>maxDiff=None</code> in the class body does give the correct output if the test is run with unittest.  However, this still does not provide a solution when using nose.  It this a bug in nose?</span>
<span class="comment-copy">@LoïcSéguin-C. Could very well be. I'd suggest you send a mail to the mailing list (I assume they have one) and ask.</span>
<span class="comment-copy">For anyone else who is reading this thread, this answer worked for me.  I see the author is using nose.tools instead of unittest directly, so maybe this is why it didn't work from them.</span>
<span class="comment-copy">This feels like the more correct answer to me, and was dead on.</span>
<span class="comment-copy">Cool.  If you also want to see the full strings in the AssertionError which precedes the diff, you can increase the max length by doing: <code>import unittest; unittest.util._MAX_LENGTH=1000</code></span>
<span class="comment-copy">This does not work for Python 3 as unbound methods have <a href="http://docs.python.org/3/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow noreferrer">been removed</a> so the <code>im_class</code> attribute does not exist.</span>
<span class="comment-copy">@Loïc What you say about Python 3 is correct but I believe it does not apply to <code>nose.tools</code>. I am looking at the <code>nose/tools/trivial.py</code> file of nose 1.3.0 and see that the way the <code>assert_*</code> functions are created is by extracting them from an <b>instance</b> of a dummy class (deriving from <code>unittest.TestCase</code>). So they are not unbound. (Judging by the git log for nose, it's been this way for at least two years.)</span>
