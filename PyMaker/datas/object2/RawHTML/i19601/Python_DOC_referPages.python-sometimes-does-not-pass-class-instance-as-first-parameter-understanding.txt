<div class="post-text" itemprop="text">
<p>I have a class with a function like this:</p>
<pre><code>def foo(self):
    do_stuff()
</code></pre>
<p>And I call it like this:</p>
<pre><code>instance.foo()
</code></pre>
<p>and I get this error:</p>
<pre><code>TypeError: foo() takes exactly 1 argument (0 given)
</code></pre>
<p>but this works fine:</p>
<pre><code>instance.foo(instance)
</code></pre>
<p>Can anyone explain why this could be happening? It's weirding me out a little</p>
<p>If you need more info please feel free to ask</p>
<p><strong>EDIT</strong> here's an approximation of the actual code...</p>
<pre><code>def __new__(self):
    blah blah
    MyClass.__init__(self,blah)
    self.foo(self)     #&lt;------------------------error here
</code></pre>
<p>I suspect I am misunderstanding how <code>__new__</code> works... I'm doing some reading now</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is that the <strong>new</strong> function does not accept self as an argument, seeing as you're creating a new object in it. The first argument is in fact the class, usually shortened as cls.</p>
<p><a href="http://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow">Source</a></p>
<p>Corrected sample:</p>
<pre><code>def __new__(cls):
    blah blah
    obj = MyClass.__new__(MyClass)
    obj.foo()
    return obj
</code></pre>
<p>This will create an instance of MyClass instead of cls. If MyClass is a subclass of cls, then it's init method will also automaticly be called (see linked reference)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class MyClass  
    def __new__(cls):
        blah
        o = object.__new__(cls)
        o.foo()
        return o
</code></pre>
<p><code>__new__</code> needs to return an instance. It gets MyClass as an argument, not an instance of MyClass. </p>
<p>To instantiate <code>MyClass</code> in <code>__new__</code>, <code>object.__new__</code> is employed. This is to prevent infinite recursion</p>
<p><code>__init__</code> is called automatically on the returned value of <code>__new__</code> so long as this value is of type MyClass. This can be prevented by playing with the metaclass</p>
</div>
<span class="comment-copy">How do you create an instance ? <code>obj = classfoo()</code> or <code>obj = classfoo</code> ?</span>
<span class="comment-copy">@AshRj: the problem is in the <b>new</b> function. See the edit</span>
<span class="comment-copy">I thought this was correct but it isn't - your answer comes up with an infinite recursion error...</span>
<span class="comment-copy">I made another answer that's correct because yours isn't quite... it was useful though so +1</span>
