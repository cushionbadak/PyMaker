<div class="post-text" itemprop="text">
<p>I'm trying to download a zip file via ftp, but then extract the files inside without ever actually saving the zip.  Any idea how I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/ftplib.html#module-ftplib" rel="nofollow"><code>ftplib</code></a> module allows downloading files via FTP.</p>
<p>The <a href="http://docs.python.org/3/library/zipfile.html#module-zipfile" rel="nofollow"><code>zipfile</code></a> module allows extracting files from a zip file.</p>
<p>Here's the key, the <a href="http://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow"><code>io.BytesIO</code></a> class allows you to pass in-memory bytes to anything that expects a file. (In Python 2.x, the <a href="http://docs.python.org/2.7/library/stringio.html#module-StringIO" rel="nofollow"><code>StringIO</code></a> module provides similar functionality.)</p>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="http://docs.python.org/2/library/zipfile#zipfile.ZipFile.open" rel="nofollow noreferrer">zipfile.open</a></p>
<p>it opens a member from the archive into memory. Since ZipFile accepts any file-like object as parameter, you may get it from many sources, like HTTP/FTP servers</p>
<pre><code>import urllib
import io
from zipfile import ZipFile

mysock = urllib.urlopen('ftp://ftp.yourhost.com/spam.zip')  // check urllib for parameters
memfile = io.BytesIO(mysock.read())
with ZipFile(memfile, 'r') as myzip:
    f = myzip.open('eggs.txt')
    content = f.read()  // or other file-like commands
</code></pre>
<p>check also <a href="https://stackoverflow.com/questions/2463770/python-in-memory-zip-library?rq=1">Python in-memory zip library</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The zipfile module can be used to extract things from a zip file; the ftplib would be used to access the zipfile.  Unfortunately, ftplib doesn't provide a file-like object for zipfile to use to access the contents of the file.  I suppose you could read the zip &amp; store it in memory, for example in a string, which could then be wrapped up in a file-like object (StringIO), although you're still getting the whole zip, just not saving it to disk.</p>
<p>If you don't need to save the individual files, but just access (i.e. read) them, zipfile will allow you to do this.</p>
</div>
<span class="comment-copy">I know this is old. But this doesnt work for me.  buf = io.BytesIO(str.encode("Test data to write"))    buf = ZipFile.ZipFile(buf, mode='x')    ftp.storbinary("STOR " + self.filename, buf)  It throws me an error: KeyError: 'There is no item named 8192 in the archive'</span>
<span class="comment-copy">I provide more info here <a href="https://stackoverflow.com/questions/51358672/zip-and-ftp-a-string-on-the-fly-with-python" title="zip and ftp a string on the fly with python">stackoverflow.com/questions/51358672/â€¦</a></span>
<span class="comment-copy">I like this approach more than my answer.</span>
<span class="comment-copy">:) but please be aware it's untested... I'm writing from my smartphone</span>
<span class="comment-copy">Now I tested it and it works. However your approach, Jon-Eric, is the correct one. So I edited my code: we must wrap the "mysock" content into a BytesIO object or ZipFile will complain about not being able to retrieve the filesize.</span>
