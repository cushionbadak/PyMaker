<div class="post-text" itemprop="text">
<p>I would like to know if there is a built in function in python for the equivalent Haskell <code>scanl</code>, as <code>reduce</code> is the equivalent of <code>foldl</code>.</p>
<p>Something that does this:</p>
<pre><code>Prelude&gt; scanl (+) 0 [1 ..10]
[0,1,3,6,10,15,21,28,36,45,55]
</code></pre>
<p>The question is not about how to implement it, I already have 2 implementations, shown below (however, if you have a more elegant one please feel free to show it here).</p>
<p>First implementation: </p>
<pre><code> # Inefficient, uses reduce multiple times
 def scanl(f, base, l):
   ls = [l[0:i] for i in range(1, len(l) + 1)]
   return [base] + [reduce(f, x, base) for x in ls]

  print scanl(operator.add, 0, range(1, 11))
</code></pre>
<p>Gives:</p>
<pre><code>[0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
</code></pre>
<p>Second implementation:</p>
<pre><code> # Efficient, using an accumulator
 def scanl2(f, base, l):
   res = [base]
   acc = base
   for x in l:
     acc = f(acc, x)
     res += [acc]
   return res

 print scanl2(operator.add, 0, range(1, 11))
</code></pre>
<p>Gives:</p>
<pre><code>[0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
</code></pre>
<p>Thank you :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use this, if its more elegant:</p>
<pre><code>def scanl(f, base, l):
    for x in l:
        base = f(base, x)
        yield base
</code></pre>
<p>Use it like:</p>
<pre><code>import operator
list(scanl(operator.add, 0, range(1,11)))
</code></pre>
<p>Python 3.x has <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate(iterable, func= operator.add)</code></a>. It is implemented as below. The implementation might give you ideas:</p>
<pre><code>def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total = func(total, element)
        yield total
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar need. This version uses the python list comprehension  </p>
<pre><code>def scanl(data):
    '''
    returns list of successive reduced values from the list (see haskell foldl)
    '''
    return [0] + [sum(data[:(k+1)]) for (k,v) in enumerate(data)]


&gt;&gt;&gt; scanl(range(1,11))
</code></pre>
<p>gives:</p>
<pre><code>[0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As usual, the Python ecosystem is also overflowing with solutions: </p>
<p>Toolz has an accumulate capable of taking a user-supplied function as an argument.  I tested it with lambda expressions. </p>
<p><a href="https://github.com/pytoolz/toolz/blob/master/toolz/itertoolz.py" rel="nofollow noreferrer">https://github.com/pytoolz/toolz/blob/master/toolz/itertoolz.py</a></p>
<p><a href="https://pypi.python.org/pypi/toolz" rel="nofollow noreferrer">https://pypi.python.org/pypi/toolz</a></p>
<p>as does more_itertools</p>
<p><a href="http://more-itertools.readthedocs.io/en/stable/api.html" rel="nofollow noreferrer">http://more-itertools.readthedocs.io/en/stable/api.html</a></p>
<p>I did not test the version from more-itertools, but it also can take a user-supplied function.</p>
</div>
<span class="comment-copy">I don't know python, but shouldn't you have a <code>yield</code> statement before the <code>for</code> loop? <code>scanl</code> should return a list one item longer than the input list.</span>
<span class="comment-copy">@rampion You are right, Haskell's <code>scanl</code> includes the initial accumulator. A <code>yield base</code> is missing.</span>
<span class="comment-copy">@rampion all you need to do is change <code>for x in l</code> to <code>for x in [base] + l</code></span>
<span class="comment-copy">I would pass sum as a function argument to the scanl function.</span>
<span class="comment-copy">This is not exactly <code>scanl</code>, because      (1) using the operator for <code>[:(k+1)]</code> is O(n) every time, so you have O(n^2) complexity here, which isn't the case for a real <code>scanl</code>      (2) assumption is that <code>sum</code> is used.</span>
