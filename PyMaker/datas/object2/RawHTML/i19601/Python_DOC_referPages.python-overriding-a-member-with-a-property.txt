<div class="post-text" itemprop="text">
<p>I was trying to override a member of a Python (2.7) class with a property, as shown in the following code:</p>
<pre><code>class Base:
    def __init__(self):
        self.foo = 1

class Derived(Base):
    foo = property(lambda self: 2)

print Derived().foo
</code></pre>
<p>However, the last line prints 1 instead of 2. From the way I thought properties are supposed to work (ie., easily change a member to a function later on), this seems counter-intuitive to me. Am I missing something? Is there some workaround?</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't work because you aren't using a new-style class.  Properties are <code>descriptors</code> which only work on new-style classes.  What your code is doing is this:</p>
<p>You create a class <code>Derived</code> with a class attribute <code>foo</code>.  Then when you create an instance of the class, <code>Base.__init__</code> takes over since <code>Derived</code> has no <code>__init__</code> and you add the instance attribute <code>foo</code> which takes precedence to the class attribute.</p>
<p>If you change:</p>
<pre><code>class Base: #old style class
</code></pre>
<p>to:</p>
<pre><code>class Base(object):  #new style class
</code></pre>
<p>You'll run into an entirely new problem, mainly that your property doesn't have an appropriately defined <code>setter</code>, so when you do <code>self.foo = 1</code> in <code>Base.__init__</code> you'll get an <code>AttributeError</code></p>
</div>
<span class="comment-copy">I'm sure this is just for example, but using <code>property()</code> as a decorator on an actual <code>def</code> would be far more readable than using it directly with a <code>lambda</code>.</span>
<span class="comment-copy">Moral of the story: <i>always</i> use new-style classes.</span>
<span class="comment-copy">@Lattyware: Actually, I personally prefer the <code>lambda</code> style in properties that simple :)</span>
<span class="comment-copy">@rainer Well, properties that simple shouldn't exist (as I said, I presume this was just for example). Anything complex enough to be worth using a property would be better off done as I explained above, for readability.</span>
<span class="comment-copy">And after that problem is fixed, it won't work because it will overwrite the parent's <code>foo</code> member directly anyway, so you'll never be able to set <code>foo</code>.</span>
<span class="comment-copy">And to use a new-style class...? =) Your class shuold derive from object. class Base(object):</span>
<span class="comment-copy">@sr2222 That's not true - the first argument to <a href="http://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property()</code></a> is the getter. This will produce a perfectly fine read-only property, on a new-style class.</span>
<span class="comment-copy">Oops, my mistake, that's right.  Got the argument order backwards in my head somehow...</span>
<span class="comment-copy">@Lattyware -- but that <code>self.foo</code> is set in <code>Base.__init__</code> which will attempt to use the property.</span>
