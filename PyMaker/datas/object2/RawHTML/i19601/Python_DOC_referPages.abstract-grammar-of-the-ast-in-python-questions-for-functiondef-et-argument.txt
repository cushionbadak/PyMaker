<div class="post-text" itemprop="text">
<p>I'm trying to use the <a href="http://docs.python.org/3.2/library/ast.html" rel="nofollow">ast module</a> in Python 3 to parse some Python code.
For now I'm only coding a simple node visitor that will output the original code.</p>
<p>I have difficulties to convert some nodes of the AST to actual code.</p>
<p>On the grammar at <a href="http://docs.python.org/3.2/library/ast.html#abstract-grammar" rel="nofollow">http://docs.python.org/3.2/library/ast.html#abstract-grammar</a> I do not understand what the <strong><code>expr? returns</code></strong> should be</p>
<pre><code>FunctionDef(identifier name, arguments args,
            stmt* body, expr* decorator_list, expr? returns)
</code></pre>
<p>Looking at the full Python grammar ( <a href="http://docs.python.org/3.2/reference/grammar.html" rel="nofollow">http://docs.python.org/3.2/reference/grammar.html</a> ) did not help me to understand what the optional element might be.</p>
<p>Likewise for the argument of a function (or lambda function) declaration : </p>
<pre><code>arguments = (arg* args, identifier? vararg, expr? varargannotation,
                     arg* kwonlyargs, identifier? kwarg,
                     expr? kwargannotation, expr* defaults,
                     expr* kw_defaults)
</code></pre>
<p>I can identify :</p>
<ul>
<li><code>arg* args</code> and <code>expr* defaults</code> : "basic" arguments and their default values</li>
<li><code>identifier? vararg</code> and <code>expr? varargannotation</code>: used for the capture of a variable number of arguments (+annotation), such as <code>def f(first, *others : 'annotation'):</code></li>
<li><code>identifier? kwarg</code> and <code>expr? kwargannotation</code> : same thing for named parameters</li>
</ul>
<p>but I can't figure out what are <strong><code>arg* kwonlyargs</code></strong> and <strong><code>expr* kw_defaults</code></strong></p>
<p>I'm looking for some sample code that would use these three features so I can understand their meaning/use.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Old question, but still open. So:</p>
<ul>
<li><p><strong><code>expr? returns</code></strong> is used for the return type hint of functions. E.g.</p>
<pre><code>def greeting(name) -&gt; str:
    return 'Hello ' + name
</code></pre>
<p>results in an <code>ast.Name</code> instance with <code>id = 'str'</code> in the <code>result</code> field of the <code>FunctionDef</code> object. For more info on type hints see the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">documentation</a> and <a href="https://www.python.org/dev/peps/pep-0484" rel="nofollow noreferrer">PEP 484</a>.</p></li>
<li>As mentioned in a comment, <strong><code>arg* kwonlyargs</code></strong> are <a href="https://www.python.org/dev/peps/pep-3102/" rel="nofollow noreferrer">keyword-only arguments</a>, i.e. keyword arguments that appear after the varargs. (The reasoning behind this is that you may want to define a function that accepts both a variable amount of arguments and optional keyword arguments at the same time. Kwargs appearing before the varargs cannot be optional as you have to explicitly specify all of them on the calling site before appending varargs.)</li>
<li><strong><code>expr* kw_defaults</code></strong> is a list of default values for each kwonlyarg. If a kwonlyarg has no default, it is represented by <code>None</code> in the list.</li>
</ul>
</div>
<span class="comment-copy"><code>kwonlyargs</code> is probably for things like <code>def func(x, *, y=None)</code> -- you can only specify <code>y</code> as a keyword argument.</span>
