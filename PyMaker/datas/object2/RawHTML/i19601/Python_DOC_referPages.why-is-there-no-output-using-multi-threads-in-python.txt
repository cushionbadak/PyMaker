<div class="post-text" itemprop="text">
<p>I'm reading Programming Python 4th Edition.</p>
<p>Following are the codes(Python3.2):</p>
<pre><code>import _thread

def action(i):
    print(i ** 32)

class Power:
    def __init__(self, i):
        self.i = i
    def action(self):
        print(self.i ** 32)

_thread.start_new_thread(action,(2,))
_thread.start_new_thread((lambda: action(2)), ())

obj = Power(2)
_thread.start_new_thread(obj.action,())
</code></pre>
<p>When I run it, there is no output on screen:</p>
<pre><code>$python3 thread-example.py
$
</code></pre>
<p>Does anyone have ideas about this?</p>
</div>
<div class="post-text" itemprop="text">
<p>When the main thread exits, the entire process exits.</p>
<p>You will need to make the main thread wait until the other threads complete.  There is no provision for this in the <code>_thread</code> API (it's so low-level).</p>
<p>You can use <code>threading.Thread.join()</code>, if you're willing to use a better API.</p>
</div>
<div class="post-text" itemprop="text">
<p>The underscore <code>_</code> means that it is a private API (<code>thread</code> module had been obsolete since 2005); you should use <code>threading</code> module instead:</p>
<pre><code>from threading import Thread

# ...
Thread(target=action, args=[2]).start()
Thread(target=lambda: action(2)).start()
Thread(target=obj.action).start()
</code></pre>
<p>You don't need to call <code>.join()</code> method explicitly; non-daemon threads are joined automatically before the main thread exits.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you use <code>threading</code> module (check <a href="https://stackoverflow.com/q/5568555/155813">here</a>)? In your example the main thread exits before child threads can print anything. For example, if you add the following at the end of your example, works on my system:</p>
<pre><code>import time
time.sleep(5)
</code></pre>
<p>But still you can't guarantee that main thread will not exit  before all child threads exits in more complicated cases. You have following choices:</p>
<ul>
<li>Set flags from each child thread and keep checking the flags from main thread before exiting (bad approach).</li>
<li>Use <a href="http://docs.python.org/3/library/time.html#time.sleep" rel="nofollow noreferrer"><code>time.sleep</code></a> to sleep for maximum time all child threads can take to exit (also a bad approach).</li>
<li>Use <a href="http://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow noreferrer"><code>threading.Thread.join</code></a> to wait until each child exits (good approach). (as evident from other answers)</li>
</ul>
</div>
