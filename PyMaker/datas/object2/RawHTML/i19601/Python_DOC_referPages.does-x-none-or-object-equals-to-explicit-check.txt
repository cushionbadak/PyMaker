<div class="post-text" itemprop="text">
<p>I have function declaration like:</p>
<pre><code>def function(list_of_objects = None)
</code></pre>
<p>and if *list_of_objects* not passed (is None) I need to define it like empty list. The explicit way is:</p>
<pre><code>def function(list_of_objects = None):
    if not list_of_objects:
        list_of_objects = list()
</code></pre>
<p>or</p>
<pre><code>def function(list_of_objects = None):
    list_of_objects = list() if not list_of_objects else list_of_objects
</code></pre>
<p>Does above code equals the next one?</p>
<pre><code>def function(list_of_objects = None):
    list_of_objects = list_of_objects or list()
</code></pre>
<p>I tested it, but I'm still not sure</p>
<pre><code>&gt;&gt;&gt; def func(my_list = None):
...     my_list = my_list or list()
...     print(type(my_list), my_list)
... 
&gt;&gt;&gt; func()
(&lt;type 'list'&gt;, [])
&gt;&gt;&gt; func(['hello', 'world'])
(&lt;type 'list'&gt;, ['hello', 'world'])
&gt;&gt;&gt; func(None)
(&lt;type 'list'&gt;, [])
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The idiomatic way is:</p>
<pre><code>def function(list_of_objects=None):
    if list_of_objects is None:
        list_of_objects = []
</code></pre>
<p><code>None</code> is a singleton so you can use <code>is</code> operator for comparison.</p>
<p>Your code tests truthness of <code>list_of_objects</code> (all <code>if</code> and <code>or</code> variants are equivalent in this case). <a href="http://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow">The following values are considered false in Python</a>:</p>
<ul>
<li><p>None</p></li>
<li><p>False</p></li>
<li><p>zero of any numeric type, for example, <code>0</code>, <code>0.0</code>, <code>0j</code>.</p></li>
<li><p>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</p></li>
<li><p>any empty mapping, for example, <code>{}</code>.</p></li>
<li><p>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False.</p></li>
</ul>
<p>All other values are considered true â€” so objects of many types are always true.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, since <code>None</code> is not the only false object. Also included are <code>[]</code>, <code>()</code>, <code>0</code>, and of course <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The usual practice is:</p>
<pre><code>def function(list_of_objects=None):
    if list_of_objects is None:
        list_of_objects = []
    ...
</code></pre>
<p>Use <em>None</em> because it is easy to distinguish from other false values such as an empty list or an empty tuple.</p>
<p>Use an <code>is None</code> test instead of equality test because <em>None</em> is a singleton (this is the preferred practice, per <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a>).</p>
</div>
<span class="comment-copy"><i>def function(list_of_objects = list())</i> is not pythonic ;)</span>
<span class="comment-copy">def function(list_of_objects=list()) is not only unpythonic, it is also incorrect (try <code>def f(l=[]): l.append(1); print l</code>, then call f three times).</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/1132941/20862">stackoverflow.com/q/1132941/20862</a></span>
<span class="comment-copy">Ok, ok, I'm not going to do that )</span>
<span class="comment-copy">your tests are reversed. You probably meant: <code>if not L: L = []</code> and <code>L = L if L else []</code> then it is equivalent to: <code>L = L or []</code></span>
<span class="comment-copy">The previous version was <i>if list_of_objects is None</i>, see edit marks <a href="http://stackoverflow.com/posts/14430662/revisions">stackoverflow.com/posts/14430662/revisions</a></span>
<span class="comment-copy">then the first version is the correct one. I've added description of how truthness is determined in Python</span>
<span class="comment-copy">Note that in 2.x, <code>__bool__()</code> is <code>__nonzero__()</code>.</span>
<span class="comment-copy">@Lattyware: yes. The question has <code>python-3.x</code> tag so I haven't mentioned it.</span>
<span class="comment-copy">@J.F.Sebastian Of course, just a bit of extra information, nothing wrong with your answer.</span>
<span class="comment-copy">look example listing</span>
<span class="comment-copy">Can you explain more?</span>
<span class="comment-copy"><code>&gt;&gt;&gt; 0 or 42</code> <code>42</code> <code>&gt;&gt;&gt; [] or 42</code> <code>42</code> <code>&gt;&gt;&gt; () or 42</code> <code>42</code> <code>&gt;&gt;&gt; False or 42</code> <code>42</code></span>
<span class="comment-copy">A or B returns B if both are <i>not True</i>, so in my case, I think, I can use list() in place of B. I ask you, does <i>list_of_objects = list() if list_of_objects else list_of_objects</i> makes the same thing? May be there are some hidden issues? (question edited)</span>
<span class="comment-copy">Empty list in boolean context returns False. Similarly, None in boolean context returns False. You would not be able to distinguish empty list from None when using the code from your original question. Because of that you must test <code>... is None</code>.</span>
