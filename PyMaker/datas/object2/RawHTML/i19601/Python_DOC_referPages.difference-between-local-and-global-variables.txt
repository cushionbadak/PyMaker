<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/2322068/python-passing-list-as-argument">Python passing list as argument</a> </p>
</blockquote>
<p>I looked for many topics about that, but I can't understand what happen really.</p>
<p>I have this code:</p>
<pre><code>def altera(L1, L2):
    for elemento in L2:
        L1.append(elemento)
    L2 = L2 + [4]
    L1[-1] = 10
    del L2[0]
    return L2[:]

Lista1 = [1,2,3]
Lista2 = [1,2,3]

Lista3 = altera(Lista1, Lista2)

print Lista1
print Lista2
print Lista3
</code></pre>
<p>and the result is:</p>
<pre><code>[1, 2, 3, 1, 2, 10]
[1, 2, 3]
[2, 3, 4]
</code></pre>
<p>I can't understand how the <code>Lista1</code> was modified and <code>Lista2</code> not. However before test the code, I thought that <code>Lista1</code> and <code>Lista2</code> would stay unmodified because they are global variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>L1.append(elemento)</code> you are calling a method that actually changes the list named by the variable <code>L1</code>. All the other commands setting the values of <code>L1</code> and <code>L2</code> are actually just creating new names for new variables.</p>
<p>This version doesn’t change anything:</p>
<pre><code>def altera(L1, L2):
    for elemento in L2:
        # create a new list and assign name L1
        L1 = L1 + [elemento]
    # create a new list and assign name L2
    L2 = L2 + [4]
    return L2

Lista1 = [1,2,3]
Lista2 = [1,2,3]

Lista3 = altera(Lista1, Lista2)

print Lista1
print Lista2
print Lista3
</code></pre>
<p>While this one does:</p>
<pre><code>def altera(L1, L2):
    for elemento in L2:
        # Call method on L1 that changes it
        L1.append(elemento)
    # Call method on L2 that changes it
    L2.append(4)
    # Change object pointed to by name L1 -- Lista1
    L1[-1] = 10
    # Change object pointed to by name L2 -- Lista2
    del L2[0]
    return L2[:]

Lista1 = [1,2,3]
Lista2 = [1,2,3]

Lista3 = altera(Lista1, Lista2)

print Lista1
print Lista2
print Lista3
</code></pre>
<p>However there is a tricky matter with <code>L += [2]</code> which is not exactly the same as <code>L = L + 2</code>. The <a href="http://docs.python.org/2/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow">Python Language Reference</a>  section on Augmented assignment statements explains the difference: </p>
<blockquote>
<p>An augmented assignment expression like x += 1 can be rewritten as x = x + 1 to achieve a similar, but not exactly equal effect. In the augmented version, x is only evaluated once. Also, when possible, the actual operation is performed in-place, meaning that rather than creating a new object and assigning that to the target, the old object is modified instead.”</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Lists are passed by reference in Python. <code>Lista1</code> is modified because you directly call <code>.append</code>:</p>
<pre><code>for elemento in L2:
    L1.append(elemento)
</code></pre>
<p><code>Lista2</code> is not modified because you did not modify the list. You used the addition operator, <code>L2 = L2 + [4]</code>, which <strong>does not modify</strong> <code>L2</code>. Instead, it creates a new list and returns the result.</p>
<p>If you Google the term "pass by reference" you should be able to find some good explanatory examples in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two different things happening in your function:</p>
<pre><code>def altera(L1, L2):
    for elemento in L2:
        L1.append(elemento)
        # [1] this ^ alters L1 in place
    L2 = L2 + [4]
    # [2] this ^ creates a new list
    L1[-1] = 10
    del L2[0]
    return L2[:]
</code></pre>
<p>To expand on the comments I added inline:</p>
<ol>
<li>inside <code>altera</code>, the variable <code>L1</code> <em>is</em> whatever you passed in (so it <em>is</em> <code>Lista1</code>). It isn't a <em>copy</em>, a new list with the same contents - it refers to the same actual object</li>
<li><p>when you assign <code>L2 = L2 + [4]</code> you do two things:</p>
<ol>
<li>create a new list with the value <code>L2 + [4]</code></li>
<li>set <code>L2</code> to point to this new list, instead of whatever you passed in</li>
</ol>
<p>If we re-name the variable it becomes explicit, and works <em>exactly</em> the same:</p>
<pre><code>L3 = L2 + [4]
del L3[0]
return L3[:]
</code></pre>
<p>Alternatively, if you want to modify the original <code>L2</code> in place (ie, to actually modify <code>Lista2</code>), you would do</p>
<pre><code>L2.append(4)
del L2[0]
return L2[:]
</code></pre>
<p>Note the last line still means <code>Lista3</code> will be a different list object to <code>Lista2</code>, but it will have the same values. If you just <code>return L2</code>, the <code>Lista3</code> will be <em>identical</em> with <code>L2</code>, so they'll be two names for the same list object.</p></li>
</ol>
<p>If you want to <em>prevent</em> this behaviour, you can call <code>altera</code> like this:</p>
<pre><code>Lista3 = altera(Lista1[:], Lista2[:])
</code></pre>
<p>now, inside <code>altera</code>, it will be working on its own copies of the arguments, and can't affect the original <code>Lista1</code> and <code>Lista2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you assigned a new value to the name <code>L2</code> with the <code>L2 = L2 + [4]</code> statement, it no longer refers to <code>Lista2</code>. Most of your other statements change the value of the objects to which they already refer.</p>
</div>
<span class="comment-copy">It's a partial duplicate, but I don't think that covers both the OP's cases.</span>
<span class="comment-copy">But... when I put the line 4th as 'L2 += [4]', L2 is modified, why?</span>
<span class="comment-copy">@PTF In short, because <code>+=</code> is weird. It's not a shorthand for <code>L2 = L2 + [4]</code>, it calls <code>__iadd__</code> (instead of <code>__add__</code>) which does in-place modification instead of creating a new object (but only in the case of lists and some other types that define <code>__iadd__</code>).</span>
<span class="comment-copy">"Lists are passed by reference" is misleading in two ways: (1) Lists aren't special, everything is passed the same way. (2) Nothing's passed by reference unless you use a weird nonstandard definition of "pass by reference". "Call by sharing/object" has been proposed as avoiding these issues.</span>
<span class="comment-copy">You're absolutely right. I was careless in my use of the term "pass-by-reference." Unfortunately, I don't know of a canonical term for "a reference passed by value. It would be great if we standardized on "call by sharing" or "call by object," but they don't seem to be commonly known terms.</span>
<span class="comment-copy">But... when I put the line 4th as 'L2 += [4]', L2 is modified, why?</span>
<span class="comment-copy">Because the <code>+=</code> operator changes the object on the left side of the assignment. It's called an "in-place" operator. <code>x += y</code> is equivalent to <code>x = operator.iadd(x, y)</code> and <code>list.iadd(x, y)</code> returns the modified list in this case.</span>
<span class="comment-copy">See the docs on <a href="http://docs.python.org/3/library/operator.html?highlight=inplace%20operators#inplace-operators" rel="nofollow noreferrer">Inplace Operators</a>.</span>
