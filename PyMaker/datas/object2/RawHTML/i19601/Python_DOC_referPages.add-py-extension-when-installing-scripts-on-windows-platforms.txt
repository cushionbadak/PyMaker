<div class="post-text" itemprop="text">
<p>How can I configure <code>setup.py</code> to install scripts with a <code>.py</code> prefix on Windows platforms but without the prefix on all others? The problem I'm trying to solve is that <a href="http://docs.python.org/3/faq/windows.html#how-do-i-make-python-scripts-executable" rel="nofollow">Windows requires a <code>.py</code> extension to recognize and execute Python scripts</a>.</p>
<p>I have a package set up like the following:</p>
<pre><code>MyPackage
├── CHANGES
├── ...
├── scripts
│   └── myprogram
├── setup.py
└── mypackage
    ├── __init__.py
    ├── ...
    └── myprogram.py
</code></pre>
<p>In my setup.py file I declare <code>scripts/myprogram</code> as an installable script with</p>
<pre><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from setuptools import setup

...

setup(
    name='MyPackage',
    ...
    packages=['mypackage'],
    scripts=['scripts/myprogram'],
    ...
)
</code></pre>
<p>The <code>myprogram</code> script is just a thin wrapper that simply calls <code>mypackage.myprogram.main()</code>:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
from mypackage import myprogram
myprogram.main()
</code></pre>
<p>On *nix platforms, this installs <code>myprogram</code> as an executable by the name of <code>myprogram</code>, which is what I desire, but on Windows, it also installs as <code>myprogram</code> in the <code>C:\PythonXX\Scripts</code> directory, and is thus not recognized on the command line. How can I get the setup script to install <code>myprogram</code> as <code>myprogram.py</code> on Windows, so that Windows recognizes the file type to make it executable?</p>
</div>
<div class="post-text" itemprop="text">
<p>I found the answer: a keyword argument to <code>setup()</code> called called <code>entry_points</code> with a dictionary containing <code>'console_scripts'</code>, as described in <a href="https://stackoverflow.com/a/17933/38140">this answer</a> to a <a href="https://stackoverflow.com/questions/17893/whats-the-best-way-to-distribute-python-command-line-tools">related question</a>.</p>
<p>The new <code>setup</code> call looks like this:</p>
<pre><code> setup(
    name='MyPackage',
    ...
    packages=['mypackage'],
    entry_points={
        'console_scripts': [
            'myprogram = mypackage.myprogram:main'
        ]
    }
    ...
)
</code></pre>
<p>After making those changes I then deleted the <code>scripts</code> directory and the <code>myprogram</code> file from it.</p>
<p>Now when running the installer, distribute creates two files under <code>C:\PythonXX\Scripts</code>: <code>myprogram-script.py</code> and <code>myprogram.exe</code>. As a result, the user can now enter <code>myprogram</code> on the command line of either *nix or Windows platforms and always have it run the same program. Very handy!</p>
</div>
