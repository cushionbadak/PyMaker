<div class="post-text" itemprop="text">
<p>I'm able to successfully retrieve the 5 sub-keys from my windows 7 machine registry hive "HKEY_LOCAL_MACHINE" with the code below.</p>
<pre><code>from _winreg import *

try:
    i = 0
    while True:
        subkey = EnumKey(HKEY_LOCAL_MACHINE, i)
        print subkey
        i += 1
except WindowsError:
    pass
</code></pre>
<p>My question is, how do I then enumerate the keys under those? I want to end up listing all the keys in the SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Signatures\Unmanaged folder but I can't figure out how to step my way down there.</p>
<p>In response to the first comment, I ran this code on my machine and while it didn't error out, it didn't produce results.</p>
<pre><code>from _winreg import *

aReg = ConnectRegistry(None,HKEY_LOCAL_MACHINE)
aKey = OpenKey(aReg, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Signatures\Unmanaged")
for i in range(1024):
    try:
        keyname = EnumKey(aKey, i)
        asubkey = OpenKey(aKey, keyname)
        val = QueryValueEx(asubkey, "Description")
        print val
    except WindowsError:
        break
</code></pre>
<p>A regedit or reg query shows 6 values in that folder but I can't get a python script to show me those six.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't have the same registry keys to search but the following code will list all the subkeys in HKEY_LOCAL_MACHINE\Software. I think if you change the value of the keyVal string to your directory it will work.</p>
<p>The <code>try ... except</code> bloc is this way because EnumKey will fail. I didn't do it as a for loop because I dont know how to get the correct length of aKey.  </p>
<pre><code>keyVal = r"Software"
aKey = OpenKey(HKEY_LOCAL_MACHINE, keyVal, 0, KEY_ALL_ACCESS)
try:
    i = 0
    while True:
        asubkey = EnumKey(aKey, i)
        print(asubkey)
        i += 1
except WindowsError:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does something like this work?</p>
<pre><code>import _winreg

def subkeys(key):
    i = 0
    while True:
        try:
            subkey = _winreg.EnumKey(key, i)
            yield subkey
            i+=1
        except WindowsError:
            break

def traverse_registry_tree(key=_winreg.HKEY_LOCAL_MACHINE, tabs=0):
    for k in subkeys(key):
        print '\t'*tabs + str(k)
        traverse_registry_tree(k, tabs+1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works, and prints out the list of all subkeys (fixed version of @Broseph's answer)</p>
<pre><code>import _winreg

def subkeys(key):
    i = 0
    while True:
        try:
            subkey = _winreg.EnumKey(key, i)
            yield subkey
            i+=1
        except WindowsError as e:
            break

def traverse_registry_tree(hkey, keypath, tabs=0):
    key = _winreg.OpenKey(hkey, keypath, 0, _winreg.KEY_READ)
    for subkeyname in subkeys(key):
        print '\t'*tabs + subkeyname
        subkeypath = "%s\\%s" % (keypath, subkeyname)
        traverse_registry_tree(hkey, subkeypath, tabs+1)

keypath = r"SOFTWARE\\Microsoft\\Windows"

traverse_registry_tree(_winreg.HKEY_LOCAL_MACHINE, keypath)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For iterating through keys of Windows registry, you would need <code>EnumKey()</code> from <code>_winreg</code> module. Given below is the definition for <code>EnumKey()</code> :-</p>
<blockquote>
<p>def EnumKey(key, index):</p>
<ul>
<li>Enumerates subkeys of an open registry key.</li>
<li>key is an already open key, or any one of the predefined HKEY_* constants.   </li>
<li>index is an integer that identifies the index of the key to retrieve.</li>
</ul>
</blockquote>
<p>Note that this method, takes index as an argument, and will provide you the key only for the given index. Therefore, in order to get all the keys, you need to increment the index by one and continue until you encounter <code>WindowsError</code>.</p>
<p>Refer to <a href="https://pabitrap.wordpress.com/2016/09/08/accessing-windows-registry-using-pythons-winreg-module/" rel="nofollow">this post</a> for a detailed understanding on the same. The Github link for the code can be found in the post.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just want to add a perhaps more pythonic solution.</p>
<pre><code>from _winreg import *
import itertools

def subkeys(path, hkey=HKEY_LOCAL_MACHINE, flags=0):
    with suppress(WindowsError), OpenKey(hkey, path, 0, KEY_READ|flags) as k:
        for i in itertools.count():
            yield EnumKey(k, i)
</code></pre>
<p>You can now access the keys as expected </p>
<pre><code>for key in subkeys(r'path\to\your\key'):
    print key
</code></pre>
<p>For python versions <strong>&lt; 3.4</strong> that lack <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer">suppress()</a>, I recommend adding it to your project:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def suppress(*exceptions):
    try:
        yield
    except exceptions:
        pass
</code></pre>
<blockquote>
<p><strong>Note:</strong> If you have trouble reading some values you might be reading from the wrong registry view. Pass <code>KEY_WOW64_64KEY</code> or <code>KEY_WOW64_32KEY</code> to the <code>flags</code> parameter). Using <a href="https://docs.python.org/2/library/_winreg.html#_winreg.PyHKEY.__enter__" rel="nofollow noreferrer"><code>OpenKey()</code></a> as context manager was introduced in <strong>python 2.6</strong>.</p>
</blockquote>
</div>
<span class="comment-copy">I think this answer has all the information you need: <a href="http://stackoverflow.com/questions/5227107/python-code-to-read-registry" title="python code to read registry">stackoverflow.com/questions/5227107/â€¦</a></span>
<span class="comment-copy">hmm, let me modify my question.</span>
<span class="comment-copy">Neither of the examples listed on that link work on my computer but my cmd is running as admin... I'm wondering if there is a different issue.</span>
<span class="comment-copy">Problem solved, the issue was I needed to uninstall my 32 bit python and re-install 64 bit python.</span>
<span class="comment-copy">No because <code>EnumKey</code> returns a string which you then try and pass in as a <code>PyHKEY</code> which doesn't work</span>
<span class="comment-copy">Within traverse_registry_tree(hkey, keypath, tabs=0), the call  traverse_registry_tree(subkeypath, tabs+1) seems to omit the first argument, which should be hkey, I think.</span>
<span class="comment-copy">Good catch, thanks! Fixed.</span>
