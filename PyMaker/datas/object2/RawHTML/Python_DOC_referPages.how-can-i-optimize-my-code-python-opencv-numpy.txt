<div class="post-text" itemprop="text">
<pre><code>import cv2
import numpy as np

img = cv2.imread('/home/user/Vision Artificial/fig_2.png')
tam = np.size(img, 0), np.size(img, 1)
cadena = '[255   0   0]'

for i in range(tam[0]):
    for j in range(tam[1]):
        if(str(img[i, j]) != cadena):
            img[i, j] = [255, 255, 255]

cv2.imwrite('/home/user/Vision Artificial/out.png', img)
</code></pre>
<p><code>cadena</code> contains the color that I want to save</p>
<p>For example: </p>
<p><code>input:</code> </p>
<p><a href="https://i.stack.imgur.com/vKAP2.png" rel="nofollow noreferrer">fig_2.png</a></p>
<pre><code>output: 
</code></pre>
<p><a href="https://i.stack.imgur.com/YnAZp.png" rel="nofollow noreferrer">out.png</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Conversion of the integer array to a string is slow.
Instead, compare integer arrays directly, using numpy.array_equal. </p>
<pre><code>    import cv2
    import numpy as np
    import time

    start_time = time.time()
    img = cv2.imread('/home/user/Vision Artificial/fig_2.png')
    tam = np.size(img, 0), np.size(img, 1)
    target_BGR = [255, 0, 0]

    for i in range(tam[0]):
        for j in range(tam[1]):
            if not np.array_equal(target_BGR, img[i, j]):
                img[i, j] = [255, 255, 255]

    cv2.imwrite('/home/user/Vision Artificial/out.png', img)

    print(time.time() - start_time)
</code></pre>
<p>Note: It's also possible to avoid the explicit loops and use <code>np.apply_along_axis</code> with <code>axis=2</code> but this does not provide performance benefits here.</p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/6483489/change-the-color-of-all-pixels-with-another-color" title="change the color of all pixels with another color">stackoverflow.com/questions/6483489/â€¦</a></span>
<span class="comment-copy">For the moment I can't do this works for my. I'll keep trying. Thanks</span>
<span class="comment-copy">This reduce the execution time from around 60 to 10 seconds. I did't know about np.array_equal(), I like it. Thanks</span>
