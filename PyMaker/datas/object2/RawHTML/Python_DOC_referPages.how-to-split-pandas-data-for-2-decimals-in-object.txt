<div class="post-text" itemprop="text">
<p>Consider a dataframe in Pandas, where one of the many columns have data that has TWO decimals in the column.
Like </p>
<pre><code>13.343.00
12.345.00
98.765.00
</code></pre>
<p>How can one get a new column (float) where values are stored in only 1 decimal format stripping that last part of <code>14.234(.00)</code>. </p>
<p>Desired output should be a new column like</p>
<pre><code>13.343
12.345
98.765
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the digits after the second period are not always 0s (and not always two), the following code is more robust:</p>
<pre><code>df["col"] = df["col"].str.extract("(.+)\.[0-9]+").astype(float)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>#remove last 3 values
df['col'] = df['col'].str[:-3].astype(float)
</code></pre>
<p>Or:</p>
<pre><code>#get values before last .
df['col'] = df['col'].str.rsplit('.', 1).str[0].astype(float)
</code></pre>
<p>Or:</p>
<pre><code>#one or zero integer \d* \. and integer \d+ pattern
df["col"] = df["col"].str.extract("(\d*\.\d+)").astype(float)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>print(df)
         col
0  13.343.00
1  12.345.00
2  98.765.00

df.col=df.col.str.rstrip('.00')
print(df)

      col
0  13.343
1  12.345
2  98.765
</code></pre>
<p>You can convert it back to <code>float</code> if you like by <code>astype(float)</code></p>
<p>Note : You should not use this if you have all 0s example: <code>00.000.00</code> instead use the second solution.</p>
<p><strong>If the second decimal is not always 0 use:</strong></p>
<pre><code>df.col.str.rsplit(".",1).str[0]
</code></pre>
</div>
<span class="comment-copy">This can also work: df['col'].str.extract('(.+)\.')</span>
<span class="comment-copy">But how about something like <code>.765.00</code>?</span>
<span class="comment-copy">@DYZ - hmmm, I think I cannot see this data in data sample ;)</span>
<span class="comment-copy">Just saying... It never hurts to be alert...</span>
<span class="comment-copy">@DYZ - But for you - <code>df["col"] = df["col"].str.extract("(\d*\.\d+)").astype(float)</code></span>
<span class="comment-copy">(Taking a bow.)</span>
