<div class="post-text" itemprop="text">
<p>I have a working register API in my DRF backend. I want to be able to perform updates on user profiles with PUT requests. How can I write a method that validates the user and updates the user with the matching id? I also want write a method that handles the DELETE requests and deletes the user with the id matching the request.</p>
<pre><code># serializers.py

class RegisterSerializer(ModelSerializer):
class Meta:
    model = User
    fields = (
        'account_type',
        'id',
        'username',
        'name',
        'email',
        'phone',
        'country',
        'city',
        'adress_1',
        'adress_2',
        'zip_code',
        'photo',
        'password',
    )

    ...

def create(self, validated_data):
    user = super(RegisterSerializer, self).create(validated_data)
    user.set_password(validated_data['password'])
    user.save()

    return user

# api.py

class RegisterAPI(CreateAPIView):
permission_classes = (AllowAny,)
serializer_class = RegisterSerializer

def post(self, request, *args, **kwargs):
    serializer = self.get_serializer(data=request.data)
    serializer.is_valid(raise_exception=True)

    self.perform_create(serializer)

    token = Token.objects.create(user=serializer.instance)
    token_data = {"token": token.key}

    return Response({
        "token": token.key,
        "user": {**serializer.data}
    })

# urls.py

urlpatterns = [
    ...
    path('api/auth/register', RegisterAPI.as_view()),
    ...
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read about <code>put</code> method more detailed information <a href="http://www.django-rest-framework.org/tutorial/3-class-based-views/#rewriting-our-api-using-class-based-views" rel="nofollow noreferrer">in the docs</a></p>
<pre><code>def put(self, request, pk, format=None):
    user = self.get_object(pk)
    serializer = UserSerializer(user, data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
</code></pre>
</div>
