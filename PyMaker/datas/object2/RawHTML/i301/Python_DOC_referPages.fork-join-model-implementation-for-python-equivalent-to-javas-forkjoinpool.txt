<div class="post-text" itemprop="text">
<p>I am looking for an implementation of the <a href="https://en.wikipedia.org/wiki/Fork%E2%80%93join_model" rel="nofollow noreferrer">fork-join model</a> for Python. As Java's ForkJoinPool, it should allow to split (fork) the work of a task into several sub tasks recursively. Once the sub tasks are completed, the results are joined and returned. Ideally, it should support threads and processes similar to the ThreadPoolExecutor and ProcessPoolExecutor in concurrent.futures, but threads are more important for now. It must allow to limit the number of threads (I want to have one thread per core). I am aware that this will only be useful if the code releases the GIL.</p>
<p>Example from Wikipedia to clarify fork-join model:</p>
<pre><code>solve(problem):
    if problem is small enough:
        solve problem directly (sequential algorithm)
    else:
        for part in subdivide(problem)
            fork subtask to solve(part)
        join all subtasks spawned in previous loop
        return combined results
</code></pre>
<p>Is there such a library in Python? I could not find one.</p>
</div>
<div class="post-text" itemprop="text">
<p>I figured that what you want is to collect the result, multiprocessing.starmap() might be the choice, here goes the example</p>
<pre><code>import multiprocessing as mp

def func(x, y):
    return x + y

l = list()
with mp.Pool(mp.cpu_count()) as p:
    l = p.starmap(func, [(1,2), (2,3), (3,4)])

print(l)  # result in [3, 5, 7]
</code></pre>
</div>
<span class="comment-copy">You can try: <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/3/library/multiprocessing.html</a></span>
<span class="comment-copy">Yes, but then I have to implement the fork-join model on my own.</span>
<span class="comment-copy">Sorry, I forgot to mention that the fork-join model works recursively. Now, you might say that then I can just call starmap again inside the function. Unfortunately, this does not work because if the recursion is deeper than the number of threads available, it will just block.</span>
