<div class="post-text" itemprop="text">
<p>Is there a principled reason why having a trailing directory delimiter in an argument to <code>os.path.basename</code> would yield an empty string? I'm not sure I can make any sense of that return value beyond it seeming like an unhandled implementation edge case or an implementation side effect.</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename('/tmp')
'tmp'
&gt;&gt;&gt; os.path.basename('/tmp/')
''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for <code>basename</code> states this:</p>
<blockquote>
<p>Return the base name of pathname path. This is the second element of the pair returned by passing path to the function split().</p>
</blockquote>
<p>The documentation for <code>os.path.split</code> says this (emphasis added):</p>
<blockquote>
<p>Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; <strong>if path ends in a slash, tail will be empty</strong>. </p>
</blockquote>
<p>Calling <code>os.path.split</code> on <code>"/tmp/"</code> yields <code>('/tmp', '')</code>. Because the second element of the pair is <code>''</code>, basename returns <code>''</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like this is mentioned in the documentation</p>
<p><a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer">https://docs.python.org/3/library/os.path.html#os.path.basename</a></p>
<blockquote>
<p>Note that the result of this function is <em><strong>different</strong></em> from the Unix
  basename program; where basename for '/foo/bar/' returns 'bar', the
  basename() function returns an empty string ('').</p>
</blockquote>
<p>Apparently it's just by choice.</p>
</div>
<span class="comment-copy">This behaviour leads to the function always returning nothing or a filename, but never a directory.</span>
<span class="comment-copy">Not so much due to choice, but simply an artifact of its implementationâ€”as per @Bryan's answer.</span>
