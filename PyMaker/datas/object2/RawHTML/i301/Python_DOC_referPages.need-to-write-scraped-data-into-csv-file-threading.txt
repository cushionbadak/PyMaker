<div class="post-text" itemprop="text">
<p>Here is my code:</p>
<pre><code>from download1 import download
import threading,lxml.html
def getInfo(initial,ending):
    for Number in range(initial,ending):
        Fields = ['country', 'area', 'population', 'iso', 'capital', 'continent', 'tld', 'currency_code',
                  'currency_name', 'phone',
                  'postal_code_format', 'postal_code_regex', 'languages', 'neighbours']
        url = 'http://example.webscraping.com/places/default/view/%d'%Number
        html=download(url)
        tree = lxml.html.fromstring(html)
        results=[]
        for field in Fields:
            x=tree.cssselect('table &gt; tr#places_%s__row &gt;td.w2p_fw' % field)[0].text_content()
            results.append(x)#should i start writing here?
downloadthreads=[]
for i in range(1,252,63): #create 4 threads
    downloadThread=threading.Thread(target=getInfo,args=(i,i+62))
    downloadthreads.append(downloadThread)
    downloadThread.start()

for threadobj in downloadthreads:
    threadobj.join() #end of each thread

print "Done"
</code></pre>
<p>So <code>results</code> will have the values of <code>Fields</code> ,I need to write the data with <code>Fields</code> as top row (only once) then the values in <code>results</code> into CSV file.
I am not sure i can open the file in the function because threads will open the file multiple times simultaneously.</p>
<p>Note: i know threading isn't desirable when crawling but i am just testing  </p>
</div>
<div class="post-text" itemprop="text">
<p>I think you should consider using some kind of <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow noreferrer">queuing</a> or thread pools. <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow noreferrer">Thread pools</a> are really useful if you want create several threads (not 4, I think you would use more than 4 threads, but 4 threads at a time).</p>
<p>An example of Queue technique can be found <a href="https://stackoverflow.com/a/11984760/5738367">here</a>.</p>
<p>Of course, you can label the files with its threads id, for example: "results_1.txt",  "results_2.txt" and so on. Then, you can merge them after all threads finished.</p>
<p>You can use the basic concepts of Lock, Monitor, and so on, however I am not the biggest fan of them. An example of locking can be found <a href="https://gist.github.com/rahulrajaram/5934d2b786ed2c29dc418fafaa2830ad" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">have you tried keeping the file open and then just append on it?</span>
<span class="comment-copy">can you include code in the answer ?</span>
<span class="comment-copy">Added some examples to my original answer.</span>
<span class="comment-copy">if you can edit my code to do it that would be great,these examples seems pretty hard to understand then modify to my actual code</span>
