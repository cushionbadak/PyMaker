<div class="post-text" itemprop="text">
<p>I need to covert a file in particular format.</p>
<p>Here is the example:</p>
<pre><code>&gt;&gt;&gt; x = "abc/xyz/abc/xyz/ab_c : abc/xyz/abc/xyz/ab_c,ab_c/xy_z/ab_c/xy_z/ab_c/xy_z,1"
</code></pre>
<p>I need to replace all the <code>/</code> with <code>_</code> except the ones which are before <code>,</code> and a space after <code>,</code>.</p>
<p>Output needed:</p>
<pre><code>&gt;&gt;&gt; 'abc_xyz_abc_xyz_ab_c : abc_xyz_abc_xyz/ab_c, ab_c_xy_z_ab_c_xy_z_ab_c/xy_z, 1'
</code></pre>
<p>I tried replacing <code>/</code> with <code>_</code> but in this case, I have no way to exclude <code>/</code> before <code>,</code>.</p>
<pre><code>&gt;&gt;&gt; x.replace("/", "_").replace(",", ", ")
'abc_xyz_abc_xyz_ab_c : abc_xyz_abc_xyz_ab_c, ab_c_xy_z_ab_c_xy_z_ab_c_xy_z, 1'
</code></pre>
<p>Is there any other way to achieve this? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> your splitted (at <code>'/'</code> ) text with itself shifted by 1 and put it back together using the correct in-betweens:</p>
<pre><code>x = "abc/xyz/abc/xyz/ab_c : abc/xyz/abc/xyz/ab_c,ab_c/xy_z/ab_c/xy_z/ab_c/xy_z,1"

parts = x.split("/")
pp = zip(parts,parts[1:])

l = []
for at,after in pp:
    if ',' in after:
        l.extend([at,'/'])
    else:
        l.extend([at,'_'])
l.append(after)  

# join and add spaces after ,
new_t = ''.join(l).replace(",",", ")
print(new_t) 
print('abc_xyz_abc_xyz_ab_c : abc_xyz_abc_xyz/ab_c, ab_c_xy_z_ab_c_xy_z_ab_c/xy_z, 1')
</code></pre>
<p>Output:</p>
<pre><code>abc_xyz_abc_xyz_ab_c : abc_xyz_abc_xyz/ab_c, ab_c_xy_z_ab_c_xy_z_ab_c/xy_z, 1
abc_xyz_abc_xyz_ab_c : abc_xyz_abc_xyz/ab_c, ab_c_xy_z_ab_c_xy_z_ab_c/xy_z, 1
</code></pre>
<hr/>
<p>The zipped thing looks like this:</p>
<pre><code># pp splitted zipped with itself, shifted by 1
[('abc', 'xyz'), ('xyz', 'abc'), ('abc', 'xyz'), ('xyz', 'ab_c : abc'), 
 ('ab_c : abc', 'xyz'), ('xyz', 'abc'), ('abc', 'xyz'), ('xyz', 'ab_c,ab_c'),
 ('ab_c,ab_c', 'xy_z'), ('xy_z', 'ab_c'), ('ab_c', 'xy_z'), ('xy_z', 'ab_c'),
 ('ab_c', 'xy_z,1')]
</code></pre>
<p>This code uses python 3 style printing - but it works as well in python 2</p>
</div>
<span class="comment-copy">Look into regular expressions; they'll handle this nicely.</span>
<span class="comment-copy">To clarify; what if the string was <code>"foo/bar/baz,qux/quz"</code>? Should the output be <code>"foo_bar/baz, qux/quz"</code> or <code>"foo_bar/baz, qux_quz"</code>?</span>
<span class="comment-copy">If string is <code>foo/bar/baz,qux/quz</code>, output should be <code>foo_bar/baz, qux/quz</code></span>
