<div class="post-text" itemprop="text">
<p>Take the list <code>Usernames</code> as shown below.</p>
<pre><code>Usernames = ["johnsmith"]
</code></pre>
<p>I have the variable <code>NewUsername</code> and I need to check if its value is already contained in the list. If not, an integer will be concatenated to the end of it.</p>
<p>Examples: </p>
<pre><code>NewUsername = "alexsmith"
Usernames = ["johnsmith", "alexsmith"]

NewUsername = "johnsmith"
Usernames = ["johnsmith", "alexsmith", "johnsmith1"]

NewUsername = "johnsmith"
Usernames = ["johnsmith", "alexsmith", "johnsmith1", "johnsmith2"]
</code></pre>
<p>Now, I know I can do this with something like this, but it would only check for the first 'level' of duplicate names.</p>
<pre><code>if NewUsername in Usernames:
    NewUsername = NewUsername + "1"
Usernames.append(NewUsername)
</code></pre>
<p><strong>Question:</strong> How can I handle all duplications in a similar manner?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe is a bit elaborate, but you could use a custom child class of a list. To give you an idea:</p>
<pre><code>from collections import Counter

class UsernameList(list):
    def __init__(self, *args):
        super(UsernameList, self).__init__()
        self._ucount = Counter()
        for e in args[0]:
            self.append(e)

    def append(self, el):
        if isinstance(el, str):            
            if self._ucount[el] == 0:
                super(UsernameList, self).append(el)
            else:
                fixel = el + str(self._ucount[el])
                super(UsernameList, self).append(fixel)
                self._ucount.update([fixel])
            self._ucount.update([el])
        else:
            raise TypeError("Only string can be appended")
</code></pre>
<p>Now you could do:</p>
<pre><code>Usernames = UsernameList(["johnsmith"]) #Username is ["johnsmith"]
Usernames.append("johnsmith") #Username becomes ["johnsmith", "johnsmith1"]
Usernames.append("johnsmith") #Username becomes ["johnsmith", "johnsmith1", "johnsmith2"]
</code></pre>
<p>Apart the new <code>__init__</code> and <code>append</code> methods, <code>UsernameList</code> has all the methods of a list, and works exactly as a list. Don't bother about the counter attribute, it's there to keep track of the usernames inputed and add the correct number in case of repetitions.<br/>
To have something more consistent you may need to override other methods: i'm just giving you an idea, far from writing a full working code here.<br/>
You may have a look at <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">the docs</a> for more details on which methods you may need to override.</p>
</div>
<span class="comment-copy">Use a dictionary <code>&lt;str, int&gt;</code> where int was the last value you appended, keep increasing int as necessary</span>
<span class="comment-copy">You can use <code>dict&lt;str,list&gt;</code> in case you want to remove any element at later stage</span>
<span class="comment-copy">@MitchelPaulin example?</span>
