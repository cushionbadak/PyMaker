<div class="post-text" itemprop="text">
<p>How do I merge the <em>views</em> of the items of two dicts in python?</p>
<p>My use case is: I have two private dictionaries in a class. I want the API to treat them as one, and provide an <code>items</code> method as such. The only way I know of is to combine them then provide a view on the two, but for large dictionaries this seems expensive. I'm thinking of sth like <code>a.items() + b.items()</code></p>
<p>Note: I don't care about key clashes.</p>
<p>This is what I'd like to improve:</p>
<pre><code>class A:
    _priv1 = {'a': 1, 'b': 2}
    _priv2 = {'c': 1, 'd': 2}

    def items(self):
        return {**self._priv1, **self._priv2}.items()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ChainMap</code>:</p>
<pre><code>from collections import ChainMap

class A:
    _priv1 = {'a': 1, 'b': 2}
    _priv2 = {'c': 1, 'd': 2}

    def items(self):
        return ChainMap(self._priv1, self._priv2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Merging views of dictionaries means nothing because a view always reflects the content of the corresponding dictionary. </p>
<p>So to have a different view, either you edit one of your dictionaries or you instantiate a new one (like you did), there is no way around it. See <a href="https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression">this</a>.</p>
<p>But maybe what you want is <code>itertools.chain</code> to iterate across multiple iterables. This solution doesn't insatiate. Or as other have said <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer"><code>collections.ChainMap</code></a>. I would use <code>chain</code> to iterate and <code>ChainMap</code> to make lookups.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer"><code>ChainMap</code></a>:</p>
<blockquote>
<p>A ChainMap groups multiple dicts or other mappings together to create a single, updateable view. If no maps are specified, a single empty dictionary is provided so that a new chain always has at least one mapping.</p>
</blockquote>
<pre class="lang-py prettyprint-override"><code>from collections import ChainMap
context = ChainMap(_priv1, _priv2, ...)
</code></pre>
<p>Example:</p>
<pre class="lang-py prettyprint-override"><code>In [3]: _priv1 = {1: 2, 3: 4}

In [4]: _priv2 = {5: 6, 7: 8}

In [5]: from collections import ChainMap
   ...: context = ChainMap(_priv1, _priv2)

In [6]: context
Out[6]: ChainMap({1: 2, 3: 4}, {5: 6, 7: 8})

In [7]: _priv1.update({9: 10})

In [8]: context
Out[8]: ChainMap({1: 2, 3: 4, 9: 10}, {5: 6, 7: 8})

In [9]: context.get(9)
Out[9]: 10
</code></pre>
<p>For your code example, I'd use:</p>
<pre class="lang-py prettyprint-override"><code>from collections import ChainMap

class A:
    _priv1 = {'a': 1, 'b': 2}
    _priv2 = {'c': 1, 'd': 2}
    _union_dict = ChainMap(_priv1, _priv2)

    @classmethod
    def items(cls):
        return cls._union_dict.items()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use <a href="https://docs.python.org/3.6/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>chain</code></a> two combine two or more views. as stated:</p>
<blockquote>
<p>Make an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable, until all of the iterables are exhausted.</p>
</blockquote>
<p>That way there is not copying of the data.</p>
<pre><code>from itertools import chain

class A:
    _priv1 = {'a': 1, 'b': 2}
    _priv2 = {'c': 1, 'd': 2}

    def items(self):
        return chain(self._priv1.items(), self._priv2.items())
</code></pre>
</div>
