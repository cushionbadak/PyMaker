<div class="post-text" itemprop="text">
<p>Here are the values printing from a record, I need to sum up the 1st number when based on the second number.
If the first second numbers are same, the first number needes to be added.</p>
<pre><code>record = [[2, 3], [3, 3], [5, 4], [1, 4]]

Expected output = [5, 3], [6, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should first sort, then <code>itertools.groupby</code> the second value.</p>
<pre><code>import itertools
import operator

records = [[2, 3], [3, 3], [5, 4], [1, 4]]
records.sort(key=operator.itemgetter(1))
groups = itertools.groupby(records, key=operator.itemgetter(1))
# groups is now a generator that produces the values:
#   (3, [[2, 3], [3, 3]])
#   (4, [[5, 4], [1, 4]])
</code></pre>
<p>Then produce a list over the results:</p>
<pre><code>result = [[sum(record[0] for record in records), grpname] for grpname, records in groups]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>. It will be easy to use and you won't need to sort anything:</p>
<pre><code>from collections import Counter
record = [[2, 3], [3, 3], [5, 4], [1, 4]]
sums = Counter()
for (value, index) in record:
    sums[index] += value
sums
# Counter({3: 5, 4: 6})
</code></pre>
<p>It shouldn't be too hard to convert the Counter values to the desired output.</p>
</div>
<div class="post-text" itemprop="text">
<p>Algorithm:
1. Sort List according to the second element in the inner list.
2. Merge consecutive element heaving the same value of the second element.</p>
<pre><code>record = [[1,5],[2, 3], [2,5] , [3, 3], [5, 4], [1, 4]]
record.sort(key=lambda x: x[1]) #sorting record according to second value in inner list
length=len(record)
newRecord=[record[0].copy()] #initating newRecording with first value from record
for i in range(1,length):
    if newRecord[-1][1]==record[i][1]:
        #if value of second element is equal than this will execute
        newRecord[-1][0]+=record[i][0]
    else:
        #if value of second element is not equal than this will execute
        newRecord.append(record[i])

print(newRecord)
</code></pre>
<p>Hope this help.</p>
</div>
<span class="comment-copy">If you're only interested in sum, Counter is easier to use than groupby.</span>
<span class="comment-copy">Isn't this just <code>collections.defaultdict(int)</code>? We're not getting any of the cool <code>Counter</code> behavior here.</span>
<span class="comment-copy">That said -- it should still be significantly faster than my sort -&gt; groupby approach :)</span>
<span class="comment-copy">@AdamSmith: I don't think there's any Counter constructor which works directly with OP's data format. One possibility would be <code>Counter(k for (v, k) in record for _ in range(v))</code> but it isn't readable or efficient IMHO.</span>
<span class="comment-copy">Nice coding@EricDuminil</span>
