<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/141545/how-to-overload-init-method-based-on-argument-type">How to overload __init__ method based on argument type?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I have a container class that holds data. When the container is created, there are different methods to pass data.</p>
<ol>
<li>Pass a file which contains the data</li>
<li>Pass the data directly via arguments</li>
<li>Don't pass data; just create an empty container</li>
</ol>
<p>In Java, I would create three constructors. Here's how it would look like if it were possible in Python:</p>
<pre><code>class Container:

    def __init__(self):
        self.timestamp = 0
        self.data = []
        self.metadata = {}

    def __init__(self, file):
        f = file.open()
        self.timestamp = f.get_timestamp()
        self.data = f.get_data()
        self.metadata = f.get_metadata()

    def __init__(self, timestamp, data, metadata):
        self.timestamp = timestamp
        self.data = data
        self.metadata = metadata
</code></pre>
<p>In Python, I see three obvious solutions, but none of them is pretty:</p>
<p><strong>A</strong>: Using keyword arguments:</p>
<pre><code>def __init__(self, **kwargs):
    if 'file' in kwargs:
        ...
    elif 'timestamp' in kwargs and 'data' in kwargs and 'metadata' in kwargs:
        ...
    else:
        ... create empty container
</code></pre>
<p><strong>B</strong>: Using default arguments:</p>
<pre><code>def __init__(self, file=None, timestamp=None, data=None, metadata=None):
    if file:
        ...
    elif timestamp and data and metadata:
        ...
    else:
        ... create empty container
</code></pre>
<p><strong>C</strong>: Only provide constructor to create empty containers. Provide methods to fill containers with data from different sources.</p>
<pre><code>def __init__(self):
    self.timestamp = 0
    self.data = []
    self.metadata = {}

def add_data_from_file(file):
    ...

def add_data(timestamp, data, metadata):
    ...
</code></pre>
<p>Solutions A and B are basically the same. I don't like doing the if/else, especially since I have to check if all arguments required for this method were provided. A is a bit more flexible than B if the code is ever to be extended by a fourth method to add data.</p>
<p>Solution C seems to be the nicest, but the user has to know which method he requires. For example: he cant do <code>c = Container(args)</code> if he doesn't know what <code>args</code> is.</p>
<p>Whats the most Pythonic solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't have multiple methods with same name in <code>Python</code>. Function overloading - unlike in <code>Java</code> - isn't supported.</p>
<p>Use default parameters or <code>**kwargs</code> and <code>*args</code> arguments.</p>
<p>You can make static methods or class methods with the <code>@staticmethod</code> or <code>@classmethod</code> decorator to return an instance of your class, or to add other constructors.</p>
<p>I advise you to do:</p>
<pre><code>class F:

    def __init__(self, timestamp=0, data=None, metadata=None):
        self.timestamp = timestamp
        self.data = list() if data is None else data
        self.metadata = dict() if metadata is None else metadata

    @classmethod
    def from_file(cls, path):
       _file = cls.get_file(path)
       timestamp = _file.get_timestamp()
       data = _file.get_data()
       metadata = _file.get_metadata()       
       return cls(timestamp, data, metadata)

    @classmethod
    def from_metadata(cls, timestamp, data, metadata):
        return cls(timestamp, data, metadata)

    @staticmethod
    def get_file(path):
        # ...
        pass
</code></pre>
<blockquote>
<p>⚠ Never have mutable types as defaults in python. ⚠
  See <a href="http://python-guide-pt-br.readthedocs.io/en/latest/writing/gotchas" rel="noreferrer">here</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can't have multiple constructors, but you can have multiple aptly-named factory methods. </p>
<pre><code>class Document(object):

    def __init__(self, whatever args you need):
        """Do not invoke directly. Use from_NNN methods."""
        # Implementation is likely a mix of A and B approaches. 

    @classmethod
    def from_string(cls, string):
        # Do any necessary preparations, use the `string`
        return cls(...)

    @classmethod
    def from_json_file(cls, file_object):
        # Read and interpret the file as you want
        return cls(...)

    @classmethod
    def from_docx_file(cls, file_object):
        # Read and interpret the file as you want, differently.
        return cls(...)

    # etc.
</code></pre>
<p>You can't easily prevent the user from using the constructor directly, though. (If it is critical, as a safety precaution during development, you can analyze the call stack in the constructor and check that the call is made from one of the expected methods.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Most Pythonic would be what the Python standard library already does. Core developer Raymond Hettinger (the <code>collections</code> guy) <a href="https://www.youtube.com/watch?v=HTLu2DFOdTg" rel="nofollow noreferrer">gave a talk on this</a>, plus general guidelines for how to write classes.</p>
<p>Use separate, class-level functions to initialize instances, like how <code>dict.fromkeys()</code> isn't the class initializer but still returns an instance of <code>dict</code>. This allows you to be flexible toward the arguments you need without changing method signatures as requirements change.</p>
</div>
<div class="post-text" itemprop="text">
<p>What are the system goals for this code?  From my standpoint, your critical phrase is <code>but the user has to know which method he requires.</code>  What experience do you want your users to have with your code?  That should drive the interface design.</p>
<p>Now, move to maintainability: which solution is easiest to read and maintain?  Again, I feel that solution C is inferior.  For most of the teams with whom I've worked, solution B is preferable to A: it's a little easier to read and understand, although both readily break into small code blocks for treatment.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if I understood right but wouldn't this work?</p>
<pre><code>def __init__(self, file=None, timestamp=0, data=[], metadata={}):
    if file:
        ...
    else:
        self.timestamp = timestamp
        self.data = data
        self.metadata = metadata
</code></pre>
<p>Or you could even do:</p>
<pre><code>def __init__(self, file=None, timestamp=0, data=[], metadata={}):
    if file:
        # Implement get_data to return all the stuff as a tuple
        timestamp, data, metadata = f.get_data()

    self.timestamp = timestamp
    self.data = data
    self.metadata = metadata
</code></pre>
<p>Thank to Jon Kiparsky advice theres a better way to avoid global declarations on <code>data</code> and <code>metadata</code> so this is the new way:</p>
<pre><code>def __init__(self, file=None, timestamp=None, data=None, metadata=None):
    if file:
        # Implement get_data to return all the stuff as a tuple
        with open(file) as f:
            timestamp, data, metadata = f.get_data()

    self.timestamp = timestamp or 0
    self.data = data or []
    self.metadata = metadata or {}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are on Python 3.4+ you can use the <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledispatch</code></a> decorator to do this (with a little extra help from the <code>methoddispatch</code> decorator that <a href="https://stackoverflow.com/users/1014938/zero-piraeus">@ZeroPiraeus</a> wrote for <a href="https://stackoverflow.com/a/24602374/135978">his answer</a>):</p>
<pre><code>class Container:

    @methoddispatch
    def __init__(self):
        self.timestamp = 0
        self.data = []
        self.metadata = {}

    @__init__.register(File)
    def __init__(self, file):
        f = file.open()
        self.timestamp = f.get_timestamp()
        self.data = f.get_data()
        self.metadata = f.get_metadata()

    @__init__.register(Timestamp)
    def __init__(self, timestamp, data, metadata):
        self.timestamp = timestamp
        self.data = data
        self.metadata = metadata
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most pythonic way is to make sure any optional arguments have default values. So include all arguments that you know you need and assign them appropriate defaults. </p>
<pre><code>def __init__(self, timestamp=None, data=[], metadata={}):
    timestamp = time.now()
</code></pre>
<p>An important thing to remember is that any required arguments should <em>not</em> have defaults since you want an error to be raised if they're not included.</p>
<p>You can accept even more optional arguments using <code>*args</code> and <code>**kwargs</code> at the end of your arguments list.</p>
<pre><code>def __init__(self, timestamp=None, data=[], metadata={}, *args, **kwards):
    if 'something' in kwargs:
        # do something
</code></pre>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/7113032/overloaded-functions-in-python" title="overloaded functions in python">stackoverflow.com/questions/7113032/…</a>.</span>
<span class="comment-copy">There are other options, too.  <a href="https://stackoverflow.com/questions/19305296/multiple-constructors-in-python-using-inheritance" title="multiple constructors in python using inheritance">stackoverflow.com/questions/19305296/…</a>   Also, I always try to make my code fit my needs, rather than writing around them to make my code more pure.</span>
<span class="comment-copy">While all the answers here are focusing on providing a solution, <a href="https://stackoverflow.com/questions/9373104/why-doesnt-ruby-support-method-overloading/9380268#9380268">Jörg W Mittag provides a very nice explanation</a> about why function overloading wouldn't make sense in dynamic languages.</span>
<span class="comment-copy"><code>@classmethod</code> would be cleaner; the approach is good.</span>
<span class="comment-copy">Please, never, ever, ever, have mutable types as defaults in python. This is one of the first (and few) weird edge cases beginners need to learn in python. Try doing <code>x = F(); x.data.append(5); y = F(); print y.data</code>. You are in for a surprise. Idiomatic way would be to default to <code>None</code> instead, and assign to <code>self.data</code> and <code>self.metadata</code> within a conditional or with ternary operator.</span>
<span class="comment-copy">Johannes, others can correct me if I'm wrong (still new to Python), but I think it's because of inheritance. Suppose a new class, <code>G</code>, inherits class <code>F</code>. Using <code>@classmethod</code>, calling <code>G.from_file</code> gives an instance of <code>G</code>. Using <code>@staticmethod</code>, the class name is hardcoded into the method, so <code>G.from_file</code> will give an instance of <code>F</code> unless <code>G</code> overrides the method.</span>
<span class="comment-copy">@Mark And then if someone calls the constructor with an empty dict they intend to share with something else, it gets replaced by a new empty dict? That could lead to some nasty headscratchers: <code>my_dict = {}; f = F(metadata=my_dict); my_dict[1] = 2; f.metadata =&gt; {}</code>. Here, <code>f.metadata</code> should of course be <code>{1: 2}</code>.</span>
<span class="comment-copy">@Mark Your comment inspired another question: <a href="https://stackoverflow.com/questions/44784276/idiomatic-way-to-default-mutable-arguments" title="idiomatic way to default mutable arguments">stackoverflow.com/questions/44784276/…</a></span>
<span class="comment-copy">there's a subtle bug here. since the parameter list is evaluated when the function is first created, the list and dict for data and metadata will be effectively globals. Basically reasonable though, except for that gotcha.</span>
<span class="comment-copy">so it might be better to use keyword arguments?</span>
<span class="comment-copy">That, or you could use <code>None</code> for the defaults and then <code>self.data = data or []</code></span>
<span class="comment-copy">Never use mutable types as defaults - it can introduce some very subtle bugs which can be a pain to find. It is always recommended to do something like <code>func( data = None ): data = data or []</code>; one more line,, one less bug :-) <a href="http://python-guide-pt-br.readthedocs.io/en/latest/writing/gotchas/" rel="nofollow noreferrer">python-guide-pt-br.readthedocs.io/en/latest/writing/gotchas</a></span>
