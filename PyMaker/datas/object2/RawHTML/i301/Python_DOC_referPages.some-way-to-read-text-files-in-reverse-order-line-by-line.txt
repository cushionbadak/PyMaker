<div class="post-text" itemprop="text">
<p>I want to read text file given below in reverse direction line by line. I don't want to use <code>readlines()</code> or <code>read()</code>.</p>
<p><em>a.txt</em></p>
<pre class="lang-none prettyprint-override"><code>2018/03/25-00:08:48.638553  508     7FF4A8F3D704     snononsonfvnosnovoosr
2018/03/25-10:08:48.985053 346K     7FE9D2D51706     ahelooa afoaona woom
2018/03/25-20:08:50.486601 1.5M     7FE9D3D41706     qojfcmqcacaeia
2018/03/25-24:08:50.980519  16K     7FE9BD1AF707     user: number is 93823004
2018/03/26-00:08:50.981908 1389     7FE9BDC2B707     user 7fb31ecfa700
2018/03/26-10:08:51.066967    0     7FE9BDC91700     Exit Status = 0x0
2018/03/26-15:08:51.066968    1     7FE9BDC91700     std:ZMD:
</code></pre>
<p><em>expected result:</em></p>
<pre class="lang-none prettyprint-override"><code>2018/03/26-15:08:51.066968    1     7FE9BDC91700     std:ZMD:
2018/03/26-10:08:51.066967    0     7FE9BDC91700     Exit Status = 0x0
2018/03/26-00:08:50.981908 1389     7FE9BDC2B707     user 7fb31ecfa700
2018/03/25-24:08:50.980519  16K     7FE9BD1AF707     user: number is 93823004
2018/03/25-20:08:50.486601 1.5M     7FE9D3D41706     qojfcmqcacaeia
2018/03/25-10:08:48.985053 346K     7FE9D2D51706     ahelooa afoaona woom
2018/03/25-00:08:48.638553  508     7FF4A8F3D704     snononsonfvnosnovoosr
</code></pre>
<p><em>My Solution:</em></p>
<pre><code>with open('a.txt') as lines:
    for line in reversed(lines):
        print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to do it without reading the whole file into memory all at once. It does require first reading the whole file, but only storing where each line starts. Once that is known, it can use the <code>seek()</code> method to randomly access each one in any order desired.</p>
<p>Here's an example using your input file:</p>
<pre><code># Preprocess - read whole file and note where lines start.
# (Needs to be done in binary mode.)
with open('text_file.txt', 'rb') as file:
    offsets = [0]  # First line is always at offset 0.
    for line in file:
        offsets.append(file.tell())  # Append where *next* line would start.

# Now reread lines in file in reverse order.
with open('text_file.txt', 'rb') as file:
    for index in reversed(range(len(offsets)-1)):
        file.seek(offsets[index])
        size = offsets[index+1] - offsets[index]  # Difference with next.
        # Read bytes, convert them to a string, and remove whitespace at end.
        line = file.read(size).decode().rstrip()
        print(line)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>2018/03/26-15:08:51.066968    1     7FE9BDC91700     std:ZMD:
2018/03/26-10:08:51.066967    0     7FE9BDC91700     Exit Status = 0x0
2018/03/26-00:08:50.981908 1389     7FE9BDC2B707     user 7fb31ecfa700
2018/03/25-24:08:50.980519  16K     7FE9BD1AF707     user: number is 93823004
2018/03/25-20:08:50.486601 1.5M     7FE9D3D41706     qojfcmqcacaeia
2018/03/25-10:08:48.985053 346K     7FE9D2D51706     ahelooa afoaona woom
2018/03/25-00:08:48.638553  508     7FF4A8F3D704     snononsonfvnosnovoosr
</code></pre>
<p><strong>Update</strong></p>
<p>Here's a version that does the same thing but uses Python's <a href="https://docs.python.org/3/library/mmap.html#module-mmap" rel="nofollow noreferrer"><code>mmap</code></a> module to <a href="https://en.wikipedia.org/wiki/Memory-mapped_file" rel="nofollow noreferrer">memory-map</a> the file which should provide better performance by taking advantage of your OS/hardware's virtual-memory capabilities. </p>
<p>This is because, as <a href="https://pymotw.com/3/mmap/index.html" rel="nofollow noreferrer">PyMOTW-3</a> put's it:</p>
<blockquote>
<p>Memory-mapping typically improves I/O performance because it does not involve a separate system call for each access and it does not require copying data between buffers – the memory is accessed directly by both the kernel and the user application.</p>
</blockquote>
<p>Code:</p>
<pre><code>import mmap

with open('text_file.txt', 'rb') as file:
    with mmap.mmap(file.fileno(), length=0, access=mmap.ACCESS_READ) as mm_file:

        # First preprocess the file and note where lines start.
        # (Needs to be done in binary mode.)
        offsets = [0]  # First line is always at offset 0.
        for line in iter(mm_file.readline, b""):
            offsets.append(mm_file.tell())  # Append where *next* line would start.

        # Now process the lines in file in reverse order.
        for index in reversed(range(len(offsets)-1)):
            mm_file.seek(offsets[index])
            size = offsets[index+1] - offsets[index]  # Difference with next.
            # Read bytes, convert them to a string, and remove whitespace at end.
            line = mm_file.read(size).decode().rstrip()
            print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there isn't a better way to do this.  By definition, a file is a sequential organization of some basic data type.  A text file's type is character.  You are trying to impose a different organization on the file, strings separated by newlines.</p>
<p>Thus, you have to do the work to read the file, re-cast into your desired format, and <em>then</em> take that organization in reverse order.  For instance, were you to need this multiple times ... read the file as lines, store the lines as data base records, and then iterate through the records as you see fit.</p>
<p>The <code>file</code> interface reads in only one direction.  You can <code>seek()</code> to another location, but the standard I/O operations work only with increasing location descriptions.</p>
<p>For your solution to work, you'll need to read in the entire file -- you can't <code>reverse</code> the file descriptor's implicit iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Whlie @martineau's solution gets the job done without loading the entire file into the memory, it nevertheless wastefully reads the entire file twice.</p>
<p>An arguably more efficient, one-pass approach is to read from the end of the file in reasonably large chunks into a buffer, look for the next newline character from the end of the buffer (minus the trailing newline at the last character), and if not found, seek backwards and keep reading in chunks and prepending the chunks to the buffer until a newline character is found. Use a larger chunk size for more efficient reads as long as it's within the memory limit:</p>
<pre><code>class ReversedTextReader:
    def __init__(self, file, chunk_size=50):
        self.file = file
        file.seek(0, 2)
        self.position = file.tell()
        self.chunk_size = chunk_size
        self.buffer = ''

    def __iter__(self):
        return self

    def __next__(self):
        if not self.position and not self.buffer:
            raise StopIteration
        chunk = self.buffer
        while True:
            line_start = chunk.rfind('\n', 0, len(chunk) - 1 - (chunk is self.buffer))
            if line_start != -1:
                break
            chunk_size = min(self.chunk_size, self.position)
            self.position -= chunk_size
            self.file.seek(self.position)
            chunk = self.file.read(chunk_size)
            if not chunk:
                line = self.buffer
                self.buffer = ''
                return line
            self.buffer = chunk + self.buffer
        line_start += 1
        line = self.buffer[line_start:]
        self.buffer = self.buffer[:line_start]
        return line
</code></pre>
<p>so that:</p>
<pre><code>from io import StringIO

f = StringIO('''2018/03/25-00:08:48.638553  508     7FF4A8F3D704     snononsonfvnosnovoosr
2018/03/25-10:08:48.985053 346K     7FE9D2D51706     ahelooa afoaona woom
2018/03/25-20:08:50.486601 1.5M     7FE9D3D41706     qojfcmqcacaeia
2018/03/25-24:08:50.980519  16K     7FE9BD1AF707     user: number is 93823004
2018/03/26-00:08:50.981908 1389     7FE9BDC2B707     user 7fb31ecfa700
2018/03/26-10:08:51.066967    0     7FE9BDC91700     Exit Status = 0x0
2018/03/26-15:08:51.066968    1     7FE9BDC91700     std:ZMD:
''')

for line in ReversedTextReader(f):
    print(line, end='')
</code></pre>
<p>outputs:</p>
<pre><code>2018/03/26-15:08:51.066968    1     7FE9BDC91700     std:ZMD:
2018/03/26-10:08:51.066967    0     7FE9BDC91700     Exit Status = 0x0
2018/03/26-00:08:50.981908 1389     7FE9BDC2B707     user 7fb31ecfa700
2018/03/25-24:08:50.980519  16K     7FE9BD1AF707     user: number is 93823004
2018/03/25-20:08:50.486601 1.5M     7FE9D3D41706     qojfcmqcacaeia
2018/03/25-10:08:48.985053 346K     7FE9D2D51706     ahelooa afoaona woom
2018/03/25-00:08:48.638553  508     7FF4A8F3D704     snononsonfvnosnovoosr
</code></pre>
</div>
<span class="comment-copy">If you want to post a self-answered question, put the solution in an answer, not the question itself.</span>
<span class="comment-copy">@mad_, but there should be way to read text file in reverse order.</span>
<span class="comment-copy">@chepner The OP's solution can't be an answer because it doesn't work, as <code>reversed</code> can't be used with an iterable and must be used with a sequence of known length.</span>
<span class="comment-copy">user15051990: The problem iwith reading the lines of a text file in reverse is that they are generally different lengths—so you're going to need to read the whole thing first.</span>
<span class="comment-copy">@blhsing, yes you are right, <code>reversed</code> can't be used with an iterator.</span>
<span class="comment-copy">Technically you could seek to the end of file -1, read 1 char, seek -2, read another. etc. I wonder how slow would that be though.</span>
<span class="comment-copy">@Gnudiff: Yes, you could, but that reads in reverse <i>byte</i> order.  OP wants to reverse the <i>line</i> order.  Granted, you could simply back up through the file, looking for each newline.  Yes, it's slow.</span>
<span class="comment-copy">There are, however, better ways to read the file, see the latest update to <a href="https://stackoverflow.com/a/54932624/355230">my answer</a>,</span>
<span class="comment-copy">Reading the file twice, as done in <a href="https://stackoverflow.com/a/54932624/355230">my answer</a>, may not be as inefficient as you think—the OS probably buffers, caches, or otherwise optimizes that kind of thing.</span>
<span class="comment-copy">For smaller files yes, but we're talking about a file so large that the OP can't load it into the memory in the first place, so chances are better that whatever buffer/cache that the OS has won't be able to accommodate the file and can't help optimize reading that file twice either.</span>
<span class="comment-copy">True, this appears to be a very extreme case—precisely what the OS's optimizations were designed to mitigate. Actually, now that I think more about it, memory-mapping the file might be an even better way to leverage the OS's (and hardware's) capabilities—see the latest update to <a href="https://stackoverflow.com/a/54932624/355230">my answer</a>.</span>
