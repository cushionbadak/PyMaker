<div class="post-text" itemprop="text">
<p>I am trying to implement an iterator to my binary search tree. To achieve this, I am attempting to do an in-order traversal through the tree and yield each individual data member. This will allow me to iterate through each item of the tree.</p>
<p>My function:</p>
<pre><code>def __iter__(self):
    """
    in-order traversal of a binary search tree
    """
    if self.root is not None:
        self.check(self.root)

def check(self, cur_node):
    if cur_node is not None:
        self.check(cur_node.left)
        yield cur_node.data #if I were to print this data member, it would be fine
        self.check(cur_node.right)
</code></pre>
<p>When testing this function with an iteration such as </p>
<pre><code>for i in tree:
</code></pre>
<p>I am receiving this error:</p>
<pre><code>TypeError: iter() returned non-iterator of type 'NoneType'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To implement a recursive generator you cannot just "call" yourself, you need to extract elements and yield them.</p>
<p>Python has a special syntax for this:</p>
<pre><code> yield from expr
</code></pre>
<p>where <code>expr</code> is iterable, and it can be seen as a shorthand for</p>
<pre><code> for x in expr:
     yield x
</code></pre>
<p>Using this you can implement in-order traversal of a tree with something like:</p>
<pre><code>class Node:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right

    def __iter__(self):
        if self.left:
            yield from self.left
        yield self.data
        if self.right:
            yield from self.right
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The clue is </p>
<blockquote>
<p>iter() returned ....</p>
</blockquote>
<p>So you need to return an iterator. Your class is an iterator, so return self</p>
<pre><code>def __iter__(self):
    """
    in-order traversal of a binary search tree
    """
    if self.root is not None:
        self.check(self.root)
    return self
</code></pre>
<p>You should probably implement <code>__next__</code> as well to actually yield the value.</p>
<p>So the solution might look like</p>
<pre><code>class Tree:
    def __init__(...): ...

    def __iter__(self):
        return self

    def __next__(self):
        if self.left is not None:
            yield from self.left
        yield self.data
        if self.right is not None:    
            yield from self.right 
</code></pre>
<p>You use <code>yield from</code> here to delegate to the child nodes. See <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator</a></p>
<p>You do in fact need three yield statements, because you need to traverse both the left and right children, as well as producing the value of the current node.</p>
</div>
<div class="post-text" itemprop="text">
<p>You generally want your iterator as a separate entity from your data structure, so you can have multiple iterators over your data, and so you can iterate over your data multiple times.  Below, I show how you can implement a simple DFS algorithm for a basic BST class.</p>
<pre><code>class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    def __iter__(self):
        return BSTIterator(self)

class BSTIterator:
    def __init__(self, root):
        self.stack = []
        curr = root
        while curr:
            self.stack.append(curr)
            curr = curr.left
    def __next__(self):
        if not self.stack:
            raise StopIteration()
        node = self.stack.pop()
        val = node.val
        node = node.right
        while node:
            self.stack.append(node)
            node = node.left
        return val
    def __iter__(self):
        return self

root = Node(5, Node(3, Node(1), Node(4)), Node(10, (Node(6, None, Node(7)))))
list(root)
# [1, 3, 4, 5, 6, 7, 10]
</code></pre>
</div>
<span class="comment-copy">Changing the internal state for an enumeration operation is a bad idea... what if multiple users want to iterate the same tree at the same time?</span>
<span class="comment-copy">I am going through an infinite loop? I have made a slight adjustment to your code by editing cur_node.left to self.cur_node.left. Are you sure we need 3 yield statements?</span>
<span class="comment-copy">I've updated this to address the mulitthreading issue and using the class attributes.</span>
