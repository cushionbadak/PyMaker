<div class="post-text" itemprop="text">
<pre><code>amt = float(input("Please enter the amount to make change for: $"))
</code></pre>
<p>I'd like the user to enter an amount in dollars and therefore allow 5 characters (00.00) Is there a way to limit it so it wont allow them to enter more than 5 characters?</p>
<p>I don't want something like this where it allows you to input more than 5 but will loop.</p>
<pre><code>while True:
amt = input("Please enter the amount to make change for: $")
if len(amt) &lt;= 5:
        print("$" + amt)
        break
</code></pre>
<p>I want complete restriction from entering more than 5 characters</p>
</div>
<div class="post-text" itemprop="text">
<p>use <strong>curses</strong></p>
<p>there is other approaches but i think this is a simple one.</p>
<p><a href="https://docs.python.org/3/library/curses.html#module-curses" rel="nofollow noreferrer">read about curses module</a></p>
<p>you can use <strong>getkey()</strong> or <strong>getstr()</strong>. but using getstr() is simpler, and it give the user choice to enter less than 5 char if he want, but no more than 5. i think that is what you asked for.</p>
<pre><code> import curses
 stdscr = curses.initscr()
 amt = stdscr.getstr(1,0, 5) # third arg here is the max length of allowed input
</code></pre>
<p>but if you want to force 5 character , no less , no more, you may want to use getkey() and put it in for loop , in this example program will wait user to enter 5 character before continue , no need even to press return key.</p>
<pre><code>amt = ''
stdscr = curses.initscr() 
for i in range(5): 
     amt += stdscr.getkey() # getkey() accept only one char, so we put it in a for loop
</code></pre>
<p><strong>note:</strong></p>
<p>you need to call the endwin() function to restore the terminal to its original operating mode.</p>
<blockquote>
<p>A common problem when debugging a curses application is to get your
  terminal messed up when the application dies without restoring the
  terminal to its previous state. In Python this commonly happens when
  your code is buggy and raises an uncaught exception. Keys are no
  longer echoed to the screen when you type them, for example, which
  makes using the shell difficult.</p>
</blockquote>
<p><strong>putting all together:</strong></p>
<p>going with first example, implementing getstr() method in your program could be like this:</p>
<pre><code>import curses 

def input_amount(message): 
    try: 
        stdscr = curses.initscr() 
        stdscr.clear() 
        stdscr.addstr(message) 
        amt = stdscr.getstr(1,0, 5) # or use getkey() as showed above.
    except: 
        raise 
    finally: 
        curses.endwin() # to restore the terminal to its original operating mode.
    return amt


amount = input_amount('Please enter the amount to make change for: $') 
print("$" + amount.decode())
</code></pre>
</div>
<span class="comment-copy">what do you want to happen if the user enters more than 5 characters?</span>
<span class="comment-copy">Tip: Use a regex pattern to validate input.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user" title="python read a single character from the user">stackoverflow.com/questions/510357/â€¦</a></span>
<span class="comment-copy">you could ignore the other chars with <code>input(...)[:5]</code></span>
<span class="comment-copy">@Cherry you cannot do this simply, or with <code>input</code> - see the question in @CharlieWindolf's comment</span>
