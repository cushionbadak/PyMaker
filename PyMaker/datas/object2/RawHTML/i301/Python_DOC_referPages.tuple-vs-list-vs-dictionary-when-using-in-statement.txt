<div class="post-text" itemprop="text">
<p>I have a small if statement that is checking if the variable is either of 2 values. Through testing I can see that all 3 of the following would work:</p>
<pre><code>var = 'a'

if(var in ['a', 'b']):
  print("List")

if(var in ('a', 'b')):
  print("Tuple")

if(var in {'a', 'b'}):
  print("Dictionary")
</code></pre>
<p>But, which data structure <em>should</em> be used here?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd argue that over two elements, you won't really notice a speed difference, so I'd pick the smallest of the structures, <code>tuple</code></p>
<pre class="lang-sh prettyprint-override"><code>python -m timeit '"a" in ("a","b")'
10000000 loops, best of 3: 0.0216 usec per loop

python -m timeit '"a" in ["a","b"]'
10000000 loops, best of 3: 0.0218 usec per loop

python -m timeit '"a" in {"a","b"}'
10000000 loops, best of 3: 0.0255 usec per loop
</code></pre>
<p>To show a size difference between the different structures:</p>
<pre class="lang-py prettyprint-override"><code>import sys 

sys.getsizeof(('a','b'))
64

sys.getsizeof(['a','b'])
80

sys.getsizeof({'a','b'})
224
</code></pre>
<h2>Edit</h2>
<p>As @Torxed points out, there is a trade-off between memory usage and speed. For smaller groups of elements (1-10), a <code>tuple</code> or <code>list</code> is fine, but let's try with a group of 100 elements:</p>
<pre class="lang-sh prettyprint-override"><code>
# -s *doesn't* get timed here
# list approach, 1 is last giving worst-case scenario
python -m timeit -s 'var = [x for x in range(100)][::-1]' '1 in var'
1000000 loops, best of 3: 0.947 usec per loop

# tuple approach
python -m timeit -s 'var = tuple([x for x in range(100)][::-1])' '1 in var'
1000000 loops, best of 3: 0.944 usec per loop

# set approach
python -m timeit -s 'var = set([x for x in range(100)][::-1])' '1 in var'
10000000 loops, best of 3: 0.0272 usec per loop
</code></pre>
<p>You get a <em>massive</em> boost from <code>dict</code>/<code>set</code> in this case, and that's when you would forego the memory overhead in favor of speed</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, the last option is not a dictionary, it's a set. Think of it as a KeyValuePair&lt;&gt; if you come from a C# background.</p>
<p>Secondly. A tuple is quite faster when being assigned as it is immutable and can be compacted easily. </p>
</div>
<span class="comment-copy">thats a set, not a dict. the <code>{}</code> alone are not enough to call something a dict. As for what should be used, set/dict lookups are fast. but those structures take more memory to store. So, decide accordingly.</span>
<span class="comment-copy">the third option is actually a <code>set</code>, not a <code>dictionary</code></span>
<span class="comment-copy">What is the purpose of the program ?</span>
<span class="comment-copy">You should invest some time in learning how to <a href="https://www.pythoncentral.io/time-a-python-function/" rel="nofollow noreferrer">time</a> stuff like this and investigate <a href="https://docs.python.org/3/library/resource.html" rel="nofollow noreferrer">resource</a> <a href="https://www.fullstackpython.com/monitoring.html" rel="nofollow noreferrer">useage</a>. Decide after that and ask questions if you're still curious as to what to do.</span>
<span class="comment-copy">For only two values, I would just write <code>var == 'a' or var == 'b'</code>.</span>
<span class="comment-copy">It's extremely important to note this: Some data structures are <i>great</i> for enumerables up to 5-10 items (lists, tuples) etc. Where as some structures will excel at greater numbers (dicts are great for larger quantities). Timing different amount of data-lengths is key here in deciding what types to use IMO.</span>
<span class="comment-copy">This is exactly what I was looking for, thanks! And you're right, for 2 elements both the size and speed is probably negligible -- but this is very interesting info for any cases in the future with much larger sizes. Thanks!</span>
<span class="comment-copy">@Aziz Know that in earlier Python versions, tuples are superior up to 5-10 elements, lists are fastest up until 10-50 items. After that, dicts are faster in every shape and form. Especially in accessing objects for obvious reasons. Memory consumption follow along the speed generally in this aspect. I stand by my comment above, learn to time the differences in both size and use cases.</span>
<span class="comment-copy">@Torxed even in lengths up to 100 elements, I haven't noticed a significant performance gain in a <code>list</code> over a <code>tuple</code> (~1%). However, at this size, you are correct, <code>dict</code> and <code>set</code> are far and away <i>much</i> better options. I'll add an edit in my answer to highlight your point</span>
<span class="comment-copy">set is nothing like a KeyValuePair in C#? I'm rusty in C#, but what you described is actually a dict in C#?</span>
<span class="comment-copy">Mutability doesn't really matter for an object that gets garbage-collected immediately.</span>
