<div class="post-text" itemprop="text">
<p>This code fails when it runs:</p>
<pre><code>import datetime
import subprocess

startdate = datetime.datetime(2010,4,9)
for i in range(1): 
    startdate += datetime.timedelta(days=1)

enddate = datetime.datetime(2010,4,10)
    for i in range(1): 
        enddate += datetime.timedelta(days=1)

subprocess.call("sudo mam-list-usagerecords -s \"" + str(startdate) + "\" -e \"" + str(enddate) + " --format csv --full")
</code></pre>
<p>The program has these errors when it runs:</p>
<pre><code>  File "QuestCommand.py", line 12, in &lt;module&gt;
subprocess.call("sudo mam-list-usagerecords -s \"" + str(startdate) + "\" -e \"" + str(enddate) + " --format csv --full")
  File "/usr/lib64/python2.7/subprocess.py", line 524, in call
return Popen(*popenargs, **kwargs).wait()
  File "/usr/lib64/python2.7/subprocess.py", line 711, in __init__
errread, errwrite)
  File "/usr/lib64/python2.7/subprocess.py", line 1327, in _execute_child
raise child_exception
</code></pre>
<p>I have ran this code multiple times with other ways, changing quotes and whatnot. I am fairly new to system calls and utilizing an HPC allocation database. I am stuck and if anyone can help me with resolving this issue that would be very helpful.</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>When possible, pass a <em>list</em> containing your command name and its arguments.</p>
<pre><code>subprocess.call(["sudo", "mam-list-usagerecords",
                 "-s", str(startdate),
                 "-e", str(enddate),
                 "--format", "csv",
                 "--full"])
</code></pre>
<p>This avoids the need to even know how the shell will process a command line.</p>
</div>
<div class="post-text" itemprop="text">
<p>When I first started using some of the subprocess methods I ran into some of the same issues.</p>
<p>Try running your code like this:</p>
<pre><code>import datetime
import subprocess
import shlex

startdate = datetime.datetime(2010, 4, 9) + datetime.timedelta(days=1)
enddate = datetime.datetime(2010, 4, 10) + datetime.timedelta(days=1)
command = (
    "sudo mam-list-usagerecords -s "
    + str(startdate)
    + "-e"
    + str(enddate)
    + " --format csv --full"
)

print(command)
print(type(command))
print(shlex.split(command))
subprocess.call(shlex.split(command))
</code></pre>
<p>OUTPUT:</p>
<blockquote>
<p>sudo mam-list-usagerecords -s 2010-04-10 00:00:00-e2010-04-11 00:00:00 --format csv --full</p>
<p>class 'str'</p>
<p>['sudo', 'mam-list-usagerecords', '-s', '2010-04-10', '00:00:00-e2010-04-11', '00:00:00', '--format', 'csv', '--full']</p>
</blockquote>
<p>(Command output redacted.)</p>
<p>When the kwarg <code>shell</code> is set to <code>False</code> which is the default, the command may have to be a collection which is what <a href="https://docs.python.org/3/library/shlex.html#shlex.split" rel="nofollow noreferrer">shlex.split</a> does.</p>
<blockquote>
<p>args should be a sequence of program arguments or else a single string. By default, the program to execute is the first item in args if args is a sequence. If args is a string, the interpretation is platform-dependent and described below. See the shell and executable arguments for additional differences from the default behavior. Unless otherwise stated, it is recommended to pass args as a sequence.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Popen constructor</a></p>
<p>This issue used to confuse me to no end until I found this in the docs.</p>
</div>
<span class="comment-copy">I'd suggest to first run the intended command from the command line first, then translate it to python. =)</span>
<span class="comment-copy">Don't create a string that you are just going to split anyway; define a list. This way, you have to ensure you are correctly quoting things for the final string to split correctly.</span>
<span class="comment-copy">This may work well enough if you know what characters your <code>startdate</code> and <code>enddate</code> string can ever contain, but it fails very badly when substituting arbitrary strings, which can themselves contain literal quotes. Consequently, it's a generally unsafe practice.</span>
<span class="comment-copy">...as your own quote says, "it is recommended to pass args as a sequence". Generating that sequence explicitly (as opposed to using <code>shlex.split</code>) ensures that the splitting happens exactly where the developer intends it to, and not anywhere else.</span>
<span class="comment-copy">I copied and pasted the string concatenation from the question. Indeed there are more robust ways of creating the command. The point is that <code>shlex.split</code> is the way to split the command string when a sequence is required. <code>command</code> is a string.</span>
<span class="comment-copy">@DMfll, ...when a sequence is required <i>and your input is a string</i>, but that's not the case here -- there is no single string provided by the user as a configuration value; the value is completely generated inside the code, so might as well do it right and generate <code>command</code> as a list in the first place.</span>
