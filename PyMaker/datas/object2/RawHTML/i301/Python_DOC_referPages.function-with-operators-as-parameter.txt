<div class="post-text" itemprop="text">
<p>i just started coding for fun and i'm trying to build a calculator that uses userinput. 2 numbers and one operator. I'm realy realy new to coding and currently limited to very simple use of if statements and while/for loops and i just started looking into functions. I have been trying to put this code into a function for a while but i can't find a solution to use the string "operator" as an actual operator in the function.</p>
<p>there must be a way to make all of this shorter.</p>
<pre><code>if used_op == "+":
    print("&gt;  " + str(number_1) + " + " + str(number_2) + " = " + str(number_1 + number_2) + "  &lt;")
elif used_op == "-":
    print("&gt;  " + str(number_1) + " - " + str(number_2) + " = " + str(number_1 - number_2) + "  &lt;")
elif used_op == "*":
    print("&gt;  " + str(number_1) + " * " + str(number_2) + " = " + str(number_1 * number_2) + "  &lt;")
elif used_op == "/":
    print("&gt;  " + str(number_1) + " / " + str(number_2) + " = " + str(number_1 / number_2) + "  &lt;")
elif used_op == "%":
    print("&gt;  " + str(number_1) + " % " + str(number_2) + " = " + str(number_1 % number_2) + "  &lt;")
elif used_op == "**":
    print("&gt;  " + str(number_1) + " ** " + str(number_2) + " = " + str(number_1 ** number_2) + "  &lt;")
elif used_op == "//":
    print("&gt;  " + str(number_1) + " // " + str(number_2) + " = " + str(number_1 // number_2) + "  &lt;")
</code></pre>
<p>What I tried is something like this:</p>
<pre><code>def solve(op):
    print("&gt;  " + str(number_1) + op + str(number_2) + " = " + str(
        number_1 + **op** + number_2) + "  &lt;")

solve(used_op)
</code></pre>
<p>I tried to find a solution for this on the internet for a while but i had no luck so far.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply <strong><em>evaluate</em></strong> your mathematical expression and python will do the rest of the job for you.</p>
<p>This can of course be done with the in-built <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a> function.</p>
<p>Here are some examples how you can use it:</p>
<pre><code>&gt;&gt;&gt; eval("1+1")
2

&gt;&gt;&gt; A = 2
&gt;&gt;&gt; eval("A * 3")
6
</code></pre>
<p>The function that you're trying to write, could look something like this</p>
<pre><code>def solve(a, b, op):
    expression = str(a) + op + str(b)
    print("&gt; " + expression + "=" + str(eval(expression)))

solve(1, 2, "+")   # &gt; 1+2=3
solve(10, 10, "*") # &gt; 10*10=100
solve(4, 2, "/")   # &gt; 4/2=2.0
solve(5, 10, "-")  # &gt; 5-10=-5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary and the <code>operator</code> module to do what you want:</p>
<pre class="lang-py prettyprint-override"><code>import operator

# this will act like a sort of case statement or switch
operations = {
    '&gt;': operator.gt,
    '&lt;': operator.lt,
    '=': operator.eq,
    '+': operator.add,
    '-': operator.sub,
    '/': operator.div,
    '*': operator.mul,
    '**': operator.pow,
    '//': operator.floordiv,
    ... # so on and so forth
}

def calculate(num1, num2, op):
    # operation is a function that is grabbed from the dictionary
    operation = operations.get(op)
    if not operation:
         raise KeyError("Operation %s not supported"%op)

    # Call the operation with your inputs
    num3 = operation(num1, num2)
    print('%3.2f %s %3.2f = %3.2f' % (num1, op, num2, num3))


calculate(1,2, '+')
# 1.00 + 2.00 = 3.00

</code></pre>
</div>
<span class="comment-copy">i like this alot! looks very clean and elegant.</span>
<span class="comment-copy">No problem! It's worth noting that the previously accepted answer is generally speaking more "proffesional", however when it comes to simplicity, I would say this is the way to go.</span>
<span class="comment-copy">to be honest i'm just not there yet, to really understand the other answer. i tryed it out and it worked. but i should understand it in order to use it.</span>
<span class="comment-copy">I'd agree that this answer is quite simple and easy to read. However, <code>eval</code> is usually seen as a bad practice and not something to be used lightly. For this example, there's no harm, just a heads up in future answers</span>
<span class="comment-copy">well i'm sad now, i wrote a calculator programm with 80 lines and it took me like 5h. and its far from perfect. now i realized that: expression = input("Enter calc: ") print("&gt;  " + expression + " = " + str(eval(expression)) + "  &lt;") does everything and more then my program :)</span>
<span class="comment-copy">thank you! works fine :)</span>
