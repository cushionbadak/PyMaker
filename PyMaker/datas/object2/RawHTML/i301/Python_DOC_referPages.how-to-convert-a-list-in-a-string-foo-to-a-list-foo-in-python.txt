<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44529483/python-convert-string-list-to-list">Python Convert String List to List</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Right now I have a dataset where each line is a string in the form: </p>
<pre><code>"[6.43736, 23, {}, [], '']"
</code></pre>
<p>I want to convert it into a list, but i cant for the life of me figure out of to do it. The preferred output would look like this:</p>
<pre><code>[6.43736, 23, {}, [], '']
</code></pre>
<p>For each line in the csv file. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> is good for safely evaluating strings that look like numbers, tuples, lists, dicts, bools, None, and strings:</p>
<pre><code>&gt;&gt;&gt; s = "[6.43736, 23, {}, [], '']"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(s)
[6.43736, 23, {}, [], '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a="[6.43736, 23, {}, [], '']"
</code></pre>
<p><code>eval(a)</code> would do what you want</p>
</div>
<span class="comment-copy">"Right now i have a dataset where each line is a string in the form:" What generated such a string? Somewhere, someone decided "let me save this string representation of a Python data structure in a csv file and pretend it is serialization". It isn't. Use a pre-built serialization format, like JSON</span>
<span class="comment-copy">Thank you for such a quick reply! However, this does not change the string to a list, which means I still can't index it.</span>
<span class="comment-copy">@Bogehave yes, <i>it does if that string is exactly what you posted</i>.</span>
<span class="comment-copy">literal_eval <i>should</i> return a list in this case, which can be indexed. Are you assigning the result to anything? It won't alter <code>s</code> in-place; you'll need to do something like <code>seq = ast.literal_eval(s); print(seq[0])</code>.</span>
<span class="comment-copy">My bad, i think it may be an issue that im trying to do within a csv file? When i run this code i get &lt;class 'str'&gt; for each output:  <code>def sprog_csv(csv_file):      with open(csv_file) as f:          for item in f:             seq = ast.literal_eval(item)             print(type(seq))</code></span>
<span class="comment-copy">Hard to say without seeing the structure of the csv file. Wild guess: Maybe the string has an additional layer of quote marks. try <code>seq = ast.literal_eval(ast.literal_eval(item)))</code></span>
<span class="comment-copy">But this is dangerous if the string comes from user input, as it might contain function calls that could do anything.</span>
