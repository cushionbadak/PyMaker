<div class="post-text" itemprop="text">
<p>I have to take a large list of words in the form:</p>
<pre><code>['this\n', 'is\n', 'a\n', 'list\n', 'of\n', 'words\n']
</code></pre>
<p>and then using the strip function, turn it into:</p>
<pre><code>['this', 'is', 'a', 'list', 'of', 'words']
</code></pre>
<p>I thought that what I had written would work, but I keep getting an error saying:</p>
<blockquote>
<p>"'list' object has no attribute 'strip'"</p>
</blockquote>
<p>Here is the code that I tried:</p>
<pre><code>strip_list = []
for lengths in range(1,20):
    strip_list.append(0) #longest word in the text file is 20 characters long
for a in lines:
    strip_list.append(lines[a].strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; my_list = ['this\n', 'is\n', 'a\n', 'list\n', 'of\n', 'words\n']
&gt;&gt;&gt; map(str.strip, my_list)
['this', 'is', 'a', 'list', 'of', 'words']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>list comprehension?
<code>[x.strip() for x in lst]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">lists comprehensions</a>:</p>
<pre><code>strip_list = [item.strip() for item in lines]
</code></pre>
<p>Or the <a href="http://docs.python.org/library/functions.html#map" rel="noreferrer"><code>map</code></a> function:</p>
<pre><code># with a lambda
strip_list = map(lambda it: it.strip(), lines)

# without a lambda
strip_list = map(str.strip, lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done using list comprehensions as defined in <a href="http://www.python.org/dev/peps/pep-0202/" rel="noreferrer">PEP 202</a></p>
<pre><code>[w.strip() for w in  ['this\n', 'is\n', 'a\n', 'list\n', 'of\n', 'words\n']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All other answers, and mainly about list comprehension, are great. But just to explain your error: </p>
<pre><code>strip_list = []
for lengths in range(1,20):
    strip_list.append(0) #longest word in the text file is 20 characters long
for a in lines:
    strip_list.append(lines[a].strip())
</code></pre>
<p><code>a</code> is a member of your list, not an index. What you could write is this:</p>
<pre><code>[...]
for a in lines:
    strip_list.append(a.strip())
</code></pre>
<p>Another important comment: you can create an empty list this way:</p>
<pre><code>strip_list = [0] * 20
</code></pre>
<p>But this is not so useful, as <code>.append</code> <em>appends</em> stuff to your list. In your case, it's not useful to create a list with defaut values, as you'll build it item per item when appending stripped strings.</p>
<p>So your code should be like:</p>
<pre><code>strip_list = []
for a in lines:
    strip_list.append(a.strip())
</code></pre>
<p>But, for sure, the best one is this one, as this is exactly the same thing:</p>
<pre><code>stripped = [line.strip() for line in lines]
</code></pre>
<p>In case you have something more complicated than just a <code>.strip</code>, put this in a function, and do the same. That's the most readable way to work with lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to remove just <em>trailing</em> whitespace, you could use <a href="https://docs.python.org/3.7/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer"><code>str.rstrip()</code></a>, which should be slightly more efficient than <a href="https://docs.python.org/3.7/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip()</code></a>:</p>
<pre><code>&gt;&gt;&gt; lst = ['this\n', 'is\n', 'a\n', 'list\n', 'of\n', 'words\n']
&gt;&gt;&gt; [x.rstrip() for x in lst]
['this', 'is', 'a', 'list', 'of', 'words']
&gt;&gt;&gt; list(map(str.rstrip, lst))
['this', 'is', 'a', 'list', 'of', 'words']
</code></pre>
</div>
<span class="comment-copy">Please explain why you are appending 0 to <code>strip_list</code> 19 times then appending your stripped lines. That code has a very bad smell about it. Also if you got that stuff from a file, you should be stripping it on the way in -- building a large list then bashing it into another large list is not a good idea.  Also 2, your code should not depend on knowing the length of the longest word/line. Step back a bit -- what are your trying to achieve? What will you do with <code>strip_list</code>?</span>
<span class="comment-copy">Related <a href="http://stackoverflow.com/q/3849509">How to remove \n from a list element?</a></span>
<span class="comment-copy">could I then just say stripped_list = map(str.strip, my_list) and then print stripped_list to print this new list?</span>
<span class="comment-copy">@GeorgeBurrows Yes.</span>
<span class="comment-copy">If you're using Python 2, note however, that <code>str.strip</code> only works if you're sure that the list does not contain unicode strings. If it can contain both 8-bit and unicode strings, use <code>lambda s: s.strip()</code> as mentioned above, or use the <code>strip</code> function which you can import from the <code>strings</code> module.</span>
<span class="comment-copy">The Cito comment is actually the one that deserves the most rep. map and comprehension lists are not equivalent in OOP, because we are passe methods, not functions.</span>
<span class="comment-copy">Be aware of the following: If you are using Python 3.x and you want to return a list, you have to <code>list</code>, so that it's <code>list(map(str.strip, my_list))</code>. Also check that out: <a href="http://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x/1303354#1303354">link</a>.</span>
<span class="comment-copy">The lambda in the second version is overkill.</span>
<span class="comment-copy">You can use the same approach to do whatever it is with the <code>0</code> values at the beginning of the list, too. Although I can't really imagine what it is you're trying to accomplish by putting them in the same result list...</span>
<span class="comment-copy">In Python 3, the 3rd form "without a lambda" should be <code>strip_list = list(map(str.strip, lines))</code> as map() returns a map iterator. <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map</a></span>
<span class="comment-copy">I was thinking of changing the name from <code>list</code> to <code>map</code> :)</span>
