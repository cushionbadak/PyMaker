<div class="post-text" itemprop="text">
<p>I have a list like <code>y_train =[ 1 1 1 1 3 3 3 4 4 5 6 6 6]</code>. I'd like to change values of certain elements. For instance change every 1 with 0, every 3 with 1, and every 4 with 2 and so on. It is also essential that previously changed values shouldn't get overwritten. For now I'm using <code>for</code> with <code>enumerate</code> </p>
<pre><code> for n, i in enumerate(A):
    if i == 1:
        y_train[n] = 0
    elif i == 3:
        y_train[n] = 1
    elif i == 4:
        y_train[n] = 2
    elif i == 5:
        y_train[n] = 3
    elif i == 6:
        y_train[n] = 4
    else :
        y_train[n] = 5
</code></pre>
<p>But I need a neater pythonic way to accomplish this with a syntax like <code>for each element in y_train lookup [1 3 4] change with [0 1 2]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are looking for a <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a>. It is perfect to represent a lookup table.</p>
<pre><code>In [1]: lookup_table = {1:0, 3:1, 4:2}                                                                                                                                            

In [2]: y_train =[ 1, 1, 1, 1, 3, 3, 3, 4, 4, 5, 6, 6, 6]                                                                                                                          

In [3]: new_y_train = [lookup_table.get(x, x) for x in y_train]                                                                                                                    

In [4]: new_y_train                                                                                                                                                                
Out[4]: [0, 0, 0, 0, 1, 1, 1, 2, 2, 5, 6, 6, 6]
</code></pre>
<p>Here I used the <code>get</code> method to provide the original value as a fallback value when the lookup table does not have an entry for it, but if you are confident that your lookup table is exhaustive, this might not be necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can construct a lookup dictionary from the values provided. If you are looking to translate all values, as i suspect you are, you just need to get a mapping for all values available, using a dict comprehension based off of the unique items in y_train (which you can access using set)</p>
<pre><code>y_train =[ 1, 1, 1, 1, 3, 3, 3, 4, 4, 5, 6, 6, 6]
lookup = {val:i for i, val in enumerate(sorted(set(y_train)))}
#Output: {1: 0, 3: 1, 4: 2, 5: 3, 6: 4}

y_train = [lookup[y] for y in y_train]
#Output: [0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this satisfies your condition.</p>
<pre><code>y_train =[ 1, 1, 1, 1, 3, 3, 3, 4,4, 5, 6, 6, 6]
l = list(set(y_train))
y = list()
for i in y_train:
    if i in l:
        y.append(l.index(i))
    else :
        y.append(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>numpy</code> you should do...</p>
<pre><code>import numpy as np

if __name__ == '__main__':
    data = np.array([
        [1, 'a'],
        [1, 'b'],
        [1, 'c'],
        [2, 'a'],
        [2, 'b'],
        [2, 'c'],
        [3, 'a'],
        [3, 'b'],
        [3, 'c']
    ])
    print(data)
    # [['1' 'a']
    #  ['1' 'b']
    #  ['1' 'c']
    #  ['2' 'a']
    #  ['2' 'b']
    #  ['2' 'c']
    #  ['3' 'a']
    #  ['3' 'b']
    #  ['3' 'c']]

    col_to_change = data[:, 0].astype('int64')
    conditions = [
        (col_to_change == 1),
        (col_to_change == 2),
        (col_to_change == 3)
    ]
    to_ = [10, 20, 30]

    final_col = np.select(conditions, to_, default='')
    print(final_col)
    # ['10' '10' '10' '20' '20' '20' '30' '30' '30']
    data[:, 0] = final_col
    print(data)
    # [['10' 'a']
    #  ['10' 'b']
    #  ['10' 'c']
    #  ['20' 'a']
    #  ['20' 'b']
    #  ['20' 'c']
    #  ['30' 'a']
    #  ['30' 'b']
    #  ['30' 'c']]
</code></pre>
</div>
<span class="comment-copy">Have you tried using a <code>dict</code>?</span>
<span class="comment-copy">You seem to be doing machine learning, are you using numpy ?</span>
<span class="comment-copy">Using numpy but avoiding if its possible to accomplish same goal with python core.</span>
<span class="comment-copy">@colt.exe I gave you a numpy answer</span>
