<div class="post-text" itemprop="text">
<p>I am trying to read in a comma separated text file into Python with <code>read_csv</code>. However, Python is taking the header and shifting it over to the right by one.</p>
<p>Data file example with less columns than I actually have: (example file with more data: <a href="https://www.dropbox.com/s/5glujwqux6d0msh/test.txt?dl=0" rel="nofollow noreferrer">https://www.dropbox.com/s/5glujwqux6d0msh/test.txt?dl=0</a>)</p>
<pre><code>DAY,TIME,GENVEG,LATI,LONGI,AREA,CHEM
 226,  1200,     2,   -0.5548999786D+01,    0.3167600060D+02,    0.1000000000D+07, NaN
 226,  1115,     2,   -0.1823500061D+02,    0.3668500137D+02,    0.1000000000D+07, NaN
</code></pre>
<p>If I try the following (where <code>infile_fire</code> is the above txt file):</p>
<p><code>df_fires = pd.read_csv(infile_fire,sep="\,",skipinitialspace=True,engine='python')</code></p>
<p>I get this below. As you can see, <code>DAY</code> is actually above what should be the <code>TIME</code>column. 
(Note that the value in the <code>AREA</code> column comes from data I have in the larger dataset which isn't shown in the sample subset above)
<a href="https://i.stack.imgur.com/karmD.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/karmD.png"/></a></p>
<p>I also tried <code>df_fires = pd.read_csv(infile_fire).reset_index()</code>, and though it does create a new index (as I'd like it to do), it also moves the <code>226</code> column over and names it <code>index</code> instead of <code>DAY</code> as it should.
<a href="https://i.stack.imgur.com/g944s.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/g944s.png"/></a></p>
<p>I've also tried the following, but still got the same result (shifted headers)</p>
<p><code>df = pd.read_csv(infile_fire)</code> </p>
<p><code>df = pd.read_csv(infile_fire,index_col=None)</code></p>
<p><code>df = pd.read_csv(infile_fire,index_col=0)</code></p>
<p>How can I fix this? I just want to read in the text file and have Python set up a new index and keep the headers as is.</p>
</div>
<div class="post-text" itemprop="text">
<p>without fiddling with the options, like pandas just does the right thing, see the <code>sep</code> in the doc of <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html" rel="nofollow noreferrer">read_csv</a> and <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer" rel="nofollow noreferrer">csv.Sniffer</a>.</p>
<pre><code>from io import StringIO

import pandas as pd

data = """
DAY,TIME,GENVEG,LATI,LONGI,AREA
 226,  1200,     2,   -0.5548999786D+01,    0.3167600060D+02,    0.1000000000D+07
 226,  1115,     2,   -0.1823500061D+02,    0.3668500137D+02,    0.1000000000D+07
"""

df = pd.read_csv(StringIO(data))
df
</code></pre>
<p><a href="https://i.stack.imgur.com/FSVsu.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/FSVsu.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>As file.txt beeing your file that you want to read.</p>
<pre><code>file.txt = """
    DAY,TIME,GENVEG,LATI,LONGI,AREA
     226,  1200,     2,   -0.5548999786D+01,    0.3167600060D+02,    0.1000000000D+07
     226,  1115,     2,   -0.1823500061D+02,    0.3668500137D+02,    0.1000000000D+07
    """
</code></pre>
<p>Using:</p>
<pre><code>import pandas as pd
</code></pre>
<p>Read the file:</p>
<pre><code>df = pd.read_csv('file.txt')
</code></pre>
<p>If you take a look at your <code>df.AREA[0]</code>, it will be something like this:</p>
<pre><code>'    0.1000000000D+07'
</code></pre>
<p>Use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a> to remove blank spaces:</p>
<pre><code>df.replace('(^\s+|\s+$)', '', regex=True, inplace=True)
</code></pre>
<p>If you try to call your <code>df</code> now, the result will be:</p>
<pre><code>   DAY  TIME  GENVEG               LATI             LONGI              AREA
0  226  1200       2  -0.5548999786D+01  0.3167600060D+02  0.1000000000D+07
1  226  1115       2  -0.1823500061D+02  0.3668500137D+02  0.1000000000D+07
</code></pre>
<p>So, your <code>df.AREA[0]</code> will be somthing like this:</p>
<pre><code>'0.1000000000D+07'
</code></pre>
<p>Just like the others, for example: <code>df.LATI[0]</code></p>
<pre><code>'-0.5548999786D+01'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Setting index to False solves this issue.</p>
<p><code>df = pd.read_csv(infile_fire,index_col=False)</code></p>
</div>
<span class="comment-copy">Your data file has 6 columns but your picture has 7.</span>
<span class="comment-copy">That's because the sample has less data than my actual data set, which has over 40 columns. I just put a sample up above for reference.</span>
<span class="comment-copy">Cannot reproduce as is. The index column contains row numbers if I use <code>read_csv()</code> the same way you did against exactly the csv data you've presented.</span>
<span class="comment-copy">My point is to make the examples consistent so it is clear what you want.</span>
<span class="comment-copy">@coldspeed Edited</span>
<span class="comment-copy">I need to read in the data as a <code>.txt</code> file because this has to eventually be used as a function</span>
<span class="comment-copy">use stringio is just for illustration purpose, the point is the read_csv will use csv.Sniffer and it will figure it out what is the dialect of your csv is. just don't provide the extra options like sep etc. you need to replace the StringIO with your own file handle of couse.</span>
