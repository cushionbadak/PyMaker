<div class="post-text" itemprop="text">
<p>I am brand new to programming. Is there any way to simplify the conditional operators</p>
<pre><code>a = 50; b = 70; c = 60; 

# Classification 

if (a == b and b == c and c ==a):
   print('Equilateral triangle')

elif (a == b or b == c or c == a):
   print('Isosceles triangle')

elif (a!=b and b!=c and c!=a):
   print('Scalene triangle')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can shorten the comparisons that use <code>and</code> by using <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained comparisons</a>, and by dropping one of the tests (they are mutually exclusive), using <code>else</code> instead:</p>
<pre><code>if a == b == c:
   print('Equilateral triangle')

elif a != b != c != a:
   print('Scalene triangle')

else:
   print('Isosceles triangle')
</code></pre>
<p>Note that Python's <code>if</code> syntax doesn't require any parentheses around the test expressions.</p>
<p>Next, you could look at these values as a <em>set</em>, and test how many elements are in the set:</p>
<pre><code>unique_lengths = len({a, b, c})

if unique_lengths == 1:
   print('Equilateral triangle')

elif unique_lengths == 2:
   print('Isosceles triangle')

else:
   print('Scalene triangle')
</code></pre>
<p>This can then be turned into list lookup, mapping <code>1</code>, <code>2</code> and <code>3</code> to triangle class names; I slotted <code>None</code> into the <code>0</code> position:</p>
<pre><code>classes = [None, 'Equilateral', 'Isosceles', 'Scalene']
print(classes[len({a, b, c})], 'triangle')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a list:</p>
<pre class="lang-py prettyprint-override"><code>lis = [a,b,c]
lis.sort()
if lis[0] == lis[-1]:
    print("Equilateral triangle")
elif lis[0] == lis[1] or lis[-1] == lis[1]:
    print("Isosceles triangle")
else:
    print("Scalene triangle")
</code></pre>
</div>
<span class="comment-copy"><code>if a == b == c</code></span>
<span class="comment-copy">As a side note, you might consider including inequalities for the case when a b and c do not make a triangle at all.</span>
<span class="comment-copy">Thank you for your help. Out lecturer encourages us to use parentheses. We haven't learned about the set yet.</span>
<span class="comment-copy">@BiLAL: Then your lecturer is going against the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">industry standard Python styleguide</a>, but best stick to the conventions they set for now. :-) You'll come across sets soon enough, they can only contain unique elements (as tested by equality), and allow for fast membership testing (<i>does this set contain this specific value?</i>), among other handy operations. Turning <code>a, b, c</code> into a set when there are shared values among those 3 variables means you'll have a set with fewer than 3 values in it, and we can exploit that to count how many sides are equal.</span>
<span class="comment-copy">Thank you Martijin. I went through the styleguide and it was very helpful. Also i have started learning about sets on youtube. :)</span>
<span class="comment-copy">Is there any document where i can refer to and find a list of all the possible comparisons for different scenarios?</span>
<span class="comment-copy">@BiLAL: not sure what you mean, but that sounds like a very broad question. The reference documentation for comparisons I already linked to, and the <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">documentation for standard types</a> cover any type specific operations.</span>
<span class="comment-copy">Thank you for your help.  But i have not learned about list yet.</span>
<span class="comment-copy">That's ok . But after some months, you will find that codes from Martijn is so clear and ingenious.</span>
