<div class="post-text" itemprop="text">
<p>I have found many explanations for how to create a self-referential many-to-many relationship (for user followers or friends) using a separate table or class:</p>
<p>Below are three examples, one from Mike Bayer himself:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/4177235/many-to-many-self-referential-relationship-in-sqlalchemy">Many-to-many self-referential relationship in sqlalchemy</a></li>
<li><a href="https://stackoverflow.com/questions/9116924/how-can-i-achieve-a-self-referencing-many-to-many-relationship-on-the-sqlalchemy/9119764#9119764">How can I achieve a self-referencing many-to-many relationship on the SQLAlchemy ORM back referencing to the same attribute?</a></li>
<li><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-viii-followers" rel="nofollow noreferrer">Miguel Grinberg's Flask Megatutorial on followers</a></li>
</ul>
<p>But in every example I've found, the syntax for defining the <code>primaryjoin</code> and <code>secondaryjoin</code> in the relationship is an early-binding one:</p>
<pre><code># this relationship is used for persistence
friends = relationship("User", secondary=friendship, 
                       primaryjoin=id==friendship.c.friend_a_id,
                       secondaryjoin=id==friendship.c.friend_b_id,
)
</code></pre>
<p>This works great, except for one circumstance: when one uses a <code>Base</code> class to define the <code>id</code> column for all of your objects as shown in <a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-viii-followers" rel="nofollow noreferrer">Mixins: Augmenting the base</a> from the docs</p>
<p>My <code>Base</code> class and <code>followers</code> table are defined thusly:</p>
<pre><code>from flask_sqlchalchemy import SQLAlchemy
db = SQLAlchemy()

class Base(db.Model):
    __abstract__ = True
    id = db.Column(db.Integer, primary_key=True)

user_flrs = db.Table(
    'user_flrs',
    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('followed_id', db.Integer, db.ForeignKey('user.id')))
</code></pre>
<p>But now I have trouble with the followers relationship that has served me loyally for a while before I moved the <code>id</code>'s to the mixin:</p>
<pre><code>class User(Base):
    __table_name__ = 'user'
    followed_users = db.relationship(
        'User', secondary=user_flrs, primaryjoin=(user_flrs.c.follower_id==id),
        secondaryjoin=(user_flrs.c.followed_id==id),
        backref=db.backref('followers', lazy='dynamic'), lazy='dynamic')

db.class_mapper(User)  # trigger class mapper configuration
</code></pre>
<p>Presumably because the <code>id</code> is not present in the local scope, though it seems to throw a strange error for that:</p>
<blockquote>
<p>ArgumentError: Could not locate any simple equality expressions involving locally mapped foreign key columns for primary join condition <code>'user_flrs.follower_id = :follower_id_1'</code> on relationship <code>User.followed_users</code>.  Ensure that referencing columns are associated with a <code>ForeignKey</code> or <code>ForeignKeyConstraint</code>, or are annotated in the join condition with the <code>foreign()</code> annotation. To allow comparison operators other than <code>'=='</code>, the relationship can be marked as <code>viewonly=True</code>.</p>
</blockquote>
<p>And it throws the same error if I change the parentheses to quotes to take advantage of late-binding. I have no idea how to annotate this thing with <code>foreign()</code> and <code>remote()</code> because I simply don't know what sqlalchemy would like me to describe as foreign and remote on a self-referential relationship that crosses a secondary table! I've tried many combinations of this, but it hasn't worked thus far.</p>
<p>I had a very similar (though not identical) problem with a self-referential relationship that did <em>not</em> span a separate table and the key was simply to convert the <code>remote_side</code> argument to a late-binding one. This makes sense to me, as the <code>id</code> column isn't present during an early-binding process.</p>
<p>If it is not late-binding that I am having trouble with, please advise. In the current scope, though, my understanding is that <code>id</code> is mapped to the Python builtin <code>id()</code> and thus will not work as an early-binding relationship.</p>
<p>Converting <code>id</code> to <code>Base.id</code> in the joins results in the following error:</p>
<blockquote>
<p>ArgumentError: Could not locate any simple equality expressions involving locally mapped foreign key columns for primary join condition <code>'user_flrs.follower_id = "&lt;name unknown&gt;"'</code> on relationship <code>User.followed_users</code>.  Ensure that referencing columns are associated with a <code>ForeignKey</code> or <code>ForeignKeyConstraint</code>, or are annotated in the join condition with the <code>foreign()</code> annotation. To allow comparison operators other than <code>'=='</code>, the relationship can be marked as <code>viewonly=True</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can't use <code>id</code> in your join filters, no, because that's the <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">built-in <code>id()</code> function</a>, not the <code>User.id</code> column.</p>
<p>You have three options:</p>
<ol>
<li><p>Define the relationship <em>after</em> creating your <code>User</code> model, assigning it to a new <code>User</code> attribute; you can then reference <code>User.id</code> as it has been pulled in from the base:</p>
<pre><code>class User(Base):
    # ...

User.followed_users = db.relationship(
    User,
    secondary=user_flrs,
    primaryjoin=user_flrs.c.follower_id == User.id,
    secondaryjoin=user_flrs.c.followed_id == User.id,
    backref=db.backref('followers', lazy='dynamic'),
    lazy='dynamic'
)
</code></pre></li>
<li><p>Use strings for the join expressions. Any argument to <code>relationship()</code> that is a string is evaluated as a Python expression when configuring the mapper, not just the first argument:</p>
<pre><code>class User(Base):
    # ...

    followed_users = db.relationship(
        'User',
        secondary=user_flrs,
        primaryjoin="user_flrs.c.follower_id == User.id",
        secondaryjoin="user_flrs.c.followed_id == User.id",
        backref=db.backref('followers', lazy='dynamic'),
        lazy='dynamic'
    )
</code></pre></li>
<li><p>Define the relationships as callables; these are called at mapper configuration time to produce the final object:</p>
<pre><code>class User(Base):
    # ...

    followed_users = db.relationship(
        'User',
        secondary=user_flrs,
        primaryjoin=lambda: user_flrs.c.follower_id == User.id,
        secondaryjoin=lambda: user_flrs.c.followed_id == User.id,
        backref=db.backref('followers', lazy='dynamic'),
        lazy='dynamic'
    )
</code></pre></li>
</ol>
<p>For the latter two options, see the <a href="https://docs.sqlalchemy.org/en/latest/orm/relationship_api.html#sqlalchemy.orm.relationship" rel="nofollow noreferrer"><code>sqlalchemy.orgm.relationship()</code> documentation</a>:</p>
<blockquote>
<p>Some arguments accepted by <code>relationship()</code> optionally accept a callable function, which when called produces the desired value. The callable is invoked by the parent Mapper at “mapper initialization” time, which happens only when mappers are first used, and is assumed to be after all mappings have been constructed. This can be used to resolve order-of-declaration and other dependency issues, such as if <code>Child</code> is declared below <code>Parent</code> in the same file*[.]*</p>
<p><em>[...]</em></p>
<p>When using the Declarative extension, the Declarative initializer allows string arguments to be passed to <code>relationship()</code>. These string arguments are converted into callables that evaluate the string as Python code, using the Declarative class-registry as a namespace. This allows the lookup of related classes to be automatic via their string name, and removes the need to import related classes at all into the local module space*[.]*</p>
<p><em>[...]</em></p>
<ul>
<li><p><strong>primaryjoin</strong> –  </p>
<p><em>[...]</em></p>
<p><code>primaryjoin</code> may also be passed as a callable function which is evaluated at mapper initialization time, and may be passed as a Python-evaluable string when using Declarative.</p></li>
</ul>
<p><em>[...]</em></p>
<ul>
<li><p><strong>secondaryjoin</strong> –</p>
<p><em>[...]</em></p>
<p><code>secondaryjoin</code> may also be passed as a callable function which is evaluated at mapper initialization time, and may be passed as a Python-evaluable string when using Declarative.</p></li>
</ul>
</blockquote>
<p>Both the string and the lambda define the same <code>user_flrs.c.followed_id == User.id</code> / <code>user_flrs.c.follower_id == User.id</code> expressions as used in the first option, but because they are given as a string and callable function, respectively, you postpone evaluation until SQLAlchemy needs to have those declarations finalised.</p>
</div>
<span class="comment-copy">@MartijnPieters Updated. The only thing that seems worth including is the class definition and the import statement for the FlaskLogin mixin.</span>
<span class="comment-copy">The MCVE would probably still reproduce without that import. The important thing is not to copy your code verbatim but to provide us with a <i>reproducable example</i>. Currently, I still have to add things to be able to build up the model locally.</span>
<span class="comment-copy">@MartijnPieters Ah. I think I've always misunderstood MCVE. I built a simple sqlalchemy testing virtualenvironment the other day. I'll work on reproducing the issue in that. Might take a bit of time. Sorry. :-/</span>
<span class="comment-copy">No need, I think we are there now, I added the bits that together make this a MCVE, I get the same exception with those.</span>
<span class="comment-copy">I feel amazingly stupid for not thinking of putting <code>User.id</code> in the late-binding string. Thank you very much for the lengthy answer. It especially helps me to understand the lambda syntax I had seen in some of the docs but had never seen an explicit explanation for.</span>
