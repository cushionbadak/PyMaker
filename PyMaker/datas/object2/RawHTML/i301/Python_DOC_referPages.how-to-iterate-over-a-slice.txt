<div class="post-text" itemprop="text">
<p>A <code>slice</code> in python is not iterable. This code:</p>
<pre><code>s = slice(1, 10, 2)
iter(s)
</code></pre>
<p>results in this error:</p>
<pre><code>TypeError: 'slice' object is not iterable
</code></pre>
<p>This is the code I've come up with to show the slice by creating a list iterable:</p>
<pre><code>list(range(s.start, s.stop, s.step))
</code></pre>
<p>This uses the <code>start</code>, <code>stop</code> and <code>step</code> attributes of the slice object. I plug those into a range (an immutable sequence type) and create a list:</p>
<pre><code>[1, 3, 5, 7, 9]
</code></pre>
<p>Is there something missing? Can I iterate over a slice any better?</p>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> isn't an iterable. It doesn't contain elements, but instead specifies which elements in some other iterable are to be returned if the slice is applied to that iterable.</p>
<p>Since it's not an iterable, you can't iterate over it. As you have discovered, however, you can obtain the indices for which it will return elements from an iterable to which it is applied, using <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a> - and you <strong>can</strong> iterate over that:</p>
<pre><code>s = slice(1, 10, 2)
indices = range(s.start, s.stop, s.step)
it = iter(indices)
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; list(it)
[1, 3, 5, 7, 9]
</code></pre>
</div>
<span class="comment-copy">Shouldn't you simply need a <code>range(1, 10, 2)</code>?</span>
<span class="comment-copy">Range is more or less very similar to a slice, so I could use a range to generate that sequence but I was focused on penetrating my understanding of what a slice is and how to manipulate it. Didn't the slice come first? Then range? Range seems to be a generator, more memory efficient.</span>
<span class="comment-copy">I had a thought about subclassing slice(). class Myslice(slice): then def __getitem__(self,key) but I don't know what else to put in it. At the moment it is above my level of stupidity.</span>
<span class="comment-copy">You'll find that a little tricky … <code>class X(slice): pass</code> results in <code>TypeError: type 'slice' is not an acceptable base type</code>.</span>
<span class="comment-copy">If it were possbile, you'd define an <code>__iter__</code> method that returned <code>iter(range(self.start, self.stop, self.step))</code> – but the point is moot given my previous comment.</span>
<span class="comment-copy">You say ... 'A slice isn't an iterable. It doesn't contain elements, ...' The documentation says  ... '...Return a slice object representing the set of indices ...', now, 'the set of indices' - aren't they 'elements'? Has 'elements' got some more specific definition?</span>
<span class="comment-copy">In this context, "the set of indices" aren't elements, no. They're "where the elements you'll get are, in whatever you apply this slice to". Also, note that the word used is "representing", not "containing". It might help to think of a slice as being analagous to a function signature. It's not a thing, it's a description.</span>
