<div class="post-text" itemprop="text">
<p>I want to <code>serialize a python object</code>, after saved it into <code>mysql</code>(based on Django ORM) I want to get it and pass this object to a function which need this kind of object as a param.</p>
<p>Following two parts are my main logic code:</p>
<blockquote>
<p>1 save param part :</p>
</blockquote>
<pre class="lang-py prettyprint-override"><code>

class Param(object):
    def __init__(self, name=None, targeting=None, start_time=None, end_time=None):
        self.name = name
        self.targeting = targeting
        self.start_time = start_time
        self.end_time = end_time
    #...

param = Param()
param.name = "name1"
param.targeting= "targeting1"


task_param = {
            "task_id":task_id,              # string
            "user_name":user_name,          # string
            "param":param,                  # Param object
            "save_param":save_param_dict,   # dictionary
            "access_token":access_token,    # string
            "account_id": account_id,       # string
            "page_id": page_id,             # string
            "task_name":"sync_create_ad"    # string
        }


class SyncTaskList(models.Model):
    task_id = models.CharField(max_length=128, blank=True, null=True)
    ad_name = models.CharField(max_length=128, blank=True, null=True)
    user_name = models.CharField(max_length=128, blank=True, null=True)
    task_status = models.SmallIntegerField(blank=True, null=True)
    task_fail_reason = models.CharField(max_length=255, blank=True, null=True)
    task_name = models.CharField(max_length=128, blank=True, null=True)
    start_time = models.DateTimeField()
    end_time = models.DateTimeField(blank=True, null=True)
    task_param = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sync_task_list'



SyncTaskList(
                task_id=task_id,
                ad_name=param.name,
                user_name=user_name,
                task_status=0,
                task_param = task_param,
            ).save()

</code></pre>
<blockquote>
<p>2 use param part</p>
</blockquote>
<pre class="lang-py prettyprint-override"><code>
def add_param(param, access_token):
    pass

task_list = SyncTaskList.objects.filter(task_status=0)
for task in task_list:
    task_param = json.loads(task.task_param)
    add_param(task_param["param"], task_param["access_token"]) # pass param object to function add_param

</code></pre>
<p>If I directly use <code>Django ORM</code> to save task_param into mysql, I get error,</p>
<pre><code>json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
</code></pre>
<p>for after ORM operation, I get string who's property name enclosed in single quotes like :</p>
<pre><code>
# in mysql it saved as 

 task_param: " task_param: {'task_id': 'e4b8b240cefaf58fa9fa5a591221c90a',
              'user_name': 'jimmy',
              'param': Param(name='name1',
                                    targeting='geo_locations',
                                   ),
              'save_param': {}}"

</code></pre>
<p><br/></p>
<p>I am now confused with serializing an python object, then how to load this original object and pass it to a function?</p>
<p>Any commentary is very welcome. great thanks.</p>
<blockquote>
<p>update my solution so far</p>
</blockquote>
<pre class="lang-py prettyprint-override"><code>task_param = {
            # ...
            "param":vars(param),            # turn Param object to dictionary 
            # ...
            }

SyncTaskList(
                #...
                task_param = json.dumps(task_param),
                #...
            ).save()

#task_list = SyncTaskList.objects.filter(task_status=0)
#for task in task_list:
    task_param = json.loads(task.task_param)
    add_param(Param(**task_param["param"]), task_param["access_token"])

</code></pre>
<blockquote>
<p>update based on @AJS's answer</p>
</blockquote>
<p>directly <code>pickle dumps</code> and saved it as an <code>binary field</code>, then <code>pickle loads</code>it also works</p>
<p><br/></p>
<p>Any better solution for this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a> basically you are serializing your python object and save it as bytes in your MySQL db using <code>BinaryField</code> as your model field type in Django, as i don't think JSON serialization would work in your case as you have a python object as a value as well in your dict, when you fetch your data from db simpily unpickle it syntax is similar to json library see below.</p>
<pre><code>import pickle
#to pickle
data = pickle.dumps({'name':'testname'})
# to unpickle just do
pickle.loads(data)
</code></pre>
<p>so in your case when you unpickle your object you should get your data in same form as it was before you did pickle.</p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try looking into msgpack
<a href="https://msgpack.org/index.html" rel="nofollow noreferrer">https://msgpack.org/index.html</a></p>
<p>unlike pickle, which is python-specific, msgpack is supported by many languages (so the language you use to write to mysql <em>can</em> be different than the language used to read).</p>
<p>There are also some projects out there that integrate these serializer-libraries into Django model fields:</p>
<ul>
<li>Pickle: <a href="https://pypi.org/project/django-picklefield/" rel="nofollow noreferrer">https://pypi.org/project/django-picklefield/</a></li>
<li>MsgPack: <a href="https://github.com/vakorol/django-msgpackfield/blob/master/msgpackfield/msgpackfield.py" rel="nofollow noreferrer">https://github.com/vakorol/django-msgpackfield/blob/master/msgpackfield/msgpackfield.py</a></li>
</ul>
</div>
<span class="comment-copy">If i understand it correctly in MySql you are saving task_param as string,under column task_param, and you are saving it with single quotes. Please correct me if i am wrong</span>
<span class="comment-copy">Use <code>json.dumps(obj)</code> to convert <code>obj</code> to JSON.</span>
<span class="comment-copy">@KlausD. It will raise error <code>TypeError: Object of type 'Param' is not JSON serializable </code></span>
<span class="comment-copy">@AJS yeah,  that's true if i directly save it as my above codes showed , it automaticly turn to single quotes style</span>
<span class="comment-copy">The <code>obj</code> has to be a simple Python structure, made out of builtin types like dictionaries, list, strings, numbers... Your <code>param</code> key is not.</span>
<span class="comment-copy">thanks for your reply,  after <code>pickle.dump</code> I can get a bytes data, but when saved it into mysql by <code>Django ORM</code> it turn to be a string, and I cannot loads it back anymore</span>
<span class="comment-copy">use <code>pickle.dumps</code> it should be string, you missed <code>s</code></span>
<span class="comment-copy">no it's just an bytes obj</span>
<span class="comment-copy">yes for more complex object it does return bytes.</span>
<span class="comment-copy">i have update my answer</span>
