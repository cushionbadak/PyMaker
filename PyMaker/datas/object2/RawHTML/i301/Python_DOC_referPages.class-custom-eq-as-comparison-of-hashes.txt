<div class="post-text" itemprop="text">
<p>Consider a custom class:</p>
<pre><code>class MyObject:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __hash__(self):
        return hash((self.a, self.b))

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__hash__() == other.__hash__()
</code></pre>
<p>Is it a bad idea to make equality reliant upon the hash?  This seems like a much more elegant and readable mechanism than checking each pair of attributes in a piecemeal fashion for larger numbers of attributes ala</p>
<pre><code>self.a == other.a and self.b == other.b and ... self.n == other.n
</code></pre>
<p>or a more dynamic check using getattr and a list (is there a better way to compare large numbers of pairs of attributes?)</p>
<p>Is the size of the hash returned by the builtin hash function not large enough to be reliable in relatively large sets of data?  </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is a bad idea. Hashes are not unique, objects with equal hashes are <em>not</em> guaranteed to actually be equal too:</p>
<pre><code>&gt;&gt;&gt; (-1, 0) == (-2, 0)
False
&gt;&gt;&gt; hash((-1, 0)) == hash((-2, 0))
True
</code></pre>
<p>Hashes are not <em>meant</em> to be unique; they are a means to pick a slot in a limited-size <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash table</a> quickly, to facilitate O(1) dictionary look-ups, and collisions are <em>allowed and expected</em>.</p>
<p>Yes, Python requires that equal objects should have equal hashes, but that doesn't mean the relationship can be reversed.</p>
<p>I just compare tuples:</p>
<pre><code>def __eq__(self, other):
    return (self.a, self.b) == (other.a, other.b)
</code></pre>
<p>If you are writing a lot of <em>data classes</em>, simple classes that all need equality testing and hashing, etc. use the <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclasses</code> module</a> (Python 3.7 or up, or use a <a href="https://pypi.org/project/dataclasses/" rel="nofollow noreferrer">backport</a>):</p>
<pre><code>from dataclasses import dataclass

@dataclass(frozen=True)
class MyObject:
    a: int
    b: int
</code></pre>
<p>The above class now comes with a <code>__hash__</code> and <code>__equals__</code> method:</p>
<pre><code>&gt;&gt;&gt; MyObject(-1, 0) == MyObject(-2, 0)
False
&gt;&gt;&gt; hash(MyObject(-1, 0)) == hash(MyObject(-2, 0))
True
&gt;&gt;&gt; MyObject(42, 12345) == MyObject(42, 12345)
True
</code></pre>
</div>
<span class="comment-copy">Try <code>MyObject(-1, 0) ==  MyObject(-2, 0)</code>.</span>
<span class="comment-copy">You say you compare tuples, but is there any reason not to do <code>return vars(self) == vars(other)</code>?</span>
<span class="comment-copy">@Aran-Fey: I prefer being explicit; <code>vars(self) == vars(other)</code> breaks the moment you store some additional attributes on the objects (annotations for a different use case, say). <code>obj._cache_key = 'foobar'</code> breaking equality testing would be very surprising.</span>
