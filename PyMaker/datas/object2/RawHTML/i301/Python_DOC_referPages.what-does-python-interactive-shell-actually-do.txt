<div class="post-text" itemprop="text">
<p>I've been looking at dynamic evaluation of Python code, and come across the <code>eval()</code> and <code>compile()</code> functions, and the <code>exec</code> statement.</p>
<p>Can someone please explain the difference between <code>eval</code> and <code>exec</code>, and how the different modes of <code>compile()</code> fit in?</p>
</div>
<div class="post-text" itemprop="text">
<h1>The short answer, or TL;DR</h1>
<p>Basically, <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> is used to <strong>eval</strong>uate a single dynamically generated Python expression, and <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> is used to <strong>exec</strong>ute dynamically generated Python code only for its side effects.</p>
<p><code>eval</code> and <code>exec</code> have these two differences:</p>
<ol>
<li><p><code>eval</code> accepts only a <strong>single expression</strong>, <code>exec</code> can take a code block that has Python statements: loops, <code>try: except:</code>, <code>class</code> and function/method <code>def</code>initions and so on. </p>
<p>An expression in Python is whatever you can have as the value in a variable assignment:</p>
<pre><code>a_variable = (anything you can put within these parentheses is an expression)
</code></pre></li>
<li><p><code>eval</code> <strong>returns the value</strong> of the given expression, whereas <code>exec</code> ignores the return value from its code, and always returns <code>None</code> (in Python 2 it is a statement and cannot be used as an expression, so it really does not return anything).</p></li>
</ol>
<p>In versions 1.0 - 2.7, <code>exec</code> was a statement, because CPython needed to produce a different kind of code object for functions that used <code>exec</code> for its side effects inside the function. </p>
<p>In Python 3, <code>exec</code> is a function; its use has no effect on the compiled bytecode of the function where it is used.</p>
<hr/>
<p>Thus basically:</p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; eval('37 + a')   # it is an expression
42
&gt;&gt;&gt; exec('37 + a')   # it is an expression statement; value is ignored (None is returned)
&gt;&gt;&gt; exec('a = 47')   # modify a global variable as a side effect
&gt;&gt;&gt; a
47
&gt;&gt;&gt; eval('a = 47')  # you cannot evaluate a statement
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    a = 47
      ^
SyntaxError: invalid syntax
</code></pre>
<hr/>
<p>The <code>compile</code> in <code>'exec'</code> mode compiles any number of statements into a bytecode that implicitly always returns <code>None</code>, whereas in <code>'eval'</code> mode it compiles a <em>single</em> expression into bytecode that <em>returns</em> the value of that expression. </p>
<pre><code>&gt;&gt;&gt; eval(compile('42', '&lt;string&gt;', 'exec'))  # code returns None
&gt;&gt;&gt; eval(compile('42', '&lt;string&gt;', 'eval'))  # code returns 42
42
&gt;&gt;&gt; exec(compile('42', '&lt;string&gt;', 'eval'))  # code returns 42,
&gt;&gt;&gt;                                          # but ignored by exec
</code></pre>
<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>
<pre><code>&gt;&gt;&gt; compile('for i in range(3): print(i)', '&lt;string&gt;', 'eval')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    for i in range(3): print(i)
      ^
SyntaxError: invalid syntax
</code></pre>
<hr/>
<p>Actually the statement <em>"eval accepts only a single expression"</em> applies only when a string (which contains Python <em>source code</em>) is passed to <code>eval</code>. Then it is internally compiled to bytecode using <a href="https://docs.python.org/3/library/functions.html#compile" rel="noreferrer"><code>compile(source, '&lt;string&gt;', 'eval')</code></a> This is where the difference really comes from.</p>
<p>If a <code>code</code> object (which contains Python <em>bytecode</em>) is passed to <code>exec</code> or <code>eval</code>, <em>they behave identically</em>, excepting for the fact that <code>exec</code> ignores the return value, still returning <code>None</code> always. So it is possible use <code>eval</code> to execute something that has statements, if you just <code>compile</code>d it into bytecode before instead of passing it as a string:</p>
<pre><code>&gt;&gt;&gt; eval(compile('if 1: print("Hello")', '&lt;string&gt;', 'exec'))
Hello
&gt;&gt;&gt;
</code></pre>
<p>works without problems, even though the compiled code contains statements. It still returns <code>None</code>, because that is the return value of the code object returned from <code>compile</code>.</p>
<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>
<pre><code>&gt;&gt;&gt; compile('for i in range(3): print(i)', '&lt;string&gt;'. 'eval')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    for i in range(3): print(i)
      ^
SyntaxError: invalid syntax
</code></pre>
<h1>The longer answer, a.k.a the gory details</h1>
<h2><code>exec</code> and <code>eval</code></h2>
<p>The <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> function (which was <a href="https://docs.python.org/2/reference/simple_stmts.html#exec" rel="noreferrer">a statement in Python 2</a>) is used for executing a dynamically created statement or program:</p>
<pre><code>&gt;&gt;&gt; program = '''
for i in range(3):
    print("Python is cool")
'''
&gt;&gt;&gt; exec(program)
Python is cool
Python is cool
Python is cool
&gt;&gt;&gt; 
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> function does the same for a <a href="https://docs.python.org/3/reference/expressions.html" rel="noreferrer">single expression</a>, <em>and</em> returns the value of the expression:</p>
<pre><code>&gt;&gt;&gt; a = 2
&gt;&gt;&gt; my_calculation = '42 * a'
&gt;&gt;&gt; result = eval(my_calculation)
&gt;&gt;&gt; result
84
</code></pre>
<p><code>exec</code> and <code>eval</code> both accept the program/expression to be run either as a <code>str</code>, <code>unicode</code> or <code>bytes</code> object containing source code, or as a <em><code>code</code> object</em> which contains Python bytecode. </p>
<p>If a <code>str</code>/<code>unicode</code>/<code>bytes</code> containing source code was passed to <code>exec</code>, it behaves equivalently to:</p>
<pre><code>exec(compile(source, '&lt;string&gt;', 'exec'))
</code></pre>
<p>and <code>eval</code> similarly behaves equivalent to:</p>
<pre><code>eval(compile(source, '&lt;string&gt;', 'eval'))
</code></pre>
<hr/>
<p>Since all expressions can be used as statements in Python (these are called the <code>Expr</code> nodes in the Python <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="noreferrer">abstract grammar</a>; the opposite is not true), you can always use <code>exec</code> if you do not need the return value. That is to say, you can use either <code>eval('my_func(42)')</code> or <code>exec('my_func(42)')</code>, the difference being that <code>eval</code> returns the value returned by <code>my_func</code>, and <code>exec</code> discards it:</p>
<pre><code>&gt;&gt;&gt; def my_func(arg):
...     print("Called with %d" % arg)
...     return arg * 2
... 
&gt;&gt;&gt; exec('my_func(42)')
Called with 42
&gt;&gt;&gt; eval('my_func(42)')
Called with 42
84
&gt;&gt;&gt; 
</code></pre>
<p>Of the 2, only <code>exec</code> accepts source code that contains statements, like <code>def</code>, <code>for</code>, <code>while</code>, <code>import</code>, or <code>class</code>, the assignment statement (a.k.a <code>a = 42</code>), or entire programs:</p>
<pre><code>&gt;&gt;&gt; exec('for i in range(3): print(i)')
0
1
2
&gt;&gt;&gt; eval('for i in range(3): print(i)')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    for i in range(3): print(i)
      ^
SyntaxError: invalid syntax
</code></pre>
<hr/>
<p>Both <code>exec</code> and <code>eval</code> accept 2 additional positional arguments - <code>globals</code> and <code>locals</code> - which are the global and local variable scopes that the code sees. These default to the <code>globals()</code> and <code>locals()</code> within the scope that called <code>exec</code> or <code>eval</code>, but any dictionary can be used for <code>globals</code> and any <code>mapping</code> for <code>locals</code> (including <code>dict</code> of course). These can be used not only to restrict/modify the variables that the code sees, but are often also used for capturing the variables that the <code>exec</code>uted code creates:</p>
<pre><code>&gt;&gt;&gt; g = dict()
&gt;&gt;&gt; l = dict()
&gt;&gt;&gt; exec('global a; a, b = 123, 42', g, l)
&gt;&gt;&gt; g['a']
123
&gt;&gt;&gt; l
{'b': 42}
</code></pre>
<p>(If you display the value of the entire <code>g</code>, it would be much longer, because <code>exec</code> and <code>eval</code> add the built-ins module as <code>__builtins__</code> to the globals automatically if it is missing).</p>
<p>In Python 2, the official syntax for the <code>exec</code> statement is actually <code>exec code in globals, locals</code>, as in</p>
<pre><code>&gt;&gt;&gt; exec 'global a; a, b = 123, 42' in g, l
</code></pre>
<p>However the alternate syntax <code>exec(code, globals, locals)</code> has always been accepted too (see below).</p>
<h2><code>compile</code></h2>
<p>The <a href="https://docs.python.org/3/library/functions.html#compile" rel="noreferrer"><code>compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</code></a> built-in can be used to speed up repeated invocations of the same code with <code>exec</code> or <code>eval</code> by compiling the source into a <code>code</code> object beforehand. The <code>mode</code> parameter controls the kind of code fragment the <code>compile</code> function accepts and the kind of bytecode it produces. The choices are <code>'eval'</code>, <code>'exec'</code> and <code>'single'</code>:</p>
<ul>
<li><p><code>'eval'</code> mode expects a single expression, and will produce bytecode that when run will return the value of <strong>that expression</strong>:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('a + b', '&lt;string&gt;', 'eval'))
  1           0 LOAD_NAME                0 (a)
              3 LOAD_NAME                1 (b)
              6 BINARY_ADD
              7 RETURN_VALUE
</code></pre></li>
<li><p><code>'exec'</code> accepts any kinds of python constructs from single expressions to whole modules of code, and executes them as if they were module top-level statements. The code object returns <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('a + b', '&lt;string&gt;', 'exec'))
  1           0 LOAD_NAME                0 (a)
              3 LOAD_NAME                1 (b)
              6 BINARY_ADD
              7 POP_TOP                             &lt;- discard result
              8 LOAD_CONST               0 (None)   &lt;- load None on stack
             11 RETURN_VALUE                        &lt;- return top of stack
</code></pre></li>
<li><p><code>'single'</code> is a limited form of <code>'exec'</code> which accepts a source code containing a <strong>single</strong> statement (or multiple statements separated by <code>;</code>) if the last statement is an expression statement, the resulting bytecode also <em>prints the <code>repr</code> of the value of that expression to the standard output(!)</em>.</p>
<p>An <code>if</code>-<code>elif</code>-<code>else</code> chain, a loop with <code>else</code>, and <code>try</code> with its <code>except</code>, <code>else</code> and <code>finally</code> blocks is considered a single statement.</p>
<p>A source fragment containing 2 top-level statements is an error for the <code>'single'</code>, except in Python 2 there is <em>a bug</em> that sometimes allows multiple toplevel statements in the code; only the first is compiled; the rest are ignored:</p>
<p>In Python 2.7.8:</p>
<pre><code>&gt;&gt;&gt; exec(compile('a = 5\na = 6', '&lt;string&gt;', 'single'))
&gt;&gt;&gt; a
5
</code></pre>
<p>And in Python 3.4.2:</p>
<pre><code>&gt;&gt;&gt; exec(compile('a = 5\na = 6', '&lt;string&gt;', 'single'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    a = 5
        ^
SyntaxError: multiple statements found while compiling a single statement
</code></pre>
<p>This is very useful for making interactive Python shells. However, the value of the expression is <em>not returned</em>, even if you <code>eval</code> the resulting code.</p></li>
</ul>
<p>Thus greatest distinction of <code>exec</code> and <code>eval</code> actually comes from the <code>compile</code> function and its modes.</p>
<hr/>
<p>In addition to compiling source code to bytecode, <code>compile</code> supports compiling <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="noreferrer"><em>abstract syntax trees</em></a> (parse trees of Python code) into <code>code</code> objects; and source code into abstract syntax trees (the <code>ast.parse</code> is written in Python and just calls <code>compile(source, filename, mode, PyCF_ONLY_AST)</code>); these are used for example for modifying source code on the fly, and also for dynamic code creation, as it is often easier to handle the code as a tree of nodes instead of lines of text in complex cases.</p>
<hr/>
<p>While <code>eval</code> only allows you to evaluate a string that contains a single expression, you can <code>eval</code> a whole statement, or even a whole module that has been <code>compile</code>d into bytecode; that is, with Python 2, <code>print</code> is a statement, and cannot be <code>eval</code>led directly:</p>
<pre><code>&gt;&gt;&gt; eval('for i in range(3): print("Python is cool")')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    for i in range(3): print("Python is cool")
      ^
SyntaxError: invalid syntax
</code></pre>
<p><code>compile</code> it with <code>'exec'</code> mode into a <code>code</code> object and you can <strong><code>eval</code>  it</strong>; the <code>eval</code> function will return <code>None</code>.</p>
<pre><code>&gt;&gt;&gt; code = compile('for i in range(3): print("Python is cool")',
                   'foo.py', 'exec')
&gt;&gt;&gt; eval(code)
Python is cool
Python is cool
Python is cool
</code></pre>
<p>If one looks into <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l805" rel="noreferrer"><code>eval</code></a> and <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l882" rel="noreferrer"><code>exec</code></a> source code in CPython 3, this is very evident; they both call <code>PyEval_EvalCode</code> with same arguments, the only difference being that <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l903" rel="noreferrer"><code>exec</code> explicitly returns <code>None</code></a>.</p>
<h2>Syntax differences of <code>exec</code> between Python 2 and Python 3</h2>
<p>One of the major differences in Python <strong>2</strong> is that <code>exec</code> is a statement and <code>eval</code> is a built-in function (both are built-in functions in Python 3).
It is a well-known fact that the official syntax of <code>exec</code> in Python 2 is <code>exec code [in globals[, locals]]</code>.</p>
<p>Unlike majority of the Python 2-to-3 <a href="http://python3porting.com/differences.html#exec" rel="noreferrer">porting</a> <a href="http://python-future.org/reference.html?highlight=exec#future.utils.exec_" rel="noreferrer">guides</a> <a href="http://docs.pythonsprints.com/python3_porting/py-porting.html#exec-statement" rel="noreferrer">seem</a> <a href="http://nedbatchelder.com/blog/200910/running_the_same_code_on_python_2x_and_3x.html" rel="noreferrer">to suggest</a>, the <code>exec</code> statement in CPython 2 can be also used with syntax that <em>looks</em> <strong>exactly</strong> like the <code>exec</code> function invocation in Python 3. The reason is that Python 0.9.9 had the <code>exec(code, globals, locals)</code> built-in function! And that built-in function was replaced with <code>exec</code> statement <a href="https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c" rel="noreferrer">somewhere before Python 1.0 release</a>.</p>
<p>Since it was desirable to not break backwards compatibility with Python 0.9.9, <a href="https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c#l2521" rel="noreferrer">Guido van Rossum added a compatibility hack in 1993</a>: if the <code>code</code> was a tuple of length 2 or 3, and <code>globals</code> and <code>locals</code> were not passed into the <code>exec</code> statement otherwise, the <code>code</code> would be interpreted as if the 2nd and 3rd element of the tuple were the <code>globals</code> and <code>locals</code> respectively. The compatibility hack was not mentioned even in <a href="https://docs.python.org/release/1.4/ref/ref6.html#HDR10" rel="noreferrer">Python 1.4 documentation (the earliest available version online)</a>; and thus was not known to many writers of the porting guides and tools, until it was <a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement" rel="noreferrer">documented</a> again <a href="https://mail.python.org/pipermail/python-dev/2012-November/122651.html" rel="noreferrer">in November 2012</a>:</p>
<blockquote>
<p>The first expression may also be a tuple of length 2 or 3. In this case, the optional parts must be omitted. The form <code>exec(expr, globals)</code> is equivalent to <code>exec expr in globals</code>, while the form <code>exec(expr, globals, locals)</code> is equivalent to <code>exec expr in globals, locals</code>. The tuple form of <code>exec</code> provides compatibility with Python 3, where <code>exec</code> is a function rather than a statement.</p>
</blockquote>
<p>Yes, in CPython 2.7 that it is handily referred to as being a forward-compatibility option (why confuse people over that there is a backward compatibility option at all), 
when it actually had been there for <em>backward-compatibility for two decades</em>.</p>
<p>Thus while <code>exec</code> is a statement in Python 1 and Python 2, and a built-in function in Python 3 and Python 0.9.9,</p>
<pre><code>&gt;&gt;&gt; exec("print(a)", globals(), {'a': 42})
42
</code></pre>
<p>has had identical behaviour in possibly every widely released Python version ever; and works in Jython 2.5.2, PyPy 2.3.1 (Python 2.7.6) and IronPython 2.6.1 too (kudos to them following the undocumented behaviour of CPython closely).</p>
<p>What you cannot do in Pythons 1.0 - 2.7 with its compatibility hack, is to store the return value of <code>exec</code> into a variable:</p>
<pre><code>Python 2.7.11+ (default, Apr 17 2016, 14:00:29) 
[GCC 5.3.1 20160413] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = exec('print(42)')
  File "&lt;stdin&gt;", line 1
    a = exec('print(42)')
           ^
SyntaxError: invalid syntax
</code></pre>
<p>(which wouldn't be useful in Python 3 either, as <code>exec</code> always returns <code>None</code>), or pass a reference to <code>exec</code>:</p>
<pre><code>&gt;&gt;&gt; call_later(exec, 'print(42)', delay=1000)
  File "&lt;stdin&gt;", line 1
    call_later(exec, 'print(42)', delay=1000)
                  ^
SyntaxError: invalid syntax
</code></pre>
<p>Which a pattern that someone might actually have used, though unlikely; </p>
<p>Or use it in a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [exec(i) for i in ['print(42)', 'print(foo)']
  File "&lt;stdin&gt;", line 1
    [exec(i) for i in ['print(42)', 'print(foo)']
        ^
SyntaxError: invalid syntax
</code></pre>
<p>which is abuse of list comprehensions (use a <code>for</code> loop instead!).</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>exec</code> is not an expression: a statement in Python 2.x, and a function in Python 3.x. It compiles and immediately evaluates a statement or set of statement contained in a string. Example:</p>
<pre><code>exec('print(5)')           # prints 5.
# exec 'print 5'     if you use Python 2.x, nor the exec neither the print is a function there
exec('print(5)\nprint(6)')  # prints 5{newline}6.
exec('if True: print(6)')  # prints 6.
exec('5')                 # does nothing and returns nothing.
</code></pre></li>
<li><p><code>eval</code> is a built-in function (<strong>not</strong> a statement), which evaluates an expression and returns the value that expression produces. Example:</p>
<pre><code>x = eval('5')              # x &lt;- 5
x = eval('%d + 6' % x)     # x &lt;- 11
x = eval('abs(%d)' % -100) # x &lt;- 100
x = eval('x = 5')          # INVALID; assignment is not an expression.
x = eval('if 1: x = 4')    # INVALID; if is a statement, not an expression.
</code></pre></li>
<li><p><code>compile</code> is a lower level version of <code>exec</code> and <code>eval</code>. It does not execute or evaluate your statements or expressions, but returns a code object that can do it. The modes are as follows:</p>
<ol>
<li><code>compile(string, '', 'eval')</code> returns the code object that would have been executed had you done <code>eval(string)</code>. Note that you <em>cannot</em> use statements in this mode; only a (single) expression is valid.</li>
<li><code>compile(string, '', 'exec')</code> returns the code object that would have been executed had you done <code>exec(string)</code>. You can use any number of statements here.</li>
<li><code>compile(string, '', 'single')</code> is like the <code>exec</code> mode, but it will ignore everything except for the first statement. Note that an <code>if</code>/<code>else</code> statement with its results is considered a single statement.</li>
</ol></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>exec is for statement and does not return anything.
eval is for expression and returns value of expression.</p>
<p>expression means "something" while statement means "do something".</p>
</div>
<span class="comment-copy">Was <code>[i for i in globals().values() if hasattr(i, '__call__')][0]</code> a statement or expression? If it was an expression, why can't I use it with <code>@</code> as decorator?</span>
<span class="comment-copy">it is an expression. <code>42</code> is also an expression, and you cannot use it with <code>@</code> as a decorator.</span>
<span class="comment-copy">The decorator syntax is <a href="https://docs.python.org/3/reference/compound_stmts.html#grammar-token-dotted_name" rel="nofollow noreferrer"><code>decorator ::=  "@" dotted_name ["(" [parameter_list [","]] ")"] NEWLINE</code></a>; i.e. you cannot use arbitrary expressions as decorators, ONLY a (maybe dotted) identifier, followed by optional call arguments.</span>
<span class="comment-copy">Not anything that can be put on the right side of an assignment and still compile is an expression. For example, <code>a = b = c</code> is a perfectly valid statement, as is its right-hand side <code>b = c</code> - which is not an expression.</span>
<span class="comment-copy">I would just like to say I'm amazed by the quality and depth of this answer :)</span>
<span class="comment-copy">In Python 3, <code>exec()</code> now is in fact a function.</span>
<span class="comment-copy">Since (as you point out), <code>exec</code> is a statement in the version you were targeting, it's deceptive to include those parens, and if you try to use the <code>in globals, locals</code>, also buggy.</span>
<span class="comment-copy">@MikeGraham <code>exec</code> <b>supports parentheses and function like invocation in Python 2</b>.</span>
<span class="comment-copy">@AnttiHaapala insofar as assignment 'supports parentheses' because you can do <code>x = (y)</code>, that might be true. Another statement-turned-function is <code>print</code>; compare the result of <code>print(1, 2, 3)</code> in python 2 and 3.</span>
<span class="comment-copy">@habnabit not like that. Please read the bottom of <a href="http://stackoverflow.com/a/29456463/918959">my answer</a> here and be surprised.</span>
<span class="comment-copy">The second paragraph is such a simplification that it almost becomes a lie, an expression can very much do something if it includes a function call.</span>
