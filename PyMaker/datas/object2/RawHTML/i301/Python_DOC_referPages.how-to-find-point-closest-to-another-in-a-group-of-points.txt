<div class="post-text" itemprop="text">
<p>Say I have a list of X,Y points. I then add a new point, how would i find out which old point the newly added point is closest too? I've seen a few similar questions but couldn't get any to work. I'm looking for something like:</p>
<pre><code>pnts = [[11145,1146], [11124,1155], [11212,1147], etc]
new_pnt = [11444, 1160]
new_pnt.closest()
</code></pre>
<p>I've tried scipy and KDTree and kept getting various errors. Brand new to Python, any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest and quickest way would be for you to define a function to measure the distance to every point and return the closest one. For example (assuming euclidean distance):</p>
<pre><code>&gt;&gt;&gt; pnts = [[11145,1146], [11124,1155], [11212,1147]]
&gt;&gt;&gt; new_pnt = [11444, 1160]
&gt;&gt;&gt; def closest(points, new_point):
    closest_point = None
    closest_distance = None
    for point in points:
        distance = ((point[0] - new_point[0])**2 + (point[1] - new_point[1])**2)**0.5
        if closest_distance is None or distance &lt; closest_distance:
            closest_point = point
            closest_distance = distance
    return closest_point

&gt;&gt;&gt; closest(pnts, new_pnt)
[11212, 1147]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's probably a much more concise way but this answers it.</p>
<pre><code>from math import hypot

pnts = [[11145, 1146], [11124, 1155], [11212, 1147]]
new_pnt = [11444, 1160]


def distance(x1, x2, y1, y2):
    dist = hypot(x2 - x1, y2 - y1)
    return dist


def lowest_distance(points, new_point):
    distances = []
    for point in points:
        dist_between_points = distance(point[0], new_point[0], point[1], new_point[1])
        distances.append(dist_between_points)

    index_of_lowest_dist = distances.index(min(distances))

    return pnts[index_of_lowest_dist]


print(lowest_distance(pnts, new_pnt))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you have NumPy available? If so:</p>
<pre><code>import numpy as np
index = np.argmin(np.sum((np.array(pnts) - np.array(new_pnt))**2, axis=1))
print(index)  # 2
</code></pre>
<p>That is, the point <code>pnts[2]</code> is closest to <code>new_pnt</code>. The distance is given by the square root of the sum of differences between a pair of x and y coordinates. Here I leave out the square root, as the point with the smallest squared distance is also the point with the smallest distance.</p>
</div>
<span class="comment-copy">You could use <a href="https://docs.python.org/3/library/math.html#math.hypot" rel="nofollow noreferrer"><code>math.hypot()</code></a> to calculate the distance between any two points and then use that value to determine which one is closest.</span>
<span class="comment-copy">Do you want <i>Euclidian distance</i> (assuming an idealized plane) or a non-planar distance? If your coordinates are geographical, for example, you might want to use a different mechanism (Haversine at least). Also, how many points are you going to be comparing to? For a small number of points, checking linearly won't be a problem, but for a very large number of points it will quickly become intractable and you'll need some kind of heuristic (e.g. using an RTree or something).</span>
