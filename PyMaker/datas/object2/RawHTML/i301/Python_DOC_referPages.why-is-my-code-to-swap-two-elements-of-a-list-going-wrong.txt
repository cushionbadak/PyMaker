<div class="post-text" itemprop="text">
<p>Here is my code:</p>
<pre><code>a = [1, 2, 3, 4, 5]
a[0], a[a[0]] = a[a[0]], a[0]
print(a)
</code></pre>
<p>I'm trying to swap <code>a[0]</code> with <code>a[a[0]]</code> (i.e. <code>a[1]</code> in this case), so the result I expect is:</p>
<pre><code>[2, 1, 3, 4, 5]
</code></pre>
<p>The result I get is <code>[2, 2, 1, 4, 5]</code>, which is not what I want.</p>
<p>if I simplify <code>a[0], a[a[0]] = a[a[0]], a[0]</code> to <code>a[0], a[1] = a[1], a[0]</code>, it works.</p>
<p>How can I make this swap inside a list work like <code>a, b = b, a</code> does? </p>
</div>
<div class="post-text" itemprop="text">
<p>That assignment's doing quite a lot. Let's break everything down …</p>
<pre><code>a = [1, 2, 3, 4, 5]
</code></pre>
<p>Ok, that's the easy bit. Next:</p>
<pre><code>a[0], a[a[0]] = a[a[0]], a[0]
</code></pre>
<p>The first thing that happens in any assignment is that the right hand side is evaluated, so:</p>
<p><code>a[a[0]], a[0]</code> reduces to <code>a[1], a[0]</code>, which evaluates to <code>(2, 1)</code>.</p>
<p>Then, each assignment target in turn gets one of those items from the right hand side assigned to it:</p>
<pre><code>a[0] = 2   # 2 == first item in the (already evaluated) right hand side
</code></pre>
<p>Now that's done, <code>a</code> looks like this:</p>
<pre><code>[2, 2, 3, 4, 5]
</code></pre>
<p>Now we'll do the second assignment:</p>
<pre><code>a[a[0]] = 1   # 1 == second item in the (already evaluated) right hand side
</code></pre>
<p>But wait! <code>a[0]</code> is now <code>2</code>, so this reduces to</p>
<pre><code>a[2] = 1
</code></pre>
<p>And, lo and behold, if we look at <code>a</code> again, it's ended up as:</p>
<pre><code>[2, 2, 1, 4, 5]
</code></pre>
<p>What you've discovered is that although Python claims to be able to swap two values simultaneously with e.g. <code>a, b = b, a</code>, that isn't really true. It almost always works in practice, but if one of the values is part of the description of the other one – in this case, <code>a[0]</code> is part of the description of <code>a[a[0]]</code> – the implementation details can trip you up.</p>
<p>The way to fix this is to store the initial value of <code>a[0]</code> before you start reassigning things:</p>
<pre><code>a = [1, 2, 3, 4, 5]
tmp = a[0]
a[0], a[tmp] = a[tmp], a[0]
</code></pre>
<p>After which, <code>a</code> looks the way you'd expect:</p>
<pre><code>[2, 1, 3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>python system lib <code>dis</code> module may help. The <code>dis</code> module supports the analysis of CPython bytecode by disassembling it. you can disassembling it to see how the swap works internally.</p>
<pre><code>In [1]: import dis
In [2]: def func():
    ...:     a = [1, 2, 3, 4, 5]
    ...:     a[0], a[a[0]] = a[a[0]], a[0]
    ...:     print a

In [3]: func()
[2, 2, 1, 4, 5]

In [4]: dis.dis(func)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 LOAD_CONST               4 (4)
             12 LOAD_CONST               5 (5)
             15 BUILD_LIST               5
             18 STORE_FAST               0 (a)   # make list: a = [1, 2, 3, 4, 5]

  3          21 LOAD_FAST                0 (a)   # stack: a
             24 LOAD_FAST                0 (a)   # stack: a|a
             27 LOAD_CONST               6 (0)   # stack: a|a|0
             30 BINARY_SUBSCR                    # stack: a|1
             31 BINARY_SUBSCR                    # stack: 2
             32 LOAD_FAST                0 (a)   # stack: 2|a
             35 LOAD_CONST               6 (0)   # stack: 2|a|0
             38 BINARY_SUBSCR                    # stack: 2|1
             39 ROT_TWO                          # stack: 1|2
             40 LOAD_FAST                0 (a)   # stack: 1|2|a
             43 LOAD_CONST               6 (0)   # stack: 1|2|a|0
             46 STORE_SUBSCR                     # stack: 1|          a: a[0] = 2
             47 LOAD_FAST                0 (a)   # stack: 1|a
             50 LOAD_FAST                0 (a)   # stack: 1|a|a
             53 LOAD_CONST               6 (0)   # stack: 1|a|a|0
             56 BINARY_SUBSCR                    # stack: 1|a|2
             57 STORE_SUBSCR                     # stack:             a: a[2] = 1

  4          58 LOAD_FAST                0 (a)
             61 PRINT_ITEM
             62 PRINT_NEWLINE
             63 LOAD_CONST               0 (None)
             66 RETURN_VALUE
</code></pre>
<p><a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer">https://docs.python.org/3/library/dis.html</a></p>
</div>
<span class="comment-copy"><code>a = [1, 2, 3, 4, 5]; a[0], a[a[0]] = a[a[0]], a[0]; print(a)</code>, in my system, it prints [2, 2, 1, 4, 5].</span>
<span class="comment-copy">sorry, i made a mistake, [2, 2, 1, 4, 5] is true.</span>
<span class="comment-copy">also mention, what you are expecting.</span>
