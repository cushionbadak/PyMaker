<div class="post-text" itemprop="text">
<p>I try to unpack a list of values from bytes. I want to read and unpack them together but i meet this thing...</p>
<p>When we calculate a size of concatenated string fmt we get one result, 
if we calculate a size of all parts of string fmt and sum them, we get another result (expected result).</p>
<pre><code>from struct import calcsize

f0 = '3B'
f1 = '2H'
f2 = '1B'
f3 = '4H'
f4 = '2B'

print(calcsize(f0) + calcsize(f1) + calcsize(f2) + calcsize(f3) + calcsize(f4))
# 18       (expected) 

print(calcsize(f0 + f1 + f2 + f3 + f4))
# 20       (what?!! o_O)
</code></pre>
<p>May be I does not understand something?</p>
</div>
<div class="post-text" itemprop="text">
<p>In "native" byte order (the default), the <code>struct</code> module applies the same padding rules as C does to its structures. So a padding byte occurs between <code>3B</code> and <code>2H</code> (because <code>H</code> is two byte aligned), and another between <code>1B</code> and <code>4H</code>.</p>
<p>Per <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>Note: By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use <code>standard</code> size and alignment instead of <code>native</code> size and alignment: see <a href="https://docs.python.org/3/library/struct.html#struct-alignment" rel="nofollow noreferrer">Byte Order, Size, and Alignment</a> for details.</p>
</blockquote>
<p>So just use a non-default size/alignment to "fix" this if appropriate.</p>
</div>
<span class="comment-copy">Thank you very much</span>
