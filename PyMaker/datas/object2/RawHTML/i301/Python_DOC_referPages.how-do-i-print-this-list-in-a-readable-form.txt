<div class="post-text" itemprop="text">
<p>I have written a short python script to search for urls with a http status code in a logfile. The script works as intended and counts how often an url is requested in combination with a certain http status code. The dictionary with the results is unsorted. Thats why i sorted the data afterwards using the values in the dictionary. This part of the script works as intended and i get a sorted list with the urls and the counter, The list looks like:</p>
<pre><code>([('http://example1.com"', 1), ('http://example2.com"', 5), ('http://example3.com"', 10)])
</code></pre>
<p>I just want to make it better readable and print the list in rows.  </p>
<pre><code>http://example1.com      1  
http://example2.com      5  
http://example3.com      10  
</code></pre>
<p>I started with python only two weeks ago and i cant find a solution. I tried several solutions i found here on stackoverflow but nothing works. My current solution prints all urls in seperate rows but does not show the count. I cant use comma as a seperator because i got some url with commas in my logfile.  Im sorry for my bad english and the stupid question. Thank you in advance.</p>
<pre><code>from operator import itemgetter
from collections import OrderedDict

d=dict()

with open("access.log", "r") as f:
    for line in f:
        line_split = line.split()
        list = line_split[5], line_split[8]
        url=line_split[8]
        string='407'
        if string in line_split[5]:
            if url in d:
                d[url]+=1
            else:
                d[url]=1


sorted_d = OrderedDict(sorted(d.items(), key=itemgetter(1)))

for element in sorted_d:
    parts=element.split(') ')
    print(parts)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First if you're already importing from the <code>collections</code> library, why not import a <code>Counter</code>?</p>
<pre><code>from collections import Counter

d=Counter()

with open("access.log", "r") as f:
    for line in f:
        line_split = line.split()
        list = line_split[5], line_split[8]
        url=line_split[8]
        string='407'
        if string in line_split[5]:
            d[url] += 1

for key, value in d.most_common():  # or reversed(d.most_common())
    print(f'{key} {value}')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for url, count in sorted_d.items():
    print(f'{url} {count}')
</code></pre>
<p>Replace your last for loop with the above.</p>
<p>To explain: we unpack the url, count pairs in of <code>sorted_d</code> in the for loop, and then use the a f-string to print the url and count separated by a space.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many good tutorials on how to format strings in Python such as <a href="https://realpython.com/python-string-formatting/#2-new-style-string-formatting-strformat" rel="nofollow noreferrer">this</a></p>
<p>Here an example code how to print a dictionary. I set the width of the columns with the variables <code>c1</code> and <code>c2</code>.</p>
<pre><code>c1 = 34; c2 = 10 
printstr = '\n|%s|%s|' % ('-'*c1, '-'*c2)
for key in sorted(d.keys()):
    val_str = str(d[key])
    printstr += '\n|%s|%s|' % (str(key).ljust(c1), val_str.rjust(c2))
printstr += '\n|%s|%s|\n\n' % ('-' * c1, '-' * c2)
print(printstr)
</code></pre>
<p>The string function <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer"><code>ljust()</code></a> creates a string of the length passed as an argument where the content of the string is left justified. </p>
</div>
<span class="comment-copy">use string formatting to print in standarad way or give you accesslog file</span>
<span class="comment-copy">I cant upload one of our accesslogs for security reasons. Is it not possible to just print my list sorted_d in a more readable format?</span>
<span class="comment-copy">Interesting point. I'm having trouble thinking of how that could manifest, considering how <code>Counter</code> is a subclass of <code>dict</code>. Can you give an example?  And thanks for the Python3 edit!</span>
<span class="comment-copy">Whoops, you're right! I wasn't aware that counter was a subclass of dict, I'll delete my earlier comment to avoid confusion to future readers.</span>
<span class="comment-copy">thank you. works perfect although i still struggle to fully understand why. :)</span>
<span class="comment-copy">Great to hear that it worked for you :) I used tuple unpacking in the for loop, and f-strings. The more you read about and use them, the more natural they will become. Here's a good question on <a href="https://stackoverflow.com/questions/10867882/tuple-unpacking-in-for-loops">tuple unpacking in a for loop</a>, and one on <a href="https://stackoverflow.com/questions/35745050/string-with-f-prefix-in-python-3-6">f-strings</a>.</span>
<span class="comment-copy">While the <code>string % format</code> syntax is still supported, as of Python 3.7, f-strings are a far more readable. Even <code>str.format</code> is preferred.</span>
<span class="comment-copy">Sure but it depends somewhat on your use-case. If you need backward compatibility you are down to <code>%</code> format or <code>str.format</code>.</span>
