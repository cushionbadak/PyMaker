<div class="post-text" itemprop="text">
<p>What is the best way to replicate this simple function using a list comprehension (or another compact approach)?</p>
<pre><code>import numpy as np

sum=0
array=[]
for i in np.random.rand(100):
   sum+=i
   array.append(sum)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, you'd use <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate()</code></a>:</p>
<pre><code>from itertools import accumulate

array = list(accumulate(rand(100)))
</code></pre>
<p>Accumulate yields the running result of adding up the values of the input iterable, starting with the first value:</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; list(accumulate(range(10)))
[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
<p>You can pass in a different operation as a second argument; this should be a callable that takes the accumulated result and the next value, returning the new accumulated result. The <a href="https://docs.python.org/3/library/operator.html" rel="noreferrer"><code>operator</code> module</a> is very helpful in providing standard mathematical operators for this kind of work; you could use it to produce a running multiplication result for example:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; list(accumulate(range(1, 10), operator.mul))
[1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
</code></pre>
<p>The functionality is easy enough to backport to older versions (Python 2, or Python 3.0 or 3.1):</p>
<pre><code># Python 3.1 or before

import operator

def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total = func(total, element)
        yield total
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're already using <code>numpy</code>, you can use <code>cumsum</code>:</p>
<pre><code>&gt;&gt;&gt; from numpy.random import rand
&gt;&gt;&gt; x = rand(10)
&gt;&gt;&gt; x
array([ 0.33006219,  0.75246128,  0.62998073,  0.87749341,  0.96969786,
        0.02256228,  0.08539008,  0.83715312,  0.86611906,  0.97415447])
&gt;&gt;&gt; x.cumsum()
array([ 0.33006219,  1.08252347,  1.7125042 ,  2.58999762,  3.55969548,
        3.58225775,  3.66764783,  4.50480095,  5.37092001,  6.34507448])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok, you said you did not want <code>numpy</code> but here is my solution anyway.
It seems to me that you are simply taking the cumulative sum, thus use the <code>cumsum()</code> function.</p>
<pre><code>import numpy as np
result = np.cumsum(some_array)
</code></pre>
<p>For a random example</p>
<pre><code>result = np.cumsum(np.random.uniform(size=100))
</code></pre>
</div>
<span class="comment-copy">Are you using numpy by any chance? I know numpy has a nice function for something like this.</span>
<span class="comment-copy">I wouldn't use a list comprehension - elements are expected to be independent from each other, and in this case they are not.</span>
<span class="comment-copy">Why would you want to turn this into a list comprehension? It is far more readable to keep this in a separate loop. Make it <code>array = [0]</code>, <code>for i in rand(100): array.append(i + array[-1])</code> instead, perhaps.</span>
<span class="comment-copy">Is this the same as <a href="http://stackoverflow.com/questions/13221896/python-partial-sum-of-numbers" title="python partial sum of numbers">stackoverflow.com/questions/13221896/â€¦</a>?</span>
<span class="comment-copy">I did mean rand(100). I have been using numpy but a solution without would be nice too.</span>
<span class="comment-copy">This one works but I was looking for something like a list comprehension for compact use - like on the ipython command line.</span>
<span class="comment-copy">@Pierz: I used <code>list()</code> on the <code>accumulate()</code> iterator to give you a quick list of values. You can still also use it in a list comprehension, <code>[v for v in accumulate(rand(100))]</code>; you cannot do this with <i>just</i> a list comprehension however, because you don't have access to the previous element(s) generated so far.</span>
<span class="comment-copy">True it's an elegant approach but I wasn't sure if there was a neat way to have the accumulated sum in a list comprehension. Agreed it's probably not best practice but when working on the command line it's handy to use compact forms.</span>
