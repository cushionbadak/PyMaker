<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/40902200/write-python-ordereddict-to-csv">Write Python OrderedDict to CSV</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have 2 dictionaries:</p>
<pre><code>dict1 = {a:1, b:2, c:3}
dict2 = {a:1, b:2, c:3}
</code></pre>
<p>My goal is to write the keys of dict1 as the headers of a CSV, and the values of dict2 and any other dictionaries as the values corresponding to each header.</p>
<p>I want the first column of the csv to be "b", so I created a new dict and added "b" first to retain order, then updated it with the remainder of dict1:</p>
<pre><code>new_dict = {}
new_dict["b"] = fields["b"]
new_dict.update(fields)
</code></pre>
<p>So now, the two dicts that I care about are:</p>
<pre><code>new_dict = {b:2, a:1, c:3}
dict2 = {a:1, b:1, c:3}
</code></pre>
<p>Since I'm writing the keys of new_dict to be the headers of a CSV, the CSV will now be in order: b, a, c. How can I write/change dict2 so that order of values correspond with the respective headers?</p>
<p>I tried:</p>
<pre><code>for new_dict_key in new_dict.keys():
  row[new_dict_key] = new_dict[new_dict_key]
  writer.writerow(row.values())
</code></pre>
<p>But I think this only updates the values and not the order of values.</p>
</div>
<div class="post-text" itemprop="text">
<p>The dictionaries in python are not ordered. This means that the order in which you input the key-values may not correspond to the order that is printed or evaluated.</p>
<p>To keep the order use <a href="https://docs.python.org/3.7/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> instead of the built-in dictionary!</p>
<blockquote>
<p>OrderedDict: dict subclass that remembers the order entries were added</p>
</blockquote>
<p>So just initialize the <code>new_dict</code> with <code>new_dict = collections.OrderedDict()</code> instead of only <code>{}</code>. Also, the <code>csv</code> module also offers the <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer">DictWriter</a> which does almost the same but specifically designed for writting in <code>CSV</code>files. So maybe it's interesting for your case! Take a look just in case!</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries in Python do not preserve any ordering of keys. I suggest that you use <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer"><code>DictWriter</code></a> from Ptyhon's <code>csv</code> module. It takes a <code>fieldnames</code> parameter which specifies the order that the keys should be in as it writes the columns to the CSV output.</p>
</div>
<span class="comment-copy">Thanks for the quick reply! I looked into OrderedDict, but I'm still unsure how to move key-value pairs around. From what I understand, it keeps track of the order in which key-values are added. So, how would I changed the order of keys of OrderDict2 to match the order of keys of OrderDict1?</span>
<span class="comment-copy">As an example, just create a second <code>new_dict_2</code> and do a similar procedure!</span>
<span class="comment-copy">Thanks for all the help. OrderDict worked!</span>
