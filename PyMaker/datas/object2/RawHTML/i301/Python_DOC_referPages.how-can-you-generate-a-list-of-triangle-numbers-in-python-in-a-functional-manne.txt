<div class="post-text" itemprop="text">
<p>You can generate triangle numbers like this</p>
<pre><code>limit = 10
triangle_nums = []
num = 0

for i in range(1, limit + 1):
    num += i
    triangle_nums.append(num)
print(triangle_nums)

output==================
[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
</code></pre>
<p>but is there a better way to do this in a one liner using a more functional approach?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, use the built-in <a href="https://docs.python.org/3.3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; limit = 10
&gt;&gt;&gt; list(accumulate(range(1, limit+1)))
[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
</code></pre>
<p>Note, <code>itertools.accumulate</code> can take any binary operation, but it defaults to addition, </p>
<pre><code>&gt;&gt;&gt; list(accumulate(range(1, limit+1))) # defaults to addition
[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
&gt;&gt;&gt; list(accumulate(range(1, limit+1), lambda x,y : x + y)) # you could pass it as an argument
[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
but you could use multiplication as an example:


&gt;&gt;&gt; list(accumulate(range(1, limit+1), lambda x, y : x*y))
[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer">itertools.accumulate</a></span>
<span class="comment-copy">Using Gauss' formula: <code>[i * (i + 1) / 2 for i in range(1, limit + 1)]</code></span>
<span class="comment-copy">that works too, but I suppose I really wanted to know a more generalized functional approach for other types of problems, have an upvote</span>
<span class="comment-copy">@Selcuk that's probably worth it's own answer</span>
<span class="comment-copy">@juanpa.arrivillaga Obviously the OP is asking for a more generalised solution. I am not sure how generalised it can be though.</span>
<span class="comment-copy">If you want to use another operator like multiplication, I suggest <a href="https://docs.python.org/3/library/operator.html#operator.mul" rel="nofollow noreferrer"><code>operator.mul</code></a> over a <code>lambda</code></span>
<span class="comment-copy">didn't know that existed. it's just a function that does exactly lambda x, y : x*y right?</span>
<span class="comment-copy">@katiex7 it's just a module that contains function versions of most operators (and a few other convenience functions) for those inclined.</span>
