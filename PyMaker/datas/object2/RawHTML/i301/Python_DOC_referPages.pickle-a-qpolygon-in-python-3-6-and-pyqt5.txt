<div class="post-text" itemprop="text">
<p>I try to pickle a QPolygon and load it afterwards, but I get an error. I have done this on Python2 with PyQt4 but want to use it now on Python3 with PyQt5.</p>
<p>I do not want to read/load data generated with Python 2! The pickle file is simply used to temporarily store Qt-elements like QPolygons from Python3 to Python3.</p>
<p>I have tested different protocol options from 1-4 for pickle.dump() and tried to use the "fix_imports=True" option which should not make a difference in Python3.</p>
<p>Here is my simplified code</p>
<pre><code>from PyQt5.QtGui import QPolygon
from PyQt5.QtCore import QPoint
import pickle

file_name = "test_pickle.chip"

with open(file_name, 'wb') as f:
    poly = QPolygon((QPoint(1, 1), QPoint(2, 2))) 
    pickle.dump(poly, f, protocol=2)  # , fix_imports=True)

# loading the data again
with open(file_name, 'rb') as f:
    elem = pickle.load(f, encoding='bytes')  # , fix_imports=True)
</code></pre>
<p>I get the following error message but can't do anything with it:</p>
<blockquote>
<pre><code>elem = pickle.load(f, encoding='bytes')  # , fix_imports=True)
TypeError: index 0 has type 'int' but 'QPoint' is expected
</code></pre>
</blockquote>
<p>Is there maybe any alternative to pickle?
Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>QDataStream</code> to serialize / deserialize Qt objects:</p>
<pre><code>from PyQt5 import QtCore
from PyQt5.QtGui import QPolygon
from PyQt5.QtCore import QPoint, QFile, QIODevice, QDataStream, QVariant

file_name = "test.dat"

output_file = QFile(file_name)
output_file.open(QIODevice.WriteOnly)
stream_out = QDataStream(output_file)
output_poly = QPolygon((QPoint(1, 6), QPoint(2, 6)))
output_str = QVariant('foo')  # Use QVariant for QString
stream_out &lt;&lt; output_poly &lt;&lt; output_str
output_file.close()

input_file = QFile(file_name)
input_file.open(QIODevice.ReadOnly)
stream_in = QDataStream(input_file)
input_poly = QPolygon()
input_str = QVariant()
stream_in &gt;&gt; input_poly &gt;&gt; input_str
input_file.close()

print(str(output_str.value()))
print(str(input_str.value()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A bit of searching on the docs tells you how you can implement custom pickling for custom classes via the <a href="https://docs.python.org/3/library/pickle.html#object.__reduce__" rel="nofollow noreferrer"><code>__reduce__</code> method</a>. Basically you return a tuple including the constructor for the new object to be created when un-pickling as well as a tuple of arguments that will be passed to the constructor. Optionally you then can then pass a <code>state</code> object (see <code>__getstate__</code> and <code>__setstate__</code>) and some iterators to add positional data and key-value data.</p>
<p>by subclassing <code>QPolygon</code> we can add picklability as such: (this could probably be cleaned up / restructured, but this is the first implementation I got to that worked)</p>
<pre><code>from PyQt5.QtGui import QPolygon
from PyQt5.QtCore import QPoint
import pickle

class Picklable_QPolygon(QPolygon):

    def __reduce__(self):
        # constructor, (initargs), state object passed to __setstate__
        return type(self), (), self.__getstate__()

    #I'm not sure where this gets called other than manually in __reduce__
    #  but it seemed like the semantically correct way to do it...
    def __getstate__(self):
        state = [0]
        for point in self:
            state.append(point.x())
            state.append(point.y())
        return state

    #putPoints seems to omit the `nPoints` arg compared to c++ version.
    #  this may be a version dependent thing for PyQt. Definitely test that
    #  what you're getting out is the same as what you put in..
    def __setstate__(self, state):
        self.putPoints(*state)

poly = Picklable_QPolygon((QPoint(1, 1), QPoint(2, 2)))
s = pickle.dumps(poly)

elem = pickle.loads(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This must be a bug in pyqt5, since <a href="http://pyqt.sourceforge.net/Docs/PyQt5/pickle.html" rel="nofollow noreferrer">the documentation states</a> that pickling <code>QPolygon</code> is supported. Please therefore post a bug report to the <a href="http://www.riverbankcomputing.com/pipermail/pyqt/" rel="nofollow noreferrer">pyqt mailing list</a> using your example.</p>
<p>In the meantime, by far the simplest alternative is to use <a href="https://doc.qt.io/qt-5/qsettings.html" rel="nofollow noreferrer">QSettings</a>:</p>
<pre><code>from PyQt5.QtGui import QPolygon
from PyQt5.QtCore import QSettings, QPoint

file_name = "test_pickle.chip"

poly = QPolygon((QPoint(1, 1), QPoint(2, 2)))

# write object
s = QSettings(file_name, QSettings.IniFormat)
s.setValue('poly', poly)

del s, poly

# read object
s = QSettings(file_name, QSettings.IniFormat)
poly = s.value('poly')

print(poly)
print(poly.point(0), poly.point(1))
</code></pre>
<p>Output:</p>
<pre><code>&lt;PyQt5.QtGui.QPolygon object at 0x7f871f1f8828&gt;
PyQt5.QtCore.QPoint(1, 1) PyQt5.QtCore.QPoint(2, 2)
</code></pre>
<p>This can be used with any type PyQt supports for pickling, plus anything else that PyQt can <a href="https://doc.qt.io/qt-5/qmetatype.html#Type-enum" rel="nofollow noreferrer">convert to/from a QVariant</a>. PyQt also supports a <code>type</code> argument to <code>QSettings.value()</code> that can be used to explicitly state the required type. And since <code>QSettings</code> is designed for storing application config data, any number of objects can be stored in the same file (somewhat like python's <a href="https://docs.python.org/3/library/shelve.html#module-shelve" rel="nofollow noreferrer">shelve module</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Inspired by the previous answers I created a function that takes some kind of Qt that supports QDataSteam and returns a class that inherits from that class and is picklable, in the following example I show with QPoygon and QPainterPath:</p>
<pre><code>import pickle
from PyQt5 import QtCore, QtGui

def picklable_reduce(self):
    return type(self), (), self.__getstate__()

def picklable_getstate(self):
    ba = QtCore.QByteArray()
    stream = QtCore.QDataStream(ba, QtCore.QIODevice.WriteOnly)
    stream &lt;&lt; self
    return ba

def picklable_setstate(self, ba):
    stream = QtCore.QDataStream(ba, QtCore.QIODevice.ReadOnly)
    stream &gt;&gt; self

def create_qt_picklable(t):
    return type("Picklable_{}".format(t.__name__), (t,),
        {
            '__reduce__': picklable_reduce,
            '__getstate__': picklable_getstate,
            '__setstate__': picklable_setstate
        }
    ) 

if __name__ == '__main__':
    # QPolygon picklable
    Picklable_QPolygon = create_qt_picklable(QtGui.QPolygon)
    old_poly = Picklable_QPolygon((QtCore.QPoint(1, 1), QtCore.QPoint(2, 2)))
    s = pickle.dumps(old_poly)
    new_poly = pickle.loads(s)
    assert(old_poly == new_poly)
    # QPainterPath picklable
    Picklable_QPainterPath = create_qt_picklable(QtGui.QPainterPath)
    old_painterpath = Picklable_QPainterPath()
    old_painterpath.addRect(20, 20, 60, 60)
    old_painterpath.moveTo(0, 0)
    old_painterpath.cubicTo(99, 0,  50, 50,  99, 99)
    old_painterpath.cubicTo(0, 99,  50, 50,  0, 0);
    s = pickle.dumps(old_painterpath)
    new_painterpath= pickle.loads(s)
    assert(old_painterpath == new_painterpath)
</code></pre>
<hr/>
<p>Using the OP code:</p>
<pre><code>if __name__ == '__main__':
    Picklable_QPolygon = create_qt_picklable(QtGui.QPolygon)

    file_name = "test_pickle.chip"
    poly = Picklable_QPolygon((QtCore.QPoint(1, 1), QtCore.QPoint(2, 2))) 
    with open(file_name, 'wb') as f:
        pickle.dump(poly, f, protocol=2)  # , fix_imports=True)

    elem = None
    with open(file_name, 'rb') as f:
        elem = pickle.load(f, encoding='bytes')  # , fix_imports=True)

    assert(poly == elem)
</code></pre>
</div>
<span class="comment-copy">It looks like there is a bug concerning the use of pickle with QPolygon.I like your answer because it looks like its a fast and easy way to replace pickle with QDataStream. But I simplified my example maybe a bit to much. I also need to store e.g. strings inside the output file/stream. Is this also possible with QDataStream? My fist test did not succeed to store strings and several QPolygon in one output file.</span>
<span class="comment-copy">Hi, yes, you can store everything you want, but you need to use Qt objects, I will update my example to show you.</span>
<span class="comment-copy">Thank you very much. It works fine.</span>
<span class="comment-copy">Is there some possibility to check the type of the next element while reading the QDataStream back in? I have to check if a string or a QPolygon is next. To determine the type I have to read the data into a e.g. QVariant but this destroys somehow QPolygons.</span>
<span class="comment-copy">I donÂ´t think it's possible by default but you should know the order in which you added the items, right? Maybe you can create a class that inherits from QObject and that contains a list of types, then pass that class the first one and use it to know what type of items you will need when you deserialize.</span>
<span class="comment-copy">I also found the info in documentation but was not sure if I am doing something wrong. I wrote to the pyqt mailing list and will keep you updated.</span>
<span class="comment-copy">@HoWil Okay. Is there some reason why you don't consider <code>QSettings</code> to be a good alternative? It seems much simpler to use than any other solution (including pickle itself). Under the covers, <code>QSettings</code> uses the datastream operators to do the serialization, so it would seem that it must be quite efficient (since everything happens in c++).</span>
<span class="comment-copy">The reason is that I have to name each entry I put into the QSettings. In the simplified example I used to show the problem there is only one QPolygon. In reality there are hundreds of polygons and also strings. Which makes it a bit difficult to handle all variable names. I finally accepted the solution of isma using QDataStream which is the most equivalent to pickle simply writing it one after an other and reading it in the same manner. Nevertheless, Thanks for the help and discussion.</span>
<span class="comment-copy">a disadvantage of this method is that the data is always stored as configuration/settings- file in your Qt config folder. On linux this is .config in your home folder but not next to my python file or in the path I specified.</span>
<span class="comment-copy">@HoWil That's not true - you can <a href="https://doc.qt.io/qt-5/qsettings.html#QSettings-3" rel="nofollow noreferrer">specify a particular path</a>. I will update my answer to use that method (it's actually what I originally intended). This will use the standard ini-file format.</span>
