<div class="post-text" itemprop="text">
<p>I have some code where I am using a list of names, and a file (eventually multiple files) of results (team, name, place).  The end result I am looking for is to have each person's name (key) associated with a list of points (values). However, when I use the code below I end up with a result like </p>
<p>'Abe': [100, 80, 90], 'Bob': [100, 80, 90], 'Cam': [100, 80, 90] instead of </p>
<p>'Abe': [100], 'Bob': [80], 'Cam': [90]</p>
<pre><code>f=open("NamesList.txt","r")
lines=f.read().splitlines() #get names
Scores=dict.fromkeys(lines,[]) #make a dictionary with names as keys, but no values yet

f1=open("ResultsTest.txt","r") #open results file: column1-team, column 2- name, column 3-place
lines=f1.read().splitlines()

A={1:100,2:90,3:80} #points assignment, 100 for 1, 90 for 2, 80 for 3 
for l in lines:
    a=l.split('\t') #a[0] is team a[1] is name a[2] is place
    score=A.get(int(a[2]))   #look up points value corresponding to placing     
    Scores[a[1]].append(score)
</code></pre>
<p>I can get the result I need by adding in </p>
<pre><code> Scores[a[1]]=[]
</code></pre>
<p>before the second last line, but I believe this prevents me from eventually being able to append multiple scores to each key (since I'm re-initializing inside the loop). Any insight into my error would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem you encounter comes from the way you create <code>Scores</code>:</p>
<pre><code>Scores=dict.fromkeys(lines,[])
</code></pre>
<p>When using <code>dict.fromkeys</code>, the <strong>same</strong> value is used for all keys of the dict. Here, the same, one and only empty list is the common value for all your keys. So, whichever key you access it through, you always update the same list.</p>
<p>When doing <code>Scores[a[1]]=[]</code>, you actually create a new, different empty list, that becomes the value for the key <code>a[1]</code> only, so the problem disappears.</p>
<p>You could create the dict differently, using a dict comprehension:</p>
<pre><code>Scores = {key: [] for key in lines} # here, a new empty list is created for each key
</code></pre>
<p>or use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict</a></p>
<pre><code>from collections import defaultdict

Scores =  defaultdict(list)
</code></pre>
<p>which will automatically initialize <code>Score['your_key']</code> to an empty list when needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using <code>Scores=dict.fromkeys(lines,[])</code> you're initializing every key of the dict with a reference to the same list, so changes made to the list are reflected across all keys. You can use a dict comprehension for initialization instead:</p>
<pre><code>Scores = {line: [] for line in lines}
</code></pre>
<p>Alternatively, you can initialize <code>Scores</code> as a normal dict <code>{}</code> and use the <code>dict.setdefault</code> method to initialize its keys with lists:</p>
<pre><code>Scores.setdefault(a[1], []).append(score)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IIUC, your dictionary is mapping <code>place</code> to <code>score</code>. You can leverage a <a href="https://docs.python.org/3.3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> to replace your <code>fromkeys</code> method:</p>
<pre class="lang-py prettyprint-override"><code>from collections import defaultdict

# Initialize an empty dictionary as you've done with default list entries
scores = defaultdict(list)

# Using the with context manager allows for safe file handling
with open("ResultsTest.txt", 'r') as f1:
    lines = f1.read().splitlines()

# Points lookup as you've done before
lookup = {1: 100, 2: 90, 3: 80}

for l in lines:
    team, name, place = l.split('\t') # unpacking makes this way more readable

    score = lookup.get(int(place))
    scores[team].append(score)

</code></pre>
</div>
<span class="comment-copy">Is each value in <code>Scores</code> supposed to be <code>[100, 80, 90]</code> <i>always</i> or could this change? Does order matter?</span>
<span class="comment-copy">The points table will always stay the same (assigning 100 for first, 90 for second and 80 for third). In my example, Abe was first, Bob was third, and Cam was second but maybe the next time Abe will be third, Bob will be second and Cam will be first, so my end result that I would want would be Abe :[100,80], Bob:[80,90] and Cam: [90,100].  Because I plan on expanding this to take multiple results files, I need to be able to append properly.</span>
<span class="comment-copy">Thank you for providing these answers, the first one makes the most sense to me and works great.</span>
