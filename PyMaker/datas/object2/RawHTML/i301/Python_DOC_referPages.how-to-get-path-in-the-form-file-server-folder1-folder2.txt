<div class="post-text" itemprop="text">
<p>i am rather new to python and i have the following problem (just an example):</p>
<pre><code> import os
 mypath = 'I:\Folder1'
 for dirpath,_,filenames in os.walk(mypath):
        for f in filenames:
            getpath = os.path.abspath(os.path.join(dirpath, f))
</code></pre>
<p>returns the path in the form:</p>
<blockquote>
<p>I:\Folder1\Folder2</p>
</blockquote>
<p>which is normally ok for me</p>
<p>However "I:\" is one of our servers at work and for further processing (html stuff) i would need the exact address in such a form</p>
<blockquote>
<p>file://///Servername/Subfolder/Folder1/Folder2</p>
</blockquote>
<p>Edit: In other words:</p>
<p>My program may be used locally or on different servers - it just depends on the user.  Rather stupidly said I need a function that returns what in win10 goes like this: "right click on a folder --&gt; Path Copy --&gt; file:////....". And I only know that this path on my computer is called "I:\Folder1" ..but "I:\Folder1" is the server name</p>
<p>Edit 2: Solved (see comments)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on a Windows platform and need forward slashes, it is actually possible to import the OS specific version. For example you could use <a href="https://docs.python.org/3/library/os.path.html?highlight=normpath#module-os.path" rel="nofollow noreferrer"><code>posixpath</code></a>.</p>
<p>To solve your problem you would need to first strip off <code>mypath</code> from each return <code>dirpath</code>. Next split this into folder components using split with your operating system's seperator i.e. <code>\</code>. This can then be all rejoined with a <code>server</code> prefix using the <code>posixpath.join()</code> command. For example:</p>
<pre><code>import posixpath
import os

mypath = r'I:\Folder1'
server = 'file://///Servername/Subfolder'

for dirpath,_,filenames in os.walk(mypath):
    for f in filenames:
        subfolder = dirpath[len(mypath):]
        server_path = posixpath.join(server, *subfolder.split(os.sep), f)
        print(server_path)
</code></pre>
</div>
<span class="comment-copy">Thanks for the answer. Maybe i didnt describe it perfectly. Your solution works if i know what the server name is - so as a workaround i did it more or less exactly like that. However my program may be used locally or on different servers - it just depends on the user. (its about extracting images from files)</span>
<span class="comment-copy">So you are also looking for a way to get a servername from `I:\` ?</span>
<span class="comment-copy">Take a look at <code>win32wnet.WNetGetUniversalName(r'I:\', 1)</code>. You would need <code>import win32wnet</code></span>
<span class="comment-copy">thanks man! made my day!</span>
