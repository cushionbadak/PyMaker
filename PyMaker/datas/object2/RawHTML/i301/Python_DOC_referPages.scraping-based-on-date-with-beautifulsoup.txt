<div class="post-text" itemprop="text">
<p>I am very new to python programming. Emphasis on VERY. I am trying to set up my first web scraping project (for news article curation).</p>
<p>I have already managed to scrape the news site and to create a loop that organizes the results how I want them. My issue is that I plan on scraping the web page once a day, but only for the publications that were published that same day. I don't want all of them because that would mean I would get a lot of repetition.</p>
<p>I know that it has something to do with converting the date via the datetime module (with an if statement), but for the life of me I couldn't find a way to make it work.</p>
<p>In the html, this is an example of how the date is displayed:</p>
<pre><code>&lt;time datetime="2019-02-24T10:30:46+00:00"&gt;Feb 24, 2019 at 10:30&lt;/time&gt;
</code></pre>
<p>This is what I have so far:</p>
<pre><code>from urllib.request import urlopen as uReq
from bs4 import BeautifulSoup as soup
from datetime import datetime

my_url = "https://www.coindesk.com/category/business-news/legal"

# Opening up the website, grabbing the page
uFeedOne = uReq(my_url, timeout=5)
page_one = uFeedOne.read()
uFeedOne.close()

# html parser
page_soup1 = soup(page_one, "html.parser")

# grabs each publication block
containers = page_soup1.findAll("a", {"class": "stream-article"} )

for container in containers:
  link = container.attrs['href']
  publication_date = "published on " + container.time.text
  title = container.h3.text
  description = "(CoinDesk)-- " +  container.p.text

  print("link: " + link)
  print("publication_date: " + publication_date)
  print("title: " + title)
  print("description: " + description)  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>time</code> tag has a datetime attribute that is giving a much better datetime representation than the text. Use that.</p>
<p>You can use the dateutil package to parse the string. Following is a sample code:</p>
<pre><code>from urllib.request import urlopen as uReq
from bs4 import BeautifulSoup as soup
from datetime import datetime, timedelta
from dateutil import parser
import pytz

my_url = "https://www.coindesk.com/category/business-news/legal"

# Opening up the website, grabbing the page
uFeedOne = uReq(my_url, timeout=5)
page_one = uFeedOne.read()
uFeedOne.close()

# html parser
page_soup1 = soup(page_one, "html.parser")

# grabs each publication block
containers = page_soup1.findAll("a", {"class": "stream-article"} )

for container in containers:
  ## get todays date.
  ## I have taken an offset as the site has older articles than today.
  today =  datetime.now() - timedelta(days=5)
  link = container.attrs['href']

  ## The actual datetime string is in the datetime attribute of the time tag.
  date_time = container.time['datetime']

  ## we will use the dateutil package to parse the ISO-formatted date.
  date = parser.parse(date_time)

  ## This date is UTC localised but the datetime.now() gives a "naive" date
  ## So we have to localize before comparison
  utc=pytz.UTC
  today = utc.localize(today)

  ## simple comparison
  if date &gt;= today:
      print("article date", date)
      print("yesterday", today," \n")
      publication_date = "published on " + container.time.text
      title = container.h3.text.encode('utf-8')
      description = "(CoinDesk)-- " +  container.p.text

      print("link: " + link)
      print("publication_date: " + publication_date)
      print("title: ", title)
      print("description: " + description)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The date is represented in the <a href="https://en.wikipedia.org/wiki/ISO_8601" rel="nofollow noreferrer">ISO 8601</a> format. Extract the <code>datetime</code> attribute as a string from the <code>time</code> tag. If you are using python 3.7 you can use the <a href="https://docs.python.org/3/library/datetime.html#datetime.time.fromisoformat" rel="nofollow noreferrer"><code>datetime.datetime.fromisoformat</code></a> method to convert this to a datetime object and then do the comparison. If you are using an older version of python I think the easiest approach would be see this <a href="https://stackoverflow.com/q/969285/3149582">question</a> and the first answer provided.</p>
</div>
<span class="comment-copy">Can you give some concrete examples of your desired output?</span>
<span class="comment-copy">Thank you so much! Based on this, I made a few modifications and got exactly what I wanted.</span>
<span class="comment-copy">Glad to help.  You can mark the answer as accepted if it helped you :)</span>
