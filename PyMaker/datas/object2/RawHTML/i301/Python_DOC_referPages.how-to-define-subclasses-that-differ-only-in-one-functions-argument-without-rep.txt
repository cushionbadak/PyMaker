<div class="post-text" itemprop="text">
<p>I'm creating classes in python like this:</p>
<pre><code>class x(abstract_class, another_class):
    @property
    def do_something(self):
        return something('a', 'x')

class y(abstract_class, another_class):
    @property
    def do_something(self):
        return something('a', 'y')
</code></pre>
<p>This happens for many more classes. It seems long and unnecessarily repetitive, since <code>do_something</code> is not the only thing that happens within each class. Since <code>'x'</code> and <code>'y'</code> are so similar, is there any way I can create them both at once, or do anything else to stop the repetition?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're already using multiple inheritance, you could "do something" like this if you don't want (or can't) modify the two existing classes you're already using as base classes. It's based on the suggestion @Charles Duffy posted in a comment, and relies on the special attribute that classes have named , not suprisingly, <a href="https://docs.python.org/3/library/stdtypes.html#definition.__name__" rel="nofollow noreferrer"><code>__name__</code></a>.</p>
<p><strong>Note</strong> I've also modified your code to follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 - Style Guide for Python Code</a>'s <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">naming conventions</a>.</p>
<pre><code>class AbstractClass: pass
class AnotherClass: pass


def something(s1, s2):
    print('something({!r}, {!r}) called'.format(s1, s2))


class Mixin:  # Yet another class.
    @property
    def do_something(self):
        something('a', self.__class__.__name__)


class X(AbstractClass, AnotherClass, Mixin):
    pass


class Y(AbstractClass, AnotherClass, Mixin):
    pass


if __name__ == '__main__':

    x = X()
    y = Y()

    x.do_something  # -&gt; something('a', 'X') called
    y.do_something  # -&gt; something('a', 'Y') called
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put </p>
<pre><code>def do_something(self):
    return something('a', self.__class__.__name__)
</code></pre>
<p>in <code>another_class</code> and they can both inherit it so that you don't have to replicate the code.</p>
</div>
<span class="comment-copy"><code>self.__class__.__name__</code> gets you your <code>'x'</code> or <code>'y'</code>, so <code>do_something(self): return something('a', self.__class__.__name__)</code> meets the narrow spec. However, this isn't a proper <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> as given, so we can't exactly test answers.</span>
<span class="comment-copy">If classes are so similar, consider extend their functionality by inheritance. This is the power of OOP - one could implement most generic functionality in parent class, and more specific - in child classes, without need to code duplication.</span>
<span class="comment-copy">What are you trying to accomplish by passing <code>something()</code> the <i>name</i> of a class? I ask because this seems a little like it might be an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>.</span>
<span class="comment-copy">You mean <code>self.__class__.__name__</code>, right? Otherwise you're passing the class itself, not its name.</span>
<span class="comment-copy">Yeah.  That's right</span>
<span class="comment-copy">You could also add a different member to your class if you needed something besides the name and access that instead.</span>
<span class="comment-copy">So doing class x(abstract_class, another_class), without doing anything else will work when the class is used?</span>
<span class="comment-copy">Have a look at this tutorial on class inheritance: <a href="https://www.python-course.eu/python3_inheritance.php" rel="nofollow noreferrer">python-course.eu/python3_inheritance.php</a></span>
