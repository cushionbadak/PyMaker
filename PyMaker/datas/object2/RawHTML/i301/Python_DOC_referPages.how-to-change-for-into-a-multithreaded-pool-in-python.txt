<div class="post-text" itemprop="text">
<p>So I made this program that I want to loop for ever until closed. So at the moment I use this piece of code;</p>
<pre><code>while True:
  a = start();
  for aaa in a:
    check(a[aaa], 0)
</code></pre>
<p>But that is pretty slow. How can I multithread this using this (this is my try, it's incorrect ofcourse);</p>
<pre><code>pool = ThreadPool(threads)
results = pool.map(check, a, 0)
</code></pre>
<p>I tried that code, with <code>threads = 1</code>. And it just gave nothing. Could anyone help me with this?</p>
<p>==== EDIT ====</p>
<p>Start function;</p>
<pre><code>def start():
    global a
    url = "URL_WAS_HERE" // receives a json like {"a":56564356, "b":654653453} etc. etc.
    r = requests.get(url)
    a = json.loads(r.text)
    return a
</code></pre>
<p>Check function;</p>
<pre><code>def check(idd, tries):
  global checked
  global snipe
  global notworking
  if tries &lt; 1:
    checked = checked+1
    url = "URL_WAS_HERE"+str(idd) // Receives json with extra information about the id
    r = requests.get(url)
    try:
        b = json.loads(r.text)
        if b['rap'] &gt; b['best_price']:
            difference = b['rap']-b['best_price'];
            print(str(idd)+" has a "+str(difference)+ "R$ difference. Price: "+str(b['best_price'])+" //\\ Rap: "+str(b['rap']))
            snipe = snipe+1

    except:
        time.sleep(1)
        tries = tries+1
        notworking = notworking+1
        check(idd, tries)
  settitle("Snipes; "+str(snipe)+" //\\ Checked; "+str(checked)+" //\\ Errors; "+str(notworking))
</code></pre>
<p>I hope this helps a bit</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps start by using a documented object, <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer">ThreadPoolExecutor</a>. <code>ThreadPool</code> is an undocumented language feature.</p>
<p>The docs offer minimal examples to get you started. For your example try the following construction:</p>
<pre class="lang-py prettyprint-override"><code>from concurrent.futures import ThreadPoolExecutor, as_completed

values_to_test = a()
result_container = []

with ThreadPoolExecutor(max_workers=2) as executor:  # set `max_workers` as appropriate
    pool = {executor.submit(check, val, tries=0): val for val in values_to_test}

    for future in as_completed(pool):
        try:
            result_container.append(future.result())
        except:
            pass  # handle exceptions here
</code></pre>
<p>If you are set on using the <code>map</code> method, you cannot pass <code>0</code> as an argument because it is not an iterable; see the method <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map" rel="nofollow noreferrer">signature</a>. </p>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described. We don't know what <code>start</code> and <code>check</code> do, which makes your indexing <code>a[aaa]</code> questionable.</span>
