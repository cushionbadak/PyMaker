<div class="post-text" itemprop="text">
<p>I'm trying to create a Python program that converts a decimal to binary.</p>
<p>Currently I have</p>
<pre><code>working = int(input("Please select a non-negative decimal number to convert to binary.  "))
x = ()

while working !=0:
    remainder = working % 2
    working = working // 2

    if remainder == 0:
      x = remainder + 0
      print (working, x)

    else:
     x = remainder + 1
    print (working, x)

print ("I believe your binary number is " ,x)
</code></pre>
<p>The while works on it's own if I print after that, but the if/else doesn't. I am trying to create a string that is added to with each successive division. Currently, if my starting int is 76, my output is</p>
<pre><code>38 0
38 0
19 0
19 0
9 2
4 2
2 0
2 0
1 0
1 0
0 2
</code></pre>
<p>I am trying to get my output to instead be</p>
<pre><code>38 0
19 00
9 100
4 1100
2 01100
1 001100
0 1001100
</code></pre>
<p>This is my first attempt at string concatenation and I've tried a few variations of the above code to similar results. </p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few issues with the code you’ve provided:</p>
<ol>
<li><code>x</code> starts with a value of <code>()</code>, and in any case, rather than concatenating strings to it, you’re adding numbers within the loop.</li>
<li>You’re trying to append the numbers rather than prepend, so the result would be reversed if it worked.</li>
<li>Your second <code>print</code> is not inside the conditional, so the output is duplicated.</li>
</ol>
<p>What you need to do is initialize <code>x</code> with an empty string and then prepend strings to it:</p>
<pre><code>working = int(input("Please enter a non-negative decimal number to convert to binary: "))
x = ""

while working != 0:
    remainder = working % 2
    working = working // 2

    if remainder == 0:
        x = "0" + x
    else:
        x = "1" + x

    print (working, x)

print ("I believe your binary number is", x)
</code></pre>
<p>Output:</p>
<pre><code>λ python convert-to-binary.py
Please enter a non-negative decimal number to convert to binary: 76
38 0
19 00
9 100
4 1100
2 01100
1 001100
0 1001100
I believe your binary number is 1001100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are not working with strings. You are first creating an empty tuple for x, and then overwriting that with an integer value later. </p>
<p>To do what you are attempting, you need to treat <code>x</code> as a string, and append the string literals <code>'0'</code> and <code>'1'</code> to it.</p>
<p>Try this instead:</p>
<pre><code>working = int(input("Please select a non-negative decimal number to convert to binary.  "))
x = ''

while working !=0:
    remainder = working % 2
    working = working // 2

    if remainder == 0:
        x += '0'
        print (working, x)

    else:
        x += '1'
        print (working, x)

print ("I believe your binary number is " , x[::-1])
</code></pre>
<p>Note how <code>x</code> is initially declared as an empty string <code>''</code> instead of the empty tuple <code>()</code>. This makes it so that when you use the <code>+=</code> operator later to append 0 or 1 to it, that it is treated as string concatenation instead of addition.</p>
</div>
<div class="post-text" itemprop="text">
<p>It should be </p>
<pre><code>working = int(input("Please select a non-negative decimal number to convert to binary.  "))
x = ""

while working !=0:
    remainder = working % 2
    working = working // 2

    if remainder == 0:
      x = x + str(remainder)
      print (working, x)

    else:
     x = x + str(remainder)
    print (working, x)

print ("I believe your binary number is " ,x[::-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change your code to below:</p>
<pre><code>if remainder == 0:
    x = str(remainder) + '0'
    print (working, x)

else:
    x = str(remainder) + '1'
    print (working, x)
</code></pre>
<p>in your code, python interprets as an int you have to cast it to string.</p>
<p>another way is using built-in function bin(working), directly converts from number to binary value.</p>
</div>
<span class="comment-copy">Just for clarification: are you aware about <a href="https://docs.python.org/3/library/functions.html#bin" rel="nofollow noreferrer">bin()</a> ? E.g <code>bin(10)</code> -&gt; <code>0b1010</code></span>
<span class="comment-copy">Yes, I am, but thank you for checking! I'm trying to show the equation/steps.</span>
