<div class="post-text" itemprop="text">
<p>My Class just like </p>
<pre><code>import a

class Demo(object):
    def __init__(self):
        ......
        fun_return_value = a.methodB()
        ......

   def methodA(self):
       ......
</code></pre>
<p>the test class just like below</p>
<pre><code>class TestDemo(test.TestCase):

    def setUp(self):
        super(TestDemo, self).setUp()

    def test_methodA(self):
         ......
</code></pre>
<p>When I want to make methodA's unittest, there has the question that I must mock the a.methodB.But how can I do that?I checked the doc,and found nothing.
Ask others and use <code>@mock.patch("a.methodB")</code> at the head of the class TestDemo.Just like</p>
<pre><code>    @mock.patch("a.methodB")
    class TestDemo(test.TestCase):

        def setUp(self, mock_methodB):
            super(TestDemo, self).setUp()
            mock_methodB.return_value=None

        def test_methodA(self):
             ......
</code></pre>
<p>But it didn't work.How to mock the method which was called by the method of "<strong>init</strong>"?</p>
</div>
<div class="post-text" itemprop="text">
<p>has find the way to fix it.</p>
<pre><code>class TestDemo(test.TestCase):
    def setUp(self):
        super(TestDemo, self).setUp()
        self.mocks = [mock.patch('a.methodB',
                                  mock.MagicMock(return_value=None))]
        for single_mock in self.mocks:
            single_mock.start()
            self.addCleanup(single_mock.stop)

</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Patch can be used as a TestCase class decorator. It works by decorating each test method in the class. This reduces the boilerplate code when your test methods share a common patchings set. patch() finds tests by looking for method names that start with patch.TEST_PREFIX. By default this is 'test'</p>
</blockquote>
<p>From <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">the docs</a>. That's why your code isn't working. What you can do instead is use the <a href="https://docs.python.org/3/library/unittest.mock.html#patch-methods-start-and-stop" rel="nofollow noreferrer">start and stop methods</a>.</p>
</div>
<span class="comment-copy">Yeah,got it.Thanks for you advice.I have delete the method tearDown, and changed the code like 'for single_mock in self.mocks:             single_mock.start()  self.addCleanup(single_mock.stop)'</span>
<span class="comment-copy">yes,you're right.I have find the right way to deal it.</span>
