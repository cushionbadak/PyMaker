<div class="post-text" itemprop="text">
<h1>Background</h1>
<p>I'm currently using a <a href="https://stackoverflow.com/questions/5228158/cartesian-product-of-a-dictionary-of-lists">technique that is perfectly demonstrated in another Stackoverflow post</a> to create the Cartesian product of a dictionary of lists, i.e.:</p>
<pre><code>from itertools import product
def my_product(inp):
    return (dict(zip(inp.keys(), values)) for values in product(*inp.values())
</code></pre>
<hr/>
<h1>Problem</h1>
<p>Here's my sample dictionary, <code>d</code>:</p>
<pre><code>d = {
    "letters": ['a', 'b'],
    "numbers": [1, 2, 3],
    "status": ["on", "off"]
}
</code></pre>
<p>The problem I'm running into, is that I want to use this technique to create a
generator. However, I want to control the order in which certain lists are
"swept". For example, here's a common result for the first few iterations
generated by my code:</p>
<pre><code>{"status": "on",  "numbers": 1, "letters": 'a'}
{"status": "off", "numbers": 1, "letters": 'a'}
{"status": "on",  "numbers": 2, "letters": 'a'}
{"status": "off", "numbers": 2, "letters": 'a'}
{"status": "on",  "numbers": 3, "letters": 'a'}
{"status": "off", "numbers": 3, "letters": 'a'}
{"status": "on",  "numbers": 1, "letters": 'b'}
{"status": "off", "numbers": 1, "letters": 'b'}
</code></pre>
<p>However, I need to be able to control the ordering of how the product generates
these permutations. The code which is "fed" the dictionaries has a high "cost"
when I toggle the "on"/"off" value of "status", but no penalty is incurred for
changing the "numbers" or "letters" elements. For example, this would be the
ideal set of iterations yielded by the generator:</p>
<pre><code>{"letters": 'a', "numbers": 1, "status": "on"}
{"letters": 'a', "numbers": 2, "status": "on"}
{"letters": 'a', "numbers": 3, "status": "on"}
{"letters": 'b', "numbers": 1, "status": "on"}
{"letters": 'b', "numbers": 2, "status": "on"}
{"letters": 'b', "numbers": 3, "status": "on"}
{"letters": 'a', "numbers": 1, "status": "off"}
{"letters": 'a', "numbers": 2, "status": "off"}
{"letters": 'a', "numbers": 3, "status": "off"}
{"letters": 'b', "numbers": 1, "status": "off"}
{"letters": 'b', "numbers": 2, "status": "off"}
{"letters": 'b', "numbers": 3, "status": "off"}
</code></pre>
<p><strong>In short, I want to be able to minimize the number of transitions from one value to another by showing "preference" to certain members of the dictionary, <code>d</code>.</strong></p>
<hr/>
<h1>Question</h1>
<p>How can I accomplish this?</p>
<hr/>
<h1>Conclusion</h1>
<p>Using the accepted answer, I generated this code snippet:</p>
<hr/>
<h1>Code Listing</h1>
<pre><code>#!/usr/bin/env python
from collections import OrderedDict
from itertools import product

d = OrderedDict()
d["status"] = ["on", "off"]
d["letters"] = ["a", "b", "c"]
d["numbers"] = [1, 2, 3, 4]

for i in (dict(zip(inp.keys(), values)) for values in product(*inp.values())):
    print(i)
</code></pre>
<hr/>
<h1>Sample Output</h1>
<pre><code>{'status': 'on', 'letters': 'a', 'numbers': 1}
{'status': 'on', 'letters': 'a', 'numbers': 2}
{'status': 'on', 'letters': 'a', 'numbers': 3}
{'status': 'on', 'letters': 'a', 'numbers': 4}
{'status': 'on', 'letters': 'b', 'numbers': 1}
{'status': 'on', 'letters': 'b', 'numbers': 2}
{'status': 'on', 'letters': 'b', 'numbers': 3}
{'status': 'on', 'letters': 'b', 'numbers': 4}
{'status': 'on', 'letters': 'c', 'numbers': 1}
{'status': 'on', 'letters': 'c', 'numbers': 2}
{'status': 'on', 'letters': 'c', 'numbers': 3}
{'status': 'on', 'letters': 'c', 'numbers': 4}
{'status': 'off', 'letters': 'a', 'numbers': 1}
{'status': 'off', 'letters': 'a', 'numbers': 2}
{'status': 'off', 'letters': 'a', 'numbers': 3}
{'status': 'off', 'letters': 'a', 'numbers': 4}
{'status': 'off', 'letters': 'b', 'numbers': 1}
{'status': 'off', 'letters': 'b', 'numbers': 2}
{'status': 'off', 'letters': 'b', 'numbers': 3}
{'status': 'off', 'letters': 'b', 'numbers': 4}
{'status': 'off', 'letters': 'c', 'numbers': 1}
{'status': 'off', 'letters': 'c', 'numbers': 2}
{'status': 'off', 'letters': 'c', 'numbers': 3}
{'status': 'off', 'letters': 'c', 'numbers': 4}
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.5 or later versions, you can make <code>status</code> the first key in your dict instead:</p>
<pre><code>d = {
    "status": ["on", "off"],
    "letters": ['a', 'b'],
    "numbers": [1, 2, 3]
}
</code></pre>
<p>For earlier versions, use <code>collections.OrderedDict</code> in place of a dict.</p>
</div>
<span class="comment-copy">Put them first in <code>d</code>?</span>
<span class="comment-copy">@ThierryLathuille My understanding is the order of iterating a dictionary is never deterministic, even if I add to the dictionary in a specific order. Also, the dictionaries I will be using IRL will have members added/remove over time.</span>
<span class="comment-copy">@DevNull Recent versions of Python 3 have dictionaries that preserve insertion order, or you can use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>.  Read through the docs for <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>product</code></a>, it specifies the order in which the iterators are "cycled"</span>
<span class="comment-copy">@DevNull it is deterministic in Python 3.7, it will be insertion order. But you should probably just set the order yourself, i.e. :<code>[dict(zip(d.keys(), values)) for values in product(d['status'],d['numbers'],d['letters'])]</code></span>
