<div class="post-text" itemprop="text">
<pre><code>import csv

with open('thefile.csv', 'rb') as f:
  data = list(csv.reader(f))
  import collections
  counter = collections.defaultdict(int)

  for row in data:
        counter[row[10]] += 1


with open('/pythonwork/thefile_subset11.csv', 'w') as outfile:
    writer = csv.writer(outfile)
    for row in data:
        if counter[row[10]] &gt;= 504:
           writer.writerow(row)
</code></pre>
<p>This code reads <code>thefile.csv</code>, makes changes, and writes results to <code>thefile_subset1</code>.</p>
<p>However, when I open the resulting csv in Microsoft Excel, there is an extra blank line after each record!</p>
<p>Is there a way to make it not put an extra blank line?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, open <code>outfile</code> with mode <code>'wb'</code> instead of <code>'w'</code>.  The <code>csv.writer</code> writes <code>\r\n</code> into the file directly.  If you don't open the file in <em>binary</em> mode, it will write <code>\r\r\n</code> because on Windows <em>text</em> mode will translate each <code>\n</code> into <code>\r\n</code>.</p>
<p>In Python 3 the required syntax changed, so open <code>outfile</code> with the additional parameter <code>newline=''</code> instead.</p>
<h3>Examples:</h3>
<pre><code># Python 2
with open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:
    writer = csv.writer(outfile)

# Python 3
with open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:
    writer = csv.writer(outfile)
</code></pre>
<h3>Documentation Links</h3>
<ul>
<li><a href="https://docs.python.org/2/library/csv.html#csv.writer" rel="noreferrer">https://docs.python.org/2/library/csv.html#csv.writer</a></li>
<li><a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="noreferrer">https://docs.python.org/3/library/csv.html#csv.writer</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Opening the file in binary mode "wb" will not work in Python 3+.  Or rather, you'd have to convert your data to binary before writing it.  That's just a hassle.</p>
<p>Instead, you should keep it in text mode, but override the newline as empty.  Like so:</p>
<pre><code>with open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simple answer is that <strong>csv files should always be opened in binary mode</strong> whether for input or output, as otherwise on Windows there are problems with the line ending. Specifically on output the csv module will write <code>\r\n</code> (the standard CSV row terminator) and then (in text mode) the runtime will replace the <code>\n</code> by <code>\r\n</code> (the Windows standard line terminator) giving a result of <code>\r\r\n</code>.</p>
<p><strong>Fiddling with the <code>lineterminator</code> is NOT the solution.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Note: It seems this is not the preferred solution because of how the extra line was being added on a Windows system.  As stated in the <a href="http://docs.python.org/library/csv.html#csv.writer" rel="nofollow noreferrer">python document</a>:</p>
<blockquote>
<p>If csvfile is a file object, it must be opened with the ‘b’ flag on platforms where that makes a difference.</p>
</blockquote>
<p>Windows is one such platform where that makes a difference.  While changing the line terminator as I described below may have fixed the problem, the problem could be avoided altogether by opening the file in binary mode.  One might say this solution is more "elegent".  "Fiddling" with the line terminator would have likely resulted in unportable code between systems in this case, where opening a file in binary mode on a unix system results in no effect.  ie. it results in cross system compatible code.</p>
<p>From <a href="http://docs.python.org/tutorial/inputoutput.html" rel="nofollow noreferrer">Python Docs</a>: </p>
<blockquote>
<p>On Windows, 'b' appended to the mode
  opens the file in binary mode, so
  there are also modes like 'rb', 'wb',
  and 'r+b'. Python on Windows makes a
  distinction between text and binary
  files; the end-of-line characters in
  text files are automatically altered
  slightly when data is read or written.
  This behind-the-scenes modification to
  file data is fine for ASCII text
  files, but it’ll corrupt binary data
  like that in JPEG or EXE files. Be
  very careful to use binary mode when
  reading and writing such files. On
  Unix, it doesn’t hurt to append a 'b'
  to the mode, so you can use it
  platform-independently for all binary
  files.</p>
</blockquote>
<p><strong>Original</strong>:</p>
<p>As part of optional paramaters for the csv.writer if you are getting extra blank lines you may have to change the lineterminator (info <a href="http://docs.python.org/library/csv.html#csv-fmt-params" rel="nofollow noreferrer">here</a>).  Example below adapated from the python page <a href="http://docs.python.org/library/csv.html" rel="nofollow noreferrer">csv docs.</a>  Change it from '\n' to whatever it should be.  As this is just a stab in the dark at the problem this may or may not work, but it's my best guess.</p>
<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; spamWriter = csv.writer(open('eggs.csv', 'w'), lineterminator='\n')
&gt;&gt;&gt; spamWriter.writerow(['Spam'] * 5 + ['Baked Beans'])
&gt;&gt;&gt; spamWriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm writing this answer w.r.t. to python 3, as I've initially got the same problem.</p>
<p>I was supposed to get data from arduino using <code>PySerial</code>, and write them in a .csv file. Each reading in my case ended with <code>'\r\n'</code>, so newline was always separating each line.</p>
<p>In my case, <code>newline=''</code> option didn't work. Because it showed some error like :</p>
<pre><code>with open('op.csv', 'a',newline=' ') as csv_file:

ValueError: illegal newline value: ''
</code></pre>
<p>So it seemed that they don't accept omission of newline here.</p>
<p>Seeing one of the answers here only, I mentioned line terminator in the writer object, like, </p>
<p><code>writer = csv.writer(csv_file, delimiter=' ',lineterminator='\r')</code></p>
<p>and that worked for me for skipping the extra newlines.</p>
</div>
<div class="post-text" itemprop="text">
<p>When using Python 3 the empty lines can be avoid by using the <a href="https://docs.python.org/3/library/codecs.html" rel="nofollow noreferrer" title="codecs">codecs</a> module. As stated in the documentation, files are opened in binary mode so no change of the newline kwarg is necessary. I was running into the same issue recently and that worked for me:</p>
<pre><code>with codecs.open( csv_file,  mode='w', encoding='utf-8') as out_csv:
     csv_out_file = csv.DictWriter(out_csv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the method defined below to write data to the CSV file. </p>
<pre><code>open('outputFile.csv', 'a',newline='')
</code></pre>
<p>Just add an additional <code>newline=''</code> parameter inside the <code>open</code> method :</p>
<pre><code>def writePhoneSpecsToCSV():
    rowData=["field1", "field2"]
    with open('outputFile.csv', 'a',newline='') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(rowData)
</code></pre>
<p>This will write CSV rows without creating additional rows!</p>
</div>
<span class="comment-copy">Please confirm that this happens when you run that code on <b>Windows</b></span>
<span class="comment-copy">yes windows correct</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1170214/python-2-csv-writer-produces-wrong-line-terminator-on-windows">Python 2 CSV writer produces wrong line terminator on Windows</a></span>
<span class="comment-copy">See the answer on this thread: <a href="https://stackoverflow.com/questions/3348460/csv-file-written-with-python-has-blank-lines-between-each-row/#53577233" title="csv file written with python has blank lines between each row">stackoverflow.com/questions/3348460/…</a></span>
<span class="comment-copy">Anyway the @Mark Tolonen's answer did resolved many questions related to the extra line(s) added when saving a standard (no csv used) text file.</span>
<span class="comment-copy">For compatibility between 2.6/2.7 and 3, you can use <a href="https://docs.python.org/2/library/io.html#io.open" rel="nofollow noreferrer"><code>io.open</code></a> with the <code>newlines</code> argument. If you're still writing in 2.x, that seems like a better choice anyway since it's forward compatible.</span>
<span class="comment-copy">@jpmc26 Normally that's good advice, but the csv module doesn't work properly with <code>io.open</code>.  There is a <code>unicodecsv</code> 3rd party module for Python 2.7 that works better.</span>
<span class="comment-copy">What is this CSV "standard" of which you speak?</span>
<span class="comment-copy">@Dan: I used "standard" as an adjective, not a noun, meaning "usual" or "commonplace". If you want an approximation to a (noun) standard, read <a href="http://tools.ietf.org/html/rfc4180" rel="nofollow noreferrer">tools.ietf.org/html/rfc4180</a></span>
<span class="comment-copy">Point is (as you imply) that there is no standard. That RFE is Informational. While \r\n may be "standard" on Windows, I'm sure Unix applications typically don't see it that way.</span>
<span class="comment-copy">@Dan: That is correct -- there is no standard. Scripts should specify the lineterminator [should have been named ROWterminator] that they want (if not the default) and still use binary mode in case the script is run on Windows otherwise the "lineterminator" may be stuffed up.</span>
<span class="comment-copy">I was about to post about this -- lineterminator='\n' worked for me in a simple test.</span>
<span class="comment-copy">can i do this&gt;??  with open('/pythonwork/thefile_subset11.csv', 'w'),lineterminator='\n' as outfile:</span>
<span class="comment-copy">@I__ : You <i>really</i> should start perusing the Python docs. Derek gave you the link : <a href="http://docs.python.org/library/csv.html" rel="nofollow noreferrer">docs.python.org/library/csv.html</a></span>
<span class="comment-copy">-1 "stab in dark" == "wrong"</span>
<span class="comment-copy">dan breslau , that name is breslov originally right? your ancestors are from where belarussia or ukraine?</span>
<span class="comment-copy">This is incorrect. <code>with open('my_file.csv', 'a',newline='') as csvfile:</code>  works absolutely fine. The problem with your answer is that here you're writing <code>' '</code> instead of <code>''</code></span>
