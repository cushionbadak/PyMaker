<div class="post-text" itemprop="text">
<p>I have created a recursive function to fetch the data from a dictionary.
The dictionary consists of keys and each key has a list of keys and it goes on. So I need to fetch the flatten list of keys when I give a key input.</p>
<p>My Dict : </p>
<pre><code>data = {"p": ["s1", "s2", "s3", "s4"],
        "s1": ["s1s1", "s1s2"],
        "s2": [],
        "s3": [],
        "s4": [],
        "s1s1": [],
        "s1s2": ["s1s2s1"],
        "s1s2s1": []
        }
</code></pre>
<p>My function :</p>
<pre><code>def get_data(key):
    items = data[key]
    if items:
        for key in items:
            items += get_data(key)
    return items
</code></pre>
<p>when i call <code>get_data("p")</code> it returns </p>
<pre><code>['s1', 's2', 's3', 's4', 's1s1', 's1s2', 's1s2s1', 's1s2s1']
</code></pre>
<p>But the expected output is : </p>
<pre><code>['s1', 's2', 's3', 's4', 's1s1', 's1s2', 's1s2s1']
</code></pre>
<p>Thanks in advance for any help ...</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is in these lines -</p>
<pre><code>for key in items:
    items += get_data(key)
</code></pre>
<p>Here you are modifying items as you're iterating over it. So in the last iteration, your <code>items</code> ends up getting with the same key multiple times; you can add a logging statement to see which key is being used to call <code>get_data</code>.</p>
<p>You want to obtain all the new items separately, and then update items after the iteration is done -</p>
<pre><code>new_items = []
for key in items:
    new_items += get_data(key)
items += new_items
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a code which will help you achieve what you want. The common approach to get a unique collection of items is to use a <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer">set</a>. Sets are unordered collections of distinct objects. To create a set from any iterable, you can simply pass it to the built-in <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer">set()</a> function. If you later need a real list again, you can similarly pass the set to the <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer">list()</a> function.</p>
<pre><code>data = {"p": ["s1", "s2", "s3", "s4"],
        "s1": ["s1s1", "s1s2"],
        "s2": [],
        "s3": [],
        "s4": [],
        "s1s1": [],
        "s1s2": ["s1s2s1"],
        "s1s2s1": []
        }

def get_data(key):
    items = data[key]
    if items:
        for keys in items:
            items += get_data(keys)
    return list(set(items))

print(get_data("p"))
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>['s3', 's1s1', 's1', 's1s2', 's2', 's1s2s1', 's4']
</code></pre>
<p>Update: an order-preserving approach is two lines:</p>
<pre><code>from collections import OrderedDict
return OrderedDict((x, True) for x in items).keys()
</code></pre>
<p>replace the <code>return</code> line of the given solution with the <code>return</code> line of the Update: Solution and you will get an ordered list in return.</p>
<p><strong>OUTPUT:</strong></p>
<pre><code>odict_keys(['s1', 's2', 's3', 's4', 's1s1', 's1s2', 's1s2s1'])
</code></pre>
<p>Use <code>list()</code> function with the achieved output to get the following list:</p>
<pre><code>['s1', 's2', 's3', 's4', 's1s1', 's1s2', 's1s2s1']
</code></pre>
</div>
<span class="comment-copy">What is <code>items</code>?</span>
<span class="comment-copy">Question updated</span>
<span class="comment-copy">@MuthuKumar does the order of the list in which they are present matter?</span>
<span class="comment-copy">@MuthuKumar Please refer to the answer provided.</span>
