<div class="post-text" itemprop="text">
<p>I got a CSV-file that contains the rows <code>id</code>, <code>name</code>, <code>firstname</code> and <code>company</code></p>
<p>I'm looping over the CSV with <code>csv.DictReader</code> and want to insert some default-values into <code>name</code> and <code>firstname</code> if they are empty</p>
<p><code>dict.get()</code> should do the trick - however it only works if <code>name</code> and <code>firstname</code> <strong>never</strong> contain any data. As soon as they contain data at least once, the returned default-value will be omited and <em>nothing</em> gets returned</p>
<h1>test.csv</h1>
<pre><code>"id","name","firstname","company"
"1","doe","john","jdoe inc"
"2","doe","jane","jdoe inc"
"3",,,"company inc"
</code></pre>
<h1>import_csv.py</h1>
<pre><code>import csv

with open("test.csv") as csv_file:
    reader = csv.DictReader(csv_file)

    for row in reader:
        firstname = row.get("firstname", "Company")
        name = row.get("name", row["company"])
        company = row["company"]

        print(f"Firstname:  {firstname}")
        print(f"Name:       {name}")
        print(f"Company:    {company}\n")
</code></pre>
<hr/>
<p>The output of the above test-script is</p>
<pre><code>Firstname:  john
Name:       doe
Company:    jdoe inc

Firstname:  jane
Name:       doe
Company:    jdoe inc

Firstname:
Name:
Company:    company inc
</code></pre>
<p>My desired output would be</p>
<pre><code>Firstname:  john
Name:       doe
Company:    jdoe inc

Firstname:  jane
Name:       doe
Company:    jdoe inc

Firstname:  Company       # &lt;- default value of dict.get()
Name:       company inc   # &lt;- default value of dict.get()
Company:    company inc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.get()</code> returns the default value only if the key <em>is not set</em>. But <code>DictReader()</code> is setting the key, with an empty string as the value. That's because there is an empty string in that column.</p>
<p>In fact, <code>DictReader()</code> guarantees that the there is a key set for every field name (where the field names are taken from the first row here); if a column is missing entirely, the value is set to <code>None</code>.</p>
<p>You can trivially account for this by using <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer"><code>or</code></a>:</p>
<pre><code>firstname = row["firstname"] or "Company"
name = row["name"] or row["company"]
</code></pre>
<p>There is no point in using <code>dict.get()</code> if a key is always there. But if <code>row["firstname"]</code> is set to either an empty string <em>or</em> <code>None</code>, then that's a value that is <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">considered false</a>, and so Python will produce the other operand to <code>or</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hope this may help you to complete this task..</p>
<p>If you are not sure whether the particular row has value in it or not then try this,</p>
<pre><code>if row.get("name") and row.get("name") != None:
    name = row['name']
else:
    name = row["company"] #default value
</code></pre>
</div>
<span class="comment-copy">Thank you so much - that is exactly what I was looking for! Since <i>firstname</i> is not always provided, I may want to stick with <code>dict.get()</code> but I'll defenitely use <code>or</code> for <i>name</i> :)</span>
<span class="comment-copy">@Razorfen: if your CSV file first line has a <code>firstname</code> column, then all dictionaries produced from that file will have a <code>firstname</code> key. The same if you set the <code>fieldnames</code> argument explicitly instead of having <code>DictReader()</code> use the first row.</span>
<span class="comment-copy">Thanks for the hint. Unfortunately the CSV-file does not always contain <code>firstname</code> (didn't mention it, sorry for that)</span>
<span class="comment-copy">There is no point in adding <code>and row.get("name") != None</code> here. If <code>row.get("name")</code> is a true value, then it <i>can't be <code>None</code> anyway</i>. And as a side note: you should always use <code>is None</code> or <code>is not None</code>, when testing for that singleton object.</span>
<span class="comment-copy">I accept but this is like additional restrictions because, if you print the dict key using .get then it prints None if key doesn't exists.</span>
<span class="comment-copy">I don't think you understand how <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">boolean truth value testing</a> works, then.</span>
