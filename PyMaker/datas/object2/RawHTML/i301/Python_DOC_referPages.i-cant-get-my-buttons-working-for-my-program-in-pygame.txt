<div class="post-text" itemprop="text">
<p>So my program is a game and I am developing the menu, I am taking an OOP approach and I understand as I have been told before that the class Button should probably just handle clicking with methods. I have the buttons loading where the play/quit buttons should load first as the first stage of the menu, then the second stage has 4 buttons for easy/med/hard/vet difficulty and the third stage is level number 1/2/3/4. I had it working before with like a mix of OOP and not OOP which I don't want where I could click buttons through to each one. However now I have the problem that I am not sure how to go about OOP getting responses for loading each set of buttons and also to stop a click going through every button. Help
P.S the code I am uploading does not have the images for the text on each button as well as the background and title etc. I will speech-marks or has them out except the text images because they are needed to distinguish each button </p>
<pre><code>BUTTON_CLICK_EVENT = pygame.USEREVENT + 1



class Button: #This class contains methods for buttons including display and functionality

    def __init__(self, buttonname, buttonx, buttony, buttonwidth, buttonheight, textfile, textx, texty): #Methods used to allow classes to intialise attributes

        self.buttonname = buttonname # Name of the button
        self.buttonx = buttonx # X-axis position
        self.buttony = buttony # Y-axis position
        self.buttonwidth = buttonwidth # Width of the button
        self.buttonheight = buttonheight # Height of the button
        self.text_image = pygame.image.load( textfile+".png" ) # Button Label
        self.textx = textx # X-axis positioning of the text
        self.texty = texty # Y-axis positioning of the text

    def drawButton(self, screen): #Method which creates a button for the menu

        pygame.draw.rect(screen, (0,0,0), [self.buttonx, self.buttony, self.buttonwidth, self.buttonheight]) #Draws a rectangular button which is black and given the size and coordinates which were attributes 
        screen.blit(self.text_image, (self.textx,self.texty)) #Displays the text given coordinates

    def checkClick( self, mouse_position ):
        #If the mouse-click is inside our rectangle, post a message to the queue
        if ( self.buttonx + self.buttonwidth &gt; mouse_position[0] &gt; self.buttonx and self.buttony + self.buttonheight &gt; mouse_position[1] &gt; self.buttony ):
            pygame.event.post( pygame.event.Event( BUTTON_CLICK_EVENT, { "button_name" : self.buttonname } ) )




PlayButton = Button('playbutton',133,477,756,223,'PlayText',387,545) or ButtonAction(1) #Creates play button      
QuitButton = Button('quitbutton',133,731,756,223,'QuitText',387,806) #Creates quit button

EasyButton = Button('easybutton',133,477,362,223,'EasyText',214,548) #Creates easy button
MediumButton = Button('mediumbutton',533,477,362,223,'MediumText',560,548) #Creates medium button
HardButton = Button('hardbutton',133,731,362,223,'HardText',214,806) #Creates hard button
VeteranButton = Button('veteranbutton',533,731,362,223,'VeteranText',537,806) #Creates veteran button

OneButton = Button('onebutton',133,477,362,223,'OneText',287,550) #Creates the level 1 button
TwoButton = Button('twobutton',533,477,362,223,'TwoText',693,550) #Creates the level 2 button
ThreeButton = Button('threebutton',133,731,362,223,'ThreeText',285,810) #Creates the level 3 button
FourButton = Button('fourbutton',533,731,362,223,'FourText',685,810) #Creates the level 4 button

all_buttons = [ PlayButton, QuitButton, EasyButton, MediumButton, HardButton, VeteranButton, OneButton, TwoButton, ThreeButton, FourButton ]




stage = 1

while True:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            break

        if event.type == pygame.MOUSEBUTTONUP:
            click_location = pygame.mouse.get_pos()

        if event.type == BUTTON_CLICK_EVENT:
            print("Clicked "+ event.button_name )

    #ButtonBox.LoadImage()

    for b in all_buttons:
        b.drawButton( gameDisplay )

    pygame.display.flip()
    clock.tick_busy_loop( 60 ) # Limit FPS


pygame.quit()
quit()
</code></pre>
<p>LoadImage is a class that just draws an image to the screen. </p>
</div>
<div class="post-text" itemprop="text">
<p>So I think there's two issues here.  The first, is how to group the buttons into some kind of logical and functional set.  The other issue is tracking the state of the user, and using that to decide what it is they see on-screen.  My understanding of the button-sets is that for a given state of the game, a different set of buttons is shown.</p>
<p>So when you think "state" in programming, generally you also think "<a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a>".  In the code below I have created two sets of enumerated types, one for the game state, another for the Button Events. Basically enumerated types are just nicely-named numbers.  Their use makes the code more readable - but it is a bit more work. </p>
<p>For example:</p>
<pre><code>if ( game_state == 6 ): 
</code></pre>
<p>is much less understandable than:</p>
<pre><code>if ( game_state == GameState.GAME_OVER ):
</code></pre>
<p>Any user-driven program has sub-sections, where control is not necessarily about the "main business" of the program.  It might be opening a file, or choosing a difficulty - essentially the control input (mouse movements, clicks and keyboard key events, etc.) need to be handled differently. So we're keeping track of the <code>game_state</code>, to know which part we're handling at the moment.  For this particular program, it allows us to control which <code>ButtonSet</code> menu to draw to the screen.</p>
<p>To group a set of <code>Button</code> objects into some kind of group I created the un-imaginatively named <code>ButtonSet</code>.  It's basically a wrapper object around a list of buttons, with helper functions to operate on the entire set at once.</p>
<p>While I was writing some demo' code for these, it occurred to me that for event handling, it was time consuming to write (and for python to interpret) lots of <code>if button_name == "blah"</code> all over the place.  So I created a set of unique button events with a <code>ButtonEvent</code> enum.  When a button is clicked, it now posts a unique event number rather than a single click-event for all buttons. Next I realised that the width, height, etc. fields could all be stored in a <a href="https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidepoint" rel="nofollow noreferrer">PyGame rect</a>, and the click checked with the point-collision function of the rect class.  This simplified the code a bit.</p>
<pre><code>#Stealth Assassin
import pygame #Imports the pygame module inclulding many in built functions that aids in game design
import time #Imports the time module for which I can implement delays into my program
import enum

pygame.init() #Runs pygame
clock = pygame.time.Clock() #Intialises the variable to control the game clock (FPS)
#gameDisplay = pygame.display.set_mode((1920,1080),pygame.FULLSCREEN) #Variable which will set the resolution of the game window and put the window into fullscreen mode
gameDisplay = pygame.display.set_mode((800,800)) #Variable which will set the resolution of the game window and put the window into fullscreen mode
pygame.display.set_caption("Stealth Assassin") #Sets the title of the pygame window for the game


### All states the game-screen can be in
class GameState( enum.Enum ):
    MENU_PLAYQUIT    = 1,
    MENU_DIFFICULTY  = 2,
    MENU_LEVELSELECT = 3,
    GAME_PLAYING     = 4,
    GAME_OVER        = 5

### All the event-codes the buttons send back
class ButtonEvent( enum.IntEnum ):  # IntEnum so we can convert back to an int for Event poting
    QUIT    = pygame.USEREVENT + 1
    PLAY    = pygame.USEREVENT + 2
    EASY    = pygame.USEREVENT + 3
    MEDIUM  = pygame.USEREVENT + 4
    HARD    = pygame.USEREVENT + 5
    VETERAN = pygame.USEREVENT + 6
    LEVEL1  = pygame.USEREVENT + 7
    LEVEL2  = pygame.USEREVENT + 8
    LEVEL3  = pygame.USEREVENT + 9
    LEVEL4  = pygame.USEREVENT +10


class Button: #This class contains methods for buttons including display and functionality

    def __init__(self, buttonname, event_code, buttonx, buttony, buttonwidth, buttonheight, textfile, textx, texty): #Methods used to allow classes to intialise attributes

        self.buttonname = buttonname # Name of the button
        self.rect       = pygame.Rect( buttonx, buttony, buttonwidth, buttonheight )
        self.text_image = pygame.image.load( textfile+".png" ) # Button Label
        self.textx      = textx # X-axis positioning of the text
        self.texty      = texty # Y-axis positioning of the text
        self.event_code = event_code

    def drawButton(self, screen): #Method which creates a button for the menu
        pygame.draw.rect(screen, (0,0,0), self.rect ) #Draws a rectangular button which is black and given the size and coordinates which were attributes 
        screen.blit(self.text_image, (self.textx,self.texty)) #Displays the text given coordinates

    def checkClick( self, mouse_position ):
        """ Check if the given point is inside our button-rectangle.
            If the click was, post a BUTTON_CLICK_EVENT to the PyGame Event queue and return True
            return False otherwise """
        result = False
        if ( self.rect.collidepoint( mouse_position ) ):
            #If the mouse-click is inside our rectangle, post a message to the queue
            pygame.event.post( pygame.event.Event( int( self.event_code), { "button_name" : self.buttonname } ) )
            result = True
        return result

###
### A container class for a bunch of buttons
###
class ButtonSet:
    def __init__( self, *buttons ):
        self.buttons = list( buttons )

    def addButton( self, b ):
        """ Add a new button to our set, but not if we have it already """
        if ( b not in self.buttons ):
            self.buttons.append( b )

    def anyClicked( self, click_location ):
        """ For every button in the group, check to see if the mouse click was inside it. """
        result = False
        for b in self.buttons:
            if ( b.checkClick( click_location ) == True ):
                result = True
        return result

    def draw( self, screen ):
        """ Paint the entire button set to the screen """
        for b in self.buttons:
            b.drawButton( screen )







PlayButton = Button('playbutton',ButtonEvent.PLAY,133,477,756,223,'button_text',387,545) or ButtonAction(1) #Creates play button      
QuitButton = Button('quitbutton',ButtonEvent.QUIT,133,731,756,223,'button_text',387,806) #Creates quit button
play_quit_buttons = ButtonSet( PlayButton, QuitButton )

EasyButton    = Button('easybutton',    ButtonEvent.EASY,     133,477,362,223,'button_text',214,548) #Creates easy button
MediumButton  = Button('mediumbutton',  ButtonEvent.MEDIUM,   533,477,362,223,'button_text',560,548) #Creates medium button
HardButton    = Button('hardbutton',    ButtonEvent.HARD,     133,731,362,223,'button_text',214,806) #Creates hard button
VeteranButton = Button('veteranbutton', ButtonEvent.VETERAN, 533,731,362,223,'button_text',537,806) #Creates veteran button
difficulty_buttons = ButtonSet( EasyButton, MediumButton, HardButton, VeteranButton )

OneButton   = Button('onebutton',   ButtonEvent.LEVEL1, 133,477,362,223,'button_text',287,550) #Creates the level 1 button
TwoButton   = Button('twobutton',   ButtonEvent.LEVEL2, 533,477,362,223,'button_text',693,550) #Creates the level 2 button
ThreeButton = Button('threebutton', ButtonEvent.LEVEL3, 133,731,362,223,'button_text',285,810) #Creates the level 3 button
FourButton  = Button('fourbutton',  ButtonEvent.LEVEL4, 533,731,362,223,'button_text',685,810) #Creates the level 4 button
level_buttons = ButtonSet( OneButton, TwoButton, ThreeButton, FourButton )


### What game-state is displayed to the user
game_state      = GameState.MENU_PLAYQUIT
game_difficulty = 1
game_level      = 1
done            = False
while not done:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            print("Quit Event")
            done = True

        elif event.type == pygame.MOUSEBUTTONUP:
            click_location = pygame.mouse.get_pos()
            #print("Mouse-Up Event -&gt; (%3d, %3d)" % ( click_location[0], click_location[1] ) )

            # send the mouse-click location to the correct button-set depending on the state
            if ( game_state == GameState.MENU_PLAYQUIT ):
                play_quit_buttons.anyClicked( click_location )
            elif ( game_state == GameState.MENU_DIFFICULTY ):
                difficulty_buttons.anyClicked( click_location )
            elif ( game_state == GameState.MENU_LEVELSELECT ):
                level_buttons.anyClicked( click_location )
            elif ( game_state == GameState.GAME_PLAYING ):
                # TODO
                pass
            elif ( game_state == GameState.GAME_OVER ):
                # TODO
                pass

        ###
        ### Handle all the mouse-click button events
        ###
        elif event.type == ButtonEvent.QUIT:
            done = True
        elif event.type == ButtonEvent.PLAY:
            # user clicked "play", trainsition to next state
            game_state = GameState.MENU_DIFFICULTY
        elif event.type in [ ButtonEvent.EASY, ButtonEvent.MEDIUM, ButtonEvent.HARD, ButtonEvent.VETERAN ]:
            game_state = GameState.MENU_LEVELSELECT
            # NOTE: This could be simpler with a dictionary of { event : difficulty-level }
            if event.type == ButtonEvent.EASY:
                game_difficulty = 1
            elif event.type == ButtonEvent.MEDIUM:
                game_difficulty = 2
            elif event.type == ButtonEvent.HARD:
                game_difficulty = 3
            elif event.type == ButtonEvent.VETERAN:
                game_difficulty = 4
        elif event.type in [ ButtonEvent.LEVEL1, ButtonEvent.LEVEL2, ButtonEvent.LEVEL3, ButtonEvent.LEVEL4 ]:
            game_state = GameState.GAME_PLAYING
            if event.type == ButtonEvent.LEVEL1:
                game_level = 1
            ### etc



    #ButtonBox.LoadImage()
    ###
    ### Depending on the Game State, render the screen
    ###
    if ( game_state == GameState.MENU_PLAYQUIT ):
        gameDisplay.fill( ( 128, 128, 128 ) )  # Temorarily fill with grey to see button locations better
        play_quit_buttons.draw( gameDisplay )
    elif ( game_state == GameState.MENU_DIFFICULTY ):
        gameDisplay.fill( ( 188, 188, 188 ) )  # Temorarily fill with grey to see button locations better
        difficulty_buttons.draw( gameDisplay )
    elif ( game_state == GameState.MENU_LEVELSELECT ):
        gameDisplay.fill( ( 240, 240, 240 ) )  # Temorarily fill with grey to see button locations better
        level_buttons.draw( gameDisplay )
    elif ( game_state == GameState.GAME_PLAYING ):
        gameDisplay.fill( ( 0, 0, 0 ) )  # Temorarily fill with grey to see button locations better
        # TODO paint game sprites
    elif ( game_state == GameState.GAME_OVER ):
        gameDisplay.fill( ( 200, 0, 0 ) )  # Temorarily fill with grey to see button locations better
        # TODO paint game-over screen
        # TODO play wah-wah-wahhh sound

    pygame.display.flip()
    clock.tick_busy_loop( 60 ) # Limit FPS


pygame.quit()
#quit()
</code></pre>
<p>To be honest, the <code>Button</code> and <code>ButtonSet</code> closely follow the look and usage of PyGame's <a href="https://www.pygame.org/docs/ref/sprite.html" rel="nofollow noreferrer">Sprite and SpriteGroup</a> classes.  It would probably make for better code if the <code>Button</code> class inherited <code>pygame.sprite.Sprite</code>, but I don't think its really  necessary for a button, and your implementation with a text-bitmap over a coloured background is a slightly different setup too.</p>
</div>
<span class="comment-copy">There's a lot of code here that has nothing to do with the problem. Could you shorten it to something minimal that still produces the issue?</span>
<span class="comment-copy">Can you please explain how you want these sets of buttons to work.  Are they all on-screen at once?  Is there a flow to them? There needs to be more detail to the question to form a better answer.</span>
<span class="comment-copy">There's a bug in the event code from my previous answer.  To create &amp; send a new event, it should be: <code>pygame.event.post( pygame.event.Event( BUTTON_CLICK_EVENT, { "button_name" : self.buttonname } ) )</code></span>
<span class="comment-copy">Thank you Kingsley I will shorten the code also. Because the issue of the code is in the game loop and the class Button.</span>
<span class="comment-copy">I don't know PyGame, but I'm almost certain that this will return a Boolean and not a  Button class instance: <code>PlayButton = Button('playbutton',133,477,756,223,'PlayText',387,545) or ButtonAction(1)</code></span>
<span class="comment-copy">Thank you Kingsley, this works so well and I understand what you have wrote</span>
<span class="comment-copy">@AaronS - No worries, glad I could help.</span>
