<div class="post-text" itemprop="text">
<p>I'm am creating an xml file with python using lxml.  I am parsing through a file by line, looking for a string, and if that string exists, I create a SubElement.  I am assigning the the SubElement a value which exists in the parsed file after the string I'm searching for.</p>
<p>Question: how do I get all the xml output onto one line in the output.xml file?  Using line[12:] appears to be the problem.  See below details.</p>
<p>Example file content per line:</p>
<pre><code>[testclass] unique_value_horse
[testclass] unique_value_cat
[testclass] unique_value_bird
</code></pre>
<p>Python code:</p>
<p>When I hardcode a string such as below, the output xml is one continuous line for the xml tree.  Perfect!  See below.</p>
<pre><code>with open(file) as openfile:
    for line in openfile:
        if "[testclass]" in line:
            tagxyz = etree.SubElement(subroot, "tagxyz")
            tagxyz.text = "hardcodevalue"
</code></pre>
<p>When I try and assign the 13th character onward as the value, I get a new line in the output xml per <code>SubElement</code>.  This is causing errors for the receiver of the output xml file.  See below.</p>
<pre><code>with open(file) as openfile:
    for line in openfile:
        if "[testclass]" in line:
            tagxyz = etree.SubElement(subroot, "tagxyz")
            tagxyz.text = line[12:]
</code></pre>
<p>I thought making the assignment on the same line might help, but it does not seem to matter.    See below.</p>
<pre><code>with open(file) as openfile:
    for line in openfile:
        if "[testclass]" in line:
            etree.SubElement(subroot, "tagxyz").text = line[12:]
</code></pre>
<p>I have tried to employ <code>etree.XMLParser(remove_blank_text=True)</code>, and parse the output xml file AFTER the fact and recreate the file, but that doesn't seem to help.  I understand this should help, but either I'm using it wrong, or it won't actually solve my problem.  See below.</p>
<pre><code>with open("output.xml", 'w') as f:
    f.write(etree.tostring(project))

parser = etree.XMLParser(remove_blank_text=True)
tree = etree.parse("output.xml", parser)

with open("output2.xml", 'w') as fl:
    fl.write(etree.tostring(tree))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your lines include the line separator, <code>\n</code>. You can strip the line with <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow"><code>str.rstrip()</code></a>:</p>
<pre><code>with open(file) as openfile:
    for line in openfile:
        if "[testclass]" in line:
            etree.SubElement(subroot, "tagxyz").text = line.rstrip('\n')
</code></pre>
<p>In future, use the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow"><code>repr()</code> function</a> to debug such issues; you'll readily see the newline represented by its Python escape sequence:</p>
<pre><code>&gt;&gt;&gt; line = '[testclass] unique_value_horse\n'
&gt;&gt;&gt; print(line)
[testclass] unique_value_horse

&gt;&gt;&gt; print(repr(line))
'[testclass] unique_value_horse\n'
&gt;&gt;&gt; print(repr(line.rstrip('\n')))
'[testclass] unique_value_horse'
</code></pre>
</div>
<span class="comment-copy">Perfect!  So simple... all the difference.</span>
