<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/functions.html#iter" rel="nofollow">iter function</a> wraps objects like lists or tuples in order to use them as iterators, i.e. one is able to use <code>next</code>, for example. For instance,</p>
<pre><code>next(iter([1, 2, 3]))
</code></pre>
<p>returns 1.</p>
<p>What happens internally if the object we pass to <code>iter</code> is already an iterator? Does it simply return the original object, i.e. no-op? Or does it produce a new iterator wrapping the original one? And by wrapping I don't mean copying the original iterator, of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>TLDNR: <code>iter</code> returns <code>obj.__iter_</code>. It doesn't return <code>obj</code> "as is".</p>
<p>The Cpython implementation of <code>iter</code> is pretty straightforward:</p>
<pre><code>PyObject *
PyObject_GetIter(PyObject *o)
{
    PyTypeObject *t = o-&gt;ob_type;
    getiterfunc f = NULL;
    if (PyType_HasFeature(t, Py_TPFLAGS_HAVE_ITER))
        f = t-&gt;tp_iter; // &lt;- if it has __iter__, return that
    ....more stuff
</code></pre>
<p>So when you call <code>iter(obj)</code> and <code>obj.__iter__</code> exists it just returns that. Most (all?) built-in iterators have <code>__iter__ = self</code>, e.g.</p>
<pre><code>PyTypeObject PyListIter_Type = {
    PyVarObject_HEAD_INIT(&amp;PyType_Type, 0)
    "listiterator",                             /* tp_name */
    ....
    PyObject_SelfIter,                          /* tp_iter */
    ....
</code></pre>
<p>but that's not necessary true for userland objects:</p>
<pre><code>class X:
    def __iter__(self):
        return Y()

class Y:
    def __iter__(self):
        return iter('xyz')


a = iter(X())
b = iter(a)
print a is b # False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Empirical evidence is nice, but <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow">the docs are pretty explicit</a>.</p>
<blockquote>
<p>Iterators are required to have an <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow"><code>__iter__()</code></a> method that returns the iterator object itself</p>
</blockquote>
<p>If you implement an object with a <code>__next__()</code>, you should have an <code>__iter__()</code> method that returns <code>self</code>. Breaking this rule means you have an object that isn't an iterator but looks like one, which is a recipie for disaster.</p>
</div>
<span class="comment-copy">any next() will affect all others</span>
<span class="comment-copy">Wasn't as straightforward as I thought. I guess I got to move the answered mark. :-)</span>
