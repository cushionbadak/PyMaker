<div class="post-text" itemprop="text">
<p>I got it in javascript:</p>
<pre><code>eval(String.fromCharCode(102,117,110,99,116,105,111,110,32,99,104,101,99,107,40,41,123,13,10,09,118,97,114,32,97,32,61,32,39,100,52,103,39,59,13,10,09,105,102,40,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,116,120,116,39,41,46,118,97,108,117,101,61,61,97,41,123,13,10,09,09,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,61,97,43,34,46,112,104,112,34,59,13,10,09,125,101,108,115,101,123,13,10,09,09,97,108,101,114,116,40,34,23494,30721,38169,35823,34,41,59,13,10,09,125,13,10,125));
</code></pre>
<p>I want to transfer this unicode into string so that I can know what code it runs.</p>
<p>Please help me convert this to python </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, use the <a href="https://docs.python.org/2/library/functions.html#unichr" rel="nofollow"><code>unichr()</code> function</a> to convert an integer to a Unicode codepoint; In Python 3, replace <code>unichr()</code> with <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow"><code>chr()</code></a>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; s = """eval(String.fromCharCode(102,117,110,99,116,105,111,110,32,99,104,101,99,107,40,41,123,13,10,09,118,97,114,32,97,32,61,32,39,100,52,103,39,59,13,10,09,105,102,40,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,116,120,116,39,41,46,118,97,108,117,101,61,61,97,41,123,13,10,09,09,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,61,97,43,34,46,112,104,112,34,59,13,10,09,125,101,108,115,101,123,13,10,09,09,97,108,101,114,116,40,34,23494,30721,38169,35823,34,41,59,13,10,09,125,13,10,125));"""
&gt;&gt;&gt; codes = literal_eval(s.split('(', 2)[-1].rsplit(')', 2)[0].replace(',0', ','))
&gt;&gt;&gt; print u''.join(unichr(c) for c in codes)
function check(){
    var a = 'd4g';
    if(document.getElementById('txt').value==a){
        window.location.href=a+".php";
    }else{
        alert("密码错误");
    }
}
</code></pre>
<p>Note that I had to replace the <code>09</code> integer literals with <code>9</code>; leading zeros in Python 3 are a syntax error, in Python 2 they are interpreted as octal literals (and <code>09</code> is not a valid octal number). I used the <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code> function</a> to convert from a string representation to a list of integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>If that is a list of values obtained from <a href="https://docs.python.org/2/library/functions.html#ord" rel="nofollow"><code>ord</code></a>(or equivalent) you can use <a href="https://docs.python.org/2/library/functions.html#chr" rel="nofollow"><code>chr</code></a> to invert the process.</p>
<pre><code>&gt;&gt;&gt; ''.join(chr(i) for i in l)
'function check(){\r\n\tvar a = \'d4g\';\r\n\tif(document.getElementById(\'txt\').value==a){\r\n\t\twindow.location.href=a+".php";\r\n\t}else{\r\n\t\talert("密码错误");\r\n\t}\r\n}'
</code></pre>
<p>In formatted code, this string would be</p>
<pre><code>function check(){
    var a = 'd4g';
    if(document.getElementById('txt').value == a){
        window.location.href= a + ".php";
    }
    else{
        alert("密码错误");
    }
}
</code></pre>
</div>
<span class="comment-copy">Did you use Python3?</span>
<span class="comment-copy">@IonutHulub: yes.</span>
<span class="comment-copy">@MartijnPieters That same code won't run in Python2 because it representes strings as bytes. It would be nice if the response would clarify that.</span>
<span class="comment-copy">@IonutHulub: not sure what you mea by that; <code>l</code> here is a list of integers, <code>chr()</code> produces one-character strings. In Python 2 <code>chr()</code> would not work because it only can handle integers in the range 0-255, which is why my code uses <code>unichr()</code> instead.</span>
<span class="comment-copy">@MartijnPieters I meant that chr can't handle integers bigger then 255 in python 2. I didn't say your answer is wrong. I meant to say that Cyber's answer doesn't specify that the code will only work in python3 and why.</span>
