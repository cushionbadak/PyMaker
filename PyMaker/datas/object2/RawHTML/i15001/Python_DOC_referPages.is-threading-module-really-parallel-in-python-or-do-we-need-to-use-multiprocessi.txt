<div class="post-text" itemprop="text">
<p>So, I have written this simple code to check if python threading module is really parallel and I found out that in this case,</p>
<pre><code>from threading import Thread, current_thread
import multiprocessing as mp
def callback(result):
    print result

def run_sql(n):
    print current_thread()
    for i in range(n):
        i=i+1
    print 'done for ', current_thread()

if __name__=='__main__':
    n=100000000
    pool = mp.Pool(5)
    threads= [ Thread(target=run_sql, args=(n,)) for i in range(5)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()
</code></pre>
<p>I have tried the same with Pool.apply_async which is actually parallel.</p>
<pre><code>def callback(result):
    print result

def run_sql(n):
    print current_thread()
    for i in range(n):
        i=i+1
    print 'done for ', current_thread()

if __name__=='__main__':
    print datetime.datetime.now()
    n=100000000
    pool = mp.Pool(5)
    for i in range(10):
        pool.apply_async(run_sql, args= (n,),callback=callback)
    pool.close()
    pool.join()
</code></pre>
<p>So my question is what is the point of using the Threading module if it is not really parallel even it saves the IPC and uses the same memory area? Also, can threading actually be parallel using queue or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you are joining your threads as soon as you start them:</p>
<pre><code>for t in threads:
    t.start()
    t.join()
</code></pre>
<p>IIRC, <code>Thread.join</code> will wait for the thread to finish, before continuing (which means that you wait for the first thread to complete before starting the second)...</p>
<p>Generally, you need 2 loops:</p>
<pre><code>for t in threads:
    t.start()
# other stuff to do in the main thread...
for t in thread:
    t.join()
</code></pre>
</div>
<span class="comment-copy">Ya I changed that. But still the performance is quite different compared to multiprocessing coz processes can be called more powerful threads?</span>
<span class="comment-copy">@gusc -- exactly <i>how</i> much performance benefit you get depends on what you are doing in the threads.  The key is that whatever you are doing in the thread must release the GIL in order to actually have parallel code -- otherwise, python will continue to only do one thing at a time (though it will switch back and forth between your threads to determine what that 1 thing actually is).  <code>multiprocessing</code> will truly execute your tasks in parallel (regardless of the GIL), though shared state between the processes is more difficult (and expensive) to manage.</span>
<span class="comment-copy">Ok. Thanks @mgilson. I`ll research more about GIL. Are there any other key points while using multiprocessing vs multithreading as I am trying to design something customer facing which might overload the CPU if it spawns too many thread/request per user and might get harder to manage.</span>
<span class="comment-copy">@gusc -- I think that managing the number of processes/threads via pools is generally not too tricky.  <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a> has some useful goodies you might want to look into.</span>
