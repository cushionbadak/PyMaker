<div class="post-text" itemprop="text">
<p>I have a list like </p>
<pre><code>my_list = ['#005', '#003', '#002']
</code></pre>
<p>and I'd like a list with <code>['005','003','002']</code>. What I'm looking for is something like <code>map([:1], mylist)</code>. Does it exist?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension, to strip the first character like this</p>
<pre><code>&gt;&gt;&gt; my_list = ['#005', '#003', '#002']
&gt;&gt;&gt; [item[1:] for item in my_list]
['005', '003', '002']
</code></pre>
<p>if you want to use the <code>map</code> function, you need to pass a function to it, which does the same stripping, like this</p>
<pre><code>&gt;&gt;&gt; map(lambda item: item[1:], my_list)
['005', '003', '002']
</code></pre>
<p>Here we pass a <a href="https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda expression</a> to the map, which gets each and every item and returns the stripped string.</p>
<p>Alternatively, you can use the <a href="https://docs.python.org/2/library/stdtypes.html#str.lstrip" rel="nofollow noreferrer"><code>str.lstrip</code></a> function idiomatically, like this</p>
<pre><code>&gt;&gt;&gt; [item.lstrip('#') for item in my_list]
['005', '003', '002']
</code></pre>
<p>The same <code>lstrip</code> function can be used with <code>map</code> like this</p>
<pre><code>&gt;&gt;&gt; map(lambda item: item.lstrip('#'), my_list)
['005', '003', '002']
</code></pre>
<p><strong>Note:</strong> If you are using Python 3.x, then the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> returns an iterable <code>map</code> object. You need to iterate it and convert that to a list, like this</p>
<pre><code>&gt;&gt;&gt; my_list = ['#005', '#003', '#002']
&gt;&gt;&gt; map(lambda item: item[1:], my_list)
&lt;map object at 0x7fa6b301ef98&gt;
&gt;&gt;&gt; list(map(lambda item: item[1:], my_list))
['005', '003', '002']
</code></pre>
<p>As, <a href="https://stackoverflow.com/questions/28778321/how-to-slice-several-strings-in-a-list/28778338?noredirect=1#comment45834566_28778338">scott_fakename mentioned in the comments</a>, you can give the functional touch to this problem, like this</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; list(map(itemgetter(slice(1, None)), my_list))
['005', '003', '002']
</code></pre>
<p>This uses <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> and <a href="https://docs.python.org/2/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> function (which does the same job as the <code>[1:]</code> form).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [120]: my_list = ['#005', '#003', '#002']

In [121]: new_list = [ele[1:] for ele in my_list]

In [122]: new_list
Out[122]: ['005', '003', '002']
</code></pre>
</div>
<span class="comment-copy">Oh yeah! I totaly forgot about list comprehensions thanks!</span>
<span class="comment-copy">@pedroabreu In Python, <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">the BDFL prefers List Comprehension over <code>map</code></a></span>
<span class="comment-copy">Also, if you want to use map, you can use <code>import operator; map(operator.itemgetter(slice(start, stop, step))</code>.  Not saying you should use this, just saying it's an option that exists. <code>slice(start, stop, step)</code> is what <code>item[start:stop:step]</code> receives, and <code>operator.itemgetter</code> is a function that calls slice on an object.  It's worth looking into because it's a useful thing to know about.</span>
<span class="comment-copy">@thefourtheye Yeah, as a haskell lover I'm way to used with map to stop using it all of a sudden now in python haha. In fact list comprehation seems a lot more natural than map in python. But thanks for the heads up.</span>
<span class="comment-copy">@pedroabreu You are welcome :-)</span>
