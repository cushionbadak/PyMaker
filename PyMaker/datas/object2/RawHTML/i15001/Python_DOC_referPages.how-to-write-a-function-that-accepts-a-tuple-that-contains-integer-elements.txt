<div class="post-text" itemprop="text">
<p>Write a function <code>average</code> that accepts a <code>tuple</code> that contains integer elements as an argument and returns the average value of the elements within the argument. </p>
<pre><code>for example, average((1, 2, 3)) = 2
for example, average((-3, 2, 8, -1)) = 1.5
</code></pre>
<p>my answer:</p>
<pre><code>def average(values):
    if values == (1,2,3):
        return (1+2+3)/3
    elif values == (-3,2,8,-1):
        return (-3+2+8-1)/4
</code></pre>
<p>Why wrong? How to do?
Thanks!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function only works for those two specific inputs. The goal is to write a function that returns the correct average for all valid inputs.</p>
<p>You should use python's builtin functions <a href="https://docs.python.org/3.4/library/functions.html#sum" rel="nofollow">sum</a> and <a href="https://docs.python.org/3.4/library/functions.html#len" rel="nofollow">len</a> for this</p>
<pre><code>def average(values):
    return sum(values)/len(values)
</code></pre>
<p>For Python 2 you have to wrap the <code>sum(values)</code> (or the <code>len(values)</code>, either part of the division is good) inside a call to <code>float</code>.</p>
<p>Starting with Python 3.4 you can use the function <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow">mean from the statistics module</a>.</p>
<pre><code>import statistics
def average(values):
    return statistics.mean(values)
</code></pre>
<p>or shorter as your function is just another name for statistic's mean</p>
<pre><code>average = statistics.mean
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>In [1]: def average(values):
   ...:     return float(sum(values))/len(values)
   ...:

In [2]: print average((-3,2,8,-1))
1.5
</code></pre>
<p>Add a <code>float</code> to the <code>sum</code> function to work for Python 2.</p>
</div>
<span class="comment-copy">As the questions is tagged <code>python3</code> the call to float is unnecessary as the normal division in Python3 already does float division</span>
<span class="comment-copy">OK,  thanks. I don't know that...</span>
