<div class="post-text" itemprop="text">
<p>I want to do array indexing. I would have expected the result to be [0,1,1,0], however I just get an error. How can I do this type of indexing?</p>
<pre><code>a_np_array=np.array(['a','b','c','d'])
print a_np_array in ['b', 'c']

Traceback (most recent call last):
File "dfutmgmt_alpha_osis.py", line 130, in &lt;module&gt;
print a_np_array in ['b', 'c']
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
<p> Up top, i actually meant to say [False,True,True,False] not [0,1,1,0] as I want the bools so i can do indexing</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all you cannot use <code>[0,1,1,0]</code> for indexing here, so you're using the wrong term.</p>
<pre><code>&gt;&gt;&gt; a_np_array[[0,1,1,0]]  # Not useful at all
array(['a', 'b', 'b', 'a'], 
      dtype='|S1')
</code></pre>
<p>If I understood this correctly you're simply trying to check whether items of <code>a_np_array</code> exist in <code>['b', 'c']</code>,  for that use <code>numpy.in1d</code>, but as it returns boolean array we just need to convert it integer array.</p>
<pre><code>&gt;&gt;&gt; np.in1d(a_np_array, ['b','c'])
array([False,  True,  True, False], dtype=bool)
&gt;&gt;&gt; np.in1d(a_np_array, ['b','c']).astype(int)
array([0, 1, 1, 0])
</code></pre>
<p><strong>Coming to why <code>a_np_array in ['b', 'c']</code> didn't work?</strong></p>
<p>Here the <code>in</code> operator will call the <a href="https://hg.python.org/cpython/file/b22755f8ab5f/Objects/listobject.c#l403" rel="nofollow"><code>__contains__</code></a> method of the list object(<code>['b', 'c']</code>) and then for each object in list Python will use the method <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool" rel="nofollow"><code>PyObject_RichCompareBool</code></a> to compare each item to <code>a_np_array</code>. <code>PyObject_RichCompareBool</code> first of all simply checks if the items to be compared are the <strong>same object</strong>, i.e same <code>id()</code>, if yes return 1 right away otherwise call <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompare" rel="nofollow"><code>PyObject_RichCompare</code></a> on them. Hence this will work:</p>
<pre><code>&gt;&gt;&gt; a_np_array in [a_np_array, 'c', 'a']
True
</code></pre>
<p>But this won't:</p>
<pre><code>&gt;&gt;&gt; a_np_array in [a_np_array.copy(), 'c', 'a']
Traceback (most recent call last):
  File "&lt;ipython-input-405-dfe2729bd10b&gt;", line 1, in &lt;module&gt;
    a_np_array in [a_np_array.copy(), 'c', 'a']
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
<p>Now Python will check whether the object returned by <code>PyObject_RichCompare</code> is already a boolean type, i.e <code>True</code> or <code>False</code>(This is done using <a href="https://docs.python.org/2/c-api/bool.html#c.PyBool_Check" rel="nofollow"><code>PyBool_Check</code></a> and <a href="https://docs.python.org/2/c-api/bool.html#c.Py_True" rel="nofollow"><code>Py_True</code></a>), if it is then return the result immediately otherwise call <a href="https://docs.python.org/2/c-api/object.html#c.PyObject_IsTrue" rel="nofollow"><code>PyObject_IsTrue</code></a> to check whether the object can be considered a truthy object, this is done by calling <code>__nonzero__</code> method of the object. For a NumPy array this will end up calling <code>bool()</code> on the returned object which is going to raise an error you're getting. Here NumPy expects you to call either <code>all()</code> or <code>any()</code> to check whether all items are <code>True</code> or at least one.</p>
<pre><code>&gt;&gt;&gt; bool(a_np_array == 'a')
Traceback (most recent call last):
  File "&lt;ipython-input-403-b7ced85c4f02&gt;", line 1, in &lt;module&gt;
    bool(a_np_array == 'a')
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
<hr/>
<p>Links to source code:</p>
<ul>
<li><a href="https://hg.python.org/cpython/file/b22755f8ab5f/Objects/listobject.c#l403" rel="nofollow"><code>list_contains</code></a></li>
<li><a href="https://hg.python.org/cpython/file/b22755f8ab5f/Objects/object.c#l725" rel="nofollow"><code>PyObject_RichCompareBool</code></a></li>
<li><a href="https://hg.python.org/cpython/file/b22755f8ab5f/Objects/object.c#l1235" rel="nofollow"><code>PyObject_IsTrue</code></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Try this <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; print [int(x in ['b', 'c']) for x in a_np_array]
[0, 1, 1, 0]
</code></pre>
<p>Utilizing the fact that <code>int(True) == 1</code> and <code>int(False) == 0</code></p>
</div>
<span class="comment-copy">OK. I checked the documentation and this seems to be what I am looking for. Can you explain why my method does not work? I am surprised that there is no kind of array index like method to do this.</span>
<span class="comment-copy">I have moved my comment to answer with some more explanation.</span>
