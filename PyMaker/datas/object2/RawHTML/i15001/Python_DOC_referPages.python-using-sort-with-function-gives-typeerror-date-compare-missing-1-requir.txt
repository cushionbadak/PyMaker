<div class="post-text" itemprop="text">
<p>I am completely new to Python so please excuse my lack of knowledge.  I am writing a script to create AWS EC2 snapshots and then delete any older snapshots specified in the script.  I took some code from other scripts which appear to have been written in an older Python version (I am using 3.3.2).  </p>
<pre><code>#Built with Python 3.3.2
import boto.ec2
from boto.ec2.connection import EC2Connection
from boto.ec2.regioninfo import RegionInfo
from boto.ec2.snapshot import Snapshot
from datetime import datetime
import sys

aws_access_key = str(input("AWS Access Key: "))
aws_secret_key = str(input("AWS Secret Key: "))
regionname = str(input("AWS Region Name: "))
regionendpoint = str(input("AWS Region Endpoint: "))
region = RegionInfo(name=regionname, endpoint=regionendpoint)
conn = EC2Connection(aws_access_key_id = aws_access_key, aws_secret_access_key = aws_secret_key, region = region)
print (conn)

volumes = conn.get_all_volumes()
print ("%s" % repr(volumes))

vol_id = str(input("Enter Volume ID to snapshot: "))
keep = int(input("Enter number of snapshots to keep:  "))
volume = volumes[0]
description = str(input("Enter volume snapshot description: "))


if volume.create_snapshot(description):
    print ('Snapshot created with description: %s' % description)

snapshots = volume.snapshots()
print (snapshots)

def date_compare(snap1, snap2):
    if snap1.start_time &lt; snap2.start_time:
        return -1
    elif snap1.start_time == snap2.start_time:
        return 0
    return 1

snapshots.sort(key=date_compare)
delta = len(snapshots) - keep
for i in range(delta):
    print ('Deleting snapshot ') + snapshots[i].description
    snapshots[i].delete()
</code></pre>
<p>When using sort to order the snapshots I am calling a function to compare dates to work out which is the newest and oldest snapshots.  When snapshots.sort(key=date_compare) runs I get the following error:</p>
<pre><code>    snapshots.sort(key=date_compare)
TypeError: date_compare() missing 1 required positional argument: 'snap2'
</code></pre>
<p>Pretty sure I am doing something very basic wrong but would really appreciate some help to get this working.  Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>your function <code>date_compare</code> takes two arguments, <code>def date_compare(snap1, snap2)</code> -- but the sort function will only ever pass one arg to the function provided to <code>key</code> -- not two items.  The <code>key</code> keyword is used to tell sort on which field to compare within a object; it's not used to actually compare two different objects.  You want to use the <code>cmp</code> keyword to pass a custom compare function.  Pretty sure you just mean to use the <code>cmp</code> keyword instead of <code>key</code>. </p>
<p>See this for more: </p>
<ul>
<li>python2: <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow">https://docs.python.org/2/library/functions.html#sorted</a></li>
<li>python3: <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow">https://docs.python.org/3/library/functions.html#sorted</a></li>
</ul>
<p>To understand the how <code>key</code> function should work, let's take a simpler example to see how this works.  Let's say I have a list of tuples:</p>
<pre><code>&gt;&gt;&gt; my_data = [(0, 'Z',), (1, 'Y',), (2, 'W')]
</code></pre>
<p>If I just sort this data I get:</p>
<pre><code>&gt;&gt;&gt; sorted(my_data)
[(0, 'Z'), (1, 'Y'), (2, 'W')]
</code></pre>
<p>However, if I want to sort on the second item of the tuple, I can write a simple function like this:</p>
<pre><code>&gt;&gt;&gt; def get_second(item):
...    return item[1]
&gt;&gt;&gt;
&gt;&gt;&gt; sorted(my_data, key=get_second)
[(2, 'W'), (1, 'Y'), (0, 'Z')]
</code></pre>
<p>So now it's sorting on the second item.  Note, often a simple lambda function is used to accomplish things like this: </p>
<pre><code>&gt;&gt;&gt; sorted(my_data, key=lambda item: item[1])
[(2, 'W'), (1, 'Y'), (0, 'Z')]
</code></pre>
<p>which saves you having to define a simple function like this before hand. </p>
<p>To use the <code>cmp</code> keyword to accomplish the same sorting it works like this:</p>
<pre><code>&gt;&gt;&gt; def compare(left, right):
...     if left[1] &lt; right[1]:
...         return -1
...     elif left[1] == right[1]:
...         return 0
...     else:
...         return 1
&gt;&gt;&gt; sorted(my_data, cmp=compare) 
[(2, 'W'), (1, 'Y'), (0, 'Z')]
</code></pre>
<p>Last, just note, <code>sorted(seq)</code> is the same as <code>seq.sort()</code> -- takes the same args, kwargs, etc.  Just <code>sorted</code> is a copy whereas <code>seq.sort()</code> is an in-place, destructive operation. </p>
</div>
<span class="comment-copy">Thanks I actually worked around this using a function to convert cmp to key by doing this:    from functools import cmp_to_key                                   snapshots.sort(key=cmp_to_key(date_compare))                                         this worked but based on what you mentioned above I could just replace key= with cmp= and that would achieve the same result??</span>
<span class="comment-copy">I think just changing <code>key</code> to <code>cmp</code> is more standard, straight forward.  Can you upvote and accept my answer?</span>
<span class="comment-copy">no problems, answer accepted, only just created my account so my rep doesnt allow me to vote yet.  Thanks!!</span>
