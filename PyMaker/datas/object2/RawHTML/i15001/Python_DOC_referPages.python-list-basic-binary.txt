<div class="post-text" itemprop="text">
<p>I'm trying to teach myself python and I'm using a online course and I'm a bit stuck on a small thing at the moment.</p>
<p>I'm using python 3.4.0. </p>
<p>I'm meant to be creating a list containing 16 binary strings from 0000 to 1111. So far I've done this, but it doesn't work:</p>
<pre><code>list[0000,0001,0010,0011,0100,0101,0110,0111,1000,1001,1010,1011,1100,1101,1110,1111]
print list
</code></pre>
<p>Can any of you correct the code please? </p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>How do the binary numbers have to be formatted? If it's just standard python binary strings using <code>bin</code> then:</p>
<pre><code>list = [bin(x) for x in range(16)]
print(list)
</code></pre>
<p>should be enough</p>
<p>If you need to format it like 0001 etc. then:</p>
<pre><code>list = ["{0:04b}".format(x) for x in range(16)]
print(list)
</code></pre>
<p>A couple of notes: you were missing an '=' operator in the first line of your example and in Python 3, <code>print</code> is now a function so its arguments need parenthesis.</p>
<p>In addition, you shouldn't use <code>list</code> as a variable name since it is a built in function.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's three problems:</p>
<ul>
<li>On Python 3 the print command requires parenthesis.</li>
<li>Your list is not stored in any variable for reference</li>
<li>The values in your list need to be strings. They're currently numbers</li>
</ul>
<p>Change the program to</p>
<pre><code>my_list =["0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"]
print(my_list) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answer already nicely explained what's wrong with your code. If you want to improve it more, and at the same time learn about some more advanced Python features, you could try something like this:</p>
<pre><code>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; lst = ["{:0{}b}".format(x, n) for x in range(2**n)]
&gt;&gt;&gt; print(lst)
['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', 
 '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111']
</code></pre>
<p>This uses a <a href="https://www.python.org/dev/peps/pep-0202/" rel="nofollow">list comprehension</a> to construct the list from the numbers up to <em>2<sup>n</sup></em>, <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow">formatting</a> each number to its binary representation, padded with zeros to a total length of <em>n</em> digits.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just building on Magnus and tobias's answers, here's the way I'd prefer to do it for readability:</p>
<pre><code>binaryList = [format( x, "b" ).zfill( 4) for x in range( 16 )]
print( binaryList )
</code></pre>
<p><code>format( number, "b" )</code> will turn a number into it's binary version, and <code>.zfill( 4 )</code> will add zeroes to the start of a number to make it the correct size.</p>
<p>Also, just in case you'd want to adjust the length of the string, you could do it like this, though be careful of high numbers since there's over 65k combinations for length 16:</p>
<pre><code>lengthOfBinary = 8
binaryList = [format( x, "b" ).zfill( lengthOfBinary ) for x in range( 2**lengthOfBinary )]
print( binaryList )
</code></pre>
</div>
<span class="comment-copy">Apart from what is pointed out in the answers, numbers cannot start with a leading 0 in python 3</span>
<span class="comment-copy">cheers mate, switched to that and it works perfectly now.</span>
