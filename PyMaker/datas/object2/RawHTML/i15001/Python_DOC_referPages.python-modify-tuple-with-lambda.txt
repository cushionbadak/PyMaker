<div class="post-text" itemprop="text">
<p>I have a tuple that looks like the following:</p>
<pre><code>(((1, 1), False), ((1, top), False), ((right, 1), False), ((right, top), False))
</code></pre>
<p>So the tuple has 4 tuples in it, each of them storing a coordinate(another tuple) and a bool.</p>
<p><em>(I do not use dict or list because I need this to be hashable)</em></p>
<p>Is there a smart way to change the bool to true for a given coordinate? </p>
<p>So what I want to express in a one liner is this:</p>
<p><strong>In state set pair[1] to True where pair[0] = (givenX, givenY)</strong></p>
<p>Is there a smart way to do this in python?</p>
<p><strong>Update:</strong></p>
<p>Thanks for all the answers. Here is what I did in the end:</p>
<pre><code>state = dict(state)

if (givenX, givenY) in state.keys():
    state[(givenX, givenY)] = True

state = tuple(state.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>bool</code>s are immutable (they're plain integers after all), you'll have to reconstruct your tuple to modify them:</p>
<pre><code>tuple(x if x[0] != (givenX, givenY) else (x[0], True) for x in your_tuple)
</code></pre>
<p>Although I think the easiest way is to use <code>dict</code> and convert it to <code>tuple</code> after making the required modifications:</p>
<pre><code>In [23]: d = {(1, 2): False}

In [24]: d[1, 2] = True

In [25]: tuple(d.items())
Out[25]: (((1, 2), True),)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you're getting to the point where it would be a good idea to encapsulate your data in a set of classes.</p>
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>collections.namedtuple</code></a> as the base for your classes, which will create immutable objects for which it is easy to create a new instance, with one or more different values. You can even subclass the namedtuples you create and add your own methods which will help with easily replacing values in the object whilst keeping code terse and readable eg.</p>
<pre><code>from collections import namedtuple

right = "right"
top = "top"
tuple_data = (((1, 1), False), ((1, top), False), ((right, 1), False), ((right, top), False))

# create a subclass of tuple whose name is the first argument, and the second argument 
# is space separated fields which are aliases for accessing the class as a tuple.
# eg. Point(1, 2).x == Point(1, 2)[0]
Point = namedtuple("Point", "x y")
_PointValueBase = namedtuple("PointValue", "point value")
_RectangleBase = namedtuple("Rectangle", "leftbottom lefttop rightbottom righttop")

class PointValue(_PointValueBase):
    def replace_if_point_equal(self, point, value):
        if self.point == point:
            return self._replace(value=value)
        return self

class Rectangle(_RectangleBase):
    def replace(self, point, value):
        return Rectangle._make(pv.replace_if_point_equal(point, value) for pv in self)

# convert tuple_data to a Rectangle
rect = Rectangle(*(PointValue(Point(*p), v) for p, v in tuple_data))
print(rect) # nice textual representation
assert eval(str(rect)) == rect # which is also machine readable
assert isinstance(rect, tuple) # is a subclass of tuple
assert hash(tuple_data) == hash(rect) # so its hash is the same

given_point = Point(x=right, y=top)
new_rect = rect.replace(given_point, value=True)
print(new_rect)
assert new_rect.righttop.value is True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Obviously, you cannot modify the tuple in-place, but you can create a new one with the generator expressions:</p>
<pre><code>given = (givenX, givenY)
result = tuple((p, p==given) for p, _ in original_tuple)
</code></pre>
<p>If you already have some values set to <code>True</code> and want to keep them like that:</p>
<pre><code>result = tuple((p1, p2 or p1==given) for p1, p2 in original_tuple)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes you can do this with a lambda function.</p>
<pre><code>right = 5 # dummy value
top = 7 # dummy value
search = (1,7) # needle coordinates

tups = (((1, 1), False), ((1, top), False), ((right, 1), False), ((right, top), False))

print map(lambda x: (x[0], not x[1]) if x[0]==search else (x[0], x[1]), tups)
# [((1, 1), False), ((1, 7), True), ((5, 1), False), ((5, 7), False)]
</code></pre>
<p>However this will result in a list of tuples so you need to convert it to a tuple again </p>
<pre><code>print tuple(map(lambda x: (x[0], not x[1]) if x[0]==search else (x[0], x[1]), tups))
# (((1, 1), False), ((1, 7), True), ((5, 1), False), ((5, 7), False))
</code></pre>
</div>
<span class="comment-copy">What do you mean by <code>In state set pair[1] to True where pair[0] = (givenX, givenY)</code> ?</span>
<span class="comment-copy">@AvinashRaj That sounds pretty clear to me. Set the tuple's value at index 1 (<code>pair[1]</code>) to be <code>True</code> if the value at index 0 (<code>pair[0]</code>) is <code>(givenX, givenY)</code></span>
<span class="comment-copy">@MarkusMeskanen exactly, thank you</span>
<span class="comment-copy">You may want to check out the <a href="https://github.com/ingolemo/python-lenses" rel="nofollow noreferrer">lenses library</a>.</span>
<span class="comment-copy">while this answer is probably the best solution it does not meet the question of the OP. He was asking to do this with lambda so I don't really understand why he accepted this answer. Also this answer only works to set a boolean from false to true, not the other way around.</span>
<span class="comment-copy">@kasperTaeymans I thought they made it quite clear - "set pair[1] to <b><i>True</i></b>"</span>
