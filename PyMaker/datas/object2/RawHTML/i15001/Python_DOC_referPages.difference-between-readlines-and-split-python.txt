<div class="post-text" itemprop="text">
<p>imagine we have a <code>file = open("filetext.txt", 'r')</code></p>
<p>what is the difference between the split() method and the readlines() method 
It seems that both split each line and put it as a string in a list. 
so what makes them different ?</p>
<pre><code>for line in file:
    values = line.split()     #break each line into a list

file.readlines()  #return a list of strings each represent a single line in the file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>readlines</code> splits the entire file into lines and is equivalent to <code>file.read().split('\n')</code>, but is a bit more efficient. Your example,</p>
<pre><code>for line in file:
    values = line.split()
</code></pre>
<p>splits each line by its spaces, building a list of words in the line. <code>value</code> is overwritten on each iteration so unless you save values somewhere, only parts of the file are in-memory at a single time.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the main difference:</p>
<p>A <a href="https://docs.python.org/2/library/stdtypes.html#file-objects" rel="nofollow"><code>file</code></a> object has <a href="https://docs.python.org/2/library/stdtypes.html#file.readlines" rel="nofollow"><code>readlines</code></a> but not <code>split</code>:</p>
<pre><code>&gt;&gt;&gt; print hasattr(file, 'split')
False
&gt;&gt;&gt; print hasattr(file, 'readlines')
True
</code></pre>
<p>A <a href="https://docs.python.org/2/library/stdtypes.html#typesseq" rel="nofollow"><code>str</code></a> object has <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>split</code></a> but not <code>readlines</code>:</p>
<pre><code>&gt;&gt;&gt; hasattr("somestring", 'split')
True
&gt;&gt;&gt; hasattr("somestring", 'readlines')
False
</code></pre>
<p>And to answer your question, one is operating on a string object and one is operating on a file object.</p>
<p>They don't do the same thing since one returns a list of lines when operating on a file and one returns a split line when operating on a string.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>readlines</code> does platform agnostic line splitting and <code>split</code> does generic splitting.</p>
<p>As an example:</p>
<pre><code>In [1]: from StringIO import StringIO

In [2]: StringIO('test:test:test').readlines()
Out[2]: ['test:test:test']

In [3]: StringIO('test:test:test').read().split(':')
Out[3]: ['test', 'test', 'test']
</code></pre>
</div>
<span class="comment-copy">Also, <a href="https://docs.python.org/3/distutils/apiref.html?highlight=readlines#distutils.text_file.TextFile.readlines" rel="nofollow noreferrer"><code>readlines</code></a> doesn't take arguments and can only break on newlines. On the other hand, <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> can take arguments and can split on <i>any</i> character you tell it to split upon. Furthermore, <code>split</code> doesn't have to split on <i>all</i> choices but can be limited.</span>
