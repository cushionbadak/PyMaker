<div class="post-text" itemprop="text">
<p>I came across a bug in production, even though it should have been tested by the unit tests.</p>
<pre><code>class Stage2TaskView(MethodView):
    def post(self):
        json_data = json.loads(request.data)
        news_url_string = json_data['news_url_string']
        OpenCalais().generate_tags_for_news(news_url_string) // ?
        return "", 201
</code></pre>
<p>This used to be a static: </p>
<pre><code>OpenCalais.generate_tags_for_news(news_url_string)
</code></pre>
<p>But then I changed the method and removed the static decorator.
But I forgot to change that line to </p>
<pre><code>OpenCalais().generate_tags_for_news(news_url_string)
</code></pre>
<p>The test doesn't see it though.  How can I test this in future?</p>
<pre><code>@mock.patch('news.opencalais.opencalais.OpenCalais.generate_tags_for_news')
def test_url_stage2_points_to_correct_class(self, mo):
    rv = self.client.post('/worker/stage-2', data=json.dumps({'news_url_string': 'x'}))
    self.assertEqual(rv.status_code, 201)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">Autospeccing</a> is your fried! Use <code>autospec=True</code> in patch decorator will check the complete signature:</p>
<pre><code>class A():
    def no_static_method(self):
        pass

with patch(__name__+'.A.no_static_method', autospec=True):
    A.no_static_method()
</code></pre>
<p>will raise an exception:</p>
<pre><code>Traceback (most recent call last):
  File "/home/damico/PycharmProjects/mock_import/autospec.py", line 9, in &lt;module&gt;
    A.no_static_method()
TypeError: unbound method no_static_method() must be called with A instance as first argument (got nothing instead)
</code></pre>
</div>
<span class="comment-copy">Ah thats it. You have helped me on so many mock questions. Can't thank you enough :)</span>
