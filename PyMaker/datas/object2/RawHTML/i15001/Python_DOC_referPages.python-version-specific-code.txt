<div class="post-text" itemprop="text">
<p>I am using Python 3.4.1 and am wondering how I can make my code backwards compatible with python 3.3.*</p>
<p>I am wondering if I could use the following structure;</p>
<pre><code>import sys

ver = sys.version_info[0]

if ver == 341* 

INSERT CODE HERE

elif ver = 3.3

more code
</code></pre>
<p>*I believe that is how you declare python 3.4.1 (if it isn't please correct me.)</p>
<p>The reason I want to do this is because some Pygame methods have had their name changed between versions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the mebmers of  <a href="https://docs.python.org/3/library/sys.html#sys.version_info" rel="nofollow"><code>sys.version_info</code></a> if you want to base your code on the Python version:</p>
<pre><code>sys.version_info.major
sys.version_info.minor
sys.version_info.micro
</code></pre>
<p>Use these members like this:</p>
<pre><code>if sys.version_info.major == 3 and sys.version_info.minor == 4:
    print("I like Python 3.4")
</code></pre>
<p>pygame has <a href="http://www.pygame.org/docs/ref/pygame.html#module-pygame.version" rel="nofollow">a similar structure</a>:</p>
<pre><code>pygame.version.vernum
</code></pre>
<blockquote>
<p>tupled integers of the version: vernum = (1, 5, 3)</p>
</blockquote>
</div>
<span class="comment-copy">If you're doing this because pygame's API changed, I think you should check pygame's version, not python's</span>
