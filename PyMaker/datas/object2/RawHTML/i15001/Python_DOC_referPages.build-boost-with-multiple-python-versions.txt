<div class="post-text" itemprop="text">
<p>I use several versions of Python on my computer : <code>2.6.6</code>, <code>2.7.6</code> and <code>2.7.9</code>. When I compile Boost with boost-python, I have to give the Python to use in argument. If I want compatibility, <strong>have I to compile Boost for each Python version ?</strong> (it's quite huge !) Or is there a way to use only one build of Boost with several python versions ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The official Python <a href="https://docs.python.org/devguide/devcycle.html">development cycle</a> does not describe the stability of the application binary interface (ABI) between releases.  For releases before Python 3.2, there is no guarantee for ABI compatibility.  For 3.2 and beyond, <a href="https://www.python.org/dev/peps/pep-0384/">PEP 384</a> defines the <a href="https://docs.python.org/3/c-api/stable.html">stable ABI</a> where a subset of the Python/C API is guaranteed to maintain ABI compatibility.  To use this subset, <code>Py_LIMITED_API</code> needs to be defined when building Boost.Python and extension modules.  </p>
<p>While it primarily depends on the Python/C API types and functionality being used directly in user code or through Boost.Python, in general:</p>
<ul>
<li>for major-level releases, such as Python 2 and Python 3, Boost.Python and user code will need to be recompiled</li>
<li>for minor-level releases, such as Python 2.6 and Python 2.7,  Boost.Python and user code may need to be recompiled</li>
<li>for micro-level releases, Boost.Python and user code rarely needs recompiled</li>
</ul>
<p>In all cases where Boost.Python needs to be recompiled, no other Boost library should need to be recompiled.  When building multiple versions of Boost.Python, verify a <i>clean</i> build occurs.  Without a clean build, Boost.Python may build, but fail to properly link.  For example, the <code>PyClass_Type</code> symbol should not be referenced in Python 3 Boost.Python builds, but without a clean build, previous build artifacts may populate the library:</p>
<pre class="lang-bash prettyprint-override"><code>$ ./bootstrap.sh --with-python=/usr/bin/python2
...
Detecting Python version... 2.7
$ ./b2 --with-python --buildid=2 # produces libboost_python-2.so
$ ./bootstrap.sh --with-python=/usr/bin/python3 --with-python-root=/usr
...
Detecting Python version... 3.3
$ ./b2 --with-python --buildid=3noclean # produces libboost_python-3noclean.so
$ ./b2 --with-python --clean
$ ./b2 --with-python --buildid=3 # produces libboost_python-3.so

$ nm -D stage/lib/libboost_python-2.so | grep PyClass_Type
                 U PyClass_Type
$ nm -D stage/lib/libboost_python-3noclean.so | grep PyClass_Type
                 U PyClass_Type
$ nm -D stage/lib/libboost_python-3.so | grep PyClass_Type
</code></pre>
<p>Note that even though the <code>3noclean</code> build was built against Python 3, the previous build that was using Python 2 had artifacts that polluted the <code>3noclean</code> library.  Also, be aware that Boost.Python and user code may need recompiled to match the Python's CPU architecture and UCS-2 or UCS-4 unicode configurations.</p>
</div>
<span class="comment-copy">Compiling boost for python 2.7.9 <b>should</b> work for all versions of python as far back as 2.5.  Although, it will not work for python 3.</span>
<span class="comment-copy">Thanks for this answer !</span>
