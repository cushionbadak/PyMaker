<div class="post-text" itemprop="text">
<p>I have two finite sets X and Y, and I want to generate a list containing all of the functions from X to Y (that is, all mappings from X to Y, where each mapping is represented as a dictionary whose keys are elements of X, and whose values are elements of Y; note that a mapping from X to Y must have a key for every element of X). For example, if X = {1,2} and Y = {'a','b'}, I want to obtain the following list of dictionaries.</p>
<pre><code>[{1:'a',2:'a'},{1:'a',2:'b'},{1:'b',2:'a'},{1:'b',2:'b'}]
</code></pre>
<p>I think the following code satisfies my needs, but I am trying to get better at being Pythonic, so I was wondering if there is a one-liner that does not need the recursive helper function.</p>
<pre><code>def ntuples(A,n):
    if n == 0:
        return {()}
    else:
        return {x + (a,) for x in ntuples(A,n-1) for a in A}
def X_to_Y(X,Y):
    return [{x:y[i] for (i,x) in enumerate(X)} for y in ntuples(Y,len(X))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Chasing one-liners is the <em>opposite</em> of pythonic, but avoiding recursion is often a good idea. In this case, we can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> to take care of the hard part, and then wrap that in a listcomp:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; X = {1,2}
&gt;&gt;&gt; Y = {'a','b'}
&gt;&gt;&gt; [dict(zip(X,y)) for y in product(Y,repeat=len(X))]
[{1: 'a', 2: 'a'}, {1: 'b', 2: 'a'}, {1: 'a', 2: 'b'}, {1: 'b', 2: 'b'}]
</code></pre>
<p>(I'm assuming you don't care too much about whether you see <code>{1: 'b', 2: 'a'}</code> or <code>{1: 'a', 2: 'b'}</code> first in the list.)</p>
<p>And remember that if there's no need to materialize the list at all once, you could replace <code>[</code> and <code>]</code> with <code>(</code> and <code>)</code> to use a generator expression instead of a listcomp, which you could iterate over.</p>
</div>
<span class="comment-copy">I think some people may not know what you mean by "all functions".  I think you should say all possible mappings from A into B.</span>
<span class="comment-copy">I updated the question to incorporate your suggestion. I am unconvinced that this question merited a hold for being unclear, though. I understand that my use of the term "function" is more appropriate for a math forum than a programming forum. However, the original question included a concrete example, and code that (somewhat inefficiently) solves the problem. Additionally, there was a correct answer within five minutes of the question being posted, so the meaning was evidently conveyed to at least one person with no confusion.</span>
<span class="comment-copy">I did not vote to close your question.  I didn't think it was unclear at all, I was just guessing at what the person who voted to close it wasn't understanding.</span>
