<div class="post-text" itemprop="text">
<p>I was trying to define a simple function to find the range between two floats, and this is what I got:</p>
<pre><code>def item(number, terminator, step):
    while number &lt; terminator:
        return (number)
        number += step

item(1.00, 1.12, 0.01)
</code></pre>
<p>The console doesn't print any errors, it doesn't print <code>None</code>, it just doesn't do anything. It runs the program and does nothing. I am very confused. What is wrong with my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two things wrong:</p>
<ol>
<li><p>You are not printing anything. The <code>item()</code> function returns and you ignored the return value. The Python interactive interpreter echoes almost everything you do but a regular script requires you to explicitly print.</p></li>
<li><p>You are returning the first value of the range. <code>return</code> <em>ends</em> a function.</p></li>
</ol>
<p>You could build a list of values first, and return that, then print the result:</p>
<pre><code>def item(number, terminator, step):
    items = []
    while number &lt; terminator:
        items.append(number)
        number += step
    return items

print(item(1.00, 1.12, 0.01))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def item(number, terminator, step):
...     items = []
...     while number &lt; terminator:
...         items.append(number)
...         number += step
...     return items
... 
&gt;&gt;&gt; print(item(1.00, 1.12, 0.01))
[1.0, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.1, 1.11]
</code></pre>
<p>Alternatively, use <code>yield</code> instead of <code>return</code> to turn your function into a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow">generator</a>, and loop over the results:</p>
<pre><code>def item(number, terminator, step):
    while number &lt; terminator:
        yield number
        number += step

for value in item(1.00, 1.12, 0.01):
    print(value)
</code></pre>
<p>which produces:</p>
<pre><code>&gt;&gt;&gt; def item(number, terminator, step):
...     while number &lt; terminator:
...         yield number
...         number += step
... 
&gt;&gt;&gt; for value in item(1.00, 1.12, 0.01):
...     print(value)
... 
1.0
1.01
1.02
1.03
1.04
1.05
1.06
1.07
1.08
1.09
1.1
1.11
</code></pre>
</div>
