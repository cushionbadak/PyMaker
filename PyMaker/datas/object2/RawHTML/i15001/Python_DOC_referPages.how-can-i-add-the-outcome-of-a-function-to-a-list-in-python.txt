<div class="post-text" itemprop="text">
<pre><code>def b():
    a = int(input("Look up to: ")) // set the range to scan for primes
    for num in range(0, a):
        if prime(num) == True:
            print(num)
            print("adding to list")
            return num
            list = [num]
            list.append(num)

        else:
            print(num, "is not a prime")
</code></pre>
<p>So how can I append the outcome to "list" for each new prime?</p>
<p>Forgot to mention the function to check if num is prime:</p>
<pre><code>def prime(num):
         for j in range (2, num):
               if (num % j) == 0 :
                    return False
         return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Few points:</p>
<ul>
<li><p>Once you <code>return</code> is executed, the value it is applied to is returned to whoever called the function and the code after return never executes.</p></li>
<li><p>You're <a href="http://en.wikipedia.org/wiki/Variable_shadowing" rel="nofollow">shadowing</a> the built-in function <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow"><code>list()</code></a> which returns a new list by calling a local variable <code>list</code>.</p></li>
<li><p>The list is constantly <strong>reconstructed</strong> by calling <code>[num]</code> which is a shorthand for creating a <strong>new</strong> list containing only <code>num</code>. What you want to do is <strong>update</strong> it using <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow"><code>append</code></a>.</p></li>
</ul>
<p>Fixing the code, it may look something like:</p>
<pre><code>def get_primes():
    a = int(input("Look up to: "))

    # 'primes' is a more suitable name for a list of primes
    # we're only creating the list *once*, and we're not shadowing 'list'
    primes = list()

    for candidate in range(0, a):
        if prime(candidate) == True:
            print(candidate)
            print("adding to list")
            primes.append(candidate)

        else:
            print(num, "is not a prime")

    # use return to return a result
    return primes
</code></pre>
<p>You can test this by calling <code>get_primes()</code>.</p>
<p><strong>Tip:</strong> you could use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> to do the same thing <code>get_primes</code> does:</p>
<pre><code>a = int(input("Look up to: "))
print(filter(prime, range(0, a)))
</code></pre>
<hr/>
<p>A minor note about the difference between <code>list</code> and <code>[]</code> is that you can change <code>list</code>'s behaviour, which gives finer control, while <code>[]</code>'s generated code calls <code>BUILD_LIST</code> directly (harder to change):</p>
<pre><code>&gt;&gt;&gt; dis.dis(lambda: [])
  1           0 BUILD_LIST               0
              3 RETURN_VALUE        

&gt;&gt;&gt; dis.dis(lambda: list())
  1           0 LOAD_GLOBAL              0 (list)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE  
</code></pre>
<p>It really does not matter in this case, but @Thrustmaster suggested using <code>[]</code> in the comments since it some may see it as cleaner.</p>
</div>
<div class="post-text" itemprop="text">
<p>Oh, lot of minor syntax errors. Let me <code>list</code> them down..</p>
<ol>
<li>Python comments do not start with <code>//</code>, but with <code>#</code>. Ref. code line no: 2</li>
<li>list is a keyword in python, you should not use that in your variable declaration. Line ref: 8.</li>
<li>After you do a return, the code after that line will not be executed. Line Ref: 7.</li>
<li>You should not initialize list inside the <code>for</code> loop. It is getting initialized in every iteration.</li>
<li>Instead of <code>if prim(num) == True:</code>, you can simply write <code>if prim(num):</code>.</li>
</ol>
<p>That said, the correct code should look as follows:</p>
<pre><code>def b():
    a = int(input("Look up to: ")) # set the range to scan for primes
    primes = [] #Your list
    for num in range(0, a):
        if prime(num):
            print(num)
            print("adding to list")
            primes.append(num)

        else:
            print(num, "is not a prime")

    return primes
</code></pre>
<p>Hope it helps .. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code looks to be a mix of C and Python (don't use // as comments).
I assume your program is looking for prime numbers up to n. Here is how one might go about implementing this:</p>
<pre><code>import math
def is_prime(n):
    if n % 2 == 0 and n &gt; 2: 
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def find_primes(a, b):
    primes = []
    for i in range(a, b):
        if is_prime(i):
            primes.append(i)
    return primes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're almost there. The strange thing about your code is where you've placed the <code>return</code> statement. Try this:</p>
<pre><code>def b():
    primesList = []
    a = int(input("Look up to: "))
    for num in range(0, a):
        if prime(num) == True:
            print(num)
            print("adding to list")
            primesList.append(num)

        else:
            print(num, "is not a prime")

     return primesList
</code></pre>
<p>Notice that your original return statement would have ended your function <em>early</em>, in fact even before your list would have had the chance to append <em>any prime number at all</em>. The other important point here is that you should never shadow a built-in type (<code>list</code> in this case), or other built-in functions (like <code>map</code>, <code>sorted</code>, etc.).</p>
<p>It's also enough to simply initialize the <code>primesList</code> once and append the <code>num</code> integers inside the <code>for loop</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are good and address the main issue that you had with rebinding your list variable and failing to return the primes list from function <code>b()</code>.</p>
<p>I think it's worth mentioning that a list comprehension can be used to succinctly code the prime list generation:</p>
<pre><code>def prime(num):
         for j in range (2, num):
               if (num % j) == 0 :
                    return False
         return True

def get_primes(low, high):
    return [n for n in range(low, high+1) if prime(n)]

&gt;&gt;&gt; a = input("Look up to: ")
11
&gt;&gt;&gt; get_primes(0, a)
[0, 1, 2, 3, 5, 7, 11]
&gt;&gt;&gt; get_primes(5, a)
[5, 7, 11]
</code></pre>
<p>Notes:</p>
<ol>
<li>Passing the "up to" value into the function is more flexible than
prompting for it in the function.</li>
<li>"Up to" should be inclusive, e.g. get_primes(0, 11) should include 11 in the result. Therefore you need to add one to the upper value when calling <code>range()</code>.</li>
<li>Passing <code>low</code> and <code>high</code> allows you to generate primes for arbitrary ranges.</li>
<li>You can wrap the list comprehension with <code>set()</code> to have the result returned as a set.</li>
</ol>
</div>
<span class="comment-copy">Allternative: <code>primes = []</code> will do just fine.</span>
<span class="comment-copy">I wanted <code>list</code> to be included in the code because of the second point :)</span>
<span class="comment-copy">Yes, I understand that. The comment was more for the OP than you. <code>primes = list()</code> sort of hurts my eyes.</span>
<span class="comment-copy">thank you Reut!!! Thinking of using dictionary, I suppose the same applies, right? After all primes are unique. thanks again!</span>
<span class="comment-copy">@DimitriosKokkotis You could use a set: <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#sets</a></span>
<span class="comment-copy">While I appreciate the <code>list</code> pun and the fact that your numbered points are <i>solid</i>, the correct code does not look correct at all... Where is the function indentation and why is the return statement inside the for loop?</span>
<span class="comment-copy">indentation was a copy-paste mistake, and return was mine.. note to self: never answer while half asleep.. editing now..</span>
<span class="comment-copy">Now there is <i>no</i> <code>return</code> statement in the function, which now returns <code>None</code>.</span>
<span class="comment-copy">thank you Billylegota, but I am not so advanced, cant figure out what is doing. It seems to run faster though :S, hope you are not messing with my PC :P</span>
<span class="comment-copy">thank you Eithos, got the point.</span>
