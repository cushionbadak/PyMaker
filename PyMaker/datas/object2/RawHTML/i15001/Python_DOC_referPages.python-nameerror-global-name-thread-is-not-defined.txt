<div class="post-text" itemprop="text">
<p>I made file called thread.py and if I want to import it, it doesn't work. When I use a filename like cheese.py it works fine</p>
<pre><code>import json
from thread import Thread
class Board:
        name = ""
        shortcode = ""
        threads = []
        url = ""
        api_url = ""
        json = ""

        def __init__(self, board, api_url, json):
                self.shortcode = board
                self.api_url = api_url
                self.json = json
                self.__getPosts()

        def __getPosts(self):
                i = 0
                for thread in self.json[0]['threads']:
                        thread = Thread()
                        self.threads[i] = thread
                        i+=1
</code></pre>
<p>thread.py</p>
<pre><code>class Thread:
        def __init__(self):
                i = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A built-in module with the name <a href="https://docs.python.org/2/library/thread.html" rel="nofollow"><code>thread</code></a> already exists.</p>
<pre><code>&gt;&gt;&gt; import thread
&gt;&gt;&gt; thread
&lt;module 'thread' (built-in)&gt;
</code></pre>
<p>When you are trying to import using <code>from thread import Thread</code> it is trying to search for the attribute named <code>Thread</code> which does not exists in the built-in <a href="https://docs.python.org/2/library/thread.html" rel="nofollow"><code>thread</code></a> module.</p>
<pre><code>&gt;&gt;&gt; hasattr(thread, 'Thread')
False
</code></pre>
<p>When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable <a href="https://docs.python.org/2/library/sys.html#sys.path" rel="nofollow"><code>sys.path</code></a>.</p>
<p><a href="https://docs.python.org/2/library/sys.html#sys.path" rel="nofollow"><code>sys.path</code></a> is initialized from these locations:</p>
<ul>
<li><p>The directory containing the input script (or the current directory).</p></li>
<li><p><a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow">PYTHONPATH</a> (a list of directory names, with the same syntax as the shell variable PATH).</p></li>
<li><p>The installation-dependent default.</p></li>
</ul>
<p>For more <a href="https://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="nofollow">here</a></p>
<p>It is recommended that you use a user defined module name that is different than the built-in module name.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 has a  built in module <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">Threading</a> that has a class called <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer">Thread</a></p>
<p>which is causing the conflict, so consider renaming your file to something else.</p>
</div>
<span class="comment-copy">changing thread.py filename will help</span>
<span class="comment-copy">Is it possible to override this so I don't need to rename my class?</span>
<span class="comment-copy">You don't need to rename your class, you have to rename your module <code>thread.py</code> to something like <code>mythread.py</code>  or something relevant to you .</span>
