<div class="post-text" itemprop="text">
<p>Command framed to identify if Xcode is running on Mac: <code>cmd = "ps -ax | grep -v grep | grep Xcode"</code></p>
<p>If Xcode is not running, then above command works well with <code>Popen</code> method of <code>subprocess</code> module, but raises a <code>CalledProcessError</code> with <code>check_output</code> method. I tried to inspect the <code>stderr</code> through the following code, but failed to get appropriate information to understand the reason.</p>
<pre><code>from subprocess import check_output, STDOUT, CalledProcessError

psCmd = "ps -ax | grep -v grep | grep Xcode"
o = None
try:
    o = check_output(psCmd, stderr=STDOUT, shell=True)
except CalledProcessError as ex:
    print 'Error:', ex, o
</code></pre>
<p>Exception message is as follows:</p>
<p><code>Error: Command 'ps -ax | grep -v grep | grep Xcode' returned non-zero exit status 1 None</code></p>
<p>Question: Why the above command works with Popen, but fails with check_output ?</p>
<p>Note: Command works well with both approach, if Xcode is running.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>check_output()</code> works as expected. Here's its simplified implementation in terms of <code>Popen()</code>:</p>
<pre><code>def check_output(cmd):
    process = Popen(cmd, stdout=PIPE)
    output = process.communicate()[0]
    if process.returncode != 0:
        raise CalledProcessError(process.returncode, cmd, output=output)
    return output
</code></pre>
<p><code>grep</code> returns <code>1</code> if it hasn't found anything i.e., you should expect the exception if Xcode is not running.</p>
<p>Note: as the implementation shows, you can get the output even if the exception occurs:</p>
<pre><code>#!/usr/bin/env python
from subprocess import check_output, STDOUT, CalledProcessError

cmd = "ps -ax | grep -v grep | grep Xcode"
try:
    o = check_output(cmd, stderr=STDOUT, shell=True)
    returncode = 0
except CalledProcessError as ex:
    o = ex.output
    returncode = ex.returncode
    if returncode != 1: # some other error happened
        raise
</code></pre>
<p>You could probably use <code>pgrep -a Xcode</code> command instead (note: starts with <code>p</code>) or use <code>psutil</code> module for a portable code:</p>
<pre><code>#!/usr/bin/env python
import psutil # $ pip install psutil

print([p.as_dict() for p in psutil.process_iter() if 'Xcode' in p.name()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the Python docs: "If the return code was non-zero it raises a CalledProcessError.". That's what happens to you when Xcode isn't running; the final <code>grep Xcode</code> exits with a non-zero status because <code>grep</code> couldn't find the string <code>Xcode</code> that you're looking for. Hence, <code>check_output()</code> will raise the exception.</p>
<p>BTW, I found this on <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">the Python subprocess documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your grep command <code>grep Xcode</code> returns no result then the <code>returncode</code> of the command will be non-zero, that's why <code>check_output</code> is calling <code>CalledProcessError</code>, which is what you are seeing in the output of <code>print</code> command</p>
<p>To get the output of your command be it error or success use following piece of code:-</p>
<pre><code>#!/usr/bin/python
from subprocess import check_output, STDOUT, CalledProcessError

psCmd = "ps -aef | grep -v grep | grep Xcode"
o = None
o = check_output(psCmd+";exit 0", stderr=STDOUT, shell=True)
</code></pre>
<p>check_output will only show you the output of the command if it's return code is <code>0</code> else it calls an exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>The purpose of <code>check_output</code> is to make sure that the command you ran completed successfully.  It's <em>supposed</em> to fail if <code>grep Xcode</code> does not return success.</p>
<p>What you want would be a lot simpler with the searching in Python, anyway.</p>
<pre><code>output = check_output(['ps', '-ax'], shell=False)
if 'Xcode' in output:
    print('Xcode appears to be running')
</code></pre>
<p>This has the additional (very minor) benefit over the shell version that it actually fails if <code>ps</code> fails for some reason.  The shell would simply ignore the exit code of <code>ps</code> when it's not at the end of a pipeline.</p>
</div>
<span class="comment-copy">You're much better off doing the <code>grep</code> processing in Python itself anyway.</span>
<span class="comment-copy">Even if I process the output in python, I have to use <code>subprocess</code> module. So I think it's a good way to get all the work done at <code>bash</code> end.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/2940858/4279">Kill process by name in Python</a></span>
<span class="comment-copy">I understood now, why check_output behaves as it behaves. Checking for return code is cool. I'll use your idea with errno. Some <b>doubts</b>: <i>1.</i> Why do we have to init <code>returncode</code> in <code>try</code> block with value 0? <i>2</i>. Can't we compare <code>ex.returncode</code> directly with value 1 in <code>if</code> condition? Does it serve some purpose, which I have not understood yet.</span>
<span class="comment-copy"><code>returncode</code> is set inside try/except in order to 1. show you that it is always zero if <code>check_output()</code> hasn't raised an exception 2. both branches (with and without the exception) set both variables: you can use <code>o</code> and <code>returncode</code> after the code regardless of whether Xcode is running or not.</span>
<span class="comment-copy">I don't see so. If I run this command in terminal without Xcode launched and check the errno variable, it still hold the value 0. To check errno I used echo "$?".</span>
<span class="comment-copy">Ummm... when I try <code>ps -aef | grep -v grep | grep Xcode ; echo $?</code>, I get as output: <code>1</code></span>
<span class="comment-copy">@DeepakrajHR you mean even if Xcode is not launched your grep command is finding it? The Error message which you have displayed <code>Error: Command 'ps -ax | grep -v grep | grep Xcode' returned non-zero exit status 1 None</code> is the output of your python script because you have handled the exception in your code</span>
<span class="comment-copy">Terminal output when Xcode isn't running  <code>$ ps -ax | grep -v grep | grep Xcode $ echo "$?" 0 $</code>  Terminal output if Xcode is running <code>$ ps -ax | grep -v grep | grep Xcode 13784 ??         0:02.34 /Applications/Xcode.app/Contents/MacOS/Xcode $ echo "$?" 0 $</code>  So my point is, I don't think that error code 1 is coming from here in here. I'm missing something else.</span>
<span class="comment-copy">That should not matter, the quotes are harmless (and in fact good form, especially if you are not sure of quoting).</span>
<span class="comment-copy">Please see my comment on Karel Kubat's answer</span>
<span class="comment-copy">That's a nice idea as shown in <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">link</a>. But why I'm getting error code as 1 from python script and 0 from terminal. Anyway now I'm using Popen to solve the problem. But the question still remains :-(</span>
<span class="comment-copy">I got my answer. Now I'm using this way. But I'm wondering now, what if the command fails for some other unknown reason. I think that too will bypass because of <code>exit 0</code>. Is there a way to catch those exceptions.</span>
<span class="comment-copy">This is not a sane answer.  Don't use <code>check_output</code> if you don't want to check the result code from the command.</span>
<span class="comment-copy"><code>exit 0</code> is bad. It ignores errors. You can <a href="http://stackoverflow.com/a/28689969/4279">get the output even if an exception happens</a>.</span>
