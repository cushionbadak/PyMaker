<div class="post-text" itemprop="text">
<p>I want to convert a string, which contains a file path, to a raw string, so the '\' characters are not considered escapes. </p>
<pre><code>folderList = os.listdir(folderPath)
# folderList is a list of files, path = folderPath + (element of folderList)
</code></pre>
<p>So if I'm using something like this in Python 3, can I convert path to a raw string? I've tried using the encode method for strings, but that does not work. Also, I am not looking for solutions to replace the string '\' with '\'. I feel this process would take too long for how many paths I would have to process. So are there any simple conversions to convert path into a raw string?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes there is a simple solution to this,  you can try using <code>path = r'c:\Users'</code> or you can also use <code>path = 'c:\\Users'</code> whichever you feel like</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">Python 3 documentation</a>:</p>
<blockquote>
<p>Both string and bytes literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and treat backslashes as literal characters.</p>
</blockquote>
<p>So in your case, <code>path = r'c:\Users'</code> should suffice.</p>
<p>If the data is already stored in a variable then it's important to realise that it already is a raw string. The <code>\</code> character is used only to help you represent escaped characters in string literals. So;</p>
<pre><code>&gt;&gt;&gt; r'c:\Users' == 'c:\\Users'
True
</code></pre>
<p>From what you describe, therefore, you don't have anything to do.</p>
</div>
<span class="comment-copy"><code>path = r'c:\Users'</code> didn't work?</span>
<span class="comment-copy">Above comment should work: "Both string and bytes literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and treat backslashes as literal characters. As a result, in string literals, '\U' and '\u' escapes in raw strings are not treated specially. Given that Python 2.x’s raw unicode literals behave differently than Python 3.x’s the 'ur' syntax is not supported." from <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer">docs.python.org/3/reference/lexical_analysis.html</a></span>
<span class="comment-copy">I'm sorry I guess I made it unclear, that is not the answer I was looking for. I'm not defining the path myself I posted an example path. I want to convert the variable path to a raw string. I have a list of files that I'm going to be processing.</span>
<span class="comment-copy">@WorldDominator <i>" I'm not defining the path myself"</i>  Where and how is it being defined?</span>
<span class="comment-copy">You still haven't shown where the path is coming from. If you're reading it from a file or user input or something, none of this should be necessary. It should already work.</span>
