<div class="post-text" itemprop="text">
<p>Why do these two seemingly equivalent expressions evaluate differently?
This works:</p>
<pre><code>from random import uniform

def binominal_rv(n,p):
    z=[]
    counter=0
    for i in range(n):
        U=uniform(0,1)
        if  U &lt; p :                #true with probability p
            counter= counter + 1
    return counter
</code></pre>
<p>But this does not:</p>
<pre><code>from random import uniform

def binominal_rv(n,p):
    z=[]
    counter=0
    for i in range(n):
        U=uniform(0,1)
        if  U &lt; p== True :                #true with probability p
            counter= counter + 1
    return counter
</code></pre>
<p>Whats going on here??? I think that the two if's should be equivalent.    </p>
</div>
<div class="post-text" itemprop="text">
<p>It's due to how Python reads expressions.</p>
<p><code>U &lt; p == True</code> is read as <code>U &lt; p and p == True</code>. This is clearly not what we want.</p>
<p>As namit said, we can fix this using brackets: <code>(U &lt; p) == True</code>. Or just use <code>U &lt; p</code>, as in the original code.</p>
<hr/>
<p>If you want to learn more, the <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow">Python language reference</a> explains this feature in detail:</p>
<blockquote>
<p><strong>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>,</strong> except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>change <code>if  U &lt; p== True :</code>
to
<code>if  (U &lt; p)== True :</code></p>
<p>lets take an example:</p>
<pre><code>In [38]: 2 &lt; 4
Out[38]: True

In [39]: 2 &lt; 4 == True
Out[39]: False

In [40]: (2 &lt; 4) == True
Out[40]: True

In [41]: 4 == True
Out[41]: False

In [42]: 2 &lt; False
Out[42]: False

In [43]: 4 == True
Out[43]: False

In [44]: (4 == True) == 0
Out[44]: True
</code></pre>
</div>
<span class="comment-copy">If you're happy with an answer, please accept it (click the tick next to the post).</span>
<span class="comment-copy">Thanks!!! thanks to namit aswell.</span>
<span class="comment-copy">and <code>2 &lt; (4==True)</code> is False, because <code>0==(4==True)</code> is True: "The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed."</span>
