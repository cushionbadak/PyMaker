<div class="post-text" itemprop="text">
<p>I keep seeing functions and documentation like <a href="https://plot.ly/python/overview/#out%5B1%5D">this</a> and <a href="http://code.activestate.com/recipes/67671-a-function-to-unzip-simple-list-like-objects/">this</a> <em>(to name a few)</em> which operate on or refer to <em>list-like objects</em>.</p>
<p>I'm quite aware of what exactly an actual list is (<code>dir(list)</code>), and can deduce what (<em>often varying</em>) methods from a list are necessary in most references to a "list-like object", however the number of times I see it referenced has left me with the following question:</p>
<p><strong>Is there an official or common knowledge standard minimal interface for a "list-like" object?</strong>    Is it as simple as actualizing<code>__getitem__</code>, or is it agreed that additional things like <code>__len__</code> and <code>__setitem__</code>are required as well? </p>
<p>This may seem like semantics, but I can't help but think that if there does not exist a standard minimal interface requirement, various ideas of <em>"list-likeness"</em> could cause some issues/improper handling. Perhaps this is just a slight downside to Python's duck typing? </p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/library/collections.abc.html" rel="noreferrer"><code>collections.abc</code></a> module. Of the abstract base classes listed there, <code>list</code> in Python implements <code>Iterable</code>, <code>Container</code>, <code>Sized</code>, <code>Sequence</code> and <code>MutableSequence</code>. Now, of these, <code>Iterable</code>, <code>Sequence</code> and <code>MutableSequence</code> could be casually called <em>list-like</em>.</p>
<p>However, I would understand the term <strong>list-like</strong> to mean that it is a <code>MutableSequence</code> - has at least the methods <code>__getitem__</code>, <code>__setitem__</code>, <code>__delitem__</code> and <code>__len__</code>, expecting also it to have the  mixin methods mentioned in the documentation, such as <code>append</code>.</p>
<p>If there is no need for <code>__setitem__</code> and <code>__delitem__</code> it should be called a sequence instead - the assumption is that if something accepts a sequence, it does not need to be mutable, thus <code>str</code>, <code>bytes</code>, <code>tuple</code> etc also work there.</p>
<hr/>
<p>Your two links highlight the vagueness of the term:</p>
<p>The plotly API requires that the <code>list-like</code> objects will be serialized to a JSON array by the internal <a href="https://github.com/plotly/python-api/blob/master/plotly/utils.py#L116" rel="noreferrer"><code>PlotlyJSONEncoder</code></a> that delegates most of the encoding to the Python <code>JSONEncoder</code>. However, the latter encodes only <code>tuple</code> and <code>list</code> (and subclasses) to a JSON array; thus the <em>list-like</em> here means a <code>list</code>, a <code>tuple</code> or subclasses thereof. A custom sequence object that is not a subclass of either will result in <code>TypeError: [...] is not JSON serializable</code>.</p>
<p>The <a href="http://code.activestate.com/recipes/67671-a-function-to-unzip-simple-list-like-objects/" rel="noreferrer">unzip recipe</a> you linked to requires an object that behaves like a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="noreferrer"><code>Sequence</code></a>, (mutability is not required), thus a <code>tuple</code> or <code>str</code>, or any custom object implementing <code>Sequence</code> will do there.</p>
<hr/>
<p>TL;DR <strong>list-like</strong> is a vague term. It is preferable to use the terms iterable, sequence and mutable sequence instead, now that these are defined in <code>collections.abc</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The technical term for a "list-like object" is <strong>sequence</strong>. At the very least it supports ordering (i.e. two objects with the same elements but different order are not equal), indexing (<code>foo[bar]</code> such that <code>bar</code> is an integer less than the length of the sequence), and containment checking (<code>in</code>), and has a given length. It <em>should</em> support iteration, but if not then Python will simulate it using indexing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pretty much any time you see "-like object" in Python documentation the author is being deliberately vague. The author has decided that enumerating all the required interfaces would be too much trouble, and is only saying that some of its interfaces are required. An object that implemented all the interfaces is guaranteed to work, but in most cases it will work with an object that implements much less.</p>
<p>With a "list-like object" probably the best you can do, short of inspecting the source code, is to infer whether it needs any of the mutable interfaces. If it only needs read-only access to the list, you can be pretty sure you don't need to implement any of the mutable sequence operations. </p>
<p>If it says "list-like object or iterator" you can provide something that implements the much simpler iterator interface.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/6087731/comprehensive-list-of-python-protocols-interfaces">Comprehensive list of Python protocols/interfaces</a></span>
<span class="comment-copy">Welcome to the wonderful world of duck typing.</span>
<span class="comment-copy">@aruisdante Those are some pretty poor link-only answers that do not address the OP's question.</span>
<span class="comment-copy">@cpburnz While they're definitely link only, and not the highest quality in terms of explaining the link, I'm not really sure how you don't provide a comprehensive list of standard python protocols (which being <i>list-like</i> obstinately is, hence the suggested duplicate), without linking to them, especially since the links are to the core python doc. SO certainly wouldn't be the proper place for such a repository. Having said that, Antii's answer certainly covers the specific case, hence why I upvoted it.</span>
<span class="comment-copy">@aruisdante References are great, but simply linking to them is not good enough for a stackoverflow answer. A summary of the information should be provided. Also, the <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">data model</a> documentation is a very dense read. Without already having an understanding of how things work, it's not very clear which methods go with which protocol.</span>
<span class="comment-copy">This clears up a lot. So although there is no "standard" minimal definition (answers my main question), you're saying it probably <i>should</i> (or is possibly generally accepted) to refer to a <code>MutableSequence</code>?</span>
<span class="comment-copy">Or even better that call things Iterable, Sequence, MutableSequence or list instead of something as vague as <i>list-like</i></span>
<span class="comment-copy">Cheers. Poor terminology as a whole I suppose. Thanks!</span>
<span class="comment-copy">I think "mutable sequence" would be more accurate.  A tuple for example is a sequence, but it does not support item assignment (<code>__setitem__</code>) like a list does.  If a function is documented to take a list-like object, it could very well intend to mutate that object.</span>
<span class="comment-copy">@iCodez: We will agree to disagree. I personally feel that modifying mutable arguments is pathological behavior, since there's no guarantee (beyond the documentation, of course) that the argument will be mutable in the first place.</span>
<span class="comment-copy">The python data model pretty specifically states that a list is a mutable sequence. Any API specifying a list-like will almost certainly expect mutablilty, otherwise it would (or at least should) use a different term. The goodness/badness of parameters that are used as both input and output is not really part of the scope of the python data model. In addition, the API might be specifying it <i>returns</i> a list-like, in which case the point about modifying inputs is moot.</span>
<span class="comment-copy">@aruisdante If you have citations for these claims, you should post them as an answer.</span>
<span class="comment-copy">It's not clear at all that this is meant to be a contract. In particular, terms like "some" sequences (support extended slicing) suggest it's meant to be descriptive. Now, <code>list</code> <i>does</i> support extended slicing, but it's no more clear that "list-like" requires this than support for its other methods (or, for that matter, isinstance(..., list)). I'm also interested to know how append is not part of being a mutable sequence: "Mutable sequences should provide methods append(), count(), index(), extend(), insert(), pop(), remove(), reverse() and sort(), like Python standard list objects."</span>
