<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>&gt;&gt;&gt; pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
&gt;&gt;&gt; pairs.sort(key=lambda pair: pair[1])
&gt;&gt;&gt; pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
</code></pre>
<p>I have just gotten to lambda functions and I get how they work, at at least, I can comprehend the baleful rites behind their malignant dark magic.</p>
<p>But even with the Python code driving me insane I still don't get WHY that piece of code works? <code>pair</code> is not defined in any way so why is there an access index and worse still, why does that index matter (fyi <code>pair[2]</code> is out of scope and <code>pair[0]</code> gives a normal ordered <code>pairs</code>).</p>
<p>How the hell do we access nothingness that exists only within the impure confinements of the dreaded lambda function? Furthermore how does accessing the nothingness returns anything being the void which stares into us as we stare into it?</p>
</div>
<div class="post-text" itemprop="text">
<p>This works exactly as it should, because you specified the first index as the key, the tuples will be sorted according to the strings, sorted in alphabetical order. The index zero is actually the first element where as the index one is the second element because indices start counting at zero. Thus when you supply your lambda you are telling the sort method, sort the tuples by their second elements, which are all strings. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code># The following incantation shall summon from the depths
# of the data abyss thirteen entities: four tuples,
# four integers, four strings and a list containing all these.
# The amalgamation of these entities, the list, shall be bound
# to the name `pairs` to further do our dark bidding without
# fleeing into nothingness.

pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]

# One of the 133,316,666 demons is also bound by the spirit of
# Tim with the "member" `sort`. Another way to call upon the spirit
# of Tim is the `sorted` name, though it will use its dark magic
# to invoke another copy of the list, and thus would waste our magics
# unnecessarily.
# The sort demon can be wrangled to not compare things by their inherent
# value, but by another incantation, a `function`. The demon will then
# invoke that incantation for each of the things it compares, and use
# that value for sorting.
# (Before Python III, there also used to be another way, a "comparison"
# function, but this way is easier, which is likely why it was banished.
# Why else be a wizard if one did not wish ease and comfort?)
# The `lambda` word of power is equivalent to the more familiar `def`
# form, as such:
#
#    lambda pair:    |  def ANONYMOUS(pair):
#      pair[1]       |    return pair[1]
#
# The similarities and differences are quite easy to spot.
# 
# And indeed, if one were to `def ANONYMOUS`, they could form this incan-
# tation as `key=ANONYMOUS` instead.
#
# And for, as we mentioned earlier, the dark things confined within the
# list bound to the name `pairs` are tuples, which further confine within
# themselves an integer and string each, all accessible to our hands by
# indexing by zero (which is the Only True Way) by the bracket sigil [x],
# it only makes sense for the function to do just that to pass the value
# to the sorting demon that way.
# An illustration of this "indexing" for the fledgling wizard:
#
# [             | pairs
#    (          | pairs[0]
#        1,     | pairs[0][0]
#       'one'   | pairs[0][1]
#    ),
#    (          | pairs[1]
#       2,      | pairs[1][0]
#       'two'   | pairs[1][1]
#    )
# ]
#

pairs.sort(key=lambda pair: pair[1])

# And so, the mage may laugh and enjoy themselves, watching the demon
# futilely sort his items, and eventually we may gaze upon the fruits
# of his effort. Not the demon's, of course, for it is but a tool for the
# great wizard.

pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what you think a lambda function is, but it's nothing more than a simple one-line function. Your code could just as easily be written like this:</p>
<pre><code>def sort_key(pair):
    return pair[1]

pairs.sort(key=sort_key)
</code></pre>
<p>As you can see, nothing is being conjured out of thin air; <code>pair</code> is simply the parameter of the function.</p>
<p>It has an index because <code>sort</code> passes the key function each element of the list to be sorted; so in the first call, <code>pair</code> will be <code>(1, 'one')</code>, and so on.</p>
</div>
<span class="comment-copy">I think you should go back to the Python books to understand what <code>lambda</code> is and how it works. As it is, there are too many questions to be answered.</span>
<span class="comment-copy">Dark magic, huh?</span>
<span class="comment-copy">@MalikBrahimi, well, of course. All programming is Dark Magic, isn't it? :D</span>
<span class="comment-copy">@MalikBrahimi, in case you weren't taking me seriously - here are some sources: <a href="http://spin.atomicobject.com/2014/12/18/programming-is-magic/" rel="nofollow noreferrer">1</a> <a href="https://medium.com/@jreem/functional-programming-is-black-magic-310084308678" rel="nofollow noreferrer">2</a> <a href="http://en.wikipedia.org/wiki/Deep_magic" rel="nofollow noreferrer">3</a> :)</span>
<span class="comment-copy">That is precicey what i was looking for! The thing i couldn't get was why we would pass an index at something that, i thought, should not have an index at all, but now i see it's actually telling it to access the LIST's index. THANKS! :)  P.S.  I would upvote you, but i don't have enough reputation :(</span>
<span class="comment-copy">But that's not even true. The list is the thing you're sorting. The index is for the tuple, ie each member of the list.</span>
<span class="comment-copy">@DanielRoseman You're sorting the list of tuples according to the second element in each tuple.</span>
<span class="comment-copy">@mathgenius Can you please mark as answer if this was helpful to you? Just click the arrow beside my answer.</span>
<span class="comment-copy">Oh, yes, sorry about that. :) I just wish I could mark two best answers here. :(</span>
<span class="comment-copy">Note that the question is about Python 3, where the <code>cmp</code> parameter no longer exists.</span>
<span class="comment-copy">In Python 3, the <code>cmp</code> parameter was banished to the innermost circle of the 9 realms of Hades. In it's place, the even more diabolical <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>functools.cmp_to_key()</code> incantation</a> has sprung forth to baffle fledgeling wizards even more.</span>
<span class="comment-copy">Thank you, honorable wizards -- added that remark.</span>
<span class="comment-copy">Thank you, O most glorious WIzard! I did not perceive that the scroll (list) in fact contained tuples which contain words (strings) and integers and i also failed to realise the second sigil is the one that brings forth the words-within-scrolls. While the idea of the dark lamdas was within my minds eye my greatest failing was not realising the sigil of the lambda's argument was actually passed to the scroll's very own sigil. However... how do the baleful demons know that the sigil which we hand them is to be used for the SECOND sigil of the scroll, when we give them only 1 (why no pair[0][1])?</span>
<span class="comment-copy">As mentioned, the demon of sorting looks through all of the items in the <code>pairs</code> list (though of course it does not know it is called that, it just knows it is a thing containing other things [iterable]), then invokes the value function with each of them, then sorts them within the list. That is, the demon does the grunt work (as a demon rightfully should, naturally) of going through items 0, 1, 2, 3 (or more, should you edit your spell) of the pairs, and the incantation you wrote only does as little as possible, i.e. giving the demon the value.</span>
