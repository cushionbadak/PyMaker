<div class="post-text" itemprop="text">
<p>Are null bytes allowed in unicode strings?</p>
<p>I don't ask about utf8, I mean the high level object representation of a unicode string.</p>
<p><strong>Background</strong></p>
<p>We store unicode strings containing null bytes via Python in PostgreSQL.</p>
<p>The strings cut at the null byte if we read it again.</p>
</div>
<div class="post-text" itemprop="text">
<p>About the database side, PostgreSQL itself does not allow null byte (<code>'\0'</code>) in a string on char/text/varchar fields, so if you try to store a string containing it you receive an error. Example:</p>
<pre><code>postgres=# SELECT convert_from('foo\000bar'::bytea, 'unicode');
ERROR:  22021: invalid byte sequence for encoding "UTF8": 0x00
</code></pre>
<p>If you really need to store such information, then you can use <code>bytea</code> data type on PostgreSQL side. Make to sure to encode it correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python itself is perfectly capable of having both byte strings and Unicode strings with null characters having a value of zero. However if you call out to a library implemented in C, that library may use the C convention of stopping at the first null character.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since a string is basically just data and a pointer, you <strong>can</strong> save null in it. However, since null represents the end of the string ("null terminator "), there is no way to read beyond the null without knowing the size ahead of reading. </p>
<p>Therefore, seems that you ought to store your data in binary and read it as a buffer.</p>
<p>Good luck! </p>
</div>
<span class="comment-copy">A unicode string is a sequence of code points. There are no bytes. There is a <a href="http://www.fileformat.info/info/unicode/char/0000/index.htm" rel="nofollow noreferrer">U+0000 NULL character</a>. Is that what you are looking for?</span>
<span class="comment-copy"><code>''.join ([u'a', chr(0), u'b'])</code> works just fine for me.</span>
<span class="comment-copy">Actually, this is only mentioned at the <a href="http://www.postgresql.org/docs/current/static/functions-string.html" rel="nofollow noreferrer"><code>chr(int)</code></a> function, in the PostgreSQL manual: <i>The NULL (0) character is not allowed because text data types cannot store such bytes.</i> -- but it could be part of any utf8 (and unicode) text.</span>
<span class="comment-copy">There are other gotchas with <code>bytea</code> -- in particular, the default wire protocol used to represent them changed over time (somewhere in the 8.4 -&gt; 9.1 era, IIRC), so using older client libraries with a newer server with default configuration can result in corrupt data storage.</span>
<span class="comment-copy">Looked up the defaults: That was a 9.0 change, which led to older client libraries expecting the traditional <code>escape</code> format parsing content in the now-default <code>hex</code> format incorrectly.</span>
<span class="comment-copy">@CharlesDuffy, I think you are confusing, what changed is the default string representation, and now it accepts two <code>escape</code> or <code>hex</code>, you can configure <code>bytea_output</code> for display, but for input both are still accepted, so even with older libraries you can simple configure <code>bytea_output=escape</code> and voil√†... :)</span>
<span class="comment-copy">Yes, you can configure that, but one needs to be aware of the change to make it. Tends to be a little confusing if data coming out of the DB doesn't match up with what was put in on account of that change not yet having been made, which is why there's value to noting it -- as in this comment. :)</span>
<span class="comment-copy">Also see <a href="https://docs.python.org/3/c-api/unicode.html" rel="nofollow noreferrer">docs.python.org/3/c-api/unicode.html</a></span>
<span class="comment-copy">The question is about Python.</span>
