<div class="post-text" itemprop="text">
<p>I am currently trying to embed Python in my C++ application to give the user advanced scripting possibilities.
My program is working great on Windows so far (it is fully working), and now I'm trying to do the same on GNU/Linux (Debian 7 for now) but this is giving me much more trouble than I expected.
First, I download the python.tar.gz and compile it from source with enable-shared option to get the fPIC option:<br/>
./configure --enable-shared --prefix=/opt/python<br/>
make &amp;&amp; make altinstall<br/>
Then, I install numpy thanks to pip : <code>python3.4 -m pip install numpy</code>. Easy.  </p>
<p>Last, I <strong>copy</strong> the installation to another location (yes, it should be deployed anywhere), in my home directory to be precise, and name it python_install. This copy seems to give me much pain.</p>
<p>On the code side, I call Py_Initialize which is working good. Here is what I have done so far :</p>
<pre><code>#include "Python.h"

#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "numpy/arrayobject.h"

#include &lt;iostream&gt;

int InitNumpy()
{
    import_array();
}

int main()
{
    std::string python_home = "/home/xxxx/dev/test-python/python_install";
    setenv("PYTHONHOME", python_home.c_str(),1 );

    Py_Initialize();

    std::cout &lt;&lt; "Importing Numpy... ";
    int cr = InitNumpy();
    std::cout &lt;&lt; cr &lt;&lt; std::endl;

    return 0;
}
</code></pre>
<p><strong>ImportError: numpy.core.multiarray failed to import</strong><br/>
I think the error is pretty clear, Python can't find any libraries including numpy. But I have tried everything from setting PYTHONPATH to playing with -Wl,-rpath to set additional directories.... even PySys_SetPath... What is working on Windows is failing here on Linux.
Any ideas would be welcome ! Thanks.</p>
<p>EDIT : Here is the makefile I used (corrected):  </p>
<pre><code>CC=g++
CFLAGS= -Ipython_install/include/python3.4m -Ipython_install/lib/python3.4/site-packages/numpy/core/include -Wno-unused-result  -DNDEBUG -g -fwrapv -O3 -Wall
#Wrong
#LDFLAGS= -Lpython_install/lib/python3.4/config-3.4m -lpython3.4m -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic -Wl,-rpath,\$${ORIGIN}/python_install/lib
#Right
LDFLAGS= -Lpython_install/lib/ -lpython3.4m -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic -Wl,-rpath,\$${ORIGIN}/python_install/lib
EXEC=test-python

all: $(EXEC)

test-python: test-python.o
    $(CC) -o $@ $^ $(LDFLAGS)

%.o: %.cpp
    $(CC) -o $@ -c $&lt; $(CFLAGS)

.PHONY: clean mrproper

clean:
    rm -rf *.o

mrproper: clean
    rm -rf $(EXEC)
</code></pre>
<p>Options are coming directly from the python3.4m-config executable...</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is : don't link statically on Python. All Python modules link <strong>dynamically</strong> on libpython3.4.so, so the C++ program has to do the same.
To sum up Python embedding :</p>
<ol>
<li>Link dynamically on Python (cf corrected Makefile). Use rpath to locate the python .so.</li>
<li>In the C++ code, set <code>PYTHONHOME</code> environment variable to the Python installation or use <code>Py_SetPythonHome()</code> function.</li>
<li>Call <code>Py_Initialize();</code></li>
<li><p>If you want to import custom module, add the module path to Python path.</p>
<pre><code>PyObject *sys = PyImport_ImportModule("sys");
PyObject *path = PyObject_GetAttrString(sys, "path");
PyList_Append(path, PyUnicode_FromString(sys_path.toUtf8().data()));
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You say "python can't find any libraries", have you tried starting python and importing them? If it's an issue with importing directly in python you are going to have to recheck <code>PYTHOPATH</code> is correct, or perhaps your installed files weren't installed with permission settings to execute. (I've had that happen twice).</p>
<p>Also, have you checked out the tips for compiling on unix like systems from the <a href="https://docs.python.org/3/extending/embedding.html#compiling-and-linking-under-unix-like-systems" rel="nofollow">manual</a>?. </p>
<blockquote>
<p>It is not necessarily trivial to find the right flags to pass to your
  compiler (and linker) in order to embed the Python interpreter into
  your application, particularly because Python needs to load library
  modules implemented as C dynamic extensions (.so files) linked against
  it.</p>
<p>To find out the required compiler and linker flags, you can execute
  the pythonX.Y-config script which is generated as part of the
  installation process (a python3-config script may also be available)</p>
</blockquote>
<p>How do you compile your code?</p>
<p><strong>EDIT</strong></p>
<p>I've tried my best to reproduce your error but can't do it on my machine. The farthest I got is that I think that your analysis of the error is wrong. </p>
<blockquote>
<p>I think the error is pretty clear, Python can't find any libraries
  including numpy.</p>
</blockquote>
<p>The reason behind having an <code>import_array()</code> is to check if there's a numpy and if the numpy version you have matches the installed version of python. In the source it's defined as a macro (i.e. for np for py2):</p>
<pre><code>#if PY_VERSION_HEX &gt;= 0x03000000
#define NUMPY_IMPORT_ARRAY_RETVAL NULL
#else
#define NUMPY_IMPORT_ARRAY_RETVAL
#endif

#define import_array() {if (_import_array() &lt; 0) {PyErr_Print();
PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to
import"); return NUMPY_IMPORT_ARRAY_RETVAL; } }
</code></pre>
<p>Since that's the error you see, I've reason to suspect that your <code>pip</code> installed the "wrong" numpy for your python version. But then again based on your makefile there is a numpy inside your python3.4 folders, if it hadn't it would throw an error <code>No such file or directory</code>. Additionally you say you even had to use the <code>LD_LIBRARY_PATH</code> (<strong>not</strong> recommended btw) to start python with numpy, that just means that numpy really is not properly pointed to by any path that is currently defined for your python, including the <code>site-packages</code> folder you have in your compiled python (which is searched through by default). </p>
<p>I suspect that you have a preexisting python installed by default, and your system wide environment paths are set to it. But that's a really weird statement considering you explicitly link the numpy in python3 folder <strong>AND</strong> you <code>setenv</code> <code>PYTHONHOME</code>. </p>
<p>I'm sorry I couldn't be of more help, but I can't reproduce the issue without actually doing the python build from scratch (also not currently on debian). Good luck, keep me posted?</p>
</div>
<span class="comment-copy">I can't reproduce your problem. Followed all the steps you gave and it worked. All I can think of is that numpy doesn't actually exist under the python home you've given. Have you tried running an interactive interpreter of your installation and importing numpy (making sure <code>PYTHONPATH</code> is <i>not</i> set)?</span>
<span class="comment-copy">Yes, me too. Long story short : I made a first installation of Python and <b>copy</b> the installation in my small project. I don't know why but numpy was referring to the first install. 'strace' gave me the clue. I deleted this first installation and now it works... But I hope I will be able to integrate nicely with other Python installation in the future otherwise some users will definitely complain...</span>
<span class="comment-copy">What I did find that pip was hard coded to use the original install path to find the python executable. That is, it wouldn't try to use the python executable that is shared a directory with. It may be that pip's install path is also hard coded -- meaning you wouldn't be able to move the python installation about.</span>
<span class="comment-copy">@Dunes : Yes, you may be right. When I try to use pip on the moved folder, I get a <code>/usr/bin/ld: cannot find -lpython3.4m</code>. Real problem is : I am supposed to deploy my application and my python wrappers in .deb archive via apt-get... So I might force the python installation somewhere. I have to think about it.</span>
<span class="comment-copy">@Dunes I finally found what was my problem. The makefile was not correct. I linked statically on libpython.a but additional installations like numpy used libpython3.4.so, and it seems to provoke some weird conflicts I don't understand. Well, now that I use dynamic linking (shared objects) on both sides it is working beautifully. 5 days of trouble for one weird option...</span>
<span class="comment-copy">Would you mind adding an example of how you set <code>PYTHONHOME</code> in the C++ code?</span>
<span class="comment-copy">I think using <code>Py_SetPythonHome</code> do the same and should be used. cf <a href="https://docs.python.org/3.6/c-api/init.html" rel="nofollow noreferrer">docs.python.org/3.6/c-api/init.html</a></span>
<span class="comment-copy">I edited my first post to show full code. If I launch the Python executable itself (with LD_LIBRARY_PATH to help him find the .so), it's working great, numpy is importing correctly. On the other hand, when I'm calling import_array from the C++ code, I always get an import error !</span>
<span class="comment-copy">It finally worked using rpath and strace on my very small example. But I could not transfer that in my big project. Have to find out why. I will keep the community inform !</span>
<span class="comment-copy">@poukill I tried my best, but can't get python to behave like yours, even when I unset the paths linking seems to work for me.</span>
<span class="comment-copy">I started from scratch again, and it is also working for me.... even if I move my program. That is good news. <b>But</b>, if I install another Python elsewhere with the exact same method (but without numpy), the primary installation won't work anymore, and I get my "ImportError: numpy.core.multiarray failed to import" back... If I install numpy on the last  Python install, then, both applications will work. To sum up : 1- Install Python and numpy with test-python.cpp. Compile and launch. Working! 2- Move to another folder. Still working. 3- Reinstall Python on the old folder. Broke the new one.</span>
<span class="comment-copy">Looks like I was in the neigbourhood at least. Hopefully I helped a little. This is bad news for you though, this means it's not, as is, deployable as a stand-alone. Not outside of clean install, or at least virtualenv. Building <a href="https://github.com/numpy/numpy/blob/master/INSTALL.txt" rel="nofollow noreferrer">numpy inplace</a> is an overkill. Additionally I was scouring the boost library installs to try and catch a hint of a solution when I ran into <a href="https://github.com/pydata/numexpr/blob/master/FindNumPy.cmake" rel="nofollow noreferrer">this</a> which you might find useful as well.</span>
