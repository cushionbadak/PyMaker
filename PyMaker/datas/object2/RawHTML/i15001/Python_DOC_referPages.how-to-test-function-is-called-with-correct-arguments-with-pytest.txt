<div class="post-text" itemprop="text">
<p>I'm learning how testing is done in Python using <code>py.test</code>. I am trying to test a specific situation that is quite common when using other libraries like <code>mock</code>. Specifically, testing that a function or method invokes another callable with the correct arguments. No return value is needed, just a confirmation that the method under test makes the call properly.</p>
<p>Here's an example straight from the <a href="https://docs.python.org/3/library/unittest.mock-examples.html" rel="noreferrer">docs</a>:</p>
<pre><code>&gt;&gt;&gt; class ProductionClass:
...     def method(self):
...         self.something(1, 2, 3)
...     def something(self, a, b, c):
...         pass
...
&gt;&gt;&gt; real = ProductionClass()
&gt;&gt;&gt; real.something = MagicMock()
&gt;&gt;&gt; real.method()
&gt;&gt;&gt; real.something.assert_called_once_with(1, 2, 3)
</code></pre>
<p>Is it possible to do this using <code>monkeypatch</code> or <code>fixtures</code> from <code>py.test</code>, without effectively writing my own mocked class? I  have searched for this specific use case, but couldn't find an example. Does <code>py.test</code> encourage an alternative way of exercising code like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://github.com/pytest-dev/pytest-mock" rel="nofollow noreferrer">pytest-mock</a> which makes it easy to use the <a href="https://pypi.python.org/pypi/mock" rel="nofollow noreferrer">mock</a> package as a pytest fixture.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well. I've come up with something that seems to work, but I suppose its similar to mock:</p>
<pre><code>@pytest.fixture
def argtest():
    class TestArgs(object):
        def __call__(self, *args): 
            self.args = list(args)
    return TestArgs()

class ProductionClass:
    def method(self):
        self.something(1,2,3)
    def something(self, a, b, c):
        pass

def test_example(monkeypatch, argtest):
    monkeypatch.setattr("test_module.ProductionClass.something", argtest)
    real = ProductionClass()
    real.method()
    assert argtest.args == [1,2,3]
</code></pre>
</div>
<span class="comment-copy">Strange that such basic functionality for unit-testing is not out of the box.</span>
<span class="comment-copy">How can we combine this approach with mocking return value?</span>
