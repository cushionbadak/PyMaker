<div class="post-text" itemprop="text">
<p>In Learning Python 3rd, I saw this code</p>
<pre><code>class wrapper:
    def __init__(self, object):
        self.wrapped = object
    def __getattr__(self, attrname):
        print("Trace:", attrname)
        return getattr(self.wrapped, attrname)

x = wrapper([1,2,3])
x.append(4)
print(x.wrapped)
</code></pre>
<p>I want to know exactly what happens after calling this <code>__getattr__</code> method, which only returns the method by <code>getattr</code>.</p>
<p>Why is the result of the last line <code>[1, 2, 3, 4]</code>?</p>
<p>There is no code that execute the returned function with the original argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>wrapper</code> class does not have a <code>.append</code> attribute, so Python falls back to the <code>wrapper.__getattr__</code> method. From the <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow"><code>object.__getattr__</code> special method documentation</a>:</p>
<blockquote>
<p>Called when an attribute lookup has not found the attribute in the usual places (i.e. it is not an instance attribute nor is it found in the class tree for <code>self</code>).</p>
</blockquote>
<p>The wrapped object (the list object with <code>[1, 2, 3]</code>) does have a <code>append</code> attribute (a method), so <code>getattr(self.wrapped, 'append')</code> returns it.</p>
<p>The returned method is called, passing in <code>4</code>, appending that to the <code>self.wrapped</code> list object.</p>
<p>You can easily reproduce the steps yourself:</p>
<pre><code>&gt;&gt;&gt; wrapped = [1, 2, 3]
&gt;&gt;&gt; getattr(wrapped, 'append')
&lt;built-in method append of list object at 0x107256560&gt;
&gt;&gt;&gt; getattr(wrapped, 'append')(4)
&gt;&gt;&gt; wrapped
[1, 2, 3, 4]
</code></pre>
</div>
<span class="comment-copy">In short, python interpreter executes the returned function with original arguments after calling <b>getattr</b> method ?</span>
<span class="comment-copy">@q2ven: <code>__getattr__</code> is called first, which returns the method object, which then is called. The <code>x.append</code> part is handled first, and whatever that produces, is called with the <code>(4)</code> part of the expression.</span>
<span class="comment-copy">I've understood. Thank you.</span>
