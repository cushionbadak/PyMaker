<div class="post-text" itemprop="text">
<p>In playing with <code>inspect</code> and reading the other questions here, I still cannot figure out how to get the function <em>object</em> of the caller more cleanly than to load the module by its path and then find the function within that.</p>
<p>In other words, how would you complete the following so that <code>caller()</code> returns a method object?</p>
<pre><code>import inspect

def caller():
    frame = inspect.stack()[2]
    code = frame[0]
    path = frame[1]
    line = frame[2] 
    name = frame[3] # function NAME string
    # TODO: now what?
    return func

def cry_wolf():
    func = caller()
    print "%s cried 'WOLF!'" % (func.__name__,)

def peter():
    cry_wolf()
</code></pre>
<p>Remember, I already know the function name but what I'm trying to access is the function object that the calling code is running in. The result desired is:</p>
<pre><code>peter cried 'WOLF!'
</code></pre>
<p>DONE! Thanks to user 61612, I have completed this code:</p>
<pre><code>import imp, inspect, sys

def caller():
    frame = inspect.stack()[2]
    code = frame[0]
    path = frame[1]
    line = frame[2] 
    name = frame[3]
    return code.f_globals[name]

def cry_wolf():
    func = caller()
    print "%s cried 'WOLF!'" % (func.__name__,)

def peter():
    cry_wolf()
</code></pre>
<p>Awesome!</p>
</div>
<div class="post-text" itemprop="text">
<p>Frame objects have the <a href="https://docs.python.org/3/library/inspect.html?highlight=f_globals#types-and-members" rel="nofollow"><code>f_globals</code> attribute</a>:</p>
<pre><code>import inspect

def caller():
    tup = inspect.stack()[2]
    return tup[0].f_globals[tup[3]] # &lt;function peter at address&gt;

def cry_wolf():
    func = caller()
    print("%s cried 'WOLF!'" % (func.__name__,)) # peter cried 'WOLF!'

def peter():
    cry_wolf()
</code></pre>
</div>
<span class="comment-copy">This is great, only because of my typo of stack frame <code>[1]</code> instead of <code>[2]</code>, you ended up with the wrong frame. I adapted your code into my solution which I put in the question. Thank you!</span>
<span class="comment-copy">@NeilC.Obremski yeah, I wasn't sure if this was the right frame :)</span>
<span class="comment-copy">@NeilC.Obremski anyway, I updated the answer to make it clear</span>
