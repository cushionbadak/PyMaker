<div class="post-text" itemprop="text">
<p>I don't understand why this code prints <code>None</code> in <code>b()</code>:</p>
<pre><code># coding: utf-8                                                                               


saber = None
rider = dict()


def a():
    saber = 'ex'
    rider['a'] = 'b' 
    print saber
    print rider


def b():
    print saber
    print rider


if __name__ == '__main__':
    a() 
    b() 
</code></pre>
<p>When <code>b()</code> is called, printing <code>saber</code> results in <code>None</code> being printed. Why?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>saber</code> is <code>None</code> in <code>b()</code> because you have defined it as a global variable with a value of <code>None</code> and have not defined a local variable of the same name in that function. In <code>a()</code> you defined <code>saber</code> with a value of <code>"ex"</code> and when you printed that variable, that's what you got. But that value of <code>saber</code> went away when the function finished, because it is local to the function, and that's what local variables do.</p>
<p>Now you might ask why <code>rider</code> was changed in <code>a()</code> when <code>saber</code> was not. But in fact, <code>rider</code> was not changed. You did not assign to the name <code>rider</code> in <code>a()</code>, so the global variable <code>rider</code> was used. The <em>contents</em> of <code>rider</code> were changed (you added a new key/value pair) but <code>rider</code> itself <em>is still the same dictionary object it was when you first defined it.</em> And that's why when you print it in <code>b()</code> you get the changed dictionary. Both functions are using the global variable <code>rider</code> because there is no local variable of the same name "hiding" it.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>a()</code>, you are re-declaring <code>saber</code> locally, and so it references a local variable and not the global that you declared in the beginning of your code. See <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow">this documentation</a> for more information. The solution is to declare <code>saber</code> global at the beginning of <code>a()</code>:</p>
<pre><code>def a():
    global saber
    saber = 'ex'
    rider['a'] = 'b' 
    print saber
    print rider
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this in <code>a()</code>:</p>
<pre><code>global saber
saber = 'ex'
</code></pre>
<p>See <a href="https://stackoverflow.com/q/423379/201359">this post</a> for a similar question. Basically, if you don't specify that <code>saber</code> is global, it'll be interpreted as local to the function. We don't have to do the same for <code>rider</code> because we're not actually reassigning it, only modifying its contents.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check my comments in the code.</p>
<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

saber = None
rider = dict()
# use id() to get memory address of this object
print id(saber)
print id(rider)



def a():
    saber = 'ex'
    rider['a'] = 'b'
    print id(saber)
    # as you can see here, you have created a new object inside function a which replace the global variable
    print saber
    print id(rider)
    # you are using the same object from global 
    print rider


def b():
    print id(saber)
    # you are using the global variable here
    print saber
    print id(rider)
    # you are using the global variable here
    print rider


if __name__ == '__main__':
    a()
    b()
</code></pre>
<p>OUTPUT:</p>
<pre><code>35731224
506032968
35662984
ex
35731224
{'a': 'b'}
506032968
None
35731224
{'a': 'b'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>saber and rider are global, but in a() you have:</p>
<pre><code>def a():
    saber = 'ex'     # local variable saber, rather than the global one
    rider['a'] = 'b' # global variable rider
    print saber
    print rider
</code></pre>
</div>
