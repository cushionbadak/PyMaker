<div class="post-text" itemprop="text">
<p>I'm currently re-factoring a project (formerly big one file) into several seperate python files, each of which runs a specific part of my application.
Eg, <code>GUIthread.py</code> runs the GUI, <code>Computethread.py</code> does some maths, etc etc. </p>
<p>Each thread includes the use of functions from imported modules like <code>math</code>, <code>time</code>, <code>numpy</code>, etc etc.</p>
<p>I already have a file <code>globalClasses.py</code> containing class definitions for my datatypes etc, which each .py file imports at the start, as per recomendation here: <a href="http://effbot.org/pyfaq/how-do-i-share-global-variables-across-modules.htm" rel="nofollow">http://effbot.org/pyfaq/how-do-i-share-global-variables-across-modules.htm</a> . This is working well. </p>
<p>What I would like to do is have all my 3rdparty module imports in the <code>globals</code> file as well, so that I can write, for example, <code>import math</code> once but have all of my project files able to use <code>math</code> functions.</p>
<p><strong>Questions:</strong></p>
<p><strong>1. Is this possible?</strong></p>
<p><strong>2. Is it a good idea/is it good Python practice?</strong></p>
<p>My current solution is just to put</p>
<pre><code>import math 
import time
import numpy
...
</code></pre>
<p>(plus imports for all the other modules I'm using as well)</p>
<p>at the top of every file in my project... But that doesn't seem very tidy, and it's easy to forget to move a dependency's import statement when moving code-chunks from file to file... </p>
</div>
<div class="post-text" itemprop="text">
<p>Yeah I guess there is a more elegant way of doing this which will save redundant line of code. Suppose you want to import some modules <code>math, time, numpy</code>(say), then you can create a file <code>importing_modules</code>(say) and import the various modules as <code>from module_name import *</code>, So the <code>importing_modules.py</code> may look something like this:</p>
<p><strong>importing_modules.py</strong></p>
<pre><code>from math import *
from numpy import *
from time import *
</code></pre>
<p><strong>main.py</strong></p>
<pre><code>from importing_modules import *
#Now you can call the methods of that module directly
print sqrt(25) #Now we can call sqrt() directly in place of math.sqrt() or importing_modules.math.sqrt().
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answer shows how what you want is (sort of) possible, but didn't address your second question about good practice. </p>
<p><strong>Using <code>import *</code> is almost invariably considered bad practice.</strong> See <a href="https://stackoverflow.com/questions/2386714/why-is-import-bad">"Why is import * bad?"</a> and <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">"Importing * from a package"</a> from the docs.</p>
<p>Remember from <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 20</a> that <em>explicit is better than implicit</em>. With explicit, specific imports (e.g. <code>from math import sqrt</code>) in every module, there is never confusion about from where a name came, your module's namespace includes only what it needs, and bugs are prevented.</p>
<p>The downside of having to write a couple <code>import</code> statements per module does not outweigh the potential problems introduced by trying to get around writing them.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/18792145/same-module-is-being-imported-in-different-files">Same module is being imported in different files</a></span>
<span class="comment-copy">understood that calling <code>import module</code> multiple times doesn't cause an actual repetition of the import work; I was just wondering if it's possible to avoid the repetition of writing the code <code>import module</code> . Thanks for the link though</span>
