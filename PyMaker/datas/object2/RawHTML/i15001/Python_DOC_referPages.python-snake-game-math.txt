<div class="post-text" itemprop="text">
<p>I'm using python 3 and following a [tutorial][1]. I'm getting a problem and my snake isn't moving. It calls invalid syntax on vec_add() and when i remove some parenthesis, i get:</p>
<pre><code>Traceback (most recent call last):
  File "_ctypes/callbacks.c", line 234, in 'calling callback function'
  File "C:\Python34\lib\site-packages\OpenGL\GLUT\special.py", line 164, in deregister
    function( value )
  File "C:/Users/jay/Desktop/Python/OpenGL/Snake Game.py", line 51, in update
    snake.insert(0, vec_add(snake[0], snake_dir))      # insert new position in the beginning of the snake list
TypeError: vec_add() missing 2 required positional arguments: 'x2' and 'y2'
</code></pre>
<p>The snake should be moving to the right.</p>
<pre><code>from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

window = 0                                             # glut window number
width, height = 500, 500                               # window size
field_width, field_height = 50, 50                     # internal resolution
snake = [(20, 20)]                                       # snake list of (x, u) positions
snake_dir = (1, 0)                                     # snake movement direction
#Note: snake dir (1, 0) means that its current movement
#direction is x=1 and y=0, which means it moves to the right.
interval = 200 # update interval in milliseconds

def vec_add((x1, y1), (x2, y2)):    
    return (x1 + x2, y1 + y2)


def refresh2d_custom(width, height, internal_width, internal_height):
    glViewport(0, 0, width, height)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, internal_width, 0.0, internal_height, 0.0, 1.0)
    glMatrixMode (GL_MODELVIEW)
    glLoadIdentity()

def draw_rect(x, y, width, height):
    glBegin(GL_QUADS)                                  # start drawing a rectangle
    glVertex2f(x, y)                                   # bottom left point
    glVertex2f(x + width, y)                           # bottom right point
    glVertex2f(x + width, y + height)                  # top right point
    glVertex2f(x, y + height)                          # top left point
    glEnd()                                            # done drawing a rectangle

def draw_snake():
    glColor3f(1.0, 1.0, 1.0)  # set color to white
    for x, y in snake:        # go through each (x, y) entry
        draw_rect(x, y, 1, 1) # draw it at (x, y) with width=1 and height=1


def draw():                                            # draw is called all the time
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) # clear the screen
    glLoadIdentity()                                   # reset position
    refresh2d_custom(width, height, field_width, field_height)

    draw_snake()

    glutSwapBuffers()                                  # important for double buffering


def update(value):
    snake.insert(0, vec_add(snake[0], snake_dir))      # insert new position in the beginning of the snake list
    snake.pop()                                        # remove the last element

    glutTimerFunc(interval, update, 0)                 # trigger next update


# initialization
glutInit()                                             # initialize glut
glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH)
glutInitWindowSize(width, height)                      # set window size
glutInitWindowPosition(0, 0)                           # set window position
window = glutCreateWindow(b"noobtuts.com")              # create window with title
glutDisplayFunc(draw)                                  # set draw function callback
glutIdleFunc(draw)                                     # draw all the time
glutTimerFunc(interval, update, 0)                     # trigger next update
glutMainLoop()                                         # start everything
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this function:</p>
<pre><code>def vec_add((x1, y1), (x2, y2)):    
    return (x1 + x2, y1 + y2)
</code></pre>
<p>Python does not support deconstruction in function argument lists. So you can write it like the following:</p>
<pre><code>def vec_add(p1, p2):    
    return (p1[0] + p2[0], p1[1] + p2[1])
</code></pre>
<p>This is compatible with your existing call to <code>vec_add</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's fine to use normal tuples to store &amp; manipulate coordinates, but you might find the named tuple a more convenient data structure. The elements of a named tuple can be accessed by name or by index, and as a named tuple is a class you can add custom methods to it. </p>
<p>Here's a short demo that adds vector addition and subtraction methods to a 2-element named tuple, it also adds a useful <code>__str__</code> method. By defining <code>__add__</code> and <code>__sub__</code> we can perform vector addition and subtraction simply by using the <code>+</code> and <code>-</code> operators, which is easier to type (and to read) than using an explicit function call.</p>
<pre><code>#!/usr/bin/env python

from collections import namedtuple

Vector = namedtuple('Vector', ['x', 'y'])

Vector.__str__ = lambda self: 'Vector({s.x}, {s.y})'.format(s=self)
Vector.__add__ = lambda self, other: Vector(self.x + other.x, self.y + other.y)
Vector.__sub__ = lambda self, other: Vector(self.x - other.x, self.y - other.y)

snake = [Vector(20, 20)]
snake_dir = Vector(x=1, y=0)
print(snake_dir.x)
print(snake[0] + snake_dir)
</code></pre>
<p><strong>output</strong></p>
<pre><code>1
Vector(21, 20)
</code></pre>
<p>See the Python docs for <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> for further info; here's the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">Python 3 version</a> of those docs.</p>
<p>You could also define your own Vector or Point class from scratch, as in <a href="https://stackoverflow.com/a/28605377/4014959">this answer</a>. If you want to store a lot of points you may wish to add <code>__slots__ = ()</code> to your class definition to minimize memory usage, as mentioned in the Python 2 named tuple docs.</p>
</div>
<span class="comment-copy">Thanks, I really appreciate it!</span>
