<div class="post-text" itemprop="text">
<p>I am a beginner and I am trying to get the sum of the last element of each line of a file. Could anyone tell me what is wrong? </p>
<pre><code>def sumLastElement(file):    
    f = open(file, "r").read()
    evenNumbers = []    
    for line in f:
        lastElement = line[-1]
        if int(lastElement):
            try:
                lastElement % 2 == 0
                evenNumbers.append(lastElement)
            except:
                pass    
    return sum(evenNumbers)
    f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems in your code. </p>
<p>Firstly, <code>f.close()</code> is never reached, since <code>return</code> above it will exit the function. It might be better if you start using <code>with open() as</code> <a href="https://docs.python.org/2/tutorial/inputoutput.html" rel="nofollow">instead</a> (it automatically closes the file when done).</p>
<blockquote>
<p>It is good practice to use the <code>with</code> keyword when dealing with file
  objects. This has the advantage that the file is properly closed after
  its suite finishes, even if an exception is raised on the way.</p>
</blockquote>
<p>Secondly, if the last character in a line can not be converted to an int, then a <code>ValueError</code> will be raised. </p>
<p>When using <code>try:</code> you should handle only the error(s) you are expecting. All other errors should propagate through your code, so that you <strong>know</strong> when something is wrong. </p>
<hr/>
<p>Below is an improved version of your code. </p>
<pre><code>def sumLastElement(file):

    with open(file, 'r') as opened_file:
        evenNumbers = []

        for line in opened_file:
            lastElement = line.replace('\n', '')[-1]

            try:
                element_as_int = int(lastElement)
                if element_as_int % 2 == 0:
                    evenNumbers.append(element_as_int)
            except ValueError:
                pass

        return sum(evenNumbers)
</code></pre>
<hr/>
<p>To capture multiple consecutive digits per line, I'd rather use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expressions</a>:</p>
<pre><code>import re


def sumLastElement(file):

    with open(file, 'r') as opened_file:
        evenNumbers = []

        for line in opened_file:

            lst_of_matches = re.findall(r'\d+$', line)
            if lst_of_matches:
                matched_as_int = int(lst_of_matches[-1])
                if matched_as_int % 2 == 0:
                    evenNumbers.append(matched_as_int)
        return sum(evenNumbers)
</code></pre>
<p><code>r'\d+$'</code> is the pattern you are searching for in the <code>line</code> string. <code>r'blabla'</code> is a raw string, <code>\d</code> means a digit, <code>+</code> means one or more of the previous (that would be one or more <code>\d</code>), and finally <code>$</code> matches the end of the line.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>You are try to convert string character to integer in following statement</p>
<p><code>int(lastElement)</code></p></li>
<li><p>Just <code>print</code> value of <code>lastElement</code> variable in your code </p>
<p>e.g. <code>print "Value of lastElement:-", lastElement</code></p></li>
<li><p><code>lastElement % 2 == 0</code> Will not work because type of <code>lastElement</code> variable in <code>string</code> so this statement will raise <code>TypeError</code> exception.</p></li>
<li><p>No statement will run after <code>return</code> statement, in code file is closed <code>f.close()</code> after <code>return</code> statement.</p></li>
<li><p>Use <code>if</code> loop to check result of <code>%</code> operation is equal to <code>0</code> or not.
<code>lastElement % 2 == 0</code> this will return True or False value so every <code>lastElement</code> will append in the list </p></li>
</ol>
<p>e.g.</p>
<pre><code>&gt;&gt;&gt; if lastElement % 2 == 0:
...   evenNumbers.append(lastElement)
</code></pre>
<hr/>
<p>e.g. of exception</p>
<pre><code>&gt;&gt;&gt; int("a")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'a'
&gt;&gt;&gt; int("5")
5
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>Use Exception handling to catch value error:-</p>
<pre><code>&gt;&gt;&gt; try:
...   lastElement = int(line[-1])
... except ValueError:
...   print "Exception during type casting for input %s"%(line[-1])
...   continue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you are trying to convert string to integer at line: </p>
<pre><code>if int(lastElement)
</code></pre>
<p>so it is giving error. You can put this line  inside try block to remove error.</p>
<pre><code> def sumLastElement(file):    
    f = open(file, "r").read()
    evenNumbers = []    
    for line in f:
        lastElement = line[-1]

          try:
             if int(lastElement):
                lastElement % 2 == 0
                evenNumbers.append(lastElement)
          except:
                pass    
    return sum(evenNumbers)
    f.close()
</code></pre>
</div>
<span class="comment-copy"><code>.</code> cannot be parse as an <code>int</code>.</span>
<span class="comment-copy">I also tried if type(lastElement) == int: but it did not work.</span>
<span class="comment-copy">show the input lines. Without knowing what you are trying to parse it is impossible to help you</span>
<span class="comment-copy"><code>lastElement</code> will always be a string, so that could never work. I think you have switched the <code>try</code> and <code>if</code> statements by accident - swap those, and your logic makes sense.</span>
<span class="comment-copy">Forgot to tell that I am trying to get the sum of EVEN numbers of each line of a file.  function call:  result = sumLastElement("filename")</span>
<span class="comment-copy">Thank you!!! This works great.   Just for my learning, could you also help me with the code which returns the sum of all the even numbers in the end of each line no matter how many digits there are as follows? (If you have time and feel like it of course)  t0gad9 #pass eoti30gro4930 #get 4930 sdgklj220r458dl0.8 #pass nr6546% #pass dlgkj40.0 #get 40.0 (or 40) 09gg0 #get 0  One more thing, where should I include "f.close()"?  Or is it unnecessary if you use a "with" statement?</span>
<span class="comment-copy">@momo <code>with</code> closes the file automatically, so <code>.close()</code> is not needed. I added new code to capture multiple consecutive digits, since adapting previous code seemed redundantly complex.</span>
<span class="comment-copy">Why down vote ?? so I can improve my answer ...</span>
