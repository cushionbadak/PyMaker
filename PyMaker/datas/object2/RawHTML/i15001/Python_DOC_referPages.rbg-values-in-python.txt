<div class="post-text" itemprop="text">
<p>Sorry if this is REALLY bad, i'm new at python so please excuse my ignorance. I'm trying to create a method which can take a word as a parameter and return that word with HTML font tags with rainbow colors.</p>
<pre><code>def rainbow(word):
    length = len(word)
    #set rgb values
    r = 255 #rgb value set to red by default
    g = 0
    b = 0
    sub = int(765/length)
    counter = 0
    string = ""
    for x in range(0, length):
        letter = word[counter]
        s = "&lt;font color = #%02X%02X%02X&gt;%s&lt;/font&gt;" % (r, g, b, letter)
        string = string+s
        counter+=1
        if (r == 255) and (g &gt;= 0) and (b == 0): 
            g = g+sub
            if g &gt; 255: g = 255
        if (r &gt; 0) and (g == 255) and (b == 0):
            r = r-sub
            if r&lt;0: r = 0
        if (r == 0) and (g == 255) and (b == 0): #b is not increasing
            b = b+sub
            if b&gt;255: b = 255
        if (r == 0) and (g &gt; 0) and (b == 255): #this one doesn't work either
            g = g-sub
            if g&lt;0: g = 0
        if (r &lt;255) and (g == 0) and (b == 255): #or this one
            r = r+sub
            if r&gt;255: r = 255
return string
</code></pre>
<p>Yeah I know it's pretty bad, like I said, i'm new. However, when this script is executed, the 'b' value is never increased. So the output always returns a correct rainbow up to the green color. Please tell me what i'm doing wrong! </p>
</div>
<div class="post-text" itemprop="text">
<p>It might be easier to get rainbow colors using <a href="http://en.wikipedia.org/wiki/HSL_and_HSV" rel="nofollow noreferrer">HSV color space</a>. Then <a href="https://docs.python.org/3/library/colorsys.html" rel="nofollow noreferrer"><code>colorsys.hsv_to_rgb()</code> function</a> allows to convert from HSV to RGB:</p>
<pre><code>import html
from colorsys import hsv_to_rgb

def html_rainbow(text):
    n = len(text)
    L = []
    for i, c in enumerate(text):
        hue = i / n
        r, g, b = [int(f*255 + .5) for f in hsv_to_rgb(hue, 1, 1)]
        L.append('&lt;font color=#%02X%02X%02X&gt;%s&lt;/font&gt;' % (
            r, g, b, html.escape(c, quote=False)))
    return ''.join(L)
</code></pre>
<p>Test script:</p>
<pre><code>#!/usr/bin/env python3
"""Usage: %(prog)s &lt;text&gt;"""
import sys
import tempfile
import time
import webbrowser

def open_in_browser(html):
    with tempfile.NamedTemporaryFile("w", suffix='.html') as file:
        file.write(html)
        file.flush()
        webbrowser.open(file.name)
        time.sleep(60) # give the browser a minute to open before
                       # deleting the file

if len(sys.argv) &lt; 2:
    sys.exit(__doc__ % dict(prog=sys.argv[0]))
open_in_browser(html_rainbow(sys.argv[1]))
</code></pre>
<p>Example:</p>
<pre><code>$ python3 html_rainbow.py "rainbow &amp; rainbow"
</code></pre>
<p><img alt="rainbow" src="https://i.stack.imgur.com/95r0G.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you were trying to do precisely, but that block of conditionals seemed awfully inelegant, so I skipped it and wrote this solution:</p>
<pre><code>def rainbow(word):
    import math
    wordLen = len(word)
    freq = (2 * math.pi) / wordLen
    amplitude = 255 / 2
    center = 255 / 2
    line = ''
    for i in range(wordLen):
        currChar = word[i]
        #G and B should be shifted to all three channels are not the same color
        gShift = math.pi * 2 / 3
        bShift = math.pi * 4 / 3
        r = math.sin(freq * i) * amplitude + center
        g = math.sin(freq * i + gShift) * amplitude + center
        b = math.sin(freq * i + bShift) * amplitude + center
        line += '&lt;font color="rgb({},{},{})"&gt;{}&lt;/font&gt;'.format(r, g, b, currChar)
    return line

if __name__ == '__main__':
    print rainbow('pooooooooooooooooooooooooooooooooooooooooooooooooop')
</code></pre>
<p>This uses a sine wave¹ to produce undulating values between 0 and 255 for each channel before printing the tags with each character.</p>
<p>This is unrelated, but also notice that I used the string format() method instead of the deprecated method you were using in your code.</p>
<p>One more protip: avoid naming a variable 'string' at the very least because it is easy to confuse a variable 'string' with Python's string module, though you're unlikely to be importing that any time soon.</p>
<p>¹<a href="http://betterexplained.com/articles/intuitive-understanding-of-sine-waves/" rel="nofollow">This</a> seems like a good place to learn about sine waves</p>
</div>
<span class="comment-copy">Have you tried any print statements to see what is happening?</span>
<span class="comment-copy">What does the constant 765 represent?</span>
<span class="comment-copy">The constant 765 represents the 3 255 values for r g &amp; b (I was just playing around with it and it worked)</span>
<span class="comment-copy">Is there not a satisfactory answer? If there is, can you accept the best one? (that would be JF's)</span>
<span class="comment-copy">This answer is much better than mine. I still like the sine wave but points to you for switching to HSV; I didn't realize this was in the Python standard library. :)</span>
