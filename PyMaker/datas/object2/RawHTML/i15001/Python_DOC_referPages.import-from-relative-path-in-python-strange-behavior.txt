<div class="post-text" itemprop="text">
<p>As far as I understand from the <a href="https://docs.python.org/2/reference/simple_stmts.html#the-import-statement" rel="nofollow">python docs</a>, <code>from package import x</code> statement should bind only <code>x</code>, but not <code>package</code>, into the current namespace.
But in practice, if <code>package</code> is a <em>relative</em> name, it <em>is</em> also bound sometimes!</p>
<p>Let me provide an example. Consider the following file hierarchy:</p>
<pre><code>root/
  package/
    __init__.py
    subpackage/
      __init__.py
</code></pre>
<p><strong>subpackage/__init__.py:</strong></p>
<pre><code>foo = 42
</code></pre>
<p><strong>package/__init__.py:</strong></p>
<pre><code>from os import name
from .subpackage import foo

print(globals().get('name'))
print(globals().get('os'))
print(globals().get('foo'))
print(globals().get('subpackage'))
</code></pre>
<p>Now let's run python (either v2 or v3) interpreter from the <code>root</code> directory and execute</p>
<pre><code>&gt;&gt;&gt; import package
</code></pre>
<p>The first three output lines are predictable:</p>
<pre><code>posix
None
42
</code></pre>
<p>But the last one is <code>&lt;module 'package.subpackage' ...&gt;</code> rather than <code>None</code>, and this confuses me somewhat.</p>
<p>Have I missed something? Is it expected behavior? What is the reason?</p>
<hr/>
<p>The situation seems even more weird to me in this case:</p>
<pre><code>root/
  __init__.py  # Empty.
  package/
    __init__.py
  another_package/
    __init__.py
</code></pre>
<p><strong>another_package/__init__.py:</strong></p>
<pre><code>bar = 33
</code></pre>
<p><strong>package/__init__.py:</strong></p>
<pre><code>from ..another_package import bar

print(globals().get('another_package'))
</code></pre>
<p>Now I run this <em>outside</em> the root:</p>
<pre><code>&gt;&gt;&gt; import root.package
None  # OK.
&gt;&gt;&gt; dir(root.package)
['__builtins__', ..., '__path__', 'bar']  # OK.
&gt;&gt;&gt; dir(root)
['__builtins__', ..., '__path__', 'another_package', 'package']  # What?!
</code></pre>
<p>Why did <code>another_package</code> appear in <code>dir(root)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's important to realize modules are loaded once at most (unless they are explicitly <a href="https://docs.python.org/2/library/functions.html#reload" rel="nofollow">reloaded</a>). If a module is imported in multiple modules, the same module <em>object</em> is referenced by them all. E.g.:</p>
<p><strong>Module M.py</strong></p>
<pre><code>bar = 10
</code></pre>
<p><strong>Module A.py</strong></p>
<pre><code>import M
M.bar = 4
</code></pre>
<p><strong>Module B.py</strong></p>
<pre><code>import M
M.bar = 6
</code></pre>
<p>So:</p>
<pre><code>&gt;&gt;&gt; import M
&gt;&gt;&gt; M.bar
10
&gt;&gt;&gt; import A
&gt;&gt;&gt; M.bar  # A is referencing the same M module object!!
4
&gt;&gt;&gt; import B
&gt;&gt;&gt; M.bar # B is referencing the same M module object!!
6
</code></pre>
<p>Now, when the statement <code>from ..another_package import bar</code> is executed it is basically equivalent to executing <code>from root.another_package import bar</code>. Since <code>another_package</code> is indeed a module inside the <code>root</code> package, the statement succeeds which results with the following effects (there may be more, but for this purposes let's focus on these 3):</p>
<ol>
<li><code>root</code> is loaded <em>if not previously loaded</em> (its' <code>__init__.py</code> is run)</li>
<li><code>bar</code> is imported into the current namespace</li>
<li><strong><code>another_package</code> is added as an attribute to <code>root</code> module object</strong></li>
</ol>
<p>Some developers are not completely aware of items 1 and 3.</p>
<p>Back to your question: Let's see what happens when <code>import root.package</code> is executed, in this order:</p>
<ol>
<li><code>root</code>'s <code>__init__.py</code> is run (because <code>root</code> wasn't loaded yet)</li>
<li><code>package</code>'s <code>__init__.py</code> is run (because <code>package</code> wasn't loaded yet)</li>
<li><code>from ..another_package import bar</code> is executed which has the side effects mentioned above, most notably, the (Yes. THE object. There is only one per each module, remember?) module object of <code>root</code> has the attribute <code>another_package</code> added to it.</li>
</ol>
<p>This explains why <code>another_package</code> appears in <code>root</code>'s <code>dir</code>. </p>
</div>
<span class="comment-copy">Thanks, now this makes perfect sense! I wasn't aware of the third effect indeed. Finally found an <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">explanation in the documentation</a></span>
