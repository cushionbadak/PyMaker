<div class="post-text" itemprop="text">
<pre><code>def list(a, b):
  for k in range(len(a)):
    a[k] = a[k] + b[len(b)-1-k] 
  return a
</code></pre>
<p>When it comes to manipulating lists, how does python execute a function like this one from a line by line basis. Specifically when i'm presented with an <code>len()</code> or <code>[k]</code> in this code how does it affect a list presented by a user? An example could be 
when <code>a = [1,3,5,7,9]</code>, <code>b = [1,4,9,8,6]</code> the returned (<code>a</code>) value is <code>[7, 11, 14, 11, 10]</code> I'm unsure how this process is completed in Python.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am mostly confused by the introduction of <code>[k]</code> in the equation as I don't know how it changes the list.</p>
</blockquote>
<p><code>someList[k]</code> is an <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow">item accessor</a> for the <code>k</code>th item of the list. So for a list <code>a = [2, 3, 5, 7]</code>, <code>a[k]</code> will return the kth number. For example:</p>
<pre><code>&gt;&gt;&gt; a = [2, 3, 5, 7]
&gt;&gt;&gt; a[0]
2
&gt;&gt;&gt; a[1]
3
&gt;&gt;&gt; k = 3
&gt;&gt;&gt; a[k]
7
</code></pre>
<p>Using the accessor alone will just read the value without affecting the list. Python however does allow you to also assign a value to it. Doing so will change the list’s item at that index:</p>
<pre><code>&gt;&gt;&gt; a = [2, 3, 5, 7]
&gt;&gt;&gt; a[2]
5
&gt;&gt;&gt; a[2] = 13 # we change the value
&gt;&gt;&gt; a[2]
13
&gt;&gt;&gt; a # the original list was modified
[2, 3, 13, 7]
</code></pre>
<p>So in your loop, when you have <code>a[k] = a[k] + something</code>, you get the value at the kth index, add <code>something</code> to it, and then update the original list at the same index. Since function parameters are passed by references, this updates your original list (and you later return the identical list object from your function).</p>
<p>As for the “something” part, you are doing this: <code>b[len(b)-1-k]</code>. Again, you are using an index to access a single item of the list <code>b</code>. But this time, the index is not a constant or a single variable, but a more complex expression: <code>len(b) - 1 - k</code>. <code>len(b)</code> will return the length of the list <code>b</code>, so ultimaltely, as you iterate through the <code>a</code> list from the beginning, you are iterating <code>b</code> from the end (assuming the same length for both lists). Python will execute the expression first, so in the end it will access b’s item at the index that results from that expression.</p>
</div>
<span class="comment-copy">I don’t understand your question. What do you mean with “execute a function from a line by line basis”?</span>
<span class="comment-copy">Looking at how Python looks at the code and executes it.</span>
<span class="comment-copy">Thank you! This answered all my questions</span>
