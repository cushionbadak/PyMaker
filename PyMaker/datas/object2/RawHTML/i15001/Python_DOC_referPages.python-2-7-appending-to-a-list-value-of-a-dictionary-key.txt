<div class="post-text" itemprop="text">
<p>I have the following data:</p>
<pre><code>data = [(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3)]
</code></pre>
<p>and I want to create a dictionary which contains key-list value, how can I do this with a dictionary comprehension?</p>
<p>i.e.:</p>
<pre><code>{1: [2,3,4]
 2: [1,2,3]
}
</code></pre>
<p>I have tried the following but the list gets overwritten on every iteration.</p>
<pre><code>{x: [y] for x,y in data}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use this dict-comprehension:</p>
<pre><code>d = {x: [v for u,v in data if u == x] for x,y in data}
</code></pre>
<p>Note, however, that this is pretty inefficient, as it will loop the entire list <code>n+1</code> times!</p>
<p>Better use just a plain-old <code>for</code> loop:</p>
<pre><code>d = {}
for x,y in data:
    d.setdefault(x, []).append(y)
</code></pre>
<p>Alternatively, you could also use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupy</code></a> (as discovered by yourself):</p>
<pre><code>groups = itertools.groupby(sorted(data), key=lambda x: x[0])
d = {k: [g[1] for g in group] for k, group in groups}
</code></pre>
<p>In all cases, <code>d</code> ends up being <code>{1: [2, 3, 4], 2: [1, 2, 3]}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html" rel="nofollow"><code>defaultdict</code></a> from collections module.</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; data = [(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3)]
&gt;&gt;&gt; m = defaultdict(list)
&gt;&gt;&gt; for i,j in data:
        m[i].append(j)


&gt;&gt;&gt; m
defaultdict(&lt;class 'list'&gt;, {1: [2, 3, 4], 2: [1, 2, 3]})
&gt;&gt;&gt; dict(m)
{1: [2, 3, 4], 2: [1, 2, 3]}
</code></pre>
</div>
<span class="comment-copy">@Bhargav Rao what do you mean by that?</span>
<span class="comment-copy">Do you want a solution using a dictionary comprehension only?</span>
<span class="comment-copy">yes that would be nice if possible or a combination of a list comprehension with a default dict seems good too</span>
<span class="comment-copy">I think your answer is pretty close and has given me a hint on how to do it, could you update your answer to include groupby in itertools? from itertools import groupby data = [(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3)] {key: [value[1] for value in groupValues] for key, groupValues in groupby(data, lambda x: x[0])}</span>
<span class="comment-copy">@Har Nice idea, using <code>groupby</code>. Added this to my answer. You could, however, also post your own answer to your question...</span>
<span class="comment-copy">Thanks @tobias_ it doesn't seem fair though as you guys have both put in the effort of replying to a question which I have asked.</span>
