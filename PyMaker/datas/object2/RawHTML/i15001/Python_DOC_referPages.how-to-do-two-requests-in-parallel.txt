<div class="post-text" itemprop="text">
<p>I have the following code which requests something from Amazon's API:</p>
<pre><code>params = {'Operation': 'GetRequesterStatistic', 'Statistic': 'NumberHITsAssignable', 'TimePeriod': 'LifeToDate'}
response = self.conn.make_request(action=None, params=params, path='/', verb='GET')
data['ActiveHITs'] = self.conn._process_response(response).LongValue

params = {'Operation': 'GetRequesterStatistic', 'Statistic': 'NumberAssignmentsPending', 'TimePeriod': 'LifeToDate'}
response = self.conn.make_request(action=None, params=params, path='/', verb='GET')
data['PendingAssignments'] = self.conn._process_response(response).LongValue
</code></pre>
<p>Each of these requests takes about 1s waiting for Amazon to return data. How would I run both of these in parallel, so it would (ideally) take 1s to run, instead of 2s?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow"><code>multiprocessing.Pool</code></a> to parallelize the requests:</p>
<pre><code>from multiprocessing import Pool

class Foo:
    def __fetch(self, statistic):
        params = {
            'Operation': 'GetRequesterStatistic',
            'Statistic': statistic,
            'TimePeriod': 'LifeToDate'
        }
        response = self.conn.make_request(
            action=None, params=params, path='/', verb='GET'
        )
        return self.conn._process_response(response).LongValue

    def get_stats(self):
        pool = Pool()
        results = pool.map(self.__fetch, [
            'NumberHITsAssignable', 'NumberAssignmentsPending'
        ])
        data['ActiveHITs'], data['PendingAssignments'] = results
</code></pre>
<p>this has the nice effect of being able to parallelize any given number of requests. By default, a worker per core is created, you can change the number by passing it a parameter to the <code>Pool</code>.</p>
</div>
<span class="comment-copy"><a href="https://github.com/kennethreitz/grequests" rel="nofollow noreferrer">github.com/kennethreitz/grequests</a></span>
