<div class="post-text" itemprop="text">
<p>I have a text file with the following content:</p>
<pre><code> ðŸ”´ðŸ”´ðŸ”´ðŸ”´ðŸ”´\n==================\0No. 4â™¨ ==\nðŸ“Œ \nâœ…IHappy Holi\nâœ…Ground Floor or Second Floor\n9910080224\nemailaddress@gmail.com
</code></pre>
<p>I have a python code running in the server to find the indices which I want to pass with the text for the highlighting purposes on the client. Following is the code for that:</p>
<pre><code>import re
f = open('data.json', 'r')
text = f.readline().strip().decode('UTF-8').encode('UTF-8')
f.close()

for m in re.finditer(r'emailaddress', text, flags=re.IGNORECASE): 
    s = m.start()
    e = m.end()
    print s, e
    print text[s:e]
</code></pre>
<p>The output is:</p>
<pre><code>123 135
emailaddress
</code></pre>
<p>Now on the client side, I have the java code (on android). HOwever these indices dont work at all.</p>
<pre><code>public class HelloWorld {
    public static void main(String[] args) {
        String text = "ðŸ”´ðŸ”´ðŸ”´ðŸ”´ðŸ”´\n==================\0No. 4â™¨ ==\nðŸ“Œ \nâœ…IHappy Holi\nâœ…Ground Floor or Second Floor\n9910080224\nemailaddress@gmail.com";
        System.out.println(text.substring(**115**));
    }
}
</code></pre>
<p>And the output is:</p>
<pre><code>l.com
</code></pre>
<p>I am sure I am making some mistake in the encoding of the strings. Can someone help me with that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python side works with UTF-8 encoded data (which vary in size), the Java code with UTF-16 <a href="http://unicode.org/glossary/#code_unit" rel="nofollow noreferrer">codeunits</a><sup>*</sup>. Indices into one do not map into the other.</p>
<p>You can see the issue when applying the index to your sample string, both as Unicode string and encoded to UTF-8, in a Python 2.7 UCS-2 build (which uses UTF-16 surrogate pairs like Java does):</p>
<pre><code>&gt;&gt;&gt; u"ðŸ”´ðŸ”´ðŸ”´ðŸ”´ðŸ”´\n==================\0No. 4â™¨ ==\nðŸ“Œ \nâœ…IHappy Holi\nâœ…Ground Floor or Second Floor\n9910080224\nemailaddress@gmail.com"[115:]
u'l.com'
&gt;&gt;&gt; u"ðŸ”´ðŸ”´ðŸ”´ðŸ”´ðŸ”´\n==================\0No. 4â™¨ ==\nðŸ“Œ \nâœ…IHappy Holi\nâœ…Ground Floor or Second Floor\n9910080224\nemailaddress@gmail.com".encode('utf8')[115:]
'\nemailaddress@gmail.com'
</code></pre>
<p>UTF-8 encodes Unicode codepoints to 1 and 4 codeunits <em>per codepoint</em>; how many codeunits are used then depends on the text:</p>
<pre><code>&gt;&gt;&gt; len(u'abc'.encode('utf8'))
3
&gt;&gt;&gt; len(u'Ã¥ÃŸÃ§'.encode('utf8'))
6
</code></pre>
<p>while decoding Unicode to an internal UTF-16 representation (like Java does, and Python 2.7 with the default narrow UCS-2 build), most characters use just the one codeunit, while characters outside of the BMP (like emoticons) use 2:</p>
<pre><code>&gt;&gt;&gt; u"ðŸ”´ðŸ“Œâœ…"
u'\U0001f534\U0001f4cc\u2705'
&gt;&gt;&gt; len(u"ðŸ”´ðŸ“Œâœ…")
5
&gt;&gt;&gt; u"ðŸ”´ðŸ“Œâœ…".encode('utf8')
'\xf0\x9f\x94\xb4\xf0\x9f\x93\x8c\xe2\x9c\x85'
&gt;&gt;&gt; len(u"ðŸ”´ðŸ“Œâœ…".encode('utf8'))
11
</code></pre>
<p>Either run your regex on a Unicode value in Python (e.g. decode from UTF-8) or alter the Java code to operate on UTF-8 bytes rather than UTF-16 codeunits.</p>
<p>If you are using Unicode in Python, do take into account that you can also build the Python binary using UCS-4 for Unicode codepoints; you'd never see surrogates and the length of the string in Python will differ from that of the Java representation. Python 3.3 and up use a <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-393" rel="nofollow noreferrer">flexible storage</a> where the internal representation will never use surrogates but instead scales to meet the requirements for each individual string.</p>
<p>In that case you may need to use <a href="https://jcp.org/en/jsr/detail?id=204" rel="nofollow noreferrer">JSR-204 methods</a> to access codepoints on the Java side; I suspect that <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#offsetByCodePoints%28int,%20int%29" rel="nofollow noreferrer"><code>String.offsetByCodePoints()</code></a> would be helpful here but I am not a Java developer.</p>
<p>You may want to brush up on Unicode and codecs; I recommend you read:</p>
<ul>
<li><p><a href="http://joelonsoftware.com/articles/Unicode.html" rel="nofollow noreferrer">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a> by Joel Spolsky</p></li>
<li><p><a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow noreferrer">Pragmatic Unicode</a> by Ned Batchelder</p></li>
<li><p>The <a href="http://docs.python.org/2/howto/unicode.html" rel="nofollow noreferrer">Python Unicode HOWTO</a></p></li>
</ul>
<hr/>
<p><sup>*</sup> Java's String type uses UTF-16 words, which are 2 bytes per codeunit. For characters outside the BMP, that means <em>two</em> codeunits are used per character using <a href="https://stackoverflow.com/questions/5903008/what-is-a-surrogate-pair-in-java">surrogate pairs</a>.</p>
</div>
<span class="comment-copy">@Deduplicator: further editing. Lets all switch to Python 3 where all this is hidden a little better.</span>
<span class="comment-copy">@Deduplicator: further hacking at the text has taken place.</span>
<span class="comment-copy">Thank you much for the links. I think I have a better(?) understanding of what I am doing. However I am still facing the problem.</span>
<span class="comment-copy">@mirchiseth: so the path for you isn't clear? Either encode to UTF-8 in Java (so you get <code>bytes[]</code>, then slice from there, perhaps decode from UTF-8 afterward) or handle the string in Python as Unicode, but take into account that you then in Python you may have to account for surrogate pairs (if <code>sys.maxunicode == 0xffff</code> you have a UCS-2 build), and in Java you <i>certainly</i> will have to.</span>
<span class="comment-copy">i figured out finally that there is some problem in the python version. With python version 2.7.8 it is working perfectly fine. However I am facing trouble now in fixing the versions of numpy and scipy etc..</span>
