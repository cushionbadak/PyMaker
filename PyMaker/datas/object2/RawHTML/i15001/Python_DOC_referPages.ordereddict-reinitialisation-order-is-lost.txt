<div class="post-text" itemprop="text">
<p>My class is inherited from OrderedDict and I want to to reinitialise the dictionary. But simplified code below changes only values of keys - order of elements remains the same: </p>
<pre><code>from collections import OrderedDict

class Example(OrderedDict):
    def __init__(self,d):
        OrderedDict.__init__(self,d)
        #something that should be done only once - at instance creation

    def reinit(self,d):
        OrderedDict.__init__(self,d)

d=Example([(1,1),(2,2)])
d.reinit([(2,20),(1,10)])

print(d) #Example([(1, 10), (2, 20)])
</code></pre>
<p>So the question is: what is happening inside <code>OrderedDict.__init__</code> here and is it supposed to work this way? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>OrderedDict.__init__()</code> doesn't clear the dictionary. It merely uses the equivalent of <code>self.update()</code> to add the elements to the dictionary. All you did was add <em>already existing keys</em>.</p>
<p>You'd have to first remove those keys or clear the dictionary altogether:</p>
<pre><code>def reinit(self, d):
    self.clear()
    OrderedDict.__init__(self, d)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; class Example(OrderedDict):
...     def reinit(self, d):
...         self.clear()
...         OrderedDict.__init__(self, d)
... 
&gt;&gt;&gt; d=Example([(1,1),(2,2)])
&gt;&gt;&gt; d.reinit([(2,20),(1,10)])
&gt;&gt;&gt; print(d)
Example([(2, 20), (1, 10)])
</code></pre>
<p>You can always look at the source code for most Python library modules; the <a href="https://docs.python.org/3/library/collections.html" rel="nofollow"><code>collections</code> documentation</a> links you to the <a href="https://hg.python.org/cpython/file/3.4/Lib/collections/__init__.py#l26" rel="nofollow">source code with the <code>OrdededDict</code> class</a>.</p>
</div>
