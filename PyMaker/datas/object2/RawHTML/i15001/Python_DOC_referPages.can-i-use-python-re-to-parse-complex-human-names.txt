<div class="post-text" itemprop="text">
<p>So one of my major pain points is name comprehension and piecing together household names &amp; titles. I have a 80% solution with a pretty massive regex I put together this morning that I probably shouldn't be proud of (but am anyway in a kind of sick way) that matches the following examples correctly:</p>
<pre><code>John Jeffries
John Jeffries, M.D.
John Jeffries, MD
John Jeffries and Jim Smith
John and Jim Jeffries
John Jeffries &amp; Jennifer Wilkes-Smith, DDS, MD
John Jeffries, CPA &amp; Jennifer Wilkes-Smith, DDS, MD
John Jeffries, C.P.A &amp; Jennifer Wilkes-Smith, DDS, MD
John Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD
John Jeffries M.D. and Jennifer Holmes CPA
John Jeffries M.D. &amp; Jennifer Holmes CPA
</code></pre>
<p>The regex matcher looks like this:</p>
<pre><code>(?P&lt;first_name&gt;\S*\s*)?(?!and\s|&amp;\s)(?P&lt;last_name&gt;[\w-]*\s*)(?P&lt;titles1&gt;,?\s*(?!and\s|&amp;\s)[\w\.]*,*\s*(?!and\s|&amp;\s)[\w\.]*)?(?P&lt;connector&gt;\sand\s|\s*&amp;*\s*)?(?!and\s|&amp;\s)(?P&lt;first_name2&gt;\S*\s*)(?P&lt;last_name2&gt;[\w-]*\s*)?(?P&lt;titles2&gt;,?\s*[\w\.]*,*\s*[\w\.]*)?
</code></pre>
<p>(wtf right?) </p>
<p>For convenience: <a href="http://www.pyregex.com/" rel="nofollow">http://www.pyregex.com/</a></p>
<p>So, for the example:</p>
<pre><code>'John Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD'
</code></pre>
<p>the regex results in a group dict that looks like:</p>
<pre><code>connector: &amp;
first_name: John
first_name2: Jennifer
last_name: Jeffries
last_name2: Wilkes-Smith
titles1: , C.P.A., MD
titles2: , DDS, MD
</code></pre>
<p>I need help with the final step that has been tripping me up, comprehending possible middle names. </p>
<p>Examples include:</p>
<pre><code>'John Jimmy Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD'
'John Jeffries, C.P.A., MD &amp; Jennifer Jenny Wilkes-Smith, DDS, MD'
</code></pre>
<p>Is this possible and is there a better way to do this without machine learning? Maybe I can use <a href="https://pypi.python.org/pypi/nameparser" rel="nofollow">nameparser</a> (discovered after I went down the regex rabbit hole) instead with some way to determine whether or not there are multiple names? The above matches 99.9% of my cases so I feel like it's worth finishing.</p>
<blockquote>
<p><strong>TLDR</strong>: I can't figure out if I can use some sort of lookahead or lookbehind to make sure that the possible middle name only matches if
  there is a last name after it.</p>
</blockquote>
<p>Note: I don't need to parse titles like Mr. Mrs. Ms., etc., but I suppose that can be added in the same manner as middle names.</p>
<blockquote>
<p><strong>Solution Notes</strong>: First, follow Richard's advice and don't do this. Second, investigate NLTK or use/contribute to <a href="https://pypi.python.org/pypi/nameparser" rel="nofollow">nameparser</a> for a more robust solution if necessary.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions like this are the work of the Dark One.</p>
<p>Who, looking at your code later, will be able to understand what is going on? Will you even?</p>
<p>How will you test all of the possible edge cases?</p>
<p>Why have you chosen to use a regular expression at all? If the tool you are using is so difficult to work with, it suggests that maybe another tool would be better.</p>
<p>Try this:</p>
<pre><code>import re

examples = [
  "John Jeffries",
  "John Jeffries, M.D.",
  "John Jeffries, MD",
  "John Jeffries and Jim Smith",
  "John and Jim Jeffries",
  "John Jeffries &amp; Jennifer Wilkes-Smith, DDS, MD",
  "John Jeffries, CPA &amp; Jennifer Wilkes-Smith, DDS, MD",
  "John Jeffries, C.P.A &amp; Jennifer Wilkes-Smith, DDS, MD",
  "John Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD",
  "John Jeffries M.D. and Jennifer Holmes CPA",
  "John Jeffries M.D. &amp; Jennifer Holmes CPA",
  'John Jimmy Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD',
  'John Jeffries, C.P.A., MD &amp; Jennifer Jenny Wilkes-Smith, DDS, MD'
]

def IsTitle(inp):
  return re.match('^([A-Z]\.?)+$',inp.strip())

def ParseName(name):
  #Titles are separated from each other and from names with ","
  #We don't need these, so we remove them
  name = name.replace(',',' ') 
  #Split name and titles on spaces, combining adjacent spaces
  name = name.split()
  #Build an output object
  ret_name = {"first":None, "middle":None, "last":None, "titles":[]}
  #First string is always a first name
  ret_name['first'] = name[0]
  if len(name)&gt;2: #John Johnson Smith/PhD
    if IsTitle(name[2]): #John Smith PhD
      ret_name['last']   = name[1]
      ret_name['titles'] = name[2:]
    else:                #John Johnson Smith, PhD, MD
      ret_name['middle'] = name[1]
      ret_name['last']   = name[2]
      ret_name['titles'] = name[3:]
  elif len(name) == 2:   #John Johnson
    ret_name['last'] = name[1]
  return ret_name

def CombineNames(inp):
  if not inp[0]['last']:
    inp[0]['last'] = inp[1]['last']

def ParseString(inp):
  inp = inp.replace("&amp;","and")    #Names are combined with "&amp;" or "and"
  inp = re.split("\s+and\s+",inp) #Split names apart
  inp = map(ParseName,inp)
  CombineNames(inp)
  return inp

for e in examples:
  print e
  print ParseString(e)
</code></pre>
<p>Output:</p>
<pre><code>John Jeffries
[{'middle': None, 'titles': [], 'last': 'Jeffries', 'first': 'John'}]
John Jeffries, M.D.
[{'middle': None, 'titles': ['M.D.'], 'last': 'Jeffries', 'first': 'John'}]
John Jeffries, MD
[{'middle': None, 'titles': ['MD'], 'last': 'Jeffries', 'first': 'John'}]
John Jeffries and Jim Smith
[{'middle': None, 'titles': [], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': [], 'last': 'Smith', 'first': 'Jim'}]
John and Jim Jeffries
[{'middle': None, 'titles': [], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': [], 'last': 'Jeffries', 'first': 'Jim'}]
John Jeffries &amp; Jennifer Wilkes-Smith, DDS, MD
[{'middle': None, 'titles': [], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['DDS', 'MD'], 'last': 'Wilkes-Smith', 'first': 'Jennifer'}]
John Jeffries, CPA &amp; Jennifer Wilkes-Smith, DDS, MD
[{'middle': None, 'titles': ['CPA'], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['DDS', 'MD'], 'last': 'Wilkes-Smith', 'first': 'Jennifer'}]
John Jeffries, C.P.A &amp; Jennifer Wilkes-Smith, DDS, MD
[{'middle': None, 'titles': ['C.P.A'], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['DDS', 'MD'], 'last': 'Wilkes-Smith', 'first': 'Jennifer'}]
John Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD
[{'middle': None, 'titles': ['C.P.A.', 'MD'], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['DDS', 'MD'], 'last': 'Wilkes-Smith', 'first': 'Jennifer'}]
John Jeffries M.D. and Jennifer Holmes CPA
[{'middle': None, 'titles': ['M.D.'], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['CPA'], 'last': 'Holmes', 'first': 'Jennifer'}]
John Jeffries M.D. &amp; Jennifer Holmes CPA
[{'middle': None, 'titles': ['M.D.'], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['CPA'], 'last': 'Holmes', 'first': 'Jennifer'}]
John Jimmy Jeffries, C.P.A., MD &amp; Jennifer Wilkes-Smith, DDS, MD
[{'middle': 'Jimmy', 'titles': ['C.P.A.', 'MD'], 'last': 'Jeffries', 'first': 'John'}, {'middle': None, 'titles': ['DDS', 'MD'], 'last': 'Wilkes-Smith', 'first': 'Jennifer'}]
John Jeffries, C.P.A., MD &amp; Jennifer Jenny Wilkes-Smith, DDS, MD
[{'middle': None, 'titles': ['C.P.A.', 'MD'], 'last': 'Jeffries', 'first': 'John'}, {'middle': 'Jenny', 'titles': ['DDS', 'MD'], 'last': 'Wilkes-Smith', 'first': 'Jennifer'}]
</code></pre>
<p>This took less than fifteen minutes and, at each stage, the logic is clear and the program can be debugged in pieces. While one-liners are cute, clarity and testability should take precedence.</p>
</div>
<span class="comment-copy">Python's <a href="http://www.nltk.org/" rel="nofollow noreferrer">Natural Language Toolkit (NLTK)</a> is <i>much</i> better-suited for this task. Check this out: <a href="http://timmcnamara.co.nz/post/2650550090/extracting-names-with-6-lines-of-python-code" rel="nofollow noreferrer">timmcnamara.co.nz/post/2650550090/…</a></span>
<span class="comment-copy">@CurtisMattoon Ohh. That looks nice. I was hacking away at this regex in order to get some data out "RIGHT NOW" but NLTK looks like a great long-term solution (and maybe short-term, too). I'm a junior python dev so I don't know about all the solutions out there.</span>
<span class="comment-copy">Even though there might be better tools for your task, you could use <code>re.VERBOSE</code> flag to make your current regex more readable. <a href="https://docs.python.org/3/library/re.html#re.VERBOSE" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.VERBOSE</a></span>
<span class="comment-copy">Also, you can treat your pattern as you would a string. E.g. <code>r'%s' % 'cat'</code>.</span>
<span class="comment-copy">Before you continue, read this: <a href="http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/" rel="nofollow noreferrer">kalzumeus.com/2010/06/17/…</a></span>
<span class="comment-copy">I repent my use of dark magic! I hope this helps others avoid the same. I'll accept this as the solution and add a note pointing people to NLTK and the nameparser lib.</span>
