<div class="post-text" itemprop="text">
<p>I am writing an Unit-Test for a Django class-based view.</p>
<pre><code>class ExampleView(ListView):

     def get_context_data(self, **kwargs):
         context = super(EampleView, self).get_context_data(**kwargs)
         ## do something else

     def get_queryset(self, **kwargs):
         return self.get_data()

     def get_data(self):
         call_external_API()
         ## do something else
</code></pre>
<p>The key issue is that <code>call_external_API()</code> in <code>get_data()</code>.</p>
<p>When I am writing Unit-test, I don't really want to call external API to get data. First, that will cost my money; second, I can easily test that API in another test file.</p>
<p>I also can easily test this <code>get_data()</code> method by having an unit-test only for it and mock the output of <code>call_external_API()</code>.</p>
<p>However, when I test this whole class-based view, I simply will do</p>
<pre><code>self.client.get('/example/url/')
</code></pre>
<p>and check the status code and context data to verify it.</p>
<p>In this case, how do I mock this <code>call_external_API()</code> when I am testing the whole class-based view?</p>
</div>
<div class="post-text" itemprop="text">
<p>What your are looking for is <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow"><code>patch</code> from <code>unittest.mock</code></a>. You can patch <code>call_external_api()</code> by a <code>MagicMock()</code> object. </p>
<p>Maybe you want to patch <code>call_external_api()</code> for all your tests in class. <code>patch</code> give to you essentialy two way to do it</p>
<ul>
<li>decorate the test class</li>
<li>use <code>start()</code> and <code>stop()</code> in <code>setUp()</code> and <code>tearDown()</code> respectively</li>
</ul>
<p>Decorate a class by <code>patch</code> decorator is like decorate all test methods (see documentation for details) and the implementation will be very neat. Follow example assume that your view is in <code>my_view</code> module.</p>
<pre><code>@patch("my_view.call_external_api", autospec=True)
class MyTest(unittest.TestCase):
    def setUp(self):
        self.client = Client()

    def test_get_data(self, mock_call_external_api):
        self.client.get('/example/url/')
        self.assertTrue(mock_call_external_api.called)
</code></pre>
<p>More sophisticate examples can be build and you can check how you call <code>mock_call_external_api</code> and set return value or side effects for your API.</p>
<p>I don't give any example about start and stop way to do it (I don't really like it) but I would like to spend some time on two <em>details</em>:</p>
<ol>
<li>I assumed that in your <code>my_view</code> module you define <code>call_external_api</code> or you import it by <code>from my_API_module import call_external_api</code> otherwise you should pay some attention on <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">Where to patch</a></li>
<li>I used <code>autospec=True</code>: IMHO it should be used in every patch call and <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">documentation</a> explain why very well</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can mock the <code>call_external_api()</code> method when testing the classed based view with something like this:</p>
<pre><code>import modulea
import unittest
from mock import Mock

class ExampleTestCase(unittest.TestCase):

     def setUp(self):
         self.call_external_api = modulea.call_external_api

     def tearDown(self):
         modulea.call_external_api = self.call_external_api

     def get_data(self):
         modulea.call_external_api = Mock(return_value="foobar")
         modulea.call_external_api()
         ## do something else
</code></pre>
</div>
<span class="comment-copy">Not sure what the difference is in your two scenarios. Why can't you just mock it in the same way?</span>
<span class="comment-copy">This is the answer I am looking for. Thank you!</span>
