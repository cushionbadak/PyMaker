<div class="post-text" itemprop="text">
<p>Is there a way to parse a URL (with some python library) and return a python dictionary with the keys and values of a query parameters part of the URL?</p>
<p>For example:</p>
<pre><code>url = "http://www.example.org/default.html?ct=32&amp;op=92&amp;item=98"
</code></pre>
<p>expected return:</p>
<pre><code>{'ct':32, 'op':92, 'item':98}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/urllib.parse.html" rel="noreferrer"><code>urllib.parse</code> library</a>:</p>
<pre><code>&gt;&gt;&gt; from urllib import parse
&gt;&gt;&gt; url = "http://www.example.org/default.html?ct=32&amp;op=92&amp;item=98"
&gt;&gt;&gt; parse.urlsplit(url)
SplitResult(scheme='http', netloc='www.example.org', path='/default.html', query='ct=32&amp;op=92&amp;item=98', fragment='')
&gt;&gt;&gt; parse.parse_qs(parse.urlsplit(url).query)
{'item': ['98'], 'op': ['92'], 'ct': ['32']}
&gt;&gt;&gt; dict(parse.parse_qsl(parse.urlsplit(url).query))
{'item': '98', 'op': '92', 'ct': '32'}
</code></pre>
<p>The <code>urllib.parse.parse_qs()</code> and <code>urllib.parse.parse_qsl()</code> methods parse out query strings, taking into account that keys can occur more than once and that order may matter.</p>
<p>If you are still on Python 2, <code>urllib.parse</code> was called <a href="http://docs.python.org/2/library/urlparse.html" rel="noreferrer"><code>urlparse</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, the values of the dict from <code>parse_qs</code> are in a list, because there might be multiple values. If you just want the first one:</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import urlsplit, parse_qs
&gt;&gt;&gt;
&gt;&gt;&gt; url = "http://www.example.org/default.html?ct=32&amp;op=92&amp;item=98"
&gt;&gt;&gt; query = urlsplit(url).query
&gt;&gt;&gt; params = parse_qs(query)
&gt;&gt;&gt; params
{'item': ['98'], 'op': ['92'], 'ct': ['32']}
&gt;&gt;&gt; dict(params)
{'item': ['98'], 'op': ['92'], 'ct': ['32']}
&gt;&gt;&gt; {k: v[0] for k, v in params.items()}
{'item': '98', 'op': '92', 'ct': '32'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you prefer not to use a parser:</p>
<pre><code>url = "http://www.example.org/default.html?ct=32&amp;op=92&amp;item=98"
url = url.split("?")[1]
dict = {x[0] : x[1] for x in [x.split("=") for x in url[1:].split("&amp;") ]}
</code></pre>
<p>So I won't delete what's above but it's definitely not what you should use.</p>
<p>I think I read a few of the answers and they looked a little complicated, incase you're like me, don't use my solution.</p>
<p>Use this:</p>
<pre><code>from urllib import parse
params = dict(parse.parse_qsl(parse.urlsplit(url).query))
</code></pre>
<p>and for Python 2.X</p>
<pre><code>from urllib import urlparse as parse
</code></pre>
<p>I know this is the same as the accepted answer, just in a one liner that can be copied.</p>
</div>
<div class="post-text" itemprop="text">
<p>For python 2.7</p>
<pre><code>In [14]: url = "http://www.example.org/default.html?ct=32&amp;op=92&amp;item=98"

In [15]: from urlparse import urlparse, parse_qsl

In [16]: parse_url = urlparse(url)

In [17]: query_dict = dict(parse_qsl(parse_url.query))

In [18]: query_dict
Out[18]: {'ct': '32', 'item': '98', 'op': '92'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I agree about not reinventing the wheel but sometimes (while you're learning) it helps to build a wheel in order to understand a wheel. :) So, from a purely academic perspective, I offer this with the caveat that using a dictionary assumes that name value pairs are unique (that the query string does not contain multiple records).</p>
<pre><code>url = 'http:/mypage.html?one=1&amp;two=2&amp;three=3'

page, query = url.split('?')

names_values_dict = dict(pair.split('=') for pair in query.split('&amp;'))

names_values_list = [pair.split('=') for pair in query.split('&amp;')]
</code></pre>
<p>I'm using version 3.6.5 in the Idle IDE.</p>
</div>
<span class="comment-copy">Or <code>import urllib.parse as urlparse</code> for Python3.</span>
<span class="comment-copy">and for old python (2.4 and earlier) these two functions are found in the <code>cgi</code> module with the same name</span>
<span class="comment-copy">This is not unique to Python 3, Python 2 <code>urllib.parse_qs</code> also returns lists for the values. I specifically mention this in my answer, by the way, you may want to use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl" rel="nofollow noreferrer"><code>urllib.parse_qsl()</code></a> instead and past the resulting list to <code>dict()</code> if you just want single values.</span>
<span class="comment-copy">Seems like the difference with <code>parse_qls</code> is that since it returns a list of tuples, converting <i>that</i> to a dict will keep the <b>last</b> value instead of the <b>first</b>. This of course assumes there were multiple values to begin with.</span>
<span class="comment-copy">Parsing involves more than just splitting the string. You also need to handle URL encoding (including the <code>+</code>), and the <code>urllib.parse</code> also either raises or ignores errors for you as requested. I'm not sure why you'd want to reinvent this wheel when it is part of the standard library.</span>
