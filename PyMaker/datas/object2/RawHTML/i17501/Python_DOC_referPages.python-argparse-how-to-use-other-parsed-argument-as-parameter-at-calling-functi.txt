<div class="post-text" itemprop="text">
<p>I am trying to create an user interface using argparse module.</p>
<p>One of the argument need to be converted, so I use the type keyword:</p>
<pre><code>add_argument('positional', ..., type=myfunction)
</code></pre>
<p>and there is another optional argument:</p>
<pre><code>add_argument('-s', dest='switch', ...) 
</code></pre>
<p>in addition, I have</p>
<pre><code>parsed_argument=parse_args()
</code></pre>
<p>However, in <code>myfunction</code>, I hope I can use an additional parameter to control the behavior, which is the optional argument above, i.e.</p>
<pre><code>def myfunction(positional, switch=parsed_argument.switch): 
     ...
</code></pre>
<p>How can I achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple answer: You canâ€™t. The arguments are parsed separately, and there is no real guarantee that some order is maintained. Instead of putting your logic into the argument type, just store it as a string and do your stuff after parsing the command line:</p>
<pre><code>parser.add_argument('positional')
parser.add_argument('-s', '--switch')

args = parser.parse_args()

myfunction(args.positional, switch=args.switch)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure I did understand correctly what you want to achieve, but if what you want to do is something that looks like:</p>
<pre><code>myprog.py cmd1 --switcha
myprog.py cmd2 --switchb
</code></pre>
<p>yes you can, you need to use subparsers. I wrote a good example of it for a little <a href="https://github.com/guyzmo/pystackoverflow/blob/master/stackoverflow/cli.py" rel="nofollow">PoC I wrote to access stackoverflow's API from CLI</a>. The whole logic is a bit long to put thoroughly here, but mainly the idea is:</p>
<ol>
<li>create your parser using <code>parser = argparse.ArgumentParser(...)</code></li>
<li>create the subparsers using <code>subparsers = parser.add_subparsers(...)</code></li>
<li>add the commands with things like `subparser.add_parser('mycommand', help='Its only a command').set_defaults(func=mycmd_fn) where</li>
<li><code>mycmd_fn</code> takes <code>args</code> as parameters where you have all the switches you issued to the command!</li>
</ol>
<p>the difference from what you ask, is that you'll need one function per command, and not one function with the <code>positional</code> argument as first argument. But you can leverage that easily by having mycmd_fn being like: <code>mycmd_fn = lambda *args: myfunction('mycmd', *args)</code></p>
<p>HTH</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation:</p>
<blockquote>
<p>type= can take any callable that takes a single string argument and returns the converted value:</p>
</blockquote>
<p>Python functions like <code>int</code> and <code>float</code> are good examples of a type function should be like.  <code>int</code> takes a string and returns a number.  If it can't convert the string it raises a <code>ValueError</code>.    Your function could do the same.  <code>argparse.ArgumentTypeError</code> is another option.  <code>argparse</code> isn't going to pass any optional arguments to it.  Look at the code for <code>argparse.FileType</code> to see a more elaborate example of a custom <code>type</code>.</p>
<p><code>action</code> is another place where you can customize behavior.  The documentation has an example of a custom Action.  Its arguments include the <code>namespace</code>, the object where the parser is collecting the values it will return to you.  This object contains any arguments have already been set.  In theory your <code>switch</code> value will be available there - if it occurs first.</p>
<p>There are many SO answers that give custom <code>Actions</code>.</p>
<p>Subparsers are another good way of customizing the handling of arguments. </p>
<p>Often it is better to check for the interaction of arguments after <code>parse_args</code>.  In your case 'switch' could occur after the positional and still have effect.  And <code>argparse.Error</code> lets you use the <code>argparse</code> error mechanism (e.g. displaying the usage) </p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/18657151/argparse-accessing-multiple-arguments-at-once">Argparse - accessing multiple arguments at once</a></span>
<span class="comment-copy">I'm not sure what you're trying to do here... Can you show an example of what you want your commands look like? Are you trying to do some git-like behavior?</span>
<span class="comment-copy">Then how can I raise an argparse-like exception, such as <code>error: unrecognized arguments</code>, in stead of print out the Trackback?</span>
<span class="comment-copy">@user1824372 You can throw argparse errors using <a href="http://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.error" rel="nofollow noreferrer"><code>parser.error(message)</code></a>.</span>
<span class="comment-copy">Nice, that is what I want. Thank you</span>
