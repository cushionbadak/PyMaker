<div class="post-text" itemprop="text">
<p>I am asking this questions after many hours of searching and trying various examples, but I can not seem to call a function from a loaded DLL.  I think if someone could show me one example, I could understand what I am doing wrong, and make some progress.</p>
<p>First, using Python 3.3.3, I can load the DLL, as such:</p>
<pre><code>import ctypes
ftdi=ctypes.cdll.LoadLibrary('C:\\Python33\\DLLs\\FTCJTAG.dll')
</code></pre>
<p>And I can call a function that does not require any parameters, and get a number back that makes sense.  But after many tries, I can not figure out how to pass a parameter to a function (ie, pointer, strings, numbers). </p>
<p>For example, from <code>FTCJTAG.h</code>, we have this:</p>
<pre><code>FTCJTAG_API
FTC_STATUS WINAPI JTAG_GetDllVersion(LPSTR lpDllVersionBuffer, DWORD dwBufferSize);
</code></pre>
<p>And from the DLL programmers guide:</p>
<pre><code>FTC_STATUS JTAG_GetDllVersion(LPSTR lpDllVersionBuffer, DWORD dwBufferSize)

This function returns the version of this DLL.
Parameters

lpDllVersionBuffer Pointer to the buffer that receives the version of this DLL. 
The string will be NULL terminated.

dwBufferSize Length of the buffer created for the device name string. Set buffer 
length to a minimum of 10 characters.

Return Value

Returns FTC_SUCCESS if successful, otherwise the return value will be one of the
following error codes:

FTC_NULL_DLL_VERSION_BUFFER_POINTER
FTC_DLL_VERSION_BUFFER_TOO_SMALL*
</code></pre>
<p>So, I try this:</p>
<pre><code>version_string = ctypes.c_char * 10
string_ptr=version_string()
ftdi.JTAG_GetDllVersion(string_ptr,ctypes.c_long(10))
</code></pre>
<p>And I get this back:</p>
<pre><code>Traceback (most recent call last):
File "C:\Python33\Scripts\FTDI.py", line 5, in &lt;module&gt;
ftdi.JTAG_GetDllVersion(string_ptr,ctypes.c_long(10))
ValueError: Procedure called with not enough arguments (8 bytes missing) or wrong
calling convention
</code></pre>
<p>I have tired many different ways to pass a pointer to the function, or the length of the string, and still no success.</p>
<p>Can someone please provide an example of how to pass these parameters to this function?  I am sure once I see a working example, I can figure out how to call the rest of the functions in this DLL.</p>
<p>Thanks for your time!</p>
<p>EDIT:</p>
<p>@ Daniel:  Thanks for the suggestion to use 'windll' instead of 'cdll', as now the function call above executes without error.  However, if I try to call another function, I am getting a different error (and one I have also searched long and hard to solve):</p>
<pre><code>FTC_STATUS WINAPI JTAG_GetNumDevices(LPDWORD lpdwNumDevices);
</code></pre>
<p>To call this function, I am doing this:</p>
<pre><code>x = ctypes.c_ulong
x_ptr = x()
ftdi.JTAG_GetNumDevices(x_ptr)
</code></pre>
<p>And the error is this:</p>
<pre><code>Traceback (most recent call last):
File "C:\Python33\Scripts\FTDI.py", line 9, in &lt;module&gt;
ftdi.JTAG_GetNumDevices(x_ptr)
OSError: exception: access violation writing 0x00000000
</code></pre>
<p>What I gather is I am not passing the proper address of the pointer to the function, but again, after much searching, not finding an answer.  I am sure it is gong to be something simple . . .  :)  </p>
<p>Thanks again for your time!</p>
</div>
<div class="post-text" itemprop="text">
<p>The  <a href="http://docs.python.org/3/library/ctypes.html#calling-functions" rel="nofollow">documentation for ctypes</a> says that that exception is also raised if you're trying to call it with the wrong calling convention. So you might need to load it with <code>windll</code> instead of <code>cdll</code>.</p>
</div>
<span class="comment-copy"><code>WINAPI</code> is a macro for <code>__stdcall</code> (ctypes <code>WinDLL</code> and <code>windll</code>). Refer to "Windows Data Types" at <a href="http://msdn.microsoft.com/en-us/library/aa383751" rel="nofollow noreferrer">MSDN</a>. This modifier is ignored on 64-bit Windows, which has only 1 calling convention. Refer to the list of x86 calling conventions on <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#List_of_x86_calling_conventions" rel="nofollow noreferrer">Wikipedia</a>.</span>
<span class="comment-copy">Use the type definitions in <code>ctypes.wintypes</code> to make your life simpler. Set the function pointer's <code>argtypes</code> to have ctypes check argument types, e.g. <code>ftdi.JTAG_GetNumDevices.argtypes = [wintypes.LPDWORD]</code>. Then pass the argument by reference: <code>x = wintypes.DWORD(); result = ftdi.JTAG_GetNumDevices(ctypes.byref(x))</code>.</span>
<span class="comment-copy">@eryksun, Thanks for the the great info!  I am now able to call the two functions with no errors.  I was able to print out the string the JTAG_GetDllVersion returns ('2.0'), and JTAG_GetNumDevices returns a 0, which I think is correct as I think I have a hi-speed device attached.  Both calls return a status of 0, which means SUCCESS.  Thanks again for helping out a novice!! :)</span>
<span class="comment-copy">@eryksun, I remember some of my C/C++ from years ago, and remembered the difference between passing a value, and passing a pointer.  But being new to Python, it seems to be done differently.  I used the <code>(ctypes.c_char * 10)()</code> as that was how it was done in the example C++ code that came with the DLL.  I tried it using <code>version_string = ctypes.create_string_buffer(10)</code> and then passing <code>version_string</code> to the function and it seems to work also.  Thanks again for the help and information!</span>
<span class="comment-copy"><code>create_string_buffer(10)</code> returns <code>(c_char * 10)()</code>. Where it comes in handy is <code>buf = create_string_buffer(init)</code>. That's equivalent to <code>buf = (c_char * (len(init) + 1))(); buf.value = init</code>. Note that <code>c_char * 10</code> is an array type. It's more convenient than subclassing <code>Array</code> with <code>_type_ = c_char</code> and <code>_length_ = 10</code>.</span>
