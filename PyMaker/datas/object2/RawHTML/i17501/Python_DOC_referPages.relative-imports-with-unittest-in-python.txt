<div class="post-text" itemprop="text">
<p>I am trying to use Python unittest and relative imports, and I can't seem to figure it out.  I know there are a lot of related questions, but none of them have helped so far.  Sorry if this is repetitive, but I would really appreciate any help.  I was trying to use the syntax from PEP 328 <a href="http://www.python.org/dev/peps/pep-0328/" rel="noreferrer">http://www.python.org/dev/peps/pep-0328/</a> but I must have something wrong.  </p>
<p>My directory structure is:</p>
<pre><code>project/
    __init__.py
    main_program.py
    lib/
        __init__.py
        lib_a
        lib_b
    tests/
        __init__.py
        test_a
        test_b
</code></pre>
<p>I run my tests using:</p>
<pre><code>python -m unittest test_module1 test_module2
</code></pre>
<p>test_a needs to import both lib/lib_a and main_program.  This is the code from test_a I am trying to use for the import:</p>
<pre><code>from ..lib import lib_a as lib
from ...project import main_program
</code></pre>
<p>both raise this error:</p>
<pre><code>ValueError: Attempted relative import in non-package
</code></pre>
<p>All of my <strong>init</strong>.py files are currently empty.  </p>
<p>Any specific advice would be greatly appreciated!!</p>
<p>Edit:</p>
<p>This may be the answer:  <a href="https://stackoverflow.com/questions/1342975/python-packages">Python Packages?</a>
I'm still verifying if this will work.  </p>
<p>Edit II:</p>
<p>To clarify, at this point I have attempted to run my test file in 3 different ways:</p>
<pre><code>project/tests $ python -m unittest test_a
project/tests $ python -m test_a
project/tests $ ./test_a
</code></pre>
<p>All three fail with the same error as above.  When I use the same three syntaxes but in the project directory, I get this error:</p>
<pre><code>ValueError: Attempted relative import beyond toplevel package
</code></pre>
<p>Thanks again.  </p>
</div>
<div class="post-text" itemprop="text">
<p>In my experience it is easiest if your project root is not a package, like so:</p>
<pre><code>project/
  test.py
  run.py
  package/
    __init__.py
    main_program.py
    lib/
      __init__.py
      lib_a
      lib_b
    tests/
      __init__.py
      test_a
      test_b
</code></pre>
<p>However, as of python 3.2 , the unittest module provides the <code>-t</code> option, which lets you set the top level directory, so you could do (from <code>package/</code>):</p>
<pre><code>python -m unittest discover -t ..
</code></pre>
<p>More details at the <a href="http://docs.python.org/3/library/unittest.html#test-discovery" rel="noreferrer">unittest docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I run with the same problem and kai's answer solved it. I just want to complement his answer with the content of <code>test.py</code> <em>(as @gsanta asked)</em>. I've only tested it on Python 2.7:</p>
<pre><code>from packages.tests import test_a, test_b
import unittest

# for test_a
unittest.main(test_a)

# for test_b
unittest.main(test_a)
</code></pre>
<p>then you can just</p>
<pre><code>../project $ python test.py
</code></pre>
</div>
<span class="comment-copy">"Note that while that last case [...] is legal, it is certainly discouraged ("insane" was the word Guido used)." - PEP328</span>
<span class="comment-copy">Try invoking it as a package... <a href="http://stackoverflow.com/a/11536794/75033">stackoverflow.com/a/11536794/75033</a></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11536764/attempted-relative-import-in-non-package-even-with-init-py">Attempted relative import in non-package even with __init__.py</a></span>
<span class="comment-copy">I need to run it through unittest, so I don't think that will work.  When I run this: 'python -m tests.test_a' I get this error: 'ValueError: Attempted relative import beyond toplevel package'.</span>
<span class="comment-copy">I think you can chain <code>-m</code>'s? And check on what relative imports are relative to? The pythonpath? The current directory? What? I just take guido's view and rarely, if ever, use them. If your tests are testing the lib module then put them into the lib with the routines they are testing. Only tests that are testing the project belong at the top level there.</span>
<span class="comment-copy">Thanks!  This did help.  I also benefitted greatly from the module section in Mark Lutz's 'Learning Python'.  I realized that I need to make sure that imports work correctly from the directory in which the module will actually be called, not the directory in which the module lives.  So, now I'm calling my test files from project/, and the import in test_a reads: 'import lib.lib_a' and 'import spd'. That, in combination with the simple way to run unittests from a higher level directory, enabled me to fix my code.</span>
<span class="comment-copy">What does test.py contain?</span>
<span class="comment-copy">In this case it'd be an executable file that runs the tests (something like <code>unittest.main()</code>, setting up your <code>sys.path</code> or whatever is required - it's not essential for something simple.</span>
<span class="comment-copy">What does ´test_a´ and ´test_b´ contain? And how do they import the contents of ´lib_a´ and ´lib_b´ for testing?</span>
