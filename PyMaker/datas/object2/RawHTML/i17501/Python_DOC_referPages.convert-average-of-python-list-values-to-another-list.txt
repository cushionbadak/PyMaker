<div class="post-text" itemprop="text">
<p>I have lists like this.</p>
<pre><code>list = [["Joe", 5, 7], ["Joe", 6, 9], ["Mike", 1,4], ["Joe", 7,4], ["Mike", 5,7]]
</code></pre>
<p>How can I convert this list to a list like this:</p>
<pre><code>list2 = [["Joe", 6.00, 6.66], ["Mike", 3.00, 5.50]]
</code></pre>
<p>list2[0][1] and list2[1][1] are the average values from first list with spesific people (6.00 is coming from <code>(list[0][1]+list[1][1]+list[3][1])/3</code></p>
<p>I should use iteration like this:</p>
<pre><code>for i in range(len(list)):
...
</code></pre>
<p>or.. something like that? Because I'm importing list from SQLite and list is always changing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you say you're importing the list from sqlite, you may be interested in using an existing data processing package rather than rolling your own function by function.  For example, in <a href="http://pandas.pydata.org"><code>pandas</code></a>, you could load the data into a <code>DataFrame</code>:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame(yourlist)
&gt;&gt;&gt; df
      0  1  2
0   Joe  5  7
1   Joe  6  9
2  Mike  1  4
3   Joe  7  4
4  Mike  5  7

[5 rows x 3 columns]
&gt;&gt;&gt; df.groupby(0).mean()
      1         2
0                
Joe   6  6.666667
Mike  3  5.500000

[2 rows x 2 columns]
</code></pre>
<p>Now using <code>pandas</code> would be significant overkill for the problem in isolation, but if you're pulling data from a database you're probably going to want to do multiple things with the data.</p>
</div>
<div class="post-text" itemprop="text">
<p>This works for any number of values you are summing (in your case two):</p>
<p><strong>Python 3</strong></p>
<pre><code>from collections import defaultdict

rows = [["Joe", 5, 7], ["Joe", 6, 9], ["Mike", 1,4], ["Joe", 7,4], ["Mike", 5,7]]

d = defaultdict(list)
for k, *v in rows:
    d[k].append(v)

averages = [[k] + [sum(x) / len(v) for x in zip(*v)] for k, v in d.items()]
print(averages)
</code></pre>
<hr/>
<p><strong>Python 2</strong></p>
<p>Replace <code>items()</code> with <code>iteritems()</code>, add <code>float</code> around the <code>sum(x)</code>, use <code>print</code> with a space, not parens, and change the <code>for</code> loop to</p>
<pre><code>for row in rows:
   d[row[0]].append(row[1:])
</code></pre>
<p>(Python 3 is sure nice.)</p>
<hr/>
<p><strong>Explanation</strong></p>
<p>The <code>defaultdict</code> and <code>for</code> loop create a map from name to a list of the value.</p>
<pre><code>{'Mike': [[1, 4], [5, 7]], 'Joe': [[5, 7], [6, 9], [7, 4]]}
</code></pre>
<p><code>k, v in d.items()</code> iterates over each name and list of lists.</p>
<p><code>zip(*v)</code> takes something like <code>[[5, 7], [6, 9], [7, 4]]</code> and turns it into <code>[[5, 6, 7], [7, 9, 4]]</code>. We then sum these and divide by the number of original lists.</p>
<p>We append <code>[k]</code> and this list of averages to get a list like <code>['Joe', 6.0, 6.67]</code>.</p>
<p>BTW, if this is coming from a database, have you considered doing the aggregation there?</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; lis = [["Joe", 5, 7], ["Joe", 6, 9], ["Mike", 1,4], ["Joe", 7,4], ["Mike", 5,7]]
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; for item in lis:
...     d.setdefault(item[0], []).append(item[1:])
</code></pre>
<p>Now <code>d</code> contains:</p>
<pre><code>&gt;&gt;&gt; d
OrderedDict([('Joe', [[5, 7], [6, 9], [7, 4]]), ('Mike', [[1, 4], [5, 7]])])
</code></pre>
<p>The Ordered of unique keys ever seen is preserved here as we used an <code>OrderedDict</code> here.</p>
<p>Now we can iterate over this dictionary and get the average of columns for each key. <code>zip</code> with <code>*</code> allows us to get a transpose of a list very easily:</p>
<pre><code>&gt;&gt;&gt; zip(*[[5, 7], [6, 9], [7, 4]])
[(5, 6, 7), (7, 9, 4)]
&gt;&gt;&gt; 
</code></pre>
<p>Final list comprehension:</p>
<pre><code>&gt;&gt;&gt; [[k] + [sum(x)/float(len(x)) for x in zip(*v)] for k, v in d.items()]
[['Joe', 6.0, 6.666666666666667], ['Mike', 3.0, 5.5]]
</code></pre>
<p>You can remove the <code>float</code> call in Python3. And if order of the names 'Joe', 'Mike' doesn't matter in the output list, then you can simply use a normal dict with <code>dict.setdefault</code> or use <code>collections.defaultdict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; data = [["Joe", 5, 7], ["Joe", 6, 9], ["Mike", 1, 4], ["Joe", 7, 4], ["Mike", 5, 7]]
&gt;&gt;&gt; data.sort()
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for _, groups in groupby(d, lambda x: x[0]):
        it = iter(zip(*groups))
        row = [next(it)[0]]
        for values in it:
            row.append(sum(values) / len(values))
        result.append(row)

&gt;&gt;&gt; result
[['Joe', 6.0, 6.666666666666667], ['Mike', 3.0, 5.5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternate solution .Its a bit complicated but a one liner without imports.</p>
<pre><code>map(lambda x : [x[0],float(x[1])/x[3],float(x[2])/x[3]],reduce(lambda x,y : x[0:(len(x)-1)] + [[x[-1][0],x[-1][1]+y[1],x[-1][2]+y[2],x[-1][3]+1]] if ((y[0] == x[-1][0]) if (len(x)&gt;0)  else False) else x + [[y[0],y[1],y[2],1]] ,arr,[]))
</code></pre>
</div>
<span class="comment-copy">This definitely looks nice. +1</span>
