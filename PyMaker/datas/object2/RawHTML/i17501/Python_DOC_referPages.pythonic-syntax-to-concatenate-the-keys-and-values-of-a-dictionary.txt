<div class="post-text" itemprop="text">
<p>I have a dictionary similar to this one</p>
<pre><code>dic1 = {'Name': 'John', 'Time': 'morning'}
</code></pre>
<p>I want to concatenante the keys and values with a "_" separator with the following schema:</p>
<pre><code>Name_John_Time_morning
</code></pre>
<p>This is equivalent to key1_value1_key2_value2</p>
<p>I have tried the following line of code but without success</p>
<pre><code>x + "_" + v for x,v in dict1.keys(), dict1.values()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like comprehensions better</p>
<pre><code>result = '_'.join(x + '_' + y for x, y in dic1.items())
</code></pre>
<p>or</p>
<pre><code>result = '_'.join('{}_{}'.format(*p) for p in dic1.items())
</code></pre>
<p>The latter form also works when there are non-string keys or values.</p>
<p>To ensure the output is sorted, </p>
<pre><code>result = '_'.join('{}_{}'.format(*p) for p in sorted(dic1.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> with <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a>:</p>
<pre><code>&gt;&gt;&gt; dic1 = {'Name': 'John', 'Time': 'morning'}
&gt;&gt;&gt; '_'.join(map('_'.join, dic1.items()))
'Name_John_Time_morning'
</code></pre>
<p>or using generator expression instead of <code>map</code>:</p>
<pre><code>&gt;&gt;&gt; '_'.join('_'.join(item) for item in dic1.items())
'Name_John_Time_morning'
</code></pre>
<p>BTW, <code>dict</code> is not ordered. So result may vary.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code> print "_".join("{}_{}".format(k,v) for k,v in dic1.items())
</code></pre>
<p><em>Gives:</em></p>
<pre><code>Name_John_Time_morning
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If we're golfing and I've got itertools...</p>
<pre><code>'_'.join(chain(*dic1.items()))
</code></pre>
</div>
<span class="comment-copy">I'd throw in a caveat and say that <i>you are not in general guaranteed of the order of dictionary keys</i>. It works out in this case but you should be using <code>OrderedDict</code>.</span>
<span class="comment-copy">I feel like ['_'.join(item) for item in dic1.items] is more Pythonic. But that is just my opinion.</span>
<span class="comment-copy">@icedtrees, Thank you for comment. I added a generator expression version.</span>
