<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13672773/how-to-convert-a-list-of-string-to-a-list-of-int">How to convert a list of string to a list of int</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a list that consists of elements of type "string".</p>
<pre><code>li = ['1 ', '2', '3 ', '4', '5 ', '6', '7 '] 
</code></pre>
<p>I need to change the type of each element on the "int". use cycles are not desirable.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using the <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow">map function</a>, which returns a generator and so does lazy casting in this case (cast only when you need a new element from the list):</p>
<pre><code>li = map(int, li)
</code></pre>
<p>With your example (and Python 3)</p>
<pre><code>&gt;&gt;&gt; li = ['1 ', '2', '3 ', '4', '5 ', '6', '7 ']
&gt;&gt;&gt; map(int, li)
&lt;map object at 0xffe3ed0c&gt;
&gt;&gt;&gt; list(map(int, li))
[1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; for elem in map(int, li):
...     print(elem)
...
1
2
3
4
5
6
7
</code></pre>
<p><hr/>
As pointed by @hivert, <code>map</code> is <a href="http://www.python.org/dev/peps/pep-0279/" rel="nofollow">some kind of deprecated in the Python community</a>. You could use a list comprehension or a generator instead:</p>
<pre><code>[int(x) for x in li]  # create the full list directly
(int(n) for n in li)  # create a generator (note parentheses instead of brackets)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> together with the <code>int</code> type:</p>
<pre><code>list_of_ints = [int(n) for n in li]
</code></pre>
<hr/>
<p>If you don't necessarily need all the items in the list, a <a href="http://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow">generator</a> might be more appropriate. This will avoid evaluating each item until it is needed.</p>
<pre><code>int_generator = (int(n) for n in li) # Note the () instead of []
</code></pre>
<p>This is equivalent to <code>map(int, li)</code> but (IMO) more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can cast it using this code: </p>
<pre><code> li = [int(x) for x in li]
</code></pre>
<p>it will create new list with each element in the old list but with casting to int.</p>
</div>
<div class="post-text" itemprop="text">
<p>you just need to cast the string to an int. Python does this with the <code>int()</code> function:</p>
<pre><code>li = ['1 ', '2', '3 ', '4', '5 ', '6', '7 ']

li_int = [int(x) for x in li]

print li_int

&gt;&gt;&gt;[1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>After running this you have a new list that contains all the values but as ints.</p>
<p>If you want to change the items in li without creating a new list just do:</p>
<pre><code>li = ['1 ', '2', '3 ', '4', '5 ', '6', '7 ']

li = [int(x) for x in li]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it using map function</p>
<pre><code>li = map(int, li)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>int()</code> in a list comprehension:</p>
<pre><code>li = ['1 ', '2', '3 ', '4', '5 ', '6', '7 ']
ints = [int(n) for n in li]
</code></pre>
</div>
<span class="comment-copy">What does the last sentence mean?</span>
<span class="comment-copy">@hivert: well, not quite because those ones are nested, but I'm sure this has been asked before. A lot.</span>
<span class="comment-copy">The OP is using Python 3.  (Or at least that's how it's tagged.)</span>
<span class="comment-copy">I like this solution. It's clean!</span>
<span class="comment-copy">Worth noting: this returns a generator, not a list.</span>
<span class="comment-copy">+1 because lazily casting the values strikes me as more appropriate than bulk converting an entire data structure.</span>
<span class="comment-copy">@DSM yeah but it doesn't matter, see kojiro explanation (I allowed myself to rewrite the idea in my answer)</span>
<span class="comment-copy">Explain why this works.</span>
<span class="comment-copy">@BleedingFingers it will create new list with each element in the old list but with cast to int.</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/21736916/edit">edit</a> it into the answer.</span>
<span class="comment-copy">Done, thanks @BleedingFingers</span>
