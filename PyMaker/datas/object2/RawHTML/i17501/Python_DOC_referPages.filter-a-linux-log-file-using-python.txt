<div class="post-text" itemprop="text">
<p>I want to filter a log file to keep all lines matching a certain pattern. I want to do this with Python.</p>
<p>Here's my first attempt:</p>
<pre><code>#!/usr/bin/env python

from sys import argv 

script, filename = argv
with open(filename) as f:
    for line in f:
        try:
            e = line.index("some_term_I_want_to_match")
        except: 
            pass
        else:
            print(line)
</code></pre>
<p>How can I improve this to:</p>
<ul>
<li>save the result to a new file of similar name (i.e., a different extension)</li>
<li>use regex to make it more flexible/powerful.</li>
</ul>
<p>(I'm just learning Python. This question is as much about learning Python as it is about accomplishing this particular result.)</p>
<p><strong>OK, here's what I came up with so far...</strong> But how do you do the equivalent of prepending an <code>r</code> as in the following line</p>
<pre><code>re.compile(r"\s*")
</code></pre>
<p>where the string is <strong>not</strong> a string literal, as in the next line?</p>
<pre><code>re.compile(a_string_variable)
</code></pre>
<p>Other than that, I think this updated version does the job:</p>
<pre><code>#!/usr/bin/env python

from sys import argv 
import re
import os
import argparse #requires Python 2.7 or above

parser = argparse.ArgumentParser(description='filters a text file on the search phrase')
parser.add_argument('-s','--search', help='search phrase or keyword to match',required=True)
parser.add_argument('-f','--filename', help='input file name',required=True)
parser.add_argument('-v','--verbose', help='display output to the screen too', required=False, action="store_true")
args = parser.parse_args()

keyword = args.search
original_file = args.filename
verbose = args.verbose

base_file, ext = os.path.splitext(original_file)
new_file = base_file + ".filtered" + ext

regex_c = re.compile(keyword)

with open(original_file) as fi:
    with open(new_file, 'w') as fo:
        for line in fi:
            result = regex_c.search(line)
            if(result):
                fo.write(line)
                if(verbose):
                    print(line)
</code></pre>
<p>Can this be easily improved?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you know, you have answered most of your questions yourself already :)</p>
<p>For regular expression matching use <a href="http://docs.python.org/3/library/re.html" rel="nofollow"><code>re</code> module</a> (the doc has pretty explanatory examples).</p>
<p>You already have made use <code>open()</code> function for opening a file. Use the same function for open files for writing, just provide a corresponding <code>mode</code> parameter ("w" or "a" combined with "+" if you need, see <code>help(open)</code> in the Python interactive shell). That's it.</p>
</div>
<span class="comment-copy">Why not use <code>grep</code>? If you want to use regex and insist on writing this in Python, look at the <code>re</code> module.</span>
<span class="comment-copy">No need for <code>try...except</code> here in my opinion.</span>
<span class="comment-copy">I updated my question. And I want to do this in Python because I'm learning Python.</span>
<span class="comment-copy">... and use the <a href="http://docs.python.org/3.3/library/os.path.html" rel="nofollow noreferrer">os.path</a> module to change the file extension.</span>
<span class="comment-copy">I updated my question</span>
<span class="comment-copy">Well, "improved" isn't a right word to describe your needs. If it does what you want, it shouldn't be improved. If you need smth else, you should formulate it explicitly. I would decrease the nesting level by merging both file opening in one statement, but this would require a object implementing <a href="http://docs.python.org/2/reference/datamodel.html#with-statement-context-managers" rel="nofollow noreferrer">Context Manager protocol</a>. Or simply use <code>try: f = open("original")... finally: f.close()...</code> which means almost the same as <code>with</code> statement</span>
