<div class="post-text" itemprop="text">
<p>I have used BeautifulSoup for Python 3.3 to successfully pull desired info from a web page. I have also used BeautifulSoup to generate new HTML code to display this info. Currently, my Python program prints out the HTML code, which I then have to copy, paste, and save as an HTML file, then from there, I can test it in a browser.</p>
<p>So my question is this, is there a way in Python to launch the HTML code generated by BeautifulSoup in a web browser so that I don't have to go through the copy and paste method I use now?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/webbrowser.html#webbrowser.open"><code>webbrowser.open</code></a>:</p>
<pre><code>import os
import webbrowser

html = '&lt;html&gt; ...  generated html string ...&lt;/html&gt;'
path = os.path.abspath('temp.html')
url = 'file://' + path

with open(path, 'w') as f:
    f.write(html)
webbrowser.open(url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://flask.pocoo.org/docs/quickstart/" rel="nofollow">Flask</a> to turn your code into a local web application:</p>
<pre><code>from flask import Flask
app = Flask(__name__)

@app.route('/')
def scrape_and_reformat():
    # call your scraping code here
    return '&lt;html&gt;&lt;body&gt; ... generated html string ... &lt;/body&gt;&lt;/html&gt;'

if __name__ == '__main__':
    app.run()
</code></pre>
<p>Run the script, and point your browser at <code>http://127.0.0.1:5000/</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>(this grew enough I figured I should split it off as a separate answer:)</p>
<p>As @reptilicus points out, you can use the built-in <a href="http://docs.python.org/3.3/library/http.server.html#module-http.server" rel="nofollow">http.server</a> module as follows:</p>
<ol>
<li><p>Create a web file directory and save your .html file in it.</p></li>
<li><p>Open a command-line window and do</p>
<pre><code>cd /my/web/directory
python -m http.server 8000
</code></pre></li>
<li><p>Point your browser at <code>http://127.0.0.1:8000</code></p></li>
</ol>
<p>This only works for static files; it will not run your script and return the results (as Flask does).</p>
</div>
<span class="comment-copy">More options here: <a href="http://stackoverflow.com/questions/25706214/can-beautiful-soup-output-be-sent-to-browser/25706243#25706243">Can beautiful soup output be sent to browser?</a></span>
<span class="comment-copy">Thanks. This is the simple solution I was looking for for now.</span>
<span class="comment-copy">or just SimpleHTTPServer?</span>
<span class="comment-copy">@reptilicus, FYI, no SimpleHTTPServer in Python 3.x, but <a href="http://docs.python.org/3/library/http.server.html" rel="nofollow noreferrer"><code>http.server</code></a>.</span>
<span class="comment-copy">Thanks. This is the first time that I've tried doing anything with HTML in Python so this http:server is a little over my head right now. Would this be a useful module to learn if I intend on eventually putting my code online?</span>
<span class="comment-copy">@user3108789: It's really not difficult; it literally takes about 15 seconds to do. Follow the steps above and try it! To work on 'actual hosting' sites, I would use Flask instead (as above); once you have a bit of experience, try Django (but that's a much larger environment, with a bigger learning curve. Flask is much easier to get started in).</span>
