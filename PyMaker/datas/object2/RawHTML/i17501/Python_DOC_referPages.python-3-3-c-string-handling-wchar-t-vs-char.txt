<div class="post-text" itemprop="text">
<p>I'm trying to embed Python 3.3 in our C++ project.
Python 3.3 seems to have introduced UTF-8 as preferred storage, <a href="http://www.python.org/dev/peps/pep-0393/" rel="nofollow noreferrer">PEP 393</a>: "the specification chooses UTF-8 as the recommended way of exposing strings to C code."</p>
<p>I wrote this initialization code, which seems to be simple and intuitive: </p>
<pre><code>#include &lt;Python.h&gt;
#include "log.h"

void python_init(const char *program_name) {
    if (not Py_IsInitialized()) {
        Py_SetProgramName(program_name);
        Py_Initialize();
        const char *py_version = Py_GetVersion();
        log::msg("initialized python %s", py_version);
    }
}
</code></pre>
<p>but compiling it fails:</p>
<pre><code>/home/jj/devel/openage/src/engine/python.cpp:13:3: error: no matching function for call to 'Py_SetProgramName'
                Py_SetProgramName(program_name);
                ^~~~~~~~~~~~~~~~~
/usr/include/python3.3/pythonrun.h:25:18: note: candidate function not viable: no known conversion from 'const char *' to 'wchar_t *' for 1st argument
PyAPI_FUNC(void) Py_SetProgramName(wchar_t *);
                 ^
</code></pre>
<p>So yeah, obviously I need a <code>wchar_t *</code> here, but I don't see any reason why <code>char *</code> would not do the job here.</p>
<p>What is the best practice here?
Convert <code>char *</code> to <code>wchar *</code> and deal with locales (<a href="http://www.cplusplus.com/reference/cstdlib/mbstowcs/" rel="nofollow noreferrer">mbstowcs</a>), which would also introduce unnecessary dynamic memory allocs?</p>
<p>Also, if Python decided to go for <code>wchar</code> entirely, why does <code>Py_GetVersion()</code> return a <code>char *</code> as I expected it? </p>
<p>I found a <a href="https://stackoverflow.com/questions/18245140/how-do-you-use-the-python3-c-api-for-a-command-line-driven-app">similar question for Python &lt;3.3 </a>, but I hope Python 3.3 is different (PEP 393?).</p>
<p>The code has to be cross-platform capable.</p>
<p>=&gt; What's a fast and efficient solution to pass C strings (<code>char *</code>) to Python 3.3?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>// Convert a sequence of strings to an array of WCHAR pointers
PYWINTYPES_EXPORT void PyWinObject_FreeWCHARArray(LPWSTR *wchars, DWORD str_cnt);
</code></pre>
<p>can you use this...?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5, <code>Py_DecodeLocale</code> can be used to do the conversion.</p>
<p><a href="https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale" rel="nofollow noreferrer">https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale</a></p>
</div>
<span class="comment-copy">Have you tried <code>char*</code> rather than <code>const char*</code>?</span>
<span class="comment-copy">this is not a function available in <code>/usr/include/python3.3</code>, I think it's WindowsÂ® specific.</span>
