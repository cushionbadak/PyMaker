<div class="post-text" itemprop="text">
<p>I'm trying to import a python function into another python while loop.  This is the code:</p>
<p>test.py</p>
<pre><code>#!/usr/bin/python
import time

t = 15
print t
</code></pre>
<p>sleep_test.py</p>
<pre><code>#!/usr/bin/python
import time

while True:
    import test
    time.sleep(10)
</code></pre>
<p>When I run sleep_test.py, 15 is printed once and then the loop hangs.  I'm trying to print 15 consecutively after a 10 second delay.  Does anyone have suggestion how I might accomplish this with the code I've provided?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem isn't the <code>sleep</code>. The problem is actually in the <code>import</code></p>
<p>When Python imports a module, it only does so once. Subsequent <code>imports</code> will be ignored.</p>
<p>You should refactor your modules to this:</p>
<hr/>
<p>test.py</p>
<pre><code>def function_name_whatever_you_want():
    t = 15
    print t
</code></pre>
<hr/>
<p>sleep_test.py</p>
<pre><code>import test
while True:
    test.function_name_whatever_you_want()
    time.sleep(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not that <code>time.sleep()</code> hangs (for longer than it's supposed to); it's that trying to import a module that's already imported doesn't re-import it. If you really want to force a reload, use the built-in <a href="http://docs.python.org/2/library/functions.html#reload" rel="nofollow"><code>reload</code></a> function:</p>
<pre><code>#!/usr/bin/python
import time

import test
while True:
    time.sleep(10)
    reload(test)
</code></pre>
<p>However, you're probably better off restructuring your code entirely. This is a pretty ugly way of doing things.</p>
<p>(In Python 3, <code>reload</code> was <a href="http://docs.python.org/3/library/imp.html#imp.reload" rel="nofollow">moved</a> to the <code>imp</code> module.)</p>
</div>
<span class="comment-copy">This is very ugly style of coding, why don't you make the contents present in test.py into a single function in sleep_test.py and call it as many times you want.</span>
<span class="comment-copy">I tried that and the 15 didn't print at all.  The code ran indefinitely until I interrupted it.</span>
<span class="comment-copy">Awesome, that worked! Thank you.</span>
<span class="comment-copy">@user3229243 You should accept this as your answer if it helped you out.</span>
