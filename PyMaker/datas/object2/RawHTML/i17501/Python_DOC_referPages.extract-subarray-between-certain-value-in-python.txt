<div class="post-text" itemprop="text">
<p>I have a list of values that are the result of merging many files. I need to pad some of the values. I know that each sub section begins with the value -1. I am trying to basically extract a sub-array between -1's in the main array via iteration.</p>
<p>For example supposed this is the main list:</p>
<pre><code>-1 1 2 3 4 5 7 -1 4 4 4 5 6 7 7 8 -1 0 2 3 5 -1
</code></pre>
<p>I would like to extract the values between the -1s:</p>
<pre><code>list_a = 1 2 3 4 5 7
list_b = 4 4 4 5 6 7 7 8
list_c = 0 2 3 5 ...
list_n = a1 a2 a3 ... aM
</code></pre>
<p>I have extracted the indices for each -1 by search through the main list:</p>
<pre><code> minus_ones = [i for i, j in izip(count(), q) if j == -1]
</code></pre>
<p>I also assembled them as pairs using a common recipe:</p>
<pre><code>def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return izip(a,b)

for index in pairwise(minus_ones):
    print index
</code></pre>
<p>The next step I am trying to do is grab the values between the index pairs, for example:</p>
<pre><code> list_b: (7 , 16) -&gt; 4 4 4 5 6 7 7 8 
</code></pre>
<p>so I can then do some work to those values (I will add a fixed int. to each value in each sub-array).  </p>
</div>
<div class="post-text" itemprop="text">
<p>You mentioned <code>numpy</code> in the tags.  If you're using it, have a look at <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html" rel="nofollow"><code>np.split</code></a>.</p>
<p>For example:</p>
<pre><code>import numpy as np

x = np.array([-1, 1, 2, 3, 4, 5, 7, -1, 4, 4, 4, 5, 6, 7, 7, 8, -1, 0, 2,
               3, 5, -1])
arrays = np.split(x, np.where(x == -1)[0])
arrays = [item[1:] for item in arrays if len(item) &gt; 1]
</code></pre>
<p>This yields:</p>
<pre><code>[array([1, 2, 3, 4, 5, 7]),
 array([4, 4, 4, 5, 6, 7, 7, 8]),
 array([0, 2, 3, 5])]
</code></pre>
<p>What's going on is that <code>where</code> will yield an array (actually a tuple of arrays, therefore the <code>where(blah)[0]</code>) of the indicies where the given expression is true.  We can then pass these indicies to <code>split</code> to get a sequence of arrays.  </p>
<p>However, the result will contain the <code>-1</code>'s and an empty array at the start, if the sequence starts with <code>-1</code>. Therefore, we need to filter these out.</p>
<p>If you're not already using <code>numpy</code>, though, your (or @DSM's) <code>itertools</code> solution is probably a better choice.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only need the groups themselves and don't care about the indices of the groups (you could always reconstruct them, after all), I'd use <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; seq = [-1, 1, 2, 3, 4, 5, 7, -1, 4, 4, 4, 5, 6, 7, 7, 8, -1, 0, 2, 3, 5, -1]
&gt;&gt;&gt; groups = [list(g) for k,g in groupby(seq, lambda x: x != -1) if k]
&gt;&gt;&gt; groups
[[1, 2, 3, 4, 5, 7], [4, 4, 4, 5, 6, 7, 7, 8], [0, 2, 3, 5]]
</code></pre>
<p>I missed the <code>numpy</code> tags, though: if you're working with numpy arrays, using <code>np.split</code>/<code>np.where</code> is a better choice.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do it something like this, which is a little different from the path you started down:</p>
<pre><code>input_list = [-1,1,2,3,4,5,7,-1,4,4,4,5,6,7,7,8,-1,0,2,3,5,-1]

list_index = -1
new_lists = []
for i in input_list:
    if i == -1:
        list_index += 1
        new_lists.append([])
        continue
    else:
        print list_index
        print new_lists
        new_lists[list_index].append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think when you build your <code>list</code>, you can directly add the values to a <code>string</code>. So rather than starting with a <code>list</code> like <code>xx = []</code>, you can start with <code>xx = ''</code>, and then do an update like <code>xx = xx + ' ' + str (val)</code>. The result will be a <code>string</code> rather than a <code>list</code>. Then, you can just use the <code>split()</code> method on the strihg. </p>
<pre><code>In [48]: xx
Out[48]: '-1 1 2 3 4 5 7 -1 4 4 4 5 6 7 7 8 -1 0 2 3 5 -1'

In [49]: xx.split('-1')
Out[49]: ['', ' 1 2 3 4 5 7 ', ' 4 4 4 5 6 7 7 8 ', ' 0 2 3 5 ', '']

In [50]: xx.split('-1')[1:-1]
Out[50]: [' 1 2 3 4 5 7 ', ' 4 4 4 5 6 7 7 8 ', ' 0 2 3 5 ']
</code></pre>
<p>Am sure you can take it from here ...</p>
</div>
<span class="comment-copy">There should be a way to build the list of lists while merging the files thus avoiding this problem in the first place.</span>
<span class="comment-copy">Interesting. If I wanted to then pad all arrays after the first, it would look kinda like this loop :     for i in arrays : new = len(array[i-1]) + array[i] ?</span>
<span class="comment-copy">@user2221667 - By "pad", do you mean make all the arrays the same length?  (e.g. <code>[0, 2, 3, 5]</code> --&gt; <code>[0, 2, 3, 5, -1, -1, -1, -1]</code>) If so, have a look at <code>numpy.pad</code>.  However, at that point, it might make more sense to just use a 2D array of the right size and set the first N elements of each row to the values in your array. For example: <code>x = np.zeros((num_arrays, max_len)); for i, item in enumerate(arrays): x[i, :len(item)] = item</code>. (That's a bit unreadable in comment form, sorry.)</span>
<span class="comment-copy">Thanks, Ok ONE more question. Lets say I make these lists, do some work to them, how do I get them back together at the end so that each array is between a -1? Should I use np.concatenate?</span>
