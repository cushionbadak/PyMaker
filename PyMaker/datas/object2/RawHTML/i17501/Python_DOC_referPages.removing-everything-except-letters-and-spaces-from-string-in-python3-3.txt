<div class="post-text" itemprop="text">
<p>I have this example string: <code>happy t00 go 129.129</code> and I want to keep only the spaces and letters. All I have been able to come up with so far that is pretty efficient is:</p>
<pre><code>print(re.sub("\d", "", 'happy t00 go 129.129'.replace('.', '')))
</code></pre>
<p>but it is only specific to my example string. How can remove all characters other than letters and spaces? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>whitelist = set('abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ')
myStr = "happy t00 go 129.129$%^&amp;*("
answer = ''.join(filter(whitelist.__contains__, myStr))
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; answer
'happy t go '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a set complement:</p>
<pre><code>re.sub(r'[^a-zA-Z ]+', '', 'happy t00 go 129.129')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Slight variation on inspectorG4dget's method - import from <code>string</code> &amp; generator comprehension:</p>
<pre><code>from string import ascii_letters

allowed = set(ascii_letters + ' ')
myStr = 'happy t00 go 129.129'
answer = ''.join(l for l in myStr if l in allowed)
answer
# &gt;&gt;&gt; 'happy t go '
</code></pre>
<hr/>
<h3>Performance comparison:</h3>
<p>(I made myStr a bit longer and pre-compiled the regex to make things a bit more interesting)</p>
<pre><code>import re
from string import ascii_letters, digits
myStr = 'happy t00 go 129.129'*20
allowed = set(ascii_letters + ' ')

# Generator
%timeit answer = ''.join(l for l in myStr if l in allowed)

# filter/__contains__
%timeit answer = ''.join(filter(allowed.__contains__, myStr))

# Regex
pat = re.compile(r'[^a-zA-Z ]+')
%timeit answer = re.sub(pat, '', myStr)
</code></pre>
<p>53 µs ± 6.43 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)<br/>
43.3 µs ± 7.48 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)<br/>
26 µs ± 509 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</p>
</div>
<span class="comment-copy">After testing I found this to be 0.0029 usec faster than Joel's answer when run as a <code>python -m timeit -n 100 -s</code> loop for each code in Command Prompt.</span>
<span class="comment-copy">@Gronk: <code>&gt;&gt;&gt; Timer('"".join(filter(whitelist.__contains__, myStr))', ''' ... whitelist = set('abcdefghijklmnopqrstuvwxy ABCDEFGHIJKLMNOPQRSTUVWXYZ') ... myStr = 'happy t00 go 129.129' * 10''').timeit(number=1000) 0.02490997314453125 &gt;&gt;&gt; Timer('re.sub(r"[^a-zA-Z ]+", "", myStr)', '''import re ... myStr = 'happy t00 go 129.129' * 10''').timeit(number=1000) 0.011039972305297852 &gt;&gt;&gt; </code>. My point is that 0.0029 usec is definitely within the normal variation for a sample size of 100.</span>
<span class="comment-copy">This also filters accented alphabet characters which might be a problem.</span>
<span class="comment-copy">The lowercase character "z" is missing</span>
<span class="comment-copy">I found this to be the best answer. It is more readable and it shows how we can use the <a href="https://docs.python.org/3/library/string.html#module-string" rel="nofollow noreferrer">string constants</a> instead of typing them manually which could easily introduce an error.</span>
