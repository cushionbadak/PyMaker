<div class="post-text" itemprop="text">
<p>I am looking at the code listed <a href="http://pastebin.com/aUZ1Ue6E" rel="nofollow">here</a> and they provide a very interesting structure to writing a "clock" in Python on line. I have never seen this quirky syntax before and quite honestly do not know how it works. This is utter black magic in Python. But even though it is not the most Pythonic way to write what the author intended, I would still like to know how it operates.</p>
<pre><code>qClock = (lambda:0, time.clock)[qDuration &gt; 0]
qDuration = (1, (qClock() + qDuration))[qDuration &gt; 0]
</code></pre>
<p>My though process:</p>
<ul>
<li><code>qClock</code> returns True is the duration has been passed</li>
<li><code>qDurration</code> starts as an int, but is later changed to a lambda function?</li>
<li>Why are there lists at the end of each of these? I have a feeling these are not lists.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is an archaic way of writing a ternary conditional.  It should be:</p>
<pre><code>qClock = time.clock if qDuration &gt; 0 else lambda: 0
qDuration = (qClock() + qDuration) if qDuration &gt; 0 else 1
</code></pre>
<p>Before Python 2.5, which introduced the ternary conditional (<a href="http://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer">link</a>) you could emulate it by creating a 2-element tuple and indexing it with a boolean expression, since <code>False</code> gets treated as <code>0</code> and <code>True</code> as <code>1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>bool</code> is a subclass of <code>int</code>, so a boolean is either 0 or 1 depending on it being the value <code>False</code> or <code>True</code>.</p>
<p>Thus, <code>qClock</code> is either set to <code>lambda: 0</code> or <code>time.clock</code>, depending on <code>qDuration</code> being greater than 0 or not.</p>
<p><code>qDuration</code> is then set to <code>1</code> or <code>qClock() + qDuration</code>.</p>
<p>You can translate this to:</p>
<pre><code>qDuration = time.clock() + qDuration if qDuration else 1
</code></pre>
<p>which is shorter and more readable. Go figure.</p>
</div>
<span class="comment-copy">The <code>qClock</code> lambda vs. <code>time.clock</code> setup is to work around the fact that the 'index by boolean' trick doesn't evaluate lazily. Not that calling <code>time.clock()</code> is that expensive, really..</span>
