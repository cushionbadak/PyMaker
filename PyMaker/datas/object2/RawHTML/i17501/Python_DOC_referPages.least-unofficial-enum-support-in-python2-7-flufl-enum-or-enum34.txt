<div class="post-text" itemprop="text">
<p>Never thought I'd need to do this, but here I am intending to use enums in python 2.7. </p>
<p>There is Barry's <a href="http://packages.python.org/flufl.enum/docs/using.html" rel="nofollow noreferrer">flufl.enum</a> which PEP 435 says "...was the reference implementation upon which this PEP was originally based".  </p>
<p>But there is also a backport <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer">enum34</a> on pypi.  </p>
<p><strong>These both seem semi-official, so which one should I use in new code?</strong> </p>
<p>"There should be one obvious way to do it", but it's a hard topic to google for because there are dozens (hundreds?) of hand-rolled implementations out there.  And the python 3.4 enum is still just a release candidate.  </p>
<p>I've tried out both <code>flufl.enum.Enum</code> and <code>enum34.Enum</code>, and the behaviour is quite different - most notably the differing semantics of <code>__getitem__</code>.  According to this <a href="https://stackoverflow.com/questions/16653129/future-compatible-enums-in-2-7/21394224#comment23954299_16653129">comment</a> by Martijn Pieters, backport is/was challenging because implementation relies on the new <code>__prepare__</code> function on the metaclass.  I've read <a href="https://stackoverflow.com/q/36932/674039">this</a> post and the <a href="http://www.python.org/dev/peps/pep-0435/" rel="nofollow noreferrer">PEP</a> in entirety.  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code></a>
 matches what is in <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python3.4</a>, so that's the one to use.</p>
<p>The one big difference between the backport and 3.4's:</p>
<ul>
<li>In Python 2 you cannot get definition order (because <code>__prepare__</code> doesn't exist yet), but there is a work-around -- define <code>_order_</code> and it will be the "definition order" in Python 2 (it's simply ignored in Python 3).  If you don't use the workaround the order used is the values of the members, in increasing order.</li>
</ul>
<p><strong>Update</strong></p>
<ul>
<li><p>the preferred spelling is now <code>_order_</code> (single instead of double leading and trailing underscores)</p></li>
<li><p>Python3.6+ will check that <code>_order_</code> matches the actual order (useful for keeping Python 2/3 code in sync)</p></li>
</ul>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>
, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">also see: <a href="http://packages.python.org/flufl.enum/docs/using.html#differences-from-pep-354" rel="nofollow noreferrer">packages.python.org/flufl.enum/docs/â€¦</a></span>
