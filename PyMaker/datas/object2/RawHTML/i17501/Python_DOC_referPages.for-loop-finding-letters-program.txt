<div class="post-text" itemprop="text">
<p>This is the code i have currently:</p>
<pre><code>message = input("Enter a message: ")
etimes = 0
print("Your message is",len(message),"characters long")

print("The most common letter in the english language, 'e', is ", end="")
for letter in message:
    if "e" or "E" in letter:
        etimes += 1

if "e" or "E" in message:
    print("in your message", etimes, "times")
else:
    print("is not in your message")
</code></pre>
<p>why if what you enter as <code>message</code> contains an "e" the output claims it has as many "e"'s as the message does characters? Ill give an example:
if i enter the message "how are you" it will respond with:
"Your message is 11 characters long
The most common letter in the english language, 'e', is in your message 11 times"</p>
<p>Why does it not respond with:
"Your message is 11 characters long
The most common letter in the english language, 'e', is in your message 1 times"</p>
<p>Because doesn't </p>
<pre><code>for letter in message:
        if "e" or "E" in letter:
            etimes += 1
</code></pre>
<p>iterate through "how are you" one element(character) at a time as such:? </p>
<pre><code>letter = "h"
letter = "o"
letter = "w"
letter = " "
letter = "a"
letter = "r"
letter = "e"
letter = " "
letter = "y"
letter = "o"
letter = "u"
</code></pre>
<p>If the above is true then when, <code>letter = "e"</code>, should be the only time </p>
<pre><code>if "e" or "E" in letter:
</code></pre>
<p>is <code>true</code>, correct? Which means <code>etimes</code> should only equal one?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for letter in message:
    if "e" or "E" in letter:
        etimes += 1
</code></pre>
<p>change this to:</p>
<pre><code>for letter in message:
    if letter.lower() == 'e':
        etimes += 1
</code></pre>
<p>Your code failed because the <code>or</code> statement wasn't being read the way you think it was.</p>
<pre><code>if "e" or "E" in letter:
</code></pre>
<p>Is read by the interpreter (in pseudo code):</p>
<pre><code>if 'e' exists OR if 'E' in letter:

or more pseudo code

if True or if 'E' in letter:
</code></pre>
<p>And since the way <code>or</code> works:</p>
<pre><code>true or false = true  # what your logic was producing
true or true = true
false or false = false
</code></pre>
<p>To properly use <code>or</code> you must explicitly state the comparison each time:</p>
<pre><code>if "e" in letter or "E" in letter:
</code></pre>
<p>Which is why when comparing strings if capitalization isn't important, 'e' is the same as 'E' like in this case, it's better to change the case to all be the same via <code>lower()</code> or <code>upper()</code> so you don't have to compare as many things.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is in the line</p>
<pre><code>if "e" or "E" in letter:
</code></pre>
<p>The condition really means <code>("e") or ("E" in letter)</code>, which is always true because non-empty strings are considered to be true in Python, and <code>&lt;true&gt; or &lt;anything&gt;</code> is true.</p>
<p>A correct condition would be</p>
<pre><code>if "e" in letter or "E" in letter
</code></pre>
<hr/>
<p>Here is the relevant section from the <a href="http://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow">Python reference</a>:</p>
<blockquote>
<p>In the context of Boolean operations, and also when expressions are
  used by control flow statements, the following values are interpreted
  as false: <code>False</code>, <code>None</code>, numeric zero of all types, and empty strings
  and containers (including strings, tuples, lists, dictionaries, sets
  and frozensets). All other values are interpreted as true.<br/>
  ...<br/>
  The expression <code>x or y</code> first evaluates <em>x</em>; if <em>x</em> is true, its value
  is returned; otherwise, <em>y</em> is evaluated and the resulting value is
  returned.</p>
</blockquote>
<p>This definition of <code>or</code> has another consequence: the result of <code>"e" or "E" in letter</code> is in fact <code>"e"</code>, not <code>True</code>. But <code>"e"</code> is interpreted as true, so the condition is still satisfied.</p>
</div>
<span class="comment-copy">There's a built-in method for counting substrings: <code>message.lower().count("e")</code>.</span>
<span class="comment-copy">Could you include a summary of how <code>or</code> works in Python when putting them between types like <code>str</code> (instead of only <code>boolean</code> values)?</span>
<span class="comment-copy">Thank you! But do you mind explaining why the original code i had was incorrect?</span>
<span class="comment-copy">@SimonT: "or" it works like in any other lang. It is a operator for the 2 val's. The left value is 'e', the right value is  'E' in letter. For disambiguation, the best is to use brackets: if ('e') or ('E' in letter) vs if ('e' in letter) or ('E' in letter).</span>
