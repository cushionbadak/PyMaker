<div class="post-text" itemprop="text">
<p>I was reading another page on fibonacci sequence:</p>
<p><a href="https://stackoverflow.com/questions/15820601/how-do-i-print-a-fibonacci-sequence-to-the-nth-number-in-python">How do I print a fibonacci sequence to the nth number in Python?</a></p>
<p>and I was wondering if anyone can break down what is happening and how this specific line works.  I dont fully understand how "cur" and "i" is changing and such.  </p>
<pre><code>cur, old, i = cur+old, cur, i+1
</code></pre>
<p>it was part of the fibonacci function</p>
<pre><code>def fib(n):
    cur = 1
    old = 1
    i = 1
    while (i &lt; n):
        cur, old, i = cur+old, cur, i+1
    return cur
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>More generally speaking, a commatized list of l-values used as an l-value in Python unpacks an iterable from the right-hand side into the parts of the left-hand side.</p>
<p>In your case, this means that the right-hand side creates a three-tuple of the values <code>cur+old</code>, <code>cur</code> and <code>i+1</code>, which is then unpacked into <code>cur</code>, <code>old</code> and <code>i</code>, respectively, so that it is the same as saying:</p>
<pre><code>old = cur
cur = cur + old
i = i + 1
</code></pre>
<p>However, it is more useful, since <code>cur</code> isn't clobbered before <code>old</code> has been assigned to. It can also be used much more generally -- the left-hand side can consist of any l-values and the right-hand side can be any iterable, and you can do things like these:</p>
<pre><code>a, b, c = range(3)
</code></pre>
<p>or</p>
<pre><code>d = [0] * 10
d[3], d[7] = 1, 2
</code></pre>
<p>or</p>
<pre><code>e, f, g = d[2:5]
</code></pre>
<p>In Python3, you can also used asterisk expressions to unpack "the rest" of an iterable; for instance, like this</p>
<pre><code>h, *i, j = range(5)
# h will be 0, j will be 4, and i will be [1, 2, 3]
</code></pre>
<p>That doesn't work in Python2, however.</p>
<p>For the details, this is covered in <a href="http://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">section 7.2 of the language reference</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The line you gave is equivalent to this:</p>
<pre><code>cur, old, i = (cur+old, cur, i+1)
</code></pre>
<p>which is using a technique known as <a href="https://stackoverflow.com/a/10867891/2555451">unpacking</a>*.  </p>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; x, y, z = (1, 2, 3)  # Parenthesis are optional here
&gt;&gt;&gt; x
1
&gt;&gt;&gt; y
2
&gt;&gt;&gt; z
3
&gt;&gt;&gt;  
</code></pre>
<hr/>
<p>In a longer form, your line is equivalent to this:</p>
<pre><code>tmp = cur
cur = cur+old
old = tmp
i = i+1
</code></pre>
<p>which can be simplified to:</p>
<pre><code>tmp = cur
cur += old
old = tmp
i += 1
</code></pre>
<hr/>
<p><strong>*Note:</strong>  Actually, it has quite a few names.  In addition to unpacking, a very common one is <a href="https://stackoverflow.com/q/5182573/2555451">multiple assignment</a>.  @user2864740 also mentioned two more names in his <a href="https://stackoverflow.com/questions/21715583/python-syntax-use-of-commas/21715613#comment32837617_21715583">comment</a>.</p>
</div>
<span class="comment-copy"><code>cur, old, i = cur+old, cur, i+1</code> is equivalent to saying <code>cur=cur+old</code>, <code>old=cur</code>, <code>i=i+1</code>.</span>
<span class="comment-copy">The Python term is <a href="http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">"sequence [un]packing"</a>, also sometimes referred to as <a href="http://robert-lujo.com/post/40871820711/python-destructuring" rel="nofollow noreferrer">"destructing assignment"</a>.</span>
<span class="comment-copy">That loop should really be a <code>for</code>.</span>
<span class="comment-copy">I had no idea about your last use-case! So if I only want the first and last results of my generator, I can do <code>first, *_, last = gen(x)</code>? Amazing!</span>
