<div class="post-text" itemprop="text">
<p>When using the <code>thumbnail()</code> method in the Pillow (PIL) module, the following convention must be observed where two sets of (nested) parenthesis are used:</p>
<pre><code>pil_image.thumbnail((128,128))
</code></pre>
<p>If only one set is used, Python generates the following error:</p>
<p><code>TypeError: 'int' object is not subscriptable</code></p>
<p>Does the inner-most parentheses have a formal name?</p>
<p>PS: Following also works:</p>
<pre><code>box = 128, 128 # No parentheses needed.
pil_image.thumbnail(box)
</code></pre>
<p>Also: Is it a deficiency on part of the Python parser to not be able to figure out the intention here?</p>
</div>
<div class="post-text" itemprop="text">
<p>The fact the the parenthesis` are nested has nothing to do with anything.</p>
<p>It is the <code>,</code> (comma) that is important. Which is why <code>box = 128, 128</code> works and whose end result is the equivalent of <code>box = (128, 128)</code></p>
<pre><code>&gt;&gt;&gt; box = 128, 128
&gt;&gt;&gt; box
(128, 128)
&gt;&gt;&gt; box = (128, 128)
&gt;&gt;&gt; box
(128, 128)
</code></pre>
<p>For example, in python:</p>
<pre><code>&gt;&gt;&gt; myvar = ((128))
&gt;&gt;&gt; myvar
128
</code></pre>
<p>but</p>
<pre><code>&gt;&gt;&gt; myvar = ((128),)  # notice the COMMA
&gt;&gt;&gt; myvar
(128,)
</code></pre>
<p>(128,) is called a <code>tuple</code> which is something like a LIST (<code>mylist = []</code>)</p>
<p>One of the main differences is a LIST can be modified, a tuple cannot:</p>
<p>e.g.</p>
<pre><code>mylist.append(1)  # works
myvar.append(1)  # fails
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are passing a <a href="http://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow"><em>tuple</em></a> to the <code>thumbnail()</code> method. The distinction is as follows:</p>
<pre><code>thumbnail((128,128))  # single tuple argument: (128,128)

thumbnail(128,128)    # two integer arguments: 128 and 128
</code></pre>
<p>Your <code>box</code> variable is also a tuple, which is why it works as well:</p>
<pre><code>&gt;&gt;&gt; box = 128, 128
&gt;&gt;&gt; box
(128, 128)
&gt;&gt;&gt;
&gt;&gt;&gt; type(box)
&lt;type 'tuple'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Its called a tuple. See this <a href="http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">link</a> on tuples and other sequence types.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>thumbnail</code> is a function that takes a <code>tuple</code> as its first argument. When you do <code>thumbnail(128, 128)</code>, python tries to treat <code>128</code> as a tuple (by indexing it), which it isn't, and so you get your error.</p>
<p>In the case of variable assignment like <code>box = 128, 128</code>, python understands that <code>box</code> is meant to be a tuple, but in the context of <code>thumbnail(128, 128)</code>, python assumes you meant to pass in two <code>int</code> arguments, and not a single <code>tuple</code>.</p>
</div>
<span class="comment-copy">There is no "deficiency".  In the former case you need parentheses to clarify that you are not passing two positional arguments.  In the latter there is no ambiguity.</span>
<span class="comment-copy"><code>myvar = ((1+3),)</code> results in <code>TypeError: 'int' object is not callable</code> - FYI.</span>
<span class="comment-copy">I ran this in Terminal and it worked just fine... lol</span>
<span class="comment-copy">I am also using a terminal, in Python 2.7.2 on Windows 7.</span>
<span class="comment-copy">I just ran everything using 2.7.5 and it works as well...</span>
<span class="comment-copy">You are right, my mistake. Thanks.</span>
<span class="comment-copy">+1 Can you please explain a bit more how Python attempts to index 128? Thanks.</span>
<span class="comment-copy">It just does, as this is what the code tells it to do. You can just do <code>x = 128; x[0]</code>. This will attempt to index an int.</span>
