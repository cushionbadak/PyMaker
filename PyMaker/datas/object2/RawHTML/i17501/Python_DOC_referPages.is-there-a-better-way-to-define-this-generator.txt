<div class="post-text" itemprop="text">
<p>Say I want to make a generator that returns a fixed number of users from a list, and if the number of users I want is greater than the length of the list, it just repeats the last user. I wrote a generator to do this below:</p>
<pre><code>def gen_users(users, total):
    num_users = len(users)
    cur_user = 0
    while cur_user &lt; total:
        if cur_user &gt;= num_users:
            yield users[-1]
        else:
            yield users[cur_user]
        cur_user += 1
</code></pre>
<p>So if I had a list of users <code>users = ['one', 'two', 'three']</code> and I call <code>gen_users(users, 5)</code> I get back <code>one, two, three, three, three</code>.</p>
<p>Is there a more pythonic way to do this? Is using generators a valid approach to this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; def gen_users(users, total):
...     # assert users and total &gt; 0
...     for i, user in enumerate(itertools.islice(users, total)):
...         yield user
...     for _ in range(total - i - 1): # i -&gt; last index
...         yield user
... 
&gt;&gt;&gt; list(gen_users([1,2,3], 5))
[1, 2, 3, 3, 3]
&gt;&gt;&gt; list(gen_users([1,2,3], 2))
[1, 2]
</code></pre>
<p>Alternatively you can use <code>users[:total]</code>, but it will create temporary sequence.</p>
<p><strong>UPDATE</strong></p>
<p>Slightly modified version of Hans Zauber's code:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice, chain, repeat
&gt;&gt;&gt; 
&gt;&gt;&gt; def gen_users(users, total):
...     return islice(chain(users, repeat(users[-1])), total)
... 
&gt;&gt;&gt; list(gen_users([1,2,3], 5))
[1, 2, 3, 3, 3]
&gt;&gt;&gt; list(gen_users([1,2,3], 3))
[1, 2, 3]
&gt;&gt;&gt; list(gen_users([1,2,3], 2))
[1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this one-liner:</p>
<pre><code>import itertools
gen_users = lambda users, total: itertools.chain(itertools.islice(users, total), itertools.repeat(users[-1], total-len(users)))
</code></pre>
</div>
<span class="comment-copy">Exactly what I wanted, I knew there had to be a better way to do this! Thanks.</span>
<span class="comment-copy">If <code>total</code> is large, using <code>xrange</code> might be an improvement.</span>
<span class="comment-copy">@HansZauber, I used <code>range</code> to make sure this code run both in Python 2.x, 3.x.</span>
<span class="comment-copy">Try <code>list(gen_users([1,2,3], 2))</code>.</span>
<span class="comment-copy">Fixed, I forgot that case.</span>
<span class="comment-copy">This answer is awesome too and equally valid. Thanks.</span>
