<div class="post-text" itemprop="text">
<p>I would like to rewrite a small Perl programm to Python.
I am processing text files with it as follows:</p>
<p>Input:</p>
<pre><code>00000001;Root;;
00000002;  Documents;;
00000003;    oracle-advanced_plsql.zip;file;
00000004;  Public;;
00000005;  backup;;
00000006;    20110323-JM-F.7z.001;file;
00000007;    20110426-JM-F.7z.001;file;
00000008;    20110603-JM-F.7z.001;file;
00000009;    20110701-JM-F-via-summer_school;;
00000010;      20110701-JM-F-yyy.7z.001;file;
</code></pre>
<p>Desired output:</p>
<pre><code>00000001;;Root;;
00000002;  ;Documents;;
00000003;    ;oracle-advanced_plsql.zip;file;
00000004;  ;Public;;
00000005;  ;backup;;
00000006;    ;20110323-JM-F.7z.001;file;
00000007;    ;20110426-JM-F.7z.001;file;
00000008;    ;20110603-JM-F.7z.001;file;
00000009;    ;20110701-JM-F-via-summer_school;;
00000010;      ;20110701-JM-F-yyy.7z.001;file;
</code></pre>
<p>Here is the working Perl code:</p>
<pre><code>#filename: perl_regex.pl
#/usr/bin/perl -w
while(&lt;&gt;) {                                                           
  s/^(.*?;.*?)(\w)/$1;$2/;                                            
  print $_;                                                           
}      
</code></pre>
<p>It call it from the command line: <code>perl_regex.pl input.txt</code></p>
<p>Explanation of the Perl-style regex:</p>
<pre><code>s/        # start search-and-replace regexp
  ^       # start at the beginning of this line
  (       # save the matched characters until ')' in $1
    .*?;  # go forward until finding the first semicolon
    .*?   # go forward until finding... (to be continued below)
  )
  (       # save the matched characters until ')' in $2
    \w    # ... the next alphanumeric character.
  )
/         # continue with the replace part
  $1;$2   # write all characters found above, but insert a ; before $2
/         # finish the search-and-replace regexp.
</code></pre>
<p>Could anyone tell me, how to get the same result in Python? Especially for the $1 and $2 variables I couldn't find something alike.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python regular expression is very similar to Perl's, except:</p>
<ul>
<li>In Python there's no regular expression literal. It should be expressed using string. I used <code>r'raw string literal'</code> in the following code.</li>
<li>Backreferences are expressed as <code>\1</code>, <code>\2</code>, .. or <code>\g&lt;1&gt;</code>, <code>\g&lt;2&gt;</code>, ..</li>
<li>...</li>
</ul>
<p>Use <a href="http://docs.python.org/2/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> to replace.</p>
<pre><code>import re
import sys

for line in sys.stdin: # Explicitly iterate standard input line by line
    # `line` contains trailing newline!
    line = re.sub(r'^(.*?;.*?)(\w)', r'\1;\2', line)
    #print(line) # This print trailing newline
    sys.stdout.write(line) # Print the replaced string back.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The replace instruction for s/pattern/replace/ in python regexes is the re.sub(pattern, replace, string) function, or re.compile(pattern).sub(replace, string). In your case, you will do it so:</p>
<pre class="lang-py prettyprint-override"><code>_re_pattern = re.compile(r"^(.*?;.*?)(\w)")
result = _re_pattern.sub(r"\1;\2", line)
</code></pre>
<p>Note that <code>$1</code> becomes <code>\1</code>. As for perl, you need to iterate over your lines the way you want to do it (open, inputfile, splitlines, ...).</p>
</div>
<span class="comment-copy">Cool! That's almost as compact and readable as the Perl version. Fit's my brain! Just the backslah in \1 and \2 doesn't look so pythonic to me, but I'm new to python, though. Thanks for your answer!</span>
<span class="comment-copy">@royskatt - The Perl re could have been written as <code>s/;\s*\K(?=\w)/;/</code>, using the <code>\K</code>eep (all to the left) assertion and a positive look-ahead, substituting just the first instance.  A close Python equivalent is <code>re.sub(r'(;\s*)(?=\w)', r'\1;', line, 1)</code> which avoids one capture and limits the substitution to only once.</span>
<span class="comment-copy">@Kenosis: So there is no real PCRE in Python, right? The only think I found was <a href="https://github.com/awahlig/python-pcre" rel="nofollow noreferrer">github.com/awahlig/python-pcre</a>, but that doesn't look too official to me.</span>
<span class="comment-copy">@royskatt - See <a href="http://stackoverflow.com/questions/7063420/perl-compatible-regular-expression-pcre-in-python/7066413#7066413">tchrist's response</a> to <a href="http://stackoverflow.com/questions/7063420/perl-compatible-regular-expression-pcre-in-python">Perl Compatible Regular Expression (PCRE) in Python</a>.</span>
<span class="comment-copy">I saw this several times: what is this compiling of a regex about? Is it just saving a string into a variable or does it optimize it the Regex somehow performancewise?</span>
<span class="comment-copy">@royskatt Before the regex can be executed, it's parsed, optimized, and transformed into efficient instructions. If you don't <i>manually</i> compile it in Python, it will be compiled on <i>each</i> match, which is unnecessary overhead. Perl has regex literals which mostly hide this.</span>
<span class="comment-copy">I do not understand regexes that well this deep, but I believe this converts the pattern to the Non Finite Automata. This is a step that will be done the first time you call re.sub instead of compiled_reg.sub() and it will then be stored in a cache so that subsequent calls are quicker. I took the habit to compile regexes and I imagine this saves the cache search at each iteration.</span>
<span class="comment-copy">@Cilyan, According to <a href="http://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile</code> documentation NOTE</a>, only patterns passed <code>re.search</code>, <code>re.match</code>, <code>re.compile</code> are cached.</span>
<span class="comment-copy">@falsetru, I was surprised by your notice, so I looked a little bit into it, and actually the cache works for sub too, at least from 2.6 (I did not look earlier): <a href="http://hg.python.org/cpython/file/7f649ff0756c/Lib/re.py#l168" rel="nofollow noreferrer">hg.python.org/cpython/file/7f649ff0756c/Lib/re.py#l168</a> I guess that makes sense ;)</span>
