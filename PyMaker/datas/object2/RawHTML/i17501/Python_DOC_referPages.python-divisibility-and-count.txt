<div class="post-text" itemprop="text">
<p>Okay, editing for clarity, sorry about the confusion.</p>
<p>I need to count the number of occurrences of a number (we'll say 2) between 1 and n (user inputted positive number). That includes each time given number can go into each number between 1 and n.</p>
<p>So every instance of 2 in each number up to n. so 10 would be 5 in ten, plus 4 in 9, 4 in 8, 3 in 7, 3 in 6, 2 in 5, 2 in 4, 1 in 3, and 1 in 2. Remainders don't matter, I just need to count the 2s.</p>
<p>so a user inputting 10 should print 25, if my math is right.</p>
<p>I'm new and totally clueless.</p>
<p>As of right now, I basically have asking the user to input a number.</p>
<p>n = int (input("Enter a positive number between 1 and 1000"))</p>
<p>I had successfully gotten my code to divide by nine, but that isn't really what I'm trying to do. I think I need to convert everything between 1 and n to a string? Would that use a range like so 1:n? Is that even possible?</p>
<p>Then I could count how many of a certain number?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean something along these lines?</p>
<pre><code>def count(n):
    occurrences = 0
    for i in range(n, 0, -1):  # i -&gt; n, n-1, n-2, ... 3, 2, 1
        occurrences += i//2    # add whole number of 2's in this value of i
    return occurrences

print(count(10))  # 25
print(count(9))   # 20
</code></pre>
<p>If what that does is correct, it can be optimized and shorted to just:</p>
<pre><code>def count(n):
    return sum(i//2 for i in range(n, 0, -1))
</code></pre>
<p>Which applies the built-in<a href="http://docs.python.org/3/library/functions.html?highlight=sum#sum" rel="nofollow"><code>sum()</code></a>function to a<a href="http://docs.python.org/3/reference/expressions.html?highlight=expression#generator-expressions" rel="nofollow"><code>generator expression</code></a>.</p>
<p>The<code>range(n, 0, -1)</code>is an <a href="http://docs.python.org/3/howto/functional.html?highlight=iterator#iterators" rel="nofollow">iterator</a> that produces all the numbers from<code>n</code>to<code>1</code>backwards -- which I used since that's how you described what you wanted. Since doing it in that order doesn't really matter, it would probably be better (simpler) to just use<code>range(1, n+1)</code>which produces the sequence in ascending order (<code>1, 2, 3, ... n-2, n-1, n</code>).</p>
</div>
<span class="comment-copy">What does your textbook say?</span>
<span class="comment-copy">What have you already tried? And if this is a a homework assignment, you should mention it.</span>
<span class="comment-copy">I dont even understand what your asking ... ive read it a bunch of times too ...  ... how do you get 25 from 10?</span>
<span class="comment-copy">I think I get it -- waiting for response from OP.</span>
<span class="comment-copy">Okay, I edited it and hopefully it's clearer, hard to explain what I barely understand. It's just a practice problem, so any help is appreciated but explanations would be great. Joran, it would print 25 because that's how many 2s are in each number up to ten.</span>
<span class="comment-copy">Since OP is new to Python, it might help to explain what the code does.</span>
<span class="comment-copy">could you explain the return line? I tweaked this so that it would print (count(n)) and it seems to work. Still testing but would love to understand the code.</span>
<span class="comment-copy">@user3259535: Sure -- wasn't going to bother until I had confirmation of my interpretation.</span>
<span class="comment-copy">thank you for your help!</span>
