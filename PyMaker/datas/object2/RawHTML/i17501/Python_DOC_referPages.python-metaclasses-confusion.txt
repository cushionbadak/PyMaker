<div class="post-text" itemprop="text">
<p>I am a bit confused regarding metaclasses in case of multiple inheritance.</p>
<p>Consider the following code:</p>
<pre><code>class MetaClass1(type):
    def __init__(cls, name, bases, dict_):
        print "MetaClass1"

class MetaClass2(type):
    def __init__(cls, name, bases, dict_):
        print "MetaClass2"

class A(object):
    __metaclass__ = MetaClass1


class B(object):
    __metaclass__ = MetaClass2

class C(A, B):
    pass
</code></pre>
<p>The output of this will be the following:</p>
<ol>
<li><p>"MetaClass1"</p></li>
<li><p>"MetaClass2"</p></li>
<li><p>TypeError regarding metaclass conflict, which is expected, no problems regarding this.</p></li>
</ol>
<p>Next I will change the code a bit and do the following:</p>
<pre><code>class MetaClass1(type):
    def __init__(cls, name, bases, dict_):
        print "MetaClass1"

class MetaClass2(MetaClass1):
    def __init__(cls, name, bases, dict_):
        print "MetaClass2 inherits"
        super(MetaClass2, cls).__init__(name, bases, dict_)

class A(object):
    __metaclass__ = MetaClass1


class B(object):
    __metaclass__ = MetaClass2

class C(A, B):
    pass
</code></pre>
<p>This time the output is going to be:</p>
<ol>
<li><p>"MetaClass1"</p></li>
<li><p>"MetaClass2 inherits"</p>
<p>"MetaClass1"</p></li>
<li><p>"MetaClass2 inherits"</p>
<p>"MetaClass1"</p></li>
</ol>
<p>The MRO of class C is:</p>
<pre><code>[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;type 'object'&gt;]
</code></pre>
<p>Why does class C receive MetaClass2 as its metaclass and not MetaClass1?</p>
</div>
<div class="post-text" itemprop="text">
<p>When deciding the metaclass of a class without an explicitly specified one, as in the case of your <code>C</code>, Python examines the metaclasses of all the superclasses (direct and indirect) of the class being created, and picks the one metaclass which is a subtype of all the metaclasses of the superclasses of the class being created. If there is no such metaclass, it raises a <code>TypeError</code>.</p>
<p>In your example, <code>MetaClass2</code> is that one metaclass which inherits from all the metaclasses of <code>C</code>'s superclasses.</p>
<p>This is covered in <a href="http://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass" rel="nofollow">section 3.3.3.1</a> of the language reference.</p>
</div>
<span class="comment-copy">Thanks! This is actually a pretty clever mechanism right there.</span>
