<div class="post-text" itemprop="text">
<p>I have a dictionary looks like this, the DNA is the keys and quality value is value:</p>
<pre><code>{'TTTGTTCTTTTTGTAATGGGGCCAGATGTCACTCATTCCACATGTAGTATCCAGATTGAAATGAAATGAGGTAGAACTGACCCAGGCTGGACAAGGAAGG\n':
   'eeeecdddddaaa`]eceeeddY\\cQ]V[F\\\\TZT_b^[^]Z_Z]ac_ccd^\\dcbc\\TaYcbTTZSb]Y]X_bZ\\a^^\\S[T\\aaacccBBBBBBBBBB\n',
 'ACTTATATTATGTTGACACTCAAAAATTTCAGAATTTGGAGTATTTTGAATTTCAGATTTTCTGATTAGGGATGTACCTGTACTTTTTTTTTTTTTTTTT\n':
   'dddddd\\cdddcdddcYdddd`d`dcd^dccdT`cddddddd^dddddddddd^ddadddadcd\\cda`Y`Y`b`````adcddd`ddd_dddadW`db_\n',
 'CTGCCAGCACGCTGTCACCTCTCAATAACAGTGAGTGTAATGGCCATACTCTTGATTTGGTTTTTGCCTTATGAATCAGTGGCTAAAAATATTATTTAAT\n':
   'deeee`bbcddddad\\bbbbeee\\ecYZcc^dd^ddd\\\\`]``L`ccabaVJ`MZ^aaYMbbb__PYWY]RWNUUab`Y`BBBBBBBBBBBBBBBBBBBB\n'}
</code></pre>
<p>I want to write a function so that if I query a DNA sequence, it returns a tuple of this DNA sequence and its corresponding quality value</p>
<p>I wrote the following function, but it gives me an error message that says <code>list indices must be integers, not str</code></p>
<pre><code>def query_sequence_id(self, dna_seq=''):
    """Overrides the query_sequence_id so that it optionally returns both the sequence and the quality values.
    If DNA sequence does not exist in the class, return a string error message"""
    list_dna = []
    for t in self.__fastqdict.keys():
        list_dna.append(t.rstrip('\n'))
    self.dna_seq = dna_seq
    if self.dna_seq in list_dna:
        return (self.dna_seq,self.__fastqdict.values()[self.dna_seq + "\n"])
    else:
        return "This DNA sequence does not exist"
</code></pre>
<p>so I want something like if I print </p>
<pre><code>query_sequence_id("TTTGTTCTTTTTGTAATGGGGCCAGATGTCACTCATTCCACATGTAGTATCCAGATTGAAATGAAATGAGGTAGAACTGACCCAGGCTGGACAAGGAAGG"), 
</code></pre>
<p>I would get </p>
<pre><code>('TTTGTTCTTTTTGTAATGGGGCCAGATGTCACTCATTCCACATGTAGTATCCAGATTGAAATGAAATGAGGTAGAACTGACCCAGGCTGGACAAGGAAGG',
 'eeeecdddddaaa`]eceeeddY\\cQ]V[F\\\\TZT_b^[^]Z_Z]ac_ccd^\\dcbc\\TaYcbTTZSb]Y]X_bZ\\a^^\\S[T\\aaacccBBBBBBBBBB')
</code></pre>
<p>I  want to get rid of "\n" for both keys and values, but my code failed. Can anyone help me fix my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>The newline characters aren't your problem, though they are messy. You're trying to index the <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow">view</a> returned by <code>dict.values()</code> based on the string. That's not only not what you want, but it also defeats the whole purpose of using the dictionary in the first place. Views are iterables, not mappings like dicts are. Just look up the value in the dictionary, the normal way:</p>
<pre><code>return (self.dna_seq, self.__fastqdict[self.dna_seq + "\n"])
</code></pre>
<p>As for the newlines, why not just take them out when you build the dictionary in the first place?</p>
</div>
<div class="post-text" itemprop="text">
<p>To modify the dictionary you can just do the following:</p>
<pre><code>myNewDict = {}
for var in myDict:
  myNewDict[var.strip()] = myDict[var].strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can remove those pesky newlines from your dictionary's keys and values like this (assuming your dictionary was stored in a variable named<code>dna</code>):</p>
<pre><code>dna = {k.rstrip(): v.rstrip() for k, v in dna.iteritems()}
</code></pre>
</div>
<span class="comment-copy">Why don't you just strip the unnecessary newlines on insert of the data and then not have them in there at all?</span>
<span class="comment-copy">thanks. your modification is perfect!</span>
