<div class="post-text" itemprop="text">
<p>I specifically need to use <code>with open</code> statement for opening the files, because I need to open a few hundred files together and merge them using K-way merge. I understand, ideally I should have kept K low, but I did not foresee this problem.</p>
<p>Starting from scratch is not an option now as I have a deadline to meet. So at this point, I need very fast I/O that does not store the whole/huge portion of file in memory (because there are hundreds of files, each of ~10MB). I just need to read one line at a time for K-way merge. Reducing memory usage is my primary focus right now.</p>
<p>I learned that <code>with open</code> is the most efficient technique, but I cannot understand how to <code>open</code> all the files together in a single <code>with open</code> statement. Excuse my beginner ignorance!</p>
<p><strong>Update:</strong> This problem was solved. It turns out the issue was not about how I was opening the files at all. I found out that the excessive memory usage was due to inefficient garbage collection. I did not use <code>with open</code> at all. I used the regular <code>f=open()</code> and <code>f.close()</code>. Garbage collection saved the day.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's fairly easy to write your own context manager to handle this by using the built-in <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer"><code>contextmanger</code></a> function decorator to define "a factory function for <code>with</code> statement context managers" as the documentation states. For example:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def multi_file_manager(files, mode='rt'):
    """ Open multiple files and make sure they all get closed. """
    files = [open(file, mode) for file in files]
    yield files
    for file in files:
        file.close()

filenames = 'file1', 'file2', 'file3'

with multi_file_manager(filenames) as files:
    a = files[0].readline()
    b = files[2].readline()
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open(...) as f: 
    # do stuff 
</code></pre>
<p>translates roughly to </p>
<pre><code>f = open(...)
# do stuff
f.close()
</code></pre>
<p>In your case, I wouldn't use the <code>with open</code> syntax. If you have a list of filenames, then do something like this</p>
<pre><code>filenames = os.listdir(file_directory)
open_files = map(open, filenames)
# do stuff
for f in open_files:
    f.close()
</code></pre>
<p>If you really want to use the <code>with open</code> syntax, you can make your own context manager that accepts a list of filenames</p>
<pre><code>class MultipleFileManager(object):
    def __init__(self, files):
        self.files = files

    def __enter__(self):
        self.open_files = map(open, self.files)
        return self.open_files

    def __exit__(self):
        for f in self.open_files:
            f.close()
</code></pre>
<p>And then use it like this:</p>
<pre><code>filenames = os.listdir(file_directory)
with MulitpleFileManager(filenames) as files:
    for f in files:
        # do stuff
</code></pre>
<p>The only advantage I see to using a context manager in this case is that you can't forget to close the files. But there is nothing wrong with manually closing the files. And remember, the os will reclaim its resources when your program exits anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>While not a solution for 2.7, I should note there is one good, correct solution for 3.3+, <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a>, which can be used to do this <em>correctly</em> (surprisingly difficult to get right when you roll your own) and nicely:</p>
<pre><code>from contextlib import ExitStack

with open('source_dataset.txt') as src_file, ExitStack() as stack:
    files = [stack.enter_context(open(fname, 'w')) for fname in fname_list]
    ... do stuff with src_file and the values in files ...
... src_file and all elements in stack cleaned up on block exit ...
</code></pre>
<p>Importantly, if any of the <code>open</code>s fails, all of the <code>open</code>s that succeeded prior to that point will be cleaned up deterministically; most naive solutions end up failing to clean up in that case, relying on the garbage collector at best, and in cases like lock acquisition where there is no object to collect, failing to ever release the lock.</p>
<p>Posted here since this question was marked as the "original" for a <a href="https://stackoverflow.com/q/39782888/364696">duplicate</a> that didn't specify Python version.</p>
</div>
<span class="comment-copy">I don't think <code>with open</code> is any more efficient than <code>f = open() ... close(f)</code>. It is supposed to be more convenient, but it sounds like that is not the case in your situation. You can just open a bunch of files and keep the file objects in a list.</span>
<span class="comment-copy"><code>with</code> statement has nothing to do with efficiency, it only makes sure that the file will be closed implicitly(even if an exception occurs). As @MarkkuK said, you can store the references to the file objects in a list and then close them manually at the end, and use a try-finally block to make sure that the files are closed even if an error occurs.</span>
<span class="comment-copy">Thank you both for the fast responses. Can you suggest an alternative where the memory usage will not be so high even if I open a few hundred files together? Since I just need one line at a time from these files, I think it would help if I use some technique that does not load large portion of the files in buffer.</span>
<span class="comment-copy">So, you want to read all lines from first file first and then from second line... etc or you want to read first line from each file and then second line from each file....?</span>
<span class="comment-copy">Use the <code>readline</code>-method of file objects to read a single line. repeated use will retrive the next line each time: <code>f = open(file); f.readline(); f.readline(); ...; f.close()</code></span>
<span class="comment-copy">Why are you creating a list of <code>None</code>s just to close the files?</span>
<span class="comment-copy">@AshwiniChaudhary What do you mean by list of Nones?</span>
<span class="comment-copy"><code>map(lambda x: x.close(), self.open_files)</code></span>
<span class="comment-copy">@AshwiniChaudhary ahh nice catch. changing it to a for loop. Although looking at the discussion I don't think my answer is what they want</span>
