<div class="post-text" itemprop="text">
<p>I have a list of strings which have the following format:</p>
<pre><code>['variable1 (name1)', 'variable2 (name2)', 'variable3 (name3)', ...]
</code></pre>
<p>... and I want to sort the list based on the <code>(nameX)</code> part, alphabetically. How would I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>To change sorting key, use <a href="https://docs.python.org/2/library/stdtypes.html?highlight=list#mutable-sequence-types" rel="noreferrer">the <code>key</code> parameter</a>:</p>
<pre><code>&gt;&gt;&gt;s = ['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
&gt;&gt;&gt; s.sort(key = lambda x: x.split()[1])
&gt;&gt;&gt; s
['variable3 (name1)', 'variable2 (name2)', 'variable1 (name3)']
&gt;&gt;&gt; 
</code></pre>
<p>Works the same way with <a href="https://docs.python.org/3/library/functions.html#sorted" rel="noreferrer"><code>sorted</code></a>:</p>
<pre><code>&gt;&gt;&gt;s = ['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
&gt;&gt;&gt; sorted(s)
['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
&gt;&gt;&gt; sorted(s, key = lambda x: x.split()[1])
['variable3 (name1)', 'variable2 (name2)', 'variable1 (name3)']
&gt;&gt;&gt; 
</code></pre>
<p>Note that, as described in the question, this will be an alphabetical sort, thus for 2-digit components it will not interpret them as numbers, e.g. "11" will come before "2".</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex for this:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'\((name\d+)\)')
&gt;&gt;&gt; lis = ['variable1 (name1)', 'variable3 (name3)', 'variable2 (name100)']
&gt;&gt;&gt; sorted(lis, key=lambda x:r.search(x).group(1))
['variable1 (name1)', 'variable2 (name100)', 'variable3 (name3)']
</code></pre>
<p>Note that above code will return something like <code>name100</code> before <code>name3</code>, if that's not want you want then you need to do something like this:</p>
<pre><code>&gt;&gt;&gt; r = re.compile(r'\(name(\d+)\)')
def key_func(m):
    return int(r.search(m).group(1))

&gt;&gt;&gt; sorted(lis, key=key_func)
['variable1 (name1)', 'variable3 (name3)', 'variable2 (name100)']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>key</code> parameter of <code>sort</code> method.</p>
<pre><code>test.sort(key = lambda x: x.split("(")[1])
</code></pre>
<p>Good luck!</p>
<p>Edit: <code>test</code> is the array.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution is:</p>
<pre><code>sorted(b, key = lambda x: x.split()[1])
</code></pre>
<p>Why? We want to sort the list (called b). As a key we will use (name X). Here we assume that it will be always preceded by space, therefore we split the item in the list to two and sort according to the second.</p>
</div>
<span class="comment-copy">How would you sort <code>xxx(name2), xxx(name3), xxx(name20)</code>?</span>
<span class="comment-copy">And if you need it to sort on number, just wrap it in int as follows:  s.sort(key = lambda x: int(x.split()[1]))</span>
<span class="comment-copy">Why separate function? We can inline that, right?</span>
<span class="comment-copy">@thefourtheye Yes, we can. This just looked more readable to me. :-)</span>
