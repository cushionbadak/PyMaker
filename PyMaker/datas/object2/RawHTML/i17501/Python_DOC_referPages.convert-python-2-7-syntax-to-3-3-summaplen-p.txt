<div class="post-text" itemprop="text">
<p>I have a program that works with Python 2.7 but not python 3.3 Of course I know I need to use range rather than xrange, add () for print etc.. but the program has a lot of the 'map' method and it seems to create problems. When I got this error: <code>TypeError: object of type 'map' has no len()</code> I just casted it as a string and it worked. </p>
<p>What I couldn't figure out <strong>how to convert</strong> was this expression:
<code>sum(map(len,P))</code>
I get this error: <code>TypeError: object of type 'map' has no len()</code>
but this time I'm not sure what to cast and how. 
I can post the entire code if that'd help.</p>
<p>This is how P is being initialized:</p>
<pre><code>P, Q = [line.strip().lstrip('(').rstrip(')').split(')(') for line in input_data.readlines()]
P = [map(int, perm_cycle.split()) for perm_cycle in P]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of</p>
<pre><code>P = [map(int, perm_cycle.split()) for perm_cycle in P]' 
</code></pre>
<p>use</p>
<pre><code>P = [list(map(int, perm_cycle.split())) for perm_cycle in P]'
</code></pre>
<p>The problem arises because you are trying to call <code>len(map(...))</code> later which works in Python 2 but not in Python 3 because Python 3 evaluates this <code>map</code> lazily (it's a generator there).  Run the explicit <code>list</code> around it to strip the laziness and get a real list.</p>
<p><em>BUT</em> consider that you could maybe strip that <code>map</code> altogether because if you are only interested in the length of the list, there is no need to <code>map</code> it somehow.  <code>map</code>ping it won't change its size.</p>
<p>That would mean evaluate this:</p>
<pre><code>sum(map(len, perm_cycle.split()))
</code></pre>
<p>instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert each element of <code>P</code> to a list first:</p>
<pre><code>map(lambda x: len(list(x)), P)
</code></pre>
<p>Or:</p>
<pre><code>map(len, map(list, P))
</code></pre>
<p>A better way will be to follow @Alfe answer.</p>
<p>Here's a simple (though not perfect) rule: replace Python2 <code>map(...)</code> with <code>list(map(...))</code> in Python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can force <code>map</code> to be evaluated strictly with <code>list(map)</code>, so <code>len(map(len, P))</code> or similar expressions would remain valid in Python3.</p>
<p>Basically,</p>
<pre><code>import sys

if sys.version_info.major &gt; 2:
    import builtins
    def map(f, *args):
        return list(builtins.map(f, *args))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow">Python 3</a>, <code>map</code> returns an iterator, while in <a href="http://docs.python.org/2.7/library/functions.html#map" rel="nofollow">Python 2</a> it returns a list. You can construct a list from an iterator by calling <code>list(iterator)</code>.</p>
<p>So you need to change P to be :</p>
<pre><code>P = [list(map(int, perm_cycle.split())) for perm_cycle in P]
</code></pre>
<p>Then the elements of P can be passed to <code>len</code>.</p>
<p>Another way to change it would be to have the expression be:</p>
<pre><code>sum(len(list(item) for item in P)
</code></pre>
<p>You can always replace a <code>map</code> call with a <a href="http://docs.python.org/3.3/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a> in Python 3 (in 2 you'd replace it with a list comprehension).</p>
</div>
<span class="comment-copy">Did you try: <a href="http://docs.python.org/2/library/2to3.html" rel="nofollow noreferrer">docs.python.org/2/library/2to3.html</a></span>
<span class="comment-copy">Ghost.  <code>sum(map(len, [range(3), range(4)]))</code> returns <code>7</code> in Python 3.2.3, so your question does not give the information we need to even reproduce the problem.</span>
<span class="comment-copy">What is <code>P</code> equal to?</span>
<span class="comment-copy">Perfect! Thank you! :))</span>
<span class="comment-copy">+1, didn't realise the elements of P might be a list.</span>
<span class="comment-copy">The problem is in the <code>P</code>, so applying <code>list</code> comes too late.</span>
<span class="comment-copy">You're right - updated in response to the comment above.</span>
