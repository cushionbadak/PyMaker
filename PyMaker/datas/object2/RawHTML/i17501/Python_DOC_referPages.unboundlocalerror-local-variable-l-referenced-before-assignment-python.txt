<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9264763/dont-understand-why-unboundlocalerror-occurs">Don't understand why UnboundLocalError occurs [duplicate]</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>when trying to compile the code below I get this error</p>
<pre><code>UnboundLocalError: local variable 'L' referenced before assignment
</code></pre>
<p>Can someone explain why ? Isn't a global variable assigned before anything else? </p>
<p>My Python version is 2.7.3</p>
<pre><code>#!/usr/bin/env python

import pygame
from pygame.locals import *
from sys import exit
import random
import math

R = int(8)  # promien planety
N = 5  # liczba planet
G = 2  # stala "grawitacyjna"
L = 1

def compute_dv(p1,p2):
    dx = p2[0]-p1[0]
    dy = p2[1]-p1[1]
    r = math.hypot(dx,dy)
    dx /= r*r
    dy /= r*r
    if(L&gt;1000):
   print "r= ", r, "dx= ", dx, "dy= ", dy, "dx/ r*r = ", dx, "dy/ r*r = ", dy
    L+=1
    return G*dx,G*dy


def rand_color():
    r = 32*random.randint(0,7)
    g = 32*random.randint(0,7)
    b = 22*random.randint(0,7)
    return (r,g,b)


pygame.init()
screen = pygame.display.set_mode((640, 480), 0, 32)

points = []
vs = []
colors = []

for i in range(N):
    points.append( [random.randint(0,639), random.randint(0,480)] )
    vs.append( [0,0] )
    colors.append( rand_color() )

clock = pygame.time.Clock()

screen.fill( (255,255,255))

while True:
    clock.tick(30)

for event in pygame.event.get():
    if event.type == QUIT:
        exit()

for i in range(len(points)):
   for j in range(len(points)):
      if points[i]!=points[j]:
         dvx,dvy = compute_dv( points[i],points[j])
         vs[i][0] += dvx
         vs[i][1] += dvy

for i in range(len(points)):
    points[i][0] += vs[i][0]
    points[i][1] += vs[i][1]

screen.fill( (255,255,255))

for i in range(len(points)):
  L = []
  for w in points[i]:
print int(round(w))
L.append(int(round(w)))
  points[i] = L
  print points[i], "stop"
  #x = raw_input()

  pygame.draw.circle(screen, colors[i], points[i], R)  

pygame.display.update()  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The minimal code to reproduce your bug is</p>
<pre><code>x = 1
def foo():
    x += 1
foo()
</code></pre>
<p>This is happening for a number of reasons</p>
<ol>
<li>First - because in python we have mutable and immutable classes. Ints are immutable, that is when you write <code>x+=1</code> you actually create another object (which is not true for certain ints due to optimisations CPython does). What actually happens is x = x + 1.</li>
<li>Second - because python compiler checks every assignment made inside a scope and makes every variable assigned inside that scope local to it.</li>
<li>So as you see when you try to increment <code>x</code> compiler has to access a variable that's local to that scope, but was never assigned a value before.</li>
</ol>
<p>If you're using python2 - you only have the option to declare variable <code>global</code>. But this way you would be unable to get a variable from an in-between function like </p>
<pre><code>x = 0
def foo():
  x = 1
  def bar():
    global x
    print x  # prints 0
  bar()
foo()    
</code></pre>
<p>In python3 you have <code>nonlocal</code> keyword to address this situation.</p>
<p>Also I would advise you to avoid using globals. Also there is a <code>collection.Counter</code> class that might be useful to you.</p>
<p>Further reading: <a href="http://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value">python docs</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Isn't a global variable assigned before anything else? </p>
</blockquote>
<p>Yes, but that's completely irrelevant. The compiler sees an assignment within the function and marks the name as being in the local scope. You need to use the <code>global</code> keyword at the beginning of the function to tell the compiler that the name should be in the global scope instead.</p>
<pre><code>def compute_dv(p1,p2):
    global L
     ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are mixing tabs and spaces; don't do that.</p>
<p>Run your script with <code>python -tt yourscript.py</code> and fix all errors that finds.</p>
<p>Then configure your editor to stick to only spaces for indentation; using 4 spaces per indent is the recommended style by the <a href="http://www.python.org/dev/peps/pep-0008/#tabs-or-spaces" rel="nofollow">Python Style Guide</a>.</p>
<p>Next, you are trying to increment the global <code>L</code> here:</p>
<pre><code>def compute_dv(p1,p2):
    # ...

    if(L&gt;1000):
        print "r= ", r, "dx= ", dx, "dy= ", dy, "dx/ r*r = ", dx, "dy/ r*r = ", dy
        L+=1
</code></pre>
<p>without declaring it a global. Add <code>global L</code> in that function. Assignment to a name inside a function marks such a name as a local, unless you specifically tell Python it is not.</p>
</div>
<span class="comment-copy">globals are evil</span>
<span class="comment-copy">Note that <code>UnboundLocalError</code> is a run-time exception, not a compiler exception.</span>
<span class="comment-copy">Or, better, redesign to not use a global variable at all, since it's a really terrible design.</span>
<span class="comment-copy">@Wooble: Yup, you are correct; I missed the <code>L+=1</code> in the function there. The indentation in the post was terrible and there were actual tabs on the later lines with <code>L</code> and a <code>for</code> loop.</span>
<span class="comment-copy">Thank you for that. I fixed 2 mistakes but didn't solve my problem.</span>
