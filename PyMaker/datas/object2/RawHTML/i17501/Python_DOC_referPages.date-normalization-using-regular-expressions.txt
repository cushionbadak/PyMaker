<div class="post-text" itemprop="text">
<p>I am doing a date normalization thing where a date not put in a valid format is changed to a valid format. For example</p>
<pre><code>1|1/2002
</code></pre>
<p>becomes</p>
<pre><code>01-01-2002
</code></pre>
<p>and</p>
<pre><code>5|9-20
</code></pre>
<p>becomes</p>
<pre><code>05-09-0020
</code></pre>
<p>delimiter is only limited to [- / | ] and any input which doesn't follow has already been thrown out the list. </p>
<p>re.sub(pattern, repl, string, count=0, flags=0)</p>
<p>I looked at the library example but really could not find anything that helps parsing the data.</p>
<pre><code>&gt;&gt;&gt; def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'
&gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
&gt;&gt;&gt; re.sub(r'\sAND\s', ' &amp; ', 'Baked Beans And Spam', flags=re.IGNORECASE)
'Baked Beans &amp; Spam'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using capturing group:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; pattern = re.compile(r'\b(\d{1,2})\D(\d{1,2})\D(\d{1,4})\b')
&gt;&gt;&gt; def repl(match):
...     return '{:0&gt;2}-{:0&gt;2}-{:0&gt;4}'.format(*match.groups())
...
&gt;&gt;&gt; pattern.sub(repl, '1|1/2002')
01-01-2002
&gt;&gt;&gt; pattern.sub(repl, '5|9-20')
05-09-0020
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
def format_date_string(data):
    zmap = {0:2, 1:2, 2:4}
    return "-".join(p.zfill(zmap[i]) for i,p in enumerate(re.split("[|/-]",data)))

print(format_date_string("1|1/2002"))    # 01-01-2002
print(format_date_string("5|9-20"))      # 05-09-0020
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

def convert_format(d):
    m = re.match('(\d+).(\d+).(\d+)', d)
    if m:
        m = [int(x) for x in m.groups()]
        return '%0.2d-%0.2d-%0.4d' % (m[0], m[1], m[2])
    else:
        return False

for d in ('1|1/2002', '5|9-20'):
    print convert_format(d)
</code></pre>
<p>output:</p>
<pre><code>01-01-2002
05-09-0020
</code></pre>
<p>OR:</p>
<pre><code>import re

def convert_format(d):
    m = re.findall('\d+', d)
    if m:
        m = [int(x) for x in m]
        return '%0.2d-%0.2d-%0.4d' % (m[0], m[1], m[2])
    else:
        return False

for d in ('1|1/2002', '5|9-20'):
    print convert_format(d)
</code></pre>
</div>
<span class="comment-copy">that was really helpful! thank you! what is it called the thing :0&gt;2  you did. I want to find out more. Thank you!</span>
<span class="comment-copy">@LeonardLie, <code>0</code> is padding character. <code>&gt;</code> is to right align. <code>2</code> is width.</span>
<span class="comment-copy">@LeonardLie, See <a href="http://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">Format string syntax</a>.</span>
<span class="comment-copy">Thank you very much! I'll accept the answer after the timer.</span>
<span class="comment-copy">I didn't downvote. The output is not what OP want.</span>
<span class="comment-copy">is that a part of question ?</span>
