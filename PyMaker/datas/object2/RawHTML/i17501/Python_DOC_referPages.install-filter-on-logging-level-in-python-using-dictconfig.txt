<div class="post-text" itemprop="text">
<p>I cannot install a filter on a logging handler using <code>dictConfig()</code> syntax. <code>LoggingErrorFilter.filter()</code> is simply ignored, nothing happens.</p>
<p>I want to filter out error messages so that they do not appear twice in the log output. So I wrote <code>LoggingErrorFilter</code> class and overrode <code>filter()</code>.</p>
<p>My configuration:</p>
<pre><code>class LoggingErrorFilter(logging.Filter):
  def filter(self, record):
    print 'filter!'
    return record.levelno == logging.ERROR or record.levelno == logging.CRITICAL

config = {
      'version': 1,
      'disable_existing_loggers' : False,
      'formatters' : {
        'standard' : {
          'format' : '%(asctime)s %(levelname)s %(name)s::%(message)s',
        },
      },
      'handlers' : {
        'console': {
          'class' : 'logging.StreamHandler',
          'level' : level,
          'formatter' : 'standard',
          'stream' : 'ext://sys.stdout',
        },
        'errorconsole': {
          'class' : 'logging.StreamHandler',
          'level' : 'ERROR',
          'formatter' : 'standard',
          'stream' : 'ext://sys.stderr',
          'filters'  :['errorfilter',],
        },
      },
      'filters': {
        'errorfilter': {
          'class' : 'LoggingErrorFilter',
        }
      },
      'loggers' : {
        '' : {
          'handlers' : ['errorconsole','console',],
          'level' : level,
          'propagate' : True,
        },
        name : {
          'handlers' : ['errorconsole','console',],
          'level' : level,
          'propagate' : False,
        },
      },
  }
  logging.config.dictConfig(config)
</code></pre>
<p>What am I doing wrong here? Why is my filter ignored?</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, <code>Tupteq</code>'s answer is not correct in general. The following script:</p>
<pre><code>import logging
import logging.config
import sys

class MyFilter(logging.Filter):
    def __init__(self, param=None):
        self.param = param

    def filter(self, record):
        if self.param is None:
            allow = True
        else:
            allow = self.param not in record.msg
        if allow:
            record.msg = 'changed: ' + record.msg
        return allow

LOGGING = {
    'version': 1,
    'filters': {
        'myfilter': {
            '()': MyFilter,
            'param': 'noshow',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['myfilter']
        }
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console']
    },
}

if __name__ == '__main__':
    print(sys.version)
    logging.config.dictConfig(LOGGING)
    logging.debug('hello')
    logging.debug('hello - noshow')
</code></pre>
<p>When run, produces the following output:</p>
<pre><code>$ python filtcfg.py 
2.7.5+ (default, Sep 19 2013, 13:48:49) 
[GCC 4.8.1]
changed: hello
</code></pre>
<p>which shows that you <em>can</em> configure filters using <code>dictConfig()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify a class name, but it is done with the strangely named <code>()</code> key, and it has to include the module name. E.g.:</p>
<pre><code> 'filters': {
    'errorfilter': {
      '()' : '__main__.LoggingErrorFilter',
    }
  },
</code></pre>
<p>See <a href="https://docs.python.org/3/library/logging.config.html#user-defined-objects" rel="nofollow noreferrer">16.7.2.4. User-defined objects</a> in the documentation.</p>
</div>
<span class="comment-copy">My error was that I used qoutation marks around the class name. The config dictionary expected object type, not the type's name. Thanks!</span>
<span class="comment-copy">does it work with yml config ? I was trying but no luck</span>
<span class="comment-copy">Thanks for this clarification.</span>
<span class="comment-copy">Thanks for this! Is this somewhere in the docs?</span>
<span class="comment-copy">I don't recall how I figured this out. But the special <code>()</code> key is documented in <a href="https://docs.python.org/3/library/logging.config.html#user-defined-objects" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>. I've now added the link in the answer too. Thanks!</span>
