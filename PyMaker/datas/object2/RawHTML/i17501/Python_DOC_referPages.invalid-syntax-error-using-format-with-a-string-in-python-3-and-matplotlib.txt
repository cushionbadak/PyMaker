<div class="post-text" itemprop="text">
<p>The code:</p>
<pre><code>#/usr/bin/env python3
# -*- coding: utf-8 -*-


import numpy as np
import matplotlib.pyplot as plt
from sympy.solvers import *
from sympy import *
from matplotlib import rcParams


rcParams['text.latex.unicode'] = True
rcParams['text.usetex'] = True
rcParams['text.latex.preamble'] = '\usepackage{amsthm}', '\usepackage{amsmath}', '\usepackage{amssymb}',
'\usepackage{amsfonts}', '\usepackage[T1]{fontenc}', '\usepackage[utf8]{inputenc}'


f = lambda x: x ** 2 + 1
#f = lambda x: np.sin(x) / x

x = Symbol('x')
solucion = solve(x**2+1, x)

fig, ax = plt.subplots()
x = np.linspace(-6.0, 6.0, 1000)
ax.axis([x[0] - 0.5, x[-1] + 0.5, x[0] - 0.5, x[-1] + 0.5])
ax.spines['left'].set_position('center')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('center')
ax.spines['top']
ax.spines['left']
ax.spines['bottom']
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
ax.grid('on')
ticks = []
for i in range(int(x[0]), int(x[-1] + 1), 1):
    ticks.append(i)
ticks.remove(0)
ax.set_xticks(ticks)
ax.set_yticks(ticks)

ax.plot(x, f(x), 'b-', lw=1.5)
ax.legend([r'$f(x)=x^2-1$'], loc='lower right')

text_sol = ''
if solucion == []:
    text_sol = r'$No\; hay\; soluciones $'
else:
    for i, value in enumerate(solucion):
        text_sol += ur'$Solución \; {}\; :\; {}\\$'.format(i, value)

bbox_props = dict(boxstyle='round', fc='white', ec='black', lw=2)
t = ax.text(-5.5, -5, text_sol, ha='left', va='center', size=15,
            bbox=bbox_props)

plt.show()
</code></pre>
<p>This code works fine with Python 2.7 but with Python 3.3.2 is bad:</p>
<pre><code>python3 funcion_pol2.py
  File "funcion_pol2.py", line 51
    text_sol += ur'$Solución \; {}\; :\; {}\\$'.format(i, value)
                                               ^
SyntaxError: invalid syntax
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>u'...'</code> syntax for string literal was removed in Python 3.0 </p>
<ul>
<li><a href="http://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="nofollow noreferrer">All strings are unicode strings in Python 3</a>.</li>
</ul>
<p>From <a href="http://docs.python.org/3.0/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>String literals no longer support a leading <code>u</code> or <code>U</code>.</p>
</blockquote>
<p>So, you can simply drop the <code>u'...'</code> in Python 3:</p>
<pre><code>r'$Solución \; {}\; :\; {}\\$'.format(i, value)
</code></pre>
<hr/>
<p><strong>Note:</strong> The <code>u'...'</code> syntax has been <a href="http://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer">re-introduced in Python 3.3</a>(thanks to @Bakuriu for pointing that out).</p>
<p>And the new re-introduced <a href="http://docs.python.org/3.3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">string-prefix syntax</a> looks like this:</p>
<pre><code>stringprefix    ::=  "r" | "u" | "R" | "U"
</code></pre>
<p>Python 2 <a href="http://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">string-prefix syntax</a>:</p>
<pre><code>stringprefix    ::=  "r" | "u" | "ur" | "R" | "U" | "UR" | "Ur" | "uR"
                     | "b" | "B" | "br" | "Br" | "bR" | "BR"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you are using Python 3.3, the problem is <strong>not</strong> that you have a <code>u</code> before the string literal.  Instead, the problem is that you are placing <code>ur</code> before it:</p>
<pre><code>&gt;&gt;&gt; # Python 3.3.2 interpreter
&gt;&gt;&gt; u'a'
'a'
&gt;&gt;&gt; ur'a'
  File "&lt;stdin&gt;", line 1
    ur'a'
        ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</code></pre>
<p>This behavior is explained in the <a href="http://docs.python.org/3.3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">docs</a>:</p>
<blockquote>
<p>Given that Python 2.x’s raw unicode literals behave differently than
  Python 3.x’s the 'ur' syntax is not supported.</p>
<p>...</p>
<p>New in version 3.3: Support for the unicode legacy literal (u'value') was 
  reintroduced to simplify the maintenance of dual Python
  2.x and 3.x codebases. See <a href="http://www.python.org/dev/peps/pep-0414/" rel="nofollow">PEP 414</a> for more information.</p>
</blockquote>
<hr/>
<p>Since all strings in Python 3.x are unicode, you can fix the problem by simply removing the <code>u</code>:</p>
<pre><code>r'$Solución \; {}\; :\; {}\\$'.format(i, value)
</code></pre>
</div>
<span class="comment-copy">why someone marked it off-topic!!??</span>
<span class="comment-copy">@GrijeshChauhan there's no telling. But while I think this is a good question, it has nothing to do with the matplotlib library. So the problem could be trimmed down significantly and the matplotlib tag removed in the OP were so inclined.</span>
<span class="comment-copy">@PaulH yes you are correct, I like this question because I didn't know this difference between Python2.X and 3.X</span>
<span class="comment-copy">You should point out that it was reintroduced in python3.3...</span>
<span class="comment-copy">@Bakuriu Didn't know that, just tried that on Python 3.3 but it doesn't seem to work with <code>ur</code>.</span>
<span class="comment-copy">Uhm. seems like the backported the <code>u</code> prefix but not <code>ur</code>... pretty strange.</span>
<span class="comment-copy">so, i have got a new error if I put this change  python3 funcion_pol2.py   File "funcion_pol2.py", line 14     rcParams['text.latex.preamble'] = '\usepackage{amsthm}', '\usepackage{amsmath}', '\usepackage{amssymb}',                                      ^ SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-1: truncated \uXXXX escape</span>
<span class="comment-copy">ok i've mended the error using '\\usepackage{amsthm}' opposite to '\usepackage{amsthm}'.</span>
