<div class="post-text" itemprop="text">
<p>I have begun to look through the Python Standard Library: (<a href="http://docs.python.org/3/library/functions.html" rel="nofollow">http://docs.python.org/3/library/functions.html</a>) </p>
<p>In an attempt to further familiarise myself with basic python.  When it comes to the explanation on the ascii( ) function, I'm not finding it clear.</p>
<p>Is someone able to supply a concise explanation giving examples of useful situations in which one may use the ascii( ) function please? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>ascii()</code> is a function that encodes the output of <code>repr()</code> to use escape sequences for any codepoint in the output produced by <code>repr()</code> that is not within the ASCII range.</p>
<p>So a Latin 1 codepoint like <code>ë</code> is represented by the Python escape sequence <code>\xeb</code> instead.</p>
<p>This was the standard representation in Python 2; Python 3 <code>repr()</code> leaves most Unicode codepoints as their actual value in the output, as long as it is a printable character:</p>
<pre><code>&gt;&gt;&gt; print(repr('ë'))
'ë'
&gt;&gt;&gt; print(ascii('ë'))
'\xeb'
</code></pre>
<p>Both outputs are valid Python string literals, but the latter uses <em>just</em> ASCII characters, while the former requires a Unicode-compatible encoding.</p>
<p>For unicode codepoints between U+0100 and U+FFFF <code>\uxxxx</code> escape code sequences are used, for anything over that the <code>\Uxxxxxxxx</code> form is used. See the <a href="http://docs.python.org/3/reference/lexical_analysis.html#index-18" rel="nofollow noreferrer">available escape code syntax</a> for Python string literals.</p>
<p>Like <code>repr()</code>, <code>ascii()</code> is a very helpful debugging tool, especially when it comes to exact contents of a string. Unlike <code>repr()</code>, the <code>ascii()</code> output makes many Unicode gotchas much more visible.</p>
<p>Take de-normalised codepoints for example; The <code>ë</code> character can be represented in two ways, as the U+00EB codepoint, <em>or</em> as an ASCII <code>e</code> plus combining diaeresis <code>¨</code> (codepoint U+0308):</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; one, two = 'ë', unicodedata.normalize('NFD', 'ë')
&gt;&gt;&gt; print(one, two)
ë ë
&gt;&gt;&gt; print(repr(one), repr(two))
'ë' 'ë'
&gt;&gt;&gt; print(ascii(one), ascii(two))
'\xeb' 'e\u0308'
</code></pre>
<p>Only with <code>ascii()</code> is it clear that <code>two</code> consists of two distinct codepoints.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ascii()</code> can be useful for finding out exactly what is in a string. If a string has whitespace or unprintable characters, or if the terminal is turning the string into <a href="http://en.wikipedia.org/wiki/Mojibake" rel="nofollow">mojibake</a> because of a character-encoding mismatch, it is useful to look at the <code>ascii</code> representation of the string since it provides a visible and unambiguous representation for those otherwise unreadable characters which will print the same way on everyone's terminals.</p>
<p>There are frequent questions on Stackoverflow regarding incorrectly printed strings, and sometimes it is hard to tell what's going on because the question only shows the mojibake and not an unambiguous representation of the string. When the questioner shows the <code>ascii</code> representation (or the <code>repr</code> in Python 2) then the situation becomes much clearer.</p>
</div>
<span class="comment-copy">I would add that <code>\x</code>, like <code>\u</code> and <code>\U</code>, refers to a Unicode <i>code point</i>. Also, technically, as far as I understand, <code>two</code> contains two <i>code points</i>, not characters (and a single user-perceived character, as Unicode calls them); no?</span>
<span class="comment-copy">@EOL: yes, I've used characters and codepoints a little too loosely here. I've updated the post.</span>
<span class="comment-copy">Thanks. There is a bit more: I am not a complete expert, but "So a Latin 1 codepoint like ë is represented by the Python escape sequence \xeb instead" should be I think "So a Latin 1 <i>character</i> like ë is represented by the Python escape sequence \xeb instead <i>(since ë has Unicode code point EB in hexadecimal)</i>.", too… Right?</span>
<span class="comment-copy">It's still a codepoint (with number U+00EB), as opposed to the decomposed form consisting of <code>e</code> and the combining diaeresis.</span>
