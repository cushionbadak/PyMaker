<div class="post-text" itemprop="text">
<p>If I have a dictionary such as:</p>
<pre><code>clues = {'w':'e','r':'t'}
</code></pre>
<p>How do I get the first of each letter in the two to join together in a string, it is something like...</p>
<pre><code>for clue in clues:
   clue = ''.join( 
</code></pre>
<p>However I don't know how to get them into a string from this...</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong></p>
<p>You can use a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> for that:</p>
<pre><code>&gt;&gt;&gt; clues = {'w':'e','r':'t'}
&gt;&gt;&gt; [''.join(x) for x in (clues, clues.values())]
['wr', 'et']
&gt;&gt;&gt;
</code></pre>
<hr/>
<hr/>
<blockquote>
<p>how would you get the first of each letter in the two to join together
  in a string</p>
</blockquote>
<p>I think you are talking about the dictionary's keys.  If so, then you can use <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a>:</p>
<pre><code>&gt;&gt;&gt; clues = {'w':'e','r':'t'}
&gt;&gt;&gt; ''.join(clues)
'wr'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Also, iterating over a dictionary (which is what <code>str.join</code> is doing) will yield its keys.  Thus, there is no need to do:</p>
<pre><code>''.join(clues.keys())
</code></pre>
<hr/>
<p>Finally, @DSM made a good point.  Dictionaries are naturally unordered in Python.  Meaning, you <em>could</em> get <code>rw</code> just as easily as you get <code>wr</code>.  </p>
<p>If you want a dictionary with guarunteed order, check out <a href="http://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>And if you want all the keys joined into a string, try this:</p>
<pre><code>''.join(clues.keys())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not entirely clear what your question is, but if you want to <code>join</code> the <code>key</code> and <code>value</code> together, storing that result into a new <code>set</code>, this would be the solution:</p>
<pre><code>&gt;&gt;&gt; {''.join(key_value) for key_value in clues.items()}
set(['rt', 'we'])
</code></pre>
<p>Written long hand for clarity:</p>
<pre><code>out_set = set()
for key_value in clues.items():
    key_value_joined = ''.join(key_value)
    out_set.add(key_value_joined)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do the trick: </p>
<pre><code>''.join(clues.keys())
</code></pre>
</div>
<span class="comment-copy">By "first of each letter" do you mean the keys?</span>
<span class="comment-copy">Just to make sure, you know that dictionaries don't have order and so in principle you could get <code>'rw'</code> just as easily as you could get <code>'wr'</code>, right?</span>
<span class="comment-copy">i want W,R together and E,T together because trying to do a codebreaker programme</span>
<span class="comment-copy">@user3302738 - See my edit.</span>
<span class="comment-copy">The <code>.keys</code> call is redundant.</span>
<span class="comment-copy">@AshwiniChaudhary: How? When treated as an array, do Python dicts evaluate to their keys?</span>
<span class="comment-copy">Because iteration over a dict already returns its keys.</span>
<span class="comment-copy">@AshwiniChaudhary: Huh. <code>import makethismakesense</code> :). (I know very little about Python, thanks).</span>
<span class="comment-copy">@Linuxios and for added fun, <code>.keys()</code> in Python 2.x will return you a list, while in Python 3.x, it will return you a view object... So for iteration purposes it's noise :)</span>
