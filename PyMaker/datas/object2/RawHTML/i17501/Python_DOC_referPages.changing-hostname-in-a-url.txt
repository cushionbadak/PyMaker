<div class="post-text" itemprop="text">
<p>I am trying to use python to change the hostname in a url, and have been playing around with the urlparse module for a while now without finding a satisfactory solution. As an example, consider the url:</p>
<p><a href="https://www.google.dk:80/barbaz">https://www.google.dk:80/barbaz</a></p>
<p>I would like to replace "www.google.dk" with e.g. "www.foo.dk", so I get the following url:</p>
<p><a href="https://www.foo.dk:80/barbaz">https://www.foo.dk:80/barbaz</a>. </p>
<p>So the part I want to replace is what urlparse.urlsplit refers to as hostname. I had hoped that the result of urlsplit would let me make changes, but the resulting type ParseResult doesn't allow me to. If nothing else I can of course reconstruct the new url by appending all the parts together with +, but this would leave me with some quite ugly code with a lot of conditionals to get "://" and ":" in the correct places.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer"><code>urllib.parse.urlparse</code></a> function and <code>ParseResult._replace</code> method (Python 3):</p>
<pre><code>&gt;&gt;&gt; import urllib.parse
&gt;&gt;&gt; parsed = urllib.parse.urlparse("https://www.google.dk:80/barbaz")
&gt;&gt;&gt; replaced = parsed._replace(netloc="www.foo.dk:80")
&gt;&gt;&gt; print(replaced)
ParseResult(scheme='https', netloc='www.foo.dk:80', path='/barbaz', params='', query='', fragment='')
</code></pre>
<p>If you're using Python 2, then replace <code>urllib.parse</code> with <code>urlparse</code>.</p>
<p><code>ParseResult</code> is a subclass of <a href="http://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> and <a href="http://docs.python.org/2/library/collections.html#collections.somenamedtuple._replace" rel="nofollow noreferrer"><code>_replace</code></a> is a <code>namedtuple</code> method that:</p>
<blockquote>
<p>returns a new instance of the named tuple replacing specified fields
  with new values</p>
</blockquote>
<p><strong>UPDATE</strong>:</p>
<p>As @2rs2ts said in the comment <code>netloc</code> attribute includes a port number. </p>
<p>Good news: <code>ParseResult</code> has <code>hostname</code> and <code>port</code> attributes. 
Bad news: <code>hostname</code> and <code>port</code> are not the members of <code>namedtuple</code>, they're dynamic properties and you can't do <code>parsed._replace(hostname="www.foo.dk")</code>. It'll throw an exception. </p>
<p>If you don't want to split on <code>:</code> and your url always has a port number and doesn't have <code>username</code> and <code>password</code> (that's urls like "<a href="https://username:password@www.google.dk:80/barbaz" rel="nofollow noreferrer">https://username:password@www.google.dk:80/barbaz</a>") you can do:</p>
<pre><code>parsed._replace(netloc="{}:{}".format(parsed.hostname, parsed.port))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can take advantage of <a href="http://docs.python.org/2/library/urlparse.html#urlparse.urlsplit"><code>urlsplit</code></a> and <a href="http://docs.python.org/2/library/urlparse.html#urlparse.urlunsplit"><code>urlunsplit</code></a> from Python's <a href="http://docs.python.org/2/library/urlparse.html#module-urlparse"><code>urlparse</code></a>:</p>
<pre><code>&gt;&gt;&gt; from urlparse import urlsplit, urlunsplit
&gt;&gt;&gt; url = list(urlsplit('https://www.google.dk:80/barbaz'))
&gt;&gt;&gt; url
['https', 'www.google.dk:80', '/barbaz', '', '']
&gt;&gt;&gt; url[1] = 'www.foo.dk:80'
&gt;&gt;&gt; new_url = urlunsplit(url)
&gt;&gt;&gt; new_url
'https://www.foo.dk:80/barbaz'
</code></pre>
<p>As the docs state, the argument passed to <code>urlunsplit()</code> "can be any five-item iterable", so the above code works as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>urlparse</code> and <code>urlunparse</code> methods of <code>urlparse</code> module:</p>
<pre><code>import urlparse

old_url = 'https://www.google.dk:80/barbaz'
url_lst = list(urlparse.urlparse(old_url))
# Now url_lst is ['https', 'www.google.dk:80', '/barbaz', '', '', '']
url_lst[1] = 'www.foo.dk:80'
# Now url_lst is ['https', 'www.foo.dk:80', '/barbaz', '', '', '']
new_url = urlparse.urlunparse(url_lst)

print(old_url)
print(new_url)
</code></pre>
<p>Output:</p>
<pre><code>https://www.google.dk:80/barbaz
https://www.foo.dk:80/barbaz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple string replace of the host in the netloc also works in most cases:</p>
<pre><code>&gt;&gt;&gt; p = urlparse.urlparse('https://www.google.dk:80/barbaz')
&gt;&gt;&gt; p._replace(netloc=p.netloc.replace(p.hostname, 'www.foo.dk')).geturl()
'https://www.foo.dk:80/barbaz'
</code></pre>
<p>This will not work if, by some chance, the user name or password matches the hostname. You cannot limit str.replace to replace the last occurrence only, so instead we can use split and join:</p>
<pre><code>&gt;&gt;&gt; p = urlparse.urlparse('https://www.google.dk:www.google.dk@www.google.dk:80/barbaz')
&gt;&gt;&gt; new_netloc = 'www.foo.dk'.join(p.netloc.rsplit(p.hostname, 1))
&gt;&gt;&gt; p._replace(netloc=new_netloc).geturl()
'https://www.google.dk:www.google.dk@www.foo.dk:80/barbaz'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend also using <code>urlsplit</code> and <code>urlunsplit</code> like @linkyndy's answer, but for <strong><code>Python3</code></strong> it would be:</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import urlsplit, urlunsplit
&gt;&gt;&gt; url = list(urlsplit('https://www.google.dk:80/barbaz'))
&gt;&gt;&gt; url
['https', 'www.google.dk:80', '/barbaz', '', '']
&gt;&gt;&gt; url[1] = 'www.foo.dk:80'
&gt;&gt;&gt; new_url = urlunsplit(url)
&gt;&gt;&gt; new_url
'https://www.foo.dk:80/barbaz'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always do this trick:</p>
<pre><code>&gt;&gt;&gt; p = parse.urlparse("https://stackoverflow.com/questions/21628852/changing-hostname-in-a-url")
&gt;&gt;&gt; parse.ParseResult(**dict(p._asdict(), netloc='perrito.com.ar')).geturl()
'https://perrito.com.ar/questions/21628852/changing-hostname-in-a-url'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To just replace the host without touching the port in use (if any), use this:</p>
<pre><code>import re, urlparse

p = list(urlparse.urlsplit('https://www.google.dk:80/barbaz'))
p[1] = re.sub('^[^:]*', 'www.foo.dk', p[1])
print urlparse.urlunsplit(p)
</code></pre>
<p>prints</p>
<pre><code>https://www.foo.dk:80/barbaz
</code></pre>
<p>If you've not given any port, this works fine as well.</p>
<p>If you prefer the <code>_replace</code> way Nigel pointed out, you can use this instead:</p>
<pre><code>p = urlparse.urlsplit('https://www.google.dk:80/barbaz')
p = p._replace(netloc=re.sub('^[^:]*', 'www.foo.dk', p.netloc))
print urlparse.urlunsplit(p)
</code></pre>
</div>
<span class="comment-copy">I was trying to avoid any if statements, as it may vary whether the base url has a port number or not. Based on your answers though, it does not seem like I can avoid it :-). Thanks for your help.</span>
<span class="comment-copy">Note that the hostname is called the <code>netloc</code> and it includes any port numbers. This answer shows that but doesn't make it explicit.</span>
<span class="comment-copy">Using a private method <code>_replace</code> doesn't feel right.</span>
<span class="comment-copy"><code>_replace</code> is a part of <code>namedtuple</code> public API. It just starts with the underscore to avoid conflicts with the field names.</span>
<span class="comment-copy">A heads up - <code>netloc</code> also includes username and password. If you parse something like <code>'https://user:hunter2@example.com:444/path'</code> your <code>netloc</code> would be <code>'user:hunter2@example.com:444'</code>.</span>
<span class="comment-copy">urlparse is not an importable library in pip and as such, this does not work because "import urlparse" does not work.</span>
<span class="comment-copy">_replace is private, should not be used by client code.</span>
<span class="comment-copy">Better than accepted answer, especially the second option.</span>
<span class="comment-copy">@gb: _replace is not private in NamedTuple. It's part of the API: <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">@Downvoter:  Care to mention what you didn't like?  A downvote without reason (not obvious) isn't helpful at all.  I'd like to improve my answer, if possible.</span>
