<div class="post-text" itemprop="text">
<p>I have a csv file</p>
<pre><code>col1, col2, col3
1, 2, 3
4, 5, 6
</code></pre>
<p>I want to create a list of dictionary from this csv.</p>
<p>output as : </p>
<pre><code>a= [{'col1':1, 'col2':2, 'col3':3}, {'col1':4, 'col2':5, 'col3':6}]
</code></pre>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/2/library/csv.html#csv.DictReader"><code>csv.DictReader</code></a>:</p>
<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt;
&gt;&gt;&gt; with open('test.csv') as f:
...     a = [{k: int(v) for k, v in row.items()}
...          for row in csv.DictReader(f, skipinitialspace=True)]
...
&gt;&gt;&gt; a
[{'col2': 2, 'col3': 3, 'col1': 1}, {'col2': 5, 'col3': 6, 'col1': 4}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>csv</code> module and a list comprehension:</p>
<pre><code>import csv
with open('foo.csv') as f:
    reader = csv.reader(f, skipinitialspace=True)
    header = next(reader)
    a = [dict(zip(header, map(int, row))) for row in reader]
print a    
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[{'col3': 3, 'col2': 2, 'col1': 1}, {'col3': 6, 'col2': 5, 'col1': 4}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another simpler answer:</p>
<pre><code>    import csv
    with open("configure_column_mapping_logic.csv", "r") as f:
        reader = csv.DictReader(f)
        a = list(reader)
        print a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, while other people were out doing it the smart way, I implemented it naively. I suppose my approach has the benefit of not needing any external modules, although it will probably fail with weird configurations of values. Here it is just for reference:</p>
<pre><code>a = []
with open("csv.txt") as myfile:
    firstline = True
    for line in myfile:
        if firstline:
            mykeys = "".join(line.split()).split(',')
            firstline = False
        else:
            values = "".join(line.split()).split(',')
            a.append({mykeys[n]:values[n] for n in range(0,len(mykeys))})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># similar solution via namedtuple:    

import csv
from collections import namedtuple

with open('foo.csv') as f:
  fh = csv.reader(open(f, "rU"), delimiter=',', dialect=csv.excel_tab)
  headers = fh.next()
  Row = namedtuple('Row', headers)
  list_of_dicts = [Row._make(i)._asdict() for i in fh]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert a CSV file (two columns, multiple rows, no header) to a list of dictionaries, I used the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">csv module</a>. My csv file looked like this:</p>
<pre><code>c1,-------- 
c14,EAE23ED3 
c15,-------- 
</code></pre>
<p>I wanted to create a list of dictionaries, each row of the csv file to be a dictionary (key, value pair). The output I wanted was:</p>
<pre><code>[
{
    "c1": "--------"
}, 
{
    "c14": "EAE23ED3"
}, 
{
    "c15": "--------"
}
]
</code></pre>
<p>To do this I used the code below:</p>
<pre><code>import csv

csv_path = '.../input_file.csv'

mylist = []
mydict = {}

# read the csv and write to a dictionary
with open(csv_path, 'rb') as csv_file:
    reader = csv.reader(csv_file)
    for row in reader:
        mydict = {row[0]:row[1]}
        mylist.append(mydict)

print(mylist)
</code></pre>
<p>It works in my case. To solve my problem, these posts were helpful:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/6740918/creating-a-dictionary-from-a-csv-file">Creating a dictionary from a csv file?</a></li>
<li><a href="https://stackoverflow.com/questions/25891451/create-a-list-of-dictionaries-in-a-dictionary-from-csv-in-python">Create a list of dictionaries in a dictionary from csv in Python</a></li>
<li><a href="https://stackoverflow.com/questions/33919669/creating-list-of-dictionaries-from-big-csv">Creating list of dictionaries from big csv</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Simple method to parse CSV into list of dictionaries </p>
<pre><code>with open('/home/mitul/Desktop/OPENEBS/test.csv', 'rb') as infile:
  header = infile.readline().split(",")
  for line in infile:
    fields = line.split(",")
    entry = {}
    for i,value in enumerate(fields):
      entry[header[i].strip()] = value.strip()
      data.append(entry)
</code></pre>
</div>
<span class="comment-copy">For the lazy, from the linked page - <code>skipinitialspace</code>: When <code>True</code>, whitespace immediately following the delimiter is ignored.</span>
<span class="comment-copy">@falsetru, Here why the output is not coming in this order?  [{'col1':1, 'col2':2, 'col3':3}, {'col1':4, 'col2':5, 'col3':6}]</span>
<span class="comment-copy">@V-T, Dictionary in python 3.6- is not an ordered collection.</span>
<span class="comment-copy">@V-T, If you use Python 3.6+, OrderedDict which guarantee order: <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.DictReader</a></span>
<span class="comment-copy">Only answer getting with same order of CSV</span>
