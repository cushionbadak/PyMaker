<div class="post-text" itemprop="text">
<pre><code>f=np.loadtxt('Single Small Angle 1.txt',unpack=True,skiprows=2)
g=np.loadtxt('Single Small Angle 5.txt',unpack=True,skiprows=2)

x = f-g[:,:11944]
t=range(len(x))
m=math.log10(abs(x))

np.polyfit(t,m)

plt.plot(t,abs(x))
plt.show()
</code></pre>
<p>I'm just not sure on how to fix my issue. It keeps saying:</p>
<pre><code>m=math.log10(abs(x))
TypeError: only length-1 arrays can be converted to Python scalars
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Non-numpy functions like <code>math.abs()</code> or <code>math.log10()</code> don't play nicely with numpy arrays. Just replace the line raising an error with:</p>
<pre><code>    m = np.log10(np.abs(x))
</code></pre>
<p>Apart from that the <code>np.polyfit()</code> call will not work because it is missing a parameter (and you are not assigning the result for further use anyway).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Here is another way to reproduce this error in Python2.7 with numpy:</strong></p>
<pre><code>import numpy as np
a = np.array([1,2,3])
b = np.array([4,5,6])
c = np.concatenate(a,b)   #note the lack of tuple format for a and b
print(c) 
</code></pre>
<p>The <code>np.concatenate</code> method produces an error:</p>
<pre><code>TypeError: only length-1 arrays can be converted to Python scalars
</code></pre>
<p>If you read the documentation around <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.concatenate.html" rel="nofollow noreferrer">numpy.concatenate</a>, then you see it expects a tuple of numpy array objects.  So surrounding the variables with parens fixed it:</p>
<pre><code>import numpy as np
a = np.array([1,2,3])
b = np.array([4,5,6])
c = np.concatenate((a,b))  #surround a and b with parens, packaging them as a tuple
print(c) 
</code></pre>
<p>Then it prints:</p>
<pre><code>[1 2 3 4 5 6]
</code></pre>
<p><strong>What's going on here?</strong></p>
<p>That error is a case of bubble-up implementation - it is caused by duck-typing philosophy of python.  This is a cryptic low-level error python guts puke up when it receives some unexpected variable types, tries to run off and do something, gets part way through, the pukes, attempts remedial action, fails, then tells you that "you can't reformulate the subspace responders when the wind blows from the east on Tuesday".  </p>
<p>In more sensible languages like C++ or Java, it would have told you: "you can't use a TypeA where TypeB was expected".  But Python does it's best to soldier on, does something undefined, fails, and then hands you back an unhelpful error.  The fact we have to be discussing this is one of the reasons I don't like Python, or its duck-typing philosophy.</p>
</div>
<span class="comment-copy">When you feed a native python list like [1,2,3] to a numpy method that expects a numpy array, you will get this error.  That numpy method takes your native python list, and tries to digest it, and way deep down it pukes up this response.  A more user friendly error message would have been: <code>TypeError: Don't feed native python lists into numpy functions that expect numpy arrays. Either convert your python list to a numpy array or package your python lists into a tuple.</code>  Python numpy really dropped the ball on that one, that error message is terrible.</span>
<span class="comment-copy">Great answer. In addition to that, I think none of the math functions work with numpy arrays. Better change them with numpy functions.</span>
<span class="comment-copy">Thanks a lot! I was facing a similar problem with math.power in combination with other numpy functions. Replacing math.power with numpy.power solved the problem.</span>
<span class="comment-copy">still occurs in python 3 and killed me mysteriously.</span>
<span class="comment-copy">Try using the pdb debugger to give you more information about the error: <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">docs.python.org/3/library/pdb.html</a></span>
<span class="comment-copy">oh sorry my post was unclear.  I meant that I had the same problem with concatenate and your answer solved it for me.  You mentioned it was an error (feature?) with Python2.7 and numpy, it still exists with python3 and numpy :)</span>
<span class="comment-copy">"You can't refromulate the subspace responders when the wind blows from the east on tuesday" I like you</span>
<span class="comment-copy">Look bro, I'm not going to pay you 70 smidgens for a broken defrakulator. <a href="https://www.youtube.com/watch?v=Xk5A4QWyl1U" rel="nofollow noreferrer">youtube.com/watch?v=Xk5A4QWyl1U</a></span>
