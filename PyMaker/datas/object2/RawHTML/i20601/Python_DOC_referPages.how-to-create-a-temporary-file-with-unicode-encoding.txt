<div class="post-text" itemprop="text">
<p>When I use <code>open()</code> to open a file, I am not able to write unicode strings. I have learned that I need to use <code>codecs</code> and open the file with Unicode encoding (see <a href="http://docs.python.org/howto/unicode.html#reading-and-writing-unicode-data">http://docs.python.org/howto/unicode.html#reading-and-writing-unicode-data</a>).</p>
<p>Now I need to create some temporary files. I tried to use the <code>tempfile</code> library, but it doesn't have any encoding option. When I try to write any unicode string in a temporary file with <code>tempfile</code>, it fails:</p>
<pre><code>#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
import tempfile
with tempfile.TemporaryFile() as fh:
  fh.write(u"Hello World: ä")
  fh.seek(0)
  for line in fh:
    print line
</code></pre>
<p>How can I create a temporary file with Unicode encoding in Python?</p>
<p>Edit:</p>
<ol>
<li><p>I am using Linux and the error message that I get for this code is:</p>
<pre><code>Traceback (most recent call last):
  File "tmp_file.py", line 5, in &lt;module&gt;
    fh.write(u"Hello World: ä")
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 13: ordinal not in range(128)
</code></pre></li>
<li>This is just an example. In practice I am trying to write a string that some API returned.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Everyone else's answers are correct, I just want to clarify what's going on:</p>
<p>The difference between the literal <code>'foo'</code> and the literal <code>u'foo'</code> is that the former is a string of bytes and the latter is the Unicode object.</p>
<p>First, understand that Unicode is the character set. UTF-8 is the encoding. The Unicode object is the about the former—it's a Unicode string, not necessarily a UTF-8 one. In your case, the encoding for a string literal will be UTF-8, because you specified it in the first lines of the file.</p>
<p>To get a Unicode string from a byte string, you call the <code>.encode()</code> method:</p>
<pre><code>&gt;&gt;&gt;&gt; u"ひらがな".encode("utf-8") == "ひらがな"
True
</code></pre>
<p>Similarly, you could call your string.encode in the <code>write</code> call and achieve the same effect as just removing the <code>u</code>.  </p>
<p>If you didn't specify the encoding in the top, say if you were reading the Unicode data from another file, you would specify what encoding it was in before it reached a Python string.  This would determine how it would be represented in bytes (i.e., the <code>str</code> type).  </p>
<p>The error you're getting, then, is only because the <code>tempfile</code> module is expecting a <code>str</code> object.  This <strong><em>doesn't</em></strong> mean it can't handle unicode, just that it expects you to pass in a byte string rather than a Unicode object—because without you specifying an encoding, it wouldn't know how to write it to the temp file.</p>
</div>
<div class="post-text" itemprop="text">
<p>tempfile.TemporaryFile has <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile" rel="noreferrer">encoding option in Python 3</a>:</p>
<pre><code>#!/usr/bin/python3
# -*- coding: utf-8 -*-
import tempfile
with tempfile.TemporaryFile(mode='w+', encoding='utf-8') as fh:
  fh.write("Hello World: ä")
  fh.seek(0)
  for line in fh:
    print(line)
</code></pre>
<p>Note that now you need to specify mode='w+' instead of the default binary mode. Also note that string literals are implicitly Unicode in Python 3, there's no <em>u</em> modifier.</p>
<p>If you're stuck with <a href="https://docs.python.org/2.6/library/tempfile.html#tempfile.TemporaryFile" rel="noreferrer">Python 2.6, temporary files</a> are always binary, and you need to encode the Unicode string before writing it to the file:</p>
<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-
import tempfile
with tempfile.TemporaryFile() as fh:
  fh.write(u"Hello World: ä".encode('utf-8'))
  fh.seek(0)
  for line in fh:
    print line.decode('utf-8')
</code></pre>
<p>Unicode specifies the character set, not the encoding, so in either case you need a way to specify how to encode the Unicode characters!</p>
</div>
<div class="post-text" itemprop="text">
<p>I have figured out one solution: create a temporary file that is not automatically deleted with <code>tempfile</code>, close it and open it again using <code>codecs</code>:</p>
<pre><code>#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

import codecs
import os
import tempfile

f = tempfile.NamedTemporaryFile(delete=False)
filename = f.name
f.close()

with codecs.open(filename, 'w+b', encoding='utf-8') as fh:
  fh.write(u"Hello World: ä")
  fh.seek(0)
  for line in fh:
    print line

os.unlink(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since I am working on a Python program with TemporaryFile objects that should run in both Python 2 and Python 3, I don't find it satisfactory to manually encode all strings written as UTF-8 like the other answers suggest.</p>
<p>Instead, I have written the following small polyfill (because I could not find something like it in six) to wrap a binary file-like object into a UTF-8 file-like object:</p>
<pre><code>from __future__ import unicode_literals
import sys
import codecs
if sys.hexversion &lt; 0x03000000:
    def uwriter(fp):
        return codecs.getwriter('utf-8')(fp)
else:
    def uwriter(fp):
        return fp
</code></pre>
<p>It is used in the following way:</p>
<pre><code># encoding: utf-8
from tempfile import NamedTemporaryFile
with uwriter(NamedTemporaryFile(suffix='.txt', mode='w')) as fp:
    fp.write('Hællo wörld!\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to write a unicode object <code>(u"...")</code> to the temporary file where you should use an encoded string <code>("...")</code>.  You don't have to explicitly pass an <code>"encode="</code> parameter, because you've already stated the encoding in line two <code>("# -*- coding: utf-8 -*-")</code>.  Just use <code>fh.write("ä")</code> instead of <code>fh.write(u"ä")</code> and you should be fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dropping the u made your code work for me:</p>
<pre><code>fh.write("Hello World: ä")
</code></pre>
<p>I guess it's because it's already unicode.</p>
</div>
<div class="post-text" itemprop="text">
<p>Setting the sys as default encoding to UTF-8 will fix the encoding issue</p>
<pre><code>import sys
reload(sys)
sys.setdefaultencoding('utf-8') #set to utf-8 by default this will solve the errors

import tempfile
with tempfile.TemporaryFile() as fh:
  fh.write(u"Hello World: ä")
  fh.seek(0)
  for line in fh:
    print line
</code></pre>
</div>
<span class="comment-copy">Yes. So, there's no need to open tempfile with some magic unicode option, it's enough to write an explicitly encoded string: <code>fh.write(u'föo bār'.encode('utf-8'))</code>. Replace 'utf-8' with 'utf-16' if most of your characters are CJKs.</span>
<span class="comment-copy">@9000: beware of this method if you use 'utf-16'. If doing so you will have to write the whole file at once, because encode('utf-16') also output the file BOM. If you have several strings to write to the same file, the first one should be with .encode('utf-16') and the subsequent ones with .encode('utf-16-le') wich does not send the BOM. Using some magic unicode option avoid this pitfall.</span>
<span class="comment-copy"><code>"abc"</code> is a Unicode string in Python 3 or in the presence of <code>from __future__ import unicode_literals</code>.</span>
<span class="comment-copy">That's a good idea to also decode the 8-bit string that's being read from the file (in the Python 2 example), converting it into a Unicode string, before printing. (Fixed it.)</span>
<span class="comment-copy">I'm sorry, but this is suboptimal. See @spinning_plate's answer and my comment to it; things are <i>way</i> simpler.</span>
<span class="comment-copy">@9000 I don't see an answer of <code>spinning_plate</code> here.</span>
<span class="comment-copy">@guettli: must be a some kind of typo; I must have meant the answer of <code>dfb</code>, currently the accepted one.</span>
<span class="comment-copy">Yes, this works, but I am actually trying to write a string that some API returned, so there is no <code>(u"...")</code> in my code. I have updated my question with this information.  I tried an example with two files, and <code>fh.write(other_file.f())</code> works or not depending on the other file having the encoding or not. In my real code I don't have any control of the code that is creating the string.</span>
<span class="comment-copy">Does the file have the correct output?</span>
<span class="comment-copy">Yes, running the script on a linux box, without the u, produces the correct output <code>Hello World: ä</code></span>
<span class="comment-copy">Yes, this works...  Actually in my real program I am getting the input from some API, and it fails, so it was not because of "the u" in my code.</span>
<span class="comment-copy">@john: Dropping the u is probably not doing what you believe even if you get the right utf-8 in the final file. It is likely that you used some utf-8 editor if so when typing 'ä' two bytes are stored in the string. This is easy enough to check. If so len("Hello World: ä") will be 15 and "Hello World: ä"[14] will be '\xa4'.</span>
<span class="comment-copy">I think you're probably right @kriss</span>
