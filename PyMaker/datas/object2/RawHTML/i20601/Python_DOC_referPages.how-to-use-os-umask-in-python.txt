<div class="post-text" itemprop="text">
<p>I'm trying to set a umask using the os module. Please note my normal umask set in my ~/.profile is umask 0027.</p>
<p>In a bash shell,</p>
<pre><code>umask 0022
</code></pre>
<p>will allow a file to be created with permissions</p>
<pre><code>-rw-r--r--
</code></pre>
<p>However, when us import the os module and do this:</p>
<pre><code>os.umask(0022)
[do some other code here that creates a file]
</code></pre>
<p>I get permissions of</p>
<pre><code>----------
</code></pre>
<p>First, how do I make os.umask(mask) behave like umask in the shell?</p>
<p>Second, what is the logic between the difference of the two?</p>
<p>Note: I tried converting the 0022 to decimal in case it is expecting a decimal by doing:</p>
<pre><code>os.umask(18)
</code></pre>
<p>but it gave permissions of</p>
<pre><code>-----w--w-
</code></pre>
<p>Also note, I tried</p>
<pre><code>os.umask(00022)
</code></pre>
<p>and</p>
<pre><code>os.mask(0o0022)
</code></pre>
<p>Which didn't work either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Misunderstanding of umask, I think.
The umask sets the default <strong>denials</strong>, not the default <strong>permissions</strong>.
So</p>
<pre><code>import os
oldmask = os.umask (0o22)
fh1 = os.open ("qq1.junk", os.O_CREAT, 0o777)
fh2 = os.open ("qq2.junk", os.O_CREAT, 0o022)
os.umask (oldmask)
os.close (fh1)
os.close (fh2)
</code></pre>
<p>should indeed produce files as follows:</p>
<pre><code>-rwxr-xr-x 1 pax pax 0 Apr 24 11:11 qq1.junk
---------- 1 pax pax 0 Apr 24 11:11 qq2.junk
</code></pre>
<p>The umask 022 removes write access for group and others, which is exactly the behaviour we see there.
I find it helps to go back to the binary that the octal numbers represent:</p>
<pre><code> usr grp others 
-rwx rwx rwx is represented in octal as 0777, requested for qq1.junk
-000 010 010 umask of 022 removes any permission where there is a 1
-rwx r-x r-x is the result achieved requesting 0777 with umask of 022

---- -w- -w- is represented in octal as 0022, requested for qq2.junk
-000 010 010 umask of 022 removes any permission where there is a 1
---- --- --- is the result achieved requesting 0022 with umask of 022
</code></pre>
<p>The program is behaving as you asked it to, not necessarily as you thought it should. Common situation, that, with computers :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll probably need to show us the code that constitutes:</p>
<pre><code>[do some other code here that creates a file]
</code></pre>
<p>The code you have works fine on my system:</p>
<pre><code>import os
oldmask = os.umask (022)
fh1 = os.open ("qq1.junk", os.O_CREAT, 0777)
fh2 = os.open ("qq2.junk", os.O_CREAT, 0022)
os.umask (oldmask)
os.close (fh1)
os.close (fh2)
</code></pre>
<p>producing files as follows:</p>
<pre><code>-rwxr-xr-x 1 pax pax 0 Apr 24 11:11 qq1.junk
---------- 1 pax pax 0 Apr 24 11:11 qq2.junk
</code></pre>
<p>You should also note the restoration of the old <code>umask</code> value which minimises the impact of changing it to the local operation.</p>
<p>As you can see from the results above, you also need to be aware that the <code>umask</code> value is "subtracted" from the mode you're using to create the file and we don't know what that mode is in your particular case.</p>
<p>That's evident even in your <code>bash</code> sample since a <code>umask</code> value of <code>022</code> when creating a file of mode <code>777</code> would result in <code>r-xr-xr-x</code>, not <code>rw-r--r--</code> as you have it.</p>
<hr/>
<p>Based on your comments below where you indicate you're using <code>open</code> rather than <code>os.open</code>, a cursory glance of the Python source seems to indicate that this translates to a C <code>fopen</code> call which uses <code>0666</code> as the initial mode. This is supported by the slightly modified code:</p>
<pre><code>import os
oldmask = os.umask (022)
fh3 = open ("qq3.junk", "w")
os.umask (0)
fh4 = open ("qq4.junk", "w")
os.umask (oldmask)
fh3.close()
fh4.close()
</code></pre>
<p>which gives us:</p>
<pre><code>-rw-r--r-- 1 pax pax 0 Apr 24 11:44 qq3.junk
-rw-rw-rw- 1 pax pax 0 Apr 24 11:44 qq4.junk
</code></pre>
<p>So I'm not entirely certain why you're getting <code>0000</code> permissions in your case.</p>
<p>It would be worth seeing what the results are when you run that above program in your environment. If it's the same as I get then the problem may well lie somewhere else.</p>
</div>
<div class="post-text" itemprop="text">
<p>Being picky/careful, and Python 3k-compatible, here is my slightly different answer (that still doesn't explain what the OP's original issue was):</p>
<pre><code>old_umask = os.umask(0o022) # u=rwx,g=rx,o=rx
try:
    # do stuff

finally:
    os.umask(old_umask)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even though this would seem to be a straight system call, in this case it does seems to matter what Python version you are using:</p>
<p>It appears that os.open handles the pre-existing umask differently in Python 2.x and Python 3.x, possibly because 2.x is closer to the OS and 3.x does a bit more abstraction.</p>
<p><a href="https://docs.python.org/2/library/os.html" rel="nofollow">https://docs.python.org/2/library/os.html</a>
"The default mode is 0777 (octal), and <strong>the current umask value is first masked out.</strong>"</p>
<p>There is no similar statement in <a href="https://docs.python.org/3/library/os.html" rel="nofollow">https://docs.python.org/3/library/os.html</a></p>
</div>
<span class="comment-copy">Is it possible the file already exists? You will need to use chmod instead in that case</span>
<span class="comment-copy">@gnibbler: No, it was deleted before hand, but that is a good thought.</span>
<span class="comment-copy">@Ignacio Vazquez-Abrams: trying setting umask 0027 in the shell first, then run the script or invoke your interpreter.</span>
<span class="comment-copy">@Ignacio Vazquez-Abrams: ur right, neither could I with a simple test python program separate from my code. Odd as I'm using the same techniques.</span>
<span class="comment-copy">Using <code>old_mask = os.umask(0o000)</code> and then <code>os.makedirs(./foo/bar)</code> create directories with <code>777</code> as expected. And <code>oct(old_mask)</code> gives <code>022</code> which is correct (default umask on Unix).</span>
<span class="comment-copy"><code>umask 022</code> should result in <code>755</code>permissions for directories, but not for files. For files it should be <code>644</code>. Or in other words, with <code>umask 022</code> directories should be <code>rwxr-xr-x</code>, but files should be <code>rw-r--r--</code>.</span>
<span class="comment-copy">I did in the bash shell, umask 0022 then did touch /tmp/test then did ls -l /tmp/test they copied and pasted the permissions directly above. I think you are confusing the differential between creating files (where execute is assumed not desired) and creating directories (where execute permissions desired is assumed).</span>
<span class="comment-copy">@narnie, this depends <i>entirely</i> on what code is creating the file. Obviously <code>touch</code> has different rules to, say, <code>ld</code> in terms of the mode it uses. All I was saying is that the permissions of the file depend on the <code>umask</code> value <i>and</i> the mode, and the missing code is the bit that would tell us the mode.</span>
<span class="comment-copy">the code I'm using to generate the file is rather complex as I'm passing file handlers around. I want the umask to be 0022 no matter what the .profile umask might be set to (mine is set to 0027). The jist is I'm just doing f = open(filename, 'w') then passing the file object on to a class that controls an overall object which has a write method that uses the f object to write out the object, returns, where f.close() is run.</span>
<span class="comment-copy">@paxdiable, I think you are on to what the problem is. Most users will have a umask defaulting to 0022. I want have my code be able to have different umask scenarios be able to be handled within the code. I like to have my umask set to be readable only by me and my primary group and not readable by any other system user. However, it may also be the open(filename, 'w') doesn't care what the system umask is. I'm just now sure hope python handles this.</span>
<span class="comment-copy">@narnie, I think at the lower levels, Python just calls fopen for this and that should use a mode of 0666 (prior to umask subtraction). That wouldn't explain why you're getting 0000. It may be that it will turn out easier to use os.open (rather than open) with a specific 0777 mode and whatever umask you want.</span>
<span class="comment-copy">Not compatible with 2.x; 2.x umask is a straight system call that requires integer and throws TypeError on octal.</span>
<span class="comment-copy">@JamiesonBecker it appears to work on 2.7.13</span>
<span class="comment-copy">@CraigYounkins you're right! I'm not sure where I got that from. :)</span>
