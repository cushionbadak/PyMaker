<div class="post-text" itemprop="text">
<p>Originally I wanted to ask <a href="https://stackoverflow.com/questions/4058400/using-colons-in-configparser-python">this question</a>, but then I found it was already thought of before... </p>
<p>Googling around I found this example of <a href="http://sureshamrita.wordpress.com/2011/08/28/extending-python-configparser/ozn@yenikaro:~/Software/" rel="noreferrer">extending configparser</a>. The following works with Python 3:</p>
<pre><code>$ python3
Python 3.2.3rc2 (default, Mar 21 2012, 06:59:51) 
[GCC 4.6.3] on linux2
&gt;&gt;&gt; from configparser import  SafeConfigParser
&gt;&gt;&gt; class AmritaConfigParser(SafeConfigParser):
...     def __init_(self):
...         super().__init__()
... 
&gt;&gt;&gt; cfg = AmritaConfigParser()
</code></pre>
<p>But not with Python 2:</p>
<pre><code>&gt;&gt;&gt; class AmritaConfigParser(SafeConfigParser):
...       def __init__(self):
...           super(SafeConfigParser).init()
... 
&gt;&gt;&gt; cfg = AmritaConfigParser()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __init__
TypeError: must be type, not classob
</code></pre>
<p>Then I read a little bit on Python New Class vs. Old Class styles (e.g. <a href="https://stackoverflow.com/questions/1713038/super-fails-with-error-typeerror-argument-1-must-be-type-not-classobj">here</a>.
And now I am wondering, I can do:</p>
<pre><code>class MyConfigParser(ConfigParser.ConfigParser):
      def Write(self, fp):
          """override the module's original write funcition"""
          ....
      def MyWrite(self, fp):
          """Define new function and inherit all others"""
</code></pre>
<p>But, shouldn't I call init? Is this in Python 2 the equivalent:</p>
<pre><code> class AmritaConfigParser(ConfigParser.SafeConfigParser):
    #def __init__(self):
    #    super().__init__() # Python3 syntax, or rather, new style class syntax ...
    #
    # is this the equivalent of the above ? 
    def __init__(self):
        ConfigParser.SafeConfigParser.__init__(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p><a href="http://docs.python.org/py3k/library/functions.html#super" rel="noreferrer"><code>super()</code></a> (without arguments) was introduced in Python 3 (along with <code>__class__</code>):</p>
<pre><code>super() -&gt; same as super(__class__, self)
</code></pre>
<p>so that would be the Python 2 equivalent for new-style classes:</p>
<pre><code>super(CurrentClass, self)
</code></pre></li>
<li><p>for old-style classes you can always use:</p>
<pre><code> class Classname(OldStyleParent):
    def __init__(self, *args, **kwargs):
        OldStyleParent.__init__(self, *args, **kwargs)
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In a single inheritance case (when you subclass one class only), your new class inherits methods of the base class. This includes <code>__init__</code>. So if you don't define it in your class, you will get the one from the base.</p>
<p>Things start being complicated if you introduce multiple inheritance (subclassing more than one class at a time). This is because if more than one base class has <code>__init__</code>, your class will inherit the first one only.</p>
<p>In such cases, you should really use <code>super</code> if you can, I'll explain why. But not always you can. The problem is that all your base classes must also use it (and their base classes as well -- the whole tree).</p>
<p>If that is the case, then this will also work correctly (in Python 3 but you could rework it into Python 2 -- it also has <code>super</code>):</p>
<pre><code>class A:
    def __init__(self):
        print('A')
        super().__init__()

class B:
    def __init__(self):
        print('B')
        super().__init__()

class C(A, B):
    pass

C()
#prints:
#A
#B
</code></pre>
<p>Notice how both base classes use <code>super</code> even though they don't have their own base classes.</p>
<p>What <code>super</code> does is: it calls the method from the next class in MRO (method resolution order). The MRO for <code>C</code> is: <code>(C, A, B, object)</code>. You can print <code>C.__mro__</code> to see it.</p>
<p>So, <code>C</code> inherits <code>__init__</code> from <code>A</code> and <code>super</code> in <code>A.__init__</code> calls <code>B.__init__</code> (<code>B</code> follows <code>A</code> in MRO).</p>
<p>So by doing nothing in <code>C</code>, you end up calling both, which is what you want.</p>
<p>Now if you were not using <code>super</code>, you would end up inheriting <code>A.__init__</code> (as before) but this time there's nothing that would call <code>B.__init__</code> for you.</p>
<pre><code>class A:
    def __init__(self):
        print('A')

class B:
    def __init__(self):
        print('B')

class C(A, B):
    pass

C()
#prints:
#A
</code></pre>
<p>To fix that you have to define <code>C.__init__</code>:</p>
<pre><code>class C(A, B):
    def __init__(self):
        A.__init__(self)
        B.__init__(self)
</code></pre>
<p>The problem with that is that in more complicated MI trees, <code>__init__</code> methods of some classes may end up being called more than once whereas super/MRO guarantee that they're called just once.</p>
</div>
<div class="post-text" itemprop="text">
<p>In short, they are equivalent. 
Let's have a history view:</p>
<p>(1) at first, the function looks like this.</p>
<pre><code>    class MySubClass(MySuperClass):
        def __init__(self):
            MySuperClass.__init__(self)
</code></pre>
<p>(2) to make code more abstract (and more portable). A common method to get Super-Class is invented like:</p>
<pre><code>    super(&lt;class&gt;, &lt;instance&gt;)
</code></pre>
<p>And init function can be:</p>
<pre><code>    class MySubClassBetter(MySuperClass):
        def __init__(self):
            super(MySubClassBetter, self).__init__()
</code></pre>
<p>However  requiring an explicit passing of both the class and instance break the DRY (Don't Repeat Yourself) rule a bit. </p>
<p>(3) in V3. It is more smart, </p>
<pre><code>    super()
</code></pre>
<p>is enough in most case. You can refer to <a href="http://www.python.org/dev/peps/pep-3135/" rel="noreferrer">http://www.python.org/dev/peps/pep-3135/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just to have a simple and complete example for Python 3, which most people seem to be using now.</p>
<pre><code>class MySuper(object):
    def __init__(self,a):
        self.a = a

class MySub(MySuper):
    def __init__(self,a,b):
        self.b = b
        super().__init__(a)

my_sub = MySub(42,'chickenman')
print(my_sub.a)
print(my_sub.b)
</code></pre>
<p>gives</p>
<pre><code>42
chickenman
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another python3 implementation that involves the use of Abstract classes with super().  You should remember that   </p>
<blockquote>
<p>super().<strong>init</strong>(name, 10)</p>
</blockquote>
<p>has the same effect as  </p>
<blockquote>
<p>Person.<strong>init</strong>(self, name, 10)</p>
</blockquote>
<p>Remember there's a hidden 'self' in super(), So the same object passes on to the superclass init method and the attributes are added to the object that called it. 
Hence <code>super()</code>gets translated to  <code>Person</code> and then if you include the hidden self, you get the above code frag.  </p>
<pre><code>from abc import ABCMeta, abstractmethod
class Person(metaclass=ABCMeta):
    name = ""
    age = 0

    def __init__(self, personName, personAge):
        self.name = personName
        self.age = personAge

    @abstractmethod
    def showName(self):
        pass

    @abstractmethod
    def showAge(self):
        pass


class Man(Person):

    def __init__(self, name, height):
        self.height = height
        # Person.__init__(self, name, 10)
        super().__init__(name, 10)  # same as Person.__init__(self, name, 10)
        # basically used to call the superclass init . This is used incase you want to call subclass init
        # and then also call superclass's init.
        # Since there's a hidden self in the super's parameters, when it's is called,
        # the superclasses attributes are a part of the same object that was sent out in the super() method

    def showIdentity(self):
        return self.name, self.age, self.height

    def showName(self):
        pass

    def showAge(self):
        pass


a = Man("piyush", "179")
print(a.showIdentity())
</code></pre>
</div>
<span class="comment-copy">In your example you don't need to define an <code>__init__()</code> in the subclass if all it does is call the super class' <code>__init__()</code> (in either Python 2 or 3) -- instead just let the super's be inherited.</span>
<span class="comment-copy">Useful reference: <a href="http://amyboyle.ninja/Python-Inheritance/" rel="nofollow noreferrer">amyboyle.ninja/Python-Inheritance</a></span>
<span class="comment-copy">Useful reference with corrected link: <a href="http://amyboyle.ninja/Python-Inheritance" rel="nofollow noreferrer">amyboyle.ninja/Python-Inheritance</a></span>
<span class="comment-copy">-1. This answer didn't clarify anything for me. In Python 2, <code>super(__class__)</code> gives <code>NameError: global name '__class__' is not defined</code>, and <code>super(self.__class__)</code> is erroneous as well. You <i>must</i> provide an instance as a second argument, which would suggest you need to do <code>super(self.__class__, self)</code>, but that is <b>wrong</b>. If <code>Class2</code> inherits from <code>Class1</code> and <code>Class1</code> calls <code>super(self.__class__, self).__init__()</code>, <code>Class1</code>'s <code>__init__</code> will then <i>call itself</i> when instantiating an instance of <code>Class2</code>.</span>
<span class="comment-copy">To clarify a point, I get <code>TypeError: super() takes at least 1 argument (0 given)</code> when trying to call <code>super(self.__class__)</code> in Python 2. (Which doesn't make a lot of sense, but it demonstrates how much information is missing from this answer.)</span>
<span class="comment-copy">@jpmc26: in python2 you get this error because your trying to call <code>__init__()</code> without argument on the unbound super object (which you get by calling <code>super(self.__class__)</code> with only one argument), you need a bound super object then it should work: <code>super(CurrentClass, self).__init__()</code>. Don't use <code>self.__class__</code> because that will always refer to the <i>same</i> class when calling a parent and therfore create an infinite loop if that parent also does the same.</span>
<span class="comment-copy"><code>__class__</code> (member) also exists in <i>Python2</i>.</span>
<span class="comment-copy">@CristiFati This isn't about the <code>__class__</code> member but about the <a href="https://docs.python.org/3/reference/datamodel.html#creating-the-class-object" rel="nofollow noreferrer">implicitly created lexical <code>__class__</code> closure</a> which always refers to the class currently being defined, which doesn't exist in python2.</span>
<span class="comment-copy"><code>Notice how both base classes use super even though they don't have their own base classes.</code> They have. In py3k every class subclasses object.</span>
