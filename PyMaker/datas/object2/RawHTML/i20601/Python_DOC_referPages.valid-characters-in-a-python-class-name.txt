<div class="post-text" itemprop="text">
<p>I'm dynamically creating python classes, and I know not all characters are valid in this context. </p>
<p>Is there a method somewhere in the class library that I can use to sanitize a random text string, so that I can use it as a class name? Either that or a list of the allowed characters would be a good help.</p>
<hr/>
<p><strong>Addition regarding clashes with identifier names:</strong> Like @Ignacio pointed out in the answer below, any character that is <a href="http://docs.python.org/reference/lexical_analysis.html#identifiers" rel="noreferrer">valid as an identifier</a> is a valid character in a class name. And you can even use a <a href="http://docs.python.org/reference/lexical_analysis.html#keywords" rel="noreferrer">reserved word</a> as a class name without any trouble. But there's a catch. If you do use a reserved word, you won't be able to make the class accessible like other (non-dynamically-created) classes (e.g., by doing <code>globals()[my_class.__name__] = my_class</code>). The reserved word will always take precedence in such case. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/reference/lexical_analysis.html#identifiers">Python Language Reference, §2.3, "Identifiers and keywords"</a></p>
<blockquote>
<p>Identifiers (also referred to as <em>names</em>) are described by the following lexical definitions:</p>
<pre><code>identifier ::=  (letter|"_") (letter | digit | "_")*
letter     ::=  lowercase | uppercase
lowercase  ::=  "a"..."z"
uppercase  ::=  "A"..."Z"
digit      ::=  "0"..."9"
</code></pre>
<p>Identifiers are unlimited in length. Case is significant.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="https://docs.python.org/2/reference/lexical_analysis.html#identifiers" rel="noreferrer">Python Language Reference, §2.3, "Identifiers and keywords"</a>, a valid Python identifier is defined as:</p>
<pre><code>(letter|"_") (letter | digit | "_")*
</code></pre>
<p>Or, in <strong>regex</strong>:</p>
<pre><code>[a-zA-Z_][a-zA-Z0-9_]*
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The thing that makes this interesting is that the first character of an identifier is special.  After the first character, numbers '0' through '9' are valid for identifiers, but they must not be the first character.</p>
<p>Here's a function that will return a valid identifier given any random string of characters.  Here's how it works:</p>
<p>First, we use <code>itr = iter(seq)</code> to get an explicit iterator on the input.  Then there is a first loop, which uses the iterator <code>itr</code> to look at characters until it finds a valid first character for an identifier.  Then it breaks out of that loop and runs the second loop, <em>using the same iterator</em> (which we named <code>itr</code>) for the second loop.  The iterator <code>itr</code> keeps our place for us; the characters the first loop pulled out of the iterator are still gone when the second loop runs.</p>
<pre><code>def gen_valid_identifier(seq):
    # get an iterator
    itr = iter(seq)
    # pull characters until we get a legal one for first in identifer
    for ch in itr:
        if ch == '_' or ch.isalpha():
            yield ch
            break
    # pull remaining characters and yield legal ones for identifier
    for ch in itr:
        if ch == '_' or ch.isalpha() or ch.isdigit():
            yield ch

def sanitize_identifier(name):
    return ''.join(gen_valid_identifier(name))
</code></pre>
<p>This is a clean and Pythonic way to handle a sequence two different ways.  For a problem this simple, we could just have a Boolean variable that indicates whether we have seen the first character yet or not:</p>
<pre><code>def gen_valid_identifier(seq):
    saw_first_char = False
    for ch in seq:
        if not saw_first_char and (ch == '_' or ch.isalpha()):
            saw_first_char = True 
            yield ch
        elif saw_first_char and (ch == '_' or ch.isalpha() or ch.isdigit()):
            yield ch
</code></pre>
<p>I don't like this version nearly as much as the first version.  The special handling for one character is now tangled up in the whole flow of control, and this will be slower than the first version as it has to keep checking the value of <code>saw_first_char</code> constantly.  But this is the way you would have to handle the flow of control in most languages!  Python's explicit iterator is a nifty feature, and I think it makes this code a lot better.</p>
<p>Looping on an explicit iterator is just as fast as letting Python implicitly get an iterator for you, and the explicit iterator lets us split up the loops that handle the different rules for different parts of the identifier.  So the explicit iterator gives us cleaner code that also runs faster.  Win/win.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an old question by now, but I'd like to add an answer on how to do this in Python 3 as I've made an implementation.</p>
<p>The allowed characters are documented here: <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#identifiers</a> . They include quite a lot of special characters, including punctuation, underscore, and a whole slew of foreign characters. Luckily the <code>unicodedata</code> module can help. Here's my implementation implementing directly what the Python documentation says:</p>
<pre><code>import unicodedata

def is_valid_name(name):
    if not _is_id_start(name[0]):
        return False
    for character in name[1:]:
        if not _is_id_continue(character):
            return False
    return True #All characters are allowed.

_allowed_id_continue_categories = {"Ll", "Lm", "Lo", "Lt", "Lu", "Mc", "Mn", "Nd", "Nl", "Pc"}
_allowed_id_continue_characters = {"_", "\u00B7", "\u0387", "\u1369", "\u136A", "\u136B", "\u136C", "\u136D", "\u136E", "\u136F", "\u1370", "\u1371", "\u19DA", "\u2118", "\u212E", "\u309B", "\u309C"}
_allowed_id_start_categories = {"Ll", "Lm", "Lo", "Lt", "Lu", "Nl"}
_allowed_id_start_characters = {"_", "\u2118", "\u212E", "\u309B", "\u309C"}

def _is_id_start(character):
    return unicodedata.category(character) in _allowed_id_start_categories or character in _allowed_id_start_categories or unicodedata.category(unicodedata.normalize("NFKC", character)) in _allowed_id_start_categories or unicodedata.normalize("NFKC", character) in _allowed_id_start_characters

def _is_id_continue(character):
    return unicodedata.category(character) in _allowed_id_continue_categories or character in _allowed_id_continue_characters or unicodedata.category(unicodedata.normalize("NFKC", character)) in _allowed_id_continue_categories or unicodedata.normalize("NFKC", character) in _allowed_id_continue_characters
</code></pre>
<p>This code is adapted from here under CC0: <a href="https://github.com/Ghostkeeper/Luna/blob/d69624cd0dd5648aec2139054fae4d45b634da7e/plugins/data/enumerated/enumerated_type.py#L91" rel="nofollow noreferrer">https://github.com/Ghostkeeper/Luna/blob/d69624cd0dd5648aec2139054fae4d45b634da7e/plugins/data/enumerated/enumerated_type.py#L91</a> . It has been well tested.</p>
</div>
<span class="comment-copy">And the reason for the down vote is…?  This is a basic question, but a valid one nonetheless: +1.</span>
<span class="comment-copy">What does trying to create a class with the name <code>None</code> or <code>__debug__</code> do? According to the following docs, I would expect it to raise a <code>SyntaxError</code>: <a href="https://docs.python.org/2/library/constants.html" rel="nofollow noreferrer">docs.python.org/2/library/constants.html</a></span>
<span class="comment-copy">Here is the regular expression used to define valid identifiers: <code>identifier ::=  (letter|"_") (letter | digit | "_")*</code>. (Perhaps you would like to add something to this effect to your answer so that users don't have to search the webpage?)</span>
<span class="comment-copy">To be pedantic, that's not a regex @void-pointer - it's a grammar.</span>
<span class="comment-copy">Why do you have the <code>itr = iter(seq)</code> line... wouldn't <code>for ch in seq:</code> have the exact same results, the same if not better performance, and improved readability?</span>
<span class="comment-copy">@ArtOfWarfare I have edited the answer to explain.</span>
<span class="comment-copy">Huh. I've never seen that done before. I'll keep that design in mind next time I similarly need to handle a before and after portion of an iteration.</span>
