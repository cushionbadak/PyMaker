<div class="post-text" itemprop="text">
<p>Is there a way to upgrade the version of python used in a virtualenv (e.g. if a bugfix release comes out)?</p>
<p>I could <code>pip freeze --local &gt; requirements.txt</code>, then remove the directory and <code>pip install -r requirements.txt</code>, but this requires a lot of reinstallation of large libraries, for instance, <code>numpy</code>, which I use a lot. </p>
<p>I can see this is an advantage when upgrading from, e.g., 2.6 -&gt; 2.7, but what about 2.7.x -&gt; 2.7.y?</p>
</div>
<div class="post-text" itemprop="text">
<p>Did you see <a href="https://stackoverflow.com/questions/2170252/can-existing-virtualenv-be-upgraded-gracefully">this</a>? If I haven't misunderstand that answer, you may try to create a new virtualenv on top of the old one. You just need to know which python is going to use your virtualenv (you will need to see your virtualenv version). </p>
<p>If your virtualenv is installed with the same python version of the old one and upgrading your virtualenv package is not an option, you may want to read <a href="https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv">this</a> in order to install a virtualenv with the python version you want.</p>
<p><strong>EDIT</strong></p>
<p>I've tested this approach (the one that create a new virtualenv on top of the old one) and it worked fine for me. I think you may have some problems if you change from python 2.6 to 2.7 or 2.7 to 3.x but if you just upgrade inside the same version (staying at 2.7 as you want) you shouldn't have any problem, as all the packages are held in the same folders for both python versions (2.7.x and 2.7.y packages are inside your_env/lib/python2.7/).</p>
<p>If you change your virtualenv python version, you will need to install all your packages again for that version (or just link the packages you need into the new version packages folder, i.e: your_env/lib/python_newversion/site-packages)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you happen to be using the venv module that comes with Python 3.3+, it supports an <code>--upgrade</code> option. 
Per the <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>Upgrade the environment directory to use this version of Python, assuming Python has been upgraded in-place</p>
</blockquote>
<pre><code>python3 -m venv --upgrade ENV_DIR
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>Updated again:</em></strong>
The following method might not work in newer versions of virtualenv. Before you try to make modifications to the old virtualenv, you should save the dependencies in a requirement file (<code>pip freeze &gt; requirements.txt</code>) and make a backup of it somewhere else. If anything goes wrong, you can still create a new virtualenv and install the old dependencies in it (<code>pip install -r requirements.txt</code>).</p>
<p><strong><em>Updated:</em></strong> I changed the answer 5 months after I originally answered. The following method is more convenient and robust.</p>
<p><strong><em>Side effect:</em></strong> it also fixes the <code>Symbol not found: _SSLv2_method</code> exception when you do <code>import ssl</code> in a virtual environment after upgrading Python to v2.7.8.</p>
<p><strong><em>Notice:</em></strong> Currently, <strong>this is for Python 2.7.x only</strong>.</p>
<hr/>
<p>If you're using Homebrew Python on OS X, first <code>deactivate</code> all virtualenv, then upgrade Python:</p>
<pre><code>brew update &amp;&amp; brew upgrade python
</code></pre>
<p>Run the following commands (<code>&lt;EXISTING_ENV_PATH&gt;</code> is path of your virtual environment):</p>
<pre><code>cd &lt;EXISTING_ENV_PATH&gt;
rm .Python
rm bin/pip{,2,2.7}
rm bin/python{,2,2.7}
rm -r include/python2.7
rm lib/python2.7/*
rm -r lib/python2.7/distutils
rm lib/python2.7/site-packages/easy_install.*
rm -r lib/python2.7/site-packages/pip
rm -r lib/python2.7/site-packages/pip-*.dist-info
rm -r lib/python2.7/site-packages/setuptools
rm -r lib/python2.7/site-packages/setuptools-*.dist-info
</code></pre>
<p>Finally, re-create your virtual environment:</p>
<pre><code>virtualenv &lt;EXISTING_ENV_PATH&gt;
</code></pre>
<p>By doing so, old Python core files and standard libraries (plus <code>setuptools</code> and <code>pip</code>) are removed, while the custom libraries installed in <code>site-packages</code> are preserved and working, as soon as they are in pure Python. Binary libraries may or may not need to be reinstalled to function properly.</p>
<p>This worked for me on 5 virtual environments with Django installed.</p>
<p>BTW, if <code>./manage.py compilemessages</code> is not working afterwards, try this:</p>
<pre><code>brew install gettext &amp;&amp; brew link gettext --force
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wasn't able to create a new virtualenv on top of the old one.  But there are tools in pip which make it much faster to re-install requirements into a brand new venv.  Pip can build each of the items in your requirements.txt into a wheel package, and store that in a local cache.  When you create a new venv and run pip install in it, pip will automatically use the prebuilt wheels if it finds them.  Wheels install much faster than running setup.py for each module.</p>
<p>My ~/.pip/pip.conf looks like this:</p>
<pre><code>[global]
download-cache = /Users/me/.pip/download-cache
find-links =
/Users/me/.pip/wheels/

[wheel]
wheel-dir = /Users/me/.pip/wheels
</code></pre>
<p>I install wheel (<code>pip install wheel</code>), then run <code>pip wheel -r requirements.txt</code>.  This stores the built wheels in the wheel-dir in my pip.conf.</p>
<p>From then on, any time I pip install any of these requirements, it installs them from the wheels, which is pretty quick.  </p>
</div>
<div class="post-text" itemprop="text">
<h1>How to upgrade the Python version for an existing virtualenvwrapper project and keep the same name</h1>
<p>I'm adding an answer for anyone using Doug Hellmann's excellent <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" rel="nofollow noreferrer">virtualenvwrapper</a> specifically since the existing answers didn't do it for me.</p>
<p>Some context:</p>
<ul>
<li>I work on some projects that are Python 2 and some that are Python 3; while I'd love to use <code>python3 -m venv</code>, it doesn't support Python 2 environments</li>
<li>When I start a new project, I use <code>mkproject</code> which creates the virtual environment, creates an empty project directory, and cds into it</li>
<li>I want to continue using virtualenvwrapper's <code>workon</code> command to activate any project irrespective of Python version</li>
</ul>
<p>Directions:</p>
<p>Let's say your existing project is named <code>foo</code> and is currently running Python 2 (<code>mkproject -p python2 foo</code>), though the commands are the same whether upgrading from 2.x to 3.x, 3.6.0 to 3.6.1, etc.  I'm also assuming you're currently inside the activated virtual environment.</p>
<p>1. Deactivate and remove the old virtual environment:</p>
<pre><code>$ deactivate
$ rmvirtualenv foo
</code></pre>
<p>Note that if you've added any custom commands to the hooks (e.g., <code>bin/postactivate</code>) you'd need to save those before removing the environment.</p>
<p>2. Stash the real project in a temp directory:</p>
<pre><code>$ cd ..
$ mv foo foo-tmp
</code></pre>
<p>3. Create the new virtual environment (and project dir) and activate:</p>
<pre><code>$ mkproject -p python3 foo
</code></pre>
<p>4. Replace the empty generated project dir with real project, change back into project dir:</p>
<pre><code>$ cd ..
$ mv -f foo-tmp foo
$ cdproject
</code></pre>
<p>5. Re-install dependencies, confirm new Python version, etc:</p>
<pre><code>$ pip install -r requirements.txt
$ python --version
</code></pre>
<p>If this is a common use case, I'll consider opening a PR to add something like <code>$ upgradevirtualenv</code> / <code>$ upgradeproject</code> to virtualenvwrapper.</p>
</div>
<div class="post-text" itemprop="text">
<p>I moved my home directory from one mac to another (Mountain Lion to Yosemite) and didn't realize about the broken virtualenv until I lost hold of the old laptop. I had the virtualenv point to Python 2.7 installed by <code>brew</code> and since Yosemite came with Python 2.7, I wanted to update my virtualenv to the system python. When I ran <code>virtualenv</code> on top of the existing directory, I was getting <code>OSError: [Errno 17] File exists: '/Users/hdara/bin/python2.7/lib/python2.7/config'</code> error. By trial and error, I worked around this issue by removing a few links and fixing up a few more manually. This is what I finally did (similar to what @Rockalite did, but simpler):</p>
<pre><code>cd &lt;virtualenv-root&gt;
rm lib/python2.7/config
rm lib/python2.7/lib-dynload
rm include/python2.7
rm .Python
cd lib/python2.7
gfind . -type l -xtype l | while read f; do ln -s -f /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/${f#./} $f; done
</code></pre>
<p>After this, I was able to just run virtualenv on top of the existing directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>On OS X or macOS using Homebrew to install and upgrade Python3 I had to delete symbolic links before <code>python -m venv --upgrade ENV_DIR</code> would work.</p>
<p>I saved the following in upgrade_python3.sh so I would remember how months from now when I need to do it again:</p>
<pre><code>brew upgrade python3
find ~/.virtualenvs/ -type l -delete
find ~/.virtualenvs/ -type d -mindepth 1 -maxdepth 1 -exec python3 -m venv --upgrade "{}" \;
</code></pre>
<p>UPDATE: while this seemed to work well at first, when I ran py.test it gave an error.  In the end I just re-created the environment from a requirements file.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using <code>pipenv</code>, I don't know if it's possible to upgrade an environment in place, but at least for minor version upgrades it seems to be smart enough not to rebuild packages from scratch when it creates a new environment. E.g., from 3.6.4 to 3.6.5:</p>
<pre><code>$ pipenv --python 3.6.5 install
Virtualenv already exists!
Removing existing virtualenv…
Creating a v$ pipenv --python 3.6.5 install
Virtualenv already exists!
Removing existing virtualenv…
Creating a virtualenv for this project…
Using /usr/local/bin/python3.6m (3.6.5) to create virtualenv…
⠋Running virtualenv with interpreter /usr/local/bin/python3.6m
Using base prefix '/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6'
New python executable in /Users/dmoles/.local/share/virtualenvs/autoscale-aBUhewiD/bin/python3.6
Also creating executable in /Users/dmoles/.local/share/virtualenvs/autoscale-aBUhewiD/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: /Users/dmoles/.local/share/virtualenvs/autoscale-aBUhewiD
Installing dependencies from Pipfile.lock (84dd0e)…
  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 47/47 — 00:00:24
To activate this project's virtualenv, run the following:
 $ pipenv shell
$ pipenv shell
Spawning environment shell (/bin/bash). Use 'exit' to leave.
. /Users/dmoles/.local/share/virtualenvs/autoscale-aBUhewiD/bin/activate
bash-3.2$ . /Users/dmoles/.local/share/virtualenvs/autoscale-aBUhewiD/bin/activate
(autoscale-aBUhewiD) bash-3.2$ python
Python 3.6.5 (default, Mar 30 2018, 06:41:53) 
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just want to clarify, because some of the answers refer to <code>venv</code> and others refer to <code>virtualenv</code>.</p>
<p>Use of the <code>-p</code> or <code>--python</code> flag is supported on <code>virtualenv</code>, but not on <code>venv</code>. If you have more than one Python version and you want to specify which one to create the <code>venv</code> with, do it on the command line, like this:</p>
<pre><code>malikarumi@Tetuoan2:~/Projects$ python3.6 -m venv {path to pre-existing dir you want venv in}
</code></pre>
<p>You can of course upgrade with <code>venv</code> as others have pointed out, but that assumes you have already upgraded the Python that was used to create that <code>venv</code> in the first place. You can't upgrade to a Python version you don't already have on your system somewhere, so make sure to get the version you want, first, then make all the venvs you want from it.</p>
</div>
<div class="post-text" itemprop="text">
<p>For everyone with the problem</p>
<blockquote>
<p>Error: Command '['/Users/me/Sites/site/venv3/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.</p>
</blockquote>
<p>You have to install python3.6-venv</p>
<pre><code> sudo apt-get install python3.6-venv
</code></pre>
</div>
<span class="comment-copy">While you may be able to modify some paths, etc. to get it to work.  The last thing you want is a slightly different environment from production.  Just think.. if there is even one difference between how the various versions compile, you're going to loose out on all the time saved by tracking down the bug.  I'd just take the time to create a brand new virtualenv and reinstall everything.</span>
<span class="comment-copy">@Simon Walker.  Exactly same problem. I have to upgrade python 3.5.3 for a bug fix.</span>
<span class="comment-copy">He specifically did not want to reinstall any packages if possible. Obviously you have never installed numpy from source if you do not know why it matters ;) hint: it takes a LOOOOOOOOOOOOOONG time.</span>
<span class="comment-copy">yeah, i understand that. But it seems that if he make a virtualenv in top of the other, packages are not lost, so he won't have to reinstall numpy or any other package. Nevertheless, i think he should try this in a new virtualenv in case it fails.</span>
<span class="comment-copy">I rest my case, I believe that the new virtualenv versions do indeed upgrade in place, however for old versions, they did not even overwrite the python executable, which caused problems with at least one python bugfix release.</span>
<span class="comment-copy">It didn't work for me and looks like it's not supposed to: <a href="https://github.com/pypa/virtualenv/issues/437" rel="nofollow noreferrer">github.com/pypa/virtualenv/issues/437</a></span>
<span class="comment-copy">I tried to create a new <code>virtualenv</code> on top of the old one, and it <b>did</b> work. I did have to specify <code>-p</code> to point it to the right version of python.</span>
<span class="comment-copy">Unfortunately, this doesn't work on Ubuntu 16.04, where they broke <code>venv</code> and refuse to fix it on the basis that "you could just use virtualenv". EDIT: actually, it does work! It just also shows an error message about "ensurepip".</span>
<span class="comment-copy">I upgraded python from 3.5.1 to 3.6.4 on my system. And to upgrade python on my virtualenv, I had to explicitly mention python3.6 in the command : <code>python3.6 -m venv --upgrade &lt;path_of_existing_env&gt;</code></span>
<span class="comment-copy">The <code>--upgrade</code> flag is not necessary in my experience (3.5.2 to 3.5.4 on Windows/Git Bash).</span>
<span class="comment-copy">I got <code>Error: Command '['/Users/me/Sites/site/venv3/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.</code> &gt; what does it mean ? I see no active python processes, cannot upgrade.</span>
<span class="comment-copy">@user305883 I got a similar error after I upgraded my system Python version from 3.5 to 3.6 (and removed 3.5).  I had to reinstall 3.5 and run <code>python3.6 -m venv --upgrade ENV_DIR</code> for it to work.  I think I'll still have to update some symbolic links in <code>ENV_DIR/bin</code>.  Hence, the trick was to update with the <b>new</b> Python version while the old version was still installed.</span>
<span class="comment-copy">The only file I had to delete was the <code>bin/python</code> file.</span>
<span class="comment-copy">For some older version Python, deleting <code>setuptools</code> and <code>pip</code> is necessary.</span>
<span class="comment-copy">I also had to delete <code>&lt;EXISTING_ENV_PATH&gt;/.Python</code> as that broke the virtualenv creation.</span>
<span class="comment-copy">Based on this answer I wrote a little script (with full attribution): <a href="https://www.burgundywall.com/post/update-all-python-virtual-environments" rel="nofollow noreferrer">burgundywall.com/post/update-all-python-virtual-environments</a></span>
<span class="comment-copy">You can actually easily remove your virtual environment by running <code>rmvirtualenv &lt;env_name&gt;</code> and will remove all its lined dependencies :)  See more at: <a href="http://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#rmvirtualenv" rel="nofollow noreferrer">virtualenvwrapper.readthedocs.io/en/latest/…</a></span>
<span class="comment-copy">For most people I think making use of pip machinery to do the work makes sense, but for anyone who has customized their virtualenvs postactivate, predeactivate, etc, this is not a desirable option because all that is lost and has to be manually readded.</span>
<span class="comment-copy"><code>py.test</code> doesn't work because `~/.virtualenvs/myenv/bin/python3.7 isn't a symlink, so doesn't get updated.</span>
<span class="comment-copy">Ah actually, the problem is There is <code>~/.virtualenvs/myenv/.Python</code> which is a symlink.</span>
<span class="comment-copy">awesome! Thanks for this gem</span>
