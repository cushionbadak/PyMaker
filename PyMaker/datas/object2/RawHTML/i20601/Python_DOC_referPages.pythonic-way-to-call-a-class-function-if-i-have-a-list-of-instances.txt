<div class="post-text" itemprop="text">
<p>So I have a list containing a number of instances of a class.</p>
<p>As time moves forward, I would like, at each step, to call the <code>run</code> method of the class.</p>
<p>So far, I have what's below. But is there a better or more Pythonic way of achieving the <code>for c in objs:</code> block?</p>
<p>Thanks!</p>
<pre><code>#!/usr/bin/python

class the_class:
    def __init__(self):
        self.num=1
    def run(self):
        self.num+=1

def main():
    objs=[]
    objs.append(the_class())
    objs.append(the_class())
    objs.append(the_class())

    for t in range(10):
        for c in objs:
            c.run()

    print objs[0].num

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, what you have is perfectly reasonable and Pythonic. </p>
<p>The list comprehension syntax:</p>
<pre><code>[c.run() for c in objs]
</code></pre>
<p>Saves you one line, but using list comprehensions for side effects is generally considered bad style.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, what you have is perfectly fine.</p>
<p>Using a list comprehension or map here would make your code less clear and harder to read. I would <strong>strongly recommend against doing either</strong>.</p>
<p>A list comprehension is designed to create a list. Where you want to make a loop, use a loop.</p>
<p>Even if you did need to optimise this (and it's highly unlikely that using a list comp or map would be an effective optimisation anyway) then do it when you have proof it's a bottleneck. Readability comes first, optimise only where you have to.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's also the <code>map</code> builtin function which does basically the same thing as the list comprehension:</p>
<pre><code>map(lambda x:x.run(),objs) 
</code></pre>
<p>but most consider list comprehensions to be more "pythonic".  Additionally, any reservations people have about using list comprehensions for side-effects can probably be applied to <code>map</code> as well.  The only reason I bring it up is because the <code>multiprocessing</code> module has a <code>Pool</code> class which has a map method to do the computation in parallel, and works basically the same as the builtin <code>map</code> ( <a href="http://docs.python.org/library/multiprocessing.html" rel="nofollow">http://docs.python.org/library/multiprocessing.html</a> ).  If the run method takes a while to complete, and each one is independent of the others, it might be worthwhile.</p>
<p><strong>EDIT</strong> </p>
<p>As stated in the comments, you can do this faster (removing the <code>lambda</code>) using the operator module.  However, the point is (and remains) that you can use <code>map</code> or <code>multiprocessing.Pool.map</code> almost interchangeably and pick up a performance boost in a lot of applications with the latter.</p>
</div>
<div class="post-text" itemprop="text">
<p>For python 3, you cannot simply use map, as you have to deal with it being a generator.</p>
<pre><code>def exhaust(gen):
    for _ in gen: pass

# Using map
exhaust(map(lambda x: x.run(), c))

# Using generator comprehension (better)
exhaust(x.run() for x in c)
</code></pre>
<p>Alternatively, you could create a dummy function, and use the <code>*</code> operator:</p>
<pre><code>def nop(*args): pass
nop(*(x.run() for x in c))
</code></pre>
<p>As others have pointed out, none of these are very pretty to read.  Stick to what you have, so that people can read it.</p>
<p>EDIT: Improved exhaust function, thanks wim.  </p>
</div>
<span class="comment-copy">General practice in for loops is to use <code>xrange</code> in lieu of <code>range</code> in more modern versions of Python; <code>range</code> is depracated.</span>
<span class="comment-copy">@lukecampbell "more modern"? In more modern versions of python (3.x), <code>xrange()</code> doesn't exist and <code>range()</code> provides a generator rather than a list. In <i>older</i> versions, (2.x), yes, use <code>xrange()</code>.</span>
<span class="comment-copy">I didn't know python3 got rid of <code>xrange</code> but yes in Python 2.x was where my experience comes from and my recommendation was directed.</span>
<span class="comment-copy">That's fine, your edited comment is less misleading, but I would take care when talking about modernity when referring to a previous version of anything.</span>
<span class="comment-copy">I actually have heard that its not usually appropriate to use a list comp just for the side effects of calling the methods</span>
<span class="comment-copy">If you want to one-liner it, and it returns <code>None</code>, use <code>any(c.run() for c in obj)</code>, which doesn't accumulate results.</span>
<span class="comment-copy">Seriously, if you want to one-liner it for the sake of one-linering it, take up Code Golf and leave actual programming to the grown-ups.</span>
<span class="comment-copy"><code>any</code> on a generator expression can be faster than a normal <code>for</code> loop, so there is a legitimate reason to use it, if it's somewhere a micro-optimization could actually help.</span>
<span class="comment-copy">If the runtime of the run() function is non-trivial, the loop time will be swamped. If the runtime of the run() function is trivial, the total runtime of the loop is trivial, unless the size of the collection is enormous, in which case perhaps Python isn't the best choice of language. Using anything other than a straightforward loop here for the sake of performance is premature optimization.</span>
<span class="comment-copy">@agf, Thanks.  That's one optimization that I've seen around a number of times and can never seem to remember.  I'll edit.</span>
<span class="comment-copy">Ya this has some overhead with the lambda</span>
<span class="comment-copy">@RussellBorogove: Thats an odd comment.</span>
<span class="comment-copy">@RussellBorogove That's ridiculous. You can save money / time with optimizations and still keep the efficiency of a high level language.</span>
<span class="comment-copy">@agf, I looked at itemgetter and honestly, I don't completely understand it at a quick glance.  Shouldn't I be using <code>operator.methodgetter</code> instead?</span>
<span class="comment-copy">Catching the <code>StopIteration</code> thrown by a generator in order to break out of a <code>while True:</code> loop?!  That's crazy.  You know you can replace the whole construct with <code>for g in gen: pass</code></span>
<span class="comment-copy">@wim thanks, some old code I had in there, and I was just trying to write it fast.  Also, <code>next(gen)</code> sounds cool. :P</span>
<span class="comment-copy">This is the same solution, except with extra cruft - you are just moving the loop to a different segment of code. As a side not, if you want to consume an entire iterable, check the <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>consume()</code> itertools recipe</a> which is the most efficient way to do this.</span>
