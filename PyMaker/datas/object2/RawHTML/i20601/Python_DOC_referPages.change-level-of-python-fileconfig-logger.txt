<div class="post-text" itemprop="text">
<p>I have a logger configured from a file and would like to change the level of my logging without having to change the .conf file, but instead using inline code; </p>
<pre><code>import logging.config

logging.config.fileConfig('..\\LoggingConfig\\loggingfile.conf')

logging.StreamHandler.setLevel(logging.info)

logging.debug("Debug")
logging.info("Info")
</code></pre>
<p>This should only print the "Info" log line to the screen. I don't know on which object to call the setLevel()! logging.StreamHandler.setLevel(logging.info) is just a stab in the dark after 30 mins searching...</p>
<p>The loggingfile.conf file;</p>
<pre><code>[loggers]
keys=root

[logger_root]
handlers=screen
level=NOTSET

[formatter_modfunc]
format=%(module)-20s  %(funcName)-25s %(levelno)-3s: %(message)s

[handlers]
keys=screen

[handler_screen]
class=StreamHandler
formatter=modfunc
level=DEBUG
args=(sys.stdout,)
qualname=screen
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to call <code>setLevel</code> on your <code>Logger</code> instance.</p>
<pre><code>LOGGER = logging.getLogger('your.module.file.name')
LOGGER.setLevel(_level)
LOGGER.info('foo')
</code></pre>
<p>If you are only using the basic logger, you can do it like this</p>
<pre><code>logging.basicConfig(level=_level)
logging.info('foo')
</code></pre>
<p>See <a href="http://docs.python.org/howto/logging.html">http://docs.python.org/howto/logging.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>When using logging.config.fileConfig and you want to dynamically change level for all child loggers at once, you can...</p>
<p>a) <a href="http://docs.python.org/library/logging.html#logging.Logger.setLevel" rel="noreferrer">set level</a> for <a href="http://docs.python.org/library/logging.html#logging.getLogger" rel="noreferrer">root logger</a>:</p>
<pre><code>logging.getLogger().setLevel(logging.WARNING)
</code></pre>
<p>b) <a href="http://docs.python.org/library/logging.html#logging.disable" rel="noreferrer">disable</a> other levels</p>
<pre><code>logging.disable(logging.INFO)
</code></pre>
</div>
<span class="comment-copy">Great that did it, I needed to know how to get the instance, used <code>loggerInstance = logging.getLogger(__name__)</code>, thanks!</span>
<span class="comment-copy">Glad that I could help you :)</span>
<span class="comment-copy">thanks very helpful</span>
<span class="comment-copy">Everything else I've tried failed. Only this answer (which is unfortunately not marked as the correct one) actually does it for me. For some reason if you do a basicConfig, then later do another basicConfig, the latter doesn't change the logging level. Only this method does the subsequent change. Wish I understood why.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">The call to basicConfig() should come before any calls to debug(), info() etc. As itâ€™s intended as a one-off simple configuration facility, only the first call will actually do anything: subsequent calls are effectively no-ops.</a></span>
