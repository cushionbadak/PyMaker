<div class="post-text" itemprop="text">
<p>I am faced with a unique situation, slightly trivial but painful. </p>
<p>I need to use Python 2.6.6 because NLTK is not ported to Python 3 (that's what I could gather).</p>
<p>In a different code(which am working concurrently), there is a collections counter function which is available only in Python 3 but not in Python 2.6.6. </p>
<p>So, each time I switch between the two codes, I need to install &amp; uninstall the versions. That's such a waste of time.</p>
<p>Any suggestions on how I specify which version I want to use?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Install Python 3</strong></p>
<p>Python 3.3 and higher put a <code>py.exe</code> into the windows folder. [<a href="https://stackoverflow.com/questions/5087831/how-should-i-set-default-python-version">link</a>]
This executable is used to determine the python version with the first line of the file:</p>
<pre><code>#!/usr/bin/python2.7
</code></pre>
<p>will be executed with Python 2.7.
You must install the Python 3 version after you installed the other Python versions.</p>
<p>Additional ressources: <a href="https://docs.python.org/3/using/windows.html#customization" rel="nofollow noreferrer">https://docs.python.org/3/using/windows.html#customization</a></p>
<p><strong>pywin</strong> <a href="https://pypi.python.org/pypi/pywin" rel="nofollow noreferrer">https://pypi.python.org/pypi/pywin</a></p>
<p><strong>Old Solution</strong></p>
<p>I guess you use windows. I solved this problem with a hack:</p>
<p>Every time I start python on windows a python.bat will be used.
This starts a python.py that analyses the file for the header after <strong>#!</strong> for the python version.</p>
<p>To start example.py I type into the console</p>
<pre><code>python example.py
</code></pre>
<p>but it could also be started per <strong>klick</strong>.</p>
<p>this is my python file
C:\bin\python.py</p>
<pre><code>#!/usr/bin/env python2
import sys
import os
args = sys.argv
if len(args) &lt;= 1:
    # no arguments
    # start python console
    i = os.system('C:\bin\python2.bat' + " ".join(args[1:]))
    if type(i) != int:
        i = 0
    exit(i)

def analyse(filename, default = ''):
    '''=&gt; '2', '3', default '''
    try:
        f = open(filename)
    except IOError:
        # file not found
        return default
    firstLine = f.readline()
    if firstLine.startswith('#!'):
        if 'python2' in firstLine:
            return '2'
        if 'python3' in firstLine:
            return '3'
        i = firstLine.find(' ')
        if i != -1:
            # analyse from end of path on
            in2 = '2' in firstLine[i:]
            in3 = '3' in firstLine[i:]
            if in2 and not in3:
                return '2'
            if in3 and not in2:
                return '3'
        else:
            # analyse path
            in2 = '2' in firstLine
            in3 = '3' in firstLine
            if in2 and not in3:
                return '2'
            if in3 and not in2:
                return '3'
    return default



no = analyse(args[1], default = '2')
if args[1][-1:] == 'w':
    # python win
    cmd = 'C:\bin\pythonw%s.bat'
else:
    cmd = 'C:\bin\python%s.bat'
i = os.system(cmd % no + ' ' + " ".join(args[1:]))

if type(i) != int:
    i = 0
exit(i)
</code></pre>
<p>This is the C:\bin\python.bat file</p>
<pre><code>@echo off
C:\bin\python2 C:\bin\python.py %*
rem this may also work:
rem C:\bin\python.py %*
</code></pre>
<p>and in every file you start you have to put either</p>
<pre><code>#!/bin/env/python3
</code></pre>
<p>or</p>
<pre><code>#!/bin/env/python2
</code></pre>
<p>default is python2</p>
<p>Then I added those files to the folder:</p>
<p>C:\bin\python2.bat</p>
<pre><code>@echo off
C:\python27\python.exe %*
</code></pre>
<p>C:\bin\pythonw2.bat</p>
<pre><code>@echo off
C:\python27\pythonw.exe %*
</code></pre>
<p>C:\python3.bat</p>
<pre><code>@echo off
C:\python32\pythonw.exe %*
</code></pre>
<p>C:\bin\pythonw3.bat</p>
<pre><code>@echo off
C:\python32\pythonw.exe %*
</code></pre>
<p>If you are using python26 instead if python27 then you need to change</p>
<pre><code>C:\python27 
</code></pre>
<p>to </p>
<pre><code>C:\python26
</code></pre>
<p>and so on. Same with python not using python 32.</p>
<p>You may also want to start python files per <strong>klick</strong></p>
<p>then do this:</p>
<p>klick right on a .py file
-&gt; open with
-&gt; select C:\bin\python.bat</p>
<p>If you get problems contact me or leave a comment.</p>
</div>
<div class="post-text" itemprop="text">
<p>You simply install multiple versions in separate directories, and then you run the python program with the Python version you want to use. Like so:</p>
<pre><code>C:\Python26\Python.exe thescript.py
</code></pre>
<p>Or similar.</p>
<p>What virtualenv does is that it gives you many separate "virtual" installations of <em>the same python version</em>. That's a completely different issue, and hence it will not help you in any way.</p>
</div>
<div class="post-text" itemprop="text">
<p>For those using windows, if you're not averse to using PowerShell, you can install python 2 and 3 separately as mentioned in other answers. Then you can do this:</p>
<pre><code>Set-Alias python27 [some path]\python27\python.exe 
Set-Alias python33 [some path]\python33\python.exe
</code></pre>
<p>To create an alias for running each version.</p>
<p>Keeping aliases around is described in this link: <a href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_aliases#saving-aliases" rel="nofollow noreferrer">https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_aliases#saving-aliases</a></p>
<p>In order to successfully load the profile that that link would have you create, you may need to change your execution policy.</p>
<pre><code>Set-ExecutionPolicy RemoteSigned
</code></pre>
<p>should do the trick, but if you want to know more about execution policies you may want to follow this link: <a href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_execution_policies" rel="nofollow noreferrer">https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_execution_policies</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use virtualenv, which allows you to create dynamic python environments. Check out python's page here.</p>
<p><a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow noreferrer">http://pypi.python.org/pypi/virtualenv</a></p>
<p>Related answered question on installing packages inside virtualenv on windows (as opposed to system-wide) <a href="https://stackoverflow.com/q/3271590/705086">Can I install Python windows packages into virtualenvs?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://github.com/utahta/pythonbrew" rel="nofollow">Pythonbrew</a>, its super easy to install, and allows you to very easily install, and switch between, or temporarily use different python versions safely.</p>
<p>Once pythonbrew is installed:</p>
<pre><code>#to install new python versions is as simple as:
pythonbrew install 2.7.2 3.2
#to use a particular version in the current shell:
pythonbrew use 3.2
#to uninstall:
pythonbrew uninstall 2.7.2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should look into <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a>. I got to know about it from <a href="http://www.clemesha.org/blog/modern-python-hacker-tools-virtualenv-fabric-pip/" rel="nofollow">this</a> blog post, which talks about <code>pip</code> and <code>fabric</code>, also very useful tools for the Python developer.</p>
</div>
<div class="post-text" itemprop="text">
<p>This page has an implementation of <code>collections.Counter</code> that works for Python 2.6:</p>
<ul>
<li><a href="http://code.activestate.com/recipes/576611/" rel="nofollow">http://code.activestate.com/recipes/576611/</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>not sure this is what you want, but I used to live with this for a long time <a href="http://www.portablepython.com/" rel="nofollow">http://www.portablepython.com/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The OP request is a little outdated, especially now that NLTK does have a py3.x port. see <a href="https://stackoverflow.com/questions/22573251/install-nltk-3-0-on-ubuntu-13-10-using-tar-gz-download">Install nltk 3.0 on Ubuntu 13.10 using tar.gz download</a></p>
<p>Here's how you can get python3 to work with NLTK.</p>
<pre><code>$ sudo apt-get install python3-pip
$ sudo pip3 install pyyaml
$ wget http://www.nltk.org/nltk3-alpha/nltk-3.0a3.tar.gz
$ tar -xzvf nltk-3.0a3.tar.gz
$ cd nltk-3.0a3/
$ sudo python3 setup.py install
$ python3
&gt;&gt;&gt; import nltk
&gt;&gt;&gt; from nltk.corpus import brown
&gt;&gt;&gt; print(brown.sents()[0])
['The', 'Fulton', 'County', 'Grand', 'Jury', 'said', 'Friday', 'an', 'investigation', 'of', "Atlanta's", 'recent', 'primary', 'election', 'produced', '``', 'no', 'evidence', "''", 'that', 'any', 'irregularities', 'took', 'place', '.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I do use at least 3 or 4 versions of Python on my machines (Windows).  The installers from <a href="http://python.org/" rel="nofollow">http://python.org/</a> automatically placed them in:</p>
<pre><code>c:\Python26
c:\Python27
c:\Python32
</code></pre>
<p>and</p>
<pre><code>c:\Python24
</code></pre>
<p>on one machine.  I mostly use Python 2.7 because some applications use wxPython and also for the older console code.  This <code>python.exe</code> was not renamed.  By the way, the <strong>Python 2.7 also supports <code>collections.Counter</code></strong>.</p>
<p>The <code>c:\Python26</code> and <code>c:\Python24</code> are not included in my PATH.  In <code>c:\Python32\</code>, the exe was renamed to py.exe.  This way, <code>python some.py</code> starts Python 2.7, and <code>py another.py</code> starts Python 3.2.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify the version you want in the shebang line. I just ran into this when a VM my Ops guy set up had Python 2.6 in /usr/bin/python2.6, and I needed 2.7 for a few features. He installed it for me at /usr/bin/python2.7.</p>
<p>My old shebang:</p>
<pre><code>#!/usr/bin/env python
</code></pre>
<p>stopped working, because /usr/bin/python was a link to /usr/bin/python2.6. What wound up fixing the problem, and working across Windows, Linux, and OSX, was changing the shebang to:</p>
<pre><code>#!/usr/bin/env python2.7
</code></pre>
<p>It should work for any version, I believe.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're talking about shell, as in linux, if you install python 3, you can invoke it separately with the <code>python3</code> command. Python 2 is just invoked using <code>python</code>.</p>
<p>At least this is my experience with Ubuntu-like systems, I haven't used other Linux environments.</p>
<p>I realize this question is almost a year old, but NLTK has been ported to Python 3 (or at least that was true as of writing this).</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look on <a href="http://winpython.sourceforge.net/" rel="nofollow">WinPython</a>, a nice portable/installable python distribution for Windows.</p>
<blockquote>
<p><strong>Portable</strong>: preconfigured, it should run out of the box on any machine under Windows (without any requirement) and the folder containing WinPython can be moved to any location (local, network or removable drive) with most of the application settings</p>
<p><strong>Flexible</strong>: one can install (or should I write "use" as it's portable) as many WinPython versions as necessary (like isolated and self-consistent environments), even if those versions are running different versions of Python (2.7, 3.3) or different architectures (32bit or 64bit) on the same machine </p>
</blockquote>
<p>It also allows you to register and unregister easily a given python version as the system default one.</p>
<p>But even working as portable, you can make a shortcut of the python executable and put it somewhere in your path. Just name the shortcuts of different versions different names. Then you can just use:</p>
<pre><code>python_3_64bit_shortcut your_program.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use py launcher, that is installed with python distributable:</p>
<pre><code>py -2    # default python 2
py -2.7  # specifically python 2.7
py -3    # default python 3
py -3.7  # specifically python 3.7
</code></pre>
<p>If you need to execute a script with a specific version you can do following:</p>
<pre><code>py -3.7 my_script.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simplest solution : Rename the file in where your path is locations e.g:
<a href="https://i.stack.imgur.com/gbGPl.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/gbGPl.png"/></a></p>
</div>
<span class="comment-copy">Which os???????</span>
<span class="comment-copy">Just install multiple versions.</span>
<span class="comment-copy">Python 2 and 3 can be installed side-by-side. Why do you need to uninstall and reinstall?</span>
<span class="comment-copy">WIndows. Yes it can be installed side-by-side. But, may be its a dumb question - how do i invoke the appropriate version (shell) from a python code ? When I say run module, it always runs on 3.0 which throws an error for nltk.</span>
<span class="comment-copy">just set back the path. You can use different python on window easily</span>
<span class="comment-copy">Nice, if hackish, solution to the brokenness of Windows.</span>
<span class="comment-copy">If you install python 3 as last version, it will recognize the <code>#!</code> under Windows</span>
<span class="comment-copy">virtualenv can also work with different Python versions, so that when you have a virtualenv active, <code>python</code> points to the Python version of that virtualenv. So it's not completely irrelevant, although it's probably overkill.</span>
<span class="comment-copy">@ThomasK: Yeah, but that doesn't solve his problem, and it's not necessary to solve his problem. It is as relevant as coffee. It's a nice addition, but doesn't actually solve anything.</span>
<span class="comment-copy">If you do this, does the python that you run know to look in the appropriate folder for packages etc.? Or will Python 2.6 look in C:\Python33\Scripts because that's what's in my PATH?</span>
<span class="comment-copy">@LarsH: It knows. No, it will not look for modules in your PATH. It will look in your PYTHONPATH, so don't set it globally.</span>
<span class="comment-copy">For cmd.exe, use <a href="http://technet.microsoft.com/en-us/library/bb490894.aspx" rel="nofollow noreferrer">doskey.com</a> (it's really a PE exe, not DOS com). The Windows console supports aliases associated with the image name of each attached process. You can load aliases from a file using doskey's <code>/macrofile</code> option. E.g., the file's <code>[cmd.exe]</code> section could have the line <code>python3=C:\Python34\python.exe $*</code>. Add the doskey command to a cmd script loaded from the <code>AutoRun</code> value in <code>HKCU\Software\Microsoft\Command Processor</code>. You could also add a <code>[python.exe]</code> section for aliases in interactive mode.</span>
