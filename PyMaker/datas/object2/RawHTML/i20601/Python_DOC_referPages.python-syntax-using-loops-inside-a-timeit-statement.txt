<div class="post-text" itemprop="text">
<p>Two of these statements run while the other fails with a syntax error. What am I doing wrong?</p>
<pre><code>&gt;&gt;&gt; Timer('for i in xrange(10): oct(i)').repeat(3)
[2.7091379165649414, 2.6934919357299805, 2.689150094985962]
&gt;&gt;&gt; Timer('n = [] ; n = [oct(i) for i in xrange(10)]').repeat(3)
[4.0500171184539795, 3.6979520320892334, 3.701982021331787]
&gt;&gt;&gt; Timer('n = [] ; for i in xrange(10): n.append(oct(i))').repeat(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/timeit.py", line 136, in __init__
    code = compile(src, dummy_src_name, "exec")
  File "&lt;timeit-src&gt;", line 6
    n = [] ; for i in xrange(10): n.append(oct(i))
               ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your failing statement is syntactically incorrect. If you need to time multiple statement's define it in a function and call Timer, after importing the function from main</p>
<pre><code>&gt;&gt;&gt; def foo():
    n = []
    for i in xrange(10): n.append(oct(i))    

&gt;&gt;&gt; Timer("foo()","from __main__ import foo")
</code></pre>
<p>Now you need to understand why the failing statement is incorrect</p>
<p>Excerpt from the <a href="http://docs.python.org/reference/compound_stmts.html" rel="noreferrer">docs for Compound Statement</a></p>
<p>A suite can be one or more semicolon-separated simple statements on the same line as the header, following the headerâ€™s colon, or it can be one or more indented statements on subsequent lines.</p>
<pre><code>stmt_list     ::=  simple_stmt (";" simple_stmt)* [";"]
</code></pre>
<p>and similarly, a <a href="http://docs.python.org/reference/simple_stmts.html#grammar-token-simple_stmt" rel="noreferrer">simple statement</a> is</p>
<pre><code>simple_stmt ::=  expression_stmt
                 | assert_stmt
                 | assignment_stmt
                 | augmented_assignment_stmt
                 | pass_stmt
                 | del_stmt
                 | print_stmt
                 | return_stmt
                 | yield_stmt
                 | raise_stmt
                 | break_stmt
                 | continue_stmt
                 | import_stmt
                 | global_stmt
                 | exec_stmt
</code></pre>
<p>It should now be clear to you when a semi-colon can (not should) be used. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Timer('n = []\nfor i in xrange(10): n.append(oct(i))').repeat(3)
[2.026008492408778, 2.065228002189059, 2.048982731136192]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow">triple quotes</a> as well:</p>
<pre><code>statement = '''n = []
for i in xrange(10):
    n.append(oct(i))'''

Timer(statement).repeat(3)
</code></pre>
</div>
<span class="comment-copy">When is <code>;</code> legal as a line separator?</span>
<span class="comment-copy">+1, although I'd rather put the <code>n =[]</code> into a separate setup parameter: <code>Timer(setup='n = []', stmt='for i in range(10):n.append(oct(i))').repeat(3)</code></span>
