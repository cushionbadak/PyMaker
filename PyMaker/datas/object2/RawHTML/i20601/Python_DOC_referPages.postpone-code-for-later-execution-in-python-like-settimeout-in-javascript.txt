<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3433559/python-time-delays">Python Time Delays</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have to do a program in python that needs to execute for some time and then (does not matter where it was executing) it must dump information to a file, close the file and then exit.</p>
<p>The behavior here is equivalent in JavaScript to using <code>setTimeout(func, 1000000)</code> where its first parameter (func) would be a pointer to the function with the exit code and its second parameter would be the time available to the program to execute.</p>
<p>I know how to make this program in C (using SO signals) but with python </p>
</div>
<div class="post-text" itemprop="text">
<p>In practice, a <a href="http://docs.python.org/2/library/threading.html#timer-objects" rel="noreferrer">Timer</a> is probably the simplest way to do what you want. </p>
<p>This code will do the following:</p>
<ul>
<li>After 1 second, it prints "arg1 arg2"</li>
<li>After 2 seconds, it prints "OWLS OWLS OWLS"</li>
</ul>
<p>===</p>
<pre><code>from threading import Timer

def twoArgs(arg1,arg2):
    print arg1
    print arg2
    print ""

def nArgs(*args):
    for each in args:
        print each

#arguments: 
#how long to wait (in seconds), 
#what function to call, 
#what gets passed in
r = Timer(1.0, twoArgs, ("arg1","arg2"))
s = Timer(2.0, nArgs, ("OWLS","OWLS","OWLS"))

r.start()
s.start()
</code></pre>
<p>===</p>
<p>The above code will most likely solve your problem.</p>
<p>But! There is alternative way, that doesn't use multithreading. It works much more like Javascript, which is single-threaded. </p>
<p>For this single-thread version, all you need to do is store the function and its arguments in an object, along with the time at which the function should be run.</p>
<p>Once you have the object containing the function call and the timeout, just periodically check if the function is ready to execute. </p>
<p>The right way to do this is by making a <a href="http://en.wikipedia.org/wiki/Priority_queue" rel="noreferrer">priority queue</a> to store all of the functions we want to run in the future, as shown in the code below. </p>
<p>Just like in Javascript, this approach makes no guarantee that the function will be run exactly on time. A function that takes a very long time to run will delay the functions after it. But it does guarantee that a function will be run <em>no sooner</em> than its timeout.</p>
<p>This code will do the following:</p>
<ul>
<li>After 1 second, it prints "20"</li>
<li>After 2 seconds, it prints "132"</li>
<li>After 3 seconds, it quits. </li>
</ul>
<p>===</p>
<pre><code>from datetime import datetime, timedelta
import heapq

# just holds a function, its arguments, and when we want it to execute.
class TimeoutFunction:
    def __init__(self, function, timeout, *args):
        self.function = function
        self.args = args
        self.startTime = datetime.now() + timedelta(0,0,0,timeout) 

    def execute(self):
        self.function(*self.args)

# A "todo" list for all the TimeoutFunctions we want to execute in the future
# They are sorted in the order they should be executed, thanks to heapq
class TodoList: 
    def __init__(self):
        self.todo = []

    def addToList(self, tFunction):
        heapq.heappush(self.todo, (tFunction.startTime, tFunction))

    def executeReadyFunctions(self):
        if len(self.todo) &gt; 0:
            tFunction = heapq.heappop(self.todo)[1]
            while tFunction and datetime.now() &gt; tFunction.startTime:
                #execute all the functions that are ready
                tFunction.execute()
                if len(self.todo) &gt; 0:
                    tFunction = heapq.heappop(self.todo)[1]
                else:
                    tFunction = None                    
            if tFunction:
                #this one's not ready yet, push it back on
                heapq.heappush(self.todo, (tFunction.startTime, tFunction))

def singleArgFunction(x):
    print str(x)

def multiArgFunction(x, y):
    #Demonstration of passing multiple-argument functions
    print str(x*y)

# Make some TimeoutFunction objects
# timeout is in milliseconds
a = TimeoutFunction(singleArgFunction, 1000, 20)
b = TimeoutFunction(multiArgFunction, 2000, *(11,12))
c = TimeoutFunction(quit, 3000, None)

todoList = TodoList()
todoList.addToList(a)
todoList.addToList(b)
todoList.addToList(c)

while True:
    todoList.executeReadyFunctions()
</code></pre>
<p>===</p>
<p>In practice, you would likely have more going on in that while loop than just checking if your timeout functions are ready to go. You might be polling for user input, controlling some hardware, reading data, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use signals in python as well (unix only)</p>
<pre><code>import signal, sys

# install a SIGALRM handler 

def handler(signum, frame):
    print "got signal, exiting"
    sys.exit(1)

signal.signal(signal.SIGALRM, handler)

# emit SIGALRM after 5 secs

signal.setitimer(signal.ITIMER_REAL, 5)

# do stuff

i = 1
while True:
    if i % 100000 == 0:
        print i
    i += 1
</code></pre>
<p>Docs: <a href="http://docs.python.org/library/signal.html" rel="noreferrer">http://docs.python.org/library/signal.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>call_later</code> method of python3's asyncio event loop. Below example will just work. </p>
<pre><code>import asyncio

loop = asyncio.get_event_loop()

def callback():
    print("callback")
    loop.call_later(1, callback)

loop.call_later(1, callback)

async def main():
    while True:
        await asyncio.sleep(1)

loop.run_until_complete(main())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a nice solution using <code>asyncio</code> in python 3:</p>
<pre><code>import asyncio

def async_call_later(seconds, callback):
    async def schedule():
        await asyncio.sleep(seconds)

        if asyncio.iscoroutinefunction(callback):
            await callback()
        else:
            callback()

    asyncio.ensure_future(schedule())

async def do_something_async():
    await asyncio.sleep(0.5)
    print('Now! async')

async def main():
    print('Scheduling...')

    async_call_later(3, do_something_async)
    async_call_later(3, lambda: print('Now!'))

    print('Waiting...')

    await asyncio.sleep(4)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
<p>Note that the sleep and similar functions in python expect a number of seconds, so I have replicated that. But you can supply fractions if you need milliseconds. (e.g 0.5 =&gt; 500ms).</p>
<p>An advantage of this approach over <a href="https://docs.python.org/3/library/asyncio-eventloop.html?highlight=call_later#asyncio.loop.call_later" rel="nofollow noreferrer">asyncio.call_later</a> is that it only works with a synchronous callback. This implementation <code>awaits</code>  if the callback is a coroutine so it is slightly more robust.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>time</code> module like this:</p>
<pre><code>import time
time.sleep(100)#in seconds
somefunction()
</code></pre>
</div>
<span class="comment-copy">That's not what <code>setTimeout</code> does in JavaScript. What that does is to queue up a function for execution later (ie once the timeout has expired).</span>
<span class="comment-copy">Yeah... You are right. But I just wanted to give the idea of what I wanted I didn't find the need to be completely technically correct.</span>
<span class="comment-copy">Best you could do is mock something up with threads.</span>
<span class="comment-copy">@JakobBowyer Do you know anywhere where I can do that. Like a code snippet?</span>
<span class="comment-copy">does <code>from threading import Timer</code> reuse the same thread or use a threadpool? is there a way to pass it a threadpool instance?</span>
<span class="comment-copy">Anything compatible with windows and linux? (I need it compatible with both)</span>
<span class="comment-copy">No idea. Something like <a href="http://docs.python.org/library/threading.html#timer-objects" rel="nofollow noreferrer">docs.python.org/library/threading.html#timer-objects</a> maybe.</span>
<span class="comment-copy">@thg435 I've tested. The above comment should be the accepted answer.</span>
<span class="comment-copy">@brunoais: to make this more helpful you might want to write your own answer explaining how exactly that link helped you and accept it to show others that that is the correct solution. Think on people who have the same problem and happen to google this topic out.</span>
<span class="comment-copy">@thg435 Ok, I'll do that, but for now I'm really super busy. I'll write that answer as I can and then I'll post as soon as it is complete. I have some work secrecy so I will not be able to give all the details</span>
<span class="comment-copy">Interesting modern take with asyncio. Ty.</span>
<span class="comment-copy">i think the asyncio solution is solid, but i wonder if there is a way to do this using a threadpool or something</span>
<span class="comment-copy">Where's the asynchronous part of this?</span>
<span class="comment-copy">If this was not asynchronous it would be pointless to make the funtion</span>
<span class="comment-copy"><code>time.sleep</code> does not work like <code>setTimeout()</code>. For starters, it is not asynchronous....</span>
<span class="comment-copy">@brunoais I am still not sure what you are saying, because of what I understand of asynchronous, I am able to use <code>time.sleep()</code> to replicate something like <code>setTimeout()</code>. Perhaps you should take a look at this repl: <a href="https://repl.it/@codecademy123/Asynchronous-Python" rel="nofollow noreferrer">repl.it/@codecademy123/Asynchronous-Python</a></span>
<span class="comment-copy">And what does that thread do during those 5 seconds? In order to be asynchronous, it needs to be able to do other things. Nowadays, python has this: <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio-task.html</a> which didn't exist at the time this question was made. You can see there how asynchronism is working. How the thread doesn't stop executing if it encounters an await. It just jumps to different code. Instead of using hundreds of threads, you can use async IO, for example.</span>
