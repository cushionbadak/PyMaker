<div class="post-text" itemprop="text">
<p>Does anyone know if there is a way to use a variable in the setlevel() function of Python's Logging module?</p>
<p>At the moment I am using this:</p>
<pre><code>Log = logging.getLogger('myLogger')
Log.setLevel(logging.DEBUG)
</code></pre>
<p>But I'd like to have this:</p>
<pre><code>Log = logging.getLogger('myLogger')
levels = {'CRITICAL' : logging.critical,
    'ERROR' : logging.error,
    'WARNING' : logging.warning,
    'INFO' : logging.info,
    'DEBUG' : logging.debug
}
level = levels['INFO']
Log.setLevel(level)
</code></pre>
<p>But it doesn't seem to work - it just doesn't log anything.
I'm doing this so that I can set the logging level for a whole bunch of scripts from a variable in a single config file. My apologies if I'm missing something obvious here!</p>
</div>
<div class="post-text" itemprop="text">
<p>You should also be able to do this:</p>
<pre><code>Log = logging.getLogger('myLogger')
level = logging.getLevelName('INFO')
Log.setLevel(level)
</code></pre>
<p>The <code>logging.getLevelName(lvl)</code> function works both ways. I use it, it works (you should check your python implementation though).</p>
<p>This saves you the trouble to maintain your own dictionary, and reduces the possibility of typo errors.</p>
<p>Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>I had problems with python 3 and got this working for me:
<a href="https://docs.python.org/3/howto/logging.html" rel="noreferrer">https://docs.python.org/3/howto/logging.html</a></p>
<pre><code># myapp.py
import logging
import mylib

def main():
    logging.basicConfig(filename='myapp.log', level=logging.INFO)
    logging.info('Started')
    mylib.do_something()
    logging.info('Finished')

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about using <code>getattr</code> on <code>logging</code> module?</p>
<pre><code>import logging
str_level = 'DEBUG'
level = getattr(logging, str_level)
logger = logging.getLogger("my_logger")
logger.setLevel(level)
print(logger.getEffectiveLevel())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>logging.setLevel()</code> takes an int <em>or</em> a str.</p>
<p>So the following works just fine (at least in Python 3.7):</p>
<pre><code>logger = logging.getLogger(__name__)
logger.setLevel("DEBUG")
</code></pre>
</div>
<span class="comment-copy">You should use uppercase in your dict values: <code>ERROR: logging.ERROR</code> etc</span>
<span class="comment-copy">I can't believe it was that simple! I'm embarrassed.</span>
<span class="comment-copy">happens to all of us ;)</span>
<span class="comment-copy">Also, Have a look at the logging documentation on this: <a href="http://docs.python.org/howto/logging.html#logging-levels" rel="nofollow noreferrer">docs.python.org/howto/logging.html#logging-levels</a>. Logging levels are just numeric values.</span>
<span class="comment-copy">This is really helpful. Thanks!</span>
<span class="comment-copy">quote: "In Python versions earlier than 3.4, this function could also be passed a text level, and would return the corresponding numeric value of the level. This undocumented behaviour was considered a mistake, and was removed in Python 3.4, but reinstated in 3.4.2 due to retain backward compatibility."</span>
<span class="comment-copy">+1 I like the way you have all the logging calls within a function definition. This reduces the likelyhood of <a href="https://stackoverflow.com/questions/46356672/">import lock problems with logging</a>.</span>
