<div class="post-text" itemprop="text">
<p>I have a list of strings like this:</p>
<pre><code>['Aden', 'abel']
</code></pre>
<p>I want to sort the items, case-insensitive.
So I want to get:</p>
<pre><code>['abel', 'Aden']
</code></pre>
<p>But I get the opposite with <code>sorted()</code> or <code>list.sort()</code>, because uppercase appears before lowercase.</p>
<p>How can I ignore the case? I've seen solutions which involves lowercasing all list items, but I don't want to change the case of the list items.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following works in Python 2:</p>
<pre><code>sorted_list = sorted(unsorted_list, key=lambda s: s.lower())
</code></pre>
<p>It works for both normal and unicode strings, since they both have a <code>lower</code> method.</p>
<p>In Python 2 it works for a mix of normal and unicode strings, since values of the two types can be compared with each other. Python 3 doesn't work like that, though: you can't compare a byte string and a unicode string, so in Python 3 you should do the sane thing and only sort lists of one type of string.</p>
<pre><code>&gt;&gt;&gt; lst = ['Aden', u'abe1']
&gt;&gt;&gt; sorted(lst)
['Aden', u'abe1']
&gt;&gt;&gt; sorted(lst, key=lambda s: s.lower())
[u'abe1', 'Aden']
</code></pre>
<p>Since python 3.3, there is also the <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="noreferrer"><code>str.casefold</code></a> method that's specifically designed for caseless matching and can be used in place of <code>str.lower</code>:</p>
<pre><code>sorted_list = sorted(unsorted_list, key=lambda s: s.casefold())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = ['Aden', 'abel']
&gt;&gt;&gt; sorted(x, key=str.lower) # Or unicode.lower if all items are unicode
['abel', 'Aden']
</code></pre>
<p>In Python 3 <code>str</code> is unicode but in Python 2 you can use this more general approach which works for both <code>str</code> and <code>unicode</code>:</p>
<pre><code>&gt;&gt;&gt; sorted(x, key=lambda s: s.lower())
['abel', 'Aden']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also try this:</p>
<pre><code>&gt;&gt;&gt; x = ['Aden', 'abel']
&gt;&gt;&gt; x.sort(key=lambda y: y.lower())
&gt;&gt;&gt; x
['abel', 'Aden']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python3 you can use</p>
<pre><code>list1.sort(key=lambda x: x.lower()) #Case In-sensitive             
list1.sort() #Case Sensitive
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I did it this way for Python 3.3:</p>
<pre><code> def sortCaseIns(lst):
    lst2 = [[x for x in range(0, 2)] for y in range(0, len(lst))]
    for i in range(0, len(lst)):
        lst2[i][0] = lst[i].lower()
        lst2[i][1] = lst[i]
    lst2.sort()
    for i in range(0, len(lst)):
        lst[i] = lst2[i][1]
</code></pre>
<p>Then you just can call this function:</p>
<pre><code>sortCaseIns(yourListToSort)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>def cSort(inlist, minisort=True):
    sortlist = []
    newlist = []
    sortdict = {}
    for entry in inlist:
        try:
            lentry = entry.lower()
        except AttributeError:
            sortlist.append(lentry)
        else:
            try:
                sortdict[lentry].append(entry)
            except KeyError:
                sortdict[lentry] = [entry]
                sortlist.append(lentry)

    sortlist.sort()
    for entry in sortlist:
        try:
            thislist = sortdict[entry]
            if minisort: thislist.sort()
            newlist = newlist + thislist
        except KeyError:
            newlist.append(entry)
    return newlist
</code></pre>
<hr/>
<pre><code>lst = ['Aden', 'abel']
print cSort(lst)
</code></pre>
<p>Output</p>
<p><code>['abel', 'Aden']</code></p>
</div>
<span class="comment-copy">This tutorial is very helpful: <a href="https://docs.python.org/3/howto/sorting.html#sortinghowto" rel="nofollow noreferrer">docs.python.org/3/howto/sorting.html#sortinghowto</a></span>
<span class="comment-copy">+1 Correct answer but Python 3 does work since it doesn't have different types as it uses unicode by default.</span>
<span class="comment-copy">@jamylak: Should the answer be edited then, to no longer mention Python 2 or 3?</span>
<span class="comment-copy">I made a clarification. I hope it's clearer now.</span>
<span class="comment-copy">One can avoid the lambda function roundtrip by <b>(Python 3)</b> using the general <a href="https://docs.python.org/3/library/stdtypes.html#str.lower" rel="nofollow noreferrer"><code>str.lower</code></a> function as <code>sorted(lst, key=str.lower)</code> or <b>(Python 2)</b> using the <a href="https://docs.python.org/2/library/string.html#string.lower" rel="nofollow noreferrer"><code>lower</code> method of the <code>string</code> module</a> as <code>sorted(lst, key=string.lower)</code>. One can also use <code>str.lower</code> for strings in Python 2, but would then have to use <code>unicode.lower</code> for <code>unicode</code> objects, whereas <code>string.lower</code> accepts both (which, as you put it, is probably not really a "sane" mode of operation, though).</span>
<span class="comment-copy">Thank you. I know I should have mentioned this before, but I've heard there's a problem with using this method on a unicode string (Py2). Do you know anything about that?</span>
<span class="comment-copy">They are all unicode. Thanks! One more question, how to do it on a list like this: <code>[['Aden'], ['abel']]</code></span>
<span class="comment-copy">Does each list only have one item? If so just modify it a bit to: <code>sorted(x,key=lambda i:i[0].lower())</code></span>
<span class="comment-copy">Well, it might have some other stuff as well, which should not be used for sorting though.</span>
<span class="comment-copy">Nevermind, it appears i was wrong, the sorting does work for a mix of both string and unicode, i was confused with a previous question where tuples were also included in the sort.</span>
<span class="comment-copy">This solution is overkill and unreadable when a one-liner suffices. This might be more acceptable in a language other than Python.</span>
