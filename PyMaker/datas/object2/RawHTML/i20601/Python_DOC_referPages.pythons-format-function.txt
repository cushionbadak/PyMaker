<div class="post-text" itemprop="text">
<p>Recently, I found <code>''.format</code> function very useful because it can improve readability a lot comparing to the <code>%</code> formatting.
Trying to achieve simple string formatting:</p>
<pre><code>data = {'year':2012, 'month':'april', 'location': 'q2dm1'}

year = 2012
month = 'april'
location = 'q2dm1'
a = "year: {year}, month: {month}, location: {location}"
print a.format(data)
print a.format(year=year, month=month, location=location)
print a.format(year, month, location)
</code></pre>
<p>Whilst two first prints do format as I expect (yes, <code>something=something</code> looks ugly, but that's an example only), the last one would raise <code>KeyError: 'year'</code>.
Is there any trick in python to create dictionary so it will automatically fill keys and values, for example <code>somefunc(year, month, location)</code> will output <code>{'year':year, 'month': month, 'location': location}</code>?</p>
<p>I'm pretty new to python and couldn't find any info on this topic, however a trick like this would improve and shrink my current code drastically.</p>
<p>Thanks in advance and pardon my English.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first <code>print</code> should be </p>
<pre><code>print a.format(**data)
</code></pre>
<p>Also, if you are finding some shortcuts, you could write one like, no big difference.</p>
<pre><code>def trans(year, month, location):
    return dict(year=year, month=month, location=location)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>data = {'year':2012, 'month':'april', 'location': 'q2dm1'}
a = "year: {year}, month: {month}, location: {location}"

print a.format(**data)
</code></pre>
<p>..is what you are looking for. It's functionally identical to doing <code>.format(year=data['year'], ...)</code>, or the other examples you gave.</p>
<p>The double-asterix thing is a hard thing to search for, so it's usually referred to as "kwargs". Here's a <a href="https://stackoverflow.com/questions/1769403/understanding-kwargs-in-python">good SO question on this syntax</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>dict()</code> callable:</p>
<pre><code>dict(year=yeah, month=month, location=location)
</code></pre>
<p>When passing keyword arguments it creates a dict containing the elements you specified as kwargs.</p>
<p>If you do not want to specify the argument names, use the positional style of <code>.format()</code>:</p>
<pre><code>&gt;&gt;&gt; a = 'year {0} month {1} location {2}'
&gt;&gt;&gt; print a.format(2012, 'april', 'abcd')
year 2012 month april location abcd
</code></pre>
<p>However, if you try to do something similar to what <a href="http://php.net/compact" rel="nofollow"><code>compact()</code> in PHP</a> does (create a dict mapping variable names to its values without specifying name and variable separately), please don't. It just results in ugly unreadable code and would require nasty hacks anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could pass <code>locals()</code>:</p>
<pre><code>a.format(**locals())
</code></pre>
<p>Of course, this has issues: you will have to pass everything in locals, and it can be difficult to understand the effect of renaming or removing a variable.</p>
<p>A better way would be:</p>
<pre><code>a.format(**{k:v for k,v in locals() if k in ('year', 'month')})
# or; note that if you move the lambda expression elsewhere, you will get a different result
a.format(**(lambda ld = locals(): {k:ld[k] for k in ('year', 'month')})())
</code></pre>
<p>But this is not any more concise, unless you wrap it up with a function (which must of course take a dict parameter).</p>
</div>
<div class="post-text" itemprop="text">
<p>As of <a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">Python 3.6</a>, you can also use the new  <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer"><strong>Formatted string literals (f-strings)</strong></a>, which you can use with <strong>variables</strong>:</p>
<pre><code>year = 2012
month = 'april'
location = 'q2dm1'
a = f"year: {year}, month: {month}, location: {location}"
print(a)
</code></pre>
<p>or a <strong>dictionary</strong>:</p>
<pre><code>data = {'year': 2012, 'month': 'april', 'location': 'q2dm1'}
a = f"year: {data['year']}, month: {data['month']}, location: {data['location']}"
print(a)
</code></pre>
<p>Note the <code>f</code> prefix before the string literal.</p>
<blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><strong>PEP 498: Formatted string literals</strong></a>:</p>
<p>Formatted string literals are prefixed with 'f' and are similar to the
  format strings accepted by str.format(). They contain replacement
  fields surrounded by curly braces. The replacement fields are
  expressions, which are evaluated at run time, and then formatted using
  the format() protocol:</p>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; name = "Fred"
&gt;&gt;&gt; f"He said his name is {name}."
'He said his name is Fred.'
&gt;&gt;&gt; width = 10
&gt;&gt;&gt; precision = 4
&gt;&gt;&gt; value = decimal.Decimal("12.34567")
&gt;&gt;&gt; f"result: {value:{width}.{precision}}"  # nested fields
'result:      12.35'
</code></pre>
<p>...</p>
</blockquote>
</div>
<span class="comment-copy">Seems there's no way to shrink this repeating code:) Function is good and it was what i did, actually, but later i found it hard to sustain because with lots of arguments i needed to change code in several places, which turned out to be even worse than actually creating dict by hands.</span>
<span class="comment-copy">@duke_nukem yes it depends on your actual usage. The code is fine and the format api is clear enough. If you what to achieve something like <code>format(*args, **kwargs)</code>, it could be done also, but I don't think it could make things easier.</span>
<span class="comment-copy">Yes, i'm aware of dict() but i'm trying to avoid unnecessary code and shrink it down a bit. .format can accept your option without dict() by the way. Thank you.</span>
<span class="comment-copy">Thanks, it's close to what i need, however with 10-12 arguments  it becomes pretty hard to navigate through indices.</span>
<span class="comment-copy">Well in this case you are supposed to use the dict syntax. However, depending on what you want to do, consider using a real template engine such as <a href="http://jinja.pocoo.org/" rel="nofollow noreferrer">jinja2</a>.</span>
<span class="comment-copy">Thanks for the template direction.</span>
<span class="comment-copy">Also, just adding, <code>dict</code> is not a function. <code>dict</code> is a type.</span>
