<div class="post-text" itemprop="text">
<p>There is an extra space in the output of a string. This is the section of the code where it happens. It happens in the string of the function, nameConfirmation().</p>
<pre><code>def chooseName():
    name = ""
    name = raw_input("Let's begin with your name. What is it? ")

    return name

def nameConfirmation():
    name = chooseName()
    print ("Right... So your name is", name,".")
</code></pre>
<p>This is the output it gives.</p>
<pre><code>Right... So your name is Raven .
</code></pre>
<p>How do I get rid of the space in between the name and the punctuation?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can append string with <code>+</code>.</p>
<pre><code>print ("Right... So your name is", name + ".")
</code></pre>
<p>Output:</p>
<pre><code>Right... So your name is Raven.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use:</p>
<pre><code>print ("Right... So your name is", name,".")
</code></pre>
<p>You will notice that the output is:</p>
<pre><code>Right... So your name is Raven .
</code></pre>
<p>Look at <code>is</code> and <code>name</code> (<code>Raven</code>). You can note in the output an space (<code>is Raven</code>), that is because <code>print()</code> have a default argument called <code>sep</code> an by default it's <code>print("Right... So your name is", name,".", sep = ' ')</code>. That argument is an string that it's added at the end of each piece of string concatenated with a coma <code>,</code> in the <code>print</code> function.<br/>
So if you do <code>print('A','B')</code> it will be <code>A B</code>, because when you concatenate <code>A</code> and <code>B</code>, <code>print</code> will add  <code>' '</code> (and space) as glue.<br/>
You can configure it: <code>print('A','B', sep='glue')</code> would print <code>AglueB</code>!</p>
<p>To solve your problem you can do two options.</p>
<ul>
<li>Change <code>sep = ''</code> and add an space  after <code>is</code>: <code>print ("Right... So your name is ", name,".", sep='')</code></li>
<li>Or, concatenate using <code>+</code> the last two strings: <code>print ("Right... So your name is", name + ".")</code></li>
</ul>
<p>Also there are a lot of another ways like: (I ordered them by worst to best in <em>my subjetive opinion</em>...)</p>
<ul>
<li><code>print("Right... So your name is %s." % name)</code>.</li>
<li><code>print("Right... So your name is {}.".format(name))</code>.</li>
<li><code>print(f"Right... So your name is {name}.")</code></li>
</ul>
<p>Link with documentation:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/inputoutput.html#fancier-output-formatting" rel="nofollow noreferrer">Python Official Documentation</a> </li>
<li><a href="https://www.python-course.eu/python3_formatted_output.php" rel="nofollow noreferrer">Python 3 Course</a> (Use of <code>sep</code> and <code>,</code>, <code>+</code>, <code>%s</code>, <code>.format()</code>, <code>f-string</code> and use of string class)</li>
<li><a href="https://pyformat.info/" rel="nofollow noreferrer">PyFormat</a> (Basic and advanced use of <code>%s</code>, <code>%d</code>, <code>.format()</code>, value conversion, <code>datetime</code>, ).</li>
</ul>
<p><strong>P.S</strong>: This isn't part of the answer, it's just a note.</p>
<ul>
<li><code>print (something)</code> don't need the space --&gt; <code>print(something)</code>.</li>
<li>Futhemorer <code>sep = ' '</code> there is also called <code>end = '\n'</code> that determine the end of a print (<code>\n</code> = new line).</li>
</ul>
<p><strong>P.S 2</strong>: Thanks <a href="https://stackoverflow.com/a/47686784/7655838">Ouss</a> for the idea of add some documentations links. I've just learnt that you can do <code>print(%(key)s % mydict)</code>!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the string variable substitution <code>%s</code>:</p>
<pre><code>def nameConfirmation():
    name = chooseName()
    print ("Right... So your name is %s." % name)
</code></pre>
<p>For more on string manipulation and formatting in Python3, Check the following:</p>
<p><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-string-functions-in-python-3" rel="nofollow noreferrer">https://www.digitalocean.com/community/tutorials/an-introduction-to-string-functions-in-python-3</a>
<a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-working-with-strings-in-python-3" rel="nofollow noreferrer">https://www.digitalocean.com/community/tutorials/an-introduction-to-working-with-strings-in-python-3</a>
<a href="https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3" rel="nofollow noreferrer">https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Each argument passed through the print command is automatically separated by a space.  I see you're in python 2, and I use python 3, so I'm not sure if this solution will work, but you can try doing this:</p>
<pre><code>print ("Right... So your name is ", name,".",sep='')
</code></pre>
<p>This basically (assuming it works in python 2 as well) changes the separation between arguments to no space instead of 1 space.</p>
</div>
<div class="post-text" itemprop="text">
<p>The comma indicates a continuation on the same line with a space in between (you'll notice there's a space between "is" and "Raven", even though neither string has one in there). If you want to remove the spaces, the usual way to concatenate strings is with a plus</p>
<p><strong>Edit</strong>: Plus, not ampersand... stupid me</p>
</div>
<span class="comment-copy">Set the <code>sep</code> parameter of the <code>print()</code> function to <code>''</code> but then you have to add a space after "is"</span>
<span class="comment-copy">Same reason there's a space between <code>is</code> and <code>Raven</code>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/255147/how-do-i-keep-python-print-from-adding-newlines-or-spaces">How do I keep Python print from adding newlines or spaces?</a></span>
<span class="comment-copy">With raw_input, would it be necessary to use str(name) in order to concatenate? I'm not on a computer or I'd check.</span>
<span class="comment-copy">@JosephRyle I verified with python2.7 that <code>str()</code> is not needed.</span>
<span class="comment-copy">Thank you. This worked perfectly. I just haven't learned that in my class yet.</span>
<span class="comment-copy">@Destiny It is also a useful trick that can be applied in C++. Welcome!</span>
<span class="comment-copy">I like your answer. Very informative and complete. Please consider adding some links to references/tutorials on strings manipulation and formatting in python3 at the end of the answer!</span>
<span class="comment-copy">@Ouss, ok, I will start searching!</span>
<span class="comment-copy">If <code>print</code> function is enabled, the <code>sep</code> parameter already works in 2.6</span>
<span class="comment-copy">Maybe you are mixing up languages, an ampersand won't work here in Python</span>
