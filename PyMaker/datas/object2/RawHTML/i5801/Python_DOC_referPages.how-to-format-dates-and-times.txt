<div class="post-text" itemprop="text">
<p>I'm trying to get make a comments section for a website with the backend written in python. As of now, everything works fine except I cannot figure out how to format the date and time the way I want.</p>
<p>What I am trying to have at the time of posting is either of these:</p>
<ol>
<li><code>Posted on Tue, 06/12/18 at - 11:20</code></li>
</ol>
<p>or</p>
<ol start="2">
<li><code>Posted on 06/12/18 at - 11:21</code></li>
</ol>
<p>Currently, what I have when the method is called is this:</p>
<pre><code>import time
from datetime import *

time = ("Posted on " + str(datetime.now().day) + "/"
        + str(datetime.now().month) + " at: " + str(datetime.now().hour)
        + ":" + str(datetime.now().minute))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>datetime.datetime.strftime()</code> to build any format you want:</p>
<pre><code>import datetime

time = datetime.datetime.now().strftime("Posted on %d/%m/%y at - %H:%M")

print(time)  # Posted on 07/12/17 at - 00:29
</code></pre>
<p>Read up more on special classes you can use when building your date: <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">strftime() and strptime() Behavior</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>datetime.datetime.now().strftime('%d/%m/%y at - %H:%M')
'06/12/17 at - 16:29'
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer"><code>strftime()</code> and <code>strptime()</code> Behavior</a></span>
<span class="comment-copy">And, don't forget that around the world  (which is your audience) there are confusingly different formats for numeric dates. Your example could be the 6th of December or the 12th of June. Always use a text name for the month.</span>
<span class="comment-copy">@barny: Or ISO-8601 format (YYYY-MM-DD) which is unambiguous.</span>
<span class="comment-copy">I may be pedantic but even I wouldn't argue that 2017-12-06 isn't the 6th December!</span>
<span class="comment-copy">@martineau: To my knowledge, there is no culture/locale that orders it YYYY-DD-MM. Sure, nothing <i>prevents</i> you from doing that (aside from common decency), but there is no cultural history behind YYYY-DD-MM, so the ambiguity just isn't there like it is for DD/MM/YYYY (European) vs. MM/DD/YYYY (USA). If you see ####-##-## with no context whatsoever, assuming it's YYYY-MM-DD will be correct 99.9999% of the time.</span>
<span class="comment-copy">Ah, I can tell that this was posted on 12th July. Or was it?</span>
<span class="comment-copy">@barny - complain to the OP, he wanted a dd/mm/yy format based on what he attempted to do.</span>
<span class="comment-copy">In Ireland, that is how we format it! Also, I have tried this already but it yields this error: type object 'datetime.datetime' has no attribute 'datetime'</span>
<span class="comment-copy">@Shadowranger made that very relevant comment. Not quite sure what you mean, we're talking about how you present dates and ISO8601 is certainly a fairly unambiguous way of doing it: 2017-12-06 is much better than 06/12/17. But arguably for an English-reading audience "6th December 2017" is completely crystal clear. However if you were exporting dates into e.g. a spreadsheet then ISO is the way to go IMO.</span>
<span class="comment-copy">While adding to best practices, if you're going to store it somewhere you might want to use <code>datetime.datetime.utcnow()</code> instead of <code>datetime.datetime.now()</code> to obtain UTC datetime. That way you can adjust the actual date to your users' timezones.</span>
<span class="comment-copy">Hang on, is that 6th December or 12th June?</span>
<span class="comment-copy">@barny well it's now so...</span>
<span class="comment-copy">@barny  it is <code>%d/%m/%y</code>, so it is December 6th</span>
<span class="comment-copy">Really? I live in the United States and 06/12/17 is 12th June.</span>
<span class="comment-copy">@barny: Mind you, if you're doing internet presentation, you might just let JavaScript do the work, and call <code>.toLocaleString()</code> on the <code>Date</code> client-side, letting the browser use the appropriate formatting based on the user's locale.</span>
