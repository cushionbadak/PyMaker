<div class="post-text" itemprop="text">
<p>I am confused about the following:</p>
<pre><code>&gt;&gt;&gt; 1,2 == 1,2
(1, False, 2)
</code></pre>
<p>The <code>==</code> operator should return only a bool (or at least I thought so).
I would have expected to have, <code>(True, True)</code> assuming that the line would have been processed like <code>a,b = 1,2</code> but performing comparison instead of assignment. Or, to have an error. But definitely not <code>(1, False, 2)</code>.</p>
<p>Can anyone explain what is going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>1,2 == 1,2 
</code></pre>
<p>is evaluated as a three element tuple that contains <code>1</code>, <code>2 == 1</code> and <code>2</code> respectively. You need to use a couple of parentheses here:</p>
<pre><code>(1, 2) == (1, 2)
</code></pre>
<p>This is stated in the <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">Language Reference</a>:</p>
<blockquote>
<p>Except when part of a list or set display, an expression list
  containing at least one comma yields a tuple. The length of the tuple
  is the number of expressions in the list. The expressions are
  evaluated from left to right.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>@alec_djinn</p>
<p>comparison operator work If the values of two operands are equal, then the condition becomes true.</p>
<p>you are trying to compare wrong data type 1,2 is not valid.</p>
<p>try '1,2' == '1,2' will give you correct results.</p>
<p>1,2 is not single argument.</p>
</div>
<span class="comment-copy"><code>2 == 1</code> -&gt; <code>False</code>. See now what happens?</span>
<span class="comment-copy">You're defining a tuple with expressions <code>1</code>, <code>(2 == 1)</code>, and <code>2</code>.</span>
<span class="comment-copy">@OliverCharlesworth, Thanks! That clarifies, I didn't know that was a valid way of defining tuples.</span>
<span class="comment-copy">Tuples, apart from the empty tuple are defined by the commas. You only need to put parentheses round a tuple when it would otherwise be ambiguous (or for the empty tuple which doesn't have any commas).</span>
<span class="comment-copy">That is indeed an interesting case of unexpected operator execution order. Although I guess in most cases it's the preferable way.</span>
<span class="comment-copy"><code>1,2</code> is a valid value, producing the same tuple as  <code>(1,2)</code>. The poster's problem is that the comma has lower precedence than the equality test, so the middle terms are compared to each other instead of being grouped into separate triples before comparison.</span>
