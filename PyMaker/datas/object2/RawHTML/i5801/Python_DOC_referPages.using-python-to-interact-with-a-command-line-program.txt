<div class="post-text" itemprop="text">
<p>(new to python so bear with me...)</p>
<p>I have a simple java jar file that when executed, it asks the user for some basic data in a command prompt and then executes an operation based on this data.
I want to write a simple python script that will automate the execution of this jar file without the need for the user to supply the data, meaning writing the data inside the script and basically interact with the java application when asked by the command prompt.</p>
<p>Think of a java file that is executed by running Java -jar someJavaApp.jar
Then a command prompt is asking for you name. you enter it and press enter, then it asks for your last name, you enter it and press enter and then the java app executes an arbitrary operation based on the input.</p>
<p>I want to have a python script that I can execute the java app several times, each time with different inputs taken from a file or something similar.
Any help will be appreciated.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>Popen</code> from the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module.</p>
<p>Here's a simple example, first script to prompt for input and return some output, <code>test_input.py</code>:</p>
<pre><code>first = input("Enter your first name: ")
second = input("Enter your second name: ")
print(first+second)
</code></pre>
<p>Then the script to call the first script:</p>
<pre><code>import subprocess

values = (("A", "B"), ("C", "D"), ("E", "F"))

command = "python test_input.py"
for first, second in values: 
    # lazy use of universal_newlines to prevent the need for encoding/decoding
    p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True, universal_newlines=True)  
    output, err = p.communicate(input="{}\n{}\n".format(first, second))
    # stderr is not connected to a pipe, so err is None
    print(first, second, "-&gt;", end="")
    # we just want the result of the command
    print(output[output.rfind(" "):-1])  # -1 to strip the final newline
</code></pre>
<p>This will print:</p>
<pre><code>A B -&gt; AB
C D -&gt; CD
E F -&gt; EF 
</code></pre>
<p>If you have problems getting it working with your java program, a quick solution may be to specify <code>shell=True</code> in the <code>Popen</code> function call. But you'll want to be aware of the <a href="https://docs.python.org/3/library/subprocess.html#security-consideratio" rel="nofollow noreferrer">security considerations</a>.</p>
</div>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/2/library/subprocess.html#popen-objects" rel="nofollow noreferrer">Popen</a>, or perhaps <a href="https://pexpect.readthedocs.io/en/stable/" rel="nofollow noreferrer">Pexpect</a>.</span>
<span class="comment-copy">I would suggest looking at something like <a href="https://pexpect.readthedocs.io/en/stable/" rel="nofollow noreferrer">Pexpect</a>.</span>
<span class="comment-copy">Also check out the other functions in <code>subprocess</code>, e.g. <code>call</code>, <code>check_output</code>, <code>check_call</code>, and if you're using Python 3.5 or newer, <code>run</code>. They might fit your needs better, and they're just generally easier to use than <code>Popen</code> in my opinion</span>
