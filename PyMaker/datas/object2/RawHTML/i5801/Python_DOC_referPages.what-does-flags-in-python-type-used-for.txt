<div class="post-text" itemprop="text">
<p>I have been read pickle source code recently.</p>
<p>The following code in <code>copy_reg</code> make me confused:</p>
<pre><code>_HEAPTYPE = 1&lt;&lt;9

def _reduce_ex(self, proto):
    assert proto &lt; 2
    for base in self.__class__.__mro__:
        if hasattr(base, '__flags__') and not base.__flags__ &amp; _HEAPTYPE:
            break
    else:
        base = object # not really reachable
    if base is object:
        state = None
</code></pre>
<p>So what does <code>__flags__</code> using for?</p>
<p>I found it is defined in <code>type</code> object:</p>
<pre><code>type.__flags__ = 2148423147
</code></pre>
<p>I was tried to search it in the official doc, but nothing was found.</p>
<p>But interesting thing is that <code>__class__.__flags__ &amp; _HEAPTYPE</code> is always <code>0</code> when the <code>__class__</code> is python internal type. And the result will be <code>1</code> when <code>__class__</code> is a subclass of python internal type.</p>
<p>Can anyone help me to solve this puzzle?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__flags__</code> is a wrapper, <a href="https://github.com/python/cpython/blob/v3.6.3/Objects/typeobject.c#L340-L351" rel="nofollow noreferrer">to access CPython type object structure member <code>tp_flags</code></a>, constants used to compose this flag <a href="https://github.com/python/cpython/blob/v3.6.3/Include/object.h#L596-L661" rel="nofollow noreferrer">defined in object.h</a>, following is quoted from the source:</p>
<blockquote>
<p>Type flags (tp_flags)
  These flags are used to extend the type structure in a backwards-compatible
  fashion. Extensions can use the flags to indicate (and test) when a given
  type structure contains a new feature. The Python core will use these when
  introducing new functionality between major revisions (to avoid mid-version
  changes in the PYTHON_API_VERSION).</p>
</blockquote>
<p>See more detail on <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_flags" rel="nofollow noreferrer">python document on <code>tp_flags</code></a>.</p>
<blockquote>
<p>But interesting thing is that <strong>class</strong>.<strong>flags</strong> &amp; _HEAPTYPE is always 0 when the <strong>class</strong> is a python internal type. And the result will be 1 when <strong>class</strong> is a subclass of python internal type.</p>
</blockquote>
<p>Subclass of python built-in type, like other user defined type, allocated on heap with <code>PyType_GenericAlloc()</code>.</p>
<hr/>
<p>to break down <code>type.__flags__</code>:</p>
<pre><code>import re

def flags_to_name(type_obj):
    tp_flag_consts = {}        
    with open('/path/to/Include/object.h') as f:
        for l in f:
            m = re.search(r'^#define (Py_TPFLAGS_\w+)\s+\(.+?&lt;&lt; (\d+)\)', l.strip())
            if m:
                tp_flag_consts[int(m.group(2))] = m.group(1)
    bin_str = bin(type_obj.__flags__)[2:][::-1]
    return ', '.join(tp_flag_consts[n] for n, c in enumerate(bin_str) if c == '1')

print(flags_to_name(type))
</code></pre>
<p>yields:</p>
<pre><code>Py_TPFLAGS_BASETYPE, Py_TPFLAGS_READY, Py_TPFLAGS_HAVE_GC, Py_TPFLAGS_HAVE_VERSION_TAG, Py_TPFLAGS_VALID_VERSION_TAG, Py_TPFLAGS_TYPE_SUBCLASS
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__flags__</code> is to be viewed as binary, if you want to see the flags.</p>
<p>These type flags are defined <a href="https://github.com/python/cpython/blob/31a8393cf6a74c870c3484dd68500619f6232c6d/Include/object.h#L598" rel="nofollow noreferrer">here</a> in Python's source code.</p>
</div>
