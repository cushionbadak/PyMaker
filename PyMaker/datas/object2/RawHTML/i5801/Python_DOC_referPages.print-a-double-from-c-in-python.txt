<div class="post-text" itemprop="text">
<p>I am sending a double value from C through TCP using lwIP. To accomplish that, I am using an union between a double and one string of 8 bytes (because the lwIP's function to send data is of type 'char *'). Here te code:</p>
<pre><code>void process_echo_request(void *p) {
int sd = (int)p;
int RECV_BUF_SIZE = 2048;
char recv_buf[RECV_BUF_SIZE];
int n, nwrote;
union {
    double dval;
    char   sval[sizeof(double)];
    } data_to_send;

data_to_send.dval = 1e+23;

while (1) {
    /* read a max of RECV_BUF_SIZE bytes from socket */
    if ((n = read(sd, recv_buf, RECV_BUF_SIZE)) &lt; 0) {
        xil_printf("%s: error reading from socket %d, closing socket\r\n", __FUNCTION__, sd);
        break;
    }

    /* break if the recved message = "quit" */
    if (!strncmp(recv_buf, "quit", 4))
        break;

    /* break if client closed connection */
    if (n &lt;= 0)
        break;

    data_to_send.dval += 1e+23;
    /* handle request */
    if ((nwrote = write(sd, data_to_send.sval, 8)) &lt; 0) {
        xil_printf("%s: ERROR responding to client echo request. received = %d, written = %d\r\n",
                __FUNCTION__, n, nwrote);
        xil_printf("Closing socket %d\r\n", sd);
        break;
    }
}

/* close connection */
close(sd);
vTaskDelete(NULL);
</code></pre>
<p>I am trying to read from a Python script, but I fail on get the double value. The code:</p>
<pre><code>#!/usr/bin/env python

import socket
from ctypes import *

TCP_IP = '192.168.0.10'
TCP_PORT = 1000
BUFFER_SIZE = 8

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((TCP_IP, TCP_PORT))
s.send(" ")
data = s.recv(BUFFER_SIZE)
s.close()

print float(data)
</code></pre>
<p>It fails with the message <code>ValueError: could not convert string to float: �J��-�D</code>
I know, is because the string is not a literal representation of a real value. Any idea? I need the real (double) value.</p>
<p>For more information, the lwIP echo server is running in a Zynq 7000 FPGA+SoC. I am running the Python code from a Debian 8. The double value is a 64 bit temperature for a sensor.</p>
<p>-- EDIT --
The final working code is:</p>
<pre><code>#!/usr/bin/env python

import socket
from struct import *

TCP_IP = '192.168.0.10'
TCP_PORT = 1000
BUFFER_SIZE = 8

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((TCP_IP, TCP_PORT))
s.send(" ")
data = s.recv(BUFFER_SIZE)
s.close()

print unpack("d",data)[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you're recieving the binary representation of the double, not the string one.</p>
<p>You have to unpack it using <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module and the <code>double</code> specifier which is <code>d</code>. <code>struct.unpack</code> returns a tuple, so take first &amp; only value to get your <code>float</code></p>
<pre><code>my_value = struct.unpack("d",data)[0]
</code></pre>
<p>note that you can even fix the endianness with <code>&lt;</code> or <code>&gt;</code>, not necessary if you're on the same machine or CPU type for both programs.</p>
</div>
<span class="comment-copy">Did you try decoding the string before converting it?</span>
<span class="comment-copy">could you be potentially looking for <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">7.1. struct — Interpret bytes as packed binary data</a>?</span>
<span class="comment-copy">No. I will try, but could you provide example code?</span>
<span class="comment-copy">It works! :-D thanks a lot. I will add the final working code</span>
