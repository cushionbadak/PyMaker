<div class="post-text" itemprop="text">
<p>I have created a custom class, and I want to use the <code>**</code> operator on a instance for passing it to a function. I have already defined <code>__getitem__</code> and <code>__iter__</code>, but when I try <code>f(**my_object)</code>, I'm getting </p>
<pre><code>`TypeError: argument must be a mapping, not 'MyClass'`
</code></pre>
<p>What are the minimum required methods so that the custom class qualifies as a mapping?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>**</code> is not an operator, it is part of the <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer"><em>call</em> syntax</a>:</p>
<blockquote>
<p>If the syntax <code>**expression</code> appears in the function call, expression must evaluate to a <a href="https://docs.python.org/3/glossary.html#term-mapping" rel="nofollow noreferrer">mapping</a>, the contents of which are treated as additional keyword arguments.</p>
</blockquote>
<p>So if your class implements the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer"><code>Mapping</code> methods</a>, then you should be good to go. You'll need more than just <code>__getitem__</code> and <code>__iter__</code> here. </p>
<p>A <code>Mapping</code> is a <code>Collection</code>, so must define at least <code>__getitem__</code>, <code>__iter__</code>, and <code>__len__</code>; in addition most of <code>__contains__</code>, <code>keys</code>, <code>items</code>, <code>values</code>, <code>get</code>, <code>__eq__</code>, and <code>__ne__</code> would be expected. If your custom class directly inherits from <code>collections.abc.Mapping</code>, you only need to implement the first three.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from collections.abc import Mapping
&gt;&gt;&gt; class DemoMapping(Mapping):
...     def __init__(self, a=None, b=None, c=None):
...         self.a, self.b, self.c = a, b, c
...     def __len__(self): return 3
...     def __getitem__(self, name): return vars(self)[name]
...     def __iter__(self): return iter('abc')
...
&gt;&gt;&gt; def foo(a, b, c):
...     print(a, b, c)
...
&gt;&gt;&gt; foo(**DemoMapping(42, 'spam', 'eggs'))
42 spam eggs
</code></pre>
<p>If you run this under a debugger, you'll see that Python calls the <code>.keys()</code> method, which returns a dictionary view, which then delegates to the custom class <code>__iter__</code> method when the view is iterated over. The values are then retrieved with a series of <code>__getitem__</code> calls. So for your specific case, what was missing was the <code>.keys()</code> method.</p>
<p>In addition, note that Python may enforce that the keys are strings!</p>
<pre><code>&gt;&gt;&gt; class Numeric(Mapping):
...     def __getitem__(self, name): return {1: 42, 7: 'spam', 11: 'eggs'}[name]
...     def __len__(self): return 3
...     def __iter__(self): return iter((1, 7, 11))
...
&gt;&gt;&gt; dict(Numeric())
{1: 42, 7: 'spam', 11: 'eggs'}
&gt;&gt;&gt; def foo(**kwargs): print(kwargs)
...
&gt;&gt;&gt; foo(**Numeric())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: foo() keywords must be strings
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">Emulating container types</a></p>
<blockquote>
<p>The first set of methods is used [...] to emulate a mapping...</p>
<p>It is also recommended that mappings provide the methods <code>keys()</code>, <code>values()</code>, <code>items()</code>, <code>get()</code>, <code>clear()</code>, <code>setdefault()</code>, <code>pop()</code>, <code>popitem()</code>, <code>copy()</code>, and <code>update()</code> behaving similar to those for Python’s standard dictionary objects.</p>
<p>It is recommended that [...] mappings [...] implement the <code>__contains__()</code> method to allow efficient use of the in operator...</p>
<p>It is further recommended that [...] mappings [...] implement the <code>__iter__()</code> method to allow efficient iteration through the container</p>
</blockquote>
</div>
<span class="comment-copy"><code>**</code> is <i>not an operator</i>. It is part of the call syntax. What did you expect to happen?</span>
<span class="comment-copy">Easiest way to make this work is to inherit from <code>dict</code>.</span>
<span class="comment-copy">I expect it to unpack my object, just like it does with a  <code>dict</code>. But what are the methods the object must implement to achieve that?</span>
<span class="comment-copy">Your class needs to emulate a mapping-like object. As @kindall already said, inheriting from <code>dict</code> would probably be the simplest solution.</span>
<span class="comment-copy">Could you present a single rational argument for a brutal deleting almost all (info) text from <a href="https://stackoverflow.com/questions/tagged/parallelism-amdahl">parallelism-amdahl</a> which has excluded additional details on both the original steps, on which Dr. Gene M. AMDAHL has formulated his observations on improved process-scheduling and the cost/effect factors of re-designing pure-[SERIAL]-process into a multi-core executed, [CONCURRENT]-process scheduling, by using some additional programming measures? &gt;&gt;&gt; <a href="https://stackoverflow.com/revisions/18374629/3">stackoverflow.com/revisions/18374629/3</a> <b>Has any deleting of facts ever improved a rigorous knowledge building, dear censoring author?</b></span>
<span class="comment-copy">@user3666197 tag wikis are not meant to share encyclopaedic scholarly knowledge. They are there to share how the tag is used on SO and as a pointer for further info. Put edits like yours towards Wikipedia instead please.</span>
<span class="comment-copy">@user3666197 Also see <a href="https://meta.stackoverflow.com/questions/360170/odd-looking-recent-revision-of-tagparallelism-amdahl-tag-wiki" title="odd looking recent revision of tagparallelism amdahl tag wiki">meta.stackoverflow.com/questions/360170/…</a>, where a community member raised an issue with your edit.</span>
<span class="comment-copy">Many of those are for mutable mappings only; a <i>call</i> won't need to mutate the mapping.</span>
<span class="comment-copy">Which methods does "the first set of methods"  refer to??</span>
<span class="comment-copy">The ones in the documentation linked to.</span>
