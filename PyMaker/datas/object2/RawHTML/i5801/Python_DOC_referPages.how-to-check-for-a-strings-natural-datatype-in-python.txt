<div class="post-text" itemprop="text">
<p>I have a user inputting arguments to the command line when running a python3 script, and I wish to check whether specific arguments are floats, ints, booleans, or strings. I'm familiar with the errors that are thrown when a string like 'car' is cast to an int using the int() function, and am also familiar with using a try/except block to attempt to cast a string to an int, and if this is unsuccessful, how to map error messages to helpful output to the user. I've also seen <a href="https://stackoverflow.com/questions/36467619/smart-type-casting-in-python">this</a> previous question, which will probably do the job. Was just wondering if there had been any new development.</p>
<p>Not sure if this is possible, but looking for a smart type() function that could operate as such:</p>
<pre><code>#!/usr/bin/env python3

import sys

smarttype(sys.argv[-1])
</code></pre>
<p>and is capable of handling the following kinds of inputs:</p>
<pre><code>./script.py 50
./script.py True
./script.py 50.0
./script.py run
</code></pre>
<p>and output:</p>
<pre><code>int
bool
float
str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval</a> to parse “elementary” data types:</p>
<pre><code>type(ast.literal_eval('50')) # outputs int
</code></pre>
<p>You need however a set of quotes to mark something as a string (otherwise every input could be taken as a string):</p>
<pre><code>type(ast.literal_eval('run')) # error
type(ast.literal_eval('"run"')) # string
</code></pre>
<p>If you want to allow unqouted strings you could do the following:</p>
<pre><code>def parse_data(x):
    """Takes a string x and returns the "value" of x"""
    try:
        return ast.literal_eval(x)
    except (ValueError, SyntaxError):
        return x
</code></pre>
</div>
<span class="comment-copy">ah, you're right, thanks for the response!</span>
<span class="comment-copy">@wonce Nice answer, but how would it handle str like <code>./script.py run</code> ?</span>
<span class="comment-copy">hmm, why would it not automatically label run as a string?</span>
<span class="comment-copy">I extended my answer to cover this</span>
