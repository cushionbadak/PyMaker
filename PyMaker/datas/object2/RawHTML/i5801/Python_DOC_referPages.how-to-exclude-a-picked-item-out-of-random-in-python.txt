<div class="post-text" itemprop="text">
<p>Thanks for the kind responses that you have given us. I really appreciate it lad. I really love you stackoverflow. We have reached a pretty good grade thanks to everyone. I really appreciate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solutions using <code>del</code> suggested in the comments will force you to find the index of the randomly picked object.</p>
<p>Instead, you can simply keep a reference to the picked item and use <code>remove</code> (that accepts the object itself and not its index in the list) to delete it from the list:</p>
<pre><code>for i in range(x):
    z_pick = random.choice(z)
    z.remove(z_pick)
    y_pick= random.choice(y)
    y.remove(y_pick)
    print(z_pick, "fick", y_pick)
</code></pre>
<p>You just need to make sure that <code>x</code> is larger than the length of the shortest list, otherwise you will get a <code>ValueError</code> exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>Add the chosen item to a <code>set</code> and resample if the thing is already there. This way you don't have to delete anything, just grow the list of already seen items.</p>
<p>You can also modify it to a dictionary in case you need to keep a count of how many of each item has been chosen already.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Another approach:</strong> shuffle the list and use <code>zip</code> instead of randomly picking one name.</p>
<pre><code>random.shuffle(z)
random.shuffle(y)
for z_pick, y_pick in zip(z, y):
    print(z_pick, "fick", y_pick)
</code></pre>
<p><strong>What does this code ?</strong> </p>
<ul>
<li><p><code>random.shuffle</code> shuffles the list inplace, so instead of randomly iterating through the list, you just have to iterate through a shuffled list.  </p></li>
<li><p><code>zip</code> creates a iterator that jointly iterates on both list, and stop whenever one list is over, so you don't have to care about the length difference between <code>z</code> and <code>y</code>.</p></li>
</ul>
</div>
<span class="comment-copy">You could make a copy of the list, remove the item using <code>del</code> and then do your sample.</span>
<span class="comment-copy">Think about how you could use <a href="https://docs.python.org/3/tutorial/datastructures.html#the-del-statement" rel="nofollow noreferrer"><code>del</code></a>.</span>
