<div class="post-text" itemprop="text">
<p>I intend to get the <code>n</code> smallest numbers in a list but keep the numbers in the same order they appear in the list. For example:</p>
<p>This is my list:</p>
<pre><code>A = [1, 3, 4, 6, 7, 6, 8, 7, 2, 6, 8, 7, 0]
</code></pre>
<p>I like to get the first three lowest numbers as it has been ordered in the first list:</p>
<pre><code>[1, 2, 0]
</code></pre>
<p>I do not want to sort the result as:</p>
<pre><code>[0, 1, 2]
</code></pre>
<p>I have tried:</p>
<pre><code>heapq.nsmallest(3,A)
</code></pre>
<p>but i wonder if it is possible to retain this list as:[1, 2, 0]</p>
<p>By the way, I'm not a Python coder so thanks for the help in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3.6/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer"><code>heapq.nsmallest()</code></a> to get the <code>n</code> smallest elements from the list. Then use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to create a <em>multiset</em> from that list which you can use to check which elements from the original list to include in the result, e.g.</p>
<pre><code>&gt;&gt;&gt; from heapq import nsmallest
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; A = [1, 3, 4, 6, 7, 6, 8, 7, 2, 6, 8, 7, 0]
&gt;&gt;&gt; n = 3    
&gt;&gt;&gt; c = Counter(nsmallest(n, A))
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for elem in A:
...     if c.get(elem, 0):
...         result.append(elem)
...         c[elem] -= 1
... 
&gt;&gt;&gt; result
[1, 2, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>new_a = []
A=[1, 3, 4, 6, 7, 6, 8, 7, 2, 6, 8, 7, 0]
for a in A:
   if a not in new_a:
      new_a.append(a)
new_a = [i for i in new_a if i in sorted(new_a)[:3]]
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 0]
</code></pre>
</div>
<span class="comment-copy">What have you tried so far? This isn't a homework completion website.</span>
<span class="comment-copy">This is very inefficient as 1) <code>sorted()</code> is called for each item in <code>A</code> 2) The <code>i in sorted()</code> check becomes slow as <code>n</code> grows.</span>
<span class="comment-copy">...and in fact incorrect: consider the case when  <code>A = [0, 0, 0, 0, 1, 1, 1], n = 5</code></span>
<span class="comment-copy">@EugeneYarmash please see my recent edit.</span>
<span class="comment-copy">If you exchange the last element,I mean 0, with 2 it would return:    [1, 3, 2] which is unlike the answer:    [1, 2, 2]</span>
