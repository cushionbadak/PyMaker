<div class="post-text" itemprop="text">
<p>If I make a very simple package like this (with empty <code>__init__.py</code> files):</p>
<pre><code>package_name/
    package_name/
         sub_module/
              __init__.py
              file.py  
         __init__.py
    setup.py
</code></pre>
<p>When I start a Python shell at the root of this project, and do:</p>
<pre><code>import package_name.sub_module.file
</code></pre>
<p>everything goes well and I can use the functions in <code>file.py</code>. But if I send this project on a GitLab, and pip install it in another local project and import it the same way, I get the following error: </p>
<pre><code>ModuleNotFoundError: No module named 'package_name.sub_module'
</code></pre>
<p>I tried to modify the <code>__init__.py</code> files in many ways but I can't find something working. I don't understand why this happen. </p>
<p><strong>EDIT:</strong> Here is the content of the <code>setup.py</code> file:</p>
<pre><code>from setuptools import setup

setup(name='package_name',
      version='0.1',
      description='My package',
      url='https://gitlab.myserver.com/package_name',
      author='Me',
      author_email='me@myserver.com',
      license='MIT',
      packages=['package_name'],
      install_requires=[
          'another_package_1',
          'another_package_2'
      ],
      zip_safe=False)
</code></pre>
<p>To install the package with pip, I use the command:</p>
<pre><code>pip install git+https://gitlab.myserver.com/package_name.git
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>look on this site <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">https://docs.python.org/3/distutils/setupscript.html</a><br/>
you have to declare every subfolder in the project structure</p>
<p>packages=['an_example_pypi_project', 'tests'],</p>
<pre><code>|-- an_example_pypi_project
|   |-- __init__.py
|   |-- useful_1.py
|   |-- useful_2.py
|-- tests
|-- |-- __init__.py
|-- |-- runall.py
|-- |-- test0.py
</code></pre>
<hr/>
<pre><code>|-- an_example_pypi_project
|   |-- __init__.py
|   |-- useful_1.py
    |-- subfolder
|   |   |-- useful_2.py
|-- tests
|-- |-- __init__.py
|-- |-- runall.py
|-- |-- test0.py
</code></pre>
<p>packages=['an_example_pypi_project', an_example_pypi_project.subfolder, 'tests'],</p>
</div>
<span class="comment-copy">The root of the problem is probably inside the <code>setup.py</code> or in your installation steps. What argument did you pass to <code>setup()</code>? What commands did you type to install the package? Without that it's impossible to tell what is going wrong.</span>
<span class="comment-copy">I bet it's the <code>packages</code> kwarg. Do you call your <code>setup</code> function with  <code>packages=['package_name']</code>?</span>
<span class="comment-copy">I followed the instructions in the basic pip tutorial about packaging. I'll edit the question tomorrow with its content. Yes I use the package=['package_name'] command.</span>
<span class="comment-copy">I just found out the 'packages=find_packages(exclude=['contrib', 'docs', 'tests*'])' option. I think I misunderstood the way packages are declared. If I had to do it manually, does it mean I have to write packages=['package_name', 'package_name.sub_module' ?</span>
<span class="comment-copy">@debzsud exactly, you have to list <i>all</i> the packages explicitly by their full names. Including <code>foo</code> does not imply including <code>foo.bar</code>. It is advisable to use <code>find_packages</code> function from <code>setuptools</code> so you don't have to update the packages list every time you create a new package.</span>
