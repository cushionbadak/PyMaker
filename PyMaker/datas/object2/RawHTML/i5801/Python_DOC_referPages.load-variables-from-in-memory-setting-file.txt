<div class="post-text" itemprop="text">
<p>i have settings.py file that looks like:</p>
<pre><code>DEBUG = True
CACHE_IP = '0.0.0.0'
DB_SETTINGS = {
    'SERVERS': ['127.0.0.1:80'],
    'MAX_IDLE_TIME' : 180,
}
</code></pre>
<p>this file is stored at external cloud storage.</p>
<p>I have a process the get the url to this file, and load it into memory (not to disk). when loading it into memory it will be string type and looks like:</p>
<pre><code>"DEBUG = True\n CACHE_IP = '0.0.0.0'\n DB_SETTINGS = {\n    'SERVERS': ['127.0.0.1:80'],\n    'MAX_IDLE_TIME' : 180,\n}\n" 
</code></pre>
<p>How for example i can get the values from this string? i mean, how can i get a dictionary where key=verb name from file, and value = value from file? is there any pythonic way for this?</p>
<p>so my dictionary will look like:</p>
<pre><code>{'DEBUG': True, 'CACHE_IP' = '0.0.0.0', 'DB_SETTINGS': {...}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your requirement is very specific but this kind of requirements do arise. So, I tried to solve this using method below:</p>
<pre><code>In [102]: import ast # Do not use eval(its unsafe)

In [103]: string = "DEBUG = True\n CACHE_IP = '0.0.0.0'\n DB_SETTINGS = {\n    '
     ...: SERVERS': ['127.0.0.1:80'],\n    'MAX_IDLE_TIME' : 180,\n}\n"
     ...:

In [104]: def parse_key_val(string):
     ...:     tmp_dict = {}
     ...:     for r in re.split('(?&lt;![{},])\n (?!{)', string):
     ...:         key, val = r.split(" = ")
     ...:         if '{' in val:
     ...:             val = ast.literal_eval(val)
     ...:         tmp_dict[key] = val
     ...:     return tmp_dict
     ...:

In [105]: parse_key_val(string)
Out[105]:
{'CACHE_IP': "'0.0.0.0'",
 'DB_SETTINGS': {'MAX_IDLE_TIME': 180, 'SERVERS': ['127.0.0.1:80']},
 'DEBUG': 'True'}
</code></pre>
<p>This solution works great for the string you provided but it might(or not) fail in some complex cases. But this solution gives a good starting point of how to start. You might need to make some modifications to make it work for complex cases.</p>
<p>Now coming to the program, the important parts here to understand are:</p>
<pre><code>re.split('(?&lt;![{},])\n (?!{)', string)
</code></pre>
<p>and </p>
<pre><code>val = ast.literal_eval(val)
</code></pre>
<p>The pattern <code>(?&lt;![{},])\n (?!{)</code> in <code>re.split</code> means, split the string on character <code>\n</code> but only if it is not after <code>{</code> or <code>}</code> or <code>,</code> and not before <code>{</code>. This regex is created to not split <code>\n</code> line character in dict strings.</p>
<p>Not the second part <code>val = ast.literal_eval(val)</code> builds on top of the above regex step as above step doesn't break the dict string. The resulting dict part of string after split is:</p>
<pre><code>"DB_SETTINGS = {\n    'SERVERS': ['127.0.0.1:80'],\n    'MAX_IDLE_TIME' : 180,\n}\n"
</code></pre>
<p>With <code>ast.literal_eval</code> the task of parsing dict, nested dict and list inside it very easy. That it!</p>
<p>One more thing, do not use eval as one of the solution suggests here, it's a security risk.</p>
<p>You can read more about <code>ast</code> <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use the <code>eval</code> function to execute the text. </p>
<pre><code>eval("DEBUG = True\n CACHE_IP = '0.0.0.0'\n DB_SETTINGS = {\n    'SERVERS':       ['127.0.0.1:80'],\n    'MAX_IDLE_TIME' : 180,\n}\n")
settings_dict = {}
settings_dict['DEBUG'] = DEBUG
settings_dict['CACHE_IP'] = DEBUG
settings_dict['DB_SETTINGS'] = DB_SETTINGS
</code></pre>
<p>I don't know of a way to 'automate' the dictionary creation.</p>
</div>
<span class="comment-copy">I would suggest storing your settings on the cloud as <code>json</code> data so you can use python's json parsers to get the data in a dict format.</span>
<span class="comment-copy">i cant. this file is stored as settings.py. this is settings file for another python app</span>
<span class="comment-copy">Load it the same way the other Python app does.</span>
<span class="comment-copy">I'll second martineau. The string you provide is rather difficult to take apart because of there is no common format you can use to pick everything apart. If you're able to do so you might also consider changing how the source file is formatted. (e.g. with easy-to-parse <code>key = val [/n]</code>)</span>
<span class="comment-copy">If you can't convert it to <code>json</code> then you should be able to load the entire file into memory as a file object instead of a string and then iterate over the rows to build a dictionary using <code>urllib</code> like in <a href="https://stackoverflow.com/questions/32971752/python-read-file-from-a-web-url">this</a> question. the <code>requests</code> library should be able to do it too.</span>
<span class="comment-copy">Note that <code>eval</code> just executes code, so if someone puts <code>import shutil; shutil.rmtree('/home/username')</code> in there, you've just wiped your home directory! <code>eval</code> is a security risk- please be very careful when using it!</span>
<span class="comment-copy">eval won't work with the above string. You will get <code>DEBUG = True SyntaxError: invalid syntax</code></span>
<span class="comment-copy">its not safe to use eval</span>
<span class="comment-copy">oops, eval only evaluates expressions like the dictionary string. As such import statements don't work either. There could still be some creative security compromise. The accepted answer is a better solution.</span>
