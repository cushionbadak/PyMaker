<div class="post-text" itemprop="text">
<p>I have the following string representing a UTC timestamp: <code>2017-12-03T20:38:00.971261Z</code></p>
<p>I would like to convert it into Posix timestamp (IE: seconds since the epoch)
Using this online converter (<a href="https://www.epochconverter.com/" rel="nofollow noreferrer">https://www.epochconverter.com/</a>) I know the answer is <code>1512333480</code></p>
<p>But when I do the following code, the result is off by 1800 seconds -- 30 minutes:</p>
<pre><code>&gt;&gt;&gt; temp_time1 = datetime.datetime.strptime('2017-12-03T20:38:00.971261Z', '%Y-%m-%dT%H:%M:%S.%fZ')
&gt;&gt;&gt; ctime = int(datetime.datetime(temp_time1.year,
                                  temp_time1.month,
                                  temp_time1.day,
                                  temp_time1.hour,
                                  temp_time1.minute,
                                  temp_time1.second,
                                  temp_time1.microsecond,
                                  pytz.timezone('Europe/London')).strftime('%s'))
&gt;&gt;&gt; print ctime
1512351480
</code></pre>
<p>Anyone know what I'm missing here??</p>
</div>
<div class="post-text" itemprop="text">
<p>You created a <em>new timestamp</em> and put it in the Europe/London timezone. That is not the same thing as UTC. The Europe/London timezone from the PyTZ database includes <em>historical</em> offsets, and those affect how <code>datetime.datetime()</code> interprets the timezone.</p>
<p>Just use the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer"><code>datetime.timestamp()</code> method</a> on the <code>datetime</code> object you already parsed from the string:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; temp_time1 = datetime.datetime.strptime('2017-12-03T20:38:00.971261Z', '%Y-%m-%dT%H:%M:%S.%fZ')
&gt;&gt;&gt; temp_time1.timestamp()
1512333480.971261
</code></pre>
<p>Your original <code>temp_time1</code> datetime object is timezone agnostic, so the <code>timestamp()</code> object already assumes no timezone conversion has to take place.</p>
<p>If you must apply the <code>Europe/London</code> timezone first for whatever reason, then at least use the <a href="http://pytz.sourceforge.net/#localized-times-and-date-arithmetic" rel="nofollow noreferrer"><code>timezone.localize()</code> method</a> to get the right offset applied:</p>
<pre><code>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; pytz.timezone('Europe/London').localize(temp_time1)
datetime.datetime(2017, 12, 3, 20, 38, 0, 971261, tzinfo=&lt;DstTzInfo 'Europe/London' GMT0:00:00 STD&gt;)
&gt;&gt;&gt; pytz.timezone('Europe/London').localize(temp_time1).timestamp()
1512333480.971261
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/7065164/how-to-make-an-unaware-datetime-timezone-aware-in-python">How to make an unaware datetime timezone aware in python</a></p>
<p>For Python 2 and Python 3.0, 3.1 or 3.2, where <code>datetime.timestamp()</code> is not available, subtract the epoch date:</p>
<pre><code>&gt;&gt;&gt; (temp_time1 - datetime.datetime(1970, 1, 1)).total_seconds()
1512333480.971261
</code></pre>
<p>Add in the <code>UTC</code> timezone when dealing with timezone-aware <code>datetime</code> instances:</p>
<pre><code>&gt;&gt;&gt; (pytz.timezone('Europe/London').localize(temp_time1) - datetime.datetime(1970, 1, 1, tzinfo=pytz.utc)).total_seconds()
1512333480.971261
</code></pre>
<p>Combined into a function:</p>
<pre><code>def datetime_to_timestamp(dt, epoch=datetime.datetime(1970, 1, 1)):
    if dt.tzinfo is not None:
        epoch = pytz.utc.localize(epoch)
    return (dt - epoch).total_seconds()
</code></pre>
</div>
<span class="comment-copy">So why are you using the Europe/London timezone if this is supposed to be a UTC timestamp?</span>
<span class="comment-copy"><code>temp_time1.timestamp()</code> produces <code>1512333480.971261</code>.</span>
<span class="comment-copy">There is no method timestamp() on a datetime object. Am I totally confused Martijn??</span>
<span class="comment-copy">But there is such a method; I linked to the documentation it in my answer.</span>
<span class="comment-copy">Ah, it is new in Python 3.3. Are you using Python 2 perhaps?</span>
