<div class="post-text" itemprop="text">
<p>I am trying to create an if else code where there is about 20conditions for the elif, how do I create a list of conditions where i can just type something such as:</p>
<pre><code>uno= &lt;9
lol= &gt;20
crad= =&lt;3
list={uno,lol,crad}
if 13=list:
    print("yay")
elif 13!=list:
    print("nay")
</code></pre>
<p>That's my current code
It should print "yay", instead there is syntax error</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not actually simpler than writing a chain of <code>if</code>/<code>elif</code>/<code>elif</code> etc, but something like this seems to do what you are asking:</p>
<pre><code>predicates = [lambda x: x&lt;9, lambda x: x&gt;20, lambda x: x&lt;=3]
if all(y(13) for y in predicates):
    print("yay")
else:
    print("nay")
</code></pre>
<p>Each predicate is a small anonymous function (a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer"><code>lambda</code></a>) which receives a single argument and evaluates to either <code>True</code> or <code>False</code>.  If you have a large number of arguments you want to check against a large set of predicates, it's nice to be able to encapsulate the predicates like this. The ability to programmatically add or remove predicates from the list truly extends the versatility of this construct beyond what you can (easily, naturally) do with <code>if</code>/<code>elif</code>/<code>elif</code>.</p>
<p>This particular set of predicates can't all be true for a single number. Maybe you want <code>any()</code> instead of <code>all()</code>...?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your "conditions" are functions mapping the input to booleans. Therefore, you can write them as functions:</p>
<pre><code>def is_small(number):
    return number &lt; 9
def is_large(number):
    return number &gt; 20
conditions = (is_small, is_large)
</code></pre>
<p>Then you can evaluate all of these functions on some input:</p>
<pre><code>def check_all(input, conditions):
    return [condition(input) for condition in conditions]
check_all(10, conditions)
&gt;&gt;&gt; [False, False]
</code></pre>
<p>And if you want to know if all of these or any one of these are true, you can use the functions <code>all</code> and <code>any</code>:</p>
<pre><code>any(check_all(10, conditions))
&gt;&gt;&gt; False
any(check_all(21, conditions))
&gt;&gt;&gt; True
</code></pre>
<p>And <code>not all(…)</code> is True if one of the conditions is not fulfilled, <code>not any</code> is True if none is.</p>
<p>Edit: One thing to notice is that the list comprehension <code>[… for … in …]</code> in <code>check_all</code> always evaluates all functions. This is not necessary if you use <code>any</code> or <code>all</code>, which can use an iterator and stop evaluating it onces the result it fixed (at the first <code>True</code> for <code>any</code> and the first <code>False</code> for <code>all</code>). If you use them, you can just replace the list comprehension <code>[… for … in …]</code> by a generator expression <code>(… for … in …)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a tuple of booleans and check it via <code>all</code>.</p>
<pre><code>conditions = []

conditions.append(yourVar &lt; 9)
conditions.append(yourVar &gt; 20)
conditions.append(yourVar &lt;= 3)

if all(conditions):
    print('All conditions are met')
else:
    print('At least one condition results in false)
</code></pre>
</div>
<span class="comment-copy">The first 3 lines makes no sense. 9 is greater than what? Anyway, you can create a list of booleans and use <code>any</code> or <code>all</code> function to check them all.</span>
<span class="comment-copy">Why should that pseudo-code print "yay"? You need to give us a better explanation of what you're trying to do, showing us a bunch of invalid code isn't very useful. It would help if you post the equivalent <code>if..elif...else</code> code, and then we can show you a more compact way of doing it (if there is one).</span>
<span class="comment-copy">One of the nice features of <code>any</code> is that it won't evaluate the rest of the list as soon as it finds an item which returns <code>True</code>. It would be nice if you could use this shortcut logic, so I would remove the <code>check_all()</code> wrapper, or refactor it to use <code>any()</code> or <code>all()</code> depending on how you use it.</span>
<span class="comment-copy">The function does not hurt, especially not readability. But using a generator expression there does not hurt either. Thanks.</span>
<span class="comment-copy">This evaluates <code>yourVar</code> at the time of <code>append</code>. I'm imagining the OP would like something which can be applied dynamically to a collection of values.</span>
<span class="comment-copy">Yes if he needs a dynamic evaluation then your solution is definitely better. What he needs is not totally clear.</span>
