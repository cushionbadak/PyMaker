<div class="post-text" itemprop="text">
<p>I have two programs. My main program is in python and I have another one in c++ because I have to connect to a machine and the only way I can use this machine is a dll/lib made with c++ that the constructor gave me. </p>
<p>In my python, I'm getting from a database thousands points and I'm doing some operations on them and those points are stocked in differents array in a class. </p>
<p>Now, I need to send thoses points to the c++ program and I was wondering how. I can send them as parameters to the main of the c++ program but the command line is then too long and I think even if it wasn't too long, this would be a really bad practice (If someone can explain a little why, that would be cool!). </p>
<p>Actually, I'm thinkinng to generate a file with all the coordonates in this file in my python program and send it too the c++ but I have to parse it then in c++. 
Is it a good way to do it? Or maybe an other solution would be better?</p>
</div>
<div class="post-text" itemprop="text">
<p>Some ways:</p>
<ol>
<li>Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen()</code></a> with <code>stdin=subprocess.PIPE</code> and write the data one per line, parsing it on the C++ side</li>
<li>Use temporary files, either text files or other files</li>
<li>Use <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a> and load the C++ part as shared library and then call into the C++ functions from Python directly</li>
<li>Use Python's <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module to encode your data from Python into C structs, which avoids the string formatting and string parsing -- this can be combined with any of the three above: <code>subprocess.Popen</code> (read binary data from <code>stdin</code> in C++), temporary files (open in binary mode) or <code>ctypes</code> (pass a pointer to the struct directly to the library function)</li>
</ol>
<p>As to the question why passing arguments on the command line is problematic, there are limits imposed by the OS, e.g. <a href="http://https://stackoverflow.com/a/19355351/104704" rel="nofollow noreferrer">getconf ARG_MAX</a>.</p>
</div>
<span class="comment-copy">btw <a href="https://www.theguardian.com/news/datablog/2010/jul/16/data-plural-singular" rel="nofollow noreferrer">data is already plural</a></span>
<span class="comment-copy">That's right. I'm going to correct it. Thanks and sorry for my english ^^'</span>
<span class="comment-copy">I read somewhere that the limit or arguments was often 4096. But, for example, if I know that I will always have like 1000 arguments, is that a reason to parse the command line each time?</span>
<span class="comment-copy">AFAIK the limit is in bytes, not in number of arguments. So if you have 100 arguments, 4096 gives you ~ 39 bytes per argument (assuming 1 space as separator, and calculating using (4096-99)/100, not taking into account the command length itself).</span>
