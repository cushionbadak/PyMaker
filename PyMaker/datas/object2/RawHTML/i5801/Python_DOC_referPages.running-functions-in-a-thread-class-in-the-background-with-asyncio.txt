<div class="post-text" itemprop="text">
<p>This is my first attempt at using <code>asyncio</code> in a project.  I'd like my class to initialize and run, with several of its functions running periodically "in the background".  I'd like the class' init to return after starting these background tasks, so that it can continue to do its synchronous stuff at the same time.</p>
<p>What I have:</p>
<pre><code> class MyClass(threading.Thread):
  def __init__(self, param):
      self.stoprequest = threading.Event()
      threading.Thread.__init__(self)

      self.param = param

      self.loop = asyncio.new_event_loop()
      asyncio.set_event_loop(self.loop)
      asyncio.ensure_future(self.periodic(), loop=self.loop)

      print("Initialized")

  async def periodic(self):
      while True:
          print("I'm here")
          await asyncio.sleep(1)

  def run(self):
       # continue to do synchronous things
</code></pre>
<p>I'm sure unsurprisingly, this doesn't work.  I've also tried using a "normal" <code>asyncio</code> function with <code>run_until_complete()</code> in init, but of course init never returns then.</p>
<p>How can I run <code>asyncio</code> functions that belong to this class periodically in the background, while the rest of the class (<code>run()</code>) continues to do synchronous work?</p>
</div>
<div class="post-text" itemprop="text">
<p>Passing loop as argument to <code>ensure_future</code> doesn't start this loop. You should call <code>run_until_complete</code> or <code>run_forever</code> to force you coroutines being started, there's no other way to do it.</p>
<blockquote>
<p>How can I run asyncio functions that belong to this class periodically
  in the background, while the rest of the class (run()) continues to do
  synchronous work?</p>
</blockquote>
<p>You can't. Just as you can't run event loop and synchronious code simultaneously in the main thread. <a href="https://docs.python.org/3/library/asyncio-eventloop.html#run-an-event-loop" rel="nofollow noreferrer">Loop starting</a> - blocks thread's execution flow until loop is stopped. This is just how <code>asyncio</code> works.</p>
<p>If you want to run <code>asyncio</code> in background you should run it in separate thread and do your synchronous things in main thread. Example of how to do it can be found <a href="https://stackoverflow.com/a/47517195/1113207">here</a>.</p>
<p>It you need to run blocking code in thread alongside with <code>asyncio</code> most convenient way now is to run <code>asyncio</code> in the main thread and to run blocking code in a background thread using <code>run_in_executor</code> function. You can find example of doing it <a href="https://stackoverflow.com/a/47736279/1113207">here</a>.</p>
<p>It's important to say that <code>asyncio</code> itself usually is used in main thread (without other threads) to achieve benefits of asynchronous programming. Are you sure you need second thread? If not please read <a href="https://stackoverflow.com/a/33399896/1113207">this answer</a> to see why <code>asyncio</code> is used.</p>
</div>
