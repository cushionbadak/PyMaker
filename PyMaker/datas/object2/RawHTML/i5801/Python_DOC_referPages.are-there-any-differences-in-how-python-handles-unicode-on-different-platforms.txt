<div class="post-text" itemprop="text">
<p>This is not a specific but rather a general question: are there any differences in how Python handles Unicode on different platforms?</p>
<p>I use Python 3 to read a text file. The following code opens a file and skips the first row:</p>
<pre><code>fin = open(filename, 'rt')
next(fin)
</code></pre>
<p>I run the same code on a Linux computer and on Mac. I use conda environment that was created using the same <code>environment.yml</code> file. I also verified that I use the same Python version on both the computers (Python 3.6.3 :: Anaconda, Inc.). The data file is fetched from the same Git repository. For some reason, the Linux version raises an exception:</p>
<pre><code>UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 139: ordinal not in range(128)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The encoding doesn't depend on python but on your LOCALE variables.</p>
<p>It is likely that you are not using a UTF-8 locale. You can check which locale python is using with</p>
<pre><code>import locale
print(locale.getpreferredencoding(False))'
</code></pre>
<p>which on your Mac should return <code>UTF-8</code>, while on your linux system something like <code>US-ASCII</code></p>
<p><strong>How to fix it?</strong></p>
<p>On Most system, the locale is taken from <em>environment variables</em> (see <a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap07.html" rel="nofollow noreferrer">the POSIX locale documentation</a> </p>
<p>Adding <code>LC_ALL=en.UTF-8</code> to your <code>.bash_profile</code> or equivalent will fix the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">the python3 docs for the open() builtin</a>:</p>
<blockquote>
<p>... In text mode ... the contents of the file are returned as <code>str</code>, the bytes having been first decocded using a platform-dependent encoding or using the specified <em>encoding</em> if given ... The default encoding is platform dependent (whatever <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">locale.getpreferredencoding()</a> returns)...</p>
</blockquote>
<p>Are you sure that the preferred encoding reported by the locale lib is the same on both platforms? You can enforce the encoding for reading from text files like this:</p>
<pre><code>fin = open(filename, 'r', encoding='utf-8')
next(fin)
</code></pre>
<p>Note that you don't need the file mode <code>rt</code>, as the <code>t</code> is assumed for basic file read modes; in fact, you don't need <code>r</code> either, as it's the default mode. So you can just do this, if you like:</p>
<pre><code>fin = open(filename, encoding='utf-8')
</code></pre>
</div>
<span class="comment-copy">Things to check: that you're really using Python 3 and what does <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>locale.getpreferredencoding(False)</code></a> give you on the platform where it fails. "In text mode, if <i>encoding</i> is not specified the encoding used is platform dependent: <code>locale.getpreferredencoding(False)</code> is called to get the current locale encoding." Since it'd seem you control the data file, pick an encoding to use and explicitly pass it to <code>open()</code> when you open it.</span>
<span class="comment-copy"><code>explicit is better than implicit</code>.  When dealing with text files, a good BKM is to always specify the encoding in <code>open</code>.</span>
<span class="comment-copy"><code>'r'</code> is the default and it isn't needed either :^)</span>
<span class="comment-copy">nice -- answer amended!</span>
