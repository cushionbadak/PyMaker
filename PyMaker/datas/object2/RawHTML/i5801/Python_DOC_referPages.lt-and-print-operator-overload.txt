<div class="post-text" itemprop="text">
<p>I have this assignment in which I have to define a class named <code>Person</code> with attributes <code>name</code>, <code>surname</code> and <code>age</code>. I have done getter and setter methods; now I have an issue with overloading operators.
First, I need to overload a print operator (which I have done); second, I need to overload "less than" operator which gives me the following error:</p>
<pre><code>TypeError: '&lt;' not supported between instances of 'Person' and 'Person'
</code></pre>
<p>And in the last step, I need to compare the ages of different persons e.g.:</p>
<pre><code>Sabine=Person("Sabine","Musterfrau",17)
Anton_Junior=Person("Anton","Mueller",14)
print(Sabine &lt; Anton_Junior) should return false and vice versa
</code></pre>
<p>My problem is: 1. the type error and 2. I have already overloaded print method and they want me to use the default <code>print()</code> later.</p>
<p>Here is my code: </p>
<pre><code>from sys import stdout
class Person:
    def __init__(self,vorname,nachname,alter):
        self.vorname=vorname
        self.nachname=nachname
        self._alter=alter
    def get_Alter(self):
            return self._alter
    def set_Alter(self,alter2):
        self._alter=alter2
    def print(person):
        stdout.write("Name:"+person.vorname+" Nachname:"+person.nachname+" Alter:"+str(person._alter)+"\n")
    def __lt__(self,other):
        return self._alter() &lt; other._alter()

Sabine=Person("Sabine","Musterfrau",17)
Sabine.set_Alter(18)
Anton_Junior=Person("Anton","Mueller",14)
Anton_Senior=Person("Anton","Mueller",80)
print(Sabine &lt; Anton_Junior)
print(Sabine)
</code></pre>
<p>Ok, just finished my task, thank you all!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>First, <code>self._alter</code> is a field/property/value (name it whatever you want) and not method. This should help you:</p>
<pre><code>def __lt__(self,other):
        return self._alter &lt; other._alter
</code></pre>
<p>When it comes to second problem::</p>
<blockquote>
<p>I have already overloaded print method and they want me to use the default print() later.</p>
</blockquote>
<p>Refefine <code>__str__()</code> method.</p>
<pre><code>&gt;&gt;&gt; class MyClass:
...   def __str__(self):
...     return 'This is my class'
... 
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print(mc)
This is my class
</code></pre>
</div>
<span class="comment-copy">This code does not give the error you claim. It does give a TypeError, but with the message " 'int' object is not callable", because for some reason you are calling the <code>_alter</code> objects within your <code>__lt__</code> method.</span>
<span class="comment-copy">Python is not Java. We don't use getters &amp; setters for simple attribute access. And if you really need getters &amp; setters in Python <i>please</i> use the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a> so that callers can still access your getter &amp; setter methods using simple attribute syntax.</span>
<span class="comment-copy">fixed it now with your help, thank you</span>
<span class="comment-copy">But I get unexpected result after print(Sabine)-----&gt;&lt;__main__.Person object at 0x18136fdf98&gt;</span>
<span class="comment-copy">Give your class a <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a> method.</span>
