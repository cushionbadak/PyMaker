<div class="post-text" itemprop="text">
<p>I am giving the user the ability to check a specific key in a multi-level dictionary. My idea is that they will pass the path to the key like this:</p>
<pre><code>root.subelement1.subelement2.key
</code></pre>
<p>This can be of arbitrary length and depth. </p>
<p>Once I have the string (above) from the user, I'll split it and get a list of each individual component:</p>
<pre><code>elements = ['root', 'subelement1', 'subelement2', 'key']
</code></pre>
<p>All of this I can do. The next part is where I am stuck. How can I query the dictionary key, specified by the above when it's arbitrary length?</p>
<p>My initial thought was to do something like <code>my_dict[elements[0]][elements[1]]</code>...but that doesn't scale or work when my user doesn't pass exactly the length I expect.</p>
<p>How can I get the data at an arbitrary key depth, in this case?</p>
<hr/>
<p>A couple examples:</p>
<ul>
<li>User passes <code>country.US.NewYork</code> =&gt; I query `my_dict['country']['US']['NewYork']</li>
<li>User passes <code>department.accounting</code> =&gt; I query <code>my_dict['department']['accounting']</code></li>
<li>User passes <code>id</code> =&gt; I query <code>my_dict['id']</code></li>
<li>User passes <code>district.District15.HenryBristow.principal</code> =&gt; I query <code>my_dict['district']['District15']['HenryBristow']['principal']</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>you could do that using <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer"><code>reduce</code></a> which will query the keys in the nested dictionaries:</p>
<pre><code>q = "district.District15.HenryBristow.principal"
my_dict  = {"district" : {"District15" : {"HenryBristow" : {"principal" : 12}}}}

from functools import reduce  # python 3 only

print(reduce(lambda x,y : x[y],q.split("."),my_dict))
</code></pre>
<p>result:</p>
<pre><code>12
</code></pre>
<p>If you want to avoid to catch <code>KeyError</code> in case the data doesn't exist with this path, you could use <code>get</code> with a default value as empty dictionary:</p>
<pre><code>reduce(lambda x,y : x.get(y,{}),q.split("."),my_dict)
</code></pre>
<p>Trying to get an unknown value returns an empty dictionary. The only drawback is that you don't know from <em>where</em> exactly the path got lost, so maybe leaving the <code>KeyError</code> be raised wouldn't be so bad:</p>
<pre><code>try:
    v = reduce(lambda x,y : x[y],q.split("."),my_dict)
except KeyError as e:
    print("Missing key: {} in path {}".format(e,q))
    v = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use recursion. Ex:
</p>
<pre><code>root = {
    'subelement1': {
        'subelement2': {
            'key': 'value'
        }
    }
}

elements = ['subelement1', 'subelement2', 'key']


def getElem(d, keys):
    if keys == []:
        return None
    else:
        key = keys[0]
        remainingKeys = keys[1:]
        if remainingKeys == []:
            return d[key]
        else:
            if type(d[key]) == dict:
                return getElem(d[key], remainingKeys)
            else:
                return None


print(getElem(root, elements))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>u can do this like below</p>
<pre><code>my_dict = someDict

tmpDict = dict(someDict)   # a coppy of dict
input = "x.u.z"
array = input.split(".")
for key in array:
    tmpDict = tmpDict[key]
print(tmpDict)
</code></pre>
<p>but your question is <strong>very challenging</strong>:
u say if user send <strong>country.us</strong> then go to <code>my-dict.country.us</code></p>
<p>but what happen if one of this path in my_dict be a <strong>list</strong> code will results error 
u can handle this by check type</p>
<pre><code>if isinstance(tmpDict , dict ):
    tmpDict = tmpDict[key]
else:
    # u should say what u want else (a Recursive method u will need)
</code></pre>
<p><strong>edit</strong>
if user address maybe wrong you should check <code>my_dict</code> have this field or not sample code is below but will be many if i don't like that!
    if key not in tmpDict:
        print("Bad Path")
        return </p>
</div>
<div class="post-text" itemprop="text">
<p>from a python 2.x perspective, you can do this with reduce.</p>
<pre><code>query_list = keys.split(":")
print reduce(lambda x,y: x[y], [my_dict] + query_list)
</code></pre>
<p>But in general, you'll want to do this with a recursive or iterative function if you want to do error handling beyond throwing a <code>KeyError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can transverse the dictionary using a for loop:</p>
<pre><code>s = 'root.subelement1.subelement2.key'
d1 = {'root':{'subelement1':{'subelement2':{'key':15, 'key1':18}}}}
new_d = d1
for key in s.split('.'):
    new_d = new_d[key]

print(new_d)
</code></pre>
<p>Output:</p>
<pre><code>15
</code></pre>
</div>
<span class="comment-copy">I think you'll have to make a loop: <code>current = my_dict; for bit in query.split('.'): current = current[bit]</code> plus checks for misses obviously</span>
<span class="comment-copy">That's clever but how do you handle misses?</span>
<span class="comment-copy">reduce is deprecated</span>
<span class="comment-copy">reduce is deprecated? what? no, it's just been demoted from built-in to a functools package.</span>
<span class="comment-copy">@PaulPanzer edited to handle misses. Note that there's nothing wrong with throwing a KeyError and catching it...</span>
<span class="comment-copy">Finally an example of <code>reduce</code> that makes a lot of sense.</span>
