<div class="post-text" itemprop="text">
<p>Example:</p>
<pre><code>a = 
[
[['test', 21, 28], ['test', 61, 68], ['test', 111, 118], ['test', 118, 125]],
[['Columns', 21, 28], ['Columns', 61, 68], ['Columns', 111, 118], ['Columns', 118, 125], ['Columns', 128, 135]], 
[['Delete', 14, 20], ['Delete', 47, 53], ['Delete', 54, 60], ['Delete', 78, 84], ['Delete', 95, 101]], 
[['rw', 21, 28], ['rw', 61, 68], ['rw', 111, 118]]
]
</code></pre>
<p>What I want to do is to sort the nested list by reversed length of the sublists
but to keep the original order if the length of sublists is the same.   </p>
<p>Expected result:  </p>
<pre><code>[
[['Columns', 21, 28], ['Columns', 61, 68], ['Columns', 111, 118], ['Columns', 118, 125], ['Columns', 128, 135]], 
[['Delete', 14, 20], ['Delete', 47, 53], ['Delete', 54, 60], ['Delete', 78, 84], ['Delete', 95, 101]], 
[['test', 21, 28], ['test', 61, 68], ['test', 111, 118], ['test', 118, 125]], 
[['rw', 21, 28], ['rw', 61, 68], ['rw', 111, 118]]
]
</code></pre>
<p>I know I can use this to sort the list by reverse length but it will not keep the original order:</p>
<pre><code>a = sorted(a, key=len, reverse=True)
</code></pre>
<p>(it reverses the sublists 'Delete' and 'Columns')</p>
<p>How can I sort the list by reverse length of the sublists and keep the original order?</p>
</div>
<div class="post-text" itemprop="text">
<p>TimSort is a stable sort, so it normally preserves the order of equal items. So your code <em>should</em> work correctly.</p>
<p>Alternatively, get rid of the <code>reverse=True</code> and use a key function that returns the negative of the sublist length.</p>
<pre><code>a = [
    [['test', 21, 28], ['test', 61, 68], ['test', 111, 118], ['test', 118, 125]],
    [['Columns', 21, 28], ['Columns', 61, 68], ['Columns', 111, 118], ['Columns', 118, 125], ['Columns', 128, 135]],    
    [['Delete', 14, 20], ['Delete', 47, 53], ['Delete', 54, 60], ['Delete', 78, 84], ['Delete', 95, 101]], 
    [['rw', 21, 28], ['rw', 61, 68], ['rw', 111, 118]]
]

a.sort(key=lambda x: -len(x))
for row in a:
    print(row)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[['Columns', 21, 28], ['Columns', 61, 68], ['Columns', 111, 118], ['Columns', 118, 125], ['Columns', 128, 135]]
[['Delete', 14, 20], ['Delete', 47, 53], ['Delete', 54, 60], ['Delete', 78, 84], ['Delete', 95, 101]]
[['test', 21, 28], ['test', 61, 68], ['test', 111, 118], ['test', 118, 125]]
[['rw', 21, 28], ['rw', 61, 68], ['rw', 111, 118]]
</code></pre>
<p>If I use </p>
<pre><code>a.sort(key=len, reverse=True)
</code></pre>
<p>I get the same output as above. If you don't get that output too, something <em>very</em> weird is going on. Note that this version is more efficient than the version above, since it calls <code>len</code> directly (which is implemented in C and it does a fast attribute lookup to determine the object's length), and Python function calls are relatively slow, whether they are <code>def</code> functions or <code>lambda</code>s.</p>
<hr/>
<p>BTW, when you want to sort a list in-place you should always call its <code>.sort</code> method. The built-in <code>sorted</code> function actually creates a new list, copies the original data to that list, and then calls <code>.sort</code> on it, and then binds the new list to the destination. So it's much more efficient to avoid creating that copy and call <code>.sort</code> yourself on the original list.</p>
</div>
<span class="comment-copy">the <code>reverse</code> keyword really affects stability of the sort? the documentation states that <code>The reverse parameter still maintains sort stability (so that records with equal keys retain the original order)</code> - in "Odd and Ends" at <a href="https://docs.python.org/3/howto/sorting.html#sortinghowto" rel="nofollow noreferrer">docs.python.org/3/howto/sorting.html#sortinghowto</a></span>
<span class="comment-copy">I think @ewcz is correct, e.g. <code>sorted(['a', 'b'], key=len) == sorted(['a', 'b'], key=len, reverse=True)</code></span>
<span class="comment-copy">@ewcz Hey, you're right!  I should've tested the OP's code :oops:</span>
<span class="comment-copy">@PM2Ring no problem, I was also confused about what the OP actually wants :) - or perhaps she/he is using some ancient Python, I read somewhere that the sort is supposed to be stable as of <code>2.4</code></span>
<span class="comment-copy">@Chris_Rands I've updated my answer. I almost deleted it, but I figure it has <i>some</i> value...</span>
