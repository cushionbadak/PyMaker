<div class="post-text" itemprop="text">
<p>I would like to check if a value corresponds to a set of flags (from an enum or object alike).</p>
<p>Right now, I have come up with the following function in javascript (praise the snippet :3):</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function hasFlags(flags, value) {
    let s = flags.reduce((sum, v) =&gt; sum += v, 0);
    
    return (s &amp; value) === s
}

FLAGS = {
    STEP_0: 1 &lt;&lt; 0,
    STEP_1: 1 &lt;&lt; 1,
    STEP_2: 1 &lt;&lt; 2,
    STEP_3: 1 &lt;&lt; 3,
    STEP_4: 1 &lt;&lt; 4,
    STEP_5: 1 &lt;&lt; 5,
    STEP_6: 1 &lt;&lt; 6,
    STEP_7: 1 &lt;&lt; 7
}

const needed = [
    FLAGS.STEP_2,
    FLAGS.STEP_3,
    FLAGS.STEP_6,
]

console.log(hasFlags(needed, 4));                  // false
console.log(hasFlags(needed, 8));                  // false
console.log(hasFlags(needed, 64));                 // false
console.log(hasFlags(needed, 4 + 8));              // false
console.log(hasFlags(needed, 4 + 64));             // false
console.log(hasFlags(needed, 8 + 64));             // false
console.log(hasFlags(needed, 4 + 8 + 64));         // true
console.log(hasFlags(needed, 4 + 8 + 64 + 1));     // true
console.log(hasFlags(needed, 4 + 8 + 64 + 2));     // true
console.log(hasFlags(needed, 4 + 8 + 64 + 1 + 2)); // true
// etc...</code></pre>
</div>
</div>
</p>
<p>In python the function would look like this:</p>
<pre><code>def hasFlags(flags, value):
    s = sum(flags)
    return (s &amp; value) == s

print hasFlags((4,8,64), 4)  # False
print hasFlags((4,8,64), 4+8+64)  # True
# ...
</code></pre>
<p>Is there a better way (that is, more idiomatic ... or more pythonic) to do this same verification?</p>
<p>Edit: Solutions in both python and javascript are appreciated, but I am  especially looking for an algorithm (whatever the language), as I've searched a lot across the web and never found any, while it seems to me that it's a common problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>One option in Python is a <code>set</code> of flags, where flags are elements of (for example) an enumeration from the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code></a> module. This also has the benefit of the subset operator already being defined, so you can just do <code>needed &lt;= flags</code>.</p>
<p>Your final code would look something like this:</p>
<pre><code>from enum import Enum

class Flags(enum.Enum):
  flag0 = {0}
  flag1 = {1}
  flag2 = {2}
  ...

def has_flags(needed, flags):
  return needed &lt;= flags

needed = Flags.flag2 | 
         Flags.flag3 |
         Flags.flag6

print(has_flags(needed, Flags.flag2)) #false
print(has_flags(needed, Flags.flag3)) #false
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When combinations of flags are represented as bit-masks you can do mutations and tests on all the flags at once, directly, using bit-wise operators.</p>
<pre><code>STEP_0 = 1 &lt;&lt; 0
STEP_1 = 1 &lt;&lt; 1
STEP_2 = 1 &lt;&lt; 2
STEP_3 = 1 &lt;&lt; 3
STEP_4 = 1 &lt;&lt; 4
STEP_5 = 1 &lt;&lt; 5
STEP_6 = 1 &lt;&lt; 6
STEP_7 = 1 &lt;&lt; 7

def has_flags(flags_to_check_for, cur_flags):
    return (cur_flags &amp; flags_to_check_for) == flags_to_check_for

desired_flags = STEP_2 | STEP_3 | STEP_6 

cur_flags = STEP_2
print has_flags(desired_flags, cur_flags)   # False
cur_flags |= STEP_3
cur_flags |= STEP_6
print has_flags(desired_flags, cur_flags)  # True
# ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could check with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" rel="nofollow noreferrer"><code>Array#every</code></a>, which exit if a condition is wrong.</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const
    hasFlags = (flags, value) =&gt; flags.every(flag =&gt; flag &amp; value),
    FLAGS = {
        STEP_0: 1 &lt;&lt; 0,
        STEP_1: 1 &lt;&lt; 1,
        STEP_2: 1 &lt;&lt; 2,
        STEP_3: 1 &lt;&lt; 3,
        STEP_4: 1 &lt;&lt; 4,
        STEP_5: 1 &lt;&lt; 5,
        STEP_6: 1 &lt;&lt; 6,
        STEP_7: 1 &lt;&lt; 7
    },
    needed = [
        FLAGS.STEP_2,
        FLAGS.STEP_3,
        FLAGS.STEP_6,
    ];

console.log(hasFlags(needed, 4));                  // false
console.log(hasFlags(needed, 8));                  // false
console.log(hasFlags(needed, 64));                 // false
console.log(hasFlags(needed, 4 + 8));              // false
console.log(hasFlags(needed, 4 + 64));             // false
console.log(hasFlags(needed, 8 + 64));             // false
console.log(hasFlags(needed, 4 + 8 + 64));         // true
console.log(hasFlags(needed, 4 + 8 + 64 + 1));     // true
console.log(hasFlags(needed, 4 + 8 + 64 + 2));     // true
console.log(hasFlags(needed, 4 + 8 + 64 + 1 + 2)); // true</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
</div>
<span class="comment-copy">What do you mean by more pythonic ? this seems ok to me. Maybe i'm wrong.</span>
<span class="comment-copy">I think the question is asking about Python, not JS.</span>
<span class="comment-copy">@pycoder, it looks like an answer in JS is valid.</span>
