<div class="post-text" itemprop="text">
<p>It appears that shutil.rmtree is not synchronous on Windows, as I've had the second line in the following code raise an error that the directory already exists</p>
<pre><code>shutil.rmtree(my_dir)
os.makedirs(my_dir) #intermittently raises Windows error 183 - already exists
</code></pre>
<p>We see a similar issue in .NET on windows - <a href="https://stackoverflow.com/questions/34981143/is-directory-delete-create-synchronous">see this question</a> . Are there any good options to deal with this in python other than polling to see if the folder really is gone?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're okay with the folder still existing, and you're on Python 3, you can do <a href="https://docs.python.org/3/library/os.html#os.makedirs" rel="nofollow noreferrer">pass <code>exist_ok=True</code> to <code>os.makedirs</code></a>, and it will ignore the case where you try to make a directory that already exists:</p>
<pre><code>shutil.rmtree(my_dir)
os.makedirs(my_dir, exist_ok=True)
</code></pre>
<p>Failing that, you're stuck polling. Run your code in a loop (ideally with a small sleep to avoid hammering the disk), and don't end the loop until the <code>makedirs</code> finishes without error:</p>
<pre><code>import errno, os, shutil, time

while True:
    # Blow away directory
    shutil.rmtree(my_dir, ignore_errors=True)
    try:
        # Try to recreate
        os.makedirs(my_dir)
    except OSError as e:
        # If problem is that directory still exists, wait a bit and try again
        if e.winerror == 183:
            time.sleep(0.01)
            continue
        # Otherwise, unrecognized error, let it propagate
        raise
    else:
        # Successfully created empty dir, exit loop
        break
</code></pre>
<p>On Python 3.3+, you can probably change:</p>
<pre><code>    except WindowsError as e:
        # If problem is that directory still exists, wait a bit and try again
        if e.errno == errno.EEXIST:
            time.sleep(0.01)
            continue
        # Otherwise, unrecognized error, let it propagate
        raise
</code></pre>
<p>to just:</p>
<pre><code>    except FileExistsError:
        # If problem is that directory still exists, wait a bit and try again
        time.sleep(0.01)
</code></pre>
<p>as there is a specific exception type for "file exists" which you can catch directly (and let all other <code>OSError</code>/<code>WindowsError</code> exceptions propagate without interruption).</p>
</div>
<span class="comment-copy">It is synchronous, but the directory simply was not deleted or recreated by another process.</span>
<span class="comment-copy">On Windows, the <b>OS</b> can keep directories around if there are open files in those directories. Windows is lying to Python, there is little that can be done from Python code about this.</span>
<span class="comment-copy">I realized I had ignore_errors as True passed into rmtree, so that may be part of the problem too. I'll see if I can repro without.</span>
