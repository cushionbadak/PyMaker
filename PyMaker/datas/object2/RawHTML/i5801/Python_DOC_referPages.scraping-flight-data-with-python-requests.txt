<div class="post-text" itemprop="text">
<p>The following URL shows a flight and offers further details (toggle e.g. "Flugweg" or "Statistik" on the left side). I would like to read this data and later convert that into lists.</p>
<p><a href="https://www.onlinecontest.org/olc-2.0/gliding/flightinfo.html?dsId=6188729" rel="nofollow noreferrer">https://www.onlinecontest.org/olc-2.0/gliding/flightinfo.html?dsId=6188729</a></p>
<p>So what I have been doing so far is the following:</p>
<pre><code>import requests
API_url = "https://www.onlinecontest.org/olc-2.0/gliding/dataprov.html"
response = requests.post(API_url)
</code></pre>
<p>doing a response.text gives me a page back, basically telling me that "The requested page doesn't exist".</p>
<p>I then tried to add header information, as I read that sometimes this is a reason a request is denied:</p>
<pre><code>headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36",
            "Referer":"https://www.onlinecontest.org/olc-2.0/gliding/flightinfo.html?dsId=6188729",
          "Origin":"https://www.onlinecontest.org"}
</code></pre>
<p>And then have</p>
<pre><code>response = requests.post(API_url, headers = headers)
</code></pre>
<p>This did not change anything and is simply fishing in murky waters.</p>
<p>Searching with Chrome for XHR offers three files and they contain what I want, but I am running out of ideas, how to get them. What would be the correct approach to access the data?</p>
</div>
<div class="post-text" itemprop="text">
<p>The page makes 3 XHR requests as you said. You can make these requests using POST. You just need to get the right parameters for the payload. You can do this using BeautifulSoup and urllib which you may need to install if you have not done so already. This is for Python 3, Python 2 has a different implementation of urllib.</p>
<pre><code>import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs

# Get the web page.
url = "https://www.onlinecontest.org/olc-2.0/gliding/flightinfo.html?dsId=6188729"
page = requests.get(url).text

# Extract the first parameter you need for the POST request from the URL.
parsed_url = urlparse(url)
id = parse_qs(parsed_url.query)['dsId'][0]
print (id) # 6188729

# Get the first XML.
payload = {'nature':'dsstat','id': id}
data1 = requests.post("https://www.onlinecontest.org/olc-2.0/gliding/dataprov.html", data =payload)
print (data1.text)

# Get the ref attribute for the second POST request using BeautifulSoup.
soup = BeautifulSoup(page, 'html.parser')
dsstat = soup.find("meta", {'name':"og:image"})
parsed_url = urlparse(dsstat['content'])
ref = parse_qs(parsed_url.query)['ref'][0]
print (ref) # 977301232

# Get the second XML.
payload = {'nature':'track','ref': ref}
data2 = requests.post("https://www.onlinecontest.org/olc-2.0/gliding/dataprov.html", data =payload)
print (data2.text)

# Get the thrd XML. The id is the first ID + 1.
id2 = (int (id) + 1)
print (id2) # 6188730
payload = {'nature':'dsstat','id':id2}
data3 = requests.post("https://www.onlinecontest.org/olc-2.0/gliding/dataprov.html", data =payload)
print (data3.text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The contend of this page is generated by javascript. In order to scrape the content you need to use some tool which processes and renders javascript generated objects, i.e. <a href="http://selenium-python.readthedocs.io/" rel="nofollow noreferrer">Selenium</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The url you tried returns 404. Please check the url in the browser. Please try this:</p>
<pre><code>page_url = ""https://www.onlinecontest.org/olc-2.0/gliding/dataprov.html?nature=track&amp;ref=977301232""
response = requests.get(page_url)
</code></pre>
<p>Added the extra params("nature" and "ref") which gets shown in when inspected. Passing this with the url returns us the xml data. Maybe we can use python's <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">Elementree</a> for parsing the XML data.</p>
</div>
<span class="comment-copy">Hi Dan-Dev, this is exactly what I was looking for. Thank's a lot</span>
<span class="comment-copy">Hi rajkris, I now put the correct URL on top. Your solution helps already, getting most of the data. What I had in mind though, is to scrap the XML files that are loaded by this page. When I examine the page in Chrome and then choose Network, XHR and reload, I get three files displayed called "dataprov.html". Just like in the above example, I cannot access them directly and I am looking for a solution to do just that.</span>
<span class="comment-copy">Updated the answer. Please check. Changed the url. I think when we inspect we can see extra params(nature, ref) in the form data section. Just passing it as arguments returns us the required data.</span>
<span class="comment-copy">This answer comes close. But getting the XML directly, makes it easier to process the data in the next step. Thanks for your help.</span>
