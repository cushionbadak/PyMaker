<div class="post-text" itemprop="text">
<p>I can convert a numpy ndarray to bytes using <code>myndarray.tobytes()</code> Now how can I get it back to an ndarray? </p>
<p>Using the example from the <code>.tobytes()</code> method docs: </p>
<pre><code>&gt;&gt;&gt; x = np.array([[0, 1], [2, 3]])
&gt;&gt;&gt; bytes = x.tobytes()
&gt;&gt;&gt; bytes
b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00'

&gt;&gt;&gt; np.some_magic_function_here(bytes)
array([[0, 1], [2, 3]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After your edit it seems you are going into the wrong direction!</p>
<p><strong>You can't use</strong> <code>np.tobytes()</code> <strong>to store a complete array containing all informations like shapes and types when reconstruction from these bytes only is needed!</strong> It will only save the <em>raw</em> data (cell-values) and flatten these in C or Fortran-order.</p>
<p>Now we don't know your task. But you will need something based on <strong>serialization</strong>. There are tons of approaches, the easiest being the following based on python's pickle (example here: python3!):</p>
<pre><code>import pickle
import numpy as np

x = np.array([[0, 1], [2, 3]])
print(x)

x_as_bytes = pickle.dumps(x)
print(x_as_bytes)
print(type(x_as_bytes))

y = pickle.loads(x_as_bytes)
print(y)
</code></pre>
<p>Output:</p>
<pre><code>[[0 1]
 [2 3]]
 b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq\x05(K\x01K\x02K\x02\x86q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00i8q\x08K\x00K\x01\x87q\tRq\n(K\x03X\x01\x00\x00\x00&lt;q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89C \x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00q\rtq\x0eb.'
&lt;class 'bytes'&gt;
[[0 1]
 [2 3]]
</code></pre>
<p>The better alternative would be <a href="https://pythonhosted.org/joblib/" rel="nofollow noreferrer">joblib's</a> pickle with specialized pickling for large arrays. joblib's functions are file-object based and can be used in-memory with byte-strings too using python's <a href="https://docs.python.org/3/library/io.html#binary-i-o" rel="nofollow noreferrer">BytesIO</a>.</p>
</div>
<span class="comment-copy"><a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.frombuffer.html" rel="nofollow noreferrer">np.frombuffer()?</a></span>
<span class="comment-copy">Or <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromstring.html#numpy.fromstring" rel="nofollow noreferrer"><code>np.fromstring</code></a>. In both cases you'll also need to specify the <code>dtype</code> if it's not the default (<code>float</code>).</span>
