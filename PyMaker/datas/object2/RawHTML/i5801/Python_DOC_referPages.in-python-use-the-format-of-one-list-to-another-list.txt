<div class="post-text" itemprop="text">
<pre><code>list1 = [['WA', 'WA'], ['DC'], ['HI'], ['NJ', 'NJ', 'NJ', 'NJ', 'NJ'], ['TX', 'TX', 'TX'], ['LA', 'LA'], ['NC'], ['NY'], ['IL', 'IL'], ['GA'], ['MA'], ['AZ']]

list2 = [0.875, 10.875, 0, 0, 0, 0, 0.0, 0.0, 10.0, 0, 0, 0, 0.625, -0.25, 0, 10.0, 0.5, 0, 0, 10.0, 9.25]
</code></pre>
<p>I want the list3 be like this:</p>
<pre><code>list 3 = [[0.875, 10.875], [0], [0], [0, 0, 0.0, 0.0, 10.0], [0, 0, 0], [0.625, -0.25], [0], [10.0], [0.5, 0], [0], [10.0], [9.25]]
</code></pre>
<p>I had already get the index of the list1 like that:</p>
<pre><code>index_list = [[0, 1], [2], [3], [4, 5, 6, 7, 8], [9, 10, 11], [12, 13], [14], [15], [16, 17], [18], [19], [20]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Straightforwardly:</p>
<pre><code>list1 = [['WA', 'WA'], ['DC'], ['HI'], ['NJ', 'NJ', 'NJ', 'NJ', 'NJ'], ['TX', 'TX', 'TX'], ['LA', 'LA'], ['NC'], ['NY'], ['IL', 'IL'], ['GA'], ['MA'], ['AZ']]
list2 = [0.875, 10.875, 0, 0, 0, 0, 0.0, 0.0, 10.0, 0, 0, 0, 0.625, -0.25, 0, 10.0, 0.5, 0, 0, 10.0, 9.25]

result = []
c = 0
for item in list1:
    item_len = len(item)
    result.append(list2[c: c+item_len])
    c += item_len

print(result)
</code></pre>
<p>The output:</p>
<pre><code>[[0.875, 10.875], [0], [0], [0, 0, 0.0, 0.0, 10.0], [0, 0, 0], [0.625, -0.25], [0], [10.0], [0.5, 0], [0], [10.0], [9.25]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below is a solution that utilizes <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate()</code></a>.</p>
<pre><code>from itertools import accumulate

list1 = [['WA', 'WA'], ['DC'], ['HI'], ['NJ', 'NJ', 'NJ', 'NJ', 'NJ'], ['TX', 'TX', 'TX'], ['LA', 'LA'], ['NC'], ['NY'], ['IL', 'IL'], ['GA'], ['MA'], ['AZ']]

list2 = [0.875, 10.875, 0, 0, 0, 0, 0.0, 0.0, 10.0, 0, 0, 0, 0.625, -0.25, 0, 10.0, 0.5, 0, 0, 10.0, 9.25]

# temp to track the starting and ending index positions of the sublists
temp = [0] + list(accumulate(len(x) for x in list1))  
# [0, 2, 3, 4, 9, 12, 14, 15, 16, 18, 19, 20, 21]

list3 = [list2[j:temp[i+1]] for i, j in enumerate(temp[:-1])]  # See 1
# &gt;&gt; [[0.875, 10.875], [0], [0], [0, 0, 0.0, 0.0, 10.0], [0, 0, 0], [0.625, -0.25], [0], [10.0], [0.5, 0], [0], [10.0], [9.25]]
</code></pre>
<ol>
<li>Alternatively, you can use <code>list3 = [list2[i:j] for i, j in zip(temp[:-1], temp[1:])]</code> if you understand it better.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>How about an <em>iterator</em> solution:</p>
<pre><code>list1 = [['WA', 'WA'], ['DC'], ['HI'], ['NJ', 'NJ', 'NJ', 'NJ', 'NJ'], ['TX', 'TX', 'TX'], ['LA', 'LA'], ['NC'], ['NY'], ['IL', 'IL'], ['GA'], ['MA'], ['AZ']]

list2 = [0.875, 10.875, 0, 0, 0, 0, 0.0, 0.0, 10.0, 0, 0, 0, 0.625, -0.25, 0, 10.0, 0.5, 0, 0, 10.0, 9.25]

f = (x for x in list2)  # iterator

list3 = []
for sub in list1:
  for i, _ in enumerate(sub):
    sub[i] = next(f)  # go fetch me the next element of list2
  list3.append(sub)
print(list3)  # -&gt; [[0.875, 10.875], [0], [0], [0, 0, 0.0, 0.0, 10.0], [0, 0, 0], [0.625, -0.25], [0], [10.0], [0.5, 0], [0], [10.0], [9.25]]**
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>enumerate</code>:</p>
<pre><code>list3 = []
for i,j in enumerate(list1):
    list3.append(list2[i:i+len(j)])
</code></pre>
</div>
<span class="comment-copy">What steps have you tried so far?</span>
<span class="comment-copy">Thank you.It did work!</span>
<span class="comment-copy">@MIKUVOCALOID, you're welcome</span>
<span class="comment-copy">Beat me to it! But I would have used: <code>[list2[a-l:a] for a, l in zip(accumulate(map(len, list1)), map(len, list1))]</code></span>
<span class="comment-copy">@juanpa.arrivillaga Also interesting! Doesn't the double usage of <code>map(len, list1)</code> justify the creation of a <code>temp</code> list? This actually looks a lot like my <code>zip</code> solution.</span>
<span class="comment-copy">meh, not really, they are two independant, single-pass iterators. Nice and memory efficient. Although I <i>would</i> use two temporary variables to store the <code>map</code> objects, <code>ls = map(len, list1); acc = accumulate(map(len, list1))</code></span>
