<div class="post-text" itemprop="text">
<p>I just came to know there are <strong>Truthy</strong> and <strong>Falsy</strong> values in python which are different from the normal <code>True</code> and <code>False</code>?</p>
<p>Can someone please explain in depth what <em>truthy</em> and <em>falsy</em> values are? </p>
<p>Where should I use them?</p>
<p>What is the difference between <em>truthy</em> and <code>True</code> values and <em>falsy</em> and <code>False</code> values ?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the comments described, it just refers to values which are evaluated to True or False.</p>
<p>For instance, to see if a list is not empty, instead of checking like this:</p>
<pre><code>if len(my_list) != 0:
   print "Not empty!"
</code></pre>
<p>You can simply do this:</p>
<pre><code>if my_list:
   print "Not empty!"
</code></pre>
<p>This is because some values, such as empty lists, are considered False when evaluated for a boolean value. Non-empty lists are True.</p>
<p>Similarly for the integer 0, the empty string "", and so on, for False, and non-zero integers, non-empty strings, and so on, for True.</p>
<p>The idea of terms like "truthy" and "falsy" simply refer to those values which are considered True in cases like those described above, and those which are considered False.</p>
<p>For example, an empty list (<code>[]</code>) is considered "falsy", and a non-empty list (for example, <code>[1]</code>) is considered "truthy".</p>
<p>See also <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="noreferrer">this section of the documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>All values are considered "truthy" except for the following, which are "falsy":</p>
<ul>
<li><code>None</code></li>
<li><code>False</code></li>
<li><code>0</code></li>
<li><code>0.0</code></li>
<li><code>0j</code></li>
<li><code>Decimal(0)</code></li>
<li><code>Fraction(0, 1)</code></li>
<li><code>[]</code> - an empty <code>list</code></li>
<li><code>{}</code> - an empty <code>dict</code></li>
<li><code>()</code> - an empty <code>tuple</code></li>
<li><code>''</code> - an empty <code>str</code></li>
<li><code>b''</code> - an empty <code>bytes</code></li>
<li><code>set()</code> - an empty <code>set</code></li>
<li>an empty <code>range</code>, like <code>range(0)</code></li>
<li>objects for which 

<ul>
<li><code>obj.__bool__()</code> returns <code>False</code></li>
<li><code>obj.__len__()</code> returns <code>0</code> </li>
</ul></li>
</ul>
<p>A "truthy" value will satisfy the check performed by <code>if</code> or <code>while</code> statements.  We use "truthy" and "falsy" to differentiate from the <code>bool</code> values <code>True</code> and <code>False</code>.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="noreferrer"><strong>Truth Value Testing</strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Python determines the truthiness by applying <code>bool()</code> to the type, which returns <code>True</code> or <code>False</code> which is used in an expression like <code>if</code> or <code>while</code>. </p>
<p>Here is an example for a custom class <code>Vector2d</code>and it's instance returning <code>False</code> when the magnitude (lenght of a vector) is 0, otherwise <code>True</code>.</p>
<pre><code>import math
class Vector2d(object):
    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)

    def __abs__(self):
        return math.hypot(self.x, self.y)

    def __bool__(self):
        return bool(abs(self))

a = Vector2d(0,0)
print(bool(a))        #False
b = Vector2d(10,0)    
print(bool(b))        #True
</code></pre>
<p><strong>Note:</strong> If we wouldn't have defined <code>__bool__</code> it would always return True, as instances of a user-defined class are considered truthy by default.</p>
<p>Example from the book: "Fluent in Python, clear, concise and effective programming"</p>
</div>
<div class="post-text" itemprop="text">
<p>Truthy values refer to the objects used in a boolean context and not so much the boolean value that returns true or false.Take these as an example:</p>
<pre><code>&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([1])
True
&gt;&gt;&gt; bool('')
False
&gt;&gt;&gt; bool('hello')
True
</code></pre>
</div>
<span class="comment-copy">If <code>bool(value)</code> results in <code>True</code>, then <code>value</code> is <i>truthy</i>.</span>
<span class="comment-copy">You invented those words yourself, didn't you? Anyway, see <a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer"><code>__nonzero__</code></a> and <a href="https://docs.python.org/3.1/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a></span>
<span class="comment-copy">Truthy/Falsy values are just conveniences for situations where you need a binary test of some kind. It allows for simpler code, and simpler code is often easier to read with less chance for bugs.</span>
<span class="comment-copy">P.S. <code>True</code> and <code>False</code> are specializations of the <code>int</code> type with values of <code>1</code> and <code>0</code>.</span>
<span class="comment-copy">@BillBell StackOverflow strives to be a <i>complete</i> repository of programming knowledge. Answers readily available elsewhere on the net don't make it a bad idea to ask a question here.</span>
<span class="comment-copy">You shouldn't use comments for questions like this, but to quickly answer: It seems <code>ls</code> is a list. That if-statement is checking if it is empty. If it is empty, <code>result</code> is returned.</span>
<span class="comment-copy">or it means if my_list is true?</span>
<span class="comment-copy">I suggest trying these things out in a Python shell and seeing for yourself. ;) <code>if my_list</code> means "if my_list is not empty", and <code>if not my_list</code> means "if my_list is empty".</span>
<span class="comment-copy">ok i have last little confusion , i have seen many places like <code>if a:</code> what this type of conditions means ? is it mean if a is true or means if a is false ? or it means if a is truthy or if a is falsy ?</span>
<span class="comment-copy">Thanks but also please correct this line <code>For instance, to see if a list is empty, instead of checking like this:</code> it should be <code>if a list is not empty</code></span>
<span class="comment-copy">Great list, thanks. Entirely academic question, but do you know what the execution order is? Was thinking that you could create an object where <b>bool</b> returns True and <b>len</b> returns 0 (or vice versa).</span>
<span class="comment-copy">@HaydenCrocker It looks for <code>__bool__</code> first, then <code>__len__</code>.  If neither is defined, all instances are considered "true".  This is discussed in the docs for the <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>object.__bool__</code></a> method</span>
<span class="comment-copy">In Python versions prior to 3.5, <a href="https://docs.python.org/3/library/datetime.html#time-objects" rel="nofollow noreferrer">time objects</a> representing midnight UTC were considered False. <a href="https://lwn.net/Articles/590299/" rel="nofollow noreferrer">This article</a> gives an overview of a bug report of the issue and the eventual resolution.</span>
