<div class="post-text" itemprop="text">
<pre><code>x = " \{ Hello \} {0} "
print x.format(42)
</code></pre>
<p>gives me : <code>Key Error: Hello\\</code></p>
<p>I want to print the output: <code>{Hello} 42</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to double the <code>{{</code> and <code>}}</code>:</p>
<pre><code>&gt;&gt;&gt; x = " {{ Hello }} {0} "
&gt;&gt;&gt; print x.format(42)
' { Hello } 42 '
</code></pre>
<p>Here's the relevant part of the <a href="http://docs.python.org/library/string.html#formatstrings">Python documentation for format string syntax</a>:</p>
<blockquote>
<p>Format strings contain “replacement fields” surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You escape it by doubling the braces.</p>
<p>Eg:</p>
<pre><code>x = "{{ Hello }} {0}"
print x.format(42)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The OP wrote this comment:</p>
<pre><code>I was trying to format a small JSON for some purposes, like this: '{"all": false, "selected": "{}"}'.format(data) to get something like {"all": false, "selected": "1,2"}
</code></pre>
<p>It's pretty common that the "escaping braces" issue comes up when dealing with JSON.</p>
<p>I suggest doing this:</p>
<pre><code>import json
data = "1,2"
mydict = {"all": "false", "selected": data}
json.dumps(mydict)
</code></pre>
<p>It's cleaner than the alternative, which is:</p>
<pre><code>'{{"all": false, "selected": "{}"}}'.format(data)
</code></pre>
<p>Using the <code>json</code> library is definitely preferable when the JSON string gets more complicated than the example.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try doing this:</p>
<pre><code>x = " {{ Hello }} {0} "
print x.format(42)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<p><code>x = "{{ Hello }} {0}"</code></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 3.6+ (2017)</strong></p>
<p>In the recent versions of Python one would use <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">f-strings</a> (see also <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP498</a>).</p>
<p>With f-strings one should use double <code>{{</code> or <code>}}</code></p>
<pre><code>n = 42  
print(f" {{Hello}} {n} ")
</code></pre>
<p>produces the desired</p>
<pre><code> {Hello} 42
</code></pre>
<p>If you need to resolve an expression in the brackets instead of using literal text you'll need three sets of brackets:</p>
<pre><code>hello = "HELLO"
print(f"{{{hello.lower()}}}")
</code></pre>
<p>produces</p>
<pre><code>{hello}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although not any better, just for the reference, you can also do this:</p>
<pre><code>&gt;&gt;&gt; x = '{}Hello{} {}'
&gt;&gt;&gt; print x.format('{','}',42)
{Hello} 42
</code></pre>
<p>It can be useful for example when someone wants to print <code>{argument}</code>. It is maybe more readable than <code>'{{{}}}'.format('argument')</code></p>
<p>Note that you omit argument positions (e.g. <code>{}</code> instead of <code>{0}</code>) after Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are going to be doing this a lot, it might be good to define a utility function that will let you use arbitrary brace substitutes instead, like</p>
<pre><code>def custom_format(string, brackets, *args, **kwargs):
    if len(brackets) != 2:
        raise ValueError('Expected two brackets. Got {}.'.format(len(brackets)))
    padded = string.replace('{', '{{').replace('}', '}}')
    substituted = padded.replace(brackets[0], '{').replace(brackets[1], '}')
    formatted = substituted.format(*args, **kwargs)
    return formatted

&gt;&gt;&gt; custom_format('{{[cmd]} process 1}', brackets='[]', cmd='firefox.exe')
'{{firefox.exe} process 1}'
</code></pre>
<p>Note that this will work either with brackets being a string of length 2 or an iterable of two strings (for multi-character delimiters). </p>
</div>
<div class="post-text" itemprop="text">
<p>Reason is , <code>{}</code> is the syntax of <code>.format()</code> so in your case <code>.format()</code> doesn't recognize <code>{Hello}</code> so it threw an error.</p>
<p>you can override it by using double curly braces {{}},  </p>
<pre><code>x = " {{ Hello }} {0} "
</code></pre>
<p>or </p>
<p>try <code>%s</code> for text formatting,</p>
<pre><code>x = " { Hello } %s"
print x%(42)  
</code></pre>
</div>
<span class="comment-copy">See also: <a href="http://stackoverflow.com/questions/35574349">stackoverflow.com/questions/35574349</a></span>
<span class="comment-copy">For those who want to avoid doubling braces (<code>{{ }}</code>), use <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer"><code>string.Template</code></a>. There you substitute identifiers of the form <code>$foo</code> (handy for generating LaTeX code).</span>
<span class="comment-copy">So if you want to print "{42}", you'd use <code>"{{{0}}}".format(42)</code> !</span>
<span class="comment-copy">What about if you want a single curly brace?  <code>"{ something { } {value}".format(42)</code> doesn't work.</span>
<span class="comment-copy">"{{".format() and "}}".format() print single curly braces. In your example: print "{{ something {{ }} {0}".format(42) will print "{ something { } 42".</span>
<span class="comment-copy">What does the <code>{0}</code> mean?</span>
<span class="comment-copy">@Imray: <code>{0}</code> refers to the first argument to <code>.format()</code>. You can print more than one value like <code>{0} {1} {2}</code> as long as you give the same number of arguments to <code>.format()</code>. See <a href="http://docs.python.org/library/string.html#format-examples" rel="nofollow noreferrer">docs.python.org/library/string.html#format-examples</a> for extensive examples.</span>
<span class="comment-copy">Amen! It might seem like more work, but using libraries to do what libraries are supposed to do versus cutting corners...makes for better things.</span>
<span class="comment-copy">But the order of the keys in a Python object isn't guaranteed... Still, the JSON library is guaranteed to serialise in a JSON way.</span>
<span class="comment-copy">wizzwizz4: Good point. From Python 3.6 onward, dictionaries are insertion ordered, so it wouldn't be an issue. Versions of Python between 2.7 and 3.5 can use OrderedDict from the collections library.</span>
<span class="comment-copy">Thought about that also. Of course, that will work too and the algorithm is simpler. But, imagine you have a lot of text like this, and you just want to parameterize it here and there. Everytime you create an input string you wouldn't want to replace all those braces manually. You would just want to 'drop in' your parameterizations here and there. In this case, I think this method is both easier to think about and accomplish from a user perspective. I was inspired by linux's 'sed' command which has similar capabilities to arbitrarily choose your delimiter based on what is convenient.</span>
<span class="comment-copy">In short, I'd rather have the utility function be a little more complex than have it be a pain in the @$$ to use everytime. Please let me know if I misunderstood your proposition.</span>
<span class="comment-copy">I've gone ahead and added a short demo to my public.lab space <a href="https://github.com/dreftymac/public.lab/blob/master/topic/python/string.format/readme.md" rel="nofollow noreferrer">github.com/dreftymac/public.lab/blob/master/topic/python/…</a></span>
<span class="comment-copy">I like it. Edited my response above.</span>
