<div class="post-text" itemprop="text">
<p>When I try to run this code under Python 3.6:</p>
<pre><code>import sys

print &gt;&gt;sys.stderr, 'waiting for a connection'
</code></pre>
<p>I get this <code>TypeError</code>:</p>
<pre><code>Traceback (most recent call last):
  File "D:/Users/Chanhc1997/Desktop/test_c.py", line 8, in &lt;module&gt;
    print &gt;&gt;sys.stderr, 'waiting for a connection'
TypeError: unsupported operand type(s) for &gt;&gt;:
'builtin_function_or_method' and 'PseudoOutputFile'.
Did you mean "print(&lt;message&gt;, file=&lt;output_stream&gt;)"?
</code></pre>
<p>The code works fine in Python 2. What's going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, this:</p>
<pre><code>print &gt;&gt;sys.stderr, 'waiting for a connection'
</code></pre>
<p>means "print the string <code>'waiting for a connection'</code> to the file-like object <code>sys.stderr</code>".</p>
<p>In Python 3, <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a> becomes a <a href="https://docs.python.org/3/whatsnew/3.0.html#print-is-a-function" rel="nofollow noreferrer">function</a> rather than a statement, and the syntax to redirect its output looks like this:</p>
<pre><code>print('waiting for a connection', file=sys.stderr)
</code></pre>
<p>You get a <code>TypeError</code> (rather than, say, a <code>SyntaxError</code>) in Python 3 because, now that <code>print</code> is a function (and therefore an object), it can be part of an expression … and since <code>&gt;&gt;</code> is an operator, the expression fragment</p>
<pre><code>print &gt;&gt;sys.stderr
</code></pre>
<p>is interpreted as "<a href="https://docs.python.org/3/reference/expressions.html#shifting-operations" rel="nofollow noreferrer">shift</a> the <code>print</code> function right by <code>sys.stderr</code> bits" – which is syntactically valid, but doesn't make any sense for those objects.</p>
<p>If you need to write code which runs under both Python 2 and Python 3, you can import Python 3's behaviour into Python 2:</p>
<pre><code>from __future__ import print_function  # works in Python 2.6 and onwards

print('whatever', file=some_file)
</code></pre>
<p>Note that this will disable the ability to treat <code>print</code> as a statement, so you'll have to update any code which uses that behaviour.</p>
</div>
<span class="comment-copy">The answer to your question is included in the error message: instead of <code>print &gt;&gt;sys.stderr, TEXT</code> you must use <code>print (TEXT, file=sys.stderr)</code> when using Python 3.</span>
<span class="comment-copy">Thanks, it works! But I wonder that why the same code can work on openwrt( linkit 7688 duo, python supported) while on python-3.6 compiler we need to modify the print() part before compiling??</span>
