<div class="post-text" itemprop="text">
<p>What is the difference between the output of <code>str(a dictionary)</code> and <code>json.dumps(a dictionary)</code>? If I print them, they look the same. Their attributes (as per <code>dir</code>) also seem to be identical (see below). Yet I know there must be a difference. Could you please explain it to me?</p>
<pre><code>import json

aDictionary= {"first": 42, "second":21}
s = str(aDictionary)
j = json.dumps(aDictionary)
s == j # returns false
dir(s) == dir(j) # returns true
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str(aDictionary)</code> (as well as <code>repr(aDictionary)</code>) produces a <em>Python representation</em> of your dictionary. This representation is helpful for debugging <em>and nothing more</em>. For the built-in types such as dictionaries and strings, you'll be given a representation that is valid <em>Python</em> syntax. Python syntax and JSON syntax may look similar, but are <strong>not the same thing</strong>.</p>
<ul>
<li>Python uses single and double quotes for string literals. JSON only allows double quotes.</li>
<li>Python Unicode strings use <code>\&lt;single letter&gt;</code>, <code>\xhh</code>, <code>\uhhhh</code> and <code>\Uhhhhhhhh</code> escape sequences to encode Unicode codepoints; the latter form is used for non-BMP codepoints. JSON uses a smaller range of <code>\&lt;single letter&gt;</code> escapes as well as the <code>\uhhhh</code> form, and encodes UTF-16 surrogate pairs for non-BMP codepoints (so two <code>\uhhhh</code> sequences per codepoint).</li>
<li>Python uses <code>None</code> objects, JSON uses <code>null</code> to as a special "doesn't exist" sentinel value.</li>
<li>Python uses <code>True</code> and <code>False</code> as boolean values, JSON uses <code>true</code> and <code>false</code>.</li>
<li>Python dictionary keys can be any hashable type, JSON only supports strings.</li>
</ul>
<p>So <code>str(dictionary)</code> will <em>not</em> produce valid JSON output, most of the time; only if all your keys and values are BMP strings with at least one single quote in the value could you end up with a document that can also be parsed as valid JSON.</p>
<p>In terms of your specific example, note that <code>str(aDictionary)</code> produces a document with <em>single quotes</em>; <code>json.loads()</code> can't load this document as that's not valid JSON:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; aDictionary = {"first": 42, "second":21}
&gt;&gt;&gt; str(aDictionary)
"{'first': 42, 'second': 21}"
&gt;&gt;&gt; json.loads(str(aDictionary))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mjpieters/Development/Library/buildout.python/parts/opt/lib/python3.6/json/__init__.py", line 354, in loads
    return _default_decoder.decode(s)
  File "/Users/mjpieters/Development/Library/buildout.python/parts/opt/lib/python3.6/json/decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Users/mjpieters/Development/Library/buildout.python/parts/opt/lib/python3.6/json/decoder.py", line 355, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
</code></pre>
<p>Never use <code>str(pythonobject)</code> as a serialisation. Although the <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval()</code> function</a> can load a reasonable number of Python built-in types from a string representation, it is a lot slower than using JSON for the same job, or a more sophisticated <a href="https://docs.python.org/3/library/persistence.html" rel="noreferrer">data persistence format</a> if JSON doesn't fit your needs.</p>
</div>
<span class="comment-copy"><code>str(dict)</code> does not produce valid JSON.</span>
<span class="comment-copy">Thanks for your comment. Yes I experienced that but I would like to understand better the difference between two things that look otherwise very similar.</span>
<span class="comment-copy">Don't use <code>dict</code> as a variable name. And if you print the results you would see the difference; from <code>str</code>: <code>"{'first': 42, 'second': 21}"</code> and from json: <code>'{"first": 42, "second": 21}'</code>. Notice the double quotes around the strings for keys.</span>
<span class="comment-copy">Of <i>course</i> <code>dir()</code> returns the same list of attributes and methods. Both <code>s</code> and <code>j</code> are strings. That says nothing about the <i>contents of those strings</i>.</span>
<span class="comment-copy">s == j # returns false because in string composed of characters as both are string but with different commas sequence.  from str: "{'first': 42, 'second': 21}" and from json: '{"first": 42, "second": 21}'. See the commas sequence are different in both so obviously the comparison will bring false. For two strings need to equal only if they have matching characters at corresponding places.</span>
<span class="comment-copy">great and accurate answer.</span>
