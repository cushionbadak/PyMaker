<div class="post-text" itemprop="text">
<p>I have been looking around to see if anyone has actually done it but couldn't find it so hoping I can get some help here.</p>
<pre><code>newDict = {'Jan':31, 'Feb':29, 'Mar':31, 'Apr':30, 'May':31, 'Jun':30, 'Jul':31, 'Aug':30}
</code></pre>
<p>I created this dict and I want to use a <code>while</code> loop to output it this way: </p>
<pre><code>Jan 31
Feb 29
Mar 31
Apr 30
May 31
Jun 30
Jul 31
Aug 30
</code></pre>
<p>I am able to do it with a <code>for</code> loop, just curious how it can be done with a <code>while</code> loop. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can make your dictionary an <code>iterator</code> calling <code>iteritems</code> (Python 2.x), or <code>iter</code> on the <code>items()</code> (Python 3.x)</p>
<pre><code># Python 2.x
from __future__ import print_function
items = newDict.iteritems()

# Python 3.x
items = iter(newDict.items())

while True:
    try: 
        item = next(items)
        print(*item)
    except StopIteration:
        break
</code></pre>
<p><em>Note: We're importing <code>print_function</code> on Python 2.x because <code>print</code> would be a statement instead of a function, and hence the line <code>print(*item)</code> would actually fail</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another option, using the <code>.pop</code> method.</p>
<pre><code>newDict = {
    'Jan':31, 'Feb':29, 'Mar':31, 'Apr':30, 
    'May':31, 'Jun':30, 'Jul':31, 'Aug':30
}
t = newDict.items()
while t:
    print '%s %d' % t.pop()
</code></pre>
<p><strong>typical output</strong></p>
<pre><code>Jul 31
Jun 30
Apr 30
Aug 30
Feb 29
Mar 31
May 31
Jan 31
</code></pre>
<p>This code doesn't modify the contents of <code>newDict</code>, since in Python 2 <code>dict.items()</code> creates a list of the (key, value) pairs of the dictionary. In Python 3 it returns a dynamic View object, which doesn't have a <code>.pop</code> method, so this code won't work there.</p>
<p>Bear in mind that a <code>dict</code> is an unordered collection, so the output order may not be what you expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use following code:</p>
<pre><code>key=list(newDict.keys())
i=0
while i&lt;len(key):
    print(key[i]," ",newDict[key[i]])
    i+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <code>while</code> loop.</p>
<pre><code>newDict = {'Jan':31, 'Feb':29, 'Mar':31, 'Apr':30, 'May':31, 'Jun':30, 'Jul':31, 'Aug':30}
i = 0
while i &lt; len(newDict):
    val = newDict.items()[i]
    print val[0], val[1]
    i += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an absurd requirement, but here is one way to do it:</p>
<pre><code>newDict = {'Jan':31, 'Feb':29, 'Mar':31, 'Apr':30, 'May':31, 'Jun':30, 'Jul':31, 'Aug':30}

while newDict:
  x = next(x for x in newDict)
  print(x, newDict.pop(x))
</code></pre>
<hr/>
<p><strong>CAUTION:</strong></p>
<p>After the <code>while</code> has finished executing, <code>newDIct</code> will be <strong>empty</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer"><code>iterator</code></a></p>
<p><strong>Python 2.7</strong></p>
<pre><code>new_dict = {'Jan':31, 'Feb':29, 'Mar':31, 'Apr':30, 'May':31, 'Jun':30, 'Jul':31, 'Aug':30}
a = iter(new_dict.iteritems())
default = object()

while a:
    elem = next(a, default)
    # This check is to know whether iterator is exhausted or not.
    if elem is default:
        break
    print "{} {}".format(*elem)
</code></pre>
<p><strong>Python 3</strong></p>
<pre><code>new_dict = {'Jan':31, 'Feb':29, 'Mar':31, 'Apr':30, 'May':31, 'Jun':30, 'Jul':31, 'Aug':30}
a = iter(new_dict.items())
default = object()

while a:
    elem = next(a, default)
    # This check is to know whether iterator is exhausted or not.
    if elem is default:
        break
    print("{} {}".format(*elem))
</code></pre>
</div>
<span class="comment-copy">I am very curious: Why do you want use a while loop?</span>
<span class="comment-copy">@Moberg Hi, I wanted to try different ways to see how I am able to print dictionary instead of using For loop which is easier to use.</span>
<span class="comment-copy">You should seriously consider learning Python 3, Python 2 will reach its official End Of Life in 2020.</span>
<span class="comment-copy">this throws an Error on me <code>'dict_itemiterator' object has no attribute 'next'</code>. Did you try it?</span>
<span class="comment-copy">There's <code>dict.iteritems()</code>, which is already an iterator. But you should use the <code>next</code> function rather than calling the <code>.next</code> method directly. FWIW, in Python 3, <code>.next</code> doesn't exist, it's now <code>.__next__</code>, making it consistent with the other special methods.</span>
<span class="comment-copy">I haven't tried it on Python 3.x, but it's working on Python 2.x</span>
<span class="comment-copy">@Ev.Kounis It <a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="nofollow noreferrer">does actually</a></span>
<span class="comment-copy">@Bijoy Nice catch. Updated code</span>
