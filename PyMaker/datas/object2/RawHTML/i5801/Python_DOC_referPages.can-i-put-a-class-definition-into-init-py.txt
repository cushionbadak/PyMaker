<div class="post-text" itemprop="text">
<p>I have a package with a class structure similar to <a href="https://i.stack.imgur.com/u2liw.png" rel="nofollow noreferrer">this</a>.
<code>Base</code> class is a typical, simple parent class for a few separate hierarchies.</p>
<p>My package layout looks like this:</p>
<pre><code>__init__.py (empty)
base.py
ab.py
cd.py
ef.py
</code></pre>
<p>Is this a good idea or good practice to put <code>Base</code> class into <code>__init__.py</code> instead of creating separate module just for one class? In this way I wouldn't need to import it each time in modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is perfectly fine and a more flexible approach to leave it in <code>base.py</code>. Also note that <strong>the primary use of __init__.py is to initialize Python packages</strong> and not to hold content.</p>
<p>To avoid having to import the module each time you can write something like </p>
<pre><code># in __init__.py
from base import Base
</code></pre>
<p>into the <code>__init__.py</code> such that you can directly import <code>Base</code> from my_package:</p>
<pre><code># some script
from my_package import Base
</code></pre>
<p>This is a <strong>common approach to make objects available at the package level</strong>.</p>
<p>For more info about the <code>__init__.py</code> file check out the <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="noreferrer">documentation</a>.</p>
</div>
<span class="comment-copy">I'd leave it in base.py but write something like <code>from base import Base</code> into the <code>__init__.py</code> such that you can then directly import <code>Base</code> from <i>my_package</i> like <code>from my_package import Base</code></span>
<span class="comment-copy">Well, this looks like the best solution. Thanks!</span>
<span class="comment-copy">You are welcome! Will put it as an answer even if it's a short one :)</span>
