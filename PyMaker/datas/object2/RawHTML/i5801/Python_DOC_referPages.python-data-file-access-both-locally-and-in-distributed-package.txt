<div class="post-text" itemprop="text">
<p>Is there a pythonic way to access data files both in local testing of a module and in the distributed package (e.g. with <code>wheel</code>)?</p>
<p>Specifically, I have the same question as the comment linked below.</p>
<p><a href="https://stackoverflow.com/questions/779495/python-access-data-in-package-subdirectory/5601839#comment82035646_5601839">Python Access Data in Package Subdirectory</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Putting packages in <code>setup.py</code> in the argument <code>setup(..., data_files=[('', YOUR_DATA_FILES)],...)</code> (the <code>''</code> is the significant part) copies them in-place, and they can be accessed as they would otherwise be, both in local testing and when distributed.</p>
</div>
<span class="comment-copy">The <a href="https://docs.python.org/3/distutils/setupscript.html#installing-additional-files" rel="nofollow noreferrer">documentation</a> should give you the answer you need.</span>
<span class="comment-copy">Essentially setup your <code>setup.py</code> file to include a <code>data_files</code> list and python should package them up with the distributed package (such as when you turn it into a <code>wheel</code>. It'll work locally as well assuming the directory structure doesn't change any during the distribution.</span>
<span class="comment-copy">The problem is that <code>data_files</code> <i>does</i> change the directory structure -- it puts the files at the root under the <code>data</code> directory. For files that are in different folders and subfolders, this would require a manual re-creation of those folders and subfolders, which is tedious and error-prone (any changes to directory structure would have to be re-implemented there). The documentation linked is also for <code>distutils</code>, not for <code>setuptools</code> (sorry I didn't specify in the question, but I already have the file in the <code>wheel</code>, I just need access); does that just happen to have the same specification?</span>
<span class="comment-copy">from the documentation: <code>Note that you can specify the directory names where the data files will be installed, but you cannot rename the data files themselves.</code> which means you should be able to move where the data files get deployed to. <code>data_files=[('path/to/data/files',['data_file1.dat','data_file2.dat']</code>. I think <code>setuptools</code> handles it the same but not 100% on that</span>
<span class="comment-copy">after double checking on how <code>setuptools</code> does their data files it looks to me like it's supposed to copy them in-place. So wherever they are in your local folder should be where they end up in your deployment. What's your <code>setup.py</code> look like?</span>
