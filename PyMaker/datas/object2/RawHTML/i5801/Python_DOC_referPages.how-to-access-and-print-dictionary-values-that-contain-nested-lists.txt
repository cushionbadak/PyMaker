<div class="post-text" itemprop="text">
<p>I'm learning Python and am a bit stuck with the concept of dictionaries and nested lists.</p>
<p>The lab I'm currently working on calls for us to create a dict with some keys having just a single list of values and other keys having two or more lists associated. The code below properly prints the list elements for the key that has multiple lists, but if I change the get statement to a key with a single list I just get the first two digits of the string.</p>
<pre><code>my_dict = {1: ['test', 'values'],
           2: [['test2', 'value2'], ['test3', 'value3']],
           3: ['test4', 'value4']}

for item in my_dict.get(2):
   print('%s, %s' %(item[0], item[1]))
</code></pre>
<p>Would someone explain how to access list values from the dictionary regardless of whether the key has a single list, or multiple lists?</p>
<p>Ultimately the output if key 1 or 3 is used would be</p>
<pre><code>test, values  or test4, value4
</code></pre>
<p>If key 2 is selected the output would be</p>
<pre><code>test2, value2
test3, value3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the updated information you added and comments under your question, this seems to work for the specific case you're dealing with:</p>
<pre><code>my_dict = {1: ['test', 'values'],
           2: [['test2', 'value2'], ['test3', 'value3']],
           3: ['test4', 'value4']}

for key, values in my_dict.items():
    if not isinstance(values[0], list):  # Not a nested list-of-lists?
        print(', '.join(map(str, values)))
    else:
        for value in values:
            print(', '.join(map(str, value)))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>test, values
test2, value2
test3, value3
test4, value4
</code></pre>
<p>To handle single dictionary values as shown in the code in your question, you could do something very similar to the above like this:</p>
<pre><code>elems = my_dict.get(2)
if not isinstance(elems[0], list):  # Not a nested list-of-lists?
    print(', '.join(map(str, elems)))
else:
    for value in elems:
        print(', '.join(map(str, value)))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>test2, value2
test3, value3
</code></pre>
<p><strong>Comment:</strong> Although it may be obvious, this would much easier if you could make the dictionary more consistent, where the values in it were <em>always</em> lists-of-lists as shown below:</p>
<pre><code>my_dict = {1: [['test', 'values']],
           2: [['test2', 'value2'], ['test3', 'value3']],
           3: [['test4', 'value4']]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">Evaluation of <code>item[x]</code> is equivalent to <code>item.__getitem__(x)</code>.</a> For a string, this will be the xth character in the string (you could think of it as a list of characters). For a list, it will be the xth item in the list.</p>
<p>You can use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> to determine if each item in the higher level list is a string or list:</p>
<pre><code>if isinstance(item, list):
    # Do something with list
elif isinstance(item, str):
    # Do something with string
else:
    raise TypeError("expected list or string")
</code></pre>
<p>You could also think about how you could use a recursive function to accomplish this task.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not exactly sure if this is what you mean but the code below prints out each text value:</p>
<pre><code>my_dict= {1: ['test', 'values'], 
      2: [['test2', 'value2'], ['test3', 'value3']], 
      3: ['test4', 'value4']}


for key, value in my_dict.items():
    for x in value:
        if not isinstance(x, list):
            print(x)
        else:
            for y in x:
                print(y)

#output
test
values
test2
value2
test3
value3
test4
value4
</code></pre>
<p>So loop through your dictionary and create a sub-loop through each element (x) of each value in your dictionary. If x is not itself a list, print x. If x is a list, then loop through x, printing each element (y) contained within x.</p>
</div>
<span class="comment-copy">Yeah, see, this is the problem with having inconsistent data-structures. Now, you really have no choice but to check the <code>type</code> of item, and handle each case separately.</span>
<span class="comment-copy">But think about it, <code>item</code> will be a list in <code>my_dict.get(2)</code> but it will be a <i>string</i> for <code>my_dict.get(1)</code>. When you index into a list, you get its elements. When you index into a string, you get individual characters.</span>
<span class="comment-copy">Is there a limit to how deep the lists can be? If it is limited to a list or a list of lists (not a list of lists of lists, etc.), then see the comment by @juanpa.arrivillaga.</span>
<span class="comment-copy">For this lab the keys limited to having only 1 or 2 lists each.   In the real world I would never write code in such a way but to pass my class I have to make this work.   I didn't consider checking the type, but that seems like a very logical way to go here.  Thanks!</span>
<span class="comment-copy">What you have is very close what what I need to accomplish.   Basically I need to pull back the key values and print them just like you have for test, values and test4, value4.  However I also need key 2 to print the same way with each list on a new line.  So ultimately it would be test2, value2\n test3, value3.</span>
<span class="comment-copy">Sorry. that's still not crystal clear. Please edit your question and show the desired output for each dictionary entry.</span>
<span class="comment-copy">OK, that helps clarify things. See my updated answer.</span>
