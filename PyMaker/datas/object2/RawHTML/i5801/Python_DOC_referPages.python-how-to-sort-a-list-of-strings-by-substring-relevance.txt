<div class="post-text" itemprop="text">
<p>I have some list of strings, for example:<br/></p>
<pre><code>["foo bar SOME baz TEXT bob",
"SOME foo bar baz bob TEXT",
"SOME foo TEXT",
"foo bar SOME TEXT baz",     
"SOME TEXT"]
</code></pre>
<p>I want it to be sorted by exactness to <code>SOME TEXT</code> substring (upper case doesn't matter). Something like this order:</p>
<pre><code>["SOME TEXT",
"foo bar SOME TEXT baz",
"SOME foo TEXT",
"foo bar SOME baz TEXT bob",
"SOME foo bar baz bob TEXT"]
</code></pre>
<p>The idea is - the best score gets the string with the best match to substring words position. And for bigger amount of "sloppy" words between substring's words - the lower ordering it gets.<br/>
<br/>
I have found some libraries like <a href="https://pypi.python.org/pypi/fuzzyset" rel="nofollow noreferrer">fuzzyset</a>, or <a href="https://pypi.python.org/pypi/python-Levenshtein/0.12.0" rel="nofollow noreferrer">Levenshtein distance</a> but I'm not sure this is what I need. I know the exact substring by what I want to sort and those libs search the similar words, as I understood. <br/>
<br/>
Actually I need to do this sort after some database query (Postgresql) in my Django project. I have already tried full-text search with its ORM, but didn't get this relevant sort order (it doesn't count the distance between substring words). Next I have tried Haystack+Whoosh, but also at this moment didn't find info how to do this sort there. So idea now is to get query set and next sort it out of the database (yep, I know that might be a bad decision, but for now I want it just work). But if anybody tells me how to do this within any of technologies, I have mentioned here - that will be also super cool. Thank you!<br/>
<br/></p>
<p>p.s. The length of substring supposed to be 2-10 words in max 20 word string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher" rel="nofollow noreferrer">difflib.<strong>SequenceMatcher</strong></a>, to achieve something very similar to your desired output:</p>
<pre><code>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; l = ["foo bar SOME baz TEXT bob", "SOME foo bar baz bob TEXT", "SOME foo TEXT", "foo bar SOME TEXT baz", "SOME TEXT"]
&gt;&gt;&gt; sorted(l, key=lambda z: difflib.SequenceMatcher(None, z, "SOME TEXT").ratio(), reverse=True)
['SOME TEXT', 'SOME foo TEXT', 'foo bar SOME TEXT baz', 'foo bar SOME baz TEXT bob', 'SOME foo bar baz bob TEXT']
</code></pre>
<p>If you can't tell the only difference is that the position of the two elements <code>"foo bar SOME TEXT baz"</code> and <code>"SOME foo TEXT"</code> are swapped compared to your desired output.</p>
</div>
<div class="post-text" itemprop="text">
<p>See your friendly neighborhood <a href="https://docs.python.org/2/howto/sorting.html" rel="nofollow noreferrer">sorting tutorial</a>.  You'll need a sort with a key.  Here's a trivial function to give you the idea; it finds the distance between the two words, returning that as the difference metric.</p>
<pre><code>sentence = ["foo bar SOME baz TEXT bob",
            "SOME foo bar baz bob TEXT",
            "SOME foo TEXT",
            "foo bar SOME TEXT baz",
            "SOME TEXT"]

def match_score(sentence):
    some_pos = sentence.find("SOME")
    text_pos = sentence.find("TEXT")
    return abs(text_pos - some_pos)

sentence.sort(key = lambda x: match_score(x))

for item in sentence:
    print(item)
</code></pre>
<p>Output:</p>
<pre><code>foo bar SOME TEXT baz
SOME TEXT
foo bar SOME baz TEXT bob
SOME foo TEXT
SOME foo bar baz bob TEXT
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my take on it.</p>
<pre><code>l = ["foo bar SOME baz TEXT bob",
"SOME foo bar baz bob TEXT",
"SOME foo TEXT",
"foo bar SOME TEXT baz",     
"SOME TEXT"]

l.sort(key=lambda x: (x.find("SOME")-x.find("TEXT"))*0.9-0.1*x.find("SOME"), reverse=True)

print(l)
</code></pre>
<p>OUTPUT:</p>
<pre><code>['SOME TEXT', 'foo bar SOME TEXT baz', 'SOME foo TEXT', 'foo bar SOME baz TEXT bob', 'SOME foo bar baz bob TEXT']
</code></pre>
<p>So what we have done is sorted the list based on major weight to the distance between "SOME" and "TEXT" and some minor weight to the occurrence of "SOME" in the string.</p>
<p>Another longer way would be to first group the list based on the their distance between SOME and TEXT. And then sort the each group based on the position of "SOME".</p>
</div>
<span class="comment-copy">That's an interesting class I wasn't aware of. +1.</span>
<span class="comment-copy">Yep, this works perfect! Thank you! p.s. Btw difflib was the 3rd library which I have found, but just forgot to mention it here (and also didn't get how to use it properly). :)</span>
<span class="comment-copy">What does those 0.9-0.1 mean? How can be this used with 3+ words substring?</span>
