<div class="post-text" itemprop="text">
<p>It seems like there should be a simpler way than:</p>
<pre><code>import string
s = "string. With. Punctuation?" # Sample string 
out = s.translate(string.maketrans("",""), string.punctuation)
</code></pre>
<p>Is there?</p>
</div>
<div class="post-text" itemprop="text">
<p>From an efficiency perspective, you're not going to beat </p>
<pre><code>s.translate(None, string.punctuation)
</code></pre>
<p>For higher versions of Python use the following code:</p>
<pre><code>s.translate(str.maketrans('', '', string.punctuation))
</code></pre>
<p>It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.</p>
<p>If speed isn't a worry, another option though is:</p>
<pre><code>exclude = set(string.punctuation)
s = ''.join(ch for ch in s if ch not in exclude)
</code></pre>
<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.</p>
<p>Timing code:</p>
<pre><code>import re, string, timeit

s = "string. With. Punctuation"
exclude = set(string.punctuation)
table = string.maketrans("","")
regex = re.compile('[%s]' % re.escape(string.punctuation))

def test_set(s):
    return ''.join(ch for ch in s if ch not in exclude)

def test_re(s):  # From Vinko's solution, with fix.
    return regex.sub('', s)

def test_trans(s):
    return s.translate(table, string.punctuation)

def test_repl(s):  # From S.Lott's solution
    for c in string.punctuation:
        s=s.replace(c,"")
    return s

print "sets      :",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)
print "regex     :",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)
print "translate :",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)
print "replace   :",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)
</code></pre>
<p>This gives the following results:</p>
<pre><code>sets      : 19.8566138744
regex     : 6.86155414581
translate : 2.12455511093
replace   : 28.4436721802
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are simple enough, if you know them. </p>
<pre><code>import re
s = "string. With. Punctuation?"
s = re.sub(r'[^\w\s]','',s)
</code></pre>
<p>In above code, we are substituting(re.sub) all NON[alphanumeric characters(\w) and spaces(\s)] with empty string.<br/>
Hence . and ? punctuation won't be present in variable 's' after running s variable through regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the convenience of usage, I sum up the note of striping punctuation from a string in both Python 2 and Python 3. Please refer to other answers for the detailed description.</p>
<hr/>
<p><strong>Python 2</strong></p>
<pre><code>import string

s = "string. With. Punctuation?"
table = string.maketrans("","")
new_s = s.translate(table, string.punctuation)      # Output: string without punctuation
</code></pre>
<hr/>
<p><strong>Python 3</strong></p>
<pre><code>import string

s = "string. With. Punctuation?"
table = str.maketrans({key: None for key in string.punctuation})
new_s = s.translate(table)                          # Output: string without punctuation
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>myString.translate(None, string.punctuation)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually use something like this:</p>
<pre><code>&gt;&gt;&gt; s = "string. With. Punctuation?" # Sample string
&gt;&gt;&gt; import string
&gt;&gt;&gt; for c in string.punctuation:
...     s= s.replace(c,"")
...
&gt;&gt;&gt; s
'string With Punctuation'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>string.punctuation</code> is ASCII <em>only</em>! A more correct (but also much slower) way is to use the unicodedata module:</p>
<pre><code># -*- coding: utf-8 -*-
from unicodedata import category
s = u'String — with -  «punctation »...'
s = ''.join(ch for ch in s if category(ch)[0] != 'P')
print 'stripped', s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not necessarily simpler, but a different way, if you are more familiar with the re family. </p>
<pre><code>import re, string
s = "string. With. Punctuation?" # Sample string 
out = re.sub('[%s]' % re.escape(string.punctuation), '', s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3 <code>str</code> or Python 2 <code>unicode</code> values, <a href="http://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate()</code></a> only takes a dictionary; codepoints (integers) are looked up in that mapping and anything mapped to <code>None</code> is removed.</p>
<p>To remove (some?) punctuation then, use:</p>
<pre><code>import string

remove_punct_map = dict.fromkeys(map(ord, string.punctuation))
s.translate(remove_punct_map)
</code></pre>
<p>The <a href="http://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="noreferrer"><code>dict.fromkeys()</code> class method</a> makes it trivial to create the mapping, setting all values to <code>None</code> based on the sequence of keys.</p>
<p>To remove <em>all</em> punctuation, not just ASCII punctuation, your table needs to be a little bigger; see <a href="https://stackoverflow.com/questions/11066400/remove-punctuation-from-unicode-formatted-strings/11066687#11066687">J.F. Sebastian's answer</a> (Python 3 version):</p>
<pre><code>import unicodedata
import sys

remove_punct_map = dict.fromkeys(i for i in range(sys.maxunicode)
                                 if unicodedata.category(chr(i)).startswith('P'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>string.punctuation</code> misses loads of punctuation marks that are commonly used in the real world. How about a solution that works for non-ASCII punctuation?</p>
<pre><code>import regex
s = u"string. With. Some・Really Weird、Non？ASCII。 「（Punctuation）」?"
remove = regex.compile(ur'[\p{C}|\p{M}|\p{P}|\p{S}|\p{Z}]+', regex.UNICODE)
remove.sub(u" ", s).strip()
</code></pre>
<p>Personally, I believe this is the best way to remove punctuation from a string in Python because:</p>
<ul>
<li>It removes all Unicode punctuation</li>
<li>It's easily modifiable, e.g. you can remove the <code>\{S}</code> if you want to remove punctuation, but keep symbols like <code>$</code>.</li>
<li>You can get really specific about what you want to keep and what you want to remove, for example <code>\{Pd}</code> will only remove dashes.</li>
<li>This regex also normalizes whitespace. It maps tabs, carriage returns, and other oddities to nice, single spaces.</li>
</ul>
<p>This uses Unicode character properties, which <a href="https://en.wikipedia.org/wiki/Unicode_character_property" rel="noreferrer">you can read more about on Wikipedia</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This might not be the best solution however this is how I did it.</p>
<pre><code>import string
f = lambda x: ''.join([i for i in x if i not in string.punctuation])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a function I wrote. It's not very efficient, but it is simple and you can add or remove any punctuation that you desire:</p>
<pre><code>def stripPunc(wordList):
    """Strips punctuation from list of words"""
    puncList = [".",";",":","!","?","/","\\",",","#","@","$","&amp;",")","(","\""]
    for punc in puncList:
        for word in wordList:
            wordList=[word.replace(punc,'') for word in wordList]
    return wordList
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a one-liner for Python 3.5:</p>
<pre><code>import string
"l*ots! o(f. p@u)n[c}t]u[a'ti\"on#$^?/".translate(str.maketrans({a:None for a in string.punctuation}))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I haven't seen this answer yet. Just use a regex; it removes all characters besides word characters (<code>\w</code>) and number characters (<code>\d</code>), followed by a whitespace character (<code>\s</code>):</p>
<pre><code>import re
s = "string. With. Punctuation?" # Sample string 
out = re.sub(ur'[^\w\d\s]+', '', s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution without regex.</p>
<pre><code>import string

input_text = "!where??and!!or$$then:)"
punctuation_replacer = string.maketrans(string.punctuation, ' '*len(string.punctuation))    
print ' '.join(input_text.translate(punctuation_replacer).split()).strip()

Output&gt;&gt; where and or then
</code></pre>
<ul>
<li>Replaces the punctuations with spaces </li>
<li>Replace multiple spaces in between words with a single space </li>
<li>Remove the trailing spaces, if any with
strip()</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Just as an update, I rewrote the @Brian example in Python 3 and made changes to it to move regex compile step inside of the function. My thought here was to time every single step needed to make the function work. Perhaps you are using distributed computing and can't have regex object shared between your workers and need to have <code>re.compile</code> step at each worker. Also, I was curious to time two different implementations of maketrans for Python 3</p>
<pre><code>table = str.maketrans({key: None for key in string.punctuation})
</code></pre>
<p>vs </p>
<pre><code>table = str.maketrans('', '', string.punctuation)
</code></pre>
<p>Plus I added another method to use set, where I take advantage of intersection function to reduce number of iterations.</p>
<p>This is the complete code:</p>
<pre><code>import re, string, timeit

s = "string. With. Punctuation"


def test_set(s):
    exclude = set(string.punctuation)
    return ''.join(ch for ch in s if ch not in exclude)


def test_set2(s):
    _punctuation = set(string.punctuation)
    for punct in set(s).intersection(_punctuation):
        s = s.replace(punct, ' ')
    return ' '.join(s.split())


def test_re(s):  # From Vinko's solution, with fix.
    regex = re.compile('[%s]' % re.escape(string.punctuation))
    return regex.sub('', s)


def test_trans(s):
    table = str.maketrans({key: None for key in string.punctuation})
    return s.translate(table)


def test_trans2(s):
    table = str.maketrans('', '', string.punctuation)
    return(s.translate(table))


def test_repl(s):  # From S.Lott's solution
    for c in string.punctuation:
        s=s.replace(c,"")
    return s


print("sets      :",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000))
print("sets2      :",timeit.Timer('f(s)', 'from __main__ import s,test_set2 as f').timeit(1000000))
print("regex     :",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000))
print("translate :",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000))
print("translate2 :",timeit.Timer('f(s)', 'from __main__ import s,test_trans2 as f').timeit(1000000))
print("replace   :",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000))
</code></pre>
<p>This is my results:</p>
<pre><code>sets      : 3.1830138750374317
sets2      : 2.189873124472797
regex     : 7.142953420989215
translate : 4.243278483860195
translate2 : 2.427158243022859
replace   : 4.579746678471565
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s = "string. With. Punctuation?"
&gt;&gt;&gt; s = re.sub(r'[^\w\s]','',s)
&gt;&gt;&gt; re.split(r'\s*', s)


['string', 'With', 'Punctuation']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
s = "string. With. Punctuation?" # Sample string 
out = re.sub(r'[^a-zA-Z0-9\s]', '', s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A one-liner might be helpful in not very strict cases:</p>
<pre><code>''.join([c for c in s if c.isalnum() or c.isspace()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do search and replace using the regex functions, as seen <a href="http://www.amk.ca/python/howto/regex/regex.html#SECTION000620000000000000000" rel="nofollow noreferrer">here.</a>. If you have to repeatedly perform the operation, you can keep a compiled copy of the regex pattern (your punctuation) around, which will speed things up a bit.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#FIRST METHOD
#Storing all punctuations in a variable    
punctuation='!?,.:;"\')(_-'
newstring='' #Creating empty string
word=raw_input("Enter string: ")
for i in word:
     if(i not in punctuation):
                  newstring+=i
print "The string without punctuation is",newstring

#SECOND METHOD
word=raw_input("Enter string: ")
punctuation='!?,.:;"\')(_-'
newstring=word.translate(None,punctuation)
print "The string without punctuation is",newstring


#Output for both methods
Enter string: hello! welcome -to_python(programming.language)??,
The string without punctuation is: hello welcome topythonprogramminglanguage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('one.txt','r')as myFile:

    str1=myFile.read()

    print(str1)


    punctuation = ['(', ')', '?', ':', ';', ',', '.', '!', '/', '"', "'"] 

for i in punctuation:

        str1 = str1.replace(i," ") 
        myList=[]
        myList.extend(str1.split(" "))
print (str1) 
for i in myList:

    print(i,end='\n')
    print ("____________")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Remove stop words from the text file using Python </p>
<pre><code>print('====THIS IS HOW TO REMOVE STOP WORS====')

with open('one.txt','r')as myFile:

    str1=myFile.read()

    stop_words ="not", "is", "it", "By","between","This","By","A","when","And","up","Then","was","by","It","If","can","an","he","This","or","And","a","i","it","am","at","on","in","of","to","is","so","too","my","the","and","but","are","very","here","even","from","them","then","than","this","that","though","be","But","these"

    myList=[]

    myList.extend(str1.split(" "))

    for i in myList:

        if i not in stop_words:

            print ("____________")

            print(i,end='\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how to change our documents to uppercase 
or lower case.</p>
<pre><code>print('@@@@This is lower case@@@@')

with open('students.txt','r')as myFile:

    str1=myFile.read()
    str1.lower()
print(str1.lower())

print('*****This is upper case****')

with open('students.txt','r')as myFile:

    str1=myFile.read()

    str1.upper()

print(str1.upper())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like to use a function like this:</p>
<pre><code>def scrub(abc):
    while abc[-1] is in list(string.punctuation):
        abc=abc[:-1]
    while abc[0] is in list(string.punctuation):
        abc=abc[1:]
    return abc
</code></pre>
</div>
<span class="comment-copy">Seems pretty straightforward to me. Why do you want to change it? If you want it easier just wrap what you just wrote in a function.</span>
<span class="comment-copy">Well, it just seemed kind of hackish to be be using kind of a side effect of str.translate to be doing the work. I was thinking there might be something more like str.strip(chars) that worked on the entire string instead of just the boundaries that I had missed.</span>
<span class="comment-copy">Depends on the data too. Using this on data where there are server names with underscores as part of the name (pretty common some places) could be bad. Just be sure that you know the data and what it conatains or you could end up with a subset of the clbuttic problem.</span>
<span class="comment-copy">Depends also on what you call punctuation. "<code>The temperature in the O'Reilly &amp; Arbuthnot-Smythe server's main rack is 40.5 degrees.</code>" contains exactly ONE punctuation character, the second "."</span>
<span class="comment-copy">I'm surprised no one mentioned that <code>string.punctuation</code> doesn't include non-English punctuation at all. I'm thinking about 。，！？：×“”〟, and so on.</span>
<span class="comment-copy">Thanks for the timing info, I was thinking about doing something like that myself, but yours is better written than anything I would have done and now I can use it as a template for any future timing code I want to write:).</span>
<span class="comment-copy">Great answer. You can simplify it by removing the table. The docs say: "set the table argument to None for translations that only delete characters" (<a href="http://docs.python.org/library/stdtypes.html#str.translate" rel="nofollow noreferrer">docs.python.org/library/stdtypes.html#str.translate</a>)</span>
<span class="comment-copy">worth noting too that translate() behaves differently for str and unicode objects, so you need to be sure you're always working with the same datatype, but the approach in this answer works equally well for both, which is handy.</span>
<span class="comment-copy">In Python3,  <code>table = string.maketrans("","")</code> should be replaced with <code>table = str.maketrans({key: None for key in string.punctuation})</code>?</span>
<span class="comment-copy">To update the discussion, as of Python 3.6, <code>regex</code> is now the most efficient method! It is almost 2x faster than translate. Also, sets and replace are no longer so bad! They are both improved by over a factor of 4 :)</span>
<span class="comment-copy">Great.. Can you explain?</span>
<span class="comment-copy">For unicode, does it work???</span>
<span class="comment-copy">@Outlier Explanation: replaces not (^) word characters or spaces with the empty string. Be careful though, the \w matches underscore too usually for example.</span>
<span class="comment-copy">@SIslam I think it will work with unicode with the unicode flag set, i.e. <code>s = re.sub(r'[^\w\s]','',s, re.UNICODE)</code>. Testing it with python 3 on linux it works even without the flag using tamil letters, தமிழ்.</span>
<span class="comment-copy">This is one place where you probably <i>should</i> be using regex.</span>
<span class="comment-copy">Minor note: You don't need a <code>dict</code> comprehension to make a <code>dict</code> of given keys mapping to <code>None</code>; <code>{key: None for key in string.punctuation}</code> can be replaced with <code>dict.fromkeys(string.punctuation)</code> which does all the work at the C layer with a single call.</span>
<span class="comment-copy">@ShadowRanger, thank you for this update.</span>
<span class="comment-copy">ah, I tried this but it doesn't work in all cases. myString.translate(string.maketrans("",""), string.punctuation) works fine.</span>
<span class="comment-copy">When does it not work?</span>
<span class="comment-copy">Note that for <code>str</code> in Python 3, and <code>unicode</code> in Python 2, the <code>deletechars</code> argument is not supported.</span>
<span class="comment-copy">myString.translate(string.maketrans("",""), string.punctuation) will NOT work with unicode strings (found out the hard way)</span>
<span class="comment-copy"><code>TypeError: translate() takes exactly one argument (2 given)</code> :(</span>
<span class="comment-copy">An uglified one-liner: <code>reduce(lambda s,c: s.replace(c, ''), string.punctuation, s)</code>.</span>
<span class="comment-copy">great, however doesn't remove some puctuation like longer hyphen</span>
<span class="comment-copy">You could: <a href="http://stackoverflow.com/a/11066687/4279"><code>regex.sub(ur"\p{P}+", "", text)</code></a></span>
<span class="comment-copy">Works because string.punctuation has the sequence ,-. in proper, ascending, no-gaps, ASCII order.  While Python has this right, when you try to use a subset of string.punctuation, it can be a show-stopper because of the surprise "-".</span>
<span class="comment-copy">Actually, its still wrong.  The sequence "\]" gets treated as an escape (coincidentally not closing the ] so bypassing another failure), but leaves \ unescaped.  You should use re.escape(string.punctuation) to prevent this.</span>
<span class="comment-copy">Yes, I omitted it because it worked for the example to keep things simple, but you are right that it should be incorporated.</span>
<span class="comment-copy">To support Unicode, <code>string.punctuation</code> is not enough. See <a href="http://stackoverflow.com/a/11066687/4279">my answer</a></span>
<span class="comment-copy">@J.F.Sebastian: indeed, my answer was just using the same characters as the top-voted one. Added a Python 3 version of your table.</span>
<span class="comment-copy">the top-voted answer works only for ascii strings. Your answer claims explicitly the Unicode support.</span>
<span class="comment-copy">@J.F.Sebastian: it works for Unicode strings. It strips ASCII punctuation. I never claimed it strips <i>all</i> punctuation. :-) The point was to provide the correct technique for <code>unicode</code> objects vs. Python 2 <code>str</code> objects.</span>
<span class="comment-copy"><code>\d</code> is redundant since it is a subset of <code>\w</code>.</span>
<span class="comment-copy">Number characters are considered a subset of Word characters? I thought a Word character was any character that could construct a real word, e.g. a-zA-Z?</span>
<span class="comment-copy">Yes, a "word" in regex includes alphabets, numbers and underscore. Please see the description for <code>\w</code> in the documentation: <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a></span>
<span class="comment-copy">Please edit with more information. Code-only and "try this" answers are discouraged, because they contain no searchable content, and don't explain why someone should "try this".</span>
<span class="comment-copy">Is string.punctuation locale corrected? If so, this might not be the best solution.</span>
<span class="comment-copy">I'm not sure, I haven't used it. I'm assuming that the poster/reader will know what punctuation they are replacing.</span>
<span class="comment-copy">Ehh...I don't know either. I would expect .punctuation to be locale corrected, but I wouldn't rely on it. You are probably right that if the user has a specific set of characters, then a compiled regex would be a good way to go.</span>
<span class="comment-copy">This is stripping characters from the start and end; use <code>abc.strip(string.punctuation)</code> instead for that. It won't remove such characters <i>in the middle</i>.</span>
