<div class="post-text" itemprop="text">
<p>The docs on <a href="https://docs.python.org/3/library/typing.html#typing.Dict" rel="nofollow noreferrer"><code>Dict</code></a> show it being used as a generic type, like this:</p>
<pre><code>def get_position_in_index(word_list: Dict[str, int], word: str) -&gt; int:
    return word_list[word]
</code></pre>
<p>It would also, of course, be correct to type-hint <code>word_list</code> above as <code>dict</code>:</p>
<pre><code>def get_position_in_index(word_list: dict, word: str) -&gt; int:
    return word_list[word]
</code></pre>
<p>But is it correct to use <code>Dict</code> as a type-hint on its own to indicate a <code>dict</code> with keys and values of any type, like this?</p>
<pre><code>def get_position_in_index(word_list: Dict, word: str) -&gt; int:
    return word_list[word]
</code></pre>
<p>(And likewise, can other generic types like <code>List</code> and <code>Sequence</code> be used bare in this way?)</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>Dict</code> is considered to be an alias for <code>Dict[Any, Any]</code>. (And <code>dict</code> is also an alias for <code>Dict[Any, Any]</code>).</p>
<p>This is the case for any generic type, whether it's a builtin one or a custom-made one: if you omit the type parameters, they always default to <code>Any</code>. This is specified in the <a href="https://www.python.org/dev/peps/pep-0484/#generics" rel="nofollow noreferrer"><em>Generics</em> section of PEP 484</a> (emphasis added):</p>
<blockquote>
<p>Additionally, <code>Any</code> is a valid value for every type variable. Consider the following:</p>
<pre><code>def count_truthy(elements: List[Any]) -&gt; int:
    return sum(1 for elem in elements if element)
</code></pre>
<p><strong><em>This is equivalent to omitting the generic notation and just saying <code>elements: List</code>.</em></strong></p>
</blockquote>
<p>That said, I think the general recommendation is that you should fully write out <code>Dict[Any, Any]</code> instead of using just <code>Dict</code> -- <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">explicit is better then implicit</a>, and so forth.</p>
<p>The only downside is that your function type signatures are now longer. But we can work around that by using type aliases:</p>
<pre><code>from typing import Dict, Any

AnyDict = Dict[Any, Any]
WordDict = Dict[str, int]

# Equivalent to your first code sample
def get_position_in_index_1(word_list: WordDict, word: str) -&gt; int:
    return word_list[word]

# Equivalent to your second and third code samples
def get_position_in_index_2(word_list: AnyDict, word: str) -&gt; int:
    return word_list[word]
</code></pre>
</div>
