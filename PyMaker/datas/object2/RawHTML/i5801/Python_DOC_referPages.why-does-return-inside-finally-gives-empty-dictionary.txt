<div class="post-text" itemprop="text">
<p>I want to keep a track of exceptions inside a dictionary and return the same. However when I do so, finally block gives me an empty dictionary. The logic pretty much works for scalars. Can someone explain the behavior please.</p>
<p>In scalar context:</p>
<pre><code>def test():
    temp = 1
    try:
        raise ValueError("sdfs")
    except:
        temp = 2
    finally:
        temp = temp + 3
        return temp
test()
5
</code></pre>
<p>With dictionary: </p>
<pre><code>def test():
    temp = dict()
    try:
        raise ValueError("something")
    except Exception as error:
        print("error is :{}".format(error))
        temp['except'] = "something" + error
    finally:
        return temp

test()
error is : something
{}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You caused another exception to be raised in the exception handler, which is swallowed because there is a <code>finally</code> handler that <em>returns from the function</em>.</p>
<p>You can't just concatenate an exception object and a string, so an additional <code>TypeError</code> is raised, and the assignment to the dictionary is never reached.</p>
<p>Converting the exception to a string first works:</p>
<pre><code>&gt;&gt;&gt; def test():
...     temp = dict()
...     try:
...         raise ValueError("something")
...     except Exception as error:
...         print("error is :{}".format(error))
...         temp['except'] = "something" + str(error)
...     finally:
...         return temp
...
&gt;&gt;&gt; test()
error is :something
{'except': 'somethingsomething'}
</code></pre>
<p>From the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow noreferrer"><code>try</code> statement documentation</a>:</p>
<blockquote>
<p>If <code>finally</code> is present, it specifies a ‘cleanup’ handler. The <code>try</code> clause is executed, including any <code>except</code> and <code>else</code> clauses. <strong>If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved</strong>. The <code>finally</code> clause is executed. If there is a saved exception it is re-raised at the end of the <code>finally</code> clause. If the <code>finally</code> clause raises another exception, the saved exception is set as the context of the new exception. <strong>If the <code>finally</code> clause executes a <code>return</code> or <code>break</code> statement, the saved exception is discarded</strong>[.]</p>
</blockquote>
<p>(Bold emphasis mine).</p>
</div>
<div class="post-text" itemprop="text">
<p>The line <code>"something" + error</code> raises an error which is discarded because you returned from <code>finally</code>. Due to the error the assignment to the dictionary <code>temp</code> is never performed giving the impression that nothing happens.</p>
<p>This is stated in <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow noreferrer">the documentation</a> for <code>try-except</code>:</p>
<blockquote>
<p>If finally is present, it specifies a ‘cleanup’ handler. The <code>try</code>
  clause is executed, including any except and else clauses. <em>If an
  exception occurs in any of the clauses and is not handled, the
  exception is temporarily saved</em>. The finally clause is executed. If
  there is a saved exception it is re-raised at the end of the finally
  clause. If the finally clause raises another exception, the saved
  exception is set as the context of the new exception. <em>If the finally
  clause executes a return or break statement, the saved exception is
  discarded.</em></p>
</blockquote>
<p><sup><sup>(Emphasis mine)</sup></sup></p>
<p>Without an error (i.e <code>temp['except'] = error</code> you get the expected behavior:</p>
<pre><code>&gt;&gt;&gt; test()
error is :something
{'except': ValueError('something')}
</code></pre>
</div>
<span class="comment-copy">Where is the code that prints the final result?</span>
<span class="comment-copy">Note that Python does not have a 'scalar context' concept. You are thinking of Perl there, perhaps.</span>
<span class="comment-copy">yes...you got the context though :)</span>
<span class="comment-copy">Spot on...thank you very much!!</span>
