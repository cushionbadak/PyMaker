<div class="post-text" itemprop="text">
<p>Let's say I have a string like this:</p>
<pre><code>s = '(X_xy09 and X_foobar or (X_abc123 and X_something))'
</code></pre>
<p>and I want to turn it into </p>
<pre><code>'(xy09 and foobar or (abc123 and something))'
</code></pre>
<p>then - in this particular case - I could simply do</p>
<pre><code>s.replace('X_', "")
</code></pre>
<p>which gives the desired output.</p>
<p>However, in my actual data there might be not only <code>X_</code> but also other prefixes, so the above <code>replace</code> statement does not work.</p>
<p>What I would need instead is a replacement of </p>
<p>a capital letter followed by an underscore and an arbitrary sequence of letters and numbers</p>
<p>by</p>
<p>everything after the first underscore. </p>
<p>So, to extract the desired elements I could use:</p>
<pre><code>import re
print(re.findall('[A-Z]{1}_[a-zA-Z0-9]+', s))
</code></pre>
<p>which prints</p>
<pre><code>['X_xy09', 'X_foobar', 'X_abc123', 'X_something']
</code></pre>
<p>how can I now replace those elements so that I obtain</p>
<pre><code>'(xy09 and foobar or (abc123 and something))'
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to remove an uppercase ASCII letter with an underscore after it, only when not preceded with a word char and when followed with an alphanumeric char, you may use</p>
<pre><code>import re
s = '(X_xy09 and X_foobar or (X_abc123 and X_something))'
print(re.sub(r'\b[A-Z]_([a-zA-Z0-9])', r'\1', s))
</code></pre>
<p>See the <a href="https://ideone.com/Qs9ldO" rel="nofollow noreferrer">Python demo</a> and a <a href="https://regex101.com/r/4YDuuS/1" rel="nofollow noreferrer">regex demo</a>.</p>
<p><strong>Pattern details</strong></p>
<ul>
<li><code>\b</code> - a leading word boundary </li>
<li><code>[A-Z]_</code> - an ASCII uppercase letter and <code>_</code></li>
<li><code>([a-zA-Z0-9])</code> - Group 1 (later referenced to with <code>\1</code> from the replacement pattern): 1 alphanumeric char.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you just need to replace a capital letter followed by an underscore, you can use the regular expression <code>r'[A-Z]_'</code>.</p>
<pre><code>s = '(X_xy09 and X_foobar or (X_abc123 and X_something))'
re.sub(r'[A-Z]_', '', s)
</code></pre>
<p>You may need to add to it if you have other criteria not mentioned. (For example, some of your target values follow a word boundary and some follow parentheses.) The above might give you the wrong output if you have input like <code>XY_something</code>. It depends on what you expect the output to be.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another <code>re.sub()</code> approach:</p>
<pre><code>import re

s = '(X_xy09 and X_foobar or (X_abc123 and X_something))'
result = re.sub(r'[A-Z]_(?=[a-zA-Z0-9]+)', '', s)

print(result)
</code></pre>
<p>The output:</p>
<pre><code>(xy09 and foobar or (abc123 and something))
</code></pre>
<hr/>
<ul>
<li><code>[A-Z]_(?=[a-zA-Z0-9]+)</code> - <code>(?=...)</code> <em>positive lookahead assertion</em>, ensures that substituted <code>[A-Z]_</code> substring is followed by alphanumeric sequence <code>[a-zA-Z0-9]+</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> with a lookahead assertion:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '(X_xy09 and X_foobar or (X_abc123 and X_something))'
&gt;&gt;&gt; re.sub(r'\b[A-Z]_(?=[a-zA-Z0-9])', '', s)
'(xy09 and foobar or (abc123 and something))'
</code></pre>
<p>from the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><code>(?=...)</code><br/>
      Matches if <code>...</code> matches next, but doesn’t consume any of the string. This is called a <em>lookahead assertion</em>. For example, <code>Isaac (?=Asimov)</code> will match <code>'Isaac '</code> only if it’s followed by <code>'Asimov'</code>.</p>
</blockquote>
</div>
<span class="comment-copy">Tried using <code>re.sub</code>?</span>
<span class="comment-copy">@WiktorStribiżew: Would love to, but don't know how to use it in this case. If you know how, feel free to post it as an answer... :)</span>
<span class="comment-copy">Try <a href="https://ideone.com/Qs9ldO" rel="nofollow noreferrer">ideone.com/Qs9ldO</a>. What are the exact criteria for the pattern? Should it start with a word boundary or only after <code>(</code>?</span>
<span class="comment-copy">@WiktorStribiżew: Ah, backreferencing! Great, that solves it. Please post it as an answer,  then I upvote and accept. The pattern is as simple as described: capital letter, underscore, some arbitrary stuff. There are not always <code>(</code> involved.</span>
<span class="comment-copy"><code>re.sub(r'[A-Z]_(?=[a-zA-Z0-9])', '', s)</code></span>
<span class="comment-copy">Great thanks, works fine!</span>
<span class="comment-copy">Note that it is equal to <code>re.sub(r'\b[A-Z]_(?=[a-zA-Z0-9])', '', s)</code></span>
<span class="comment-copy">Nice solution, too.</span>
<span class="comment-copy">Works fine. What is the <code>?=</code> part for?</span>
<span class="comment-copy">@Cleb, that's positive lookahead assertion, see my explanation</span>
<span class="comment-copy">Seems to be the same as RomanPerekhrest' answer but still deserves an upvote... :)</span>
