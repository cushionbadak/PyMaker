<div class="post-text" itemprop="text">
<p>This is working:</p>
<pre><code>represent_dict_order = lambda self, data: self.represent_mapping('tag:yaml.org,2002:map', data.items())
yaml.add_representer(OrderedDict, represent_dict_order)
</code></pre>
<p>But gives me a <code>PyCharm</code> warning: <code>PEP8: do not assign a lambda expression, use a def</code></p>
<p>I follow the advice, but this is not working:</p>
<pre><code>def represent_dict_order(self, data):
    self.represent_mapping('tag:yaml.org,2002:map', data.items())
yaml.add_representer(OrderedDict, represent_dict_order)
</code></pre>
<p>I get:</p>
<pre><code>yaml.emitter.EmitterError: expected NodeEvent, but got DocumentEndEvent()
</code></pre>
<p>I have two questions:</p>
<ol>
<li>Why is the <code>lambda</code> working and the <code>def</code> not? Aren't they supposed to be equivalent?</li>
<li>How can I stop <code>PyCharm</code> complaining about this specific error? I tried preceeding the lambda with <code>#noinspection</code> but it is not recognized.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Lambda expressions come with an <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">implicit return</a>. Therefore your lambda expression is returning the return value of <code>self.represent_mapping</code> but your function definition is not due to the missing return.</p>
</div>
<span class="comment-copy">Your lambda has a return value compared to your function definition with def.</span>
<span class="comment-copy">@strippenzieher: ooops, implicit return, right. Embarrassing, but I'll accept an answer.</span>
<span class="comment-copy">For your second question, if you mean the PEP8 warning, you would need to ignore E731.See <a href="https://stackoverflow.com/questions/28428307/pycharms-code-style-inspection-ignore-switch-off-specific-rules" title="pycharms code style inspection ignore switch off specific rules">stackoverflow.com/questions/28428307/â€¦</a></span>
<span class="comment-copy">"Explicit is better than implicit" :)</span>
