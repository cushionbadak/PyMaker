<div class="post-text" itemprop="text">
<p>I am new to Python and would be grateful if someone coud answer</p>
<p>I have the following list of dictionary</p>
<pre><code>{'body': 'text'},
{'correctAnswer': 'text'},
{'ans': 'text'},
{'ans': 'text'}
</code></pre>
<p>And Desired output is:</p>
<pre><code>{'body': 'text', 'correctAnswer': 'text','ans_1': 'text', 'ans_2': 'text'}
</code></pre>
<p>How can i replace the keys and values with the desired order</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import itertools, re
s = [{'body': 'text'}, {'correctAnswer': 'text'}, {'ans': 'text'}, {'ans': 'text'}]
new_data = list(itertools.chain.from_iterable([i.items() for i in s]))
final_data = [(a, list(b)) for a, b in itertools.groupby(sorted(new_data), key=lambda x:x[0])]
possibilies = [(a, [i[-1] for i in b]) for a, b in final_data]
final_dict = {}
for key, value in possibilies:
   for i, a in enumerate(value, start = 1):
       final_dict["{}_{}".format(key, i)] = a 

new_final_dict = {a[:a.index('_')] if [c[:c.index('_')] for c in final_dict].count(a[:a.index('_')]) == 1 else a:b for a, b in final_dict.items()}
sort_key = ['body', 'correctAnswer', 'ans_1', 'ans_2']
final_data = sorted(new_final_dict.items(), key=lambda x:sort_key.index(x[0]) if not x[0][-1].isdigit() else int(re.findall('\d+$', x[0])[0]))
print(final_data)
</code></pre>
<p>Output:</p>
<pre><code>[('body', 'text'), ('correctAnswer', 'text'), ('ans_1', 'text'), ('ans_2', 'text')]
</code></pre>
<p>Using <code>collections.OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict
d = OrderedDict()
sort_key = ['body', 'correctAnswer', 'ans_1', 'ans_2']
final_data = sorted(new_final_dict.items(), key=lambda x:sort_key.index(x[0]) if not x[0][-1].isdigit() else int(re.findall('\d+$', x[0])[0]))
for a, b in final_data:
    d[a] = b

print(d)
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([('body', 'text'), ('correctAnswer', 'text'), ('ans_1', 'text'), ('ans_2', 'text')])
</code></pre>
<p><code>OrderedDict</code> will allow you to view the contains of the dictionary in desired sorted order, and will also allow you to access the values by key as you would a normal dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can probably use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby

lst = [{'body': 'text'}, {'correctAnswer': 'text'}, {'ans': 'text'},
       {'ans': 'text'}]
lst.sort(key=lambda x: list(x)[0])

d = {}

for k, g in groupby(lst, key=lambda x: list(x)[0]):
    l = list(g)
    if len(l) &gt; 1:
        for i, v in enumerate(l, 1):
            d["{}_{}".format(k, i)] = list(v.values())[0]
    else:
        d[k] = list(l[0].values())[0]
print(d)  # {'body': 'text', 'correctAnswer': 'text', 'ans_1': 'text', 'ans_2': 'text'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this with the update method.</p>
<p>If you have the following dictionaries named:</p>
<pre><code>dict1 = {'body': 'text'}
dict2 = {'correctAnswer': 'text'}
dict3 = {'ans': 'text'}
dict4 = {'ans': 'text'}
</code></pre>
<p>Then by doing the following will get you the desired:</p>
<pre><code>d0 = dict1.copy()
d0.update(dict2)
d0.update(dict3)
d0.update(dict4)
print(d0)#will contain all 4 dicts
</code></pre>
<p>You can imagine how to do this with a loop if you have an array of dicts and need to iterate.</p>
<p>Edit:
Just saw you wanted different keys. You can just do something like the following to check before each update:</p>
<pre><code>countDict = {}

key = 'ans'
if key in countDict:
    i = countDict[key]
    countDict[key] = i+1
    key+str(i)
else:
    countDict[key] = 0

d0[key] = 'text'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>L = [{'body': 'text'},
{'correctAnswer': 'text'},
{'ans': 'text'},
{'ans': 'text'},
{'ans': 'text'}]

def key_startswith(new_key, new_value, old_d):
    keys_lst = list(old_d.keys())

    # check if there's a key that startswith the new_key
    if any(key.startswith(new_key) for key in keys_lst):

        # check if this key is exactly the same as the new key
        if any(key == new_key for key in keys_lst):
            old_d[new_key+"_1"] = old_d.pop(new_key)
            old_d[new_key+"_2"] = new_value

        # if not exactly the same, add key + "_" + num
        else:
            all_matches = [key for key in keys_lst if key.startswith(new_key)]
            splitted = [int(el.split("_")[-1]) for el in all_matches]
            new_number = max(splitted) + 1
            old_d[new_key+"_"+str(new_number)] = new_value

    else:
        old_d[new_key] = new_value

    return old_d


def zip_all_dicts(lst):
    output = {}

    for el in lst:

        if isinstance(el, dict):
            for k,v in el.items():
                output = key_startswith(k,v,output)

        # if not dict
        else:
            continue

    return output

zip_all_dicts(L)
</code></pre>
<p>Maybe not the prettiest but easy to understand and it works.</p>
<p>Running <code>zip_all_dicts(L)</code> yields:</p>
<p><code>{'ans_1': 'text',
 'ans_2': 'text',
 'ans_3': 'text',
 'body': 'text',
 'correctAnswer': 'text'}</code></p>
</div>
<span class="comment-copy">There is so many ways to do that. Have you tried something ?</span>
<span class="comment-copy">@scharette thank you for comment. Yes tried different solutions on stackoverflow. For example <a href="https://stackoverflow.com/questions/21674331/group-by-multiple-keys-and-summarize-average-values-of-a-list-of-dictionaries" title="group by multiple keys and summarize average values of a list of dictionaries">stackoverflow.com/questions/21674331/â€¦</a>. But all solutions groupint by equal name</span>
<span class="comment-copy">thank you for your answer. It worked for me. But i think i lost the order of questions and answers. How can i sort the questions list?</span>
<span class="comment-copy">@AibolOrazbekov dictionaries are unsorted in Python, however, I wrote a solution that will sort the items of the dictionary so that they can be printed in the desired order. Also, I will add a solution that uses <code>collections.OrderedDict</code> that will retain the desired order.</span>
<span class="comment-copy">thank you very much for your answer. The code ordering the questions by alphabetic letters. It is not correct. i need to just order one by one as in list order</span>
<span class="comment-copy">This solution drops one of the 'ans' keys. In the question they wanted common keys numbered. see <a href="https://hastebin.com/wuhohemegi.py" rel="nofollow noreferrer">hastebin.com/wuhohemegi.py</a></span>
<span class="comment-copy">@Adam ahh, my bad. I'll try to figure something out.</span>
