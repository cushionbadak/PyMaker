<div class="post-text" itemprop="text">
<p>Say I have 2 lists:</p>
<pre><code>A = [a1,a2,a3,...,an]
B = [b1,b2,b3,...,bn]
</code></pre>
<p>The lists are one-to-one.</p>
<p>So how do I create a loop that operates (any operation):</p>
<pre><code>a1 with b1
a2 with b2
...
an with bn
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your lists are one-to-one, then they must both be the same size. In this case <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> is the best option here. This function makes an iterator and aggregates elements into tuple pairs from each of the iterables:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [5, 6, 7, 8]
&gt;&gt;&gt; zipped = zip(a, b)
&gt;&gt;&gt; print(list(zipped))
[(1, 5), (2, 6), (3, 7), (4, 8)]
&gt;&gt;&gt; print(tuple(zipped))
((1, 5), (2, 6), (3, 7), (4, 8))
</code></pre>
<p>This means that you can apply a function on each of the tuples within the zipped iterable:</p>
<pre><code>&gt;&gt;&gt; print([sum(x) for x in zipped])
[6, 8, 10, 12]
&gt;&gt;&gt; print([max(x) for x in zipped])
[5, 6, 7, 8]
</code></pre>
<p>You can also achieve similar behavior with <a href="https://docs.python.org/3.3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a>:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [5, 6, 7, 8]
&gt;&gt;&gt; print(list(map(lambda x, y : x + y, a, b)))
[6, 8, 10, 12]
&gt;&gt;&gt; print(list(map(lambda x, y : x * y, a, b)))
[5, 12, 21, 32]
</code></pre>
<p>I'd also suggest writing a <code>zip()</code> function with iterators to see how it works:</p>
<pre><code>def my_zip(seq1, seq2):
    i1 = iter(seq1)
    i2 = iter(seq2)
    while True:
        yield next(i1), next(i2)
</code></pre>
<p>Additionally, another less preferred way would be to loop over the first list, and use the indices to also access the elements in the second list:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [5, 6, 7, 8]
&gt;&gt;&gt; for i in range(len(a)):
        print(a[i], b[i])
1 5
2 6
3 7
4 8
&gt;&gt;&gt; print([a[i] + b[i] for i in range(len(a))])
[6, 8, 10, 12]
</code></pre>
<p>This is not very pythonic, but it also works. I recommend using <code>zip()</code> over this. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://www.programiz.com/python-programming/methods/built-in/zip" rel="nofollow noreferrer"><strong>zip</strong></a></p>
<pre><code>a = [1,2,3];
b = [4,5,6];

for x,y in zip(a,b):
    print x,y;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to process:</p>
<pre><code>for ea, eb in zip(A, B):
    f(ea, eb)
</code></pre>
<p>If you want to keep results,</p>
<pre><code>[f(ea, eb) for ea, eb in zip(A, B)]
</code></pre>
<p>The <code>zip</code> builtin sews together two or more lists elementwise into a list of tuples that we can then iterate on, either by an explicit loop or by a comprehension.</p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>.  If you had some function <code>add</code> and lists <code>l1 = [1, 2, 3]</code>, <code>l2 = [4, 5, 6]</code> then <code>[add(a, b) for a, b in zip(l1, l2)]</code> would be <code>[5, 7, 9]</code>.  The <code>[_ for _ in _]</code> is called a <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">list comprehension</a></span>
