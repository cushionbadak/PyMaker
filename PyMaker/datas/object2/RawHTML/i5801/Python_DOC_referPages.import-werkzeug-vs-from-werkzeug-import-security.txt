<div class="post-text" itemprop="text">
<p>My current understanding (based on these answers: <a href="https://stackoverflow.com/questions/9439480/from-import-vs-import">one</a>, <a href="https://stackoverflow.com/questions/710551/import-module-or-from-module-import">two</a>, <a href="https://stackoverflow.com/questions/33430939/how-to-understand-from-import-in-python?noredirect=1&amp;lq=1">three</a>; and <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">Python documentation</a>) of how import in Python works is <em>(just in case it matters: all the code snippets are tested on Python 3.6.1)</em>:</p>
<p>Say we have a module <code>mod</code>, which has submodules <code>sub</code> and <code>sub1</code>; <code>sub</code>, in turn, has a function <code>func</code>; then we can (given that <code>mod</code> installed in current environment, of course):</p>
<pre><code>import mod

mod.sub.func()
mod.sub1

# or
import mod.sub

mod.sub.func()
mod.sub1 # will result in "NameError: name 'mod' is not defined"

# or
from mod.sub import func

func()
mod.sub.func() # will result in "NameError: name 'mod' is not defined"
mod.sub1 # will result in "NameError: name 'mod' is not defined"
</code></pre>
<hr/>
<p>Recently, while playing with <code>werkzeug.security.generate_password_hash</code> and <code>werkzeug.security.check_password_hash</code>, in Python console, I have noticed that:</p>
<pre><code>import werkzeug

werkzeug.security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>results in <code>AttributeError: module 'werkzeug' has no attribute 'security'</code>.</p>
<p>Though, the following works fine:</p>
<pre><code>from werkzeug import security

security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>this (of course) too:</p>
<pre><code>import werkzeug.security

werkzeug.security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>as well as this:</p>
<pre><code>from werkzeug.security import generate_password_hash

generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>and, a bit surprisingly (at least for me), this one:</p>
<pre><code>import werkzeug
from werkzeug import security

werkzeug.security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>My questions are:</p>
<ol>
<li>Am I wrong (or lacking details) in some of my notions, concerning how <code>import</code> works in Python?</li>
<li>Why <code>import werkzeug</code> won't give me access to <code>werkzeug.security</code>? My understanding is — it should import <code>werkzeug</code>, along with all of it's submodules/attributes.</li>
<li>Why <code>import werkzeug</code> + <code>from werkzeug import security</code> allows access to <code>werkzeug.security</code>? My understanding: it should bind <strong>two separate names (with no connections between them)</strong>, as follows: <code>werkzeug</code> to <code>import werkzeug</code> (i.e. <code>werkzeug</code> module) and <code>security</code> to <code>from werkzeug import security</code> (i.e. <code>security</code> submodule of <code>werkzeug</code> module.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure I'm able to give a good answer to all your questions, but I found it interesting and took a look and here is my result.</p>
<p>In general, <code>import mod.sub</code> or <code>from mod import sub</code> assumes that <code>sub</code> is a sub-module in a <code>mod</code> package. However, it could also mean that <code>sub</code> is a field/variable declared in a <code>mod</code> module. </p>
<p>The presence of an <em>__init.py__</em>-file <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">will denote</a> that a folder is a package:</p>
<blockquote>
<p>The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package (...).</p>
</blockquote>
<p>I believe that, <code>from werkzeug import security</code> and <code>import werkzeug.security</code> both imports a module <code>security</code>, thus <code>security.generate_password_hash</code> is a known and valid attribute. Basically, <code>from werkzeug.security import generate_password_hash</code> imports that very attribute directly via the valid import statement.</p>
<p>In the <a href="http://werkzeug.pocoo.org/docs/0.13/quickstart/" rel="nofollow noreferrer">Werkzeug Quickstart</a> docs, I found the following:</p>
<blockquote>
<p>Make sure to import all objects from the places the documentation suggests. It is theoretically possible in some situations to import objects from different locations but this is not supported.</p>
</blockquote>
<p>Further, Werkzeug <a href="http://werkzeug.pocoo.org/docs/0.13/transition/" rel="nofollow noreferrer">transition to 1.0</a> states:</p>
<blockquote>
<p>Werkzeug originally had a magical import system hook that enabled everything to be imported from one module and still loading the actual implementations lazily as necessary. Unfortunately this turned out to be slow and also unreliable on alternative Python implementations and Google’s App Engine.</p>
<p>Starting with 0.7 we recommend against the short imports and strongly encourage starting importing from the actual implementation module. Werkzeug 1.0 will disable the magical import hook completely.</p>
</blockquote>
<p>It appears that <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py" rel="nofollow noreferrer">Werkzeug modifies</a> how modules are loaded. (I speculate that this is not uncommon in big packages with contrib-content, e.g. Flask, Django; motivated by ability to lazy-load, improve performance, or manage contributed module content spread across packages.)</p>
<p>As you've discovered, <code>import werkzeug</code> <em>does not</em> import <code>security</code> from the <code>werkzeug</code> module, because (as far as I understand), the <em>only</em> submodules that will be imported as attributes are those defined on <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L100" rel="nofollow noreferrer">line 100</a> of the __init__.py:</p>
<pre><code># modules that should be imported when accessed as attributes of werkzeug
attribute_modules = frozenset(['exceptions', 'routing'])
</code></pre>
<p>In the same file, when <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L110" rel="nofollow noreferrer">looking at</a> the Werkzeug's <code>module(ModuleType)</code>-class, and its <code>__getattr__()</code>-method:</p>
<pre><code>class module(ModuleType):

    """Automatically import objects from the modules."""

    def __getattr__(self, name):
        if name in object_origins:
            module = __import__(object_origins[name], None, None, [name])
            for extra_name in all_by_module[module.__name__]:
                setattr(self, extra_name, getattr(module, extra_name))
            return getattr(module, name)
        elif name in attribute_modules:
            __import__('werkzeug.' + name)
        return ModuleType.__getattribute__(self, name)
</code></pre>
<p>It seems that module names in the <code>object_origins</code> dictionary, via definition in <code>all_by_module</code>, must be imported separately, and <code>werkzeug.security</code> is <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L95" rel="nofollow noreferrer">one of them</a>.</p>
<p>Lastly, I think the reason for why the: </p>
<pre><code>import werkzeug     
from werkzeug import security  
</code></pre>
<p>combination works, is that the first line does <em>not</em> import security, but the second one <em>does</em>, AND the <code>__getattr__()</code>-method will return modules that are explicitly imported. </p>
<p><strong>Edit:</strong> <em>this last section is not correct, tested by <a href="https://stackoverflow.com/users/8554766/filipp-w">Filipp</a></em>:</p>
<p><strike>I expect that by simply doing only <code>from werkzeug import security</code> that still <code>werkzeug.security.generate_password_hash()</code> would work. (I have not tested or confirmed this)</strike></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong>: import any attribute, contained in <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L40" rel="nofollow noreferrer"><code>all_by_module</code> dictionary</a>, directly from <code>werkzeug</code>, i.e. <code>from werkzeug import generate_password_hash</code>.</p>
<hr/>
<p>Inspired by/ based on <a href="https://stackoverflow.com/a/47987890/8554766">Thomas's answer</a>, I will try to summarize answers to my own questions:</p>
<blockquote>
<ol>
<li>Am I wrong (or lacking details) in some of my notions, concerning how <code>import</code> works in Python?</li>
</ol>
</blockquote>
<p>From where I currently stand, the short answer is NO. Though, it's good to keep in mind that import rules/mechanics could be customized on package level via <code>__init__.py</code>. 
<br/>Further reading on topic: <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">Python import system</a>, official <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="nofollow noreferrer">docs on <code>importlib</code></a>, <a href="http://effbot.org/zone/import-confusion.htm" rel="nofollow noreferrer">Importing Python Modules</a> article.</p>
<blockquote>
<ol start="2">
<li>Why <code>import werkzeug</code> won't give me access to <code>werkzeug.security</code>? My understanding is — it should import <code>werkzeug</code>, along with all of it's submodules/attributes.</li>
</ol>
</blockquote>
<p>As <a href="https://stackoverflow.com/users/1144382/thomas-fauskanger">Thomas Fauskanger</a>, correctly pointed out in his <a href="https://stackoverflow.com/a/47987890/8554766">answer</a>: <code>import werkzeug</code> does not import <code>security</code> from the <code>werkzeug</code> module, because the only submodules that will be imported as attributes — are those defined on <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L100" rel="nofollow noreferrer">line 100 of the Werkzeug's <code>__init__.py</code></a> (which are <code>exceptions</code> and <code>routing</code>). This assumption, could be verified by the following:</p>
<pre><code>import werkzeug

werkzeug.routing # will return path to routing.py module
werkzeug.exceptions # will return path to exceptions.py module

werkzeug.security # AttributeError: module 'werkzeug' has no attribute 'security'
</code></pre>
<blockquote>
<ol start="3">
<li>Why <code>import werkzeug</code> + <code>from werkzeug import security</code> allows access to <code>werkzeug.security</code>? My understanding: it should bind <strong>two separate names (with no connections between them)</strong>, as follows: <code>werkzeug</code> to <code>import werkzeug</code> (i.e. <code>werkzeug</code> module) and <code>security</code> to <code>from werkzeug import security</code> (i.e. <code>security</code> submodule of <code>werkzeug</code> module.</li>
</ol>
</blockquote>
<p>That's a tricky one. As it is indicated in Werkzeug's <code>__init__.py</code>, by the <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L125" rel="nofollow noreferrer">docstring for module's <code>__dir__</code> function</a>:</p>
<blockquote>
<p>Just show what we want to show.</p>
</blockquote>
<p>That's (probably) why:</p>
<pre><code>import werkzeug

dir1 = dir(werkzeug)
werkzeug.security # AttributeError: module 'werkzeug' has no attribute 'security'

from werkzeug import security

dir2 = dir(werkzeug)
werkzeug.security # will return path to security.py module
# BUT!
dir1 == dir2 # True
</code></pre>
<p>I think, <a href="https://stackoverflow.com/users/1144382/thomas-fauskanger">Thomas</a> right here as well, and:</p>
<blockquote>
<p>...<code>__getattr__()</code> method will return modules that are explicitly imported.</p>
</blockquote>
<hr/>
<p><strong>Conclusion</strong> <em>(or what I have learned =)</em>:
 <br/>
<br/>
As stated in the <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L25" rel="nofollow noreferrer">docstring for Werkzeug's <code>__init__.py</code></a>:</p>
<blockquote>
<p>...<br/>
  The majority of the functions and classes provided by Werkzeug work on the HTTP and WSGI layer. There is no useful grouping for those which is why they are all importable from "werkzeug" instead of the modules where they are implemented.
  <br/>...
  <br/>The implementation of a lazy-loading module in this file replaces the werkzeug package when imported from within.  Attribute access to the werkzeug module will then lazily import from the modules that implement the objects.</p>
</blockquote>
<p>What this means is, instead of:</p>
<pre><code>from werkzeug import security
security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
# OR
import werkzeug.security
werkzeug.security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
# OR
from werkzeug.security import generate_password_hash
generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
# OR
import werkzeug
from werkzeug import security
werkzeug.security.generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>You can simply do:</p>
<pre><code>from werkzeug import generate_password_hash
generate_password_hash('some_password', method='pbkdf2:sha512', salt_length=25)
</code></pre>
<p>You can import &amp; use any attribute contained in <a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/__init__.py#L40" rel="nofollow noreferrer"><code>all_by_module</code> dictionary</a>, in the same fashion.</p>
</div>
<span class="comment-copy">Thanks for your interest and research. It's a good food for thought and further investigation. P.S.: after doing <code>from werkzeug import security</code> the <code>werkzeug.security.generate_password_hash()</code> results in <code>NameError: name 'werkzeug' is not defined</code> — I have checked =)</span>
<span class="comment-copy">Thanks for your feedback, I will update my answer and remove that last part.</span>
<span class="comment-copy">Thanks to your answer, I was able to find/understand the answers to my initial questions (to the most part of them, at least =). Accepting as the foundation for the right 'direction of thought'.</span>
<span class="comment-copy">I appreciate it, and I'm glad you figured it out. Your conclusion (from werkzeug import X) seems to be the correct way, thanks for sharing!</span>
