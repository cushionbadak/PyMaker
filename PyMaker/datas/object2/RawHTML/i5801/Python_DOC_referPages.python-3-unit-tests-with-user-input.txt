<div class="post-text" itemprop="text">
<p>I'm absolutely brand new to Python unit test. I need to use it for a project I have to submit. I sort of have an idea of where to begin, it looks like we basically put in test parameters to functions we have defined in our program and we enter the expected result. If the expected result is output, we get OK, otherwise we will get Failure, or an error.</p>
<p>So my problem is that I have multiple user inputs stored into variables that are within for loops or while loops. I don't know where to even begin with this to set test values in for them.</p>
<p>Here is all of my code:</p>
<pre><code>studentTripExpenses = {}

def dictCreate(studentAmount):
    for i in range(0, studentAmount):
        studentName = input("What is the name of the student? ")
        expenseList = []
        print("Enter 'done' to move to the next student.")
        while True:
            expense = input("What is the cost of this expense? ")
            if expense.lower() == 'done':
                break
            elif (float(expense) &gt;= 0) or (float(expense) &lt; 0):
                expenseList.append(float(expense))
            elif not expense.isdigit():
                print("Please enter a number or enter 'done' to move on.")
        studentTripExpenses[studentName] = expenseList
    return studentTripExpenses

def studentCost(dct):
    for i in dct:
        #Variable for individual costs of student
        personalCost = 0
        #Determines the total cost for each student
        for x in dct[i]:
            personalCost = personalCost + x
        #Sets each students value to their total cost to two decimal places
        dct[i] = float("%.2f" % personalCost)
    return dct

def amountsDue(expenseLst, studentAvgPrice):
        #Runs through the dictionary of students and individual total trip costs
        for key in expenseLst:
            maxPerson = max(expenseLst, key=expenseLst.get)
            costDifference = 0
            #Determines who owes who how much money
            if max(expenseLst.values()) &gt; expenseLst[key]:
                costDifference = studentAvgPrice-expenseLst[key]
                if (costDifference &lt; 0):
                    costDifference = costDifference * -1
                print("%s owes %s $%.2f" % (key, maxPerson, costDifference))

def main():
    numOfStudents = int(input("How many students are going on the trip? "))
    studentCostDict = dictCreate(numOfStudents)
    studentTripExpenses = studentCost(studentCostDict)

    totalCost = 0

    #Gets the total cost for all students
    for key in (studentTripExpenses):
        totalCost = totalCost + studentTripExpenses[key]

    #Changes the total cost to 2 decimal places
    totalCost = float("%.2f" % totalCost)

    #Determines the average amount spent per student
    avgCost = float("%.2f" % (totalCost/len(studentTripExpenses)))

    amountsDue(studentTripExpenses, avgCost)

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <em>mocking</em>, where you replace a function or class with a test-supplied version. You can do this with the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock()</code> module</a>.</p>
<p>In this case, you can patch the <code>input()</code> name in your module; instead of the built-in function, the mock object will be called:</p>
<pre><code>from unittest import mock
from unittest import TestCase
import module_under_test

class DictCreateTests(TestCase):
    @mock.patch('module_under_test.input', create=True)
    def testdictCreateSimple(self, mocked_input):
        mocked_input.side_effect = ['Albert Einstein', '42.81', 'done']
        result = dictCreate(1)
        self.assertEqual(result, {'Albert Einstein': [42.81]})
</code></pre>
<p>Because <code>input</code> doesn't exist in your module (it is a built-in function), I told the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>mock.patch()</code> decorator</a> to create the name; now this <code>input</code> will be used instead of the built-in function.</p>
<p>The <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code> attribute</a> lets you state multiple results; each time the mock is called, it'll return the <em>next value</em> in that list. So the first time <code>'Albert Einstein'</code> is returned, the next time <code>'42.81'</code>, etc. </p>
<p>Together, this lets you simulate actual user inputs.</p>
<p>If you do your test right, you'll notice that there is a bug in your function; the <code>float()</code> call will throw a <code>ValueError</code> exception when anything other than <code>done</code> or a valid numeric value is entered. You need to rework your code to account for that. Try with <code>mocked_input.side_effect = ['Albert Einstein', 'Not an expense', '42.81', 'done']</code> to trigger the bug.</p>
</div>
<span class="comment-copy">Hi there! First off, thanks @martijn So the code worked out great. I got it to work with some slight modifications that I assume you meant for me to do. I changed 'module_under_test' to the name of the file I'm testing and then it worked. So to be clear on the 'side_effect' attribute, whatever I enter for it, it basically reads from left to right and enters in each item as if it was user input?  The bug you showed was correct to! I see that now for my code and appreciate the insight! I can see what this unit testing is useful for now.</span>
<span class="comment-copy">@Brystephor: yes, you didn't specify a module name, so I used one that I hoped would be obvious as a placeholder. The <code>side_effect</code> takes values from the list, and list literals are ordered from left to right, yes.</span>
