<div class="post-text" itemprop="text">
<p>Question About Join method in python,</p>
<p>I have data</p>
<pre><code>data = ['my', 'name', 'is']
</code></pre>
<p>I print like that</p>
<pre><code>str1 = '\n'.join(str(e) for e in data)
print(str1)
</code></pre>
<p>output</p>
<pre><code>my
name
is
</code></pre>
<p>how to add number like?</p>
<pre><code>1 my
2 name
3 is
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>enumerate</code>:</p>
<pre><code>print('\n'.join(str(i) + ' ' + j for i, j in enumerate(data, 1)))

1 my
2 name
3 is
</code></pre>
</div>
<span class="comment-copy">edited sorry  before z and a is my local variable</span>
<span class="comment-copy"><code>print('\n'.join('%d %s' % t for t in enumerate(data, 1)))</code></span>
<span class="comment-copy">BTW, Python has several different array-like data structures: tuple, list, and <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">array.array</a>. And then there are Numpy arrays.  So to avoid confusion it's a good idea to use the correct names. However, <code>.join</code> is <i>not</i> a list method, it's a string method which accepts an iterable of strings as its argument.</span>
<span class="comment-copy">yap i need data as string, that why i use str <code>str1 = '\n'.join(**str(e)** for e in data</code></span>
<span class="comment-copy">But in your example, the items in <code>data</code> are already strings, so doing <code>str(e)</code> is pointless. If <code>data = ['my', 'name', 'is']</code> then <code>str1 = '\n'.join(str(e) for e in data)</code> is just an inefficient way of doing <code>str1 = '\n'.join(data)</code>.</span>
