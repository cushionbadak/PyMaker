<div class="post-text" itemprop="text">
<p>I am currently trying to use Python 3.6's ctypes module to call functions from a library written in C++.</p>
<p>Suppose I used ctypes to create a shared library object called myLibrary:</p>
<pre><code># Python code
myLibrary = ctypes.CDLL(mylib.dylib)
</code></pre>
<p>The library I'm trying to make calls from uses C++ classes, and it is impossible with ctypes to make Python calls of the form <code>myLibrary.class()-&gt;method()</code> (see <a href="https://stackoverflow.com/questions/1615813/how-to-use-c-classes-with-ctypes">here</a>).</p>
<p>I am therefore first writing some intermediate C++ code which "wraps" the C++ class methods in a non-class form. For example, suppose <code>Math</code> is one of the classes, and <code>Add()</code> is one of its methods. My intermediate wrapper would look like this:</p>
<pre><code>// C++ intermediate code
int Add(int num1, int num2){                // no reference to a class
    return Math()-&gt;Add(num1, num2);         // reference to a class
}
</code></pre>
<p>I then plan on compiling this C++ into a shared library (a dylib file) on which I can make calls in Python using ctypes. For example:</p>
<pre><code># Python code
def add(num1, num2):
    myLibrary.add(num1, num2)
</code></pre>
<p>That's the plan.</p>
<p>Unfortunately, many methods in the library have exotic argument and value types. Some are simply variant type names created with the <code>typedef</code> keyword, but others are exotic structs. Further, there is a bit of enumeration in the original C++ code.</p>
<p>My question is: <strong>How does one deal with custom argument and value types (and enumeration) when using ctypes?</strong></p>
<p>Looking at the ctypes <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">documentation</a>, I know that you must specify restypes and argtypes for the methods you're trying to call, but how to do this when the original C++ functions involve exotic types and structs?</p>
<p>I thought the ctypes documentation might shed light on this, in section 15.17.1.6. ("Calling functions with your own custom data types"), but it just talks about the reverse scenario where you want to pass your own object types into the C++ functions.</p>
<hr/>
<p>Similar questions that were helpful, but not totally:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1615813/how-to-use-c-classes-with-ctypes">How to use C++ classes with ctypes?</a></li>
<li><a href="https://stackoverflow.com/questions/41639816/obtaining-address-of-custom-data-type-in-c-from-python-using-ctypes">Obtaining address of custom data-type in C from Python using ctypes</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Note that the ctypes is designed to call <strong>C</strong> code, not <strong>C++</strong>.</p>
<p>Since you're already writing wrappers, you only need to change one thing - specify that these wrapper functions have <strong>C</strong> linkage:</p>
<pre><code>// C++ intermediate code
extern "C" int Add(int num1, int num2) {    // no reference to a class
    return Math()-&gt;Add(num1, num2);         // reference to a class
}
</code></pre>
<p>As for the structures and so on, you should define a proper <strong>C</strong> language interface for those. It will not be that difficult to come up with the <code>ctypes</code> wrapper for that.</p>
</div>
