<div class="post-text" itemprop="text">
<p>I create a button and try to run multiprocessing when I click button ,</p>
<p>but the UI is become blocked . I hope process run in backgorund .</p>
<p>How can I fix it ?</p>
<pre><code>from PySide2 import QtCore,QtGui,QtWidgets
import sys
import multiprocessing
from threading import Timer
class TTT(multiprocessing.Process):
    def __init__(self):
        super(TTT, self).__init__()
        self.daemon = True
    def run(self):
        while True:
            t = Timer(5, self.doSomething)
            t.start()
            t.join()

    def doSomething(self):
        try:
            print('123')
        except Exception as e:
            print(e)

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        btn = QtWidgets.QPushButton('run process')
        btn.clicked.connect(self.create_process)
        self.setCentralWidget(btn)

    def create_process(self):
        QtWidgets.QMessageBox.information(self,'hhh','hhh')
        t = TTT()
        t.start()
        t.join()

if __name__=="__main__":
    app=QtWidgets.QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec_())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have never used multiprocessing, but docs says that the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join" rel="nofollow noreferrer">join()</a> method blocks the caller until it is finished. Putting the method in an infinite loop will block the caller(the UI) forever.</p>
</div>
<div class="post-text" itemprop="text">
<p>Bendegúz Szatmári already answer the main question.</p>
<p>I just want to let you know that use Process is not best idea in most of usage.
Different process does not share memory with your program. You can not control them so easily as different thread.</p>
<p>Here is simple example how you can Start end Stop different thread. </p>
<pre><code>from PyQt5 import QtWidgets
from PyQt5.QtCore import *
import sys
import time


class TTT(QThread):
    def __init__(self):
        super(TTT, self).__init__()
        self.quit_flag = False

    def run(self):
        while True:
            if not self.quit_flag:
                self.doSomething()
                time.sleep(1)
            else:
                break

        self.quit()
        self.wait()

    def doSomething(self):
        print('123')


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.btn = QtWidgets.QPushButton('run process')
        self.btn.clicked.connect(self.create_process)
        self.setCentralWidget(self.btn)

    def create_process(self):
        if self.btn.text() == "run process":
            print("Started")
            self.btn.setText("stop process")
            self.t = TTT()
            self.t.start()
        else:
            self.t.quit_flag = True
            print("Stop sent")
            self.t.wait()
            print("Stopped")
            self.btn.setText("run process")


if __name__=="__main__":
    app=QtWidgets.QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec_())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a nice strategy:</p>
<p><a href="https://elsampsa.github.io/valkka-examples/_build/html/qt_notes.html#python-multiprocessing" rel="nofollow noreferrer">https://elsampsa.github.io/valkka-examples/_build/html/qt_notes.html#python-multiprocessing</a></p>
<p>Features:</p>
<ul>
<li>You can send Qt signals from the multiprocess</li>
<li>You can send Qt signals into the multiprocess</li>
</ul>
</div>
<span class="comment-copy">If you use Qt framework i suggest to you also use Qt features for this instead of mixing Qt and standard Python. Signals and threding seems to be awesome for me in Qt :)</span>
<span class="comment-copy">you mean use QThread ?</span>
<span class="comment-copy">QThread is just one of the options.</span>
<span class="comment-copy">if I still want to fixed this problem , how can I do with multiprocessing ?</span>
<span class="comment-copy">I dont unserstand correctly what do you expected from your code. Why while True for creating of Timer? Can you provide specific expected results?</span>
<span class="comment-copy">I wrote that several seconds after you :) Yes the process is never terminated in your example and you are waiting for terminate.</span>
<span class="comment-copy">ha , sorry for the stupid thing...damm</span>
<span class="comment-copy">@Relax ZeroC Btw as i said before check usage of QThreads for example. Work with different process is painfull. You dont have shared memory, you can not simple change variable in TTT, etc.</span>
<span class="comment-copy">nice , thanks a lot @Erik Šťastný ! But my reason is that I have a  CPU-bound task , so I think I should use multiprocessing</span>
<span class="comment-copy">@RelaxZeroC Check this: <a href="https://stackoverflow.com/questions/617787/why-should-i-use-a-thread-vs-using-a-process" title="why should i use a thread vs using a process">stackoverflow.com/questions/617787/…</a>. I work with hardware, slow flash memories, etc. and even if some function takes 30s to complete i have never been forced to use different processes instead of simple working thread.</span>
