<div class="post-text" itemprop="text">
<p>I am following this:</p>
<p><a href="https://stackoverflow.com/questions/4406389/if-else-in-a-list-comprehension">if else in a list comprehension</a></p>
<p>but the following small program is generating a syntax error:</p>
<pre><code>def to_rna(dnasequences):
    xlate = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}
    return ''.join(xlate[sequence] for sequence in dnasequences if sequence in xlate.keys() else raise ValueError)
</code></pre>
<p>The else clause is generating the error.</p>
<p>If I remove the else clause it runs, however, I want to raise a ValueError for any input
that is NOT a key in my dictionary 'xlate'.</p>
<p><em>NOTE</em> I am working on the rna-transcription problem from exercism.io.</p>
<p>I pass 5 unit tests but I fail the three unit tests requiring a ValueError for invalid input.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do this in a comprehension. The conditional expression has the form:</p>
<pre><code>expr if expr else expr
</code></pre>
<p><sup><sup>(and, sub-note, it should be used in the beginning of the comprehension)</sup></sup></p>
<p>while <code>raise ExceptionClass</code> <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">is a statement</a>, not an expression. As such, a <code>SyntaxError</code> is raised. </p>
<p>In short, if you do want to use <code>raise</code>, you'll have to resort to a <code>for</code> loop. </p>
<hr/>
<p>Alternately, if you're just very passionate about comprehensions, you could define a function which you can then call in the <code>else</code> clause:</p>
<pre><code>def raiser(exc_type):
    raise exc_type
</code></pre>
<p>This is because function calls are expressions. Of course, this is quite ugly.</p>
</div>
<span class="comment-copy">If you can't make the one-liner work, that's a good indication that you're trying to do too much. Just write a normal loop instead.</span>
<span class="comment-copy">If you insist to do it inline, and since you care not about the message anyway, instead of the <code>raise ValueError</code> statement just place <code>int("")</code> and it will raise a <code>ValueError</code> for you. Or, you know, ditch the list comprehension and unwrap your loop to do it properly.</span>
<span class="comment-copy">"while raise ExceptionClass is a statement, not an expression." That's what I missed.</span>
<span class="comment-copy">Interesting. Is there really no way to do a <code>raise</code> statement inside an expression? Even a <code>lambda</code> won't help. In extension, @zwer's idea with a message like <code>int("Hi I am an error")</code> seems to be the closest thing I can think of. Or the extra method, of course. But yeah, that's rather ugly.</span>
<span class="comment-copy">@Jeronimo directly, no. The bodies of <code>lambda</code>s only <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-lambda_expr" rel="nofollow noreferrer">accept expressions too</a>. Indirect approaches such as <code>int</code> or a helper function are the only (ugly) options here.</span>
