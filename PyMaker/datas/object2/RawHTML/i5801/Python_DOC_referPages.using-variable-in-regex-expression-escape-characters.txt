<div class="post-text" itemprop="text">
<p>I want to use input from a user as a regex pattern for a search over some text.  It works, but how I can handle cases where user puts characters that have meaning in regex?  For example, the user wants to search for Word <code>(s)</code>: regex engine will take the <code>(s)</code> as a group.  I want it to treat it like a string <code>"(s)"</code>.  I can run <code>replace</code> on user input and replace the <code>(</code> with <code>\(</code> and the <code>)</code> with <code>\)</code> but the problem is I will need to do replace for every possible regex symbol. Do you know some better way ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>re.escape()</code> function for this:</p>
<p><a href="http://docs.python.org/library/re.html#re.escape" rel="noreferrer">4.2.3 <code>re</code> Module Contents</a></p>
<blockquote>
<p><strong>escape(string)</strong></p>
<p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>
</blockquote>
<p>A simplistic example, search any occurence of the provided string optionally followed by 's', and return the match object.</p>
<pre><code>def simplistic_plural(word, text):
    word_or_plural = re.escape(word) + 's?'
    return re.match(word_or_plural, text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/library/re.html#re.escape" rel="noreferrer">re.escape()</a>: </p>
<blockquote>
<p>re.escape(string)
      Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape('^a.*$')
'\\^a\\.\\*\\$'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, <a href="https://docs.python.org/2/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape()</code></a> is not suited for the replacement string:</p>
<pre><code>&gt;&gt;&gt; re.sub('a', re.escape('_'), 'aa')
'\\_\\_'
</code></pre>
<p>A solution is to put the replacement in a lambda:</p>
<pre><code>&gt;&gt;&gt; re.sub('a', lambda _: '_', 'aa')
'__'
</code></pre>
<p>because the return value of the lambda is treated by <a href="https://docs.python.org/2/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> as a literal string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please give a try:</p>
<p>\Q and \E as anchors</p>
<p>Put an Or condition to match either a full word or regex.</p>
<p>Ref Link : <a href="https://stackoverflow.com/questions/34344112/how-to-match-a-whole-word-that-includes-special-characters-in-regex">How to match a whole word that includes special characters in regex</a></p>
</div>
<span class="comment-copy">The <code>repl</code> argument to <code>re.sub</code> is a string, not a regex; applying <code>re.escape</code> to it doesn't make any sense in the first place.</span>
<span class="comment-copy">@tripleee That's incorrect, the <code>repl</code> argument is not a simple string, it is parsed. For instance, <code>re.sub(r'(.)', r'\1', 'X')</code> will return <code>X</code>, not <code>\1</code>.</span>
<span class="comment-copy">Here's the relevant question for escaping the <code>repl</code> argument: <a href="https://stackoverflow.com/q/49943270/247696">stackoverflow.com/q/49943270/247696</a></span>
<span class="comment-copy">Changed in version 3.3: The '_' character is no longer escaped.  Changed in version 3.7: <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer">Only characters that can have special meaning in a regular expression are escaped.</a> (Why did it take so long?)</span>
