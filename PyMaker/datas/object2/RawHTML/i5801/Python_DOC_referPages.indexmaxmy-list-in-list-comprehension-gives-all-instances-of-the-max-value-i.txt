<div class="post-text" itemprop="text">
<p>Consider the following code snippet --&gt;</p>
<pre><code>li = [3,1,2,3]
print([x+99 if li.index(x)!=li.index(max(li)) else x-(99*(len(li)-1)) for x in li ])
</code></pre>
<p>I was expecting the output to be :</p>
<pre><code>[-294, 100, 101, 102]
</code></pre>
<p>but the actual output on running the program was :</p>
<pre><code>[-294, 100, 101, -294]
</code></pre>
<p>Why do i get both instances of the maximum value in the list instead of just the first occurrence?</p>
<p>How exactly are list comprehensions evaluated and how is that responsible for the output in my program ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have multiple <code>3</code>s in your list. The implementation of <code>index</code> is such that it finds only the index of the first occurrence of the value passed to it. Instead, use <code>enumerate</code>:</p>
<pre><code>li = [3,1,2,3]
l1 = [x+99 if i!=li.index(max(li)) else x-(99*(len(li)-1)) for i, x in enumerate(li)]
</code></pre>
<p>Output:</p>
<pre><code>[-294, 100, 101, 102]
</code></pre>
</div>
<span class="comment-copy">Youâ€™re comparing <code>li.index(x) != li.index(max(li))</code>. <code>li.index(3)</code> is the same both times <code>x == 3</code>. Use <code>for i, x in enumerate(li)</code> instead.</span>
<span class="comment-copy">You're doing searches using <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">list.index</a>. That will always find the first occurence (if any). If you want the index of an item you found in a sequence, use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a>.</span>
<span class="comment-copy">@YannVernier, I just want the first occurrence. Since I am getting both occurrence in the result, hence the question. Sorry if it wasn't clear.</span>
<span class="comment-copy">The title is factually incorrect. <code>index</code> gave you the index of the first instance every time - on both sides of your comparison.</span>
<span class="comment-copy">You're right but had I known my mistake, I wouldn't have to post the question in the first place. Anyway, Thanks for trying to help me out.</span>
<span class="comment-copy">Your code solves my problem but since index() returns the index of the first occurrence, then why are both the 3s in the list affected?</span>
<span class="comment-copy">@adeen-s when your code reaches the last <code>3</code> in <code>[3,1,2,3]</code>, it attempts to find the index, which will give <code>0</code>, because the first occurrence of the last item in the list, <code>3</code>, is found at index <code>0</code>, due to the implementation of <code>list.index()</code>. Thus, the last operation, <code>x-(99*(len(li)-1))</code>, is performed because the condition <code>i!=li.index(max(li))</code> fails.</span>
<span class="comment-copy">I get it now, I'll proceed to accept your answer. Thanks a lot.</span>
