<div class="post-text" itemprop="text">
<p>Numpy has the <code>random.choice</code> function, which allows you to sample from a categorical distribution. How would you repeat this over an axis? To illustrate what I mean, here is my current code:</p>
<pre><code>categorical_distributions = np.array([
    [.1, .3, .6],
    [.2, .4, .4],
])
_, n = categorical_distributions.shape
np.array([np.random.choice(n, p=row)
          for row in categorical_distributions])
</code></pre>
<p>Ideally, I would like to eliminate the for loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one vectorized way to get the random indices per row, with <code>a</code> as the <code>2D</code> array of probabilities -</p>
<pre><code>(a.cumsum(1) &gt; np.random.rand(a.shape[0])[:,None]).argmax(1)
</code></pre>
<p>Generalizing to cover both along the rows and columns for <code>2D</code> array -</p>
<pre><code>def random_choice_prob_index(a, axis=1):
    r = np.expand_dims(np.random.rand(a.shape[1-axis]), axis=axis)
    return (a.cumsum(axis=axis) &gt; r).argmax(axis=axis)
</code></pre>
<p>Let's verify with the given sample by running it over a million times -</p>
<pre><code>In [589]: a = np.array([
     ...:     [.1, .3, .6],
     ...:     [.2, .4, .4],
     ...: ])

In [590]: choices = [random_choice_prob_index(a)[0] for i in range(1000000)]

# This should be close to first row of given sample
In [591]: np.bincount(choices)/float(len(choices))
Out[591]: array([ 0.099781,  0.299436,  0.600783])
</code></pre>
<p><strong>Runtime test</strong></p>
<p>Original loopy way -</p>
<pre><code>def loopy_app(categorical_distributions):
    m, n = categorical_distributions.shape
    out = np.empty(m, dtype=int)
    for i,row in enumerate(categorical_distributions):
        out[i] = np.random.choice(n, p=row)
    return out
</code></pre>
<p>Timings on bigger array -</p>
<pre><code>In [593]: a = np.array([
     ...:     [.1, .3, .6],
     ...:     [.2, .4, .4],
     ...: ])

In [594]: a_big = np.repeat(a,100000,axis=0)

In [595]: %timeit loopy_app(a_big)
1 loop, best of 3: 2.54 s per loop

In [596]: %timeit random_choice_prob_index(a_big)
100 loops, best of 3: 6.44 ms per loop
</code></pre>
</div>
<span class="comment-copy">Looks like a job for <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>.</span>
<span class="comment-copy">@Galen The performance numbers would be comparable to the posted loopy solution, if not worse.</span>
<span class="comment-copy">@Divakar Agreed.</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/34187130/fast-random-weighted-selection-across-all-rows-of-a-stochastic-matrix" title="fast random weighted selection across all rows of a stochastic matrix">stackoverflow.com/questions/34187130/â€¦</a></span>
