<div class="post-text" itemprop="text">
<p>I've a bytes object with length 41. I tried to unpack it with:</p>
<pre><code>struct.unpack('2B2B32sBi',data)
</code></pre>
<p>But I got a error that:</p>
<blockquote>
<p>struct.error: unpack requires a bytes object of length 44</p>
</blockquote>
<p>I think the length of <code>2B2B32sBi</code> should be <code>2*1+2*1+32*1+1+4=41</code> after check the python document. Why am I wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You just encountered <em>padding</em> since you've got bytes data first, and then integer (which has stronger alignment constraints)</p>
<p>From the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Padding is only automatically added between successive structure members. No padding is added at the beginning or the end of the encoded struct.</p>
</blockquote>
<p>So you <em>have</em> to specify an endianness to disable padding:</p>
<pre><code>struct.unpack('&lt;2B2B32sBi',data)
</code></pre>
<p><strong>Edited for completeness</strong>, after reading Galen's excellent answer: just specifying <code>=</code> is better if you don't want to force endianness.</p>
</div>
<div class="post-text" itemprop="text">
<p>See the parts of the <a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow noreferrer">documentation</a> regarding alignment:</p>
<blockquote>
<p>By default, C types are represented in the machine’s native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler).</p>
</blockquote>
<p></p>
<blockquote>
<p>Native size and alignment are determined using the C compiler’s sizeof expression. This is always combined with native byte order.</p>
</blockquote>
<p></p>
<blockquote>
<p>Note the difference between '@' and '=': both use native byte order, but the size and alignment of the latter is standardized.</p>
</blockquote>
<p>To illustrate this:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.calcsize("2B2B32sBi")
44
&gt;&gt;&gt; struct.calcsize("@2B2B32sBi")
44
&gt;&gt;&gt; struct.calcsize("=2B2B32sBi")
41
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to read the first note in the <a href="https://docs.python.org/3/library/struct.html#module-struct" rel="nofollow noreferrer">struct documentation</a> again.
Default is C-aligned data boundaries, so some padding bytes are responsible for the difference. So adding the appropriate byte order should fix the problem.</p>
</div>
