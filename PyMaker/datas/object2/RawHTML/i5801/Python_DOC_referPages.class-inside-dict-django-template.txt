<div class="post-text" itemprop="text">
<p>Probably a simple question but I've searched for a while and haven't been able to find an answer for how to cycle through all of the items in my dictionary and call the class items inside of the template</p>
<p>I've tried using custom template tags, but the syntax doesn't seem to line up with what I'd like. </p>
<p>Here is my code:</p>
<pre><code>data = [[OrderedDict([('token', 'XXXXXXXXXXXXXXX'), ('devices', [['Christmas Lights', 'XXXXXXXXXX'], ['Gold Beedrom Lamp', 'XXXXXXXX']])])], [[['5', 'off', 124], ['6', 'off', 124], ['7', 'off', 100], ['8', 'off', 124]]]]

#Dictionary and Class assignment

class LightStatus:
      def __init__(self,id):
          self.id = id
          self.state = None
          self.bri = None
      def add_data(self,id,state,bri):
          self.id = id
          self.state = state
          self.bri = bri

AllLights = dict()
for i in data[1]:
    for light in i:
        id = light[0]
        state = light[1]
        bri = light[2]
        AllLights[id] = LightStatus(id)
        AllLights[id].add_data(id,state,bri)
</code></pre>
<p>What I'd like to have in template:</p>
<pre><code>#What I want to do in the template      
for i in AllLights:
    print(AllLights[i].id)
    print(AllLights[i].state)
    print(AllLights[i].bri)
return render(request, 'file.html', 'lights': AllLights)

#What I've tried
{% for light in lights %}
    {% for i in light %}
       {{lights.light.id}} #light being the variable from above.                
    {% endfor %}
{% endfor %}
</code></pre>
<p>I've also tried using a custom template tag:</p>
<pre><code>from django import template
register = template.Library()

@register.filter
def lights(LightDict, i):
    return LightDict[int(i)]
#template 
{{ AllLights|lights.forloop.counter0 }} 
</code></pre>
<p>To summarize what I'd like to do. I'd like to pass the <code>AllLights</code> dict to my template and then cycle through all of the keys and call <code>id</code>,<code>state</code>, and <code>bri</code> for each key. </p>
<p>Update:</p>
<p>Someone asks what happens when I print(AllLights) before render: </p>
<pre><code>{'5': &lt;dashboard.views.LightStatus object at 0x106f016a0&gt;, '6': &lt;dashboard.views.LightStatus object at 0x106f01320&gt;, '7': &lt;dashboard.views.LightStatus object at 0x106f01ac8&gt;, '8': &lt;dashboard.views.LightStatus object at 0x106f014e0&gt;}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're (correctly) using an ordered dict to maintain order, so assuming the order in that dict is the desired order you should be able to just iterate over your ordered dict's <code>values</code> in your template:</p>
<pre><code>{% for light in all_lights.values %}
  {{ light.id }}
  {{ light.state }}
  {{ light.bri }}
{% endfor %}
</code></pre>
</div>
<span class="comment-copy">I've updated the question with the response.</span>
<span class="comment-copy">OK. And if you <code>print(AllLights['5'])</code>, what do you get?</span>
<span class="comment-copy">&lt;dashboard.views.LightStatus object at 0x106ebd7b8&gt;</span>
<span class="comment-copy">If you look closer, ordered dict only applies to key 0 not key 1. This does answer my question. Adding <code>.values</code> in the for statement makes a huge difference. Is their django docs on this?</span>
<span class="comment-copy">Can you clarify what you mean by that? <code>allLights</code> is an ordered dict - do you have data that's not in it? The <code>{% for %}</code> block above is equivalent to your "what I want to do in the template" for loop.</span>
<span class="comment-copy">I edited my comment</span>
<span class="comment-copy">OrderedDict only applies to the first key in <code>data</code> not the second.</span>
<span class="comment-copy"><a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#for" rel="nofollow noreferrer">docs.djangoproject.com/en/1.11/ref/templates/builtins/#for</a> is the doc for the <code>for</code> tag, but the real difference (I think) is the <code>values()</code> method of dicts - <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict.values</a></span>
