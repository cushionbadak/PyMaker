<div class="post-text" itemprop="text">
<p>I have a nested list like the following:</p>
<pre><code>x = [[1,  5, 3,  4], 
     [5, 10, 7,  8], 
     [9,  9, 2, 12]]
</code></pre>
<p>I need to find to find the min and max values of the nested list <strong>transposed</strong> such that the result for min is:</p>
<pre><code>1, 5, 2, 4  # 1 is the min of first column (1, 5, 9) a.s.o
</code></pre>
<p>and the max should be:</p>
<pre><code>9, 10, 7, 12
</code></pre>
<p>I tried to convert it into a <code>dataframe</code> first and then doing max and min on the different axis but all doesn't come up as the result I want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following using the built-in <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>, <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a>, <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> functions and the <code>zip(*...)</code> transpositioning pattern:</p>
<pre><code>min_x = list(map(min, zip(*x)))
max_x = list(map(max, zip(*x)))
</code></pre>
<p>Or as pointed out by <a href="https://stackoverflow.com/users/6260170/chris-rands">Chris_Rands</a>, this shortened form will also work:</p>
<pre><code>min_x = list(map(min, *x))
max_x = list(map(max, *x))
</code></pre>
<p>Or use comprehensions:</p>
<pre><code>min_x = [min(col) for col in zip(*x)]
max_x = [max(col) for col in zip(*x)]
</code></pre>
<p>If you desperately want to do it one line:</p>
<pre><code>min_x, max_x = zip(*[(min(col), max(col)) for col in zip(*x)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension or other way:</p>
<pre><code>print([min(item) for item in zip(*x)])
</code></pre>
<p>is same as:</p>
<pre><code>min_list=[]
for i in zip(*x):
    min_list.append(min(i))
print(min_list)
</code></pre>
<p>output:</p>
<pre><code>[1, 5, 2, 4]
</code></pre>
<p>For max:</p>
<pre><code>print([max(item) for item in zip(*x)])
</code></pre>
<p>is same as:</p>
<pre><code>max_list=[]
for i in zip(*x):
    max_list.append(max(i))

print(max_list)
</code></pre>
<p>output:</p>
<pre><code>[9, 10, 7, 12]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply with <strong><code>numpy</code></strong> module:</p>
<pre><code>import numpy as np

x = np.array([[1,  5, 3,  4], [5, 10, 7,  8], [9,  9, 2, 12]])
print(np.min(x, 0))    # [1 5 2 4]
print(np.max(x, 0))    # [ 9 10  7 12]
</code></pre>
</div>
<span class="comment-copy">where did the <code>4</code> come from on the <code>min</code>? and same for the <code>9</code> and <code>7</code> for <code>max</code>? Why do you have 4 values in the results when the nested lists are just 3?</span>
<span class="comment-copy"><code>z = [min(i) for i in x]</code> gives the list with all the minimums , and <code>z = [max(i) fro i in x]</code> would give otherwise!</span>
<span class="comment-copy"><code>list(map(min, *x))</code></span>
<span class="comment-copy">90% of the time, the hardest part about a question is understanding it; not the actual coding difficulties.. Good work! +1</span>
