<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2776829/difference-between-pythons-generators-and-iterators">Difference between Python's Generators and Iterators</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I am newbie to <code>Python</code>. I was able to understand <code>Iterables</code> and <code>Iterators</code>.
However I have seen that there is lot of stuff that compares <code>Generators</code> vs <code>Iterators</code>.</p>
<p>As per understanding, <code>Iterable</code> is an object which actually has elements stored inside it (E.g. a list). They follow an iteration protocol where they implement <code>__iter__()</code> method which returns an <code>Iterator</code> object which helps in iterating the <code>Iterable</code>.</p>
<p>As per my understanding <code>Generators</code> helps in generating the data on the fly instead of creating a big data structure in memory and returning it. We can achieve simialr goal by the use of <code>Iterators</code> as well.</p>
<p>Now my doubt, If we already had <code>Iterators</code> what was the need of <code>Generators</code>, since both helps acheiving a similar goal of generating data on the fly.
Is that just to simplify the syntax or is there any other reason why <code>Generators</code> exist ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how these terms are defined in the <a href="https://docs.python.org/3/glossary.html" rel="nofollow noreferrer">glossary</a> in the official Python documentation.</p>
<p><strong>iterable</strong></p>
<blockquote>
<p>An object capable of returning its members one at a time. Examples of
  iterables include all sequence types (such as <code>list</code>, <code>str</code>, and
  <code>tuple</code>) and some non-sequence types like <code>dict</code>, <code>file</code> objects, and
  objects of any classes you define with an <code>__iter__()</code> method or with
  a <code>__getitem__()</code> method that implements Sequence semantics.</p>
<p>Iterables can be used in a for loop and in many other places where a
  sequence is needed (<code>zip()</code>, <code>map()</code>, …). When an iterable object is
  passed as an argument to the built-in function <code>iter()</code>, it returns an
  iterator for the object. This iterator is good for one pass over the
  set of values. When using iterables, it is usually not necessary to
  call <code>iter()</code> or deal with iterator objects yourself. The <code>for</code>
  statement does that automatically for you, creating a temporary
  unnamed variable to hold the iterator for the duration of the loop.
  See also iterator, sequence, and generator.</p>
</blockquote>
<p><strong>iterator</strong></p>
<blockquote>
<p>An object representing a stream of data. Repeated calls to the
  iterator’s <code>__next__()</code> method (or passing it to the built-in function
  <code>next()</code>) return successive items in the stream. When no more data are
  available a <code>StopIteration</code> exception is raised instead. At this
  point, the iterator object is exhausted and any further calls to its
  <code>__next__()</code> method just raise <code>StopIteration</code> again. Iterators are
  required to have an <code>__iter__()</code> method that returns the iterator
  object itself so every iterator is also iterable and may be used in
  most places where other iterables are accepted. One notable exception
  is code which attempts multiple iteration passes. A container object
  (such as a <code>list</code>) produces a fresh new iterator each time you pass it
  to the <code>iter()</code> function or use it in a for loop. Attempting this with
  an iterator will just return the same exhausted iterator object used
  in the previous iteration pass, making it appear like an empty
  container.</p>
<p>More information can be found in Iterator Types.</p>
</blockquote>
<p><strong>generator</strong></p>
<blockquote>
<p>A function which returns a generator iterator. It looks like a normal
  function except that it contains <code>yield</code> expressions for producing a
  series of values usable in a <code>for</code>-loop or that can be retrieved one
  at a time with the <code>next()</code> function.</p>
<p>Usually refers to a generator function, but may refer to a generator
  iterator in some contexts. In cases where the intended meaning isn’t
  clear, using the full terms avoids ambiguity.</p>
</blockquote>
<p><strong>generator iterator</strong></p>
<blockquote>
<p>An object created by a generator function.</p>
<p>Each <code>yield</code> temporarily suspends processing, remembering the location
  execution state (including local variables and pending
  <code>try</code>-statements). When the generator iterator resumes, it picks-up
  where it left-off (in contrast to functions which start fresh on every
  invocation).</p>
</blockquote>
</div>
<span class="comment-copy">Generators are iterators, they are just a simplified version of an iterator that uses the <code>yield</code> syntax, but they have less functionalities. This post covers everything you need to know, possibly a dupe: <a href="https://stackoverflow.com/q/2776829/6622817">stackoverflow.com/q/2776829/6622817</a></span>
<span class="comment-copy">A generator is technically an iterator, basically, it's a way to define iterator protocol in a compact way. A classic iterator will be defined using a class with <code>__iter__</code> and <code>__next__</code> methods, with a generator you can do this with just a function with yield statements or generator expressions.</span>
<span class="comment-copy">So generators exists just to simplify the syntax or is there any othere reason ?</span>
<span class="comment-copy">I think <a href="https://stackoverflow.com/a/28353158/4014959">Aaron Hall♦'s answer</a> at the linked question covers everything nicely.</span>
<span class="comment-copy"><a href="https://noobknowledge.blogspot.in/" rel="nofollow noreferrer">noobknowledge.blogspot.in</a></span>
