<div class="post-text" itemprop="text">
<p>I want to have a search function like a man page inside a Python module.</p>
<p>Is there a built-in or module function to search a string/wildcard char in function name/class name/object name or function of class?</p>
<p>e.g. <code>find(get_*)</code>?</p>
<p>This would find all <code>get_*</code> functions, such as <code>get_height</code>, <code>get_weight</code>, <code>get_area</code>, <code>get_volume</code> as well as <code>square.get_area</code>,<code>rectange.get_area</code>
or have a <code>find(get?int</code>) to find <code>get_int</code>, etc.</p>
<p>I can have a list in <code>help(module)</code> but there is too much clutter and no search function I can find.
If not, how can I write a function to do the same?</p>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to using <code>re</code>, for simple matches of the type you've given, use <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch" rel="nofollow noreferrer"><code>fnmatch</code></a>.  That provides much <strong>friendlier</strong> matching.</p>
<pre><code>def find(value, pattern="*"):
    from fnmatch import fnmatch
    return [x for x in dir(value) if fnmatch(x, pattern)]
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; find(os, "u*")
['umask', 'uname', 'unlink', 'unsetenv', 'urandom', 'utime']
&gt;&gt;&gt; find(os, "?n*")
['environ', 'initgroups', 'uname', 'unlink', 'unsetenv']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So... From what I can glean from your post, you want to be able to find and return a list of all the functions within your module that matches a given pattern. Sounds to me like a job for <code>re</code>!
Here's my python.</p>
<pre><code>import re
def find(the_module,regex=''):
  match = re.compile(regex)
  matched_values = []
  for i in dir(the_module):
    if match.search(i):
      matched_values.append(i)
  return matched_values
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>re</code> module to do this as illustrated below. You need to learn how to write regular expressions to use it, but that's extensively documented. For a good start see the <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">Regular Expression HOWTO</a> in the documentation.</p>
<pre><code>import re

def find(module, regex):
    return [name for name in dir(module) if re.match(regex, name)]

# Sample usage

import some_module
print(find(some_module, r'get_\.*'))  # Search for things prefixed with "get_".
</code></pre>
</div>
<span class="comment-copy">dir() will return a list of all the stuff in the current namespace; if I'm dealing with something with a lousy API documentation, I will often do def find(name): for i in dir(); if i.find(name) != -1: print i</span>
<span class="comment-copy">@Foon It does not answer the wildcard requirement</span>
<span class="comment-copy">Friendlier and much more limited matching.</span>
<span class="comment-copy">@martineau of course, as noted ... "for simple matches of the type you've given".  I imagine most users of such a function would like it to operate like the normal wildcard matching they use in a shell.</span>
<span class="comment-copy">Regexes for simple matching are fairly simple, so not too un-friendly to master. <code>fnmatch</code> was designed to be mimic the kind of wildcard matching with filenames that many are familiar with from using them on the command-line.</span>
<span class="comment-copy">How do I get rid of AttributeError: 'function' object has no attribute 'fnmatch'</span>
<span class="comment-copy">@ChinmoyKulkarni  Make it <code>fnmatch(...)</code> not <code>fnmatch.fnmatch(...)</code></span>
<span class="comment-copy">Note that, while this answers the wildcard requirement, it also requires you to be familiar with regular expressions.</span>
