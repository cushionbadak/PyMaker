<div class="post-text" itemprop="text">
<p>I was reading <a href="https://stackoverflow.com/questions/2627002/whats-the-pythonic-way-to-use-getters-and-setters">this link</a> about using getters in Python, quote:</p>
<blockquote>
<p>The Pythonic way is to not use them. If you must have them then hide
  them behind a property.</p>
</blockquote>
<p>That same page includes various examples, but my question is, if getters are not the Python way, how would I indicate to someone reading my code that a variable should be read-only after construction. </p>
<p>Suppose I have the following class:</p>
<pre><code>class Car:
    def __init__(self, ID, name, tire, engine):
        self.ID = ID
        self.name = name
        self.tire = tire
        self.engine = engine

    def __str__(self):
        return "ID: {0} Name:{1} Tire: {2} Engine: {3}".format(self.ID, self.name, self.tire, self.engine)
</code></pre>
<p>If I wanted to indicate to another developer that <code>self.engine</code> is read-only after being set in the <code>constructor</code>, how would I do so? In orders words, if clients violate the rule, and attempt to set it, it's there problem if the implementation of <code>self.engine</code> changes(for example, from object of the class <code>Engine</code> to <code>Dictionary</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> decorator and not define a setter to communicate that <code>engine</code> should not be modified:</p>
<pre><code>class Car(object):
    def __init__(self, ID, name, tire, engine):
        self.ID = ID
        self.name = name
        self.tire = tire
        self._engine = engine

    def __str__(self):
        return "ID: {0} Name:{1} Tire: {2} Engine: {3}".format(self.ID, self.name, self.tire, self.engine)

    @property
    def engine(self):
        return self._engine
</code></pre>
<p>Note that the user can still go around the property and set <code>_engine</code> directly. </p>
<p>Note that the <code>@property</code> decorator only works with new style classes.</p>
</div>
<span class="comment-copy">Give it a single underscore prefix e.g <code>self._engine</code>. It wont stop others from using it but it is a clear indicator its private. You can also use a double underscore prefix to have python mangle the name (see <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">here</a> for details.</span>
<span class="comment-copy">@PaulRooney No, the underscore indicates that the variable shouldn't be accessed from outside of the class at all (except from derived classes).</span>
<span class="comment-copy">I don't mind if they get it, just that they aren't allowed to set it afterward(i'm aware there is nothing really stopping them from doing so).</span>
<span class="comment-copy">@MichaelButscher I'm not clear on where your disagreement lies.</span>
<span class="comment-copy">@S.R. Right. If you don't want to use properties you could list the accessible variables in the doc-string of the class and mention something like "(read-write)" or "(read-only) for each.</span>
<span class="comment-copy">the <code>@properly</code> keyword will work with classes even if they don't inherit object, at least in Python 3 anyway. As stated in my question and the link <code>@property</code> is not the Python way of doing it apparently.</span>
<span class="comment-copy">@S.R. no, you are not understanding that link. Properties are the Pythonic way.</span>
<span class="comment-copy">@S.R. I think the answer you linked is referring to defining methods like <code>get_thing</code> and <code>set_thing</code>, not using <code>@property</code>. The documentation for this facility basically describes this use case: "A typical use is to define a managed attribute x". See the specific example for the read only property <code>voltage</code>.</span>
<span class="comment-copy">@Galen - I think your right, I've been using <code>property</code> this way as described by you and the docs, but seeing that other link made me question if I was doing the right thing.</span>
<span class="comment-copy">@S.R. In Python 3, all classes are new style classes and happen to inherit from <code>object</code>. Old style classes were removed. I will edit my answer to avoid confusion.</span>
