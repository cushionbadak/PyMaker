<div class="post-text" itemprop="text">
<p>While writing some debugging python, I seem to have created a bit of ugly code that I would like to clean up.</p>
<p>Here is the function in its entirety:</p>
<pre><code>def debug(message, variable=None):
    if variable and DEBUG:
        print("\n" + str(type(variable)))
        try:
            if isinstance(variable, (list, dict, 'OrderedDict')):
                variable = json.dumps(
                    variable,
                    indent=4,
                    sort_keys=True
                )
        except TypeError:
            if isinstance(variable, (list, dict)):
                variable = json.dumps(
                    variable,
                    indent=4,
                    sort_keys=True
                )

    if DEBUG:
        if variable:
            print(message + str(variable) + "\n")
        else:
            print("\n" + message)
</code></pre>
<p>I specifically despise my try-except statement, because not only am I repeating code, but if I run into another dictionary class (like CaseInsensitiveDict from requests' headers) that I would like to print nicely during debugging output I would have to nest try-except statements.  </p>
<p>Is there a way that I could check if <code>type(variable)</code> is like <code>*dict*</code> or <code>*list*</code> then add it when creating the tuple for use in isinstance?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to look at the <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>@functools.singledispatch()</code> construct</a>; this lets you delegate to specific functions to handle your debugging, keyed on types:</p>
<pre><code>from functools import singledispatch

def debug(message, variable=None):
    if not DEBUG:
        return
    variable = debug_display(variable)
    print('{}{}\n'.format(message, variable))

@singledispatch
def debug_display(variable):
    return str(variable)

@debug_display.register(type(None))
def _none_to_empty_string(_ignored):
    return ''

@debug_display.register(dict)
@debug_display.register(list)
@debug_display.register(OrderedDict)
def _as_json(variable):
    return json.dumps(
        variable,
        indent=4,
        sort_keys=True
    )

@debug_display.register(SomeOtherType)
def _handle_specific_type(variable):
    # handle custom types any way you need to with separate registrations
    return "{} -&gt; {}".format(variable.spam, variable.ham)
</code></pre>
<p><code>singledispatch</code> knows how to delegate for subclasses that don't have specific handlers; so <code>OrderedDict</code> is handled by the <code>_as_json</code> handler because it is a subclass of <code>dict</code>.</p>
</div>
<span class="comment-copy"><code>'OrderedDict'</code> is not a valid type, that's a <i>string</i>.</span>
<span class="comment-copy">The only reason your code throws an exception is because you used a string as a type in your <code>isinstance()</code> call. There is no reason to nest any type errors here.</span>
<span class="comment-copy">It seems like you could be using the <code>logging</code> module to handle much of this logic. It's also not clear why you would check for an instance and still expect a <code>TypeError</code> as a possibility.</span>
<span class="comment-copy">Thanks for reaching out. It is a set class when using <code>xmltodict</code>, and this code behaves as expected when parsing variables set from the use of <code>xmltodict.parse(xml_string)</code>.  From what I have read the tuple has to be either types or classes.</span>
<span class="comment-copy">I will have to check out the <code>logging</code> module I have not used this before.</span>
<span class="comment-copy">Awesome!  Thanks for your time.</span>
