<div class="post-text" itemprop="text">
<p>Let's assume I have the following list
names = ['tan','2','alp','3','tan','4','alp','3','tan','1']</p>
<p>the odd indexed elements are some values and even indexed elements are their number of occurrences (so alp happened 3+3 = 6 times for example)</p>
<p>I am trying to make code to do that.</p>
<p>enter code here</p>
<pre><code>names = ['tan','2','alp','3','tan','4','alp','3','tan','1']

i = 1;
dd = names[0::2]
nn = names[1::2]
ct = [0 for cc in range(len(dd))];
le = len(dd);

for i in range(0, le):
    ct[i] = int(nn[i])
    for j in range(i+1, le):
        if (j &lt; le) and (dd[i] == dd[j]):
            ct[i] += int(nn[j]);
            del(dd[j])
            # del(nn[j])
            le -= 1
</code></pre>
<p>the output i get for ct is [9, 7, 4, 3, 1]
however it should be [7, 6]
--- 7 for tan and 6 for alp</p>
<p>if i uncommented del(nn[j])
--- i  will be equal to le and code will stop</p>
<p>but i should delete the element and the number of occurrences it happened any time after first time (after adding it in ct for sure) so the counting process doesn't get repeated</p>
<p>any idea how to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's relatively easy - build a lookup map from your odd elements and then sum the matching even values. You can use <code>collections.defaultdict()</code> to make your life easier:</p>
<pre><code>import collections

names = ['tan', '2', 'alp', '3', 'tan', '4', 'alp', '3', 'tan', '1']

lookup_map = collections.defaultdict(int)
for element, value in zip(names[0::2], names[1::2]):
    lookup_map[element] += int(value)

print(dict(lookup_map))  # {'tan': 7, 'alp': 6}
</code></pre>
<p>If you really need only the values and need to keep the order, you can add an additional step:</p>
<pre><code>result = [lookup_map.pop(element) for element in names[0::2] if element in lookup_map]

print(result)  # [7, 6]
</code></pre>
<p>If you're after the occurrences / total occurrences per element calculation, you can just apply the sum-total over the whole lookup map:</p>
<pre><code>sum_total = sum(lookup_map.values())
for name in lookup_map:
    lookup_map[name] /= sum_total

print(dict(lookup_map))  # {'alp': 0.46153846153846156, 'tan': 0.5384615384615384}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can use a dictionary to keep track of the counts more easily than a list. Below I use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> which is a dict subclass from the standard library that supports default values.</p>
<pre><code>from collections import defaultdict

names = ['tan','2','alp','3','tan','4','alp','3','tan','1']

d=defaultdict(int)
for name, count in zip(*[iter(names)]*2):
    d[name] += int(count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use un object to store the occurences of each name </p>
<pre><code>names = ['tan','2','alp','3','tan','4','alp','3','tan','1']

# Use an object to store occurences
results = {}

# Iterate through 'names' to get occurences
for i in range(len(names)):
    if i % 2 == 0:
        # Store them in the object
        if names[i] in results: # if 'name' exist in results object
            results[names[i]] += int(names[i+1])
        else:                   # if it doesn't
            results[names[i]] = int(names[i+1])

# Get the value only array
res_arr = [v for k,v in results.items()]
print results
print res_arr
</code></pre>
<p>This would output :</p>
<pre><code>{'tan': 7, 'alp': 6}
[7, 6]
</code></pre>
</div>
<span class="comment-copy">When you say "I am trying to make code to do that.", what do you mean? Do you want to take a list of names like <code>["Alice", "Bob", "Alice"]</code> and convert it to <code>["Alice", "2", "Bob", "1"]</code>? I'm just having a hard time understanding what you're trying to accomplish.</span>
<span class="comment-copy">sorry for my bad english  i got the answer, thanks for being interested, i appreciate it</span>
<span class="comment-copy">can i get probability of each word in the dictionary after that  no. of occurrences of tan / total occurrences  = 7 /13</span>
<span class="comment-copy">@mhmod2222 - check the update</span>
<span class="comment-copy">thank you very much you are a hero :)</span>
<span class="comment-copy">seems you are right thank you</span>
<span class="comment-copy">Oh...I get it. The <code>iter(names)</code> is referenced twice and points to the same object...lol. I was sitting here scratching my head and wondering how the heck does that work??</span>
<span class="comment-copy">For anyone else that's confused, I've written a pretty detailed explanation of what's happening here: <a href="https://stackoverflow.com/a/40495407/6779307">stackoverflow.com/a/40495407/6779307</a></span>
