<div class="post-text" itemprop="text">
<pre><code>alphabet =['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
key = ''
for a in range(26):
    key += alphabet[a]
    print(key)
    key = ''

for a in range(26):
    for b in range(26):
        key += alphabet[a]+ alphabet[b]
        print(key)
        key = ''

for a in range(26):
    for b in range(26):
        for c in range(26):
            key += alphabet[a]+ alphabet[b]+ alphabet[c]
            print(key)
            key = ''
</code></pre>
<p>Hey! I'm in need of an efficient program to generate every word of 20 or less letters. I have created the code above to generate all possible 1, 2 and 3 letter words. However, this seems to be an inefficient method. So my question is: 'Is There a more efficient method to generate these words upto and including 20 letters' 
Edit: I'm in python 2.7.9 if that helps</p>
</div>
<div class="post-text" itemprop="text">
<p>The below uses <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to produce the combinations of letter and <code>''.join</code> to join them into a word.</p>
<pre><code>from string import ascii_lowercase as lowercase
from itertools import product

length = 5

for word in (''.join(x) for x in product(lowercase, repeat=length)):
    print(word)
</code></pre>
<p>Pretty much no matter what you do this is going to take a long time.  Even a 5 letter word will have <code>26**5</code> possibilities, which works out to <code>11881376</code> or almost 12 million.  Unless generating all the 20 letter combinations is an absolute requirement, you should look for a way to avoid it.</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't possible. The number of possibilities is far too high. If it was easy to generate all combinations up to 20 characters, then password cracking would be extremely easy.</p>
<p>Let's say we can generate 10 million combinations per second, how long would it take to generate all possible combinations of just 20 characters? Note, this is JUST 20 character words - it does not include 19 character words or 6 character words.</p>
<pre><code>&gt;&gt;&gt; combinations = 20**26
&gt;&gt;&gt; per_second = 10000000
&gt;&gt;&gt; seconds_required = combinations / per_second
&gt;&gt;&gt; combinations
6710886400000000000000000000000000
&gt;&gt;&gt; int(seconds_required)
671088640000000000000000000
&gt;&gt;&gt; days_required = seconds_required / 60 / 60 / 24
&gt;&gt;&gt; int(days_required)
7767229629629629202432
&gt;&gt;&gt; years_required = days_required / 365
&gt;&gt;&gt; int(years_required)
21280081177067479040
&gt;&gt;&gt; age_of_universe = 13800000000
&gt;&gt;&gt; int(age_of_universe)
13800000000
</code></pre>
<p>You can use <a href="https://docs.python.org/3.6/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a> to generate combinations up to specific lengths, but you'll want to time how long (and how much memory is used) it takes for specific lengths. I think you'll find once you hit 8-10 letters it becomes unreasonably long to calculate.</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; import string
&gt;&gt;&gt; l = list(product(string.ascii_lowercase, repeat=5))
&gt;&gt;&gt; len(l)
11881376
</code></pre>
</div>
<span class="comment-copy">You need itertools.<a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">permutations</a>/<a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a>.</span>
<span class="comment-copy">Can't pretend I've heard of it so thanks</span>
<span class="comment-copy">Use recursion if you're not going to use itertools.</span>
<span class="comment-copy">It takes ages but my programme works so i believe you will find that it is possible.</span>
<span class="comment-copy">@BenWhitehead then you aren't generating every possible word containing 20 characters. Did you look at the time required above? Can you point out where it's wrong if you're program is correct?</span>
