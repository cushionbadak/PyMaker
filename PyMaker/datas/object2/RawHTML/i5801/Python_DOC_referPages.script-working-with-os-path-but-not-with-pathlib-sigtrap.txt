<div class="post-text" itemprop="text">
<p>I was advised to take advantage of the pathlib module in Python 3.6, as I am designing a script on Linux that'll be used in production on Windows machines.</p>
<p><code>pathlib</code> does seem promising, but while my code with the <code>os</code> module works great:</p>
<pre><code>class Watcher:
    DIRECTORY_TO_WATCH = os.path.join(os.path.expanduser("~"), 'Dropbox', 'credits_hd_jobs')

    print(DIRECTORY_TO_WATCH)

    def __init__(self):
        self.observer = Observer()


    def run(self):
        event_handler = Handler()
        self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=False)
        self.observer.start()
</code></pre>
<p>If I change to the pathlib equivalent:</p>
<pre><code>from pathlib import Path as p

class Watcher:
    DIRECTORY_TO_WATCH = p.joinpath(p.home(), 'Dropbox', 'credits_hd_jobs/')
    print(DIRECTORY_TO_WATCH)

    def __init__(self):
        self.observer = Observer()


    def run(self):
        event_handler = Handler()
        self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=False)
        self.observer.start()
</code></pre>
<p>80% I'll get this error in Pycharm:</p>
<blockquote>
<p>Process finished with exit code 133 (interrupted by signal 5: SIGTRAP)</p>
</blockquote>
<p>or the script will run, but my triggers won't fire at all.  Confusing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok. I've found the solution:</p>
<pre><code>os.path.join(os.path.expanduser("~"), 'Dropbox', 'credits_hd_jobs')
</code></pre>
<p>returns an <code>str</code>, while:</p>
<pre><code>p.joinpath(p.home(), 'Dropbox', 'credits_hd_jobs/')
</code></pre>
<p>returns a <code>PosixPath</code></p>
<p>I ended up casting the latter as a string by using <code>str()</code>, although this looks ugly to me. I'm keeping the question open for better answers.</p>
</div>
<span class="comment-copy">From the <code>pathlib</code> <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="nofollow noreferrer">documentation</a>, it sounds like this is how to do it (or modify the <code>Observer.schedule()</code> method to handle both strings and <code>Path</code> instances (or just unconditionally apply <code>str()</code> to the argument at the start of the function's code).</span>
