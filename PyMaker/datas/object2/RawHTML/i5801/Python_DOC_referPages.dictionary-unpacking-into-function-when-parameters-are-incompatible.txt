<div class="post-text" itemprop="text">
<p>I'm not sure that it's possible, I would like to unpack dictionary into function but I haven't similar parameters. Is it possible to easily restrict a dictionary to a subset?</p>
<pre><code>def foo(a=0, b=0, c=0):
    print("a=%s, b=%s, c=%s"%(a,b,c))

my_dict = {'a':10, 'b':20, 'd':40}
foo(**my_dict)
</code></pre>
<p>Output</p>
<pre><code>TypeError                                 Traceback (most recent call last)
&lt;ipython-input-1-d40731664736&gt; in &lt;module&gt;()
      3 
      4 my_dict = {'a':10, 'b':20, 'd':40}
----&gt; 5 foo(**my_dict)

TypeError: foo() got an unexpected keyword argument 'd'
</code></pre>
<p>And I want to obtain</p>
<pre><code>a=10, b=20, c=0
</code></pre>
<p>result where 'd' is automatically rejected.</p>
<p>It's just an example. In my case the function is not mine, I cannot redefined her parameters, foo is unmodifiable.</p>
<p>I have many functions in similar case as foo() and these functions are object's methods.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer">Inspecting the function signature</a> will help:</p>
<pre><code>import inspect

params = inspect.signature(foo).parameters.keys()

foo(**{k: v for k, v in my_dict.items() if k in params})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a (hopefully) correct solution using <code>inspect</code>. Since the parameter list returned by <code>inspect</code> may contain star args and also positional only args, it is not enough to just compare the names.</p>
<pre><code>import inspect

def filter_kwds(f, kwds):
    params = inspect.signature(f).parameters
    if any(p.kind == inspect.Parameter.VAR_KEYWORD for p in params.values()):
        return kwds
    else:
        return {k:kwds[k] for k, v in params.items()
                if k in kwds and v.kind in (inspect.Parameter.KEYWORD_ONLY,
                                            inspect.Parameter.POSITIONAL_OR_KEYWORD)}

def f(a, *b, c=4):
    pass

def g(a, *b, c=4, **d):
    pass

print(filter_kwds(f, dict(a=1, b=2, d=4)))
print(filter_kwds(g, dict(a=1, b=2, d=4)))
</code></pre>
<p>Output:</p>
<pre><code>{'a': 1}
{'a': 1, 'b': 2, 'd': 4}
</code></pre>
<p>Note that the function in the first example omits the name of the star arg, and in the second example detects the presence of a double star arg and therefore does no filtering</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/3420122/filter-dict-to-contain-only-certain-keys">Related</a></span>
<span class="comment-copy">Note that <code>inspect.signature()</code> is not available pre-Python 3.3. Use <a href="https://docs.python.org/2/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer"><code>inspect.getargspec()</code></a> in 2.x.</span>
<span class="comment-copy">I thought to it and I hoped an easier solution.  Thank you!</span>
<span class="comment-copy">This solution is not correct: Try <code>def foo(*args): pass</code> and <code>my_dict = dict(args=0)</code>.</span>
<span class="comment-copy">I agree that there are more complete solutions possible, depending on what scenarios need to be supported.</span>
<span class="comment-copy">Well, OP says they have no control over <code>foo</code>, so that would make it a better expect anything scenario.</span>
