<div class="post-text" itemprop="text">
<p>i have a big problem , in a function for start to work i need to find the first node in a tree , here an example :</p>
<pre><code>              "hi"
            /     \
           /       \
          "ok"     "no"
          /
         /
       "lol"
</code></pre>
<p>the problem is that i dont know how to take it from a dict , because the input is like this :</p>
<pre><code>{ "ok":["lol"] , "no":[] , "hi": ["ok","no"] , "lol" : [] }
</code></pre>
<p>so in this case "hi" is the first because nobody has "hi" in dict.values() the problem is how to say that and most important the dict has 50'000 nodes so if i check one by one it goes in overtime .</p>
<p>i wrote this :</p>
<pre><code>    d = { "ok":["lol"] , "no":[] , "hi": ["ok","no"] , "lol" : [] }
    x = d.values()
    x = str(x)
    for y in d.keys():
        if not y in x :
            first_node = y
            break
</code></pre>
<p>but the problem is that can be a word like "hello" and a "key" like "hell" so "hell" is in "hellow" but is not "hellow" :(</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to do it using <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.difference" rel="nofollow noreferrer"><code>set.difference</code></a>.  </p>
<pre><code>from itertools import chain

d = { "ok":["lol"] , "no":[] , "hi": ["ok","no"] , "lol" : [] }
roots = set(d).difference(chain.from_iterable(d.values()))
</code></pre>
<p>gives us </p>
<pre><code>{'hi'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension:</p>
<pre><code>d = { "ok":["lol"] , "no":[] , "hi":["ok","no"] , "lol" : [] }
root = [a for a, b in d.items() if all(a not in d for c, d in d.items())][0]
</code></pre>
<p>Output:</p>
<pre><code>'hi'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could pick a random node and follow it to the top.
I just wrote something up, im gonna timeit and report results:</p>
<pre><code>d = { "ok":["lol"] , "no":[] , "hi": ["ok","no"] , "lol" : []}

node = list(d.keys())[0]
found = False
while not found:
    found = True
    for key, value in d.items():
        if node in value:
            node = key
            found = False

print(node)
</code></pre>
<hr/>
<p>Turns out that my solution performed best in the test environment:</p>
<pre><code>**10 nodes**
0.0000020000017 s - my solution
0.0000043555594 s - using set.diffrence by Patrick Haugh
0.0001111112098 s - list comprehension by Ajax1234

**1000 nodes**
0.0007560006720 s - my solution
0.0015977791980 s - using set.diffrence by Patrick Haugh
0.3337478522203 s - list comprehension by Ajax1234

**10000 nodes**
0.0077213401967 s - my solution
0.0138804567826 s - using set.diffrence by Patrick Haugh
35.264710457520 s - list comprehension by Ajax1234
</code></pre>
</div>
<span class="comment-copy">hello not hellow sorry</span>
<span class="comment-copy">You can (and should) edit your question instead</span>
<span class="comment-copy">but if i have this list : {'bellissimanon': ['cio', 'cia'], 'cio': [], 'belissima': ['belissimanon'], 'cia': []}  he gives back {'belissima', 'bellissimanon'} , but it should be only "bellissima"</span>
<span class="comment-copy">@AliToccacieli Is it intentional that you have two different spellings of <code>belissimanon</code> there?</span>
<span class="comment-copy">yeah, its a spelling mistake and therefore you have 2 starting nodes</span>
<span class="comment-copy">my error , it works niceee tnx so much because all the exercise was correct only when the first node was not in order the result was different but now is good tnx ^.^ best !!!!</span>
<span class="comment-copy">same problem as i write up if the dictionary is like that :          d = {"bellissimanon":["cio","cia"],"cio":[],"belissima["belissimanon"],"cia":[]}   he give us back :                  'bellissimanon' if u put [1] "bellissima" that it mean 2 result</span>
<span class="comment-copy">i did it tnx anyways i will try this too and see witch is more faster tnx to every one :D</span>
<span class="comment-copy">Mine is the fastest, but <code>set.diffrence</code> finds all roots</span>
