<div class="post-text" itemprop="text">
<p>I am writing python code to install all the library packages required by my program in the linux environment.So the linux may contain python 2.7 or 2.6 or both so I have developed a try and except block codes that will install pip packages in linux. Try block code consists of python 2.7 version pip install and Catch block contains python 2.6 version pip install. My Problem is the peace of code is working fine, when i tried to install pandas in python 2.6 its getting me some errror. I want to catch that exception. Can you please tell me how to improve my try except blocks to catch that exception</p>
<pre><code>required_libraries = ['pytz','requests','pandas']
try:
   from subprocess import check_output
   pip27_path = subprocess.check_output(['sudo','find','/','-name','pip2.7'])
   lib_installs = [subprocess.call((['sudo',pip27_path.replace('\n',''),'install', i])) for i in required_libraries]
except:
   p = subprocess.Popen(['sudo','find','/','-name','pip2.6'], stdout=subprocess.PIPE);pip26_path, err = p.communicate()
   lib_installs = [subprocess.call((['sudo',pip26_path.replace('\n',''),'install', i])) for i in required_libraries]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can catch several exceptions using one block. Let's use Exception and ArithmeticError for exceptions.</p>
<pre><code>try:
    # Do something
    print(q)

# Catch exceptions  
except (Exception, ArithmeticError) as e:
    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
    message = template.format(type(e).__name__, e.args)
    print (message)
</code></pre>
<p>If you need to catch several exceptions and handle each one on its own then you'd write an except statement for each one.</p>
<pre><code>try:
    # Do something
    print(q)

# Catch exceptions  
except Exception as e:
    print (1)

except ArithmeticError as e:
    print (2)

# Code to be executed if the try clause succeeded with no errors or no return/continue/break statement

else:
    print (3)
</code></pre>
<p>You can also check if the exception is of type "MyCustomException" for example using if statements.</p>
<pre><code>if isinstance(e, MyCustomException):
    # Do something
    print(1)
</code></pre>
<p>As for your problem, I suggest splitting the code into two functions.</p>
<pre><code>install(required_libraries)

def install(required_libraries, version='pip2.7'):
    # Perform installation
    try:
        from subprocess import check_output
        pip27_path = subprocess.check_output(['sudo','find','/','-name', version])
        lib_installs = [subprocess.call((['sudo',pip27_path.replace('\n',''),'install', i])) for i in required_libraries]

    except Exception as e:
        backup(required_libraries)

def backup(required_libraries, version='pip2.6'):
    try:
        p = subprocess.Popen(['sudo','find','/','-name',version]], stdout=subprocess.PIPE);pip26_path, err = p.communicate()
        lib_installs = [subprocess.call((['sudo',pip26_path.replace('\n',''),'install', i])) for i in required_libraries]

    except Exception as e:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(e).__name__, e.args)
        print (message)

        #Handle exception
</code></pre>
<p>Note: I didn't test this, I'm no expert as well so I hope I can help.</p>
<p>Useful links:</p>
<ol>
<li><a href="https://docs.python.org/2/library/exceptions.html" rel="nofollow noreferrer">Built-in Exceptions</a></li>
<li><a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">Errors and Exceptions</a></li>
<li><a href="https://docs.python.org/2/reference/compound_stmts.html?highlight=try%20except#the-try-statement" rel="nofollow noreferrer">Compound statements</a></li>
</ol>
</div>
<span class="comment-copy">Put another try: except: block inside the except you already have?</span>
<span class="comment-copy">@ChrisCharles Just now i tried the same one. still not catching the exception</span>
<span class="comment-copy">@ChrisCharles         except: 		try: 		    p = subprocess.Popen(['sudo','find','/','-name','pip2.6'], stdout=subprocess.PIPE);pip26_path, err = p.communicate() 				lib_installs = [subprocess.call((['sudo',pip26_path.replace('\n',''),'install', i])) for i in required_libraries] 	         except Exception as e: 				logging.info("error in pip_installs function '%s'" %e)</span>
<span class="comment-copy">Thank you so  much for the reply. I will check which one will be best suited for the code.</span>
<span class="comment-copy">@Rahul please accept the answer if my suggestion works! Good luck!</span>
<span class="comment-copy">@sure i will do that</span>
<span class="comment-copy">@Rahul you never did accept his answer.</span>
<span class="comment-copy">The comment <i>"If it's an exception but it's none of the above"</i> in the second code block regarding the purpose of 'else' in a try-except-else block is not correct. In fact, the code within the 'else' suite is executed only if no exception whatsoever was raised in 'try'. See the <a href="https://docs.python.org/2/reference/compound_stmts.html?highlight=try%20except#the-try-statement" rel="nofollow noreferrer">Python docs</a>: "The optional else clause is executed if the control flow leaves the try suite, no exception was raised, and no return, continue, or break statement was executed."</span>
