<div class="post-text" itemprop="text">
<p>I have 10 functions which has to be called in a loop...</p>
<p>But if the user gives input 5, first 5 functions should be called.</p>
<p>If user gives 11 , after calling the 10 functions , it should start calling the rest 1 from the Beginning</p>
<p>I wrote the all the 10 functions, but I don't know how to achieve this.</p>
<pre><code>def function_one():
    print("This is the first function")


def function_second():
    print("This is the second function")

.....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put your functions into a list:</p>
<pre><code>functions = [function_one, function_two, function_three, ...]
</code></pre>
<p>And loop over them:</p>
<pre><code>n = int(input('Number: '))
for i in range(n):
    functions[i]()
</code></pre>
<p>Now what comes to your requirement:</p>
<blockquote>
<p>If user gives 11 , after calling the 10 functions , it should start calling the rest 1 from the Beginning</p>
</blockquote>
<p>There are many ways to do this, but if we want to stick to the above code, we can just use the modulo operator (<code>%</code>) to allow "going past" the end:</p>
<pre><code>n = int(input('Number: '))
for i in range(n):
    functions[i % len(functions)]()
</code></pre>
<p>You could also change the approach completely and use <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="noreferrer"><code>itertools.cycle()</code></a> instead of looping over the list's indexes, and use the built-in <a href="https://docs.python.org/3/library/functions.html#next" rel="noreferrer"><code>next()</code></a> to get the functions:</p>
<pre><code>import itertools

functions = [function_one, function_two, function_three, ...]
functions_it = itertools.cycle(functions)

n = int(input('Number: '))
for i in range(n):
    next(functions_it)()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put your functions in a list, then cycle through the list using the modulus operator, where N is the number of functions you are supposed to call:</p>
<pre><code>functions = [function_one, function_two, function_three, ..., function_ten]
num_of_funcs = len(functions)

for i in range(N):
    functions[i % num_of_funcs]()
</code></pre>
<p><code>i % num_of_funcs</code> will ensure that you start with the first function and wrap around to the first function again once you've hit the last function in the list. </p>
</div>
