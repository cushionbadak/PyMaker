<div class="post-text" itemprop="text">
<p>Lets say that I have a bus that receives messages from somewhere. Every message has <code>target</code> and <code>msg</code>, and I want to implement subscription mecahnism, so other coroutines can <code>subscribe</code> to specific <code>target</code> </p>
<pre class="lang-python prettyprint-override"><code>subscriptions = {}
async def subscribe(target):
    subscriptions[target]= wait_for_messages()

async def proc_msg(target,msg);
    subscriptions[target].send(msg)

async def wait_for_messages():
     while True:
        asyncio.sleep(1)

async def subscribe(target)
    async for msg in subscribe(target):
      print(msg)
</code></pre>
<p>My question is regarding the <code>wait_for_messages</code>, Even though sleep kind of works (the code is for presentation only), How can I await for the send command without sleeping and awaking constantly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Subscription mechanism is from callback world and <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future" rel="nofollow noreferrer">asyncio.Future</a> - is some sort of bridge from callback-based to coroutine-based world: with it you can await of something happened. Use <code>set_result</code> on msg coming and <code>await</code> for Future to recieve msg inside coroutine.</p>
<p>For example:</p>
<pre><code>import asyncio
from random import randint
from collections import defaultdict
from contextlib import suppress


# MSG SUBSCRIBE/SEND API:
_futures = defaultdict(asyncio.Future)


async def msg_for_target(target):
    """Await for this coroutine to recieve msg."""
    return await _futures[target]


def send_msg(target, msg):
    _futures[target].set_result(msg)
    del _futures[target]  # We would need new Future for future subscribers


# TEST:
async def random_sender():
    """Send random messages."""
    i = 0
    while True:
        i += 1
        await asyncio.sleep(0.5)

        target = randint(0, 3)
        msg = f'msg {i}'        
        print(f'Sending msg "{msg}" for target "{target}" ...')
        send_msg(target, msg)


async def main():
    task = asyncio.ensure_future(random_sender())

    for target in (2, 0, 3, 1):
        print(f'&gt; Subscribed for target "{target}"')
        msg = await msg_for_target(target)
        print(f'&gt; Recieved "{msg}"')
        print()

    # Cleanup, see https://stackoverflow.com/a/43810272/1113207
    task.cancel()
    with suppress(asyncio.CancelledError):
        await task


if __name__ ==  '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    finally:
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt; Subscribed for target "2"
Sending msg "msg 1" for target "2" ...
&gt; Recieved "msg 1"

&gt; Subscribed for target "0"
Sending msg "msg 2" for target "3" ...
Sending msg "msg 3" for target "0" ...
&gt; Recieved "msg 3"

&gt; Subscribed for target "3"
Sending msg "msg 4" for target "2" ...
Sending msg "msg 5" for target "2" ...
Sending msg "msg 6" for target "2" ...
Sending msg "msg 7" for target "1" ...
Sending msg "msg 8" for target "3" ...
&gt; Recieved "msg 8"

&gt; Subscribed for target "1"
Sending msg "msg 9" for target "0" ...
Sending msg "msg 10" for target "0" ...
Sending msg "msg 11" for target "2" ...
Sending msg "msg 12" for target "2" ...
Sending msg "msg 13" for target "1" ...
&gt; Recieved "msg 13"
</code></pre>
</div>
