<div class="post-text" itemprop="text">
<p>I have a list that looks like:</p>
<pre><code>A
B
C
D
E
F
G
</code></pre>
<p>How do I solve this to find all combinations for 3 digits.  The same letter cannot be used in same row.</p>
<pre><code>ABC
ABD
ABE
ABF
ABG
AGB
</code></pre>
<p>E.g something like...:</p>
<pre><code>x = ['a','b','c','d','e']
n = 3
import itertools
aa = [list(comb) for i in range(1, n+2) for comb in itertools.combinations(x, i)]
print(aa)
</code></pre>
<p>This does not give desired input:</p>
<pre><code>[['a'], ['b'], ['c'], ['d'], ['e'], ['a', 'b'], ['a', 'c'], ['a', 'd'], ['a', 'e'], ['b', 'c'], ['b', 'd'], ['b', 'e'], ['c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python Standard Library <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools</a> already has the functionality you are trying to implement. Also you are using it in your code (funnily). </p>
<p><code>itertools.combinations(a,3)</code> returns all 3-combinations of the a. To convert that to "list of list" you should use <code>.extend()</code> as follows;</p>
<pre><code>x = ['a','b','c','d','e']
n = 3
import itertools
permutations = []
combinations = []
combinations.extend(itertools.combinations(x,n))
permutations.extend(itertools.permutations(x,n))

print("Permutations;", permutations)
print("\n")
print("Combinations;", combinations)
</code></pre>
<blockquote>
<p>Additionally, I suggest you to search on "<a href="https://www.mathsisfun.com/combinatorics/combinations-permutations.html" rel="nofollow noreferrer">Combination, Permutation Difference</a>". As I understood from your question; permutation is what you want. (If you run the code I shared, you will understand the difference easliy.)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>To understand how the solution process works, try the following:</p>
<pre><code># get all combinations of n items from given list
def getCombinations(items, n):
    if len(items) &lt; n: return [] # need more items than are remaining 
    if n == 0: return [''] # need no more items, return the combination of no items

    [fst, *rst] = items

    # all combinations including the first item in the list
    including = [fst + comb for comb in getCombinations(rst, n-1)]

    # all combinations excluding the first item in the list
    excluding = getCombinations(rst, n)

    both = including + excluding
    return both

x = ['a','b','c','d','e']
n = 3
print(getCombinations(x, n))
# ['abc', 'abd', 'abe', 'acd', 'ace', 'ade', 'bcd', 'bce', 'bde', 'cde']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>combinations works on strings not lists, so you should first turn it into a string using: <code>''.join(x)</code></p>
<pre><code>from itertools import combinations
x = ['a', 'b', 'c', 'd', 'e']
n = 3
aa = combinations(''.join(x), n)
for comb in aa:
    print(''.join(comb))
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>abc
abd
abe
acd
ace
ade
bcd
bce
bde
cde
</code></pre>
<p>Or as a one-liner:</p>
<pre><code>[''.join(comb) for comb in combinations(''.join(x), n)]
</code></pre>
</div>
<span class="comment-copy">I think you are close.  I am not 100% sure I understand what your desired output is though.  I used <code>aa = [list(comb) for i in range(3, 4) for comb in itertools.combinations(x, i)]</code> to get <code>[['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'd', 'e'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'd', 'e'], ['c', 'd', 'e']]</code></span>
<span class="comment-copy">Are the Permutations all unique?</span>
<span class="comment-copy">This generates combinations, but not permutations. i.e. it includes <code>abc</code> and not <code>bac</code>. It assumes that the elements in the list supplied are unique, meaning if you give it <code>['a', 'a', 'b']</code> you will get two <code>'ab'</code>s.</span>
<span class="comment-copy">I'm a little confused at the difference.    Permutations seem to give more possible combinations with none the same?</span>
