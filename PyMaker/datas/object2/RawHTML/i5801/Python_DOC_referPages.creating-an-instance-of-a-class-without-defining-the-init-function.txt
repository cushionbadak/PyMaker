<div class="post-text" itemprop="text">
<p>I am relativly new to python and I was wondering if you could create an instance of a class without defining the <strong>init</strong> explicity. Could I call it something else?</p>
<p>First example - with the <strong>init</strong> method:</p>
<pre><code>class dog:
def __init__(self,name):
    self.name=name
    print('My name is',name)
Bob = dog('Bob')
</code></pre>
<p>Second example - without the <strong>init</strong> method:</p>
<pre><code>class dog:
def init_instance(self,name):
    self.name = name
    print('My name is',name)

Bob = dog('Bob')
</code></pre>
<p>In the first example the code works but in the second example I get:</p>
<blockquote>
<p>TypeError: object() takes no parameters</p>
</blockquote>
<p>So based on this I assume that one has to <strong>explicitly</strong> call the <strong>init</strong> method. BUT I have seen code where the <strong>init</strong> method has not been used, how come?</p>
</div>
<div class="post-text" itemprop="text">
<p>Every class has an <code>__init__</code> method. If it doesn't explicitly define one, then it will inherit one from its parent class. In your 2nd example, the class inherits <code>__init__</code> and a bunch of other methods (and other non-method attributes) from the base <code>object</code> class. We can see that via the <code>dir</code> function:</p>
<pre><code>class Dog:
    def init_instance(self,name):
        self.name = name
        print('My name is',name)

print(dir(Dog))
</code></pre>
<p><strong>output</strong></p>
<pre><code>['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'init_instance']
</code></pre>
<p><code>__init__</code> gets called automatically after the instance is constructed (via the <code>__new__</code> method), so we might as well use it if we need to initialize our instance. But we can call your <code>init_instance</code> explicitly:</p>
<pre><code>bob = Dog()
bob.init_instance('Bob')
print(bob.name)    
</code></pre>
<p><strong>output</strong></p>
<pre><code>My name is Bob
Bob
</code></pre>
<p>If you give you class an initializer that isn't named <code>__init__</code> then it <em>won't</em> get called automatically. How should Python know that that method is an initializer? Although it's customary to make <code>__init__</code> the first method in the class definition, that's by no means mandatory, and some people like to put <code>__init__</code> <em>last</em>.</p>
<p>You said: "I have seen code where the init method has not been used, how come?" Well, some classes simply don't need their instances to be initialized: their instance attributes are set via various other methods, or by direct assignment in code outside the class definition, eg <code>bob.color = 'brown'</code>. Or they inherit a perfectly usable <code>__init__</code> from a parent class. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>init</code> is nothing else then a method to initially prepare the state of your object. In other languages they have similar concepts as <code>Constructors</code> and it's not necessarily needed. </p>
</div>
<span class="comment-copy">Check out <code>__new__()</code></span>
<span class="comment-copy">When creating an object from class the parameters you pass are passed to the <code>__init__</code> function declared in the class. Since you have not declared it, python will fall back to the default implementation which does not accept any arguments. <code>Bob = dog()</code> and then <code>Bob.init_instance("Bob")</code> will work.</span>
<span class="comment-copy">Well, Python isnâ€™t going to know that it should call something named <code>init_instance</code> instead of <code>__init__</code>, but you can make <code>init_instance</code> a <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer"><code>classmethod</code></a> and call <code>dog.init_instance('Bob')</code> (changing it to also create an instance instead of just initializing one).</span>
<span class="comment-copy">Maybe if you said why you are trying to do this, you would get better help.</span>
<span class="comment-copy">@Anake I am not trying to do anything, just trying to understand why I explicity need to call __init__(). Why I cant name it someting else.</span>
<span class="comment-copy">This was a good explanation, finally. So I want to summarize how it works when creating an object:   __new__() creates the instance  __init__() initalize the instance, i.e. preparing my object to have e.g. names, colors etc.   But we can make our own initializer and call it instead.</span>
<span class="comment-copy">@John Correct. In fact, with large classes (eg for a GUI), it's common to break up the initialization into separate logical stages, with a separate method for each stage, and have <code>__init__</code> call those methods.</span>
<span class="comment-copy">Finally, thank you!</span>
<span class="comment-copy">Sometimes <code>__init__</code> is called the constructor, but technically speaking, that's not correct. The constructor in Python is <code>__new__</code>, and <code>__init__</code> is the initializer.</span>
<span class="comment-copy">Technically both are used to construct objects, but talking about priorities, <code>__new__</code> is the one that is first called.</span>
<span class="comment-copy">Well sure, because <code>__init__</code> (usually) constructs the instance attributes. OTOH, a lot of terminology used to describe the mechanics of other languages doesn't really apply well to Python because Python doesn't have declarations, it just defines things.</span>
<span class="comment-copy">That's true, I just thought if the OP is coming from a different programming background <code>Constructor</code> might be the most close thing to understand of what init does.</span>
