<div class="post-text" itemprop="text">
<p>Let's say a have a list of strings and a particular string: </p>
<pre><code>particular_string = 'latitude'
list_ = ['Id', 'PRICE', 'LATitude', 'longitude']
</code></pre>
<p>What I want to achieve, is to perform a case insensitive check if a particular string is in the list, so now I can do:</p>
<pre><code>list_casefolded = (list_element.casefold() for list_element in list_)
if particular_string.casefolded() in list_casefolded:
    ...
</code></pre>
<p>But at the end of the day, I still have no idea <strong>what was the originally mapped string in the list</strong>. </p>
<p>Simplest way to perform a check and retrieve the original element?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert <code>list_</code> into the dictionary with <code>casefold</code> keys:</p>
<pre><code>particular_string = 'latitude'
list_ = ['Id', 'PRICE', 'LATitude', 'longitude']

lookup = {i.casefold(): i for i in list_}

print(lookup.get(particular_string))
# LATitude
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>particular_string = 'latitude'
list_ = ['Id', 'PRICE', 'LATitude', 'longitude']


for element in list_:
    if particular_string.casefold()==element.casefold():
        print(element)
</code></pre>
<p>This will work.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd go for something like this:</p>
<pre><code>search_string = 'latitude'
search_string_cf = search_string.casefold()

item_list = ['Id', 'PRICE', 'LATitude', 'longitude']

for item in item_list:
    item_cf = item.casefold()

    if search_string_cf == item_cf:
        print(item)
        break
</code></pre>
<p>Or more concisely:</p>
<pre><code>search_string = 'latitude'
item_list = ['Id', 'PRICE', 'LATitude', 'longitude']

item = filter(lambda x: x.casefold() == search_string, item_list)

print(next(item))
</code></pre>
<p>Output:</p>
<pre><code>$ python3 x.py
LATitude
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way to do it:</p>
<pre><code>particular_string = 'latitude'

list_ = ['Id', 'PRICE', 'LATitude', 'longitude']

lowered = [elem.casefold() for elem in list_]

print(list_[lowered.index(particular_string)])
</code></pre>
<p>Out:</p>
<pre><code>'LATitude'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use filter? You are going to have to iterate the list anyway. Plus now you will get feedback if there are multiple different matches!</p>
<pre><code>particular_string = 'latitude'
list_ = ['Id', 'PRICE', 'LATitude', 'lAtitude', 'longitude']
print(list(filter(lambda x: x.lower() == particular_string.lower(), list_)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this, It can be extended for multiple inputs:-</p>
<pre><code>&gt;&gt;&gt; map = {particular_string: []}
&gt;&gt;&gt; for ele in list_:
...     if ele.casefold() == particular_string:
...         map[particular_string].append(ele)
&gt;&gt;&gt; map
{'latitude': ['LATitude']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>edited = [x.lower() for x in ['Id', 'PRICE', 'LATitude', 'longitude']]
location = edited.index("latitude") # returns 2
</code></pre>
<p>Then you can do:</p>
<pre><code>list_ = ['Id', 'PRICE', 'LATitude', 'longitude']
required_value = list_[location]
</code></pre>
</div>
<span class="comment-copy"><code>for elem in list_:     if particular_string.lower() == elem.lower():         print(elem)</code> ?</span>
<span class="comment-copy">@Rakesh he wants to know what the original string was - (before using .lower())</span>
<span class="comment-copy">this will print the string I'm providing, not the found one</span>
