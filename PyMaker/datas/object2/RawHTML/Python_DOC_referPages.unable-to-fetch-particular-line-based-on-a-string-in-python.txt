<div class="post-text" itemprop="text">
<p>file1.txt:</p>
<pre><code>" &gt; git rev-parse refs/remotes/origin/master^{commit} # timeout=10",
            " &gt; git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10",
            "Checking out Revision ff1b75913a79ffe7fc066bc962f74afa5e6f563a (refs/remotes/origin/master)",
            " &gt; git config core.sparsecheckout # timeout=10",
          " &gt; git checkout -f ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
            " &gt; git branch -a -v --no-abbrev # timeout=10",
            " &gt; git checkout -b master ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
            """Commit message: "Added parameter for jmeter for Jenkins"""",
            "[Pipeline] sh",
            "[petclinic] Running shell script",
</code></pre>
<p>I am reading the file content to a variable: <code>message</code> and want to fetch mentioned line:</p>
<pre><code>Commit message: "Added parameter for jmeter for Jenkins
</code></pre>
<p>I am using python 2.7. Please suggest. i tried using :</p>
<pre><code>indexofGitMsgList = [gin for gin, item in enumerate(message) if re.search('^Commit Message', item)]
indexofGitMsg = max(indexofGitMsgList)
gitMsgList = message[indexofGitMsg]
print(gitMsgList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Regex --&gt; <code>Lookbehind &amp; Lookahead</code>.</p>
<p><strong>Ex:</strong></p>
<pre><code>import re

message = '''" &gt; git rev-parse refs/remotes/origin/master^{commit} # timeout=10",
            " &gt; git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10",
            "Checking out Revision ff1b75913a79ffe7fc066bc962f74afa5e6f563a (refs/remotes/origin/master)",
            " &gt; git config core.sparsecheckout # timeout=10",
          " &gt; git checkout -f ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
            " &gt; git branch -a -v --no-abbrev # timeout=10",
            " &gt; git checkout -b master ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
            """Commit message: "Added parameter for jmeter for Jenkins"""",
            "[Pipeline] sh",
            "[petclinic] Running shell script",'''

m = re.search("(?&lt;=Commit message:)(.*?)(?=,)", message)
if m:
    print(m.group(1).strip().strip('"'))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Added parameter for jmeter for Jenkins
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>in</code> to search for the <code>str</code> and <code>replace()</code> to get rid of the <code>"</code>:</p>
<p>list.txt:</p>
<pre><code>" &gt; git rev-parse refs/remotes/origin/master^{commit} # timeout=10",
" &gt; git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10",
"Checking out Revision ff1b75913a79ffe7fc066bc962f74afa5e6f563a (refs/remotes/origin/master)",
" &gt; git config core.sparsecheckout # timeout=10",
" &gt; git checkout -f ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
" &gt; git branch -a -v --no-abbrev # timeout=10",
" &gt; git checkout -b master ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
"""Commit message: "Added parameter for jmeter for Jenkins"""",
"[Pipeline] sh",
"[petclinic] Running shell script",
</code></pre>
<p><strong>Hence</strong>:</p>
<pre><code>logFile = "list.txt"
with open(logFile) as f:
    content = f.readlines()
# you may also want to remove empty lines
content = [l.strip() for l in content if l.strip()]

searchStr = 'Commit message'

for line in content:
    if searchStr in line:
        print(line.replace('"', '')[:-1])
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>Commit message: Added parameter for jmeter for Jenkins
</code></pre>
<p><strong>EDIT</strong>:</p>
<p>To store the message in a variable:</p>
<pre><code>searchStr = 'Commit message'
commitMsg = ''
for line in content:
    if searchStr in line:
        print(line.replace('"', '')[:-1])
        commitMsg = line.replace('"', '').split(": ")[1][:-1]

print(commitMsg)   # Added parameter for jmeter for Jenkins
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very simple example would be to check if the line contains three double quotes (""") and save it in the list.</p>
<p>
<pre><code>with open('test.txt', 'r') as f:
    message = []
    for line in f.readlines():
    if '"""' in line:
        message.append(line)
    print(message)
</code></pre>
</p></div>
<div class="post-text" itemprop="text">
<p>For the easiest way, use <code>findall</code> method of regex from python:</p>
<pre><code>import re
message = '''" &gt; git rev-parse refs/remotes/origin/master^{commit} # 
    timeout=10",
        " &gt; git rev-parse refs/remotes/origin/origin/master^{commit} # 
    timeout=10",
        "Checking out Revision ff1b75913a79ffe7fc066bc962f74afa5e6f563a 
    (refs/remotes/origin/master)",
        " &gt; git config core.sparsecheckout # timeout=10",
      " &gt; git checkout -f ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
        " &gt; git branch -a -v --no-abbrev # timeout=10",
        " &gt; git checkout -b master 
    ff1b75913a79ffe7fc066bc962f74afa5e6f563a",
        """Commit message: "Added parameter for jmeter for Jenkins"""",
        "[Pipeline] sh",
        "[petclinic] Running shell script",'''


m=(re.findall("Commit message:\s.+[a-zA-Z]+",message))
for i in m:
   print(i)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Commit message: "Added parameter for jmeter for Jenkins
</code></pre>
</div>
<span class="comment-copy">@Vaeesh S M, see if the answer posted below helps?</span>
<span class="comment-copy">am getting following error: <code>indexofGitMsgList = [gin for gin, item in enumerate(message) if re.search("(?&lt;=Commit message:)(.*?)(?=,)", item)]   File "/opt/stackstorm/virtualenvs/core_pack/lib/python2.7/re.py", line 142, in search     return _compile(pattern, flags).search(string) TypeError: expected string or buffer "</code></span>
<span class="comment-copy">hey u cannot use this statement in the if, because it does not return anything of type bool, string : it returns the re.match type which cannot be accepted in your if. please try changing its type or use if str(re.findall("Commit message:\s.+[a-zA-Z]+",item)).strip('[]\'')</span>
