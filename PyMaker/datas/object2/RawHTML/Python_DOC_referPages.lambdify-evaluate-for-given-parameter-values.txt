<div class="post-text" itemprop="text">
<p>Let's say I have a <strong>symbolic</strong> variable (as coming from <code>sympy</code>) defined as</p>
<pre><code>z = r/p * (p-c)/(r-c)
</code></pre>
<p>More formally, denote this as <code>z=z(p; c, r)</code>: <code>c</code> and <code>r</code> are parameters that I want to hold constant, and <code>z</code> is really a function in <code>p</code>. 
Now, I want to evaluate <code>z=z(p)</code>, for chosen values of <code>c</code>, <code>r</code> -- but I don't want to define them within my <code>sympy</code> environment, because I want other expressions still to treat them as general and unknown parameters. </p>
<p>In essence, I'm looking for something like</p>
<pre><code>my_func = lambdify(p, z(p), parameters={'r': 2, 'c': 1})
my_func(2)
Out: 1
z
Out: r/p * (p-c)/(r-c)
</code></pre>
<p>How could I perform such numerical evaluations?</p>
</div>
<div class="post-text" itemprop="text">
<h3>This might do what you want:</h3>
<pre><code>def my_lambdify(x, y, parameters=None):
    if parameters is not None:
        try:
            ys = y.subs(parameters)
        except ValueError:
            ys = y
    else:
        ys = y
    return lambdify(x, ys)

my_func = my_lambdify(p , z, parameters={'r': 2, 'c': 3})
</code></pre>
<h3>Output:</h3>
<pre><code>my_func(2)
</code></pre>
<blockquote>
<p>1.0</p>
</blockquote>
<pre><code>z
</code></pre>
<blockquote>
<p>r*(-c + p)/(p*(-c + r))</p>
</blockquote>
<pre><code>my_func = my_lambdify(p , z, parameters={'r': 'r0', 'c': 'c0'})
my_func(2)
</code></pre>
<blockquote>
<p>r0*(-c0 + 2)/(-2*c0 + 2*r0)</p>
</blockquote>
</div>
