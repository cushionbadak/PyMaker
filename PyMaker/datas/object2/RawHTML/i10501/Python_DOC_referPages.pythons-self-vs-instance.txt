<div class="post-text" itemprop="text">
<p>What is the difference between the self and instance keywords in Python 3?</p>
<p>I see code like,</p>
<pre><code>def update(self, instance, validated_data):
    """
    Update and return an existing `Snippet` instance, given the validated data.
    """
    instance.title = validated_data.get('title', instance.title)
    instance.code = validated_data.get('code', instance.code)
    instance.linenos = validated_data.get('linenos', instance.linenos)
    instance.language = validated_data.get('language', instance.language)
    instance.style = validated_data.get('style', instance.style)
    instance.save()
    return instance
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Neither <code>self</code> nor <code>instance</code> are keywords in Python. The identifier <code>self</code> is used by convention as the first parameter of instance methods in a class. The object instance on which a method is called is automatically passed in as the first parameter.</p>
<p>In the above snippet, <code>update</code> is most probably a method of some class and <code>self</code> seems to be the conventional first parameter as described above. The second parameter <code>instance</code> is just another parameter and the name <code>instance</code> does not have any significance in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>The snippet is a bit short but <code>instance</code> is not a keyword (neither <code>self</code>, that is just convention).</p>
<p>It is an argument to another instance of another (maybe same) class.</p>
</div>
<div class="post-text" itemprop="text">
<p>The question is rather generic, but let me see if I can shed some light on it for you:</p>
<p><code>self</code> refers to the class(by convention, not a keyword) of which <code>update</code> is a part. The class has variables and methods and you can refer to these with the <code>self</code> keyword(not a reserved keyword) by calling <code>self.update(instance, validated_data)</code></p>
<p>In the case of the snippet above, <code>self</code> refers to the class. <code>instance</code> likely refers to some <code>model</code> instance "the big hint is the <code>instance.save()</code> and <code>validated_data</code> is a dictionary or class object with attributes you are <code>get</code>tting and assigning to <code>instance</code> attributes before saving them</p>
<p>Hope this helps</p>
</div>
<span class="comment-copy">Neither is a keyword. <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">docs.python.org/3/reference/lexical_analysis.html#keywords</a></span>
<span class="comment-copy">This looks to be Django. Follow the Django documentation. Add a Django tag next time you use stackoverflow.  Don't assume that Django always follows the everyday way of doing things in Python, because it doesn't.  In particular, it uses a "declarative" pattern for  constructing complex classes. It works as per its documentation. There is some pretty deep "magic" behind the scenes that most programmers have absolutely no need to know about.</span>
<span class="comment-copy">noted, I added Django Tag.</span>
<span class="comment-copy">The value Python automatically assigns to the first argument in a method (in this case the argument is named 'self', which is Python convention) does <i>not</i> refer to a class.  It contains a reference to a particular <i>instance</i> of a class.</span>
<span class="comment-copy"><code>self</code> does <b>not</b> refer to the class. <code>self</code> refers to the current instance of the class.</span>
<span class="comment-copy">yes I agree the answer above is wrong.</span>
<span class="comment-copy">which is why it "refers to" and not "is" the class - but het semantics is wonderfully subjective</span>
