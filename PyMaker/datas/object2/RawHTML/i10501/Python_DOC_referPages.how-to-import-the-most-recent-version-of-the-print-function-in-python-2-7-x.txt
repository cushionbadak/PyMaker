<div class="post-text" itemprop="text">
<p>I have discovered that I can't use the <code>flush</code> argument in the new print function if I use Python 2.7.11. I have used:</p>
<pre><code>from __future__ import print_function

print('Hello', flush=True)
</code></pre>
<p>but it complains with the error:</p>
<pre><code>Traceback (most recent call last):
  File "print_future.py", line 3, in &lt;module&gt;
    print('Hello', flush=True)
TypeError: 'flush' is an invalid keyword argument for this function
</code></pre>
<p>After looking at <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">the documentation for <code>print</code></a> I discovered that it doesn't work even though it is an argument. My inference is that it doesn't work because <code>flush</code> was only added in version 3.3, thus the special <code>from __future__ import</code> statement is probably importing an older version of the function. The comments suggest it's using 2.7.11 but I don't understand why it's doing this.</p>
<p>I did see <a href="https://stackoverflow.com/questions/27991443/need-python-3-4-version-of-print-from-future">Need Python 3.4 version of print() from __future__</a>, whose answer just wraps <code>print</code> and manually adds the <code>flush</code> parameter. Even though that works, it seems more of a hack than addressing the real problem, that we don't have the most recent version of print. </p>
<p>Is there a way to import specific versions of Python functions (I want to use the Python 3.5 <code>print</code> function, specifically) to my current Python script? If this is not possible, why not?</p>
<hr/>
<p>It seems (surprisingly) its not clear to people how my question is different even though I wrote it. I will say it differently.</p>
<ol>
<li>It seems that my issue is that its importing the python function that I am not expecting (since it doesn't find the flush argument). Therefore, the most natural and the first thing I'd like to do and know is, which print function is it importing. The comments suggest its using 2.7.11 but I don't understand why its doing this.</li>
<li>I understand that the from future statement changes how my compiler works. It seems I assumed that since it was a future statement it also brought in the print function from a future release. It seems it only changes the behaviour of my interpreter. If I were able to see what print function its using I would know that its not importing a function from a future release but only acting like a future python interpreter. Thats what it seems but I don't know for sure and I'd like to know for sure whats going on.</li>
<li>Last but not least, is there not a natural way to import future python functions to my current python script? I want to use python 3.5 print statement, is it not possible to use that function apart from just making the compiler behave like a future python interpreter but also behave like a future python version? It was (at least to me) counter intuitive to have the parser act like future python but still act like a 2.7.11. The solution I want is not a wrapper but a import of the recent python. If this is not possible, then a answer to my question should explain why its not possible.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><blockquote>
<p>its importing the python function that I am not expecting</p>
</blockquote>
<p>I don't see why, this is the version of <code>print</code> <a href="https://docs.python.org/2/library/functions.html#print" rel="nofollow">that's documented in 2.7.x</a>.</p>
<blockquote>
<p>which print function is it importing. </p>
</blockquote>
<p>The version bundled with 2.7.11, which is the version that was introduced in 3.0 (see <a href="https://www.python.org/dev/peps/pep-3105/" rel="nofollow">PEP-3105</a>).</p>
<blockquote>
<p>The comments suggest its using 2.7.11 but I don't understand why its doing this</p>
</blockquote>
<p>...because that's the version of Python you're using? <code>from __future__ import ...</code> doesn't search your computer for alternative implementations, it uses the one that's bundled with the version of Python you're using. If you think about it this is inevitable, as otherwise future imports would fail on machines that don't have 3.x installed.</p></li>
<li><p>The majority of this made little sense to me, but:</p>
<blockquote>
<p>I assumed that since it was a future statement it also brought in the print function from a future release.</p>
</blockquote>
<p>That's <strong>exactly what it's doing</strong>. You don't get to choose <em>which</em> future release, though. You get the version that was planned for release at the time it was added into <code>__future__</code>.</p></li>
<li><blockquote>
<p>is there not a natural way to import future python functions to my current python script?</p>
</blockquote>
<p>Yes, and it's the way you're using, as long as that functionality is supported in <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow"><code>__future__</code></a>.</p>
<blockquote>
<p>is it not possible to use that function</p>
</blockquote>
<p>not the 3.3-onwards version of it in the version of Python that you're using, no*. If you want the functionality offered by more recent versions of Python, <em>use a more recent version of Python</em>. 2.x is running out of road.</p>
<blockquote>
<p>It was (at least to me) counter intuitive to have the parser act like future python but still act like a 2.7.11</p>
</blockquote>
<p>It's not <em>"[acting] like a 2.7.11"</em>. It's using the print function from 3.x rather than the print statement from 2.x. If you try to <code>print 'hello'</code> after the import of <code>print_function</code>, you'll get a <code>SyntaxError</code> as you would in 3.x.</p>
<p><em>* assuming you're not planning to get into hacking your installation</em></p></li>
</ol>
</div>
<span class="comment-copy">When you <code>from future import print_function</code> you get the 2.7.11 version of the print function. It doesn't read any python3 code; it doesn't get a version from any python 3. You can't import the python3 print builtin into python2. The only correct solution, if you need "flush" is to use wrapper: hence the duplicate.</span>
<span class="comment-copy">You've asked the same question again, the fact that you've linked it doesn't make much difference. If that's the answer, that's the answer; if you don't understand why, consider a comment, and if you need a different one, consider a bounty.</span>
<span class="comment-copy">@jonrsharpe I did not ask the same question. I even wrote what the difference is. First I already said that a solution with a wrapper is not a solution to my question. My question is to essentially import the print statement from python 3.4 or more. I understand that the future statement just changes how my python parses my file at compile time, but is there no way to get it to use the print function I am requesting? I also asked how do I check version of the print function its using, I'd like to know and check that. If the answer is you can't do it with a wrapper even if you use future, I'd..</span>
<span class="comment-copy">@jonrsharpe I am allowed to describe what I count as an answer. In the specs of my answer a wrapper is a hack. It might not be in any other context, but in this question it is not the solution since it doesn't explain to me what I want to know. I have updated my question with more details. Hope it clarifies what I want to ask. Saying "its not possible to do it with your constraints" is a perfectly acceptable answer. I have clarified what I meant by future too. I'm fine being wrong, but I just want to know why I can't do it the way I am requesting.</span>
<span class="comment-copy">Why didn't you just read the docs that <a href="https://docs.python.org/2/library/functions.html#print" rel="nofollow noreferrer">actually correspond to what you're using</a>? They clearly show that there's no <code>flush</code>. <code>from __future__ import</code> doesn't search your whole machine for alternative implementations, and it's not at all clear why you'd ever think it would, it uses the specific version that is bundled with the Python version you're using (otherwise it wouldn't work at all if you didn't also have 3.x installed). If you want 3.5's <code>print</code>, or another new feature, just use 3.5, there are very few reasons to still be on 2.x.</span>
<span class="comment-copy">When an uninformed python user (me or the OP in this case) comes across <code>from future import X</code> the natural thing to assume is that you're importing functionality from a release <i>other</i> than the one you're using - e.g. an actual future release (I wonder what would give us that idea?). I understand now <code>__future__</code> is really a misnomer - perhaps <code>__testing__</code> or <code>__planned__</code> would have been better. It's not a magical keyword, but just another package included with your version. Your answer has the right information, but the snarkiness and condescension doesn't really belong on SO.</span>
<span class="comment-copy">@argentum2f it's not just another package, it changes how the interpreter works</span>
