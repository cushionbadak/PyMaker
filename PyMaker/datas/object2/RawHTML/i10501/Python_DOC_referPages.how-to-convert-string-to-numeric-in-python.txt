<div class="post-text" itemprop="text">
<p>I would like to convert string (%) to float.but my method didnt work well.
the result slightly differ from correct number.
for example,</p>
<pre><code>a=pd.Series(data=["0.1%","0.2%"])

0    0.1%
1    0.2%
dtype: object
</code></pre>
<p>first, I strip "%"</p>
<pre><code>a.str.rstrip("%")

0    0.1
1    0.2
dtype: object
</code></pre>
<p>I tried to convert to numeric, but the result is strange.</p>
<p>I guess this phenomena come from binary digit system...</p>
<pre><code>pd.to_numeric(a.str.rstrip("%"))

0    0.10000000000000000555
1    0.20000000000000001110
dtype: float64
</code></pre>
<p>and of course I couldnt convert % to numeric.</p>
<pre><code>pd.to_numeric(a.str.rstrip("%"))/100

0    0.00100000000000000002
1    0.00200000000000000004
dtype: float64
</code></pre>
<p>I also tried .astype(float) method. but The result was same..</p>
<p>why this phenomena happen ? and how can I avoid this phenomena</p>
</div>
<div class="post-text" itemprop="text">
<p>Many rational numbers can't be represented exactly as a floating-point number. In particular, any number that has to have a five as a factor in the denominator, like 1/(2*5), can't be represented exactly. There isn't much you can do about this: either round the displayed number so it looks right, or use an infinite-precision library or a rational-numbers library. Here's a basic way to round the displayed number:</p>
<p><code>&gt;&gt;&gt; print "%.20f" % 0.1</code><br/>
<code>0.10000000000000000555</code><br/>
<code>&gt;&gt;&gt; print "%.4f" % 0.1</code><br/>
<code>0.1000</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>As a folow-up to the suggestion by @D-Von, the following python packages can be useful to you: <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow">decimal</a> and <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow">fractions</a></p>
<p>Then you can do some things like:</p>
<pre><code>from fractions import Fraction
from decimal import Decimal
f = Fraction(1, 10)
d = Decimal('0.1')
f = f/100
d = d/100
str(d)
</code></pre>
<p>And all the time you are not working with floats but with rational numbers. See the documentation for more examples.</p>
</div>
<span class="comment-copy">Are you just wanting it to display nicely? Take a look at <code>pd.options.display.float_format</code>. The above is expected behaviour for floats  (see <a href="http://stackoverflow.com/questions/2100490/floating-point-inaccuracy-examples" title="floating point inaccuracy examples">stackoverflow.com/questions/2100490/â€¦</a>)</span>
<span class="comment-copy">thank you for reply I would like to handle huge size number, like budget calculation. I met some trouble about this kind of calcuclation... So I want to calculate precisely.  by using this option, Can I avoid this trouble?</span>
<span class="comment-copy">thank you. I would like to calculate billion like number, for example         1billion * 0.1%. can I get correct result ?</span>
<span class="comment-copy">Not necessarily. In this case, you do, because the result (one million) is an integer that is well within the range of representable integers. In other cases, you will get a result that is very, very close to the right answer but not exactly right. If you really need exact results, you should read up on topics like numerical analysis, the IEEE 754 floating-point standard, and the Python decimal library (which gives exact results at a cost in memory and time and code complexity). But chances are, you can afford to be off by a penny here and there, then round the result at display time.</span>
