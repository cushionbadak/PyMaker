<div class="post-text" itemprop="text">
<p>I noticed that I cannot use flush with the new python function after I import it using <code>from __future__ import print_function</code>. In my journey to discover why I discovered I can't even inspect what arguments/parameters it takes. Why is it?</p>
<ol>
<li>First I made sure that the inspect function worked.</li>
<li>Then I made sure that the print function was indeed a function.</li>
<li>After those two (seemed to pass/check) I tried to inspect it but this failed and returned a weird error.</li>
</ol>
<p>here is what I did:</p>
<pre><code>from __future__ import print_function

import inspect

def f(a, b=1):
    pass

#print( print_function )
print( inspect.getargspec( f ) )
g = print
print('what is print: ', print)
print('what is g=print: ', g)
print( inspect.getargspec( g ) )
#print( inspect.getargspec( print ) )

#print('Hello', flush=True)
</code></pre>
<p>and everything passed except inspecting print:</p>
<pre><code>ArgSpec(args=['a', 'b'], varargs=None, keywords=None, defaults=(1,))
what is print?  &lt;built-in function print&gt;
what is g=print?  &lt;built-in function print&gt;
Traceback (most recent call last):
  File "print_future.py", line 16, in &lt;module&gt;
    print( inspect.getargspec( g ) )
  File "/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py", line 816, in getargspec
    raise TypeError('{!r} is not a Python function'.format(func))
TypeError: &lt;built-in function print&gt; is not a Python function
</code></pre>
<p>Why is that happening?</p>
<hr/>
<p>This is some info of my python and system:</p>
<pre><code>Python 2.7.11 (default, Jun 24 2016, 21:50:11)
[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Extracted from <a href="https://funcsigs.readthedocs.io/en/0.3/#signature" rel="nofollow">signature</a>:</p>
<blockquote>
<p>Note</p>
<p>Some callables may not be introspectable in certain implementations of
  Python. For example, in CPython, built-in functions defined in C
  provide no metadata about their arguments.</p>
</blockquote>
<p>I've posted the signature docs because <a href="https://docs.python.org/3/library/inspect.html#inspect.getargspec" rel="nofollow">inspect.getargspec</a> is deprecated since 3.0</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>flush</code> keyword was added to print() in 3.3.</p>
<p>C functions do not normally carry with them the information needed for introspection.  That is simply a fact of how C is defined and compiled.  As a substitute, signatures were added to their docstrings.  IDLE calltips fall back to the docstring if inspect does not work.</p>
<p>In 3.4, a new mechanism was added to include a signature attribute with C-coded function.  The new inspect.signature uses it when present.  Some C-coded functions have been to converted to include the new attribute, many have not.</p>
</div>
<span class="comment-copy">seems I found something useful: <a href="http://bugs.python.org/issue6905" rel="nofollow noreferrer">bugs.python.org/issue6905</a></span>
<span class="comment-copy">I read it but I don't understand why C functions are free to treat things as *args and *kwargs:  <code>This is not an issue, but a fundamental restriction of what getargspec() can do.  C function signatures are not introspectable, because basically every C function can be thought of as defined as either    def func(*args)  or     def func(*args, **kwargs)  and is free to do what it wants with the args and kwargs.</code></span>
<span class="comment-copy">As the docs say, <code>inspect</code> only works on pure Python code, whereas a lot of the builtins are implemented in C. Also asking an unclear follow-up question as a comment probably isn't a great idea.</span>
<span class="comment-copy">why doesn't it provide docs/info for C stuff? I don't understand the <i>why</i></span>
<span class="comment-copy">@CharlieParker because it uses Python introspection, which doesn't work on C, because C isn't Python.</span>
