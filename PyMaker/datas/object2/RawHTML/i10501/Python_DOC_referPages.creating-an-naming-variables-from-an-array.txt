<div class="post-text" itemprop="text">
<p>I have several arrays:</p>
<pre><code>foo_1 = [URL, 2, 30]
foo_2 = [URL, 4, 1230]
foo_3 = [URL, 11, 980]
foo_4 = [URL, 6, 316]
</code></pre>
<p>... I want to create a function that creates variables and renames them like so:</p>
<pre><code>foo_1Count = foo_1[2]
foo_2Count = foo_2[2]
foo_3Count = foo_3[2]
foo_4Count = foo_4[2]
</code></pre>
<p>I am dealing with a very large set of arrays so creating the variables as such one by one isn't easy.  I don't want to use a dictionary if I can help it.  Is there a way to use .format() to create a variable name or something simple that I am missing?  Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're asking how to rename (understanding this action like create a new variable and deleting the existing old one) you could manipulate <a href="https://docs.python.org/2/library/functions.html#globals" rel="nofollow">globals</a> like this:</p>
<pre><code>if __name__ == "__main__":
    URL = 'www.abc.com'

    foo_1 = [URL, 2, 30]
    foo_2 = [URL, 4, 1230]
    foo_3 = [URL, 11, 980]
    foo_4 = [URL, 6, 316]

    for i in range(4):
        old_name = 'foo_{}'.format(i + 1)
        new_name = 'foo_{}Count'.format(i + 1)
        globals()[new_name] = globals()[old_name][2]
        del globals()[old_name]

    print globals()
</code></pre>
<p>Now, I strongly recommend you not doing this! Don't mess with globals manually... Instead, if your variables have a similar structure, <strong>usually</strong> there isn't any good reason to declare them individually, you could pack them like this:</p>
<pre><code>URL = 'www.abc.com'

foos = [
    [URL, 2, 30],
    [URL, 4, 1230],
    [URL, 11, 980],
    [URL, 6, 316]
]

foo_counts = [foo[2] for foo in foos]
print foo_counts
</code></pre>
<p>That way, you can iterate over your data nicely without having any cheap trick like messing around with globals.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>URL = 'www.abc.com'

foo_1 = [URL, 2, 30]
foo_2 = [URL, 4, 1230]
foo_3 = [URL, 11, 980]
foo_4 = [URL, 6, 316]

for i in range(4):
        globals()['foo_{}Count'.format(i+1)] = globals()['foo_{}'.format(i+1)][2]

print foo_4Count    # 316
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dynamically creating variables is usually not a good idea. Instead, you can just get the attribute from the aggregating list object directly. It's even shorter than <code>foo_1Count</code>:</p>
<pre><code>&gt;&gt;&gt; foo_1 = ["URL", 2, 30]
&gt;&gt;&gt; foo_1[2]
30
</code></pre>
<p>But you might not want to memorize which index was the count. Alternatively, create a function:</p>
<pre><code>&gt;&gt;&gt; def count(foo):
...     return foo[2]
... 
&gt;&gt;&gt; count(foo_1)
30
</code></pre>
<p>Or make your <code>foo</code> objects dictionaries:</p>
<pre><code>&gt;&gt;&gt; foo_1 = {"url": "URL", "whatever": 2, "count": 30}
&gt;&gt;&gt; foo_1["count"]
30
</code></pre>
<p>Or use <code>collections.namedtuple</code> to make it a bit cleaner:</p>
<pre><code>&gt;&gt;&gt; Foo = collections.namedtuple("Foo", ["url", "whatever", "count"])
&gt;&gt;&gt; foo_1 = Foo("URL", 2, 30)
&gt;&gt;&gt; foo_1.count
30
</code></pre>
</div>
<span class="comment-copy">Why do you need separate variables? What's preventing you from storing counts in a flattened array (containing only the count fields)?</span>
<span class="comment-copy">There are <b>many</b> Q&amp;A's here on SO regarding dynamic variable name creation in Python and the consensus seems to be that there is no <i>good or proper</i> way to do it, and just use a dictionary.  If you search SO you might find a clever solution using classes or metaclasses or some kind of class factory.  <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter()</code></a> might be useful, I like to use it.</span>
<span class="comment-copy">When question is "I want arbitrary named variables" answer is "use a dict". When question is "I want variables named x1, x2, x3..." answer is "use a list". Easy, plain and simple, don't force a person who reads a code / static analyzer / IDE to guess which variables you're creating, there's absolute no profit in that.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/1373164/2823755">stackoverflow.com/q/1373164/2823755</a></span>
<span class="comment-copy">Awesome I appreciated all answers, but this is what I was looking for messing with my sets!  Thanks a ton!</span>
<span class="comment-copy">I spoke too soon, I am getting a KeyError: '0'</span>
<span class="comment-copy">@jttrail0 Can you add your new code into your question? Because according to your current one, if <code>KeyError</code> happens, it should be <code>KeyError: 'foo_something'</code> not just <code>'0'</code>. Also please check all your indexes and beware that your <code>foo_%d</code> starts from <code>1</code>, not <code>0</code> while <code>range(n)</code> starts from <code>0</code> and end at <code>n-1</code></span>
