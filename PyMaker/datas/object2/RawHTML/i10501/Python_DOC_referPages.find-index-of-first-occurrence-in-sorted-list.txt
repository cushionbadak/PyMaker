<div class="post-text" itemprop="text">
<p>I have a sorted list that looks like this:</p>
<pre><code>sortedlist = ['0','0','0','1','1,'1,'2',2','3']
</code></pre>
<p>I also have a count variable:</p>
<pre><code>count = '1'
</code></pre>
<p>*note: sometimes count can be an integar greater that the max value in the list. For example <code>count = '4'</code></p>
<p>What I want to do is to find the first occurrence of the count in the list and print the index. If the value is greater than the max value in the list, then assign a string. Here is what I have tried:</p>
<pre><code>maxvalue = max(sortedlist)
for i in sortedlist:
    if int(count) &lt; int(sortedlist[int(i)]):
        indexval = i
        break
        OutputFile.write(''+str(indexval)+'\n')
if int(count) &gt; int(maxvalue):
    indexval = "over"
    OutputFile.write(''+str(indexval)+'\n')
</code></pre>
<p>I thought the break would end the for loop, but I'm only getting results from the last if statement. Am I doing something incorrectly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your logic is wrong, you have a so called <em>sorted list</em> of strings which unless you compared as integer would not be sorted correctly, you should use <em>integers</em> from the get-go and <a href="https://docs.python.org/2/library/bisect.html#bisect.bisect_left" rel="nofollow">bisect_left</a> to find index:</p>
<pre><code>from bisect import bisect_left

sortedlist = sorted(map(int, ['0', '0', '0', '1', '1', '1', '2', '2', '3']))

count = 0

def get_val(lst, cn):
    if lst[-1] &lt; cn:
        return "whatever"
    return bisect_left(lst, cn, hi=len(lst) - 1)
</code></pre>
<p>If the value falls between two as per your requirement, you will get the first index of the higher value, if you get an exact match you will get that index:</p>
<pre><code>In [13]: lst = [0,0,2,2]

In [14]: get_val(lst, 1)
Out[14]: 2

In [15]: lst = [0,0,1,1,2,2,2,3]

In [16]: get_val(lst, 2)
Out[16]: 4

In [17]: get_val(lst, 9)
Out[17]: 'whatever'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As there are some over-complicated solutions here it's worth posting how straightforwardly this can be done:</p>
<pre><code>def get_index(a, L):
    for i, b in enumerate(L):
        if b &gt;= a:
            return i
    return "over"

get_index('1', ['0','0','2','2','3'])
&gt;&gt;&gt; 2
get_index('1', ['0','0','0','1','2','3'])
&gt;&gt;&gt; 3
get_index('4', ['0','0','0','1','2','3'])
&gt;&gt;&gt; 'over'
</code></pre>
<p>But, use <code>bisect</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a function (using <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP</a> principle) to find the first occurrence that is equal to or greater than the count:</p>
<pre><code>In [239]: l = ['0','0','0','1','1','1','2','2','3']

In [240]: def get_index(count, sorted_list):
     ...:     try:
     ...:         return next(x[0] for x in enumerate(l) if int(x[1]) &gt;= int(count))
     ...:     except StopIteration:
     ...:         return "over"
     ...:     

In [241]: get_index('3', l)
Out[241]: 8

In [242]: get_index('7', l)
Out[242]: 'over'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As your list is already sorted, so the maximum value will be the last element of your list i.e <code>maxval = sortedlist[-1]</code> . secondly there is an error in your for loop. <code>for i in sortedlist:</code> This gives you each element in the list . To get index do a for loop on range <code>len(sortedlist)</code> Here i is the element in the list. You should break after writing to the file. Below is the fixed code:</p>
<pre><code>maxvalue = sortedlist[-1]
if int(count) &gt; int(maxvalue):
    indexval = "over"
    OutputFile.write(''+str(indexval)+'\n')
else:
    for i in xrange(len(sortedlist)):
        if int(count) &lt;= int(sortedlist[int(i)]):
            indexval = i
            OutputFile.write(''+str(indexval)+'\n')
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all:</p>
<pre><code>for i in range(1, 100):
  if i &gt;= 3:
    break
    destroyTheInterwebz()
  print i
</code></pre>
<p>Will <em>never</em> execute that last function. It will onmy peint <code>1</code> and <code>2</code>. Because <code>break</code> <em>immediately</em> leaves the loop; it does <em>not</em> wait for the current iteration to finish.</p>
<p>In my opinion, the code would be nicer if you used a function <code>indexOf</code> and <code>return</code> instead of <code>break</code>.</p>
<p>Last but not least: the data structures here are pretty expensive. You may want to use integers instead of strings, and numpy arrays. You could then use the very fast <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html" rel="nofollow"><code>numpy.searchsorted</code></a> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>itertools.dropwhile()</code>:</p>
<pre class="lang-py prettyprint-override"><code>from itertools import dropwhile

sortedlist = [0, 0, 0, 1, 1, 1, 2, 2, 3]

def getindex(count):
    index = len(sortedlist) - len(list(dropwhile(lambda x: x &lt; count, sortedlist)))
    return "some_string" if index &gt;= len(sortedlist) else index
</code></pre>
<p>The test:</p>
<pre><code>print(getindex(5))
&gt; some_string
</code></pre>
<p>and:</p>
<pre><code>print(getindex(3))
&gt; 8
</code></pre>
<h3>Explanation</h3>
<p><code>dropwhile()</code> drops the list until the first occurrence, when <code>item &lt; count</code> returns <code>False</code>. By subrtracting the (number of) items <em>after</em> that from the length of the original list, we have the index.</p>
<p><em>"<a href="https://docs.python.org/3.1/library/itertools.html#itertools.dropwhile" rel="nofollow">an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element</a>."</em> </p>
</div>
<span class="comment-copy">Is there any reason you are not using <code>list.index</code>? If you want to take advantage of the fact that the list is sorted you can use binary search.</span>
<span class="comment-copy">Sometimes the <code>count</code> might not be in the list, but could still be less than a value. For example, if my list was this: <code>['0','0','2','2','3']</code> I should have made this clearer in my question</span>
<span class="comment-copy">Also <code>max(sortedlist)</code> is the same as <code>sortedlist[-1]</code>.</span>
<span class="comment-copy">I guess I'm not looking for the first occurrence. Instead I'm looking for the first occurrence that is equal to or greater than the <code>count</code></span>
<span class="comment-copy">The line after the <code>break</code> command will not get run - I think that is the main reason your programme does not have the expected effect. (Also the index problem noted by nishant shreshth)</span>
<span class="comment-copy">This also makes sense. I had never used bisect before and was a bit confused. This makes it clearer. Thank you</span>
<span class="comment-copy">No worries, bisect/bisect_right would give you where in the list the number would land after so where  bisect_left gives you 4 for [0,0,1,1,2,2,2,3] bisect and bisect_right would give you 7</span>
<span class="comment-copy">@christylynn002 And also please note that <code>bisect_left</code> and <code>bisect_right</code> will return the same thing if the value does not exist in the sorted list. Not a part of the question, but good to know if it leads to confusion in the future.</span>
<span class="comment-copy">Nice of course.</span>
<span class="comment-copy">But slow, because of <code>enumerate</code>.</span>
<span class="comment-copy">@Anony-Mousse slow compared to what? Unlikely to be a key consideration here.</span>
<span class="comment-copy">@Stuart It is nicely simple, but also (indeed) slow. timed with <code>time()</code>, other solutions, like using <code>dropwhile()</code> or the accepted answer, take 1/10 of the time to finish. I could give you the exact numbers if you are interested.</span>
<span class="comment-copy">Thank you for the error note</span>
<span class="comment-copy">Could I still use in the <code>&lt;</code> because sometimes my count is not in the list but there is still a value that is greater than my count. For example, if my <code>1</code> wasn't in my list, but <code>2</code> was.</span>
<span class="comment-copy">You are welcome, please find the fixed code.</span>
<span class="comment-copy">Ok, so what you want to output if the count value is not in the list ?</span>
<span class="comment-copy">if my list was <code>['0','0','2','2','3']</code> and <code>count = 1</code>, I'd want the index of the first 2 (index = 2)</span>
