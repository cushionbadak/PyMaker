<div class="post-text" itemprop="text">
<p><strong>Case 1:</strong></p>
<pre><code>class A(object):
    def __init__(self):
        print "A"
class B(A):
   pass
c = b()
#output:
#A
</code></pre>
<p><strong>Case 2:</strong></p>
<pre><code>class A(object):
    def __init__(self):
        print "A"
class B(A):
   def __init__(self):
       print "B"
c = b()
#output:
#B
</code></pre>
<p>In case1 it runs the constructor of <code>class A</code> and in case2 it runs the constructor of <code>class B</code>.</p>
<p>So if case1 prints A is understood that it is running the <code>class A</code> constructor because <code>class B</code> has inherited it.</p>
<p>Then in case2 it only runs the <code>class B</code> constructor but not <code>class A</code> constructor why is that.</p>
<p>Now what is happening over here. Is python overriding the <code>class A</code> constructor ? Or what is happening 
"I am new to programming."</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation, when a class is constructed the base class is always remembered. Thus, it will resolve all the dependencies if some attribute is not found, the process works in all base classes. In your case, the class B does not have a init method, so it calls its parent method. In the second example, if want to run the constructor of the base class, you can use the super() function. </p>
</div>
<span class="comment-copy">The <i>initializer</i> is being overwritten. The parent <i>initializer</i> can be accessed using <code>super</code>.</span>
<span class="comment-copy">If you put an <code>__init__</code> in <code>B</code>, it will override the one in <code>A</code>. If you don't, it won't. Pythons <code>__init__</code> methods do not automatically call the superclasses' <code>__init__</code> methods. And I don't know why you put "overload" in your title.</span>
<span class="comment-copy"><i>"As per the OOPs concept constructors cannot be inherited."</i> – says who?</span>
<span class="comment-copy"><i>"It should run both constructors in case2"</i> – says who?</span>
<span class="comment-copy">Have you read through <a href="https://docs.python.org/3/tutorial/classes.html?highlight=inheritance#classes" rel="nofollow noreferrer">9, Classes</a> in the tutorial? It is worth the read - several times for me.</span>
