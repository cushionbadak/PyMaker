<div class="post-text" itemprop="text">
<p>Basically I'm trying to take the print output for my code and make it into a variable.  I tried to do this by converting it to a string but it gave me an error saying "TypeError: str() takes at most 3 arguments (6 given)"</p>
<p>my code:</p>
<pre><code>x = [1,2,3,4,5]
print(*x, sep='_')  ##gives me the output "1_2_3_4_5"

#problem part:
a = str(*x, sep='_')
print(a)             ##gives error
</code></pre>
<p>Is there either a way to convert the output to a string despite the "6 argument" thing or some other "str()"-like thing that would work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the list of ints to a list of strings using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a>, then use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>join</code></a> to bind them together:</p>
<pre><code>x = [1, 2, 3, 4, 5]
a = '_'.join(map(str, x))
print(a)  # '1_2_3_4_5'
</code></pre>
<p>Note: Your code did not work because <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code></a> does some work for you:</p>
<blockquote>
<p>All non-keyword arguments are converted to strings like str() does and written to the stream.</p>
</blockquote>
<p>So, print did the string conversion step for you. When you call <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow"><code>str()</code></a>, it expects only an object to convert to a string, with two optional keyword arguments (<code>encoding</code> and <code>errors</code>). By calling <code>str(*x, sep='_')</code>, you are passing in 5 arguments plus a separator, which is not a valid call.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>*x</code> supplies much too many arguments to <code>str()</code> causing the error, and <code>sep</code> isn't an argument of <code>str()</code>. <code>str()</code> expects one object to be converted, and <code>*x</code> gives 5. Try this:</p>
<pre><code>x = [1, 2, 3, 4, 5]
a = '_'.join(str(i) for i in x)
print(a) 
</code></pre>
<p>This will go through the list and join each element together with an underscore between.</p>
<p><a href="https://ideone.com/dLHFqx" rel="nofollow">Try it on IDEOne</a></p>
<hr/>
<p>You can also use <code>map(function, sequence)</code> to shorten the <code>join()</code>. The function being applied is <code>str()</code> to convert the numbers into string form, and to the <code>x</code> list. Here's with <code>map()</code>:</p>
<pre><code>x = [1, 2, 3, 4, 5]
a = '_'.join(map(str, x))
print(a)
</code></pre>
</div>
<span class="comment-copy">'_'.join(str(x) for x in [1, 2, 3, 4, 5])</span>
<span class="comment-copy">is there a difference between '<i>'.join(str(i) for i in x) and '</i>'.join(map(str, x)) (the other suggestion) as far as when you can/should use it?</span>
<span class="comment-copy">@zeurosis There's no difference. Map takes in a function to execute (<code>str()</code> in this case) and then applies it to all elements of a sequence, <code>x</code> in this case. It's just shorthand for what I do - same thing is done behind the scenes.</span>
