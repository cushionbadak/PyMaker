<div class="post-text" itemprop="text">
<p>I would like to use <code>functools.partialmethod</code> on a classmethod. However the behavior I find is not what I would expect (and like to have).
Here is an example:</p>
<pre><code>class A(object):
    @classmethod
    def h(cls, x, y):
        print(cls, x, y)

class B(A):
    h = functools.partialmethod(A.h, "fixed")
</code></pre>
<p>When I do</p>
<pre><code>&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.h(3)
</code></pre>
<p>I get an error:</p>
<pre><code>...
TypeError: h() takes 3 positional arguments but 4 were given
</code></pre>
<p>This is consistent with</p>
<pre><code>&gt;&gt;&gt; b.h()
&lt;class '__main__.A'&gt; &lt;__main__.B object at 0x1034739e8&gt; fixed
</code></pre>
<p>However, I would expect (and like to have) the following behavior:</p>
<pre><code>&gt;&gt;&gt; b.h(4)
&lt;class '__main__.B'&gt; fixed 4
</code></pre>
<p>I think that <code>functools.partialmethod</code> treats <code>B.h</code> as a normal instance method and passes the actual instance as first argument automatically.
But this behavior renders <code>functools.partialmethod</code> useless for freezing arguments in classmethods of inheriting classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without going into too much detail, the <code>partial</code> object doesn't mix well with the descriptor protocol that <code>@classmethod</code> utilizes to create a class instance. The simple fix is to just define your overridden method in the usual fashion:</p>
<pre><code>class B(A):
    @classmethod
    def h(cls, y):
        return A.h("fixed", y)
</code></pre>
<hr/>
<p>It <em>might</em> be possible to do what you want with some invocation of <code>partial</code>, but I was unable to find it. Here are some of my attempts, and why they failed.</p>
<p><code>A.h</code> invokes the <code>__get__</code> method of the function object, returning a function where the first argument is already bound to the calling class. <code>partial</code> then applies that function to <code>"fixed"</code>, but then the resulting callable <em>still</em> has a <code>__get__</code> method that tries to insert the calling class into the resulting call. You might try to work around that by defining <code>h</code> to actually be a <em>static</em> method:</p>
<pre><code>class B(A):
    h = staticmethod(partial(A.h, "fixed"))

&gt;&gt;&gt; B.h(4)
&lt;class '__main__.A'&gt; fixed 4
</code></pre>
<p>But as you can see, you already froze the class argument when you call <code>partial</code>. Another attempt is to avoid the descriptor protocol by accessing the argument directly:</p>
<pre><code>class B(A):
    h = staticmethod(partial(A.__dict__["h"], "fixed"))
</code></pre>
<p>but <code>classmethod</code> objects aren't actually callable; only the return value of their <code>__get__</code> methods is, so the call to <code>partial</code> fails.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow"><code>super</code></a> (v2.7)</p>
<pre><code>class A(object):
    @classmethod
    def c(cls, x, y):
        print('cls:{}, x:{}, y:{}'.format(cls, x, y))

class B(A):
    def c(self, y):
        super(B, self).c(x = 'fixed', y = y) 

class C(A):
    def c(self, x):
        super(C, self).c(x = x, y = 'fixed') 

b = B()
c = C()

&gt;&gt;&gt; 
&gt;&gt;&gt; b.c(4)
cls:&lt;class '__main__.B'&gt;, x:fixed, y:4
&gt;&gt;&gt; c.c(4)
cls:&lt;class '__main__.C'&gt;, x:4, y:fixed
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow">super is super</a></p>
</div>
<span class="comment-copy"><code>b.h()</code> or <code>b.c()</code>?</span>
<span class="comment-copy">You want to override a class method in a parent class by <i>fixing</i> one of its arguments?</span>
<span class="comment-copy">Will all of the parameters be positional or keyword or a mix?</span>
<span class="comment-copy">They'll be a mix.</span>
<span class="comment-copy">Explicitly calling <code>A.c</code> in the <code>B</code> overload is bad form, since you'll lose information about the "true" class (and classmethods are typically alternate constructors, so losing that information is a problem). Change it to <code>return super().c("fixed", y)</code> so it passes up the correct class (and handles multiple inheritance properly too).</span>
<span class="comment-copy"><code>super</code> implies that you are <i>always</i> going to use <code>super</code> in a parent class and you will always use <code>super</code> in any child classes. It's not just as simple as "hey, I don't have to hard-code my parent class's name". You can't just say one is right, the other is wrong; both have their uses, benefits, and drawbacks.</span>
<span class="comment-copy">It really is that simple in 99% of cases (the other 1% are typically misuses of <code>classmethod</code>). <code>A.c</code> passes <code>A</code> as the <code>cls</code>, <code>super().c</code> passes <code>B</code> as the <code>cls</code>. If you use the former, then the <code>@classmethod</code> decoration serves no purpose beyond allowing you to say <code>cls</code> instead of <code>A</code> in the method; otherwise, it's just <code>@staticmethod</code>, because you've thrown away the one piece of unique information that <code>@classmethod</code> provides. You're no longer using any useful feature of <code>B</code> that a plain function calling <code>A</code> wouldn't provide equally well.</span>
<span class="comment-copy">None of which is really relevant to the question at hand, which is about combining <code>partial</code> and <code>classmethod</code>.</span>
<span class="comment-copy">Then why illustrate incorrect usage? I'm just saying you shouldn't simplify answers so much that they introduce new mistakes, when doing it correctly costs nothing.</span>
<span class="comment-copy">FYI, Python 3 (which this question is tagged) doesn't require explicit arguments for <code>super</code> in most cases. It's a lot easier (and <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">non-DRY violating</a>) to just call <code>super().c</code>.</span>
<span class="comment-copy">I really want to avoid explicitly overriding. In my case there are much more arguments in the place of y and typing them all is very error prone and too much work. I could use <code>h(x,*args)</code> syntax, but then this info is missing in the docs.</span>
<span class="comment-copy">@ShadowRanger ... I only have 2.7 here at work so I couldn't test/play in 3.x, thats why I spec'd the version.</span>
