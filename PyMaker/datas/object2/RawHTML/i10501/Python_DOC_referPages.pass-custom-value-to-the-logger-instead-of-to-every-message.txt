<div class="post-text" itemprop="text">
<p>I want to log the user session. Currently the code is as follows (setting formatter and handlers is omitted):</p>
<pre><code>logger = logging.getLogger("component")
logger.info("message", extra={"session": 123})
logger.debug("debug", extra={"session": 123})
</code></pre>
<p>If there are several messages to be logged, it's annoying to send this extra information each time. What would be the best/cleanest/most pythonic way to achieve something like that:</p>
<pre><code>logger = logging.getLogger("component")
# for example:
logger.addExtra({"session": 123})
logger.info("message") # extra would be added automatically
logger.debug("debug") # extra would be added automatically
</code></pre>
<p>I could think of extending the logger and overriding logging methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a <code>LoggerAdapter</code> as @DhruvPathak specified. According to <a href="https://docs.python.org/3/library/logging.html#logging.LoggerAdapter" rel="nofollow"><code>LoggerAdapter</code>s signature</a>:</p>
<pre><code>class logging.LoggerAdapter(logger, extra)
</code></pre>
<p>you do that by providing your logger instance and the <code>extra</code> args during initialization:</p>
<pre><code>logger = logging.LoggerAdapter(logger, extra)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use function factories for instance like that</p>
<pre><code>def get_logger_with_context(name, context=None):
    extra = context or {}
    logger = logging.getLogger(name)

    def log(level, message, **kwargs):
        getattr(logger, level)(message, extra=context)

    return log
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Such <a href="https://docs.python.org/2/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output" rel="nofollow">custom logging</a> is feasible in python logging class, using logging.loggerAdapters which modify the logging behaviour.</p>
<blockquote>
<p>An easy way in which you can pass contextual information to be output
  along with logging event information is to use the LoggerAdapter
  class. This class is designed to look like a Logger, so that you can
  call debug(), info(), warning(), error(), exception(), critical() and
  log(). These methods have the same signatures as their counterparts in
  Logger, so you can use the two types of instances interchangeably.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output" rel="nofollow noreferrer">Python logging doc</a>: Beside the LogAdapter, you can use also the LogFilter.</p>
<p>I usually use <a href="https://logback.qos.ch/manual/mdc.html" rel="nofollow noreferrer">MDC</a> since in influences all loggers. Unfortunately, the Python logging does not have MDC. I have just found the <a href="https://gist.github.com/mdaniel/8347533" rel="nofollow noreferrer">mdaniel's MDC gist</a>.</p>
</div>
<span class="comment-copy">This seems simple and cool. Thanks for the concrete code example.</span>
