<div class="post-text" itemprop="text">
<p>Please consider this snippet:</p>
<pre><code>&gt;&gt;&gt; i = ["", 1, 2]
&gt;&gt;&gt; all([x for x in i])
False
</code></pre>
<p>What would be Pythonic way to make this snippet return <code>True</code> even if item in iterable is empty string?</p>
<p>Standard restrictions should apply - if item is <code>None</code> or <code>False</code> etc, it should return False as expected.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>all([x for x in i if not isinstance(x, str)])
</code></pre>
<p>The only falsy string is the empty string, so if you don't want to test for it, then filter out the strings.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; lst = ["", 1, 2]
&gt;&gt;&gt; 
&gt;&gt;&gt; all(True if i=='' else i for i in lst)
True
</code></pre>
<p>If you want True if there is at least one item that evaluates to True use <code>any()</code>.</p>
<pre><code>&gt;&gt;&gt; any(lst)
True
</code></pre>
<p>Note that in general <code>any()</code> and <code>all()</code> accept iterable argument and you don't need to loop over them.</p>
</div>
<div class="post-text" itemprop="text">
<p>This option looks nice to me.</p>
<pre><code>all(x or x=="" for x in i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow">all</a>, for instance:</p>
<pre><code>tests = [
    [None, False, "", 1, 2],
    ["", 1, 2],
    [1, 2],
    []
]

for i in tests:
    print i
    print all(filter(lambda x: x != '', i))
    print all(True if x == '' else x for x in i)
    print '-' * 80
</code></pre>
</div>
<span class="comment-copy">Do you mean you want the snippet to return <code>True</code> unless at least one item is falsey, but count an empty string as truthy? I.e. follow Python's rules on what is counted <code>True</code> and <code>False</code> except for an empty string?</span>
<span class="comment-copy">Yes, that's correct</span>
<span class="comment-copy">A nitpick: <code>[]</code> are redundant.</span>
<span class="comment-copy">all(x for x in filter(None, i)) -slightly cleaner if you only have to worry about empty strings</span>
<span class="comment-copy">@reticentroot No, the <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">default filter (None)</a> removes all falsy, which would get rid of <code>False</code> and <code>None</code> as well.</span>
<span class="comment-copy">Oh your right, totally forget about that. So if the OP needs to filter those items out that's still cleaner than an isinstance, though an isinstance is more flexible. :-) thanks for the reminder.</span>
<span class="comment-copy">@bereal I can't find my handy link comparing the behavior, but it basically depends. Generators consume less memory but must be remade each time they are used. List comprehensions generate all the values but are more efficient for reuse. It's not redundant; it's <i>different</i>. Which is better depends on context.</span>
<span class="comment-copy">As both your and @two-bit-alchemist's answers are correct, I'll accept his answer because he has much less score points compared to you. I hope you don't mind. Thanks</span>
<span class="comment-copy">@vlad First off, The answers are different secondly you always should consider to accepting the correct answer, I don't think this imaginary points gotta do something for us :-D</span>
<span class="comment-copy">Ok, thanks for your reply. Can you point to single scenario where your snippet will give different result then @two-bit-alchemist's? Or what makes your snippet different? As a side note: my points are not imaginary, but driven from common human ethics, something lot of people unfortunately lack.</span>
<span class="comment-copy">@vlad It's correct in this case but actually it denies all the strings. For example if you want to get False for a string like <code>"''"</code> or another ones you can't use that answer.  In that case you can use <code>all(True if i not it {set of special strings} else i for i in lst)</code></span>
<span class="comment-copy">Your first solution fails the requirement of catching other falsy values like <code>None</code> or <code>False</code> because it filters them out. Your third solution fails because it bails after it finds one truthy value, which is not what is wanted.</span>
<span class="comment-copy">@Two-BitAlchemist Lol, you're right, thx! :')</span>
