<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35315824/in-python-3-5-how-can-i-specify-a-function-as-a-type-hint">In Python 3.5, how can I specify a function as a type hint?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I want my function to be annotated that it takes another function as an argument. At first I thought that this is going to work just fine:</p>
<pre><code>def my_function(func_argument: function):
    pass
</code></pre>
<p>however function is unresolved reference. I looked through builtins and it is indeed not there, unlike str, int and others I typically use. However, it has to be somewhere, because:</p>
<pre><code>&gt;&gt;&gt; def my_function():
...     pass
... 
&gt;&gt;&gt; x = my_function
&gt;&gt;&gt; type(x)
&lt;class 'function'&gt;
&gt;&gt;&gt; type(x).__name__
'function'
</code></pre>
<p>Where is the function class defined, why isn't it in builtins? Is my original try supposed to be the correct solution? For now I went with annotating it with <code>types.FunctionType</code>, but it doesn't feel right because everywhere else we hint <code>str</code> not <code>types.StringType</code>. And importing types just for one annotation is also weird. <code>typing</code> library also doesn't have anything it that would help me replace this.</p>
<p>Also, how would FunctionType work with a type annotation enforcing library (I saw few of those flying around)</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow"><code>Callable</code></a>:</p>
<blockquote>
<p>Frameworks expecting <em>callback functions</em> of specific signatures might
  be type hinted using <code>Callable[[Arg1Type, Arg2Type], ReturnType]</code></p>
</blockquote>
<hr/>
<pre><code>from typing import Callable

def my_function(func_argument: Callable[..., ReturnType]): # replace ReturnType with return type of func_argument
    pass
</code></pre>
</div>
<span class="comment-copy">I overlooked Callable in typing, but it actually makes a lot of sense to use as it works for both lambda and function.  I kinda dislike that it has to have a return type, as not all functions return something - should they then have None as a second argument? Also it's not too clear to someone inexperienced with typing library, but I guess it's more of a typing issue than SO question, thanks :)</span>
<span class="comment-copy">@iScrE4m <code>None</code> can be used for functions that <i>do not return anything</i>, they actually return <code>None</code>.</span>
<span class="comment-copy">Ah okay, thanks a lot!</span>
