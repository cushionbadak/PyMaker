<div class="post-text" itemprop="text">
<p>When I use <code>generate_password_hash()</code> function, I get a encrypted password string which contains a random salt.</p>
<pre><code>&gt;&gt;&gt; from werkzeug.security import generate_password_hash, check_password_hash
&gt;&gt;&gt; generate_password_hash('password')
&gt;&gt;&gt; 'pbkdf2:sha1:1000$3j8Brovx$9acddcd67da9e4c913817231c882a0f757e2d095'
</code></pre>
<p>If I store this string to database, someone else hacked into my database and get this string, it's easy to get the origin password using brute force cracking becasue the encrypted password contains the salt. </p>
<pre><code>check_password_hash('pbkdf2:sha1:1000$9HycZ0Qa$94f08a91fba1c040c5bffb6c7e1ab5a6ad4818de', 'password')
</code></pre>
<p>Should I encrypt the origin password using my own salt first before using <code>generate_password_hash()</code> or is there a better solution?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>it's easy to get the origin password using brute force cracking because the encrypted password contains the salt.</p>
</blockquote>
<p>No, it's "easy" to brute force, because you're having a low iteration count of 1000.</p>
<blockquote>
<p>Should I encrypt the origin password using my own salt first before using <code>generate_password_hash()</code> or is there a better solution?</p>
</blockquote>
<p>No, encryption is reversible and since a lost database also means that the encryption key is probably lost too, this would mean that the additional encryption is useless.</p>
<p>An easy fix would be to increase the number of iterations to a million or 10 million depending on what you can afford on your server that your users don't run away because of a slow authentication procedure.</p>
<pre><code>generate_password_hash('password', method='pbkdf2:sha256:1000000')
</code></pre>
<p>The problem with PBKDF2 is that it can be easily parallelized, because it doesn't need much memory. There are alternatives such as scrypt and Argon2 which can be configured to require much memory. Memory is currently the main limitation of dedicated password brute forcing machines based on ASICs.</p>
<p>Ultimately, nothing you do, will lead to a secure authentication system if your users are using "password1" as their password. You should require your users to use complicated passwords with at least 12 characters including uppercase letters, lowercase letter and numbers (optionally including special characters). Those should also not be part of a dictionary.</p>
<p>See more: <a href="https://security.stackexchange.com/q/211/45523">How to securely hash passwords?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>When you store password hashes, the main assumption is that it is too difficult to retrieve the password using brute force. If you want it to be safer, go for slower hash algorithims and longer passwords.</p>
<p>Encryption is worse than a hash because hash is irreversible and brute force is the only way to retrieve the password. With encryption, brute force is just one of the options.</p>
<p>Once that is clear, you have the option to have a "secret" salt in the code or salt can be saved with the hash. <strong>Saving the salt with the password is safer!</strong> Why? Because you have a different salt for each password, so the intruder has to brute force each password separately. If you have one global salt value, brute force can be done for all passwords in the datbase in one go.</p>
</div>
<span class="comment-copy"><a href="https://crackstation.net/hashing-security.htm" rel="nofollow noreferrer">here</a> is answer.</span>
<span class="comment-copy">Also see <a href="http://security.stackexchange.com/q/51959">Why are salted hashes more secure for password storage?</a></span>
<span class="comment-copy">And for <a href="http://crypto.stackexchange.com/a/2010">pepper</a>.</span>
<span class="comment-copy">As Artjom B says, to use pbkdf2 effectively you need a much higher iteration count, and you should be using a longer hash. The <a href="https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac" rel="nofollow noreferrer">Python docs</a> recommend SHA256 with at least 100,000 iterations. (On my old 2GHz machine that takes around 1.8 seconds to hash one password). But as Artjom B also says, pbkdf2 is less safe if the attacker has a lot of resources that can be used in parallel.</span>
<span class="comment-copy">I'm glad you said "(optionally including special characters)". IMHO, special characters in passwords are annoying, and they don't really add much security, apart from forcing users to avoid simple dictionary words. Increasing password length is better than increasing the size of the character pool, eg <code>52**13 / 62**12</code> ~= 6.3</span>
<span class="comment-copy">If a user selects to use a poor password that is a user choice. Many sites require a password but I may not care it someone else options access to my account and just want to use a simple password. That should be a user choice. NIST has a draft document on password suggested practices: NIST SP 800-63-3 Draft document "Digital Authentication Guidelines".</span>
<span class="comment-copy">Do: 1. Require an 8 character min, &gt;64 max with no truncation or 6 random digits 2. Use a dictionary to disallow common passwords against a dictionary list of 10M compromised passwords 3. Allow all printing characters (Unicode optional) + spaces but MAY canonicalize spaces out 4. Best to accept Unicode, including emojis (1 ‚Äúcharacter‚Äù/code point) üò∫ 5. Limit failed authentication attempts to 100 in 30-day period per account 6.Offer option to display the secret while typing rather than dots or asterisks</span>
<span class="comment-copy">Don't: 1. Require composition rules 2. Allow hints 3. Require routine password expiration 4. Save plain or hashed versions with or without seeding.</span>
