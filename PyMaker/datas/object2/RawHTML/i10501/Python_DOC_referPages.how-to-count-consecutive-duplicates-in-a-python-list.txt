<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6352425/whats-the-most-pythonic-way-to-identify-consecutive-duplicates-in-a-list">What's the most Pythonic way to identify consecutive duplicates in a list?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have a list as follows, consisting of only (-1)s and 1s:</p>
<pre><code>list1=[-1,-1,1,1,1,-1,1]
</code></pre>
<p>I'm trying to append the number of consecutive duplicates into a list, e.g.:</p>
<pre><code>count_dups=[2,3,1,1] 
</code></pre>
<p>I've tried creating a new list and using the zip function as the first step, but 
can't seem to go on because of the cut-off end-value</p>
<pre><code>list2=list1[1:]
empty=[]
for x,y in zip(list1,list2):
    if x==y:
        empty.append(x)
    else:
        empty.append(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby
list1 = [-1, -1, 1, 1, 1, -1, 1]
count_dups = [sum(1 for _ in group) for _, group in groupby(list1)]
print(count_dups)
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>[2, 3, 1, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def count_dups(L):
    ans = []
    if not L:
        return ans
    running_count = 1
    for i in range(len(L)-1):
        if L[i] == L[i+1]:
            running_count += 1
        else:
            ans.append(running_count)
            running_count = 1
    ans.append(running_count)
    return ans
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def count_dups(lst):
    return reduce(
        lambda a,b: (((a[-1] == b) and (a[:-2] + [a[-2]+1,a[-1]])) or (a[:-1] + [1,b])) ,
        lst[1:] ,
        [1,lst[0]]
    )[:-1]
</code></pre>
</div>
<span class="comment-copy">Why are you using <code>zip</code> here? It doesn't seem related to the task.</span>
<span class="comment-copy">I think you should use <code>itertools.groupby</code> instead.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/q/6352425">this question</a>. It has a traditional implementation and one using groupby. You should be able to adapt them to meet your requirements.</span>
<span class="comment-copy"><code>len(list(group))</code> will tend to be faster on small sequences, but if you had a really large iterable with large consecutive values, then it might be worth considering <code>sum(1 for _ in group)</code> instead.</span>
<span class="comment-copy">I was just editing this to use the iterator instead of casting to a list =D Yes - I agree.</span>
<span class="comment-copy">FWIW, re-using the variable name <code>_</code> inside the <code>sum</code> generator expression as well as in the outer part of the list comprehension <i>might</i> be confusing to new coders, especially if they aren't familiar with the convention of using <code>_</code> as a throwaway name in loops. So you might like to mention that the two uses of <code>_</code> are independent of each other.</span>
