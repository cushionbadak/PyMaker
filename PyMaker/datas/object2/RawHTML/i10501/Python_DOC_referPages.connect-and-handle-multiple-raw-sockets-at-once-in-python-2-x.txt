<div class="post-text" itemprop="text">
<p>I am new to Python, and trying to learn it "on the job". And I am required to do this.</p>
<p>I am required to communicate with 3 servers with a raw socket connection. I can easily do that in a sequential manner. But I was wondering if there is a way I can communicate with these 3 servers at once? All 3 servers have different IP addresses. </p>
<p>Basically try to do the following but in 1 step:</p>
<pre><code>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST1, PORT1))
s.connect((HOST2, PORT1))
s.connect((HOST3, PORT1))
</code></pre>
<p>which is also need later <code>s.sendall()</code> &amp; <code>s.recv()</code> to be parallelized. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you only have one listening thread, you can use select to wait on multiple sockets and get woken when any of them return data:</p>
<p><a href="https://docs.python.org/2/library/select.html" rel="nofollow">https://docs.python.org/2/library/select.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It's hard to prescribe a wealth of knowledge without knowing more information about your server protocol, what you are listening for and what you intend to do with it, et-c, but I can imagine, given no other additional information, a scenario where the communication is handled by a multiprocessing.Pool(3) where each member of the pool is mapped to an IP address and where all three send data into the same multiprocessing.Queue () which is being evaluated by a loop thread.</p>
<p>Any additional details?</p>
<p>Best of luck on your job!</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a> module.</p>
<p>It requires Python 3, but allows to write single-threaded applications with multiple execution contexts - kind of cooperative multihreading, where the context is switched only when the user says so. You really get the best of thread and event-based concurrency.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/2957116/make-2-functions-run-at-the-same-time/2957131#2957131">This answer</a> using <a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">threading</a> actually worked out for me. </p>
</div>
<span class="comment-copy">Pretty sure that multiple <i>processes</i> are not needed here. A process is more heavyweight than a thread, so all else being equal, threads are preferable.</span>
<span class="comment-copy">I added it because the question was tagged multiprocessing and nobody had prescribed such a solution. That said, kfx is entirely right about the overhead incurred from the spawning of processes.</span>
<span class="comment-copy">Sorry, should have mentioned before, this has to be in Python 2.x</span>
