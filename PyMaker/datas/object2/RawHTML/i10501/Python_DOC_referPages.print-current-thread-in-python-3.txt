<div class="post-text" itemprop="text">
<p>I have this script:</p>
<pre><code>import threading, socket

for x in range(800)
    send().start()

class send(threading.Thread):
    def run(self):
        while True:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect(("www.google.it", 80))
                s.send ("test")
                print ("Request sent!")
            except:
                pass
</code></pre>
<p>And at the place of "Request sent!" I would like to print something like: "Request sent! %s" % (the current number of the thread sending the request)</p>
<p>What's the fastest way to do it?</p>
<p><strong>--SOLVED--</strong></p>
<pre><code>import threading, socket

for x in range(800)
    send(x+1).start()

class send(threading.Thread):
    def __init__(self, counter):
        threading.Thread.__init__(self)
        self.counter = counter
    def run(self):
        while True:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect(("www.google.it", 80))
                s.send ("test")
                print ("Request sent! @", self.counter)
            except:
                pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could pass your counting number (<code>x</code>, in this case), as a variable in your send class. Keep in mind though that <code>x</code> will start at 0, not 1.</p>
<pre><code>for x in range(800)
    send(x+1).start()

class send(threading.Thread):
    def __init__(self, count):
        self.count = count

    def run(self):
        while True:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect(("www.google.it", 80))
                s.send ("test")
                print ("Request sent!"), self.count
            except:
                pass
</code></pre>
<p>Or, as Rob commented above in the other question, <a href="http://docs.python.org/library/threading.html#threading.current_thread" rel="nofollow"><code>threading.current_thread()</code></a> looks satisfactory.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to do this is to use <code>setName</code> and <code>getName</code> to give names to your threads.</p>
<pre><code>import threading, socket

for x in range(800)
    new_thread = send()
    new_thread.setName("thread number %d" % x)
    new_thread.start()

class send(threading.Thread):
    def run(self):
        while True:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect(("www.google.it", 80))
                s.send ("test")
                print ("Request sent by %s!" % self.getName())
            except:
                pass
</code></pre>
<p>You can also add any other attributes to <code>send</code> that you need to keep track of your threads.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just a side answer to how to get a thread ID (might not respond directly to the question but help others):
In python 3.3+ you can do simply :</p>
<pre class="lang-py prettyprint-override"><code>import threading

threading.get_ident()
</code></pre>
<p>Read more : <a href="https://docs.python.org/3/library/threading.html#threading.get_ident" rel="nofollow noreferrer">here </a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/919897/how-to-find-a-thread-id-in-python">How to find a thread id in Python</a></span>
<span class="comment-copy">In this case, <code>current_thread()</code> will always be <code>self</code>.</span>
<span class="comment-copy">thanks for the answer. It raises: [code]    raise RuntimeError("thread.__init__() not called") RuntimeError: thread.__init__() not called [/code]</span>
<span class="comment-copy">solved by adding "threading.Thread.__init__(self)" to <b>init</b> function. thanks</span>
<span class="comment-copy">but i still can't understand why send(x+1).start() has this +1</span>
<span class="comment-copy">@allexj It's because <code>range(800)</code> starts with 0 not 1, so when we say "Request sent!" for the first time we're saying "this is the first one!" instead of "this is the zeroth one!"</span>
