<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5404665/accessing-elements-of-python-dictionary-by-index">Accessing elements of Python dictionary by index</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>Okay, I have an object var with some values:</p>
<pre><code>mm = 0.001

screenDims = {}
screenDims['width'] = mm * 500
screenDims['height'] = mm * 300
screenDims['depth'] = mm * 10
</code></pre>
<p>I've created a tiny function to use these values. Inside my function I have a line:</p>
<pre><code>def createScreen(screenDims,radialdist,theta):

    #... some code that creates the object fine ...

    bpy.ops.transform.resize(value=(screenDims.width, screenDims.height, screenDims.depth), ... )
</code></pre>
<p>When I execute this, it throws an error that my object variable <code>screenDims</code> doesn't have a value for <code>width</code>. </p>
<p>Is there some secret for passing in object vars? Is the variable out of scope because its inside the resize function? or value designator? </p>
<p>I'm confused. </p>
</div>
<div class="post-text" itemprop="text">
<p>To access elements in a dictionary, you have to read them like you write them:</p>
<pre><code>    bpy.ops.transform.resize(value=(screenDims["width"], screenDims["height"], screenDims["depth"]), ... )
</code></pre>
<p>There is a difference between <em>attributes</em> and <em>keys</em> in a dictionary. Keys are accessed using the bracket notation (like are elements in an array, so there is the analogy). </p>
<p>Attributes are used for methods and values whose existence is usually determined by the <em>type</em> of the object, while the index notation is used for elements in the container. This helps distinguishing methods such as <code>screenDims.clear()</code> which would delete all elements in the dictionary from an element set with </p>
<pre><code>screenDims["clear"] = ...
</code></pre>
<p>More informaiton on dictionaries is found <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">in the official Python Tutorial, section Dictionaries</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways of accessing a dictionary element:-</p>
<ol>
<li>Using get() method of dictionary -</li>
</ol>
<blockquote>
<p>bpy.ops.transform.resize(value=(screenDims.get("width"),
  screenDims.get("height"), screenDims.get("depth")), ... )</p>
</blockquote>
<ol start="2">
<li>You can read them the same way you wrote to create the dictionary-</li>
</ol>
<blockquote>
<p>bpy.ops.transform.resize(value=(screenDims["width"],
  screenDims["height"], screenDims["depth"]), ... )</p>
</blockquote>
<p>The benefit with using get method is that you can provide some default value to be returned in case the key is not present inside the dictionary.
e.g.-</p>
<blockquote>
<p>screenDims.get("height","default_value")</p>
</blockquote>
<p><strong>.</strong> (dot) operator is used for accessing attributes of an object, which can either be value or method.</p>
</div>
<span class="comment-copy">Use <code>screenDims['width']</code>, not <code>screenDims.width</code>.</span>
<span class="comment-copy">In short: Python is not Javascript and <code>[]</code> and <code>.</code> notation aren't interchangeable.</span>
<span class="comment-copy">Holy hell, I need to get back to the 80s Basic days to understand Python. Ty!</span>
