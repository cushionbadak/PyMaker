<div class="post-text" itemprop="text">
<p>I am pretty new to Python and to help new learn, I am building a program, which I want broken down into 2 steps:</p>
<p>Step 1) Count the number of a particular words in a text file, store that in a dictionary where the key, value pairs are {word, count}</p>
<p>Step 2) Order the dictionary from (1) in descending order, to show the top 100 words</p>
<p>Step 1 works fine but in attempting step 2, I am struggling to call the dictionary from the first function. I create a new variable 'tallies' but this is a tuple and shows only the first entry in the dictionary.</p>
<p>How do I call the full dictionary to my 2nd function?</p>
<p>Thanks.</p>
<pre><code>filename = 'nameoffile.txt'

def tally():
  file = open(filename,'r')
  wordcount={}
  for word in file.read().split():
    if word not in wordcount:
      wordcount[word] = 1
    else:
      wordcount[word] += 1
  for k,v in wordcount.items():
    return k,v

def Count():
  tallies = tally()
  print tallies

Count()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your tally function is returning the first item it sees; <code>return</code> can only return once, but you're calling it in a loop.  try returning the whole wordcount dict:</p>
<pre><code>filename = 'nameoffile.txt'

def tally():
  file = open(filename,'r')
  wordcount={}
  for word in file.read().split():
    if word not in wordcount:
      wordcount[word] = 1
    else:
      wordcount[word] += 1
  return wordcount

def Count():
  tallies = tally()
  sorted_tallies = sorted(tallies.items(), key=operator.itemgetter(1))
  print sorted_tallies[:100]

Count()
</code></pre>
<p>in python a <code>dict</code> is by nature unordered, so to order it you need to sort its tuples into a list.  the <code>sorted</code> code does this (<a href="https://stackoverflow.com/questions/613183/sort-a-python-dictionary-by-value">see this reference</a>).</p>
<p>good luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>These tasks are exactly what <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter()</code></a> is for. You can use this function in order to create a counter-dictionary object contains words and their frequency, you can call it on splited text. Then use <code>Counter.most_common(N)</code> to get most N common items.</p>
<p>And regarding your code in following part:</p>
<pre><code>for k,v in wordcount.items():
    return k,v
</code></pre>
<p>After first iteration you are breaking the loop by <code>return</code> and it only will return the first item.</p>
<p>You can simply return the dictionary:</p>
<pre><code>def tally():
    file = open(filename,'r')
    wordcount={}
    for word in file.read().split():
        if word not in wordcount:
            wordcount[word] = 1
        else:
            wordcount[word] += 1
    return wordcount
</code></pre>
<p>You even could use <code>collections.defaultdict()</code> in order to create your counter object manually. The benefit of using this function is that it overrides one method and adds one writable instance variable.</p>
<pre><code>from collections import defaultdict

wordcount = defaultdict(int) # default is 0

def tally():
    with open(filename) as f 
    for word in f.read().split():
            wordcount[word] += 1
    return wordcount
</code></pre>
<p>And for returning the sorted items you can use <code>sorted()</code> function on dictionary items by passing a key function to it, to say that sort the items by second item. For example:</p>
<pre><code>sorted(wordcount.items(), key=lambda x:x[1])
</code></pre>
<p>But as I said the the first, the pythonic and optimized approach is using <code>collections. Counter()</code>.</p>
<pre><code>from collections import Counter

with open(filename) as f:
    wordcount = Counter(f.read().split())

top100 = wordcount.most_common(100)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is that you returned <code>k,v</code> after the first iteration meaning you only ever grabbed the first item. The following code fixes this. I also added the reversal function.</p>
<pre><code>def tally():
    file = open(filename,'r')
    wordcount={}
    for word in file.read().split():
        if word not in wordcount:
            wordcount[word] = 1
        else:
            wordcount[word] += 1

    return tuple(reversed(sorted(((k, v) for k, v in wordcount.items()),key=lambda x: x[1])))

def Count():
    tallies = tally()
    print tallies
</code></pre>
</div>
<span class="comment-copy">Since you are new to python Google before you write code. There may be a solution out there already. Python is an idiomatic language. Ppl will use the same piece of code   Look at answer that  uses 'Counter'.</span>
<span class="comment-copy">Thanks for your help! This was really helpful!</span>
