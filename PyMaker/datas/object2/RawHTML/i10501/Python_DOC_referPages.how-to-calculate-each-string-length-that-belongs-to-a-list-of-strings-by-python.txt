<div class="post-text" itemprop="text">
<p>Suppose I have a file with <code>n</code> DNA sequences, each one in a line. I need to turn them into a list and then calculate each sequence's length and then total length of all of them together. I am not sure how to do that before they are into a list. </p>
<pre><code># open file and writing each sequences' length
f= open('seq.txt' , 'r')
for line in f:
    line= line.strip()
    print (line)
    print ('this is the length of the given sequence', len(line))

# turning into a list:  
lines = [line.strip() for line in open('seq.txt')]
print (lines)
</code></pre>
<p>How can I do math calculations from the list? Ex. the total length of all sequences together? Standard deviation from their different lengths etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Look into the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow"><code>statistics</code></a> module.
You'll find all kinds of measures of averages and spreads.</p>
<p>You'll get the length of any sequence using <code>len</code>.</p>
<p>In your case, you'll want to map the sequences to their lengths:</p>
<pre><code>from statistics import stdev

with open("seq.txt") as f:
    lengths = [len(line.strip()) for line in f]

print("Number of sequences:", len(lengths))
print("Standard deviation:", stdev(lengths))
</code></pre>
<p><strong>edit:</strong> Because it was asked in the comments: Here's how to cluster the instances into different files depending on their lengths:</p>
<pre><code>from statistics import stdev, mean
with open("seq.txt") as f:
    sequences = [line.strip() for line in f]
lengths = [len(sequence) for sequence in sequences]

mean_ = mean(lengths)
stdev_ = stdev(lengths)

with open("below.txt", "w") as below, open("above.txt", "w") as above, open("normal.txt", "w") as normal:
    for sequence in sequences:
        if len(sequence) &gt; mean+stdev_:
            above.write(sequence + "\n")
        elif mean+stdev_ &gt; len(sequence &gt; mean-stdev_: #inbetween
            normal.write(sequence + "\n")
        else:
            below.write(sequence + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this to output the individual length and calculate the total length:</p>
<pre><code>    lines = [line.strip() for line in open('seq.txt')]
    total = 0
    for line in lines:
       print 'this is the length of the given sequence: {}'.format(len(line))
       total += len(line)
    print 'this is the total length: {}'.format(total)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The map and reduce functions can be useful to work on collections.</p>
<pre><code>import operator

f= open('seq.txt' , 'r')
for line in f:
  line= line.strip()
  print (line)
  print ('this is the length of the given sequence', len(line))

# turning into a list:
lines = [line.strip() for line in open('seq.txt')]
print (lines)

print('The total length is 'reduce(operator.add,map(len,lines)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will do what you require. To do additional calculations you may want to save your results from the text file into a list or set so you won't need to read from a file again.</p>
<pre><code>total_length = 0  # Create a variable that will save our total length of lines read

with open('filename.txt', 'r') as f:
    for line in f:
        line = line.strip()
        total_length += len(line)  # Add the length to our total
        print("Line Length: {}".format(len(line)))

print("Total Length: {}".format(total_length))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a couple of remarks. Use <code>with</code> to handle files so you don't have to worry about closing them after you are done reading\writing, flushing, etc. Also, since you are looping through the file once, why not create the list too? You don't need to go through it again.</p>
<pre><code># open file and writing each sequences' length
with open('seq.txt', 'r') as f:
    sequences = []
    total_len = 0
    for line in f:
        new_seq = line.strip()
        sequences.append(new_seq)
        new_seq_len = len(new_seq)
        total_len += new_seq_len

print('number of sequences: {}'.format(len(sequences)))
print('total lenght: {}'.format(total_len))
print('biggest sequence: {}'.format(max(sequences, key=lambda x: len(x))))
print('\t with length {}'.format(len(sorted(sequences, key=lambda x: len(x))[-1])))
print('smallest sequence: {}'.format(min(sequences, key=lambda x: len(x))))
print('\t with length {}'.format(len(sorted(sequences, key=lambda x: len(x))[0])))
</code></pre>
<p>I have included some post-processing info to give you an idea of how to go about it.
If you have any questions just ask.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have already seen how to get the list of sequences and a list of the lengths using append.</p>
<pre><code>    lines = [line.strip() for line in open('seq.txt')]
    total = 0
    sizes = []
    for line in lines:
       mysize = len(line)
       total += mysize
       sizes.append(mysize)
</code></pre>
<p>Note that you can also use a for loop to read each line and append to the two lists rather than read every line into lists and then loop through lists. It is a matter of which you would prefer.</p>
<p>You can use the statistics library (as of Python 3.4) for the statistics on the list of lengths.</p>
<p><a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">statistics — Mathematical statistics functions</a></p>
<blockquote>
<p>mean()    Arithmetic mean (“average”) of data.    median()    Median (middle
  value) of data.    median_low()   Low median of data.<br/>
  median_high() High median of data.    median_grouped()    Median, or 50th
  percentile, of grouped data.    mode()    Mode (most common value) of
  discrete data.    pstdev()    Population standard deviation of data.<br/>
  pvariance()   Population variance of data.    stdev() Sample standard
  deviation of data.    variance()  Sample variance of data.</p>
</blockquote>
<p>You can also use the answers at <a href="https://stackoverflow.com/questions/15389768/standard-deviation-of-a-list">Standard deviation of a list</a></p>
<p>Note that there is an answer that actually shows the code that was added to Python 3.4 for the statistics module. If you have an older version, you can use that code or get the statistics module code for your own system.</p>
</div>
<span class="comment-copy">I gave the answer that shows how to build a list of the lengths of the individual sequences as wall as the total. Once you have the list of lengths you can do the statistics on it.</span>
<span class="comment-copy">I don't have numerical data on my files. Only strings of DNA. When I do len(lines), it gives me the number of strings I have, but not the total length of all string together.</span>
<span class="comment-copy">I tried to use float or int, to see if the length would work, not it didn't.</span>
<span class="comment-copy">If you want the total length of all sequences, use <code>sum(lengths)</code>.</span>
<span class="comment-copy">That worked! Thanks! Why it's not accepting print ("Mean of the length of my sequences:)", mean(lengths))? is there another code for mean?</span>
<span class="comment-copy">You'll also need to import mean, by writing <code>from statistics import stdev, mean</code>. Or just do <code>import statistics</code> and do <code>statistics.mean(lenghts)</code>.</span>
<span class="comment-copy">thanks! So, yeah I created a list using: lines = [line.strip() for line in open('seq.txt')]. Then now my list is ['AGATAAGATAGTAGAT', 'GTAAGTGATGATAGTAGTA', etc]. However, once I try to do the length len(lines), it gives me only the total number of strings, but not the total length of all strings together.</span>
<span class="comment-copy">I also tried len(lines [0:]). Doesn't work.</span>
<span class="comment-copy">@MarinaMitieMonobe this happens here <code>total_len += new_seq_len</code></span>
<span class="comment-copy">print('biggest sequence: {}'.format(max(sequences, key=lambda x: len(x), reversed=True))) TypeError: 'reversed' is an invalid keyword argument for this function</span>
<span class="comment-copy">I am trying to follow up the codes you insert haha</span>
