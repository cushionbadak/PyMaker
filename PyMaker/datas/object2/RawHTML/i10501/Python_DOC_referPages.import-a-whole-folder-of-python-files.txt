<div class="post-text" itemprop="text">
<p>I am making a bot in python 3 and wish it to be easily expanded so I have a central file and then one for each command. I wish to know if there is a way to import a sub-directory full of modules without importing each separately. For example:</p>
<pre><code>example
├── commands
│   ├── bar.py
│   └── foo.py
└── main.py
</code></pre>
<p>And the code in <code>main.py</code>would be something like:</p>
<pre><code>import /commands/*
</code></pre>
<p>Thanks :D</p>
<p><strong>Solution:</strong>
Import each separately with: 
<code>from commands import foo, bar</code></p>
<p><code>from commands import *</code> Does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using python3, the <code>importlib</code> module can be used to dynamically import modules. On python2.x, there is the <code>__import__</code> function but I'm not very familiar with the semantics. As a quick example, </p>
<p>I have 2 files in the current directory</p>
<pre><code># a.py
name = "a"
</code></pre>
<p>and</p>
<pre><code># b.py
name = "b"
</code></pre>
<p>In the same directory, I have this</p>
<pre><code>import glob
import importlib

for f in glob.iglob("*.py"):
    if f.endswith("load.py"):
        continue
    mod_name = f.split(".")[0]
    print ("importing {}".format(mod_name))
    mod = importlib.import_module(mod_name, "")
    print ("Imported {}. Name is {}".format(mod, mod.name))
</code></pre>
<p>This will print</p>
<pre><code>importing b Imported &lt;module 'b' from '/tmp/x/b.py'&gt;. 
Name is b
importing a Imported &lt;module 'a' from '/tmp/x/a.py'&gt;. 
Name is a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Import each separately with: 
<code>from commands import bar</code> and
<code>from commands import foo</code></p>
<p><code>from commands import *</code> Does not work.</p>
</div>
<span class="comment-copy">yes, add an   <code>__init__.py</code> in the commands folder and then <code>from commands import whatever</code></span>
<span class="comment-copy">Adding <code>__init__.py</code> will make it into a <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">package</a></span>
<span class="comment-copy">You don't actually need the <code>__init__.py</code></span>
<span class="comment-copy">Why was this reopened? @SolarPolarMan, you do for python2.</span>
<span class="comment-copy">I marked an incorrect answer as correct in an attempt to mark it solved. I'm happy to wait two days and mark my own correct if no one comes up with a better way. I cannot mark yours correct as you posted it as a comment.</span>
<span class="comment-copy">Why did you reopen the question?</span>
<span class="comment-copy">This question specifically asks about importing  directory full of modules. The note that he wants to implement each command as a separate module suggested (to me) a plugin like architecture which will dynamically load up the modules in the directory without manually editing the <code>__init__.py</code> files. The question which this was linked to simply mentioned the <code>__init__.py</code> business and how modules are loaded when packages are imported. While valid, it didn't, to me, address what this question was looking for. That's why I reopened it.</span>
<span class="comment-copy">I would have mentioned this but there was no clear way to "suggest reopening". Clicking on reopen automatically reopened the question.</span>
<span class="comment-copy">But your question was <i>"...without importing each separately"</i> so this isn't the answer. <code>from command import bar, foo</code> would be more compact and its also common to put something like <code>__all__ = ["foo", "bar']</code> into <i>commands/__init_</i>.py_ if the module thinks all uses will want the modules.</span>
