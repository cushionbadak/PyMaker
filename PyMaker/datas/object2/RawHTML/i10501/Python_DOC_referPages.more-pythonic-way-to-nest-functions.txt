<div class="post-text" itemprop="text">
<p>Here is the code that I have:</p>
<pre><code>def reallyquit():
        from easygui import boolbox
        if __debug__: print ("realy quit?")
        answer = boolbox("Are you sure you want to Quit?")
        if answer == 1:
            sys.exit()
        return

columns = ['adr1','adr2','spam','spam', 'spam']

Street = choicebox("Street Address?", title, columns)
    while Street == None:
        reallyquit()
        Street = choicebox("Street Address?", title, columns)
</code></pre>
<p>Is there a more pythonic way to recursively ask a question if a user closes a box inadvertently? Mainly looking for tips on the last 4 lines, but feel free to critique the rest.</p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>import sys
from easygui import boolbox, choicebox

def reallyquit():
    "Ask if the user wants to quit. If so, exit."
    if __debug__: 
        print("really quit?")
    answer = boolbox("Are you sure you want to Quit?")
    if answer == 1:
        sys.exit()

columns = ['adr1', 'adr2', 'spam', 'spam']
street = None

# ask for address until given or user decides to quit
while street is None:
    street = choicebox("Street Address?", title, columns)
    if street is None:
        reallyquit()
</code></pre>
<p>In the main logic: Usually you would not test if a value is equal to <code>None</code>, since it is a singleton (only one in the system, and all occurrences of <code>None</code> are to the same logical <code>None</code>). Thus <code>is None</code> is a better test. I've also used a little more Pythonic code formatting (spaces after commas in a list, lowercase variable names), and a test order that doesn't duplicate the user interaction call.</p>
<p>An alternative form suggested by <a href="https://stackoverflow.com/users/102441/eric">Eric</a> would be something like:</p>
<pre><code>while True:
    street = choicebox("Street Address?", title, columns)
    if street is not None:
        break
    reallyquit()
</code></pre>
<p>This has the virtue of not repeating the <code>street is None</code> test, but is a bit longer. Your preference for which option seems clearer and more logical may vary. </p>
<p>For the preparations: Imports are taken out of functions, and <code>choicebox</code> is imported where it was previously missing. The function is given
a defining comment string. The one statement per line standard is enforced. And the unnecessary <code>return</code> removed.</p>
<p>This is still a fairly coarse program, but it's now "more Pythonic."</p>
<p>Not to be overwhelming, but the standard for Pythonic code appearance is <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. There are tools such as <a href="https://pypi.python.org/pypi/pep8" rel="nofollow noreferrer">pep8</a> you can install to check compliance. The deeper or "semantic" part of Pythonic code is sketched out in <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 20</a>, also known as "The Zen of Python." There is, sadly, no tool to judge compliance with those deeper principles. Experience is required.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is more idiomatic than using a sentinel variable:</p>
<pre><code>while True:
    street = choicebox("Street Address?", title, columns)
    if street is None:
        reallyquit()
    else:
        break
</code></pre>
<p>Also, consider using the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow"><code>logging</code></a> module for your debug printing, so instead of <code>if __debug__: print(whatever)</code> you just have <code>logging.debug(whatever)</code> and set the logging level.</p>
</div>
<span class="comment-copy">I don't see any recursion.</span>
<span class="comment-copy">There are many non-pythonic aspects to your formatting, and using <code>== None:</code> is not pythonic either (use <code>is None:</code> instead). Please consider checking your source with <code>pep8</code> or <code>flake8</code>. Or directly run <code>yapf</code> on the source.</span>
<span class="comment-copy">Af few general pointers:  1.  Don't import inside a function unless it is required (which is rare but does happen), keep your imports at the top of the file.  2.  You don't need a "return" at the end of the function <code>reallyquit</code> since Python functions return None by default.  3.   Indent (and verify formatting of) your code on SO.  4.  What @Anthon said.</span>
<span class="comment-copy">Also, you should not name your variables starting with an upper case letter. They could conflict with class names.</span>
<span class="comment-copy">Since there is nothing "wrong" with this code, it may be better to ask this question on <a href="http://codereview.stackexchange.com/">Code Review</a></span>
<span class="comment-copy">@XiaojunChen unless a falsy answer was valid, like <code>0</code>, <code>[]</code>, <code>{}</code>, <code>""</code>, etc...</span>
<span class="comment-copy">just notice your indentation of the last line <code>reallyquit()</code> is 3, should be 4</span>
<span class="comment-copy">Repeating the <code>street is None</code> condition here is not great - perhaps just do <code>while True</code>, and add a break to the if? That's the recommended way to emulate a <code>do while</code> statement in python</span>
<span class="comment-copy">If line count really matters to you, <code>if street is not None: break</code> <code>reallyquit()</code> cuts one more off</span>
<span class="comment-copy">@Eric It's really overall clarity that matters most. Line count is just one component. But I updated the alternate option with your <code>is not None</code> suggestion. It seems crisper. And that infinite-loop-plus-break should be able to put its best foot forward.</span>
<span class="comment-copy">Thanks. I've added a break.</span>
