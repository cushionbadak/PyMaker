<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6500888/removing-from-a-list-while-iterating-over-it">Removing from a list while iterating over it</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/1207406/how-to-remove-items-from-a-list-while-iterating">How to remove items from a list while iterating?</a>
<span class="question-originals-answer-count">
                    23 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to clear a python list by removing every element in loop by code</p>
<pre><code>x=list(range(10000))
for i in x:
    x.remove(i)
</code></pre>
<p>I thought that after this code <strong>x</strong> must be <strong>[]</strong>, but instead only every second element of list is removed. <strong>len(x)=5000</strong> instead of <strong>0</strong>. </p>
<p>Why is it so? What am I doing wrong.
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to clear a python list like you're doing, the right way is just using <code>x.clear</code>, docs about that method <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow">here</a>, now, if you want to remove elements using some fancy conditions, just use <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow">filter</a>, example clearing the whole <code>x</code> list:</p>
<pre><code>x = list(range(10000))
x = filter(lambda x: False, x)
print x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <em>a.remove(i)</em> messed up the indexing is my guess.</p>
<p>instead use</p>
<pre><code>a.clear()
</code></pre>
<p>Its a good way to clear a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to implement a list object that erases itself while iterating over it that would be fairly easy:</p>
<pre><code>class ErasingList(list):
    "a list implemented as an iterator, iterating over it will .pop() items off"
    def __iter__(self):
        return self
    def __next__(self):
        try:
            return self.pop(0)
        #or self.pop() to take from the end of the list which is less intuitive but more efficient
        except IndexError:
            raise StopIteration
    next = __next__ #vs2 compatibility.

x = ErasingList(range(100))

for i in x:
    print(i)

print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>original_list = list(range(1000))
remove_list_elements = []

for i in range(0, len(original_list), 2): 
    remove_list_elements.append(original_list[i])

[original_list.remove(i) for i in remove_list_elements] 
print(len(original_list))
</code></pre>
</div>
<span class="comment-copy">Or <a href="http://stackoverflow.com/questions/6022764/python-removing-list-element-while-iterating-over-list" title="python removing list element while iterating over list">stackoverflow.com/questions/6022764/â€¦</a></span>
