<div class="post-text" itemprop="text">
<p>I have a C++ program that, through the terminal, takes a text file as input and produces another text file. I'm executing this program from a Python script which first produces said text string, stores it to a file, runs the C++ program as a subprocess with the created file as input and parses the output text file back into a Python object.</p>
<p>Is it possible to do this without using a subprocess call? In other words: is it possible to avoid the reading and writing and just run the C++ program inside the Python environment with the text-string as input and then capture the output, again inside the Python environment?</p>
<p>For code I refer to the function <code>community_detection_multiplex</code> in <a href="https://github.com/ulfaslak/InfomapSensibleDTU/blob/master/preproc.ipynb" rel="nofollow">this IPython notebook</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.5/library/ctypes.html" rel="nofollow">ctypes</a>.<br/>
It requires the C++ function to be wrapped with <code>extern "c"</code> and compiled as C code.</p>
<p>Say your C++ function looks like that:</p>
<pre><code>char* changeString(char* someString)
{
    // do something with your string
    return someString;
}
</code></pre>
<p>You can call it from python like that:</p>
<pre><code>import ctypes as ct

yourString = "somestring"
yourDLL = ct.CDLL("path/to/dll") # assign the dll to a variable
cppFunc = yourDLL.changeString # assign the cpp func to a variable
cppFunc.restype = ct.c_char_p # set the return type to a string
returnedString = cppfunc(yourString.encode('ascii')).decode()
</code></pre>
<p>Now <code>returnedString</code> will have the processed string. </p>
</div>
<span class="comment-copy">Do you have a C++ parser/interpreter written in Python? If yes, great. Otherwise, no.</span>
<span class="comment-copy">spawning a subprocess isn't really a big deal is it? You could send the input/collect output via stdin/stdout pipe redirects if you want to avoid the security risk of the file.</span>
<span class="comment-copy">@RichardHodges how would I pass the string to the C++ program from Python if it were never stored as a file?</span>
<span class="comment-copy">@UlfAslak with a pipe. The subordinate program could just read data from stdin and write to stdout. These would map to the python program's pipe (which it would create).</span>
<span class="comment-copy">@UlfAslak lots of info here: <a href="https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Ideally I would want the file to not be stored, and it seems that your solution does this?</span>
<span class="comment-copy">My solution calls a C++ function and pass a string to it. If you want to open a file in Python and pass it (while open) to C++, then this is not the right solution for you.</span>
<span class="comment-copy">as I understand this solution has the string stored as a file</span>
<span class="comment-copy"><code>yourPathToFile</code> is a string variable contains a path to a file (ideally, I would use the <code>os.path</code> module to create a path string). You can do <code>with open(yourPathToFile) as f:</code> and read the file in python. In the solution I posted, it is expected that the c++ function will open the file within itself.</span>
<span class="comment-copy">I'm sorry I must not have explained it well enough. The python script generates the string which should be processed by the C++ program. That's why I want to avoid saving any files.</span>
