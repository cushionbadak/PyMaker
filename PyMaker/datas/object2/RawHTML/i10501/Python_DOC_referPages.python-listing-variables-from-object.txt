<div class="post-text" itemprop="text">
<p>So basically I need help with laziness.</p>
<p>Is it possible in python to take an object, and then list off all it's variables</p>
<p>For example</p>
<pre><code>class some_object:
  def __init__(self):
    self.Name = None
    self.UUID = None
</code></pre>
<p>then call a magic function that lists all the variable names in the object</p>
<p>and maybe return something that looks close to this:</p>
<pre><code>[some_object.Name, some_object.UUID]
</code></pre>
<p>Keep in mind I DON'T NEED the values attached to the object, but rather the name of the variable, such as Name and UUID</p>
<p>if anyone could help me, that'd be awesome.</p>
<p>Edit:
Thanks for everyone answering my question, the magic function I needed was vars (). I really appreciate everyone effort and input on the problem</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use vars():</p>
<pre><code>class about_me:
  def __init__(self):
    self.name = "Lyend Victorian"
    self.age = "25"
    self.height = "180"

me = about_me()

&gt;&gt;&gt; vars(me)
{'age': '25', 'name': 'Lyend Victorian', 'height': '180'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow"><code>dir()</code></a> function to get a list of (some of) the attributes an object has, like so:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __init__(self):
...         self.name = None
...         self.uuid = None
&gt;&gt;&gt; thing = Foo()
&gt;&gt;&gt; dir(thing)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'name', 'uuid']
</code></pre>
<p>Alternatively, the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars()</code></a> function can be used to get the <code>__dict__</code> attribute for an object:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __init__(self):
...         self.name = None
...         self.uuid = None
&gt;&gt;&gt; thing = Foo()
&gt;&gt;&gt; vars(thing)
{'name': None, 'uuid': None}
</code></pre>
<p>However, as several commenters have pointed out, it's likely that there is a better way of accomplishing what you are trying to do. The <code>dir()</code> function will not necessarily return a complete list of all attributes an object has; from the docs:</p>
<blockquote>
<p>If the object does not provide <code>__dir__()</code>, the function tries its best to gather information from the object’s <code>__dict__</code> attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be inaccurate when the object has a custom <code>__getattr__()</code>.</p>
<p>Because <code>dir()</code> is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.</p>
</blockquote>
</div>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (output, tracebacks, etc.). The more detail you provide, the more answers you are likely to receive. Check the <a href="http://stackoverflow.com/tour">FAQ</a> and <a href="http://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">Do you want to get this list from <code>some_object</code>, or from <code>some_object()</code>; i.e. from the <i>class definition</i> or from an instance of that class…?</span>
<span class="comment-copy">Also not sure what this has to do with "laziness"…?</span>
<span class="comment-copy">Yes, it's possible, but it is doubtful you need that functionality. You don't provide a use-case what you want it for; possibly a <code>dict</code> could suffice for what you want to achieve.</span>
