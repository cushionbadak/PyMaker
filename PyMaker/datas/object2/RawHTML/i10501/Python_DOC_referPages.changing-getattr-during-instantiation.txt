<div class="post-text" itemprop="text">
<p>I am wanting to change <code>__getattr__</code> during instantiation of the class.  For example:</p>
<pre><code>class AttrTest(object):
    def __init__(self):
        self.__getattr__ = self._getattr

    def _getattr(self, attr):
        print("Getting {}".format(attr))
</code></pre>
<p>I would have expected this to behave like:</p>
<pre><code>class AttrTest(object):
    def __getattr__(self, attr):
        print("Getting {}".format(attr))
</code></pre>
<p>But it does not.</p>
<p>For example, when I run:</p>
<pre><code>&gt;&gt;&gt; at = AttrTest()
&gt;&gt;&gt; at.test
</code></pre>
<p>I would expect both classes to print <code>Getting test</code>, but the top class throws an <code>AttributeError</code>.</p>
<p>Can <code>__getattr__</code> not be changed in this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>For special methods like <code>__getattr__</code>, Python searches in the base(s) <code>__dict__</code>, not in the instance <code>__dict__</code>.</p>
<p>You can read more details about this in the <a href="https://docs.python.org/3/reference/datamodel.html#special-lookup" rel="nofollow">special lookup</a> section of the data model documentation.</p>
<blockquote>
<p>I have two implementations of <code>__getattr__</code> that each use a different
  type of serialization (json, pickle), and I wanted my class to be able
  to select one based on a kwarg.</p>
</blockquote>
<p>This is not a good use-case for overriding <code>__getattr__</code>.  Abandon this idea, and instead consider to use <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow"><code>@property</code></a> or <a href="https://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow">descriptors</a> to handle your serialisation dynamically.  </p>
</div>
<span class="comment-copy">The response question I have is naturally, "Why??"</span>
<span class="comment-copy">@WayneWerner well, I have two implementations of <code>__getattr__</code> that each use a different type of serialization (json, pickle), and I wanted my class to be able to select one at instantiation based on a kwarg.</span>
<span class="comment-copy">Why not subclasses? Presumably the caller knows which is which since they're setting the kwarg</span>
<span class="comment-copy">TIL... this! :)</span>
<span class="comment-copy">@ballsatballsdotballs -- could you have <code>__getattr__</code> call <code>_getattr</code> which is set to <code>_getattrjson</code> or <code>_getattrpickle</code> based on the initization arguments?</span>
<span class="comment-copy">@mgilson That would work, yes.</span>
