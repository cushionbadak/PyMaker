<div class="post-text" itemprop="text">
<p>I am a noob in python and I think I have a relevant question.</p>
<p>I have this two lists in python :  </p>
<p><strong>In listA I have the column names of my mysql table.</strong></p>
<pre><code>listA = ["columnA","columnB","columnC"]
</code></pre>
<p><strong>In listB I have the result of a query to this values</strong></p>
<pre><code>listB = [["10","30","40"],
         ["14","28","38"],
         ["13","23","45"]]
</code></pre>
<p><strong>What is the most efficient way in python to produce an output like this?</strong></p>
<pre><code>   columnA = 10, columnB = 30, columnC = 40
   columnA = 14, columnB = 28, columnC = 38
   columnA = 13, columnB = 23, columnC = 45
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A list of dictionaries will work well:</p>
<pre><code>&gt;&gt;&gt; [dict(zip(listA, row)) for row in listB]
[{'columnA': '10', 'columnC': '40', 'columnB': '30'}, {'columnA': '14', 'columnC': '38', 'columnB': '28'}, {'columnA': '13', 'columnC': '45', 'columnB': '23'}]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the one-liner (as per your title):</p>
<pre><code>print '\n'.join([ ', '.join([ listA[i]+"="+x[i] for i in range(len(x)) ]) for x in listB ] )
</code></pre>
<p>The notation with <code>for</code> in brackets <code>[]</code> is known as <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>. Refer to the Python documentation for more details. The one-liner is using nested list comprehensions:</p>
<p>The outer part is parsing the outer list of listB, as shown in the example below. This is helping us to parse listB row by row.</p>
<pre><code>[ repr(x) for x in listB ]
</code></pre>
<p>The inner part is parsing the listB row to build the string. We are iterating on the index rather than the elements themselves in order to get the column name from listA:</p>
<pre><code>[ listA[i]+"="+x[i] for i in range(len(x)) ]
</code></pre>
<p>Is the equivalent of:</p>
<pre><code>for i in range(len(x)):
    listA[i]+"="+x[i]
</code></pre>
<p>The third row results in:</p>
<pre><code>['columnA=13', 'columnB=23', 'columnC=45']
</code></pre>
<p>We then need to combine it in a single string with coma-separation:</p>
<pre><code>', '.join(['columnA=13', 'columnB=23', 'columnC=45'])
</code></pre>
<p>Results in:</p>
<pre><code>'columnA=13, columnB=23, columnC=45'
</code></pre>
<p>Hence, the expression:</p>
<pre><code>[ ', '.join([ listA[i]+"="+x[i] for i in range(len(x)) ]) for x in listB ]
</code></pre>
<p>Results in:</p>
<pre><code>[ 'columnA=10, columnB=30, columnC=40',
  'columnA=14, columnB=28, columnC=38',
  'columnA=13, columnB=23, columnC=45' ]
</code></pre>
<p>We then combine the overall result with linefeed <code>'\n'</code>:</p>
<pre><code>print '\n'.join([ 'columnA=10, columnB=30, columnC=40',
                  'columnA=14, columnB=28, columnC=38',
                  'columnA=13, columnB=23, columnC=45' ])
</code></pre>
<p>Results in:</p>
<pre><code>columnA=10, columnB=30, columnC=40
columnA=14, columnB=28, columnC=38
columnA=13, columnB=23, columnC=45
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not the most efficient way and takes two lines, but you can try this code:</p>
<pre><code>listA = ["columnA","columnB","columnC"]
listB = [["10","30","40"],
         ["14","28","38"],
         ["13","23","45"]]

for item in listB:
    print("%s = %s, %s = %s, %s = %s" % (listA[0], item[0], listA[1], item[1], listA[2], item[2]))
</code></pre>
<p>Try it <a href="https://repl.it/DTxA" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A broad for loop is enough</p>
<pre><code>for i in range (len(listB)):
    print(listA[0]+" = "+listB[i][0]+","+listA[1]+" = "+listB[i][1]+","+listA[2]+" = "+listB[i][2])
    i=+1
</code></pre>
</div>
<span class="comment-copy">You should be able to <code>zip</code> a sublist with <code>listA</code> and then <code>.join</code> and format accordingly.</span>
<span class="comment-copy">I tried to do with two nested for cycles but with no good results...</span>
<span class="comment-copy">You say you tried that; show what you tried.</span>
<span class="comment-copy">Thanks mate you helped me a lot.</span>
<span class="comment-copy">Though I like the data structure, I'm not sure this answers the question (with the desired printed format), unless the question is not worded clearly.</span>
<span class="comment-copy">This answer turned up in the low quality review queue, presumably because you don't provide any explanation of the code. If this code answers the question, consider adding adding some text explaining the code in your answer. This way, you are far more likely to get more upvotes â€” and help the questioner learn something new.</span>
<span class="comment-copy">thanks for your advice @lmo</span>
