<div class="post-text" itemprop="text">
<p>I am currently developing a Python application which I continually performance test, simply by recording the runtime of various parts.</p>
<p>A lot of the code is related only to the testing environment and would not exist in the real world application, I have these separated into functions and at the moment I comment out these calls when testing. This requires me to remember which calls refer to test only components (they are quite interleaved so I cannot group the functionality). </p>
<p>I was wondering if there was a better solution to this, the only idea I have had so far is creation of a 'mode' boolean and insertion of If statements, though this feels needlessly messy. I was hoping there might be some more standardised testing method that I am naive of.</p>
<p>I am new to python so I may have overlooked some simple solutions. 
Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>There are libraries for testing like those in the <a href="https://docs.python.org/3/library/development.html" rel="nofollow">development-section</a> of the standard library. If you did not use such tools yet, you should start to do so - they help a lot with testing. (especially <code>unittest</code>).</p>
<p>Normally Python runs programs in debug mode with <a href="https://docs.python.org/3/library/constants.html#__debug__" rel="nofollow"><code>__debug__</code></a> set to <code>True</code> (see <a href="https://docs.python.org/3/reference/simple_stmts.html#assert" rel="nofollow">docs on <code>assert</code></a>) - you can switch off debug mode by setting the command-line switches <code>-O</code> or <code>-OO</code> for optimization (see <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-O" rel="nofollow">docs</a>).</p>
<p>There is something about using specifically assertions in the <a href="https://wiki.python.org/moin/UsingAssertionsEffectively" rel="nofollow">Python Wiki</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'd say if you're commenting out several parts of your code when switching between debug&amp;release mode I think <strong>you're doing wrong</strong>. Take a look for example to the <a href="https://docs.python.org/2/library/logging.html" rel="nofollow">logging library</a>, as you can see, with that library you can specify the logging level you want to use only by changing a single parameter.</p>
<p>Try to avoid commenting specific parts of your debug code by having one or more variables which controls the mode (debug, release, ...) your script will run. You could also use some <a href="https://docs.python.org/3/library/constants.html#__debug__" rel="nofollow">builtin ones</a> python already provides</p>
</div>
<span class="comment-copy">Could you provide some general code sample of the parts that you would like to isolate? One of the options that comes on the top of my mind is to move those parts in separate functions, that are decorated with some custom decorator, e.g. <code>@testing_environment_only</code>. But it seems to me that those parts of the code, if it is testing code, doesn't make sense to reside together with production code - bad architecture. Make sure to elaborate a bit more.</span>
<span class="comment-copy">All of the testing code does currently reside in separate functions. I should have said that I am new to Python so even simple suggestions are welcome, I was not aware of the use of decorators so I will look into this.</span>
<span class="comment-copy">The right way to handle it is to have tests in a separate package. If needed, those tests can mock the other code which you are testing. If you provide some code sample, you can probably get more valuable feedback.</span>
