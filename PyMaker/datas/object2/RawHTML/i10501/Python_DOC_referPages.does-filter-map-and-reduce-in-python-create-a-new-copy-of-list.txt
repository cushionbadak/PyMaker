<div class="post-text" itemprop="text">
<p>Using <code>Python 2.7</code>. Let us say we have <code>list_of_nums = [1,2,2,3,4,5]</code>
and we want to remove all occurrences of 2. We can achieve it by
<code>list_of_nums[:] = filter(lambda x: x! = 2, list_of_nums)</code> or  <code>list_of_nums = filter(lambda x: x! = 2, list_of_nums)</code>.</p>
<p>Is this an "in-place" substitution? Also, are we creating a copy of list when we use filter?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list_of_nums[:] = filter(lambda x: x != 2, list_of_nums)
</code></pre>
<p>and</p>
<pre><code>list_of_nums = filter(lambda x: x != 2, list_of_nums)
</code></pre>
<p>are two different operations that end up with <em>mostly</em> the same result.</p>
<p>In both cases,</p>
<pre><code>filter(lambda x: x != 2, list_of_nums)
</code></pre>
<p>returns either a new list containing items that match the filter (in Python 2), or an iterable over <code>list_of_nums</code> that returns the same items (in Python 3).</p>
<p>The first case,</p>
<pre><code>list_of_nums[:] = filter(lambda x: x != 2, list_of_nums)
</code></pre>
<p>then deletes all items from <code>list_of_nums</code> and replaces them with the items from the new list or iterable.</p>
<p>The second case,</p>
<pre><code>list_of_nums = filter(lambda x: x != 2, list_of_nums)
</code></pre>
<p>assigns the new list to the variable <code>list_of_nums</code>.</p>
<p>The time when this makes a difference is this:</p>
<pre><code>def processItemsNotTwo_case1(list_of_nums):
    list_of_nums[:] = filter(lambda x: x != 2, list_of_nums)
    # do stuff here
    # return something

def processItemsNotTwo_case2(list_of_nums):
    list_of_nums = filter(lambda x: x != 2, list_of_nums)
    # do stuff here
    # return something

list1 = [1,2,2,3,4,5]
processItemsNotTwo_case1(list1)
list2 = [1,2,2,3,4,5]
processItemsNotTwo_case2(list2)
</code></pre>
<p>With this code, <code>list1</code> ends up with the new contents <code>[1,3,4,5]</code>, whereas <code>list2</code> ends up with the original contents <code>[1,2,2,3,4,5]</code>.</p>
</div>
<span class="comment-copy">Try it, use <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer"><code>is</code></a> to see if they are the same <b>thing</b>.  If you try to assign the return value do you get <code>None</code>?  Or use <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code></a> before and after, is it the same?</span>
<span class="comment-copy">@wwii Using <code>id</code> may even convince him more.</span>
<span class="comment-copy">From the docs: <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer"><i>Construct a <b>list</b> from those elements of iterable for which function returns true...</i></a></span>
<span class="comment-copy">"Also, are we creating a copy of list when we use filter?" No, it just iterates over the list (or other iterable) arg. FWIW, in Python 3, <code>filter</code> and <code>map</code> return iterators, not lists.</span>
<span class="comment-copy">Note that the in-place version with <code>list_of_nums[:]</code> is slower than re-binding the new list to the <code>list_of_nums</code> name.</span>
<span class="comment-copy">@Aprillion thanks for the edit.</span>
