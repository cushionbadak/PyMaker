<div class="post-text" itemprop="text">
<p>I'm trying to write code for a modulus 11 but I'm failing to make it more python-like.</p>
<p>As of now I'm using a weight and increasing it, checking when it reaches a number and then set it to it's original value.</p>
<p>Let's say I have a list of numbers
<code>1..20</code> and I'd like to multiply them by <code>2,3,4,5,6,7,8,9,2,3,4,etc</code> so that each index would be multiplied by an increasing number.</p>
<p>1x2, 2x3, 3x4, 4x5, 5x6, 6x7, 7x8, 8x9, 9x2, 10x3, etc..</p>
<p>Is there an elegant way to do this?</p>
<p>Unelegant way:</p>
<pre><code>def mod11(list, max_weight=9):
    sum = 0
    weight = 2

    for item in reversed(list):
        sum += item * weight
        weight += 1

        if weight &gt; max_weight:
            weight = 2

    mod = 11 - sum % 11

    if mod &gt; 9:
        return 0

    else:
        return mod
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the current index to determine the multiplier:</p>
<pre><code>&gt;&gt;&gt; [(index % 8 + 2) * item for index, item in enumerate(range(1, 21))]
[2, 6, 12, 20, 30, 42, 56, 72, 18, 30, 44, 60, 78, 98, 120, 144, 34, 54, 76, 100]
#^        resets               ^            resets               ^
</code></pre>
<p>Or, you can <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow">"cycle"</a> the sequence of multipliers and zip with the input sequence:</p>
<pre><code>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; [x * y for x, y in zip(range(1, 21), cycle(range(2, 10)))]
[2, 6, 12, 20, 30, 42, 56, 72, 18, 30, 44, 60, 78, 98, 120, 144, 34, 54, 76, 100]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I am not quite sure if I understand your question correctly, since you talk about modulus 11, but also seem to use numbers from 2 up to and including 9.</p>
<p>But let's first start with writing the 1..20 as a list, that would be possible as follows:</p>
<pre><code>list(range(1,21))    (This is if you want to include the 20)
</code></pre>
<p>Next, to turn some integer into a number between 2 and 9 you could do the following:</p>
<pre><code>x -&gt; x % 8 + 2
</code></pre>
<p>Combining these two, you could make a list comprehension:</p>
<pre><code>[((x-1) % 8 + 2) * x for x in xrange(1,21)]
</code></pre>
<p>(the -1 is added to start the first number from 2 instead of from 3)</p>
</div>
<div class="post-text" itemprop="text">
<p>A lot of good answers here already, and in case you would like to use <code>numpy</code> (usually good for this sort of thing), here's an alternative:</p>
<pre><code>In [1]: import numpy as np

In [2]: a = np.arange(1, 21)  # like range in numpy array

In [3]: a - 1  #Â calculation performs per element wise... so will a * n
Out[3]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19])


In [4]: a * ((a - 1) % 8 + 2)  # directly translate the calculation
Out[4]:
array([  2,   6,  12,  20,  30,  42,  56,  72,  18,  30,  44,  60,  78,
        98, 120, 144,  34,  54,  76, 100])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to worry about resetting the multiplier if you use <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a>:</p>
<pre><code>&gt;&gt;&gt; itertools.cycle(range(2, 10))
2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, ...
</code></pre>
<p>so you can simplify your function like below:</p>
<pre><code>from itertools import cycle

def mod11(lst, max_weight=9):
    multipliers = cycle(range(2, max_weight + 1))
    zipped = zip(lst, multipliers))
    summed = sum(a * b for a, b in zipped)
    mod = 11 - (summed % 11)
    return (0 if mod &gt; 9 else mod)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.starmap" rel="nofollow">starmap</a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow">cycle</a> from itertools.</p>
<p>First create a list of tuples to multiply together:</p>
<pre><code>&gt;&gt;&gt; from itertools import starmap, cycle
&gt;&gt;&gt; li=zip(range(1,21), cycle(range(2,10)))
&gt;&gt;&gt; li
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 2), (10, 3), (11, 4), (12, 5), (13, 6), (14, 7), (15, 8), (16, 9), (17, 2), (18, 3), (19, 4), (20, 5)]
</code></pre>
<p>Then use <code>starmap</code> and <code>mul</code> (from operator) to multiply:</p>
<pre><code>&gt;&gt;&gt; from operator import mul 
&gt;&gt;&gt; list(starmap(mul, li))
[2, 6, 12, 20, 30, 42, 56, 72, 18, 30, 44, 60, 78, 98, 120, 144, 34, 54, 76, 100]
</code></pre>
<p>If you wanted a straight comprehension, you can do:</p>
<pre><code>&gt;&gt;&gt; [x*y for x, y in ((e+1, (e%8)+2) for e in range(20))]
[2, 6, 12, 20, 30, 42, 56, 72, 18, 30, 44, 60, 78, 98, 120, 144, 34, 54, 76, 100]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>maybe oneliner : </p>
<pre><code>s = map(lambda x : x*(x+1),list(range(1,20)))
</code></pre>
<p>basically <strong>map</strong> is core function used to make same operation on every element of table. first parameter is function which will be applied to every element. And If You want to remember generate another values used to multiplication maybe try some <strong>generator</strong></p>
</div>
<span class="comment-copy">So what's your "inelegant" way? You need to show what you have tried so far and what's not working.</span>
<span class="comment-copy">I think the most elegant way would be to use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>list comprehensions</code></a>.</span>
<span class="comment-copy">@ozgur, yes I'm thinking about it, but I'm not sure on how to reset the multiplier</span>
<span class="comment-copy">@Onilol you might want to check <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>. Hint: <i>cycle(range(2, max_weight + 1))</i></span>
<span class="comment-copy">How did you come up with that modulus calc? That's so clever !</span>
<span class="comment-copy">Even shorter: <code>[x * (x + 1) for x in range(1, 20)]</code></span>
<span class="comment-copy">I need the multiplier to reset after a certain number.</span>
<span class="comment-copy">@Onilol so use generator to get multipipler</span>
