<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1419046/normal-arguments-vs-keyword-arguments">Normal arguments vs. keyword arguments</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I'm used to a firm distinction between identifiers (variable names) and strings in programming languages.</p>
<p>Yet Python has some malleability between the two. For example in the code</p>
<pre><code>import networkx as nx
G = nx.Graph()
G.add_edge(1, 2, food='eggs')
for node1, node2, data in G.edges(data=True):
    print(data['food'])
</code></pre>
<p>we use <code>food</code> as an identifier on line 3 and then as the string <code>'food'</code> when we retrieve the attribute on line 5.</p>
<p>I'd like to better understand what is happening. What is the feature in a programming language generally and in Python specifically that makes this malleability possible?</p>
<p>(Please note that NetworkX is incidental to the question, which is why I'm not listing it in the keywords.)</p>
<p><strong>Clarification why this question is not asking for an explanation of—and is all but superficially related to <a href="https://stackoverflow.com/questions/1419046/python-normal-arguments-vs-keyword-arguments">keyword arguments</a>:</strong></p>
<p>Sometimes what is happening is perfectly clear. For example if we <a href="https://stackoverflow.com/a/1419107/704972">write</a> the code</p>
<pre><code>def foo(bar, baz):
    pass

foo(1, 2)
foo(baz=2, bar=1)
</code></pre>
<p>(using keyword arguments in whichever order we like), the Python interpreter would have seen the names (not the strings) <code>bar</code> and <code>baz</code> and is henceforth expecting names (not strings) <code>bar</code> and <code>baz</code>, in any order.</p>
<p>But in other contexts this malleability is truly puzzling. For example in the <a href="https://stackoverflow.com/a/1419160/704972">following</a> code explaining keyword arguments</p>
<pre><code>def my_function(**kwargs):
    print str(kwargs)

my_function(a=12, b="abc")

{'a': 12, 'b': 'abc'}
</code></pre>
<p>we introduce keyword arguments in the function call, only, lo and behold, to find that they have become strings.</p>
<p>From an <a href="https://stackoverflow.com/a/39253840/704972">answer</a> to the present question</p>
<pre><code>&gt;&gt;&gt; d = dict(food='eggs')
&gt;&gt;&gt; d['food']
'eggs'
</code></pre>
<p>it becomes clear that in Python there is <em>zero distinction</em> between <code>d1</code> and <code>d2</code> whether we write:</p>
<pre><code>d1 = {'food':'eggs'}
</code></pre>
<p>or</p>
<pre><code>d2 = dict(food='eggs')
</code></pre>
<p>What happens with <code>d1</code> makes perfect sense. The type of <code>'food'</code> is a string.</p>
<p>But, again, <code>d2</code> is obscure. Although we end up with exactly the same outcome, the language has somehow molded the identifier/name that we used (<code>food</code>) into a string.</p>
<p>What is the feature of programming languages generally and Python specifically that permits a language to mold a name into a string? Now that a pattern is emerging, might it be the case that Python uses some mechanism for switching names into strings, but there are no instances of switching strings to identifiers?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simpler example of this behaviour is a dictionary:</p>
<pre><code>&gt;&gt;&gt; d = dict(food='eggs')
&gt;&gt;&gt; d['food']
'eggs'
</code></pre>
<p>Those <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow">keyword arguments</a> are just a syntactic sugar that allows passing arbitrary arguments, so that they can be accessed by name in the called function, like:</p>
<pre><code>def func(**kwargs):
    return kwargs['food']

&gt;&gt;&gt; func(food='eggs')
'eggs'
</code></pre>
</div>
<span class="comment-copy">Its not really a string, but a key.</span>
<span class="comment-copy">The question asks what language feature makes it possible to use <code>add_edge(food='eggs')</code> and later retrieve the information using a string key in <code>data['food']</code>. The answer is <i>keyword arguments</i>. <code>food</code> in the call to <code>add_edge</code> is a keyword argument, so the function retrieves it inside a dictionary which has the string <code>food</code> as a key. So it can do whatever on the implementation side to make it available as a dictionary in <code>edges()</code>. That has nothing to do with this network library or whatever, it’s just keyword arguments, making this a fine duplicate of the linked question.</span>
<span class="comment-copy">So we un-dupe-hammered this question which was duped to a question about keyword arguments just so three users could provide an answer explaining keyword arguments?</span>
<span class="comment-copy"><i>“But, again, d2 is obscure.”</i> – Not really. When passing keyword arguments to a function that takes <code>**kwargs</code>, all extraneous arguments are placed into a dictionary <code>kwargs</code>. And argument names are automatically the keys of said dictionary. <code>food</code> in <code>dict(food='eggs')</code> never was an identifier (like a variable name is), it’s just the name of the argument. And argument names are strings.</span>
<span class="comment-copy">See also: <a href="http://stackoverflow.com/q/1769403/216074">Understanding kwargs in Python</a></span>
