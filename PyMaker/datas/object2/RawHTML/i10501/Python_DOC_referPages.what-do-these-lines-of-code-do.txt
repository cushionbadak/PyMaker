<div class="post-text" itemprop="text">
<p>I am working with <code>numpy</code>. I encountered this line of code. </p>
<pre><code>a = (1.,80.,5.)
</code></pre>
<p>What does this mean? At some other line, I found</p>
<pre><code>aList = np.arange(a[0], a[1]+a[2], a[2])
</code></pre>
<p><strong>Note:</strong> <code>np</code> is namespace assigned from <code>numpy</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a</code> is a <em>tuple</em> of floats. A tuple is a kind of structure that is kinda like a <em>list</em>, but is <em>immutable</em> (i.e. you cannot modify any of its components once it has been created). But, like a list it can be indexed. </p>
<p>In theory, some tuples have special names, for example a tuple of 2 is called a pair, a tuple of 3 is called a triplet etc (people don't necessarily call them that, but it helps a bit more to understand what a tuple is about).
Because it's immutable, conceptually it is thought of more as a unique object, rather than as a collection of ones; for this reason it can also be validly used as a key to a dictionary (as opposed to lists which cannot).</p>
<p>To create a tuple, you create a comma-separated sequence of objects inside parentheses, i.e. <code>()</code> (as opposed to brackets, i.e. <code>[]</code> that you would to create a list).</p>
<p>As for floats, the float <code>3.0</code> can also be written <code>3.</code> for short.</p>
<p>The <code>numpy.arange</code> function then creates a range by calling it using the components of the tuple as arguments. In your particular case, it will create a range of numbers from 1 to 80+5, at increments of 5.</p>
<p>A very cool use of tuples is that they can be expanded into a sequence of arguments to a function. e.g. if you had a tuple <code>a = (1.,10.,2.)</code>, and you wanted to call <code>numpy.arange(a[0], a[1], a[2])</code>, you could just do <code>numpy.arange(*a)</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the first code segment you are creating a tuple with 3 numbers 1, 80 and 5 in this. </p>
<pre><code>a=(1.,80.,5.)
1.0, 80.0, 5.0)
</code></pre>
<p>In the second code segment you are arranging a list with evenly spaced values from 1 to 81 (because you are adding a<a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="nofollow noreferrer">1</a> and a<a href="https://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples">2</a>) with intevals of 5. </p>
<pre><code>np.arange(a[0], a[1]+a[2], a[2]) 
array([  1.,   6.,  11.,  16.,  21.,  26.,  31.,  36.,  41.,  46.,  51.,
        56.,  61.,  66.,  71.,  76.,  81.])
</code></pre>
<p>From the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="nofollow noreferrer">numpy help</a></p>
<blockquote>
<p><strong>numpy.arange</strong> ([start, ]stop, [step, ]dtype=None)</p>
<p>Return evenly spaced values within a given interval.</p>
<p>Values are generated within the half-open interval [start, stop) (in other words, the interval including start but excluding stop). For integer arguments the function is equivalent to the Python built-in range function, but returns an ndarray rather than a list.</p>
</blockquote>
<p><strong>EDIT</strong> As a.smiet pointed out the code creates a tuple and not a list. There are differences between the two as pointed out <a href="https://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>First line is just a tuple.</p>
<p>Second line is using the <code>np.arange</code> method which returns venly spaced values within a given interval:</p>
<p><code>np.arange(start, stop, step)</code></p>
<p>The parameters you have are using the tuple, <code>a</code>.
Where <code>a[0] = 1</code> and <code>a[1] = 80</code> so on...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = (1.,80.,5.)
</code></pre>
<p>Creates a tuple of 3 floats (1.0, 80.0 and 5.0).</p>
<pre><code>aList = np.arange(a[0], a[1]+a[2], a[2])
</code></pre>
<p>Created this list:</p>
<pre><code>[  1.   6.  11.  16.  21.  26.  31.  36.  41.  46.  51.  56.  61.  66.  71. 76.  81.]
</code></pre>
<p>Which, according to <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="nofollow">http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html</a> means thats 1.0 is a start, 85.0 (which is 80+5) is an end and 5.0 is a step (parameters of the function) for creating spaced values.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the first one, it is a tuple of 3 items:</p>
<pre><code>&gt;&gt;&gt; a = (1.,80.,5.)
&gt;&gt;&gt; a
(1.0, 80.0, 5.0)
</code></pre>
<p>For the second one, it generates a list (start: 1.0, end: 80.0 + 5.0, step: 5.0):</p>
<pre><code>&gt;&gt;&gt; a_list = numpy.arange(a[0], a[1]+a[2], a[2])
&gt;&gt;&gt; a_list
array([  1.,   6.,  11.,  16.,  21.,  26.,  31.,  36.,  41.,  46.,  51.,
        56.,  61.,  66.,  71.,  76.,  81.])
</code></pre>
</div>
<span class="comment-copy">Have a read of <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a> this will help to understand the basics of lists, dictionaries, tuples, and sets</span>
<span class="comment-copy">Actually the first segment creates a tuple, not a list. And the second line creates evenly spaced values from 1 to 81 and not 80...</span>
<span class="comment-copy">Great point! Will edit for clarification.</span>
