<div class="post-text" itemprop="text">
<p>Under Powershell v5, Windows 8.1, Python 3. Why these fails and how to fix?</p>
<pre class="lang-bsh prettyprint-override"><code>[system.console]::InputEncoding = [System.Text.Encoding]::UTF8; 
[system.console]::OutputEncoding = [System.Text.Encoding]::UTF8; 
chcp; 
"import sys
print(sys.stdout.encoding)
print(sys.stdin.encoding)
sys.stdout.write(sys.stdin.readline())
" | 
sc test.py -Encoding utf8; 
[char]0x0422+[char]0x0415+[char]0x0421+[char]0x0422+"`n" | py -3 test.py
</code></pre>
<p>prints:</p>
<pre><code>Active code page: 65001
cp65001
cp1251
п»ї????
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are piping data into Python; at that point Python's <code>stdin</code> is no longer attached to a TTY (your console) and won't guess at what the encoding might be. Instead, the default system locale is used; on your system that's cp1251 (the Windows Latin-1-based codepage).</p>
<p>Set the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING"><code>PYTHONIOENCODING</code> environment variable</a> to override:</p>
<blockquote>
<p><code>PYTHONIOENCODING</code><br/>
  If this is set before running the interpreter, it overrides the encoding used for stdin/stdout/stderr, in the syntax <code>encodingname:errorhandler</code>. Both the <code>encodingname</code> and the <code>:errorhandler</code> parts are optional and have the same meaning as in <code>str.encode()</code>.</p>
</blockquote>
<p>PowerShell doesn't appear to support per-command-line environment variables the way UNIX shells do; the easiest is to just set the variable first:</p>
<pre><code>Set-Item Env:PYTHONIOENCODING "UTF-8"
</code></pre>
<p>or even</p>
<pre><code>Set-Item Env:PYTHONIOENCODING "cp65001"
</code></pre>
<p>as the Windows UTF-8 codepage is apparently not <em>quite</em> UTF-8 really, depending on the Windows version and on wether or not pipe redirection is used.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not embed CPython in powershell?! CPython is so easy to embed, and powershell is very good REPL to <a href="https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/creating-.net-and-com-objects--new-object-" rel="nofollow noreferrer">play with .NET and COM objects</a>. Here is a simple introduction to using <a href="https://github.com/pythonnet/pythonnet" rel="nofollow noreferrer">pythonnet</a> from PowerShell. Note how encoding is automatically propagated from powershell to python. </p>
<pre><code>Windows PowerShell
Copyright (C) 2015 Microsoft Corporation. All rights reserved.

PS C:\Users\denfromufa&gt; [system.console]::InputEncoding = [System.Text.Encoding]::UTF8;
PS C:\Users\denfromufa&gt; [system.console]::OutputEncoding = [System.Text.Encoding]::UTF8;
PS C:\Users\denfromufa&gt; [Reflection.Assembly]::LoadFile("C:\Python\Miniconda3_64b\Lib\site-packages\Python.Runtime.dll")


GAC    Version        Location
---    -------        --------
False  v4.0.30319     C:\Python\Miniconda3_64b\Lib\site-packages\Python.Runtime.dll


PS C:\Users\denfromufa&gt; $gil = [Python.Runtime.Py]::GIL()
PS C:\Users\denfromufa&gt; $sys=[Python.Runtime.Py]::Import("sys")
PS C:\Users\denfromufa&gt; $sys.stdin.encoding.ToString()
cp65001
PS C:\Users\denfromufa&gt; $sys.stdout.encoding.ToString()
cp65001
PS C:\Users\denfromufa&gt; $gil.Dispose()
PS C:\Users\denfromufa&gt; [Python.Runtime.PythonEngine]::Shutdown()
PS C:\Users\denfromufa&gt;
</code></pre>
<hr/>
<p>[EDIT]</p>
<p>Here is <code>snek</code> package that was released by one of <code>powershell</code> developers for embedding <code>Python</code> in <code>powershell</code>:</p>
<p><a href="https://github.com/adamdriscoll/snek" rel="nofollow noreferrer">https://github.com/adamdriscoll/snek</a></p>
</div>
<span class="comment-copy">Every program has its own stdin/stdout encoding. There's no global system setting that can override another program's settings, so whatever you set in PowerShell affects only PowerShell. Set your python stdin encoding manually, if possible. I think there should be lots of examples for that.</span>
<span class="comment-copy">@wOxxOm Is there some conventions for Python? It seems to get its stdout encoding from system one. But why not stdin?</span>
<span class="comment-copy">My point is that every program uses its own heuristics and logic, so whatever you set in PowerShell doesn't apply to python's handling of stdin. Well, generally. Python 3 tries to be smart and guess stdin encoding, but you can't <i>rely</i> on that, of course. As I said there should be LOTS of examples how to set stdin encoding in python.</span>
<span class="comment-copy"><code>$OutputEncoding=[System.Text.Encoding]::UTF8</code>?</span>
<span class="comment-copy">Thank you for the answer. Yet it prints then this: "Active code page: 65001  UTF-8 UTF-8 ????"</span>
<span class="comment-copy">@Artyom: could you test with <code>sys.stdout.write(repr(sys.stdin.readline()))</code> please? That way we can see the contents of that line and if this is Python or Powershell getting things muddled.</span>
<span class="comment-copy">Then it is '\ufeff????\n'. Powershell gets it printed correctly actually if not piped in Python. That's breaking my faith in using Python under Powershell ;)</span>
<span class="comment-copy">@Artyom: so Python <i>received</i> those question marks from the pipe. This can't be Python's fault surely. Next test: <code>sys.stdout.write(repr(sys.stdin.buffer.readline()))</code>. Note the <code>buffer</code> there, you'll now get undecoded bytes.</span>
<span class="comment-copy">@Artyom: Also, according to <a href="https://bugs.python.org/issue13216" rel="nofollow noreferrer">issue #13216</a> there are differences between UTF-8 and CP65001 that matter when using redirects, so trying to set the <code>PYTHONIOENCODING</code> to <code>'cp65001'</code> <i>may</i> matter here. Sorry, no windows systems to test this on myself.</span>
<span class="comment-copy">Valuable addition! Still the question not answered (looks like a bug). I wonder if pythonnet will run python scripts which work with encoding correctly. Yes, <code>stdin</code> there got encoding correctly; so looks promising</span>
<span class="comment-copy">Could you post if pythonnet receives and pipes out correctly as in the question?</span>
