<div class="post-text" itemprop="text">
<p>In Python, it's more memory-efficient to use <code>xrange()</code> instead of <code>range</code> when iterating.</p>
<p>The trouble I'm having is that I want to iterate over a large list -- such that I need to use <code>xrange()</code> and after that I want to check an arbitrary element.</p>
<p>With <code>range()</code>, it's easy: <code>x = range(...) + [arbitrary element]</code>.</p>
<p>But with <code>xrange()</code>, there doesn't seem to be a cleaner solution than this:</p>
<pre><code>for i in xrange(...):
    if foo(i):
        ...
if foo(arbitrary element):
        ...
</code></pre>
<p>Any suggestions for cleaner solutions? Is there a way to "append" an arbitrary element to a generator?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="noreferrer"><code>itertools.chain</code></a> lets you make a combined iterator from multiple iterables without concatenating them (so no expensive temporaries):</p>
<pre><code>from itertools import chain

# Must wrap arbitrary element in one-element tuple (or list)
for i in chain(xrange(...), (arbitrary_element,)):
    if foo(i):
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend keeping the <code>arbitrary_element</code> check out of the loop, but if you want to make it part of the loop, you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.chain"><code>itertools.chain</code></a>:</p>
<pre><code>for i in itertools.chain(xrange(...), [arbitrary_element]):
    ...
</code></pre>
</div>
<span class="comment-copy">Can you clarify what kind of iteration you're doing? If you're iterating over a list itself using <code>xrange(len(my_list))</code> you shouldn't be using <code>xrange</code> at all, and can do this using <code>for i, elem in enumerate(my_list)</code> then check the value of i.</span>
<span class="comment-copy">@Two-BitAlchemist I am certainly not iterating over <code>len(my_list)</code>. I don't know why you would assume that. Without loss of generality, let's assume that I am iterating over a range sufficiently large to warrant using <code>xrange()</code> instead of <code>range()</code>, e.g. <code>xrange(99999999)</code>.</span>
<span class="comment-copy">"I don't know why you would assume that." <code>range(len(x))</code> is a very common iteration anti-pattern in Python and appears on StackOverflow questions hundreds of times a day. Just wanted to clarify.</span>
<span class="comment-copy">@Two-BitAlchemist fair enough. Sorry for the aggressive response.</span>
<span class="comment-copy">Wow this is great to know.  itertools strikes again!</span>
<span class="comment-copy">Damn I was late :D This is the true answer.</span>
<span class="comment-copy">I disagree with the recommendation -- duplicating the contents of the loop is surely worse than chaining the ranges together.</span>
<span class="comment-copy">@Hurkyl: You don't have to duplicate the loop body if you make it a function.</span>
<span class="comment-copy">@user2357112: I don't disagree, but that's not what you (appear to have) recommended. (also, factoring the body out would obfuscate the code if it's sufficiently simple)</span>
<span class="comment-copy">Putting it in the loop is plausible in this example given that <code>chain</code> is such a small operation with no extra memory used.</span>
