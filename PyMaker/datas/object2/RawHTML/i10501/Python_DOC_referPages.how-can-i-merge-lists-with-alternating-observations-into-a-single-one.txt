<div class="post-text" itemprop="text">
<p>I have many lists exactly like the ones below, provided by a weather station.</p>
<p>However, how can I "merge" the two daily observations into a single one? (the records available on the first set of daily observations are never present on the second set).</p>
<pre><code>['82294', '04/03/2002', '0000', '', '30.9', '', '', '', '26.1', '93', '1.554', '']
['82294', '04/03/2002', '1200', '24', '', '22', '', '', '', '', '', '']
['82294', '05/03/2002', '0000', '', '29.9', '', '', '', '25.62', '92.5', '0.863333', '']
['82294', '05/03/2002', '1200', '11', '', '23.2', '', '', '', '', '', '']
['82294', '06/03/2002', '0000', '', '31.6', '', '', '', '27.12', '87.5', '1.381333', '']
['82294', '06/03/2002', '1200', '0.2', '', '22.6', '', '', '', '', '', '']
['82294', '07/03/2002', '0000', '', '32.2', '', '', '', '27.6', '90.75', '1.899333', '']
['82294', '07/03/2002', '1200', '2', '', '24.6', '', '', '', '', '', '']
['82294', '08/03/2002', '0000', '', '29.3', '', '', '', '25.66', '95.25', '1.036', '']
['82294', '08/03/2002', '1200', '21', '', '24.4', '', '', '', '', '', '']
['82294', '09/03/2002', '0000', '', '31.5', '', '', '', '26.26', '95.75', '1.899333', '']
['82294', '09/03/2002', '1200', '23', '', '22.8', '', '', '', '', '', '']
['82294', '10/03/2002', '0000', '', '31.7', '', '', '', '26.94', '90.5', '2.072', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://stackoverflow.com/q/5389507/771848">pairwise iteration</a> to group the pairs, then <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> the groups item by item and use <code>or</code> to choose one of the non-empty values:</p>
<pre><code>[[x or y for x, y in zip(item1, item2)] 
 for item1, item2 in zip(data[0::2], data[1::2])]
</code></pre>
<p>where <code>data</code> is your input list of lists.</p>
<p>Produces:</p>
<pre><code>[
    ['82294', '04/03/2002', '0000', '24', '30.9', '22', '', '', '26.1', '93', '1.554', ''], 
    ['82294', '05/03/2002', '0000', '11', '29.9', '23.2', '', '', '25.62', '92.5', '0.863333', ''], 
    ['82294', '06/03/2002', '0000', '0.2', '31.6', '22.6', '', '', '27.12', '87.5', '1.381333', ''], 
    ['82294', '07/03/2002', '0000', '2', '32.2', '24.6', '', '', '27.6', '90.75', '1.899333', ''], 
    ['82294', '08/03/2002', '0000', '21', '29.3', '24.4', '', '', '25.66', '95.25', '1.036', ''], 
    ['82294', '09/03/2002', '0000', '23', '31.5', '22.8', '', '', '26.26', '95.75', '1.899333', '']
]
</code></pre>
<p><sub>You may additionally think of merging <code>0000</code> and <code>1200</code> in a better way cause now <code>0000</code> would be chosen.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="http://pandas.pydata.org/" rel="nofollow"><code>pandas</code></a> and its <a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html" rel="nofollow"><code>groupby()</code></a> + <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html" rel="nofollow"><code>apply()</code></a>:</p>
<pre><code>import pandas as pd

df = pd.DataFrame(data, columns=['id', 'date', 'time', 'value1', 'value2', 'value3', 'value4', 'value5', 'value6', 'value7', 'value8', 'value9'])
df = df.groupby('date').apply(lambda x: x.max())

print(df.values.tolist())
</code></pre>
<p>Prints:</p>
<pre><code>[
    ['82294', '04/03/2002', '1200', '24', '30.9', '22', '', '', '26.1', '93', '1.554', ''], 
    ['82294', '05/03/2002', '1200', '11', '29.9', '23.2', '', '', '25.62', '92.5', '0.863333', ''], 
    ['82294', '06/03/2002', '1200', '0.2', '31.6', '22.6', '', '', '27.12', '87.5', '1.381333', ''], 
    ['82294', '07/03/2002', '1200', '2', '32.2', '24.6', '', '', '27.6', '90.75', '1.899333', ''], 
    ['82294', '08/03/2002', '1200', '21', '29.3', '24.4', '', '', '25.66', '95.25', '1.036', ''], 
    ['82294', '09/03/2002', '1200', '23', '31.5', '22.8', '', '', '26.26', '95.75', '1.899333', ''], 
    ['82294', '10/03/2002', '0000', '', '31.7', '', '', '', '26.94', '90.5', '2.072', '']
]
</code></pre>
<p>Here, <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.max.html" rel="nofollow"><code>Series.max()</code></a> works for us to merge the grouped items - maximum of an empty string and a non-empty string would always be a non-empty string. I though feel there should be a better (more appropriate, so to say) merging function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe something like that:</p>
<pre><code>list_1=['82294', '04/03/2002', '0000', '', '30.9', '', '', '', '26.1', '93', '1.554', '']
list_2=['82294', '04/03/2002', '1200', '24', '', '22', '', '', '', '', '', '']
merged_list= list(set(list_1+list_2))
</code></pre>
<p><strong>Update</strong></p>
<pre><code>merged_list = list([x for x in list_1 if x ])
merged_list.extend(x for x in list_2 if x)
</code></pre>
</div>
<span class="comment-copy">How would you define "merge" in this case? An example would be helpful indeed.</span>
<span class="comment-copy">There are infinite ways of merging these lists. You should provide an outcome</span>
<span class="comment-copy">This would lose data; it ignores the ordering and legitimate duplicates during the merge.</span>
<span class="comment-copy">@chepner Agree about the latter but no one asked about the former.</span>
<span class="comment-copy">The ordering is implied by the fact that paired measurements are never both non-empty.</span>
