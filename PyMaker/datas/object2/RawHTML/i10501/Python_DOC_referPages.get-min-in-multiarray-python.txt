<div class="post-text" itemprop="text">
<p>I have a multiarray with this structure in python:</p>
<pre><code>[[0, 0, 2000, 0.2, 25, 0.39784217, 0.40575236], [0, 0, 2000, 0.2, 50,
  0.31941691, 0.38137865], [0, 0, 2000, 0.2, 75, 0.2767137, 0.41646746], ...
</code></pre>
<p>And I need to get whats array contain with the minimun in the six and seven field</p>
<p>For example in the three array above <code>[0, 0, 2000, 0.2, 75, 0.2767137, 0.41646746]</code> contain the minimun in the six field, and <code>[0, 0, 2000, 0.2, 50, 0.31941691, 0.38137865]</code> contain the minimun in the seven field</p>
<p>Thank you very much!</p>
<p>Regard, Andres.</p>
</div>
<div class="post-text" itemprop="text">
<p>That will do (using <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min()</code></a> with the <code>key</code> argument):</p>
<pre><code>#Suppose a is the multiarray
&gt;&gt;&gt; min(a, key=lambda x: x[5])                # &lt;- x[5] is the 6th field 
[0, 0, 2000, 0.2, 75, 0.2767137, 0.41646746]
&gt;&gt;&gt; min(a, key=lambda x: x[6])                # &lt;- x[6] is the 7th field
[0, 0, 2000, 0.2, 50, 0.31941691, 0.38137865]
</code></pre>
<p>(Next time please clarify your question and provide a <a href="https://stackoverflow.com/help/mcve">mcve</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a better way to use numpy that doesn't involve a for loop:</p>
<pre><code>data = np.array([
    [0, 0, 2000, 0.2, 25, 0.39784217, 0.40575236],
    [0, 0, 2000, 0.2, 50, 0.31941691, 0.38137865],
    [0, 0, 2000, 0.2, 75, 0.2767137, 0.41646746],
    ...
])
has_6_min = data[:,5].argmin()
has_7_min = data[:,6].argmin()
print(data[has_6_min])
print(data[has_7_min])
</code></pre>
<p>You might want to look into using numpy's structured or record arrays here, so that you can give meaningful names to the 6th and 7th field. <code>pandas</code> may also be relevant to your problem.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>array = [[0, 0, 2000, 0.2, 25, 0.39784217, 0.40575236], 
     [0, 0, 2000, 0.2, 50, 0.31941691, 0.38137865], 
     [0, 0, 2000, 0.2, 75, 0.2767137, 0.41646746]
     ]

min_fields = []

for i in range(len(array[0])):
    field_col = [row[i] for row in array]
    min_row = field_col.index(min(field_col))
    min_fields.append([i, min_row])
</code></pre>
<p>This will loop over every column (assuming all rows have equal length). 
It will then generate a new array which is the column of interest (the ith column).
It will then find the index of the lowest value in that array, which is the row that contains the value. Finally it will append the results to the predefined result array.
The result looks like this:</p>
<pre><code>[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 2], [6, 1]]
</code></pre>
<p>In each subarray, the first element represents the column and the second element represents the row that contains the lowest value of that column. In case of equal lowest values, it will pick the row with the lowest index.</p>
<p>If you just want to get this information from 1 row:</p>
<pre><code>col_index = 6
col = [row[col_index] for row in array]
min_row = col.index(min(col))
</code></pre>
<p>Here min_row is the row that contains the lowest value of column <em>col_index</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here you go, if you don't mind using numpy.</p>
<pre><code>import numpy as np

def custom_get_min(multiarray, field):
    idx = np.argmin([item[field] for item in multiarray])
    return multiarray[idx]

min6 = custom_get_min(multiarray, 5)  # 5 is the 6th field
min7 = custom_get_min(multiarray, 6)  # 6 is the 7th field
</code></pre>
<p>As suggested in the comments, this solution isn't very performant.
Calling <code>multiarray[:, field].argmin()</code> is about two orders of magnitude faster.</p>
<pre><code>import time
a = np.random.rand(300, 300)

# List comprehension
start = time.time()
for i in range(1000):
    np.argmin([item[200] for item in a])
end = time.time()
print(end - start)

# Numpy argmin
start = time.time()
for i in range(1000):
    a[a[:, 200].argmin()]
end = time.time()
print(end - start)

# Built-in min
b = a.tolist()
start = time.time()
for i in range(1000):
    min(b, key=lambda x: x[200])
end = time.time()
print(end - start)

# Results
0.147596120834
0.00218319892883
0.0637719631195
</code></pre>
</div>
<span class="comment-copy">Could you please provide actual code instead of copying arrays? And could you specify what you mean with "six and seven field"?</span>
<span class="comment-copy"><code>operator.itemgetter(5)</code> can be used in place of <code>lambda x: x[5]</code> here. I don't think it's clearer that way, but I also thing it's the only sensible use-case for <code>itemgetter</code>!</span>
<span class="comment-copy">@Eric you're right of course, but personally I don't see the benefit of using <code>itemgetter</code> and always forgot the right name of it :(</span>
<span class="comment-copy">would you mind pointing out why this is so much faster? Don't you have to go through all elements in the list anyway, i.e., O(n)?</span>
<span class="comment-copy">The complexity is probably the same, but I think there's a significant overhead to calling <code>iter</code> and <code>next</code> repeatedly in the list comprehension. Are you saying that you profiled it and it is much faster, or challenging the presumed claim that it is faster?</span>
<span class="comment-copy">Why is this getting downvoted?</span>
<span class="comment-copy">Not my downvote, but a numpy solution that incurs an O(N) list comprehension is not ideal</span>
<span class="comment-copy">You are right. Thx</span>
<span class="comment-copy">You might find that performance improves if you replace <code>[... for ...]</code> with <code>list(... for ...)</code>. Or even put your entire program in a function. I don't recall if this is true in python 3, but list comprehensions leak to the enclosing scope, and globals are slower to read than locals</span>
