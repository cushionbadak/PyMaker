<div class="post-text" itemprop="text">
<p>For logging, I would like each function to log its own name at the start and end of the function.</p>
<pre><code>def my_function():
    print("Enter my_function")
    # ...
    print("Leave my_function")
</code></pre>
<p>If I change the name of the function, I have to update these print messages as well. I am looking for a way to automate this.</p>
<pre><code>def my_decorator(func):
    print("Enter ", func.__name__)
    func()
    print("Leave ", func.__name__)

def my_function():
    # do the work
    pass

# main:
my_decorator(my_function)
</code></pre>
<p>Is this possible in a simple way, maybe using decorators? How would this look like if my_function had parameters?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are right, using a decorator is a perfect way to implement such behavior.</p>
<p>What you need to know is how a decorator works: it simply takes a function as an argument, and returns another function. This other returned function is intended to wrap your argument function.</p>
<pre><code>def log_in_out(func):

    def decorated_func(*args, **kwargs):
        print("Enter ", func.__name__)
        result = func(*args, **kwargs)
        print("Leave ", func.__name__)
        return result

    return decorated_func

@log_in_out
def my_function():
    print("Inside my_function")
    return 42


val = my_function()

print(val)

# Output:
# Enter  my_function
# Inside my_function
# Leave  my_function
# 42
</code></pre>
<p>Also, note that the answer of @≈ÅukaszRogalski using <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a> is usefull for preserving the function docstring.</p>
<p>Finally, a good idea from @MartinBonner, is that you can also use it to log the errors in your function:</p>
<pre><code>def log_in_out(func):

    def decorated_func(*args, **kwargs):
        name = func.__name__
        print("Enter", name)
        try:
            result = func(*args, **kwargs)
            print("Leave", name)
        except:
            print("Error in", name)
            raise
        return result

    return decorated_func
</code></pre>
<p>Note that I re-throw the error because I think the control flow should be managed from the outside of the function.</p>
<p>For more advanced logging, you should use <a href="https://docs.python.org/3.5/library/logging.html#logging.Logger.exception" rel="nofollow noreferrer">the built-in module</a> which provides many facilities.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, it's really simple with star args and star kwargs. <code>functools.wraps</code> is used to rewrite any metadata (<code>__name__</code>, <code>__doc__</code> etc.) from input function to wrapper. If function object string representation is too verbose to you, you may use <code>print("Enter", f.__name__)</code> instead.</p>
<pre><code>import functools


def d(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print("Enter", f)
        result = f(*args, **kwargs)
        print("Exit", f)
        return result
    return wrapper


@d
def my_func():
    print("hello")


@d
def my_func2(x):
    print(x)


my_func()
my_func2("world")
</code></pre>
<p>Output:</p>
<pre><code>Enter &lt;function my_func at 0x10ca93158&gt;
hello
Exit &lt;function my_func at 0x10ca93158&gt;
Enter &lt;function my_func2 at 0x10caed950&gt;
world
Exit &lt;function my_func2 at 0x10caed950&gt;
</code></pre>
</div>
<span class="comment-copy">What I don't understand is how you failed to find any of the tutorials on decorators which explain how to do exactly this. It's pretty much the canonical example for decorators.</span>
<span class="comment-copy">You may want to read on context managers in Python (with statements): that's what they're there for. <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">jeffknupp.com/blog/2016/03/07/python-with-context-managers</a></span>
<span class="comment-copy">For the icing on the cake, you could add support for the case where the wrapped function throws an exception.</span>
<span class="comment-copy">@MartinBonner Good point, thanks, added to the answer.</span>
