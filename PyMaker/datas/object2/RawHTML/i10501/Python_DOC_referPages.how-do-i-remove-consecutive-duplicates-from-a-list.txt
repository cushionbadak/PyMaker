<div class="post-text" itemprop="text">
<p>How do I remove consecutive duplicates from a list like this in python?</p>
<pre><code>lst = [1,2,2,4,4,4,4,1,3,3,3,5,5,5,5,5]
</code></pre>
<p>Having a unique list or set wouldn't solve the problem as there are some repeated values like 1,...,1 in the previous list.</p>
<p>I want the result to be like this:</p>
<pre><code>newlst = [1,2,4,1,3,5]
</code></pre>
<p>Would you also please consider the case when I have a list like this 
 <code>[4, 4, 4, 4, 2, 2, 3, 3, 3, 3, 3, 3]</code> 
and I want the result to be <code>[4,2,3,3]</code> 
rather than <code>[4,2,3]</code> .</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby()</a> is your solution.</p>
<pre><code>newlst = [k for k, g in itertools.groupby(lst)]
</code></pre>
<hr/>
<p>If you wish to group and limit the group size by the item's value, meaning 8 4's will be [4,4], and 9 3's will be [3,3,3] here are 2 options that does it:</p>
<pre><code>import itertools

def special_groupby(iterable):
    last_element = 0
    count = 0
    state = False
    def key_func(x):
        nonlocal last_element
        nonlocal count
        nonlocal state
        if last_element != x or x &gt;= count:
            last_element = x
            count = 1
            state = not state
        else:
            count += 1
        return state
    return [next(g) for k, g in itertools.groupby(iterable, key=key_func)]

special_groupby(lst)
</code></pre>
<p>OR</p>
<pre><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

newlst = list(itertools.chain.from_iterable(next(zip(*grouper(g, k))) for k, g in itertools.groupby(lst)))
</code></pre>
<p>Choose whichever you deem appropriate. Both methods are for numbers &gt; 0.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use the <code>itertools</code> method @MaxU suggested, a possible code implementation is:</p>
<pre><code>import itertools as it

lst=[1,2,2,4,4,4,4,1,3,3,3,5,5,5,5,5]

unique_lst = [i[0] for i in it.groupby(lst)]

print(unique_lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ['a', 'a', 'a', 'b', 'b' , 'a', 'f', 'c', 'a','a']
temp_list = []


for item in list1:   
   if len(temp_list) == 0:
      temp_list.append(item)

   elif len(temp_list) &gt; 0:
      if  temp_list[-1] != item:
          temp_list.append(item)

print(temp_list)
</code></pre>
<ol>
<li>Fetch each item from the main list(list1).</li>
<li>If the 'temp_list' is empty add that item.</li>
<li>If not , check whether the last item in the temp_list is
not same as the item we fetched from 'list1'.</li>
<li>if items are different append into temp_list.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You'd probably want something like this.</p>
<pre><code>lst = [1, 1, 2, 2, 2, 2, 3, 3, 4, 1, 2]
prev_value = None
for number in lst[:]: # the : means we're slicing it, making a copy in other words
    if number == prev_value:
        lst.remove(number)
    else:
        prev_value = number
</code></pre>
<p>So, we're going through the list, and if it's the same as the previous number, we remove it from the list, otherwise, we update the previous number. </p>
<p>There may be a more succinct way, but this is the way that looked most apparent to me. </p>
<p>HTH.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>newlist=[]    
prev=lst[0]
newlist.append(prev)
    for each in lst[:1]: #to skip 1st lst[0]
        if(each!=prev):
            newlist.append(each)  
         prev=each             
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>st = ['']
[st.append(a) for a in [1,2,2,4,4,4,4,1,3,3,3,5,5,5,5,5] if a != st[-1]]
print(st[1:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check if the next element always is not equal to item. If so append.</p>
<pre><code>lst = [1,2,2,4,4,4,4,1,3,3,3,5,5,5,5,5]

new_item = lst[0]
new_list = [lst[0]]
for l in lst:
   if new_item != l:
     new_list.append(l)
     new_item = l

print new_list
print lst
</code></pre>
</div>
<span class="comment-copy">What do you mean by collapse?</span>
<span class="comment-copy">look at <code>itertools.groupby</code></span>
<span class="comment-copy">Are you asking for a tool or an implementation? If you wanted to write it yourself, you could iterate through and keep any element that doesn't match the element before it.</span>
<span class="comment-copy"><code>map(operator.itemgetter(0), itertools.groupby(lst))</code></span>
<span class="comment-copy">is sorting order of any importance?</span>
<span class="comment-copy">It works very well, but with a list like this [4, 4, 4, 4, 2, 2, 3, 3, 3, 3, 3, 3], I want the result to be [4,2,3,3] rather than [4,2,3]. can you guide me to solve this problem?</span>
<span class="comment-copy">@ahmedmar Why would there be <code>[4,2,3,3]</code>? <code>[4,2,3]</code> is the correct output in this case. You wanted to remove duplicates, and there is nothing in between.</span>
<span class="comment-copy">Is there a way to specify a limit to itertools to group a list by it . i.e. I want every 3,3,3 to be 3 and every 4,4,4,4 to be 4 ?</span>
<span class="comment-copy">Yes you helped me a lot with removing duplicates. I just want a more specific solution to my case if possible. Any idea how could I do it ?</span>
<span class="comment-copy">@ahmedmar updated my answer accordingly.</span>
<span class="comment-copy">Probably better to construct new list, as removing items from a list in a for loop can cause problems</span>
<span class="comment-copy">We do. We're iterating over a sliced copy of the list, not the original list. So no danger of falling over ourselves with deleting while we're iterating.</span>
<span class="comment-copy">I missed that.. sorry!</span>
<span class="comment-copy">No worries - it's bitten me before :)</span>
<span class="comment-copy">Even with operation on a copy, this won't work correctly if the duplicated value occurred more than once place in the list. Try it on <code>[3, 2, 3, 3]</code>, for example. The issue is that <code>list.remove(3)</code> does not remove the duplicated <code>3</code> from the end, but rather than lone <code>3</code> from the start. <code>list.remove</code> is also very slow (each removal requires <code>O(N)</code> time).</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.  Code-only answers are discouraged.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.  Code-only answers are discouraged.</span>
