<div class="post-text" itemprop="text">
<p>For example, if you use str() on a dict, you get:</p>
<pre><code>&gt;&gt;&gt; str({'a': 1, 'b': 'as df'})
"{'a': 1, 'b': 'as df'}"
</code></pre>
<p>However, I want the string to be like:</p>
<pre><code>"{'a':1,'b':'as df'}"
</code></pre>
<p>How can I accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could build the compact string representation yourself:</p>
<pre><code>In [9]: '{' + ','.join('{0!r}:{1!r}'.format(*x) for x in dct.items()) + '}'
Out[9]: "{'b':'as df','a':1}"
</code></pre>
<p>It will leave extra spaces inside string representations of nested <code>list</code>s, <code>dict</code>s etc.</p>
<p>A much better idea is to use the <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow"><code>json.dumps</code></a> function with appropriate separators:</p>
<pre><code>In [15]: import json

In [16]: json.dumps(dct, separators=(',', ':'))
Out[16]: '{"b":"as df","a":1}'
</code></pre>
<p>This will work correctly regardless of the inner structure of <code>dct</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two spaces naturally occurring. <code>': '</code> and <code>", "</code>. So I think you can just replace them using <code>replace</code> </p>
<pre><code>str({'a': 1, 'b': 'as df'}).replace(": ", ":").replace(", ", ",")
</code></pre>
<p>Note: To use this solution plz assume, you are not having <code>:</code> or <code>,</code> in any of the values or keys of the dictionary. </p>
</div>
<span class="comment-copy">Why do you want to accomplish this? The output of <code>str()</code> is intended for display, and is probably not what you should be using. Will you use that string in another program?</span>
<span class="comment-copy">@spectras yes, that is the case, I need to sign the string.</span>
<span class="comment-copy">This. If the output is intended to be json, <b>do</b> use <code>json.dumps</code>. If it's intended to be whatever other format, <b>do</b> use the appropriate serialization function. And as a last resort, do it yourself.</span>
<span class="comment-copy">The OP wanted single quotes, around the keys and (string) values, you have double quotes here.</span>
<span class="comment-copy">@Anthon thanks, but using double quotes is ok too.</span>
<span class="comment-copy">Since the separating <code>: </code> is always preceded by a single quote and <code>, </code> followed by one, you reduce the chance of a key/value containing the string by adding those to the replacement string.</span>
