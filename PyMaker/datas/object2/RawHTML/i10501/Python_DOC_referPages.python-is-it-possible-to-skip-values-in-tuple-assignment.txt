<div class="post-text" itemprop="text">
<p>I have a function which splits string in two parts at first encountered colon (skipping parts enclosed in brackets). This function returns tuple of three elements: index where the colon was encountered, part before colon and part after colon:</p>
<pre><code>def split_on_colon(str):
    colon_ptr = find_separator(str, 0, ':')
    if colon_ptr == -1:
        return (colon_ptr, str, None)
    return (colon_ptr, str[:colon_ptr], str[colon_ptr+1:])
</code></pre>
<p>I call it this way:</p>
<pre><code>def substitute_expression(expression):
    # Split function and arguments
    colon_ptr, func, args = split_on_colon(expression)
    ...
</code></pre>
<p>But sometimes it don't care about <code>colon_ptr</code> part.</p>
<p>Is there any simple construction in Python that would allow throwing away part of tuple in assignment, so that it wouldn't waste memory and variables namespace?</p>
<p>Something like this:</p>
<pre><code>Ignore, func, args = split
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>_</code>, which is used to store unwanted values. Your statement will look like this:</p>
<pre><code>_, func, args = split
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way for refusing of consuming extra memory is to handle this within your function. You can use a flag as an argument for your function then based on this flag you can decide to return 2 or 3 items.</p>
<pre><code>def split_on_colon(my_str, flag):
    colon_ptr = find_separator(my_str, 0, ':')
    if flag:
        if colon_ptr == -1:
            return (my_str, None)
        return (my_str[:colon_ptr], my_str[colon_ptr+1:])
    else:
        if colon_ptr == -1:
            return (colon_ptr, my_str, None)
        return (colon_ptr, my_str[:colon_ptr], my_str[colon_ptr+1:])
</code></pre>
</div>
<span class="comment-copy">This is usually done as this: <code>_, func, args = split</code> (which is seen often). But i'm not sure about the internals.</span>
<span class="comment-copy">@sascha <code>_</code> preserves in <code>builtins</code> module and certainly consumes memory.</span>
<span class="comment-copy">@Kasramvd Thanks for this remark!</span>
<span class="comment-copy">It's unrelated to your question, but it's a very bad idea to use <code>str</code> as a variable name, since it masks the builtin type of that name. Shadowing builtin names is permitted in Python, but it is discouraged since it is very bad style. It can cause some obscure errors if you edit this code later and try to use <code>str</code> for its normal meaning, not realizing you've given it a different meaning as a local variable.</span>
<span class="comment-copy">@sascha Thanks for your comments. This will do.</span>
<span class="comment-copy">Note that there is nothing special about <code>_</code>. It is just a preference/style that translates to <i>ignore the variable</i>.</span>
<span class="comment-copy">Using <code>_</code> is not the best idea though, as it is very often used as an alias for <code>gettext</code>. This use is even mentionned in the official documentation: <a href="https://docs.python.org/3/library/gettext.html#gettext.gettext" rel="nofollow noreferrer">“This function is usually aliased as _() in the local namespace”</a>. Use another name, such as <code>unused</code> or <code>dummy</code>.</span>
<span class="comment-copy">@spectras I would argue the reverse, that aliasing <code>gettext</code> to <code>_</code> is not the best idea because <code>_</code> is often used to indicate a throw-away value.</span>
<span class="comment-copy">@SethMMorton&gt; afaik the official python documentation does not mention <code>_</code> as a throw-away value. It does explicitly mention it as a <code>gettext</code> alias, however (linked in my previous comment). Using <code>_</code> as a throw-away value also breaks the last-result feature of the interpreter. Sure, you might ignore python's own conventions, say you don't care about the interpreter and go with you own, but what's the point?</span>
<span class="comment-copy">@spectras: TL;DR: <code>_</code> is not a python convention at all. 1) You are missing out the fact that <code>_</code> is an manual alias in <b>local namespace</b> (implying you/programmers do it, python doesn't). Python does not do any magic. 2) Further, it is only in REPL that <code>_</code> stands for last result. In real scripts/programs <code>_</code> means nothing special -- as I said in my first comment. 3) As for <i>throw-away/ignore</i> values, people have been using <code>_</code> for quite some time. As for <code>gettext</code>, I'd personally prefer using <code>t</code> instead of <code>_</code>.</span>
