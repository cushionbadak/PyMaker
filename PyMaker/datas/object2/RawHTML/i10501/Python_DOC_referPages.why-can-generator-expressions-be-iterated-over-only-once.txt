<div class="post-text" itemprop="text">
<p>This program:</p>
<pre><code>def pp(seq):
    print(''.join(str(x) for x in seq))
    print(''.join(str(x) for x in seq))
    print('---')

pp([0,1,2,3])
pp(range(4))  # range in Python3, xrange in Python2
pp(x for x in [0,1,2,3])
</code></pre>
<p>prints this:</p>
<pre><code>0123
0123
---
0123
0123
---
0123

---
</code></pre>
<p>It is a result of the difference between <code>container.__iter__</code> and <code>iterator.__iter__</code>. Both are documented here: <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#typeiter</a>. If the <code>__iter__</code> returns a new iterator each time, we see two repeating lines. And if it returns the same iterator each time, we see just one line, beacuse the iterator is exhausted after that.</p>
<p>My question is <strong>why it was decided to implement generator expressions not similar to other objects that seem to be equivalent or at least very similar?</strong></p>
<p>Here is another example that generator expressions are different than other similar types which may lead to unexpected outcome.</p>
<pre><code>def pp(seq):
    # accept only non-empty sequences
    if seq:
        print("data ok")
    else:
        print("required data missing")

pp([])
pp(range(0))
pp(x for x in []) 
</code></pre>
<p>output:</p>
<pre><code>required data missing
required data missing
data ok
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A generator <em>runs arbitrary code</em>, and returns a lazy sequence with the items yielded by that code.</p>
<ul>
<li>That code could be providing an infinite sequence.</li>
<li>That code could be reading contents off a network connection.</li>
<li>That code could be modifying external variables every time it iterates.</li>
</ul>
<p>Thus, you can't cache the results safely in the general case: If it's an infinite sequence, you'd run out of memory.</p>
<p>You also can't simply rerun the code when it's read from again: If it's reading off a network connection, then the connection may <em>no longer be there</em> again in the future (or may be in a different state). Similarly, if the code is modifying variables outside the genexp's scope, then that state would be changed in hard-to-predict ways based on the readers' behavior -- an undesirable propery for a language that values predictability and readability.</p>
<hr/>
<p>Some other languages (notably Clojure) <em>do</em> implement generators (there, generalized as "lazy sequences") that cache results if and only if a reference to the beginning of the sequence is retained. This gives the programmer control, but at a cost of complexity: You need to know exactly what is and is not referenced for the garbage collector.</p>
<p>The decision not to do this for Python is entirely reasonable and in keeping with the language's design goals.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My question is why it was decided to implement generator expressions not similar to other objects that seem to be equivalent or at least very similar?</p>
</blockquote>
<p>Because that's exactly what a generator is, if you make it similar to other iterables you have to preserve all the items in memory and then what you have is not a generator any more.</p>
<p>The main benefit of using generators is that they doesn't consume the memory and just generate the items on demand, and this makes them to be one shot iterables, because otherwise if you want to be able to iterate over them multiple times you have to preserve them in memory. </p>
</div>
<span class="comment-copy">Caching the elements is clearly out of question. I was thinking only about re-running it. I do not know nothing about Clojure, but it ie quite obvious that reusable generators could be written in a way that each run produces a different sequence. You said that should be avoided. This is the core of your answer as I understand it. Did I get it right?</span>
<span class="comment-copy">The risk is not just a different sequence -- if you're reading from a network (which is actually a quite common use for generators, if trying to process data while it's still coming in), then once you've finished that network stream, then there's nothing left to read more items from; thus, in that use case, what you have is <i>inherently</i> read-once.</span>
<span class="comment-copy">But, yes, having a value that behaves differently each time it's read is also a Bad Thing in a Pythonic explicit-is-better-than-implicit sense.</span>
<span class="comment-copy">Sounds reasonable. Thank you for answering my question. If you don't mind an additional question: looking at the example at the bottom of my question, there are two different ways to avoid the problem. Would you agree with "<i>never pass a generator expression to a function</i>" or with "<i>do not try to iterate over an unknown sequence more than once</i>"? Thanks.</span>
<span class="comment-copy">Hmm. The former makes it the caller's responsibility to cast to <code>list</code> (or similar) when needed; the latter makes it the callee's. Absent cases where the function is written and documented to support a single-use iterator (which is appropriate in many cases, as when writing code for use in network-streaming scenarios), I'd call putting that responsibility on the caller more reasonable, as it's the caller that knows when a genexp is in use.</span>
