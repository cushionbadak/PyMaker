<div class="post-text" itemprop="text">
<p>Can't get this text data to load:</p>
<pre class="lang-none prettyprint-override"><code>Al,95191,619851,
Joe,651651,616951,
</code></pre>
<p>The load module:</p>
<pre><code>def loadPlayers():
    Roster = {}
    filename = input("Filename to load: ")
    inFile = open(filename, "rt")
    print("Loading data...")
    while True:
        inLine = inFile.readline()
        if not inLine:
            break
        inLine = inLine[:-1]
        name, phone, jersey = inLine.split(",")
        Roster[name] = Players(name, phone, jersey)
    print("Data Loaded Successfully.")
    inFile.close()
    return Roster
</code></pre>
<p>I get this error:</p>
<pre class="lang-none prettyprint-override"><code>line 103, in loadPlayers name, phone, jersey = inLine.split(",")
  ValueError: not enough values to unpack (expected 3, got 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can improve the script a little to parse better some cases of extra data not formated as suspected.</p>
<pre><code>def loadPlayers():
    Roster = {}
    filename = input("Filename to load: ")
    inFile = open(filename, "rt")
    print("Loading data...")
    while True:
        inLine = inFile.readline()
        if not inLine:
            break
        inLine = inLine[:-1].split(",")
        if len(inLine) != 3:
            continue
        name, phone, jersey = inLine.split(",")
        Roster[name] = Players(name, phone, jersey)
    print("Data Loaded Successfully.")
    inFile.close()
    return Roster
</code></pre>
</div>
<span class="comment-copy">Do you have a blank line in the input? (Look into the <code>with</code> keyword for opening the file and you can just iterate over the file without using <code>while</code>, e.g. <code>for inLine in inFile:</code></span>
<span class="comment-copy">Is your indentation right? As I read your loop, you throw away all the lines but the last. If that last is blank, then <code>split</code> will give you an array with a single entry, namely, the empty string. Try <code>"".split(",")</code> to see what I mean.</span>
<span class="comment-copy">You've got a line with less than three comma-separated values in it. You could print out the offending line by putting a <code>try:</code> &amp; <code>except ValueError:</code> around the <code>inLine.split(",")</code> and then print the line in the <code>except</code> clause to see exactly which one it is. If you do nothing else after that, the line will simply be ignored.</span>
<span class="comment-copy">Side-note: Use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">the <code>csv</code> module, e.g. <code>csv.reader</code></a>, don't roll your own CSV parsing code. And it's much more straightforward to do <code>for inLine in inFile:</code> (or in this case, <code>for name, phone, jersey in csv.reader(inFile):</code> or some variant thereof if you have inconsistent field counts) rather than an infinite loop with a <code>readline</code> call and a test and <code>break</code>.</span>
<span class="comment-copy">The save file is a TXT file. The save module of the code generated and saved the file in this format  Al,95191,619851, Joe,651651,616951,</span>
