<div class="post-text" itemprop="text">
<p>suppose I have the module myscript.py; This module is production code, and is called often as <code>%dir%&gt;python myscript.py foo bar</code>. </p>
<p>I want to extend it to take keyword arguments. I know that I can take these arguments using the script below, but unfortunately one would have to call it using </p>
<p><code>%dir%&gt;python myscript.py main(foo, bar)</code>.</p>
<p>I know that I can use the <code>argparse</code> module, but I'm not sure how to do it. </p>
<pre><code>import sys

def main(foo,bar,**kwargs):
    print 'Called myscript with:'
        print 'foo = %s' % foo
        print 'bar = %s' % bar
        if kwargs:
            for k in kwargs.keys():
                print 'keyword argument : %s' % k + ' = ' + '%s' % kwargs[k]   

if __name__=="__main__":
    exec(''.join(sys.argv[1:]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to pass in keyword arguments as you would in the main function, <code>key=value</code>, you can do it like so:</p>
<pre><code>import sys

def main(foo, bar, *args):
    print "Called my script with"

    print "foo = %s" % foo
    print "bar = %s" % bar

    for arg in args:
        k = arg.split("=")[0]
        v = arg.split("=")[1]

        print "Keyword argument: %s = %s" % (k, v)


if __name__ == "__main__":
    if len(sys.argv) &lt; 3:
        raise SyntaxError("Insufficient arguments.")
    if len(sys.argv) != 3:
        # If there are keyword arguments
        main(sys.argv[1], sys.argv[2], *sys.argv[3:])
    else:
        # If there are no keyword arguments
        main(sys.argv[1], sys.argv[2])
</code></pre>
<p>Some examples:</p>
<pre><code>$&gt; python my_file.py a b x=4
Called my script with
foo = a
bar = b
Keyword argument: x = 4
$&gt; python my_file.py foo bar key=value
Called my script with
foo = foo
bar = bar
Keyword argument: key = value
</code></pre>
<p>However, this assumes that the key and value do not have any whitespace between them, <code>key = value</code> will not work.</p>
<p>If you are looking for <code>--argument</code> kinds of keyword arguments, you <strong>should</strong> use <code>argparse</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Moon beat me to it with a similar solution, but I'd suggest doing the parsing beforehand and passing in actual <code>kwargs</code>:</p>
<pre><code>import sys

def main(foo, bar, **kwargs):
    print('Called myscript with:')
    print('foo = {}'.format(foo))
    print('bar = {}'.format(bar))
    for k, v in kwargs.items():
        print('keyword argument: {} = {}'.format(k, v))

if __name__=='__main__':
    main(sys.argv[1], # foo
         sys.argv[2], # bar
         **dict(arg.split('=') for arg in sys.argv[3:])) # kwargs

# Example use:
# $ python myscript.py foo bar hello=world 'with spaces'='a value'
# Called myscript with:
# foo = foo
# bar = bar
# keyword argument: hello = world
# keyword argument: with spaces = a value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, you won't be passing an arbitrary Python expression as an argument. It's brittle and unsafe.</p>
<p>To set up the argument parser, you define the arguments you want, then parse them to produce a <code>Namespace</code> object that contains the information specified by the command line call.</p>
<pre><code>import argparse
p = argparse.ArgumentParser()
p.add_argument('foo')
p.add_argument('bar')
p.add_argument('--add-feature-a', dest='a', action='store_true', default=False)
</code></pre>
<p>In your <code>__main__</code> block, you'll parse the arguments, then pass a dictionary produced from the <code>Namespace</code> to <code>main</code>.</p>
<pre><code>if __name__ == '__main__':
    args = p.parse_args()
    main(**vars(args))
</code></pre>
<p>Then you'll call your script with a line like</p>
<pre><code># foo = "3", bar = "6", a = True
python myscript.py 3 6 --add-feature-a
</code></pre>
<p>or</p>
<pre><code># foo = "moo", bar="7.7", a = False
python myscript.py moo 7.7
</code></pre>
<p>There's a lot more you can do with <code>argparse</code>, but this is a simple example for getting the value it produces into <code>main</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>With a bit of introspection, it's possible to set up <code>ArgumentParser</code> from a function's signature, thus mapping command-line parameters directly to function arguments:</p>
<pre><code>import argparse
import inspect

def myfun(mode, count=1, frobify=False, *files):
    print('Doing %s %d times on %s (%sfrobifying)' % (
        mode, count, files, '' if frobify else 'not '
    ))

def funopt(fun, argv=None):
    parser = argparse.ArgumentParser()

    if hasattr(inspect, 'getfullargspec'):
        spec = inspect.getfullargspec(fun)
    else:
        spec = inspect.getargspec(fun)

    num_defaults = len(spec.defaults) if spec.defaults is not None else 0
    for i in range(len(spec.args)):
        if i &lt; len(spec.args) - num_defaults:
            parser.add_argument(spec.args[i])
        elif spec.defaults[i - len(spec.args)] is False:
            parser.add_argument('--' + spec.args[i], 
                                default=False, action='store_true')
        else:
            default = spec.defaults[i - len(spec.args)]
            parser.add_argument('--' + spec.args[i],
                                default=default,
                                type=type(default))
    if spec.varargs is not None:
            parser.add_argument(spec.varargs,
                                nargs='*')

    kwargs = vars(parser.parse_args(argv))
    args = []
    for arg in spec.args:
        args += [kwargs[arg]]
    if spec.varargs is not None:
        args += kwargs[spec.varargs]

    fun(*args)


funopt(myfun)
</code></pre>
<p>The result:</p>
<pre><code>$ python test.py               
usage: test.py [-h] [--count COUNT] [--frobify] mode [files [files ...]]
test.py: error: too few arguments

$ python test.py myaction a b c
Doing myaction 1 times on ('a', 'b', 'c') (not frobifying)

$ python test.py --frobify --count=5 myaction a b c 
Doing myaction 5 times on ('a', 'b', 'c') (frobifying)
</code></pre>
</div>
<span class="comment-copy">You already seem to have provided the solution but want us to write the program for you. How about you first go to the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">documentation</a>, try something and post again when you get stuck trying <code>argparse</code>.</span>
<span class="comment-copy">I don't think there is a need for <code>argparse</code>, I will come up with an answer soon.</span>
<span class="comment-copy">There's no <i>need</i> for <code>argparse</code>, but it makes calling the script with optional arguments much easier.</span>
<span class="comment-copy">With my current solution, the main method needs to be called explicitly, I want to know how to do it without this limitation.</span>
<span class="comment-copy">What do you mean by keyword argument? How is it passed into the program?</span>
<span class="comment-copy">I'm not sure what interpretation of "keyword arguments" you are using in this answer, but it is not what the term generally refers to in Python.</span>
