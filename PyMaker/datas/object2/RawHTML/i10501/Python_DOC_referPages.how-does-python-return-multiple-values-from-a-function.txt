<div class="post-text" itemprop="text">
<p>I have written the following code:</p>
<pre><code>class FigureOut:
   def setName(self, name):
      fullname = name.split()
      self.first_name = fullname[0]
      self.last_name = fullname[1]

   def getName(self):
      return self.first_name, self.last_name

f = FigureOut()
f.setName("Allen Solly")
name = f.getName()
print (name)
</code></pre>
<p>I get the following <strong>Output:</strong></p>
<pre><code>('Allen', 'Solly')
</code></pre>
<p>Whenever multiple values are returned from a function in python, does it always convert the multiple values to a <strong>list of multiple values</strong> and then returns it from the function?</p>
<p><em>Is the whole process same as converting the multiple values to a <code>list</code> explicitly and then returning the list, for example in JAVA, as one can return only one object from a function in JAVA?</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Since the return statement in <code>getName</code> specifies <em>multiple elements</em>:</p>
<pre><code>def getName(self):
   return self.first_name, self.last_name
</code></pre>
<p>Python will return a container object that basically contains them. </p>
<p>In this case, returning a <em>comma separated</em> set of elements creates <em>a tuple</em>. Multiple values <em>can only be returned inside containers</em>.</p>
<p>Let's use a simpler function that returns multiple values:</p>
<pre><code>def foo(a, b):
    return a, b
</code></pre>
<p>You can look at the byte code generated by using <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow noreferrer"><code>dis.dis</code></a>, a disassembler for Python bytecode. For comma separated values w/o any brackets, it looks like this:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo(a, b):
...     return a,b        
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_FAST                0 (a)
              3 LOAD_FAST                1 (b)
              6 BUILD_TUPLE              2
              9 RETURN_VALUE
</code></pre>
<p>As you can see the values are first loaded on the internal stack with <code>LOAD_FAST</code> and then a <a href="https://docs.python.org/3/library/dis.html#opcode-BUILD_TUPLE" rel="nofollow noreferrer"><code>BUILD_TUPLE</code></a> (grabbing the previous <code>2</code> elements placed on the stack) is generated. Python knows to create a tuple due to the commas being present.</p>
<p>You could alternatively specify another return type, for example a list, by using <code>[]</code>. For this case, a <a href="https://docs.python.org/3/library/dis.html#opcode-BUILD_LIST" rel="nofollow noreferrer"><code>BUILD_LIST</code></a> is going to be issued following the same semantics as it's tuple equivalent:</p>
<pre><code>&gt;&gt;&gt; def foo_list(a, b):
...     return [a, b]
&gt;&gt;&gt; dis.dis(foo_list)
  2           0 LOAD_FAST                0 (a)
              3 LOAD_FAST                1 (b)
              6 BUILD_LIST               2
              9 RETURN_VALUE
</code></pre>
<p>The type of object returned really depends on the presence of brackets (for tuples <code>()</code> can be omitted if there's at least one comma). <code>[]</code> creates lists and <code>{}</code> sets. Dictionaries need <code>key:val</code> pairs.</p>
<p>To summarize, <em>one actual object is returned</em>. If that object is of a container type, it can contain multiple values giving the impression of multiple results returned. The usual method then is to unpack them directly:</p>
<pre><code>&gt;&gt;&gt; first_name, last_name = f.getName()
&gt;&gt;&gt; print (first_name, last_name)
</code></pre>
<hr/>
<p>As an aside to all this, your Java ways are leaking into Python :-) </p>
<p>Don't use getters when writing classes in Python, use <code>properties</code>. Properties are the idiomatic way to manage attributes, for more on these, see a nice answer <a href="https://stackoverflow.com/questions/1554546/when-and-how-to-use-the-builtin-function-property-in-python">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch07s04.html" rel="noreferrer">Python Cookbook v.30</a></p>
<pre><code>def myfun():
    return 1, 2, 3
</code></pre>
<p></p>
<pre><code>a, b, c = myfun()
</code></pre>
<blockquote>
<p><strong>Although it looks like <code>myfun()</code> returns multiple values, a <code>tuple</code> is actually being created.</strong> It looks a bit peculiar, but itâ€™s actually the comma that forms a tuple, not the parentheses</p>
</blockquote>
<p>So yes, what's going on in Python is an internal transformation from multiple comma separated values to a tuple and vice-versa. </p>
<p>Though there's no equivalent in <a class="post-tag" href="/questions/tagged/java" rel="tag" title="show questions tagged 'java'">java</a> you can easily create this behaviour using <code>array</code>'s or some <code>Collection</code>s like <code>List</code>s:</p>
<pre><code>private static int[] sumAndRest(int x, int y) {
    int[] toReturn = new int[2];

    toReturn[0] = x + y;
    toReturn[1] = x - y;

    return toReturn;

}
</code></pre>
<p>Executed in this way:</p>
<pre><code>public static void main(String[] args) {
    int[] results = sumAndRest(10, 5);

    int sum  = results[0];
    int rest = results[1];

    System.out.println("sum = " + sum + "\nrest = " + rest);

}
</code></pre>
<p>result:</p>
<pre><code>sum = 15
rest = 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here It is actually returning <code>tuple</code>.</p>
<p>If you execute this code in Python 3: </p>
<pre><code>def get():
    a = 3
    b = 5
    return a,b
number = get()
print(type(number))
print(number)
</code></pre>
<p><strong>Output :</strong> </p>
<pre><code>&lt;class 'tuple'&gt;
(3, 5)
</code></pre>
<p>But if you change the code line <code>return [a,b]</code> instead of <code>return a,b</code> and execute : </p>
<pre><code>def get():
    a = 3
    b = 5
    return [a,b]
number = get()
print(type(number))
print(number)
</code></pre>
<p><strong>Output :</strong></p>
<pre><code>&lt;class 'list'&gt;
[3, 5]
</code></pre>
<p>It is only returning single object which contains multiple values. </p>
<p>There is another alternative to <code>return</code> statement for returning multiple values, use <code>yield</code>( to check in details see this <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">What does the "yield" keyword do in Python?</a>)</p>
<p><strong>Sample Example :</strong></p>
<pre><code>def get():
    for i in range(5):
        yield i
number = get()
print(type(number))
print(number)
for i in number:
    print(i)
</code></pre>
<p><strong>Output :</strong></p>
<pre><code>&lt;class 'generator'&gt;
&lt;generator object get at 0x7fbe5a1698b8&gt;
0
1
2
3
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python functions always return a unique value. The comma operator is the constructor of tuples so <code>self.first_name, self.last_name</code> evaluates to a tuple and that tuple is the actual value the function is returning.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Whenever multiple values are returned from a function in python, does it always convert the multiple values to a <strong>list</strong> of multiple values and then returns it from the function??
  <br/></p>
</blockquote>
<p>I'm just adding a name and print the result that returns from the function.
the type of result is '<strong>tuple</strong>'.</p>
<pre><code>  class FigureOut:
   first_name = None
   last_name = None
   def setName(self, name):
      fullname = name.split()
      self.first_name = fullname[0]
      self.last_name = fullname[1]
      self.special_name = fullname[2]
   def getName(self):
      return self.first_name, self.last_name, self.special_name

f = FigureOut()
f.setName("Allen Solly Jun")
name = f.getName()
print type(name)
</code></pre>
<p><br/></p>
<p>I don't know whether you have heard about '<strong>first class function</strong>'. Python is the language that has '<a href="https://en.wikipedia.org/wiki/First-class_function" rel="nofollow">first class function</a>' </p>
<p>I hope my answer could help you.
Happy coding.</p>
</div>
<div class="post-text" itemprop="text">
<p>mentioned also <a href="https://stackoverflow.com/questions/354883/how-do-you-return-multiple-values-in-python">here</a>, you can use this:</p>
<pre><code>import collections
Point = collections.namedtuple('Point', ['x', 'y'])
p = Point(1, y=2)
&gt;&gt;&gt; p.x, p.y
1 2
&gt;&gt;&gt; p[0], p[1]
1 2
</code></pre>
</div>
<span class="comment-copy">If you return two items from a function, then you are returning a tuple of length two, because that is how returning multiple items works. It's not a list.</span>
<span class="comment-copy">@khelwood: So, is it a special feature in python?? One which is not present in languages like JAVA, C++ ..??</span>
<span class="comment-copy">It is a feature not present in languages that do not support returning multiple values.</span>
<span class="comment-copy">@khelwood: So, actually it does not return multiple values but a <b>tuple</b> of multiple values. Am I right??</span>
<span class="comment-copy">I would say that tuples are the mechanism by which Python allows you to return multiple values.</span>
<span class="comment-copy">Moreover, <code>getThis</code> and <code>setThat</code> are obsolete hold-overs from the Java bean days.  I would like to see an end to this paradigm once and for all.  <code>object.foo()</code> implies a "get" and <code>object.foo(value)</code> already implies a set.</span>
