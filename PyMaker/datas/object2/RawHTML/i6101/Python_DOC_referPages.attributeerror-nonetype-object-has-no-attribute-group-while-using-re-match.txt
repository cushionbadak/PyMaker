<div class="post-text" itemprop="text">
<p>I'm trying to rename some files which all start with the same string (Vertragshandbuch_Beitrag_) in a folder using pyhton on windows.</p>
<p>An example file-name: 
Vertragshandbuch_Beitrag_004_Term Sheet.docx</p>
<p>New file-name should look like this: 4.docx</p>
<p>My current code looks like this:</p>
<pre><code>import os
import re

for filename in os.listdir("."):
    m = re.match("Vertragshandbuch_Beitrag_(\d+)_(\w+(\W\w+)*)\.docx", filename)    
    number = m.group(1)  
    new_filename = number + ".docx"
    os.rename(filename, new_filename)
    print(new_filename)
</code></pre>
<p>I'm getting this error:
Traceback (most recent call last):
  File "C:(...)rename.py", line 6, in 
    number = m.group(1)
AttributeError: 'NoneType' object has no attribute 'group'</p>
<p>I checked the regex with several filenames here: <a href="https://regex101.com/" rel="nofollow noreferrer">https://regex101.com/</a> and it was always a perfect match.</p>
<p>I'm new to python and before asking the question I searched a long time and all the tips about normalizing the file name didn't help.</p>
<p>I changed the script after input from blurp to:</p>
<pre><code>import os
import re

for filename in os.listdir("."):
    m = re.match(r'Vertragshandbuch_Beitrag_(\d+)_(\w+(\W\w+)*)\.docx', filename)    
    number = m.group(1)  
    new_filename = number + ".docx"
    os.rename(filename, new_filename)
    print(new_filename)
</code></pre>
<p>Still the same error and still a match when I check the regex.</p>
<p>To test the regex match I used now:</p>
<pre><code>import os
import re

for filename in os.listdir("."):
    m = re.match(r'Vertragshandbuch_Beitrag_(\d+)_(\w+(\W\w+)*)\.docx', filename)  
    number = m.group(1)  
    new_filename = number + ".docx"
    if m is not None:
        os.rename(filename, new_filename)
        print(new_filename)
</code></pre>
<p>Still same error message.</p>
<p>Okay, as a last resort I tried this in a folder which contained only the file Vertragshandbuch_Beitrag_003_Letter.docx: </p>
<pre><code>import os, sys
import re

for filename in os.listdir("."):
    m = re.match(r"Vertragshandbuch_Beitrag_(\d+)_(\w+(\W\w+)*)\.docx", filename)    
    print(m)
</code></pre>
<p>I got the following result:
&lt;_sre.SRE_Match object; span=(0, 40), match='Vertragshandbuch_Beitrag_003_Letter.docx'&gt;</p>
<p>Looks like it is matching, still the error. </p>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>re.match()</code> if the string supplied doesn't match the regex pattern, it will equal <code>None</code>.</p>
<p>What I'm assuming the problem is, is that you are coming across a filename that doesn't match the regex pattern you have supplied.</p>
<p>Even if the regex matches your files correctly, the first time <code>re.match()</code> returns <code>None</code> it will break unless you explicitly catch it. Otherwise, when you call <code>re.match().group()</code>, it doesn't exist and it raises an error.</p>
<p>This worked for me when I made files with the name format specified:</p>
<pre><code>import os
import re

def rename_num(path):

    # Create a pattern to match filenames to
    match_pattern = r"Vertragshandbuch_Beitrag_(\d+)_(\w+(\W\w+)*)\.docx"
    pattern = re.compile(match_pattern)


    # For each file in the path supplied above
    for filename in os.listdir(path):

        # Use the re module to match the regex pattern to the filename.
        # If the filename doesn't match the regex found will be equal to None.
        found = pattern.match(filename)

        # If found is not equal to None, print the filename, groups and rename the file
        if found:

            os.rename(os.path.join(path, filename), os.path.join(path, found.group(1) + ".docx"))

            print("{} renamed to {}".format(filename, found.group(1) + ".docx"))



# To run the above method in the directory the script is in:
p = os.path.abspath(os.path.dirname(__file__))
rename_num(p)
</code></pre>
<blockquote>
<h3>I created files with names like you supplied (numbers 001 - 007) and</h3>
<h3>this was my output:</h3>
<pre><code>Vertragshandbuch_Beitrag_001_Term Sheet.docx renamed to 001.docx
Vertragshandbuch_Beitrag_002_Term Sheet.docx renamed to 002.docx
Vertragshandbuch_Beitrag_003_Term Sheet.docx renamed to 003.docx
Vertragshandbuch_Beitrag_004_Term Sheet.docx renamed to 004.docx
Vertragshandbuch_Beitrag_005_Term Sheet.docx renamed to 005.docx
Vertragshandbuch_Beitrag_006_Term Sheet.docx renamed to 006.docx
Vertragshandbuch_Beitrag_007_Term Sheet.docx renamed to 007.docx
</code></pre>
</blockquote>
<p>I hope this helps.</p>
</div>
<span class="comment-copy"><code>re.match()</code> returns <code>None</code> when your regex doesn't match. You can check for that by doing <code>if m is not None</code>. Also, you need to prefix the regex pattern with <code>r</code> like <code>r"xyz"</code>, otherwise things like <code>\d</code> won't work. See the <a href="https://docs.python.org/3/library/re.html#raw-string-notation" rel="nofollow noreferrer"><code>re</code> docs</a> for more about that.</span>
<span class="comment-copy">I copied your regex (the <code>r''</code> version) and sample file name into a little script and it worked for me. Do all the files in the directory match the pattern? If not, you'll have to check for <code>None</code>.</span>
<span class="comment-copy">I'm trying to insert the None test as well but I will always get invalid syntax. I tried:</span>
<span class="comment-copy"><code>if m is not None         os.rename(filename, new_filename)         print(new_filename)</code></span>
<span class="comment-copy">There seems to be a colon missing after <code>None</code>.</span>
<span class="comment-copy">Thanks so much Jebby. That worked now first in the test folder with the single file where it didn't work before, than also in the whole folder after a few more changes to regex to get also names with '-' in it. It must have been the re.compile which did the trick. Thanks!</span>
<span class="comment-copy">No problem. If this answer helped you, please accept it as the solution.</span>
<span class="comment-copy">@rena <code>re.compile()</code> doesnâ€™t have any effect on whether a pattern will match.</span>
<span class="comment-copy">This is correct. <code>re.compile()</code> just has speed improvements over <code>re.match()</code> so it is preferred when matching that pattern with multiple strings at a time. (Like in a for loop). Should have mentioned that. Thanks @Blurp</span>
<span class="comment-copy">Also, note that when using functions like <code>re.match()</code> and <code>re.search()</code>, the patterns will be automatically compiled and cached (<a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer">docs</a>).</span>
