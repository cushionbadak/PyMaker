<div class="post-text" itemprop="text">
<p>I am trying to make a function "add" that will be able to sum elements of list continuously and return a new list of sums. In python there can be cases where input is not a list, or there are other objects in it instead of integers like string characters or float numbers, in these cases I have to return 'Invalid input'</p>
<p>Eg :</p>
<pre><code>add([1,2,3,4,5]) == [1, 3, 6, 10, 15] , because it's calculated like this : [1, 1 + 2, 1 + 2 + 3, 1 + 2 + 3 + 4, 1 + 2 + 3 + 4 + 5]

add([1,'a',2,'b',3,'c']) == 'Invalid input'

add('All string') == 'Invalid input'

add((1,2,3,4)) == 'Invalid input'
</code></pre>
<p>How do I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>numpy cumsum is likely the most adapted to what you are looking for:</p>
<pre><code>import numpy

data = numpy.array([ndx**2 for ndx in range(10)])
numpy.cumsum(data)
</code></pre>
<h3>output:</h3>
<pre><code>array([  0,   1,   5,  14,  30,  55,  91, 140, 204, 285])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two levels in this.</p>
<hr/>
<ol>
<li><p>Find if elements in the list are all <code>int</code> :</p>
<pre><code>&gt;&gt;&gt; all(isinstance(ele , int) for ele in l)
</code></pre>
<p>If its <code>false</code> : <em>print invalid</em> ; otherwise <em>continue</em> with the computation.</p></li>
</ol>
<hr/>
<ol start="2">
<li><p>Give the cumulative sum of previous elements :</p>
<pre><code>&gt;&gt;&gt; [sum( l[:i+1] ) for i in range(len(l))]
</code></pre></li>
</ol>
<hr/>
<p>#driver values :</p>
<pre><code>IN : l = [1,2,3,4,5]
OUT : True                          #all ints
      [1, 3, 6, 10, 15]

IN : l = [1,'a',2,'b',3,'c']
OUT : False                        #not int
      Invalid input
</code></pre>
<hr/>
<p>Or, an even easier method following <code>try/except</code> methodology :</p>
<pre><code>try : 
     print([sum( l[:i+1] ) for i in range(len(l))]) 
except : 
     print("Invalid Input") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> to get cumsum followed by <code>any(isinstance(i,str) for i in list)</code> to validate if any element is string</p>
<pre><code>from itertools import accumulate

l1 = [1,2,3,4,5]
print ("Invalid input" if any(isinstance(i, str) for i in l1) else list(accumulate(l1)))
#[1, 3, 6, 10, 15]

l2 = [1,2,3,'str',5]
print ("Invalid input" if any(isinstance(i, str) for i in l2) else list(accumulate(l2)))
#Invalid input
</code></pre>
<p>Putting in function:</p>
<pre><code>def cumsum(l):
    if any(isinstance(i, str) for i in l):
        print ('Invalid input')
    else:
        print (list(accumulate(l1)))

cumsum([1,2,3,4,5])
#[1, 3, 6, 10, 15]
cumsum([1,2,3,'str',5])
#Invalid input
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def add_up(nums):
   if any(not isinstance(n, int) for n in nums):
      return 'Invalid input'
   def gen():
      n = nums[0]
      yield n
      for i in nums[1:]:
          n = i + n
          yield n
   return list(gen())
</code></pre>
<strong>Result</strong>
<pre><code>add_up([1,2,3,4,5])
[1, 3, 6, 10, 15]

add_up([1,'a',2,'b',3,'c'])
'Invalid input'

add_up('All string')
'Invalid input'

add_up(['a','b','c'])
'Invalid input'

add_up(range(10))
[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import accumulate

def add(input):
    if all(isinstance(i,int) for i in  input):
        return list(accumulate(input))
    else:
        return "invalid input"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>we can use numpy cumsum to get the list of cumulative values.</p>
<pre><code>import numpy as np
def cumSum(arr):
    try:
        return (list(np.cumsum(arr)))
    except:
        return "inValid"
a = [1,2,3,4,5]
print(cumSum(a))
</code></pre>
<p>the above snippet output is </p>
<pre><code>[1, 3, 6, 10, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the method that sum up only a valid int or float list</p>
<pre class="lang-html prettyprint-override"><code>def add(lis):
    if not isIntList(lis) or type(lis) is not list:
       return False
    return [sum(lis[:x+1]) for x in range(len(lis))]
</code></pre>
<p>the method check if the values in the list are int or float values</p>
<pre class="lang-html prettyprint-override"><code>def isIntList(list):
    for i in list:
        if not isinstance(i, int) and not isinstance(i, float):
            return False
    return True
</code></pre>
</div>
<span class="comment-copy">In pure python? You're looking for a cumulative sum, or <code>.cumsum()</code> in numpy.</span>
<span class="comment-copy">why is the last one bad input? learn about <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">duck typing</a></span>
<span class="comment-copy">Better to call your function after validating the input I think</span>
<span class="comment-copy">@VanPeer agree.</span>
