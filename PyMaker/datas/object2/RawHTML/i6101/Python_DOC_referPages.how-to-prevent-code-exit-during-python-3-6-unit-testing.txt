<div class="post-text" itemprop="text">
<p>AS I write functions and classes with Python 3.6 I try to write unit tests as soon as I am capable.  I am writing a simple function that tests whether or not a file exists at a user specified location, that looks like this.</p>
<pre><code>import os
import sys
import unittest
def verify_file_existance(file_path, file_name):
    total_name = file_path + file_name
    if os.path.isfile(total_name):
        return
    sys.exit('{}{}{}'.format('FATAL ERROR: ', file_name, 'does not exist'))
</code></pre>
<p>The unit test for the above function looks like</p>
<pre><code>class InputFileTest(unites.TestCase):
    def test_verify_file_existance(self):
        file_name = 'Test.csv'
        file_path = '../../Data/VandV/Input_Reader/'
        verify_file_existance(file_path, file_name)
</code></pre>
<p>If the file exists at the desired location, the test passes successfully; however, if the file does not exist, the program exits with a Fatal Warning.  This is how i want the program to behave during normal operation; however, in unit testing, I want to purposefully be able to place an incorrect path and register that as a successful test, to prove the program does what I want.  In other words during one test case, I don't want the program to exit.  Is there any way to do this during unit testing?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can handle the error gracefully using try/except
<a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#handling-exceptions</a></p>
<pre><code>class InputFileTest(unites.TestCase):
     def test_verify_file_existance(self):
         file_name = 'Test.csv'
         file_path = '../../Data/VandV/Input_Reader/'
         try:
              verify_file_existance(file_path, file_name)
         except:
              print("file not found")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try doing try except statements:</p>
<pre><code>class InputFileTest(unites.TestCase):
    def test_verify_file_existance(self):
        try:
            file_name = 'Test.csv'
            file_path = '../../Data/VandV/Input_Reader/'
            verify_file_existance(file_path, file_name)
        except Exception as e:
            print("\n\aError. Unable to locate File!\nError: {}").format(str(e))
            try:
                exit(0)
            except:
                sys.exit(1)
</code></pre>
</div>
<span class="comment-copy">Have you looked into <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises" rel="nofollow noreferrer"><code>assertRaises</code></a>?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15672151/is-it-possible-for-a-unit-test-to-assert-that-a-method-calls-sys-exit">Is it possible for a unit test to assert that a method calls sys.exit()</a></span>
