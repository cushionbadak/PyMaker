<div class="post-text" itemprop="text">
<pre><code>population_d = {'0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,1': 6, 
'0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,1': 3, 
'0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0': 5, 
'1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0': 1}

def ProbabilityList(population_d):
    fitness = population_d.values()
    total_fit = (sum(fitness))
    relative_fitness = [f/total_fit for f in fitness]
    probabilities = [sum(relative_fitness[:i+1]) for i in range(len(relative_fitness))]
    return (probabilities)
</code></pre>
<p>I was trying to calculate the cumulative probabilities for such a data structure, however, I need to keep the order of the values for indexing them to the respective individuals in the same positions in another list. </p>
<p>The programs performs the operations sequentially, giving a higher weight for the last position, which in this case would be the lowest fitness. </p>
<p>Does anyone know if there is a way to perform the cumulative sum in the correct way (crescent order of fitness values), without changing their position in the output list?</p>
<p>Thank you very much!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>population_d = {'0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,1': 6, 
                '0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,1': 3, 
                '0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0': 5, 
                '1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0': 1}
</code></pre>
<p>In your dictionary you have associated fitness(?) values with a unique identifier. Presumably these identifiers came from somewhere else in your program and dataset.  Instead of trying to rely on the order of construction of the dictionary to preserve this relationship, I've maintained the association and constructed a new dictionary with the values being the cumulative sum obtained after sorting the fitness from low to hi.</p>
<pre><code>import operator
def ProbabilityList(population_d):
    fitness = population_d.values()
    total_fit = (sum(fitness))

    #create list of (individual, fitness) tuples
    items = population_d.items()

    #sort by fitness value
    items = sorted(items, key = operator.itemgetter(1))
    #some people prefer
    #items = sorted(items, key = lambda item: item[1])
    #print(items)

    #maintain association and calculate relative fitness
    relative_fitness = [(ind,fit/total_fit) for (ind,fit) in items]
    #print(relative_fitness)

    cumsum = 0
    probabilities = {}
    for ind, fit in relative_fitness:
        cumsum += fit
        probabilities[ind] = cumsum
    return (probabilities)

d = ProbabilityList(population_d)
for k, v in d.items():
    print('key:{}, fitness:{}, cumsum:{}'.format(k, population_d[k], v))

&gt;&gt;&gt;
key:1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0, fitness:1, cumsum:0.06666666666666667
key:0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,1, fitness:3, cumsum:0.26666666666666666
key:0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0, fitness:5, cumsum:0.6
key:0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,1, fitness:6, cumsum:1.0
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Hopefully with the dictionary you will be able to relate the cumulative sums to the original <em>individuals</em> in the other part of your code.</p>
<hr/>
<p>I see that you have been asking other questions related to this dataset and project.  You may want to invest some time learning <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">Pandas</a> or even consider keeping the data in a database instead of individual containers scattered throughout the project.</p>
</div>
<span class="comment-copy">What does <code>crescent order of fitness values</code> mean? Can you describe that process? Are you expecting <code>population_d</code> to retain the order that it was <i>made</i>?</span>
<span class="comment-copy">Perhaps you're looking for the OrderedDict (see <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>), which is a container like a dictionary that maintains entries in the order in which they were added to it?</span>
<span class="comment-copy">By crescent order I mean adding more weight to probabilities related to higher fitness values, and yes, It would be interesting to keep the order, since the actual population is in another list and I believe theres no other way to assign the probabilities to the correct individuals later if I lose the list order. I might be wrong, of course, but I believe this is the way to make it eork.</span>
<span class="comment-copy">` adding more weight to probabilities related to higher fitness values,` -are you saying that the last calculation (<code>probabilities =...</code>) should be performed in sorted order from lowest to highest?</span>
<span class="comment-copy">Yes, as I said, I am not 100% sure but I believe it might be it</span>
<span class="comment-copy">I believe that should work indeed, thanks! I will definitely check the Pandas too!</span>
