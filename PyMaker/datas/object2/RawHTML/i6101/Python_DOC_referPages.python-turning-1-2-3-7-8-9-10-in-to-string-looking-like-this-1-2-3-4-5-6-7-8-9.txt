<div class="post-text" itemprop="text">
<p>I'm working a lot with ranges and have hit a wall on this one. I'm trying to turn a range in to the full list of numbers.</p>
<pre><code>string = '1,2,3-6,10'
print string 
</code></pre>
<p>what i want print string to result in is '1,2,3,4,5,6,10'. So bascially showing the full range.</p>
<p>so the bulk of the question is how to turn 3-6 in to 3,4,5,6 using python</p>
<p>any help would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this would output what you need, it's a bit long winded but demonstrates the process.</p>
<pre><code>string = '1,2,3-6,10'
splt_a = string.split(",")
o = []

for s in splt_a:
    if "-" in s:
        splt_b = s.split("-")
        for i in range(int(splt_b[0]), int(splt_b[1]) + 1):
            o.append(i)
    else:
        o.append(int(s))

print(o) # [1, 2, 3, 4, 5, 6, 10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">regex</a> pattern to find every range and a function to replace a range by a list of numbers:</p>
<pre><code>import re
s = '1,2,3-6,10'

def replace_range_by_ints(m):
    a = m.group(1)
    b = m.group(2)
    return ','.join(str(i) for i in range(int(a), int(b) + 1))

pattern = re.compile('(\d+)\-(\d+)')
print(re.sub(pattern, replace_range_by_ints, s))
# 1,2,3,4,5,6,10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>one-liner which creates a range if <code>-</code> is detected (with boundary fixing) else just converts to integer:</p>
<pre><code>import itertools

result = [x for y in '-1,1,2,3-6,10'.split(",") for x in (range(int(y.split("-")[0]),int(y.split("-")[1])+1) if y.find("-")&gt;0 else [int(y)]) ]
</code></pre>
<p>result (as a list of integers):</p>
<pre><code>[-1, 1, 2, 3, 4, 5, 6, 10]
</code></pre>
<p>note that it handles negative numbers as well (<code>y.find("-")&gt;0</code> ensures that <code>-</code> is not at start when detecting range), but not negative ranges (would have to choose another separator for this like <code>:</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following function:</p>
<pre><code>def range_to_list(l):
     result = []
     for part in l.split(','):
         if '-' in part:
             a, b = part.split('-')
             a, b = int(a), int(b)
             result.extend(range(a, b + 1))
         else:
             a = int(part)
             result.append(a)
     return result
</code></pre>
<p>And then you'll get:</p>
<pre><code>&gt;&gt;&gt; myStr =  '1,2,3-6,10'
&gt;&gt;&gt; range_to_list(myStr)
[1, 2, 3, 4, 5, 6, 10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you build a simple parser for that construct? I guess you're planning to process some kind of input from external data sources anyway as otherwise your question wouldn't make much sense: It's more easy to resolve a few specifications like that manually instead of writing special code to handle it.</p>
<p>This approach would follow these steps:</p>
<ul>
<li>prepare an empty list for output</li>
<li>split the input string at ","</li>
<li>for each item check if a "-" is present

<ul>
<li>if no =&gt; convert the item to an int and put it into the output list</li>
<li>if yes =&gt;

<ul>
<li>split the string at "-"</li>
<li>add a range of int values to the output list</li>
</ul></li>
</ul></li>
<li>return the output list</li>
</ul>
<p>I guess this is the easiest way. Should be very simple to code that yourself using the <code>split</code> method provided at strings to split strings and the <code>int(...)</code> function to convert strings to int.</p>
<p>Building such a simple parser will have a big advantage anyway: You can at the same time verify that the input you receive is perfectly valid. You even can check if the values provided are in increasing order. That seems to be a basic condition if I look at the example(s) you provided.</p>
</div>
<span class="comment-copy">Have you isolated the numbers from each other yet? eg: Do you know how to turn it into <code>['1', '2', '3-6', '10']</code> to get started</span>
<span class="comment-copy">note: this isn't very compatible with negative numbers. Change the separator to <code>:</code> if needed.</span>
<span class="comment-copy">Why do I have the feeling you've now done his homework? :-)</span>
<span class="comment-copy">Honestly, it was just a nice little algorithm. 95% of the fun is writing the code!</span>
<span class="comment-copy">Yes but I explicitly stepped back from doing so. He stated "he hit a wall". Well, it is a very simple task: You just need to split strings and parse them. There's no real difficulty involved. (It's even so easy that the problem isn't even really worth dealing with until either the strings are extremely large or other aspects like that are present. But he didn't mention any.) I've the strong feeling he didn't give it too much thought how to solve this problem on his own: He did not mention any specific difficulties. Now you deprive him from being able to learn programming :-)</span>
<span class="comment-copy">It makes me a bit sad that you find my question lazy. I'm not a professional programmer, but I'm passionate about it. If you look through my track record on this site you will see that I'm not the type of guy that just spam questions to get over my hurdles. I've spent so much time just teaching myself this stuff, and this one time i felt like nothing was pointing me towards the right answer, so i went here. The answer might look easy to you, but if you are new to this language it can be hard to comprehend how you can use all the different functions. And directions like this can be so helpful.</span>
<span class="comment-copy">you could even handle negative ranges with an improved regex. But is that really needed? good anwer.</span>
<span class="comment-copy">I'm not so happy with this <code>find(…) &gt; 0</code> … Input: <code>"-3, -2"</code> (instead of <code>"-3,-2"</code>) will still run into trouble. You could use <code>.strip()</code> to remove any whitespace.  Still kind of hacky.</span>
<span class="comment-copy">you're perfectly right, but the best way would be to use <code>:</code> as a separator. So I think I'll leave it as is. thanks for your feedback.</span>
<span class="comment-copy">Agreed.  And I wouldn't like to consider stuff like <code>-10--6, -3-0, 1-4</code> etc.  *shiver*</span>
<span class="comment-copy">sometimes you have to know when to stop :)</span>
<span class="comment-copy">Always interesting to see that in Python even quite some complex algorithms can be squeezed into a single line :-) But please have in mind that code like this is quite unreadable and leads to code that can't be maintained easily in the long run. And I'm not sure if the user asking can really understand it.</span>
<span class="comment-copy">Now you've done his homework :-)</span>
<span class="comment-copy">Consider negative numbers in input: "-3, -2, -1, 0, 1, 2-5, 6".</span>
<span class="comment-copy">thanks you guys so much for all the quick answers!</span>
<span class="comment-copy">and take into account negative numbers as well.</span>
<span class="comment-copy">True, but then a state machine will be better suitable. THAT would give the task a level of difficulty that would make the problem a bit interesting :-) But as far as we know from the question no negative numbers seem to be involved here.</span>
<span class="comment-copy">in which case using <code>:</code> as a separator would be a much better choice.</span>
<span class="comment-copy">Indeed :-) But we're getting a bit of the track.</span>
