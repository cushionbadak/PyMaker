<div class="post-text" itemprop="text">
<p>I want to increase a variable by 1 OR run a function that does that every time something is logged to <code>log</code> - <code>lognum</code> in my case.</p>
<pre><code>lognum = 1
logger = logging.getLogger('module')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter(f'----CHUNK {lognum}----\nLEVEL: %(levelname)s\nNAME:%(name)s\nMESSAGE:%(message)s\n----CHUNK {lognum}----\n'))
logger.addHandler(handler)
</code></pre>
<p>I can't add the code after the setFormatter- it just sets the formatter. I've read the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">docs</a> for logging, can't find anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use either <a href="https://docs.python.org/3/library/logging.html#logging.Logger.filter" rel="nofollow noreferrer"><code>filters</code></a> or the py3 <a href="https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory" rel="nofollow noreferrer"><code>setLogRecordFactory</code></a> &amp; <a href="https://docs.python.org/3/library/logging.html#logging.getLogRecordFactory" rel="nofollow noreferrer"><code>getLogRecordFactory</code></a> to add contextual information to your logs.</p>
<p>Here's a quick and dirty example:</p>
<pre><code>import sys
import logging

logger = logging.getLogger(__name__)
COUNT = 1
FMT = """----CHUNK %(lognum)s----
LEVEL: %(levelname)s
NAME:%(name)s
MESSAGE:%(message)s
----CHUNK %(lognum)s----"""

def main():
    logger.info('hello, world')
    logger.warning('this is a warning log')
    logger.error('this is bad!')

def init_logger():
    log = logging.getLogger(__name__)
    log.setLevel(logging.INFO)
    handler = logging.StreamHandler(stream=sys.stdout)
    formatter = logging.Formatter(fmt=FMT)
    handler.setFormatter(formatter)
    log.addHandler(handler)

    old_factory = logging.getLogRecordFactory()

    def record_factory(*args, **kwargs):
        global COUNT
        record = old_factory(*args, **kwargs)
        record.lognum = COUNT
        COUNT += 1
        return record

    logging.setLogRecordFactory(record_factory)


if __name__ == '__main__':
    init_logger()
    main()
</code></pre>
<p>and the output:</p>
<pre><code>----CHUNK 1----
LEVEL: INFO
NAME:__main__
MESSAGE:hello, world
----CHUNK 1----
----CHUNK 2----
LEVEL: WARNING
NAME:__main__
MESSAGE:this is a warning log
----CHUNK 2----
----CHUNK 3----
LEVEL: ERROR
NAME:__main__
MESSAGE:this is bad!
----CHUNK 3----
</code></pre>
<p>and <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">here you can find</a> a similar example by using <code>filters</code>.</p>
</div>
