<div class="post-text" itemprop="text">
<p>We're trying to build a wrapper script over a command line tool we're using. We would like to set some tool arguments based on options in our wrapper scripts. We would also like to have the possibility to pass native arguments to the command line tool directly as they are written on the command line.</p>
<p>Here is what we came up with:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

parser.add_argument('positional')
parser.add_argument('-f', '--foo', action='store_true')
parser.add_argument('-b', '--bar', action='store_true')

parser.add_argument('native_arg', nargs='*')

args = parser.parse_args()
print (args)
</code></pre>
<p><code>positional</code> is mandatory. Based on the options <code>-f</code> and <code>-b</code> we would add some extra options to our tool call. Anything that is left afterwards (if anything) should be treated as a native tool argument and given to the tool directly. Calling our script with <code>-h</code> produces the following usage:</p>
<pre><code>usage: test.py [-h] [-f] [-b] positional [native_arg [native_arg ...]]
</code></pre>
<p>The trick is that these native arguments are themselves options for the tool and contain leading dashes, for example <code>-native0</code> and <code>-native1</code>. We already know about the trick with the double dash to stop <em>argparse</em> from looking for more options. The following call:</p>
<pre><code>./test.py pos -- -native0 -native1
</code></pre>
<p>produces the expected parsed arguments:</p>
<pre><code>Namespace(bar=False, foo=False, native_arg=['-native0', '-native1'], positional='pos')
</code></pre>
<p>Trying to add an option after the first positional argument doesn't work, though. More specifically, the following call:</p>
<pre><code>./test.py pos --foo -- -native0 -native1
</code></pre>
<p>produces the following output:</p>
<pre><code>usage: [...shortened...]
test.py: error: unrecognized arguments: -- -native0 -native1
</code></pre>
<p>Putting the optional arguments before the positionals:</p>
<pre><code>./test.py --foo pos -- -native0 -native1
</code></pre>
<p>seems to work, as the following is printed:</p>
<pre><code>Namespace(bar=False, foo=True, native_arg=['-native0', '-native1'], positional='pos')
</code></pre>
<p>Even stranger, changing the value of <code>nargs</code> for <code>native_arg</code> to <code>'+'</code> works in all the above situations (with the caveat, of course, that at least one <code>native_arg</code> is expected).</p>
<p>Are we doing something wrong in our Python code or is this some kind of <em>argparse</em> bug?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>argparse</code> does have a hard time when you mix non-required positional arguments with optional arguments (see <a href="https://stackoverflow.com/a/47208725/1399279">https://stackoverflow.com/a/47208725/1399279</a> for details into the bug report).  Rather than suggesting a way to solve this issue, I am going to present an alternative approach.</p>
<p>You should check out the <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args" rel="nofollow noreferrer"><code>parse_known_args</code></a> method, which was created for the situation you describe (i.e. passing options to a wrapped tool).</p>
<pre><code>In [1]: import argparse

In [2]: parser = argparse.ArgumentParser()

In [3]: parser.add_argument('positional')

In [4]: parser.add_argument('-f', '--foo', action='store_true')

In [5]: parser.add_argument('-b', '--bar', action='store_true')

In [6]: parser.parse_known_args(['pos', '--foo', '-native0', '-native1'])
Out[6]: (Namespace(bar=False, foo=True, positional='pos'), ['-native0', '-native1'])
</code></pre>
<p>Unlike <code>parse_args</code>, the output of <code>parse_known_args</code> is a two-element tuple. The first element is the <code>Namespace</code> instance you would expect to get from <code>parse_args</code>, and it contains all the attributes defined by calls to <code>add_argument</code>. The second element is a list of all the arguments not known to the parser.</p>
<p>I personally prefer this method because the user does not need to remember any tricks about how to call your program, or which option order does not result in errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a known issue (<a href="https://bugs.python.org/issue15112" rel="nofollow noreferrer">https://bugs.python.org/issue15112</a>, <strong>argparse: nargs='*' positional argument doesn't accept any items if preceded by an option and another positional</strong>)</p>
<p>The parsing alternates handling positionals and optionals.  When dealing with positionals it tries to handle as many as the input strings require.  But an <code>?</code> or <code>*</code> positional is satisfied with <code>[]</code>, an empty list of strings.  <code>+</code> on the other hand requires at least one string</p>
<pre><code>./test.py pos --foo -- -native0 -native1
</code></pre>
<p>The parser gives 'pos' to <code>positional</code>, and <code>[]</code> to <code>native-arg</code>.  Then it gives '--foo' to its optional.  There aren't anymore <code>positionals</code> left to hand the remaining strings, so it raises the error.</p>
<p>The allocation of input strings is done with a stylized form of <code>regex</code> string matching.  Imagine matching a pattern that looks like <code>AA?</code>.</p>
<p>To correct this, parser would have to look ahead, and delay handling <code>native-arg</code>.  We've suggested patches but they aren't in production.</p>
<p>@SethMMorton's suggestion of using <code>parse_known_args</code> is a good one.</p>
<p>Earlier parsers (e.g. Optparse) handle all the flagged arguments, but return the rest, the positionals, as a undifferentiated list.  It's up to the user to split that list.  <code>argparse</code> has added the ability to name and parse <code>positionals</code>, but the algorithm works best with fixed <code>nargs</code>, and gets flaky with too many variable <code>nargs</code>.</p>
</div>
<span class="comment-copy">I'd also be happy with some way to only parse stuff before the <code>--</code> and then get the rest as one big blob. <code>parse_known_args</code> would let stuff that looks like script options slip through into <code>native_args</code>. I've thought about it a bit and it might be solvable with a combination of two chained subparsers. Since the native args are also mostly for use in other scripts I think it's acceptable to use the workaround of always ending with the positional before the <code>--</code>.</span>
<span class="comment-copy">The double dash changes how strings like '-native0' are interpreted, but not how they are allocated to <code>positionals</code>.  There is also a <code>nargs='...'</code>, <code>REMAINDER</code>, but I think it has this same allocation issue.  I can test that later.</span>
<span class="comment-copy">I tried it and it eats up everything after <code>positional</code> is first seen. This means that in <code>test.py position --foo -- -native0</code>, the <code>--foo</code> option gets clumped into <code>native_args</code>.</span>
<span class="comment-copy">A related patch, providing a <code>parsed_intermixed_args</code> has been added to the current development version.</span>
<span class="comment-copy">That REMAINDER behavior is happening for the same reason - the argument is handled right after the first positional.</span>
