<div class="post-text" itemprop="text">
<p>The method <code>__getitem__()</code> for a sequence (such as a list) can return a single item, or a sequence of items. For example, given the function decoration below:</p>
<pre><code>def __getitem__(self, index) -&gt; Union[Product, Generator[Product, None, None]]:
    return super(Products, self).__getitem__(index)
</code></pre>
<p>Example usage:</p>
<pre><code>i1 = 34
for product in products[i1:]:
    print(product.name)
</code></pre>
<p>I believe <code>Union[Product, Generator[Product, None, None]]</code> to be correct, but PyCharm flags this as improper. Am I misusing the typing library, or is this a PyCharm issue?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct type hint for <code>__getitem__()</code> is <code>Union[Product, Sequence[Product, None, None]]</code>.</p>
<p>The only place this seems to be documented in the docs is on the <a href="https://docs.python.org/3.5/reference/datamodel.html#object.__getslice__" rel="nofollow noreferrer">data model page</a> which states: "When used as an expression, a slice is a sequence of the same type". <strong>Note: a sequence like type (such as List) should also work</strong>, see <a href="https://docs.python.org/3/library/typing.html#typing.List" rel="nofollow noreferrer">typing</a>.</p>
<p>Further discussion: I was expecting a generator when using a slice with a sequence while being iterated over because they are more memory efficient. But now it is obvious to me that this would result in constantly having to do: <code>l_2 = list(l_1[2:])</code>, which would be annoying.</p>
</div>
<span class="comment-copy"><code>Generator</code> is for generators, not for sequences.</span>
<span class="comment-copy">That works, but raises another question - List or Sequence?  From standard docs:   1. <a href="https://docs.python.org/3.5/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">data model</a> states: "When used as an expression, a slice is a sequence of the same type" 2. <a href="https://docs.python.org/3/library/typing.html#typing.List" rel="nofollow noreferrer">typing</a> states: "List(list, MutableSequence[T]) Generic version of list. Useful for annotating return types. To annotate arguments it is preferred to use abstract collection types such as Mapping, Sequence, or AbstractSet."</span>
