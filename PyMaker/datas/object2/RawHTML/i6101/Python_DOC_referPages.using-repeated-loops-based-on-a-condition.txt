<div class="post-text" itemprop="text">
<p>I have no idea how to look up what I'm trying to do because I can only really describe it in layman's terms right now. Essentially what I think I need to do is to find a way to call a loop as many times as given, but nested. I am trying to do this for a dice rolling simulator for fun, but I'm running into issues with not hard-coding it. Here's what I have:</p>
<pre><code>def rollxdice(dice)-&gt;list:
    ''' Simulates rolling x dice and returns list of values of each die'''
    roll_list = []
    for i in range(dice):
        roll_list.append(randrange(1,7))
    return roll_list

def distribution(dice: int, trials:int):
    results = []
    for i in range(trials):
        results.append(rollxdice(dice))
    count = 1
    while count &lt; 7:
        for n in range(1,7):
            for j in range(1,7):
                print(f'{count}, {n}, {j}')
        count +=1
</code></pre>
<p>Right now the function is hard-coded for 3 dice rolled. However, I want to make it dependent on the dice parameter. I also considered permutations/combinations, but I don't know how I would swing that either. Any advice/help is appreciated. I realize that the while/for loop is trash, and I would prefer using a consistent method. Think of the code there as my brainstorming. I'm working toward having python print out a line of each combination and the number of times that combination was rolled.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a recursive function:</p>
<pre><code>def func(depth, msg = ""):
    if depth == 0:
        print(msg[:-2]) #delete last 2 character(", ") and print
        return;
    for i in range(1,7):
        func(depth - 1, msg + str(i) + ", ")

func(3) 
</code></pre>
<p>Output:</p>
<pre><code>1, 1, 1
1, 1, 2
1, 1, 3
...
1, 6, 5
1, 6, 6
2, 1, 1
2, 1, 2
2, 1, 3
...
5, 6, 6
6, 1, 1
6, 1, 2
...
6, 6, 5
6, 6, 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can factor out the loop count generation using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a>:</p>
<pre><code>&gt;&gt;&gt; list(itertools.product(range(1,4), range(1,4), range(1,4)))
[(1, 1, 1), (1, 1, 2), (1, 1, 3),
 (1, 2, 1), (1, 2, 2), (1, 2, 3),
 (1, 3, 1), (1, 3, 2), (1, 3, 3),
 (2, 1, 1), (2, 1, 2), (2, 1, 3),
 (2, 2, 1), (2, 2, 2), (2, 2, 3),
 (2, 3, 1), (2, 3, 2), (2, 3, 3),
 (3, 1, 1), (3, 1, 2), (3, 1, 3),
 (3, 2, 1), (3, 2, 2), (3, 2, 3),
 (3, 3, 1), (3, 3, 2), (3, 3, 3)]
</code></pre>
<p>If you want combinations without ordering, there's also combinations_with_replacement:</p>
<pre><code>&gt;&gt;&gt; list(itertools.combinations_with_replacement(range(1,4), 3))
[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 3), 
 (2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)]
</code></pre>
<p>The result was sorted (since the input range was sorted, it keeps the ordering), so you could sort your dice within each roll to get the same format. </p>
<p>By the way, here's a distribution test using some standard library types:</p>
<pre><code>&gt;&gt;&gt; import random, collections
&gt;&gt;&gt; dice=2
&gt;&gt;&gt; sides=2
&gt;&gt;&gt; rolls=100
&gt;&gt;&gt; counts=collections.Counter(
...    tuple(sorted(random.randint(1,sides) for die in range(dice))) 
...    for sample in range(rolls))
&gt;&gt;&gt; counts
Counter({(1, 2): 48, (2, 2): 32, (1, 1): 20})
</code></pre>
</div>
<span class="comment-copy">How do you want to specify the number of times to roll the die? Is it supposed to be based on user input?</span>
<span class="comment-copy">Eventually, yeah it’ll be user input, but right now I’m just testing it manually in the module. So I call the function directly like  distribution(2,100) or something.</span>
<span class="comment-copy">Okay, I've got the hang of the logic now; that's really quite incredible how it works. Thank you for your answer. I do have one question though. What exactly is msg[:-2] and how does it work? edit: It's just saying to print each character except the last two right? Again, very fun code, and thank you once more for your time.</span>
<span class="comment-copy">You're welcome. I agree that recursion is quite incredible. About your question: <code>", "</code> is added after every number. So, if you print only msg, it will print, for example, <code>2, 1, 3, </code>.  <code>msg[:-2]</code> operation deletes last 2 characters in the <code>msg</code> string, and it prints <code>2, 1, 3</code> . For more info, you can take a look at <b>String Slices</b> header in <a href="https://developers.google.com/edu/python/strings" rel="nofollow noreferrer">this link</a>. It explains perfectly.</span>
<span class="comment-copy">Please excuse my ignorance, but how exactly does the itertools.product function work? From what I gather, it executes each of the ranges from left to right, then loops back to the beginning until they are all exhausted, but the tuple aspect has lost me. Especially so with your third solution. What advantage is there to using a tuple instead of say, a recursive as above? For example, say once I had the data, I wanted to call upon it again, would it be better to reference the tuple or the values themselves in lists? I ask, because I plan to be creating graphs and charts to show distribution.</span>
<span class="comment-copy">The tuples are to collect the sorted samples, because we can only count hashable things with Counter. Basically, it's to guarantee that the throws are the same values if they ever compared equal. There's nothing wrong with the recursion per se (though the string building method is arguable - I'd probably use str.join), but if you're operating over this space of coordinates the product function offers an abstraction to refer to every point rather than repeating so much logic for every axis. Tuples and lists have similar performance, but tuples are immutable.</span>
