<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15748980/can-i-get-a-python-object-from-its-memory-address">Can I get a python object from its memory address?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have looked around the forums and I can't seem to find an answer (and there might not be one actually) as to whether or not you can get the name of a variable or the value by using its memory location in Python.  In other words, when I declare <code>a = 10</code> and assign the value <code>10</code> to the variable <code>'a'</code>, and then I use the <code>id()</code> function on <code>'a'</code> I get the location in memory where the value for <code>'a'</code> is stored.  Is there a way to, say, print the variable name <code>('a')</code> or the value <code>('10')</code> by referencing the value that <code>id()</code> returns (either the decimal value or converting the decimal value to hex with the <code>hex()</code> function)?  I tried a few things like <code>print(id(variable-name))</code> and just <code>print(decimal-value-from-id)</code> and no luck. Any help would be greatly appreciated and thank you in advance!</p>
<p>Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is possible with <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a>:</p>
<pre><code>import ctypes
a = 10
ctypes.cast(id(a), ctypes.py_object).value
#10
</code></pre>
<p>This will, of course, work if the object is still there.</p>
</div>
<span class="comment-copy">Why do you want to do that?</span>
<span class="comment-copy">No.  In fact, <code>id(obj)</code> being the location in memory of <code>obj</code> is a CPython implementation detail, and shouldn't be relied upon</span>
<span class="comment-copy">You could probably do this in a C extension, but not pure python</span>
<span class="comment-copy">Well you could store a dictionary of id values to variables, and intern your strings to ensure this is applied consistently, but what is your ultimate aim here?</span>
<span class="comment-copy">Even though this is possible in CPython, it is highly inadvisable for you to rely on this. Also, it is important to note that the value returned by <code>id</code> isn't linked to the variable, but the object.</span>
<span class="comment-copy">I am very tempted to downvote this... You can guarantee that it only exists if <i>you</i> are holding a reference to that variable, in which case you could actually store it somewhere indexable with the ID.</span>
<span class="comment-copy">Your concerns are in place and I wouldn't suggest this in production. Still, it is what OP wanted to do.</span>
<span class="comment-copy">Zipa, thank you for your reply and this is what I was looking for.  The reason I posted was that I was having a conversation about mutable vs. immutable and used the id() function to show that mutable objects like lists can be changed in place (where id() returns the same memory value/location) and an integer or string variable name returns a new id() value when changed (so can't be changed in place). Was asked how I could take the memory location value generated by id() to get the name or value of the variable stored at that location - kinda reverse engineer it so to speak.  Thank you!!</span>
