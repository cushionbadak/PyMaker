<div class="post-text" itemprop="text">
<p>I'm creating a utility in Python that reads data in from a file on startup on a separate thread so that the rest of the GUI components can load. The data gets stored into a <code>list</code> and then appended to a combobox. How would I lock the <code>list</code> so that no other method can call the list at the same time it's being used by the <code>def read_employees(self, read_file):</code> method. </p>
<p>This is the best attempt I can come up with.</p>
<pre><code>#left out imports

class MyDialog(wx.Frame):

    def __init__(self, parent, title):
        self.no_resize = wx.DEFAULT_FRAME_STYLE &amp; ~ (wx.RESIZE_BORDER | wx.MAXIMIZE_BOX)
        wx.Frame.__init__(self, parent, title=title, size=(500, 450),style = self.no_resize)

        self.lock = threading.RLock()
        self.empList = []


    def read_employees(self, read_file):

        with open(read_file) as f_obj:
            employees = json.load(f_obj)

        with self.lock:
            self.empList = [empEmail for empEmail in employees.keys()]
            wx.CallAfter(self.emp_selection.Append, self.empList)


    def start_read_thread(self):
        filename = 'employee.json'
        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
            executor.submit(self.read_employees, filename)

app = wx.App(False)
frame = MyDialog(None, "Crystal Rose")
app.MainLoop()
</code></pre>
<p>Is using <code>RLock</code> appropriate here?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what else you have going on in the app, but I'd recommend taking a look at the wx.CallAfter function. It is thread-safe and can be used to send messages or post events.</p>
<pre><code>import wx
from wx.lib.pubsub import Publisher
import json
from threading import Thread


def update_employee_list(read_file):
    with open(read_file) as f_obj:
        employee_list = json.load(f_obj) # this line should release the GIL so it continues other threads
    # next line sends a thread-safe message to the main event thread
    wx.CallAfter(Publisher().sendMesage, 'updateEmployeeList', employee_list)


class MyDialog(wx.Frame):
    def __init__(self, parent, title):
        self.no_resize = wx.DEFAULT_FRAME_STYLE &amp; ~ (wx.RESIZE_BORDER | wx.MAXIMIZE_BOX)
        wx.Frame.__init__(self, parent, title=title, size=(500, 450),style = self.no_resize)
        self.empList = []
        # subscribe our function to be called when 'updateEmployeeList' messages are received
        Publisher().subscribe(self.updateDisplay, 'updateEmployeeList')

    def updateDisplay(self, employee_list):
        # this assignment should be atomic and thread-safe
        self.empList = employee_list
        # wxPython GUI runs in a single thread, so this is a blocking call
        # if you have many many list items, you may want to modify this method
        # to add one employee at a time to the list to keep it non-blocking.
        self.emp_selection.Append(employee_list)

    def start_read_thread(self):
        filename = 'employee.json'
        t = Thread(target= update_employee_list, args=(filename, ))
        t.start()  # this starts the thread and immediately continues this thread's execution
</code></pre>
<p><em>Update:</em></p>
<p>Using a <code>with ThreadPoolExecutor</code> blocks because the code is equivalent to:</p>
<pre><code>executor = ThreadPoolExecutor(max_workers=1)
executor.submit(worker_func, args)
executor.shutdown(wait=True)  # &lt;--- wait=True causes Executor to block until all threads complete
</code></pre>
<p>You could still use the ThreadPoolExecutor as follows, without the with block. Because you're only :</p>
<pre><code>executor = ThreadPoolExecutor(max_workers=1)
executor.submit(worker_func, args)
executor.shutdown(wait=False)  # &lt;--- threads will still complete, but execution of this thread continues immediately
</code></pre>
<p>For more about concurrent futures and Executors, <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown" rel="nofollow noreferrer">see here for documention</a>.</p>
</div>
<span class="comment-copy">Thanks for the time and effort to create this. Few things, in the <code>start_read_thread</code>,<code>self.read_employees</code> should be <code>update_employee_list(read_file):</code> and in <code>def update_employee_list(read_file):</code>, <code>'updateEmployeeList'</code> should be <code>updateDisplay</code>   Correct? If I wanted to continue with <code>R.Lock</code>, have I used it correctly?</span>
<span class="comment-copy">Yes I’ve fixed that bug. In your example, your ThreadExecutor will block until the thread completes, so I wouldn’t say that it is correct. As far as the lock goes, it’s hard to tell if you used it correctly because I only see one usage of it. If you’re going to use a lock it must be used everywhere that you access that variable. That one looks fine although there’s. I need for CallAfter to be in the locked area.</span>
<span class="comment-copy">Could you update your answer to explain why <code>threadpoolexecutor</code> will block? I was given the suggestion to use <code>threadpoolexecutor</code> in this answer here <a href="https://stackoverflow.com/questions/47186213/reading-a-file-without-block-main-thead-in-gui?noredirect=1&amp;lq=1" title="reading a file without block main thead in gui">stackoverflow.com/questions/47186213/…</a>.</span>
<span class="comment-copy">updated. hope it helps!</span>
<span class="comment-copy">The docs say if I use <code>with</code>, I don't have to use shutdown. It will function as if <code>shutdown</code> is set to True.</span>
