<div class="post-text" itemprop="text">
<p>I have to count the occurrence of a string(which can be 1 or more words) in another string (which is a sentence) and should not be case-sensitive. </p>
<p>For instance - </p>
<pre><code>a = "Hi my name is Alex and hi to you as well. How high is the building? The highest floor is 18th. Highlights .... She said hi as well. Do you know highlights of the match ... hi."

b = "hi" #word/sentence to find count of
</code></pre>
<p>I tried - </p>
<pre><code>a.lower().count(b) 
</code></pre>
<p>which returns </p>
<pre><code>&gt;&gt; 8 
</code></pre>
<p>while the required answer should be</p>
<pre><code>&gt;&gt; 4.
</code></pre>
<p>For multi-word, this method seems to work but I am not sure of the limiting cases. How can I fix this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a> to search for the substring with leading and trailing word boundaries:</p>
<pre><code>import re

print(len(re.findall(r'\b{}\b'.format(b), a, re.I))) # -&gt; 4
#                      ^   ^
#                      |___|_ word boundaries  ^
#                                              |_ case insensitive match
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The function works just fine: the sequence "hi" appears 8 times in the string.  Since you want it only as words, you'll need to figure out how you can differentiate the word "hi" from the incidental appearance in other words, such as "chipper".</p>
<p>One common way is to use the <code>re</code> package (regular expressions), but that may be more learning then you want to do right now. </p>
<p>A better way at the moment would be to split the string into words before you check each:</p>
<pre><code>word_list = a.lower().split()
b_count = word_list.count(b)
</code></pre>
<p>Note that this considers only spaces when dividing words.  It still won't find "hi" in "hi-performance", for example.  You'd need another split operation for other separators.</p>
</div>
<div class="post-text" itemprop="text">
<p>"Spliting" a sentence into words is not trivial.</p>
<p>There in a package in python to do that : nltk.</p>
<p>First install this package using pip or system specific package manager.</p>
<p>Then run <em>ipython</em> and use <code>nltk.download()</code> to download "punkt" data : type <code>d</code> then type <code>punkt</code>. Then quit <code>q</code>.</p>
<p>Then use</p>
<pre><code>tokens = nltk.word_tokenize(a)
len(list(filter(lambda x: x.lower() == b, tokens))
</code></pre>
<p>it returns <code>4.</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>str.split()</code> and filter out punctuation with regex:</p>
<pre><code>import re
a = "Hi my name is Alex and hi to you as well. How high is the building? The highest floor is 18th. Highlights .... She said hi as well. Do you know highlights of the match ... hi."
b = "hi"
final_count = sum(re.sub("\W+", '', i.lower()) == b for i in a.split())
</code></pre>
<p>Output:</p>
<pre><code>4
</code></pre>
</div>
<span class="comment-copy">thanks, this seems to work like a charm :)</span>
<span class="comment-copy">@User54211 You may consider accepting the answer if it helped.</span>
<span class="comment-copy">This won't work. If you are using <code>split()</code>, then you have to remove <i>punctuations</i>.</span>
<span class="comment-copy">This breaks on <code>'She said hi, as well'</code>. I think the <i>easiest</i> way to handle the unforeseen here is to use <code>re</code>. Might be a good motivation for them to start learning <code>re</code>, if they don't have experience with it already.</span>
<span class="comment-copy">Also split would fail when b would be multi-word, for instance, b="name is"</span>
<span class="comment-copy">@Miraj50 &amp; Moses: yes; that's why I provided the example with the hyphen.</span>
<span class="comment-copy">Split won't work for our use case since we may have multiple words in b, for instance, b can be - b="name is"</span>
<span class="comment-copy">if you display tokens, you'll see they are in the order. So you can test that if a token == "hi", the next one == "name".</span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">I didn't downvote but combining <code>str.split</code> with <code>re</code> looks like overkill, IMO.</span>
<span class="comment-copy">this seems to fail if b is a multi-word like  b="name is", while the problem statement I mention it so may be the case.</span>
