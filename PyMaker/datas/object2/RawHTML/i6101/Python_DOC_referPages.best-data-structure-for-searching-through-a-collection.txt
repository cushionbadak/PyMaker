<div class="post-text" itemprop="text">
<p>Currently I have a collection of hundreds of thousands of IDs as integers, and I am performing the following task (lets say this collection is stored in a list <code>cache</code> for now):</p>
<pre><code>cache = list()
# lets say this cache is populated
for x in range(0,1000000):
    if x not in cache:
        #do_something
</code></pre>
<p>How expensive is it for me to use a list to search for <code>not in</code> something? Would I benefit from using another data structure, and if so which one would be best?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should consider using a <a href="https://docs.python.org/2/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a>. While it's worst case time complexity for <code>x in cache</code> would still be O(n), the average case is O(1) (<a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">source</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you could create the data in <code>cache</code> via a generator, you could forgo creating a list on the order of 1e5 and reap the memory savings. Then, you could simply test <code>x not in</code> with the following:</p>
<pre><code>desired_id = 123456
cache = some_function_to_generate_integer_ids()  # cache is a generator
print desired_id in cache
</code></pre>
<p>in which <code>False</code> will be printed if <code>desired_id</code> is not in cache.</p>
</div>
<span class="comment-copy">"Best" is subjective. A set or a dictionary or even a sorted list will typically be faster than an unordered list.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#set-types-set-frozenset</a> for Python 3.</span>
