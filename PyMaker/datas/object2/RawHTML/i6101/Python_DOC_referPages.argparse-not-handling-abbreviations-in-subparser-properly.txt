<div class="post-text" itemprop="text">
<p>(Run on <strong>python 3.6.0</strong>)</p>
<h2><strong>TL;DR</strong></h2>
<pre><code>Usage: prog.py {caesar | vigenere} [key]

parser = argparse.ArgumentParser()
subp = parser.add_subparsers()
caesar = subp.add_parser("caesar", aliases=["c"], allow_abbrev=True)
args = parser.parse_args()
$ python prog.py caes 123
prog.py: error: invalid choice: 'caes' (choose from 'caesar', 'c')
</code></pre>
<p>Why is the <code>subparser</code> abbreviation invalid even with <code>allow_abbrev=True</code>?</p>
<hr/>
<h2><strong>LONG VER</strong></h2>
<p>Basically, having an issue getting <code>argparse</code> to accept abbreviated <code>subparsers</code> names/aliases.</p>
<p>Here's the code:</p>
<pre><code>Usage: prog.py [caesar] [key]

import sys, argparse

def main(argv):
parser = argparse.ArgumentParser
         (description="runs text through X cipher")
subp = parser.add_subparsers\
         (help="sub-command help")

#&lt;ArgumentParser object&gt;
caesar = subp.add_parser\
         ("caesar", aliases=["c"], allow_abbrev=True)
caesar.add_argument\
         ("key", metavar = "key (any integer)",\
          type = int, default = 0)


args = parser.parse_args()
print(caesar)

if __name__ == "__main__":
sys.argv = list(str(c).lower() for c in sys.argv[0:])
main(sys.argv)
</code></pre>
<p>So from the code above, it should be expected that any of the following should be accepted:</p>
<pre><code>- "Caesar" or "caesar"
- "C" or "c" 
- Any abbreviation in between "c" and "caesar" 
</code></pre>
<p>So here's the problem:</p>
<p>This works: <code>$ python prog.py c 123</code> O</p>
<p>This gives an error: <code>$ python prog.py caes 123</code> X</p>
<pre><code>prog.py: error: invalid choice: 'cae' (choose from 'caesar', 'c')
</code></pre>
<p>Now here's the confusing part.</p>
<p>According to the <strong>argparse doc</strong>:</p>
<blockquote>
<p>ArgumentParser supports the creation of such sub-commands with the
  add_subparsers() method. The add_subparsers() method is normally
  called with no arguments and returns a special action object. This
  object has a single method, <strong>add_parser()</strong>, which takes a command name
  and any ArgumentParser constructor arguments, and <strong>returns an
  ArgumentParser object</strong> that can be modified as usual.</p>
</blockquote>
<ol>
<li><p>okay, so any <code>object created with add_subparser()</code> can create its own <code>ArgumentParser object</code>with <code>object.add_parser()</code> right? </p></li>
<li><p>...which means this newly created <code>ArgumentParser</code> object should be able to accept any <code>ArgumentParser</code> arguments yeah?</p></li>
</ol>
<p><strong>ArgumentParser</strong> definition:</p>
<pre><code>class 
argparse.ArgumentParser(
prog=None, usage=None, 
description=None, epilog=None, 
parents=[],formatter_class=argparse.HelpFormatter, 
prefix_chars='-',fromfile_prefix_chars=None, 
argument_default=None,conflict_handler='error', 
add_help=True, allow_abbrev=True)
</code></pre>
<blockquote>
<p>Create a new <strong>ArgumentParser</strong> object. All parameters should be passed as keyword
  arguments. Each parameter has its own more detailed description below, but in short
  they are:</p>
<p><code>allow_abbrev</code> - Allows long options to be abbreviated if the abbreviation is unambiguous.</p>
<p>(default: <strong>True</strong>)</p>
<p><em>Changed in version 3.5: allow_abbrev parameter was added.</em></p>
<p><em>(this was on python 3.6.0)</em></p>
</blockquote>
<hr/>
<p>Thanks in advance, guys</p>
</div>
<div class="post-text" itemprop="text">
<p>A patch to allow abbreviations of the subparser names was implemented, but then withdrawn when it proved to be buggy: </p>
<p><a href="https://bugs.python.org/issue12713" rel="nofollow noreferrer">Issue 12713: allow abbreviation of sub commands by users</a></p>
<p>Allowing users to turn off abbreviations for long options is a different issue, handled in  </p>
<p><a href="https://bugs.python.org/issue14910" rel="nofollow noreferrer">Issue 14910: argparse: disable abbreviation</a></p>
<p>Two different parts of the code.</p>
<blockquote>
<p>allow_abbrev - Allows <strong>long</strong> options to be abbreviated if the abbreviation is unambiguous.</p>
</blockquote>
<p>A long option is created with:</p>
<pre><code>caesar.add_argument('-f','--foobar')
</code></pre>
<p>With the default <code>allow_abbrev</code> value, this would work with '-f', '--foo', and '--foobar'.  The <code>long_option</code> in this case is '--foobar'.  With it <code>False</code>, '--foo' would not work.</p>
<p>It's the main <code>parser</code> that decides whether <code>c</code> or <code>caesar</code> or <code>cae</code> are valid subparser commands (via <code>subp</code>, the <em>special action object</em> created by <code>parser.add_subparsers</code>).  This behaves more like a positional with <code>choices</code>.</p>
<pre><code>parser.add_argument('foo', choices = ['c', 'caesar'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error I'm getting is this:</p>
<pre><code>usage: [-h] {caesar,c} ...
: error: unrecognized arguments: a e s
</code></pre>
<p>Hinting that abbreviations are supposed to be composable in the sense that two different abbreviations "c" and "a" can be referenced by passing <code>ca</code>. </p>
<p>What is it that should really happen there? <code>ca</code> is both a combination between the <code>c</code> and the (non-existing) <code>a</code> short form, as well as an abbreviation. Which should the parser prefer? Therefore this question had to be resolved explicitly when the library was designed: For predictability, you just cannot have both.</p>
<p>That being said, maybe you can tweak the result by passing <code>conflict_handler='resolve'</code>? <a href="https://docs.python.org/3/library/argparse.html#allow-abbrev" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#allow-abbrev</a></p>
</div>
<span class="comment-copy">The abbreviation parameter applies to the  flagged arguments of the parser, not to the names or aliases that invoke the subparser.</span>
<span class="comment-copy">Note that allow_abbrev default is true.  What has really been added with 3.6 is the ability to turn it off.  Earlier versions always accepted abbrev.  But it never applied to argument <code>choices</code>, just to the <code>--foo</code> like flags.</span>
<span class="comment-copy">Thanks for the thorough response! This definitely beats trying to figure out the doc.</span>
<span class="comment-copy">What are you giving the parser?  <code>parser.parse_args(list('caes'])</code>?  Looks like the <code>argv</code> list is <code>['c','a','e','s']</code>.</span>
<span class="comment-copy">actually, I was talking about <code>parser.parse_args(["caes"])</code>. The thing here is that it should be possible to combine short command line flags. Exactly the same as with POSIX <code>getopt.h</code>, think <code>tr -cd</code>, <code>grep -vERF</code>, or the famous <code>tar xvzf</code>.</span>
<span class="comment-copy">Short options can be combined, as in <code>python prog.py -caes</code>.  But this does not apply to subparser commands. Only one 'word' works.</span>
