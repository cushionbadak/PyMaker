<div class="post-text" itemprop="text">
<p>Honestly, trying to find a solution to this problem has been driving me insane, because every answer is either about using regex to truncate a string, or regex patterns having a max length (in which case, shouldn't it throw an error, not truncate the pattern string?)</p>
<p>Anyways. I'm using a regex pattern supplied by my employer. The intent is to match only the host name in any url string (so like python.org from <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/regex.html</a>). I've seen recommendations to use urllib.parse, but it doesn't strip out the hostname properly if there is a subdomain. Here is the regex string I was given to use:</p>
<pre><code>\b(([a-zA-Z0-9\-_]+)\.)+
(?!exe|php|dll|doc|docx|txt|rtf|odt|xls|xlsx|ppt|pptx|bin|
pcap|ioc|pdf|mdb|asp|html|xml|jpg|gif|png|lnk|log|vbs|lco|bat|shell|quit|pdb|vbp|
bdoda|bsspx|save|cpl|wav|tmp|close|py|ico|ini|sleep|run|dat|scr|jar|jxr|apt|w32|css|
js|xpi|class|apk|rar|zip|hlp|tmp|cpp|crl|cfg|cer|plg|tmp)([a-zA-Z]{2,5}|support|report|
i2p|technology|xn--p1ai|com#|moscow|technology)
</code></pre>
<p>It's very long. If I place it into a regex checker such as <a href="https://pythex.org" rel="nofollow noreferrer">https://pythex.org</a>, it happily tells me that it works perfectly. However, if I use either a Python shell or the Python interpreter, compiling it and then returning the compiled pattern gives me this:</p>
<pre><code>re.compile('\\b(([a-zA-Z0-9\\-_]+)\\.)+(?!exe|php|dll|doc|docx|txt|rtf|odt|xls|xlsx|
ppt|pptx|bin|pcap|ioc|pdf|mdb|asp|html|xml|jpg|gif|png|lnk|log|vbs|lco|bat|shell|quit|
pdb|vbp|bdoda|bsspx|save|cpl|wav|tmp|clos)
</code></pre>
<p>Can someone tell me why it's being truncated (for my own knowledge), and suggest a better way to do things? The goal is to do something like this:</p>
<pre><code>https://docs.python.org/3/library/socket.html -&gt; python.org
www.example.info                              -&gt; example.info
docs.google.com                               -&gt; google.com
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Can someone tell me why it's being truncated (for my own knowledge),
  and suggest a better way to do things?</p>
</blockquote>
<p>Python has a regex pattern limit. See <a href="https://stackoverflow.com/questions/30221835/python-regex-pattern-max-length-in-re-compile">this</a> and <a href="https://stackoverflow.com/questions/1998261/pythons-regular-expression-source-string-length">this</a>. Questions where max limit is reached.</p>
<blockquote>
<p>suggest a better way to do things?</p>
</blockquote>
<p>Casimir's comment is right though, <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer">urllib.parse</a>'s <code>urlparse</code> would achieve your intended result in a much neater fashion.</p>
<p>This answer is probably a combination of urlparse and however you determined what is an extension and what isn't. This may help: <a href="https://stackoverflow.com/questions/1521592/get-root-domain-of-link">Get root domain</a>.</p>
</div>
<span class="comment-copy">Out[227]:  <code>re.compile(r'\x08(([a-zA-Z0-9\-_]+)\.)+(?!exe|php|dll|doc|docx|txt|rtf|odt|xls|xlsx|ppt|pptx|bin|pcap|ioc|pdf|mdb|asp|html|xml|jpg|gif|png|lnk|log|vbs|lco|bat|shell|quit|pdb|vbp|bdoda|bsspx|save|cpl|wav|tmp|close|py|ico|ini|sleep|run|dat|scr|jar|jxr|apt|w32|css|js|xpi|class|apk|rar|zip|hlp|tmp|cpp|crl|cfg|cer|plg|tmp)([a-zA-Z]{2,5}|support|report|i2p|technology|xn--p1ai|com#|moscow|technology)', re.UNICODE)</code> . You sure you didn't make a typo somewhere?</span>
<span class="comment-copy">In this case use urllib and build the code to strip the domain name the way you want. But please stop this cheat.</span>
<span class="comment-copy">The pattern's string representation may be truncated, but the pattern still works as expected. Have you actually used it?</span>
<span class="comment-copy">Please calm down, folks. I did not write the regex.  But that's a good point about using urllib and then building from there.</span>
<span class="comment-copy">As for typos, I definitely could have made a mistake. It's long, and keeping track of things is very difficult in it. That's one reason I was looking for another solution. Maybe it has to do with a hard wrap length in my IDE?</span>
<span class="comment-copy">Hey, thanks! I'll have to read those links. Regex has always been a confusing beast for me. As far as the parsing itself, I found a perfect solution in tldextract. It separates any url into subdomain, domain, and suffix reliably.</span>
<span class="comment-copy">Glad you found the perfect solution! I'll have to check it out too.</span>
