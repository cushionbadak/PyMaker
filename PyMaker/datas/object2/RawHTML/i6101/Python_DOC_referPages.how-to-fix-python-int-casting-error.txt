<div class="post-text" itemprop="text">
<p>I'm attempting <a href="https://projecteuler.net/problem=484" rel="nofollow noreferrer">Project Euler problem 484</a>.  I'm in the beginning stages of the problem and am just searching for patterns in the numbers.</p>
<p>The problem requests me to find an "arithmetic derivative".  For example, to find the arithmetic derivative of 60:</p>
<blockquote>
<p>60 = 2^2 * 3^1 * 5^1</p>
<p>60' = (2/2 + 1/3 + 1/5) * 60 = 92</p>
</blockquote>
<p>I utilized the built in primefac algorithm, and created a method for the arithmetic derivative.  Here is my code:</p>
<pre><code>import primefac

def ad(n):
  ans = 0
  for i in set(primefac.primefac(n)):
    ans += 1.0*list(primefac.primefac(n)).count(i)/i
  return n*ans

print ad(30) ,  31.0 // PRINTS 31.0 31.0
print int(ad(30))    // PRINTS 30
print ad(30) == 31.0 // PRINTS False
</code></pre>
<p>Python casts 31.0 as an int to 30. Is this a floating point error? What is more perplexing is that <code>ad(30)</code> prints 31.0 but returns False when evaluated against each other. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is a floating point issue. There's an easy fix, though... since <code>n</code> will always by definition be evenly divisible by <code>i</code>, you can cut out the floating point math entirely:</p>
<pre><code>def ad(n):
    ans = 0
    for i in set(primefac.primefac(n)):
        ans += n * list(primefac.primefac(n)).count(i) // i
    return ans
</code></pre>
</div>
<span class="comment-copy">What does <code>print(repr(ad(30)))</code> display?  And what version of Python are you using?</span>
<span class="comment-copy">Also, FYI: <code>primefac</code> isn't "built in", it's an external module.</span>
<span class="comment-copy">Perhaps what you're looking for is round rather than int, or perhaps you shouldn't have any floats as intermediary values in the first place (if you only intend to do exact operations, then you should not be using floats at all because they are approximations)</span>
<span class="comment-copy">30.999999999999996 and python 2.7.10</span>
<span class="comment-copy">That makes sense.  It's just a display issue with <code>print</code> (more accurately, with <code>float.__str__</code>) which I'm fairly sure was addressed somewhere in the 3.0 branch.  <code>int</code> will truncate/round down, so everything you're showing makes sense.  If you want to test for "equality" with floats, it's best to use some "closeness" test (e.g. Python3.5+ <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer"><code>math.isclose</code></a>) or some similar backport.  <code>numpy.isclose()</code> may also be an option.  (See also <a href="https://www.python.org/dev/peps/pep-0485/#other-approaches" rel="nofollow noreferrer">PEP485</a>)</span>
<span class="comment-copy">Also, unrelated to this question, but note that you're rerunning <code>primefac</code>, an expensive operation, once for every different factor in <code>n</code>. Better to run it once at the beginning of the function and save the results.</span>
