<div class="post-text" itemprop="text">
<p>I am looking for python equivalent to these data structure in C++</p>
<pre><code>map&lt;string,set&lt;string&gt;&gt;
</code></pre>
<ol>
<li>sorted by key</li>
<li>the value to be a set </li>
</ol>
<p>and</p>
<pre><code>map&lt;key,val&gt;
</code></pre>
<ol>
<li>sorted by key</li>
</ol>
<p>After reading this: <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">https://docs.python.org/2/library/collections.html#collections.OrderedDict</a>
I still didn't find anything suitable. </p>
</div>
<div class="post-text" itemprop="text">
<p>There is no perfect mapping between c++ and python; python is dynamically typed.</p>
<p><code>map&lt;string,set&lt;string&gt;&gt;</code> is equivalent to (using <code>OrderedDict</code> to preserve the order of the keys, otherwise, <code>dict</code> suffice.): 
<code>OrderedDict()</code>, where the <code>keys</code> are strings, and the <code>values</code> are <code>sets</code> in which you insert strings</p>
<pre><code>from collections import OrderedDict  
a = OrderedDict()

a['my_key'] = set()
a['my_key'].add('my_string')
</code></pre>
<blockquote>
<p>note. The OrderedDict will not be ordered "by key", but by insertion
  order of the keys (thanks to @timgeb in the comments)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In python do you have 4 data structures: lists, tuples, sets and dicts.
You can create your own structure combining them:</p>
<p>First:</p>
<pre><code>data = {'my_set':set()}
</code></pre>
<p>Second:</p>
<pre><code>data = {'key': 'value'}
</code></pre>
<p>And you can sort this data structures using the collections module.
<a href="https://stackoverflow.com/questions/9001509/how-can-i-sort-a-dictionary-by-key">How can I sort a dictionary by key?</a></p>
</div>
<span class="comment-copy">Please elaborate on what exactly you mean by "sorted by key".</span>
<span class="comment-copy">I used defaultdict for the dictionary of sets: <a href="https://docs.python.org/3/library/collections.html#defaultdict-objects" rel="nofollow noreferrer">docs.python.org/3/library/collections.html#defaultdict-objects</a>  the extracing in Olog(n) <i>easily</i> remained a puzzle for me.  The solution I have now: sort the dictionary, do a binary search yourself...</span>
<span class="comment-copy">That would have been my answer, too. Just a note. The <code>OrderedDict</code> will not be ordered "by key", but by insertion order of the keys.</span>
<span class="comment-copy">Good point, I'll add it as a note to my answer, thank you</span>
<span class="comment-copy">like @timgeb said ordereddict orders by the order we inserted the elements.... The point for me of having a sorted dictionary is that I could search in Olog(n)</span>
<span class="comment-copy">You can sort the dictionary keys, using the ordering you like, before accessing the values.</span>
<span class="comment-copy">@ReblochonMasque but when pulling an element out of the dictionary: example: a['my_key']  how it would know it is sorted and to use binary search?</span>
<span class="comment-copy">"And you can sort this data structures using the collections module." What do you mean, exactly?</span>
<span class="comment-copy">This structures are not ordered by default, are hashable data structures, if you want that the information to be ordered you will need to use OrderedDict like Masque said in the another answer.</span>
<span class="comment-copy">like @timgeb said ordereddict orders by the order we inserted the elements.... The point for me of having a sorted dictionary is that I could search in Olog(n) If I sort the data structure each time it only hurts my performance.</span>
