<div class="post-text" itemprop="text">
<p>I am wondering what the best way to look for a start and end sequence in a byte stream from a file. The way I have been doing this is:</p>
<pre><code>begin_msg = [b'B', b'E', b'G', b'I', b'N', b'_', b'M', b'S', b'G', b'#']
end_msg = [b'#', b'E', b'N', b'D', b'_', b'M', b'S', b'G']

with open(file, 'rb') as _file:

begin_id = [b'', b'', b'', b'', b'', b'', b'', b'', b'', b'']
end_id = [b'', b'', b'', b'', b'', b'', b'', b'']

if True:

    byte = _file.read(1)

    capturing = False

    while byte != b'':

        begin_id.append(byte)
        begin_id.pop(0)
        end_id.append(byte)
        end_id.pop(0)

        if begin_id == begin_msg:
            capturing = True

        if end_id == end_msg:
            capturing = False
            break

        byte = _file.read(1)

        if capturing:
            byte_message += byte
</code></pre>
<p>I am sure there is a better way to do this. What is the cleanest way to look for these beginning and ending identifiers?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want to do sounds like something Python's <a href="https://docs.python.org/3/library/re.html#module-re" rel="nofollow noreferrer"><code>re</code></a> regular expressions (aka regex) module can handle. You can use it to parse a byte-string (instead of the usual text-string) if you pass it a byte-string to parse and also define your pattern as a byte-string. Note: The easiest way to do that is to use the <code>b</code> string prefix in front of them (not in front of each character, as you're doing in your question).</p>
<p>For testing the code coming up I used a file with this in it (sorry, not very imaginative):</p>
<pre class="lang-none prettyprint-override"><code>BEGIN_MSG#
Douglas was here.
#END_MSG
Other stuff
in here.
BEGIN_MSG#
And so
was Roger.
#END_MSG
</code></pre>
<p>Then used the module on it with the proper regex <code>pattern</code> like so:</p>
<pre><code>import re

pattern = rb'BEGIN_MSG#(.+?)#END_MSG'
filename = 'bytestream.txt'

with open(filename, 'rb') as file:
    matches = re.findall(pattern, file.read(), flags=re.DOTALL)
    if not matches:
        print('No matches found')
    else:
        print('Matches:')
        for i, match in enumerate(matches, 1):
            print('#{}: {}'.format(i, match))
</code></pre>
<p>The output from it looks like this, displaying the list of strings returned from <code>re.findall()</code>:</p>
<pre class="lang-none prettyprint-override"><code>Matches:
#1: b'\r\nDouglas was here.\r\n'
#2: b'\r\nAnd so\r\nwas Roger.\r\n'
</code></pre>
</div>
<span class="comment-copy">What do you think <code>If True</code> is doing?</span>
<span class="comment-copy">When begin_msg is found in the code it begins capturing the following bytes. If it hasn't reached the start sequence, its not storing the bytes.</span>
