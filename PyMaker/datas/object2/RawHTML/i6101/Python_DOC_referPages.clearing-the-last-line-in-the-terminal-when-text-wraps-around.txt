<div class="post-text" itemprop="text">
<p>In my python program I want to print progress over a very long loop. I want to output specific information like percent complete etc..., but I don't want all this output to take up the whole screen. </p>
<p>Ideally, I want to to print a progress line. Something like </p>
<pre><code>train 53/56...x6 │ loss:1.356 │ miou:0.276 │ rate=3.13 Hz, eta=0:00:01, total=0:00:17, wall=19:48 EST
</code></pre>
<p>Then, when the next line prints, I want to simply overwrite this line. </p>
<p>Currently I can do this by simply printing carriage return <code>'\r'</code> before I print my message. This returns the cursor to the beginning of the line and then overwrites the line. Exactly what I want. </p>
<p>The issue is when the terminal is too small for the entire line to fit, the line wraps around and the carriage return brings me to the beginning of the wrapped line, not the absolute beginning of the line. </p>
<p>Is there a way that I can bring the cursor all the way back to the beginning of the correct line?  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html" rel="nofollow noreferrer">ANSI escape sequences for cursor movement</a>, most notably:</p>
<blockquote>
<ul>
<li>Position the Cursor: <code>\033[&lt;L&gt;;&lt;C&gt;H</code>, or <code>\033[&lt;L&gt;;&lt;C&gt;f</code>
  puts the cursor at line L and column C.</li>
<li>Move the cursor up N lines:
  <code>\033[&lt;N&gt;A</code></li>
<li>Move the cursor down N lines:
  <code>\033[&lt;N&gt;B</code></li>
<li>Move the cursor forward N columns:
  <code>\033[&lt;N&gt;C</code></li>
<li>Move the cursor backward N columns:
  <code>\033[&lt;N&gt;D</code></li>
<li>Save cursor position:
  <code>\033[s</code></li>
<li>Restore cursor position:
  <code>\033[u</code></li>
</ul>
</blockquote>
<p>Cursor position save/restore seem ideal for you case, but unfortunately these two codes are not honored by many terminal emulators.</p>
<p>They work in <code>xterm</code> and <code>xfce4-terminal</code> though (except when in the last line of terminal / scrolling output, as noted by @ThomasDickey in comments). Try:</p>
<pre><code>echo -e "\033[s" {1..100} "\033[u" "Overwrite"
</code></pre>
<p>For other terminal emulators, you can try your luck with <code>\033[&lt;N&gt;A</code> to move cursor up for the required number of lines, and then move to column <code>0</code>.</p>
<p>If you know the length of your line, you can calculate how many rows does it span when (and if wrapped) with (<code>bash</code> example, note the usage of <code>COLUMNS</code> environment variable):</p>
<pre><code>line='...'
len=${#line}
rows=$((len / COLUMNS))
</code></pre>
<p>and then move up with:</p>
<pre><code>printf "\033[%dA" "$rows"
</code></pre>
<hr/>
<p>In Python, you could use it like:</p>
<pre><code>print("\033[s", "123"*100, "\033[u", "Overwrite", sep='')
print("\033[%dA" % 3, "Overwrite", sep='')
</code></pre>
<p>Or, abstract all this with something like <a href="https://docs.python.org/3/library/curses.html#module-curses" rel="nofollow noreferrer"><code>curses</code></a>.</p>
<hr/>
<h3>Python solution</h3>
<p>Based on the <em>Move the cursor up N lines</em> ANSI escape sequence (that should work in most terminal emulators), and a cross-Python compatible <a href="https://stackoverflow.com/a/943921">code for terminal width detection</a> (in Python3 you can use <code>shutil.get_terminal_size</code>), here's a proof-of-concept demo that <strong>works with scrolling output, adapts to line length and changing terminal width</strong>:</p>
<pre><code>#!/usr/bin/env python
from __future__ import print_function
import os
import time

cnt = 0
while True:
    with os.popen('stty size', 'r') as stty:
        rows, columns = stty.read().split()

    line = "Run: {}, Columns: {}, Filler: {}".format(cnt, columns, "***"*100)
    print(line)
    print("\033[{}A".format(len(line) // int(columns) + 1), end='')

    time.sleep(1)
    cnt += 1
</code></pre>
</div>
<span class="comment-copy">Cursor save/restore won't help with the scenario asked about, if the output started at the bottom of the screen, because the line that you'd like to go to has moved.  (Also, using hardcoded sequences is the problem <b>you</b> had with the cursor save/restore).</span>
<span class="comment-copy">That's true, fixed that in Python version.</span>
<span class="comment-copy">@ThomasDickey, sorry, I missed your comment edit - what do you mean with hardcoded sequences not working?</span>
<span class="comment-copy">If you remove the time.sleep(), it seems like you may run into a race condition causing you get the wrong terminal size and causing the screen to fill with weird output. Would using curses work around this issue?</span>
<span class="comment-copy">Yes, if you remove <code>sleep</code>, the probability increases you'll sample the wrong terminal size during resize. Don't think curses could help you with that. But terminal resize shouldn't be that frequent, and OTOH, why would you need progress update every millisecond, or so?</span>
