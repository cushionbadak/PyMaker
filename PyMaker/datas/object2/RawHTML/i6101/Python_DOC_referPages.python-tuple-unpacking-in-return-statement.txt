<div class="post-text" itemprop="text">
<p>The Python language (especially 3.x) allows very general <em>unpacking</em> of iterables, a simple example of which is</p>
<pre><code>a, *rest = 1, 2, 3
</code></pre>
<p>Over the years, this unpacking has been gradually generalized (see e.g. <a href="https://www.python.org/dev/peps/pep-3132/" rel="noreferrer">PEP 3132</a> and <a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer">PEP 448</a>), allowing it to be used in more and more circumstances. As so, I was surprises to discover that the following is invalid syntax in Python 3.6 (and remains so in Python 3.7):</p>
<pre><code>def f():
    rest = [2, 3]
    return 1, *rest  # Invalid
</code></pre>
<p>I can make it work by encapsulating the returned tuple in parentheses like so:</p>
<pre><code>def f():
    rest = [2, 3]
    return (1, *rest)  # Valid
</code></pre>
<p>The fact that I use this in a <code>return</code> statement seems to be important, as</p>
<pre><code>t = 1, *rest
</code></pre>
<p>is indeed legal and results in the same with and without parentheses.</p>
<p>Have this case simply been forgotten by the Python developers, or are there any reason why this case is invalid syntax?</p>
<h3>Why I care</h3>
<p>This breaks an important contract I thought I had with the Python language. Consider the following (also valid) solution:</p>
<pre><code>def f():
    rest = [2, 3]
    t = 1, *rest
    return t
</code></pre>
<p>Normally when I have code like this, I consider <code>t</code> to be a temporary name, which I ought to be able to get rid of simply be replacing <code>t</code> in the bottom line with its definition. In this case though, this leads to the invalid code</p>
<pre><code>def f():
    rest = [2, 3]
    return 1, *rest
</code></pre>
<p>It's of course no big deal to have to place parentheses around the return value, but usually additional parentheses are only needed to distinguish between several possible outcomes (grouping). Here this is not the case, as leaving out the parentheses does not produce some other unwanted behavior, but rather no behavior at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect this is an accident, based on the comments from <a href="https://github.com/python/cpython/commit/4905e80c3d2f6abb613d212f0313d1dfe09475dc" rel="noreferrer">this commit</a> for Python 3.2.</p>
<p>That commit enabled the assignment expression to take a <code>testlist_star_expr</code> production (what allows the unparenthesized unpacking), but left the return statement taking a <code>testlist</code> production. I suspect the commit just missed this (and possibly other locations, but I'm focusing on the <code>return_stmt</code> production for now).</p>
<p>I went ahead and modified the Python Grammar/Grammar file to allow this. All of the tests continue to pass, including those in the <code>test_grammar.py</code> file (but this doesn't seem terribly exhaustive).</p>
<p>If you're curious, <a href="https://github.com/dacut/cpython/commit/6fc7d4fda05b137e9b4f89ca95c492f699643d9d" rel="noreferrer">this is the change I made</a>. Feel free to clone or download <a href="https://github.com/dacut/cpython" rel="noreferrer">my fork</a>.</p>
<p><strong>UPDATE:</strong> I've submitted a <a href="https://bugs.python.org/issue32117" rel="noreferrer">bpo issue</a> and a <a href="https://github.com/python/cpython/pull/4509" rel="noreferrer">pull request</a> for the return (and yield) unpacking.</p>
</div>
<span class="comment-copy">This is really more a consequence of the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">grammar syntax</a> than anything else.</span>
<span class="comment-copy">You can't also just return *rest, it's invalid syntax.</span>
<span class="comment-copy">@lapisdecor Yea, but that's consistent with the fact that <code>t = *rest</code> is invalid. Also, <code>return *rest</code> and <code>t = *rest</code> does not represent any actual unpacking, so I don't find it a problem that this is not allowed. If it were allowed, <code>*rest</code> on its own would then only be a confusing syntax for <code>tuple(rest)</code>.</span>
<span class="comment-copy">This happens with more than just <code>return</code>. Unpackings are also forbidden in a <code>yield</code> argument, a subscript, the RHS of an <i>augmented</i> assignment (but not a regular assignment), and on the right of the <code>in</code> in a <code>for</code> statement, despite unparenthesized tuples being allowed in all those positions, because the syntax for those things uses <code>expression_list</code> instead of <code>starred_expression</code>.</span>
<span class="comment-copy">Note the difference between <code>t = *rest</code> and <code>t = *rest,</code>. The latter is valid.</span>
<span class="comment-copy">Did you make a pull request with this change yet?</span>
<span class="comment-copy">Not yet. Wanted to see if this correctly solves what @jmd_dk was after, and maybe look at a few other cases (like the <code>yield_stmt</code> production) before sending it on.</span>
<span class="comment-copy">Creating a 'fix' seems a bit pre-mature, maybe submit a bug report first if you think this was an accident <a href="https://bugs.python.org/" rel="nofollow noreferrer">bugs.python.org</a></span>
<span class="comment-copy">The fix is set to appear in Python 3.8</span>
