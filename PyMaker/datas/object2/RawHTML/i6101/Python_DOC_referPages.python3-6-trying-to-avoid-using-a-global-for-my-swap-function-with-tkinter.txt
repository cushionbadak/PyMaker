<div class="post-text" itemprop="text">
<p>I have only been programming 3 months so any advice on improvement to my code is appreciated even if it inst related to my specific question.</p>
<p>Its a simple small project with tkinter. Two fields to enter your first and last name then you  hit the swap button and it will swap what ever you put in the name fields. 
Problem is I dont want to use globals and I cant seem to figure it out I know its probably something easy and I did spend time trying to figure it out.
If you have any improvements to the code let me know.</p>
<pre><code>from tkinter import *

### I dont Want Globals but cant figure out another method for doing this
### Hope some one can help me with this part

evar = ""
evar1 = ""


def mainWindow():
    root = Tk()
    root.title("Swap Names")
    root.geometry("400x150+100+250")

    return root

def createVar():
        global evar
        global evar1

        evar = StringVar()
        evar1 = StringVar()

def firstNameFrame(root):
    frame1 = Frame(root)
    frame1.pack(side=TOP, padx=2, pady=2)

    label = Label(frame1, text="First Name:")
    label.pack(side=LEFT, padx=2, pady=2)

    entry = Entry(frame1, textvariable = evar)
    entry.pack(side=LEFT, pady = 2)

def lastNameFrame(root):

    frame2 = Frame(root)
    frame2.pack(side=TOP, padx=2, pady=2)

    label = Label(frame2, text="Last Name:")
    label.pack(side=LEFT, padx=1, pady=1)

    entry = Entry(frame2, textvariable = evar1)
    entry.pack(side=LEFT, pady = 5)

def swapFrame(root):
    frame3 = Frame(root)
    frame3.pack(side=TOP, padx=10, pady = 10)

    swapButton = Button(frame3, text="Swap",command = swap)
    swapButton.pack(side=LEFT, padx =5, pady=5)

### I would like to some how use swap with out using a global 
def swap():
    b=evar.get()
    evar.set(evar1.get())
    evar1.set(b)



def main():
    root = mainWindow()
    createVar()
    firstNameFrame(root)
    lastNameFrame(root)
    swapFrame(root)
    root.mainloop()


main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One of the solutions can be wrapping all the code related to the initialization and working with Tk in a separate class, so instead of global variables, we will use the class instance variables:</p>
<pre><code>from tkinter import *


class Gui(object):
    def __init__(self):
        self.root = Gui._init_main_window()
        self.first_name_var = StringVar()
        self.last_name_var = StringVar()

        self._init_first_name_frame()
        self._init_last_name_frame()
        self._init_swap_frame()

    @staticmethod
    def _init_main_window():
        root = Tk()
        root.title("Swap Names")
        root.geometry("400x150+100+250")

        return root

    def _init_first_name_frame(self):
        frame1 = Frame(self.root)
        frame1.pack(side=TOP, padx=2, pady=2)

        label = Label(frame1, text="First Name:")
        label.pack(side=LEFT, padx=2, pady=2)

        entry = Entry(frame1, textvariable=self.first_name_var)
        entry.pack(side=LEFT, pady=2)

    def _init_last_name_frame(self):
        frame2 = Frame(self.root)
        frame2.pack(side=TOP, padx=2, pady=2)

        label = Label(frame2, text="Last Name:")
        label.pack(side=LEFT, padx=1, pady=1)

        entry = Entry(frame2, textvariable=self.last_name_var)
        entry.pack(side=LEFT, pady=5)

    def _init_swap_frame(self):
        frame3 = Frame(self.root)
        frame3.pack(side=TOP, padx=10, pady=10)

        swap_button = Button(frame3, text="Swap", command=self._swap)
        swap_button.pack(side=LEFT, padx=5, pady=5)

    def _swap(self):
        tmp = self.first_name_var.get()
        self.first_name_var.set(self.last_name_var.get())
        self.last_name_var.set(tmp)

    def mainloop(self):
        return self.root.mainloop()


def main():
    gui = Gui()
    gui.mainloop()


if __name__ == '__main__':
    main()
</code></pre>
<p><strike>A small comment to the code above: adding a prefix <code>__</code> to variables or methods allows you to hide access to them directly by name outside the class using <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" rel="nofollow noreferrer">the name mangling.</a></strike></p>
<p><strong>UPD:</strong> According to <a href="https://stackoverflow.com/questions/47247867/python3-6-trying-to-avoid-using-a-global-for-my-swap-function-with-tkinter/47248307#comment81448043_47248307">@Coal comment</a>, changed the double underscore prefixes to single underscore, as there is no need to use a name mangling.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is assuming that when you say you don't want to use <code>global</code>, that you also mean that you <strong>don't</strong> want to use <code>self</code>:</p>
<pre><code>from tkinter import Tk, Button, Entry

def swap(fn, ln):

    # Get the contents of the two fields.
    first = fn.get()
    last = ln.get()

    # Clear the contents of both fields.
    first_name.delete(0, 'end')
    last_name.delete(0, 'end')

    # Set each field to the previous content of the other field.
    first_name.insert(0, last)
    last_name.insert(0, first)


root = Tk()

first_name = Entry(root)
last_name = Entry(root)

first_name.insert(0, "Enter first name")
last_name.insert(0, "Enter last name")

first_name.pack()
last_name.pack()

swap_button = Button(root, text="SWAP", command=lambda:swap(first_name, last_name))
swap_button.pack()



root.mainloop()
</code></pre>
</div>
<span class="comment-copy">I'm assuming that when you say you don't want to use global, that you also don't want to use <code>self</code>? If so, I have an answer down below.</span>
<span class="comment-copy">OP said he didn't want to use globals. <code>self</code> exposes that variable to the global scope. I'm not sure this is what OP wants.</span>
<span class="comment-copy">Name mangling should only be used when subclassing to avoid potentially breaking functionality. A single leading underscore denotes a private variable</span>
