<div class="post-text" itemprop="text">
<p>All I would like to do is to enter three scores for player1, and have them appended to the list please:</p>
<pre><code>player1=[0,0,0]
player2=[0,0,0]

print('please enter your score for player 1, round 1')
player1.append=int(input([0]))
print('please enter your score for player 1, round 2')
player1.append=int(input([1]))
print('please enter your score for player 1, round 3')
player1.append=int(input([2]))

print(player1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>list.append() - it's a method, so</p>
<pre><code>player1=[]
player2=[]

print('please enter your score for player 1, round 1')
player1.append(int(input([0])))
print('please enter your score for player 1, round 2')
player1.append(int(input([1])))
print('please enter your score for player 1, round 3')
player1.append(int(input([2])))

print(player1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>.append =</code> assigns a value to <code>append</code> method, which is read only and its not what you want. 
<code>.append()</code> makes and actual call to <code>append</code> method</p>
<p>This can be solved with little research. Please grab a good Python book and spent few hours on it. Good luck!</p>
<pre><code>my_list = []

print('please enter your score for player 1, round 1')
my_list.append(int(input([0])))
print('please enter your score for player 1, round 2')
my_list.append(int(input([1])))
print('please enter your score for player 1, round 3')
my_list.append(int(input([2])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>player1=[]
i=1
while i &lt; 4:
    print('please enter your score for player 1, round ', i)
    player1.append(int(input()))
    i+=1
print(player1)
</code></pre>
<p>Output</p>
<pre><code>please enter your score for player 1, round  1
2
please enter your score for player 1, round  2
3
please enter your score for player 1, round  3
4
[2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to assing a value to list.append function. Rather you should give it as an argument to list.append function.
Below code would do and is simplified one.</p>
<pre><code>player1=[]
for i in range(1, 4):
    player1.append(int(input('please enter your score for player 1, round {}\n'.format(i))))
print(player1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>.append</code> is a <em>method</em> of a list, which means you should "call" it, for example like <code>my_list.append(item)</code>. Also, <code>input()</code> accepts an argument, which is the string to print before getting the input - you can do something like <code>input("enter your name &gt; ")</code>. Using this, it might make sense to write a reusable function that gets a score for a certain player and round:</p>
<pre><code>def get_score(player, round_):
    return int(input("Enter the score for player {}, round {}&gt; ".format(player, round_)))
</code></pre>
<p>The round argument is named <code>round_</code> as <code>round</code> is already a Python builtin. Beware that this will crash if the user doesn't enter an integer, but that would take quite a bit more logic to fix. We can also write a function that collects a player's scores for a whole round:</p>
<pre><code>def _get_round_scores(player, rounds):
    scores = []
    for round_ in range(rounds):
        scores.append(get_score(player, round_ + 1))
    return scores
</code></pre>
<p>This uses a <code>for</code> loop to append a score for each round (note how the logic of actually getting the score has been abstracted away). It's prefixed with an underscore as this isn't the "final" version. Using this, we might even write a similar function to get scores for different players:</p>
<pre><code>def _get_player_scores(players, rounds):
    players = []
    for player in range(players):
        players.append(_get_round_scores(player + 1, rounds))
    return players
</code></pre>
<p>However, we can actually rewrite both without needing <code>append</code> at all, with Python list comprehensions (which should be well documented elsewhere), like so:</p>
<pre><code>def get_round_scores(player, rounds):
    return [get_score(player, round_ + 1) for round_ in range(rounds)]

def get_player_scores(players, rounds):
    return [get_round_scores(player + 1, rounds) for player in range(players)]
</code></pre>
<p>Now, we can use our functions like so:</p>
<pre><code>scores = player1, player2 = get_player_scores(players=2, rounds=3)
print(scores)
print(player1)
print(player2)
</code></pre>
<p>To get this behaviour:</p>
<pre><code>Enter the score for player 1, round 1&gt; 1
Enter the score for player 1, round 2&gt; 2
Enter the score for player 1, round 3&gt; 3
Enter the score for player 2, round 1&gt; 4
Enter the score for player 2, round 2&gt; 5
Enter the score for player 2, round 3&gt; 6
[[1, 2, 3], [4, 5, 6]]
[1, 2, 3]
[4, 5, 6]
</code></pre>
</div>
<span class="comment-copy">If the user inserts <code>1</code>, <code>2</code> and <code>3</code> you want <code>[0,0,0,1,2,3]</code> or <code>[1,2,3]</code>?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a>   This will help you learn more about the methods operating on Python Data Structures.</span>
<span class="comment-copy">[1,2,3] for the first, then [1,2,3] for the second  Thank you for the link!</span>
<span class="comment-copy">Instead of recommending a book, you'd better specify to the user <i>why</i> you are using <code>.append()</code> instead of <code>.append=</code></span>
<span class="comment-copy">Why not <code>for i in range(1, 4)</code>?</span>
<span class="comment-copy">@IzaakvanDongen sure. which is better?</span>
<span class="comment-copy">Thank you.  I tried this and my computer is printing that int object has no attribute append.  Edited to add, it was because I had a ridiculous variable name instead of i in range.  Thank you, worked perfect!</span>
<span class="comment-copy">fabulous, thank you!</span>
