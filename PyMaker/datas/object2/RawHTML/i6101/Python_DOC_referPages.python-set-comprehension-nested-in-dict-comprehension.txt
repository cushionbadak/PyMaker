<div class="post-text" itemprop="text">
<p>I have a list of tuples, where each <code>tuple</code> contains a <code>string</code> and a number in the form of:</p>
<pre><code>[(string_1, num_a), (string_2, num_b), ...]
</code></pre>
<p>The strings are nonunique, and so are the numbers, e.g. <code>(string_1 , num_m)</code> or <code>(string_9 , num_b)</code> are likely to exist in the list.</p>
<p>I'm attempting to create a dictionary with the string as the key and a set of all numbers occurring with that string as the value:</p>
<pre><code>dict = {string_1: {num_a, num_m}, string_2: {num_b}, ...}
</code></pre>
<p>I've done this somewhat successfully with the following dictionary comprehension with nested set comprehension:</p>
<pre><code>#st_id_list = [(string_1, num_a), ...]
#st_dict = {string_1: {num_a, num_m}, ...} 
st_dict = {
    st[0]: set(
        st_[1]
        for st_ in st_id_list
        if st_[0] == st[0]
    )
    for st in st_id_list
}
</code></pre>
<p>There's only one issue: <code>st_id_list</code> is 18,000 items long. This snippet of code takes less than ten seconds to run for a list of 500 tuples, but over twelve minutes to run for the full 18,000 tuples. I have to think this is because I've nested a set comprehension inside a dict comprehension.</p>
<p>Is there a way to avoid this, or a smarter way to it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a double loop, so you take O(N**2) time to produce your dictionary. For 500 items, 250.000 steps are taken, and for your 18k items, 324 <em>million</em> steps need to be done.</p>
<p>Here is a O(N) loop instead, so 500 steps for your smaller dataset, 18.000 steps for the larger dataset:</p>
<pre><code>st_dict = {}
for st, id in st_id_list:
    st_dict.setdefault(st, set()).add(id)
</code></pre>
<p>This uses the <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="noreferrer"><code>dict.setdefault()</code> method</a> to ensure that for a given key (your string values), there is at least an empty set available if the key is missing, then adds the current <code>id</code> value to that set.</p>
<p>You can do the same with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict()</code> object</a>:</p>
<pre><code>from collections import defaultdict

st_dict = defaultdict(set)
for st, id in st_id_list:
    st_dict[st].add(id)
</code></pre>
<p>The <code>defaultdict()</code> uses the factory passed in to set a default value for missing keys.</p>
<p>The disadvantage of the <code>defaultdict</code> approach is that the object <em>continues</em> to produce default values for missing keys after your loop, which can hide application bugs. Use <code>st_dict.default_factory = None</code> to disable the factory explicitly to prevent that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why are you using two loops when you could do in one loop like this:</p>
<pre><code>list_1=[('string_1', 'num_a'), ('string_2', 'num_b'),('string_1' , 'num_m'),('string_9' , 'num_b')]

string_num={}
for i in list_1:
    if i[0] not in string_num:
        string_num[i[0]]={i[1]}
    else:
        string_num[i[0]].add(i[1])

print(string_num)
</code></pre>
<p>output:</p>
<pre><code>{'string_9': {'num_b'}, 'string_1': {'num_a', 'num_m'}, 'string_2': {'num_b'}}
</code></pre>
</div>
<span class="comment-copy">Wow, hugely helpful, thank you! Added bonus: I was not aware of dict.setdefault() and have been emulating that functionality with if statements elsewhere! Thank you again!</span>
