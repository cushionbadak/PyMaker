<div class="post-text" itemprop="text">
<p>When using this following code: </p>
<pre><code>import random
sticks = 100
randomstep = random.randint(1, 6)
expertmarbles = random.randrange(1, sticks, 2**randomstep)
</code></pre>
<p>the output is producing everything excluding the step, so for example i would like this to output a random from these numbers: 2,4,8,16,32,64. However it will output everything but these numbers. Can anyone offer any advice, the reason i'm using variables here is because the amount of sticks will decrease.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>random.randrange</code> you could use <code>random.choice</code> (<a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer">docs</a>):</p>
<pre><code>import random
min_power = 1
max_power = 6
print(random.choice([2**i for i in range(min_power, max_power + 1)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this</p>
<pre><code>def myRand(pow_min,pow_max): 
    return 2**random.randint(pow_min,pow_max)
</code></pre>
<p>I would suggest you to use this instead of <code>random.choice</code>, which requires you to generate a list, which is unnecessary. </p>
</div>
<span class="comment-copy">Can you show examples of your actual and expected outputs?</span>
<span class="comment-copy">So an actual output would be 97 but an expected one would would be any random one from this list: 2,4,8,16,32,64.</span>
<span class="comment-copy">You can't use <code>step</code> for that. It can only do arithmetic progressions (1, 3, 5, 7...), not geometric (2, 4, 8, 16...).</span>
<span class="comment-copy">Why not just use <code>expertmarbles = 2**randomstep</code>?</span>
<span class="comment-copy">Okay thank you, it's for an ai type game where the amount of sticks the ai takes is to the power of 2 between 1 and a number and then deducts it from the amount left</span>
