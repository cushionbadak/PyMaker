<div class="post-text" itemprop="text">
<p>I am wanting to check if one of a number of regex matches succeeds.  If it does, I want access to the groups in the match.  If I didn't need the groups, I could do something like this:</p>
<pre><code>if re.match(pobj1,string):
    # First match worked
elif re.match(pobj2,string):
    # First match failed, but second one worked.
[...]
</code></pre>
<p>Since I haven't assigned the result of the match to anything, I don't see how to access any of the groups that were part of the match.  So instead I'm assigning the matches to a variable before the conditional.  But that means I'm running all the matches every time, not just the necessary ones.</p>
<pre><code>mobj1 = re.match(pobj1,string)
mobj2 = re.match(pobj2,string)  # Might be expensive
if mobj1:
    # First match succeeded.  Use the match information
    primary_list.append(mobj1.group(1))
elif mobj2:
    # First match failed, but second one worked.  Use info from #2.
    secondary_list.append(mobj2.group(1))
[...]
</code></pre>
<p>How do I only run the matches that are necessary, while still being able to access the groups from that match at a later time?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would list up your objects and run through them with a loop and breaking it once you found a match.</p>
<pre><code>for o in list_of_objects:
    matches = re.match(o,string)
    if matches:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could define a list of patterns and find the first matching one with <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; patterns = [re.compile('a.c'), re.compile('1.3'), re.compile('4.6')]
&gt;&gt;&gt; next((p for p in patterns if p.match('abc')), None)
re.compile('a.c')
&gt;&gt;&gt; next((p for p in patterns if p.match('436')), None)
re.compile('4.6')
&gt;&gt;&gt; next((p for p in patterns if p.match('XYZ')), None)
</code></pre>
<p><code>None</code> as a second argument for <code>next</code> is used to avoid a StopIteration:</p>
<pre><code>&gt;&gt;&gt; next(p for p in patterns if p.match('XYZ'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
</div>
