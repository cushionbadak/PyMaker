<div class="post-text" itemprop="text">
<p>I'd like to write a regex to replace matched string question.</p>
<p>A is the short string and B is a long one contains A.</p>
<pre><code>A = "5456-module - PAN-12"
B = "5456-module - PAN-12 (100%); 2883-controller - CHG-24; 2898-battery - BAT-12-100 (12 V/100); 2917-panel - MKT-200 (4 x PAN-12-50)"
</code></pre>
<p>I want to remove A part in B, as long as it contains A with “ (100%)”.</p>
<p>This line works well.</p>
<pre><code>Print re.sub(A + r'\s[()]100%[()];\s', "", B)
</code></pre>
<p>And it returns:</p>
<pre><code>2883-controller - CHG-24; 2898-battery - BAT-12-100 (12 V/100); 2917-panel - MKT-200 (4 x PAN-12-50)
</code></pre>
<p>However, when the A string contains “/” and “(”, “)”. It doesn’t work. Like:</p>
<pre><code>new_A = "5456-module - PAN-12 V/50 Wp (1/2 Inch)"
new_B = "5456-module - PAN-12 V/50 Wp (1/2 Inch) (100%); 2883-controller - CHG-24; 2898-battery - BAT-12-100 (12 V/100); 2917-panel - MKT-200 (4 x PAN-12-50)"
</code></pre>
<p>When I run the same line:</p>
<pre><code>Print re.sub(new_A + r'\s[()]100%[()];\s', "", new_B). 
</code></pre>
<p>nothing happens.</p>
<p>How can I make the line work? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>A</code> in your second example contains parentheses which the regex engine interprets as metacharacters (capture groups in this case). Since you want them matched literally, you'd need to <em>escape</em> them. This would involve appending a backslash before each such character.</p>
<p><code>re</code>, however, provides a nice little convenience function, <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a>, that does this for you.</p>
<p>Here's what you'd need to pass as your modified regex:</p>
<pre><code>r'{}\s\(100%\);\s'.format(re.escape(A))
</code></pre>
</div>
<span class="comment-copy">Try wrapping <code>re.escape(....)</code> around your existing expression and passing that. Your search string contains characters that regex interprets as meta-characters, so you'd have to escape them to get it working.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, thank you. do you mean re.sub(new_A + re.escape(r'\s[()]100%[()];\s'), "", new_B)?</span>
<span class="comment-copy">I mean <code>re.escape(A) + r'\s[()]100%[()];\s'</code></span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, genius! could you please answer this question so that I can choose yours?</span>
<span class="comment-copy">@COLDSPEED, marvelous! thank you again, sir, for making the world more beautiful!</span>
<span class="comment-copy">@MarkK You are welcome. Also, I fixed your expression a bit. ;-) You didn't need <code>[()]</code>, just the appropriate escaped paren.</span>
