<div class="post-text" itemprop="text">
<p>When it comes to <a href="https://stackoverflow.com/q/3844360/3357935">generating XML data in Python</a>, there are two libraries I often see recommended: <strong><em><a href="http://lxml.de" rel="noreferrer">lxml</a></em></strong> and <strong><em><a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="noreferrer">ElementTree</a></em></strong></p>
<p>From what I can tell, the two libraries are very similar to each other. They both seem to have similar module names, usage guidelines, and functionality. Even the import statements are fairly similar.</p>
<pre><code> # Importing lxml and ElementTree
import lxml.etree
import xml.etree.ElementTree
</code></pre>
<p>What are the differences between the <code>lxml</code> and <code>ElementTree</code> libraries for Python?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.5/library/xml.etree.elementtree.html" rel="noreferrer">ElementTree</a> comes built-in with the Python standard library which includes other data modules types such as <code>json</code> and <code>csv</code>. This means the module ships with each installation of Python. For most normal XML operations including building document trees and simple searching and parsing of element attributes and node values, even namespaces, <code>ElementTree</code> is a reliable handler.</p>
<p><a href="http://lxml.de/" rel="noreferrer">Lxml</a> is a third-party module that requires installation. In many ways <code>lxml</code> actually <em>extends</em> <code>ElementTree</code> as most operations in the built-in module are available. Chief among this extension is that <code>lxml</code> supports both XPath 1.0 and XSLT 1.0. Additionally, <code>lxml</code> can parse HTML documents that are not XML compliant and hence is used for web-scraping operations and even as the parser in <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="noreferrer">BeautifulSoup</a> and engine in Pandas, <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_html.html" rel="noreferrer"><code>pandas.read_html()</code></a>. Other useful, common features of lxml include <em>pretty_print</em> output, <a href="http://lxml.de/objectify.html" rel="noreferrer"><code>objectify</code></a>, and <a href="http://lxml.de/sax.html" rel="noreferrer"><code>sax</code></a> support. Of course too as a third-party module, versions with additional features are readily accessible compared to the standard library. </p>
</div>
<div class="post-text" itemprop="text">
<p>I wouldn't say that lxml is faster than ET across the board as both modules offer tons of functionality. To provide a little context, ElementTree also supports XPath, but particularly ET has a unique and useful function called <code>iterparse()</code> that remakes the XML document as an iterable. This results in much faster parsing, especially for large XML files.</p>
<p>The ET API itself creates Element types which are a hybrid cross between a list and dictionary. This can mean headaches for those new to the module, but sit down with it and you'll see that it's pretty flexible.</p>
</div>
<span class="comment-copy"><code>lxml</code> is significantly faster, can be used to parse HTML, and supports XPath. There is specifically <a href="http://lxml.de/1.3/compatibility.html" rel="nofollow noreferrer">a section in the lxml documentation</a> explaining the differences.</span>
<span class="comment-copy"><code>lxml</code> is also easier to use with namespaces</span>
<span class="comment-copy"><code>iterparse</code> is not unique to ElementTree; it exists in lxml too: <a href="http://lxml.de/parsing.html#iterparse-and-iterwalk" rel="nofollow noreferrer">lxml.de/parsing.html#iterparse-and-iterwalk</a>. And lxml fully supports XPath 1.0, while ElementTree only supports a subset of XPath features.</span>
