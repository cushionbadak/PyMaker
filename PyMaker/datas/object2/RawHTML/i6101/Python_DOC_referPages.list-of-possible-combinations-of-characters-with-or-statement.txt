<div class="post-text" itemprop="text">
<p>I managed to generate a list of all possible combinations of characters 'a', 'b' and 'c' (code below). Now I want to add a fourth character, which can be either 'd' or 'f' but NOT both in the same combination. How could I achieve this ?  </p>
<pre><code>items = ['a', 'b', 'c']
from itertools import permutations
for p in permutations(items):
     print(p)

('a', 'b', 'c')
('a', 'c', 'b')
('b', 'a', 'c')
('b', 'c', 'a')
('c', 'a', 'b')
('c', 'b', 'a')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Created a new list <code>items2</code> for <code>d</code> and <code>f</code>. Assuming that OP needs all combinations of <code>[a,b,c,d]</code> and <code>[a,b,c,f]</code></p>
<pre><code>items1 = ['a', 'b', 'c']
items2 = ['d','f']
from itertools import permutations
for x in items2:
    for p in permutations(items1+[x]):
        print(p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A variation on @Van Peer's solution. You can modify the extended list in-place:</p>
<pre><code>from itertools import permutations
items = list('abc_')
for items[3] in 'dg':
    for p in permutations(items):
        print(p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> is suitable for representing these distinct groups in a way which generalizes well. Just let the exclusive elements belong to the same iterable passed to the Cartesian product. </p>
<p>For instance, to get a list with the items you're looking for,</p>
<pre><code>from itertools import chain, permutations, product

list(chain.from_iterable(map(permutations, product(*items, 'df'))))

# [('a', 'b', 'c', 'd'),
#  ('a', 'b', 'd', 'c'),
#  ('a', 'c', 'b', 'd'),
#  ('a', 'c', 'd', 'b'),
#  ('a', 'd', 'b', 'c'),
#  ('a', 'd', 'c', 'b'),
#  ('b', 'a', 'c', 'd'),
#  ('b', 'a', 'd', 'c'),
#  ('b', 'c', 'a', 'd'),
#  ('b', 'c', 'd', 'a'),
#  ('b', 'd', 'a', 'c'),
#  ('b', 'd', 'c', 'a'),
#  ('c', 'a', 'b', 'd'),
#  ('c', 'a', 'd', 'b'),
#  ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>like this for example</p>
<pre><code>items = ['a', 'b', 'c','d']
from itertools import permutations
for p in permutations(items):
     print(p)

items = ['a', 'b', 'c','f']
from itertools import permutations
for p in permutations(items):
     print(p)
</code></pre>
</div>
<span class="comment-copy">But then if I want to add many characters with the OR statement this is going to be extremely long ...</span>
<span class="comment-copy">@Mbaps - then you can put that in a loop.</span>
