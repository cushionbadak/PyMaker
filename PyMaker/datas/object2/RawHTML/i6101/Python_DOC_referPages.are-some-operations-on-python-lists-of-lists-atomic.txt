<div class="post-text" itemprop="text">
<p>Obviously, lists themselves are not thread safe. However, some operations on them are atomic meaning that no thread can force itself into the execution of that instruction.</p>
<p>Assuming that L is a list: </p>
<pre><code>L = [1,2,3,4]
</code></pre>
<p>I know that </p>
<pre><code>x = L[2] # is atomic. 
</code></pre>
<p>Now assuming that I have a list of list; </p>
<pre><code>L = [ [1, 2, 3], [4, 5, 6] ]
</code></pre>
<p>Further, assume the entire list structure is fixed but the individual values are not i.e. there will always be 2 lists of 3 items.</p>
<p>I know that <code>L[1] = [7,8,9]</code> is atomic meaning <code>L[1]</code> will at some point change to exactly <code>[7,8,9]</code> however there is no guarantee when or for how long.</p>
<ol>
<li>Is <code>L[1][2] = 10</code> atomic? </li>
<li><code>x = L[1]</code> is still atomic right?</li>
<li>Do the answers to 1. and 2. hold irrespective of what the list items are i.e. list of objects?</li>
</ol>
<p>I think all the answers are yes, but don't know.</p>
</div>
<div class="post-text" itemprop="text">
<p>No. Generally no.</p>
<p>We know that a single bytecode instruction is atomic in CPython, 
but a = does not have to result in a single bytecode instruction:</p>
<pre><code>&gt;&gt;&gt; import diss
&gt;&gt;&gt; l = [1,2]
&gt;&gt;&gt; def foo():
...    global l
...    x = l[1]
... 
&gt;&gt;&gt; dis.dis(foo)
  3           0 LOAD_GLOBAL              0 (l)
              3 LOAD_CONST               1 (1)
              6 BINARY_SUBSCR       
              7 STORE_FAST               0 (x)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
&gt;&gt;&gt; 
</code></pre>
<p>This = op is interpreted into 3 bytecode instructions (from index 3 to 7),  that means one thread could give up GIL and let other thread in which makes modifications then return GIL to the first thread. This is where surprises happen.</p>
<p>So whenever you need thread safety, use a lock.</p>
</div>
<span class="comment-copy">of course, <code>L[1][2] = 10</code> could not be safe in case if <code>L[1]</code> is dynamic/mutable value <b>shared</b> between many threads</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/6319207/are-lists-thread-safe" title="are lists thread safe">stackoverflow.com/questions/6319207/are-lists-thread-safe</a></span>
<span class="comment-copy">@RomanPerekhrest TY for your answer but what I mean by thread safe is L[1][2] will at some point change to exactly [10] however there is no guarantee when or for how long.</span>
<span class="comment-copy">@Theo I had read all of the answers to that link and their subsequent links but was not sure if it also applied to lists of lists and whether it was indifferent to the item types in the list</span>
<span class="comment-copy"><code>list</code>s aren't thread-safe, regardless of their contents. <code>list</code>s-of-<code>list</code>s doubly so.</span>
<span class="comment-copy">Are you sure as that is contrary to [link](<a href="HTTP://effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm" rel="nofollow noreferrer">HTTP://effbot.org/pyfaq/â€¦</a>)</span>
<span class="comment-copy">@PaulO Yes, I'm pretty sure. Here lists (and other critical built-in types) are thread safe means that concurrent access won't corrupt list itself but no guarantees are made for list's data. check this out <a href="http://effbot.org/zone/thread-synchronization.htm" rel="nofollow noreferrer">effbot.org/zone/thread-synchronization.htm</a></span>
<span class="comment-copy">But what about <a href="https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe" rel="nofollow noreferrer">https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe</a> it says L1[i:j] = L2 is atomic (Thank you for answering I jsut want to make sure the answer is right)</span>
