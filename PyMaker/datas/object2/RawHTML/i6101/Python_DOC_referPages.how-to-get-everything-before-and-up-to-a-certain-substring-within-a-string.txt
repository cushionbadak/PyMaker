<div class="post-text" itemprop="text">
<p>How would I return a string up to a certain character?</p>
<pre><code>def get_header(s):
    '''(str) -&gt; str
    Return the start of the given string upto and including
    &lt;/head&gt;.'''
    return (s.split('&lt;/head&gt;')[0])
</code></pre>
<p>this is what i did but, I don't know how i would get everything before the "  "&lt;"/heads"&gt;"" and including it.</p>
<p>for example:</p>
<pre><code>s ="hello python world &lt;/head&gt; , i'm a beginner "
get_header(s)
</code></pre>
<p>this would return </p>
<pre class="lang-none prettyprint-override"><code>"hello python world "&lt;"/head"&gt;"   #without the quotient marks around the &lt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code should work, but won't include <code>"&lt;/head&gt;"</code>, so just add it at the end:</p>
<pre><code>def get_header(s):
    '''(str) -&gt; str
    Return the start of the given string upto and including
    &lt;/head&gt;.'''
    return s.split('&lt;/head&gt;')[0] + "&lt;/head&gt;"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This would be a fairly easy thing to do with Python's <a href="https://docs.python.org/3/library/re.html#module-re" rel="nofollow noreferrer"><code>re</code></a> module which matches a "regular expression" (or regex) to a string.</p>
<p>Here's how to use it to do what you want:</p>
<pre><code>import re

def get_header(s):
    """(str) -&gt; str
    Return the start of the given string upto and including &lt;/head&gt;.
    """
    matches = re.search(r".*&lt;/head&gt;", s)
    return matches.group(0) if matches else None

s = "hello python world &lt;/head&gt; , i'm a beginner "
print(get_header(s))  # -&gt; hello python world &lt;/head&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> is a third-party library that implements a <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.split_after" rel="nofollow noreferrer"><code>split_after</code></a> tool.  Install via:</p>
<pre><code>&gt; pip install more_itertools
</code></pre>
<p><strong>Given</strong></p>
<pre><code>import more_itertools as mit


s = "hello python world &lt;/head&gt; , i'm a beginner "
</code></pre>
<p><strong>Code</strong></p>
<pre><code>pred = lambda x: x == "&lt;/head&gt;"
" ".join(next(mit.split_after(s.split(), pred)))
# 'hello python world &lt;/head&gt;'
</code></pre>
<p>The string is split by spaces into "words".  The full string is split after any words that suit the predicate.  The first result is joined together.</p>
</div>
<span class="comment-copy">post a sample input and expected output.</span>
