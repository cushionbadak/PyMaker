<div class="post-text" itemprop="text">
<p>I am an artist. I have Python installed. It works. What I am trying to do is to create images on a white screen (window) based on reiterative algorithms. I can't seem to get anything to put dots on a window. If I could just get a bit of python code that, and the library(s) that contain that code, based on an x,y coordinate, that could draw a dot in that window I pretty much could figure out the rest. Also would be nice to vary the color of the dot.
So flow control would look like:</p>
<ol>
<li>Calculate an x,y coordinate (my equations would do that)</li>
<li>Specify a dot color (this might always be the same color)</li>
<li>Draw the dot at the specified coordinate.</li>
<li>Pump the x y answers from 1 above back into equation and calculate a new x,y coordinate.</li>
<li>Loop to 2 above a specified number of times.</li>
</ol>
<p>I can pretty much figure all this out but the "draw the colored dot" is beyond me.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the <code>dot()</code> method in the turtle library that comes with Python is your simplest solution:</p>
<pre><code>from random import randint, choice
from turtle import Turtle, Screen

COLORS = ['red', 'green', 'blue', 'magenta', 'yellow', 'cyan']

screen = Screen()

width, height = screen.window_width(), screen.window_height()

turtle = Turtle(visible=False)
turtle.speed('fastest')
turtle.penup()

for _ in range(randint(10, 100)):
    radius = randint(5, 45)

    x = randint(radius - width//2, width//2 - radius)
    y = randint(radius - height//2, height//2 - radius)

    turtle.setposition(x, y)
    turtle.dot(radius * 2, choice(COLORS))

screen.exitonclick()
</code></pre>
<p><a href="https://i.stack.imgur.com/mzQVT.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/mzQVT.png"/></a></p>
<p>Turtle also has a <code>circle()</code> method but it draws from the edge of a circle (based on a radius instead of a diameter) not the center like the <code>dot()</code> method.  One advantage of <code>circle()</code> is the outline and fill can be different colors unlike <code>dot()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you install the <a href="https://www.pygame.org/" rel="nofollow noreferrer">Pygame</a> module? Something like <code>pip install pygame</code> from a command line might work for you. If that's not working for you, then look at <a href="https://docs.python.org/3/library/turtle.html" rel="nofollow noreferrer">turtle</a> as suggested by <a href="https://stackoverflow.com/users/6912078/vijay-kalmath">Vijay</a> above, it's included in your python installation.</p>
<p>Here's an example using Pygame that draws random circles on a window that should be suitable for you to modify for your purposes:</p>
<pre><code>import pygame
import random

def get_random_position():
    """return a random (x,y) position in the screen"""
    return (random.randint(0, screen_width - 1),  #randint includes both endpoints.
            random.randint(0, screen_height - 1)) 

def get_random_named_color():
    """return one of the builtin colors"""
    return random.choice(all_colors)

all_colors = list(pygame.colordict.THECOLORS.items())  
# convert color dictionar to a list for random selection once

if __name__ == "__main__":
    pygame.init()
    screen_width,screen_height = 640, 480
    surface = pygame.display.set_mode((screen_width,screen_height))
    pygame.display.set_caption('Random Circles')
    clock = pygame.time.Clock() #for limiting FPS
    FPS = 10
    exit_demo = False
    # start with a white background
    surface.fill(pygame.Color("white"))
    while not exit_demo:
        for event in pygame.event.get():            
            if event.type == pygame.QUIT:
                exit_demo = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    # fill the screen with white, erasing everything
                    surface.fill(pygame.Color("white"))
                # Up/Down arrows to change FPS limit
                elif event.key == pygame.K_UP:
                    FPS *= 2
                elif  event.key == pygame.K_DOWN:
                    FPS /= 2
        # calculate the properties of a circle
        name, random_color = get_random_named_color()
        pos = get_random_position()
        circle_size = random.randint(1,10)
        pygame.draw.circle(surface, random_color, pos, circle_size)
        #print("{} at {}".format(name, pos))
        pygame.display.update()
        clock.tick(FPS)
    pygame.quit()
    quit()
</code></pre>
<p>Press the escape key to clear the screen and use the up and down arrows to change the speed. Close the window by pressing the X on the title bar.</p>
</div>
<span class="comment-copy">SO is not a coding service, you should try to solve your problem and if at that moment you have some difficulty then at that time you publish a question detailing the inconvenience. In addition, the task you ask is done by several libraries so you will find multiple answers, also in SO you will find many codes, please perform the search before asking.</span>
<span class="comment-copy">Check out Turtle graphics for Tk here <a href="https://docs.python.org/2/library/turtle.html#turtle.dot" rel="nofollow noreferrer">docs.python.org/2/library/turtle.html#turtle.dot</a></span>
<span class="comment-copy">This is a very broad question (and likely will be closed). You could use one of the many plotting programs to graph your points. For example: matplotlib.</span>
<span class="comment-copy">This may be more adapted than python for what you intend to do: <a href="https://www.youtube.com/watch?v=6vX8wT1G798&amp;list=PLRqwX-V7Uu6aFlwukCmDf0-1-uSR7mklK" rel="nofollow noreferrer">youtube.com/â€¦</a></span>
<span class="comment-copy">If you want to make a GUI program in python for plotting points, you can use Tkinter or pygame module which are really easy to implement. Have a look at them.</span>
<span class="comment-copy">Thank you all so very much for all the wonderful options. I believe I will go with the turtle option created by cdlane although the pygame snipit by Eric is very industrious. But a bit beyond my brain. I did come up with an option of my own (you guys will be so proud of me LOL) using Tkinter:  from tkinter import *  root = Tk()  canvas = Canvas(root, width=1000, height=900) canvas.pack()  # loop here #algorithm here line = canvas.create_oval(w,x,y,z,fill="red") #loop  root.mainloop()  I know the above is not actual code but if you put numbers in the wxyz spots it work.</span>
