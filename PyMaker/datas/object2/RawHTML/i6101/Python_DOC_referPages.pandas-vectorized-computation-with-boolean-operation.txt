<div class="post-text" itemprop="text">
<p>I'm working with boolean index in Pandas.
The question is why the statement:</p>
<pre><code>a[(a['some_column']==some_number) &amp; (a['some_other_column']==some_other_number)]
</code></pre>
<p>works fine whereas</p>
<pre><code>a[(a['some_column']==some_number) and (a['some_other_column']==some_other_number)]
</code></pre>
<p>exists with error?</p>
<p>Example:</p>
<pre><code>a=pd.DataFrame({'x':[1,1],'y':[10,20]})

In: a[(a['x']==1)&amp;(a['y']==10)]
Out:    x   y
     0  1  10

In: a[(a['x']==1) and (a['y']==10)]
Out: ValueError: The truth value of an array with more than one element is ambiguous.     Use a.any() or a.all()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you say</p>
<pre><code>(a['x']==1) and (a['y']==10)
</code></pre>
<p>You are implicitly asking Python to convert <code>(a['x']==1)</code> and <code>(a['y']==10)</code> to boolean values. </p>
<p>NumPy arrays (of length greater than 1) and Pandas objects such as Series do not have a boolean value -- in other words, they raise </p>
<pre><code>ValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().
</code></pre>
<p>when used as a boolean value. That's because its <a href="http://pandas.pydata.org/pandas-docs/dev/gotchas.html#using-if-truth-statements-with-pandas" rel="noreferrer">unclear when it should be True or False</a>. Some users might assume they are True if they have non-zero length, like a Python list. Others might desire for it to be True only if <strong>all</strong> its elements are True. Others might want it to be True if <strong>any</strong> of its elements are True. </p>
<p>Because there are so many conflicting expectations, the designers of NumPy and Pandas refuse to guess, and instead raise a ValueError.</p>
<p>Instead, you must be explicit, by calling the <code>empty()</code>, <code>all()</code> or <code>any()</code> method to indicate which behavior you desire.</p>
<p>In this case, however, it looks like you do not want boolean evaluation, you want <strong>element-wise</strong> logical-and. That is what the <code>&amp;</code> binary operator performs:</p>
<pre><code>(a['x']==1) &amp; (a['y']==10)
</code></pre>
<p>returns a boolean array. </p>
<hr/>
<p>By the way, as <a href="https://stackoverflow.com/questions/21415661/logic-operator-for-boolean-indexing-in-pandas/21415990?noredirect=1#comment77317569_21415990">alexpmil notes</a>, 
the parentheses are mandatory since <code>&amp;</code> has a higher <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a> than <code>==</code>.
Without the parentheses, <code>a['x']==1 &amp; a['y']==10</code> would be evaluated as <code>a['x'] == (1 &amp; a['y']) == 10</code> which would in turn be equivalent to the chained comparison <code>(a['x'] == (1 &amp; a['y'])) and ((1 &amp; a['y']) == 10)</code>. That is an expression of the form <code>Series and Series</code>.
The use of <code>and</code> with two Series would again trigger the same <code>ValueError</code> as above. That's why the parentheses are mandatory.</p>
</div>
<div class="post-text" itemprop="text">
<h1>TLDR; <sub>Logical Operators in Pandas are <code>&amp;</code>, <code>|</code> and <code>~</code>, and  parentheses <code>(...)</code> is important!</sub></h1>
<p>Python's <code>and</code>, <code>or</code> and <code>not</code> logical operators are designed to work with scalars. So Pandas had to do one better and override the bitwise operators to achieve <em>vectorized</em> (element-wise) version of this functionality. </p>
<p>So the following in python (<code>exp1</code> and <code>exp2</code> are expressions which evaluate to a boolean result)... </p>
<pre><code>exp1 and exp2              # Logical AND
exp1 or exp2               # Logical OR
not exp1                   # Logical NOT
</code></pre>
<p>...will translate to...</p>
<pre><code>exp1 &amp; exp2                # Element-wise logical AND
exp1 | exp2                # Element-wise logical OR
~exp1                      # Element-wise logical NOT
</code></pre>
<p>for pandas.</p>
<p>If in the process of performing logical operation you get a <code>ValueError</code>, then you need to use parentheses for grouping:</p>
<pre><code>(exp1) op (exp2)
</code></pre>
<p>For example,</p>
<pre><code>(df['col1'] == x) &amp; (df['col2'] == y) 
</code></pre>
<p>And so on.</p>
<hr/>
<p><a href="https://pandas-docs.github.io/pandas-docs-travis/user_guide/indexing.html#boolean-indexing" rel="nofollow noreferrer"><strong>Boolean Indexing</strong></a>: A common operation is to compute boolean masks through logical conditions to filter the data. Pandas provides <strong>three</strong> operators: <code>&amp;</code> for logical AND, <code>|</code> for logical OR, and <code>~</code> for logical NOT. </p>
<p>Consider the following setup:</p>
<pre><code>np.random.seed(0)
df = pd.DataFrame(np.random.choice(10, (5, 3)), columns=list('ABC'))
df

   A  B  C
0  5  0  3
1  3  7  9
2  3  5  2
3  4  7  6
4  8  8  1
</code></pre>
<h2><strong>Logical AND</strong></h2>
<p>For <code>df</code> above, say you'd like to return all rows where A &lt; 5 and B &gt; 5. This is done by computing masks for each condition separately, and ANDing them. </p>
<p><strong>Overloaded Bitwise <code>&amp;</code> Operator</strong><br/>
Before continuing, please take note of this particular excerpt of the docs, which state</p>
<blockquote>
<p>Another common operation is the use of boolean vectors to filter the
  data. The operators are: <code>|</code> for <code>or</code>, <code>&amp;</code> for <code>and</code>, and <code>~</code> for <code>not</code>. <strong>These
  must be grouped by using parentheses</strong>, since by default Python will
  evaluate an expression such as <code>df.A &gt; 2 &amp; df.B &lt; 3</code> as <code>df.A &gt; (2 &amp;
  df.B) &lt; 3</code>, while the desired evaluation order is <code>(df.A &gt; 2) &amp; (df.B &lt;
  3)</code>.</p>
</blockquote>
<p>So, with this in mind, element wise logical AND can be implemented with the bitwise operator <code>&amp;</code>: </p>
<pre><code>df['A'] &lt; 5

0    False
1     True
2     True
3     True
4    False
Name: A, dtype: bool

df['B'] &gt; 5

0    False
1     True
2    False
3     True
4     True
Name: B, dtype: bool
</code></pre>
<p></p>
<pre><code>(df['A'] &lt; 5) &amp; (df['B'] &gt; 5)

0    False
1     True
2    False
3     True
4    False
dtype: bool
</code></pre>
<p>And the subsequent filtering step is simply,</p>
<pre><code>df[(df['A'] &lt; 5) &amp; (df['B'] &gt; 5)]

   A  B  C
1  3  7  9
3  4  7  6
</code></pre>
<p>The parentheses are used to override the default precedence order of bitwise operators, which have higher precedence over the conditional operators <code>&lt;</code> and <code>&gt;</code>. See the section of <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">Operator Precedence</a> in the python docs. </p>
<p>If you do not use parentheses, the expression is evaluated incorrectly. For example, if you accidentally attempt something such as </p>
<pre><code>df['A'] &lt; 5 &amp; df['B'] &gt; 5
</code></pre>
<p>It is parsed as </p>
<pre><code>df['A'] &lt; (5 &amp; df['B']) &gt; 5
</code></pre>
<p>Which becomes, </p>
<pre><code>df['A'] &lt; something_you_dont_want &gt; 5
</code></pre>
<p>Which becomes (see the python docs on <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained operator comparison</a>),</p>
<pre><code>(df['A'] &lt; something_you_dont_want) and (something_you_dont_want &gt; 5)
</code></pre>
<p>Which becomes, </p>
<pre><code># Both operands are Series...
something_else_you_dont_want1 <b>and</b> something_else_you_dont_want2</code></pre>
<p>Which throws</p>
<pre><code>ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</code></pre>
<p>So, don't make that mistake!<sup>1</sup></p>
<p><strong>Avoiding Parentheses Grouping</strong><br/>
The fix is actually quite simple. Most operators have a corresponding bound method for DataFrames. If the individual masks are built up using functions instead of conditional operators, you will no longer need to group by parens to specify evaluation order:</p>
<pre><code>df['A'].lt(5)

0     True
1     True
2     True
3     True
4    False
Name: A, dtype: bool

df['B'].gt(5)

0    False
1     True
2    False
3     True
4     True
Name: B, dtype: bool
</code></pre>
<p></p>
<pre><code>df['A'].lt(5) &amp; df['B'].gt(5)

0    False
1     True
2    False
3     True
4    False
dtype: bool
</code></pre>
<p>See the section on <a href="https://pandas.pydata.org/pandas-docs/stable/basics.html#flexible-comparisons" rel="nofollow noreferrer">Flexible Comparisons.</a>. To summarise, we have</p>
<pre><code>╒════╤════════════╤════════════╕
│    │ Operator   │ Function   │
╞════╪════════════╪════════════╡
│  0 │ &gt;          │ gt         │
├────┼────────────┼────────────┤
│  1 │ &gt;=         │ ge         │
├────┼────────────┼────────────┤
│  2 │ &lt;          │ lt         │
├────┼────────────┼────────────┤
│  3 │ &lt;=         │ le         │
├────┼────────────┼────────────┤
│  4 │ ==         │ eq         │
├────┼────────────┼────────────┤
│  5 │ !=         │ ne         │
╘════╧════════════╧════════════╛
</code></pre>
<p>Another option for avoiding parentheses is to use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html" rel="nofollow noreferrer"><code>DataFrame.query</code></a> (or <code>eval</code>):</p>
<pre><code>df.query('A &lt; 5 and B &gt; 5')

   A  B  C
1  3  7  9
3  4  7  6
</code></pre>
<p>I have <em>extensively</em> documented <code>query</code> and <code>eval</code> in <a href="https://stackoverflow.com/q/53779986/4909087">Dynamic Expression Evaluation in pandas using pd.eval()</a>.</p>
<p><strong><a href="https://docs.python.org/3/library/operator.html#operator.and_" rel="nofollow noreferrer"><code>operator.and_</code></a></strong><br/>
Allows you to perform this operation in a functional manner. Internally calls <code>Series.__and__</code> which corresponds to the bitwise operator.</p>
<pre><code>import operator 

operator.and_(df['A'] &lt; 5, df['B'] &gt; 5)
# Same as,
# (df['A'] &lt; 5).__and__(df['B'] &gt; 5) 

0    False
1     True
2    False
3     True
4    False
dtype: bool

df[operator.and_(df['A'] &lt; 5, df['B'] &gt; 5)]

   A  B  C
1  3  7  9
3  4  7  6
</code></pre>
<p>You won't usually need this, but it is useful to know.</p>
<p><strong>Generalizing: <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.logical_and.html" rel="nofollow noreferrer"><code>np.logical_and</code></a> (and <code>logical_and.reduce</code>)</strong><br/>
Another alternative is using  <code>np.logical_and</code>, which also does not need parentheses grouping:</p>
<pre><code>np.logical_and(df['A'] &lt; 5, df['B'] &gt; 5)

0    False
1     True
2    False
3     True
4    False
Name: A, dtype: bool

df[np.logical_and(df['A'] &lt; 5, df['B'] &gt; 5)]

   A  B  C
1  3  7  9
3  4  7  6
</code></pre>
<p><code>np.logical_and</code> is a <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/ufuncs.html" rel="nofollow noreferrer">ufunc (Universal Functions)</a>, and most ufuncs have a <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.ufunc.reduce.html" rel="nofollow noreferrer"><code>reduce</code></a> method. This means it is easier to generalise with <code>logical_and</code> if you have multiple masks to AND. For example, to AND masks <code>m1</code> and <code>m2</code> and <code>m3</code> with <code>&amp;</code>, you would have to do </p>
<pre><code>m1 &amp; m2 &amp; m3
</code></pre>
<p>However, an easier option is </p>
<pre><code>np.logical_and.reduce([m1, m2, m3])
</code></pre>
<p>This is powerful, because it lets you build on top of this with more complex logic (for example, dynamically generating masks in a list comprehension and adding all of them):</p>
<pre><code>import operator

cols = ['A', 'B']
ops = [np.less, np.greater]
values = [5, 5]

m = np.logical_and.reduce([op(df[c], v) for op, c, v in zip(ops, cols, values)])
m 
# array([False,  True, False,  True, False])

df[m]
   A  B  C
1  3  7  9
3  4  7  6
</code></pre>
<p><sub>1 - I know I'm harping on this point, but please bear with me. This is a <em>very</em>, <em>very</em> common beginner's mistake, and must be explained very thoroughly. </sub></p>
<hr/>
<h1><strong>Logical OR</strong></h1>
<p>For the <code>df</code> above, say you'd like to return all rows where A == 3 or B == 7.</p>
<p><strong>Overloaded Bitwise <code>|</code></strong> </p>
<pre><code>df['A'] == 3

0    False
1     True
2     True
3    False
4    False
Name: A, dtype: bool

df['B'] == 7

0    False
1     True
2    False
3     True
4    False
Name: B, dtype: bool
</code></pre>
<p></p>
<pre><code>(df['A'] == 3) | (df['B'] == 7)

0    False
1     True
2     True
3     True
4    False
dtype: bool

df[(df['A'] == 3) | (df['B'] == 7)]

   A  B  C
1  3  7  9
2  3  5  2
3  4  7  6
</code></pre>
<p>If you haven't yet, please also read the section on <strong>Logical AND</strong> above, all caveats apply here.</p>
<p>Alternatively, this operation can be specified with </p>
<pre><code>df[df['A'].eq(3) | df['B'].eq(7)]

   A  B  C
1  3  7  9
2  3  5  2
3  4  7  6
</code></pre>
<p><strong><a href="https://docs.python.org/3/library/operator.html#operator.or_" rel="nofollow noreferrer"><code>operator.or_</code></a></strong><br/>
Calls <code>Series.__or__</code> under the hood.</p>
<pre><code>operator.or_(df['A'] == 3, df['B'] == 7)
# Same as,
# (df['A'] == 3).__or__(df['B'] == 7)

0    False
1     True
2     True
3     True
4    False
dtype: bool

df[operator.or_(df['A'] == 3, df['B'] == 7)]

   A  B  C
1  3  7  9
2  3  5  2
3  4  7  6
</code></pre>
<p><strong><a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.logical_or.html#numpy.logical_or" rel="nofollow noreferrer"><code>np.logical_or</code></a></strong><br/>
For two conditions, use <code>logical_or</code>:</p>
<pre><code>np.logical_or(df['A'] == 3, df['B'] == 7)

0    False
1     True
2     True
3     True
4    False
Name: A, dtype: bool

df[np.logical_or(df['A'] == 3, df['B'] == 7)]

   A  B  C
1  3  7  9
2  3  5  2
3  4  7  6
</code></pre>
<p>For multiple masks, use <code>logical_or.reduce</code>:</p>
<pre><code>np.logical_or.reduce([df['A'] == 3, df['B'] == 7])
# array([False,  True,  True,  True, False])

df[np.logical_or.reduce([df['A'] == 3, df['B'] == 7])]

   A  B  C
1  3  7  9
2  3  5  2
3  4  7  6
</code></pre>
<hr/>
<h1><strong>Logical NOT</strong></h1>
<p>Given a mask, such as </p>
<pre><code>mask = pd.Series([True, True, False])
</code></pre>
<p>If you need to invert every boolean value (so that the end result is <code>[False, False, True]</code>), then you can use any of the methods below.</p>
<p><strong>Bitwise <code>~</code></strong> </p>
<pre><code>~mask

0    False
1    False
2     True
dtype: bool
</code></pre>
<p>Again, expressions need to be parenthesised.</p>
<pre><code>~(df['A'] == 3)

0     True
1    False
2    False
3     True
4     True
Name: A, dtype: bool
</code></pre>
<p>This internally calls </p>
<pre><code>mask.__invert__()

0    False
1    False
2     True
dtype: bool
</code></pre>
<p>But don't use it directly.</p>
<p><strong><code>operator.inv</code></strong><br/>
Internally calls <code>__invert__</code> on the Series.</p>
<pre><code>operator.inv(mask)

0    False
1    False
2     True
dtype: bool
</code></pre>
<p><strong><a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.logical_not.html#numpy.logical_not" rel="nofollow noreferrer"><code>np.logical_not</code></a></strong><br/>
This is the numpy variant.</p>
<pre><code>np.logical_not(mask)

0    False
1    False
2     True
dtype: bool
</code></pre>
<hr/>
<p>Note, <code>np.logical_and</code> can be substituted for <code>np.bitwise_and</code>, <code>logical_or</code> with <code>bitwise_or</code>, and <code>logical_not</code> with <code>invert</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Logical operators for boolean indexing in Pandas</p>
</blockquote>
<p>It's important to realize that you cannot use any of the Python <em>logical operators</em> (<code>and</code>, <code>or</code> or <code>not</code>) on <code>pandas.Series</code> or <code>pandas.DataFrame</code>s (similarly you cannot use them on <code>numpy.array</code>s with more than one element). The reason why you cannot use those is because they implicitly call <code>bool</code> on their operands which throws an Exception because these data structures decided that the boolean of an array is ambiguous:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; arr = np.array([1,2,3])
&gt;&gt;&gt; s = pd.Series([1,2,3])
&gt;&gt;&gt; df = pd.DataFrame([1,2,3])
&gt;&gt;&gt; bool(arr)
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
&gt;&gt;&gt; bool(s)
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; bool(df)
ValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</code></pre>
<p>I did cover this more extensively <a href="https://stackoverflow.com/a/36922103/5393381"> in my answer to the "Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()" Q+A</a>.</p>
<h2>NumPys logical functions</h2>
<p>However <a href="https://docs.scipy.org/doc/numpy/reference/routines.logic.html" rel="nofollow noreferrer">NumPy</a> provides element-wise operating equivalents to these operators as functions that can be used on <code>numpy.array</code>, <code>pandas.Series</code>, <code>pandas.DataFrame</code>, or any other (conforming) <code>numpy.array</code> subclass:</p>
<ul>
<li><code>and</code> has <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html#numpy.logical_and" rel="nofollow noreferrer"><code>np.logical_and</code></a></li>
<li><code>or</code> has <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html#numpy.logical_or" rel="nofollow noreferrer"><code>np.logical_or</code></a></li>
<li><code>not</code> has <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_not.html#numpy.logical_not" rel="nofollow noreferrer"><code>np.logical_not</code></a></li>
<li><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_xor.html#numpy.logical_xor" rel="nofollow noreferrer"><code>numpy.logical_xor</code></a> which has no Python equivalent but is a logical <a href="https://en.wikipedia.org/wiki/XOR_gate" rel="nofollow noreferrer">"exclusive or"</a> operation </li>
</ul>
<p>So, essentially, one should use (assuming <code>df1</code> and <code>df2</code> are pandas DataFrames):</p>
<pre><code>np.logical_and(df1, df2)
np.logical_or(df1, df2)
np.logical_not(df1)
np.logical_xor(df1, df2)
</code></pre>
<h2>Bitwise functions and bitwise operators for booleans</h2>
<p>However in case you have boolean NumPy array, pandas Series, or pandas DataFrames you could also use the <a href="https://docs.scipy.org/doc/numpy/reference/routines.bitwise.html#elementwise-bit-operations" rel="nofollow noreferrer">element-wise bitwise functions</a> (for booleans they are - or at least should be - indistinguishable from the logical functions):</p>
<ul>
<li>bitwise and: <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_and.html#numpy.bitwise_and" rel="nofollow noreferrer"><code>np.bitwise_and</code></a> or the <code>&amp;</code> operator</li>
<li>bitwise or: <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_or.html#numpy.bitwise_or" rel="nofollow noreferrer"><code>np.bitwise_or</code></a> or the <code>|</code> operator</li>
<li>bitwise not: <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.invert.html#numpy.invert" rel="nofollow noreferrer"><code>np.invert</code></a> (or the alias <code>np.bitwise_not</code>) or the <code>~</code> operator</li>
<li>bitwise xor: <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_xor.html#numpy.bitwise_xor" rel="nofollow noreferrer"><code>np.bitwise_xor</code></a> or the <code>^</code> operator</li>
</ul>
<p>Typically the operators are used. However when combined with comparison operators one has to remember to wrap the comparison in parenthesis because the bitwise operators have a <a href="https://docs.python.org/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher precedence than the comparison operators</a>:</p>
<pre><code>(df1 &lt; 10) | (df2 &gt; 10)  # instead of the wrong df1 &lt; 10 | df2 &gt; 10
</code></pre>
<p>This may be irritating because the Python logical operators have a lower precendence than the comparison operators so you normally write <code>a &lt; 10 and b &gt; 10</code> (where <code>a</code> and <code>b</code> are for example simple integers) and don't need the parenthesis.</p>
<h2>Differences between logical and bitwise operations (on non-booleans)</h2>
<p>It is really important to stress that bit and logical operations are only equivalent for boolean NumPy arrays (and boolean Series &amp; DataFrames). If these don't contain booleans then the operations will give different results. I'll include examples using NumPy arrays but the results will be similar for the pandas data structures:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a1 = np.array([0, 0, 1, 1])
&gt;&gt;&gt; a2 = np.array([0, 1, 0, 1])

&gt;&gt;&gt; np.logical_and(a1, a2)
array([False, False, False,  True])
&gt;&gt;&gt; np.bitwise_and(a1, a2)
array([0, 0, 0, 1], dtype=int32)
</code></pre>
<p>And since NumPy (and similarly pandas) does different things for boolean (<a href="https://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays" rel="nofollow noreferrer">Boolean or “mask” index arrays</a>) and integer (<a href="https://docs.scipy.org/doc/numpy/user/basics.indexing.html#index-arrays" rel="nofollow noreferrer">Index arrays</a>) indices the results of indexing will be also be different:</p>
<pre><code>&gt;&gt;&gt; a3 = np.array([1, 2, 3, 4])

&gt;&gt;&gt; a3[np.logical_and(a1, a2)]
array([4])
&gt;&gt;&gt; a3[np.bitwise_and(a1, a2)]
array([1, 1, 1, 2])
</code></pre>
<h2>Summary table</h2>
<pre class="lang-none prettyprint-override"><code>Logical operator | NumPy logical function | NumPy bitwise function | Bitwise operator
-------------------------------------------------------------------------------------
       and       |  np.logical_and        | np.bitwise_and         |        &amp;
-------------------------------------------------------------------------------------
       or        |  np.logical_or         | np.bitwise_or          |        |
-------------------------------------------------------------------------------------
                 |  np.logical_xor        | np.bitwise_xor         |        ^
-------------------------------------------------------------------------------------
       not       |  np.logical_not        | np.invert              |        ~
</code></pre>
<p>Where <strong>the logical operator does not work for NumPy arrays</strong>, pandas Series, and pandas DataFrames. The others work on these data structures (and plain Python objects) and work element-wise.
However be careful with the bitwise invert on plain Python <code>bool</code>s because the bool will be interpreted as integers in this context (for example <code>~False</code> returns <code>-1</code> and <code>~True</code> returns <code>-2</code>).</p>
</div>
<span class="comment-copy">This is because numpy arrays and pandas series use the bitwise operators rather than logical as you are comparing every element in the array/series with another. It therefore does not make sense to use the logical operator in this situation. see related: <a href="http://stackoverflow.com/questions/8632033/how-to-perform-element-wise-boolean-operations-on-arrays" title="how to perform element wise boolean operations on arrays">stackoverflow.com/questions/8632033/…</a></span>
<span class="comment-copy">In Python <code>and != &amp;</code>.  The <code>and</code> operator in Python cannot be overridden, whereas the <code>&amp;</code> operator (<code>__and__</code>) can.  Hence the choice the use <code>&amp;</code> in numpy and pandas.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/36921951/4909087">Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()</a></span>
<span class="comment-copy">numpy arrays do have this property <i>if</i> they are length one. Only pandas devs (stubbornly) refuse to guess :p</span>
<span class="comment-copy">Discussion here: <a href="https://groups.google.com/forum/#!topic/pydata/XzSHSLlTSZ8" rel="nofollow noreferrer">groups.google.com/forum/#!topic/pydata/XzSHSLlTSZ8</a></span>
<span class="comment-copy">Doesn't '&amp;' carry the same ambiguous curve as 'and'? How come when it comes to '&amp;', suddenly all users all agree it should be element-wise, while when they see 'and', their expectations vary?</span>
<span class="comment-copy">@Indominus: <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">The Python language itself requires</a> that the expression <code>x and y</code> triggers the evaluation of <code>bool(x)</code> and <code>bool(y)</code>. Python "first evaluates <code>x</code>; if <code>x</code> is false, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned." So the syntax <code>x and y</code> can not be used for element-wised logical-and since only <code>x</code> or <code>y</code> can be returned. In contrast, <code>x &amp; y</code> triggers <code>x.__and__(y)</code> and the <code>__and__</code> method can be defined to return anything we like.</span>
<span class="comment-copy">Important to note: the parentheses around the <code>==</code> clause are <i>mandatory</i>. <code>a['x']==1 &amp; a['y']==10</code> returns the same error as in the question.</span>
