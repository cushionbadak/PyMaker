<div class="post-text" itemprop="text">
<p>The following two expressions return <code>True</code></p>
<pre><code>'2'.isdigit()
chr(178).isdigit()
</code></pre>
<p>the later is exponent.</p>
<p>I am looking for a way to distinguish them for all numbers</p>
</div>
<div class="post-text" itemprop="text">
<p>This is <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">as documented</a>.</p>
<blockquote>
<p><strong>str.isdigit()</strong></p>
<p>Return true if all characters in the string are digits
  and there is at least one character, false otherwise. <strong>Digits include
  decimal characters and digits that need special handling, such as the
  compatibility superscript digits.</strong> This covers digits which cannot be
  used to form numbers in base 10, like the Kharosthi numbers. Formally,
  a digit is a character that has the property value Numeric_Type=Digit
  or Numeric_Type=Decimal.</p>
</blockquote>
<p>If you want to check if python is able to parse a string as a number, an idiomatic approach is to use try-except.</p>
<pre><code>def is_really_digit(s):
   try:
      int(s)
      return True
   except ValueError:
      return False
</code></pre>
</div>
<span class="comment-copy">Erm... <code>'0' &lt;= c &lt;= '9'</code>?</span>
<span class="comment-copy">... provided that <code>c</code> is just a single character. Of course, you can use <code>all(...)</code> for longer strings.</span>
<span class="comment-copy">That's actually an interesting question. I always thought that every <code>isdigit</code> number could be converted to <code>int</code>, but this can't.</span>
<span class="comment-copy">Thank you! I wonder if above suggestion <code>'0' &lt;= c &lt;= '9'</code> is quicker</span>
<span class="comment-copy">The other suggestion is quicker, but both are executed in a few microseconds, so the difference only matters in very performance critical code.</span>
<span class="comment-copy">“Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.” (Donald Knuth)</span>
<span class="comment-copy">Thank you, I have seen this quote before, but forgot who said it. I totally agree with it.</span>
