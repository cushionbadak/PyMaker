<div class="post-text" itemprop="text">
<p>I am am trying to find out, if I can somehow find a matrix exponential in kind of closed form for the symbolic matrix:</p>
<pre><code>n=3;
a = symbols(['a'+str(1+k) for k in range(n)], real=True);
Ts = symbols('T_s',real=True,positive=True);
A = Matrix([zeros(1,n),eye(1,n),a])
</code></pre>
<p>however</p>
<pre><code>expm(A)
</code></pre>
<p>seems not to work, "TypeError: cannot create mpf from a1"!
Then I tried to get an estimate using the series expansion, but again:</p>
<pre><code>Sum(A**n, (n, 0, 1))
</code></pre>
<p>gives: "ValueError: Matrix det == 0; not invertible". I guess they try to get the power of the matrix by joran blocks and my structure is not good for that. How can I proceed anyway? <code>A**2</code> can be calculated, but the sum over <code>A**1</code> and <code>A**0</code> not?!</p>
</div>
<div class="post-text" itemprop="text">
<p>The method <code>expm</code> belongs to mpmath library, used by SymPy for numerical calculations. It only works for numerical matrices.</p>
<p>SymPy uses <code>exp</code> for <a href="http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.exp" rel="nofollow noreferrer">matrix exponentiation</a>. I recommend using it with <code>simplify</code>, as the output of <code>exp</code>  for your matrix is more complex than it could be. The simplified result, <code>simplify(exp(A))</code>,  is</p>
<pre><code>Matrix([
[                                          1,                   0,       0],
[                                          1,                   1,       0],
[(-a2*a3 + (a1*a3 + a2)*(exp(a3) - 1))/a3**2, a2*(exp(a3) - 1)/a3, exp(a3)]])
</code></pre>
<hr/>
<p>If one wishes to compute a partial sum of the power series for exp(A), the way to do it is not </p>
<pre><code>Sum(A**n / factorial(n), (n, 0, 5))
</code></pre>
<p>because the above will attempt to raise A to <strong>symbolic</strong> power n before plugging in specific values. Raising a matrix to symbolic power is   implemented only for invertible A; it's hard to imagine what it should be for non-invertible ones. Instead, use Python's <code>sum</code>, giving it a zero matrix as <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">initial value of the accumulator</a>: </p>
<pre><code>sum([A**n / factorial(n) for n in range(6)], zeros(*(A.shape)))
</code></pre>
</div>
<span class="comment-copy">Thank you very much! I still wonder, why the sum didn't work, but exp exactly does the job! Nice! I grow to love sympy!</span>
<span class="comment-copy">Very glad for the 2 explanations! Much to learn here! Much appreciated!</span>
