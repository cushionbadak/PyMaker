<div class="post-text" itemprop="text">
<p>I am having trouble getting my test to run as expected. I am trying to mock the return value for two properties and a method for one test but instead of getting the desired return value I get a MagicMock object.</p>
<p>I can not figure out how to do this. The thing that irritates me the most is that mocking the method works as expected but for the two properties it does not.
Is this a problem I am having because I am using properties or because of the foreignkey relationships or am I doing something basic wrong?</p>
<p>I am using Django 1.8, Python2.7, model-mommy, unittests, mock</p>
<p>Here are some snippets of my code, I hope they are sufficient to understand the situation:</p>
<p>App1 called producers</p>
<pre><code># In producers.models.Producer:

    @property
    def is_valid(self):
        # do stuff
        return True
</code></pre>
<p>App2 called customers</p>
<pre><code># In customers.models.Customer:

    @property
    def is_valid(self):
        # do stuff
        return True

    def is_allowed_to_purchase_from_producer(producer):
        # do stuff
        return True
</code></pre>
<p>App3 called purchases</p>
<pre><code># In purchases.models

class Purchase(BaseModel):

    producer = ForeignKey('Producers.Producer', related_name="purchase")
    customer = ForeignKey('Customers.Customer', related_name="purchase")


    def clean(self):
        if not self.producer.is_valid:
            rasie ValidationError
        if not self.customer.is_valid:
            raise ValidationError
        if not self.customer.is_allowed_to_purchase_from_producer(self.producer):
            raise ValidationError
</code></pre>
<p>A test for the clean method of the Purchase model</p>
<pre><code># test_models.py, in PurchaseTestSuite

    @mock.patch('producers.models.Producer.is_valid')
    @mock.patch('customers.models.Customer.is_valid')
    @mock.patch('customers.models.Customer.is_allowed_to_purchase_from_producer')
    def test__clean(self, mock__customer_is_allowed_to_purchase, mock__customer_is_valid, mock__producer_is_valid):

        mock__producer_is_valid.return_value = True
        mock__customer_is_valid.return_value = False
        mock__customer_is_allowed_to_purchase.return_value = False

        valid_purchase.clean()
</code></pre>
<ul>
<li>actually returned values for producer.is_valid: <code>&lt;MagicMock
name='is_valid' id='4465040784'&gt;</code> </li>
<li>actually returned values for
customer.is_valid: <code>&lt;MagicMock name='is_valid' id='4465109520'&gt;</code> </li>
<li>for customer.is_allowed_to_purchase_from_producer(producer): False</li>
</ul>
<p>When asserting if the properties have been called I get False but for the method I get True. Where is the differnce? What am I not seeing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to Daniel Roseman's comment and link to <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.PropertyMock" rel="nofollow noreferrer">PropertyMock</a> I managed to figure out how to get the tests running.</p>
<blockquote>
<p>A mock intended to be used as a property, or other descriptor, on a
  class. PropertyMock provides <strong>get</strong>() and <strong>set</strong>() methods so you
  can specify a return value when it is fetched.</p>
</blockquote>
<p>So for the example above, the simple solution is to use PropertyMock as follows for all properties:</p>
<pre><code>@mock.patch('producers.models.Producer.is_valid', new_callable=mock.PropertyMock)
</code></pre>
<p>The rest stays the same as in the above example.</p>
<p>I hope this helps if someone is having a similar problem.</p>
</div>
<span class="comment-copy">This is a property, you should use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.PropertyMock" rel="nofollow noreferrer">PropertyMock</a>.</span>
<span class="comment-copy">@DanielRoseman Thanks for the Link. I checked the Documentation but somehow did not stumble over PropertyMock, it seems rather obvious and hard to miss. I now managed to get it to work and postet an answer to document this.</span>
