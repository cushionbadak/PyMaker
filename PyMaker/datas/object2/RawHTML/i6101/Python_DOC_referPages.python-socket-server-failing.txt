<div class="post-text" itemprop="text">
<p>I'm trying to start a UDP server in python 3.</p>
<p>I copied the code from <a href="https://docs.python.org/3/library/socketserver.html?highlight=sockets#socketserver-udpserver-example" rel="nofollow noreferrer">this example.</a></p>
<p>This is my exact code.</p>
<pre><code>import socketserver

class MyUDPHandler(socketserver.BaseRequestHandler):
    """
    This class works similar to the TCP handler class, except that
    self.request consists of a pair of data and client socket, and since
    there is no connection the client address must be given explicitly
    when sending data back via sendto().
    """

    def handle(self):
        data = self.request[0].strip()
        socket = self.request[1]
        print("{} wrote:".format(self.client_address[0]))
        print(data)

if __name__ == "__main__":
    HOST, PORT = "localhost", 19446
    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:
        server.serve_forever()
</code></pre>
<p>I have only removed the reply from the handle method and changed the port number.</p>
<p>when i try to run it i get this</p>
<pre><code>$ sudo python3 test.py
  File "test.py", line 19, in &lt;module&gt;
    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:
AttributeError: __exit__
</code></pre>
<p>I am attempting to run this in Python 3.4.2 installed on a Raspberry Pi 3, it was working this morning.
I googled <code>AttributeError: __exit__</code> and found that <code>with</code> uses built in methods such as <code>__exit__</code> to gracefully close after it has finished running instructions indented after it.</p>
<p>The exact same code runs fine on my windows machine (Python 3.6.2) and the code used to run on my raspberry pi and the only thing i have done with it all day was install x11vnc server and plugged in a lot of USB devices. (A capture card and arduinos, no usb drives from untrusted sources).</p>
<p>So <strong>my question is</strong>, what can cause an <code>Attribute Error: __exit__</code> in the <code>socketserver</code> library.</p>
</div>
<div class="post-text" itemprop="text">
<p>context manager was added to <code>socketserver</code> in 3.6: <a href="https://bugs.python.org/issue26404" rel="nofollow noreferrer">https://bugs.python.org/issue26404</a>, with <a href="https://github.com/python/cpython/commit/0cab9c1ebaa11bb7838a552c671c903156262ab7" rel="nofollow noreferrer">commit</a>.</p>
<p>below 3.6, in 3.4.2, you have to call <code>server_close()</code> manually:</p>
<pre><code>try:
    server = socketserver.UDPServer((HOST, PORT), MyUDPHandler)
    server.serve_forever()
finally:
    server.server_close()
</code></pre>
</div>
<span class="comment-copy">You're probably running different versions of python on your rasberry pi and windows. Check this first. Chances are, the version on your pi is out of date.</span>
<span class="comment-copy">I am running 3.6.2 on windows and 3.4.2 on the raspi, I read through the 3.5 and 3.6 changelog and they dont claim to have made any changes to with or socketserver.</span>
<span class="comment-copy">"Changed in version 3.6: Support for the context manager protocol was added. Exiting the context manager is equivalent to calling server_close()."</span>
<span class="comment-copy">The <code>with foo() as bar:</code> syntax relies on <code>foo()</code> returning a context manager. So looks like this syntax in not supported until Python 3.6</span>
