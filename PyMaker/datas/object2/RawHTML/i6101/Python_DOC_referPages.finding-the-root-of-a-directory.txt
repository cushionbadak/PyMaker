<div class="post-text" itemprop="text">
<p>I am attempting to write a function in python that scans the contents of a directory at the script's level (once de-bugged I'll switch it to not needing to be at the same level but for this problem it's irrelevant) and recursively lists the paths to anything that is not a directory. The logic I am working with is:</p>
<p>If the parent "directory" is not a directory then it must be a file so print the path to it. Otherwise, for every "file" in that directory, if each "file" is not actually a directory, state the path to the file, and if the "file" is actually a directory, call the function again. </p>
<p>The environment I am using is as follows: I have the script at the same level as a directory named a, and inside a is a file d.txt, as well as another directory named b. Inside b is a file c.text. Per the way I would like this function to execute, first it should recognize that a is in fact a directory, and therefore begin to iterate over its contents. When it encounters d.txt, it should print out the path to it, and then when it encounters directory b it should begin to iterate over it's contents and thereby print the path to c.txt when it sees it. So in this example, the output of the script should be "C:\private\a\d.txt, C:\private\a\b\c.txt" but instead it is "C:\private\d.txt, C:\private\b". Here is the code thus far:</p>
<pre><code>import os

def find_root(directory):
    if not os.path.isdir(directory):
        print(os.path.abspath(directory))
    else:
        for file in os.listdir(directory):
            if not os.path.isdir(file):
                print(os.path.abspath(file))
            else:
                find_root(file)

find_root('a')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer">[Python]: os.<strong>listdir</strong>(<em>path</em>='.')</a>:</p>
<blockquote>
<p>Return a list containing the names of the entries in the directory given by <em>path</em>.</p>
</blockquote>
<p>but they are just <strong>basenames</strong>. So, in order for them to make sense, when you go a level deeper in the recursion either:</p>
<ol>
<li>Prepend the "current" folder to their name</li>
<li><code>cd</code> to each folder (and also, <code>cd</code> back when returning from recursion)</li>
</ol>
<p>Here's your code modified to use the 1<sup>st</sup> approach:</p>
<pre><code>import os

def find_root(path):
    if os.path.isdir(path):
        for item in os.listdir(path):
            full_item = os.path.join(path, item)
            if os.path.isdir(full_item):
                find_root(full_item)
            else:
                print(os.path.abspath(full_item))
    else:
        print(os.path.abspath(path))


if __name__ == "__main__":
    find_root("a")
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>I recreated your folder structure</li>
<li>I renamed some of the variables for clarity</li>
<li>I reversed the negate conditions</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>c:\Work\Dev\StackOverflow\q47193260&gt;"c:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" a.py
c:\Work\Dev\StackOverflow\q47193260\a\b\c.txt
c:\Work\Dev\StackOverflow\q47193260\a\d.txt
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Why can't you just use <code>os.walk</code>?</span>
<span class="comment-copy">So, what is your question?</span>
<span class="comment-copy">I could, but I'm deliberately trying to reinvent the wheel not for practical use but rather for understanding.</span>
<span class="comment-copy">Sorry, I guess I forgot to explicitly state it. I was just wondering why the output it incorrect, because it should be listing the paths to c.txt and d.txt but it's listing the paths to d.txt and b.</span>
<span class="comment-copy">@Spoobars OK, but a bit of advice: you should really mention that explicitly, at the very least, to prevent this from being closed as a duplicate. A brief "what am I trying to accomplish <i>and why</i>" is always a good thing to include.</span>
<span class="comment-copy">Did this answer your question?</span>
