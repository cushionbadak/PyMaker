<div class="post-text" itemprop="text">
<p>I'm working on a multiuser chat-like project that is supposed to handle connections from many clients at the same time. When a client connects, I <code>accept()</code> the connection and pass it to a <code>Client</code> class on its own thread that handles incoming data with a <code>self.socket.recv(1024)</code> loop. When data comes in, it is stored in a list called <code>data-queue</code>. Then I store this client in a list of <code>Clients</code>.</p>
<p>Once every 100ms, I iterate over every <code>Client</code> on my <code>Clients</code> list and check if the <code>data-queue</code> list is empty. If it is not, I print whatever I get by <code>pop()</code>-ing the list, and the client address.</p>
<p>The thing is, if many clients connect at the same time, only the first connected <code>Client</code> gets all data sent by them as if it was sent by him.</p>
<p>If Client A sends "Hi!" and Client B sends "Hi there!", the server just reads that as if Client A had been the one who send both "Hi!" and "Hi there!" and Client B had stood silent the whole time. If Client A disconnects, all input from further Clients is treated as if it had been sent by the first-remaining Client (in this case Client B, as Client A has left), and so on.</p>
<p>What could it be?</p>
<p><strong>Edit</strong>:</p>
<p>The source code goes somewhat like this:</p>
<pre><code>CLIENTS = []

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('', 1515))
    s.listen(5)
    runCycle()
    while True:
        CLIENTS.append(client(s.accept()))
        CLIENTS[len(CLIENTS)-1].start()

class client(threading.Thread):
    dataQueue = []

    def __init__(self, (socket, address)):
        self.socket = socket
        self.address = address
        threading.Thread.__init__(self)

    def run(self):
        self.data = ""
        while True:
            self.data = self.socket.recv(1024)
            if not self.data:
                break
            dataQueue.append(self.address + " " + self.data)
            self.data = ""

def runCycle():
    threading.Timer(0.1, runCycle).start()
    for c in CLIENTS:
        if len(c.dataQueue) &gt; 0:
            print c.dataQueue.pop()

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class client(threading.Thread):
    dataQueue = []
</code></pre>
<p>This means <code>dataQueue</code> is static and the same instance of <code>[]</code> is shared across threads. Iterating over clients is fruitless in this case, you can just read it from any client object:</p>
<pre><code>&gt;&gt;&gt; class C(object):
...   a = []
... 
&gt;&gt;&gt; c1, c2 = C(), C()
&gt;&gt;&gt; c1.a.append(1)
&gt;&gt;&gt; c2.a
[1]
</code></pre>
<p>Move <code>dataQueue</code> into <code>__init__</code> to fix this.</p>
<pre><code>class client(threading.Thread):

    def __init__(self, (socket, address)):
        self.socket = socket
        self.address = address
        self.dataQueue = []
        threading.Thread.__init__(self)
</code></pre>
<p>And please look into guarding <code>self.dataQueue</code> with <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer">a lock</a>. Odds are lists aren't thread safe.</p>
</div>
<span class="comment-copy">Too few information,can you post Client's code, please</span>
<span class="comment-copy">There! Thank you~</span>
<span class="comment-copy">Oh! I thought variables declared within the class worked like private C++ class variables. Today I learn. You saved me, thank you very much!</span>
