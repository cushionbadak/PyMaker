<div class="post-text" itemprop="text">
<p>I'd like to generate some types at runtime from a config file. For simplity, let's assume I already have the data loaded as a python dictionary:</p>
<pre><code>color_values = dict(RED = 1, YELLOW = 2, GREEN = 3)
</code></pre>
<p>How can I transform this into the type (using <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code></a>)</p>
<pre><code>class Color(enum.Enum):
    RED = 1
    YELLOW = 2
    GREEN = 3
</code></pre>
<p>The following doesn't work</p>
<pre><code>def make_enum(name, values):
    return type(name, (enum.Enum,), values)
</code></pre>
<pre><code>&gt;&gt;&gt; Color = make_enum('Color', color_values)
AttributeError: 'dict' object has no attribute '_member_names'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>Color = Enum('Color', color_values)
</code></pre>
<p><a href="https://docs.python.org/3/library/enum.html#functional-api" rel="nofollow noreferrer">Tada!</a> There's a provided API for that. You can also give it an iterable of name-value pairs, or an iterable of just names (in which case the values will be auto-filled starting from 1), or a whitespace- or comma-separated string of names (which will also auto-fill values).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one super-hacky approach that seems to work:</p>
<pre><code>def make_enum(name, values):
    _k = _v = None
    class TheEnum(enum.Enum):
        nonlocal _k, _v
        for _k, _v in values.items():
            locals()[_k] = _v
    TheEnum.__name__ = name
    return TheEnum
</code></pre>
<p>We have to use <code>nonlocal</code> there to stop <code>Enum</code> complaining about the keys <code>k</code> and <code>v</code> being duplicated.</p>
</div>
<div class="post-text" itemprop="text">
<p>And another one that chooses to hit the metaclass internals instead:</p>
<pre><code>def make_enum(name, values):
    meta = type(enum.Enum)
    bases = (enum.Enum,)
    dict = meta.__prepare__(name, bases)
    for k, v in values.items():
        dict[k] = v
    return meta(name, bases, dict)
</code></pre>
<p>Or with less <code>__dunder__</code>:</p>
<pre><code>import types
def make_enum(name, values):
    def _update(d1, d2):
        for k, v in d2.items():
            d1[k] = v  # calls __setitem__
    return types.new_class(name, (enum.Enum,), None, lambda ns: _update(ns,values))
</code></pre>
</div>
<span class="comment-copy">You should probably use an OrderedDict rather than a regular dict.</span>
<span class="comment-copy">Relevant: <a href="https://stackoverflow.com/q/36932/1959808">stackoverflow.com/q/36932/1959808</a></span>
<span class="comment-copy">@IoannisFilippidis: In my defense, I remembered that question as being one pre-<code>enum.Enum</code>, which would just tell me to use it. Of course, you're right that it shows the example I needed there.</span>
<span class="comment-copy">Oh dear........</span>
