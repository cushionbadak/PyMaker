<div class="post-text" itemprop="text">
<p>I try to check if a variable is an instance of a number of any type (<code>int</code>, <code>float</code>, <code>Fraction</code>, <code>Decimal</code>, etc.).</p>
<p>I cam accross this question and its answer: <a href="https://stackoverflow.com/a/4187266/2291710">How to properly use python's isinstance() to check if a variable is a number?</a></p>
<p>However, I would like to exclude complex numbers such as <code>1j</code>.</p>
<p>The class <a href="https://docs.python.org/3.6/library/numbers.html#numbers.Real" rel="noreferrer"><code>numbers.Real</code></a> looked perfect but it returns <code>False</code> for <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal" rel="noreferrer"><code>Decimal</code></a> numbers...</p>
<pre><code>from numbers Real
from decimal import Decimal

print(isinstance(Decimal(1), Real))
# False
</code></pre>
<p>In contradiction, it works fine with <a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction" rel="noreferrer"><code>Fraction(1)</code></a> for example.</p>
<p>The <a href="https://docs.python.org/3.6/library/numbers.html#numbers.Real" rel="noreferrer">documentation</a> describes some operations which should work with the number, I tested them without any error on a decimal instance.
Decimal objects cannot contains complex numbers moreover.</p>
<p>So, why <code>isinstance(Decimal(1), Real)</code> would return <code>False</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>So, I found the answer directly in the source code of <a href="https://github.com/python/cpython/blob/9e78dc25179a492550dc602e47e7f4d24e3c89a3/Lib/numbers.py#L24-L30" rel="noreferrer"><code>cpython/numbers.py</code></a>:</p>
<pre><code>## Notes on Decimal
## ----------------
## Decimal has all of the methods specified by the Real abc, but it should
## not be registered as a Real because decimals do not interoperate with
## binary floats (i.e.  Decimal('3.14') + 2.71828 is undefined).  But,
## abstract reals are expected to interoperate (i.e. R1 + R2 should be
## expected to work if R1 and R2 are both Reals).
</code></pre>
<p>Indeed, adding <code>Decimal</code> to <code>float</code> would raise a <code>TypeError</code>.</p>
<p>In my point of view, it violates the principle of least astonishment, but it does not matter much.</p>
<p>As a workaround, I use:</p>
<pre><code>import numbers
import decimal

Real = (numbers.Real, decimal.Decimal)

print(isinstance(decimal.Decimal(1), Real))
# True
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.6/library/numbers.html#the-numeric-tower" rel="nofollow noreferrer">docs.python.org/3.6/library/numbers.html#the-numeric-tower</a></span>
<span class="comment-copy">@TomDalton I read it, but still I dont understand. <code>[isinstance(Decimal(1), t) for t in [Number, Complex, Real, Rational, Integral]]</code> returns <code>[True, False, False, False, False]</code>. If a <code>Decimal</code> is a <code>Number</code>, why it is not any of its sublasses?</span>
