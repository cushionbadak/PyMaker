<div class="post-text" itemprop="text">
<p>Here's my Post model:</p>
<pre><code>class Post(Base):
    __tablename__ = 'posts'

    title = db.Column(db.String(120), nullable=False)
    description = db.Column(db.String(2048), nullable=False)
</code></pre>
<p>I'd like to add Enum <code>status</code> to it. So, I've created a new Enum:</p>
<pre><code>import enum

class PostStatus(enum.Enum):
    DRAFT='draft'
    APPROVE='approve'
    PUBLISHED='published'
</code></pre>
<p>And added a new field to model:</p>
<pre><code>class Post(Base):
    ...
    status = db.Column(db.Enum(PostStatus), nullable=False, default=PostStatus.DRAFT.value, server_default=PostStatus.DRAFT.value)
</code></pre>
<p>After doing <code>FLASK_APP=server.py flask db migrate</code>, a such migration was generated:</p>
<pre><code>def upgrade():
    op.add_column('posts', sa.Column('status', sa.Enum('DRAFT', 'APPROVE', 'PUBLISHED', name='poststatus'), server_default='draft', nullable=False))
</code></pre>
<p>After trying to upgrade DB, I'm getting:</p>
<pre><code>sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) type "poststatus" does not exist
LINE 1: ALTER TABLE posts ADD COLUMN status poststatus DEFAULT 'draf...
                                            ^
 [SQL: "ALTER TABLE posts ADD COLUMN status poststatus DEFAULT 'draft' NOT NULL"]
</code></pre>
<ol>
<li>Why type <code>poststatus</code> was not created on DB-level automatically? In the similar migration it was.</li>
<li>How to specify <code>server_default</code> option properly? I need both ORM-level defaults and DB-level ones, because I'm altering existing rows, so ORM defaults are not applied.</li>
<li>Why real values in DB are 'DRAFT', 'APPROVE', 'PUBLISHED', but not <code>draft</code>, etc? I supposed there should be ENUM values, not names.</li>
</ol>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why real values in DB are 'DRAFT', 'APPROVE', 'PUBLISHED', but not draft, etc? I supposed there should be ENUM values, not names.</p>
</blockquote>
<p>As Peter Bašista's already mentioned SQLAlchemy uses the <strong>enum names</strong> (DRAFT, APPROVE, PUBLISHED) in the database. I assume that was done because the enum values ("draft", "approve", ...) can be arbitrary types in Python and they are not guaranteed to be unique (unless <code>@unique</code> is used).</p>
<p>However since <strong>SQLAlchemy 1.2.3</strong> the <code>Enum</code> class accepts a parameter <code>values_callable</code> which can be used to store <strong>enum values</strong> in the database:</p>
<pre><code>    status = db.Column(
        db.Enum(PostStatus, values_callable=lambda obj: [e.value for e in obj]),
        nullable=False,
        default=PostStatus.DRAFT.value,
        server_default=PostStatus.DRAFT.value
    )
</code></pre>
<blockquote>
<p>Why type poststatus was not created on DB-level automatically? In the similar migration it was.</p>
</blockquote>
<p>I think basically you are hitting a limitation of alembic: It won't handle enums on PostgreSQL correctly in some cases. I suspect the main issue in your case is <a href="https://github.com/sqlalchemy/alembic/issues/278" rel="nofollow noreferrer">Autogenerate doesn't correctly handle postgresql enums #278</a>.</p>
<p>I noticed that the type is created correctly if I use <code>alembic.op.create_table</code> so my workaround is basically:</p>
<pre><code>enum_type = SQLEnum(PostStatus, values_callable=lambda enum: [e.value for e in enum])
op.create_table(
    '_dummy',
    sa.Column('id', Integer, primary_key=True),
    sa.Column('status', enum_type)
)
op.drop_table('_dummy')
c_status = Column('status', enum_type, nullable=False)
add_column('posts', c_status)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I can only answer the third part of your question.</p>
<p>The <a href="https://docs.sqlalchemy.org/en/latest/core/type_basics.html#sqlalchemy.types.Enum" rel="nofollow noreferrer">documentation</a> for the <code>Enum</code> type in SQLAlchemy states that:</p>
<blockquote>
<p>Above, the string names of each element, e.g. “one”, “two”, “three”, are persisted to the database; the values of the Python Enum, here indicated as integers, are <strong>not</strong> used; the value of each enum can therefore be any kind of Python object whether or not it is persistable.</p>
</blockquote>
<p>So, it is by SQLAlchemy design that <code>Enum</code> <em>names</em>, not values are persisted into the database.</p>
</div>
<div class="post-text" itemprop="text">
<p>From official docs: <a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="nofollow noreferrer">https://docs.python.org/3/library/enum.html#creating-an-enum</a></p>
<pre><code>import enum

class PostStatus(enum.Enum):
    DRAFT = 0
    APPROVE = 1
    PUBLISHED = 2
</code></pre>
<p>According to this:</p>
<pre><code>class Post(Base):
    ...
    status = db.Column(db.Integer(), nullable=False, default=PostStatus.DRAFT.value, server_default=PostStatus.DRAFT.value)
</code></pre>
<p>1) <code>PostStatus</code> is not a DB-model, it's just a class which contains status ids;</p>
<p>2) it's OK</p>
<p>3) you don't have to store status strings in DB, you better use ids instead</p>
</div>
<span class="comment-copy">I don't see how your post answers the question;  1) for ENUMs in Postgres a new Postgres enum type has to be created (and the author is using Postgres) 3) I don't think that helps in any way if you are using Postgres, since Postgres will not be storing these as strings, just reference to the respective enum type values; it will also be much easier to understand what the values are if they are strings, if you need to look at the raw values at any time  See <a href="https://stackoverflow.com/a/37860817/294579">stackoverflow.com/a/37860817/294579</a> for a working solution to this problem.</span>
<span class="comment-copy">How do you know what version does author use? Is there anything in post I missed?</span>
