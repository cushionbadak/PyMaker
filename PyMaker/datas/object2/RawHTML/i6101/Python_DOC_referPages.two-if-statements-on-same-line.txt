<div class="post-text" itemprop="text">
<p>Very new to this, and cant seem to get these two to print on the same line. Python 3</p>
<pre><code> isCold= sys.argv[1] == 'True'

 isRainy= sys.argv[2] == 'True'

 if isCold:
   print "cold and",
 else:
   print "warm and ",

 if isRainy:
   print('rainy')
 else:
   print('dry')
</code></pre>
<p>Keep getting:</p>
<p>cold and</p>
<p>rainy</p>
<p>I need:</p>
<p>cold and rainy</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> has an <code>end</code> parameter whose default value is <code>\n</code>, a newline. Call the first prints with <code>print("cold and", end="")</code> and they won't skip to the next line.</p>
</div>
<div class="post-text" itemprop="text">
<p>on the end of each print statement there is a \n which means "enter" or "new line"</p>
<p>build your str with + signs and print the build-up string at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Each call to <code>print</code> will result in the text being printed on its own line because a new line character is appended. This is <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">mentioned in the documentation</a> - </p>
<pre><code>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
</code></pre>
<p>The default value for <code>end</code> is why you are seeing a new line after each call to <code>print</code>.</p>
<hr/>
<p>What you could do is build a string variable in your conditional statements and then only print once at the end - </p>
<pre><code>output = ''
 if isCold:
   output += "cold and"
 else:
   output += "warm and "

 if isRainy:
   output += 'rainy'
 else:
   output += 'dry'

print output
</code></pre>
<p>In addition, I see you are assigning string values instead of boolean values. In python <code>"True"</code> is not the same as <code>True</code>. You should assign proper boolean values. Take the following example - </p>
<pre><code>myBool = 'True'
if myBool:
  print('Bool is truthy')

myBool = 'False'
if myBool:
  print('Bool is STILL truthy')

myBool = False
if myBool:
  print('This should not be printed')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The print() function in Python takes more than one argument. One of the arguments is the <code>end</code>.</p>
<p>Now usually, the print function has a default argument of <code>end="\n"</code>, where <code>\n</code> is newline. This is the reason why your output comes as:<br/>
<em>cold and</em><br/>
<em>rainy</em> - instead of:<br/>
<em>cold and rainy</em></p>
<p>One solution to the many is to specify <code>end</code>. The <code>end</code> determines what the printed string will end with. For example:</p>
<pre><code>&gt;&gt;&gt; print("It is raining", end="!")

It is raining!

&gt;&gt;&gt; print("What", end=",")

What,
</code></pre>
<p>So to get your output on the same line, you can try the following:</p>
<pre><code>print("cold and", end="")
</code></pre>
<p>This will override the default argument of <code>'\n'</code> and you will get the desired output.</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than two print calls, you can create a single string and print once.</p>
<p>Consider:</p>
<pre><code>print("{} and {}".format(("warm", "cold")[isCold], ("dry", "rainy")[isRainy]))
</code></pre>
<p>In this case you are using the boolean value of each <code>iCold</code> and <code>isRainy</code> to index a tuple of strings to create a single string with all combinations.</p>
<p>You can also use the Python ternary to accomplish the same:</p>
<pre><code>print("{} and {}".format("cold" if isCold else "warm", "rainy" if isRainy else "dry"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also try this:</p>
<pre><code>if isCold:
   a = "cold and "
else:
   b = "warm and "

if isRainy:
   print(a+'rainy')
else:
   print(b+'dry')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a logical and:</p>
<pre><code>if sys.argv[1] == 'True' and sys.argv[2] == 'True':
    print("cold and rainy)
</code></pre>
</div>
<span class="comment-copy">Thank you this one seemed to work, except for my first isCold i needed to remove the + of the +=</span>
<span class="comment-copy">@Chartrand - happy to help :)</span>
<span class="comment-copy"><code>"True"</code>!= <code>True</code></span>
<span class="comment-copy">That's 'True' .</span>
