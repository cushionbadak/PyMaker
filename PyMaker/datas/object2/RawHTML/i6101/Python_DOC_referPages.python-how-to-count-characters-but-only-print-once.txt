<div class="post-text" itemprop="text">
<p>I am trying to figure out my code. The objective of the code is to create a character frequency counter. The character frequency counter must display the result in alphabetical order. So, the code must take input and display the number of characters like this:</p>
<p>input = ("apple")
'a' = 1</p>
<p>'e' = 1</p>
<p>'l' = 1</p>
<p>'p' = 2</p>
<p>Currently, my code does this:</p>
<p>'a' = 1</p>
<p>'e' = 1</p>
<p>'l' = 1</p>
<p>'p' = 2</p>
<p>'p' = 2</p>
<p>Any ideas for solving this problem? Ideally, I would only want 'p' to be displayed once, but count both characters.</p>
<p>Here is my code:</p>
<pre><code>char_dict = {}
user_input = input("Please enter a word or sentence: ")
user_input = user_input.replace(" ", "")
user_input = user_input.lower()
test_list = list(user_input)
test_list.sort()
for character in user_input:
    char_dict[character] = 0
for character in user_input:
    char_dict[character] = char_dict[character] + 1
for character in test_list:
    print (character, ":", char_dict[character])
</code></pre>
<p>Any help is appreciated greatly. Thank you so much!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have all right parts and pieces but the problem is actually simpler than you're making it:</p>
<pre><code>user_input = input("Please enter a word or sentence: ")
user_input = user_input.replace(" ", "")
user_input = user_input.lower()

char_dict = {}

for character in user_input:
    char_dict[character] = char_dict.get(character, 0) + 1

for character in sorted(char_dict):
    print(character, ":", char_dict[character])
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>&gt; python3 test.py
Please enter a word or sentence: apple
a : 1
e : 1
l : 1
p : 2
&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would write your program, using <a href="https://docs.python.org/3.6/library/collections.html" rel="nofollow noreferrer"><code>collections.Counter</code></a> and the new-fangled <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a>:</p>
<pre><code>from collections import Counter
word = input("What is your word? ")
letter_counts = Counter(word.lower())
sorted_letter_counts = sorted(letter_counts.items())
for letter, count in sorted_letter_counts:
    print(f"'{letter}' = {count}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this one too:</p>
<pre><code>string = "apple" #Input string
string = string.replace(" ","").lower() #In case of whitespace
setString = sorted(map(lambda i : [i,string.count(i)], set(string)))
for i in setString:
    print("%s : %d" % (i[0],i[1]))
</code></pre>
<p>Output:</p>
<pre><code>a : 1
e : 1
l : 1
p : 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can create some list of 'used symbols' and after you count any symbol, just add it to list.</p>
<pre><code>usedsymb=[]
for character in user_input:
    if usedsymb.count(character)==0:
        char_dict[character] +=1        (this will add 1)
        usedsymb.append(character)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get 'p' twice because you are looping across the word 'apple' which has 'p' in it twice. Try looping across the sorted list of keys in your dictionary as that will only ever have one unique key for each character.</p>
<p>So changing the 2nd to last line, and removing a couple of no longer needed lines :</p>
<pre><code>char_dict = {}
user_input = input("Please enter a word or sentence: ")
user_input = user_input.replace(" ", "")
user_input = user_input.lower()

for character in user_input:
    char_dict[character] = 0
for character in user_input:
    char_dict[character] = char_dict[character] + 1
for character in sorted(char_dict.keys()):
    print (character, ":", char_dict[character])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The one better solution I could think of is using the collections package in Python. It is a design pattern. The collection package has a method Counter which will give solution to your problem.</p>
<p>It is pretty simple and easy to use.</p>
<p>Following is the code block for that.</p>
<p><code>input_string = "apple"
from collections import Counter
result = Counter([i for i in input_string])
print (result)
</code> </p>
<p>This should do the magic trick for you. It is often better to use the design patterns because they will ease the work.</p>
<p>Using counter, you get your desired result in very few lines of code.</p>
</div>
<span class="comment-copy">Thank you all so much for the answers! My code runs perfectly now. Seriously can't thank you guys enough!</span>
<span class="comment-copy">Fails to control case properly, try 'Google' as input.</span>
<span class="comment-copy">I claim it gives the correct answer for 'Google', since "G" and "g" aren't the same. But, the change is easy enough: <code>letter_counts = Counter(word.lower())</code></span>
<span class="comment-copy">Just based the OP's original code.  Clearly an easy fix.  I love f-strings.</span>
<span class="comment-copy">Acknowledged. Thanks.</span>
<span class="comment-copy">Your call to <code>list()</code> doesn't appear to be necessary.</span>
<span class="comment-copy">@cdlane you're right. I will edit my answer.</span>
<span class="comment-copy">Why go to all this trouble when <code>char_dict.keys()</code> already contains the same characters as <code>usedsymb</code>?</span>
<span class="comment-copy"><code>sorted(char_dict.keys())</code> -&gt; <code>sorted(char_dict)</code></span>
<span class="comment-copy">@cdlane : I would stick with <code>sorted(char_dict.keys())</code> thanks. I work in an environment where up to 200 people at any one time may be looking at/editing the code and our coding standards dictate that clarity comes first. We specifically don't do things in what readers here might label 'the pythonic way' when all that means is lazily not typing characters because they're not needed by python, but are for reader clarity. I was explicitly sorting the array of keys as returned by the keys() operator, I was not sorting the dictionary as only the key and not the key value pair were retrieved.</span>
<span class="comment-copy">Or, more simply, the 3rd line could be <code>result = Counter(input_string)</code>.</span>
<span class="comment-copy">That's true. The answer gives the gist of the idea. You can code it in one line.</span>
