<div class="post-text" itemprop="text">
<p>I want to provide <code>eval</code> some compiled code (via <code>compile</code>) that when evaluated should update some variables in the <code>locals</code> I passed in. </p>
<pre><code>x = 5
global_dict = {'__builtins__': None}
local_dict = {'x': x}
code = compile("x = x * 2", "&lt;string&gt;", "single")

# This updates x
eval(code, global_dict, globals())

# This doesn't
eval(code, global_dict, local_dict)

# Nor does this...
eval(code, global_dict, globals().copy())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You <em>could</em> do it like this (it works in CPython 3.6.3 anyway), although it not OK to update the dictionary returned by <code>locals()</code> (see <strong>Note</strong> in the <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">documentation</a>.</p>
<pre><code>x = 5
code = compile("x = x * 2", "&lt;string&gt;", "single")
eval(code, locals())
print('x:', x)  # -&gt; x: 10
</code></pre>
<p>Note, too, as @juanpa.arrivillaga pointed out in a comment, that at the module-level, <code>locals()</code>is the same as <code>globals()</code>â€”so you can avoid the restriction by using it instead. In other words, <code>eval(code, globals())</code> would be better and avoids the issue.</p>
<p>(I verified that they're the same with an <code>assert locals() == globals()</code> at the beginning of the code to verify they're the same.)</p>
</div>
<span class="comment-copy"><i><code>local_dict</code> is updated</i>... what exactly do you want?</span>
<span class="comment-copy">Are you expecting <code>local_dict['x']</code> to be the <code>x</code> global variable you defined? <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">That's not how variables work in Python.</a></span>
<span class="comment-copy">The <code>{'x': x}</code> doesn't create a reference to the local variable <code>x</code> defined at the beginning of your code snippet, so it's not doing what (I think) you want (and I don't think is possible).</span>
<span class="comment-copy">I want <code>x</code> to be updated. I have a few variables that I want to pass in as the context for eval. The code is eval should be able to edit / change those variables, but ONLY those variables.</span>
<span class="comment-copy">@juanpa.arrivillaga that works! Thanks. I didn't realize that locals was being updated. Could post a formal answer so I can accept it.</span>
<span class="comment-copy">probably good to point out that in the global scope, <code>locals() is globals()</code>.</span>
<span class="comment-copy">@juanpa.arrivillaga: Since that's the case, do you know for sure it would make it OK to modify the returned dictionary (or should one just use <code>globals()</code> instead if this is being done at the module-level and not in a function?)</span>
<span class="comment-copy">Well, what do you mean by "OK"? My impressions is that you can modify the <code>dict</code> returned by <code>locals</code> all you want, but it isn't guaranteed to affect anything <b>unless</b> it happens to be <code>globals()</code> in disguise.</span>
<span class="comment-copy">@juanpa.arrivillaga: Never mind. Answer updated.</span>
