<div class="post-text" itemprop="text">
<p>I want to read from standard input chunk by chunk until EOF. For example, I could have a very large file, and I want to read in and process 1024 bytes at a time from STDIN until EOF is encountered. I've seen sys.stdin.read() which saves everything in memory at once. This isn't feasible because there might not be enough space available to store the entire file. There is also for "line in sys.stdin", but that separates the input by newline only, which is not what I'm looking for. Is there any way to accomplish this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>read()</code> method of a file object accepts an optional <code>size</code> parameter.</p>
<p>If you specify <code>size</code>, at most size bytes are read and returned. If the end of the file has been reached, f.read() will return an empty string ('').</p>
<p>See the <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">io docs</a> and <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">open() docs</a>.</p>
<p>Pseudo code:</p>
<pre><code>with open('file') as f:
    while True:
        buffer = f.read(1024) # Returns *at most* 1024 bytes, maybe less
        if buffer = '':
            break
        process_data(buffer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read stdin (or any file) in chunks using <code>f.read(n)</code>, where <code>n</code> is the integer number of bytes you want to read as an argument. It will return the empty string if there is nothing left in the file.</p>
</div>
<span class="comment-copy">Ah, silly of me to miss that. Thank you!</span>
