<div class="post-text" itemprop="text">
<p>I have a list of commands looking like this :</p>
<p>set_string equipment_type 3 Pump</p>
<p>All commands almost follow this template:</p>
<p><strong>cmd</strong>_<strong>type</strong> <strong>propertyname</strong> <strong>equipment_id</strong> <strong>value</strong></p>
<p>What I am trying to do is to go through a txt document full of this kind of commands and store all possible combinations of command statements. I am only interested in cmd, type, dimension of equipment_id and property name.</p>
<p>What I already did was using a dictionary with tuples (cmd,type,dimension) as keys and a set of property names as a value. </p>
<p>But I would like to add a notion of priority into this data structure : cmd then type then dimension. Is there a tree-like data structure in python that can permit me to store this kind of data? First layer would be : cmd, Second layer : type, Third layer would be : dimension and the leaves are the set of property names that can be used following the corresponding path in the tree.</p>
<p>Thank you for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use nested dicts, nested defaultdicts or a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">Trie</a>.</p>
<p>With standard dicts, you'd use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault</code></a>:</p>
<pre><code>tree = {}
tree.setdefault(cmd, {}).setdefault(cmd_type, {}).setdefault(dimension, []).append(prop)
</code></pre>
<p>It would give you a dict of dicts of dicts of lists.
If you want sets at the leaves, you could use:</p>
<pre><code>tree.setdefault(cmd, {}).setdefault(cmd_type, {}).setdefault(dimension, set()).add(prop)
</code></pre>
<p>As an example:</p>
<pre><code>data = [
  ('cmd1', 'typeA', 3, 'propertyX'),
  ('cmd1', 'typeA', 3, 'propertyZ'),
  ('cmd1', 'typeB', 2, 'propertyY'),
  ('cmd2', 'typeA', 3, 'propertyX'),
  ('cmd2', 'typeB', 1, 'propertyZ'),
  ('cmd2', 'typeA', 1, 'propertyX'),
  ('cmd1', 'typeB', 2, 'propertyZ')
] 

tree = {}
for cmd, cmd_type, dimension, prop in data:
    tree.setdefault(cmd, {}).setdefault(cmd_type, {}).setdefault(dimension, []).append(prop)

from pprint import pprint
pprint(tree)
</code></pre>
<p>It outputs:</p>
<pre><code>{'cmd1': {'typeA': {3: ['propertyX', 'propertyZ']},
          'typeB': {2: ['propertyY', 'propertyZ']}},
 'cmd2': {'typeA': {1: ['propertyX'], 3: ['propertyX']},
          'typeB': {1: ['propertyZ']}}}
</code></pre>
<p>With defaultdicts, your code would look like:</p>
<pre><code>tree = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
for cmd, cmd_type, dimension, prop in data:
    tree[cmd][cmd_type][dimension].append(prop)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One relatively clean way is the infinetely nested <code>defaultdict</code> tree:</p>
<pre><code>from collections import defaultdict

def tree():
    return defaultdict(tree)

t = tree()
for cmd, type, dim, prop in (l.split() for l in open('file.txt')):
    t[cmd][type][dim][prop] = True
</code></pre>
<p>This will allow you to iterate through all props of one <code>(cmd, type, dim)</code> triplet via:</p>
<pre><code>for prop in t[cmd][type][dim]:
    # ...
</code></pre>
</div>
<span class="comment-copy">You can store another dictionary as a value.</span>
<span class="comment-copy">Thanks for the question, my reputation just got over <code>0b1000000000000000</code> :)</span>
<span class="comment-copy">I am still not sure how the point system works... all I know is that if my question gets downvoted I am blocked from asking questions for a while ^^'.</span>
<span class="comment-copy">This should work. But I need to have sets at the end because same combinations may repeat. In the last setdefault I can use set() instead of [ ]?</span>
<span class="comment-copy">@hamzakeurti: see the edit about sets</span>
<span class="comment-copy">That's a fun structure! You could add depth parameter to your tree in order to have another type (e.g. <code>set</code> or <code>list</code> at the leaves).</span>
<span class="comment-copy">@EricDuminil Yeah, it is definitely extendable, but I didn't want to clutter it to keep the main principle as clearly visible as possible (without passing down params etc.). Your answer had the OP covered already, but I felt this should be mentioned :) And with the <code>bool</code> at the end, you mimick a set at the previous level, after all.</span>
<span class="comment-copy">wow, it's awesome.</span>
