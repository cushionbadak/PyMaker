<div class="post-text" itemprop="text">
<p>I am trying to pass arguments to a function from a list using threads in python 
(Note:The values to the function should not be hard-coded and all the elements of the list will be passed.)
Please look at the sample code here:</p>
<pre><code>from threading import Thread
list=['john','doe','srav','dev','app']
def m1(name,prefix):
    for ele in range(2):
        print(name +prefix)

def main1():
    t1=Thread(target=m1,args=('abcd','john'))
    t2 = Thread(target=m1, args=('abcd', 'doe'))
    t1.start()
    t2.start()

if __name__ == '__main__':
    main1()
</code></pre>
<p>Here i hard-coded the values to the function ('john','doe')instead of that pass from the list and all the elements will be passed.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if I completely understand what you are looking to achieve. My understanding is that you want to start a separate thread for each value in your list, so each value gets processed "in parallel". I modified your <code>main1</code> function to do so:</p>
<pre><code>def main1():
  threads = [Thread(target=m1,args=('abcd',x)) for x in list]
  for thread in threads: thread.start()
  for thread in threads: thread.join()
</code></pre>
<p><code>threads = [Thread(target=m1,args=('abcd',x)) for x in list]</code> creates a separate thread for each value in the list.</p>
<p><code>for thread in threads: thread.start()</code> starts each thread.</p>
<p><code>for thread in threads: thread.join()</code> makes sure each thread is finished before returning from the <code>main1</code> function (if you would rathee return immediately, just delete this line).</p>
</div>
<div class="post-text" itemprop="text">
<p>Your tasks are well suited for use with the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a> module. In particular, <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map" rel="nofollow noreferrer"><code>Executor.map</code></a> applies a function to the elements of an iterable.</p>
<p>You can use something similar to the <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer"><code>ThreadPoolExecutor</code></a> example in the <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
from itertools import repeat

names = ['john', 'doe', 'srav', 'dev', 'app']
def m1(name, prefix):
    for _ in range(2):
        print(name + prefix)

with ThreadPoolExecutor(2) as executor:
    executor.map(m1, repeat('abcd', len(names)), names)
</code></pre>
<p>If you find the <code>repeat</code> syntax to be awkward, you have a couple of alternatives:</p>
<pre><code>with ThreadPoolExecutor(2) as executor:
    for name in names:
        executor.submit(m1, 'abcd', name)
</code></pre>
<p>OR</p>
<pre><code>with ThreadPoolExecutor(2) as executor:
    executor.map(lambda name: m1('abcd', name), names)
</code></pre>
<p>In all cases, the <code>with</code> block will implicitly call <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown" rel="nofollow noreferrer"><code>executor.shutdown</code></a>, which will wait for all the tasks to complete.</p>
<p>As a rule, don't call a variable <code>list</code>: it will shadow the name of the builtin class.</p>
</div>
<span class="comment-copy">Looks like you want an executor. It will let you map the function to each list element in a separate thread.</span>
<span class="comment-copy">Mad, can you provide sample code to do that i am new to python</span>
<span class="comment-copy">I'll do something in a bit</span>
