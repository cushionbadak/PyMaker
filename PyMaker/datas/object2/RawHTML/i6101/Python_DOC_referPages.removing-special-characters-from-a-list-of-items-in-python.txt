<div class="post-text" itemprop="text">
<pre><code>my_list = ["on@3", "two#", "thre%e"]
</code></pre>
<p>my expected output is,</p>
<pre><code>out_list = ["one","two","three"]
</code></pre>
<p>I cannot simply apply <code>strip()</code> to these items, please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another solution:</p>
<pre><code>import re
my_list= ["on@3", "two#", "thre%e"]
print [re.sub('[^a-zA-Z0-9]+', '', _) for _ in my_list]
</code></pre>
<p><strong>output:</strong></p>
<pre><code>['on3', 'two', 'three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate()</code> method</a>  to apply the same translation table to all strings:</p>
<pre><code>removetable = str.maketrans('', '', '@#%')
out_list = [s.translate(removetable) for s in my_list]
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans()</code> static method</a> is a helpful tool to produce the translation map; the first two arguments are empty strings because you are not replacing characters, only removing. The third string holds all characters you want to remove.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; my_list = ["on@3", "two#", "thre%e"]
&gt;&gt;&gt; removetable = str.maketrans('', '', '@#%')
&gt;&gt;&gt; [s.translate(removetable) for s in my_list]
['on3', 'two', 'three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>l_in = ["on@3", "two#", "thre%e"]
l_out = [''.join(e for e in string if e.isalnum()) for string in l_in]
print l_out
&gt;['on3', 'two', 'three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using two for loops</p>
<pre><code>l = ['@','#','%']
out_list = []
for x in my_list:
    for y in l:
        if y in x:
            x = x.replace(y,'')
            out_list.append(x)
            break
</code></pre>
<p>Using list comprehension</p>
<pre><code>out_list = [ x.replace(y,'')  for x in my_list for y in l if y in x ]
</code></pre>
<p>Assuming <code>3</code> in <code>on@3</code> is a typo, the output will be <code>on@3</code> and not <code>one</code> as expected</p>
</div>
<span class="comment-copy">write a function that will remove the special characters from one string, then use <code>map</code> or a list comprehension to apply that function to the list of strings.</span>
<span class="comment-copy">Thank you, @AdamSmith</span>
<span class="comment-copy">Where did the <code>3</code> in <code>on@3</code> go? Are you also replacing digits with letters?</span>
<span class="comment-copy">You have underspecified as well. What about other punctuation? What about whitespace? One of the answers below preserves only letters and digits for example.</span>
<span class="comment-copy">The first string in the list has <code>3</code> replaced by <code>e</code>.</span>
<span class="comment-copy">@roganjosh: <i>or</i> there is an error in the expected input or output. I've asked for clarification on the question. Note that none of the other answers address this too.</span>
<span class="comment-copy">Indeed you did, sorry. I jumped from question to your answer and then followed up your link, without seeing your comments under the question.</span>
<span class="comment-copy">Thanks for the solution, but this looping will take more time ]</span>
<span class="comment-copy">@pyd: you'd have to loop for stripping too.</span>
<span class="comment-copy">On the other hand, the <i>double loop</i> here is rather overkill.</span>
<span class="comment-copy">@MartijnPieters thanks! if I'm to use list comprehension doesn't that also have the same issue?</span>
<span class="comment-copy">A list comprehension doesnâ€™t alter the number of loops, no. All it does is make list building more efficient. What you need is a method to replace all characters with a single command, like <code>str.translate()</code>, at which point you have a single loop rather than a double.</span>
