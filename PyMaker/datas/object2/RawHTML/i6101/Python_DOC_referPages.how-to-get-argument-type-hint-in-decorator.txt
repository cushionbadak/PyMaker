<div class="post-text" itemprop="text">
<p>How can I do the following:</p>
<pre><code>import typing

def needs_parameter_type(decorated):
    def decorator(*args):
        [do something with the *type* of bar (aka args[0]), some_class]
        decorated(*args)
    return decorator

@needs_parameter_type
def foo(bar: SomeClass):
    …

foo(…)
</code></pre>
<p>The use case is to avoid the following repetition:</p>
<pre><code>@needs_parameter_type(SomeClass)
def foo(bar: SomeClass):
    …
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>These are stored in the <code>__annotations__</code> property of the function, you can access them by this:</p>
<pre><code>def needs_parameter_type(decorated):
    def decorator(*args):
        print(decorated.__annotations__)
        decorated(*args)
    return decorator

@needs_parameter_type
def foo(bar: int):
   pass

foo(1)
#  {"bar": &lt;class "int"&gt;}
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer">docs.python.org/3/library/typing.html#typing.get_type_hints</a></span>
<span class="comment-copy">are you just trying to make sure the type or the parameters is correct?</span>
<span class="comment-copy">@JackHoman Nope, it's more complicated than that.</span>
