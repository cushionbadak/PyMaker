<div class="post-text" itemprop="text">
<p>I came across a csv file which made me wonder what should be the correct processes to get the info out of it. I want to read each line and then each row in variables lastname, firstname and department but,</p>
<p>structure of the csv file is like this</p>
<pre><code>lastname, firstname (department)
</code></pre>
<p>lets say we have a name Jean-Claude Van Damme</p>
<pre><code>Van Damme, Jean-Claude (Karate-Master)
</code></pre>
<p>what would be the best way to separate such string and store in variables lastname, firstname and the department?</p>
<pre><code>import csv
import string
import re

file = open('path/testing_delimiters.csv', 'rb')
reader = csv.reader(file)
for row in reader:
    data = map(string.strip, row)
print data
# output so far
# ['Van Damme', 'Jean-Claude (Karate-Master)']
</code></pre>
<p>task is to separate Jean-Claude and (Karate-Master)</p>
<pre><code># expected output
# ['Van Damme', 'Jean-Claude', 'Karate-Master']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>Pandas</strong> library:</p>
<pre><code>import pandas as pd
df = pd.read_csv('your_file.csv',sep=',|\(',engine='python',header=None)
</code></pre>
<p>Use two separators <code>,</code> andd <code>(</code>
Then you can strip <code>)</code></p>
<pre><code>df[2]=df[2].str.strip(')')
</code></pre>
<p><code>[2]</code> in this case is column number.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use regular expressions and capturing groups:</p>
<pre><code>import re
s = 'Van Damme, Jean-Claude (Karate-Master)'
m = re.match(r'([^,]*),\s+([^,]+)\s+\(([^\(\)]*)\)', s)
lastname, firstname, department = m.groups()
# [^,]*   any non-comma, zero or more
# [^\(\)]*   any non-(), zero or more
# \s+   any whitespace char, one or more
# (...) capturing group
# \( \) match parenthesees, escaped because of special meaning
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if it's from a csv file, then I think you can import csv <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">module</a>. Then you can iterate it row by row and each row you need to split it by comma. On last name you can search word between the bracket using regex <code>\((.*?)\)</code>. at last you need to remove the bracket. </p>
</div>
<span class="comment-copy">What you have there is <i>not</i> a CSV file.</span>
<span class="comment-copy">What did you try?</span>
<span class="comment-copy">what's the expected output?</span>
<span class="comment-copy">There's no python in the question.</span>
<span class="comment-copy">@jorzylicious: We don't care about the data, we care about the data structure. Replace every name with <code>Donald Duck</code> if you wish.</span>
<span class="comment-copy">perfect! thanks :)</span>
<span class="comment-copy">Are the hyphens important to make this work?</span>
<span class="comment-copy">@PeterWood Which hyphens?</span>
<span class="comment-copy">Does <code>Jean-Claude</code> have to have a hyphen, or can it have a space? Same with <code>Karate-Master</code>.</span>
<span class="comment-copy">@PeterWood: The names can have any character expect a comma or a paren.</span>
<span class="comment-copy">@PeterWood Updated it so that the names can contain any non-comma and the departmetn any non-parentheses.</span>
