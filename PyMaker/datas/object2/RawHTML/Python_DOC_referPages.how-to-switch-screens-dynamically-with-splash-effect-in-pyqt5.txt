<div class="post-text" itemprop="text">
<p>I'm making a python application for switch screens in touchscreen display. I need to make switch screens dynamically with splash effect (not window effect), but I don't know how switch screens.</p>
<p>I have two screen class. The screen class have one button to switch the screens. </p>
<p>How do I switch screens?</p>
<p>Code:</p>
<pre><code>import sys
from PyQt5 import QtCore, QtGui, QtWidgets


class PicButton(QtWidgets.QPushButton):
    def __init__(self, pixmap, pixmap_pressed, width, height, id_button, parent=None):
        super(PicButton, self).__init__(parent)
        self.pixmap = pixmap
        self.pixmap_pressed = pixmap_pressed
        self.id_buton = id_button
        self.width = width
        self.height = height

    def paintEvent(self, event):
        if self.isDown():
            pix = self.pixmap_pressed
            print("Pressed button: ", self.id_buton)
        else:
            pix = self.pixmap

        painter = QtGui.QPainter(self)
        painter.drawPixmap(event.rect(), pix)

    def sizeHint(self):
        return QtCore.QSize(self.width, self.height)


class ScreenNext(QtWidgets.QWidget):
    def __init__(self):
        super().__init__(flags=QtCore.Qt.SplashScreen)

        self.setGeometry(800, 450, 800, 450)

        pixmap = QtGui.QPixmap("background.png")
        brush = QtGui.QBrush(pixmap)
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, brush)
        self.setPalette(palette)

        self.next_button = PicButton(QtGui.QPixmap("next_screen_up.png"),
                                QtGui.QPixmap("next_screen_down.png"), 111, 61, "next")

        hlayout = QtWidgets.QHBoxLayout(self)
        hlayout.addStretch()
        hlayout.addWidget(self.next_button)
        hlayout.addStretch()

        self.next_button.clicked.connect(self.switch_screen)

        self.show()

    def switch_screen(self):
        print("ScreenNext")


class ScreenReturn(QtWidgets.QWidget):
    def __init__(self):
        super().__init__(flags=QtCore.Qt.SplashScreen)

        self.setGeometry(800, 450, 800, 450)

        pixmap = QtGui.QPixmap("background.png")
        brush = QtGui.QBrush(pixmap)
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, brush)
        self.setPalette(palette)

        self.return_button = PicButton(QtGui.QPixmap("return_screen_up.png"),
                                QtGui.QPixmap("return_screen_down.png"), 111, 61, "return")

        hlayout = QtWidgets.QHBoxLayout(self)
        hlayout.addStretch()
        hlayout.addWidget(self.return_button)
        hlayout.addStretch()

        self.return_button.clicked.connect(self.switch_screen)

        self.show()

    def switch_screen(self):
        print("ScreenReturn")


if __name__ == '__main__':

    app = QtWidgets.QApplication(sys.argv)

    screen = ScreenReturn()

    sys.exit(app.exec_())
</code></pre>
<p>Get images in link: <a href="https://www.filedropper.com/images_1" rel="nofollow noreferrer">http://www.filedropper.com/images_1</a></p>
<p>Get gif demonstration in link: <a href="https://www.filedropper.com/display" rel="nofollow noreferrer">http://www.filedropper.com/display</a></p>
</div>
<div class="post-text" itemprop="text">
<p>According to the .gif that you share, you want the widget to occupy the entire screen, so you must use showFullScreen, on the other hand it is better to create a class that handles the transition, in this case ScreenManager will take care of making the transition when the signal associated is emitted.</p>
<pre><code>import sys
from functools import partial
from PyQt5 import QtCore, QtGui, QtWidgets


class PicButton(QtWidgets.QPushButton):
    def __init__(self, pixmap, pixmap_pressed, width, height, id_button, parent=None):
        super(PicButton, self).__init__(parent)
        self.pixmap = pixmap
        self.pixmap_pressed = pixmap_pressed
        self.id_buton = id_button
        self.setFixedSize(width, height)

    def paintEvent(self, event):
        if self.isDown():
            pix = self.pixmap_pressed
            print("Pressed button: ", self.id_buton)
        else:
            pix = self.pixmap

        painter = QtGui.QPainter(self)
        painter.drawPixmap(event.rect(), pix)

class ScreenNext(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setGeometry(800, 450, 800, 450)
        pixmap = QtGui.QPixmap("background.png")
        brush = QtGui.QBrush(pixmap)
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, brush)
        self.setPalette(palette)
        self.next_button = PicButton(QtGui.QPixmap("next_screen_up.png"),
                                QtGui.QPixmap("next_screen_down.png"), 111, 61, "next")
        hlayout = QtWidgets.QHBoxLayout(self)
        hlayout.addStretch()
        hlayout.addWidget(self.next_button)
        hlayout.addStretch()

class ScreenReturn(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setGeometry(800, 450, 800, 450)
        pixmap = QtGui.QPixmap("background.png")
        brush = QtGui.QBrush(pixmap)
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, brush)
        self.setPalette(palette)
        self.return_button = PicButton(QtGui.QPixmap("return_screen_up.png"),
                                QtGui.QPixmap("return_screen_down.png"), 111, 61, "return")
        hlayout = QtWidgets.QHBoxLayout(self)
        hlayout.addStretch()
        hlayout.addWidget(self.return_button)
        hlayout.addStretch()


class ScreenManager(QtCore.QObject):
    def __init__(self, parent=None):
        super(ScreenManager, self).__init__(parent)
        self._current_window = None

    def add_transition(self, signal, screen):
        conn = signal.connect(partial(self.open_window, screen))

    def open_window(self, window, *args):
        if self._current_window is not None:
            self._current_window.hide()
        window.showFullScreen()
        self._current_window = window

if __name__ == '__main__':

    app = QtWidgets.QApplication(sys.argv)
    screen1 = ScreenReturn()
    screen2 = ScreenNext()
    manager =  ScreenManager()
    manager.add_transition(screen1.return_button.clicked, screen2)
    manager.add_transition(screen2.next_button.clicked, screen1)
    screen1.showFullScreen()
    sys.exit(app.exec_())
</code></pre>
</div>
<span class="comment-copy">you could explain yourself better, perhaps showing a gif, video etc where that kind of effect is observed, also your link opens a blank page</span>
<span class="comment-copy">i've updated my images link and add a link for gif demonstration.</span>
<span class="comment-copy">I testing your code and its working, but I had to adapted for my application. But, the only problem I am facing is screen flashing during screen transaction. Can you help me? Get code in link: <a href="https://www.filedropper.com/screentransaction" rel="nofollow noreferrer">link</a></span>
