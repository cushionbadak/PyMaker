<div class="post-text" itemprop="text">
<p>I'm debugging a python script, and I want to watch a variable for a change (much like you can watch a memory adress in gdb).  Is there a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a really hacky way to do this with <code>pdb</code>. These commands can be put in your <code>~/.pdbrc</code> for automatic loading every time you use <code>pdb</code>.</p>
<pre><code>!global __currentframe, __stack; from inspect import currentframe as __currentframe, stack as __stack
!global __copy; from copy import copy as __copy
!global __Pdb; from pdb import Pdb as __Pdb
!global __pdb; __pdb = [__framerec[0].f_locals.get("pdb") or __framerec[0].f_locals.get("self") for __framerec in __stack() if (__framerec[0].f_locals.get("pdb") or __framerec[0].f_locals.get("self")).__class__ == __Pdb][-1]

alias _setup_watchpoint !global __key, __dict, __val; __key = '%1'; __dict = __currentframe().f_locals if __currentframe().f_locals.has_key(__key) else __currentframe().f_globals; __val = __copy(%1)

alias _nextwatch_internal next;; !if __dict[__key] == __val: __pdb.cmdqueue.append("_nextwatch_internal %1")
alias _stepwatch_internal step;; !if __dict[__key] == __val: __pdb.cmdqueue.append("_stepwatch_internal %1")

alias nextwatch __pdb.cmdqueue.extend(["_setup_watchpoint %1", "_nextwatch_internal"])
alias stepwatch __pdb.cmdqueue.extend(["_setup_watchpoint %1", "_stepwatch_internal"])
</code></pre>
<p>This adds two commands, <code>nextwatch</code> and <code>stepwatch</code> which each take a variable name <em>varname</em> as an argument. They will make a shallow copy of the current frame's local variable for <em>varname</em> if possible, and keep executing <code>next</code> or <code>step</code> respectively until what that name points to changes.</p>
<p>This works in CPython 2.7.2 but relies on some <code>pdb</code> internals so it will probably break elsewhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>For watching a variable when you are hitting a <strong>breakpoint</strong>, you can use the <code>commands</code> command. E.g. printing <code>some_variable</code> when hitting breakpoint #1 (<a href="https://docs.python.org/2/library/pdb.html" rel="nofollow noreferrer">canonical example from <code>pdb</code> doc</a>).</p>
<pre><code>(Pdb) commands 1
(com) print some_variable
(com) end
(Pdb)
</code></pre>
<p><em>Update for Python 3</em></p>
<pre><code>(Pdb) commands 1
(com) print(some_variable)
(com) end
(Pdb)
</code></pre>
<p>Additionally, you can use the <code>condition</code> command to ensure the breakpoint is only hit whenever the variable takes a certain value.</p>
<p>eg:</p>
<pre><code>(Pdb) condition 1 some_variable==some_value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For <strong>Python 3</strong>:</p>
<p>you can use <strong><a href="https://docs.python.org/3/library/pdb.html#pdbcommand-display" rel="nofollow noreferrer">display</a></strong> functionality of pdb</p>
<p>Once you hit the breakpoint just type </p>
<p>ipdb&gt; <strong>display</strong> <em>expression</em></p>
<p><strong>example:</strong></p>
<pre><code>ipdb&gt; display instance
display instance: &lt;AppUser: dmitry4&gt;
ipdb&gt; display instance.id
display instance.id: 9
ipdb&gt; display instance.university
display instance.university: &lt;University: @domain.com&gt;

ipdb&gt; display

Currently displaying:
instance.university: &lt;University: @domain.com&gt;
instance.id: 9
instance: &lt;AppUser: dmitry4&gt;
ipdb&gt; 
</code></pre>
<p>as you can see, each time you type display - it will print all of your watches (expressions). You can use builtin function <code>undisplay</code> to remove certain watch.</p>
<p>You can also use <strong>pp expression</strong> to prettyprint the expression (very useful)</p>
</div>
<div class="post-text" itemprop="text">
<p>A possible solution is to use <a href="https://pypi.python.org/pypi/pdbpp/" rel="nofollow noreferrer">pdb++</a>:</p>
<pre><code>pip install pdbpp
</code></pre>
<p>Then "mark" the object you want to watch with the decorator <code>@pdb.break_on_setattr</code>:</p>
<pre><code>from pdb import break_on_setattr
@break_on_setattr('bar')
class Foo(object):
    pass

f = Foo()
f.bar = 42    # the program breaks here
</code></pre>
<p>Here <code>pdb</code> will break on any change of the attribute <code>bar</code> on any Foo-object.</p>
<p><strong>Caveats</strong><br/>
Only invocations of the underlying <code>__setattr__</code>-method will trigger the breakpoint. This means that <code>f.bar = 'XYZ'</code> and <code>setattr(f, 'XYZ')</code> will work, but manipulating the <code>bar</code>-object will not trigger the breakpoint:</p>
<pre><code>f.bar = []
f.bar.append(7) # will NOT trigger breakpoint

f.bar = 2
f.bar += 5      # will trigger breakpoint
</code></pre>
<p><em>Note: <code>@break_on_setattr</code> is not part of the standard <code>pdb</code>-module. <code>pdb</code> is overridden/monkey-patched by the <code>pdbpp</code>-package.</em></p>
<p>You can also wrap an existing object (via its class) after <code>pdb.set_trace()</code>:</p>
<pre><code>(Pdb++) import pdb
(Pdb++) pdb.break_on_setattr('tree_id')(self.__class__)
(Pdb++) continue
</code></pre>
</div>
<span class="comment-copy">@WayneWerner: <a href="https://stackoverflow.com/questions/46822154/how-to-watch-a-variable-in-pudb" title="how to watch a variable in pudb">stackoverflow.com/questions/46822154/â€¦</a></span>
<span class="comment-copy">I copied the macros into my ~/.pdbrc file. However pdb tells me: NameError 'nextwatch' is undefiened. I Fall it like this: "nextwatch'(var)</span>
<span class="comment-copy">I am use python 3.5, mac, and it seems <code>.pdbrc</code> is not working. Even when I paste the code above into <code>(pdb):</code> environment, when I run <code>stepwatch</code> or <code>nextwatch</code>, it says <code>__dict</code> and others are not defined. Could you update your code for python 3.5? thanks</span>
<span class="comment-copy">As mentioned, this probably won't work in some other versions of Python. You are welcome to post a Python 3.5 version as a new answer.</span>
<span class="comment-copy">This should be the top answer. Easy, direct, teaches you a neat feature of pdb - the breakpoint commands.</span>
<span class="comment-copy">While it can be useful, it doesn't directly answer the question, which wants to watch for changes to variables, and then break at those changes, not just view the state of a variable at preset breakpoints.</span>
