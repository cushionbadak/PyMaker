<div class="post-text" itemprop="text">
<p>My script defines one main parser and multiple subparsers. I want to apply the <code>-p</code> argument to some subparsers. So far the code looks like this: </p>
<pre><code>parser = argparse.ArgumentParser(prog="myProg")
subparsers = parser.add_subparsers(title="actions")

parser.add_argument("-v", "--verbose",
                    action="store_true",
                    dest="VERBOSE",
                    help="run in verbose mode")

parser_create = subparsers.add_parser ("create", 
                                        help = "create the orbix environment")
parser_create.add_argument ("-p", 
                            type = int, 
                            required = True, 
                            help = "set db parameter")

# Update
parser_update = subparsers.add_parser ("update", 
                                        help = "update the orbix environment")
parser_update.add_argument ("-p", 
                            type = int, 
                            required = True, 
                            help = "set db parameter")
</code></pre>
<p>As you can see the <code>add_arument ("-p")</code> is repeated twice. I actually have a lot more subparsers. Is there a way to loop through the existing subparsers in order to avoid repetition?</p>
<p>For the record, I am using Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be achieved by defining a <a href="http://docs.python.org/library/argparse.html#parents">parent parser</a> containing the common option(s):</p>
<pre><code>[...]
parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument("-p", type=int, required=True,
                           help="set db parameter")
parser_create = subparsers.add_parser("create", parents=[parent_parser],
                                      help="create the orbix environment")
parser_update = subparsers.add_parser("update", parents=[parent_parser],
                                      help="update the orbix environment")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also loop over the subparsers and add the same option to all of them.</p>
<pre><code>parser = argparse.ArgumentParser(prog="myProg")
subparsers = parser.add_subparsers(title="actions")
parser.add_argument("-v", "--verbose",
                    action="store_true",
                    dest="VERBOSE",
                    help="run in verbose mode")

parser_create = subparsers.add_parser ("create", 
                                        help = "create the orbix environment")
parser_update = subparsers.add_parser ("update", 
                                        help = "update the orbix environment")

for subparser in [parser_create, parser_update]:
    subparser.add_argument ("-p", 
                            type = int, 
                            required = True, 
                            help = "set db parameter")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can loop over your subparsers in the folowing way.</p>
<pre><code>for name, subp in subparsers.choices.items():
    print(subp)
    subp.add_argument(dest='g', help='Inpput for g variable', default='7')
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/14918804/how-to-show-help-for-all-subparsers-in-argparse" title="how to show help for all subparsers in argparse">stackoverflow.com/questions/14918804/â€¦</a></span>
<span class="comment-copy">From <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">the docs</a>: "when a help message is requested from a subparser, only the help for that particular parser will be printed. The help message will not include parent parser or sibling parser messages." That seems like a major shortcoming of this strategy.</span>
<span class="comment-copy">I ended up adding a dummy argument to the root parser with a help message.</span>
<span class="comment-copy">@RyneEverett: that manual part is confusing and might be outdated, because it seems at least in Python 3.5.3 subparser <code>--help</code> includes arguments from the parent parser.</span>
<span class="comment-copy">i think that's a bad aproach, cause you need to loop over parameters. it's more DRY and redable the Sven Marnach answer.</span>
